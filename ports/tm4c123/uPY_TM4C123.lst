
uPY_TM4C123.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	c4 12 00 20 1d b9 01 00 81 b9 01 00 89 b9 01 00     ... ............
      10:	91 b9 01 00 91 b9 01 00 91 b9 01 00 00 00 00 00     ................
	...
      2c:	91 b9 01 00 91 b9 01 00 00 00 00 00 91 b9 01 00     ................
      3c:	91 b9 01 00 91 b9 01 00 91 b9 01 00 91 b9 01 00     ................
      4c:	91 b9 01 00 91 b9 01 00 91 b9 01 00 91 b9 01 00     ................
      5c:	91 b9 01 00 91 b9 01 00 91 b9 01 00 91 b9 01 00     ................
      6c:	91 b9 01 00 91 b9 01 00 91 b9 01 00 91 b9 01 00     ................
      7c:	91 b9 01 00 91 b9 01 00 91 b9 01 00 91 b9 01 00     ................
      8c:	91 b9 01 00 91 b9 01 00 91 b9 01 00 91 b9 01 00     ................
      9c:	91 b9 01 00 91 b9 01 00 91 b9 01 00 91 b9 01 00     ................
      ac:	91 b9 01 00 91 b9 01 00 91 b9 01 00 91 b9 01 00     ................
      bc:	91 b9 01 00 91 b9 01 00 91 b9 01 00 91 b9 01 00     ................
      cc:	91 b9 01 00 91 b9 01 00 91 b9 01 00 91 b9 01 00     ................
      dc:	91 b9 01 00 91 b9 01 00 00 00 00 00 00 00 00 00     ................
      ec:	91 b9 01 00 91 b9 01 00 91 b9 01 00 91 b9 01 00     ................
      fc:	91 b9 01 00 91 b9 01 00 91 b9 01 00 91 b9 01 00     ................
     10c:	91 b9 01 00 00 00 00 00 00 00 00 00 91 b9 01 00     ................
     11c:	91 b9 01 00 91 b9 01 00 91 b9 01 00 91 b9 01 00     ................
     12c:	91 b9 01 00 91 b9 01 00 91 b9 01 00 91 b9 01 00     ................
     13c:	91 b9 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     14c:	00 00 00 00 91 b9 01 00 91 b9 01 00 91 b9 01 00     ................
     15c:	91 b9 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     1b0:	91 b9 01 00 91 b9 01 00 91 b9 01 00 91 b9 01 00     ................
     1c0:	91 b9 01 00 91 b9 01 00 91 b9 01 00 91 b9 01 00     ................
     1d0:	91 b9 01 00 91 b9 01 00 91 b9 01 00 91 b9 01 00     ................
     1e0:	91 b9 01 00 91 b9 01 00 91 b9 01 00 00 00 00 00     ................
     1f0:	00 00 00 00 91 b9 01 00 91 b9 01 00 91 b9 01 00     ................
     200:	91 b9 01 00 91 b9 01 00 00 00 00 00 00 00 00 00     ................
     210:	91 b9 01 00 91 b9 01 00 91 b9 01 00 91 b9 01 00     ................
     220:	91 b9 01 00 91 b9 01 00 91 b9 01 00 91 b9 01 00     ................
     230:	91 b9 01 00 91 b9 01 00 91 b9 01 00 91 b9 01 00     ................
     240:	91 b9 01 00 91 b9 01 00 91 b9 01 00 91 b9 01 00     ................
     250:	91 b9 01 00 91 b9 01 00 91 b9 01 00 91 b9 01 00     ................
     260:	91 b9 01 00 91 b9 01 00 91 b9 01 00                 ............

0000026c <nlr_push_tail>:
// LTO can't see inside inline asm functions so explicitly mark nlr_push_tail as used
__attribute__((used)) unsigned int nlr_push_tail(nlr_buf_t *nlr);
#endif
#endif

unsigned int nlr_push_tail(nlr_buf_t *nlr) {
     26c:	b480      	push	{r7}
     26e:	b085      	sub	sp, #20
     270:	af00      	add	r7, sp, #0
     272:	6078      	str	r0, [r7, #4]
    nlr_buf_t **top = &MP_STATE_THREAD(nlr_top);
     274:	4b07      	ldr	r3, [pc, #28]	; (294 <nlr_push_tail+0x28>)
     276:	60fb      	str	r3, [r7, #12]
    nlr->prev = *top;
     278:	68fb      	ldr	r3, [r7, #12]
     27a:	681a      	ldr	r2, [r3, #0]
     27c:	687b      	ldr	r3, [r7, #4]
     27e:	601a      	str	r2, [r3, #0]
    MP_NLR_SAVE_PYSTACK(nlr);
    *top = nlr;
     280:	68fb      	ldr	r3, [r7, #12]
     282:	687a      	ldr	r2, [r7, #4]
     284:	601a      	str	r2, [r3, #0]
    return 0; // normal return
     286:	2300      	movs	r3, #0
}
     288:	4618      	mov	r0, r3
     28a:	3714      	adds	r7, #20
     28c:	46bd      	mov	sp, r7
     28e:	f85d 7b04 	ldr.w	r7, [sp], #4
     292:	4770      	bx	lr
     294:	200012fc 	.word	0x200012fc

00000298 <nlr_pop>:

void nlr_pop(void) {
     298:	b480      	push	{r7}
     29a:	b083      	sub	sp, #12
     29c:	af00      	add	r7, sp, #0
    nlr_buf_t **top = &MP_STATE_THREAD(nlr_top);
     29e:	4b06      	ldr	r3, [pc, #24]	; (2b8 <nlr_pop+0x20>)
     2a0:	607b      	str	r3, [r7, #4]
    *top = (*top)->prev;
     2a2:	687b      	ldr	r3, [r7, #4]
     2a4:	681b      	ldr	r3, [r3, #0]
     2a6:	681a      	ldr	r2, [r3, #0]
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	601a      	str	r2, [r3, #0]
}
     2ac:	bf00      	nop
     2ae:	370c      	adds	r7, #12
     2b0:	46bd      	mov	sp, r7
     2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
     2b6:	4770      	bx	lr
     2b8:	200012fc 	.word	0x200012fc

000002bc <nlr_push>:
// For reference, arm/thumb callee save regs are:
//      r4-r11, r13=sp

__attribute__((naked)) unsigned int nlr_push(nlr_buf_t *nlr) {

    __asm volatile (
     2bc:	60c4      	str	r4, [r0, #12]
     2be:	6105      	str	r5, [r0, #16]
     2c0:	6146      	str	r6, [r0, #20]
     2c2:	6187      	str	r7, [r0, #24]
     2c4:	f8c0 801c 	str.w	r8, [r0, #28]
     2c8:	f8c0 9020 	str.w	r9, [r0, #32]
     2cc:	f8c0 a024 	str.w	sl, [r0, #36]	; 0x24
     2d0:	f8c0 b028 	str.w	fp, [r0, #40]	; 0x28
     2d4:	f8c0 d02c 	str.w	sp, [r0, #44]	; 0x2c
     2d8:	f8c0 e008 	str.w	lr, [r0, #8]
     2dc:	f7ff bfc6 	b.w	26c <nlr_push_tail>

000002e0 <nlr_jump>:
    return 0;
    #endif
}

NORETURN void nlr_jump(void *val) {
    MP_NLR_JUMP_HEAD(val, top)
     2e0:	4a0d      	ldr	r2, [pc, #52]	; (318 <nlr_jump+0x38>)
NORETURN void nlr_jump(void *val) {
     2e2:	b508      	push	{r3, lr}
    MP_NLR_JUMP_HEAD(val, top)
     2e4:	68d3      	ldr	r3, [r2, #12]
     2e6:	b90b      	cbnz	r3, 2ec <nlr_jump+0xc>
     2e8:	f01b fa40 	bl	1b76c <nlr_jump_fail>
     2ec:	6819      	ldr	r1, [r3, #0]
     2ee:	6058      	str	r0, [r3, #4]
     2f0:	60d1      	str	r1, [r2, #12]

    __asm volatile (
     2f2:	4618      	mov	r0, r3
     2f4:	68c4      	ldr	r4, [r0, #12]
     2f6:	6905      	ldr	r5, [r0, #16]
     2f8:	6946      	ldr	r6, [r0, #20]
     2fa:	6987      	ldr	r7, [r0, #24]
     2fc:	f8d0 801c 	ldr.w	r8, [r0, #28]
     300:	f8d0 9020 	ldr.w	r9, [r0, #32]
     304:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
     308:	f8d0 b028 	ldr.w	fp, [r0, #40]	; 0x28
     30c:	f8d0 d02c 	ldr.w	sp, [r0, #44]	; 0x2c
     310:	f8d0 e008 	ldr.w	lr, [r0, #8]
     314:	2001      	movs	r0, #1
     316:	4770      	bx	lr
     318:	200012f0 	.word	0x200012f0

0000031c <m_malloc>:
    }
}

#endif // MICROPY_ENABLE_GC

void *m_malloc(size_t num_bytes) {
     31c:	b580      	push	{r7, lr}
     31e:	b084      	sub	sp, #16
     320:	af00      	add	r7, sp, #0
     322:	6078      	str	r0, [r7, #4]
    void *ptr = malloc(num_bytes);
     324:	2100      	movs	r1, #0
     326:	6878      	ldr	r0, [r7, #4]
     328:	f000 fb46 	bl	9b8 <gc_alloc>
     32c:	60f8      	str	r0, [r7, #12]
    if (ptr == NULL && num_bytes != 0) {
     32e:	68fb      	ldr	r3, [r7, #12]
     330:	2b00      	cmp	r3, #0
     332:	d105      	bne.n	340 <m_malloc+0x24>
     334:	687b      	ldr	r3, [r7, #4]
     336:	2b00      	cmp	r3, #0
     338:	d002      	beq.n	340 <m_malloc+0x24>
        m_malloc_fail(num_bytes);
     33a:	6878      	ldr	r0, [r7, #4]
     33c:	f00c fdfe 	bl	cf3c <m_malloc_fail>
    MP_STATE_MEM(total_bytes_allocated) += num_bytes;
    MP_STATE_MEM(current_bytes_allocated) += num_bytes;
    UPDATE_PEAK();
#endif
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
     340:	68fb      	ldr	r3, [r7, #12]
}
     342:	4618      	mov	r0, r3
     344:	3710      	adds	r7, #16
     346:	46bd      	mov	sp, r7
     348:	bd80      	pop	{r7, pc}
     34a:	bf00      	nop

0000034c <m_malloc_maybe>:

void *m_malloc_maybe(size_t num_bytes) {
     34c:	b580      	push	{r7, lr}
     34e:	b084      	sub	sp, #16
     350:	af00      	add	r7, sp, #0
     352:	6078      	str	r0, [r7, #4]
    void *ptr = malloc(num_bytes);
     354:	2100      	movs	r1, #0
     356:	6878      	ldr	r0, [r7, #4]
     358:	f000 fb2e 	bl	9b8 <gc_alloc>
     35c:	60f8      	str	r0, [r7, #12]
    MP_STATE_MEM(total_bytes_allocated) += num_bytes;
    MP_STATE_MEM(current_bytes_allocated) += num_bytes;
    UPDATE_PEAK();
#endif
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
     35e:	68fb      	ldr	r3, [r7, #12]
}
     360:	4618      	mov	r0, r3
     362:	3710      	adds	r7, #16
     364:	46bd      	mov	sp, r7
     366:	bd80      	pop	{r7, pc}

00000368 <m_malloc_with_finaliser>:

#if MICROPY_ENABLE_FINALISER
void *m_malloc_with_finaliser(size_t num_bytes) {
     368:	b580      	push	{r7, lr}
     36a:	b084      	sub	sp, #16
     36c:	af00      	add	r7, sp, #0
     36e:	6078      	str	r0, [r7, #4]
    void *ptr = malloc_with_finaliser(num_bytes);
     370:	2101      	movs	r1, #1
     372:	6878      	ldr	r0, [r7, #4]
     374:	f000 fb20 	bl	9b8 <gc_alloc>
     378:	60f8      	str	r0, [r7, #12]
    if (ptr == NULL && num_bytes != 0) {
     37a:	68fb      	ldr	r3, [r7, #12]
     37c:	2b00      	cmp	r3, #0
     37e:	d105      	bne.n	38c <m_malloc_with_finaliser+0x24>
     380:	687b      	ldr	r3, [r7, #4]
     382:	2b00      	cmp	r3, #0
     384:	d002      	beq.n	38c <m_malloc_with_finaliser+0x24>
        m_malloc_fail(num_bytes);
     386:	6878      	ldr	r0, [r7, #4]
     388:	f00c fdd8 	bl	cf3c <m_malloc_fail>
    MP_STATE_MEM(total_bytes_allocated) += num_bytes;
    MP_STATE_MEM(current_bytes_allocated) += num_bytes;
    UPDATE_PEAK();
#endif
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
     38c:	68fb      	ldr	r3, [r7, #12]
}
     38e:	4618      	mov	r0, r3
     390:	3710      	adds	r7, #16
     392:	46bd      	mov	sp, r7
     394:	bd80      	pop	{r7, pc}
     396:	bf00      	nop

00000398 <m_malloc0>:
#endif

void *m_malloc0(size_t num_bytes) {
     398:	b580      	push	{r7, lr}
     39a:	b084      	sub	sp, #16
     39c:	af00      	add	r7, sp, #0
     39e:	6078      	str	r0, [r7, #4]
    void *ptr = m_malloc(num_bytes);
     3a0:	6878      	ldr	r0, [r7, #4]
     3a2:	f7ff ffbb 	bl	31c <m_malloc>
     3a6:	60f8      	str	r0, [r7, #12]
    // If this config is set then the GC clears all memory, so we don't need to.
    #if !MICROPY_GC_CONSERVATIVE_CLEAR
    memset(ptr, 0, num_bytes);
    #endif
    return ptr;
     3a8:	68fb      	ldr	r3, [r7, #12]
}
     3aa:	4618      	mov	r0, r3
     3ac:	3710      	adds	r7, #16
     3ae:	46bd      	mov	sp, r7
     3b0:	bd80      	pop	{r7, pc}
     3b2:	bf00      	nop

000003b4 <m_realloc>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void *m_realloc(void *ptr, size_t old_num_bytes, size_t new_num_bytes) {
#else
void *m_realloc(void *ptr, size_t new_num_bytes) {
     3b4:	b580      	push	{r7, lr}
     3b6:	b084      	sub	sp, #16
     3b8:	af00      	add	r7, sp, #0
     3ba:	6078      	str	r0, [r7, #4]
     3bc:	6039      	str	r1, [r7, #0]
#endif
    void *new_ptr = realloc(ptr, new_num_bytes);
     3be:	2201      	movs	r2, #1
     3c0:	6839      	ldr	r1, [r7, #0]
     3c2:	6878      	ldr	r0, [r7, #4]
     3c4:	f000 fc08 	bl	bd8 <gc_realloc>
     3c8:	60f8      	str	r0, [r7, #12]
    if (new_ptr == NULL && new_num_bytes != 0) {
     3ca:	68fb      	ldr	r3, [r7, #12]
     3cc:	2b00      	cmp	r3, #0
     3ce:	d105      	bne.n	3dc <m_realloc+0x28>
     3d0:	683b      	ldr	r3, [r7, #0]
     3d2:	2b00      	cmp	r3, #0
     3d4:	d002      	beq.n	3dc <m_realloc+0x28>
        m_malloc_fail(new_num_bytes);
     3d6:	6838      	ldr	r0, [r7, #0]
     3d8:	f00c fdb0 	bl	cf3c <m_malloc_fail>
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, old_num_bytes, new_num_bytes, new_ptr);
    #else
    DEBUG_printf("realloc %p, %d : %p\n", ptr, new_num_bytes, new_ptr);
    #endif
    return new_ptr;
     3dc:	68fb      	ldr	r3, [r7, #12]
}
     3de:	4618      	mov	r0, r3
     3e0:	3710      	adds	r7, #16
     3e2:	46bd      	mov	sp, r7
     3e4:	bd80      	pop	{r7, pc}
     3e6:	bf00      	nop

000003e8 <m_realloc_maybe>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void *m_realloc_maybe(void *ptr, size_t old_num_bytes, size_t new_num_bytes, bool allow_move) {
#else
void *m_realloc_maybe(void *ptr, size_t new_num_bytes, bool allow_move) {
     3e8:	b580      	push	{r7, lr}
     3ea:	b086      	sub	sp, #24
     3ec:	af00      	add	r7, sp, #0
     3ee:	60f8      	str	r0, [r7, #12]
     3f0:	60b9      	str	r1, [r7, #8]
     3f2:	4613      	mov	r3, r2
     3f4:	71fb      	strb	r3, [r7, #7]
#endif
    void *new_ptr = realloc_ext(ptr, new_num_bytes, allow_move);
     3f6:	79fb      	ldrb	r3, [r7, #7]
     3f8:	461a      	mov	r2, r3
     3fa:	68b9      	ldr	r1, [r7, #8]
     3fc:	68f8      	ldr	r0, [r7, #12]
     3fe:	f000 fbeb 	bl	bd8 <gc_realloc>
     402:	6178      	str	r0, [r7, #20]
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, old_num_bytes, new_num_bytes, new_ptr);
    #else
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, new_num_bytes, new_ptr);
    #endif
    return new_ptr;
     404:	697b      	ldr	r3, [r7, #20]
}
     406:	4618      	mov	r0, r3
     408:	3718      	adds	r7, #24
     40a:	46bd      	mov	sp, r7
     40c:	bd80      	pop	{r7, pc}
     40e:	bf00      	nop

00000410 <m_free>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void m_free(void *ptr, size_t num_bytes) {
#else
void m_free(void *ptr) {
     410:	b580      	push	{r7, lr}
     412:	b082      	sub	sp, #8
     414:	af00      	add	r7, sp, #0
     416:	6078      	str	r0, [r7, #4]
#endif
    free(ptr);
     418:	6878      	ldr	r0, [r7, #4]
     41a:	f000 fb9f 	bl	b5c <gc_free>
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("free %p, %d\n", ptr, num_bytes);
    #else
    DEBUG_printf("free %p\n", ptr);
    #endif
}
     41e:	bf00      	nop
     420:	3708      	adds	r7, #8
     422:	46bd      	mov	sp, r7
     424:	bd80      	pop	{r7, pc}
     426:	bf00      	nop

00000428 <gc_mark_subtree>:

// Take the given block as the topmost block on the stack. Check all it's
// children: mark the unmarked child blocks and put those newly marked
// blocks on the stack. When all children have been checked, pop off the
// topmost block on the stack and repeat with that one.
STATIC void gc_mark_subtree(size_t block) {
     428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     42c:	4c2b      	ldr	r4, [pc, #172]	; (4dc <gc_mark_subtree+0xb4>)
    // Start with the block passed in the argument.
    size_t sp = 0;
     42e:	2500      	movs	r5, #0

        // check this block's children
        void **ptrs = (void**)PTR_FROM_BLOCK(block);
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
            void *ptr = *ptrs;
            if (VERIFY_PTR(ptr)) {
     430:	4626      	mov	r6, r4
                // Mark and push this pointer
                size_t childblock = BLOCK_FROM_PTR(ptr);
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
                    // an unmarked head, mark it, and push it on gc stack
                    TRACE_MARK(childblock, ptr);
                    ATB_HEAD_TO_MARK(childblock);
     432:	f04f 0a03 	mov.w	sl, #3
     436:	f8d4 e0b4 	ldr.w	lr, [r4, #180]	; 0xb4
        size_t n_blocks = 0;
     43a:	2100      	movs	r1, #0
            n_blocks += 1;
     43c:	3101      	adds	r1, #1
     43e:	1843      	adds	r3, r0, r1
        } while (ATB_GET_KIND(block + n_blocks) == AT_TAIL);
     440:	089a      	lsrs	r2, r3, #2
     442:	f003 0303 	and.w	r3, r3, #3
     446:	f81e 2002 	ldrb.w	r2, [lr, r2]
     44a:	005b      	lsls	r3, r3, #1
     44c:	fa42 f303 	asr.w	r3, r2, r3
     450:	f003 0303 	and.w	r3, r3, #3
     454:	2b02      	cmp	r3, #2
     456:	d0f1      	beq.n	43c <gc_mark_subtree+0x14>
        void **ptrs = (void**)PTR_FROM_BLOCK(block);
     458:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     45c:	0109      	lsls	r1, r1, #4
     45e:	088a      	lsrs	r2, r1, #2
        void **ptrs = (void**)PTR_FROM_BLOCK(block);
     460:	eb03 1000 	add.w	r0, r3, r0, lsl #4
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     464:	b301      	cbz	r1, 4a8 <gc_mark_subtree+0x80>
     466:	3804      	subs	r0, #4
            void *ptr = *ptrs;
     468:	f850 1f04 	ldr.w	r1, [r0, #4]!
            if (VERIFY_PTR(ptr)) {
     46c:	070b      	lsls	r3, r1, #28
     46e:	d119      	bne.n	4a4 <gc_mark_subtree+0x7c>
     470:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
     474:	4299      	cmp	r1, r3
     476:	d315      	bcc.n	4a4 <gc_mark_subtree+0x7c>
                size_t childblock = BLOCK_FROM_PTR(ptr);
     478:	1acb      	subs	r3, r1, r3
            if (VERIFY_PTR(ptr)) {
     47a:	f8d6 70c4 	ldr.w	r7, [r6, #196]	; 0xc4
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     47e:	ea4f 1c93 	mov.w	ip, r3, lsr #6
                size_t childblock = BLOCK_FROM_PTR(ptr);
     482:	091b      	lsrs	r3, r3, #4
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     484:	f003 0e03 	and.w	lr, r3, #3
            if (VERIFY_PTR(ptr)) {
     488:	42b9      	cmp	r1, r7
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     48a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
            if (VERIFY_PTR(ptr)) {
     48e:	d209      	bcs.n	4a4 <gc_mark_subtree+0x7c>
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     490:	f8d6 90b4 	ldr.w	r9, [r6, #180]	; 0xb4
     494:	f819 800c 	ldrb.w	r8, [r9, ip]
     498:	fa48 f10e 	asr.w	r1, r8, lr
     49c:	f001 0103 	and.w	r1, r1, #3
     4a0:	2901      	cmp	r1, #1
     4a2:	d008      	beq.n	4b6 <gc_mark_subtree+0x8e>
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     4a4:	3a01      	subs	r2, #1
     4a6:	d1df      	bne.n	468 <gc_mark_subtree+0x40>
                }
            }
        }

        // Are there any blocks on the stack?
        if (sp == 0) {
     4a8:	b1ad      	cbz	r5, 4d6 <gc_mark_subtree+0xae>
            break; // No, stack is empty, we're done.
        }

        // pop the next block off the stack
        block = MP_STATE_MEM(gc_stack)[--sp];
     4aa:	3d01      	subs	r5, #1
     4ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
     4b0:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
    }
     4b4:	e7bf      	b.n	436 <gc_mark_subtree+0xe>
                    ATB_HEAD_TO_MARK(childblock);
     4b6:	fa0a fe0e 	lsl.w	lr, sl, lr
     4ba:	ea4e 0e08 	orr.w	lr, lr, r8
                        MP_STATE_MEM(gc_stack)[sp++] = childblock;
     4be:	eb06 0885 	add.w	r8, r6, r5, lsl #2
                    if (sp < MICROPY_ALLOC_GC_STACK_SIZE) {
     4c2:	2d3f      	cmp	r5, #63	; 0x3f
                    ATB_HEAD_TO_MARK(childblock);
     4c4:	f809 e00c 	strb.w	lr, [r9, ip]
                        MP_STATE_MEM(gc_stack)[sp++] = childblock;
     4c8:	bf9a      	itte	ls
     4ca:	3501      	addls	r5, #1
     4cc:	f8c8 30cc 	strls.w	r3, [r8, #204]	; 0xcc
                        MP_STATE_MEM(gc_stack_overflow) = 1;
     4d0:	f8c6 10c8 	strhi.w	r1, [r6, #200]	; 0xc8
     4d4:	e7e6      	b.n	4a4 <gc_mark_subtree+0x7c>
     4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     4da:	bf00      	nop
     4dc:	200012f0 	.word	0x200012f0

000004e0 <gc_free.part.0>:
}
*/

// force the freeing of a piece of memory
// TODO: freeing here does not call finaliser
void gc_free(void *ptr) {
     4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if (ptr == NULL) {
        GC_EXIT();
    } else {
        // get the GC block number corresponding to this pointer
        assert(VERIFY_PTR(ptr));
     4e2:	0703      	lsls	r3, r0, #28
     4e4:	d141      	bne.n	56a <gc_free.part.0+0x8a>
     4e6:	4e28      	ldr	r6, [pc, #160]	; (588 <gc_free.part.0+0xa8>)
     4e8:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
     4ec:	4298      	cmp	r0, r3
     4ee:	d33c      	bcc.n	56a <gc_free.part.0+0x8a>
     4f0:	f8d6 20c4 	ldr.w	r2, [r6, #196]	; 0xc4
     4f4:	4290      	cmp	r0, r2
     4f6:	d238      	bcs.n	56a <gc_free.part.0+0x8a>
        size_t block = BLOCK_FROM_PTR(ptr);
     4f8:	1ac0      	subs	r0, r0, r3
        assert(ATB_GET_KIND(block) == AT_HEAD);
     4fa:	0985      	lsrs	r5, r0, #6
     4fc:	f8d6 20b4 	ldr.w	r2, [r6, #180]	; 0xb4
        size_t block = BLOCK_FROM_PTR(ptr);
     500:	0904      	lsrs	r4, r0, #4
        assert(ATB_GET_KIND(block) == AT_HEAD);
     502:	f004 0303 	and.w	r3, r4, #3
     506:	5d52      	ldrb	r2, [r2, r5]
     508:	0059      	lsls	r1, r3, #1
     50a:	410a      	asrs	r2, r1
     50c:	f002 0203 	and.w	r2, r2, #3
     510:	2a01      	cmp	r2, #1
     512:	d131      	bne.n	578 <gc_free.part.0+0x98>

        #if MICROPY_ENABLE_FINALISER
        FTB_CLEAR(block);
     514:	09c0      	lsrs	r0, r0, #7
     516:	f8d6 70bc 	ldr.w	r7, [r6, #188]	; 0xbc
     51a:	f004 0e07 	and.w	lr, r4, #7
     51e:	5c39      	ldrb	r1, [r7, r0]
     520:	fa02 f20e 	lsl.w	r2, r2, lr
     524:	ea21 0202 	bic.w	r2, r1, r2
     528:	543a      	strb	r2, [r7, r0]
        #endif

        // set the last_free pointer to this block if it's earlier in the heap
        if (block / BLOCKS_PER_ATB < MP_STATE_MEM(gc_last_free_atb_index)) {
     52a:	f8d6 21d8 	ldr.w	r2, [r6, #472]	; 0x1d8
     52e:	4295      	cmp	r5, r2
            MP_STATE_MEM(gc_last_free_atb_index) = block / BLOCKS_PER_ATB;
     530:	bf38      	it	cc
     532:	f8c6 51d8 	strcc.w	r5, [r6, #472]	; 0x1d8
     536:	08a0      	lsrs	r0, r4, #2
     538:	f8d6 50b4 	ldr.w	r5, [r6, #180]	; 0xb4
     53c:	5c29      	ldrb	r1, [r5, r0]
        }

        // free head and all of its tail blocks
        do {
            ATB_ANY_TO_FREE(block);
     53e:	2703      	movs	r7, #3
     540:	005b      	lsls	r3, r3, #1
     542:	fa07 f303 	lsl.w	r3, r7, r3
     546:	ea21 0103 	bic.w	r1, r1, r3
     54a:	5429      	strb	r1, [r5, r0]
            block += 1;
     54c:	3401      	adds	r4, #1
        } while (ATB_GET_KIND(block) == AT_TAIL);
     54e:	f8d6 50b4 	ldr.w	r5, [r6, #180]	; 0xb4
     552:	08a0      	lsrs	r0, r4, #2
     554:	f004 0303 	and.w	r3, r4, #3
     558:	5c29      	ldrb	r1, [r5, r0]
     55a:	005a      	lsls	r2, r3, #1
     55c:	fa41 f202 	asr.w	r2, r1, r2
     560:	f002 0203 	and.w	r2, r2, #3
     564:	2a02      	cmp	r2, #2
     566:	d0eb      	beq.n	540 <gc_free.part.0+0x60>

        #if EXTENSIVE_HEAP_PROFILING
        gc_dump_alloc_table();
        #endif
    }
}
     568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert(VERIFY_PTR(ptr));
     56a:	4b08      	ldr	r3, [pc, #32]	; (58c <gc_free.part.0+0xac>)
     56c:	4a08      	ldr	r2, [pc, #32]	; (590 <gc_free.part.0+0xb0>)
     56e:	4809      	ldr	r0, [pc, #36]	; (594 <gc_free.part.0+0xb4>)
     570:	f44f 7112 	mov.w	r1, #584	; 0x248
     574:	f01b f906 	bl	1b784 <__assert_func>
        assert(ATB_GET_KIND(block) == AT_HEAD);
     578:	4b07      	ldr	r3, [pc, #28]	; (598 <gc_free.part.0+0xb8>)
     57a:	4a05      	ldr	r2, [pc, #20]	; (590 <gc_free.part.0+0xb0>)
     57c:	4805      	ldr	r0, [pc, #20]	; (594 <gc_free.part.0+0xb4>)
     57e:	f240 214a 	movw	r1, #586	; 0x24a
     582:	f01b f8ff 	bl	1b784 <__assert_func>
     586:	bf00      	nop
     588:	200012f0 	.word	0x200012f0
     58c:	0001df68 	.word	0x0001df68
     590:	0001df4c 	.word	0x0001df4c
     594:	0001df78 	.word	0x0001df78
     598:	0001df88 	.word	0x0001df88

0000059c <gc_init>:
    end = (void*)((uintptr_t)end & (~(BYTES_PER_BLOCK - 1)));
     59c:	f021 010f 	bic.w	r1, r1, #15
void gc_init(void *start, void *end) {
     5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len * BITS_PER_BYTE / (BITS_PER_BYTE + BITS_PER_BYTE * BLOCKS_PER_ATB / BLOCKS_PER_FTB + BITS_PER_BYTE * BLOCKS_PER_ATB * BYTES_PER_BLOCK);
     5a2:	1a0a      	subs	r2, r1, r0
     5a4:	4d1b      	ldr	r5, [pc, #108]	; (614 <gc_init+0x78>)
     5a6:	4c1c      	ldr	r4, [pc, #112]	; (618 <gc_init+0x7c>)
     5a8:	00d2      	lsls	r2, r2, #3
     5aa:	fba5 5202 	umull	r5, r2, r5, r2
     5ae:	0a52      	lsrs	r2, r2, #9
    size_t gc_finaliser_table_byte_len = (MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB + BLOCKS_PER_FTB - 1) / BLOCKS_PER_FTB;
     5b0:	0095      	lsls	r5, r2, #2
     5b2:	3507      	adds	r5, #7
    MP_STATE_MEM(gc_finaliser_table_start) = MP_STATE_MEM(gc_alloc_table_start) + MP_STATE_MEM(gc_alloc_table_byte_len);
     5b4:	1887      	adds	r7, r0, r2
    size_t gc_finaliser_table_byte_len = (MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB + BLOCKS_PER_FTB - 1) / BLOCKS_PER_FTB;
     5b6:	08ed      	lsrs	r5, r5, #3
    MP_STATE_MEM(gc_pool_start) = (byte*)end - gc_pool_block_len * BYTES_PER_BLOCK;
     5b8:	eba1 1682 	sub.w	r6, r1, r2, lsl #6
    assert(MP_STATE_MEM(gc_pool_start) >= MP_STATE_MEM(gc_finaliser_table_start) + gc_finaliser_table_byte_len);
     5bc:	eb07 0e05 	add.w	lr, r7, r5
     5c0:	4576      	cmp	r6, lr
    MP_STATE_MEM(gc_finaliser_table_start) = MP_STATE_MEM(gc_alloc_table_start) + MP_STATE_MEM(gc_alloc_table_byte_len);
     5c2:	f8c4 70bc 	str.w	r7, [r4, #188]	; 0xbc
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len * BITS_PER_BYTE / (BITS_PER_BYTE + BITS_PER_BYTE * BLOCKS_PER_ATB / BLOCKS_PER_FTB + BITS_PER_BYTE * BLOCKS_PER_ATB * BYTES_PER_BLOCK);
     5c6:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
    MP_STATE_MEM(gc_alloc_table_start) = (byte*)start;
     5ca:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    MP_STATE_MEM(gc_pool_end) = end;
     5ce:	f8c4 10c4 	str.w	r1, [r4, #196]	; 0xc4
    MP_STATE_MEM(gc_pool_start) = (byte*)end - gc_pool_block_len * BYTES_PER_BLOCK;
     5d2:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
    assert(MP_STATE_MEM(gc_pool_start) >= MP_STATE_MEM(gc_finaliser_table_start) + gc_finaliser_table_byte_len);
     5d6:	d317      	bcc.n	608 <gc_init+0x6c>
    memset(MP_STATE_MEM(gc_alloc_table_start), 0, MP_STATE_MEM(gc_alloc_table_byte_len));
     5d8:	2100      	movs	r1, #0
     5da:	f01c fc75 	bl	1cec8 <memset>
    memset(MP_STATE_MEM(gc_finaliser_table_start), 0, gc_finaliser_table_byte_len);
     5de:	462a      	mov	r2, r5
     5e0:	2100      	movs	r1, #0
     5e2:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
     5e6:	f01c fc6f 	bl	1cec8 <memset>
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     5ea:	2300      	movs	r3, #0
    MP_STATE_MEM(gc_auto_collect_enabled) = 1;
     5ec:	2101      	movs	r1, #1
    MP_STATE_MEM(gc_alloc_threshold) = (size_t)-1;
     5ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     5f2:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
    MP_STATE_MEM(gc_lock_depth) = 0;
     5f6:	f8a4 31cc 	strh.w	r3, [r4, #460]	; 0x1cc
    MP_STATE_MEM(gc_alloc_amount) = 0;
     5fa:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
    MP_STATE_MEM(gc_auto_collect_enabled) = 1;
     5fe:	f8a4 11ce 	strh.w	r1, [r4, #462]	; 0x1ce
    MP_STATE_MEM(gc_alloc_threshold) = (size_t)-1;
     602:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
     606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(MP_STATE_MEM(gc_pool_start) >= MP_STATE_MEM(gc_finaliser_table_start) + gc_finaliser_table_byte_len);
     608:	4b04      	ldr	r3, [pc, #16]	; (61c <gc_init+0x80>)
     60a:	4a05      	ldr	r2, [pc, #20]	; (620 <gc_init+0x84>)
     60c:	4805      	ldr	r0, [pc, #20]	; (624 <gc_init+0x88>)
     60e:	2189      	movs	r1, #137	; 0x89
     610:	f01b f8b8 	bl	1b784 <__assert_func>
     614:	fa232cf3 	.word	0xfa232cf3
     618:	200012f0 	.word	0x200012f0
     61c:	0001dfa8 	.word	0x0001dfa8
     620:	0001df54 	.word	0x0001df54
     624:	0001df78 	.word	0x0001df78

00000628 <gc_lock>:
    MP_STATE_MEM(gc_lock_depth)++;
     628:	4a03      	ldr	r2, [pc, #12]	; (638 <gc_lock+0x10>)
     62a:	f8b2 31cc 	ldrh.w	r3, [r2, #460]	; 0x1cc
     62e:	3301      	adds	r3, #1
     630:	f8a2 31cc 	strh.w	r3, [r2, #460]	; 0x1cc
     634:	4770      	bx	lr
     636:	bf00      	nop
     638:	200012f0 	.word	0x200012f0

0000063c <gc_unlock>:
    MP_STATE_MEM(gc_lock_depth)--;
     63c:	4a03      	ldr	r2, [pc, #12]	; (64c <gc_unlock+0x10>)
     63e:	f8b2 31cc 	ldrh.w	r3, [r2, #460]	; 0x1cc
     642:	3b01      	subs	r3, #1
     644:	f8a2 31cc 	strh.w	r3, [r2, #460]	; 0x1cc
     648:	4770      	bx	lr
     64a:	bf00      	nop
     64c:	200012f0 	.word	0x200012f0

00000650 <gc_is_locked>:
    return MP_STATE_MEM(gc_lock_depth) != 0;
     650:	4b03      	ldr	r3, [pc, #12]	; (660 <gc_is_locked+0x10>)
     652:	f8b3 01cc 	ldrh.w	r0, [r3, #460]	; 0x1cc
}
     656:	3000      	adds	r0, #0
     658:	bf18      	it	ne
     65a:	2001      	movne	r0, #1
     65c:	4770      	bx	lr
     65e:	bf00      	nop
     660:	200012f0 	.word	0x200012f0

00000664 <gc_collect_start>:
    MP_STATE_MEM(gc_lock_depth)++;
     664:	4b1e      	ldr	r3, [pc, #120]	; (6e0 <gc_collect_start+0x7c>)
     666:	f8b3 21cc 	ldrh.w	r2, [r3, #460]	; 0x1cc
    MP_STATE_MEM(gc_alloc_amount) = 0;
     66a:	2100      	movs	r1, #0
    MP_STATE_MEM(gc_lock_depth)++;
     66c:	3201      	adds	r2, #1
void gc_collect_start(void) {
     66e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     672:	461e      	mov	r6, r3
    MP_STATE_MEM(gc_lock_depth)++;
     674:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
     678:	461c      	mov	r4, r3
     67a:	f103 05a0 	add.w	r5, r3, #160	; 0xa0
        if (VERIFY_PTR(ptr)) {
     67e:	461f      	mov	r7, r3
    MP_STATE_MEM(gc_alloc_amount) = 0;
     680:	f8c3 11d0 	str.w	r1, [r3, #464]	; 0x1d0
    MP_STATE_MEM(gc_stack_overflow) = 0;
     684:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
                ATB_HEAD_TO_MARK(block);
     688:	f04f 0803 	mov.w	r8, #3
        void *ptr = ptrs[i];
     68c:	f854 3f04 	ldr.w	r3, [r4, #4]!
        if (VERIFY_PTR(ptr)) {
     690:	071a      	lsls	r2, r3, #28
     692:	d119      	bne.n	6c8 <gc_collect_start+0x64>
     694:	f8d6 00c0 	ldr.w	r0, [r6, #192]	; 0xc0
     698:	4283      	cmp	r3, r0
     69a:	d315      	bcc.n	6c8 <gc_collect_start+0x64>
            size_t block = BLOCK_FROM_PTR(ptr);
     69c:	1a18      	subs	r0, r3, r0
        if (VERIFY_PTR(ptr)) {
     69e:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     6a2:	ea4f 1e90 	mov.w	lr, r0, lsr #6
            size_t block = BLOCK_FROM_PTR(ptr);
     6a6:	0900      	lsrs	r0, r0, #4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     6a8:	f000 0203 	and.w	r2, r0, #3
        if (VERIFY_PTR(ptr)) {
     6ac:	428b      	cmp	r3, r1
            if (ATB_GET_KIND(block) == AT_HEAD) {
     6ae:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if (VERIFY_PTR(ptr)) {
     6b2:	d209      	bcs.n	6c8 <gc_collect_start+0x64>
            if (ATB_GET_KIND(block) == AT_HEAD) {
     6b4:	f8d7 c0b4 	ldr.w	ip, [r7, #180]	; 0xb4
     6b8:	f81c 100e 	ldrb.w	r1, [ip, lr]
     6bc:	fa41 f302 	asr.w	r3, r1, r2
     6c0:	f003 0303 	and.w	r3, r3, #3
     6c4:	2b01      	cmp	r3, #1
     6c6:	d003      	beq.n	6d0 <gc_collect_start+0x6c>
    for (size_t i = 0; i < len; i++) {
     6c8:	42a5      	cmp	r5, r4
     6ca:	d1df      	bne.n	68c <gc_collect_start+0x28>
}
     6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ATB_HEAD_TO_MARK(block);
     6d0:	fa08 f202 	lsl.w	r2, r8, r2
     6d4:	430a      	orrs	r2, r1
     6d6:	f80c 200e 	strb.w	r2, [ip, lr]
                gc_mark_subtree(block);
     6da:	f7ff fea5 	bl	428 <gc_mark_subtree>
     6de:	e7f3      	b.n	6c8 <gc_collect_start+0x64>
     6e0:	200012f0 	.word	0x200012f0

000006e4 <gc_collect_root>:
    for (size_t i = 0; i < len; i++) {
     6e4:	b399      	cbz	r1, 74e <gc_collect_root+0x6a>
void gc_collect_root(void **ptrs, size_t len) {
     6e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if (VERIFY_PTR(ptr)) {
     6ea:	4f19      	ldr	r7, [pc, #100]	; (750 <gc_collect_root+0x6c>)
     6ec:	460e      	mov	r6, r1
     6ee:	1f05      	subs	r5, r0, #4
    for (size_t i = 0; i < len; i++) {
     6f0:	2400      	movs	r4, #0
                ATB_HEAD_TO_MARK(block);
     6f2:	f04f 0803 	mov.w	r8, #3
        void *ptr = ptrs[i];
     6f6:	f855 3f04 	ldr.w	r3, [r5, #4]!
        if (VERIFY_PTR(ptr)) {
     6fa:	071a      	lsls	r2, r3, #28
    for (size_t i = 0; i < len; i++) {
     6fc:	f104 0401 	add.w	r4, r4, #1
        if (VERIFY_PTR(ptr)) {
     700:	d119      	bne.n	736 <gc_collect_root+0x52>
     702:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
     706:	4283      	cmp	r3, r0
     708:	d315      	bcc.n	736 <gc_collect_root+0x52>
            size_t block = BLOCK_FROM_PTR(ptr);
     70a:	1a18      	subs	r0, r3, r0
        if (VERIFY_PTR(ptr)) {
     70c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     710:	ea4f 1e90 	mov.w	lr, r0, lsr #6
            size_t block = BLOCK_FROM_PTR(ptr);
     714:	0900      	lsrs	r0, r0, #4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     716:	f000 0203 	and.w	r2, r0, #3
        if (VERIFY_PTR(ptr)) {
     71a:	428b      	cmp	r3, r1
            if (ATB_GET_KIND(block) == AT_HEAD) {
     71c:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if (VERIFY_PTR(ptr)) {
     720:	d209      	bcs.n	736 <gc_collect_root+0x52>
            if (ATB_GET_KIND(block) == AT_HEAD) {
     722:	f8d7 c0b4 	ldr.w	ip, [r7, #180]	; 0xb4
     726:	f81c 100e 	ldrb.w	r1, [ip, lr]
     72a:	fa41 f302 	asr.w	r3, r1, r2
     72e:	f003 0303 	and.w	r3, r3, #3
     732:	2b01      	cmp	r3, #1
     734:	d003      	beq.n	73e <gc_collect_root+0x5a>
    for (size_t i = 0; i < len; i++) {
     736:	42a6      	cmp	r6, r4
     738:	d1dd      	bne.n	6f6 <gc_collect_root+0x12>
     73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ATB_HEAD_TO_MARK(block);
     73e:	fa08 f202 	lsl.w	r2, r8, r2
     742:	430a      	orrs	r2, r1
     744:	f80c 200e 	strb.w	r2, [ip, lr]
                gc_mark_subtree(block);
     748:	f7ff fe6e 	bl	428 <gc_mark_subtree>
     74c:	e7f3      	b.n	736 <gc_collect_root+0x52>
     74e:	4770      	bx	lr
     750:	200012f0 	.word	0x200012f0

00000754 <gc_collect_end>:
void gc_collect_end(void) {
     754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     758:	4e50      	ldr	r6, [pc, #320]	; (89c <gc_collect_end+0x148>)
     75a:	f8d6 00b8 	ldr.w	r0, [r6, #184]	; 0xb8
     75e:	f8d6 30c8 	ldr.w	r3, [r6, #200]	; 0xc8
     762:	b083      	sub	sp, #12
     764:	0080      	lsls	r0, r0, #2
            if (ATB_GET_KIND(block) == AT_MARK) {
     766:	4634      	mov	r4, r6
        MP_STATE_MEM(gc_stack_overflow) = 0;
     768:	2500      	movs	r5, #0
    while (MP_STATE_MEM(gc_stack_overflow)) {
     76a:	b313      	cbz	r3, 7b2 <gc_collect_end+0x5e>
        MP_STATE_MEM(gc_stack_overflow) = 0;
     76c:	f8c6 50c8 	str.w	r5, [r6, #200]	; 0xc8
        for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     770:	2800      	cmp	r0, #0
     772:	d042      	beq.n	7fa <gc_collect_end+0xa6>
     774:	2700      	movs	r7, #0
     776:	e002      	b.n	77e <gc_collect_end+0x2a>
     778:	3701      	adds	r7, #1
     77a:	4287      	cmp	r7, r0
     77c:	d215      	bcs.n	7aa <gc_collect_end+0x56>
            if (ATB_GET_KIND(block) == AT_MARK) {
     77e:	08ba      	lsrs	r2, r7, #2
     780:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
     784:	f007 0303 	and.w	r3, r7, #3
     788:	5c8a      	ldrb	r2, [r1, r2]
     78a:	005b      	lsls	r3, r3, #1
     78c:	fa42 f303 	asr.w	r3, r2, r3
     790:	f003 0303 	and.w	r3, r3, #3
     794:	2b03      	cmp	r3, #3
     796:	d1ef      	bne.n	778 <gc_collect_end+0x24>
                gc_mark_subtree(block);
     798:	4638      	mov	r0, r7
     79a:	f7ff fe45 	bl	428 <gc_mark_subtree>
     79e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
        for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     7a2:	3701      	adds	r7, #1
     7a4:	0080      	lsls	r0, r0, #2
     7a6:	4287      	cmp	r7, r0
     7a8:	d3e9      	bcc.n	77e <gc_collect_end+0x2a>
     7aa:	f8d6 30c8 	ldr.w	r3, [r6, #200]	; 0xc8
    while (MP_STATE_MEM(gc_stack_overflow)) {
     7ae:	2b00      	cmp	r3, #0
     7b0:	d1dc      	bne.n	76c <gc_collect_end+0x18>
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     7b2:	b310      	cbz	r0, 7fa <gc_collect_end+0xa6>
     7b4:	469c      	mov	ip, r3
        switch (ATB_GET_KIND(block)) {
     7b6:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 89c <gc_collect_end+0x148>
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     7ba:	461d      	mov	r5, r3
                    ATB_ANY_TO_FREE(block);
     7bc:	f04f 0a03 	mov.w	sl, #3
     7c0:	e006      	b.n	7d0 <gc_collect_end+0x7c>
        switch (ATB_GET_KIND(block)) {
     7c2:	2b03      	cmp	r3, #3
     7c4:	d05d      	beq.n	882 <gc_collect_end+0x12e>
     7c6:	2b01      	cmp	r3, #1
     7c8:	d022      	beq.n	810 <gc_collect_end+0xbc>
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     7ca:	3501      	adds	r5, #1
     7cc:	4285      	cmp	r5, r0
     7ce:	d214      	bcs.n	7fa <gc_collect_end+0xa6>
        switch (ATB_GET_KIND(block)) {
     7d0:	08af      	lsrs	r7, r5, #2
     7d2:	f8d6 20b4 	ldr.w	r2, [r6, #180]	; 0xb4
     7d6:	f005 0403 	and.w	r4, r5, #3
     7da:	5dd1      	ldrb	r1, [r2, r7]
     7dc:	0064      	lsls	r4, r4, #1
     7de:	fa41 f304 	asr.w	r3, r1, r4
     7e2:	f003 0303 	and.w	r3, r3, #3
     7e6:	2b02      	cmp	r3, #2
     7e8:	eb02 0e07 	add.w	lr, r2, r7
     7ec:	d1e9      	bne.n	7c2 <gc_collect_end+0x6e>
                if (free_tail) {
     7ee:	f1bc 0f00 	cmp.w	ip, #0
     7f2:	d13a      	bne.n	86a <gc_collect_end+0x116>
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     7f4:	3501      	adds	r5, #1
     7f6:	4285      	cmp	r5, r0
     7f8:	d3ea      	bcc.n	7d0 <gc_collect_end+0x7c>
    MP_STATE_MEM(gc_lock_depth)--;
     7fa:	f8b6 31cc 	ldrh.w	r3, [r6, #460]	; 0x1cc
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     7fe:	2200      	movs	r2, #0
    MP_STATE_MEM(gc_lock_depth)--;
     800:	3b01      	subs	r3, #1
     802:	f8a6 31cc 	strh.w	r3, [r6, #460]	; 0x1cc
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     806:	f8c6 21d8 	str.w	r2, [r6, #472]	; 0x1d8
}
     80a:	b003      	add	sp, #12
     80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (FTB_GET(block)) {
     810:	ea4f 0bd5 	mov.w	fp, r5, lsr #3
     814:	f8d8 20bc 	ldr.w	r2, [r8, #188]	; 0xbc
     818:	f812 c00b 	ldrb.w	ip, [r2, fp]
     81c:	f005 0907 	and.w	r9, r5, #7
     820:	fa4c f009 	asr.w	r0, ip, r9
     824:	07c3      	lsls	r3, r0, #31
     826:	445a      	add	r2, fp
     828:	d51f      	bpl.n	86a <gc_collect_end+0x116>
                    mp_obj_base_t *obj = (mp_obj_base_t*)PTR_FROM_BLOCK(block);
     82a:	0129      	lsls	r1, r5, #4
     82c:	f8d8 00c0 	ldr.w	r0, [r8, #192]	; 0xc0
                    if (obj->type != NULL) {
     830:	5843      	ldr	r3, [r0, r1]
                    mp_obj_base_t *obj = (mp_obj_base_t*)PTR_FROM_BLOCK(block);
     832:	4408      	add	r0, r1
                    if (obj->type != NULL) {
     834:	b16b      	cbz	r3, 852 <gc_collect_end+0xfe>
                        mp_load_method_maybe(MP_OBJ_FROM_PTR(obj), MP_QSTR___del__, dest);
     836:	466a      	mov	r2, sp
     838:	2108      	movs	r1, #8
     83a:	f00b ffa9 	bl	c790 <mp_load_method_maybe>
                        if (dest[0] != MP_OBJ_NULL) {
     83e:	9800      	ldr	r0, [sp, #0]
     840:	b110      	cbz	r0, 848 <gc_collect_end+0xf4>
                            mp_call_function_1_protected(dest[0], dest[1]);
     842:	9901      	ldr	r1, [sp, #4]
     844:	f00c fbde 	bl	d004 <mp_call_function_1_protected>
     848:	f8d6 20bc 	ldr.w	r2, [r6, #188]	; 0xbc
     84c:	f812 c00b 	ldrb.w	ip, [r2, fp]
     850:	445a      	add	r2, fp
                    FTB_CLEAR(block);
     852:	2301      	movs	r3, #1
     854:	fa03 f309 	lsl.w	r3, r3, r9
     858:	ea2c 0c03 	bic.w	ip, ip, r3
     85c:	f882 c000 	strb.w	ip, [r2]
     860:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
     864:	5dd9      	ldrb	r1, [r3, r7]
     866:	eb03 0e07 	add.w	lr, r3, r7
                    ATB_ANY_TO_FREE(block);
     86a:	fa0a f404 	lsl.w	r4, sl, r4
     86e:	ea21 0104 	bic.w	r1, r1, r4
     872:	f88e 1000 	strb.w	r1, [lr]
     876:	f8d6 00b8 	ldr.w	r0, [r6, #184]	; 0xb8
     87a:	f04f 0c01 	mov.w	ip, #1
     87e:	0080      	lsls	r0, r0, #2
     880:	e7a3      	b.n	7ca <gc_collect_end+0x76>
                ATB_MARK_TO_HEAD(block);
     882:	2302      	movs	r3, #2
     884:	fa03 f404 	lsl.w	r4, r3, r4
     888:	ea21 0104 	bic.w	r1, r1, r4
     88c:	55d1      	strb	r1, [r2, r7]
     88e:	f8d8 00b8 	ldr.w	r0, [r8, #184]	; 0xb8
                free_tail = 0;
     892:	f04f 0c00 	mov.w	ip, #0
     896:	4098      	lsls	r0, r3
     898:	e797      	b.n	7ca <gc_collect_end+0x76>
     89a:	bf00      	nop
     89c:	200012f0 	.word	0x200012f0

000008a0 <gc_sweep_all>:
    MP_STATE_MEM(gc_lock_depth)++;
     8a0:	4b05      	ldr	r3, [pc, #20]	; (8b8 <gc_sweep_all+0x18>)
     8a2:	f8b3 21cc 	ldrh.w	r2, [r3, #460]	; 0x1cc
    MP_STATE_MEM(gc_stack_overflow) = 0;
     8a6:	2100      	movs	r1, #0
    MP_STATE_MEM(gc_lock_depth)++;
     8a8:	3201      	adds	r2, #1
     8aa:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
    MP_STATE_MEM(gc_stack_overflow) = 0;
     8ae:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    gc_collect_end();
     8b2:	f7ff bf4f 	b.w	754 <gc_collect_end>
     8b6:	bf00      	nop
     8b8:	200012f0 	.word	0x200012f0

000008bc <gc_info>:
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     8bc:	4b3d      	ldr	r3, [pc, #244]	; (9b4 <gc_info+0xf8>)
     8be:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
     8c2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
void gc_info(gc_info_t *info) {
     8c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     8ca:	f8d3 60b8 	ldr.w	r6, [r3, #184]	; 0xb8
     8ce:	f8d3 70b4 	ldr.w	r7, [r3, #180]	; 0xb4
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     8d2:	1a52      	subs	r2, r2, r1
    info->used = 0;
     8d4:	2300      	movs	r3, #0
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     8d6:	6002      	str	r2, [r0, #0]
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     8d8:	461d      	mov	r5, r3
     8da:	00b6      	lsls	r6, r6, #2
    info->used = 0;
     8dc:	6043      	str	r3, [r0, #4]
    info->free = 0;
     8de:	6083      	str	r3, [r0, #8]
    info->max_free = 0;
     8e0:	60c3      	str	r3, [r0, #12]
    info->num_1block = 0;
     8e2:	6103      	str	r3, [r0, #16]
    info->num_2block = 0;
     8e4:	6143      	str	r3, [r0, #20]
    info->max_block = 0;
     8e6:	6183      	str	r3, [r0, #24]
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     8e8:	469c      	mov	ip, r3
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     8ea:	469e      	mov	lr, r3
     8ec:	461c      	mov	r4, r3
     8ee:	461a      	mov	r2, r3
     8f0:	4699      	mov	r9, r3
     8f2:	4619      	mov	r1, r3
     8f4:	4698      	mov	r8, r3
        size_t kind = ATB_GET_KIND(block);
     8f6:	f817 9009 	ldrb.w	r9, [r7, r9]
     8fa:	004b      	lsls	r3, r1, #1
     8fc:	fa49 f303 	asr.w	r3, r9, r3
     900:	f003 0303 	and.w	r3, r3, #3
        switch (kind) {
     904:	2b01      	cmp	r3, #1
     906:	d030      	beq.n	96a <gc_info+0xae>
     908:	d327      	bcc.n	95a <gc_info+0x9e>
     90a:	2b02      	cmp	r3, #2
     90c:	d102      	bne.n	914 <gc_info+0x58>
                info->used += 1;
     90e:	3501      	adds	r5, #1
     910:	6045      	str	r5, [r0, #4]
                len += 1;
     912:	3401      	adds	r4, #1
        block++;
     914:	3201      	adds	r2, #1
        if (!finish) {
     916:	42b2      	cmp	r2, r6
     918:	d00e      	beq.n	938 <gc_info+0x7c>
            kind = ATB_GET_KIND(block);
     91a:	ea4f 0992 	mov.w	r9, r2, lsr #2
     91e:	f002 0103 	and.w	r1, r2, #3
     922:	f817 3009 	ldrb.w	r3, [r7, r9]
     926:	ea4f 0a41 	mov.w	sl, r1, lsl #1
     92a:	fa43 f30a 	asr.w	r3, r3, sl
        if (finish || kind == AT_FREE || kind == AT_HEAD) {
     92e:	f013 0303 	ands.w	r3, r3, #3
     932:	d001      	beq.n	938 <gc_info+0x7c>
     934:	2b01      	cmp	r3, #1
     936:	d1de      	bne.n	8f6 <gc_info+0x3a>
            if (len == 1) {
     938:	2c01      	cmp	r4, #1
     93a:	d01a      	beq.n	972 <gc_info+0xb6>
            } else if (len == 2) {
     93c:	2c02      	cmp	r4, #2
     93e:	d02b      	beq.n	998 <gc_info+0xdc>
            if (len > info->max_block) {
     940:	6981      	ldr	r1, [r0, #24]
     942:	428c      	cmp	r4, r1
                info->max_block = len;
     944:	bf88      	it	hi
     946:	6184      	strhi	r4, [r0, #24]
            if (finish || kind == AT_HEAD) {
     948:	42b2      	cmp	r2, r6
     94a:	d01b      	beq.n	984 <gc_info+0xc8>
     94c:	2b01      	cmp	r3, #1
     94e:	d027      	beq.n	9a0 <gc_info+0xe4>
     950:	ea4f 0992 	mov.w	r9, r2, lsr #2
     954:	f002 0103 	and.w	r1, r2, #3
     958:	e7cd      	b.n	8f6 <gc_info+0x3a>
                info->free += 1;
     95a:	f10c 0c01 	add.w	ip, ip, #1
     95e:	f8c0 c008 	str.w	ip, [r0, #8]
                len_free += 1;
     962:	f10e 0e01 	add.w	lr, lr, #1
                len = 0;
     966:	2400      	movs	r4, #0
                break;
     968:	e7d4      	b.n	914 <gc_info+0x58>
                info->used += 1;
     96a:	3501      	adds	r5, #1
     96c:	6045      	str	r5, [r0, #4]
                len = 1;
     96e:	461c      	mov	r4, r3
                break;
     970:	e7d0      	b.n	914 <gc_info+0x58>
                info->num_1block += 1;
     972:	6901      	ldr	r1, [r0, #16]
     974:	3101      	adds	r1, #1
     976:	6101      	str	r1, [r0, #16]
            if (len > info->max_block) {
     978:	6981      	ldr	r1, [r0, #24]
     97a:	428c      	cmp	r4, r1
                info->max_block = len;
     97c:	bf88      	it	hi
     97e:	6184      	strhi	r4, [r0, #24]
            if (finish || kind == AT_HEAD) {
     980:	42b2      	cmp	r2, r6
     982:	d1e3      	bne.n	94c <gc_info+0x90>
                if (len_free > info->max_free) {
     984:	45c6      	cmp	lr, r8
     986:	d90e      	bls.n	9a6 <gc_info+0xea>
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     988:	42b2      	cmp	r2, r6
                    info->max_free = len_free;
     98a:	f8c0 e00c 	str.w	lr, [r0, #12]
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     98e:	d00a      	beq.n	9a6 <gc_info+0xea>
     990:	46f0      	mov	r8, lr
                len_free = 0;
     992:	f04f 0e00 	mov.w	lr, #0
     996:	e7db      	b.n	950 <gc_info+0x94>
                info->num_2block += 1;
     998:	6941      	ldr	r1, [r0, #20]
     99a:	3101      	adds	r1, #1
     99c:	6141      	str	r1, [r0, #20]
     99e:	e7cf      	b.n	940 <gc_info+0x84>
                if (len_free > info->max_free) {
     9a0:	45f0      	cmp	r8, lr
     9a2:	d2f6      	bcs.n	992 <gc_info+0xd6>
     9a4:	e7f0      	b.n	988 <gc_info+0xcc>
    info->used *= BYTES_PER_BLOCK;
     9a6:	012d      	lsls	r5, r5, #4
    info->free *= BYTES_PER_BLOCK;
     9a8:	ea4f 130c 	mov.w	r3, ip, lsl #4
    info->used *= BYTES_PER_BLOCK;
     9ac:	6045      	str	r5, [r0, #4]
    info->free *= BYTES_PER_BLOCK;
     9ae:	6083      	str	r3, [r0, #8]
}
     9b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     9b4:	200012f0 	.word	0x200012f0

000009b8 <gc_alloc>:
void *gc_alloc(size_t n_bytes, bool has_finaliser) {
     9b8:	300f      	adds	r0, #15
     9ba:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (n_blocks == 0) {
     9be:	0906      	lsrs	r6, r0, #4
     9c0:	f000 80c6 	beq.w	b50 <gc_alloc+0x198>
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     9c4:	4d64      	ldr	r5, [pc, #400]	; (b58 <gc_alloc+0x1a0>)
     9c6:	f8b5 31cc 	ldrh.w	r3, [r5, #460]	; 0x1cc
     9ca:	2b00      	cmp	r3, #0
     9cc:	f040 80c0 	bne.w	b50 <gc_alloc+0x198>
    int collected = !MP_STATE_MEM(gc_auto_collect_enabled);
     9d0:	f8b5 31ce 	ldrh.w	r3, [r5, #462]	; 0x1ce
     9d4:	2b00      	cmp	r3, #0
     9d6:	460c      	mov	r4, r1
     9d8:	bf0c      	ite	eq
     9da:	f04f 0c01 	moveq.w	ip, #1
     9de:	f04f 0c00 	movne.w	ip, #0
    if (!collected && MP_STATE_MEM(gc_alloc_amount) >= MP_STATE_MEM(gc_alloc_threshold)) {
     9e2:	d149      	bne.n	a78 <gc_alloc+0xc0>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     9e4:	f8df 8170 	ldr.w	r8, [pc, #368]	; b58 <gc_alloc+0x1a0>
     9e8:	f8d5 01d8 	ldr.w	r0, [r5, #472]	; 0x1d8
     9ec:	f8d5 70b8 	ldr.w	r7, [r5, #184]	; 0xb8
     9f0:	42b8      	cmp	r0, r7
     9f2:	d239      	bcs.n	a68 <gc_alloc+0xb0>
     9f4:	f8d8 e0b4 	ldr.w	lr, [r8, #180]	; 0xb4
     9f8:	2300      	movs	r3, #0
     9fa:	eb0e 0100 	add.w	r1, lr, r0
     9fe:	e01a      	b.n	a36 <gc_alloc+0x7e>
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     a00:	3301      	adds	r3, #1
     a02:	42b3      	cmp	r3, r6
     a04:	d243      	bcs.n	a8e <gc_alloc+0xd6>
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     a06:	f012 0f0c 	tst.w	r2, #12
     a0a:	d11e      	bne.n	a4a <gc_alloc+0x92>
     a0c:	3301      	adds	r3, #1
     a0e:	42b3      	cmp	r3, r6
     a10:	f080 8095 	bcs.w	b3e <gc_alloc+0x186>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     a14:	f012 0f30 	tst.w	r2, #48	; 0x30
     a18:	d11c      	bne.n	a54 <gc_alloc+0x9c>
     a1a:	3301      	adds	r3, #1
     a1c:	42b3      	cmp	r3, r6
     a1e:	f080 8091 	bcs.w	b44 <gc_alloc+0x18c>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     a22:	f012 0fc0 	tst.w	r2, #192	; 0xc0
     a26:	d11a      	bne.n	a5e <gc_alloc+0xa6>
     a28:	3301      	adds	r3, #1
     a2a:	42b3      	cmp	r3, r6
     a2c:	f080 808d 	bcs.w	b4a <gc_alloc+0x192>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     a30:	3001      	adds	r0, #1
     a32:	42b8      	cmp	r0, r7
     a34:	d218      	bcs.n	a68 <gc_alloc+0xb0>
            byte a = MP_STATE_MEM(gc_alloc_table_start)[i];
     a36:	f811 2b01 	ldrb.w	r2, [r1], #1
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     a3a:	f012 0f03 	tst.w	r2, #3
     a3e:	d0df      	beq.n	a00 <gc_alloc+0x48>
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     a40:	f012 0f0c 	tst.w	r2, #12
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     a44:	f04f 0300 	mov.w	r3, #0
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     a48:	d0e0      	beq.n	a0c <gc_alloc+0x54>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     a4a:	f012 0f30 	tst.w	r2, #48	; 0x30
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     a4e:	f04f 0300 	mov.w	r3, #0
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     a52:	d0e2      	beq.n	a1a <gc_alloc+0x62>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     a54:	f012 0fc0 	tst.w	r2, #192	; 0xc0
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     a58:	f04f 0300 	mov.w	r3, #0
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     a5c:	d0e4      	beq.n	a28 <gc_alloc+0x70>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     a5e:	3001      	adds	r0, #1
     a60:	42b8      	cmp	r0, r7
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     a62:	f04f 0300 	mov.w	r3, #0
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     a66:	d3e6      	bcc.n	a36 <gc_alloc+0x7e>
        if (collected) {
     a68:	f1bc 0f00 	cmp.w	ip, #0
     a6c:	d170      	bne.n	b50 <gc_alloc+0x198>
        gc_collect();
     a6e:	f01a fe3f 	bl	1b6f0 <gc_collect>
        collected = 1;
     a72:	f04f 0c01 	mov.w	ip, #1
    }
     a76:	e7b7      	b.n	9e8 <gc_alloc+0x30>
    if (!collected && MP_STATE_MEM(gc_alloc_amount) >= MP_STATE_MEM(gc_alloc_threshold)) {
     a78:	f8d5 21d0 	ldr.w	r2, [r5, #464]	; 0x1d0
     a7c:	f8d5 31d4 	ldr.w	r3, [r5, #468]	; 0x1d4
     a80:	429a      	cmp	r2, r3
     a82:	d3af      	bcc.n	9e4 <gc_alloc+0x2c>
        gc_collect();
     a84:	f01a fe34 	bl	1b6f0 <gc_collect>
        collected = 1;
     a88:	f04f 0c01 	mov.w	ip, #1
     a8c:	e7aa      	b.n	9e4 <gc_alloc+0x2c>
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     a8e:	0080      	lsls	r0, r0, #2
    start_block = i - n_free + 1;
     a90:	1ac1      	subs	r1, r0, r3
    if (n_free == 1) {
     a92:	2b01      	cmp	r3, #1
        MP_STATE_MEM(gc_last_free_atb_index) = (i + 1) / BLOCKS_PER_ATB;
     a94:	f100 0c01 	add.w	ip, r0, #1
    start_block = i - n_free + 1;
     a98:	f101 0701 	add.w	r7, r1, #1
        MP_STATE_MEM(gc_last_free_atb_index) = (i + 1) / BLOCKS_PER_ATB;
     a9c:	bf04      	itt	eq
     a9e:	ea4f 039c 	moveq.w	r3, ip, lsr #2
     aa2:	f8c5 31d8 	streq.w	r3, [r5, #472]	; 0x1d8
    ATB_FREE_TO_HEAD(start_block);
     aa6:	08bb      	lsrs	r3, r7, #2
     aa8:	f007 0203 	and.w	r2, r7, #3
     aac:	f81e 8003 	ldrb.w	r8, [lr, r3]
     ab0:	ea4f 0942 	mov.w	r9, r2, lsl #1
     ab4:	2201      	movs	r2, #1
     ab6:	fa02 f209 	lsl.w	r2, r2, r9
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     aba:	3102      	adds	r1, #2
    ATB_FREE_TO_HEAD(start_block);
     abc:	ea42 0208 	orr.w	r2, r2, r8
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     ac0:	4288      	cmp	r0, r1
    ATB_FREE_TO_HEAD(start_block);
     ac2:	f80e 2003 	strb.w	r2, [lr, r3]
        ATB_FREE_TO_TAIL(bl);
     ac6:	bf28      	it	cs
     ac8:	f04f 0802 	movcs.w	r8, #2
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     acc:	d311      	bcc.n	af2 <gc_alloc+0x13a>
        ATB_FREE_TO_TAIL(bl);
     ace:	ea4f 0e91 	mov.w	lr, r1, lsr #2
     ad2:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
     ad6:	f001 0303 	and.w	r3, r1, #3
     ada:	f812 900e 	ldrb.w	r9, [r2, lr]
     ade:	005b      	lsls	r3, r3, #1
     ae0:	fa08 f303 	lsl.w	r3, r8, r3
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     ae4:	3101      	adds	r1, #1
        ATB_FREE_TO_TAIL(bl);
     ae6:	ea43 0309 	orr.w	r3, r3, r9
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     aea:	4288      	cmp	r0, r1
        ATB_FREE_TO_TAIL(bl);
     aec:	f802 300e 	strb.w	r3, [r2, lr]
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     af0:	d2ed      	bcs.n	ace <gc_alloc+0x116>
    void *ret_ptr = (void*)(MP_STATE_MEM(gc_pool_start) + start_block * BYTES_PER_BLOCK);
     af2:	f8d5 a0c0 	ldr.w	sl, [r5, #192]	; 0xc0
    MP_STATE_MEM(gc_alloc_amount) += n_blocks;
     af6:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
    void *ret_ptr = (void*)(MP_STATE_MEM(gc_pool_start) + start_block * BYTES_PER_BLOCK);
     afa:	f8df 905c 	ldr.w	r9, [pc, #92]	; b58 <gc_alloc+0x1a0>
     afe:	ea4f 1807 	mov.w	r8, r7, lsl #4
    memset((byte*)ret_ptr, 0, (end_block - start_block + 1) * BYTES_PER_BLOCK);
     b02:	ebc7 020c 	rsb	r2, r7, ip
    void *ret_ptr = (void*)(MP_STATE_MEM(gc_pool_start) + start_block * BYTES_PER_BLOCK);
     b06:	eb0a 0b08 	add.w	fp, sl, r8
    MP_STATE_MEM(gc_alloc_amount) += n_blocks;
     b0a:	441e      	add	r6, r3
    memset((byte*)ret_ptr, 0, (end_block - start_block + 1) * BYTES_PER_BLOCK);
     b0c:	0112      	lsls	r2, r2, #4
     b0e:	4658      	mov	r0, fp
     b10:	2100      	movs	r1, #0
    MP_STATE_MEM(gc_alloc_amount) += n_blocks;
     b12:	f8c5 61d0 	str.w	r6, [r5, #464]	; 0x1d0
    memset((byte*)ret_ptr, 0, (end_block - start_block + 1) * BYTES_PER_BLOCK);
     b16:	f01c f9d7 	bl	1cec8 <memset>
    if (has_finaliser) {
     b1a:	b16c      	cbz	r4, b38 <gc_alloc+0x180>
        ((mp_obj_base_t*)ret_ptr)->type = NULL;
     b1c:	2300      	movs	r3, #0
        FTB_SET(start_block);
     b1e:	f8d9 00bc 	ldr.w	r0, [r9, #188]	; 0xbc
        ((mp_obj_base_t*)ret_ptr)->type = NULL;
     b22:	f84a 3008 	str.w	r3, [sl, r8]
        FTB_SET(start_block);
     b26:	08f9      	lsrs	r1, r7, #3
     b28:	2201      	movs	r2, #1
     b2a:	5c43      	ldrb	r3, [r0, r1]
     b2c:	f007 0707 	and.w	r7, r7, #7
     b30:	fa02 f707 	lsl.w	r7, r2, r7
     b34:	431f      	orrs	r7, r3
     b36:	5447      	strb	r7, [r0, r1]
     b38:	4658      	mov	r0, fp
}
     b3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     b3e:	0080      	lsls	r0, r0, #2
     b40:	3001      	adds	r0, #1
     b42:	e7a5      	b.n	a90 <gc_alloc+0xd8>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     b44:	0080      	lsls	r0, r0, #2
     b46:	3002      	adds	r0, #2
     b48:	e7a2      	b.n	a90 <gc_alloc+0xd8>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     b4a:	0080      	lsls	r0, r0, #2
     b4c:	3003      	adds	r0, #3
     b4e:	e79f      	b.n	a90 <gc_alloc+0xd8>
        return NULL;
     b50:	2000      	movs	r0, #0
     b52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b56:	bf00      	nop
     b58:	200012f0 	.word	0x200012f0

00000b5c <gc_free>:
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     b5c:	4b03      	ldr	r3, [pc, #12]	; (b6c <gc_free+0x10>)
     b5e:	f8b3 31cc 	ldrh.w	r3, [r3, #460]	; 0x1cc
     b62:	b90b      	cbnz	r3, b68 <gc_free+0xc>
    if (ptr == NULL) {
     b64:	b100      	cbz	r0, b68 <gc_free+0xc>
     b66:	e4bb      	b.n	4e0 <gc_free.part.0>
     b68:	4770      	bx	lr
     b6a:	bf00      	nop
     b6c:	200012f0 	.word	0x200012f0

00000b70 <gc_nbytes>:

size_t gc_nbytes(const void *ptr) {
     b70:	4603      	mov	r3, r0
    GC_ENTER();
    if (VERIFY_PTR(ptr)) {
     b72:	f010 000f 	ands.w	r0, r0, #15
     b76:	d12a      	bne.n	bce <gc_nbytes+0x5e>
     b78:	4a16      	ldr	r2, [pc, #88]	; (bd4 <gc_nbytes+0x64>)
     b7a:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
     b7e:	428b      	cmp	r3, r1
     b80:	d315      	bcc.n	bae <gc_nbytes+0x3e>
size_t gc_nbytes(const void *ptr) {
     b82:	b410      	push	{r4}
    if (VERIFY_PTR(ptr)) {
     b84:	f8d2 40c4 	ldr.w	r4, [r2, #196]	; 0xc4
     b88:	42a3      	cmp	r3, r4
     b8a:	d20e      	bcs.n	baa <gc_nbytes+0x3a>
        size_t block = BLOCK_FROM_PTR(ptr);
     b8c:	1a5b      	subs	r3, r3, r1
        if (ATB_GET_KIND(block) == AT_HEAD) {
     b8e:	f8d2 40b4 	ldr.w	r4, [r2, #180]	; 0xb4
     b92:	099a      	lsrs	r2, r3, #6
        size_t block = BLOCK_FROM_PTR(ptr);
     b94:	0919      	lsrs	r1, r3, #4
        if (ATB_GET_KIND(block) == AT_HEAD) {
     b96:	5ca2      	ldrb	r2, [r4, r2]
     b98:	f001 0303 	and.w	r3, r1, #3
     b9c:	005b      	lsls	r3, r3, #1
     b9e:	fa42 f303 	asr.w	r3, r2, r3
     ba2:	f003 0303 	and.w	r3, r3, #3
     ba6:	2b01      	cmp	r3, #1
     ba8:	d002      	beq.n	bb0 <gc_nbytes+0x40>
    }

    // invalid pointer
    GC_EXIT();
    return 0;
}
     baa:	f85d 4b04 	ldr.w	r4, [sp], #4
     bae:	4770      	bx	lr
                n_blocks += 1;
     bb0:	3001      	adds	r0, #1
     bb2:	180b      	adds	r3, r1, r0
            } while (ATB_GET_KIND(block + n_blocks) == AT_TAIL);
     bb4:	089a      	lsrs	r2, r3, #2
     bb6:	f003 0303 	and.w	r3, r3, #3
     bba:	5ca2      	ldrb	r2, [r4, r2]
     bbc:	005b      	lsls	r3, r3, #1
     bbe:	fa42 f303 	asr.w	r3, r2, r3
     bc2:	f003 0303 	and.w	r3, r3, #3
     bc6:	2b02      	cmp	r3, #2
     bc8:	d0f2      	beq.n	bb0 <gc_nbytes+0x40>
            return n_blocks * BYTES_PER_BLOCK;
     bca:	0100      	lsls	r0, r0, #4
     bcc:	e7ed      	b.n	baa <gc_nbytes+0x3a>
    return 0;
     bce:	2000      	movs	r0, #0
     bd0:	4770      	bx	lr
     bd2:	bf00      	nop
     bd4:	200012f0 	.word	0x200012f0

00000bd8 <gc_realloc>:
    }
}

#else // Alternative gc_realloc impl

void *gc_realloc(void *ptr_in, size_t n_bytes, bool allow_move) {
     bd8:	468c      	mov	ip, r1
    // check for pure allocation
    if (ptr_in == NULL) {
     bda:	4601      	mov	r1, r0
     bdc:	2800      	cmp	r0, #0
     bde:	f000 80e0 	beq.w	da2 <gc_realloc+0x1ca>
void *gc_realloc(void *ptr_in, size_t n_bytes, bool allow_move) {
     be2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     be6:	4605      	mov	r5, r0
     be8:	4690      	mov	r8, r2
        return gc_alloc(n_bytes, false);
    }

    // check for pure free
    if (n_bytes == 0) {
     bea:	f1bc 0f00 	cmp.w	ip, #0
     bee:	d07d      	beq.n	cec <gc_realloc+0x114>

    void *ptr = ptr_in;

    GC_ENTER();

    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     bf0:	4f78      	ldr	r7, [pc, #480]	; (dd4 <gc_realloc+0x1fc>)
     bf2:	f8b7 31cc 	ldrh.w	r3, [r7, #460]	; 0x1cc
     bf6:	2b00      	cmp	r3, #0
     bf8:	f040 80aa 	bne.w	d50 <gc_realloc+0x178>
        GC_EXIT();
        return NULL;
    }

    // get the GC block number corresponding to this pointer
    assert(VERIFY_PTR(ptr));
     bfc:	f010 010f 	ands.w	r1, r0, #15
     c00:	f040 80d9 	bne.w	db6 <gc_realloc+0x1de>
     c04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
     c08:	4298      	cmp	r0, r3
     c0a:	f0c0 80d4 	bcc.w	db6 <gc_realloc+0x1de>
     c0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
     c12:	4290      	cmp	r0, r2
     c14:	f080 80cf 	bcs.w	db6 <gc_realloc+0x1de>
    size_t block = BLOCK_FROM_PTR(ptr);
     c18:	ebc3 0900 	rsb	r9, r3, r0
    assert(ATB_GET_KIND(block) == AT_HEAD);
     c1c:	ea4f 1399 	mov.w	r3, r9, lsr #6
     c20:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
    size_t block = BLOCK_FROM_PTR(ptr);
     c24:	ea4f 1019 	mov.w	r0, r9, lsr #4
    assert(ATB_GET_KIND(block) == AT_HEAD);
     c28:	f000 0603 	and.w	r6, r0, #3
     c2c:	5cd3      	ldrb	r3, [r2, r3]
     c2e:	0076      	lsls	r6, r6, #1
     c30:	fa43 f606 	asr.w	r6, r3, r6
     c34:	f006 0603 	and.w	r6, r6, #3
     c38:	2e01      	cmp	r6, #1
     c3a:	f040 80c3 	bne.w	dc4 <gc_realloc+0x1ec>
    // free blocks to satisfy the realloc.  Note that we need to compute the
    // total size of the existing memory chunk so we can correctly and
    // efficiently shrink it (see below for shrinking code).
    size_t n_free   = 0;
    size_t n_blocks = 1; // counting HEAD block
    size_t max_block = MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB;
     c3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     c42:	1c44      	adds	r4, r0, #1
    size_t max_block = MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB;
     c44:	ea4f 0a83 	mov.w	sl, r3, lsl #2
    size_t new_blocks = (n_bytes + BYTES_PER_BLOCK - 1) / BYTES_PER_BLOCK;
     c48:	f10c 0e0f 	add.w	lr, ip, #15
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     c4c:	45a2      	cmp	sl, r4
    size_t new_blocks = (n_bytes + BYTES_PER_BLOCK - 1) / BYTES_PER_BLOCK;
     c4e:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     c52:	d911      	bls.n	c78 <gc_realloc+0xa0>
        byte block_type = ATB_GET_KIND(bl);
     c54:	ea4f 0b94 	mov.w	fp, r4, lsr #2
     c58:	f004 0303 	and.w	r3, r4, #3
     c5c:	f812 b00b 	ldrb.w	fp, [r2, fp]
     c60:	005b      	lsls	r3, r3, #1
     c62:	fa4b f303 	asr.w	r3, fp, r3
     c66:	f003 0303 	and.w	r3, r3, #3
        if (block_type == AT_TAIL) {
     c6a:	2b02      	cmp	r3, #2
     c6c:	d047      	beq.n	cfe <gc_realloc+0x126>
            n_blocks++;
            continue;
        }
        if (block_type == AT_FREE) {
     c6e:	b91b      	cbnz	r3, c78 <gc_realloc+0xa0>
            n_free++;
     c70:	3101      	adds	r1, #1
            if (n_blocks + n_free >= new_blocks) {
     c72:	198b      	adds	r3, r1, r6
     c74:	459e      	cmp	lr, r3
     c76:	d843      	bhi.n	d00 <gc_realloc+0x128>
        }
        break;
    }

    // return original ptr if it already has the requested number of blocks
    if (new_blocks == n_blocks) {
     c78:	45b6      	cmp	lr, r6
     c7a:	d034      	beq.n	ce6 <gc_realloc+0x10e>
        GC_EXIT();
        return ptr_in;
    }

    // check if we can shrink the allocated area
    if (new_blocks < n_blocks) {
     c7c:	d344      	bcc.n	d08 <gc_realloc+0x130>

        return ptr_in;
    }

    // check if we can expand in place
    if (new_blocks <= n_blocks + n_free) {
     c7e:	4431      	add	r1, r6
     c80:	458e      	cmp	lr, r1
     c82:	d868      	bhi.n	d56 <gc_realloc+0x17e>
        // mark few more blocks as used tail
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     c84:	1981      	adds	r1, r0, r6
     c86:	4470      	add	r0, lr
     c88:	4288      	cmp	r0, r1
     c8a:	d924      	bls.n	cd6 <gc_realloc+0xfe>
            assert(ATB_GET_KIND(bl) == AT_FREE);
     c8c:	088c      	lsrs	r4, r1, #2
     c8e:	f001 0303 	and.w	r3, r1, #3
     c92:	f812 c004 	ldrb.w	ip, [r2, r4]
     c96:	005b      	lsls	r3, r3, #1
     c98:	fa4c f803 	asr.w	r8, ip, r3
     c9c:	f018 0f03 	tst.w	r8, #3
     ca0:	4414      	add	r4, r2
            ATB_FREE_TO_TAIL(bl);
     ca2:	bf08      	it	eq
     ca4:	2202      	moveq	r2, #2
            assert(ATB_GET_KIND(bl) == AT_FREE);
     ca6:	d00e      	beq.n	cc6 <gc_realloc+0xee>
     ca8:	e07e      	b.n	da8 <gc_realloc+0x1d0>
     caa:	088c      	lsrs	r4, r1, #2
     cac:	f8d7 80b4 	ldr.w	r8, [r7, #180]	; 0xb4
     cb0:	f001 0303 	and.w	r3, r1, #3
     cb4:	f818 c004 	ldrb.w	ip, [r8, r4]
     cb8:	005b      	lsls	r3, r3, #1
     cba:	fa4c f903 	asr.w	r9, ip, r3
     cbe:	f019 0f03 	tst.w	r9, #3
     cc2:	4444      	add	r4, r8
     cc4:	d170      	bne.n	da8 <gc_realloc+0x1d0>
            ATB_FREE_TO_TAIL(bl);
     cc6:	fa02 f303 	lsl.w	r3, r2, r3
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     cca:	3101      	adds	r1, #1
            ATB_FREE_TO_TAIL(bl);
     ccc:	ea43 030c 	orr.w	r3, r3, ip
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     cd0:	4288      	cmp	r0, r1
            ATB_FREE_TO_TAIL(bl);
     cd2:	7023      	strb	r3, [r4, #0]
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     cd4:	d8e9      	bhi.n	caa <gc_realloc+0xd2>

        GC_EXIT();

        #if MICROPY_GC_CONSERVATIVE_CLEAR
        // be conservative and zero out all the newly allocated blocks
        memset((byte*)ptr_in + n_blocks * BYTES_PER_BLOCK, 0, (new_blocks - n_blocks) * BYTES_PER_BLOCK);
     cd6:	ebc6 020e 	rsb	r2, r6, lr
     cda:	0112      	lsls	r2, r2, #4
     cdc:	eb05 1006 	add.w	r0, r5, r6, lsl #4
     ce0:	2100      	movs	r1, #0
     ce2:	f01c f8f1 	bl	1cec8 <memset>

        #if EXTENSIVE_HEAP_PROFILING
        gc_dump_alloc_table();
        #endif

        return ptr_in;
     ce6:	4628      	mov	r0, r5
     ce8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     cec:	4b39      	ldr	r3, [pc, #228]	; (dd4 <gc_realloc+0x1fc>)
     cee:	f8b3 51cc 	ldrh.w	r5, [r3, #460]	; 0x1cc
     cf2:	bb6d      	cbnz	r5, d50 <gc_realloc+0x178>
     cf4:	f7ff fbf4 	bl	4e0 <gc_free.part.0>
        return NULL;
     cf8:	4628      	mov	r0, r5
     cfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            n_blocks++;
     cfe:	3601      	adds	r6, #1
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     d00:	3401      	adds	r4, #1
     d02:	45a2      	cmp	sl, r4
     d04:	d1a6      	bne.n	c54 <gc_realloc+0x7c>
     d06:	e7b7      	b.n	c78 <gc_realloc+0xa0>
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     d08:	4486      	add	lr, r0
     d0a:	4671      	mov	r1, lr
     d0c:	4430      	add	r0, r6
            ATB_ANY_TO_FREE(bl);
     d0e:	f04f 0803 	mov.w	r8, #3
     d12:	e001      	b.n	d18 <gc_realloc+0x140>
     d14:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
     d18:	ea4f 0c91 	mov.w	ip, r1, lsr #2
     d1c:	f001 0303 	and.w	r3, r1, #3
     d20:	f812 400c 	ldrb.w	r4, [r2, ip]
     d24:	005b      	lsls	r3, r3, #1
     d26:	fa08 f303 	lsl.w	r3, r8, r3
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     d2a:	3101      	adds	r1, #1
            ATB_ANY_TO_FREE(bl);
     d2c:	ea24 0303 	bic.w	r3, r4, r3
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     d30:	4281      	cmp	r1, r0
            ATB_ANY_TO_FREE(bl);
     d32:	f802 300c 	strb.w	r3, [r2, ip]
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     d36:	d1ed      	bne.n	d14 <gc_realloc+0x13c>
        if ((block + new_blocks) / BLOCKS_PER_ATB < MP_STATE_MEM(gc_last_free_atb_index)) {
     d38:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
     d3c:	4925      	ldr	r1, [pc, #148]	; (dd4 <gc_realloc+0x1fc>)
     d3e:	ea4f 029e 	mov.w	r2, lr, lsr #2
     d42:	429a      	cmp	r2, r3
     d44:	d2cf      	bcs.n	ce6 <gc_realloc+0x10e>
            MP_STATE_MEM(gc_last_free_atb_index) = (block + new_blocks) / BLOCKS_PER_ATB;
     d46:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
     d4a:	4628      	mov	r0, r5
     d4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return NULL;
     d50:	2000      	movs	r0, #0
     d52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }

    #if MICROPY_ENABLE_FINALISER
    bool ftb_state = FTB_GET(block);
     d56:	ea4f 19d9 	mov.w	r9, r9, lsr #7
     d5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
     d5e:	4c1d      	ldr	r4, [pc, #116]	; (dd4 <gc_realloc+0x1fc>)
     d60:	f813 1009 	ldrb.w	r1, [r3, r9]
     d64:	f000 0007 	and.w	r0, r0, #7
     d68:	fa41 f000 	asr.w	r0, r1, r0
     d6c:	f000 0101 	and.w	r1, r0, #1
    bool ftb_state = false;
    #endif

    GC_EXIT();

    if (!allow_move) {
     d70:	f1b8 0f00 	cmp.w	r8, #0
     d74:	d0ec      	beq.n	d50 <gc_realloc+0x178>
        // not allowed to move memory block so return failure
        return NULL;
    }

    // can't resize inplace; try to find a new contiguous chain
    void *ptr_out = gc_alloc(n_bytes, ftb_state);
     d76:	4660      	mov	r0, ip
     d78:	f7ff fe1e 	bl	9b8 <gc_alloc>

    // check that the alloc succeeded
    if (ptr_out == NULL) {
     d7c:	4607      	mov	r7, r0
     d7e:	2800      	cmp	r0, #0
     d80:	d0e6      	beq.n	d50 <gc_realloc+0x178>
        return NULL;
    }

    DEBUG_printf("gc_realloc(%p -> %p)\n", ptr_in, ptr_out);
    memcpy(ptr_out, ptr_in, n_blocks * BYTES_PER_BLOCK);
     d82:	0132      	lsls	r2, r6, #4
     d84:	4629      	mov	r1, r5
     d86:	f01c f803 	bl	1cd90 <memcpy>
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     d8a:	f8b4 31cc 	ldrh.w	r3, [r4, #460]	; 0x1cc
     d8e:	b92b      	cbnz	r3, d9c <gc_realloc+0x1c4>
     d90:	4628      	mov	r0, r5
     d92:	f7ff fba5 	bl	4e0 <gc_free.part.0>
     d96:	4638      	mov	r0, r7
     d98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d9c:	4638      	mov	r0, r7
    gc_free(ptr_in);
    return ptr_out;
}
     d9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return gc_alloc(n_bytes, false);
     da2:	4660      	mov	r0, ip
     da4:	f7ff be08 	b.w	9b8 <gc_alloc>
            assert(ATB_GET_KIND(bl) == AT_FREE);
     da8:	4b0b      	ldr	r3, [pc, #44]	; (dd8 <gc_realloc+0x200>)
     daa:	4a0c      	ldr	r2, [pc, #48]	; (ddc <gc_realloc+0x204>)
     dac:	480c      	ldr	r0, [pc, #48]	; (de0 <gc_realloc+0x208>)
     dae:	f240 21ea 	movw	r1, #746	; 0x2ea
     db2:	f01a fce7 	bl	1b784 <__assert_func>
    assert(VERIFY_PTR(ptr));
     db6:	4b0b      	ldr	r3, [pc, #44]	; (de4 <gc_realloc+0x20c>)
     db8:	4a08      	ldr	r2, [pc, #32]	; (ddc <gc_realloc+0x204>)
     dba:	4809      	ldr	r0, [pc, #36]	; (de0 <gc_realloc+0x208>)
     dbc:	f240 21aa 	movw	r1, #682	; 0x2aa
     dc0:	f01a fce0 	bl	1b784 <__assert_func>
    assert(ATB_GET_KIND(block) == AT_HEAD);
     dc4:	4b08      	ldr	r3, [pc, #32]	; (de8 <gc_realloc+0x210>)
     dc6:	4a05      	ldr	r2, [pc, #20]	; (ddc <gc_realloc+0x204>)
     dc8:	4805      	ldr	r0, [pc, #20]	; (de0 <gc_realloc+0x208>)
     dca:	f44f 712b 	mov.w	r1, #684	; 0x2ac
     dce:	f01a fcd9 	bl	1b784 <__assert_func>
     dd2:	bf00      	nop
     dd4:	200012f0 	.word	0x200012f0
     dd8:	0001e00c 	.word	0x0001e00c
     ddc:	0001df5c 	.word	0x0001df5c
     de0:	0001df78 	.word	0x0001df78
     de4:	0001df68 	.word	0x0001df68
     de8:	0001df88 	.word	0x0001df88

00000dec <gc_dump_info>:
#endif // Alternative gc_realloc impl

void gc_dump_info(void) {
     dec:	b510      	push	{r4, lr}
     dee:	b08a      	sub	sp, #40	; 0x28
    gc_info_t info;
    gc_info(&info);
     df0:	a803      	add	r0, sp, #12
    mp_printf(&mp_plat_print, "GC: total: %u, used: %u, free: %u\n",
     df2:	4c0b      	ldr	r4, [pc, #44]	; (e20 <gc_dump_info+0x34>)
    gc_info(&info);
     df4:	f7ff fd62 	bl	8bc <gc_info>
    mp_printf(&mp_plat_print, "GC: total: %u, used: %u, free: %u\n",
     df8:	9905      	ldr	r1, [sp, #20]
     dfa:	9b04      	ldr	r3, [sp, #16]
     dfc:	9a03      	ldr	r2, [sp, #12]
     dfe:	9100      	str	r1, [sp, #0]
     e00:	4620      	mov	r0, r4
     e02:	4908      	ldr	r1, [pc, #32]	; (e24 <gc_dump_info+0x38>)
     e04:	f001 f918 	bl	2038 <mp_printf>
        (uint)info.total, (uint)info.used, (uint)info.free);
    mp_printf(&mp_plat_print, " No. of 1-blocks: %u, 2-blocks: %u, max blk sz: %u, max free sz: %u\n",
     e08:	a806      	add	r0, sp, #24
     e0a:	c80d      	ldmia	r0, {r0, r2, r3}
     e0c:	9909      	ldr	r1, [sp, #36]	; 0x24
     e0e:	9001      	str	r0, [sp, #4]
     e10:	9100      	str	r1, [sp, #0]
     e12:	4620      	mov	r0, r4
     e14:	4904      	ldr	r1, [pc, #16]	; (e28 <gc_dump_info+0x3c>)
     e16:	f001 f90f 	bl	2038 <mp_printf>
           (uint)info.num_1block, (uint)info.num_2block, (uint)info.max_block, (uint)info.max_free);
}
     e1a:	b00a      	add	sp, #40	; 0x28
     e1c:	bd10      	pop	{r4, pc}
     e1e:	bf00      	nop
     e20:	0001f884 	.word	0x0001f884
     e24:	0001e028 	.word	0x0001e028
     e28:	0001e04c 	.word	0x0001e04c

00000e2c <gc_dump_alloc_table>:

void gc_dump_alloc_table(void) {
     e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    GC_ENTER();
    static const size_t DUMP_BYTES_PER_LINE = 64;
    #if !EXTENSIVE_HEAP_PROFILING
    // When comparing heap output we don't want to print the starting
    // pointer of the heap because it changes from run to run.
    mp_printf(&mp_plat_print, "GC memory layout; from %p:", MP_STATE_MEM(gc_pool_start));
     e30:	4f4e      	ldr	r7, [pc, #312]	; (f6c <gc_dump_alloc_table+0x140>)
     e32:	494f      	ldr	r1, [pc, #316]	; (f70 <gc_dump_alloc_table+0x144>)
     e34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
     e38:	484e      	ldr	r0, [pc, #312]	; (f74 <gc_dump_alloc_table+0x148>)
     e3a:	f001 f8fd 	bl	2038 <mp_printf>
    #endif
    for (size_t bl = 0; bl < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; bl++) {
     e3e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
     e42:	0089      	lsls	r1, r1, #2
     e44:	bf18      	it	ne
     e46:	2500      	movne	r5, #0
     e48:	d11f      	bne.n	e8a <gc_dump_alloc_table+0x5e>
     e4a:	e078      	b.n	f3e <gc_dump_alloc_table+0x112>
     e4c:	f005 0603 	and.w	r6, r5, #3
     e50:	0076      	lsls	r6, r6, #1
     e52:	ea4f 0895 	mov.w	r8, r5, lsr #2
            // (the cast to uint32_t is for 16-bit ports)
            //mp_printf(&mp_plat_print, "\n%05x: ", (uint)(PTR_FROM_BLOCK(bl) & (uint32_t)0xfffff));
            mp_printf(&mp_plat_print, "\n%05x: ", (uint)((bl * BYTES_PER_BLOCK) & (uint32_t)0xfffff));
        }
        int c = ' ';
        switch (ATB_GET_KIND(bl)) {
     e56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
     e5a:	4a44      	ldr	r2, [pc, #272]	; (f6c <gc_dump_alloc_table+0x140>)
     e5c:	f813 3008 	ldrb.w	r3, [r3, r8]
     e60:	fa43 f606 	asr.w	r6, r3, r6
     e64:	f006 0603 	and.w	r6, r6, #3
     e68:	2e02      	cmp	r6, #2
     e6a:	d066      	beq.n	f3a <gc_dump_alloc_table+0x10e>
     e6c:	2e03      	cmp	r6, #3
     e6e:	d062      	beq.n	f36 <gc_dump_alloc_table+0x10a>
     e70:	2e01      	cmp	r6, #1
     e72:	d044      	beq.n	efe <gc_dump_alloc_table+0xd2>
            case AT_FREE: c = '.'; break;
     e74:	222e      	movs	r2, #46	; 0x2e
                break;
            }
            case AT_TAIL: c = '='; break;
            case AT_MARK: c = 'm'; break;
        }
        mp_printf(&mp_plat_print, "%c", c);
     e76:	4940      	ldr	r1, [pc, #256]	; (f78 <gc_dump_alloc_table+0x14c>)
     e78:	483e      	ldr	r0, [pc, #248]	; (f74 <gc_dump_alloc_table+0x148>)
     e7a:	f001 f8dd 	bl	2038 <mp_printf>
    for (size_t bl = 0; bl < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; bl++) {
     e7e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
     e82:	3501      	adds	r5, #1
     e84:	0089      	lsls	r1, r1, #2
     e86:	42a9      	cmp	r1, r5
     e88:	d959      	bls.n	f3e <gc_dump_alloc_table+0x112>
        if (bl % DUMP_BYTES_PER_LINE == 0) {
     e8a:	06a8      	lsls	r0, r5, #26
     e8c:	d1de      	bne.n	e4c <gc_dump_alloc_table+0x20>
                while (bl2 < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB && ATB_GET_KIND(bl2) == AT_FREE) {
     e8e:	428d      	cmp	r5, r1
     e90:	d261      	bcs.n	f56 <gc_dump_alloc_table+0x12a>
     e92:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
     e96:	ea4f 0895 	mov.w	r8, r5, lsr #2
     e9a:	f005 0603 	and.w	r6, r5, #3
     e9e:	f810 3008 	ldrb.w	r3, [r0, r8]
     ea2:	0076      	lsls	r6, r6, #1
     ea4:	4133      	asrs	r3, r6
     ea6:	079a      	lsls	r2, r3, #30
     ea8:	d121      	bne.n	eee <gc_dump_alloc_table+0xc2>
     eaa:	462c      	mov	r4, r5
     eac:	e004      	b.n	eb8 <gc_dump_alloc_table+0x8c>
     eae:	5c82      	ldrb	r2, [r0, r2]
     eb0:	fa42 f303 	asr.w	r3, r2, r3
     eb4:	079b      	lsls	r3, r3, #30
     eb6:	d108      	bne.n	eca <gc_dump_alloc_table+0x9e>
                    bl2++;
     eb8:	3401      	adds	r4, #1
                while (bl2 < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB && ATB_GET_KIND(bl2) == AT_FREE) {
     eba:	f004 0303 	and.w	r3, r4, #3
     ebe:	428c      	cmp	r4, r1
     ec0:	ea4f 0294 	mov.w	r2, r4, lsr #2
     ec4:	ea4f 0343 	mov.w	r3, r3, lsl #1
     ec8:	d3f1      	bcc.n	eae <gc_dump_alloc_table+0x82>
                if (bl2 - bl >= 2 * DUMP_BYTES_PER_LINE) {
     eca:	1b62      	subs	r2, r4, r5
     ecc:	2a7f      	cmp	r2, #127	; 0x7f
     ece:	d90e      	bls.n	eee <gc_dump_alloc_table+0xc2>
                    mp_printf(&mp_plat_print, "\n       (%u lines all free)", (uint)(bl2 - bl) / DUMP_BYTES_PER_LINE);
     ed0:	0992      	lsrs	r2, r2, #6
     ed2:	492a      	ldr	r1, [pc, #168]	; (f7c <gc_dump_alloc_table+0x150>)
     ed4:	4827      	ldr	r0, [pc, #156]	; (f74 <gc_dump_alloc_table+0x148>)
     ed6:	f001 f8af 	bl	2038 <mp_printf>
                    if (bl >= MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB) {
     eda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
                    bl = bl2 & (~(DUMP_BYTES_PER_LINE - 1));
     ede:	f024 053f 	bic.w	r5, r4, #63	; 0x3f
                    if (bl >= MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB) {
     ee2:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
     ee6:	d22a      	bcs.n	f3e <gc_dump_alloc_table+0x112>
     ee8:	ea4f 0895 	mov.w	r8, r5, lsr #2
     eec:	2600      	movs	r6, #0
            mp_printf(&mp_plat_print, "\n%05x: ", (uint)((bl * BYTES_PER_BLOCK) & (uint32_t)0xfffff));
     eee:	4a24      	ldr	r2, [pc, #144]	; (f80 <gc_dump_alloc_table+0x154>)
     ef0:	4924      	ldr	r1, [pc, #144]	; (f84 <gc_dump_alloc_table+0x158>)
     ef2:	4820      	ldr	r0, [pc, #128]	; (f74 <gc_dump_alloc_table+0x148>)
     ef4:	012b      	lsls	r3, r5, #4
     ef6:	401a      	ands	r2, r3
     ef8:	f001 f89e 	bl	2038 <mp_printf>
     efc:	e7ab      	b.n	e56 <gc_dump_alloc_table+0x2a>
                if (*ptr == &mp_type_tuple) { c = 'T'; }
     efe:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
     f02:	4a21      	ldr	r2, [pc, #132]	; (f88 <gc_dump_alloc_table+0x15c>)
     f04:	012b      	lsls	r3, r5, #4
     f06:	58cb      	ldr	r3, [r1, r3]
     f08:	4293      	cmp	r3, r2
     f0a:	d020      	beq.n	f4e <gc_dump_alloc_table+0x122>
                else if (*ptr == &mp_type_list) { c = 'L'; }
     f0c:	4a1f      	ldr	r2, [pc, #124]	; (f8c <gc_dump_alloc_table+0x160>)
     f0e:	4293      	cmp	r3, r2
     f10:	d01f      	beq.n	f52 <gc_dump_alloc_table+0x126>
                else if (*ptr == &mp_type_dict) { c = 'D'; }
     f12:	4a1f      	ldr	r2, [pc, #124]	; (f90 <gc_dump_alloc_table+0x164>)
     f14:	4293      	cmp	r3, r2
     f16:	d024      	beq.n	f62 <gc_dump_alloc_table+0x136>
                else if (*ptr == &mp_type_str || *ptr == &mp_type_bytes) { c = 'S'; }
     f18:	4a1e      	ldr	r2, [pc, #120]	; (f94 <gc_dump_alloc_table+0x168>)
     f1a:	4293      	cmp	r3, r2
     f1c:	d015      	beq.n	f4a <gc_dump_alloc_table+0x11e>
     f1e:	4a1e      	ldr	r2, [pc, #120]	; (f98 <gc_dump_alloc_table+0x16c>)
     f20:	4293      	cmp	r3, r2
     f22:	d012      	beq.n	f4a <gc_dump_alloc_table+0x11e>
                else if (*ptr == &mp_type_fun_bc) { c = 'B'; }
     f24:	4a1d      	ldr	r2, [pc, #116]	; (f9c <gc_dump_alloc_table+0x170>)
     f26:	4293      	cmp	r3, r2
     f28:	d01d      	beq.n	f66 <gc_dump_alloc_table+0x13a>
                else if (*ptr == &mp_type_module) { c = 'M'; }
     f2a:	4a1d      	ldr	r2, [pc, #116]	; (fa0 <gc_dump_alloc_table+0x174>)
     f2c:	4293      	cmp	r3, r2
     f2e:	bf14      	ite	ne
     f30:	2268      	movne	r2, #104	; 0x68
     f32:	224d      	moveq	r2, #77	; 0x4d
     f34:	e79f      	b.n	e76 <gc_dump_alloc_table+0x4a>
            case AT_MARK: c = 'm'; break;
     f36:	226d      	movs	r2, #109	; 0x6d
     f38:	e79d      	b.n	e76 <gc_dump_alloc_table+0x4a>
            case AT_TAIL: c = '='; break;
     f3a:	223d      	movs	r2, #61	; 0x3d
     f3c:	e79b      	b.n	e76 <gc_dump_alloc_table+0x4a>
    }
    mp_print_str(&mp_plat_print, "\n");
     f3e:	4919      	ldr	r1, [pc, #100]	; (fa4 <gc_dump_alloc_table+0x178>)
     f40:	480c      	ldr	r0, [pc, #48]	; (f74 <gc_dump_alloc_table+0x148>)
    GC_EXIT();
}
     f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    mp_print_str(&mp_plat_print, "\n");
     f46:	f000 bd63 	b.w	1a10 <mp_print_str>
                else if (*ptr == &mp_type_str || *ptr == &mp_type_bytes) { c = 'S'; }
     f4a:	2253      	movs	r2, #83	; 0x53
     f4c:	e793      	b.n	e76 <gc_dump_alloc_table+0x4a>
                if (*ptr == &mp_type_tuple) { c = 'T'; }
     f4e:	2254      	movs	r2, #84	; 0x54
     f50:	e791      	b.n	e76 <gc_dump_alloc_table+0x4a>
                else if (*ptr == &mp_type_list) { c = 'L'; }
     f52:	224c      	movs	r2, #76	; 0x4c
     f54:	e78f      	b.n	e76 <gc_dump_alloc_table+0x4a>
     f56:	f005 0603 	and.w	r6, r5, #3
     f5a:	0076      	lsls	r6, r6, #1
     f5c:	ea4f 0895 	mov.w	r8, r5, lsr #2
     f60:	e7c5      	b.n	eee <gc_dump_alloc_table+0xc2>
                else if (*ptr == &mp_type_dict) { c = 'D'; }
     f62:	2244      	movs	r2, #68	; 0x44
     f64:	e787      	b.n	e76 <gc_dump_alloc_table+0x4a>
                else if (*ptr == &mp_type_fun_bc) { c = 'B'; }
     f66:	2242      	movs	r2, #66	; 0x42
     f68:	e785      	b.n	e76 <gc_dump_alloc_table+0x4a>
     f6a:	bf00      	nop
     f6c:	200012f0 	.word	0x200012f0
     f70:	0001e094 	.word	0x0001e094
     f74:	0001f884 	.word	0x0001f884
     f78:	0001e0d8 	.word	0x0001e0d8
     f7c:	0001e0b4 	.word	0x0001e0b4
     f80:	000ffff0 	.word	0x000ffff0
     f84:	0001e0d0 	.word	0x0001e0d0
     f88:	00023dec 	.word	0x00023dec
     f8c:	000231ec 	.word	0x000231ec
     f90:	00022104 	.word	0x00022104
     f94:	00023b68 	.word	0x00023b68
     f98:	00023ba4 	.word	0x00023ba4
     f9c:	00022b60 	.word	0x00022b60
     fa0:	000233a8 	.word	0x000233a8
     fa4:	0001e0b0 	.word	0x0001e0b0

00000fa8 <qstr_compute_hash>:
#define QSTR_ENTER()
#define QSTR_EXIT()
#endif

// this must match the equivalent function in makeqstrdata.py
mp_uint_t qstr_compute_hash(const byte *data, size_t len) {
     fa8:	b480      	push	{r7}
     faa:	b085      	sub	sp, #20
     fac:	af00      	add	r7, sp, #0
     fae:	6078      	str	r0, [r7, #4]
     fb0:	6039      	str	r1, [r7, #0]
    // djb2 algorithm; see http://www.cse.yorku.ca/~oz/hash.html
    mp_uint_t hash = 5381;
     fb2:	f241 5305 	movw	r3, #5381	; 0x1505
     fb6:	60fb      	str	r3, [r7, #12]
    for (const byte *top = data + len; data < top; data++) {
     fb8:	687a      	ldr	r2, [r7, #4]
     fba:	683b      	ldr	r3, [r7, #0]
     fbc:	4413      	add	r3, r2
     fbe:	60bb      	str	r3, [r7, #8]
     fc0:	e00a      	b.n	fd8 <qstr_compute_hash+0x30>
        hash = ((hash << 5) + hash) ^ (*data); // hash * 33 ^ data
     fc2:	68fb      	ldr	r3, [r7, #12]
     fc4:	015a      	lsls	r2, r3, #5
     fc6:	68fb      	ldr	r3, [r7, #12]
     fc8:	4413      	add	r3, r2
     fca:	687a      	ldr	r2, [r7, #4]
     fcc:	7812      	ldrb	r2, [r2, #0]
     fce:	4053      	eors	r3, r2
     fd0:	60fb      	str	r3, [r7, #12]
    for (const byte *top = data + len; data < top; data++) {
     fd2:	687b      	ldr	r3, [r7, #4]
     fd4:	3301      	adds	r3, #1
     fd6:	607b      	str	r3, [r7, #4]
     fd8:	687a      	ldr	r2, [r7, #4]
     fda:	68bb      	ldr	r3, [r7, #8]
     fdc:	429a      	cmp	r2, r3
     fde:	d3f0      	bcc.n	fc2 <qstr_compute_hash+0x1a>
    }
    hash &= Q_HASH_MASK;
     fe0:	68fb      	ldr	r3, [r7, #12]
     fe2:	b2db      	uxtb	r3, r3
     fe4:	60fb      	str	r3, [r7, #12]
    // Make sure that valid hash is never zero, zero means "hash not computed"
    if (hash == 0) {
     fe6:	68fb      	ldr	r3, [r7, #12]
     fe8:	2b00      	cmp	r3, #0
     fea:	d102      	bne.n	ff2 <qstr_compute_hash+0x4a>
        hash++;
     fec:	68fb      	ldr	r3, [r7, #12]
     fee:	3301      	adds	r3, #1
     ff0:	60fb      	str	r3, [r7, #12]
    }
    return hash;
     ff2:	68fb      	ldr	r3, [r7, #12]
}
     ff4:	4618      	mov	r0, r3
     ff6:	3714      	adds	r7, #20
     ff8:	46bd      	mov	sp, r7
     ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
     ffe:	4770      	bx	lr

00001000 <qstr_init>:
#define CONST_POOL MICROPY_QSTR_EXTRA_POOL
#else
#define CONST_POOL mp_qstr_const_pool
#endif

void qstr_init(void) {
    1000:	b480      	push	{r7}
    1002:	af00      	add	r7, sp, #0
    MP_STATE_VM(last_pool) = (qstr_pool_t*)&CONST_POOL; // we won't modify the const_pool since it has no allocated room left
    1004:	4b05      	ldr	r3, [pc, #20]	; (101c <qstr_init+0x1c>)
    1006:	4a06      	ldr	r2, [pc, #24]	; (1020 <qstr_init+0x20>)
    1008:	611a      	str	r2, [r3, #16]
    MP_STATE_VM(qstr_last_chunk) = NULL;
    100a:	4b04      	ldr	r3, [pc, #16]	; (101c <qstr_init+0x1c>)
    100c:	2200      	movs	r2, #0
    100e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    #if MICROPY_PY_THREAD
    mp_thread_mutex_init(&MP_STATE_VM(qstr_mutex));
    #endif
}
    1012:	bf00      	nop
    1014:	46bd      	mov	sp, r7
    1016:	f85d 7b04 	ldr.w	r7, [sp], #4
    101a:	4770      	bx	lr
    101c:	200012f0 	.word	0x200012f0
    1020:	00025d74 	.word	0x00025d74

00001024 <find_qstr>:

STATIC const byte *find_qstr(qstr q) {
    1024:	b480      	push	{r7}
    1026:	b085      	sub	sp, #20
    1028:	af00      	add	r7, sp, #0
    102a:	6078      	str	r0, [r7, #4]
    // search pool for this qstr
    // total_prev_len==0 in the final pool, so the loop will always terminate
    qstr_pool_t *pool = MP_STATE_VM(last_pool);
    102c:	4b0c      	ldr	r3, [pc, #48]	; (1060 <find_qstr+0x3c>)
    102e:	691b      	ldr	r3, [r3, #16]
    1030:	60fb      	str	r3, [r7, #12]
    while (q < pool->total_prev_len) {
    1032:	e002      	b.n	103a <find_qstr+0x16>
        pool = pool->prev;
    1034:	68fb      	ldr	r3, [r7, #12]
    1036:	681b      	ldr	r3, [r3, #0]
    1038:	60fb      	str	r3, [r7, #12]
    while (q < pool->total_prev_len) {
    103a:	68fb      	ldr	r3, [r7, #12]
    103c:	685a      	ldr	r2, [r3, #4]
    103e:	687b      	ldr	r3, [r7, #4]
    1040:	429a      	cmp	r2, r3
    1042:	d8f7      	bhi.n	1034 <find_qstr+0x10>
    }
    return pool->qstrs[q - pool->total_prev_len];
    1044:	68fb      	ldr	r3, [r7, #12]
    1046:	685b      	ldr	r3, [r3, #4]
    1048:	687a      	ldr	r2, [r7, #4]
    104a:	1ad2      	subs	r2, r2, r3
    104c:	68fb      	ldr	r3, [r7, #12]
    104e:	3204      	adds	r2, #4
    1050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
    1054:	4618      	mov	r0, r3
    1056:	3714      	adds	r7, #20
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr
    1060:	200012f0 	.word	0x200012f0

00001064 <qstr_add>:

// qstr_mutex must be taken while in this function
STATIC qstr qstr_add(const byte *q_ptr) {
    1064:	b580      	push	{r7, lr}
    1066:	b084      	sub	sp, #16
    1068:	af00      	add	r7, sp, #0
    106a:	6078      	str	r0, [r7, #4]
    DEBUG_printf("QSTR: add hash=%d len=%d data=%.*s\n", Q_GET_HASH(q_ptr), Q_GET_LENGTH(q_ptr), Q_GET_LENGTH(q_ptr), Q_GET_DATA(q_ptr));

    // make sure we have room in the pool for a new qstr
    if (MP_STATE_VM(last_pool)->len >= MP_STATE_VM(last_pool)->alloc) {
    106c:	4b25      	ldr	r3, [pc, #148]	; (1104 <qstr_add+0xa0>)
    106e:	691b      	ldr	r3, [r3, #16]
    1070:	68da      	ldr	r2, [r3, #12]
    1072:	4b24      	ldr	r3, [pc, #144]	; (1104 <qstr_add+0xa0>)
    1074:	691b      	ldr	r3, [r3, #16]
    1076:	689b      	ldr	r3, [r3, #8]
    1078:	429a      	cmp	r2, r3
    107a:	d32b      	bcc.n	10d4 <qstr_add+0x70>
        qstr_pool_t *pool = m_new_obj_var_maybe(qstr_pool_t, const char*, MP_STATE_VM(last_pool)->alloc * 2);
    107c:	4b21      	ldr	r3, [pc, #132]	; (1104 <qstr_add+0xa0>)
    107e:	691b      	ldr	r3, [r3, #16]
    1080:	689b      	ldr	r3, [r3, #8]
    1082:	3302      	adds	r3, #2
    1084:	00db      	lsls	r3, r3, #3
    1086:	4618      	mov	r0, r3
    1088:	f7ff f960 	bl	34c <m_malloc_maybe>
    108c:	60f8      	str	r0, [r7, #12]
        if (pool == NULL) {
    108e:	68fb      	ldr	r3, [r7, #12]
    1090:	2b00      	cmp	r3, #0
    1092:	d106      	bne.n	10a2 <qstr_add+0x3e>
            QSTR_EXIT();
            m_malloc_fail(MP_STATE_VM(last_pool)->alloc * 2);
    1094:	4b1b      	ldr	r3, [pc, #108]	; (1104 <qstr_add+0xa0>)
    1096:	691b      	ldr	r3, [r3, #16]
    1098:	689b      	ldr	r3, [r3, #8]
    109a:	005b      	lsls	r3, r3, #1
    109c:	4618      	mov	r0, r3
    109e:	f00b ff4d 	bl	cf3c <m_malloc_fail>
        }
        pool->prev = MP_STATE_VM(last_pool);
    10a2:	4b18      	ldr	r3, [pc, #96]	; (1104 <qstr_add+0xa0>)
    10a4:	691a      	ldr	r2, [r3, #16]
    10a6:	68fb      	ldr	r3, [r7, #12]
    10a8:	601a      	str	r2, [r3, #0]
        pool->total_prev_len = MP_STATE_VM(last_pool)->total_prev_len + MP_STATE_VM(last_pool)->len;
    10aa:	4b16      	ldr	r3, [pc, #88]	; (1104 <qstr_add+0xa0>)
    10ac:	691b      	ldr	r3, [r3, #16]
    10ae:	685a      	ldr	r2, [r3, #4]
    10b0:	4b14      	ldr	r3, [pc, #80]	; (1104 <qstr_add+0xa0>)
    10b2:	691b      	ldr	r3, [r3, #16]
    10b4:	68db      	ldr	r3, [r3, #12]
    10b6:	441a      	add	r2, r3
    10b8:	68fb      	ldr	r3, [r7, #12]
    10ba:	605a      	str	r2, [r3, #4]
        pool->alloc = MP_STATE_VM(last_pool)->alloc * 2;
    10bc:	4b11      	ldr	r3, [pc, #68]	; (1104 <qstr_add+0xa0>)
    10be:	691b      	ldr	r3, [r3, #16]
    10c0:	689b      	ldr	r3, [r3, #8]
    10c2:	005a      	lsls	r2, r3, #1
    10c4:	68fb      	ldr	r3, [r7, #12]
    10c6:	609a      	str	r2, [r3, #8]
        pool->len = 0;
    10c8:	68fb      	ldr	r3, [r7, #12]
    10ca:	2200      	movs	r2, #0
    10cc:	60da      	str	r2, [r3, #12]
        MP_STATE_VM(last_pool) = pool;
    10ce:	4a0d      	ldr	r2, [pc, #52]	; (1104 <qstr_add+0xa0>)
    10d0:	68fb      	ldr	r3, [r7, #12]
    10d2:	6113      	str	r3, [r2, #16]
        DEBUG_printf("QSTR: allocate new pool of size %d\n", MP_STATE_VM(last_pool)->alloc);
    }

    // add the new qstr
    MP_STATE_VM(last_pool)->qstrs[MP_STATE_VM(last_pool)->len++] = q_ptr;
    10d4:	4b0b      	ldr	r3, [pc, #44]	; (1104 <qstr_add+0xa0>)
    10d6:	6919      	ldr	r1, [r3, #16]
    10d8:	4b0a      	ldr	r3, [pc, #40]	; (1104 <qstr_add+0xa0>)
    10da:	691a      	ldr	r2, [r3, #16]
    10dc:	68d3      	ldr	r3, [r2, #12]
    10de:	1c58      	adds	r0, r3, #1
    10e0:	60d0      	str	r0, [r2, #12]
    10e2:	3304      	adds	r3, #4
    10e4:	687a      	ldr	r2, [r7, #4]
    10e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // return id for the newly-added qstr
    return MP_STATE_VM(last_pool)->total_prev_len + MP_STATE_VM(last_pool)->len - 1;
    10ea:	4b06      	ldr	r3, [pc, #24]	; (1104 <qstr_add+0xa0>)
    10ec:	691b      	ldr	r3, [r3, #16]
    10ee:	685a      	ldr	r2, [r3, #4]
    10f0:	4b04      	ldr	r3, [pc, #16]	; (1104 <qstr_add+0xa0>)
    10f2:	691b      	ldr	r3, [r3, #16]
    10f4:	68db      	ldr	r3, [r3, #12]
    10f6:	4413      	add	r3, r2
    10f8:	3b01      	subs	r3, #1
}
    10fa:	4618      	mov	r0, r3
    10fc:	3710      	adds	r7, #16
    10fe:	46bd      	mov	sp, r7
    1100:	bd80      	pop	{r7, pc}
    1102:	bf00      	nop
    1104:	200012f0 	.word	0x200012f0

00001108 <qstr_find_strn>:

qstr qstr_find_strn(const char *str, size_t str_len) {
    1108:	b580      	push	{r7, lr}
    110a:	b086      	sub	sp, #24
    110c:	af00      	add	r7, sp, #0
    110e:	6078      	str	r0, [r7, #4]
    1110:	6039      	str	r1, [r7, #0]
    // work out hash of str
    mp_uint_t str_hash = qstr_compute_hash((const byte*)str, str_len);
    1112:	6839      	ldr	r1, [r7, #0]
    1114:	6878      	ldr	r0, [r7, #4]
    1116:	f7ff ff47 	bl	fa8 <qstr_compute_hash>
    111a:	60f8      	str	r0, [r7, #12]

    // search pools for the data
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL; pool = pool->prev) {
    111c:	4b22      	ldr	r3, [pc, #136]	; (11a8 <qstr_find_strn+0xa0>)
    111e:	691b      	ldr	r3, [r3, #16]
    1120:	617b      	str	r3, [r7, #20]
    1122:	e038      	b.n	1196 <qstr_find_strn+0x8e>
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    1124:	697b      	ldr	r3, [r7, #20]
    1126:	3310      	adds	r3, #16
    1128:	613b      	str	r3, [r7, #16]
    112a:	697b      	ldr	r3, [r7, #20]
    112c:	f103 0210 	add.w	r2, r3, #16
    1130:	697b      	ldr	r3, [r7, #20]
    1132:	68db      	ldr	r3, [r3, #12]
    1134:	009b      	lsls	r3, r3, #2
    1136:	4413      	add	r3, r2
    1138:	60bb      	str	r3, [r7, #8]
    113a:	e025      	b.n	1188 <qstr_find_strn+0x80>
            if (Q_GET_HASH(*q) == str_hash && Q_GET_LENGTH(*q) == str_len && memcmp(Q_GET_DATA(*q), str, str_len) == 0) {
    113c:	693b      	ldr	r3, [r7, #16]
    113e:	681b      	ldr	r3, [r3, #0]
    1140:	781b      	ldrb	r3, [r3, #0]
    1142:	461a      	mov	r2, r3
    1144:	68fb      	ldr	r3, [r7, #12]
    1146:	429a      	cmp	r2, r3
    1148:	d11b      	bne.n	1182 <qstr_find_strn+0x7a>
    114a:	693b      	ldr	r3, [r7, #16]
    114c:	681b      	ldr	r3, [r3, #0]
    114e:	3301      	adds	r3, #1
    1150:	781b      	ldrb	r3, [r3, #0]
    1152:	461a      	mov	r2, r3
    1154:	683b      	ldr	r3, [r7, #0]
    1156:	429a      	cmp	r2, r3
    1158:	d113      	bne.n	1182 <qstr_find_strn+0x7a>
    115a:	693b      	ldr	r3, [r7, #16]
    115c:	681b      	ldr	r3, [r3, #0]
    115e:	3302      	adds	r3, #2
    1160:	683a      	ldr	r2, [r7, #0]
    1162:	6879      	ldr	r1, [r7, #4]
    1164:	4618      	mov	r0, r3
    1166:	f01b fefb 	bl	1cf60 <memcmp>
    116a:	4603      	mov	r3, r0
    116c:	2b00      	cmp	r3, #0
    116e:	d108      	bne.n	1182 <qstr_find_strn+0x7a>
                return pool->total_prev_len + (q - pool->qstrs);
    1170:	697b      	ldr	r3, [r7, #20]
    1172:	685b      	ldr	r3, [r3, #4]
    1174:	693a      	ldr	r2, [r7, #16]
    1176:	6979      	ldr	r1, [r7, #20]
    1178:	3110      	adds	r1, #16
    117a:	1a52      	subs	r2, r2, r1
    117c:	1092      	asrs	r2, r2, #2
    117e:	4413      	add	r3, r2
    1180:	e00d      	b.n	119e <qstr_find_strn+0x96>
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    1182:	693b      	ldr	r3, [r7, #16]
    1184:	3304      	adds	r3, #4
    1186:	613b      	str	r3, [r7, #16]
    1188:	693a      	ldr	r2, [r7, #16]
    118a:	68bb      	ldr	r3, [r7, #8]
    118c:	429a      	cmp	r2, r3
    118e:	d3d5      	bcc.n	113c <qstr_find_strn+0x34>
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL; pool = pool->prev) {
    1190:	697b      	ldr	r3, [r7, #20]
    1192:	681b      	ldr	r3, [r3, #0]
    1194:	617b      	str	r3, [r7, #20]
    1196:	697b      	ldr	r3, [r7, #20]
    1198:	2b00      	cmp	r3, #0
    119a:	d1c3      	bne.n	1124 <qstr_find_strn+0x1c>
            }
        }
    }

    // not found; return null qstr
    return 0;
    119c:	2300      	movs	r3, #0
}
    119e:	4618      	mov	r0, r3
    11a0:	3718      	adds	r7, #24
    11a2:	46bd      	mov	sp, r7
    11a4:	bd80      	pop	{r7, pc}
    11a6:	bf00      	nop
    11a8:	200012f0 	.word	0x200012f0

000011ac <qstr_from_str>:

qstr qstr_from_str(const char *str) {
    11ac:	b580      	push	{r7, lr}
    11ae:	b082      	sub	sp, #8
    11b0:	af00      	add	r7, sp, #0
    11b2:	6078      	str	r0, [r7, #4]
    return qstr_from_strn(str, strlen(str));
    11b4:	6878      	ldr	r0, [r7, #4]
    11b6:	f01b ff25 	bl	1d004 <strlen>
    11ba:	4603      	mov	r3, r0
    11bc:	4619      	mov	r1, r3
    11be:	6878      	ldr	r0, [r7, #4]
    11c0:	f000 f806 	bl	11d0 <qstr_from_strn>
    11c4:	4603      	mov	r3, r0
}
    11c6:	4618      	mov	r0, r3
    11c8:	3708      	adds	r7, #8
    11ca:	46bd      	mov	sp, r7
    11cc:	bd80      	pop	{r7, pc}
    11ce:	bf00      	nop

000011d0 <qstr_from_strn>:

qstr qstr_from_strn(const char *str, size_t len) {
    11d0:	b580      	push	{r7, lr}
    11d2:	b088      	sub	sp, #32
    11d4:	af00      	add	r7, sp, #0
    11d6:	6078      	str	r0, [r7, #4]
    11d8:	6039      	str	r1, [r7, #0]
    assert(len < (1 << (8 * MICROPY_QSTR_BYTES_IN_LEN)));
    11da:	683b      	ldr	r3, [r7, #0]
    11dc:	2bff      	cmp	r3, #255	; 0xff
    11de:	d905      	bls.n	11ec <qstr_from_strn+0x1c>
    11e0:	4b56      	ldr	r3, [pc, #344]	; (133c <qstr_from_strn+0x16c>)
    11e2:	4a57      	ldr	r2, [pc, #348]	; (1340 <qstr_from_strn+0x170>)
    11e4:	21ba      	movs	r1, #186	; 0xba
    11e6:	4857      	ldr	r0, [pc, #348]	; (1344 <qstr_from_strn+0x174>)
    11e8:	f01a facc 	bl	1b784 <__assert_func>
    QSTR_ENTER();
    qstr q = qstr_find_strn(str, len);
    11ec:	6839      	ldr	r1, [r7, #0]
    11ee:	6878      	ldr	r0, [r7, #4]
    11f0:	f7ff ff8a 	bl	1108 <qstr_find_strn>
    11f4:	61f8      	str	r0, [r7, #28]
    if (q == 0) {
    11f6:	69fb      	ldr	r3, [r7, #28]
    11f8:	2b00      	cmp	r3, #0
    11fa:	f040 8099 	bne.w	1330 <qstr_from_strn+0x160>
        // qstr does not exist in interned pool so need to add it

        // compute number of bytes needed to intern this string
        size_t n_bytes = MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN + len + 1;
    11fe:	683b      	ldr	r3, [r7, #0]
    1200:	3303      	adds	r3, #3
    1202:	617b      	str	r3, [r7, #20]

        if (MP_STATE_VM(qstr_last_chunk) != NULL && MP_STATE_VM(qstr_last_used) + n_bytes > MP_STATE_VM(qstr_last_alloc)) {
    1204:	4b50      	ldr	r3, [pc, #320]	; (1348 <qstr_from_strn+0x178>)
    1206:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    120a:	2b00      	cmp	r3, #0
    120c:	d030      	beq.n	1270 <qstr_from_strn+0xa0>
    120e:	4b4e      	ldr	r3, [pc, #312]	; (1348 <qstr_from_strn+0x178>)
    1210:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    1214:	697b      	ldr	r3, [r7, #20]
    1216:	441a      	add	r2, r3
    1218:	4b4b      	ldr	r3, [pc, #300]	; (1348 <qstr_from_strn+0x178>)
    121a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    121e:	429a      	cmp	r2, r3
    1220:	d926      	bls.n	1270 <qstr_from_strn+0xa0>
            // not enough room at end of previously interned string so try to grow
            byte *new_p = m_renew_maybe(byte, MP_STATE_VM(qstr_last_chunk), MP_STATE_VM(qstr_last_alloc), MP_STATE_VM(qstr_last_alloc) + n_bytes, false);
    1222:	4b49      	ldr	r3, [pc, #292]	; (1348 <qstr_from_strn+0x178>)
    1224:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
    1228:	4b47      	ldr	r3, [pc, #284]	; (1348 <qstr_from_strn+0x178>)
    122a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
    122e:	697b      	ldr	r3, [r7, #20]
    1230:	4413      	add	r3, r2
    1232:	2200      	movs	r2, #0
    1234:	4619      	mov	r1, r3
    1236:	f7ff f8d7 	bl	3e8 <m_realloc_maybe>
    123a:	6138      	str	r0, [r7, #16]
            if (new_p == NULL) {
    123c:	693b      	ldr	r3, [r7, #16]
    123e:	2b00      	cmp	r3, #0
    1240:	d10e      	bne.n	1260 <qstr_from_strn+0x90>
                // could not grow existing memory; shrink it to fit previous
                (void)m_renew_maybe(byte, MP_STATE_VM(qstr_last_chunk), MP_STATE_VM(qstr_last_alloc), MP_STATE_VM(qstr_last_used), false);
    1242:	4b41      	ldr	r3, [pc, #260]	; (1348 <qstr_from_strn+0x178>)
    1244:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
    1248:	4b3f      	ldr	r3, [pc, #252]	; (1348 <qstr_from_strn+0x178>)
    124a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    124e:	2200      	movs	r2, #0
    1250:	4619      	mov	r1, r3
    1252:	f7ff f8c9 	bl	3e8 <m_realloc_maybe>
                MP_STATE_VM(qstr_last_chunk) = NULL;
    1256:	4b3c      	ldr	r3, [pc, #240]	; (1348 <qstr_from_strn+0x178>)
    1258:	2200      	movs	r2, #0
    125a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    125e:	e007      	b.n	1270 <qstr_from_strn+0xa0>
            } else {
                // could grow existing memory
                MP_STATE_VM(qstr_last_alloc) += n_bytes;
    1260:	4b39      	ldr	r3, [pc, #228]	; (1348 <qstr_from_strn+0x178>)
    1262:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
    1266:	697b      	ldr	r3, [r7, #20]
    1268:	4413      	add	r3, r2
    126a:	4a37      	ldr	r2, [pc, #220]	; (1348 <qstr_from_strn+0x178>)
    126c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
            }
        }

        if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    1270:	4b35      	ldr	r3, [pc, #212]	; (1348 <qstr_from_strn+0x178>)
    1272:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    1276:	2b00      	cmp	r3, #0
    1278:	d12b      	bne.n	12d2 <qstr_from_strn+0x102>
            // no existing memory for the interned string so allocate a new chunk
            size_t al = n_bytes;
    127a:	697b      	ldr	r3, [r7, #20]
    127c:	61bb      	str	r3, [r7, #24]
            if (al < MICROPY_ALLOC_QSTR_CHUNK_INIT) {
    127e:	69bb      	ldr	r3, [r7, #24]
    1280:	2b7f      	cmp	r3, #127	; 0x7f
    1282:	d801      	bhi.n	1288 <qstr_from_strn+0xb8>
                al = MICROPY_ALLOC_QSTR_CHUNK_INIT;
    1284:	2380      	movs	r3, #128	; 0x80
    1286:	61bb      	str	r3, [r7, #24]
            }
            MP_STATE_VM(qstr_last_chunk) = m_new_maybe(byte, al);
    1288:	69b8      	ldr	r0, [r7, #24]
    128a:	f7ff f85f 	bl	34c <m_malloc_maybe>
    128e:	4602      	mov	r2, r0
    1290:	4b2d      	ldr	r3, [pc, #180]	; (1348 <qstr_from_strn+0x178>)
    1292:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    1296:	4b2c      	ldr	r3, [pc, #176]	; (1348 <qstr_from_strn+0x178>)
    1298:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    129c:	2b00      	cmp	r3, #0
    129e:	d110      	bne.n	12c2 <qstr_from_strn+0xf2>
                // failed to allocate a large chunk so try with exact size
                MP_STATE_VM(qstr_last_chunk) = m_new_maybe(byte, n_bytes);
    12a0:	6978      	ldr	r0, [r7, #20]
    12a2:	f7ff f853 	bl	34c <m_malloc_maybe>
    12a6:	4602      	mov	r2, r0
    12a8:	4b27      	ldr	r3, [pc, #156]	; (1348 <qstr_from_strn+0x178>)
    12aa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    12ae:	4b26      	ldr	r3, [pc, #152]	; (1348 <qstr_from_strn+0x178>)
    12b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    12b4:	2b00      	cmp	r3, #0
    12b6:	d102      	bne.n	12be <qstr_from_strn+0xee>
                    QSTR_EXIT();
                    m_malloc_fail(n_bytes);
    12b8:	6978      	ldr	r0, [r7, #20]
    12ba:	f00b fe3f 	bl	cf3c <m_malloc_fail>
                }
                al = n_bytes;
    12be:	697b      	ldr	r3, [r7, #20]
    12c0:	61bb      	str	r3, [r7, #24]
            }
            MP_STATE_VM(qstr_last_alloc) = al;
    12c2:	4a21      	ldr	r2, [pc, #132]	; (1348 <qstr_from_strn+0x178>)
    12c4:	69bb      	ldr	r3, [r7, #24]
    12c6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
            MP_STATE_VM(qstr_last_used) = 0;
    12ca:	4b1f      	ldr	r3, [pc, #124]	; (1348 <qstr_from_strn+0x178>)
    12cc:	2200      	movs	r2, #0
    12ce:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        }

        // allocate memory from the chunk for this new interned string's data
        byte *q_ptr = MP_STATE_VM(qstr_last_chunk) + MP_STATE_VM(qstr_last_used);
    12d2:	4b1d      	ldr	r3, [pc, #116]	; (1348 <qstr_from_strn+0x178>)
    12d4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    12d8:	4b1b      	ldr	r3, [pc, #108]	; (1348 <qstr_from_strn+0x178>)
    12da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    12de:	4413      	add	r3, r2
    12e0:	60fb      	str	r3, [r7, #12]
        MP_STATE_VM(qstr_last_used) += n_bytes;
    12e2:	4b19      	ldr	r3, [pc, #100]	; (1348 <qstr_from_strn+0x178>)
    12e4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    12e8:	697b      	ldr	r3, [r7, #20]
    12ea:	4413      	add	r3, r2
    12ec:	4a16      	ldr	r2, [pc, #88]	; (1348 <qstr_from_strn+0x178>)
    12ee:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

        // store the interned strings' data
        mp_uint_t hash = qstr_compute_hash((const byte*)str, len);
    12f2:	6839      	ldr	r1, [r7, #0]
    12f4:	6878      	ldr	r0, [r7, #4]
    12f6:	f7ff fe57 	bl	fa8 <qstr_compute_hash>
    12fa:	60b8      	str	r0, [r7, #8]
        Q_SET_HASH(q_ptr, hash);
    12fc:	68bb      	ldr	r3, [r7, #8]
    12fe:	b2da      	uxtb	r2, r3
    1300:	68fb      	ldr	r3, [r7, #12]
    1302:	701a      	strb	r2, [r3, #0]
        Q_SET_LENGTH(q_ptr, len);
    1304:	68fb      	ldr	r3, [r7, #12]
    1306:	3301      	adds	r3, #1
    1308:	683a      	ldr	r2, [r7, #0]
    130a:	b2d2      	uxtb	r2, r2
    130c:	701a      	strb	r2, [r3, #0]
        memcpy(q_ptr + MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN, str, len);
    130e:	68fb      	ldr	r3, [r7, #12]
    1310:	3302      	adds	r3, #2
    1312:	683a      	ldr	r2, [r7, #0]
    1314:	6879      	ldr	r1, [r7, #4]
    1316:	4618      	mov	r0, r3
    1318:	f01b fd3a 	bl	1cd90 <memcpy>
        q_ptr[MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN + len] = '\0';
    131c:	683b      	ldr	r3, [r7, #0]
    131e:	3302      	adds	r3, #2
    1320:	68fa      	ldr	r2, [r7, #12]
    1322:	4413      	add	r3, r2
    1324:	2200      	movs	r2, #0
    1326:	701a      	strb	r2, [r3, #0]
        q = qstr_add(q_ptr);
    1328:	68f8      	ldr	r0, [r7, #12]
    132a:	f7ff fe9b 	bl	1064 <qstr_add>
    132e:	61f8      	str	r0, [r7, #28]
    }
    QSTR_EXIT();
    return q;
    1330:	69fb      	ldr	r3, [r7, #28]
}
    1332:	4618      	mov	r0, r3
    1334:	3720      	adds	r7, #32
    1336:	46bd      	mov	sp, r7
    1338:	bd80      	pop	{r7, pc}
    133a:	bf00      	nop
    133c:	0001f80c 	.word	0x0001f80c
    1340:	0001f84c 	.word	0x0001f84c
    1344:	0001f83c 	.word	0x0001f83c
    1348:	200012f0 	.word	0x200012f0

0000134c <qstr_hash>:

mp_uint_t qstr_hash(qstr q) {
    134c:	b580      	push	{r7, lr}
    134e:	b082      	sub	sp, #8
    1350:	af00      	add	r7, sp, #0
    1352:	6078      	str	r0, [r7, #4]
    return Q_GET_HASH(find_qstr(q));
    1354:	6878      	ldr	r0, [r7, #4]
    1356:	f7ff fe65 	bl	1024 <find_qstr>
    135a:	4603      	mov	r3, r0
    135c:	781b      	ldrb	r3, [r3, #0]
}
    135e:	4618      	mov	r0, r3
    1360:	3708      	adds	r7, #8
    1362:	46bd      	mov	sp, r7
    1364:	bd80      	pop	{r7, pc}
    1366:	bf00      	nop

00001368 <qstr_len>:

size_t qstr_len(qstr q) {
    1368:	b580      	push	{r7, lr}
    136a:	b084      	sub	sp, #16
    136c:	af00      	add	r7, sp, #0
    136e:	6078      	str	r0, [r7, #4]
    const byte *qd = find_qstr(q);
    1370:	6878      	ldr	r0, [r7, #4]
    1372:	f7ff fe57 	bl	1024 <find_qstr>
    1376:	60f8      	str	r0, [r7, #12]
    return Q_GET_LENGTH(qd);
    1378:	68fb      	ldr	r3, [r7, #12]
    137a:	3301      	adds	r3, #1
    137c:	781b      	ldrb	r3, [r3, #0]
}
    137e:	4618      	mov	r0, r3
    1380:	3710      	adds	r7, #16
    1382:	46bd      	mov	sp, r7
    1384:	bd80      	pop	{r7, pc}
    1386:	bf00      	nop

00001388 <qstr_str>:

const char *qstr_str(qstr q) {
    1388:	b580      	push	{r7, lr}
    138a:	b084      	sub	sp, #16
    138c:	af00      	add	r7, sp, #0
    138e:	6078      	str	r0, [r7, #4]
    const byte *qd = find_qstr(q);
    1390:	6878      	ldr	r0, [r7, #4]
    1392:	f7ff fe47 	bl	1024 <find_qstr>
    1396:	60f8      	str	r0, [r7, #12]
    return (const char*)Q_GET_DATA(qd);
    1398:	68fb      	ldr	r3, [r7, #12]
    139a:	3302      	adds	r3, #2
}
    139c:	4618      	mov	r0, r3
    139e:	3710      	adds	r7, #16
    13a0:	46bd      	mov	sp, r7
    13a2:	bd80      	pop	{r7, pc}

000013a4 <qstr_data>:

const byte *qstr_data(qstr q, size_t *len) {
    13a4:	b580      	push	{r7, lr}
    13a6:	b084      	sub	sp, #16
    13a8:	af00      	add	r7, sp, #0
    13aa:	6078      	str	r0, [r7, #4]
    13ac:	6039      	str	r1, [r7, #0]
    const byte *qd = find_qstr(q);
    13ae:	6878      	ldr	r0, [r7, #4]
    13b0:	f7ff fe38 	bl	1024 <find_qstr>
    13b4:	60f8      	str	r0, [r7, #12]
    *len = Q_GET_LENGTH(qd);
    13b6:	68fb      	ldr	r3, [r7, #12]
    13b8:	3301      	adds	r3, #1
    13ba:	781b      	ldrb	r3, [r3, #0]
    13bc:	461a      	mov	r2, r3
    13be:	683b      	ldr	r3, [r7, #0]
    13c0:	601a      	str	r2, [r3, #0]
    return Q_GET_DATA(qd);
    13c2:	68fb      	ldr	r3, [r7, #12]
    13c4:	3302      	adds	r3, #2
}
    13c6:	4618      	mov	r0, r3
    13c8:	3710      	adds	r7, #16
    13ca:	46bd      	mov	sp, r7
    13cc:	bd80      	pop	{r7, pc}
    13ce:	bf00      	nop

000013d0 <qstr_pool_info>:

void qstr_pool_info(size_t *n_pool, size_t *n_qstr, size_t *n_str_data_bytes, size_t *n_total_bytes) {
    13d0:	b580      	push	{r7, lr}
    13d2:	b088      	sub	sp, #32
    13d4:	af00      	add	r7, sp, #0
    13d6:	60f8      	str	r0, [r7, #12]
    13d8:	60b9      	str	r1, [r7, #8]
    13da:	607a      	str	r2, [r7, #4]
    13dc:	603b      	str	r3, [r7, #0]
    QSTR_ENTER();
    *n_pool = 0;
    13de:	68fb      	ldr	r3, [r7, #12]
    13e0:	2200      	movs	r2, #0
    13e2:	601a      	str	r2, [r3, #0]
    *n_qstr = 0;
    13e4:	68bb      	ldr	r3, [r7, #8]
    13e6:	2200      	movs	r2, #0
    13e8:	601a      	str	r2, [r3, #0]
    *n_str_data_bytes = 0;
    13ea:	687b      	ldr	r3, [r7, #4]
    13ec:	2200      	movs	r2, #0
    13ee:	601a      	str	r2, [r3, #0]
    *n_total_bytes = 0;
    13f0:	683b      	ldr	r3, [r7, #0]
    13f2:	2200      	movs	r2, #0
    13f4:	601a      	str	r2, [r3, #0]
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL && pool != &CONST_POOL; pool = pool->prev) {
    13f6:	4b25      	ldr	r3, [pc, #148]	; (148c <qstr_pool_info+0xbc>)
    13f8:	691b      	ldr	r3, [r3, #16]
    13fa:	61fb      	str	r3, [r7, #28]
    13fc:	e034      	b.n	1468 <qstr_pool_info+0x98>
        *n_pool += 1;
    13fe:	68fb      	ldr	r3, [r7, #12]
    1400:	681b      	ldr	r3, [r3, #0]
    1402:	1c5a      	adds	r2, r3, #1
    1404:	68fb      	ldr	r3, [r7, #12]
    1406:	601a      	str	r2, [r3, #0]
        *n_qstr += pool->len;
    1408:	68bb      	ldr	r3, [r7, #8]
    140a:	681a      	ldr	r2, [r3, #0]
    140c:	69fb      	ldr	r3, [r7, #28]
    140e:	68db      	ldr	r3, [r3, #12]
    1410:	441a      	add	r2, r3
    1412:	68bb      	ldr	r3, [r7, #8]
    1414:	601a      	str	r2, [r3, #0]
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    1416:	69fb      	ldr	r3, [r7, #28]
    1418:	3310      	adds	r3, #16
    141a:	61bb      	str	r3, [r7, #24]
    141c:	69fb      	ldr	r3, [r7, #28]
    141e:	f103 0210 	add.w	r2, r3, #16
    1422:	69fb      	ldr	r3, [r7, #28]
    1424:	68db      	ldr	r3, [r3, #12]
    1426:	009b      	lsls	r3, r3, #2
    1428:	4413      	add	r3, r2
    142a:	617b      	str	r3, [r7, #20]
    142c:	e00c      	b.n	1448 <qstr_pool_info+0x78>
            *n_str_data_bytes += Q_GET_ALLOC(*q);
    142e:	687b      	ldr	r3, [r7, #4]
    1430:	681b      	ldr	r3, [r3, #0]
    1432:	69ba      	ldr	r2, [r7, #24]
    1434:	6812      	ldr	r2, [r2, #0]
    1436:	3201      	adds	r2, #1
    1438:	7812      	ldrb	r2, [r2, #0]
    143a:	4413      	add	r3, r2
    143c:	1cda      	adds	r2, r3, #3
    143e:	687b      	ldr	r3, [r7, #4]
    1440:	601a      	str	r2, [r3, #0]
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    1442:	69bb      	ldr	r3, [r7, #24]
    1444:	3304      	adds	r3, #4
    1446:	61bb      	str	r3, [r7, #24]
    1448:	69ba      	ldr	r2, [r7, #24]
    144a:	697b      	ldr	r3, [r7, #20]
    144c:	429a      	cmp	r2, r3
    144e:	d3ee      	bcc.n	142e <qstr_pool_info+0x5e>
        }
        #if MICROPY_ENABLE_GC
        *n_total_bytes += gc_nbytes(pool); // this counts actual bytes used in heap
    1450:	69f8      	ldr	r0, [r7, #28]
    1452:	f7ff fb8d 	bl	b70 <gc_nbytes>
    1456:	4602      	mov	r2, r0
    1458:	683b      	ldr	r3, [r7, #0]
    145a:	681b      	ldr	r3, [r3, #0]
    145c:	441a      	add	r2, r3
    145e:	683b      	ldr	r3, [r7, #0]
    1460:	601a      	str	r2, [r3, #0]
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL && pool != &CONST_POOL; pool = pool->prev) {
    1462:	69fb      	ldr	r3, [r7, #28]
    1464:	681b      	ldr	r3, [r3, #0]
    1466:	61fb      	str	r3, [r7, #28]
    1468:	69fb      	ldr	r3, [r7, #28]
    146a:	2b00      	cmp	r3, #0
    146c:	d003      	beq.n	1476 <qstr_pool_info+0xa6>
    146e:	69fb      	ldr	r3, [r7, #28]
    1470:	4a07      	ldr	r2, [pc, #28]	; (1490 <qstr_pool_info+0xc0>)
    1472:	4293      	cmp	r3, r2
    1474:	d1c3      	bne.n	13fe <qstr_pool_info+0x2e>
        #else
        *n_total_bytes += sizeof(qstr_pool_t) + sizeof(qstr) * pool->alloc;
        #endif
    }
    *n_total_bytes += *n_str_data_bytes;
    1476:	683b      	ldr	r3, [r7, #0]
    1478:	681a      	ldr	r2, [r3, #0]
    147a:	687b      	ldr	r3, [r7, #4]
    147c:	681b      	ldr	r3, [r3, #0]
    147e:	441a      	add	r2, r3
    1480:	683b      	ldr	r3, [r7, #0]
    1482:	601a      	str	r2, [r3, #0]
    QSTR_EXIT();
}
    1484:	bf00      	nop
    1486:	3720      	adds	r7, #32
    1488:	46bd      	mov	sp, r7
    148a:	bd80      	pop	{r7, pc}
    148c:	200012f0 	.word	0x200012f0
    1490:	00025d74 	.word	0x00025d74

00001494 <vstr_init>:

// returned value is always at least 1 greater than argument
#define ROUND_ALLOC(a) (((a) & ((~0U) - 7)) + 8)

// Init the vstr so it allocs exactly given number of bytes.  Set length to zero.
void vstr_init(vstr_t *vstr, size_t alloc) {
    1494:	b580      	push	{r7, lr}
    1496:	b082      	sub	sp, #8
    1498:	af00      	add	r7, sp, #0
    149a:	6078      	str	r0, [r7, #4]
    149c:	6039      	str	r1, [r7, #0]
    if (alloc < 1) {
    149e:	683b      	ldr	r3, [r7, #0]
    14a0:	2b00      	cmp	r3, #0
    14a2:	d101      	bne.n	14a8 <vstr_init+0x14>
        alloc = 1;
    14a4:	2301      	movs	r3, #1
    14a6:	603b      	str	r3, [r7, #0]
    }
    vstr->alloc = alloc;
    14a8:	687b      	ldr	r3, [r7, #4]
    14aa:	683a      	ldr	r2, [r7, #0]
    14ac:	601a      	str	r2, [r3, #0]
    vstr->len = 0;
    14ae:	687b      	ldr	r3, [r7, #4]
    14b0:	2200      	movs	r2, #0
    14b2:	605a      	str	r2, [r3, #4]
    vstr->buf = m_new(char, vstr->alloc);
    14b4:	687b      	ldr	r3, [r7, #4]
    14b6:	681b      	ldr	r3, [r3, #0]
    14b8:	4618      	mov	r0, r3
    14ba:	f7fe ff2f 	bl	31c <m_malloc>
    14be:	4602      	mov	r2, r0
    14c0:	687b      	ldr	r3, [r7, #4]
    14c2:	609a      	str	r2, [r3, #8]
    vstr->fixed_buf = false;
    14c4:	687a      	ldr	r2, [r7, #4]
    14c6:	7b13      	ldrb	r3, [r2, #12]
    14c8:	f36f 0300 	bfc	r3, #0, #1
    14cc:	7313      	strb	r3, [r2, #12]
}
    14ce:	bf00      	nop
    14d0:	3708      	adds	r7, #8
    14d2:	46bd      	mov	sp, r7
    14d4:	bd80      	pop	{r7, pc}
    14d6:	bf00      	nop

000014d8 <vstr_init_len>:

// Init the vstr so it allocs exactly enough ram to hold a null-terminated
// string of the given length, and set the length.
void vstr_init_len(vstr_t *vstr, size_t len) {
    14d8:	b580      	push	{r7, lr}
    14da:	b082      	sub	sp, #8
    14dc:	af00      	add	r7, sp, #0
    14de:	6078      	str	r0, [r7, #4]
    14e0:	6039      	str	r1, [r7, #0]
    vstr_init(vstr, len + 1);
    14e2:	683b      	ldr	r3, [r7, #0]
    14e4:	3301      	adds	r3, #1
    14e6:	4619      	mov	r1, r3
    14e8:	6878      	ldr	r0, [r7, #4]
    14ea:	f7ff ffd3 	bl	1494 <vstr_init>
    vstr->len = len;
    14ee:	687b      	ldr	r3, [r7, #4]
    14f0:	683a      	ldr	r2, [r7, #0]
    14f2:	605a      	str	r2, [r3, #4]
}
    14f4:	bf00      	nop
    14f6:	3708      	adds	r7, #8
    14f8:	46bd      	mov	sp, r7
    14fa:	bd80      	pop	{r7, pc}

000014fc <vstr_init_fixed_buf>:

void vstr_init_fixed_buf(vstr_t *vstr, size_t alloc, char *buf) {
    14fc:	b480      	push	{r7}
    14fe:	b085      	sub	sp, #20
    1500:	af00      	add	r7, sp, #0
    1502:	60f8      	str	r0, [r7, #12]
    1504:	60b9      	str	r1, [r7, #8]
    1506:	607a      	str	r2, [r7, #4]
    vstr->alloc = alloc;
    1508:	68fb      	ldr	r3, [r7, #12]
    150a:	68ba      	ldr	r2, [r7, #8]
    150c:	601a      	str	r2, [r3, #0]
    vstr->len = 0;
    150e:	68fb      	ldr	r3, [r7, #12]
    1510:	2200      	movs	r2, #0
    1512:	605a      	str	r2, [r3, #4]
    vstr->buf = buf;
    1514:	68fb      	ldr	r3, [r7, #12]
    1516:	687a      	ldr	r2, [r7, #4]
    1518:	609a      	str	r2, [r3, #8]
    vstr->fixed_buf = true;
    151a:	68fa      	ldr	r2, [r7, #12]
    151c:	7b13      	ldrb	r3, [r2, #12]
    151e:	f043 0301 	orr.w	r3, r3, #1
    1522:	7313      	strb	r3, [r2, #12]
}
    1524:	bf00      	nop
    1526:	3714      	adds	r7, #20
    1528:	46bd      	mov	sp, r7
    152a:	f85d 7b04 	ldr.w	r7, [sp], #4
    152e:	4770      	bx	lr

00001530 <vstr_init_print>:

void vstr_init_print(vstr_t *vstr, size_t alloc, mp_print_t *print) {
    1530:	b580      	push	{r7, lr}
    1532:	b084      	sub	sp, #16
    1534:	af00      	add	r7, sp, #0
    1536:	60f8      	str	r0, [r7, #12]
    1538:	60b9      	str	r1, [r7, #8]
    153a:	607a      	str	r2, [r7, #4]
    vstr_init(vstr, alloc);
    153c:	68b9      	ldr	r1, [r7, #8]
    153e:	68f8      	ldr	r0, [r7, #12]
    1540:	f7ff ffa8 	bl	1494 <vstr_init>
    print->data = vstr;
    1544:	687b      	ldr	r3, [r7, #4]
    1546:	68fa      	ldr	r2, [r7, #12]
    1548:	601a      	str	r2, [r3, #0]
    print->print_strn = (mp_print_strn_t)vstr_add_strn;
    154a:	687b      	ldr	r3, [r7, #4]
    154c:	4a02      	ldr	r2, [pc, #8]	; (1558 <vstr_init_print+0x28>)
    154e:	605a      	str	r2, [r3, #4]
}
    1550:	bf00      	nop
    1552:	3710      	adds	r7, #16
    1554:	46bd      	mov	sp, r7
    1556:	bd80      	pop	{r7, pc}
    1558:	000017a9 	.word	0x000017a9

0000155c <vstr_clear>:

void vstr_clear(vstr_t *vstr) {
    155c:	b580      	push	{r7, lr}
    155e:	b082      	sub	sp, #8
    1560:	af00      	add	r7, sp, #0
    1562:	6078      	str	r0, [r7, #4]
    if (!vstr->fixed_buf) {
    1564:	687b      	ldr	r3, [r7, #4]
    1566:	7b1b      	ldrb	r3, [r3, #12]
    1568:	f3c3 0300 	ubfx	r3, r3, #0, #1
    156c:	b2db      	uxtb	r3, r3
    156e:	f083 0301 	eor.w	r3, r3, #1
    1572:	b2db      	uxtb	r3, r3
    1574:	2b00      	cmp	r3, #0
    1576:	d004      	beq.n	1582 <vstr_clear+0x26>
        m_del(char, vstr->buf, vstr->alloc);
    1578:	687b      	ldr	r3, [r7, #4]
    157a:	689b      	ldr	r3, [r3, #8]
    157c:	4618      	mov	r0, r3
    157e:	f7fe ff47 	bl	410 <m_free>
    }
    vstr->buf = NULL;
    1582:	687b      	ldr	r3, [r7, #4]
    1584:	2200      	movs	r2, #0
    1586:	609a      	str	r2, [r3, #8]
}
    1588:	bf00      	nop
    158a:	3708      	adds	r7, #8
    158c:	46bd      	mov	sp, r7
    158e:	bd80      	pop	{r7, pc}

00001590 <vstr_new>:

vstr_t *vstr_new(size_t alloc) {
    1590:	b580      	push	{r7, lr}
    1592:	b084      	sub	sp, #16
    1594:	af00      	add	r7, sp, #0
    1596:	6078      	str	r0, [r7, #4]
    vstr_t *vstr = m_new_obj(vstr_t);
    1598:	2010      	movs	r0, #16
    159a:	f7fe febf 	bl	31c <m_malloc>
    159e:	60f8      	str	r0, [r7, #12]
    vstr_init(vstr, alloc);
    15a0:	6879      	ldr	r1, [r7, #4]
    15a2:	68f8      	ldr	r0, [r7, #12]
    15a4:	f7ff ff76 	bl	1494 <vstr_init>
    return vstr;
    15a8:	68fb      	ldr	r3, [r7, #12]
}
    15aa:	4618      	mov	r0, r3
    15ac:	3710      	adds	r7, #16
    15ae:	46bd      	mov	sp, r7
    15b0:	bd80      	pop	{r7, pc}
    15b2:	bf00      	nop

000015b4 <vstr_free>:

void vstr_free(vstr_t *vstr) {
    15b4:	b580      	push	{r7, lr}
    15b6:	b082      	sub	sp, #8
    15b8:	af00      	add	r7, sp, #0
    15ba:	6078      	str	r0, [r7, #4]
    if (vstr != NULL) {
    15bc:	687b      	ldr	r3, [r7, #4]
    15be:	2b00      	cmp	r3, #0
    15c0:	d011      	beq.n	15e6 <vstr_free+0x32>
        if (!vstr->fixed_buf) {
    15c2:	687b      	ldr	r3, [r7, #4]
    15c4:	7b1b      	ldrb	r3, [r3, #12]
    15c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
    15ca:	b2db      	uxtb	r3, r3
    15cc:	f083 0301 	eor.w	r3, r3, #1
    15d0:	b2db      	uxtb	r3, r3
    15d2:	2b00      	cmp	r3, #0
    15d4:	d004      	beq.n	15e0 <vstr_free+0x2c>
            m_del(char, vstr->buf, vstr->alloc);
    15d6:	687b      	ldr	r3, [r7, #4]
    15d8:	689b      	ldr	r3, [r3, #8]
    15da:	4618      	mov	r0, r3
    15dc:	f7fe ff18 	bl	410 <m_free>
        }
        m_del_obj(vstr_t, vstr);
    15e0:	6878      	ldr	r0, [r7, #4]
    15e2:	f7fe ff15 	bl	410 <m_free>
    }
}
    15e6:	bf00      	nop
    15e8:	3708      	adds	r7, #8
    15ea:	46bd      	mov	sp, r7
    15ec:	bd80      	pop	{r7, pc}
    15ee:	bf00      	nop

000015f0 <vstr_extend>:

// Extend vstr strictly by requested size, return pointer to newly added chunk.
char *vstr_extend(vstr_t *vstr, size_t size) {
    15f0:	b580      	push	{r7, lr}
    15f2:	b084      	sub	sp, #16
    15f4:	af00      	add	r7, sp, #0
    15f6:	6078      	str	r0, [r7, #4]
    15f8:	6039      	str	r1, [r7, #0]
    if (vstr->fixed_buf) {
    15fa:	687b      	ldr	r3, [r7, #4]
    15fc:	7b1b      	ldrb	r3, [r3, #12]
    15fe:	f3c3 0300 	ubfx	r3, r3, #0, #1
    1602:	b2db      	uxtb	r3, r3
    1604:	2b00      	cmp	r3, #0
    1606:	d003      	beq.n	1610 <vstr_extend+0x20>
        // We can't reallocate, and the caller is expecting the space to
        // be there, so the only safe option is to raise an exception.
        mp_raise_msg(&mp_type_RuntimeError, NULL);
    1608:	2100      	movs	r1, #0
    160a:	4810      	ldr	r0, [pc, #64]	; (164c <vstr_extend+0x5c>)
    160c:	f00b fcb2 	bl	cf74 <mp_raise_msg>
    }
    char *new_buf = m_renew(char, vstr->buf, vstr->alloc, vstr->alloc + size);
    1610:	687b      	ldr	r3, [r7, #4]
    1612:	6898      	ldr	r0, [r3, #8]
    1614:	687b      	ldr	r3, [r7, #4]
    1616:	681a      	ldr	r2, [r3, #0]
    1618:	683b      	ldr	r3, [r7, #0]
    161a:	4413      	add	r3, r2
    161c:	4619      	mov	r1, r3
    161e:	f7fe fec9 	bl	3b4 <m_realloc>
    1622:	60f8      	str	r0, [r7, #12]
    char *p = new_buf + vstr->alloc;
    1624:	687b      	ldr	r3, [r7, #4]
    1626:	681b      	ldr	r3, [r3, #0]
    1628:	68fa      	ldr	r2, [r7, #12]
    162a:	4413      	add	r3, r2
    162c:	60bb      	str	r3, [r7, #8]
    vstr->alloc += size;
    162e:	687b      	ldr	r3, [r7, #4]
    1630:	681a      	ldr	r2, [r3, #0]
    1632:	683b      	ldr	r3, [r7, #0]
    1634:	441a      	add	r2, r3
    1636:	687b      	ldr	r3, [r7, #4]
    1638:	601a      	str	r2, [r3, #0]
    vstr->buf = new_buf;
    163a:	687b      	ldr	r3, [r7, #4]
    163c:	68fa      	ldr	r2, [r7, #12]
    163e:	609a      	str	r2, [r3, #8]
    return p;
    1640:	68bb      	ldr	r3, [r7, #8]
}
    1642:	4618      	mov	r0, r3
    1644:	3710      	adds	r7, #16
    1646:	46bd      	mov	sp, r7
    1648:	bd80      	pop	{r7, pc}
    164a:	bf00      	nop
    164c:	0002267c 	.word	0x0002267c

00001650 <vstr_ensure_extra>:

STATIC void vstr_ensure_extra(vstr_t *vstr, size_t size) {
    1650:	b580      	push	{r7, lr}
    1652:	b084      	sub	sp, #16
    1654:	af00      	add	r7, sp, #0
    1656:	6078      	str	r0, [r7, #4]
    1658:	6039      	str	r1, [r7, #0]
    if (vstr->len + size > vstr->alloc) {
    165a:	687b      	ldr	r3, [r7, #4]
    165c:	685a      	ldr	r2, [r3, #4]
    165e:	683b      	ldr	r3, [r7, #0]
    1660:	441a      	add	r2, r3
    1662:	687b      	ldr	r3, [r7, #4]
    1664:	681b      	ldr	r3, [r3, #0]
    1666:	429a      	cmp	r2, r3
    1668:	d920      	bls.n	16ac <vstr_ensure_extra+0x5c>
        if (vstr->fixed_buf) {
    166a:	687b      	ldr	r3, [r7, #4]
    166c:	7b1b      	ldrb	r3, [r3, #12]
    166e:	f3c3 0300 	ubfx	r3, r3, #0, #1
    1672:	b2db      	uxtb	r3, r3
    1674:	2b00      	cmp	r3, #0
    1676:	d003      	beq.n	1680 <vstr_ensure_extra+0x30>
            // We can't reallocate, and the caller is expecting the space to
            // be there, so the only safe option is to raise an exception.
            mp_raise_msg(&mp_type_RuntimeError, NULL);
    1678:	2100      	movs	r1, #0
    167a:	480e      	ldr	r0, [pc, #56]	; (16b4 <vstr_ensure_extra+0x64>)
    167c:	f00b fc7a 	bl	cf74 <mp_raise_msg>
        }
        size_t new_alloc = ROUND_ALLOC((vstr->len + size) + 16);
    1680:	687b      	ldr	r3, [r7, #4]
    1682:	685a      	ldr	r2, [r3, #4]
    1684:	683b      	ldr	r3, [r7, #0]
    1686:	4413      	add	r3, r2
    1688:	3310      	adds	r3, #16
    168a:	f023 0307 	bic.w	r3, r3, #7
    168e:	3308      	adds	r3, #8
    1690:	60fb      	str	r3, [r7, #12]
        char *new_buf = m_renew(char, vstr->buf, vstr->alloc, new_alloc);
    1692:	687b      	ldr	r3, [r7, #4]
    1694:	689b      	ldr	r3, [r3, #8]
    1696:	68f9      	ldr	r1, [r7, #12]
    1698:	4618      	mov	r0, r3
    169a:	f7fe fe8b 	bl	3b4 <m_realloc>
    169e:	60b8      	str	r0, [r7, #8]
        vstr->alloc = new_alloc;
    16a0:	687b      	ldr	r3, [r7, #4]
    16a2:	68fa      	ldr	r2, [r7, #12]
    16a4:	601a      	str	r2, [r3, #0]
        vstr->buf = new_buf;
    16a6:	687b      	ldr	r3, [r7, #4]
    16a8:	68ba      	ldr	r2, [r7, #8]
    16aa:	609a      	str	r2, [r3, #8]
    }
}
    16ac:	bf00      	nop
    16ae:	3710      	adds	r7, #16
    16b0:	46bd      	mov	sp, r7
    16b2:	bd80      	pop	{r7, pc}
    16b4:	0002267c 	.word	0x0002267c

000016b8 <vstr_hint_size>:

void vstr_hint_size(vstr_t *vstr, size_t size) {
    16b8:	b580      	push	{r7, lr}
    16ba:	b082      	sub	sp, #8
    16bc:	af00      	add	r7, sp, #0
    16be:	6078      	str	r0, [r7, #4]
    16c0:	6039      	str	r1, [r7, #0]
    vstr_ensure_extra(vstr, size);
    16c2:	6839      	ldr	r1, [r7, #0]
    16c4:	6878      	ldr	r0, [r7, #4]
    16c6:	f7ff ffc3 	bl	1650 <vstr_ensure_extra>
}
    16ca:	bf00      	nop
    16cc:	3708      	adds	r7, #8
    16ce:	46bd      	mov	sp, r7
    16d0:	bd80      	pop	{r7, pc}
    16d2:	bf00      	nop

000016d4 <vstr_add_len>:

char *vstr_add_len(vstr_t *vstr, size_t len) {
    16d4:	b580      	push	{r7, lr}
    16d6:	b084      	sub	sp, #16
    16d8:	af00      	add	r7, sp, #0
    16da:	6078      	str	r0, [r7, #4]
    16dc:	6039      	str	r1, [r7, #0]
    vstr_ensure_extra(vstr, len);
    16de:	6839      	ldr	r1, [r7, #0]
    16e0:	6878      	ldr	r0, [r7, #4]
    16e2:	f7ff ffb5 	bl	1650 <vstr_ensure_extra>
    char *buf = vstr->buf + vstr->len;
    16e6:	687b      	ldr	r3, [r7, #4]
    16e8:	689a      	ldr	r2, [r3, #8]
    16ea:	687b      	ldr	r3, [r7, #4]
    16ec:	685b      	ldr	r3, [r3, #4]
    16ee:	4413      	add	r3, r2
    16f0:	60fb      	str	r3, [r7, #12]
    vstr->len += len;
    16f2:	687b      	ldr	r3, [r7, #4]
    16f4:	685a      	ldr	r2, [r3, #4]
    16f6:	683b      	ldr	r3, [r7, #0]
    16f8:	441a      	add	r2, r3
    16fa:	687b      	ldr	r3, [r7, #4]
    16fc:	605a      	str	r2, [r3, #4]
    return buf;
    16fe:	68fb      	ldr	r3, [r7, #12]
}
    1700:	4618      	mov	r0, r3
    1702:	3710      	adds	r7, #16
    1704:	46bd      	mov	sp, r7
    1706:	bd80      	pop	{r7, pc}

00001708 <vstr_null_terminated_str>:

// Doesn't increase len, just makes sure there is a null byte at the end
char *vstr_null_terminated_str(vstr_t *vstr) {
    1708:	b580      	push	{r7, lr}
    170a:	b082      	sub	sp, #8
    170c:	af00      	add	r7, sp, #0
    170e:	6078      	str	r0, [r7, #4]
    // If there's no more room, add single byte
    if (vstr->alloc == vstr->len) {
    1710:	687b      	ldr	r3, [r7, #4]
    1712:	681a      	ldr	r2, [r3, #0]
    1714:	687b      	ldr	r3, [r7, #4]
    1716:	685b      	ldr	r3, [r3, #4]
    1718:	429a      	cmp	r2, r3
    171a:	d103      	bne.n	1724 <vstr_null_terminated_str+0x1c>
        vstr_extend(vstr, 1);
    171c:	2101      	movs	r1, #1
    171e:	6878      	ldr	r0, [r7, #4]
    1720:	f7ff ff66 	bl	15f0 <vstr_extend>
    }
    vstr->buf[vstr->len] = '\0';
    1724:	687b      	ldr	r3, [r7, #4]
    1726:	689a      	ldr	r2, [r3, #8]
    1728:	687b      	ldr	r3, [r7, #4]
    172a:	685b      	ldr	r3, [r3, #4]
    172c:	4413      	add	r3, r2
    172e:	2200      	movs	r2, #0
    1730:	701a      	strb	r2, [r3, #0]
    return vstr->buf;
    1732:	687b      	ldr	r3, [r7, #4]
    1734:	689b      	ldr	r3, [r3, #8]
}
    1736:	4618      	mov	r0, r3
    1738:	3708      	adds	r7, #8
    173a:	46bd      	mov	sp, r7
    173c:	bd80      	pop	{r7, pc}
    173e:	bf00      	nop

00001740 <vstr_add_byte>:

void vstr_add_byte(vstr_t *vstr, byte b) {
    1740:	b580      	push	{r7, lr}
    1742:	b084      	sub	sp, #16
    1744:	af00      	add	r7, sp, #0
    1746:	6078      	str	r0, [r7, #4]
    1748:	460b      	mov	r3, r1
    174a:	70fb      	strb	r3, [r7, #3]
    byte *buf = (byte*)vstr_add_len(vstr, 1);
    174c:	2101      	movs	r1, #1
    174e:	6878      	ldr	r0, [r7, #4]
    1750:	f7ff ffc0 	bl	16d4 <vstr_add_len>
    1754:	60f8      	str	r0, [r7, #12]
    buf[0] = b;
    1756:	68fb      	ldr	r3, [r7, #12]
    1758:	78fa      	ldrb	r2, [r7, #3]
    175a:	701a      	strb	r2, [r3, #0]
}
    175c:	bf00      	nop
    175e:	3710      	adds	r7, #16
    1760:	46bd      	mov	sp, r7
    1762:	bd80      	pop	{r7, pc}

00001764 <vstr_add_char>:

void vstr_add_char(vstr_t *vstr, unichar c) {
    1764:	b580      	push	{r7, lr}
    1766:	b082      	sub	sp, #8
    1768:	af00      	add	r7, sp, #0
    176a:	6078      	str	r0, [r7, #4]
    176c:	6039      	str	r1, [r7, #0]
        buf[1] = ((c >> 12) & 0x3F) | 0x80;
        buf[2] = ((c >> 6) & 0x3F) | 0x80;
        buf[3] = (c & 0x3F) | 0x80;
    }
#else
    vstr_add_byte(vstr, c);
    176e:	683b      	ldr	r3, [r7, #0]
    1770:	b2db      	uxtb	r3, r3
    1772:	4619      	mov	r1, r3
    1774:	6878      	ldr	r0, [r7, #4]
    1776:	f7ff ffe3 	bl	1740 <vstr_add_byte>
#endif
}
    177a:	bf00      	nop
    177c:	3708      	adds	r7, #8
    177e:	46bd      	mov	sp, r7
    1780:	bd80      	pop	{r7, pc}
    1782:	bf00      	nop

00001784 <vstr_add_str>:

void vstr_add_str(vstr_t *vstr, const char *str) {
    1784:	b580      	push	{r7, lr}
    1786:	b082      	sub	sp, #8
    1788:	af00      	add	r7, sp, #0
    178a:	6078      	str	r0, [r7, #4]
    178c:	6039      	str	r1, [r7, #0]
    vstr_add_strn(vstr, str, strlen(str));
    178e:	6838      	ldr	r0, [r7, #0]
    1790:	f01b fc38 	bl	1d004 <strlen>
    1794:	4603      	mov	r3, r0
    1796:	461a      	mov	r2, r3
    1798:	6839      	ldr	r1, [r7, #0]
    179a:	6878      	ldr	r0, [r7, #4]
    179c:	f000 f804 	bl	17a8 <vstr_add_strn>
}
    17a0:	bf00      	nop
    17a2:	3708      	adds	r7, #8
    17a4:	46bd      	mov	sp, r7
    17a6:	bd80      	pop	{r7, pc}

000017a8 <vstr_add_strn>:

void vstr_add_strn(vstr_t *vstr, const char *str, size_t len) {
    17a8:	b580      	push	{r7, lr}
    17aa:	b084      	sub	sp, #16
    17ac:	af00      	add	r7, sp, #0
    17ae:	60f8      	str	r0, [r7, #12]
    17b0:	60b9      	str	r1, [r7, #8]
    17b2:	607a      	str	r2, [r7, #4]
    vstr_ensure_extra(vstr, len);
    17b4:	6879      	ldr	r1, [r7, #4]
    17b6:	68f8      	ldr	r0, [r7, #12]
    17b8:	f7ff ff4a 	bl	1650 <vstr_ensure_extra>
    memmove(vstr->buf + vstr->len, str, len);
    17bc:	68fb      	ldr	r3, [r7, #12]
    17be:	689a      	ldr	r2, [r3, #8]
    17c0:	68fb      	ldr	r3, [r7, #12]
    17c2:	685b      	ldr	r3, [r3, #4]
    17c4:	4413      	add	r3, r2
    17c6:	687a      	ldr	r2, [r7, #4]
    17c8:	68b9      	ldr	r1, [r7, #8]
    17ca:	4618      	mov	r0, r3
    17cc:	f01b fb46 	bl	1ce5c <memmove>
    vstr->len += len;
    17d0:	68fb      	ldr	r3, [r7, #12]
    17d2:	685a      	ldr	r2, [r3, #4]
    17d4:	687b      	ldr	r3, [r7, #4]
    17d6:	441a      	add	r2, r3
    17d8:	68fb      	ldr	r3, [r7, #12]
    17da:	605a      	str	r2, [r3, #4]
}
    17dc:	bf00      	nop
    17de:	3710      	adds	r7, #16
    17e0:	46bd      	mov	sp, r7
    17e2:	bd80      	pop	{r7, pc}

000017e4 <vstr_ins_blank_bytes>:

STATIC char *vstr_ins_blank_bytes(vstr_t *vstr, size_t byte_pos, size_t byte_len) {
    17e4:	b580      	push	{r7, lr}
    17e6:	b086      	sub	sp, #24
    17e8:	af00      	add	r7, sp, #0
    17ea:	60f8      	str	r0, [r7, #12]
    17ec:	60b9      	str	r1, [r7, #8]
    17ee:	607a      	str	r2, [r7, #4]
    size_t l = vstr->len;
    17f0:	68fb      	ldr	r3, [r7, #12]
    17f2:	685b      	ldr	r3, [r3, #4]
    17f4:	617b      	str	r3, [r7, #20]
    if (byte_pos > l) {
    17f6:	68ba      	ldr	r2, [r7, #8]
    17f8:	697b      	ldr	r3, [r7, #20]
    17fa:	429a      	cmp	r2, r3
    17fc:	d901      	bls.n	1802 <vstr_ins_blank_bytes+0x1e>
        byte_pos = l;
    17fe:	697b      	ldr	r3, [r7, #20]
    1800:	60bb      	str	r3, [r7, #8]
    }
    if (byte_len > 0) {
    1802:	687b      	ldr	r3, [r7, #4]
    1804:	2b00      	cmp	r3, #0
    1806:	d019      	beq.n	183c <vstr_ins_blank_bytes+0x58>
        // ensure room for the new bytes
        vstr_ensure_extra(vstr, byte_len);
    1808:	6879      	ldr	r1, [r7, #4]
    180a:	68f8      	ldr	r0, [r7, #12]
    180c:	f7ff ff20 	bl	1650 <vstr_ensure_extra>
        // copy up the string to make room for the new bytes
        memmove(vstr->buf + byte_pos + byte_len, vstr->buf + byte_pos, l - byte_pos);
    1810:	68fb      	ldr	r3, [r7, #12]
    1812:	689a      	ldr	r2, [r3, #8]
    1814:	68b9      	ldr	r1, [r7, #8]
    1816:	687b      	ldr	r3, [r7, #4]
    1818:	440b      	add	r3, r1
    181a:	18d0      	adds	r0, r2, r3
    181c:	68fb      	ldr	r3, [r7, #12]
    181e:	689a      	ldr	r2, [r3, #8]
    1820:	68bb      	ldr	r3, [r7, #8]
    1822:	18d1      	adds	r1, r2, r3
    1824:	697a      	ldr	r2, [r7, #20]
    1826:	68bb      	ldr	r3, [r7, #8]
    1828:	1ad3      	subs	r3, r2, r3
    182a:	461a      	mov	r2, r3
    182c:	f01b fb16 	bl	1ce5c <memmove>
        // increase the length
        vstr->len += byte_len;
    1830:	68fb      	ldr	r3, [r7, #12]
    1832:	685a      	ldr	r2, [r3, #4]
    1834:	687b      	ldr	r3, [r7, #4]
    1836:	441a      	add	r2, r3
    1838:	68fb      	ldr	r3, [r7, #12]
    183a:	605a      	str	r2, [r3, #4]
    }
    return vstr->buf + byte_pos;
    183c:	68fb      	ldr	r3, [r7, #12]
    183e:	689a      	ldr	r2, [r3, #8]
    1840:	68bb      	ldr	r3, [r7, #8]
    1842:	4413      	add	r3, r2
}
    1844:	4618      	mov	r0, r3
    1846:	3718      	adds	r7, #24
    1848:	46bd      	mov	sp, r7
    184a:	bd80      	pop	{r7, pc}

0000184c <vstr_ins_byte>:

void vstr_ins_byte(vstr_t *vstr, size_t byte_pos, byte b) {
    184c:	b580      	push	{r7, lr}
    184e:	b086      	sub	sp, #24
    1850:	af00      	add	r7, sp, #0
    1852:	60f8      	str	r0, [r7, #12]
    1854:	60b9      	str	r1, [r7, #8]
    1856:	4613      	mov	r3, r2
    1858:	71fb      	strb	r3, [r7, #7]
    char *s = vstr_ins_blank_bytes(vstr, byte_pos, 1);
    185a:	2201      	movs	r2, #1
    185c:	68b9      	ldr	r1, [r7, #8]
    185e:	68f8      	ldr	r0, [r7, #12]
    1860:	f7ff ffc0 	bl	17e4 <vstr_ins_blank_bytes>
    1864:	6178      	str	r0, [r7, #20]
    *s = b;
    1866:	697b      	ldr	r3, [r7, #20]
    1868:	79fa      	ldrb	r2, [r7, #7]
    186a:	701a      	strb	r2, [r3, #0]
}
    186c:	bf00      	nop
    186e:	3718      	adds	r7, #24
    1870:	46bd      	mov	sp, r7
    1872:	bd80      	pop	{r7, pc}

00001874 <vstr_ins_char>:

void vstr_ins_char(vstr_t *vstr, size_t char_pos, unichar chr) {
    1874:	b580      	push	{r7, lr}
    1876:	b086      	sub	sp, #24
    1878:	af00      	add	r7, sp, #0
    187a:	60f8      	str	r0, [r7, #12]
    187c:	60b9      	str	r1, [r7, #8]
    187e:	607a      	str	r2, [r7, #4]
    // TODO UNICODE
    char *s = vstr_ins_blank_bytes(vstr, char_pos, 1);
    1880:	2201      	movs	r2, #1
    1882:	68b9      	ldr	r1, [r7, #8]
    1884:	68f8      	ldr	r0, [r7, #12]
    1886:	f7ff ffad 	bl	17e4 <vstr_ins_blank_bytes>
    188a:	6178      	str	r0, [r7, #20]
    *s = chr;
    188c:	687b      	ldr	r3, [r7, #4]
    188e:	b2da      	uxtb	r2, r3
    1890:	697b      	ldr	r3, [r7, #20]
    1892:	701a      	strb	r2, [r3, #0]
}
    1894:	bf00      	nop
    1896:	3718      	adds	r7, #24
    1898:	46bd      	mov	sp, r7
    189a:	bd80      	pop	{r7, pc}

0000189c <vstr_cut_head_bytes>:

void vstr_cut_head_bytes(vstr_t *vstr, size_t bytes_to_cut) {
    189c:	b580      	push	{r7, lr}
    189e:	b082      	sub	sp, #8
    18a0:	af00      	add	r7, sp, #0
    18a2:	6078      	str	r0, [r7, #4]
    18a4:	6039      	str	r1, [r7, #0]
    vstr_cut_out_bytes(vstr, 0, bytes_to_cut);
    18a6:	683a      	ldr	r2, [r7, #0]
    18a8:	2100      	movs	r1, #0
    18aa:	6878      	ldr	r0, [r7, #4]
    18ac:	f000 f81e 	bl	18ec <vstr_cut_out_bytes>
}
    18b0:	bf00      	nop
    18b2:	3708      	adds	r7, #8
    18b4:	46bd      	mov	sp, r7
    18b6:	bd80      	pop	{r7, pc}

000018b8 <vstr_cut_tail_bytes>:

void vstr_cut_tail_bytes(vstr_t *vstr, size_t len) {
    18b8:	b480      	push	{r7}
    18ba:	b083      	sub	sp, #12
    18bc:	af00      	add	r7, sp, #0
    18be:	6078      	str	r0, [r7, #4]
    18c0:	6039      	str	r1, [r7, #0]
    if (len > vstr->len) {
    18c2:	687b      	ldr	r3, [r7, #4]
    18c4:	685a      	ldr	r2, [r3, #4]
    18c6:	683b      	ldr	r3, [r7, #0]
    18c8:	429a      	cmp	r2, r3
    18ca:	d203      	bcs.n	18d4 <vstr_cut_tail_bytes+0x1c>
        vstr->len = 0;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	605a      	str	r2, [r3, #4]
    } else {
        vstr->len -= len;
    }
}
    18d2:	e005      	b.n	18e0 <vstr_cut_tail_bytes+0x28>
        vstr->len -= len;
    18d4:	687b      	ldr	r3, [r7, #4]
    18d6:	685a      	ldr	r2, [r3, #4]
    18d8:	683b      	ldr	r3, [r7, #0]
    18da:	1ad2      	subs	r2, r2, r3
    18dc:	687b      	ldr	r3, [r7, #4]
    18de:	605a      	str	r2, [r3, #4]
}
    18e0:	bf00      	nop
    18e2:	370c      	adds	r7, #12
    18e4:	46bd      	mov	sp, r7
    18e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    18ea:	4770      	bx	lr

000018ec <vstr_cut_out_bytes>:

void vstr_cut_out_bytes(vstr_t *vstr, size_t byte_pos, size_t bytes_to_cut) {
    18ec:	b580      	push	{r7, lr}
    18ee:	b084      	sub	sp, #16
    18f0:	af00      	add	r7, sp, #0
    18f2:	60f8      	str	r0, [r7, #12]
    18f4:	60b9      	str	r1, [r7, #8]
    18f6:	607a      	str	r2, [r7, #4]
    if (byte_pos >= vstr->len) {
    18f8:	68fb      	ldr	r3, [r7, #12]
    18fa:	685a      	ldr	r2, [r3, #4]
    18fc:	68bb      	ldr	r3, [r7, #8]
    18fe:	429a      	cmp	r2, r3
    1900:	d924      	bls.n	194c <vstr_cut_out_bytes+0x60>
        return;
    } else if (byte_pos + bytes_to_cut >= vstr->len) {
    1902:	68ba      	ldr	r2, [r7, #8]
    1904:	687b      	ldr	r3, [r7, #4]
    1906:	441a      	add	r2, r3
    1908:	68fb      	ldr	r3, [r7, #12]
    190a:	685b      	ldr	r3, [r3, #4]
    190c:	429a      	cmp	r2, r3
    190e:	d303      	bcc.n	1918 <vstr_cut_out_bytes+0x2c>
        vstr->len = byte_pos;
    1910:	68fb      	ldr	r3, [r7, #12]
    1912:	68ba      	ldr	r2, [r7, #8]
    1914:	605a      	str	r2, [r3, #4]
    1916:	e01a      	b.n	194e <vstr_cut_out_bytes+0x62>
    } else {
        memmove(vstr->buf + byte_pos, vstr->buf + byte_pos + bytes_to_cut, vstr->len - byte_pos - bytes_to_cut);
    1918:	68fb      	ldr	r3, [r7, #12]
    191a:	689a      	ldr	r2, [r3, #8]
    191c:	68bb      	ldr	r3, [r7, #8]
    191e:	18d0      	adds	r0, r2, r3
    1920:	68fb      	ldr	r3, [r7, #12]
    1922:	689a      	ldr	r2, [r3, #8]
    1924:	68b9      	ldr	r1, [r7, #8]
    1926:	687b      	ldr	r3, [r7, #4]
    1928:	440b      	add	r3, r1
    192a:	18d1      	adds	r1, r2, r3
    192c:	68fb      	ldr	r3, [r7, #12]
    192e:	685a      	ldr	r2, [r3, #4]
    1930:	68bb      	ldr	r3, [r7, #8]
    1932:	1ad2      	subs	r2, r2, r3
    1934:	687b      	ldr	r3, [r7, #4]
    1936:	1ad3      	subs	r3, r2, r3
    1938:	461a      	mov	r2, r3
    193a:	f01b fa8f 	bl	1ce5c <memmove>
        vstr->len -= bytes_to_cut;
    193e:	68fb      	ldr	r3, [r7, #12]
    1940:	685a      	ldr	r2, [r3, #4]
    1942:	687b      	ldr	r3, [r7, #4]
    1944:	1ad2      	subs	r2, r2, r3
    1946:	68fb      	ldr	r3, [r7, #12]
    1948:	605a      	str	r2, [r3, #4]
    194a:	e000      	b.n	194e <vstr_cut_out_bytes+0x62>
        return;
    194c:	bf00      	nop
    }
}
    194e:	3710      	adds	r7, #16
    1950:	46bd      	mov	sp, r7
    1952:	bd80      	pop	{r7, pc}

00001954 <vstr_printf>:

void vstr_printf(vstr_t *vstr, const char *fmt, ...) {
    1954:	b40e      	push	{r1, r2, r3}
    1956:	b580      	push	{r7, lr}
    1958:	b085      	sub	sp, #20
    195a:	af00      	add	r7, sp, #0
    195c:	6078      	str	r0, [r7, #4]
    va_list ap;
    va_start(ap, fmt);
    195e:	f107 0320 	add.w	r3, r7, #32
    1962:	60fb      	str	r3, [r7, #12]
    vstr_vprintf(vstr, fmt, ap);
    1964:	68fa      	ldr	r2, [r7, #12]
    1966:	69f9      	ldr	r1, [r7, #28]
    1968:	6878      	ldr	r0, [r7, #4]
    196a:	f000 f807 	bl	197c <vstr_vprintf>
    va_end(ap);
}
    196e:	bf00      	nop
    1970:	3714      	adds	r7, #20
    1972:	46bd      	mov	sp, r7
    1974:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    1978:	b003      	add	sp, #12
    197a:	4770      	bx	lr

0000197c <vstr_vprintf>:

void vstr_vprintf(vstr_t *vstr, const char *fmt, va_list ap) {
    197c:	b580      	push	{r7, lr}
    197e:	b086      	sub	sp, #24
    1980:	af00      	add	r7, sp, #0
    1982:	60f8      	str	r0, [r7, #12]
    1984:	60b9      	str	r1, [r7, #8]
    1986:	607a      	str	r2, [r7, #4]
    mp_print_t print = {vstr, (mp_print_strn_t)vstr_add_strn};
    1988:	68fb      	ldr	r3, [r7, #12]
    198a:	613b      	str	r3, [r7, #16]
    198c:	4b06      	ldr	r3, [pc, #24]	; (19a8 <vstr_vprintf+0x2c>)
    198e:	617b      	str	r3, [r7, #20]
    mp_vprintf(&print, fmt, ap);
    1990:	f107 0310 	add.w	r3, r7, #16
    1994:	687a      	ldr	r2, [r7, #4]
    1996:	68b9      	ldr	r1, [r7, #8]
    1998:	4618      	mov	r0, r3
    199a:	f000 fb63 	bl	2064 <mp_vprintf>
}
    199e:	bf00      	nop
    19a0:	3718      	adds	r7, #24
    19a2:	46bd      	mov	sp, r7
    19a4:	bd80      	pop	{r7, pc}
    19a6:	bf00      	nop
    19a8:	000017a9 	.word	0x000017a9

000019ac <MP_OBJ_IS_SMALL_INT>:
// unpack small ints, qstrs and full object pointers.

#if MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_A

static inline bool MP_OBJ_IS_SMALL_INT(mp_const_obj_t o)
    { return ((((mp_int_t)(o)) & 1) != 0); }
    19ac:	b480      	push	{r7}
    19ae:	b083      	sub	sp, #12
    19b0:	af00      	add	r7, sp, #0
    19b2:	6078      	str	r0, [r7, #4]
    19b4:	687b      	ldr	r3, [r7, #4]
    19b6:	f003 0301 	and.w	r3, r3, #1
    19ba:	2b00      	cmp	r3, #0
    19bc:	bf14      	ite	ne
    19be:	2301      	movne	r3, #1
    19c0:	2300      	moveq	r3, #0
    19c2:	b2db      	uxtb	r3, r3
    19c4:	4618      	mov	r0, r3
    19c6:	370c      	adds	r7, #12
    19c8:	46bd      	mov	sp, r7
    19ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    19ce:	4770      	bx	lr

000019d0 <MP_OBJ_IS_OBJ>:
mp_float_t mp_obj_float_get(mp_obj_t self_in);
mp_obj_t mp_obj_new_float(mp_float_t value);
#endif

static inline bool MP_OBJ_IS_OBJ(mp_const_obj_t o)
    { return ((((mp_int_t)(o)) & 3) == 0); }
    19d0:	b480      	push	{r7}
    19d2:	b083      	sub	sp, #12
    19d4:	af00      	add	r7, sp, #0
    19d6:	6078      	str	r0, [r7, #4]
    19d8:	687b      	ldr	r3, [r7, #4]
    19da:	f003 0303 	and.w	r3, r3, #3
    19de:	2b00      	cmp	r3, #0
    19e0:	bf0c      	ite	eq
    19e2:	2301      	moveq	r3, #1
    19e4:	2300      	movne	r3, #0
    19e6:	b2db      	uxtb	r3, r3
    19e8:	4618      	mov	r0, r3
    19ea:	370c      	adds	r7, #12
    19ec:	46bd      	mov	sp, r7
    19ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    19f2:	4770      	bx	lr

000019f4 <plat_print_strn>:
#endif

static const char pad_spaces[] = "                ";
static const char pad_zeroes[] = "0000000000000000";

STATIC void plat_print_strn(void *env, const char *str, size_t len) {
    19f4:	b580      	push	{r7, lr}
    19f6:	b084      	sub	sp, #16
    19f8:	af00      	add	r7, sp, #0
    19fa:	60f8      	str	r0, [r7, #12]
    19fc:	60b9      	str	r1, [r7, #8]
    19fe:	607a      	str	r2, [r7, #4]
    (void)env;
    MP_PLAT_PRINT_STRN(str, len);
    1a00:	6879      	ldr	r1, [r7, #4]
    1a02:	68b8      	ldr	r0, [r7, #8]
    1a04:	f01a ff46 	bl	1c894 <mp_hal_stdout_tx_strn_cooked>
}
    1a08:	bf00      	nop
    1a0a:	3710      	adds	r7, #16
    1a0c:	46bd      	mov	sp, r7
    1a0e:	bd80      	pop	{r7, pc}

00001a10 <mp_print_str>:

const mp_print_t mp_plat_print = {NULL, plat_print_strn};

int mp_print_str(const mp_print_t *print, const char *str) {
    1a10:	b580      	push	{r7, lr}
    1a12:	b084      	sub	sp, #16
    1a14:	af00      	add	r7, sp, #0
    1a16:	6078      	str	r0, [r7, #4]
    1a18:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
    1a1a:	6838      	ldr	r0, [r7, #0]
    1a1c:	f01b faf2 	bl	1d004 <strlen>
    1a20:	60f8      	str	r0, [r7, #12]
    if (len) {
    1a22:	68fb      	ldr	r3, [r7, #12]
    1a24:	2b00      	cmp	r3, #0
    1a26:	d006      	beq.n	1a36 <mp_print_str+0x26>
        print->print_strn(print->data, str, len);
    1a28:	687b      	ldr	r3, [r7, #4]
    1a2a:	685b      	ldr	r3, [r3, #4]
    1a2c:	687a      	ldr	r2, [r7, #4]
    1a2e:	6810      	ldr	r0, [r2, #0]
    1a30:	68fa      	ldr	r2, [r7, #12]
    1a32:	6839      	ldr	r1, [r7, #0]
    1a34:	4798      	blx	r3
    }
    return len;
    1a36:	68fb      	ldr	r3, [r7, #12]
}
    1a38:	4618      	mov	r0, r3
    1a3a:	3710      	adds	r7, #16
    1a3c:	46bd      	mov	sp, r7
    1a3e:	bd80      	pop	{r7, pc}

00001a40 <mp_print_strn>:

int mp_print_strn(const mp_print_t *print, const char *str, size_t len, int flags, char fill, int width) {
    1a40:	b580      	push	{r7, lr}
    1a42:	b08c      	sub	sp, #48	; 0x30
    1a44:	af00      	add	r7, sp, #0
    1a46:	60f8      	str	r0, [r7, #12]
    1a48:	60b9      	str	r1, [r7, #8]
    1a4a:	607a      	str	r2, [r7, #4]
    1a4c:	603b      	str	r3, [r7, #0]
    int left_pad = 0;
    1a4e:	2300      	movs	r3, #0
    1a50:	62fb      	str	r3, [r7, #44]	; 0x2c
    int right_pad = 0;
    1a52:	2300      	movs	r3, #0
    1a54:	62bb      	str	r3, [r7, #40]	; 0x28
    int pad = width - len;
    1a56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1a58:	687b      	ldr	r3, [r7, #4]
    1a5a:	1ad3      	subs	r3, r2, r3
    1a5c:	613b      	str	r3, [r7, #16]
    int pad_size;
    int total_chars_printed = 0;
    1a5e:	2300      	movs	r3, #0
    1a60:	623b      	str	r3, [r7, #32]
    const char *pad_chars;

    if (!fill || fill == ' ') {
    1a62:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    1a66:	2b00      	cmp	r3, #0
    1a68:	d003      	beq.n	1a72 <mp_print_strn+0x32>
    1a6a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    1a6e:	2b20      	cmp	r3, #32
    1a70:	d104      	bne.n	1a7c <mp_print_strn+0x3c>
        pad_chars = pad_spaces;
    1a72:	4b3d      	ldr	r3, [pc, #244]	; (1b68 <mp_print_strn+0x128>)
    1a74:	61fb      	str	r3, [r7, #28]
        pad_size = sizeof(pad_spaces) - 1;
    1a76:	2310      	movs	r3, #16
    1a78:	627b      	str	r3, [r7, #36]	; 0x24
    1a7a:	e00d      	b.n	1a98 <mp_print_strn+0x58>
    } else if (fill == '0') {
    1a7c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    1a80:	2b30      	cmp	r3, #48	; 0x30
    1a82:	d104      	bne.n	1a8e <mp_print_strn+0x4e>
        pad_chars = pad_zeroes;
    1a84:	4b39      	ldr	r3, [pc, #228]	; (1b6c <mp_print_strn+0x12c>)
    1a86:	61fb      	str	r3, [r7, #28]
        pad_size = sizeof(pad_zeroes) - 1;
    1a88:	2310      	movs	r3, #16
    1a8a:	627b      	str	r3, [r7, #36]	; 0x24
    1a8c:	e004      	b.n	1a98 <mp_print_strn+0x58>
    } else {
        // Other pad characters are fairly unusual, so we'll take the hit
        // and output them 1 at a time.
        pad_chars = &fill;
    1a8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
    1a92:	61fb      	str	r3, [r7, #28]
        pad_size = 1;
    1a94:	2301      	movs	r3, #1
    1a96:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (flags & PF_FLAG_CENTER_ADJUST) {
    1a98:	683b      	ldr	r3, [r7, #0]
    1a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    1a9e:	2b00      	cmp	r3, #0
    1aa0:	d009      	beq.n	1ab6 <mp_print_strn+0x76>
        left_pad = pad / 2;
    1aa2:	693b      	ldr	r3, [r7, #16]
    1aa4:	0fda      	lsrs	r2, r3, #31
    1aa6:	4413      	add	r3, r2
    1aa8:	105b      	asrs	r3, r3, #1
    1aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        right_pad = pad - left_pad;
    1aac:	693a      	ldr	r2, [r7, #16]
    1aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1ab0:	1ad3      	subs	r3, r2, r3
    1ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    1ab4:	e009      	b.n	1aca <mp_print_strn+0x8a>
    } else if (flags & PF_FLAG_LEFT_ADJUST) {
    1ab6:	683b      	ldr	r3, [r7, #0]
    1ab8:	f003 0301 	and.w	r3, r3, #1
    1abc:	2b00      	cmp	r3, #0
    1abe:	d002      	beq.n	1ac6 <mp_print_strn+0x86>
        right_pad = pad;
    1ac0:	693b      	ldr	r3, [r7, #16]
    1ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    1ac4:	e001      	b.n	1aca <mp_print_strn+0x8a>
    } else {
        left_pad = pad;
    1ac6:	693b      	ldr	r3, [r7, #16]
    1ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (left_pad > 0) {
    1aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1acc:	2b00      	cmp	r3, #0
    1ace:	dd1a      	ble.n	1b06 <mp_print_strn+0xc6>
        total_chars_printed += left_pad;
    1ad0:	6a3a      	ldr	r2, [r7, #32]
    1ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1ad4:	4413      	add	r3, r2
    1ad6:	623b      	str	r3, [r7, #32]
        while (left_pad > 0) {
    1ad8:	e012      	b.n	1b00 <mp_print_strn+0xc0>
            int p = left_pad;
    1ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1adc:	61bb      	str	r3, [r7, #24]
            if (p > pad_size) {
    1ade:	69ba      	ldr	r2, [r7, #24]
    1ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1ae2:	429a      	cmp	r2, r3
    1ae4:	dd01      	ble.n	1aea <mp_print_strn+0xaa>
                p = pad_size;
    1ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1ae8:	61bb      	str	r3, [r7, #24]
            }
            print->print_strn(print->data, pad_chars, p);
    1aea:	68fb      	ldr	r3, [r7, #12]
    1aec:	685b      	ldr	r3, [r3, #4]
    1aee:	68fa      	ldr	r2, [r7, #12]
    1af0:	6810      	ldr	r0, [r2, #0]
    1af2:	69ba      	ldr	r2, [r7, #24]
    1af4:	69f9      	ldr	r1, [r7, #28]
    1af6:	4798      	blx	r3
            left_pad -= p;
    1af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1afa:	69bb      	ldr	r3, [r7, #24]
    1afc:	1ad3      	subs	r3, r2, r3
    1afe:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (left_pad > 0) {
    1b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b02:	2b00      	cmp	r3, #0
    1b04:	dce9      	bgt.n	1ada <mp_print_strn+0x9a>
        }
    }
    if (len) {
    1b06:	687b      	ldr	r3, [r7, #4]
    1b08:	2b00      	cmp	r3, #0
    1b0a:	d00a      	beq.n	1b22 <mp_print_strn+0xe2>
        print->print_strn(print->data, str, len);
    1b0c:	68fb      	ldr	r3, [r7, #12]
    1b0e:	685b      	ldr	r3, [r3, #4]
    1b10:	68fa      	ldr	r2, [r7, #12]
    1b12:	6810      	ldr	r0, [r2, #0]
    1b14:	687a      	ldr	r2, [r7, #4]
    1b16:	68b9      	ldr	r1, [r7, #8]
    1b18:	4798      	blx	r3
        total_chars_printed += len;
    1b1a:	6a3a      	ldr	r2, [r7, #32]
    1b1c:	687b      	ldr	r3, [r7, #4]
    1b1e:	4413      	add	r3, r2
    1b20:	623b      	str	r3, [r7, #32]
    }
    if (right_pad > 0) {
    1b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1b24:	2b00      	cmp	r3, #0
    1b26:	dd1a      	ble.n	1b5e <mp_print_strn+0x11e>
        total_chars_printed += right_pad;
    1b28:	6a3a      	ldr	r2, [r7, #32]
    1b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1b2c:	4413      	add	r3, r2
    1b2e:	623b      	str	r3, [r7, #32]
        while (right_pad > 0) {
    1b30:	e012      	b.n	1b58 <mp_print_strn+0x118>
            int p = right_pad;
    1b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1b34:	617b      	str	r3, [r7, #20]
            if (p > pad_size) {
    1b36:	697a      	ldr	r2, [r7, #20]
    1b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b3a:	429a      	cmp	r2, r3
    1b3c:	dd01      	ble.n	1b42 <mp_print_strn+0x102>
                p = pad_size;
    1b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b40:	617b      	str	r3, [r7, #20]
            }
            print->print_strn(print->data, pad_chars, p);
    1b42:	68fb      	ldr	r3, [r7, #12]
    1b44:	685b      	ldr	r3, [r3, #4]
    1b46:	68fa      	ldr	r2, [r7, #12]
    1b48:	6810      	ldr	r0, [r2, #0]
    1b4a:	697a      	ldr	r2, [r7, #20]
    1b4c:	69f9      	ldr	r1, [r7, #28]
    1b4e:	4798      	blx	r3
            right_pad -= p;
    1b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1b52:	697b      	ldr	r3, [r7, #20]
    1b54:	1ad3      	subs	r3, r2, r3
    1b56:	62bb      	str	r3, [r7, #40]	; 0x28
        while (right_pad > 0) {
    1b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1b5a:	2b00      	cmp	r3, #0
    1b5c:	dce9      	bgt.n	1b32 <mp_print_strn+0xf2>
        }
    }
    return total_chars_printed;
    1b5e:	6a3b      	ldr	r3, [r7, #32]
}
    1b60:	4618      	mov	r0, r3
    1b62:	3730      	adds	r7, #48	; 0x30
    1b64:	46bd      	mov	sp, r7
    1b66:	bd80      	pop	{r7, pc}
    1b68:	0001f85c 	.word	0x0001f85c
    1b6c:	0001f870 	.word	0x0001f870

00001b70 <mp_print_int>:
// print the prefix of a non-base-10 number, so we don't need code for this.
#define SUPPORT_INT_BASE_PREFIX (0)

// This function is used exclusively by mp_vprintf to format ints.
// It needs to be a separate function to mp_print_mp_int, since converting to a mp_int looses the MSB.
STATIC int mp_print_int(const mp_print_t *print, mp_uint_t x, int sgn, int base, int base_char, int flags, char fill, int width) {
    1b70:	b580      	push	{r7, lr}
    1b72:	b08e      	sub	sp, #56	; 0x38
    1b74:	af02      	add	r7, sp, #8
    1b76:	60f8      	str	r0, [r7, #12]
    1b78:	60b9      	str	r1, [r7, #8]
    1b7a:	607a      	str	r2, [r7, #4]
    1b7c:	603b      	str	r3, [r7, #0]
    char sign = 0;
    1b7e:	2300      	movs	r3, #0
    1b80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (sgn) {
    1b84:	687b      	ldr	r3, [r7, #4]
    1b86:	2b00      	cmp	r3, #0
    1b88:	d01a      	beq.n	1bc0 <mp_print_int+0x50>
        if ((mp_int_t)x < 0) {
    1b8a:	68bb      	ldr	r3, [r7, #8]
    1b8c:	2b00      	cmp	r3, #0
    1b8e:	da06      	bge.n	1b9e <mp_print_int+0x2e>
            sign = '-';
    1b90:	232d      	movs	r3, #45	; 0x2d
    1b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            x = -x;
    1b96:	68bb      	ldr	r3, [r7, #8]
    1b98:	425b      	negs	r3, r3
    1b9a:	60bb      	str	r3, [r7, #8]
    1b9c:	e010      	b.n	1bc0 <mp_print_int+0x50>
        } else if (flags & PF_FLAG_SHOW_SIGN) {
    1b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1ba0:	f003 0302 	and.w	r3, r3, #2
    1ba4:	2b00      	cmp	r3, #0
    1ba6:	d003      	beq.n	1bb0 <mp_print_int+0x40>
            sign = '+';
    1ba8:	232b      	movs	r3, #43	; 0x2b
    1baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    1bae:	e007      	b.n	1bc0 <mp_print_int+0x50>
        } else if (flags & PF_FLAG_SPACE_SIGN) {
    1bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1bb2:	f003 0304 	and.w	r3, r3, #4
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	d002      	beq.n	1bc0 <mp_print_int+0x50>
            sign = ' ';
    1bba:	2320      	movs	r3, #32
    1bbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        }
    }

    char buf[INT_BUF_SIZE];
    char *b = buf + INT_BUF_SIZE;
    1bc0:	f107 0310 	add.w	r3, r7, #16
    1bc4:	3310      	adds	r3, #16
    1bc6:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (x == 0) {
    1bc8:	68bb      	ldr	r3, [r7, #8]
    1bca:	2b00      	cmp	r3, #0
    1bcc:	d106      	bne.n	1bdc <mp_print_int+0x6c>
        *(--b) = '0';
    1bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1bd0:	3b01      	subs	r3, #1
    1bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    1bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1bd6:	2230      	movs	r2, #48	; 0x30
    1bd8:	701a      	strb	r2, [r3, #0]
    1bda:	e027      	b.n	1c2c <mp_print_int+0xbc>
    } else {
        do {
            int c = x % base;
    1bdc:	683a      	ldr	r2, [r7, #0]
    1bde:	68bb      	ldr	r3, [r7, #8]
    1be0:	fbb3 f1f2 	udiv	r1, r3, r2
    1be4:	fb02 f201 	mul.w	r2, r2, r1
    1be8:	1a9b      	subs	r3, r3, r2
    1bea:	62bb      	str	r3, [r7, #40]	; 0x28
            x /= base;
    1bec:	683b      	ldr	r3, [r7, #0]
    1bee:	68ba      	ldr	r2, [r7, #8]
    1bf0:	fbb2 f3f3 	udiv	r3, r2, r3
    1bf4:	60bb      	str	r3, [r7, #8]
            if (c >= 10) {
    1bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1bf8:	2b09      	cmp	r3, #9
    1bfa:	dd05      	ble.n	1c08 <mp_print_int+0x98>
                c += base_char - 10;
    1bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1bfe:	3b0a      	subs	r3, #10
    1c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1c02:	4413      	add	r3, r2
    1c04:	62bb      	str	r3, [r7, #40]	; 0x28
    1c06:	e002      	b.n	1c0e <mp_print_int+0x9e>
            } else {
                c += '0';
    1c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1c0a:	3330      	adds	r3, #48	; 0x30
    1c0c:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            *(--b) = c;
    1c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c10:	3b01      	subs	r3, #1
    1c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    1c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1c16:	b2da      	uxtb	r2, r3
    1c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c1a:	701a      	strb	r2, [r3, #0]
        } while (b > buf && x != 0);
    1c1c:	f107 0310 	add.w	r3, r7, #16
    1c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1c22:	429a      	cmp	r2, r3
    1c24:	d902      	bls.n	1c2c <mp_print_int+0xbc>
    1c26:	68bb      	ldr	r3, [r7, #8]
    1c28:	2b00      	cmp	r3, #0
    1c2a:	d1d7      	bne.n	1bdc <mp_print_int+0x6c>
            prefix_char = base_char + 'x' - 'a';
        }
    }
    #endif

    int len = 0;
    1c2c:	2300      	movs	r3, #0
    1c2e:	627b      	str	r3, [r7, #36]	; 0x24
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1c36:	2b00      	cmp	r3, #0
    1c38:	d017      	beq.n	1c6a <mp_print_int+0xfa>
        if (sign) {
    1c3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    1c3e:	2b00      	cmp	r3, #0
    1c40:	d023      	beq.n	1c8a <mp_print_int+0x11a>
            len += mp_print_strn(print, &sign, 1, flags, fill, 1);
    1c42:	f107 0123 	add.w	r1, r7, #35	; 0x23
    1c46:	2301      	movs	r3, #1
    1c48:	9301      	str	r3, [sp, #4]
    1c4a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    1c4e:	9300      	str	r3, [sp, #0]
    1c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1c52:	2201      	movs	r2, #1
    1c54:	68f8      	ldr	r0, [r7, #12]
    1c56:	f7ff fef3 	bl	1a40 <mp_print_strn>
    1c5a:	4602      	mov	r2, r0
    1c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1c5e:	4413      	add	r3, r2
    1c60:	627b      	str	r3, [r7, #36]	; 0x24
            width--;
    1c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1c64:	3b01      	subs	r3, #1
    1c66:	647b      	str	r3, [r7, #68]	; 0x44
    1c68:	e00f      	b.n	1c8a <mp_print_int+0x11a>
        if (prefix_char && b > &buf[1]) {
            *(--b) = prefix_char;
            *(--b) = '0';
        }
        #endif
        if (sign && b > buf) {
    1c6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    1c6e:	2b00      	cmp	r3, #0
    1c70:	d00b      	beq.n	1c8a <mp_print_int+0x11a>
    1c72:	f107 0310 	add.w	r3, r7, #16
    1c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1c78:	429a      	cmp	r2, r3
    1c7a:	d906      	bls.n	1c8a <mp_print_int+0x11a>
            *(--b) = sign;
    1c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c7e:	3b01      	subs	r3, #1
    1c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    1c82:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    1c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c88:	701a      	strb	r2, [r3, #0]
        }
    }

    len += mp_print_strn(print, b, buf + INT_BUF_SIZE - b, flags, fill, width);
    1c8a:	f107 0310 	add.w	r3, r7, #16
    1c8e:	3310      	adds	r3, #16
    1c90:	461a      	mov	r2, r3
    1c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1c94:	1ad3      	subs	r3, r2, r3
    1c96:	461a      	mov	r2, r3
    1c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1c9a:	9301      	str	r3, [sp, #4]
    1c9c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    1ca0:	9300      	str	r3, [sp, #0]
    1ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1ca4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    1ca6:	68f8      	ldr	r0, [r7, #12]
    1ca8:	f7ff feca 	bl	1a40 <mp_print_strn>
    1cac:	4602      	mov	r2, r0
    1cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1cb0:	4413      	add	r3, r2
    1cb2:	627b      	str	r3, [r7, #36]	; 0x24
    return len;
    1cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1cb6:	4618      	mov	r0, r3
    1cb8:	3730      	adds	r7, #48	; 0x30
    1cba:	46bd      	mov	sp, r7
    1cbc:	bd80      	pop	{r7, pc}
    1cbe:	bf00      	nop

00001cc0 <mp_print_mp_int>:

int mp_print_mp_int(const mp_print_t *print, mp_obj_t x, int base, int base_char, int flags, char fill, int width, int prec) {
    1cc0:	b590      	push	{r4, r7, lr}
    1cc2:	b09b      	sub	sp, #108	; 0x6c
    1cc4:	af04      	add	r7, sp, #16
    1cc6:	60f8      	str	r0, [r7, #12]
    1cc8:	60b9      	str	r1, [r7, #8]
    1cca:	607a      	str	r2, [r7, #4]
    1ccc:	603b      	str	r3, [r7, #0]
    // These are the only values for "base" that are required to be supported by this
    // function, since Python only allows the user to format integers in these bases.
    // If needed this function could be generalised to handle other values.
    assert(base == 2 || base == 8 || base == 10 || base == 16);
    1cce:	687b      	ldr	r3, [r7, #4]
    1cd0:	2b02      	cmp	r3, #2
    1cd2:	d00e      	beq.n	1cf2 <mp_print_mp_int+0x32>
    1cd4:	687b      	ldr	r3, [r7, #4]
    1cd6:	2b08      	cmp	r3, #8
    1cd8:	d00b      	beq.n	1cf2 <mp_print_mp_int+0x32>
    1cda:	687b      	ldr	r3, [r7, #4]
    1cdc:	2b0a      	cmp	r3, #10
    1cde:	d008      	beq.n	1cf2 <mp_print_mp_int+0x32>
    1ce0:	687b      	ldr	r3, [r7, #4]
    1ce2:	2b10      	cmp	r3, #16
    1ce4:	d005      	beq.n	1cf2 <mp_print_mp_int+0x32>
    1ce6:	4b8f      	ldr	r3, [pc, #572]	; (1f24 <mp_print_mp_int+0x264>)
    1ce8:	4a8f      	ldr	r2, [pc, #572]	; (1f28 <mp_print_mp_int+0x268>)
    1cea:	21d0      	movs	r1, #208	; 0xd0
    1cec:	488f      	ldr	r0, [pc, #572]	; (1f2c <mp_print_mp_int+0x26c>)
    1cee:	f019 fd49 	bl	1b784 <__assert_func>

    if (!MP_OBJ_IS_INT(x)) {
    1cf2:	68b8      	ldr	r0, [r7, #8]
    1cf4:	f7ff fe5a 	bl	19ac <MP_OBJ_IS_SMALL_INT>
    1cf8:	4603      	mov	r3, r0
    1cfa:	f083 0301 	eor.w	r3, r3, #1
    1cfe:	b2db      	uxtb	r3, r3
    1d00:	2b00      	cmp	r3, #0
    1d02:	d015      	beq.n	1d30 <mp_print_mp_int+0x70>
    1d04:	68b8      	ldr	r0, [r7, #8]
    1d06:	f7ff fe63 	bl	19d0 <MP_OBJ_IS_OBJ>
    1d0a:	4603      	mov	r3, r0
    1d0c:	f083 0301 	eor.w	r3, r3, #1
    1d10:	b2db      	uxtb	r3, r3
    1d12:	2b00      	cmp	r3, #0
    1d14:	d104      	bne.n	1d20 <mp_print_mp_int+0x60>
    1d16:	68bb      	ldr	r3, [r7, #8]
    1d18:	681b      	ldr	r3, [r3, #0]
    1d1a:	4a85      	ldr	r2, [pc, #532]	; (1f30 <mp_print_mp_int+0x270>)
    1d1c:	4293      	cmp	r3, r2
    1d1e:	d007      	beq.n	1d30 <mp_print_mp_int+0x70>
        // This will convert booleans to int, or raise an error for
        // non-integer types.
        x = MP_OBJ_NEW_SMALL_INT(mp_obj_get_int(x));
    1d20:	68b8      	ldr	r0, [r7, #8]
    1d22:	f00b ff95 	bl	dc50 <mp_obj_get_int>
    1d26:	4603      	mov	r3, r0
    1d28:	005b      	lsls	r3, r3, #1
    1d2a:	f043 0301 	orr.w	r3, r3, #1
    1d2e:	60bb      	str	r3, [r7, #8]
    }

    if ((flags & (PF_FLAG_LEFT_ADJUST | PF_FLAG_CENTER_ADJUST)) == 0 && fill == '0') {
    1d30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1d32:	f003 0381 	and.w	r3, r3, #129	; 0x81
    1d36:	2b00      	cmp	r3, #0
    1d38:	d10b      	bne.n	1d52 <mp_print_mp_int+0x92>
    1d3a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
    1d3e:	2b30      	cmp	r3, #48	; 0x30
    1d40:	d107      	bne.n	1d52 <mp_print_mp_int+0x92>
        if (prec > width) {
    1d42:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    1d44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1d46:	429a      	cmp	r2, r3
    1d48:	dd01      	ble.n	1d4e <mp_print_mp_int+0x8e>
            width = prec;
    1d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1d4c:	673b      	str	r3, [r7, #112]	; 0x70
        }
        prec = 0;
    1d4e:	2300      	movs	r3, #0
    1d50:	677b      	str	r3, [r7, #116]	; 0x74
    }
    char prefix_buf[4];
    char *prefix = prefix_buf;
    1d52:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1d56:	657b      	str	r3, [r7, #84]	; 0x54

    if (mp_obj_int_sign(x) >= 0) {
    1d58:	68b8      	ldr	r0, [r7, #8]
    1d5a:	f00e fdc7 	bl	108ec <mp_obj_int_sign>
    1d5e:	4603      	mov	r3, r0
    1d60:	2b00      	cmp	r3, #0
    1d62:	db14      	blt.n	1d8e <mp_print_mp_int+0xce>
        if (flags & PF_FLAG_SHOW_SIGN) {
    1d64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1d66:	f003 0302 	and.w	r3, r3, #2
    1d6a:	2b00      	cmp	r3, #0
    1d6c:	d005      	beq.n	1d7a <mp_print_mp_int+0xba>
            *prefix++ = '+';
    1d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1d70:	1c5a      	adds	r2, r3, #1
    1d72:	657a      	str	r2, [r7, #84]	; 0x54
    1d74:	222b      	movs	r2, #43	; 0x2b
    1d76:	701a      	strb	r2, [r3, #0]
    1d78:	e009      	b.n	1d8e <mp_print_mp_int+0xce>
        } else if (flags & PF_FLAG_SPACE_SIGN) {
    1d7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1d7c:	f003 0304 	and.w	r3, r3, #4
    1d80:	2b00      	cmp	r3, #0
    1d82:	d004      	beq.n	1d8e <mp_print_mp_int+0xce>
            *prefix++ = ' ';
    1d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1d86:	1c5a      	adds	r2, r3, #1
    1d88:	657a      	str	r2, [r7, #84]	; 0x54
    1d8a:	2220      	movs	r2, #32
    1d8c:	701a      	strb	r2, [r3, #0]
        }
    }

    if (flags & PF_FLAG_SHOW_PREFIX) {
    1d8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1d90:	f003 0310 	and.w	r3, r3, #16
    1d94:	2b00      	cmp	r3, #0
    1d96:	d036      	beq.n	1e06 <mp_print_mp_int+0x146>
        if (base == 2) {
    1d98:	687b      	ldr	r3, [r7, #4]
    1d9a:	2b02      	cmp	r3, #2
    1d9c:	d10d      	bne.n	1dba <mp_print_mp_int+0xfa>
            *prefix++ = '0';
    1d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1da0:	1c5a      	adds	r2, r3, #1
    1da2:	657a      	str	r2, [r7, #84]	; 0x54
    1da4:	2230      	movs	r2, #48	; 0x30
    1da6:	701a      	strb	r2, [r3, #0]
            *prefix++ = base_char + 'b' - 'a';
    1da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1daa:	1c5a      	adds	r2, r3, #1
    1dac:	657a      	str	r2, [r7, #84]	; 0x54
    1dae:	683a      	ldr	r2, [r7, #0]
    1db0:	b2d2      	uxtb	r2, r2
    1db2:	3201      	adds	r2, #1
    1db4:	b2d2      	uxtb	r2, r2
    1db6:	701a      	strb	r2, [r3, #0]
    1db8:	e025      	b.n	1e06 <mp_print_mp_int+0x146>
        } else if (base == 8) {
    1dba:	687b      	ldr	r3, [r7, #4]
    1dbc:	2b08      	cmp	r3, #8
    1dbe:	d112      	bne.n	1de6 <mp_print_mp_int+0x126>
            *prefix++ = '0';
    1dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1dc2:	1c5a      	adds	r2, r3, #1
    1dc4:	657a      	str	r2, [r7, #84]	; 0x54
    1dc6:	2230      	movs	r2, #48	; 0x30
    1dc8:	701a      	strb	r2, [r3, #0]
            if (flags & PF_FLAG_SHOW_OCTAL_LETTER) {
    1dca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
    1dd0:	2b00      	cmp	r3, #0
    1dd2:	d018      	beq.n	1e06 <mp_print_mp_int+0x146>
                *prefix++ = base_char + 'o' - 'a';
    1dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1dd6:	1c5a      	adds	r2, r3, #1
    1dd8:	657a      	str	r2, [r7, #84]	; 0x54
    1dda:	683a      	ldr	r2, [r7, #0]
    1ddc:	b2d2      	uxtb	r2, r2
    1dde:	320e      	adds	r2, #14
    1de0:	b2d2      	uxtb	r2, r2
    1de2:	701a      	strb	r2, [r3, #0]
    1de4:	e00f      	b.n	1e06 <mp_print_mp_int+0x146>
            }
        } else if (base == 16) {
    1de6:	687b      	ldr	r3, [r7, #4]
    1de8:	2b10      	cmp	r3, #16
    1dea:	d10c      	bne.n	1e06 <mp_print_mp_int+0x146>
            *prefix++ = '0';
    1dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1dee:	1c5a      	adds	r2, r3, #1
    1df0:	657a      	str	r2, [r7, #84]	; 0x54
    1df2:	2230      	movs	r2, #48	; 0x30
    1df4:	701a      	strb	r2, [r3, #0]
            *prefix++ = base_char + 'x' - 'a';
    1df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1df8:	1c5a      	adds	r2, r3, #1
    1dfa:	657a      	str	r2, [r7, #84]	; 0x54
    1dfc:	683a      	ldr	r2, [r7, #0]
    1dfe:	b2d2      	uxtb	r2, r2
    1e00:	3217      	adds	r2, #23
    1e02:	b2d2      	uxtb	r2, r2
    1e04:	701a      	strb	r2, [r3, #0]
        }
    }
    *prefix = '\0';
    1e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1e08:	2200      	movs	r2, #0
    1e0a:	701a      	strb	r2, [r3, #0]
    int prefix_len = prefix - prefix_buf;
    1e0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1e0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1e12:	1ad3      	subs	r3, r2, r3
    1e14:	63bb      	str	r3, [r7, #56]	; 0x38
    prefix = prefix_buf;
    1e16:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1e1a:	657b      	str	r3, [r7, #84]	; 0x54

    char comma = '\0';
    1e1c:	2300      	movs	r3, #0
    1e1e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    if (flags & PF_FLAG_SHOW_COMMA) {
    1e22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1e24:	f003 0320 	and.w	r3, r3, #32
    1e28:	2b00      	cmp	r3, #0
    1e2a:	d002      	beq.n	1e32 <mp_print_mp_int+0x172>
        comma = ',';
    1e2c:	232c      	movs	r3, #44	; 0x2c
    1e2e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    }

    // The size of this buffer is rather arbitrary. If it's not large
    // enough, a dynamic one will be allocated.
    char stack_buf[sizeof(mp_int_t) * 4];
    char *buf = stack_buf;
    1e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
    1e36:	623b      	str	r3, [r7, #32]
    size_t buf_size = sizeof(stack_buf);
    1e38:	2310      	movs	r3, #16
    1e3a:	61fb      	str	r3, [r7, #28]
    size_t fmt_size = 0;
    1e3c:	2300      	movs	r3, #0
    1e3e:	61bb      	str	r3, [r7, #24]
    char *str;

    if (prec > 1) {
    1e40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1e42:	2b01      	cmp	r3, #1
    1e44:	dd03      	ble.n	1e4e <mp_print_mp_int+0x18e>
        flags |= PF_FLAG_PAD_AFTER_SIGN;
    1e46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1e4c:	66bb      	str	r3, [r7, #104]	; 0x68
    }
    char sign = '\0';
    1e4e:	2300      	movs	r3, #0
    1e50:	75fb      	strb	r3, [r7, #23]
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1e52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1e58:	2b00      	cmp	r3, #0
    1e5a:	d021      	beq.n	1ea0 <mp_print_mp_int+0x1e0>
        // We add the pad in this function, so since the pad goes after
        // the sign & prefix, we format without a prefix
        str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size,
    1e5c:	683b      	ldr	r3, [r7, #0]
    1e5e:	b2db      	uxtb	r3, r3
    1e60:	f107 0418 	add.w	r4, r7, #24
    1e64:	f107 011c 	add.w	r1, r7, #28
    1e68:	f107 0020 	add.w	r0, r7, #32
    1e6c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
    1e70:	9203      	str	r2, [sp, #12]
    1e72:	9302      	str	r3, [sp, #8]
    1e74:	2300      	movs	r3, #0
    1e76:	9301      	str	r3, [sp, #4]
    1e78:	687b      	ldr	r3, [r7, #4]
    1e7a:	9300      	str	r3, [sp, #0]
    1e7c:	68bb      	ldr	r3, [r7, #8]
    1e7e:	4622      	mov	r2, r4
    1e80:	f00e fc70 	bl	10764 <mp_obj_int_formatted>
    1e84:	64f8      	str	r0, [r7, #76]	; 0x4c
                                   x, base, NULL, base_char, comma);
        if (*str == '-') {
    1e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1e88:	781b      	ldrb	r3, [r3, #0]
    1e8a:	2b2d      	cmp	r3, #45	; 0x2d
    1e8c:	d11d      	bne.n	1eca <mp_print_mp_int+0x20a>
            sign = *str++;
    1e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1e90:	1c5a      	adds	r2, r3, #1
    1e92:	64fa      	str	r2, [r7, #76]	; 0x4c
    1e94:	781b      	ldrb	r3, [r3, #0]
    1e96:	75fb      	strb	r3, [r7, #23]
            fmt_size--;
    1e98:	69bb      	ldr	r3, [r7, #24]
    1e9a:	3b01      	subs	r3, #1
    1e9c:	61bb      	str	r3, [r7, #24]
    1e9e:	e014      	b.n	1eca <mp_print_mp_int+0x20a>
        }
    } else {
        str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size,
    1ea0:	683b      	ldr	r3, [r7, #0]
    1ea2:	b2db      	uxtb	r3, r3
    1ea4:	f107 0418 	add.w	r4, r7, #24
    1ea8:	f107 011c 	add.w	r1, r7, #28
    1eac:	f107 0020 	add.w	r0, r7, #32
    1eb0:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
    1eb4:	9203      	str	r2, [sp, #12]
    1eb6:	9302      	str	r3, [sp, #8]
    1eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1eba:	9301      	str	r3, [sp, #4]
    1ebc:	687b      	ldr	r3, [r7, #4]
    1ebe:	9300      	str	r3, [sp, #0]
    1ec0:	68bb      	ldr	r3, [r7, #8]
    1ec2:	4622      	mov	r2, r4
    1ec4:	f00e fc4e 	bl	10764 <mp_obj_int_formatted>
    1ec8:	64f8      	str	r0, [r7, #76]	; 0x4c
                                   x, base, prefix, base_char, comma);
    }

    int spaces_before = 0;
    1eca:	2300      	movs	r3, #0
    1ecc:	64bb      	str	r3, [r7, #72]	; 0x48
    int spaces_after = 0;
    1ece:	2300      	movs	r3, #0
    1ed0:	647b      	str	r3, [r7, #68]	; 0x44

    if (prec > 1) {
    1ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1ed4:	2b01      	cmp	r3, #1
    1ed6:	dd38      	ble.n	1f4a <mp_print_mp_int+0x28a>
        // If prec was specified, then prec specifies the width to zero-pad the
        // the number to. This zero-padded number then gets left or right
        // aligned in width characters.

        int prec_width = fmt_size;  // The digits
    1ed8:	69bb      	ldr	r3, [r7, #24]
    1eda:	643b      	str	r3, [r7, #64]	; 0x40
        if (prec_width < prec) {
    1edc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1ee0:	429a      	cmp	r2, r3
    1ee2:	da01      	bge.n	1ee8 <mp_print_mp_int+0x228>
            prec_width = prec;
    1ee4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1ee6:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1ee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1eee:	2b00      	cmp	r3, #0
    1ef0:	d009      	beq.n	1f06 <mp_print_mp_int+0x246>
            if (sign) {
    1ef2:	7dfb      	ldrb	r3, [r7, #23]
    1ef4:	2b00      	cmp	r3, #0
    1ef6:	d002      	beq.n	1efe <mp_print_mp_int+0x23e>
                prec_width++;
    1ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1efa:	3301      	adds	r3, #1
    1efc:	643b      	str	r3, [r7, #64]	; 0x40
            }
            prec_width += prefix_len;
    1efe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1f02:	4413      	add	r3, r2
    1f04:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (prec_width < width) {
    1f06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1f08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1f0a:	429a      	cmp	r2, r3
    1f0c:	da16      	bge.n	1f3c <mp_print_mp_int+0x27c>
            if (flags & PF_FLAG_LEFT_ADJUST) {
    1f0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1f10:	f003 0301 	and.w	r3, r3, #1
    1f14:	2b00      	cmp	r3, #0
    1f16:	d00d      	beq.n	1f34 <mp_print_mp_int+0x274>
                spaces_after = width - prec_width;
    1f18:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1f1c:	1ad3      	subs	r3, r2, r3
    1f1e:	647b      	str	r3, [r7, #68]	; 0x44
    1f20:	e00c      	b.n	1f3c <mp_print_mp_int+0x27c>
    1f22:	bf00      	nop
    1f24:	0001f88c 	.word	0x0001f88c
    1f28:	0001f918 	.word	0x0001f918
    1f2c:	0001f8c0 	.word	0x0001f8c0
    1f30:	00022f80 	.word	0x00022f80
            } else {
                spaces_before = width - prec_width;
    1f34:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1f38:	1ad3      	subs	r3, r2, r3
    1f3a:	64bb      	str	r3, [r7, #72]	; 0x48
            }
        }
        fill = '0';
    1f3c:	2330      	movs	r3, #48	; 0x30
    1f3e:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
        flags &= ~PF_FLAG_LEFT_ADJUST;
    1f42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1f44:	f023 0301 	bic.w	r3, r3, #1
    1f48:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    int len = 0;
    1f4a:	2300      	movs	r3, #0
    1f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (spaces_before) {
    1f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1f50:	2b00      	cmp	r3, #0
    1f52:	d00d      	beq.n	1f70 <mp_print_mp_int+0x2b0>
        len += mp_print_strn(print, "", 0, 0, ' ', spaces_before);
    1f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1f56:	9301      	str	r3, [sp, #4]
    1f58:	2320      	movs	r3, #32
    1f5a:	9300      	str	r3, [sp, #0]
    1f5c:	2300      	movs	r3, #0
    1f5e:	2200      	movs	r2, #0
    1f60:	4934      	ldr	r1, [pc, #208]	; (2034 <mp_print_mp_int+0x374>)
    1f62:	68f8      	ldr	r0, [r7, #12]
    1f64:	f7ff fd6c 	bl	1a40 <mp_print_strn>
    1f68:	4602      	mov	r2, r0
    1f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f6c:	4413      	add	r3, r2
    1f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1f70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1f76:	2b00      	cmp	r3, #0
    1f78:	d029      	beq.n	1fce <mp_print_mp_int+0x30e>
        // pad after sign implies pad after prefix as well.
        if (sign) {
    1f7a:	7dfb      	ldrb	r3, [r7, #23]
    1f7c:	2b00      	cmp	r3, #0
    1f7e:	d011      	beq.n	1fa4 <mp_print_mp_int+0x2e4>
            len += mp_print_strn(print, &sign, 1, 0, 0, 1);
    1f80:	f107 0117 	add.w	r1, r7, #23
    1f84:	2301      	movs	r3, #1
    1f86:	9301      	str	r3, [sp, #4]
    1f88:	2300      	movs	r3, #0
    1f8a:	9300      	str	r3, [sp, #0]
    1f8c:	2300      	movs	r3, #0
    1f8e:	2201      	movs	r2, #1
    1f90:	68f8      	ldr	r0, [r7, #12]
    1f92:	f7ff fd55 	bl	1a40 <mp_print_strn>
    1f96:	4602      	mov	r2, r0
    1f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f9a:	4413      	add	r3, r2
    1f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
            width--;
    1f9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1fa0:	3b01      	subs	r3, #1
    1fa2:	673b      	str	r3, [r7, #112]	; 0x70
        }
        if (prefix_len) {
    1fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1fa6:	2b00      	cmp	r3, #0
    1fa8:	d011      	beq.n	1fce <mp_print_mp_int+0x30e>
            len += mp_print_strn(print, prefix, prefix_len, 0, 0, 1);
    1faa:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1fac:	2301      	movs	r3, #1
    1fae:	9301      	str	r3, [sp, #4]
    1fb0:	2300      	movs	r3, #0
    1fb2:	9300      	str	r3, [sp, #0]
    1fb4:	2300      	movs	r3, #0
    1fb6:	6d79      	ldr	r1, [r7, #84]	; 0x54
    1fb8:	68f8      	ldr	r0, [r7, #12]
    1fba:	f7ff fd41 	bl	1a40 <mp_print_strn>
    1fbe:	4602      	mov	r2, r0
    1fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1fc2:	4413      	add	r3, r2
    1fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
            width -= prefix_len;
    1fc6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1fca:	1ad3      	subs	r3, r2, r3
    1fcc:	673b      	str	r3, [r7, #112]	; 0x70
        }
    }
    if (prec > 1) {
    1fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1fd0:	2b01      	cmp	r3, #1
    1fd2:	dd01      	ble.n	1fd8 <mp_print_mp_int+0x318>
        width = prec;
    1fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1fd6:	673b      	str	r3, [r7, #112]	; 0x70
    }

    len += mp_print_strn(print, str, fmt_size, flags, fill, width);
    1fd8:	69ba      	ldr	r2, [r7, #24]
    1fda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1fdc:	9301      	str	r3, [sp, #4]
    1fde:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
    1fe2:	9300      	str	r3, [sp, #0]
    1fe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1fe6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    1fe8:	68f8      	ldr	r0, [r7, #12]
    1fea:	f7ff fd29 	bl	1a40 <mp_print_strn>
    1fee:	4602      	mov	r2, r0
    1ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1ff2:	4413      	add	r3, r2
    1ff4:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (spaces_after) {
    1ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1ff8:	2b00      	cmp	r3, #0
    1ffa:	d00d      	beq.n	2018 <mp_print_mp_int+0x358>
        len += mp_print_strn(print, "", 0, 0, ' ', spaces_after);
    1ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1ffe:	9301      	str	r3, [sp, #4]
    2000:	2320      	movs	r3, #32
    2002:	9300      	str	r3, [sp, #0]
    2004:	2300      	movs	r3, #0
    2006:	2200      	movs	r2, #0
    2008:	490a      	ldr	r1, [pc, #40]	; (2034 <mp_print_mp_int+0x374>)
    200a:	68f8      	ldr	r0, [r7, #12]
    200c:	f7ff fd18 	bl	1a40 <mp_print_strn>
    2010:	4602      	mov	r2, r0
    2012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2014:	4413      	add	r3, r2
    2016:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if (buf != stack_buf) {
    2018:	6a3a      	ldr	r2, [r7, #32]
    201a:	f107 0324 	add.w	r3, r7, #36	; 0x24
    201e:	429a      	cmp	r2, r3
    2020:	d003      	beq.n	202a <mp_print_mp_int+0x36a>
        m_del(char, buf, buf_size);
    2022:	6a3b      	ldr	r3, [r7, #32]
    2024:	4618      	mov	r0, r3
    2026:	f7fe f9f3 	bl	410 <m_free>
    }
    return len;
    202a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    202c:	4618      	mov	r0, r3
    202e:	375c      	adds	r7, #92	; 0x5c
    2030:	46bd      	mov	sp, r7
    2032:	bd90      	pop	{r4, r7, pc}
    2034:	0001f8d4 	.word	0x0001f8d4

00002038 <mp_printf>:

    return chrs;
}
#endif

int mp_printf(const mp_print_t *print, const char *fmt, ...) {
    2038:	b40e      	push	{r1, r2, r3}
    203a:	b580      	push	{r7, lr}
    203c:	b085      	sub	sp, #20
    203e:	af00      	add	r7, sp, #0
    2040:	6078      	str	r0, [r7, #4]
    va_list ap;
    va_start(ap, fmt);
    2042:	f107 0320 	add.w	r3, r7, #32
    2046:	60bb      	str	r3, [r7, #8]
    int ret = mp_vprintf(print, fmt, ap);
    2048:	68ba      	ldr	r2, [r7, #8]
    204a:	69f9      	ldr	r1, [r7, #28]
    204c:	6878      	ldr	r0, [r7, #4]
    204e:	f000 f809 	bl	2064 <mp_vprintf>
    2052:	60f8      	str	r0, [r7, #12]
    va_end(ap);
    return ret;
    2054:	68fb      	ldr	r3, [r7, #12]
}
    2056:	4618      	mov	r0, r3
    2058:	3714      	adds	r7, #20
    205a:	46bd      	mov	sp, r7
    205c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2060:	b003      	add	sp, #12
    2062:	4770      	bx	lr

00002064 <mp_vprintf>:

int mp_vprintf(const mp_print_t *print, const char *fmt, va_list args) {
    2064:	b580      	push	{r7, lr}
    2066:	b096      	sub	sp, #88	; 0x58
    2068:	af04      	add	r7, sp, #16
    206a:	60f8      	str	r0, [r7, #12]
    206c:	60b9      	str	r1, [r7, #8]
    206e:	607a      	str	r2, [r7, #4]
    int chrs = 0;
    2070:	2300      	movs	r3, #0
    2072:	647b      	str	r3, [r7, #68]	; 0x44
    for (;;) {
        {
            const char *f = fmt;
    2074:	68bb      	ldr	r3, [r7, #8]
    2076:	643b      	str	r3, [r7, #64]	; 0x40
            while (*f != '\0' && *f != '%') {
    2078:	e002      	b.n	2080 <mp_vprintf+0x1c>
                ++f; // XXX UTF8 advance char
    207a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    207c:	3301      	adds	r3, #1
    207e:	643b      	str	r3, [r7, #64]	; 0x40
            while (*f != '\0' && *f != '%') {
    2080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2082:	781b      	ldrb	r3, [r3, #0]
    2084:	2b00      	cmp	r3, #0
    2086:	d003      	beq.n	2090 <mp_vprintf+0x2c>
    2088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    208a:	781b      	ldrb	r3, [r3, #0]
    208c:	2b25      	cmp	r3, #37	; 0x25
    208e:	d1f4      	bne.n	207a <mp_vprintf+0x16>
            }
            if (f > fmt) {
    2090:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    2092:	68bb      	ldr	r3, [r7, #8]
    2094:	429a      	cmp	r2, r3
    2096:	d910      	bls.n	20ba <mp_vprintf+0x56>
                print->print_strn(print->data, fmt, f - fmt);
    2098:	68fb      	ldr	r3, [r7, #12]
    209a:	685b      	ldr	r3, [r3, #4]
    209c:	68fa      	ldr	r2, [r7, #12]
    209e:	6810      	ldr	r0, [r2, #0]
    20a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
    20a2:	68ba      	ldr	r2, [r7, #8]
    20a4:	1a8a      	subs	r2, r1, r2
    20a6:	68b9      	ldr	r1, [r7, #8]
    20a8:	4798      	blx	r3
                chrs += f - fmt;
    20aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    20ac:	68bb      	ldr	r3, [r7, #8]
    20ae:	1ad3      	subs	r3, r2, r3
    20b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    20b2:	4413      	add	r3, r2
    20b4:	647b      	str	r3, [r7, #68]	; 0x44
                fmt = f;
    20b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    20b8:	60bb      	str	r3, [r7, #8]
            }
        }

        if (*fmt == '\0') {
    20ba:	68bb      	ldr	r3, [r7, #8]
    20bc:	781b      	ldrb	r3, [r3, #0]
    20be:	2b00      	cmp	r3, #0
    20c0:	f000 8214 	beq.w	24ec <mp_vprintf+0x488>
            break;
        }

        // move past % character
        ++fmt;
    20c4:	68bb      	ldr	r3, [r7, #8]
    20c6:	3301      	adds	r3, #1
    20c8:	60bb      	str	r3, [r7, #8]

        // parse flags, if they exist
        int flags = 0;
    20ca:	2300      	movs	r3, #0
    20cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        char fill = ' ';
    20ce:	2320      	movs	r3, #32
    20d0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        while (*fmt != '\0') {
    20d4:	e031      	b.n	213a <mp_vprintf+0xd6>
            if (*fmt == '-') flags |= PF_FLAG_LEFT_ADJUST;
    20d6:	68bb      	ldr	r3, [r7, #8]
    20d8:	781b      	ldrb	r3, [r3, #0]
    20da:	2b2d      	cmp	r3, #45	; 0x2d
    20dc:	d104      	bne.n	20e8 <mp_vprintf+0x84>
    20de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    20e0:	f043 0301 	orr.w	r3, r3, #1
    20e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    20e6:	e025      	b.n	2134 <mp_vprintf+0xd0>
            else if (*fmt == '+') flags |= PF_FLAG_SHOW_SIGN;
    20e8:	68bb      	ldr	r3, [r7, #8]
    20ea:	781b      	ldrb	r3, [r3, #0]
    20ec:	2b2b      	cmp	r3, #43	; 0x2b
    20ee:	d104      	bne.n	20fa <mp_vprintf+0x96>
    20f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    20f2:	f043 0302 	orr.w	r3, r3, #2
    20f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    20f8:	e01c      	b.n	2134 <mp_vprintf+0xd0>
            else if (*fmt == ' ') flags |= PF_FLAG_SPACE_SIGN;
    20fa:	68bb      	ldr	r3, [r7, #8]
    20fc:	781b      	ldrb	r3, [r3, #0]
    20fe:	2b20      	cmp	r3, #32
    2100:	d104      	bne.n	210c <mp_vprintf+0xa8>
    2102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2104:	f043 0304 	orr.w	r3, r3, #4
    2108:	63fb      	str	r3, [r7, #60]	; 0x3c
    210a:	e013      	b.n	2134 <mp_vprintf+0xd0>
            else if (*fmt == '!') flags |= PF_FLAG_NO_TRAILZ;
    210c:	68bb      	ldr	r3, [r7, #8]
    210e:	781b      	ldrb	r3, [r3, #0]
    2110:	2b21      	cmp	r3, #33	; 0x21
    2112:	d104      	bne.n	211e <mp_vprintf+0xba>
    2114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2116:	f043 0308 	orr.w	r3, r3, #8
    211a:	63fb      	str	r3, [r7, #60]	; 0x3c
    211c:	e00a      	b.n	2134 <mp_vprintf+0xd0>
            else if (*fmt == '0') {
    211e:	68bb      	ldr	r3, [r7, #8]
    2120:	781b      	ldrb	r3, [r3, #0]
    2122:	2b30      	cmp	r3, #48	; 0x30
    2124:	d10e      	bne.n	2144 <mp_vprintf+0xe0>
                flags |= PF_FLAG_PAD_AFTER_SIGN;
    2126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    212c:	63fb      	str	r3, [r7, #60]	; 0x3c
                fill = '0';
    212e:	2330      	movs	r3, #48	; 0x30
    2130:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            } else break;
            ++fmt;
    2134:	68bb      	ldr	r3, [r7, #8]
    2136:	3301      	adds	r3, #1
    2138:	60bb      	str	r3, [r7, #8]
        while (*fmt != '\0') {
    213a:	68bb      	ldr	r3, [r7, #8]
    213c:	781b      	ldrb	r3, [r3, #0]
    213e:	2b00      	cmp	r3, #0
    2140:	d1c9      	bne.n	20d6 <mp_vprintf+0x72>
    2142:	e000      	b.n	2146 <mp_vprintf+0xe2>
            } else break;
    2144:	bf00      	nop
        }

        // parse width, if it exists
        int width = 0;
    2146:	2300      	movs	r3, #0
    2148:	637b      	str	r3, [r7, #52]	; 0x34
        for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    214a:	e00d      	b.n	2168 <mp_vprintf+0x104>
            width = width * 10 + *fmt - '0';
    214c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    214e:	4613      	mov	r3, r2
    2150:	009b      	lsls	r3, r3, #2
    2152:	4413      	add	r3, r2
    2154:	005b      	lsls	r3, r3, #1
    2156:	461a      	mov	r2, r3
    2158:	68bb      	ldr	r3, [r7, #8]
    215a:	781b      	ldrb	r3, [r3, #0]
    215c:	4413      	add	r3, r2
    215e:	3b30      	subs	r3, #48	; 0x30
    2160:	637b      	str	r3, [r7, #52]	; 0x34
        for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    2162:	68bb      	ldr	r3, [r7, #8]
    2164:	3301      	adds	r3, #1
    2166:	60bb      	str	r3, [r7, #8]
    2168:	68bb      	ldr	r3, [r7, #8]
    216a:	781b      	ldrb	r3, [r3, #0]
    216c:	2b2f      	cmp	r3, #47	; 0x2f
    216e:	d903      	bls.n	2178 <mp_vprintf+0x114>
    2170:	68bb      	ldr	r3, [r7, #8]
    2172:	781b      	ldrb	r3, [r3, #0]
    2174:	2b39      	cmp	r3, #57	; 0x39
    2176:	d9e9      	bls.n	214c <mp_vprintf+0xe8>
        }

        // parse precision, if it exists
        int prec = -1;
    2178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    217c:	633b      	str	r3, [r7, #48]	; 0x30
        if (*fmt == '.') {
    217e:	68bb      	ldr	r3, [r7, #8]
    2180:	781b      	ldrb	r3, [r3, #0]
    2182:	2b2e      	cmp	r3, #46	; 0x2e
    2184:	d12d      	bne.n	21e2 <mp_vprintf+0x17e>
            ++fmt;
    2186:	68bb      	ldr	r3, [r7, #8]
    2188:	3301      	adds	r3, #1
    218a:	60bb      	str	r3, [r7, #8]
            if (*fmt == '*') {
    218c:	68bb      	ldr	r3, [r7, #8]
    218e:	781b      	ldrb	r3, [r3, #0]
    2190:	2b2a      	cmp	r3, #42	; 0x2a
    2192:	d108      	bne.n	21a6 <mp_vprintf+0x142>
                ++fmt;
    2194:	68bb      	ldr	r3, [r7, #8]
    2196:	3301      	adds	r3, #1
    2198:	60bb      	str	r3, [r7, #8]
                prec = va_arg(args, int);
    219a:	687b      	ldr	r3, [r7, #4]
    219c:	1d1a      	adds	r2, r3, #4
    219e:	607a      	str	r2, [r7, #4]
    21a0:	681b      	ldr	r3, [r3, #0]
    21a2:	633b      	str	r3, [r7, #48]	; 0x30
    21a4:	e018      	b.n	21d8 <mp_vprintf+0x174>
            } else {
                prec = 0;
    21a6:	2300      	movs	r3, #0
    21a8:	633b      	str	r3, [r7, #48]	; 0x30
                for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    21aa:	e00d      	b.n	21c8 <mp_vprintf+0x164>
                    prec = prec * 10 + *fmt - '0';
    21ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    21ae:	4613      	mov	r3, r2
    21b0:	009b      	lsls	r3, r3, #2
    21b2:	4413      	add	r3, r2
    21b4:	005b      	lsls	r3, r3, #1
    21b6:	461a      	mov	r2, r3
    21b8:	68bb      	ldr	r3, [r7, #8]
    21ba:	781b      	ldrb	r3, [r3, #0]
    21bc:	4413      	add	r3, r2
    21be:	3b30      	subs	r3, #48	; 0x30
    21c0:	633b      	str	r3, [r7, #48]	; 0x30
                for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    21c2:	68bb      	ldr	r3, [r7, #8]
    21c4:	3301      	adds	r3, #1
    21c6:	60bb      	str	r3, [r7, #8]
    21c8:	68bb      	ldr	r3, [r7, #8]
    21ca:	781b      	ldrb	r3, [r3, #0]
    21cc:	2b2f      	cmp	r3, #47	; 0x2f
    21ce:	d903      	bls.n	21d8 <mp_vprintf+0x174>
    21d0:	68bb      	ldr	r3, [r7, #8]
    21d2:	781b      	ldrb	r3, [r3, #0]
    21d4:	2b39      	cmp	r3, #57	; 0x39
    21d6:	d9e9      	bls.n	21ac <mp_vprintf+0x148>
                }
            }
            if (prec < 0) {
    21d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    21da:	2b00      	cmp	r3, #0
    21dc:	da01      	bge.n	21e2 <mp_vprintf+0x17e>
                prec = 0;
    21de:	2300      	movs	r3, #0
    21e0:	633b      	str	r3, [r7, #48]	; 0x30

        // parse long specifiers (only for LP64 model where they make a difference)
        #ifndef __LP64__
        const
        #endif
        bool long_arg = false;
    21e2:	2300      	movs	r3, #0
    21e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (*fmt == 'l') {
    21e8:	68bb      	ldr	r3, [r7, #8]
    21ea:	781b      	ldrb	r3, [r3, #0]
    21ec:	2b6c      	cmp	r3, #108	; 0x6c
    21ee:	d102      	bne.n	21f6 <mp_vprintf+0x192>
            ++fmt;
    21f0:	68bb      	ldr	r3, [r7, #8]
    21f2:	3301      	adds	r3, #1
    21f4:	60bb      	str	r3, [r7, #8]
            #ifdef __LP64__
            long_arg = true;
            #endif
        }

        if (*fmt == '\0') {
    21f6:	68bb      	ldr	r3, [r7, #8]
    21f8:	781b      	ldrb	r3, [r3, #0]
    21fa:	2b00      	cmp	r3, #0
    21fc:	f000 8178 	beq.w	24f0 <mp_vprintf+0x48c>
            break;
        }

        switch (*fmt) {
    2200:	68bb      	ldr	r3, [r7, #8]
    2202:	781b      	ldrb	r3, [r3, #0]
    2204:	3b50      	subs	r3, #80	; 0x50
    2206:	2b28      	cmp	r3, #40	; 0x28
    2208:	f200 8156 	bhi.w	24b8 <mp_vprintf+0x454>
    220c:	a201      	add	r2, pc, #4	; (adr r2, 2214 <mp_vprintf+0x1b0>)
    220e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2212:	bf00      	nop
    2214:	0000248b 	.word	0x0000248b
    2218:	000024b9 	.word	0x000024b9
    221c:	000024b9 	.word	0x000024b9
    2220:	000024b9 	.word	0x000024b9
    2224:	000024b9 	.word	0x000024b9
    2228:	000024b9 	.word	0x000024b9
    222c:	000024b9 	.word	0x000024b9
    2230:	000024b9 	.word	0x000024b9
    2234:	0000243d 	.word	0x0000243d
    2238:	000024b9 	.word	0x000024b9
    223c:	000024b9 	.word	0x000024b9
    2240:	000024b9 	.word	0x000024b9
    2244:	000024b9 	.word	0x000024b9
    2248:	000024b9 	.word	0x000024b9
    224c:	000024b9 	.word	0x000024b9
    2250:	000024b9 	.word	0x000024b9
    2254:	000024b9 	.word	0x000024b9
    2258:	000024b9 	.word	0x000024b9
    225c:	000022b9 	.word	0x000022b9
    2260:	00002305 	.word	0x00002305
    2264:	0000240d 	.word	0x0000240d
    2268:	000024b9 	.word	0x000024b9
    226c:	000024b9 	.word	0x000024b9
    2270:	000024b9 	.word	0x000024b9
    2274:	000024b9 	.word	0x000024b9
    2278:	000024b9 	.word	0x000024b9
    227c:	000024b9 	.word	0x000024b9
    2280:	000024b9 	.word	0x000024b9
    2284:	000024b9 	.word	0x000024b9
    2288:	000024b9 	.word	0x000024b9
    228c:	000024b9 	.word	0x000024b9
    2290:	000024b9 	.word	0x000024b9
    2294:	0000248b 	.word	0x0000248b
    2298:	00002335 	.word	0x00002335
    229c:	000024b9 	.word	0x000024b9
    22a0:	00002379 	.word	0x00002379
    22a4:	000024b9 	.word	0x000024b9
    22a8:	000023df 	.word	0x000023df
    22ac:	000024b9 	.word	0x000024b9
    22b0:	000024b9 	.word	0x000024b9
    22b4:	0000243d 	.word	0x0000243d
            case 'b':
                if (va_arg(args, int)) {
    22b8:	687b      	ldr	r3, [r7, #4]
    22ba:	1d1a      	adds	r2, r3, #4
    22bc:	607a      	str	r2, [r7, #4]
    22be:	681b      	ldr	r3, [r3, #0]
    22c0:	2b00      	cmp	r3, #0
    22c2:	d00f      	beq.n	22e4 <mp_vprintf+0x280>
                    chrs += mp_print_strn(print, "true", 4, flags, fill, width);
    22c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    22c6:	9301      	str	r3, [sp, #4]
    22c8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    22cc:	9300      	str	r3, [sp, #0]
    22ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    22d0:	2204      	movs	r2, #4
    22d2:	498a      	ldr	r1, [pc, #552]	; (24fc <mp_vprintf+0x498>)
    22d4:	68f8      	ldr	r0, [r7, #12]
    22d6:	f7ff fbb3 	bl	1a40 <mp_print_strn>
    22da:	4602      	mov	r2, r0
    22dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    22de:	4413      	add	r3, r2
    22e0:	647b      	str	r3, [r7, #68]	; 0x44
                } else {
                    chrs += mp_print_strn(print, "false", 5, flags, fill, width);
                }
                break;
    22e2:	e0ff      	b.n	24e4 <mp_vprintf+0x480>
                    chrs += mp_print_strn(print, "false", 5, flags, fill, width);
    22e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    22e6:	9301      	str	r3, [sp, #4]
    22e8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    22ec:	9300      	str	r3, [sp, #0]
    22ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    22f0:	2205      	movs	r2, #5
    22f2:	4983      	ldr	r1, [pc, #524]	; (2500 <mp_vprintf+0x49c>)
    22f4:	68f8      	ldr	r0, [r7, #12]
    22f6:	f7ff fba3 	bl	1a40 <mp_print_strn>
    22fa:	4602      	mov	r2, r0
    22fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    22fe:	4413      	add	r3, r2
    2300:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2302:	e0ef      	b.n	24e4 <mp_vprintf+0x480>
            case 'c':
            {
                char str = va_arg(args, int);
    2304:	687b      	ldr	r3, [r7, #4]
    2306:	1d1a      	adds	r2, r3, #4
    2308:	607a      	str	r2, [r7, #4]
    230a:	681b      	ldr	r3, [r3, #0]
    230c:	b2db      	uxtb	r3, r3
    230e:	76bb      	strb	r3, [r7, #26]
                chrs += mp_print_strn(print, &str, 1, flags, fill, width);
    2310:	f107 011a 	add.w	r1, r7, #26
    2314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2316:	9301      	str	r3, [sp, #4]
    2318:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    231c:	9300      	str	r3, [sp, #0]
    231e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2320:	2201      	movs	r2, #1
    2322:	68f8      	ldr	r0, [r7, #12]
    2324:	f7ff fb8c 	bl	1a40 <mp_print_strn>
    2328:	4602      	mov	r2, r0
    232a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    232c:	4413      	add	r3, r2
    232e:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2330:	bf00      	nop
    2332:	e0d7      	b.n	24e4 <mp_vprintf+0x480>
            }
            case 'q':
            {
                qstr qst = va_arg(args, qstr);
    2334:	687b      	ldr	r3, [r7, #4]
    2336:	1d1a      	adds	r2, r3, #4
    2338:	607a      	str	r2, [r7, #4]
    233a:	681b      	ldr	r3, [r3, #0]
    233c:	627b      	str	r3, [r7, #36]	; 0x24
                size_t len;
                const char *str = (const char*)qstr_data(qst, &len);
    233e:	f107 0314 	add.w	r3, r7, #20
    2342:	4619      	mov	r1, r3
    2344:	6a78      	ldr	r0, [r7, #36]	; 0x24
    2346:	f7ff f82d 	bl	13a4 <qstr_data>
    234a:	6238      	str	r0, [r7, #32]
                if (prec < 0) {
    234c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    234e:	2b00      	cmp	r3, #0
    2350:	da01      	bge.n	2356 <mp_vprintf+0x2f2>
                    prec = len;
    2352:	697b      	ldr	r3, [r7, #20]
    2354:	633b      	str	r3, [r7, #48]	; 0x30
                }
                chrs += mp_print_strn(print, str, prec, flags, fill, width);
    2356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    235a:	9301      	str	r3, [sp, #4]
    235c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2360:	9300      	str	r3, [sp, #0]
    2362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2364:	6a39      	ldr	r1, [r7, #32]
    2366:	68f8      	ldr	r0, [r7, #12]
    2368:	f7ff fb6a 	bl	1a40 <mp_print_strn>
    236c:	4602      	mov	r2, r0
    236e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2370:	4413      	add	r3, r2
    2372:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2374:	bf00      	nop
    2376:	e0b5      	b.n	24e4 <mp_vprintf+0x480>
            }
            case 's':
            {
                const char *str = va_arg(args, const char*);
    2378:	687b      	ldr	r3, [r7, #4]
    237a:	1d1a      	adds	r2, r3, #4
    237c:	607a      	str	r2, [r7, #4]
    237e:	681b      	ldr	r3, [r3, #0]
    2380:	61fb      	str	r3, [r7, #28]
                #ifndef NDEBUG
                // With debugging enabled, catch printing of null string pointers
                if (prec != 0 && str == NULL) {
    2382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2384:	2b00      	cmp	r3, #0
    2386:	d012      	beq.n	23ae <mp_vprintf+0x34a>
    2388:	69fb      	ldr	r3, [r7, #28]
    238a:	2b00      	cmp	r3, #0
    238c:	d10f      	bne.n	23ae <mp_vprintf+0x34a>
                    chrs += mp_print_strn(print, "(null)", 6, flags, fill, width);
    238e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2390:	9301      	str	r3, [sp, #4]
    2392:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2396:	9300      	str	r3, [sp, #0]
    2398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    239a:	2206      	movs	r2, #6
    239c:	4959      	ldr	r1, [pc, #356]	; (2504 <mp_vprintf+0x4a0>)
    239e:	68f8      	ldr	r0, [r7, #12]
    23a0:	f7ff fb4e 	bl	1a40 <mp_print_strn>
    23a4:	4602      	mov	r2, r0
    23a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    23a8:	4413      	add	r3, r2
    23aa:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
    23ac:	e09a      	b.n	24e4 <mp_vprintf+0x480>
                }
                #endif
                if (prec < 0) {
    23ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    23b0:	2b00      	cmp	r3, #0
    23b2:	da04      	bge.n	23be <mp_vprintf+0x35a>
                    prec = strlen(str);
    23b4:	69f8      	ldr	r0, [r7, #28]
    23b6:	f01a fe25 	bl	1d004 <strlen>
    23ba:	4603      	mov	r3, r0
    23bc:	633b      	str	r3, [r7, #48]	; 0x30
                }
                chrs += mp_print_strn(print, str, prec, flags, fill, width);
    23be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    23c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    23c2:	9301      	str	r3, [sp, #4]
    23c4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    23c8:	9300      	str	r3, [sp, #0]
    23ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    23cc:	69f9      	ldr	r1, [r7, #28]
    23ce:	68f8      	ldr	r0, [r7, #12]
    23d0:	f7ff fb36 	bl	1a40 <mp_print_strn>
    23d4:	4602      	mov	r2, r0
    23d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    23d8:	4413      	add	r3, r2
    23da:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    23dc:	e082      	b.n	24e4 <mp_vprintf+0x480>
            }
            case 'u':
                chrs += mp_print_int(print, va_arg(args, unsigned int), 0, 10, 'a', flags, fill, width);
    23de:	687b      	ldr	r3, [r7, #4]
    23e0:	1d1a      	adds	r2, r3, #4
    23e2:	607a      	str	r2, [r7, #4]
    23e4:	6819      	ldr	r1, [r3, #0]
    23e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    23e8:	9303      	str	r3, [sp, #12]
    23ea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    23ee:	9302      	str	r3, [sp, #8]
    23f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    23f2:	9301      	str	r3, [sp, #4]
    23f4:	2361      	movs	r3, #97	; 0x61
    23f6:	9300      	str	r3, [sp, #0]
    23f8:	230a      	movs	r3, #10
    23fa:	2200      	movs	r2, #0
    23fc:	68f8      	ldr	r0, [r7, #12]
    23fe:	f7ff fbb7 	bl	1b70 <mp_print_int>
    2402:	4602      	mov	r2, r0
    2404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2406:	4413      	add	r3, r2
    2408:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    240a:	e06b      	b.n	24e4 <mp_vprintf+0x480>
            case 'd':
                chrs += mp_print_int(print, va_arg(args, int), 1, 10, 'a', flags, fill, width);
    240c:	687b      	ldr	r3, [r7, #4]
    240e:	1d1a      	adds	r2, r3, #4
    2410:	607a      	str	r2, [r7, #4]
    2412:	681b      	ldr	r3, [r3, #0]
    2414:	4619      	mov	r1, r3
    2416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2418:	9303      	str	r3, [sp, #12]
    241a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    241e:	9302      	str	r3, [sp, #8]
    2420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2422:	9301      	str	r3, [sp, #4]
    2424:	2361      	movs	r3, #97	; 0x61
    2426:	9300      	str	r3, [sp, #0]
    2428:	230a      	movs	r3, #10
    242a:	2201      	movs	r2, #1
    242c:	68f8      	ldr	r0, [r7, #12]
    242e:	f7ff fb9f 	bl	1b70 <mp_print_int>
    2432:	4602      	mov	r2, r0
    2434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2436:	4413      	add	r3, r2
    2438:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    243a:	e053      	b.n	24e4 <mp_vprintf+0x480>
            case 'x':
            case 'X': {
                char fmt_c = *fmt - 'X' + 'A';
    243c:	68bb      	ldr	r3, [r7, #8]
    243e:	781b      	ldrb	r3, [r3, #0]
    2440:	3b17      	subs	r3, #23
    2442:	76fb      	strb	r3, [r7, #27]
                mp_uint_t val;
                if (long_arg) {
    2444:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    2448:	2b00      	cmp	r3, #0
    244a:	d005      	beq.n	2458 <mp_vprintf+0x3f4>
                    val = va_arg(args, unsigned long int);
    244c:	687b      	ldr	r3, [r7, #4]
    244e:	1d1a      	adds	r2, r3, #4
    2450:	607a      	str	r2, [r7, #4]
    2452:	681b      	ldr	r3, [r3, #0]
    2454:	62fb      	str	r3, [r7, #44]	; 0x2c
    2456:	e004      	b.n	2462 <mp_vprintf+0x3fe>
                } else {
                    val = va_arg(args, unsigned int);
    2458:	687b      	ldr	r3, [r7, #4]
    245a:	1d1a      	adds	r2, r3, #4
    245c:	607a      	str	r2, [r7, #4]
    245e:	681b      	ldr	r3, [r3, #0]
    2460:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                chrs += mp_print_int(print, val, 0, 16, fmt_c, flags, fill, width);
    2462:	7efb      	ldrb	r3, [r7, #27]
    2464:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2466:	9203      	str	r2, [sp, #12]
    2468:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
    246c:	9202      	str	r2, [sp, #8]
    246e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2470:	9201      	str	r2, [sp, #4]
    2472:	9300      	str	r3, [sp, #0]
    2474:	2310      	movs	r3, #16
    2476:	2200      	movs	r2, #0
    2478:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    247a:	68f8      	ldr	r0, [r7, #12]
    247c:	f7ff fb78 	bl	1b70 <mp_print_int>
    2480:	4602      	mov	r2, r0
    2482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2484:	4413      	add	r3, r2
    2486:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2488:	e02c      	b.n	24e4 <mp_vprintf+0x480>
            }
            case 'p':
            case 'P': // don't bother to handle upcase for 'P'
                // Use unsigned long int to work on both ILP32 and LP64 systems
                chrs += mp_print_int(print, va_arg(args, unsigned long int), 0, 16, 'a', flags, fill, width);
    248a:	687b      	ldr	r3, [r7, #4]
    248c:	1d1a      	adds	r2, r3, #4
    248e:	607a      	str	r2, [r7, #4]
    2490:	6819      	ldr	r1, [r3, #0]
    2492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2494:	9303      	str	r3, [sp, #12]
    2496:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    249a:	9302      	str	r3, [sp, #8]
    249c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    249e:	9301      	str	r3, [sp, #4]
    24a0:	2361      	movs	r3, #97	; 0x61
    24a2:	9300      	str	r3, [sp, #0]
    24a4:	2310      	movs	r3, #16
    24a6:	2200      	movs	r2, #0
    24a8:	68f8      	ldr	r0, [r7, #12]
    24aa:	f7ff fb61 	bl	1b70 <mp_print_int>
    24ae:	4602      	mov	r2, r0
    24b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    24b2:	4413      	add	r3, r2
    24b4:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    24b6:	e015      	b.n	24e4 <mp_vprintf+0x480>
                assert(!"unsupported fmt char");
            }
            #endif
            default:
                // if it's not %% then it's an unsupported format character
                assert(*fmt == '%' || !"unsupported fmt char");
    24b8:	68bb      	ldr	r3, [r7, #8]
    24ba:	781b      	ldrb	r3, [r3, #0]
    24bc:	2b25      	cmp	r3, #37	; 0x25
    24be:	d006      	beq.n	24ce <mp_vprintf+0x46a>
    24c0:	4b11      	ldr	r3, [pc, #68]	; (2508 <mp_vprintf+0x4a4>)
    24c2:	4a12      	ldr	r2, [pc, #72]	; (250c <mp_vprintf+0x4a8>)
    24c4:	f240 2132 	movw	r1, #562	; 0x232
    24c8:	4811      	ldr	r0, [pc, #68]	; (2510 <mp_vprintf+0x4ac>)
    24ca:	f019 f95b 	bl	1b784 <__assert_func>
                print->print_strn(print->data, fmt, 1);
    24ce:	68fb      	ldr	r3, [r7, #12]
    24d0:	685b      	ldr	r3, [r3, #4]
    24d2:	68fa      	ldr	r2, [r7, #12]
    24d4:	6810      	ldr	r0, [r2, #0]
    24d6:	2201      	movs	r2, #1
    24d8:	68b9      	ldr	r1, [r7, #8]
    24da:	4798      	blx	r3
                chrs += 1;
    24dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    24de:	3301      	adds	r3, #1
    24e0:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    24e2:	bf00      	nop
        }
        ++fmt;
    24e4:	68bb      	ldr	r3, [r7, #8]
    24e6:	3301      	adds	r3, #1
    24e8:	60bb      	str	r3, [r7, #8]
    }
    24ea:	e5c3      	b.n	2074 <mp_vprintf+0x10>
            break;
    24ec:	bf00      	nop
    24ee:	e000      	b.n	24f2 <mp_vprintf+0x48e>
            break;
    24f0:	bf00      	nop
    return chrs;
    24f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    24f4:	4618      	mov	r0, r3
    24f6:	3748      	adds	r7, #72	; 0x48
    24f8:	46bd      	mov	sp, r7
    24fa:	bd80      	pop	{r7, pc}
    24fc:	0001f8d8 	.word	0x0001f8d8
    2500:	0001f8e0 	.word	0x0001f8e0
    2504:	0001f8e8 	.word	0x0001f8e8
    2508:	0001f8f0 	.word	0x0001f8f0
    250c:	0001f928 	.word	0x0001f928
    2510:	0001f8c0 	.word	0x0001f8c0

00002514 <unichar_isspace>:
}

#endif

// Be aware: These unichar_is* functions are actually ASCII-only!
bool unichar_isspace(unichar c) {
    2514:	b480      	push	{r7}
    2516:	b083      	sub	sp, #12
    2518:	af00      	add	r7, sp, #0
    251a:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_SPACE) != 0;
    251c:	687b      	ldr	r3, [r7, #4]
    251e:	2b7f      	cmp	r3, #127	; 0x7f
    2520:	d809      	bhi.n	2536 <unichar_isspace+0x22>
    2522:	4a0a      	ldr	r2, [pc, #40]	; (254c <unichar_isspace+0x38>)
    2524:	687b      	ldr	r3, [r7, #4]
    2526:	4413      	add	r3, r2
    2528:	781b      	ldrb	r3, [r3, #0]
    252a:	f003 0302 	and.w	r3, r3, #2
    252e:	2b00      	cmp	r3, #0
    2530:	d001      	beq.n	2536 <unichar_isspace+0x22>
    2532:	2301      	movs	r3, #1
    2534:	e000      	b.n	2538 <unichar_isspace+0x24>
    2536:	2300      	movs	r3, #0
    2538:	f003 0301 	and.w	r3, r3, #1
    253c:	b2db      	uxtb	r3, r3
}
    253e:	4618      	mov	r0, r3
    2540:	370c      	adds	r7, #12
    2542:	46bd      	mov	sp, r7
    2544:	f85d 7b04 	ldr.w	r7, [sp], #4
    2548:	4770      	bx	lr
    254a:	bf00      	nop
    254c:	0001f934 	.word	0x0001f934

00002550 <unichar_isalpha>:

bool unichar_isalpha(unichar c) {
    2550:	b480      	push	{r7}
    2552:	b083      	sub	sp, #12
    2554:	af00      	add	r7, sp, #0
    2556:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_ALPHA) != 0;
    2558:	687b      	ldr	r3, [r7, #4]
    255a:	2b7f      	cmp	r3, #127	; 0x7f
    255c:	d809      	bhi.n	2572 <unichar_isalpha+0x22>
    255e:	4a0a      	ldr	r2, [pc, #40]	; (2588 <unichar_isalpha+0x38>)
    2560:	687b      	ldr	r3, [r7, #4]
    2562:	4413      	add	r3, r2
    2564:	781b      	ldrb	r3, [r3, #0]
    2566:	f003 0308 	and.w	r3, r3, #8
    256a:	2b00      	cmp	r3, #0
    256c:	d001      	beq.n	2572 <unichar_isalpha+0x22>
    256e:	2301      	movs	r3, #1
    2570:	e000      	b.n	2574 <unichar_isalpha+0x24>
    2572:	2300      	movs	r3, #0
    2574:	f003 0301 	and.w	r3, r3, #1
    2578:	b2db      	uxtb	r3, r3
}
    257a:	4618      	mov	r0, r3
    257c:	370c      	adds	r7, #12
    257e:	46bd      	mov	sp, r7
    2580:	f85d 7b04 	ldr.w	r7, [sp], #4
    2584:	4770      	bx	lr
    2586:	bf00      	nop
    2588:	0001f934 	.word	0x0001f934

0000258c <unichar_isdigit>:
bool unichar_isprint(unichar c) {
    return c < 128 && (attr[c] & FL_PRINT) != 0;
}
*/

bool unichar_isdigit(unichar c) {
    258c:	b480      	push	{r7}
    258e:	b083      	sub	sp, #12
    2590:	af00      	add	r7, sp, #0
    2592:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_DIGIT) != 0;
    2594:	687b      	ldr	r3, [r7, #4]
    2596:	2b7f      	cmp	r3, #127	; 0x7f
    2598:	d809      	bhi.n	25ae <unichar_isdigit+0x22>
    259a:	4a0a      	ldr	r2, [pc, #40]	; (25c4 <unichar_isdigit+0x38>)
    259c:	687b      	ldr	r3, [r7, #4]
    259e:	4413      	add	r3, r2
    25a0:	781b      	ldrb	r3, [r3, #0]
    25a2:	f003 0304 	and.w	r3, r3, #4
    25a6:	2b00      	cmp	r3, #0
    25a8:	d001      	beq.n	25ae <unichar_isdigit+0x22>
    25aa:	2301      	movs	r3, #1
    25ac:	e000      	b.n	25b0 <unichar_isdigit+0x24>
    25ae:	2300      	movs	r3, #0
    25b0:	f003 0301 	and.w	r3, r3, #1
    25b4:	b2db      	uxtb	r3, r3
}
    25b6:	4618      	mov	r0, r3
    25b8:	370c      	adds	r7, #12
    25ba:	46bd      	mov	sp, r7
    25bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    25c0:	4770      	bx	lr
    25c2:	bf00      	nop
    25c4:	0001f934 	.word	0x0001f934

000025c8 <unichar_isxdigit>:

bool unichar_isxdigit(unichar c) {
    25c8:	b480      	push	{r7}
    25ca:	b083      	sub	sp, #12
    25cc:	af00      	add	r7, sp, #0
    25ce:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_XDIGIT) != 0;
    25d0:	687b      	ldr	r3, [r7, #4]
    25d2:	2b7f      	cmp	r3, #127	; 0x7f
    25d4:	d809      	bhi.n	25ea <unichar_isxdigit+0x22>
    25d6:	4a0a      	ldr	r2, [pc, #40]	; (2600 <unichar_isxdigit+0x38>)
    25d8:	687b      	ldr	r3, [r7, #4]
    25da:	4413      	add	r3, r2
    25dc:	781b      	ldrb	r3, [r3, #0]
    25de:	f003 0340 	and.w	r3, r3, #64	; 0x40
    25e2:	2b00      	cmp	r3, #0
    25e4:	d001      	beq.n	25ea <unichar_isxdigit+0x22>
    25e6:	2301      	movs	r3, #1
    25e8:	e000      	b.n	25ec <unichar_isxdigit+0x24>
    25ea:	2300      	movs	r3, #0
    25ec:	f003 0301 	and.w	r3, r3, #1
    25f0:	b2db      	uxtb	r3, r3
}
    25f2:	4618      	mov	r0, r3
    25f4:	370c      	adds	r7, #12
    25f6:	46bd      	mov	sp, r7
    25f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    25fc:	4770      	bx	lr
    25fe:	bf00      	nop
    2600:	0001f934 	.word	0x0001f934

00002604 <unichar_isident>:

bool unichar_isident(unichar c) {
    2604:	b480      	push	{r7}
    2606:	b083      	sub	sp, #12
    2608:	af00      	add	r7, sp, #0
    260a:	6078      	str	r0, [r7, #4]
    return c < 128 && ((attr[c] & (FL_ALPHA | FL_DIGIT)) != 0 || c == '_');
    260c:	687b      	ldr	r3, [r7, #4]
    260e:	2b7f      	cmp	r3, #127	; 0x7f
    2610:	d80c      	bhi.n	262c <unichar_isident+0x28>
    2612:	4a0b      	ldr	r2, [pc, #44]	; (2640 <unichar_isident+0x3c>)
    2614:	687b      	ldr	r3, [r7, #4]
    2616:	4413      	add	r3, r2
    2618:	781b      	ldrb	r3, [r3, #0]
    261a:	f003 030c 	and.w	r3, r3, #12
    261e:	2b00      	cmp	r3, #0
    2620:	d102      	bne.n	2628 <unichar_isident+0x24>
    2622:	687b      	ldr	r3, [r7, #4]
    2624:	2b5f      	cmp	r3, #95	; 0x5f
    2626:	d101      	bne.n	262c <unichar_isident+0x28>
    2628:	2301      	movs	r3, #1
    262a:	e000      	b.n	262e <unichar_isident+0x2a>
    262c:	2300      	movs	r3, #0
    262e:	f003 0301 	and.w	r3, r3, #1
    2632:	b2db      	uxtb	r3, r3
}
    2634:	4618      	mov	r0, r3
    2636:	370c      	adds	r7, #12
    2638:	46bd      	mov	sp, r7
    263a:	f85d 7b04 	ldr.w	r7, [sp], #4
    263e:	4770      	bx	lr
    2640:	0001f934 	.word	0x0001f934

00002644 <unichar_isupper>:

bool unichar_isupper(unichar c) {
    2644:	b480      	push	{r7}
    2646:	b083      	sub	sp, #12
    2648:	af00      	add	r7, sp, #0
    264a:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_UPPER) != 0;
    264c:	687b      	ldr	r3, [r7, #4]
    264e:	2b7f      	cmp	r3, #127	; 0x7f
    2650:	d809      	bhi.n	2666 <unichar_isupper+0x22>
    2652:	4a0a      	ldr	r2, [pc, #40]	; (267c <unichar_isupper+0x38>)
    2654:	687b      	ldr	r3, [r7, #4]
    2656:	4413      	add	r3, r2
    2658:	781b      	ldrb	r3, [r3, #0]
    265a:	f003 0310 	and.w	r3, r3, #16
    265e:	2b00      	cmp	r3, #0
    2660:	d001      	beq.n	2666 <unichar_isupper+0x22>
    2662:	2301      	movs	r3, #1
    2664:	e000      	b.n	2668 <unichar_isupper+0x24>
    2666:	2300      	movs	r3, #0
    2668:	f003 0301 	and.w	r3, r3, #1
    266c:	b2db      	uxtb	r3, r3
}
    266e:	4618      	mov	r0, r3
    2670:	370c      	adds	r7, #12
    2672:	46bd      	mov	sp, r7
    2674:	f85d 7b04 	ldr.w	r7, [sp], #4
    2678:	4770      	bx	lr
    267a:	bf00      	nop
    267c:	0001f934 	.word	0x0001f934

00002680 <unichar_islower>:

bool unichar_islower(unichar c) {
    2680:	b480      	push	{r7}
    2682:	b083      	sub	sp, #12
    2684:	af00      	add	r7, sp, #0
    2686:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_LOWER) != 0;
    2688:	687b      	ldr	r3, [r7, #4]
    268a:	2b7f      	cmp	r3, #127	; 0x7f
    268c:	d809      	bhi.n	26a2 <unichar_islower+0x22>
    268e:	4a0a      	ldr	r2, [pc, #40]	; (26b8 <unichar_islower+0x38>)
    2690:	687b      	ldr	r3, [r7, #4]
    2692:	4413      	add	r3, r2
    2694:	781b      	ldrb	r3, [r3, #0]
    2696:	f003 0320 	and.w	r3, r3, #32
    269a:	2b00      	cmp	r3, #0
    269c:	d001      	beq.n	26a2 <unichar_islower+0x22>
    269e:	2301      	movs	r3, #1
    26a0:	e000      	b.n	26a4 <unichar_islower+0x24>
    26a2:	2300      	movs	r3, #0
    26a4:	f003 0301 	and.w	r3, r3, #1
    26a8:	b2db      	uxtb	r3, r3
}
    26aa:	4618      	mov	r0, r3
    26ac:	370c      	adds	r7, #12
    26ae:	46bd      	mov	sp, r7
    26b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    26b4:	4770      	bx	lr
    26b6:	bf00      	nop
    26b8:	0001f934 	.word	0x0001f934

000026bc <unichar_tolower>:

unichar unichar_tolower(unichar c) {
    26bc:	b580      	push	{r7, lr}
    26be:	b082      	sub	sp, #8
    26c0:	af00      	add	r7, sp, #0
    26c2:	6078      	str	r0, [r7, #4]
    if (unichar_isupper(c)) {
    26c4:	6878      	ldr	r0, [r7, #4]
    26c6:	f7ff ffbd 	bl	2644 <unichar_isupper>
    26ca:	4603      	mov	r3, r0
    26cc:	2b00      	cmp	r3, #0
    26ce:	d002      	beq.n	26d6 <unichar_tolower+0x1a>
        return c + 0x20;
    26d0:	687b      	ldr	r3, [r7, #4]
    26d2:	3320      	adds	r3, #32
    26d4:	e000      	b.n	26d8 <unichar_tolower+0x1c>
    }
    return c;
    26d6:	687b      	ldr	r3, [r7, #4]
}
    26d8:	4618      	mov	r0, r3
    26da:	3708      	adds	r7, #8
    26dc:	46bd      	mov	sp, r7
    26de:	bd80      	pop	{r7, pc}

000026e0 <unichar_toupper>:

unichar unichar_toupper(unichar c) {
    26e0:	b580      	push	{r7, lr}
    26e2:	b082      	sub	sp, #8
    26e4:	af00      	add	r7, sp, #0
    26e6:	6078      	str	r0, [r7, #4]
    if (unichar_islower(c)) {
    26e8:	6878      	ldr	r0, [r7, #4]
    26ea:	f7ff ffc9 	bl	2680 <unichar_islower>
    26ee:	4603      	mov	r3, r0
    26f0:	2b00      	cmp	r3, #0
    26f2:	d002      	beq.n	26fa <unichar_toupper+0x1a>
        return c - 0x20;
    26f4:	687b      	ldr	r3, [r7, #4]
    26f6:	3b20      	subs	r3, #32
    26f8:	e000      	b.n	26fc <unichar_toupper+0x1c>
    }
    return c;
    26fa:	687b      	ldr	r3, [r7, #4]
}
    26fc:	4618      	mov	r0, r3
    26fe:	3708      	adds	r7, #8
    2700:	46bd      	mov	sp, r7
    2702:	bd80      	pop	{r7, pc}

00002704 <unichar_xdigit_value>:

mp_uint_t unichar_xdigit_value(unichar c) {
    2704:	b480      	push	{r7}
    2706:	b085      	sub	sp, #20
    2708:	af00      	add	r7, sp, #0
    270a:	6078      	str	r0, [r7, #4]
    // c is assumed to be hex digit
    mp_uint_t n = c - '0';
    270c:	687b      	ldr	r3, [r7, #4]
    270e:	3b30      	subs	r3, #48	; 0x30
    2710:	60fb      	str	r3, [r7, #12]
    if (n > 9) {
    2712:	68fb      	ldr	r3, [r7, #12]
    2714:	2b09      	cmp	r3, #9
    2716:	d906      	bls.n	2726 <unichar_xdigit_value+0x22>
        n &= ~('a' - 'A');
    2718:	68fb      	ldr	r3, [r7, #12]
    271a:	f023 0320 	bic.w	r3, r3, #32
    271e:	60fb      	str	r3, [r7, #12]
        n -= ('A' - ('9' + 1));
    2720:	68fb      	ldr	r3, [r7, #12]
    2722:	3b07      	subs	r3, #7
    2724:	60fb      	str	r3, [r7, #12]
    }
    return n;
    2726:	68fb      	ldr	r3, [r7, #12]
}
    2728:	4618      	mov	r0, r3
    272a:	3714      	adds	r7, #20
    272c:	46bd      	mov	sp, r7
    272e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2732:	4770      	bx	lr

00002734 <mp_reader_mem_readbyte>:
    const byte *beg;
    const byte *cur;
    const byte *end;
} mp_reader_mem_t;

STATIC mp_uint_t mp_reader_mem_readbyte(void *data) {
    2734:	b480      	push	{r7}
    2736:	b085      	sub	sp, #20
    2738:	af00      	add	r7, sp, #0
    273a:	6078      	str	r0, [r7, #4]
    mp_reader_mem_t *reader = (mp_reader_mem_t*)data;
    273c:	687b      	ldr	r3, [r7, #4]
    273e:	60fb      	str	r3, [r7, #12]
    if (reader->cur < reader->end) {
    2740:	68fb      	ldr	r3, [r7, #12]
    2742:	689a      	ldr	r2, [r3, #8]
    2744:	68fb      	ldr	r3, [r7, #12]
    2746:	68db      	ldr	r3, [r3, #12]
    2748:	429a      	cmp	r2, r3
    274a:	d206      	bcs.n	275a <mp_reader_mem_readbyte+0x26>
        return *reader->cur++;
    274c:	68fb      	ldr	r3, [r7, #12]
    274e:	689b      	ldr	r3, [r3, #8]
    2750:	1c59      	adds	r1, r3, #1
    2752:	68fa      	ldr	r2, [r7, #12]
    2754:	6091      	str	r1, [r2, #8]
    2756:	781b      	ldrb	r3, [r3, #0]
    2758:	e001      	b.n	275e <mp_reader_mem_readbyte+0x2a>
    } else {
        return MP_READER_EOF;
    275a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
    275e:	4618      	mov	r0, r3
    2760:	3714      	adds	r7, #20
    2762:	46bd      	mov	sp, r7
    2764:	f85d 7b04 	ldr.w	r7, [sp], #4
    2768:	4770      	bx	lr
    276a:	bf00      	nop

0000276c <mp_reader_mem_close>:

STATIC void mp_reader_mem_close(void *data) {
    276c:	b580      	push	{r7, lr}
    276e:	b084      	sub	sp, #16
    2770:	af00      	add	r7, sp, #0
    2772:	6078      	str	r0, [r7, #4]
    mp_reader_mem_t *reader = (mp_reader_mem_t*)data;
    2774:	687b      	ldr	r3, [r7, #4]
    2776:	60fb      	str	r3, [r7, #12]
    if (reader->free_len > 0) {
    2778:	68fb      	ldr	r3, [r7, #12]
    277a:	681b      	ldr	r3, [r3, #0]
    277c:	2b00      	cmp	r3, #0
    277e:	d004      	beq.n	278a <mp_reader_mem_close+0x1e>
        m_del(char, (char*)reader->beg, reader->free_len);
    2780:	68fb      	ldr	r3, [r7, #12]
    2782:	685b      	ldr	r3, [r3, #4]
    2784:	4618      	mov	r0, r3
    2786:	f7fd fe43 	bl	410 <m_free>
    }
    m_del_obj(mp_reader_mem_t, reader);
    278a:	68f8      	ldr	r0, [r7, #12]
    278c:	f7fd fe40 	bl	410 <m_free>
}
    2790:	bf00      	nop
    2792:	3710      	adds	r7, #16
    2794:	46bd      	mov	sp, r7
    2796:	bd80      	pop	{r7, pc}

00002798 <mp_reader_new_mem>:

void mp_reader_new_mem(mp_reader_t *reader, const byte *buf, size_t len, size_t free_len) {
    2798:	b580      	push	{r7, lr}
    279a:	b086      	sub	sp, #24
    279c:	af00      	add	r7, sp, #0
    279e:	60f8      	str	r0, [r7, #12]
    27a0:	60b9      	str	r1, [r7, #8]
    27a2:	607a      	str	r2, [r7, #4]
    27a4:	603b      	str	r3, [r7, #0]
    mp_reader_mem_t *rm = m_new_obj(mp_reader_mem_t);
    27a6:	2010      	movs	r0, #16
    27a8:	f7fd fdb8 	bl	31c <m_malloc>
    27ac:	6178      	str	r0, [r7, #20]
    rm->free_len = free_len;
    27ae:	697b      	ldr	r3, [r7, #20]
    27b0:	683a      	ldr	r2, [r7, #0]
    27b2:	601a      	str	r2, [r3, #0]
    rm->beg = buf;
    27b4:	697b      	ldr	r3, [r7, #20]
    27b6:	68ba      	ldr	r2, [r7, #8]
    27b8:	605a      	str	r2, [r3, #4]
    rm->cur = buf;
    27ba:	697b      	ldr	r3, [r7, #20]
    27bc:	68ba      	ldr	r2, [r7, #8]
    27be:	609a      	str	r2, [r3, #8]
    rm->end = buf + len;
    27c0:	68ba      	ldr	r2, [r7, #8]
    27c2:	687b      	ldr	r3, [r7, #4]
    27c4:	441a      	add	r2, r3
    27c6:	697b      	ldr	r3, [r7, #20]
    27c8:	60da      	str	r2, [r3, #12]
    reader->data = rm;
    27ca:	68fb      	ldr	r3, [r7, #12]
    27cc:	697a      	ldr	r2, [r7, #20]
    27ce:	601a      	str	r2, [r3, #0]
    reader->readbyte = mp_reader_mem_readbyte;
    27d0:	68fb      	ldr	r3, [r7, #12]
    27d2:	4a04      	ldr	r2, [pc, #16]	; (27e4 <mp_reader_new_mem+0x4c>)
    27d4:	605a      	str	r2, [r3, #4]
    reader->close = mp_reader_mem_close;
    27d6:	68fb      	ldr	r3, [r7, #12]
    27d8:	4a03      	ldr	r2, [pc, #12]	; (27e8 <mp_reader_new_mem+0x50>)
    27da:	609a      	str	r2, [r3, #8]
}
    27dc:	bf00      	nop
    27de:	3718      	adds	r7, #24
    27e0:	46bd      	mov	sp, r7
    27e2:	bd80      	pop	{r7, pc}
    27e4:	00002735 	.word	0x00002735
    27e8:	0000276d 	.word	0x0000276d

000027ec <vstr_reset>:
struct _mp_print_t;
void vstr_init_print(vstr_t *vstr, size_t alloc, struct _mp_print_t *print);
void vstr_clear(vstr_t *vstr);
vstr_t *vstr_new(size_t alloc);
void vstr_free(vstr_t *vstr);
static inline void vstr_reset(vstr_t *vstr) { vstr->len = 0; }
    27ec:	b480      	push	{r7}
    27ee:	b083      	sub	sp, #12
    27f0:	af00      	add	r7, sp, #0
    27f2:	6078      	str	r0, [r7, #4]
    27f4:	687b      	ldr	r3, [r7, #4]
    27f6:	2200      	movs	r2, #0
    27f8:	605a      	str	r2, [r3, #4]
    27fa:	bf00      	nop
    27fc:	370c      	adds	r7, #12
    27fe:	46bd      	mov	sp, r7
    2800:	f85d 7b04 	ldr.w	r7, [sp], #4
    2804:	4770      	bx	lr
    2806:	bf00      	nop

00002808 <is_end>:
// don't know if that's intentional or not, but we don't allow it

#define MP_LEXER_EOF ((unichar)MP_READER_EOF)
#define CUR_CHAR(lex) ((lex)->chr0)

STATIC bool is_end(mp_lexer_t *lex) {
    2808:	b480      	push	{r7}
    280a:	b083      	sub	sp, #12
    280c:	af00      	add	r7, sp, #0
    280e:	6078      	str	r0, [r7, #4]
    return lex->chr0 == MP_LEXER_EOF;
    2810:	687b      	ldr	r3, [r7, #4]
    2812:	691b      	ldr	r3, [r3, #16]
    2814:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2818:	bf0c      	ite	eq
    281a:	2301      	moveq	r3, #1
    281c:	2300      	movne	r3, #0
    281e:	b2db      	uxtb	r3, r3
}
    2820:	4618      	mov	r0, r3
    2822:	370c      	adds	r7, #12
    2824:	46bd      	mov	sp, r7
    2826:	f85d 7b04 	ldr.w	r7, [sp], #4
    282a:	4770      	bx	lr

0000282c <is_physical_newline>:

STATIC bool is_physical_newline(mp_lexer_t *lex) {
    282c:	b480      	push	{r7}
    282e:	b083      	sub	sp, #12
    2830:	af00      	add	r7, sp, #0
    2832:	6078      	str	r0, [r7, #4]
    return lex->chr0 == '\n';
    2834:	687b      	ldr	r3, [r7, #4]
    2836:	691b      	ldr	r3, [r3, #16]
    2838:	2b0a      	cmp	r3, #10
    283a:	bf0c      	ite	eq
    283c:	2301      	moveq	r3, #1
    283e:	2300      	movne	r3, #0
    2840:	b2db      	uxtb	r3, r3
}
    2842:	4618      	mov	r0, r3
    2844:	370c      	adds	r7, #12
    2846:	46bd      	mov	sp, r7
    2848:	f85d 7b04 	ldr.w	r7, [sp], #4
    284c:	4770      	bx	lr
    284e:	bf00      	nop

00002850 <is_char>:

STATIC bool is_char(mp_lexer_t *lex, byte c) {
    2850:	b480      	push	{r7}
    2852:	b083      	sub	sp, #12
    2854:	af00      	add	r7, sp, #0
    2856:	6078      	str	r0, [r7, #4]
    2858:	460b      	mov	r3, r1
    285a:	70fb      	strb	r3, [r7, #3]
    return lex->chr0 == c;
    285c:	687b      	ldr	r3, [r7, #4]
    285e:	691a      	ldr	r2, [r3, #16]
    2860:	78fb      	ldrb	r3, [r7, #3]
    2862:	429a      	cmp	r2, r3
    2864:	bf0c      	ite	eq
    2866:	2301      	moveq	r3, #1
    2868:	2300      	movne	r3, #0
    286a:	b2db      	uxtb	r3, r3
}
    286c:	4618      	mov	r0, r3
    286e:	370c      	adds	r7, #12
    2870:	46bd      	mov	sp, r7
    2872:	f85d 7b04 	ldr.w	r7, [sp], #4
    2876:	4770      	bx	lr

00002878 <is_char_or>:

STATIC bool is_char_or(mp_lexer_t *lex, byte c1, byte c2) {
    2878:	b480      	push	{r7}
    287a:	b083      	sub	sp, #12
    287c:	af00      	add	r7, sp, #0
    287e:	6078      	str	r0, [r7, #4]
    2880:	460b      	mov	r3, r1
    2882:	70fb      	strb	r3, [r7, #3]
    2884:	4613      	mov	r3, r2
    2886:	70bb      	strb	r3, [r7, #2]
    return lex->chr0 == c1 || lex->chr0 == c2;
    2888:	687b      	ldr	r3, [r7, #4]
    288a:	691a      	ldr	r2, [r3, #16]
    288c:	78fb      	ldrb	r3, [r7, #3]
    288e:	429a      	cmp	r2, r3
    2890:	d004      	beq.n	289c <is_char_or+0x24>
    2892:	687b      	ldr	r3, [r7, #4]
    2894:	691a      	ldr	r2, [r3, #16]
    2896:	78bb      	ldrb	r3, [r7, #2]
    2898:	429a      	cmp	r2, r3
    289a:	d101      	bne.n	28a0 <is_char_or+0x28>
    289c:	2301      	movs	r3, #1
    289e:	e000      	b.n	28a2 <is_char_or+0x2a>
    28a0:	2300      	movs	r3, #0
    28a2:	f003 0301 	and.w	r3, r3, #1
    28a6:	b2db      	uxtb	r3, r3
}
    28a8:	4618      	mov	r0, r3
    28aa:	370c      	adds	r7, #12
    28ac:	46bd      	mov	sp, r7
    28ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    28b2:	4770      	bx	lr

000028b4 <is_char_or3>:

STATIC bool is_char_or3(mp_lexer_t *lex, byte c1, byte c2, byte c3) {
    28b4:	b480      	push	{r7}
    28b6:	b083      	sub	sp, #12
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
    28bc:	4608      	mov	r0, r1
    28be:	4611      	mov	r1, r2
    28c0:	461a      	mov	r2, r3
    28c2:	4603      	mov	r3, r0
    28c4:	70fb      	strb	r3, [r7, #3]
    28c6:	460b      	mov	r3, r1
    28c8:	70bb      	strb	r3, [r7, #2]
    28ca:	4613      	mov	r3, r2
    28cc:	707b      	strb	r3, [r7, #1]
    return lex->chr0 == c1 || lex->chr0 == c2 || lex->chr0 == c3;
    28ce:	687b      	ldr	r3, [r7, #4]
    28d0:	691a      	ldr	r2, [r3, #16]
    28d2:	78fb      	ldrb	r3, [r7, #3]
    28d4:	429a      	cmp	r2, r3
    28d6:	d009      	beq.n	28ec <is_char_or3+0x38>
    28d8:	687b      	ldr	r3, [r7, #4]
    28da:	691a      	ldr	r2, [r3, #16]
    28dc:	78bb      	ldrb	r3, [r7, #2]
    28de:	429a      	cmp	r2, r3
    28e0:	d004      	beq.n	28ec <is_char_or3+0x38>
    28e2:	687b      	ldr	r3, [r7, #4]
    28e4:	691a      	ldr	r2, [r3, #16]
    28e6:	787b      	ldrb	r3, [r7, #1]
    28e8:	429a      	cmp	r2, r3
    28ea:	d101      	bne.n	28f0 <is_char_or3+0x3c>
    28ec:	2301      	movs	r3, #1
    28ee:	e000      	b.n	28f2 <is_char_or3+0x3e>
    28f0:	2300      	movs	r3, #0
    28f2:	f003 0301 	and.w	r3, r3, #1
    28f6:	b2db      	uxtb	r3, r3
}
    28f8:	4618      	mov	r0, r3
    28fa:	370c      	adds	r7, #12
    28fc:	46bd      	mov	sp, r7
    28fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    2902:	4770      	bx	lr

00002904 <is_char_following>:

STATIC bool is_char_following(mp_lexer_t *lex, byte c) {
    2904:	b480      	push	{r7}
    2906:	b083      	sub	sp, #12
    2908:	af00      	add	r7, sp, #0
    290a:	6078      	str	r0, [r7, #4]
    290c:	460b      	mov	r3, r1
    290e:	70fb      	strb	r3, [r7, #3]
    return lex->chr1 == c;
    2910:	687b      	ldr	r3, [r7, #4]
    2912:	695a      	ldr	r2, [r3, #20]
    2914:	78fb      	ldrb	r3, [r7, #3]
    2916:	429a      	cmp	r2, r3
    2918:	bf0c      	ite	eq
    291a:	2301      	moveq	r3, #1
    291c:	2300      	movne	r3, #0
    291e:	b2db      	uxtb	r3, r3
}
    2920:	4618      	mov	r0, r3
    2922:	370c      	adds	r7, #12
    2924:	46bd      	mov	sp, r7
    2926:	f85d 7b04 	ldr.w	r7, [sp], #4
    292a:	4770      	bx	lr

0000292c <is_char_following_or>:

STATIC bool is_char_following_or(mp_lexer_t *lex, byte c1, byte c2) {
    292c:	b480      	push	{r7}
    292e:	b083      	sub	sp, #12
    2930:	af00      	add	r7, sp, #0
    2932:	6078      	str	r0, [r7, #4]
    2934:	460b      	mov	r3, r1
    2936:	70fb      	strb	r3, [r7, #3]
    2938:	4613      	mov	r3, r2
    293a:	70bb      	strb	r3, [r7, #2]
    return lex->chr1 == c1 || lex->chr1 == c2;
    293c:	687b      	ldr	r3, [r7, #4]
    293e:	695a      	ldr	r2, [r3, #20]
    2940:	78fb      	ldrb	r3, [r7, #3]
    2942:	429a      	cmp	r2, r3
    2944:	d004      	beq.n	2950 <is_char_following_or+0x24>
    2946:	687b      	ldr	r3, [r7, #4]
    2948:	695a      	ldr	r2, [r3, #20]
    294a:	78bb      	ldrb	r3, [r7, #2]
    294c:	429a      	cmp	r2, r3
    294e:	d101      	bne.n	2954 <is_char_following_or+0x28>
    2950:	2301      	movs	r3, #1
    2952:	e000      	b.n	2956 <is_char_following_or+0x2a>
    2954:	2300      	movs	r3, #0
    2956:	f003 0301 	and.w	r3, r3, #1
    295a:	b2db      	uxtb	r3, r3
}
    295c:	4618      	mov	r0, r3
    295e:	370c      	adds	r7, #12
    2960:	46bd      	mov	sp, r7
    2962:	f85d 7b04 	ldr.w	r7, [sp], #4
    2966:	4770      	bx	lr

00002968 <is_char_following_following_or>:

STATIC bool is_char_following_following_or(mp_lexer_t *lex, byte c1, byte c2) {
    2968:	b480      	push	{r7}
    296a:	b083      	sub	sp, #12
    296c:	af00      	add	r7, sp, #0
    296e:	6078      	str	r0, [r7, #4]
    2970:	460b      	mov	r3, r1
    2972:	70fb      	strb	r3, [r7, #3]
    2974:	4613      	mov	r3, r2
    2976:	70bb      	strb	r3, [r7, #2]
    return lex->chr2 == c1 || lex->chr2 == c2;
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	699a      	ldr	r2, [r3, #24]
    297c:	78fb      	ldrb	r3, [r7, #3]
    297e:	429a      	cmp	r2, r3
    2980:	d004      	beq.n	298c <is_char_following_following_or+0x24>
    2982:	687b      	ldr	r3, [r7, #4]
    2984:	699a      	ldr	r2, [r3, #24]
    2986:	78bb      	ldrb	r3, [r7, #2]
    2988:	429a      	cmp	r2, r3
    298a:	d101      	bne.n	2990 <is_char_following_following_or+0x28>
    298c:	2301      	movs	r3, #1
    298e:	e000      	b.n	2992 <is_char_following_following_or+0x2a>
    2990:	2300      	movs	r3, #0
    2992:	f003 0301 	and.w	r3, r3, #1
    2996:	b2db      	uxtb	r3, r3
}
    2998:	4618      	mov	r0, r3
    299a:	370c      	adds	r7, #12
    299c:	46bd      	mov	sp, r7
    299e:	f85d 7b04 	ldr.w	r7, [sp], #4
    29a2:	4770      	bx	lr

000029a4 <is_char_and>:

STATIC bool is_char_and(mp_lexer_t *lex, byte c1, byte c2) {
    29a4:	b480      	push	{r7}
    29a6:	b083      	sub	sp, #12
    29a8:	af00      	add	r7, sp, #0
    29aa:	6078      	str	r0, [r7, #4]
    29ac:	460b      	mov	r3, r1
    29ae:	70fb      	strb	r3, [r7, #3]
    29b0:	4613      	mov	r3, r2
    29b2:	70bb      	strb	r3, [r7, #2]
    return lex->chr0 == c1 && lex->chr1 == c2;
    29b4:	687b      	ldr	r3, [r7, #4]
    29b6:	691a      	ldr	r2, [r3, #16]
    29b8:	78fb      	ldrb	r3, [r7, #3]
    29ba:	429a      	cmp	r2, r3
    29bc:	d106      	bne.n	29cc <is_char_and+0x28>
    29be:	687b      	ldr	r3, [r7, #4]
    29c0:	695a      	ldr	r2, [r3, #20]
    29c2:	78bb      	ldrb	r3, [r7, #2]
    29c4:	429a      	cmp	r2, r3
    29c6:	d101      	bne.n	29cc <is_char_and+0x28>
    29c8:	2301      	movs	r3, #1
    29ca:	e000      	b.n	29ce <is_char_and+0x2a>
    29cc:	2300      	movs	r3, #0
    29ce:	f003 0301 	and.w	r3, r3, #1
    29d2:	b2db      	uxtb	r3, r3
}
    29d4:	4618      	mov	r0, r3
    29d6:	370c      	adds	r7, #12
    29d8:	46bd      	mov	sp, r7
    29da:	f85d 7b04 	ldr.w	r7, [sp], #4
    29de:	4770      	bx	lr

000029e0 <is_whitespace>:

STATIC bool is_whitespace(mp_lexer_t *lex) {
    29e0:	b580      	push	{r7, lr}
    29e2:	b082      	sub	sp, #8
    29e4:	af00      	add	r7, sp, #0
    29e6:	6078      	str	r0, [r7, #4]
    return unichar_isspace(lex->chr0);
    29e8:	687b      	ldr	r3, [r7, #4]
    29ea:	691b      	ldr	r3, [r3, #16]
    29ec:	4618      	mov	r0, r3
    29ee:	f7ff fd91 	bl	2514 <unichar_isspace>
    29f2:	4603      	mov	r3, r0
}
    29f4:	4618      	mov	r0, r3
    29f6:	3708      	adds	r7, #8
    29f8:	46bd      	mov	sp, r7
    29fa:	bd80      	pop	{r7, pc}

000029fc <is_letter>:

STATIC bool is_letter(mp_lexer_t *lex) {
    29fc:	b580      	push	{r7, lr}
    29fe:	b082      	sub	sp, #8
    2a00:	af00      	add	r7, sp, #0
    2a02:	6078      	str	r0, [r7, #4]
    return unichar_isalpha(lex->chr0);
    2a04:	687b      	ldr	r3, [r7, #4]
    2a06:	691b      	ldr	r3, [r3, #16]
    2a08:	4618      	mov	r0, r3
    2a0a:	f7ff fda1 	bl	2550 <unichar_isalpha>
    2a0e:	4603      	mov	r3, r0
}
    2a10:	4618      	mov	r0, r3
    2a12:	3708      	adds	r7, #8
    2a14:	46bd      	mov	sp, r7
    2a16:	bd80      	pop	{r7, pc}

00002a18 <is_digit>:

STATIC bool is_digit(mp_lexer_t *lex) {
    2a18:	b580      	push	{r7, lr}
    2a1a:	b082      	sub	sp, #8
    2a1c:	af00      	add	r7, sp, #0
    2a1e:	6078      	str	r0, [r7, #4]
    return unichar_isdigit(lex->chr0);
    2a20:	687b      	ldr	r3, [r7, #4]
    2a22:	691b      	ldr	r3, [r3, #16]
    2a24:	4618      	mov	r0, r3
    2a26:	f7ff fdb1 	bl	258c <unichar_isdigit>
    2a2a:	4603      	mov	r3, r0
}
    2a2c:	4618      	mov	r0, r3
    2a2e:	3708      	adds	r7, #8
    2a30:	46bd      	mov	sp, r7
    2a32:	bd80      	pop	{r7, pc}

00002a34 <is_following_digit>:

STATIC bool is_following_digit(mp_lexer_t *lex) {
    2a34:	b580      	push	{r7, lr}
    2a36:	b082      	sub	sp, #8
    2a38:	af00      	add	r7, sp, #0
    2a3a:	6078      	str	r0, [r7, #4]
    return unichar_isdigit(lex->chr1);
    2a3c:	687b      	ldr	r3, [r7, #4]
    2a3e:	695b      	ldr	r3, [r3, #20]
    2a40:	4618      	mov	r0, r3
    2a42:	f7ff fda3 	bl	258c <unichar_isdigit>
    2a46:	4603      	mov	r3, r0
}
    2a48:	4618      	mov	r0, r3
    2a4a:	3708      	adds	r7, #8
    2a4c:	46bd      	mov	sp, r7
    2a4e:	bd80      	pop	{r7, pc}

00002a50 <is_following_base_char>:

STATIC bool is_following_base_char(mp_lexer_t *lex) {
    2a50:	b480      	push	{r7}
    2a52:	b085      	sub	sp, #20
    2a54:	af00      	add	r7, sp, #0
    2a56:	6078      	str	r0, [r7, #4]
    const unichar chr1 = lex->chr1 | 0x20;
    2a58:	687b      	ldr	r3, [r7, #4]
    2a5a:	695b      	ldr	r3, [r3, #20]
    2a5c:	f043 0320 	orr.w	r3, r3, #32
    2a60:	60fb      	str	r3, [r7, #12]
    return chr1 == 'b' || chr1 == 'o' || chr1 == 'x';
    2a62:	68fb      	ldr	r3, [r7, #12]
    2a64:	2b62      	cmp	r3, #98	; 0x62
    2a66:	d005      	beq.n	2a74 <is_following_base_char+0x24>
    2a68:	68fb      	ldr	r3, [r7, #12]
    2a6a:	2b6f      	cmp	r3, #111	; 0x6f
    2a6c:	d002      	beq.n	2a74 <is_following_base_char+0x24>
    2a6e:	68fb      	ldr	r3, [r7, #12]
    2a70:	2b78      	cmp	r3, #120	; 0x78
    2a72:	d101      	bne.n	2a78 <is_following_base_char+0x28>
    2a74:	2301      	movs	r3, #1
    2a76:	e000      	b.n	2a7a <is_following_base_char+0x2a>
    2a78:	2300      	movs	r3, #0
    2a7a:	f003 0301 	and.w	r3, r3, #1
    2a7e:	b2db      	uxtb	r3, r3
}
    2a80:	4618      	mov	r0, r3
    2a82:	3714      	adds	r7, #20
    2a84:	46bd      	mov	sp, r7
    2a86:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a8a:	4770      	bx	lr

00002a8c <is_following_odigit>:

STATIC bool is_following_odigit(mp_lexer_t *lex) {
    2a8c:	b480      	push	{r7}
    2a8e:	b083      	sub	sp, #12
    2a90:	af00      	add	r7, sp, #0
    2a92:	6078      	str	r0, [r7, #4]
    return lex->chr1 >= '0' && lex->chr1 <= '7';
    2a94:	687b      	ldr	r3, [r7, #4]
    2a96:	695b      	ldr	r3, [r3, #20]
    2a98:	2b2f      	cmp	r3, #47	; 0x2f
    2a9a:	d905      	bls.n	2aa8 <is_following_odigit+0x1c>
    2a9c:	687b      	ldr	r3, [r7, #4]
    2a9e:	695b      	ldr	r3, [r3, #20]
    2aa0:	2b37      	cmp	r3, #55	; 0x37
    2aa2:	d801      	bhi.n	2aa8 <is_following_odigit+0x1c>
    2aa4:	2301      	movs	r3, #1
    2aa6:	e000      	b.n	2aaa <is_following_odigit+0x1e>
    2aa8:	2300      	movs	r3, #0
    2aaa:	f003 0301 	and.w	r3, r3, #1
    2aae:	b2db      	uxtb	r3, r3
}
    2ab0:	4618      	mov	r0, r3
    2ab2:	370c      	adds	r7, #12
    2ab4:	46bd      	mov	sp, r7
    2ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2aba:	4770      	bx	lr

00002abc <is_string_or_bytes>:

STATIC bool is_string_or_bytes(mp_lexer_t *lex) {
    2abc:	b580      	push	{r7, lr}
    2abe:	b082      	sub	sp, #8
    2ac0:	af00      	add	r7, sp, #0
    2ac2:	6078      	str	r0, [r7, #4]
    return is_char_or(lex, '\'', '\"')
    2ac4:	2222      	movs	r2, #34	; 0x22
    2ac6:	2127      	movs	r1, #39	; 0x27
    2ac8:	6878      	ldr	r0, [r7, #4]
    2aca:	f7ff fed5 	bl	2878 <is_char_or>
    2ace:	4603      	mov	r3, r0
        || (is_char_or3(lex, 'r', 'u', 'b') && is_char_following_or(lex, '\'', '\"'))
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    2ad0:	2b00      	cmp	r3, #0
    2ad2:	d128      	bne.n	2b26 <is_string_or_bytes+0x6a>
        || (is_char_or3(lex, 'r', 'u', 'b') && is_char_following_or(lex, '\'', '\"'))
    2ad4:	2362      	movs	r3, #98	; 0x62
    2ad6:	2275      	movs	r2, #117	; 0x75
    2ad8:	2172      	movs	r1, #114	; 0x72
    2ada:	6878      	ldr	r0, [r7, #4]
    2adc:	f7ff feea 	bl	28b4 <is_char_or3>
    2ae0:	4603      	mov	r3, r0
    2ae2:	2b00      	cmp	r3, #0
    2ae4:	d007      	beq.n	2af6 <is_string_or_bytes+0x3a>
    2ae6:	2222      	movs	r2, #34	; 0x22
    2ae8:	2127      	movs	r1, #39	; 0x27
    2aea:	6878      	ldr	r0, [r7, #4]
    2aec:	f7ff ff1e 	bl	292c <is_char_following_or>
    2af0:	4603      	mov	r3, r0
    2af2:	2b00      	cmp	r3, #0
    2af4:	d117      	bne.n	2b26 <is_string_or_bytes+0x6a>
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    2af6:	2262      	movs	r2, #98	; 0x62
    2af8:	2172      	movs	r1, #114	; 0x72
    2afa:	6878      	ldr	r0, [r7, #4]
    2afc:	f7ff ff52 	bl	29a4 <is_char_and>
    2b00:	4603      	mov	r3, r0
    2b02:	2b00      	cmp	r3, #0
    2b04:	d107      	bne.n	2b16 <is_string_or_bytes+0x5a>
    2b06:	2272      	movs	r2, #114	; 0x72
    2b08:	2162      	movs	r1, #98	; 0x62
    2b0a:	6878      	ldr	r0, [r7, #4]
    2b0c:	f7ff ff4a 	bl	29a4 <is_char_and>
    2b10:	4603      	mov	r3, r0
    2b12:	2b00      	cmp	r3, #0
    2b14:	d009      	beq.n	2b2a <is_string_or_bytes+0x6e>
            && is_char_following_following_or(lex, '\'', '\"'));
    2b16:	2222      	movs	r2, #34	; 0x22
    2b18:	2127      	movs	r1, #39	; 0x27
    2b1a:	6878      	ldr	r0, [r7, #4]
    2b1c:	f7ff ff24 	bl	2968 <is_char_following_following_or>
    2b20:	4603      	mov	r3, r0
    2b22:	2b00      	cmp	r3, #0
    2b24:	d001      	beq.n	2b2a <is_string_or_bytes+0x6e>
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    2b26:	2301      	movs	r3, #1
    2b28:	e000      	b.n	2b2c <is_string_or_bytes+0x70>
    2b2a:	2300      	movs	r3, #0
    return is_char_or(lex, '\'', '\"')
    2b2c:	f003 0301 	and.w	r3, r3, #1
    2b30:	b2db      	uxtb	r3, r3
}
    2b32:	4618      	mov	r0, r3
    2b34:	3708      	adds	r7, #8
    2b36:	46bd      	mov	sp, r7
    2b38:	bd80      	pop	{r7, pc}
    2b3a:	bf00      	nop

00002b3c <is_head_of_identifier>:

// to easily parse utf-8 identifiers we allow any raw byte with high bit set
STATIC bool is_head_of_identifier(mp_lexer_t *lex) {
    2b3c:	b580      	push	{r7, lr}
    2b3e:	b082      	sub	sp, #8
    2b40:	af00      	add	r7, sp, #0
    2b42:	6078      	str	r0, [r7, #4]
    return is_letter(lex) || lex->chr0 == '_' || lex->chr0 >= 0x80;
    2b44:	6878      	ldr	r0, [r7, #4]
    2b46:	f7ff ff59 	bl	29fc <is_letter>
    2b4a:	4603      	mov	r3, r0
    2b4c:	2b00      	cmp	r3, #0
    2b4e:	d107      	bne.n	2b60 <is_head_of_identifier+0x24>
    2b50:	687b      	ldr	r3, [r7, #4]
    2b52:	691b      	ldr	r3, [r3, #16]
    2b54:	2b5f      	cmp	r3, #95	; 0x5f
    2b56:	d003      	beq.n	2b60 <is_head_of_identifier+0x24>
    2b58:	687b      	ldr	r3, [r7, #4]
    2b5a:	691b      	ldr	r3, [r3, #16]
    2b5c:	2b7f      	cmp	r3, #127	; 0x7f
    2b5e:	d901      	bls.n	2b64 <is_head_of_identifier+0x28>
    2b60:	2301      	movs	r3, #1
    2b62:	e000      	b.n	2b66 <is_head_of_identifier+0x2a>
    2b64:	2300      	movs	r3, #0
    2b66:	f003 0301 	and.w	r3, r3, #1
    2b6a:	b2db      	uxtb	r3, r3
}
    2b6c:	4618      	mov	r0, r3
    2b6e:	3708      	adds	r7, #8
    2b70:	46bd      	mov	sp, r7
    2b72:	bd80      	pop	{r7, pc}

00002b74 <is_tail_of_identifier>:

STATIC bool is_tail_of_identifier(mp_lexer_t *lex) {
    2b74:	b580      	push	{r7, lr}
    2b76:	b082      	sub	sp, #8
    2b78:	af00      	add	r7, sp, #0
    2b7a:	6078      	str	r0, [r7, #4]
    return is_head_of_identifier(lex) || is_digit(lex);
    2b7c:	6878      	ldr	r0, [r7, #4]
    2b7e:	f7ff ffdd 	bl	2b3c <is_head_of_identifier>
    2b82:	4603      	mov	r3, r0
    2b84:	2b00      	cmp	r3, #0
    2b86:	d105      	bne.n	2b94 <is_tail_of_identifier+0x20>
    2b88:	6878      	ldr	r0, [r7, #4]
    2b8a:	f7ff ff45 	bl	2a18 <is_digit>
    2b8e:	4603      	mov	r3, r0
    2b90:	2b00      	cmp	r3, #0
    2b92:	d001      	beq.n	2b98 <is_tail_of_identifier+0x24>
    2b94:	2301      	movs	r3, #1
    2b96:	e000      	b.n	2b9a <is_tail_of_identifier+0x26>
    2b98:	2300      	movs	r3, #0
    2b9a:	f003 0301 	and.w	r3, r3, #1
    2b9e:	b2db      	uxtb	r3, r3
}
    2ba0:	4618      	mov	r0, r3
    2ba2:	3708      	adds	r7, #8
    2ba4:	46bd      	mov	sp, r7
    2ba6:	bd80      	pop	{r7, pc}

00002ba8 <next_char>:

STATIC void next_char(mp_lexer_t *lex) {
    2ba8:	b580      	push	{r7, lr}
    2baa:	b082      	sub	sp, #8
    2bac:	af00      	add	r7, sp, #0
    2bae:	6078      	str	r0, [r7, #4]
    if (lex->chr0 == '\n') {
    2bb0:	687b      	ldr	r3, [r7, #4]
    2bb2:	691b      	ldr	r3, [r3, #16]
    2bb4:	2b0a      	cmp	r3, #10
    2bb6:	d108      	bne.n	2bca <next_char+0x22>
        // a new line
        ++lex->line;
    2bb8:	687b      	ldr	r3, [r7, #4]
    2bba:	69db      	ldr	r3, [r3, #28]
    2bbc:	1c5a      	adds	r2, r3, #1
    2bbe:	687b      	ldr	r3, [r7, #4]
    2bc0:	61da      	str	r2, [r3, #28]
        lex->column = 1;
    2bc2:	687b      	ldr	r3, [r7, #4]
    2bc4:	2201      	movs	r2, #1
    2bc6:	621a      	str	r2, [r3, #32]
    2bc8:	e011      	b.n	2bee <next_char+0x46>
    } else if (lex->chr0 == '\t') {
    2bca:	687b      	ldr	r3, [r7, #4]
    2bcc:	691b      	ldr	r3, [r3, #16]
    2bce:	2b09      	cmp	r3, #9
    2bd0:	d108      	bne.n	2be4 <next_char+0x3c>
        // a tab
        lex->column = (((lex->column - 1 + TAB_SIZE) / TAB_SIZE) * TAB_SIZE) + 1;
    2bd2:	687b      	ldr	r3, [r7, #4]
    2bd4:	6a1b      	ldr	r3, [r3, #32]
    2bd6:	3307      	adds	r3, #7
    2bd8:	08db      	lsrs	r3, r3, #3
    2bda:	00db      	lsls	r3, r3, #3
    2bdc:	1c5a      	adds	r2, r3, #1
    2bde:	687b      	ldr	r3, [r7, #4]
    2be0:	621a      	str	r2, [r3, #32]
    2be2:	e004      	b.n	2bee <next_char+0x46>
    } else {
        // a character worth one column
        ++lex->column;
    2be4:	687b      	ldr	r3, [r7, #4]
    2be6:	6a1b      	ldr	r3, [r3, #32]
    2be8:	1c5a      	adds	r2, r3, #1
    2bea:	687b      	ldr	r3, [r7, #4]
    2bec:	621a      	str	r2, [r3, #32]
    }

    lex->chr0 = lex->chr1;
    2bee:	687b      	ldr	r3, [r7, #4]
    2bf0:	695a      	ldr	r2, [r3, #20]
    2bf2:	687b      	ldr	r3, [r7, #4]
    2bf4:	611a      	str	r2, [r3, #16]
    lex->chr1 = lex->chr2;
    2bf6:	687b      	ldr	r3, [r7, #4]
    2bf8:	699a      	ldr	r2, [r3, #24]
    2bfa:	687b      	ldr	r3, [r7, #4]
    2bfc:	615a      	str	r2, [r3, #20]
    lex->chr2 = lex->reader.readbyte(lex->reader.data);
    2bfe:	687b      	ldr	r3, [r7, #4]
    2c00:	689b      	ldr	r3, [r3, #8]
    2c02:	687a      	ldr	r2, [r7, #4]
    2c04:	6852      	ldr	r2, [r2, #4]
    2c06:	4610      	mov	r0, r2
    2c08:	4798      	blx	r3
    2c0a:	4602      	mov	r2, r0
    2c0c:	687b      	ldr	r3, [r7, #4]
    2c0e:	619a      	str	r2, [r3, #24]

    if (lex->chr1 == '\r') {
    2c10:	687b      	ldr	r3, [r7, #4]
    2c12:	695b      	ldr	r3, [r3, #20]
    2c14:	2b0d      	cmp	r3, #13
    2c16:	d10f      	bne.n	2c38 <next_char+0x90>
        // CR is a new line, converted to LF
        lex->chr1 = '\n';
    2c18:	687b      	ldr	r3, [r7, #4]
    2c1a:	220a      	movs	r2, #10
    2c1c:	615a      	str	r2, [r3, #20]
        if (lex->chr2 == '\n') {
    2c1e:	687b      	ldr	r3, [r7, #4]
    2c20:	699b      	ldr	r3, [r3, #24]
    2c22:	2b0a      	cmp	r3, #10
    2c24:	d108      	bne.n	2c38 <next_char+0x90>
            // CR LF is a single new line, throw out the extra LF
            lex->chr2 = lex->reader.readbyte(lex->reader.data);
    2c26:	687b      	ldr	r3, [r7, #4]
    2c28:	689b      	ldr	r3, [r3, #8]
    2c2a:	687a      	ldr	r2, [r7, #4]
    2c2c:	6852      	ldr	r2, [r2, #4]
    2c2e:	4610      	mov	r0, r2
    2c30:	4798      	blx	r3
    2c32:	4602      	mov	r2, r0
    2c34:	687b      	ldr	r3, [r7, #4]
    2c36:	619a      	str	r2, [r3, #24]
        }
    }

    // check if we need to insert a newline at end of file
    if (lex->chr2 == MP_LEXER_EOF && lex->chr1 != MP_LEXER_EOF && lex->chr1 != '\n') {
    2c38:	687b      	ldr	r3, [r7, #4]
    2c3a:	699b      	ldr	r3, [r3, #24]
    2c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2c40:	d10b      	bne.n	2c5a <next_char+0xb2>
    2c42:	687b      	ldr	r3, [r7, #4]
    2c44:	695b      	ldr	r3, [r3, #20]
    2c46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2c4a:	d006      	beq.n	2c5a <next_char+0xb2>
    2c4c:	687b      	ldr	r3, [r7, #4]
    2c4e:	695b      	ldr	r3, [r3, #20]
    2c50:	2b0a      	cmp	r3, #10
    2c52:	d002      	beq.n	2c5a <next_char+0xb2>
        lex->chr2 = '\n';
    2c54:	687b      	ldr	r3, [r7, #4]
    2c56:	220a      	movs	r2, #10
    2c58:	619a      	str	r2, [r3, #24]
    }
}
    2c5a:	bf00      	nop
    2c5c:	3708      	adds	r7, #8
    2c5e:	46bd      	mov	sp, r7
    2c60:	bd80      	pop	{r7, pc}
    2c62:	bf00      	nop

00002c64 <indent_push>:

STATIC void indent_push(mp_lexer_t *lex, size_t indent) {
    2c64:	b580      	push	{r7, lr}
    2c66:	b082      	sub	sp, #8
    2c68:	af00      	add	r7, sp, #0
    2c6a:	6078      	str	r0, [r7, #4]
    2c6c:	6039      	str	r1, [r7, #0]
    if (lex->num_indent_level >= lex->alloc_indent_level) {
    2c6e:	687b      	ldr	r3, [r7, #4]
    2c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2c72:	687b      	ldr	r3, [r7, #4]
    2c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c76:	429a      	cmp	r2, r3
    2c78:	d312      	bcc.n	2ca0 <indent_push+0x3c>
        lex->indent_level = m_renew(uint16_t, lex->indent_level, lex->alloc_indent_level, lex->alloc_indent_level + MICROPY_ALLOC_LEXEL_INDENT_INC);
    2c7a:	687b      	ldr	r3, [r7, #4]
    2c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2c7e:	687b      	ldr	r3, [r7, #4]
    2c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c82:	3308      	adds	r3, #8
    2c84:	005b      	lsls	r3, r3, #1
    2c86:	4619      	mov	r1, r3
    2c88:	4610      	mov	r0, r2
    2c8a:	f7fd fb93 	bl	3b4 <m_realloc>
    2c8e:	4602      	mov	r2, r0
    2c90:	687b      	ldr	r3, [r7, #4]
    2c92:	635a      	str	r2, [r3, #52]	; 0x34
        lex->alloc_indent_level += MICROPY_ALLOC_LEXEL_INDENT_INC;
    2c94:	687b      	ldr	r3, [r7, #4]
    2c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c98:	f103 0208 	add.w	r2, r3, #8
    2c9c:	687b      	ldr	r3, [r7, #4]
    2c9e:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    lex->indent_level[lex->num_indent_level++] = indent;
    2ca0:	687b      	ldr	r3, [r7, #4]
    2ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2ca4:	687b      	ldr	r3, [r7, #4]
    2ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2ca8:	1c58      	adds	r0, r3, #1
    2caa:	6879      	ldr	r1, [r7, #4]
    2cac:	6308      	str	r0, [r1, #48]	; 0x30
    2cae:	005b      	lsls	r3, r3, #1
    2cb0:	4413      	add	r3, r2
    2cb2:	683a      	ldr	r2, [r7, #0]
    2cb4:	b292      	uxth	r2, r2
    2cb6:	801a      	strh	r2, [r3, #0]
}
    2cb8:	bf00      	nop
    2cba:	3708      	adds	r7, #8
    2cbc:	46bd      	mov	sp, r7
    2cbe:	bd80      	pop	{r7, pc}

00002cc0 <indent_top>:

STATIC size_t indent_top(mp_lexer_t *lex) {
    2cc0:	b480      	push	{r7}
    2cc2:	b083      	sub	sp, #12
    2cc4:	af00      	add	r7, sp, #0
    2cc6:	6078      	str	r0, [r7, #4]
    return lex->indent_level[lex->num_indent_level - 1];
    2cc8:	687b      	ldr	r3, [r7, #4]
    2cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2ccc:	687b      	ldr	r3, [r7, #4]
    2cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2cd0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    2cd4:	3b01      	subs	r3, #1
    2cd6:	005b      	lsls	r3, r3, #1
    2cd8:	4413      	add	r3, r2
    2cda:	881b      	ldrh	r3, [r3, #0]
}
    2cdc:	4618      	mov	r0, r3
    2cde:	370c      	adds	r7, #12
    2ce0:	46bd      	mov	sp, r7
    2ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ce6:	4770      	bx	lr

00002ce8 <indent_pop>:

STATIC void indent_pop(mp_lexer_t *lex) {
    2ce8:	b480      	push	{r7}
    2cea:	b083      	sub	sp, #12
    2cec:	af00      	add	r7, sp, #0
    2cee:	6078      	str	r0, [r7, #4]
    lex->num_indent_level -= 1;
    2cf0:	687b      	ldr	r3, [r7, #4]
    2cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2cf4:	1e5a      	subs	r2, r3, #1
    2cf6:	687b      	ldr	r3, [r7, #4]
    2cf8:	631a      	str	r2, [r3, #48]	; 0x30
}
    2cfa:	bf00      	nop
    2cfc:	370c      	adds	r7, #12
    2cfe:	46bd      	mov	sp, r7
    2d00:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d04:	4770      	bx	lr
    2d06:	bf00      	nop

00002d08 <get_hex>:
};

// This is called with CUR_CHAR() before first hex digit, and should return with
// it pointing to last hex digit
// num_digits must be greater than zero
STATIC bool get_hex(mp_lexer_t *lex, size_t num_digits, mp_uint_t *result) {
    2d08:	b590      	push	{r4, r7, lr}
    2d0a:	b087      	sub	sp, #28
    2d0c:	af00      	add	r7, sp, #0
    2d0e:	60f8      	str	r0, [r7, #12]
    2d10:	60b9      	str	r1, [r7, #8]
    2d12:	607a      	str	r2, [r7, #4]
    mp_uint_t num = 0;
    2d14:	2300      	movs	r3, #0
    2d16:	617b      	str	r3, [r7, #20]
    while (num_digits-- != 0) {
    2d18:	e018      	b.n	2d4c <get_hex+0x44>
        next_char(lex);
    2d1a:	68f8      	ldr	r0, [r7, #12]
    2d1c:	f7ff ff44 	bl	2ba8 <next_char>
        unichar c = CUR_CHAR(lex);
    2d20:	68fb      	ldr	r3, [r7, #12]
    2d22:	691b      	ldr	r3, [r3, #16]
    2d24:	613b      	str	r3, [r7, #16]
        if (!unichar_isxdigit(c)) {
    2d26:	6938      	ldr	r0, [r7, #16]
    2d28:	f7ff fc4e 	bl	25c8 <unichar_isxdigit>
    2d2c:	4603      	mov	r3, r0
    2d2e:	f083 0301 	eor.w	r3, r3, #1
    2d32:	b2db      	uxtb	r3, r3
    2d34:	2b00      	cmp	r3, #0
    2d36:	d001      	beq.n	2d3c <get_hex+0x34>
            return false;
    2d38:	2300      	movs	r3, #0
    2d3a:	e010      	b.n	2d5e <get_hex+0x56>
        }
        num = (num << 4) + unichar_xdigit_value(c);
    2d3c:	697b      	ldr	r3, [r7, #20]
    2d3e:	011c      	lsls	r4, r3, #4
    2d40:	6938      	ldr	r0, [r7, #16]
    2d42:	f7ff fcdf 	bl	2704 <unichar_xdigit_value>
    2d46:	4603      	mov	r3, r0
    2d48:	4423      	add	r3, r4
    2d4a:	617b      	str	r3, [r7, #20]
    while (num_digits-- != 0) {
    2d4c:	68bb      	ldr	r3, [r7, #8]
    2d4e:	1e5a      	subs	r2, r3, #1
    2d50:	60ba      	str	r2, [r7, #8]
    2d52:	2b00      	cmp	r3, #0
    2d54:	d1e1      	bne.n	2d1a <get_hex+0x12>
    }
    *result = num;
    2d56:	687b      	ldr	r3, [r7, #4]
    2d58:	697a      	ldr	r2, [r7, #20]
    2d5a:	601a      	str	r2, [r3, #0]
    return true;
    2d5c:	2301      	movs	r3, #1
}
    2d5e:	4618      	mov	r0, r3
    2d60:	371c      	adds	r7, #28
    2d62:	46bd      	mov	sp, r7
    2d64:	bd90      	pop	{r4, r7, pc}
    2d66:	bf00      	nop

00002d68 <parse_string_literal>:

STATIC void parse_string_literal(mp_lexer_t *lex, bool is_raw) {
    2d68:	b580      	push	{r7, lr}
    2d6a:	b08a      	sub	sp, #40	; 0x28
    2d6c:	af00      	add	r7, sp, #0
    2d6e:	6078      	str	r0, [r7, #4]
    2d70:	460b      	mov	r3, r1
    2d72:	70fb      	strb	r3, [r7, #3]
    // get first quoting character
    char quote_char = '\'';
    2d74:	2327      	movs	r3, #39	; 0x27
    2d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (is_char(lex, '\"')) {
    2d7a:	2122      	movs	r1, #34	; 0x22
    2d7c:	6878      	ldr	r0, [r7, #4]
    2d7e:	f7ff fd67 	bl	2850 <is_char>
    2d82:	4603      	mov	r3, r0
    2d84:	2b00      	cmp	r3, #0
    2d86:	d002      	beq.n	2d8e <parse_string_literal+0x26>
        quote_char = '\"';
    2d88:	2322      	movs	r3, #34	; 0x22
    2d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    next_char(lex);
    2d8e:	6878      	ldr	r0, [r7, #4]
    2d90:	f7ff ff0a 	bl	2ba8 <next_char>

    // work out if it's a single or triple quoted literal
    size_t num_quotes;
    if (is_char_and(lex, quote_char, quote_char)) {
    2d94:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    2d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2d9c:	4619      	mov	r1, r3
    2d9e:	6878      	ldr	r0, [r7, #4]
    2da0:	f7ff fe00 	bl	29a4 <is_char_and>
    2da4:	4603      	mov	r3, r0
    2da6:	2b00      	cmp	r3, #0
    2da8:	d008      	beq.n	2dbc <parse_string_literal+0x54>
        // triple quotes
        next_char(lex);
    2daa:	6878      	ldr	r0, [r7, #4]
    2dac:	f7ff fefc 	bl	2ba8 <next_char>
        next_char(lex);
    2db0:	6878      	ldr	r0, [r7, #4]
    2db2:	f7ff fef9 	bl	2ba8 <next_char>
        num_quotes = 3;
    2db6:	2303      	movs	r3, #3
    2db8:	623b      	str	r3, [r7, #32]
    2dba:	e001      	b.n	2dc0 <parse_string_literal+0x58>
    } else {
        // single quotes
        num_quotes = 1;
    2dbc:	2301      	movs	r3, #1
    2dbe:	623b      	str	r3, [r7, #32]
    }

    size_t n_closing = 0;
    2dc0:	2300      	movs	r3, #0
    2dc2:	61fb      	str	r3, [r7, #28]
    while (!is_end(lex) && (num_quotes > 1 || !is_char(lex, '\n')) && n_closing < num_quotes) {
    2dc4:	e1ac      	b.n	3120 <parse_string_literal+0x3b8>
        if (is_char(lex, quote_char)) {
    2dc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2dca:	4619      	mov	r1, r3
    2dcc:	6878      	ldr	r0, [r7, #4]
    2dce:	f7ff fd3f 	bl	2850 <is_char>
    2dd2:	4603      	mov	r3, r0
    2dd4:	2b00      	cmp	r3, #0
    2dd6:	d00c      	beq.n	2df2 <parse_string_literal+0x8a>
            n_closing += 1;
    2dd8:	69fb      	ldr	r3, [r7, #28]
    2dda:	3301      	adds	r3, #1
    2ddc:	61fb      	str	r3, [r7, #28]
            vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    2dde:	687b      	ldr	r3, [r7, #4]
    2de0:	f103 0244 	add.w	r2, r3, #68	; 0x44
    2de4:	687b      	ldr	r3, [r7, #4]
    2de6:	691b      	ldr	r3, [r3, #16]
    2de8:	4619      	mov	r1, r3
    2dea:	4610      	mov	r0, r2
    2dec:	f7fe fcba 	bl	1764 <vstr_add_char>
    2df0:	e193      	b.n	311a <parse_string_literal+0x3b2>
        } else {
            n_closing = 0;
    2df2:	2300      	movs	r3, #0
    2df4:	61fb      	str	r3, [r7, #28]
            if (is_char(lex, '\\')) {
    2df6:	215c      	movs	r1, #92	; 0x5c
    2df8:	6878      	ldr	r0, [r7, #4]
    2dfa:	f7ff fd29 	bl	2850 <is_char>
    2dfe:	4603      	mov	r3, r0
    2e00:	2b00      	cmp	r3, #0
    2e02:	f000 8180 	beq.w	3106 <parse_string_literal+0x39e>
                next_char(lex);
    2e06:	6878      	ldr	r0, [r7, #4]
    2e08:	f7ff fece 	bl	2ba8 <next_char>
                unichar c = CUR_CHAR(lex);
    2e0c:	687b      	ldr	r3, [r7, #4]
    2e0e:	691b      	ldr	r3, [r3, #16]
    2e10:	61bb      	str	r3, [r7, #24]
                if (is_raw) {
    2e12:	78fb      	ldrb	r3, [r7, #3]
    2e14:	2b00      	cmp	r3, #0
    2e16:	d006      	beq.n	2e26 <parse_string_literal+0xbe>
                    // raw strings allow escaping of quotes, but the backslash is also emitted
                    vstr_add_char(&lex->vstr, '\\');
    2e18:	687b      	ldr	r3, [r7, #4]
    2e1a:	3344      	adds	r3, #68	; 0x44
    2e1c:	215c      	movs	r1, #92	; 0x5c
    2e1e:	4618      	mov	r0, r3
    2e20:	f7fe fca0 	bl	1764 <vstr_add_char>
    2e24:	e15b      	b.n	30de <parse_string_literal+0x376>
                } else {
                    switch (c) {
    2e26:	69bb      	ldr	r3, [r7, #24]
    2e28:	3b0a      	subs	r3, #10
    2e2a:	2b6e      	cmp	r3, #110	; 0x6e
    2e2c:	f200 8129 	bhi.w	3082 <parse_string_literal+0x31a>
    2e30:	a201      	add	r2, pc, #4	; (adr r2, 2e38 <parse_string_literal+0xd0>)
    2e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2e36:	bf00      	nop
    2e38:	00002ff5 	.word	0x00002ff5
    2e3c:	00003083 	.word	0x00003083
    2e40:	00003083 	.word	0x00003083
    2e44:	00003083 	.word	0x00003083
    2e48:	00003083 	.word	0x00003083
    2e4c:	00003083 	.word	0x00003083
    2e50:	00003083 	.word	0x00003083
    2e54:	00003083 	.word	0x00003083
    2e58:	00003083 	.word	0x00003083
    2e5c:	00003083 	.word	0x00003083
    2e60:	00003083 	.word	0x00003083
    2e64:	00003083 	.word	0x00003083
    2e68:	00003083 	.word	0x00003083
    2e6c:	00003083 	.word	0x00003083
    2e70:	00003083 	.word	0x00003083
    2e74:	00003083 	.word	0x00003083
    2e78:	00003083 	.word	0x00003083
    2e7c:	00003083 	.word	0x00003083
    2e80:	00003083 	.word	0x00003083
    2e84:	00003083 	.word	0x00003083
    2e88:	00003083 	.word	0x00003083
    2e8c:	00003083 	.word	0x00003083
    2e90:	00003083 	.word	0x00003083
    2e94:	00003083 	.word	0x00003083
    2e98:	000030dd 	.word	0x000030dd
    2e9c:	00003083 	.word	0x00003083
    2ea0:	00003083 	.word	0x00003083
    2ea4:	00003083 	.word	0x00003083
    2ea8:	00003083 	.word	0x00003083
    2eac:	000030dd 	.word	0x000030dd
    2eb0:	00003083 	.word	0x00003083
    2eb4:	00003083 	.word	0x00003083
    2eb8:	00003083 	.word	0x00003083
    2ebc:	00003083 	.word	0x00003083
    2ec0:	00003083 	.word	0x00003083
    2ec4:	00003083 	.word	0x00003083
    2ec8:	00003083 	.word	0x00003083
    2ecc:	00003083 	.word	0x00003083
    2ed0:	00003083 	.word	0x00003083
    2ed4:	00003083 	.word	0x00003083
    2ed8:	00003083 	.word	0x00003083
    2edc:	00003083 	.word	0x00003083
    2ee0:	00003083 	.word	0x00003083
    2ee4:	00003083 	.word	0x00003083
    2ee8:	00003083 	.word	0x00003083
    2eec:	00003083 	.word	0x00003083
    2ef0:	00003083 	.word	0x00003083
    2ef4:	00003083 	.word	0x00003083
    2ef8:	00003083 	.word	0x00003083
    2efc:	00003083 	.word	0x00003083
    2f00:	00003083 	.word	0x00003083
    2f04:	00003083 	.word	0x00003083
    2f08:	00003083 	.word	0x00003083
    2f0c:	00003083 	.word	0x00003083
    2f10:	00003083 	.word	0x00003083
    2f14:	00003083 	.word	0x00003083
    2f18:	00003083 	.word	0x00003083
    2f1c:	00003083 	.word	0x00003083
    2f20:	00003083 	.word	0x00003083
    2f24:	00003083 	.word	0x00003083
    2f28:	00003083 	.word	0x00003083
    2f2c:	00003083 	.word	0x00003083
    2f30:	00003083 	.word	0x00003083
    2f34:	00003083 	.word	0x00003083
    2f38:	00003083 	.word	0x00003083
    2f3c:	00003083 	.word	0x00003083
    2f40:	00003083 	.word	0x00003083
    2f44:	00003083 	.word	0x00003083
    2f48:	0000307d 	.word	0x0000307d
    2f4c:	00003083 	.word	0x00003083
    2f50:	00003083 	.word	0x00003083
    2f54:	00003083 	.word	0x00003083
    2f58:	00003083 	.word	0x00003083
    2f5c:	00003083 	.word	0x00003083
    2f60:	00003083 	.word	0x00003083
    2f64:	00003027 	.word	0x00003027
    2f68:	00003083 	.word	0x00003083
    2f6c:	00003083 	.word	0x00003083
    2f70:	00003083 	.word	0x00003083
    2f74:	00003083 	.word	0x00003083
    2f78:	00003083 	.word	0x00003083
    2f7c:	00003083 	.word	0x00003083
    2f80:	000030dd 	.word	0x000030dd
    2f84:	00003083 	.word	0x00003083
    2f88:	00003083 	.word	0x00003083
    2f8c:	00003083 	.word	0x00003083
    2f90:	00003083 	.word	0x00003083
    2f94:	00002ffd 	.word	0x00002ffd
    2f98:	00003003 	.word	0x00003003
    2f9c:	00003083 	.word	0x00003083
    2fa0:	00003083 	.word	0x00003083
    2fa4:	00003083 	.word	0x00003083
    2fa8:	0000301b 	.word	0x0000301b
    2fac:	00003083 	.word	0x00003083
    2fb0:	00003083 	.word	0x00003083
    2fb4:	00003083 	.word	0x00003083
    2fb8:	00003083 	.word	0x00003083
    2fbc:	00003083 	.word	0x00003083
    2fc0:	00003083 	.word	0x00003083
    2fc4:	00003083 	.word	0x00003083
    2fc8:	0000300f 	.word	0x0000300f
    2fcc:	00003083 	.word	0x00003083
    2fd0:	00003083 	.word	0x00003083
    2fd4:	00003083 	.word	0x00003083
    2fd8:	00003021 	.word	0x00003021
    2fdc:	00003083 	.word	0x00003083
    2fe0:	00003009 	.word	0x00003009
    2fe4:	00003027 	.word	0x00003027
    2fe8:	00003015 	.word	0x00003015
    2fec:	00003083 	.word	0x00003083
    2ff0:	0000303d 	.word	0x0000303d
                        // note: "c" can never be MP_LEXER_EOF because next_char
                        // always inserts a newline at the end of the input stream
                        case '\n': c = MP_LEXER_EOF; break; // backslash escape the newline, just ignore it
    2ff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2ff8:	61bb      	str	r3, [r7, #24]
    2ffa:	e070      	b.n	30de <parse_string_literal+0x376>
                        case '\\': break;
                        case '\'': break;
                        case '"': break;
                        case 'a': c = 0x07; break;
    2ffc:	2307      	movs	r3, #7
    2ffe:	61bb      	str	r3, [r7, #24]
    3000:	e06d      	b.n	30de <parse_string_literal+0x376>
                        case 'b': c = 0x08; break;
    3002:	2308      	movs	r3, #8
    3004:	61bb      	str	r3, [r7, #24]
    3006:	e06a      	b.n	30de <parse_string_literal+0x376>
                        case 't': c = 0x09; break;
    3008:	2309      	movs	r3, #9
    300a:	61bb      	str	r3, [r7, #24]
    300c:	e067      	b.n	30de <parse_string_literal+0x376>
                        case 'n': c = 0x0a; break;
    300e:	230a      	movs	r3, #10
    3010:	61bb      	str	r3, [r7, #24]
    3012:	e064      	b.n	30de <parse_string_literal+0x376>
                        case 'v': c = 0x0b; break;
    3014:	230b      	movs	r3, #11
    3016:	61bb      	str	r3, [r7, #24]
    3018:	e061      	b.n	30de <parse_string_literal+0x376>
                        case 'f': c = 0x0c; break;
    301a:	230c      	movs	r3, #12
    301c:	61bb      	str	r3, [r7, #24]
    301e:	e05e      	b.n	30de <parse_string_literal+0x376>
                        case 'r': c = 0x0d; break;
    3020:	230d      	movs	r3, #13
    3022:	61bb      	str	r3, [r7, #24]
    3024:	e05b      	b.n	30de <parse_string_literal+0x376>
                        case 'u':
                        case 'U':
                            if (lex->tok_kind == MP_TOKEN_BYTES) {
    3026:	687b      	ldr	r3, [r7, #4]
    3028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    302a:	2b0b      	cmp	r3, #11
    302c:	d106      	bne.n	303c <parse_string_literal+0x2d4>
                                // b'\u1234' == b'\\u1234'
                                vstr_add_char(&lex->vstr, '\\');
    302e:	687b      	ldr	r3, [r7, #4]
    3030:	3344      	adds	r3, #68	; 0x44
    3032:	215c      	movs	r1, #92	; 0x5c
    3034:	4618      	mov	r0, r3
    3036:	f7fe fb95 	bl	1764 <vstr_add_char>
                                break;
    303a:	e050      	b.n	30de <parse_string_literal+0x376>
                            }
                            // Otherwise fall through.
                        case 'x':
                        {
                            mp_uint_t num = 0;
    303c:	2300      	movs	r3, #0
    303e:	60fb      	str	r3, [r7, #12]
                            if (!get_hex(lex, (c == 'x' ? 2 : c == 'u' ? 4 : 8), &num)) {
    3040:	69bb      	ldr	r3, [r7, #24]
    3042:	2b78      	cmp	r3, #120	; 0x78
    3044:	d006      	beq.n	3054 <parse_string_literal+0x2ec>
    3046:	69bb      	ldr	r3, [r7, #24]
    3048:	2b75      	cmp	r3, #117	; 0x75
    304a:	d101      	bne.n	3050 <parse_string_literal+0x2e8>
    304c:	2304      	movs	r3, #4
    304e:	e002      	b.n	3056 <parse_string_literal+0x2ee>
    3050:	2308      	movs	r3, #8
    3052:	e000      	b.n	3056 <parse_string_literal+0x2ee>
    3054:	2302      	movs	r3, #2
    3056:	f107 020c 	add.w	r2, r7, #12
    305a:	4619      	mov	r1, r3
    305c:	6878      	ldr	r0, [r7, #4]
    305e:	f7ff fe53 	bl	2d08 <get_hex>
    3062:	4603      	mov	r3, r0
    3064:	f083 0301 	eor.w	r3, r3, #1
    3068:	b2db      	uxtb	r3, r3
    306a:	2b00      	cmp	r3, #0
    306c:	d002      	beq.n	3074 <parse_string_literal+0x30c>
                                // not enough hex chars for escape sequence
                                lex->tok_kind = MP_TOKEN_INVALID;
    306e:	687b      	ldr	r3, [r7, #4]
    3070:	2201      	movs	r2, #1
    3072:	641a      	str	r2, [r3, #64]	; 0x40
                            }
                            c = num;
    3074:	68fb      	ldr	r3, [r7, #12]
    3076:	61bb      	str	r3, [r7, #24]
                            break;
    3078:	bf00      	nop
    307a:	e030      	b.n	30de <parse_string_literal+0x376>
                            // Supporting '\N{LATIN SMALL LETTER A}' == 'a' would require keeping the
                            // entire Unicode name table in the core. As of Unicode 6.3.0, that's nearly
                            // 3MB of text; even gzip-compressed and with minimal structure, it'll take
                            // roughly half a meg of storage. This form of Unicode escape may be added
                            // later on, but it's definitely not a priority right now. -- CJA 20140607
                            mp_raise_NotImplementedError("unicode name escapes");
    307c:	483e      	ldr	r0, [pc, #248]	; (3178 <parse_string_literal+0x410>)
    307e:	f009 ffb7 	bl	cff0 <mp_raise_NotImplementedError>
                            break;
                        default:
                            if (c >= '0' && c <= '7') {
    3082:	69bb      	ldr	r3, [r7, #24]
    3084:	2b2f      	cmp	r3, #47	; 0x2f
    3086:	d922      	bls.n	30ce <parse_string_literal+0x366>
    3088:	69bb      	ldr	r3, [r7, #24]
    308a:	2b37      	cmp	r3, #55	; 0x37
    308c:	d81f      	bhi.n	30ce <parse_string_literal+0x366>
                                // Octal sequence, 1-3 chars
                                size_t digits = 3;
    308e:	2303      	movs	r3, #3
    3090:	617b      	str	r3, [r7, #20]
                                mp_uint_t num = c - '0';
    3092:	69bb      	ldr	r3, [r7, #24]
    3094:	3b30      	subs	r3, #48	; 0x30
    3096:	613b      	str	r3, [r7, #16]
                                while (is_following_odigit(lex) && --digits != 0) {
    3098:	e009      	b.n	30ae <parse_string_literal+0x346>
                                    next_char(lex);
    309a:	6878      	ldr	r0, [r7, #4]
    309c:	f7ff fd84 	bl	2ba8 <next_char>
                                    num = num * 8 + (CUR_CHAR(lex) - '0');
    30a0:	693b      	ldr	r3, [r7, #16]
    30a2:	00da      	lsls	r2, r3, #3
    30a4:	687b      	ldr	r3, [r7, #4]
    30a6:	691b      	ldr	r3, [r3, #16]
    30a8:	4413      	add	r3, r2
    30aa:	3b30      	subs	r3, #48	; 0x30
    30ac:	613b      	str	r3, [r7, #16]
                                while (is_following_odigit(lex) && --digits != 0) {
    30ae:	6878      	ldr	r0, [r7, #4]
    30b0:	f7ff fcec 	bl	2a8c <is_following_odigit>
    30b4:	4603      	mov	r3, r0
    30b6:	2b00      	cmp	r3, #0
    30b8:	d005      	beq.n	30c6 <parse_string_literal+0x35e>
    30ba:	697b      	ldr	r3, [r7, #20]
    30bc:	3b01      	subs	r3, #1
    30be:	617b      	str	r3, [r7, #20]
    30c0:	697b      	ldr	r3, [r7, #20]
    30c2:	2b00      	cmp	r3, #0
    30c4:	d1e9      	bne.n	309a <parse_string_literal+0x332>
                                }
                                c = num;
    30c6:	693b      	ldr	r3, [r7, #16]
    30c8:	61bb      	str	r3, [r7, #24]
                            if (c >= '0' && c <= '7') {
    30ca:	bf00      	nop
                            } else {
                                // unrecognised escape character; CPython lets this through verbatim as '\' and then the character
                                vstr_add_char(&lex->vstr, '\\');
                            }
                            break;
    30cc:	e007      	b.n	30de <parse_string_literal+0x376>
                                vstr_add_char(&lex->vstr, '\\');
    30ce:	687b      	ldr	r3, [r7, #4]
    30d0:	3344      	adds	r3, #68	; 0x44
    30d2:	215c      	movs	r1, #92	; 0x5c
    30d4:	4618      	mov	r0, r3
    30d6:	f7fe fb45 	bl	1764 <vstr_add_char>
                            break;
    30da:	e000      	b.n	30de <parse_string_literal+0x376>
                        case '"': break;
    30dc:	bf00      	nop
                    }
                }
                if (c != MP_LEXER_EOF) {
    30de:	69bb      	ldr	r3, [r7, #24]
    30e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    30e4:	d019      	beq.n	311a <parse_string_literal+0x3b2>
                            // this raises a generic SyntaxError; could provide more info
                            lex->tok_kind = MP_TOKEN_INVALID;
                        }
                    } else {
                        // without unicode everything is just added as an 8-bit byte
                        if (c < 0x100) {
    30e6:	69bb      	ldr	r3, [r7, #24]
    30e8:	2bff      	cmp	r3, #255	; 0xff
    30ea:	d808      	bhi.n	30fe <parse_string_literal+0x396>
                            vstr_add_byte(&lex->vstr, c);
    30ec:	687b      	ldr	r3, [r7, #4]
    30ee:	3344      	adds	r3, #68	; 0x44
    30f0:	69ba      	ldr	r2, [r7, #24]
    30f2:	b2d2      	uxtb	r2, r2
    30f4:	4611      	mov	r1, r2
    30f6:	4618      	mov	r0, r3
    30f8:	f7fe fb22 	bl	1740 <vstr_add_byte>
    30fc:	e00d      	b.n	311a <parse_string_literal+0x3b2>
                        } else {
                            // 8-bit character out of range
                            // this raises a generic SyntaxError; could provide more info
                            lex->tok_kind = MP_TOKEN_INVALID;
    30fe:	687b      	ldr	r3, [r7, #4]
    3100:	2201      	movs	r2, #1
    3102:	641a      	str	r2, [r3, #64]	; 0x40
    3104:	e009      	b.n	311a <parse_string_literal+0x3b2>
                    }
                }
            } else {
                // Add the "character" as a byte so that we remain 8-bit clean.
                // This way, strings are parsed correctly whether or not they contain utf-8 chars.
                vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    3106:	687b      	ldr	r3, [r7, #4]
    3108:	f103 0244 	add.w	r2, r3, #68	; 0x44
    310c:	687b      	ldr	r3, [r7, #4]
    310e:	691b      	ldr	r3, [r3, #16]
    3110:	b2db      	uxtb	r3, r3
    3112:	4619      	mov	r1, r3
    3114:	4610      	mov	r0, r2
    3116:	f7fe fb13 	bl	1740 <vstr_add_byte>
            }
        }
        next_char(lex);
    311a:	6878      	ldr	r0, [r7, #4]
    311c:	f7ff fd44 	bl	2ba8 <next_char>
    while (!is_end(lex) && (num_quotes > 1 || !is_char(lex, '\n')) && n_closing < num_quotes) {
    3120:	6878      	ldr	r0, [r7, #4]
    3122:	f7ff fb71 	bl	2808 <is_end>
    3126:	4603      	mov	r3, r0
    3128:	f083 0301 	eor.w	r3, r3, #1
    312c:	b2db      	uxtb	r3, r3
    312e:	2b00      	cmp	r3, #0
    3130:	d011      	beq.n	3156 <parse_string_literal+0x3ee>
    3132:	6a3b      	ldr	r3, [r7, #32]
    3134:	2b01      	cmp	r3, #1
    3136:	d809      	bhi.n	314c <parse_string_literal+0x3e4>
    3138:	210a      	movs	r1, #10
    313a:	6878      	ldr	r0, [r7, #4]
    313c:	f7ff fb88 	bl	2850 <is_char>
    3140:	4603      	mov	r3, r0
    3142:	f083 0301 	eor.w	r3, r3, #1
    3146:	b2db      	uxtb	r3, r3
    3148:	2b00      	cmp	r3, #0
    314a:	d004      	beq.n	3156 <parse_string_literal+0x3ee>
    314c:	69fa      	ldr	r2, [r7, #28]
    314e:	6a3b      	ldr	r3, [r7, #32]
    3150:	429a      	cmp	r2, r3
    3152:	f4ff ae38 	bcc.w	2dc6 <parse_string_literal+0x5e>
    }

    // check we got the required end quotes
    if (n_closing < num_quotes) {
    3156:	69fa      	ldr	r2, [r7, #28]
    3158:	6a3b      	ldr	r3, [r7, #32]
    315a:	429a      	cmp	r2, r3
    315c:	d202      	bcs.n	3164 <parse_string_literal+0x3fc>
        lex->tok_kind = MP_TOKEN_LONELY_STRING_OPEN;
    315e:	687b      	ldr	r3, [r7, #4]
    3160:	2203      	movs	r2, #3
    3162:	641a      	str	r2, [r3, #64]	; 0x40
    }

    // cut off the end quotes from the token text
    vstr_cut_tail_bytes(&lex->vstr, n_closing);
    3164:	687b      	ldr	r3, [r7, #4]
    3166:	3344      	adds	r3, #68	; 0x44
    3168:	69f9      	ldr	r1, [r7, #28]
    316a:	4618      	mov	r0, r3
    316c:	f7fe fba4 	bl	18b8 <vstr_cut_tail_bytes>
}
    3170:	bf00      	nop
    3172:	3728      	adds	r7, #40	; 0x28
    3174:	46bd      	mov	sp, r7
    3176:	bd80      	pop	{r7, pc}
    3178:	0001fba0 	.word	0x0001fba0

0000317c <skip_whitespace>:

STATIC bool skip_whitespace(mp_lexer_t *lex, bool stop_at_newline) {
    317c:	b580      	push	{r7, lr}
    317e:	b084      	sub	sp, #16
    3180:	af00      	add	r7, sp, #0
    3182:	6078      	str	r0, [r7, #4]
    3184:	460b      	mov	r3, r1
    3186:	70fb      	strb	r3, [r7, #3]
    bool had_physical_newline = false;
    3188:	2300      	movs	r3, #0
    318a:	73fb      	strb	r3, [r7, #15]
    while (!is_end(lex)) {
    318c:	e04b      	b.n	3226 <skip_whitespace+0xaa>
        if (is_physical_newline(lex)) {
    318e:	6878      	ldr	r0, [r7, #4]
    3190:	f7ff fb4c 	bl	282c <is_physical_newline>
    3194:	4603      	mov	r3, r0
    3196:	2b00      	cmp	r3, #0
    3198:	d00c      	beq.n	31b4 <skip_whitespace+0x38>
            if (stop_at_newline && lex->nested_bracket_level == 0) {
    319a:	78fb      	ldrb	r3, [r7, #3]
    319c:	2b00      	cmp	r3, #0
    319e:	d003      	beq.n	31a8 <skip_whitespace+0x2c>
    31a0:	687b      	ldr	r3, [r7, #4]
    31a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31a4:	2b00      	cmp	r3, #0
    31a6:	d048      	beq.n	323a <skip_whitespace+0xbe>
                break;
            }
            had_physical_newline = true;
    31a8:	2301      	movs	r3, #1
    31aa:	73fb      	strb	r3, [r7, #15]
            next_char(lex);
    31ac:	6878      	ldr	r0, [r7, #4]
    31ae:	f7ff fcfb 	bl	2ba8 <next_char>
    31b2:	e038      	b.n	3226 <skip_whitespace+0xaa>
        } else if (is_whitespace(lex)) {
    31b4:	6878      	ldr	r0, [r7, #4]
    31b6:	f7ff fc13 	bl	29e0 <is_whitespace>
    31ba:	4603      	mov	r3, r0
    31bc:	2b00      	cmp	r3, #0
    31be:	d003      	beq.n	31c8 <skip_whitespace+0x4c>
            next_char(lex);
    31c0:	6878      	ldr	r0, [r7, #4]
    31c2:	f7ff fcf1 	bl	2ba8 <next_char>
    31c6:	e02e      	b.n	3226 <skip_whitespace+0xaa>
        } else if (is_char(lex, '#')) {
    31c8:	2123      	movs	r1, #35	; 0x23
    31ca:	6878      	ldr	r0, [r7, #4]
    31cc:	f7ff fb40 	bl	2850 <is_char>
    31d0:	4603      	mov	r3, r0
    31d2:	2b00      	cmp	r3, #0
    31d4:	d019      	beq.n	320a <skip_whitespace+0x8e>
            next_char(lex);
    31d6:	6878      	ldr	r0, [r7, #4]
    31d8:	f7ff fce6 	bl	2ba8 <next_char>
            while (!is_end(lex) && !is_physical_newline(lex)) {
    31dc:	e002      	b.n	31e4 <skip_whitespace+0x68>
                next_char(lex);
    31de:	6878      	ldr	r0, [r7, #4]
    31e0:	f7ff fce2 	bl	2ba8 <next_char>
            while (!is_end(lex) && !is_physical_newline(lex)) {
    31e4:	6878      	ldr	r0, [r7, #4]
    31e6:	f7ff fb0f 	bl	2808 <is_end>
    31ea:	4603      	mov	r3, r0
    31ec:	f083 0301 	eor.w	r3, r3, #1
    31f0:	b2db      	uxtb	r3, r3
    31f2:	2b00      	cmp	r3, #0
    31f4:	d017      	beq.n	3226 <skip_whitespace+0xaa>
    31f6:	6878      	ldr	r0, [r7, #4]
    31f8:	f7ff fb18 	bl	282c <is_physical_newline>
    31fc:	4603      	mov	r3, r0
    31fe:	f083 0301 	eor.w	r3, r3, #1
    3202:	b2db      	uxtb	r3, r3
    3204:	2b00      	cmp	r3, #0
    3206:	d1ea      	bne.n	31de <skip_whitespace+0x62>
    3208:	e00d      	b.n	3226 <skip_whitespace+0xaa>
            }
            // had_physical_newline will be set on next loop
        } else if (is_char_and(lex, '\\', '\n')) {
    320a:	220a      	movs	r2, #10
    320c:	215c      	movs	r1, #92	; 0x5c
    320e:	6878      	ldr	r0, [r7, #4]
    3210:	f7ff fbc8 	bl	29a4 <is_char_and>
    3214:	4603      	mov	r3, r0
    3216:	2b00      	cmp	r3, #0
    3218:	d011      	beq.n	323e <skip_whitespace+0xc2>
            // line-continuation, so don't set had_physical_newline
            next_char(lex);
    321a:	6878      	ldr	r0, [r7, #4]
    321c:	f7ff fcc4 	bl	2ba8 <next_char>
            next_char(lex);
    3220:	6878      	ldr	r0, [r7, #4]
    3222:	f7ff fcc1 	bl	2ba8 <next_char>
    while (!is_end(lex)) {
    3226:	6878      	ldr	r0, [r7, #4]
    3228:	f7ff faee 	bl	2808 <is_end>
    322c:	4603      	mov	r3, r0
    322e:	f083 0301 	eor.w	r3, r3, #1
    3232:	b2db      	uxtb	r3, r3
    3234:	2b00      	cmp	r3, #0
    3236:	d1aa      	bne.n	318e <skip_whitespace+0x12>
    3238:	e002      	b.n	3240 <skip_whitespace+0xc4>
                break;
    323a:	bf00      	nop
    323c:	e000      	b.n	3240 <skip_whitespace+0xc4>
        } else {
            break;
    323e:	bf00      	nop
        }
    }
    return had_physical_newline;
    3240:	7bfb      	ldrb	r3, [r7, #15]
}
    3242:	4618      	mov	r0, r3
    3244:	3710      	adds	r7, #16
    3246:	46bd      	mov	sp, r7
    3248:	bd80      	pop	{r7, pc}
    324a:	bf00      	nop

0000324c <mp_lexer_to_next>:

void mp_lexer_to_next(mp_lexer_t *lex) {
    324c:	b580      	push	{r7, lr}
    324e:	b08e      	sub	sp, #56	; 0x38
    3250:	af00      	add	r7, sp, #0
    3252:	6078      	str	r0, [r7, #4]
    // start new token text
    vstr_reset(&lex->vstr);
    3254:	687b      	ldr	r3, [r7, #4]
    3256:	3344      	adds	r3, #68	; 0x44
    3258:	4618      	mov	r0, r3
    325a:	f7ff fac7 	bl	27ec <vstr_reset>

    // skip white space and comments
    bool had_physical_newline = skip_whitespace(lex, false);
    325e:	2100      	movs	r1, #0
    3260:	6878      	ldr	r0, [r7, #4]
    3262:	f7ff ff8b 	bl	317c <skip_whitespace>
    3266:	4603      	mov	r3, r0
    3268:	75fb      	strb	r3, [r7, #23]

    // set token source information
    lex->tok_line = lex->line;
    326a:	687b      	ldr	r3, [r7, #4]
    326c:	69da      	ldr	r2, [r3, #28]
    326e:	687b      	ldr	r3, [r7, #4]
    3270:	639a      	str	r2, [r3, #56]	; 0x38
    lex->tok_column = lex->column;
    3272:	687b      	ldr	r3, [r7, #4]
    3274:	6a1a      	ldr	r2, [r3, #32]
    3276:	687b      	ldr	r3, [r7, #4]
    3278:	63da      	str	r2, [r3, #60]	; 0x3c

    if (lex->emit_dent < 0) {
    327a:	687b      	ldr	r3, [r7, #4]
    327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    327e:	2b00      	cmp	r3, #0
    3280:	da08      	bge.n	3294 <mp_lexer_to_next+0x48>
        lex->tok_kind = MP_TOKEN_DEDENT;
    3282:	687b      	ldr	r3, [r7, #4]
    3284:	2206      	movs	r2, #6
    3286:	641a      	str	r2, [r3, #64]	; 0x40
        lex->emit_dent += 1;
    3288:	687b      	ldr	r3, [r7, #4]
    328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    328c:	1c5a      	adds	r2, r3, #1
    328e:	687b      	ldr	r3, [r7, #4]
    3290:	625a      	str	r2, [r3, #36]	; 0x24
            } else if (lex->tok_kind == MP_TOKEN_DEL_PAREN_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACKET_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACE_CLOSE) {
                lex->nested_bracket_level -= 1;
            }
        }
    }
}
    3292:	e2b7      	b.n	3804 <mp_lexer_to_next+0x5b8>
    } else if (lex->emit_dent > 0) {
    3294:	687b      	ldr	r3, [r7, #4]
    3296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3298:	2b00      	cmp	r3, #0
    329a:	dd08      	ble.n	32ae <mp_lexer_to_next+0x62>
        lex->tok_kind = MP_TOKEN_INDENT;
    329c:	687b      	ldr	r3, [r7, #4]
    329e:	2205      	movs	r2, #5
    32a0:	641a      	str	r2, [r3, #64]	; 0x40
        lex->emit_dent -= 1;
    32a2:	687b      	ldr	r3, [r7, #4]
    32a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    32a6:	1e5a      	subs	r2, r3, #1
    32a8:	687b      	ldr	r3, [r7, #4]
    32aa:	625a      	str	r2, [r3, #36]	; 0x24
}
    32ac:	e2aa      	b.n	3804 <mp_lexer_to_next+0x5b8>
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    32ae:	7dfb      	ldrb	r3, [r7, #23]
    32b0:	2b00      	cmp	r3, #0
    32b2:	d03e      	beq.n	3332 <mp_lexer_to_next+0xe6>
    32b4:	687b      	ldr	r3, [r7, #4]
    32b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    32b8:	2b00      	cmp	r3, #0
    32ba:	d13a      	bne.n	3332 <mp_lexer_to_next+0xe6>
        lex->tok_kind = MP_TOKEN_NEWLINE;
    32bc:	687b      	ldr	r3, [r7, #4]
    32be:	2204      	movs	r2, #4
    32c0:	641a      	str	r2, [r3, #64]	; 0x40
        size_t num_spaces = lex->column - 1;
    32c2:	687b      	ldr	r3, [r7, #4]
    32c4:	6a1b      	ldr	r3, [r3, #32]
    32c6:	3b01      	subs	r3, #1
    32c8:	613b      	str	r3, [r7, #16]
        if (num_spaces == indent_top(lex)) {
    32ca:	6878      	ldr	r0, [r7, #4]
    32cc:	f7ff fcf8 	bl	2cc0 <indent_top>
    32d0:	4602      	mov	r2, r0
    32d2:	693b      	ldr	r3, [r7, #16]
    32d4:	429a      	cmp	r2, r3
    32d6:	f000 828e 	beq.w	37f6 <mp_lexer_to_next+0x5aa>
        } else if (num_spaces > indent_top(lex)) {
    32da:	6878      	ldr	r0, [r7, #4]
    32dc:	f7ff fcf0 	bl	2cc0 <indent_top>
    32e0:	4602      	mov	r2, r0
    32e2:	693b      	ldr	r3, [r7, #16]
    32e4:	429a      	cmp	r2, r3
    32e6:	d211      	bcs.n	330c <mp_lexer_to_next+0xc0>
            indent_push(lex, num_spaces);
    32e8:	6939      	ldr	r1, [r7, #16]
    32ea:	6878      	ldr	r0, [r7, #4]
    32ec:	f7ff fcba 	bl	2c64 <indent_push>
            lex->emit_dent += 1;
    32f0:	687b      	ldr	r3, [r7, #4]
    32f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    32f4:	1c5a      	adds	r2, r3, #1
    32f6:	687b      	ldr	r3, [r7, #4]
    32f8:	625a      	str	r2, [r3, #36]	; 0x24
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    32fa:	e27c      	b.n	37f6 <mp_lexer_to_next+0x5aa>
                indent_pop(lex);
    32fc:	6878      	ldr	r0, [r7, #4]
    32fe:	f7ff fcf3 	bl	2ce8 <indent_pop>
                lex->emit_dent -= 1;
    3302:	687b      	ldr	r3, [r7, #4]
    3304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3306:	1e5a      	subs	r2, r3, #1
    3308:	687b      	ldr	r3, [r7, #4]
    330a:	625a      	str	r2, [r3, #36]	; 0x24
            while (num_spaces < indent_top(lex)) {
    330c:	6878      	ldr	r0, [r7, #4]
    330e:	f7ff fcd7 	bl	2cc0 <indent_top>
    3312:	4602      	mov	r2, r0
    3314:	693b      	ldr	r3, [r7, #16]
    3316:	429a      	cmp	r2, r3
    3318:	d8f0      	bhi.n	32fc <mp_lexer_to_next+0xb0>
            if (num_spaces != indent_top(lex)) {
    331a:	6878      	ldr	r0, [r7, #4]
    331c:	f7ff fcd0 	bl	2cc0 <indent_top>
    3320:	4602      	mov	r2, r0
    3322:	693b      	ldr	r3, [r7, #16]
    3324:	429a      	cmp	r2, r3
    3326:	f000 8266 	beq.w	37f6 <mp_lexer_to_next+0x5aa>
                lex->tok_kind = MP_TOKEN_DEDENT_MISMATCH;
    332a:	687b      	ldr	r3, [r7, #4]
    332c:	2202      	movs	r2, #2
    332e:	641a      	str	r2, [r3, #64]	; 0x40
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    3330:	e261      	b.n	37f6 <mp_lexer_to_next+0x5aa>
    } else if (is_end(lex)) {
    3332:	6878      	ldr	r0, [r7, #4]
    3334:	f7ff fa68 	bl	2808 <is_end>
    3338:	4603      	mov	r3, r0
    333a:	2b00      	cmp	r3, #0
    333c:	d003      	beq.n	3346 <mp_lexer_to_next+0xfa>
        lex->tok_kind = MP_TOKEN_END;
    333e:	687b      	ldr	r3, [r7, #4]
    3340:	2200      	movs	r2, #0
    3342:	641a      	str	r2, [r3, #64]	; 0x40
}
    3344:	e25e      	b.n	3804 <mp_lexer_to_next+0x5b8>
    } else if (is_string_or_bytes(lex)) {
    3346:	6878      	ldr	r0, [r7, #4]
    3348:	f7ff fbb8 	bl	2abc <is_string_or_bytes>
    334c:	4603      	mov	r3, r0
    334e:	2b00      	cmp	r3, #0
    3350:	d06d      	beq.n	342e <mp_lexer_to_next+0x1e2>
        lex->tok_kind = MP_TOKEN_END;
    3352:	687b      	ldr	r3, [r7, #4]
    3354:	2200      	movs	r2, #0
    3356:	641a      	str	r2, [r3, #64]	; 0x40
            bool is_raw = false;
    3358:	2300      	movs	r3, #0
    335a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            mp_token_kind_t kind = MP_TOKEN_STRING;
    335e:	230a      	movs	r3, #10
    3360:	633b      	str	r3, [r7, #48]	; 0x30
            int n_char = 0;
    3362:	2300      	movs	r3, #0
    3364:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (is_char(lex, 'u')) {
    3366:	2175      	movs	r1, #117	; 0x75
    3368:	6878      	ldr	r0, [r7, #4]
    336a:	f7ff fa71 	bl	2850 <is_char>
    336e:	4603      	mov	r3, r0
    3370:	2b00      	cmp	r3, #0
    3372:	d002      	beq.n	337a <mp_lexer_to_next+0x12e>
                n_char = 1;
    3374:	2301      	movs	r3, #1
    3376:	62fb      	str	r3, [r7, #44]	; 0x2c
    3378:	e02e      	b.n	33d8 <mp_lexer_to_next+0x18c>
            } else if (is_char(lex, 'b')) {
    337a:	2162      	movs	r1, #98	; 0x62
    337c:	6878      	ldr	r0, [r7, #4]
    337e:	f7ff fa67 	bl	2850 <is_char>
    3382:	4603      	mov	r3, r0
    3384:	2b00      	cmp	r3, #0
    3386:	d010      	beq.n	33aa <mp_lexer_to_next+0x15e>
                kind = MP_TOKEN_BYTES;
    3388:	230b      	movs	r3, #11
    338a:	633b      	str	r3, [r7, #48]	; 0x30
                n_char = 1;
    338c:	2301      	movs	r3, #1
    338e:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (is_char_following(lex, 'r')) {
    3390:	2172      	movs	r1, #114	; 0x72
    3392:	6878      	ldr	r0, [r7, #4]
    3394:	f7ff fab6 	bl	2904 <is_char_following>
    3398:	4603      	mov	r3, r0
    339a:	2b00      	cmp	r3, #0
    339c:	d01c      	beq.n	33d8 <mp_lexer_to_next+0x18c>
                    is_raw = true;
    339e:	2301      	movs	r3, #1
    33a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    n_char = 2;
    33a4:	2302      	movs	r3, #2
    33a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    33a8:	e016      	b.n	33d8 <mp_lexer_to_next+0x18c>
            } else if (is_char(lex, 'r')) {
    33aa:	2172      	movs	r1, #114	; 0x72
    33ac:	6878      	ldr	r0, [r7, #4]
    33ae:	f7ff fa4f 	bl	2850 <is_char>
    33b2:	4603      	mov	r3, r0
    33b4:	2b00      	cmp	r3, #0
    33b6:	d00f      	beq.n	33d8 <mp_lexer_to_next+0x18c>
                is_raw = true;
    33b8:	2301      	movs	r3, #1
    33ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                n_char = 1;
    33be:	2301      	movs	r3, #1
    33c0:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (is_char_following(lex, 'b')) {
    33c2:	2162      	movs	r1, #98	; 0x62
    33c4:	6878      	ldr	r0, [r7, #4]
    33c6:	f7ff fa9d 	bl	2904 <is_char_following>
    33ca:	4603      	mov	r3, r0
    33cc:	2b00      	cmp	r3, #0
    33ce:	d003      	beq.n	33d8 <mp_lexer_to_next+0x18c>
                    kind = MP_TOKEN_BYTES;
    33d0:	230b      	movs	r3, #11
    33d2:	633b      	str	r3, [r7, #48]	; 0x30
                    n_char = 2;
    33d4:	2302      	movs	r3, #2
    33d6:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (lex->tok_kind == MP_TOKEN_END) {
    33d8:	687b      	ldr	r3, [r7, #4]
    33da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    33dc:	2b00      	cmp	r3, #0
    33de:	d103      	bne.n	33e8 <mp_lexer_to_next+0x19c>
                lex->tok_kind = kind;
    33e0:	687b      	ldr	r3, [r7, #4]
    33e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    33e4:	641a      	str	r2, [r3, #64]	; 0x40
    33e6:	e005      	b.n	33f4 <mp_lexer_to_next+0x1a8>
            } else if (lex->tok_kind != kind) {
    33e8:	687b      	ldr	r3, [r7, #4]
    33ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    33ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    33ee:	429a      	cmp	r2, r3
    33f0:	f040 8203 	bne.w	37fa <mp_lexer_to_next+0x5ae>
            if (n_char != 0) {
    33f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    33f6:	2b00      	cmp	r3, #0
    33f8:	d008      	beq.n	340c <mp_lexer_to_next+0x1c0>
                next_char(lex);
    33fa:	6878      	ldr	r0, [r7, #4]
    33fc:	f7ff fbd4 	bl	2ba8 <next_char>
                if (n_char == 2) {
    3400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3402:	2b02      	cmp	r3, #2
    3404:	d102      	bne.n	340c <mp_lexer_to_next+0x1c0>
                    next_char(lex);
    3406:	6878      	ldr	r0, [r7, #4]
    3408:	f7ff fbce 	bl	2ba8 <next_char>
            parse_string_literal(lex, is_raw);
    340c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    3410:	4619      	mov	r1, r3
    3412:	6878      	ldr	r0, [r7, #4]
    3414:	f7ff fca8 	bl	2d68 <parse_string_literal>
            skip_whitespace(lex, true);
    3418:	2101      	movs	r1, #1
    341a:	6878      	ldr	r0, [r7, #4]
    341c:	f7ff feae 	bl	317c <skip_whitespace>
        } while (is_string_or_bytes(lex));
    3420:	6878      	ldr	r0, [r7, #4]
    3422:	f7ff fb4b 	bl	2abc <is_string_or_bytes>
    3426:	4603      	mov	r3, r0
    3428:	2b00      	cmp	r3, #0
    342a:	d195      	bne.n	3358 <mp_lexer_to_next+0x10c>
}
    342c:	e1ea      	b.n	3804 <mp_lexer_to_next+0x5b8>
    } else if (is_head_of_identifier(lex)) {
    342e:	6878      	ldr	r0, [r7, #4]
    3430:	f7ff fb84 	bl	2b3c <is_head_of_identifier>
    3434:	4603      	mov	r3, r0
    3436:	2b00      	cmp	r3, #0
    3438:	d061      	beq.n	34fe <mp_lexer_to_next+0x2b2>
        lex->tok_kind = MP_TOKEN_NAME;
    343a:	687b      	ldr	r3, [r7, #4]
    343c:	2207      	movs	r2, #7
    343e:	641a      	str	r2, [r3, #64]	; 0x40
        vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    3440:	687b      	ldr	r3, [r7, #4]
    3442:	f103 0244 	add.w	r2, r3, #68	; 0x44
    3446:	687b      	ldr	r3, [r7, #4]
    3448:	691b      	ldr	r3, [r3, #16]
    344a:	b2db      	uxtb	r3, r3
    344c:	4619      	mov	r1, r3
    344e:	4610      	mov	r0, r2
    3450:	f7fe f976 	bl	1740 <vstr_add_byte>
        next_char(lex);
    3454:	6878      	ldr	r0, [r7, #4]
    3456:	f7ff fba7 	bl	2ba8 <next_char>
        while (!is_end(lex) && is_tail_of_identifier(lex)) {
    345a:	e00c      	b.n	3476 <mp_lexer_to_next+0x22a>
            vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    345c:	687b      	ldr	r3, [r7, #4]
    345e:	f103 0244 	add.w	r2, r3, #68	; 0x44
    3462:	687b      	ldr	r3, [r7, #4]
    3464:	691b      	ldr	r3, [r3, #16]
    3466:	b2db      	uxtb	r3, r3
    3468:	4619      	mov	r1, r3
    346a:	4610      	mov	r0, r2
    346c:	f7fe f968 	bl	1740 <vstr_add_byte>
            next_char(lex);
    3470:	6878      	ldr	r0, [r7, #4]
    3472:	f7ff fb99 	bl	2ba8 <next_char>
        while (!is_end(lex) && is_tail_of_identifier(lex)) {
    3476:	6878      	ldr	r0, [r7, #4]
    3478:	f7ff f9c6 	bl	2808 <is_end>
    347c:	4603      	mov	r3, r0
    347e:	f083 0301 	eor.w	r3, r3, #1
    3482:	b2db      	uxtb	r3, r3
    3484:	2b00      	cmp	r3, #0
    3486:	d005      	beq.n	3494 <mp_lexer_to_next+0x248>
    3488:	6878      	ldr	r0, [r7, #4]
    348a:	f7ff fb73 	bl	2b74 <is_tail_of_identifier>
    348e:	4603      	mov	r3, r0
    3490:	2b00      	cmp	r3, #0
    3492:	d1e3      	bne.n	345c <mp_lexer_to_next+0x210>
        const char *s = vstr_null_terminated_str(&lex->vstr);
    3494:	687b      	ldr	r3, [r7, #4]
    3496:	3344      	adds	r3, #68	; 0x44
    3498:	4618      	mov	r0, r3
    349a:	f7fe f935 	bl	1708 <vstr_null_terminated_str>
    349e:	60f8      	str	r0, [r7, #12]
        for (size_t i = 0; i < MP_ARRAY_SIZE(tok_kw); i++) {
    34a0:	2300      	movs	r3, #0
    34a2:	62bb      	str	r3, [r7, #40]	; 0x28
    34a4:	e027      	b.n	34f6 <mp_lexer_to_next+0x2aa>
            int cmp = strcmp(s, tok_kw[i]);
    34a6:	4aa7      	ldr	r2, [pc, #668]	; (3744 <mp_lexer_to_next+0x4f8>)
    34a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    34aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    34ae:	4619      	mov	r1, r3
    34b0:	68f8      	ldr	r0, [r7, #12]
    34b2:	f019 fdc1 	bl	1d038 <strcmp>
    34b6:	60b8      	str	r0, [r7, #8]
            if (cmp == 0) {
    34b8:	68bb      	ldr	r3, [r7, #8]
    34ba:	2b00      	cmp	r3, #0
    34bc:	d114      	bne.n	34e8 <mp_lexer_to_next+0x29c>
                lex->tok_kind = MP_TOKEN_KW_FALSE + i;
    34be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    34c0:	f103 020d 	add.w	r2, r3, #13
    34c4:	687b      	ldr	r3, [r7, #4]
    34c6:	641a      	str	r2, [r3, #64]	; 0x40
                if (lex->tok_kind == MP_TOKEN_KW___DEBUG__) {
    34c8:	687b      	ldr	r3, [r7, #4]
    34ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    34cc:	2b10      	cmp	r3, #16
    34ce:	f040 8196 	bne.w	37fe <mp_lexer_to_next+0x5b2>
                    lex->tok_kind = (MP_STATE_VM(mp_optimise_value) == 0 ? MP_TOKEN_KW_TRUE : MP_TOKEN_KW_FALSE);
    34d2:	4b9d      	ldr	r3, [pc, #628]	; (3748 <mp_lexer_to_next+0x4fc>)
    34d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    34d8:	2b00      	cmp	r3, #0
    34da:	d101      	bne.n	34e0 <mp_lexer_to_next+0x294>
    34dc:	220f      	movs	r2, #15
    34de:	e000      	b.n	34e2 <mp_lexer_to_next+0x296>
    34e0:	220d      	movs	r2, #13
    34e2:	687b      	ldr	r3, [r7, #4]
    34e4:	641a      	str	r2, [r3, #64]	; 0x40
                break;
    34e6:	e18a      	b.n	37fe <mp_lexer_to_next+0x5b2>
            } else if (cmp < 0) {
    34e8:	68bb      	ldr	r3, [r7, #8]
    34ea:	2b00      	cmp	r3, #0
    34ec:	f2c0 8189 	blt.w	3802 <mp_lexer_to_next+0x5b6>
        for (size_t i = 0; i < MP_ARRAY_SIZE(tok_kw); i++) {
    34f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    34f2:	3301      	adds	r3, #1
    34f4:	62bb      	str	r3, [r7, #40]	; 0x28
    34f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    34f8:	2b21      	cmp	r3, #33	; 0x21
    34fa:	d9d4      	bls.n	34a6 <mp_lexer_to_next+0x25a>
}
    34fc:	e182      	b.n	3804 <mp_lexer_to_next+0x5b8>
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    34fe:	6878      	ldr	r0, [r7, #4]
    3500:	f7ff fa8a 	bl	2a18 <is_digit>
    3504:	4603      	mov	r3, r0
    3506:	2b00      	cmp	r3, #0
    3508:	d10e      	bne.n	3528 <mp_lexer_to_next+0x2dc>
    350a:	212e      	movs	r1, #46	; 0x2e
    350c:	6878      	ldr	r0, [r7, #4]
    350e:	f7ff f99f 	bl	2850 <is_char>
    3512:	4603      	mov	r3, r0
    3514:	2b00      	cmp	r3, #0
    3516:	f000 80ad 	beq.w	3674 <mp_lexer_to_next+0x428>
    351a:	6878      	ldr	r0, [r7, #4]
    351c:	f7ff fa8a 	bl	2a34 <is_following_digit>
    3520:	4603      	mov	r3, r0
    3522:	2b00      	cmp	r3, #0
    3524:	f000 80a6 	beq.w	3674 <mp_lexer_to_next+0x428>
        bool forced_integer = false;
    3528:	2300      	movs	r3, #0
    352a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (is_char(lex, '.')) {
    352e:	212e      	movs	r1, #46	; 0x2e
    3530:	6878      	ldr	r0, [r7, #4]
    3532:	f7ff f98d 	bl	2850 <is_char>
    3536:	4603      	mov	r3, r0
    3538:	2b00      	cmp	r3, #0
    353a:	d003      	beq.n	3544 <mp_lexer_to_next+0x2f8>
            lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    353c:	687b      	ldr	r3, [r7, #4]
    353e:	2209      	movs	r2, #9
    3540:	641a      	str	r2, [r3, #64]	; 0x40
    3542:	e012      	b.n	356a <mp_lexer_to_next+0x31e>
            lex->tok_kind = MP_TOKEN_INTEGER;
    3544:	687b      	ldr	r3, [r7, #4]
    3546:	2208      	movs	r2, #8
    3548:	641a      	str	r2, [r3, #64]	; 0x40
            if (is_char(lex, '0') && is_following_base_char(lex)) {
    354a:	2130      	movs	r1, #48	; 0x30
    354c:	6878      	ldr	r0, [r7, #4]
    354e:	f7ff f97f 	bl	2850 <is_char>
    3552:	4603      	mov	r3, r0
    3554:	2b00      	cmp	r3, #0
    3556:	d008      	beq.n	356a <mp_lexer_to_next+0x31e>
    3558:	6878      	ldr	r0, [r7, #4]
    355a:	f7ff fa79 	bl	2a50 <is_following_base_char>
    355e:	4603      	mov	r3, r0
    3560:	2b00      	cmp	r3, #0
    3562:	d002      	beq.n	356a <mp_lexer_to_next+0x31e>
                forced_integer = true;
    3564:	2301      	movs	r3, #1
    3566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    356a:	687b      	ldr	r3, [r7, #4]
    356c:	f103 0244 	add.w	r2, r3, #68	; 0x44
    3570:	687b      	ldr	r3, [r7, #4]
    3572:	691b      	ldr	r3, [r3, #16]
    3574:	4619      	mov	r1, r3
    3576:	4610      	mov	r0, r2
    3578:	f7fe f8f4 	bl	1764 <vstr_add_char>
        next_char(lex);
    357c:	6878      	ldr	r0, [r7, #4]
    357e:	f7ff fb13 	bl	2ba8 <next_char>
        while (!is_end(lex)) {
    3582:	e06b      	b.n	365c <mp_lexer_to_next+0x410>
            if (!forced_integer && is_char_or(lex, 'e', 'E')) {
    3584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    3588:	f083 0301 	eor.w	r3, r3, #1
    358c:	b2db      	uxtb	r3, r3
    358e:	2b00      	cmp	r3, #0
    3590:	d02e      	beq.n	35f0 <mp_lexer_to_next+0x3a4>
    3592:	2245      	movs	r2, #69	; 0x45
    3594:	2165      	movs	r1, #101	; 0x65
    3596:	6878      	ldr	r0, [r7, #4]
    3598:	f7ff f96e 	bl	2878 <is_char_or>
    359c:	4603      	mov	r3, r0
    359e:	2b00      	cmp	r3, #0
    35a0:	d026      	beq.n	35f0 <mp_lexer_to_next+0x3a4>
                lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    35a2:	687b      	ldr	r3, [r7, #4]
    35a4:	2209      	movs	r2, #9
    35a6:	641a      	str	r2, [r3, #64]	; 0x40
                vstr_add_char(&lex->vstr, 'e');
    35a8:	687b      	ldr	r3, [r7, #4]
    35aa:	3344      	adds	r3, #68	; 0x44
    35ac:	2165      	movs	r1, #101	; 0x65
    35ae:	4618      	mov	r0, r3
    35b0:	f7fe f8d8 	bl	1764 <vstr_add_char>
                next_char(lex);
    35b4:	6878      	ldr	r0, [r7, #4]
    35b6:	f7ff faf7 	bl	2ba8 <next_char>
                if (is_char(lex, '+') || is_char(lex, '-')) {
    35ba:	212b      	movs	r1, #43	; 0x2b
    35bc:	6878      	ldr	r0, [r7, #4]
    35be:	f7ff f947 	bl	2850 <is_char>
    35c2:	4603      	mov	r3, r0
    35c4:	2b00      	cmp	r3, #0
    35c6:	d106      	bne.n	35d6 <mp_lexer_to_next+0x38a>
    35c8:	212d      	movs	r1, #45	; 0x2d
    35ca:	6878      	ldr	r0, [r7, #4]
    35cc:	f7ff f940 	bl	2850 <is_char>
    35d0:	4603      	mov	r3, r0
    35d2:	2b00      	cmp	r3, #0
    35d4:	d042      	beq.n	365c <mp_lexer_to_next+0x410>
                    vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    35d6:	687b      	ldr	r3, [r7, #4]
    35d8:	f103 0244 	add.w	r2, r3, #68	; 0x44
    35dc:	687b      	ldr	r3, [r7, #4]
    35de:	691b      	ldr	r3, [r3, #16]
    35e0:	4619      	mov	r1, r3
    35e2:	4610      	mov	r0, r2
    35e4:	f7fe f8be 	bl	1764 <vstr_add_char>
                    next_char(lex);
    35e8:	6878      	ldr	r0, [r7, #4]
    35ea:	f7ff fadd 	bl	2ba8 <next_char>
                if (is_char(lex, '+') || is_char(lex, '-')) {
    35ee:	e035      	b.n	365c <mp_lexer_to_next+0x410>
            } else if (is_letter(lex) || is_digit(lex) || is_char(lex, '.')) {
    35f0:	6878      	ldr	r0, [r7, #4]
    35f2:	f7ff fa03 	bl	29fc <is_letter>
    35f6:	4603      	mov	r3, r0
    35f8:	2b00      	cmp	r3, #0
    35fa:	d10c      	bne.n	3616 <mp_lexer_to_next+0x3ca>
    35fc:	6878      	ldr	r0, [r7, #4]
    35fe:	f7ff fa0b 	bl	2a18 <is_digit>
    3602:	4603      	mov	r3, r0
    3604:	2b00      	cmp	r3, #0
    3606:	d106      	bne.n	3616 <mp_lexer_to_next+0x3ca>
    3608:	212e      	movs	r1, #46	; 0x2e
    360a:	6878      	ldr	r0, [r7, #4]
    360c:	f7ff f920 	bl	2850 <is_char>
    3610:	4603      	mov	r3, r0
    3612:	2b00      	cmp	r3, #0
    3614:	d018      	beq.n	3648 <mp_lexer_to_next+0x3fc>
                if (is_char_or3(lex, '.', 'j', 'J')) {
    3616:	234a      	movs	r3, #74	; 0x4a
    3618:	226a      	movs	r2, #106	; 0x6a
    361a:	212e      	movs	r1, #46	; 0x2e
    361c:	6878      	ldr	r0, [r7, #4]
    361e:	f7ff f949 	bl	28b4 <is_char_or3>
    3622:	4603      	mov	r3, r0
    3624:	2b00      	cmp	r3, #0
    3626:	d002      	beq.n	362e <mp_lexer_to_next+0x3e2>
                    lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    3628:	687b      	ldr	r3, [r7, #4]
    362a:	2209      	movs	r2, #9
    362c:	641a      	str	r2, [r3, #64]	; 0x40
                vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    362e:	687b      	ldr	r3, [r7, #4]
    3630:	f103 0244 	add.w	r2, r3, #68	; 0x44
    3634:	687b      	ldr	r3, [r7, #4]
    3636:	691b      	ldr	r3, [r3, #16]
    3638:	4619      	mov	r1, r3
    363a:	4610      	mov	r0, r2
    363c:	f7fe f892 	bl	1764 <vstr_add_char>
                next_char(lex);
    3640:	6878      	ldr	r0, [r7, #4]
    3642:	f7ff fab1 	bl	2ba8 <next_char>
    3646:	e009      	b.n	365c <mp_lexer_to_next+0x410>
            } else if (is_char(lex, '_')) {
    3648:	215f      	movs	r1, #95	; 0x5f
    364a:	6878      	ldr	r0, [r7, #4]
    364c:	f7ff f900 	bl	2850 <is_char>
    3650:	4603      	mov	r3, r0
    3652:	2b00      	cmp	r3, #0
    3654:	d00c      	beq.n	3670 <mp_lexer_to_next+0x424>
                next_char(lex);
    3656:	6878      	ldr	r0, [r7, #4]
    3658:	f7ff faa6 	bl	2ba8 <next_char>
        while (!is_end(lex)) {
    365c:	6878      	ldr	r0, [r7, #4]
    365e:	f7ff f8d3 	bl	2808 <is_end>
    3662:	4603      	mov	r3, r0
    3664:	f083 0301 	eor.w	r3, r3, #1
    3668:	b2db      	uxtb	r3, r3
    366a:	2b00      	cmp	r3, #0
    366c:	d18a      	bne.n	3584 <mp_lexer_to_next+0x338>
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    366e:	e0c9      	b.n	3804 <mp_lexer_to_next+0x5b8>
                break;
    3670:	bf00      	nop
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    3672:	e0c7      	b.n	3804 <mp_lexer_to_next+0x5b8>
        const char *t = tok_enc;
    3674:	4b35      	ldr	r3, [pc, #212]	; (374c <mp_lexer_to_next+0x500>)
    3676:	623b      	str	r3, [r7, #32]
        size_t tok_enc_index = 0;
    3678:	2300      	movs	r3, #0
    367a:	61fb      	str	r3, [r7, #28]
        for (; *t != 0 && !is_char(lex, *t); t += 1) {
    367c:	e010      	b.n	36a0 <mp_lexer_to_next+0x454>
            if (*t == 'e' || *t == 'c') {
    367e:	6a3b      	ldr	r3, [r7, #32]
    3680:	781b      	ldrb	r3, [r3, #0]
    3682:	2b65      	cmp	r3, #101	; 0x65
    3684:	d003      	beq.n	368e <mp_lexer_to_next+0x442>
    3686:	6a3b      	ldr	r3, [r7, #32]
    3688:	781b      	ldrb	r3, [r3, #0]
    368a:	2b63      	cmp	r3, #99	; 0x63
    368c:	d102      	bne.n	3694 <mp_lexer_to_next+0x448>
                t += 1;
    368e:	6a3b      	ldr	r3, [r7, #32]
    3690:	3301      	adds	r3, #1
    3692:	623b      	str	r3, [r7, #32]
            tok_enc_index += 1;
    3694:	69fb      	ldr	r3, [r7, #28]
    3696:	3301      	adds	r3, #1
    3698:	61fb      	str	r3, [r7, #28]
        for (; *t != 0 && !is_char(lex, *t); t += 1) {
    369a:	6a3b      	ldr	r3, [r7, #32]
    369c:	3301      	adds	r3, #1
    369e:	623b      	str	r3, [r7, #32]
    36a0:	6a3b      	ldr	r3, [r7, #32]
    36a2:	781b      	ldrb	r3, [r3, #0]
    36a4:	2b00      	cmp	r3, #0
    36a6:	d00b      	beq.n	36c0 <mp_lexer_to_next+0x474>
    36a8:	6a3b      	ldr	r3, [r7, #32]
    36aa:	781b      	ldrb	r3, [r3, #0]
    36ac:	4619      	mov	r1, r3
    36ae:	6878      	ldr	r0, [r7, #4]
    36b0:	f7ff f8ce 	bl	2850 <is_char>
    36b4:	4603      	mov	r3, r0
    36b6:	f083 0301 	eor.w	r3, r3, #1
    36ba:	b2db      	uxtb	r3, r3
    36bc:	2b00      	cmp	r3, #0
    36be:	d1de      	bne.n	367e <mp_lexer_to_next+0x432>
        next_char(lex);
    36c0:	6878      	ldr	r0, [r7, #4]
    36c2:	f7ff fa71 	bl	2ba8 <next_char>
        if (*t == 0) {
    36c6:	6a3b      	ldr	r3, [r7, #32]
    36c8:	781b      	ldrb	r3, [r3, #0]
    36ca:	2b00      	cmp	r3, #0
    36cc:	d103      	bne.n	36d6 <mp_lexer_to_next+0x48a>
            lex->tok_kind = MP_TOKEN_INVALID;
    36ce:	687b      	ldr	r3, [r7, #4]
    36d0:	2201      	movs	r2, #1
    36d2:	641a      	str	r2, [r3, #64]	; 0x40
}
    36d4:	e096      	b.n	3804 <mp_lexer_to_next+0x5b8>
        } else if (*t == '!') {
    36d6:	6a3b      	ldr	r3, [r7, #32]
    36d8:	781b      	ldrb	r3, [r3, #0]
    36da:	2b21      	cmp	r3, #33	; 0x21
    36dc:	d111      	bne.n	3702 <mp_lexer_to_next+0x4b6>
            if (is_char(lex, '=')) {
    36de:	213d      	movs	r1, #61	; 0x3d
    36e0:	6878      	ldr	r0, [r7, #4]
    36e2:	f7ff f8b5 	bl	2850 <is_char>
    36e6:	4603      	mov	r3, r0
    36e8:	2b00      	cmp	r3, #0
    36ea:	d006      	beq.n	36fa <mp_lexer_to_next+0x4ae>
                next_char(lex);
    36ec:	6878      	ldr	r0, [r7, #4]
    36ee:	f7ff fa5b 	bl	2ba8 <next_char>
                lex->tok_kind = MP_TOKEN_OP_NOT_EQUAL;
    36f2:	687b      	ldr	r3, [r7, #4]
    36f4:	2241      	movs	r2, #65	; 0x41
    36f6:	641a      	str	r2, [r3, #64]	; 0x40
}
    36f8:	e084      	b.n	3804 <mp_lexer_to_next+0x5b8>
                lex->tok_kind = MP_TOKEN_INVALID;
    36fa:	687b      	ldr	r3, [r7, #4]
    36fc:	2201      	movs	r2, #1
    36fe:	641a      	str	r2, [r3, #64]	; 0x40
}
    3700:	e080      	b.n	3804 <mp_lexer_to_next+0x5b8>
        } else if (*t == '.') {
    3702:	6a3b      	ldr	r3, [r7, #32]
    3704:	781b      	ldrb	r3, [r3, #0]
    3706:	2b2e      	cmp	r3, #46	; 0x2e
    3708:	d115      	bne.n	3736 <mp_lexer_to_next+0x4ea>
            if (is_char_and(lex, '.', '.')) {
    370a:	222e      	movs	r2, #46	; 0x2e
    370c:	212e      	movs	r1, #46	; 0x2e
    370e:	6878      	ldr	r0, [r7, #4]
    3710:	f7ff f948 	bl	29a4 <is_char_and>
    3714:	4603      	mov	r3, r0
    3716:	2b00      	cmp	r3, #0
    3718:	d009      	beq.n	372e <mp_lexer_to_next+0x4e2>
                next_char(lex);
    371a:	6878      	ldr	r0, [r7, #4]
    371c:	f7ff fa44 	bl	2ba8 <next_char>
                next_char(lex);
    3720:	6878      	ldr	r0, [r7, #4]
    3722:	f7ff fa41 	bl	2ba8 <next_char>
                lex->tok_kind = MP_TOKEN_ELLIPSIS;
    3726:	687b      	ldr	r3, [r7, #4]
    3728:	220c      	movs	r2, #12
    372a:	641a      	str	r2, [r3, #64]	; 0x40
}
    372c:	e06a      	b.n	3804 <mp_lexer_to_next+0x5b8>
                lex->tok_kind = MP_TOKEN_DEL_PERIOD;
    372e:	687b      	ldr	r3, [r7, #4]
    3730:	224a      	movs	r2, #74	; 0x4a
    3732:	641a      	str	r2, [r3, #64]	; 0x40
}
    3734:	e066      	b.n	3804 <mp_lexer_to_next+0x5b8>
            t += 1;
    3736:	6a3b      	ldr	r3, [r7, #32]
    3738:	3301      	adds	r3, #1
    373a:	623b      	str	r3, [r7, #32]
            size_t t_index = tok_enc_index;
    373c:	69fb      	ldr	r3, [r7, #28]
    373e:	61bb      	str	r3, [r7, #24]
            while (*t == 'c' || *t == 'e') {
    3740:	e024      	b.n	378c <mp_lexer_to_next+0x540>
    3742:	bf00      	nop
    3744:	0001fb18 	.word	0x0001fb18
    3748:	200012f0 	.word	0x200012f0
    374c:	0001f9b4 	.word	0x0001f9b4
                t_index += 1;
    3750:	69bb      	ldr	r3, [r7, #24]
    3752:	3301      	adds	r3, #1
    3754:	61bb      	str	r3, [r7, #24]
                if (is_char(lex, t[1])) {
    3756:	6a3b      	ldr	r3, [r7, #32]
    3758:	3301      	adds	r3, #1
    375a:	781b      	ldrb	r3, [r3, #0]
    375c:	4619      	mov	r1, r3
    375e:	6878      	ldr	r0, [r7, #4]
    3760:	f7ff f876 	bl	2850 <is_char>
    3764:	4603      	mov	r3, r0
    3766:	2b00      	cmp	r3, #0
    3768:	d009      	beq.n	377e <mp_lexer_to_next+0x532>
                    next_char(lex);
    376a:	6878      	ldr	r0, [r7, #4]
    376c:	f7ff fa1c 	bl	2ba8 <next_char>
                    tok_enc_index = t_index;
    3770:	69bb      	ldr	r3, [r7, #24]
    3772:	61fb      	str	r3, [r7, #28]
                    if (*t == 'e') {
    3774:	6a3b      	ldr	r3, [r7, #32]
    3776:	781b      	ldrb	r3, [r3, #0]
    3778:	2b65      	cmp	r3, #101	; 0x65
    377a:	d104      	bne.n	3786 <mp_lexer_to_next+0x53a>
                        break;
    377c:	e010      	b.n	37a0 <mp_lexer_to_next+0x554>
                } else if (*t == 'c') {
    377e:	6a3b      	ldr	r3, [r7, #32]
    3780:	781b      	ldrb	r3, [r3, #0]
    3782:	2b63      	cmp	r3, #99	; 0x63
    3784:	d00b      	beq.n	379e <mp_lexer_to_next+0x552>
                t += 2;
    3786:	6a3b      	ldr	r3, [r7, #32]
    3788:	3302      	adds	r3, #2
    378a:	623b      	str	r3, [r7, #32]
            while (*t == 'c' || *t == 'e') {
    378c:	6a3b      	ldr	r3, [r7, #32]
    378e:	781b      	ldrb	r3, [r3, #0]
    3790:	2b63      	cmp	r3, #99	; 0x63
    3792:	d0dd      	beq.n	3750 <mp_lexer_to_next+0x504>
    3794:	6a3b      	ldr	r3, [r7, #32]
    3796:	781b      	ldrb	r3, [r3, #0]
    3798:	2b65      	cmp	r3, #101	; 0x65
    379a:	d0d9      	beq.n	3750 <mp_lexer_to_next+0x504>
    379c:	e000      	b.n	37a0 <mp_lexer_to_next+0x554>
                    break;
    379e:	bf00      	nop
            lex->tok_kind = tok_enc_kind[tok_enc_index];
    37a0:	4a1a      	ldr	r2, [pc, #104]	; (380c <mp_lexer_to_next+0x5c0>)
    37a2:	69fb      	ldr	r3, [r7, #28]
    37a4:	4413      	add	r3, r2
    37a6:	781b      	ldrb	r3, [r3, #0]
    37a8:	461a      	mov	r2, r3
    37aa:	687b      	ldr	r3, [r7, #4]
    37ac:	641a      	str	r2, [r3, #64]	; 0x40
            if (lex->tok_kind == MP_TOKEN_DEL_PAREN_OPEN || lex->tok_kind == MP_TOKEN_DEL_BRACKET_OPEN || lex->tok_kind == MP_TOKEN_DEL_BRACE_OPEN) {
    37ae:	687b      	ldr	r3, [r7, #4]
    37b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    37b2:	2b42      	cmp	r3, #66	; 0x42
    37b4:	d007      	beq.n	37c6 <mp_lexer_to_next+0x57a>
    37b6:	687b      	ldr	r3, [r7, #4]
    37b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    37ba:	2b44      	cmp	r3, #68	; 0x44
    37bc:	d003      	beq.n	37c6 <mp_lexer_to_next+0x57a>
    37be:	687b      	ldr	r3, [r7, #4]
    37c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    37c2:	2b46      	cmp	r3, #70	; 0x46
    37c4:	d105      	bne.n	37d2 <mp_lexer_to_next+0x586>
                lex->nested_bracket_level += 1;
    37c6:	687b      	ldr	r3, [r7, #4]
    37c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    37ca:	1c5a      	adds	r2, r3, #1
    37cc:	687b      	ldr	r3, [r7, #4]
    37ce:	629a      	str	r2, [r3, #40]	; 0x28
    37d0:	e018      	b.n	3804 <mp_lexer_to_next+0x5b8>
            } else if (lex->tok_kind == MP_TOKEN_DEL_PAREN_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACKET_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACE_CLOSE) {
    37d2:	687b      	ldr	r3, [r7, #4]
    37d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    37d6:	2b43      	cmp	r3, #67	; 0x43
    37d8:	d007      	beq.n	37ea <mp_lexer_to_next+0x59e>
    37da:	687b      	ldr	r3, [r7, #4]
    37dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    37de:	2b45      	cmp	r3, #69	; 0x45
    37e0:	d003      	beq.n	37ea <mp_lexer_to_next+0x59e>
    37e2:	687b      	ldr	r3, [r7, #4]
    37e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    37e6:	2b47      	cmp	r3, #71	; 0x47
    37e8:	d10c      	bne.n	3804 <mp_lexer_to_next+0x5b8>
                lex->nested_bracket_level -= 1;
    37ea:	687b      	ldr	r3, [r7, #4]
    37ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    37ee:	1e5a      	subs	r2, r3, #1
    37f0:	687b      	ldr	r3, [r7, #4]
    37f2:	629a      	str	r2, [r3, #40]	; 0x28
}
    37f4:	e006      	b.n	3804 <mp_lexer_to_next+0x5b8>
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    37f6:	bf00      	nop
    37f8:	e004      	b.n	3804 <mp_lexer_to_next+0x5b8>
                break;
    37fa:	bf00      	nop
    37fc:	e002      	b.n	3804 <mp_lexer_to_next+0x5b8>
                break;
    37fe:	bf00      	nop
    3800:	e000      	b.n	3804 <mp_lexer_to_next+0x5b8>
                break;
    3802:	bf00      	nop
}
    3804:	bf00      	nop
    3806:	3738      	adds	r7, #56	; 0x38
    3808:	46bd      	mov	sp, r7
    380a:	bd80      	pop	{r7, pc}
    380c:	0001f9fc 	.word	0x0001f9fc

00003810 <mp_lexer_new>:

mp_lexer_t *mp_lexer_new(qstr src_name, mp_reader_t reader) {
    3810:	b580      	push	{r7, lr}
    3812:	b086      	sub	sp, #24
    3814:	af00      	add	r7, sp, #0
    3816:	60f8      	str	r0, [r7, #12]
    3818:	4638      	mov	r0, r7
    381a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    mp_lexer_t *lex = m_new_obj(mp_lexer_t);
    381e:	2054      	movs	r0, #84	; 0x54
    3820:	f7fc fd7c 	bl	31c <m_malloc>
    3824:	6178      	str	r0, [r7, #20]

    lex->source_name = src_name;
    3826:	697b      	ldr	r3, [r7, #20]
    3828:	68fa      	ldr	r2, [r7, #12]
    382a:	601a      	str	r2, [r3, #0]
    lex->reader = reader;
    382c:	697b      	ldr	r3, [r7, #20]
    382e:	3304      	adds	r3, #4
    3830:	463a      	mov	r2, r7
    3832:	ca07      	ldmia	r2, {r0, r1, r2}
    3834:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lex->line = 1;
    3838:	697b      	ldr	r3, [r7, #20]
    383a:	2201      	movs	r2, #1
    383c:	61da      	str	r2, [r3, #28]
    lex->column = (size_t)-2; // account for 3 dummy bytes
    383e:	697b      	ldr	r3, [r7, #20]
    3840:	f06f 0201 	mvn.w	r2, #1
    3844:	621a      	str	r2, [r3, #32]
    lex->emit_dent = 0;
    3846:	697b      	ldr	r3, [r7, #20]
    3848:	2200      	movs	r2, #0
    384a:	625a      	str	r2, [r3, #36]	; 0x24
    lex->nested_bracket_level = 0;
    384c:	697b      	ldr	r3, [r7, #20]
    384e:	2200      	movs	r2, #0
    3850:	629a      	str	r2, [r3, #40]	; 0x28
    lex->alloc_indent_level = MICROPY_ALLOC_LEXER_INDENT_INIT;
    3852:	697b      	ldr	r3, [r7, #20]
    3854:	220a      	movs	r2, #10
    3856:	62da      	str	r2, [r3, #44]	; 0x2c
    lex->num_indent_level = 1;
    3858:	697b      	ldr	r3, [r7, #20]
    385a:	2201      	movs	r2, #1
    385c:	631a      	str	r2, [r3, #48]	; 0x30
    lex->indent_level = m_new(uint16_t, lex->alloc_indent_level);
    385e:	697b      	ldr	r3, [r7, #20]
    3860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3862:	005b      	lsls	r3, r3, #1
    3864:	4618      	mov	r0, r3
    3866:	f7fc fd59 	bl	31c <m_malloc>
    386a:	4602      	mov	r2, r0
    386c:	697b      	ldr	r3, [r7, #20]
    386e:	635a      	str	r2, [r3, #52]	; 0x34
    vstr_init(&lex->vstr, 32);
    3870:	697b      	ldr	r3, [r7, #20]
    3872:	3344      	adds	r3, #68	; 0x44
    3874:	2120      	movs	r1, #32
    3876:	4618      	mov	r0, r3
    3878:	f7fd fe0c 	bl	1494 <vstr_init>

    // store sentinel for first indentation level
    lex->indent_level[0] = 0;
    387c:	697b      	ldr	r3, [r7, #20]
    387e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3880:	2200      	movs	r2, #0
    3882:	801a      	strh	r2, [r3, #0]

    // load lexer with start of file, advancing lex->column to 1
    // start with dummy bytes and use next_char() for proper EOL/EOF handling
    lex->chr0 = lex->chr1 = lex->chr2 = 0;
    3884:	697b      	ldr	r3, [r7, #20]
    3886:	2200      	movs	r2, #0
    3888:	619a      	str	r2, [r3, #24]
    388a:	697b      	ldr	r3, [r7, #20]
    388c:	699a      	ldr	r2, [r3, #24]
    388e:	697b      	ldr	r3, [r7, #20]
    3890:	615a      	str	r2, [r3, #20]
    3892:	697b      	ldr	r3, [r7, #20]
    3894:	695a      	ldr	r2, [r3, #20]
    3896:	697b      	ldr	r3, [r7, #20]
    3898:	611a      	str	r2, [r3, #16]
    next_char(lex);
    389a:	6978      	ldr	r0, [r7, #20]
    389c:	f7ff f984 	bl	2ba8 <next_char>
    next_char(lex);
    38a0:	6978      	ldr	r0, [r7, #20]
    38a2:	f7ff f981 	bl	2ba8 <next_char>
    next_char(lex);
    38a6:	6978      	ldr	r0, [r7, #20]
    38a8:	f7ff f97e 	bl	2ba8 <next_char>

    // preload first token
    mp_lexer_to_next(lex);
    38ac:	6978      	ldr	r0, [r7, #20]
    38ae:	f7ff fccd 	bl	324c <mp_lexer_to_next>

    // Check that the first token is in the first column.  If it's not then we
    // convert the token kind to INDENT so that the parser gives a syntax error.
    if (lex->tok_column != 1) {
    38b2:	697b      	ldr	r3, [r7, #20]
    38b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    38b6:	2b01      	cmp	r3, #1
    38b8:	d002      	beq.n	38c0 <mp_lexer_new+0xb0>
        lex->tok_kind = MP_TOKEN_INDENT;
    38ba:	697b      	ldr	r3, [r7, #20]
    38bc:	2205      	movs	r2, #5
    38be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    return lex;
    38c0:	697b      	ldr	r3, [r7, #20]
}
    38c2:	4618      	mov	r0, r3
    38c4:	3718      	adds	r7, #24
    38c6:	46bd      	mov	sp, r7
    38c8:	bd80      	pop	{r7, pc}
    38ca:	bf00      	nop

000038cc <mp_lexer_new_from_str_len>:

mp_lexer_t *mp_lexer_new_from_str_len(qstr src_name, const char *str, size_t len, size_t free_len) {
    38cc:	b580      	push	{r7, lr}
    38ce:	b088      	sub	sp, #32
    38d0:	af00      	add	r7, sp, #0
    38d2:	60f8      	str	r0, [r7, #12]
    38d4:	60b9      	str	r1, [r7, #8]
    38d6:	607a      	str	r2, [r7, #4]
    38d8:	603b      	str	r3, [r7, #0]
    mp_reader_t reader;
    mp_reader_new_mem(&reader, (const byte*)str, len, free_len);
    38da:	f107 0014 	add.w	r0, r7, #20
    38de:	683b      	ldr	r3, [r7, #0]
    38e0:	687a      	ldr	r2, [r7, #4]
    38e2:	68b9      	ldr	r1, [r7, #8]
    38e4:	f7fe ff58 	bl	2798 <mp_reader_new_mem>
    return mp_lexer_new(src_name, reader);
    38e8:	f107 0314 	add.w	r3, r7, #20
    38ec:	cb0e      	ldmia	r3, {r1, r2, r3}
    38ee:	68f8      	ldr	r0, [r7, #12]
    38f0:	f7ff ff8e 	bl	3810 <mp_lexer_new>
    38f4:	4603      	mov	r3, r0
}
    38f6:	4618      	mov	r0, r3
    38f8:	3720      	adds	r7, #32
    38fa:	46bd      	mov	sp, r7
    38fc:	bd80      	pop	{r7, pc}
    38fe:	bf00      	nop

00003900 <mp_lexer_free>:

#endif

#endif

void mp_lexer_free(mp_lexer_t *lex) {
    3900:	b580      	push	{r7, lr}
    3902:	b082      	sub	sp, #8
    3904:	af00      	add	r7, sp, #0
    3906:	6078      	str	r0, [r7, #4]
    if (lex) {
    3908:	687b      	ldr	r3, [r7, #4]
    390a:	2b00      	cmp	r3, #0
    390c:	d012      	beq.n	3934 <mp_lexer_free+0x34>
        lex->reader.close(lex->reader.data);
    390e:	687b      	ldr	r3, [r7, #4]
    3910:	68db      	ldr	r3, [r3, #12]
    3912:	687a      	ldr	r2, [r7, #4]
    3914:	6852      	ldr	r2, [r2, #4]
    3916:	4610      	mov	r0, r2
    3918:	4798      	blx	r3
        vstr_clear(&lex->vstr);
    391a:	687b      	ldr	r3, [r7, #4]
    391c:	3344      	adds	r3, #68	; 0x44
    391e:	4618      	mov	r0, r3
    3920:	f7fd fe1c 	bl	155c <vstr_clear>
        m_del(uint16_t, lex->indent_level, lex->alloc_indent_level);
    3924:	687b      	ldr	r3, [r7, #4]
    3926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3928:	4618      	mov	r0, r3
    392a:	f7fc fd71 	bl	410 <m_free>
        m_del_obj(mp_lexer_t, lex);
    392e:	6878      	ldr	r0, [r7, #4]
    3930:	f7fc fd6e 	bl	410 <m_free>
    }
}
    3934:	bf00      	nop
    3936:	3708      	adds	r7, #8
    3938:	46bd      	mov	sp, r7
    393a:	bd80      	pop	{r7, pc}

0000393c <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
    393c:	b480      	push	{r7}
    393e:	b083      	sub	sp, #12
    3940:	af00      	add	r7, sp, #0
    3942:	6078      	str	r0, [r7, #4]
    3944:	687b      	ldr	r3, [r7, #4]
    3946:	f003 0301 	and.w	r3, r3, #1
    394a:	2b00      	cmp	r3, #0
    394c:	bf14      	ite	ne
    394e:	2301      	movne	r3, #1
    3950:	2300      	moveq	r3, #0
    3952:	b2db      	uxtb	r3, r3
    3954:	4618      	mov	r0, r3
    3956:	370c      	adds	r7, #12
    3958:	46bd      	mov	sp, r7
    395a:	f85d 7b04 	ldr.w	r7, [sp], #4
    395e:	4770      	bx	lr

00003960 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    3960:	b480      	push	{r7}
    3962:	b083      	sub	sp, #12
    3964:	af00      	add	r7, sp, #0
    3966:	6078      	str	r0, [r7, #4]
    3968:	687b      	ldr	r3, [r7, #4]
    396a:	f003 0303 	and.w	r3, r3, #3
    396e:	2b00      	cmp	r3, #0
    3970:	bf0c      	ite	eq
    3972:	2301      	moveq	r3, #1
    3974:	2300      	movne	r3, #0
    3976:	b2db      	uxtb	r3, r3
    3978:	4618      	mov	r0, r3
    397a:	370c      	adds	r7, #12
    397c:	46bd      	mov	sp, r7
    397e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3982:	4770      	bx	lr

00003984 <mp_parse_node_new_small_int>:
#define MP_PARSE_NODE_LEAF_ARG(pn) (((uintptr_t)(pn)) >> 4)
#define MP_PARSE_NODE_LEAF_SMALL_INT(pn) (((mp_int_t)(intptr_t)(pn)) >> 1)
#define MP_PARSE_NODE_STRUCT_KIND(pns) ((pns)->kind_num_nodes & 0xff)
#define MP_PARSE_NODE_STRUCT_NUM_NODES(pns) ((pns)->kind_num_nodes >> 8)

static inline mp_parse_node_t mp_parse_node_new_small_int(mp_int_t val) {
    3984:	b480      	push	{r7}
    3986:	b083      	sub	sp, #12
    3988:	af00      	add	r7, sp, #0
    398a:	6078      	str	r0, [r7, #4]
    return (mp_parse_node_t)(MP_PARSE_NODE_SMALL_INT | ((mp_uint_t)val << 1));
    398c:	687b      	ldr	r3, [r7, #4]
    398e:	005b      	lsls	r3, r3, #1
    3990:	f043 0301 	orr.w	r3, r3, #1
}
    3994:	4618      	mov	r0, r3
    3996:	370c      	adds	r7, #12
    3998:	46bd      	mov	sp, r7
    399a:	f85d 7b04 	ldr.w	r7, [sp], #4
    399e:	4770      	bx	lr

000039a0 <mp_parse_node_new_leaf>:
static inline mp_parse_node_t mp_parse_node_new_leaf(size_t kind, mp_int_t arg) {
    39a0:	b480      	push	{r7}
    39a2:	b083      	sub	sp, #12
    39a4:	af00      	add	r7, sp, #0
    39a6:	6078      	str	r0, [r7, #4]
    39a8:	6039      	str	r1, [r7, #0]
    return (mp_parse_node_t)(kind | ((mp_uint_t)arg << 4));
    39aa:	683b      	ldr	r3, [r7, #0]
    39ac:	011a      	lsls	r2, r3, #4
    39ae:	687b      	ldr	r3, [r7, #4]
    39b0:	4313      	orrs	r3, r2
}
    39b2:	4618      	mov	r0, r3
    39b4:	370c      	adds	r7, #12
    39b6:	46bd      	mov	sp, r7
    39b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    39bc:	4770      	bx	lr
    39be:	bf00      	nop

000039c0 <get_rule_arg>:
    #if MICROPY_COMP_CONST
    mp_map_t consts;
    #endif
} parser_t;

STATIC const uint16_t *get_rule_arg(uint8_t r_id) {
    39c0:	b480      	push	{r7}
    39c2:	b085      	sub	sp, #20
    39c4:	af00      	add	r7, sp, #0
    39c6:	4603      	mov	r3, r0
    39c8:	71fb      	strb	r3, [r7, #7]
    size_t off = rule_arg_offset_table[r_id];
    39ca:	79fb      	ldrb	r3, [r7, #7]
    39cc:	4a0a      	ldr	r2, [pc, #40]	; (39f8 <get_rule_arg+0x38>)
    39ce:	5cd3      	ldrb	r3, [r2, r3]
    39d0:	60fb      	str	r3, [r7, #12]
    if (r_id >= FIRST_RULE_WITH_OFFSET_ABOVE_255) {
    39d2:	79fb      	ldrb	r3, [r7, #7]
    39d4:	2266      	movs	r2, #102	; 0x66
    39d6:	4293      	cmp	r3, r2
    39d8:	d303      	bcc.n	39e2 <get_rule_arg+0x22>
        off |= 0x100;
    39da:	68fb      	ldr	r3, [r7, #12]
    39dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    39e0:	60fb      	str	r3, [r7, #12]
    }
    return &rule_arg_combined_table[off];
    39e2:	68fb      	ldr	r3, [r7, #12]
    39e4:	005b      	lsls	r3, r3, #1
    39e6:	4a05      	ldr	r2, [pc, #20]	; (39fc <get_rule_arg+0x3c>)
    39e8:	4413      	add	r3, r2
}
    39ea:	4618      	mov	r0, r3
    39ec:	3714      	adds	r7, #20
    39ee:	46bd      	mov	sp, r7
    39f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    39f4:	4770      	bx	lr
    39f6:	bf00      	nop
    39f8:	0001ffa0 	.word	0x0001ffa0
    39fc:	0001fc5c 	.word	0x0001fc5c

00003a00 <parser_alloc>:

STATIC void *parser_alloc(parser_t *parser, size_t num_bytes) {
    3a00:	b580      	push	{r7, lr}
    3a02:	b086      	sub	sp, #24
    3a04:	af00      	add	r7, sp, #0
    3a06:	6078      	str	r0, [r7, #4]
    3a08:	6039      	str	r1, [r7, #0]
    // use a custom memory allocator to store parse nodes sequentially in large chunks

    mp_parse_chunk_t *chunk = parser->cur_chunk;
    3a0a:	687b      	ldr	r3, [r7, #4]
    3a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3a0e:	617b      	str	r3, [r7, #20]

    if (chunk != NULL && chunk->union_.used + num_bytes > chunk->alloc) {
    3a10:	697b      	ldr	r3, [r7, #20]
    3a12:	2b00      	cmp	r3, #0
    3a14:	d031      	beq.n	3a7a <parser_alloc+0x7a>
    3a16:	697b      	ldr	r3, [r7, #20]
    3a18:	685a      	ldr	r2, [r3, #4]
    3a1a:	683b      	ldr	r3, [r7, #0]
    3a1c:	441a      	add	r2, r3
    3a1e:	697b      	ldr	r3, [r7, #20]
    3a20:	681b      	ldr	r3, [r3, #0]
    3a22:	429a      	cmp	r2, r3
    3a24:	d929      	bls.n	3a7a <parser_alloc+0x7a>
        // not enough room at end of previously allocated chunk so try to grow
        mp_parse_chunk_t *new_data = (mp_parse_chunk_t*)m_renew_maybe(byte, chunk,
    3a26:	697b      	ldr	r3, [r7, #20]
    3a28:	681a      	ldr	r2, [r3, #0]
    3a2a:	683b      	ldr	r3, [r7, #0]
    3a2c:	4413      	add	r3, r2
    3a2e:	3308      	adds	r3, #8
    3a30:	2200      	movs	r2, #0
    3a32:	4619      	mov	r1, r3
    3a34:	6978      	ldr	r0, [r7, #20]
    3a36:	f7fc fcd7 	bl	3e8 <m_realloc_maybe>
    3a3a:	60f8      	str	r0, [r7, #12]
            sizeof(mp_parse_chunk_t) + chunk->alloc,
            sizeof(mp_parse_chunk_t) + chunk->alloc + num_bytes, false);
        if (new_data == NULL) {
    3a3c:	68fb      	ldr	r3, [r7, #12]
    3a3e:	2b00      	cmp	r3, #0
    3a40:	d115      	bne.n	3a6e <parser_alloc+0x6e>
            // could not grow existing memory; shrink it to fit previous
            (void)m_renew_maybe(byte, chunk, sizeof(mp_parse_chunk_t) + chunk->alloc,
    3a42:	697b      	ldr	r3, [r7, #20]
    3a44:	685b      	ldr	r3, [r3, #4]
    3a46:	3308      	adds	r3, #8
    3a48:	2200      	movs	r2, #0
    3a4a:	4619      	mov	r1, r3
    3a4c:	6978      	ldr	r0, [r7, #20]
    3a4e:	f7fc fccb 	bl	3e8 <m_realloc_maybe>
                sizeof(mp_parse_chunk_t) + chunk->union_.used, false);
            chunk->alloc = chunk->union_.used;
    3a52:	697b      	ldr	r3, [r7, #20]
    3a54:	685a      	ldr	r2, [r3, #4]
    3a56:	697b      	ldr	r3, [r7, #20]
    3a58:	601a      	str	r2, [r3, #0]
            chunk->union_.next = parser->tree.chunk;
    3a5a:	687b      	ldr	r3, [r7, #4]
    3a5c:	6a1a      	ldr	r2, [r3, #32]
    3a5e:	697b      	ldr	r3, [r7, #20]
    3a60:	605a      	str	r2, [r3, #4]
            parser->tree.chunk = chunk;
    3a62:	687b      	ldr	r3, [r7, #4]
    3a64:	697a      	ldr	r2, [r7, #20]
    3a66:	621a      	str	r2, [r3, #32]
            chunk = NULL;
    3a68:	2300      	movs	r3, #0
    3a6a:	617b      	str	r3, [r7, #20]
    3a6c:	e005      	b.n	3a7a <parser_alloc+0x7a>
        } else {
            // could grow existing memory
            chunk->alloc += num_bytes;
    3a6e:	697b      	ldr	r3, [r7, #20]
    3a70:	681a      	ldr	r2, [r3, #0]
    3a72:	683b      	ldr	r3, [r7, #0]
    3a74:	441a      	add	r2, r3
    3a76:	697b      	ldr	r3, [r7, #20]
    3a78:	601a      	str	r2, [r3, #0]
        }
    }

    if (chunk == NULL) {
    3a7a:	697b      	ldr	r3, [r7, #20]
    3a7c:	2b00      	cmp	r3, #0
    3a7e:	d116      	bne.n	3aae <parser_alloc+0xae>
        // no previous chunk, allocate a new chunk
        size_t alloc = MICROPY_ALLOC_PARSE_CHUNK_INIT;
    3a80:	2310      	movs	r3, #16
    3a82:	613b      	str	r3, [r7, #16]
        if (alloc < num_bytes) {
    3a84:	693a      	ldr	r2, [r7, #16]
    3a86:	683b      	ldr	r3, [r7, #0]
    3a88:	429a      	cmp	r2, r3
    3a8a:	d201      	bcs.n	3a90 <parser_alloc+0x90>
            alloc = num_bytes;
    3a8c:	683b      	ldr	r3, [r7, #0]
    3a8e:	613b      	str	r3, [r7, #16]
        }
        chunk = (mp_parse_chunk_t*)m_new(byte, sizeof(mp_parse_chunk_t) + alloc);
    3a90:	693b      	ldr	r3, [r7, #16]
    3a92:	3308      	adds	r3, #8
    3a94:	4618      	mov	r0, r3
    3a96:	f7fc fc41 	bl	31c <m_malloc>
    3a9a:	6178      	str	r0, [r7, #20]
        chunk->alloc = alloc;
    3a9c:	697b      	ldr	r3, [r7, #20]
    3a9e:	693a      	ldr	r2, [r7, #16]
    3aa0:	601a      	str	r2, [r3, #0]
        chunk->union_.used = 0;
    3aa2:	697b      	ldr	r3, [r7, #20]
    3aa4:	2200      	movs	r2, #0
    3aa6:	605a      	str	r2, [r3, #4]
        parser->cur_chunk = chunk;
    3aa8:	687b      	ldr	r3, [r7, #4]
    3aaa:	697a      	ldr	r2, [r7, #20]
    3aac:	625a      	str	r2, [r3, #36]	; 0x24
    }

    byte *ret = chunk->data + chunk->union_.used;
    3aae:	697b      	ldr	r3, [r7, #20]
    3ab0:	f103 0208 	add.w	r2, r3, #8
    3ab4:	697b      	ldr	r3, [r7, #20]
    3ab6:	685b      	ldr	r3, [r3, #4]
    3ab8:	4413      	add	r3, r2
    3aba:	60bb      	str	r3, [r7, #8]
    chunk->union_.used += num_bytes;
    3abc:	697b      	ldr	r3, [r7, #20]
    3abe:	685a      	ldr	r2, [r3, #4]
    3ac0:	683b      	ldr	r3, [r7, #0]
    3ac2:	441a      	add	r2, r3
    3ac4:	697b      	ldr	r3, [r7, #20]
    3ac6:	605a      	str	r2, [r3, #4]
    return ret;
    3ac8:	68bb      	ldr	r3, [r7, #8]
}
    3aca:	4618      	mov	r0, r3
    3acc:	3718      	adds	r7, #24
    3ace:	46bd      	mov	sp, r7
    3ad0:	bd80      	pop	{r7, pc}
    3ad2:	bf00      	nop

00003ad4 <push_rule>:

STATIC void push_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t arg_i) {
    3ad4:	b580      	push	{r7, lr}
    3ad6:	b086      	sub	sp, #24
    3ad8:	af00      	add	r7, sp, #0
    3ada:	60f8      	str	r0, [r7, #12]
    3adc:	60b9      	str	r1, [r7, #8]
    3ade:	603b      	str	r3, [r7, #0]
    3ae0:	4613      	mov	r3, r2
    3ae2:	71fb      	strb	r3, [r7, #7]
    if (parser->rule_stack_top >= parser->rule_stack_alloc) {
    3ae4:	68fb      	ldr	r3, [r7, #12]
    3ae6:	685a      	ldr	r2, [r3, #4]
    3ae8:	68fb      	ldr	r3, [r7, #12]
    3aea:	681b      	ldr	r3, [r3, #0]
    3aec:	429a      	cmp	r2, r3
    3aee:	d313      	bcc.n	3b18 <push_rule+0x44>
        rule_stack_t *rs = m_renew(rule_stack_t, parser->rule_stack, parser->rule_stack_alloc, parser->rule_stack_alloc + MICROPY_ALLOC_PARSE_RULE_INC);
    3af0:	68fb      	ldr	r3, [r7, #12]
    3af2:	689a      	ldr	r2, [r3, #8]
    3af4:	68fb      	ldr	r3, [r7, #12]
    3af6:	681b      	ldr	r3, [r3, #0]
    3af8:	3310      	adds	r3, #16
    3afa:	00db      	lsls	r3, r3, #3
    3afc:	4619      	mov	r1, r3
    3afe:	4610      	mov	r0, r2
    3b00:	f7fc fc58 	bl	3b4 <m_realloc>
    3b04:	6178      	str	r0, [r7, #20]
        parser->rule_stack = rs;
    3b06:	68fb      	ldr	r3, [r7, #12]
    3b08:	697a      	ldr	r2, [r7, #20]
    3b0a:	609a      	str	r2, [r3, #8]
        parser->rule_stack_alloc += MICROPY_ALLOC_PARSE_RULE_INC;
    3b0c:	68fb      	ldr	r3, [r7, #12]
    3b0e:	681b      	ldr	r3, [r3, #0]
    3b10:	f103 0210 	add.w	r2, r3, #16
    3b14:	68fb      	ldr	r3, [r7, #12]
    3b16:	601a      	str	r2, [r3, #0]
    }
    rule_stack_t *rs = &parser->rule_stack[parser->rule_stack_top++];
    3b18:	68fb      	ldr	r3, [r7, #12]
    3b1a:	689a      	ldr	r2, [r3, #8]
    3b1c:	68fb      	ldr	r3, [r7, #12]
    3b1e:	685b      	ldr	r3, [r3, #4]
    3b20:	1c58      	adds	r0, r3, #1
    3b22:	68f9      	ldr	r1, [r7, #12]
    3b24:	6048      	str	r0, [r1, #4]
    3b26:	00db      	lsls	r3, r3, #3
    3b28:	4413      	add	r3, r2
    3b2a:	613b      	str	r3, [r7, #16]
    rs->src_line = src_line;
    3b2c:	68bb      	ldr	r3, [r7, #8]
    3b2e:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
    3b32:	693a      	ldr	r2, [r7, #16]
    3b34:	6813      	ldr	r3, [r2, #0]
    3b36:	f361 0317 	bfi	r3, r1, #0, #24
    3b3a:	6013      	str	r3, [r2, #0]
    rs->rule_id = rule_id;
    3b3c:	693b      	ldr	r3, [r7, #16]
    3b3e:	79fa      	ldrb	r2, [r7, #7]
    3b40:	70da      	strb	r2, [r3, #3]
    rs->arg_i = arg_i;
    3b42:	693b      	ldr	r3, [r7, #16]
    3b44:	683a      	ldr	r2, [r7, #0]
    3b46:	605a      	str	r2, [r3, #4]
}
    3b48:	bf00      	nop
    3b4a:	3718      	adds	r7, #24
    3b4c:	46bd      	mov	sp, r7
    3b4e:	bd80      	pop	{r7, pc}

00003b50 <push_rule_from_arg>:

STATIC void push_rule_from_arg(parser_t *parser, size_t arg) {
    3b50:	b580      	push	{r7, lr}
    3b52:	b084      	sub	sp, #16
    3b54:	af00      	add	r7, sp, #0
    3b56:	6078      	str	r0, [r7, #4]
    3b58:	6039      	str	r1, [r7, #0]
    assert((arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE || (arg & RULE_ARG_KIND_MASK) == RULE_ARG_OPT_RULE);
    3b5a:	683b      	ldr	r3, [r7, #0]
    3b5c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    3b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    3b64:	d00c      	beq.n	3b80 <push_rule_from_arg+0x30>
    3b66:	683b      	ldr	r3, [r7, #0]
    3b68:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    3b6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
    3b70:	d006      	beq.n	3b80 <push_rule_from_arg+0x30>
    3b72:	4b0c      	ldr	r3, [pc, #48]	; (3ba4 <push_rule_from_arg+0x54>)
    3b74:	4a0c      	ldr	r2, [pc, #48]	; (3ba8 <push_rule_from_arg+0x58>)
    3b76:	f44f 7199 	mov.w	r1, #306	; 0x132
    3b7a:	480c      	ldr	r0, [pc, #48]	; (3bac <push_rule_from_arg+0x5c>)
    3b7c:	f017 fe02 	bl	1b784 <__assert_func>
    size_t rule_id = arg & RULE_ARG_ARG_MASK;
    3b80:	683b      	ldr	r3, [r7, #0]
    3b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
    3b86:	60fb      	str	r3, [r7, #12]
    push_rule(parser, parser->lexer->tok_line, rule_id, 0);
    3b88:	687b      	ldr	r3, [r7, #4]
    3b8a:	699b      	ldr	r3, [r3, #24]
    3b8c:	6b99      	ldr	r1, [r3, #56]	; 0x38
    3b8e:	68fb      	ldr	r3, [r7, #12]
    3b90:	b2da      	uxtb	r2, r3
    3b92:	2300      	movs	r3, #0
    3b94:	6878      	ldr	r0, [r7, #4]
    3b96:	f7ff ff9d 	bl	3ad4 <push_rule>
}
    3b9a:	bf00      	nop
    3b9c:	3710      	adds	r7, #16
    3b9e:	46bd      	mov	sp, r7
    3ba0:	bd80      	pop	{r7, pc}
    3ba2:	bf00      	nop
    3ba4:	00020048 	.word	0x00020048
    3ba8:	0002021c 	.word	0x0002021c
    3bac:	000200a8 	.word	0x000200a8

00003bb0 <pop_rule>:

STATIC uint8_t pop_rule(parser_t *parser, size_t *arg_i, size_t *src_line) {
    3bb0:	b480      	push	{r7}
    3bb2:	b087      	sub	sp, #28
    3bb4:	af00      	add	r7, sp, #0
    3bb6:	60f8      	str	r0, [r7, #12]
    3bb8:	60b9      	str	r1, [r7, #8]
    3bba:	607a      	str	r2, [r7, #4]
    parser->rule_stack_top -= 1;
    3bbc:	68fb      	ldr	r3, [r7, #12]
    3bbe:	685b      	ldr	r3, [r3, #4]
    3bc0:	1e5a      	subs	r2, r3, #1
    3bc2:	68fb      	ldr	r3, [r7, #12]
    3bc4:	605a      	str	r2, [r3, #4]
    uint8_t rule_id = parser->rule_stack[parser->rule_stack_top].rule_id;
    3bc6:	68fb      	ldr	r3, [r7, #12]
    3bc8:	689a      	ldr	r2, [r3, #8]
    3bca:	68fb      	ldr	r3, [r7, #12]
    3bcc:	685b      	ldr	r3, [r3, #4]
    3bce:	00db      	lsls	r3, r3, #3
    3bd0:	4413      	add	r3, r2
    3bd2:	78db      	ldrb	r3, [r3, #3]
    3bd4:	75fb      	strb	r3, [r7, #23]
    *arg_i = parser->rule_stack[parser->rule_stack_top].arg_i;
    3bd6:	68fb      	ldr	r3, [r7, #12]
    3bd8:	689a      	ldr	r2, [r3, #8]
    3bda:	68fb      	ldr	r3, [r7, #12]
    3bdc:	685b      	ldr	r3, [r3, #4]
    3bde:	00db      	lsls	r3, r3, #3
    3be0:	4413      	add	r3, r2
    3be2:	685a      	ldr	r2, [r3, #4]
    3be4:	68bb      	ldr	r3, [r7, #8]
    3be6:	601a      	str	r2, [r3, #0]
    *src_line = parser->rule_stack[parser->rule_stack_top].src_line;
    3be8:	68fb      	ldr	r3, [r7, #12]
    3bea:	689a      	ldr	r2, [r3, #8]
    3bec:	68fb      	ldr	r3, [r7, #12]
    3bee:	685b      	ldr	r3, [r3, #4]
    3bf0:	00db      	lsls	r3, r3, #3
    3bf2:	4413      	add	r3, r2
    3bf4:	681b      	ldr	r3, [r3, #0]
    3bf6:	f3c3 0317 	ubfx	r3, r3, #0, #24
    3bfa:	461a      	mov	r2, r3
    3bfc:	687b      	ldr	r3, [r7, #4]
    3bfe:	601a      	str	r2, [r3, #0]
    return rule_id;
    3c00:	7dfb      	ldrb	r3, [r7, #23]
}
    3c02:	4618      	mov	r0, r3
    3c04:	371c      	adds	r7, #28
    3c06:	46bd      	mov	sp, r7
    3c08:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c0c:	4770      	bx	lr
    3c0e:	bf00      	nop

00003c10 <mp_parse_node_is_const_false>:

bool mp_parse_node_is_const_false(mp_parse_node_t pn) {
    3c10:	b480      	push	{r7}
    3c12:	b083      	sub	sp, #12
    3c14:	af00      	add	r7, sp, #0
    3c16:	6078      	str	r0, [r7, #4]
    return MP_PARSE_NODE_IS_TOKEN_KIND(pn, MP_TOKEN_KW_FALSE)
        || (MP_PARSE_NODE_IS_SMALL_INT(pn) && MP_PARSE_NODE_LEAF_SMALL_INT(pn) == 0);
    3c18:	687b      	ldr	r3, [r7, #4]
    3c1a:	2bde      	cmp	r3, #222	; 0xde
    3c1c:	d008      	beq.n	3c30 <mp_parse_node_is_const_false+0x20>
    3c1e:	687b      	ldr	r3, [r7, #4]
    3c20:	f003 0301 	and.w	r3, r3, #1
    3c24:	2b00      	cmp	r3, #0
    3c26:	d005      	beq.n	3c34 <mp_parse_node_is_const_false+0x24>
    3c28:	687b      	ldr	r3, [r7, #4]
    3c2a:	105b      	asrs	r3, r3, #1
    3c2c:	2b00      	cmp	r3, #0
    3c2e:	d101      	bne.n	3c34 <mp_parse_node_is_const_false+0x24>
    3c30:	2301      	movs	r3, #1
    3c32:	e000      	b.n	3c36 <mp_parse_node_is_const_false+0x26>
    3c34:	2300      	movs	r3, #0
    return MP_PARSE_NODE_IS_TOKEN_KIND(pn, MP_TOKEN_KW_FALSE)
    3c36:	f003 0301 	and.w	r3, r3, #1
    3c3a:	b2db      	uxtb	r3, r3
}
    3c3c:	4618      	mov	r0, r3
    3c3e:	370c      	adds	r7, #12
    3c40:	46bd      	mov	sp, r7
    3c42:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c46:	4770      	bx	lr

00003c48 <mp_parse_node_is_const_true>:

bool mp_parse_node_is_const_true(mp_parse_node_t pn) {
    3c48:	b480      	push	{r7}
    3c4a:	b083      	sub	sp, #12
    3c4c:	af00      	add	r7, sp, #0
    3c4e:	6078      	str	r0, [r7, #4]
    return MP_PARSE_NODE_IS_TOKEN_KIND(pn, MP_TOKEN_KW_TRUE)
        || (MP_PARSE_NODE_IS_SMALL_INT(pn) && MP_PARSE_NODE_LEAF_SMALL_INT(pn) != 0);
    3c50:	687b      	ldr	r3, [r7, #4]
    3c52:	2bfe      	cmp	r3, #254	; 0xfe
    3c54:	d008      	beq.n	3c68 <mp_parse_node_is_const_true+0x20>
    3c56:	687b      	ldr	r3, [r7, #4]
    3c58:	f003 0301 	and.w	r3, r3, #1
    3c5c:	2b00      	cmp	r3, #0
    3c5e:	d005      	beq.n	3c6c <mp_parse_node_is_const_true+0x24>
    3c60:	687b      	ldr	r3, [r7, #4]
    3c62:	105b      	asrs	r3, r3, #1
    3c64:	2b00      	cmp	r3, #0
    3c66:	d001      	beq.n	3c6c <mp_parse_node_is_const_true+0x24>
    3c68:	2301      	movs	r3, #1
    3c6a:	e000      	b.n	3c6e <mp_parse_node_is_const_true+0x26>
    3c6c:	2300      	movs	r3, #0
    return MP_PARSE_NODE_IS_TOKEN_KIND(pn, MP_TOKEN_KW_TRUE)
    3c6e:	f003 0301 	and.w	r3, r3, #1
    3c72:	b2db      	uxtb	r3, r3
}
    3c74:	4618      	mov	r0, r3
    3c76:	370c      	adds	r7, #12
    3c78:	46bd      	mov	sp, r7
    3c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c7e:	4770      	bx	lr

00003c80 <mp_parse_node_get_int_maybe>:

bool mp_parse_node_get_int_maybe(mp_parse_node_t pn, mp_obj_t *o) {
    3c80:	b580      	push	{r7, lr}
    3c82:	b084      	sub	sp, #16
    3c84:	af00      	add	r7, sp, #0
    3c86:	6078      	str	r0, [r7, #4]
    3c88:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_SMALL_INT(pn)) {
    3c8a:	687b      	ldr	r3, [r7, #4]
    3c8c:	f003 0301 	and.w	r3, r3, #1
    3c90:	2b00      	cmp	r3, #0
    3c92:	d007      	beq.n	3ca4 <mp_parse_node_get_int_maybe+0x24>
        *o = MP_OBJ_NEW_SMALL_INT(MP_PARSE_NODE_LEAF_SMALL_INT(pn));
    3c94:	687b      	ldr	r3, [r7, #4]
    3c96:	f043 0301 	orr.w	r3, r3, #1
    3c9a:	461a      	mov	r2, r3
    3c9c:	683b      	ldr	r3, [r7, #0]
    3c9e:	601a      	str	r2, [r3, #0]
        return true;
    3ca0:	2301      	movs	r3, #1
    3ca2:	e031      	b.n	3d08 <mp_parse_node_get_int_maybe+0x88>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, RULE_const_object)) {
    3ca4:	687b      	ldr	r3, [r7, #4]
    3ca6:	2b00      	cmp	r3, #0
    3ca8:	d02d      	beq.n	3d06 <mp_parse_node_get_int_maybe+0x86>
    3caa:	687b      	ldr	r3, [r7, #4]
    3cac:	f003 0303 	and.w	r3, r3, #3
    3cb0:	2b00      	cmp	r3, #0
    3cb2:	d128      	bne.n	3d06 <mp_parse_node_get_int_maybe+0x86>
    3cb4:	687b      	ldr	r3, [r7, #4]
    3cb6:	685b      	ldr	r3, [r3, #4]
    3cb8:	b2db      	uxtb	r3, r3
    3cba:	2b35      	cmp	r3, #53	; 0x35
    3cbc:	d123      	bne.n	3d06 <mp_parse_node_get_int_maybe+0x86>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    3cbe:	687b      	ldr	r3, [r7, #4]
    3cc0:	60fb      	str	r3, [r7, #12]
        #if MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_D
        // nodes are 32-bit pointers, but need to extract 64-bit object
        *o = (uint64_t)pns->nodes[0] | ((uint64_t)pns->nodes[1] << 32);
        #else
        *o = (mp_obj_t)pns->nodes[0];
    3cc2:	68fb      	ldr	r3, [r7, #12]
    3cc4:	689b      	ldr	r3, [r3, #8]
    3cc6:	461a      	mov	r2, r3
    3cc8:	683b      	ldr	r3, [r7, #0]
    3cca:	601a      	str	r2, [r3, #0]
        #endif
        return MP_OBJ_IS_INT(*o);
    3ccc:	683b      	ldr	r3, [r7, #0]
    3cce:	681b      	ldr	r3, [r3, #0]
    3cd0:	4618      	mov	r0, r3
    3cd2:	f7ff fe33 	bl	393c <MP_OBJ_IS_SMALL_INT>
    3cd6:	4603      	mov	r3, r0
    3cd8:	2b00      	cmp	r3, #0
    3cda:	d10d      	bne.n	3cf8 <mp_parse_node_get_int_maybe+0x78>
    3cdc:	683b      	ldr	r3, [r7, #0]
    3cde:	681b      	ldr	r3, [r3, #0]
    3ce0:	4618      	mov	r0, r3
    3ce2:	f7ff fe3d 	bl	3960 <MP_OBJ_IS_OBJ>
    3ce6:	4603      	mov	r3, r0
    3ce8:	2b00      	cmp	r3, #0
    3cea:	d007      	beq.n	3cfc <mp_parse_node_get_int_maybe+0x7c>
    3cec:	683b      	ldr	r3, [r7, #0]
    3cee:	681b      	ldr	r3, [r3, #0]
    3cf0:	681b      	ldr	r3, [r3, #0]
    3cf2:	4a07      	ldr	r2, [pc, #28]	; (3d10 <mp_parse_node_get_int_maybe+0x90>)
    3cf4:	4293      	cmp	r3, r2
    3cf6:	d101      	bne.n	3cfc <mp_parse_node_get_int_maybe+0x7c>
    3cf8:	2301      	movs	r3, #1
    3cfa:	e000      	b.n	3cfe <mp_parse_node_get_int_maybe+0x7e>
    3cfc:	2300      	movs	r3, #0
    3cfe:	f003 0301 	and.w	r3, r3, #1
    3d02:	b2db      	uxtb	r3, r3
    3d04:	e000      	b.n	3d08 <mp_parse_node_get_int_maybe+0x88>
    } else {
        return false;
    3d06:	2300      	movs	r3, #0
    }
}
    3d08:	4618      	mov	r0, r3
    3d0a:	3710      	adds	r7, #16
    3d0c:	46bd      	mov	sp, r7
    3d0e:	bd80      	pop	{r7, pc}
    3d10:	00022f80 	.word	0x00022f80

00003d14 <mp_parse_node_extract_list>:

int mp_parse_node_extract_list(mp_parse_node_t *pn, size_t pn_kind, mp_parse_node_t **nodes) {
    3d14:	b480      	push	{r7}
    3d16:	b087      	sub	sp, #28
    3d18:	af00      	add	r7, sp, #0
    3d1a:	60f8      	str	r0, [r7, #12]
    3d1c:	60b9      	str	r1, [r7, #8]
    3d1e:	607a      	str	r2, [r7, #4]
    if (MP_PARSE_NODE_IS_NULL(*pn)) {
    3d20:	68fb      	ldr	r3, [r7, #12]
    3d22:	681b      	ldr	r3, [r3, #0]
    3d24:	2b00      	cmp	r3, #0
    3d26:	d104      	bne.n	3d32 <mp_parse_node_extract_list+0x1e>
        *nodes = NULL;
    3d28:	687b      	ldr	r3, [r7, #4]
    3d2a:	2200      	movs	r2, #0
    3d2c:	601a      	str	r2, [r3, #0]
        return 0;
    3d2e:	2300      	movs	r3, #0
    3d30:	e020      	b.n	3d74 <mp_parse_node_extract_list+0x60>
    } else if (MP_PARSE_NODE_IS_LEAF(*pn)) {
    3d32:	68fb      	ldr	r3, [r7, #12]
    3d34:	681b      	ldr	r3, [r3, #0]
    3d36:	f003 0303 	and.w	r3, r3, #3
    3d3a:	2b00      	cmp	r3, #0
    3d3c:	d004      	beq.n	3d48 <mp_parse_node_extract_list+0x34>
        *nodes = pn;
    3d3e:	687b      	ldr	r3, [r7, #4]
    3d40:	68fa      	ldr	r2, [r7, #12]
    3d42:	601a      	str	r2, [r3, #0]
        return 1;
    3d44:	2301      	movs	r3, #1
    3d46:	e015      	b.n	3d74 <mp_parse_node_extract_list+0x60>
    } else {
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)(*pn);
    3d48:	68fb      	ldr	r3, [r7, #12]
    3d4a:	681b      	ldr	r3, [r3, #0]
    3d4c:	617b      	str	r3, [r7, #20]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) != pn_kind) {
    3d4e:	697b      	ldr	r3, [r7, #20]
    3d50:	685b      	ldr	r3, [r3, #4]
    3d52:	b2da      	uxtb	r2, r3
    3d54:	68bb      	ldr	r3, [r7, #8]
    3d56:	429a      	cmp	r2, r3
    3d58:	d004      	beq.n	3d64 <mp_parse_node_extract_list+0x50>
            *nodes = pn;
    3d5a:	687b      	ldr	r3, [r7, #4]
    3d5c:	68fa      	ldr	r2, [r7, #12]
    3d5e:	601a      	str	r2, [r3, #0]
            return 1;
    3d60:	2301      	movs	r3, #1
    3d62:	e007      	b.n	3d74 <mp_parse_node_extract_list+0x60>
        } else {
            *nodes = pns->nodes;
    3d64:	697b      	ldr	r3, [r7, #20]
    3d66:	f103 0208 	add.w	r2, r3, #8
    3d6a:	687b      	ldr	r3, [r7, #4]
    3d6c:	601a      	str	r2, [r3, #0]
            return MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    3d6e:	697b      	ldr	r3, [r7, #20]
    3d70:	685b      	ldr	r3, [r3, #4]
    3d72:	0a1b      	lsrs	r3, r3, #8
        }
    }
}
    3d74:	4618      	mov	r0, r3
    3d76:	371c      	adds	r7, #28
    3d78:	46bd      	mov	sp, r7
    3d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d7e:	4770      	bx	lr

00003d80 <pop_result>:
        mp_parse_node_print(parser->result_stack[i], 0);
    }
}
*/

STATIC mp_parse_node_t pop_result(parser_t *parser) {
    3d80:	b580      	push	{r7, lr}
    3d82:	b082      	sub	sp, #8
    3d84:	af00      	add	r7, sp, #0
    3d86:	6078      	str	r0, [r7, #4]
    assert(parser->result_stack_top > 0);
    3d88:	687b      	ldr	r3, [r7, #4]
    3d8a:	691b      	ldr	r3, [r3, #16]
    3d8c:	2b00      	cmp	r3, #0
    3d8e:	d106      	bne.n	3d9e <pop_result+0x1e>
    3d90:	4b0b      	ldr	r3, [pc, #44]	; (3dc0 <pop_result+0x40>)
    3d92:	4a0c      	ldr	r2, [pc, #48]	; (3dc4 <pop_result+0x44>)
    3d94:	f240 11a9 	movw	r1, #425	; 0x1a9
    3d98:	480b      	ldr	r0, [pc, #44]	; (3dc8 <pop_result+0x48>)
    3d9a:	f017 fcf3 	bl	1b784 <__assert_func>
    return parser->result_stack[--parser->result_stack_top];
    3d9e:	687b      	ldr	r3, [r7, #4]
    3da0:	695a      	ldr	r2, [r3, #20]
    3da2:	687b      	ldr	r3, [r7, #4]
    3da4:	691b      	ldr	r3, [r3, #16]
    3da6:	1e59      	subs	r1, r3, #1
    3da8:	687b      	ldr	r3, [r7, #4]
    3daa:	6119      	str	r1, [r3, #16]
    3dac:	687b      	ldr	r3, [r7, #4]
    3dae:	691b      	ldr	r3, [r3, #16]
    3db0:	009b      	lsls	r3, r3, #2
    3db2:	4413      	add	r3, r2
    3db4:	681b      	ldr	r3, [r3, #0]
}
    3db6:	4618      	mov	r0, r3
    3db8:	3708      	adds	r7, #8
    3dba:	46bd      	mov	sp, r7
    3dbc:	bd80      	pop	{r7, pc}
    3dbe:	bf00      	nop
    3dc0:	000200bc 	.word	0x000200bc
    3dc4:	00020230 	.word	0x00020230
    3dc8:	000200a8 	.word	0x000200a8

00003dcc <peek_result>:

STATIC mp_parse_node_t peek_result(parser_t *parser, size_t pos) {
    3dcc:	b580      	push	{r7, lr}
    3dce:	b082      	sub	sp, #8
    3dd0:	af00      	add	r7, sp, #0
    3dd2:	6078      	str	r0, [r7, #4]
    3dd4:	6039      	str	r1, [r7, #0]
    assert(parser->result_stack_top > pos);
    3dd6:	687b      	ldr	r3, [r7, #4]
    3dd8:	691a      	ldr	r2, [r3, #16]
    3dda:	683b      	ldr	r3, [r7, #0]
    3ddc:	429a      	cmp	r2, r3
    3dde:	d806      	bhi.n	3dee <peek_result+0x22>
    3de0:	4b0b      	ldr	r3, [pc, #44]	; (3e10 <peek_result+0x44>)
    3de2:	4a0c      	ldr	r2, [pc, #48]	; (3e14 <peek_result+0x48>)
    3de4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    3de8:	480b      	ldr	r0, [pc, #44]	; (3e18 <peek_result+0x4c>)
    3dea:	f017 fccb 	bl	1b784 <__assert_func>
    return parser->result_stack[parser->result_stack_top - 1 - pos];
    3dee:	687b      	ldr	r3, [r7, #4]
    3df0:	695a      	ldr	r2, [r3, #20]
    3df2:	687b      	ldr	r3, [r7, #4]
    3df4:	6919      	ldr	r1, [r3, #16]
    3df6:	683b      	ldr	r3, [r7, #0]
    3df8:	1acb      	subs	r3, r1, r3
    3dfa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3dfe:	3b01      	subs	r3, #1
    3e00:	009b      	lsls	r3, r3, #2
    3e02:	4413      	add	r3, r2
    3e04:	681b      	ldr	r3, [r3, #0]
}
    3e06:	4618      	mov	r0, r3
    3e08:	3708      	adds	r7, #8
    3e0a:	46bd      	mov	sp, r7
    3e0c:	bd80      	pop	{r7, pc}
    3e0e:	bf00      	nop
    3e10:	000200dc 	.word	0x000200dc
    3e14:	0002023c 	.word	0x0002023c
    3e18:	000200a8 	.word	0x000200a8

00003e1c <push_result_node>:

STATIC void push_result_node(parser_t *parser, mp_parse_node_t pn) {
    3e1c:	b580      	push	{r7, lr}
    3e1e:	b084      	sub	sp, #16
    3e20:	af00      	add	r7, sp, #0
    3e22:	6078      	str	r0, [r7, #4]
    3e24:	6039      	str	r1, [r7, #0]
    if (parser->result_stack_top >= parser->result_stack_alloc) {
    3e26:	687b      	ldr	r3, [r7, #4]
    3e28:	691a      	ldr	r2, [r3, #16]
    3e2a:	687b      	ldr	r3, [r7, #4]
    3e2c:	68db      	ldr	r3, [r3, #12]
    3e2e:	429a      	cmp	r2, r3
    3e30:	d313      	bcc.n	3e5a <push_result_node+0x3e>
        mp_parse_node_t *stack = m_renew(mp_parse_node_t, parser->result_stack, parser->result_stack_alloc, parser->result_stack_alloc + MICROPY_ALLOC_PARSE_RESULT_INC);
    3e32:	687b      	ldr	r3, [r7, #4]
    3e34:	695a      	ldr	r2, [r3, #20]
    3e36:	687b      	ldr	r3, [r7, #4]
    3e38:	68db      	ldr	r3, [r3, #12]
    3e3a:	3310      	adds	r3, #16
    3e3c:	009b      	lsls	r3, r3, #2
    3e3e:	4619      	mov	r1, r3
    3e40:	4610      	mov	r0, r2
    3e42:	f7fc fab7 	bl	3b4 <m_realloc>
    3e46:	60f8      	str	r0, [r7, #12]
        parser->result_stack = stack;
    3e48:	687b      	ldr	r3, [r7, #4]
    3e4a:	68fa      	ldr	r2, [r7, #12]
    3e4c:	615a      	str	r2, [r3, #20]
        parser->result_stack_alloc += MICROPY_ALLOC_PARSE_RESULT_INC;
    3e4e:	687b      	ldr	r3, [r7, #4]
    3e50:	68db      	ldr	r3, [r3, #12]
    3e52:	f103 0210 	add.w	r2, r3, #16
    3e56:	687b      	ldr	r3, [r7, #4]
    3e58:	60da      	str	r2, [r3, #12]
    }
    parser->result_stack[parser->result_stack_top++] = pn;
    3e5a:	687b      	ldr	r3, [r7, #4]
    3e5c:	695a      	ldr	r2, [r3, #20]
    3e5e:	687b      	ldr	r3, [r7, #4]
    3e60:	691b      	ldr	r3, [r3, #16]
    3e62:	1c58      	adds	r0, r3, #1
    3e64:	6879      	ldr	r1, [r7, #4]
    3e66:	6108      	str	r0, [r1, #16]
    3e68:	009b      	lsls	r3, r3, #2
    3e6a:	4413      	add	r3, r2
    3e6c:	683a      	ldr	r2, [r7, #0]
    3e6e:	601a      	str	r2, [r3, #0]
}
    3e70:	bf00      	nop
    3e72:	3710      	adds	r7, #16
    3e74:	46bd      	mov	sp, r7
    3e76:	bd80      	pop	{r7, pc}

00003e78 <make_node_const_object>:

STATIC mp_parse_node_t make_node_const_object(parser_t *parser, size_t src_line, mp_obj_t obj) {
    3e78:	b580      	push	{r7, lr}
    3e7a:	b086      	sub	sp, #24
    3e7c:	af00      	add	r7, sp, #0
    3e7e:	60f8      	str	r0, [r7, #12]
    3e80:	60b9      	str	r1, [r7, #8]
    3e82:	607a      	str	r2, [r7, #4]
    mp_parse_node_struct_t *pn = parser_alloc(parser, sizeof(mp_parse_node_struct_t) + sizeof(mp_obj_t));
    3e84:	210c      	movs	r1, #12
    3e86:	68f8      	ldr	r0, [r7, #12]
    3e88:	f7ff fdba 	bl	3a00 <parser_alloc>
    3e8c:	6178      	str	r0, [r7, #20]
    pn->source_line = src_line;
    3e8e:	697b      	ldr	r3, [r7, #20]
    3e90:	68ba      	ldr	r2, [r7, #8]
    3e92:	601a      	str	r2, [r3, #0]
    // nodes are 32-bit pointers, but need to store 64-bit object
    pn->kind_num_nodes = RULE_const_object | (2 << 8);
    pn->nodes[0] = (uint64_t)obj;
    pn->nodes[1] = (uint64_t)obj >> 32;
    #else
    pn->kind_num_nodes = RULE_const_object | (1 << 8);
    3e94:	697b      	ldr	r3, [r7, #20]
    3e96:	f240 1235 	movw	r2, #309	; 0x135
    3e9a:	605a      	str	r2, [r3, #4]
    pn->nodes[0] = (uintptr_t)obj;
    3e9c:	687a      	ldr	r2, [r7, #4]
    3e9e:	697b      	ldr	r3, [r7, #20]
    3ea0:	609a      	str	r2, [r3, #8]
    #endif
    return (mp_parse_node_t)pn;
    3ea2:	697b      	ldr	r3, [r7, #20]
}
    3ea4:	4618      	mov	r0, r3
    3ea6:	3718      	adds	r7, #24
    3ea8:	46bd      	mov	sp, r7
    3eaa:	bd80      	pop	{r7, pc}

00003eac <mp_parse_node_new_small_int_checked>:

STATIC mp_parse_node_t mp_parse_node_new_small_int_checked(parser_t *parser, mp_obj_t o_val) {
    3eac:	b580      	push	{r7, lr}
    3eae:	b084      	sub	sp, #16
    3eb0:	af00      	add	r7, sp, #0
    3eb2:	6078      	str	r0, [r7, #4]
    3eb4:	6039      	str	r1, [r7, #0]
    (void)parser;
    mp_int_t val = MP_OBJ_SMALL_INT_VALUE(o_val);
    3eb6:	683b      	ldr	r3, [r7, #0]
    3eb8:	105b      	asrs	r3, r3, #1
    3eba:	60fb      	str	r3, [r7, #12]
    // A parse node is only 32-bits and the small-int value must fit in 31-bits
    if (((val ^ (val << 1)) & 0xffffffff80000000) != 0) {
        return make_node_const_object(parser, 0, o_val);
    }
    #endif
    return mp_parse_node_new_small_int(val);
    3ebc:	68f8      	ldr	r0, [r7, #12]
    3ebe:	f7ff fd61 	bl	3984 <mp_parse_node_new_small_int>
    3ec2:	4603      	mov	r3, r0
}
    3ec4:	4618      	mov	r0, r3
    3ec6:	3710      	adds	r7, #16
    3ec8:	46bd      	mov	sp, r7
    3eca:	bd80      	pop	{r7, pc}

00003ecc <push_result_token>:

STATIC void push_result_token(parser_t *parser, uint8_t rule_id) {
    3ecc:	b580      	push	{r7, lr}
    3ece:	b08c      	sub	sp, #48	; 0x30
    3ed0:	af02      	add	r7, sp, #8
    3ed2:	6078      	str	r0, [r7, #4]
    3ed4:	460b      	mov	r3, r1
    3ed6:	70fb      	strb	r3, [r7, #3]
    mp_parse_node_t pn;
    mp_lexer_t *lex = parser->lexer;
    3ed8:	687b      	ldr	r3, [r7, #4]
    3eda:	699b      	ldr	r3, [r3, #24]
    3edc:	61fb      	str	r3, [r7, #28]
    if (lex->tok_kind == MP_TOKEN_NAME) {
    3ede:	69fb      	ldr	r3, [r7, #28]
    3ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3ee2:	2b07      	cmp	r3, #7
    3ee4:	d10f      	bne.n	3f06 <push_result_token+0x3a>
        qstr id = qstr_from_strn(lex->vstr.buf, lex->vstr.len);
    3ee6:	69fb      	ldr	r3, [r7, #28]
    3ee8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3eea:	69fb      	ldr	r3, [r7, #28]
    3eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3eee:	4619      	mov	r1, r3
    3ef0:	4610      	mov	r0, r2
    3ef2:	f7fd f96d 	bl	11d0 <qstr_from_strn>
    3ef6:	61b8      	str	r0, [r7, #24]
        } else {
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_ID, id);
        }
        #else
        (void)rule_id;
        pn = mp_parse_node_new_leaf(MP_PARSE_NODE_ID, id);
    3ef8:	69bb      	ldr	r3, [r7, #24]
    3efa:	4619      	mov	r1, r3
    3efc:	2002      	movs	r0, #2
    3efe:	f7ff fd4f 	bl	39a0 <mp_parse_node_new_leaf>
    3f02:	6278      	str	r0, [r7, #36]	; 0x24
    3f04:	e08a      	b.n	401c <push_result_token+0x150>
        #endif
    } else if (lex->tok_kind == MP_TOKEN_INTEGER) {
    3f06:	69fb      	ldr	r3, [r7, #28]
    3f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3f0a:	2b08      	cmp	r3, #8
    3f0c:	d11d      	bne.n	3f4a <push_result_token+0x7e>
        mp_obj_t o = mp_parse_num_integer(lex->vstr.buf, lex->vstr.len, 0, lex);
    3f0e:	69fb      	ldr	r3, [r7, #28]
    3f10:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    3f12:	69fb      	ldr	r3, [r7, #28]
    3f14:	6c99      	ldr	r1, [r3, #72]	; 0x48
    3f16:	69fb      	ldr	r3, [r7, #28]
    3f18:	2200      	movs	r2, #0
    3f1a:	f007 f851 	bl	afc0 <mp_parse_num_integer>
    3f1e:	6178      	str	r0, [r7, #20]
        if (MP_OBJ_IS_SMALL_INT(o)) {
    3f20:	6978      	ldr	r0, [r7, #20]
    3f22:	f7ff fd0b 	bl	393c <MP_OBJ_IS_SMALL_INT>
    3f26:	4603      	mov	r3, r0
    3f28:	2b00      	cmp	r3, #0
    3f2a:	d005      	beq.n	3f38 <push_result_token+0x6c>
            pn = mp_parse_node_new_small_int_checked(parser, o);
    3f2c:	6979      	ldr	r1, [r7, #20]
    3f2e:	6878      	ldr	r0, [r7, #4]
    3f30:	f7ff ffbc 	bl	3eac <mp_parse_node_new_small_int_checked>
    3f34:	6278      	str	r0, [r7, #36]	; 0x24
    3f36:	e071      	b.n	401c <push_result_token+0x150>
        } else {
            pn = make_node_const_object(parser, lex->tok_line, o);
    3f38:	69fb      	ldr	r3, [r7, #28]
    3f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3f3c:	697a      	ldr	r2, [r7, #20]
    3f3e:	4619      	mov	r1, r3
    3f40:	6878      	ldr	r0, [r7, #4]
    3f42:	f7ff ff99 	bl	3e78 <make_node_const_object>
    3f46:	6278      	str	r0, [r7, #36]	; 0x24
    3f48:	e068      	b.n	401c <push_result_token+0x150>
        }
    } else if (lex->tok_kind == MP_TOKEN_FLOAT_OR_IMAG) {
    3f4a:	69fb      	ldr	r3, [r7, #28]
    3f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3f4e:	2b09      	cmp	r3, #9
    3f50:	d113      	bne.n	3f7a <push_result_token+0xae>
        mp_obj_t o = mp_parse_num_decimal(lex->vstr.buf, lex->vstr.len, true, false, lex);
    3f52:	69fb      	ldr	r3, [r7, #28]
    3f54:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    3f56:	69fb      	ldr	r3, [r7, #28]
    3f58:	6c99      	ldr	r1, [r3, #72]	; 0x48
    3f5a:	69fb      	ldr	r3, [r7, #28]
    3f5c:	9300      	str	r3, [sp, #0]
    3f5e:	2300      	movs	r3, #0
    3f60:	2201      	movs	r2, #1
    3f62:	f007 f915 	bl	b190 <mp_parse_num_decimal>
    3f66:	6138      	str	r0, [r7, #16]
        pn = make_node_const_object(parser, lex->tok_line, o);
    3f68:	69fb      	ldr	r3, [r7, #28]
    3f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3f6c:	693a      	ldr	r2, [r7, #16]
    3f6e:	4619      	mov	r1, r3
    3f70:	6878      	ldr	r0, [r7, #4]
    3f72:	f7ff ff81 	bl	3e78 <make_node_const_object>
    3f76:	6278      	str	r0, [r7, #36]	; 0x24
    3f78:	e050      	b.n	401c <push_result_token+0x150>
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    3f7a:	69fb      	ldr	r3, [r7, #28]
    3f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3f7e:	2b0a      	cmp	r3, #10
    3f80:	d003      	beq.n	3f8a <push_result_token+0xbe>
    3f82:	69fb      	ldr	r3, [r7, #28]
    3f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3f86:	2b0b      	cmp	r3, #11
    3f88:	d141      	bne.n	400e <push_result_token+0x142>
        // Don't automatically intern all strings/bytes.  doc strings (which are usually large)
        // will be discarded by the compiler, and so we shouldn't intern them.
        qstr qst = MP_QSTR_NULL;
    3f8a:	2300      	movs	r3, #0
    3f8c:	623b      	str	r3, [r7, #32]
        if (lex->vstr.len <= MICROPY_ALLOC_PARSE_INTERN_STRING_LEN) {
    3f8e:	69fb      	ldr	r3, [r7, #28]
    3f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3f92:	2b0a      	cmp	r3, #10
    3f94:	d809      	bhi.n	3faa <push_result_token+0xde>
            // intern short strings
            qst = qstr_from_strn(lex->vstr.buf, lex->vstr.len);
    3f96:	69fb      	ldr	r3, [r7, #28]
    3f98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3f9a:	69fb      	ldr	r3, [r7, #28]
    3f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3f9e:	4619      	mov	r1, r3
    3fa0:	4610      	mov	r0, r2
    3fa2:	f7fd f915 	bl	11d0 <qstr_from_strn>
    3fa6:	6238      	str	r0, [r7, #32]
    3fa8:	e008      	b.n	3fbc <push_result_token+0xf0>
        } else {
            // check if this string is already interned
            qst = qstr_find_strn(lex->vstr.buf, lex->vstr.len);
    3faa:	69fb      	ldr	r3, [r7, #28]
    3fac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3fae:	69fb      	ldr	r3, [r7, #28]
    3fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3fb2:	4619      	mov	r1, r3
    3fb4:	4610      	mov	r0, r2
    3fb6:	f7fd f8a7 	bl	1108 <qstr_find_strn>
    3fba:	6238      	str	r0, [r7, #32]
        }
        if (qst != MP_QSTR_NULL) {
    3fbc:	6a3b      	ldr	r3, [r7, #32]
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	d00d      	beq.n	3fde <push_result_token+0x112>
            // qstr exists, make a leaf node
            pn = mp_parse_node_new_leaf(lex->tok_kind == MP_TOKEN_STRING ? MP_PARSE_NODE_STRING : MP_PARSE_NODE_BYTES, qst);
    3fc2:	69fb      	ldr	r3, [r7, #28]
    3fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3fc6:	2b0a      	cmp	r3, #10
    3fc8:	d101      	bne.n	3fce <push_result_token+0x102>
    3fca:	2306      	movs	r3, #6
    3fcc:	e000      	b.n	3fd0 <push_result_token+0x104>
    3fce:	230a      	movs	r3, #10
    3fd0:	6a3a      	ldr	r2, [r7, #32]
    3fd2:	4611      	mov	r1, r2
    3fd4:	4618      	mov	r0, r3
    3fd6:	f7ff fce3 	bl	39a0 <mp_parse_node_new_leaf>
    3fda:	6278      	str	r0, [r7, #36]	; 0x24
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    3fdc:	e01e      	b.n	401c <push_result_token+0x150>
        } else {
            // not interned, make a node holding a pointer to the string/bytes object
            mp_obj_t o = mp_obj_new_str_copy(
                lex->tok_kind == MP_TOKEN_STRING ? &mp_type_str : &mp_type_bytes,
    3fde:	69fb      	ldr	r3, [r7, #28]
    3fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            mp_obj_t o = mp_obj_new_str_copy(
    3fe2:	2b0a      	cmp	r3, #10
    3fe4:	d101      	bne.n	3fea <push_result_token+0x11e>
    3fe6:	4811      	ldr	r0, [pc, #68]	; (402c <push_result_token+0x160>)
    3fe8:	e000      	b.n	3fec <push_result_token+0x120>
    3fea:	4811      	ldr	r0, [pc, #68]	; (4030 <push_result_token+0x164>)
                (const byte*)lex->vstr.buf, lex->vstr.len);
    3fec:	69fb      	ldr	r3, [r7, #28]
    3fee:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
            mp_obj_t o = mp_obj_new_str_copy(
    3ff0:	69fb      	ldr	r3, [r7, #28]
    3ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3ff4:	461a      	mov	r2, r3
    3ff6:	f011 f9d7 	bl	153a8 <mp_obj_new_str_copy>
    3ffa:	60f8      	str	r0, [r7, #12]
            pn = make_node_const_object(parser, lex->tok_line, o);
    3ffc:	69fb      	ldr	r3, [r7, #28]
    3ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4000:	68fa      	ldr	r2, [r7, #12]
    4002:	4619      	mov	r1, r3
    4004:	6878      	ldr	r0, [r7, #4]
    4006:	f7ff ff37 	bl	3e78 <make_node_const_object>
    400a:	6278      	str	r0, [r7, #36]	; 0x24
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    400c:	e006      	b.n	401c <push_result_token+0x150>
        }
    } else {
        pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, lex->tok_kind);
    400e:	69fb      	ldr	r3, [r7, #28]
    4010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4012:	4619      	mov	r1, r3
    4014:	200e      	movs	r0, #14
    4016:	f7ff fcc3 	bl	39a0 <mp_parse_node_new_leaf>
    401a:	6278      	str	r0, [r7, #36]	; 0x24
    }
    push_result_node(parser, pn);
    401c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    401e:	6878      	ldr	r0, [r7, #4]
    4020:	f7ff fefc 	bl	3e1c <push_result_node>
}
    4024:	bf00      	nop
    4026:	3728      	adds	r7, #40	; 0x28
    4028:	46bd      	mov	sp, r7
    402a:	bd80      	pop	{r7, pc}
    402c:	00023b68 	.word	0x00023b68
    4030:	00023ba4 	.word	0x00023ba4

00004034 <fold_logical_constants>:
#endif

STATIC void push_result_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t num_args);

#if MICROPY_COMP_CONST_FOLDING
STATIC bool fold_logical_constants(parser_t *parser, uint8_t rule_id, size_t *num_args) {
    4034:	b580      	push	{r7, lr}
    4036:	b08a      	sub	sp, #40	; 0x28
    4038:	af00      	add	r7, sp, #0
    403a:	60f8      	str	r0, [r7, #12]
    403c:	460b      	mov	r3, r1
    403e:	607a      	str	r2, [r7, #4]
    4040:	72fb      	strb	r3, [r7, #11]
    if (rule_id == RULE_or_test
    4042:	7afb      	ldrb	r3, [r7, #11]
    4044:	2b1c      	cmp	r3, #28
    4046:	d002      	beq.n	404e <fold_logical_constants+0x1a>
        || rule_id == RULE_and_test) {
    4048:	7afb      	ldrb	r3, [r7, #11]
    404a:	2b1d      	cmp	r3, #29
    404c:	d169      	bne.n	4122 <fold_logical_constants+0xee>
        // folding for binary logical ops: or and
        size_t copy_to = *num_args;
    404e:	687b      	ldr	r3, [r7, #4]
    4050:	681b      	ldr	r3, [r3, #0]
    4052:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = copy_to; i > 0;) {
    4054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4056:	623b      	str	r3, [r7, #32]
    4058:	e03c      	b.n	40d4 <fold_logical_constants+0xa0>
            mp_parse_node_t pn = peek_result(parser, --i);
    405a:	6a3b      	ldr	r3, [r7, #32]
    405c:	3b01      	subs	r3, #1
    405e:	623b      	str	r3, [r7, #32]
    4060:	6a39      	ldr	r1, [r7, #32]
    4062:	68f8      	ldr	r0, [r7, #12]
    4064:	f7ff feb2 	bl	3dcc <peek_result>
    4068:	6178      	str	r0, [r7, #20]
            parser->result_stack[parser->result_stack_top - copy_to] = pn;
    406a:	68fb      	ldr	r3, [r7, #12]
    406c:	695a      	ldr	r2, [r3, #20]
    406e:	68fb      	ldr	r3, [r7, #12]
    4070:	6919      	ldr	r1, [r3, #16]
    4072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4074:	1acb      	subs	r3, r1, r3
    4076:	009b      	lsls	r3, r3, #2
    4078:	4413      	add	r3, r2
    407a:	697a      	ldr	r2, [r7, #20]
    407c:	601a      	str	r2, [r3, #0]
            if (i == 0) {
    407e:	6a3b      	ldr	r3, [r7, #32]
    4080:	2b00      	cmp	r3, #0
    4082:	d02b      	beq.n	40dc <fold_logical_constants+0xa8>
                // always need to keep the last value
                break;
            }
            if (rule_id == RULE_or_test) {
    4084:	7afb      	ldrb	r3, [r7, #11]
    4086:	2b1c      	cmp	r3, #28
    4088:	d112      	bne.n	40b0 <fold_logical_constants+0x7c>
                if (mp_parse_node_is_const_true(pn)) {
    408a:	6978      	ldr	r0, [r7, #20]
    408c:	f7ff fddc 	bl	3c48 <mp_parse_node_is_const_true>
    4090:	4603      	mov	r3, r0
    4092:	2b00      	cmp	r3, #0
    4094:	d124      	bne.n	40e0 <fold_logical_constants+0xac>
                    //
                    break;
                } else if (!mp_parse_node_is_const_false(pn)) {
    4096:	6978      	ldr	r0, [r7, #20]
    4098:	f7ff fdba 	bl	3c10 <mp_parse_node_is_const_false>
    409c:	4603      	mov	r3, r0
    409e:	f083 0301 	eor.w	r3, r3, #1
    40a2:	b2db      	uxtb	r3, r3
    40a4:	2b00      	cmp	r3, #0
    40a6:	d015      	beq.n	40d4 <fold_logical_constants+0xa0>
                    copy_to -= 1;
    40a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40aa:	3b01      	subs	r3, #1
    40ac:	627b      	str	r3, [r7, #36]	; 0x24
    40ae:	e011      	b.n	40d4 <fold_logical_constants+0xa0>
                }
            } else {
                // RULE_and_test
                if (mp_parse_node_is_const_false(pn)) {
    40b0:	6978      	ldr	r0, [r7, #20]
    40b2:	f7ff fdad 	bl	3c10 <mp_parse_node_is_const_false>
    40b6:	4603      	mov	r3, r0
    40b8:	2b00      	cmp	r3, #0
    40ba:	d113      	bne.n	40e4 <fold_logical_constants+0xb0>
                    break;
                } else if (!mp_parse_node_is_const_true(pn)) {
    40bc:	6978      	ldr	r0, [r7, #20]
    40be:	f7ff fdc3 	bl	3c48 <mp_parse_node_is_const_true>
    40c2:	4603      	mov	r3, r0
    40c4:	f083 0301 	eor.w	r3, r3, #1
    40c8:	b2db      	uxtb	r3, r3
    40ca:	2b00      	cmp	r3, #0
    40cc:	d002      	beq.n	40d4 <fold_logical_constants+0xa0>
                    copy_to -= 1;
    40ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40d0:	3b01      	subs	r3, #1
    40d2:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = copy_to; i > 0;) {
    40d4:	6a3b      	ldr	r3, [r7, #32]
    40d6:	2b00      	cmp	r3, #0
    40d8:	d1bf      	bne.n	405a <fold_logical_constants+0x26>
    40da:	e004      	b.n	40e6 <fold_logical_constants+0xb2>
                break;
    40dc:	bf00      	nop
    40de:	e002      	b.n	40e6 <fold_logical_constants+0xb2>
                    break;
    40e0:	bf00      	nop
    40e2:	e000      	b.n	40e6 <fold_logical_constants+0xb2>
                    break;
    40e4:	bf00      	nop
                }
            }
        }
        copy_to -= 1; // copy_to now contains number of args to pop
    40e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    40e8:	3b01      	subs	r3, #1
    40ea:	627b      	str	r3, [r7, #36]	; 0x24

        // pop and discard all the short-circuited expressions
        for (size_t i = 0; i < copy_to; ++i) {
    40ec:	2300      	movs	r3, #0
    40ee:	61fb      	str	r3, [r7, #28]
    40f0:	e005      	b.n	40fe <fold_logical_constants+0xca>
            pop_result(parser);
    40f2:	68f8      	ldr	r0, [r7, #12]
    40f4:	f7ff fe44 	bl	3d80 <pop_result>
        for (size_t i = 0; i < copy_to; ++i) {
    40f8:	69fb      	ldr	r3, [r7, #28]
    40fa:	3301      	adds	r3, #1
    40fc:	61fb      	str	r3, [r7, #28]
    40fe:	69fa      	ldr	r2, [r7, #28]
    4100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4102:	429a      	cmp	r2, r3
    4104:	d3f5      	bcc.n	40f2 <fold_logical_constants+0xbe>
        }
        *num_args -= copy_to;
    4106:	687b      	ldr	r3, [r7, #4]
    4108:	681a      	ldr	r2, [r3, #0]
    410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    410c:	1ad2      	subs	r2, r2, r3
    410e:	687b      	ldr	r3, [r7, #4]
    4110:	601a      	str	r2, [r3, #0]

        // we did a complete folding if there's only 1 arg left
        return *num_args == 1;
    4112:	687b      	ldr	r3, [r7, #4]
    4114:	681b      	ldr	r3, [r3, #0]
    4116:	2b01      	cmp	r3, #1
    4118:	bf0c      	ite	eq
    411a:	2301      	moveq	r3, #1
    411c:	2300      	movne	r3, #0
    411e:	b2db      	uxtb	r3, r3
    4120:	e02b      	b.n	417a <fold_logical_constants+0x146>

    } else if (rule_id == RULE_not_test_2) {
    4122:	7afb      	ldrb	r3, [r7, #11]
    4124:	2b1e      	cmp	r3, #30
    4126:	d127      	bne.n	4178 <fold_logical_constants+0x144>
        // folding for unary logical op: not
        mp_parse_node_t pn = peek_result(parser, 0);
    4128:	2100      	movs	r1, #0
    412a:	68f8      	ldr	r0, [r7, #12]
    412c:	f7ff fe4e 	bl	3dcc <peek_result>
    4130:	61b8      	str	r0, [r7, #24]
        if (mp_parse_node_is_const_false(pn)) {
    4132:	69b8      	ldr	r0, [r7, #24]
    4134:	f7ff fd6c 	bl	3c10 <mp_parse_node_is_const_false>
    4138:	4603      	mov	r3, r0
    413a:	2b00      	cmp	r3, #0
    413c:	d005      	beq.n	414a <fold_logical_constants+0x116>
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, MP_TOKEN_KW_TRUE);
    413e:	210f      	movs	r1, #15
    4140:	200e      	movs	r0, #14
    4142:	f7ff fc2d 	bl	39a0 <mp_parse_node_new_leaf>
    4146:	61b8      	str	r0, [r7, #24]
    4148:	e00d      	b.n	4166 <fold_logical_constants+0x132>
        } else if (mp_parse_node_is_const_true(pn)) {
    414a:	69b8      	ldr	r0, [r7, #24]
    414c:	f7ff fd7c 	bl	3c48 <mp_parse_node_is_const_true>
    4150:	4603      	mov	r3, r0
    4152:	2b00      	cmp	r3, #0
    4154:	d005      	beq.n	4162 <fold_logical_constants+0x12e>
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, MP_TOKEN_KW_FALSE);
    4156:	210d      	movs	r1, #13
    4158:	200e      	movs	r0, #14
    415a:	f7ff fc21 	bl	39a0 <mp_parse_node_new_leaf>
    415e:	61b8      	str	r0, [r7, #24]
    4160:	e001      	b.n	4166 <fold_logical_constants+0x132>
        } else {
            return false;
    4162:	2300      	movs	r3, #0
    4164:	e009      	b.n	417a <fold_logical_constants+0x146>
        }
        pop_result(parser);
    4166:	68f8      	ldr	r0, [r7, #12]
    4168:	f7ff fe0a 	bl	3d80 <pop_result>
        push_result_node(parser, pn);
    416c:	69b9      	ldr	r1, [r7, #24]
    416e:	68f8      	ldr	r0, [r7, #12]
    4170:	f7ff fe54 	bl	3e1c <push_result_node>
        return true;
    4174:	2301      	movs	r3, #1
    4176:	e000      	b.n	417a <fold_logical_constants+0x146>
    }

    return false;
    4178:	2300      	movs	r3, #0
}
    417a:	4618      	mov	r0, r3
    417c:	3728      	adds	r7, #40	; 0x28
    417e:	46bd      	mov	sp, r7
    4180:	bd80      	pop	{r7, pc}
    4182:	bf00      	nop

00004184 <fold_constants>:

STATIC bool fold_constants(parser_t *parser, uint8_t rule_id, size_t num_args) {
    4184:	b580      	push	{r7, lr}
    4186:	b094      	sub	sp, #80	; 0x50
    4188:	af00      	add	r7, sp, #0
    418a:	60f8      	str	r0, [r7, #12]
    418c:	460b      	mov	r3, r1
    418e:	607a      	str	r2, [r7, #4]
    4190:	72fb      	strb	r3, [r7, #11]
    // this code does folding of arbitrary integer expressions, eg 1 + 2 * 3 + 4
    // it does not do partial folding, eg 1 + 2 + x -> 3 + x

    mp_obj_t arg0;
    if (rule_id == RULE_expr
    4192:	7afb      	ldrb	r3, [r7, #11]
    4194:	2b21      	cmp	r3, #33	; 0x21
    4196:	d005      	beq.n	41a4 <fold_constants+0x20>
        || rule_id == RULE_xor_expr
    4198:	7afb      	ldrb	r3, [r7, #11]
    419a:	2b22      	cmp	r3, #34	; 0x22
    419c:	d002      	beq.n	41a4 <fold_constants+0x20>
        || rule_id == RULE_and_expr) {
    419e:	7afb      	ldrb	r3, [r7, #11]
    41a0:	2b23      	cmp	r3, #35	; 0x23
    41a2:	d149      	bne.n	4238 <fold_constants+0xb4>
        // folding for binary ops: | ^ &
        mp_parse_node_t pn = peek_result(parser, num_args - 1);
    41a4:	687b      	ldr	r3, [r7, #4]
    41a6:	3b01      	subs	r3, #1
    41a8:	4619      	mov	r1, r3
    41aa:	68f8      	ldr	r0, [r7, #12]
    41ac:	f7ff fe0e 	bl	3dcc <peek_result>
    41b0:	6238      	str	r0, [r7, #32]
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    41b2:	f107 031c 	add.w	r3, r7, #28
    41b6:	4619      	mov	r1, r3
    41b8:	6a38      	ldr	r0, [r7, #32]
    41ba:	f7ff fd61 	bl	3c80 <mp_parse_node_get_int_maybe>
    41be:	4603      	mov	r3, r0
    41c0:	f083 0301 	eor.w	r3, r3, #1
    41c4:	b2db      	uxtb	r3, r3
    41c6:	2b00      	cmp	r3, #0
    41c8:	d001      	beq.n	41ce <fold_constants+0x4a>
            return false;
    41ca:	2300      	movs	r3, #0
    41cc:	e10a      	b.n	43e4 <fold_constants+0x260>
        }
        mp_binary_op_t op;
        if (rule_id == RULE_expr) {
    41ce:	7afb      	ldrb	r3, [r7, #11]
    41d0:	2b21      	cmp	r3, #33	; 0x21
    41d2:	d102      	bne.n	41da <fold_constants+0x56>
            op = MP_BINARY_OP_OR;
    41d4:	2315      	movs	r3, #21
    41d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    41d8:	e007      	b.n	41ea <fold_constants+0x66>
        } else if (rule_id == RULE_xor_expr) {
    41da:	7afb      	ldrb	r3, [r7, #11]
    41dc:	2b22      	cmp	r3, #34	; 0x22
    41de:	d102      	bne.n	41e6 <fold_constants+0x62>
            op = MP_BINARY_OP_XOR;
    41e0:	2316      	movs	r3, #22
    41e2:	64fb      	str	r3, [r7, #76]	; 0x4c
    41e4:	e001      	b.n	41ea <fold_constants+0x66>
        } else {
            op = MP_BINARY_OP_AND;
    41e6:	2317      	movs	r3, #23
    41e8:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        for (ssize_t i = num_args - 2; i >= 0; --i) {
    41ea:	687b      	ldr	r3, [r7, #4]
    41ec:	3b02      	subs	r3, #2
    41ee:	64bb      	str	r3, [r7, #72]	; 0x48
    41f0:	e01e      	b.n	4230 <fold_constants+0xac>
            pn = peek_result(parser, i);
    41f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    41f4:	4619      	mov	r1, r3
    41f6:	68f8      	ldr	r0, [r7, #12]
    41f8:	f7ff fde8 	bl	3dcc <peek_result>
    41fc:	6238      	str	r0, [r7, #32]
            mp_obj_t arg1;
            if (!mp_parse_node_get_int_maybe(pn, &arg1)) {
    41fe:	f107 0318 	add.w	r3, r7, #24
    4202:	4619      	mov	r1, r3
    4204:	6a38      	ldr	r0, [r7, #32]
    4206:	f7ff fd3b 	bl	3c80 <mp_parse_node_get_int_maybe>
    420a:	4603      	mov	r3, r0
    420c:	f083 0301 	eor.w	r3, r3, #1
    4210:	b2db      	uxtb	r3, r3
    4212:	2b00      	cmp	r3, #0
    4214:	d001      	beq.n	421a <fold_constants+0x96>
                return false;
    4216:	2300      	movs	r3, #0
    4218:	e0e4      	b.n	43e4 <fold_constants+0x260>
            }
            arg0 = mp_binary_op(op, arg0, arg1);
    421a:	69fb      	ldr	r3, [r7, #28]
    421c:	69ba      	ldr	r2, [r7, #24]
    421e:	4619      	mov	r1, r3
    4220:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    4222:	f007 fb7f 	bl	b924 <mp_binary_op>
    4226:	4603      	mov	r3, r0
    4228:	61fb      	str	r3, [r7, #28]
        for (ssize_t i = num_args - 2; i >= 0; --i) {
    422a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    422c:	3b01      	subs	r3, #1
    422e:	64bb      	str	r3, [r7, #72]	; 0x48
    4230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4232:	2b00      	cmp	r3, #0
    4234:	dadd      	bge.n	41f2 <fold_constants+0x6e>
        || rule_id == RULE_and_expr) {
    4236:	e0ab      	b.n	4390 <fold_constants+0x20c>
        }
    } else if (rule_id == RULE_shift_expr
    4238:	7afb      	ldrb	r3, [r7, #11]
    423a:	2b24      	cmp	r3, #36	; 0x24
    423c:	d005      	beq.n	424a <fold_constants+0xc6>
        || rule_id == RULE_arith_expr
    423e:	7afb      	ldrb	r3, [r7, #11]
    4240:	2b25      	cmp	r3, #37	; 0x25
    4242:	d002      	beq.n	424a <fold_constants+0xc6>
        || rule_id == RULE_term) {
    4244:	7afb      	ldrb	r3, [r7, #11]
    4246:	2b26      	cmp	r3, #38	; 0x26
    4248:	d163      	bne.n	4312 <fold_constants+0x18e>
        // folding for binary ops: << >> + - * / % //
        mp_parse_node_t pn = peek_result(parser, num_args - 1);
    424a:	687b      	ldr	r3, [r7, #4]
    424c:	3b01      	subs	r3, #1
    424e:	4619      	mov	r1, r3
    4250:	68f8      	ldr	r0, [r7, #12]
    4252:	f7ff fdbb 	bl	3dcc <peek_result>
    4256:	6338      	str	r0, [r7, #48]	; 0x30
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    4258:	f107 031c 	add.w	r3, r7, #28
    425c:	4619      	mov	r1, r3
    425e:	6b38      	ldr	r0, [r7, #48]	; 0x30
    4260:	f7ff fd0e 	bl	3c80 <mp_parse_node_get_int_maybe>
    4264:	4603      	mov	r3, r0
    4266:	f083 0301 	eor.w	r3, r3, #1
    426a:	b2db      	uxtb	r3, r3
    426c:	2b00      	cmp	r3, #0
    426e:	d001      	beq.n	4274 <fold_constants+0xf0>
            return false;
    4270:	2300      	movs	r3, #0
    4272:	e0b7      	b.n	43e4 <fold_constants+0x260>
        }
        for (ssize_t i = num_args - 2; i >= 1; i -= 2) {
    4274:	687b      	ldr	r3, [r7, #4]
    4276:	3b02      	subs	r3, #2
    4278:	647b      	str	r3, [r7, #68]	; 0x44
    427a:	e046      	b.n	430a <fold_constants+0x186>
            pn = peek_result(parser, i - 1);
    427c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    427e:	3b01      	subs	r3, #1
    4280:	4619      	mov	r1, r3
    4282:	68f8      	ldr	r0, [r7, #12]
    4284:	f7ff fda2 	bl	3dcc <peek_result>
    4288:	6338      	str	r0, [r7, #48]	; 0x30
            mp_obj_t arg1;
            if (!mp_parse_node_get_int_maybe(pn, &arg1)) {
    428a:	f107 0314 	add.w	r3, r7, #20
    428e:	4619      	mov	r1, r3
    4290:	6b38      	ldr	r0, [r7, #48]	; 0x30
    4292:	f7ff fcf5 	bl	3c80 <mp_parse_node_get_int_maybe>
    4296:	4603      	mov	r3, r0
    4298:	f083 0301 	eor.w	r3, r3, #1
    429c:	b2db      	uxtb	r3, r3
    429e:	2b00      	cmp	r3, #0
    42a0:	d001      	beq.n	42a6 <fold_constants+0x122>
                return false;
    42a2:	2300      	movs	r3, #0
    42a4:	e09e      	b.n	43e4 <fold_constants+0x260>
            }
            mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(peek_result(parser, i));
    42a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    42a8:	4619      	mov	r1, r3
    42aa:	68f8      	ldr	r0, [r7, #12]
    42ac:	f7ff fd8e 	bl	3dcc <peek_result>
    42b0:	4603      	mov	r3, r0
    42b2:	091b      	lsrs	r3, r3, #4
    42b4:	62fb      	str	r3, [r7, #44]	; 0x2c
                255,//MP_BINARY_OP_LESS
                MP_BINARY_OP_LSHIFT,
                255,//MP_BINARY_OP_MORE
                MP_BINARY_OP_RSHIFT,
            };
            mp_binary_op_t op = token_to_op[tok - MP_TOKEN_OP_PLUS];
    42b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    42b8:	3b2f      	subs	r3, #47	; 0x2f
    42ba:	4a4c      	ldr	r2, [pc, #304]	; (43ec <fold_constants+0x268>)
    42bc:	5cd3      	ldrb	r3, [r2, r3]
    42be:	62bb      	str	r3, [r7, #40]	; 0x28
            if (op == (mp_binary_op_t)255) {
    42c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    42c2:	2bff      	cmp	r3, #255	; 0xff
    42c4:	d101      	bne.n	42ca <fold_constants+0x146>
                return false;
    42c6:	2300      	movs	r3, #0
    42c8:	e08c      	b.n	43e4 <fold_constants+0x260>
            }
            int rhs_sign = mp_obj_int_sign(arg1);
    42ca:	697b      	ldr	r3, [r7, #20]
    42cc:	4618      	mov	r0, r3
    42ce:	f00c fb0d 	bl	108ec <mp_obj_int_sign>
    42d2:	6278      	str	r0, [r7, #36]	; 0x24
            if (op <= MP_BINARY_OP_RSHIFT) {
    42d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    42d6:	2b19      	cmp	r3, #25
    42d8:	d804      	bhi.n	42e4 <fold_constants+0x160>
                // << and >> can't have negative rhs
                if (rhs_sign < 0) {
    42da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    42dc:	2b00      	cmp	r3, #0
    42de:	da09      	bge.n	42f4 <fold_constants+0x170>
                    return false;
    42e0:	2300      	movs	r3, #0
    42e2:	e07f      	b.n	43e4 <fold_constants+0x260>
                }
            } else if (op >= MP_BINARY_OP_FLOOR_DIVIDE) {
    42e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    42e6:	2b1c      	cmp	r3, #28
    42e8:	d904      	bls.n	42f4 <fold_constants+0x170>
                // % and // can't have zero rhs
                if (rhs_sign == 0) {
    42ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    42ec:	2b00      	cmp	r3, #0
    42ee:	d101      	bne.n	42f4 <fold_constants+0x170>
                    return false;
    42f0:	2300      	movs	r3, #0
    42f2:	e077      	b.n	43e4 <fold_constants+0x260>
                }
            }
            arg0 = mp_binary_op(op, arg0, arg1);
    42f4:	69fb      	ldr	r3, [r7, #28]
    42f6:	697a      	ldr	r2, [r7, #20]
    42f8:	4619      	mov	r1, r3
    42fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    42fc:	f007 fb12 	bl	b924 <mp_binary_op>
    4300:	4603      	mov	r3, r0
    4302:	61fb      	str	r3, [r7, #28]
        for (ssize_t i = num_args - 2; i >= 1; i -= 2) {
    4304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4306:	3b02      	subs	r3, #2
    4308:	647b      	str	r3, [r7, #68]	; 0x44
    430a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    430c:	2b00      	cmp	r3, #0
    430e:	dcb5      	bgt.n	427c <fold_constants+0xf8>
        || rule_id == RULE_term) {
    4310:	e03e      	b.n	4390 <fold_constants+0x20c>
        }
    } else if (rule_id == RULE_factor_2) {
    4312:	7afb      	ldrb	r3, [r7, #11]
    4314:	2b27      	cmp	r3, #39	; 0x27
    4316:	d139      	bne.n	438c <fold_constants+0x208>
        // folding for unary ops: + - ~
        mp_parse_node_t pn = peek_result(parser, 0);
    4318:	2100      	movs	r1, #0
    431a:	68f8      	ldr	r0, [r7, #12]
    431c:	f7ff fd56 	bl	3dcc <peek_result>
    4320:	63b8      	str	r0, [r7, #56]	; 0x38
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    4322:	f107 031c 	add.w	r3, r7, #28
    4326:	4619      	mov	r1, r3
    4328:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    432a:	f7ff fca9 	bl	3c80 <mp_parse_node_get_int_maybe>
    432e:	4603      	mov	r3, r0
    4330:	f083 0301 	eor.w	r3, r3, #1
    4334:	b2db      	uxtb	r3, r3
    4336:	2b00      	cmp	r3, #0
    4338:	d001      	beq.n	433e <fold_constants+0x1ba>
            return false;
    433a:	2300      	movs	r3, #0
    433c:	e052      	b.n	43e4 <fold_constants+0x260>
        }
        mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(peek_result(parser, 1));
    433e:	2101      	movs	r1, #1
    4340:	68f8      	ldr	r0, [r7, #12]
    4342:	f7ff fd43 	bl	3dcc <peek_result>
    4346:	4603      	mov	r3, r0
    4348:	091b      	lsrs	r3, r3, #4
    434a:	637b      	str	r3, [r7, #52]	; 0x34
        mp_unary_op_t op;
        if (tok == MP_TOKEN_OP_PLUS) {
    434c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    434e:	2b2f      	cmp	r3, #47	; 0x2f
    4350:	d102      	bne.n	4358 <fold_constants+0x1d4>
            op = MP_UNARY_OP_POSITIVE;
    4352:	2300      	movs	r3, #0
    4354:	643b      	str	r3, [r7, #64]	; 0x40
    4356:	e011      	b.n	437c <fold_constants+0x1f8>
        } else if (tok == MP_TOKEN_OP_MINUS) {
    4358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    435a:	2b30      	cmp	r3, #48	; 0x30
    435c:	d102      	bne.n	4364 <fold_constants+0x1e0>
            op = MP_UNARY_OP_NEGATIVE;
    435e:	2301      	movs	r3, #1
    4360:	643b      	str	r3, [r7, #64]	; 0x40
    4362:	e00b      	b.n	437c <fold_constants+0x1f8>
        } else {
            assert(tok == MP_TOKEN_OP_TILDE); // should be
    4364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4366:	2b3d      	cmp	r3, #61	; 0x3d
    4368:	d006      	beq.n	4378 <fold_constants+0x1f4>
    436a:	4b21      	ldr	r3, [pc, #132]	; (43f0 <fold_constants+0x26c>)
    436c:	4a21      	ldr	r2, [pc, #132]	; (43f4 <fold_constants+0x270>)
    436e:	f240 21b3 	movw	r1, #691	; 0x2b3
    4372:	4821      	ldr	r0, [pc, #132]	; (43f8 <fold_constants+0x274>)
    4374:	f017 fa06 	bl	1b784 <__assert_func>
            op = MP_UNARY_OP_INVERT;
    4378:	2302      	movs	r3, #2
    437a:	643b      	str	r3, [r7, #64]	; 0x40
        }
        arg0 = mp_unary_op(op, arg0);
    437c:	69fb      	ldr	r3, [r7, #28]
    437e:	4619      	mov	r1, r3
    4380:	6c38      	ldr	r0, [r7, #64]	; 0x40
    4382:	f007 f9df 	bl	b744 <mp_unary_op>
    4386:	4603      	mov	r3, r0
    4388:	61fb      	str	r3, [r7, #28]
    438a:	e001      	b.n	4390 <fold_constants+0x20c>
        }
        arg0 = dest[0];
    #endif

    } else {
        return false;
    438c:	2300      	movs	r3, #0
    438e:	e029      	b.n	43e4 <fold_constants+0x260>
    }

    // success folding this rule

    for (size_t i = num_args; i > 0; i--) {
    4390:	687b      	ldr	r3, [r7, #4]
    4392:	63fb      	str	r3, [r7, #60]	; 0x3c
    4394:	e005      	b.n	43a2 <fold_constants+0x21e>
        pop_result(parser);
    4396:	68f8      	ldr	r0, [r7, #12]
    4398:	f7ff fcf2 	bl	3d80 <pop_result>
    for (size_t i = num_args; i > 0; i--) {
    439c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    439e:	3b01      	subs	r3, #1
    43a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    43a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    43a4:	2b00      	cmp	r3, #0
    43a6:	d1f6      	bne.n	4396 <fold_constants+0x212>
    }
    if (MP_OBJ_IS_SMALL_INT(arg0)) {
    43a8:	69fb      	ldr	r3, [r7, #28]
    43aa:	4618      	mov	r0, r3
    43ac:	f7ff fac6 	bl	393c <MP_OBJ_IS_SMALL_INT>
    43b0:	4603      	mov	r3, r0
    43b2:	2b00      	cmp	r3, #0
    43b4:	d00a      	beq.n	43cc <fold_constants+0x248>
        push_result_node(parser, mp_parse_node_new_small_int_checked(parser, arg0));
    43b6:	69fb      	ldr	r3, [r7, #28]
    43b8:	4619      	mov	r1, r3
    43ba:	68f8      	ldr	r0, [r7, #12]
    43bc:	f7ff fd76 	bl	3eac <mp_parse_node_new_small_int_checked>
    43c0:	4603      	mov	r3, r0
    43c2:	4619      	mov	r1, r3
    43c4:	68f8      	ldr	r0, [r7, #12]
    43c6:	f7ff fd29 	bl	3e1c <push_result_node>
    43ca:	e00a      	b.n	43e2 <fold_constants+0x25e>
    } else {
        // TODO reuse memory for parse node struct?
        push_result_node(parser, make_node_const_object(parser, 0, arg0));
    43cc:	69fb      	ldr	r3, [r7, #28]
    43ce:	461a      	mov	r2, r3
    43d0:	2100      	movs	r1, #0
    43d2:	68f8      	ldr	r0, [r7, #12]
    43d4:	f7ff fd50 	bl	3e78 <make_node_const_object>
    43d8:	4603      	mov	r3, r0
    43da:	4619      	mov	r1, r3
    43dc:	68f8      	ldr	r0, [r7, #12]
    43de:	f7ff fd1d 	bl	3e1c <push_result_node>
    }

    return true;
    43e2:	2301      	movs	r3, #1
}
    43e4:	4618      	mov	r0, r3
    43e6:	3750      	adds	r7, #80	; 0x50
    43e8:	46bd      	mov	sp, r7
    43ea:	bd80      	pop	{r7, pc}
    43ec:	00020248 	.word	0x00020248
    43f0:	000200fc 	.word	0x000200fc
    43f4:	00020254 	.word	0x00020254
    43f8:	000200a8 	.word	0x000200a8

000043fc <push_result_rule>:
#endif

STATIC void push_result_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t num_args) {
    43fc:	b590      	push	{r4, r7, lr}
    43fe:	b089      	sub	sp, #36	; 0x24
    4400:	af00      	add	r7, sp, #0
    4402:	60f8      	str	r0, [r7, #12]
    4404:	60b9      	str	r1, [r7, #8]
    4406:	603b      	str	r3, [r7, #0]
    4408:	4613      	mov	r3, r2
    440a:	71fb      	strb	r3, [r7, #7]
    // optimise away parenthesis around an expression if possible
    if (rule_id == RULE_atom_paren) {
    440c:	79fb      	ldrb	r3, [r7, #7]
    440e:	2b2a      	cmp	r3, #42	; 0x2a
    4410:	d114      	bne.n	443c <push_result_rule+0x40>
        // there should be just 1 arg for this rule
        mp_parse_node_t pn = peek_result(parser, 0);
    4412:	2100      	movs	r1, #0
    4414:	68f8      	ldr	r0, [r7, #12]
    4416:	f7ff fcd9 	bl	3dcc <peek_result>
    441a:	61b8      	str	r0, [r7, #24]
        if (MP_PARSE_NODE_IS_NULL(pn)) {
    441c:	69bb      	ldr	r3, [r7, #24]
    441e:	2b00      	cmp	r3, #0
    4420:	d00c      	beq.n	443c <push_result_rule+0x40>
            // need to keep parenthesis for ()
        } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, RULE_testlist_comp)) {
    4422:	69bb      	ldr	r3, [r7, #24]
    4424:	2b00      	cmp	r3, #0
    4426:	d045      	beq.n	44b4 <push_result_rule+0xb8>
    4428:	69bb      	ldr	r3, [r7, #24]
    442a:	f003 0303 	and.w	r3, r3, #3
    442e:	2b00      	cmp	r3, #0
    4430:	d140      	bne.n	44b4 <push_result_rule+0xb8>
    4432:	69bb      	ldr	r3, [r7, #24]
    4434:	685b      	ldr	r3, [r3, #4]
    4436:	b2db      	uxtb	r3, r3
    4438:	2b8a      	cmp	r3, #138	; 0x8a
    443a:	d13b      	bne.n	44b4 <push_result_rule+0xb8>
            return;
        }
    }

    #if MICROPY_COMP_CONST_FOLDING
    if (fold_logical_constants(parser, rule_id, &num_args)) {
    443c:	463a      	mov	r2, r7
    443e:	79fb      	ldrb	r3, [r7, #7]
    4440:	4619      	mov	r1, r3
    4442:	68f8      	ldr	r0, [r7, #12]
    4444:	f7ff fdf6 	bl	4034 <fold_logical_constants>
    4448:	4603      	mov	r3, r0
    444a:	2b00      	cmp	r3, #0
    444c:	d134      	bne.n	44b8 <push_result_rule+0xbc>
        // we folded this rule so return straight away
        return;
    }
    if (fold_constants(parser, rule_id, num_args)) {
    444e:	683a      	ldr	r2, [r7, #0]
    4450:	79fb      	ldrb	r3, [r7, #7]
    4452:	4619      	mov	r1, r3
    4454:	68f8      	ldr	r0, [r7, #12]
    4456:	f7ff fe95 	bl	4184 <fold_constants>
    445a:	4603      	mov	r3, r0
    445c:	2b00      	cmp	r3, #0
    445e:	d12d      	bne.n	44bc <push_result_rule+0xc0>
        // we folded this rule so return straight away
        return;
    }
    #endif

    mp_parse_node_struct_t *pn = parser_alloc(parser, sizeof(mp_parse_node_struct_t) + sizeof(mp_parse_node_t) * num_args);
    4460:	683b      	ldr	r3, [r7, #0]
    4462:	3302      	adds	r3, #2
    4464:	009b      	lsls	r3, r3, #2
    4466:	4619      	mov	r1, r3
    4468:	68f8      	ldr	r0, [r7, #12]
    446a:	f7ff fac9 	bl	3a00 <parser_alloc>
    446e:	6178      	str	r0, [r7, #20]
    pn->source_line = src_line;
    4470:	697b      	ldr	r3, [r7, #20]
    4472:	68ba      	ldr	r2, [r7, #8]
    4474:	601a      	str	r2, [r3, #0]
    pn->kind_num_nodes = (rule_id & 0xff) | (num_args << 8);
    4476:	79fa      	ldrb	r2, [r7, #7]
    4478:	683b      	ldr	r3, [r7, #0]
    447a:	021b      	lsls	r3, r3, #8
    447c:	431a      	orrs	r2, r3
    447e:	697b      	ldr	r3, [r7, #20]
    4480:	605a      	str	r2, [r3, #4]
    for (size_t i = num_args; i > 0; i--) {
    4482:	683b      	ldr	r3, [r7, #0]
    4484:	61fb      	str	r3, [r7, #28]
    4486:	e00c      	b.n	44a2 <push_result_rule+0xa6>
        pn->nodes[i - 1] = pop_result(parser);
    4488:	69fb      	ldr	r3, [r7, #28]
    448a:	1e5c      	subs	r4, r3, #1
    448c:	68f8      	ldr	r0, [r7, #12]
    448e:	f7ff fc77 	bl	3d80 <pop_result>
    4492:	4601      	mov	r1, r0
    4494:	697b      	ldr	r3, [r7, #20]
    4496:	1ca2      	adds	r2, r4, #2
    4498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = num_args; i > 0; i--) {
    449c:	69fb      	ldr	r3, [r7, #28]
    449e:	3b01      	subs	r3, #1
    44a0:	61fb      	str	r3, [r7, #28]
    44a2:	69fb      	ldr	r3, [r7, #28]
    44a4:	2b00      	cmp	r3, #0
    44a6:	d1ef      	bne.n	4488 <push_result_rule+0x8c>
    }
    push_result_node(parser, (mp_parse_node_t)pn);
    44a8:	697b      	ldr	r3, [r7, #20]
    44aa:	4619      	mov	r1, r3
    44ac:	68f8      	ldr	r0, [r7, #12]
    44ae:	f7ff fcb5 	bl	3e1c <push_result_node>
    44b2:	e004      	b.n	44be <push_result_rule+0xc2>
            return;
    44b4:	bf00      	nop
    44b6:	e002      	b.n	44be <push_result_rule+0xc2>
        return;
    44b8:	bf00      	nop
    44ba:	e000      	b.n	44be <push_result_rule+0xc2>
        return;
    44bc:	bf00      	nop
}
    44be:	3724      	adds	r7, #36	; 0x24
    44c0:	46bd      	mov	sp, r7
    44c2:	bd90      	pop	{r4, r7, pc}

000044c4 <mp_parse>:

mp_parse_tree_t mp_parse(mp_lexer_t *lex, mp_parse_input_kind_t input_kind) {
    44c4:	b580      	push	{r7, lr}
    44c6:	b0a2      	sub	sp, #136	; 0x88
    44c8:	af00      	add	r7, sp, #0
    44ca:	60f8      	str	r0, [r7, #12]
    44cc:	60b9      	str	r1, [r7, #8]
    44ce:	607a      	str	r2, [r7, #4]

    // initialise parser and allocate memory for its stacks

    parser_t parser;

    parser.rule_stack_alloc = MICROPY_ALLOC_PARSE_RULE_INIT;
    44d0:	2340      	movs	r3, #64	; 0x40
    44d2:	61fb      	str	r3, [r7, #28]
    parser.rule_stack_top = 0;
    44d4:	2300      	movs	r3, #0
    44d6:	623b      	str	r3, [r7, #32]
    parser.rule_stack = m_new(rule_stack_t, parser.rule_stack_alloc);
    44d8:	69fb      	ldr	r3, [r7, #28]
    44da:	00db      	lsls	r3, r3, #3
    44dc:	4618      	mov	r0, r3
    44de:	f7fb ff1d 	bl	31c <m_malloc>
    44e2:	4603      	mov	r3, r0
    44e4:	627b      	str	r3, [r7, #36]	; 0x24

    parser.result_stack_alloc = MICROPY_ALLOC_PARSE_RESULT_INIT;
    44e6:	2320      	movs	r3, #32
    44e8:	62bb      	str	r3, [r7, #40]	; 0x28
    parser.result_stack_top = 0;
    44ea:	2300      	movs	r3, #0
    44ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    parser.result_stack = m_new(mp_parse_node_t, parser.result_stack_alloc);
    44ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    44f0:	009b      	lsls	r3, r3, #2
    44f2:	4618      	mov	r0, r3
    44f4:	f7fb ff12 	bl	31c <m_malloc>
    44f8:	4603      	mov	r3, r0
    44fa:	633b      	str	r3, [r7, #48]	; 0x30

    parser.lexer = lex;
    44fc:	68bb      	ldr	r3, [r7, #8]
    44fe:	637b      	str	r3, [r7, #52]	; 0x34

    parser.tree.chunk = NULL;
    4500:	2300      	movs	r3, #0
    4502:	63fb      	str	r3, [r7, #60]	; 0x3c
    parser.cur_chunk = NULL;
    4504:	2300      	movs	r3, #0
    4506:	643b      	str	r3, [r7, #64]	; 0x40
    mp_map_init(&parser.consts, 0);
    #endif

    // work out the top-level rule to use, and push it on the stack
    size_t top_level_rule;
    switch (input_kind) {
    4508:	687b      	ldr	r3, [r7, #4]
    450a:	2b00      	cmp	r3, #0
    450c:	d002      	beq.n	4514 <mp_parse+0x50>
    450e:	2b02      	cmp	r3, #2
    4510:	d004      	beq.n	451c <mp_parse+0x58>
    4512:	e007      	b.n	4524 <mp_parse+0x60>
        case MP_PARSE_SINGLE_INPUT: top_level_rule = RULE_single_input; break;
    4514:	2336      	movs	r3, #54	; 0x36
    4516:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    451a:	e006      	b.n	452a <mp_parse+0x66>
        case MP_PARSE_EVAL_INPUT: top_level_rule = RULE_eval_input; break;
    451c:	2338      	movs	r3, #56	; 0x38
    451e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    4522:	e002      	b.n	452a <mp_parse+0x66>
        default: top_level_rule = RULE_file_input;
    4524:	2300      	movs	r3, #0
    4526:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }
    push_rule(&parser, lex->tok_line, top_level_rule, 0);
    452a:	68bb      	ldr	r3, [r7, #8]
    452c:	6b99      	ldr	r1, [r3, #56]	; 0x38
    452e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    4532:	b2da      	uxtb	r2, r3
    4534:	f107 001c 	add.w	r0, r7, #28
    4538:	2300      	movs	r3, #0
    453a:	f7ff facb 	bl	3ad4 <push_rule>

    // parse!

    bool backtrack = false;
    453e:	2300      	movs	r3, #0
    4540:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

    for (;;) {
        next_rule:
        if (parser.rule_stack_top == 0) {
    4544:	6a3b      	ldr	r3, [r7, #32]
    4546:	2b00      	cmp	r3, #0
    4548:	d104      	bne.n	4554 <mp_parse+0x90>
    #if MICROPY_COMP_CONST
    mp_map_deinit(&parser.consts);
    #endif

    // truncate final chunk and link into chain of chunks
    if (parser.cur_chunk != NULL) {
    454a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    454c:	2b00      	cmp	r3, #0
    454e:	f040 8292 	bne.w	4a76 <mp_parse+0x5b2>
    4552:	e2a1      	b.n	4a98 <mp_parse+0x5d4>
        uint8_t rule_id = pop_rule(&parser, &i, &rule_src_line);
    4554:	f107 0214 	add.w	r2, r7, #20
    4558:	f107 0118 	add.w	r1, r7, #24
    455c:	f107 031c 	add.w	r3, r7, #28
    4560:	4618      	mov	r0, r3
    4562:	f7ff fb25 	bl	3bb0 <pop_rule>
    4566:	4603      	mov	r3, r0
    4568:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        uint8_t rule_act = rule_act_table[rule_id];
    456c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    4570:	4ab2      	ldr	r2, [pc, #712]	; (483c <mp_parse+0x378>)
    4572:	5cd3      	ldrb	r3, [r2, r3]
    4574:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        const uint16_t *rule_arg = get_rule_arg(rule_id);
    4578:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    457c:	4618      	mov	r0, r3
    457e:	f7ff fa1f 	bl	39c0 <get_rule_arg>
    4582:	6638      	str	r0, [r7, #96]	; 0x60
        size_t n = rule_act & RULE_ACT_ARG_MASK;
    4584:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    4588:	f003 030f 	and.w	r3, r3, #15
    458c:	65fb      	str	r3, [r7, #92]	; 0x5c
        switch (rule_act & RULE_ACT_KIND_MASK) {
    458e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    4592:	f003 0330 	and.w	r3, r3, #48	; 0x30
    4596:	2b10      	cmp	r3, #16
    4598:	d002      	beq.n	45a0 <mp_parse+0xdc>
    459a:	2b20      	cmp	r3, #32
    459c:	d067      	beq.n	466e <mp_parse+0x1aa>
    459e:	e1aa      	b.n	48f6 <mp_parse+0x432>
                if (i > 0 && !backtrack) {
    45a0:	69bb      	ldr	r3, [r7, #24]
    45a2:	2b00      	cmp	r3, #0
    45a4:	d006      	beq.n	45b4 <mp_parse+0xf0>
    45a6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
    45aa:	f083 0301 	eor.w	r3, r3, #1
    45ae:	b2db      	uxtb	r3, r3
    45b0:	2b00      	cmp	r3, #0
    45b2:	d1c7      	bne.n	4544 <mp_parse+0x80>
                    backtrack = false;
    45b4:	2300      	movs	r3, #0
    45b6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                for (; i < n; ++i) {
    45ba:	e050      	b.n	465e <mp_parse+0x19a>
                    uint16_t kind = rule_arg[i] & RULE_ARG_KIND_MASK;
    45bc:	69bb      	ldr	r3, [r7, #24]
    45be:	005b      	lsls	r3, r3, #1
    45c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    45c2:	4413      	add	r3, r2
    45c4:	881b      	ldrh	r3, [r3, #0]
    45c6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    45ca:	f023 030f 	bic.w	r3, r3, #15
    45ce:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
                    if (kind == RULE_ARG_TOK) {
    45d2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    45d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    45da:	d116      	bne.n	460a <mp_parse+0x146>
                        if (lex->tok_kind == (rule_arg[i] & RULE_ARG_ARG_MASK)) {
    45dc:	68bb      	ldr	r3, [r7, #8]
    45de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    45e0:	69bb      	ldr	r3, [r7, #24]
    45e2:	005b      	lsls	r3, r3, #1
    45e4:	6e39      	ldr	r1, [r7, #96]	; 0x60
    45e6:	440b      	add	r3, r1
    45e8:	881b      	ldrh	r3, [r3, #0]
    45ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
    45ee:	429a      	cmp	r2, r3
    45f0:	d132      	bne.n	4658 <mp_parse+0x194>
                            push_result_token(&parser, rule_id);
    45f2:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    45f6:	f107 031c 	add.w	r3, r7, #28
    45fa:	4611      	mov	r1, r2
    45fc:	4618      	mov	r0, r3
    45fe:	f7ff fc65 	bl	3ecc <push_result_token>
                            mp_lexer_to_next(lex);
    4602:	68b8      	ldr	r0, [r7, #8]
    4604:	f7fe fe22 	bl	324c <mp_lexer_to_next>
                            goto next_rule;
    4608:	e79c      	b.n	4544 <mp_parse+0x80>
                        assert(kind == RULE_ARG_RULE);
    460a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    460e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    4612:	d006      	beq.n	4622 <mp_parse+0x15e>
    4614:	4b8a      	ldr	r3, [pc, #552]	; (4840 <mp_parse+0x37c>)
    4616:	4a8b      	ldr	r2, [pc, #556]	; (4844 <mp_parse+0x380>)
    4618:	f240 318b 	movw	r1, #907	; 0x38b
    461c:	488a      	ldr	r0, [pc, #552]	; (4848 <mp_parse+0x384>)
    461e:	f017 f8b1 	bl	1b784 <__assert_func>
                        if (i + 1 < n) {
    4622:	69bb      	ldr	r3, [r7, #24]
    4624:	1c5a      	adds	r2, r3, #1
    4626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4628:	429a      	cmp	r2, r3
    462a:	d208      	bcs.n	463e <mp_parse+0x17a>
                            push_rule(&parser, rule_src_line, rule_id, i + 1); // save this or-rule
    462c:	6979      	ldr	r1, [r7, #20]
    462e:	69bb      	ldr	r3, [r7, #24]
    4630:	3301      	adds	r3, #1
    4632:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4636:	f107 001c 	add.w	r0, r7, #28
    463a:	f7ff fa4b 	bl	3ad4 <push_rule>
                        push_rule_from_arg(&parser, rule_arg[i]); // push child of or-rule
    463e:	69bb      	ldr	r3, [r7, #24]
    4640:	005b      	lsls	r3, r3, #1
    4642:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4644:	4413      	add	r3, r2
    4646:	881b      	ldrh	r3, [r3, #0]
    4648:	461a      	mov	r2, r3
    464a:	f107 031c 	add.w	r3, r7, #28
    464e:	4611      	mov	r1, r2
    4650:	4618      	mov	r0, r3
    4652:	f7ff fa7d 	bl	3b50 <push_rule_from_arg>
                        goto next_rule;
    4656:	e775      	b.n	4544 <mp_parse+0x80>
                for (; i < n; ++i) {
    4658:	69bb      	ldr	r3, [r7, #24]
    465a:	3301      	adds	r3, #1
    465c:	61bb      	str	r3, [r7, #24]
    465e:	69ba      	ldr	r2, [r7, #24]
    4660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4662:	429a      	cmp	r2, r3
    4664:	d3aa      	bcc.n	45bc <mp_parse+0xf8>
                backtrack = true;
    4666:	2301      	movs	r3, #1
    4668:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                break;
    466c:	e202      	b.n	4a74 <mp_parse+0x5b0>
                if (backtrack) {
    466e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
    4672:	2b00      	cmp	r3, #0
    4674:	d06c      	beq.n	4750 <mp_parse+0x28c>
                    assert(i > 0);
    4676:	69bb      	ldr	r3, [r7, #24]
    4678:	2b00      	cmp	r3, #0
    467a:	d106      	bne.n	468a <mp_parse+0x1c6>
    467c:	4b73      	ldr	r3, [pc, #460]	; (484c <mp_parse+0x388>)
    467e:	4a71      	ldr	r2, [pc, #452]	; (4844 <mp_parse+0x380>)
    4680:	f240 319a 	movw	r1, #922	; 0x39a
    4684:	4870      	ldr	r0, [pc, #448]	; (4848 <mp_parse+0x384>)
    4686:	f017 f87d 	bl	1b784 <__assert_func>
                    if ((rule_arg[i - 1] & RULE_ARG_KIND_MASK) == RULE_ARG_OPT_RULE) {
    468a:	69bb      	ldr	r3, [r7, #24]
    468c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    4690:	3b01      	subs	r3, #1
    4692:	005b      	lsls	r3, r3, #1
    4694:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4696:	4413      	add	r3, r2
    4698:	881b      	ldrh	r3, [r3, #0]
    469a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    469e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
    46a2:	d109      	bne.n	46b8 <mp_parse+0x1f4>
                        push_result_node(&parser, MP_PARSE_NODE_NULL);
    46a4:	f107 031c 	add.w	r3, r7, #28
    46a8:	2100      	movs	r1, #0
    46aa:	4618      	mov	r0, r3
    46ac:	f7ff fbb6 	bl	3e1c <push_result_node>
                        backtrack = false;
    46b0:	2300      	movs	r3, #0
    46b2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    46b6:	e04b      	b.n	4750 <mp_parse+0x28c>
                        if (i > 1) {
    46b8:	69bb      	ldr	r3, [r7, #24]
    46ba:	2b01      	cmp	r3, #1
    46bc:	f200 81f4 	bhi.w	4aa8 <mp_parse+0x5e4>
                            goto next_rule;
    46c0:	e740      	b.n	4544 <mp_parse+0x80>
                    if ((rule_arg[i] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    46c2:	69bb      	ldr	r3, [r7, #24]
    46c4:	005b      	lsls	r3, r3, #1
    46c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    46c8:	4413      	add	r3, r2
    46ca:	881b      	ldrh	r3, [r3, #0]
    46cc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    46d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    46d4:	d123      	bne.n	471e <mp_parse+0x25a>
                        mp_token_kind_t tok_kind = rule_arg[i] & RULE_ARG_ARG_MASK;
    46d6:	69bb      	ldr	r3, [r7, #24]
    46d8:	005b      	lsls	r3, r3, #1
    46da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    46dc:	4413      	add	r3, r2
    46de:	881b      	ldrh	r3, [r3, #0]
    46e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
    46e4:	657b      	str	r3, [r7, #84]	; 0x54
                        if (lex->tok_kind == tok_kind) {
    46e6:	68bb      	ldr	r3, [r7, #8]
    46e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    46ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    46ec:	429a      	cmp	r2, r3
    46ee:	d10e      	bne.n	470e <mp_parse+0x24a>
                            if (tok_kind == MP_TOKEN_NAME) {
    46f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    46f2:	2b07      	cmp	r3, #7
    46f4:	d107      	bne.n	4706 <mp_parse+0x242>
                                push_result_token(&parser, rule_id);
    46f6:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    46fa:	f107 031c 	add.w	r3, r7, #28
    46fe:	4611      	mov	r1, r2
    4700:	4618      	mov	r0, r3
    4702:	f7ff fbe3 	bl	3ecc <push_result_token>
                            mp_lexer_to_next(lex);
    4706:	68b8      	ldr	r0, [r7, #8]
    4708:	f7fe fda0 	bl	324c <mp_lexer_to_next>
    470c:	e01d      	b.n	474a <mp_parse+0x286>
                            if (i > 0) {
    470e:	69bb      	ldr	r3, [r7, #24]
    4710:	2b00      	cmp	r3, #0
    4712:	f040 81cb 	bne.w	4aac <mp_parse+0x5e8>
                                backtrack = true;
    4716:	2301      	movs	r3, #1
    4718:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                                goto next_rule;
    471c:	e712      	b.n	4544 <mp_parse+0x80>
                        push_rule(&parser, rule_src_line, rule_id, i + 1); // save this and-rule
    471e:	6979      	ldr	r1, [r7, #20]
    4720:	69bb      	ldr	r3, [r7, #24]
    4722:	3301      	adds	r3, #1
    4724:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4728:	f107 001c 	add.w	r0, r7, #28
    472c:	f7ff f9d2 	bl	3ad4 <push_rule>
                        push_rule_from_arg(&parser, rule_arg[i]); // push child of and-rule
    4730:	69bb      	ldr	r3, [r7, #24]
    4732:	005b      	lsls	r3, r3, #1
    4734:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4736:	4413      	add	r3, r2
    4738:	881b      	ldrh	r3, [r3, #0]
    473a:	461a      	mov	r2, r3
    473c:	f107 031c 	add.w	r3, r7, #28
    4740:	4611      	mov	r1, r2
    4742:	4618      	mov	r0, r3
    4744:	f7ff fa04 	bl	3b50 <push_rule_from_arg>
                        goto next_rule;
    4748:	e6fc      	b.n	4544 <mp_parse+0x80>
                for (; i < n; ++i) {
    474a:	69bb      	ldr	r3, [r7, #24]
    474c:	3301      	adds	r3, #1
    474e:	61bb      	str	r3, [r7, #24]
    4750:	69ba      	ldr	r2, [r7, #24]
    4752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4754:	429a      	cmp	r2, r3
    4756:	d3b4      	bcc.n	46c2 <mp_parse+0x1fe>
                assert(i == n);
    4758:	69ba      	ldr	r2, [r7, #24]
    475a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    475c:	429a      	cmp	r2, r3
    475e:	d006      	beq.n	476e <mp_parse+0x2aa>
    4760:	4b3b      	ldr	r3, [pc, #236]	; (4850 <mp_parse+0x38c>)
    4762:	4a38      	ldr	r2, [pc, #224]	; (4844 <mp_parse+0x380>)
    4764:	f240 31c7 	movw	r1, #967	; 0x3c7
    4768:	4837      	ldr	r0, [pc, #220]	; (4848 <mp_parse+0x384>)
    476a:	f017 f80b 	bl	1b784 <__assert_func>
                if (input_kind != MP_PARSE_SINGLE_INPUT && rule_id == RULE_expr_stmt && peek_result(&parser, 0) == MP_PARSE_NODE_NULL) {
    476e:	687b      	ldr	r3, [r7, #4]
    4770:	2b00      	cmp	r3, #0
    4772:	d03c      	beq.n	47ee <mp_parse+0x32a>
    4774:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    4778:	2b05      	cmp	r3, #5
    477a:	d138      	bne.n	47ee <mp_parse+0x32a>
    477c:	f107 031c 	add.w	r3, r7, #28
    4780:	2100      	movs	r1, #0
    4782:	4618      	mov	r0, r3
    4784:	f7ff fb22 	bl	3dcc <peek_result>
    4788:	4603      	mov	r3, r0
    478a:	2b00      	cmp	r3, #0
    478c:	d12f      	bne.n	47ee <mp_parse+0x32a>
                    mp_parse_node_t p = peek_result(&parser, 1);
    478e:	f107 031c 	add.w	r3, r7, #28
    4792:	2101      	movs	r1, #1
    4794:	4618      	mov	r0, r3
    4796:	f7ff fb19 	bl	3dcc <peek_result>
    479a:	6538      	str	r0, [r7, #80]	; 0x50
                    if ((MP_PARSE_NODE_IS_LEAF(p) && !MP_PARSE_NODE_IS_ID(p))
    479c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    479e:	f003 0303 	and.w	r3, r3, #3
    47a2:	2b00      	cmp	r3, #0
    47a4:	d004      	beq.n	47b0 <mp_parse+0x2ec>
    47a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    47a8:	f003 030f 	and.w	r3, r3, #15
    47ac:	2b02      	cmp	r3, #2
    47ae:	d10c      	bne.n	47ca <mp_parse+0x306>
                        || MP_PARSE_NODE_IS_STRUCT_KIND(p, RULE_const_object)) {
    47b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    47b2:	2b00      	cmp	r3, #0
    47b4:	d01b      	beq.n	47ee <mp_parse+0x32a>
    47b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    47b8:	f003 0303 	and.w	r3, r3, #3
    47bc:	2b00      	cmp	r3, #0
    47be:	d116      	bne.n	47ee <mp_parse+0x32a>
    47c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    47c2:	685b      	ldr	r3, [r3, #4]
    47c4:	b2db      	uxtb	r3, r3
    47c6:	2b35      	cmp	r3, #53	; 0x35
    47c8:	d111      	bne.n	47ee <mp_parse+0x32a>
                        pop_result(&parser); // MP_PARSE_NODE_NULL
    47ca:	f107 031c 	add.w	r3, r7, #28
    47ce:	4618      	mov	r0, r3
    47d0:	f7ff fad6 	bl	3d80 <pop_result>
                        pop_result(&parser); // const expression (leaf or RULE_const_object)
    47d4:	f107 031c 	add.w	r3, r7, #28
    47d8:	4618      	mov	r0, r3
    47da:	f7ff fad1 	bl	3d80 <pop_result>
                        push_result_rule(&parser, rule_src_line, RULE_pass_stmt, 0);
    47de:	6979      	ldr	r1, [r7, #20]
    47e0:	f107 001c 	add.w	r0, r7, #28
    47e4:	2300      	movs	r3, #0
    47e6:	2208      	movs	r2, #8
    47e8:	f7ff fe08 	bl	43fc <push_result_rule>
                        break;
    47ec:	e142      	b.n	4a74 <mp_parse+0x5b0>
                i = 0;
    47ee:	2300      	movs	r3, #0
    47f0:	61bb      	str	r3, [r7, #24]
                size_t num_not_nil = 0;
    47f2:	2300      	movs	r3, #0
    47f4:	67fb      	str	r3, [r7, #124]	; 0x7c
                for (size_t x = n; x > 0;) {
    47f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    47f8:	67bb      	str	r3, [r7, #120]	; 0x78
    47fa:	e03b      	b.n	4874 <mp_parse+0x3b0>
                    --x;
    47fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    47fe:	3b01      	subs	r3, #1
    4800:	67bb      	str	r3, [r7, #120]	; 0x78
                    if ((rule_arg[x] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    4802:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4804:	005b      	lsls	r3, r3, #1
    4806:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4808:	4413      	add	r3, r2
    480a:	881b      	ldrh	r3, [r3, #0]
    480c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    4814:	d11e      	bne.n	4854 <mp_parse+0x390>
                        mp_token_kind_t tok_kind = rule_arg[x] & RULE_ARG_ARG_MASK;
    4816:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4818:	005b      	lsls	r3, r3, #1
    481a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    481c:	4413      	add	r3, r2
    481e:	881b      	ldrh	r3, [r3, #0]
    4820:	f3c3 030b 	ubfx	r3, r3, #0, #12
    4824:	64fb      	str	r3, [r7, #76]	; 0x4c
                        if (tok_kind == MP_TOKEN_NAME) {
    4826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4828:	2b07      	cmp	r3, #7
    482a:	d123      	bne.n	4874 <mp_parse+0x3b0>
                            i += 1;
    482c:	69bb      	ldr	r3, [r7, #24]
    482e:	3301      	adds	r3, #1
    4830:	61bb      	str	r3, [r7, #24]
                            num_not_nil += 1;
    4832:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4834:	3301      	adds	r3, #1
    4836:	67fb      	str	r3, [r7, #124]	; 0x7c
    4838:	e01c      	b.n	4874 <mp_parse+0x3b0>
    483a:	bf00      	nop
    483c:	0001fbb8 	.word	0x0001fbb8
    4840:	00020118 	.word	0x00020118
    4844:	00020264 	.word	0x00020264
    4848:	000200a8 	.word	0x000200a8
    484c:	00020130 	.word	0x00020130
    4850:	00020138 	.word	0x00020138
                        if (peek_result(&parser, i) != MP_PARSE_NODE_NULL) {
    4854:	69ba      	ldr	r2, [r7, #24]
    4856:	f107 031c 	add.w	r3, r7, #28
    485a:	4611      	mov	r1, r2
    485c:	4618      	mov	r0, r3
    485e:	f7ff fab5 	bl	3dcc <peek_result>
    4862:	4603      	mov	r3, r0
    4864:	2b00      	cmp	r3, #0
    4866:	d002      	beq.n	486e <mp_parse+0x3aa>
                            num_not_nil += 1;
    4868:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    486a:	3301      	adds	r3, #1
    486c:	67fb      	str	r3, [r7, #124]	; 0x7c
                        i += 1;
    486e:	69bb      	ldr	r3, [r7, #24]
    4870:	3301      	adds	r3, #1
    4872:	61bb      	str	r3, [r7, #24]
                for (size_t x = n; x > 0;) {
    4874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4876:	2b00      	cmp	r3, #0
    4878:	d1c0      	bne.n	47fc <mp_parse+0x338>
                if (num_not_nil == 1 && (rule_act & RULE_ACT_ALLOW_IDENT)) {
    487a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    487c:	2b01      	cmp	r3, #1
    487e:	d124      	bne.n	48ca <mp_parse+0x406>
    4880:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    4884:	f003 0340 	and.w	r3, r3, #64	; 0x40
    4888:	2b00      	cmp	r3, #0
    488a:	d01e      	beq.n	48ca <mp_parse+0x406>
                    mp_parse_node_t pn = MP_PARSE_NODE_NULL;
    488c:	2300      	movs	r3, #0
    488e:	677b      	str	r3, [r7, #116]	; 0x74
                    for (size_t x = 0; x < i; ++x) {
    4890:	2300      	movs	r3, #0
    4892:	673b      	str	r3, [r7, #112]	; 0x70
    4894:	e00d      	b.n	48b2 <mp_parse+0x3ee>
                        mp_parse_node_t pn2 = pop_result(&parser);
    4896:	f107 031c 	add.w	r3, r7, #28
    489a:	4618      	mov	r0, r3
    489c:	f7ff fa70 	bl	3d80 <pop_result>
    48a0:	64b8      	str	r0, [r7, #72]	; 0x48
                        if (pn2 != MP_PARSE_NODE_NULL) {
    48a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    48a4:	2b00      	cmp	r3, #0
    48a6:	d001      	beq.n	48ac <mp_parse+0x3e8>
                            pn = pn2;
    48a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    48aa:	677b      	str	r3, [r7, #116]	; 0x74
                    for (size_t x = 0; x < i; ++x) {
    48ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    48ae:	3301      	adds	r3, #1
    48b0:	673b      	str	r3, [r7, #112]	; 0x70
    48b2:	69bb      	ldr	r3, [r7, #24]
    48b4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    48b6:	429a      	cmp	r2, r3
    48b8:	d3ed      	bcc.n	4896 <mp_parse+0x3d2>
                    push_result_node(&parser, pn);
    48ba:	f107 031c 	add.w	r3, r7, #28
    48be:	6f79      	ldr	r1, [r7, #116]	; 0x74
    48c0:	4618      	mov	r0, r3
    48c2:	f7ff faab 	bl	3e1c <push_result_node>
                if (num_not_nil == 1 && (rule_act & RULE_ACT_ALLOW_IDENT)) {
    48c6:	bf00      	nop
                break;
    48c8:	e0d4      	b.n	4a74 <mp_parse+0x5b0>
                    if (rule_act & RULE_ACT_ADD_BLANK) {
    48ca:	f997 3066 	ldrsb.w	r3, [r7, #102]	; 0x66
    48ce:	2b00      	cmp	r3, #0
    48d0:	da08      	bge.n	48e4 <mp_parse+0x420>
                        push_result_node(&parser, MP_PARSE_NODE_NULL);
    48d2:	f107 031c 	add.w	r3, r7, #28
    48d6:	2100      	movs	r1, #0
    48d8:	4618      	mov	r0, r3
    48da:	f7ff fa9f 	bl	3e1c <push_result_node>
                        i += 1;
    48de:	69bb      	ldr	r3, [r7, #24]
    48e0:	3301      	adds	r3, #1
    48e2:	61bb      	str	r3, [r7, #24]
                    push_result_rule(&parser, rule_src_line, rule_id, i);
    48e4:	6979      	ldr	r1, [r7, #20]
    48e6:	69bb      	ldr	r3, [r7, #24]
    48e8:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    48ec:	f107 001c 	add.w	r0, r7, #28
    48f0:	f7ff fd84 	bl	43fc <push_result_rule>
                break;
    48f4:	e0be      	b.n	4a74 <mp_parse+0x5b0>
                assert((rule_act & RULE_ACT_KIND_MASK) == RULE_ACT_LIST);
    48f6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    48fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
    48fe:	2b30      	cmp	r3, #48	; 0x30
    4900:	d006      	beq.n	4910 <mp_parse+0x44c>
    4902:	4b90      	ldr	r3, [pc, #576]	; (4b44 <mp_parse+0x680>)
    4904:	4a90      	ldr	r2, [pc, #576]	; (4b48 <mp_parse+0x684>)
    4906:	f240 410a 	movw	r1, #1034	; 0x40a
    490a:	4890      	ldr	r0, [pc, #576]	; (4b4c <mp_parse+0x688>)
    490c:	f016 ff3a 	bl	1b784 <__assert_func>
                if (backtrack) {
    4910:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
    4914:	2b00      	cmp	r3, #0
    4916:	d025      	beq.n	4964 <mp_parse+0x4a0>
                    had_trailing_sep = false;
    4918:	2300      	movs	r3, #0
    491a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                    if (n == 2) {
    491e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4920:	2b02      	cmp	r3, #2
    4922:	d107      	bne.n	4934 <mp_parse+0x470>
                        if (i == 1) {
    4924:	69bb      	ldr	r3, [r7, #24]
    4926:	2b01      	cmp	r3, #1
    4928:	d100      	bne.n	492c <mp_parse+0x468>
                            goto next_rule;
    492a:	e60b      	b.n	4544 <mp_parse+0x80>
                            backtrack = false;
    492c:	2300      	movs	r3, #0
    492e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    4932:	e068      	b.n	4a06 <mp_parse+0x542>
                        if (i == 1) {
    4934:	69bb      	ldr	r3, [r7, #24]
    4936:	2b01      	cmp	r3, #1
    4938:	d100      	bne.n	493c <mp_parse+0x478>
                            goto next_rule;
    493a:	e603      	b.n	4544 <mp_parse+0x80>
                        } else if ((i & 1) == 1) {
    493c:	69bb      	ldr	r3, [r7, #24]
    493e:	f003 0301 	and.w	r3, r3, #1
    4942:	2b00      	cmp	r3, #0
    4944:	d00a      	beq.n	495c <mp_parse+0x498>
                            if (n == 3) {
    4946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4948:	2b03      	cmp	r3, #3
    494a:	f040 80b1 	bne.w	4ab0 <mp_parse+0x5ec>
                                had_trailing_sep = true;
    494e:	2301      	movs	r3, #1
    4950:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                                backtrack = false;
    4954:	2300      	movs	r3, #0
    4956:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    495a:	e054      	b.n	4a06 <mp_parse+0x542>
                            backtrack = false;
    495c:	2300      	movs	r3, #0
    495e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    4962:	e050      	b.n	4a06 <mp_parse+0x542>
                        size_t arg = rule_arg[i & 1 & n];
    4964:	69ba      	ldr	r2, [r7, #24]
    4966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4968:	4013      	ands	r3, r2
    496a:	f003 0301 	and.w	r3, r3, #1
    496e:	005b      	lsls	r3, r3, #1
    4970:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4972:	4413      	add	r3, r2
    4974:	881b      	ldrh	r3, [r3, #0]
    4976:	647b      	str	r3, [r7, #68]	; 0x44
                        if ((arg & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    4978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    497a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    497e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    4982:	d123      	bne.n	49cc <mp_parse+0x508>
                            if (lex->tok_kind == (arg & RULE_ARG_ARG_MASK)) {
    4984:	68bb      	ldr	r3, [r7, #8]
    4986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    4988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    498a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    498e:	429a      	cmp	r2, r3
    4990:	d115      	bne.n	49be <mp_parse+0x4fa>
                                if (i & 1 & n) {
    4992:	69ba      	ldr	r2, [r7, #24]
    4994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4996:	4013      	ands	r3, r2
    4998:	f003 0301 	and.w	r3, r3, #1
    499c:	2b00      	cmp	r3, #0
    499e:	d107      	bne.n	49b0 <mp_parse+0x4ec>
                                    push_result_token(&parser, rule_id);
    49a0:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    49a4:	f107 031c 	add.w	r3, r7, #28
    49a8:	4611      	mov	r1, r2
    49aa:	4618      	mov	r0, r3
    49ac:	f7ff fa8e 	bl	3ecc <push_result_token>
                                mp_lexer_to_next(lex);
    49b0:	68b8      	ldr	r0, [r7, #8]
    49b2:	f7fe fc4b 	bl	324c <mp_lexer_to_next>
                                i += 1;
    49b6:	69bb      	ldr	r3, [r7, #24]
    49b8:	3301      	adds	r3, #1
    49ba:	61bb      	str	r3, [r7, #24]
    49bc:	e7d2      	b.n	4964 <mp_parse+0x4a0>
                                i += 1;
    49be:	69bb      	ldr	r3, [r7, #24]
    49c0:	3301      	adds	r3, #1
    49c2:	61bb      	str	r3, [r7, #24]
                                backtrack = true;
    49c4:	2301      	movs	r3, #1
    49c6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                                goto list_backtrack;
    49ca:	e7a5      	b.n	4918 <mp_parse+0x454>
                            assert((arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE);
    49cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    49ce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    49d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    49d6:	d006      	beq.n	49e6 <mp_parse+0x522>
    49d8:	4b5d      	ldr	r3, [pc, #372]	; (4b50 <mp_parse+0x68c>)
    49da:	4a5b      	ldr	r2, [pc, #364]	; (4b48 <mp_parse+0x684>)
    49dc:	f240 4142 	movw	r1, #1090	; 0x442
    49e0:	485a      	ldr	r0, [pc, #360]	; (4b4c <mp_parse+0x688>)
    49e2:	f016 fecf 	bl	1b784 <__assert_func>
                            push_rule(&parser, rule_src_line, rule_id, i + 1); // save this list-rule
    49e6:	6979      	ldr	r1, [r7, #20]
    49e8:	69bb      	ldr	r3, [r7, #24]
    49ea:	3301      	adds	r3, #1
    49ec:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    49f0:	f107 001c 	add.w	r0, r7, #28
    49f4:	f7ff f86e 	bl	3ad4 <push_rule>
                            push_rule_from_arg(&parser, arg); // push child of list-rule
    49f8:	f107 031c 	add.w	r3, r7, #28
    49fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
    49fe:	4618      	mov	r0, r3
    4a00:	f7ff f8a6 	bl	3b50 <push_rule_from_arg>
                            goto next_rule;
    4a04:	e59e      	b.n	4544 <mp_parse+0x80>
                assert(i >= 1);
    4a06:	69bb      	ldr	r3, [r7, #24]
    4a08:	2b00      	cmp	r3, #0
    4a0a:	d106      	bne.n	4a1a <mp_parse+0x556>
    4a0c:	4b51      	ldr	r3, [pc, #324]	; (4b54 <mp_parse+0x690>)
    4a0e:	4a4e      	ldr	r2, [pc, #312]	; (4b48 <mp_parse+0x684>)
    4a10:	f240 4149 	movw	r1, #1097	; 0x449
    4a14:	484d      	ldr	r0, [pc, #308]	; (4b4c <mp_parse+0x688>)
    4a16:	f016 feb5 	bl	1b784 <__assert_func>
                i -= 1;
    4a1a:	69bb      	ldr	r3, [r7, #24]
    4a1c:	3b01      	subs	r3, #1
    4a1e:	61bb      	str	r3, [r7, #24]
                if ((n & 1) && (rule_arg[1] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    4a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4a22:	f003 0301 	and.w	r3, r3, #1
    4a26:	2b00      	cmp	r3, #0
    4a28:	d00b      	beq.n	4a42 <mp_parse+0x57e>
    4a2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4a2c:	3302      	adds	r3, #2
    4a2e:	881b      	ldrh	r3, [r3, #0]
    4a30:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    4a38:	d103      	bne.n	4a42 <mp_parse+0x57e>
                    i = (i + 1) / 2;
    4a3a:	69bb      	ldr	r3, [r7, #24]
    4a3c:	3301      	adds	r3, #1
    4a3e:	085b      	lsrs	r3, r3, #1
    4a40:	61bb      	str	r3, [r7, #24]
                if (i == 1) {
    4a42:	69bb      	ldr	r3, [r7, #24]
    4a44:	2b01      	cmp	r3, #1
    4a46:	d10c      	bne.n	4a62 <mp_parse+0x59e>
                    if (had_trailing_sep) {
    4a48:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
    4a4c:	2b00      	cmp	r3, #0
    4a4e:	d010      	beq.n	4a72 <mp_parse+0x5ae>
                        push_result_rule(&parser, rule_src_line, rule_id, i);
    4a50:	6979      	ldr	r1, [r7, #20]
    4a52:	69bb      	ldr	r3, [r7, #24]
    4a54:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4a58:	f107 001c 	add.w	r0, r7, #28
    4a5c:	f7ff fcce 	bl	43fc <push_result_rule>
                break;
    4a60:	e007      	b.n	4a72 <mp_parse+0x5ae>
                    push_result_rule(&parser, rule_src_line, rule_id, i);
    4a62:	6979      	ldr	r1, [r7, #20]
    4a64:	69bb      	ldr	r3, [r7, #24]
    4a66:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4a6a:	f107 001c 	add.w	r0, r7, #28
    4a6e:	f7ff fcc5 	bl	43fc <push_result_rule>
                break;
    4a72:	bf00      	nop
    }
    4a74:	e566      	b.n	4544 <mp_parse+0x80>
        (void)m_renew_maybe(byte, parser.cur_chunk,
    4a76:	6c38      	ldr	r0, [r7, #64]	; 0x40
    4a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4a7a:	685b      	ldr	r3, [r3, #4]
    4a7c:	3308      	adds	r3, #8
    4a7e:	2200      	movs	r2, #0
    4a80:	4619      	mov	r1, r3
    4a82:	f7fb fcb1 	bl	3e8 <m_realloc_maybe>
            sizeof(mp_parse_chunk_t) + parser.cur_chunk->alloc,
            sizeof(mp_parse_chunk_t) + parser.cur_chunk->union_.used,
            false);
        parser.cur_chunk->alloc = parser.cur_chunk->union_.used;
    4a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4a88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4a8a:	6852      	ldr	r2, [r2, #4]
    4a8c:	601a      	str	r2, [r3, #0]
        parser.cur_chunk->union_.next = parser.tree.chunk;
    4a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4a90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4a92:	605a      	str	r2, [r3, #4]
        parser.tree.chunk = parser.cur_chunk;
    4a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4a96:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if (
        lex->tok_kind != MP_TOKEN_END // check we are at the end of the token stream
    4a98:	68bb      	ldr	r3, [r7, #8]
    4a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if (
    4a9c:	2b00      	cmp	r3, #0
    4a9e:	d108      	bne.n	4ab2 <mp_parse+0x5ee>
        || parser.result_stack_top == 0 // check that we got a node (can fail on empty input)
    4aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4aa2:	2b00      	cmp	r3, #0
    4aa4:	d129      	bne.n	4afa <mp_parse+0x636>
    4aa6:	e004      	b.n	4ab2 <mp_parse+0x5ee>
                            goto syntax_error;
    4aa8:	bf00      	nop
    4aaa:	e002      	b.n	4ab2 <mp_parse+0x5ee>
                                goto syntax_error;
    4aac:	bf00      	nop
    4aae:	e000      	b.n	4ab2 <mp_parse+0x5ee>
                                goto syntax_error;
    4ab0:	bf00      	nop
        ) {
    syntax_error:;
        mp_obj_t exc;
        if (lex->tok_kind == MP_TOKEN_INDENT) {
    4ab2:	68bb      	ldr	r3, [r7, #8]
    4ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4ab6:	2b05      	cmp	r3, #5
    4ab8:	d105      	bne.n	4ac6 <mp_parse+0x602>
            exc = mp_obj_new_exception_msg(&mp_type_IndentationError,
    4aba:	4927      	ldr	r1, [pc, #156]	; (4b58 <mp_parse+0x694>)
    4abc:	4827      	ldr	r0, [pc, #156]	; (4b5c <mp_parse+0x698>)
    4abe:	f00a fda1 	bl	f604 <mp_obj_new_exception_msg>
    4ac2:	66b8      	str	r0, [r7, #104]	; 0x68
    4ac4:	e00e      	b.n	4ae4 <mp_parse+0x620>
                "unexpected indent");
        } else if (lex->tok_kind == MP_TOKEN_DEDENT_MISMATCH) {
    4ac6:	68bb      	ldr	r3, [r7, #8]
    4ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4aca:	2b02      	cmp	r3, #2
    4acc:	d105      	bne.n	4ada <mp_parse+0x616>
            exc = mp_obj_new_exception_msg(&mp_type_IndentationError,
    4ace:	4924      	ldr	r1, [pc, #144]	; (4b60 <mp_parse+0x69c>)
    4ad0:	4822      	ldr	r0, [pc, #136]	; (4b5c <mp_parse+0x698>)
    4ad2:	f00a fd97 	bl	f604 <mp_obj_new_exception_msg>
    4ad6:	66b8      	str	r0, [r7, #104]	; 0x68
    4ad8:	e004      	b.n	4ae4 <mp_parse+0x620>
                "unindent doesn't match any outer indent level");
        } else {
            exc = mp_obj_new_exception_msg(&mp_type_SyntaxError,
    4ada:	4922      	ldr	r1, [pc, #136]	; (4b64 <mp_parse+0x6a0>)
    4adc:	4822      	ldr	r0, [pc, #136]	; (4b68 <mp_parse+0x6a4>)
    4ade:	f00a fd91 	bl	f604 <mp_obj_new_exception_msg>
    4ae2:	66b8      	str	r0, [r7, #104]	; 0x68
                "invalid syntax");
        }
        // add traceback to give info about file name and location
        // we don't have a 'block' name, so just pass the NULL qstr to indicate this
        mp_obj_exception_add_traceback(exc, lex->source_name, lex->tok_line, MP_QSTR_NULL);
    4ae4:	68bb      	ldr	r3, [r7, #8]
    4ae6:	6819      	ldr	r1, [r3, #0]
    4ae8:	68bb      	ldr	r3, [r7, #8]
    4aea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4aec:	2300      	movs	r3, #0
    4aee:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    4af0:	f00a ff04 	bl	f8fc <mp_obj_exception_add_traceback>
        nlr_raise(exc);
    4af4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    4af6:	f7fb fbf3 	bl	2e0 <nlr_jump>
    }

    // get the root parse node that we created
    assert(parser.result_stack_top == 1);
    4afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4afc:	2b01      	cmp	r3, #1
    4afe:	d006      	beq.n	4b0e <mp_parse+0x64a>
    4b00:	4b1a      	ldr	r3, [pc, #104]	; (4b6c <mp_parse+0x6a8>)
    4b02:	4a11      	ldr	r2, [pc, #68]	; (4b48 <mp_parse+0x684>)
    4b04:	f44f 6191 	mov.w	r1, #1160	; 0x488
    4b08:	4810      	ldr	r0, [pc, #64]	; (4b4c <mp_parse+0x688>)
    4b0a:	f016 fe3b 	bl	1b784 <__assert_func>
    parser.tree.root = parser.result_stack[0];
    4b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4b10:	681b      	ldr	r3, [r3, #0]
    4b12:	63bb      	str	r3, [r7, #56]	; 0x38

    // free the memory that we don't need anymore
    m_del(rule_stack_t, parser.rule_stack, parser.rule_stack_alloc);
    4b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4b16:	4618      	mov	r0, r3
    4b18:	f7fb fc7a 	bl	410 <m_free>
    m_del(mp_parse_node_t, parser.result_stack, parser.result_stack_alloc);
    4b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4b1e:	4618      	mov	r0, r3
    4b20:	f7fb fc76 	bl	410 <m_free>

    // we also free the lexer on behalf of the caller
    mp_lexer_free(lex);
    4b24:	68b8      	ldr	r0, [r7, #8]
    4b26:	f7fe feeb 	bl	3900 <mp_lexer_free>

    return parser.tree;
    4b2a:	68fb      	ldr	r3, [r7, #12]
    4b2c:	461a      	mov	r2, r3
    4b2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
    4b32:	e893 0003 	ldmia.w	r3, {r0, r1}
    4b36:	e882 0003 	stmia.w	r2, {r0, r1}
}
    4b3a:	68f8      	ldr	r0, [r7, #12]
    4b3c:	3788      	adds	r7, #136	; 0x88
    4b3e:	46bd      	mov	sp, r7
    4b40:	bd80      	pop	{r7, pc}
    4b42:	bf00      	nop
    4b44:	00020140 	.word	0x00020140
    4b48:	00020264 	.word	0x00020264
    4b4c:	000200a8 	.word	0x000200a8
    4b50:	00020174 	.word	0x00020174
    4b54:	000201a0 	.word	0x000201a0
    4b58:	000201a8 	.word	0x000201a8
    4b5c:	00022730 	.word	0x00022730
    4b60:	000201bc 	.word	0x000201bc
    4b64:	000201ec 	.word	0x000201ec
    4b68:	000226f4 	.word	0x000226f4
    4b6c:	000201fc 	.word	0x000201fc

00004b70 <mp_parse_tree_clear>:

void mp_parse_tree_clear(mp_parse_tree_t *tree) {
    4b70:	b580      	push	{r7, lr}
    4b72:	b084      	sub	sp, #16
    4b74:	af00      	add	r7, sp, #0
    4b76:	6078      	str	r0, [r7, #4]
    mp_parse_chunk_t *chunk = tree->chunk;
    4b78:	687b      	ldr	r3, [r7, #4]
    4b7a:	685b      	ldr	r3, [r3, #4]
    4b7c:	60fb      	str	r3, [r7, #12]
    while (chunk != NULL) {
    4b7e:	e007      	b.n	4b90 <mp_parse_tree_clear+0x20>
        mp_parse_chunk_t *next = chunk->union_.next;
    4b80:	68fb      	ldr	r3, [r7, #12]
    4b82:	685b      	ldr	r3, [r3, #4]
    4b84:	60bb      	str	r3, [r7, #8]
        m_del(byte, chunk, sizeof(mp_parse_chunk_t) + chunk->alloc);
    4b86:	68f8      	ldr	r0, [r7, #12]
    4b88:	f7fb fc42 	bl	410 <m_free>
        chunk = next;
    4b8c:	68bb      	ldr	r3, [r7, #8]
    4b8e:	60fb      	str	r3, [r7, #12]
    while (chunk != NULL) {
    4b90:	68fb      	ldr	r3, [r7, #12]
    4b92:	2b00      	cmp	r3, #0
    4b94:	d1f4      	bne.n	4b80 <mp_parse_tree_clear+0x10>
    }
}
    4b96:	bf00      	nop
    4b98:	3710      	adds	r7, #16
    4b9a:	46bd      	mov	sp, r7
    4b9c:	bd80      	pop	{r7, pc}
    4b9e:	bf00      	nop

00004ba0 <scope_new>:
    [SCOPE_DICT_COMP] = MP_QSTR__lt_dictcomp_gt_,
    [SCOPE_SET_COMP] = MP_QSTR__lt_setcomp_gt_,
    [SCOPE_GEN_EXPR] = MP_QSTR__lt_genexpr_gt_,
};

scope_t *scope_new(scope_kind_t kind, mp_parse_node_t pn, qstr source_file, mp_uint_t emit_options) {
    4ba0:	b580      	push	{r7, lr}
    4ba2:	b086      	sub	sp, #24
    4ba4:	af00      	add	r7, sp, #0
    4ba6:	60f8      	str	r0, [r7, #12]
    4ba8:	60b9      	str	r1, [r7, #8]
    4baa:	607a      	str	r2, [r7, #4]
    4bac:	603b      	str	r3, [r7, #0]
    scope_t *scope = m_new0(scope_t, 1);
    4bae:	2030      	movs	r0, #48	; 0x30
    4bb0:	f7fb fbf2 	bl	398 <m_malloc0>
    4bb4:	6178      	str	r0, [r7, #20]
    scope->kind = kind;
    4bb6:	697b      	ldr	r3, [r7, #20]
    4bb8:	68fa      	ldr	r2, [r7, #12]
    4bba:	601a      	str	r2, [r3, #0]
    scope->pn = pn;
    4bbc:	697b      	ldr	r3, [r7, #20]
    4bbe:	68ba      	ldr	r2, [r7, #8]
    4bc0:	60da      	str	r2, [r3, #12]
    scope->source_file = source_file;
    4bc2:	687b      	ldr	r3, [r7, #4]
    4bc4:	b29a      	uxth	r2, r3
    4bc6:	697b      	ldr	r3, [r7, #20]
    4bc8:	829a      	strh	r2, [r3, #20]
    if (kind == SCOPE_FUNCTION || kind == SCOPE_CLASS) {
    4bca:	68fb      	ldr	r3, [r7, #12]
    4bcc:	2b07      	cmp	r3, #7
    4bce:	d002      	beq.n	4bd6 <scope_new+0x36>
    4bd0:	68fb      	ldr	r3, [r7, #12]
    4bd2:	2b01      	cmp	r3, #1
    4bd4:	d114      	bne.n	4c00 <scope_new+0x60>
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    4bd6:	68bb      	ldr	r3, [r7, #8]
    4bd8:	2b00      	cmp	r3, #0
    4bda:	d004      	beq.n	4be6 <scope_new+0x46>
    4bdc:	68bb      	ldr	r3, [r7, #8]
    4bde:	f003 0303 	and.w	r3, r3, #3
    4be2:	2b00      	cmp	r3, #0
    4be4:	d005      	beq.n	4bf2 <scope_new+0x52>
    4be6:	4b17      	ldr	r3, [pc, #92]	; (4c44 <scope_new+0xa4>)
    4be8:	4a17      	ldr	r2, [pc, #92]	; (4c48 <scope_new+0xa8>)
    4bea:	2131      	movs	r1, #49	; 0x31
    4bec:	4817      	ldr	r0, [pc, #92]	; (4c4c <scope_new+0xac>)
    4bee:	f016 fdc9 	bl	1b784 <__assert_func>
        scope->simple_name = MP_PARSE_NODE_LEAF_ARG(((mp_parse_node_struct_t*)pn)->nodes[0]);
    4bf2:	68bb      	ldr	r3, [r7, #8]
    4bf4:	689b      	ldr	r3, [r3, #8]
    4bf6:	091b      	lsrs	r3, r3, #4
    4bf8:	b29a      	uxth	r2, r3
    4bfa:	697b      	ldr	r3, [r7, #20]
    4bfc:	82da      	strh	r2, [r3, #22]
    4bfe:	e006      	b.n	4c0e <scope_new+0x6e>
    } else {
        scope->simple_name = scope_simple_name_table[kind];
    4c00:	4a13      	ldr	r2, [pc, #76]	; (4c50 <scope_new+0xb0>)
    4c02:	68fb      	ldr	r3, [r7, #12]
    4c04:	4413      	add	r3, r2
    4c06:	781b      	ldrb	r3, [r3, #0]
    4c08:	b29a      	uxth	r2, r3
    4c0a:	697b      	ldr	r3, [r7, #20]
    4c0c:	82da      	strh	r2, [r3, #22]
    }
    scope->raw_code = mp_emit_glue_new_raw_code();
    4c0e:	f006 fae9 	bl	b1e4 <mp_emit_glue_new_raw_code>
    4c12:	4602      	mov	r2, r0
    4c14:	697b      	ldr	r3, [r7, #20]
    4c16:	611a      	str	r2, [r3, #16]
    scope->emit_options = emit_options;
    4c18:	683b      	ldr	r3, [r7, #0]
    4c1a:	b29a      	uxth	r2, r3
    4c1c:	697b      	ldr	r3, [r7, #20]
    4c1e:	835a      	strh	r2, [r3, #26]
    scope->id_info_alloc = MICROPY_ALLOC_SCOPE_ID_INIT;
    4c20:	697b      	ldr	r3, [r7, #20]
    4c22:	2204      	movs	r2, #4
    4c24:	851a      	strh	r2, [r3, #40]	; 0x28
    scope->id_info = m_new(id_info_t, scope->id_info_alloc);
    4c26:	697b      	ldr	r3, [r7, #20]
    4c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4c2a:	00db      	lsls	r3, r3, #3
    4c2c:	4618      	mov	r0, r3
    4c2e:	f7fb fb75 	bl	31c <m_malloc>
    4c32:	4602      	mov	r2, r0
    4c34:	697b      	ldr	r3, [r7, #20]
    4c36:	62da      	str	r2, [r3, #44]	; 0x2c

    return scope;
    4c38:	697b      	ldr	r3, [r7, #20]
}
    4c3a:	4618      	mov	r0, r3
    4c3c:	3718      	adds	r7, #24
    4c3e:	46bd      	mov	sp, r7
    4c40:	bd80      	pop	{r7, pc}
    4c42:	bf00      	nop
    4c44:	00020278 	.word	0x00020278
    4c48:	00020314 	.word	0x00020314
    4c4c:	00020294 	.word	0x00020294
    4c50:	00020270 	.word	0x00020270

00004c54 <scope_free>:

void scope_free(scope_t *scope) {
    4c54:	b580      	push	{r7, lr}
    4c56:	b082      	sub	sp, #8
    4c58:	af00      	add	r7, sp, #0
    4c5a:	6078      	str	r0, [r7, #4]
    m_del(id_info_t, scope->id_info, scope->id_info_alloc);
    4c5c:	687b      	ldr	r3, [r7, #4]
    4c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4c60:	4618      	mov	r0, r3
    4c62:	f7fb fbd5 	bl	410 <m_free>
    m_del(scope_t, scope, 1);
    4c66:	6878      	ldr	r0, [r7, #4]
    4c68:	f7fb fbd2 	bl	410 <m_free>
}
    4c6c:	bf00      	nop
    4c6e:	3708      	adds	r7, #8
    4c70:	46bd      	mov	sp, r7
    4c72:	bd80      	pop	{r7, pc}

00004c74 <scope_find_or_add_id>:

id_info_t *scope_find_or_add_id(scope_t *scope, qstr qst, scope_kind_t kind) {
    4c74:	b580      	push	{r7, lr}
    4c76:	b086      	sub	sp, #24
    4c78:	af00      	add	r7, sp, #0
    4c7a:	60f8      	str	r0, [r7, #12]
    4c7c:	60b9      	str	r1, [r7, #8]
    4c7e:	607a      	str	r2, [r7, #4]
    id_info_t *id_info = scope_find(scope, qst);
    4c80:	68b9      	ldr	r1, [r7, #8]
    4c82:	68f8      	ldr	r0, [r7, #12]
    4c84:	f000 f83c 	bl	4d00 <scope_find>
    4c88:	6178      	str	r0, [r7, #20]
    if (id_info != NULL) {
    4c8a:	697b      	ldr	r3, [r7, #20]
    4c8c:	2b00      	cmp	r3, #0
    4c8e:	d001      	beq.n	4c94 <scope_find_or_add_id+0x20>
        return id_info;
    4c90:	697b      	ldr	r3, [r7, #20]
    4c92:	e031      	b.n	4cf8 <scope_find_or_add_id+0x84>
    }

    // make sure we have enough memory
    if (scope->id_info_len >= scope->id_info_alloc) {
    4c94:	68fb      	ldr	r3, [r7, #12]
    4c96:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    4c98:	68fb      	ldr	r3, [r7, #12]
    4c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4c9c:	429a      	cmp	r2, r3
    4c9e:	d312      	bcc.n	4cc6 <scope_find_or_add_id+0x52>
        scope->id_info = m_renew(id_info_t, scope->id_info, scope->id_info_alloc, scope->id_info_alloc + MICROPY_ALLOC_SCOPE_ID_INC);
    4ca0:	68fb      	ldr	r3, [r7, #12]
    4ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ca4:	68fb      	ldr	r3, [r7, #12]
    4ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4ca8:	3306      	adds	r3, #6
    4caa:	00db      	lsls	r3, r3, #3
    4cac:	4619      	mov	r1, r3
    4cae:	4610      	mov	r0, r2
    4cb0:	f7fb fb80 	bl	3b4 <m_realloc>
    4cb4:	4602      	mov	r2, r0
    4cb6:	68fb      	ldr	r3, [r7, #12]
    4cb8:	62da      	str	r2, [r3, #44]	; 0x2c
        scope->id_info_alloc += MICROPY_ALLOC_SCOPE_ID_INC;
    4cba:	68fb      	ldr	r3, [r7, #12]
    4cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4cbe:	3306      	adds	r3, #6
    4cc0:	b29a      	uxth	r2, r3
    4cc2:	68fb      	ldr	r3, [r7, #12]
    4cc4:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    // add new id to end of array of all ids; this seems to match CPython
    // important thing is that function arguments are first, but that is
    // handled by the compiler because it adds arguments before compiling the body
    id_info = &scope->id_info[scope->id_info_len++];
    4cc6:	68fb      	ldr	r3, [r7, #12]
    4cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4cca:	68fb      	ldr	r3, [r7, #12]
    4ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    4cce:	1c59      	adds	r1, r3, #1
    4cd0:	b288      	uxth	r0, r1
    4cd2:	68f9      	ldr	r1, [r7, #12]
    4cd4:	8548      	strh	r0, [r1, #42]	; 0x2a
    4cd6:	00db      	lsls	r3, r3, #3
    4cd8:	4413      	add	r3, r2
    4cda:	617b      	str	r3, [r7, #20]

    id_info->kind = kind;
    4cdc:	687b      	ldr	r3, [r7, #4]
    4cde:	b2da      	uxtb	r2, r3
    4ce0:	697b      	ldr	r3, [r7, #20]
    4ce2:	701a      	strb	r2, [r3, #0]
    id_info->flags = 0;
    4ce4:	697b      	ldr	r3, [r7, #20]
    4ce6:	2200      	movs	r2, #0
    4ce8:	705a      	strb	r2, [r3, #1]
    id_info->local_num = 0;
    4cea:	697b      	ldr	r3, [r7, #20]
    4cec:	2200      	movs	r2, #0
    4cee:	805a      	strh	r2, [r3, #2]
    id_info->qst = qst;
    4cf0:	697b      	ldr	r3, [r7, #20]
    4cf2:	68ba      	ldr	r2, [r7, #8]
    4cf4:	605a      	str	r2, [r3, #4]
    return id_info;
    4cf6:	697b      	ldr	r3, [r7, #20]
}
    4cf8:	4618      	mov	r0, r3
    4cfa:	3718      	adds	r7, #24
    4cfc:	46bd      	mov	sp, r7
    4cfe:	bd80      	pop	{r7, pc}

00004d00 <scope_find>:

id_info_t *scope_find(scope_t *scope, qstr qst) {
    4d00:	b480      	push	{r7}
    4d02:	b085      	sub	sp, #20
    4d04:	af00      	add	r7, sp, #0
    4d06:	6078      	str	r0, [r7, #4]
    4d08:	6039      	str	r1, [r7, #0]
    for (mp_uint_t i = 0; i < scope->id_info_len; i++) {
    4d0a:	2300      	movs	r3, #0
    4d0c:	60fb      	str	r3, [r7, #12]
    4d0e:	e011      	b.n	4d34 <scope_find+0x34>
        if (scope->id_info[i].qst == qst) {
    4d10:	687b      	ldr	r3, [r7, #4]
    4d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d14:	68fb      	ldr	r3, [r7, #12]
    4d16:	00db      	lsls	r3, r3, #3
    4d18:	4413      	add	r3, r2
    4d1a:	685a      	ldr	r2, [r3, #4]
    4d1c:	683b      	ldr	r3, [r7, #0]
    4d1e:	429a      	cmp	r2, r3
    4d20:	d105      	bne.n	4d2e <scope_find+0x2e>
            return &scope->id_info[i];
    4d22:	687b      	ldr	r3, [r7, #4]
    4d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d26:	68fb      	ldr	r3, [r7, #12]
    4d28:	00db      	lsls	r3, r3, #3
    4d2a:	4413      	add	r3, r2
    4d2c:	e009      	b.n	4d42 <scope_find+0x42>
    for (mp_uint_t i = 0; i < scope->id_info_len; i++) {
    4d2e:	68fb      	ldr	r3, [r7, #12]
    4d30:	3301      	adds	r3, #1
    4d32:	60fb      	str	r3, [r7, #12]
    4d34:	687b      	ldr	r3, [r7, #4]
    4d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    4d38:	461a      	mov	r2, r3
    4d3a:	68fb      	ldr	r3, [r7, #12]
    4d3c:	429a      	cmp	r2, r3
    4d3e:	d8e7      	bhi.n	4d10 <scope_find+0x10>
        }
    }
    return NULL;
    4d40:	2300      	movs	r3, #0
}
    4d42:	4618      	mov	r0, r3
    4d44:	3714      	adds	r7, #20
    4d46:	46bd      	mov	sp, r7
    4d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d4c:	4770      	bx	lr
    4d4e:	bf00      	nop

00004d50 <scope_find_global>:

id_info_t *scope_find_global(scope_t *scope, qstr qst) {
    4d50:	b580      	push	{r7, lr}
    4d52:	b082      	sub	sp, #8
    4d54:	af00      	add	r7, sp, #0
    4d56:	6078      	str	r0, [r7, #4]
    4d58:	6039      	str	r1, [r7, #0]
    while (scope->parent != NULL) {
    4d5a:	e002      	b.n	4d62 <scope_find_global+0x12>
        scope = scope->parent;
    4d5c:	687b      	ldr	r3, [r7, #4]
    4d5e:	685b      	ldr	r3, [r3, #4]
    4d60:	607b      	str	r3, [r7, #4]
    while (scope->parent != NULL) {
    4d62:	687b      	ldr	r3, [r7, #4]
    4d64:	685b      	ldr	r3, [r3, #4]
    4d66:	2b00      	cmp	r3, #0
    4d68:	d1f8      	bne.n	4d5c <scope_find_global+0xc>
    }
    return scope_find(scope, qst);
    4d6a:	6839      	ldr	r1, [r7, #0]
    4d6c:	6878      	ldr	r0, [r7, #4]
    4d6e:	f7ff ffc7 	bl	4d00 <scope_find>
    4d72:	4603      	mov	r3, r0
}
    4d74:	4618      	mov	r0, r3
    4d76:	3708      	adds	r7, #8
    4d78:	46bd      	mov	sp, r7
    4d7a:	bd80      	pop	{r7, pc}

00004d7c <scope_close_over_in_parents>:

STATIC void scope_close_over_in_parents(scope_t *scope, qstr qst) {
    4d7c:	b580      	push	{r7, lr}
    4d7e:	b084      	sub	sp, #16
    4d80:	af00      	add	r7, sp, #0
    4d82:	6078      	str	r0, [r7, #4]
    4d84:	6039      	str	r1, [r7, #0]
    assert(scope->parent != NULL); // we should have at least 1 parent
    4d86:	687b      	ldr	r3, [r7, #4]
    4d88:	685b      	ldr	r3, [r3, #4]
    4d8a:	2b00      	cmp	r3, #0
    4d8c:	d105      	bne.n	4d9a <scope_close_over_in_parents+0x1e>
    4d8e:	4b1f      	ldr	r3, [pc, #124]	; (4e0c <scope_close_over_in_parents+0x90>)
    4d90:	4a1f      	ldr	r2, [pc, #124]	; (4e10 <scope_close_over_in_parents+0x94>)
    4d92:	216c      	movs	r1, #108	; 0x6c
    4d94:	481f      	ldr	r0, [pc, #124]	; (4e14 <scope_close_over_in_parents+0x98>)
    4d96:	f016 fcf5 	bl	1b784 <__assert_func>
    for (scope_t *s = scope->parent;; s = s->parent) {
    4d9a:	687b      	ldr	r3, [r7, #4]
    4d9c:	685b      	ldr	r3, [r3, #4]
    4d9e:	60fb      	str	r3, [r7, #12]
        assert(s->parent != NULL); // we should not get to the outer scope
    4da0:	68fb      	ldr	r3, [r7, #12]
    4da2:	685b      	ldr	r3, [r3, #4]
    4da4:	2b00      	cmp	r3, #0
    4da6:	d105      	bne.n	4db4 <scope_close_over_in_parents+0x38>
    4da8:	4b1b      	ldr	r3, [pc, #108]	; (4e18 <scope_close_over_in_parents+0x9c>)
    4daa:	4a19      	ldr	r2, [pc, #100]	; (4e10 <scope_close_over_in_parents+0x94>)
    4dac:	216e      	movs	r1, #110	; 0x6e
    4dae:	4819      	ldr	r0, [pc, #100]	; (4e14 <scope_close_over_in_parents+0x98>)
    4db0:	f016 fce8 	bl	1b784 <__assert_func>
        id_info_t *id = scope_find_or_add_id(s, qst, ID_INFO_KIND_UNDECIDED);
    4db4:	2200      	movs	r2, #0
    4db6:	6839      	ldr	r1, [r7, #0]
    4db8:	68f8      	ldr	r0, [r7, #12]
    4dba:	f7ff ff5b 	bl	4c74 <scope_find_or_add_id>
    4dbe:	60b8      	str	r0, [r7, #8]
        if (id->kind == ID_INFO_KIND_UNDECIDED) {
    4dc0:	68bb      	ldr	r3, [r7, #8]
    4dc2:	781b      	ldrb	r3, [r3, #0]
    4dc4:	2b00      	cmp	r3, #0
    4dc6:	d103      	bne.n	4dd0 <scope_close_over_in_parents+0x54>
            // variable not previously declared in this scope, so declare it as free and keep searching parents
            id->kind = ID_INFO_KIND_FREE;
    4dc8:	68bb      	ldr	r3, [r7, #8]
    4dca:	2205      	movs	r2, #5
    4dcc:	701a      	strb	r2, [r3, #0]
    4dce:	e015      	b.n	4dfc <scope_close_over_in_parents+0x80>
        } else {
            // variable is declared in this scope, so finish
            if (id->kind == ID_INFO_KIND_LOCAL) {
    4dd0:	68bb      	ldr	r3, [r7, #8]
    4dd2:	781b      	ldrb	r3, [r3, #0]
    4dd4:	2b03      	cmp	r3, #3
    4dd6:	d103      	bne.n	4de0 <scope_close_over_in_parents+0x64>
                // variable local to this scope, close it over
                id->kind = ID_INFO_KIND_CELL;
    4dd8:	68bb      	ldr	r3, [r7, #8]
    4dda:	2204      	movs	r2, #4
    4ddc:	701a      	strb	r2, [r3, #0]
            } else {
                // ID_INFO_KIND_FREE: variable already closed over in a parent scope
                // ID_INFO_KIND_CELL: variable already closed over in this scope
                assert(id->kind == ID_INFO_KIND_FREE || id->kind == ID_INFO_KIND_CELL);
            }
            return;
    4dde:	e011      	b.n	4e04 <scope_close_over_in_parents+0x88>
                assert(id->kind == ID_INFO_KIND_FREE || id->kind == ID_INFO_KIND_CELL);
    4de0:	68bb      	ldr	r3, [r7, #8]
    4de2:	781b      	ldrb	r3, [r3, #0]
    4de4:	2b05      	cmp	r3, #5
    4de6:	d00d      	beq.n	4e04 <scope_close_over_in_parents+0x88>
    4de8:	68bb      	ldr	r3, [r7, #8]
    4dea:	781b      	ldrb	r3, [r3, #0]
    4dec:	2b04      	cmp	r3, #4
    4dee:	d009      	beq.n	4e04 <scope_close_over_in_parents+0x88>
    4df0:	4b0a      	ldr	r3, [pc, #40]	; (4e1c <scope_close_over_in_parents+0xa0>)
    4df2:	4a07      	ldr	r2, [pc, #28]	; (4e10 <scope_close_over_in_parents+0x94>)
    4df4:	217b      	movs	r1, #123	; 0x7b
    4df6:	4807      	ldr	r0, [pc, #28]	; (4e14 <scope_close_over_in_parents+0x98>)
    4df8:	f016 fcc4 	bl	1b784 <__assert_func>
    for (scope_t *s = scope->parent;; s = s->parent) {
    4dfc:	68fb      	ldr	r3, [r7, #12]
    4dfe:	685b      	ldr	r3, [r3, #4]
    4e00:	60fb      	str	r3, [r7, #12]
        }
    }
    4e02:	e7cd      	b.n	4da0 <scope_close_over_in_parents+0x24>
            return;
    4e04:	bf00      	nop
}
    4e06:	3710      	adds	r7, #16
    4e08:	46bd      	mov	sp, r7
    4e0a:	bd80      	pop	{r7, pc}
    4e0c:	000202a8 	.word	0x000202a8
    4e10:	00020320 	.word	0x00020320
    4e14:	00020294 	.word	0x00020294
    4e18:	000202c0 	.word	0x000202c0
    4e1c:	000202d4 	.word	0x000202d4

00004e20 <scope_check_to_close_over>:

void scope_check_to_close_over(scope_t *scope, id_info_t *id) {
    4e20:	b580      	push	{r7, lr}
    4e22:	b084      	sub	sp, #16
    4e24:	af00      	add	r7, sp, #0
    4e26:	6078      	str	r0, [r7, #4]
    4e28:	6039      	str	r1, [r7, #0]
    if (scope->parent != NULL) {
    4e2a:	687b      	ldr	r3, [r7, #4]
    4e2c:	685b      	ldr	r3, [r3, #4]
    4e2e:	2b00      	cmp	r3, #0
    4e30:	d02c      	beq.n	4e8c <scope_check_to_close_over+0x6c>
        for (scope_t *s = scope->parent; s->parent != NULL; s = s->parent) {
    4e32:	687b      	ldr	r3, [r7, #4]
    4e34:	685b      	ldr	r3, [r3, #4]
    4e36:	60fb      	str	r3, [r7, #12]
    4e38:	e022      	b.n	4e80 <scope_check_to_close_over+0x60>
            id_info_t *id2 = scope_find(s, id->qst);
    4e3a:	683b      	ldr	r3, [r7, #0]
    4e3c:	685b      	ldr	r3, [r3, #4]
    4e3e:	4619      	mov	r1, r3
    4e40:	68f8      	ldr	r0, [r7, #12]
    4e42:	f7ff ff5d 	bl	4d00 <scope_find>
    4e46:	60b8      	str	r0, [r7, #8]
            if (id2 != NULL) {
    4e48:	68bb      	ldr	r3, [r7, #8]
    4e4a:	2b00      	cmp	r3, #0
    4e4c:	d015      	beq.n	4e7a <scope_check_to_close_over+0x5a>
                if (id2->kind == ID_INFO_KIND_LOCAL || id2->kind == ID_INFO_KIND_CELL || id2->kind == ID_INFO_KIND_FREE) {
    4e4e:	68bb      	ldr	r3, [r7, #8]
    4e50:	781b      	ldrb	r3, [r3, #0]
    4e52:	2b03      	cmp	r3, #3
    4e54:	d007      	beq.n	4e66 <scope_check_to_close_over+0x46>
    4e56:	68bb      	ldr	r3, [r7, #8]
    4e58:	781b      	ldrb	r3, [r3, #0]
    4e5a:	2b04      	cmp	r3, #4
    4e5c:	d003      	beq.n	4e66 <scope_check_to_close_over+0x46>
    4e5e:	68bb      	ldr	r3, [r7, #8]
    4e60:	781b      	ldrb	r3, [r3, #0]
    4e62:	2b05      	cmp	r3, #5
    4e64:	d111      	bne.n	4e8a <scope_check_to_close_over+0x6a>
                    id->kind = ID_INFO_KIND_FREE;
    4e66:	683b      	ldr	r3, [r7, #0]
    4e68:	2205      	movs	r2, #5
    4e6a:	701a      	strb	r2, [r3, #0]
                    scope_close_over_in_parents(scope, id->qst);
    4e6c:	683b      	ldr	r3, [r7, #0]
    4e6e:	685b      	ldr	r3, [r3, #4]
    4e70:	4619      	mov	r1, r3
    4e72:	6878      	ldr	r0, [r7, #4]
    4e74:	f7ff ff82 	bl	4d7c <scope_close_over_in_parents>
                }
                break;
    4e78:	e007      	b.n	4e8a <scope_check_to_close_over+0x6a>
        for (scope_t *s = scope->parent; s->parent != NULL; s = s->parent) {
    4e7a:	68fb      	ldr	r3, [r7, #12]
    4e7c:	685b      	ldr	r3, [r3, #4]
    4e7e:	60fb      	str	r3, [r7, #12]
    4e80:	68fb      	ldr	r3, [r7, #12]
    4e82:	685b      	ldr	r3, [r3, #4]
    4e84:	2b00      	cmp	r3, #0
    4e86:	d1d8      	bne.n	4e3a <scope_check_to_close_over+0x1a>
            }
        }
    }
}
    4e88:	e000      	b.n	4e8c <scope_check_to_close_over+0x6c>
                break;
    4e8a:	bf00      	nop
}
    4e8c:	bf00      	nop
    4e8e:	3710      	adds	r7, #16
    4e90:	46bd      	mov	sp, r7
    4e92:	bd80      	pop	{r7, pc}

00004e94 <mp_parse_node_new_small_int>:
static inline mp_parse_node_t mp_parse_node_new_small_int(mp_int_t val) {
    4e94:	b480      	push	{r7}
    4e96:	b083      	sub	sp, #12
    4e98:	af00      	add	r7, sp, #0
    4e9a:	6078      	str	r0, [r7, #4]
    return (mp_parse_node_t)(MP_PARSE_NODE_SMALL_INT | ((mp_uint_t)val << 1));
    4e9c:	687b      	ldr	r3, [r7, #4]
    4e9e:	005b      	lsls	r3, r3, #1
    4ea0:	f043 0301 	orr.w	r3, r3, #1
}
    4ea4:	4618      	mov	r0, r3
    4ea6:	370c      	adds	r7, #12
    4ea8:	46bd      	mov	sp, r7
    4eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    4eae:	4770      	bx	lr

00004eb0 <mp_emit_common_get_id_for_load>:
    void (*end_except_handler)(emit_t *emit);
} emit_method_table_t;

int mp_native_type_from_qstr(qstr qst);

static inline void mp_emit_common_get_id_for_load(scope_t *scope, qstr qst) {
    4eb0:	b580      	push	{r7, lr}
    4eb2:	b082      	sub	sp, #8
    4eb4:	af00      	add	r7, sp, #0
    4eb6:	6078      	str	r0, [r7, #4]
    4eb8:	6039      	str	r1, [r7, #0]
    scope_find_or_add_id(scope, qst, ID_INFO_KIND_GLOBAL_IMPLICIT);
    4eba:	2201      	movs	r2, #1
    4ebc:	6839      	ldr	r1, [r7, #0]
    4ebe:	6878      	ldr	r0, [r7, #4]
    4ec0:	f7ff fed8 	bl	4c74 <scope_find_or_add_id>
}
    4ec4:	bf00      	nop
    4ec6:	3708      	adds	r7, #8
    4ec8:	46bd      	mov	sp, r7
    4eca:	bd80      	pop	{r7, pc}

00004ecc <mp_local_free>:

#if !MICROPY_ENABLE_PYSTACK

#define mp_local_alloc(n_bytes) alloca(n_bytes)

static inline void mp_local_free(void *ptr) {
    4ecc:	b480      	push	{r7}
    4ece:	b083      	sub	sp, #12
    4ed0:	af00      	add	r7, sp, #0
    4ed2:	6078      	str	r0, [r7, #4]
    (void)ptr;
}
    4ed4:	bf00      	nop
    4ed6:	370c      	adds	r7, #12
    4ed8:	46bd      	mov	sp, r7
    4eda:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ede:	4770      	bx	lr

00004ee0 <compile_error_set_line>:
    emit_inline_asm_t *emit_inline_asm;                                   // current emitter for inline asm
    const emit_inline_asm_method_table_t *emit_inline_asm_method_table;   // current emit method table for inline asm
    #endif
} compiler_t;

STATIC void compile_error_set_line(compiler_t *comp, mp_parse_node_t pn) {
    4ee0:	b480      	push	{r7}
    4ee2:	b083      	sub	sp, #12
    4ee4:	af00      	add	r7, sp, #0
    4ee6:	6078      	str	r0, [r7, #4]
    4ee8:	6039      	str	r1, [r7, #0]
    // if the line of the error is unknown then try to update it from the pn
    if (comp->compile_error_line == 0 && MP_PARSE_NODE_IS_STRUCT(pn)) {
    4eea:	687b      	ldr	r3, [r7, #4]
    4eec:	68db      	ldr	r3, [r3, #12]
    4eee:	2b00      	cmp	r3, #0
    4ef0:	d10b      	bne.n	4f0a <compile_error_set_line+0x2a>
    4ef2:	683b      	ldr	r3, [r7, #0]
    4ef4:	2b00      	cmp	r3, #0
    4ef6:	d008      	beq.n	4f0a <compile_error_set_line+0x2a>
    4ef8:	683b      	ldr	r3, [r7, #0]
    4efa:	f003 0303 	and.w	r3, r3, #3
    4efe:	2b00      	cmp	r3, #0
    4f00:	d103      	bne.n	4f0a <compile_error_set_line+0x2a>
        comp->compile_error_line = ((mp_parse_node_struct_t*)pn)->source_line;
    4f02:	683b      	ldr	r3, [r7, #0]
    4f04:	681a      	ldr	r2, [r3, #0]
    4f06:	687b      	ldr	r3, [r7, #4]
    4f08:	60da      	str	r2, [r3, #12]
    }
}
    4f0a:	bf00      	nop
    4f0c:	370c      	adds	r7, #12
    4f0e:	46bd      	mov	sp, r7
    4f10:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f14:	4770      	bx	lr
    4f16:	bf00      	nop

00004f18 <compile_syntax_error>:

STATIC void compile_syntax_error(compiler_t *comp, mp_parse_node_t pn, const char *msg) {
    4f18:	b580      	push	{r7, lr}
    4f1a:	b084      	sub	sp, #16
    4f1c:	af00      	add	r7, sp, #0
    4f1e:	60f8      	str	r0, [r7, #12]
    4f20:	60b9      	str	r1, [r7, #8]
    4f22:	607a      	str	r2, [r7, #4]
    // only register the error if there has been no other error
    if (comp->compile_error == MP_OBJ_NULL) {
    4f24:	68fb      	ldr	r3, [r7, #12]
    4f26:	689b      	ldr	r3, [r3, #8]
    4f28:	2b00      	cmp	r3, #0
    4f2a:	d10a      	bne.n	4f42 <compile_syntax_error+0x2a>
        comp->compile_error = mp_obj_new_exception_msg(&mp_type_SyntaxError, msg);
    4f2c:	6879      	ldr	r1, [r7, #4]
    4f2e:	4807      	ldr	r0, [pc, #28]	; (4f4c <compile_syntax_error+0x34>)
    4f30:	f00a fb68 	bl	f604 <mp_obj_new_exception_msg>
    4f34:	4602      	mov	r2, r0
    4f36:	68fb      	ldr	r3, [r7, #12]
    4f38:	609a      	str	r2, [r3, #8]
        compile_error_set_line(comp, pn);
    4f3a:	68b9      	ldr	r1, [r7, #8]
    4f3c:	68f8      	ldr	r0, [r7, #12]
    4f3e:	f7ff ffcf 	bl	4ee0 <compile_error_set_line>
    }
}
    4f42:	bf00      	nop
    4f44:	3710      	adds	r7, #16
    4f46:	46bd      	mov	sp, r7
    4f48:	bd80      	pop	{r7, pc}
    4f4a:	bf00      	nop
    4f4c:	000226f4 	.word	0x000226f4

00004f50 <comp_next_label>:

STATIC void compile_trailer_paren_helper(compiler_t *comp, mp_parse_node_t pn_arglist, bool is_method_call, int n_positional_extra);
STATIC void compile_comprehension(compiler_t *comp, mp_parse_node_struct_t *pns, scope_kind_t kind);
STATIC void compile_node(compiler_t *comp, mp_parse_node_t pn);

STATIC uint comp_next_label(compiler_t *comp) {
    4f50:	b480      	push	{r7}
    4f52:	b083      	sub	sp, #12
    4f54:	af00      	add	r7, sp, #0
    4f56:	6078      	str	r0, [r7, #4]
    return comp->next_label++;
    4f58:	687b      	ldr	r3, [r7, #4]
    4f5a:	691b      	ldr	r3, [r3, #16]
    4f5c:	1c59      	adds	r1, r3, #1
    4f5e:	687a      	ldr	r2, [r7, #4]
    4f60:	6111      	str	r1, [r2, #16]
}
    4f62:	4618      	mov	r0, r3
    4f64:	370c      	adds	r7, #12
    4f66:	46bd      	mov	sp, r7
    4f68:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f6c:	4770      	bx	lr
    4f6e:	bf00      	nop

00004f70 <compile_increase_except_level>:
}
#else
#define reserve_labels_for_native(comp, n)
#endif

STATIC void compile_increase_except_level(compiler_t *comp, uint label, int kind) {
    4f70:	b580      	push	{r7, lr}
    4f72:	b084      	sub	sp, #16
    4f74:	af00      	add	r7, sp, #0
    4f76:	60f8      	str	r0, [r7, #12]
    4f78:	60b9      	str	r1, [r7, #8]
    4f7a:	607a      	str	r2, [r7, #4]
    EMIT_ARG(setup_block, label, kind);
    4f7c:	68fb      	ldr	r3, [r7, #12]
    4f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f80:	687a      	ldr	r2, [r7, #4]
    4f82:	68b9      	ldr	r1, [r7, #8]
    4f84:	4618      	mov	r0, r3
    4f86:	f005 fca3 	bl	a8d0 <mp_emit_bc_setup_block>
    comp->cur_except_level += 1;
    4f8a:	68fb      	ldr	r3, [r7, #12]
    4f8c:	8b9b      	ldrh	r3, [r3, #28]
    4f8e:	3301      	adds	r3, #1
    4f90:	b29a      	uxth	r2, r3
    4f92:	68fb      	ldr	r3, [r7, #12]
    4f94:	839a      	strh	r2, [r3, #28]
    if (comp->cur_except_level > comp->scope_cur->exc_stack_size) {
    4f96:	68fb      	ldr	r3, [r7, #12]
    4f98:	8b9a      	ldrh	r2, [r3, #28]
    4f9a:	68fb      	ldr	r3, [r7, #12]
    4f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4f9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4fa0:	429a      	cmp	r2, r3
    4fa2:	d904      	bls.n	4fae <compile_increase_except_level+0x3e>
        comp->scope_cur->exc_stack_size = comp->cur_except_level;
    4fa4:	68fb      	ldr	r3, [r7, #12]
    4fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4fa8:	68fa      	ldr	r2, [r7, #12]
    4faa:	8b92      	ldrh	r2, [r2, #28]
    4fac:	84da      	strh	r2, [r3, #38]	; 0x26
    }
}
    4fae:	bf00      	nop
    4fb0:	3710      	adds	r7, #16
    4fb2:	46bd      	mov	sp, r7
    4fb4:	bd80      	pop	{r7, pc}
    4fb6:	bf00      	nop

00004fb8 <compile_decrease_except_level>:

STATIC void compile_decrease_except_level(compiler_t *comp) {
    4fb8:	b580      	push	{r7, lr}
    4fba:	b082      	sub	sp, #8
    4fbc:	af00      	add	r7, sp, #0
    4fbe:	6078      	str	r0, [r7, #4]
    assert(comp->cur_except_level > 0);
    4fc0:	687b      	ldr	r3, [r7, #4]
    4fc2:	8b9b      	ldrh	r3, [r3, #28]
    4fc4:	2b00      	cmp	r3, #0
    4fc6:	d105      	bne.n	4fd4 <compile_decrease_except_level+0x1c>
    4fc8:	4b0a      	ldr	r3, [pc, #40]	; (4ff4 <compile_decrease_except_level+0x3c>)
    4fca:	4a0b      	ldr	r2, [pc, #44]	; (4ff8 <compile_decrease_except_level+0x40>)
    4fcc:	21c0      	movs	r1, #192	; 0xc0
    4fce:	480b      	ldr	r0, [pc, #44]	; (4ffc <compile_decrease_except_level+0x44>)
    4fd0:	f016 fbd8 	bl	1b784 <__assert_func>
    comp->cur_except_level -= 1;
    4fd4:	687b      	ldr	r3, [r7, #4]
    4fd6:	8b9b      	ldrh	r3, [r3, #28]
    4fd8:	3b01      	subs	r3, #1
    4fda:	b29a      	uxth	r2, r3
    4fdc:	687b      	ldr	r3, [r7, #4]
    4fde:	839a      	strh	r2, [r3, #28]
    EMIT(end_finally);
    4fe0:	687b      	ldr	r3, [r7, #4]
    4fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4fe4:	4618      	mov	r0, r3
    4fe6:	f005 fcb5 	bl	a954 <mp_emit_bc_end_finally>
    reserve_labels_for_native(comp, 1);
}
    4fea:	bf00      	nop
    4fec:	3708      	adds	r7, #8
    4fee:	46bd      	mov	sp, r7
    4ff0:	bd80      	pop	{r7, pc}
    4ff2:	bf00      	nop
    4ff4:	0002033c 	.word	0x0002033c
    4ff8:	00020ec4 	.word	0x00020ec4
    4ffc:	00020358 	.word	0x00020358

00005000 <scope_new_and_link>:

STATIC scope_t *scope_new_and_link(compiler_t *comp, scope_kind_t kind, mp_parse_node_t pn, uint emit_options) {
    5000:	b580      	push	{r7, lr}
    5002:	b086      	sub	sp, #24
    5004:	af00      	add	r7, sp, #0
    5006:	60f8      	str	r0, [r7, #12]
    5008:	60b9      	str	r1, [r7, #8]
    500a:	607a      	str	r2, [r7, #4]
    500c:	603b      	str	r3, [r7, #0]
    scope_t *scope = scope_new(kind, pn, comp->source_file, emit_options);
    500e:	68fb      	ldr	r3, [r7, #12]
    5010:	681a      	ldr	r2, [r3, #0]
    5012:	683b      	ldr	r3, [r7, #0]
    5014:	6879      	ldr	r1, [r7, #4]
    5016:	68b8      	ldr	r0, [r7, #8]
    5018:	f7ff fdc2 	bl	4ba0 <scope_new>
    501c:	6138      	str	r0, [r7, #16]
    scope->parent = comp->scope_cur;
    501e:	68fb      	ldr	r3, [r7, #12]
    5020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5022:	693b      	ldr	r3, [r7, #16]
    5024:	605a      	str	r2, [r3, #4]
    scope->next = NULL;
    5026:	693b      	ldr	r3, [r7, #16]
    5028:	2200      	movs	r2, #0
    502a:	609a      	str	r2, [r3, #8]
    if (comp->scope_head == NULL) {
    502c:	68fb      	ldr	r3, [r7, #12]
    502e:	6a1b      	ldr	r3, [r3, #32]
    5030:	2b00      	cmp	r3, #0
    5032:	d103      	bne.n	503c <scope_new_and_link+0x3c>
        comp->scope_head = scope;
    5034:	68fb      	ldr	r3, [r7, #12]
    5036:	693a      	ldr	r2, [r7, #16]
    5038:	621a      	str	r2, [r3, #32]
    503a:	e00d      	b.n	5058 <scope_new_and_link+0x58>
    } else {
        scope_t *s = comp->scope_head;
    503c:	68fb      	ldr	r3, [r7, #12]
    503e:	6a1b      	ldr	r3, [r3, #32]
    5040:	617b      	str	r3, [r7, #20]
        while (s->next != NULL) {
    5042:	e002      	b.n	504a <scope_new_and_link+0x4a>
            s = s->next;
    5044:	697b      	ldr	r3, [r7, #20]
    5046:	689b      	ldr	r3, [r3, #8]
    5048:	617b      	str	r3, [r7, #20]
        while (s->next != NULL) {
    504a:	697b      	ldr	r3, [r7, #20]
    504c:	689b      	ldr	r3, [r3, #8]
    504e:	2b00      	cmp	r3, #0
    5050:	d1f8      	bne.n	5044 <scope_new_and_link+0x44>
        }
        s->next = scope;
    5052:	697b      	ldr	r3, [r7, #20]
    5054:	693a      	ldr	r2, [r7, #16]
    5056:	609a      	str	r2, [r3, #8]
    }
    return scope;
    5058:	693b      	ldr	r3, [r7, #16]
}
    505a:	4618      	mov	r0, r3
    505c:	3718      	adds	r7, #24
    505e:	46bd      	mov	sp, r7
    5060:	bd80      	pop	{r7, pc}
    5062:	bf00      	nop

00005064 <apply_to_single_or_list>:

typedef void (*apply_list_fun_t)(compiler_t *comp, mp_parse_node_t pn);

STATIC void apply_to_single_or_list(compiler_t *comp, mp_parse_node_t pn, pn_kind_t pn_list_kind, apply_list_fun_t f) {
    5064:	b580      	push	{r7, lr}
    5066:	b088      	sub	sp, #32
    5068:	af00      	add	r7, sp, #0
    506a:	60f8      	str	r0, [r7, #12]
    506c:	60b9      	str	r1, [r7, #8]
    506e:	607a      	str	r2, [r7, #4]
    5070:	603b      	str	r3, [r7, #0]
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, pn_list_kind)) {
    5072:	68bb      	ldr	r3, [r7, #8]
    5074:	2b00      	cmp	r3, #0
    5076:	d024      	beq.n	50c2 <apply_to_single_or_list+0x5e>
    5078:	68bb      	ldr	r3, [r7, #8]
    507a:	f003 0303 	and.w	r3, r3, #3
    507e:	2b00      	cmp	r3, #0
    5080:	d11f      	bne.n	50c2 <apply_to_single_or_list+0x5e>
    5082:	68bb      	ldr	r3, [r7, #8]
    5084:	685b      	ldr	r3, [r3, #4]
    5086:	b2da      	uxtb	r2, r3
    5088:	687b      	ldr	r3, [r7, #4]
    508a:	429a      	cmp	r2, r3
    508c:	d119      	bne.n	50c2 <apply_to_single_or_list+0x5e>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    508e:	68bb      	ldr	r3, [r7, #8]
    5090:	61bb      	str	r3, [r7, #24]
        int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    5092:	69bb      	ldr	r3, [r7, #24]
    5094:	685b      	ldr	r3, [r3, #4]
    5096:	0a1b      	lsrs	r3, r3, #8
    5098:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < num_nodes; i++) {
    509a:	2300      	movs	r3, #0
    509c:	61fb      	str	r3, [r7, #28]
    509e:	e00b      	b.n	50b8 <apply_to_single_or_list+0x54>
            f(comp, pns->nodes[i]);
    50a0:	69bb      	ldr	r3, [r7, #24]
    50a2:	69fa      	ldr	r2, [r7, #28]
    50a4:	3202      	adds	r2, #2
    50a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    50aa:	683b      	ldr	r3, [r7, #0]
    50ac:	4611      	mov	r1, r2
    50ae:	68f8      	ldr	r0, [r7, #12]
    50b0:	4798      	blx	r3
        for (int i = 0; i < num_nodes; i++) {
    50b2:	69fb      	ldr	r3, [r7, #28]
    50b4:	3301      	adds	r3, #1
    50b6:	61fb      	str	r3, [r7, #28]
    50b8:	69fa      	ldr	r2, [r7, #28]
    50ba:	697b      	ldr	r3, [r7, #20]
    50bc:	429a      	cmp	r2, r3
    50be:	dbef      	blt.n	50a0 <apply_to_single_or_list+0x3c>
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, pn_list_kind)) {
    50c0:	e007      	b.n	50d2 <apply_to_single_or_list+0x6e>
        }
    } else if (!MP_PARSE_NODE_IS_NULL(pn)) {
    50c2:	68bb      	ldr	r3, [r7, #8]
    50c4:	2b00      	cmp	r3, #0
    50c6:	d004      	beq.n	50d2 <apply_to_single_or_list+0x6e>
        f(comp, pn);
    50c8:	683b      	ldr	r3, [r7, #0]
    50ca:	68b9      	ldr	r1, [r7, #8]
    50cc:	68f8      	ldr	r0, [r7, #12]
    50ce:	4798      	blx	r3
    }
}
    50d0:	e7ff      	b.n	50d2 <apply_to_single_or_list+0x6e>
    50d2:	bf00      	nop
    50d4:	3720      	adds	r7, #32
    50d6:	46bd      	mov	sp, r7
    50d8:	bd80      	pop	{r7, pc}
    50da:	bf00      	nop

000050dc <compile_generic_all_nodes>:

STATIC void compile_generic_all_nodes(compiler_t *comp, mp_parse_node_struct_t *pns) {
    50dc:	b580      	push	{r7, lr}
    50de:	b084      	sub	sp, #16
    50e0:	af00      	add	r7, sp, #0
    50e2:	6078      	str	r0, [r7, #4]
    50e4:	6039      	str	r1, [r7, #0]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    50e6:	683b      	ldr	r3, [r7, #0]
    50e8:	685b      	ldr	r3, [r3, #4]
    50ea:	0a1b      	lsrs	r3, r3, #8
    50ec:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < num_nodes; i++) {
    50ee:	2300      	movs	r3, #0
    50f0:	60fb      	str	r3, [r7, #12]
    50f2:	e019      	b.n	5128 <compile_generic_all_nodes+0x4c>
        compile_node(comp, pns->nodes[i]);
    50f4:	683b      	ldr	r3, [r7, #0]
    50f6:	68fa      	ldr	r2, [r7, #12]
    50f8:	3202      	adds	r2, #2
    50fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    50fe:	4619      	mov	r1, r3
    5100:	6878      	ldr	r0, [r7, #4]
    5102:	f003 fcef 	bl	8ae4 <compile_node>
        if (comp->compile_error != MP_OBJ_NULL) {
    5106:	687b      	ldr	r3, [r7, #4]
    5108:	689b      	ldr	r3, [r3, #8]
    510a:	2b00      	cmp	r3, #0
    510c:	d009      	beq.n	5122 <compile_generic_all_nodes+0x46>
            // add line info for the error in case it didn't have a line number
            compile_error_set_line(comp, pns->nodes[i]);
    510e:	683b      	ldr	r3, [r7, #0]
    5110:	68fa      	ldr	r2, [r7, #12]
    5112:	3202      	adds	r2, #2
    5114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5118:	4619      	mov	r1, r3
    511a:	6878      	ldr	r0, [r7, #4]
    511c:	f7ff fee0 	bl	4ee0 <compile_error_set_line>
            return;
    5120:	e006      	b.n	5130 <compile_generic_all_nodes+0x54>
    for (int i = 0; i < num_nodes; i++) {
    5122:	68fb      	ldr	r3, [r7, #12]
    5124:	3301      	adds	r3, #1
    5126:	60fb      	str	r3, [r7, #12]
    5128:	68fa      	ldr	r2, [r7, #12]
    512a:	68bb      	ldr	r3, [r7, #8]
    512c:	429a      	cmp	r2, r3
    512e:	dbe1      	blt.n	50f4 <compile_generic_all_nodes+0x18>
        }
    }
}
    5130:	3710      	adds	r7, #16
    5132:	46bd      	mov	sp, r7
    5134:	bd80      	pop	{r7, pc}
    5136:	bf00      	nop

00005138 <compile_load_id>:

STATIC void compile_load_id(compiler_t *comp, qstr qst) {
    5138:	b580      	push	{r7, lr}
    513a:	b082      	sub	sp, #8
    513c:	af00      	add	r7, sp, #0
    513e:	6078      	str	r0, [r7, #4]
    5140:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    5142:	687b      	ldr	r3, [r7, #4]
    5144:	795b      	ldrb	r3, [r3, #5]
    5146:	2b01      	cmp	r3, #1
    5148:	d106      	bne.n	5158 <compile_load_id+0x20>
        mp_emit_common_get_id_for_load(comp->scope_cur, qst);
    514a:	687b      	ldr	r3, [r7, #4]
    514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    514e:	6839      	ldr	r1, [r7, #0]
    5150:	4618      	mov	r0, r3
    5152:	f7ff fead 	bl	4eb0 <mp_emit_common_get_id_for_load>
        mp_emit_common_id_op(comp->emit, &comp->emit_method_table->load_id, comp->scope_cur, qst);
        #else
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_load_id_ops, comp->scope_cur, qst);
        #endif
    }
}
    5156:	e007      	b.n	5168 <compile_load_id+0x30>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_load_id_ops, comp->scope_cur, qst);
    5158:	687b      	ldr	r3, [r7, #4]
    515a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    515c:	687b      	ldr	r3, [r7, #4]
    515e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5160:	683b      	ldr	r3, [r7, #0]
    5162:	4903      	ldr	r1, [pc, #12]	; (5170 <compile_load_id+0x38>)
    5164:	f004 fbda 	bl	991c <mp_emit_common_id_op>
}
    5168:	bf00      	nop
    516a:	3708      	adds	r7, #8
    516c:	46bd      	mov	sp, r7
    516e:	bd80      	pop	{r7, pc}
    5170:	000213bc 	.word	0x000213bc

00005174 <compile_store_id>:

STATIC void compile_store_id(compiler_t *comp, qstr qst) {
    5174:	b580      	push	{r7, lr}
    5176:	b082      	sub	sp, #8
    5178:	af00      	add	r7, sp, #0
    517a:	6078      	str	r0, [r7, #4]
    517c:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    517e:	687b      	ldr	r3, [r7, #4]
    5180:	795b      	ldrb	r3, [r3, #5]
    5182:	2b01      	cmp	r3, #1
    5184:	d106      	bne.n	5194 <compile_store_id+0x20>
        mp_emit_common_get_id_for_modification(comp->scope_cur, qst);
    5186:	687b      	ldr	r3, [r7, #4]
    5188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    518a:	6839      	ldr	r1, [r7, #0]
    518c:	4618      	mov	r0, r3
    518e:	f004 fbab 	bl	98e8 <mp_emit_common_get_id_for_modification>
        mp_emit_common_id_op(comp->emit, &comp->emit_method_table->store_id, comp->scope_cur, qst);
        #else
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_store_id_ops, comp->scope_cur, qst);
        #endif
    }
}
    5192:	e007      	b.n	51a4 <compile_store_id+0x30>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_store_id_ops, comp->scope_cur, qst);
    5194:	687b      	ldr	r3, [r7, #4]
    5196:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5198:	687b      	ldr	r3, [r7, #4]
    519a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    519c:	683b      	ldr	r3, [r7, #0]
    519e:	4903      	ldr	r1, [pc, #12]	; (51ac <compile_store_id+0x38>)
    51a0:	f004 fbbc 	bl	991c <mp_emit_common_id_op>
}
    51a4:	bf00      	nop
    51a6:	3708      	adds	r7, #8
    51a8:	46bd      	mov	sp, r7
    51aa:	bd80      	pop	{r7, pc}
    51ac:	000213c4 	.word	0x000213c4

000051b0 <compile_delete_id>:

STATIC void compile_delete_id(compiler_t *comp, qstr qst) {
    51b0:	b580      	push	{r7, lr}
    51b2:	b082      	sub	sp, #8
    51b4:	af00      	add	r7, sp, #0
    51b6:	6078      	str	r0, [r7, #4]
    51b8:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    51ba:	687b      	ldr	r3, [r7, #4]
    51bc:	795b      	ldrb	r3, [r3, #5]
    51be:	2b01      	cmp	r3, #1
    51c0:	d106      	bne.n	51d0 <compile_delete_id+0x20>
        mp_emit_common_get_id_for_modification(comp->scope_cur, qst);
    51c2:	687b      	ldr	r3, [r7, #4]
    51c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    51c6:	6839      	ldr	r1, [r7, #0]
    51c8:	4618      	mov	r0, r3
    51ca:	f004 fb8d 	bl	98e8 <mp_emit_common_get_id_for_modification>
        mp_emit_common_id_op(comp->emit, &comp->emit_method_table->delete_id, comp->scope_cur, qst);
        #else
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_delete_id_ops, comp->scope_cur, qst);
        #endif
    }
}
    51ce:	e007      	b.n	51e0 <compile_delete_id+0x30>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_delete_id_ops, comp->scope_cur, qst);
    51d0:	687b      	ldr	r3, [r7, #4]
    51d2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    51d4:	687b      	ldr	r3, [r7, #4]
    51d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    51d8:	683b      	ldr	r3, [r7, #0]
    51da:	4903      	ldr	r1, [pc, #12]	; (51e8 <compile_delete_id+0x38>)
    51dc:	f004 fb9e 	bl	991c <mp_emit_common_id_op>
}
    51e0:	bf00      	nop
    51e2:	3708      	adds	r7, #8
    51e4:	46bd      	mov	sp, r7
    51e6:	bd80      	pop	{r7, pc}
    51e8:	000213cc 	.word	0x000213cc

000051ec <c_tuple>:

STATIC void c_tuple(compiler_t *comp, mp_parse_node_t pn, mp_parse_node_struct_t *pns_list) {
    51ec:	b580      	push	{r7, lr}
    51ee:	b088      	sub	sp, #32
    51f0:	af00      	add	r7, sp, #0
    51f2:	60f8      	str	r0, [r7, #12]
    51f4:	60b9      	str	r1, [r7, #8]
    51f6:	607a      	str	r2, [r7, #4]
    int total = 0;
    51f8:	2300      	movs	r3, #0
    51fa:	61fb      	str	r3, [r7, #28]
    if (!MP_PARSE_NODE_IS_NULL(pn)) {
    51fc:	68bb      	ldr	r3, [r7, #8]
    51fe:	2b00      	cmp	r3, #0
    5200:	d006      	beq.n	5210 <c_tuple+0x24>
        compile_node(comp, pn);
    5202:	68b9      	ldr	r1, [r7, #8]
    5204:	68f8      	ldr	r0, [r7, #12]
    5206:	f003 fc6d 	bl	8ae4 <compile_node>
        total += 1;
    520a:	69fb      	ldr	r3, [r7, #28]
    520c:	3301      	adds	r3, #1
    520e:	61fb      	str	r3, [r7, #28]
    }
    if (pns_list != NULL) {
    5210:	687b      	ldr	r3, [r7, #4]
    5212:	2b00      	cmp	r3, #0
    5214:	d01a      	beq.n	524c <c_tuple+0x60>
        int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns_list);
    5216:	687b      	ldr	r3, [r7, #4]
    5218:	685b      	ldr	r3, [r3, #4]
    521a:	0a1b      	lsrs	r3, r3, #8
    521c:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < n; i++) {
    521e:	2300      	movs	r3, #0
    5220:	61bb      	str	r3, [r7, #24]
    5222:	e00b      	b.n	523c <c_tuple+0x50>
            compile_node(comp, pns_list->nodes[i]);
    5224:	687b      	ldr	r3, [r7, #4]
    5226:	69ba      	ldr	r2, [r7, #24]
    5228:	3202      	adds	r2, #2
    522a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    522e:	4619      	mov	r1, r3
    5230:	68f8      	ldr	r0, [r7, #12]
    5232:	f003 fc57 	bl	8ae4 <compile_node>
        for (int i = 0; i < n; i++) {
    5236:	69bb      	ldr	r3, [r7, #24]
    5238:	3301      	adds	r3, #1
    523a:	61bb      	str	r3, [r7, #24]
    523c:	69ba      	ldr	r2, [r7, #24]
    523e:	697b      	ldr	r3, [r7, #20]
    5240:	429a      	cmp	r2, r3
    5242:	dbef      	blt.n	5224 <c_tuple+0x38>
        }
        total += n;
    5244:	69fa      	ldr	r2, [r7, #28]
    5246:	697b      	ldr	r3, [r7, #20]
    5248:	4413      	add	r3, r2
    524a:	61fb      	str	r3, [r7, #28]
    }
    EMIT_ARG(build, total, MP_EMIT_BUILD_TUPLE);
    524c:	68fb      	ldr	r3, [r7, #12]
    524e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5250:	69f9      	ldr	r1, [r7, #28]
    5252:	2200      	movs	r2, #0
    5254:	4618      	mov	r0, r3
    5256:	f005 fc35 	bl	aac4 <mp_emit_bc_build>
}
    525a:	bf00      	nop
    525c:	3720      	adds	r7, #32
    525e:	46bd      	mov	sp, r7
    5260:	bd80      	pop	{r7, pc}
    5262:	bf00      	nop

00005264 <compile_generic_tuple>:

STATIC void compile_generic_tuple(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5264:	b580      	push	{r7, lr}
    5266:	b082      	sub	sp, #8
    5268:	af00      	add	r7, sp, #0
    526a:	6078      	str	r0, [r7, #4]
    526c:	6039      	str	r1, [r7, #0]
    // a simple tuple expression
    c_tuple(comp, MP_PARSE_NODE_NULL, pns);
    526e:	683a      	ldr	r2, [r7, #0]
    5270:	2100      	movs	r1, #0
    5272:	6878      	ldr	r0, [r7, #4]
    5274:	f7ff ffba 	bl	51ec <c_tuple>
}
    5278:	bf00      	nop
    527a:	3708      	adds	r7, #8
    527c:	46bd      	mov	sp, r7
    527e:	bd80      	pop	{r7, pc}

00005280 <c_if_cond>:

STATIC void c_if_cond(compiler_t *comp, mp_parse_node_t pn, bool jump_if, int label) {
    5280:	b580      	push	{r7, lr}
    5282:	b08a      	sub	sp, #40	; 0x28
    5284:	af00      	add	r7, sp, #0
    5286:	60f8      	str	r0, [r7, #12]
    5288:	60b9      	str	r1, [r7, #8]
    528a:	603b      	str	r3, [r7, #0]
    528c:	4613      	mov	r3, r2
    528e:	71fb      	strb	r3, [r7, #7]
    if (mp_parse_node_is_const_false(pn)) {
    5290:	68b8      	ldr	r0, [r7, #8]
    5292:	f7fe fcbd 	bl	3c10 <mp_parse_node_is_const_false>
    5296:	4603      	mov	r3, r0
    5298:	2b00      	cmp	r3, #0
    529a:	d00e      	beq.n	52ba <c_if_cond+0x3a>
        if (jump_if == false) {
    529c:	79fb      	ldrb	r3, [r7, #7]
    529e:	f083 0301 	eor.w	r3, r3, #1
    52a2:	b2db      	uxtb	r3, r3
    52a4:	2b00      	cmp	r3, #0
    52a6:	f000 80eb 	beq.w	5480 <c_if_cond+0x200>
            EMIT_ARG(jump, label);
    52aa:	68fb      	ldr	r3, [r7, #12]
    52ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    52ae:	683a      	ldr	r2, [r7, #0]
    52b0:	4611      	mov	r1, r2
    52b2:	4618      	mov	r0, r3
    52b4:	f005 fa76 	bl	a7a4 <mp_emit_bc_jump>
        }
        return;
    52b8:	e0e2      	b.n	5480 <c_if_cond+0x200>
    } else if (mp_parse_node_is_const_true(pn)) {
    52ba:	68b8      	ldr	r0, [r7, #8]
    52bc:	f7fe fcc4 	bl	3c48 <mp_parse_node_is_const_true>
    52c0:	4603      	mov	r3, r0
    52c2:	2b00      	cmp	r3, #0
    52c4:	d00b      	beq.n	52de <c_if_cond+0x5e>
        if (jump_if == true) {
    52c6:	79fb      	ldrb	r3, [r7, #7]
    52c8:	2b00      	cmp	r3, #0
    52ca:	f000 80db 	beq.w	5484 <c_if_cond+0x204>
            EMIT_ARG(jump, label);
    52ce:	68fb      	ldr	r3, [r7, #12]
    52d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    52d2:	683a      	ldr	r2, [r7, #0]
    52d4:	4611      	mov	r1, r2
    52d6:	4618      	mov	r0, r3
    52d8:	f005 fa64 	bl	a7a4 <mp_emit_bc_jump>
        }
        return;
    52dc:	e0d2      	b.n	5484 <c_if_cond+0x204>
    } else if (MP_PARSE_NODE_IS_STRUCT(pn)) {
    52de:	68bb      	ldr	r3, [r7, #8]
    52e0:	2b00      	cmp	r3, #0
    52e2:	f000 80c1 	beq.w	5468 <c_if_cond+0x1e8>
    52e6:	68bb      	ldr	r3, [r7, #8]
    52e8:	f003 0303 	and.w	r3, r3, #3
    52ec:	2b00      	cmp	r3, #0
    52ee:	f040 80bb 	bne.w	5468 <c_if_cond+0x1e8>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    52f2:	68bb      	ldr	r3, [r7, #8]
    52f4:	61fb      	str	r3, [r7, #28]
        int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    52f6:	69fb      	ldr	r3, [r7, #28]
    52f8:	685b      	ldr	r3, [r3, #4]
    52fa:	0a1b      	lsrs	r3, r3, #8
    52fc:	61bb      	str	r3, [r7, #24]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_or_test) {
    52fe:	69fb      	ldr	r3, [r7, #28]
    5300:	685b      	ldr	r3, [r3, #4]
    5302:	b2db      	uxtb	r3, r3
    5304:	2b1c      	cmp	r3, #28
    5306:	d152      	bne.n	53ae <c_if_cond+0x12e>
            if (jump_if == false) {
    5308:	79fb      	ldrb	r3, [r7, #7]
    530a:	f083 0301 	eor.w	r3, r3, #1
    530e:	b2db      	uxtb	r3, r3
    5310:	2b00      	cmp	r3, #0
    5312:	d037      	beq.n	5384 <c_if_cond+0x104>
    5314:	e000      	b.n	5318 <c_if_cond+0x98>
            return;
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_and_test) {
            if (jump_if == false) {
                goto and_or_logic2;
            } else {
                goto and_or_logic1;
    5316:	bf00      	nop
                uint label2 = comp_next_label(comp);
    5318:	68f8      	ldr	r0, [r7, #12]
    531a:	f7ff fe19 	bl	4f50 <comp_next_label>
    531e:	6178      	str	r0, [r7, #20]
                for (int i = 0; i < n - 1; i++) {
    5320:	2300      	movs	r3, #0
    5322:	627b      	str	r3, [r7, #36]	; 0x24
    5324:	e017      	b.n	5356 <c_if_cond+0xd6>
                    c_if_cond(comp, pns->nodes[i], !jump_if, label2);
    5326:	69fb      	ldr	r3, [r7, #28]
    5328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    532a:	3202      	adds	r2, #2
    532c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    5330:	79fb      	ldrb	r3, [r7, #7]
    5332:	2b00      	cmp	r3, #0
    5334:	bf14      	ite	ne
    5336:	2301      	movne	r3, #1
    5338:	2300      	moveq	r3, #0
    533a:	b2db      	uxtb	r3, r3
    533c:	f083 0301 	eor.w	r3, r3, #1
    5340:	b2db      	uxtb	r3, r3
    5342:	f003 0301 	and.w	r3, r3, #1
    5346:	b2da      	uxtb	r2, r3
    5348:	697b      	ldr	r3, [r7, #20]
    534a:	68f8      	ldr	r0, [r7, #12]
    534c:	f7ff ff98 	bl	5280 <c_if_cond>
                for (int i = 0; i < n - 1; i++) {
    5350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5352:	3301      	adds	r3, #1
    5354:	627b      	str	r3, [r7, #36]	; 0x24
    5356:	69bb      	ldr	r3, [r7, #24]
    5358:	1e5a      	subs	r2, r3, #1
    535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    535c:	429a      	cmp	r2, r3
    535e:	dce2      	bgt.n	5326 <c_if_cond+0xa6>
                c_if_cond(comp, pns->nodes[n - 1], jump_if, label);
    5360:	69bb      	ldr	r3, [r7, #24]
    5362:	1e5a      	subs	r2, r3, #1
    5364:	69fb      	ldr	r3, [r7, #28]
    5366:	3202      	adds	r2, #2
    5368:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    536c:	79fa      	ldrb	r2, [r7, #7]
    536e:	683b      	ldr	r3, [r7, #0]
    5370:	68f8      	ldr	r0, [r7, #12]
    5372:	f7ff ff85 	bl	5280 <c_if_cond>
                EMIT_ARG(label_assign, label2);
    5376:	68fb      	ldr	r3, [r7, #12]
    5378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    537a:	6979      	ldr	r1, [r7, #20]
    537c:	4618      	mov	r0, r3
    537e:	f004 ff83 	bl	a288 <mp_emit_bc_label_assign>
            return;
    5382:	e082      	b.n	548a <c_if_cond+0x20a>
                for (int i = 0; i < n; i++) {
    5384:	2300      	movs	r3, #0
    5386:	623b      	str	r3, [r7, #32]
    5388:	e00c      	b.n	53a4 <c_if_cond+0x124>
                    c_if_cond(comp, pns->nodes[i], jump_if, label);
    538a:	69fb      	ldr	r3, [r7, #28]
    538c:	6a3a      	ldr	r2, [r7, #32]
    538e:	3202      	adds	r2, #2
    5390:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    5394:	79fa      	ldrb	r2, [r7, #7]
    5396:	683b      	ldr	r3, [r7, #0]
    5398:	68f8      	ldr	r0, [r7, #12]
    539a:	f7ff ff71 	bl	5280 <c_if_cond>
                for (int i = 0; i < n; i++) {
    539e:	6a3b      	ldr	r3, [r7, #32]
    53a0:	3301      	adds	r3, #1
    53a2:	623b      	str	r3, [r7, #32]
    53a4:	6a3a      	ldr	r2, [r7, #32]
    53a6:	69bb      	ldr	r3, [r7, #24]
    53a8:	429a      	cmp	r2, r3
    53aa:	dbee      	blt.n	538a <c_if_cond+0x10a>
            return;
    53ac:	e06d      	b.n	548a <c_if_cond+0x20a>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_and_test) {
    53ae:	69fb      	ldr	r3, [r7, #28]
    53b0:	685b      	ldr	r3, [r3, #4]
    53b2:	b2db      	uxtb	r3, r3
    53b4:	2b1d      	cmp	r3, #29
    53b6:	d106      	bne.n	53c6 <c_if_cond+0x146>
            if (jump_if == false) {
    53b8:	79fb      	ldrb	r3, [r7, #7]
    53ba:	f083 0301 	eor.w	r3, r3, #1
    53be:	b2db      	uxtb	r3, r3
    53c0:	2b00      	cmp	r3, #0
    53c2:	d0a8      	beq.n	5316 <c_if_cond+0x96>
                goto and_or_logic2;
    53c4:	e7de      	b.n	5384 <c_if_cond+0x104>
            }
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_not_test_2) {
    53c6:	69fb      	ldr	r3, [r7, #28]
    53c8:	685b      	ldr	r3, [r3, #4]
    53ca:	b2db      	uxtb	r3, r3
    53cc:	2b1e      	cmp	r3, #30
    53ce:	d112      	bne.n	53f6 <c_if_cond+0x176>
            c_if_cond(comp, pns->nodes[0], !jump_if, label);
    53d0:	69fb      	ldr	r3, [r7, #28]
    53d2:	6899      	ldr	r1, [r3, #8]
    53d4:	79fb      	ldrb	r3, [r7, #7]
    53d6:	2b00      	cmp	r3, #0
    53d8:	bf14      	ite	ne
    53da:	2301      	movne	r3, #1
    53dc:	2300      	moveq	r3, #0
    53de:	b2db      	uxtb	r3, r3
    53e0:	f083 0301 	eor.w	r3, r3, #1
    53e4:	b2db      	uxtb	r3, r3
    53e6:	f003 0301 	and.w	r3, r3, #1
    53ea:	b2da      	uxtb	r2, r3
    53ec:	683b      	ldr	r3, [r7, #0]
    53ee:	68f8      	ldr	r0, [r7, #12]
    53f0:	f7ff ff46 	bl	5280 <c_if_cond>
            return;
    53f4:	e049      	b.n	548a <c_if_cond+0x20a>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_atom_paren) {
    53f6:	69fb      	ldr	r3, [r7, #28]
    53f8:	685b      	ldr	r3, [r3, #4]
    53fa:	b2db      	uxtb	r3, r3
    53fc:	2b2a      	cmp	r3, #42	; 0x2a
    53fe:	d133      	bne.n	5468 <c_if_cond+0x1e8>
            // cond is something in parenthesis
            if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    5400:	69fb      	ldr	r3, [r7, #28]
    5402:	689b      	ldr	r3, [r3, #8]
    5404:	2b00      	cmp	r3, #0
    5406:	d10d      	bne.n	5424 <c_if_cond+0x1a4>
                // empty tuple, acts as false for the condition
                if (jump_if == false) {
    5408:	79fb      	ldrb	r3, [r7, #7]
    540a:	f083 0301 	eor.w	r3, r3, #1
    540e:	b2db      	uxtb	r3, r3
    5410:	2b00      	cmp	r3, #0
    5412:	d039      	beq.n	5488 <c_if_cond+0x208>
                    EMIT_ARG(jump, label);
    5414:	68fb      	ldr	r3, [r7, #12]
    5416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5418:	683a      	ldr	r2, [r7, #0]
    541a:	4611      	mov	r1, r2
    541c:	4618      	mov	r0, r3
    541e:	f005 f9c1 	bl	a7a4 <mp_emit_bc_jump>
                // non-empty tuple, acts as true for the condition
                if (jump_if == true) {
                    EMIT_ARG(jump, label);
                }
            }
            return;
    5422:	e031      	b.n	5488 <c_if_cond+0x208>
                assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    5424:	69fb      	ldr	r3, [r7, #28]
    5426:	689b      	ldr	r3, [r3, #8]
    5428:	2b00      	cmp	r3, #0
    542a:	d00b      	beq.n	5444 <c_if_cond+0x1c4>
    542c:	69fb      	ldr	r3, [r7, #28]
    542e:	689b      	ldr	r3, [r3, #8]
    5430:	f003 0303 	and.w	r3, r3, #3
    5434:	2b00      	cmp	r3, #0
    5436:	d105      	bne.n	5444 <c_if_cond+0x1c4>
    5438:	69fb      	ldr	r3, [r7, #28]
    543a:	689b      	ldr	r3, [r3, #8]
    543c:	685b      	ldr	r3, [r3, #4]
    543e:	b2db      	uxtb	r3, r3
    5440:	2b8a      	cmp	r3, #138	; 0x8a
    5442:	d006      	beq.n	5452 <c_if_cond+0x1d2>
    5444:	4b12      	ldr	r3, [pc, #72]	; (5490 <c_if_cond+0x210>)
    5446:	4a13      	ldr	r2, [pc, #76]	; (5494 <c_if_cond+0x214>)
    5448:	f44f 71ac 	mov.w	r1, #344	; 0x158
    544c:	4812      	ldr	r0, [pc, #72]	; (5498 <c_if_cond+0x218>)
    544e:	f016 f999 	bl	1b784 <__assert_func>
                if (jump_if == true) {
    5452:	79fb      	ldrb	r3, [r7, #7]
    5454:	2b00      	cmp	r3, #0
    5456:	d017      	beq.n	5488 <c_if_cond+0x208>
                    EMIT_ARG(jump, label);
    5458:	68fb      	ldr	r3, [r7, #12]
    545a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    545c:	683a      	ldr	r2, [r7, #0]
    545e:	4611      	mov	r1, r2
    5460:	4618      	mov	r0, r3
    5462:	f005 f99f 	bl	a7a4 <mp_emit_bc_jump>
            return;
    5466:	e00f      	b.n	5488 <c_if_cond+0x208>
        }
    }

    // nothing special, fall back to default compiling for node and jump
    compile_node(comp, pn);
    5468:	68b9      	ldr	r1, [r7, #8]
    546a:	68f8      	ldr	r0, [r7, #12]
    546c:	f003 fb3a 	bl	8ae4 <compile_node>
    EMIT_ARG(pop_jump_if, jump_if, label);
    5470:	68fb      	ldr	r3, [r7, #12]
    5472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5474:	683a      	ldr	r2, [r7, #0]
    5476:	79f9      	ldrb	r1, [r7, #7]
    5478:	4618      	mov	r0, r3
    547a:	f005 f9a5 	bl	a7c8 <mp_emit_bc_pop_jump_if>
    547e:	e004      	b.n	548a <c_if_cond+0x20a>
        return;
    5480:	bf00      	nop
    5482:	e002      	b.n	548a <c_if_cond+0x20a>
        return;
    5484:	bf00      	nop
    5486:	e000      	b.n	548a <c_if_cond+0x20a>
            return;
    5488:	bf00      	nop
}
    548a:	3728      	adds	r7, #40	; 0x28
    548c:	46bd      	mov	sp, r7
    548e:	bd80      	pop	{r7, pc}
    5490:	0002036c 	.word	0x0002036c
    5494:	00020ee4 	.word	0x00020ee4
    5498:	00020358 	.word	0x00020358

0000549c <c_assign_atom_expr>:

typedef enum { ASSIGN_STORE, ASSIGN_AUG_LOAD, ASSIGN_AUG_STORE } assign_kind_t;
STATIC void c_assign(compiler_t *comp, mp_parse_node_t pn, assign_kind_t kind);

STATIC void c_assign_atom_expr(compiler_t *comp, mp_parse_node_struct_t *pns, assign_kind_t assign_kind) {
    549c:	b580      	push	{r7, lr}
    549e:	b088      	sub	sp, #32
    54a0:	af00      	add	r7, sp, #0
    54a2:	60f8      	str	r0, [r7, #12]
    54a4:	60b9      	str	r1, [r7, #8]
    54a6:	607a      	str	r2, [r7, #4]
    if (assign_kind != ASSIGN_AUG_STORE) {
    54a8:	687b      	ldr	r3, [r7, #4]
    54aa:	2b02      	cmp	r3, #2
    54ac:	d005      	beq.n	54ba <c_assign_atom_expr+0x1e>
        compile_node(comp, pns->nodes[0]);
    54ae:	68bb      	ldr	r3, [r7, #8]
    54b0:	689b      	ldr	r3, [r3, #8]
    54b2:	4619      	mov	r1, r3
    54b4:	68f8      	ldr	r0, [r7, #12]
    54b6:	f003 fb15 	bl	8ae4 <compile_node>
    }

    if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    54ba:	68bb      	ldr	r3, [r7, #8]
    54bc:	68db      	ldr	r3, [r3, #12]
    54be:	2b00      	cmp	r3, #0
    54c0:	f000 80b0 	beq.w	5624 <c_assign_atom_expr+0x188>
    54c4:	68bb      	ldr	r3, [r7, #8]
    54c6:	68db      	ldr	r3, [r3, #12]
    54c8:	f003 0303 	and.w	r3, r3, #3
    54cc:	2b00      	cmp	r3, #0
    54ce:	f040 80a9 	bne.w	5624 <c_assign_atom_expr+0x188>
        mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    54d2:	68bb      	ldr	r3, [r7, #8]
    54d4:	68db      	ldr	r3, [r3, #12]
    54d6:	61fb      	str	r3, [r7, #28]
        if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_atom_expr_trailers) {
    54d8:	69fb      	ldr	r3, [r7, #28]
    54da:	685b      	ldr	r3, [r3, #4]
    54dc:	b2db      	uxtb	r3, r3
    54de:	2b86      	cmp	r3, #134	; 0x86
    54e0:	d13a      	bne.n	5558 <c_assign_atom_expr+0xbc>
            int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    54e2:	69fb      	ldr	r3, [r7, #28]
    54e4:	685b      	ldr	r3, [r3, #4]
    54e6:	0a1b      	lsrs	r3, r3, #8
    54e8:	617b      	str	r3, [r7, #20]
            if (assign_kind != ASSIGN_AUG_STORE) {
    54ea:	687b      	ldr	r3, [r7, #4]
    54ec:	2b02      	cmp	r3, #2
    54ee:	d013      	beq.n	5518 <c_assign_atom_expr+0x7c>
                for (int i = 0; i < n - 1; i++) {
    54f0:	2300      	movs	r3, #0
    54f2:	61bb      	str	r3, [r7, #24]
    54f4:	e00b      	b.n	550e <c_assign_atom_expr+0x72>
                    compile_node(comp, pns1->nodes[i]);
    54f6:	69fb      	ldr	r3, [r7, #28]
    54f8:	69ba      	ldr	r2, [r7, #24]
    54fa:	3202      	adds	r2, #2
    54fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5500:	4619      	mov	r1, r3
    5502:	68f8      	ldr	r0, [r7, #12]
    5504:	f003 faee 	bl	8ae4 <compile_node>
                for (int i = 0; i < n - 1; i++) {
    5508:	69bb      	ldr	r3, [r7, #24]
    550a:	3301      	adds	r3, #1
    550c:	61bb      	str	r3, [r7, #24]
    550e:	697b      	ldr	r3, [r7, #20]
    5510:	1e5a      	subs	r2, r3, #1
    5512:	69bb      	ldr	r3, [r7, #24]
    5514:	429a      	cmp	r2, r3
    5516:	dcee      	bgt.n	54f6 <c_assign_atom_expr+0x5a>
                }
            }
            assert(MP_PARSE_NODE_IS_STRUCT(pns1->nodes[n - 1]));
    5518:	697b      	ldr	r3, [r7, #20]
    551a:	1e5a      	subs	r2, r3, #1
    551c:	69fb      	ldr	r3, [r7, #28]
    551e:	3202      	adds	r2, #2
    5520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5524:	2b00      	cmp	r3, #0
    5526:	d009      	beq.n	553c <c_assign_atom_expr+0xa0>
    5528:	697b      	ldr	r3, [r7, #20]
    552a:	1e5a      	subs	r2, r3, #1
    552c:	69fb      	ldr	r3, [r7, #28]
    552e:	3202      	adds	r2, #2
    5530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5534:	f003 0303 	and.w	r3, r3, #3
    5538:	2b00      	cmp	r3, #0
    553a:	d006      	beq.n	554a <c_assign_atom_expr+0xae>
    553c:	4b3e      	ldr	r3, [pc, #248]	; (5638 <c_assign_atom_expr+0x19c>)
    553e:	4a3f      	ldr	r2, [pc, #252]	; (563c <c_assign_atom_expr+0x1a0>)
    5540:	f44f 71bc 	mov.w	r1, #376	; 0x178
    5544:	483e      	ldr	r0, [pc, #248]	; (5640 <c_assign_atom_expr+0x1a4>)
    5546:	f016 f91d 	bl	1b784 <__assert_func>
            pns1 = (mp_parse_node_struct_t*)pns1->nodes[n - 1];
    554a:	697b      	ldr	r3, [r7, #20]
    554c:	1e5a      	subs	r2, r3, #1
    554e:	69fb      	ldr	r3, [r7, #28]
    5550:	3202      	adds	r2, #2
    5552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5556:	61fb      	str	r3, [r7, #28]
        }
        if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_bracket) {
    5558:	69fb      	ldr	r3, [r7, #28]
    555a:	685b      	ldr	r3, [r3, #4]
    555c:	b2db      	uxtb	r3, r3
    555e:	2b2e      	cmp	r3, #46	; 0x2e
    5560:	d12a      	bne.n	55b8 <c_assign_atom_expr+0x11c>
            if (assign_kind == ASSIGN_AUG_STORE) {
    5562:	687b      	ldr	r3, [r7, #4]
    5564:	2b02      	cmp	r3, #2
    5566:	d10b      	bne.n	5580 <c_assign_atom_expr+0xe4>
                EMIT(rot_three);
    5568:	68fb      	ldr	r3, [r7, #12]
    556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    556c:	4618      	mov	r0, r3
    556e:	f005 f909 	bl	a784 <mp_emit_bc_rot_three>
                EMIT_ARG(subscr, MP_EMIT_SUBSCR_STORE);
    5572:	68fb      	ldr	r3, [r7, #12]
    5574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5576:	2101      	movs	r1, #1
    5578:	4618      	mov	r0, r3
    557a:	f005 f803 	bl	a584 <mp_emit_bc_subscr>
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_LOAD);
                } else {
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_STORE);
                }
            }
            return;
    557e:	e057      	b.n	5630 <c_assign_atom_expr+0x194>
                compile_node(comp, pns1->nodes[0]);
    5580:	69fb      	ldr	r3, [r7, #28]
    5582:	689b      	ldr	r3, [r3, #8]
    5584:	4619      	mov	r1, r3
    5586:	68f8      	ldr	r0, [r7, #12]
    5588:	f003 faac 	bl	8ae4 <compile_node>
                if (assign_kind == ASSIGN_AUG_LOAD) {
    558c:	687b      	ldr	r3, [r7, #4]
    558e:	2b01      	cmp	r3, #1
    5590:	d10b      	bne.n	55aa <c_assign_atom_expr+0x10e>
                    EMIT(dup_top_two);
    5592:	68fb      	ldr	r3, [r7, #12]
    5594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5596:	4618      	mov	r0, r3
    5598:	f005 f8c2 	bl	a720 <mp_emit_bc_dup_top_two>
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_LOAD);
    559c:	68fb      	ldr	r3, [r7, #12]
    559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    55a0:	2100      	movs	r1, #0
    55a2:	4618      	mov	r0, r3
    55a4:	f004 ffee 	bl	a584 <mp_emit_bc_subscr>
            return;
    55a8:	e042      	b.n	5630 <c_assign_atom_expr+0x194>
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_STORE);
    55aa:	68fb      	ldr	r3, [r7, #12]
    55ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    55ae:	2101      	movs	r1, #1
    55b0:	4618      	mov	r0, r3
    55b2:	f004 ffe7 	bl	a584 <mp_emit_bc_subscr>
            return;
    55b6:	e03b      	b.n	5630 <c_assign_atom_expr+0x194>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_period) {
    55b8:	69fb      	ldr	r3, [r7, #28]
    55ba:	685b      	ldr	r3, [r3, #4]
    55bc:	b2db      	uxtb	r3, r3
    55be:	2b2f      	cmp	r3, #47	; 0x2f
    55c0:	d130      	bne.n	5624 <c_assign_atom_expr+0x188>
            assert(MP_PARSE_NODE_IS_ID(pns1->nodes[0]));
    55c2:	69fb      	ldr	r3, [r7, #28]
    55c4:	689b      	ldr	r3, [r3, #8]
    55c6:	f003 030f 	and.w	r3, r3, #15
    55ca:	2b02      	cmp	r3, #2
    55cc:	d006      	beq.n	55dc <c_assign_atom_expr+0x140>
    55ce:	4b1d      	ldr	r3, [pc, #116]	; (5644 <c_assign_atom_expr+0x1a8>)
    55d0:	4a1a      	ldr	r2, [pc, #104]	; (563c <c_assign_atom_expr+0x1a0>)
    55d2:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    55d6:	481a      	ldr	r0, [pc, #104]	; (5640 <c_assign_atom_expr+0x1a4>)
    55d8:	f016 f8d4 	bl	1b784 <__assert_func>
            if (assign_kind == ASSIGN_AUG_LOAD) {
    55dc:	687b      	ldr	r3, [r7, #4]
    55de:	2b01      	cmp	r3, #1
    55e0:	d10e      	bne.n	5600 <c_assign_atom_expr+0x164>
                EMIT(dup_top);
    55e2:	68fb      	ldr	r3, [r7, #12]
    55e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    55e6:	4618      	mov	r0, r3
    55e8:	f005 f88a 	bl	a700 <mp_emit_bc_dup_top>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_LOAD);
    55ec:	68fb      	ldr	r3, [r7, #12]
    55ee:	6a98      	ldr	r0, [r3, #40]	; 0x28
    55f0:	69fb      	ldr	r3, [r7, #28]
    55f2:	689b      	ldr	r3, [r3, #8]
    55f4:	091b      	lsrs	r3, r3, #4
    55f6:	2200      	movs	r2, #0
    55f8:	4619      	mov	r1, r3
    55fa:	f004 ffeb 	bl	a5d4 <mp_emit_bc_attr>
                if (assign_kind == ASSIGN_AUG_STORE) {
                    EMIT(rot_two);
                }
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_STORE);
            }
            return;
    55fe:	e017      	b.n	5630 <c_assign_atom_expr+0x194>
                if (assign_kind == ASSIGN_AUG_STORE) {
    5600:	687b      	ldr	r3, [r7, #4]
    5602:	2b02      	cmp	r3, #2
    5604:	d104      	bne.n	5610 <c_assign_atom_expr+0x174>
                    EMIT(rot_two);
    5606:	68fb      	ldr	r3, [r7, #12]
    5608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    560a:	4618      	mov	r0, r3
    560c:	f005 f8aa 	bl	a764 <mp_emit_bc_rot_two>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_STORE);
    5610:	68fb      	ldr	r3, [r7, #12]
    5612:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5614:	69fb      	ldr	r3, [r7, #28]
    5616:	689b      	ldr	r3, [r3, #8]
    5618:	091b      	lsrs	r3, r3, #4
    561a:	2201      	movs	r2, #1
    561c:	4619      	mov	r1, r3
    561e:	f004 ffd9 	bl	a5d4 <mp_emit_bc_attr>
            return;
    5622:	e005      	b.n	5630 <c_assign_atom_expr+0x194>
        }
    }

    compile_syntax_error(comp, (mp_parse_node_t)pns, "can't assign to expression");
    5624:	68bb      	ldr	r3, [r7, #8]
    5626:	4a08      	ldr	r2, [pc, #32]	; (5648 <c_assign_atom_expr+0x1ac>)
    5628:	4619      	mov	r1, r3
    562a:	68f8      	ldr	r0, [r7, #12]
    562c:	f7ff fc74 	bl	4f18 <compile_syntax_error>
}
    5630:	3720      	adds	r7, #32
    5632:	46bd      	mov	sp, r7
    5634:	bd80      	pop	{r7, pc}
    5636:	bf00      	nop
    5638:	000203ac 	.word	0x000203ac
    563c:	00020ef0 	.word	0x00020ef0
    5640:	00020358 	.word	0x00020358
    5644:	000203d8 	.word	0x000203d8
    5648:	000203fc 	.word	0x000203fc

0000564c <c_assign_tuple>:

// we need to allow for a caller passing in 1 initial node (node_head) followed by an array of nodes (nodes_tail)
STATIC void c_assign_tuple(compiler_t *comp, mp_parse_node_t node_head, uint num_tail, mp_parse_node_t *nodes_tail) {
    564c:	b580      	push	{r7, lr}
    564e:	b088      	sub	sp, #32
    5650:	af00      	add	r7, sp, #0
    5652:	60f8      	str	r0, [r7, #12]
    5654:	60b9      	str	r1, [r7, #8]
    5656:	607a      	str	r2, [r7, #4]
    5658:	603b      	str	r3, [r7, #0]
    uint num_head = (node_head == MP_PARSE_NODE_NULL) ? 0 : 1;
    565a:	68bb      	ldr	r3, [r7, #8]
    565c:	2b00      	cmp	r3, #0
    565e:	bf14      	ite	ne
    5660:	2301      	movne	r3, #1
    5662:	2300      	moveq	r3, #0
    5664:	b2db      	uxtb	r3, r3
    5666:	613b      	str	r3, [r7, #16]

    // look for star expression
    uint have_star_index = -1;
    5668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    566c:	61fb      	str	r3, [r7, #28]
    if (num_head != 0 && MP_PARSE_NODE_IS_STRUCT_KIND(node_head, PN_star_expr)) {
    566e:	693b      	ldr	r3, [r7, #16]
    5670:	2b00      	cmp	r3, #0
    5672:	d015      	beq.n	56a0 <c_assign_tuple+0x54>
    5674:	68bb      	ldr	r3, [r7, #8]
    5676:	2b00      	cmp	r3, #0
    5678:	d012      	beq.n	56a0 <c_assign_tuple+0x54>
    567a:	68bb      	ldr	r3, [r7, #8]
    567c:	f003 0303 	and.w	r3, r3, #3
    5680:	2b00      	cmp	r3, #0
    5682:	d10d      	bne.n	56a0 <c_assign_tuple+0x54>
    5684:	68bb      	ldr	r3, [r7, #8]
    5686:	685b      	ldr	r3, [r3, #4]
    5688:	b2db      	uxtb	r3, r3
    568a:	2b20      	cmp	r3, #32
    568c:	d108      	bne.n	56a0 <c_assign_tuple+0x54>
        EMIT_ARG(unpack_ex, 0, num_tail);
    568e:	68fb      	ldr	r3, [r7, #12]
    5690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5692:	687a      	ldr	r2, [r7, #4]
    5694:	2100      	movs	r1, #0
    5696:	4618      	mov	r0, r3
    5698:	f005 fa84 	bl	aba4 <mp_emit_bc_unpack_ex>
        have_star_index = 0;
    569c:	2300      	movs	r3, #0
    569e:	61fb      	str	r3, [r7, #28]
    }
    for (uint i = 0; i < num_tail; i++) {
    56a0:	2300      	movs	r3, #0
    56a2:	61bb      	str	r3, [r7, #24]
    56a4:	e03b      	b.n	571e <c_assign_tuple+0xd2>
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes_tail[i], PN_star_expr)) {
    56a6:	69bb      	ldr	r3, [r7, #24]
    56a8:	009b      	lsls	r3, r3, #2
    56aa:	683a      	ldr	r2, [r7, #0]
    56ac:	4413      	add	r3, r2
    56ae:	681b      	ldr	r3, [r3, #0]
    56b0:	2b00      	cmp	r3, #0
    56b2:	d031      	beq.n	5718 <c_assign_tuple+0xcc>
    56b4:	69bb      	ldr	r3, [r7, #24]
    56b6:	009b      	lsls	r3, r3, #2
    56b8:	683a      	ldr	r2, [r7, #0]
    56ba:	4413      	add	r3, r2
    56bc:	681b      	ldr	r3, [r3, #0]
    56be:	f003 0303 	and.w	r3, r3, #3
    56c2:	2b00      	cmp	r3, #0
    56c4:	d128      	bne.n	5718 <c_assign_tuple+0xcc>
    56c6:	69bb      	ldr	r3, [r7, #24]
    56c8:	009b      	lsls	r3, r3, #2
    56ca:	683a      	ldr	r2, [r7, #0]
    56cc:	4413      	add	r3, r2
    56ce:	681b      	ldr	r3, [r3, #0]
    56d0:	685b      	ldr	r3, [r3, #4]
    56d2:	b2db      	uxtb	r3, r3
    56d4:	2b20      	cmp	r3, #32
    56d6:	d11f      	bne.n	5718 <c_assign_tuple+0xcc>
            if (have_star_index == (uint)-1) {
    56d8:	69fb      	ldr	r3, [r7, #28]
    56da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    56de:	d110      	bne.n	5702 <c_assign_tuple+0xb6>
                EMIT_ARG(unpack_ex, num_head + i, num_tail - i - 1);
    56e0:	68fb      	ldr	r3, [r7, #12]
    56e2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    56e4:	693a      	ldr	r2, [r7, #16]
    56e6:	69bb      	ldr	r3, [r7, #24]
    56e8:	18d1      	adds	r1, r2, r3
    56ea:	687a      	ldr	r2, [r7, #4]
    56ec:	69bb      	ldr	r3, [r7, #24]
    56ee:	1ad3      	subs	r3, r2, r3
    56f0:	3b01      	subs	r3, #1
    56f2:	461a      	mov	r2, r3
    56f4:	f005 fa56 	bl	aba4 <mp_emit_bc_unpack_ex>
                have_star_index = num_head + i;
    56f8:	693a      	ldr	r2, [r7, #16]
    56fa:	69bb      	ldr	r3, [r7, #24]
    56fc:	4413      	add	r3, r2
    56fe:	61fb      	str	r3, [r7, #28]
    5700:	e00a      	b.n	5718 <c_assign_tuple+0xcc>
            } else {
                compile_syntax_error(comp, nodes_tail[i], "multiple *x in assignment");
    5702:	69bb      	ldr	r3, [r7, #24]
    5704:	009b      	lsls	r3, r3, #2
    5706:	683a      	ldr	r2, [r7, #0]
    5708:	4413      	add	r3, r2
    570a:	681b      	ldr	r3, [r3, #0]
    570c:	4a2a      	ldr	r2, [pc, #168]	; (57b8 <c_assign_tuple+0x16c>)
    570e:	4619      	mov	r1, r3
    5710:	68f8      	ldr	r0, [r7, #12]
    5712:	f7ff fc01 	bl	4f18 <compile_syntax_error>
                return;
    5716:	e04b      	b.n	57b0 <c_assign_tuple+0x164>
    for (uint i = 0; i < num_tail; i++) {
    5718:	69bb      	ldr	r3, [r7, #24]
    571a:	3301      	adds	r3, #1
    571c:	61bb      	str	r3, [r7, #24]
    571e:	69ba      	ldr	r2, [r7, #24]
    5720:	687b      	ldr	r3, [r7, #4]
    5722:	429a      	cmp	r2, r3
    5724:	d3bf      	bcc.n	56a6 <c_assign_tuple+0x5a>
            }
        }
    }
    if (have_star_index == (uint)-1) {
    5726:	69fb      	ldr	r3, [r7, #28]
    5728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    572c:	d107      	bne.n	573e <c_assign_tuple+0xf2>
        EMIT_ARG(unpack_sequence, num_head + num_tail);
    572e:	68fb      	ldr	r3, [r7, #12]
    5730:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5732:	693a      	ldr	r2, [r7, #16]
    5734:	687b      	ldr	r3, [r7, #4]
    5736:	4413      	add	r3, r2
    5738:	4619      	mov	r1, r3
    573a:	f005 fa1f 	bl	ab7c <mp_emit_bc_unpack_sequence>
    }
    if (num_head != 0) {
    573e:	693b      	ldr	r3, [r7, #16]
    5740:	2b00      	cmp	r3, #0
    5742:	d00f      	beq.n	5764 <c_assign_tuple+0x118>
        if (0 == have_star_index) {
    5744:	69fb      	ldr	r3, [r7, #28]
    5746:	2b00      	cmp	r3, #0
    5748:	d107      	bne.n	575a <c_assign_tuple+0x10e>
            c_assign(comp, ((mp_parse_node_struct_t*)node_head)->nodes[0], ASSIGN_STORE);
    574a:	68bb      	ldr	r3, [r7, #8]
    574c:	689b      	ldr	r3, [r3, #8]
    574e:	2200      	movs	r2, #0
    5750:	4619      	mov	r1, r3
    5752:	68f8      	ldr	r0, [r7, #12]
    5754:	f000 f832 	bl	57bc <c_assign>
    5758:	e004      	b.n	5764 <c_assign_tuple+0x118>
        } else {
            c_assign(comp, node_head, ASSIGN_STORE);
    575a:	2200      	movs	r2, #0
    575c:	68b9      	ldr	r1, [r7, #8]
    575e:	68f8      	ldr	r0, [r7, #12]
    5760:	f000 f82c 	bl	57bc <c_assign>
        }
    }
    for (uint i = 0; i < num_tail; i++) {
    5764:	2300      	movs	r3, #0
    5766:	617b      	str	r3, [r7, #20]
    5768:	e01e      	b.n	57a8 <c_assign_tuple+0x15c>
        if (num_head + i == have_star_index) {
    576a:	693a      	ldr	r2, [r7, #16]
    576c:	697b      	ldr	r3, [r7, #20]
    576e:	441a      	add	r2, r3
    5770:	69fb      	ldr	r3, [r7, #28]
    5772:	429a      	cmp	r2, r3
    5774:	d10b      	bne.n	578e <c_assign_tuple+0x142>
            c_assign(comp, ((mp_parse_node_struct_t*)nodes_tail[i])->nodes[0], ASSIGN_STORE);
    5776:	697b      	ldr	r3, [r7, #20]
    5778:	009b      	lsls	r3, r3, #2
    577a:	683a      	ldr	r2, [r7, #0]
    577c:	4413      	add	r3, r2
    577e:	681b      	ldr	r3, [r3, #0]
    5780:	689b      	ldr	r3, [r3, #8]
    5782:	2200      	movs	r2, #0
    5784:	4619      	mov	r1, r3
    5786:	68f8      	ldr	r0, [r7, #12]
    5788:	f000 f818 	bl	57bc <c_assign>
    578c:	e009      	b.n	57a2 <c_assign_tuple+0x156>
        } else {
            c_assign(comp, nodes_tail[i], ASSIGN_STORE);
    578e:	697b      	ldr	r3, [r7, #20]
    5790:	009b      	lsls	r3, r3, #2
    5792:	683a      	ldr	r2, [r7, #0]
    5794:	4413      	add	r3, r2
    5796:	681b      	ldr	r3, [r3, #0]
    5798:	2200      	movs	r2, #0
    579a:	4619      	mov	r1, r3
    579c:	68f8      	ldr	r0, [r7, #12]
    579e:	f000 f80d 	bl	57bc <c_assign>
    for (uint i = 0; i < num_tail; i++) {
    57a2:	697b      	ldr	r3, [r7, #20]
    57a4:	3301      	adds	r3, #1
    57a6:	617b      	str	r3, [r7, #20]
    57a8:	697a      	ldr	r2, [r7, #20]
    57aa:	687b      	ldr	r3, [r7, #4]
    57ac:	429a      	cmp	r2, r3
    57ae:	d3dc      	bcc.n	576a <c_assign_tuple+0x11e>
        }
    }
}
    57b0:	3720      	adds	r7, #32
    57b2:	46bd      	mov	sp, r7
    57b4:	bd80      	pop	{r7, pc}
    57b6:	bf00      	nop
    57b8:	00020418 	.word	0x00020418

000057bc <c_assign>:

// assigns top of stack to pn
STATIC void c_assign(compiler_t *comp, mp_parse_node_t pn, assign_kind_t assign_kind) {
    57bc:	b580      	push	{r7, lr}
    57be:	b088      	sub	sp, #32
    57c0:	af00      	add	r7, sp, #0
    57c2:	60f8      	str	r0, [r7, #12]
    57c4:	60b9      	str	r1, [r7, #8]
    57c6:	607a      	str	r2, [r7, #4]
    assert(!MP_PARSE_NODE_IS_NULL(pn));
    57c8:	68bb      	ldr	r3, [r7, #8]
    57ca:	2b00      	cmp	r3, #0
    57cc:	d106      	bne.n	57dc <c_assign+0x20>
    57ce:	4b7a      	ldr	r3, [pc, #488]	; (59b8 <c_assign+0x1fc>)
    57d0:	4a7a      	ldr	r2, [pc, #488]	; (59bc <c_assign+0x200>)
    57d2:	f240 11c5 	movw	r1, #453	; 0x1c5
    57d6:	487a      	ldr	r0, [pc, #488]	; (59c0 <c_assign+0x204>)
    57d8:	f015 ffd4 	bl	1b784 <__assert_func>
    if (MP_PARSE_NODE_IS_LEAF(pn)) {
    57dc:	68bb      	ldr	r3, [r7, #8]
    57de:	f003 0303 	and.w	r3, r3, #3
    57e2:	2b00      	cmp	r3, #0
    57e4:	d018      	beq.n	5818 <c_assign+0x5c>
        if (MP_PARSE_NODE_IS_ID(pn)) {
    57e6:	68bb      	ldr	r3, [r7, #8]
    57e8:	f003 030f 	and.w	r3, r3, #15
    57ec:	2b02      	cmp	r3, #2
    57ee:	f040 80cf 	bne.w	5990 <c_assign+0x1d4>
            qstr arg = MP_PARSE_NODE_LEAF_ARG(pn);
    57f2:	68bb      	ldr	r3, [r7, #8]
    57f4:	091b      	lsrs	r3, r3, #4
    57f6:	613b      	str	r3, [r7, #16]
            switch (assign_kind) {
    57f8:	687b      	ldr	r3, [r7, #4]
    57fa:	2b00      	cmp	r3, #0
    57fc:	d001      	beq.n	5802 <c_assign+0x46>
    57fe:	2b02      	cmp	r3, #2
    5800:	d104      	bne.n	580c <c_assign+0x50>
                case ASSIGN_STORE:
                case ASSIGN_AUG_STORE:
                    compile_store_id(comp, arg);
    5802:	6939      	ldr	r1, [r7, #16]
    5804:	68f8      	ldr	r0, [r7, #12]
    5806:	f7ff fcb5 	bl	5174 <compile_store_id>
                    break;
    580a:	e0c0      	b.n	598e <c_assign+0x1d2>
                case ASSIGN_AUG_LOAD:
                default:
                    compile_load_id(comp, arg);
    580c:	6939      	ldr	r1, [r7, #16]
    580e:	68f8      	ldr	r0, [r7, #12]
    5810:	f7ff fc92 	bl	5138 <compile_load_id>
                    break;
    5814:	bf00      	nop
    5816:	e0ba      	b.n	598e <c_assign+0x1d2>
        } else {
            goto cannot_assign;
        }
    } else {
        // pn must be a struct
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    5818:	68bb      	ldr	r3, [r7, #8]
    581a:	61fb      	str	r3, [r7, #28]
        switch (MP_PARSE_NODE_STRUCT_KIND(pns)) {
    581c:	69fb      	ldr	r3, [r7, #28]
    581e:	685b      	ldr	r3, [r3, #4]
    5820:	b2db      	uxtb	r3, r3
    5822:	2b2a      	cmp	r3, #42	; 0x2a
    5824:	d01f      	beq.n	5866 <c_assign+0xaa>
    5826:	2b2a      	cmp	r3, #42	; 0x2a
    5828:	d804      	bhi.n	5834 <c_assign+0x78>
    582a:	2b06      	cmp	r3, #6
    582c:	d00d      	beq.n	584a <c_assign+0x8e>
    582e:	2b29      	cmp	r3, #41	; 0x29
    5830:	d005      	beq.n	583e <c_assign+0x82>
                    c_assign_tuple(comp, pns->nodes[0], 0, NULL);
                }
                break;

            default:
                goto cannot_assign;
    5832:	e0b8      	b.n	59a6 <c_assign+0x1ea>
        switch (MP_PARSE_NODE_STRUCT_KIND(pns)) {
    5834:	2b2b      	cmp	r3, #43	; 0x2b
    5836:	d039      	beq.n	58ac <c_assign+0xf0>
    5838:	2b90      	cmp	r3, #144	; 0x90
    583a:	d006      	beq.n	584a <c_assign+0x8e>
                goto cannot_assign;
    583c:	e0b3      	b.n	59a6 <c_assign+0x1ea>
                c_assign_atom_expr(comp, pns, assign_kind);
    583e:	687a      	ldr	r2, [r7, #4]
    5840:	69f9      	ldr	r1, [r7, #28]
    5842:	68f8      	ldr	r0, [r7, #12]
    5844:	f7ff fe2a 	bl	549c <c_assign_atom_expr>
                break;
    5848:	e05a      	b.n	5900 <c_assign+0x144>
                if (assign_kind != ASSIGN_STORE) {
    584a:	687b      	ldr	r3, [r7, #4]
    584c:	2b00      	cmp	r3, #0
    584e:	f040 80a1 	bne.w	5994 <c_assign+0x1d8>
                c_assign_tuple(comp, MP_PARSE_NODE_NULL, MP_PARSE_NODE_STRUCT_NUM_NODES(pns), pns->nodes);
    5852:	69fb      	ldr	r3, [r7, #28]
    5854:	685b      	ldr	r3, [r3, #4]
    5856:	0a1a      	lsrs	r2, r3, #8
    5858:	69fb      	ldr	r3, [r7, #28]
    585a:	3308      	adds	r3, #8
    585c:	2100      	movs	r1, #0
    585e:	68f8      	ldr	r0, [r7, #12]
    5860:	f7ff fef4 	bl	564c <c_assign_tuple>
                break;
    5864:	e04c      	b.n	5900 <c_assign+0x144>
                if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    5866:	69fb      	ldr	r3, [r7, #28]
    5868:	689b      	ldr	r3, [r3, #8]
    586a:	2b00      	cmp	r3, #0
    586c:	f000 8094 	beq.w	5998 <c_assign+0x1dc>
                    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    5870:	69fb      	ldr	r3, [r7, #28]
    5872:	689b      	ldr	r3, [r3, #8]
    5874:	2b00      	cmp	r3, #0
    5876:	d00b      	beq.n	5890 <c_assign+0xd4>
    5878:	69fb      	ldr	r3, [r7, #28]
    587a:	689b      	ldr	r3, [r3, #8]
    587c:	f003 0303 	and.w	r3, r3, #3
    5880:	2b00      	cmp	r3, #0
    5882:	d105      	bne.n	5890 <c_assign+0xd4>
    5884:	69fb      	ldr	r3, [r7, #28]
    5886:	689b      	ldr	r3, [r3, #8]
    5888:	685b      	ldr	r3, [r3, #4]
    588a:	b2db      	uxtb	r3, r3
    588c:	2b8a      	cmp	r3, #138	; 0x8a
    588e:	d006      	beq.n	589e <c_assign+0xe2>
    5890:	4b4c      	ldr	r3, [pc, #304]	; (59c4 <c_assign+0x208>)
    5892:	4a4a      	ldr	r2, [pc, #296]	; (59bc <c_assign+0x200>)
    5894:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
    5898:	4849      	ldr	r0, [pc, #292]	; (59c0 <c_assign+0x204>)
    589a:	f015 ff73 	bl	1b784 <__assert_func>
                    if (assign_kind != ASSIGN_STORE) {
    589e:	687b      	ldr	r3, [r7, #4]
    58a0:	2b00      	cmp	r3, #0
    58a2:	d17b      	bne.n	599c <c_assign+0x1e0>
                    pns = (mp_parse_node_struct_t*)pns->nodes[0];
    58a4:	69fb      	ldr	r3, [r7, #28]
    58a6:	689b      	ldr	r3, [r3, #8]
    58a8:	61fb      	str	r3, [r7, #28]
                    goto testlist_comp;
    58aa:	e02a      	b.n	5902 <c_assign+0x146>
                if (assign_kind != ASSIGN_STORE) {
    58ac:	687b      	ldr	r3, [r7, #4]
    58ae:	2b00      	cmp	r3, #0
    58b0:	d176      	bne.n	59a0 <c_assign+0x1e4>
                if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    58b2:	69fb      	ldr	r3, [r7, #28]
    58b4:	689b      	ldr	r3, [r3, #8]
    58b6:	2b00      	cmp	r3, #0
    58b8:	d106      	bne.n	58c8 <c_assign+0x10c>
                    c_assign_tuple(comp, MP_PARSE_NODE_NULL, 0, NULL);
    58ba:	2300      	movs	r3, #0
    58bc:	2200      	movs	r2, #0
    58be:	2100      	movs	r1, #0
    58c0:	68f8      	ldr	r0, [r7, #12]
    58c2:	f7ff fec3 	bl	564c <c_assign_tuple>
                break;
    58c6:	e01a      	b.n	58fe <c_assign+0x142>
                } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    58c8:	69fb      	ldr	r3, [r7, #28]
    58ca:	689b      	ldr	r3, [r3, #8]
    58cc:	2b00      	cmp	r3, #0
    58ce:	d00f      	beq.n	58f0 <c_assign+0x134>
    58d0:	69fb      	ldr	r3, [r7, #28]
    58d2:	689b      	ldr	r3, [r3, #8]
    58d4:	f003 0303 	and.w	r3, r3, #3
    58d8:	2b00      	cmp	r3, #0
    58da:	d109      	bne.n	58f0 <c_assign+0x134>
    58dc:	69fb      	ldr	r3, [r7, #28]
    58de:	689b      	ldr	r3, [r3, #8]
    58e0:	685b      	ldr	r3, [r3, #4]
    58e2:	b2db      	uxtb	r3, r3
    58e4:	2b8a      	cmp	r3, #138	; 0x8a
    58e6:	d103      	bne.n	58f0 <c_assign+0x134>
                    pns = (mp_parse_node_struct_t*)pns->nodes[0];
    58e8:	69fb      	ldr	r3, [r7, #28]
    58ea:	689b      	ldr	r3, [r3, #8]
    58ec:	61fb      	str	r3, [r7, #28]
                    goto testlist_comp;
    58ee:	e008      	b.n	5902 <c_assign+0x146>
                    c_assign_tuple(comp, pns->nodes[0], 0, NULL);
    58f0:	69fb      	ldr	r3, [r7, #28]
    58f2:	6899      	ldr	r1, [r3, #8]
    58f4:	2300      	movs	r3, #0
    58f6:	2200      	movs	r2, #0
    58f8:	68f8      	ldr	r0, [r7, #12]
    58fa:	f7ff fea7 	bl	564c <c_assign_tuple>
                break;
    58fe:	bf00      	nop
        }
        return;
    5900:	e056      	b.n	59b0 <c_assign+0x1f4>

        testlist_comp:
        // lhs is a sequence
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    5902:	69fb      	ldr	r3, [r7, #28]
    5904:	68db      	ldr	r3, [r3, #12]
    5906:	2b00      	cmp	r3, #0
    5908:	d038      	beq.n	597c <c_assign+0x1c0>
    590a:	69fb      	ldr	r3, [r7, #28]
    590c:	68db      	ldr	r3, [r3, #12]
    590e:	f003 0303 	and.w	r3, r3, #3
    5912:	2b00      	cmp	r3, #0
    5914:	d132      	bne.n	597c <c_assign+0x1c0>
            mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[1];
    5916:	69fb      	ldr	r3, [r7, #28]
    5918:	68db      	ldr	r3, [r3, #12]
    591a:	61bb      	str	r3, [r7, #24]
            if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3b) {
    591c:	69bb      	ldr	r3, [r7, #24]
    591e:	685b      	ldr	r3, [r3, #4]
    5920:	b2db      	uxtb	r3, r3
    5922:	2b8d      	cmp	r3, #141	; 0x8d
    5924:	d112      	bne.n	594c <c_assign+0x190>
                // sequence of one item, with trailing comma
                assert(MP_PARSE_NODE_IS_NULL(pns2->nodes[0]));
    5926:	69bb      	ldr	r3, [r7, #24]
    5928:	689b      	ldr	r3, [r3, #8]
    592a:	2b00      	cmp	r3, #0
    592c:	d006      	beq.n	593c <c_assign+0x180>
    592e:	4b26      	ldr	r3, [pc, #152]	; (59c8 <c_assign+0x20c>)
    5930:	4a22      	ldr	r2, [pc, #136]	; (59bc <c_assign+0x200>)
    5932:	f240 2113 	movw	r1, #531	; 0x213
    5936:	4822      	ldr	r0, [pc, #136]	; (59c0 <c_assign+0x204>)
    5938:	f015 ff24 	bl	1b784 <__assert_func>
                c_assign_tuple(comp, pns->nodes[0], 0, NULL);
    593c:	69fb      	ldr	r3, [r7, #28]
    593e:	6899      	ldr	r1, [r3, #8]
    5940:	2300      	movs	r3, #0
    5942:	2200      	movs	r2, #0
    5944:	68f8      	ldr	r0, [r7, #12]
    5946:	f7ff fe81 	bl	564c <c_assign_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    594a:	e01f      	b.n	598c <c_assign+0x1d0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3c) {
    594c:	69bb      	ldr	r3, [r7, #24]
    594e:	685b      	ldr	r3, [r3, #4]
    5950:	b2db      	uxtb	r3, r3
    5952:	2b8e      	cmp	r3, #142	; 0x8e
    5954:	d10c      	bne.n	5970 <c_assign+0x1b4>
                // sequence of many items
                uint n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns2);
    5956:	69bb      	ldr	r3, [r7, #24]
    5958:	685b      	ldr	r3, [r3, #4]
    595a:	0a1b      	lsrs	r3, r3, #8
    595c:	617b      	str	r3, [r7, #20]
                c_assign_tuple(comp, pns->nodes[0], n, pns2->nodes);
    595e:	69fb      	ldr	r3, [r7, #28]
    5960:	6899      	ldr	r1, [r3, #8]
    5962:	69bb      	ldr	r3, [r7, #24]
    5964:	3308      	adds	r3, #8
    5966:	697a      	ldr	r2, [r7, #20]
    5968:	68f8      	ldr	r0, [r7, #12]
    596a:	f7ff fe6f 	bl	564c <c_assign_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    596e:	e00d      	b.n	598c <c_assign+0x1d0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_comp_for) {
    5970:	69bb      	ldr	r3, [r7, #24]
    5972:	685b      	ldr	r3, [r3, #4]
    5974:	b2db      	uxtb	r3, r3
    5976:	2b9f      	cmp	r3, #159	; 0x9f
    5978:	d014      	beq.n	59a4 <c_assign+0x1e8>
                goto cannot_assign;
            } else {
                // sequence with 2 items
                goto sequence_with_2_items;
    597a:	bf00      	nop
            }
        } else {
            // sequence with 2 items
            sequence_with_2_items:
            c_assign_tuple(comp, MP_PARSE_NODE_NULL, 2, pns->nodes);
    597c:	69fb      	ldr	r3, [r7, #28]
    597e:	3308      	adds	r3, #8
    5980:	2202      	movs	r2, #2
    5982:	2100      	movs	r1, #0
    5984:	68f8      	ldr	r0, [r7, #12]
    5986:	f7ff fe61 	bl	564c <c_assign_tuple>
        }
        return;
    598a:	e011      	b.n	59b0 <c_assign+0x1f4>
    598c:	e010      	b.n	59b0 <c_assign+0x1f4>
    }
    return;
    598e:	e00f      	b.n	59b0 <c_assign+0x1f4>
            goto cannot_assign;
    5990:	bf00      	nop
    5992:	e008      	b.n	59a6 <c_assign+0x1ea>
                    goto cannot_assign;
    5994:	bf00      	nop
    5996:	e006      	b.n	59a6 <c_assign+0x1ea>
                    goto cannot_assign;
    5998:	bf00      	nop
    599a:	e004      	b.n	59a6 <c_assign+0x1ea>
                        goto cannot_assign;
    599c:	bf00      	nop
    599e:	e002      	b.n	59a6 <c_assign+0x1ea>
                    goto cannot_assign;
    59a0:	bf00      	nop
    59a2:	e000      	b.n	59a6 <c_assign+0x1ea>
                goto cannot_assign;
    59a4:	bf00      	nop

    cannot_assign:
    compile_syntax_error(comp, pn, "can't assign to expression");
    59a6:	4a09      	ldr	r2, [pc, #36]	; (59cc <c_assign+0x210>)
    59a8:	68b9      	ldr	r1, [r7, #8]
    59aa:	68f8      	ldr	r0, [r7, #12]
    59ac:	f7ff fab4 	bl	4f18 <compile_syntax_error>
}
    59b0:	3720      	adds	r7, #32
    59b2:	46bd      	mov	sp, r7
    59b4:	bd80      	pop	{r7, pc}
    59b6:	bf00      	nop
    59b8:	00020434 	.word	0x00020434
    59bc:	00020f04 	.word	0x00020f04
    59c0:	00020358 	.word	0x00020358
    59c4:	0002036c 	.word	0x0002036c
    59c8:	00020450 	.word	0x00020450
    59cc:	000203fc 	.word	0x000203fc

000059d0 <close_over_variables_etc>:

// stuff for lambda and comprehensions and generators:
//  if n_pos_defaults > 0 then there is a tuple on the stack with the positional defaults
//  if n_kw_defaults > 0 then there is a dictionary on the stack with the keyword defaults
//  if both exist, the tuple is above the dictionary (ie the first pop gets the tuple)
STATIC void close_over_variables_etc(compiler_t *comp, scope_t *this_scope, int n_pos_defaults, int n_kw_defaults) {
    59d0:	b580      	push	{r7, lr}
    59d2:	b08c      	sub	sp, #48	; 0x30
    59d4:	af02      	add	r7, sp, #8
    59d6:	60f8      	str	r0, [r7, #12]
    59d8:	60b9      	str	r1, [r7, #8]
    59da:	607a      	str	r2, [r7, #4]
    59dc:	603b      	str	r3, [r7, #0]
    assert(n_pos_defaults >= 0);
    59de:	687b      	ldr	r3, [r7, #4]
    59e0:	2b00      	cmp	r3, #0
    59e2:	da06      	bge.n	59f2 <close_over_variables_etc+0x22>
    59e4:	4b41      	ldr	r3, [pc, #260]	; (5aec <close_over_variables_etc+0x11c>)
    59e6:	4a42      	ldr	r2, [pc, #264]	; (5af0 <close_over_variables_etc+0x120>)
    59e8:	f240 2131 	movw	r1, #561	; 0x231
    59ec:	4841      	ldr	r0, [pc, #260]	; (5af4 <close_over_variables_etc+0x124>)
    59ee:	f015 fec9 	bl	1b784 <__assert_func>
    assert(n_kw_defaults >= 0);
    59f2:	683b      	ldr	r3, [r7, #0]
    59f4:	2b00      	cmp	r3, #0
    59f6:	da06      	bge.n	5a06 <close_over_variables_etc+0x36>
    59f8:	4b3f      	ldr	r3, [pc, #252]	; (5af8 <close_over_variables_etc+0x128>)
    59fa:	4a3d      	ldr	r2, [pc, #244]	; (5af0 <close_over_variables_etc+0x120>)
    59fc:	f240 2132 	movw	r1, #562	; 0x232
    5a00:	483c      	ldr	r0, [pc, #240]	; (5af4 <close_over_variables_etc+0x124>)
    5a02:	f015 febf 	bl	1b784 <__assert_func>

    // set flags
    if (n_kw_defaults > 0) {
    5a06:	683b      	ldr	r3, [r7, #0]
    5a08:	2b00      	cmp	r3, #0
    5a0a:	dd06      	ble.n	5a1a <close_over_variables_etc+0x4a>
        this_scope->scope_flags |= MP_SCOPE_FLAG_DEFKWARGS;
    5a0c:	68bb      	ldr	r3, [r7, #8]
    5a0e:	8b1b      	ldrh	r3, [r3, #24]
    5a10:	f043 0308 	orr.w	r3, r3, #8
    5a14:	b29a      	uxth	r2, r3
    5a16:	68bb      	ldr	r3, [r7, #8]
    5a18:	831a      	strh	r2, [r3, #24]
    }
    this_scope->num_def_pos_args = n_pos_defaults;
    5a1a:	687b      	ldr	r3, [r7, #4]
    5a1c:	b29a      	uxth	r2, r3
    5a1e:	68bb      	ldr	r3, [r7, #8]
    5a20:	841a      	strh	r2, [r3, #32]
    comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_REFGLOBALS | MP_SCOPE_FLAG_HASCONSTS;
    #endif

    // make closed over variables, if any
    // ensure they are closed over in the order defined in the outer scope (mainly to agree with CPython)
    int nfree = 0;
    5a22:	2300      	movs	r3, #0
    5a24:	627b      	str	r3, [r7, #36]	; 0x24
    if (comp->scope_cur->kind != SCOPE_MODULE) {
    5a26:	68fb      	ldr	r3, [r7, #12]
    5a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5a2a:	681b      	ldr	r3, [r3, #0]
    5a2c:	2b00      	cmp	r3, #0
    5a2e:	d044      	beq.n	5aba <close_over_variables_etc+0xea>
        for (int i = 0; i < comp->scope_cur->id_info_len; i++) {
    5a30:	2300      	movs	r3, #0
    5a32:	623b      	str	r3, [r7, #32]
    5a34:	e03a      	b.n	5aac <close_over_variables_etc+0xdc>
            id_info_t *id = &comp->scope_cur->id_info[i];
    5a36:	68fb      	ldr	r3, [r7, #12]
    5a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a3c:	6a3b      	ldr	r3, [r7, #32]
    5a3e:	00db      	lsls	r3, r3, #3
    5a40:	4413      	add	r3, r2
    5a42:	61bb      	str	r3, [r7, #24]
            if (id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE) {
    5a44:	69bb      	ldr	r3, [r7, #24]
    5a46:	781b      	ldrb	r3, [r3, #0]
    5a48:	2b04      	cmp	r3, #4
    5a4a:	d003      	beq.n	5a54 <close_over_variables_etc+0x84>
    5a4c:	69bb      	ldr	r3, [r7, #24]
    5a4e:	781b      	ldrb	r3, [r3, #0]
    5a50:	2b05      	cmp	r3, #5
    5a52:	d128      	bne.n	5aa6 <close_over_variables_etc+0xd6>
                for (int j = 0; j < this_scope->id_info_len; j++) {
    5a54:	2300      	movs	r3, #0
    5a56:	61fb      	str	r3, [r7, #28]
    5a58:	e01f      	b.n	5a9a <close_over_variables_etc+0xca>
                    id_info_t *id2 = &this_scope->id_info[j];
    5a5a:	68bb      	ldr	r3, [r7, #8]
    5a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a5e:	69fb      	ldr	r3, [r7, #28]
    5a60:	00db      	lsls	r3, r3, #3
    5a62:	4413      	add	r3, r2
    5a64:	617b      	str	r3, [r7, #20]
                    if (id2->kind == ID_INFO_KIND_FREE && id->qst == id2->qst) {
    5a66:	697b      	ldr	r3, [r7, #20]
    5a68:	781b      	ldrb	r3, [r3, #0]
    5a6a:	2b05      	cmp	r3, #5
    5a6c:	d112      	bne.n	5a94 <close_over_variables_etc+0xc4>
    5a6e:	69bb      	ldr	r3, [r7, #24]
    5a70:	685a      	ldr	r2, [r3, #4]
    5a72:	697b      	ldr	r3, [r7, #20]
    5a74:	685b      	ldr	r3, [r3, #4]
    5a76:	429a      	cmp	r2, r3
    5a78:	d10c      	bne.n	5a94 <close_over_variables_etc+0xc4>
                        // in MicroPython we load closures using LOAD_FAST
                        EMIT_LOAD_FAST(id->qst, id->local_num);
    5a7a:	68fb      	ldr	r3, [r7, #12]
    5a7c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5a7e:	69bb      	ldr	r3, [r7, #24]
    5a80:	6859      	ldr	r1, [r3, #4]
    5a82:	69bb      	ldr	r3, [r7, #24]
    5a84:	885b      	ldrh	r3, [r3, #2]
    5a86:	461a      	mov	r2, r3
    5a88:	2300      	movs	r3, #0
    5a8a:	f004 fd0d 	bl	a4a8 <mp_emit_bc_load_local>
                        nfree += 1;
    5a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a90:	3301      	adds	r3, #1
    5a92:	627b      	str	r3, [r7, #36]	; 0x24
                for (int j = 0; j < this_scope->id_info_len; j++) {
    5a94:	69fb      	ldr	r3, [r7, #28]
    5a96:	3301      	adds	r3, #1
    5a98:	61fb      	str	r3, [r7, #28]
    5a9a:	68bb      	ldr	r3, [r7, #8]
    5a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    5a9e:	461a      	mov	r2, r3
    5aa0:	69fb      	ldr	r3, [r7, #28]
    5aa2:	429a      	cmp	r2, r3
    5aa4:	dcd9      	bgt.n	5a5a <close_over_variables_etc+0x8a>
        for (int i = 0; i < comp->scope_cur->id_info_len; i++) {
    5aa6:	6a3b      	ldr	r3, [r7, #32]
    5aa8:	3301      	adds	r3, #1
    5aaa:	623b      	str	r3, [r7, #32]
    5aac:	68fb      	ldr	r3, [r7, #12]
    5aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    5ab2:	461a      	mov	r2, r3
    5ab4:	6a3b      	ldr	r3, [r7, #32]
    5ab6:	429a      	cmp	r2, r3
    5ab8:	dcbd      	bgt.n	5a36 <close_over_variables_etc+0x66>
            }
        }
    }

    // make the function/closure
    if (nfree == 0) {
    5aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5abc:	2b00      	cmp	r3, #0
    5abe:	d107      	bne.n	5ad0 <close_over_variables_etc+0x100>
        EMIT_ARG(make_function, this_scope, n_pos_defaults, n_kw_defaults);
    5ac0:	68fb      	ldr	r3, [r7, #12]
    5ac2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5ac4:	687a      	ldr	r2, [r7, #4]
    5ac6:	683b      	ldr	r3, [r7, #0]
    5ac8:	68b9      	ldr	r1, [r7, #8]
    5aca:	f005 f885 	bl	abd8 <mp_emit_bc_make_function>
    } else {
        EMIT_ARG(make_closure, this_scope, nfree, n_pos_defaults, n_kw_defaults);
    }
}
    5ace:	e009      	b.n	5ae4 <close_over_variables_etc+0x114>
        EMIT_ARG(make_closure, this_scope, nfree, n_pos_defaults, n_kw_defaults);
    5ad0:	68fb      	ldr	r3, [r7, #12]
    5ad2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5ad6:	6879      	ldr	r1, [r7, #4]
    5ad8:	683b      	ldr	r3, [r7, #0]
    5ada:	9300      	str	r3, [sp, #0]
    5adc:	460b      	mov	r3, r1
    5ade:	68b9      	ldr	r1, [r7, #8]
    5ae0:	f005 f8a4 	bl	ac2c <mp_emit_bc_make_closure>
}
    5ae4:	bf00      	nop
    5ae6:	3728      	adds	r7, #40	; 0x28
    5ae8:	46bd      	mov	sp, r7
    5aea:	bd80      	pop	{r7, pc}
    5aec:	00020478 	.word	0x00020478
    5af0:	00020f10 	.word	0x00020f10
    5af4:	00020358 	.word	0x00020358
    5af8:	0002048c 	.word	0x0002048c

00005afc <compile_funcdef_lambdef_param>:

STATIC void compile_funcdef_lambdef_param(compiler_t *comp, mp_parse_node_t pn) {
    5afc:	b580      	push	{r7, lr}
    5afe:	b088      	sub	sp, #32
    5b00:	af00      	add	r7, sp, #0
    5b02:	6078      	str	r0, [r7, #4]
    5b04:	6039      	str	r1, [r7, #0]
    // For efficiency of the code below we extract the parse-node kind here
    int pn_kind;
    if (MP_PARSE_NODE_IS_ID(pn)) {
    5b06:	683b      	ldr	r3, [r7, #0]
    5b08:	f003 030f 	and.w	r3, r3, #15
    5b0c:	2b02      	cmp	r3, #2
    5b0e:	d103      	bne.n	5b18 <compile_funcdef_lambdef_param+0x1c>
        pn_kind = -1;
    5b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5b14:	61fb      	str	r3, [r7, #28]
    5b16:	e012      	b.n	5b3e <compile_funcdef_lambdef_param+0x42>
    } else {
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    5b18:	683b      	ldr	r3, [r7, #0]
    5b1a:	2b00      	cmp	r3, #0
    5b1c:	d004      	beq.n	5b28 <compile_funcdef_lambdef_param+0x2c>
    5b1e:	683b      	ldr	r3, [r7, #0]
    5b20:	f003 0303 	and.w	r3, r3, #3
    5b24:	2b00      	cmp	r3, #0
    5b26:	d006      	beq.n	5b36 <compile_funcdef_lambdef_param+0x3a>
    5b28:	4b4c      	ldr	r3, [pc, #304]	; (5c5c <compile_funcdef_lambdef_param+0x160>)
    5b2a:	4a4d      	ldr	r2, [pc, #308]	; (5c60 <compile_funcdef_lambdef_param+0x164>)
    5b2c:	f44f 7118 	mov.w	r1, #608	; 0x260
    5b30:	484c      	ldr	r0, [pc, #304]	; (5c64 <compile_funcdef_lambdef_param+0x168>)
    5b32:	f015 fe27 	bl	1b784 <__assert_func>
        pn_kind = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn);
    5b36:	683b      	ldr	r3, [r7, #0]
    5b38:	685b      	ldr	r3, [r3, #4]
    5b3a:	b2db      	uxtb	r3, r3
    5b3c:	61fb      	str	r3, [r7, #28]
    }

    if (pn_kind == PN_typedargslist_star || pn_kind == PN_varargslist_star) {
    5b3e:	69fb      	ldr	r3, [r7, #28]
    5b40:	2b41      	cmp	r3, #65	; 0x41
    5b42:	d002      	beq.n	5b4a <compile_funcdef_lambdef_param+0x4e>
    5b44:	69fb      	ldr	r3, [r7, #28]
    5b46:	2b49      	cmp	r3, #73	; 0x49
    5b48:	d103      	bne.n	5b52 <compile_funcdef_lambdef_param+0x56>
        comp->have_star = true;
    5b4a:	687b      	ldr	r3, [r7, #4]
    5b4c:	2201      	movs	r2, #1
    5b4e:	719a      	strb	r2, [r3, #6]
    5b50:	e080      	b.n	5c54 <compile_funcdef_lambdef_param+0x158>
        } else {
            // named star
        }
        */

    } else if (pn_kind == PN_typedargslist_dbl_star || pn_kind == PN_varargslist_dbl_star) {
    5b52:	69fb      	ldr	r3, [r7, #28]
    5b54:	2b42      	cmp	r3, #66	; 0x42
    5b56:	d07d      	beq.n	5c54 <compile_funcdef_lambdef_param+0x158>
    5b58:	69fb      	ldr	r3, [r7, #28]
    5b5a:	2b4a      	cmp	r3, #74	; 0x4a
    5b5c:	d07a      	beq.n	5c54 <compile_funcdef_lambdef_param+0x158>
        // TODO do we need to do anything with this?

    } else {
        mp_parse_node_t pn_id;
        mp_parse_node_t pn_equal;
        if (pn_kind == -1) {
    5b5e:	69fb      	ldr	r3, [r7, #28]
    5b60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5b64:	d104      	bne.n	5b70 <compile_funcdef_lambdef_param+0x74>
            // this parameter is just an id

            pn_id = pn;
    5b66:	683b      	ldr	r3, [r7, #0]
    5b68:	61bb      	str	r3, [r7, #24]
            pn_equal = MP_PARSE_NODE_NULL;
    5b6a:	2300      	movs	r3, #0
    5b6c:	617b      	str	r3, [r7, #20]
    5b6e:	e01d      	b.n	5bac <compile_funcdef_lambdef_param+0xb0>

        } else if (pn_kind == PN_typedargslist_name) {
    5b70:	69fb      	ldr	r3, [r7, #28]
    5b72:	2b40      	cmp	r3, #64	; 0x40
    5b74:	d108      	bne.n	5b88 <compile_funcdef_lambdef_param+0x8c>
            // this parameter has a colon and/or equal specifier

            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    5b76:	683b      	ldr	r3, [r7, #0]
    5b78:	613b      	str	r3, [r7, #16]
            pn_id = pns->nodes[0];
    5b7a:	693b      	ldr	r3, [r7, #16]
    5b7c:	689b      	ldr	r3, [r3, #8]
    5b7e:	61bb      	str	r3, [r7, #24]
            //pn_colon = pns->nodes[1]; // unused
            pn_equal = pns->nodes[2];
    5b80:	693b      	ldr	r3, [r7, #16]
    5b82:	691b      	ldr	r3, [r3, #16]
    5b84:	617b      	str	r3, [r7, #20]
    5b86:	e011      	b.n	5bac <compile_funcdef_lambdef_param+0xb0>

        } else {
            assert(pn_kind == PN_varargslist_name); // should be
    5b88:	69fb      	ldr	r3, [r7, #28]
    5b8a:	2b48      	cmp	r3, #72	; 0x48
    5b8c:	d006      	beq.n	5b9c <compile_funcdef_lambdef_param+0xa0>
    5b8e:	4b36      	ldr	r3, [pc, #216]	; (5c68 <compile_funcdef_lambdef_param+0x16c>)
    5b90:	4a33      	ldr	r2, [pc, #204]	; (5c60 <compile_funcdef_lambdef_param+0x164>)
    5b92:	f240 2185 	movw	r1, #645	; 0x285
    5b96:	4833      	ldr	r0, [pc, #204]	; (5c64 <compile_funcdef_lambdef_param+0x168>)
    5b98:	f015 fdf4 	bl	1b784 <__assert_func>
            // this parameter has an equal specifier

            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    5b9c:	683b      	ldr	r3, [r7, #0]
    5b9e:	60fb      	str	r3, [r7, #12]
            pn_id = pns->nodes[0];
    5ba0:	68fb      	ldr	r3, [r7, #12]
    5ba2:	689b      	ldr	r3, [r3, #8]
    5ba4:	61bb      	str	r3, [r7, #24]
            pn_equal = pns->nodes[1];
    5ba6:	68fb      	ldr	r3, [r7, #12]
    5ba8:	68db      	ldr	r3, [r3, #12]
    5baa:	617b      	str	r3, [r7, #20]
        }

        if (MP_PARSE_NODE_IS_NULL(pn_equal)) {
    5bac:	697b      	ldr	r3, [r7, #20]
    5bae:	2b00      	cmp	r3, #0
    5bb0:	d10d      	bne.n	5bce <compile_funcdef_lambdef_param+0xd2>
            // this parameter does not have a default value

            // check for non-default parameters given after default parameters (allowed by parser, but not syntactically valid)
            if (!comp->have_star && comp->num_default_params != 0) {
    5bb2:	687b      	ldr	r3, [r7, #4]
    5bb4:	799b      	ldrb	r3, [r3, #6]
    5bb6:	2b00      	cmp	r3, #0
    5bb8:	d14c      	bne.n	5c54 <compile_funcdef_lambdef_param+0x158>
    5bba:	687b      	ldr	r3, [r7, #4]
    5bbc:	8adb      	ldrh	r3, [r3, #22]
    5bbe:	2b00      	cmp	r3, #0
    5bc0:	d048      	beq.n	5c54 <compile_funcdef_lambdef_param+0x158>
                compile_syntax_error(comp, pn, "non-default argument follows default argument");
    5bc2:	4a2a      	ldr	r2, [pc, #168]	; (5c6c <compile_funcdef_lambdef_param+0x170>)
    5bc4:	6839      	ldr	r1, [r7, #0]
    5bc6:	6878      	ldr	r0, [r7, #4]
    5bc8:	f7ff f9a6 	bl	4f18 <compile_syntax_error>
                return;
    5bcc:	e042      	b.n	5c54 <compile_funcdef_lambdef_param+0x158>

        } else {
            // this parameter has a default value
            // in CPython, None (and True, False?) as default parameters are loaded with LOAD_NAME; don't understandy why

            if (comp->have_star) {
    5bce:	687b      	ldr	r3, [r7, #4]
    5bd0:	799b      	ldrb	r3, [r3, #6]
    5bd2:	2b00      	cmp	r3, #0
    5bd4:	d034      	beq.n	5c40 <compile_funcdef_lambdef_param+0x144>
                comp->num_dict_params += 1;
    5bd6:	687b      	ldr	r3, [r7, #4]
    5bd8:	8a9b      	ldrh	r3, [r3, #20]
    5bda:	3301      	adds	r3, #1
    5bdc:	b29a      	uxth	r2, r3
    5bde:	687b      	ldr	r3, [r7, #4]
    5be0:	829a      	strh	r2, [r3, #20]
                // in MicroPython we put the default dict parameters into a dictionary using the bytecode
                if (comp->num_dict_params == 1) {
    5be2:	687b      	ldr	r3, [r7, #4]
    5be4:	8a9b      	ldrh	r3, [r3, #20]
    5be6:	2b01      	cmp	r3, #1
    5be8:	d118      	bne.n	5c1c <compile_funcdef_lambdef_param+0x120>
                    // in MicroPython we put the default positional parameters into a tuple using the bytecode
                    // we need to do this here before we start building the map for the default keywords
                    if (comp->num_default_params > 0) {
    5bea:	687b      	ldr	r3, [r7, #4]
    5bec:	8adb      	ldrh	r3, [r3, #22]
    5bee:	2b00      	cmp	r3, #0
    5bf0:	d008      	beq.n	5c04 <compile_funcdef_lambdef_param+0x108>
                        EMIT_ARG(build, comp->num_default_params, MP_EMIT_BUILD_TUPLE);
    5bf2:	687b      	ldr	r3, [r7, #4]
    5bf4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5bf6:	687b      	ldr	r3, [r7, #4]
    5bf8:	8adb      	ldrh	r3, [r3, #22]
    5bfa:	2200      	movs	r2, #0
    5bfc:	4619      	mov	r1, r3
    5bfe:	f004 ff61 	bl	aac4 <mp_emit_bc_build>
    5c02:	e004      	b.n	5c0e <compile_funcdef_lambdef_param+0x112>
                    } else {
                        EMIT(load_null); // sentinel indicating empty default positional args
    5c04:	687b      	ldr	r3, [r7, #4]
    5c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c08:	4618      	mov	r0, r3
    5c0a:	f004 fc3d 	bl	a488 <mp_emit_bc_load_null>
                    }
                    // first default dict param, so make the map
                    EMIT_ARG(build, 0, MP_EMIT_BUILD_MAP);
    5c0e:	687b      	ldr	r3, [r7, #4]
    5c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c12:	2203      	movs	r2, #3
    5c14:	2100      	movs	r1, #0
    5c16:	4618      	mov	r0, r3
    5c18:	f004 ff54 	bl	aac4 <mp_emit_bc_build>
                }

                // compile value then key, then store it to the dict
                compile_node(comp, pn_equal);
    5c1c:	6979      	ldr	r1, [r7, #20]
    5c1e:	6878      	ldr	r0, [r7, #4]
    5c20:	f002 ff60 	bl	8ae4 <compile_node>
                EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pn_id));
    5c24:	687b      	ldr	r3, [r7, #4]
    5c26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5c28:	69bb      	ldr	r3, [r7, #24]
    5c2a:	091b      	lsrs	r3, r3, #4
    5c2c:	4619      	mov	r1, r3
    5c2e:	4610      	mov	r0, r2
    5c30:	f004 fc06 	bl	a440 <mp_emit_bc_load_const_str>
                EMIT(store_map);
    5c34:	687b      	ldr	r3, [r7, #4]
    5c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c38:	4618      	mov	r0, r3
    5c3a:	f004 ff65 	bl	ab08 <mp_emit_bc_store_map>
    5c3e:	e009      	b.n	5c54 <compile_funcdef_lambdef_param+0x158>
            } else {
                comp->num_default_params += 1;
    5c40:	687b      	ldr	r3, [r7, #4]
    5c42:	8adb      	ldrh	r3, [r3, #22]
    5c44:	3301      	adds	r3, #1
    5c46:	b29a      	uxth	r2, r3
    5c48:	687b      	ldr	r3, [r7, #4]
    5c4a:	82da      	strh	r2, [r3, #22]
                compile_node(comp, pn_equal);
    5c4c:	6979      	ldr	r1, [r7, #20]
    5c4e:	6878      	ldr	r0, [r7, #4]
    5c50:	f002 ff48 	bl	8ae4 <compile_node>
            }
        }
    }
}
    5c54:	3720      	adds	r7, #32
    5c56:	46bd      	mov	sp, r7
    5c58:	bd80      	pop	{r7, pc}
    5c5a:	bf00      	nop
    5c5c:	000204a0 	.word	0x000204a0
    5c60:	00020f2c 	.word	0x00020f2c
    5c64:	00020358 	.word	0x00020358
    5c68:	000204bc 	.word	0x000204bc
    5c6c:	000204dc 	.word	0x000204dc

00005c70 <compile_funcdef_lambdef>:

STATIC void compile_funcdef_lambdef(compiler_t *comp, scope_t *scope, mp_parse_node_t pn_params, pn_kind_t pn_list_kind) {
    5c70:	b580      	push	{r7, lr}
    5c72:	b086      	sub	sp, #24
    5c74:	af00      	add	r7, sp, #0
    5c76:	60f8      	str	r0, [r7, #12]
    5c78:	60b9      	str	r1, [r7, #8]
    5c7a:	607a      	str	r2, [r7, #4]
    5c7c:	603b      	str	r3, [r7, #0]
    // When we call compile_funcdef_lambdef_param below it can compile an arbitrary
    // expression for default arguments, which may contain a lambda.  The lambda will
    // call here in a nested way, so we must save and restore the relevant state.
    bool orig_have_star = comp->have_star;
    5c7e:	68fb      	ldr	r3, [r7, #12]
    5c80:	799b      	ldrb	r3, [r3, #6]
    5c82:	2b00      	cmp	r3, #0
    5c84:	bf14      	ite	ne
    5c86:	2301      	movne	r3, #1
    5c88:	2300      	moveq	r3, #0
    5c8a:	75fb      	strb	r3, [r7, #23]
    uint16_t orig_num_dict_params = comp->num_dict_params;
    5c8c:	68fb      	ldr	r3, [r7, #12]
    5c8e:	8a9b      	ldrh	r3, [r3, #20]
    5c90:	82bb      	strh	r3, [r7, #20]
    uint16_t orig_num_default_params = comp->num_default_params;
    5c92:	68fb      	ldr	r3, [r7, #12]
    5c94:	8adb      	ldrh	r3, [r3, #22]
    5c96:	827b      	strh	r3, [r7, #18]

    // compile default parameters
    comp->have_star = false;
    5c98:	68fb      	ldr	r3, [r7, #12]
    5c9a:	2200      	movs	r2, #0
    5c9c:	719a      	strb	r2, [r3, #6]
    comp->num_dict_params = 0;
    5c9e:	68fb      	ldr	r3, [r7, #12]
    5ca0:	2200      	movs	r2, #0
    5ca2:	829a      	strh	r2, [r3, #20]
    comp->num_default_params = 0;
    5ca4:	68fb      	ldr	r3, [r7, #12]
    5ca6:	2200      	movs	r2, #0
    5ca8:	82da      	strh	r2, [r3, #22]
    apply_to_single_or_list(comp, pn_params, pn_list_kind, compile_funcdef_lambdef_param);
    5caa:	4b1b      	ldr	r3, [pc, #108]	; (5d18 <compile_funcdef_lambdef+0xa8>)
    5cac:	683a      	ldr	r2, [r7, #0]
    5cae:	6879      	ldr	r1, [r7, #4]
    5cb0:	68f8      	ldr	r0, [r7, #12]
    5cb2:	f7ff f9d7 	bl	5064 <apply_to_single_or_list>

    if (comp->compile_error != MP_OBJ_NULL) {
    5cb6:	68fb      	ldr	r3, [r7, #12]
    5cb8:	689b      	ldr	r3, [r3, #8]
    5cba:	2b00      	cmp	r3, #0
    5cbc:	d127      	bne.n	5d0e <compile_funcdef_lambdef+0x9e>
        return;
    }

    // in MicroPython we put the default positional parameters into a tuple using the bytecode
    // the default keywords args may have already made the tuple; if not, do it now
    if (comp->num_default_params > 0 && comp->num_dict_params == 0) {
    5cbe:	68fb      	ldr	r3, [r7, #12]
    5cc0:	8adb      	ldrh	r3, [r3, #22]
    5cc2:	2b00      	cmp	r3, #0
    5cc4:	d010      	beq.n	5ce8 <compile_funcdef_lambdef+0x78>
    5cc6:	68fb      	ldr	r3, [r7, #12]
    5cc8:	8a9b      	ldrh	r3, [r3, #20]
    5cca:	2b00      	cmp	r3, #0
    5ccc:	d10c      	bne.n	5ce8 <compile_funcdef_lambdef+0x78>
        EMIT_ARG(build, comp->num_default_params, MP_EMIT_BUILD_TUPLE);
    5cce:	68fb      	ldr	r3, [r7, #12]
    5cd0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5cd2:	68fb      	ldr	r3, [r7, #12]
    5cd4:	8adb      	ldrh	r3, [r3, #22]
    5cd6:	2200      	movs	r2, #0
    5cd8:	4619      	mov	r1, r3
    5cda:	f004 fef3 	bl	aac4 <mp_emit_bc_build>
        EMIT(load_null); // sentinel indicating empty default keyword args
    5cde:	68fb      	ldr	r3, [r7, #12]
    5ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5ce2:	4618      	mov	r0, r3
    5ce4:	f004 fbd0 	bl	a488 <mp_emit_bc_load_null>
    }

    // make the function
    close_over_variables_etc(comp, scope, comp->num_default_params, comp->num_dict_params);
    5ce8:	68fb      	ldr	r3, [r7, #12]
    5cea:	8adb      	ldrh	r3, [r3, #22]
    5cec:	461a      	mov	r2, r3
    5cee:	68fb      	ldr	r3, [r7, #12]
    5cf0:	8a9b      	ldrh	r3, [r3, #20]
    5cf2:	68b9      	ldr	r1, [r7, #8]
    5cf4:	68f8      	ldr	r0, [r7, #12]
    5cf6:	f7ff fe6b 	bl	59d0 <close_over_variables_etc>

    // restore state
    comp->have_star = orig_have_star;
    5cfa:	7dfa      	ldrb	r2, [r7, #23]
    5cfc:	68fb      	ldr	r3, [r7, #12]
    5cfe:	719a      	strb	r2, [r3, #6]
    comp->num_dict_params = orig_num_dict_params;
    5d00:	68fb      	ldr	r3, [r7, #12]
    5d02:	8aba      	ldrh	r2, [r7, #20]
    5d04:	829a      	strh	r2, [r3, #20]
    comp->num_default_params = orig_num_default_params;
    5d06:	68fb      	ldr	r3, [r7, #12]
    5d08:	8a7a      	ldrh	r2, [r7, #18]
    5d0a:	82da      	strh	r2, [r3, #22]
    5d0c:	e000      	b.n	5d10 <compile_funcdef_lambdef+0xa0>
        return;
    5d0e:	bf00      	nop
}
    5d10:	3718      	adds	r7, #24
    5d12:	46bd      	mov	sp, r7
    5d14:	bd80      	pop	{r7, pc}
    5d16:	bf00      	nop
    5d18:	00005afd 	.word	0x00005afd

00005d1c <compile_funcdef_helper>:

// leaves function object on stack
// returns function name
STATIC qstr compile_funcdef_helper(compiler_t *comp, mp_parse_node_struct_t *pns, uint emit_options) {
    5d1c:	b580      	push	{r7, lr}
    5d1e:	b086      	sub	sp, #24
    5d20:	af00      	add	r7, sp, #0
    5d22:	60f8      	str	r0, [r7, #12]
    5d24:	60b9      	str	r1, [r7, #8]
    5d26:	607a      	str	r2, [r7, #4]
    if (comp->pass == MP_PASS_SCOPE) {
    5d28:	68fb      	ldr	r3, [r7, #12]
    5d2a:	795b      	ldrb	r3, [r3, #5]
    5d2c:	2b01      	cmp	r3, #1
    5d2e:	d109      	bne.n	5d44 <compile_funcdef_helper+0x28>
        // create a new scope for this function
        scope_t *s = scope_new_and_link(comp, SCOPE_FUNCTION, (mp_parse_node_t)pns, emit_options);
    5d30:	68ba      	ldr	r2, [r7, #8]
    5d32:	687b      	ldr	r3, [r7, #4]
    5d34:	2107      	movs	r1, #7
    5d36:	68f8      	ldr	r0, [r7, #12]
    5d38:	f7ff f962 	bl	5000 <scope_new_and_link>
    5d3c:	6178      	str	r0, [r7, #20]
        // store the function scope so the compiling function can use it at each pass
        pns->nodes[4] = (mp_parse_node_t)s;
    5d3e:	697a      	ldr	r2, [r7, #20]
    5d40:	68bb      	ldr	r3, [r7, #8]
    5d42:	619a      	str	r2, [r3, #24]
    }

    // get the scope for this function
    scope_t *fscope = (scope_t*)pns->nodes[4];
    5d44:	68bb      	ldr	r3, [r7, #8]
    5d46:	699b      	ldr	r3, [r3, #24]
    5d48:	613b      	str	r3, [r7, #16]

    // compile the function definition
    compile_funcdef_lambdef(comp, fscope, pns->nodes[1], PN_typedargslist);
    5d4a:	68bb      	ldr	r3, [r7, #8]
    5d4c:	68da      	ldr	r2, [r3, #12]
    5d4e:	233e      	movs	r3, #62	; 0x3e
    5d50:	6939      	ldr	r1, [r7, #16]
    5d52:	68f8      	ldr	r0, [r7, #12]
    5d54:	f7ff ff8c 	bl	5c70 <compile_funcdef_lambdef>

    // return its name (the 'f' in "def f(...):")
    return fscope->simple_name;
    5d58:	693b      	ldr	r3, [r7, #16]
    5d5a:	8adb      	ldrh	r3, [r3, #22]
}
    5d5c:	4618      	mov	r0, r3
    5d5e:	3718      	adds	r7, #24
    5d60:	46bd      	mov	sp, r7
    5d62:	bd80      	pop	{r7, pc}

00005d64 <compile_classdef_helper>:

// leaves class object on stack
// returns class name
STATIC qstr compile_classdef_helper(compiler_t *comp, mp_parse_node_struct_t *pns, uint emit_options) {
    5d64:	b580      	push	{r7, lr}
    5d66:	b088      	sub	sp, #32
    5d68:	af00      	add	r7, sp, #0
    5d6a:	60f8      	str	r0, [r7, #12]
    5d6c:	60b9      	str	r1, [r7, #8]
    5d6e:	607a      	str	r2, [r7, #4]
    if (comp->pass == MP_PASS_SCOPE) {
    5d70:	68fb      	ldr	r3, [r7, #12]
    5d72:	795b      	ldrb	r3, [r3, #5]
    5d74:	2b01      	cmp	r3, #1
    5d76:	d109      	bne.n	5d8c <compile_classdef_helper+0x28>
        // create a new scope for this class
        scope_t *s = scope_new_and_link(comp, SCOPE_CLASS, (mp_parse_node_t)pns, emit_options);
    5d78:	68ba      	ldr	r2, [r7, #8]
    5d7a:	687b      	ldr	r3, [r7, #4]
    5d7c:	2101      	movs	r1, #1
    5d7e:	68f8      	ldr	r0, [r7, #12]
    5d80:	f7ff f93e 	bl	5000 <scope_new_and_link>
    5d84:	61b8      	str	r0, [r7, #24]
        // store the class scope so the compiling function can use it at each pass
        pns->nodes[3] = (mp_parse_node_t)s;
    5d86:	69ba      	ldr	r2, [r7, #24]
    5d88:	68bb      	ldr	r3, [r7, #8]
    5d8a:	615a      	str	r2, [r3, #20]
    }

    EMIT(load_build_class);
    5d8c:	68fb      	ldr	r3, [r7, #12]
    5d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5d90:	4618      	mov	r0, r3
    5d92:	f004 fbe7 	bl	a564 <mp_emit_bc_load_build_class>

    // scope for this class
    scope_t *cscope = (scope_t*)pns->nodes[3];
    5d96:	68bb      	ldr	r3, [r7, #8]
    5d98:	695b      	ldr	r3, [r3, #20]
    5d9a:	617b      	str	r3, [r7, #20]

    // compile the class
    close_over_variables_etc(comp, cscope, 0, 0);
    5d9c:	2300      	movs	r3, #0
    5d9e:	2200      	movs	r2, #0
    5da0:	6979      	ldr	r1, [r7, #20]
    5da2:	68f8      	ldr	r0, [r7, #12]
    5da4:	f7ff fe14 	bl	59d0 <close_over_variables_etc>

    // get its name
    EMIT_ARG(load_const_str, cscope->simple_name);
    5da8:	68fb      	ldr	r3, [r7, #12]
    5daa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5dac:	697b      	ldr	r3, [r7, #20]
    5dae:	8adb      	ldrh	r3, [r3, #22]
    5db0:	4619      	mov	r1, r3
    5db2:	4610      	mov	r0, r2
    5db4:	f004 fb44 	bl	a440 <mp_emit_bc_load_const_str>

    // nodes[1] has parent classes, if any
    // empty parenthesis (eg class C():) gets here as an empty PN_classdef_2 and needs special handling
    mp_parse_node_t parents = pns->nodes[1];
    5db8:	68bb      	ldr	r3, [r7, #8]
    5dba:	68db      	ldr	r3, [r3, #12]
    5dbc:	61fb      	str	r3, [r7, #28]
    if (MP_PARSE_NODE_IS_STRUCT_KIND(parents, PN_classdef_2)) {
    5dbe:	69fb      	ldr	r3, [r7, #28]
    5dc0:	2b00      	cmp	r3, #0
    5dc2:	d00b      	beq.n	5ddc <compile_classdef_helper+0x78>
    5dc4:	69fb      	ldr	r3, [r7, #28]
    5dc6:	f003 0303 	and.w	r3, r3, #3
    5dca:	2b00      	cmp	r3, #0
    5dcc:	d106      	bne.n	5ddc <compile_classdef_helper+0x78>
    5dce:	69fb      	ldr	r3, [r7, #28]
    5dd0:	685b      	ldr	r3, [r3, #4]
    5dd2:	b2db      	uxtb	r3, r3
    5dd4:	2b96      	cmp	r3, #150	; 0x96
    5dd6:	d101      	bne.n	5ddc <compile_classdef_helper+0x78>
        parents = MP_PARSE_NODE_NULL;
    5dd8:	2300      	movs	r3, #0
    5dda:	61fb      	str	r3, [r7, #28]
    }
    compile_trailer_paren_helper(comp, parents, false, 2);
    5ddc:	2302      	movs	r3, #2
    5dde:	2200      	movs	r2, #0
    5de0:	69f9      	ldr	r1, [r7, #28]
    5de2:	68f8      	ldr	r0, [r7, #12]
    5de4:	f002 fa1a 	bl	821c <compile_trailer_paren_helper>

    // return its name (the 'C' in class C(...):")
    return cscope->simple_name;
    5de8:	697b      	ldr	r3, [r7, #20]
    5dea:	8adb      	ldrh	r3, [r3, #22]
}
    5dec:	4618      	mov	r0, r3
    5dee:	3720      	adds	r7, #32
    5df0:	46bd      	mov	sp, r7
    5df2:	bd80      	pop	{r7, pc}

00005df4 <compile_built_in_decorator>:

// returns true if it was a built-in decorator (even if the built-in had an error)
STATIC bool compile_built_in_decorator(compiler_t *comp, int name_len, mp_parse_node_t *name_nodes, uint *emit_options) {
    5df4:	b580      	push	{r7, lr}
    5df6:	b086      	sub	sp, #24
    5df8:	af00      	add	r7, sp, #0
    5dfa:	60f8      	str	r0, [r7, #12]
    5dfc:	60b9      	str	r1, [r7, #8]
    5dfe:	607a      	str	r2, [r7, #4]
    5e00:	603b      	str	r3, [r7, #0]
    if (MP_PARSE_NODE_LEAF_ARG(name_nodes[0]) != MP_QSTR_micropython) {
    5e02:	687b      	ldr	r3, [r7, #4]
    5e04:	681b      	ldr	r3, [r3, #0]
    5e06:	091b      	lsrs	r3, r3, #4
    5e08:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    5e0c:	d001      	beq.n	5e12 <compile_built_in_decorator+0x1e>
        return false;
    5e0e:	2300      	movs	r3, #0
    5e10:	e020      	b.n	5e54 <compile_built_in_decorator+0x60>
    }

    if (name_len != 2) {
    5e12:	68bb      	ldr	r3, [r7, #8]
    5e14:	2b02      	cmp	r3, #2
    5e16:	d008      	beq.n	5e2a <compile_built_in_decorator+0x36>
        compile_syntax_error(comp, name_nodes[0], "invalid micropython decorator");
    5e18:	687b      	ldr	r3, [r7, #4]
    5e1a:	681b      	ldr	r3, [r3, #0]
    5e1c:	4a0f      	ldr	r2, [pc, #60]	; (5e5c <compile_built_in_decorator+0x68>)
    5e1e:	4619      	mov	r1, r3
    5e20:	68f8      	ldr	r0, [r7, #12]
    5e22:	f7ff f879 	bl	4f18 <compile_syntax_error>
        return true;
    5e26:	2301      	movs	r3, #1
    5e28:	e014      	b.n	5e54 <compile_built_in_decorator+0x60>
    }

    qstr attr = MP_PARSE_NODE_LEAF_ARG(name_nodes[1]);
    5e2a:	687b      	ldr	r3, [r7, #4]
    5e2c:	3304      	adds	r3, #4
    5e2e:	681b      	ldr	r3, [r3, #0]
    5e30:	091b      	lsrs	r3, r3, #4
    5e32:	617b      	str	r3, [r7, #20]
    if (attr == MP_QSTR_bytecode) {
    5e34:	697b      	ldr	r3, [r7, #20]
    5e36:	2bf4      	cmp	r3, #244	; 0xf4
    5e38:	d103      	bne.n	5e42 <compile_built_in_decorator+0x4e>
        *emit_options = MP_EMIT_OPT_BYTECODE;
    5e3a:	683b      	ldr	r3, [r7, #0]
    5e3c:	2201      	movs	r2, #1
    5e3e:	601a      	str	r2, [r3, #0]
    5e40:	e007      	b.n	5e52 <compile_built_in_decorator+0x5e>
    #if MICROPY_EMIT_INLINE_ASM
    } else if (attr == ASM_DECORATOR_QSTR) {
        *emit_options = MP_EMIT_OPT_ASM;
    #endif
    } else {
        compile_syntax_error(comp, name_nodes[1], "invalid micropython decorator");
    5e42:	687b      	ldr	r3, [r7, #4]
    5e44:	3304      	adds	r3, #4
    5e46:	681b      	ldr	r3, [r3, #0]
    5e48:	4a04      	ldr	r2, [pc, #16]	; (5e5c <compile_built_in_decorator+0x68>)
    5e4a:	4619      	mov	r1, r3
    5e4c:	68f8      	ldr	r0, [r7, #12]
    5e4e:	f7ff f863 	bl	4f18 <compile_syntax_error>
    }

    return true;
    5e52:	2301      	movs	r3, #1
}
    5e54:	4618      	mov	r0, r3
    5e56:	3718      	adds	r7, #24
    5e58:	46bd      	mov	sp, r7
    5e5a:	bd80      	pop	{r7, pc}
    5e5c:	0002050c 	.word	0x0002050c

00005e60 <compile_decorated>:

STATIC void compile_decorated(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5e60:	b580      	push	{r7, lr}
    5e62:	b08e      	sub	sp, #56	; 0x38
    5e64:	af00      	add	r7, sp, #0
    5e66:	6078      	str	r0, [r7, #4]
    5e68:	6039      	str	r1, [r7, #0]
    // get the list of decorators
    mp_parse_node_t *nodes;
    int n = mp_parse_node_extract_list(&pns->nodes[0], PN_decorators, &nodes);
    5e6a:	683b      	ldr	r3, [r7, #0]
    5e6c:	3308      	adds	r3, #8
    5e6e:	f107 0210 	add.w	r2, r7, #16
    5e72:	213b      	movs	r1, #59	; 0x3b
    5e74:	4618      	mov	r0, r3
    5e76:	f7fd ff4d 	bl	3d14 <mp_parse_node_extract_list>
    5e7a:	6238      	str	r0, [r7, #32]

    // inherit emit options for this function/class definition
    uint emit_options = comp->scope_cur->emit_options;
    5e7c:	687b      	ldr	r3, [r7, #4]
    5e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e80:	8b5b      	ldrh	r3, [r3, #26]
    5e82:	60fb      	str	r3, [r7, #12]

    // compile each decorator
    int num_built_in_decorators = 0;
    5e84:	2300      	movs	r3, #0
    5e86:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 0; i < n; i++) {
    5e88:	2300      	movs	r3, #0
    5e8a:	633b      	str	r3, [r7, #48]	; 0x30
    5e8c:	e075      	b.n	5f7a <compile_decorated+0x11a>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(nodes[i], PN_decorator)); // should be
    5e8e:	693a      	ldr	r2, [r7, #16]
    5e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5e92:	009b      	lsls	r3, r3, #2
    5e94:	4413      	add	r3, r2
    5e96:	681b      	ldr	r3, [r3, #0]
    5e98:	2b00      	cmp	r3, #0
    5e9a:	d011      	beq.n	5ec0 <compile_decorated+0x60>
    5e9c:	693a      	ldr	r2, [r7, #16]
    5e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5ea0:	009b      	lsls	r3, r3, #2
    5ea2:	4413      	add	r3, r2
    5ea4:	681b      	ldr	r3, [r3, #0]
    5ea6:	f003 0303 	and.w	r3, r3, #3
    5eaa:	2b00      	cmp	r3, #0
    5eac:	d108      	bne.n	5ec0 <compile_decorated+0x60>
    5eae:	693a      	ldr	r2, [r7, #16]
    5eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5eb2:	009b      	lsls	r3, r3, #2
    5eb4:	4413      	add	r3, r2
    5eb6:	681b      	ldr	r3, [r3, #0]
    5eb8:	685b      	ldr	r3, [r3, #4]
    5eba:	b2db      	uxtb	r3, r3
    5ebc:	2b3a      	cmp	r3, #58	; 0x3a
    5ebe:	d006      	beq.n	5ece <compile_decorated+0x6e>
    5ec0:	4b50      	ldr	r3, [pc, #320]	; (6004 <compile_decorated+0x1a4>)
    5ec2:	4a51      	ldr	r2, [pc, #324]	; (6008 <compile_decorated+0x1a8>)
    5ec4:	f240 3136 	movw	r1, #822	; 0x336
    5ec8:	4850      	ldr	r0, [pc, #320]	; (600c <compile_decorated+0x1ac>)
    5eca:	f015 fc5b 	bl	1b784 <__assert_func>
        mp_parse_node_struct_t *pns_decorator = (mp_parse_node_struct_t*)nodes[i];
    5ece:	693a      	ldr	r2, [r7, #16]
    5ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5ed2:	009b      	lsls	r3, r3, #2
    5ed4:	4413      	add	r3, r2
    5ed6:	681b      	ldr	r3, [r3, #0]
    5ed8:	61fb      	str	r3, [r7, #28]

        // nodes[0] contains the decorator function, which is a dotted name
        mp_parse_node_t *name_nodes;
        int name_len = mp_parse_node_extract_list(&pns_decorator->nodes[0], PN_dotted_name, &name_nodes);
    5eda:	69fb      	ldr	r3, [r7, #28]
    5edc:	3308      	adds	r3, #8
    5ede:	f107 0208 	add.w	r2, r7, #8
    5ee2:	2166      	movs	r1, #102	; 0x66
    5ee4:	4618      	mov	r0, r3
    5ee6:	f7fd ff15 	bl	3d14 <mp_parse_node_extract_list>
    5eea:	61b8      	str	r0, [r7, #24]

        // check for built-in decorators
        if (compile_built_in_decorator(comp, name_len, name_nodes, &emit_options)) {
    5eec:	68ba      	ldr	r2, [r7, #8]
    5eee:	f107 030c 	add.w	r3, r7, #12
    5ef2:	69b9      	ldr	r1, [r7, #24]
    5ef4:	6878      	ldr	r0, [r7, #4]
    5ef6:	f7ff ff7d 	bl	5df4 <compile_built_in_decorator>
    5efa:	4603      	mov	r3, r0
    5efc:	2b00      	cmp	r3, #0
    5efe:	d003      	beq.n	5f08 <compile_decorated+0xa8>
            // this was a built-in
            num_built_in_decorators += 1;
    5f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5f02:	3301      	adds	r3, #1
    5f04:	637b      	str	r3, [r7, #52]	; 0x34
    5f06:	e035      	b.n	5f74 <compile_decorated+0x114>

        } else {
            // not a built-in, compile normally

            // compile the decorator function
            compile_node(comp, name_nodes[0]);
    5f08:	68bb      	ldr	r3, [r7, #8]
    5f0a:	681b      	ldr	r3, [r3, #0]
    5f0c:	4619      	mov	r1, r3
    5f0e:	6878      	ldr	r0, [r7, #4]
    5f10:	f002 fde8 	bl	8ae4 <compile_node>
            for (int j = 1; j < name_len; j++) {
    5f14:	2301      	movs	r3, #1
    5f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    5f18:	e01e      	b.n	5f58 <compile_decorated+0xf8>
                assert(MP_PARSE_NODE_IS_ID(name_nodes[j])); // should be
    5f1a:	68ba      	ldr	r2, [r7, #8]
    5f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5f1e:	009b      	lsls	r3, r3, #2
    5f20:	4413      	add	r3, r2
    5f22:	681b      	ldr	r3, [r3, #0]
    5f24:	f003 030f 	and.w	r3, r3, #15
    5f28:	2b02      	cmp	r3, #2
    5f2a:	d006      	beq.n	5f3a <compile_decorated+0xda>
    5f2c:	4b38      	ldr	r3, [pc, #224]	; (6010 <compile_decorated+0x1b0>)
    5f2e:	4a36      	ldr	r2, [pc, #216]	; (6008 <compile_decorated+0x1a8>)
    5f30:	f44f 7152 	mov.w	r1, #840	; 0x348
    5f34:	4835      	ldr	r0, [pc, #212]	; (600c <compile_decorated+0x1ac>)
    5f36:	f015 fc25 	bl	1b784 <__assert_func>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(name_nodes[j]), MP_EMIT_ATTR_LOAD);
    5f3a:	687b      	ldr	r3, [r7, #4]
    5f3c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5f3e:	68ba      	ldr	r2, [r7, #8]
    5f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5f42:	009b      	lsls	r3, r3, #2
    5f44:	4413      	add	r3, r2
    5f46:	681b      	ldr	r3, [r3, #0]
    5f48:	091b      	lsrs	r3, r3, #4
    5f4a:	2200      	movs	r2, #0
    5f4c:	4619      	mov	r1, r3
    5f4e:	f004 fb41 	bl	a5d4 <mp_emit_bc_attr>
            for (int j = 1; j < name_len; j++) {
    5f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5f54:	3301      	adds	r3, #1
    5f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    5f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5f5a:	69bb      	ldr	r3, [r7, #24]
    5f5c:	429a      	cmp	r2, r3
    5f5e:	dbdc      	blt.n	5f1a <compile_decorated+0xba>
            }

            // nodes[1] contains arguments to the decorator function, if any
            if (!MP_PARSE_NODE_IS_NULL(pns_decorator->nodes[1])) {
    5f60:	69fb      	ldr	r3, [r7, #28]
    5f62:	68db      	ldr	r3, [r3, #12]
    5f64:	2b00      	cmp	r3, #0
    5f66:	d005      	beq.n	5f74 <compile_decorated+0x114>
                // call the decorator function with the arguments in nodes[1]
                compile_node(comp, pns_decorator->nodes[1]);
    5f68:	69fb      	ldr	r3, [r7, #28]
    5f6a:	68db      	ldr	r3, [r3, #12]
    5f6c:	4619      	mov	r1, r3
    5f6e:	6878      	ldr	r0, [r7, #4]
    5f70:	f002 fdb8 	bl	8ae4 <compile_node>
    for (int i = 0; i < n; i++) {
    5f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5f76:	3301      	adds	r3, #1
    5f78:	633b      	str	r3, [r7, #48]	; 0x30
    5f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5f7c:	6a3b      	ldr	r3, [r7, #32]
    5f7e:	429a      	cmp	r2, r3
    5f80:	db85      	blt.n	5e8e <compile_decorated+0x2e>
            }
        }
    }

    // compile the body (funcdef, async funcdef or classdef) and get its name
    mp_parse_node_struct_t *pns_body = (mp_parse_node_struct_t*)pns->nodes[1];
    5f82:	683b      	ldr	r3, [r7, #0]
    5f84:	68db      	ldr	r3, [r3, #12]
    5f86:	617b      	str	r3, [r7, #20]
    qstr body_name = 0;
    5f88:	2300      	movs	r3, #0
    5f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (MP_PARSE_NODE_STRUCT_KIND(pns_body) == PN_funcdef) {
    5f8c:	697b      	ldr	r3, [r7, #20]
    5f8e:	685b      	ldr	r3, [r3, #4]
    5f90:	b2db      	uxtb	r3, r3
    5f92:	2b03      	cmp	r3, #3
    5f94:	d107      	bne.n	5fa6 <compile_decorated+0x146>
        body_name = compile_funcdef_helper(comp, pns_body, emit_options);
    5f96:	68fb      	ldr	r3, [r7, #12]
    5f98:	461a      	mov	r2, r3
    5f9a:	6979      	ldr	r1, [r7, #20]
    5f9c:	6878      	ldr	r0, [r7, #4]
    5f9e:	f7ff febd 	bl	5d1c <compile_funcdef_helper>
    5fa2:	62b8      	str	r0, [r7, #40]	; 0x28
    5fa4:	e012      	b.n	5fcc <compile_decorated+0x16c>
        body_name = compile_funcdef_helper(comp, pns0, emit_options);
        scope_t *fscope = (scope_t*)pns0->nodes[4];
        fscope->scope_flags |= MP_SCOPE_FLAG_GENERATOR;
    #endif
    } else {
        assert(MP_PARSE_NODE_STRUCT_KIND(pns_body) == PN_classdef); // should be
    5fa6:	697b      	ldr	r3, [r7, #20]
    5fa8:	685b      	ldr	r3, [r3, #4]
    5faa:	b2db      	uxtb	r3, r3
    5fac:	2b33      	cmp	r3, #51	; 0x33
    5fae:	d006      	beq.n	5fbe <compile_decorated+0x15e>
    5fb0:	4b18      	ldr	r3, [pc, #96]	; (6014 <compile_decorated+0x1b4>)
    5fb2:	4a15      	ldr	r2, [pc, #84]	; (6008 <compile_decorated+0x1a8>)
    5fb4:	f240 3162 	movw	r1, #866	; 0x362
    5fb8:	4814      	ldr	r0, [pc, #80]	; (600c <compile_decorated+0x1ac>)
    5fba:	f015 fbe3 	bl	1b784 <__assert_func>
        body_name = compile_classdef_helper(comp, pns_body, emit_options);
    5fbe:	68fb      	ldr	r3, [r7, #12]
    5fc0:	461a      	mov	r2, r3
    5fc2:	6979      	ldr	r1, [r7, #20]
    5fc4:	6878      	ldr	r0, [r7, #4]
    5fc6:	f7ff fecd 	bl	5d64 <compile_classdef_helper>
    5fca:	62b8      	str	r0, [r7, #40]	; 0x28
    }

    // call each decorator
    for (int i = 0; i < n - num_built_in_decorators; i++) {
    5fcc:	2300      	movs	r3, #0
    5fce:	627b      	str	r3, [r7, #36]	; 0x24
    5fd0:	e009      	b.n	5fe6 <compile_decorated+0x186>
        EMIT_ARG(call_function, 1, 0, 0);
    5fd2:	687b      	ldr	r3, [r7, #4]
    5fd4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5fd6:	2300      	movs	r3, #0
    5fd8:	2200      	movs	r2, #0
    5fda:	2101      	movs	r1, #1
    5fdc:	f004 feaa 	bl	ad34 <mp_emit_bc_call_function>
    for (int i = 0; i < n - num_built_in_decorators; i++) {
    5fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fe2:	3301      	adds	r3, #1
    5fe4:	627b      	str	r3, [r7, #36]	; 0x24
    5fe6:	6a3a      	ldr	r2, [r7, #32]
    5fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5fea:	1ad2      	subs	r2, r2, r3
    5fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5fee:	429a      	cmp	r2, r3
    5ff0:	dcef      	bgt.n	5fd2 <compile_decorated+0x172>
    }

    // store func/class object into name
    compile_store_id(comp, body_name);
    5ff2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    5ff4:	6878      	ldr	r0, [r7, #4]
    5ff6:	f7ff f8bd 	bl	5174 <compile_store_id>
}
    5ffa:	bf00      	nop
    5ffc:	3738      	adds	r7, #56	; 0x38
    5ffe:	46bd      	mov	sp, r7
    6000:	bd80      	pop	{r7, pc}
    6002:	bf00      	nop
    6004:	0002052c 	.word	0x0002052c
    6008:	00020f4c 	.word	0x00020f4c
    600c:	00020358 	.word	0x00020358
    6010:	00020564 	.word	0x00020564
    6014:	00020588 	.word	0x00020588

00006018 <compile_funcdef>:

STATIC void compile_funcdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6018:	b580      	push	{r7, lr}
    601a:	b084      	sub	sp, #16
    601c:	af00      	add	r7, sp, #0
    601e:	6078      	str	r0, [r7, #4]
    6020:	6039      	str	r1, [r7, #0]
    qstr fname = compile_funcdef_helper(comp, pns, comp->scope_cur->emit_options);
    6022:	687b      	ldr	r3, [r7, #4]
    6024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6026:	8b5b      	ldrh	r3, [r3, #26]
    6028:	461a      	mov	r2, r3
    602a:	6839      	ldr	r1, [r7, #0]
    602c:	6878      	ldr	r0, [r7, #4]
    602e:	f7ff fe75 	bl	5d1c <compile_funcdef_helper>
    6032:	60f8      	str	r0, [r7, #12]
    // store function object into function name
    compile_store_id(comp, fname);
    6034:	68f9      	ldr	r1, [r7, #12]
    6036:	6878      	ldr	r0, [r7, #4]
    6038:	f7ff f89c 	bl	5174 <compile_store_id>
}
    603c:	bf00      	nop
    603e:	3710      	adds	r7, #16
    6040:	46bd      	mov	sp, r7
    6042:	bd80      	pop	{r7, pc}

00006044 <c_del_stmt>:

STATIC void c_del_stmt(compiler_t *comp, mp_parse_node_t pn) {
    6044:	b580      	push	{r7, lr}
    6046:	b08a      	sub	sp, #40	; 0x28
    6048:	af00      	add	r7, sp, #0
    604a:	6078      	str	r0, [r7, #4]
    604c:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_ID(pn)) {
    604e:	683b      	ldr	r3, [r7, #0]
    6050:	f003 030f 	and.w	r3, r3, #15
    6054:	2b02      	cmp	r3, #2
    6056:	d106      	bne.n	6066 <c_del_stmt+0x22>
        compile_delete_id(comp, MP_PARSE_NODE_LEAF_ARG(pn));
    6058:	683b      	ldr	r3, [r7, #0]
    605a:	091b      	lsrs	r3, r3, #4
    605c:	4619      	mov	r1, r3
    605e:	6878      	ldr	r0, [r7, #4]
    6060:	f7ff f8a6 	bl	51b0 <compile_delete_id>
    } else {
        // some arbitrary statement that we can't delete (eg del 1)
        goto cannot_delete;
    }

    return;
    6064:	e122      	b.n	62ac <c_del_stmt+0x268>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    6066:	683b      	ldr	r3, [r7, #0]
    6068:	2b00      	cmp	r3, #0
    606a:	f000 808f 	beq.w	618c <c_del_stmt+0x148>
    606e:	683b      	ldr	r3, [r7, #0]
    6070:	f003 0303 	and.w	r3, r3, #3
    6074:	2b00      	cmp	r3, #0
    6076:	f040 8089 	bne.w	618c <c_del_stmt+0x148>
    607a:	683b      	ldr	r3, [r7, #0]
    607c:	685b      	ldr	r3, [r3, #4]
    607e:	b2db      	uxtb	r3, r3
    6080:	2b29      	cmp	r3, #41	; 0x29
    6082:	f040 8083 	bne.w	618c <c_del_stmt+0x148>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    6086:	683b      	ldr	r3, [r7, #0]
    6088:	61bb      	str	r3, [r7, #24]
        compile_node(comp, pns->nodes[0]); // base of the atom_expr_normal node
    608a:	69bb      	ldr	r3, [r7, #24]
    608c:	689b      	ldr	r3, [r3, #8]
    608e:	4619      	mov	r1, r3
    6090:	6878      	ldr	r0, [r7, #4]
    6092:	f002 fd27 	bl	8ae4 <compile_node>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    6096:	69bb      	ldr	r3, [r7, #24]
    6098:	68db      	ldr	r3, [r3, #12]
    609a:	2b00      	cmp	r3, #0
    609c:	f000 8101 	beq.w	62a2 <c_del_stmt+0x25e>
    60a0:	69bb      	ldr	r3, [r7, #24]
    60a2:	68db      	ldr	r3, [r3, #12]
    60a4:	f003 0303 	and.w	r3, r3, #3
    60a8:	2b00      	cmp	r3, #0
    60aa:	f040 80fa 	bne.w	62a2 <c_del_stmt+0x25e>
            mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    60ae:	69bb      	ldr	r3, [r7, #24]
    60b0:	68db      	ldr	r3, [r3, #12]
    60b2:	627b      	str	r3, [r7, #36]	; 0x24
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_atom_expr_trailers) {
    60b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60b6:	685b      	ldr	r3, [r3, #4]
    60b8:	b2db      	uxtb	r3, r3
    60ba:	2b86      	cmp	r3, #134	; 0x86
    60bc:	d137      	bne.n	612e <c_del_stmt+0xea>
                int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    60be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60c0:	685b      	ldr	r3, [r3, #4]
    60c2:	0a1b      	lsrs	r3, r3, #8
    60c4:	617b      	str	r3, [r7, #20]
                for (int i = 0; i < n - 1; i++) {
    60c6:	2300      	movs	r3, #0
    60c8:	623b      	str	r3, [r7, #32]
    60ca:	e00b      	b.n	60e4 <c_del_stmt+0xa0>
                    compile_node(comp, pns1->nodes[i]);
    60cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60ce:	6a3a      	ldr	r2, [r7, #32]
    60d0:	3202      	adds	r2, #2
    60d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    60d6:	4619      	mov	r1, r3
    60d8:	6878      	ldr	r0, [r7, #4]
    60da:	f002 fd03 	bl	8ae4 <compile_node>
                for (int i = 0; i < n - 1; i++) {
    60de:	6a3b      	ldr	r3, [r7, #32]
    60e0:	3301      	adds	r3, #1
    60e2:	623b      	str	r3, [r7, #32]
    60e4:	697b      	ldr	r3, [r7, #20]
    60e6:	1e5a      	subs	r2, r3, #1
    60e8:	6a3b      	ldr	r3, [r7, #32]
    60ea:	429a      	cmp	r2, r3
    60ec:	dcee      	bgt.n	60cc <c_del_stmt+0x88>
                assert(MP_PARSE_NODE_IS_STRUCT(pns1->nodes[n - 1]));
    60ee:	697b      	ldr	r3, [r7, #20]
    60f0:	1e5a      	subs	r2, r3, #1
    60f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60f4:	3202      	adds	r2, #2
    60f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    60fa:	2b00      	cmp	r3, #0
    60fc:	d009      	beq.n	6112 <c_del_stmt+0xce>
    60fe:	697b      	ldr	r3, [r7, #20]
    6100:	1e5a      	subs	r2, r3, #1
    6102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6104:	3202      	adds	r2, #2
    6106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    610a:	f003 0303 	and.w	r3, r3, #3
    610e:	2b00      	cmp	r3, #0
    6110:	d006      	beq.n	6120 <c_del_stmt+0xdc>
    6112:	4b68      	ldr	r3, [pc, #416]	; (62b4 <c_del_stmt+0x270>)
    6114:	4a68      	ldr	r2, [pc, #416]	; (62b8 <c_del_stmt+0x274>)
    6116:	f44f 7161 	mov.w	r1, #900	; 0x384
    611a:	4868      	ldr	r0, [pc, #416]	; (62bc <c_del_stmt+0x278>)
    611c:	f015 fb32 	bl	1b784 <__assert_func>
                pns1 = (mp_parse_node_struct_t*)pns1->nodes[n - 1];
    6120:	697b      	ldr	r3, [r7, #20]
    6122:	1e5a      	subs	r2, r3, #1
    6124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6126:	3202      	adds	r2, #2
    6128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    612c:	627b      	str	r3, [r7, #36]	; 0x24
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_bracket) {
    612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6130:	685b      	ldr	r3, [r3, #4]
    6132:	b2db      	uxtb	r3, r3
    6134:	2b2e      	cmp	r3, #46	; 0x2e
    6136:	d10c      	bne.n	6152 <c_del_stmt+0x10e>
                compile_node(comp, pns1->nodes[0]);
    6138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    613a:	689b      	ldr	r3, [r3, #8]
    613c:	4619      	mov	r1, r3
    613e:	6878      	ldr	r0, [r7, #4]
    6140:	f002 fcd0 	bl	8ae4 <compile_node>
                EMIT_ARG(subscr, MP_EMIT_SUBSCR_DELETE);
    6144:	687b      	ldr	r3, [r7, #4]
    6146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6148:	2102      	movs	r1, #2
    614a:	4618      	mov	r0, r3
    614c:	f004 fa1a 	bl	a584 <mp_emit_bc_subscr>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    6150:	e0a1      	b.n	6296 <c_del_stmt+0x252>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_period) {
    6152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6154:	685b      	ldr	r3, [r3, #4]
    6156:	b2db      	uxtb	r3, r3
    6158:	2b2f      	cmp	r3, #47	; 0x2f
    615a:	f040 809d 	bne.w	6298 <c_del_stmt+0x254>
                assert(MP_PARSE_NODE_IS_ID(pns1->nodes[0]));
    615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6160:	689b      	ldr	r3, [r3, #8]
    6162:	f003 030f 	and.w	r3, r3, #15
    6166:	2b02      	cmp	r3, #2
    6168:	d006      	beq.n	6178 <c_del_stmt+0x134>
    616a:	4b55      	ldr	r3, [pc, #340]	; (62c0 <c_del_stmt+0x27c>)
    616c:	4a52      	ldr	r2, [pc, #328]	; (62b8 <c_del_stmt+0x274>)
    616e:	f240 318b 	movw	r1, #907	; 0x38b
    6172:	4852      	ldr	r0, [pc, #328]	; (62bc <c_del_stmt+0x278>)
    6174:	f015 fb06 	bl	1b784 <__assert_func>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_DELETE);
    6178:	687b      	ldr	r3, [r7, #4]
    617a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    617e:	689b      	ldr	r3, [r3, #8]
    6180:	091b      	lsrs	r3, r3, #4
    6182:	2202      	movs	r2, #2
    6184:	4619      	mov	r1, r3
    6186:	f004 fa25 	bl	a5d4 <mp_emit_bc_attr>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    618a:	e084      	b.n	6296 <c_del_stmt+0x252>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_paren)) {
    618c:	683b      	ldr	r3, [r7, #0]
    618e:	2b00      	cmp	r3, #0
    6190:	f000 8087 	beq.w	62a2 <c_del_stmt+0x25e>
    6194:	683b      	ldr	r3, [r7, #0]
    6196:	f003 0303 	and.w	r3, r3, #3
    619a:	2b00      	cmp	r3, #0
    619c:	f040 8081 	bne.w	62a2 <c_del_stmt+0x25e>
    61a0:	683b      	ldr	r3, [r7, #0]
    61a2:	685b      	ldr	r3, [r3, #4]
    61a4:	b2db      	uxtb	r3, r3
    61a6:	2b2a      	cmp	r3, #42	; 0x2a
    61a8:	d17b      	bne.n	62a2 <c_del_stmt+0x25e>
        pn = ((mp_parse_node_struct_t*)pn)->nodes[0];
    61aa:	683b      	ldr	r3, [r7, #0]
    61ac:	689b      	ldr	r3, [r3, #8]
    61ae:	603b      	str	r3, [r7, #0]
        if (MP_PARSE_NODE_IS_NULL(pn)) {
    61b0:	683b      	ldr	r3, [r7, #0]
    61b2:	2b00      	cmp	r3, #0
    61b4:	d072      	beq.n	629c <c_del_stmt+0x258>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_testlist_comp));
    61b6:	683b      	ldr	r3, [r7, #0]
    61b8:	2b00      	cmp	r3, #0
    61ba:	d009      	beq.n	61d0 <c_del_stmt+0x18c>
    61bc:	683b      	ldr	r3, [r7, #0]
    61be:	f003 0303 	and.w	r3, r3, #3
    61c2:	2b00      	cmp	r3, #0
    61c4:	d104      	bne.n	61d0 <c_del_stmt+0x18c>
    61c6:	683b      	ldr	r3, [r7, #0]
    61c8:	685b      	ldr	r3, [r3, #4]
    61ca:	b2db      	uxtb	r3, r3
    61cc:	2b8a      	cmp	r3, #138	; 0x8a
    61ce:	d006      	beq.n	61de <c_del_stmt+0x19a>
    61d0:	4b3c      	ldr	r3, [pc, #240]	; (62c4 <c_del_stmt+0x280>)
    61d2:	4a39      	ldr	r2, [pc, #228]	; (62b8 <c_del_stmt+0x274>)
    61d4:	f240 3199 	movw	r1, #921	; 0x399
    61d8:	4838      	ldr	r0, [pc, #224]	; (62bc <c_del_stmt+0x278>)
    61da:	f015 fad3 	bl	1b784 <__assert_func>
            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    61de:	683b      	ldr	r3, [r7, #0]
    61e0:	613b      	str	r3, [r7, #16]
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    61e2:	693b      	ldr	r3, [r7, #16]
    61e4:	68db      	ldr	r3, [r3, #12]
    61e6:	2b00      	cmp	r3, #0
    61e8:	d048      	beq.n	627c <c_del_stmt+0x238>
    61ea:	693b      	ldr	r3, [r7, #16]
    61ec:	68db      	ldr	r3, [r3, #12]
    61ee:	f003 0303 	and.w	r3, r3, #3
    61f2:	2b00      	cmp	r3, #0
    61f4:	d142      	bne.n	627c <c_del_stmt+0x238>
                mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    61f6:	693b      	ldr	r3, [r7, #16]
    61f8:	68db      	ldr	r3, [r3, #12]
    61fa:	60fb      	str	r3, [r7, #12]
                if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_testlist_comp_3b) {
    61fc:	68fb      	ldr	r3, [r7, #12]
    61fe:	685b      	ldr	r3, [r3, #4]
    6200:	b2db      	uxtb	r3, r3
    6202:	2b8d      	cmp	r3, #141	; 0x8d
    6204:	d111      	bne.n	622a <c_del_stmt+0x1e6>
                    assert(MP_PARSE_NODE_IS_NULL(pns1->nodes[0]));
    6206:	68fb      	ldr	r3, [r7, #12]
    6208:	689b      	ldr	r3, [r3, #8]
    620a:	2b00      	cmp	r3, #0
    620c:	d006      	beq.n	621c <c_del_stmt+0x1d8>
    620e:	4b2e      	ldr	r3, [pc, #184]	; (62c8 <c_del_stmt+0x284>)
    6210:	4a29      	ldr	r2, [pc, #164]	; (62b8 <c_del_stmt+0x274>)
    6212:	f240 31a1 	movw	r1, #929	; 0x3a1
    6216:	4829      	ldr	r0, [pc, #164]	; (62bc <c_del_stmt+0x278>)
    6218:	f015 fab4 	bl	1b784 <__assert_func>
                    c_del_stmt(comp, pns->nodes[0]);
    621c:	693b      	ldr	r3, [r7, #16]
    621e:	689b      	ldr	r3, [r3, #8]
    6220:	4619      	mov	r1, r3
    6222:	6878      	ldr	r0, [r7, #4]
    6224:	f7ff ff0e 	bl	6044 <c_del_stmt>
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    6228:	e035      	b.n	6296 <c_del_stmt+0x252>
                } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_testlist_comp_3c) {
    622a:	68fb      	ldr	r3, [r7, #12]
    622c:	685b      	ldr	r3, [r3, #4]
    622e:	b2db      	uxtb	r3, r3
    6230:	2b8e      	cmp	r3, #142	; 0x8e
    6232:	d11d      	bne.n	6270 <c_del_stmt+0x22c>
                    int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    6234:	68fb      	ldr	r3, [r7, #12]
    6236:	685b      	ldr	r3, [r3, #4]
    6238:	0a1b      	lsrs	r3, r3, #8
    623a:	60bb      	str	r3, [r7, #8]
                    c_del_stmt(comp, pns->nodes[0]);
    623c:	693b      	ldr	r3, [r7, #16]
    623e:	689b      	ldr	r3, [r3, #8]
    6240:	4619      	mov	r1, r3
    6242:	6878      	ldr	r0, [r7, #4]
    6244:	f7ff fefe 	bl	6044 <c_del_stmt>
                    for (int i = 0; i < n; i++) {
    6248:	2300      	movs	r3, #0
    624a:	61fb      	str	r3, [r7, #28]
    624c:	e00b      	b.n	6266 <c_del_stmt+0x222>
                        c_del_stmt(comp, pns1->nodes[i]);
    624e:	68fb      	ldr	r3, [r7, #12]
    6250:	69fa      	ldr	r2, [r7, #28]
    6252:	3202      	adds	r2, #2
    6254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6258:	4619      	mov	r1, r3
    625a:	6878      	ldr	r0, [r7, #4]
    625c:	f7ff fef2 	bl	6044 <c_del_stmt>
                    for (int i = 0; i < n; i++) {
    6260:	69fb      	ldr	r3, [r7, #28]
    6262:	3301      	adds	r3, #1
    6264:	61fb      	str	r3, [r7, #28]
    6266:	69fa      	ldr	r2, [r7, #28]
    6268:	68bb      	ldr	r3, [r7, #8]
    626a:	429a      	cmp	r2, r3
    626c:	dbef      	blt.n	624e <c_del_stmt+0x20a>
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    626e:	e012      	b.n	6296 <c_del_stmt+0x252>
                } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_comp_for) {
    6270:	68fb      	ldr	r3, [r7, #12]
    6272:	685b      	ldr	r3, [r3, #4]
    6274:	b2db      	uxtb	r3, r3
    6276:	2b9f      	cmp	r3, #159	; 0x9f
    6278:	d012      	beq.n	62a0 <c_del_stmt+0x25c>
                    goto sequence_with_2_items;
    627a:	bf00      	nop
                c_del_stmt(comp, pns->nodes[0]);
    627c:	693b      	ldr	r3, [r7, #16]
    627e:	689b      	ldr	r3, [r3, #8]
    6280:	4619      	mov	r1, r3
    6282:	6878      	ldr	r0, [r7, #4]
    6284:	f7ff fede 	bl	6044 <c_del_stmt>
                c_del_stmt(comp, pns->nodes[1]);
    6288:	693b      	ldr	r3, [r7, #16]
    628a:	68db      	ldr	r3, [r3, #12]
    628c:	4619      	mov	r1, r3
    628e:	6878      	ldr	r0, [r7, #4]
    6290:	f7ff fed8 	bl	6044 <c_del_stmt>
    return;
    6294:	e00a      	b.n	62ac <c_del_stmt+0x268>
    6296:	e009      	b.n	62ac <c_del_stmt+0x268>
                goto cannot_delete;
    6298:	bf00      	nop
    629a:	e002      	b.n	62a2 <c_del_stmt+0x25e>
            goto cannot_delete;
    629c:	bf00      	nop
    629e:	e000      	b.n	62a2 <c_del_stmt+0x25e>
                    goto cannot_delete;
    62a0:	bf00      	nop

cannot_delete:
    compile_syntax_error(comp, (mp_parse_node_t)pn, "can't delete expression");
    62a2:	4a0a      	ldr	r2, [pc, #40]	; (62cc <c_del_stmt+0x288>)
    62a4:	6839      	ldr	r1, [r7, #0]
    62a6:	6878      	ldr	r0, [r7, #4]
    62a8:	f7fe fe36 	bl	4f18 <compile_syntax_error>
}
    62ac:	3728      	adds	r7, #40	; 0x28
    62ae:	46bd      	mov	sp, r7
    62b0:	bd80      	pop	{r7, pc}
    62b2:	bf00      	nop
    62b4:	000203ac 	.word	0x000203ac
    62b8:	00020f60 	.word	0x00020f60
    62bc:	00020358 	.word	0x00020358
    62c0:	000203d8 	.word	0x000203d8
    62c4:	000205bc 	.word	0x000205bc
    62c8:	000205f0 	.word	0x000205f0
    62cc:	00020618 	.word	0x00020618

000062d0 <compile_del_stmt>:

STATIC void compile_del_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    62d0:	b580      	push	{r7, lr}
    62d2:	b082      	sub	sp, #8
    62d4:	af00      	add	r7, sp, #0
    62d6:	6078      	str	r0, [r7, #4]
    62d8:	6039      	str	r1, [r7, #0]
    apply_to_single_or_list(comp, pns->nodes[0], PN_exprlist, c_del_stmt);
    62da:	683b      	ldr	r3, [r7, #0]
    62dc:	6899      	ldr	r1, [r3, #8]
    62de:	4b04      	ldr	r3, [pc, #16]	; (62f0 <compile_del_stmt+0x20>)
    62e0:	2290      	movs	r2, #144	; 0x90
    62e2:	6878      	ldr	r0, [r7, #4]
    62e4:	f7fe febe 	bl	5064 <apply_to_single_or_list>
}
    62e8:	bf00      	nop
    62ea:	3708      	adds	r7, #8
    62ec:	46bd      	mov	sp, r7
    62ee:	bd80      	pop	{r7, pc}
    62f0:	00006045 	.word	0x00006045

000062f4 <compile_break_cont_stmt>:

STATIC void compile_break_cont_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    62f4:	b580      	push	{r7, lr}
    62f6:	b084      	sub	sp, #16
    62f8:	af00      	add	r7, sp, #0
    62fa:	6078      	str	r0, [r7, #4]
    62fc:	6039      	str	r1, [r7, #0]
    uint16_t label;
    const char *error_msg;
    if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_break_stmt) {
    62fe:	683b      	ldr	r3, [r7, #0]
    6300:	685b      	ldr	r3, [r3, #4]
    6302:	b2db      	uxtb	r3, r3
    6304:	2b09      	cmp	r3, #9
    6306:	d105      	bne.n	6314 <compile_break_cont_stmt+0x20>
        label = comp->break_label;
    6308:	687b      	ldr	r3, [r7, #4]
    630a:	8b1b      	ldrh	r3, [r3, #24]
    630c:	81fb      	strh	r3, [r7, #14]
        error_msg = "'break' outside loop";
    630e:	4b18      	ldr	r3, [pc, #96]	; (6370 <compile_break_cont_stmt+0x7c>)
    6310:	60bb      	str	r3, [r7, #8]
    6312:	e004      	b.n	631e <compile_break_cont_stmt+0x2a>
    } else {
        label = comp->continue_label;
    6314:	687b      	ldr	r3, [r7, #4]
    6316:	8b5b      	ldrh	r3, [r3, #26]
    6318:	81fb      	strh	r3, [r7, #14]
        error_msg = "'continue' outside loop";
    631a:	4b16      	ldr	r3, [pc, #88]	; (6374 <compile_break_cont_stmt+0x80>)
    631c:	60bb      	str	r3, [r7, #8]
    }
    if (label == INVALID_LABEL) {
    631e:	89fb      	ldrh	r3, [r7, #14]
    6320:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6324:	4293      	cmp	r3, r2
    6326:	d105      	bne.n	6334 <compile_break_cont_stmt+0x40>
        compile_syntax_error(comp, (mp_parse_node_t)pns, error_msg);
    6328:	683b      	ldr	r3, [r7, #0]
    632a:	68ba      	ldr	r2, [r7, #8]
    632c:	4619      	mov	r1, r3
    632e:	6878      	ldr	r0, [r7, #4]
    6330:	f7fe fdf2 	bl	4f18 <compile_syntax_error>
    }
    assert(comp->cur_except_level >= comp->break_continue_except_level);
    6334:	687b      	ldr	r3, [r7, #4]
    6336:	8b9a      	ldrh	r2, [r3, #28]
    6338:	687b      	ldr	r3, [r7, #4]
    633a:	8bdb      	ldrh	r3, [r3, #30]
    633c:	429a      	cmp	r2, r3
    633e:	d206      	bcs.n	634e <compile_break_cont_stmt+0x5a>
    6340:	4b0d      	ldr	r3, [pc, #52]	; (6378 <compile_break_cont_stmt+0x84>)
    6342:	4a0e      	ldr	r2, [pc, #56]	; (637c <compile_break_cont_stmt+0x88>)
    6344:	f240 31d3 	movw	r1, #979	; 0x3d3
    6348:	480d      	ldr	r0, [pc, #52]	; (6380 <compile_break_cont_stmt+0x8c>)
    634a:	f015 fa1b 	bl	1b784 <__assert_func>
    EMIT_ARG(unwind_jump, label, comp->cur_except_level - comp->break_continue_except_level);
    634e:	687b      	ldr	r3, [r7, #4]
    6350:	6a98      	ldr	r0, [r3, #40]	; 0x28
    6352:	89f9      	ldrh	r1, [r7, #14]
    6354:	687b      	ldr	r3, [r7, #4]
    6356:	8b9b      	ldrh	r3, [r3, #28]
    6358:	461a      	mov	r2, r3
    635a:	687b      	ldr	r3, [r7, #4]
    635c:	8bdb      	ldrh	r3, [r3, #30]
    635e:	1ad3      	subs	r3, r2, r3
    6360:	461a      	mov	r2, r3
    6362:	f004 fa6d 	bl	a840 <mp_emit_bc_unwind_jump>
}
    6366:	bf00      	nop
    6368:	3710      	adds	r7, #16
    636a:	46bd      	mov	sp, r7
    636c:	bd80      	pop	{r7, pc}
    636e:	bf00      	nop
    6370:	00020630 	.word	0x00020630
    6374:	00020648 	.word	0x00020648
    6378:	00020660 	.word	0x00020660
    637c:	00020f6c 	.word	0x00020f6c
    6380:	00020358 	.word	0x00020358

00006384 <compile_return_stmt>:

STATIC void compile_return_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6384:	b580      	push	{r7, lr}
    6386:	b082      	sub	sp, #8
    6388:	af00      	add	r7, sp, #0
    638a:	6078      	str	r0, [r7, #4]
    638c:	6039      	str	r1, [r7, #0]
    if (comp->scope_cur->kind != SCOPE_FUNCTION) {
    638e:	687b      	ldr	r3, [r7, #4]
    6390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6392:	681b      	ldr	r3, [r3, #0]
    6394:	2b07      	cmp	r3, #7
    6396:	d006      	beq.n	63a6 <compile_return_stmt+0x22>
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'return' outside function");
    6398:	683b      	ldr	r3, [r7, #0]
    639a:	4a0f      	ldr	r2, [pc, #60]	; (63d8 <compile_return_stmt+0x54>)
    639c:	4619      	mov	r1, r3
    639e:	6878      	ldr	r0, [r7, #4]
    63a0:	f7fe fdba 	bl	4f18 <compile_syntax_error>
        return;
    63a4:	e015      	b.n	63d2 <compile_return_stmt+0x4e>
    }
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    63a6:	683b      	ldr	r3, [r7, #0]
    63a8:	689b      	ldr	r3, [r3, #8]
    63aa:	2b00      	cmp	r3, #0
    63ac:	d106      	bne.n	63bc <compile_return_stmt+0x38>
        // no argument to 'return', so return None
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    63ae:	687b      	ldr	r3, [r7, #4]
    63b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    63b2:	210e      	movs	r1, #14
    63b4:	4618      	mov	r0, r3
    63b6:	f003 ffe5 	bl	a384 <mp_emit_bc_load_const_tok>
    63ba:	e005      	b.n	63c8 <compile_return_stmt+0x44>
        compile_node(comp, pns_test_if_expr->nodes[0]); // success value
        EMIT(return_value);
        EMIT_ARG(label_assign, l_fail);
        compile_node(comp, pns_test_if_else->nodes[1]); // failure value
    } else {
        compile_node(comp, pns->nodes[0]);
    63bc:	683b      	ldr	r3, [r7, #0]
    63be:	689b      	ldr	r3, [r3, #8]
    63c0:	4619      	mov	r1, r3
    63c2:	6878      	ldr	r0, [r7, #4]
    63c4:	f002 fb8e 	bl	8ae4 <compile_node>
    }
    EMIT(return_value);
    63c8:	687b      	ldr	r3, [r7, #4]
    63ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    63cc:	4618      	mov	r0, r3
    63ce:	f004 fcdd 	bl	ad8c <mp_emit_bc_return_value>
}
    63d2:	3708      	adds	r7, #8
    63d4:	46bd      	mov	sp, r7
    63d6:	bd80      	pop	{r7, pc}
    63d8:	0002069c 	.word	0x0002069c

000063dc <compile_yield_stmt>:

STATIC void compile_yield_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    63dc:	b580      	push	{r7, lr}
    63de:	b082      	sub	sp, #8
    63e0:	af00      	add	r7, sp, #0
    63e2:	6078      	str	r0, [r7, #4]
    63e4:	6039      	str	r1, [r7, #0]
    compile_node(comp, pns->nodes[0]);
    63e6:	683b      	ldr	r3, [r7, #0]
    63e8:	689b      	ldr	r3, [r3, #8]
    63ea:	4619      	mov	r1, r3
    63ec:	6878      	ldr	r0, [r7, #4]
    63ee:	f002 fb79 	bl	8ae4 <compile_node>
    EMIT(pop_top);
    63f2:	687b      	ldr	r3, [r7, #4]
    63f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    63f6:	4618      	mov	r0, r3
    63f8:	f004 f9a2 	bl	a740 <mp_emit_bc_pop_top>
}
    63fc:	bf00      	nop
    63fe:	3708      	adds	r7, #8
    6400:	46bd      	mov	sp, r7
    6402:	bd80      	pop	{r7, pc}

00006404 <compile_raise_stmt>:

STATIC void compile_raise_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6404:	b580      	push	{r7, lr}
    6406:	b082      	sub	sp, #8
    6408:	af00      	add	r7, sp, #0
    640a:	6078      	str	r0, [r7, #4]
    640c:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    640e:	683b      	ldr	r3, [r7, #0]
    6410:	689b      	ldr	r3, [r3, #8]
    6412:	2b00      	cmp	r3, #0
    6414:	d106      	bne.n	6424 <compile_raise_stmt+0x20>
        // raise
        EMIT_ARG(raise_varargs, 0);
    6416:	687b      	ldr	r3, [r7, #4]
    6418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    641a:	2100      	movs	r1, #0
    641c:	4618      	mov	r0, r3
    641e:	f004 fcc9 	bl	adb4 <mp_emit_bc_raise_varargs>
    } else {
        // raise x
        compile_node(comp, pns->nodes[0]);
        EMIT_ARG(raise_varargs, 1);
    }
}
    6422:	e031      	b.n	6488 <compile_raise_stmt+0x84>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_raise_stmt_arg)) {
    6424:	683b      	ldr	r3, [r7, #0]
    6426:	689b      	ldr	r3, [r3, #8]
    6428:	2b00      	cmp	r3, #0
    642a:	d021      	beq.n	6470 <compile_raise_stmt+0x6c>
    642c:	683b      	ldr	r3, [r7, #0]
    642e:	689b      	ldr	r3, [r3, #8]
    6430:	f003 0303 	and.w	r3, r3, #3
    6434:	2b00      	cmp	r3, #0
    6436:	d11b      	bne.n	6470 <compile_raise_stmt+0x6c>
    6438:	683b      	ldr	r3, [r7, #0]
    643a:	689b      	ldr	r3, [r3, #8]
    643c:	685b      	ldr	r3, [r3, #4]
    643e:	b2db      	uxtb	r3, r3
    6440:	2b58      	cmp	r3, #88	; 0x58
    6442:	d115      	bne.n	6470 <compile_raise_stmt+0x6c>
        pns = (mp_parse_node_struct_t*)pns->nodes[0];
    6444:	683b      	ldr	r3, [r7, #0]
    6446:	689b      	ldr	r3, [r3, #8]
    6448:	603b      	str	r3, [r7, #0]
        compile_node(comp, pns->nodes[0]);
    644a:	683b      	ldr	r3, [r7, #0]
    644c:	689b      	ldr	r3, [r3, #8]
    644e:	4619      	mov	r1, r3
    6450:	6878      	ldr	r0, [r7, #4]
    6452:	f002 fb47 	bl	8ae4 <compile_node>
        compile_node(comp, pns->nodes[1]);
    6456:	683b      	ldr	r3, [r7, #0]
    6458:	68db      	ldr	r3, [r3, #12]
    645a:	4619      	mov	r1, r3
    645c:	6878      	ldr	r0, [r7, #4]
    645e:	f002 fb41 	bl	8ae4 <compile_node>
        EMIT_ARG(raise_varargs, 2);
    6462:	687b      	ldr	r3, [r7, #4]
    6464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6466:	2102      	movs	r1, #2
    6468:	4618      	mov	r0, r3
    646a:	f004 fca3 	bl	adb4 <mp_emit_bc_raise_varargs>
}
    646e:	e00b      	b.n	6488 <compile_raise_stmt+0x84>
        compile_node(comp, pns->nodes[0]);
    6470:	683b      	ldr	r3, [r7, #0]
    6472:	689b      	ldr	r3, [r3, #8]
    6474:	4619      	mov	r1, r3
    6476:	6878      	ldr	r0, [r7, #4]
    6478:	f002 fb34 	bl	8ae4 <compile_node>
        EMIT_ARG(raise_varargs, 1);
    647c:	687b      	ldr	r3, [r7, #4]
    647e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6480:	2101      	movs	r1, #1
    6482:	4618      	mov	r0, r3
    6484:	f004 fc96 	bl	adb4 <mp_emit_bc_raise_varargs>
}
    6488:	bf00      	nop
    648a:	3708      	adds	r7, #8
    648c:	46bd      	mov	sp, r7
    648e:	bd80      	pop	{r7, pc}

00006490 <do_import_name>:

// q_base holds the base of the name
// eg   a -> q_base=a
//      a.b.c -> q_base=a
STATIC void do_import_name(compiler_t *comp, mp_parse_node_t pn, qstr *q_base) {
    6490:	b580      	push	{r7, lr}
    6492:	b092      	sub	sp, #72	; 0x48
    6494:	af00      	add	r7, sp, #0
    6496:	60f8      	str	r0, [r7, #12]
    6498:	60b9      	str	r1, [r7, #8]
    649a:	607a      	str	r2, [r7, #4]
    bool is_as = false;
    649c:	2300      	movs	r3, #0
    649e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_dotted_as_name)) {
    64a2:	68bb      	ldr	r3, [r7, #8]
    64a4:	2b00      	cmp	r3, #0
    64a6:	d016      	beq.n	64d6 <do_import_name+0x46>
    64a8:	68bb      	ldr	r3, [r7, #8]
    64aa:	f003 0303 	and.w	r3, r3, #3
    64ae:	2b00      	cmp	r3, #0
    64b0:	d111      	bne.n	64d6 <do_import_name+0x46>
    64b2:	68bb      	ldr	r3, [r7, #8]
    64b4:	685b      	ldr	r3, [r3, #4]
    64b6:	b2db      	uxtb	r3, r3
    64b8:	2b62      	cmp	r3, #98	; 0x62
    64ba:	d10c      	bne.n	64d6 <do_import_name+0x46>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    64bc:	68bb      	ldr	r3, [r7, #8]
    64be:	62fb      	str	r3, [r7, #44]	; 0x2c
        // a name of the form x as y; unwrap it
        *q_base = MP_PARSE_NODE_LEAF_ARG(pns->nodes[1]);
    64c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    64c2:	68db      	ldr	r3, [r3, #12]
    64c4:	091a      	lsrs	r2, r3, #4
    64c6:	687b      	ldr	r3, [r7, #4]
    64c8:	601a      	str	r2, [r3, #0]
        pn = pns->nodes[0];
    64ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    64cc:	689b      	ldr	r3, [r3, #8]
    64ce:	60bb      	str	r3, [r7, #8]
        is_as = true;
    64d0:	2301      	movs	r3, #1
    64d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    64d6:	68bb      	ldr	r3, [r7, #8]
    64d8:	2b00      	cmp	r3, #0
    64da:	d10a      	bne.n	64f2 <do_import_name+0x62>
        // empty name (eg, from . import x)
        *q_base = MP_QSTR_;
    64dc:	687b      	ldr	r3, [r7, #4]
    64de:	2201      	movs	r2, #1
    64e0:	601a      	str	r2, [r3, #0]
        EMIT_ARG(import, MP_QSTR_, MP_EMIT_IMPORT_NAME); // import the empty string
    64e2:	68fb      	ldr	r3, [r7, #12]
    64e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    64e6:	2200      	movs	r2, #0
    64e8:	2101      	movs	r1, #1
    64ea:	4618      	mov	r0, r3
    64ec:	f003 ff22 	bl	a334 <mp_emit_bc_import>
                    EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]), MP_EMIT_ATTR_LOAD);
                }
            }
        }
    }
}
    64f0:	e0ba      	b.n	6668 <do_import_name+0x1d8>
    } else if (MP_PARSE_NODE_IS_ID(pn)) {
    64f2:	68bb      	ldr	r3, [r7, #8]
    64f4:	f003 030f 	and.w	r3, r3, #15
    64f8:	2b02      	cmp	r3, #2
    64fa:	d114      	bne.n	6526 <do_import_name+0x96>
        qstr q_full = MP_PARSE_NODE_LEAF_ARG(pn);
    64fc:	68bb      	ldr	r3, [r7, #8]
    64fe:	091b      	lsrs	r3, r3, #4
    6500:	62bb      	str	r3, [r7, #40]	; 0x28
        if (!is_as) {
    6502:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    6506:	f083 0301 	eor.w	r3, r3, #1
    650a:	b2db      	uxtb	r3, r3
    650c:	2b00      	cmp	r3, #0
    650e:	d002      	beq.n	6516 <do_import_name+0x86>
            *q_base = q_full;
    6510:	687b      	ldr	r3, [r7, #4]
    6512:	6aba      	ldr	r2, [r7, #40]	; 0x28
    6514:	601a      	str	r2, [r3, #0]
        EMIT_ARG(import, q_full, MP_EMIT_IMPORT_NAME);
    6516:	68fb      	ldr	r3, [r7, #12]
    6518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    651a:	2200      	movs	r2, #0
    651c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    651e:	4618      	mov	r0, r3
    6520:	f003 ff08 	bl	a334 <mp_emit_bc_import>
}
    6524:	e0a0      	b.n	6668 <do_import_name+0x1d8>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_dotted_name)); // should be
    6526:	68bb      	ldr	r3, [r7, #8]
    6528:	2b00      	cmp	r3, #0
    652a:	d009      	beq.n	6540 <do_import_name+0xb0>
    652c:	68bb      	ldr	r3, [r7, #8]
    652e:	f003 0303 	and.w	r3, r3, #3
    6532:	2b00      	cmp	r3, #0
    6534:	d104      	bne.n	6540 <do_import_name+0xb0>
    6536:	68bb      	ldr	r3, [r7, #8]
    6538:	685b      	ldr	r3, [r3, #4]
    653a:	b2db      	uxtb	r3, r3
    653c:	2b66      	cmp	r3, #102	; 0x66
    653e:	d006      	beq.n	654e <do_import_name+0xbe>
    6540:	4b4b      	ldr	r3, [pc, #300]	; (6670 <do_import_name+0x1e0>)
    6542:	4a4c      	ldr	r2, [pc, #304]	; (6674 <do_import_name+0x1e4>)
    6544:	f240 411f 	movw	r1, #1055	; 0x41f
    6548:	484b      	ldr	r0, [pc, #300]	; (6678 <do_import_name+0x1e8>)
    654a:	f015 f91b 	bl	1b784 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    654e:	68bb      	ldr	r3, [r7, #8]
    6550:	627b      	str	r3, [r7, #36]	; 0x24
            if (!is_as) {
    6552:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    6556:	f083 0301 	eor.w	r3, r3, #1
    655a:	b2db      	uxtb	r3, r3
    655c:	2b00      	cmp	r3, #0
    655e:	d004      	beq.n	656a <do_import_name+0xda>
                *q_base = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    6560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6562:	689b      	ldr	r3, [r3, #8]
    6564:	091a      	lsrs	r2, r3, #4
    6566:	687b      	ldr	r3, [r7, #4]
    6568:	601a      	str	r2, [r3, #0]
            int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    656c:	685b      	ldr	r3, [r3, #4]
    656e:	0a1b      	lsrs	r3, r3, #8
    6570:	623b      	str	r3, [r7, #32]
            int len = n - 1;
    6572:	6a3b      	ldr	r3, [r7, #32]
    6574:	3b01      	subs	r3, #1
    6576:	643b      	str	r3, [r7, #64]	; 0x40
            for (int i = 0; i < n; i++) {
    6578:	2300      	movs	r3, #0
    657a:	63fb      	str	r3, [r7, #60]	; 0x3c
    657c:	e00f      	b.n	659e <do_import_name+0x10e>
                len += qstr_len(MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]));
    657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6580:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6582:	3202      	adds	r2, #2
    6584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6588:	091b      	lsrs	r3, r3, #4
    658a:	4618      	mov	r0, r3
    658c:	f7fa feec 	bl	1368 <qstr_len>
    6590:	4602      	mov	r2, r0
    6592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6594:	4413      	add	r3, r2
    6596:	643b      	str	r3, [r7, #64]	; 0x40
            for (int i = 0; i < n; i++) {
    6598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    659a:	3301      	adds	r3, #1
    659c:	63fb      	str	r3, [r7, #60]	; 0x3c
    659e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    65a0:	6a3b      	ldr	r3, [r7, #32]
    65a2:	429a      	cmp	r2, r3
    65a4:	dbeb      	blt.n	657e <do_import_name+0xee>
            char *q_ptr = mp_local_alloc(len);
    65a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    65a8:	3307      	adds	r3, #7
    65aa:	3307      	adds	r3, #7
    65ac:	08db      	lsrs	r3, r3, #3
    65ae:	00db      	lsls	r3, r3, #3
    65b0:	ebad 0d03 	sub.w	sp, sp, r3
    65b4:	466b      	mov	r3, sp
    65b6:	3307      	adds	r3, #7
    65b8:	08db      	lsrs	r3, r3, #3
    65ba:	00db      	lsls	r3, r3, #3
    65bc:	61fb      	str	r3, [r7, #28]
            char *str_dest = q_ptr;
    65be:	69fb      	ldr	r3, [r7, #28]
    65c0:	63bb      	str	r3, [r7, #56]	; 0x38
            for (int i = 0; i < n; i++) {
    65c2:	2300      	movs	r3, #0
    65c4:	637b      	str	r3, [r7, #52]	; 0x34
    65c6:	e021      	b.n	660c <do_import_name+0x17c>
                if (i > 0) {
    65c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    65ca:	2b00      	cmp	r3, #0
    65cc:	dd04      	ble.n	65d8 <do_import_name+0x148>
                    *str_dest++ = '.';
    65ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    65d0:	1c5a      	adds	r2, r3, #1
    65d2:	63ba      	str	r2, [r7, #56]	; 0x38
    65d4:	222e      	movs	r2, #46	; 0x2e
    65d6:	701a      	strb	r2, [r3, #0]
                const byte *str_src = qstr_data(MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]), &str_src_len);
    65d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    65da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    65dc:	3202      	adds	r2, #2
    65de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    65e2:	091b      	lsrs	r3, r3, #4
    65e4:	f107 0210 	add.w	r2, r7, #16
    65e8:	4611      	mov	r1, r2
    65ea:	4618      	mov	r0, r3
    65ec:	f7fa feda 	bl	13a4 <qstr_data>
    65f0:	61b8      	str	r0, [r7, #24]
                memcpy(str_dest, str_src, str_src_len);
    65f2:	693b      	ldr	r3, [r7, #16]
    65f4:	461a      	mov	r2, r3
    65f6:	69b9      	ldr	r1, [r7, #24]
    65f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    65fa:	f016 fbc9 	bl	1cd90 <memcpy>
                str_dest += str_src_len;
    65fe:	693b      	ldr	r3, [r7, #16]
    6600:	6bba      	ldr	r2, [r7, #56]	; 0x38
    6602:	4413      	add	r3, r2
    6604:	63bb      	str	r3, [r7, #56]	; 0x38
            for (int i = 0; i < n; i++) {
    6606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6608:	3301      	adds	r3, #1
    660a:	637b      	str	r3, [r7, #52]	; 0x34
    660c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    660e:	6a3b      	ldr	r3, [r7, #32]
    6610:	429a      	cmp	r2, r3
    6612:	dbd9      	blt.n	65c8 <do_import_name+0x138>
            qstr q_full = qstr_from_strn(q_ptr, len);
    6614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6616:	4619      	mov	r1, r3
    6618:	69f8      	ldr	r0, [r7, #28]
    661a:	f7fa fdd9 	bl	11d0 <qstr_from_strn>
    661e:	6178      	str	r0, [r7, #20]
            mp_local_free(q_ptr);
    6620:	69f8      	ldr	r0, [r7, #28]
    6622:	f7fe fc53 	bl	4ecc <mp_local_free>
            EMIT_ARG(import, q_full, MP_EMIT_IMPORT_NAME);
    6626:	68fb      	ldr	r3, [r7, #12]
    6628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    662a:	2200      	movs	r2, #0
    662c:	6979      	ldr	r1, [r7, #20]
    662e:	4618      	mov	r0, r3
    6630:	f003 fe80 	bl	a334 <mp_emit_bc_import>
            if (is_as) {
    6634:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    6638:	2b00      	cmp	r3, #0
    663a:	d015      	beq.n	6668 <do_import_name+0x1d8>
                for (int i = 1; i < n; i++) {
    663c:	2301      	movs	r3, #1
    663e:	633b      	str	r3, [r7, #48]	; 0x30
    6640:	e00e      	b.n	6660 <do_import_name+0x1d0>
                    EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]), MP_EMIT_ATTR_LOAD);
    6642:	68fb      	ldr	r3, [r7, #12]
    6644:	6a98      	ldr	r0, [r3, #40]	; 0x28
    6646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    664a:	3202      	adds	r2, #2
    664c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6650:	091b      	lsrs	r3, r3, #4
    6652:	2200      	movs	r2, #0
    6654:	4619      	mov	r1, r3
    6656:	f003 ffbd 	bl	a5d4 <mp_emit_bc_attr>
                for (int i = 1; i < n; i++) {
    665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    665c:	3301      	adds	r3, #1
    665e:	633b      	str	r3, [r7, #48]	; 0x30
    6660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    6662:	6a3b      	ldr	r3, [r7, #32]
    6664:	429a      	cmp	r2, r3
    6666:	dbec      	blt.n	6642 <do_import_name+0x1b2>
}
    6668:	bf00      	nop
    666a:	3748      	adds	r7, #72	; 0x48
    666c:	46bd      	mov	sp, r7
    666e:	bd80      	pop	{r7, pc}
    6670:	000206b8 	.word	0x000206b8
    6674:	00020f84 	.word	0x00020f84
    6678:	00020358 	.word	0x00020358

0000667c <compile_dotted_as_name>:

STATIC void compile_dotted_as_name(compiler_t *comp, mp_parse_node_t pn) {
    667c:	b580      	push	{r7, lr}
    667e:	b084      	sub	sp, #16
    6680:	af00      	add	r7, sp, #0
    6682:	6078      	str	r0, [r7, #4]
    6684:	6039      	str	r1, [r7, #0]
    EMIT_ARG(load_const_small_int, 0); // level 0 import
    6686:	687b      	ldr	r3, [r7, #4]
    6688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    668a:	2100      	movs	r1, #0
    668c:	4618      	mov	r0, r3
    668e:	f003 feb5 	bl	a3fc <mp_emit_bc_load_const_small_int>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE); // not importing from anything
    6692:	687b      	ldr	r3, [r7, #4]
    6694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6696:	210e      	movs	r1, #14
    6698:	4618      	mov	r0, r3
    669a:	f003 fe73 	bl	a384 <mp_emit_bc_load_const_tok>
    qstr q_base;
    do_import_name(comp, pn, &q_base);
    669e:	f107 030c 	add.w	r3, r7, #12
    66a2:	461a      	mov	r2, r3
    66a4:	6839      	ldr	r1, [r7, #0]
    66a6:	6878      	ldr	r0, [r7, #4]
    66a8:	f7ff fef2 	bl	6490 <do_import_name>
    compile_store_id(comp, q_base);
    66ac:	68fb      	ldr	r3, [r7, #12]
    66ae:	4619      	mov	r1, r3
    66b0:	6878      	ldr	r0, [r7, #4]
    66b2:	f7fe fd5f 	bl	5174 <compile_store_id>
}
    66b6:	bf00      	nop
    66b8:	3710      	adds	r7, #16
    66ba:	46bd      	mov	sp, r7
    66bc:	bd80      	pop	{r7, pc}
    66be:	bf00      	nop

000066c0 <compile_import_name>:

STATIC void compile_import_name(compiler_t *comp, mp_parse_node_struct_t *pns) {
    66c0:	b580      	push	{r7, lr}
    66c2:	b082      	sub	sp, #8
    66c4:	af00      	add	r7, sp, #0
    66c6:	6078      	str	r0, [r7, #4]
    66c8:	6039      	str	r1, [r7, #0]
    apply_to_single_or_list(comp, pns->nodes[0], PN_dotted_as_names, compile_dotted_as_name);
    66ca:	683b      	ldr	r3, [r7, #0]
    66cc:	6899      	ldr	r1, [r3, #8]
    66ce:	4b04      	ldr	r3, [pc, #16]	; (66e0 <compile_import_name+0x20>)
    66d0:	2265      	movs	r2, #101	; 0x65
    66d2:	6878      	ldr	r0, [r7, #4]
    66d4:	f7fe fcc6 	bl	5064 <apply_to_single_or_list>
}
    66d8:	bf00      	nop
    66da:	3708      	adds	r7, #8
    66dc:	46bd      	mov	sp, r7
    66de:	bd80      	pop	{r7, pc}
    66e0:	0000667d 	.word	0x0000667d

000066e4 <compile_import_from>:

STATIC void compile_import_from(compiler_t *comp, mp_parse_node_struct_t *pns) {
    66e4:	b580      	push	{r7, lr}
    66e6:	b094      	sub	sp, #80	; 0x50
    66e8:	af00      	add	r7, sp, #0
    66ea:	6078      	str	r0, [r7, #4]
    66ec:	6039      	str	r1, [r7, #0]
    mp_parse_node_t pn_import_source = pns->nodes[0];
    66ee:	683b      	ldr	r3, [r7, #0]
    66f0:	689b      	ldr	r3, [r3, #8]
    66f2:	64fb      	str	r3, [r7, #76]	; 0x4c

    // extract the preceding .'s (if any) for a relative import, to compute the import level
    uint import_level = 0;
    66f4:	2300      	movs	r3, #0
    66f6:	64bb      	str	r3, [r7, #72]	; 0x48
    do {
        mp_parse_node_t pn_rel;
        if (MP_PARSE_NODE_IS_TOKEN(pn_import_source) || MP_PARSE_NODE_IS_STRUCT_KIND(pn_import_source, PN_one_or_more_period_or_ellipsis)) {
    66f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    66fa:	f003 030f 	and.w	r3, r3, #15
    66fe:	2b0e      	cmp	r3, #14
    6700:	d00c      	beq.n	671c <compile_import_from+0x38>
    6702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6704:	2b00      	cmp	r3, #0
    6706:	d00e      	beq.n	6726 <compile_import_from+0x42>
    6708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    670a:	f003 0303 	and.w	r3, r3, #3
    670e:	2b00      	cmp	r3, #0
    6710:	d109      	bne.n	6726 <compile_import_from+0x42>
    6712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6714:	685b      	ldr	r3, [r3, #4]
    6716:	b2db      	uxtb	r3, r3
    6718:	2b5f      	cmp	r3, #95	; 0x5f
    671a:	d104      	bne.n	6726 <compile_import_from+0x42>
            // This covers relative imports with dots only like "from .. import"
            pn_rel = pn_import_source;
    671c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    671e:	61fb      	str	r3, [r7, #28]
            pn_import_source = MP_PARSE_NODE_NULL;
    6720:	2300      	movs	r3, #0
    6722:	64fb      	str	r3, [r7, #76]	; 0x4c
    6724:	e01e      	b.n	6764 <compile_import_from+0x80>
        } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn_import_source, PN_import_from_2b)) {
    6726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6728:	2b00      	cmp	r3, #0
    672a:	d03e      	beq.n	67aa <compile_import_from+0xc6>
    672c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    672e:	f003 0303 	and.w	r3, r3, #3
    6732:	2b00      	cmp	r3, #0
    6734:	d139      	bne.n	67aa <compile_import_from+0xc6>
    6736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6738:	685b      	ldr	r3, [r3, #4]
    673a:	b2db      	uxtb	r3, r3
    673c:	2b5c      	cmp	r3, #92	; 0x5c
    673e:	d134      	bne.n	67aa <compile_import_from+0xc6>
            // This covers relative imports starting with dot(s) like "from .foo import"
            mp_parse_node_struct_t *pns_2b = (mp_parse_node_struct_t*)pn_import_source;
    6740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6742:	63bb      	str	r3, [r7, #56]	; 0x38
            pn_rel = pns_2b->nodes[0];
    6744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6746:	689b      	ldr	r3, [r3, #8]
    6748:	61fb      	str	r3, [r7, #28]
            pn_import_source = pns_2b->nodes[1];
    674a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    674c:	68db      	ldr	r3, [r3, #12]
    674e:	64fb      	str	r3, [r7, #76]	; 0x4c
            assert(!MP_PARSE_NODE_IS_NULL(pn_import_source)); // should not be
    6750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6752:	2b00      	cmp	r3, #0
    6754:	d106      	bne.n	6764 <compile_import_from+0x80>
    6756:	4b7f      	ldr	r3, [pc, #508]	; (6954 <compile_import_from+0x270>)
    6758:	4a7f      	ldr	r2, [pc, #508]	; (6958 <compile_import_from+0x274>)
    675a:	f240 415e 	movw	r1, #1118	; 0x45e
    675e:	487f      	ldr	r0, [pc, #508]	; (695c <compile_import_from+0x278>)
    6760:	f015 f810 	bl	1b784 <__assert_func>
            break;
        }

        // get the list of . and/or ...'s
        mp_parse_node_t *nodes;
        int n = mp_parse_node_extract_list(&pn_rel, PN_one_or_more_period_or_ellipsis, &nodes);
    6764:	f107 0218 	add.w	r2, r7, #24
    6768:	f107 031c 	add.w	r3, r7, #28
    676c:	215f      	movs	r1, #95	; 0x5f
    676e:	4618      	mov	r0, r3
    6770:	f7fd fad0 	bl	3d14 <mp_parse_node_extract_list>
    6774:	6378      	str	r0, [r7, #52]	; 0x34

        // count the total number of .'s
        for (int i = 0; i < n; i++) {
    6776:	2300      	movs	r3, #0
    6778:	647b      	str	r3, [r7, #68]	; 0x44
    677a:	e012      	b.n	67a2 <compile_import_from+0xbe>
            if (MP_PARSE_NODE_IS_TOKEN_KIND(nodes[i], MP_TOKEN_DEL_PERIOD)) {
    677c:	69ba      	ldr	r2, [r7, #24]
    677e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6780:	009b      	lsls	r3, r3, #2
    6782:	4413      	add	r3, r2
    6784:	681b      	ldr	r3, [r3, #0]
    6786:	f240 42ae 	movw	r2, #1198	; 0x4ae
    678a:	4293      	cmp	r3, r2
    678c:	d103      	bne.n	6796 <compile_import_from+0xb2>
                import_level++;
    678e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    6790:	3301      	adds	r3, #1
    6792:	64bb      	str	r3, [r7, #72]	; 0x48
    6794:	e002      	b.n	679c <compile_import_from+0xb8>
            } else {
                // should be an MP_TOKEN_ELLIPSIS
                import_level += 3;
    6796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    6798:	3303      	adds	r3, #3
    679a:	64bb      	str	r3, [r7, #72]	; 0x48
        for (int i = 0; i < n; i++) {
    679c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    679e:	3301      	adds	r3, #1
    67a0:	647b      	str	r3, [r7, #68]	; 0x44
    67a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    67a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    67a6:	429a      	cmp	r2, r3
    67a8:	dbe8      	blt.n	677c <compile_import_from+0x98>
            }
        }
    } while (0);

    if (MP_PARSE_NODE_IS_TOKEN_KIND(pns->nodes[1], MP_TOKEN_OP_STAR)) {
    67aa:	683b      	ldr	r3, [r7, #0]
    67ac:	68db      	ldr	r3, [r3, #12]
    67ae:	f240 321e 	movw	r2, #798	; 0x31e
    67b2:	4293      	cmp	r3, r2
    67b4:	d122      	bne.n	67fc <compile_import_from+0x118>
        EMIT_ARG(load_const_small_int, import_level);
    67b6:	687b      	ldr	r3, [r7, #4]
    67b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
    67bc:	4611      	mov	r1, r2
    67be:	4618      	mov	r0, r3
    67c0:	f003 fe1c 	bl	a3fc <mp_emit_bc_load_const_small_int>

        // build the "fromlist" tuple
        EMIT_ARG(load_const_str, MP_QSTR__star_);
    67c4:	687b      	ldr	r3, [r7, #4]
    67c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67c8:	2128      	movs	r1, #40	; 0x28
    67ca:	4618      	mov	r0, r3
    67cc:	f003 fe38 	bl	a440 <mp_emit_bc_load_const_str>
        EMIT_ARG(build, 1, MP_EMIT_BUILD_TUPLE);
    67d0:	687b      	ldr	r3, [r7, #4]
    67d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67d4:	2200      	movs	r2, #0
    67d6:	2101      	movs	r1, #1
    67d8:	4618      	mov	r0, r3
    67da:	f004 f973 	bl	aac4 <mp_emit_bc_build>

        // do the import
        qstr dummy_q;
        do_import_name(comp, pn_import_source, &dummy_q);
    67de:	f107 0314 	add.w	r3, r7, #20
    67e2:	461a      	mov	r2, r3
    67e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    67e6:	6878      	ldr	r0, [r7, #4]
    67e8:	f7ff fe52 	bl	6490 <do_import_name>
        EMIT_ARG(import, MP_QSTR_NULL, MP_EMIT_IMPORT_STAR);
    67ec:	687b      	ldr	r3, [r7, #4]
    67ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67f0:	2202      	movs	r2, #2
    67f2:	2100      	movs	r1, #0
    67f4:	4618      	mov	r0, r3
    67f6:	f003 fd9d 	bl	a334 <mp_emit_bc_import>
                compile_store_id(comp, MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]));
            }
        }
        EMIT(pop_top);
    }
}
    67fa:	e0a7      	b.n	694c <compile_import_from+0x268>
        EMIT_ARG(load_const_small_int, import_level);
    67fc:	687b      	ldr	r3, [r7, #4]
    67fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6800:	6cba      	ldr	r2, [r7, #72]	; 0x48
    6802:	4611      	mov	r1, r2
    6804:	4618      	mov	r0, r3
    6806:	f003 fdf9 	bl	a3fc <mp_emit_bc_load_const_small_int>
        int n = mp_parse_node_extract_list(&pns->nodes[1], PN_import_as_names, &pn_nodes);
    680a:	683b      	ldr	r3, [r7, #0]
    680c:	330c      	adds	r3, #12
    680e:	f107 0210 	add.w	r2, r7, #16
    6812:	2164      	movs	r1, #100	; 0x64
    6814:	4618      	mov	r0, r3
    6816:	f7fd fa7d 	bl	3d14 <mp_parse_node_extract_list>
    681a:	6338      	str	r0, [r7, #48]	; 0x30
        for (int i = 0; i < n; i++) {
    681c:	2300      	movs	r3, #0
    681e:	643b      	str	r3, [r7, #64]	; 0x40
    6820:	e032      	b.n	6888 <compile_import_from+0x1a4>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_nodes[i], PN_import_as_name));
    6822:	693a      	ldr	r2, [r7, #16]
    6824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6826:	009b      	lsls	r3, r3, #2
    6828:	4413      	add	r3, r2
    682a:	681b      	ldr	r3, [r3, #0]
    682c:	2b00      	cmp	r3, #0
    682e:	d011      	beq.n	6854 <compile_import_from+0x170>
    6830:	693a      	ldr	r2, [r7, #16]
    6832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6834:	009b      	lsls	r3, r3, #2
    6836:	4413      	add	r3, r2
    6838:	681b      	ldr	r3, [r3, #0]
    683a:	f003 0303 	and.w	r3, r3, #3
    683e:	2b00      	cmp	r3, #0
    6840:	d108      	bne.n	6854 <compile_import_from+0x170>
    6842:	693a      	ldr	r2, [r7, #16]
    6844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6846:	009b      	lsls	r3, r3, #2
    6848:	4413      	add	r3, r2
    684a:	681b      	ldr	r3, [r3, #0]
    684c:	685b      	ldr	r3, [r3, #4]
    684e:	b2db      	uxtb	r3, r3
    6850:	2b61      	cmp	r3, #97	; 0x61
    6852:	d006      	beq.n	6862 <compile_import_from+0x17e>
    6854:	4b42      	ldr	r3, [pc, #264]	; (6960 <compile_import_from+0x27c>)
    6856:	4a40      	ldr	r2, [pc, #256]	; (6958 <compile_import_from+0x274>)
    6858:	f240 4186 	movw	r1, #1158	; 0x486
    685c:	483f      	ldr	r0, [pc, #252]	; (695c <compile_import_from+0x278>)
    685e:	f014 ff91 	bl	1b784 <__assert_func>
            mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pn_nodes[i];
    6862:	693a      	ldr	r2, [r7, #16]
    6864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6866:	009b      	lsls	r3, r3, #2
    6868:	4413      	add	r3, r2
    686a:	681b      	ldr	r3, [r3, #0]
    686c:	62fb      	str	r3, [r7, #44]	; 0x2c
            qstr id2 = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[0]); // should be id
    686e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6870:	689b      	ldr	r3, [r3, #8]
    6872:	091b      	lsrs	r3, r3, #4
    6874:	62bb      	str	r3, [r7, #40]	; 0x28
            EMIT_ARG(load_const_str, id2);
    6876:	687b      	ldr	r3, [r7, #4]
    6878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    687a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    687c:	4618      	mov	r0, r3
    687e:	f003 fddf 	bl	a440 <mp_emit_bc_load_const_str>
        for (int i = 0; i < n; i++) {
    6882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6884:	3301      	adds	r3, #1
    6886:	643b      	str	r3, [r7, #64]	; 0x40
    6888:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    688a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    688c:	429a      	cmp	r2, r3
    688e:	dbc8      	blt.n	6822 <compile_import_from+0x13e>
        EMIT_ARG(build, n, MP_EMIT_BUILD_TUPLE);
    6890:	687b      	ldr	r3, [r7, #4]
    6892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6894:	6b39      	ldr	r1, [r7, #48]	; 0x30
    6896:	2200      	movs	r2, #0
    6898:	4618      	mov	r0, r3
    689a:	f004 f913 	bl	aac4 <mp_emit_bc_build>
        do_import_name(comp, pn_import_source, &dummy_q);
    689e:	f107 030c 	add.w	r3, r7, #12
    68a2:	461a      	mov	r2, r3
    68a4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    68a6:	6878      	ldr	r0, [r7, #4]
    68a8:	f7ff fdf2 	bl	6490 <do_import_name>
        for (int i = 0; i < n; i++) {
    68ac:	2300      	movs	r3, #0
    68ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    68b0:	e043      	b.n	693a <compile_import_from+0x256>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_nodes[i], PN_import_as_name));
    68b2:	693a      	ldr	r2, [r7, #16]
    68b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    68b6:	009b      	lsls	r3, r3, #2
    68b8:	4413      	add	r3, r2
    68ba:	681b      	ldr	r3, [r3, #0]
    68bc:	2b00      	cmp	r3, #0
    68be:	d011      	beq.n	68e4 <compile_import_from+0x200>
    68c0:	693a      	ldr	r2, [r7, #16]
    68c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    68c4:	009b      	lsls	r3, r3, #2
    68c6:	4413      	add	r3, r2
    68c8:	681b      	ldr	r3, [r3, #0]
    68ca:	f003 0303 	and.w	r3, r3, #3
    68ce:	2b00      	cmp	r3, #0
    68d0:	d108      	bne.n	68e4 <compile_import_from+0x200>
    68d2:	693a      	ldr	r2, [r7, #16]
    68d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    68d6:	009b      	lsls	r3, r3, #2
    68d8:	4413      	add	r3, r2
    68da:	681b      	ldr	r3, [r3, #0]
    68dc:	685b      	ldr	r3, [r3, #4]
    68de:	b2db      	uxtb	r3, r3
    68e0:	2b61      	cmp	r3, #97	; 0x61
    68e2:	d006      	beq.n	68f2 <compile_import_from+0x20e>
    68e4:	4b1e      	ldr	r3, [pc, #120]	; (6960 <compile_import_from+0x27c>)
    68e6:	4a1c      	ldr	r2, [pc, #112]	; (6958 <compile_import_from+0x274>)
    68e8:	f240 4191 	movw	r1, #1169	; 0x491
    68ec:	481b      	ldr	r0, [pc, #108]	; (695c <compile_import_from+0x278>)
    68ee:	f014 ff49 	bl	1b784 <__assert_func>
            mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pn_nodes[i];
    68f2:	693a      	ldr	r2, [r7, #16]
    68f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    68f6:	009b      	lsls	r3, r3, #2
    68f8:	4413      	add	r3, r2
    68fa:	681b      	ldr	r3, [r3, #0]
    68fc:	627b      	str	r3, [r7, #36]	; 0x24
            qstr id2 = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[0]); // should be id
    68fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6900:	689b      	ldr	r3, [r3, #8]
    6902:	091b      	lsrs	r3, r3, #4
    6904:	623b      	str	r3, [r7, #32]
            EMIT_ARG(import, id2, MP_EMIT_IMPORT_FROM);
    6906:	687b      	ldr	r3, [r7, #4]
    6908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    690a:	2201      	movs	r2, #1
    690c:	6a39      	ldr	r1, [r7, #32]
    690e:	4618      	mov	r0, r3
    6910:	f003 fd10 	bl	a334 <mp_emit_bc_import>
            if (MP_PARSE_NODE_IS_NULL(pns3->nodes[1])) {
    6914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6916:	68db      	ldr	r3, [r3, #12]
    6918:	2b00      	cmp	r3, #0
    691a:	d104      	bne.n	6926 <compile_import_from+0x242>
                compile_store_id(comp, id2);
    691c:	6a39      	ldr	r1, [r7, #32]
    691e:	6878      	ldr	r0, [r7, #4]
    6920:	f7fe fc28 	bl	5174 <compile_store_id>
    6924:	e006      	b.n	6934 <compile_import_from+0x250>
                compile_store_id(comp, MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]));
    6926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6928:	68db      	ldr	r3, [r3, #12]
    692a:	091b      	lsrs	r3, r3, #4
    692c:	4619      	mov	r1, r3
    692e:	6878      	ldr	r0, [r7, #4]
    6930:	f7fe fc20 	bl	5174 <compile_store_id>
        for (int i = 0; i < n; i++) {
    6934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6936:	3301      	adds	r3, #1
    6938:	63fb      	str	r3, [r7, #60]	; 0x3c
    693a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    693e:	429a      	cmp	r2, r3
    6940:	dbb7      	blt.n	68b2 <compile_import_from+0x1ce>
        EMIT(pop_top);
    6942:	687b      	ldr	r3, [r7, #4]
    6944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6946:	4618      	mov	r0, r3
    6948:	f003 fefa 	bl	a740 <mp_emit_bc_pop_top>
}
    694c:	bf00      	nop
    694e:	3750      	adds	r7, #80	; 0x50
    6950:	46bd      	mov	sp, r7
    6952:	bd80      	pop	{r7, pc}
    6954:	000206ec 	.word	0x000206ec
    6958:	00020f94 	.word	0x00020f94
    695c:	00020358 	.word	0x00020358
    6960:	00020718 	.word	0x00020718

00006964 <compile_declare_global>:

STATIC void compile_declare_global(compiler_t *comp, mp_parse_node_t pn, id_info_t *id_info) {
    6964:	b580      	push	{r7, lr}
    6966:	b084      	sub	sp, #16
    6968:	af00      	add	r7, sp, #0
    696a:	60f8      	str	r0, [r7, #12]
    696c:	60b9      	str	r1, [r7, #8]
    696e:	607a      	str	r2, [r7, #4]
    if (id_info->kind != ID_INFO_KIND_UNDECIDED && id_info->kind != ID_INFO_KIND_GLOBAL_EXPLICIT) {
    6970:	687b      	ldr	r3, [r7, #4]
    6972:	781b      	ldrb	r3, [r3, #0]
    6974:	2b00      	cmp	r3, #0
    6976:	d009      	beq.n	698c <compile_declare_global+0x28>
    6978:	687b      	ldr	r3, [r7, #4]
    697a:	781b      	ldrb	r3, [r3, #0]
    697c:	2b02      	cmp	r3, #2
    697e:	d005      	beq.n	698c <compile_declare_global+0x28>
        compile_syntax_error(comp, pn, "identifier redefined as global");
    6980:	4a0d      	ldr	r2, [pc, #52]	; (69b8 <compile_declare_global+0x54>)
    6982:	68b9      	ldr	r1, [r7, #8]
    6984:	68f8      	ldr	r0, [r7, #12]
    6986:	f7fe fac7 	bl	4f18 <compile_syntax_error>
        return;
    698a:	e011      	b.n	69b0 <compile_declare_global+0x4c>
    }
    id_info->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    698c:	687b      	ldr	r3, [r7, #4]
    698e:	2202      	movs	r2, #2
    6990:	701a      	strb	r2, [r3, #0]

    // if the id exists in the global scope, set its kind to EXPLICIT_GLOBAL
    id_info = scope_find_global(comp->scope_cur, id_info->qst);
    6992:	68fb      	ldr	r3, [r7, #12]
    6994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6996:	687b      	ldr	r3, [r7, #4]
    6998:	685b      	ldr	r3, [r3, #4]
    699a:	4619      	mov	r1, r3
    699c:	4610      	mov	r0, r2
    699e:	f7fe f9d7 	bl	4d50 <scope_find_global>
    69a2:	6078      	str	r0, [r7, #4]
    if (id_info != NULL) {
    69a4:	687b      	ldr	r3, [r7, #4]
    69a6:	2b00      	cmp	r3, #0
    69a8:	d002      	beq.n	69b0 <compile_declare_global+0x4c>
        id_info->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    69aa:	687b      	ldr	r3, [r7, #4]
    69ac:	2202      	movs	r2, #2
    69ae:	701a      	strb	r2, [r3, #0]
    }
}
    69b0:	3710      	adds	r7, #16
    69b2:	46bd      	mov	sp, r7
    69b4:	bd80      	pop	{r7, pc}
    69b6:	bf00      	nop
    69b8:	00020758 	.word	0x00020758

000069bc <compile_declare_nonlocal>:

STATIC void compile_declare_nonlocal(compiler_t *comp, mp_parse_node_t pn, id_info_t *id_info) {
    69bc:	b580      	push	{r7, lr}
    69be:	b084      	sub	sp, #16
    69c0:	af00      	add	r7, sp, #0
    69c2:	60f8      	str	r0, [r7, #12]
    69c4:	60b9      	str	r1, [r7, #8]
    69c6:	607a      	str	r2, [r7, #4]
    if (id_info->kind == ID_INFO_KIND_UNDECIDED) {
    69c8:	687b      	ldr	r3, [r7, #4]
    69ca:	781b      	ldrb	r3, [r3, #0]
    69cc:	2b00      	cmp	r3, #0
    69ce:	d112      	bne.n	69f6 <compile_declare_nonlocal+0x3a>
        id_info->kind = ID_INFO_KIND_GLOBAL_IMPLICIT;
    69d0:	687b      	ldr	r3, [r7, #4]
    69d2:	2201      	movs	r2, #1
    69d4:	701a      	strb	r2, [r3, #0]
        scope_check_to_close_over(comp->scope_cur, id_info);
    69d6:	68fb      	ldr	r3, [r7, #12]
    69d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    69da:	6879      	ldr	r1, [r7, #4]
    69dc:	4618      	mov	r0, r3
    69de:	f7fe fa1f 	bl	4e20 <scope_check_to_close_over>
        if (id_info->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    69e2:	687b      	ldr	r3, [r7, #4]
    69e4:	781b      	ldrb	r3, [r3, #0]
    69e6:	2b01      	cmp	r3, #1
    69e8:	d10e      	bne.n	6a08 <compile_declare_nonlocal+0x4c>
            compile_syntax_error(comp, pn, "no binding for nonlocal found");
    69ea:	4a09      	ldr	r2, [pc, #36]	; (6a10 <compile_declare_nonlocal+0x54>)
    69ec:	68b9      	ldr	r1, [r7, #8]
    69ee:	68f8      	ldr	r0, [r7, #12]
    69f0:	f7fe fa92 	bl	4f18 <compile_syntax_error>
        }
    } else if (id_info->kind != ID_INFO_KIND_FREE) {
        compile_syntax_error(comp, pn, "identifier redefined as nonlocal");
    }
}
    69f4:	e008      	b.n	6a08 <compile_declare_nonlocal+0x4c>
    } else if (id_info->kind != ID_INFO_KIND_FREE) {
    69f6:	687b      	ldr	r3, [r7, #4]
    69f8:	781b      	ldrb	r3, [r3, #0]
    69fa:	2b05      	cmp	r3, #5
    69fc:	d004      	beq.n	6a08 <compile_declare_nonlocal+0x4c>
        compile_syntax_error(comp, pn, "identifier redefined as nonlocal");
    69fe:	4a05      	ldr	r2, [pc, #20]	; (6a14 <compile_declare_nonlocal+0x58>)
    6a00:	68b9      	ldr	r1, [r7, #8]
    6a02:	68f8      	ldr	r0, [r7, #12]
    6a04:	f7fe fa88 	bl	4f18 <compile_syntax_error>
}
    6a08:	bf00      	nop
    6a0a:	3710      	adds	r7, #16
    6a0c:	46bd      	mov	sp, r7
    6a0e:	bd80      	pop	{r7, pc}
    6a10:	00020778 	.word	0x00020778
    6a14:	00020798 	.word	0x00020798

00006a18 <compile_global_nonlocal_stmt>:

STATIC void compile_global_nonlocal_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6a18:	b580      	push	{r7, lr}
    6a1a:	b088      	sub	sp, #32
    6a1c:	af00      	add	r7, sp, #0
    6a1e:	6078      	str	r0, [r7, #4]
    6a20:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    6a22:	687b      	ldr	r3, [r7, #4]
    6a24:	795b      	ldrb	r3, [r3, #5]
    6a26:	2b01      	cmp	r3, #1
    6a28:	d14b      	bne.n	6ac2 <compile_global_nonlocal_stmt+0xaa>
        bool is_global = MP_PARSE_NODE_STRUCT_KIND(pns) == PN_global_stmt;
    6a2a:	683b      	ldr	r3, [r7, #0]
    6a2c:	685b      	ldr	r3, [r3, #4]
    6a2e:	b2db      	uxtb	r3, r3
    6a30:	2b10      	cmp	r3, #16
    6a32:	bf0c      	ite	eq
    6a34:	2301      	moveq	r3, #1
    6a36:	2300      	movne	r3, #0
    6a38:	76fb      	strb	r3, [r7, #27]

        if (!is_global && comp->scope_cur->kind == SCOPE_MODULE) {
    6a3a:	7efb      	ldrb	r3, [r7, #27]
    6a3c:	f083 0301 	eor.w	r3, r3, #1
    6a40:	b2db      	uxtb	r3, r3
    6a42:	2b00      	cmp	r3, #0
    6a44:	d00b      	beq.n	6a5e <compile_global_nonlocal_stmt+0x46>
    6a46:	687b      	ldr	r3, [r7, #4]
    6a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a4a:	681b      	ldr	r3, [r3, #0]
    6a4c:	2b00      	cmp	r3, #0
    6a4e:	d106      	bne.n	6a5e <compile_global_nonlocal_stmt+0x46>
            compile_syntax_error(comp, (mp_parse_node_t)pns, "can't declare nonlocal in outer code");
    6a50:	683b      	ldr	r3, [r7, #0]
    6a52:	4a1d      	ldr	r2, [pc, #116]	; (6ac8 <compile_global_nonlocal_stmt+0xb0>)
    6a54:	4619      	mov	r1, r3
    6a56:	6878      	ldr	r0, [r7, #4]
    6a58:	f7fe fa5e 	bl	4f18 <compile_syntax_error>
    6a5c:	e031      	b.n	6ac2 <compile_global_nonlocal_stmt+0xaa>
            return;
        }

        mp_parse_node_t *nodes;
        int n = mp_parse_node_extract_list(&pns->nodes[0], PN_name_list, &nodes);
    6a5e:	683b      	ldr	r3, [r7, #0]
    6a60:	3308      	adds	r3, #8
    6a62:	f107 0208 	add.w	r2, r7, #8
    6a66:	2167      	movs	r1, #103	; 0x67
    6a68:	4618      	mov	r0, r3
    6a6a:	f7fd f953 	bl	3d14 <mp_parse_node_extract_list>
    6a6e:	6178      	str	r0, [r7, #20]
        for (int i = 0; i < n; i++) {
    6a70:	2300      	movs	r3, #0
    6a72:	61fb      	str	r3, [r7, #28]
    6a74:	e021      	b.n	6aba <compile_global_nonlocal_stmt+0xa2>
            qstr qst = MP_PARSE_NODE_LEAF_ARG(nodes[i]);
    6a76:	68ba      	ldr	r2, [r7, #8]
    6a78:	69fb      	ldr	r3, [r7, #28]
    6a7a:	009b      	lsls	r3, r3, #2
    6a7c:	4413      	add	r3, r2
    6a7e:	681b      	ldr	r3, [r3, #0]
    6a80:	091b      	lsrs	r3, r3, #4
    6a82:	613b      	str	r3, [r7, #16]
            id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, qst, ID_INFO_KIND_UNDECIDED);
    6a84:	687b      	ldr	r3, [r7, #4]
    6a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a88:	2200      	movs	r2, #0
    6a8a:	6939      	ldr	r1, [r7, #16]
    6a8c:	4618      	mov	r0, r3
    6a8e:	f7fe f8f1 	bl	4c74 <scope_find_or_add_id>
    6a92:	60f8      	str	r0, [r7, #12]
            if (is_global) {
    6a94:	7efb      	ldrb	r3, [r7, #27]
    6a96:	2b00      	cmp	r3, #0
    6a98:	d006      	beq.n	6aa8 <compile_global_nonlocal_stmt+0x90>
                compile_declare_global(comp, (mp_parse_node_t)pns, id_info);
    6a9a:	683b      	ldr	r3, [r7, #0]
    6a9c:	68fa      	ldr	r2, [r7, #12]
    6a9e:	4619      	mov	r1, r3
    6aa0:	6878      	ldr	r0, [r7, #4]
    6aa2:	f7ff ff5f 	bl	6964 <compile_declare_global>
    6aa6:	e005      	b.n	6ab4 <compile_global_nonlocal_stmt+0x9c>
            } else {
                compile_declare_nonlocal(comp, (mp_parse_node_t)pns, id_info);
    6aa8:	683b      	ldr	r3, [r7, #0]
    6aaa:	68fa      	ldr	r2, [r7, #12]
    6aac:	4619      	mov	r1, r3
    6aae:	6878      	ldr	r0, [r7, #4]
    6ab0:	f7ff ff84 	bl	69bc <compile_declare_nonlocal>
        for (int i = 0; i < n; i++) {
    6ab4:	69fb      	ldr	r3, [r7, #28]
    6ab6:	3301      	adds	r3, #1
    6ab8:	61fb      	str	r3, [r7, #28]
    6aba:	69fa      	ldr	r2, [r7, #28]
    6abc:	697b      	ldr	r3, [r7, #20]
    6abe:	429a      	cmp	r2, r3
    6ac0:	dbd9      	blt.n	6a76 <compile_global_nonlocal_stmt+0x5e>
            }
        }
    }
}
    6ac2:	3720      	adds	r7, #32
    6ac4:	46bd      	mov	sp, r7
    6ac6:	bd80      	pop	{r7, pc}
    6ac8:	000207bc 	.word	0x000207bc

00006acc <compile_assert_stmt>:

STATIC void compile_assert_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6acc:	b580      	push	{r7, lr}
    6ace:	b084      	sub	sp, #16
    6ad0:	af00      	add	r7, sp, #0
    6ad2:	6078      	str	r0, [r7, #4]
    6ad4:	6039      	str	r1, [r7, #0]
    // with optimisations enabled we don't compile assertions
    if (MP_STATE_VM(mp_optimise_value) != 0) {
    6ad6:	4b1c      	ldr	r3, [pc, #112]	; (6b48 <compile_assert_stmt+0x7c>)
    6ad8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    6adc:	2b00      	cmp	r3, #0
    6ade:	d12f      	bne.n	6b40 <compile_assert_stmt+0x74>
        return;
    }

    uint l_end = comp_next_label(comp);
    6ae0:	6878      	ldr	r0, [r7, #4]
    6ae2:	f7fe fa35 	bl	4f50 <comp_next_label>
    6ae6:	60f8      	str	r0, [r7, #12]
    c_if_cond(comp, pns->nodes[0], true, l_end);
    6ae8:	683b      	ldr	r3, [r7, #0]
    6aea:	6899      	ldr	r1, [r3, #8]
    6aec:	68fb      	ldr	r3, [r7, #12]
    6aee:	2201      	movs	r2, #1
    6af0:	6878      	ldr	r0, [r7, #4]
    6af2:	f7fe fbc5 	bl	5280 <c_if_cond>
    EMIT_LOAD_GLOBAL(MP_QSTR_AssertionError); // we load_global instead of load_id, to be consistent with CPython
    6af6:	687b      	ldr	r3, [r7, #4]
    6af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6afa:	2201      	movs	r2, #1
    6afc:	21b8      	movs	r1, #184	; 0xb8
    6afe:	4618      	mov	r0, r3
    6b00:	f003 fcfa 	bl	a4f8 <mp_emit_bc_load_global>
    if (!MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    6b04:	683b      	ldr	r3, [r7, #0]
    6b06:	68db      	ldr	r3, [r3, #12]
    6b08:	2b00      	cmp	r3, #0
    6b0a:	d00c      	beq.n	6b26 <compile_assert_stmt+0x5a>
        // assertion message
        compile_node(comp, pns->nodes[1]);
    6b0c:	683b      	ldr	r3, [r7, #0]
    6b0e:	68db      	ldr	r3, [r3, #12]
    6b10:	4619      	mov	r1, r3
    6b12:	6878      	ldr	r0, [r7, #4]
    6b14:	f001 ffe6 	bl	8ae4 <compile_node>
        EMIT_ARG(call_function, 1, 0, 0);
    6b18:	687b      	ldr	r3, [r7, #4]
    6b1a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    6b1c:	2300      	movs	r3, #0
    6b1e:	2200      	movs	r2, #0
    6b20:	2101      	movs	r1, #1
    6b22:	f004 f907 	bl	ad34 <mp_emit_bc_call_function>
    }
    EMIT_ARG(raise_varargs, 1);
    6b26:	687b      	ldr	r3, [r7, #4]
    6b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b2a:	2101      	movs	r1, #1
    6b2c:	4618      	mov	r0, r3
    6b2e:	f004 f941 	bl	adb4 <mp_emit_bc_raise_varargs>
    EMIT_ARG(label_assign, l_end);
    6b32:	687b      	ldr	r3, [r7, #4]
    6b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b36:	68f9      	ldr	r1, [r7, #12]
    6b38:	4618      	mov	r0, r3
    6b3a:	f003 fba5 	bl	a288 <mp_emit_bc_label_assign>
    6b3e:	e000      	b.n	6b42 <compile_assert_stmt+0x76>
        return;
    6b40:	bf00      	nop
}
    6b42:	3710      	adds	r7, #16
    6b44:	46bd      	mov	sp, r7
    6b46:	bd80      	pop	{r7, pc}
    6b48:	200012f0 	.word	0x200012f0

00006b4c <compile_if_stmt>:

STATIC void compile_if_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6b4c:	b580      	push	{r7, lr}
    6b4e:	b08a      	sub	sp, #40	; 0x28
    6b50:	af00      	add	r7, sp, #0
    6b52:	6078      	str	r0, [r7, #4]
    6b54:	6039      	str	r1, [r7, #0]
    uint l_end = comp_next_label(comp);
    6b56:	6878      	ldr	r0, [r7, #4]
    6b58:	f7fe f9fa 	bl	4f50 <comp_next_label>
    6b5c:	6238      	str	r0, [r7, #32]

    // optimisation: don't emit anything when "if False"
    if (!mp_parse_node_is_const_false(pns->nodes[0])) {
    6b5e:	683b      	ldr	r3, [r7, #0]
    6b60:	689b      	ldr	r3, [r3, #8]
    6b62:	4618      	mov	r0, r3
    6b64:	f7fd f854 	bl	3c10 <mp_parse_node_is_const_false>
    6b68:	4603      	mov	r3, r0
    6b6a:	f083 0301 	eor.w	r3, r3, #1
    6b6e:	b2db      	uxtb	r3, r3
    6b70:	2b00      	cmp	r3, #0
    6b72:	d038      	beq.n	6be6 <compile_if_stmt+0x9a>
        uint l_fail = comp_next_label(comp);
    6b74:	6878      	ldr	r0, [r7, #4]
    6b76:	f7fe f9eb 	bl	4f50 <comp_next_label>
    6b7a:	61f8      	str	r0, [r7, #28]
        c_if_cond(comp, pns->nodes[0], false, l_fail); // if condition
    6b7c:	683b      	ldr	r3, [r7, #0]
    6b7e:	6899      	ldr	r1, [r3, #8]
    6b80:	69fb      	ldr	r3, [r7, #28]
    6b82:	2200      	movs	r2, #0
    6b84:	6878      	ldr	r0, [r7, #4]
    6b86:	f7fe fb7b 	bl	5280 <c_if_cond>

        compile_node(comp, pns->nodes[1]); // if block
    6b8a:	683b      	ldr	r3, [r7, #0]
    6b8c:	68db      	ldr	r3, [r3, #12]
    6b8e:	4619      	mov	r1, r3
    6b90:	6878      	ldr	r0, [r7, #4]
    6b92:	f001 ffa7 	bl	8ae4 <compile_node>

        // optimisation: skip everything else when "if True"
        if (mp_parse_node_is_const_true(pns->nodes[0])) {
    6b96:	683b      	ldr	r3, [r7, #0]
    6b98:	689b      	ldr	r3, [r3, #8]
    6b9a:	4618      	mov	r0, r3
    6b9c:	f7fd f854 	bl	3c48 <mp_parse_node_is_const_true>
    6ba0:	4603      	mov	r3, r0
    6ba2:	2b00      	cmp	r3, #0
    6ba4:	f040 809a 	bne.w	6cdc <compile_if_stmt+0x190>
            goto done;
        }

        if (
            // optimisation: don't jump over non-existent elif/else blocks
            !(MP_PARSE_NODE_IS_NULL(pns->nodes[2]) && MP_PARSE_NODE_IS_NULL(pns->nodes[3]))
    6ba8:	683b      	ldr	r3, [r7, #0]
    6baa:	691b      	ldr	r3, [r3, #16]
        if (
    6bac:	2b00      	cmp	r3, #0
    6bae:	d103      	bne.n	6bb8 <compile_if_stmt+0x6c>
            !(MP_PARSE_NODE_IS_NULL(pns->nodes[2]) && MP_PARSE_NODE_IS_NULL(pns->nodes[3]))
    6bb0:	683b      	ldr	r3, [r7, #0]
    6bb2:	695b      	ldr	r3, [r3, #20]
    6bb4:	2b00      	cmp	r3, #0
    6bb6:	d010      	beq.n	6bda <compile_if_stmt+0x8e>
            // optimisation: don't jump if last instruction was return
            && !EMIT(last_emit_was_return_value)
    6bb8:	687b      	ldr	r3, [r7, #4]
    6bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6bbc:	4618      	mov	r0, r3
    6bbe:	f003 faff 	bl	a1c0 <mp_emit_bc_last_emit_was_return_value>
    6bc2:	4603      	mov	r3, r0
    6bc4:	f083 0301 	eor.w	r3, r3, #1
    6bc8:	b2db      	uxtb	r3, r3
    6bca:	2b00      	cmp	r3, #0
    6bcc:	d005      	beq.n	6bda <compile_if_stmt+0x8e>
            ) {
            // jump over elif/else blocks
            EMIT_ARG(jump, l_end);
    6bce:	687b      	ldr	r3, [r7, #4]
    6bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6bd2:	6a39      	ldr	r1, [r7, #32]
    6bd4:	4618      	mov	r0, r3
    6bd6:	f003 fde5 	bl	a7a4 <mp_emit_bc_jump>
        }

        EMIT_ARG(label_assign, l_fail);
    6bda:	687b      	ldr	r3, [r7, #4]
    6bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6bde:	69f9      	ldr	r1, [r7, #28]
    6be0:	4618      	mov	r0, r3
    6be2:	f003 fb51 	bl	a288 <mp_emit_bc_label_assign>
    }

    // compile elif blocks (if any)
    mp_parse_node_t *pn_elif;
    int n_elif = mp_parse_node_extract_list(&pns->nodes[2], PN_if_stmt_elif_list, &pn_elif);
    6be6:	683b      	ldr	r3, [r7, #0]
    6be8:	3310      	adds	r3, #16
    6bea:	f107 020c 	add.w	r2, r7, #12
    6bee:	216a      	movs	r1, #106	; 0x6a
    6bf0:	4618      	mov	r0, r3
    6bf2:	f7fd f88f 	bl	3d14 <mp_parse_node_extract_list>
    6bf6:	61b8      	str	r0, [r7, #24]
    for (int i = 0; i < n_elif; i++) {
    6bf8:	2300      	movs	r3, #0
    6bfa:	627b      	str	r3, [r7, #36]	; 0x24
    6bfc:	e063      	b.n	6cc6 <compile_if_stmt+0x17a>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_elif[i], PN_if_stmt_elif)); // should be
    6bfe:	68fa      	ldr	r2, [r7, #12]
    6c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6c02:	009b      	lsls	r3, r3, #2
    6c04:	4413      	add	r3, r2
    6c06:	681b      	ldr	r3, [r3, #0]
    6c08:	2b00      	cmp	r3, #0
    6c0a:	d011      	beq.n	6c30 <compile_if_stmt+0xe4>
    6c0c:	68fa      	ldr	r2, [r7, #12]
    6c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6c10:	009b      	lsls	r3, r3, #2
    6c12:	4413      	add	r3, r2
    6c14:	681b      	ldr	r3, [r3, #0]
    6c16:	f003 0303 	and.w	r3, r3, #3
    6c1a:	2b00      	cmp	r3, #0
    6c1c:	d108      	bne.n	6c30 <compile_if_stmt+0xe4>
    6c1e:	68fa      	ldr	r2, [r7, #12]
    6c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6c22:	009b      	lsls	r3, r3, #2
    6c24:	4413      	add	r3, r2
    6c26:	681b      	ldr	r3, [r3, #0]
    6c28:	685b      	ldr	r3, [r3, #4]
    6c2a:	b2db      	uxtb	r3, r3
    6c2c:	2b6b      	cmp	r3, #107	; 0x6b
    6c2e:	d006      	beq.n	6c3e <compile_if_stmt+0xf2>
    6c30:	4b31      	ldr	r3, [pc, #196]	; (6cf8 <compile_if_stmt+0x1ac>)
    6c32:	4a32      	ldr	r2, [pc, #200]	; (6cfc <compile_if_stmt+0x1b0>)
    6c34:	f240 5102 	movw	r1, #1282	; 0x502
    6c38:	4831      	ldr	r0, [pc, #196]	; (6d00 <compile_if_stmt+0x1b4>)
    6c3a:	f014 fda3 	bl	1b784 <__assert_func>
        mp_parse_node_struct_t *pns_elif = (mp_parse_node_struct_t*)pn_elif[i];
    6c3e:	68fa      	ldr	r2, [r7, #12]
    6c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6c42:	009b      	lsls	r3, r3, #2
    6c44:	4413      	add	r3, r2
    6c46:	681b      	ldr	r3, [r3, #0]
    6c48:	617b      	str	r3, [r7, #20]

        // optimisation: don't emit anything when "if False"
        if (!mp_parse_node_is_const_false(pns_elif->nodes[0])) {
    6c4a:	697b      	ldr	r3, [r7, #20]
    6c4c:	689b      	ldr	r3, [r3, #8]
    6c4e:	4618      	mov	r0, r3
    6c50:	f7fc ffde 	bl	3c10 <mp_parse_node_is_const_false>
    6c54:	4603      	mov	r3, r0
    6c56:	f083 0301 	eor.w	r3, r3, #1
    6c5a:	b2db      	uxtb	r3, r3
    6c5c:	2b00      	cmp	r3, #0
    6c5e:	d02f      	beq.n	6cc0 <compile_if_stmt+0x174>
            uint l_fail = comp_next_label(comp);
    6c60:	6878      	ldr	r0, [r7, #4]
    6c62:	f7fe f975 	bl	4f50 <comp_next_label>
    6c66:	6138      	str	r0, [r7, #16]
            c_if_cond(comp, pns_elif->nodes[0], false, l_fail); // elif condition
    6c68:	697b      	ldr	r3, [r7, #20]
    6c6a:	6899      	ldr	r1, [r3, #8]
    6c6c:	693b      	ldr	r3, [r7, #16]
    6c6e:	2200      	movs	r2, #0
    6c70:	6878      	ldr	r0, [r7, #4]
    6c72:	f7fe fb05 	bl	5280 <c_if_cond>

            compile_node(comp, pns_elif->nodes[1]); // elif block
    6c76:	697b      	ldr	r3, [r7, #20]
    6c78:	68db      	ldr	r3, [r3, #12]
    6c7a:	4619      	mov	r1, r3
    6c7c:	6878      	ldr	r0, [r7, #4]
    6c7e:	f001 ff31 	bl	8ae4 <compile_node>

            // optimisation: skip everything else when "elif True"
            if (mp_parse_node_is_const_true(pns_elif->nodes[0])) {
    6c82:	697b      	ldr	r3, [r7, #20]
    6c84:	689b      	ldr	r3, [r3, #8]
    6c86:	4618      	mov	r0, r3
    6c88:	f7fc ffde 	bl	3c48 <mp_parse_node_is_const_true>
    6c8c:	4603      	mov	r3, r0
    6c8e:	2b00      	cmp	r3, #0
    6c90:	d126      	bne.n	6ce0 <compile_if_stmt+0x194>
                goto done;
            }

            // optimisation: don't jump if last instruction was return
            if (!EMIT(last_emit_was_return_value)) {
    6c92:	687b      	ldr	r3, [r7, #4]
    6c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c96:	4618      	mov	r0, r3
    6c98:	f003 fa92 	bl	a1c0 <mp_emit_bc_last_emit_was_return_value>
    6c9c:	4603      	mov	r3, r0
    6c9e:	f083 0301 	eor.w	r3, r3, #1
    6ca2:	b2db      	uxtb	r3, r3
    6ca4:	2b00      	cmp	r3, #0
    6ca6:	d005      	beq.n	6cb4 <compile_if_stmt+0x168>
                EMIT_ARG(jump, l_end);
    6ca8:	687b      	ldr	r3, [r7, #4]
    6caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6cac:	6a39      	ldr	r1, [r7, #32]
    6cae:	4618      	mov	r0, r3
    6cb0:	f003 fd78 	bl	a7a4 <mp_emit_bc_jump>
            }
            EMIT_ARG(label_assign, l_fail);
    6cb4:	687b      	ldr	r3, [r7, #4]
    6cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6cb8:	6939      	ldr	r1, [r7, #16]
    6cba:	4618      	mov	r0, r3
    6cbc:	f003 fae4 	bl	a288 <mp_emit_bc_label_assign>
    for (int i = 0; i < n_elif; i++) {
    6cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6cc2:	3301      	adds	r3, #1
    6cc4:	627b      	str	r3, [r7, #36]	; 0x24
    6cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6cc8:	69bb      	ldr	r3, [r7, #24]
    6cca:	429a      	cmp	r2, r3
    6ccc:	db97      	blt.n	6bfe <compile_if_stmt+0xb2>
        }
    }

    // compile else block
    compile_node(comp, pns->nodes[3]); // can be null
    6cce:	683b      	ldr	r3, [r7, #0]
    6cd0:	695b      	ldr	r3, [r3, #20]
    6cd2:	4619      	mov	r1, r3
    6cd4:	6878      	ldr	r0, [r7, #4]
    6cd6:	f001 ff05 	bl	8ae4 <compile_node>
    6cda:	e002      	b.n	6ce2 <compile_if_stmt+0x196>
            goto done;
    6cdc:	bf00      	nop
    6cde:	e000      	b.n	6ce2 <compile_if_stmt+0x196>
                goto done;
    6ce0:	bf00      	nop

done:
    EMIT_ARG(label_assign, l_end);
    6ce2:	687b      	ldr	r3, [r7, #4]
    6ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6ce6:	6a39      	ldr	r1, [r7, #32]
    6ce8:	4618      	mov	r0, r3
    6cea:	f003 facd 	bl	a288 <mp_emit_bc_label_assign>
}
    6cee:	bf00      	nop
    6cf0:	3728      	adds	r7, #40	; 0x28
    6cf2:	46bd      	mov	sp, r7
    6cf4:	bd80      	pop	{r7, pc}
    6cf6:	bf00      	nop
    6cf8:	000207e4 	.word	0x000207e4
    6cfc:	00020fa8 	.word	0x00020fa8
    6d00:	00020358 	.word	0x00020358

00006d04 <compile_while_stmt>:
#define END_BREAK_CONTINUE_BLOCK \
    comp->break_label = old_break_label; \
    comp->continue_label = old_continue_label; \
    comp->break_continue_except_level = old_break_continue_except_level;

STATIC void compile_while_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6d04:	b580      	push	{r7, lr}
    6d06:	b088      	sub	sp, #32
    6d08:	af00      	add	r7, sp, #0
    6d0a:	6078      	str	r0, [r7, #4]
    6d0c:	6039      	str	r1, [r7, #0]
    START_BREAK_CONTINUE_BLOCK
    6d0e:	687b      	ldr	r3, [r7, #4]
    6d10:	8b1b      	ldrh	r3, [r3, #24]
    6d12:	83fb      	strh	r3, [r7, #30]
    6d14:	687b      	ldr	r3, [r7, #4]
    6d16:	8b5b      	ldrh	r3, [r3, #26]
    6d18:	83bb      	strh	r3, [r7, #28]
    6d1a:	687b      	ldr	r3, [r7, #4]
    6d1c:	8bdb      	ldrh	r3, [r3, #30]
    6d1e:	837b      	strh	r3, [r7, #26]
    6d20:	6878      	ldr	r0, [r7, #4]
    6d22:	f7fe f915 	bl	4f50 <comp_next_label>
    6d26:	6178      	str	r0, [r7, #20]
    6d28:	6878      	ldr	r0, [r7, #4]
    6d2a:	f7fe f911 	bl	4f50 <comp_next_label>
    6d2e:	6138      	str	r0, [r7, #16]
    6d30:	697b      	ldr	r3, [r7, #20]
    6d32:	b29a      	uxth	r2, r3
    6d34:	687b      	ldr	r3, [r7, #4]
    6d36:	831a      	strh	r2, [r3, #24]
    6d38:	693b      	ldr	r3, [r7, #16]
    6d3a:	b29a      	uxth	r2, r3
    6d3c:	687b      	ldr	r3, [r7, #4]
    6d3e:	835a      	strh	r2, [r3, #26]
    6d40:	687b      	ldr	r3, [r7, #4]
    6d42:	8b9a      	ldrh	r2, [r3, #28]
    6d44:	687b      	ldr	r3, [r7, #4]
    6d46:	83da      	strh	r2, [r3, #30]

    if (!mp_parse_node_is_const_false(pns->nodes[0])) { // optimisation: don't emit anything for "while False"
    6d48:	683b      	ldr	r3, [r7, #0]
    6d4a:	689b      	ldr	r3, [r3, #8]
    6d4c:	4618      	mov	r0, r3
    6d4e:	f7fc ff5f 	bl	3c10 <mp_parse_node_is_const_false>
    6d52:	4603      	mov	r3, r0
    6d54:	f083 0301 	eor.w	r3, r3, #1
    6d58:	b2db      	uxtb	r3, r3
    6d5a:	2b00      	cmp	r3, #0
    6d5c:	d02d      	beq.n	6dba <compile_while_stmt+0xb6>
        uint top_label = comp_next_label(comp);
    6d5e:	6878      	ldr	r0, [r7, #4]
    6d60:	f7fe f8f6 	bl	4f50 <comp_next_label>
    6d64:	60f8      	str	r0, [r7, #12]
        if (!mp_parse_node_is_const_true(pns->nodes[0])) { // optimisation: don't jump to cond for "while True"
    6d66:	683b      	ldr	r3, [r7, #0]
    6d68:	689b      	ldr	r3, [r3, #8]
    6d6a:	4618      	mov	r0, r3
    6d6c:	f7fc ff6c 	bl	3c48 <mp_parse_node_is_const_true>
    6d70:	4603      	mov	r3, r0
    6d72:	f083 0301 	eor.w	r3, r3, #1
    6d76:	b2db      	uxtb	r3, r3
    6d78:	2b00      	cmp	r3, #0
    6d7a:	d005      	beq.n	6d88 <compile_while_stmt+0x84>
            EMIT_ARG(jump, continue_label);
    6d7c:	687b      	ldr	r3, [r7, #4]
    6d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d80:	6939      	ldr	r1, [r7, #16]
    6d82:	4618      	mov	r0, r3
    6d84:	f003 fd0e 	bl	a7a4 <mp_emit_bc_jump>
        }
        EMIT_ARG(label_assign, top_label);
    6d88:	687b      	ldr	r3, [r7, #4]
    6d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d8c:	68f9      	ldr	r1, [r7, #12]
    6d8e:	4618      	mov	r0, r3
    6d90:	f003 fa7a 	bl	a288 <mp_emit_bc_label_assign>
        compile_node(comp, pns->nodes[1]); // body
    6d94:	683b      	ldr	r3, [r7, #0]
    6d96:	68db      	ldr	r3, [r3, #12]
    6d98:	4619      	mov	r1, r3
    6d9a:	6878      	ldr	r0, [r7, #4]
    6d9c:	f001 fea2 	bl	8ae4 <compile_node>
        EMIT_ARG(label_assign, continue_label);
    6da0:	687b      	ldr	r3, [r7, #4]
    6da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6da4:	6939      	ldr	r1, [r7, #16]
    6da6:	4618      	mov	r0, r3
    6da8:	f003 fa6e 	bl	a288 <mp_emit_bc_label_assign>
        c_if_cond(comp, pns->nodes[0], true, top_label); // condition
    6dac:	683b      	ldr	r3, [r7, #0]
    6dae:	6899      	ldr	r1, [r3, #8]
    6db0:	68fb      	ldr	r3, [r7, #12]
    6db2:	2201      	movs	r2, #1
    6db4:	6878      	ldr	r0, [r7, #4]
    6db6:	f7fe fa63 	bl	5280 <c_if_cond>
    }

    // break/continue apply to outer loop (if any) in the else block
    END_BREAK_CONTINUE_BLOCK
    6dba:	687b      	ldr	r3, [r7, #4]
    6dbc:	8bfa      	ldrh	r2, [r7, #30]
    6dbe:	831a      	strh	r2, [r3, #24]
    6dc0:	687b      	ldr	r3, [r7, #4]
    6dc2:	8bba      	ldrh	r2, [r7, #28]
    6dc4:	835a      	strh	r2, [r3, #26]
    6dc6:	687b      	ldr	r3, [r7, #4]
    6dc8:	8b7a      	ldrh	r2, [r7, #26]
    6dca:	83da      	strh	r2, [r3, #30]

    compile_node(comp, pns->nodes[2]); // else
    6dcc:	683b      	ldr	r3, [r7, #0]
    6dce:	691b      	ldr	r3, [r3, #16]
    6dd0:	4619      	mov	r1, r3
    6dd2:	6878      	ldr	r0, [r7, #4]
    6dd4:	f001 fe86 	bl	8ae4 <compile_node>

    EMIT_ARG(label_assign, break_label);
    6dd8:	687b      	ldr	r3, [r7, #4]
    6dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6ddc:	6979      	ldr	r1, [r7, #20]
    6dde:	4618      	mov	r0, r3
    6de0:	f003 fa52 	bl	a288 <mp_emit_bc_label_assign>
}
    6de4:	bf00      	nop
    6de6:	3720      	adds	r7, #32
    6de8:	46bd      	mov	sp, r7
    6dea:	bd80      	pop	{r7, pc}

00006dec <compile_for_stmt_optimised_range>:
//    (<step> is a constant for us, so no need to worry about it changing)
//
// If <end> is a small-int, then the stack during the for-loop contains just
// the current value of <var>.  Otherwise, the stack contains <end> then the
// current value of <var>.
STATIC void compile_for_stmt_optimised_range(compiler_t *comp, mp_parse_node_t pn_var, mp_parse_node_t pn_start, mp_parse_node_t pn_end, mp_parse_node_t pn_step, mp_parse_node_t pn_body, mp_parse_node_t pn_else) {
    6dec:	b580      	push	{r7, lr}
    6dee:	b08c      	sub	sp, #48	; 0x30
    6df0:	af00      	add	r7, sp, #0
    6df2:	60f8      	str	r0, [r7, #12]
    6df4:	60b9      	str	r1, [r7, #8]
    6df6:	607a      	str	r2, [r7, #4]
    6df8:	603b      	str	r3, [r7, #0]
    START_BREAK_CONTINUE_BLOCK
    6dfa:	68fb      	ldr	r3, [r7, #12]
    6dfc:	8b1b      	ldrh	r3, [r3, #24]
    6dfe:	857b      	strh	r3, [r7, #42]	; 0x2a
    6e00:	68fb      	ldr	r3, [r7, #12]
    6e02:	8b5b      	ldrh	r3, [r3, #26]
    6e04:	853b      	strh	r3, [r7, #40]	; 0x28
    6e06:	68fb      	ldr	r3, [r7, #12]
    6e08:	8bdb      	ldrh	r3, [r3, #30]
    6e0a:	84fb      	strh	r3, [r7, #38]	; 0x26
    6e0c:	68f8      	ldr	r0, [r7, #12]
    6e0e:	f7fe f89f 	bl	4f50 <comp_next_label>
    6e12:	6238      	str	r0, [r7, #32]
    6e14:	68f8      	ldr	r0, [r7, #12]
    6e16:	f7fe f89b 	bl	4f50 <comp_next_label>
    6e1a:	61f8      	str	r0, [r7, #28]
    6e1c:	6a3b      	ldr	r3, [r7, #32]
    6e1e:	b29a      	uxth	r2, r3
    6e20:	68fb      	ldr	r3, [r7, #12]
    6e22:	831a      	strh	r2, [r3, #24]
    6e24:	69fb      	ldr	r3, [r7, #28]
    6e26:	b29a      	uxth	r2, r3
    6e28:	68fb      	ldr	r3, [r7, #12]
    6e2a:	835a      	strh	r2, [r3, #26]
    6e2c:	68fb      	ldr	r3, [r7, #12]
    6e2e:	8b9a      	ldrh	r2, [r3, #28]
    6e30:	68fb      	ldr	r3, [r7, #12]
    6e32:	83da      	strh	r2, [r3, #30]

    uint top_label = comp_next_label(comp);
    6e34:	68f8      	ldr	r0, [r7, #12]
    6e36:	f7fe f88b 	bl	4f50 <comp_next_label>
    6e3a:	61b8      	str	r0, [r7, #24]
    uint entry_label = comp_next_label(comp);
    6e3c:	68f8      	ldr	r0, [r7, #12]
    6e3e:	f7fe f887 	bl	4f50 <comp_next_label>
    6e42:	6178      	str	r0, [r7, #20]

    // put the end value on the stack if it's not a small-int constant
    bool end_on_stack = !MP_PARSE_NODE_IS_SMALL_INT(pn_end);
    6e44:	683b      	ldr	r3, [r7, #0]
    6e46:	f003 0301 	and.w	r3, r3, #1
    6e4a:	2b00      	cmp	r3, #0
    6e4c:	bf0c      	ite	eq
    6e4e:	2301      	moveq	r3, #1
    6e50:	2300      	movne	r3, #0
    6e52:	74fb      	strb	r3, [r7, #19]
    if (end_on_stack) {
    6e54:	7cfb      	ldrb	r3, [r7, #19]
    6e56:	2b00      	cmp	r3, #0
    6e58:	d003      	beq.n	6e62 <compile_for_stmt_optimised_range+0x76>
        compile_node(comp, pn_end);
    6e5a:	6839      	ldr	r1, [r7, #0]
    6e5c:	68f8      	ldr	r0, [r7, #12]
    6e5e:	f001 fe41 	bl	8ae4 <compile_node>
    }

    // compile: start
    compile_node(comp, pn_start);
    6e62:	6879      	ldr	r1, [r7, #4]
    6e64:	68f8      	ldr	r0, [r7, #12]
    6e66:	f001 fe3d 	bl	8ae4 <compile_node>

    EMIT_ARG(jump, entry_label);
    6e6a:	68fb      	ldr	r3, [r7, #12]
    6e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e6e:	6979      	ldr	r1, [r7, #20]
    6e70:	4618      	mov	r0, r3
    6e72:	f003 fc97 	bl	a7a4 <mp_emit_bc_jump>
    EMIT_ARG(label_assign, top_label);
    6e76:	68fb      	ldr	r3, [r7, #12]
    6e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e7a:	69b9      	ldr	r1, [r7, #24]
    6e7c:	4618      	mov	r0, r3
    6e7e:	f003 fa03 	bl	a288 <mp_emit_bc_label_assign>

    // duplicate next value and store it to var
    EMIT(dup_top);
    6e82:	68fb      	ldr	r3, [r7, #12]
    6e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e86:	4618      	mov	r0, r3
    6e88:	f003 fc3a 	bl	a700 <mp_emit_bc_dup_top>
    c_assign(comp, pn_var, ASSIGN_STORE);
    6e8c:	2200      	movs	r2, #0
    6e8e:	68b9      	ldr	r1, [r7, #8]
    6e90:	68f8      	ldr	r0, [r7, #12]
    6e92:	f7fe fc93 	bl	57bc <c_assign>

    // compile body
    compile_node(comp, pn_body);
    6e96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    6e98:	68f8      	ldr	r0, [r7, #12]
    6e9a:	f001 fe23 	bl	8ae4 <compile_node>

    EMIT_ARG(label_assign, continue_label);
    6e9e:	68fb      	ldr	r3, [r7, #12]
    6ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6ea2:	69f9      	ldr	r1, [r7, #28]
    6ea4:	4618      	mov	r0, r3
    6ea6:	f003 f9ef 	bl	a288 <mp_emit_bc_label_assign>

    // compile: var + step
    compile_node(comp, pn_step);
    6eaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    6eac:	68f8      	ldr	r0, [r7, #12]
    6eae:	f001 fe19 	bl	8ae4 <compile_node>
    EMIT_ARG(binary_op, MP_BINARY_OP_INPLACE_ADD);
    6eb2:	68fb      	ldr	r3, [r7, #12]
    6eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6eb6:	210e      	movs	r1, #14
    6eb8:	4618      	mov	r0, r3
    6eba:	f003 fdd1 	bl	aa60 <mp_emit_bc_binary_op>

    EMIT_ARG(label_assign, entry_label);
    6ebe:	68fb      	ldr	r3, [r7, #12]
    6ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6ec2:	6979      	ldr	r1, [r7, #20]
    6ec4:	4618      	mov	r0, r3
    6ec6:	f003 f9df 	bl	a288 <mp_emit_bc_label_assign>

    // compile: if var <cond> end: goto top
    if (end_on_stack) {
    6eca:	7cfb      	ldrb	r3, [r7, #19]
    6ecc:	2b00      	cmp	r3, #0
    6ece:	d00a      	beq.n	6ee6 <compile_for_stmt_optimised_range+0xfa>
        EMIT(dup_top_two);
    6ed0:	68fb      	ldr	r3, [r7, #12]
    6ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6ed4:	4618      	mov	r0, r3
    6ed6:	f003 fc23 	bl	a720 <mp_emit_bc_dup_top_two>
        EMIT(rot_two);
    6eda:	68fb      	ldr	r3, [r7, #12]
    6edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6ede:	4618      	mov	r0, r3
    6ee0:	f003 fc40 	bl	a764 <mp_emit_bc_rot_two>
    6ee4:	e008      	b.n	6ef8 <compile_for_stmt_optimised_range+0x10c>
    } else {
        EMIT(dup_top);
    6ee6:	68fb      	ldr	r3, [r7, #12]
    6ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6eea:	4618      	mov	r0, r3
    6eec:	f003 fc08 	bl	a700 <mp_emit_bc_dup_top>
        compile_node(comp, pn_end);
    6ef0:	6839      	ldr	r1, [r7, #0]
    6ef2:	68f8      	ldr	r0, [r7, #12]
    6ef4:	f001 fdf6 	bl	8ae4 <compile_node>
    }
    assert(MP_PARSE_NODE_IS_SMALL_INT(pn_step));
    6ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6efa:	f003 0301 	and.w	r3, r3, #1
    6efe:	2b00      	cmp	r3, #0
    6f00:	d106      	bne.n	6f10 <compile_for_stmt_optimised_range+0x124>
    6f02:	4b38      	ldr	r3, [pc, #224]	; (6fe4 <compile_for_stmt_optimised_range+0x1f8>)
    6f04:	4a38      	ldr	r2, [pc, #224]	; (6fe8 <compile_for_stmt_optimised_range+0x1fc>)
    6f06:	f240 517e 	movw	r1, #1406	; 0x57e
    6f0a:	4838      	ldr	r0, [pc, #224]	; (6fec <compile_for_stmt_optimised_range+0x200>)
    6f0c:	f014 fc3a 	bl	1b784 <__assert_func>
    if (MP_PARSE_NODE_LEAF_SMALL_INT(pn_step) >= 0) {
    6f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6f12:	105b      	asrs	r3, r3, #1
    6f14:	2b00      	cmp	r3, #0
    6f16:	db06      	blt.n	6f26 <compile_for_stmt_optimised_range+0x13a>
        EMIT_ARG(binary_op, MP_BINARY_OP_LESS);
    6f18:	68fb      	ldr	r3, [r7, #12]
    6f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f1c:	2100      	movs	r1, #0
    6f1e:	4618      	mov	r0, r3
    6f20:	f003 fd9e 	bl	aa60 <mp_emit_bc_binary_op>
    6f24:	e005      	b.n	6f32 <compile_for_stmt_optimised_range+0x146>
    } else {
        EMIT_ARG(binary_op, MP_BINARY_OP_MORE);
    6f26:	68fb      	ldr	r3, [r7, #12]
    6f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f2a:	2101      	movs	r1, #1
    6f2c:	4618      	mov	r0, r3
    6f2e:	f003 fd97 	bl	aa60 <mp_emit_bc_binary_op>
    }
    EMIT_ARG(pop_jump_if, true, top_label);
    6f32:	68fb      	ldr	r3, [r7, #12]
    6f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f36:	69ba      	ldr	r2, [r7, #24]
    6f38:	2101      	movs	r1, #1
    6f3a:	4618      	mov	r0, r3
    6f3c:	f003 fc44 	bl	a7c8 <mp_emit_bc_pop_jump_if>

    // break/continue apply to outer loop (if any) in the else block
    END_BREAK_CONTINUE_BLOCK
    6f40:	68fb      	ldr	r3, [r7, #12]
    6f42:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
    6f44:	831a      	strh	r2, [r3, #24]
    6f46:	68fb      	ldr	r3, [r7, #12]
    6f48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    6f4a:	835a      	strh	r2, [r3, #26]
    6f4c:	68fb      	ldr	r3, [r7, #12]
    6f4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    6f50:	83da      	strh	r2, [r3, #30]

    // Compile the else block.  We must pop the iterator variables before
    // executing the else code because it may contain break/continue statements.
    uint end_label = 0;
    6f52:	2300      	movs	r3, #0
    6f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (!MP_PARSE_NODE_IS_NULL(pn_else)) {
    6f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6f58:	2b00      	cmp	r3, #0
    6f5a:	d022      	beq.n	6fa2 <compile_for_stmt_optimised_range+0x1b6>
        // discard final value of "var", and possible "end" value
        EMIT(pop_top);
    6f5c:	68fb      	ldr	r3, [r7, #12]
    6f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f60:	4618      	mov	r0, r3
    6f62:	f003 fbed 	bl	a740 <mp_emit_bc_pop_top>
        if (end_on_stack) {
    6f66:	7cfb      	ldrb	r3, [r7, #19]
    6f68:	2b00      	cmp	r3, #0
    6f6a:	d004      	beq.n	6f76 <compile_for_stmt_optimised_range+0x18a>
            EMIT(pop_top);
    6f6c:	68fb      	ldr	r3, [r7, #12]
    6f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f70:	4618      	mov	r0, r3
    6f72:	f003 fbe5 	bl	a740 <mp_emit_bc_pop_top>
        }
        compile_node(comp, pn_else);
    6f76:	6c39      	ldr	r1, [r7, #64]	; 0x40
    6f78:	68f8      	ldr	r0, [r7, #12]
    6f7a:	f001 fdb3 	bl	8ae4 <compile_node>
        end_label = comp_next_label(comp);
    6f7e:	68f8      	ldr	r0, [r7, #12]
    6f80:	f7fd ffe6 	bl	4f50 <comp_next_label>
    6f84:	62f8      	str	r0, [r7, #44]	; 0x2c
        EMIT_ARG(jump, end_label);
    6f86:	68fb      	ldr	r3, [r7, #12]
    6f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    6f8c:	4618      	mov	r0, r3
    6f8e:	f003 fc09 	bl	a7a4 <mp_emit_bc_jump>
        EMIT_ARG(adjust_stack_size, 1 + end_on_stack);
    6f92:	68fb      	ldr	r3, [r7, #12]
    6f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6f96:	7cfb      	ldrb	r3, [r7, #19]
    6f98:	3301      	adds	r3, #1
    6f9a:	4619      	mov	r1, r3
    6f9c:	4610      	mov	r0, r2
    6f9e:	f003 f921 	bl	a1e4 <mp_emit_bc_adjust_stack_size>
    }

    EMIT_ARG(label_assign, break_label);
    6fa2:	68fb      	ldr	r3, [r7, #12]
    6fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6fa6:	6a39      	ldr	r1, [r7, #32]
    6fa8:	4618      	mov	r0, r3
    6faa:	f003 f96d 	bl	a288 <mp_emit_bc_label_assign>

    // discard final value of var that failed the loop condition
    EMIT(pop_top);
    6fae:	68fb      	ldr	r3, [r7, #12]
    6fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6fb2:	4618      	mov	r0, r3
    6fb4:	f003 fbc4 	bl	a740 <mp_emit_bc_pop_top>

    // discard <end> value if it's on the stack
    if (end_on_stack) {
    6fb8:	7cfb      	ldrb	r3, [r7, #19]
    6fba:	2b00      	cmp	r3, #0
    6fbc:	d004      	beq.n	6fc8 <compile_for_stmt_optimised_range+0x1dc>
        EMIT(pop_top);
    6fbe:	68fb      	ldr	r3, [r7, #12]
    6fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6fc2:	4618      	mov	r0, r3
    6fc4:	f003 fbbc 	bl	a740 <mp_emit_bc_pop_top>
    }

    if (!MP_PARSE_NODE_IS_NULL(pn_else)) {
    6fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6fca:	2b00      	cmp	r3, #0
    6fcc:	d005      	beq.n	6fda <compile_for_stmt_optimised_range+0x1ee>
        EMIT_ARG(label_assign, end_label);
    6fce:	68fb      	ldr	r3, [r7, #12]
    6fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6fd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    6fd4:	4618      	mov	r0, r3
    6fd6:	f003 f957 	bl	a288 <mp_emit_bc_label_assign>
    }
}
    6fda:	bf00      	nop
    6fdc:	3730      	adds	r7, #48	; 0x30
    6fde:	46bd      	mov	sp, r7
    6fe0:	bd80      	pop	{r7, pc}
    6fe2:	bf00      	nop
    6fe4:	00020820 	.word	0x00020820
    6fe8:	00020fb8 	.word	0x00020fb8
    6fec:	00020358 	.word	0x00020358

00006ff0 <compile_for_stmt>:

STATIC void compile_for_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6ff0:	b580      	push	{r7, lr}
    6ff2:	b096      	sub	sp, #88	; 0x58
    6ff4:	af04      	add	r7, sp, #16
    6ff6:	6078      	str	r0, [r7, #4]
    6ff8:	6039      	str	r1, [r7, #0]
    // this bit optimises: for <x> in range(...), turning it into an explicitly incremented variable
    // this is actually slower, but uses no heap memory
    // for viper it will be much, much faster
    if (/*comp->scope_cur->emit_options == MP_EMIT_OPT_VIPER &&*/ MP_PARSE_NODE_IS_ID(pns->nodes[0]) && MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_atom_expr_normal)) {
    6ffa:	683b      	ldr	r3, [r7, #0]
    6ffc:	689b      	ldr	r3, [r3, #8]
    6ffe:	f003 030f 	and.w	r3, r3, #15
    7002:	2b02      	cmp	r3, #2
    7004:	f040 80c2 	bne.w	718c <compile_for_stmt+0x19c>
    7008:	683b      	ldr	r3, [r7, #0]
    700a:	68db      	ldr	r3, [r3, #12]
    700c:	2b00      	cmp	r3, #0
    700e:	f000 80bd 	beq.w	718c <compile_for_stmt+0x19c>
    7012:	683b      	ldr	r3, [r7, #0]
    7014:	68db      	ldr	r3, [r3, #12]
    7016:	f003 0303 	and.w	r3, r3, #3
    701a:	2b00      	cmp	r3, #0
    701c:	f040 80b6 	bne.w	718c <compile_for_stmt+0x19c>
    7020:	683b      	ldr	r3, [r7, #0]
    7022:	68db      	ldr	r3, [r3, #12]
    7024:	685b      	ldr	r3, [r3, #4]
    7026:	b2db      	uxtb	r3, r3
    7028:	2b29      	cmp	r3, #41	; 0x29
    702a:	f040 80af 	bne.w	718c <compile_for_stmt+0x19c>
        mp_parse_node_struct_t *pns_it = (mp_parse_node_struct_t*)pns->nodes[1];
    702e:	683b      	ldr	r3, [r7, #0]
    7030:	68db      	ldr	r3, [r3, #12]
    7032:	637b      	str	r3, [r7, #52]	; 0x34
        if (MP_PARSE_NODE_IS_ID(pns_it->nodes[0])
    7034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7036:	689b      	ldr	r3, [r3, #8]
    7038:	f003 030f 	and.w	r3, r3, #15
    703c:	2b02      	cmp	r3, #2
    703e:	f040 80a5 	bne.w	718c <compile_for_stmt+0x19c>
            && MP_PARSE_NODE_LEAF_ARG(pns_it->nodes[0]) == MP_QSTR_range
    7042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7044:	689b      	ldr	r3, [r3, #8]
    7046:	091b      	lsrs	r3, r3, #4
    7048:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    704c:	f040 809e 	bne.w	718c <compile_for_stmt+0x19c>
            && MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pns_it->nodes[1]) == PN_trailer_paren) {
    7050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7052:	68db      	ldr	r3, [r3, #12]
    7054:	685b      	ldr	r3, [r3, #4]
    7056:	b2db      	uxtb	r3, r3
    7058:	2b2d      	cmp	r3, #45	; 0x2d
    705a:	f040 8097 	bne.w	718c <compile_for_stmt+0x19c>
            mp_parse_node_t pn_range_args = ((mp_parse_node_struct_t*)pns_it->nodes[1])->nodes[0];
    705e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7060:	68db      	ldr	r3, [r3, #12]
    7062:	689b      	ldr	r3, [r3, #8]
    7064:	613b      	str	r3, [r7, #16]
            mp_parse_node_t *args;
            int n_args = mp_parse_node_extract_list(&pn_range_args, PN_arglist, &args);
    7066:	f107 020c 	add.w	r2, r7, #12
    706a:	f107 0310 	add.w	r3, r7, #16
    706e:	2197      	movs	r1, #151	; 0x97
    7070:	4618      	mov	r0, r3
    7072:	f7fc fe4f 	bl	3d14 <mp_parse_node_extract_list>
    7076:	6338      	str	r0, [r7, #48]	; 0x30
            mp_parse_node_t pn_range_start;
            mp_parse_node_t pn_range_end;
            mp_parse_node_t pn_range_step;
            bool optimize = false;
    7078:	2300      	movs	r3, #0
    707a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            if (1 <= n_args && n_args <= 3) {
    707e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7080:	2b00      	cmp	r3, #0
    7082:	dd6f      	ble.n	7164 <compile_for_stmt+0x174>
    7084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7086:	2b03      	cmp	r3, #3
    7088:	dc6c      	bgt.n	7164 <compile_for_stmt+0x174>
                optimize = true;
    708a:	2301      	movs	r3, #1
    708c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                if (n_args == 1) {
    7090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7092:	2b01      	cmp	r3, #1
    7094:	d10b      	bne.n	70ae <compile_for_stmt+0xbe>
                    pn_range_start = mp_parse_node_new_small_int(0);
    7096:	2000      	movs	r0, #0
    7098:	f7fd fefc 	bl	4e94 <mp_parse_node_new_small_int>
    709c:	6478      	str	r0, [r7, #68]	; 0x44
                    pn_range_end = args[0];
    709e:	68fb      	ldr	r3, [r7, #12]
    70a0:	681b      	ldr	r3, [r3, #0]
    70a2:	643b      	str	r3, [r7, #64]	; 0x40
                    pn_range_step = mp_parse_node_new_small_int(1);
    70a4:	2001      	movs	r0, #1
    70a6:	f7fd fef5 	bl	4e94 <mp_parse_node_new_small_int>
    70aa:	63f8      	str	r0, [r7, #60]	; 0x3c
    70ac:	e022      	b.n	70f4 <compile_for_stmt+0x104>
                } else if (n_args == 2) {
    70ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    70b0:	2b02      	cmp	r3, #2
    70b2:	d10a      	bne.n	70ca <compile_for_stmt+0xda>
                    pn_range_start = args[0];
    70b4:	68fb      	ldr	r3, [r7, #12]
    70b6:	681b      	ldr	r3, [r3, #0]
    70b8:	647b      	str	r3, [r7, #68]	; 0x44
                    pn_range_end = args[1];
    70ba:	68fb      	ldr	r3, [r7, #12]
    70bc:	685b      	ldr	r3, [r3, #4]
    70be:	643b      	str	r3, [r7, #64]	; 0x40
                    pn_range_step = mp_parse_node_new_small_int(1);
    70c0:	2001      	movs	r0, #1
    70c2:	f7fd fee7 	bl	4e94 <mp_parse_node_new_small_int>
    70c6:	63f8      	str	r0, [r7, #60]	; 0x3c
    70c8:	e014      	b.n	70f4 <compile_for_stmt+0x104>
                } else {
                    pn_range_start = args[0];
    70ca:	68fb      	ldr	r3, [r7, #12]
    70cc:	681b      	ldr	r3, [r3, #0]
    70ce:	647b      	str	r3, [r7, #68]	; 0x44
                    pn_range_end = args[1];
    70d0:	68fb      	ldr	r3, [r7, #12]
    70d2:	685b      	ldr	r3, [r3, #4]
    70d4:	643b      	str	r3, [r7, #64]	; 0x40
                    pn_range_step = args[2];
    70d6:	68fb      	ldr	r3, [r7, #12]
    70d8:	689b      	ldr	r3, [r3, #8]
    70da:	63fb      	str	r3, [r7, #60]	; 0x3c
                    // the step must be a non-zero constant integer to do the optimisation
                    if (!MP_PARSE_NODE_IS_SMALL_INT(pn_range_step)
    70dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    70de:	f003 0301 	and.w	r3, r3, #1
    70e2:	2b00      	cmp	r3, #0
    70e4:	d003      	beq.n	70ee <compile_for_stmt+0xfe>
                        || MP_PARSE_NODE_LEAF_SMALL_INT(pn_range_step) == 0) {
    70e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    70e8:	105b      	asrs	r3, r3, #1
    70ea:	2b00      	cmp	r3, #0
    70ec:	d102      	bne.n	70f4 <compile_for_stmt+0x104>
                        optimize = false;
    70ee:	2300      	movs	r3, #0
    70f0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }
                }
                // arguments must be able to be compiled as standard expressions
                if (optimize && MP_PARSE_NODE_IS_STRUCT(pn_range_start)) {
    70f4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    70f8:	2b00      	cmp	r3, #0
    70fa:	d017      	beq.n	712c <compile_for_stmt+0x13c>
    70fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    70fe:	2b00      	cmp	r3, #0
    7100:	d014      	beq.n	712c <compile_for_stmt+0x13c>
    7102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7104:	f003 0303 	and.w	r3, r3, #3
    7108:	2b00      	cmp	r3, #0
    710a:	d10f      	bne.n	712c <compile_for_stmt+0x13c>
                    int k = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_range_start);
    710c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    710e:	685b      	ldr	r3, [r3, #4]
    7110:	b2db      	uxtb	r3, r3
    7112:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (k == PN_arglist_star || k == PN_arglist_dbl_star || k == PN_argument) {
    7114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7116:	2b99      	cmp	r3, #153	; 0x99
    7118:	d005      	beq.n	7126 <compile_for_stmt+0x136>
    711a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    711c:	2b9a      	cmp	r3, #154	; 0x9a
    711e:	d002      	beq.n	7126 <compile_for_stmt+0x136>
    7120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7122:	2b9b      	cmp	r3, #155	; 0x9b
    7124:	d102      	bne.n	712c <compile_for_stmt+0x13c>
                        optimize = false;
    7126:	2300      	movs	r3, #0
    7128:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }
                }
                if (optimize && MP_PARSE_NODE_IS_STRUCT(pn_range_end)) {
    712c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    7130:	2b00      	cmp	r3, #0
    7132:	d017      	beq.n	7164 <compile_for_stmt+0x174>
    7134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7136:	2b00      	cmp	r3, #0
    7138:	d014      	beq.n	7164 <compile_for_stmt+0x174>
    713a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    713c:	f003 0303 	and.w	r3, r3, #3
    7140:	2b00      	cmp	r3, #0
    7142:	d10f      	bne.n	7164 <compile_for_stmt+0x174>
                    int k = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_range_end);
    7144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7146:	685b      	ldr	r3, [r3, #4]
    7148:	b2db      	uxtb	r3, r3
    714a:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (k == PN_arglist_star || k == PN_arglist_dbl_star || k == PN_argument) {
    714c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    714e:	2b99      	cmp	r3, #153	; 0x99
    7150:	d005      	beq.n	715e <compile_for_stmt+0x16e>
    7152:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7154:	2b9a      	cmp	r3, #154	; 0x9a
    7156:	d002      	beq.n	715e <compile_for_stmt+0x16e>
    7158:	6abb      	ldr	r3, [r7, #40]	; 0x28
    715a:	2b9b      	cmp	r3, #155	; 0x9b
    715c:	d102      	bne.n	7164 <compile_for_stmt+0x174>
                        optimize = false;
    715e:	2300      	movs	r3, #0
    7160:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }
                }
            }
            if (optimize) {
    7164:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    7168:	2b00      	cmp	r3, #0
    716a:	d00f      	beq.n	718c <compile_for_stmt+0x19c>
                compile_for_stmt_optimised_range(comp, pns->nodes[0], pn_range_start, pn_range_end, pn_range_step, pns->nodes[2], pns->nodes[3]);
    716c:	683b      	ldr	r3, [r7, #0]
    716e:	6899      	ldr	r1, [r3, #8]
    7170:	683b      	ldr	r3, [r7, #0]
    7172:	691b      	ldr	r3, [r3, #16]
    7174:	683a      	ldr	r2, [r7, #0]
    7176:	6952      	ldr	r2, [r2, #20]
    7178:	9202      	str	r2, [sp, #8]
    717a:	9301      	str	r3, [sp, #4]
    717c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    717e:	9300      	str	r3, [sp, #0]
    7180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7182:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    7184:	6878      	ldr	r0, [r7, #4]
    7186:	f7ff fe31 	bl	6dec <compile_for_stmt_optimised_range>
    718a:	e07f      	b.n	728c <compile_for_stmt+0x29c>
                return;
            }
        }
    }

    START_BREAK_CONTINUE_BLOCK
    718c:	687b      	ldr	r3, [r7, #4]
    718e:	8b1b      	ldrh	r3, [r3, #24]
    7190:	84fb      	strh	r3, [r7, #38]	; 0x26
    7192:	687b      	ldr	r3, [r7, #4]
    7194:	8b5b      	ldrh	r3, [r3, #26]
    7196:	84bb      	strh	r3, [r7, #36]	; 0x24
    7198:	687b      	ldr	r3, [r7, #4]
    719a:	8bdb      	ldrh	r3, [r3, #30]
    719c:	847b      	strh	r3, [r7, #34]	; 0x22
    719e:	6878      	ldr	r0, [r7, #4]
    71a0:	f7fd fed6 	bl	4f50 <comp_next_label>
    71a4:	61f8      	str	r0, [r7, #28]
    71a6:	6878      	ldr	r0, [r7, #4]
    71a8:	f7fd fed2 	bl	4f50 <comp_next_label>
    71ac:	61b8      	str	r0, [r7, #24]
    71ae:	69fb      	ldr	r3, [r7, #28]
    71b0:	b29a      	uxth	r2, r3
    71b2:	687b      	ldr	r3, [r7, #4]
    71b4:	831a      	strh	r2, [r3, #24]
    71b6:	69bb      	ldr	r3, [r7, #24]
    71b8:	b29a      	uxth	r2, r3
    71ba:	687b      	ldr	r3, [r7, #4]
    71bc:	835a      	strh	r2, [r3, #26]
    71be:	687b      	ldr	r3, [r7, #4]
    71c0:	8b9a      	ldrh	r2, [r3, #28]
    71c2:	687b      	ldr	r3, [r7, #4]
    71c4:	83da      	strh	r2, [r3, #30]
    comp->break_label |= MP_EMIT_BREAK_FROM_FOR;
    71c6:	687b      	ldr	r3, [r7, #4]
    71c8:	8b1b      	ldrh	r3, [r3, #24]
    71ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    71ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    71d2:	b29a      	uxth	r2, r3
    71d4:	687b      	ldr	r3, [r7, #4]
    71d6:	831a      	strh	r2, [r3, #24]

    uint pop_label = comp_next_label(comp);
    71d8:	6878      	ldr	r0, [r7, #4]
    71da:	f7fd feb9 	bl	4f50 <comp_next_label>
    71de:	6178      	str	r0, [r7, #20]

    compile_node(comp, pns->nodes[1]); // iterator
    71e0:	683b      	ldr	r3, [r7, #0]
    71e2:	68db      	ldr	r3, [r3, #12]
    71e4:	4619      	mov	r1, r3
    71e6:	6878      	ldr	r0, [r7, #4]
    71e8:	f001 fc7c 	bl	8ae4 <compile_node>
    EMIT_ARG(get_iter, true);
    71ec:	687b      	ldr	r3, [r7, #4]
    71ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    71f0:	2101      	movs	r1, #1
    71f2:	4618      	mov	r0, r3
    71f4:	f003 fbc0 	bl	a978 <mp_emit_bc_get_iter>
    EMIT_ARG(label_assign, continue_label);
    71f8:	687b      	ldr	r3, [r7, #4]
    71fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    71fc:	69b9      	ldr	r1, [r7, #24]
    71fe:	4618      	mov	r0, r3
    7200:	f003 f842 	bl	a288 <mp_emit_bc_label_assign>
    EMIT_ARG(for_iter, pop_label);
    7204:	687b      	ldr	r3, [r7, #4]
    7206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7208:	6979      	ldr	r1, [r7, #20]
    720a:	4618      	mov	r0, r3
    720c:	f003 fbd2 	bl	a9b4 <mp_emit_bc_for_iter>
    c_assign(comp, pns->nodes[0], ASSIGN_STORE); // variable
    7210:	683b      	ldr	r3, [r7, #0]
    7212:	689b      	ldr	r3, [r3, #8]
    7214:	2200      	movs	r2, #0
    7216:	4619      	mov	r1, r3
    7218:	6878      	ldr	r0, [r7, #4]
    721a:	f7fe facf 	bl	57bc <c_assign>
    compile_node(comp, pns->nodes[2]); // body
    721e:	683b      	ldr	r3, [r7, #0]
    7220:	691b      	ldr	r3, [r3, #16]
    7222:	4619      	mov	r1, r3
    7224:	6878      	ldr	r0, [r7, #4]
    7226:	f001 fc5d 	bl	8ae4 <compile_node>
    if (!EMIT(last_emit_was_return_value)) {
    722a:	687b      	ldr	r3, [r7, #4]
    722c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    722e:	4618      	mov	r0, r3
    7230:	f002 ffc6 	bl	a1c0 <mp_emit_bc_last_emit_was_return_value>
    7234:	4603      	mov	r3, r0
    7236:	f083 0301 	eor.w	r3, r3, #1
    723a:	b2db      	uxtb	r3, r3
    723c:	2b00      	cmp	r3, #0
    723e:	d005      	beq.n	724c <compile_for_stmt+0x25c>
        EMIT_ARG(jump, continue_label);
    7240:	687b      	ldr	r3, [r7, #4]
    7242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7244:	69b9      	ldr	r1, [r7, #24]
    7246:	4618      	mov	r0, r3
    7248:	f003 faac 	bl	a7a4 <mp_emit_bc_jump>
    }
    EMIT_ARG(label_assign, pop_label);
    724c:	687b      	ldr	r3, [r7, #4]
    724e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7250:	6979      	ldr	r1, [r7, #20]
    7252:	4618      	mov	r0, r3
    7254:	f003 f818 	bl	a288 <mp_emit_bc_label_assign>
    EMIT(for_iter_end);
    7258:	687b      	ldr	r3, [r7, #4]
    725a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    725c:	4618      	mov	r0, r3
    725e:	f003 fbbb 	bl	a9d8 <mp_emit_bc_for_iter_end>

    // break/continue apply to outer loop (if any) in the else block
    END_BREAK_CONTINUE_BLOCK
    7262:	687b      	ldr	r3, [r7, #4]
    7264:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    7266:	831a      	strh	r2, [r3, #24]
    7268:	687b      	ldr	r3, [r7, #4]
    726a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
    726c:	835a      	strh	r2, [r3, #26]
    726e:	687b      	ldr	r3, [r7, #4]
    7270:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
    7272:	83da      	strh	r2, [r3, #30]

    compile_node(comp, pns->nodes[3]); // else (may be empty)
    7274:	683b      	ldr	r3, [r7, #0]
    7276:	695b      	ldr	r3, [r3, #20]
    7278:	4619      	mov	r1, r3
    727a:	6878      	ldr	r0, [r7, #4]
    727c:	f001 fc32 	bl	8ae4 <compile_node>

    EMIT_ARG(label_assign, break_label);
    7280:	687b      	ldr	r3, [r7, #4]
    7282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7284:	69f9      	ldr	r1, [r7, #28]
    7286:	4618      	mov	r0, r3
    7288:	f002 fffe 	bl	a288 <mp_emit_bc_label_assign>
}
    728c:	3748      	adds	r7, #72	; 0x48
    728e:	46bd      	mov	sp, r7
    7290:	bd80      	pop	{r7, pc}
    7292:	bf00      	nop

00007294 <compile_try_except>:

STATIC void compile_try_except(compiler_t *comp, mp_parse_node_t pn_body, int n_except, mp_parse_node_t *pn_excepts, mp_parse_node_t pn_else) {
    7294:	b580      	push	{r7, lr}
    7296:	b08e      	sub	sp, #56	; 0x38
    7298:	af00      	add	r7, sp, #0
    729a:	60f8      	str	r0, [r7, #12]
    729c:	60b9      	str	r1, [r7, #8]
    729e:	607a      	str	r2, [r7, #4]
    72a0:	603b      	str	r3, [r7, #0]
    // setup code
    uint l1 = comp_next_label(comp);
    72a2:	68f8      	ldr	r0, [r7, #12]
    72a4:	f7fd fe54 	bl	4f50 <comp_next_label>
    72a8:	6278      	str	r0, [r7, #36]	; 0x24
    uint success_label = comp_next_label(comp);
    72aa:	68f8      	ldr	r0, [r7, #12]
    72ac:	f7fd fe50 	bl	4f50 <comp_next_label>
    72b0:	6238      	str	r0, [r7, #32]

    compile_increase_except_level(comp, l1, MP_EMIT_SETUP_BLOCK_EXCEPT);
    72b2:	2202      	movs	r2, #2
    72b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    72b6:	68f8      	ldr	r0, [r7, #12]
    72b8:	f7fd fe5a 	bl	4f70 <compile_increase_except_level>

    compile_node(comp, pn_body); // body
    72bc:	68b9      	ldr	r1, [r7, #8]
    72be:	68f8      	ldr	r0, [r7, #12]
    72c0:	f001 fc10 	bl	8ae4 <compile_node>
    EMIT(pop_block);
    72c4:	68fb      	ldr	r3, [r7, #12]
    72c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72c8:	4618      	mov	r0, r3
    72ca:	f003 fb93 	bl	a9f4 <mp_emit_bc_pop_block>
    EMIT_ARG(jump, success_label); // jump over exception handler
    72ce:	68fb      	ldr	r3, [r7, #12]
    72d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72d2:	6a39      	ldr	r1, [r7, #32]
    72d4:	4618      	mov	r0, r3
    72d6:	f003 fa65 	bl	a7a4 <mp_emit_bc_jump>

    EMIT_ARG(label_assign, l1); // start of exception handler
    72da:	68fb      	ldr	r3, [r7, #12]
    72dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72de:	6a79      	ldr	r1, [r7, #36]	; 0x24
    72e0:	4618      	mov	r0, r3
    72e2:	f002 ffd1 	bl	a288 <mp_emit_bc_label_assign>
    EMIT(start_except_handler);
    72e6:	68fb      	ldr	r3, [r7, #12]
    72e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72ea:	4618      	mov	r0, r3
    72ec:	f003 fda8 	bl	ae40 <mp_emit_bc_start_except_handler>

    // at this point the top of the stack contains the exception instance that was raised

    uint l2 = comp_next_label(comp);
    72f0:	68f8      	ldr	r0, [r7, #12]
    72f2:	f7fd fe2d 	bl	4f50 <comp_next_label>
    72f6:	61f8      	str	r0, [r7, #28]

    for (int i = 0; i < n_except; i++) {
    72f8:	2300      	movs	r3, #0
    72fa:	637b      	str	r3, [r7, #52]	; 0x34
    72fc:	e0d4      	b.n	74a8 <compile_try_except+0x214>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_excepts[i], PN_try_stmt_except)); // should be
    72fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7300:	009b      	lsls	r3, r3, #2
    7302:	683a      	ldr	r2, [r7, #0]
    7304:	4413      	add	r3, r2
    7306:	681b      	ldr	r3, [r3, #0]
    7308:	2b00      	cmp	r3, #0
    730a:	d011      	beq.n	7330 <compile_try_except+0x9c>
    730c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    730e:	009b      	lsls	r3, r3, #2
    7310:	683a      	ldr	r2, [r7, #0]
    7312:	4413      	add	r3, r2
    7314:	681b      	ldr	r3, [r3, #0]
    7316:	f003 0303 	and.w	r3, r3, #3
    731a:	2b00      	cmp	r3, #0
    731c:	d108      	bne.n	7330 <compile_try_except+0x9c>
    731e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7320:	009b      	lsls	r3, r3, #2
    7322:	683a      	ldr	r2, [r7, #0]
    7324:	4413      	add	r3, r2
    7326:	681b      	ldr	r3, [r3, #0]
    7328:	685b      	ldr	r3, [r3, #4]
    732a:	b2db      	uxtb	r3, r3
    732c:	2b6e      	cmp	r3, #110	; 0x6e
    732e:	d006      	beq.n	733e <compile_try_except+0xaa>
    7330:	4b6d      	ldr	r3, [pc, #436]	; (74e8 <compile_try_except+0x254>)
    7332:	4a6e      	ldr	r2, [pc, #440]	; (74ec <compile_try_except+0x258>)
    7334:	f240 610c 	movw	r1, #1548	; 0x60c
    7338:	486d      	ldr	r0, [pc, #436]	; (74f0 <compile_try_except+0x25c>)
    733a:	f014 fa23 	bl	1b784 <__assert_func>
        mp_parse_node_struct_t *pns_except = (mp_parse_node_struct_t*)pn_excepts[i];
    733e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7340:	009b      	lsls	r3, r3, #2
    7342:	683a      	ldr	r2, [r7, #0]
    7344:	4413      	add	r3, r2
    7346:	681b      	ldr	r3, [r3, #0]
    7348:	61bb      	str	r3, [r7, #24]

        qstr qstr_exception_local = 0;
    734a:	2300      	movs	r3, #0
    734c:	633b      	str	r3, [r7, #48]	; 0x30
        uint end_finally_label = comp_next_label(comp);
    734e:	68f8      	ldr	r0, [r7, #12]
    7350:	f7fd fdfe 	bl	4f50 <comp_next_label>
    7354:	6178      	str	r0, [r7, #20]

        if (MP_PARSE_NODE_IS_NULL(pns_except->nodes[0])) {
    7356:	69bb      	ldr	r3, [r7, #24]
    7358:	689b      	ldr	r3, [r3, #8]
    735a:	2b00      	cmp	r3, #0
    735c:	d112      	bne.n	7384 <compile_try_except+0xf0>
            // this is a catch all exception handler
            if (i + 1 != n_except) {
    735e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7360:	1c5a      	adds	r2, r3, #1
    7362:	687b      	ldr	r3, [r7, #4]
    7364:	429a      	cmp	r2, r3
    7366:	d03c      	beq.n	73e2 <compile_try_except+0x14e>
                compile_syntax_error(comp, pn_excepts[i], "default 'except' must be last");
    7368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    736a:	009b      	lsls	r3, r3, #2
    736c:	683a      	ldr	r2, [r7, #0]
    736e:	4413      	add	r3, r2
    7370:	681b      	ldr	r3, [r3, #0]
    7372:	4a60      	ldr	r2, [pc, #384]	; (74f4 <compile_try_except+0x260>)
    7374:	4619      	mov	r1, r3
    7376:	68f8      	ldr	r0, [r7, #12]
    7378:	f7fd fdce 	bl	4f18 <compile_syntax_error>
                compile_decrease_except_level(comp);
    737c:	68f8      	ldr	r0, [r7, #12]
    737e:	f7fd fe1b 	bl	4fb8 <compile_decrease_except_level>
                return;
    7382:	e0ae      	b.n	74e2 <compile_try_except+0x24e>
            }
        } else {
            // this exception handler requires a match to a certain type of exception
            mp_parse_node_t pns_exception_expr = pns_except->nodes[0];
    7384:	69bb      	ldr	r3, [r7, #24]
    7386:	689b      	ldr	r3, [r3, #8]
    7388:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (MP_PARSE_NODE_IS_STRUCT(pns_exception_expr)) {
    738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    738c:	2b00      	cmp	r3, #0
    738e:	d012      	beq.n	73b6 <compile_try_except+0x122>
    7390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7392:	f003 0303 	and.w	r3, r3, #3
    7396:	2b00      	cmp	r3, #0
    7398:	d10d      	bne.n	73b6 <compile_try_except+0x122>
                mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pns_exception_expr;
    739a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    739c:	613b      	str	r3, [r7, #16]
                if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_try_stmt_as_name) {
    739e:	693b      	ldr	r3, [r7, #16]
    73a0:	685b      	ldr	r3, [r3, #4]
    73a2:	b2db      	uxtb	r3, r3
    73a4:	2b6f      	cmp	r3, #111	; 0x6f
    73a6:	d106      	bne.n	73b6 <compile_try_except+0x122>
                    // handler binds the exception to a local
                    pns_exception_expr = pns3->nodes[0];
    73a8:	693b      	ldr	r3, [r7, #16]
    73aa:	689b      	ldr	r3, [r3, #8]
    73ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                    qstr_exception_local = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]);
    73ae:	693b      	ldr	r3, [r7, #16]
    73b0:	68db      	ldr	r3, [r3, #12]
    73b2:	091b      	lsrs	r3, r3, #4
    73b4:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }
            EMIT(dup_top);
    73b6:	68fb      	ldr	r3, [r7, #12]
    73b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73ba:	4618      	mov	r0, r3
    73bc:	f003 f9a0 	bl	a700 <mp_emit_bc_dup_top>
            compile_node(comp, pns_exception_expr);
    73c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    73c2:	68f8      	ldr	r0, [r7, #12]
    73c4:	f001 fb8e 	bl	8ae4 <compile_node>
            EMIT_ARG(binary_op, MP_BINARY_OP_EXCEPTION_MATCH);
    73c8:	68fb      	ldr	r3, [r7, #12]
    73ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73cc:	2108      	movs	r1, #8
    73ce:	4618      	mov	r0, r3
    73d0:	f003 fb46 	bl	aa60 <mp_emit_bc_binary_op>
            EMIT_ARG(pop_jump_if, false, end_finally_label);
    73d4:	68fb      	ldr	r3, [r7, #12]
    73d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73d8:	697a      	ldr	r2, [r7, #20]
    73da:	2100      	movs	r1, #0
    73dc:	4618      	mov	r0, r3
    73de:	f003 f9f3 	bl	a7c8 <mp_emit_bc_pop_jump_if>
        }

        // either discard or store the exception instance
        if (qstr_exception_local == 0) {
    73e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    73e4:	2b00      	cmp	r3, #0
    73e6:	d105      	bne.n	73f4 <compile_try_except+0x160>
            EMIT(pop_top);
    73e8:	68fb      	ldr	r3, [r7, #12]
    73ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73ec:	4618      	mov	r0, r3
    73ee:	f003 f9a7 	bl	a740 <mp_emit_bc_pop_top>
    73f2:	e003      	b.n	73fc <compile_try_except+0x168>
        } else {
            compile_store_id(comp, qstr_exception_local);
    73f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
    73f6:	68f8      	ldr	r0, [r7, #12]
    73f8:	f7fd febc 	bl	5174 <compile_store_id>
        }

        uint l3 = 0;
    73fc:	2300      	movs	r3, #0
    73fe:	62bb      	str	r3, [r7, #40]	; 0x28
        if (qstr_exception_local != 0) {
    7400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7402:	2b00      	cmp	r3, #0
    7404:	d008      	beq.n	7418 <compile_try_except+0x184>
            l3 = comp_next_label(comp);
    7406:	68f8      	ldr	r0, [r7, #12]
    7408:	f7fd fda2 	bl	4f50 <comp_next_label>
    740c:	62b8      	str	r0, [r7, #40]	; 0x28
            compile_increase_except_level(comp, l3, MP_EMIT_SETUP_BLOCK_FINALLY);
    740e:	2203      	movs	r2, #3
    7410:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    7412:	68f8      	ldr	r0, [r7, #12]
    7414:	f7fd fdac 	bl	4f70 <compile_increase_except_level>
        }
        compile_node(comp, pns_except->nodes[1]);
    7418:	69bb      	ldr	r3, [r7, #24]
    741a:	68db      	ldr	r3, [r3, #12]
    741c:	4619      	mov	r1, r3
    741e:	68f8      	ldr	r0, [r7, #12]
    7420:	f001 fb60 	bl	8ae4 <compile_node>
        if (qstr_exception_local != 0) {
    7424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7426:	2b00      	cmp	r3, #0
    7428:	d004      	beq.n	7434 <compile_try_except+0x1a0>
            EMIT(pop_block);
    742a:	68fb      	ldr	r3, [r7, #12]
    742c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    742e:	4618      	mov	r0, r3
    7430:	f003 fae0 	bl	a9f4 <mp_emit_bc_pop_block>
        }
        EMIT(pop_except);
    7434:	68fb      	ldr	r3, [r7, #12]
    7436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7438:	4618      	mov	r0, r3
    743a:	f003 faeb 	bl	aa14 <mp_emit_bc_pop_except>
        if (qstr_exception_local != 0) {
    743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7440:	2b00      	cmp	r3, #0
    7442:	d01c      	beq.n	747e <compile_try_except+0x1ea>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    7444:	68fb      	ldr	r3, [r7, #12]
    7446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7448:	210e      	movs	r1, #14
    744a:	4618      	mov	r0, r3
    744c:	f002 ff9a 	bl	a384 <mp_emit_bc_load_const_tok>
            EMIT_ARG(label_assign, l3);
    7450:	68fb      	ldr	r3, [r7, #12]
    7452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    7456:	4618      	mov	r0, r3
    7458:	f002 ff16 	bl	a288 <mp_emit_bc_label_assign>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    745c:	68fb      	ldr	r3, [r7, #12]
    745e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7460:	210e      	movs	r1, #14
    7462:	4618      	mov	r0, r3
    7464:	f002 ff8e 	bl	a384 <mp_emit_bc_load_const_tok>
            compile_store_id(comp, qstr_exception_local);
    7468:	6b39      	ldr	r1, [r7, #48]	; 0x30
    746a:	68f8      	ldr	r0, [r7, #12]
    746c:	f7fd fe82 	bl	5174 <compile_store_id>
            compile_delete_id(comp, qstr_exception_local);
    7470:	6b39      	ldr	r1, [r7, #48]	; 0x30
    7472:	68f8      	ldr	r0, [r7, #12]
    7474:	f7fd fe9c 	bl	51b0 <compile_delete_id>

            compile_decrease_except_level(comp);
    7478:	68f8      	ldr	r0, [r7, #12]
    747a:	f7fd fd9d 	bl	4fb8 <compile_decrease_except_level>
        }
        EMIT_ARG(jump, l2);
    747e:	68fb      	ldr	r3, [r7, #12]
    7480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7482:	69f9      	ldr	r1, [r7, #28]
    7484:	4618      	mov	r0, r3
    7486:	f003 f98d 	bl	a7a4 <mp_emit_bc_jump>
        EMIT_ARG(label_assign, end_finally_label);
    748a:	68fb      	ldr	r3, [r7, #12]
    748c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    748e:	6979      	ldr	r1, [r7, #20]
    7490:	4618      	mov	r0, r3
    7492:	f002 fef9 	bl	a288 <mp_emit_bc_label_assign>
        EMIT_ARG(adjust_stack_size, 1); // stack adjust for the exception instance
    7496:	68fb      	ldr	r3, [r7, #12]
    7498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    749a:	2101      	movs	r1, #1
    749c:	4618      	mov	r0, r3
    749e:	f002 fea1 	bl	a1e4 <mp_emit_bc_adjust_stack_size>
    for (int i = 0; i < n_except; i++) {
    74a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    74a4:	3301      	adds	r3, #1
    74a6:	637b      	str	r3, [r7, #52]	; 0x34
    74a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    74aa:	687b      	ldr	r3, [r7, #4]
    74ac:	429a      	cmp	r2, r3
    74ae:	f6ff af26 	blt.w	72fe <compile_try_except+0x6a>
    }

    compile_decrease_except_level(comp);
    74b2:	68f8      	ldr	r0, [r7, #12]
    74b4:	f7fd fd80 	bl	4fb8 <compile_decrease_except_level>
    EMIT(end_except_handler);
    74b8:	68fb      	ldr	r3, [r7, #12]
    74ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    74bc:	4618      	mov	r0, r3
    74be:	f003 fccb 	bl	ae58 <mp_emit_bc_end_except_handler>

    EMIT_ARG(label_assign, success_label);
    74c2:	68fb      	ldr	r3, [r7, #12]
    74c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    74c6:	6a39      	ldr	r1, [r7, #32]
    74c8:	4618      	mov	r0, r3
    74ca:	f002 fedd 	bl	a288 <mp_emit_bc_label_assign>
    compile_node(comp, pn_else); // else block, can be null
    74ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
    74d0:	68f8      	ldr	r0, [r7, #12]
    74d2:	f001 fb07 	bl	8ae4 <compile_node>
    EMIT_ARG(label_assign, l2);
    74d6:	68fb      	ldr	r3, [r7, #12]
    74d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    74da:	69f9      	ldr	r1, [r7, #28]
    74dc:	4618      	mov	r0, r3
    74de:	f002 fed3 	bl	a288 <mp_emit_bc_label_assign>
}
    74e2:	3738      	adds	r7, #56	; 0x38
    74e4:	46bd      	mov	sp, r7
    74e6:	bd80      	pop	{r7, pc}
    74e8:	00020844 	.word	0x00020844
    74ec:	00020fdc 	.word	0x00020fdc
    74f0:	00020358 	.word	0x00020358
    74f4:	00020884 	.word	0x00020884

000074f8 <compile_try_finally>:

STATIC void compile_try_finally(compiler_t *comp, mp_parse_node_t pn_body, int n_except, mp_parse_node_t *pn_except, mp_parse_node_t pn_else, mp_parse_node_t pn_finally) {
    74f8:	b580      	push	{r7, lr}
    74fa:	b088      	sub	sp, #32
    74fc:	af02      	add	r7, sp, #8
    74fe:	60f8      	str	r0, [r7, #12]
    7500:	60b9      	str	r1, [r7, #8]
    7502:	607a      	str	r2, [r7, #4]
    7504:	603b      	str	r3, [r7, #0]
    uint l_finally_block = comp_next_label(comp);
    7506:	68f8      	ldr	r0, [r7, #12]
    7508:	f7fd fd22 	bl	4f50 <comp_next_label>
    750c:	6178      	str	r0, [r7, #20]

    compile_increase_except_level(comp, l_finally_block, MP_EMIT_SETUP_BLOCK_FINALLY);
    750e:	2203      	movs	r2, #3
    7510:	6979      	ldr	r1, [r7, #20]
    7512:	68f8      	ldr	r0, [r7, #12]
    7514:	f7fd fd2c 	bl	4f70 <compile_increase_except_level>

    if (n_except == 0) {
    7518:	687b      	ldr	r3, [r7, #4]
    751a:	2b00      	cmp	r3, #0
    751c:	d11b      	bne.n	7556 <compile_try_finally+0x5e>
        assert(MP_PARSE_NODE_IS_NULL(pn_else));
    751e:	6a3b      	ldr	r3, [r7, #32]
    7520:	2b00      	cmp	r3, #0
    7522:	d006      	beq.n	7532 <compile_try_finally+0x3a>
    7524:	4b1e      	ldr	r3, [pc, #120]	; (75a0 <compile_try_finally+0xa8>)
    7526:	4a1f      	ldr	r2, [pc, #124]	; (75a4 <compile_try_finally+0xac>)
    7528:	f240 6157 	movw	r1, #1623	; 0x657
    752c:	481e      	ldr	r0, [pc, #120]	; (75a8 <compile_try_finally+0xb0>)
    752e:	f014 f929 	bl	1b784 <__assert_func>
        EMIT_ARG(adjust_stack_size, 3); // stack adjust for possible UNWIND_JUMP state
    7532:	68fb      	ldr	r3, [r7, #12]
    7534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7536:	2103      	movs	r1, #3
    7538:	4618      	mov	r0, r3
    753a:	f002 fe53 	bl	a1e4 <mp_emit_bc_adjust_stack_size>
        compile_node(comp, pn_body);
    753e:	68b9      	ldr	r1, [r7, #8]
    7540:	68f8      	ldr	r0, [r7, #12]
    7542:	f001 facf 	bl	8ae4 <compile_node>
        EMIT_ARG(adjust_stack_size, -3);
    7546:	68fb      	ldr	r3, [r7, #12]
    7548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    754a:	f06f 0102 	mvn.w	r1, #2
    754e:	4618      	mov	r0, r3
    7550:	f002 fe48 	bl	a1e4 <mp_emit_bc_adjust_stack_size>
    7554:	e007      	b.n	7566 <compile_try_finally+0x6e>
    } else {
        compile_try_except(comp, pn_body, n_except, pn_except, pn_else);
    7556:	6a3b      	ldr	r3, [r7, #32]
    7558:	9300      	str	r3, [sp, #0]
    755a:	683b      	ldr	r3, [r7, #0]
    755c:	687a      	ldr	r2, [r7, #4]
    755e:	68b9      	ldr	r1, [r7, #8]
    7560:	68f8      	ldr	r0, [r7, #12]
    7562:	f7ff fe97 	bl	7294 <compile_try_except>
    }
    EMIT(pop_block);
    7566:	68fb      	ldr	r3, [r7, #12]
    7568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    756a:	4618      	mov	r0, r3
    756c:	f003 fa42 	bl	a9f4 <mp_emit_bc_pop_block>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    7570:	68fb      	ldr	r3, [r7, #12]
    7572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7574:	210e      	movs	r1, #14
    7576:	4618      	mov	r0, r3
    7578:	f002 ff04 	bl	a384 <mp_emit_bc_load_const_tok>
    EMIT_ARG(label_assign, l_finally_block);
    757c:	68fb      	ldr	r3, [r7, #12]
    757e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7580:	6979      	ldr	r1, [r7, #20]
    7582:	4618      	mov	r0, r3
    7584:	f002 fe80 	bl	a288 <mp_emit_bc_label_assign>
    compile_node(comp, pn_finally);
    7588:	6a79      	ldr	r1, [r7, #36]	; 0x24
    758a:	68f8      	ldr	r0, [r7, #12]
    758c:	f001 faaa 	bl	8ae4 <compile_node>

    compile_decrease_except_level(comp);
    7590:	68f8      	ldr	r0, [r7, #12]
    7592:	f7fd fd11 	bl	4fb8 <compile_decrease_except_level>
}
    7596:	bf00      	nop
    7598:	3718      	adds	r7, #24
    759a:	46bd      	mov	sp, r7
    759c:	bd80      	pop	{r7, pc}
    759e:	bf00      	nop
    75a0:	000208a4 	.word	0x000208a4
    75a4:	00020ff0 	.word	0x00020ff0
    75a8:	00020358 	.word	0x00020358

000075ac <compile_try_stmt>:

STATIC void compile_try_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    75ac:	b580      	push	{r7, lr}
    75ae:	b08a      	sub	sp, #40	; 0x28
    75b0:	af02      	add	r7, sp, #8
    75b2:	6078      	str	r0, [r7, #4]
    75b4:	6039      	str	r1, [r7, #0]
    assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])); // should be
    75b6:	683b      	ldr	r3, [r7, #0]
    75b8:	68db      	ldr	r3, [r3, #12]
    75ba:	2b00      	cmp	r3, #0
    75bc:	d005      	beq.n	75ca <compile_try_stmt+0x1e>
    75be:	683b      	ldr	r3, [r7, #0]
    75c0:	68db      	ldr	r3, [r3, #12]
    75c2:	f003 0303 	and.w	r3, r3, #3
    75c6:	2b00      	cmp	r3, #0
    75c8:	d006      	beq.n	75d8 <compile_try_stmt+0x2c>
    75ca:	4b30      	ldr	r3, [pc, #192]	; (768c <compile_try_stmt+0xe0>)
    75cc:	4a30      	ldr	r2, [pc, #192]	; (7690 <compile_try_stmt+0xe4>)
    75ce:	f240 6167 	movw	r1, #1639	; 0x667
    75d2:	4830      	ldr	r0, [pc, #192]	; (7694 <compile_try_stmt+0xe8>)
    75d4:	f014 f8d6 	bl	1b784 <__assert_func>
    {
        mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[1];
    75d8:	683b      	ldr	r3, [r7, #0]
    75da:	68db      	ldr	r3, [r3, #12]
    75dc:	61fb      	str	r3, [r7, #28]
        if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_try_stmt_finally) {
    75de:	69fb      	ldr	r3, [r7, #28]
    75e0:	685b      	ldr	r3, [r3, #4]
    75e2:	b2db      	uxtb	r3, r3
    75e4:	2b71      	cmp	r3, #113	; 0x71
    75e6:	d10c      	bne.n	7602 <compile_try_stmt+0x56>
            // just try-finally
            compile_try_finally(comp, pns->nodes[0], 0, NULL, MP_PARSE_NODE_NULL, pns2->nodes[0]);
    75e8:	683b      	ldr	r3, [r7, #0]
    75ea:	6899      	ldr	r1, [r3, #8]
    75ec:	69fb      	ldr	r3, [r7, #28]
    75ee:	689b      	ldr	r3, [r3, #8]
    75f0:	9301      	str	r3, [sp, #4]
    75f2:	2300      	movs	r3, #0
    75f4:	9300      	str	r3, [sp, #0]
    75f6:	2300      	movs	r3, #0
    75f8:	2200      	movs	r2, #0
    75fa:	6878      	ldr	r0, [r7, #4]
    75fc:	f7ff ff7c 	bl	74f8 <compile_try_finally>
            mp_parse_node_t *pn_excepts;
            int n_except = mp_parse_node_extract_list(&pns->nodes[1], PN_try_stmt_except_list, &pn_excepts);
            compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, MP_PARSE_NODE_NULL);
        }
    }
}
    7600:	e040      	b.n	7684 <compile_try_stmt+0xd8>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_try_stmt_except_and_more) {
    7602:	69fb      	ldr	r3, [r7, #28]
    7604:	685b      	ldr	r3, [r3, #4]
    7606:	b2db      	uxtb	r3, r3
    7608:	2b6d      	cmp	r3, #109	; 0x6d
    760a:	d128      	bne.n	765e <compile_try_stmt+0xb2>
            int n_except = mp_parse_node_extract_list(&pns2->nodes[0], PN_try_stmt_except_list, &pn_excepts);
    760c:	69fb      	ldr	r3, [r7, #28]
    760e:	3308      	adds	r3, #8
    7610:	f107 0210 	add.w	r2, r7, #16
    7614:	2170      	movs	r1, #112	; 0x70
    7616:	4618      	mov	r0, r3
    7618:	f7fc fb7c 	bl	3d14 <mp_parse_node_extract_list>
    761c:	61b8      	str	r0, [r7, #24]
            if (MP_PARSE_NODE_IS_NULL(pns2->nodes[2])) {
    761e:	69fb      	ldr	r3, [r7, #28]
    7620:	691b      	ldr	r3, [r3, #16]
    7622:	2b00      	cmp	r3, #0
    7624:	d10b      	bne.n	763e <compile_try_stmt+0x92>
                compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, pns2->nodes[1]);
    7626:	683b      	ldr	r3, [r7, #0]
    7628:	6899      	ldr	r1, [r3, #8]
    762a:	693a      	ldr	r2, [r7, #16]
    762c:	69fb      	ldr	r3, [r7, #28]
    762e:	68db      	ldr	r3, [r3, #12]
    7630:	9300      	str	r3, [sp, #0]
    7632:	4613      	mov	r3, r2
    7634:	69ba      	ldr	r2, [r7, #24]
    7636:	6878      	ldr	r0, [r7, #4]
    7638:	f7ff fe2c 	bl	7294 <compile_try_except>
}
    763c:	e022      	b.n	7684 <compile_try_stmt+0xd8>
                compile_try_finally(comp, pns->nodes[0], n_except, pn_excepts, pns2->nodes[1], ((mp_parse_node_struct_t*)pns2->nodes[2])->nodes[0]);
    763e:	683b      	ldr	r3, [r7, #0]
    7640:	6899      	ldr	r1, [r3, #8]
    7642:	6938      	ldr	r0, [r7, #16]
    7644:	69fb      	ldr	r3, [r7, #28]
    7646:	68db      	ldr	r3, [r3, #12]
    7648:	69fa      	ldr	r2, [r7, #28]
    764a:	6912      	ldr	r2, [r2, #16]
    764c:	6892      	ldr	r2, [r2, #8]
    764e:	9201      	str	r2, [sp, #4]
    7650:	9300      	str	r3, [sp, #0]
    7652:	4603      	mov	r3, r0
    7654:	69ba      	ldr	r2, [r7, #24]
    7656:	6878      	ldr	r0, [r7, #4]
    7658:	f7ff ff4e 	bl	74f8 <compile_try_finally>
}
    765c:	e012      	b.n	7684 <compile_try_stmt+0xd8>
            int n_except = mp_parse_node_extract_list(&pns->nodes[1], PN_try_stmt_except_list, &pn_excepts);
    765e:	683b      	ldr	r3, [r7, #0]
    7660:	330c      	adds	r3, #12
    7662:	f107 020c 	add.w	r2, r7, #12
    7666:	2170      	movs	r1, #112	; 0x70
    7668:	4618      	mov	r0, r3
    766a:	f7fc fb53 	bl	3d14 <mp_parse_node_extract_list>
    766e:	6178      	str	r0, [r7, #20]
            compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, MP_PARSE_NODE_NULL);
    7670:	683b      	ldr	r3, [r7, #0]
    7672:	6899      	ldr	r1, [r3, #8]
    7674:	68fa      	ldr	r2, [r7, #12]
    7676:	2300      	movs	r3, #0
    7678:	9300      	str	r3, [sp, #0]
    767a:	4613      	mov	r3, r2
    767c:	697a      	ldr	r2, [r7, #20]
    767e:	6878      	ldr	r0, [r7, #4]
    7680:	f7ff fe08 	bl	7294 <compile_try_except>
}
    7684:	bf00      	nop
    7686:	3720      	adds	r7, #32
    7688:	46bd      	mov	sp, r7
    768a:	bd80      	pop	{r7, pc}
    768c:	000208c4 	.word	0x000208c4
    7690:	00021004 	.word	0x00021004
    7694:	00020358 	.word	0x00020358

00007698 <compile_with_stmt_helper>:

STATIC void compile_with_stmt_helper(compiler_t *comp, int n, mp_parse_node_t *nodes, mp_parse_node_t body) {
    7698:	b580      	push	{r7, lr}
    769a:	b086      	sub	sp, #24
    769c:	af00      	add	r7, sp, #0
    769e:	60f8      	str	r0, [r7, #12]
    76a0:	60b9      	str	r1, [r7, #8]
    76a2:	607a      	str	r2, [r7, #4]
    76a4:	603b      	str	r3, [r7, #0]
    if (n == 0) {
    76a6:	68bb      	ldr	r3, [r7, #8]
    76a8:	2b00      	cmp	r3, #0
    76aa:	d104      	bne.n	76b6 <compile_with_stmt_helper+0x1e>
        // no more pre-bits, compile the body of the with
        compile_node(comp, body);
    76ac:	6839      	ldr	r1, [r7, #0]
    76ae:	68f8      	ldr	r0, [r7, #12]
    76b0:	f001 fa18 	bl	8ae4 <compile_node>
        // finish this with block
        EMIT_ARG(with_cleanup, l_end);
        reserve_labels_for_native(comp, 3); // used by native's with_cleanup
        compile_decrease_except_level(comp);
    }
}
    76b4:	e04a      	b.n	774c <compile_with_stmt_helper+0xb4>
        uint l_end = comp_next_label(comp);
    76b6:	68f8      	ldr	r0, [r7, #12]
    76b8:	f7fd fc4a 	bl	4f50 <comp_next_label>
    76bc:	6178      	str	r0, [r7, #20]
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes[0], PN_with_item)) {
    76be:	687b      	ldr	r3, [r7, #4]
    76c0:	681b      	ldr	r3, [r3, #0]
    76c2:	2b00      	cmp	r3, #0
    76c4:	d021      	beq.n	770a <compile_with_stmt_helper+0x72>
    76c6:	687b      	ldr	r3, [r7, #4]
    76c8:	681b      	ldr	r3, [r3, #0]
    76ca:	f003 0303 	and.w	r3, r3, #3
    76ce:	2b00      	cmp	r3, #0
    76d0:	d11b      	bne.n	770a <compile_with_stmt_helper+0x72>
    76d2:	687b      	ldr	r3, [r7, #4]
    76d4:	681b      	ldr	r3, [r3, #0]
    76d6:	685b      	ldr	r3, [r3, #4]
    76d8:	b2db      	uxtb	r3, r3
    76da:	2b74      	cmp	r3, #116	; 0x74
    76dc:	d115      	bne.n	770a <compile_with_stmt_helper+0x72>
            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)nodes[0];
    76de:	687b      	ldr	r3, [r7, #4]
    76e0:	681b      	ldr	r3, [r3, #0]
    76e2:	613b      	str	r3, [r7, #16]
            compile_node(comp, pns->nodes[0]);
    76e4:	693b      	ldr	r3, [r7, #16]
    76e6:	689b      	ldr	r3, [r3, #8]
    76e8:	4619      	mov	r1, r3
    76ea:	68f8      	ldr	r0, [r7, #12]
    76ec:	f001 f9fa 	bl	8ae4 <compile_node>
            compile_increase_except_level(comp, l_end, MP_EMIT_SETUP_BLOCK_WITH);
    76f0:	2200      	movs	r2, #0
    76f2:	6979      	ldr	r1, [r7, #20]
    76f4:	68f8      	ldr	r0, [r7, #12]
    76f6:	f7fd fc3b 	bl	4f70 <compile_increase_except_level>
            c_assign(comp, pns->nodes[1], ASSIGN_STORE);
    76fa:	693b      	ldr	r3, [r7, #16]
    76fc:	68db      	ldr	r3, [r3, #12]
    76fe:	2200      	movs	r2, #0
    7700:	4619      	mov	r1, r3
    7702:	68f8      	ldr	r0, [r7, #12]
    7704:	f7fe f85a 	bl	57bc <c_assign>
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes[0], PN_with_item)) {
    7708:	e00f      	b.n	772a <compile_with_stmt_helper+0x92>
            compile_node(comp, nodes[0]);
    770a:	687b      	ldr	r3, [r7, #4]
    770c:	681b      	ldr	r3, [r3, #0]
    770e:	4619      	mov	r1, r3
    7710:	68f8      	ldr	r0, [r7, #12]
    7712:	f001 f9e7 	bl	8ae4 <compile_node>
            compile_increase_except_level(comp, l_end, MP_EMIT_SETUP_BLOCK_WITH);
    7716:	2200      	movs	r2, #0
    7718:	6979      	ldr	r1, [r7, #20]
    771a:	68f8      	ldr	r0, [r7, #12]
    771c:	f7fd fc28 	bl	4f70 <compile_increase_except_level>
            EMIT(pop_top);
    7720:	68fb      	ldr	r3, [r7, #12]
    7722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7724:	4618      	mov	r0, r3
    7726:	f003 f80b 	bl	a740 <mp_emit_bc_pop_top>
        compile_with_stmt_helper(comp, n - 1, nodes + 1, body);
    772a:	68bb      	ldr	r3, [r7, #8]
    772c:	1e59      	subs	r1, r3, #1
    772e:	687b      	ldr	r3, [r7, #4]
    7730:	1d1a      	adds	r2, r3, #4
    7732:	683b      	ldr	r3, [r7, #0]
    7734:	68f8      	ldr	r0, [r7, #12]
    7736:	f7ff ffaf 	bl	7698 <compile_with_stmt_helper>
        EMIT_ARG(with_cleanup, l_end);
    773a:	68fb      	ldr	r3, [r7, #12]
    773c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    773e:	6979      	ldr	r1, [r7, #20]
    7740:	4618      	mov	r0, r3
    7742:	f003 f8e5 	bl	a910 <mp_emit_bc_with_cleanup>
        compile_decrease_except_level(comp);
    7746:	68f8      	ldr	r0, [r7, #12]
    7748:	f7fd fc36 	bl	4fb8 <compile_decrease_except_level>
}
    774c:	bf00      	nop
    774e:	3718      	adds	r7, #24
    7750:	46bd      	mov	sp, r7
    7752:	bd80      	pop	{r7, pc}

00007754 <compile_with_stmt>:

STATIC void compile_with_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7754:	b580      	push	{r7, lr}
    7756:	b084      	sub	sp, #16
    7758:	af00      	add	r7, sp, #0
    775a:	6078      	str	r0, [r7, #4]
    775c:	6039      	str	r1, [r7, #0]
    // get the nodes for the pre-bit of the with (the a as b, c as d, ... bit)
    mp_parse_node_t *nodes;
    int n = mp_parse_node_extract_list(&pns->nodes[0], PN_with_stmt_list, &nodes);
    775e:	683b      	ldr	r3, [r7, #0]
    7760:	3308      	adds	r3, #8
    7762:	f107 0208 	add.w	r2, r7, #8
    7766:	2173      	movs	r1, #115	; 0x73
    7768:	4618      	mov	r0, r3
    776a:	f7fc fad3 	bl	3d14 <mp_parse_node_extract_list>
    776e:	60f8      	str	r0, [r7, #12]
    assert(n > 0);
    7770:	68fb      	ldr	r3, [r7, #12]
    7772:	2b00      	cmp	r3, #0
    7774:	dc06      	bgt.n	7784 <compile_with_stmt+0x30>
    7776:	4b09      	ldr	r3, [pc, #36]	; (779c <compile_with_stmt+0x48>)
    7778:	4a09      	ldr	r2, [pc, #36]	; (77a0 <compile_with_stmt+0x4c>)
    777a:	f44f 61d4 	mov.w	r1, #1696	; 0x6a0
    777e:	4809      	ldr	r0, [pc, #36]	; (77a4 <compile_with_stmt+0x50>)
    7780:	f014 f800 	bl	1b784 <__assert_func>

    // compile in a nested fashion
    compile_with_stmt_helper(comp, n, nodes, pns->nodes[1]);
    7784:	68ba      	ldr	r2, [r7, #8]
    7786:	683b      	ldr	r3, [r7, #0]
    7788:	68db      	ldr	r3, [r3, #12]
    778a:	68f9      	ldr	r1, [r7, #12]
    778c:	6878      	ldr	r0, [r7, #4]
    778e:	f7ff ff83 	bl	7698 <compile_with_stmt_helper>
}
    7792:	bf00      	nop
    7794:	3710      	adds	r7, #16
    7796:	46bd      	mov	sp, r7
    7798:	bd80      	pop	{r7, pc}
    779a:	bf00      	nop
    779c:	000208ec 	.word	0x000208ec
    77a0:	00021018 	.word	0x00021018
    77a4:	00020358 	.word	0x00020358

000077a8 <compile_yield_from>:

STATIC void compile_yield_from(compiler_t *comp) {
    77a8:	b580      	push	{r7, lr}
    77aa:	b082      	sub	sp, #8
    77ac:	af00      	add	r7, sp, #0
    77ae:	6078      	str	r0, [r7, #4]
    EMIT_ARG(get_iter, false);
    77b0:	687b      	ldr	r3, [r7, #4]
    77b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    77b4:	2100      	movs	r1, #0
    77b6:	4618      	mov	r0, r3
    77b8:	f003 f8de 	bl	a978 <mp_emit_bc_get_iter>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    77bc:	687b      	ldr	r3, [r7, #4]
    77be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    77c0:	210e      	movs	r1, #14
    77c2:	4618      	mov	r0, r3
    77c4:	f002 fdde 	bl	a384 <mp_emit_bc_load_const_tok>
    EMIT_ARG(yield, MP_EMIT_YIELD_FROM);
    77c8:	687b      	ldr	r3, [r7, #4]
    77ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    77cc:	2101      	movs	r1, #1
    77ce:	4618      	mov	r0, r3
    77d0:	f003 fb16 	bl	ae00 <mp_emit_bc_yield>
    reserve_labels_for_native(comp, 3);
}
    77d4:	bf00      	nop
    77d6:	3708      	adds	r7, #8
    77d8:	46bd      	mov	sp, r7
    77da:	bd80      	pop	{r7, pc}

000077dc <compile_expr_stmt>:
        compile_async_with_stmt(comp, pns0);
    }
}
#endif

STATIC void compile_expr_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    77dc:	b580      	push	{r7, lr}
    77de:	b088      	sub	sp, #32
    77e0:	af00      	add	r7, sp, #0
    77e2:	6078      	str	r0, [r7, #4]
    77e4:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    77e6:	683b      	ldr	r3, [r7, #0]
    77e8:	68db      	ldr	r3, [r3, #12]
    77ea:	2b00      	cmp	r3, #0
    77ec:	d149      	bne.n	7882 <compile_expr_stmt+0xa6>
        if (comp->is_repl && comp->scope_cur->kind == SCOPE_MODULE) {
    77ee:	687b      	ldr	r3, [r7, #4]
    77f0:	791b      	ldrb	r3, [r3, #4]
    77f2:	2b00      	cmp	r3, #0
    77f4:	d01b      	beq.n	782e <compile_expr_stmt+0x52>
    77f6:	687b      	ldr	r3, [r7, #4]
    77f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    77fa:	681b      	ldr	r3, [r3, #0]
    77fc:	2b00      	cmp	r3, #0
    77fe:	d116      	bne.n	782e <compile_expr_stmt+0x52>
            // for REPL, evaluate then print the expression
            compile_load_id(comp, MP_QSTR___repl_print__);
    7800:	2122      	movs	r1, #34	; 0x22
    7802:	6878      	ldr	r0, [r7, #4]
    7804:	f7fd fc98 	bl	5138 <compile_load_id>
            compile_node(comp, pns->nodes[0]);
    7808:	683b      	ldr	r3, [r7, #0]
    780a:	689b      	ldr	r3, [r3, #8]
    780c:	4619      	mov	r1, r3
    780e:	6878      	ldr	r0, [r7, #4]
    7810:	f001 f968 	bl	8ae4 <compile_node>
            EMIT_ARG(call_function, 1, 0, 0);
    7814:	687b      	ldr	r3, [r7, #4]
    7816:	6a98      	ldr	r0, [r3, #40]	; 0x28
    7818:	2300      	movs	r3, #0
    781a:	2200      	movs	r2, #0
    781c:	2101      	movs	r1, #1
    781e:	f003 fa89 	bl	ad34 <mp_emit_bc_call_function>
            EMIT(pop_top);
    7822:	687b      	ldr	r3, [r7, #4]
    7824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7826:	4618      	mov	r0, r3
    7828:	f002 ff8a 	bl	a740 <mp_emit_bc_pop_top>
    782c:	e0f7      	b.n	7a1e <compile_expr_stmt+0x242>

        } else {
            // for non-REPL, evaluate then discard the expression
            if ((MP_PARSE_NODE_IS_LEAF(pns->nodes[0]) && !MP_PARSE_NODE_IS_ID(pns->nodes[0]))
    782e:	683b      	ldr	r3, [r7, #0]
    7830:	689b      	ldr	r3, [r3, #8]
    7832:	f003 0303 	and.w	r3, r3, #3
    7836:	2b00      	cmp	r3, #0
    7838:	d006      	beq.n	7848 <compile_expr_stmt+0x6c>
    783a:	683b      	ldr	r3, [r7, #0]
    783c:	689b      	ldr	r3, [r3, #8]
    783e:	f003 030f 	and.w	r3, r3, #15
    7842:	2b02      	cmp	r3, #2
    7844:	f040 80eb 	bne.w	7a1e <compile_expr_stmt+0x242>
                || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_const_object)) {
    7848:	683b      	ldr	r3, [r7, #0]
    784a:	689b      	ldr	r3, [r3, #8]
    784c:	2b00      	cmp	r3, #0
    784e:	d00c      	beq.n	786a <compile_expr_stmt+0x8e>
    7850:	683b      	ldr	r3, [r7, #0]
    7852:	689b      	ldr	r3, [r3, #8]
    7854:	f003 0303 	and.w	r3, r3, #3
    7858:	2b00      	cmp	r3, #0
    785a:	d106      	bne.n	786a <compile_expr_stmt+0x8e>
    785c:	683b      	ldr	r3, [r7, #0]
    785e:	689b      	ldr	r3, [r3, #8]
    7860:	685b      	ldr	r3, [r3, #4]
    7862:	b2db      	uxtb	r3, r3
    7864:	2b35      	cmp	r3, #53	; 0x35
    7866:	f000 80da 	beq.w	7a1e <compile_expr_stmt+0x242>
                // do nothing with a lonely constant
            } else {
                compile_node(comp, pns->nodes[0]); // just an expression
    786a:	683b      	ldr	r3, [r7, #0]
    786c:	689b      	ldr	r3, [r3, #8]
    786e:	4619      	mov	r1, r3
    7870:	6878      	ldr	r0, [r7, #4]
    7872:	f001 f937 	bl	8ae4 <compile_node>
                EMIT(pop_top); // discard last result since this is a statement and leaves nothing on the stack
    7876:	687b      	ldr	r3, [r7, #4]
    7878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    787a:	4618      	mov	r0, r3
    787c:	f002 ff60 	bl	a740 <mp_emit_bc_pop_top>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
        }
    } else {
        goto plain_assign;
    }
}
    7880:	e0cd      	b.n	7a1e <compile_expr_stmt+0x242>
    } else if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    7882:	683b      	ldr	r3, [r7, #0]
    7884:	68db      	ldr	r3, [r3, #12]
    7886:	2b00      	cmp	r3, #0
    7888:	f000 80bb 	beq.w	7a02 <compile_expr_stmt+0x226>
    788c:	683b      	ldr	r3, [r7, #0]
    788e:	68db      	ldr	r3, [r3, #12]
    7890:	f003 0303 	and.w	r3, r3, #3
    7894:	2b00      	cmp	r3, #0
    7896:	f040 80b4 	bne.w	7a02 <compile_expr_stmt+0x226>
        mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    789a:	683b      	ldr	r3, [r7, #0]
    789c:	68db      	ldr	r3, [r3, #12]
    789e:	617b      	str	r3, [r7, #20]
        int kind = MP_PARSE_NODE_STRUCT_KIND(pns1);
    78a0:	697b      	ldr	r3, [r7, #20]
    78a2:	685b      	ldr	r3, [r3, #4]
    78a4:	b2db      	uxtb	r3, r3
    78a6:	613b      	str	r3, [r7, #16]
        if (kind == PN_expr_stmt_augassign) {
    78a8:	693b      	ldr	r3, [r7, #16]
    78aa:	2b51      	cmp	r3, #81	; 0x51
    78ac:	d16a      	bne.n	7984 <compile_expr_stmt+0x1a8>
            c_assign(comp, pns->nodes[0], ASSIGN_AUG_LOAD); // lhs load for aug assign
    78ae:	683b      	ldr	r3, [r7, #0]
    78b0:	689b      	ldr	r3, [r3, #8]
    78b2:	2201      	movs	r2, #1
    78b4:	4619      	mov	r1, r3
    78b6:	6878      	ldr	r0, [r7, #4]
    78b8:	f7fd ff80 	bl	57bc <c_assign>
            compile_node(comp, pns1->nodes[1]); // rhs
    78bc:	697b      	ldr	r3, [r7, #20]
    78be:	68db      	ldr	r3, [r3, #12]
    78c0:	4619      	mov	r1, r3
    78c2:	6878      	ldr	r0, [r7, #4]
    78c4:	f001 f90e 	bl	8ae4 <compile_node>
            assert(MP_PARSE_NODE_IS_TOKEN(pns1->nodes[0]));
    78c8:	697b      	ldr	r3, [r7, #20]
    78ca:	689b      	ldr	r3, [r3, #8]
    78cc:	f003 030f 	and.w	r3, r3, #15
    78d0:	2b0e      	cmp	r3, #14
    78d2:	d006      	beq.n	78e2 <compile_expr_stmt+0x106>
    78d4:	4b54      	ldr	r3, [pc, #336]	; (7a28 <compile_expr_stmt+0x24c>)
    78d6:	4a55      	ldr	r2, [pc, #340]	; (7a2c <compile_expr_stmt+0x250>)
    78d8:	f44f 61f2 	mov.w	r1, #1936	; 0x790
    78dc:	4854      	ldr	r0, [pc, #336]	; (7a30 <compile_expr_stmt+0x254>)
    78de:	f013 ff51 	bl	1b784 <__assert_func>
            switch (MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0])) {
    78e2:	697b      	ldr	r3, [r7, #20]
    78e4:	689b      	ldr	r3, [r3, #8]
    78e6:	091b      	lsrs	r3, r3, #4
    78e8:	3b4e      	subs	r3, #78	; 0x4e
    78ea:	2b0a      	cmp	r3, #10
    78ec:	d839      	bhi.n	7962 <compile_expr_stmt+0x186>
    78ee:	a201      	add	r2, pc, #4	; (adr r2, 78f4 <compile_expr_stmt+0x118>)
    78f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    78f4:	0000793f 	.word	0x0000793f
    78f8:	00007945 	.word	0x00007945
    78fc:	0000794b 	.word	0x0000794b
    7900:	00007957 	.word	0x00007957
    7904:	00007951 	.word	0x00007951
    7908:	0000795d 	.word	0x0000795d
    790c:	0000792d 	.word	0x0000792d
    7910:	00007921 	.word	0x00007921
    7914:	00007927 	.word	0x00007927
    7918:	00007939 	.word	0x00007939
    791c:	00007933 	.word	0x00007933
                case MP_TOKEN_DEL_PIPE_EQUAL: op = MP_BINARY_OP_INPLACE_OR; break;
    7920:	2309      	movs	r3, #9
    7922:	61fb      	str	r3, [r7, #28]
    7924:	e020      	b.n	7968 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_CARET_EQUAL: op = MP_BINARY_OP_INPLACE_XOR; break;
    7926:	230a      	movs	r3, #10
    7928:	61fb      	str	r3, [r7, #28]
    792a:	e01d      	b.n	7968 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_AMPERSAND_EQUAL: op = MP_BINARY_OP_INPLACE_AND; break;
    792c:	230b      	movs	r3, #11
    792e:	61fb      	str	r3, [r7, #28]
    7930:	e01a      	b.n	7968 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_LESS_EQUAL: op = MP_BINARY_OP_INPLACE_LSHIFT; break;
    7932:	230c      	movs	r3, #12
    7934:	61fb      	str	r3, [r7, #28]
    7936:	e017      	b.n	7968 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_MORE_EQUAL: op = MP_BINARY_OP_INPLACE_RSHIFT; break;
    7938:	230d      	movs	r3, #13
    793a:	61fb      	str	r3, [r7, #28]
    793c:	e014      	b.n	7968 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_PLUS_EQUAL: op = MP_BINARY_OP_INPLACE_ADD; break;
    793e:	230e      	movs	r3, #14
    7940:	61fb      	str	r3, [r7, #28]
    7942:	e011      	b.n	7968 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_MINUS_EQUAL: op = MP_BINARY_OP_INPLACE_SUBTRACT; break;
    7944:	230f      	movs	r3, #15
    7946:	61fb      	str	r3, [r7, #28]
    7948:	e00e      	b.n	7968 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_STAR_EQUAL: op = MP_BINARY_OP_INPLACE_MULTIPLY; break;
    794a:	2310      	movs	r3, #16
    794c:	61fb      	str	r3, [r7, #28]
    794e:	e00b      	b.n	7968 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_SLASH_EQUAL: op = MP_BINARY_OP_INPLACE_FLOOR_DIVIDE; break;
    7950:	2311      	movs	r3, #17
    7952:	61fb      	str	r3, [r7, #28]
    7954:	e008      	b.n	7968 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_SLASH_EQUAL: op = MP_BINARY_OP_INPLACE_TRUE_DIVIDE; break;
    7956:	2312      	movs	r3, #18
    7958:	61fb      	str	r3, [r7, #28]
    795a:	e005      	b.n	7968 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_PERCENT_EQUAL: op = MP_BINARY_OP_INPLACE_MODULO; break;
    795c:	2313      	movs	r3, #19
    795e:	61fb      	str	r3, [r7, #28]
    7960:	e002      	b.n	7968 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_STAR_EQUAL: default: op = MP_BINARY_OP_INPLACE_POWER; break;
    7962:	2314      	movs	r3, #20
    7964:	61fb      	str	r3, [r7, #28]
    7966:	bf00      	nop
            EMIT_ARG(binary_op, op);
    7968:	687b      	ldr	r3, [r7, #4]
    796a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    796c:	69f9      	ldr	r1, [r7, #28]
    796e:	4618      	mov	r0, r3
    7970:	f003 f876 	bl	aa60 <mp_emit_bc_binary_op>
            c_assign(comp, pns->nodes[0], ASSIGN_AUG_STORE); // lhs store for aug assign
    7974:	683b      	ldr	r3, [r7, #0]
    7976:	689b      	ldr	r3, [r3, #8]
    7978:	2202      	movs	r2, #2
    797a:	4619      	mov	r1, r3
    797c:	6878      	ldr	r0, [r7, #4]
    797e:	f7fd ff1d 	bl	57bc <c_assign>
}
    7982:	e04c      	b.n	7a1e <compile_expr_stmt+0x242>
        } else if (kind == PN_expr_stmt_assign_list) {
    7984:	693b      	ldr	r3, [r7, #16]
    7986:	2b52      	cmp	r3, #82	; 0x52
    7988:	d13b      	bne.n	7a02 <compile_expr_stmt+0x226>
            int rhs = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1) - 1;
    798a:	697b      	ldr	r3, [r7, #20]
    798c:	685b      	ldr	r3, [r3, #4]
    798e:	0a1b      	lsrs	r3, r3, #8
    7990:	3b01      	subs	r3, #1
    7992:	60fb      	str	r3, [r7, #12]
            compile_node(comp, pns1->nodes[rhs]); // rhs
    7994:	697b      	ldr	r3, [r7, #20]
    7996:	68fa      	ldr	r2, [r7, #12]
    7998:	3202      	adds	r2, #2
    799a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    799e:	4619      	mov	r1, r3
    79a0:	6878      	ldr	r0, [r7, #4]
    79a2:	f001 f89f 	bl	8ae4 <compile_node>
            if (rhs > 0) {
    79a6:	68fb      	ldr	r3, [r7, #12]
    79a8:	2b00      	cmp	r3, #0
    79aa:	dd04      	ble.n	79b6 <compile_expr_stmt+0x1da>
                EMIT(dup_top);
    79ac:	687b      	ldr	r3, [r7, #4]
    79ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    79b0:	4618      	mov	r0, r3
    79b2:	f002 fea5 	bl	a700 <mp_emit_bc_dup_top>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
    79b6:	683b      	ldr	r3, [r7, #0]
    79b8:	689b      	ldr	r3, [r3, #8]
    79ba:	2200      	movs	r2, #0
    79bc:	4619      	mov	r1, r3
    79be:	6878      	ldr	r0, [r7, #4]
    79c0:	f7fd fefc 	bl	57bc <c_assign>
            for (int i = 0; i < rhs; i++) {
    79c4:	2300      	movs	r3, #0
    79c6:	61bb      	str	r3, [r7, #24]
    79c8:	e016      	b.n	79f8 <compile_expr_stmt+0x21c>
                if (i + 1 < rhs) {
    79ca:	69bb      	ldr	r3, [r7, #24]
    79cc:	1c5a      	adds	r2, r3, #1
    79ce:	68fb      	ldr	r3, [r7, #12]
    79d0:	429a      	cmp	r2, r3
    79d2:	da04      	bge.n	79de <compile_expr_stmt+0x202>
                    EMIT(dup_top);
    79d4:	687b      	ldr	r3, [r7, #4]
    79d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    79d8:	4618      	mov	r0, r3
    79da:	f002 fe91 	bl	a700 <mp_emit_bc_dup_top>
                c_assign(comp, pns1->nodes[i], ASSIGN_STORE); // middle store
    79de:	697b      	ldr	r3, [r7, #20]
    79e0:	69ba      	ldr	r2, [r7, #24]
    79e2:	3202      	adds	r2, #2
    79e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    79e8:	2200      	movs	r2, #0
    79ea:	4619      	mov	r1, r3
    79ec:	6878      	ldr	r0, [r7, #4]
    79ee:	f7fd fee5 	bl	57bc <c_assign>
            for (int i = 0; i < rhs; i++) {
    79f2:	69bb      	ldr	r3, [r7, #24]
    79f4:	3301      	adds	r3, #1
    79f6:	61bb      	str	r3, [r7, #24]
    79f8:	69ba      	ldr	r2, [r7, #24]
    79fa:	68fb      	ldr	r3, [r7, #12]
    79fc:	429a      	cmp	r2, r3
    79fe:	dbe4      	blt.n	79ca <compile_expr_stmt+0x1ee>
}
    7a00:	e00d      	b.n	7a1e <compile_expr_stmt+0x242>
            compile_node(comp, pns->nodes[1]); // rhs
    7a02:	683b      	ldr	r3, [r7, #0]
    7a04:	68db      	ldr	r3, [r3, #12]
    7a06:	4619      	mov	r1, r3
    7a08:	6878      	ldr	r0, [r7, #4]
    7a0a:	f001 f86b 	bl	8ae4 <compile_node>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
    7a0e:	683b      	ldr	r3, [r7, #0]
    7a10:	689b      	ldr	r3, [r3, #8]
    7a12:	2200      	movs	r2, #0
    7a14:	4619      	mov	r1, r3
    7a16:	6878      	ldr	r0, [r7, #4]
    7a18:	f7fd fed0 	bl	57bc <c_assign>
}
    7a1c:	e7ff      	b.n	7a1e <compile_expr_stmt+0x242>
    7a1e:	bf00      	nop
    7a20:	3720      	adds	r7, #32
    7a22:	46bd      	mov	sp, r7
    7a24:	bd80      	pop	{r7, pc}
    7a26:	bf00      	nop
    7a28:	000208f4 	.word	0x000208f4
    7a2c:	0002102c 	.word	0x0002102c
    7a30:	00020358 	.word	0x00020358

00007a34 <compile_test_if_expr>:

STATIC void compile_test_if_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7a34:	b580      	push	{r7, lr}
    7a36:	b086      	sub	sp, #24
    7a38:	af00      	add	r7, sp, #0
    7a3a:	6078      	str	r0, [r7, #4]
    7a3c:	6039      	str	r1, [r7, #0]
    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_test_if_else));
    7a3e:	683b      	ldr	r3, [r7, #0]
    7a40:	68db      	ldr	r3, [r3, #12]
    7a42:	2b00      	cmp	r3, #0
    7a44:	d00b      	beq.n	7a5e <compile_test_if_expr+0x2a>
    7a46:	683b      	ldr	r3, [r7, #0]
    7a48:	68db      	ldr	r3, [r3, #12]
    7a4a:	f003 0303 	and.w	r3, r3, #3
    7a4e:	2b00      	cmp	r3, #0
    7a50:	d105      	bne.n	7a5e <compile_test_if_expr+0x2a>
    7a52:	683b      	ldr	r3, [r7, #0]
    7a54:	68db      	ldr	r3, [r3, #12]
    7a56:	685b      	ldr	r3, [r3, #4]
    7a58:	b2db      	uxtb	r3, r3
    7a5a:	2b79      	cmp	r3, #121	; 0x79
    7a5c:	d006      	beq.n	7a6c <compile_test_if_expr+0x38>
    7a5e:	4b21      	ldr	r3, [pc, #132]	; (7ae4 <compile_test_if_expr+0xb0>)
    7a60:	4a21      	ldr	r2, [pc, #132]	; (7ae8 <compile_test_if_expr+0xb4>)
    7a62:	f240 71e7 	movw	r1, #2023	; 0x7e7
    7a66:	4821      	ldr	r0, [pc, #132]	; (7aec <compile_test_if_expr+0xb8>)
    7a68:	f013 fe8c 	bl	1b784 <__assert_func>
    mp_parse_node_struct_t *pns_test_if_else = (mp_parse_node_struct_t*)pns->nodes[1];
    7a6c:	683b      	ldr	r3, [r7, #0]
    7a6e:	68db      	ldr	r3, [r3, #12]
    7a70:	617b      	str	r3, [r7, #20]

    uint l_fail = comp_next_label(comp);
    7a72:	6878      	ldr	r0, [r7, #4]
    7a74:	f7fd fa6c 	bl	4f50 <comp_next_label>
    7a78:	6138      	str	r0, [r7, #16]
    uint l_end = comp_next_label(comp);
    7a7a:	6878      	ldr	r0, [r7, #4]
    7a7c:	f7fd fa68 	bl	4f50 <comp_next_label>
    7a80:	60f8      	str	r0, [r7, #12]
    c_if_cond(comp, pns_test_if_else->nodes[0], false, l_fail); // condition
    7a82:	697b      	ldr	r3, [r7, #20]
    7a84:	6899      	ldr	r1, [r3, #8]
    7a86:	693b      	ldr	r3, [r7, #16]
    7a88:	2200      	movs	r2, #0
    7a8a:	6878      	ldr	r0, [r7, #4]
    7a8c:	f7fd fbf8 	bl	5280 <c_if_cond>
    compile_node(comp, pns->nodes[0]); // success value
    7a90:	683b      	ldr	r3, [r7, #0]
    7a92:	689b      	ldr	r3, [r3, #8]
    7a94:	4619      	mov	r1, r3
    7a96:	6878      	ldr	r0, [r7, #4]
    7a98:	f001 f824 	bl	8ae4 <compile_node>
    EMIT_ARG(jump, l_end);
    7a9c:	687b      	ldr	r3, [r7, #4]
    7a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7aa0:	68f9      	ldr	r1, [r7, #12]
    7aa2:	4618      	mov	r0, r3
    7aa4:	f002 fe7e 	bl	a7a4 <mp_emit_bc_jump>
    EMIT_ARG(label_assign, l_fail);
    7aa8:	687b      	ldr	r3, [r7, #4]
    7aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7aac:	6939      	ldr	r1, [r7, #16]
    7aae:	4618      	mov	r0, r3
    7ab0:	f002 fbea 	bl	a288 <mp_emit_bc_label_assign>
    EMIT_ARG(adjust_stack_size, -1); // adjust stack size
    7ab4:	687b      	ldr	r3, [r7, #4]
    7ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7ab8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7abc:	4618      	mov	r0, r3
    7abe:	f002 fb91 	bl	a1e4 <mp_emit_bc_adjust_stack_size>
    compile_node(comp, pns_test_if_else->nodes[1]); // failure value
    7ac2:	697b      	ldr	r3, [r7, #20]
    7ac4:	68db      	ldr	r3, [r3, #12]
    7ac6:	4619      	mov	r1, r3
    7ac8:	6878      	ldr	r0, [r7, #4]
    7aca:	f001 f80b 	bl	8ae4 <compile_node>
    EMIT_ARG(label_assign, l_end);
    7ace:	687b      	ldr	r3, [r7, #4]
    7ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7ad2:	68f9      	ldr	r1, [r7, #12]
    7ad4:	4618      	mov	r0, r3
    7ad6:	f002 fbd7 	bl	a288 <mp_emit_bc_label_assign>
}
    7ada:	bf00      	nop
    7adc:	3718      	adds	r7, #24
    7ade:	46bd      	mov	sp, r7
    7ae0:	bd80      	pop	{r7, pc}
    7ae2:	bf00      	nop
    7ae4:	0002091c 	.word	0x0002091c
    7ae8:	00021040 	.word	0x00021040
    7aec:	00020358 	.word	0x00020358

00007af0 <compile_lambdef>:

STATIC void compile_lambdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7af0:	b580      	push	{r7, lr}
    7af2:	b084      	sub	sp, #16
    7af4:	af00      	add	r7, sp, #0
    7af6:	6078      	str	r0, [r7, #4]
    7af8:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    7afa:	687b      	ldr	r3, [r7, #4]
    7afc:	795b      	ldrb	r3, [r3, #5]
    7afe:	2b01      	cmp	r3, #1
    7b00:	d10b      	bne.n	7b1a <compile_lambdef+0x2a>
        // create a new scope for this lambda
        scope_t *s = scope_new_and_link(comp, SCOPE_LAMBDA, (mp_parse_node_t)pns, comp->scope_cur->emit_options);
    7b02:	683a      	ldr	r2, [r7, #0]
    7b04:	687b      	ldr	r3, [r7, #4]
    7b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7b08:	8b5b      	ldrh	r3, [r3, #26]
    7b0a:	2102      	movs	r1, #2
    7b0c:	6878      	ldr	r0, [r7, #4]
    7b0e:	f7fd fa77 	bl	5000 <scope_new_and_link>
    7b12:	60f8      	str	r0, [r7, #12]
        // store the lambda scope so the compiling function (this one) can use it at each pass
        pns->nodes[2] = (mp_parse_node_t)s;
    7b14:	68fa      	ldr	r2, [r7, #12]
    7b16:	683b      	ldr	r3, [r7, #0]
    7b18:	611a      	str	r2, [r3, #16]
    }

    // get the scope for this lambda
    scope_t *this_scope = (scope_t*)pns->nodes[2];
    7b1a:	683b      	ldr	r3, [r7, #0]
    7b1c:	691b      	ldr	r3, [r3, #16]
    7b1e:	60bb      	str	r3, [r7, #8]

    // compile the lambda definition
    compile_funcdef_lambdef(comp, this_scope, pns->nodes[0], PN_varargslist);
    7b20:	683b      	ldr	r3, [r7, #0]
    7b22:	689a      	ldr	r2, [r3, #8]
    7b24:	2346      	movs	r3, #70	; 0x46
    7b26:	68b9      	ldr	r1, [r7, #8]
    7b28:	6878      	ldr	r0, [r7, #4]
    7b2a:	f7fe f8a1 	bl	5c70 <compile_funcdef_lambdef>
}
    7b2e:	bf00      	nop
    7b30:	3710      	adds	r7, #16
    7b32:	46bd      	mov	sp, r7
    7b34:	bd80      	pop	{r7, pc}
    7b36:	bf00      	nop

00007b38 <compile_or_and_test>:

STATIC void compile_or_and_test(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7b38:	b580      	push	{r7, lr}
    7b3a:	b086      	sub	sp, #24
    7b3c:	af00      	add	r7, sp, #0
    7b3e:	6078      	str	r0, [r7, #4]
    7b40:	6039      	str	r1, [r7, #0]
    bool cond = MP_PARSE_NODE_STRUCT_KIND(pns) == PN_or_test;
    7b42:	683b      	ldr	r3, [r7, #0]
    7b44:	685b      	ldr	r3, [r3, #4]
    7b46:	b2db      	uxtb	r3, r3
    7b48:	2b1c      	cmp	r3, #28
    7b4a:	bf0c      	ite	eq
    7b4c:	2301      	moveq	r3, #1
    7b4e:	2300      	movne	r3, #0
    7b50:	74fb      	strb	r3, [r7, #19]
    uint l_end = comp_next_label(comp);
    7b52:	6878      	ldr	r0, [r7, #4]
    7b54:	f7fd f9fc 	bl	4f50 <comp_next_label>
    7b58:	60f8      	str	r0, [r7, #12]
    int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7b5a:	683b      	ldr	r3, [r7, #0]
    7b5c:	685b      	ldr	r3, [r3, #4]
    7b5e:	0a1b      	lsrs	r3, r3, #8
    7b60:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < n; i += 1) {
    7b62:	2300      	movs	r3, #0
    7b64:	617b      	str	r3, [r7, #20]
    7b66:	e017      	b.n	7b98 <compile_or_and_test+0x60>
        compile_node(comp, pns->nodes[i]);
    7b68:	683b      	ldr	r3, [r7, #0]
    7b6a:	697a      	ldr	r2, [r7, #20]
    7b6c:	3202      	adds	r2, #2
    7b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b72:	4619      	mov	r1, r3
    7b74:	6878      	ldr	r0, [r7, #4]
    7b76:	f000 ffb5 	bl	8ae4 <compile_node>
        if (i + 1 < n) {
    7b7a:	697b      	ldr	r3, [r7, #20]
    7b7c:	1c5a      	adds	r2, r3, #1
    7b7e:	68bb      	ldr	r3, [r7, #8]
    7b80:	429a      	cmp	r2, r3
    7b82:	da06      	bge.n	7b92 <compile_or_and_test+0x5a>
            EMIT_ARG(jump_if_or_pop, cond, l_end);
    7b84:	687b      	ldr	r3, [r7, #4]
    7b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7b88:	7cf9      	ldrb	r1, [r7, #19]
    7b8a:	68fa      	ldr	r2, [r7, #12]
    7b8c:	4618      	mov	r0, r3
    7b8e:	f002 fe39 	bl	a804 <mp_emit_bc_jump_if_or_pop>
    for (int i = 0; i < n; i += 1) {
    7b92:	697b      	ldr	r3, [r7, #20]
    7b94:	3301      	adds	r3, #1
    7b96:	617b      	str	r3, [r7, #20]
    7b98:	697a      	ldr	r2, [r7, #20]
    7b9a:	68bb      	ldr	r3, [r7, #8]
    7b9c:	429a      	cmp	r2, r3
    7b9e:	dbe3      	blt.n	7b68 <compile_or_and_test+0x30>
        }
    }
    EMIT_ARG(label_assign, l_end);
    7ba0:	687b      	ldr	r3, [r7, #4]
    7ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7ba4:	68f9      	ldr	r1, [r7, #12]
    7ba6:	4618      	mov	r0, r3
    7ba8:	f002 fb6e 	bl	a288 <mp_emit_bc_label_assign>
}
    7bac:	bf00      	nop
    7bae:	3718      	adds	r7, #24
    7bb0:	46bd      	mov	sp, r7
    7bb2:	bd80      	pop	{r7, pc}

00007bb4 <compile_not_test_2>:

STATIC void compile_not_test_2(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7bb4:	b580      	push	{r7, lr}
    7bb6:	b082      	sub	sp, #8
    7bb8:	af00      	add	r7, sp, #0
    7bba:	6078      	str	r0, [r7, #4]
    7bbc:	6039      	str	r1, [r7, #0]
    compile_node(comp, pns->nodes[0]);
    7bbe:	683b      	ldr	r3, [r7, #0]
    7bc0:	689b      	ldr	r3, [r3, #8]
    7bc2:	4619      	mov	r1, r3
    7bc4:	6878      	ldr	r0, [r7, #4]
    7bc6:	f000 ff8d 	bl	8ae4 <compile_node>
    EMIT_ARG(unary_op, MP_UNARY_OP_NOT);
    7bca:	687b      	ldr	r3, [r7, #4]
    7bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7bce:	2103      	movs	r1, #3
    7bd0:	4618      	mov	r0, r3
    7bd2:	f002 ff2f 	bl	aa34 <mp_emit_bc_unary_op>
}
    7bd6:	bf00      	nop
    7bd8:	3708      	adds	r7, #8
    7bda:	46bd      	mov	sp, r7
    7bdc:	bd80      	pop	{r7, pc}
    7bde:	bf00      	nop

00007be0 <compile_comparison>:

STATIC void compile_comparison(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7be0:	b580      	push	{r7, lr}
    7be2:	b08a      	sub	sp, #40	; 0x28
    7be4:	af00      	add	r7, sp, #0
    7be6:	6078      	str	r0, [r7, #4]
    7be8:	6039      	str	r1, [r7, #0]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7bea:	683b      	ldr	r3, [r7, #0]
    7bec:	685b      	ldr	r3, [r3, #4]
    7bee:	0a1b      	lsrs	r3, r3, #8
    7bf0:	61bb      	str	r3, [r7, #24]
    compile_node(comp, pns->nodes[0]);
    7bf2:	683b      	ldr	r3, [r7, #0]
    7bf4:	689b      	ldr	r3, [r3, #8]
    7bf6:	4619      	mov	r1, r3
    7bf8:	6878      	ldr	r0, [r7, #4]
    7bfa:	f000 ff73 	bl	8ae4 <compile_node>
    bool multi = (num_nodes > 3);
    7bfe:	69bb      	ldr	r3, [r7, #24]
    7c00:	2b03      	cmp	r3, #3
    7c02:	bfcc      	ite	gt
    7c04:	2301      	movgt	r3, #1
    7c06:	2300      	movle	r3, #0
    7c08:	75fb      	strb	r3, [r7, #23]
    uint l_fail = 0;
    7c0a:	2300      	movs	r3, #0
    7c0c:	627b      	str	r3, [r7, #36]	; 0x24
    if (multi) {
    7c0e:	7dfb      	ldrb	r3, [r7, #23]
    7c10:	2b00      	cmp	r3, #0
    7c12:	d003      	beq.n	7c1c <compile_comparison+0x3c>
        l_fail = comp_next_label(comp);
    7c14:	6878      	ldr	r0, [r7, #4]
    7c16:	f7fd f99b 	bl	4f50 <comp_next_label>
    7c1a:	6278      	str	r0, [r7, #36]	; 0x24
    }
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7c1c:	2301      	movs	r3, #1
    7c1e:	623b      	str	r3, [r7, #32]
    7c20:	e0b7      	b.n	7d92 <compile_comparison+0x1b2>
        compile_node(comp, pns->nodes[i + 1]);
    7c22:	6a3b      	ldr	r3, [r7, #32]
    7c24:	1c5a      	adds	r2, r3, #1
    7c26:	683b      	ldr	r3, [r7, #0]
    7c28:	3202      	adds	r2, #2
    7c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7c2e:	4619      	mov	r1, r3
    7c30:	6878      	ldr	r0, [r7, #4]
    7c32:	f000 ff57 	bl	8ae4 <compile_node>
        if (i + 2 < num_nodes) {
    7c36:	6a3b      	ldr	r3, [r7, #32]
    7c38:	1c9a      	adds	r2, r3, #2
    7c3a:	69bb      	ldr	r3, [r7, #24]
    7c3c:	429a      	cmp	r2, r3
    7c3e:	da09      	bge.n	7c54 <compile_comparison+0x74>
            EMIT(dup_top);
    7c40:	687b      	ldr	r3, [r7, #4]
    7c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c44:	4618      	mov	r0, r3
    7c46:	f002 fd5b 	bl	a700 <mp_emit_bc_dup_top>
            EMIT(rot_three);
    7c4a:	687b      	ldr	r3, [r7, #4]
    7c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c4e:	4618      	mov	r0, r3
    7c50:	f002 fd98 	bl	a784 <mp_emit_bc_rot_three>
        }
        if (MP_PARSE_NODE_IS_TOKEN(pns->nodes[i])) {
    7c54:	683b      	ldr	r3, [r7, #0]
    7c56:	6a3a      	ldr	r2, [r7, #32]
    7c58:	3202      	adds	r2, #2
    7c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7c5e:	f003 030f 	and.w	r3, r3, #15
    7c62:	2b0e      	cmp	r3, #14
    7c64:	d140      	bne.n	7ce8 <compile_comparison+0x108>
            mp_binary_op_t op;
            switch (MP_PARSE_NODE_LEAF_ARG(pns->nodes[i])) {
    7c66:	683b      	ldr	r3, [r7, #0]
    7c68:	6a3a      	ldr	r2, [r7, #32]
    7c6a:	3202      	adds	r2, #2
    7c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7c70:	091b      	lsrs	r3, r3, #4
    7c72:	3b36      	subs	r3, #54	; 0x36
    7c74:	2b0b      	cmp	r3, #11
    7c76:	d82d      	bhi.n	7cd4 <compile_comparison+0xf4>
    7c78:	a201      	add	r2, pc, #4	; (adr r2, 7c80 <compile_comparison+0xa0>)
    7c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7c7e:	bf00      	nop
    7c80:	00007cb1 	.word	0x00007cb1
    7c84:	00007cd5 	.word	0x00007cd5
    7c88:	00007cb7 	.word	0x00007cb7
    7c8c:	00007cd5 	.word	0x00007cd5
    7c90:	00007cd5 	.word	0x00007cd5
    7c94:	00007cd5 	.word	0x00007cd5
    7c98:	00007cd5 	.word	0x00007cd5
    7c9c:	00007cd5 	.word	0x00007cd5
    7ca0:	00007cc3 	.word	0x00007cc3
    7ca4:	00007cc9 	.word	0x00007cc9
    7ca8:	00007cbd 	.word	0x00007cbd
    7cac:	00007ccf 	.word	0x00007ccf
                case MP_TOKEN_OP_LESS: op = MP_BINARY_OP_LESS; break;
    7cb0:	2300      	movs	r3, #0
    7cb2:	61fb      	str	r3, [r7, #28]
    7cb4:	e011      	b.n	7cda <compile_comparison+0xfa>
                case MP_TOKEN_OP_MORE: op = MP_BINARY_OP_MORE; break;
    7cb6:	2301      	movs	r3, #1
    7cb8:	61fb      	str	r3, [r7, #28]
    7cba:	e00e      	b.n	7cda <compile_comparison+0xfa>
                case MP_TOKEN_OP_DBL_EQUAL: op = MP_BINARY_OP_EQUAL; break;
    7cbc:	2302      	movs	r3, #2
    7cbe:	61fb      	str	r3, [r7, #28]
    7cc0:	e00b      	b.n	7cda <compile_comparison+0xfa>
                case MP_TOKEN_OP_LESS_EQUAL: op = MP_BINARY_OP_LESS_EQUAL; break;
    7cc2:	2303      	movs	r3, #3
    7cc4:	61fb      	str	r3, [r7, #28]
    7cc6:	e008      	b.n	7cda <compile_comparison+0xfa>
                case MP_TOKEN_OP_MORE_EQUAL: op = MP_BINARY_OP_MORE_EQUAL; break;
    7cc8:	2304      	movs	r3, #4
    7cca:	61fb      	str	r3, [r7, #28]
    7ccc:	e005      	b.n	7cda <compile_comparison+0xfa>
                case MP_TOKEN_OP_NOT_EQUAL: op = MP_BINARY_OP_NOT_EQUAL; break;
    7cce:	2305      	movs	r3, #5
    7cd0:	61fb      	str	r3, [r7, #28]
    7cd2:	e002      	b.n	7cda <compile_comparison+0xfa>
                case MP_TOKEN_KW_IN: default: op = MP_BINARY_OP_IN; break;
    7cd4:	2306      	movs	r3, #6
    7cd6:	61fb      	str	r3, [r7, #28]
    7cd8:	bf00      	nop
            }
            EMIT_ARG(binary_op, op);
    7cda:	687b      	ldr	r3, [r7, #4]
    7cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7cde:	69f9      	ldr	r1, [r7, #28]
    7ce0:	4618      	mov	r0, r3
    7ce2:	f002 febd 	bl	aa60 <mp_emit_bc_binary_op>
    7ce6:	e045      	b.n	7d74 <compile_comparison+0x194>
        } else {
            assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[i])); // should be
    7ce8:	683b      	ldr	r3, [r7, #0]
    7cea:	6a3a      	ldr	r2, [r7, #32]
    7cec:	3202      	adds	r2, #2
    7cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7cf2:	2b00      	cmp	r3, #0
    7cf4:	d008      	beq.n	7d08 <compile_comparison+0x128>
    7cf6:	683b      	ldr	r3, [r7, #0]
    7cf8:	6a3a      	ldr	r2, [r7, #32]
    7cfa:	3202      	adds	r2, #2
    7cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d00:	f003 0303 	and.w	r3, r3, #3
    7d04:	2b00      	cmp	r3, #0
    7d06:	d006      	beq.n	7d16 <compile_comparison+0x136>
    7d08:	4b3b      	ldr	r3, [pc, #236]	; (7df8 <compile_comparison+0x218>)
    7d0a:	4a3c      	ldr	r2, [pc, #240]	; (7dfc <compile_comparison+0x21c>)
    7d0c:	f640 0131 	movw	r1, #2097	; 0x831
    7d10:	483b      	ldr	r0, [pc, #236]	; (7e00 <compile_comparison+0x220>)
    7d12:	f013 fd37 	bl	1b784 <__assert_func>
            mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[i];
    7d16:	683b      	ldr	r3, [r7, #0]
    7d18:	6a3a      	ldr	r2, [r7, #32]
    7d1a:	3202      	adds	r2, #2
    7d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d20:	613b      	str	r3, [r7, #16]
            int kind = MP_PARSE_NODE_STRUCT_KIND(pns2);
    7d22:	693b      	ldr	r3, [r7, #16]
    7d24:	685b      	ldr	r3, [r3, #4]
    7d26:	b2db      	uxtb	r3, r3
    7d28:	60fb      	str	r3, [r7, #12]
            if (kind == PN_comp_op_not_in) {
    7d2a:	68fb      	ldr	r3, [r7, #12]
    7d2c:	2b7d      	cmp	r3, #125	; 0x7d
    7d2e:	d106      	bne.n	7d3e <compile_comparison+0x15e>
                EMIT_ARG(binary_op, MP_BINARY_OP_NOT_IN);
    7d30:	687b      	ldr	r3, [r7, #4]
    7d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7d34:	2124      	movs	r1, #36	; 0x24
    7d36:	4618      	mov	r0, r3
    7d38:	f002 fe92 	bl	aa60 <mp_emit_bc_binary_op>
    7d3c:	e01a      	b.n	7d74 <compile_comparison+0x194>
            } else {
                assert(kind == PN_comp_op_is); // should be
    7d3e:	68fb      	ldr	r3, [r7, #12]
    7d40:	2b7e      	cmp	r3, #126	; 0x7e
    7d42:	d006      	beq.n	7d52 <compile_comparison+0x172>
    7d44:	4b2f      	ldr	r3, [pc, #188]	; (7e04 <compile_comparison+0x224>)
    7d46:	4a2d      	ldr	r2, [pc, #180]	; (7dfc <compile_comparison+0x21c>)
    7d48:	f640 0137 	movw	r1, #2103	; 0x837
    7d4c:	482c      	ldr	r0, [pc, #176]	; (7e00 <compile_comparison+0x220>)
    7d4e:	f013 fd19 	bl	1b784 <__assert_func>
                if (MP_PARSE_NODE_IS_NULL(pns2->nodes[0])) {
    7d52:	693b      	ldr	r3, [r7, #16]
    7d54:	689b      	ldr	r3, [r3, #8]
    7d56:	2b00      	cmp	r3, #0
    7d58:	d106      	bne.n	7d68 <compile_comparison+0x188>
                    EMIT_ARG(binary_op, MP_BINARY_OP_IS);
    7d5a:	687b      	ldr	r3, [r7, #4]
    7d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7d5e:	2107      	movs	r1, #7
    7d60:	4618      	mov	r0, r3
    7d62:	f002 fe7d 	bl	aa60 <mp_emit_bc_binary_op>
    7d66:	e005      	b.n	7d74 <compile_comparison+0x194>
                } else {
                    EMIT_ARG(binary_op, MP_BINARY_OP_IS_NOT);
    7d68:	687b      	ldr	r3, [r7, #4]
    7d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7d6c:	2125      	movs	r1, #37	; 0x25
    7d6e:	4618      	mov	r0, r3
    7d70:	f002 fe76 	bl	aa60 <mp_emit_bc_binary_op>
                }
            }
        }
        if (i + 2 < num_nodes) {
    7d74:	6a3b      	ldr	r3, [r7, #32]
    7d76:	1c9a      	adds	r2, r3, #2
    7d78:	69bb      	ldr	r3, [r7, #24]
    7d7a:	429a      	cmp	r2, r3
    7d7c:	da06      	bge.n	7d8c <compile_comparison+0x1ac>
            EMIT_ARG(jump_if_or_pop, false, l_fail);
    7d7e:	687b      	ldr	r3, [r7, #4]
    7d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    7d84:	2100      	movs	r1, #0
    7d86:	4618      	mov	r0, r3
    7d88:	f002 fd3c 	bl	a804 <mp_emit_bc_jump_if_or_pop>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7d8c:	6a3b      	ldr	r3, [r7, #32]
    7d8e:	3302      	adds	r3, #2
    7d90:	623b      	str	r3, [r7, #32]
    7d92:	6a3b      	ldr	r3, [r7, #32]
    7d94:	1c5a      	adds	r2, r3, #1
    7d96:	69bb      	ldr	r3, [r7, #24]
    7d98:	429a      	cmp	r2, r3
    7d9a:	f6ff af42 	blt.w	7c22 <compile_comparison+0x42>
        }
    }
    if (multi) {
    7d9e:	7dfb      	ldrb	r3, [r7, #23]
    7da0:	2b00      	cmp	r3, #0
    7da2:	d025      	beq.n	7df0 <compile_comparison+0x210>
        uint l_end = comp_next_label(comp);
    7da4:	6878      	ldr	r0, [r7, #4]
    7da6:	f7fd f8d3 	bl	4f50 <comp_next_label>
    7daa:	60b8      	str	r0, [r7, #8]
        EMIT_ARG(jump, l_end);
    7dac:	687b      	ldr	r3, [r7, #4]
    7dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7db0:	68b9      	ldr	r1, [r7, #8]
    7db2:	4618      	mov	r0, r3
    7db4:	f002 fcf6 	bl	a7a4 <mp_emit_bc_jump>
        EMIT_ARG(label_assign, l_fail);
    7db8:	687b      	ldr	r3, [r7, #4]
    7dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7dbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7dbe:	4618      	mov	r0, r3
    7dc0:	f002 fa62 	bl	a288 <mp_emit_bc_label_assign>
        EMIT_ARG(adjust_stack_size, 1);
    7dc4:	687b      	ldr	r3, [r7, #4]
    7dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7dc8:	2101      	movs	r1, #1
    7dca:	4618      	mov	r0, r3
    7dcc:	f002 fa0a 	bl	a1e4 <mp_emit_bc_adjust_stack_size>
        EMIT(rot_two);
    7dd0:	687b      	ldr	r3, [r7, #4]
    7dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7dd4:	4618      	mov	r0, r3
    7dd6:	f002 fcc5 	bl	a764 <mp_emit_bc_rot_two>
        EMIT(pop_top);
    7dda:	687b      	ldr	r3, [r7, #4]
    7ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7dde:	4618      	mov	r0, r3
    7de0:	f002 fcae 	bl	a740 <mp_emit_bc_pop_top>
        EMIT_ARG(label_assign, l_end);
    7de4:	687b      	ldr	r3, [r7, #4]
    7de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7de8:	68b9      	ldr	r1, [r7, #8]
    7dea:	4618      	mov	r0, r3
    7dec:	f002 fa4c 	bl	a288 <mp_emit_bc_label_assign>
    }
}
    7df0:	bf00      	nop
    7df2:	3728      	adds	r7, #40	; 0x28
    7df4:	46bd      	mov	sp, r7
    7df6:	bd80      	pop	{r7, pc}
    7df8:	0002095c 	.word	0x0002095c
    7dfc:	00021058 	.word	0x00021058
    7e00:	00020358 	.word	0x00020358
    7e04:	00020984 	.word	0x00020984

00007e08 <compile_star_expr>:

STATIC void compile_star_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7e08:	b580      	push	{r7, lr}
    7e0a:	b082      	sub	sp, #8
    7e0c:	af00      	add	r7, sp, #0
    7e0e:	6078      	str	r0, [r7, #4]
    7e10:	6039      	str	r1, [r7, #0]
    compile_syntax_error(comp, (mp_parse_node_t)pns, "*x must be assignment target");
    7e12:	683b      	ldr	r3, [r7, #0]
    7e14:	4a04      	ldr	r2, [pc, #16]	; (7e28 <compile_star_expr+0x20>)
    7e16:	4619      	mov	r1, r3
    7e18:	6878      	ldr	r0, [r7, #4]
    7e1a:	f7fd f87d 	bl	4f18 <compile_syntax_error>
}
    7e1e:	bf00      	nop
    7e20:	3708      	adds	r7, #8
    7e22:	46bd      	mov	sp, r7
    7e24:	bd80      	pop	{r7, pc}
    7e26:	bf00      	nop
    7e28:	0002099c 	.word	0x0002099c

00007e2c <compile_binary_op>:

STATIC void compile_binary_op(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7e2c:	b580      	push	{r7, lr}
    7e2e:	b086      	sub	sp, #24
    7e30:	af00      	add	r7, sp, #0
    7e32:	6078      	str	r0, [r7, #4]
    7e34:	6039      	str	r1, [r7, #0]
    MP_STATIC_ASSERT(MP_BINARY_OP_OR + PN_xor_expr - PN_expr == MP_BINARY_OP_XOR);
    MP_STATIC_ASSERT(MP_BINARY_OP_OR + PN_and_expr - PN_expr == MP_BINARY_OP_AND);
    mp_binary_op_t binary_op = MP_BINARY_OP_OR + MP_PARSE_NODE_STRUCT_KIND(pns) - PN_expr;
    7e36:	683b      	ldr	r3, [r7, #0]
    7e38:	685b      	ldr	r3, [r3, #4]
    7e3a:	b2db      	uxtb	r3, r3
    7e3c:	3b0c      	subs	r3, #12
    7e3e:	613b      	str	r3, [r7, #16]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7e40:	683b      	ldr	r3, [r7, #0]
    7e42:	685b      	ldr	r3, [r3, #4]
    7e44:	0a1b      	lsrs	r3, r3, #8
    7e46:	60fb      	str	r3, [r7, #12]
    compile_node(comp, pns->nodes[0]);
    7e48:	683b      	ldr	r3, [r7, #0]
    7e4a:	689b      	ldr	r3, [r3, #8]
    7e4c:	4619      	mov	r1, r3
    7e4e:	6878      	ldr	r0, [r7, #4]
    7e50:	f000 fe48 	bl	8ae4 <compile_node>
    for (int i = 1; i < num_nodes; ++i) {
    7e54:	2301      	movs	r3, #1
    7e56:	617b      	str	r3, [r7, #20]
    7e58:	e011      	b.n	7e7e <compile_binary_op+0x52>
        compile_node(comp, pns->nodes[i]);
    7e5a:	683b      	ldr	r3, [r7, #0]
    7e5c:	697a      	ldr	r2, [r7, #20]
    7e5e:	3202      	adds	r2, #2
    7e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7e64:	4619      	mov	r1, r3
    7e66:	6878      	ldr	r0, [r7, #4]
    7e68:	f000 fe3c 	bl	8ae4 <compile_node>
        EMIT_ARG(binary_op, binary_op);
    7e6c:	687b      	ldr	r3, [r7, #4]
    7e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7e70:	6939      	ldr	r1, [r7, #16]
    7e72:	4618      	mov	r0, r3
    7e74:	f002 fdf4 	bl	aa60 <mp_emit_bc_binary_op>
    for (int i = 1; i < num_nodes; ++i) {
    7e78:	697b      	ldr	r3, [r7, #20]
    7e7a:	3301      	adds	r3, #1
    7e7c:	617b      	str	r3, [r7, #20]
    7e7e:	697a      	ldr	r2, [r7, #20]
    7e80:	68fb      	ldr	r3, [r7, #12]
    7e82:	429a      	cmp	r2, r3
    7e84:	dbe9      	blt.n	7e5a <compile_binary_op+0x2e>
    }
}
    7e86:	bf00      	nop
    7e88:	3718      	adds	r7, #24
    7e8a:	46bd      	mov	sp, r7
    7e8c:	bd80      	pop	{r7, pc}
    7e8e:	bf00      	nop

00007e90 <compile_term>:

STATIC void compile_term(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7e90:	b580      	push	{r7, lr}
    7e92:	b086      	sub	sp, #24
    7e94:	af00      	add	r7, sp, #0
    7e96:	6078      	str	r0, [r7, #4]
    7e98:	6039      	str	r1, [r7, #0]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7e9a:	683b      	ldr	r3, [r7, #0]
    7e9c:	685b      	ldr	r3, [r3, #4]
    7e9e:	0a1b      	lsrs	r3, r3, #8
    7ea0:	60fb      	str	r3, [r7, #12]
    compile_node(comp, pns->nodes[0]);
    7ea2:	683b      	ldr	r3, [r7, #0]
    7ea4:	689b      	ldr	r3, [r3, #8]
    7ea6:	4619      	mov	r1, r3
    7ea8:	6878      	ldr	r0, [r7, #4]
    7eaa:	f000 fe1b 	bl	8ae4 <compile_node>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7eae:	2301      	movs	r3, #1
    7eb0:	617b      	str	r3, [r7, #20]
    7eb2:	e054      	b.n	7f5e <compile_term+0xce>
        compile_node(comp, pns->nodes[i + 1]);
    7eb4:	697b      	ldr	r3, [r7, #20]
    7eb6:	1c5a      	adds	r2, r3, #1
    7eb8:	683b      	ldr	r3, [r7, #0]
    7eba:	3202      	adds	r2, #2
    7ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ec0:	4619      	mov	r1, r3
    7ec2:	6878      	ldr	r0, [r7, #4]
    7ec4:	f000 fe0e 	bl	8ae4 <compile_node>
        mp_binary_op_t op;
        mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]);
    7ec8:	683b      	ldr	r3, [r7, #0]
    7eca:	697a      	ldr	r2, [r7, #20]
    7ecc:	3202      	adds	r2, #2
    7ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ed2:	091b      	lsrs	r3, r3, #4
    7ed4:	60bb      	str	r3, [r7, #8]
        switch (tok) {
    7ed6:	68bb      	ldr	r3, [r7, #8]
    7ed8:	3b2f      	subs	r3, #47	; 0x2f
    7eda:	2b08      	cmp	r3, #8
    7edc:	d829      	bhi.n	7f32 <compile_term+0xa2>
    7ede:	a201      	add	r2, pc, #4	; (adr r2, 7ee4 <compile_term+0x54>)
    7ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7ee4:	00007f09 	.word	0x00007f09
    7ee8:	00007f0f 	.word	0x00007f0f
    7eec:	00007f15 	.word	0x00007f15
    7ef0:	00007f33 	.word	0x00007f33
    7ef4:	00007f21 	.word	0x00007f21
    7ef8:	00007f1b 	.word	0x00007f1b
    7efc:	00007f27 	.word	0x00007f27
    7f00:	00007f33 	.word	0x00007f33
    7f04:	00007f2d 	.word	0x00007f2d
            case MP_TOKEN_OP_PLUS:      op = MP_BINARY_OP_ADD; break;
    7f08:	231a      	movs	r3, #26
    7f0a:	613b      	str	r3, [r7, #16]
    7f0c:	e01e      	b.n	7f4c <compile_term+0xbc>
            case MP_TOKEN_OP_MINUS:     op = MP_BINARY_OP_SUBTRACT; break;
    7f0e:	231b      	movs	r3, #27
    7f10:	613b      	str	r3, [r7, #16]
    7f12:	e01b      	b.n	7f4c <compile_term+0xbc>
            case MP_TOKEN_OP_STAR:      op = MP_BINARY_OP_MULTIPLY; break;
    7f14:	231c      	movs	r3, #28
    7f16:	613b      	str	r3, [r7, #16]
    7f18:	e018      	b.n	7f4c <compile_term+0xbc>
            case MP_TOKEN_OP_DBL_SLASH: op = MP_BINARY_OP_FLOOR_DIVIDE; break;
    7f1a:	231d      	movs	r3, #29
    7f1c:	613b      	str	r3, [r7, #16]
    7f1e:	e015      	b.n	7f4c <compile_term+0xbc>
            case MP_TOKEN_OP_SLASH:     op = MP_BINARY_OP_TRUE_DIVIDE; break;
    7f20:	231e      	movs	r3, #30
    7f22:	613b      	str	r3, [r7, #16]
    7f24:	e012      	b.n	7f4c <compile_term+0xbc>
            case MP_TOKEN_OP_PERCENT:   op = MP_BINARY_OP_MODULO; break;
    7f26:	231f      	movs	r3, #31
    7f28:	613b      	str	r3, [r7, #16]
    7f2a:	e00f      	b.n	7f4c <compile_term+0xbc>
            case MP_TOKEN_OP_DBL_LESS:  op = MP_BINARY_OP_LSHIFT; break;
    7f2c:	2318      	movs	r3, #24
    7f2e:	613b      	str	r3, [r7, #16]
    7f30:	e00c      	b.n	7f4c <compile_term+0xbc>
            default:
                assert(tok == MP_TOKEN_OP_DBL_MORE);
    7f32:	68bb      	ldr	r3, [r7, #8]
    7f34:	2b39      	cmp	r3, #57	; 0x39
    7f36:	d006      	beq.n	7f46 <compile_term+0xb6>
    7f38:	4b0d      	ldr	r3, [pc, #52]	; (7f70 <compile_term+0xe0>)
    7f3a:	4a0e      	ldr	r2, [pc, #56]	; (7f74 <compile_term+0xe4>)
    7f3c:	f640 016e 	movw	r1, #2158	; 0x86e
    7f40:	480d      	ldr	r0, [pc, #52]	; (7f78 <compile_term+0xe8>)
    7f42:	f013 fc1f 	bl	1b784 <__assert_func>
                op = MP_BINARY_OP_RSHIFT;
    7f46:	2319      	movs	r3, #25
    7f48:	613b      	str	r3, [r7, #16]
                break;
    7f4a:	bf00      	nop
        }
        EMIT_ARG(binary_op, op);
    7f4c:	687b      	ldr	r3, [r7, #4]
    7f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7f50:	6939      	ldr	r1, [r7, #16]
    7f52:	4618      	mov	r0, r3
    7f54:	f002 fd84 	bl	aa60 <mp_emit_bc_binary_op>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7f58:	697b      	ldr	r3, [r7, #20]
    7f5a:	3302      	adds	r3, #2
    7f5c:	617b      	str	r3, [r7, #20]
    7f5e:	697b      	ldr	r3, [r7, #20]
    7f60:	1c5a      	adds	r2, r3, #1
    7f62:	68fb      	ldr	r3, [r7, #12]
    7f64:	429a      	cmp	r2, r3
    7f66:	dba5      	blt.n	7eb4 <compile_term+0x24>
    }
}
    7f68:	bf00      	nop
    7f6a:	3718      	adds	r7, #24
    7f6c:	46bd      	mov	sp, r7
    7f6e:	bd80      	pop	{r7, pc}
    7f70:	000209bc 	.word	0x000209bc
    7f74:	0002106c 	.word	0x0002106c
    7f78:	00020358 	.word	0x00020358

00007f7c <compile_factor_2>:

STATIC void compile_factor_2(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7f7c:	b580      	push	{r7, lr}
    7f7e:	b084      	sub	sp, #16
    7f80:	af00      	add	r7, sp, #0
    7f82:	6078      	str	r0, [r7, #4]
    7f84:	6039      	str	r1, [r7, #0]
    compile_node(comp, pns->nodes[1]);
    7f86:	683b      	ldr	r3, [r7, #0]
    7f88:	68db      	ldr	r3, [r3, #12]
    7f8a:	4619      	mov	r1, r3
    7f8c:	6878      	ldr	r0, [r7, #4]
    7f8e:	f000 fda9 	bl	8ae4 <compile_node>
    mp_unary_op_t op;
    mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    7f92:	683b      	ldr	r3, [r7, #0]
    7f94:	689b      	ldr	r3, [r3, #8]
    7f96:	091b      	lsrs	r3, r3, #4
    7f98:	60bb      	str	r3, [r7, #8]
    switch (tok) {
    7f9a:	68bb      	ldr	r3, [r7, #8]
    7f9c:	2b2f      	cmp	r3, #47	; 0x2f
    7f9e:	d002      	beq.n	7fa6 <compile_factor_2+0x2a>
    7fa0:	2b30      	cmp	r3, #48	; 0x30
    7fa2:	d003      	beq.n	7fac <compile_factor_2+0x30>
    7fa4:	e005      	b.n	7fb2 <compile_factor_2+0x36>
        case MP_TOKEN_OP_PLUS:  op = MP_UNARY_OP_POSITIVE; break;
    7fa6:	2300      	movs	r3, #0
    7fa8:	60fb      	str	r3, [r7, #12]
    7faa:	e00f      	b.n	7fcc <compile_factor_2+0x50>
        case MP_TOKEN_OP_MINUS: op = MP_UNARY_OP_NEGATIVE; break;
    7fac:	2301      	movs	r3, #1
    7fae:	60fb      	str	r3, [r7, #12]
    7fb0:	e00c      	b.n	7fcc <compile_factor_2+0x50>
        default:
            assert(tok == MP_TOKEN_OP_TILDE);
    7fb2:	68bb      	ldr	r3, [r7, #8]
    7fb4:	2b3d      	cmp	r3, #61	; 0x3d
    7fb6:	d006      	beq.n	7fc6 <compile_factor_2+0x4a>
    7fb8:	4b09      	ldr	r3, [pc, #36]	; (7fe0 <compile_factor_2+0x64>)
    7fba:	4a0a      	ldr	r2, [pc, #40]	; (7fe4 <compile_factor_2+0x68>)
    7fbc:	f640 017e 	movw	r1, #2174	; 0x87e
    7fc0:	4809      	ldr	r0, [pc, #36]	; (7fe8 <compile_factor_2+0x6c>)
    7fc2:	f013 fbdf 	bl	1b784 <__assert_func>
            op = MP_UNARY_OP_INVERT;
    7fc6:	2302      	movs	r3, #2
    7fc8:	60fb      	str	r3, [r7, #12]
            break;
    7fca:	bf00      	nop
    }
    EMIT_ARG(unary_op, op);
    7fcc:	687b      	ldr	r3, [r7, #4]
    7fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7fd0:	68f9      	ldr	r1, [r7, #12]
    7fd2:	4618      	mov	r0, r3
    7fd4:	f002 fd2e 	bl	aa34 <mp_emit_bc_unary_op>
}
    7fd8:	bf00      	nop
    7fda:	3710      	adds	r7, #16
    7fdc:	46bd      	mov	sp, r7
    7fde:	bd80      	pop	{r7, pc}
    7fe0:	000209d8 	.word	0x000209d8
    7fe4:	0002107c 	.word	0x0002107c
    7fe8:	00020358 	.word	0x00020358

00007fec <compile_atom_expr_normal>:

STATIC void compile_atom_expr_normal(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7fec:	b580      	push	{r7, lr}
    7fee:	b08c      	sub	sp, #48	; 0x30
    7ff0:	af00      	add	r7, sp, #0
    7ff2:	6078      	str	r0, [r7, #4]
    7ff4:	6039      	str	r1, [r7, #0]
    // compile the subject of the expression
    compile_node(comp, pns->nodes[0]);
    7ff6:	683b      	ldr	r3, [r7, #0]
    7ff8:	689b      	ldr	r3, [r3, #8]
    7ffa:	4619      	mov	r1, r3
    7ffc:	6878      	ldr	r0, [r7, #4]
    7ffe:	f000 fd71 	bl	8ae4 <compile_node>

    // compile_atom_expr_await may call us with a NULL node
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    8002:	683b      	ldr	r3, [r7, #0]
    8004:	68db      	ldr	r3, [r3, #12]
    8006:	2b00      	cmp	r3, #0
    8008:	f000 80ed 	beq.w	81e6 <compile_atom_expr_normal+0x1fa>
        return;
    }

    // get the array of trailers (known to be an array of PARSE_NODE_STRUCT)
    size_t num_trail = 1;
    800c:	2301      	movs	r3, #1
    800e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_parse_node_struct_t **pns_trail = (mp_parse_node_struct_t**)&pns->nodes[1];
    8010:	683b      	ldr	r3, [r7, #0]
    8012:	330c      	adds	r3, #12
    8014:	62bb      	str	r3, [r7, #40]	; 0x28
    if (MP_PARSE_NODE_STRUCT_KIND(pns_trail[0]) == PN_atom_expr_trailers) {
    8016:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8018:	681b      	ldr	r3, [r3, #0]
    801a:	685b      	ldr	r3, [r3, #4]
    801c:	b2db      	uxtb	r3, r3
    801e:	2b86      	cmp	r3, #134	; 0x86
    8020:	d108      	bne.n	8034 <compile_atom_expr_normal+0x48>
        num_trail = MP_PARSE_NODE_STRUCT_NUM_NODES(pns_trail[0]);
    8022:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8024:	681b      	ldr	r3, [r3, #0]
    8026:	685b      	ldr	r3, [r3, #4]
    8028:	0a1b      	lsrs	r3, r3, #8
    802a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pns_trail = (mp_parse_node_struct_t**)&pns_trail[0]->nodes[0];
    802c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    802e:	681b      	ldr	r3, [r3, #0]
    8030:	3308      	adds	r3, #8
    8032:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    // the current index into the array of trailers
    size_t i = 0;
    8034:	2300      	movs	r3, #0
    8036:	627b      	str	r3, [r7, #36]	; 0x24

    // handle special super() call
    if (comp->scope_cur->kind == SCOPE_FUNCTION
    8038:	687b      	ldr	r3, [r7, #4]
    803a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    803c:	681b      	ldr	r3, [r3, #0]
    803e:	2b07      	cmp	r3, #7
    8040:	f040 80cc 	bne.w	81dc <compile_atom_expr_normal+0x1f0>
        && MP_PARSE_NODE_IS_ID(pns->nodes[0])
    8044:	683b      	ldr	r3, [r7, #0]
    8046:	689b      	ldr	r3, [r3, #8]
    8048:	f003 030f 	and.w	r3, r3, #15
    804c:	2b02      	cmp	r3, #2
    804e:	f040 80c5 	bne.w	81dc <compile_atom_expr_normal+0x1f0>
        && MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]) == MP_QSTR_super
    8052:	683b      	ldr	r3, [r7, #0]
    8054:	689b      	ldr	r3, [r3, #8]
    8056:	091b      	lsrs	r3, r3, #4
    8058:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
    805c:	f040 80be 	bne.w	81dc <compile_atom_expr_normal+0x1f0>
        && MP_PARSE_NODE_STRUCT_KIND(pns_trail[0]) == PN_trailer_paren
    8060:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8062:	681b      	ldr	r3, [r3, #0]
    8064:	685b      	ldr	r3, [r3, #4]
    8066:	b2db      	uxtb	r3, r3
    8068:	2b2d      	cmp	r3, #45	; 0x2d
    806a:	f040 80b7 	bne.w	81dc <compile_atom_expr_normal+0x1f0>
        && MP_PARSE_NODE_IS_NULL(pns_trail[0]->nodes[0])) {
    806e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8070:	681b      	ldr	r3, [r3, #0]
    8072:	689b      	ldr	r3, [r3, #8]
    8074:	2b00      	cmp	r3, #0
    8076:	f040 80b1 	bne.w	81dc <compile_atom_expr_normal+0x1f0>
        // at this point we have matched "super()" within a function

        // load the class for super to search for a parent
        compile_load_id(comp, MP_QSTR___class__);
    807a:	2106      	movs	r1, #6
    807c:	6878      	ldr	r0, [r7, #4]
    807e:	f7fd f85b 	bl	5138 <compile_load_id>

        // look for first argument to function (assumes it's "self")
        bool found = false;
    8082:	2300      	movs	r3, #0
    8084:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        id_info_t *id = &comp->scope_cur->id_info[0];
    8088:	687b      	ldr	r3, [r7, #4]
    808a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    808c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    808e:	61fb      	str	r3, [r7, #28]
        for (size_t n = comp->scope_cur->id_info_len; n > 0; --n, ++id) {
    8090:	687b      	ldr	r3, [r7, #4]
    8092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    8096:	61bb      	str	r3, [r7, #24]
    8098:	e015      	b.n	80c6 <compile_atom_expr_normal+0xda>
            if (id->flags & ID_FLAG_IS_PARAM) {
    809a:	69fb      	ldr	r3, [r7, #28]
    809c:	785b      	ldrb	r3, [r3, #1]
    809e:	f003 0301 	and.w	r3, r3, #1
    80a2:	2b00      	cmp	r3, #0
    80a4:	d009      	beq.n	80ba <compile_atom_expr_normal+0xce>
                // first argument found; load it
                compile_load_id(comp, id->qst);
    80a6:	69fb      	ldr	r3, [r7, #28]
    80a8:	685b      	ldr	r3, [r3, #4]
    80aa:	4619      	mov	r1, r3
    80ac:	6878      	ldr	r0, [r7, #4]
    80ae:	f7fd f843 	bl	5138 <compile_load_id>
                found = true;
    80b2:	2301      	movs	r3, #1
    80b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                break;
    80b8:	e008      	b.n	80cc <compile_atom_expr_normal+0xe0>
        for (size_t n = comp->scope_cur->id_info_len; n > 0; --n, ++id) {
    80ba:	69bb      	ldr	r3, [r7, #24]
    80bc:	3b01      	subs	r3, #1
    80be:	61bb      	str	r3, [r7, #24]
    80c0:	69fb      	ldr	r3, [r7, #28]
    80c2:	3308      	adds	r3, #8
    80c4:	61fb      	str	r3, [r7, #28]
    80c6:	69bb      	ldr	r3, [r7, #24]
    80c8:	2b00      	cmp	r3, #0
    80ca:	d1e6      	bne.n	809a <compile_atom_expr_normal+0xae>
            }
        }
        if (!found) {
    80cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    80d0:	f083 0301 	eor.w	r3, r3, #1
    80d4:	b2db      	uxtb	r3, r3
    80d6:	2b00      	cmp	r3, #0
    80d8:	d007      	beq.n	80ea <compile_atom_expr_normal+0xfe>
            compile_syntax_error(comp, (mp_parse_node_t)pns_trail[0],
    80da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    80dc:	681b      	ldr	r3, [r3, #0]
    80de:	4a44      	ldr	r2, [pc, #272]	; (81f0 <compile_atom_expr_normal+0x204>)
    80e0:	4619      	mov	r1, r3
    80e2:	6878      	ldr	r0, [r7, #4]
    80e4:	f7fc ff18 	bl	4f18 <compile_syntax_error>
                "super() can't find self"); // really a TypeError
            return;
    80e8:	e07e      	b.n	81e8 <compile_atom_expr_normal+0x1fc>
        }

        if (num_trail >= 3
    80ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    80ec:	2b02      	cmp	r3, #2
    80ee:	d926      	bls.n	813e <compile_atom_expr_normal+0x152>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[1]) == PN_trailer_period
    80f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    80f2:	3304      	adds	r3, #4
    80f4:	681b      	ldr	r3, [r3, #0]
    80f6:	685b      	ldr	r3, [r3, #4]
    80f8:	b2db      	uxtb	r3, r3
    80fa:	2b2f      	cmp	r3, #47	; 0x2f
    80fc:	d11f      	bne.n	813e <compile_atom_expr_normal+0x152>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[2]) == PN_trailer_paren) {
    80fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8100:	3308      	adds	r3, #8
    8102:	681b      	ldr	r3, [r3, #0]
    8104:	685b      	ldr	r3, [r3, #4]
    8106:	b2db      	uxtb	r3, r3
    8108:	2b2d      	cmp	r3, #45	; 0x2d
    810a:	d118      	bne.n	813e <compile_atom_expr_normal+0x152>
            // optimisation for method calls super().f(...), to eliminate heap allocation
            mp_parse_node_struct_t *pns_period = pns_trail[1];
    810c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    810e:	685b      	ldr	r3, [r3, #4]
    8110:	617b      	str	r3, [r7, #20]
            mp_parse_node_struct_t *pns_paren = pns_trail[2];
    8112:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8114:	689b      	ldr	r3, [r3, #8]
    8116:	613b      	str	r3, [r7, #16]
            EMIT_ARG(load_method, MP_PARSE_NODE_LEAF_ARG(pns_period->nodes[0]), true);
    8118:	687b      	ldr	r3, [r7, #4]
    811a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    811c:	697b      	ldr	r3, [r7, #20]
    811e:	689b      	ldr	r3, [r3, #8]
    8120:	091b      	lsrs	r3, r3, #4
    8122:	2201      	movs	r2, #1
    8124:	4619      	mov	r1, r3
    8126:	f002 f9ff 	bl	a528 <mp_emit_bc_load_method>
            compile_trailer_paren_helper(comp, pns_paren->nodes[0], true, 0);
    812a:	693b      	ldr	r3, [r7, #16]
    812c:	6899      	ldr	r1, [r3, #8]
    812e:	2300      	movs	r3, #0
    8130:	2201      	movs	r2, #1
    8132:	6878      	ldr	r0, [r7, #4]
    8134:	f000 f872 	bl	821c <compile_trailer_paren_helper>
            i = 3;
    8138:	2303      	movs	r3, #3
    813a:	627b      	str	r3, [r7, #36]	; 0x24
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[2]) == PN_trailer_paren) {
    813c:	e008      	b.n	8150 <compile_atom_expr_normal+0x164>
        } else {
            // a super() call
            EMIT_ARG(call_function, 2, 0, 0);
    813e:	687b      	ldr	r3, [r7, #4]
    8140:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8142:	2300      	movs	r3, #0
    8144:	2200      	movs	r2, #0
    8146:	2102      	movs	r1, #2
    8148:	f002 fdf4 	bl	ad34 <mp_emit_bc_call_function>
            i = 1;
    814c:	2301      	movs	r3, #1
    814e:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    // compile the remaining trailers
    for (; i < num_trail; i++) {
    8150:	e044      	b.n	81dc <compile_atom_expr_normal+0x1f0>
        if (i + 1 < num_trail
    8152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8154:	1c5a      	adds	r2, r3, #1
    8156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8158:	429a      	cmp	r2, r3
    815a:	d233      	bcs.n	81c4 <compile_atom_expr_normal+0x1d8>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i]) == PN_trailer_period
    815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    815e:	009b      	lsls	r3, r3, #2
    8160:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8162:	4413      	add	r3, r2
    8164:	681b      	ldr	r3, [r3, #0]
    8166:	685b      	ldr	r3, [r3, #4]
    8168:	b2db      	uxtb	r3, r3
    816a:	2b2f      	cmp	r3, #47	; 0x2f
    816c:	d12a      	bne.n	81c4 <compile_atom_expr_normal+0x1d8>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i + 1]) == PN_trailer_paren) {
    816e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8170:	3301      	adds	r3, #1
    8172:	009b      	lsls	r3, r3, #2
    8174:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8176:	4413      	add	r3, r2
    8178:	681b      	ldr	r3, [r3, #0]
    817a:	685b      	ldr	r3, [r3, #4]
    817c:	b2db      	uxtb	r3, r3
    817e:	2b2d      	cmp	r3, #45	; 0x2d
    8180:	d120      	bne.n	81c4 <compile_atom_expr_normal+0x1d8>
            // optimisation for method calls a.f(...), following PyPy
            mp_parse_node_struct_t *pns_period = pns_trail[i];
    8182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8184:	009b      	lsls	r3, r3, #2
    8186:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8188:	4413      	add	r3, r2
    818a:	681b      	ldr	r3, [r3, #0]
    818c:	60fb      	str	r3, [r7, #12]
            mp_parse_node_struct_t *pns_paren = pns_trail[i + 1];
    818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8190:	3301      	adds	r3, #1
    8192:	009b      	lsls	r3, r3, #2
    8194:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8196:	4413      	add	r3, r2
    8198:	681b      	ldr	r3, [r3, #0]
    819a:	60bb      	str	r3, [r7, #8]
            EMIT_ARG(load_method, MP_PARSE_NODE_LEAF_ARG(pns_period->nodes[0]), false);
    819c:	687b      	ldr	r3, [r7, #4]
    819e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    81a0:	68fb      	ldr	r3, [r7, #12]
    81a2:	689b      	ldr	r3, [r3, #8]
    81a4:	091b      	lsrs	r3, r3, #4
    81a6:	2200      	movs	r2, #0
    81a8:	4619      	mov	r1, r3
    81aa:	f002 f9bd 	bl	a528 <mp_emit_bc_load_method>
            compile_trailer_paren_helper(comp, pns_paren->nodes[0], true, 0);
    81ae:	68bb      	ldr	r3, [r7, #8]
    81b0:	6899      	ldr	r1, [r3, #8]
    81b2:	2300      	movs	r3, #0
    81b4:	2201      	movs	r2, #1
    81b6:	6878      	ldr	r0, [r7, #4]
    81b8:	f000 f830 	bl	821c <compile_trailer_paren_helper>
            i += 1;
    81bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    81be:	3301      	adds	r3, #1
    81c0:	627b      	str	r3, [r7, #36]	; 0x24
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i + 1]) == PN_trailer_paren) {
    81c2:	e008      	b.n	81d6 <compile_atom_expr_normal+0x1ea>
        } else {
            // node is one of: trailer_paren, trailer_bracket, trailer_period
            compile_node(comp, (mp_parse_node_t)pns_trail[i]);
    81c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    81c6:	009b      	lsls	r3, r3, #2
    81c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    81ca:	4413      	add	r3, r2
    81cc:	681b      	ldr	r3, [r3, #0]
    81ce:	4619      	mov	r1, r3
    81d0:	6878      	ldr	r0, [r7, #4]
    81d2:	f000 fc87 	bl	8ae4 <compile_node>
    for (; i < num_trail; i++) {
    81d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    81d8:	3301      	adds	r3, #1
    81da:	627b      	str	r3, [r7, #36]	; 0x24
    81dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    81de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    81e0:	429a      	cmp	r2, r3
    81e2:	d3b6      	bcc.n	8152 <compile_atom_expr_normal+0x166>
    81e4:	e000      	b.n	81e8 <compile_atom_expr_normal+0x1fc>
        return;
    81e6:	bf00      	nop
        }
    }
}
    81e8:	3730      	adds	r7, #48	; 0x30
    81ea:	46bd      	mov	sp, r7
    81ec:	bd80      	pop	{r7, pc}
    81ee:	bf00      	nop
    81f0:	000209f4 	.word	0x000209f4

000081f4 <compile_power>:

STATIC void compile_power(compiler_t *comp, mp_parse_node_struct_t *pns) {
    81f4:	b580      	push	{r7, lr}
    81f6:	b082      	sub	sp, #8
    81f8:	af00      	add	r7, sp, #0
    81fa:	6078      	str	r0, [r7, #4]
    81fc:	6039      	str	r1, [r7, #0]
    compile_generic_all_nodes(comp, pns); // 2 nodes, arguments of power
    81fe:	6839      	ldr	r1, [r7, #0]
    8200:	6878      	ldr	r0, [r7, #4]
    8202:	f7fc ff6b 	bl	50dc <compile_generic_all_nodes>
    EMIT_ARG(binary_op, MP_BINARY_OP_POWER);
    8206:	687b      	ldr	r3, [r7, #4]
    8208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    820a:	2120      	movs	r1, #32
    820c:	4618      	mov	r0, r3
    820e:	f002 fc27 	bl	aa60 <mp_emit_bc_binary_op>
}
    8212:	bf00      	nop
    8214:	3708      	adds	r7, #8
    8216:	46bd      	mov	sp, r7
    8218:	bd80      	pop	{r7, pc}
    821a:	bf00      	nop

0000821c <compile_trailer_paren_helper>:

STATIC void compile_trailer_paren_helper(compiler_t *comp, mp_parse_node_t pn_arglist, bool is_method_call, int n_positional_extra) {
    821c:	b580      	push	{r7, lr}
    821e:	b08e      	sub	sp, #56	; 0x38
    8220:	af00      	add	r7, sp, #0
    8222:	60f8      	str	r0, [r7, #12]
    8224:	60b9      	str	r1, [r7, #8]
    8226:	603b      	str	r3, [r7, #0]
    8228:	4613      	mov	r3, r2
    822a:	71fb      	strb	r3, [r7, #7]
    // function to call is on top of stack

    // get the list of arguments
    mp_parse_node_t *args;
    int n_args = mp_parse_node_extract_list(&pn_arglist, PN_arglist, &args);
    822c:	f107 0214 	add.w	r2, r7, #20
    8230:	f107 0308 	add.w	r3, r7, #8
    8234:	2197      	movs	r1, #151	; 0x97
    8236:	4618      	mov	r0, r3
    8238:	f7fb fd6c 	bl	3d14 <mp_parse_node_extract_list>
    823c:	61f8      	str	r0, [r7, #28]

    // compile the arguments
    // Rather than calling compile_node on the list, we go through the list of args
    // explicitly here so that we can count the number of arguments and give sensible
    // error messages.
    int n_positional = n_positional_extra;
    823e:	683b      	ldr	r3, [r7, #0]
    8240:	637b      	str	r3, [r7, #52]	; 0x34
    uint n_keyword = 0;
    8242:	2300      	movs	r3, #0
    8244:	633b      	str	r3, [r7, #48]	; 0x30
    uint star_flags = 0;
    8246:	2300      	movs	r3, #0
    8248:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_parse_node_struct_t *star_args_node = NULL, *dblstar_args_node = NULL;
    824a:	2300      	movs	r3, #0
    824c:	62bb      	str	r3, [r7, #40]	; 0x28
    824e:	2300      	movs	r3, #0
    8250:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < n_args; i++) {
    8252:	2300      	movs	r3, #0
    8254:	623b      	str	r3, [r7, #32]
    8256:	e0af      	b.n	83b8 <compile_trailer_paren_helper+0x19c>
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    8258:	697a      	ldr	r2, [r7, #20]
    825a:	6a3b      	ldr	r3, [r7, #32]
    825c:	009b      	lsls	r3, r3, #2
    825e:	4413      	add	r3, r2
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	2b00      	cmp	r3, #0
    8264:	d07d      	beq.n	8362 <compile_trailer_paren_helper+0x146>
    8266:	697a      	ldr	r2, [r7, #20]
    8268:	6a3b      	ldr	r3, [r7, #32]
    826a:	009b      	lsls	r3, r3, #2
    826c:	4413      	add	r3, r2
    826e:	681b      	ldr	r3, [r3, #0]
    8270:	f003 0303 	and.w	r3, r3, #3
    8274:	2b00      	cmp	r3, #0
    8276:	d174      	bne.n	8362 <compile_trailer_paren_helper+0x146>
            mp_parse_node_struct_t *pns_arg = (mp_parse_node_struct_t*)args[i];
    8278:	697a      	ldr	r2, [r7, #20]
    827a:	6a3b      	ldr	r3, [r7, #32]
    827c:	009b      	lsls	r3, r3, #2
    827e:	4413      	add	r3, r2
    8280:	681b      	ldr	r3, [r3, #0]
    8282:	61bb      	str	r3, [r7, #24]
            if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_arglist_star) {
    8284:	69bb      	ldr	r3, [r7, #24]
    8286:	685b      	ldr	r3, [r3, #4]
    8288:	b2db      	uxtb	r3, r3
    828a:	2b99      	cmp	r3, #153	; 0x99
    828c:	d112      	bne.n	82b4 <compile_trailer_paren_helper+0x98>
                if (star_flags & MP_EMIT_STAR_FLAG_SINGLE) {
    828e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8290:	f003 0301 	and.w	r3, r3, #1
    8294:	2b00      	cmp	r3, #0
    8296:	d006      	beq.n	82a6 <compile_trailer_paren_helper+0x8a>
                    compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "can't have multiple *x");
    8298:	69bb      	ldr	r3, [r7, #24]
    829a:	4a65      	ldr	r2, [pc, #404]	; (8430 <compile_trailer_paren_helper+0x214>)
    829c:	4619      	mov	r1, r3
    829e:	68f8      	ldr	r0, [r7, #12]
    82a0:	f7fc fe3a 	bl	4f18 <compile_syntax_error>
                    return;
    82a4:	e0c0      	b.n	8428 <compile_trailer_paren_helper+0x20c>
                }
                star_flags |= MP_EMIT_STAR_FLAG_SINGLE;
    82a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    82a8:	f043 0301 	orr.w	r3, r3, #1
    82ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                star_args_node = pns_arg;
    82ae:	69bb      	ldr	r3, [r7, #24]
    82b0:	62bb      	str	r3, [r7, #40]	; 0x28
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    82b2:	e07e      	b.n	83b2 <compile_trailer_paren_helper+0x196>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_arglist_dbl_star) {
    82b4:	69bb      	ldr	r3, [r7, #24]
    82b6:	685b      	ldr	r3, [r3, #4]
    82b8:	b2db      	uxtb	r3, r3
    82ba:	2b9a      	cmp	r3, #154	; 0x9a
    82bc:	d112      	bne.n	82e4 <compile_trailer_paren_helper+0xc8>
                if (star_flags & MP_EMIT_STAR_FLAG_DOUBLE) {
    82be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    82c0:	f003 0302 	and.w	r3, r3, #2
    82c4:	2b00      	cmp	r3, #0
    82c6:	d006      	beq.n	82d6 <compile_trailer_paren_helper+0xba>
                    compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "can't have multiple **x");
    82c8:	69bb      	ldr	r3, [r7, #24]
    82ca:	4a5a      	ldr	r2, [pc, #360]	; (8434 <compile_trailer_paren_helper+0x218>)
    82cc:	4619      	mov	r1, r3
    82ce:	68f8      	ldr	r0, [r7, #12]
    82d0:	f7fc fe22 	bl	4f18 <compile_syntax_error>
                    return;
    82d4:	e0a8      	b.n	8428 <compile_trailer_paren_helper+0x20c>
                }
                star_flags |= MP_EMIT_STAR_FLAG_DOUBLE;
    82d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    82d8:	f043 0302 	orr.w	r3, r3, #2
    82dc:	62fb      	str	r3, [r7, #44]	; 0x2c
                dblstar_args_node = pns_arg;
    82de:	69bb      	ldr	r3, [r7, #24]
    82e0:	627b      	str	r3, [r7, #36]	; 0x24
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    82e2:	e066      	b.n	83b2 <compile_trailer_paren_helper+0x196>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_argument) {
    82e4:	69bb      	ldr	r3, [r7, #24]
    82e6:	685b      	ldr	r3, [r3, #4]
    82e8:	b2db      	uxtb	r3, r3
    82ea:	2b9b      	cmp	r3, #155	; 0x9b
    82ec:	d138      	bne.n	8360 <compile_trailer_paren_helper+0x144>
                if (!MP_PARSE_NODE_IS_STRUCT_KIND(pns_arg->nodes[1], PN_comp_for)) {
    82ee:	69bb      	ldr	r3, [r7, #24]
    82f0:	68db      	ldr	r3, [r3, #12]
    82f2:	2b00      	cmp	r3, #0
    82f4:	d00b      	beq.n	830e <compile_trailer_paren_helper+0xf2>
    82f6:	69bb      	ldr	r3, [r7, #24]
    82f8:	68db      	ldr	r3, [r3, #12]
    82fa:	f003 0303 	and.w	r3, r3, #3
    82fe:	2b00      	cmp	r3, #0
    8300:	d105      	bne.n	830e <compile_trailer_paren_helper+0xf2>
    8302:	69bb      	ldr	r3, [r7, #24]
    8304:	68db      	ldr	r3, [r3, #12]
    8306:	685b      	ldr	r3, [r3, #4]
    8308:	b2db      	uxtb	r3, r3
    830a:	2b9f      	cmp	r3, #159	; 0x9f
    830c:	d01f      	beq.n	834e <compile_trailer_paren_helper+0x132>
                    if (!MP_PARSE_NODE_IS_ID(pns_arg->nodes[0])) {
    830e:	69bb      	ldr	r3, [r7, #24]
    8310:	689b      	ldr	r3, [r3, #8]
    8312:	f003 030f 	and.w	r3, r3, #15
    8316:	2b02      	cmp	r3, #2
    8318:	d006      	beq.n	8328 <compile_trailer_paren_helper+0x10c>
                        compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "LHS of keyword arg must be an id");
    831a:	69bb      	ldr	r3, [r7, #24]
    831c:	4a46      	ldr	r2, [pc, #280]	; (8438 <compile_trailer_paren_helper+0x21c>)
    831e:	4619      	mov	r1, r3
    8320:	68f8      	ldr	r0, [r7, #12]
    8322:	f7fc fdf9 	bl	4f18 <compile_syntax_error>
                        return;
    8326:	e07f      	b.n	8428 <compile_trailer_paren_helper+0x20c>
                    }
                    EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pns_arg->nodes[0]));
    8328:	68fb      	ldr	r3, [r7, #12]
    832a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    832c:	69bb      	ldr	r3, [r7, #24]
    832e:	689b      	ldr	r3, [r3, #8]
    8330:	091b      	lsrs	r3, r3, #4
    8332:	4619      	mov	r1, r3
    8334:	4610      	mov	r0, r2
    8336:	f002 f883 	bl	a440 <mp_emit_bc_load_const_str>
                    compile_node(comp, pns_arg->nodes[1]);
    833a:	69bb      	ldr	r3, [r7, #24]
    833c:	68db      	ldr	r3, [r3, #12]
    833e:	4619      	mov	r1, r3
    8340:	68f8      	ldr	r0, [r7, #12]
    8342:	f000 fbcf 	bl	8ae4 <compile_node>
                    n_keyword += 1;
    8346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8348:	3301      	adds	r3, #1
    834a:	633b      	str	r3, [r7, #48]	; 0x30
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    834c:	e031      	b.n	83b2 <compile_trailer_paren_helper+0x196>
                } else {
                    compile_comprehension(comp, pns_arg, SCOPE_GEN_EXPR);
    834e:	2206      	movs	r2, #6
    8350:	69b9      	ldr	r1, [r7, #24]
    8352:	68f8      	ldr	r0, [r7, #12]
    8354:	f000 f876 	bl	8444 <compile_comprehension>
                    n_positional++;
    8358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    835a:	3301      	adds	r3, #1
    835c:	637b      	str	r3, [r7, #52]	; 0x34
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    835e:	e028      	b.n	83b2 <compile_trailer_paren_helper+0x196>
                }
            } else {
                goto normal_argument;
    8360:	bf00      	nop
            }
        } else {
            normal_argument:
            if (star_flags) {
    8362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8364:	2b00      	cmp	r3, #0
    8366:	d00a      	beq.n	837e <compile_trailer_paren_helper+0x162>
                compile_syntax_error(comp, args[i], "non-keyword arg after */**");
    8368:	697a      	ldr	r2, [r7, #20]
    836a:	6a3b      	ldr	r3, [r7, #32]
    836c:	009b      	lsls	r3, r3, #2
    836e:	4413      	add	r3, r2
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	4a32      	ldr	r2, [pc, #200]	; (843c <compile_trailer_paren_helper+0x220>)
    8374:	4619      	mov	r1, r3
    8376:	68f8      	ldr	r0, [r7, #12]
    8378:	f7fc fdce 	bl	4f18 <compile_syntax_error>
                return;
    837c:	e054      	b.n	8428 <compile_trailer_paren_helper+0x20c>
            }
            if (n_keyword > 0) {
    837e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8380:	2b00      	cmp	r3, #0
    8382:	d00a      	beq.n	839a <compile_trailer_paren_helper+0x17e>
                compile_syntax_error(comp, args[i], "non-keyword arg after keyword arg");
    8384:	697a      	ldr	r2, [r7, #20]
    8386:	6a3b      	ldr	r3, [r7, #32]
    8388:	009b      	lsls	r3, r3, #2
    838a:	4413      	add	r3, r2
    838c:	681b      	ldr	r3, [r3, #0]
    838e:	4a2c      	ldr	r2, [pc, #176]	; (8440 <compile_trailer_paren_helper+0x224>)
    8390:	4619      	mov	r1, r3
    8392:	68f8      	ldr	r0, [r7, #12]
    8394:	f7fc fdc0 	bl	4f18 <compile_syntax_error>
                return;
    8398:	e046      	b.n	8428 <compile_trailer_paren_helper+0x20c>
            }
            compile_node(comp, args[i]);
    839a:	697a      	ldr	r2, [r7, #20]
    839c:	6a3b      	ldr	r3, [r7, #32]
    839e:	009b      	lsls	r3, r3, #2
    83a0:	4413      	add	r3, r2
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	4619      	mov	r1, r3
    83a6:	68f8      	ldr	r0, [r7, #12]
    83a8:	f000 fb9c 	bl	8ae4 <compile_node>
            n_positional++;
    83ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    83ae:	3301      	adds	r3, #1
    83b0:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 0; i < n_args; i++) {
    83b2:	6a3b      	ldr	r3, [r7, #32]
    83b4:	3301      	adds	r3, #1
    83b6:	623b      	str	r3, [r7, #32]
    83b8:	6a3a      	ldr	r2, [r7, #32]
    83ba:	69fb      	ldr	r3, [r7, #28]
    83bc:	429a      	cmp	r2, r3
    83be:	f6ff af4b 	blt.w	8258 <compile_trailer_paren_helper+0x3c>
        }
    }

    // compile the star/double-star arguments if we had them
    // if we had one but not the other then we load "null" as a place holder
    if (star_flags != 0) {
    83c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    83c4:	2b00      	cmp	r3, #0
    83c6:	d01d      	beq.n	8404 <compile_trailer_paren_helper+0x1e8>
        if (star_args_node == NULL) {
    83c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    83ca:	2b00      	cmp	r3, #0
    83cc:	d105      	bne.n	83da <compile_trailer_paren_helper+0x1be>
            EMIT(load_null);
    83ce:	68fb      	ldr	r3, [r7, #12]
    83d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    83d2:	4618      	mov	r0, r3
    83d4:	f002 f858 	bl	a488 <mp_emit_bc_load_null>
    83d8:	e005      	b.n	83e6 <compile_trailer_paren_helper+0x1ca>
        } else {
            compile_node(comp, star_args_node->nodes[0]);
    83da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    83dc:	689b      	ldr	r3, [r3, #8]
    83de:	4619      	mov	r1, r3
    83e0:	68f8      	ldr	r0, [r7, #12]
    83e2:	f000 fb7f 	bl	8ae4 <compile_node>
        }
        if (dblstar_args_node == NULL) {
    83e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    83e8:	2b00      	cmp	r3, #0
    83ea:	d105      	bne.n	83f8 <compile_trailer_paren_helper+0x1dc>
            EMIT(load_null);
    83ec:	68fb      	ldr	r3, [r7, #12]
    83ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    83f0:	4618      	mov	r0, r3
    83f2:	f002 f849 	bl	a488 <mp_emit_bc_load_null>
    83f6:	e005      	b.n	8404 <compile_trailer_paren_helper+0x1e8>
        } else {
            compile_node(comp, dblstar_args_node->nodes[0]);
    83f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    83fa:	689b      	ldr	r3, [r3, #8]
    83fc:	4619      	mov	r1, r3
    83fe:	68f8      	ldr	r0, [r7, #12]
    8400:	f000 fb70 	bl	8ae4 <compile_node>
        }
    }

    // emit the function/method call
    if (is_method_call) {
    8404:	79fb      	ldrb	r3, [r7, #7]
    8406:	2b00      	cmp	r3, #0
    8408:	d007      	beq.n	841a <compile_trailer_paren_helper+0x1fe>
        EMIT_ARG(call_method, n_positional, n_keyword, star_flags);
    840a:	68fb      	ldr	r3, [r7, #12]
    840c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    840e:	6b79      	ldr	r1, [r7, #52]	; 0x34
    8410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    8414:	f002 fca4 	bl	ad60 <mp_emit_bc_call_method>
    8418:	e006      	b.n	8428 <compile_trailer_paren_helper+0x20c>
    } else {
        EMIT_ARG(call_function, n_positional, n_keyword, star_flags);
    841a:	68fb      	ldr	r3, [r7, #12]
    841c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    841e:	6b79      	ldr	r1, [r7, #52]	; 0x34
    8420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8422:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    8424:	f002 fc86 	bl	ad34 <mp_emit_bc_call_function>
    }
}
    8428:	3738      	adds	r7, #56	; 0x38
    842a:	46bd      	mov	sp, r7
    842c:	bd80      	pop	{r7, pc}
    842e:	bf00      	nop
    8430:	00020a0c 	.word	0x00020a0c
    8434:	00020a24 	.word	0x00020a24
    8438:	00020a3c 	.word	0x00020a3c
    843c:	00020a60 	.word	0x00020a60
    8440:	00020a7c 	.word	0x00020a7c

00008444 <compile_comprehension>:

// pns needs to have 2 nodes, first is lhs of comprehension, second is PN_comp_for node
STATIC void compile_comprehension(compiler_t *comp, mp_parse_node_struct_t *pns, scope_kind_t kind) {
    8444:	b580      	push	{r7, lr}
    8446:	b088      	sub	sp, #32
    8448:	af00      	add	r7, sp, #0
    844a:	60f8      	str	r0, [r7, #12]
    844c:	60b9      	str	r1, [r7, #8]
    844e:	607a      	str	r2, [r7, #4]
    assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 2);
    8450:	68bb      	ldr	r3, [r7, #8]
    8452:	685b      	ldr	r3, [r3, #4]
    8454:	0a1b      	lsrs	r3, r3, #8
    8456:	2b02      	cmp	r3, #2
    8458:	d006      	beq.n	8468 <compile_comprehension+0x24>
    845a:	4b2a      	ldr	r3, [pc, #168]	; (8504 <compile_comprehension+0xc0>)
    845c:	4a2a      	ldr	r2, [pc, #168]	; (8508 <compile_comprehension+0xc4>)
    845e:	f640 1134 	movw	r1, #2356	; 0x934
    8462:	482a      	ldr	r0, [pc, #168]	; (850c <compile_comprehension+0xc8>)
    8464:	f013 f98e 	bl	1b784 <__assert_func>
    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_comp_for));
    8468:	68bb      	ldr	r3, [r7, #8]
    846a:	68db      	ldr	r3, [r3, #12]
    846c:	2b00      	cmp	r3, #0
    846e:	d00b      	beq.n	8488 <compile_comprehension+0x44>
    8470:	68bb      	ldr	r3, [r7, #8]
    8472:	68db      	ldr	r3, [r3, #12]
    8474:	f003 0303 	and.w	r3, r3, #3
    8478:	2b00      	cmp	r3, #0
    847a:	d105      	bne.n	8488 <compile_comprehension+0x44>
    847c:	68bb      	ldr	r3, [r7, #8]
    847e:	68db      	ldr	r3, [r3, #12]
    8480:	685b      	ldr	r3, [r3, #4]
    8482:	b2db      	uxtb	r3, r3
    8484:	2b9f      	cmp	r3, #159	; 0x9f
    8486:	d006      	beq.n	8496 <compile_comprehension+0x52>
    8488:	4b21      	ldr	r3, [pc, #132]	; (8510 <compile_comprehension+0xcc>)
    848a:	4a1f      	ldr	r2, [pc, #124]	; (8508 <compile_comprehension+0xc4>)
    848c:	f640 1135 	movw	r1, #2357	; 0x935
    8490:	481e      	ldr	r0, [pc, #120]	; (850c <compile_comprehension+0xc8>)
    8492:	f013 f977 	bl	1b784 <__assert_func>
    mp_parse_node_struct_t *pns_comp_for = (mp_parse_node_struct_t*)pns->nodes[1];
    8496:	68bb      	ldr	r3, [r7, #8]
    8498:	68db      	ldr	r3, [r3, #12]
    849a:	61fb      	str	r3, [r7, #28]

    if (comp->pass == MP_PASS_SCOPE) {
    849c:	68fb      	ldr	r3, [r7, #12]
    849e:	795b      	ldrb	r3, [r3, #5]
    84a0:	2b01      	cmp	r3, #1
    84a2:	d10b      	bne.n	84bc <compile_comprehension+0x78>
        // create a new scope for this comprehension
        scope_t *s = scope_new_and_link(comp, kind, (mp_parse_node_t)pns, comp->scope_cur->emit_options);
    84a4:	68ba      	ldr	r2, [r7, #8]
    84a6:	68fb      	ldr	r3, [r7, #12]
    84a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    84aa:	8b5b      	ldrh	r3, [r3, #26]
    84ac:	6879      	ldr	r1, [r7, #4]
    84ae:	68f8      	ldr	r0, [r7, #12]
    84b0:	f7fc fda6 	bl	5000 <scope_new_and_link>
    84b4:	61b8      	str	r0, [r7, #24]
        // store the comprehension scope so the compiling function (this one) can use it at each pass
        pns_comp_for->nodes[3] = (mp_parse_node_t)s;
    84b6:	69ba      	ldr	r2, [r7, #24]
    84b8:	69fb      	ldr	r3, [r7, #28]
    84ba:	615a      	str	r2, [r3, #20]
    }

    // get the scope for this comprehension
    scope_t *this_scope = (scope_t*)pns_comp_for->nodes[3];
    84bc:	69fb      	ldr	r3, [r7, #28]
    84be:	695b      	ldr	r3, [r3, #20]
    84c0:	617b      	str	r3, [r7, #20]

    // compile the comprehension
    close_over_variables_etc(comp, this_scope, 0, 0);
    84c2:	2300      	movs	r3, #0
    84c4:	2200      	movs	r2, #0
    84c6:	6979      	ldr	r1, [r7, #20]
    84c8:	68f8      	ldr	r0, [r7, #12]
    84ca:	f7fd fa81 	bl	59d0 <close_over_variables_etc>

    compile_node(comp, pns_comp_for->nodes[1]); // source of the iterator
    84ce:	69fb      	ldr	r3, [r7, #28]
    84d0:	68db      	ldr	r3, [r3, #12]
    84d2:	4619      	mov	r1, r3
    84d4:	68f8      	ldr	r0, [r7, #12]
    84d6:	f000 fb05 	bl	8ae4 <compile_node>
    if (kind == SCOPE_GEN_EXPR) {
    84da:	687b      	ldr	r3, [r7, #4]
    84dc:	2b06      	cmp	r3, #6
    84de:	d105      	bne.n	84ec <compile_comprehension+0xa8>
        EMIT_ARG(get_iter, false);
    84e0:	68fb      	ldr	r3, [r7, #12]
    84e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    84e4:	2100      	movs	r1, #0
    84e6:	4618      	mov	r0, r3
    84e8:	f002 fa46 	bl	a978 <mp_emit_bc_get_iter>
    }
    EMIT_ARG(call_function, 1, 0, 0);
    84ec:	68fb      	ldr	r3, [r7, #12]
    84ee:	6a98      	ldr	r0, [r3, #40]	; 0x28
    84f0:	2300      	movs	r3, #0
    84f2:	2200      	movs	r2, #0
    84f4:	2101      	movs	r1, #1
    84f6:	f002 fc1d 	bl	ad34 <mp_emit_bc_call_function>
}
    84fa:	bf00      	nop
    84fc:	3720      	adds	r7, #32
    84fe:	46bd      	mov	sp, r7
    8500:	bd80      	pop	{r7, pc}
    8502:	bf00      	nop
    8504:	00020aa0 	.word	0x00020aa0
    8508:	00021090 	.word	0x00021090
    850c:	00020358 	.word	0x00020358
    8510:	00020acc 	.word	0x00020acc

00008514 <compile_atom_paren>:

STATIC void compile_atom_paren(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8514:	b580      	push	{r7, lr}
    8516:	b084      	sub	sp, #16
    8518:	af00      	add	r7, sp, #0
    851a:	6078      	str	r0, [r7, #4]
    851c:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    851e:	683b      	ldr	r3, [r7, #0]
    8520:	689b      	ldr	r3, [r3, #8]
    8522:	2b00      	cmp	r3, #0
    8524:	d105      	bne.n	8532 <compile_atom_paren+0x1e>
        // an empty tuple
        c_tuple(comp, MP_PARSE_NODE_NULL, NULL);
    8526:	2200      	movs	r2, #0
    8528:	2100      	movs	r1, #0
    852a:	6878      	ldr	r0, [r7, #4]
    852c:	f7fc fe5e 	bl	51ec <c_tuple>
            // tuple with 2 items
            tuple_with_2_items:
            c_tuple(comp, MP_PARSE_NODE_NULL, pns);
        }
    }
}
    8530:	e068      	b.n	8604 <compile_atom_paren+0xf0>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    8532:	683b      	ldr	r3, [r7, #0]
    8534:	689b      	ldr	r3, [r3, #8]
    8536:	2b00      	cmp	r3, #0
    8538:	d00b      	beq.n	8552 <compile_atom_paren+0x3e>
    853a:	683b      	ldr	r3, [r7, #0]
    853c:	689b      	ldr	r3, [r3, #8]
    853e:	f003 0303 	and.w	r3, r3, #3
    8542:	2b00      	cmp	r3, #0
    8544:	d105      	bne.n	8552 <compile_atom_paren+0x3e>
    8546:	683b      	ldr	r3, [r7, #0]
    8548:	689b      	ldr	r3, [r3, #8]
    854a:	685b      	ldr	r3, [r3, #4]
    854c:	b2db      	uxtb	r3, r3
    854e:	2b8a      	cmp	r3, #138	; 0x8a
    8550:	d006      	beq.n	8560 <compile_atom_paren+0x4c>
    8552:	4b2e      	ldr	r3, [pc, #184]	; (860c <compile_atom_paren+0xf8>)
    8554:	4a2e      	ldr	r2, [pc, #184]	; (8610 <compile_atom_paren+0xfc>)
    8556:	f640 1151 	movw	r1, #2385	; 0x951
    855a:	482e      	ldr	r0, [pc, #184]	; (8614 <compile_atom_paren+0x100>)
    855c:	f013 f912 	bl	1b784 <__assert_func>
        pns = (mp_parse_node_struct_t*)pns->nodes[0];
    8560:	683b      	ldr	r3, [r7, #0]
    8562:	689b      	ldr	r3, [r3, #8]
    8564:	603b      	str	r3, [r7, #0]
        assert(!MP_PARSE_NODE_IS_NULL(pns->nodes[1]));
    8566:	683b      	ldr	r3, [r7, #0]
    8568:	68db      	ldr	r3, [r3, #12]
    856a:	2b00      	cmp	r3, #0
    856c:	d106      	bne.n	857c <compile_atom_paren+0x68>
    856e:	4b2a      	ldr	r3, [pc, #168]	; (8618 <compile_atom_paren+0x104>)
    8570:	4a27      	ldr	r2, [pc, #156]	; (8610 <compile_atom_paren+0xfc>)
    8572:	f640 1153 	movw	r1, #2387	; 0x953
    8576:	4827      	ldr	r0, [pc, #156]	; (8614 <compile_atom_paren+0x100>)
    8578:	f013 f904 	bl	1b784 <__assert_func>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    857c:	683b      	ldr	r3, [r7, #0]
    857e:	68db      	ldr	r3, [r3, #12]
    8580:	2b00      	cmp	r3, #0
    8582:	d039      	beq.n	85f8 <compile_atom_paren+0xe4>
    8584:	683b      	ldr	r3, [r7, #0]
    8586:	68db      	ldr	r3, [r3, #12]
    8588:	f003 0303 	and.w	r3, r3, #3
    858c:	2b00      	cmp	r3, #0
    858e:	d133      	bne.n	85f8 <compile_atom_paren+0xe4>
            mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[1];
    8590:	683b      	ldr	r3, [r7, #0]
    8592:	68db      	ldr	r3, [r3, #12]
    8594:	60fb      	str	r3, [r7, #12]
            if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3b) {
    8596:	68fb      	ldr	r3, [r7, #12]
    8598:	685b      	ldr	r3, [r3, #4]
    859a:	b2db      	uxtb	r3, r3
    859c:	2b8d      	cmp	r3, #141	; 0x8d
    859e:	d112      	bne.n	85c6 <compile_atom_paren+0xb2>
                assert(MP_PARSE_NODE_IS_NULL(pns2->nodes[0]));
    85a0:	68fb      	ldr	r3, [r7, #12]
    85a2:	689b      	ldr	r3, [r3, #8]
    85a4:	2b00      	cmp	r3, #0
    85a6:	d006      	beq.n	85b6 <compile_atom_paren+0xa2>
    85a8:	4b1c      	ldr	r3, [pc, #112]	; (861c <compile_atom_paren+0x108>)
    85aa:	4a19      	ldr	r2, [pc, #100]	; (8610 <compile_atom_paren+0xfc>)
    85ac:	f640 1158 	movw	r1, #2392	; 0x958
    85b0:	4818      	ldr	r0, [pc, #96]	; (8614 <compile_atom_paren+0x100>)
    85b2:	f013 f8e7 	bl	1b784 <__assert_func>
                c_tuple(comp, pns->nodes[0], NULL);
    85b6:	683b      	ldr	r3, [r7, #0]
    85b8:	689b      	ldr	r3, [r3, #8]
    85ba:	2200      	movs	r2, #0
    85bc:	4619      	mov	r1, r3
    85be:	6878      	ldr	r0, [r7, #4]
    85c0:	f7fc fe14 	bl	51ec <c_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    85c4:	e01e      	b.n	8604 <compile_atom_paren+0xf0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3c) {
    85c6:	68fb      	ldr	r3, [r7, #12]
    85c8:	685b      	ldr	r3, [r3, #4]
    85ca:	b2db      	uxtb	r3, r3
    85cc:	2b8e      	cmp	r3, #142	; 0x8e
    85ce:	d107      	bne.n	85e0 <compile_atom_paren+0xcc>
                c_tuple(comp, pns->nodes[0], pns2);
    85d0:	683b      	ldr	r3, [r7, #0]
    85d2:	689b      	ldr	r3, [r3, #8]
    85d4:	68fa      	ldr	r2, [r7, #12]
    85d6:	4619      	mov	r1, r3
    85d8:	6878      	ldr	r0, [r7, #4]
    85da:	f7fc fe07 	bl	51ec <c_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    85de:	e011      	b.n	8604 <compile_atom_paren+0xf0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_comp_for) {
    85e0:	68fb      	ldr	r3, [r7, #12]
    85e2:	685b      	ldr	r3, [r3, #4]
    85e4:	b2db      	uxtb	r3, r3
    85e6:	2b9f      	cmp	r3, #159	; 0x9f
    85e8:	d105      	bne.n	85f6 <compile_atom_paren+0xe2>
                compile_comprehension(comp, pns, SCOPE_GEN_EXPR);
    85ea:	2206      	movs	r2, #6
    85ec:	6839      	ldr	r1, [r7, #0]
    85ee:	6878      	ldr	r0, [r7, #4]
    85f0:	f7ff ff28 	bl	8444 <compile_comprehension>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    85f4:	e006      	b.n	8604 <compile_atom_paren+0xf0>
                goto tuple_with_2_items;
    85f6:	bf00      	nop
            c_tuple(comp, MP_PARSE_NODE_NULL, pns);
    85f8:	683a      	ldr	r2, [r7, #0]
    85fa:	2100      	movs	r1, #0
    85fc:	6878      	ldr	r0, [r7, #4]
    85fe:	f7fc fdf5 	bl	51ec <c_tuple>
}
    8602:	e7ff      	b.n	8604 <compile_atom_paren+0xf0>
    8604:	bf00      	nop
    8606:	3710      	adds	r7, #16
    8608:	46bd      	mov	sp, r7
    860a:	bd80      	pop	{r7, pc}
    860c:	0002036c 	.word	0x0002036c
    8610:	000210a8 	.word	0x000210a8
    8614:	00020358 	.word	0x00020358
    8618:	00020b08 	.word	0x00020b08
    861c:	00020450 	.word	0x00020450

00008620 <compile_atom_bracket>:

STATIC void compile_atom_bracket(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8620:	b580      	push	{r7, lr}
    8622:	b084      	sub	sp, #16
    8624:	af00      	add	r7, sp, #0
    8626:	6078      	str	r0, [r7, #4]
    8628:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    862a:	683b      	ldr	r3, [r7, #0]
    862c:	689b      	ldr	r3, [r3, #8]
    862e:	2b00      	cmp	r3, #0
    8630:	d107      	bne.n	8642 <compile_atom_bracket+0x22>
        // empty list
        EMIT_ARG(build, 0, MP_EMIT_BUILD_LIST);
    8632:	687b      	ldr	r3, [r7, #4]
    8634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8636:	2201      	movs	r2, #1
    8638:	2100      	movs	r1, #0
    863a:	4618      	mov	r0, r3
    863c:	f002 fa42 	bl	aac4 <mp_emit_bc_build>
    } else {
        // list with 1 item
        compile_node(comp, pns->nodes[0]);
        EMIT_ARG(build, 1, MP_EMIT_BUILD_LIST);
    }
}
    8640:	e086      	b.n	8750 <compile_atom_bracket+0x130>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    8642:	683b      	ldr	r3, [r7, #0]
    8644:	689b      	ldr	r3, [r3, #8]
    8646:	2b00      	cmp	r3, #0
    8648:	d074      	beq.n	8734 <compile_atom_bracket+0x114>
    864a:	683b      	ldr	r3, [r7, #0]
    864c:	689b      	ldr	r3, [r3, #8]
    864e:	f003 0303 	and.w	r3, r3, #3
    8652:	2b00      	cmp	r3, #0
    8654:	d16e      	bne.n	8734 <compile_atom_bracket+0x114>
    8656:	683b      	ldr	r3, [r7, #0]
    8658:	689b      	ldr	r3, [r3, #8]
    865a:	685b      	ldr	r3, [r3, #4]
    865c:	b2db      	uxtb	r3, r3
    865e:	2b8a      	cmp	r3, #138	; 0x8a
    8660:	d168      	bne.n	8734 <compile_atom_bracket+0x114>
        mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[0];
    8662:	683b      	ldr	r3, [r7, #0]
    8664:	689b      	ldr	r3, [r3, #8]
    8666:	60fb      	str	r3, [r7, #12]
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    8668:	68fb      	ldr	r3, [r7, #12]
    866a:	68db      	ldr	r3, [r3, #12]
    866c:	2b00      	cmp	r3, #0
    866e:	d04c      	beq.n	870a <compile_atom_bracket+0xea>
    8670:	68fb      	ldr	r3, [r7, #12]
    8672:	68db      	ldr	r3, [r3, #12]
    8674:	f003 0303 	and.w	r3, r3, #3
    8678:	2b00      	cmp	r3, #0
    867a:	d146      	bne.n	870a <compile_atom_bracket+0xea>
            mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pns2->nodes[1];
    867c:	68fb      	ldr	r3, [r7, #12]
    867e:	68db      	ldr	r3, [r3, #12]
    8680:	60bb      	str	r3, [r7, #8]
            if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_testlist_comp_3b) {
    8682:	68bb      	ldr	r3, [r7, #8]
    8684:	685b      	ldr	r3, [r3, #4]
    8686:	b2db      	uxtb	r3, r3
    8688:	2b8d      	cmp	r3, #141	; 0x8d
    868a:	d118      	bne.n	86be <compile_atom_bracket+0x9e>
                assert(MP_PARSE_NODE_IS_NULL(pns3->nodes[0]));
    868c:	68bb      	ldr	r3, [r7, #8]
    868e:	689b      	ldr	r3, [r3, #8]
    8690:	2b00      	cmp	r3, #0
    8692:	d006      	beq.n	86a2 <compile_atom_bracket+0x82>
    8694:	4b30      	ldr	r3, [pc, #192]	; (8758 <compile_atom_bracket+0x138>)
    8696:	4a31      	ldr	r2, [pc, #196]	; (875c <compile_atom_bracket+0x13c>)
    8698:	f640 1176 	movw	r1, #2422	; 0x976
    869c:	4830      	ldr	r0, [pc, #192]	; (8760 <compile_atom_bracket+0x140>)
    869e:	f013 f871 	bl	1b784 <__assert_func>
                compile_node(comp, pns2->nodes[0]);
    86a2:	68fb      	ldr	r3, [r7, #12]
    86a4:	689b      	ldr	r3, [r3, #8]
    86a6:	4619      	mov	r1, r3
    86a8:	6878      	ldr	r0, [r7, #4]
    86aa:	f000 fa1b 	bl	8ae4 <compile_node>
                EMIT_ARG(build, 1, MP_EMIT_BUILD_LIST);
    86ae:	687b      	ldr	r3, [r7, #4]
    86b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    86b2:	2201      	movs	r2, #1
    86b4:	2101      	movs	r1, #1
    86b6:	4618      	mov	r0, r3
    86b8:	f002 fa04 	bl	aac4 <mp_emit_bc_build>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    86bc:	e039      	b.n	8732 <compile_atom_bracket+0x112>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_testlist_comp_3c) {
    86be:	68bb      	ldr	r3, [r7, #8]
    86c0:	685b      	ldr	r3, [r3, #4]
    86c2:	b2db      	uxtb	r3, r3
    86c4:	2b8e      	cmp	r3, #142	; 0x8e
    86c6:	d114      	bne.n	86f2 <compile_atom_bracket+0xd2>
                compile_node(comp, pns2->nodes[0]);
    86c8:	68fb      	ldr	r3, [r7, #12]
    86ca:	689b      	ldr	r3, [r3, #8]
    86cc:	4619      	mov	r1, r3
    86ce:	6878      	ldr	r0, [r7, #4]
    86d0:	f000 fa08 	bl	8ae4 <compile_node>
                compile_generic_all_nodes(comp, pns3);
    86d4:	68b9      	ldr	r1, [r7, #8]
    86d6:	6878      	ldr	r0, [r7, #4]
    86d8:	f7fc fd00 	bl	50dc <compile_generic_all_nodes>
                EMIT_ARG(build, 1 + MP_PARSE_NODE_STRUCT_NUM_NODES(pns3), MP_EMIT_BUILD_LIST);
    86dc:	687b      	ldr	r3, [r7, #4]
    86de:	6a98      	ldr	r0, [r3, #40]	; 0x28
    86e0:	68bb      	ldr	r3, [r7, #8]
    86e2:	685b      	ldr	r3, [r3, #4]
    86e4:	0a1b      	lsrs	r3, r3, #8
    86e6:	3301      	adds	r3, #1
    86e8:	2201      	movs	r2, #1
    86ea:	4619      	mov	r1, r3
    86ec:	f002 f9ea 	bl	aac4 <mp_emit_bc_build>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    86f0:	e01f      	b.n	8732 <compile_atom_bracket+0x112>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_comp_for) {
    86f2:	68bb      	ldr	r3, [r7, #8]
    86f4:	685b      	ldr	r3, [r3, #4]
    86f6:	b2db      	uxtb	r3, r3
    86f8:	2b9f      	cmp	r3, #159	; 0x9f
    86fa:	d105      	bne.n	8708 <compile_atom_bracket+0xe8>
                compile_comprehension(comp, pns2, SCOPE_LIST_COMP);
    86fc:	2203      	movs	r2, #3
    86fe:	68f9      	ldr	r1, [r7, #12]
    8700:	6878      	ldr	r0, [r7, #4]
    8702:	f7ff fe9f 	bl	8444 <compile_comprehension>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    8706:	e014      	b.n	8732 <compile_atom_bracket+0x112>
                goto list_with_2_items;
    8708:	bf00      	nop
            compile_node(comp, pns2->nodes[0]);
    870a:	68fb      	ldr	r3, [r7, #12]
    870c:	689b      	ldr	r3, [r3, #8]
    870e:	4619      	mov	r1, r3
    8710:	6878      	ldr	r0, [r7, #4]
    8712:	f000 f9e7 	bl	8ae4 <compile_node>
            compile_node(comp, pns2->nodes[1]);
    8716:	68fb      	ldr	r3, [r7, #12]
    8718:	68db      	ldr	r3, [r3, #12]
    871a:	4619      	mov	r1, r3
    871c:	6878      	ldr	r0, [r7, #4]
    871e:	f000 f9e1 	bl	8ae4 <compile_node>
            EMIT_ARG(build, 2, MP_EMIT_BUILD_LIST);
    8722:	687b      	ldr	r3, [r7, #4]
    8724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8726:	2201      	movs	r2, #1
    8728:	2102      	movs	r1, #2
    872a:	4618      	mov	r0, r3
    872c:	f002 f9ca 	bl	aac4 <mp_emit_bc_build>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    8730:	e00e      	b.n	8750 <compile_atom_bracket+0x130>
    8732:	e00d      	b.n	8750 <compile_atom_bracket+0x130>
        compile_node(comp, pns->nodes[0]);
    8734:	683b      	ldr	r3, [r7, #0]
    8736:	689b      	ldr	r3, [r3, #8]
    8738:	4619      	mov	r1, r3
    873a:	6878      	ldr	r0, [r7, #4]
    873c:	f000 f9d2 	bl	8ae4 <compile_node>
        EMIT_ARG(build, 1, MP_EMIT_BUILD_LIST);
    8740:	687b      	ldr	r3, [r7, #4]
    8742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8744:	2201      	movs	r2, #1
    8746:	2101      	movs	r1, #1
    8748:	4618      	mov	r0, r3
    874a:	f002 f9bb 	bl	aac4 <mp_emit_bc_build>
}
    874e:	e7ff      	b.n	8750 <compile_atom_bracket+0x130>
    8750:	bf00      	nop
    8752:	3710      	adds	r7, #16
    8754:	46bd      	mov	sp, r7
    8756:	bd80      	pop	{r7, pc}
    8758:	00020b30 	.word	0x00020b30
    875c:	000210bc 	.word	0x000210bc
    8760:	00020358 	.word	0x00020358

00008764 <compile_atom_brace>:

STATIC void compile_atom_brace(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8764:	b580      	push	{r7, lr}
    8766:	b08a      	sub	sp, #40	; 0x28
    8768:	af00      	add	r7, sp, #0
    876a:	6078      	str	r0, [r7, #4]
    876c:	6039      	str	r1, [r7, #0]
    mp_parse_node_t pn = pns->nodes[0];
    876e:	683b      	ldr	r3, [r7, #0]
    8770:	689b      	ldr	r3, [r3, #8]
    8772:	623b      	str	r3, [r7, #32]
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    8774:	6a3b      	ldr	r3, [r7, #32]
    8776:	2b00      	cmp	r3, #0
    8778:	d107      	bne.n	878a <compile_atom_brace+0x26>
        // empty dict
        EMIT_ARG(build, 0, MP_EMIT_BUILD_MAP);
    877a:	687b      	ldr	r3, [r7, #4]
    877c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    877e:	2203      	movs	r2, #3
    8780:	2100      	movs	r1, #0
    8782:	4618      	mov	r0, r3
    8784:	f002 f99e 	bl	aac4 <mp_emit_bc_build>
    8788:	e0c3      	b.n	8912 <compile_atom_brace+0x1ae>
    } else if (MP_PARSE_NODE_IS_STRUCT(pn)) {
    878a:	6a3b      	ldr	r3, [r7, #32]
    878c:	2b00      	cmp	r3, #0
    878e:	f000 80b9 	beq.w	8904 <compile_atom_brace+0x1a0>
    8792:	6a3b      	ldr	r3, [r7, #32]
    8794:	f003 0303 	and.w	r3, r3, #3
    8798:	2b00      	cmp	r3, #0
    879a:	f040 80b3 	bne.w	8904 <compile_atom_brace+0x1a0>
        pns = (mp_parse_node_struct_t*)pn;
    879e:	6a3b      	ldr	r3, [r7, #32]
    87a0:	603b      	str	r3, [r7, #0]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    87a2:	683b      	ldr	r3, [r7, #0]
    87a4:	685b      	ldr	r3, [r3, #4]
    87a6:	b2db      	uxtb	r3, r3
    87a8:	2b32      	cmp	r3, #50	; 0x32
    87aa:	d110      	bne.n	87ce <compile_atom_brace+0x6a>
            // dict with one element
            EMIT_ARG(build, 1, MP_EMIT_BUILD_MAP);
    87ac:	687b      	ldr	r3, [r7, #4]
    87ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    87b0:	2203      	movs	r2, #3
    87b2:	2101      	movs	r1, #1
    87b4:	4618      	mov	r0, r3
    87b6:	f002 f985 	bl	aac4 <mp_emit_bc_build>
            compile_node(comp, pn);
    87ba:	6a39      	ldr	r1, [r7, #32]
    87bc:	6878      	ldr	r0, [r7, #4]
    87be:	f000 f991 	bl	8ae4 <compile_node>
            EMIT(store_map);
    87c2:	687b      	ldr	r3, [r7, #4]
    87c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    87c6:	4618      	mov	r0, r3
    87c8:	f002 f99e 	bl	ab08 <mp_emit_bc_store_map>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    87cc:	e0a1      	b.n	8912 <compile_atom_brace+0x1ae>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker) {
    87ce:	683b      	ldr	r3, [r7, #0]
    87d0:	685b      	ldr	r3, [r3, #4]
    87d2:	b2db      	uxtb	r3, r3
    87d4:	2b92      	cmp	r3, #146	; 0x92
    87d6:	f040 8094 	bne.w	8902 <compile_atom_brace+0x19e>
            assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])); // should succeed
    87da:	683b      	ldr	r3, [r7, #0]
    87dc:	68db      	ldr	r3, [r3, #12]
    87de:	2b00      	cmp	r3, #0
    87e0:	d005      	beq.n	87ee <compile_atom_brace+0x8a>
    87e2:	683b      	ldr	r3, [r7, #0]
    87e4:	68db      	ldr	r3, [r3, #12]
    87e6:	f003 0303 	and.w	r3, r3, #3
    87ea:	2b00      	cmp	r3, #0
    87ec:	d006      	beq.n	87fc <compile_atom_brace+0x98>
    87ee:	4b4a      	ldr	r3, [pc, #296]	; (8918 <compile_atom_brace+0x1b4>)
    87f0:	4a4a      	ldr	r2, [pc, #296]	; (891c <compile_atom_brace+0x1b8>)
    87f2:	f44f 611a 	mov.w	r1, #2464	; 0x9a0
    87f6:	484a      	ldr	r0, [pc, #296]	; (8920 <compile_atom_brace+0x1bc>)
    87f8:	f012 ffc4 	bl	1b784 <__assert_func>
            mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    87fc:	683b      	ldr	r3, [r7, #0]
    87fe:	68db      	ldr	r3, [r3, #12]
    8800:	61fb      	str	r3, [r7, #28]
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_dictorsetmaker_list) {
    8802:	69fb      	ldr	r3, [r7, #28]
    8804:	685b      	ldr	r3, [r3, #4]
    8806:	b2db      	uxtb	r3, r3
    8808:	2b94      	cmp	r3, #148	; 0x94
    880a:	d168      	bne.n	88de <compile_atom_brace+0x17a>
                // dict/set with multiple elements

                // get tail elements (2nd, 3rd, ...)
                mp_parse_node_t *nodes;
                int n = mp_parse_node_extract_list(&pns1->nodes[0], PN_dictorsetmaker_list2, &nodes);
    880c:	69fb      	ldr	r3, [r7, #28]
    880e:	3308      	adds	r3, #8
    8810:	f107 0208 	add.w	r2, r7, #8
    8814:	2195      	movs	r1, #149	; 0x95
    8816:	4618      	mov	r0, r3
    8818:	f7fb fa7c 	bl	3d14 <mp_parse_node_extract_list>
    881c:	61b8      	str	r0, [r7, #24]

                // first element sets whether it's a dict or set
                bool is_dict;
                if (!MICROPY_PY_BUILTINS_SET || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_dictorsetmaker_item)) {
                    // a dictionary
                    EMIT_ARG(build, 1 + n, MP_EMIT_BUILD_MAP);
    881e:	687b      	ldr	r3, [r7, #4]
    8820:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8822:	69bb      	ldr	r3, [r7, #24]
    8824:	3301      	adds	r3, #1
    8826:	2203      	movs	r2, #3
    8828:	4619      	mov	r1, r3
    882a:	f002 f94b 	bl	aac4 <mp_emit_bc_build>
                    compile_node(comp, pns->nodes[0]);
    882e:	683b      	ldr	r3, [r7, #0]
    8830:	689b      	ldr	r3, [r3, #8]
    8832:	4619      	mov	r1, r3
    8834:	6878      	ldr	r0, [r7, #4]
    8836:	f000 f955 	bl	8ae4 <compile_node>
                    EMIT(store_map);
    883a:	687b      	ldr	r3, [r7, #4]
    883c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    883e:	4618      	mov	r0, r3
    8840:	f002 f962 	bl	ab08 <mp_emit_bc_store_map>
                    is_dict = true;
    8844:	2301      	movs	r3, #1
    8846:	75fb      	strb	r3, [r7, #23]
                    compile_node(comp, pns->nodes[0]); // 1st value of set
                    is_dict = false;
                }

                // process rest of elements
                for (int i = 0; i < n; i++) {
    8848:	2300      	movs	r3, #0
    884a:	627b      	str	r3, [r7, #36]	; 0x24
    884c:	e042      	b.n	88d4 <compile_atom_brace+0x170>
                    mp_parse_node_t pn_i = nodes[i];
    884e:	68ba      	ldr	r2, [r7, #8]
    8850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8852:	009b      	lsls	r3, r3, #2
    8854:	4413      	add	r3, r2
    8856:	681b      	ldr	r3, [r3, #0]
    8858:	613b      	str	r3, [r7, #16]
                    bool is_key_value = MP_PARSE_NODE_IS_STRUCT_KIND(pn_i, PN_dictorsetmaker_item);
    885a:	693b      	ldr	r3, [r7, #16]
    885c:	2b00      	cmp	r3, #0
    885e:	d00b      	beq.n	8878 <compile_atom_brace+0x114>
    8860:	693b      	ldr	r3, [r7, #16]
    8862:	f003 0303 	and.w	r3, r3, #3
    8866:	2b00      	cmp	r3, #0
    8868:	d106      	bne.n	8878 <compile_atom_brace+0x114>
    886a:	693b      	ldr	r3, [r7, #16]
    886c:	685b      	ldr	r3, [r3, #4]
    886e:	b2db      	uxtb	r3, r3
    8870:	2b32      	cmp	r3, #50	; 0x32
    8872:	d101      	bne.n	8878 <compile_atom_brace+0x114>
    8874:	2301      	movs	r3, #1
    8876:	e000      	b.n	887a <compile_atom_brace+0x116>
    8878:	2300      	movs	r3, #0
    887a:	73fb      	strb	r3, [r7, #15]
    887c:	7bfb      	ldrb	r3, [r7, #15]
    887e:	f003 0301 	and.w	r3, r3, #1
    8882:	73fb      	strb	r3, [r7, #15]
                    compile_node(comp, pn_i);
    8884:	6939      	ldr	r1, [r7, #16]
    8886:	6878      	ldr	r0, [r7, #4]
    8888:	f000 f92c 	bl	8ae4 <compile_node>
                    if (is_dict) {
    888c:	7dfb      	ldrb	r3, [r7, #23]
    888e:	2b00      	cmp	r3, #0
    8890:	d012      	beq.n	88b8 <compile_atom_brace+0x154>
                        if (!is_key_value) {
    8892:	7bfb      	ldrb	r3, [r7, #15]
    8894:	f083 0301 	eor.w	r3, r3, #1
    8898:	b2db      	uxtb	r3, r3
    889a:	2b00      	cmp	r3, #0
    889c:	d006      	beq.n	88ac <compile_atom_brace+0x148>
                            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "invalid syntax");
    889e:	683b      	ldr	r3, [r7, #0]
    88a0:	4a20      	ldr	r2, [pc, #128]	; (8924 <compile_atom_brace+0x1c0>)
    88a2:	4619      	mov	r1, r3
    88a4:	6878      	ldr	r0, [r7, #4]
    88a6:	f7fc fb37 	bl	4f18 <compile_syntax_error>
                            } else {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "expecting key:value for dict");
                            }
                            return;
    88aa:	e032      	b.n	8912 <compile_atom_brace+0x1ae>
                        }
                        EMIT(store_map);
    88ac:	687b      	ldr	r3, [r7, #4]
    88ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    88b0:	4618      	mov	r0, r3
    88b2:	f002 f929 	bl	ab08 <mp_emit_bc_store_map>
    88b6:	e00a      	b.n	88ce <compile_atom_brace+0x16a>
                    } else {
                        if (is_key_value) {
    88b8:	7bfb      	ldrb	r3, [r7, #15]
    88ba:	2b00      	cmp	r3, #0
    88bc:	d007      	beq.n	88ce <compile_atom_brace+0x16a>
                            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "invalid syntax");
    88be:	683b      	ldr	r3, [r7, #0]
    88c0:	4a18      	ldr	r2, [pc, #96]	; (8924 <compile_atom_brace+0x1c0>)
    88c2:	4619      	mov	r1, r3
    88c4:	6878      	ldr	r0, [r7, #4]
    88c6:	f7fc fb27 	bl	4f18 <compile_syntax_error>
                            } else {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "expecting just a value for set");
                            }
                            return;
    88ca:	bf00      	nop
    88cc:	e021      	b.n	8912 <compile_atom_brace+0x1ae>
                for (int i = 0; i < n; i++) {
    88ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    88d0:	3301      	adds	r3, #1
    88d2:	627b      	str	r3, [r7, #36]	; 0x24
    88d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    88d6:	69bb      	ldr	r3, [r7, #24]
    88d8:	429a      	cmp	r2, r3
    88da:	dbb8      	blt.n	884e <compile_atom_brace+0xea>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    88dc:	e019      	b.n	8912 <compile_atom_brace+0x1ae>
                if (!is_dict) {
                    EMIT_ARG(build, 1 + n, MP_EMIT_BUILD_SET);
                }
                #endif
            } else {
                assert(MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_comp_for); // should be
    88de:	69fb      	ldr	r3, [r7, #28]
    88e0:	685b      	ldr	r3, [r3, #4]
    88e2:	b2db      	uxtb	r3, r3
    88e4:	2b9f      	cmp	r3, #159	; 0x9f
    88e6:	d006      	beq.n	88f6 <compile_atom_brace+0x192>
    88e8:	4b0f      	ldr	r3, [pc, #60]	; (8928 <compile_atom_brace+0x1c4>)
    88ea:	4a0c      	ldr	r2, [pc, #48]	; (891c <compile_atom_brace+0x1b8>)
    88ec:	f640 11d9 	movw	r1, #2521	; 0x9d9
    88f0:	480b      	ldr	r0, [pc, #44]	; (8920 <compile_atom_brace+0x1bc>)
    88f2:	f012 ff47 	bl	1b784 <__assert_func>
                // dict/set comprehension
                if (!MICROPY_PY_BUILTINS_SET || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_dictorsetmaker_item)) {
                    // a dictionary comprehension
                    compile_comprehension(comp, pns, SCOPE_DICT_COMP);
    88f6:	2204      	movs	r2, #4
    88f8:	6839      	ldr	r1, [r7, #0]
    88fa:	6878      	ldr	r0, [r7, #4]
    88fc:	f7ff fda2 	bl	8444 <compile_comprehension>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    8900:	e007      	b.n	8912 <compile_atom_brace+0x1ae>
                    compile_comprehension(comp, pns, SCOPE_SET_COMP);
                }
            }
        } else {
            // set with one element
            goto set_with_one_element;
    8902:	bf00      	nop
        set_with_one_element:
        #if MICROPY_PY_BUILTINS_SET
        compile_node(comp, pn);
        EMIT_ARG(build, 1, MP_EMIT_BUILD_SET);
        #else
        assert(0);
    8904:	4b09      	ldr	r3, [pc, #36]	; (892c <compile_atom_brace+0x1c8>)
    8906:	4a05      	ldr	r2, [pc, #20]	; (891c <compile_atom_brace+0x1b8>)
    8908:	f640 11ee 	movw	r1, #2542	; 0x9ee
    890c:	4804      	ldr	r0, [pc, #16]	; (8920 <compile_atom_brace+0x1bc>)
    890e:	f012 ff39 	bl	1b784 <__assert_func>
        #endif
    }
}
    8912:	3728      	adds	r7, #40	; 0x28
    8914:	46bd      	mov	sp, r7
    8916:	bd80      	pop	{r7, pc}
    8918:	000208c4 	.word	0x000208c4
    891c:	000210d4 	.word	0x000210d4
    8920:	00020358 	.word	0x00020358
    8924:	00020b58 	.word	0x00020b58
    8928:	00020b68 	.word	0x00020b68
    892c:	00020b98 	.word	0x00020b98

00008930 <compile_trailer_paren>:

STATIC void compile_trailer_paren(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8930:	b580      	push	{r7, lr}
    8932:	b082      	sub	sp, #8
    8934:	af00      	add	r7, sp, #0
    8936:	6078      	str	r0, [r7, #4]
    8938:	6039      	str	r1, [r7, #0]
    compile_trailer_paren_helper(comp, pns->nodes[0], false, 0);
    893a:	683b      	ldr	r3, [r7, #0]
    893c:	6899      	ldr	r1, [r3, #8]
    893e:	2300      	movs	r3, #0
    8940:	2200      	movs	r2, #0
    8942:	6878      	ldr	r0, [r7, #4]
    8944:	f7ff fc6a 	bl	821c <compile_trailer_paren_helper>
}
    8948:	bf00      	nop
    894a:	3708      	adds	r7, #8
    894c:	46bd      	mov	sp, r7
    894e:	bd80      	pop	{r7, pc}

00008950 <compile_trailer_bracket>:

STATIC void compile_trailer_bracket(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8950:	b580      	push	{r7, lr}
    8952:	b082      	sub	sp, #8
    8954:	af00      	add	r7, sp, #0
    8956:	6078      	str	r0, [r7, #4]
    8958:	6039      	str	r1, [r7, #0]
    // object who's index we want is on top of stack
    compile_node(comp, pns->nodes[0]); // the index
    895a:	683b      	ldr	r3, [r7, #0]
    895c:	689b      	ldr	r3, [r3, #8]
    895e:	4619      	mov	r1, r3
    8960:	6878      	ldr	r0, [r7, #4]
    8962:	f000 f8bf 	bl	8ae4 <compile_node>
    EMIT_ARG(subscr, MP_EMIT_SUBSCR_LOAD);
    8966:	687b      	ldr	r3, [r7, #4]
    8968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    896a:	2100      	movs	r1, #0
    896c:	4618      	mov	r0, r3
    896e:	f001 fe09 	bl	a584 <mp_emit_bc_subscr>
}
    8972:	bf00      	nop
    8974:	3708      	adds	r7, #8
    8976:	46bd      	mov	sp, r7
    8978:	bd80      	pop	{r7, pc}
    897a:	bf00      	nop

0000897c <compile_trailer_period>:

STATIC void compile_trailer_period(compiler_t *comp, mp_parse_node_struct_t *pns) {
    897c:	b580      	push	{r7, lr}
    897e:	b082      	sub	sp, #8
    8980:	af00      	add	r7, sp, #0
    8982:	6078      	str	r0, [r7, #4]
    8984:	6039      	str	r1, [r7, #0]
    // object who's attribute we want is on top of stack
    EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]), MP_EMIT_ATTR_LOAD); // attribute to get
    8986:	687b      	ldr	r3, [r7, #4]
    8988:	6a98      	ldr	r0, [r3, #40]	; 0x28
    898a:	683b      	ldr	r3, [r7, #0]
    898c:	689b      	ldr	r3, [r3, #8]
    898e:	091b      	lsrs	r3, r3, #4
    8990:	2200      	movs	r2, #0
    8992:	4619      	mov	r1, r3
    8994:	f001 fe1e 	bl	a5d4 <mp_emit_bc_attr>
}
    8998:	bf00      	nop
    899a:	3708      	adds	r7, #8
    899c:	46bd      	mov	sp, r7
    899e:	bd80      	pop	{r7, pc}

000089a0 <compile_dictorsetmaker_item>:
        EMIT_ARG(build, 2, MP_EMIT_BUILD_SLICE);
    }
}
#endif // MICROPY_PY_BUILTINS_SLICE

STATIC void compile_dictorsetmaker_item(compiler_t *comp, mp_parse_node_struct_t *pns) {
    89a0:	b580      	push	{r7, lr}
    89a2:	b082      	sub	sp, #8
    89a4:	af00      	add	r7, sp, #0
    89a6:	6078      	str	r0, [r7, #4]
    89a8:	6039      	str	r1, [r7, #0]
    // if this is called then we are compiling a dict key:value pair
    compile_node(comp, pns->nodes[1]); // value
    89aa:	683b      	ldr	r3, [r7, #0]
    89ac:	68db      	ldr	r3, [r3, #12]
    89ae:	4619      	mov	r1, r3
    89b0:	6878      	ldr	r0, [r7, #4]
    89b2:	f000 f897 	bl	8ae4 <compile_node>
    compile_node(comp, pns->nodes[0]); // key
    89b6:	683b      	ldr	r3, [r7, #0]
    89b8:	689b      	ldr	r3, [r3, #8]
    89ba:	4619      	mov	r1, r3
    89bc:	6878      	ldr	r0, [r7, #4]
    89be:	f000 f891 	bl	8ae4 <compile_node>
}
    89c2:	bf00      	nop
    89c4:	3708      	adds	r7, #8
    89c6:	46bd      	mov	sp, r7
    89c8:	bd80      	pop	{r7, pc}
    89ca:	bf00      	nop

000089cc <compile_classdef>:

STATIC void compile_classdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    89cc:	b580      	push	{r7, lr}
    89ce:	b084      	sub	sp, #16
    89d0:	af00      	add	r7, sp, #0
    89d2:	6078      	str	r0, [r7, #4]
    89d4:	6039      	str	r1, [r7, #0]
    qstr cname = compile_classdef_helper(comp, pns, comp->scope_cur->emit_options);
    89d6:	687b      	ldr	r3, [r7, #4]
    89d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    89da:	8b5b      	ldrh	r3, [r3, #26]
    89dc:	461a      	mov	r2, r3
    89de:	6839      	ldr	r1, [r7, #0]
    89e0:	6878      	ldr	r0, [r7, #4]
    89e2:	f7fd f9bf 	bl	5d64 <compile_classdef_helper>
    89e6:	60f8      	str	r0, [r7, #12]
    // store class object into class name
    compile_store_id(comp, cname);
    89e8:	68f9      	ldr	r1, [r7, #12]
    89ea:	6878      	ldr	r0, [r7, #4]
    89ec:	f7fc fbc2 	bl	5174 <compile_store_id>
}
    89f0:	bf00      	nop
    89f2:	3710      	adds	r7, #16
    89f4:	46bd      	mov	sp, r7
    89f6:	bd80      	pop	{r7, pc}

000089f8 <compile_yield_expr>:

STATIC void compile_yield_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    89f8:	b580      	push	{r7, lr}
    89fa:	b082      	sub	sp, #8
    89fc:	af00      	add	r7, sp, #0
    89fe:	6078      	str	r0, [r7, #4]
    8a00:	6039      	str	r1, [r7, #0]
    if (comp->scope_cur->kind != SCOPE_FUNCTION && comp->scope_cur->kind != SCOPE_LAMBDA) {
    8a02:	687b      	ldr	r3, [r7, #4]
    8a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8a06:	681b      	ldr	r3, [r3, #0]
    8a08:	2b07      	cmp	r3, #7
    8a0a:	d00b      	beq.n	8a24 <compile_yield_expr+0x2c>
    8a0c:	687b      	ldr	r3, [r7, #4]
    8a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8a10:	681b      	ldr	r3, [r3, #0]
    8a12:	2b02      	cmp	r3, #2
    8a14:	d006      	beq.n	8a24 <compile_yield_expr+0x2c>
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'yield' outside function");
    8a16:	683b      	ldr	r3, [r7, #0]
    8a18:	4a21      	ldr	r2, [pc, #132]	; (8aa0 <compile_yield_expr+0xa8>)
    8a1a:	4619      	mov	r1, r3
    8a1c:	6878      	ldr	r0, [r7, #4]
    8a1e:	f7fc fa7b 	bl	4f18 <compile_syntax_error>
        return;
    8a22:	e039      	b.n	8a98 <compile_yield_expr+0xa0>
    }
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    8a24:	683b      	ldr	r3, [r7, #0]
    8a26:	689b      	ldr	r3, [r3, #8]
    8a28:	2b00      	cmp	r3, #0
    8a2a:	d10c      	bne.n	8a46 <compile_yield_expr+0x4e>
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    8a2c:	687b      	ldr	r3, [r7, #4]
    8a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8a30:	210e      	movs	r1, #14
    8a32:	4618      	mov	r0, r3
    8a34:	f001 fca6 	bl	a384 <mp_emit_bc_load_const_tok>
        EMIT_ARG(yield, MP_EMIT_YIELD_VALUE);
    8a38:	687b      	ldr	r3, [r7, #4]
    8a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8a3c:	2100      	movs	r1, #0
    8a3e:	4618      	mov	r0, r3
    8a40:	f002 f9de 	bl	ae00 <mp_emit_bc_yield>
    8a44:	e028      	b.n	8a98 <compile_yield_expr+0xa0>
        reserve_labels_for_native(comp, 1);
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_yield_arg_from)) {
    8a46:	683b      	ldr	r3, [r7, #0]
    8a48:	689b      	ldr	r3, [r3, #8]
    8a4a:	2b00      	cmp	r3, #0
    8a4c:	d018      	beq.n	8a80 <compile_yield_expr+0x88>
    8a4e:	683b      	ldr	r3, [r7, #0]
    8a50:	689b      	ldr	r3, [r3, #8]
    8a52:	f003 0303 	and.w	r3, r3, #3
    8a56:	2b00      	cmp	r3, #0
    8a58:	d112      	bne.n	8a80 <compile_yield_expr+0x88>
    8a5a:	683b      	ldr	r3, [r7, #0]
    8a5c:	689b      	ldr	r3, [r3, #8]
    8a5e:	685b      	ldr	r3, [r3, #4]
    8a60:	b2db      	uxtb	r3, r3
    8a62:	2ba2      	cmp	r3, #162	; 0xa2
    8a64:	d10c      	bne.n	8a80 <compile_yield_expr+0x88>
        pns = (mp_parse_node_struct_t*)pns->nodes[0];
    8a66:	683b      	ldr	r3, [r7, #0]
    8a68:	689b      	ldr	r3, [r3, #8]
    8a6a:	603b      	str	r3, [r7, #0]
        compile_node(comp, pns->nodes[0]);
    8a6c:	683b      	ldr	r3, [r7, #0]
    8a6e:	689b      	ldr	r3, [r3, #8]
    8a70:	4619      	mov	r1, r3
    8a72:	6878      	ldr	r0, [r7, #4]
    8a74:	f000 f836 	bl	8ae4 <compile_node>
        compile_yield_from(comp);
    8a78:	6878      	ldr	r0, [r7, #4]
    8a7a:	f7fe fe95 	bl	77a8 <compile_yield_from>
    8a7e:	e00b      	b.n	8a98 <compile_yield_expr+0xa0>
    } else {
        compile_node(comp, pns->nodes[0]);
    8a80:	683b      	ldr	r3, [r7, #0]
    8a82:	689b      	ldr	r3, [r3, #8]
    8a84:	4619      	mov	r1, r3
    8a86:	6878      	ldr	r0, [r7, #4]
    8a88:	f000 f82c 	bl	8ae4 <compile_node>
        EMIT_ARG(yield, MP_EMIT_YIELD_VALUE);
    8a8c:	687b      	ldr	r3, [r7, #4]
    8a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8a90:	2100      	movs	r1, #0
    8a92:	4618      	mov	r0, r3
    8a94:	f002 f9b4 	bl	ae00 <mp_emit_bc_yield>
        reserve_labels_for_native(comp, 1);
    }
}
    8a98:	3708      	adds	r7, #8
    8a9a:	46bd      	mov	sp, r7
    8a9c:	bd80      	pop	{r7, pc}
    8a9e:	bf00      	nop
    8aa0:	00020b9c 	.word	0x00020b9c

00008aa4 <get_const_object>:
    compile_atom_expr_normal(comp, pns);
    compile_yield_from(comp);
}
#endif

STATIC mp_obj_t get_const_object(mp_parse_node_struct_t *pns) {
    8aa4:	b480      	push	{r7}
    8aa6:	b083      	sub	sp, #12
    8aa8:	af00      	add	r7, sp, #0
    8aaa:	6078      	str	r0, [r7, #4]
    #if MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_D
    // nodes are 32-bit pointers, but need to extract 64-bit object
    return (uint64_t)pns->nodes[0] | ((uint64_t)pns->nodes[1] << 32);
    #else
    return (mp_obj_t)pns->nodes[0];
    8aac:	687b      	ldr	r3, [r7, #4]
    8aae:	689b      	ldr	r3, [r3, #8]
    #endif
}
    8ab0:	4618      	mov	r0, r3
    8ab2:	370c      	adds	r7, #12
    8ab4:	46bd      	mov	sp, r7
    8ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8aba:	4770      	bx	lr

00008abc <compile_const_object>:

STATIC void compile_const_object(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8abc:	b590      	push	{r4, r7, lr}
    8abe:	b083      	sub	sp, #12
    8ac0:	af00      	add	r7, sp, #0
    8ac2:	6078      	str	r0, [r7, #4]
    8ac4:	6039      	str	r1, [r7, #0]
    #if MICROPY_EMIT_NATIVE
    comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_HASCONSTS;
    #endif
    EMIT_ARG(load_const_obj, get_const_object(pns));
    8ac6:	687b      	ldr	r3, [r7, #4]
    8ac8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    8aca:	6838      	ldr	r0, [r7, #0]
    8acc:	f7ff ffea 	bl	8aa4 <get_const_object>
    8ad0:	4603      	mov	r3, r0
    8ad2:	4619      	mov	r1, r3
    8ad4:	4620      	mov	r0, r4
    8ad6:	f001 fcc5 	bl	a464 <mp_emit_bc_load_const_obj>
}
    8ada:	bf00      	nop
    8adc:	370c      	adds	r7, #12
    8ade:	46bd      	mov	sp, r7
    8ae0:	bd90      	pop	{r4, r7, pc}
    8ae2:	bf00      	nop

00008ae4 <compile_node>:
#undef DEF_RULE
#undef DEF_RULE_NC
    compile_const_object,
};

STATIC void compile_node(compiler_t *comp, mp_parse_node_t pn) {
    8ae4:	b590      	push	{r4, r7, lr}
    8ae6:	b089      	sub	sp, #36	; 0x24
    8ae8:	af00      	add	r7, sp, #0
    8aea:	6078      	str	r0, [r7, #4]
    8aec:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    8aee:	683b      	ldr	r3, [r7, #0]
    8af0:	2b00      	cmp	r3, #0
    8af2:	d078      	beq.n	8be6 <compile_node+0x102>
        // pass
    } else if (MP_PARSE_NODE_IS_SMALL_INT(pn)) {
    8af4:	683b      	ldr	r3, [r7, #0]
    8af6:	f003 0301 	and.w	r3, r3, #1
    8afa:	2b00      	cmp	r3, #0
    8afc:	d009      	beq.n	8b12 <compile_node+0x2e>
        mp_int_t arg = MP_PARSE_NODE_LEAF_SMALL_INT(pn);
    8afe:	683b      	ldr	r3, [r7, #0]
    8b00:	105b      	asrs	r3, r3, #1
    8b02:	61fb      	str	r3, [r7, #28]
            #if MICROPY_EMIT_NATIVE
            comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_HASCONSTS;
            #endif
        }
        #else
        EMIT_ARG(load_const_small_int, arg);
    8b04:	687b      	ldr	r3, [r7, #4]
    8b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8b08:	69f9      	ldr	r1, [r7, #28]
    8b0a:	4618      	mov	r0, r3
    8b0c:	f001 fc76 	bl	a3fc <mp_emit_bc_load_const_small_int>
        EMIT_ARG(set_source_line, pns->source_line);
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) <= PN_const_object);
        compile_function_t f = compile_function[MP_PARSE_NODE_STRUCT_KIND(pns)];
        f(comp, pns);
    }
}
    8b10:	e069      	b.n	8be6 <compile_node+0x102>
    } else if (MP_PARSE_NODE_IS_LEAF(pn)) {
    8b12:	683b      	ldr	r3, [r7, #0]
    8b14:	f003 0303 	and.w	r3, r3, #3
    8b18:	2b00      	cmp	r3, #0
    8b1a:	d041      	beq.n	8ba0 <compile_node+0xbc>
        uintptr_t arg = MP_PARSE_NODE_LEAF_ARG(pn);
    8b1c:	683b      	ldr	r3, [r7, #0]
    8b1e:	091b      	lsrs	r3, r3, #4
    8b20:	61bb      	str	r3, [r7, #24]
        switch (MP_PARSE_NODE_LEAF_KIND(pn)) {
    8b22:	683b      	ldr	r3, [r7, #0]
    8b24:	f003 030f 	and.w	r3, r3, #15
    8b28:	2b06      	cmp	r3, #6
    8b2a:	d008      	beq.n	8b3e <compile_node+0x5a>
    8b2c:	2b0a      	cmp	r3, #10
    8b2e:	d00d      	beq.n	8b4c <compile_node+0x68>
    8b30:	2b02      	cmp	r3, #2
    8b32:	d12a      	bne.n	8b8a <compile_node+0xa6>
            case MP_PARSE_NODE_ID: compile_load_id(comp, arg); break;
    8b34:	69b9      	ldr	r1, [r7, #24]
    8b36:	6878      	ldr	r0, [r7, #4]
    8b38:	f7fc fafe 	bl	5138 <compile_load_id>
    8b3c:	e053      	b.n	8be6 <compile_node+0x102>
            case MP_PARSE_NODE_STRING: EMIT_ARG(load_const_str, arg); break;
    8b3e:	687b      	ldr	r3, [r7, #4]
    8b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8b42:	69b9      	ldr	r1, [r7, #24]
    8b44:	4618      	mov	r0, r3
    8b46:	f001 fc7b 	bl	a440 <mp_emit_bc_load_const_str>
    8b4a:	e04c      	b.n	8be6 <compile_node+0x102>
                if (comp->pass != MP_PASS_EMIT) {
    8b4c:	687b      	ldr	r3, [r7, #4]
    8b4e:	795b      	ldrb	r3, [r3, #5]
    8b50:	2b04      	cmp	r3, #4
    8b52:	d006      	beq.n	8b62 <compile_node+0x7e>
                    EMIT_ARG(load_const_obj, mp_const_none);
    8b54:	687b      	ldr	r3, [r7, #4]
    8b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8b58:	4925      	ldr	r1, [pc, #148]	; (8bf0 <compile_node+0x10c>)
    8b5a:	4618      	mov	r0, r3
    8b5c:	f001 fc82 	bl	a464 <mp_emit_bc_load_const_obj>
                break;
    8b60:	e041      	b.n	8be6 <compile_node+0x102>
                    const byte *data = qstr_data(arg, &len);
    8b62:	f107 0308 	add.w	r3, r7, #8
    8b66:	4619      	mov	r1, r3
    8b68:	69b8      	ldr	r0, [r7, #24]
    8b6a:	f7f8 fc1b 	bl	13a4 <qstr_data>
    8b6e:	6178      	str	r0, [r7, #20]
                    EMIT_ARG(load_const_obj, mp_obj_new_bytes(data, len));
    8b70:	687b      	ldr	r3, [r7, #4]
    8b72:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    8b74:	68bb      	ldr	r3, [r7, #8]
    8b76:	4619      	mov	r1, r3
    8b78:	6978      	ldr	r0, [r7, #20]
    8b7a:	f00c fd2f 	bl	155dc <mp_obj_new_bytes>
    8b7e:	4603      	mov	r3, r0
    8b80:	4619      	mov	r1, r3
    8b82:	4620      	mov	r0, r4
    8b84:	f001 fc6e 	bl	a464 <mp_emit_bc_load_const_obj>
                break;
    8b88:	e02d      	b.n	8be6 <compile_node+0x102>
                if (arg == MP_TOKEN_NEWLINE) {
    8b8a:	69bb      	ldr	r3, [r7, #24]
    8b8c:	2b04      	cmp	r3, #4
    8b8e:	d029      	beq.n	8be4 <compile_node+0x100>
                  EMIT_ARG(load_const_tok, arg);
    8b90:	687b      	ldr	r3, [r7, #4]
    8b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8b94:	69b9      	ldr	r1, [r7, #24]
    8b96:	4618      	mov	r0, r3
    8b98:	f001 fbf4 	bl	a384 <mp_emit_bc_load_const_tok>
                break;
    8b9c:	bf00      	nop
    8b9e:	e021      	b.n	8be4 <compile_node+0x100>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    8ba0:	683b      	ldr	r3, [r7, #0]
    8ba2:	613b      	str	r3, [r7, #16]
        EMIT_ARG(set_source_line, pns->source_line);
    8ba4:	687b      	ldr	r3, [r7, #4]
    8ba6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8ba8:	693b      	ldr	r3, [r7, #16]
    8baa:	681b      	ldr	r3, [r3, #0]
    8bac:	4619      	mov	r1, r3
    8bae:	4610      	mov	r0, r2
    8bb0:	f001 fb5e 	bl	a270 <mp_emit_bc_set_source_line>
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) <= PN_const_object);
    8bb4:	693b      	ldr	r3, [r7, #16]
    8bb6:	685b      	ldr	r3, [r3, #4]
    8bb8:	b2db      	uxtb	r3, r3
    8bba:	2b35      	cmp	r3, #53	; 0x35
    8bbc:	d906      	bls.n	8bcc <compile_node+0xe8>
    8bbe:	4b0d      	ldr	r3, [pc, #52]	; (8bf4 <compile_node+0x110>)
    8bc0:	4a0d      	ldr	r2, [pc, #52]	; (8bf8 <compile_node+0x114>)
    8bc2:	f640 21ba 	movw	r1, #2746	; 0xaba
    8bc6:	480d      	ldr	r0, [pc, #52]	; (8bfc <compile_node+0x118>)
    8bc8:	f012 fddc 	bl	1b784 <__assert_func>
        compile_function_t f = compile_function[MP_PARSE_NODE_STRUCT_KIND(pns)];
    8bcc:	693b      	ldr	r3, [r7, #16]
    8bce:	685b      	ldr	r3, [r3, #4]
    8bd0:	b2db      	uxtb	r3, r3
    8bd2:	4a0b      	ldr	r2, [pc, #44]	; (8c00 <compile_node+0x11c>)
    8bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bd8:	60fb      	str	r3, [r7, #12]
        f(comp, pns);
    8bda:	68fb      	ldr	r3, [r7, #12]
    8bdc:	6939      	ldr	r1, [r7, #16]
    8bde:	6878      	ldr	r0, [r7, #4]
    8be0:	4798      	blx	r3
}
    8be2:	e000      	b.n	8be6 <compile_node+0x102>
                break;
    8be4:	bf00      	nop
}
    8be6:	bf00      	nop
    8be8:	3724      	adds	r7, #36	; 0x24
    8bea:	46bd      	mov	sp, r7
    8bec:	bd90      	pop	{r4, r7, pc}
    8bee:	bf00      	nop
    8bf0:	000234d4 	.word	0x000234d4
    8bf4:	00020c90 	.word	0x00020c90
    8bf8:	000210e8 	.word	0x000210e8
    8bfc:	00020358 	.word	0x00020358
    8c00:	00020bb8 	.word	0x00020bb8

00008c04 <compile_scope_func_lambda_param>:
    }
    return native_type;
}
#endif

STATIC void compile_scope_func_lambda_param(compiler_t *comp, mp_parse_node_t pn, pn_kind_t pn_name, pn_kind_t pn_star, pn_kind_t pn_dbl_star) {
    8c04:	b580      	push	{r7, lr}
    8c06:	b088      	sub	sp, #32
    8c08:	af00      	add	r7, sp, #0
    8c0a:	60f8      	str	r0, [r7, #12]
    8c0c:	60b9      	str	r1, [r7, #8]
    8c0e:	607a      	str	r2, [r7, #4]
    8c10:	603b      	str	r3, [r7, #0]
    // check that **kw is last
    if ((comp->scope_cur->scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
    8c12:	68fb      	ldr	r3, [r7, #12]
    8c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c16:	8b1b      	ldrh	r3, [r3, #24]
    8c18:	f003 0302 	and.w	r3, r3, #2
    8c1c:	2b00      	cmp	r3, #0
    8c1e:	d005      	beq.n	8c2c <compile_scope_func_lambda_param+0x28>
        compile_syntax_error(comp, pn, "invalid syntax");
    8c20:	4a77      	ldr	r2, [pc, #476]	; (8e00 <compile_scope_func_lambda_param+0x1fc>)
    8c22:	68b9      	ldr	r1, [r7, #8]
    8c24:	68f8      	ldr	r0, [r7, #12]
    8c26:	f7fc f977 	bl	4f18 <compile_syntax_error>
        return;
    8c2a:	e0e6      	b.n	8dfa <compile_scope_func_lambda_param+0x1f6>
    }

    qstr param_name = MP_QSTR_NULL;
    8c2c:	2300      	movs	r3, #0
    8c2e:	61fb      	str	r3, [r7, #28]
    uint param_flag = ID_FLAG_IS_PARAM;
    8c30:	2301      	movs	r3, #1
    8c32:	61bb      	str	r3, [r7, #24]
    mp_parse_node_struct_t *pns = NULL;
    8c34:	2300      	movs	r3, #0
    8c36:	617b      	str	r3, [r7, #20]
    if (MP_PARSE_NODE_IS_ID(pn)) {
    8c38:	68bb      	ldr	r3, [r7, #8]
    8c3a:	f003 030f 	and.w	r3, r3, #15
    8c3e:	2b02      	cmp	r3, #2
    8c40:	d118      	bne.n	8c74 <compile_scope_func_lambda_param+0x70>
        param_name = MP_PARSE_NODE_LEAF_ARG(pn);
    8c42:	68bb      	ldr	r3, [r7, #8]
    8c44:	091b      	lsrs	r3, r3, #4
    8c46:	61fb      	str	r3, [r7, #28]
        if (comp->have_star) {
    8c48:	68fb      	ldr	r3, [r7, #12]
    8c4a:	799b      	ldrb	r3, [r3, #6]
    8c4c:	2b00      	cmp	r3, #0
    8c4e:	d008      	beq.n	8c62 <compile_scope_func_lambda_param+0x5e>
            // comes after a star, so counts as a keyword-only parameter
            comp->scope_cur->num_kwonly_args += 1;
    8c50:	68fb      	ldr	r3, [r7, #12]
    8c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c54:	68fa      	ldr	r2, [r7, #12]
    8c56:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8c58:	8bd2      	ldrh	r2, [r2, #30]
    8c5a:	3201      	adds	r2, #1
    8c5c:	b292      	uxth	r2, r2
    8c5e:	83da      	strh	r2, [r3, #30]
    8c60:	e0af      	b.n	8dc2 <compile_scope_func_lambda_param+0x1be>
        } else {
            // comes before a star, so counts as a positional parameter
            comp->scope_cur->num_pos_args += 1;
    8c62:	68fb      	ldr	r3, [r7, #12]
    8c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c66:	68fa      	ldr	r2, [r7, #12]
    8c68:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8c6a:	8b92      	ldrh	r2, [r2, #28]
    8c6c:	3201      	adds	r2, #1
    8c6e:	b292      	uxth	r2, r2
    8c70:	839a      	strh	r2, [r3, #28]
    8c72:	e0a6      	b.n	8dc2 <compile_scope_func_lambda_param+0x1be>
        }
    } else {
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    8c74:	68bb      	ldr	r3, [r7, #8]
    8c76:	2b00      	cmp	r3, #0
    8c78:	d004      	beq.n	8c84 <compile_scope_func_lambda_param+0x80>
    8c7a:	68bb      	ldr	r3, [r7, #8]
    8c7c:	f003 0303 	and.w	r3, r3, #3
    8c80:	2b00      	cmp	r3, #0
    8c82:	d006      	beq.n	8c92 <compile_scope_func_lambda_param+0x8e>
    8c84:	4b5f      	ldr	r3, [pc, #380]	; (8e04 <compile_scope_func_lambda_param+0x200>)
    8c86:	4a60      	ldr	r2, [pc, #384]	; (8e08 <compile_scope_func_lambda_param+0x204>)
    8c88:	f640 21e7 	movw	r1, #2791	; 0xae7
    8c8c:	485f      	ldr	r0, [pc, #380]	; (8e0c <compile_scope_func_lambda_param+0x208>)
    8c8e:	f012 fd79 	bl	1b784 <__assert_func>
        pns = (mp_parse_node_struct_t*)pn;
    8c92:	68bb      	ldr	r3, [r7, #8]
    8c94:	617b      	str	r3, [r7, #20]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == pn_name) {
    8c96:	697b      	ldr	r3, [r7, #20]
    8c98:	685b      	ldr	r3, [r3, #4]
    8c9a:	b2da      	uxtb	r2, r3
    8c9c:	687b      	ldr	r3, [r7, #4]
    8c9e:	429a      	cmp	r2, r3
    8ca0:	d119      	bne.n	8cd6 <compile_scope_func_lambda_param+0xd2>
            // named parameter with possible annotation
            param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8ca2:	697b      	ldr	r3, [r7, #20]
    8ca4:	689b      	ldr	r3, [r3, #8]
    8ca6:	091b      	lsrs	r3, r3, #4
    8ca8:	61fb      	str	r3, [r7, #28]
            if (comp->have_star) {
    8caa:	68fb      	ldr	r3, [r7, #12]
    8cac:	799b      	ldrb	r3, [r3, #6]
    8cae:	2b00      	cmp	r3, #0
    8cb0:	d008      	beq.n	8cc4 <compile_scope_func_lambda_param+0xc0>
                // comes after a star, so counts as a keyword-only parameter
                comp->scope_cur->num_kwonly_args += 1;
    8cb2:	68fb      	ldr	r3, [r7, #12]
    8cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8cb6:	68fa      	ldr	r2, [r7, #12]
    8cb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8cba:	8bd2      	ldrh	r2, [r2, #30]
    8cbc:	3201      	adds	r2, #1
    8cbe:	b292      	uxth	r2, r2
    8cc0:	83da      	strh	r2, [r3, #30]
    8cc2:	e07e      	b.n	8dc2 <compile_scope_func_lambda_param+0x1be>
            } else {
                // comes before a star, so counts as a positional parameter
                comp->scope_cur->num_pos_args += 1;
    8cc4:	68fb      	ldr	r3, [r7, #12]
    8cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8cc8:	68fa      	ldr	r2, [r7, #12]
    8cca:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8ccc:	8b92      	ldrh	r2, [r2, #28]
    8cce:	3201      	adds	r2, #1
    8cd0:	b292      	uxth	r2, r2
    8cd2:	839a      	strh	r2, [r3, #28]
    8cd4:	e075      	b.n	8dc2 <compile_scope_func_lambda_param+0x1be>
            }
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == pn_star) {
    8cd6:	697b      	ldr	r3, [r7, #20]
    8cd8:	685b      	ldr	r3, [r3, #4]
    8cda:	b2da      	uxtb	r2, r3
    8cdc:	683b      	ldr	r3, [r7, #0]
    8cde:	429a      	cmp	r2, r3
    8ce0:	d153      	bne.n	8d8a <compile_scope_func_lambda_param+0x186>
            if (comp->have_star) {
    8ce2:	68fb      	ldr	r3, [r7, #12]
    8ce4:	799b      	ldrb	r3, [r3, #6]
    8ce6:	2b00      	cmp	r3, #0
    8ce8:	d005      	beq.n	8cf6 <compile_scope_func_lambda_param+0xf2>
                // more than one star
                compile_syntax_error(comp, pn, "invalid syntax");
    8cea:	4a45      	ldr	r2, [pc, #276]	; (8e00 <compile_scope_func_lambda_param+0x1fc>)
    8cec:	68b9      	ldr	r1, [r7, #8]
    8cee:	68f8      	ldr	r0, [r7, #12]
    8cf0:	f7fc f912 	bl	4f18 <compile_syntax_error>
                return;
    8cf4:	e081      	b.n	8dfa <compile_scope_func_lambda_param+0x1f6>
            }
            comp->have_star = true;
    8cf6:	68fb      	ldr	r3, [r7, #12]
    8cf8:	2201      	movs	r2, #1
    8cfa:	719a      	strb	r2, [r3, #6]
            param_flag = ID_FLAG_IS_PARAM | ID_FLAG_IS_STAR_PARAM;
    8cfc:	2303      	movs	r3, #3
    8cfe:	61bb      	str	r3, [r7, #24]
            if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    8d00:	697b      	ldr	r3, [r7, #20]
    8d02:	689b      	ldr	r3, [r3, #8]
    8d04:	2b00      	cmp	r3, #0
    8d06:	d102      	bne.n	8d0e <compile_scope_func_lambda_param+0x10a>
                // bare star
                // TODO see http://www.python.org/dev/peps/pep-3102/
                //assert(comp->scope_cur->num_dict_params == 0);
                pns = NULL;
    8d08:	2300      	movs	r3, #0
    8d0a:	617b      	str	r3, [r7, #20]
    8d0c:	e059      	b.n	8dc2 <compile_scope_func_lambda_param+0x1be>
            } else if (MP_PARSE_NODE_IS_ID(pns->nodes[0])) {
    8d0e:	697b      	ldr	r3, [r7, #20]
    8d10:	689b      	ldr	r3, [r3, #8]
    8d12:	f003 030f 	and.w	r3, r3, #15
    8d16:	2b02      	cmp	r3, #2
    8d18:	d10f      	bne.n	8d3a <compile_scope_func_lambda_param+0x136>
                // named star
                comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARARGS;
    8d1a:	68fb      	ldr	r3, [r7, #12]
    8d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d1e:	68fa      	ldr	r2, [r7, #12]
    8d20:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8d22:	8b12      	ldrh	r2, [r2, #24]
    8d24:	f042 0201 	orr.w	r2, r2, #1
    8d28:	b292      	uxth	r2, r2
    8d2a:	831a      	strh	r2, [r3, #24]
                param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8d2c:	697b      	ldr	r3, [r7, #20]
    8d2e:	689b      	ldr	r3, [r3, #8]
    8d30:	091b      	lsrs	r3, r3, #4
    8d32:	61fb      	str	r3, [r7, #28]
                pns = NULL;
    8d34:	2300      	movs	r3, #0
    8d36:	617b      	str	r3, [r7, #20]
    8d38:	e043      	b.n	8dc2 <compile_scope_func_lambda_param+0x1be>
            } else {
                assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_tfpdef)); // should be
    8d3a:	697b      	ldr	r3, [r7, #20]
    8d3c:	689b      	ldr	r3, [r3, #8]
    8d3e:	2b00      	cmp	r3, #0
    8d40:	d00b      	beq.n	8d5a <compile_scope_func_lambda_param+0x156>
    8d42:	697b      	ldr	r3, [r7, #20]
    8d44:	689b      	ldr	r3, [r3, #8]
    8d46:	f003 0303 	and.w	r3, r3, #3
    8d4a:	2b00      	cmp	r3, #0
    8d4c:	d105      	bne.n	8d5a <compile_scope_func_lambda_param+0x156>
    8d4e:	697b      	ldr	r3, [r7, #20]
    8d50:	689b      	ldr	r3, [r3, #8]
    8d52:	685b      	ldr	r3, [r3, #4]
    8d54:	b2db      	uxtb	r3, r3
    8d56:	2b45      	cmp	r3, #69	; 0x45
    8d58:	d006      	beq.n	8d68 <compile_scope_func_lambda_param+0x164>
    8d5a:	4b2d      	ldr	r3, [pc, #180]	; (8e10 <compile_scope_func_lambda_param+0x20c>)
    8d5c:	4a2a      	ldr	r2, [pc, #168]	; (8e08 <compile_scope_func_lambda_param+0x204>)
    8d5e:	f640 3106 	movw	r1, #2822	; 0xb06
    8d62:	482a      	ldr	r0, [pc, #168]	; (8e0c <compile_scope_func_lambda_param+0x208>)
    8d64:	f012 fd0e 	bl	1b784 <__assert_func>
                // named star with possible annotation
                comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARARGS;
    8d68:	68fb      	ldr	r3, [r7, #12]
    8d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d6c:	68fa      	ldr	r2, [r7, #12]
    8d6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8d70:	8b12      	ldrh	r2, [r2, #24]
    8d72:	f042 0201 	orr.w	r2, r2, #1
    8d76:	b292      	uxth	r2, r2
    8d78:	831a      	strh	r2, [r3, #24]
                pns = (mp_parse_node_struct_t*)pns->nodes[0];
    8d7a:	697b      	ldr	r3, [r7, #20]
    8d7c:	689b      	ldr	r3, [r3, #8]
    8d7e:	617b      	str	r3, [r7, #20]
                param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8d80:	697b      	ldr	r3, [r7, #20]
    8d82:	689b      	ldr	r3, [r3, #8]
    8d84:	091b      	lsrs	r3, r3, #4
    8d86:	61fb      	str	r3, [r7, #28]
    8d88:	e01b      	b.n	8dc2 <compile_scope_func_lambda_param+0x1be>
            }
        } else {
            // double star with possible annotation
            assert(MP_PARSE_NODE_STRUCT_KIND(pns) == pn_dbl_star); // should be
    8d8a:	697b      	ldr	r3, [r7, #20]
    8d8c:	685b      	ldr	r3, [r3, #4]
    8d8e:	b2da      	uxtb	r2, r3
    8d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8d92:	429a      	cmp	r2, r3
    8d94:	d006      	beq.n	8da4 <compile_scope_func_lambda_param+0x1a0>
    8d96:	4b1f      	ldr	r3, [pc, #124]	; (8e14 <compile_scope_func_lambda_param+0x210>)
    8d98:	4a1b      	ldr	r2, [pc, #108]	; (8e08 <compile_scope_func_lambda_param+0x204>)
    8d9a:	f640 310e 	movw	r1, #2830	; 0xb0e
    8d9e:	481b      	ldr	r0, [pc, #108]	; (8e0c <compile_scope_func_lambda_param+0x208>)
    8da0:	f012 fcf0 	bl	1b784 <__assert_func>
            param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8da4:	697b      	ldr	r3, [r7, #20]
    8da6:	689b      	ldr	r3, [r3, #8]
    8da8:	091b      	lsrs	r3, r3, #4
    8daa:	61fb      	str	r3, [r7, #28]
            param_flag = ID_FLAG_IS_PARAM | ID_FLAG_IS_DBL_STAR_PARAM;
    8dac:	2305      	movs	r3, #5
    8dae:	61bb      	str	r3, [r7, #24]
            comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARKEYWORDS;
    8db0:	68fb      	ldr	r3, [r7, #12]
    8db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8db4:	68fa      	ldr	r2, [r7, #12]
    8db6:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8db8:	8b12      	ldrh	r2, [r2, #24]
    8dba:	f042 0202 	orr.w	r2, r2, #2
    8dbe:	b292      	uxth	r2, r2
    8dc0:	831a      	strh	r2, [r3, #24]
        }
    }

    if (param_name != MP_QSTR_NULL) {
    8dc2:	69fb      	ldr	r3, [r7, #28]
    8dc4:	2b00      	cmp	r3, #0
    8dc6:	d018      	beq.n	8dfa <compile_scope_func_lambda_param+0x1f6>
        id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, param_name, ID_INFO_KIND_UNDECIDED);
    8dc8:	68fb      	ldr	r3, [r7, #12]
    8dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8dcc:	2200      	movs	r2, #0
    8dce:	69f9      	ldr	r1, [r7, #28]
    8dd0:	4618      	mov	r0, r3
    8dd2:	f7fb ff4f 	bl	4c74 <scope_find_or_add_id>
    8dd6:	6138      	str	r0, [r7, #16]
        if (id_info->kind != ID_INFO_KIND_UNDECIDED) {
    8dd8:	693b      	ldr	r3, [r7, #16]
    8dda:	781b      	ldrb	r3, [r3, #0]
    8ddc:	2b00      	cmp	r3, #0
    8dde:	d005      	beq.n	8dec <compile_scope_func_lambda_param+0x1e8>
            compile_syntax_error(comp, pn, "argument name reused");
    8de0:	4a0d      	ldr	r2, [pc, #52]	; (8e18 <compile_scope_func_lambda_param+0x214>)
    8de2:	68b9      	ldr	r1, [r7, #8]
    8de4:	68f8      	ldr	r0, [r7, #12]
    8de6:	f7fc f897 	bl	4f18 <compile_syntax_error>
            return;
    8dea:	e006      	b.n	8dfa <compile_scope_func_lambda_param+0x1f6>
        }
        id_info->kind = ID_INFO_KIND_LOCAL;
    8dec:	693b      	ldr	r3, [r7, #16]
    8dee:	2203      	movs	r2, #3
    8df0:	701a      	strb	r2, [r3, #0]
        id_info->flags = param_flag;
    8df2:	69bb      	ldr	r3, [r7, #24]
    8df4:	b2da      	uxtb	r2, r3
    8df6:	693b      	ldr	r3, [r7, #16]
    8df8:	705a      	strb	r2, [r3, #1]
        }
        #else
        (void)pns;
        #endif
    }
}
    8dfa:	3720      	adds	r7, #32
    8dfc:	46bd      	mov	sp, r7
    8dfe:	bd80      	pop	{r7, pc}
    8e00:	00020b58 	.word	0x00020b58
    8e04:	000204a0 	.word	0x000204a0
    8e08:	000210f8 	.word	0x000210f8
    8e0c:	00020358 	.word	0x00020358
    8e10:	00020cc4 	.word	0x00020cc4
    8e14:	00020cfc 	.word	0x00020cfc
    8e18:	00020d2c 	.word	0x00020d2c

00008e1c <compile_scope_func_param>:

STATIC void compile_scope_func_param(compiler_t *comp, mp_parse_node_t pn) {
    8e1c:	b580      	push	{r7, lr}
    8e1e:	b084      	sub	sp, #16
    8e20:	af02      	add	r7, sp, #8
    8e22:	6078      	str	r0, [r7, #4]
    8e24:	6039      	str	r1, [r7, #0]
    compile_scope_func_lambda_param(comp, pn, PN_typedargslist_name, PN_typedargslist_star, PN_typedargslist_dbl_star);
    8e26:	2342      	movs	r3, #66	; 0x42
    8e28:	9300      	str	r3, [sp, #0]
    8e2a:	2341      	movs	r3, #65	; 0x41
    8e2c:	2240      	movs	r2, #64	; 0x40
    8e2e:	6839      	ldr	r1, [r7, #0]
    8e30:	6878      	ldr	r0, [r7, #4]
    8e32:	f7ff fee7 	bl	8c04 <compile_scope_func_lambda_param>
}
    8e36:	bf00      	nop
    8e38:	3708      	adds	r7, #8
    8e3a:	46bd      	mov	sp, r7
    8e3c:	bd80      	pop	{r7, pc}
    8e3e:	bf00      	nop

00008e40 <compile_scope_lambda_param>:

STATIC void compile_scope_lambda_param(compiler_t *comp, mp_parse_node_t pn) {
    8e40:	b580      	push	{r7, lr}
    8e42:	b084      	sub	sp, #16
    8e44:	af02      	add	r7, sp, #8
    8e46:	6078      	str	r0, [r7, #4]
    8e48:	6039      	str	r1, [r7, #0]
    compile_scope_func_lambda_param(comp, pn, PN_varargslist_name, PN_varargslist_star, PN_varargslist_dbl_star);
    8e4a:	234a      	movs	r3, #74	; 0x4a
    8e4c:	9300      	str	r3, [sp, #0]
    8e4e:	2349      	movs	r3, #73	; 0x49
    8e50:	2248      	movs	r2, #72	; 0x48
    8e52:	6839      	ldr	r1, [r7, #0]
    8e54:	6878      	ldr	r0, [r7, #4]
    8e56:	f7ff fed5 	bl	8c04 <compile_scope_func_lambda_param>
}
    8e5a:	bf00      	nop
    8e5c:	3708      	adds	r7, #8
    8e5e:	46bd      	mov	sp, r7
    8e60:	bd80      	pop	{r7, pc}
    8e62:	bf00      	nop

00008e64 <compile_scope_comp_iter>:

STATIC void compile_scope_comp_iter(compiler_t *comp, mp_parse_node_struct_t *pns_comp_for, mp_parse_node_t pn_inner_expr, int for_depth) {
    8e64:	b580      	push	{r7, lr}
    8e66:	b08a      	sub	sp, #40	; 0x28
    8e68:	af00      	add	r7, sp, #0
    8e6a:	60f8      	str	r0, [r7, #12]
    8e6c:	60b9      	str	r1, [r7, #8]
    8e6e:	607a      	str	r2, [r7, #4]
    8e70:	603b      	str	r3, [r7, #0]
    uint l_top = comp_next_label(comp);
    8e72:	68f8      	ldr	r0, [r7, #12]
    8e74:	f7fc f86c 	bl	4f50 <comp_next_label>
    8e78:	6238      	str	r0, [r7, #32]
    uint l_end = comp_next_label(comp);
    8e7a:	68f8      	ldr	r0, [r7, #12]
    8e7c:	f7fc f868 	bl	4f50 <comp_next_label>
    8e80:	61f8      	str	r0, [r7, #28]
    EMIT_ARG(label_assign, l_top);
    8e82:	68fb      	ldr	r3, [r7, #12]
    8e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8e86:	6a39      	ldr	r1, [r7, #32]
    8e88:	4618      	mov	r0, r3
    8e8a:	f001 f9fd 	bl	a288 <mp_emit_bc_label_assign>
    EMIT_ARG(for_iter, l_end);
    8e8e:	68fb      	ldr	r3, [r7, #12]
    8e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8e92:	69f9      	ldr	r1, [r7, #28]
    8e94:	4618      	mov	r0, r3
    8e96:	f001 fd8d 	bl	a9b4 <mp_emit_bc_for_iter>
    c_assign(comp, pns_comp_for->nodes[0], ASSIGN_STORE);
    8e9a:	68bb      	ldr	r3, [r7, #8]
    8e9c:	689b      	ldr	r3, [r3, #8]
    8e9e:	2200      	movs	r2, #0
    8ea0:	4619      	mov	r1, r3
    8ea2:	68f8      	ldr	r0, [r7, #12]
    8ea4:	f7fc fc8a 	bl	57bc <c_assign>
    mp_parse_node_t pn_iter = pns_comp_for->nodes[2];
    8ea8:	68bb      	ldr	r3, [r7, #8]
    8eaa:	691b      	ldr	r3, [r3, #16]
    8eac:	627b      	str	r3, [r7, #36]	; 0x24

    tail_recursion:
    if (MP_PARSE_NODE_IS_NULL(pn_iter)) {
    8eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8eb0:	2b00      	cmp	r3, #0
    8eb2:	d120      	bne.n	8ef6 <compile_scope_comp_iter+0x92>
        // no more nested if/for; compile inner expression
        compile_node(comp, pn_inner_expr);
    8eb4:	6879      	ldr	r1, [r7, #4]
    8eb6:	68f8      	ldr	r0, [r7, #12]
    8eb8:	f7ff fe14 	bl	8ae4 <compile_node>
        if (comp->scope_cur->kind == SCOPE_GEN_EXPR) {
    8ebc:	68fb      	ldr	r3, [r7, #12]
    8ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8ec0:	681b      	ldr	r3, [r3, #0]
    8ec2:	2b06      	cmp	r3, #6
    8ec4:	d10b      	bne.n	8ede <compile_scope_comp_iter+0x7a>
            EMIT_ARG(yield, MP_EMIT_YIELD_VALUE);
    8ec6:	68fb      	ldr	r3, [r7, #12]
    8ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8eca:	2100      	movs	r1, #0
    8ecc:	4618      	mov	r0, r3
    8ece:	f001 ff97 	bl	ae00 <mp_emit_bc_yield>
            reserve_labels_for_native(comp, 1);
            EMIT(pop_top);
    8ed2:	68fb      	ldr	r3, [r7, #12]
    8ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8ed6:	4618      	mov	r0, r3
    8ed8:	f001 fc32 	bl	a740 <mp_emit_bc_pop_top>
    8edc:	e03e      	b.n	8f5c <compile_scope_comp_iter+0xf8>
        } else {
            EMIT_ARG(store_comp, comp->scope_cur->kind, 4 * for_depth + 5);
    8ede:	68fb      	ldr	r3, [r7, #12]
    8ee0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8ee2:	68fb      	ldr	r3, [r7, #12]
    8ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8ee6:	6819      	ldr	r1, [r3, #0]
    8ee8:	683b      	ldr	r3, [r7, #0]
    8eea:	009b      	lsls	r3, r3, #2
    8eec:	3305      	adds	r3, #5
    8eee:	461a      	mov	r2, r3
    8ef0:	f001 fe1c 	bl	ab2c <mp_emit_bc_store_comp>
    8ef4:	e032      	b.n	8f5c <compile_scope_comp_iter+0xf8>
        }
    } else if (MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_iter) == PN_comp_if) {
    8ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8ef8:	685b      	ldr	r3, [r3, #4]
    8efa:	b2db      	uxtb	r3, r3
    8efc:	2ba0      	cmp	r3, #160	; 0xa0
    8efe:	d10c      	bne.n	8f1a <compile_scope_comp_iter+0xb6>
        // if condition
        mp_parse_node_struct_t *pns_comp_if = (mp_parse_node_struct_t*)pn_iter;
    8f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8f02:	61bb      	str	r3, [r7, #24]
        c_if_cond(comp, pns_comp_if->nodes[0], false, l_top);
    8f04:	69bb      	ldr	r3, [r7, #24]
    8f06:	6899      	ldr	r1, [r3, #8]
    8f08:	6a3b      	ldr	r3, [r7, #32]
    8f0a:	2200      	movs	r2, #0
    8f0c:	68f8      	ldr	r0, [r7, #12]
    8f0e:	f7fc f9b7 	bl	5280 <c_if_cond>
        pn_iter = pns_comp_if->nodes[1];
    8f12:	69bb      	ldr	r3, [r7, #24]
    8f14:	68db      	ldr	r3, [r3, #12]
    8f16:	627b      	str	r3, [r7, #36]	; 0x24
        goto tail_recursion;
    8f18:	e7c9      	b.n	8eae <compile_scope_comp_iter+0x4a>
    } else {
        assert(MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_iter) == PN_comp_for); // should be
    8f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8f1c:	685b      	ldr	r3, [r3, #4]
    8f1e:	b2db      	uxtb	r3, r3
    8f20:	2b9f      	cmp	r3, #159	; 0x9f
    8f22:	d006      	beq.n	8f32 <compile_scope_comp_iter+0xce>
    8f24:	4b18      	ldr	r3, [pc, #96]	; (8f88 <compile_scope_comp_iter+0x124>)
    8f26:	4a19      	ldr	r2, [pc, #100]	; (8f8c <compile_scope_comp_iter+0x128>)
    8f28:	f640 314a 	movw	r1, #2890	; 0xb4a
    8f2c:	4818      	ldr	r0, [pc, #96]	; (8f90 <compile_scope_comp_iter+0x12c>)
    8f2e:	f012 fc29 	bl	1b784 <__assert_func>
        // for loop
        mp_parse_node_struct_t *pns_comp_for2 = (mp_parse_node_struct_t*)pn_iter;
    8f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8f34:	617b      	str	r3, [r7, #20]
        compile_node(comp, pns_comp_for2->nodes[1]);
    8f36:	697b      	ldr	r3, [r7, #20]
    8f38:	68db      	ldr	r3, [r3, #12]
    8f3a:	4619      	mov	r1, r3
    8f3c:	68f8      	ldr	r0, [r7, #12]
    8f3e:	f7ff fdd1 	bl	8ae4 <compile_node>
        EMIT_ARG(get_iter, true);
    8f42:	68fb      	ldr	r3, [r7, #12]
    8f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f46:	2101      	movs	r1, #1
    8f48:	4618      	mov	r0, r3
    8f4a:	f001 fd15 	bl	a978 <mp_emit_bc_get_iter>
        compile_scope_comp_iter(comp, pns_comp_for2, pn_inner_expr, for_depth + 1);
    8f4e:	683b      	ldr	r3, [r7, #0]
    8f50:	3301      	adds	r3, #1
    8f52:	687a      	ldr	r2, [r7, #4]
    8f54:	6979      	ldr	r1, [r7, #20]
    8f56:	68f8      	ldr	r0, [r7, #12]
    8f58:	f7ff ff84 	bl	8e64 <compile_scope_comp_iter>
    }

    EMIT_ARG(jump, l_top);
    8f5c:	68fb      	ldr	r3, [r7, #12]
    8f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f60:	6a39      	ldr	r1, [r7, #32]
    8f62:	4618      	mov	r0, r3
    8f64:	f001 fc1e 	bl	a7a4 <mp_emit_bc_jump>
    EMIT_ARG(label_assign, l_end);
    8f68:	68fb      	ldr	r3, [r7, #12]
    8f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f6c:	69f9      	ldr	r1, [r7, #28]
    8f6e:	4618      	mov	r0, r3
    8f70:	f001 f98a 	bl	a288 <mp_emit_bc_label_assign>
    EMIT(for_iter_end);
    8f74:	68fb      	ldr	r3, [r7, #12]
    8f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f78:	4618      	mov	r0, r3
    8f7a:	f001 fd2d 	bl	a9d8 <mp_emit_bc_for_iter_end>
}
    8f7e:	bf00      	nop
    8f80:	3728      	adds	r7, #40	; 0x28
    8f82:	46bd      	mov	sp, r7
    8f84:	bd80      	pop	{r7, pc}
    8f86:	bf00      	nop
    8f88:	00020d44 	.word	0x00020d44
    8f8c:	00021118 	.word	0x00021118
    8f90:	00020358 	.word	0x00020358

00008f94 <check_for_doc_string>:

STATIC void check_for_doc_string(compiler_t *comp, mp_parse_node_t pn) {
    8f94:	b480      	push	{r7}
    8f96:	b083      	sub	sp, #12
    8f98:	af00      	add	r7, sp, #0
    8f9a:	6078      	str	r0, [r7, #4]
    8f9c:	6039      	str	r1, [r7, #0]
    }
#else
    (void)comp;
    (void)pn;
#endif
}
    8f9e:	bf00      	nop
    8fa0:	370c      	adds	r7, #12
    8fa2:	46bd      	mov	sp, r7
    8fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fa8:	4770      	bx	lr
    8faa:	bf00      	nop

00008fac <compile_scope>:

STATIC void compile_scope(compiler_t *comp, scope_t *scope, pass_kind_t pass) {
    8fac:	b580      	push	{r7, lr}
    8fae:	b08c      	sub	sp, #48	; 0x30
    8fb0:	af00      	add	r7, sp, #0
    8fb2:	60f8      	str	r0, [r7, #12]
    8fb4:	60b9      	str	r1, [r7, #8]
    8fb6:	607a      	str	r2, [r7, #4]
    comp->pass = pass;
    8fb8:	687b      	ldr	r3, [r7, #4]
    8fba:	b2da      	uxtb	r2, r3
    8fbc:	68fb      	ldr	r3, [r7, #12]
    8fbe:	715a      	strb	r2, [r3, #5]
    comp->scope_cur = scope;
    8fc0:	68fb      	ldr	r3, [r7, #12]
    8fc2:	68ba      	ldr	r2, [r7, #8]
    8fc4:	625a      	str	r2, [r3, #36]	; 0x24
    comp->next_label = 0;
    8fc6:	68fb      	ldr	r3, [r7, #12]
    8fc8:	2200      	movs	r2, #0
    8fca:	611a      	str	r2, [r3, #16]
    EMIT_ARG(start_pass, pass, scope);
    8fcc:	68fb      	ldr	r3, [r7, #12]
    8fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8fd0:	68ba      	ldr	r2, [r7, #8]
    8fd2:	6879      	ldr	r1, [r7, #4]
    8fd4:	4618      	mov	r0, r3
    8fd6:	f000 ff99 	bl	9f0c <mp_emit_bc_start_pass>
    reserve_labels_for_native(comp, 6); // used by native's start_pass

    if (comp->pass == MP_PASS_SCOPE) {
    8fda:	68fb      	ldr	r3, [r7, #12]
    8fdc:	795b      	ldrb	r3, [r3, #5]
    8fde:	2b01      	cmp	r3, #1
    8fe0:	d105      	bne.n	8fee <compile_scope+0x42>
        // reset maximum stack sizes in scope
        // they will be computed in this first pass
        scope->stack_size = 0;
    8fe2:	68bb      	ldr	r3, [r7, #8]
    8fe4:	2200      	movs	r2, #0
    8fe6:	849a      	strh	r2, [r3, #36]	; 0x24
        scope->exc_stack_size = 0;
    8fe8:	68bb      	ldr	r3, [r7, #8]
    8fea:	2200      	movs	r2, #0
    8fec:	84da      	strh	r2, [r3, #38]	; 0x26
    }

    // compile
    if (MP_PARSE_NODE_IS_STRUCT_KIND(scope->pn, PN_eval_input)) {
    8fee:	68bb      	ldr	r3, [r7, #8]
    8ff0:	68db      	ldr	r3, [r3, #12]
    8ff2:	2b00      	cmp	r3, #0
    8ff4:	d025      	beq.n	9042 <compile_scope+0x96>
    8ff6:	68bb      	ldr	r3, [r7, #8]
    8ff8:	68db      	ldr	r3, [r3, #12]
    8ffa:	f003 0303 	and.w	r3, r3, #3
    8ffe:	2b00      	cmp	r3, #0
    9000:	d11f      	bne.n	9042 <compile_scope+0x96>
    9002:	68bb      	ldr	r3, [r7, #8]
    9004:	68db      	ldr	r3, [r3, #12]
    9006:	685b      	ldr	r3, [r3, #4]
    9008:	b2db      	uxtb	r3, r3
    900a:	2b38      	cmp	r3, #56	; 0x38
    900c:	d119      	bne.n	9042 <compile_scope+0x96>
        assert(scope->kind == SCOPE_MODULE);
    900e:	68bb      	ldr	r3, [r7, #8]
    9010:	681b      	ldr	r3, [r3, #0]
    9012:	2b00      	cmp	r3, #0
    9014:	d006      	beq.n	9024 <compile_scope+0x78>
    9016:	4b9e      	ldr	r3, [pc, #632]	; (9290 <compile_scope+0x2e4>)
    9018:	4a9e      	ldr	r2, [pc, #632]	; (9294 <compile_scope+0x2e8>)
    901a:	f640 3194 	movw	r1, #2964	; 0xb94
    901e:	489e      	ldr	r0, [pc, #632]	; (9298 <compile_scope+0x2ec>)
    9020:	f012 fbb0 	bl	1b784 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    9024:	68bb      	ldr	r3, [r7, #8]
    9026:	68db      	ldr	r3, [r3, #12]
    9028:	62fb      	str	r3, [r7, #44]	; 0x2c
        compile_node(comp, pns->nodes[0]); // compile the expression
    902a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    902c:	689b      	ldr	r3, [r3, #8]
    902e:	4619      	mov	r1, r3
    9030:	68f8      	ldr	r0, [r7, #12]
    9032:	f7ff fd57 	bl	8ae4 <compile_node>
        EMIT(return_value);
    9036:	68fb      	ldr	r3, [r7, #12]
    9038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    903a:	4618      	mov	r0, r3
    903c:	f001 fea6 	bl	ad8c <mp_emit_bc_return_value>
    if (MP_PARSE_NODE_IS_STRUCT_KIND(scope->pn, PN_eval_input)) {
    9040:	e1fb      	b.n	943a <compile_scope+0x48e>
    } else if (scope->kind == SCOPE_MODULE) {
    9042:	68bb      	ldr	r3, [r7, #8]
    9044:	681b      	ldr	r3, [r3, #0]
    9046:	2b00      	cmp	r3, #0
    9048:	d11b      	bne.n	9082 <compile_scope+0xd6>
        if (!comp->is_repl) {
    904a:	68fb      	ldr	r3, [r7, #12]
    904c:	791b      	ldrb	r3, [r3, #4]
    904e:	2b00      	cmp	r3, #0
    9050:	d105      	bne.n	905e <compile_scope+0xb2>
            check_for_doc_string(comp, scope->pn);
    9052:	68bb      	ldr	r3, [r7, #8]
    9054:	68db      	ldr	r3, [r3, #12]
    9056:	4619      	mov	r1, r3
    9058:	68f8      	ldr	r0, [r7, #12]
    905a:	f7ff ff9b 	bl	8f94 <check_for_doc_string>
        }
        compile_node(comp, scope->pn);
    905e:	68bb      	ldr	r3, [r7, #8]
    9060:	68db      	ldr	r3, [r3, #12]
    9062:	4619      	mov	r1, r3
    9064:	68f8      	ldr	r0, [r7, #12]
    9066:	f7ff fd3d 	bl	8ae4 <compile_node>
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    906a:	68fb      	ldr	r3, [r7, #12]
    906c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    906e:	210e      	movs	r1, #14
    9070:	4618      	mov	r0, r3
    9072:	f001 f987 	bl	a384 <mp_emit_bc_load_const_tok>
        EMIT(return_value);
    9076:	68fb      	ldr	r3, [r7, #12]
    9078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    907a:	4618      	mov	r0, r3
    907c:	f001 fe86 	bl	ad8c <mp_emit_bc_return_value>
    9080:	e1db      	b.n	943a <compile_scope+0x48e>
    } else if (scope->kind == SCOPE_FUNCTION) {
    9082:	68bb      	ldr	r3, [r7, #8]
    9084:	681b      	ldr	r3, [r3, #0]
    9086:	2b07      	cmp	r3, #7
    9088:	d14b      	bne.n	9122 <compile_scope+0x176>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    908a:	68bb      	ldr	r3, [r7, #8]
    908c:	68db      	ldr	r3, [r3, #12]
    908e:	2b00      	cmp	r3, #0
    9090:	d005      	beq.n	909e <compile_scope+0xf2>
    9092:	68bb      	ldr	r3, [r7, #8]
    9094:	68db      	ldr	r3, [r3, #12]
    9096:	f003 0303 	and.w	r3, r3, #3
    909a:	2b00      	cmp	r3, #0
    909c:	d006      	beq.n	90ac <compile_scope+0x100>
    909e:	4b7f      	ldr	r3, [pc, #508]	; (929c <compile_scope+0x2f0>)
    90a0:	4a7c      	ldr	r2, [pc, #496]	; (9294 <compile_scope+0x2e8>)
    90a2:	f44f 613a 	mov.w	r1, #2976	; 0xba0
    90a6:	487c      	ldr	r0, [pc, #496]	; (9298 <compile_scope+0x2ec>)
    90a8:	f012 fb6c 	bl	1b784 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    90ac:	68bb      	ldr	r3, [r7, #8]
    90ae:	68db      	ldr	r3, [r3, #12]
    90b0:	62bb      	str	r3, [r7, #40]	; 0x28
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) == PN_funcdef);
    90b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    90b4:	685b      	ldr	r3, [r3, #4]
    90b6:	b2db      	uxtb	r3, r3
    90b8:	2b03      	cmp	r3, #3
    90ba:	d006      	beq.n	90ca <compile_scope+0x11e>
    90bc:	4b78      	ldr	r3, [pc, #480]	; (92a0 <compile_scope+0x2f4>)
    90be:	4a75      	ldr	r2, [pc, #468]	; (9294 <compile_scope+0x2e8>)
    90c0:	f640 31a2 	movw	r1, #2978	; 0xba2
    90c4:	4874      	ldr	r0, [pc, #464]	; (9298 <compile_scope+0x2ec>)
    90c6:	f012 fb5d 	bl	1b784 <__assert_func>

        // work out number of parameters, keywords and default parameters, and add them to the id_info array
        // must be done before compiling the body so that arguments are numbered first (for LOAD_FAST etc)
        if (comp->pass == MP_PASS_SCOPE) {
    90ca:	68fb      	ldr	r3, [r7, #12]
    90cc:	795b      	ldrb	r3, [r3, #5]
    90ce:	2b01      	cmp	r3, #1
    90d0:	d109      	bne.n	90e6 <compile_scope+0x13a>
            comp->have_star = false;
    90d2:	68fb      	ldr	r3, [r7, #12]
    90d4:	2200      	movs	r2, #0
    90d6:	719a      	strb	r2, [r3, #6]
            apply_to_single_or_list(comp, pns->nodes[1], PN_typedargslist, compile_scope_func_param);
    90d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    90da:	68d9      	ldr	r1, [r3, #12]
    90dc:	4b71      	ldr	r3, [pc, #452]	; (92a4 <compile_scope+0x2f8>)
    90de:	223e      	movs	r2, #62	; 0x3e
    90e0:	68f8      	ldr	r0, [r7, #12]
    90e2:	f7fb ffbf 	bl	5064 <apply_to_single_or_list>
                scope->scope_flags |= compile_viper_type_annotation(comp, pns->nodes[2]) << MP_SCOPE_FLAG_VIPERRET_POS;
            }
            #endif // MICROPY_EMIT_NATIVE
        }

        compile_node(comp, pns->nodes[3]); // 3 is function body
    90e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    90e8:	695b      	ldr	r3, [r3, #20]
    90ea:	4619      	mov	r1, r3
    90ec:	68f8      	ldr	r0, [r7, #12]
    90ee:	f7ff fcf9 	bl	8ae4 <compile_node>
        // emit return if it wasn't the last opcode
        if (!EMIT(last_emit_was_return_value)) {
    90f2:	68fb      	ldr	r3, [r7, #12]
    90f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    90f6:	4618      	mov	r0, r3
    90f8:	f001 f862 	bl	a1c0 <mp_emit_bc_last_emit_was_return_value>
    90fc:	4603      	mov	r3, r0
    90fe:	f083 0301 	eor.w	r3, r3, #1
    9102:	b2db      	uxtb	r3, r3
    9104:	2b00      	cmp	r3, #0
    9106:	f000 8198 	beq.w	943a <compile_scope+0x48e>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    910a:	68fb      	ldr	r3, [r7, #12]
    910c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    910e:	210e      	movs	r1, #14
    9110:	4618      	mov	r0, r3
    9112:	f001 f937 	bl	a384 <mp_emit_bc_load_const_tok>
            EMIT(return_value);
    9116:	68fb      	ldr	r3, [r7, #12]
    9118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    911a:	4618      	mov	r0, r3
    911c:	f001 fe36 	bl	ad8c <mp_emit_bc_return_value>
    9120:	e18b      	b.n	943a <compile_scope+0x48e>
        }
    } else if (scope->kind == SCOPE_LAMBDA) {
    9122:	68bb      	ldr	r3, [r7, #8]
    9124:	681b      	ldr	r3, [r3, #0]
    9126:	2b02      	cmp	r3, #2
    9128:	d14a      	bne.n	91c0 <compile_scope+0x214>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    912a:	68bb      	ldr	r3, [r7, #8]
    912c:	68db      	ldr	r3, [r3, #12]
    912e:	2b00      	cmp	r3, #0
    9130:	d005      	beq.n	913e <compile_scope+0x192>
    9132:	68bb      	ldr	r3, [r7, #8]
    9134:	68db      	ldr	r3, [r3, #12]
    9136:	f003 0303 	and.w	r3, r3, #3
    913a:	2b00      	cmp	r3, #0
    913c:	d006      	beq.n	914c <compile_scope+0x1a0>
    913e:	4b57      	ldr	r3, [pc, #348]	; (929c <compile_scope+0x2f0>)
    9140:	4a54      	ldr	r2, [pc, #336]	; (9294 <compile_scope+0x2e8>)
    9142:	f640 31b9 	movw	r1, #3001	; 0xbb9
    9146:	4854      	ldr	r0, [pc, #336]	; (9298 <compile_scope+0x2ec>)
    9148:	f012 fb1c 	bl	1b784 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    914c:	68bb      	ldr	r3, [r7, #8]
    914e:	68db      	ldr	r3, [r3, #12]
    9150:	627b      	str	r3, [r7, #36]	; 0x24
        assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 3);
    9152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9154:	685b      	ldr	r3, [r3, #4]
    9156:	0a1b      	lsrs	r3, r3, #8
    9158:	2b03      	cmp	r3, #3
    915a:	d006      	beq.n	916a <compile_scope+0x1be>
    915c:	4b52      	ldr	r3, [pc, #328]	; (92a8 <compile_scope+0x2fc>)
    915e:	4a4d      	ldr	r2, [pc, #308]	; (9294 <compile_scope+0x2e8>)
    9160:	f640 31bb 	movw	r1, #3003	; 0xbbb
    9164:	484c      	ldr	r0, [pc, #304]	; (9298 <compile_scope+0x2ec>)
    9166:	f012 fb0d 	bl	1b784 <__assert_func>

        // work out number of parameters, keywords and default parameters, and add them to the id_info array
        // must be done before compiling the body so that arguments are numbered first (for LOAD_FAST etc)
        if (comp->pass == MP_PASS_SCOPE) {
    916a:	68fb      	ldr	r3, [r7, #12]
    916c:	795b      	ldrb	r3, [r3, #5]
    916e:	2b01      	cmp	r3, #1
    9170:	d109      	bne.n	9186 <compile_scope+0x1da>
            comp->have_star = false;
    9172:	68fb      	ldr	r3, [r7, #12]
    9174:	2200      	movs	r2, #0
    9176:	719a      	strb	r2, [r3, #6]
            apply_to_single_or_list(comp, pns->nodes[0], PN_varargslist, compile_scope_lambda_param);
    9178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    917a:	6899      	ldr	r1, [r3, #8]
    917c:	4b4b      	ldr	r3, [pc, #300]	; (92ac <compile_scope+0x300>)
    917e:	2246      	movs	r2, #70	; 0x46
    9180:	68f8      	ldr	r0, [r7, #12]
    9182:	f7fb ff6f 	bl	5064 <apply_to_single_or_list>
        }

        compile_node(comp, pns->nodes[1]); // 1 is lambda body
    9186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9188:	68db      	ldr	r3, [r3, #12]
    918a:	4619      	mov	r1, r3
    918c:	68f8      	ldr	r0, [r7, #12]
    918e:	f7ff fca9 	bl	8ae4 <compile_node>

        // if the lambda is a generator, then we return None, not the result of the expression of the lambda
        if (scope->scope_flags & MP_SCOPE_FLAG_GENERATOR) {
    9192:	68bb      	ldr	r3, [r7, #8]
    9194:	8b1b      	ldrh	r3, [r3, #24]
    9196:	f003 0304 	and.w	r3, r3, #4
    919a:	2b00      	cmp	r3, #0
    919c:	d00a      	beq.n	91b4 <compile_scope+0x208>
            EMIT(pop_top);
    919e:	68fb      	ldr	r3, [r7, #12]
    91a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    91a2:	4618      	mov	r0, r3
    91a4:	f001 facc 	bl	a740 <mp_emit_bc_pop_top>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    91a8:	68fb      	ldr	r3, [r7, #12]
    91aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    91ac:	210e      	movs	r1, #14
    91ae:	4618      	mov	r0, r3
    91b0:	f001 f8e8 	bl	a384 <mp_emit_bc_load_const_tok>
        }
        EMIT(return_value);
    91b4:	68fb      	ldr	r3, [r7, #12]
    91b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    91b8:	4618      	mov	r0, r3
    91ba:	f001 fde7 	bl	ad8c <mp_emit_bc_return_value>
    91be:	e13c      	b.n	943a <compile_scope+0x48e>
    } else if (scope->kind == SCOPE_LIST_COMP || scope->kind == SCOPE_DICT_COMP || scope->kind == SCOPE_SET_COMP || scope->kind == SCOPE_GEN_EXPR) {
    91c0:	68bb      	ldr	r3, [r7, #8]
    91c2:	681b      	ldr	r3, [r3, #0]
    91c4:	2b03      	cmp	r3, #3
    91c6:	d00c      	beq.n	91e2 <compile_scope+0x236>
    91c8:	68bb      	ldr	r3, [r7, #8]
    91ca:	681b      	ldr	r3, [r3, #0]
    91cc:	2b04      	cmp	r3, #4
    91ce:	d008      	beq.n	91e2 <compile_scope+0x236>
    91d0:	68bb      	ldr	r3, [r7, #8]
    91d2:	681b      	ldr	r3, [r3, #0]
    91d4:	2b05      	cmp	r3, #5
    91d6:	d004      	beq.n	91e2 <compile_scope+0x236>
    91d8:	68bb      	ldr	r3, [r7, #8]
    91da:	681b      	ldr	r3, [r3, #0]
    91dc:	2b06      	cmp	r3, #6
    91de:	f040 80af 	bne.w	9340 <compile_scope+0x394>
        // a bit of a hack at the moment

        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    91e2:	68bb      	ldr	r3, [r7, #8]
    91e4:	68db      	ldr	r3, [r3, #12]
    91e6:	2b00      	cmp	r3, #0
    91e8:	d005      	beq.n	91f6 <compile_scope+0x24a>
    91ea:	68bb      	ldr	r3, [r7, #8]
    91ec:	68db      	ldr	r3, [r3, #12]
    91ee:	f003 0303 	and.w	r3, r3, #3
    91f2:	2b00      	cmp	r3, #0
    91f4:	d006      	beq.n	9204 <compile_scope+0x258>
    91f6:	4b29      	ldr	r3, [pc, #164]	; (929c <compile_scope+0x2f0>)
    91f8:	4a26      	ldr	r2, [pc, #152]	; (9294 <compile_scope+0x2e8>)
    91fa:	f640 31cf 	movw	r1, #3023	; 0xbcf
    91fe:	4826      	ldr	r0, [pc, #152]	; (9298 <compile_scope+0x2ec>)
    9200:	f012 fac0 	bl	1b784 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    9204:	68bb      	ldr	r3, [r7, #8]
    9206:	68db      	ldr	r3, [r3, #12]
    9208:	61bb      	str	r3, [r7, #24]
        assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 2);
    920a:	69bb      	ldr	r3, [r7, #24]
    920c:	685b      	ldr	r3, [r3, #4]
    920e:	0a1b      	lsrs	r3, r3, #8
    9210:	2b02      	cmp	r3, #2
    9212:	d006      	beq.n	9222 <compile_scope+0x276>
    9214:	4b26      	ldr	r3, [pc, #152]	; (92b0 <compile_scope+0x304>)
    9216:	4a1f      	ldr	r2, [pc, #124]	; (9294 <compile_scope+0x2e8>)
    9218:	f640 31d1 	movw	r1, #3025	; 0xbd1
    921c:	481e      	ldr	r0, [pc, #120]	; (9298 <compile_scope+0x2ec>)
    921e:	f012 fab1 	bl	1b784 <__assert_func>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_comp_for));
    9222:	69bb      	ldr	r3, [r7, #24]
    9224:	68db      	ldr	r3, [r3, #12]
    9226:	2b00      	cmp	r3, #0
    9228:	d00b      	beq.n	9242 <compile_scope+0x296>
    922a:	69bb      	ldr	r3, [r7, #24]
    922c:	68db      	ldr	r3, [r3, #12]
    922e:	f003 0303 	and.w	r3, r3, #3
    9232:	2b00      	cmp	r3, #0
    9234:	d105      	bne.n	9242 <compile_scope+0x296>
    9236:	69bb      	ldr	r3, [r7, #24]
    9238:	68db      	ldr	r3, [r3, #12]
    923a:	685b      	ldr	r3, [r3, #4]
    923c:	b2db      	uxtb	r3, r3
    923e:	2b9f      	cmp	r3, #159	; 0x9f
    9240:	d006      	beq.n	9250 <compile_scope+0x2a4>
    9242:	4b1c      	ldr	r3, [pc, #112]	; (92b4 <compile_scope+0x308>)
    9244:	4a13      	ldr	r2, [pc, #76]	; (9294 <compile_scope+0x2e8>)
    9246:	f640 31d2 	movw	r1, #3026	; 0xbd2
    924a:	4813      	ldr	r0, [pc, #76]	; (9298 <compile_scope+0x2ec>)
    924c:	f012 fa9a 	bl	1b784 <__assert_func>
        mp_parse_node_struct_t *pns_comp_for = (mp_parse_node_struct_t*)pns->nodes[1];
    9250:	69bb      	ldr	r3, [r7, #24]
    9252:	68db      	ldr	r3, [r3, #12]
    9254:	617b      	str	r3, [r7, #20]

        // We need a unique name for the comprehension argument (the iterator).
        // CPython uses .0, but we should be able to use anything that won't
        // clash with a user defined variable.  Best to use an existing qstr,
        // so we use the blank qstr.
        qstr qstr_arg = MP_QSTR_;
    9256:	2301      	movs	r3, #1
    9258:	613b      	str	r3, [r7, #16]
        if (comp->pass == MP_PASS_SCOPE) {
    925a:	68fb      	ldr	r3, [r7, #12]
    925c:	795b      	ldrb	r3, [r3, #5]
    925e:	2b01      	cmp	r3, #1
    9260:	d109      	bne.n	9276 <compile_scope+0x2ca>
            scope_find_or_add_id(comp->scope_cur, qstr_arg, ID_INFO_KIND_LOCAL);
    9262:	68fb      	ldr	r3, [r7, #12]
    9264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9266:	2203      	movs	r2, #3
    9268:	6939      	ldr	r1, [r7, #16]
    926a:	4618      	mov	r0, r3
    926c:	f7fb fd02 	bl	4c74 <scope_find_or_add_id>
            scope->num_pos_args = 1;
    9270:	68bb      	ldr	r3, [r7, #8]
    9272:	2201      	movs	r2, #1
    9274:	839a      	strh	r2, [r3, #28]
        }

        if (scope->kind == SCOPE_LIST_COMP) {
    9276:	68bb      	ldr	r3, [r7, #8]
    9278:	681b      	ldr	r3, [r3, #0]
    927a:	2b03      	cmp	r3, #3
    927c:	d11c      	bne.n	92b8 <compile_scope+0x30c>
            EMIT_ARG(build, 0, MP_EMIT_BUILD_LIST);
    927e:	68fb      	ldr	r3, [r7, #12]
    9280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9282:	2201      	movs	r2, #1
    9284:	2100      	movs	r1, #0
    9286:	4618      	mov	r0, r3
    9288:	f001 fc1c 	bl	aac4 <mp_emit_bc_build>
    928c:	e01f      	b.n	92ce <compile_scope+0x322>
    928e:	bf00      	nop
    9290:	00020d90 	.word	0x00020d90
    9294:	00021130 	.word	0x00021130
    9298:	00020358 	.word	0x00020358
    929c:	00020dac 	.word	0x00020dac
    92a0:	00020dd0 	.word	0x00020dd0
    92a4:	00008e1d 	.word	0x00008e1d
    92a8:	00020e00 	.word	0x00020e00
    92ac:	00008e41 	.word	0x00008e41
    92b0:	00020aa0 	.word	0x00020aa0
    92b4:	00020acc 	.word	0x00020acc
        } else if (scope->kind == SCOPE_DICT_COMP) {
    92b8:	68bb      	ldr	r3, [r7, #8]
    92ba:	681b      	ldr	r3, [r3, #0]
    92bc:	2b04      	cmp	r3, #4
    92be:	d106      	bne.n	92ce <compile_scope+0x322>
            EMIT_ARG(build, 0, MP_EMIT_BUILD_MAP);
    92c0:	68fb      	ldr	r3, [r7, #12]
    92c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    92c4:	2203      	movs	r2, #3
    92c6:	2100      	movs	r1, #0
    92c8:	4618      	mov	r0, r3
    92ca:	f001 fbfb 	bl	aac4 <mp_emit_bc_build>
        #endif
        }

        // There are 4 slots on the stack for the iterator, and the first one is
        // NULL to indicate that the second one points to the iterator object.
        if (scope->kind == SCOPE_GEN_EXPR) {
    92ce:	68bb      	ldr	r3, [r7, #8]
    92d0:	681b      	ldr	r3, [r3, #0]
    92d2:	2b06      	cmp	r3, #6
    92d4:	d113      	bne.n	92fe <compile_scope+0x352>
            MP_STATIC_ASSERT(MP_OBJ_ITER_BUF_NSLOTS == 4);
            EMIT(load_null);
    92d6:	68fb      	ldr	r3, [r7, #12]
    92d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    92da:	4618      	mov	r0, r3
    92dc:	f001 f8d4 	bl	a488 <mp_emit_bc_load_null>
            compile_load_id(comp, qstr_arg);
    92e0:	6939      	ldr	r1, [r7, #16]
    92e2:	68f8      	ldr	r0, [r7, #12]
    92e4:	f7fb ff28 	bl	5138 <compile_load_id>
            EMIT(load_null);
    92e8:	68fb      	ldr	r3, [r7, #12]
    92ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    92ec:	4618      	mov	r0, r3
    92ee:	f001 f8cb 	bl	a488 <mp_emit_bc_load_null>
            EMIT(load_null);
    92f2:	68fb      	ldr	r3, [r7, #12]
    92f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    92f6:	4618      	mov	r0, r3
    92f8:	f001 f8c6 	bl	a488 <mp_emit_bc_load_null>
    92fc:	e009      	b.n	9312 <compile_scope+0x366>
        } else {
            compile_load_id(comp, qstr_arg);
    92fe:	6939      	ldr	r1, [r7, #16]
    9300:	68f8      	ldr	r0, [r7, #12]
    9302:	f7fb ff19 	bl	5138 <compile_load_id>
            EMIT_ARG(get_iter, true);
    9306:	68fb      	ldr	r3, [r7, #12]
    9308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    930a:	2101      	movs	r1, #1
    930c:	4618      	mov	r0, r3
    930e:	f001 fb33 	bl	a978 <mp_emit_bc_get_iter>
        }

        compile_scope_comp_iter(comp, pns_comp_for, pns->nodes[0], 0);
    9312:	69bb      	ldr	r3, [r7, #24]
    9314:	689a      	ldr	r2, [r3, #8]
    9316:	2300      	movs	r3, #0
    9318:	6979      	ldr	r1, [r7, #20]
    931a:	68f8      	ldr	r0, [r7, #12]
    931c:	f7ff fda2 	bl	8e64 <compile_scope_comp_iter>

        if (scope->kind == SCOPE_GEN_EXPR) {
    9320:	68bb      	ldr	r3, [r7, #8]
    9322:	681b      	ldr	r3, [r3, #0]
    9324:	2b06      	cmp	r3, #6
    9326:	d105      	bne.n	9334 <compile_scope+0x388>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    9328:	68fb      	ldr	r3, [r7, #12]
    932a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    932c:	210e      	movs	r1, #14
    932e:	4618      	mov	r0, r3
    9330:	f001 f828 	bl	a384 <mp_emit_bc_load_const_tok>
        }
        EMIT(return_value);
    9334:	68fb      	ldr	r3, [r7, #12]
    9336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9338:	4618      	mov	r0, r3
    933a:	f001 fd27 	bl	ad8c <mp_emit_bc_return_value>
    } else if (scope->kind == SCOPE_LIST_COMP || scope->kind == SCOPE_DICT_COMP || scope->kind == SCOPE_SET_COMP || scope->kind == SCOPE_GEN_EXPR) {
    933e:	e07c      	b.n	943a <compile_scope+0x48e>
    } else {
        assert(scope->kind == SCOPE_CLASS);
    9340:	68bb      	ldr	r3, [r7, #8]
    9342:	681b      	ldr	r3, [r3, #0]
    9344:	2b01      	cmp	r3, #1
    9346:	d006      	beq.n	9356 <compile_scope+0x3aa>
    9348:	4b46      	ldr	r3, [pc, #280]	; (9464 <compile_scope+0x4b8>)
    934a:	4a47      	ldr	r2, [pc, #284]	; (9468 <compile_scope+0x4bc>)
    934c:	f640 31fd 	movw	r1, #3069	; 0xbfd
    9350:	4846      	ldr	r0, [pc, #280]	; (946c <compile_scope+0x4c0>)
    9352:	f012 fa17 	bl	1b784 <__assert_func>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    9356:	68bb      	ldr	r3, [r7, #8]
    9358:	68db      	ldr	r3, [r3, #12]
    935a:	2b00      	cmp	r3, #0
    935c:	d005      	beq.n	936a <compile_scope+0x3be>
    935e:	68bb      	ldr	r3, [r7, #8]
    9360:	68db      	ldr	r3, [r3, #12]
    9362:	f003 0303 	and.w	r3, r3, #3
    9366:	2b00      	cmp	r3, #0
    9368:	d006      	beq.n	9378 <compile_scope+0x3cc>
    936a:	4b41      	ldr	r3, [pc, #260]	; (9470 <compile_scope+0x4c4>)
    936c:	4a3e      	ldr	r2, [pc, #248]	; (9468 <compile_scope+0x4bc>)
    936e:	f640 31fe 	movw	r1, #3070	; 0xbfe
    9372:	483e      	ldr	r0, [pc, #248]	; (946c <compile_scope+0x4c0>)
    9374:	f012 fa06 	bl	1b784 <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    9378:	68bb      	ldr	r3, [r7, #8]
    937a:	68db      	ldr	r3, [r3, #12]
    937c:	623b      	str	r3, [r7, #32]
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) == PN_classdef);
    937e:	6a3b      	ldr	r3, [r7, #32]
    9380:	685b      	ldr	r3, [r3, #4]
    9382:	b2db      	uxtb	r3, r3
    9384:	2b33      	cmp	r3, #51	; 0x33
    9386:	d006      	beq.n	9396 <compile_scope+0x3ea>
    9388:	4b3a      	ldr	r3, [pc, #232]	; (9474 <compile_scope+0x4c8>)
    938a:	4a37      	ldr	r2, [pc, #220]	; (9468 <compile_scope+0x4bc>)
    938c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    9390:	4836      	ldr	r0, [pc, #216]	; (946c <compile_scope+0x4c0>)
    9392:	f012 f9f7 	bl	1b784 <__assert_func>

        if (comp->pass == MP_PASS_SCOPE) {
    9396:	68fb      	ldr	r3, [r7, #12]
    9398:	795b      	ldrb	r3, [r3, #5]
    939a:	2b01      	cmp	r3, #1
    939c:	d104      	bne.n	93a8 <compile_scope+0x3fc>
            scope_find_or_add_id(scope, MP_QSTR___class__, ID_INFO_KIND_LOCAL);
    939e:	2203      	movs	r2, #3
    93a0:	2106      	movs	r1, #6
    93a2:	68b8      	ldr	r0, [r7, #8]
    93a4:	f7fb fc66 	bl	4c74 <scope_find_or_add_id>
        }

        compile_load_id(comp, MP_QSTR___name__);
    93a8:	211d      	movs	r1, #29
    93aa:	68f8      	ldr	r0, [r7, #12]
    93ac:	f7fb fec4 	bl	5138 <compile_load_id>
        compile_store_id(comp, MP_QSTR___module__);
    93b0:	211c      	movs	r1, #28
    93b2:	68f8      	ldr	r0, [r7, #12]
    93b4:	f7fb fede 	bl	5174 <compile_store_id>
        EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pns->nodes[0])); // 0 is class name
    93b8:	68fb      	ldr	r3, [r7, #12]
    93ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    93bc:	6a3b      	ldr	r3, [r7, #32]
    93be:	689b      	ldr	r3, [r3, #8]
    93c0:	091b      	lsrs	r3, r3, #4
    93c2:	4619      	mov	r1, r3
    93c4:	4610      	mov	r0, r2
    93c6:	f001 f83b 	bl	a440 <mp_emit_bc_load_const_str>
        compile_store_id(comp, MP_QSTR___qualname__);
    93ca:	2121      	movs	r1, #33	; 0x21
    93cc:	68f8      	ldr	r0, [r7, #12]
    93ce:	f7fb fed1 	bl	5174 <compile_store_id>

        check_for_doc_string(comp, pns->nodes[2]);
    93d2:	6a3b      	ldr	r3, [r7, #32]
    93d4:	691b      	ldr	r3, [r3, #16]
    93d6:	4619      	mov	r1, r3
    93d8:	68f8      	ldr	r0, [r7, #12]
    93da:	f7ff fddb 	bl	8f94 <check_for_doc_string>
        compile_node(comp, pns->nodes[2]); // 2 is class body
    93de:	6a3b      	ldr	r3, [r7, #32]
    93e0:	691b      	ldr	r3, [r3, #16]
    93e2:	4619      	mov	r1, r3
    93e4:	68f8      	ldr	r0, [r7, #12]
    93e6:	f7ff fb7d 	bl	8ae4 <compile_node>

        id_info_t *id = scope_find(scope, MP_QSTR___class__);
    93ea:	2106      	movs	r1, #6
    93ec:	68b8      	ldr	r0, [r7, #8]
    93ee:	f7fb fc87 	bl	4d00 <scope_find>
    93f2:	61f8      	str	r0, [r7, #28]
        assert(id != NULL);
    93f4:	69fb      	ldr	r3, [r7, #28]
    93f6:	2b00      	cmp	r3, #0
    93f8:	d106      	bne.n	9408 <compile_scope+0x45c>
    93fa:	4b1f      	ldr	r3, [pc, #124]	; (9478 <compile_scope+0x4cc>)
    93fc:	4a1a      	ldr	r2, [pc, #104]	; (9468 <compile_scope+0x4bc>)
    93fe:	f640 410f 	movw	r1, #3087	; 0xc0f
    9402:	481a      	ldr	r0, [pc, #104]	; (946c <compile_scope+0x4c0>)
    9404:	f012 f9be 	bl	1b784 <__assert_func>
        if (id->kind == ID_INFO_KIND_LOCAL) {
    9408:	69fb      	ldr	r3, [r7, #28]
    940a:	781b      	ldrb	r3, [r3, #0]
    940c:	2b03      	cmp	r3, #3
    940e:	d106      	bne.n	941e <compile_scope+0x472>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    9410:	68fb      	ldr	r3, [r7, #12]
    9412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9414:	210e      	movs	r1, #14
    9416:	4618      	mov	r0, r3
    9418:	f000 ffb4 	bl	a384 <mp_emit_bc_load_const_tok>
    941c:	e008      	b.n	9430 <compile_scope+0x484>
        } else {
            EMIT_LOAD_FAST(MP_QSTR___class__, id->local_num);
    941e:	68fb      	ldr	r3, [r7, #12]
    9420:	6a98      	ldr	r0, [r3, #40]	; 0x28
    9422:	69fb      	ldr	r3, [r7, #28]
    9424:	885b      	ldrh	r3, [r3, #2]
    9426:	461a      	mov	r2, r3
    9428:	2300      	movs	r3, #0
    942a:	2106      	movs	r1, #6
    942c:	f001 f83c 	bl	a4a8 <mp_emit_bc_load_local>
        }
        EMIT(return_value);
    9430:	68fb      	ldr	r3, [r7, #12]
    9432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9434:	4618      	mov	r0, r3
    9436:	f001 fca9 	bl	ad8c <mp_emit_bc_return_value>
    }

    EMIT(end_pass);
    943a:	68fb      	ldr	r3, [r7, #12]
    943c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    943e:	4618      	mov	r0, r3
    9440:	f000 fe5e 	bl	a100 <mp_emit_bc_end_pass>

    // make sure we match all the exception levels
    assert(comp->cur_except_level == 0);
    9444:	68fb      	ldr	r3, [r7, #12]
    9446:	8b9b      	ldrh	r3, [r3, #28]
    9448:	2b00      	cmp	r3, #0
    944a:	d006      	beq.n	945a <compile_scope+0x4ae>
    944c:	4b0b      	ldr	r3, [pc, #44]	; (947c <compile_scope+0x4d0>)
    944e:	4a06      	ldr	r2, [pc, #24]	; (9468 <compile_scope+0x4bc>)
    9450:	f640 411b 	movw	r1, #3099	; 0xc1b
    9454:	4805      	ldr	r0, [pc, #20]	; (946c <compile_scope+0x4c0>)
    9456:	f012 f995 	bl	1b784 <__assert_func>
}
    945a:	bf00      	nop
    945c:	3730      	adds	r7, #48	; 0x30
    945e:	46bd      	mov	sp, r7
    9460:	bd80      	pop	{r7, pc}
    9462:	bf00      	nop
    9464:	00020e2c 	.word	0x00020e2c
    9468:	00021130 	.word	0x00021130
    946c:	00020358 	.word	0x00020358
    9470:	00020dac 	.word	0x00020dac
    9474:	00020e48 	.word	0x00020e48
    9478:	00020e78 	.word	0x00020e78
    947c:	00020e84 	.word	0x00020e84

00009480 <scope_compute_things>:
        comp->compile_error_line = pns->source_line;
    }
}
#endif

STATIC void scope_compute_things(scope_t *scope) {
    9480:	b580      	push	{r7, lr}
    9482:	b092      	sub	sp, #72	; 0x48
    9484:	af00      	add	r7, sp, #0
    9486:	6078      	str	r0, [r7, #4]
    // in MicroPython we put the *x parameter after all other parameters (except **y)
    if (scope->scope_flags & MP_SCOPE_FLAG_VARARGS) {
    9488:	687b      	ldr	r3, [r7, #4]
    948a:	8b1b      	ldrh	r3, [r3, #24]
    948c:	f003 0301 	and.w	r3, r3, #1
    9490:	2b00      	cmp	r3, #0
    9492:	d03c      	beq.n	950e <scope_compute_things+0x8e>
        id_info_t *id_param = NULL;
    9494:	2300      	movs	r3, #0
    9496:	647b      	str	r3, [r7, #68]	; 0x44
        for (int i = scope->id_info_len - 1; i >= 0; i--) {
    9498:	687b      	ldr	r3, [r7, #4]
    949a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    949c:	3b01      	subs	r3, #1
    949e:	643b      	str	r3, [r7, #64]	; 0x40
    94a0:	e030      	b.n	9504 <scope_compute_things+0x84>
            id_info_t *id = &scope->id_info[i];
    94a2:	687b      	ldr	r3, [r7, #4]
    94a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    94a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    94a8:	00db      	lsls	r3, r3, #3
    94aa:	4413      	add	r3, r2
    94ac:	627b      	str	r3, [r7, #36]	; 0x24
            if (id->flags & ID_FLAG_IS_STAR_PARAM) {
    94ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    94b0:	785b      	ldrb	r3, [r3, #1]
    94b2:	f003 0302 	and.w	r3, r3, #2
    94b6:	2b00      	cmp	r3, #0
    94b8:	d018      	beq.n	94ec <scope_compute_things+0x6c>
                if (id_param != NULL) {
    94ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    94bc:	2b00      	cmp	r3, #0
    94be:	d025      	beq.n	950c <scope_compute_things+0x8c>
                    // swap star param with last param
                    id_info_t temp = *id_param; *id_param = *id; *id = temp;
    94c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    94c2:	f107 0308 	add.w	r3, r7, #8
    94c6:	e892 0003 	ldmia.w	r2, {r0, r1}
    94ca:	e883 0003 	stmia.w	r3, {r0, r1}
    94ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    94d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    94d2:	e892 0003 	ldmia.w	r2, {r0, r1}
    94d6:	e883 0003 	stmia.w	r3, {r0, r1}
    94da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    94dc:	461a      	mov	r2, r3
    94de:	f107 0308 	add.w	r3, r7, #8
    94e2:	e893 0003 	ldmia.w	r3, {r0, r1}
    94e6:	e882 0003 	stmia.w	r2, {r0, r1}
                }
                break;
    94ea:	e00f      	b.n	950c <scope_compute_things+0x8c>
            } else if (id_param == NULL && id->flags == ID_FLAG_IS_PARAM) {
    94ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    94ee:	2b00      	cmp	r3, #0
    94f0:	d105      	bne.n	94fe <scope_compute_things+0x7e>
    94f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    94f4:	785b      	ldrb	r3, [r3, #1]
    94f6:	2b01      	cmp	r3, #1
    94f8:	d101      	bne.n	94fe <scope_compute_things+0x7e>
                id_param = id;
    94fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    94fc:	647b      	str	r3, [r7, #68]	; 0x44
        for (int i = scope->id_info_len - 1; i >= 0; i--) {
    94fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9500:	3b01      	subs	r3, #1
    9502:	643b      	str	r3, [r7, #64]	; 0x40
    9504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9506:	2b00      	cmp	r3, #0
    9508:	dacb      	bge.n	94a2 <scope_compute_things+0x22>
    950a:	e000      	b.n	950e <scope_compute_things+0x8e>
                break;
    950c:	bf00      	nop
        }
    }

    // in functions, turn implicit globals into explicit globals
    // compute the index of each local
    scope->num_locals = 0;
    950e:	687b      	ldr	r3, [r7, #4]
    9510:	2200      	movs	r2, #0
    9512:	845a      	strh	r2, [r3, #34]	; 0x22
    for (int i = 0; i < scope->id_info_len; i++) {
    9514:	2300      	movs	r3, #0
    9516:	63fb      	str	r3, [r7, #60]	; 0x3c
    9518:	e02f      	b.n	957a <scope_compute_things+0xfa>
        id_info_t *id = &scope->id_info[i];
    951a:	687b      	ldr	r3, [r7, #4]
    951c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    951e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9520:	00db      	lsls	r3, r3, #3
    9522:	4413      	add	r3, r2
    9524:	623b      	str	r3, [r7, #32]
        if (scope->kind == SCOPE_CLASS && id->qst == MP_QSTR___class__) {
    9526:	687b      	ldr	r3, [r7, #4]
    9528:	681b      	ldr	r3, [r3, #0]
    952a:	2b01      	cmp	r3, #1
    952c:	d103      	bne.n	9536 <scope_compute_things+0xb6>
    952e:	6a3b      	ldr	r3, [r7, #32]
    9530:	685b      	ldr	r3, [r3, #4]
    9532:	2b06      	cmp	r3, #6
    9534:	d01d      	beq.n	9572 <scope_compute_things+0xf2>
            // __class__ is not counted as a local; if it's used then it becomes a ID_INFO_KIND_CELL
            continue;
        }
        if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    9536:	687b      	ldr	r3, [r7, #4]
    9538:	681b      	ldr	r3, [r3, #0]
    953a:	2b01      	cmp	r3, #1
    953c:	d906      	bls.n	954c <scope_compute_things+0xcc>
    953e:	6a3b      	ldr	r3, [r7, #32]
    9540:	781b      	ldrb	r3, [r3, #0]
    9542:	2b01      	cmp	r3, #1
    9544:	d102      	bne.n	954c <scope_compute_things+0xcc>
            id->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    9546:	6a3b      	ldr	r3, [r7, #32]
    9548:	2202      	movs	r2, #2
    954a:	701a      	strb	r2, [r3, #0]
                scope->scope_flags |= MP_SCOPE_FLAG_REFGLOBALS;
            }
        }
        #endif
        // params always count for 1 local, even if they are a cell
        if (id->kind == ID_INFO_KIND_LOCAL || (id->flags & ID_FLAG_IS_PARAM)) {
    954c:	6a3b      	ldr	r3, [r7, #32]
    954e:	781b      	ldrb	r3, [r3, #0]
    9550:	2b03      	cmp	r3, #3
    9552:	d005      	beq.n	9560 <scope_compute_things+0xe0>
    9554:	6a3b      	ldr	r3, [r7, #32]
    9556:	785b      	ldrb	r3, [r3, #1]
    9558:	f003 0301 	and.w	r3, r3, #1
    955c:	2b00      	cmp	r3, #0
    955e:	d009      	beq.n	9574 <scope_compute_things+0xf4>
            id->local_num = scope->num_locals++;
    9560:	687b      	ldr	r3, [r7, #4]
    9562:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    9564:	1c5a      	adds	r2, r3, #1
    9566:	b291      	uxth	r1, r2
    9568:	687a      	ldr	r2, [r7, #4]
    956a:	8451      	strh	r1, [r2, #34]	; 0x22
    956c:	6a3a      	ldr	r2, [r7, #32]
    956e:	8053      	strh	r3, [r2, #2]
    9570:	e000      	b.n	9574 <scope_compute_things+0xf4>
            continue;
    9572:	bf00      	nop
    for (int i = 0; i < scope->id_info_len; i++) {
    9574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9576:	3301      	adds	r3, #1
    9578:	63fb      	str	r3, [r7, #60]	; 0x3c
    957a:	687b      	ldr	r3, [r7, #4]
    957c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    957e:	461a      	mov	r2, r3
    9580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9582:	429a      	cmp	r2, r3
    9584:	dcc9      	bgt.n	951a <scope_compute_things+0x9a>
        }
    }

    // compute the index of cell vars
    for (int i = 0; i < scope->id_info_len; i++) {
    9586:	2300      	movs	r3, #0
    9588:	63bb      	str	r3, [r7, #56]	; 0x38
    958a:	e01c      	b.n	95c6 <scope_compute_things+0x146>
        id_info_t *id = &scope->id_info[i];
    958c:	687b      	ldr	r3, [r7, #4]
    958e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9592:	00db      	lsls	r3, r3, #3
    9594:	4413      	add	r3, r2
    9596:	61fb      	str	r3, [r7, #28]
        // in MicroPython the cells come right after the fast locals
        // parameters are not counted here, since they remain at the start
        // of the locals, even if they are cell vars
        if (id->kind == ID_INFO_KIND_CELL && !(id->flags & ID_FLAG_IS_PARAM)) {
    9598:	69fb      	ldr	r3, [r7, #28]
    959a:	781b      	ldrb	r3, [r3, #0]
    959c:	2b04      	cmp	r3, #4
    959e:	d10f      	bne.n	95c0 <scope_compute_things+0x140>
    95a0:	69fb      	ldr	r3, [r7, #28]
    95a2:	785b      	ldrb	r3, [r3, #1]
    95a4:	f003 0301 	and.w	r3, r3, #1
    95a8:	2b00      	cmp	r3, #0
    95aa:	d109      	bne.n	95c0 <scope_compute_things+0x140>
            id->local_num = scope->num_locals;
    95ac:	687b      	ldr	r3, [r7, #4]
    95ae:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    95b0:	69fb      	ldr	r3, [r7, #28]
    95b2:	805a      	strh	r2, [r3, #2]
            scope->num_locals += 1;
    95b4:	687b      	ldr	r3, [r7, #4]
    95b6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    95b8:	3301      	adds	r3, #1
    95ba:	b29a      	uxth	r2, r3
    95bc:	687b      	ldr	r3, [r7, #4]
    95be:	845a      	strh	r2, [r3, #34]	; 0x22
    for (int i = 0; i < scope->id_info_len; i++) {
    95c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    95c2:	3301      	adds	r3, #1
    95c4:	63bb      	str	r3, [r7, #56]	; 0x38
    95c6:	687b      	ldr	r3, [r7, #4]
    95c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    95ca:	461a      	mov	r2, r3
    95cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    95ce:	429a      	cmp	r2, r3
    95d0:	dcdc      	bgt.n	958c <scope_compute_things+0x10c>
        }
    }

    // compute the index of free vars
    // make sure they are in the order of the parent scope
    if (scope->parent != NULL) {
    95d2:	687b      	ldr	r3, [r7, #4]
    95d4:	685b      	ldr	r3, [r3, #4]
    95d6:	2b00      	cmp	r3, #0
    95d8:	f000 8085 	beq.w	96e6 <scope_compute_things+0x266>
        int num_free = 0;
    95dc:	2300      	movs	r3, #0
    95de:	637b      	str	r3, [r7, #52]	; 0x34
        for (int i = 0; i < scope->parent->id_info_len; i++) {
    95e0:	2300      	movs	r3, #0
    95e2:	633b      	str	r3, [r7, #48]	; 0x30
    95e4:	e041      	b.n	966a <scope_compute_things+0x1ea>
            id_info_t *id = &scope->parent->id_info[i];
    95e6:	687b      	ldr	r3, [r7, #4]
    95e8:	685b      	ldr	r3, [r3, #4]
    95ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    95ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    95ee:	00db      	lsls	r3, r3, #3
    95f0:	4413      	add	r3, r2
    95f2:	61bb      	str	r3, [r7, #24]
            if (id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE) {
    95f4:	69bb      	ldr	r3, [r7, #24]
    95f6:	781b      	ldrb	r3, [r3, #0]
    95f8:	2b04      	cmp	r3, #4
    95fa:	d003      	beq.n	9604 <scope_compute_things+0x184>
    95fc:	69bb      	ldr	r3, [r7, #24]
    95fe:	781b      	ldrb	r3, [r3, #0]
    9600:	2b05      	cmp	r3, #5
    9602:	d12f      	bne.n	9664 <scope_compute_things+0x1e4>
                for (int j = 0; j < scope->id_info_len; j++) {
    9604:	2300      	movs	r3, #0
    9606:	62fb      	str	r3, [r7, #44]	; 0x2c
    9608:	e026      	b.n	9658 <scope_compute_things+0x1d8>
                    id_info_t *id2 = &scope->id_info[j];
    960a:	687b      	ldr	r3, [r7, #4]
    960c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    960e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9610:	00db      	lsls	r3, r3, #3
    9612:	4413      	add	r3, r2
    9614:	617b      	str	r3, [r7, #20]
                    if (id2->kind == ID_INFO_KIND_FREE && id->qst == id2->qst) {
    9616:	697b      	ldr	r3, [r7, #20]
    9618:	781b      	ldrb	r3, [r3, #0]
    961a:	2b05      	cmp	r3, #5
    961c:	d119      	bne.n	9652 <scope_compute_things+0x1d2>
    961e:	69bb      	ldr	r3, [r7, #24]
    9620:	685a      	ldr	r2, [r3, #4]
    9622:	697b      	ldr	r3, [r7, #20]
    9624:	685b      	ldr	r3, [r3, #4]
    9626:	429a      	cmp	r2, r3
    9628:	d113      	bne.n	9652 <scope_compute_things+0x1d2>
                        assert(!(id2->flags & ID_FLAG_IS_PARAM)); // free vars should not be params
    962a:	697b      	ldr	r3, [r7, #20]
    962c:	785b      	ldrb	r3, [r3, #1]
    962e:	f003 0301 	and.w	r3, r3, #1
    9632:	2b00      	cmp	r3, #0
    9634:	d006      	beq.n	9644 <scope_compute_things+0x1c4>
    9636:	4b2e      	ldr	r3, [pc, #184]	; (96f0 <scope_compute_things+0x270>)
    9638:	4a2e      	ldr	r2, [pc, #184]	; (96f4 <scope_compute_things+0x274>)
    963a:	f640 5104 	movw	r1, #3332	; 0xd04
    963e:	482e      	ldr	r0, [pc, #184]	; (96f8 <scope_compute_things+0x278>)
    9640:	f012 f8a0 	bl	1b784 <__assert_func>
                        // in MicroPython the frees come first, before the params
                        id2->local_num = num_free;
    9644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9646:	b29a      	uxth	r2, r3
    9648:	697b      	ldr	r3, [r7, #20]
    964a:	805a      	strh	r2, [r3, #2]
                        num_free += 1;
    964c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    964e:	3301      	adds	r3, #1
    9650:	637b      	str	r3, [r7, #52]	; 0x34
                for (int j = 0; j < scope->id_info_len; j++) {
    9652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9654:	3301      	adds	r3, #1
    9656:	62fb      	str	r3, [r7, #44]	; 0x2c
    9658:	687b      	ldr	r3, [r7, #4]
    965a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    965c:	461a      	mov	r2, r3
    965e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9660:	429a      	cmp	r2, r3
    9662:	dcd2      	bgt.n	960a <scope_compute_things+0x18a>
        for (int i = 0; i < scope->parent->id_info_len; i++) {
    9664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9666:	3301      	adds	r3, #1
    9668:	633b      	str	r3, [r7, #48]	; 0x30
    966a:	687b      	ldr	r3, [r7, #4]
    966c:	685b      	ldr	r3, [r3, #4]
    966e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    9670:	461a      	mov	r2, r3
    9672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9674:	429a      	cmp	r2, r3
    9676:	dcb6      	bgt.n	95e6 <scope_compute_things+0x166>
                    }
                }
            }
        }
        // in MicroPython shift all other locals after the free locals
        if (num_free > 0) {
    9678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    967a:	2b00      	cmp	r3, #0
    967c:	dd33      	ble.n	96e6 <scope_compute_things+0x266>
            for (int i = 0; i < scope->id_info_len; i++) {
    967e:	2300      	movs	r3, #0
    9680:	62bb      	str	r3, [r7, #40]	; 0x28
    9682:	e01a      	b.n	96ba <scope_compute_things+0x23a>
                id_info_t *id = &scope->id_info[i];
    9684:	687b      	ldr	r3, [r7, #4]
    9686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9688:	6abb      	ldr	r3, [r7, #40]	; 0x28
    968a:	00db      	lsls	r3, r3, #3
    968c:	4413      	add	r3, r2
    968e:	613b      	str	r3, [r7, #16]
                if (id->kind != ID_INFO_KIND_FREE || (id->flags & ID_FLAG_IS_PARAM)) {
    9690:	693b      	ldr	r3, [r7, #16]
    9692:	781b      	ldrb	r3, [r3, #0]
    9694:	2b05      	cmp	r3, #5
    9696:	d105      	bne.n	96a4 <scope_compute_things+0x224>
    9698:	693b      	ldr	r3, [r7, #16]
    969a:	785b      	ldrb	r3, [r3, #1]
    969c:	f003 0301 	and.w	r3, r3, #1
    96a0:	2b00      	cmp	r3, #0
    96a2:	d007      	beq.n	96b4 <scope_compute_things+0x234>
                    id->local_num += num_free;
    96a4:	693b      	ldr	r3, [r7, #16]
    96a6:	885a      	ldrh	r2, [r3, #2]
    96a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    96aa:	b29b      	uxth	r3, r3
    96ac:	4413      	add	r3, r2
    96ae:	b29a      	uxth	r2, r3
    96b0:	693b      	ldr	r3, [r7, #16]
    96b2:	805a      	strh	r2, [r3, #2]
            for (int i = 0; i < scope->id_info_len; i++) {
    96b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96b6:	3301      	adds	r3, #1
    96b8:	62bb      	str	r3, [r7, #40]	; 0x28
    96ba:	687b      	ldr	r3, [r7, #4]
    96bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    96be:	461a      	mov	r2, r3
    96c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96c2:	429a      	cmp	r2, r3
    96c4:	dcde      	bgt.n	9684 <scope_compute_things+0x204>
                }
            }
            scope->num_pos_args += num_free; // free vars are counted as params for passing them into the function
    96c6:	687b      	ldr	r3, [r7, #4]
    96c8:	8b9a      	ldrh	r2, [r3, #28]
    96ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    96cc:	b29b      	uxth	r3, r3
    96ce:	4413      	add	r3, r2
    96d0:	b29a      	uxth	r2, r3
    96d2:	687b      	ldr	r3, [r7, #4]
    96d4:	839a      	strh	r2, [r3, #28]
            scope->num_locals += num_free;
    96d6:	687b      	ldr	r3, [r7, #4]
    96d8:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    96da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    96dc:	b29b      	uxth	r3, r3
    96de:	4413      	add	r3, r2
    96e0:	b29a      	uxth	r2, r3
    96e2:	687b      	ldr	r3, [r7, #4]
    96e4:	845a      	strh	r2, [r3, #34]	; 0x22
        }
    }
}
    96e6:	bf00      	nop
    96e8:	3748      	adds	r7, #72	; 0x48
    96ea:	46bd      	mov	sp, r7
    96ec:	bd80      	pop	{r7, pc}
    96ee:	bf00      	nop
    96f0:	00020ea0 	.word	0x00020ea0
    96f4:	00021140 	.word	0x00021140
    96f8:	00020358 	.word	0x00020358

000096fc <mp_compile_to_raw_code>:

#if !MICROPY_PERSISTENT_CODE_SAVE
STATIC
#endif
mp_raw_code_t *mp_compile_to_raw_code(mp_parse_tree_t *parse_tree, qstr source_file, uint emit_opt, bool is_repl) {
    96fc:	b580      	push	{r7, lr}
    96fe:	b09c      	sub	sp, #112	; 0x70
    9700:	af00      	add	r7, sp, #0
    9702:	60f8      	str	r0, [r7, #12]
    9704:	60b9      	str	r1, [r7, #8]
    9706:	607a      	str	r2, [r7, #4]
    9708:	70fb      	strb	r3, [r7, #3]
    // put compiler state on the stack, it's relatively small
    compiler_t comp_state = {0};
    970a:	f107 0314 	add.w	r3, r7, #20
    970e:	222c      	movs	r2, #44	; 0x2c
    9710:	2100      	movs	r1, #0
    9712:	4618      	mov	r0, r3
    9714:	f013 fbd8 	bl	1cec8 <memset>
    compiler_t *comp = &comp_state;
    9718:	f107 0314 	add.w	r3, r7, #20
    971c:	657b      	str	r3, [r7, #84]	; 0x54

    comp->source_file = source_file;
    971e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9720:	68ba      	ldr	r2, [r7, #8]
    9722:	601a      	str	r2, [r3, #0]
    comp->is_repl = is_repl;
    9724:	78fa      	ldrb	r2, [r7, #3]
    9726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9728:	711a      	strb	r2, [r3, #4]
    comp->break_label = INVALID_LABEL;
    972a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    972c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    9730:	831a      	strh	r2, [r3, #24]
    comp->continue_label = INVALID_LABEL;
    9732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9734:	f64f 72ff 	movw	r2, #65535	; 0xffff
    9738:	835a      	strh	r2, [r3, #26]

    // create the module scope
    scope_t *module_scope = scope_new_and_link(comp, SCOPE_MODULE, parse_tree->root, emit_opt);
    973a:	68fb      	ldr	r3, [r7, #12]
    973c:	681a      	ldr	r2, [r3, #0]
    973e:	687b      	ldr	r3, [r7, #4]
    9740:	2100      	movs	r1, #0
    9742:	6d78      	ldr	r0, [r7, #84]	; 0x54
    9744:	f7fb fc5c 	bl	5000 <scope_new_and_link>
    9748:	6538      	str	r0, [r7, #80]	; 0x50

    // create standard emitter; it's used at least for MP_PASS_SCOPE
    emit_t *emit_bc = emit_bc_new();
    974a:	f000 f943 	bl	99d4 <emit_bc_new>
    974e:	64f8      	str	r0, [r7, #76]	; 0x4c

    // compile pass 1
    comp->emit = emit_bc;
    9750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9752:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    9754:	629a      	str	r2, [r3, #40]	; 0x28
    #if MICROPY_EMIT_NATIVE
    comp->emit_method_table = &emit_bc_method_table;
    #endif
    uint max_num_labels = 0;
    9756:	2300      	movs	r3, #0
    9758:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    975a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    975c:	6a1b      	ldr	r3, [r3, #32]
    975e:	66bb      	str	r3, [r7, #104]	; 0x68
    9760:	e029      	b.n	97b6 <mp_compile_to_raw_code+0xba>
        #if MICROPY_EMIT_INLINE_ASM
        } else if (s->emit_options == MP_EMIT_OPT_ASM) {
            compile_scope_inline_asm(comp, s, MP_PASS_SCOPE);
        #endif
        } else {
            compile_scope(comp, s, MP_PASS_SCOPE);
    9762:	2201      	movs	r2, #1
    9764:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    9766:	6d78      	ldr	r0, [r7, #84]	; 0x54
    9768:	f7ff fc20 	bl	8fac <compile_scope>

            // Check if any implicitly declared variables should be closed over
            for (size_t i = 0; i < s->id_info_len; ++i) {
    976c:	2300      	movs	r3, #0
    976e:	667b      	str	r3, [r7, #100]	; 0x64
    9770:	e010      	b.n	9794 <mp_compile_to_raw_code+0x98>
                id_info_t *id = &s->id_info[i];
    9772:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    9774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9776:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    9778:	00db      	lsls	r3, r3, #3
    977a:	4413      	add	r3, r2
    977c:	64bb      	str	r3, [r7, #72]	; 0x48
                if (id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    977e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9780:	781b      	ldrb	r3, [r3, #0]
    9782:	2b01      	cmp	r3, #1
    9784:	d103      	bne.n	978e <mp_compile_to_raw_code+0x92>
                    scope_check_to_close_over(s, id);
    9786:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    9788:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    978a:	f7fb fb49 	bl	4e20 <scope_check_to_close_over>
            for (size_t i = 0; i < s->id_info_len; ++i) {
    978e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    9790:	3301      	adds	r3, #1
    9792:	667b      	str	r3, [r7, #100]	; 0x64
    9794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    9796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    9798:	461a      	mov	r2, r3
    979a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    979c:	429a      	cmp	r2, r3
    979e:	d8e8      	bhi.n	9772 <mp_compile_to_raw_code+0x76>
                }
            }
        }

        // update maximim number of labels needed
        if (comp->next_label > max_num_labels) {
    97a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    97a2:	691a      	ldr	r2, [r3, #16]
    97a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    97a6:	429a      	cmp	r2, r3
    97a8:	d902      	bls.n	97b0 <mp_compile_to_raw_code+0xb4>
            max_num_labels = comp->next_label;
    97aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    97ac:	691b      	ldr	r3, [r3, #16]
    97ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    97b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    97b2:	689b      	ldr	r3, [r3, #8]
    97b4:	66bb      	str	r3, [r7, #104]	; 0x68
    97b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    97b8:	2b00      	cmp	r3, #0
    97ba:	d003      	beq.n	97c4 <mp_compile_to_raw_code+0xc8>
    97bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    97be:	689b      	ldr	r3, [r3, #8]
    97c0:	2b00      	cmp	r3, #0
    97c2:	d0ce      	beq.n	9762 <mp_compile_to_raw_code+0x66>
        }
    }

    // compute some things related to scope and identifiers
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    97c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    97c6:	6a1b      	ldr	r3, [r3, #32]
    97c8:	663b      	str	r3, [r7, #96]	; 0x60
    97ca:	e005      	b.n	97d8 <mp_compile_to_raw_code+0xdc>
        scope_compute_things(s);
    97cc:	6e38      	ldr	r0, [r7, #96]	; 0x60
    97ce:	f7ff fe57 	bl	9480 <scope_compute_things>
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    97d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    97d4:	689b      	ldr	r3, [r3, #8]
    97d6:	663b      	str	r3, [r7, #96]	; 0x60
    97d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    97da:	2b00      	cmp	r3, #0
    97dc:	d003      	beq.n	97e6 <mp_compile_to_raw_code+0xea>
    97de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    97e0:	689b      	ldr	r3, [r3, #8]
    97e2:	2b00      	cmp	r3, #0
    97e4:	d0f2      	beq.n	97cc <mp_compile_to_raw_code+0xd0>
    }

    // set max number of labels now that it's calculated
    emit_bc_set_max_num_labels(emit_bc, max_num_labels);
    97e6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
    97e8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    97ea:	f000 f8ff 	bl	99ec <emit_bc_set_max_num_labels>

    // compile pass 2 and 3
#if MICROPY_EMIT_NATIVE
    emit_t *emit_native = NULL;
#endif
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    97ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    97f0:	6a1b      	ldr	r3, [r3, #32]
    97f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    97f4:	e01d      	b.n	9832 <mp_compile_to_raw_code+0x136>
                    comp->emit = emit_native;
                    break;
#endif // MICROPY_EMIT_NATIVE

                default:
                    comp->emit = emit_bc;
    97f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    97f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    97fa:	629a      	str	r2, [r3, #40]	; 0x28
                    #if MICROPY_EMIT_NATIVE
                    comp->emit_method_table = &emit_bc_method_table;
                    #endif
                    break;
    97fc:	bf00      	nop
            }

            // need a pass to compute stack size
            compile_scope(comp, s, MP_PASS_STACK_SIZE);
    97fe:	2202      	movs	r2, #2
    9800:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    9802:	6d78      	ldr	r0, [r7, #84]	; 0x54
    9804:	f7ff fbd2 	bl	8fac <compile_scope>

            // second last pass: compute code size
            if (comp->compile_error == MP_OBJ_NULL) {
    9808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    980a:	689b      	ldr	r3, [r3, #8]
    980c:	2b00      	cmp	r3, #0
    980e:	d104      	bne.n	981a <mp_compile_to_raw_code+0x11e>
                compile_scope(comp, s, MP_PASS_CODE_SIZE);
    9810:	2203      	movs	r2, #3
    9812:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    9814:	6d78      	ldr	r0, [r7, #84]	; 0x54
    9816:	f7ff fbc9 	bl	8fac <compile_scope>
            }

            // final pass: emit code
            if (comp->compile_error == MP_OBJ_NULL) {
    981a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    981c:	689b      	ldr	r3, [r3, #8]
    981e:	2b00      	cmp	r3, #0
    9820:	d104      	bne.n	982c <mp_compile_to_raw_code+0x130>
                compile_scope(comp, s, MP_PASS_EMIT);
    9822:	2204      	movs	r2, #4
    9824:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    9826:	6d78      	ldr	r0, [r7, #84]	; 0x54
    9828:	f7ff fbc0 	bl	8fac <compile_scope>
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    982c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    982e:	689b      	ldr	r3, [r3, #8]
    9830:	65fb      	str	r3, [r7, #92]	; 0x5c
    9832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    9834:	2b00      	cmp	r3, #0
    9836:	d003      	beq.n	9840 <mp_compile_to_raw_code+0x144>
    9838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    983a:	689b      	ldr	r3, [r3, #8]
    983c:	2b00      	cmp	r3, #0
    983e:	d0da      	beq.n	97f6 <mp_compile_to_raw_code+0xfa>
            }
        }
    }

    if (comp->compile_error != MP_OBJ_NULL) {
    9840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9842:	689b      	ldr	r3, [r3, #8]
    9844:	2b00      	cmp	r3, #0
    9846:	d011      	beq.n	986c <mp_compile_to_raw_code+0x170>
        // if there is no line number for the error then use the line
        // number for the start of this scope
        compile_error_set_line(comp, comp->scope_cur->pn);
    9848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    984a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    984c:	68db      	ldr	r3, [r3, #12]
    984e:	4619      	mov	r1, r3
    9850:	6d78      	ldr	r0, [r7, #84]	; 0x54
    9852:	f7fb fb45 	bl	4ee0 <compile_error_set_line>
        // add a traceback to the exception using relevant source info
        mp_obj_exception_add_traceback(comp->compile_error, comp->source_file,
    9856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9858:	6898      	ldr	r0, [r3, #8]
    985a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    985c:	6819      	ldr	r1, [r3, #0]
    985e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9860:	68da      	ldr	r2, [r3, #12]
            comp->compile_error_line, comp->scope_cur->simple_name);
    9862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    9864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9866:	8adb      	ldrh	r3, [r3, #22]
        mp_obj_exception_add_traceback(comp->compile_error, comp->source_file,
    9868:	f006 f848 	bl	f8fc <mp_obj_exception_add_traceback>
    }

    // free the emitters

    emit_bc_free(emit_bc);
    986c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    986e:	f000 f8d3 	bl	9a18 <emit_bc_free>
        ASM_EMITTER(free)(comp->emit_inline_asm);
    }
    #endif

    // free the parse tree
    mp_parse_tree_clear(parse_tree);
    9872:	68f8      	ldr	r0, [r7, #12]
    9874:	f7fb f97c 	bl	4b70 <mp_parse_tree_clear>

    // free the scopes
    mp_raw_code_t *outer_raw_code = module_scope->raw_code;
    9878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    987a:	691b      	ldr	r3, [r3, #16]
    987c:	647b      	str	r3, [r7, #68]	; 0x44
    for (scope_t *s = module_scope; s;) {
    987e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9880:	65bb      	str	r3, [r7, #88]	; 0x58
    9882:	e007      	b.n	9894 <mp_compile_to_raw_code+0x198>
        scope_t *next = s->next;
    9884:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    9886:	689b      	ldr	r3, [r3, #8]
    9888:	643b      	str	r3, [r7, #64]	; 0x40
        scope_free(s);
    988a:	6db8      	ldr	r0, [r7, #88]	; 0x58
    988c:	f7fb f9e2 	bl	4c54 <scope_free>
        s = next;
    9890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9892:	65bb      	str	r3, [r7, #88]	; 0x58
    for (scope_t *s = module_scope; s;) {
    9894:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    9896:	2b00      	cmp	r3, #0
    9898:	d1f4      	bne.n	9884 <mp_compile_to_raw_code+0x188>
    }

    if (comp->compile_error != MP_OBJ_NULL) {
    989a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    989c:	689b      	ldr	r3, [r3, #8]
    989e:	2b00      	cmp	r3, #0
    98a0:	d004      	beq.n	98ac <mp_compile_to_raw_code+0x1b0>
        nlr_raise(comp->compile_error);
    98a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    98a4:	689b      	ldr	r3, [r3, #8]
    98a6:	4618      	mov	r0, r3
    98a8:	f7f6 fd1a 	bl	2e0 <nlr_jump>
    } else {
        return outer_raw_code;
    98ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
}
    98ae:	4618      	mov	r0, r3
    98b0:	3770      	adds	r7, #112	; 0x70
    98b2:	46bd      	mov	sp, r7
    98b4:	bd80      	pop	{r7, pc}
    98b6:	bf00      	nop

000098b8 <mp_compile>:

mp_obj_t mp_compile(mp_parse_tree_t *parse_tree, qstr source_file, uint emit_opt, bool is_repl) {
    98b8:	b580      	push	{r7, lr}
    98ba:	b086      	sub	sp, #24
    98bc:	af00      	add	r7, sp, #0
    98be:	60f8      	str	r0, [r7, #12]
    98c0:	60b9      	str	r1, [r7, #8]
    98c2:	607a      	str	r2, [r7, #4]
    98c4:	70fb      	strb	r3, [r7, #3]
    mp_raw_code_t *rc = mp_compile_to_raw_code(parse_tree, source_file, emit_opt, is_repl);
    98c6:	78fb      	ldrb	r3, [r7, #3]
    98c8:	687a      	ldr	r2, [r7, #4]
    98ca:	68b9      	ldr	r1, [r7, #8]
    98cc:	68f8      	ldr	r0, [r7, #12]
    98ce:	f7ff ff15 	bl	96fc <mp_compile_to_raw_code>
    98d2:	6178      	str	r0, [r7, #20]
    // return function that executes the outer module
    return mp_make_function_from_raw_code(rc, MP_OBJ_NULL, MP_OBJ_NULL);
    98d4:	2200      	movs	r2, #0
    98d6:	2100      	movs	r1, #0
    98d8:	6978      	ldr	r0, [r7, #20]
    98da:	f001 fcb9 	bl	b250 <mp_make_function_from_raw_code>
    98de:	4603      	mov	r3, r0
}
    98e0:	4618      	mov	r0, r3
    98e2:	3718      	adds	r7, #24
    98e4:	46bd      	mov	sp, r7
    98e6:	bd80      	pop	{r7, pc}

000098e8 <mp_emit_common_get_id_for_modification>:

#include "py/emit.h"

#if MICROPY_ENABLE_COMPILER

void mp_emit_common_get_id_for_modification(scope_t *scope, qstr qst) {
    98e8:	b580      	push	{r7, lr}
    98ea:	b084      	sub	sp, #16
    98ec:	af00      	add	r7, sp, #0
    98ee:	6078      	str	r0, [r7, #4]
    98f0:	6039      	str	r1, [r7, #0]
    // name adding/lookup
    id_info_t *id = scope_find_or_add_id(scope, qst, ID_INFO_KIND_GLOBAL_IMPLICIT);
    98f2:	2201      	movs	r2, #1
    98f4:	6839      	ldr	r1, [r7, #0]
    98f6:	6878      	ldr	r0, [r7, #4]
    98f8:	f7fb f9bc 	bl	4c74 <scope_find_or_add_id>
    98fc:	60f8      	str	r0, [r7, #12]
    if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    98fe:	687b      	ldr	r3, [r7, #4]
    9900:	681b      	ldr	r3, [r3, #0]
    9902:	2b01      	cmp	r3, #1
    9904:	d906      	bls.n	9914 <mp_emit_common_get_id_for_modification+0x2c>
    9906:	68fb      	ldr	r3, [r7, #12]
    9908:	781b      	ldrb	r3, [r3, #0]
    990a:	2b01      	cmp	r3, #1
    990c:	d102      	bne.n	9914 <mp_emit_common_get_id_for_modification+0x2c>
        // rebind as a local variable
        id->kind = ID_INFO_KIND_LOCAL;
    990e:	68fb      	ldr	r3, [r7, #12]
    9910:	2203      	movs	r2, #3
    9912:	701a      	strb	r2, [r3, #0]
    }
}
    9914:	bf00      	nop
    9916:	3710      	adds	r7, #16
    9918:	46bd      	mov	sp, r7
    991a:	bd80      	pop	{r7, pc}

0000991c <mp_emit_common_id_op>:

void mp_emit_common_id_op(emit_t *emit, const mp_emit_method_table_id_ops_t *emit_method_table, scope_t *scope, qstr qst) {
    991c:	b590      	push	{r4, r7, lr}
    991e:	b087      	sub	sp, #28
    9920:	af00      	add	r7, sp, #0
    9922:	60f8      	str	r0, [r7, #12]
    9924:	60b9      	str	r1, [r7, #8]
    9926:	607a      	str	r2, [r7, #4]
    9928:	603b      	str	r3, [r7, #0]
    // assumes pass is greater than 1, ie that all identifiers are defined in the scope

    id_info_t *id = scope_find(scope, qst);
    992a:	6839      	ldr	r1, [r7, #0]
    992c:	6878      	ldr	r0, [r7, #4]
    992e:	f7fb f9e7 	bl	4d00 <scope_find>
    9932:	6178      	str	r0, [r7, #20]
    assert(id != NULL);
    9934:	697b      	ldr	r3, [r7, #20]
    9936:	2b00      	cmp	r3, #0
    9938:	d105      	bne.n	9946 <mp_emit_common_id_op+0x2a>
    993a:	4b22      	ldr	r3, [pc, #136]	; (99c4 <mp_emit_common_id_op+0xa8>)
    993c:	4a22      	ldr	r2, [pc, #136]	; (99c8 <mp_emit_common_id_op+0xac>)
    993e:	212e      	movs	r1, #46	; 0x2e
    9940:	4822      	ldr	r0, [pc, #136]	; (99cc <mp_emit_common_id_op+0xb0>)
    9942:	f011 ff1f 	bl	1b784 <__assert_func>

    // call the emit backend with the correct code
    if (id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    9946:	697b      	ldr	r3, [r7, #20]
    9948:	781b      	ldrb	r3, [r3, #0]
    994a:	2b01      	cmp	r3, #1
    994c:	d106      	bne.n	995c <mp_emit_common_id_op+0x40>
        emit_method_table->global(emit, qst, MP_EMIT_IDOP_GLOBAL_NAME);
    994e:	68bb      	ldr	r3, [r7, #8]
    9950:	685b      	ldr	r3, [r3, #4]
    9952:	2200      	movs	r2, #0
    9954:	6839      	ldr	r1, [r7, #0]
    9956:	68f8      	ldr	r0, [r7, #12]
    9958:	4798      	blx	r3
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_FAST);
    } else {
        assert(id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE);
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_DEREF);
    }
}
    995a:	e02f      	b.n	99bc <mp_emit_common_id_op+0xa0>
    } else if (id->kind == ID_INFO_KIND_GLOBAL_EXPLICIT) {
    995c:	697b      	ldr	r3, [r7, #20]
    995e:	781b      	ldrb	r3, [r3, #0]
    9960:	2b02      	cmp	r3, #2
    9962:	d106      	bne.n	9972 <mp_emit_common_id_op+0x56>
        emit_method_table->global(emit, qst, MP_EMIT_IDOP_GLOBAL_GLOBAL);
    9964:	68bb      	ldr	r3, [r7, #8]
    9966:	685b      	ldr	r3, [r3, #4]
    9968:	2201      	movs	r2, #1
    996a:	6839      	ldr	r1, [r7, #0]
    996c:	68f8      	ldr	r0, [r7, #12]
    996e:	4798      	blx	r3
}
    9970:	e024      	b.n	99bc <mp_emit_common_id_op+0xa0>
    } else if (id->kind == ID_INFO_KIND_LOCAL) {
    9972:	697b      	ldr	r3, [r7, #20]
    9974:	781b      	ldrb	r3, [r3, #0]
    9976:	2b03      	cmp	r3, #3
    9978:	d109      	bne.n	998e <mp_emit_common_id_op+0x72>
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_FAST);
    997a:	68bb      	ldr	r3, [r7, #8]
    997c:	681c      	ldr	r4, [r3, #0]
    997e:	697b      	ldr	r3, [r7, #20]
    9980:	885b      	ldrh	r3, [r3, #2]
    9982:	461a      	mov	r2, r3
    9984:	2300      	movs	r3, #0
    9986:	6839      	ldr	r1, [r7, #0]
    9988:	68f8      	ldr	r0, [r7, #12]
    998a:	47a0      	blx	r4
}
    998c:	e016      	b.n	99bc <mp_emit_common_id_op+0xa0>
        assert(id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE);
    998e:	697b      	ldr	r3, [r7, #20]
    9990:	781b      	ldrb	r3, [r3, #0]
    9992:	2b04      	cmp	r3, #4
    9994:	d009      	beq.n	99aa <mp_emit_common_id_op+0x8e>
    9996:	697b      	ldr	r3, [r7, #20]
    9998:	781b      	ldrb	r3, [r3, #0]
    999a:	2b05      	cmp	r3, #5
    999c:	d005      	beq.n	99aa <mp_emit_common_id_op+0x8e>
    999e:	4b0c      	ldr	r3, [pc, #48]	; (99d0 <mp_emit_common_id_op+0xb4>)
    99a0:	4a09      	ldr	r2, [pc, #36]	; (99c8 <mp_emit_common_id_op+0xac>)
    99a2:	2138      	movs	r1, #56	; 0x38
    99a4:	4809      	ldr	r0, [pc, #36]	; (99cc <mp_emit_common_id_op+0xb0>)
    99a6:	f011 feed 	bl	1b784 <__assert_func>
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_DEREF);
    99aa:	68bb      	ldr	r3, [r7, #8]
    99ac:	681c      	ldr	r4, [r3, #0]
    99ae:	697b      	ldr	r3, [r7, #20]
    99b0:	885b      	ldrh	r3, [r3, #2]
    99b2:	461a      	mov	r2, r3
    99b4:	2301      	movs	r3, #1
    99b6:	6839      	ldr	r1, [r7, #0]
    99b8:	68f8      	ldr	r0, [r7, #12]
    99ba:	47a0      	blx	r4
}
    99bc:	bf00      	nop
    99be:	371c      	adds	r7, #28
    99c0:	46bd      	mov	sp, r7
    99c2:	bd90      	pop	{r4, r7, pc}
    99c4:	00021158 	.word	0x00021158
    99c8:	000211bc 	.word	0x000211bc
    99cc:	00021164 	.word	0x00021164
    99d0:	0002117c 	.word	0x0002117c

000099d4 <emit_bc_new>:
    uint16_t ct_cur_raw_code;
    #endif
    mp_uint_t *const_table;
};

emit_t *emit_bc_new(void) {
    99d4:	b580      	push	{r7, lr}
    99d6:	b082      	sub	sp, #8
    99d8:	af00      	add	r7, sp, #0
    emit_t *emit = m_new0(emit_t, 1);
    99da:	2038      	movs	r0, #56	; 0x38
    99dc:	f7f6 fcdc 	bl	398 <m_malloc0>
    99e0:	6078      	str	r0, [r7, #4]
    return emit;
    99e2:	687b      	ldr	r3, [r7, #4]
}
    99e4:	4618      	mov	r0, r3
    99e6:	3708      	adds	r7, #8
    99e8:	46bd      	mov	sp, r7
    99ea:	bd80      	pop	{r7, pc}

000099ec <emit_bc_set_max_num_labels>:

void emit_bc_set_max_num_labels(emit_t *emit, mp_uint_t max_num_labels) {
    99ec:	b580      	push	{r7, lr}
    99ee:	b082      	sub	sp, #8
    99f0:	af00      	add	r7, sp, #0
    99f2:	6078      	str	r0, [r7, #4]
    99f4:	6039      	str	r1, [r7, #0]
    emit->max_num_labels = max_num_labels;
    99f6:	687b      	ldr	r3, [r7, #4]
    99f8:	683a      	ldr	r2, [r7, #0]
    99fa:	619a      	str	r2, [r3, #24]
    emit->label_offsets = m_new(mp_uint_t, emit->max_num_labels);
    99fc:	687b      	ldr	r3, [r7, #4]
    99fe:	699b      	ldr	r3, [r3, #24]
    9a00:	009b      	lsls	r3, r3, #2
    9a02:	4618      	mov	r0, r3
    9a04:	f7f6 fc8a 	bl	31c <m_malloc>
    9a08:	4602      	mov	r2, r0
    9a0a:	687b      	ldr	r3, [r7, #4]
    9a0c:	61da      	str	r2, [r3, #28]
}
    9a0e:	bf00      	nop
    9a10:	3708      	adds	r7, #8
    9a12:	46bd      	mov	sp, r7
    9a14:	bd80      	pop	{r7, pc}
    9a16:	bf00      	nop

00009a18 <emit_bc_free>:

void emit_bc_free(emit_t *emit) {
    9a18:	b580      	push	{r7, lr}
    9a1a:	b082      	sub	sp, #8
    9a1c:	af00      	add	r7, sp, #0
    9a1e:	6078      	str	r0, [r7, #4]
    m_del(mp_uint_t, emit->label_offsets, emit->max_num_labels);
    9a20:	687b      	ldr	r3, [r7, #4]
    9a22:	69db      	ldr	r3, [r3, #28]
    9a24:	4618      	mov	r0, r3
    9a26:	f7f6 fcf3 	bl	410 <m_free>
    m_del_obj(emit_t, emit);
    9a2a:	6878      	ldr	r0, [r7, #4]
    9a2c:	f7f6 fcf0 	bl	410 <m_free>
}
    9a30:	bf00      	nop
    9a32:	3708      	adds	r7, #8
    9a34:	46bd      	mov	sp, r7
    9a36:	bd80      	pop	{r7, pc}

00009a38 <emit_write_uint>:

typedef byte *(*emit_allocator_t)(emit_t *emit, int nbytes);

STATIC void emit_write_uint(emit_t *emit, emit_allocator_t allocator, mp_uint_t val) {
    9a38:	b580      	push	{r7, lr}
    9a3a:	b088      	sub	sp, #32
    9a3c:	af00      	add	r7, sp, #0
    9a3e:	60f8      	str	r0, [r7, #12]
    9a40:	60b9      	str	r1, [r7, #8]
    9a42:	607a      	str	r2, [r7, #4]
    // We store each 7 bits in a separate byte, and that's how many bytes needed
    byte buf[BYTES_FOR_INT];
    byte *p = buf + sizeof(buf);
    9a44:	f107 0310 	add.w	r3, r7, #16
    9a48:	3305      	adds	r3, #5
    9a4a:	61fb      	str	r3, [r7, #28]
    // We encode in little-ending order, but store in big-endian, to help decoding
    do {
        *--p = val & 0x7f;
    9a4c:	69fb      	ldr	r3, [r7, #28]
    9a4e:	3b01      	subs	r3, #1
    9a50:	61fb      	str	r3, [r7, #28]
    9a52:	687b      	ldr	r3, [r7, #4]
    9a54:	b2db      	uxtb	r3, r3
    9a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9a5a:	b2da      	uxtb	r2, r3
    9a5c:	69fb      	ldr	r3, [r7, #28]
    9a5e:	701a      	strb	r2, [r3, #0]
        val >>= 7;
    9a60:	687b      	ldr	r3, [r7, #4]
    9a62:	09db      	lsrs	r3, r3, #7
    9a64:	607b      	str	r3, [r7, #4]
    } while (val != 0);
    9a66:	687b      	ldr	r3, [r7, #4]
    9a68:	2b00      	cmp	r3, #0
    9a6a:	d1ef      	bne.n	9a4c <emit_write_uint+0x14>
    byte *c = allocator(emit, buf + sizeof(buf) - p);
    9a6c:	f107 0310 	add.w	r3, r7, #16
    9a70:	3305      	adds	r3, #5
    9a72:	461a      	mov	r2, r3
    9a74:	69fb      	ldr	r3, [r7, #28]
    9a76:	1ad2      	subs	r2, r2, r3
    9a78:	68bb      	ldr	r3, [r7, #8]
    9a7a:	4611      	mov	r1, r2
    9a7c:	68f8      	ldr	r0, [r7, #12]
    9a7e:	4798      	blx	r3
    9a80:	61b8      	str	r0, [r7, #24]
    while (p != buf + sizeof(buf) - 1) {
    9a82:	e00a      	b.n	9a9a <emit_write_uint+0x62>
        *c++ = *p++ | 0x80;
    9a84:	69bb      	ldr	r3, [r7, #24]
    9a86:	1c5a      	adds	r2, r3, #1
    9a88:	61ba      	str	r2, [r7, #24]
    9a8a:	69fa      	ldr	r2, [r7, #28]
    9a8c:	1c51      	adds	r1, r2, #1
    9a8e:	61f9      	str	r1, [r7, #28]
    9a90:	7812      	ldrb	r2, [r2, #0]
    9a92:	f062 027f 	orn	r2, r2, #127	; 0x7f
    9a96:	b2d2      	uxtb	r2, r2
    9a98:	701a      	strb	r2, [r3, #0]
    while (p != buf + sizeof(buf) - 1) {
    9a9a:	f107 0310 	add.w	r3, r7, #16
    9a9e:	3304      	adds	r3, #4
    9aa0:	69fa      	ldr	r2, [r7, #28]
    9aa2:	4293      	cmp	r3, r2
    9aa4:	d1ee      	bne.n	9a84 <emit_write_uint+0x4c>
    }
    *c = *p;
    9aa6:	69fb      	ldr	r3, [r7, #28]
    9aa8:	781a      	ldrb	r2, [r3, #0]
    9aaa:	69bb      	ldr	r3, [r7, #24]
    9aac:	701a      	strb	r2, [r3, #0]
}
    9aae:	bf00      	nop
    9ab0:	3720      	adds	r7, #32
    9ab2:	46bd      	mov	sp, r7
    9ab4:	bd80      	pop	{r7, pc}
    9ab6:	bf00      	nop

00009ab8 <emit_get_cur_to_write_code_info>:

// all functions must go through this one to emit code info
STATIC byte *emit_get_cur_to_write_code_info(emit_t *emit, int num_bytes_to_write) {
    9ab8:	b580      	push	{r7, lr}
    9aba:	b084      	sub	sp, #16
    9abc:	af00      	add	r7, sp, #0
    9abe:	6078      	str	r0, [r7, #4]
    9ac0:	6039      	str	r1, [r7, #0]
    //printf("emit %d\n", num_bytes_to_write);
    if (emit->pass < MP_PASS_EMIT) {
    9ac2:	687b      	ldr	r3, [r7, #4]
    9ac4:	795b      	ldrb	r3, [r3, #5]
    9ac6:	2b03      	cmp	r3, #3
    9ac8:	d807      	bhi.n	9ada <emit_get_cur_to_write_code_info+0x22>
        emit->code_info_offset += num_bytes_to_write;
    9aca:	687b      	ldr	r3, [r7, #4]
    9acc:	6a1a      	ldr	r2, [r3, #32]
    9ace:	683b      	ldr	r3, [r7, #0]
    9ad0:	441a      	add	r2, r3
    9ad2:	687b      	ldr	r3, [r7, #4]
    9ad4:	621a      	str	r2, [r3, #32]
        return emit->dummy_data;
    9ad6:	687b      	ldr	r3, [r7, #4]
    9ad8:	e01a      	b.n	9b10 <emit_get_cur_to_write_code_info+0x58>
    } else {
        assert(emit->code_info_offset + num_bytes_to_write <= emit->code_info_size);
    9ada:	687b      	ldr	r3, [r7, #4]
    9adc:	6a1a      	ldr	r2, [r3, #32]
    9ade:	683b      	ldr	r3, [r7, #0]
    9ae0:	441a      	add	r2, r3
    9ae2:	687b      	ldr	r3, [r7, #4]
    9ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9ae6:	429a      	cmp	r2, r3
    9ae8:	d905      	bls.n	9af6 <emit_get_cur_to_write_code_info+0x3e>
    9aea:	4b0b      	ldr	r3, [pc, #44]	; (9b18 <emit_get_cur_to_write_code_info+0x60>)
    9aec:	4a0b      	ldr	r2, [pc, #44]	; (9b1c <emit_get_cur_to_write_code_info+0x64>)
    9aee:	2173      	movs	r1, #115	; 0x73
    9af0:	480b      	ldr	r0, [pc, #44]	; (9b20 <emit_get_cur_to_write_code_info+0x68>)
    9af2:	f011 fe47 	bl	1b784 <__assert_func>
        byte *c = emit->code_base + emit->code_info_offset;
    9af6:	687b      	ldr	r3, [r7, #4]
    9af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    9afa:	687b      	ldr	r3, [r7, #4]
    9afc:	6a1b      	ldr	r3, [r3, #32]
    9afe:	4413      	add	r3, r2
    9b00:	60fb      	str	r3, [r7, #12]
        emit->code_info_offset += num_bytes_to_write;
    9b02:	687b      	ldr	r3, [r7, #4]
    9b04:	6a1a      	ldr	r2, [r3, #32]
    9b06:	683b      	ldr	r3, [r7, #0]
    9b08:	441a      	add	r2, r3
    9b0a:	687b      	ldr	r3, [r7, #4]
    9b0c:	621a      	str	r2, [r3, #32]
        return c;
    9b0e:	68fb      	ldr	r3, [r7, #12]
    }
}
    9b10:	4618      	mov	r0, r3
    9b12:	3710      	adds	r7, #16
    9b14:	46bd      	mov	sp, r7
    9b16:	bd80      	pop	{r7, pc}
    9b18:	000211d4 	.word	0x000211d4
    9b1c:	000213d4 	.word	0x000213d4
    9b20:	00021218 	.word	0x00021218

00009b24 <emit_write_code_info_byte>:

STATIC void emit_write_code_info_byte(emit_t* emit, byte val) {
    9b24:	b580      	push	{r7, lr}
    9b26:	b082      	sub	sp, #8
    9b28:	af00      	add	r7, sp, #0
    9b2a:	6078      	str	r0, [r7, #4]
    9b2c:	460b      	mov	r3, r1
    9b2e:	70fb      	strb	r3, [r7, #3]
    *emit_get_cur_to_write_code_info(emit, 1) = val;
    9b30:	2101      	movs	r1, #1
    9b32:	6878      	ldr	r0, [r7, #4]
    9b34:	f7ff ffc0 	bl	9ab8 <emit_get_cur_to_write_code_info>
    9b38:	4602      	mov	r2, r0
    9b3a:	78fb      	ldrb	r3, [r7, #3]
    9b3c:	7013      	strb	r3, [r2, #0]
}
    9b3e:	bf00      	nop
    9b40:	3708      	adds	r7, #8
    9b42:	46bd      	mov	sp, r7
    9b44:	bd80      	pop	{r7, pc}
    9b46:	bf00      	nop

00009b48 <emit_write_code_info_uint>:

STATIC void emit_write_code_info_uint(emit_t* emit, mp_uint_t val) {
    9b48:	b580      	push	{r7, lr}
    9b4a:	b082      	sub	sp, #8
    9b4c:	af00      	add	r7, sp, #0
    9b4e:	6078      	str	r0, [r7, #4]
    9b50:	6039      	str	r1, [r7, #0]
    emit_write_uint(emit, emit_get_cur_to_write_code_info, val);
    9b52:	683a      	ldr	r2, [r7, #0]
    9b54:	4903      	ldr	r1, [pc, #12]	; (9b64 <emit_write_code_info_uint+0x1c>)
    9b56:	6878      	ldr	r0, [r7, #4]
    9b58:	f7ff ff6e 	bl	9a38 <emit_write_uint>
}
    9b5c:	bf00      	nop
    9b5e:	3708      	adds	r7, #8
    9b60:	46bd      	mov	sp, r7
    9b62:	bd80      	pop	{r7, pc}
    9b64:	00009ab9 	.word	0x00009ab9

00009b68 <emit_write_code_info_qstr>:

STATIC void emit_write_code_info_qstr(emit_t *emit, qstr qst) {
    9b68:	b580      	push	{r7, lr}
    9b6a:	b082      	sub	sp, #8
    9b6c:	af00      	add	r7, sp, #0
    9b6e:	6078      	str	r0, [r7, #4]
    9b70:	6039      	str	r1, [r7, #0]
    assert((qst >> 16) == 0);
    byte *c = emit_get_cur_to_write_code_info(emit, 2);
    c[0] = qst;
    c[1] = qst >> 8;
    #else
    emit_write_uint(emit, emit_get_cur_to_write_code_info, qst);
    9b72:	683a      	ldr	r2, [r7, #0]
    9b74:	4903      	ldr	r1, [pc, #12]	; (9b84 <emit_write_code_info_qstr+0x1c>)
    9b76:	6878      	ldr	r0, [r7, #4]
    9b78:	f7ff ff5e 	bl	9a38 <emit_write_uint>
    #endif
}
    9b7c:	bf00      	nop
    9b7e:	3708      	adds	r7, #8
    9b80:	46bd      	mov	sp, r7
    9b82:	bd80      	pop	{r7, pc}
    9b84:	00009ab9 	.word	0x00009ab9

00009b88 <emit_get_cur_to_write_bytecode>:
    }
}
#endif

// all functions must go through this one to emit byte code
STATIC byte *emit_get_cur_to_write_bytecode(emit_t *emit, int num_bytes_to_write) {
    9b88:	b580      	push	{r7, lr}
    9b8a:	b084      	sub	sp, #16
    9b8c:	af00      	add	r7, sp, #0
    9b8e:	6078      	str	r0, [r7, #4]
    9b90:	6039      	str	r1, [r7, #0]
    //printf("emit %d\n", num_bytes_to_write);
    if (emit->pass < MP_PASS_EMIT) {
    9b92:	687b      	ldr	r3, [r7, #4]
    9b94:	795b      	ldrb	r3, [r3, #5]
    9b96:	2b03      	cmp	r3, #3
    9b98:	d807      	bhi.n	9baa <emit_get_cur_to_write_bytecode+0x22>
        emit->bytecode_offset += num_bytes_to_write;
    9b9a:	687b      	ldr	r3, [r7, #4]
    9b9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9b9e:	683b      	ldr	r3, [r7, #0]
    9ba0:	441a      	add	r2, r3
    9ba2:	687b      	ldr	r3, [r7, #4]
    9ba4:	629a      	str	r2, [r3, #40]	; 0x28
        return emit->dummy_data;
    9ba6:	687b      	ldr	r3, [r7, #4]
    9ba8:	e01d      	b.n	9be6 <emit_get_cur_to_write_bytecode+0x5e>
    } else {
        assert(emit->bytecode_offset + num_bytes_to_write <= emit->bytecode_size);
    9baa:	687b      	ldr	r3, [r7, #4]
    9bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9bae:	683b      	ldr	r3, [r7, #0]
    9bb0:	441a      	add	r2, r3
    9bb2:	687b      	ldr	r3, [r7, #4]
    9bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9bb6:	429a      	cmp	r2, r3
    9bb8:	d905      	bls.n	9bc6 <emit_get_cur_to_write_bytecode+0x3e>
    9bba:	4b0d      	ldr	r3, [pc, #52]	; (9bf0 <emit_get_cur_to_write_bytecode+0x68>)
    9bbc:	4a0d      	ldr	r2, [pc, #52]	; (9bf4 <emit_get_cur_to_write_bytecode+0x6c>)
    9bbe:	21b2      	movs	r1, #178	; 0xb2
    9bc0:	480d      	ldr	r0, [pc, #52]	; (9bf8 <emit_get_cur_to_write_bytecode+0x70>)
    9bc2:	f011 fddf 	bl	1b784 <__assert_func>
        byte *c = emit->code_base + emit->code_info_size + emit->bytecode_offset;
    9bc6:	687b      	ldr	r3, [r7, #4]
    9bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    9bca:	687b      	ldr	r3, [r7, #4]
    9bcc:	6a59      	ldr	r1, [r3, #36]	; 0x24
    9bce:	687b      	ldr	r3, [r7, #4]
    9bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9bd2:	440b      	add	r3, r1
    9bd4:	4413      	add	r3, r2
    9bd6:	60fb      	str	r3, [r7, #12]
        emit->bytecode_offset += num_bytes_to_write;
    9bd8:	687b      	ldr	r3, [r7, #4]
    9bda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9bdc:	683b      	ldr	r3, [r7, #0]
    9bde:	441a      	add	r2, r3
    9be0:	687b      	ldr	r3, [r7, #4]
    9be2:	629a      	str	r2, [r3, #40]	; 0x28
        return c;
    9be4:	68fb      	ldr	r3, [r7, #12]
    }
}
    9be6:	4618      	mov	r0, r3
    9be8:	3710      	adds	r7, #16
    9bea:	46bd      	mov	sp, r7
    9bec:	bd80      	pop	{r7, pc}
    9bee:	bf00      	nop
    9bf0:	0002122c 	.word	0x0002122c
    9bf4:	000213f4 	.word	0x000213f4
    9bf8:	00021218 	.word	0x00021218

00009bfc <emit_write_bytecode_byte>:

STATIC void emit_write_bytecode_byte(emit_t *emit, byte b1) {
    9bfc:	b580      	push	{r7, lr}
    9bfe:	b084      	sub	sp, #16
    9c00:	af00      	add	r7, sp, #0
    9c02:	6078      	str	r0, [r7, #4]
    9c04:	460b      	mov	r3, r1
    9c06:	70fb      	strb	r3, [r7, #3]
    byte *c = emit_get_cur_to_write_bytecode(emit, 1);
    9c08:	2101      	movs	r1, #1
    9c0a:	6878      	ldr	r0, [r7, #4]
    9c0c:	f7ff ffbc 	bl	9b88 <emit_get_cur_to_write_bytecode>
    9c10:	60f8      	str	r0, [r7, #12]
    c[0] = b1;
    9c12:	68fb      	ldr	r3, [r7, #12]
    9c14:	78fa      	ldrb	r2, [r7, #3]
    9c16:	701a      	strb	r2, [r3, #0]
}
    9c18:	bf00      	nop
    9c1a:	3710      	adds	r7, #16
    9c1c:	46bd      	mov	sp, r7
    9c1e:	bd80      	pop	{r7, pc}

00009c20 <emit_write_bytecode_byte_byte>:

STATIC void emit_write_bytecode_byte_byte(emit_t* emit, byte b1, byte b2) {
    9c20:	b580      	push	{r7, lr}
    9c22:	b084      	sub	sp, #16
    9c24:	af00      	add	r7, sp, #0
    9c26:	6078      	str	r0, [r7, #4]
    9c28:	460b      	mov	r3, r1
    9c2a:	70fb      	strb	r3, [r7, #3]
    9c2c:	4613      	mov	r3, r2
    9c2e:	70bb      	strb	r3, [r7, #2]
    byte *c = emit_get_cur_to_write_bytecode(emit, 2);
    9c30:	2102      	movs	r1, #2
    9c32:	6878      	ldr	r0, [r7, #4]
    9c34:	f7ff ffa8 	bl	9b88 <emit_get_cur_to_write_bytecode>
    9c38:	60f8      	str	r0, [r7, #12]
    c[0] = b1;
    9c3a:	68fb      	ldr	r3, [r7, #12]
    9c3c:	78fa      	ldrb	r2, [r7, #3]
    9c3e:	701a      	strb	r2, [r3, #0]
    c[1] = b2;
    9c40:	68fb      	ldr	r3, [r7, #12]
    9c42:	3301      	adds	r3, #1
    9c44:	78ba      	ldrb	r2, [r7, #2]
    9c46:	701a      	strb	r2, [r3, #0]
}
    9c48:	bf00      	nop
    9c4a:	3710      	adds	r7, #16
    9c4c:	46bd      	mov	sp, r7
    9c4e:	bd80      	pop	{r7, pc}

00009c50 <emit_write_bytecode_byte_int>:

// Similar to emit_write_bytecode_uint(), just some extra handling to encode sign
STATIC void emit_write_bytecode_byte_int(emit_t *emit, byte b1, mp_int_t num) {
    9c50:	b580      	push	{r7, lr}
    9c52:	b088      	sub	sp, #32
    9c54:	af00      	add	r7, sp, #0
    9c56:	60f8      	str	r0, [r7, #12]
    9c58:	460b      	mov	r3, r1
    9c5a:	607a      	str	r2, [r7, #4]
    9c5c:	72fb      	strb	r3, [r7, #11]
    emit_write_bytecode_byte(emit, b1);
    9c5e:	7afb      	ldrb	r3, [r7, #11]
    9c60:	4619      	mov	r1, r3
    9c62:	68f8      	ldr	r0, [r7, #12]
    9c64:	f7ff ffca 	bl	9bfc <emit_write_bytecode_byte>

    // We store each 7 bits in a separate byte, and that's how many bytes needed
    byte buf[BYTES_FOR_INT];
    byte *p = buf + sizeof(buf);
    9c68:	f107 0310 	add.w	r3, r7, #16
    9c6c:	3305      	adds	r3, #5
    9c6e:	61fb      	str	r3, [r7, #28]
    // We encode in little-ending order, but store in big-endian, to help decoding
    do {
        *--p = num & 0x7f;
    9c70:	69fb      	ldr	r3, [r7, #28]
    9c72:	3b01      	subs	r3, #1
    9c74:	61fb      	str	r3, [r7, #28]
    9c76:	687b      	ldr	r3, [r7, #4]
    9c78:	b2db      	uxtb	r3, r3
    9c7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9c7e:	b2da      	uxtb	r2, r3
    9c80:	69fb      	ldr	r3, [r7, #28]
    9c82:	701a      	strb	r2, [r3, #0]
        num >>= 7;
    9c84:	687b      	ldr	r3, [r7, #4]
    9c86:	11db      	asrs	r3, r3, #7
    9c88:	607b      	str	r3, [r7, #4]
    } while (num != 0 && num != -1);
    9c8a:	687b      	ldr	r3, [r7, #4]
    9c8c:	2b00      	cmp	r3, #0
    9c8e:	d003      	beq.n	9c98 <emit_write_bytecode_byte_int+0x48>
    9c90:	687b      	ldr	r3, [r7, #4]
    9c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9c96:	d1eb      	bne.n	9c70 <emit_write_bytecode_byte_int+0x20>
    // Make sure that highest bit we stored (mask 0x40) matches sign
    // of the number. If not, store extra byte just to encode sign
    if (num == -1 && (*p & 0x40) == 0) {
    9c98:	687b      	ldr	r3, [r7, #4]
    9c9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9c9e:	d10c      	bne.n	9cba <emit_write_bytecode_byte_int+0x6a>
    9ca0:	69fb      	ldr	r3, [r7, #28]
    9ca2:	781b      	ldrb	r3, [r3, #0]
    9ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9ca8:	2b00      	cmp	r3, #0
    9caa:	d106      	bne.n	9cba <emit_write_bytecode_byte_int+0x6a>
        *--p = 0x7f;
    9cac:	69fb      	ldr	r3, [r7, #28]
    9cae:	3b01      	subs	r3, #1
    9cb0:	61fb      	str	r3, [r7, #28]
    9cb2:	69fb      	ldr	r3, [r7, #28]
    9cb4:	227f      	movs	r2, #127	; 0x7f
    9cb6:	701a      	strb	r2, [r3, #0]
    9cb8:	e00e      	b.n	9cd8 <emit_write_bytecode_byte_int+0x88>
    } else if (num == 0 && (*p & 0x40) != 0) {
    9cba:	687b      	ldr	r3, [r7, #4]
    9cbc:	2b00      	cmp	r3, #0
    9cbe:	d10b      	bne.n	9cd8 <emit_write_bytecode_byte_int+0x88>
    9cc0:	69fb      	ldr	r3, [r7, #28]
    9cc2:	781b      	ldrb	r3, [r3, #0]
    9cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9cc8:	2b00      	cmp	r3, #0
    9cca:	d005      	beq.n	9cd8 <emit_write_bytecode_byte_int+0x88>
        *--p = 0;
    9ccc:	69fb      	ldr	r3, [r7, #28]
    9cce:	3b01      	subs	r3, #1
    9cd0:	61fb      	str	r3, [r7, #28]
    9cd2:	69fb      	ldr	r3, [r7, #28]
    9cd4:	2200      	movs	r2, #0
    9cd6:	701a      	strb	r2, [r3, #0]
    }

    byte *c = emit_get_cur_to_write_bytecode(emit, buf + sizeof(buf) - p);
    9cd8:	f107 0310 	add.w	r3, r7, #16
    9cdc:	3305      	adds	r3, #5
    9cde:	461a      	mov	r2, r3
    9ce0:	69fb      	ldr	r3, [r7, #28]
    9ce2:	1ad3      	subs	r3, r2, r3
    9ce4:	4619      	mov	r1, r3
    9ce6:	68f8      	ldr	r0, [r7, #12]
    9ce8:	f7ff ff4e 	bl	9b88 <emit_get_cur_to_write_bytecode>
    9cec:	61b8      	str	r0, [r7, #24]
    while (p != buf + sizeof(buf) - 1) {
    9cee:	e00a      	b.n	9d06 <emit_write_bytecode_byte_int+0xb6>
        *c++ = *p++ | 0x80;
    9cf0:	69bb      	ldr	r3, [r7, #24]
    9cf2:	1c5a      	adds	r2, r3, #1
    9cf4:	61ba      	str	r2, [r7, #24]
    9cf6:	69fa      	ldr	r2, [r7, #28]
    9cf8:	1c51      	adds	r1, r2, #1
    9cfa:	61f9      	str	r1, [r7, #28]
    9cfc:	7812      	ldrb	r2, [r2, #0]
    9cfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
    9d02:	b2d2      	uxtb	r2, r2
    9d04:	701a      	strb	r2, [r3, #0]
    while (p != buf + sizeof(buf) - 1) {
    9d06:	f107 0310 	add.w	r3, r7, #16
    9d0a:	3304      	adds	r3, #4
    9d0c:	69fa      	ldr	r2, [r7, #28]
    9d0e:	4293      	cmp	r3, r2
    9d10:	d1ee      	bne.n	9cf0 <emit_write_bytecode_byte_int+0xa0>
    }
    *c = *p;
    9d12:	69fb      	ldr	r3, [r7, #28]
    9d14:	781a      	ldrb	r2, [r3, #0]
    9d16:	69bb      	ldr	r3, [r7, #24]
    9d18:	701a      	strb	r2, [r3, #0]
}
    9d1a:	bf00      	nop
    9d1c:	3720      	adds	r7, #32
    9d1e:	46bd      	mov	sp, r7
    9d20:	bd80      	pop	{r7, pc}
    9d22:	bf00      	nop

00009d24 <emit_write_bytecode_byte_uint>:

STATIC void emit_write_bytecode_byte_uint(emit_t *emit, byte b, mp_uint_t val) {
    9d24:	b580      	push	{r7, lr}
    9d26:	b084      	sub	sp, #16
    9d28:	af00      	add	r7, sp, #0
    9d2a:	60f8      	str	r0, [r7, #12]
    9d2c:	460b      	mov	r3, r1
    9d2e:	607a      	str	r2, [r7, #4]
    9d30:	72fb      	strb	r3, [r7, #11]
    emit_write_bytecode_byte(emit, b);
    9d32:	7afb      	ldrb	r3, [r7, #11]
    9d34:	4619      	mov	r1, r3
    9d36:	68f8      	ldr	r0, [r7, #12]
    9d38:	f7ff ff60 	bl	9bfc <emit_write_bytecode_byte>
    emit_write_uint(emit, emit_get_cur_to_write_bytecode, val);
    9d3c:	687a      	ldr	r2, [r7, #4]
    9d3e:	4904      	ldr	r1, [pc, #16]	; (9d50 <emit_write_bytecode_byte_uint+0x2c>)
    9d40:	68f8      	ldr	r0, [r7, #12]
    9d42:	f7ff fe79 	bl	9a38 <emit_write_uint>
}
    9d46:	bf00      	nop
    9d48:	3710      	adds	r7, #16
    9d4a:	46bd      	mov	sp, r7
    9d4c:	bd80      	pop	{r7, pc}
    9d4e:	bf00      	nop
    9d50:	00009b89 	.word	0x00009b89

00009d54 <emit_write_bytecode_byte_qstr>:
    }
    emit_write_bytecode_byte_uint(emit, b, n);
}
#endif

STATIC void emit_write_bytecode_byte_qstr(emit_t* emit, byte b, qstr qst) {
    9d54:	b580      	push	{r7, lr}
    9d56:	b084      	sub	sp, #16
    9d58:	af00      	add	r7, sp, #0
    9d5a:	60f8      	str	r0, [r7, #12]
    9d5c:	460b      	mov	r3, r1
    9d5e:	607a      	str	r2, [r7, #4]
    9d60:	72fb      	strb	r3, [r7, #11]
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    c[0] = b;
    c[1] = qst;
    c[2] = qst >> 8;
    #else
    emit_write_bytecode_byte_uint(emit, b, qst);
    9d62:	7afb      	ldrb	r3, [r7, #11]
    9d64:	687a      	ldr	r2, [r7, #4]
    9d66:	4619      	mov	r1, r3
    9d68:	68f8      	ldr	r0, [r7, #12]
    9d6a:	f7ff ffdb 	bl	9d24 <emit_write_bytecode_byte_uint>
    #endif
}
    9d6e:	bf00      	nop
    9d70:	3710      	adds	r7, #16
    9d72:	46bd      	mov	sp, r7
    9d74:	bd80      	pop	{r7, pc}
    9d76:	bf00      	nop

00009d78 <emit_write_bytecode_byte_obj>:

STATIC void emit_write_bytecode_byte_obj(emit_t *emit, byte b, mp_obj_t obj) {
    9d78:	b580      	push	{r7, lr}
    9d7a:	b086      	sub	sp, #24
    9d7c:	af00      	add	r7, sp, #0
    9d7e:	60f8      	str	r0, [r7, #12]
    9d80:	460b      	mov	r3, r1
    9d82:	607a      	str	r2, [r7, #4]
    9d84:	72fb      	strb	r3, [r7, #11]
    emit_write_bytecode_byte_const(emit, b,
        emit->scope->num_pos_args + emit->scope->num_kwonly_args
        + emit->ct_cur_obj++, (mp_uint_t)obj);
    #else
    // aligns the pointer so it is friendly to GC
    emit_write_bytecode_byte(emit, b);
    9d86:	7afb      	ldrb	r3, [r7, #11]
    9d88:	4619      	mov	r1, r3
    9d8a:	68f8      	ldr	r0, [r7, #12]
    9d8c:	f7ff ff36 	bl	9bfc <emit_write_bytecode_byte>
    emit->bytecode_offset = (size_t)MP_ALIGN(emit->bytecode_offset, sizeof(mp_obj_t));
    9d90:	68fb      	ldr	r3, [r7, #12]
    9d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9d94:	3303      	adds	r3, #3
    9d96:	f023 0203 	bic.w	r2, r3, #3
    9d9a:	68fb      	ldr	r3, [r7, #12]
    9d9c:	629a      	str	r2, [r3, #40]	; 0x28
    mp_obj_t *c = (mp_obj_t*)emit_get_cur_to_write_bytecode(emit, sizeof(mp_obj_t));
    9d9e:	2104      	movs	r1, #4
    9da0:	68f8      	ldr	r0, [r7, #12]
    9da2:	f7ff fef1 	bl	9b88 <emit_get_cur_to_write_bytecode>
    9da6:	6178      	str	r0, [r7, #20]
    // Verify thar c is already uint-aligned
    assert(c == MP_ALIGN(c, sizeof(mp_obj_t)));
    9da8:	697b      	ldr	r3, [r7, #20]
    9daa:	3303      	adds	r3, #3
    9dac:	f023 0303 	bic.w	r3, r3, #3
    9db0:	461a      	mov	r2, r3
    9db2:	697b      	ldr	r3, [r7, #20]
    9db4:	429a      	cmp	r2, r3
    9db6:	d006      	beq.n	9dc6 <emit_write_bytecode_byte_obj+0x4e>
    9db8:	4b06      	ldr	r3, [pc, #24]	; (9dd4 <emit_write_bytecode_byte_obj+0x5c>)
    9dba:	4a07      	ldr	r2, [pc, #28]	; (9dd8 <emit_write_bytecode_byte_obj+0x60>)
    9dbc:	f44f 7182 	mov.w	r1, #260	; 0x104
    9dc0:	4806      	ldr	r0, [pc, #24]	; (9ddc <emit_write_bytecode_byte_obj+0x64>)
    9dc2:	f011 fcdf 	bl	1b784 <__assert_func>
    *c = obj;
    9dc6:	697b      	ldr	r3, [r7, #20]
    9dc8:	687a      	ldr	r2, [r7, #4]
    9dca:	601a      	str	r2, [r3, #0]
    #endif
}
    9dcc:	bf00      	nop
    9dce:	3718      	adds	r7, #24
    9dd0:	46bd      	mov	sp, r7
    9dd2:	bd80      	pop	{r7, pc}
    9dd4:	00021270 	.word	0x00021270
    9dd8:	00021414 	.word	0x00021414
    9ddc:	00021218 	.word	0x00021218

00009de0 <emit_write_bytecode_byte_raw_code>:

STATIC void emit_write_bytecode_byte_raw_code(emit_t *emit, byte b, mp_raw_code_t *rc) {
    9de0:	b580      	push	{r7, lr}
    9de2:	b086      	sub	sp, #24
    9de4:	af00      	add	r7, sp, #0
    9de6:	60f8      	str	r0, [r7, #12]
    9de8:	460b      	mov	r3, r1
    9dea:	607a      	str	r2, [r7, #4]
    9dec:	72fb      	strb	r3, [r7, #11]
    emit_write_bytecode_byte_const(emit, b,
        emit->scope->num_pos_args + emit->scope->num_kwonly_args
        + emit->ct_num_obj + emit->ct_cur_raw_code++, (mp_uint_t)(uintptr_t)rc);
    #else
    // aligns the pointer so it is friendly to GC
    emit_write_bytecode_byte(emit, b);
    9dee:	7afb      	ldrb	r3, [r7, #11]
    9df0:	4619      	mov	r1, r3
    9df2:	68f8      	ldr	r0, [r7, #12]
    9df4:	f7ff ff02 	bl	9bfc <emit_write_bytecode_byte>
    emit->bytecode_offset = (size_t)MP_ALIGN(emit->bytecode_offset, sizeof(void*));
    9df8:	68fb      	ldr	r3, [r7, #12]
    9dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9dfc:	3303      	adds	r3, #3
    9dfe:	f023 0203 	bic.w	r2, r3, #3
    9e02:	68fb      	ldr	r3, [r7, #12]
    9e04:	629a      	str	r2, [r3, #40]	; 0x28
    void **c = (void**)emit_get_cur_to_write_bytecode(emit, sizeof(void*));
    9e06:	2104      	movs	r1, #4
    9e08:	68f8      	ldr	r0, [r7, #12]
    9e0a:	f7ff febd 	bl	9b88 <emit_get_cur_to_write_bytecode>
    9e0e:	6178      	str	r0, [r7, #20]
    // Verify thar c is already uint-aligned
    assert(c == MP_ALIGN(c, sizeof(void*)));
    9e10:	697b      	ldr	r3, [r7, #20]
    9e12:	3303      	adds	r3, #3
    9e14:	f023 0303 	bic.w	r3, r3, #3
    9e18:	461a      	mov	r2, r3
    9e1a:	697b      	ldr	r3, [r7, #20]
    9e1c:	429a      	cmp	r2, r3
    9e1e:	d006      	beq.n	9e2e <emit_write_bytecode_byte_raw_code+0x4e>
    9e20:	4b06      	ldr	r3, [pc, #24]	; (9e3c <emit_write_bytecode_byte_raw_code+0x5c>)
    9e22:	4a07      	ldr	r2, [pc, #28]	; (9e40 <emit_write_bytecode_byte_raw_code+0x60>)
    9e24:	f44f 718a 	mov.w	r1, #276	; 0x114
    9e28:	4806      	ldr	r0, [pc, #24]	; (9e44 <emit_write_bytecode_byte_raw_code+0x64>)
    9e2a:	f011 fcab 	bl	1b784 <__assert_func>
    *c = rc;
    9e2e:	697b      	ldr	r3, [r7, #20]
    9e30:	687a      	ldr	r2, [r7, #4]
    9e32:	601a      	str	r2, [r3, #0]
    #endif
}
    9e34:	bf00      	nop
    9e36:	3718      	adds	r7, #24
    9e38:	46bd      	mov	sp, r7
    9e3a:	bd80      	pop	{r7, pc}
    9e3c:	00021294 	.word	0x00021294
    9e40:	00021434 	.word	0x00021434
    9e44:	00021218 	.word	0x00021218

00009e48 <emit_write_bytecode_byte_unsigned_label>:

// unsigned labels are relative to ip following this instruction, stored as 16 bits
STATIC void emit_write_bytecode_byte_unsigned_label(emit_t *emit, byte b1, mp_uint_t label) {
    9e48:	b580      	push	{r7, lr}
    9e4a:	b086      	sub	sp, #24
    9e4c:	af00      	add	r7, sp, #0
    9e4e:	60f8      	str	r0, [r7, #12]
    9e50:	460b      	mov	r3, r1
    9e52:	607a      	str	r2, [r7, #4]
    9e54:	72fb      	strb	r3, [r7, #11]
    mp_uint_t bytecode_offset;
    if (emit->pass < MP_PASS_EMIT) {
    9e56:	68fb      	ldr	r3, [r7, #12]
    9e58:	795b      	ldrb	r3, [r3, #5]
    9e5a:	2b03      	cmp	r3, #3
    9e5c:	d802      	bhi.n	9e64 <emit_write_bytecode_byte_unsigned_label+0x1c>
        bytecode_offset = 0;
    9e5e:	2300      	movs	r3, #0
    9e60:	617b      	str	r3, [r7, #20]
    9e62:	e00a      	b.n	9e7a <emit_write_bytecode_byte_unsigned_label+0x32>
    } else {
        bytecode_offset = emit->label_offsets[label] - emit->bytecode_offset - 3;
    9e64:	68fb      	ldr	r3, [r7, #12]
    9e66:	69da      	ldr	r2, [r3, #28]
    9e68:	687b      	ldr	r3, [r7, #4]
    9e6a:	009b      	lsls	r3, r3, #2
    9e6c:	4413      	add	r3, r2
    9e6e:	681a      	ldr	r2, [r3, #0]
    9e70:	68fb      	ldr	r3, [r7, #12]
    9e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9e74:	1ad3      	subs	r3, r2, r3
    9e76:	3b03      	subs	r3, #3
    9e78:	617b      	str	r3, [r7, #20]
    }
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    9e7a:	2103      	movs	r1, #3
    9e7c:	68f8      	ldr	r0, [r7, #12]
    9e7e:	f7ff fe83 	bl	9b88 <emit_get_cur_to_write_bytecode>
    9e82:	6138      	str	r0, [r7, #16]
    c[0] = b1;
    9e84:	693b      	ldr	r3, [r7, #16]
    9e86:	7afa      	ldrb	r2, [r7, #11]
    9e88:	701a      	strb	r2, [r3, #0]
    c[1] = bytecode_offset;
    9e8a:	693b      	ldr	r3, [r7, #16]
    9e8c:	3301      	adds	r3, #1
    9e8e:	697a      	ldr	r2, [r7, #20]
    9e90:	b2d2      	uxtb	r2, r2
    9e92:	701a      	strb	r2, [r3, #0]
    c[2] = bytecode_offset >> 8;
    9e94:	693b      	ldr	r3, [r7, #16]
    9e96:	3302      	adds	r3, #2
    9e98:	697a      	ldr	r2, [r7, #20]
    9e9a:	0a12      	lsrs	r2, r2, #8
    9e9c:	b2d2      	uxtb	r2, r2
    9e9e:	701a      	strb	r2, [r3, #0]
}
    9ea0:	bf00      	nop
    9ea2:	3718      	adds	r7, #24
    9ea4:	46bd      	mov	sp, r7
    9ea6:	bd80      	pop	{r7, pc}

00009ea8 <emit_write_bytecode_byte_signed_label>:

// signed labels are relative to ip following this instruction, stored as 16 bits, in excess
STATIC void emit_write_bytecode_byte_signed_label(emit_t *emit, byte b1, mp_uint_t label) {
    9ea8:	b580      	push	{r7, lr}
    9eaa:	b086      	sub	sp, #24
    9eac:	af00      	add	r7, sp, #0
    9eae:	60f8      	str	r0, [r7, #12]
    9eb0:	460b      	mov	r3, r1
    9eb2:	607a      	str	r2, [r7, #4]
    9eb4:	72fb      	strb	r3, [r7, #11]
    int bytecode_offset;
    if (emit->pass < MP_PASS_EMIT) {
    9eb6:	68fb      	ldr	r3, [r7, #12]
    9eb8:	795b      	ldrb	r3, [r3, #5]
    9eba:	2b03      	cmp	r3, #3
    9ebc:	d802      	bhi.n	9ec4 <emit_write_bytecode_byte_signed_label+0x1c>
        bytecode_offset = 0;
    9ebe:	2300      	movs	r3, #0
    9ec0:	617b      	str	r3, [r7, #20]
    9ec2:	e00c      	b.n	9ede <emit_write_bytecode_byte_signed_label+0x36>
    } else {
        bytecode_offset = emit->label_offsets[label] - emit->bytecode_offset - 3 + 0x8000;
    9ec4:	68fb      	ldr	r3, [r7, #12]
    9ec6:	69da      	ldr	r2, [r3, #28]
    9ec8:	687b      	ldr	r3, [r7, #4]
    9eca:	009b      	lsls	r3, r3, #2
    9ecc:	4413      	add	r3, r2
    9ece:	681a      	ldr	r2, [r3, #0]
    9ed0:	68fb      	ldr	r3, [r7, #12]
    9ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9ed4:	1ad3      	subs	r3, r2, r3
    9ed6:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    9eda:	337d      	adds	r3, #125	; 0x7d
    9edc:	617b      	str	r3, [r7, #20]
    }
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    9ede:	2103      	movs	r1, #3
    9ee0:	68f8      	ldr	r0, [r7, #12]
    9ee2:	f7ff fe51 	bl	9b88 <emit_get_cur_to_write_bytecode>
    9ee6:	6138      	str	r0, [r7, #16]
    c[0] = b1;
    9ee8:	693b      	ldr	r3, [r7, #16]
    9eea:	7afa      	ldrb	r2, [r7, #11]
    9eec:	701a      	strb	r2, [r3, #0]
    c[1] = bytecode_offset;
    9eee:	693b      	ldr	r3, [r7, #16]
    9ef0:	3301      	adds	r3, #1
    9ef2:	697a      	ldr	r2, [r7, #20]
    9ef4:	b2d2      	uxtb	r2, r2
    9ef6:	701a      	strb	r2, [r3, #0]
    c[2] = bytecode_offset >> 8;
    9ef8:	693b      	ldr	r3, [r7, #16]
    9efa:	3302      	adds	r3, #2
    9efc:	697a      	ldr	r2, [r7, #20]
    9efe:	1212      	asrs	r2, r2, #8
    9f00:	b2d2      	uxtb	r2, r2
    9f02:	701a      	strb	r2, [r3, #0]
}
    9f04:	bf00      	nop
    9f06:	3718      	adds	r7, #24
    9f08:	46bd      	mov	sp, r7
    9f0a:	bd80      	pop	{r7, pc}

00009f0c <mp_emit_bc_start_pass>:

void mp_emit_bc_start_pass(emit_t *emit, pass_kind_t pass, scope_t *scope) {
    9f0c:	b580      	push	{r7, lr}
    9f0e:	b08c      	sub	sp, #48	; 0x30
    9f10:	af00      	add	r7, sp, #0
    9f12:	60f8      	str	r0, [r7, #12]
    9f14:	60b9      	str	r1, [r7, #8]
    9f16:	607a      	str	r2, [r7, #4]
    emit->pass = pass;
    9f18:	68bb      	ldr	r3, [r7, #8]
    9f1a:	b2da      	uxtb	r2, r3
    9f1c:	68fb      	ldr	r3, [r7, #12]
    9f1e:	715a      	strb	r2, [r3, #5]
    emit->stack_size = 0;
    9f20:	68fb      	ldr	r3, [r7, #12]
    9f22:	2200      	movs	r2, #0
    9f24:	609a      	str	r2, [r3, #8]
    emit->last_emit_was_return_value = false;
    9f26:	68fb      	ldr	r3, [r7, #12]
    9f28:	2200      	movs	r2, #0
    9f2a:	719a      	strb	r2, [r3, #6]
    emit->scope = scope;
    9f2c:	68fb      	ldr	r3, [r7, #12]
    9f2e:	687a      	ldr	r2, [r7, #4]
    9f30:	60da      	str	r2, [r3, #12]
    emit->last_source_line_offset = 0;
    9f32:	68fb      	ldr	r3, [r7, #12]
    9f34:	2200      	movs	r2, #0
    9f36:	611a      	str	r2, [r3, #16]
    emit->last_source_line = 1;
    9f38:	68fb      	ldr	r3, [r7, #12]
    9f3a:	2201      	movs	r2, #1
    9f3c:	615a      	str	r2, [r3, #20]
    #ifndef NDEBUG
    // With debugging enabled labels are checked for unique assignment
    if (pass < MP_PASS_EMIT && emit->label_offsets != NULL) {
    9f3e:	68bb      	ldr	r3, [r7, #8]
    9f40:	2b03      	cmp	r3, #3
    9f42:	d80d      	bhi.n	9f60 <mp_emit_bc_start_pass+0x54>
    9f44:	68fb      	ldr	r3, [r7, #12]
    9f46:	69db      	ldr	r3, [r3, #28]
    9f48:	2b00      	cmp	r3, #0
    9f4a:	d009      	beq.n	9f60 <mp_emit_bc_start_pass+0x54>
        memset(emit->label_offsets, -1, emit->max_num_labels * sizeof(mp_uint_t));
    9f4c:	68fb      	ldr	r3, [r7, #12]
    9f4e:	69d8      	ldr	r0, [r3, #28]
    9f50:	68fb      	ldr	r3, [r7, #12]
    9f52:	699b      	ldr	r3, [r3, #24]
    9f54:	009b      	lsls	r3, r3, #2
    9f56:	461a      	mov	r2, r3
    9f58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9f5c:	f012 ffb4 	bl	1cec8 <memset>
    }
    #endif
    emit->bytecode_offset = 0;
    9f60:	68fb      	ldr	r3, [r7, #12]
    9f62:	2200      	movs	r2, #0
    9f64:	629a      	str	r2, [r3, #40]	; 0x28
    emit->code_info_offset = 0;
    9f66:	68fb      	ldr	r3, [r7, #12]
    9f68:	2200      	movs	r2, #0
    9f6a:	621a      	str	r2, [r3, #32]

    // Write local state size and exception stack size.
    {
        mp_uint_t n_state = scope->num_locals + scope->stack_size;
    9f6c:	687b      	ldr	r3, [r7, #4]
    9f6e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    9f70:	461a      	mov	r2, r3
    9f72:	687b      	ldr	r3, [r7, #4]
    9f74:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    9f76:	4413      	add	r3, r2
    9f78:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (n_state == 0) {
    9f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9f7c:	2b00      	cmp	r3, #0
    9f7e:	d101      	bne.n	9f84 <mp_emit_bc_start_pass+0x78>
            // Need at least 1 entry in the state, in the case an exception is
            // propagated through this function, the exception is returned in
            // the highest slot in the state (fastn[0], see vm.c).
            n_state = 1;
    9f80:	2301      	movs	r3, #1
    9f82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        emit_write_code_info_uint(emit, n_state);
    9f84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    9f86:	68f8      	ldr	r0, [r7, #12]
    9f88:	f7ff fdde 	bl	9b48 <emit_write_code_info_uint>
        emit_write_code_info_uint(emit, scope->exc_stack_size);
    9f8c:	687b      	ldr	r3, [r7, #4]
    9f8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    9f90:	4619      	mov	r1, r3
    9f92:	68f8      	ldr	r0, [r7, #12]
    9f94:	f7ff fdd8 	bl	9b48 <emit_write_code_info_uint>
    }

    // Write scope flags and number of arguments.
    // TODO check that num args all fit in a byte
    emit_write_code_info_byte(emit, emit->scope->scope_flags);
    9f98:	68fb      	ldr	r3, [r7, #12]
    9f9a:	68db      	ldr	r3, [r3, #12]
    9f9c:	8b1b      	ldrh	r3, [r3, #24]
    9f9e:	b2db      	uxtb	r3, r3
    9fa0:	4619      	mov	r1, r3
    9fa2:	68f8      	ldr	r0, [r7, #12]
    9fa4:	f7ff fdbe 	bl	9b24 <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_pos_args);
    9fa8:	68fb      	ldr	r3, [r7, #12]
    9faa:	68db      	ldr	r3, [r3, #12]
    9fac:	8b9b      	ldrh	r3, [r3, #28]
    9fae:	b2db      	uxtb	r3, r3
    9fb0:	4619      	mov	r1, r3
    9fb2:	68f8      	ldr	r0, [r7, #12]
    9fb4:	f7ff fdb6 	bl	9b24 <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_kwonly_args);
    9fb8:	68fb      	ldr	r3, [r7, #12]
    9fba:	68db      	ldr	r3, [r3, #12]
    9fbc:	8bdb      	ldrh	r3, [r3, #30]
    9fbe:	b2db      	uxtb	r3, r3
    9fc0:	4619      	mov	r1, r3
    9fc2:	68f8      	ldr	r0, [r7, #12]
    9fc4:	f7ff fdae 	bl	9b24 <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_def_pos_args);
    9fc8:	68fb      	ldr	r3, [r7, #12]
    9fca:	68db      	ldr	r3, [r3, #12]
    9fcc:	8c1b      	ldrh	r3, [r3, #32]
    9fce:	b2db      	uxtb	r3, r3
    9fd0:	4619      	mov	r1, r3
    9fd2:	68f8      	ldr	r0, [r7, #12]
    9fd4:	f7ff fda6 	bl	9b24 <emit_write_code_info_byte>

    // Write size of the rest of the code info.  We don't know how big this
    // variable uint will be on the MP_PASS_CODE_SIZE pass so we reserve 2 bytes
    // for it and hope that is enough!  TODO assert this or something.
    if (pass == MP_PASS_EMIT) {
    9fd8:	68bb      	ldr	r3, [r7, #8]
    9fda:	2b04      	cmp	r3, #4
    9fdc:	d109      	bne.n	9ff2 <mp_emit_bc_start_pass+0xe6>
        emit_write_code_info_uint(emit, emit->code_info_size - emit->code_info_offset);
    9fde:	68fb      	ldr	r3, [r7, #12]
    9fe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    9fe2:	68fb      	ldr	r3, [r7, #12]
    9fe4:	6a1b      	ldr	r3, [r3, #32]
    9fe6:	1ad3      	subs	r3, r2, r3
    9fe8:	4619      	mov	r1, r3
    9fea:	68f8      	ldr	r0, [r7, #12]
    9fec:	f7ff fdac 	bl	9b48 <emit_write_code_info_uint>
    9ff0:	e003      	b.n	9ffa <mp_emit_bc_start_pass+0xee>
    } else  {
        emit_get_cur_to_write_code_info(emit, 2);
    9ff2:	2102      	movs	r1, #2
    9ff4:	68f8      	ldr	r0, [r7, #12]
    9ff6:	f7ff fd5f 	bl	9ab8 <emit_get_cur_to_write_code_info>
    }

    // Write the name and source file of this function.
    emit_write_code_info_qstr(emit, scope->simple_name);
    9ffa:	687b      	ldr	r3, [r7, #4]
    9ffc:	8adb      	ldrh	r3, [r3, #22]
    9ffe:	4619      	mov	r1, r3
    a000:	68f8      	ldr	r0, [r7, #12]
    a002:	f7ff fdb1 	bl	9b68 <emit_write_code_info_qstr>
    emit_write_code_info_qstr(emit, scope->source_file);
    a006:	687b      	ldr	r3, [r7, #4]
    a008:	8a9b      	ldrh	r3, [r3, #20]
    a00a:	4619      	mov	r1, r3
    a00c:	68f8      	ldr	r0, [r7, #12]
    a00e:	f7ff fdab 	bl	9b68 <emit_write_code_info_qstr>

    // bytecode prelude: initialise closed over variables
    for (int i = 0; i < scope->id_info_len; i++) {
    a012:	2300      	movs	r3, #0
    a014:	62bb      	str	r3, [r7, #40]	; 0x28
    a016:	e01e      	b.n	a056 <mp_emit_bc_start_pass+0x14a>
        id_info_t *id = &scope->id_info[i];
    a018:	687b      	ldr	r3, [r7, #4]
    a01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a01e:	00db      	lsls	r3, r3, #3
    a020:	4413      	add	r3, r2
    a022:	61bb      	str	r3, [r7, #24]
        if (id->kind == ID_INFO_KIND_CELL) {
    a024:	69bb      	ldr	r3, [r7, #24]
    a026:	781b      	ldrb	r3, [r3, #0]
    a028:	2b04      	cmp	r3, #4
    a02a:	d111      	bne.n	a050 <mp_emit_bc_start_pass+0x144>
            assert(id->local_num < 255);
    a02c:	69bb      	ldr	r3, [r7, #24]
    a02e:	885b      	ldrh	r3, [r3, #2]
    a030:	2bfe      	cmp	r3, #254	; 0xfe
    a032:	d906      	bls.n	a042 <mp_emit_bc_start_pass+0x136>
    a034:	4b2f      	ldr	r3, [pc, #188]	; (a0f4 <mp_emit_bc_start_pass+0x1e8>)
    a036:	4a30      	ldr	r2, [pc, #192]	; (a0f8 <mp_emit_bc_start_pass+0x1ec>)
    a038:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    a03c:	482f      	ldr	r0, [pc, #188]	; (a0fc <mp_emit_bc_start_pass+0x1f0>)
    a03e:	f011 fba1 	bl	1b784 <__assert_func>
            emit_write_bytecode_byte(emit, id->local_num); // write the local which should be converted to a cell
    a042:	69bb      	ldr	r3, [r7, #24]
    a044:	885b      	ldrh	r3, [r3, #2]
    a046:	b2db      	uxtb	r3, r3
    a048:	4619      	mov	r1, r3
    a04a:	68f8      	ldr	r0, [r7, #12]
    a04c:	f7ff fdd6 	bl	9bfc <emit_write_bytecode_byte>
    for (int i = 0; i < scope->id_info_len; i++) {
    a050:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a052:	3301      	adds	r3, #1
    a054:	62bb      	str	r3, [r7, #40]	; 0x28
    a056:	687b      	ldr	r3, [r7, #4]
    a058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    a05a:	461a      	mov	r2, r3
    a05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a05e:	429a      	cmp	r2, r3
    a060:	dcda      	bgt.n	a018 <mp_emit_bc_start_pass+0x10c>
        }
    }
    emit_write_bytecode_byte(emit, 255); // end of list sentinel
    a062:	21ff      	movs	r1, #255	; 0xff
    a064:	68f8      	ldr	r0, [r7, #12]
    a066:	f7ff fdc9 	bl	9bfc <emit_write_bytecode_byte>
    #if MICROPY_PERSISTENT_CODE
    emit->ct_cur_obj = 0;
    emit->ct_cur_raw_code = 0;
    #endif

    if (pass == MP_PASS_EMIT) {
    a06a:	68bb      	ldr	r3, [r7, #8]
    a06c:	2b04      	cmp	r3, #4
    a06e:	d13c      	bne.n	a0ea <mp_emit_bc_start_pass+0x1de>
        // parameter we use "*" as its name (since no argument can ever be named
        // "*").  We could use a blank qstr but "*" is better for debugging.
        // Note: there is some wasted RAM here for the case of storing a qstr
        // for each closed-over variable, and maybe there is a better way to do
        // it, but that would require changes to mp_setup_code_state.
        for (int i = 0; i < scope->num_pos_args + scope->num_kwonly_args; i++) {
    a070:	2300      	movs	r3, #0
    a072:	627b      	str	r3, [r7, #36]	; 0x24
    a074:	e030      	b.n	a0d8 <mp_emit_bc_start_pass+0x1cc>
            qstr qst = MP_QSTR__star_;
    a076:	2328      	movs	r3, #40	; 0x28
    a078:	623b      	str	r3, [r7, #32]
            for (int j = 0; j < scope->id_info_len; ++j) {
    a07a:	2300      	movs	r3, #0
    a07c:	61fb      	str	r3, [r7, #28]
    a07e:	e018      	b.n	a0b2 <mp_emit_bc_start_pass+0x1a6>
                id_info_t *id = &scope->id_info[j];
    a080:	687b      	ldr	r3, [r7, #4]
    a082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a084:	69fb      	ldr	r3, [r7, #28]
    a086:	00db      	lsls	r3, r3, #3
    a088:	4413      	add	r3, r2
    a08a:	617b      	str	r3, [r7, #20]
                if ((id->flags & ID_FLAG_IS_PARAM) && id->local_num == i) {
    a08c:	697b      	ldr	r3, [r7, #20]
    a08e:	785b      	ldrb	r3, [r3, #1]
    a090:	f003 0301 	and.w	r3, r3, #1
    a094:	2b00      	cmp	r3, #0
    a096:	d009      	beq.n	a0ac <mp_emit_bc_start_pass+0x1a0>
    a098:	697b      	ldr	r3, [r7, #20]
    a09a:	885b      	ldrh	r3, [r3, #2]
    a09c:	461a      	mov	r2, r3
    a09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a0a0:	429a      	cmp	r2, r3
    a0a2:	d103      	bne.n	a0ac <mp_emit_bc_start_pass+0x1a0>
                    qst = id->qst;
    a0a4:	697b      	ldr	r3, [r7, #20]
    a0a6:	685b      	ldr	r3, [r3, #4]
    a0a8:	623b      	str	r3, [r7, #32]
                    break;
    a0aa:	e008      	b.n	a0be <mp_emit_bc_start_pass+0x1b2>
            for (int j = 0; j < scope->id_info_len; ++j) {
    a0ac:	69fb      	ldr	r3, [r7, #28]
    a0ae:	3301      	adds	r3, #1
    a0b0:	61fb      	str	r3, [r7, #28]
    a0b2:	687b      	ldr	r3, [r7, #4]
    a0b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    a0b6:	461a      	mov	r2, r3
    a0b8:	69fb      	ldr	r3, [r7, #28]
    a0ba:	429a      	cmp	r2, r3
    a0bc:	dce0      	bgt.n	a080 <mp_emit_bc_start_pass+0x174>
                }
            }
            emit->const_table[i] = (mp_uint_t)MP_OBJ_NEW_QSTR(qst);
    a0be:	68fb      	ldr	r3, [r7, #12]
    a0c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    a0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a0c4:	009b      	lsls	r3, r3, #2
    a0c6:	4413      	add	r3, r2
    a0c8:	6a3a      	ldr	r2, [r7, #32]
    a0ca:	0092      	lsls	r2, r2, #2
    a0cc:	f042 0202 	orr.w	r2, r2, #2
    a0d0:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < scope->num_pos_args + scope->num_kwonly_args; i++) {
    a0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a0d4:	3301      	adds	r3, #1
    a0d6:	627b      	str	r3, [r7, #36]	; 0x24
    a0d8:	687b      	ldr	r3, [r7, #4]
    a0da:	8b9b      	ldrh	r3, [r3, #28]
    a0dc:	461a      	mov	r2, r3
    a0de:	687b      	ldr	r3, [r7, #4]
    a0e0:	8bdb      	ldrh	r3, [r3, #30]
    a0e2:	441a      	add	r2, r3
    a0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a0e6:	429a      	cmp	r2, r3
    a0e8:	dcc5      	bgt.n	a076 <mp_emit_bc_start_pass+0x16a>
        }
    }
}
    a0ea:	bf00      	nop
    a0ec:	3730      	adds	r7, #48	; 0x30
    a0ee:	46bd      	mov	sp, r7
    a0f0:	bd80      	pop	{r7, pc}
    a0f2:	bf00      	nop
    a0f4:	000212b4 	.word	0x000212b4
    a0f8:	00021458 	.word	0x00021458
    a0fc:	00021218 	.word	0x00021218

0000a100 <mp_emit_bc_end_pass>:

void mp_emit_bc_end_pass(emit_t *emit) {
    a100:	b580      	push	{r7, lr}
    a102:	b082      	sub	sp, #8
    a104:	af00      	add	r7, sp, #0
    a106:	6078      	str	r0, [r7, #4]
    if (emit->pass == MP_PASS_SCOPE) {
    a108:	687b      	ldr	r3, [r7, #4]
    a10a:	795b      	ldrb	r3, [r3, #5]
    a10c:	2b01      	cmp	r3, #1
    a10e:	d04d      	beq.n	a1ac <mp_emit_bc_end_pass+0xac>
        return;
    }

    // check stack is back to zero size
    assert(emit->stack_size == 0);
    a110:	687b      	ldr	r3, [r7, #4]
    a112:	689b      	ldr	r3, [r3, #8]
    a114:	2b00      	cmp	r3, #0
    a116:	d006      	beq.n	a126 <mp_emit_bc_end_pass+0x26>
    a118:	4b26      	ldr	r3, [pc, #152]	; (a1b4 <mp_emit_bc_end_pass+0xb4>)
    a11a:	4a27      	ldr	r2, [pc, #156]	; (a1b8 <mp_emit_bc_end_pass+0xb8>)
    a11c:	f240 1199 	movw	r1, #409	; 0x199
    a120:	4826      	ldr	r0, [pc, #152]	; (a1bc <mp_emit_bc_end_pass+0xbc>)
    a122:	f011 fb2f 	bl	1b784 <__assert_func>

    emit_write_code_info_byte(emit, 0); // end of line number info
    a126:	2100      	movs	r1, #0
    a128:	6878      	ldr	r0, [r7, #4]
    a12a:	f7ff fcfb 	bl	9b24 <emit_write_code_info_byte>
    #if MICROPY_PERSISTENT_CODE
    assert(emit->pass <= MP_PASS_STACK_SIZE || (emit->ct_num_obj == emit->ct_cur_obj));
    emit->ct_num_obj = emit->ct_cur_obj;
    #endif

    if (emit->pass == MP_PASS_CODE_SIZE) {
    a12e:	687b      	ldr	r3, [r7, #4]
    a130:	795b      	ldrb	r3, [r3, #5]
    a132:	2b03      	cmp	r3, #3
    a134:	d129      	bne.n	a18a <mp_emit_bc_end_pass+0x8a>
        #if !MICROPY_PERSISTENT_CODE
        // so bytecode is aligned
        emit->code_info_offset = (size_t)MP_ALIGN(emit->code_info_offset, sizeof(mp_uint_t));
    a136:	687b      	ldr	r3, [r7, #4]
    a138:	6a1b      	ldr	r3, [r3, #32]
    a13a:	3303      	adds	r3, #3
    a13c:	f023 0203 	bic.w	r2, r3, #3
    a140:	687b      	ldr	r3, [r7, #4]
    a142:	621a      	str	r2, [r3, #32]
        #endif

        // calculate size of total code-info + bytecode, in bytes
        emit->code_info_size = emit->code_info_offset;
    a144:	687b      	ldr	r3, [r7, #4]
    a146:	6a1a      	ldr	r2, [r3, #32]
    a148:	687b      	ldr	r3, [r7, #4]
    a14a:	625a      	str	r2, [r3, #36]	; 0x24
        emit->bytecode_size = emit->bytecode_offset;
    a14c:	687b      	ldr	r3, [r7, #4]
    a14e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a150:	687b      	ldr	r3, [r7, #4]
    a152:	62da      	str	r2, [r3, #44]	; 0x2c
        emit->code_base = m_new0(byte, emit->code_info_size + emit->bytecode_size);
    a154:	687b      	ldr	r3, [r7, #4]
    a156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a158:	687b      	ldr	r3, [r7, #4]
    a15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a15c:	4413      	add	r3, r2
    a15e:	4618      	mov	r0, r3
    a160:	f7f6 f91a 	bl	398 <m_malloc0>
    a164:	4602      	mov	r2, r0
    a166:	687b      	ldr	r3, [r7, #4]
    a168:	631a      	str	r2, [r3, #48]	; 0x30
        #if MICROPY_PERSISTENT_CODE
        emit->const_table = m_new0(mp_uint_t,
            emit->scope->num_pos_args + emit->scope->num_kwonly_args
            + emit->ct_cur_obj + emit->ct_cur_raw_code);
        #else
        emit->const_table = m_new0(mp_uint_t,
    a16a:	687b      	ldr	r3, [r7, #4]
    a16c:	68db      	ldr	r3, [r3, #12]
    a16e:	8b9b      	ldrh	r3, [r3, #28]
    a170:	461a      	mov	r2, r3
    a172:	687b      	ldr	r3, [r7, #4]
    a174:	68db      	ldr	r3, [r3, #12]
    a176:	8bdb      	ldrh	r3, [r3, #30]
    a178:	4413      	add	r3, r2
    a17a:	009b      	lsls	r3, r3, #2
    a17c:	4618      	mov	r0, r3
    a17e:	f7f6 f90b 	bl	398 <m_malloc0>
    a182:	4602      	mov	r2, r0
    a184:	687b      	ldr	r3, [r7, #4]
    a186:	635a      	str	r2, [r3, #52]	; 0x34
    a188:	e011      	b.n	a1ae <mp_emit_bc_end_pass+0xae>
            emit->scope->num_pos_args + emit->scope->num_kwonly_args);
        #endif

    } else if (emit->pass == MP_PASS_EMIT) {
    a18a:	687b      	ldr	r3, [r7, #4]
    a18c:	795b      	ldrb	r3, [r3, #5]
    a18e:	2b04      	cmp	r3, #4
    a190:	d10d      	bne.n	a1ae <mp_emit_bc_end_pass+0xae>
        mp_emit_glue_assign_bytecode(emit->scope->raw_code, emit->code_base,
    a192:	687b      	ldr	r3, [r7, #4]
    a194:	68db      	ldr	r3, [r3, #12]
    a196:	6918      	ldr	r0, [r3, #16]
    a198:	687b      	ldr	r3, [r7, #4]
    a19a:	6b19      	ldr	r1, [r3, #48]	; 0x30
            #if MICROPY_PERSISTENT_CODE_SAVE || MICROPY_DEBUG_PRINTERS
            emit->code_info_size + emit->bytecode_size,
            #endif
            emit->const_table,
    a19c:	687b      	ldr	r3, [r7, #4]
    a19e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
            #if MICROPY_PERSISTENT_CODE_SAVE
            emit->ct_cur_obj, emit->ct_cur_raw_code,
            #endif
            emit->scope->scope_flags);
    a1a0:	687b      	ldr	r3, [r7, #4]
    a1a2:	68db      	ldr	r3, [r3, #12]
    a1a4:	8b1b      	ldrh	r3, [r3, #24]
        mp_emit_glue_assign_bytecode(emit->scope->raw_code, emit->code_base,
    a1a6:	f001 f82f 	bl	b208 <mp_emit_glue_assign_bytecode>
    a1aa:	e000      	b.n	a1ae <mp_emit_bc_end_pass+0xae>
        return;
    a1ac:	bf00      	nop
    }
}
    a1ae:	3708      	adds	r7, #8
    a1b0:	46bd      	mov	sp, r7
    a1b2:	bd80      	pop	{r7, pc}
    a1b4:	000212c8 	.word	0x000212c8
    a1b8:	00021470 	.word	0x00021470
    a1bc:	00021218 	.word	0x00021218

0000a1c0 <mp_emit_bc_last_emit_was_return_value>:

bool mp_emit_bc_last_emit_was_return_value(emit_t *emit) {
    a1c0:	b480      	push	{r7}
    a1c2:	b083      	sub	sp, #12
    a1c4:	af00      	add	r7, sp, #0
    a1c6:	6078      	str	r0, [r7, #4]
    return emit->last_emit_was_return_value;
    a1c8:	687b      	ldr	r3, [r7, #4]
    a1ca:	799b      	ldrb	r3, [r3, #6]
    a1cc:	2b00      	cmp	r3, #0
    a1ce:	bf14      	ite	ne
    a1d0:	2301      	movne	r3, #1
    a1d2:	2300      	moveq	r3, #0
    a1d4:	b2db      	uxtb	r3, r3
}
    a1d6:	4618      	mov	r0, r3
    a1d8:	370c      	adds	r7, #12
    a1da:	46bd      	mov	sp, r7
    a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1e0:	4770      	bx	lr
    a1e2:	bf00      	nop

0000a1e4 <mp_emit_bc_adjust_stack_size>:

void mp_emit_bc_adjust_stack_size(emit_t *emit, mp_int_t delta) {
    a1e4:	b580      	push	{r7, lr}
    a1e6:	b082      	sub	sp, #8
    a1e8:	af00      	add	r7, sp, #0
    a1ea:	6078      	str	r0, [r7, #4]
    a1ec:	6039      	str	r1, [r7, #0]
    if (emit->pass == MP_PASS_SCOPE) {
    a1ee:	687b      	ldr	r3, [r7, #4]
    a1f0:	795b      	ldrb	r3, [r3, #5]
    a1f2:	2b01      	cmp	r3, #1
    a1f4:	d023      	beq.n	a23e <mp_emit_bc_adjust_stack_size+0x5a>
        return;
    }
    assert((mp_int_t)emit->stack_size + delta >= 0);
    a1f6:	687b      	ldr	r3, [r7, #4]
    a1f8:	689a      	ldr	r2, [r3, #8]
    a1fa:	683b      	ldr	r3, [r7, #0]
    a1fc:	4413      	add	r3, r2
    a1fe:	2b00      	cmp	r3, #0
    a200:	da06      	bge.n	a210 <mp_emit_bc_adjust_stack_size+0x2c>
    a202:	4b11      	ldr	r3, [pc, #68]	; (a248 <mp_emit_bc_adjust_stack_size+0x64>)
    a204:	4a11      	ldr	r2, [pc, #68]	; (a24c <mp_emit_bc_adjust_stack_size+0x68>)
    a206:	f240 11cb 	movw	r1, #459	; 0x1cb
    a20a:	4811      	ldr	r0, [pc, #68]	; (a250 <mp_emit_bc_adjust_stack_size+0x6c>)
    a20c:	f011 faba 	bl	1b784 <__assert_func>
    emit->stack_size += delta;
    a210:	687b      	ldr	r3, [r7, #4]
    a212:	689a      	ldr	r2, [r3, #8]
    a214:	683b      	ldr	r3, [r7, #0]
    a216:	441a      	add	r2, r3
    a218:	687b      	ldr	r3, [r7, #4]
    a21a:	609a      	str	r2, [r3, #8]
    if (emit->stack_size > emit->scope->stack_size) {
    a21c:	687b      	ldr	r3, [r7, #4]
    a21e:	689b      	ldr	r3, [r3, #8]
    a220:	687a      	ldr	r2, [r7, #4]
    a222:	68d2      	ldr	r2, [r2, #12]
    a224:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    a226:	4293      	cmp	r3, r2
    a228:	dd05      	ble.n	a236 <mp_emit_bc_adjust_stack_size+0x52>
        emit->scope->stack_size = emit->stack_size;
    a22a:	687b      	ldr	r3, [r7, #4]
    a22c:	68db      	ldr	r3, [r3, #12]
    a22e:	687a      	ldr	r2, [r7, #4]
    a230:	6892      	ldr	r2, [r2, #8]
    a232:	b292      	uxth	r2, r2
    a234:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    emit->last_emit_was_return_value = false;
    a236:	687b      	ldr	r3, [r7, #4]
    a238:	2200      	movs	r2, #0
    a23a:	719a      	strb	r2, [r3, #6]
    a23c:	e000      	b.n	a240 <mp_emit_bc_adjust_stack_size+0x5c>
        return;
    a23e:	bf00      	nop
}
    a240:	3708      	adds	r7, #8
    a242:	46bd      	mov	sp, r7
    a244:	bd80      	pop	{r7, pc}
    a246:	bf00      	nop
    a248:	000212e0 	.word	0x000212e0
    a24c:	00021484 	.word	0x00021484
    a250:	00021218 	.word	0x00021218

0000a254 <emit_bc_pre>:

static inline void emit_bc_pre(emit_t *emit, mp_int_t stack_size_delta) {
    a254:	b580      	push	{r7, lr}
    a256:	b082      	sub	sp, #8
    a258:	af00      	add	r7, sp, #0
    a25a:	6078      	str	r0, [r7, #4]
    a25c:	6039      	str	r1, [r7, #0]
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    a25e:	6839      	ldr	r1, [r7, #0]
    a260:	6878      	ldr	r0, [r7, #4]
    a262:	f7ff ffbf 	bl	a1e4 <mp_emit_bc_adjust_stack_size>
}
    a266:	bf00      	nop
    a268:	3708      	adds	r7, #8
    a26a:	46bd      	mov	sp, r7
    a26c:	bd80      	pop	{r7, pc}
    a26e:	bf00      	nop

0000a270 <mp_emit_bc_set_source_line>:

void mp_emit_bc_set_source_line(emit_t *emit, mp_uint_t source_line) {
    a270:	b480      	push	{r7}
    a272:	b083      	sub	sp, #12
    a274:	af00      	add	r7, sp, #0
    a276:	6078      	str	r0, [r7, #4]
    a278:	6039      	str	r1, [r7, #0]
    }
#else
    (void)emit;
    (void)source_line;
#endif
}
    a27a:	bf00      	nop
    a27c:	370c      	adds	r7, #12
    a27e:	46bd      	mov	sp, r7
    a280:	f85d 7b04 	ldr.w	r7, [sp], #4
    a284:	4770      	bx	lr
    a286:	bf00      	nop

0000a288 <mp_emit_bc_label_assign>:

void mp_emit_bc_label_assign(emit_t *emit, mp_uint_t l) {
    a288:	b580      	push	{r7, lr}
    a28a:	b082      	sub	sp, #8
    a28c:	af00      	add	r7, sp, #0
    a28e:	6078      	str	r0, [r7, #4]
    a290:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    a292:	2100      	movs	r1, #0
    a294:	6878      	ldr	r0, [r7, #4]
    a296:	f7ff ffdd 	bl	a254 <emit_bc_pre>
    if (emit->pass == MP_PASS_SCOPE) {
    a29a:	687b      	ldr	r3, [r7, #4]
    a29c:	795b      	ldrb	r3, [r3, #5]
    a29e:	2b01      	cmp	r3, #1
    a2a0:	d039      	beq.n	a316 <mp_emit_bc_label_assign+0x8e>
        return;
    }
    assert(l < emit->max_num_labels);
    a2a2:	687b      	ldr	r3, [r7, #4]
    a2a4:	699a      	ldr	r2, [r3, #24]
    a2a6:	683b      	ldr	r3, [r7, #0]
    a2a8:	429a      	cmp	r2, r3
    a2aa:	d806      	bhi.n	a2ba <mp_emit_bc_label_assign+0x32>
    a2ac:	4b1c      	ldr	r3, [pc, #112]	; (a320 <mp_emit_bc_label_assign+0x98>)
    a2ae:	4a1d      	ldr	r2, [pc, #116]	; (a324 <mp_emit_bc_label_assign+0x9c>)
    a2b0:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    a2b4:	481c      	ldr	r0, [pc, #112]	; (a328 <mp_emit_bc_label_assign+0xa0>)
    a2b6:	f011 fa65 	bl	1b784 <__assert_func>
    if (emit->pass < MP_PASS_EMIT) {
    a2ba:	687b      	ldr	r3, [r7, #4]
    a2bc:	795b      	ldrb	r3, [r3, #5]
    a2be:	2b03      	cmp	r3, #3
    a2c0:	d818      	bhi.n	a2f4 <mp_emit_bc_label_assign+0x6c>
        // assign label offset
        assert(emit->label_offsets[l] == (mp_uint_t)-1);
    a2c2:	687b      	ldr	r3, [r7, #4]
    a2c4:	69da      	ldr	r2, [r3, #28]
    a2c6:	683b      	ldr	r3, [r7, #0]
    a2c8:	009b      	lsls	r3, r3, #2
    a2ca:	4413      	add	r3, r2
    a2cc:	681b      	ldr	r3, [r3, #0]
    a2ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a2d2:	d006      	beq.n	a2e2 <mp_emit_bc_label_assign+0x5a>
    a2d4:	4b15      	ldr	r3, [pc, #84]	; (a32c <mp_emit_bc_label_assign+0xa4>)
    a2d6:	4a13      	ldr	r2, [pc, #76]	; (a324 <mp_emit_bc_label_assign+0x9c>)
    a2d8:	f240 11f3 	movw	r1, #499	; 0x1f3
    a2dc:	4812      	ldr	r0, [pc, #72]	; (a328 <mp_emit_bc_label_assign+0xa0>)
    a2de:	f011 fa51 	bl	1b784 <__assert_func>
        emit->label_offsets[l] = emit->bytecode_offset;
    a2e2:	687b      	ldr	r3, [r7, #4]
    a2e4:	69da      	ldr	r2, [r3, #28]
    a2e6:	683b      	ldr	r3, [r7, #0]
    a2e8:	009b      	lsls	r3, r3, #2
    a2ea:	4413      	add	r3, r2
    a2ec:	687a      	ldr	r2, [r7, #4]
    a2ee:	6a92      	ldr	r2, [r2, #40]	; 0x28
    a2f0:	601a      	str	r2, [r3, #0]
    a2f2:	e011      	b.n	a318 <mp_emit_bc_label_assign+0x90>
    } else {
        // ensure label offset has not changed from MP_PASS_CODE_SIZE to MP_PASS_EMIT
        assert(emit->label_offsets[l] == emit->bytecode_offset);
    a2f4:	687b      	ldr	r3, [r7, #4]
    a2f6:	69da      	ldr	r2, [r3, #28]
    a2f8:	683b      	ldr	r3, [r7, #0]
    a2fa:	009b      	lsls	r3, r3, #2
    a2fc:	4413      	add	r3, r2
    a2fe:	681a      	ldr	r2, [r3, #0]
    a300:	687b      	ldr	r3, [r7, #4]
    a302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a304:	429a      	cmp	r2, r3
    a306:	d007      	beq.n	a318 <mp_emit_bc_label_assign+0x90>
    a308:	4b09      	ldr	r3, [pc, #36]	; (a330 <mp_emit_bc_label_assign+0xa8>)
    a30a:	4a06      	ldr	r2, [pc, #24]	; (a324 <mp_emit_bc_label_assign+0x9c>)
    a30c:	f240 11f7 	movw	r1, #503	; 0x1f7
    a310:	4805      	ldr	r0, [pc, #20]	; (a328 <mp_emit_bc_label_assign+0xa0>)
    a312:	f011 fa37 	bl	1b784 <__assert_func>
        return;
    a316:	bf00      	nop
    }
}
    a318:	3708      	adds	r7, #8
    a31a:	46bd      	mov	sp, r7
    a31c:	bd80      	pop	{r7, pc}
    a31e:	bf00      	nop
    a320:	00021308 	.word	0x00021308
    a324:	000214a4 	.word	0x000214a4
    a328:	00021218 	.word	0x00021218
    a32c:	00021324 	.word	0x00021324
    a330:	0002134c 	.word	0x0002134c

0000a334 <mp_emit_bc_import>:

void mp_emit_bc_import(emit_t *emit, qstr qst, int kind) {
    a334:	b580      	push	{r7, lr}
    a336:	b084      	sub	sp, #16
    a338:	af00      	add	r7, sp, #0
    a33a:	60f8      	str	r0, [r7, #12]
    a33c:	60b9      	str	r1, [r7, #8]
    a33e:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_IMPORT_NAME + MP_EMIT_IMPORT_NAME == MP_BC_IMPORT_NAME);
    MP_STATIC_ASSERT(MP_BC_IMPORT_NAME + MP_EMIT_IMPORT_FROM == MP_BC_IMPORT_FROM);
    if (kind == MP_EMIT_IMPORT_FROM) {
    a340:	687b      	ldr	r3, [r7, #4]
    a342:	2b01      	cmp	r3, #1
    a344:	d104      	bne.n	a350 <mp_emit_bc_import+0x1c>
        emit_bc_pre(emit, 1);
    a346:	2101      	movs	r1, #1
    a348:	68f8      	ldr	r0, [r7, #12]
    a34a:	f7ff ff83 	bl	a254 <emit_bc_pre>
    a34e:	e004      	b.n	a35a <mp_emit_bc_import+0x26>
    } else {
        emit_bc_pre(emit, -1);
    a350:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a354:	68f8      	ldr	r0, [r7, #12]
    a356:	f7ff ff7d 	bl	a254 <emit_bc_pre>
    }
    if (kind == MP_EMIT_IMPORT_STAR) {
    a35a:	687b      	ldr	r3, [r7, #4]
    a35c:	2b02      	cmp	r3, #2
    a35e:	d104      	bne.n	a36a <mp_emit_bc_import+0x36>
        emit_write_bytecode_byte(emit, MP_BC_IMPORT_STAR);
    a360:	216a      	movs	r1, #106	; 0x6a
    a362:	68f8      	ldr	r0, [r7, #12]
    a364:	f7ff fc4a 	bl	9bfc <emit_write_bytecode_byte>
    } else {
        emit_write_bytecode_byte_qstr(emit, MP_BC_IMPORT_NAME + kind, qst);
    }
}
    a368:	e008      	b.n	a37c <mp_emit_bc_import+0x48>
        emit_write_bytecode_byte_qstr(emit, MP_BC_IMPORT_NAME + kind, qst);
    a36a:	687b      	ldr	r3, [r7, #4]
    a36c:	b2db      	uxtb	r3, r3
    a36e:	3368      	adds	r3, #104	; 0x68
    a370:	b2db      	uxtb	r3, r3
    a372:	68ba      	ldr	r2, [r7, #8]
    a374:	4619      	mov	r1, r3
    a376:	68f8      	ldr	r0, [r7, #12]
    a378:	f7ff fcec 	bl	9d54 <emit_write_bytecode_byte_qstr>
}
    a37c:	bf00      	nop
    a37e:	3710      	adds	r7, #16
    a380:	46bd      	mov	sp, r7
    a382:	bd80      	pop	{r7, pc}

0000a384 <mp_emit_bc_load_const_tok>:

void mp_emit_bc_load_const_tok(emit_t *emit, mp_token_kind_t tok) {
    a384:	b580      	push	{r7, lr}
    a386:	b082      	sub	sp, #8
    a388:	af00      	add	r7, sp, #0
    a38a:	6078      	str	r0, [r7, #4]
    a38c:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a38e:	2101      	movs	r1, #1
    a390:	6878      	ldr	r0, [r7, #4]
    a392:	f7ff ff5f 	bl	a254 <emit_bc_pre>
    switch (tok) {
    a396:	683b      	ldr	r3, [r7, #0]
    a398:	2b0e      	cmp	r3, #14
    a39a:	d008      	beq.n	a3ae <mp_emit_bc_load_const_tok+0x2a>
    a39c:	2b0f      	cmp	r3, #15
    a39e:	d00b      	beq.n	a3b8 <mp_emit_bc_load_const_tok+0x34>
    a3a0:	2b0d      	cmp	r3, #13
    a3a2:	d10e      	bne.n	a3c2 <mp_emit_bc_load_const_tok+0x3e>
        case MP_TOKEN_KW_FALSE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_FALSE); break;
    a3a4:	2110      	movs	r1, #16
    a3a6:	6878      	ldr	r0, [r7, #4]
    a3a8:	f7ff fc28 	bl	9bfc <emit_write_bytecode_byte>
    a3ac:	e019      	b.n	a3e2 <mp_emit_bc_load_const_tok+0x5e>
        case MP_TOKEN_KW_NONE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_NONE); break;
    a3ae:	2111      	movs	r1, #17
    a3b0:	6878      	ldr	r0, [r7, #4]
    a3b2:	f7ff fc23 	bl	9bfc <emit_write_bytecode_byte>
    a3b6:	e014      	b.n	a3e2 <mp_emit_bc_load_const_tok+0x5e>
        case MP_TOKEN_KW_TRUE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_TRUE); break;
    a3b8:	2112      	movs	r1, #18
    a3ba:	6878      	ldr	r0, [r7, #4]
    a3bc:	f7ff fc1e 	bl	9bfc <emit_write_bytecode_byte>
    a3c0:	e00f      	b.n	a3e2 <mp_emit_bc_load_const_tok+0x5e>
        default:
            assert(tok == MP_TOKEN_ELLIPSIS);
    a3c2:	683b      	ldr	r3, [r7, #0]
    a3c4:	2b0c      	cmp	r3, #12
    a3c6:	d006      	beq.n	a3d6 <mp_emit_bc_load_const_tok+0x52>
    a3c8:	4b08      	ldr	r3, [pc, #32]	; (a3ec <mp_emit_bc_load_const_tok+0x68>)
    a3ca:	4a09      	ldr	r2, [pc, #36]	; (a3f0 <mp_emit_bc_load_const_tok+0x6c>)
    a3cc:	f240 2111 	movw	r1, #529	; 0x211
    a3d0:	4808      	ldr	r0, [pc, #32]	; (a3f4 <mp_emit_bc_load_const_tok+0x70>)
    a3d2:	f011 f9d7 	bl	1b784 <__assert_func>
            emit_write_bytecode_byte_obj(emit, MP_BC_LOAD_CONST_OBJ, MP_OBJ_FROM_PTR(&mp_const_ellipsis_obj));
    a3d6:	4a08      	ldr	r2, [pc, #32]	; (a3f8 <mp_emit_bc_load_const_tok+0x74>)
    a3d8:	2117      	movs	r1, #23
    a3da:	6878      	ldr	r0, [r7, #4]
    a3dc:	f7ff fccc 	bl	9d78 <emit_write_bytecode_byte_obj>
            break;
    a3e0:	bf00      	nop
    }
}
    a3e2:	bf00      	nop
    a3e4:	3708      	adds	r7, #8
    a3e6:	46bd      	mov	sp, r7
    a3e8:	bd80      	pop	{r7, pc}
    a3ea:	bf00      	nop
    a3ec:	0002137c 	.word	0x0002137c
    a3f0:	000214bc 	.word	0x000214bc
    a3f4:	00021218 	.word	0x00021218
    a3f8:	000235b8 	.word	0x000235b8

0000a3fc <mp_emit_bc_load_const_small_int>:

void mp_emit_bc_load_const_small_int(emit_t *emit, mp_int_t arg) {
    a3fc:	b580      	push	{r7, lr}
    a3fe:	b082      	sub	sp, #8
    a400:	af00      	add	r7, sp, #0
    a402:	6078      	str	r0, [r7, #4]
    a404:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a406:	2101      	movs	r1, #1
    a408:	6878      	ldr	r0, [r7, #4]
    a40a:	f7ff ff23 	bl	a254 <emit_bc_pre>
    if (-16 <= arg && arg <= 47) {
    a40e:	683b      	ldr	r3, [r7, #0]
    a410:	f113 0f10 	cmn.w	r3, #16
    a414:	db0b      	blt.n	a42e <mp_emit_bc_load_const_small_int+0x32>
    a416:	683b      	ldr	r3, [r7, #0]
    a418:	2b2f      	cmp	r3, #47	; 0x2f
    a41a:	dc08      	bgt.n	a42e <mp_emit_bc_load_const_small_int+0x32>
        emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_SMALL_INT_MULTI + 16 + arg);
    a41c:	683b      	ldr	r3, [r7, #0]
    a41e:	b2db      	uxtb	r3, r3
    a420:	3b80      	subs	r3, #128	; 0x80
    a422:	b2db      	uxtb	r3, r3
    a424:	4619      	mov	r1, r3
    a426:	6878      	ldr	r0, [r7, #4]
    a428:	f7ff fbe8 	bl	9bfc <emit_write_bytecode_byte>
    a42c:	e004      	b.n	a438 <mp_emit_bc_load_const_small_int+0x3c>
    } else {
        emit_write_bytecode_byte_int(emit, MP_BC_LOAD_CONST_SMALL_INT, arg);
    a42e:	683a      	ldr	r2, [r7, #0]
    a430:	2114      	movs	r1, #20
    a432:	6878      	ldr	r0, [r7, #4]
    a434:	f7ff fc0c 	bl	9c50 <emit_write_bytecode_byte_int>
    }
}
    a438:	bf00      	nop
    a43a:	3708      	adds	r7, #8
    a43c:	46bd      	mov	sp, r7
    a43e:	bd80      	pop	{r7, pc}

0000a440 <mp_emit_bc_load_const_str>:

void mp_emit_bc_load_const_str(emit_t *emit, qstr qst) {
    a440:	b580      	push	{r7, lr}
    a442:	b082      	sub	sp, #8
    a444:	af00      	add	r7, sp, #0
    a446:	6078      	str	r0, [r7, #4]
    a448:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a44a:	2101      	movs	r1, #1
    a44c:	6878      	ldr	r0, [r7, #4]
    a44e:	f7ff ff01 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_CONST_STRING, qst);
    a452:	683a      	ldr	r2, [r7, #0]
    a454:	2116      	movs	r1, #22
    a456:	6878      	ldr	r0, [r7, #4]
    a458:	f7ff fc7c 	bl	9d54 <emit_write_bytecode_byte_qstr>
}
    a45c:	bf00      	nop
    a45e:	3708      	adds	r7, #8
    a460:	46bd      	mov	sp, r7
    a462:	bd80      	pop	{r7, pc}

0000a464 <mp_emit_bc_load_const_obj>:

void mp_emit_bc_load_const_obj(emit_t *emit, mp_obj_t obj) {
    a464:	b580      	push	{r7, lr}
    a466:	b082      	sub	sp, #8
    a468:	af00      	add	r7, sp, #0
    a46a:	6078      	str	r0, [r7, #4]
    a46c:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a46e:	2101      	movs	r1, #1
    a470:	6878      	ldr	r0, [r7, #4]
    a472:	f7ff feef 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte_obj(emit, MP_BC_LOAD_CONST_OBJ, obj);
    a476:	683a      	ldr	r2, [r7, #0]
    a478:	2117      	movs	r1, #23
    a47a:	6878      	ldr	r0, [r7, #4]
    a47c:	f7ff fc7c 	bl	9d78 <emit_write_bytecode_byte_obj>
}
    a480:	bf00      	nop
    a482:	3708      	adds	r7, #8
    a484:	46bd      	mov	sp, r7
    a486:	bd80      	pop	{r7, pc}

0000a488 <mp_emit_bc_load_null>:

void mp_emit_bc_load_null(emit_t *emit) {
    a488:	b580      	push	{r7, lr}
    a48a:	b082      	sub	sp, #8
    a48c:	af00      	add	r7, sp, #0
    a48e:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 1);
    a490:	2101      	movs	r1, #1
    a492:	6878      	ldr	r0, [r7, #4]
    a494:	f7ff fede 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_LOAD_NULL);
    a498:	2118      	movs	r1, #24
    a49a:	6878      	ldr	r0, [r7, #4]
    a49c:	f7ff fbae 	bl	9bfc <emit_write_bytecode_byte>
}
    a4a0:	bf00      	nop
    a4a2:	3708      	adds	r7, #8
    a4a4:	46bd      	mov	sp, r7
    a4a6:	bd80      	pop	{r7, pc}

0000a4a8 <mp_emit_bc_load_local>:

void mp_emit_bc_load_local(emit_t *emit, qstr qst, mp_uint_t local_num, int kind) {
    a4a8:	b580      	push	{r7, lr}
    a4aa:	b084      	sub	sp, #16
    a4ac:	af00      	add	r7, sp, #0
    a4ae:	60f8      	str	r0, [r7, #12]
    a4b0:	60b9      	str	r1, [r7, #8]
    a4b2:	607a      	str	r2, [r7, #4]
    a4b4:	603b      	str	r3, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_LOAD_FAST_N + MP_EMIT_IDOP_LOCAL_FAST == MP_BC_LOAD_FAST_N);
    MP_STATIC_ASSERT(MP_BC_LOAD_FAST_N + MP_EMIT_IDOP_LOCAL_DEREF == MP_BC_LOAD_DEREF);
    (void)qst;
    emit_bc_pre(emit, 1);
    a4b6:	2101      	movs	r1, #1
    a4b8:	68f8      	ldr	r0, [r7, #12]
    a4ba:	f7ff fecb 	bl	a254 <emit_bc_pre>
    if (kind == MP_EMIT_IDOP_LOCAL_FAST && local_num <= 15) {
    a4be:	683b      	ldr	r3, [r7, #0]
    a4c0:	2b00      	cmp	r3, #0
    a4c2:	d10b      	bne.n	a4dc <mp_emit_bc_load_local+0x34>
    a4c4:	687b      	ldr	r3, [r7, #4]
    a4c6:	2b0f      	cmp	r3, #15
    a4c8:	d808      	bhi.n	a4dc <mp_emit_bc_load_local+0x34>
        emit_write_bytecode_byte(emit, MP_BC_LOAD_FAST_MULTI + local_num);
    a4ca:	687b      	ldr	r3, [r7, #4]
    a4cc:	b2db      	uxtb	r3, r3
    a4ce:	3b50      	subs	r3, #80	; 0x50
    a4d0:	b2db      	uxtb	r3, r3
    a4d2:	4619      	mov	r1, r3
    a4d4:	68f8      	ldr	r0, [r7, #12]
    a4d6:	f7ff fb91 	bl	9bfc <emit_write_bytecode_byte>
    a4da:	e008      	b.n	a4ee <mp_emit_bc_load_local+0x46>
    } else {
        emit_write_bytecode_byte_uint(emit, MP_BC_LOAD_FAST_N + kind, local_num);
    a4dc:	683b      	ldr	r3, [r7, #0]
    a4de:	b2db      	uxtb	r3, r3
    a4e0:	3319      	adds	r3, #25
    a4e2:	b2db      	uxtb	r3, r3
    a4e4:	687a      	ldr	r2, [r7, #4]
    a4e6:	4619      	mov	r1, r3
    a4e8:	68f8      	ldr	r0, [r7, #12]
    a4ea:	f7ff fc1b 	bl	9d24 <emit_write_bytecode_byte_uint>
    }
}
    a4ee:	bf00      	nop
    a4f0:	3710      	adds	r7, #16
    a4f2:	46bd      	mov	sp, r7
    a4f4:	bd80      	pop	{r7, pc}
    a4f6:	bf00      	nop

0000a4f8 <mp_emit_bc_load_global>:

void mp_emit_bc_load_global(emit_t *emit, qstr qst, int kind) {
    a4f8:	b580      	push	{r7, lr}
    a4fa:	b084      	sub	sp, #16
    a4fc:	af00      	add	r7, sp, #0
    a4fe:	60f8      	str	r0, [r7, #12]
    a500:	60b9      	str	r1, [r7, #8]
    a502:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_LOAD_NAME + MP_EMIT_IDOP_GLOBAL_NAME == MP_BC_LOAD_NAME);
    MP_STATIC_ASSERT(MP_BC_LOAD_NAME + MP_EMIT_IDOP_GLOBAL_GLOBAL == MP_BC_LOAD_GLOBAL);
    (void)qst;
    emit_bc_pre(emit, 1);
    a504:	2101      	movs	r1, #1
    a506:	68f8      	ldr	r0, [r7, #12]
    a508:	f7ff fea4 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_NAME + kind, qst);
    a50c:	687b      	ldr	r3, [r7, #4]
    a50e:	b2db      	uxtb	r3, r3
    a510:	331b      	adds	r3, #27
    a512:	b2db      	uxtb	r3, r3
    a514:	68ba      	ldr	r2, [r7, #8]
    a516:	4619      	mov	r1, r3
    a518:	68f8      	ldr	r0, [r7, #12]
    a51a:	f7ff fc1b 	bl	9d54 <emit_write_bytecode_byte_qstr>
    if (MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE_DYNAMIC) {
        emit_write_bytecode_byte(emit, 0);
    }
}
    a51e:	bf00      	nop
    a520:	3710      	adds	r7, #16
    a522:	46bd      	mov	sp, r7
    a524:	bd80      	pop	{r7, pc}
    a526:	bf00      	nop

0000a528 <mp_emit_bc_load_method>:

void mp_emit_bc_load_method(emit_t *emit, qstr qst, bool is_super) {
    a528:	b580      	push	{r7, lr}
    a52a:	b084      	sub	sp, #16
    a52c:	af00      	add	r7, sp, #0
    a52e:	60f8      	str	r0, [r7, #12]
    a530:	60b9      	str	r1, [r7, #8]
    a532:	4613      	mov	r3, r2
    a534:	71fb      	strb	r3, [r7, #7]
    emit_bc_pre(emit, 1 - 2 * is_super);
    a536:	79fb      	ldrb	r3, [r7, #7]
    a538:	005b      	lsls	r3, r3, #1
    a53a:	f1c3 0301 	rsb	r3, r3, #1
    a53e:	4619      	mov	r1, r3
    a540:	68f8      	ldr	r0, [r7, #12]
    a542:	f7ff fe87 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, is_super ? MP_BC_LOAD_SUPER_METHOD : MP_BC_LOAD_METHOD, qst);
    a546:	79fb      	ldrb	r3, [r7, #7]
    a548:	2b00      	cmp	r3, #0
    a54a:	d001      	beq.n	a550 <mp_emit_bc_load_method+0x28>
    a54c:	231f      	movs	r3, #31
    a54e:	e000      	b.n	a552 <mp_emit_bc_load_method+0x2a>
    a550:	231e      	movs	r3, #30
    a552:	68ba      	ldr	r2, [r7, #8]
    a554:	4619      	mov	r1, r3
    a556:	68f8      	ldr	r0, [r7, #12]
    a558:	f7ff fbfc 	bl	9d54 <emit_write_bytecode_byte_qstr>
}
    a55c:	bf00      	nop
    a55e:	3710      	adds	r7, #16
    a560:	46bd      	mov	sp, r7
    a562:	bd80      	pop	{r7, pc}

0000a564 <mp_emit_bc_load_build_class>:

void mp_emit_bc_load_build_class(emit_t *emit) {
    a564:	b580      	push	{r7, lr}
    a566:	b082      	sub	sp, #8
    a568:	af00      	add	r7, sp, #0
    a56a:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 1);
    a56c:	2101      	movs	r1, #1
    a56e:	6878      	ldr	r0, [r7, #4]
    a570:	f7ff fe70 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_LOAD_BUILD_CLASS);
    a574:	2120      	movs	r1, #32
    a576:	6878      	ldr	r0, [r7, #4]
    a578:	f7ff fb40 	bl	9bfc <emit_write_bytecode_byte>
}
    a57c:	bf00      	nop
    a57e:	3708      	adds	r7, #8
    a580:	46bd      	mov	sp, r7
    a582:	bd80      	pop	{r7, pc}

0000a584 <mp_emit_bc_subscr>:

void mp_emit_bc_subscr(emit_t *emit, int kind) {
    a584:	b580      	push	{r7, lr}
    a586:	b082      	sub	sp, #8
    a588:	af00      	add	r7, sp, #0
    a58a:	6078      	str	r0, [r7, #4]
    a58c:	6039      	str	r1, [r7, #0]
    if (kind == MP_EMIT_SUBSCR_LOAD) {
    a58e:	683b      	ldr	r3, [r7, #0]
    a590:	2b00      	cmp	r3, #0
    a592:	d109      	bne.n	a5a8 <mp_emit_bc_subscr+0x24>
        emit_bc_pre(emit, -1);
    a594:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a598:	6878      	ldr	r0, [r7, #4]
    a59a:	f7ff fe5b 	bl	a254 <emit_bc_pre>
        emit_write_bytecode_byte(emit, MP_BC_LOAD_SUBSCR);
    a59e:	2121      	movs	r1, #33	; 0x21
    a5a0:	6878      	ldr	r0, [r7, #4]
    a5a2:	f7ff fb2b 	bl	9bfc <emit_write_bytecode_byte>
            mp_emit_bc_rot_three(emit);
        }
        emit_bc_pre(emit, -3);
        emit_write_bytecode_byte(emit, MP_BC_STORE_SUBSCR);
    }
}
    a5a6:	e011      	b.n	a5cc <mp_emit_bc_subscr+0x48>
        if (kind == MP_EMIT_SUBSCR_DELETE) {
    a5a8:	683b      	ldr	r3, [r7, #0]
    a5aa:	2b02      	cmp	r3, #2
    a5ac:	d105      	bne.n	a5ba <mp_emit_bc_subscr+0x36>
            mp_emit_bc_load_null(emit);
    a5ae:	6878      	ldr	r0, [r7, #4]
    a5b0:	f7ff ff6a 	bl	a488 <mp_emit_bc_load_null>
            mp_emit_bc_rot_three(emit);
    a5b4:	6878      	ldr	r0, [r7, #4]
    a5b6:	f000 f8e5 	bl	a784 <mp_emit_bc_rot_three>
        emit_bc_pre(emit, -3);
    a5ba:	f06f 0102 	mvn.w	r1, #2
    a5be:	6878      	ldr	r0, [r7, #4]
    a5c0:	f7ff fe48 	bl	a254 <emit_bc_pre>
        emit_write_bytecode_byte(emit, MP_BC_STORE_SUBSCR);
    a5c4:	2127      	movs	r1, #39	; 0x27
    a5c6:	6878      	ldr	r0, [r7, #4]
    a5c8:	f7ff fb18 	bl	9bfc <emit_write_bytecode_byte>
}
    a5cc:	bf00      	nop
    a5ce:	3708      	adds	r7, #8
    a5d0:	46bd      	mov	sp, r7
    a5d2:	bd80      	pop	{r7, pc}

0000a5d4 <mp_emit_bc_attr>:

void mp_emit_bc_attr(emit_t *emit, qstr qst, int kind) {
    a5d4:	b580      	push	{r7, lr}
    a5d6:	b084      	sub	sp, #16
    a5d8:	af00      	add	r7, sp, #0
    a5da:	60f8      	str	r0, [r7, #12]
    a5dc:	60b9      	str	r1, [r7, #8]
    a5de:	607a      	str	r2, [r7, #4]
    if (kind == MP_EMIT_ATTR_LOAD) {
    a5e0:	687b      	ldr	r3, [r7, #4]
    a5e2:	2b00      	cmp	r3, #0
    a5e4:	d109      	bne.n	a5fa <mp_emit_bc_attr+0x26>
        emit_bc_pre(emit, 0);
    a5e6:	2100      	movs	r1, #0
    a5e8:	68f8      	ldr	r0, [r7, #12]
    a5ea:	f7ff fe33 	bl	a254 <emit_bc_pre>
        emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_ATTR, qst);
    a5ee:	68ba      	ldr	r2, [r7, #8]
    a5f0:	211d      	movs	r1, #29
    a5f2:	68f8      	ldr	r0, [r7, #12]
    a5f4:	f7ff fbae 	bl	9d54 <emit_write_bytecode_byte_qstr>
        emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_ATTR, qst);
    }
    if (MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE_DYNAMIC) {
        emit_write_bytecode_byte(emit, 0);
    }
}
    a5f8:	e012      	b.n	a620 <mp_emit_bc_attr+0x4c>
        if (kind == MP_EMIT_ATTR_DELETE) {
    a5fa:	687b      	ldr	r3, [r7, #4]
    a5fc:	2b02      	cmp	r3, #2
    a5fe:	d105      	bne.n	a60c <mp_emit_bc_attr+0x38>
            mp_emit_bc_load_null(emit);
    a600:	68f8      	ldr	r0, [r7, #12]
    a602:	f7ff ff41 	bl	a488 <mp_emit_bc_load_null>
            mp_emit_bc_rot_two(emit);
    a606:	68f8      	ldr	r0, [r7, #12]
    a608:	f000 f8ac 	bl	a764 <mp_emit_bc_rot_two>
        emit_bc_pre(emit, -2);
    a60c:	f06f 0101 	mvn.w	r1, #1
    a610:	68f8      	ldr	r0, [r7, #12]
    a612:	f7ff fe1f 	bl	a254 <emit_bc_pre>
        emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_ATTR, qst);
    a616:	68ba      	ldr	r2, [r7, #8]
    a618:	2126      	movs	r1, #38	; 0x26
    a61a:	68f8      	ldr	r0, [r7, #12]
    a61c:	f7ff fb9a 	bl	9d54 <emit_write_bytecode_byte_qstr>
}
    a620:	bf00      	nop
    a622:	3710      	adds	r7, #16
    a624:	46bd      	mov	sp, r7
    a626:	bd80      	pop	{r7, pc}

0000a628 <mp_emit_bc_store_local>:

void mp_emit_bc_store_local(emit_t *emit, qstr qst, mp_uint_t local_num, int kind) {
    a628:	b580      	push	{r7, lr}
    a62a:	b084      	sub	sp, #16
    a62c:	af00      	add	r7, sp, #0
    a62e:	60f8      	str	r0, [r7, #12]
    a630:	60b9      	str	r1, [r7, #8]
    a632:	607a      	str	r2, [r7, #4]
    a634:	603b      	str	r3, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_STORE_FAST_N + MP_EMIT_IDOP_LOCAL_FAST == MP_BC_STORE_FAST_N);
    MP_STATIC_ASSERT(MP_BC_STORE_FAST_N + MP_EMIT_IDOP_LOCAL_DEREF == MP_BC_STORE_DEREF);
    (void)qst;
    emit_bc_pre(emit, -1);
    a636:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a63a:	68f8      	ldr	r0, [r7, #12]
    a63c:	f7ff fe0a 	bl	a254 <emit_bc_pre>
    if (kind == MP_EMIT_IDOP_LOCAL_FAST && local_num <= 15) {
    a640:	683b      	ldr	r3, [r7, #0]
    a642:	2b00      	cmp	r3, #0
    a644:	d10b      	bne.n	a65e <mp_emit_bc_store_local+0x36>
    a646:	687b      	ldr	r3, [r7, #4]
    a648:	2b0f      	cmp	r3, #15
    a64a:	d808      	bhi.n	a65e <mp_emit_bc_store_local+0x36>
        emit_write_bytecode_byte(emit, MP_BC_STORE_FAST_MULTI + local_num);
    a64c:	687b      	ldr	r3, [r7, #4]
    a64e:	b2db      	uxtb	r3, r3
    a650:	3b40      	subs	r3, #64	; 0x40
    a652:	b2db      	uxtb	r3, r3
    a654:	4619      	mov	r1, r3
    a656:	68f8      	ldr	r0, [r7, #12]
    a658:	f7ff fad0 	bl	9bfc <emit_write_bytecode_byte>
    a65c:	e008      	b.n	a670 <mp_emit_bc_store_local+0x48>
    } else {
        emit_write_bytecode_byte_uint(emit, MP_BC_STORE_FAST_N + kind, local_num);
    a65e:	683b      	ldr	r3, [r7, #0]
    a660:	b2db      	uxtb	r3, r3
    a662:	3322      	adds	r3, #34	; 0x22
    a664:	b2db      	uxtb	r3, r3
    a666:	687a      	ldr	r2, [r7, #4]
    a668:	4619      	mov	r1, r3
    a66a:	68f8      	ldr	r0, [r7, #12]
    a66c:	f7ff fb5a 	bl	9d24 <emit_write_bytecode_byte_uint>
    }
}
    a670:	bf00      	nop
    a672:	3710      	adds	r7, #16
    a674:	46bd      	mov	sp, r7
    a676:	bd80      	pop	{r7, pc}

0000a678 <mp_emit_bc_store_global>:

void mp_emit_bc_store_global(emit_t *emit, qstr qst, int kind) {
    a678:	b580      	push	{r7, lr}
    a67a:	b084      	sub	sp, #16
    a67c:	af00      	add	r7, sp, #0
    a67e:	60f8      	str	r0, [r7, #12]
    a680:	60b9      	str	r1, [r7, #8]
    a682:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_STORE_NAME + MP_EMIT_IDOP_GLOBAL_NAME == MP_BC_STORE_NAME);
    MP_STATIC_ASSERT(MP_BC_STORE_NAME + MP_EMIT_IDOP_GLOBAL_GLOBAL == MP_BC_STORE_GLOBAL);
    emit_bc_pre(emit, -1);
    a684:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a688:	68f8      	ldr	r0, [r7, #12]
    a68a:	f7ff fde3 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_NAME + kind, qst);
    a68e:	687b      	ldr	r3, [r7, #4]
    a690:	b2db      	uxtb	r3, r3
    a692:	3324      	adds	r3, #36	; 0x24
    a694:	b2db      	uxtb	r3, r3
    a696:	68ba      	ldr	r2, [r7, #8]
    a698:	4619      	mov	r1, r3
    a69a:	68f8      	ldr	r0, [r7, #12]
    a69c:	f7ff fb5a 	bl	9d54 <emit_write_bytecode_byte_qstr>
}
    a6a0:	bf00      	nop
    a6a2:	3710      	adds	r7, #16
    a6a4:	46bd      	mov	sp, r7
    a6a6:	bd80      	pop	{r7, pc}

0000a6a8 <mp_emit_bc_delete_local>:

void mp_emit_bc_delete_local(emit_t *emit, qstr qst, mp_uint_t local_num, int kind) {
    a6a8:	b580      	push	{r7, lr}
    a6aa:	b084      	sub	sp, #16
    a6ac:	af00      	add	r7, sp, #0
    a6ae:	60f8      	str	r0, [r7, #12]
    a6b0:	60b9      	str	r1, [r7, #8]
    a6b2:	607a      	str	r2, [r7, #4]
    a6b4:	603b      	str	r3, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_DELETE_FAST + MP_EMIT_IDOP_LOCAL_FAST == MP_BC_DELETE_FAST);
    MP_STATIC_ASSERT(MP_BC_DELETE_FAST + MP_EMIT_IDOP_LOCAL_DEREF == MP_BC_DELETE_DEREF);
    (void)qst;
    emit_write_bytecode_byte_uint(emit, MP_BC_DELETE_FAST + kind, local_num);
    a6b6:	683b      	ldr	r3, [r7, #0]
    a6b8:	b2db      	uxtb	r3, r3
    a6ba:	3328      	adds	r3, #40	; 0x28
    a6bc:	b2db      	uxtb	r3, r3
    a6be:	687a      	ldr	r2, [r7, #4]
    a6c0:	4619      	mov	r1, r3
    a6c2:	68f8      	ldr	r0, [r7, #12]
    a6c4:	f7ff fb2e 	bl	9d24 <emit_write_bytecode_byte_uint>
}
    a6c8:	bf00      	nop
    a6ca:	3710      	adds	r7, #16
    a6cc:	46bd      	mov	sp, r7
    a6ce:	bd80      	pop	{r7, pc}

0000a6d0 <mp_emit_bc_delete_global>:

void mp_emit_bc_delete_global(emit_t *emit, qstr qst, int kind) {
    a6d0:	b580      	push	{r7, lr}
    a6d2:	b084      	sub	sp, #16
    a6d4:	af00      	add	r7, sp, #0
    a6d6:	60f8      	str	r0, [r7, #12]
    a6d8:	60b9      	str	r1, [r7, #8]
    a6da:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_DELETE_NAME + MP_EMIT_IDOP_GLOBAL_NAME == MP_BC_DELETE_NAME);
    MP_STATIC_ASSERT(MP_BC_DELETE_NAME + MP_EMIT_IDOP_GLOBAL_GLOBAL == MP_BC_DELETE_GLOBAL);
    emit_bc_pre(emit, 0);
    a6dc:	2100      	movs	r1, #0
    a6de:	68f8      	ldr	r0, [r7, #12]
    a6e0:	f7ff fdb8 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_DELETE_NAME + kind, qst);
    a6e4:	687b      	ldr	r3, [r7, #4]
    a6e6:	b2db      	uxtb	r3, r3
    a6e8:	332a      	adds	r3, #42	; 0x2a
    a6ea:	b2db      	uxtb	r3, r3
    a6ec:	68ba      	ldr	r2, [r7, #8]
    a6ee:	4619      	mov	r1, r3
    a6f0:	68f8      	ldr	r0, [r7, #12]
    a6f2:	f7ff fb2f 	bl	9d54 <emit_write_bytecode_byte_qstr>
}
    a6f6:	bf00      	nop
    a6f8:	3710      	adds	r7, #16
    a6fa:	46bd      	mov	sp, r7
    a6fc:	bd80      	pop	{r7, pc}
    a6fe:	bf00      	nop

0000a700 <mp_emit_bc_dup_top>:

void mp_emit_bc_dup_top(emit_t *emit) {
    a700:	b580      	push	{r7, lr}
    a702:	b082      	sub	sp, #8
    a704:	af00      	add	r7, sp, #0
    a706:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 1);
    a708:	2101      	movs	r1, #1
    a70a:	6878      	ldr	r0, [r7, #4]
    a70c:	f7ff fda2 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_DUP_TOP);
    a710:	2130      	movs	r1, #48	; 0x30
    a712:	6878      	ldr	r0, [r7, #4]
    a714:	f7ff fa72 	bl	9bfc <emit_write_bytecode_byte>
}
    a718:	bf00      	nop
    a71a:	3708      	adds	r7, #8
    a71c:	46bd      	mov	sp, r7
    a71e:	bd80      	pop	{r7, pc}

0000a720 <mp_emit_bc_dup_top_two>:

void mp_emit_bc_dup_top_two(emit_t *emit) {
    a720:	b580      	push	{r7, lr}
    a722:	b082      	sub	sp, #8
    a724:	af00      	add	r7, sp, #0
    a726:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 2);
    a728:	2102      	movs	r1, #2
    a72a:	6878      	ldr	r0, [r7, #4]
    a72c:	f7ff fd92 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_DUP_TOP_TWO);
    a730:	2131      	movs	r1, #49	; 0x31
    a732:	6878      	ldr	r0, [r7, #4]
    a734:	f7ff fa62 	bl	9bfc <emit_write_bytecode_byte>
}
    a738:	bf00      	nop
    a73a:	3708      	adds	r7, #8
    a73c:	46bd      	mov	sp, r7
    a73e:	bd80      	pop	{r7, pc}

0000a740 <mp_emit_bc_pop_top>:

void mp_emit_bc_pop_top(emit_t *emit) {
    a740:	b580      	push	{r7, lr}
    a742:	b082      	sub	sp, #8
    a744:	af00      	add	r7, sp, #0
    a746:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    a748:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a74c:	6878      	ldr	r0, [r7, #4]
    a74e:	f7ff fd81 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    a752:	2132      	movs	r1, #50	; 0x32
    a754:	6878      	ldr	r0, [r7, #4]
    a756:	f7ff fa51 	bl	9bfc <emit_write_bytecode_byte>
}
    a75a:	bf00      	nop
    a75c:	3708      	adds	r7, #8
    a75e:	46bd      	mov	sp, r7
    a760:	bd80      	pop	{r7, pc}
    a762:	bf00      	nop

0000a764 <mp_emit_bc_rot_two>:

void mp_emit_bc_rot_two(emit_t *emit) {
    a764:	b580      	push	{r7, lr}
    a766:	b082      	sub	sp, #8
    a768:	af00      	add	r7, sp, #0
    a76a:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a76c:	2100      	movs	r1, #0
    a76e:	6878      	ldr	r0, [r7, #4]
    a770:	f7ff fd70 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_ROT_TWO);
    a774:	2133      	movs	r1, #51	; 0x33
    a776:	6878      	ldr	r0, [r7, #4]
    a778:	f7ff fa40 	bl	9bfc <emit_write_bytecode_byte>
}
    a77c:	bf00      	nop
    a77e:	3708      	adds	r7, #8
    a780:	46bd      	mov	sp, r7
    a782:	bd80      	pop	{r7, pc}

0000a784 <mp_emit_bc_rot_three>:

void mp_emit_bc_rot_three(emit_t *emit) {
    a784:	b580      	push	{r7, lr}
    a786:	b082      	sub	sp, #8
    a788:	af00      	add	r7, sp, #0
    a78a:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a78c:	2100      	movs	r1, #0
    a78e:	6878      	ldr	r0, [r7, #4]
    a790:	f7ff fd60 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_ROT_THREE);
    a794:	2134      	movs	r1, #52	; 0x34
    a796:	6878      	ldr	r0, [r7, #4]
    a798:	f7ff fa30 	bl	9bfc <emit_write_bytecode_byte>
}
    a79c:	bf00      	nop
    a79e:	3708      	adds	r7, #8
    a7a0:	46bd      	mov	sp, r7
    a7a2:	bd80      	pop	{r7, pc}

0000a7a4 <mp_emit_bc_jump>:

void mp_emit_bc_jump(emit_t *emit, mp_uint_t label) {
    a7a4:	b580      	push	{r7, lr}
    a7a6:	b082      	sub	sp, #8
    a7a8:	af00      	add	r7, sp, #0
    a7aa:	6078      	str	r0, [r7, #4]
    a7ac:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    a7ae:	2100      	movs	r1, #0
    a7b0:	6878      	ldr	r0, [r7, #4]
    a7b2:	f7ff fd4f 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP, label);
    a7b6:	683a      	ldr	r2, [r7, #0]
    a7b8:	2135      	movs	r1, #53	; 0x35
    a7ba:	6878      	ldr	r0, [r7, #4]
    a7bc:	f7ff fb74 	bl	9ea8 <emit_write_bytecode_byte_signed_label>
}
    a7c0:	bf00      	nop
    a7c2:	3708      	adds	r7, #8
    a7c4:	46bd      	mov	sp, r7
    a7c6:	bd80      	pop	{r7, pc}

0000a7c8 <mp_emit_bc_pop_jump_if>:

void mp_emit_bc_pop_jump_if(emit_t *emit, bool cond, mp_uint_t label) {
    a7c8:	b580      	push	{r7, lr}
    a7ca:	b084      	sub	sp, #16
    a7cc:	af00      	add	r7, sp, #0
    a7ce:	60f8      	str	r0, [r7, #12]
    a7d0:	460b      	mov	r3, r1
    a7d2:	607a      	str	r2, [r7, #4]
    a7d4:	72fb      	strb	r3, [r7, #11]
    emit_bc_pre(emit, -1);
    a7d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a7da:	68f8      	ldr	r0, [r7, #12]
    a7dc:	f7ff fd3a 	bl	a254 <emit_bc_pre>
    if (cond) {
    a7e0:	7afb      	ldrb	r3, [r7, #11]
    a7e2:	2b00      	cmp	r3, #0
    a7e4:	d005      	beq.n	a7f2 <mp_emit_bc_pop_jump_if+0x2a>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_TRUE, label);
    a7e6:	687a      	ldr	r2, [r7, #4]
    a7e8:	2136      	movs	r1, #54	; 0x36
    a7ea:	68f8      	ldr	r0, [r7, #12]
    a7ec:	f7ff fb5c 	bl	9ea8 <emit_write_bytecode_byte_signed_label>
    } else {
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_FALSE, label);
    }
}
    a7f0:	e004      	b.n	a7fc <mp_emit_bc_pop_jump_if+0x34>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_FALSE, label);
    a7f2:	687a      	ldr	r2, [r7, #4]
    a7f4:	2137      	movs	r1, #55	; 0x37
    a7f6:	68f8      	ldr	r0, [r7, #12]
    a7f8:	f7ff fb56 	bl	9ea8 <emit_write_bytecode_byte_signed_label>
}
    a7fc:	bf00      	nop
    a7fe:	3710      	adds	r7, #16
    a800:	46bd      	mov	sp, r7
    a802:	bd80      	pop	{r7, pc}

0000a804 <mp_emit_bc_jump_if_or_pop>:

void mp_emit_bc_jump_if_or_pop(emit_t *emit, bool cond, mp_uint_t label) {
    a804:	b580      	push	{r7, lr}
    a806:	b084      	sub	sp, #16
    a808:	af00      	add	r7, sp, #0
    a80a:	60f8      	str	r0, [r7, #12]
    a80c:	460b      	mov	r3, r1
    a80e:	607a      	str	r2, [r7, #4]
    a810:	72fb      	strb	r3, [r7, #11]
    emit_bc_pre(emit, -1);
    a812:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a816:	68f8      	ldr	r0, [r7, #12]
    a818:	f7ff fd1c 	bl	a254 <emit_bc_pre>
    if (cond) {
    a81c:	7afb      	ldrb	r3, [r7, #11]
    a81e:	2b00      	cmp	r3, #0
    a820:	d005      	beq.n	a82e <mp_emit_bc_jump_if_or_pop+0x2a>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_TRUE_OR_POP, label);
    a822:	687a      	ldr	r2, [r7, #4]
    a824:	2138      	movs	r1, #56	; 0x38
    a826:	68f8      	ldr	r0, [r7, #12]
    a828:	f7ff fb3e 	bl	9ea8 <emit_write_bytecode_byte_signed_label>
    } else {
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_FALSE_OR_POP, label);
    }
}
    a82c:	e004      	b.n	a838 <mp_emit_bc_jump_if_or_pop+0x34>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_FALSE_OR_POP, label);
    a82e:	687a      	ldr	r2, [r7, #4]
    a830:	2139      	movs	r1, #57	; 0x39
    a832:	68f8      	ldr	r0, [r7, #12]
    a834:	f7ff fb38 	bl	9ea8 <emit_write_bytecode_byte_signed_label>
}
    a838:	bf00      	nop
    a83a:	3710      	adds	r7, #16
    a83c:	46bd      	mov	sp, r7
    a83e:	bd80      	pop	{r7, pc}

0000a840 <mp_emit_bc_unwind_jump>:

void mp_emit_bc_unwind_jump(emit_t *emit, mp_uint_t label, mp_uint_t except_depth) {
    a840:	b580      	push	{r7, lr}
    a842:	b086      	sub	sp, #24
    a844:	af00      	add	r7, sp, #0
    a846:	60f8      	str	r0, [r7, #12]
    a848:	60b9      	str	r1, [r7, #8]
    a84a:	607a      	str	r2, [r7, #4]
    if (except_depth == 0) {
    a84c:	687b      	ldr	r3, [r7, #4]
    a84e:	2b00      	cmp	r3, #0
    a850:	d122      	bne.n	a898 <mp_emit_bc_unwind_jump+0x58>
        emit_bc_pre(emit, 0);
    a852:	2100      	movs	r1, #0
    a854:	68f8      	ldr	r0, [r7, #12]
    a856:	f7ff fcfd 	bl	a254 <emit_bc_pre>
        if (label & MP_EMIT_BREAK_FROM_FOR) {
    a85a:	68bb      	ldr	r3, [r7, #8]
    a85c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    a860:	2b00      	cmp	r3, #0
    a862:	d010      	beq.n	a886 <mp_emit_bc_unwind_jump+0x46>
            // need to pop the iterator if we are breaking out of a for loop
            emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    a864:	2132      	movs	r1, #50	; 0x32
    a866:	68f8      	ldr	r0, [r7, #12]
    a868:	f7ff f9c8 	bl	9bfc <emit_write_bytecode_byte>
            // also pop the iter_buf
            for (size_t i = 0; i < MP_OBJ_ITER_BUF_NSLOTS - 1; ++i) {
    a86c:	2300      	movs	r3, #0
    a86e:	617b      	str	r3, [r7, #20]
    a870:	e006      	b.n	a880 <mp_emit_bc_unwind_jump+0x40>
                emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    a872:	2132      	movs	r1, #50	; 0x32
    a874:	68f8      	ldr	r0, [r7, #12]
    a876:	f7ff f9c1 	bl	9bfc <emit_write_bytecode_byte>
            for (size_t i = 0; i < MP_OBJ_ITER_BUF_NSLOTS - 1; ++i) {
    a87a:	697b      	ldr	r3, [r7, #20]
    a87c:	3301      	adds	r3, #1
    a87e:	617b      	str	r3, [r7, #20]
    a880:	697b      	ldr	r3, [r7, #20]
    a882:	2b02      	cmp	r3, #2
    a884:	d9f5      	bls.n	a872 <mp_emit_bc_unwind_jump+0x32>
            }
        }
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
    a886:	68bb      	ldr	r3, [r7, #8]
    a888:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    a88c:	461a      	mov	r2, r3
    a88e:	2135      	movs	r1, #53	; 0x35
    a890:	68f8      	ldr	r0, [r7, #12]
    a892:	f7ff fb09 	bl	9ea8 <emit_write_bytecode_byte_signed_label>
    } else {
        emit_write_bytecode_byte_signed_label(emit, MP_BC_UNWIND_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
        emit_write_bytecode_byte(emit, ((label & MP_EMIT_BREAK_FROM_FOR) ? 0x80 : 0) | except_depth);
    }
}
    a896:	e017      	b.n	a8c8 <mp_emit_bc_unwind_jump+0x88>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_UNWIND_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
    a898:	68bb      	ldr	r3, [r7, #8]
    a89a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    a89e:	461a      	mov	r2, r3
    a8a0:	2146      	movs	r1, #70	; 0x46
    a8a2:	68f8      	ldr	r0, [r7, #12]
    a8a4:	f7ff fb00 	bl	9ea8 <emit_write_bytecode_byte_signed_label>
        emit_write_bytecode_byte(emit, ((label & MP_EMIT_BREAK_FROM_FOR) ? 0x80 : 0) | except_depth);
    a8a8:	68bb      	ldr	r3, [r7, #8]
    a8aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    a8ae:	2b00      	cmp	r3, #0
    a8b0:	d001      	beq.n	a8b6 <mp_emit_bc_unwind_jump+0x76>
    a8b2:	2280      	movs	r2, #128	; 0x80
    a8b4:	e000      	b.n	a8b8 <mp_emit_bc_unwind_jump+0x78>
    a8b6:	2200      	movs	r2, #0
    a8b8:	687b      	ldr	r3, [r7, #4]
    a8ba:	b2db      	uxtb	r3, r3
    a8bc:	4313      	orrs	r3, r2
    a8be:	b2db      	uxtb	r3, r3
    a8c0:	4619      	mov	r1, r3
    a8c2:	68f8      	ldr	r0, [r7, #12]
    a8c4:	f7ff f99a 	bl	9bfc <emit_write_bytecode_byte>
}
    a8c8:	bf00      	nop
    a8ca:	3718      	adds	r7, #24
    a8cc:	46bd      	mov	sp, r7
    a8ce:	bd80      	pop	{r7, pc}

0000a8d0 <mp_emit_bc_setup_block>:

void mp_emit_bc_setup_block(emit_t *emit, mp_uint_t label, int kind) {
    a8d0:	b580      	push	{r7, lr}
    a8d2:	b084      	sub	sp, #16
    a8d4:	af00      	add	r7, sp, #0
    a8d6:	60f8      	str	r0, [r7, #12]
    a8d8:	60b9      	str	r1, [r7, #8]
    a8da:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_SETUP_WITH + MP_EMIT_SETUP_BLOCK_WITH == MP_BC_SETUP_WITH);
    MP_STATIC_ASSERT(MP_BC_SETUP_WITH + MP_EMIT_SETUP_BLOCK_EXCEPT == MP_BC_SETUP_EXCEPT);
    MP_STATIC_ASSERT(MP_BC_SETUP_WITH + MP_EMIT_SETUP_BLOCK_FINALLY == MP_BC_SETUP_FINALLY);
    if (kind == MP_EMIT_SETUP_BLOCK_WITH) {
    a8dc:	687b      	ldr	r3, [r7, #4]
    a8de:	2b00      	cmp	r3, #0
    a8e0:	d104      	bne.n	a8ec <mp_emit_bc_setup_block+0x1c>
    // The SETUP_WITH opcode pops ctx_mgr from the top of the stack
    // and then pushes 3 entries: __exit__, ctx_mgr, as_value.
        emit_bc_pre(emit, 2);
    a8e2:	2102      	movs	r1, #2
    a8e4:	68f8      	ldr	r0, [r7, #12]
    a8e6:	f7ff fcb5 	bl	a254 <emit_bc_pre>
    a8ea:	e003      	b.n	a8f4 <mp_emit_bc_setup_block+0x24>
    } else {
        emit_bc_pre(emit, 0);
    a8ec:	2100      	movs	r1, #0
    a8ee:	68f8      	ldr	r0, [r7, #12]
    a8f0:	f7ff fcb0 	bl	a254 <emit_bc_pre>
    }
    emit_write_bytecode_byte_unsigned_label(emit, MP_BC_SETUP_WITH + kind, label);
    a8f4:	687b      	ldr	r3, [r7, #4]
    a8f6:	b2db      	uxtb	r3, r3
    a8f8:	333d      	adds	r3, #61	; 0x3d
    a8fa:	b2db      	uxtb	r3, r3
    a8fc:	68ba      	ldr	r2, [r7, #8]
    a8fe:	4619      	mov	r1, r3
    a900:	68f8      	ldr	r0, [r7, #12]
    a902:	f7ff faa1 	bl	9e48 <emit_write_bytecode_byte_unsigned_label>
}
    a906:	bf00      	nop
    a908:	3710      	adds	r7, #16
    a90a:	46bd      	mov	sp, r7
    a90c:	bd80      	pop	{r7, pc}
    a90e:	bf00      	nop

0000a910 <mp_emit_bc_with_cleanup>:

void mp_emit_bc_with_cleanup(emit_t *emit, mp_uint_t label) {
    a910:	b580      	push	{r7, lr}
    a912:	b082      	sub	sp, #8
    a914:	af00      	add	r7, sp, #0
    a916:	6078      	str	r0, [r7, #4]
    a918:	6039      	str	r1, [r7, #0]
    mp_emit_bc_pop_block(emit);
    a91a:	6878      	ldr	r0, [r7, #4]
    a91c:	f000 f86a 	bl	a9f4 <mp_emit_bc_pop_block>
    mp_emit_bc_load_const_tok(emit, MP_TOKEN_KW_NONE);
    a920:	210e      	movs	r1, #14
    a922:	6878      	ldr	r0, [r7, #4]
    a924:	f7ff fd2e 	bl	a384 <mp_emit_bc_load_const_tok>
    mp_emit_bc_label_assign(emit, label);
    a928:	6839      	ldr	r1, [r7, #0]
    a92a:	6878      	ldr	r0, [r7, #4]
    a92c:	f7ff fcac 	bl	a288 <mp_emit_bc_label_assign>
    emit_bc_pre(emit, 2); // ensure we have enough stack space to call the __exit__ method
    a930:	2102      	movs	r1, #2
    a932:	6878      	ldr	r0, [r7, #4]
    a934:	f7ff fc8e 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_WITH_CLEANUP);
    a938:	213e      	movs	r1, #62	; 0x3e
    a93a:	6878      	ldr	r0, [r7, #4]
    a93c:	f7ff f95e 	bl	9bfc <emit_write_bytecode_byte>
    emit_bc_pre(emit, -4); // cancel the 2 above, plus the 2 from mp_emit_bc_setup_block(MP_EMIT_SETUP_BLOCK_WITH)
    a940:	f06f 0103 	mvn.w	r1, #3
    a944:	6878      	ldr	r0, [r7, #4]
    a946:	f7ff fc85 	bl	a254 <emit_bc_pre>
}
    a94a:	bf00      	nop
    a94c:	3708      	adds	r7, #8
    a94e:	46bd      	mov	sp, r7
    a950:	bd80      	pop	{r7, pc}
    a952:	bf00      	nop

0000a954 <mp_emit_bc_end_finally>:

void mp_emit_bc_end_finally(emit_t *emit) {
    a954:	b580      	push	{r7, lr}
    a956:	b082      	sub	sp, #8
    a958:	af00      	add	r7, sp, #0
    a95a:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    a95c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a960:	6878      	ldr	r0, [r7, #4]
    a962:	f7ff fc77 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_END_FINALLY);
    a966:	2141      	movs	r1, #65	; 0x41
    a968:	6878      	ldr	r0, [r7, #4]
    a96a:	f7ff f947 	bl	9bfc <emit_write_bytecode_byte>
}
    a96e:	bf00      	nop
    a970:	3708      	adds	r7, #8
    a972:	46bd      	mov	sp, r7
    a974:	bd80      	pop	{r7, pc}
    a976:	bf00      	nop

0000a978 <mp_emit_bc_get_iter>:

void mp_emit_bc_get_iter(emit_t *emit, bool use_stack) {
    a978:	b580      	push	{r7, lr}
    a97a:	b082      	sub	sp, #8
    a97c:	af00      	add	r7, sp, #0
    a97e:	6078      	str	r0, [r7, #4]
    a980:	460b      	mov	r3, r1
    a982:	70fb      	strb	r3, [r7, #3]
    emit_bc_pre(emit, use_stack ? MP_OBJ_ITER_BUF_NSLOTS - 1 : 0);
    a984:	78fb      	ldrb	r3, [r7, #3]
    a986:	2b00      	cmp	r3, #0
    a988:	d001      	beq.n	a98e <mp_emit_bc_get_iter+0x16>
    a98a:	2303      	movs	r3, #3
    a98c:	e000      	b.n	a990 <mp_emit_bc_get_iter+0x18>
    a98e:	2300      	movs	r3, #0
    a990:	4619      	mov	r1, r3
    a992:	6878      	ldr	r0, [r7, #4]
    a994:	f7ff fc5e 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte(emit, use_stack ? MP_BC_GET_ITER_STACK : MP_BC_GET_ITER);
    a998:	78fb      	ldrb	r3, [r7, #3]
    a99a:	2b00      	cmp	r3, #0
    a99c:	d001      	beq.n	a9a2 <mp_emit_bc_get_iter+0x2a>
    a99e:	2347      	movs	r3, #71	; 0x47
    a9a0:	e000      	b.n	a9a4 <mp_emit_bc_get_iter+0x2c>
    a9a2:	2342      	movs	r3, #66	; 0x42
    a9a4:	4619      	mov	r1, r3
    a9a6:	6878      	ldr	r0, [r7, #4]
    a9a8:	f7ff f928 	bl	9bfc <emit_write_bytecode_byte>
}
    a9ac:	bf00      	nop
    a9ae:	3708      	adds	r7, #8
    a9b0:	46bd      	mov	sp, r7
    a9b2:	bd80      	pop	{r7, pc}

0000a9b4 <mp_emit_bc_for_iter>:

void mp_emit_bc_for_iter(emit_t *emit, mp_uint_t label) {
    a9b4:	b580      	push	{r7, lr}
    a9b6:	b082      	sub	sp, #8
    a9b8:	af00      	add	r7, sp, #0
    a9ba:	6078      	str	r0, [r7, #4]
    a9bc:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a9be:	2101      	movs	r1, #1
    a9c0:	6878      	ldr	r0, [r7, #4]
    a9c2:	f7ff fc47 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte_unsigned_label(emit, MP_BC_FOR_ITER, label);
    a9c6:	683a      	ldr	r2, [r7, #0]
    a9c8:	2143      	movs	r1, #67	; 0x43
    a9ca:	6878      	ldr	r0, [r7, #4]
    a9cc:	f7ff fa3c 	bl	9e48 <emit_write_bytecode_byte_unsigned_label>
}
    a9d0:	bf00      	nop
    a9d2:	3708      	adds	r7, #8
    a9d4:	46bd      	mov	sp, r7
    a9d6:	bd80      	pop	{r7, pc}

0000a9d8 <mp_emit_bc_for_iter_end>:

void mp_emit_bc_for_iter_end(emit_t *emit) {
    a9d8:	b580      	push	{r7, lr}
    a9da:	b082      	sub	sp, #8
    a9dc:	af00      	add	r7, sp, #0
    a9de:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -MP_OBJ_ITER_BUF_NSLOTS);
    a9e0:	f06f 0103 	mvn.w	r1, #3
    a9e4:	6878      	ldr	r0, [r7, #4]
    a9e6:	f7ff fc35 	bl	a254 <emit_bc_pre>
}
    a9ea:	bf00      	nop
    a9ec:	3708      	adds	r7, #8
    a9ee:	46bd      	mov	sp, r7
    a9f0:	bd80      	pop	{r7, pc}
    a9f2:	bf00      	nop

0000a9f4 <mp_emit_bc_pop_block>:

void mp_emit_bc_pop_block(emit_t *emit) {
    a9f4:	b580      	push	{r7, lr}
    a9f6:	b082      	sub	sp, #8
    a9f8:	af00      	add	r7, sp, #0
    a9fa:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a9fc:	2100      	movs	r1, #0
    a9fe:	6878      	ldr	r0, [r7, #4]
    aa00:	f7ff fc28 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_POP_BLOCK);
    aa04:	2144      	movs	r1, #68	; 0x44
    aa06:	6878      	ldr	r0, [r7, #4]
    aa08:	f7ff f8f8 	bl	9bfc <emit_write_bytecode_byte>
}
    aa0c:	bf00      	nop
    aa0e:	3708      	adds	r7, #8
    aa10:	46bd      	mov	sp, r7
    aa12:	bd80      	pop	{r7, pc}

0000aa14 <mp_emit_bc_pop_except>:

void mp_emit_bc_pop_except(emit_t *emit) {
    aa14:	b580      	push	{r7, lr}
    aa16:	b082      	sub	sp, #8
    aa18:	af00      	add	r7, sp, #0
    aa1a:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    aa1c:	2100      	movs	r1, #0
    aa1e:	6878      	ldr	r0, [r7, #4]
    aa20:	f7ff fc18 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_POP_EXCEPT);
    aa24:	2145      	movs	r1, #69	; 0x45
    aa26:	6878      	ldr	r0, [r7, #4]
    aa28:	f7ff f8e8 	bl	9bfc <emit_write_bytecode_byte>
}
    aa2c:	bf00      	nop
    aa2e:	3708      	adds	r7, #8
    aa30:	46bd      	mov	sp, r7
    aa32:	bd80      	pop	{r7, pc}

0000aa34 <mp_emit_bc_unary_op>:

void mp_emit_bc_unary_op(emit_t *emit, mp_unary_op_t op) {
    aa34:	b580      	push	{r7, lr}
    aa36:	b082      	sub	sp, #8
    aa38:	af00      	add	r7, sp, #0
    aa3a:	6078      	str	r0, [r7, #4]
    aa3c:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    aa3e:	2100      	movs	r1, #0
    aa40:	6878      	ldr	r0, [r7, #4]
    aa42:	f7ff fc07 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_UNARY_OP_MULTI + op);
    aa46:	683b      	ldr	r3, [r7, #0]
    aa48:	b2db      	uxtb	r3, r3
    aa4a:	3b30      	subs	r3, #48	; 0x30
    aa4c:	b2db      	uxtb	r3, r3
    aa4e:	4619      	mov	r1, r3
    aa50:	6878      	ldr	r0, [r7, #4]
    aa52:	f7ff f8d3 	bl	9bfc <emit_write_bytecode_byte>
}
    aa56:	bf00      	nop
    aa58:	3708      	adds	r7, #8
    aa5a:	46bd      	mov	sp, r7
    aa5c:	bd80      	pop	{r7, pc}
    aa5e:	bf00      	nop

0000aa60 <mp_emit_bc_binary_op>:

void mp_emit_bc_binary_op(emit_t *emit, mp_binary_op_t op) {
    aa60:	b580      	push	{r7, lr}
    aa62:	b084      	sub	sp, #16
    aa64:	af00      	add	r7, sp, #0
    aa66:	6078      	str	r0, [r7, #4]
    aa68:	6039      	str	r1, [r7, #0]
    bool invert = false;
    aa6a:	2300      	movs	r3, #0
    aa6c:	73fb      	strb	r3, [r7, #15]
    if (op == MP_BINARY_OP_NOT_IN) {
    aa6e:	683b      	ldr	r3, [r7, #0]
    aa70:	2b24      	cmp	r3, #36	; 0x24
    aa72:	d104      	bne.n	aa7e <mp_emit_bc_binary_op+0x1e>
        invert = true;
    aa74:	2301      	movs	r3, #1
    aa76:	73fb      	strb	r3, [r7, #15]
        op = MP_BINARY_OP_IN;
    aa78:	2306      	movs	r3, #6
    aa7a:	603b      	str	r3, [r7, #0]
    aa7c:	e006      	b.n	aa8c <mp_emit_bc_binary_op+0x2c>
    } else if (op == MP_BINARY_OP_IS_NOT) {
    aa7e:	683b      	ldr	r3, [r7, #0]
    aa80:	2b25      	cmp	r3, #37	; 0x25
    aa82:	d103      	bne.n	aa8c <mp_emit_bc_binary_op+0x2c>
        invert = true;
    aa84:	2301      	movs	r3, #1
    aa86:	73fb      	strb	r3, [r7, #15]
        op = MP_BINARY_OP_IS;
    aa88:	2307      	movs	r3, #7
    aa8a:	603b      	str	r3, [r7, #0]
    }
    emit_bc_pre(emit, -1);
    aa8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    aa90:	6878      	ldr	r0, [r7, #4]
    aa92:	f7ff fbdf 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_BINARY_OP_MULTI + op);
    aa96:	683b      	ldr	r3, [r7, #0]
    aa98:	b2db      	uxtb	r3, r3
    aa9a:	3b29      	subs	r3, #41	; 0x29
    aa9c:	b2db      	uxtb	r3, r3
    aa9e:	4619      	mov	r1, r3
    aaa0:	6878      	ldr	r0, [r7, #4]
    aaa2:	f7ff f8ab 	bl	9bfc <emit_write_bytecode_byte>
    if (invert) {
    aaa6:	7bfb      	ldrb	r3, [r7, #15]
    aaa8:	2b00      	cmp	r3, #0
    aaaa:	d007      	beq.n	aabc <mp_emit_bc_binary_op+0x5c>
        emit_bc_pre(emit, 0);
    aaac:	2100      	movs	r1, #0
    aaae:	6878      	ldr	r0, [r7, #4]
    aab0:	f7ff fbd0 	bl	a254 <emit_bc_pre>
        emit_write_bytecode_byte(emit, MP_BC_UNARY_OP_MULTI + MP_UNARY_OP_NOT);
    aab4:	21d3      	movs	r1, #211	; 0xd3
    aab6:	6878      	ldr	r0, [r7, #4]
    aab8:	f7ff f8a0 	bl	9bfc <emit_write_bytecode_byte>
    }
}
    aabc:	bf00      	nop
    aabe:	3710      	adds	r7, #16
    aac0:	46bd      	mov	sp, r7
    aac2:	bd80      	pop	{r7, pc}

0000aac4 <mp_emit_bc_build>:

void mp_emit_bc_build(emit_t *emit, mp_uint_t n_args, int kind) {
    aac4:	b580      	push	{r7, lr}
    aac6:	b084      	sub	sp, #16
    aac8:	af00      	add	r7, sp, #0
    aaca:	60f8      	str	r0, [r7, #12]
    aacc:	60b9      	str	r1, [r7, #8]
    aace:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_TUPLE == MP_BC_BUILD_TUPLE);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_LIST == MP_BC_BUILD_LIST);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_MAP == MP_BC_BUILD_MAP);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_SET == MP_BC_BUILD_SET);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_SLICE == MP_BC_BUILD_SLICE);
    if (kind == MP_EMIT_BUILD_MAP) {
    aad0:	687b      	ldr	r3, [r7, #4]
    aad2:	2b03      	cmp	r3, #3
    aad4:	d104      	bne.n	aae0 <mp_emit_bc_build+0x1c>
        emit_bc_pre(emit, 1);
    aad6:	2101      	movs	r1, #1
    aad8:	68f8      	ldr	r0, [r7, #12]
    aada:	f7ff fbbb 	bl	a254 <emit_bc_pre>
    aade:	e006      	b.n	aaee <mp_emit_bc_build+0x2a>
    } else {
        emit_bc_pre(emit, 1 - n_args);
    aae0:	68bb      	ldr	r3, [r7, #8]
    aae2:	f1c3 0301 	rsb	r3, r3, #1
    aae6:	4619      	mov	r1, r3
    aae8:	68f8      	ldr	r0, [r7, #12]
    aaea:	f7ff fbb3 	bl	a254 <emit_bc_pre>
    }
    emit_write_bytecode_byte_uint(emit, MP_BC_BUILD_TUPLE + kind, n_args);
    aaee:	687b      	ldr	r3, [r7, #4]
    aaf0:	b2db      	uxtb	r3, r3
    aaf2:	3350      	adds	r3, #80	; 0x50
    aaf4:	b2db      	uxtb	r3, r3
    aaf6:	68ba      	ldr	r2, [r7, #8]
    aaf8:	4619      	mov	r1, r3
    aafa:	68f8      	ldr	r0, [r7, #12]
    aafc:	f7ff f912 	bl	9d24 <emit_write_bytecode_byte_uint>
}
    ab00:	bf00      	nop
    ab02:	3710      	adds	r7, #16
    ab04:	46bd      	mov	sp, r7
    ab06:	bd80      	pop	{r7, pc}

0000ab08 <mp_emit_bc_store_map>:

void mp_emit_bc_store_map(emit_t *emit) {
    ab08:	b580      	push	{r7, lr}
    ab0a:	b082      	sub	sp, #8
    ab0c:	af00      	add	r7, sp, #0
    ab0e:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -2);
    ab10:	f06f 0101 	mvn.w	r1, #1
    ab14:	6878      	ldr	r0, [r7, #4]
    ab16:	f7ff fb9d 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_STORE_MAP);
    ab1a:	2154      	movs	r1, #84	; 0x54
    ab1c:	6878      	ldr	r0, [r7, #4]
    ab1e:	f7ff f86d 	bl	9bfc <emit_write_bytecode_byte>
}
    ab22:	bf00      	nop
    ab24:	3708      	adds	r7, #8
    ab26:	46bd      	mov	sp, r7
    ab28:	bd80      	pop	{r7, pc}
    ab2a:	bf00      	nop

0000ab2c <mp_emit_bc_store_comp>:

void mp_emit_bc_store_comp(emit_t *emit, scope_kind_t kind, mp_uint_t collection_stack_index) {
    ab2c:	b580      	push	{r7, lr}
    ab2e:	b086      	sub	sp, #24
    ab30:	af00      	add	r7, sp, #0
    ab32:	60f8      	str	r0, [r7, #12]
    ab34:	60b9      	str	r1, [r7, #8]
    ab36:	607a      	str	r2, [r7, #4]
    int t;
    int n;
    if (kind == SCOPE_LIST_COMP) {
    ab38:	68bb      	ldr	r3, [r7, #8]
    ab3a:	2b03      	cmp	r3, #3
    ab3c:	d104      	bne.n	ab48 <mp_emit_bc_store_comp+0x1c>
        n = 0;
    ab3e:	2300      	movs	r3, #0
    ab40:	613b      	str	r3, [r7, #16]
        t = 0;
    ab42:	2300      	movs	r3, #0
    ab44:	617b      	str	r3, [r7, #20]
    ab46:	e003      	b.n	ab50 <mp_emit_bc_store_comp+0x24>
    } else if (!MICROPY_PY_BUILTINS_SET || kind == SCOPE_DICT_COMP) {
        n = 1;
    ab48:	2301      	movs	r3, #1
    ab4a:	613b      	str	r3, [r7, #16]
        t = 1;
    ab4c:	2301      	movs	r3, #1
    ab4e:	617b      	str	r3, [r7, #20]
    } else if (MICROPY_PY_BUILTINS_SET) {
        n = 0;
        t = 2;
    }
    emit_bc_pre(emit, -1 - n);
    ab50:	693b      	ldr	r3, [r7, #16]
    ab52:	43db      	mvns	r3, r3
    ab54:	4619      	mov	r1, r3
    ab56:	68f8      	ldr	r0, [r7, #12]
    ab58:	f7ff fb7c 	bl	a254 <emit_bc_pre>
    // the lower 2 bits of the opcode argument indicate the collection type
    emit_write_bytecode_byte_uint(emit, MP_BC_STORE_COMP, ((collection_stack_index + n) << 2) | t);
    ab5c:	693a      	ldr	r2, [r7, #16]
    ab5e:	687b      	ldr	r3, [r7, #4]
    ab60:	4413      	add	r3, r2
    ab62:	009a      	lsls	r2, r3, #2
    ab64:	697b      	ldr	r3, [r7, #20]
    ab66:	4313      	orrs	r3, r2
    ab68:	461a      	mov	r2, r3
    ab6a:	2157      	movs	r1, #87	; 0x57
    ab6c:	68f8      	ldr	r0, [r7, #12]
    ab6e:	f7ff f8d9 	bl	9d24 <emit_write_bytecode_byte_uint>
}
    ab72:	bf00      	nop
    ab74:	3718      	adds	r7, #24
    ab76:	46bd      	mov	sp, r7
    ab78:	bd80      	pop	{r7, pc}
    ab7a:	bf00      	nop

0000ab7c <mp_emit_bc_unpack_sequence>:

void mp_emit_bc_unpack_sequence(emit_t *emit, mp_uint_t n_args) {
    ab7c:	b580      	push	{r7, lr}
    ab7e:	b082      	sub	sp, #8
    ab80:	af00      	add	r7, sp, #0
    ab82:	6078      	str	r0, [r7, #4]
    ab84:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, -1 + n_args);
    ab86:	683b      	ldr	r3, [r7, #0]
    ab88:	3b01      	subs	r3, #1
    ab8a:	4619      	mov	r1, r3
    ab8c:	6878      	ldr	r0, [r7, #4]
    ab8e:	f7ff fb61 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte_uint(emit, MP_BC_UNPACK_SEQUENCE, n_args);
    ab92:	683a      	ldr	r2, [r7, #0]
    ab94:	2159      	movs	r1, #89	; 0x59
    ab96:	6878      	ldr	r0, [r7, #4]
    ab98:	f7ff f8c4 	bl	9d24 <emit_write_bytecode_byte_uint>
}
    ab9c:	bf00      	nop
    ab9e:	3708      	adds	r7, #8
    aba0:	46bd      	mov	sp, r7
    aba2:	bd80      	pop	{r7, pc}

0000aba4 <mp_emit_bc_unpack_ex>:

void mp_emit_bc_unpack_ex(emit_t *emit, mp_uint_t n_left, mp_uint_t n_right) {
    aba4:	b580      	push	{r7, lr}
    aba6:	b084      	sub	sp, #16
    aba8:	af00      	add	r7, sp, #0
    abaa:	60f8      	str	r0, [r7, #12]
    abac:	60b9      	str	r1, [r7, #8]
    abae:	607a      	str	r2, [r7, #4]
    emit_bc_pre(emit, -1 + n_left + n_right + 1);
    abb0:	68ba      	ldr	r2, [r7, #8]
    abb2:	687b      	ldr	r3, [r7, #4]
    abb4:	4413      	add	r3, r2
    abb6:	4619      	mov	r1, r3
    abb8:	68f8      	ldr	r0, [r7, #12]
    abba:	f7ff fb4b 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte_uint(emit, MP_BC_UNPACK_EX, n_left | (n_right << 8));
    abbe:	687b      	ldr	r3, [r7, #4]
    abc0:	021a      	lsls	r2, r3, #8
    abc2:	68bb      	ldr	r3, [r7, #8]
    abc4:	4313      	orrs	r3, r2
    abc6:	461a      	mov	r2, r3
    abc8:	215a      	movs	r1, #90	; 0x5a
    abca:	68f8      	ldr	r0, [r7, #12]
    abcc:	f7ff f8aa 	bl	9d24 <emit_write_bytecode_byte_uint>
}
    abd0:	bf00      	nop
    abd2:	3710      	adds	r7, #16
    abd4:	46bd      	mov	sp, r7
    abd6:	bd80      	pop	{r7, pc}

0000abd8 <mp_emit_bc_make_function>:

void mp_emit_bc_make_function(emit_t *emit, scope_t *scope, mp_uint_t n_pos_defaults, mp_uint_t n_kw_defaults) {
    abd8:	b580      	push	{r7, lr}
    abda:	b084      	sub	sp, #16
    abdc:	af00      	add	r7, sp, #0
    abde:	60f8      	str	r0, [r7, #12]
    abe0:	60b9      	str	r1, [r7, #8]
    abe2:	607a      	str	r2, [r7, #4]
    abe4:	603b      	str	r3, [r7, #0]
    if (n_pos_defaults == 0 && n_kw_defaults == 0) {
    abe6:	687b      	ldr	r3, [r7, #4]
    abe8:	2b00      	cmp	r3, #0
    abea:	d10e      	bne.n	ac0a <mp_emit_bc_make_function+0x32>
    abec:	683b      	ldr	r3, [r7, #0]
    abee:	2b00      	cmp	r3, #0
    abf0:	d10b      	bne.n	ac0a <mp_emit_bc_make_function+0x32>
        emit_bc_pre(emit, 1);
    abf2:	2101      	movs	r1, #1
    abf4:	68f8      	ldr	r0, [r7, #12]
    abf6:	f7ff fb2d 	bl	a254 <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_FUNCTION, scope->raw_code);
    abfa:	68bb      	ldr	r3, [r7, #8]
    abfc:	691b      	ldr	r3, [r3, #16]
    abfe:	461a      	mov	r2, r3
    ac00:	2160      	movs	r1, #96	; 0x60
    ac02:	68f8      	ldr	r0, [r7, #12]
    ac04:	f7ff f8ec 	bl	9de0 <emit_write_bytecode_byte_raw_code>
    ac08:	e00b      	b.n	ac22 <mp_emit_bc_make_function+0x4a>
    } else {
        emit_bc_pre(emit, -1);
    ac0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ac0e:	68f8      	ldr	r0, [r7, #12]
    ac10:	f7ff fb20 	bl	a254 <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_FUNCTION_DEFARGS, scope->raw_code);
    ac14:	68bb      	ldr	r3, [r7, #8]
    ac16:	691b      	ldr	r3, [r3, #16]
    ac18:	461a      	mov	r2, r3
    ac1a:	2161      	movs	r1, #97	; 0x61
    ac1c:	68f8      	ldr	r0, [r7, #12]
    ac1e:	f7ff f8df 	bl	9de0 <emit_write_bytecode_byte_raw_code>
    }
}
    ac22:	bf00      	nop
    ac24:	3710      	adds	r7, #16
    ac26:	46bd      	mov	sp, r7
    ac28:	bd80      	pop	{r7, pc}
    ac2a:	bf00      	nop

0000ac2c <mp_emit_bc_make_closure>:

void mp_emit_bc_make_closure(emit_t *emit, scope_t *scope, mp_uint_t n_closed_over, mp_uint_t n_pos_defaults, mp_uint_t n_kw_defaults) {
    ac2c:	b580      	push	{r7, lr}
    ac2e:	b084      	sub	sp, #16
    ac30:	af00      	add	r7, sp, #0
    ac32:	60f8      	str	r0, [r7, #12]
    ac34:	60b9      	str	r1, [r7, #8]
    ac36:	607a      	str	r2, [r7, #4]
    ac38:	603b      	str	r3, [r7, #0]
    if (n_pos_defaults == 0 && n_kw_defaults == 0) {
    ac3a:	683b      	ldr	r3, [r7, #0]
    ac3c:	2b00      	cmp	r3, #0
    ac3e:	d117      	bne.n	ac70 <mp_emit_bc_make_closure+0x44>
    ac40:	69bb      	ldr	r3, [r7, #24]
    ac42:	2b00      	cmp	r3, #0
    ac44:	d114      	bne.n	ac70 <mp_emit_bc_make_closure+0x44>
        emit_bc_pre(emit, -n_closed_over + 1);
    ac46:	687b      	ldr	r3, [r7, #4]
    ac48:	f1c3 0301 	rsb	r3, r3, #1
    ac4c:	4619      	mov	r1, r3
    ac4e:	68f8      	ldr	r0, [r7, #12]
    ac50:	f7ff fb00 	bl	a254 <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_CLOSURE, scope->raw_code);
    ac54:	68bb      	ldr	r3, [r7, #8]
    ac56:	691b      	ldr	r3, [r3, #16]
    ac58:	461a      	mov	r2, r3
    ac5a:	2162      	movs	r1, #98	; 0x62
    ac5c:	68f8      	ldr	r0, [r7, #12]
    ac5e:	f7ff f8bf 	bl	9de0 <emit_write_bytecode_byte_raw_code>
        emit_write_bytecode_byte(emit, n_closed_over);
    ac62:	687b      	ldr	r3, [r7, #4]
    ac64:	b2db      	uxtb	r3, r3
    ac66:	4619      	mov	r1, r3
    ac68:	68f8      	ldr	r0, [r7, #12]
    ac6a:	f7fe ffc7 	bl	9bfc <emit_write_bytecode_byte>
    ac6e:	e01c      	b.n	acaa <mp_emit_bc_make_closure+0x7e>
    } else {
        assert(n_closed_over <= 255);
    ac70:	687b      	ldr	r3, [r7, #4]
    ac72:	2bff      	cmp	r3, #255	; 0xff
    ac74:	d906      	bls.n	ac84 <mp_emit_bc_make_closure+0x58>
    ac76:	4b0f      	ldr	r3, [pc, #60]	; (acb4 <mp_emit_bc_make_closure+0x88>)
    ac78:	4a0f      	ldr	r2, [pc, #60]	; (acb8 <mp_emit_bc_make_closure+0x8c>)
    ac7a:	f240 315b 	movw	r1, #859	; 0x35b
    ac7e:	480f      	ldr	r0, [pc, #60]	; (acbc <mp_emit_bc_make_closure+0x90>)
    ac80:	f010 fd80 	bl	1b784 <__assert_func>
        emit_bc_pre(emit, -2 - (mp_int_t)n_closed_over + 1);
    ac84:	687b      	ldr	r3, [r7, #4]
    ac86:	43db      	mvns	r3, r3
    ac88:	4619      	mov	r1, r3
    ac8a:	68f8      	ldr	r0, [r7, #12]
    ac8c:	f7ff fae2 	bl	a254 <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_CLOSURE_DEFARGS, scope->raw_code);
    ac90:	68bb      	ldr	r3, [r7, #8]
    ac92:	691b      	ldr	r3, [r3, #16]
    ac94:	461a      	mov	r2, r3
    ac96:	2163      	movs	r1, #99	; 0x63
    ac98:	68f8      	ldr	r0, [r7, #12]
    ac9a:	f7ff f8a1 	bl	9de0 <emit_write_bytecode_byte_raw_code>
        emit_write_bytecode_byte(emit, n_closed_over);
    ac9e:	687b      	ldr	r3, [r7, #4]
    aca0:	b2db      	uxtb	r3, r3
    aca2:	4619      	mov	r1, r3
    aca4:	68f8      	ldr	r0, [r7, #12]
    aca6:	f7fe ffa9 	bl	9bfc <emit_write_bytecode_byte>
    }
}
    acaa:	bf00      	nop
    acac:	3710      	adds	r7, #16
    acae:	46bd      	mov	sp, r7
    acb0:	bd80      	pop	{r7, pc}
    acb2:	bf00      	nop
    acb4:	00021398 	.word	0x00021398
    acb8:	000214d8 	.word	0x000214d8
    acbc:	00021218 	.word	0x00021218

0000acc0 <emit_bc_call_function_method_helper>:

STATIC void emit_bc_call_function_method_helper(emit_t *emit, mp_int_t stack_adj, mp_uint_t bytecode_base, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    acc0:	b580      	push	{r7, lr}
    acc2:	b084      	sub	sp, #16
    acc4:	af00      	add	r7, sp, #0
    acc6:	60f8      	str	r0, [r7, #12]
    acc8:	60b9      	str	r1, [r7, #8]
    acca:	607a      	str	r2, [r7, #4]
    accc:	603b      	str	r3, [r7, #0]
    if (star_flags) {
    acce:	69fb      	ldr	r3, [r7, #28]
    acd0:	2b00      	cmp	r3, #0
    acd2:	d017      	beq.n	ad04 <emit_bc_call_function_method_helper+0x44>
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword - 2);
    acd4:	683b      	ldr	r3, [r7, #0]
    acd6:	68ba      	ldr	r2, [r7, #8]
    acd8:	1ad2      	subs	r2, r2, r3
    acda:	69bb      	ldr	r3, [r7, #24]
    acdc:	005b      	lsls	r3, r3, #1
    acde:	1ad3      	subs	r3, r2, r3
    ace0:	3b02      	subs	r3, #2
    ace2:	4619      	mov	r1, r3
    ace4:	68f8      	ldr	r0, [r7, #12]
    ace6:	f7ff fab5 	bl	a254 <emit_bc_pre>
        emit_write_bytecode_byte_uint(emit, bytecode_base + 1, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    acea:	687b      	ldr	r3, [r7, #4]
    acec:	b2db      	uxtb	r3, r3
    acee:	3301      	adds	r3, #1
    acf0:	b2d9      	uxtb	r1, r3
    acf2:	69bb      	ldr	r3, [r7, #24]
    acf4:	021a      	lsls	r2, r3, #8
    acf6:	683b      	ldr	r3, [r7, #0]
    acf8:	4313      	orrs	r3, r2
    acfa:	461a      	mov	r2, r3
    acfc:	68f8      	ldr	r0, [r7, #12]
    acfe:	f7ff f811 	bl	9d24 <emit_write_bytecode_byte_uint>
    } else {
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword);
        emit_write_bytecode_byte_uint(emit, bytecode_base, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    }
}
    ad02:	e013      	b.n	ad2c <emit_bc_call_function_method_helper+0x6c>
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword);
    ad04:	683b      	ldr	r3, [r7, #0]
    ad06:	68ba      	ldr	r2, [r7, #8]
    ad08:	1ad2      	subs	r2, r2, r3
    ad0a:	69bb      	ldr	r3, [r7, #24]
    ad0c:	005b      	lsls	r3, r3, #1
    ad0e:	1ad3      	subs	r3, r2, r3
    ad10:	4619      	mov	r1, r3
    ad12:	68f8      	ldr	r0, [r7, #12]
    ad14:	f7ff fa9e 	bl	a254 <emit_bc_pre>
        emit_write_bytecode_byte_uint(emit, bytecode_base, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    ad18:	687b      	ldr	r3, [r7, #4]
    ad1a:	b2d9      	uxtb	r1, r3
    ad1c:	69bb      	ldr	r3, [r7, #24]
    ad1e:	021a      	lsls	r2, r3, #8
    ad20:	683b      	ldr	r3, [r7, #0]
    ad22:	4313      	orrs	r3, r2
    ad24:	461a      	mov	r2, r3
    ad26:	68f8      	ldr	r0, [r7, #12]
    ad28:	f7fe fffc 	bl	9d24 <emit_write_bytecode_byte_uint>
}
    ad2c:	bf00      	nop
    ad2e:	3710      	adds	r7, #16
    ad30:	46bd      	mov	sp, r7
    ad32:	bd80      	pop	{r7, pc}

0000ad34 <mp_emit_bc_call_function>:

void mp_emit_bc_call_function(emit_t *emit, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    ad34:	b580      	push	{r7, lr}
    ad36:	b086      	sub	sp, #24
    ad38:	af02      	add	r7, sp, #8
    ad3a:	60f8      	str	r0, [r7, #12]
    ad3c:	60b9      	str	r1, [r7, #8]
    ad3e:	607a      	str	r2, [r7, #4]
    ad40:	603b      	str	r3, [r7, #0]
    emit_bc_call_function_method_helper(emit, 0, MP_BC_CALL_FUNCTION, n_positional, n_keyword, star_flags);
    ad42:	683b      	ldr	r3, [r7, #0]
    ad44:	9301      	str	r3, [sp, #4]
    ad46:	687b      	ldr	r3, [r7, #4]
    ad48:	9300      	str	r3, [sp, #0]
    ad4a:	68bb      	ldr	r3, [r7, #8]
    ad4c:	2264      	movs	r2, #100	; 0x64
    ad4e:	2100      	movs	r1, #0
    ad50:	68f8      	ldr	r0, [r7, #12]
    ad52:	f7ff ffb5 	bl	acc0 <emit_bc_call_function_method_helper>
}
    ad56:	bf00      	nop
    ad58:	3710      	adds	r7, #16
    ad5a:	46bd      	mov	sp, r7
    ad5c:	bd80      	pop	{r7, pc}
    ad5e:	bf00      	nop

0000ad60 <mp_emit_bc_call_method>:

void mp_emit_bc_call_method(emit_t *emit, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    ad60:	b580      	push	{r7, lr}
    ad62:	b086      	sub	sp, #24
    ad64:	af02      	add	r7, sp, #8
    ad66:	60f8      	str	r0, [r7, #12]
    ad68:	60b9      	str	r1, [r7, #8]
    ad6a:	607a      	str	r2, [r7, #4]
    ad6c:	603b      	str	r3, [r7, #0]
    emit_bc_call_function_method_helper(emit, -1, MP_BC_CALL_METHOD, n_positional, n_keyword, star_flags);
    ad6e:	683b      	ldr	r3, [r7, #0]
    ad70:	9301      	str	r3, [sp, #4]
    ad72:	687b      	ldr	r3, [r7, #4]
    ad74:	9300      	str	r3, [sp, #0]
    ad76:	68bb      	ldr	r3, [r7, #8]
    ad78:	2266      	movs	r2, #102	; 0x66
    ad7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ad7e:	68f8      	ldr	r0, [r7, #12]
    ad80:	f7ff ff9e 	bl	acc0 <emit_bc_call_function_method_helper>
}
    ad84:	bf00      	nop
    ad86:	3710      	adds	r7, #16
    ad88:	46bd      	mov	sp, r7
    ad8a:	bd80      	pop	{r7, pc}

0000ad8c <mp_emit_bc_return_value>:

void mp_emit_bc_return_value(emit_t *emit) {
    ad8c:	b580      	push	{r7, lr}
    ad8e:	b082      	sub	sp, #8
    ad90:	af00      	add	r7, sp, #0
    ad92:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    ad94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ad98:	6878      	ldr	r0, [r7, #4]
    ad9a:	f7ff fa5b 	bl	a254 <emit_bc_pre>
    emit->last_emit_was_return_value = true;
    ad9e:	687b      	ldr	r3, [r7, #4]
    ada0:	2201      	movs	r2, #1
    ada2:	719a      	strb	r2, [r3, #6]
    emit_write_bytecode_byte(emit, MP_BC_RETURN_VALUE);
    ada4:	215b      	movs	r1, #91	; 0x5b
    ada6:	6878      	ldr	r0, [r7, #4]
    ada8:	f7fe ff28 	bl	9bfc <emit_write_bytecode_byte>
}
    adac:	bf00      	nop
    adae:	3708      	adds	r7, #8
    adb0:	46bd      	mov	sp, r7
    adb2:	bd80      	pop	{r7, pc}

0000adb4 <mp_emit_bc_raise_varargs>:

void mp_emit_bc_raise_varargs(emit_t *emit, mp_uint_t n_args) {
    adb4:	b580      	push	{r7, lr}
    adb6:	b082      	sub	sp, #8
    adb8:	af00      	add	r7, sp, #0
    adba:	6078      	str	r0, [r7, #4]
    adbc:	6039      	str	r1, [r7, #0]
    assert(n_args <= 2);
    adbe:	683b      	ldr	r3, [r7, #0]
    adc0:	2b02      	cmp	r3, #2
    adc2:	d906      	bls.n	add2 <mp_emit_bc_raise_varargs+0x1e>
    adc4:	4b0b      	ldr	r3, [pc, #44]	; (adf4 <mp_emit_bc_raise_varargs+0x40>)
    adc6:	4a0c      	ldr	r2, [pc, #48]	; (adf8 <mp_emit_bc_raise_varargs+0x44>)
    adc8:	f240 317b 	movw	r1, #891	; 0x37b
    adcc:	480b      	ldr	r0, [pc, #44]	; (adfc <mp_emit_bc_raise_varargs+0x48>)
    adce:	f010 fcd9 	bl	1b784 <__assert_func>
    emit_bc_pre(emit, -n_args);
    add2:	683b      	ldr	r3, [r7, #0]
    add4:	425b      	negs	r3, r3
    add6:	4619      	mov	r1, r3
    add8:	6878      	ldr	r0, [r7, #4]
    adda:	f7ff fa3b 	bl	a254 <emit_bc_pre>
    emit_write_bytecode_byte_byte(emit, MP_BC_RAISE_VARARGS, n_args);
    adde:	683b      	ldr	r3, [r7, #0]
    ade0:	b2db      	uxtb	r3, r3
    ade2:	461a      	mov	r2, r3
    ade4:	215c      	movs	r1, #92	; 0x5c
    ade6:	6878      	ldr	r0, [r7, #4]
    ade8:	f7fe ff1a 	bl	9c20 <emit_write_bytecode_byte_byte>
}
    adec:	bf00      	nop
    adee:	3708      	adds	r7, #8
    adf0:	46bd      	mov	sp, r7
    adf2:	bd80      	pop	{r7, pc}
    adf4:	000213b0 	.word	0x000213b0
    adf8:	000214f0 	.word	0x000214f0
    adfc:	00021218 	.word	0x00021218

0000ae00 <mp_emit_bc_yield>:

void mp_emit_bc_yield(emit_t *emit, int kind) {
    ae00:	b580      	push	{r7, lr}
    ae02:	b082      	sub	sp, #8
    ae04:	af00      	add	r7, sp, #0
    ae06:	6078      	str	r0, [r7, #4]
    ae08:	6039      	str	r1, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_YIELD_VALUE + 1 == MP_BC_YIELD_FROM);
    emit_bc_pre(emit, -kind);
    ae0a:	683b      	ldr	r3, [r7, #0]
    ae0c:	425b      	negs	r3, r3
    ae0e:	4619      	mov	r1, r3
    ae10:	6878      	ldr	r0, [r7, #4]
    ae12:	f7ff fa1f 	bl	a254 <emit_bc_pre>
    emit->scope->scope_flags |= MP_SCOPE_FLAG_GENERATOR;
    ae16:	687b      	ldr	r3, [r7, #4]
    ae18:	68db      	ldr	r3, [r3, #12]
    ae1a:	687a      	ldr	r2, [r7, #4]
    ae1c:	68d2      	ldr	r2, [r2, #12]
    ae1e:	8b12      	ldrh	r2, [r2, #24]
    ae20:	f042 0204 	orr.w	r2, r2, #4
    ae24:	b292      	uxth	r2, r2
    ae26:	831a      	strh	r2, [r3, #24]
    emit_write_bytecode_byte(emit, MP_BC_YIELD_VALUE + kind);
    ae28:	683b      	ldr	r3, [r7, #0]
    ae2a:	b2db      	uxtb	r3, r3
    ae2c:	335d      	adds	r3, #93	; 0x5d
    ae2e:	b2db      	uxtb	r3, r3
    ae30:	4619      	mov	r1, r3
    ae32:	6878      	ldr	r0, [r7, #4]
    ae34:	f7fe fee2 	bl	9bfc <emit_write_bytecode_byte>
}
    ae38:	bf00      	nop
    ae3a:	3708      	adds	r7, #8
    ae3c:	46bd      	mov	sp, r7
    ae3e:	bd80      	pop	{r7, pc}

0000ae40 <mp_emit_bc_start_except_handler>:

void mp_emit_bc_start_except_handler(emit_t *emit) {
    ae40:	b580      	push	{r7, lr}
    ae42:	b082      	sub	sp, #8
    ae44:	af00      	add	r7, sp, #0
    ae46:	6078      	str	r0, [r7, #4]
    mp_emit_bc_adjust_stack_size(emit, 4); // stack adjust for the exception instance, +3 for possible UNWIND_JUMP state
    ae48:	2104      	movs	r1, #4
    ae4a:	6878      	ldr	r0, [r7, #4]
    ae4c:	f7ff f9ca 	bl	a1e4 <mp_emit_bc_adjust_stack_size>
}
    ae50:	bf00      	nop
    ae52:	3708      	adds	r7, #8
    ae54:	46bd      	mov	sp, r7
    ae56:	bd80      	pop	{r7, pc}

0000ae58 <mp_emit_bc_end_except_handler>:

void mp_emit_bc_end_except_handler(emit_t *emit) {
    ae58:	b580      	push	{r7, lr}
    ae5a:	b082      	sub	sp, #8
    ae5c:	af00      	add	r7, sp, #0
    ae5e:	6078      	str	r0, [r7, #4]
    mp_emit_bc_adjust_stack_size(emit, -3); // stack adjust
    ae60:	f06f 0102 	mvn.w	r1, #2
    ae64:	6878      	ldr	r0, [r7, #4]
    ae66:	f7ff f9bd 	bl	a1e4 <mp_emit_bc_adjust_stack_size>
}
    ae6a:	bf00      	nop
    ae6c:	3708      	adds	r7, #8
    ae6e:	46bd      	mov	sp, r7
    ae70:	bd80      	pop	{r7, pc}
    ae72:	bf00      	nop

0000ae74 <mp_parse_num_base>:
#include "py/misc.h"
#include "py/parsenumbase.h"

// find real radix base, and strip preceding '0x', '0o' and '0b'
// puts base in *base, and returns number of bytes to skip the prefix
size_t mp_parse_num_base(const char *str, size_t len, int *base) {
    ae74:	b480      	push	{r7}
    ae76:	b087      	sub	sp, #28
    ae78:	af00      	add	r7, sp, #0
    ae7a:	60f8      	str	r0, [r7, #12]
    ae7c:	60b9      	str	r1, [r7, #8]
    ae7e:	607a      	str	r2, [r7, #4]
    const byte *p = (const byte*)str;
    ae80:	68fb      	ldr	r3, [r7, #12]
    ae82:	617b      	str	r3, [r7, #20]
    if (len <= 1) {
    ae84:	68bb      	ldr	r3, [r7, #8]
    ae86:	2b01      	cmp	r3, #1
    ae88:	d971      	bls.n	af6e <mp_parse_num_base+0xfa>
        goto no_prefix;
    }
    unichar c = *(p++);
    ae8a:	697b      	ldr	r3, [r7, #20]
    ae8c:	1c5a      	adds	r2, r3, #1
    ae8e:	617a      	str	r2, [r7, #20]
    ae90:	781b      	ldrb	r3, [r3, #0]
    ae92:	613b      	str	r3, [r7, #16]
    if ((*base == 0 || *base == 16) && c == '0') {
    ae94:	687b      	ldr	r3, [r7, #4]
    ae96:	681b      	ldr	r3, [r3, #0]
    ae98:	2b00      	cmp	r3, #0
    ae9a:	d003      	beq.n	aea4 <mp_parse_num_base+0x30>
    ae9c:	687b      	ldr	r3, [r7, #4]
    ae9e:	681b      	ldr	r3, [r3, #0]
    aea0:	2b10      	cmp	r3, #16
    aea2:	d136      	bne.n	af12 <mp_parse_num_base+0x9e>
    aea4:	693b      	ldr	r3, [r7, #16]
    aea6:	2b30      	cmp	r3, #48	; 0x30
    aea8:	d133      	bne.n	af12 <mp_parse_num_base+0x9e>
        c = *(p++);
    aeaa:	697b      	ldr	r3, [r7, #20]
    aeac:	1c5a      	adds	r2, r3, #1
    aeae:	617a      	str	r2, [r7, #20]
    aeb0:	781b      	ldrb	r3, [r3, #0]
    aeb2:	613b      	str	r3, [r7, #16]
        if ((c | 32) == 'x') {
    aeb4:	693b      	ldr	r3, [r7, #16]
    aeb6:	f043 0320 	orr.w	r3, r3, #32
    aeba:	2b78      	cmp	r3, #120	; 0x78
    aebc:	d103      	bne.n	aec6 <mp_parse_num_base+0x52>
            *base = 16;
    aebe:	687b      	ldr	r3, [r7, #4]
    aec0:	2210      	movs	r2, #16
    aec2:	601a      	str	r2, [r3, #0]
        if ((c | 32) == 'x') {
    aec4:	e05b      	b.n	af7e <mp_parse_num_base+0x10a>
        } else if (*base == 0 && (c | 32) == 'o') {
    aec6:	687b      	ldr	r3, [r7, #4]
    aec8:	681b      	ldr	r3, [r3, #0]
    aeca:	2b00      	cmp	r3, #0
    aecc:	d108      	bne.n	aee0 <mp_parse_num_base+0x6c>
    aece:	693b      	ldr	r3, [r7, #16]
    aed0:	f043 0320 	orr.w	r3, r3, #32
    aed4:	2b6f      	cmp	r3, #111	; 0x6f
    aed6:	d103      	bne.n	aee0 <mp_parse_num_base+0x6c>
            *base = 8;
    aed8:	687b      	ldr	r3, [r7, #4]
    aeda:	2208      	movs	r2, #8
    aedc:	601a      	str	r2, [r3, #0]
    aede:	e017      	b.n	af10 <mp_parse_num_base+0x9c>
        } else if (*base == 0 && (c | 32) == 'b') {
    aee0:	687b      	ldr	r3, [r7, #4]
    aee2:	681b      	ldr	r3, [r3, #0]
    aee4:	2b00      	cmp	r3, #0
    aee6:	d108      	bne.n	aefa <mp_parse_num_base+0x86>
    aee8:	693b      	ldr	r3, [r7, #16]
    aeea:	f043 0320 	orr.w	r3, r3, #32
    aeee:	2b62      	cmp	r3, #98	; 0x62
    aef0:	d103      	bne.n	aefa <mp_parse_num_base+0x86>
            *base = 2;
    aef2:	687b      	ldr	r3, [r7, #4]
    aef4:	2202      	movs	r2, #2
    aef6:	601a      	str	r2, [r3, #0]
    aef8:	e00a      	b.n	af10 <mp_parse_num_base+0x9c>
        } else {
            if (*base == 0) {
    aefa:	687b      	ldr	r3, [r7, #4]
    aefc:	681b      	ldr	r3, [r3, #0]
    aefe:	2b00      	cmp	r3, #0
    af00:	d102      	bne.n	af08 <mp_parse_num_base+0x94>
                *base = 10;
    af02:	687b      	ldr	r3, [r7, #4]
    af04:	220a      	movs	r2, #10
    af06:	601a      	str	r2, [r3, #0]
            }
            p -= 2;
    af08:	697b      	ldr	r3, [r7, #20]
    af0a:	3b02      	subs	r3, #2
    af0c:	617b      	str	r3, [r7, #20]
        if ((c | 32) == 'x') {
    af0e:	e036      	b.n	af7e <mp_parse_num_base+0x10a>
    af10:	e035      	b.n	af7e <mp_parse_num_base+0x10a>
        }
    } else if (*base == 8 && c == '0') {
    af12:	687b      	ldr	r3, [r7, #4]
    af14:	681b      	ldr	r3, [r3, #0]
    af16:	2b08      	cmp	r3, #8
    af18:	d110      	bne.n	af3c <mp_parse_num_base+0xc8>
    af1a:	693b      	ldr	r3, [r7, #16]
    af1c:	2b30      	cmp	r3, #48	; 0x30
    af1e:	d10d      	bne.n	af3c <mp_parse_num_base+0xc8>
        c = *(p++);
    af20:	697b      	ldr	r3, [r7, #20]
    af22:	1c5a      	adds	r2, r3, #1
    af24:	617a      	str	r2, [r7, #20]
    af26:	781b      	ldrb	r3, [r3, #0]
    af28:	613b      	str	r3, [r7, #16]
        if ((c | 32) != 'o') {
    af2a:	693b      	ldr	r3, [r7, #16]
    af2c:	f043 0320 	orr.w	r3, r3, #32
    af30:	2b6f      	cmp	r3, #111	; 0x6f
    af32:	d024      	beq.n	af7e <mp_parse_num_base+0x10a>
            p -= 2;
    af34:	697b      	ldr	r3, [r7, #20]
    af36:	3b02      	subs	r3, #2
    af38:	617b      	str	r3, [r7, #20]
        if ((c | 32) != 'o') {
    af3a:	e020      	b.n	af7e <mp_parse_num_base+0x10a>
        }
    } else if (*base == 2 && c == '0') {
    af3c:	687b      	ldr	r3, [r7, #4]
    af3e:	681b      	ldr	r3, [r3, #0]
    af40:	2b02      	cmp	r3, #2
    af42:	d110      	bne.n	af66 <mp_parse_num_base+0xf2>
    af44:	693b      	ldr	r3, [r7, #16]
    af46:	2b30      	cmp	r3, #48	; 0x30
    af48:	d10d      	bne.n	af66 <mp_parse_num_base+0xf2>
        c = *(p++);
    af4a:	697b      	ldr	r3, [r7, #20]
    af4c:	1c5a      	adds	r2, r3, #1
    af4e:	617a      	str	r2, [r7, #20]
    af50:	781b      	ldrb	r3, [r3, #0]
    af52:	613b      	str	r3, [r7, #16]
        if ((c | 32) != 'b') {
    af54:	693b      	ldr	r3, [r7, #16]
    af56:	f043 0320 	orr.w	r3, r3, #32
    af5a:	2b62      	cmp	r3, #98	; 0x62
    af5c:	d00f      	beq.n	af7e <mp_parse_num_base+0x10a>
            p -= 2;
    af5e:	697b      	ldr	r3, [r7, #20]
    af60:	3b02      	subs	r3, #2
    af62:	617b      	str	r3, [r7, #20]
        if ((c | 32) != 'b') {
    af64:	e00b      	b.n	af7e <mp_parse_num_base+0x10a>
        }
    } else {
        p--;
    af66:	697b      	ldr	r3, [r7, #20]
    af68:	3b01      	subs	r3, #1
    af6a:	617b      	str	r3, [r7, #20]
    af6c:	e000      	b.n	af70 <mp_parse_num_base+0xfc>
        goto no_prefix;
    af6e:	bf00      	nop
    no_prefix:
        if (*base == 0) {
    af70:	687b      	ldr	r3, [r7, #4]
    af72:	681b      	ldr	r3, [r3, #0]
    af74:	2b00      	cmp	r3, #0
    af76:	d102      	bne.n	af7e <mp_parse_num_base+0x10a>
            *base = 10;
    af78:	687b      	ldr	r3, [r7, #4]
    af7a:	220a      	movs	r2, #10
    af7c:	601a      	str	r2, [r3, #0]
        }
    }
    return p - (const byte*)str;
    af7e:	697a      	ldr	r2, [r7, #20]
    af80:	68fb      	ldr	r3, [r7, #12]
    af82:	1ad3      	subs	r3, r2, r3
}
    af84:	4618      	mov	r0, r3
    af86:	371c      	adds	r7, #28
    af88:	46bd      	mov	sp, r7
    af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    af8e:	4770      	bx	lr

0000af90 <raise_exc>:

#if MICROPY_PY_BUILTINS_FLOAT
#include <math.h>
#endif

STATIC NORETURN void raise_exc(mp_obj_t exc, mp_lexer_t *lex) {
    af90:	b580      	push	{r7, lr}
    af92:	b082      	sub	sp, #8
    af94:	af00      	add	r7, sp, #0
    af96:	6078      	str	r0, [r7, #4]
    af98:	6039      	str	r1, [r7, #0]
    // if lex!=NULL then the parser called us and we need to convert the
    // exception's type from ValueError to SyntaxError and add traceback info
    if (lex != NULL) {
    af9a:	683b      	ldr	r3, [r7, #0]
    af9c:	2b00      	cmp	r3, #0
    af9e:	d00a      	beq.n	afb6 <raise_exc+0x26>
        ((mp_obj_base_t*)MP_OBJ_TO_PTR(exc))->type = &mp_type_SyntaxError;
    afa0:	687b      	ldr	r3, [r7, #4]
    afa2:	4a06      	ldr	r2, [pc, #24]	; (afbc <raise_exc+0x2c>)
    afa4:	601a      	str	r2, [r3, #0]
        mp_obj_exception_add_traceback(exc, lex->source_name, lex->tok_line, MP_QSTR_NULL);
    afa6:	683b      	ldr	r3, [r7, #0]
    afa8:	6819      	ldr	r1, [r3, #0]
    afaa:	683b      	ldr	r3, [r7, #0]
    afac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    afae:	2300      	movs	r3, #0
    afb0:	6878      	ldr	r0, [r7, #4]
    afb2:	f004 fca3 	bl	f8fc <mp_obj_exception_add_traceback>
    }
    nlr_raise(exc);
    afb6:	6878      	ldr	r0, [r7, #4]
    afb8:	f7f5 f992 	bl	2e0 <nlr_jump>
    afbc:	000226f4 	.word	0x000226f4

0000afc0 <mp_parse_num_integer>:
}

mp_obj_t mp_parse_num_integer(const char *restrict str_, size_t len, int base, mp_lexer_t *lex) {
    afc0:	b580      	push	{r7, lr}
    afc2:	b094      	sub	sp, #80	; 0x50
    afc4:	af00      	add	r7, sp, #0
    afc6:	60f8      	str	r0, [r7, #12]
    afc8:	60b9      	str	r1, [r7, #8]
    afca:	607a      	str	r2, [r7, #4]
    afcc:	603b      	str	r3, [r7, #0]
    const byte *restrict str = (const byte *)str_;
    afce:	68fb      	ldr	r3, [r7, #12]
    afd0:	64fb      	str	r3, [r7, #76]	; 0x4c
    const byte *restrict top = str + len;
    afd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    afd4:	68bb      	ldr	r3, [r7, #8]
    afd6:	4413      	add	r3, r2
    afd8:	63bb      	str	r3, [r7, #56]	; 0x38
    bool neg = false;
    afda:	2300      	movs	r3, #0
    afdc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    mp_obj_t ret_val;

    // check radix base
    if ((base != 0 && base < 2) || base > 36) {
    afe0:	687b      	ldr	r3, [r7, #4]
    afe2:	2b00      	cmp	r3, #0
    afe4:	d002      	beq.n	afec <mp_parse_num_integer+0x2c>
    afe6:	687b      	ldr	r3, [r7, #4]
    afe8:	2b01      	cmp	r3, #1
    afea:	dd02      	ble.n	aff2 <mp_parse_num_integer+0x32>
    afec:	687b      	ldr	r3, [r7, #4]
    afee:	2b24      	cmp	r3, #36	; 0x24
    aff0:	dd05      	ble.n	affe <mp_parse_num_integer+0x3e>
        // this won't be reached if lex!=NULL
        mp_raise_ValueError("int() arg 2 must be >= 2 and <= 36");
    aff2:	4864      	ldr	r0, [pc, #400]	; (b184 <mp_parse_num_integer+0x1c4>)
    aff4:	f001 ffd6 	bl	cfa4 <mp_raise_ValueError>
    }

    // skip leading space
    for (; str < top && unichar_isspace(*str); str++) {
    aff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    affa:	3301      	adds	r3, #1
    affc:	64fb      	str	r3, [r7, #76]	; 0x4c
    affe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b002:	429a      	cmp	r2, r3
    b004:	d207      	bcs.n	b016 <mp_parse_num_integer+0x56>
    b006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b008:	781b      	ldrb	r3, [r3, #0]
    b00a:	4618      	mov	r0, r3
    b00c:	f7f7 fa82 	bl	2514 <unichar_isspace>
    b010:	4603      	mov	r3, r0
    b012:	2b00      	cmp	r3, #0
    b014:	d1f0      	bne.n	aff8 <mp_parse_num_integer+0x38>
    }

    // parse optional sign
    if (str < top) {
    b016:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b01a:	429a      	cmp	r2, r3
    b01c:	d211      	bcs.n	b042 <mp_parse_num_integer+0x82>
        if (*str == '+') {
    b01e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b020:	781b      	ldrb	r3, [r3, #0]
    b022:	2b2b      	cmp	r3, #43	; 0x2b
    b024:	d103      	bne.n	b02e <mp_parse_num_integer+0x6e>
            str++;
    b026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b028:	3301      	adds	r3, #1
    b02a:	64fb      	str	r3, [r7, #76]	; 0x4c
    b02c:	e009      	b.n	b042 <mp_parse_num_integer+0x82>
        } else if (*str == '-') {
    b02e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b030:	781b      	ldrb	r3, [r3, #0]
    b032:	2b2d      	cmp	r3, #45	; 0x2d
    b034:	d105      	bne.n	b042 <mp_parse_num_integer+0x82>
            str++;
    b036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b038:	3301      	adds	r3, #1
    b03a:	64fb      	str	r3, [r7, #76]	; 0x4c
            neg = true;
    b03c:	2301      	movs	r3, #1
    b03e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        }
    }

    // parse optional base prefix
    str += mp_parse_num_base((const char*)str, top - str, &base);
    b042:	6bba      	ldr	r2, [r7, #56]	; 0x38
    b044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b046:	1ad3      	subs	r3, r2, r3
    b048:	4619      	mov	r1, r3
    b04a:	1d3b      	adds	r3, r7, #4
    b04c:	461a      	mov	r2, r3
    b04e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    b050:	f7ff ff10 	bl	ae74 <mp_parse_num_base>
    b054:	4602      	mov	r2, r0
    b056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b058:	4413      	add	r3, r2
    b05a:	64fb      	str	r3, [r7, #76]	; 0x4c

    // string should be an integer number
    mp_int_t int_val = 0;
    b05c:	2300      	movs	r3, #0
    b05e:	643b      	str	r3, [r7, #64]	; 0x40
    const byte *restrict str_val_start = str;
    b060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b062:	637b      	str	r3, [r7, #52]	; 0x34
    for (; str < top; str++) {
    b064:	e03c      	b.n	b0e0 <mp_parse_num_integer+0x120>
        // get next digit as a value
        mp_uint_t dig = *str;
    b066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b068:	781b      	ldrb	r3, [r3, #0]
    b06a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ('0' <= dig && dig <= '9') {
    b06c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b06e:	2b2f      	cmp	r3, #47	; 0x2f
    b070:	d906      	bls.n	b080 <mp_parse_num_integer+0xc0>
    b072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b074:	2b39      	cmp	r3, #57	; 0x39
    b076:	d803      	bhi.n	b080 <mp_parse_num_integer+0xc0>
            dig -= '0';
    b078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b07a:	3b30      	subs	r3, #48	; 0x30
    b07c:	63fb      	str	r3, [r7, #60]	; 0x3c
    b07e:	e00f      	b.n	b0a0 <mp_parse_num_integer+0xe0>
        } else if (dig == '_') {
    b080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b082:	2b5f      	cmp	r3, #95	; 0x5f
    b084:	d028      	beq.n	b0d8 <mp_parse_num_integer+0x118>
            continue;
        } else {
            dig |= 0x20; // make digit lower-case
    b086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b088:	f043 0320 	orr.w	r3, r3, #32
    b08c:	63fb      	str	r3, [r7, #60]	; 0x3c
            if ('a' <= dig && dig <= 'z') {
    b08e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b090:	2b60      	cmp	r3, #96	; 0x60
    b092:	d92b      	bls.n	b0ec <mp_parse_num_integer+0x12c>
    b094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b096:	2b7a      	cmp	r3, #122	; 0x7a
    b098:	d828      	bhi.n	b0ec <mp_parse_num_integer+0x12c>
                dig -= 'a' - 10;
    b09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b09c:	3b57      	subs	r3, #87	; 0x57
    b09e:	63fb      	str	r3, [r7, #60]	; 0x3c
            } else {
                // unknown character
                break;
            }
        }
        if (dig >= (mp_uint_t)base) {
    b0a0:	687b      	ldr	r3, [r7, #4]
    b0a2:	461a      	mov	r2, r3
    b0a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b0a6:	4293      	cmp	r3, r2
    b0a8:	d21f      	bcs.n	b0ea <mp_parse_num_integer+0x12a>
            break;
        }

        // add next digi and check for overflow
        if (mp_small_int_mul_overflow(int_val, base)) {
    b0aa:	687b      	ldr	r3, [r7, #4]
    b0ac:	4619      	mov	r1, r3
    b0ae:	6c38      	ldr	r0, [r7, #64]	; 0x40
    b0b0:	f010 f976 	bl	1b3a0 <mp_small_int_mul_overflow>
    b0b4:	4603      	mov	r3, r0
    b0b6:	2b00      	cmp	r3, #0
    b0b8:	d13e      	bne.n	b138 <mp_parse_num_integer+0x178>
            goto overflow;
        }
        int_val = int_val * base + dig;
    b0ba:	687b      	ldr	r3, [r7, #4]
    b0bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    b0be:	fb02 f303 	mul.w	r3, r2, r3
    b0c2:	461a      	mov	r2, r3
    b0c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b0c6:	4413      	add	r3, r2
    b0c8:	643b      	str	r3, [r7, #64]	; 0x40
        if (!MP_SMALL_INT_FITS(int_val)) {
    b0ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b0cc:	005a      	lsls	r2, r3, #1
    b0ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b0d0:	4053      	eors	r3, r2
    b0d2:	2b00      	cmp	r3, #0
    b0d4:	db32      	blt.n	b13c <mp_parse_num_integer+0x17c>
    b0d6:	e000      	b.n	b0da <mp_parse_num_integer+0x11a>
            continue;
    b0d8:	bf00      	nop
    for (; str < top; str++) {
    b0da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b0dc:	3301      	adds	r3, #1
    b0de:	64fb      	str	r3, [r7, #76]	; 0x4c
    b0e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b0e4:	429a      	cmp	r2, r3
    b0e6:	d3be      	bcc.n	b066 <mp_parse_num_integer+0xa6>
    b0e8:	e000      	b.n	b0ec <mp_parse_num_integer+0x12c>
            break;
    b0ea:	bf00      	nop
            goto overflow;
        }
    }

    // negate value if needed
    if (neg) {
    b0ec:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    b0f0:	2b00      	cmp	r3, #0
    b0f2:	d002      	beq.n	b0fa <mp_parse_num_integer+0x13a>
        int_val = -int_val;
    b0f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b0f6:	425b      	negs	r3, r3
    b0f8:	643b      	str	r3, [r7, #64]	; 0x40
    }

    // create the small int
    ret_val = MP_OBJ_NEW_SMALL_INT(int_val);
    b0fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b0fc:	005b      	lsls	r3, r3, #1
    b0fe:	f043 0301 	orr.w	r3, r3, #1
    b102:	647b      	str	r3, [r7, #68]	; 0x44

have_ret_val:
    // check we parsed something
    if (str == str_val_start) {
    b104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b108:	429a      	cmp	r2, r3
    b10a:	d02a      	beq.n	b162 <mp_parse_num_integer+0x1a2>
        goto value_error;
    }

    // skip trailing space
    for (; str < top && unichar_isspace(*str); str++) {
    b10c:	e002      	b.n	b114 <mp_parse_num_integer+0x154>
    b10e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b110:	3301      	adds	r3, #1
    b112:	64fb      	str	r3, [r7, #76]	; 0x4c
    b114:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b118:	429a      	cmp	r2, r3
    b11a:	d207      	bcs.n	b12c <mp_parse_num_integer+0x16c>
    b11c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b11e:	781b      	ldrb	r3, [r3, #0]
    b120:	4618      	mov	r0, r3
    b122:	f7f7 f9f7 	bl	2514 <unichar_isspace>
    b126:	4603      	mov	r3, r0
    b128:	2b00      	cmp	r3, #0
    b12a:	d1f0      	bne.n	b10e <mp_parse_num_integer+0x14e>
    }

    // check we reached the end of the string
    if (str != top) {
    b12c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b130:	429a      	cmp	r2, r3
    b132:	d118      	bne.n	b166 <mp_parse_num_integer+0x1a6>
        goto value_error;
    }

    // return the object
    return ret_val;
    b134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b136:	e020      	b.n	b17a <mp_parse_num_integer+0x1ba>
            goto overflow;
    b138:	bf00      	nop
    b13a:	e000      	b.n	b13e <mp_parse_num_integer+0x17e>
            goto overflow;
    b13c:	bf00      	nop

overflow:
    // reparse using long int
    {
        const char *s2 = (const char*)str_val_start;
    b13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b140:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret_val = mp_obj_new_int_from_str_len(&s2, top - str_val_start, neg, base);
    b142:	6bba      	ldr	r2, [r7, #56]	; 0x38
    b144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b146:	1ad3      	subs	r3, r2, r3
    b148:	4619      	mov	r1, r3
    b14a:	687b      	ldr	r3, [r7, #4]
    b14c:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
    b150:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    b154:	f005 fbfe 	bl	10954 <mp_obj_new_int_from_str_len>
    b158:	6478      	str	r0, [r7, #68]	; 0x44
        str = (const byte*)s2;
    b15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b15c:	64fb      	str	r3, [r7, #76]	; 0x4c
        goto have_ret_val;
    b15e:	bf00      	nop
    b160:	e7d0      	b.n	b104 <mp_parse_num_integer+0x144>
        goto value_error;
    b162:	bf00      	nop
    b164:	e000      	b.n	b168 <mp_parse_num_integer+0x1a8>
        goto value_error;
    b166:	bf00      	nop
    }

value_error:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_obj_t exc = mp_obj_new_exception_msg(&mp_type_ValueError,
    b168:	4907      	ldr	r1, [pc, #28]	; (b188 <mp_parse_num_integer+0x1c8>)
    b16a:	4808      	ldr	r0, [pc, #32]	; (b18c <mp_parse_num_integer+0x1cc>)
    b16c:	f004 fa4a 	bl	f604 <mp_obj_new_exception_msg>
    b170:	6338      	str	r0, [r7, #48]	; 0x30
            "invalid syntax for integer");
        raise_exc(exc, lex);
    b172:	6839      	ldr	r1, [r7, #0]
    b174:	6b38      	ldr	r0, [r7, #48]	; 0x30
    b176:	f7ff ff0b 	bl	af90 <raise_exc>
        mp_str_print_quoted(&print, str_val_start, top - str_val_start, true);
        mp_obj_t exc = mp_obj_new_exception_arg1(&mp_type_ValueError,
            mp_obj_new_str_from_vstr(&mp_type_str, &vstr));
        raise_exc(exc, lex);
    }
}
    b17a:	4618      	mov	r0, r3
    b17c:	3750      	adds	r7, #80	; 0x50
    b17e:	46bd      	mov	sp, r7
    b180:	bd80      	pop	{r7, pc}
    b182:	bf00      	nop
    b184:	0002150c 	.word	0x0002150c
    b188:	00021530 	.word	0x00021530
    b18c:	000227a8 	.word	0x000227a8

0000b190 <mp_parse_num_decimal>:
    PARSE_DEC_IN_INTG,
    PARSE_DEC_IN_FRAC,
    PARSE_DEC_IN_EXP,
} parse_dec_in_t;

mp_obj_t mp_parse_num_decimal(const char *str, size_t len, bool allow_imag, bool force_complex, mp_lexer_t *lex) {
    b190:	b580      	push	{r7, lr}
    b192:	b084      	sub	sp, #16
    b194:	af00      	add	r7, sp, #0
    b196:	60f8      	str	r0, [r7, #12]
    b198:	60b9      	str	r1, [r7, #8]
    b19a:	4611      	mov	r1, r2
    b19c:	461a      	mov	r2, r3
    b19e:	460b      	mov	r3, r1
    b1a0:	71fb      	strb	r3, [r7, #7]
    b1a2:	4613      	mov	r3, r2
    b1a4:	71bb      	strb	r3, [r7, #6]

value_error:
    raise_exc(mp_obj_new_exception_msg(&mp_type_ValueError, "invalid syntax for number"), lex);

#else
    raise_exc(mp_obj_new_exception_msg(&mp_type_ValueError, "decimal numbers not supported"), lex);
    b1a6:	4904      	ldr	r1, [pc, #16]	; (b1b8 <mp_parse_num_decimal+0x28>)
    b1a8:	4804      	ldr	r0, [pc, #16]	; (b1bc <mp_parse_num_decimal+0x2c>)
    b1aa:	f004 fa2b 	bl	f604 <mp_obj_new_exception_msg>
    b1ae:	4603      	mov	r3, r0
    b1b0:	69b9      	ldr	r1, [r7, #24]
    b1b2:	4618      	mov	r0, r3
    b1b4:	f7ff feec 	bl	af90 <raise_exc>
    b1b8:	0002154c 	.word	0x0002154c
    b1bc:	000227a8 	.word	0x000227a8

0000b1c0 <MP_OBJ_IS_OBJ>:
    b1c0:	b480      	push	{r7}
    b1c2:	b083      	sub	sp, #12
    b1c4:	af00      	add	r7, sp, #0
    b1c6:	6078      	str	r0, [r7, #4]
    b1c8:	687b      	ldr	r3, [r7, #4]
    b1ca:	f003 0303 	and.w	r3, r3, #3
    b1ce:	2b00      	cmp	r3, #0
    b1d0:	bf0c      	ite	eq
    b1d2:	2301      	moveq	r3, #1
    b1d4:	2300      	movne	r3, #0
    b1d6:	b2db      	uxtb	r3, r3
    b1d8:	4618      	mov	r0, r3
    b1da:	370c      	adds	r7, #12
    b1dc:	46bd      	mov	sp, r7
    b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1e2:	4770      	bx	lr

0000b1e4 <mp_emit_glue_new_raw_code>:

#if MICROPY_DEBUG_PRINTERS
mp_uint_t mp_verbose_flag = 0;
#endif

mp_raw_code_t *mp_emit_glue_new_raw_code(void) {
    b1e4:	b580      	push	{r7, lr}
    b1e6:	b082      	sub	sp, #8
    b1e8:	af00      	add	r7, sp, #0
    mp_raw_code_t *rc = m_new0(mp_raw_code_t, 1);
    b1ea:	2010      	movs	r0, #16
    b1ec:	f7f5 f8d4 	bl	398 <m_malloc0>
    b1f0:	6078      	str	r0, [r7, #4]
    rc->kind = MP_CODE_RESERVED;
    b1f2:	687a      	ldr	r2, [r7, #4]
    b1f4:	7813      	ldrb	r3, [r2, #0]
    b1f6:	2101      	movs	r1, #1
    b1f8:	f361 0302 	bfi	r3, r1, #0, #3
    b1fc:	7013      	strb	r3, [r2, #0]
    return rc;
    b1fe:	687b      	ldr	r3, [r7, #4]
}
    b200:	4618      	mov	r0, r3
    b202:	3708      	adds	r7, #8
    b204:	46bd      	mov	sp, r7
    b206:	bd80      	pop	{r7, pc}

0000b208 <mp_emit_glue_assign_bytecode>:
    #endif
    const mp_uint_t *const_table,
    #if MICROPY_PERSISTENT_CODE_SAVE
    uint16_t n_obj, uint16_t n_raw_code,
    #endif
    mp_uint_t scope_flags) {
    b208:	b480      	push	{r7}
    b20a:	b085      	sub	sp, #20
    b20c:	af00      	add	r7, sp, #0
    b20e:	60f8      	str	r0, [r7, #12]
    b210:	60b9      	str	r1, [r7, #8]
    b212:	607a      	str	r2, [r7, #4]
    b214:	603b      	str	r3, [r7, #0]

    rc->kind = MP_CODE_BYTECODE;
    b216:	68fa      	ldr	r2, [r7, #12]
    b218:	7813      	ldrb	r3, [r2, #0]
    b21a:	2102      	movs	r1, #2
    b21c:	f361 0302 	bfi	r3, r1, #0, #3
    b220:	7013      	strb	r3, [r2, #0]
    rc->scope_flags = scope_flags;
    b222:	683b      	ldr	r3, [r7, #0]
    b224:	b2db      	uxtb	r3, r3
    b226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b22a:	b2d9      	uxtb	r1, r3
    b22c:	68fa      	ldr	r2, [r7, #12]
    b22e:	8813      	ldrh	r3, [r2, #0]
    b230:	f361 03c9 	bfi	r3, r1, #3, #7
    b234:	8013      	strh	r3, [r2, #0]
    rc->data.u_byte.bytecode = code;
    b236:	68fb      	ldr	r3, [r7, #12]
    b238:	68ba      	ldr	r2, [r7, #8]
    b23a:	605a      	str	r2, [r3, #4]
    rc->data.u_byte.const_table = const_table;
    b23c:	68fb      	ldr	r3, [r7, #12]
    b23e:	687a      	ldr	r2, [r7, #4]
    b240:	609a      	str	r2, [r3, #8]
#if MICROPY_DEBUG_PRINTERS
    if (mp_verbose_flag >= 2) {
        mp_bytecode_print(rc, code, len, const_table);
    }
#endif
}
    b242:	bf00      	nop
    b244:	3714      	adds	r7, #20
    b246:	46bd      	mov	sp, r7
    b248:	f85d 7b04 	ldr.w	r7, [sp], #4
    b24c:	4770      	bx	lr
    b24e:	bf00      	nop

0000b250 <mp_make_function_from_raw_code>:
    (void)fun_len;
#endif
}
#endif

mp_obj_t mp_make_function_from_raw_code(const mp_raw_code_t *rc, mp_obj_t def_args, mp_obj_t def_kw_args) {
    b250:	b580      	push	{r7, lr}
    b252:	b086      	sub	sp, #24
    b254:	af00      	add	r7, sp, #0
    b256:	60f8      	str	r0, [r7, #12]
    b258:	60b9      	str	r1, [r7, #8]
    b25a:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("make_function_from_raw_code %p\n", rc);
    assert(rc != NULL);
    b25c:	68fb      	ldr	r3, [r7, #12]
    b25e:	2b00      	cmp	r3, #0
    b260:	d105      	bne.n	b26e <mp_make_function_from_raw_code+0x1e>
    b262:	4b30      	ldr	r3, [pc, #192]	; (b324 <mp_make_function_from_raw_code+0xd4>)
    b264:	4a30      	ldr	r2, [pc, #192]	; (b328 <mp_make_function_from_raw_code+0xd8>)
    b266:	217c      	movs	r1, #124	; 0x7c
    b268:	4830      	ldr	r0, [pc, #192]	; (b32c <mp_make_function_from_raw_code+0xdc>)
    b26a:	f010 fa8b 	bl	1b784 <__assert_func>

    // def_args must be MP_OBJ_NULL or a tuple
    assert(def_args == MP_OBJ_NULL || MP_OBJ_IS_TYPE(def_args, &mp_type_tuple));
    b26e:	68bb      	ldr	r3, [r7, #8]
    b270:	2b00      	cmp	r3, #0
    b272:	d013      	beq.n	b29c <mp_make_function_from_raw_code+0x4c>
    b274:	68b8      	ldr	r0, [r7, #8]
    b276:	f7ff ffa3 	bl	b1c0 <MP_OBJ_IS_OBJ>
    b27a:	4603      	mov	r3, r0
    b27c:	f083 0301 	eor.w	r3, r3, #1
    b280:	b2db      	uxtb	r3, r3
    b282:	2b00      	cmp	r3, #0
    b284:	d104      	bne.n	b290 <mp_make_function_from_raw_code+0x40>
    b286:	68bb      	ldr	r3, [r7, #8]
    b288:	681b      	ldr	r3, [r3, #0]
    b28a:	4a29      	ldr	r2, [pc, #164]	; (b330 <mp_make_function_from_raw_code+0xe0>)
    b28c:	4293      	cmp	r3, r2
    b28e:	d005      	beq.n	b29c <mp_make_function_from_raw_code+0x4c>
    b290:	4b28      	ldr	r3, [pc, #160]	; (b334 <mp_make_function_from_raw_code+0xe4>)
    b292:	4a25      	ldr	r2, [pc, #148]	; (b328 <mp_make_function_from_raw_code+0xd8>)
    b294:	217f      	movs	r1, #127	; 0x7f
    b296:	4825      	ldr	r0, [pc, #148]	; (b32c <mp_make_function_from_raw_code+0xdc>)
    b298:	f010 fa74 	bl	1b784 <__assert_func>

    // def_kw_args must be MP_OBJ_NULL or a dict
    assert(def_kw_args == MP_OBJ_NULL || MP_OBJ_IS_TYPE(def_kw_args, &mp_type_dict));
    b29c:	687b      	ldr	r3, [r7, #4]
    b29e:	2b00      	cmp	r3, #0
    b2a0:	d013      	beq.n	b2ca <mp_make_function_from_raw_code+0x7a>
    b2a2:	6878      	ldr	r0, [r7, #4]
    b2a4:	f7ff ff8c 	bl	b1c0 <MP_OBJ_IS_OBJ>
    b2a8:	4603      	mov	r3, r0
    b2aa:	f083 0301 	eor.w	r3, r3, #1
    b2ae:	b2db      	uxtb	r3, r3
    b2b0:	2b00      	cmp	r3, #0
    b2b2:	d104      	bne.n	b2be <mp_make_function_from_raw_code+0x6e>
    b2b4:	687b      	ldr	r3, [r7, #4]
    b2b6:	681b      	ldr	r3, [r3, #0]
    b2b8:	4a1f      	ldr	r2, [pc, #124]	; (b338 <mp_make_function_from_raw_code+0xe8>)
    b2ba:	4293      	cmp	r3, r2
    b2bc:	d005      	beq.n	b2ca <mp_make_function_from_raw_code+0x7a>
    b2be:	4b1f      	ldr	r3, [pc, #124]	; (b33c <mp_make_function_from_raw_code+0xec>)
    b2c0:	4a19      	ldr	r2, [pc, #100]	; (b328 <mp_make_function_from_raw_code+0xd8>)
    b2c2:	2182      	movs	r1, #130	; 0x82
    b2c4:	4819      	ldr	r0, [pc, #100]	; (b32c <mp_make_function_from_raw_code+0xdc>)
    b2c6:	f010 fa5d 	bl	1b784 <__assert_func>

    // make the function, depending on the raw code kind
    mp_obj_t fun;
    switch (rc->kind) {
    b2ca:	68fb      	ldr	r3, [r7, #12]
    b2cc:	781b      	ldrb	r3, [r3, #0]
    b2ce:	f3c3 0302 	ubfx	r3, r3, #0, #3
            fun = mp_obj_new_fun_asm(rc->n_pos_args, rc->data.u_native.fun_data, rc->data.u_native.type_sig);
            break;
        #endif
        default:
            // rc->kind should always be set and BYTECODE is the only remaining case
            assert(rc->kind == MP_CODE_BYTECODE);
    b2d2:	68fb      	ldr	r3, [r7, #12]
    b2d4:	781b      	ldrb	r3, [r3, #0]
    b2d6:	f003 0307 	and.w	r3, r3, #7
    b2da:	b2db      	uxtb	r3, r3
    b2dc:	2b02      	cmp	r3, #2
    b2de:	d005      	beq.n	b2ec <mp_make_function_from_raw_code+0x9c>
    b2e0:	4b17      	ldr	r3, [pc, #92]	; (b340 <mp_make_function_from_raw_code+0xf0>)
    b2e2:	4a11      	ldr	r2, [pc, #68]	; (b328 <mp_make_function_from_raw_code+0xd8>)
    b2e4:	2198      	movs	r1, #152	; 0x98
    b2e6:	4811      	ldr	r0, [pc, #68]	; (b32c <mp_make_function_from_raw_code+0xdc>)
    b2e8:	f010 fa4c 	bl	1b784 <__assert_func>
            fun = mp_obj_new_fun_bc(def_args, def_kw_args, rc->data.u_byte.bytecode, rc->data.u_byte.const_table);
    b2ec:	68fb      	ldr	r3, [r7, #12]
    b2ee:	685a      	ldr	r2, [r3, #4]
    b2f0:	68fb      	ldr	r3, [r7, #12]
    b2f2:	689b      	ldr	r3, [r3, #8]
    b2f4:	6879      	ldr	r1, [r7, #4]
    b2f6:	68b8      	ldr	r0, [r7, #8]
    b2f8:	f004 fe02 	bl	ff00 <mp_obj_new_fun_bc>
    b2fc:	6178      	str	r0, [r7, #20]
            // check for generator functions and if so change the type of the object
            if ((rc->scope_flags & MP_SCOPE_FLAG_GENERATOR) != 0) {
    b2fe:	68fb      	ldr	r3, [r7, #12]
    b300:	881b      	ldrh	r3, [r3, #0]
    b302:	f3c3 03c6 	ubfx	r3, r3, #3, #7
    b306:	b2db      	uxtb	r3, r3
    b308:	f003 0304 	and.w	r3, r3, #4
    b30c:	2b00      	cmp	r3, #0
    b30e:	d002      	beq.n	b316 <mp_make_function_from_raw_code+0xc6>
                ((mp_obj_base_t*)MP_OBJ_TO_PTR(fun))->type = &mp_type_gen_wrap;
    b310:	697b      	ldr	r3, [r7, #20]
    b312:	4a0c      	ldr	r2, [pc, #48]	; (b344 <mp_make_function_from_raw_code+0xf4>)
    b314:	601a      	str	r2, [r3, #0]
            }
            break;
    b316:	bf00      	nop
    }

    return fun;
    b318:	697b      	ldr	r3, [r7, #20]
}
    b31a:	4618      	mov	r0, r3
    b31c:	3718      	adds	r7, #24
    b31e:	46bd      	mov	sp, r7
    b320:	bd80      	pop	{r7, pc}
    b322:	bf00      	nop
    b324:	0002156c 	.word	0x0002156c
    b328:	0002163c 	.word	0x0002163c
    b32c:	00021578 	.word	0x00021578
    b330:	00023dec 	.word	0x00023dec
    b334:	0002158c 	.word	0x0002158c
    b338:	00022104 	.word	0x00022104
    b33c:	000215d0 	.word	0x000215d0
    b340:	0002161c 	.word	0x0002161c
    b344:	00022c50 	.word	0x00022c50

0000b348 <mp_make_closure_from_raw_code>:

mp_obj_t mp_make_closure_from_raw_code(const mp_raw_code_t *rc, mp_uint_t n_closed_over, const mp_obj_t *args) {
    b348:	b580      	push	{r7, lr}
    b34a:	b086      	sub	sp, #24
    b34c:	af00      	add	r7, sp, #0
    b34e:	60f8      	str	r0, [r7, #12]
    b350:	60b9      	str	r1, [r7, #8]
    b352:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("make_closure_from_raw_code %p " UINT_FMT " %p\n", rc, n_closed_over, args);
    // make function object
    mp_obj_t ffun;
    if (n_closed_over & 0x100) {
    b354:	68bb      	ldr	r3, [r7, #8]
    b356:	f403 7380 	and.w	r3, r3, #256	; 0x100
    b35a:	2b00      	cmp	r3, #0
    b35c:	d00a      	beq.n	b374 <mp_make_closure_from_raw_code+0x2c>
        // default positional and keyword args given
        ffun = mp_make_function_from_raw_code(rc, args[0], args[1]);
    b35e:	687b      	ldr	r3, [r7, #4]
    b360:	6819      	ldr	r1, [r3, #0]
    b362:	687b      	ldr	r3, [r7, #4]
    b364:	3304      	adds	r3, #4
    b366:	681b      	ldr	r3, [r3, #0]
    b368:	461a      	mov	r2, r3
    b36a:	68f8      	ldr	r0, [r7, #12]
    b36c:	f7ff ff70 	bl	b250 <mp_make_function_from_raw_code>
    b370:	6178      	str	r0, [r7, #20]
    b372:	e005      	b.n	b380 <mp_make_closure_from_raw_code+0x38>
    } else {
        // default positional and keyword args not given
        ffun = mp_make_function_from_raw_code(rc, MP_OBJ_NULL, MP_OBJ_NULL);
    b374:	2200      	movs	r2, #0
    b376:	2100      	movs	r1, #0
    b378:	68f8      	ldr	r0, [r7, #12]
    b37a:	f7ff ff69 	bl	b250 <mp_make_function_from_raw_code>
    b37e:	6178      	str	r0, [r7, #20]
    }
    // wrap function in closure object
    return mp_obj_new_closure(ffun, n_closed_over & 0xff, args + ((n_closed_over >> 7) & 2));
    b380:	68bb      	ldr	r3, [r7, #8]
    b382:	b2d9      	uxtb	r1, r3
    b384:	68bb      	ldr	r3, [r7, #8]
    b386:	09db      	lsrs	r3, r3, #7
    b388:	f003 0302 	and.w	r3, r3, #2
    b38c:	009b      	lsls	r3, r3, #2
    b38e:	687a      	ldr	r2, [r7, #4]
    b390:	4413      	add	r3, r2
    b392:	461a      	mov	r2, r3
    b394:	6978      	ldr	r0, [r7, #20]
    b396:	f003 f883 	bl	e4a0 <mp_obj_new_closure>
    b39a:	4603      	mov	r3, r0
}
    b39c:	4618      	mov	r0, r3
    b39e:	3718      	adds	r7, #24
    b3a0:	46bd      	mov	sp, r7
    b3a2:	bd80      	pop	{r7, pc}

0000b3a4 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
    b3a4:	b480      	push	{r7}
    b3a6:	b083      	sub	sp, #12
    b3a8:	af00      	add	r7, sp, #0
    b3aa:	6078      	str	r0, [r7, #4]
    b3ac:	687b      	ldr	r3, [r7, #4]
    b3ae:	f003 0301 	and.w	r3, r3, #1
    b3b2:	2b00      	cmp	r3, #0
    b3b4:	bf14      	ite	ne
    b3b6:	2301      	movne	r3, #1
    b3b8:	2300      	moveq	r3, #0
    b3ba:	b2db      	uxtb	r3, r3
    b3bc:	4618      	mov	r0, r3
    b3be:	370c      	adds	r7, #12
    b3c0:	46bd      	mov	sp, r7
    b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3c6:	4770      	bx	lr

0000b3c8 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
    b3c8:	b480      	push	{r7}
    b3ca:	b083      	sub	sp, #12
    b3cc:	af00      	add	r7, sp, #0
    b3ce:	6078      	str	r0, [r7, #4]
    b3d0:	687b      	ldr	r3, [r7, #4]
    b3d2:	f003 0303 	and.w	r3, r3, #3
    b3d6:	2b02      	cmp	r3, #2
    b3d8:	bf0c      	ite	eq
    b3da:	2301      	moveq	r3, #1
    b3dc:	2300      	movne	r3, #0
    b3de:	b2db      	uxtb	r3, r3
    b3e0:	4618      	mov	r0, r3
    b3e2:	370c      	adds	r7, #12
    b3e4:	46bd      	mov	sp, r7
    b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3ea:	4770      	bx	lr

0000b3ec <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    b3ec:	b480      	push	{r7}
    b3ee:	b083      	sub	sp, #12
    b3f0:	af00      	add	r7, sp, #0
    b3f2:	6078      	str	r0, [r7, #4]
    b3f4:	687b      	ldr	r3, [r7, #4]
    b3f6:	f003 0303 	and.w	r3, r3, #3
    b3fa:	2b00      	cmp	r3, #0
    b3fc:	bf0c      	ite	eq
    b3fe:	2301      	moveq	r3, #1
    b400:	2300      	movne	r3, #0
    b402:	b2db      	uxtb	r3, r3
    b404:	4618      	mov	r0, r3
    b406:	370c      	adds	r7, #12
    b408:	46bd      	mov	sp, r7
    b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b40e:	4770      	bx	lr

0000b410 <MP_MAP_SLOT_IS_FILLED>:
    MP_MAP_LOOKUP_ADD_IF_NOT_FOUND_OR_REMOVE_IF_FOUND = 3, // only valid for mp_set_lookup
} mp_map_lookup_kind_t;

extern const mp_map_t mp_const_empty_map;

static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
    b410:	b480      	push	{r7}
    b412:	b083      	sub	sp, #12
    b414:	af00      	add	r7, sp, #0
    b416:	6078      	str	r0, [r7, #4]
    b418:	6039      	str	r1, [r7, #0]
    b41a:	687b      	ldr	r3, [r7, #4]
    b41c:	689a      	ldr	r2, [r3, #8]
    b41e:	683b      	ldr	r3, [r7, #0]
    b420:	00db      	lsls	r3, r3, #3
    b422:	4413      	add	r3, r2
    b424:	681b      	ldr	r3, [r3, #0]
    b426:	2b00      	cmp	r3, #0
    b428:	d009      	beq.n	b43e <MP_MAP_SLOT_IS_FILLED+0x2e>
    b42a:	687b      	ldr	r3, [r7, #4]
    b42c:	689a      	ldr	r2, [r3, #8]
    b42e:	683b      	ldr	r3, [r7, #0]
    b430:	00db      	lsls	r3, r3, #3
    b432:	4413      	add	r3, r2
    b434:	681b      	ldr	r3, [r3, #0]
    b436:	2b08      	cmp	r3, #8
    b438:	d001      	beq.n	b43e <MP_MAP_SLOT_IS_FILLED+0x2e>
    b43a:	2301      	movs	r3, #1
    b43c:	e000      	b.n	b440 <MP_MAP_SLOT_IS_FILLED+0x30>
    b43e:	2300      	movs	r3, #0
    b440:	f003 0301 	and.w	r3, r3, #1
    b444:	b2db      	uxtb	r3, r3
    b446:	4618      	mov	r0, r3
    b448:	370c      	adds	r7, #12
    b44a:	46bd      	mov	sp, r7
    b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b450:	4770      	bx	lr
    b452:	bf00      	nop

0000b454 <mp_obj_new_bool>:
extern const struct _mp_obj_exception_t mp_const_GeneratorExit_obj;

// General API for objects

mp_obj_t mp_obj_new_type(qstr name, mp_obj_t bases_tuple, mp_obj_t locals_dict);
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    b454:	b480      	push	{r7}
    b456:	b083      	sub	sp, #12
    b458:	af00      	add	r7, sp, #0
    b45a:	6078      	str	r0, [r7, #4]
    b45c:	687b      	ldr	r3, [r7, #4]
    b45e:	2b00      	cmp	r3, #0
    b460:	d001      	beq.n	b466 <mp_obj_new_bool+0x12>
    b462:	4b04      	ldr	r3, [pc, #16]	; (b474 <mp_obj_new_bool+0x20>)
    b464:	e000      	b.n	b468 <mp_obj_new_bool+0x14>
    b466:	4b04      	ldr	r3, [pc, #16]	; (b478 <mp_obj_new_bool+0x24>)
    b468:	4618      	mov	r0, r3
    b46a:	370c      	adds	r7, #12
    b46c:	46bd      	mov	sp, r7
    b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b472:	4770      	bx	lr
    b474:	00021c60 	.word	0x00021c60
    b478:	00021c58 	.word	0x00021c58

0000b47c <mp_obj_dict_get_map>:
void mp_obj_dict_init(mp_obj_dict_t *dict, size_t n_args);
size_t mp_obj_dict_len(mp_obj_t self_in);
mp_obj_t mp_obj_dict_get(mp_obj_t self_in, mp_obj_t index);
mp_obj_t mp_obj_dict_store(mp_obj_t self_in, mp_obj_t key, mp_obj_t value);
mp_obj_t mp_obj_dict_delete(mp_obj_t self_in, mp_obj_t key);
static inline mp_map_t *mp_obj_dict_get_map(mp_obj_t dict) {
    b47c:	b480      	push	{r7}
    b47e:	b083      	sub	sp, #12
    b480:	af00      	add	r7, sp, #0
    b482:	6078      	str	r0, [r7, #4]
    return &((mp_obj_dict_t*)MP_OBJ_TO_PTR(dict))->map;
    b484:	687b      	ldr	r3, [r7, #4]
    b486:	3304      	adds	r3, #4
}
    b488:	4618      	mov	r0, r3
    b48a:	370c      	adds	r7, #12
    b48c:	46bd      	mov	sp, r7
    b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b492:	4770      	bx	lr

0000b494 <mp_obj_module_get_globals>:
// module
typedef struct _mp_obj_module_t {
    mp_obj_base_t base;
    mp_obj_dict_t *globals;
} mp_obj_module_t;
static inline mp_obj_dict_t *mp_obj_module_get_globals(mp_obj_t module) {
    b494:	b480      	push	{r7}
    b496:	b083      	sub	sp, #12
    b498:	af00      	add	r7, sp, #0
    b49a:	6078      	str	r0, [r7, #4]
    return ((mp_obj_module_t*)MP_OBJ_TO_PTR(module))->globals;
    b49c:	687b      	ldr	r3, [r7, #4]
    b49e:	685b      	ldr	r3, [r3, #4]
}
    b4a0:	4618      	mov	r0, r3
    b4a2:	370c      	adds	r7, #12
    b4a4:	46bd      	mov	sp, r7
    b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4aa:	4770      	bx	lr

0000b4ac <mp_local_free>:
static inline void mp_local_free(void *ptr) {
    b4ac:	b480      	push	{r7}
    b4ae:	b083      	sub	sp, #12
    b4b0:	af00      	add	r7, sp, #0
    b4b2:	6078      	str	r0, [r7, #4]
}
    b4b4:	bf00      	nop
    b4b6:	370c      	adds	r7, #12
    b4b8:	46bd      	mov	sp, r7
    b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4be:	4770      	bx	lr

0000b4c0 <mp_nonlocal_alloc>:

static inline void *mp_nonlocal_alloc(size_t n_bytes) {
    b4c0:	b580      	push	{r7, lr}
    b4c2:	b082      	sub	sp, #8
    b4c4:	af00      	add	r7, sp, #0
    b4c6:	6078      	str	r0, [r7, #4]
    return m_new(uint8_t, n_bytes);
    b4c8:	6878      	ldr	r0, [r7, #4]
    b4ca:	f7f4 ff27 	bl	31c <m_malloc>
    b4ce:	4603      	mov	r3, r0
}
    b4d0:	4618      	mov	r0, r3
    b4d2:	3708      	adds	r7, #8
    b4d4:	46bd      	mov	sp, r7
    b4d6:	bd80      	pop	{r7, pc}

0000b4d8 <mp_nonlocal_realloc>:

static inline void *mp_nonlocal_realloc(void *ptr, size_t old_n_bytes, size_t new_n_bytes) {
    b4d8:	b580      	push	{r7, lr}
    b4da:	b084      	sub	sp, #16
    b4dc:	af00      	add	r7, sp, #0
    b4de:	60f8      	str	r0, [r7, #12]
    b4e0:	60b9      	str	r1, [r7, #8]
    b4e2:	607a      	str	r2, [r7, #4]
    return m_renew(uint8_t, ptr, old_n_bytes, new_n_bytes);
    b4e4:	6879      	ldr	r1, [r7, #4]
    b4e6:	68f8      	ldr	r0, [r7, #12]
    b4e8:	f7f4 ff64 	bl	3b4 <m_realloc>
    b4ec:	4603      	mov	r3, r0
}
    b4ee:	4618      	mov	r0, r3
    b4f0:	3710      	adds	r7, #16
    b4f2:	46bd      	mov	sp, r7
    b4f4:	bd80      	pop	{r7, pc}
    b4f6:	bf00      	nop

0000b4f8 <mp_nonlocal_free>:

static inline void mp_nonlocal_free(void *ptr, size_t n_bytes) {
    b4f8:	b580      	push	{r7, lr}
    b4fa:	b082      	sub	sp, #8
    b4fc:	af00      	add	r7, sp, #0
    b4fe:	6078      	str	r0, [r7, #4]
    b500:	6039      	str	r1, [r7, #0]
    m_del(uint8_t, ptr, n_bytes);
    b502:	6878      	ldr	r0, [r7, #4]
    b504:	f7f4 ff84 	bl	410 <m_free>
}
    b508:	bf00      	nop
    b50a:	3708      	adds	r7, #8
    b50c:	46bd      	mov	sp, r7
    b50e:	bd80      	pop	{r7, pc}

0000b510 <mp_locals_get>:
void mp_arg_parse_all(size_t n_pos, const mp_obj_t *pos, mp_map_t *kws, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
void mp_arg_parse_all_kw_array(size_t n_pos, size_t n_kw, const mp_obj_t *args, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
NORETURN void mp_arg_error_terse_mismatch(void);
NORETURN void mp_arg_error_unimpl_kw(void);

static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
    b510:	b480      	push	{r7}
    b512:	af00      	add	r7, sp, #0
    b514:	4b03      	ldr	r3, [pc, #12]	; (b524 <mp_locals_get+0x14>)
    b516:	685b      	ldr	r3, [r3, #4]
    b518:	4618      	mov	r0, r3
    b51a:	46bd      	mov	sp, r7
    b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b520:	4770      	bx	lr
    b522:	bf00      	nop
    b524:	200012f0 	.word	0x200012f0

0000b528 <mp_locals_set>:
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
    b528:	b480      	push	{r7}
    b52a:	b083      	sub	sp, #12
    b52c:	af00      	add	r7, sp, #0
    b52e:	6078      	str	r0, [r7, #4]
    b530:	4a04      	ldr	r2, [pc, #16]	; (b544 <mp_locals_set+0x1c>)
    b532:	687b      	ldr	r3, [r7, #4]
    b534:	6053      	str	r3, [r2, #4]
    b536:	bf00      	nop
    b538:	370c      	adds	r7, #12
    b53a:	46bd      	mov	sp, r7
    b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b540:	4770      	bx	lr
    b542:	bf00      	nop
    b544:	200012f0 	.word	0x200012f0

0000b548 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    b548:	b480      	push	{r7}
    b54a:	af00      	add	r7, sp, #0
    b54c:	4b03      	ldr	r3, [pc, #12]	; (b55c <mp_globals_get+0x14>)
    b54e:	689b      	ldr	r3, [r3, #8]
    b550:	4618      	mov	r0, r3
    b552:	46bd      	mov	sp, r7
    b554:	f85d 7b04 	ldr.w	r7, [sp], #4
    b558:	4770      	bx	lr
    b55a:	bf00      	nop
    b55c:	200012f0 	.word	0x200012f0

0000b560 <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    b560:	b480      	push	{r7}
    b562:	b083      	sub	sp, #12
    b564:	af00      	add	r7, sp, #0
    b566:	6078      	str	r0, [r7, #4]
    b568:	4a04      	ldr	r2, [pc, #16]	; (b57c <mp_globals_set+0x1c>)
    b56a:	687b      	ldr	r3, [r7, #4]
    b56c:	6093      	str	r3, [r2, #8]
    b56e:	bf00      	nop
    b570:	370c      	adds	r7, #12
    b572:	46bd      	mov	sp, r7
    b574:	f85d 7b04 	ldr.w	r7, [sp], #4
    b578:	4770      	bx	lr
    b57a:	bf00      	nop
    b57c:	200012f0 	.word	0x200012f0

0000b580 <mp_init>:
const mp_obj_module_t mp_module___main__ = {
    .base = { &mp_type_module },
    .globals = (mp_obj_dict_t*)&MP_STATE_VM(dict_main),
};

void mp_init(void) {
    b580:	b580      	push	{r7, lr}
    b582:	af00      	add	r7, sp, #0
    qstr_init();
    b584:	f7f5 fd3c 	bl	1000 <qstr_init>

    // no pending exceptions to start with
    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
    b588:	4b0d      	ldr	r3, [pc, #52]	; (b5c0 <mp_init+0x40>)
    b58a:	2200      	movs	r2, #0
    b58c:	635a      	str	r2, [r3, #52]	; 0x34
    MICROPY_PORT_INIT_FUNC;
#endif

    #if MICROPY_ENABLE_COMPILER
    // optimization disabled by default
    MP_STATE_VM(mp_optimise_value) = 0;
    b58e:	4b0c      	ldr	r3, [pc, #48]	; (b5c0 <mp_init+0x40>)
    b590:	2200      	movs	r2, #0
    b592:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    #endif

    // init global module dict
    mp_obj_dict_init(&MP_STATE_VM(mp_loaded_modules_dict), 3);
    b596:	2103      	movs	r1, #3
    b598:	480a      	ldr	r0, [pc, #40]	; (b5c4 <mp_init+0x44>)
    b59a:	f003 fe37 	bl	f20c <mp_obj_dict_init>

    // initialise the __main__ module
    mp_obj_dict_init(&MP_STATE_VM(dict_main), 1);
    b59e:	2101      	movs	r1, #1
    b5a0:	4809      	ldr	r0, [pc, #36]	; (b5c8 <mp_init+0x48>)
    b5a2:	f003 fe33 	bl	f20c <mp_obj_dict_init>
    mp_obj_dict_store(MP_OBJ_FROM_PTR(&MP_STATE_VM(dict_main)), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
    b5a6:	226e      	movs	r2, #110	; 0x6e
    b5a8:	2176      	movs	r1, #118	; 0x76
    b5aa:	4807      	ldr	r0, [pc, #28]	; (b5c8 <mp_init+0x48>)
    b5ac:	f003 fe64 	bl	f278 <mp_obj_dict_store>

    // locals = globals for outer module (see Objects/frameobject.c/PyFrame_New())
    mp_locals_set(&MP_STATE_VM(dict_main));
    b5b0:	4805      	ldr	r0, [pc, #20]	; (b5c8 <mp_init+0x48>)
    b5b2:	f7ff ffb9 	bl	b528 <mp_locals_set>
    mp_globals_set(&MP_STATE_VM(dict_main));
    b5b6:	4804      	ldr	r0, [pc, #16]	; (b5c8 <mp_init+0x48>)
    b5b8:	f7ff ffd2 	bl	b560 <mp_globals_set>
    #if MICROPY_PY_THREAD_GIL
    mp_thread_mutex_init(&MP_STATE_VM(gil_mutex));
    #endif

    MP_THREAD_GIL_ENTER();
}
    b5bc:	bf00      	nop
    b5be:	bd80      	pop	{r7, pc}
    b5c0:	200012f0 	.word	0x200012f0
    b5c4:	20001314 	.word	0x20001314
    b5c8:	20001328 	.word	0x20001328

0000b5cc <mp_deinit>:

void mp_deinit(void) {
    b5cc:	b480      	push	{r7}
    b5ce:	af00      	add	r7, sp, #0

    // call port specific deinitialization if any
#ifdef MICROPY_PORT_DEINIT_FUNC
    MICROPY_PORT_DEINIT_FUNC;
#endif
}
    b5d0:	bf00      	nop
    b5d2:	46bd      	mov	sp, r7
    b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5d8:	4770      	bx	lr
    b5da:	bf00      	nop

0000b5dc <mp_load_name>:

mp_obj_t mp_load_name(qstr qst) {
    b5dc:	b590      	push	{r4, r7, lr}
    b5de:	b085      	sub	sp, #20
    b5e0:	af00      	add	r7, sp, #0
    b5e2:	6078      	str	r0, [r7, #4]
    // logic: search locals, globals, builtins
    DEBUG_OP_printf("load name %s\n", qstr_str(qst));
    // If we're at the outer scope (locals == globals), dispatch to load_global right away
    if (mp_locals_get() != mp_globals_get()) {
    b5e4:	f7ff ff94 	bl	b510 <mp_locals_get>
    b5e8:	4604      	mov	r4, r0
    b5ea:	f7ff ffad 	bl	b548 <mp_globals_get>
    b5ee:	4603      	mov	r3, r0
    b5f0:	429c      	cmp	r4, r3
    b5f2:	d012      	beq.n	b61a <mp_load_name+0x3e>
        mp_map_elem_t *elem = mp_map_lookup(&mp_locals_get()->map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    b5f4:	f7ff ff8c 	bl	b510 <mp_locals_get>
    b5f8:	4603      	mov	r3, r0
    b5fa:	1d18      	adds	r0, r3, #4
    b5fc:	687b      	ldr	r3, [r7, #4]
    b5fe:	009b      	lsls	r3, r3, #2
    b600:	f043 0302 	orr.w	r3, r3, #2
    b604:	2200      	movs	r2, #0
    b606:	4619      	mov	r1, r3
    b608:	f001 ff9a 	bl	d540 <mp_map_lookup>
    b60c:	60f8      	str	r0, [r7, #12]
        if (elem != NULL) {
    b60e:	68fb      	ldr	r3, [r7, #12]
    b610:	2b00      	cmp	r3, #0
    b612:	d002      	beq.n	b61a <mp_load_name+0x3e>
            return elem->value;
    b614:	68fb      	ldr	r3, [r7, #12]
    b616:	685b      	ldr	r3, [r3, #4]
    b618:	e003      	b.n	b622 <mp_load_name+0x46>
        }
    }
    return mp_load_global(qst);
    b61a:	6878      	ldr	r0, [r7, #4]
    b61c:	f000 f806 	bl	b62c <mp_load_global>
    b620:	4603      	mov	r3, r0
}
    b622:	4618      	mov	r0, r3
    b624:	3714      	adds	r7, #20
    b626:	46bd      	mov	sp, r7
    b628:	bd90      	pop	{r4, r7, pc}
    b62a:	bf00      	nop

0000b62c <mp_load_global>:

mp_obj_t mp_load_global(qstr qst) {
    b62c:	b580      	push	{r7, lr}
    b62e:	b084      	sub	sp, #16
    b630:	af00      	add	r7, sp, #0
    b632:	6078      	str	r0, [r7, #4]
    // logic: search globals, builtins
    DEBUG_OP_printf("load global %s\n", qstr_str(qst));
    mp_map_elem_t *elem = mp_map_lookup(&mp_globals_get()->map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    b634:	f7ff ff88 	bl	b548 <mp_globals_get>
    b638:	4603      	mov	r3, r0
    b63a:	1d18      	adds	r0, r3, #4
    b63c:	687b      	ldr	r3, [r7, #4]
    b63e:	009b      	lsls	r3, r3, #2
    b640:	f043 0302 	orr.w	r3, r3, #2
    b644:	2200      	movs	r2, #0
    b646:	4619      	mov	r1, r3
    b648:	f001 ff7a 	bl	d540 <mp_map_lookup>
    b64c:	60f8      	str	r0, [r7, #12]
    if (elem == NULL) {
    b64e:	68fb      	ldr	r3, [r7, #12]
    b650:	2b00      	cmp	r3, #0
    b652:	d110      	bne.n	b676 <mp_load_global+0x4a>
            if (elem != NULL) {
                return elem->value;
            }
        }
        #endif
        elem = mp_map_lookup((mp_map_t*)&mp_module_builtins_globals.map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    b654:	687b      	ldr	r3, [r7, #4]
    b656:	009b      	lsls	r3, r3, #2
    b658:	f043 0302 	orr.w	r3, r3, #2
    b65c:	2200      	movs	r2, #0
    b65e:	4619      	mov	r1, r3
    b660:	4808      	ldr	r0, [pc, #32]	; (b684 <mp_load_global+0x58>)
    b662:	f001 ff6d 	bl	d540 <mp_map_lookup>
    b666:	60f8      	str	r0, [r7, #12]
        if (elem == NULL) {
    b668:	68fb      	ldr	r3, [r7, #12]
    b66a:	2b00      	cmp	r3, #0
    b66c:	d103      	bne.n	b676 <mp_load_global+0x4a>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_msg(&mp_type_NameError, "name not defined");
    b66e:	4906      	ldr	r1, [pc, #24]	; (b688 <mp_load_global+0x5c>)
    b670:	4806      	ldr	r0, [pc, #24]	; (b68c <mp_load_global+0x60>)
    b672:	f001 fc7f 	bl	cf74 <mp_raise_msg>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_NameError,
                    "name '%q' isn't defined", qst));
            }
        }
    }
    return elem->value;
    b676:	68fb      	ldr	r3, [r7, #12]
    b678:	685b      	ldr	r3, [r3, #4]
}
    b67a:	4618      	mov	r0, r3
    b67c:	3710      	adds	r7, #16
    b67e:	46bd      	mov	sp, r7
    b680:	bd80      	pop	{r7, pc}
    b682:	bf00      	nop
    b684:	000249e8 	.word	0x000249e8
    b688:	00021664 	.word	0x00021664
    b68c:	00022604 	.word	0x00022604

0000b690 <mp_load_build_class>:

mp_obj_t mp_load_build_class(void) {
    b690:	b480      	push	{r7}
    b692:	af00      	add	r7, sp, #0
        if (elem != NULL) {
            return elem->value;
        }
    }
    #endif
    return MP_OBJ_FROM_PTR(&mp_builtin___build_class___obj);
    b694:	4b02      	ldr	r3, [pc, #8]	; (b6a0 <mp_load_build_class+0x10>)
}
    b696:	4618      	mov	r0, r3
    b698:	46bd      	mov	sp, r7
    b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b69e:	4770      	bx	lr
    b6a0:	000245fc 	.word	0x000245fc

0000b6a4 <mp_store_name>:

void mp_store_name(qstr qst, mp_obj_t obj) {
    b6a4:	b580      	push	{r7, lr}
    b6a6:	b082      	sub	sp, #8
    b6a8:	af00      	add	r7, sp, #0
    b6aa:	6078      	str	r0, [r7, #4]
    b6ac:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("store name %s <- %p\n", qstr_str(qst), obj);
    mp_obj_dict_store(MP_OBJ_FROM_PTR(mp_locals_get()), MP_OBJ_NEW_QSTR(qst), obj);
    b6ae:	f7ff ff2f 	bl	b510 <mp_locals_get>
    b6b2:	687b      	ldr	r3, [r7, #4]
    b6b4:	009b      	lsls	r3, r3, #2
    b6b6:	f043 0302 	orr.w	r3, r3, #2
    b6ba:	683a      	ldr	r2, [r7, #0]
    b6bc:	4619      	mov	r1, r3
    b6be:	f003 fddb 	bl	f278 <mp_obj_dict_store>
}
    b6c2:	bf00      	nop
    b6c4:	3708      	adds	r7, #8
    b6c6:	46bd      	mov	sp, r7
    b6c8:	bd80      	pop	{r7, pc}
    b6ca:	bf00      	nop

0000b6cc <mp_delete_name>:

void mp_delete_name(qstr qst) {
    b6cc:	b580      	push	{r7, lr}
    b6ce:	b082      	sub	sp, #8
    b6d0:	af00      	add	r7, sp, #0
    b6d2:	6078      	str	r0, [r7, #4]
    DEBUG_OP_printf("delete name %s\n", qstr_str(qst));
    // TODO convert KeyError to NameError if qst not found
    mp_obj_dict_delete(MP_OBJ_FROM_PTR(mp_locals_get()), MP_OBJ_NEW_QSTR(qst));
    b6d4:	f7ff ff1c 	bl	b510 <mp_locals_get>
    b6d8:	4602      	mov	r2, r0
    b6da:	687b      	ldr	r3, [r7, #4]
    b6dc:	009b      	lsls	r3, r3, #2
    b6de:	f043 0302 	orr.w	r3, r3, #2
    b6e2:	4619      	mov	r1, r3
    b6e4:	4610      	mov	r0, r2
    b6e6:	f003 fdff 	bl	f2e8 <mp_obj_dict_delete>
}
    b6ea:	bf00      	nop
    b6ec:	3708      	adds	r7, #8
    b6ee:	46bd      	mov	sp, r7
    b6f0:	bd80      	pop	{r7, pc}
    b6f2:	bf00      	nop

0000b6f4 <mp_store_global>:

void mp_store_global(qstr qst, mp_obj_t obj) {
    b6f4:	b580      	push	{r7, lr}
    b6f6:	b082      	sub	sp, #8
    b6f8:	af00      	add	r7, sp, #0
    b6fa:	6078      	str	r0, [r7, #4]
    b6fc:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("store global %s <- %p\n", qstr_str(qst), obj);
    mp_obj_dict_store(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(qst), obj);
    b6fe:	f7ff ff23 	bl	b548 <mp_globals_get>
    b702:	687b      	ldr	r3, [r7, #4]
    b704:	009b      	lsls	r3, r3, #2
    b706:	f043 0302 	orr.w	r3, r3, #2
    b70a:	683a      	ldr	r2, [r7, #0]
    b70c:	4619      	mov	r1, r3
    b70e:	f003 fdb3 	bl	f278 <mp_obj_dict_store>
}
    b712:	bf00      	nop
    b714:	3708      	adds	r7, #8
    b716:	46bd      	mov	sp, r7
    b718:	bd80      	pop	{r7, pc}
    b71a:	bf00      	nop

0000b71c <mp_delete_global>:

void mp_delete_global(qstr qst) {
    b71c:	b580      	push	{r7, lr}
    b71e:	b082      	sub	sp, #8
    b720:	af00      	add	r7, sp, #0
    b722:	6078      	str	r0, [r7, #4]
    DEBUG_OP_printf("delete global %s\n", qstr_str(qst));
    // TODO convert KeyError to NameError if qst not found
    mp_obj_dict_delete(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(qst));
    b724:	f7ff ff10 	bl	b548 <mp_globals_get>
    b728:	4602      	mov	r2, r0
    b72a:	687b      	ldr	r3, [r7, #4]
    b72c:	009b      	lsls	r3, r3, #2
    b72e:	f043 0302 	orr.w	r3, r3, #2
    b732:	4619      	mov	r1, r3
    b734:	4610      	mov	r0, r2
    b736:	f003 fdd7 	bl	f2e8 <mp_obj_dict_delete>
}
    b73a:	bf00      	nop
    b73c:	3708      	adds	r7, #8
    b73e:	46bd      	mov	sp, r7
    b740:	bd80      	pop	{r7, pc}
    b742:	bf00      	nop

0000b744 <mp_unary_op>:

mp_obj_t mp_unary_op(mp_unary_op_t op, mp_obj_t arg) {
    b744:	b580      	push	{r7, lr}
    b746:	b088      	sub	sp, #32
    b748:	af00      	add	r7, sp, #0
    b74a:	6078      	str	r0, [r7, #4]
    b74c:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("unary " UINT_FMT " %q %p\n", op, mp_unary_op_method_name[op], arg);

    if (op == MP_UNARY_OP_NOT) {
    b74e:	687b      	ldr	r3, [r7, #4]
    b750:	2b03      	cmp	r3, #3
    b752:	d10b      	bne.n	b76c <mp_unary_op+0x28>
        // "not x" is the negative of whether "x" is true per Python semantics
        return mp_obj_new_bool(mp_obj_is_true(arg) == 0);
    b754:	6838      	ldr	r0, [r7, #0]
    b756:	f002 f97b 	bl	da50 <mp_obj_is_true>
    b75a:	4603      	mov	r3, r0
    b75c:	f083 0301 	eor.w	r3, r3, #1
    b760:	b2db      	uxtb	r3, r3
    b762:	4618      	mov	r0, r3
    b764:	f7ff fe76 	bl	b454 <mp_obj_new_bool>
    b768:	4603      	mov	r3, r0
    b76a:	e0cb      	b.n	b904 <mp_unary_op+0x1c0>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    b76c:	6838      	ldr	r0, [r7, #0]
    b76e:	f7ff fe19 	bl	b3a4 <MP_OBJ_IS_SMALL_INT>
    b772:	4603      	mov	r3, r0
    b774:	2b00      	cmp	r3, #0
    b776:	d060      	beq.n	b83a <mp_unary_op+0xf6>
        mp_int_t val = MP_OBJ_SMALL_INT_VALUE(arg);
    b778:	683b      	ldr	r3, [r7, #0]
    b77a:	105b      	asrs	r3, r3, #1
    b77c:	617b      	str	r3, [r7, #20]
        switch (op) {
    b77e:	687b      	ldr	r3, [r7, #4]
    b780:	2b08      	cmp	r3, #8
    b782:	d84b      	bhi.n	b81c <mp_unary_op+0xd8>
    b784:	a201      	add	r2, pc, #4	; (adr r2, b78c <mp_unary_op+0x48>)
    b786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b78a:	bf00      	nop
    b78c:	0000b7cb 	.word	0x0000b7cb
    b790:	0000b7cf 	.word	0x0000b7cf
    b794:	0000b81d 	.word	0x0000b81d
    b798:	0000b81d 	.word	0x0000b81d
    b79c:	0000b7b1 	.word	0x0000b7b1
    b7a0:	0000b81d 	.word	0x0000b81d
    b7a4:	0000b7c7 	.word	0x0000b7c7
    b7a8:	0000b7f1 	.word	0x0000b7f1
    b7ac:	0000b7cb 	.word	0x0000b7cb
            case MP_UNARY_OP_BOOL:
                return mp_obj_new_bool(val != 0);
    b7b0:	697b      	ldr	r3, [r7, #20]
    b7b2:	2b00      	cmp	r3, #0
    b7b4:	bf14      	ite	ne
    b7b6:	2301      	movne	r3, #1
    b7b8:	2300      	moveq	r3, #0
    b7ba:	b2db      	uxtb	r3, r3
    b7bc:	4618      	mov	r0, r3
    b7be:	f7ff fe49 	bl	b454 <mp_obj_new_bool>
    b7c2:	4603      	mov	r3, r0
    b7c4:	e09e      	b.n	b904 <mp_unary_op+0x1c0>
            case MP_UNARY_OP_HASH:
                return arg;
    b7c6:	683b      	ldr	r3, [r7, #0]
    b7c8:	e09c      	b.n	b904 <mp_unary_op+0x1c0>
            case MP_UNARY_OP_POSITIVE:
            case MP_UNARY_OP_INT:
                return arg;
    b7ca:	683b      	ldr	r3, [r7, #0]
    b7cc:	e09a      	b.n	b904 <mp_unary_op+0x1c0>
            case MP_UNARY_OP_NEGATIVE:
                // check for overflow
                if (val == MP_SMALL_INT_MIN) {
    b7ce:	697b      	ldr	r3, [r7, #20]
    b7d0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
    b7d4:	d106      	bne.n	b7e4 <mp_unary_op+0xa0>
                    return mp_obj_new_int(-val);
    b7d6:	697b      	ldr	r3, [r7, #20]
    b7d8:	425b      	negs	r3, r3
    b7da:	4618      	mov	r0, r3
    b7dc:	f005 f900 	bl	109e0 <mp_obj_new_int>
    b7e0:	4603      	mov	r3, r0
    b7e2:	e08f      	b.n	b904 <mp_unary_op+0x1c0>
                } else {
                    return MP_OBJ_NEW_SMALL_INT(-val);
    b7e4:	697b      	ldr	r3, [r7, #20]
    b7e6:	425b      	negs	r3, r3
    b7e8:	005b      	lsls	r3, r3, #1
    b7ea:	f043 0301 	orr.w	r3, r3, #1
    b7ee:	e089      	b.n	b904 <mp_unary_op+0x1c0>
                }
            case MP_UNARY_OP_ABS:
                if (val >= 0) {
    b7f0:	697b      	ldr	r3, [r7, #20]
    b7f2:	2b00      	cmp	r3, #0
    b7f4:	db01      	blt.n	b7fa <mp_unary_op+0xb6>
                    return arg;
    b7f6:	683b      	ldr	r3, [r7, #0]
    b7f8:	e084      	b.n	b904 <mp_unary_op+0x1c0>
                } else if (val == MP_SMALL_INT_MIN) {
    b7fa:	697b      	ldr	r3, [r7, #20]
    b7fc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
    b800:	d106      	bne.n	b810 <mp_unary_op+0xcc>
                    // check for overflow
                    return mp_obj_new_int(-val);
    b802:	697b      	ldr	r3, [r7, #20]
    b804:	425b      	negs	r3, r3
    b806:	4618      	mov	r0, r3
    b808:	f005 f8ea 	bl	109e0 <mp_obj_new_int>
    b80c:	4603      	mov	r3, r0
    b80e:	e079      	b.n	b904 <mp_unary_op+0x1c0>
                } else {
                    return MP_OBJ_NEW_SMALL_INT(-val);
    b810:	697b      	ldr	r3, [r7, #20]
    b812:	425b      	negs	r3, r3
    b814:	005b      	lsls	r3, r3, #1
    b816:	f043 0301 	orr.w	r3, r3, #1
    b81a:	e073      	b.n	b904 <mp_unary_op+0x1c0>
                }
            default:
                assert(op == MP_UNARY_OP_INVERT);
    b81c:	687b      	ldr	r3, [r7, #4]
    b81e:	2b02      	cmp	r3, #2
    b820:	d005      	beq.n	b82e <mp_unary_op+0xea>
    b822:	4b3a      	ldr	r3, [pc, #232]	; (b90c <mp_unary_op+0x1c8>)
    b824:	4a3a      	ldr	r2, [pc, #232]	; (b910 <mp_unary_op+0x1cc>)
    b826:	21fa      	movs	r1, #250	; 0xfa
    b828:	483a      	ldr	r0, [pc, #232]	; (b914 <mp_unary_op+0x1d0>)
    b82a:	f00f ffab 	bl	1b784 <__assert_func>
                return MP_OBJ_NEW_SMALL_INT(~val);
    b82e:	697b      	ldr	r3, [r7, #20]
    b830:	43db      	mvns	r3, r3
    b832:	005b      	lsls	r3, r3, #1
    b834:	f043 0301 	orr.w	r3, r3, #1
    b838:	e064      	b.n	b904 <mp_unary_op+0x1c0>
        }
    } else if (op == MP_UNARY_OP_HASH && MP_OBJ_IS_STR_OR_BYTES(arg)) {
    b83a:	687b      	ldr	r3, [r7, #4]
    b83c:	2b06      	cmp	r3, #6
    b83e:	d145      	bne.n	b8cc <mp_unary_op+0x188>
    b840:	6838      	ldr	r0, [r7, #0]
    b842:	f7ff fdc1 	bl	b3c8 <MP_OBJ_IS_QSTR>
    b846:	4603      	mov	r3, r0
    b848:	2b00      	cmp	r3, #0
    b84a:	d10b      	bne.n	b864 <mp_unary_op+0x120>
    b84c:	6838      	ldr	r0, [r7, #0]
    b84e:	f7ff fdcd 	bl	b3ec <MP_OBJ_IS_OBJ>
    b852:	4603      	mov	r3, r0
    b854:	2b00      	cmp	r3, #0
    b856:	d039      	beq.n	b8cc <mp_unary_op+0x188>
    b858:	683b      	ldr	r3, [r7, #0]
    b85a:	681b      	ldr	r3, [r3, #0]
    b85c:	699b      	ldr	r3, [r3, #24]
    b85e:	4a2e      	ldr	r2, [pc, #184]	; (b918 <mp_unary_op+0x1d4>)
    b860:	4293      	cmp	r3, r2
    b862:	d133      	bne.n	b8cc <mp_unary_op+0x188>
        // fast path for hashing str/bytes
        GET_STR_HASH(arg, h);
    b864:	6838      	ldr	r0, [r7, #0]
    b866:	f7ff fdaf 	bl	b3c8 <MP_OBJ_IS_QSTR>
    b86a:	4603      	mov	r3, r0
    b86c:	2b00      	cmp	r3, #0
    b86e:	d006      	beq.n	b87e <mp_unary_op+0x13a>
    b870:	683b      	ldr	r3, [r7, #0]
    b872:	089b      	lsrs	r3, r3, #2
    b874:	4618      	mov	r0, r3
    b876:	f7f5 fd69 	bl	134c <qstr_hash>
    b87a:	61f8      	str	r0, [r7, #28]
    b87c:	e002      	b.n	b884 <mp_unary_op+0x140>
    b87e:	683b      	ldr	r3, [r7, #0]
    b880:	685b      	ldr	r3, [r3, #4]
    b882:	61fb      	str	r3, [r7, #28]
        if (h == 0) {
    b884:	69fb      	ldr	r3, [r7, #28]
    b886:	2b00      	cmp	r3, #0
    b888:	d11b      	bne.n	b8c2 <mp_unary_op+0x17e>
            GET_STR_DATA_LEN(arg, data, len);
    b88a:	6838      	ldr	r0, [r7, #0]
    b88c:	f7ff fd9c 	bl	b3c8 <MP_OBJ_IS_QSTR>
    b890:	4603      	mov	r3, r0
    b892:	2b00      	cmp	r3, #0
    b894:	d009      	beq.n	b8aa <mp_unary_op+0x166>
    b896:	683b      	ldr	r3, [r7, #0]
    b898:	089b      	lsrs	r3, r3, #2
    b89a:	f107 0208 	add.w	r2, r7, #8
    b89e:	4611      	mov	r1, r2
    b8a0:	4618      	mov	r0, r3
    b8a2:	f7f5 fd7f 	bl	13a4 <qstr_data>
    b8a6:	61b8      	str	r0, [r7, #24]
    b8a8:	e005      	b.n	b8b6 <mp_unary_op+0x172>
    b8aa:	683b      	ldr	r3, [r7, #0]
    b8ac:	689b      	ldr	r3, [r3, #8]
    b8ae:	60bb      	str	r3, [r7, #8]
    b8b0:	683b      	ldr	r3, [r7, #0]
    b8b2:	68db      	ldr	r3, [r3, #12]
    b8b4:	61bb      	str	r3, [r7, #24]
            h = qstr_compute_hash(data, len);
    b8b6:	68bb      	ldr	r3, [r7, #8]
    b8b8:	4619      	mov	r1, r3
    b8ba:	69b8      	ldr	r0, [r7, #24]
    b8bc:	f7f5 fb74 	bl	fa8 <qstr_compute_hash>
    b8c0:	61f8      	str	r0, [r7, #28]
        }
        return MP_OBJ_NEW_SMALL_INT(h);
    b8c2:	69fb      	ldr	r3, [r7, #28]
    b8c4:	005b      	lsls	r3, r3, #1
    b8c6:	f043 0301 	orr.w	r3, r3, #1
    b8ca:	e01b      	b.n	b904 <mp_unary_op+0x1c0>
    } else {
        mp_obj_type_t *type = mp_obj_get_type(arg);
    b8cc:	6838      	ldr	r0, [r7, #0]
    b8ce:	f001 ffe1 	bl	d894 <mp_obj_get_type>
    b8d2:	6138      	str	r0, [r7, #16]
        if (type->unary_op != NULL) {
    b8d4:	693b      	ldr	r3, [r7, #16]
    b8d6:	695b      	ldr	r3, [r3, #20]
    b8d8:	2b00      	cmp	r3, #0
    b8da:	d00a      	beq.n	b8f2 <mp_unary_op+0x1ae>
            mp_obj_t result = type->unary_op(op, arg);
    b8dc:	693b      	ldr	r3, [r7, #16]
    b8de:	695b      	ldr	r3, [r3, #20]
    b8e0:	6839      	ldr	r1, [r7, #0]
    b8e2:	6878      	ldr	r0, [r7, #4]
    b8e4:	4798      	blx	r3
    b8e6:	60f8      	str	r0, [r7, #12]
            if (result != MP_OBJ_NULL) {
    b8e8:	68fb      	ldr	r3, [r7, #12]
    b8ea:	2b00      	cmp	r3, #0
    b8ec:	d001      	beq.n	b8f2 <mp_unary_op+0x1ae>
                return result;
    b8ee:	68fb      	ldr	r3, [r7, #12]
    b8f0:	e008      	b.n	b904 <mp_unary_op+0x1c0>
            }
        }
        // With MP_UNARY_OP_INT, mp_unary_op() becomes a fallback for mp_obj_get_int().
        // In this case provide a more focused error message to not confuse, e.g. chr(1.0)
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            if (op == MP_UNARY_OP_INT) {
    b8f2:	687b      	ldr	r3, [r7, #4]
    b8f4:	2b08      	cmp	r3, #8
    b8f6:	d102      	bne.n	b8fe <mp_unary_op+0x1ba>
                mp_raise_TypeError("can't convert to int");
    b8f8:	4808      	ldr	r0, [pc, #32]	; (b91c <mp_unary_op+0x1d8>)
    b8fa:	f001 fb5d 	bl	cfb8 <mp_raise_TypeError>
            } else {
                mp_raise_TypeError("unsupported type for operator");
    b8fe:	4808      	ldr	r0, [pc, #32]	; (b920 <mp_unary_op+0x1dc>)
    b900:	f001 fb5a 	bl	cfb8 <mp_raise_TypeError>
                    "unsupported type for %q: '%s'",
                    mp_unary_op_method_name[op], mp_obj_get_type_str(arg)));
            }
        }
    }
}
    b904:	4618      	mov	r0, r3
    b906:	3720      	adds	r7, #32
    b908:	46bd      	mov	sp, r7
    b90a:	bd80      	pop	{r7, pc}
    b90c:	00021678 	.word	0x00021678
    b910:	00021904 	.word	0x00021904
    b914:	00021694 	.word	0x00021694
    b918:	000129d5 	.word	0x000129d5
    b91c:	000216a8 	.word	0x000216a8
    b920:	000216c0 	.word	0x000216c0

0000b924 <mp_binary_op>:

mp_obj_t mp_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
    b924:	b590      	push	{r4, r7, lr}
    b926:	b095      	sub	sp, #84	; 0x54
    b928:	af00      	add	r7, sp, #0
    b92a:	60f8      	str	r0, [r7, #12]
    b92c:	60b9      	str	r1, [r7, #8]
    b92e:	607a      	str	r2, [r7, #4]
    //   then check for implemented seq.concat
    //   then fail
    // note that list does not implement + or +=, so that inplace_concat is reached first for +=

    // deal with is
    if (op == MP_BINARY_OP_IS) {
    b930:	68fb      	ldr	r3, [r7, #12]
    b932:	2b07      	cmp	r3, #7
    b934:	d10b      	bne.n	b94e <mp_binary_op+0x2a>
        return mp_obj_new_bool(lhs == rhs);
    b936:	68ba      	ldr	r2, [r7, #8]
    b938:	687b      	ldr	r3, [r7, #4]
    b93a:	429a      	cmp	r2, r3
    b93c:	bf0c      	ite	eq
    b93e:	2301      	moveq	r3, #1
    b940:	2300      	movne	r3, #0
    b942:	b2db      	uxtb	r3, r3
    b944:	4618      	mov	r0, r3
    b946:	f7ff fd85 	bl	b454 <mp_obj_new_bool>
    b94a:	4603      	mov	r3, r0
    b94c:	e23d      	b.n	bdca <mp_binary_op+0x4a6>
    }

    // deal with == and != for all types
    if (op == MP_BINARY_OP_EQUAL || op == MP_BINARY_OP_NOT_EQUAL) {
    b94e:	68fb      	ldr	r3, [r7, #12]
    b950:	2b02      	cmp	r3, #2
    b952:	d002      	beq.n	b95a <mp_binary_op+0x36>
    b954:	68fb      	ldr	r3, [r7, #12]
    b956:	2b05      	cmp	r3, #5
    b958:	d114      	bne.n	b984 <mp_binary_op+0x60>
        if (mp_obj_equal(lhs, rhs)) {
    b95a:	6879      	ldr	r1, [r7, #4]
    b95c:	68b8      	ldr	r0, [r7, #8]
    b95e:	f002 f8ed 	bl	db3c <mp_obj_equal>
    b962:	4603      	mov	r3, r0
    b964:	2b00      	cmp	r3, #0
    b966:	d006      	beq.n	b976 <mp_binary_op+0x52>
            if (op == MP_BINARY_OP_EQUAL) {
    b968:	68fb      	ldr	r3, [r7, #12]
    b96a:	2b02      	cmp	r3, #2
    b96c:	d101      	bne.n	b972 <mp_binary_op+0x4e>
                return mp_const_true;
    b96e:	4bb0      	ldr	r3, [pc, #704]	; (bc30 <mp_binary_op+0x30c>)
    b970:	e22b      	b.n	bdca <mp_binary_op+0x4a6>
            } else {
                return mp_const_false;
    b972:	4bb0      	ldr	r3, [pc, #704]	; (bc34 <mp_binary_op+0x310>)
    b974:	e229      	b.n	bdca <mp_binary_op+0x4a6>
            }
        } else {
            if (op == MP_BINARY_OP_EQUAL) {
    b976:	68fb      	ldr	r3, [r7, #12]
    b978:	2b02      	cmp	r3, #2
    b97a:	d101      	bne.n	b980 <mp_binary_op+0x5c>
                return mp_const_false;
    b97c:	4bad      	ldr	r3, [pc, #692]	; (bc34 <mp_binary_op+0x310>)
    b97e:	e224      	b.n	bdca <mp_binary_op+0x4a6>
            } else {
                return mp_const_true;
    b980:	4bab      	ldr	r3, [pc, #684]	; (bc30 <mp_binary_op+0x30c>)
    b982:	e222      	b.n	bdca <mp_binary_op+0x4a6>
            }
        }
    }

    // deal with exception_match for all types
    if (op == MP_BINARY_OP_EXCEPTION_MATCH) {
    b984:	68fb      	ldr	r3, [r7, #12]
    b986:	2b08      	cmp	r3, #8
    b988:	d145      	bne.n	ba16 <mp_binary_op+0xf2>
        // rhs must be issubclass(rhs, BaseException)
        if (mp_obj_is_exception_type(rhs)) {
    b98a:	6878      	ldr	r0, [r7, #4]
    b98c:	f003 ff38 	bl	f800 <mp_obj_is_exception_type>
    b990:	4603      	mov	r3, r0
    b992:	2b00      	cmp	r3, #0
    b994:	d00a      	beq.n	b9ac <mp_binary_op+0x88>
            if (mp_obj_exception_match(lhs, rhs)) {
    b996:	6879      	ldr	r1, [r7, #4]
    b998:	68b8      	ldr	r0, [r7, #8]
    b99a:	f003 ff69 	bl	f870 <mp_obj_exception_match>
    b99e:	4603      	mov	r3, r0
    b9a0:	2b00      	cmp	r3, #0
    b9a2:	d001      	beq.n	b9a8 <mp_binary_op+0x84>
                return mp_const_true;
    b9a4:	4ba2      	ldr	r3, [pc, #648]	; (bc30 <mp_binary_op+0x30c>)
    b9a6:	e210      	b.n	bdca <mp_binary_op+0x4a6>
            } else {
                return mp_const_false;
    b9a8:	4ba2      	ldr	r3, [pc, #648]	; (bc34 <mp_binary_op+0x310>)
    b9aa:	e20e      	b.n	bdca <mp_binary_op+0x4a6>
            }
        } else if (MP_OBJ_IS_TYPE(rhs, &mp_type_tuple)) {
    b9ac:	6878      	ldr	r0, [r7, #4]
    b9ae:	f7ff fd1d 	bl	b3ec <MP_OBJ_IS_OBJ>
    b9b2:	4603      	mov	r3, r0
    b9b4:	2b00      	cmp	r3, #0
    b9b6:	f000 81f7 	beq.w	bda8 <mp_binary_op+0x484>
    b9ba:	687b      	ldr	r3, [r7, #4]
    b9bc:	681b      	ldr	r3, [r3, #0]
    b9be:	4a9e      	ldr	r2, [pc, #632]	; (bc38 <mp_binary_op+0x314>)
    b9c0:	4293      	cmp	r3, r2
    b9c2:	f040 81f1 	bne.w	bda8 <mp_binary_op+0x484>
            mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(rhs);
    b9c6:	687b      	ldr	r3, [r7, #4]
    b9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
            for (size_t i = 0; i < tuple->len; i++) {
    b9ca:	2300      	movs	r3, #0
    b9cc:	64fb      	str	r3, [r7, #76]	; 0x4c
    b9ce:	e01b      	b.n	ba08 <mp_binary_op+0xe4>
                rhs = tuple->items[i];
    b9d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b9d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b9d4:	3202      	adds	r2, #2
    b9d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b9da:	607b      	str	r3, [r7, #4]
                if (!mp_obj_is_exception_type(rhs)) {
    b9dc:	6878      	ldr	r0, [r7, #4]
    b9de:	f003 ff0f 	bl	f800 <mp_obj_is_exception_type>
    b9e2:	4603      	mov	r3, r0
    b9e4:	f083 0301 	eor.w	r3, r3, #1
    b9e8:	b2db      	uxtb	r3, r3
    b9ea:	2b00      	cmp	r3, #0
    b9ec:	f040 81de 	bne.w	bdac <mp_binary_op+0x488>
                    goto unsupported_op;
                }
                if (mp_obj_exception_match(lhs, rhs)) {
    b9f0:	6879      	ldr	r1, [r7, #4]
    b9f2:	68b8      	ldr	r0, [r7, #8]
    b9f4:	f003 ff3c 	bl	f870 <mp_obj_exception_match>
    b9f8:	4603      	mov	r3, r0
    b9fa:	2b00      	cmp	r3, #0
    b9fc:	d001      	beq.n	ba02 <mp_binary_op+0xde>
                    return mp_const_true;
    b9fe:	4b8c      	ldr	r3, [pc, #560]	; (bc30 <mp_binary_op+0x30c>)
    ba00:	e1e3      	b.n	bdca <mp_binary_op+0x4a6>
            for (size_t i = 0; i < tuple->len; i++) {
    ba02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ba04:	3301      	adds	r3, #1
    ba06:	64fb      	str	r3, [r7, #76]	; 0x4c
    ba08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ba0a:	685a      	ldr	r2, [r3, #4]
    ba0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ba0e:	429a      	cmp	r2, r3
    ba10:	d8de      	bhi.n	b9d0 <mp_binary_op+0xac>
                }
            }
            return mp_const_false;
    ba12:	4b88      	ldr	r3, [pc, #544]	; (bc34 <mp_binary_op+0x310>)
    ba14:	e1d9      	b.n	bdca <mp_binary_op+0x4a6>
        }
        goto unsupported_op;
    }

    if (MP_OBJ_IS_SMALL_INT(lhs)) {
    ba16:	68b8      	ldr	r0, [r7, #8]
    ba18:	f7ff fcc4 	bl	b3a4 <MP_OBJ_IS_SMALL_INT>
    ba1c:	4603      	mov	r3, r0
    ba1e:	2b00      	cmp	r3, #0
    ba20:	f000 8186 	beq.w	bd30 <mp_binary_op+0x40c>
        mp_int_t lhs_val = MP_OBJ_SMALL_INT_VALUE(lhs);
    ba24:	68bb      	ldr	r3, [r7, #8]
    ba26:	105b      	asrs	r3, r3, #1
    ba28:	64bb      	str	r3, [r7, #72]	; 0x48
        if (MP_OBJ_IS_SMALL_INT(rhs)) {
    ba2a:	6878      	ldr	r0, [r7, #4]
    ba2c:	f7ff fcba 	bl	b3a4 <MP_OBJ_IS_SMALL_INT>
    ba30:	4603      	mov	r3, r0
    ba32:	2b00      	cmp	r3, #0
    ba34:	f000 817c 	beq.w	bd30 <mp_binary_op+0x40c>
            mp_int_t rhs_val = MP_OBJ_SMALL_INT_VALUE(rhs);
    ba38:	687b      	ldr	r3, [r7, #4]
    ba3a:	105b      	asrs	r3, r3, #1
    ba3c:	647b      	str	r3, [r7, #68]	; 0x44
            //      -       result always fits in mp_int_t, then handled by SMALL_INT check
            //      *       checked explicitly
            //      /       if lhs=MIN and rhs=-1; result always fits in mp_int_t, then handled by SMALL_INT check
            //      %       if lhs=MIN and rhs=-1; result always fits in mp_int_t, then handled by SMALL_INT check
            //      <<      checked explicitly
            switch (op) {
    ba3e:	68fb      	ldr	r3, [r7, #12]
    ba40:	2b21      	cmp	r3, #33	; 0x21
    ba42:	f200 81b5 	bhi.w	bdb0 <mp_binary_op+0x48c>
    ba46:	a201      	add	r2, pc, #4	; (adr r2, ba4c <mp_binary_op+0x128>)
    ba48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ba4c:	0000bca9 	.word	0x0000bca9
    ba50:	0000bcc1 	.word	0x0000bcc1
    ba54:	0000bdb1 	.word	0x0000bdb1
    ba58:	0000bcd9 	.word	0x0000bcd9
    ba5c:	0000bcf1 	.word	0x0000bcf1
    ba60:	0000bdb1 	.word	0x0000bdb1
    ba64:	0000bdb1 	.word	0x0000bdb1
    ba68:	0000bdb1 	.word	0x0000bdb1
    ba6c:	0000bdb1 	.word	0x0000bdb1
    ba70:	0000bad5 	.word	0x0000bad5
    ba74:	0000badf 	.word	0x0000badf
    ba78:	0000bae9 	.word	0x0000bae9
    ba7c:	0000baf3 	.word	0x0000baf3
    ba80:	0000bb3f 	.word	0x0000bb3f
    ba84:	0000bb61 	.word	0x0000bb61
    ba88:	0000bb6b 	.word	0x0000bb6b
    ba8c:	0000bb75 	.word	0x0000bb75
    ba90:	0000bba5 	.word	0x0000bba5
    ba94:	0000bdb1 	.word	0x0000bdb1
    ba98:	0000bbb9 	.word	0x0000bbb9
    ba9c:	0000bbcd 	.word	0x0000bbcd
    baa0:	0000bad5 	.word	0x0000bad5
    baa4:	0000badf 	.word	0x0000badf
    baa8:	0000bae9 	.word	0x0000bae9
    baac:	0000baf3 	.word	0x0000baf3
    bab0:	0000bb3f 	.word	0x0000bb3f
    bab4:	0000bb61 	.word	0x0000bb61
    bab8:	0000bb6b 	.word	0x0000bb6b
    babc:	0000bb75 	.word	0x0000bb75
    bac0:	0000bba5 	.word	0x0000bba5
    bac4:	0000bdb1 	.word	0x0000bdb1
    bac8:	0000bbb9 	.word	0x0000bbb9
    bacc:	0000bbcd 	.word	0x0000bbcd
    bad0:	0000bc67 	.word	0x0000bc67
                case MP_BINARY_OP_OR:
                case MP_BINARY_OP_INPLACE_OR: lhs_val |= rhs_val; break;
    bad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bad8:	4313      	orrs	r3, r2
    bada:	64bb      	str	r3, [r7, #72]	; 0x48
    badc:	e114      	b.n	bd08 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_XOR:
                case MP_BINARY_OP_INPLACE_XOR: lhs_val ^= rhs_val; break;
    bade:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bae2:	4053      	eors	r3, r2
    bae4:	64bb      	str	r3, [r7, #72]	; 0x48
    bae6:	e10f      	b.n	bd08 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_AND:
                case MP_BINARY_OP_INPLACE_AND: lhs_val &= rhs_val; break;
    bae8:	6cba      	ldr	r2, [r7, #72]	; 0x48
    baea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    baec:	4013      	ands	r3, r2
    baee:	64bb      	str	r3, [r7, #72]	; 0x48
    baf0:	e10a      	b.n	bd08 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_LSHIFT:
                case MP_BINARY_OP_INPLACE_LSHIFT: {
                    if (rhs_val < 0) {
    baf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    baf4:	2b00      	cmp	r3, #0
    baf6:	da02      	bge.n	bafe <mp_binary_op+0x1da>
                        // negative shift not allowed
                        mp_raise_ValueError("negative shift count");
    baf8:	4850      	ldr	r0, [pc, #320]	; (bc3c <mp_binary_op+0x318>)
    bafa:	f001 fa53 	bl	cfa4 <mp_raise_ValueError>
                    } else if (rhs_val >= (mp_int_t)BITS_PER_WORD || lhs_val > (MP_SMALL_INT_MAX >> rhs_val) || lhs_val < (MP_SMALL_INT_MIN >> rhs_val)) {
    bafe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb00:	2b1f      	cmp	r3, #31
    bb02:	dc0d      	bgt.n	bb20 <mp_binary_op+0x1fc>
    bb04:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
    bb08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb0a:	411a      	asrs	r2, r3
    bb0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bb0e:	429a      	cmp	r2, r3
    bb10:	db06      	blt.n	bb20 <mp_binary_op+0x1fc>
    bb12:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    bb16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb18:	411a      	asrs	r2, r3
    bb1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bb1c:	429a      	cmp	r2, r3
    bb1e:	dd08      	ble.n	bb32 <mp_binary_op+0x20e>
                        // left-shift will overflow, so use higher precision integer
                        lhs = mp_obj_new_int_from_ll(lhs_val);
    bb20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bb22:	ea4f 74e3 	mov.w	r4, r3, asr #31
    bb26:	4618      	mov	r0, r3
    bb28:	4621      	mov	r1, r4
    bb2a:	f004 ff23 	bl	10974 <mp_obj_new_int_from_ll>
    bb2e:	60b8      	str	r0, [r7, #8]
                        goto generic_binary_op;
    bb30:	e109      	b.n	bd46 <mp_binary_op+0x422>
                    } else {
                        // use standard precision
                        lhs_val <<= rhs_val;
    bb32:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bb34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb36:	fa02 f303 	lsl.w	r3, r2, r3
    bb3a:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    break;
    bb3c:	e0e4      	b.n	bd08 <mp_binary_op+0x3e4>
                }
                case MP_BINARY_OP_RSHIFT:
                case MP_BINARY_OP_INPLACE_RSHIFT:
                    if (rhs_val < 0) {
    bb3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb40:	2b00      	cmp	r3, #0
    bb42:	da02      	bge.n	bb4a <mp_binary_op+0x226>
                        // negative shift not allowed
                        mp_raise_ValueError("negative shift count");
    bb44:	483d      	ldr	r0, [pc, #244]	; (bc3c <mp_binary_op+0x318>)
    bb46:	f001 fa2d 	bl	cfa4 <mp_raise_ValueError>
                    } else {
                        // standard precision is enough for right-shift
                        if (rhs_val >= (mp_int_t)BITS_PER_WORD) {
    bb4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb4c:	2b1f      	cmp	r3, #31
    bb4e:	dd01      	ble.n	bb54 <mp_binary_op+0x230>
                            // Shifting to big amounts is underfined behavior
                            // in C and is CPU-dependent; propagate sign bit.
                            rhs_val = BITS_PER_WORD - 1;
    bb50:	231f      	movs	r3, #31
    bb52:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                        lhs_val >>= rhs_val;
    bb54:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bb56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb58:	fa42 f303 	asr.w	r3, r2, r3
    bb5c:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    break;
    bb5e:	e0d3      	b.n	bd08 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_ADD:
                case MP_BINARY_OP_INPLACE_ADD: lhs_val += rhs_val; break;
    bb60:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bb62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb64:	4413      	add	r3, r2
    bb66:	64bb      	str	r3, [r7, #72]	; 0x48
    bb68:	e0ce      	b.n	bd08 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_SUBTRACT:
                case MP_BINARY_OP_INPLACE_SUBTRACT: lhs_val -= rhs_val; break;
    bb6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bb6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb6e:	1ad3      	subs	r3, r2, r3
    bb70:	64bb      	str	r3, [r7, #72]	; 0x48
    bb72:	e0c9      	b.n	bd08 <mp_binary_op+0x3e4>
                        // use standard precision
                        lhs_val = (mp_int_t)res;
                    }
                    #endif

                    if (mp_small_int_mul_overflow(lhs_val, rhs_val)) {
    bb74:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bb76:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bb78:	f00f fc12 	bl	1b3a0 <mp_small_int_mul_overflow>
    bb7c:	4603      	mov	r3, r0
    bb7e:	2b00      	cmp	r3, #0
    bb80:	d008      	beq.n	bb94 <mp_binary_op+0x270>
                        // use higher precision
                        lhs = mp_obj_new_int_from_ll(lhs_val);
    bb82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bb84:	ea4f 74e3 	mov.w	r4, r3, asr #31
    bb88:	4618      	mov	r0, r3
    bb8a:	4621      	mov	r1, r4
    bb8c:	f004 fef2 	bl	10974 <mp_obj_new_int_from_ll>
    bb90:	60b8      	str	r0, [r7, #8]
                        goto generic_binary_op;
    bb92:	e0d8      	b.n	bd46 <mp_binary_op+0x422>
                    } else {
                        // use standard precision
                        return MP_OBJ_NEW_SMALL_INT(lhs_val * rhs_val);
    bb94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bb96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    bb98:	fb02 f303 	mul.w	r3, r2, r3
    bb9c:	005b      	lsls	r3, r3, #1
    bb9e:	f043 0301 	orr.w	r3, r3, #1
    bba2:	e112      	b.n	bdca <mp_binary_op+0x4a6>
                    }
                }
                case MP_BINARY_OP_FLOOR_DIVIDE:
                case MP_BINARY_OP_INPLACE_FLOOR_DIVIDE:
                    if (rhs_val == 0) {
    bba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bba6:	2b00      	cmp	r3, #0
    bba8:	f000 8106 	beq.w	bdb8 <mp_binary_op+0x494>
                        goto zero_division;
                    }
                    lhs_val = mp_small_int_floor_divide(lhs_val, rhs_val);
    bbac:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bbae:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bbb0:	f00f fc5c 	bl	1b46c <mp_small_int_floor_divide>
    bbb4:	64b8      	str	r0, [r7, #72]	; 0x48
                    break;
    bbb6:	e0a7      	b.n	bd08 <mp_binary_op+0x3e4>
                    return mp_obj_new_float((mp_float_t)lhs_val / (mp_float_t)rhs_val);
                #endif

                case MP_BINARY_OP_MODULO:
                case MP_BINARY_OP_INPLACE_MODULO: {
                    if (rhs_val == 0) {
    bbb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bbba:	2b00      	cmp	r3, #0
    bbbc:	f000 80fe 	beq.w	bdbc <mp_binary_op+0x498>
                        goto zero_division;
                    }
                    lhs_val = mp_small_int_modulo(lhs_val, rhs_val);
    bbc0:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bbc2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bbc4:	f00f fc2c 	bl	1b420 <mp_small_int_modulo>
    bbc8:	64b8      	str	r0, [r7, #72]	; 0x48
                    break;
    bbca:	e09d      	b.n	bd08 <mp_binary_op+0x3e4>
                }

                case MP_BINARY_OP_POWER:
                case MP_BINARY_OP_INPLACE_POWER:
                    if (rhs_val < 0) {
    bbcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bbce:	2b00      	cmp	r3, #0
    bbd0:	da02      	bge.n	bbd8 <mp_binary_op+0x2b4>
                        #if MICROPY_PY_BUILTINS_FLOAT
                        lhs = mp_obj_new_float(lhs_val);
                        goto generic_binary_op;
                        #else
                        mp_raise_ValueError("negative power with no float support");
    bbd2:	481b      	ldr	r0, [pc, #108]	; (bc40 <mp_binary_op+0x31c>)
    bbd4:	f001 f9e6 	bl	cfa4 <mp_raise_ValueError>
                        #endif
                    } else {
                        mp_int_t ans = 1;
    bbd8:	2301      	movs	r3, #1
    bbda:	643b      	str	r3, [r7, #64]	; 0x40
                        while (rhs_val > 0) {
    bbdc:	e024      	b.n	bc28 <mp_binary_op+0x304>
                            if (rhs_val & 1) {
    bbde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bbe0:	f003 0301 	and.w	r3, r3, #1
    bbe4:	2b00      	cmp	r3, #0
    bbe6:	d00b      	beq.n	bc00 <mp_binary_op+0x2dc>
                                if (mp_small_int_mul_overflow(ans, lhs_val)) {
    bbe8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    bbea:	6c38      	ldr	r0, [r7, #64]	; 0x40
    bbec:	f00f fbd8 	bl	1b3a0 <mp_small_int_mul_overflow>
    bbf0:	4603      	mov	r3, r0
    bbf2:	2b00      	cmp	r3, #0
    bbf4:	d12a      	bne.n	bc4c <mp_binary_op+0x328>
                                    goto power_overflow;
                                }
                                ans *= lhs_val;
    bbf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    bbf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bbfa:	fb02 f303 	mul.w	r3, r2, r3
    bbfe:	643b      	str	r3, [r7, #64]	; 0x40
                            }
                            if (rhs_val == 1) {
    bc00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bc02:	2b01      	cmp	r3, #1
    bc04:	d01e      	beq.n	bc44 <mp_binary_op+0x320>
                                break;
                            }
                            rhs_val /= 2;
    bc06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bc08:	0fda      	lsrs	r2, r3, #31
    bc0a:	4413      	add	r3, r2
    bc0c:	105b      	asrs	r3, r3, #1
    bc0e:	647b      	str	r3, [r7, #68]	; 0x44
                            if (mp_small_int_mul_overflow(lhs_val, lhs_val)) {
    bc10:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    bc12:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bc14:	f00f fbc4 	bl	1b3a0 <mp_small_int_mul_overflow>
    bc18:	4603      	mov	r3, r0
    bc1a:	2b00      	cmp	r3, #0
    bc1c:	d118      	bne.n	bc50 <mp_binary_op+0x32c>
                                goto power_overflow;
                            }
                            lhs_val *= lhs_val;
    bc1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bc20:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bc22:	fb02 f303 	mul.w	r3, r2, r3
    bc26:	64bb      	str	r3, [r7, #72]	; 0x48
                        while (rhs_val > 0) {
    bc28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bc2a:	2b00      	cmp	r3, #0
    bc2c:	dcd7      	bgt.n	bbde <mp_binary_op+0x2ba>
    bc2e:	e00a      	b.n	bc46 <mp_binary_op+0x322>
    bc30:	00021c60 	.word	0x00021c60
    bc34:	00021c58 	.word	0x00021c58
    bc38:	00023dec 	.word	0x00023dec
    bc3c:	000216e0 	.word	0x000216e0
    bc40:	000216f8 	.word	0x000216f8
                                break;
    bc44:	bf00      	nop
                        }
                        lhs_val = ans;
    bc46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    bc48:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    break;
    bc4a:	e05d      	b.n	bd08 <mp_binary_op+0x3e4>
                                    goto power_overflow;
    bc4c:	bf00      	nop
    bc4e:	e000      	b.n	bc52 <mp_binary_op+0x32e>
                                goto power_overflow;
    bc50:	bf00      	nop

                power_overflow:
                    // use higher precision
                    lhs = mp_obj_new_int_from_ll(MP_OBJ_SMALL_INT_VALUE(lhs));
    bc52:	68bb      	ldr	r3, [r7, #8]
    bc54:	105b      	asrs	r3, r3, #1
    bc56:	ea4f 74e3 	mov.w	r4, r3, asr #31
    bc5a:	4618      	mov	r0, r3
    bc5c:	4621      	mov	r1, r4
    bc5e:	f004 fe89 	bl	10974 <mp_obj_new_int_from_ll>
    bc62:	60b8      	str	r0, [r7, #8]
                    goto generic_binary_op;
    bc64:	e06f      	b.n	bd46 <mp_binary_op+0x422>

                case MP_BINARY_OP_DIVMOD: {
                    if (rhs_val == 0) {
    bc66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bc68:	2b00      	cmp	r3, #0
    bc6a:	f000 80a9 	beq.w	bdc0 <mp_binary_op+0x49c>
                        goto zero_division;
                    }
                    // to reduce stack usage we don't pass a temp array of the 2 items
                    mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(mp_obj_new_tuple(2, NULL));
    bc6e:	2100      	movs	r1, #0
    bc70:	2002      	movs	r0, #2
    bc72:	f00a f97d 	bl	15f70 <mp_obj_new_tuple>
    bc76:	63b8      	str	r0, [r7, #56]	; 0x38
                    tuple->items[0] = MP_OBJ_NEW_SMALL_INT(mp_small_int_floor_divide(lhs_val, rhs_val));
    bc78:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bc7a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bc7c:	f00f fbf6 	bl	1b46c <mp_small_int_floor_divide>
    bc80:	4603      	mov	r3, r0
    bc82:	005b      	lsls	r3, r3, #1
    bc84:	f043 0301 	orr.w	r3, r3, #1
    bc88:	461a      	mov	r2, r3
    bc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bc8c:	609a      	str	r2, [r3, #8]
                    tuple->items[1] = MP_OBJ_NEW_SMALL_INT(mp_small_int_modulo(lhs_val, rhs_val));
    bc8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bc90:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bc92:	f00f fbc5 	bl	1b420 <mp_small_int_modulo>
    bc96:	4603      	mov	r3, r0
    bc98:	005b      	lsls	r3, r3, #1
    bc9a:	f043 0301 	orr.w	r3, r3, #1
    bc9e:	461a      	mov	r2, r3
    bca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bca2:	60da      	str	r2, [r3, #12]
                    return MP_OBJ_FROM_PTR(tuple);
    bca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bca6:	e090      	b.n	bdca <mp_binary_op+0x4a6>
                }

                case MP_BINARY_OP_LESS: return mp_obj_new_bool(lhs_val < rhs_val);
    bca8:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bcaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bcac:	429a      	cmp	r2, r3
    bcae:	bfb4      	ite	lt
    bcb0:	2301      	movlt	r3, #1
    bcb2:	2300      	movge	r3, #0
    bcb4:	b2db      	uxtb	r3, r3
    bcb6:	4618      	mov	r0, r3
    bcb8:	f7ff fbcc 	bl	b454 <mp_obj_new_bool>
    bcbc:	4603      	mov	r3, r0
    bcbe:	e084      	b.n	bdca <mp_binary_op+0x4a6>
                case MP_BINARY_OP_MORE: return mp_obj_new_bool(lhs_val > rhs_val);
    bcc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bcc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bcc4:	429a      	cmp	r2, r3
    bcc6:	bfcc      	ite	gt
    bcc8:	2301      	movgt	r3, #1
    bcca:	2300      	movle	r3, #0
    bccc:	b2db      	uxtb	r3, r3
    bcce:	4618      	mov	r0, r3
    bcd0:	f7ff fbc0 	bl	b454 <mp_obj_new_bool>
    bcd4:	4603      	mov	r3, r0
    bcd6:	e078      	b.n	bdca <mp_binary_op+0x4a6>
                case MP_BINARY_OP_LESS_EQUAL: return mp_obj_new_bool(lhs_val <= rhs_val);
    bcd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bcda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bcdc:	429a      	cmp	r2, r3
    bcde:	bfd4      	ite	le
    bce0:	2301      	movle	r3, #1
    bce2:	2300      	movgt	r3, #0
    bce4:	b2db      	uxtb	r3, r3
    bce6:	4618      	mov	r0, r3
    bce8:	f7ff fbb4 	bl	b454 <mp_obj_new_bool>
    bcec:	4603      	mov	r3, r0
    bcee:	e06c      	b.n	bdca <mp_binary_op+0x4a6>
                case MP_BINARY_OP_MORE_EQUAL: return mp_obj_new_bool(lhs_val >= rhs_val);
    bcf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bcf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bcf4:	429a      	cmp	r2, r3
    bcf6:	bfac      	ite	ge
    bcf8:	2301      	movge	r3, #1
    bcfa:	2300      	movlt	r3, #0
    bcfc:	b2db      	uxtb	r3, r3
    bcfe:	4618      	mov	r0, r3
    bd00:	f7ff fba8 	bl	b454 <mp_obj_new_bool>
    bd04:	4603      	mov	r3, r0
    bd06:	e060      	b.n	bdca <mp_binary_op+0x4a6>

                default:
                    goto unsupported_op;
            }
            // This is an inlined version of mp_obj_new_int, for speed
            if (MP_SMALL_INT_FITS(lhs_val)) {
    bd08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bd0a:	005a      	lsls	r2, r3, #1
    bd0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bd0e:	4053      	eors	r3, r2
    bd10:	2b00      	cmp	r3, #0
    bd12:	db04      	blt.n	bd1e <mp_binary_op+0x3fa>
                return MP_OBJ_NEW_SMALL_INT(lhs_val);
    bd14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bd16:	005b      	lsls	r3, r3, #1
    bd18:	f043 0301 	orr.w	r3, r3, #1
    bd1c:	e055      	b.n	bdca <mp_binary_op+0x4a6>
            } else {
                return mp_obj_new_int_from_ll(lhs_val);
    bd1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bd20:	ea4f 74e3 	mov.w	r4, r3, asr #31
    bd24:	4618      	mov	r0, r3
    bd26:	4621      	mov	r1, r4
    bd28:	f004 fe24 	bl	10974 <mp_obj_new_int_from_ll>
    bd2c:	4603      	mov	r3, r0
    bd2e:	e04c      	b.n	bdca <mp_binary_op+0x4a6>
#endif
        }
    }

    // Convert MP_BINARY_OP_IN to MP_BINARY_OP_CONTAINS with swapped args.
    if (op == MP_BINARY_OP_IN) {
    bd30:	68fb      	ldr	r3, [r7, #12]
    bd32:	2b06      	cmp	r3, #6
    bd34:	d107      	bne.n	bd46 <mp_binary_op+0x422>
        op = MP_BINARY_OP_CONTAINS;
    bd36:	2322      	movs	r3, #34	; 0x22
    bd38:	60fb      	str	r3, [r7, #12]
        mp_obj_t temp = lhs;
    bd3a:	68bb      	ldr	r3, [r7, #8]
    bd3c:	637b      	str	r3, [r7, #52]	; 0x34
        lhs = rhs;
    bd3e:	687b      	ldr	r3, [r7, #4]
    bd40:	60bb      	str	r3, [r7, #8]
        rhs = temp;
    bd42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    bd44:	607b      	str	r3, [r7, #4]
    }

    // generic binary_op supplied by type
    mp_obj_type_t *type;
generic_binary_op:
    type = mp_obj_get_type(lhs);
    bd46:	68b8      	ldr	r0, [r7, #8]
    bd48:	f001 fda4 	bl	d894 <mp_obj_get_type>
    bd4c:	6338      	str	r0, [r7, #48]	; 0x30
    if (type->binary_op != NULL) {
    bd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bd50:	699b      	ldr	r3, [r3, #24]
    bd52:	2b00      	cmp	r3, #0
    bd54:	d00b      	beq.n	bd6e <mp_binary_op+0x44a>
        mp_obj_t result = type->binary_op(op, lhs, rhs);
    bd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bd58:	699b      	ldr	r3, [r3, #24]
    bd5a:	687a      	ldr	r2, [r7, #4]
    bd5c:	68b9      	ldr	r1, [r7, #8]
    bd5e:	68f8      	ldr	r0, [r7, #12]
    bd60:	4798      	blx	r3
    bd62:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (result != MP_OBJ_NULL) {
    bd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd66:	2b00      	cmp	r3, #0
    bd68:	d001      	beq.n	bd6e <mp_binary_op+0x44a>
            return result;
    bd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd6c:	e02d      	b.n	bdca <mp_binary_op+0x4a6>
        // Convert __rop__ back to __op__ for error message
        op -= MP_BINARY_OP_REVERSE_OR - MP_BINARY_OP_OR;
    }
#endif

    if (op == MP_BINARY_OP_CONTAINS) {
    bd6e:	68fb      	ldr	r3, [r7, #12]
    bd70:	2b22      	cmp	r3, #34	; 0x22
    bd72:	d11e      	bne.n	bdb2 <mp_binary_op+0x48e>
        // If type didn't support containment then explicitly walk the iterator.
        // mp_getiter will raise the appropriate exception if lhs is not iterable.
        mp_obj_iter_buf_t iter_buf;
        mp_obj_t iter = mp_getiter(lhs, &iter_buf);
    bd74:	f107 0314 	add.w	r3, r7, #20
    bd78:	4619      	mov	r1, r3
    bd7a:	68b8      	ldr	r0, [r7, #8]
    bd7c:	f000 fde2 	bl	c944 <mp_getiter>
    bd80:	62b8      	str	r0, [r7, #40]	; 0x28
        mp_obj_t next;
        while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    bd82:	e008      	b.n	bd96 <mp_binary_op+0x472>
            if (mp_obj_equal(next, rhs)) {
    bd84:	6879      	ldr	r1, [r7, #4]
    bd86:	6a78      	ldr	r0, [r7, #36]	; 0x24
    bd88:	f001 fed8 	bl	db3c <mp_obj_equal>
    bd8c:	4603      	mov	r3, r0
    bd8e:	2b00      	cmp	r3, #0
    bd90:	d001      	beq.n	bd96 <mp_binary_op+0x472>
                return mp_const_true;
    bd92:	4b10      	ldr	r3, [pc, #64]	; (bdd4 <mp_binary_op+0x4b0>)
    bd94:	e019      	b.n	bdca <mp_binary_op+0x4a6>
        while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    bd96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bd98:	f000 fe56 	bl	ca48 <mp_iternext>
    bd9c:	6278      	str	r0, [r7, #36]	; 0x24
    bd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bda0:	2b04      	cmp	r3, #4
    bda2:	d1ef      	bne.n	bd84 <mp_binary_op+0x460>
            }
        }
        return mp_const_false;
    bda4:	4b0c      	ldr	r3, [pc, #48]	; (bdd8 <mp_binary_op+0x4b4>)
    bda6:	e010      	b.n	bdca <mp_binary_op+0x4a6>
        goto unsupported_op;
    bda8:	bf00      	nop
    bdaa:	e002      	b.n	bdb2 <mp_binary_op+0x48e>
                    goto unsupported_op;
    bdac:	bf00      	nop
    bdae:	e000      	b.n	bdb2 <mp_binary_op+0x48e>
                    goto unsupported_op;
    bdb0:	bf00      	nop
    }

unsupported_op:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("unsupported type for operator");
    bdb2:	480a      	ldr	r0, [pc, #40]	; (bddc <mp_binary_op+0x4b8>)
    bdb4:	f001 f900 	bl	cfb8 <mp_raise_TypeError>
                        goto zero_division;
    bdb8:	bf00      	nop
    bdba:	e002      	b.n	bdc2 <mp_binary_op+0x49e>
                        goto zero_division;
    bdbc:	bf00      	nop
    bdbe:	e000      	b.n	bdc2 <mp_binary_op+0x49e>
                        goto zero_division;
    bdc0:	bf00      	nop
            "unsupported types for %q: '%s', '%s'",
            mp_binary_op_method_name[op], mp_obj_get_type_str(lhs), mp_obj_get_type_str(rhs)));
    }

zero_division:
    mp_raise_msg(&mp_type_ZeroDivisionError, "divide by zero");
    bdc2:	4907      	ldr	r1, [pc, #28]	; (bde0 <mp_binary_op+0x4bc>)
    bdc4:	4807      	ldr	r0, [pc, #28]	; (bde4 <mp_binary_op+0x4c0>)
    bdc6:	f001 f8d5 	bl	cf74 <mp_raise_msg>
}
    bdca:	4618      	mov	r0, r3
    bdcc:	3754      	adds	r7, #84	; 0x54
    bdce:	46bd      	mov	sp, r7
    bdd0:	bd90      	pop	{r4, r7, pc}
    bdd2:	bf00      	nop
    bdd4:	00021c60 	.word	0x00021c60
    bdd8:	00021c58 	.word	0x00021c58
    bddc:	000216c0 	.word	0x000216c0
    bde0:	00021720 	.word	0x00021720
    bde4:	000223e8 	.word	0x000223e8

0000bde8 <mp_call_function_0>:

mp_obj_t mp_call_function_0(mp_obj_t fun) {
    bde8:	b580      	push	{r7, lr}
    bdea:	b082      	sub	sp, #8
    bdec:	af00      	add	r7, sp, #0
    bdee:	6078      	str	r0, [r7, #4]
    return mp_call_function_n_kw(fun, 0, 0, NULL);
    bdf0:	2300      	movs	r3, #0
    bdf2:	2200      	movs	r2, #0
    bdf4:	2100      	movs	r1, #0
    bdf6:	6878      	ldr	r0, [r7, #4]
    bdf8:	f000 f82c 	bl	be54 <mp_call_function_n_kw>
    bdfc:	4603      	mov	r3, r0
}
    bdfe:	4618      	mov	r0, r3
    be00:	3708      	adds	r7, #8
    be02:	46bd      	mov	sp, r7
    be04:	bd80      	pop	{r7, pc}
    be06:	bf00      	nop

0000be08 <mp_call_function_1>:

mp_obj_t mp_call_function_1(mp_obj_t fun, mp_obj_t arg) {
    be08:	b580      	push	{r7, lr}
    be0a:	b082      	sub	sp, #8
    be0c:	af00      	add	r7, sp, #0
    be0e:	6078      	str	r0, [r7, #4]
    be10:	6039      	str	r1, [r7, #0]
    return mp_call_function_n_kw(fun, 1, 0, &arg);
    be12:	463b      	mov	r3, r7
    be14:	2200      	movs	r2, #0
    be16:	2101      	movs	r1, #1
    be18:	6878      	ldr	r0, [r7, #4]
    be1a:	f000 f81b 	bl	be54 <mp_call_function_n_kw>
    be1e:	4603      	mov	r3, r0
}
    be20:	4618      	mov	r0, r3
    be22:	3708      	adds	r7, #8
    be24:	46bd      	mov	sp, r7
    be26:	bd80      	pop	{r7, pc}

0000be28 <mp_call_function_2>:

mp_obj_t mp_call_function_2(mp_obj_t fun, mp_obj_t arg1, mp_obj_t arg2) {
    be28:	b580      	push	{r7, lr}
    be2a:	b086      	sub	sp, #24
    be2c:	af00      	add	r7, sp, #0
    be2e:	60f8      	str	r0, [r7, #12]
    be30:	60b9      	str	r1, [r7, #8]
    be32:	607a      	str	r2, [r7, #4]
    mp_obj_t args[2];
    args[0] = arg1;
    be34:	68bb      	ldr	r3, [r7, #8]
    be36:	613b      	str	r3, [r7, #16]
    args[1] = arg2;
    be38:	687b      	ldr	r3, [r7, #4]
    be3a:	617b      	str	r3, [r7, #20]
    return mp_call_function_n_kw(fun, 2, 0, args);
    be3c:	f107 0310 	add.w	r3, r7, #16
    be40:	2200      	movs	r2, #0
    be42:	2102      	movs	r1, #2
    be44:	68f8      	ldr	r0, [r7, #12]
    be46:	f000 f805 	bl	be54 <mp_call_function_n_kw>
    be4a:	4603      	mov	r3, r0
}
    be4c:	4618      	mov	r0, r3
    be4e:	3718      	adds	r7, #24
    be50:	46bd      	mov	sp, r7
    be52:	bd80      	pop	{r7, pc}

0000be54 <mp_call_function_n_kw>:

// args contains, eg: arg0  arg1  key0  value0  key1  value1
mp_obj_t mp_call_function_n_kw(mp_obj_t fun_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    be54:	b590      	push	{r4, r7, lr}
    be56:	b087      	sub	sp, #28
    be58:	af00      	add	r7, sp, #0
    be5a:	60f8      	str	r0, [r7, #12]
    be5c:	60b9      	str	r1, [r7, #8]
    be5e:	607a      	str	r2, [r7, #4]
    be60:	603b      	str	r3, [r7, #0]
    // passing to the function arrays of fixed and keyword arguments

    DEBUG_OP_printf("calling function %p(n_args=" UINT_FMT ", n_kw=" UINT_FMT ", args=%p)\n", fun_in, n_args, n_kw, args);

    // get the type
    mp_obj_type_t *type = mp_obj_get_type(fun_in);
    be62:	68f8      	ldr	r0, [r7, #12]
    be64:	f001 fd16 	bl	d894 <mp_obj_get_type>
    be68:	6178      	str	r0, [r7, #20]

    // do the call
    if (type->call != NULL) {
    be6a:	697b      	ldr	r3, [r7, #20]
    be6c:	691b      	ldr	r3, [r3, #16]
    be6e:	2b00      	cmp	r3, #0
    be70:	d008      	beq.n	be84 <mp_call_function_n_kw+0x30>
        return type->call(fun_in, n_args, n_kw, args);
    be72:	697b      	ldr	r3, [r7, #20]
    be74:	691c      	ldr	r4, [r3, #16]
    be76:	683b      	ldr	r3, [r7, #0]
    be78:	687a      	ldr	r2, [r7, #4]
    be7a:	68b9      	ldr	r1, [r7, #8]
    be7c:	68f8      	ldr	r0, [r7, #12]
    be7e:	47a0      	blx	r4
    be80:	4603      	mov	r3, r0
    be82:	e002      	b.n	be8a <mp_call_function_n_kw+0x36>
    }

    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("object not callable");
    be84:	4803      	ldr	r0, [pc, #12]	; (be94 <mp_call_function_n_kw+0x40>)
    be86:	f001 f897 	bl	cfb8 <mp_raise_TypeError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "'%s' object isn't callable", mp_obj_get_type_str(fun_in)));
    }
}
    be8a:	4618      	mov	r0, r3
    be8c:	371c      	adds	r7, #28
    be8e:	46bd      	mov	sp, r7
    be90:	bd90      	pop	{r4, r7, pc}
    be92:	bf00      	nop
    be94:	00021730 	.word	0x00021730

0000be98 <mp_call_method_n_kw>:

// args contains: fun  self/NULL  arg(0)  ...  arg(n_args-2)  arg(n_args-1)  kw_key(0)  kw_val(0)  ... kw_key(n_kw-1)  kw_val(n_kw-1)
// if n_args==0 and n_kw==0 then there are only fun and self/NULL
mp_obj_t mp_call_method_n_kw(size_t n_args, size_t n_kw, const mp_obj_t *args) {
    be98:	b580      	push	{r7, lr}
    be9a:	b086      	sub	sp, #24
    be9c:	af00      	add	r7, sp, #0
    be9e:	60f8      	str	r0, [r7, #12]
    bea0:	60b9      	str	r1, [r7, #8]
    bea2:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("call method (fun=%p, self=%p, n_args=" UINT_FMT ", n_kw=" UINT_FMT ", args=%p)\n", args[0], args[1], n_args, n_kw, args);
    int adjust = (args[1] == MP_OBJ_NULL) ? 0 : 1;
    bea4:	687b      	ldr	r3, [r7, #4]
    bea6:	3304      	adds	r3, #4
    bea8:	681b      	ldr	r3, [r3, #0]
    beaa:	2b00      	cmp	r3, #0
    beac:	bf14      	ite	ne
    beae:	2301      	movne	r3, #1
    beb0:	2300      	moveq	r3, #0
    beb2:	b2db      	uxtb	r3, r3
    beb4:	617b      	str	r3, [r7, #20]
    return mp_call_function_n_kw(args[0], n_args + adjust, n_kw, args + 2 - adjust);
    beb6:	687b      	ldr	r3, [r7, #4]
    beb8:	6818      	ldr	r0, [r3, #0]
    beba:	697a      	ldr	r2, [r7, #20]
    bebc:	68fb      	ldr	r3, [r7, #12]
    bebe:	18d1      	adds	r1, r2, r3
    bec0:	697a      	ldr	r2, [r7, #20]
    bec2:	4613      	mov	r3, r2
    bec4:	079b      	lsls	r3, r3, #30
    bec6:	1a9b      	subs	r3, r3, r2
    bec8:	009b      	lsls	r3, r3, #2
    beca:	3308      	adds	r3, #8
    becc:	687a      	ldr	r2, [r7, #4]
    bece:	4413      	add	r3, r2
    bed0:	68ba      	ldr	r2, [r7, #8]
    bed2:	f7ff ffbf 	bl	be54 <mp_call_function_n_kw>
    bed6:	4603      	mov	r3, r0
}
    bed8:	4618      	mov	r0, r3
    beda:	3718      	adds	r7, #24
    bedc:	46bd      	mov	sp, r7
    bede:	bd80      	pop	{r7, pc}

0000bee0 <mp_call_prepare_args_n_kw_var>:

// This function only needs to be exposed externally when in stackless mode.
#if !MICROPY_STACKLESS
STATIC
#endif
void mp_call_prepare_args_n_kw_var(bool have_self, size_t n_args_n_kw, const mp_obj_t *args, mp_call_args_t *out_args) {
    bee0:	b580      	push	{r7, lr}
    bee2:	b0a2      	sub	sp, #136	; 0x88
    bee4:	af00      	add	r7, sp, #0
    bee6:	60b9      	str	r1, [r7, #8]
    bee8:	607a      	str	r2, [r7, #4]
    beea:	603b      	str	r3, [r7, #0]
    beec:	4603      	mov	r3, r0
    beee:	73fb      	strb	r3, [r7, #15]
    mp_obj_t fun = *args++;
    bef0:	687b      	ldr	r3, [r7, #4]
    bef2:	1d1a      	adds	r2, r3, #4
    bef4:	607a      	str	r2, [r7, #4]
    bef6:	681b      	ldr	r3, [r3, #0]
    bef8:	663b      	str	r3, [r7, #96]	; 0x60
    mp_obj_t self = MP_OBJ_NULL;
    befa:	2300      	movs	r3, #0
    befc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (have_self) {
    bf00:	7bfb      	ldrb	r3, [r7, #15]
    bf02:	2b00      	cmp	r3, #0
    bf04:	d005      	beq.n	bf12 <mp_call_prepare_args_n_kw_var+0x32>
        self = *args++; // may be MP_OBJ_NULL
    bf06:	687b      	ldr	r3, [r7, #4]
    bf08:	1d1a      	adds	r2, r3, #4
    bf0a:	607a      	str	r2, [r7, #4]
    bf0c:	681b      	ldr	r3, [r3, #0]
    bf0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }
    uint n_args = n_args_n_kw & 0xff;
    bf12:	68bb      	ldr	r3, [r7, #8]
    bf14:	b2db      	uxtb	r3, r3
    bf16:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint n_kw = (n_args_n_kw >> 8) & 0xff;
    bf18:	68bb      	ldr	r3, [r7, #8]
    bf1a:	0a1b      	lsrs	r3, r3, #8
    bf1c:	b2db      	uxtb	r3, r3
    bf1e:	65bb      	str	r3, [r7, #88]	; 0x58
    mp_obj_t pos_seq = args[n_args + 2 * n_kw]; // may be MP_OBJ_NULL
    bf20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    bf22:	005a      	lsls	r2, r3, #1
    bf24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bf26:	4413      	add	r3, r2
    bf28:	009b      	lsls	r3, r3, #2
    bf2a:	687a      	ldr	r2, [r7, #4]
    bf2c:	4413      	add	r3, r2
    bf2e:	681b      	ldr	r3, [r3, #0]
    bf30:	657b      	str	r3, [r7, #84]	; 0x54
    mp_obj_t kw_dict = args[n_args + 2 * n_kw + 1]; // may be MP_OBJ_NULL
    bf32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    bf34:	005a      	lsls	r2, r3, #1
    bf36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bf38:	4413      	add	r3, r2
    bf3a:	3301      	adds	r3, #1
    bf3c:	009b      	lsls	r3, r3, #2
    bf3e:	687a      	ldr	r2, [r7, #4]
    bf40:	4413      	add	r3, r2
    bf42:	681b      	ldr	r3, [r3, #0]
    bf44:	653b      	str	r3, [r7, #80]	; 0x50
    // TODO: optimize one day to avoid constructing new arg array? Will be hard.

    // The new args array
    mp_obj_t *args2;
    uint args2_alloc;
    uint args2_len = 0;
    bf46:	2300      	movs	r3, #0
    bf48:	67bb      	str	r3, [r7, #120]	; 0x78

    // Try to get a hint for the size of the kw_dict
    uint kw_dict_len = 0;
    bf4a:	2300      	movs	r3, #0
    bf4c:	677b      	str	r3, [r7, #116]	; 0x74
    if (kw_dict != MP_OBJ_NULL && MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    bf4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    bf50:	2b00      	cmp	r3, #0
    bf52:	d00e      	beq.n	bf72 <mp_call_prepare_args_n_kw_var+0x92>
    bf54:	6d38      	ldr	r0, [r7, #80]	; 0x50
    bf56:	f7ff fa49 	bl	b3ec <MP_OBJ_IS_OBJ>
    bf5a:	4603      	mov	r3, r0
    bf5c:	2b00      	cmp	r3, #0
    bf5e:	d008      	beq.n	bf72 <mp_call_prepare_args_n_kw_var+0x92>
    bf60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    bf62:	681b      	ldr	r3, [r3, #0]
    bf64:	4ab0      	ldr	r2, [pc, #704]	; (c228 <mp_call_prepare_args_n_kw_var+0x348>)
    bf66:	4293      	cmp	r3, r2
    bf68:	d103      	bne.n	bf72 <mp_call_prepare_args_n_kw_var+0x92>
        kw_dict_len = mp_obj_dict_len(kw_dict);
    bf6a:	6d38      	ldr	r0, [r7, #80]	; 0x50
    bf6c:	f003 f974 	bl	f258 <mp_obj_dict_len>
    bf70:	6778      	str	r0, [r7, #116]	; 0x74
    }

    // Extract the pos_seq sequence to the new args array.
    // Note that it can be arbitrary iterator.
    if (pos_seq == MP_OBJ_NULL) {
    bf72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    bf74:	2b00      	cmp	r3, #0
    bf76:	d12c      	bne.n	bfd2 <mp_call_prepare_args_n_kw_var+0xf2>
        // no sequence

        // allocate memory for the new array of args
        args2_alloc = 1 + n_args + 2 * (n_kw + kw_dict_len);
    bf78:	6dba      	ldr	r2, [r7, #88]	; 0x58
    bf7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    bf7c:	4413      	add	r3, r2
    bf7e:	005a      	lsls	r2, r3, #1
    bf80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bf82:	4413      	add	r3, r2
    bf84:	3301      	adds	r3, #1
    bf86:	67fb      	str	r3, [r7, #124]	; 0x7c
        args2 = mp_nonlocal_alloc(args2_alloc * sizeof(mp_obj_t));
    bf88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    bf8a:	009b      	lsls	r3, r3, #2
    bf8c:	4618      	mov	r0, r3
    bf8e:	f7ff fa97 	bl	b4c0 <mp_nonlocal_alloc>
    bf92:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

        // copy the self
        if (self != MP_OBJ_NULL) {
    bf96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    bf9a:	2b00      	cmp	r3, #0
    bf9c:	d009      	beq.n	bfb2 <mp_call_prepare_args_n_kw_var+0xd2>
            args2[args2_len++] = self;
    bf9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    bfa0:	1c5a      	adds	r2, r3, #1
    bfa2:	67ba      	str	r2, [r7, #120]	; 0x78
    bfa4:	009b      	lsls	r3, r3, #2
    bfa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    bfaa:	4413      	add	r3, r2
    bfac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    bfb0:	601a      	str	r2, [r3, #0]
        }

        // copy the fixed pos args
        mp_seq_copy(args2 + args2_len, args, n_args, mp_obj_t);
    bfb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    bfb4:	009b      	lsls	r3, r3, #2
    bfb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    bfba:	18d0      	adds	r0, r2, r3
    bfbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bfbe:	009b      	lsls	r3, r3, #2
    bfc0:	461a      	mov	r2, r3
    bfc2:	6879      	ldr	r1, [r7, #4]
    bfc4:	f010 fee4 	bl	1cd90 <memcpy>
        args2_len += n_args;
    bfc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
    bfca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bfcc:	4413      	add	r3, r2
    bfce:	67bb      	str	r3, [r7, #120]	; 0x78
    bfd0:	e0b1      	b.n	c136 <mp_call_prepare_args_n_kw_var+0x256>

    } else if (MP_OBJ_IS_TYPE(pos_seq, &mp_type_tuple) || MP_OBJ_IS_TYPE(pos_seq, &mp_type_list)) {
    bfd2:	6d78      	ldr	r0, [r7, #84]	; 0x54
    bfd4:	f7ff fa0a 	bl	b3ec <MP_OBJ_IS_OBJ>
    bfd8:	4603      	mov	r3, r0
    bfda:	2b00      	cmp	r3, #0
    bfdc:	d004      	beq.n	bfe8 <mp_call_prepare_args_n_kw_var+0x108>
    bfde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    bfe0:	681b      	ldr	r3, [r3, #0]
    bfe2:	4a92      	ldr	r2, [pc, #584]	; (c22c <mp_call_prepare_args_n_kw_var+0x34c>)
    bfe4:	4293      	cmp	r3, r2
    bfe6:	d00a      	beq.n	bffe <mp_call_prepare_args_n_kw_var+0x11e>
    bfe8:	6d78      	ldr	r0, [r7, #84]	; 0x54
    bfea:	f7ff f9ff 	bl	b3ec <MP_OBJ_IS_OBJ>
    bfee:	4603      	mov	r3, r0
    bff0:	2b00      	cmp	r3, #0
    bff2:	d04a      	beq.n	c08a <mp_call_prepare_args_n_kw_var+0x1aa>
    bff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    bff6:	681b      	ldr	r3, [r3, #0]
    bff8:	4a8d      	ldr	r2, [pc, #564]	; (c230 <mp_call_prepare_args_n_kw_var+0x350>)
    bffa:	4293      	cmp	r3, r2
    bffc:	d145      	bne.n	c08a <mp_call_prepare_args_n_kw_var+0x1aa>
        // optimise the case of a tuple and list

        // get the items
        size_t len;
        mp_obj_t *items;
        mp_obj_get_array(pos_seq, &len, &items);
    bffe:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c002:	f107 0334 	add.w	r3, r7, #52	; 0x34
    c006:	4619      	mov	r1, r3
    c008:	6d78      	ldr	r0, [r7, #84]	; 0x54
    c00a:	f001 fec1 	bl	dd90 <mp_obj_get_array>

        // allocate memory for the new array of args
        args2_alloc = 1 + n_args + len + 2 * (n_kw + kw_dict_len);
    c00e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c012:	441a      	add	r2, r3
    c014:	6db9      	ldr	r1, [r7, #88]	; 0x58
    c016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c018:	440b      	add	r3, r1
    c01a:	005b      	lsls	r3, r3, #1
    c01c:	4413      	add	r3, r2
    c01e:	3301      	adds	r3, #1
    c020:	67fb      	str	r3, [r7, #124]	; 0x7c
        args2 = mp_nonlocal_alloc(args2_alloc * sizeof(mp_obj_t));
    c022:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c024:	009b      	lsls	r3, r3, #2
    c026:	4618      	mov	r0, r3
    c028:	f7ff fa4a 	bl	b4c0 <mp_nonlocal_alloc>
    c02c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

        // copy the self
        if (self != MP_OBJ_NULL) {
    c030:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c034:	2b00      	cmp	r3, #0
    c036:	d009      	beq.n	c04c <mp_call_prepare_args_n_kw_var+0x16c>
            args2[args2_len++] = self;
    c038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c03a:	1c5a      	adds	r2, r3, #1
    c03c:	67ba      	str	r2, [r7, #120]	; 0x78
    c03e:	009b      	lsls	r3, r3, #2
    c040:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c044:	4413      	add	r3, r2
    c046:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    c04a:	601a      	str	r2, [r3, #0]
        }

        // copy the fixed and variable position args
        mp_seq_cat(args2 + args2_len, args, n_args, items, len, mp_obj_t);
    c04c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c04e:	009b      	lsls	r3, r3, #2
    c050:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c054:	18d0      	adds	r0, r2, r3
    c056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c058:	009b      	lsls	r3, r3, #2
    c05a:	461a      	mov	r2, r3
    c05c:	6879      	ldr	r1, [r7, #4]
    c05e:	f010 fe97 	bl	1cd90 <memcpy>
    c062:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c066:	4413      	add	r3, r2
    c068:	009b      	lsls	r3, r3, #2
    c06a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c06e:	18d0      	adds	r0, r2, r3
    c070:	6b39      	ldr	r1, [r7, #48]	; 0x30
    c072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c074:	009b      	lsls	r3, r3, #2
    c076:	461a      	mov	r2, r3
    c078:	f010 fe8a 	bl	1cd90 <memcpy>
        args2_len += n_args + len;
    c07c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c07e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c080:	4413      	add	r3, r2
    c082:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c084:	4413      	add	r3, r2
    c086:	67bb      	str	r3, [r7, #120]	; 0x78
    } else if (MP_OBJ_IS_TYPE(pos_seq, &mp_type_tuple) || MP_OBJ_IS_TYPE(pos_seq, &mp_type_list)) {
    c088:	e055      	b.n	c136 <mp_call_prepare_args_n_kw_var+0x256>

    } else {
        // generic iterator

        // allocate memory for the new array of args
        args2_alloc = 1 + n_args + 2 * (n_kw + kw_dict_len) + 3;
    c08a:	6dba      	ldr	r2, [r7, #88]	; 0x58
    c08c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c08e:	4413      	add	r3, r2
    c090:	005a      	lsls	r2, r3, #1
    c092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c094:	4413      	add	r3, r2
    c096:	3304      	adds	r3, #4
    c098:	67fb      	str	r3, [r7, #124]	; 0x7c
        args2 = mp_nonlocal_alloc(args2_alloc * sizeof(mp_obj_t));
    c09a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c09c:	009b      	lsls	r3, r3, #2
    c09e:	4618      	mov	r0, r3
    c0a0:	f7ff fa0e 	bl	b4c0 <mp_nonlocal_alloc>
    c0a4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

        // copy the self
        if (self != MP_OBJ_NULL) {
    c0a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c0ac:	2b00      	cmp	r3, #0
    c0ae:	d009      	beq.n	c0c4 <mp_call_prepare_args_n_kw_var+0x1e4>
            args2[args2_len++] = self;
    c0b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c0b2:	1c5a      	adds	r2, r3, #1
    c0b4:	67ba      	str	r2, [r7, #120]	; 0x78
    c0b6:	009b      	lsls	r3, r3, #2
    c0b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c0bc:	4413      	add	r3, r2
    c0be:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    c0c2:	601a      	str	r2, [r3, #0]
        }

        // copy the fixed position args
        mp_seq_copy(args2 + args2_len, args, n_args, mp_obj_t);
    c0c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c0c6:	009b      	lsls	r3, r3, #2
    c0c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c0cc:	18d0      	adds	r0, r2, r3
    c0ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c0d0:	009b      	lsls	r3, r3, #2
    c0d2:	461a      	mov	r2, r3
    c0d4:	6879      	ldr	r1, [r7, #4]
    c0d6:	f010 fe5b 	bl	1cd90 <memcpy>
        args2_len += n_args;
    c0da:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c0dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c0de:	4413      	add	r3, r2
    c0e0:	67bb      	str	r3, [r7, #120]	; 0x78

        // extract the variable position args from the iterator
        mp_obj_iter_buf_t iter_buf;
        mp_obj_t iterable = mp_getiter(pos_seq, &iter_buf);
    c0e2:	f107 0320 	add.w	r3, r7, #32
    c0e6:	4619      	mov	r1, r3
    c0e8:	6d78      	ldr	r0, [r7, #84]	; 0x54
    c0ea:	f000 fc2b 	bl	c944 <mp_getiter>
    c0ee:	64f8      	str	r0, [r7, #76]	; 0x4c
        mp_obj_t item;
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c0f0:	e01a      	b.n	c128 <mp_call_prepare_args_n_kw_var+0x248>
            if (args2_len >= args2_alloc) {
    c0f2:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c0f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c0f6:	429a      	cmp	r2, r3
    c0f8:	d30d      	bcc.n	c116 <mp_call_prepare_args_n_kw_var+0x236>
                args2 = mp_nonlocal_realloc(args2, args2_alloc * sizeof(mp_obj_t), args2_alloc * 2 * sizeof(mp_obj_t));
    c0fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c0fc:	0099      	lsls	r1, r3, #2
    c0fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c100:	00db      	lsls	r3, r3, #3
    c102:	461a      	mov	r2, r3
    c104:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    c108:	f7ff f9e6 	bl	b4d8 <mp_nonlocal_realloc>
    c10c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                args2_alloc *= 2;
    c110:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c112:	005b      	lsls	r3, r3, #1
    c114:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
            args2[args2_len++] = item;
    c116:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c118:	1c5a      	adds	r2, r3, #1
    c11a:	67ba      	str	r2, [r7, #120]	; 0x78
    c11c:	009b      	lsls	r3, r3, #2
    c11e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c122:	4413      	add	r3, r2
    c124:	6cba      	ldr	r2, [r7, #72]	; 0x48
    c126:	601a      	str	r2, [r3, #0]
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c128:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    c12a:	f000 fc8d 	bl	ca48 <mp_iternext>
    c12e:	64b8      	str	r0, [r7, #72]	; 0x48
    c130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c132:	2b04      	cmp	r3, #4
    c134:	d1dd      	bne.n	c0f2 <mp_call_prepare_args_n_kw_var+0x212>
        }
    }

    // The size of the args2 array now is the number of positional args.
    uint pos_args_len = args2_len;
    c136:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c138:	647b      	str	r3, [r7, #68]	; 0x44

    // Copy the fixed kw args.
    mp_seq_copy(args2 + args2_len, args + n_args, 2 * n_kw, mp_obj_t);
    c13a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c13c:	009b      	lsls	r3, r3, #2
    c13e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c142:	18d0      	adds	r0, r2, r3
    c144:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c146:	009b      	lsls	r3, r3, #2
    c148:	687a      	ldr	r2, [r7, #4]
    c14a:	18d1      	adds	r1, r2, r3
    c14c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c14e:	00db      	lsls	r3, r3, #3
    c150:	461a      	mov	r2, r3
    c152:	f010 fe1d 	bl	1cd90 <memcpy>
    args2_len += 2 * n_kw;
    c156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c158:	005b      	lsls	r3, r3, #1
    c15a:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c15c:	4413      	add	r3, r2
    c15e:	67bb      	str	r3, [r7, #120]	; 0x78

    // Extract (key,value) pairs from kw_dict dictionary and append to args2.
    // Note that it can be arbitrary iterator.
    if (kw_dict == MP_OBJ_NULL) {
    c160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c162:	2b00      	cmp	r3, #0
    c164:	f000 80d3 	beq.w	c30e <mp_call_prepare_args_n_kw_var+0x42e>
        // pass
    } else if (MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    c168:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c16a:	f7ff f93f 	bl	b3ec <MP_OBJ_IS_OBJ>
    c16e:	4603      	mov	r3, r0
    c170:	2b00      	cmp	r3, #0
    c172:	d065      	beq.n	c240 <mp_call_prepare_args_n_kw_var+0x360>
    c174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c176:	681b      	ldr	r3, [r3, #0]
    c178:	4a2b      	ldr	r2, [pc, #172]	; (c228 <mp_call_prepare_args_n_kw_var+0x348>)
    c17a:	4293      	cmp	r3, r2
    c17c:	d160      	bne.n	c240 <mp_call_prepare_args_n_kw_var+0x360>
        // dictionary
        mp_map_t *map = mp_obj_dict_get_map(kw_dict);
    c17e:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c180:	f7ff f97c 	bl	b47c <mp_obj_dict_get_map>
    c184:	6438      	str	r0, [r7, #64]	; 0x40
        assert(args2_len + 2 * map->used <= args2_alloc); // should have enough, since kw_dict_len is in this case hinted correctly above
    c186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c188:	681b      	ldr	r3, [r3, #0]
    c18a:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    c18e:	005b      	lsls	r3, r3, #1
    c190:	461a      	mov	r2, r3
    c192:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c194:	441a      	add	r2, r3
    c196:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c198:	429a      	cmp	r2, r3
    c19a:	d906      	bls.n	c1aa <mp_call_prepare_args_n_kw_var+0x2ca>
    c19c:	4b25      	ldr	r3, [pc, #148]	; (c234 <mp_call_prepare_args_n_kw_var+0x354>)
    c19e:	4a26      	ldr	r2, [pc, #152]	; (c238 <mp_call_prepare_args_n_kw_var+0x358>)
    c1a0:	f240 21f7 	movw	r1, #759	; 0x2f7
    c1a4:	4825      	ldr	r0, [pc, #148]	; (c23c <mp_call_prepare_args_n_kw_var+0x35c>)
    c1a6:	f00f faed 	bl	1b784 <__assert_func>
        for (size_t i = 0; i < map->alloc; i++) {
    c1aa:	2300      	movs	r3, #0
    c1ac:	673b      	str	r3, [r7, #112]	; 0x70
    c1ae:	e034      	b.n	c21a <mp_call_prepare_args_n_kw_var+0x33a>
            if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    c1b0:	6f39      	ldr	r1, [r7, #112]	; 0x70
    c1b2:	6c38      	ldr	r0, [r7, #64]	; 0x40
    c1b4:	f7ff f92c 	bl	b410 <MP_MAP_SLOT_IS_FILLED>
    c1b8:	4603      	mov	r3, r0
    c1ba:	2b00      	cmp	r3, #0
    c1bc:	d02a      	beq.n	c214 <mp_call_prepare_args_n_kw_var+0x334>
                // the key must be a qstr, so intern it if it's a string
                mp_obj_t key = map->table[i].key;
    c1be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c1c0:	689a      	ldr	r2, [r3, #8]
    c1c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c1c4:	00db      	lsls	r3, r3, #3
    c1c6:	4413      	add	r3, r2
    c1c8:	681b      	ldr	r3, [r3, #0]
    c1ca:	66fb      	str	r3, [r7, #108]	; 0x6c
                if (!MP_OBJ_IS_QSTR(key)) {
    c1cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    c1ce:	f7ff f8fb 	bl	b3c8 <MP_OBJ_IS_QSTR>
    c1d2:	4603      	mov	r3, r0
    c1d4:	f083 0301 	eor.w	r3, r3, #1
    c1d8:	b2db      	uxtb	r3, r3
    c1da:	2b00      	cmp	r3, #0
    c1dc:	d003      	beq.n	c1e6 <mp_call_prepare_args_n_kw_var+0x306>
                    key = mp_obj_str_intern_checked(key);
    c1de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    c1e0:	f009 f9e6 	bl	155b0 <mp_obj_str_intern_checked>
    c1e4:	66f8      	str	r0, [r7, #108]	; 0x6c
                }
                args2[args2_len++] = key;
    c1e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c1e8:	1c5a      	adds	r2, r3, #1
    c1ea:	67ba      	str	r2, [r7, #120]	; 0x78
    c1ec:	009b      	lsls	r3, r3, #2
    c1ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c1f2:	4413      	add	r3, r2
    c1f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    c1f6:	601a      	str	r2, [r3, #0]
                args2[args2_len++] = map->table[i].value;
    c1f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c1fa:	1c5a      	adds	r2, r3, #1
    c1fc:	67ba      	str	r2, [r7, #120]	; 0x78
    c1fe:	009b      	lsls	r3, r3, #2
    c200:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c204:	4413      	add	r3, r2
    c206:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c208:	6891      	ldr	r1, [r2, #8]
    c20a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    c20c:	00d2      	lsls	r2, r2, #3
    c20e:	440a      	add	r2, r1
    c210:	6852      	ldr	r2, [r2, #4]
    c212:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < map->alloc; i++) {
    c214:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c216:	3301      	adds	r3, #1
    c218:	673b      	str	r3, [r7, #112]	; 0x70
    c21a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c21c:	685a      	ldr	r2, [r3, #4]
    c21e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c220:	429a      	cmp	r2, r3
    c222:	d8c5      	bhi.n	c1b0 <mp_call_prepare_args_n_kw_var+0x2d0>
    } else if (MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    c224:	e073      	b.n	c30e <mp_call_prepare_args_n_kw_var+0x42e>
    c226:	bf00      	nop
    c228:	00022104 	.word	0x00022104
    c22c:	00023dec 	.word	0x00023dec
    c230:	000231ec 	.word	0x000231ec
    c234:	00021744 	.word	0x00021744
    c238:	00021910 	.word	0x00021910
    c23c:	00021694 	.word	0x00021694
        // - call keys() to get an iterable of all keys in the mapping
        // - call __getitem__ for each key to get the corresponding value

        // get the keys iterable
        mp_obj_t dest[3];
        mp_load_method(kw_dict, MP_QSTR_keys, dest);
    c240:	f107 0314 	add.w	r3, r7, #20
    c244:	461a      	mov	r2, r3
    c246:	f44f 719a 	mov.w	r1, #308	; 0x134
    c24a:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c24c:	f000 fb02 	bl	c854 <mp_load_method>
        mp_obj_t iterable = mp_getiter(mp_call_method_n_kw(0, 0, dest), NULL);
    c250:	f107 0314 	add.w	r3, r7, #20
    c254:	461a      	mov	r2, r3
    c256:	2100      	movs	r1, #0
    c258:	2000      	movs	r0, #0
    c25a:	f7ff fe1d 	bl	be98 <mp_call_method_n_kw>
    c25e:	4603      	mov	r3, r0
    c260:	2100      	movs	r1, #0
    c262:	4618      	mov	r0, r3
    c264:	f000 fb6e 	bl	c944 <mp_getiter>
    c268:	63f8      	str	r0, [r7, #60]	; 0x3c

        mp_obj_t key;
        while ((key = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c26a:	e049      	b.n	c300 <mp_call_prepare_args_n_kw_var+0x420>
            // expand size of args array if needed
            if (args2_len + 1 >= args2_alloc) {
    c26c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c26e:	1c5a      	adds	r2, r3, #1
    c270:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c272:	429a      	cmp	r2, r3
    c274:	d314      	bcc.n	c2a0 <mp_call_prepare_args_n_kw_var+0x3c0>
                uint new_alloc = args2_alloc * 2;
    c276:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c278:	005b      	lsls	r3, r3, #1
    c27a:	667b      	str	r3, [r7, #100]	; 0x64
                if (new_alloc < 4) {
    c27c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c27e:	2b03      	cmp	r3, #3
    c280:	d801      	bhi.n	c286 <mp_call_prepare_args_n_kw_var+0x3a6>
                    new_alloc = 4;
    c282:	2304      	movs	r3, #4
    c284:	667b      	str	r3, [r7, #100]	; 0x64
                }
                args2 = mp_nonlocal_realloc(args2, args2_alloc * sizeof(mp_obj_t), new_alloc * sizeof(mp_obj_t));
    c286:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c288:	0099      	lsls	r1, r3, #2
    c28a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c28c:	009b      	lsls	r3, r3, #2
    c28e:	461a      	mov	r2, r3
    c290:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    c294:	f7ff f920 	bl	b4d8 <mp_nonlocal_realloc>
    c298:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                args2_alloc = new_alloc;
    c29c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c29e:	67fb      	str	r3, [r7, #124]	; 0x7c
            }

            // the key must be a qstr, so intern it if it's a string
            if (!MP_OBJ_IS_QSTR(key)) {
    c2a0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    c2a2:	f7ff f891 	bl	b3c8 <MP_OBJ_IS_QSTR>
    c2a6:	4603      	mov	r3, r0
    c2a8:	f083 0301 	eor.w	r3, r3, #1
    c2ac:	b2db      	uxtb	r3, r3
    c2ae:	2b00      	cmp	r3, #0
    c2b0:	d003      	beq.n	c2ba <mp_call_prepare_args_n_kw_var+0x3da>
                key = mp_obj_str_intern_checked(key);
    c2b2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    c2b4:	f009 f97c 	bl	155b0 <mp_obj_str_intern_checked>
    c2b8:	66b8      	str	r0, [r7, #104]	; 0x68
            }

            // get the value corresponding to the key
            mp_load_method(kw_dict, MP_QSTR___getitem__, dest);
    c2ba:	f107 0314 	add.w	r3, r7, #20
    c2be:	461a      	mov	r2, r3
    c2c0:	210f      	movs	r1, #15
    c2c2:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c2c4:	f000 fac6 	bl	c854 <mp_load_method>
            dest[2] = key;
    c2c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c2ca:	61fb      	str	r3, [r7, #28]
            mp_obj_t value = mp_call_method_n_kw(1, 0, dest);
    c2cc:	f107 0314 	add.w	r3, r7, #20
    c2d0:	461a      	mov	r2, r3
    c2d2:	2100      	movs	r1, #0
    c2d4:	2001      	movs	r0, #1
    c2d6:	f7ff fddf 	bl	be98 <mp_call_method_n_kw>
    c2da:	63b8      	str	r0, [r7, #56]	; 0x38

            // store the key/value pair in the argument array
            args2[args2_len++] = key;
    c2dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c2de:	1c5a      	adds	r2, r3, #1
    c2e0:	67ba      	str	r2, [r7, #120]	; 0x78
    c2e2:	009b      	lsls	r3, r3, #2
    c2e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c2e8:	4413      	add	r3, r2
    c2ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
    c2ec:	601a      	str	r2, [r3, #0]
            args2[args2_len++] = value;
    c2ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c2f0:	1c5a      	adds	r2, r3, #1
    c2f2:	67ba      	str	r2, [r7, #120]	; 0x78
    c2f4:	009b      	lsls	r3, r3, #2
    c2f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c2fa:	4413      	add	r3, r2
    c2fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
    c2fe:	601a      	str	r2, [r3, #0]
        while ((key = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c300:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c302:	f000 fba1 	bl	ca48 <mp_iternext>
    c306:	66b8      	str	r0, [r7, #104]	; 0x68
    c308:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c30a:	2b04      	cmp	r3, #4
    c30c:	d1ae      	bne.n	c26c <mp_call_prepare_args_n_kw_var+0x38c>
        }
    }

    out_args->fun = fun;
    c30e:	683b      	ldr	r3, [r7, #0]
    c310:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    c312:	601a      	str	r2, [r3, #0]
    out_args->args = args2;
    c314:	683b      	ldr	r3, [r7, #0]
    c316:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c31a:	611a      	str	r2, [r3, #16]
    out_args->n_args = pos_args_len;
    c31c:	683b      	ldr	r3, [r7, #0]
    c31e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    c320:	605a      	str	r2, [r3, #4]
    out_args->n_kw = (args2_len - pos_args_len) / 2;
    c322:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c326:	1ad3      	subs	r3, r2, r3
    c328:	085a      	lsrs	r2, r3, #1
    c32a:	683b      	ldr	r3, [r7, #0]
    c32c:	609a      	str	r2, [r3, #8]
    out_args->n_alloc = args2_alloc;
    c32e:	683b      	ldr	r3, [r7, #0]
    c330:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    c332:	60da      	str	r2, [r3, #12]
}
    c334:	bf00      	nop
    c336:	3788      	adds	r7, #136	; 0x88
    c338:	46bd      	mov	sp, r7
    c33a:	bd80      	pop	{r7, pc}

0000c33c <mp_call_method_n_kw_var>:

mp_obj_t mp_call_method_n_kw_var(bool have_self, size_t n_args_n_kw, const mp_obj_t *args) {
    c33c:	b580      	push	{r7, lr}
    c33e:	b08a      	sub	sp, #40	; 0x28
    c340:	af00      	add	r7, sp, #0
    c342:	4603      	mov	r3, r0
    c344:	60b9      	str	r1, [r7, #8]
    c346:	607a      	str	r2, [r7, #4]
    c348:	73fb      	strb	r3, [r7, #15]
    mp_call_args_t out_args;
    mp_call_prepare_args_n_kw_var(have_self, n_args_n_kw, args, &out_args);
    c34a:	f107 0310 	add.w	r3, r7, #16
    c34e:	7bf8      	ldrb	r0, [r7, #15]
    c350:	687a      	ldr	r2, [r7, #4]
    c352:	68b9      	ldr	r1, [r7, #8]
    c354:	f7ff fdc4 	bl	bee0 <mp_call_prepare_args_n_kw_var>

    mp_obj_t res = mp_call_function_n_kw(out_args.fun, out_args.n_args, out_args.n_kw, out_args.args);
    c358:	6938      	ldr	r0, [r7, #16]
    c35a:	6979      	ldr	r1, [r7, #20]
    c35c:	69ba      	ldr	r2, [r7, #24]
    c35e:	6a3b      	ldr	r3, [r7, #32]
    c360:	f7ff fd78 	bl	be54 <mp_call_function_n_kw>
    c364:	6278      	str	r0, [r7, #36]	; 0x24
    mp_nonlocal_free(out_args.args, out_args.n_alloc * sizeof(mp_obj_t));
    c366:	6a3a      	ldr	r2, [r7, #32]
    c368:	69fb      	ldr	r3, [r7, #28]
    c36a:	009b      	lsls	r3, r3, #2
    c36c:	4619      	mov	r1, r3
    c36e:	4610      	mov	r0, r2
    c370:	f7ff f8c2 	bl	b4f8 <mp_nonlocal_free>

    return res;
    c374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c376:	4618      	mov	r0, r3
    c378:	3728      	adds	r7, #40	; 0x28
    c37a:	46bd      	mov	sp, r7
    c37c:	bd80      	pop	{r7, pc}
    c37e:	bf00      	nop

0000c380 <mp_unpack_sequence>:

// unpacked items are stored in reverse order into the array pointed to by items
void mp_unpack_sequence(mp_obj_t seq_in, size_t num, mp_obj_t *items) {
    c380:	b580      	push	{r7, lr}
    c382:	b08e      	sub	sp, #56	; 0x38
    c384:	af00      	add	r7, sp, #0
    c386:	60f8      	str	r0, [r7, #12]
    c388:	60b9      	str	r1, [r7, #8]
    c38a:	607a      	str	r2, [r7, #4]
    size_t seq_len;
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c38c:	68f8      	ldr	r0, [r7, #12]
    c38e:	f7ff f82d 	bl	b3ec <MP_OBJ_IS_OBJ>
    c392:	4603      	mov	r3, r0
    c394:	2b00      	cmp	r3, #0
    c396:	d004      	beq.n	c3a2 <mp_unpack_sequence+0x22>
    c398:	68fb      	ldr	r3, [r7, #12]
    c39a:	681b      	ldr	r3, [r3, #0]
    c39c:	4a38      	ldr	r2, [pc, #224]	; (c480 <mp_unpack_sequence+0x100>)
    c39e:	4293      	cmp	r3, r2
    c3a0:	d00a      	beq.n	c3b8 <mp_unpack_sequence+0x38>
    c3a2:	68f8      	ldr	r0, [r7, #12]
    c3a4:	f7ff f822 	bl	b3ec <MP_OBJ_IS_OBJ>
    c3a8:	4603      	mov	r3, r0
    c3aa:	2b00      	cmp	r3, #0
    c3ac:	d02e      	beq.n	c40c <mp_unpack_sequence+0x8c>
    c3ae:	68fb      	ldr	r3, [r7, #12]
    c3b0:	681b      	ldr	r3, [r3, #0]
    c3b2:	4a34      	ldr	r2, [pc, #208]	; (c484 <mp_unpack_sequence+0x104>)
    c3b4:	4293      	cmp	r3, r2
    c3b6:	d129      	bne.n	c40c <mp_unpack_sequence+0x8c>
        mp_obj_t *seq_items;
        mp_obj_get_array(seq_in, &seq_len, &seq_items);
    c3b8:	f107 0224 	add.w	r2, r7, #36	; 0x24
    c3bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
    c3c0:	4619      	mov	r1, r3
    c3c2:	68f8      	ldr	r0, [r7, #12]
    c3c4:	f001 fce4 	bl	dd90 <mp_obj_get_array>
        if (seq_len < num) {
    c3c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c3ca:	68bb      	ldr	r3, [r7, #8]
    c3cc:	429a      	cmp	r2, r3
    c3ce:	d348      	bcc.n	c462 <mp_unpack_sequence+0xe2>
            goto too_short;
        } else if (seq_len > num) {
    c3d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c3d2:	68bb      	ldr	r3, [r7, #8]
    c3d4:	429a      	cmp	r2, r3
    c3d6:	d84a      	bhi.n	c46e <mp_unpack_sequence+0xee>
            goto too_long;
        }
        for (size_t i = 0; i < num; i++) {
    c3d8:	2300      	movs	r3, #0
    c3da:	637b      	str	r3, [r7, #52]	; 0x34
    c3dc:	e011      	b.n	c402 <mp_unpack_sequence+0x82>
            items[i] = seq_items[num - 1 - i];
    c3de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c3e0:	009b      	lsls	r3, r3, #2
    c3e2:	687a      	ldr	r2, [r7, #4]
    c3e4:	441a      	add	r2, r3
    c3e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
    c3e8:	68b8      	ldr	r0, [r7, #8]
    c3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c3ec:	1ac3      	subs	r3, r0, r3
    c3ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c3f2:	3b01      	subs	r3, #1
    c3f4:	009b      	lsls	r3, r3, #2
    c3f6:	440b      	add	r3, r1
    c3f8:	681b      	ldr	r3, [r3, #0]
    c3fa:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < num; i++) {
    c3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c3fe:	3301      	adds	r3, #1
    c400:	637b      	str	r3, [r7, #52]	; 0x34
    c402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c404:	68bb      	ldr	r3, [r7, #8]
    c406:	429a      	cmp	r2, r3
    c408:	d3e9      	bcc.n	c3de <mp_unpack_sequence+0x5e>
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c40a:	e029      	b.n	c460 <mp_unpack_sequence+0xe0>
        }
    } else {
        mp_obj_iter_buf_t iter_buf;
        mp_obj_t iterable = mp_getiter(seq_in, &iter_buf);
    c40c:	f107 0314 	add.w	r3, r7, #20
    c410:	4619      	mov	r1, r3
    c412:	68f8      	ldr	r0, [r7, #12]
    c414:	f000 fa96 	bl	c944 <mp_getiter>
    c418:	6338      	str	r0, [r7, #48]	; 0x30

        for (seq_len = 0; seq_len < num; seq_len++) {
    c41a:	2300      	movs	r3, #0
    c41c:	62bb      	str	r3, [r7, #40]	; 0x28
    c41e:	e014      	b.n	c44a <mp_unpack_sequence+0xca>
            mp_obj_t el = mp_iternext(iterable);
    c420:	6b38      	ldr	r0, [r7, #48]	; 0x30
    c422:	f000 fb11 	bl	ca48 <mp_iternext>
    c426:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (el == MP_OBJ_STOP_ITERATION) {
    c428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c42a:	2b04      	cmp	r3, #4
    c42c:	d01b      	beq.n	c466 <mp_unpack_sequence+0xe6>
                goto too_short;
            }
            items[num - 1 - seq_len] = el;
    c42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c430:	68ba      	ldr	r2, [r7, #8]
    c432:	1ad3      	subs	r3, r2, r3
    c434:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c438:	3b01      	subs	r3, #1
    c43a:	009b      	lsls	r3, r3, #2
    c43c:	687a      	ldr	r2, [r7, #4]
    c43e:	4413      	add	r3, r2
    c440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c442:	601a      	str	r2, [r3, #0]
        for (seq_len = 0; seq_len < num; seq_len++) {
    c444:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c446:	3301      	adds	r3, #1
    c448:	62bb      	str	r3, [r7, #40]	; 0x28
    c44a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c44c:	68bb      	ldr	r3, [r7, #8]
    c44e:	429a      	cmp	r2, r3
    c450:	d3e6      	bcc.n	c420 <mp_unpack_sequence+0xa0>
        }
        if (mp_iternext(iterable) != MP_OBJ_STOP_ITERATION) {
    c452:	6b38      	ldr	r0, [r7, #48]	; 0x30
    c454:	f000 faf8 	bl	ca48 <mp_iternext>
    c458:	4603      	mov	r3, r0
    c45a:	2b04      	cmp	r3, #4
    c45c:	d00b      	beq.n	c476 <mp_unpack_sequence+0xf6>
            goto too_long;
    c45e:	e007      	b.n	c470 <mp_unpack_sequence+0xf0>
        }
    }
    return;
    c460:	e009      	b.n	c476 <mp_unpack_sequence+0xf6>
            goto too_short;
    c462:	bf00      	nop
    c464:	e000      	b.n	c468 <mp_unpack_sequence+0xe8>
                goto too_short;
    c466:	bf00      	nop

too_short:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_ValueError("wrong number of values to unpack");
    c468:	4807      	ldr	r0, [pc, #28]	; (c488 <mp_unpack_sequence+0x108>)
    c46a:	f000 fd9b 	bl	cfa4 <mp_raise_ValueError>
            goto too_long;
    c46e:	bf00      	nop
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
            "need more than %d values to unpack", (int)seq_len));
    }
too_long:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_ValueError("wrong number of values to unpack");
    c470:	4805      	ldr	r0, [pc, #20]	; (c488 <mp_unpack_sequence+0x108>)
    c472:	f000 fd97 	bl	cfa4 <mp_raise_ValueError>
    return;
    c476:	bf00      	nop
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
            "too many values to unpack (expected %d)", (int)num));
    }
}
    c478:	3738      	adds	r7, #56	; 0x38
    c47a:	46bd      	mov	sp, r7
    c47c:	bd80      	pop	{r7, pc}
    c47e:	bf00      	nop
    c480:	00023dec 	.word	0x00023dec
    c484:	000231ec 	.word	0x000231ec
    c488:	00021770 	.word	0x00021770

0000c48c <mp_unpack_ex>:

// unpacked items are stored in reverse order into the array pointed to by items
void mp_unpack_ex(mp_obj_t seq_in, size_t num_in, mp_obj_t *items) {
    c48c:	b590      	push	{r4, r7, lr}
    c48e:	b08f      	sub	sp, #60	; 0x3c
    c490:	af00      	add	r7, sp, #0
    c492:	60f8      	str	r0, [r7, #12]
    c494:	60b9      	str	r1, [r7, #8]
    c496:	607a      	str	r2, [r7, #4]
    size_t num_left = num_in & 0xff;
    c498:	68bb      	ldr	r3, [r7, #8]
    c49a:	b2db      	uxtb	r3, r3
    c49c:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t num_right = (num_in >> 8) & 0xff;
    c49e:	68bb      	ldr	r3, [r7, #8]
    c4a0:	0a1b      	lsrs	r3, r3, #8
    c4a2:	b2db      	uxtb	r3, r3
    c4a4:	627b      	str	r3, [r7, #36]	; 0x24
    DEBUG_OP_printf("unpack ex " UINT_FMT " " UINT_FMT "\n", num_left, num_right);
    size_t seq_len;
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c4a6:	68f8      	ldr	r0, [r7, #12]
    c4a8:	f7fe ffa0 	bl	b3ec <MP_OBJ_IS_OBJ>
    c4ac:	4603      	mov	r3, r0
    c4ae:	2b00      	cmp	r3, #0
    c4b0:	d004      	beq.n	c4bc <mp_unpack_ex+0x30>
    c4b2:	68fb      	ldr	r3, [r7, #12]
    c4b4:	681b      	ldr	r3, [r3, #0]
    c4b6:	4a6a      	ldr	r2, [pc, #424]	; (c660 <mp_unpack_ex+0x1d4>)
    c4b8:	4293      	cmp	r3, r2
    c4ba:	d00a      	beq.n	c4d2 <mp_unpack_ex+0x46>
    c4bc:	68f8      	ldr	r0, [r7, #12]
    c4be:	f7fe ff95 	bl	b3ec <MP_OBJ_IS_OBJ>
    c4c2:	4603      	mov	r3, r0
    c4c4:	2b00      	cmp	r3, #0
    c4c6:	d05b      	beq.n	c580 <mp_unpack_ex+0xf4>
    c4c8:	68fb      	ldr	r3, [r7, #12]
    c4ca:	681b      	ldr	r3, [r3, #0]
    c4cc:	4a65      	ldr	r2, [pc, #404]	; (c664 <mp_unpack_ex+0x1d8>)
    c4ce:	4293      	cmp	r3, r2
    c4d0:	d156      	bne.n	c580 <mp_unpack_ex+0xf4>
        mp_obj_t *seq_items;
        mp_obj_get_array(seq_in, &seq_len, &seq_items);
    c4d2:	f107 0210 	add.w	r2, r7, #16
    c4d6:	f107 0314 	add.w	r3, r7, #20
    c4da:	4619      	mov	r1, r3
    c4dc:	68f8      	ldr	r0, [r7, #12]
    c4de:	f001 fc57 	bl	dd90 <mp_obj_get_array>
        if (seq_len < num_left + num_right) {
    c4e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c4e6:	441a      	add	r2, r3
    c4e8:	697b      	ldr	r3, [r7, #20]
    c4ea:	429a      	cmp	r2, r3
    c4ec:	f200 80ad 	bhi.w	c64a <mp_unpack_ex+0x1be>
            goto too_short;
        }
        for (size_t i = 0; i < num_right; i++) {
    c4f0:	2300      	movs	r3, #0
    c4f2:	637b      	str	r3, [r7, #52]	; 0x34
    c4f4:	e011      	b.n	c51a <mp_unpack_ex+0x8e>
            items[i] = seq_items[seq_len - 1 - i];
    c4f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c4f8:	009b      	lsls	r3, r3, #2
    c4fa:	687a      	ldr	r2, [r7, #4]
    c4fc:	441a      	add	r2, r3
    c4fe:	6939      	ldr	r1, [r7, #16]
    c500:	6978      	ldr	r0, [r7, #20]
    c502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c504:	1ac3      	subs	r3, r0, r3
    c506:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c50a:	3b01      	subs	r3, #1
    c50c:	009b      	lsls	r3, r3, #2
    c50e:	440b      	add	r3, r1
    c510:	681b      	ldr	r3, [r3, #0]
    c512:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < num_right; i++) {
    c514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c516:	3301      	adds	r3, #1
    c518:	637b      	str	r3, [r7, #52]	; 0x34
    c51a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c51e:	429a      	cmp	r2, r3
    c520:	d3e9      	bcc.n	c4f6 <mp_unpack_ex+0x6a>
        }
        items[num_right] = mp_obj_new_list(seq_len - num_left - num_right, seq_items + num_left);
    c522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c524:	009b      	lsls	r3, r3, #2
    c526:	687a      	ldr	r2, [r7, #4]
    c528:	18d4      	adds	r4, r2, r3
    c52a:	697a      	ldr	r2, [r7, #20]
    c52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c52e:	1ad2      	subs	r2, r2, r3
    c530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c532:	1ad0      	subs	r0, r2, r3
    c534:	693a      	ldr	r2, [r7, #16]
    c536:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c538:	009b      	lsls	r3, r3, #2
    c53a:	4413      	add	r3, r2
    c53c:	4619      	mov	r1, r3
    c53e:	f005 fa15 	bl	1196c <mp_obj_new_list>
    c542:	4603      	mov	r3, r0
    c544:	6023      	str	r3, [r4, #0]
        for (size_t i = 0; i < num_left; i++) {
    c546:	2300      	movs	r3, #0
    c548:	633b      	str	r3, [r7, #48]	; 0x30
    c54a:	e014      	b.n	c576 <mp_unpack_ex+0xea>
            items[num_right + 1 + i] = seq_items[num_left - 1 - i];
    c54c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c550:	4413      	add	r3, r2
    c552:	3301      	adds	r3, #1
    c554:	009b      	lsls	r3, r3, #2
    c556:	687a      	ldr	r2, [r7, #4]
    c558:	441a      	add	r2, r3
    c55a:	6939      	ldr	r1, [r7, #16]
    c55c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c560:	1ac3      	subs	r3, r0, r3
    c562:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c566:	3b01      	subs	r3, #1
    c568:	009b      	lsls	r3, r3, #2
    c56a:	440b      	add	r3, r1
    c56c:	681b      	ldr	r3, [r3, #0]
    c56e:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < num_left; i++) {
    c570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c572:	3301      	adds	r3, #1
    c574:	633b      	str	r3, [r7, #48]	; 0x30
    c576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c578:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c57a:	429a      	cmp	r2, r3
    c57c:	d3e6      	bcc.n	c54c <mp_unpack_ex+0xc0>
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c57e:	e063      	b.n	c648 <mp_unpack_ex+0x1bc>
    } else {
        // Generic iterable; this gets a bit messy: we unpack known left length to the
        // items destination array, then the rest to a dynamically created list.  Once the
        // iterable is exhausted, we take from this list for the right part of the items.
        // TODO Improve to waste less memory in the dynamically created list.
        mp_obj_t iterable = mp_getiter(seq_in, NULL);
    c580:	2100      	movs	r1, #0
    c582:	68f8      	ldr	r0, [r7, #12]
    c584:	f000 f9de 	bl	c944 <mp_getiter>
    c588:	6238      	str	r0, [r7, #32]
        mp_obj_t item;
        for (seq_len = 0; seq_len < num_left; seq_len++) {
    c58a:	2300      	movs	r3, #0
    c58c:	617b      	str	r3, [r7, #20]
    c58e:	e013      	b.n	c5b8 <mp_unpack_ex+0x12c>
            item = mp_iternext(iterable);
    c590:	6a38      	ldr	r0, [r7, #32]
    c592:	f000 fa59 	bl	ca48 <mp_iternext>
    c596:	61f8      	str	r0, [r7, #28]
            if (item == MP_OBJ_STOP_ITERATION) {
    c598:	69fb      	ldr	r3, [r7, #28]
    c59a:	2b04      	cmp	r3, #4
    c59c:	d057      	beq.n	c64e <mp_unpack_ex+0x1c2>
                goto too_short;
            }
            items[num_left + num_right + 1 - 1 - seq_len] = item;
    c59e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c5a2:	441a      	add	r2, r3
    c5a4:	697b      	ldr	r3, [r7, #20]
    c5a6:	1ad3      	subs	r3, r2, r3
    c5a8:	009b      	lsls	r3, r3, #2
    c5aa:	687a      	ldr	r2, [r7, #4]
    c5ac:	4413      	add	r3, r2
    c5ae:	69fa      	ldr	r2, [r7, #28]
    c5b0:	601a      	str	r2, [r3, #0]
        for (seq_len = 0; seq_len < num_left; seq_len++) {
    c5b2:	697b      	ldr	r3, [r7, #20]
    c5b4:	3301      	adds	r3, #1
    c5b6:	617b      	str	r3, [r7, #20]
    c5b8:	697a      	ldr	r2, [r7, #20]
    c5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c5bc:	429a      	cmp	r2, r3
    c5be:	d3e7      	bcc.n	c590 <mp_unpack_ex+0x104>
        }
        mp_obj_list_t *rest = MP_OBJ_TO_PTR(mp_obj_new_list(0, NULL));
    c5c0:	2100      	movs	r1, #0
    c5c2:	2000      	movs	r0, #0
    c5c4:	f005 f9d2 	bl	1196c <mp_obj_new_list>
    c5c8:	61b8      	str	r0, [r7, #24]
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c5ca:	e003      	b.n	c5d4 <mp_unpack_ex+0x148>
            mp_obj_list_append(MP_OBJ_FROM_PTR(rest), item);
    c5cc:	69f9      	ldr	r1, [r7, #28]
    c5ce:	69b8      	ldr	r0, [r7, #24]
    c5d0:	f004 fd3a 	bl	11048 <mp_obj_list_append>
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c5d4:	6a38      	ldr	r0, [r7, #32]
    c5d6:	f000 fa37 	bl	ca48 <mp_iternext>
    c5da:	61f8      	str	r0, [r7, #28]
    c5dc:	69fb      	ldr	r3, [r7, #28]
    c5de:	2b04      	cmp	r3, #4
    c5e0:	d1f4      	bne.n	c5cc <mp_unpack_ex+0x140>
        }
        if (rest->len < num_right) {
    c5e2:	69bb      	ldr	r3, [r7, #24]
    c5e4:	689a      	ldr	r2, [r3, #8]
    c5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c5e8:	429a      	cmp	r2, r3
    c5ea:	d332      	bcc.n	c652 <mp_unpack_ex+0x1c6>
            goto too_short;
        }
        items[num_right] = MP_OBJ_FROM_PTR(rest);
    c5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c5ee:	009b      	lsls	r3, r3, #2
    c5f0:	687a      	ldr	r2, [r7, #4]
    c5f2:	4413      	add	r3, r2
    c5f4:	69ba      	ldr	r2, [r7, #24]
    c5f6:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < num_right; i++) {
    c5f8:	2300      	movs	r3, #0
    c5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    c5fc:	e017      	b.n	c62e <mp_unpack_ex+0x1a2>
            items[num_right - 1 - i] = rest->items[rest->len - num_right + i];
    c5fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c602:	1ad3      	subs	r3, r2, r3
    c604:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c608:	3b01      	subs	r3, #1
    c60a:	009b      	lsls	r3, r3, #2
    c60c:	687a      	ldr	r2, [r7, #4]
    c60e:	4413      	add	r3, r2
    c610:	69ba      	ldr	r2, [r7, #24]
    c612:	68d1      	ldr	r1, [r2, #12]
    c614:	69ba      	ldr	r2, [r7, #24]
    c616:	6890      	ldr	r0, [r2, #8]
    c618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c61a:	1a80      	subs	r0, r0, r2
    c61c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c61e:	4402      	add	r2, r0
    c620:	0092      	lsls	r2, r2, #2
    c622:	440a      	add	r2, r1
    c624:	6812      	ldr	r2, [r2, #0]
    c626:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < num_right; i++) {
    c628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c62a:	3301      	adds	r3, #1
    c62c:	62fb      	str	r3, [r7, #44]	; 0x2c
    c62e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c632:	429a      	cmp	r2, r3
    c634:	d3e3      	bcc.n	c5fe <mp_unpack_ex+0x172>
        }
        mp_obj_list_set_len(MP_OBJ_FROM_PTR(rest), rest->len - num_right);
    c636:	69bb      	ldr	r3, [r7, #24]
    c638:	689a      	ldr	r2, [r3, #8]
    c63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c63c:	1ad3      	subs	r3, r2, r3
    c63e:	4619      	mov	r1, r3
    c640:	69b8      	ldr	r0, [r7, #24]
    c642:	f005 f9cf 	bl	119e4 <mp_obj_list_set_len>
    }
    return;
    c646:	e008      	b.n	c65a <mp_unpack_ex+0x1ce>
    c648:	e007      	b.n	c65a <mp_unpack_ex+0x1ce>
            goto too_short;
    c64a:	bf00      	nop
    c64c:	e002      	b.n	c654 <mp_unpack_ex+0x1c8>
                goto too_short;
    c64e:	bf00      	nop
    c650:	e000      	b.n	c654 <mp_unpack_ex+0x1c8>
            goto too_short;
    c652:	bf00      	nop

too_short:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_ValueError("wrong number of values to unpack");
    c654:	4804      	ldr	r0, [pc, #16]	; (c668 <mp_unpack_ex+0x1dc>)
    c656:	f000 fca5 	bl	cfa4 <mp_raise_ValueError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
            "need more than %d values to unpack", (int)seq_len));
    }
}
    c65a:	373c      	adds	r7, #60	; 0x3c
    c65c:	46bd      	mov	sp, r7
    c65e:	bd90      	pop	{r4, r7, pc}
    c660:	00023dec 	.word	0x00023dec
    c664:	000231ec 	.word	0x000231ec
    c668:	00021770 	.word	0x00021770

0000c66c <mp_load_attr>:

mp_obj_t mp_load_attr(mp_obj_t base, qstr attr) {
    c66c:	b580      	push	{r7, lr}
    c66e:	b084      	sub	sp, #16
    c670:	af00      	add	r7, sp, #0
    c672:	6078      	str	r0, [r7, #4]
    c674:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("load attr %p.%s\n", base, qstr_str(attr));
    // use load_method
    mp_obj_t dest[2];
    mp_load_method(base, attr, dest);
    c676:	f107 0308 	add.w	r3, r7, #8
    c67a:	461a      	mov	r2, r3
    c67c:	6839      	ldr	r1, [r7, #0]
    c67e:	6878      	ldr	r0, [r7, #4]
    c680:	f000 f8e8 	bl	c854 <mp_load_method>
    if (dest[1] == MP_OBJ_NULL) {
    c684:	68fb      	ldr	r3, [r7, #12]
    c686:	2b00      	cmp	r3, #0
    c688:	d101      	bne.n	c68e <mp_load_attr+0x22>
        // load_method returned just a normal attribute
        return dest[0];
    c68a:	68bb      	ldr	r3, [r7, #8]
    c68c:	e006      	b.n	c69c <mp_load_attr+0x30>
    } else {
        // load_method returned a method, so build a bound method object
        return mp_obj_new_bound_meth(dest[0], dest[1]);
    c68e:	68bb      	ldr	r3, [r7, #8]
    c690:	68fa      	ldr	r2, [r7, #12]
    c692:	4611      	mov	r1, r2
    c694:	4618      	mov	r0, r3
    c696:	f001 fe49 	bl	e32c <mp_obj_new_bound_meth>
    c69a:	4603      	mov	r3, r0
    }
}
    c69c:	4618      	mov	r0, r3
    c69e:	3710      	adds	r7, #16
    c6a0:	46bd      	mov	sp, r7
    c6a2:	bd80      	pop	{r7, pc}

0000c6a4 <mp_convert_member_lookup>:

// Given a member that was extracted from an instance, convert it correctly
// and put the result in the dest[] array for a possible method call.
// Conversion means dealing with static/class methods, callables, and values.
// see http://docs.python.org/3/howto/descriptor.html
void mp_convert_member_lookup(mp_obj_t self, const mp_obj_type_t *type, mp_obj_t member, mp_obj_t *dest) {
    c6a4:	b580      	push	{r7, lr}
    c6a6:	b084      	sub	sp, #16
    c6a8:	af00      	add	r7, sp, #0
    c6aa:	60f8      	str	r0, [r7, #12]
    c6ac:	60b9      	str	r1, [r7, #8]
    c6ae:	607a      	str	r2, [r7, #4]
    c6b0:	603b      	str	r3, [r7, #0]
    if (MP_OBJ_IS_TYPE(member, &mp_type_staticmethod)) {
    c6b2:	6878      	ldr	r0, [r7, #4]
    c6b4:	f7fe fe9a 	bl	b3ec <MP_OBJ_IS_OBJ>
    c6b8:	4603      	mov	r3, r0
    c6ba:	2b00      	cmp	r3, #0
    c6bc:	d009      	beq.n	c6d2 <mp_convert_member_lookup+0x2e>
    c6be:	687b      	ldr	r3, [r7, #4]
    c6c0:	681b      	ldr	r3, [r3, #0]
    c6c2:	4a30      	ldr	r2, [pc, #192]	; (c784 <mp_convert_member_lookup+0xe0>)
    c6c4:	4293      	cmp	r3, r2
    c6c6:	d104      	bne.n	c6d2 <mp_convert_member_lookup+0x2e>
        // return just the function
        dest[0] = ((mp_obj_static_class_method_t*)MP_OBJ_TO_PTR(member))->fun;
    c6c8:	687b      	ldr	r3, [r7, #4]
    c6ca:	685a      	ldr	r2, [r3, #4]
    c6cc:	683b      	ldr	r3, [r7, #0]
    c6ce:	601a      	str	r2, [r3, #0]
    c6d0:	e053      	b.n	c77a <mp_convert_member_lookup+0xd6>
    } else if (MP_OBJ_IS_TYPE(member, &mp_type_classmethod)) {
    c6d2:	6878      	ldr	r0, [r7, #4]
    c6d4:	f7fe fe8a 	bl	b3ec <MP_OBJ_IS_OBJ>
    c6d8:	4603      	mov	r3, r0
    c6da:	2b00      	cmp	r3, #0
    c6dc:	d014      	beq.n	c708 <mp_convert_member_lookup+0x64>
    c6de:	687b      	ldr	r3, [r7, #4]
    c6e0:	681b      	ldr	r3, [r3, #0]
    c6e2:	4a29      	ldr	r2, [pc, #164]	; (c788 <mp_convert_member_lookup+0xe4>)
    c6e4:	4293      	cmp	r3, r2
    c6e6:	d10f      	bne.n	c708 <mp_convert_member_lookup+0x64>
        // return a bound method, with self being the type of this object
        // this type should be the type of the original instance, not the base
        // type (which is what is passed in the 'type' argument to this function)
        if (self != MP_OBJ_NULL) {
    c6e8:	68fb      	ldr	r3, [r7, #12]
    c6ea:	2b00      	cmp	r3, #0
    c6ec:	d003      	beq.n	c6f6 <mp_convert_member_lookup+0x52>
            type = mp_obj_get_type(self);
    c6ee:	68f8      	ldr	r0, [r7, #12]
    c6f0:	f001 f8d0 	bl	d894 <mp_obj_get_type>
    c6f4:	60b8      	str	r0, [r7, #8]
        }
        dest[0] = ((mp_obj_static_class_method_t*)MP_OBJ_TO_PTR(member))->fun;
    c6f6:	687b      	ldr	r3, [r7, #4]
    c6f8:	685a      	ldr	r2, [r3, #4]
    c6fa:	683b      	ldr	r3, [r7, #0]
    c6fc:	601a      	str	r2, [r3, #0]
        dest[1] = MP_OBJ_FROM_PTR(type);
    c6fe:	683b      	ldr	r3, [r7, #0]
    c700:	3304      	adds	r3, #4
    c702:	68ba      	ldr	r2, [r7, #8]
    c704:	601a      	str	r2, [r3, #0]
    c706:	e038      	b.n	c77a <mp_convert_member_lookup+0xd6>
    } else if (MP_OBJ_IS_TYPE(member, &mp_type_type)) {
    c708:	6878      	ldr	r0, [r7, #4]
    c70a:	f7fe fe6f 	bl	b3ec <MP_OBJ_IS_OBJ>
    c70e:	4603      	mov	r3, r0
    c710:	2b00      	cmp	r3, #0
    c712:	d008      	beq.n	c726 <mp_convert_member_lookup+0x82>
    c714:	687b      	ldr	r3, [r7, #4]
    c716:	681b      	ldr	r3, [r3, #0]
    c718:	4a1c      	ldr	r2, [pc, #112]	; (c78c <mp_convert_member_lookup+0xe8>)
    c71a:	4293      	cmp	r3, r2
    c71c:	d103      	bne.n	c726 <mp_convert_member_lookup+0x82>
        // Don't try to bind types (even though they're callable)
        dest[0] = member;
    c71e:	683b      	ldr	r3, [r7, #0]
    c720:	687a      	ldr	r2, [r7, #4]
    c722:	601a      	str	r2, [r3, #0]
    c724:	e029      	b.n	c77a <mp_convert_member_lookup+0xd6>
    } else if (MP_OBJ_IS_FUN(member)
    c726:	6878      	ldr	r0, [r7, #4]
    c728:	f7fe fe60 	bl	b3ec <MP_OBJ_IS_OBJ>
    c72c:	4603      	mov	r3, r0
    c72e:	2b00      	cmp	r3, #0
    c730:	d006      	beq.n	c740 <mp_convert_member_lookup+0x9c>
    c732:	687b      	ldr	r3, [r7, #4]
    c734:	681b      	ldr	r3, [r3, #0]
    c736:	88db      	ldrh	r3, [r3, #6]
    c738:	f240 1213 	movw	r2, #275	; 0x113
    c73c:	4293      	cmp	r3, r2
    c73e:	d011      	beq.n	c764 <mp_convert_member_lookup+0xc0>
        || (MP_OBJ_IS_OBJ(member)
    c740:	6878      	ldr	r0, [r7, #4]
    c742:	f7fe fe53 	bl	b3ec <MP_OBJ_IS_OBJ>
    c746:	4603      	mov	r3, r0
    c748:	2b00      	cmp	r3, #0
    c74a:	d013      	beq.n	c774 <mp_convert_member_lookup+0xd0>
            && (((mp_obj_base_t*)MP_OBJ_TO_PTR(member))->type->name == MP_QSTR_closure
    c74c:	687b      	ldr	r3, [r7, #4]
    c74e:	681b      	ldr	r3, [r3, #0]
    c750:	88db      	ldrh	r3, [r3, #6]
    c752:	2bfb      	cmp	r3, #251	; 0xfb
    c754:	d006      	beq.n	c764 <mp_convert_member_lookup+0xc0>
                || ((mp_obj_base_t*)MP_OBJ_TO_PTR(member))->type->name == MP_QSTR_generator))) {
    c756:	687b      	ldr	r3, [r7, #4]
    c758:	681b      	ldr	r3, [r3, #0]
    c75a:	88db      	ldrh	r3, [r3, #6]
    c75c:	f240 1215 	movw	r2, #277	; 0x115
    c760:	4293      	cmp	r3, r2
    c762:	d107      	bne.n	c774 <mp_convert_member_lookup+0xd0>
            dest[0] = mp_obj_new_checked_fun(type, member);
        } else
        #endif
        {
            // return a bound method, with self being this object
            dest[0] = member;
    c764:	683b      	ldr	r3, [r7, #0]
    c766:	687a      	ldr	r2, [r7, #4]
    c768:	601a      	str	r2, [r3, #0]
            dest[1] = self;
    c76a:	683b      	ldr	r3, [r7, #0]
    c76c:	3304      	adds	r3, #4
    c76e:	68fa      	ldr	r2, [r7, #12]
    c770:	601a      	str	r2, [r3, #0]
    c772:	e002      	b.n	c77a <mp_convert_member_lookup+0xd6>
        }
    } else {
        // class member is a value, so just return that value
        dest[0] = member;
    c774:	683b      	ldr	r3, [r7, #0]
    c776:	687a      	ldr	r2, [r7, #4]
    c778:	601a      	str	r2, [r3, #0]
    }
}
    c77a:	bf00      	nop
    c77c:	3710      	adds	r7, #16
    c77e:	46bd      	mov	sp, r7
    c780:	bd80      	pop	{r7, pc}
    c782:	bf00      	nop
    c784:	000242f0 	.word	0x000242f0
    c788:	0002432c 	.word	0x0002432c
    c78c:	000240e4 	.word	0x000240e4

0000c790 <mp_load_method_maybe>:

// no attribute found, returns:     dest[0] == MP_OBJ_NULL, dest[1] == MP_OBJ_NULL
// normal attribute found, returns: dest[0] == <attribute>, dest[1] == MP_OBJ_NULL
// method attribute found, returns: dest[0] == <method>,    dest[1] == <self>
void mp_load_method_maybe(mp_obj_t obj, qstr attr, mp_obj_t *dest) {
    c790:	b580      	push	{r7, lr}
    c792:	b088      	sub	sp, #32
    c794:	af00      	add	r7, sp, #0
    c796:	60f8      	str	r0, [r7, #12]
    c798:	60b9      	str	r1, [r7, #8]
    c79a:	607a      	str	r2, [r7, #4]
    // clear output to indicate no attribute/method found yet
    dest[0] = MP_OBJ_NULL;
    c79c:	687b      	ldr	r3, [r7, #4]
    c79e:	2200      	movs	r2, #0
    c7a0:	601a      	str	r2, [r3, #0]
    dest[1] = MP_OBJ_NULL;
    c7a2:	687b      	ldr	r3, [r7, #4]
    c7a4:	3304      	adds	r3, #4
    c7a6:	2200      	movs	r2, #0
    c7a8:	601a      	str	r2, [r3, #0]

    // get the type
    mp_obj_type_t *type = mp_obj_get_type(obj);
    c7aa:	68f8      	ldr	r0, [r7, #12]
    c7ac:	f001 f872 	bl	d894 <mp_obj_get_type>
    c7b0:	61f8      	str	r0, [r7, #28]
    } else if (attr == MP_QSTR___class__) {
        // a.__class__ is equivalent to type(a)
        dest[0] = MP_OBJ_FROM_PTR(type);
#endif

    } else if (attr == MP_QSTR___next__ && type->iternext != NULL) {
    c7b2:	68bb      	ldr	r3, [r7, #8]
    c7b4:	2b1f      	cmp	r3, #31
    c7b6:	d10b      	bne.n	c7d0 <mp_load_method_maybe+0x40>
    c7b8:	69fb      	ldr	r3, [r7, #28]
    c7ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c7bc:	2b00      	cmp	r3, #0
    c7be:	d007      	beq.n	c7d0 <mp_load_method_maybe+0x40>
        dest[0] = MP_OBJ_FROM_PTR(&mp_builtin_next_obj);
    c7c0:	687b      	ldr	r3, [r7, #4]
    c7c2:	4a1f      	ldr	r2, [pc, #124]	; (c840 <mp_load_method_maybe+0xb0>)
    c7c4:	601a      	str	r2, [r3, #0]
        dest[1] = obj;
    c7c6:	687b      	ldr	r3, [r7, #4]
    c7c8:	3304      	adds	r3, #4
    c7ca:	68fa      	ldr	r2, [r7, #12]
    c7cc:	601a      	str	r2, [r3, #0]
        mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
        if (elem != NULL) {
            mp_convert_member_lookup(obj, type, elem->value, dest);
        }
    }
}
    c7ce:	e033      	b.n	c838 <mp_load_method_maybe+0xa8>
    } else if (type->attr != NULL) {
    c7d0:	69fb      	ldr	r3, [r7, #28]
    c7d2:	69db      	ldr	r3, [r3, #28]
    c7d4:	2b00      	cmp	r3, #0
    c7d6:	d006      	beq.n	c7e6 <mp_load_method_maybe+0x56>
        type->attr(obj, attr, dest);
    c7d8:	69fb      	ldr	r3, [r7, #28]
    c7da:	69db      	ldr	r3, [r3, #28]
    c7dc:	687a      	ldr	r2, [r7, #4]
    c7de:	68b9      	ldr	r1, [r7, #8]
    c7e0:	68f8      	ldr	r0, [r7, #12]
    c7e2:	4798      	blx	r3
}
    c7e4:	e028      	b.n	c838 <mp_load_method_maybe+0xa8>
    } else if (type->locals_dict != NULL) {
    c7e6:	69fb      	ldr	r3, [r7, #28]
    c7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c7ea:	2b00      	cmp	r3, #0
    c7ec:	d024      	beq.n	c838 <mp_load_method_maybe+0xa8>
        assert(type->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
    c7ee:	69fb      	ldr	r3, [r7, #28]
    c7f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c7f2:	681b      	ldr	r3, [r3, #0]
    c7f4:	4a13      	ldr	r2, [pc, #76]	; (c844 <mp_load_method_maybe+0xb4>)
    c7f6:	4293      	cmp	r3, r2
    c7f8:	d006      	beq.n	c808 <mp_load_method_maybe+0x78>
    c7fa:	4b13      	ldr	r3, [pc, #76]	; (c848 <mp_load_method_maybe+0xb8>)
    c7fc:	4a13      	ldr	r2, [pc, #76]	; (c84c <mp_load_method_maybe+0xbc>)
    c7fe:	f240 412b 	movw	r1, #1067	; 0x42b
    c802:	4813      	ldr	r0, [pc, #76]	; (c850 <mp_load_method_maybe+0xc0>)
    c804:	f00e ffbe 	bl	1b784 <__assert_func>
        mp_map_t *locals_map = &type->locals_dict->map;
    c808:	69fb      	ldr	r3, [r7, #28]
    c80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c80c:	3304      	adds	r3, #4
    c80e:	61bb      	str	r3, [r7, #24]
        mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
    c810:	68bb      	ldr	r3, [r7, #8]
    c812:	009b      	lsls	r3, r3, #2
    c814:	f043 0302 	orr.w	r3, r3, #2
    c818:	2200      	movs	r2, #0
    c81a:	4619      	mov	r1, r3
    c81c:	69b8      	ldr	r0, [r7, #24]
    c81e:	f000 fe8f 	bl	d540 <mp_map_lookup>
    c822:	6178      	str	r0, [r7, #20]
        if (elem != NULL) {
    c824:	697b      	ldr	r3, [r7, #20]
    c826:	2b00      	cmp	r3, #0
    c828:	d006      	beq.n	c838 <mp_load_method_maybe+0xa8>
            mp_convert_member_lookup(obj, type, elem->value, dest);
    c82a:	697b      	ldr	r3, [r7, #20]
    c82c:	685a      	ldr	r2, [r3, #4]
    c82e:	687b      	ldr	r3, [r7, #4]
    c830:	69f9      	ldr	r1, [r7, #28]
    c832:	68f8      	ldr	r0, [r7, #12]
    c834:	f7ff ff36 	bl	c6a4 <mp_convert_member_lookup>
}
    c838:	bf00      	nop
    c83a:	3720      	adds	r7, #32
    c83c:	46bd      	mov	sp, r7
    c83e:	bd80      	pop	{r7, pc}
    c840:	00024680 	.word	0x00024680
    c844:	00022104 	.word	0x00022104
    c848:	00021794 	.word	0x00021794
    c84c:	00021930 	.word	0x00021930
    c850:	00021694 	.word	0x00021694

0000c854 <mp_load_method>:

void mp_load_method(mp_obj_t base, qstr attr, mp_obj_t *dest) {
    c854:	b580      	push	{r7, lr}
    c856:	b084      	sub	sp, #16
    c858:	af00      	add	r7, sp, #0
    c85a:	60f8      	str	r0, [r7, #12]
    c85c:	60b9      	str	r1, [r7, #8]
    c85e:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("load method %p.%s\n", base, qstr_str(attr));

    mp_load_method_maybe(base, attr, dest);
    c860:	687a      	ldr	r2, [r7, #4]
    c862:	68b9      	ldr	r1, [r7, #8]
    c864:	68f8      	ldr	r0, [r7, #12]
    c866:	f7ff ff93 	bl	c790 <mp_load_method_maybe>

    if (dest[0] == MP_OBJ_NULL) {
    c86a:	687b      	ldr	r3, [r7, #4]
    c86c:	681b      	ldr	r3, [r3, #0]
    c86e:	2b00      	cmp	r3, #0
    c870:	d103      	bne.n	c87a <mp_load_method+0x26>
        // no attribute/method called attr
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_msg(&mp_type_AttributeError, "no such attribute");
    c872:	4904      	ldr	r1, [pc, #16]	; (c884 <mp_load_method+0x30>)
    c874:	4804      	ldr	r0, [pc, #16]	; (c888 <mp_load_method+0x34>)
    c876:	f000 fb7d 	bl	cf74 <mp_raise_msg>
                    "'%s' object has no attribute '%q'",
                    mp_obj_get_type_str(base), attr));
            }
        }
    }
}
    c87a:	bf00      	nop
    c87c:	3710      	adds	r7, #16
    c87e:	46bd      	mov	sp, r7
    c880:	bd80      	pop	{r7, pc}
    c882:	bf00      	nop
    c884:	000217c4 	.word	0x000217c4
    c888:	00022460 	.word	0x00022460

0000c88c <mp_load_method_protected>:

// Acts like mp_load_method_maybe but catches AttributeError, and all other exceptions if requested
void mp_load_method_protected(mp_obj_t obj, qstr attr, mp_obj_t *dest, bool catch_all_exc) {
    c88c:	b580      	push	{r7, lr}
    c88e:	b090      	sub	sp, #64	; 0x40
    c890:	af00      	add	r7, sp, #0
    c892:	60f8      	str	r0, [r7, #12]
    c894:	60b9      	str	r1, [r7, #8]
    c896:	607a      	str	r2, [r7, #4]
    c898:	70fb      	strb	r3, [r7, #3]
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
    c89a:	f107 0310 	add.w	r3, r7, #16
    c89e:	4618      	mov	r0, r3
    c8a0:	f7f3 fd0c 	bl	2bc <nlr_push>
    c8a4:	4603      	mov	r3, r0
    c8a6:	2b00      	cmp	r3, #0
    c8a8:	d107      	bne.n	c8ba <mp_load_method_protected+0x2e>
        mp_load_method_maybe(obj, attr, dest);
    c8aa:	687a      	ldr	r2, [r7, #4]
    c8ac:	68b9      	ldr	r1, [r7, #8]
    c8ae:	68f8      	ldr	r0, [r7, #12]
    c8b0:	f7ff ff6e 	bl	c790 <mp_load_method_maybe>
        nlr_pop();
    c8b4:	f7f3 fcf0 	bl	298 <nlr_pop>
                MP_OBJ_FROM_PTR(&mp_type_AttributeError))) {
            // Re-raise the exception
            nlr_raise(MP_OBJ_FROM_PTR(nlr.ret_val));
        }
    }
}
    c8b8:	e015      	b.n	c8e6 <mp_load_method_protected+0x5a>
        if (!catch_all_exc
    c8ba:	78fb      	ldrb	r3, [r7, #3]
    c8bc:	f083 0301 	eor.w	r3, r3, #1
    c8c0:	b2db      	uxtb	r3, r3
    c8c2:	2b00      	cmp	r3, #0
    c8c4:	d00f      	beq.n	c8e6 <mp_load_method_protected+0x5a>
            && !mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type),
    c8c6:	697b      	ldr	r3, [r7, #20]
    c8c8:	681b      	ldr	r3, [r3, #0]
    c8ca:	4909      	ldr	r1, [pc, #36]	; (c8f0 <mp_load_method_protected+0x64>)
    c8cc:	4618      	mov	r0, r3
    c8ce:	f00a fe1b 	bl	17508 <mp_obj_is_subclass_fast>
    c8d2:	4603      	mov	r3, r0
    c8d4:	f083 0301 	eor.w	r3, r3, #1
    c8d8:	b2db      	uxtb	r3, r3
    c8da:	2b00      	cmp	r3, #0
    c8dc:	d003      	beq.n	c8e6 <mp_load_method_protected+0x5a>
            nlr_raise(MP_OBJ_FROM_PTR(nlr.ret_val));
    c8de:	697b      	ldr	r3, [r7, #20]
    c8e0:	4618      	mov	r0, r3
    c8e2:	f7f3 fcfd 	bl	2e0 <nlr_jump>
}
    c8e6:	bf00      	nop
    c8e8:	3740      	adds	r7, #64	; 0x40
    c8ea:	46bd      	mov	sp, r7
    c8ec:	bd80      	pop	{r7, pc}
    c8ee:	bf00      	nop
    c8f0:	00022460 	.word	0x00022460

0000c8f4 <mp_store_attr>:

void mp_store_attr(mp_obj_t base, qstr attr, mp_obj_t value) {
    c8f4:	b580      	push	{r7, lr}
    c8f6:	b088      	sub	sp, #32
    c8f8:	af00      	add	r7, sp, #0
    c8fa:	60f8      	str	r0, [r7, #12]
    c8fc:	60b9      	str	r1, [r7, #8]
    c8fe:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("store attr %p.%s <- %p\n", base, qstr_str(attr), value);
    mp_obj_type_t *type = mp_obj_get_type(base);
    c900:	68f8      	ldr	r0, [r7, #12]
    c902:	f000 ffc7 	bl	d894 <mp_obj_get_type>
    c906:	61f8      	str	r0, [r7, #28]
    if (type->attr != NULL) {
    c908:	69fb      	ldr	r3, [r7, #28]
    c90a:	69db      	ldr	r3, [r3, #28]
    c90c:	2b00      	cmp	r3, #0
    c90e:	d00d      	beq.n	c92c <mp_store_attr+0x38>
        mp_obj_t dest[2] = {MP_OBJ_SENTINEL, value};
    c910:	2308      	movs	r3, #8
    c912:	617b      	str	r3, [r7, #20]
    c914:	687b      	ldr	r3, [r7, #4]
    c916:	61bb      	str	r3, [r7, #24]
        type->attr(base, attr, dest);
    c918:	69fb      	ldr	r3, [r7, #28]
    c91a:	69db      	ldr	r3, [r3, #28]
    c91c:	f107 0214 	add.w	r2, r7, #20
    c920:	68b9      	ldr	r1, [r7, #8]
    c922:	68f8      	ldr	r0, [r7, #12]
    c924:	4798      	blx	r3
        if (dest[0] == MP_OBJ_NULL) {
    c926:	697b      	ldr	r3, [r7, #20]
    c928:	2b00      	cmp	r3, #0
    c92a:	d003      	beq.n	c934 <mp_store_attr+0x40>
            // success
            return;
        }
    }
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_msg(&mp_type_AttributeError, "no such attribute");
    c92c:	4903      	ldr	r1, [pc, #12]	; (c93c <mp_store_attr+0x48>)
    c92e:	4804      	ldr	r0, [pc, #16]	; (c940 <mp_store_attr+0x4c>)
    c930:	f000 fb20 	bl	cf74 <mp_raise_msg>
            return;
    c934:	bf00      	nop
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_AttributeError,
            "'%s' object has no attribute '%q'",
            mp_obj_get_type_str(base), attr));
    }
}
    c936:	3720      	adds	r7, #32
    c938:	46bd      	mov	sp, r7
    c93a:	bd80      	pop	{r7, pc}
    c93c:	000217c4 	.word	0x000217c4
    c940:	00022460 	.word	0x00022460

0000c944 <mp_getiter>:

mp_obj_t mp_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
    c944:	b580      	push	{r7, lr}
    c946:	b086      	sub	sp, #24
    c948:	af00      	add	r7, sp, #0
    c94a:	6078      	str	r0, [r7, #4]
    c94c:	6039      	str	r1, [r7, #0]
    assert(o_in);
    c94e:	687b      	ldr	r3, [r7, #4]
    c950:	2b00      	cmp	r3, #0
    c952:	d106      	bne.n	c962 <mp_getiter+0x1e>
    c954:	4b20      	ldr	r3, [pc, #128]	; (c9d8 <mp_getiter+0x94>)
    c956:	4a21      	ldr	r2, [pc, #132]	; (c9dc <mp_getiter+0x98>)
    c958:	f240 4171 	movw	r1, #1137	; 0x471
    c95c:	4820      	ldr	r0, [pc, #128]	; (c9e0 <mp_getiter+0x9c>)
    c95e:	f00e ff11 	bl	1b784 <__assert_func>
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    c962:	6878      	ldr	r0, [r7, #4]
    c964:	f000 ff96 	bl	d894 <mp_obj_get_type>
    c968:	6178      	str	r0, [r7, #20]

    // Check for native getiter which is the identity.  We handle this case explicitly
    // so we don't unnecessarily allocate any RAM for the iter_buf, which won't be used.
    if (type->getiter == mp_identity_getiter) {
    c96a:	697b      	ldr	r3, [r7, #20]
    c96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c96e:	4a1d      	ldr	r2, [pc, #116]	; (c9e4 <mp_getiter+0xa0>)
    c970:	4293      	cmp	r3, r2
    c972:	d101      	bne.n	c978 <mp_getiter+0x34>
        return o_in;
    c974:	687b      	ldr	r3, [r7, #4]
    c976:	e02a      	b.n	c9ce <mp_getiter+0x8a>
    }

    // if caller did not provide a buffer then allocate one on the heap
    if (iter_buf == NULL) {
    c978:	683b      	ldr	r3, [r7, #0]
    c97a:	2b00      	cmp	r3, #0
    c97c:	d103      	bne.n	c986 <mp_getiter+0x42>
        iter_buf = m_new_obj(mp_obj_iter_buf_t);
    c97e:	2010      	movs	r0, #16
    c980:	f7f3 fccc 	bl	31c <m_malloc>
    c984:	6038      	str	r0, [r7, #0]
    }

    // check for native getiter (corresponds to __iter__)
    if (type->getiter != NULL) {
    c986:	697b      	ldr	r3, [r7, #20]
    c988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c98a:	2b00      	cmp	r3, #0
    c98c:	d00a      	beq.n	c9a4 <mp_getiter+0x60>
        mp_obj_t iter = type->getiter(o_in, iter_buf);
    c98e:	697b      	ldr	r3, [r7, #20]
    c990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c992:	6839      	ldr	r1, [r7, #0]
    c994:	6878      	ldr	r0, [r7, #4]
    c996:	4798      	blx	r3
    c998:	6138      	str	r0, [r7, #16]
        if (iter != MP_OBJ_NULL) {
    c99a:	693b      	ldr	r3, [r7, #16]
    c99c:	2b00      	cmp	r3, #0
    c99e:	d001      	beq.n	c9a4 <mp_getiter+0x60>
            return iter;
    c9a0:	693b      	ldr	r3, [r7, #16]
    c9a2:	e014      	b.n	c9ce <mp_getiter+0x8a>
        }
    }

    // check for __getitem__
    mp_obj_t dest[2];
    mp_load_method_maybe(o_in, MP_QSTR___getitem__, dest);
    c9a4:	f107 0308 	add.w	r3, r7, #8
    c9a8:	461a      	mov	r2, r3
    c9aa:	210f      	movs	r1, #15
    c9ac:	6878      	ldr	r0, [r7, #4]
    c9ae:	f7ff feef 	bl	c790 <mp_load_method_maybe>
    if (dest[0] != MP_OBJ_NULL) {
    c9b2:	68bb      	ldr	r3, [r7, #8]
    c9b4:	2b00      	cmp	r3, #0
    c9b6:	d007      	beq.n	c9c8 <mp_getiter+0x84>
        // __getitem__ exists, create and return an iterator
        return mp_obj_new_getitem_iter(dest, iter_buf);
    c9b8:	f107 0308 	add.w	r3, r7, #8
    c9bc:	6839      	ldr	r1, [r7, #0]
    c9be:	4618      	mov	r0, r3
    c9c0:	f003 fd6c 	bl	1049c <mp_obj_new_getitem_iter>
    c9c4:	4603      	mov	r3, r0
    c9c6:	e002      	b.n	c9ce <mp_getiter+0x8a>
    }

    // object not iterable
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("object not iterable");
    c9c8:	4807      	ldr	r0, [pc, #28]	; (c9e8 <mp_getiter+0xa4>)
    c9ca:	f000 faf5 	bl	cfb8 <mp_raise_TypeError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "'%s' object isn't iterable", mp_obj_get_type_str(o_in)));
    }
}
    c9ce:	4618      	mov	r0, r3
    c9d0:	3718      	adds	r7, #24
    c9d2:	46bd      	mov	sp, r7
    c9d4:	bd80      	pop	{r7, pc}
    c9d6:	bf00      	nop
    c9d8:	000217d8 	.word	0x000217d8
    c9dc:	00021948 	.word	0x00021948
    c9e0:	00021694 	.word	0x00021694
    c9e4:	0000e065 	.word	0x0000e065
    c9e8:	000217e0 	.word	0x000217e0

0000c9ec <mp_iternext_allow_raise>:

// may return MP_OBJ_STOP_ITERATION as an optimisation instead of raise StopIteration()
// may also raise StopIteration()
mp_obj_t mp_iternext_allow_raise(mp_obj_t o_in) {
    c9ec:	b580      	push	{r7, lr}
    c9ee:	b086      	sub	sp, #24
    c9f0:	af00      	add	r7, sp, #0
    c9f2:	6078      	str	r0, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    c9f4:	6878      	ldr	r0, [r7, #4]
    c9f6:	f000 ff4d 	bl	d894 <mp_obj_get_type>
    c9fa:	6178      	str	r0, [r7, #20]
    if (type->iternext != NULL) {
    c9fc:	697b      	ldr	r3, [r7, #20]
    c9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ca00:	2b00      	cmp	r3, #0
    ca02:	d005      	beq.n	ca10 <mp_iternext_allow_raise+0x24>
        return type->iternext(o_in);
    ca04:	697b      	ldr	r3, [r7, #20]
    ca06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ca08:	6878      	ldr	r0, [r7, #4]
    ca0a:	4798      	blx	r3
    ca0c:	4603      	mov	r3, r0
    ca0e:	e015      	b.n	ca3c <mp_iternext_allow_raise+0x50>
    } else {
        // check for __next__ method
        mp_obj_t dest[2];
        mp_load_method_maybe(o_in, MP_QSTR___next__, dest);
    ca10:	f107 030c 	add.w	r3, r7, #12
    ca14:	461a      	mov	r2, r3
    ca16:	211f      	movs	r1, #31
    ca18:	6878      	ldr	r0, [r7, #4]
    ca1a:	f7ff feb9 	bl	c790 <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    ca1e:	68fb      	ldr	r3, [r7, #12]
    ca20:	2b00      	cmp	r3, #0
    ca22:	d008      	beq.n	ca36 <mp_iternext_allow_raise+0x4a>
            // __next__ exists, call it and return its result
            return mp_call_method_n_kw(0, 0, dest);
    ca24:	f107 030c 	add.w	r3, r7, #12
    ca28:	461a      	mov	r2, r3
    ca2a:	2100      	movs	r1, #0
    ca2c:	2000      	movs	r0, #0
    ca2e:	f7ff fa33 	bl	be98 <mp_call_method_n_kw>
    ca32:	4603      	mov	r3, r0
    ca34:	e002      	b.n	ca3c <mp_iternext_allow_raise+0x50>
        } else {
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("object not an iterator");
    ca36:	4803      	ldr	r0, [pc, #12]	; (ca44 <mp_iternext_allow_raise+0x58>)
    ca38:	f000 fabe 	bl	cfb8 <mp_raise_TypeError>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "'%s' object isn't an iterator", mp_obj_get_type_str(o_in)));
            }
        }
    }
}
    ca3c:	4618      	mov	r0, r3
    ca3e:	3718      	adds	r7, #24
    ca40:	46bd      	mov	sp, r7
    ca42:	bd80      	pop	{r7, pc}
    ca44:	000217f4 	.word	0x000217f4

0000ca48 <mp_iternext>:

// will always return MP_OBJ_STOP_ITERATION instead of raising StopIteration() (or any subclass thereof)
// may raise other exceptions
mp_obj_t mp_iternext(mp_obj_t o_in) {
    ca48:	b580      	push	{r7, lr}
    ca4a:	b092      	sub	sp, #72	; 0x48
    ca4c:	af00      	add	r7, sp, #0
    ca4e:	6078      	str	r0, [r7, #4]
    MP_STACK_CHECK(); // enumerate, filter, map and zip can recursively call mp_iternext
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    ca50:	6878      	ldr	r0, [r7, #4]
    ca52:	f000 ff1f 	bl	d894 <mp_obj_get_type>
    ca56:	6478      	str	r0, [r7, #68]	; 0x44
    if (type->iternext != NULL) {
    ca58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ca5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ca5c:	2b00      	cmp	r3, #0
    ca5e:	d005      	beq.n	ca6c <mp_iternext+0x24>
        return type->iternext(o_in);
    ca60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ca62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ca64:	6878      	ldr	r0, [r7, #4]
    ca66:	4798      	blx	r3
    ca68:	4603      	mov	r3, r0
    ca6a:	e02f      	b.n	cacc <mp_iternext+0x84>
    } else {
        // check for __next__ method
        mp_obj_t dest[2];
        mp_load_method_maybe(o_in, MP_QSTR___next__, dest);
    ca6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
    ca70:	461a      	mov	r2, r3
    ca72:	211f      	movs	r1, #31
    ca74:	6878      	ldr	r0, [r7, #4]
    ca76:	f7ff fe8b 	bl	c790 <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    ca7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ca7c:	2b00      	cmp	r3, #0
    ca7e:	d022      	beq.n	cac6 <mp_iternext+0x7e>
            // __next__ exists, call it and return its result
            nlr_buf_t nlr;
            if (nlr_push(&nlr) == 0) {
    ca80:	f107 0308 	add.w	r3, r7, #8
    ca84:	4618      	mov	r0, r3
    ca86:	f7f3 fc19 	bl	2bc <nlr_push>
    ca8a:	4603      	mov	r3, r0
    ca8c:	2b00      	cmp	r3, #0
    ca8e:	d10b      	bne.n	caa8 <mp_iternext+0x60>
                mp_obj_t ret = mp_call_method_n_kw(0, 0, dest);
    ca90:	f107 0338 	add.w	r3, r7, #56	; 0x38
    ca94:	461a      	mov	r2, r3
    ca96:	2100      	movs	r1, #0
    ca98:	2000      	movs	r0, #0
    ca9a:	f7ff f9fd 	bl	be98 <mp_call_method_n_kw>
    ca9e:	6438      	str	r0, [r7, #64]	; 0x40
                nlr_pop();
    caa0:	f7f3 fbfa 	bl	298 <nlr_pop>
                return ret;
    caa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    caa6:	e011      	b.n	cacc <mp_iternext+0x84>
            } else {
                if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
    caa8:	68fb      	ldr	r3, [r7, #12]
    caaa:	681b      	ldr	r3, [r3, #0]
    caac:	4909      	ldr	r1, [pc, #36]	; (cad4 <mp_iternext+0x8c>)
    caae:	4618      	mov	r0, r3
    cab0:	f00a fd2a 	bl	17508 <mp_obj_is_subclass_fast>
    cab4:	4603      	mov	r3, r0
    cab6:	2b00      	cmp	r3, #0
    cab8:	d001      	beq.n	cabe <mp_iternext+0x76>
                    return MP_OBJ_STOP_ITERATION;
    caba:	2304      	movs	r3, #4
    cabc:	e006      	b.n	cacc <mp_iternext+0x84>
                } else {
                    nlr_jump(nlr.ret_val);
    cabe:	68fb      	ldr	r3, [r7, #12]
    cac0:	4618      	mov	r0, r3
    cac2:	f7f3 fc0d 	bl	2e0 <nlr_jump>
                }
            }
        } else {
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("object not an iterator");
    cac6:	4804      	ldr	r0, [pc, #16]	; (cad8 <mp_iternext+0x90>)
    cac8:	f000 fa76 	bl	cfb8 <mp_raise_TypeError>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "'%s' object isn't an iterator", mp_obj_get_type_str(o_in)));
            }
        }
    }
}
    cacc:	4618      	mov	r0, r3
    cace:	3748      	adds	r7, #72	; 0x48
    cad0:	46bd      	mov	sp, r7
    cad2:	bd80      	pop	{r7, pc}
    cad4:	00022334 	.word	0x00022334
    cad8:	000217f4 	.word	0x000217f4

0000cadc <mp_resume>:

// TODO: Unclear what to do with StopIterarion exception here.
mp_vm_return_kind_t mp_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val) {
    cadc:	b580      	push	{r7, lr}
    cade:	b08a      	sub	sp, #40	; 0x28
    cae0:	af00      	add	r7, sp, #0
    cae2:	60f8      	str	r0, [r7, #12]
    cae4:	60b9      	str	r1, [r7, #8]
    cae6:	607a      	str	r2, [r7, #4]
    cae8:	603b      	str	r3, [r7, #0]
    assert((send_value != MP_OBJ_NULL) ^ (throw_value != MP_OBJ_NULL));
    caea:	68bb      	ldr	r3, [r7, #8]
    caec:	2b00      	cmp	r3, #0
    caee:	bf14      	ite	ne
    caf0:	2301      	movne	r3, #1
    caf2:	2300      	moveq	r3, #0
    caf4:	b2da      	uxtb	r2, r3
    caf6:	687b      	ldr	r3, [r7, #4]
    caf8:	2b00      	cmp	r3, #0
    cafa:	bf14      	ite	ne
    cafc:	2301      	movne	r3, #1
    cafe:	2300      	moveq	r3, #0
    cb00:	b2db      	uxtb	r3, r3
    cb02:	4053      	eors	r3, r2
    cb04:	b2db      	uxtb	r3, r3
    cb06:	2b00      	cmp	r3, #0
    cb08:	d106      	bne.n	cb18 <mp_resume+0x3c>
    cb0a:	4b58      	ldr	r3, [pc, #352]	; (cc6c <mp_resume+0x190>)
    cb0c:	4a58      	ldr	r2, [pc, #352]	; (cc70 <mp_resume+0x194>)
    cb0e:	f240 41d6 	movw	r1, #1238	; 0x4d6
    cb12:	4858      	ldr	r0, [pc, #352]	; (cc74 <mp_resume+0x198>)
    cb14:	f00e fe36 	bl	1b784 <__assert_func>
    mp_obj_type_t *type = mp_obj_get_type(self_in);
    cb18:	68f8      	ldr	r0, [r7, #12]
    cb1a:	f000 febb 	bl	d894 <mp_obj_get_type>
    cb1e:	6278      	str	r0, [r7, #36]	; 0x24

    if (type == &mp_type_gen_instance) {
    cb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cb22:	4a55      	ldr	r2, [pc, #340]	; (cc78 <mp_resume+0x19c>)
    cb24:	4293      	cmp	r3, r2
    cb26:	d107      	bne.n	cb38 <mp_resume+0x5c>
        return mp_obj_gen_resume(self_in, send_value, throw_value, ret_val);
    cb28:	683b      	ldr	r3, [r7, #0]
    cb2a:	687a      	ldr	r2, [r7, #4]
    cb2c:	68b9      	ldr	r1, [r7, #8]
    cb2e:	68f8      	ldr	r0, [r7, #12]
    cb30:	f003 fadc 	bl	100ec <mp_obj_gen_resume>
    cb34:	4603      	mov	r3, r0
    cb36:	e094      	b.n	cc62 <mp_resume+0x186>
    }

    if (type->iternext != NULL && send_value == mp_const_none) {
    cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cb3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cb3c:	2b00      	cmp	r3, #0
    cb3e:	d012      	beq.n	cb66 <mp_resume+0x8a>
    cb40:	68bb      	ldr	r3, [r7, #8]
    cb42:	4a4e      	ldr	r2, [pc, #312]	; (cc7c <mp_resume+0x1a0>)
    cb44:	4293      	cmp	r3, r2
    cb46:	d10e      	bne.n	cb66 <mp_resume+0x8a>
        mp_obj_t ret = type->iternext(self_in);
    cb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cb4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cb4c:	68f8      	ldr	r0, [r7, #12]
    cb4e:	4798      	blx	r3
    cb50:	6238      	str	r0, [r7, #32]
        *ret_val = ret;
    cb52:	683b      	ldr	r3, [r7, #0]
    cb54:	6a3a      	ldr	r2, [r7, #32]
    cb56:	601a      	str	r2, [r3, #0]
        if (ret != MP_OBJ_STOP_ITERATION) {
    cb58:	6a3b      	ldr	r3, [r7, #32]
    cb5a:	2b04      	cmp	r3, #4
    cb5c:	d001      	beq.n	cb62 <mp_resume+0x86>
            return MP_VM_RETURN_YIELD;
    cb5e:	2301      	movs	r3, #1
    cb60:	e07f      	b.n	cc62 <mp_resume+0x186>
        } else {
            // Emulate raise StopIteration()
            // Special case, handled in vm.c
            return MP_VM_RETURN_NORMAL;
    cb62:	2300      	movs	r3, #0
    cb64:	e07d      	b.n	cc62 <mp_resume+0x186>
    }

    mp_obj_t dest[3]; // Reserve slot for send() arg

    // Python instance iterator protocol
    if (send_value == mp_const_none) {
    cb66:	68bb      	ldr	r3, [r7, #8]
    cb68:	4a44      	ldr	r2, [pc, #272]	; (cc7c <mp_resume+0x1a0>)
    cb6a:	4293      	cmp	r3, r2
    cb6c:	d115      	bne.n	cb9a <mp_resume+0xbe>
        mp_load_method_maybe(self_in, MP_QSTR___next__, dest);
    cb6e:	f107 0314 	add.w	r3, r7, #20
    cb72:	461a      	mov	r2, r3
    cb74:	211f      	movs	r1, #31
    cb76:	68f8      	ldr	r0, [r7, #12]
    cb78:	f7ff fe0a 	bl	c790 <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    cb7c:	697b      	ldr	r3, [r7, #20]
    cb7e:	2b00      	cmp	r3, #0
    cb80:	d00b      	beq.n	cb9a <mp_resume+0xbe>
            *ret_val = mp_call_method_n_kw(0, 0, dest);
    cb82:	f107 0314 	add.w	r3, r7, #20
    cb86:	461a      	mov	r2, r3
    cb88:	2100      	movs	r1, #0
    cb8a:	2000      	movs	r0, #0
    cb8c:	f7ff f984 	bl	be98 <mp_call_method_n_kw>
    cb90:	4602      	mov	r2, r0
    cb92:	683b      	ldr	r3, [r7, #0]
    cb94:	601a      	str	r2, [r3, #0]
            return MP_VM_RETURN_YIELD;
    cb96:	2301      	movs	r3, #1
    cb98:	e063      	b.n	cc62 <mp_resume+0x186>
        }
    }

    // Either python instance generator protocol, or native object
    // generator protocol.
    if (send_value != MP_OBJ_NULL) {
    cb9a:	68bb      	ldr	r3, [r7, #8]
    cb9c:	2b00      	cmp	r3, #0
    cb9e:	d015      	beq.n	cbcc <mp_resume+0xf0>
        mp_load_method(self_in, MP_QSTR_send, dest);
    cba0:	f107 0314 	add.w	r3, r7, #20
    cba4:	461a      	mov	r2, r3
    cba6:	f44f 71b0 	mov.w	r1, #352	; 0x160
    cbaa:	68f8      	ldr	r0, [r7, #12]
    cbac:	f7ff fe52 	bl	c854 <mp_load_method>
        dest[2] = send_value;
    cbb0:	68bb      	ldr	r3, [r7, #8]
    cbb2:	61fb      	str	r3, [r7, #28]
        *ret_val = mp_call_method_n_kw(1, 0, dest);
    cbb4:	f107 0314 	add.w	r3, r7, #20
    cbb8:	461a      	mov	r2, r3
    cbba:	2100      	movs	r1, #0
    cbbc:	2001      	movs	r0, #1
    cbbe:	f7ff f96b 	bl	be98 <mp_call_method_n_kw>
    cbc2:	4602      	mov	r2, r0
    cbc4:	683b      	ldr	r3, [r7, #0]
    cbc6:	601a      	str	r2, [r3, #0]
        return MP_VM_RETURN_YIELD;
    cbc8:	2301      	movs	r3, #1
    cbca:	e04a      	b.n	cc62 <mp_resume+0x186>
    }

    assert(throw_value != MP_OBJ_NULL);
    cbcc:	687b      	ldr	r3, [r7, #4]
    cbce:	2b00      	cmp	r3, #0
    cbd0:	d106      	bne.n	cbe0 <mp_resume+0x104>
    cbd2:	4b2b      	ldr	r3, [pc, #172]	; (cc80 <mp_resume+0x1a4>)
    cbd4:	4a26      	ldr	r2, [pc, #152]	; (cc70 <mp_resume+0x194>)
    cbd6:	f240 41fd 	movw	r1, #1277	; 0x4fd
    cbda:	4826      	ldr	r0, [pc, #152]	; (cc74 <mp_resume+0x198>)
    cbdc:	f00e fdd2 	bl	1b784 <__assert_func>
    {
        if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(throw_value)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit))) {
    cbe0:	6878      	ldr	r0, [r7, #4]
    cbe2:	f000 fe57 	bl	d894 <mp_obj_get_type>
    cbe6:	4603      	mov	r3, r0
    cbe8:	4926      	ldr	r1, [pc, #152]	; (cc84 <mp_resume+0x1a8>)
    cbea:	4618      	mov	r0, r3
    cbec:	f00a fc8c 	bl	17508 <mp_obj_is_subclass_fast>
    cbf0:	4603      	mov	r3, r0
    cbf2:	2b00      	cmp	r3, #0
    cbf4:	d015      	beq.n	cc22 <mp_resume+0x146>
            mp_load_method_maybe(self_in, MP_QSTR_close, dest);
    cbf6:	f107 0314 	add.w	r3, r7, #20
    cbfa:	461a      	mov	r2, r3
    cbfc:	21fa      	movs	r1, #250	; 0xfa
    cbfe:	68f8      	ldr	r0, [r7, #12]
    cc00:	f7ff fdc6 	bl	c790 <mp_load_method_maybe>
            if (dest[0] != MP_OBJ_NULL) {
    cc04:	697b      	ldr	r3, [r7, #20]
    cc06:	2b00      	cmp	r3, #0
    cc08:	d024      	beq.n	cc54 <mp_resume+0x178>
                // TODO: Exceptions raised in close() are not propagated,
                // printed to sys.stderr
                *ret_val = mp_call_method_n_kw(0, 0, dest);
    cc0a:	f107 0314 	add.w	r3, r7, #20
    cc0e:	461a      	mov	r2, r3
    cc10:	2100      	movs	r1, #0
    cc12:	2000      	movs	r0, #0
    cc14:	f7ff f940 	bl	be98 <mp_call_method_n_kw>
    cc18:	4602      	mov	r2, r0
    cc1a:	683b      	ldr	r3, [r7, #0]
    cc1c:	601a      	str	r2, [r3, #0]
                // We assume one can't "yield" from close()
                return MP_VM_RETURN_NORMAL;
    cc1e:	2300      	movs	r3, #0
    cc20:	e01f      	b.n	cc62 <mp_resume+0x186>
            }
        } else {
            mp_load_method_maybe(self_in, MP_QSTR_throw, dest);
    cc22:	f107 0314 	add.w	r3, r7, #20
    cc26:	461a      	mov	r2, r3
    cc28:	f44f 71b9 	mov.w	r1, #370	; 0x172
    cc2c:	68f8      	ldr	r0, [r7, #12]
    cc2e:	f7ff fdaf 	bl	c790 <mp_load_method_maybe>
            if (dest[0] != MP_OBJ_NULL) {
    cc32:	697b      	ldr	r3, [r7, #20]
    cc34:	2b00      	cmp	r3, #0
    cc36:	d00d      	beq.n	cc54 <mp_resume+0x178>
                dest[2] = throw_value;
    cc38:	687b      	ldr	r3, [r7, #4]
    cc3a:	61fb      	str	r3, [r7, #28]
                *ret_val = mp_call_method_n_kw(1, 0, dest);
    cc3c:	f107 0314 	add.w	r3, r7, #20
    cc40:	461a      	mov	r2, r3
    cc42:	2100      	movs	r1, #0
    cc44:	2001      	movs	r0, #1
    cc46:	f7ff f927 	bl	be98 <mp_call_method_n_kw>
    cc4a:	4602      	mov	r2, r0
    cc4c:	683b      	ldr	r3, [r7, #0]
    cc4e:	601a      	str	r2, [r3, #0]
                // If .throw() method returned, we assume it's value to yield
                // - any exception would be thrown with nlr_raise().
                return MP_VM_RETURN_YIELD;
    cc50:	2301      	movs	r3, #1
    cc52:	e006      	b.n	cc62 <mp_resume+0x186>
        // If there's nowhere to throw exception into, then we assume that object
        // is just incapable to handle it, so any exception thrown into it
        // will be propagated up. This behavior is approved by test_pep380.py
        // test_delegation_of_close_to_non_generator(),
        //  test_delegating_throw_to_non_generator()
        *ret_val = mp_make_raise_obj(throw_value);
    cc54:	6878      	ldr	r0, [r7, #4]
    cc56:	f000 f817 	bl	cc88 <mp_make_raise_obj>
    cc5a:	4602      	mov	r2, r0
    cc5c:	683b      	ldr	r3, [r7, #0]
    cc5e:	601a      	str	r2, [r3, #0]
        return MP_VM_RETURN_EXCEPTION;
    cc60:	2302      	movs	r3, #2
    }
}
    cc62:	4618      	mov	r0, r3
    cc64:	3728      	adds	r7, #40	; 0x28
    cc66:	46bd      	mov	sp, r7
    cc68:	bd80      	pop	{r7, pc}
    cc6a:	bf00      	nop
    cc6c:	0002180c 	.word	0x0002180c
    cc70:	00021954 	.word	0x00021954
    cc74:	00021694 	.word	0x00021694
    cc78:	00022e3c 	.word	0x00022e3c
    cc7c:	000234d4 	.word	0x000234d4
    cc80:	00021848 	.word	0x00021848
    cc84:	000222bc 	.word	0x000222bc

0000cc88 <mp_make_raise_obj>:

mp_obj_t mp_make_raise_obj(mp_obj_t o) {
    cc88:	b580      	push	{r7, lr}
    cc8a:	b082      	sub	sp, #8
    cc8c:	af00      	add	r7, sp, #0
    cc8e:	6078      	str	r0, [r7, #4]
    DEBUG_printf("raise %p\n", o);
    if (mp_obj_is_exception_type(o)) {
    cc90:	6878      	ldr	r0, [r7, #4]
    cc92:	f002 fdb5 	bl	f800 <mp_obj_is_exception_type>
    cc96:	4603      	mov	r3, r0
    cc98:	2b00      	cmp	r3, #0
    cc9a:	d007      	beq.n	ccac <mp_make_raise_obj+0x24>
        // o is an exception type (it is derived from BaseException (or is BaseException))
        // create and return a new exception instance by calling o
        // TODO could have an option to disable traceback, then builtin exceptions (eg TypeError)
        // could have const instances in ROM which we return here instead
        return mp_call_function_n_kw(o, 0, 0, NULL);
    cc9c:	2300      	movs	r3, #0
    cc9e:	2200      	movs	r2, #0
    cca0:	2100      	movs	r1, #0
    cca2:	6878      	ldr	r0, [r7, #4]
    cca4:	f7ff f8d6 	bl	be54 <mp_call_function_n_kw>
    cca8:	4603      	mov	r3, r0
    ccaa:	e00c      	b.n	ccc6 <mp_make_raise_obj+0x3e>
    } else if (mp_obj_is_exception_instance(o)) {
    ccac:	6878      	ldr	r0, [r7, #4]
    ccae:	f002 fdcf 	bl	f850 <mp_obj_is_exception_instance>
    ccb2:	4603      	mov	r3, r0
    ccb4:	2b00      	cmp	r3, #0
    ccb6:	d001      	beq.n	ccbc <mp_make_raise_obj+0x34>
        // o is an instance of an exception, so use it as the exception
        return o;
    ccb8:	687b      	ldr	r3, [r7, #4]
    ccba:	e004      	b.n	ccc6 <mp_make_raise_obj+0x3e>
    } else {
        // o cannot be used as an exception, so return a type error (which will be raised by the caller)
        return mp_obj_new_exception_msg(&mp_type_TypeError, "exceptions must derive from BaseException");
    ccbc:	4904      	ldr	r1, [pc, #16]	; (ccd0 <mp_make_raise_obj+0x48>)
    ccbe:	4805      	ldr	r0, [pc, #20]	; (ccd4 <mp_make_raise_obj+0x4c>)
    ccc0:	f002 fca0 	bl	f604 <mp_obj_new_exception_msg>
    ccc4:	4603      	mov	r3, r0
    }
}
    ccc6:	4618      	mov	r0, r3
    ccc8:	3708      	adds	r7, #8
    ccca:	46bd      	mov	sp, r7
    cccc:	bd80      	pop	{r7, pc}
    ccce:	bf00      	nop
    ccd0:	00021864 	.word	0x00021864
    ccd4:	0002276c 	.word	0x0002276c

0000ccd8 <mp_import_name>:

mp_obj_t mp_import_name(qstr name, mp_obj_t fromlist, mp_obj_t level) {
    ccd8:	b580      	push	{r7, lr}
    ccda:	b08a      	sub	sp, #40	; 0x28
    ccdc:	af00      	add	r7, sp, #0
    ccde:	60f8      	str	r0, [r7, #12]
    cce0:	60b9      	str	r1, [r7, #8]
    cce2:	607a      	str	r2, [r7, #4]
    DEBUG_printf("import name '%s' level=%d\n", qstr_str(name), MP_OBJ_SMALL_INT_VALUE(level));

    // build args array
    mp_obj_t args[5];
    args[0] = MP_OBJ_NEW_QSTR(name);
    cce4:	68fb      	ldr	r3, [r7, #12]
    cce6:	009b      	lsls	r3, r3, #2
    cce8:	f043 0302 	orr.w	r3, r3, #2
    ccec:	617b      	str	r3, [r7, #20]
    args[1] = mp_const_none; // TODO should be globals
    ccee:	4b09      	ldr	r3, [pc, #36]	; (cd14 <mp_import_name+0x3c>)
    ccf0:	61bb      	str	r3, [r7, #24]
    args[2] = mp_const_none; // TODO should be locals
    ccf2:	4b08      	ldr	r3, [pc, #32]	; (cd14 <mp_import_name+0x3c>)
    ccf4:	61fb      	str	r3, [r7, #28]
    args[3] = fromlist;
    ccf6:	68bb      	ldr	r3, [r7, #8]
    ccf8:	623b      	str	r3, [r7, #32]
    args[4] = level;
    ccfa:	687b      	ldr	r3, [r7, #4]
    ccfc:	627b      	str	r3, [r7, #36]	; 0x24

    // TODO lookup __import__ and call that instead of going straight to builtin implementation
    return mp_builtin___import__(5, args);
    ccfe:	f107 0314 	add.w	r3, r7, #20
    cd02:	4619      	mov	r1, r3
    cd04:	2005      	movs	r0, #5
    cd06:	f00b fdfd 	bl	18904 <mp_builtin___import__>
    cd0a:	4603      	mov	r3, r0
}
    cd0c:	4618      	mov	r0, r3
    cd0e:	3728      	adds	r7, #40	; 0x28
    cd10:	46bd      	mov	sp, r7
    cd12:	bd80      	pop	{r7, pc}
    cd14:	000234d4 	.word	0x000234d4

0000cd18 <mp_import_from>:

mp_obj_t mp_import_from(mp_obj_t module, qstr name) {
    cd18:	b5b0      	push	{r4, r5, r7, lr}
    cd1a:	b08a      	sub	sp, #40	; 0x28
    cd1c:	af00      	add	r7, sp, #0
    cd1e:	6078      	str	r0, [r7, #4]
    cd20:	6039      	str	r1, [r7, #0]
    DEBUG_printf("import from %p %s\n", module, qstr_str(name));

    mp_obj_t dest[2];

    mp_load_method_maybe(module, name, dest);
    cd22:	f107 0310 	add.w	r3, r7, #16
    cd26:	461a      	mov	r2, r3
    cd28:	6839      	ldr	r1, [r7, #0]
    cd2a:	6878      	ldr	r0, [r7, #4]
    cd2c:	f7ff fd30 	bl	c790 <mp_load_method_maybe>

    if (dest[1] != MP_OBJ_NULL) {
    cd30:	697b      	ldr	r3, [r7, #20]
    cd32:	2b00      	cmp	r3, #0
    cd34:	d00a      	beq.n	cd4c <mp_import_from+0x34>
    cd36:	e000      	b.n	cd3a <mp_import_from+0x22>

    #if MICROPY_ENABLE_EXTERNAL_IMPORT

    // See if it's a package, then can try FS import
    if (!mp_obj_is_package(module)) {
        goto import_error;
    cd38:	bf00      	nop
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ImportError, "cannot import name %q", name));
    cd3a:	683a      	ldr	r2, [r7, #0]
    cd3c:	4933      	ldr	r1, [pc, #204]	; (ce0c <mp_import_from+0xf4>)
    cd3e:	4834      	ldr	r0, [pc, #208]	; (ce10 <mp_import_from+0xf8>)
    cd40:	f002 fcc0 	bl	f6c4 <mp_obj_new_exception_msg_varg>
    cd44:	4603      	mov	r3, r0
    cd46:	4618      	mov	r0, r3
    cd48:	f7f3 faca 	bl	2e0 <nlr_jump>
    if (dest[0] != MP_OBJ_NULL) {
    cd4c:	693b      	ldr	r3, [r7, #16]
    cd4e:	2b00      	cmp	r3, #0
    cd50:	d001      	beq.n	cd56 <mp_import_from+0x3e>
        return dest[0];
    cd52:	693b      	ldr	r3, [r7, #16]
    cd54:	e055      	b.n	ce02 <mp_import_from+0xea>
    if (!mp_obj_is_package(module)) {
    cd56:	6878      	ldr	r0, [r7, #4]
    cd58:	f00b fd1e 	bl	18798 <mp_obj_is_package>
    cd5c:	4603      	mov	r3, r0
    cd5e:	f083 0301 	eor.w	r3, r3, #1
    cd62:	b2db      	uxtb	r3, r3
    cd64:	2b00      	cmp	r3, #0
    cd66:	d1e7      	bne.n	cd38 <mp_import_from+0x20>
    }

    mp_load_method_maybe(module, MP_QSTR___name__, dest);
    cd68:	f107 0310 	add.w	r3, r7, #16
    cd6c:	461a      	mov	r2, r3
    cd6e:	211d      	movs	r1, #29
    cd70:	6878      	ldr	r0, [r7, #4]
    cd72:	f7ff fd0d 	bl	c790 <mp_load_method_maybe>
    size_t pkg_name_len;
    const char *pkg_name = mp_obj_str_get_data(dest[0], &pkg_name_len);
    cd76:	693b      	ldr	r3, [r7, #16]
    cd78:	f107 020c 	add.w	r2, r7, #12
    cd7c:	4611      	mov	r1, r2
    cd7e:	4618      	mov	r0, r3
    cd80:	f008 fd36 	bl	157f0 <mp_obj_str_get_data>
    cd84:	6278      	str	r0, [r7, #36]	; 0x24

    const uint dot_name_len = pkg_name_len + 1 + qstr_len(name);
    cd86:	6838      	ldr	r0, [r7, #0]
    cd88:	f7f4 faee 	bl	1368 <qstr_len>
    cd8c:	4602      	mov	r2, r0
    cd8e:	68fb      	ldr	r3, [r7, #12]
    cd90:	4413      	add	r3, r2
    cd92:	3301      	adds	r3, #1
    cd94:	623b      	str	r3, [r7, #32]
    char *dot_name = mp_local_alloc(dot_name_len);
    cd96:	6a3b      	ldr	r3, [r7, #32]
    cd98:	3307      	adds	r3, #7
    cd9a:	3307      	adds	r3, #7
    cd9c:	08db      	lsrs	r3, r3, #3
    cd9e:	00db      	lsls	r3, r3, #3
    cda0:	ebad 0d03 	sub.w	sp, sp, r3
    cda4:	466b      	mov	r3, sp
    cda6:	3307      	adds	r3, #7
    cda8:	08db      	lsrs	r3, r3, #3
    cdaa:	00db      	lsls	r3, r3, #3
    cdac:	61fb      	str	r3, [r7, #28]
    memcpy(dot_name, pkg_name, pkg_name_len);
    cdae:	68fb      	ldr	r3, [r7, #12]
    cdb0:	461a      	mov	r2, r3
    cdb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
    cdb4:	69f8      	ldr	r0, [r7, #28]
    cdb6:	f00f ffeb 	bl	1cd90 <memcpy>
    dot_name[pkg_name_len] = '.';
    cdba:	68fb      	ldr	r3, [r7, #12]
    cdbc:	69fa      	ldr	r2, [r7, #28]
    cdbe:	4413      	add	r3, r2
    cdc0:	222e      	movs	r2, #46	; 0x2e
    cdc2:	701a      	strb	r2, [r3, #0]
    memcpy(dot_name + pkg_name_len + 1, qstr_str(name), qstr_len(name));
    cdc4:	68fb      	ldr	r3, [r7, #12]
    cdc6:	3301      	adds	r3, #1
    cdc8:	69fa      	ldr	r2, [r7, #28]
    cdca:	18d4      	adds	r4, r2, r3
    cdcc:	6838      	ldr	r0, [r7, #0]
    cdce:	f7f4 fadb 	bl	1388 <qstr_str>
    cdd2:	4605      	mov	r5, r0
    cdd4:	6838      	ldr	r0, [r7, #0]
    cdd6:	f7f4 fac7 	bl	1368 <qstr_len>
    cdda:	4603      	mov	r3, r0
    cddc:	461a      	mov	r2, r3
    cdde:	4629      	mov	r1, r5
    cde0:	4620      	mov	r0, r4
    cde2:	f00f ffd5 	bl	1cd90 <memcpy>
    qstr dot_name_q = qstr_from_strn(dot_name, dot_name_len);
    cde6:	6a39      	ldr	r1, [r7, #32]
    cde8:	69f8      	ldr	r0, [r7, #28]
    cdea:	f7f4 f9f1 	bl	11d0 <qstr_from_strn>
    cdee:	61b8      	str	r0, [r7, #24]
    mp_local_free(dot_name);
    cdf0:	69f8      	ldr	r0, [r7, #28]
    cdf2:	f7fe fb5b 	bl	b4ac <mp_local_free>

    // For fromlist, pass sentinel "non empty" value to force returning of leaf module
    return mp_import_name(dot_name_q, mp_const_true, MP_OBJ_NEW_SMALL_INT(0));
    cdf6:	2201      	movs	r2, #1
    cdf8:	4906      	ldr	r1, [pc, #24]	; (ce14 <mp_import_from+0xfc>)
    cdfa:	69b8      	ldr	r0, [r7, #24]
    cdfc:	f7ff ff6c 	bl	ccd8 <mp_import_name>
    ce00:	4603      	mov	r3, r0

    // Package import not supported with external imports disabled
    goto import_error;

    #endif
}
    ce02:	4618      	mov	r0, r3
    ce04:	3728      	adds	r7, #40	; 0x28
    ce06:	46bd      	mov	sp, r7
    ce08:	bdb0      	pop	{r4, r5, r7, pc}
    ce0a:	bf00      	nop
    ce0c:	00021890 	.word	0x00021890
    ce10:	000224d8 	.word	0x000224d8
    ce14:	00021c60 	.word	0x00021c60

0000ce18 <mp_import_all>:

void mp_import_all(mp_obj_t module) {
    ce18:	b580      	push	{r7, lr}
    ce1a:	b086      	sub	sp, #24
    ce1c:	af00      	add	r7, sp, #0
    ce1e:	6078      	str	r0, [r7, #4]
    DEBUG_printf("import all %p\n", module);

    // TODO: Support __all__
    mp_map_t *map = &mp_obj_module_get_globals(module)->map;
    ce20:	6878      	ldr	r0, [r7, #4]
    ce22:	f7fe fb37 	bl	b494 <mp_obj_module_get_globals>
    ce26:	4603      	mov	r3, r0
    ce28:	3304      	adds	r3, #4
    ce2a:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < map->alloc; i++) {
    ce2c:	2300      	movs	r3, #0
    ce2e:	617b      	str	r3, [r7, #20]
    ce30:	e02b      	b.n	ce8a <mp_import_all+0x72>
        if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    ce32:	6979      	ldr	r1, [r7, #20]
    ce34:	6938      	ldr	r0, [r7, #16]
    ce36:	f7fe faeb 	bl	b410 <MP_MAP_SLOT_IS_FILLED>
    ce3a:	4603      	mov	r3, r0
    ce3c:	2b00      	cmp	r3, #0
    ce3e:	d021      	beq.n	ce84 <mp_import_all+0x6c>
            // Entry in module global scope may be generated programmatically
            // (and thus be not a qstr for longer names). Avoid turning it in
            // qstr if it has '_' and was used exactly to save memory.
            const char *name = mp_obj_str_get_str(map->table[i].key);
    ce40:	693b      	ldr	r3, [r7, #16]
    ce42:	689a      	ldr	r2, [r3, #8]
    ce44:	697b      	ldr	r3, [r7, #20]
    ce46:	00db      	lsls	r3, r3, #3
    ce48:	4413      	add	r3, r2
    ce4a:	681b      	ldr	r3, [r3, #0]
    ce4c:	4618      	mov	r0, r3
    ce4e:	f008 fc97 	bl	15780 <mp_obj_str_get_str>
    ce52:	60f8      	str	r0, [r7, #12]
            if (*name != '_') {
    ce54:	68fb      	ldr	r3, [r7, #12]
    ce56:	781b      	ldrb	r3, [r3, #0]
    ce58:	2b5f      	cmp	r3, #95	; 0x5f
    ce5a:	d013      	beq.n	ce84 <mp_import_all+0x6c>
                qstr qname = mp_obj_str_get_qstr(map->table[i].key);
    ce5c:	693b      	ldr	r3, [r7, #16]
    ce5e:	689a      	ldr	r2, [r3, #8]
    ce60:	697b      	ldr	r3, [r7, #20]
    ce62:	00db      	lsls	r3, r3, #3
    ce64:	4413      	add	r3, r2
    ce66:	681b      	ldr	r3, [r3, #0]
    ce68:	4618      	mov	r0, r3
    ce6a:	f008 fc5b 	bl	15724 <mp_obj_str_get_qstr>
    ce6e:	60b8      	str	r0, [r7, #8]
                mp_store_name(qname, map->table[i].value);
    ce70:	693b      	ldr	r3, [r7, #16]
    ce72:	689a      	ldr	r2, [r3, #8]
    ce74:	697b      	ldr	r3, [r7, #20]
    ce76:	00db      	lsls	r3, r3, #3
    ce78:	4413      	add	r3, r2
    ce7a:	685b      	ldr	r3, [r3, #4]
    ce7c:	4619      	mov	r1, r3
    ce7e:	68b8      	ldr	r0, [r7, #8]
    ce80:	f7fe fc10 	bl	b6a4 <mp_store_name>
    for (size_t i = 0; i < map->alloc; i++) {
    ce84:	697b      	ldr	r3, [r7, #20]
    ce86:	3301      	adds	r3, #1
    ce88:	617b      	str	r3, [r7, #20]
    ce8a:	693b      	ldr	r3, [r7, #16]
    ce8c:	685a      	ldr	r2, [r3, #4]
    ce8e:	697b      	ldr	r3, [r7, #20]
    ce90:	429a      	cmp	r2, r3
    ce92:	d8ce      	bhi.n	ce32 <mp_import_all+0x1a>
            }
        }
    }
}
    ce94:	bf00      	nop
    ce96:	3718      	adds	r7, #24
    ce98:	46bd      	mov	sp, r7
    ce9a:	bd80      	pop	{r7, pc}

0000ce9c <mp_parse_compile_execute>:

#if MICROPY_ENABLE_COMPILER

// this is implemented in this file so it can optimise access to locals/globals
mp_obj_t mp_parse_compile_execute(mp_lexer_t *lex, mp_parse_input_kind_t parse_input_kind, mp_obj_dict_t *globals, mp_obj_dict_t *locals) {
    ce9c:	b580      	push	{r7, lr}
    ce9e:	b098      	sub	sp, #96	; 0x60
    cea0:	af00      	add	r7, sp, #0
    cea2:	60f8      	str	r0, [r7, #12]
    cea4:	60b9      	str	r1, [r7, #8]
    cea6:	607a      	str	r2, [r7, #4]
    cea8:	603b      	str	r3, [r7, #0]
    // save context
    mp_obj_dict_t *volatile old_globals = mp_globals_get();
    ceaa:	f7fe fb4d 	bl	b548 <mp_globals_get>
    ceae:	4603      	mov	r3, r0
    ceb0:	653b      	str	r3, [r7, #80]	; 0x50
    mp_obj_dict_t *volatile old_locals = mp_locals_get();
    ceb2:	f7fe fb2d 	bl	b510 <mp_locals_get>
    ceb6:	4603      	mov	r3, r0
    ceb8:	64fb      	str	r3, [r7, #76]	; 0x4c

    // set new context
    mp_globals_set(globals);
    ceba:	6878      	ldr	r0, [r7, #4]
    cebc:	f7fe fb50 	bl	b560 <mp_globals_set>
    mp_locals_set(locals);
    cec0:	6838      	ldr	r0, [r7, #0]
    cec2:	f7fe fb31 	bl	b528 <mp_locals_set>

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
    cec6:	f107 031c 	add.w	r3, r7, #28
    ceca:	4618      	mov	r0, r3
    cecc:	f7f3 f9f6 	bl	2bc <nlr_push>
    ced0:	4603      	mov	r3, r0
    ced2:	2b00      	cmp	r3, #0
    ced4:	d121      	bne.n	cf1a <mp_parse_compile_execute+0x7e>
        qstr source_name = lex->source_name;
    ced6:	68fb      	ldr	r3, [r7, #12]
    ced8:	681b      	ldr	r3, [r3, #0]
    ceda:	65fb      	str	r3, [r7, #92]	; 0x5c
        mp_parse_tree_t parse_tree = mp_parse(lex, parse_input_kind);
    cedc:	f107 0314 	add.w	r3, r7, #20
    cee0:	68ba      	ldr	r2, [r7, #8]
    cee2:	68f9      	ldr	r1, [r7, #12]
    cee4:	4618      	mov	r0, r3
    cee6:	f7f7 faed 	bl	44c4 <mp_parse>
        mp_obj_t module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, false);
    ceea:	f107 0014 	add.w	r0, r7, #20
    ceee:	2300      	movs	r3, #0
    cef0:	2200      	movs	r2, #0
    cef2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    cef4:	f7fc fce0 	bl	98b8 <mp_compile>
    cef8:	65b8      	str	r0, [r7, #88]	; 0x58
        if (MICROPY_PY_BUILTINS_COMPILE && globals == NULL) {
            // for compile only, return value is the module function
            ret = module_fun;
        } else {
            // execute module function and get return value
            ret = mp_call_function_0(module_fun);
    cefa:	6db8      	ldr	r0, [r7, #88]	; 0x58
    cefc:	f7fe ff74 	bl	bde8 <mp_call_function_0>
    cf00:	6578      	str	r0, [r7, #84]	; 0x54
        }

        // finish nlr block, restore context and return value
        nlr_pop();
    cf02:	f7f3 f9c9 	bl	298 <nlr_pop>
        mp_globals_set(old_globals);
    cf06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    cf08:	4618      	mov	r0, r3
    cf0a:	f7fe fb29 	bl	b560 <mp_globals_set>
        mp_locals_set(old_locals);
    cf0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cf10:	4618      	mov	r0, r3
    cf12:	f7fe fb09 	bl	b528 <mp_locals_set>
        return ret;
    cf16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    cf18:	e00b      	b.n	cf32 <mp_parse_compile_execute+0x96>
    } else {
        // exception; restore context and re-raise same exception
        mp_globals_set(old_globals);
    cf1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    cf1c:	4618      	mov	r0, r3
    cf1e:	f7fe fb1f 	bl	b560 <mp_globals_set>
        mp_locals_set(old_locals);
    cf22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cf24:	4618      	mov	r0, r3
    cf26:	f7fe faff 	bl	b528 <mp_locals_set>
        nlr_jump(nlr.ret_val);
    cf2a:	6a3b      	ldr	r3, [r7, #32]
    cf2c:	4618      	mov	r0, r3
    cf2e:	f7f3 f9d7 	bl	2e0 <nlr_jump>
    }
}
    cf32:	4618      	mov	r0, r3
    cf34:	3760      	adds	r7, #96	; 0x60
    cf36:	46bd      	mov	sp, r7
    cf38:	bd80      	pop	{r7, pc}
    cf3a:	bf00      	nop

0000cf3c <m_malloc_fail>:

#endif // MICROPY_ENABLE_COMPILER

NORETURN void m_malloc_fail(size_t num_bytes) {
    cf3c:	b580      	push	{r7, lr}
    cf3e:	b082      	sub	sp, #8
    cf40:	af00      	add	r7, sp, #0
    cf42:	6078      	str	r0, [r7, #4]
    DEBUG_printf("memory allocation failed, allocating %u bytes\n", (uint)num_bytes);
    #if MICROPY_ENABLE_GC
    if (gc_is_locked()) {
    cf44:	f7f3 fb84 	bl	650 <gc_is_locked>
    cf48:	4603      	mov	r3, r0
    cf4a:	2b00      	cmp	r3, #0
    cf4c:	d003      	beq.n	cf56 <m_malloc_fail+0x1a>
        mp_raise_msg(&mp_type_MemoryError, "memory allocation failed, heap is locked");
    cf4e:	4906      	ldr	r1, [pc, #24]	; (cf68 <m_malloc_fail+0x2c>)
    cf50:	4806      	ldr	r0, [pc, #24]	; (cf6c <m_malloc_fail+0x30>)
    cf52:	f000 f80f 	bl	cf74 <mp_raise_msg>
    }
    #endif
    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_MemoryError,
    cf56:	687a      	ldr	r2, [r7, #4]
    cf58:	4905      	ldr	r1, [pc, #20]	; (cf70 <m_malloc_fail+0x34>)
    cf5a:	4804      	ldr	r0, [pc, #16]	; (cf6c <m_malloc_fail+0x30>)
    cf5c:	f002 fbb2 	bl	f6c4 <mp_obj_new_exception_msg_varg>
    cf60:	4603      	mov	r3, r0
    cf62:	4618      	mov	r0, r3
    cf64:	f7f3 f9bc 	bl	2e0 <nlr_jump>
    cf68:	000218a8 	.word	0x000218a8
    cf6c:	000225c8 	.word	0x000225c8
    cf70:	000218d4 	.word	0x000218d4

0000cf74 <mp_raise_msg>:
        "memory allocation failed, allocating %u bytes", (uint)num_bytes));
}

NORETURN void mp_raise_msg(const mp_obj_type_t *exc_type, const char *msg) {
    cf74:	b580      	push	{r7, lr}
    cf76:	b082      	sub	sp, #8
    cf78:	af00      	add	r7, sp, #0
    cf7a:	6078      	str	r0, [r7, #4]
    cf7c:	6039      	str	r1, [r7, #0]
    if (msg == NULL) {
    cf7e:	683b      	ldr	r3, [r7, #0]
    cf80:	2b00      	cmp	r3, #0
    cf82:	d106      	bne.n	cf92 <mp_raise_msg+0x1e>
        nlr_raise(mp_obj_new_exception(exc_type));
    cf84:	6878      	ldr	r0, [r7, #4]
    cf86:	f002 faf9 	bl	f57c <mp_obj_new_exception>
    cf8a:	4603      	mov	r3, r0
    cf8c:	4618      	mov	r0, r3
    cf8e:	f7f3 f9a7 	bl	2e0 <nlr_jump>
    } else {
        nlr_raise(mp_obj_new_exception_msg(exc_type, msg));
    cf92:	6839      	ldr	r1, [r7, #0]
    cf94:	6878      	ldr	r0, [r7, #4]
    cf96:	f002 fb35 	bl	f604 <mp_obj_new_exception_msg>
    cf9a:	4603      	mov	r3, r0
    cf9c:	4618      	mov	r0, r3
    cf9e:	f7f3 f99f 	bl	2e0 <nlr_jump>
    cfa2:	bf00      	nop

0000cfa4 <mp_raise_ValueError>:
    }
}

NORETURN void mp_raise_ValueError(const char *msg) {
    cfa4:	b580      	push	{r7, lr}
    cfa6:	b082      	sub	sp, #8
    cfa8:	af00      	add	r7, sp, #0
    cfaa:	6078      	str	r0, [r7, #4]
    mp_raise_msg(&mp_type_ValueError, msg);
    cfac:	6879      	ldr	r1, [r7, #4]
    cfae:	4801      	ldr	r0, [pc, #4]	; (cfb4 <mp_raise_ValueError+0x10>)
    cfb0:	f7ff ffe0 	bl	cf74 <mp_raise_msg>
    cfb4:	000227a8 	.word	0x000227a8

0000cfb8 <mp_raise_TypeError>:
}

NORETURN void mp_raise_TypeError(const char *msg) {
    cfb8:	b580      	push	{r7, lr}
    cfba:	b082      	sub	sp, #8
    cfbc:	af00      	add	r7, sp, #0
    cfbe:	6078      	str	r0, [r7, #4]
    mp_raise_msg(&mp_type_TypeError, msg);
    cfc0:	6879      	ldr	r1, [r7, #4]
    cfc2:	4801      	ldr	r0, [pc, #4]	; (cfc8 <mp_raise_TypeError+0x10>)
    cfc4:	f7ff ffd6 	bl	cf74 <mp_raise_msg>
    cfc8:	0002276c 	.word	0x0002276c

0000cfcc <mp_raise_OSError>:
}

NORETURN void mp_raise_OSError(int errno_) {
    cfcc:	b580      	push	{r7, lr}
    cfce:	b082      	sub	sp, #8
    cfd0:	af00      	add	r7, sp, #0
    cfd2:	6078      	str	r0, [r7, #4]
    nlr_raise(mp_obj_new_exception_arg1(&mp_type_OSError, MP_OBJ_NEW_SMALL_INT(errno_)));
    cfd4:	687b      	ldr	r3, [r7, #4]
    cfd6:	005b      	lsls	r3, r3, #1
    cfd8:	f043 0301 	orr.w	r3, r3, #1
    cfdc:	4619      	mov	r1, r3
    cfde:	4803      	ldr	r0, [pc, #12]	; (cfec <mp_raise_OSError+0x20>)
    cfe0:	f002 fada 	bl	f598 <mp_obj_new_exception_arg1>
    cfe4:	4603      	mov	r3, r0
    cfe6:	4618      	mov	r0, r3
    cfe8:	f7f3 f97a 	bl	2e0 <nlr_jump>
    cfec:	00022640 	.word	0x00022640

0000cff0 <mp_raise_NotImplementedError>:
}

NORETURN void mp_raise_NotImplementedError(const char *msg) {
    cff0:	b580      	push	{r7, lr}
    cff2:	b082      	sub	sp, #8
    cff4:	af00      	add	r7, sp, #0
    cff6:	6078      	str	r0, [r7, #4]
    mp_raise_msg(&mp_type_NotImplementedError, msg);
    cff8:	6879      	ldr	r1, [r7, #4]
    cffa:	4801      	ldr	r0, [pc, #4]	; (d000 <mp_raise_NotImplementedError+0x10>)
    cffc:	f7ff ffba 	bl	cf74 <mp_raise_msg>
    d000:	000226b8 	.word	0x000226b8

0000d004 <mp_call_function_1_protected>:
 * THE SOFTWARE.
 */

#include "py/runtime.h"

mp_obj_t mp_call_function_1_protected(mp_obj_t fun, mp_obj_t arg) {
    d004:	b580      	push	{r7, lr}
    d006:	b090      	sub	sp, #64	; 0x40
    d008:	af00      	add	r7, sp, #0
    d00a:	6078      	str	r0, [r7, #4]
    d00c:	6039      	str	r1, [r7, #0]
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
    d00e:	f107 030c 	add.w	r3, r7, #12
    d012:	4618      	mov	r0, r3
    d014:	f7f3 f952 	bl	2bc <nlr_push>
    d018:	4603      	mov	r3, r0
    d01a:	2b00      	cmp	r3, #0
    d01c:	d108      	bne.n	d030 <mp_call_function_1_protected+0x2c>
        mp_obj_t ret = mp_call_function_1(fun, arg);
    d01e:	6839      	ldr	r1, [r7, #0]
    d020:	6878      	ldr	r0, [r7, #4]
    d022:	f7fe fef1 	bl	be08 <mp_call_function_1>
    d026:	63f8      	str	r0, [r7, #60]	; 0x3c
        nlr_pop();
    d028:	f7f3 f936 	bl	298 <nlr_pop>
        return ret;
    d02c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d02e:	e005      	b.n	d03c <mp_call_function_1_protected+0x38>
    } else {
        mp_obj_print_exception(&mp_plat_print, MP_OBJ_FROM_PTR(nlr.ret_val));
    d030:	693b      	ldr	r3, [r7, #16]
    d032:	4619      	mov	r1, r3
    d034:	4803      	ldr	r0, [pc, #12]	; (d044 <mp_call_function_1_protected+0x40>)
    d036:	f000 fc9b 	bl	d970 <mp_obj_print_exception>
        return MP_OBJ_NULL;
    d03a:	2300      	movs	r3, #0
    }
}
    d03c:	4618      	mov	r0, r3
    d03e:	3740      	adds	r7, #64	; 0x40
    d040:	46bd      	mov	sp, r7
    d042:	bd80      	pop	{r7, pc}
    d044:	0001f884 	.word	0x0001f884

0000d048 <mp_call_function_2_protected>:

mp_obj_t mp_call_function_2_protected(mp_obj_t fun, mp_obj_t arg1, mp_obj_t arg2) {
    d048:	b580      	push	{r7, lr}
    d04a:	b092      	sub	sp, #72	; 0x48
    d04c:	af00      	add	r7, sp, #0
    d04e:	60f8      	str	r0, [r7, #12]
    d050:	60b9      	str	r1, [r7, #8]
    d052:	607a      	str	r2, [r7, #4]
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
    d054:	f107 0314 	add.w	r3, r7, #20
    d058:	4618      	mov	r0, r3
    d05a:	f7f3 f92f 	bl	2bc <nlr_push>
    d05e:	4603      	mov	r3, r0
    d060:	2b00      	cmp	r3, #0
    d062:	d109      	bne.n	d078 <mp_call_function_2_protected+0x30>
        mp_obj_t ret = mp_call_function_2(fun, arg1, arg2);
    d064:	687a      	ldr	r2, [r7, #4]
    d066:	68b9      	ldr	r1, [r7, #8]
    d068:	68f8      	ldr	r0, [r7, #12]
    d06a:	f7fe fedd 	bl	be28 <mp_call_function_2>
    d06e:	6478      	str	r0, [r7, #68]	; 0x44
        nlr_pop();
    d070:	f7f3 f912 	bl	298 <nlr_pop>
        return ret;
    d074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d076:	e005      	b.n	d084 <mp_call_function_2_protected+0x3c>
    } else {
        mp_obj_print_exception(&mp_plat_print, MP_OBJ_FROM_PTR(nlr.ret_val));
    d078:	69bb      	ldr	r3, [r7, #24]
    d07a:	4619      	mov	r1, r3
    d07c:	4803      	ldr	r0, [pc, #12]	; (d08c <mp_call_function_2_protected+0x44>)
    d07e:	f000 fc77 	bl	d970 <mp_obj_print_exception>
        return MP_OBJ_NULL;
    d082:	2300      	movs	r3, #0
    }
}
    d084:	4618      	mov	r0, r3
    d086:	3748      	adds	r7, #72	; 0x48
    d088:	46bd      	mov	sp, r7
    d08a:	bd80      	pop	{r7, pc}
    d08c:	0001f884 	.word	0x0001f884

0000d090 <mp_arg_check_num_sig>:
#include <stdlib.h>
#include <assert.h>

#include "py/runtime.h"

void mp_arg_check_num_sig(size_t n_args, size_t n_kw, uint32_t sig) {
    d090:	b580      	push	{r7, lr}
    d092:	b088      	sub	sp, #32
    d094:	af00      	add	r7, sp, #0
    d096:	60f8      	str	r0, [r7, #12]
    d098:	60b9      	str	r1, [r7, #8]
    d09a:	607a      	str	r2, [r7, #4]
    // TODO maybe take the function name as an argument so we can print nicer error messages

    // The reverse of MP_OBJ_FUN_MAKE_SIG
    bool takes_kw = sig & 1;
    d09c:	687b      	ldr	r3, [r7, #4]
    d09e:	f003 0301 	and.w	r3, r3, #1
    d0a2:	2b00      	cmp	r3, #0
    d0a4:	bf14      	ite	ne
    d0a6:	2301      	movne	r3, #1
    d0a8:	2300      	moveq	r3, #0
    d0aa:	77fb      	strb	r3, [r7, #31]
    size_t n_args_min = sig >> 17;
    d0ac:	687b      	ldr	r3, [r7, #4]
    d0ae:	0c5b      	lsrs	r3, r3, #17
    d0b0:	61bb      	str	r3, [r7, #24]
    size_t n_args_max = (sig >> 1) & 0xffff;
    d0b2:	687b      	ldr	r3, [r7, #4]
    d0b4:	085b      	lsrs	r3, r3, #1
    d0b6:	b29b      	uxth	r3, r3
    d0b8:	617b      	str	r3, [r7, #20]

    if (n_kw && !takes_kw) {
    d0ba:	68bb      	ldr	r3, [r7, #8]
    d0bc:	2b00      	cmp	r3, #0
    d0be:	d007      	beq.n	d0d0 <mp_arg_check_num_sig+0x40>
    d0c0:	7ffb      	ldrb	r3, [r7, #31]
    d0c2:	f083 0301 	eor.w	r3, r3, #1
    d0c6:	b2db      	uxtb	r3, r3
    d0c8:	2b00      	cmp	r3, #0
    d0ca:	d001      	beq.n	d0d0 <mp_arg_check_num_sig+0x40>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_arg_error_terse_mismatch();
    d0cc:	f000 f8e8 	bl	d2a0 <mp_arg_error_terse_mismatch>
        } else {
            mp_raise_TypeError("function doesn't take keyword arguments");
        }
    }

    if (n_args_min == n_args_max) {
    d0d0:	69ba      	ldr	r2, [r7, #24]
    d0d2:	697b      	ldr	r3, [r7, #20]
    d0d4:	429a      	cmp	r2, r3
    d0d6:	d105      	bne.n	d0e4 <mp_arg_check_num_sig+0x54>
        if (n_args != n_args_min) {
    d0d8:	68fa      	ldr	r2, [r7, #12]
    d0da:	69bb      	ldr	r3, [r7, #24]
    d0dc:	429a      	cmp	r2, r3
    d0de:	d00d      	beq.n	d0fc <mp_arg_check_num_sig+0x6c>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_arg_error_terse_mismatch();
    d0e0:	f000 f8de 	bl	d2a0 <mp_arg_error_terse_mismatch>
                    "function takes %d positional arguments but %d were given",
                    n_args_min, n_args));
            }
        }
    } else {
        if (n_args < n_args_min) {
    d0e4:	68fa      	ldr	r2, [r7, #12]
    d0e6:	69bb      	ldr	r3, [r7, #24]
    d0e8:	429a      	cmp	r2, r3
    d0ea:	d201      	bcs.n	d0f0 <mp_arg_check_num_sig+0x60>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_arg_error_terse_mismatch();
    d0ec:	f000 f8d8 	bl	d2a0 <mp_arg_error_terse_mismatch>
            } else {
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "function missing %d required positional arguments",
                    n_args_min - n_args));
            }
        } else if (n_args > n_args_max) {
    d0f0:	68fa      	ldr	r2, [r7, #12]
    d0f2:	697b      	ldr	r3, [r7, #20]
    d0f4:	429a      	cmp	r2, r3
    d0f6:	d901      	bls.n	d0fc <mp_arg_check_num_sig+0x6c>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_arg_error_terse_mismatch();
    d0f8:	f000 f8d2 	bl	d2a0 <mp_arg_error_terse_mismatch>
                    "function expected at most %d arguments, got %d",
                    n_args_max, n_args));
            }
        }
    }
}
    d0fc:	bf00      	nop
    d0fe:	3720      	adds	r7, #32
    d100:	46bd      	mov	sp, r7
    d102:	bd80      	pop	{r7, pc}

0000d104 <mp_arg_parse_all>:

void mp_arg_parse_all(size_t n_pos, const mp_obj_t *pos, mp_map_t *kws, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals) {
    d104:	b590      	push	{r4, r7, lr}
    d106:	b08b      	sub	sp, #44	; 0x2c
    d108:	af00      	add	r7, sp, #0
    d10a:	60f8      	str	r0, [r7, #12]
    d10c:	60b9      	str	r1, [r7, #8]
    d10e:	607a      	str	r2, [r7, #4]
    d110:	603b      	str	r3, [r7, #0]
    size_t pos_found = 0, kws_found = 0;
    d112:	2300      	movs	r3, #0
    d114:	627b      	str	r3, [r7, #36]	; 0x24
    d116:	2300      	movs	r3, #0
    d118:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < n_allowed; i++) {
    d11a:	2300      	movs	r3, #0
    d11c:	61fb      	str	r3, [r7, #28]
    d11e:	e07e      	b.n	d21e <mp_arg_parse_all+0x11a>
        mp_obj_t given_arg;
        if (i < n_pos) {
    d120:	69fa      	ldr	r2, [r7, #28]
    d122:	68fb      	ldr	r3, [r7, #12]
    d124:	429a      	cmp	r2, r3
    d126:	d212      	bcs.n	d14e <mp_arg_parse_all+0x4a>
            if (allowed[i].flags & MP_ARG_KW_ONLY) {
    d128:	69fb      	ldr	r3, [r7, #28]
    d12a:	00db      	lsls	r3, r3, #3
    d12c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d12e:	4413      	add	r3, r2
    d130:	885b      	ldrh	r3, [r3, #2]
    d132:	f403 7300 	and.w	r3, r3, #512	; 0x200
    d136:	2b00      	cmp	r3, #0
    d138:	d17b      	bne.n	d232 <mp_arg_parse_all+0x12e>
                goto extra_positional;
            }
            pos_found++;
    d13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d13c:	3301      	adds	r3, #1
    d13e:	627b      	str	r3, [r7, #36]	; 0x24
            given_arg = pos[i];
    d140:	69fb      	ldr	r3, [r7, #28]
    d142:	009b      	lsls	r3, r3, #2
    d144:	68ba      	ldr	r2, [r7, #8]
    d146:	4413      	add	r3, r2
    d148:	681b      	ldr	r3, [r3, #0]
    d14a:	61bb      	str	r3, [r7, #24]
    d14c:	e02c      	b.n	d1a8 <mp_arg_parse_all+0xa4>
        } else {
            mp_map_elem_t *kw = mp_map_lookup(kws, MP_OBJ_NEW_QSTR(allowed[i].qst), MP_MAP_LOOKUP);
    d14e:	69fb      	ldr	r3, [r7, #28]
    d150:	00db      	lsls	r3, r3, #3
    d152:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d154:	4413      	add	r3, r2
    d156:	881b      	ldrh	r3, [r3, #0]
    d158:	009b      	lsls	r3, r3, #2
    d15a:	f043 0302 	orr.w	r3, r3, #2
    d15e:	2200      	movs	r2, #0
    d160:	4619      	mov	r1, r3
    d162:	6878      	ldr	r0, [r7, #4]
    d164:	f000 f9ec 	bl	d540 <mp_map_lookup>
    d168:	6178      	str	r0, [r7, #20]
            if (kw == NULL) {
    d16a:	697b      	ldr	r3, [r7, #20]
    d16c:	2b00      	cmp	r3, #0
    d16e:	d115      	bne.n	d19c <mp_arg_parse_all+0x98>
                if (allowed[i].flags & MP_ARG_REQUIRED) {
    d170:	69fb      	ldr	r3, [r7, #28]
    d172:	00db      	lsls	r3, r3, #3
    d174:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d176:	4413      	add	r3, r2
    d178:	885b      	ldrh	r3, [r3, #2]
    d17a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    d17e:	2b00      	cmp	r3, #0
    d180:	d001      	beq.n	d186 <mp_arg_parse_all+0x82>
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        mp_arg_error_terse_mismatch();
    d182:	f000 f88d 	bl	d2a0 <mp_arg_error_terse_mismatch>
                    } else {
                        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                            "'%q' argument required", allowed[i].qst));
                    }
                }
                out_vals[i] = allowed[i].defval;
    d186:	69fb      	ldr	r3, [r7, #28]
    d188:	009b      	lsls	r3, r3, #2
    d18a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d18c:	4413      	add	r3, r2
    d18e:	69fa      	ldr	r2, [r7, #28]
    d190:	00d2      	lsls	r2, r2, #3
    d192:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    d194:	440a      	add	r2, r1
    d196:	6852      	ldr	r2, [r2, #4]
    d198:	601a      	str	r2, [r3, #0]
                continue;
    d19a:	e03d      	b.n	d218 <mp_arg_parse_all+0x114>
            } else {
                kws_found++;
    d19c:	6a3b      	ldr	r3, [r7, #32]
    d19e:	3301      	adds	r3, #1
    d1a0:	623b      	str	r3, [r7, #32]
                given_arg = kw->value;
    d1a2:	697b      	ldr	r3, [r7, #20]
    d1a4:	685b      	ldr	r3, [r3, #4]
    d1a6:	61bb      	str	r3, [r7, #24]
            }
        }
        if ((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_BOOL) {
    d1a8:	69fb      	ldr	r3, [r7, #28]
    d1aa:	00db      	lsls	r3, r3, #3
    d1ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d1ae:	4413      	add	r3, r2
    d1b0:	885b      	ldrh	r3, [r3, #2]
    d1b2:	b2db      	uxtb	r3, r3
    d1b4:	2b01      	cmp	r3, #1
    d1b6:	d109      	bne.n	d1cc <mp_arg_parse_all+0xc8>
            out_vals[i].u_bool = mp_obj_is_true(given_arg);
    d1b8:	69fb      	ldr	r3, [r7, #28]
    d1ba:	009b      	lsls	r3, r3, #2
    d1bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d1be:	18d4      	adds	r4, r2, r3
    d1c0:	69b8      	ldr	r0, [r7, #24]
    d1c2:	f000 fc45 	bl	da50 <mp_obj_is_true>
    d1c6:	4603      	mov	r3, r0
    d1c8:	7023      	strb	r3, [r4, #0]
    d1ca:	e025      	b.n	d218 <mp_arg_parse_all+0x114>
        } else if ((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_INT) {
    d1cc:	69fb      	ldr	r3, [r7, #28]
    d1ce:	00db      	lsls	r3, r3, #3
    d1d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d1d2:	4413      	add	r3, r2
    d1d4:	885b      	ldrh	r3, [r3, #2]
    d1d6:	b2db      	uxtb	r3, r3
    d1d8:	2b02      	cmp	r3, #2
    d1da:	d109      	bne.n	d1f0 <mp_arg_parse_all+0xec>
            out_vals[i].u_int = mp_obj_get_int(given_arg);
    d1dc:	69fb      	ldr	r3, [r7, #28]
    d1de:	009b      	lsls	r3, r3, #2
    d1e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d1e2:	18d4      	adds	r4, r2, r3
    d1e4:	69b8      	ldr	r0, [r7, #24]
    d1e6:	f000 fd33 	bl	dc50 <mp_obj_get_int>
    d1ea:	4603      	mov	r3, r0
    d1ec:	6023      	str	r3, [r4, #0]
    d1ee:	e013      	b.n	d218 <mp_arg_parse_all+0x114>
        } else {
            assert((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_OBJ);
    d1f0:	69fb      	ldr	r3, [r7, #28]
    d1f2:	00db      	lsls	r3, r3, #3
    d1f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d1f6:	4413      	add	r3, r2
    d1f8:	885b      	ldrh	r3, [r3, #2]
    d1fa:	b2db      	uxtb	r3, r3
    d1fc:	2b03      	cmp	r3, #3
    d1fe:	d005      	beq.n	d20c <mp_arg_parse_all+0x108>
    d200:	4b14      	ldr	r3, [pc, #80]	; (d254 <mp_arg_parse_all+0x150>)
    d202:	4a15      	ldr	r2, [pc, #84]	; (d258 <mp_arg_parse_all+0x154>)
    d204:	2170      	movs	r1, #112	; 0x70
    d206:	4815      	ldr	r0, [pc, #84]	; (d25c <mp_arg_parse_all+0x158>)
    d208:	f00e fabc 	bl	1b784 <__assert_func>
            out_vals[i].u_obj = given_arg;
    d20c:	69fb      	ldr	r3, [r7, #28]
    d20e:	009b      	lsls	r3, r3, #2
    d210:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d212:	4413      	add	r3, r2
    d214:	69ba      	ldr	r2, [r7, #24]
    d216:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < n_allowed; i++) {
    d218:	69fb      	ldr	r3, [r7, #28]
    d21a:	3301      	adds	r3, #1
    d21c:	61fb      	str	r3, [r7, #28]
    d21e:	69fa      	ldr	r2, [r7, #28]
    d220:	683b      	ldr	r3, [r7, #0]
    d222:	429a      	cmp	r2, r3
    d224:	f4ff af7c 	bcc.w	d120 <mp_arg_parse_all+0x1c>
        }
    }
    if (pos_found < n_pos) {
    d228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d22a:	68fb      	ldr	r3, [r7, #12]
    d22c:	429a      	cmp	r2, r3
    d22e:	d203      	bcs.n	d238 <mp_arg_parse_all+0x134>
    d230:	e000      	b.n	d234 <mp_arg_parse_all+0x130>
                goto extra_positional;
    d232:	bf00      	nop
        extra_positional:
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_arg_error_terse_mismatch();
    d234:	f000 f834 	bl	d2a0 <mp_arg_error_terse_mismatch>
        } else {
            // TODO better error message
            mp_raise_TypeError("extra positional arguments given");
        }
    }
    if (kws_found < kws->used) {
    d238:	687b      	ldr	r3, [r7, #4]
    d23a:	681b      	ldr	r3, [r3, #0]
    d23c:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d240:	461a      	mov	r2, r3
    d242:	6a3b      	ldr	r3, [r7, #32]
    d244:	429a      	cmp	r2, r3
    d246:	d901      	bls.n	d24c <mp_arg_parse_all+0x148>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_arg_error_terse_mismatch();
    d248:	f000 f82a 	bl	d2a0 <mp_arg_error_terse_mismatch>
        } else {
            // TODO better error message
            mp_raise_TypeError("extra keyword arguments given");
        }
    }
}
    d24c:	bf00      	nop
    d24e:	372c      	adds	r7, #44	; 0x2c
    d250:	46bd      	mov	sp, r7
    d252:	bd90      	pop	{r4, r7, pc}
    d254:	00021960 	.word	0x00021960
    d258:	000219c4 	.word	0x000219c4
    d25c:	00021994 	.word	0x00021994

0000d260 <mp_arg_parse_all_kw_array>:

void mp_arg_parse_all_kw_array(size_t n_pos, size_t n_kw, const mp_obj_t *args, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals) {
    d260:	b580      	push	{r7, lr}
    d262:	b08a      	sub	sp, #40	; 0x28
    d264:	af02      	add	r7, sp, #8
    d266:	60f8      	str	r0, [r7, #12]
    d268:	60b9      	str	r1, [r7, #8]
    d26a:	607a      	str	r2, [r7, #4]
    d26c:	603b      	str	r3, [r7, #0]
    mp_map_t kw_args;
    mp_map_init_fixed_table(&kw_args, n_kw, args + n_pos);
    d26e:	68fb      	ldr	r3, [r7, #12]
    d270:	009b      	lsls	r3, r3, #2
    d272:	687a      	ldr	r2, [r7, #4]
    d274:	441a      	add	r2, r3
    d276:	f107 0314 	add.w	r3, r7, #20
    d27a:	68b9      	ldr	r1, [r7, #8]
    d27c:	4618      	mov	r0, r3
    d27e:	f000 f897 	bl	d3b0 <mp_map_init_fixed_table>
    mp_arg_parse_all(n_pos, args, &kw_args, n_allowed, allowed, out_vals);
    d282:	f107 0214 	add.w	r2, r7, #20
    d286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d288:	9301      	str	r3, [sp, #4]
    d28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d28c:	9300      	str	r3, [sp, #0]
    d28e:	683b      	ldr	r3, [r7, #0]
    d290:	6879      	ldr	r1, [r7, #4]
    d292:	68f8      	ldr	r0, [r7, #12]
    d294:	f7ff ff36 	bl	d104 <mp_arg_parse_all>
}
    d298:	bf00      	nop
    d29a:	3720      	adds	r7, #32
    d29c:	46bd      	mov	sp, r7
    d29e:	bd80      	pop	{r7, pc}

0000d2a0 <mp_arg_error_terse_mismatch>:

NORETURN void mp_arg_error_terse_mismatch(void) {
    d2a0:	b580      	push	{r7, lr}
    d2a2:	af00      	add	r7, sp, #0
    mp_raise_TypeError("argument num/types mismatch");
    d2a4:	4801      	ldr	r0, [pc, #4]	; (d2ac <mp_arg_error_terse_mismatch+0xc>)
    d2a6:	f7ff fe87 	bl	cfb8 <mp_raise_TypeError>
    d2aa:	bf00      	nop
    d2ac:	000219a8 	.word	0x000219a8

0000d2b0 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
    d2b0:	b480      	push	{r7}
    d2b2:	b083      	sub	sp, #12
    d2b4:	af00      	add	r7, sp, #0
    d2b6:	6078      	str	r0, [r7, #4]
    d2b8:	687b      	ldr	r3, [r7, #4]
    d2ba:	f003 0303 	and.w	r3, r3, #3
    d2be:	2b02      	cmp	r3, #2
    d2c0:	bf0c      	ite	eq
    d2c2:	2301      	moveq	r3, #1
    d2c4:	2300      	movne	r3, #0
    d2c6:	b2db      	uxtb	r3, r3
    d2c8:	4618      	mov	r0, r3
    d2ca:	370c      	adds	r7, #12
    d2cc:	46bd      	mov	sp, r7
    d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    d2d2:	4770      	bx	lr

0000d2d4 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    d2d4:	b480      	push	{r7}
    d2d6:	b083      	sub	sp, #12
    d2d8:	af00      	add	r7, sp, #0
    d2da:	6078      	str	r0, [r7, #4]
    d2dc:	687b      	ldr	r3, [r7, #4]
    d2de:	f003 0303 	and.w	r3, r3, #3
    d2e2:	2b00      	cmp	r3, #0
    d2e4:	bf0c      	ite	eq
    d2e6:	2301      	moveq	r3, #1
    d2e8:	2300      	movne	r3, #0
    d2ea:	b2db      	uxtb	r3, r3
    d2ec:	4618      	mov	r0, r3
    d2ee:	370c      	adds	r7, #12
    d2f0:	46bd      	mov	sp, r7
    d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    d2f6:	4770      	bx	lr

0000d2f8 <get_hash_alloc_greater_or_equal_to>:
    17, 23, 29, 37, 47, 59, 73, // *1.25
    97, 127, 167, 223, 293, 389, 521, 691, 919, 1223, 1627, 2161, // *1.33
    3229, 4831, 7243, 10861, 16273, 24407, 36607, 54907, // *1.5
};

STATIC size_t get_hash_alloc_greater_or_equal_to(size_t x) {
    d2f8:	b480      	push	{r7}
    d2fa:	b085      	sub	sp, #20
    d2fc:	af00      	add	r7, sp, #0
    d2fe:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < MP_ARRAY_SIZE(hash_allocation_sizes); i++) {
    d300:	2300      	movs	r3, #0
    d302:	60fb      	str	r3, [r7, #12]
    d304:	e00f      	b.n	d326 <get_hash_alloc_greater_or_equal_to+0x2e>
        if (hash_allocation_sizes[i] >= x) {
    d306:	4a0f      	ldr	r2, [pc, #60]	; (d344 <get_hash_alloc_greater_or_equal_to+0x4c>)
    d308:	68fb      	ldr	r3, [r7, #12]
    d30a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d30e:	461a      	mov	r2, r3
    d310:	687b      	ldr	r3, [r7, #4]
    d312:	429a      	cmp	r2, r3
    d314:	d304      	bcc.n	d320 <get_hash_alloc_greater_or_equal_to+0x28>
            return hash_allocation_sizes[i];
    d316:	4a0b      	ldr	r2, [pc, #44]	; (d344 <get_hash_alloc_greater_or_equal_to+0x4c>)
    d318:	68fb      	ldr	r3, [r7, #12]
    d31a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d31e:	e00b      	b.n	d338 <get_hash_alloc_greater_or_equal_to+0x40>
    for (size_t i = 0; i < MP_ARRAY_SIZE(hash_allocation_sizes); i++) {
    d320:	68fb      	ldr	r3, [r7, #12]
    d322:	3301      	adds	r3, #1
    d324:	60fb      	str	r3, [r7, #12]
    d326:	68fb      	ldr	r3, [r7, #12]
    d328:	2b21      	cmp	r3, #33	; 0x21
    d32a:	d9ec      	bls.n	d306 <get_hash_alloc_greater_or_equal_to+0xe>
        }
    }
    // ran out of primes in the table!
    // return something sensible, at least make it odd
    return (x + x / 2) | 1;
    d32c:	687b      	ldr	r3, [r7, #4]
    d32e:	085a      	lsrs	r2, r3, #1
    d330:	687b      	ldr	r3, [r7, #4]
    d332:	4413      	add	r3, r2
    d334:	f043 0301 	orr.w	r3, r3, #1
}
    d338:	4618      	mov	r0, r3
    d33a:	3714      	adds	r7, #20
    d33c:	46bd      	mov	sp, r7
    d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d342:	4770      	bx	lr
    d344:	000219e4 	.word	0x000219e4

0000d348 <mp_map_init>:

/******************************************************************************/
/* map                                                                        */

void mp_map_init(mp_map_t *map, size_t n) {
    d348:	b580      	push	{r7, lr}
    d34a:	b082      	sub	sp, #8
    d34c:	af00      	add	r7, sp, #0
    d34e:	6078      	str	r0, [r7, #4]
    d350:	6039      	str	r1, [r7, #0]
    if (n == 0) {
    d352:	683b      	ldr	r3, [r7, #0]
    d354:	2b00      	cmp	r3, #0
    d356:	d106      	bne.n	d366 <mp_map_init+0x1e>
        map->alloc = 0;
    d358:	687b      	ldr	r3, [r7, #4]
    d35a:	2200      	movs	r2, #0
    d35c:	605a      	str	r2, [r3, #4]
        map->table = NULL;
    d35e:	687b      	ldr	r3, [r7, #4]
    d360:	2200      	movs	r2, #0
    d362:	609a      	str	r2, [r3, #8]
    d364:	e00b      	b.n	d37e <mp_map_init+0x36>
    } else {
        map->alloc = n;
    d366:	687b      	ldr	r3, [r7, #4]
    d368:	683a      	ldr	r2, [r7, #0]
    d36a:	605a      	str	r2, [r3, #4]
        map->table = m_new0(mp_map_elem_t, map->alloc);
    d36c:	687b      	ldr	r3, [r7, #4]
    d36e:	685b      	ldr	r3, [r3, #4]
    d370:	00db      	lsls	r3, r3, #3
    d372:	4618      	mov	r0, r3
    d374:	f7f3 f810 	bl	398 <m_malloc0>
    d378:	4602      	mov	r2, r0
    d37a:	687b      	ldr	r3, [r7, #4]
    d37c:	609a      	str	r2, [r3, #8]
    }
    map->used = 0;
    d37e:	687a      	ldr	r2, [r7, #4]
    d380:	6813      	ldr	r3, [r2, #0]
    d382:	f36f 03df 	bfc	r3, #3, #29
    d386:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d388:	687a      	ldr	r2, [r7, #4]
    d38a:	7813      	ldrb	r3, [r2, #0]
    d38c:	f043 0301 	orr.w	r3, r3, #1
    d390:	7013      	strb	r3, [r2, #0]
    map->is_fixed = 0;
    d392:	687a      	ldr	r2, [r7, #4]
    d394:	7813      	ldrb	r3, [r2, #0]
    d396:	f36f 0341 	bfc	r3, #1, #1
    d39a:	7013      	strb	r3, [r2, #0]
    map->is_ordered = 0;
    d39c:	687a      	ldr	r2, [r7, #4]
    d39e:	7813      	ldrb	r3, [r2, #0]
    d3a0:	f36f 0382 	bfc	r3, #2, #1
    d3a4:	7013      	strb	r3, [r2, #0]
}
    d3a6:	bf00      	nop
    d3a8:	3708      	adds	r7, #8
    d3aa:	46bd      	mov	sp, r7
    d3ac:	bd80      	pop	{r7, pc}
    d3ae:	bf00      	nop

0000d3b0 <mp_map_init_fixed_table>:

void mp_map_init_fixed_table(mp_map_t *map, size_t n, const mp_obj_t *table) {
    d3b0:	b480      	push	{r7}
    d3b2:	b085      	sub	sp, #20
    d3b4:	af00      	add	r7, sp, #0
    d3b6:	60f8      	str	r0, [r7, #12]
    d3b8:	60b9      	str	r1, [r7, #8]
    d3ba:	607a      	str	r2, [r7, #4]
    map->alloc = n;
    d3bc:	68fb      	ldr	r3, [r7, #12]
    d3be:	68ba      	ldr	r2, [r7, #8]
    d3c0:	605a      	str	r2, [r3, #4]
    map->used = n;
    d3c2:	68bb      	ldr	r3, [r7, #8]
    d3c4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
    d3c8:	68fa      	ldr	r2, [r7, #12]
    d3ca:	6813      	ldr	r3, [r2, #0]
    d3cc:	f361 03df 	bfi	r3, r1, #3, #29
    d3d0:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d3d2:	68fa      	ldr	r2, [r7, #12]
    d3d4:	7813      	ldrb	r3, [r2, #0]
    d3d6:	f043 0301 	orr.w	r3, r3, #1
    d3da:	7013      	strb	r3, [r2, #0]
    map->is_fixed = 1;
    d3dc:	68fa      	ldr	r2, [r7, #12]
    d3de:	7813      	ldrb	r3, [r2, #0]
    d3e0:	f043 0302 	orr.w	r3, r3, #2
    d3e4:	7013      	strb	r3, [r2, #0]
    map->is_ordered = 1;
    d3e6:	68fa      	ldr	r2, [r7, #12]
    d3e8:	7813      	ldrb	r3, [r2, #0]
    d3ea:	f043 0304 	orr.w	r3, r3, #4
    d3ee:	7013      	strb	r3, [r2, #0]
    map->table = (mp_map_elem_t*)table;
    d3f0:	68fb      	ldr	r3, [r7, #12]
    d3f2:	687a      	ldr	r2, [r7, #4]
    d3f4:	609a      	str	r2, [r3, #8]
}
    d3f6:	bf00      	nop
    d3f8:	3714      	adds	r7, #20
    d3fa:	46bd      	mov	sp, r7
    d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    d400:	4770      	bx	lr
    d402:	bf00      	nop

0000d404 <mp_map_deinit>:

// Differentiate from mp_map_clear() - semantics is different
void mp_map_deinit(mp_map_t *map) {
    d404:	b580      	push	{r7, lr}
    d406:	b082      	sub	sp, #8
    d408:	af00      	add	r7, sp, #0
    d40a:	6078      	str	r0, [r7, #4]
    if (!map->is_fixed) {
    d40c:	687b      	ldr	r3, [r7, #4]
    d40e:	781b      	ldrb	r3, [r3, #0]
    d410:	f003 0302 	and.w	r3, r3, #2
    d414:	b2db      	uxtb	r3, r3
    d416:	2b00      	cmp	r3, #0
    d418:	d104      	bne.n	d424 <mp_map_deinit+0x20>
        m_del(mp_map_elem_t, map->table, map->alloc);
    d41a:	687b      	ldr	r3, [r7, #4]
    d41c:	689b      	ldr	r3, [r3, #8]
    d41e:	4618      	mov	r0, r3
    d420:	f7f2 fff6 	bl	410 <m_free>
    }
    map->used = map->alloc = 0;
    d424:	687b      	ldr	r3, [r7, #4]
    d426:	2200      	movs	r2, #0
    d428:	605a      	str	r2, [r3, #4]
    d42a:	687a      	ldr	r2, [r7, #4]
    d42c:	6813      	ldr	r3, [r2, #0]
    d42e:	f36f 03df 	bfc	r3, #3, #29
    d432:	6013      	str	r3, [r2, #0]
}
    d434:	bf00      	nop
    d436:	3708      	adds	r7, #8
    d438:	46bd      	mov	sp, r7
    d43a:	bd80      	pop	{r7, pc}

0000d43c <mp_map_clear>:

void mp_map_clear(mp_map_t *map) {
    d43c:	b580      	push	{r7, lr}
    d43e:	b082      	sub	sp, #8
    d440:	af00      	add	r7, sp, #0
    d442:	6078      	str	r0, [r7, #4]
    if (!map->is_fixed) {
    d444:	687b      	ldr	r3, [r7, #4]
    d446:	781b      	ldrb	r3, [r3, #0]
    d448:	f003 0302 	and.w	r3, r3, #2
    d44c:	b2db      	uxtb	r3, r3
    d44e:	2b00      	cmp	r3, #0
    d450:	d104      	bne.n	d45c <mp_map_clear+0x20>
        m_del(mp_map_elem_t, map->table, map->alloc);
    d452:	687b      	ldr	r3, [r7, #4]
    d454:	689b      	ldr	r3, [r3, #8]
    d456:	4618      	mov	r0, r3
    d458:	f7f2 ffda 	bl	410 <m_free>
    }
    map->alloc = 0;
    d45c:	687b      	ldr	r3, [r7, #4]
    d45e:	2200      	movs	r2, #0
    d460:	605a      	str	r2, [r3, #4]
    map->used = 0;
    d462:	687a      	ldr	r2, [r7, #4]
    d464:	6813      	ldr	r3, [r2, #0]
    d466:	f36f 03df 	bfc	r3, #3, #29
    d46a:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d46c:	687a      	ldr	r2, [r7, #4]
    d46e:	7813      	ldrb	r3, [r2, #0]
    d470:	f043 0301 	orr.w	r3, r3, #1
    d474:	7013      	strb	r3, [r2, #0]
    map->is_fixed = 0;
    d476:	687a      	ldr	r2, [r7, #4]
    d478:	7813      	ldrb	r3, [r2, #0]
    d47a:	f36f 0341 	bfc	r3, #1, #1
    d47e:	7013      	strb	r3, [r2, #0]
    map->table = NULL;
    d480:	687b      	ldr	r3, [r7, #4]
    d482:	2200      	movs	r2, #0
    d484:	609a      	str	r2, [r3, #8]
}
    d486:	bf00      	nop
    d488:	3708      	adds	r7, #8
    d48a:	46bd      	mov	sp, r7
    d48c:	bd80      	pop	{r7, pc}
    d48e:	bf00      	nop

0000d490 <mp_map_rehash>:

STATIC void mp_map_rehash(mp_map_t *map) {
    d490:	b580      	push	{r7, lr}
    d492:	b088      	sub	sp, #32
    d494:	af00      	add	r7, sp, #0
    d496:	6078      	str	r0, [r7, #4]
    size_t old_alloc = map->alloc;
    d498:	687b      	ldr	r3, [r7, #4]
    d49a:	685b      	ldr	r3, [r3, #4]
    d49c:	61bb      	str	r3, [r7, #24]
    size_t new_alloc = get_hash_alloc_greater_or_equal_to(map->alloc + 1);
    d49e:	687b      	ldr	r3, [r7, #4]
    d4a0:	685b      	ldr	r3, [r3, #4]
    d4a2:	3301      	adds	r3, #1
    d4a4:	4618      	mov	r0, r3
    d4a6:	f7ff ff27 	bl	d2f8 <get_hash_alloc_greater_or_equal_to>
    d4aa:	6178      	str	r0, [r7, #20]
    DEBUG_printf("mp_map_rehash(%p): " UINT_FMT " -> " UINT_FMT "\n", map, old_alloc, new_alloc);
    mp_map_elem_t *old_table = map->table;
    d4ac:	687b      	ldr	r3, [r7, #4]
    d4ae:	689b      	ldr	r3, [r3, #8]
    d4b0:	613b      	str	r3, [r7, #16]
    mp_map_elem_t *new_table = m_new0(mp_map_elem_t, new_alloc);
    d4b2:	697b      	ldr	r3, [r7, #20]
    d4b4:	00db      	lsls	r3, r3, #3
    d4b6:	4618      	mov	r0, r3
    d4b8:	f7f2 ff6e 	bl	398 <m_malloc0>
    d4bc:	60f8      	str	r0, [r7, #12]
    // If we reach this point, table resizing succeeded, now we can edit the old map.
    map->alloc = new_alloc;
    d4be:	687b      	ldr	r3, [r7, #4]
    d4c0:	697a      	ldr	r2, [r7, #20]
    d4c2:	605a      	str	r2, [r3, #4]
    map->used = 0;
    d4c4:	687a      	ldr	r2, [r7, #4]
    d4c6:	6813      	ldr	r3, [r2, #0]
    d4c8:	f36f 03df 	bfc	r3, #3, #29
    d4cc:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d4ce:	687a      	ldr	r2, [r7, #4]
    d4d0:	7813      	ldrb	r3, [r2, #0]
    d4d2:	f043 0301 	orr.w	r3, r3, #1
    d4d6:	7013      	strb	r3, [r2, #0]
    map->table = new_table;
    d4d8:	687b      	ldr	r3, [r7, #4]
    d4da:	68fa      	ldr	r2, [r7, #12]
    d4dc:	609a      	str	r2, [r3, #8]
    for (size_t i = 0; i < old_alloc; i++) {
    d4de:	2300      	movs	r3, #0
    d4e0:	61fb      	str	r3, [r7, #28]
    d4e2:	e021      	b.n	d528 <mp_map_rehash+0x98>
        if (old_table[i].key != MP_OBJ_NULL && old_table[i].key != MP_OBJ_SENTINEL) {
    d4e4:	69fb      	ldr	r3, [r7, #28]
    d4e6:	00db      	lsls	r3, r3, #3
    d4e8:	693a      	ldr	r2, [r7, #16]
    d4ea:	4413      	add	r3, r2
    d4ec:	681b      	ldr	r3, [r3, #0]
    d4ee:	2b00      	cmp	r3, #0
    d4f0:	d017      	beq.n	d522 <mp_map_rehash+0x92>
    d4f2:	69fb      	ldr	r3, [r7, #28]
    d4f4:	00db      	lsls	r3, r3, #3
    d4f6:	693a      	ldr	r2, [r7, #16]
    d4f8:	4413      	add	r3, r2
    d4fa:	681b      	ldr	r3, [r3, #0]
    d4fc:	2b08      	cmp	r3, #8
    d4fe:	d010      	beq.n	d522 <mp_map_rehash+0x92>
            mp_map_lookup(map, old_table[i].key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = old_table[i].value;
    d500:	69fb      	ldr	r3, [r7, #28]
    d502:	00db      	lsls	r3, r3, #3
    d504:	693a      	ldr	r2, [r7, #16]
    d506:	4413      	add	r3, r2
    d508:	681b      	ldr	r3, [r3, #0]
    d50a:	2201      	movs	r2, #1
    d50c:	4619      	mov	r1, r3
    d50e:	6878      	ldr	r0, [r7, #4]
    d510:	f000 f816 	bl	d540 <mp_map_lookup>
    d514:	4601      	mov	r1, r0
    d516:	69fb      	ldr	r3, [r7, #28]
    d518:	00db      	lsls	r3, r3, #3
    d51a:	693a      	ldr	r2, [r7, #16]
    d51c:	4413      	add	r3, r2
    d51e:	685b      	ldr	r3, [r3, #4]
    d520:	604b      	str	r3, [r1, #4]
    for (size_t i = 0; i < old_alloc; i++) {
    d522:	69fb      	ldr	r3, [r7, #28]
    d524:	3301      	adds	r3, #1
    d526:	61fb      	str	r3, [r7, #28]
    d528:	69fa      	ldr	r2, [r7, #28]
    d52a:	69bb      	ldr	r3, [r7, #24]
    d52c:	429a      	cmp	r2, r3
    d52e:	d3d9      	bcc.n	d4e4 <mp_map_rehash+0x54>
        }
    }
    m_del(mp_map_elem_t, old_table, old_alloc);
    d530:	6938      	ldr	r0, [r7, #16]
    d532:	f7f2 ff6d 	bl	410 <m_free>
}
    d536:	bf00      	nop
    d538:	3720      	adds	r7, #32
    d53a:	46bd      	mov	sp, r7
    d53c:	bd80      	pop	{r7, pc}
    d53e:	bf00      	nop

0000d540 <mp_map_lookup>:
//  - returns NULL if not found, else the slot it was found in with key,value non-null
// MP_MAP_LOOKUP_ADD_IF_NOT_FOUND behaviour:
//  - returns slot, with key non-null and value=MP_OBJ_NULL if it was added
// MP_MAP_LOOKUP_REMOVE_IF_FOUND behaviour:
//  - returns NULL if not found, else the slot if was found in with key null and value non-null
mp_map_elem_t *mp_map_lookup(mp_map_t *map, mp_obj_t index, mp_map_lookup_kind_t lookup_kind) {
    d540:	b580      	push	{r7, lr}
    d542:	b08c      	sub	sp, #48	; 0x30
    d544:	af00      	add	r7, sp, #0
    d546:	60f8      	str	r0, [r7, #12]
    d548:	60b9      	str	r1, [r7, #8]
    d54a:	607a      	str	r2, [r7, #4]
    // If the map is a fixed array then we must only be called for a lookup
    assert(!map->is_fixed || lookup_kind == MP_MAP_LOOKUP);
    d54c:	68fb      	ldr	r3, [r7, #12]
    d54e:	781b      	ldrb	r3, [r3, #0]
    d550:	f003 0302 	and.w	r3, r3, #2
    d554:	b2db      	uxtb	r3, r3
    d556:	2b00      	cmp	r3, #0
    d558:	d008      	beq.n	d56c <mp_map_lookup+0x2c>
    d55a:	687b      	ldr	r3, [r7, #4]
    d55c:	2b00      	cmp	r3, #0
    d55e:	d005      	beq.n	d56c <mp_map_lookup+0x2c>
    d560:	4ba3      	ldr	r3, [pc, #652]	; (d7f0 <mp_map_lookup+0x2b0>)
    d562:	4aa4      	ldr	r2, [pc, #656]	; (d7f4 <mp_map_lookup+0x2b4>)
    d564:	2194      	movs	r1, #148	; 0x94
    d566:	48a4      	ldr	r0, [pc, #656]	; (d7f8 <mp_map_lookup+0x2b8>)
    d568:	f00e f90c 	bl	1b784 <__assert_func>

    // Work out if we can compare just pointers
    bool compare_only_ptrs = map->all_keys_are_qstrs;
    d56c:	68fb      	ldr	r3, [r7, #12]
    d56e:	781b      	ldrb	r3, [r3, #0]
    d570:	f3c3 0300 	ubfx	r3, r3, #0, #1
    d574:	b2db      	uxtb	r3, r3
    d576:	2b00      	cmp	r3, #0
    d578:	bf14      	ite	ne
    d57a:	2301      	movne	r3, #1
    d57c:	2300      	moveq	r3, #0
    d57e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (compare_only_ptrs) {
    d582:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d586:	2b00      	cmp	r3, #0
    d588:	d019      	beq.n	d5be <mp_map_lookup+0x7e>
        if (MP_OBJ_IS_QSTR(index)) {
    d58a:	68b8      	ldr	r0, [r7, #8]
    d58c:	f7ff fe90 	bl	d2b0 <MP_OBJ_IS_QSTR>
    d590:	4603      	mov	r3, r0
    d592:	2b00      	cmp	r3, #0
    d594:	d113      	bne.n	d5be <mp_map_lookup+0x7e>
            // Index is a qstr, so can just do ptr comparison.
        } else if (MP_OBJ_IS_TYPE(index, &mp_type_str)) {
    d596:	68b8      	ldr	r0, [r7, #8]
    d598:	f7ff fe9c 	bl	d2d4 <MP_OBJ_IS_OBJ>
    d59c:	4603      	mov	r3, r0
    d59e:	2b00      	cmp	r3, #0
    d5a0:	d008      	beq.n	d5b4 <mp_map_lookup+0x74>
    d5a2:	68bb      	ldr	r3, [r7, #8]
    d5a4:	681b      	ldr	r3, [r3, #0]
    d5a6:	4a95      	ldr	r2, [pc, #596]	; (d7fc <mp_map_lookup+0x2bc>)
    d5a8:	4293      	cmp	r3, r2
    d5aa:	d103      	bne.n	d5b4 <mp_map_lookup+0x74>
            // Index is a non-interned string.
            // We can either intern the string, or force a full equality comparison.
            // We chose the latter, since interning costs time and potentially RAM,
            // and it won't necessarily benefit subsequent calls because these calls
            // most likely won't pass the newly-interned string.
            compare_only_ptrs = false;
    d5ac:	2300      	movs	r3, #0
    d5ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    d5b2:	e004      	b.n	d5be <mp_map_lookup+0x7e>
        } else if (lookup_kind != MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d5b4:	687b      	ldr	r3, [r7, #4]
    d5b6:	2b01      	cmp	r3, #1
    d5b8:	d001      	beq.n	d5be <mp_map_lookup+0x7e>
            // If we are not adding, then we can return straight away a failed
            // lookup because we know that the index will never be found.
            return NULL;
    d5ba:	2300      	movs	r3, #0
    d5bc:	e130      	b.n	d820 <mp_map_lookup+0x2e0>
        }
    }

    // if the map is an ordered array then we must do a brute force linear search
    if (map->is_ordered) {
    d5be:	68fb      	ldr	r3, [r7, #12]
    d5c0:	781b      	ldrb	r3, [r3, #0]
    d5c2:	f003 0304 	and.w	r3, r3, #4
    d5c6:	b2db      	uxtb	r3, r3
    d5c8:	2b00      	cmp	r3, #0
    d5ca:	d02c      	beq.n	d626 <mp_map_lookup+0xe6>
        for (mp_map_elem_t *elem = &map->table[0], *top = &map->table[map->used]; elem < top; elem++) {
    d5cc:	68fb      	ldr	r3, [r7, #12]
    d5ce:	689b      	ldr	r3, [r3, #8]
    d5d0:	62bb      	str	r3, [r7, #40]	; 0x28
    d5d2:	68fb      	ldr	r3, [r7, #12]
    d5d4:	689a      	ldr	r2, [r3, #8]
    d5d6:	68fb      	ldr	r3, [r7, #12]
    d5d8:	681b      	ldr	r3, [r3, #0]
    d5da:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d5de:	00db      	lsls	r3, r3, #3
    d5e0:	4413      	add	r3, r2
    d5e2:	617b      	str	r3, [r7, #20]
    d5e4:	e019      	b.n	d61a <mp_map_lookup+0xda>
            if (elem->key == index || (!compare_only_ptrs && mp_obj_equal(elem->key, index))) {
    d5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d5e8:	681a      	ldr	r2, [r3, #0]
    d5ea:	68bb      	ldr	r3, [r7, #8]
    d5ec:	429a      	cmp	r2, r3
    d5ee:	d00f      	beq.n	d610 <mp_map_lookup+0xd0>
    d5f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d5f4:	f083 0301 	eor.w	r3, r3, #1
    d5f8:	b2db      	uxtb	r3, r3
    d5fa:	2b00      	cmp	r3, #0
    d5fc:	d00a      	beq.n	d614 <mp_map_lookup+0xd4>
    d5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d600:	681b      	ldr	r3, [r3, #0]
    d602:	68b9      	ldr	r1, [r7, #8]
    d604:	4618      	mov	r0, r3
    d606:	f000 fa99 	bl	db3c <mp_obj_equal>
    d60a:	4603      	mov	r3, r0
    d60c:	2b00      	cmp	r3, #0
    d60e:	d001      	beq.n	d614 <mp_map_lookup+0xd4>
                    elem = &map->table[map->used];
                    elem->key = MP_OBJ_NULL;
                    elem->value = value;
                }
                #endif
                return elem;
    d610:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d612:	e105      	b.n	d820 <mp_map_lookup+0x2e0>
        for (mp_map_elem_t *elem = &map->table[0], *top = &map->table[map->used]; elem < top; elem++) {
    d614:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d616:	3308      	adds	r3, #8
    d618:	62bb      	str	r3, [r7, #40]	; 0x28
    d61a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d61c:	697b      	ldr	r3, [r7, #20]
    d61e:	429a      	cmp	r2, r3
    d620:	d3e1      	bcc.n	d5e6 <mp_map_lookup+0xa6>
        if (!MP_OBJ_IS_QSTR(index)) {
            map->all_keys_are_qstrs = 0;
        }
        return elem;
        #else
        return NULL;
    d622:	2300      	movs	r3, #0
    d624:	e0fc      	b.n	d820 <mp_map_lookup+0x2e0>
        #endif
    }

    // map is a hash table (not an ordered array), so do a hash lookup

    if (map->alloc == 0) {
    d626:	68fb      	ldr	r3, [r7, #12]
    d628:	685b      	ldr	r3, [r3, #4]
    d62a:	2b00      	cmp	r3, #0
    d62c:	d108      	bne.n	d640 <mp_map_lookup+0x100>
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d62e:	687b      	ldr	r3, [r7, #4]
    d630:	2b01      	cmp	r3, #1
    d632:	d103      	bne.n	d63c <mp_map_lookup+0xfc>
            mp_map_rehash(map);
    d634:	68f8      	ldr	r0, [r7, #12]
    d636:	f7ff ff2b 	bl	d490 <mp_map_rehash>
    d63a:	e001      	b.n	d640 <mp_map_lookup+0x100>
        } else {
            return NULL;
    d63c:	2300      	movs	r3, #0
    d63e:	e0ef      	b.n	d820 <mp_map_lookup+0x2e0>
        }
    }

    // get hash of index, with fast path for common case of qstr
    mp_uint_t hash;
    if (MP_OBJ_IS_QSTR(index)) {
    d640:	68b8      	ldr	r0, [r7, #8]
    d642:	f7ff fe35 	bl	d2b0 <MP_OBJ_IS_QSTR>
    d646:	4603      	mov	r3, r0
    d648:	2b00      	cmp	r3, #0
    d64a:	d006      	beq.n	d65a <mp_map_lookup+0x11a>
        hash = qstr_hash(MP_OBJ_QSTR_VALUE(index));
    d64c:	68bb      	ldr	r3, [r7, #8]
    d64e:	089b      	lsrs	r3, r3, #2
    d650:	4618      	mov	r0, r3
    d652:	f7f3 fe7b 	bl	134c <qstr_hash>
    d656:	6278      	str	r0, [r7, #36]	; 0x24
    d658:	e006      	b.n	d668 <mp_map_lookup+0x128>
    } else {
        hash = MP_OBJ_SMALL_INT_VALUE(mp_unary_op(MP_UNARY_OP_HASH, index));
    d65a:	68b9      	ldr	r1, [r7, #8]
    d65c:	2006      	movs	r0, #6
    d65e:	f7fe f871 	bl	b744 <mp_unary_op>
    d662:	4603      	mov	r3, r0
    d664:	105b      	asrs	r3, r3, #1
    d666:	627b      	str	r3, [r7, #36]	; 0x24
    }

    size_t pos = hash % map->alloc;
    d668:	68fb      	ldr	r3, [r7, #12]
    d66a:	685a      	ldr	r2, [r3, #4]
    d66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d66e:	fbb3 f1f2 	udiv	r1, r3, r2
    d672:	fb02 f201 	mul.w	r2, r2, r1
    d676:	1a9b      	subs	r3, r3, r2
    d678:	623b      	str	r3, [r7, #32]
    size_t start_pos = pos;
    d67a:	6a3b      	ldr	r3, [r7, #32]
    d67c:	61fb      	str	r3, [r7, #28]
    mp_map_elem_t *avail_slot = NULL;
    d67e:	2300      	movs	r3, #0
    d680:	61bb      	str	r3, [r7, #24]
    for (;;) {
        mp_map_elem_t *slot = &map->table[pos];
    d682:	68fb      	ldr	r3, [r7, #12]
    d684:	689a      	ldr	r2, [r3, #8]
    d686:	6a3b      	ldr	r3, [r7, #32]
    d688:	00db      	lsls	r3, r3, #3
    d68a:	4413      	add	r3, r2
    d68c:	613b      	str	r3, [r7, #16]
        if (slot->key == MP_OBJ_NULL) {
    d68e:	693b      	ldr	r3, [r7, #16]
    d690:	681b      	ldr	r3, [r3, #0]
    d692:	2b00      	cmp	r3, #0
    d694:	d12b      	bne.n	d6ee <mp_map_lookup+0x1ae>
            // found NULL slot, so index is not in table
            if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d696:	687b      	ldr	r3, [r7, #4]
    d698:	2b01      	cmp	r3, #1
    d69a:	d126      	bne.n	d6ea <mp_map_lookup+0x1aa>
                map->used += 1;
    d69c:	68fb      	ldr	r3, [r7, #12]
    d69e:	681b      	ldr	r3, [r3, #0]
    d6a0:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d6a4:	3301      	adds	r3, #1
    d6a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
    d6aa:	68fa      	ldr	r2, [r7, #12]
    d6ac:	6813      	ldr	r3, [r2, #0]
    d6ae:	f361 03df 	bfi	r3, r1, #3, #29
    d6b2:	6013      	str	r3, [r2, #0]
                if (avail_slot == NULL) {
    d6b4:	69bb      	ldr	r3, [r7, #24]
    d6b6:	2b00      	cmp	r3, #0
    d6b8:	d101      	bne.n	d6be <mp_map_lookup+0x17e>
                    avail_slot = slot;
    d6ba:	693b      	ldr	r3, [r7, #16]
    d6bc:	61bb      	str	r3, [r7, #24]
                }
                avail_slot->key = index;
    d6be:	69bb      	ldr	r3, [r7, #24]
    d6c0:	68ba      	ldr	r2, [r7, #8]
    d6c2:	601a      	str	r2, [r3, #0]
                avail_slot->value = MP_OBJ_NULL;
    d6c4:	69bb      	ldr	r3, [r7, #24]
    d6c6:	2200      	movs	r2, #0
    d6c8:	605a      	str	r2, [r3, #4]
                if (!MP_OBJ_IS_QSTR(index)) {
    d6ca:	68b8      	ldr	r0, [r7, #8]
    d6cc:	f7ff fdf0 	bl	d2b0 <MP_OBJ_IS_QSTR>
    d6d0:	4603      	mov	r3, r0
    d6d2:	f083 0301 	eor.w	r3, r3, #1
    d6d6:	b2db      	uxtb	r3, r3
    d6d8:	2b00      	cmp	r3, #0
    d6da:	d004      	beq.n	d6e6 <mp_map_lookup+0x1a6>
                    map->all_keys_are_qstrs = 0;
    d6dc:	68fa      	ldr	r2, [r7, #12]
    d6de:	7813      	ldrb	r3, [r2, #0]
    d6e0:	f36f 0300 	bfc	r3, #0, #1
    d6e4:	7013      	strb	r3, [r2, #0]
                }
                return avail_slot;
    d6e6:	69bb      	ldr	r3, [r7, #24]
    d6e8:	e09a      	b.n	d820 <mp_map_lookup+0x2e0>
            } else {
                return NULL;
    d6ea:	2300      	movs	r3, #0
    d6ec:	e098      	b.n	d820 <mp_map_lookup+0x2e0>
            }
        } else if (slot->key == MP_OBJ_SENTINEL) {
    d6ee:	693b      	ldr	r3, [r7, #16]
    d6f0:	681b      	ldr	r3, [r3, #0]
    d6f2:	2b08      	cmp	r3, #8
    d6f4:	d105      	bne.n	d702 <mp_map_lookup+0x1c2>
            // found deleted slot, remember for later
            if (avail_slot == NULL) {
    d6f6:	69bb      	ldr	r3, [r7, #24]
    d6f8:	2b00      	cmp	r3, #0
    d6fa:	d141      	bne.n	d780 <mp_map_lookup+0x240>
                avail_slot = slot;
    d6fc:	693b      	ldr	r3, [r7, #16]
    d6fe:	61bb      	str	r3, [r7, #24]
    d700:	e03e      	b.n	d780 <mp_map_lookup+0x240>
            }
        } else if (slot->key == index || (!compare_only_ptrs && mp_obj_equal(slot->key, index))) {
    d702:	693b      	ldr	r3, [r7, #16]
    d704:	681a      	ldr	r2, [r3, #0]
    d706:	68bb      	ldr	r3, [r7, #8]
    d708:	429a      	cmp	r2, r3
    d70a:	d00f      	beq.n	d72c <mp_map_lookup+0x1ec>
    d70c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d710:	f083 0301 	eor.w	r3, r3, #1
    d714:	b2db      	uxtb	r3, r3
    d716:	2b00      	cmp	r3, #0
    d718:	d032      	beq.n	d780 <mp_map_lookup+0x240>
    d71a:	693b      	ldr	r3, [r7, #16]
    d71c:	681b      	ldr	r3, [r3, #0]
    d71e:	68b9      	ldr	r1, [r7, #8]
    d720:	4618      	mov	r0, r3
    d722:	f000 fa0b 	bl	db3c <mp_obj_equal>
    d726:	4603      	mov	r3, r0
    d728:	2b00      	cmp	r3, #0
    d72a:	d029      	beq.n	d780 <mp_map_lookup+0x240>
            // found index
            // Note: CPython does not replace the index; try x={True:'true'};x[1]='one';x
            if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    d72c:	687b      	ldr	r3, [r7, #4]
    d72e:	2b02      	cmp	r3, #2
    d730:	d124      	bne.n	d77c <mp_map_lookup+0x23c>
                // delete element in this slot
                map->used--;
    d732:	68fb      	ldr	r3, [r7, #12]
    d734:	681b      	ldr	r3, [r3, #0]
    d736:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d73a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    d73e:	3b01      	subs	r3, #1
    d740:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    d744:	68f9      	ldr	r1, [r7, #12]
    d746:	680a      	ldr	r2, [r1, #0]
    d748:	f363 02df 	bfi	r2, r3, #3, #29
    d74c:	600a      	str	r2, [r1, #0]
                if (map->table[(pos + 1) % map->alloc].key == MP_OBJ_NULL) {
    d74e:	68fb      	ldr	r3, [r7, #12]
    d750:	6899      	ldr	r1, [r3, #8]
    d752:	6a3b      	ldr	r3, [r7, #32]
    d754:	3301      	adds	r3, #1
    d756:	68fa      	ldr	r2, [r7, #12]
    d758:	6852      	ldr	r2, [r2, #4]
    d75a:	fbb3 f0f2 	udiv	r0, r3, r2
    d75e:	fb02 f200 	mul.w	r2, r2, r0
    d762:	1a9b      	subs	r3, r3, r2
    d764:	00db      	lsls	r3, r3, #3
    d766:	440b      	add	r3, r1
    d768:	681b      	ldr	r3, [r3, #0]
    d76a:	2b00      	cmp	r3, #0
    d76c:	d103      	bne.n	d776 <mp_map_lookup+0x236>
                    // optimisation if next slot is empty
                    slot->key = MP_OBJ_NULL;
    d76e:	693b      	ldr	r3, [r7, #16]
    d770:	2200      	movs	r2, #0
    d772:	601a      	str	r2, [r3, #0]
    d774:	e002      	b.n	d77c <mp_map_lookup+0x23c>
                } else {
                    slot->key = MP_OBJ_SENTINEL;
    d776:	693b      	ldr	r3, [r7, #16]
    d778:	2208      	movs	r2, #8
    d77a:	601a      	str	r2, [r3, #0]
                }
                // keep slot->value so that caller can access it if needed
            }
            return slot;
    d77c:	693b      	ldr	r3, [r7, #16]
    d77e:	e04f      	b.n	d820 <mp_map_lookup+0x2e0>
        }

        // not yet found, keep searching in this table
        pos = (pos + 1) % map->alloc;
    d780:	6a3b      	ldr	r3, [r7, #32]
    d782:	3301      	adds	r3, #1
    d784:	68fa      	ldr	r2, [r7, #12]
    d786:	6852      	ldr	r2, [r2, #4]
    d788:	fbb3 f1f2 	udiv	r1, r3, r2
    d78c:	fb02 f201 	mul.w	r2, r2, r1
    d790:	1a9b      	subs	r3, r3, r2
    d792:	623b      	str	r3, [r7, #32]

        if (pos == start_pos) {
    d794:	6a3a      	ldr	r2, [r7, #32]
    d796:	69fb      	ldr	r3, [r7, #28]
    d798:	429a      	cmp	r2, r3
    d79a:	f47f af72 	bne.w	d682 <mp_map_lookup+0x142>
            // search got back to starting position, so index is not in table
            if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d79e:	687b      	ldr	r3, [r7, #4]
    d7a0:	2b01      	cmp	r3, #1
    d7a2:	d13c      	bne.n	d81e <mp_map_lookup+0x2de>
                if (avail_slot != NULL) {
    d7a4:	69bb      	ldr	r3, [r7, #24]
    d7a6:	2b00      	cmp	r3, #0
    d7a8:	d02a      	beq.n	d800 <mp_map_lookup+0x2c0>
                    // there was an available slot, so use that
                    map->used++;
    d7aa:	68fb      	ldr	r3, [r7, #12]
    d7ac:	681b      	ldr	r3, [r3, #0]
    d7ae:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d7b2:	1c5a      	adds	r2, r3, #1
    d7b4:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    d7b8:	68f9      	ldr	r1, [r7, #12]
    d7ba:	680b      	ldr	r3, [r1, #0]
    d7bc:	f362 03df 	bfi	r3, r2, #3, #29
    d7c0:	600b      	str	r3, [r1, #0]
                    avail_slot->key = index;
    d7c2:	69bb      	ldr	r3, [r7, #24]
    d7c4:	68ba      	ldr	r2, [r7, #8]
    d7c6:	601a      	str	r2, [r3, #0]
                    avail_slot->value = MP_OBJ_NULL;
    d7c8:	69bb      	ldr	r3, [r7, #24]
    d7ca:	2200      	movs	r2, #0
    d7cc:	605a      	str	r2, [r3, #4]
                    if (!MP_OBJ_IS_QSTR(index)) {
    d7ce:	68b8      	ldr	r0, [r7, #8]
    d7d0:	f7ff fd6e 	bl	d2b0 <MP_OBJ_IS_QSTR>
    d7d4:	4603      	mov	r3, r0
    d7d6:	f083 0301 	eor.w	r3, r3, #1
    d7da:	b2db      	uxtb	r3, r3
    d7dc:	2b00      	cmp	r3, #0
    d7de:	d004      	beq.n	d7ea <mp_map_lookup+0x2aa>
                        map->all_keys_are_qstrs = 0;
    d7e0:	68fa      	ldr	r2, [r7, #12]
    d7e2:	7813      	ldrb	r3, [r2, #0]
    d7e4:	f36f 0300 	bfc	r3, #0, #1
    d7e8:	7013      	strb	r3, [r2, #0]
                    }
                    return avail_slot;
    d7ea:	69bb      	ldr	r3, [r7, #24]
    d7ec:	e018      	b.n	d820 <mp_map_lookup+0x2e0>
    d7ee:	bf00      	nop
    d7f0:	00021a28 	.word	0x00021a28
    d7f4:	00021a68 	.word	0x00021a68
    d7f8:	00021a58 	.word	0x00021a58
    d7fc:	00023b68 	.word	0x00023b68
                } else {
                    // not enough room in table, rehash it
                    mp_map_rehash(map);
    d800:	68f8      	ldr	r0, [r7, #12]
    d802:	f7ff fe45 	bl	d490 <mp_map_rehash>
                    // restart the search for the new element
                    start_pos = pos = hash % map->alloc;
    d806:	68fb      	ldr	r3, [r7, #12]
    d808:	685a      	ldr	r2, [r3, #4]
    d80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d80c:	fbb3 f1f2 	udiv	r1, r3, r2
    d810:	fb02 f201 	mul.w	r2, r2, r1
    d814:	1a9b      	subs	r3, r3, r2
    d816:	623b      	str	r3, [r7, #32]
    d818:	6a3b      	ldr	r3, [r7, #32]
    d81a:	61fb      	str	r3, [r7, #28]
    d81c:	e731      	b.n	d682 <mp_map_lookup+0x142>
                }
            } else {
                return NULL;
    d81e:	2300      	movs	r3, #0
            }
        }
    }
}
    d820:	4618      	mov	r0, r3
    d822:	3730      	adds	r7, #48	; 0x30
    d824:	46bd      	mov	sp, r7
    d826:	bd80      	pop	{r7, pc}

0000d828 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
    d828:	b480      	push	{r7}
    d82a:	b083      	sub	sp, #12
    d82c:	af00      	add	r7, sp, #0
    d82e:	6078      	str	r0, [r7, #4]
    d830:	687b      	ldr	r3, [r7, #4]
    d832:	f003 0301 	and.w	r3, r3, #1
    d836:	2b00      	cmp	r3, #0
    d838:	bf14      	ite	ne
    d83a:	2301      	movne	r3, #1
    d83c:	2300      	moveq	r3, #0
    d83e:	b2db      	uxtb	r3, r3
    d840:	4618      	mov	r0, r3
    d842:	370c      	adds	r7, #12
    d844:	46bd      	mov	sp, r7
    d846:	f85d 7b04 	ldr.w	r7, [sp], #4
    d84a:	4770      	bx	lr

0000d84c <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
    d84c:	b480      	push	{r7}
    d84e:	b083      	sub	sp, #12
    d850:	af00      	add	r7, sp, #0
    d852:	6078      	str	r0, [r7, #4]
    d854:	687b      	ldr	r3, [r7, #4]
    d856:	f003 0303 	and.w	r3, r3, #3
    d85a:	2b02      	cmp	r3, #2
    d85c:	bf0c      	ite	eq
    d85e:	2301      	moveq	r3, #1
    d860:	2300      	movne	r3, #0
    d862:	b2db      	uxtb	r3, r3
    d864:	4618      	mov	r0, r3
    d866:	370c      	adds	r7, #12
    d868:	46bd      	mov	sp, r7
    d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
    d86e:	4770      	bx	lr

0000d870 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    d870:	b480      	push	{r7}
    d872:	b083      	sub	sp, #12
    d874:	af00      	add	r7, sp, #0
    d876:	6078      	str	r0, [r7, #4]
    d878:	687b      	ldr	r3, [r7, #4]
    d87a:	f003 0303 	and.w	r3, r3, #3
    d87e:	2b00      	cmp	r3, #0
    d880:	bf0c      	ite	eq
    d882:	2301      	moveq	r3, #1
    d884:	2300      	movne	r3, #0
    d886:	b2db      	uxtb	r3, r3
    d888:	4618      	mov	r0, r3
    d88a:	370c      	adds	r7, #12
    d88c:	46bd      	mov	sp, r7
    d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d892:	4770      	bx	lr

0000d894 <mp_obj_get_type>:
#include "py/objstr.h"
#include "py/runtime.h"
#include "py/stackctrl.h"
#include "py/stream.h" // for mp_obj_print

mp_obj_type_t *mp_obj_get_type(mp_const_obj_t o_in) {
    d894:	b580      	push	{r7, lr}
    d896:	b084      	sub	sp, #16
    d898:	af00      	add	r7, sp, #0
    d89a:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_SMALL_INT(o_in)) {
    d89c:	6878      	ldr	r0, [r7, #4]
    d89e:	f7ff ffc3 	bl	d828 <MP_OBJ_IS_SMALL_INT>
    d8a2:	4603      	mov	r3, r0
    d8a4:	2b00      	cmp	r3, #0
    d8a6:	d001      	beq.n	d8ac <mp_obj_get_type+0x18>
        return (mp_obj_type_t*)&mp_type_int;
    d8a8:	4b08      	ldr	r3, [pc, #32]	; (d8cc <mp_obj_get_type+0x38>)
    d8aa:	e00b      	b.n	d8c4 <mp_obj_get_type+0x30>
    } else if (MP_OBJ_IS_QSTR(o_in)) {
    d8ac:	6878      	ldr	r0, [r7, #4]
    d8ae:	f7ff ffcd 	bl	d84c <MP_OBJ_IS_QSTR>
    d8b2:	4603      	mov	r3, r0
    d8b4:	2b00      	cmp	r3, #0
    d8b6:	d001      	beq.n	d8bc <mp_obj_get_type+0x28>
        return (mp_obj_type_t*)&mp_type_str;
    d8b8:	4b05      	ldr	r3, [pc, #20]	; (d8d0 <mp_obj_get_type+0x3c>)
    d8ba:	e003      	b.n	d8c4 <mp_obj_get_type+0x30>
    #if MICROPY_PY_BUILTINS_FLOAT
    } else if (mp_obj_is_float(o_in)) {
        return (mp_obj_type_t*)&mp_type_float;
    #endif
    } else {
        const mp_obj_base_t *o = MP_OBJ_TO_PTR(o_in);
    d8bc:	687b      	ldr	r3, [r7, #4]
    d8be:	60fb      	str	r3, [r7, #12]
        return (mp_obj_type_t*)o->type;
    d8c0:	68fb      	ldr	r3, [r7, #12]
    d8c2:	681b      	ldr	r3, [r3, #0]
    }
}
    d8c4:	4618      	mov	r0, r3
    d8c6:	3710      	adds	r7, #16
    d8c8:	46bd      	mov	sp, r7
    d8ca:	bd80      	pop	{r7, pc}
    d8cc:	00022f80 	.word	0x00022f80
    d8d0:	00023b68 	.word	0x00023b68

0000d8d4 <mp_obj_get_type_str>:

const char *mp_obj_get_type_str(mp_const_obj_t o_in) {
    d8d4:	b580      	push	{r7, lr}
    d8d6:	b082      	sub	sp, #8
    d8d8:	af00      	add	r7, sp, #0
    d8da:	6078      	str	r0, [r7, #4]
    return qstr_str(mp_obj_get_type(o_in)->name);
    d8dc:	6878      	ldr	r0, [r7, #4]
    d8de:	f7ff ffd9 	bl	d894 <mp_obj_get_type>
    d8e2:	4603      	mov	r3, r0
    d8e4:	88db      	ldrh	r3, [r3, #6]
    d8e6:	4618      	mov	r0, r3
    d8e8:	f7f3 fd4e 	bl	1388 <qstr_str>
    d8ec:	4603      	mov	r3, r0
}
    d8ee:	4618      	mov	r0, r3
    d8f0:	3708      	adds	r7, #8
    d8f2:	46bd      	mov	sp, r7
    d8f4:	bd80      	pop	{r7, pc}
    d8f6:	bf00      	nop

0000d8f8 <mp_obj_print_helper>:

void mp_obj_print_helper(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
    d8f8:	b580      	push	{r7, lr}
    d8fa:	b086      	sub	sp, #24
    d8fc:	af00      	add	r7, sp, #0
    d8fe:	60f8      	str	r0, [r7, #12]
    d900:	60b9      	str	r1, [r7, #8]
    d902:	607a      	str	r2, [r7, #4]
    // There can be data structures nested too deep, or just recursive
    MP_STACK_CHECK();
#ifndef NDEBUG
    if (o_in == MP_OBJ_NULL) {
    d904:	68bb      	ldr	r3, [r7, #8]
    d906:	2b00      	cmp	r3, #0
    d908:	d104      	bne.n	d914 <mp_obj_print_helper+0x1c>
        mp_print_str(print, "(nil)");
    d90a:	490f      	ldr	r1, [pc, #60]	; (d948 <mp_obj_print_helper+0x50>)
    d90c:	68f8      	ldr	r0, [r7, #12]
    d90e:	f7f4 f87f 	bl	1a10 <mp_print_str>
        return;
    d912:	e015      	b.n	d940 <mp_obj_print_helper+0x48>
    }
#endif
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    d914:	68b8      	ldr	r0, [r7, #8]
    d916:	f7ff ffbd 	bl	d894 <mp_obj_get_type>
    d91a:	6178      	str	r0, [r7, #20]
    if (type->print != NULL) {
    d91c:	697b      	ldr	r3, [r7, #20]
    d91e:	689b      	ldr	r3, [r3, #8]
    d920:	2b00      	cmp	r3, #0
    d922:	d006      	beq.n	d932 <mp_obj_print_helper+0x3a>
        type->print((mp_print_t*)print, o_in, kind);
    d924:	697b      	ldr	r3, [r7, #20]
    d926:	689b      	ldr	r3, [r3, #8]
    d928:	687a      	ldr	r2, [r7, #4]
    d92a:	68b9      	ldr	r1, [r7, #8]
    d92c:	68f8      	ldr	r0, [r7, #12]
    d92e:	4798      	blx	r3
    d930:	e006      	b.n	d940 <mp_obj_print_helper+0x48>
    } else {
        mp_printf(print, "<%q>", type->name);
    d932:	697b      	ldr	r3, [r7, #20]
    d934:	88db      	ldrh	r3, [r3, #6]
    d936:	461a      	mov	r2, r3
    d938:	4904      	ldr	r1, [pc, #16]	; (d94c <mp_obj_print_helper+0x54>)
    d93a:	68f8      	ldr	r0, [r7, #12]
    d93c:	f7f4 fb7c 	bl	2038 <mp_printf>
    }
}
    d940:	3718      	adds	r7, #24
    d942:	46bd      	mov	sp, r7
    d944:	bd80      	pop	{r7, pc}
    d946:	bf00      	nop
    d948:	00021a78 	.word	0x00021a78
    d94c:	00021a80 	.word	0x00021a80

0000d950 <mp_obj_print>:

void mp_obj_print(mp_obj_t o_in, mp_print_kind_t kind) {
    d950:	b580      	push	{r7, lr}
    d952:	b082      	sub	sp, #8
    d954:	af00      	add	r7, sp, #0
    d956:	6078      	str	r0, [r7, #4]
    d958:	6039      	str	r1, [r7, #0]
    mp_obj_print_helper(MP_PYTHON_PRINTER, o_in, kind);
    d95a:	683a      	ldr	r2, [r7, #0]
    d95c:	6879      	ldr	r1, [r7, #4]
    d95e:	4803      	ldr	r0, [pc, #12]	; (d96c <mp_obj_print+0x1c>)
    d960:	f7ff ffca 	bl	d8f8 <mp_obj_print_helper>
}
    d964:	bf00      	nop
    d966:	3708      	adds	r7, #8
    d968:	46bd      	mov	sp, r7
    d96a:	bd80      	pop	{r7, pc}
    d96c:	0001f884 	.word	0x0001f884

0000d970 <mp_obj_print_exception>:

// helper function to print an exception with traceback
void mp_obj_print_exception(const mp_print_t *print, mp_obj_t exc) {
    d970:	b580      	push	{r7, lr}
    d972:	b086      	sub	sp, #24
    d974:	af00      	add	r7, sp, #0
    d976:	6078      	str	r0, [r7, #4]
    d978:	6039      	str	r1, [r7, #0]
    if (mp_obj_is_exception_instance(exc)) {
    d97a:	6838      	ldr	r0, [r7, #0]
    d97c:	f001 ff68 	bl	f850 <mp_obj_is_exception_instance>
    d980:	4603      	mov	r3, r0
    d982:	2b00      	cmp	r3, #0
    d984:	d047      	beq.n	da16 <mp_obj_print_exception+0xa6>
        size_t n, *values;
        mp_obj_exception_get_traceback(exc, &n, &values);
    d986:	f107 0208 	add.w	r2, r7, #8
    d98a:	f107 030c 	add.w	r3, r7, #12
    d98e:	4619      	mov	r1, r3
    d990:	6838      	ldr	r0, [r7, #0]
    d992:	f002 f82f 	bl	f9f4 <mp_obj_exception_get_traceback>
        if (n > 0) {
    d996:	68fb      	ldr	r3, [r7, #12]
    d998:	2b00      	cmp	r3, #0
    d99a:	d03c      	beq.n	da16 <mp_obj_print_exception+0xa6>
            assert(n % 3 == 0);
    d99c:	68f9      	ldr	r1, [r7, #12]
    d99e:	4b24      	ldr	r3, [pc, #144]	; (da30 <mp_obj_print_exception+0xc0>)
    d9a0:	fba3 2301 	umull	r2, r3, r3, r1
    d9a4:	085a      	lsrs	r2, r3, #1
    d9a6:	4613      	mov	r3, r2
    d9a8:	005b      	lsls	r3, r3, #1
    d9aa:	4413      	add	r3, r2
    d9ac:	1aca      	subs	r2, r1, r3
    d9ae:	2a00      	cmp	r2, #0
    d9b0:	d005      	beq.n	d9be <mp_obj_print_exception+0x4e>
    d9b2:	4b20      	ldr	r3, [pc, #128]	; (da34 <mp_obj_print_exception+0xc4>)
    d9b4:	4a20      	ldr	r2, [pc, #128]	; (da38 <mp_obj_print_exception+0xc8>)
    d9b6:	2156      	movs	r1, #86	; 0x56
    d9b8:	4820      	ldr	r0, [pc, #128]	; (da3c <mp_obj_print_exception+0xcc>)
    d9ba:	f00d fee3 	bl	1b784 <__assert_func>
            mp_print_str(print, "Traceback (most recent call last):\n");
    d9be:	4920      	ldr	r1, [pc, #128]	; (da40 <mp_obj_print_exception+0xd0>)
    d9c0:	6878      	ldr	r0, [r7, #4]
    d9c2:	f7f4 f825 	bl	1a10 <mp_print_str>
            for (int i = n - 3; i >= 0; i -= 3) {
    d9c6:	68fb      	ldr	r3, [r7, #12]
    d9c8:	3b03      	subs	r3, #3
    d9ca:	617b      	str	r3, [r7, #20]
    d9cc:	e020      	b.n	da10 <mp_obj_print_exception+0xa0>
#if MICROPY_ENABLE_SOURCE_LINE
                mp_printf(print, "  File \"%q\", line %d", values[i], (int)values[i + 1]);
#else
                mp_printf(print, "  File \"%q\"", values[i]);
    d9ce:	68ba      	ldr	r2, [r7, #8]
    d9d0:	697b      	ldr	r3, [r7, #20]
    d9d2:	009b      	lsls	r3, r3, #2
    d9d4:	4413      	add	r3, r2
    d9d6:	681b      	ldr	r3, [r3, #0]
    d9d8:	461a      	mov	r2, r3
    d9da:	491a      	ldr	r1, [pc, #104]	; (da44 <mp_obj_print_exception+0xd4>)
    d9dc:	6878      	ldr	r0, [r7, #4]
    d9de:	f7f4 fb2b 	bl	2038 <mp_printf>
#endif
                // the block name can be NULL if it's unknown
                qstr block = values[i + 2];
    d9e2:	68ba      	ldr	r2, [r7, #8]
    d9e4:	697b      	ldr	r3, [r7, #20]
    d9e6:	3302      	adds	r3, #2
    d9e8:	009b      	lsls	r3, r3, #2
    d9ea:	4413      	add	r3, r2
    d9ec:	681b      	ldr	r3, [r3, #0]
    d9ee:	613b      	str	r3, [r7, #16]
                if (block == MP_QSTR_NULL) {
    d9f0:	693b      	ldr	r3, [r7, #16]
    d9f2:	2b00      	cmp	r3, #0
    d9f4:	d104      	bne.n	da00 <mp_obj_print_exception+0x90>
                    mp_print_str(print, "\n");
    d9f6:	4914      	ldr	r1, [pc, #80]	; (da48 <mp_obj_print_exception+0xd8>)
    d9f8:	6878      	ldr	r0, [r7, #4]
    d9fa:	f7f4 f809 	bl	1a10 <mp_print_str>
    d9fe:	e004      	b.n	da0a <mp_obj_print_exception+0x9a>
                } else {
                    mp_printf(print, ", in %q\n", block);
    da00:	693a      	ldr	r2, [r7, #16]
    da02:	4912      	ldr	r1, [pc, #72]	; (da4c <mp_obj_print_exception+0xdc>)
    da04:	6878      	ldr	r0, [r7, #4]
    da06:	f7f4 fb17 	bl	2038 <mp_printf>
            for (int i = n - 3; i >= 0; i -= 3) {
    da0a:	697b      	ldr	r3, [r7, #20]
    da0c:	3b03      	subs	r3, #3
    da0e:	617b      	str	r3, [r7, #20]
    da10:	697b      	ldr	r3, [r7, #20]
    da12:	2b00      	cmp	r3, #0
    da14:	dadb      	bge.n	d9ce <mp_obj_print_exception+0x5e>
                }
            }
        }
    }
    mp_obj_print_helper(print, exc, PRINT_EXC);
    da16:	2202      	movs	r2, #2
    da18:	6839      	ldr	r1, [r7, #0]
    da1a:	6878      	ldr	r0, [r7, #4]
    da1c:	f7ff ff6c 	bl	d8f8 <mp_obj_print_helper>
    mp_print_str(print, "\n");
    da20:	4909      	ldr	r1, [pc, #36]	; (da48 <mp_obj_print_exception+0xd8>)
    da22:	6878      	ldr	r0, [r7, #4]
    da24:	f7f3 fff4 	bl	1a10 <mp_print_str>
}
    da28:	bf00      	nop
    da2a:	3718      	adds	r7, #24
    da2c:	46bd      	mov	sp, r7
    da2e:	bd80      	pop	{r7, pc}
    da30:	aaaaaaab 	.word	0xaaaaaaab
    da34:	00021a88 	.word	0x00021a88
    da38:	00021bf4 	.word	0x00021bf4
    da3c:	00021a94 	.word	0x00021a94
    da40:	00021aa4 	.word	0x00021aa4
    da44:	00021ac8 	.word	0x00021ac8
    da48:	00021ad4 	.word	0x00021ad4
    da4c:	00021ad8 	.word	0x00021ad8

0000da50 <mp_obj_is_true>:

bool mp_obj_is_true(mp_obj_t arg) {
    da50:	b580      	push	{r7, lr}
    da52:	b086      	sub	sp, #24
    da54:	af00      	add	r7, sp, #0
    da56:	6078      	str	r0, [r7, #4]
    if (arg == mp_const_false) {
    da58:	687b      	ldr	r3, [r7, #4]
    da5a:	4a25      	ldr	r2, [pc, #148]	; (daf0 <mp_obj_is_true+0xa0>)
    da5c:	4293      	cmp	r3, r2
    da5e:	d101      	bne.n	da64 <mp_obj_is_true+0x14>
        return 0;
    da60:	2300      	movs	r3, #0
    da62:	e041      	b.n	dae8 <mp_obj_is_true+0x98>
    } else if (arg == mp_const_true) {
    da64:	687b      	ldr	r3, [r7, #4]
    da66:	4a23      	ldr	r2, [pc, #140]	; (daf4 <mp_obj_is_true+0xa4>)
    da68:	4293      	cmp	r3, r2
    da6a:	d101      	bne.n	da70 <mp_obj_is_true+0x20>
        return 1;
    da6c:	2301      	movs	r3, #1
    da6e:	e03b      	b.n	dae8 <mp_obj_is_true+0x98>
    } else if (arg == mp_const_none) {
    da70:	687b      	ldr	r3, [r7, #4]
    da72:	4a21      	ldr	r2, [pc, #132]	; (daf8 <mp_obj_is_true+0xa8>)
    da74:	4293      	cmp	r3, r2
    da76:	d101      	bne.n	da7c <mp_obj_is_true+0x2c>
        return 0;
    da78:	2300      	movs	r3, #0
    da7a:	e035      	b.n	dae8 <mp_obj_is_true+0x98>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    da7c:	6878      	ldr	r0, [r7, #4]
    da7e:	f7ff fed3 	bl	d828 <MP_OBJ_IS_SMALL_INT>
    da82:	4603      	mov	r3, r0
    da84:	2b00      	cmp	r3, #0
    da86:	d007      	beq.n	da98 <mp_obj_is_true+0x48>
        if (MP_OBJ_SMALL_INT_VALUE(arg) == 0) {
    da88:	687b      	ldr	r3, [r7, #4]
    da8a:	105b      	asrs	r3, r3, #1
    da8c:	2b00      	cmp	r3, #0
    da8e:	d101      	bne.n	da94 <mp_obj_is_true+0x44>
            return 0;
    da90:	2300      	movs	r3, #0
    da92:	e029      	b.n	dae8 <mp_obj_is_true+0x98>
        } else {
            return 1;
    da94:	2301      	movs	r3, #1
    da96:	e027      	b.n	dae8 <mp_obj_is_true+0x98>
        }
    } else {
        mp_obj_type_t *type = mp_obj_get_type(arg);
    da98:	6878      	ldr	r0, [r7, #4]
    da9a:	f7ff fefb 	bl	d894 <mp_obj_get_type>
    da9e:	6178      	str	r0, [r7, #20]
        if (type->unary_op != NULL) {
    daa0:	697b      	ldr	r3, [r7, #20]
    daa2:	695b      	ldr	r3, [r3, #20]
    daa4:	2b00      	cmp	r3, #0
    daa6:	d010      	beq.n	daca <mp_obj_is_true+0x7a>
            mp_obj_t result = type->unary_op(MP_UNARY_OP_BOOL, arg);
    daa8:	697b      	ldr	r3, [r7, #20]
    daaa:	695b      	ldr	r3, [r3, #20]
    daac:	6879      	ldr	r1, [r7, #4]
    daae:	2004      	movs	r0, #4
    dab0:	4798      	blx	r3
    dab2:	6138      	str	r0, [r7, #16]
            if (result != MP_OBJ_NULL) {
    dab4:	693b      	ldr	r3, [r7, #16]
    dab6:	2b00      	cmp	r3, #0
    dab8:	d007      	beq.n	daca <mp_obj_is_true+0x7a>
                return result == mp_const_true;
    daba:	693b      	ldr	r3, [r7, #16]
    dabc:	4a0d      	ldr	r2, [pc, #52]	; (daf4 <mp_obj_is_true+0xa4>)
    dabe:	4293      	cmp	r3, r2
    dac0:	bf0c      	ite	eq
    dac2:	2301      	moveq	r3, #1
    dac4:	2300      	movne	r3, #0
    dac6:	b2db      	uxtb	r3, r3
    dac8:	e00e      	b.n	dae8 <mp_obj_is_true+0x98>
            }
        }

        mp_obj_t len = mp_obj_len_maybe(arg);
    daca:	6878      	ldr	r0, [r7, #4]
    dacc:	f000 fa3c 	bl	df48 <mp_obj_len_maybe>
    dad0:	60f8      	str	r0, [r7, #12]
        if (len != MP_OBJ_NULL) {
    dad2:	68fb      	ldr	r3, [r7, #12]
    dad4:	2b00      	cmp	r3, #0
    dad6:	d006      	beq.n	dae6 <mp_obj_is_true+0x96>
            // obj has a length, truth determined if len != 0
            return len != MP_OBJ_NEW_SMALL_INT(0);
    dad8:	68fb      	ldr	r3, [r7, #12]
    dada:	2b01      	cmp	r3, #1
    dadc:	bf14      	ite	ne
    dade:	2301      	movne	r3, #1
    dae0:	2300      	moveq	r3, #0
    dae2:	b2db      	uxtb	r3, r3
    dae4:	e000      	b.n	dae8 <mp_obj_is_true+0x98>
        } else {
            // any other obj is true per Python semantics
            return 1;
    dae6:	2301      	movs	r3, #1
        }
    }
}
    dae8:	4618      	mov	r0, r3
    daea:	3718      	adds	r7, #24
    daec:	46bd      	mov	sp, r7
    daee:	bd80      	pop	{r7, pc}
    daf0:	00021c58 	.word	0x00021c58
    daf4:	00021c60 	.word	0x00021c60
    daf8:	000234d4 	.word	0x000234d4

0000dafc <mp_obj_is_callable>:

bool mp_obj_is_callable(mp_obj_t o_in) {
    dafc:	b580      	push	{r7, lr}
    dafe:	b084      	sub	sp, #16
    db00:	af00      	add	r7, sp, #0
    db02:	6078      	str	r0, [r7, #4]
    mp_call_fun_t call = mp_obj_get_type(o_in)->call;
    db04:	6878      	ldr	r0, [r7, #4]
    db06:	f7ff fec5 	bl	d894 <mp_obj_get_type>
    db0a:	4603      	mov	r3, r0
    db0c:	691b      	ldr	r3, [r3, #16]
    db0e:	60fb      	str	r3, [r7, #12]
    if (call != mp_obj_instance_call) {
    db10:	68fb      	ldr	r3, [r7, #12]
    db12:	4a09      	ldr	r2, [pc, #36]	; (db38 <mp_obj_is_callable+0x3c>)
    db14:	4293      	cmp	r3, r2
    db16:	d006      	beq.n	db26 <mp_obj_is_callable+0x2a>
        return call != NULL;
    db18:	68fb      	ldr	r3, [r7, #12]
    db1a:	2b00      	cmp	r3, #0
    db1c:	bf14      	ite	ne
    db1e:	2301      	movne	r3, #1
    db20:	2300      	moveq	r3, #0
    db22:	b2db      	uxtb	r3, r3
    db24:	e003      	b.n	db2e <mp_obj_is_callable+0x32>
    }
    return mp_obj_instance_is_callable(o_in);
    db26:	6878      	ldr	r0, [r7, #4]
    db28:	f009 f8d2 	bl	16cd0 <mp_obj_instance_is_callable>
    db2c:	4603      	mov	r3, r0
}
    db2e:	4618      	mov	r0, r3
    db30:	3710      	adds	r7, #16
    db32:	46bd      	mov	sp, r7
    db34:	bd80      	pop	{r7, pc}
    db36:	bf00      	nop
    db38:	00016d01 	.word	0x00016d01

0000db3c <mp_obj_equal>:
// This means that False==0 and True==1 are true expressions.
//
// Furthermore, from the v3.4.2 code for object.c: "Practical amendments: If rich
// comparison returns NotImplemented, == and != are decided by comparing the object
// pointer."
bool mp_obj_equal(mp_obj_t o1, mp_obj_t o2) {
    db3c:	b580      	push	{r7, lr}
    db3e:	b086      	sub	sp, #24
    db40:	af00      	add	r7, sp, #0
    db42:	6078      	str	r0, [r7, #4]
    db44:	6039      	str	r1, [r7, #0]
    // Float (and complex) NaN is never equal to anything, not even itself,
    // so we must have a special check here to cover those cases.
    if (o1 == o2
    db46:	687a      	ldr	r2, [r7, #4]
    db48:	683b      	ldr	r3, [r7, #0]
    db4a:	429a      	cmp	r2, r3
    db4c:	d101      	bne.n	db52 <mp_obj_equal+0x16>
        #endif
        #if MICROPY_PY_BUILTINS_COMPLEX
        && !MP_OBJ_IS_TYPE(o1, &mp_type_complex)
        #endif
        ) {
        return true;
    db4e:	2301      	movs	r3, #1
    db50:	e073      	b.n	dc3a <mp_obj_equal+0xfe>
    }
    if (o1 == mp_const_none || o2 == mp_const_none) {
    db52:	687b      	ldr	r3, [r7, #4]
    db54:	4a3b      	ldr	r2, [pc, #236]	; (dc44 <mp_obj_equal+0x108>)
    db56:	4293      	cmp	r3, r2
    db58:	d003      	beq.n	db62 <mp_obj_equal+0x26>
    db5a:	683b      	ldr	r3, [r7, #0]
    db5c:	4a39      	ldr	r2, [pc, #228]	; (dc44 <mp_obj_equal+0x108>)
    db5e:	4293      	cmp	r3, r2
    db60:	d101      	bne.n	db66 <mp_obj_equal+0x2a>
        return false;
    db62:	2300      	movs	r3, #0
    db64:	e069      	b.n	dc3a <mp_obj_equal+0xfe>
    }

    // fast path for small ints
    if (MP_OBJ_IS_SMALL_INT(o1)) {
    db66:	6878      	ldr	r0, [r7, #4]
    db68:	f7ff fe5e 	bl	d828 <MP_OBJ_IS_SMALL_INT>
    db6c:	4603      	mov	r3, r0
    db6e:	2b00      	cmp	r3, #0
    db70:	d00d      	beq.n	db8e <mp_obj_equal+0x52>
        if (MP_OBJ_IS_SMALL_INT(o2)) {
    db72:	6838      	ldr	r0, [r7, #0]
    db74:	f7ff fe58 	bl	d828 <MP_OBJ_IS_SMALL_INT>
    db78:	4603      	mov	r3, r0
    db7a:	2b00      	cmp	r3, #0
    db7c:	d001      	beq.n	db82 <mp_obj_equal+0x46>
            // both SMALL_INT, and not equal if we get here
            return false;
    db7e:	2300      	movs	r3, #0
    db80:	e05b      	b.n	dc3a <mp_obj_equal+0xfe>
        } else {
            mp_obj_t temp = o2; o2 = o1; o1 = temp;
    db82:	683b      	ldr	r3, [r7, #0]
    db84:	617b      	str	r3, [r7, #20]
    db86:	687b      	ldr	r3, [r7, #4]
    db88:	603b      	str	r3, [r7, #0]
    db8a:	697b      	ldr	r3, [r7, #20]
    db8c:	607b      	str	r3, [r7, #4]
            // fall through to generic op
        }
    }

    // fast path for strings
    if (MP_OBJ_IS_STR(o1)) {
    db8e:	6878      	ldr	r0, [r7, #4]
    db90:	f7ff fe5c 	bl	d84c <MP_OBJ_IS_QSTR>
    db94:	4603      	mov	r3, r0
    db96:	2b00      	cmp	r3, #0
    db98:	d10a      	bne.n	dbb0 <mp_obj_equal+0x74>
    db9a:	6878      	ldr	r0, [r7, #4]
    db9c:	f7ff fe68 	bl	d870 <MP_OBJ_IS_OBJ>
    dba0:	4603      	mov	r3, r0
    dba2:	2b00      	cmp	r3, #0
    dba4:	d01b      	beq.n	dbde <mp_obj_equal+0xa2>
    dba6:	687b      	ldr	r3, [r7, #4]
    dba8:	681b      	ldr	r3, [r3, #0]
    dbaa:	4a27      	ldr	r2, [pc, #156]	; (dc48 <mp_obj_equal+0x10c>)
    dbac:	4293      	cmp	r3, r2
    dbae:	d116      	bne.n	dbde <mp_obj_equal+0xa2>
        if (MP_OBJ_IS_STR(o2)) {
    dbb0:	6838      	ldr	r0, [r7, #0]
    dbb2:	f7ff fe4b 	bl	d84c <MP_OBJ_IS_QSTR>
    dbb6:	4603      	mov	r3, r0
    dbb8:	2b00      	cmp	r3, #0
    dbba:	d10a      	bne.n	dbd2 <mp_obj_equal+0x96>
    dbbc:	6838      	ldr	r0, [r7, #0]
    dbbe:	f7ff fe57 	bl	d870 <MP_OBJ_IS_OBJ>
    dbc2:	4603      	mov	r3, r0
    dbc4:	2b00      	cmp	r3, #0
    dbc6:	d01b      	beq.n	dc00 <mp_obj_equal+0xc4>
    dbc8:	683b      	ldr	r3, [r7, #0]
    dbca:	681b      	ldr	r3, [r3, #0]
    dbcc:	4a1e      	ldr	r2, [pc, #120]	; (dc48 <mp_obj_equal+0x10c>)
    dbce:	4293      	cmp	r3, r2
    dbd0:	d116      	bne.n	dc00 <mp_obj_equal+0xc4>
            // both strings, use special function
            return mp_obj_str_equal(o1, o2);
    dbd2:	6839      	ldr	r1, [r7, #0]
    dbd4:	6878      	ldr	r0, [r7, #4]
    dbd6:	f007 fd13 	bl	15600 <mp_obj_str_equal>
    dbda:	4603      	mov	r3, r0
    dbdc:	e02d      	b.n	dc3a <mp_obj_equal+0xfe>
        } else {
            // a string is never equal to anything else
            goto str_cmp_err;
        }
    } else if (MP_OBJ_IS_STR(o2)) {
    dbde:	6838      	ldr	r0, [r7, #0]
    dbe0:	f7ff fe34 	bl	d84c <MP_OBJ_IS_QSTR>
    dbe4:	4603      	mov	r3, r0
    dbe6:	2b00      	cmp	r3, #0
    dbe8:	d10a      	bne.n	dc00 <mp_obj_equal+0xc4>
    dbea:	6838      	ldr	r0, [r7, #0]
    dbec:	f7ff fe40 	bl	d870 <MP_OBJ_IS_OBJ>
    dbf0:	4603      	mov	r3, r0
    dbf2:	2b00      	cmp	r3, #0
    dbf4:	d006      	beq.n	dc04 <mp_obj_equal+0xc8>
    dbf6:	683b      	ldr	r3, [r7, #0]
    dbf8:	681b      	ldr	r3, [r3, #0]
    dbfa:	4a13      	ldr	r2, [pc, #76]	; (dc48 <mp_obj_equal+0x10c>)
    dbfc:	4293      	cmp	r3, r2
    dbfe:	d101      	bne.n	dc04 <mp_obj_equal+0xc8>
        #if MICROPY_PY_STR_BYTES_CMP_WARN
        if (MP_OBJ_IS_TYPE(o1, &mp_type_bytes) || MP_OBJ_IS_TYPE(o2, &mp_type_bytes)) {
            mp_warning("Comparison between bytes and str");
        }
        #endif
        return false;
    dc00:	2300      	movs	r3, #0
    dc02:	e01a      	b.n	dc3a <mp_obj_equal+0xfe>
    }

    // generic type, call binary_op(MP_BINARY_OP_EQUAL)
    mp_obj_type_t *type = mp_obj_get_type(o1);
    dc04:	6878      	ldr	r0, [r7, #4]
    dc06:	f7ff fe45 	bl	d894 <mp_obj_get_type>
    dc0a:	6138      	str	r0, [r7, #16]
    if (type->binary_op != NULL) {
    dc0c:	693b      	ldr	r3, [r7, #16]
    dc0e:	699b      	ldr	r3, [r3, #24]
    dc10:	2b00      	cmp	r3, #0
    dc12:	d011      	beq.n	dc38 <mp_obj_equal+0xfc>
        mp_obj_t r = type->binary_op(MP_BINARY_OP_EQUAL, o1, o2);
    dc14:	693b      	ldr	r3, [r7, #16]
    dc16:	699b      	ldr	r3, [r3, #24]
    dc18:	683a      	ldr	r2, [r7, #0]
    dc1a:	6879      	ldr	r1, [r7, #4]
    dc1c:	2002      	movs	r0, #2
    dc1e:	4798      	blx	r3
    dc20:	60f8      	str	r0, [r7, #12]
        if (r != MP_OBJ_NULL) {
    dc22:	68fb      	ldr	r3, [r7, #12]
    dc24:	2b00      	cmp	r3, #0
    dc26:	d007      	beq.n	dc38 <mp_obj_equal+0xfc>
            return r == mp_const_true ? true : false;
    dc28:	68fb      	ldr	r3, [r7, #12]
    dc2a:	4a08      	ldr	r2, [pc, #32]	; (dc4c <mp_obj_equal+0x110>)
    dc2c:	4293      	cmp	r3, r2
    dc2e:	bf0c      	ite	eq
    dc30:	2301      	moveq	r3, #1
    dc32:	2300      	movne	r3, #0
    dc34:	b2db      	uxtb	r3, r3
    dc36:	e000      	b.n	dc3a <mp_obj_equal+0xfe>
        }
    }

    // equality not implemented, and objects are not the same object, so
    // they are defined as not equal
    return false;
    dc38:	2300      	movs	r3, #0
}
    dc3a:	4618      	mov	r0, r3
    dc3c:	3718      	adds	r7, #24
    dc3e:	46bd      	mov	sp, r7
    dc40:	bd80      	pop	{r7, pc}
    dc42:	bf00      	nop
    dc44:	000234d4 	.word	0x000234d4
    dc48:	00023b68 	.word	0x00023b68
    dc4c:	00021c60 	.word	0x00021c60

0000dc50 <mp_obj_get_int>:

mp_int_t mp_obj_get_int(mp_const_obj_t arg) {
    dc50:	b580      	push	{r7, lr}
    dc52:	b084      	sub	sp, #16
    dc54:	af00      	add	r7, sp, #0
    dc56:	6078      	str	r0, [r7, #4]
    // This function essentially performs implicit type conversion to int
    // Note that Python does NOT provide implicit type conversion from
    // float to int in the core expression language, try some_list[1.0].
    if (arg == mp_const_false) {
    dc58:	687b      	ldr	r3, [r7, #4]
    dc5a:	4a18      	ldr	r2, [pc, #96]	; (dcbc <mp_obj_get_int+0x6c>)
    dc5c:	4293      	cmp	r3, r2
    dc5e:	d101      	bne.n	dc64 <mp_obj_get_int+0x14>
        return 0;
    dc60:	2300      	movs	r3, #0
    dc62:	e027      	b.n	dcb4 <mp_obj_get_int+0x64>
    } else if (arg == mp_const_true) {
    dc64:	687b      	ldr	r3, [r7, #4]
    dc66:	4a16      	ldr	r2, [pc, #88]	; (dcc0 <mp_obj_get_int+0x70>)
    dc68:	4293      	cmp	r3, r2
    dc6a:	d101      	bne.n	dc70 <mp_obj_get_int+0x20>
        return 1;
    dc6c:	2301      	movs	r3, #1
    dc6e:	e021      	b.n	dcb4 <mp_obj_get_int+0x64>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    dc70:	6878      	ldr	r0, [r7, #4]
    dc72:	f7ff fdd9 	bl	d828 <MP_OBJ_IS_SMALL_INT>
    dc76:	4603      	mov	r3, r0
    dc78:	2b00      	cmp	r3, #0
    dc7a:	d002      	beq.n	dc82 <mp_obj_get_int+0x32>
        return MP_OBJ_SMALL_INT_VALUE(arg);
    dc7c:	687b      	ldr	r3, [r7, #4]
    dc7e:	105b      	asrs	r3, r3, #1
    dc80:	e018      	b.n	dcb4 <mp_obj_get_int+0x64>
    } else if (MP_OBJ_IS_TYPE(arg, &mp_type_int)) {
    dc82:	6878      	ldr	r0, [r7, #4]
    dc84:	f7ff fdf4 	bl	d870 <MP_OBJ_IS_OBJ>
    dc88:	4603      	mov	r3, r0
    dc8a:	2b00      	cmp	r3, #0
    dc8c:	d009      	beq.n	dca2 <mp_obj_get_int+0x52>
    dc8e:	687b      	ldr	r3, [r7, #4]
    dc90:	681b      	ldr	r3, [r3, #0]
    dc92:	4a0c      	ldr	r2, [pc, #48]	; (dcc4 <mp_obj_get_int+0x74>)
    dc94:	4293      	cmp	r3, r2
    dc96:	d104      	bne.n	dca2 <mp_obj_get_int+0x52>
        return mp_obj_int_get_checked(arg);
    dc98:	6878      	ldr	r0, [r7, #4]
    dc9a:	f002 fec9 	bl	10a30 <mp_obj_int_get_checked>
    dc9e:	4603      	mov	r3, r0
    dca0:	e008      	b.n	dcb4 <mp_obj_get_int+0x64>
    } else {
        mp_obj_t res = mp_unary_op(MP_UNARY_OP_INT, (mp_obj_t)arg);
    dca2:	6879      	ldr	r1, [r7, #4]
    dca4:	2008      	movs	r0, #8
    dca6:	f7fd fd4d 	bl	b744 <mp_unary_op>
    dcaa:	60f8      	str	r0, [r7, #12]
        return mp_obj_int_get_checked(res);
    dcac:	68f8      	ldr	r0, [r7, #12]
    dcae:	f002 febf 	bl	10a30 <mp_obj_int_get_checked>
    dcb2:	4603      	mov	r3, r0
    }
}
    dcb4:	4618      	mov	r0, r3
    dcb6:	3710      	adds	r7, #16
    dcb8:	46bd      	mov	sp, r7
    dcba:	bd80      	pop	{r7, pc}
    dcbc:	00021c58 	.word	0x00021c58
    dcc0:	00021c60 	.word	0x00021c60
    dcc4:	00022f80 	.word	0x00022f80

0000dcc8 <mp_obj_get_int_truncated>:

mp_int_t mp_obj_get_int_truncated(mp_const_obj_t arg) {
    dcc8:	b580      	push	{r7, lr}
    dcca:	b082      	sub	sp, #8
    dccc:	af00      	add	r7, sp, #0
    dcce:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_INT(arg)) {
    dcd0:	6878      	ldr	r0, [r7, #4]
    dcd2:	f7ff fda9 	bl	d828 <MP_OBJ_IS_SMALL_INT>
    dcd6:	4603      	mov	r3, r0
    dcd8:	2b00      	cmp	r3, #0
    dcda:	d10a      	bne.n	dcf2 <mp_obj_get_int_truncated+0x2a>
    dcdc:	6878      	ldr	r0, [r7, #4]
    dcde:	f7ff fdc7 	bl	d870 <MP_OBJ_IS_OBJ>
    dce2:	4603      	mov	r3, r0
    dce4:	2b00      	cmp	r3, #0
    dce6:	d009      	beq.n	dcfc <mp_obj_get_int_truncated+0x34>
    dce8:	687b      	ldr	r3, [r7, #4]
    dcea:	681b      	ldr	r3, [r3, #0]
    dcec:	4a07      	ldr	r2, [pc, #28]	; (dd0c <mp_obj_get_int_truncated+0x44>)
    dcee:	4293      	cmp	r3, r2
    dcf0:	d104      	bne.n	dcfc <mp_obj_get_int_truncated+0x34>
        return mp_obj_int_get_truncated(arg);
    dcf2:	6878      	ldr	r0, [r7, #4]
    dcf4:	f002 fe90 	bl	10a18 <mp_obj_int_get_truncated>
    dcf8:	4603      	mov	r3, r0
    dcfa:	e003      	b.n	dd04 <mp_obj_get_int_truncated+0x3c>
    } else {
        return mp_obj_get_int(arg);
    dcfc:	6878      	ldr	r0, [r7, #4]
    dcfe:	f7ff ffa7 	bl	dc50 <mp_obj_get_int>
    dd02:	4603      	mov	r3, r0
    }
}
    dd04:	4618      	mov	r0, r3
    dd06:	3708      	adds	r7, #8
    dd08:	46bd      	mov	sp, r7
    dd0a:	bd80      	pop	{r7, pc}
    dd0c:	00022f80 	.word	0x00022f80

0000dd10 <mp_obj_get_int_maybe>:

// returns false if arg is not of integral type
// returns true and sets *value if it is of integral type
// can throw OverflowError if arg is of integral type, but doesn't fit in a mp_int_t
bool mp_obj_get_int_maybe(mp_const_obj_t arg, mp_int_t *value) {
    dd10:	b580      	push	{r7, lr}
    dd12:	b082      	sub	sp, #8
    dd14:	af00      	add	r7, sp, #0
    dd16:	6078      	str	r0, [r7, #4]
    dd18:	6039      	str	r1, [r7, #0]
    if (arg == mp_const_false) {
    dd1a:	687b      	ldr	r3, [r7, #4]
    dd1c:	4a19      	ldr	r2, [pc, #100]	; (dd84 <mp_obj_get_int_maybe+0x74>)
    dd1e:	4293      	cmp	r3, r2
    dd20:	d103      	bne.n	dd2a <mp_obj_get_int_maybe+0x1a>
        *value = 0;
    dd22:	683b      	ldr	r3, [r7, #0]
    dd24:	2200      	movs	r2, #0
    dd26:	601a      	str	r2, [r3, #0]
    dd28:	e026      	b.n	dd78 <mp_obj_get_int_maybe+0x68>
    } else if (arg == mp_const_true) {
    dd2a:	687b      	ldr	r3, [r7, #4]
    dd2c:	4a16      	ldr	r2, [pc, #88]	; (dd88 <mp_obj_get_int_maybe+0x78>)
    dd2e:	4293      	cmp	r3, r2
    dd30:	d103      	bne.n	dd3a <mp_obj_get_int_maybe+0x2a>
        *value = 1;
    dd32:	683b      	ldr	r3, [r7, #0]
    dd34:	2201      	movs	r2, #1
    dd36:	601a      	str	r2, [r3, #0]
    dd38:	e01e      	b.n	dd78 <mp_obj_get_int_maybe+0x68>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    dd3a:	6878      	ldr	r0, [r7, #4]
    dd3c:	f7ff fd74 	bl	d828 <MP_OBJ_IS_SMALL_INT>
    dd40:	4603      	mov	r3, r0
    dd42:	2b00      	cmp	r3, #0
    dd44:	d004      	beq.n	dd50 <mp_obj_get_int_maybe+0x40>
        *value = MP_OBJ_SMALL_INT_VALUE(arg);
    dd46:	687b      	ldr	r3, [r7, #4]
    dd48:	105a      	asrs	r2, r3, #1
    dd4a:	683b      	ldr	r3, [r7, #0]
    dd4c:	601a      	str	r2, [r3, #0]
    dd4e:	e013      	b.n	dd78 <mp_obj_get_int_maybe+0x68>
    } else if (MP_OBJ_IS_TYPE(arg, &mp_type_int)) {
    dd50:	6878      	ldr	r0, [r7, #4]
    dd52:	f7ff fd8d 	bl	d870 <MP_OBJ_IS_OBJ>
    dd56:	4603      	mov	r3, r0
    dd58:	2b00      	cmp	r3, #0
    dd5a:	d00b      	beq.n	dd74 <mp_obj_get_int_maybe+0x64>
    dd5c:	687b      	ldr	r3, [r7, #4]
    dd5e:	681b      	ldr	r3, [r3, #0]
    dd60:	4a0a      	ldr	r2, [pc, #40]	; (dd8c <mp_obj_get_int_maybe+0x7c>)
    dd62:	4293      	cmp	r3, r2
    dd64:	d106      	bne.n	dd74 <mp_obj_get_int_maybe+0x64>
        *value = mp_obj_int_get_checked(arg);
    dd66:	6878      	ldr	r0, [r7, #4]
    dd68:	f002 fe62 	bl	10a30 <mp_obj_int_get_checked>
    dd6c:	4602      	mov	r2, r0
    dd6e:	683b      	ldr	r3, [r7, #0]
    dd70:	601a      	str	r2, [r3, #0]
    dd72:	e001      	b.n	dd78 <mp_obj_get_int_maybe+0x68>
    } else {
        return false;
    dd74:	2300      	movs	r3, #0
    dd76:	e000      	b.n	dd7a <mp_obj_get_int_maybe+0x6a>
    }
    return true;
    dd78:	2301      	movs	r3, #1
}
    dd7a:	4618      	mov	r0, r3
    dd7c:	3708      	adds	r7, #8
    dd7e:	46bd      	mov	sp, r7
    dd80:	bd80      	pop	{r7, pc}
    dd82:	bf00      	nop
    dd84:	00021c58 	.word	0x00021c58
    dd88:	00021c60 	.word	0x00021c60
    dd8c:	00022f80 	.word	0x00022f80

0000dd90 <mp_obj_get_array>:
}
#endif
#endif

// note: returned value in *items may point to the interior of a GC block
void mp_obj_get_array(mp_obj_t o, size_t *len, mp_obj_t **items) {
    dd90:	b580      	push	{r7, lr}
    dd92:	b084      	sub	sp, #16
    dd94:	af00      	add	r7, sp, #0
    dd96:	60f8      	str	r0, [r7, #12]
    dd98:	60b9      	str	r1, [r7, #8]
    dd9a:	607a      	str	r2, [r7, #4]
    if (MP_OBJ_IS_TYPE(o, &mp_type_tuple)) {
    dd9c:	68f8      	ldr	r0, [r7, #12]
    dd9e:	f7ff fd67 	bl	d870 <MP_OBJ_IS_OBJ>
    dda2:	4603      	mov	r3, r0
    dda4:	2b00      	cmp	r3, #0
    dda6:	d00a      	beq.n	ddbe <mp_obj_get_array+0x2e>
    dda8:	68fb      	ldr	r3, [r7, #12]
    ddaa:	681b      	ldr	r3, [r3, #0]
    ddac:	4a10      	ldr	r2, [pc, #64]	; (ddf0 <mp_obj_get_array+0x60>)
    ddae:	4293      	cmp	r3, r2
    ddb0:	d105      	bne.n	ddbe <mp_obj_get_array+0x2e>
        mp_obj_tuple_get(o, len, items);
    ddb2:	687a      	ldr	r2, [r7, #4]
    ddb4:	68b9      	ldr	r1, [r7, #8]
    ddb6:	68f8      	ldr	r0, [r7, #12]
    ddb8:	f008 f912 	bl	15fe0 <mp_obj_tuple_get>
    ddbc:	e013      	b.n	dde6 <mp_obj_get_array+0x56>
    } else if (MP_OBJ_IS_TYPE(o, &mp_type_list)) {
    ddbe:	68f8      	ldr	r0, [r7, #12]
    ddc0:	f7ff fd56 	bl	d870 <MP_OBJ_IS_OBJ>
    ddc4:	4603      	mov	r3, r0
    ddc6:	2b00      	cmp	r3, #0
    ddc8:	d00a      	beq.n	dde0 <mp_obj_get_array+0x50>
    ddca:	68fb      	ldr	r3, [r7, #12]
    ddcc:	681b      	ldr	r3, [r3, #0]
    ddce:	4a09      	ldr	r2, [pc, #36]	; (ddf4 <mp_obj_get_array+0x64>)
    ddd0:	4293      	cmp	r3, r2
    ddd2:	d105      	bne.n	dde0 <mp_obj_get_array+0x50>
        mp_obj_list_get(o, len, items);
    ddd4:	687a      	ldr	r2, [r7, #4]
    ddd6:	68b9      	ldr	r1, [r7, #8]
    ddd8:	68f8      	ldr	r0, [r7, #12]
    ddda:	f003 fded 	bl	119b8 <mp_obj_list_get>
    ddde:	e002      	b.n	dde6 <mp_obj_get_array+0x56>
    } else {
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("expected tuple/list");
    dde0:	4805      	ldr	r0, [pc, #20]	; (ddf8 <mp_obj_get_array+0x68>)
    dde2:	f7ff f8e9 	bl	cfb8 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "object '%s' isn't a tuple or list", mp_obj_get_type_str(o)));
        }
    }
}
    dde6:	bf00      	nop
    dde8:	3710      	adds	r7, #16
    ddea:	46bd      	mov	sp, r7
    ddec:	bd80      	pop	{r7, pc}
    ddee:	bf00      	nop
    ddf0:	00023dec 	.word	0x00023dec
    ddf4:	000231ec 	.word	0x000231ec
    ddf8:	00021ae4 	.word	0x00021ae4

0000ddfc <mp_obj_get_array_fixed_n>:

// note: returned value in *items may point to the interior of a GC block
void mp_obj_get_array_fixed_n(mp_obj_t o, size_t len, mp_obj_t **items) {
    ddfc:	b580      	push	{r7, lr}
    ddfe:	b086      	sub	sp, #24
    de00:	af00      	add	r7, sp, #0
    de02:	60f8      	str	r0, [r7, #12]
    de04:	60b9      	str	r1, [r7, #8]
    de06:	607a      	str	r2, [r7, #4]
    size_t seq_len;
    mp_obj_get_array(o, &seq_len, items);
    de08:	f107 0314 	add.w	r3, r7, #20
    de0c:	687a      	ldr	r2, [r7, #4]
    de0e:	4619      	mov	r1, r3
    de10:	68f8      	ldr	r0, [r7, #12]
    de12:	f7ff ffbd 	bl	dd90 <mp_obj_get_array>
    if (seq_len != len) {
    de16:	697a      	ldr	r2, [r7, #20]
    de18:	68bb      	ldr	r3, [r7, #8]
    de1a:	429a      	cmp	r2, r3
    de1c:	d002      	beq.n	de24 <mp_obj_get_array_fixed_n+0x28>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_ValueError("tuple/list has wrong length");
    de1e:	4803      	ldr	r0, [pc, #12]	; (de2c <mp_obj_get_array_fixed_n+0x30>)
    de20:	f7ff f8c0 	bl	cfa4 <mp_raise_ValueError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
                "requested length %d but object has length %d", (int)len, (int)seq_len));
        }
    }
}
    de24:	bf00      	nop
    de26:	3718      	adds	r7, #24
    de28:	46bd      	mov	sp, r7
    de2a:	bd80      	pop	{r7, pc}
    de2c:	00021af8 	.word	0x00021af8

0000de30 <mp_get_index>:

// is_slice determines whether the index is a slice index
size_t mp_get_index(const mp_obj_type_t *type, size_t len, mp_obj_t index, bool is_slice) {
    de30:	b580      	push	{r7, lr}
    de32:	b086      	sub	sp, #24
    de34:	af00      	add	r7, sp, #0
    de36:	60f8      	str	r0, [r7, #12]
    de38:	60b9      	str	r1, [r7, #8]
    de3a:	607a      	str	r2, [r7, #4]
    de3c:	70fb      	strb	r3, [r7, #3]
    mp_int_t i;
    if (MP_OBJ_IS_SMALL_INT(index)) {
    de3e:	6878      	ldr	r0, [r7, #4]
    de40:	f7ff fcf2 	bl	d828 <MP_OBJ_IS_SMALL_INT>
    de44:	4603      	mov	r3, r0
    de46:	2b00      	cmp	r3, #0
    de48:	d003      	beq.n	de52 <mp_get_index+0x22>
        i = MP_OBJ_SMALL_INT_VALUE(index);
    de4a:	687b      	ldr	r3, [r7, #4]
    de4c:	105b      	asrs	r3, r3, #1
    de4e:	617b      	str	r3, [r7, #20]
    de50:	e00e      	b.n	de70 <mp_get_index+0x40>
    } else if (!mp_obj_get_int_maybe(index, &i)) {
    de52:	f107 0314 	add.w	r3, r7, #20
    de56:	4619      	mov	r1, r3
    de58:	6878      	ldr	r0, [r7, #4]
    de5a:	f7ff ff59 	bl	dd10 <mp_obj_get_int_maybe>
    de5e:	4603      	mov	r3, r0
    de60:	f083 0301 	eor.w	r3, r3, #1
    de64:	b2db      	uxtb	r3, r3
    de66:	2b00      	cmp	r3, #0
    de68:	d002      	beq.n	de70 <mp_get_index+0x40>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("indices must be integers");
    de6a:	4816      	ldr	r0, [pc, #88]	; (dec4 <mp_get_index+0x94>)
    de6c:	f7ff f8a4 	bl	cfb8 <mp_raise_TypeError>
                "%q indices must be integers, not %s",
                type->name, mp_obj_get_type_str(index)));
        }
    }

    if (i < 0) {
    de70:	697b      	ldr	r3, [r7, #20]
    de72:	2b00      	cmp	r3, #0
    de74:	da04      	bge.n	de80 <mp_get_index+0x50>
        i += len;
    de76:	697b      	ldr	r3, [r7, #20]
    de78:	461a      	mov	r2, r3
    de7a:	68bb      	ldr	r3, [r7, #8]
    de7c:	4413      	add	r3, r2
    de7e:	617b      	str	r3, [r7, #20]
    }
    if (is_slice) {
    de80:	78fb      	ldrb	r3, [r7, #3]
    de82:	2b00      	cmp	r3, #0
    de84:	d00d      	beq.n	dea2 <mp_get_index+0x72>
        if (i < 0) {
    de86:	697b      	ldr	r3, [r7, #20]
    de88:	2b00      	cmp	r3, #0
    de8a:	da02      	bge.n	de92 <mp_get_index+0x62>
            i = 0;
    de8c:	2300      	movs	r3, #0
    de8e:	617b      	str	r3, [r7, #20]
    de90:	e013      	b.n	deba <mp_get_index+0x8a>
        } else if ((mp_uint_t)i > len) {
    de92:	697b      	ldr	r3, [r7, #20]
    de94:	461a      	mov	r2, r3
    de96:	68bb      	ldr	r3, [r7, #8]
    de98:	429a      	cmp	r2, r3
    de9a:	d90e      	bls.n	deba <mp_get_index+0x8a>
            i = len;
    de9c:	68bb      	ldr	r3, [r7, #8]
    de9e:	617b      	str	r3, [r7, #20]
    dea0:	e00b      	b.n	deba <mp_get_index+0x8a>
        }
    } else {
        if (i < 0 || (mp_uint_t)i >= len) {
    dea2:	697b      	ldr	r3, [r7, #20]
    dea4:	2b00      	cmp	r3, #0
    dea6:	db04      	blt.n	deb2 <mp_get_index+0x82>
    dea8:	697b      	ldr	r3, [r7, #20]
    deaa:	461a      	mov	r2, r3
    deac:	68bb      	ldr	r3, [r7, #8]
    deae:	429a      	cmp	r2, r3
    deb0:	d303      	bcc.n	deba <mp_get_index+0x8a>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_msg(&mp_type_IndexError, "index out of range");
    deb2:	4905      	ldr	r1, [pc, #20]	; (dec8 <mp_get_index+0x98>)
    deb4:	4805      	ldr	r0, [pc, #20]	; (decc <mp_get_index+0x9c>)
    deb6:	f7ff f85d 	bl	cf74 <mp_raise_msg>
            }
        }
    }

    // By this point 0 <= i <= len and so fits in a size_t
    return (size_t)i;
    deba:	697b      	ldr	r3, [r7, #20]
}
    debc:	4618      	mov	r0, r3
    debe:	3718      	adds	r7, #24
    dec0:	46bd      	mov	sp, r7
    dec2:	bd80      	pop	{r7, pc}
    dec4:	00021b14 	.word	0x00021b14
    dec8:	00021b30 	.word	0x00021b30
    decc:	00022550 	.word	0x00022550

0000ded0 <mp_obj_id>:

mp_obj_t mp_obj_id(mp_obj_t o_in) {
    ded0:	b580      	push	{r7, lr}
    ded2:	b084      	sub	sp, #16
    ded4:	af00      	add	r7, sp, #0
    ded6:	6078      	str	r0, [r7, #4]
    mp_int_t id = (mp_int_t)o_in;
    ded8:	687b      	ldr	r3, [r7, #4]
    deda:	60fb      	str	r3, [r7, #12]
    if (!MP_OBJ_IS_OBJ(o_in)) {
    dedc:	6878      	ldr	r0, [r7, #4]
    dede:	f7ff fcc7 	bl	d870 <MP_OBJ_IS_OBJ>
    dee2:	4603      	mov	r3, r0
    dee4:	f083 0301 	eor.w	r3, r3, #1
    dee8:	b2db      	uxtb	r3, r3
    deea:	2b00      	cmp	r3, #0
    deec:	d004      	beq.n	def8 <mp_obj_id+0x28>
        return mp_obj_new_int(id);
    deee:	68f8      	ldr	r0, [r7, #12]
    def0:	f002 fd76 	bl	109e0 <mp_obj_new_int>
    def4:	4603      	mov	r3, r0
    def6:	e00c      	b.n	df12 <mp_obj_id+0x42>
    } else if (id >= 0) {
    def8:	68fb      	ldr	r3, [r7, #12]
    defa:	2b00      	cmp	r3, #0
    defc:	db04      	blt.n	df08 <mp_obj_id+0x38>
        // Many OSes and CPUs have affinity for putting "user" memories
        // into low half of address space, and "system" into upper half.
        // We're going to take advantage of that and return small int
        // (signed) for such "user" addresses.
        return MP_OBJ_NEW_SMALL_INT(id);
    defe:	68fb      	ldr	r3, [r7, #12]
    df00:	005b      	lsls	r3, r3, #1
    df02:	f043 0301 	orr.w	r3, r3, #1
    df06:	e004      	b.n	df12 <mp_obj_id+0x42>
    } else {
        // If that didn't work, well, let's return long int, just as
        // a (big) positive value, so it will never clash with the range
        // of small int returned in previous case.
        return mp_obj_new_int_from_uint((mp_uint_t)id);
    df08:	68fb      	ldr	r3, [r7, #12]
    df0a:	4618      	mov	r0, r3
    df0c:	f002 fd4e 	bl	109ac <mp_obj_new_int_from_uint>
    df10:	4603      	mov	r3, r0
    }
}
    df12:	4618      	mov	r0, r3
    df14:	3710      	adds	r7, #16
    df16:	46bd      	mov	sp, r7
    df18:	bd80      	pop	{r7, pc}
    df1a:	bf00      	nop

0000df1c <mp_obj_len>:

// will raise a TypeError if object has no length
mp_obj_t mp_obj_len(mp_obj_t o_in) {
    df1c:	b580      	push	{r7, lr}
    df1e:	b084      	sub	sp, #16
    df20:	af00      	add	r7, sp, #0
    df22:	6078      	str	r0, [r7, #4]
    mp_obj_t len = mp_obj_len_maybe(o_in);
    df24:	6878      	ldr	r0, [r7, #4]
    df26:	f000 f80f 	bl	df48 <mp_obj_len_maybe>
    df2a:	60f8      	str	r0, [r7, #12]
    if (len == MP_OBJ_NULL) {
    df2c:	68fb      	ldr	r3, [r7, #12]
    df2e:	2b00      	cmp	r3, #0
    df30:	d102      	bne.n	df38 <mp_obj_len+0x1c>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object has no len");
    df32:	4804      	ldr	r0, [pc, #16]	; (df44 <mp_obj_len+0x28>)
    df34:	f7ff f840 	bl	cfb8 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "object of type '%s' has no len()", mp_obj_get_type_str(o_in)));
        }
    } else {
        return len;
    df38:	68fb      	ldr	r3, [r7, #12]
    }
}
    df3a:	4618      	mov	r0, r3
    df3c:	3710      	adds	r7, #16
    df3e:	46bd      	mov	sp, r7
    df40:	bd80      	pop	{r7, pc}
    df42:	bf00      	nop
    df44:	00021b44 	.word	0x00021b44

0000df48 <mp_obj_len_maybe>:

// may return MP_OBJ_NULL
mp_obj_t mp_obj_len_maybe(mp_obj_t o_in) {
    df48:	b580      	push	{r7, lr}
    df4a:	b084      	sub	sp, #16
    df4c:	af00      	add	r7, sp, #0
    df4e:	6078      	str	r0, [r7, #4]
    if (
#if !MICROPY_PY_BUILTINS_STR_UNICODE
        // It's simple - unicode is slow, non-unicode is fast
        MP_OBJ_IS_STR(o_in) ||
    df50:	6878      	ldr	r0, [r7, #4]
    df52:	f7ff fc7b 	bl	d84c <MP_OBJ_IS_QSTR>
    df56:	4603      	mov	r3, r0
    if (
    df58:	2b00      	cmp	r3, #0
    df5a:	d115      	bne.n	df88 <mp_obj_len_maybe+0x40>
        MP_OBJ_IS_STR(o_in) ||
    df5c:	6878      	ldr	r0, [r7, #4]
    df5e:	f7ff fc87 	bl	d870 <MP_OBJ_IS_OBJ>
    df62:	4603      	mov	r3, r0
    df64:	2b00      	cmp	r3, #0
    df66:	d004      	beq.n	df72 <mp_obj_len_maybe+0x2a>
    df68:	687b      	ldr	r3, [r7, #4]
    df6a:	681b      	ldr	r3, [r3, #0]
    df6c:	4a1b      	ldr	r2, [pc, #108]	; (dfdc <mp_obj_len_maybe+0x94>)
    df6e:	4293      	cmp	r3, r2
    df70:	d00a      	beq.n	df88 <mp_obj_len_maybe+0x40>
#endif
        MP_OBJ_IS_TYPE(o_in, &mp_type_bytes)) {
    df72:	6878      	ldr	r0, [r7, #4]
    df74:	f7ff fc7c 	bl	d870 <MP_OBJ_IS_OBJ>
    df78:	4603      	mov	r3, r0
        MP_OBJ_IS_STR(o_in) ||
    df7a:	2b00      	cmp	r3, #0
    df7c:	d019      	beq.n	dfb2 <mp_obj_len_maybe+0x6a>
        MP_OBJ_IS_TYPE(o_in, &mp_type_bytes)) {
    df7e:	687b      	ldr	r3, [r7, #4]
    df80:	681b      	ldr	r3, [r3, #0]
    df82:	4a17      	ldr	r2, [pc, #92]	; (dfe0 <mp_obj_len_maybe+0x98>)
    df84:	4293      	cmp	r3, r2
    df86:	d114      	bne.n	dfb2 <mp_obj_len_maybe+0x6a>
        GET_STR_LEN(o_in, l);
    df88:	6878      	ldr	r0, [r7, #4]
    df8a:	f7ff fc5f 	bl	d84c <MP_OBJ_IS_QSTR>
    df8e:	4603      	mov	r3, r0
    df90:	2b00      	cmp	r3, #0
    df92:	d006      	beq.n	dfa2 <mp_obj_len_maybe+0x5a>
    df94:	687b      	ldr	r3, [r7, #4]
    df96:	089b      	lsrs	r3, r3, #2
    df98:	4618      	mov	r0, r3
    df9a:	f7f3 f9e5 	bl	1368 <qstr_len>
    df9e:	60f8      	str	r0, [r7, #12]
    dfa0:	e002      	b.n	dfa8 <mp_obj_len_maybe+0x60>
    dfa2:	687b      	ldr	r3, [r7, #4]
    dfa4:	689b      	ldr	r3, [r3, #8]
    dfa6:	60fb      	str	r3, [r7, #12]
        return MP_OBJ_NEW_SMALL_INT(l);
    dfa8:	68fb      	ldr	r3, [r7, #12]
    dfaa:	005b      	lsls	r3, r3, #1
    dfac:	f043 0301 	orr.w	r3, r3, #1
    dfb0:	e00f      	b.n	dfd2 <mp_obj_len_maybe+0x8a>
    } else {
        mp_obj_type_t *type = mp_obj_get_type(o_in);
    dfb2:	6878      	ldr	r0, [r7, #4]
    dfb4:	f7ff fc6e 	bl	d894 <mp_obj_get_type>
    dfb8:	60b8      	str	r0, [r7, #8]
        if (type->unary_op != NULL) {
    dfba:	68bb      	ldr	r3, [r7, #8]
    dfbc:	695b      	ldr	r3, [r3, #20]
    dfbe:	2b00      	cmp	r3, #0
    dfc0:	d006      	beq.n	dfd0 <mp_obj_len_maybe+0x88>
            return type->unary_op(MP_UNARY_OP_LEN, o_in);
    dfc2:	68bb      	ldr	r3, [r7, #8]
    dfc4:	695b      	ldr	r3, [r3, #20]
    dfc6:	6879      	ldr	r1, [r7, #4]
    dfc8:	2005      	movs	r0, #5
    dfca:	4798      	blx	r3
    dfcc:	4603      	mov	r3, r0
    dfce:	e000      	b.n	dfd2 <mp_obj_len_maybe+0x8a>
        } else {
            return MP_OBJ_NULL;
    dfd0:	2300      	movs	r3, #0
        }
    }
}
    dfd2:	4618      	mov	r0, r3
    dfd4:	3710      	adds	r7, #16
    dfd6:	46bd      	mov	sp, r7
    dfd8:	bd80      	pop	{r7, pc}
    dfda:	bf00      	nop
    dfdc:	00023b68 	.word	0x00023b68
    dfe0:	00023ba4 	.word	0x00023ba4

0000dfe4 <mp_obj_subscr>:

mp_obj_t mp_obj_subscr(mp_obj_t base, mp_obj_t index, mp_obj_t value) {
    dfe4:	b580      	push	{r7, lr}
    dfe6:	b086      	sub	sp, #24
    dfe8:	af00      	add	r7, sp, #0
    dfea:	60f8      	str	r0, [r7, #12]
    dfec:	60b9      	str	r1, [r7, #8]
    dfee:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(base);
    dff0:	68f8      	ldr	r0, [r7, #12]
    dff2:	f7ff fc4f 	bl	d894 <mp_obj_get_type>
    dff6:	6178      	str	r0, [r7, #20]
    if (type->subscr != NULL) {
    dff8:	697b      	ldr	r3, [r7, #20]
    dffa:	6a1b      	ldr	r3, [r3, #32]
    dffc:	2b00      	cmp	r3, #0
    dffe:	d00b      	beq.n	e018 <mp_obj_subscr+0x34>
        mp_obj_t ret = type->subscr(base, index, value);
    e000:	697b      	ldr	r3, [r7, #20]
    e002:	6a1b      	ldr	r3, [r3, #32]
    e004:	687a      	ldr	r2, [r7, #4]
    e006:	68b9      	ldr	r1, [r7, #8]
    e008:	68f8      	ldr	r0, [r7, #12]
    e00a:	4798      	blx	r3
    e00c:	6138      	str	r0, [r7, #16]
        if (ret != MP_OBJ_NULL) {
    e00e:	693b      	ldr	r3, [r7, #16]
    e010:	2b00      	cmp	r3, #0
    e012:	d001      	beq.n	e018 <mp_obj_subscr+0x34>
            return ret;
    e014:	693b      	ldr	r3, [r7, #16]
    e016:	e00e      	b.n	e036 <mp_obj_subscr+0x52>
        }
        // TODO: call base classes here?
    }
    if (value == MP_OBJ_NULL) {
    e018:	687b      	ldr	r3, [r7, #4]
    e01a:	2b00      	cmp	r3, #0
    e01c:	d102      	bne.n	e024 <mp_obj_subscr+0x40>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object doesn't support item deletion");
    e01e:	4808      	ldr	r0, [pc, #32]	; (e040 <mp_obj_subscr+0x5c>)
    e020:	f7fe ffca 	bl	cfb8 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object doesn't support item deletion", mp_obj_get_type_str(base)));
        }
    } else if (value == MP_OBJ_SENTINEL) {
    e024:	687b      	ldr	r3, [r7, #4]
    e026:	2b08      	cmp	r3, #8
    e028:	d102      	bne.n	e030 <mp_obj_subscr+0x4c>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object isn't subscriptable");
    e02a:	4806      	ldr	r0, [pc, #24]	; (e044 <mp_obj_subscr+0x60>)
    e02c:	f7fe ffc4 	bl	cfb8 <mp_raise_TypeError>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object isn't subscriptable", mp_obj_get_type_str(base)));
        }
    } else {
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object doesn't support item assignment");
    e030:	4805      	ldr	r0, [pc, #20]	; (e048 <mp_obj_subscr+0x64>)
    e032:	f7fe ffc1 	bl	cfb8 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object doesn't support item assignment", mp_obj_get_type_str(base)));
        }
    }
}
    e036:	4618      	mov	r0, r3
    e038:	3718      	adds	r7, #24
    e03a:	46bd      	mov	sp, r7
    e03c:	bd80      	pop	{r7, pc}
    e03e:	bf00      	nop
    e040:	00021b58 	.word	0x00021b58
    e044:	00021b80 	.word	0x00021b80
    e048:	00021b9c 	.word	0x00021b9c

0000e04c <mp_identity>:

// Return input argument. Useful as .getiter for objects which are
// their own iterators, etc.
mp_obj_t mp_identity(mp_obj_t self) {
    e04c:	b480      	push	{r7}
    e04e:	b083      	sub	sp, #12
    e050:	af00      	add	r7, sp, #0
    e052:	6078      	str	r0, [r7, #4]
    return self;
    e054:	687b      	ldr	r3, [r7, #4]
}
    e056:	4618      	mov	r0, r3
    e058:	370c      	adds	r7, #12
    e05a:	46bd      	mov	sp, r7
    e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e060:	4770      	bx	lr
    e062:	bf00      	nop

0000e064 <mp_identity_getiter>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_identity_obj, mp_identity);

mp_obj_t mp_identity_getiter(mp_obj_t self, mp_obj_iter_buf_t *iter_buf) {
    e064:	b480      	push	{r7}
    e066:	b083      	sub	sp, #12
    e068:	af00      	add	r7, sp, #0
    e06a:	6078      	str	r0, [r7, #4]
    e06c:	6039      	str	r1, [r7, #0]
    (void)iter_buf;
    return self;
    e06e:	687b      	ldr	r3, [r7, #4]
}
    e070:	4618      	mov	r0, r3
    e072:	370c      	adds	r7, #12
    e074:	46bd      	mov	sp, r7
    e076:	f85d 7b04 	ldr.w	r7, [sp], #4
    e07a:	4770      	bx	lr

0000e07c <mp_get_buffer>:

bool mp_get_buffer(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
    e07c:	b580      	push	{r7, lr}
    e07e:	b086      	sub	sp, #24
    e080:	af00      	add	r7, sp, #0
    e082:	60f8      	str	r0, [r7, #12]
    e084:	60b9      	str	r1, [r7, #8]
    e086:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(obj);
    e088:	68f8      	ldr	r0, [r7, #12]
    e08a:	f7ff fc03 	bl	d894 <mp_obj_get_type>
    e08e:	6178      	str	r0, [r7, #20]
    if (type->buffer_p.get_buffer == NULL) {
    e090:	697b      	ldr	r3, [r7, #20]
    e092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e094:	2b00      	cmp	r3, #0
    e096:	d101      	bne.n	e09c <mp_get_buffer+0x20>
        return false;
    e098:	2300      	movs	r3, #0
    e09a:	e00c      	b.n	e0b6 <mp_get_buffer+0x3a>
    }
    int ret = type->buffer_p.get_buffer(obj, bufinfo, flags);
    e09c:	697b      	ldr	r3, [r7, #20]
    e09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e0a0:	687a      	ldr	r2, [r7, #4]
    e0a2:	68b9      	ldr	r1, [r7, #8]
    e0a4:	68f8      	ldr	r0, [r7, #12]
    e0a6:	4798      	blx	r3
    e0a8:	6138      	str	r0, [r7, #16]
    if (ret != 0) {
    e0aa:	693b      	ldr	r3, [r7, #16]
    e0ac:	2b00      	cmp	r3, #0
    e0ae:	d001      	beq.n	e0b4 <mp_get_buffer+0x38>
        return false;
    e0b0:	2300      	movs	r3, #0
    e0b2:	e000      	b.n	e0b6 <mp_get_buffer+0x3a>
    }
    return true;
    e0b4:	2301      	movs	r3, #1
}
    e0b6:	4618      	mov	r0, r3
    e0b8:	3718      	adds	r7, #24
    e0ba:	46bd      	mov	sp, r7
    e0bc:	bd80      	pop	{r7, pc}
    e0be:	bf00      	nop

0000e0c0 <mp_get_buffer_raise>:

void mp_get_buffer_raise(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
    e0c0:	b580      	push	{r7, lr}
    e0c2:	b084      	sub	sp, #16
    e0c4:	af00      	add	r7, sp, #0
    e0c6:	60f8      	str	r0, [r7, #12]
    e0c8:	60b9      	str	r1, [r7, #8]
    e0ca:	607a      	str	r2, [r7, #4]
    if (!mp_get_buffer(obj, bufinfo, flags)) {
    e0cc:	687a      	ldr	r2, [r7, #4]
    e0ce:	68b9      	ldr	r1, [r7, #8]
    e0d0:	68f8      	ldr	r0, [r7, #12]
    e0d2:	f7ff ffd3 	bl	e07c <mp_get_buffer>
    e0d6:	4603      	mov	r3, r0
    e0d8:	f083 0301 	eor.w	r3, r3, #1
    e0dc:	b2db      	uxtb	r3, r3
    e0de:	2b00      	cmp	r3, #0
    e0e0:	d002      	beq.n	e0e8 <mp_get_buffer_raise+0x28>
        mp_raise_TypeError("object with buffer protocol required");
    e0e2:	4803      	ldr	r0, [pc, #12]	; (e0f0 <mp_get_buffer_raise+0x30>)
    e0e4:	f7fe ff68 	bl	cfb8 <mp_raise_TypeError>
    }
}
    e0e8:	bf00      	nop
    e0ea:	3710      	adds	r7, #16
    e0ec:	46bd      	mov	sp, r7
    e0ee:	bd80      	pop	{r7, pc}
    e0f0:	00021bcc 	.word	0x00021bcc

0000e0f4 <mp_generic_unary_op>:

mp_obj_t mp_generic_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
    e0f4:	b480      	push	{r7}
    e0f6:	b083      	sub	sp, #12
    e0f8:	af00      	add	r7, sp, #0
    e0fa:	6078      	str	r0, [r7, #4]
    e0fc:	6039      	str	r1, [r7, #0]
    switch (op) {
    e0fe:	687b      	ldr	r3, [r7, #4]
    e100:	2b06      	cmp	r3, #6
    e102:	d104      	bne.n	e10e <mp_generic_unary_op+0x1a>
        case MP_UNARY_OP_HASH: return MP_OBJ_NEW_SMALL_INT((mp_uint_t)o_in);
    e104:	683b      	ldr	r3, [r7, #0]
    e106:	005b      	lsls	r3, r3, #1
    e108:	f043 0301 	orr.w	r3, r3, #1
    e10c:	e000      	b.n	e110 <mp_generic_unary_op+0x1c>
        default: return MP_OBJ_NULL; // op not supported
    e10e:	2300      	movs	r3, #0
    }
}
    e110:	4618      	mov	r0, r3
    e112:	370c      	adds	r7, #12
    e114:	46bd      	mov	sp, r7
    e116:	f85d 7b04 	ldr.w	r7, [sp], #4
    e11a:	4770      	bx	lr

0000e11c <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    e11c:	b480      	push	{r7}
    e11e:	b083      	sub	sp, #12
    e120:	af00      	add	r7, sp, #0
    e122:	6078      	str	r0, [r7, #4]
    e124:	687b      	ldr	r3, [r7, #4]
    e126:	2b00      	cmp	r3, #0
    e128:	d001      	beq.n	e12e <mp_obj_new_bool+0x12>
    e12a:	4b04      	ldr	r3, [pc, #16]	; (e13c <mp_obj_new_bool+0x20>)
    e12c:	e000      	b.n	e130 <mp_obj_new_bool+0x14>
    e12e:	4b04      	ldr	r3, [pc, #16]	; (e140 <mp_obj_new_bool+0x24>)
    e130:	4618      	mov	r0, r3
    e132:	370c      	adds	r7, #12
    e134:	46bd      	mov	sp, r7
    e136:	f85d 7b04 	ldr.w	r7, [sp], #4
    e13a:	4770      	bx	lr
    e13c:	00021c60 	.word	0x00021c60
    e140:	00021c58 	.word	0x00021c58

0000e144 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
    e144:	b580      	push	{r7, lr}
    e146:	b084      	sub	sp, #16
    e148:	af00      	add	r7, sp, #0
    e14a:	60f8      	str	r0, [r7, #12]
    e14c:	60b9      	str	r1, [r7, #8]
    e14e:	607a      	str	r2, [r7, #4]
    e150:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
    e152:	687b      	ldr	r3, [r7, #4]
    e154:	045a      	lsls	r2, r3, #17
    e156:	683b      	ldr	r3, [r7, #0]
    e158:	005b      	lsls	r3, r3, #1
    e15a:	431a      	orrs	r2, r3
    e15c:	7e3b      	ldrb	r3, [r7, #24]
    e15e:	2b00      	cmp	r3, #0
    e160:	d001      	beq.n	e166 <mp_arg_check_num+0x22>
    e162:	2301      	movs	r3, #1
    e164:	e000      	b.n	e168 <mp_arg_check_num+0x24>
    e166:	2300      	movs	r3, #0
    e168:	4313      	orrs	r3, r2
    e16a:	461a      	mov	r2, r3
    e16c:	68b9      	ldr	r1, [r7, #8]
    e16e:	68f8      	ldr	r0, [r7, #12]
    e170:	f7fe ff8e 	bl	d090 <mp_arg_check_num_sig>
}
    e174:	bf00      	nop
    e176:	3710      	adds	r7, #16
    e178:	46bd      	mov	sp, r7
    e17a:	bd80      	pop	{r7, pc}

0000e17c <bool_print>:
typedef struct _mp_obj_bool_t {
    mp_obj_base_t base;
    bool value;
} mp_obj_bool_t;

STATIC void bool_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    e17c:	b580      	push	{r7, lr}
    e17e:	b086      	sub	sp, #24
    e180:	af00      	add	r7, sp, #0
    e182:	60f8      	str	r0, [r7, #12]
    e184:	60b9      	str	r1, [r7, #8]
    e186:	607a      	str	r2, [r7, #4]
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(self_in);
    e188:	68bb      	ldr	r3, [r7, #8]
    e18a:	617b      	str	r3, [r7, #20]
            mp_print_str(print, "true");
        } else {
            mp_print_str(print, "false");
        }
    } else {
        if (self->value) {
    e18c:	697b      	ldr	r3, [r7, #20]
    e18e:	791b      	ldrb	r3, [r3, #4]
    e190:	2b00      	cmp	r3, #0
    e192:	d004      	beq.n	e19e <bool_print+0x22>
            mp_print_str(print, "True");
    e194:	4906      	ldr	r1, [pc, #24]	; (e1b0 <bool_print+0x34>)
    e196:	68f8      	ldr	r0, [r7, #12]
    e198:	f7f3 fc3a 	bl	1a10 <mp_print_str>
        } else {
            mp_print_str(print, "False");
        }
    }
}
    e19c:	e003      	b.n	e1a6 <bool_print+0x2a>
            mp_print_str(print, "False");
    e19e:	4905      	ldr	r1, [pc, #20]	; (e1b4 <bool_print+0x38>)
    e1a0:	68f8      	ldr	r0, [r7, #12]
    e1a2:	f7f3 fc35 	bl	1a10 <mp_print_str>
}
    e1a6:	bf00      	nop
    e1a8:	3718      	adds	r7, #24
    e1aa:	46bd      	mov	sp, r7
    e1ac:	bd80      	pop	{r7, pc}
    e1ae:	bf00      	nop
    e1b0:	00021c0c 	.word	0x00021c0c
    e1b4:	00021c14 	.word	0x00021c14

0000e1b8 <bool_make_new>:

STATIC mp_obj_t bool_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e1b8:	b580      	push	{r7, lr}
    e1ba:	b086      	sub	sp, #24
    e1bc:	af02      	add	r7, sp, #8
    e1be:	60f8      	str	r0, [r7, #12]
    e1c0:	60b9      	str	r1, [r7, #8]
    e1c2:	607a      	str	r2, [r7, #4]
    e1c4:	603b      	str	r3, [r7, #0]
    (void)type_in;
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
    e1c6:	2300      	movs	r3, #0
    e1c8:	9300      	str	r3, [sp, #0]
    e1ca:	2301      	movs	r3, #1
    e1cc:	2200      	movs	r2, #0
    e1ce:	6879      	ldr	r1, [r7, #4]
    e1d0:	68b8      	ldr	r0, [r7, #8]
    e1d2:	f7ff ffb7 	bl	e144 <mp_arg_check_num>

    if (n_args == 0) {
    e1d6:	68bb      	ldr	r3, [r7, #8]
    e1d8:	2b00      	cmp	r3, #0
    e1da:	d101      	bne.n	e1e0 <bool_make_new+0x28>
        return mp_const_false;
    e1dc:	4b07      	ldr	r3, [pc, #28]	; (e1fc <bool_make_new+0x44>)
    e1de:	e009      	b.n	e1f4 <bool_make_new+0x3c>
    } else {
        return mp_obj_new_bool(mp_obj_is_true(args[0]));
    e1e0:	683b      	ldr	r3, [r7, #0]
    e1e2:	681b      	ldr	r3, [r3, #0]
    e1e4:	4618      	mov	r0, r3
    e1e6:	f7ff fc33 	bl	da50 <mp_obj_is_true>
    e1ea:	4603      	mov	r3, r0
    e1ec:	4618      	mov	r0, r3
    e1ee:	f7ff ff95 	bl	e11c <mp_obj_new_bool>
    e1f2:	4603      	mov	r3, r0
    }
}
    e1f4:	4618      	mov	r0, r3
    e1f6:	3710      	adds	r7, #16
    e1f8:	46bd      	mov	sp, r7
    e1fa:	bd80      	pop	{r7, pc}
    e1fc:	00021c58 	.word	0x00021c58

0000e200 <bool_unary_op>:

STATIC mp_obj_t bool_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
    e200:	b580      	push	{r7, lr}
    e202:	b084      	sub	sp, #16
    e204:	af00      	add	r7, sp, #0
    e206:	6078      	str	r0, [r7, #4]
    e208:	6039      	str	r1, [r7, #0]
    if (op == MP_UNARY_OP_LEN) {
    e20a:	687b      	ldr	r3, [r7, #4]
    e20c:	2b05      	cmp	r3, #5
    e20e:	d101      	bne.n	e214 <bool_unary_op+0x14>
        return MP_OBJ_NULL;
    e210:	2300      	movs	r3, #0
    e212:	e00b      	b.n	e22c <bool_unary_op+0x2c>
    }
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(o_in);
    e214:	683b      	ldr	r3, [r7, #0]
    e216:	60fb      	str	r3, [r7, #12]
    return mp_unary_op(op, MP_OBJ_NEW_SMALL_INT(self->value));
    e218:	68fb      	ldr	r3, [r7, #12]
    e21a:	791b      	ldrb	r3, [r3, #4]
    e21c:	005b      	lsls	r3, r3, #1
    e21e:	f043 0301 	orr.w	r3, r3, #1
    e222:	4619      	mov	r1, r3
    e224:	6878      	ldr	r0, [r7, #4]
    e226:	f7fd fa8d 	bl	b744 <mp_unary_op>
    e22a:	4603      	mov	r3, r0
}
    e22c:	4618      	mov	r0, r3
    e22e:	3710      	adds	r7, #16
    e230:	46bd      	mov	sp, r7
    e232:	bd80      	pop	{r7, pc}

0000e234 <bool_binary_op>:

STATIC mp_obj_t bool_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    e234:	b580      	push	{r7, lr}
    e236:	b086      	sub	sp, #24
    e238:	af00      	add	r7, sp, #0
    e23a:	60f8      	str	r0, [r7, #12]
    e23c:	60b9      	str	r1, [r7, #8]
    e23e:	607a      	str	r2, [r7, #4]
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(lhs_in);
    e240:	68bb      	ldr	r3, [r7, #8]
    e242:	617b      	str	r3, [r7, #20]
    return mp_binary_op(op, MP_OBJ_NEW_SMALL_INT(self->value), rhs_in);
    e244:	697b      	ldr	r3, [r7, #20]
    e246:	791b      	ldrb	r3, [r3, #4]
    e248:	005b      	lsls	r3, r3, #1
    e24a:	f043 0301 	orr.w	r3, r3, #1
    e24e:	687a      	ldr	r2, [r7, #4]
    e250:	4619      	mov	r1, r3
    e252:	68f8      	ldr	r0, [r7, #12]
    e254:	f7fd fb66 	bl	b924 <mp_binary_op>
    e258:	4603      	mov	r3, r0
}
    e25a:	4618      	mov	r0, r3
    e25c:	3718      	adds	r7, #24
    e25e:	46bd      	mov	sp, r7
    e260:	bd80      	pop	{r7, pc}
    e262:	bf00      	nop

0000e264 <mp_call_method_self_n_kw>:
    mp_obj_print_helper(print, o->meth, PRINT_REPR);
    mp_print_str(print, ">");
}
#endif

mp_obj_t mp_call_method_self_n_kw(mp_obj_t meth, mp_obj_t self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e264:	b580      	push	{r7, lr}
    e266:	b088      	sub	sp, #32
    e268:	af00      	add	r7, sp, #0
    e26a:	60f8      	str	r0, [r7, #12]
    e26c:	60b9      	str	r1, [r7, #8]
    e26e:	607a      	str	r2, [r7, #4]
    e270:	603b      	str	r3, [r7, #0]
    // need to insert self before all other args and then call meth
    size_t n_total = n_args + 2 * n_kw;
    e272:	683b      	ldr	r3, [r7, #0]
    e274:	005a      	lsls	r2, r3, #1
    e276:	687b      	ldr	r3, [r7, #4]
    e278:	4413      	add	r3, r2
    e27a:	617b      	str	r3, [r7, #20]
    mp_obj_t *args2 = NULL;
    e27c:	2300      	movs	r3, #0
    e27e:	61fb      	str	r3, [r7, #28]
    #if MICROPY_ENABLE_PYSTACK
    args2 = mp_pystack_alloc(sizeof(mp_obj_t) * (1 + n_total));
    #else
    mp_obj_t *free_args2 = NULL;
    e280:	2300      	movs	r3, #0
    e282:	61bb      	str	r3, [r7, #24]
    if (n_total > 4) {
    e284:	697b      	ldr	r3, [r7, #20]
    e286:	2b04      	cmp	r3, #4
    e288:	d908      	bls.n	e29c <mp_call_method_self_n_kw+0x38>
        // try to use heap to allocate temporary args array
        args2 = m_new_maybe(mp_obj_t, 1 + n_total);
    e28a:	697b      	ldr	r3, [r7, #20]
    e28c:	3301      	adds	r3, #1
    e28e:	009b      	lsls	r3, r3, #2
    e290:	4618      	mov	r0, r3
    e292:	f7f2 f85b 	bl	34c <m_malloc_maybe>
    e296:	61f8      	str	r0, [r7, #28]
        free_args2 = args2;
    e298:	69fb      	ldr	r3, [r7, #28]
    e29a:	61bb      	str	r3, [r7, #24]
    }
    if (args2 == NULL) {
    e29c:	69fb      	ldr	r3, [r7, #28]
    e29e:	2b00      	cmp	r3, #0
    e2a0:	d10d      	bne.n	e2be <mp_call_method_self_n_kw+0x5a>
        // (fallback to) use stack to allocate temporary args array
        args2 = alloca(sizeof(mp_obj_t) * (1 + n_total));
    e2a2:	697b      	ldr	r3, [r7, #20]
    e2a4:	3301      	adds	r3, #1
    e2a6:	009b      	lsls	r3, r3, #2
    e2a8:	3307      	adds	r3, #7
    e2aa:	3307      	adds	r3, #7
    e2ac:	08db      	lsrs	r3, r3, #3
    e2ae:	00db      	lsls	r3, r3, #3
    e2b0:	ebad 0d03 	sub.w	sp, sp, r3
    e2b4:	466b      	mov	r3, sp
    e2b6:	3307      	adds	r3, #7
    e2b8:	08db      	lsrs	r3, r3, #3
    e2ba:	00db      	lsls	r3, r3, #3
    e2bc:	61fb      	str	r3, [r7, #28]
    }
    #endif
    args2[0] = self;
    e2be:	69fb      	ldr	r3, [r7, #28]
    e2c0:	68ba      	ldr	r2, [r7, #8]
    e2c2:	601a      	str	r2, [r3, #0]
    memcpy(args2 + 1, args, n_total * sizeof(mp_obj_t));
    e2c4:	69fb      	ldr	r3, [r7, #28]
    e2c6:	1d18      	adds	r0, r3, #4
    e2c8:	697b      	ldr	r3, [r7, #20]
    e2ca:	009b      	lsls	r3, r3, #2
    e2cc:	461a      	mov	r2, r3
    e2ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    e2d0:	f00e fd5e 	bl	1cd90 <memcpy>
    mp_obj_t res = mp_call_function_n_kw(meth, n_args + 1, n_kw, args2);
    e2d4:	687b      	ldr	r3, [r7, #4]
    e2d6:	1c59      	adds	r1, r3, #1
    e2d8:	69fb      	ldr	r3, [r7, #28]
    e2da:	683a      	ldr	r2, [r7, #0]
    e2dc:	68f8      	ldr	r0, [r7, #12]
    e2de:	f7fd fdb9 	bl	be54 <mp_call_function_n_kw>
    e2e2:	6138      	str	r0, [r7, #16]
    #if MICROPY_ENABLE_PYSTACK
    mp_pystack_free(args2);
    #else
    if (free_args2 != NULL) {
    e2e4:	69bb      	ldr	r3, [r7, #24]
    e2e6:	2b00      	cmp	r3, #0
    e2e8:	d002      	beq.n	e2f0 <mp_call_method_self_n_kw+0x8c>
        m_del(mp_obj_t, free_args2, 1 + n_total);
    e2ea:	69b8      	ldr	r0, [r7, #24]
    e2ec:	f7f2 f890 	bl	410 <m_free>
    }
    #endif
    return res;
    e2f0:	693b      	ldr	r3, [r7, #16]
}
    e2f2:	4618      	mov	r0, r3
    e2f4:	3720      	adds	r7, #32
    e2f6:	46bd      	mov	sp, r7
    e2f8:	bd80      	pop	{r7, pc}
    e2fa:	bf00      	nop

0000e2fc <bound_meth_call>:

STATIC mp_obj_t bound_meth_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e2fc:	b580      	push	{r7, lr}
    e2fe:	b088      	sub	sp, #32
    e300:	af02      	add	r7, sp, #8
    e302:	60f8      	str	r0, [r7, #12]
    e304:	60b9      	str	r1, [r7, #8]
    e306:	607a      	str	r2, [r7, #4]
    e308:	603b      	str	r3, [r7, #0]
    mp_obj_bound_meth_t *self = MP_OBJ_TO_PTR(self_in);
    e30a:	68fb      	ldr	r3, [r7, #12]
    e30c:	617b      	str	r3, [r7, #20]
    return mp_call_method_self_n_kw(self->meth, self->self, n_args, n_kw, args);
    e30e:	697b      	ldr	r3, [r7, #20]
    e310:	6858      	ldr	r0, [r3, #4]
    e312:	697b      	ldr	r3, [r7, #20]
    e314:	6899      	ldr	r1, [r3, #8]
    e316:	683b      	ldr	r3, [r7, #0]
    e318:	9300      	str	r3, [sp, #0]
    e31a:	687b      	ldr	r3, [r7, #4]
    e31c:	68ba      	ldr	r2, [r7, #8]
    e31e:	f7ff ffa1 	bl	e264 <mp_call_method_self_n_kw>
    e322:	4603      	mov	r3, r0
}
    e324:	4618      	mov	r0, r3
    e326:	3718      	adds	r7, #24
    e328:	46bd      	mov	sp, r7
    e32a:	bd80      	pop	{r7, pc}

0000e32c <mp_obj_new_bound_meth>:
#if MICROPY_PY_FUNCTION_ATTRS
    .attr = bound_meth_attr,
#endif
};

mp_obj_t mp_obj_new_bound_meth(mp_obj_t meth, mp_obj_t self) {
    e32c:	b580      	push	{r7, lr}
    e32e:	b084      	sub	sp, #16
    e330:	af00      	add	r7, sp, #0
    e332:	6078      	str	r0, [r7, #4]
    e334:	6039      	str	r1, [r7, #0]
    mp_obj_bound_meth_t *o = m_new_obj(mp_obj_bound_meth_t);
    e336:	200c      	movs	r0, #12
    e338:	f7f1 fff0 	bl	31c <m_malloc>
    e33c:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_bound_meth;
    e33e:	68fb      	ldr	r3, [r7, #12]
    e340:	4a06      	ldr	r2, [pc, #24]	; (e35c <mp_obj_new_bound_meth+0x30>)
    e342:	601a      	str	r2, [r3, #0]
    o->meth = meth;
    e344:	68fb      	ldr	r3, [r7, #12]
    e346:	687a      	ldr	r2, [r7, #4]
    e348:	605a      	str	r2, [r3, #4]
    o->self = self;
    e34a:	68fb      	ldr	r3, [r7, #12]
    e34c:	683a      	ldr	r2, [r7, #0]
    e34e:	609a      	str	r2, [r3, #8]
    return MP_OBJ_FROM_PTR(o);
    e350:	68fb      	ldr	r3, [r7, #12]
}
    e352:	4618      	mov	r0, r3
    e354:	3710      	adds	r7, #16
    e356:	46bd      	mov	sp, r7
    e358:	bd80      	pop	{r7, pc}
    e35a:	bf00      	nop
    e35c:	00021c68 	.word	0x00021c68

0000e360 <mp_obj_cell_get>:
typedef struct _mp_obj_cell_t {
    mp_obj_base_t base;
    mp_obj_t obj;
} mp_obj_cell_t;

mp_obj_t mp_obj_cell_get(mp_obj_t self_in) {
    e360:	b480      	push	{r7}
    e362:	b085      	sub	sp, #20
    e364:	af00      	add	r7, sp, #0
    e366:	6078      	str	r0, [r7, #4]
    mp_obj_cell_t *self = MP_OBJ_TO_PTR(self_in);
    e368:	687b      	ldr	r3, [r7, #4]
    e36a:	60fb      	str	r3, [r7, #12]
    return self->obj;
    e36c:	68fb      	ldr	r3, [r7, #12]
    e36e:	685b      	ldr	r3, [r3, #4]
}
    e370:	4618      	mov	r0, r3
    e372:	3714      	adds	r7, #20
    e374:	46bd      	mov	sp, r7
    e376:	f85d 7b04 	ldr.w	r7, [sp], #4
    e37a:	4770      	bx	lr

0000e37c <mp_obj_cell_set>:

void mp_obj_cell_set(mp_obj_t self_in, mp_obj_t obj) {
    e37c:	b480      	push	{r7}
    e37e:	b085      	sub	sp, #20
    e380:	af00      	add	r7, sp, #0
    e382:	6078      	str	r0, [r7, #4]
    e384:	6039      	str	r1, [r7, #0]
    mp_obj_cell_t *self = MP_OBJ_TO_PTR(self_in);
    e386:	687b      	ldr	r3, [r7, #4]
    e388:	60fb      	str	r3, [r7, #12]
    self->obj = obj;
    e38a:	68fb      	ldr	r3, [r7, #12]
    e38c:	683a      	ldr	r2, [r7, #0]
    e38e:	605a      	str	r2, [r3, #4]
}
    e390:	bf00      	nop
    e392:	3714      	adds	r7, #20
    e394:	46bd      	mov	sp, r7
    e396:	f85d 7b04 	ldr.w	r7, [sp], #4
    e39a:	4770      	bx	lr

0000e39c <mp_obj_new_cell>:
#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_DETAILED
    .print = cell_print,
#endif
};

mp_obj_t mp_obj_new_cell(mp_obj_t obj) {
    e39c:	b580      	push	{r7, lr}
    e39e:	b084      	sub	sp, #16
    e3a0:	af00      	add	r7, sp, #0
    e3a2:	6078      	str	r0, [r7, #4]
    mp_obj_cell_t *o = m_new_obj(mp_obj_cell_t);
    e3a4:	2008      	movs	r0, #8
    e3a6:	f7f1 ffb9 	bl	31c <m_malloc>
    e3aa:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_cell;
    e3ac:	68fb      	ldr	r3, [r7, #12]
    e3ae:	4a05      	ldr	r2, [pc, #20]	; (e3c4 <mp_obj_new_cell+0x28>)
    e3b0:	601a      	str	r2, [r3, #0]
    o->obj = obj;
    e3b2:	68fb      	ldr	r3, [r7, #12]
    e3b4:	687a      	ldr	r2, [r7, #4]
    e3b6:	605a      	str	r2, [r3, #4]
    return MP_OBJ_FROM_PTR(o);
    e3b8:	68fb      	ldr	r3, [r7, #12]
}
    e3ba:	4618      	mov	r0, r3
    e3bc:	3710      	adds	r7, #16
    e3be:	46bd      	mov	sp, r7
    e3c0:	bd80      	pop	{r7, pc}
    e3c2:	bf00      	nop
    e3c4:	00021ca4 	.word	0x00021ca4

0000e3c8 <closure_call>:
    mp_obj_t fun;
    size_t n_closed;
    mp_obj_t closed[];
} mp_obj_closure_t;

STATIC mp_obj_t closure_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e3c8:	b580      	push	{r7, lr}
    e3ca:	b08e      	sub	sp, #56	; 0x38
    e3cc:	af00      	add	r7, sp, #0
    e3ce:	60f8      	str	r0, [r7, #12]
    e3d0:	60b9      	str	r1, [r7, #8]
    e3d2:	607a      	str	r2, [r7, #4]
    e3d4:	603b      	str	r3, [r7, #0]
    mp_obj_closure_t *self = MP_OBJ_TO_PTR(self_in);
    e3d6:	68fb      	ldr	r3, [r7, #12]
    e3d8:	637b      	str	r3, [r7, #52]	; 0x34

    // need to concatenate closed-over-vars and args

    size_t n_total = self->n_closed + n_args + 2 * n_kw;
    e3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e3dc:	689a      	ldr	r2, [r3, #8]
    e3de:	68bb      	ldr	r3, [r7, #8]
    e3e0:	441a      	add	r2, r3
    e3e2:	687b      	ldr	r3, [r7, #4]
    e3e4:	005b      	lsls	r3, r3, #1
    e3e6:	4413      	add	r3, r2
    e3e8:	633b      	str	r3, [r7, #48]	; 0x30
    if (n_total <= 5) {
    e3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e3ec:	2b05      	cmp	r3, #5
    e3ee:	d826      	bhi.n	e43e <closure_call+0x76>
        // use stack to allocate temporary args array
        mp_obj_t args2[5];
        memcpy(args2, self->closed, self->n_closed * sizeof(mp_obj_t));
    e3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e3f2:	f103 010c 	add.w	r1, r3, #12
    e3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e3f8:	689b      	ldr	r3, [r3, #8]
    e3fa:	009a      	lsls	r2, r3, #2
    e3fc:	f107 0314 	add.w	r3, r7, #20
    e400:	4618      	mov	r0, r3
    e402:	f00e fcc5 	bl	1cd90 <memcpy>
        memcpy(args2 + self->n_closed, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
    e406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e408:	689b      	ldr	r3, [r3, #8]
    e40a:	009b      	lsls	r3, r3, #2
    e40c:	f107 0214 	add.w	r2, r7, #20
    e410:	18d0      	adds	r0, r2, r3
    e412:	687b      	ldr	r3, [r7, #4]
    e414:	005a      	lsls	r2, r3, #1
    e416:	68bb      	ldr	r3, [r7, #8]
    e418:	4413      	add	r3, r2
    e41a:	009b      	lsls	r3, r3, #2
    e41c:	461a      	mov	r2, r3
    e41e:	6839      	ldr	r1, [r7, #0]
    e420:	f00e fcb6 	bl	1cd90 <memcpy>
        return mp_call_function_n_kw(self->fun, self->n_closed + n_args, n_kw, args2);
    e424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e426:	6858      	ldr	r0, [r3, #4]
    e428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e42a:	689a      	ldr	r2, [r3, #8]
    e42c:	68bb      	ldr	r3, [r7, #8]
    e42e:	18d1      	adds	r1, r2, r3
    e430:	f107 0314 	add.w	r3, r7, #20
    e434:	687a      	ldr	r2, [r7, #4]
    e436:	f7fd fd0d 	bl	be54 <mp_call_function_n_kw>
    e43a:	4603      	mov	r3, r0
    e43c:	e02c      	b.n	e498 <closure_call+0xd0>
    } else {
        // use heap to allocate temporary args array
        mp_obj_t *args2 = m_new(mp_obj_t, n_total);
    e43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e440:	009b      	lsls	r3, r3, #2
    e442:	4618      	mov	r0, r3
    e444:	f7f1 ff6a 	bl	31c <m_malloc>
    e448:	62f8      	str	r0, [r7, #44]	; 0x2c
        memcpy(args2, self->closed, self->n_closed * sizeof(mp_obj_t));
    e44a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e44c:	f103 010c 	add.w	r1, r3, #12
    e450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e452:	689b      	ldr	r3, [r3, #8]
    e454:	009b      	lsls	r3, r3, #2
    e456:	461a      	mov	r2, r3
    e458:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e45a:	f00e fc99 	bl	1cd90 <memcpy>
        memcpy(args2 + self->n_closed, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
    e45e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e460:	689b      	ldr	r3, [r3, #8]
    e462:	009b      	lsls	r3, r3, #2
    e464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e466:	18d0      	adds	r0, r2, r3
    e468:	687b      	ldr	r3, [r7, #4]
    e46a:	005a      	lsls	r2, r3, #1
    e46c:	68bb      	ldr	r3, [r7, #8]
    e46e:	4413      	add	r3, r2
    e470:	009b      	lsls	r3, r3, #2
    e472:	461a      	mov	r2, r3
    e474:	6839      	ldr	r1, [r7, #0]
    e476:	f00e fc8b 	bl	1cd90 <memcpy>
        mp_obj_t res = mp_call_function_n_kw(self->fun, self->n_closed + n_args, n_kw, args2);
    e47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e47c:	6858      	ldr	r0, [r3, #4]
    e47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e480:	689a      	ldr	r2, [r3, #8]
    e482:	68bb      	ldr	r3, [r7, #8]
    e484:	18d1      	adds	r1, r2, r3
    e486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e488:	687a      	ldr	r2, [r7, #4]
    e48a:	f7fd fce3 	bl	be54 <mp_call_function_n_kw>
    e48e:	62b8      	str	r0, [r7, #40]	; 0x28
        m_del(mp_obj_t, args2, n_total);
    e490:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e492:	f7f1 ffbd 	bl	410 <m_free>
        return res;
    e496:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
}
    e498:	4618      	mov	r0, r3
    e49a:	3738      	adds	r7, #56	; 0x38
    e49c:	46bd      	mov	sp, r7
    e49e:	bd80      	pop	{r7, pc}

0000e4a0 <mp_obj_new_closure>:
    .print = closure_print,
#endif
    .call = closure_call,
};

mp_obj_t mp_obj_new_closure(mp_obj_t fun, size_t n_closed_over, const mp_obj_t *closed) {
    e4a0:	b580      	push	{r7, lr}
    e4a2:	b086      	sub	sp, #24
    e4a4:	af00      	add	r7, sp, #0
    e4a6:	60f8      	str	r0, [r7, #12]
    e4a8:	60b9      	str	r1, [r7, #8]
    e4aa:	607a      	str	r2, [r7, #4]
    mp_obj_closure_t *o = m_new_obj_var(mp_obj_closure_t, mp_obj_t, n_closed_over);
    e4ac:	68bb      	ldr	r3, [r7, #8]
    e4ae:	3303      	adds	r3, #3
    e4b0:	009b      	lsls	r3, r3, #2
    e4b2:	4618      	mov	r0, r3
    e4b4:	f7f1 ff32 	bl	31c <m_malloc>
    e4b8:	6178      	str	r0, [r7, #20]
    o->base.type = &closure_type;
    e4ba:	697b      	ldr	r3, [r7, #20]
    e4bc:	4a0a      	ldr	r2, [pc, #40]	; (e4e8 <mp_obj_new_closure+0x48>)
    e4be:	601a      	str	r2, [r3, #0]
    o->fun = fun;
    e4c0:	697b      	ldr	r3, [r7, #20]
    e4c2:	68fa      	ldr	r2, [r7, #12]
    e4c4:	605a      	str	r2, [r3, #4]
    o->n_closed = n_closed_over;
    e4c6:	697b      	ldr	r3, [r7, #20]
    e4c8:	68ba      	ldr	r2, [r7, #8]
    e4ca:	609a      	str	r2, [r3, #8]
    memcpy(o->closed, closed, n_closed_over * sizeof(mp_obj_t));
    e4cc:	697b      	ldr	r3, [r7, #20]
    e4ce:	f103 000c 	add.w	r0, r3, #12
    e4d2:	68bb      	ldr	r3, [r7, #8]
    e4d4:	009b      	lsls	r3, r3, #2
    e4d6:	461a      	mov	r2, r3
    e4d8:	6879      	ldr	r1, [r7, #4]
    e4da:	f00e fc59 	bl	1cd90 <memcpy>
    return MP_OBJ_FROM_PTR(o);
    e4de:	697b      	ldr	r3, [r7, #20]
}
    e4e0:	4618      	mov	r0, r3
    e4e2:	3718      	adds	r7, #24
    e4e4:	46bd      	mov	sp, r7
    e4e6:	bd80      	pop	{r7, pc}
    e4e8:	00021ce0 	.word	0x00021ce0

0000e4ec <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    e4ec:	b480      	push	{r7}
    e4ee:	b083      	sub	sp, #12
    e4f0:	af00      	add	r7, sp, #0
    e4f2:	6078      	str	r0, [r7, #4]
    e4f4:	687b      	ldr	r3, [r7, #4]
    e4f6:	f003 0303 	and.w	r3, r3, #3
    e4fa:	2b00      	cmp	r3, #0
    e4fc:	bf0c      	ite	eq
    e4fe:	2301      	moveq	r3, #1
    e500:	2300      	movne	r3, #0
    e502:	b2db      	uxtb	r3, r3
    e504:	4618      	mov	r0, r3
    e506:	370c      	adds	r7, #12
    e508:	46bd      	mov	sp, r7
    e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e50e:	4770      	bx	lr

0000e510 <MP_MAP_SLOT_IS_FILLED>:
static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
    e510:	b480      	push	{r7}
    e512:	b083      	sub	sp, #12
    e514:	af00      	add	r7, sp, #0
    e516:	6078      	str	r0, [r7, #4]
    e518:	6039      	str	r1, [r7, #0]
    e51a:	687b      	ldr	r3, [r7, #4]
    e51c:	689a      	ldr	r2, [r3, #8]
    e51e:	683b      	ldr	r3, [r7, #0]
    e520:	00db      	lsls	r3, r3, #3
    e522:	4413      	add	r3, r2
    e524:	681b      	ldr	r3, [r3, #0]
    e526:	2b00      	cmp	r3, #0
    e528:	d009      	beq.n	e53e <MP_MAP_SLOT_IS_FILLED+0x2e>
    e52a:	687b      	ldr	r3, [r7, #4]
    e52c:	689a      	ldr	r2, [r3, #8]
    e52e:	683b      	ldr	r3, [r7, #0]
    e530:	00db      	lsls	r3, r3, #3
    e532:	4413      	add	r3, r2
    e534:	681b      	ldr	r3, [r3, #0]
    e536:	2b08      	cmp	r3, #8
    e538:	d001      	beq.n	e53e <MP_MAP_SLOT_IS_FILLED+0x2e>
    e53a:	2301      	movs	r3, #1
    e53c:	e000      	b.n	e540 <MP_MAP_SLOT_IS_FILLED+0x30>
    e53e:	2300      	movs	r3, #0
    e540:	f003 0301 	and.w	r3, r3, #1
    e544:	b2db      	uxtb	r3, r3
    e546:	4618      	mov	r0, r3
    e548:	370c      	adds	r7, #12
    e54a:	46bd      	mov	sp, r7
    e54c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e550:	4770      	bx	lr
    e552:	bf00      	nop

0000e554 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    e554:	b480      	push	{r7}
    e556:	b083      	sub	sp, #12
    e558:	af00      	add	r7, sp, #0
    e55a:	6078      	str	r0, [r7, #4]
    e55c:	687b      	ldr	r3, [r7, #4]
    e55e:	2b00      	cmp	r3, #0
    e560:	d001      	beq.n	e566 <mp_obj_new_bool+0x12>
    e562:	4b04      	ldr	r3, [pc, #16]	; (e574 <mp_obj_new_bool+0x20>)
    e564:	e000      	b.n	e568 <mp_obj_new_bool+0x14>
    e566:	4b04      	ldr	r3, [pc, #16]	; (e578 <mp_obj_new_bool+0x24>)
    e568:	4618      	mov	r0, r3
    e56a:	370c      	adds	r7, #12
    e56c:	46bd      	mov	sp, r7
    e56e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e572:	4770      	bx	lr
    e574:	00021c60 	.word	0x00021c60
    e578:	00021c58 	.word	0x00021c58

0000e57c <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
    e57c:	b580      	push	{r7, lr}
    e57e:	b084      	sub	sp, #16
    e580:	af00      	add	r7, sp, #0
    e582:	60f8      	str	r0, [r7, #12]
    e584:	60b9      	str	r1, [r7, #8]
    e586:	607a      	str	r2, [r7, #4]
    e588:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
    e58a:	687b      	ldr	r3, [r7, #4]
    e58c:	045a      	lsls	r2, r3, #17
    e58e:	683b      	ldr	r3, [r7, #0]
    e590:	005b      	lsls	r3, r3, #1
    e592:	431a      	orrs	r2, r3
    e594:	7e3b      	ldrb	r3, [r7, #24]
    e596:	2b00      	cmp	r3, #0
    e598:	d001      	beq.n	e59e <mp_arg_check_num+0x22>
    e59a:	2301      	movs	r3, #1
    e59c:	e000      	b.n	e5a0 <mp_arg_check_num+0x24>
    e59e:	2300      	movs	r3, #0
    e5a0:	4313      	orrs	r3, r2
    e5a2:	461a      	mov	r2, r3
    e5a4:	68b9      	ldr	r1, [r7, #8]
    e5a6:	68f8      	ldr	r0, [r7, #12]
    e5a8:	f7fe fd72 	bl	d090 <mp_arg_check_num_sig>
}
    e5ac:	bf00      	nop
    e5ae:	3710      	adds	r7, #16
    e5b0:	46bd      	mov	sp, r7
    e5b2:	bd80      	pop	{r7, pc}

0000e5b4 <dict_iter_next>:
STATIC mp_obj_t dict_update(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs);

// This is a helper function to iterate through a dictionary.  The state of
// the iteration is held in *cur and should be initialised with zero for the
// first call.  Will return NULL when no more elements are available.
STATIC mp_map_elem_t *dict_iter_next(mp_obj_dict_t *dict, size_t *cur) {
    e5b4:	b580      	push	{r7, lr}
    e5b6:	b086      	sub	sp, #24
    e5b8:	af00      	add	r7, sp, #0
    e5ba:	6078      	str	r0, [r7, #4]
    e5bc:	6039      	str	r1, [r7, #0]
    size_t max = dict->map.alloc;
    e5be:	687b      	ldr	r3, [r7, #4]
    e5c0:	689b      	ldr	r3, [r3, #8]
    e5c2:	613b      	str	r3, [r7, #16]
    mp_map_t *map = &dict->map;
    e5c4:	687b      	ldr	r3, [r7, #4]
    e5c6:	3304      	adds	r3, #4
    e5c8:	60fb      	str	r3, [r7, #12]

    for (size_t i = *cur; i < max; i++) {
    e5ca:	683b      	ldr	r3, [r7, #0]
    e5cc:	681b      	ldr	r3, [r3, #0]
    e5ce:	617b      	str	r3, [r7, #20]
    e5d0:	e013      	b.n	e5fa <dict_iter_next+0x46>
        if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    e5d2:	6979      	ldr	r1, [r7, #20]
    e5d4:	68f8      	ldr	r0, [r7, #12]
    e5d6:	f7ff ff9b 	bl	e510 <MP_MAP_SLOT_IS_FILLED>
    e5da:	4603      	mov	r3, r0
    e5dc:	2b00      	cmp	r3, #0
    e5de:	d009      	beq.n	e5f4 <dict_iter_next+0x40>
            *cur = i + 1;
    e5e0:	697b      	ldr	r3, [r7, #20]
    e5e2:	1c5a      	adds	r2, r3, #1
    e5e4:	683b      	ldr	r3, [r7, #0]
    e5e6:	601a      	str	r2, [r3, #0]
            return &(map->table[i]);
    e5e8:	68fb      	ldr	r3, [r7, #12]
    e5ea:	689a      	ldr	r2, [r3, #8]
    e5ec:	697b      	ldr	r3, [r7, #20]
    e5ee:	00db      	lsls	r3, r3, #3
    e5f0:	4413      	add	r3, r2
    e5f2:	e007      	b.n	e604 <dict_iter_next+0x50>
    for (size_t i = *cur; i < max; i++) {
    e5f4:	697b      	ldr	r3, [r7, #20]
    e5f6:	3301      	adds	r3, #1
    e5f8:	617b      	str	r3, [r7, #20]
    e5fa:	697a      	ldr	r2, [r7, #20]
    e5fc:	693b      	ldr	r3, [r7, #16]
    e5fe:	429a      	cmp	r2, r3
    e600:	d3e7      	bcc.n	e5d2 <dict_iter_next+0x1e>
        }
    }

    return NULL;
    e602:	2300      	movs	r3, #0
}
    e604:	4618      	mov	r0, r3
    e606:	3718      	adds	r7, #24
    e608:	46bd      	mov	sp, r7
    e60a:	bd80      	pop	{r7, pc}

0000e60c <dict_print>:

STATIC void dict_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    e60c:	b580      	push	{r7, lr}
    e60e:	b088      	sub	sp, #32
    e610:	af00      	add	r7, sp, #0
    e612:	60f8      	str	r0, [r7, #12]
    e614:	60b9      	str	r1, [r7, #8]
    e616:	607a      	str	r2, [r7, #4]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e618:	68bb      	ldr	r3, [r7, #8]
    e61a:	61bb      	str	r3, [r7, #24]
    bool first = true;
    e61c:	2301      	movs	r3, #1
    e61e:	77fb      	strb	r3, [r7, #31]
    if (!(MICROPY_PY_UJSON && kind == PRINT_JSON)) {
        kind = PRINT_REPR;
    e620:	2301      	movs	r3, #1
    e622:	607b      	str	r3, [r7, #4]
    }
    if (MICROPY_PY_COLLECTIONS_ORDEREDDICT && self->base.type != &mp_type_dict) {
        mp_printf(print, "%q(", self->base.type->name);
    }
    mp_print_str(print, "{");
    e624:	491c      	ldr	r1, [pc, #112]	; (e698 <dict_print+0x8c>)
    e626:	68f8      	ldr	r0, [r7, #12]
    e628:	f7f3 f9f2 	bl	1a10 <mp_print_str>
    size_t cur = 0;
    e62c:	2300      	movs	r3, #0
    e62e:	613b      	str	r3, [r7, #16]
    mp_map_elem_t *next = NULL;
    e630:	2300      	movs	r3, #0
    e632:	617b      	str	r3, [r7, #20]
    while ((next = dict_iter_next(self, &cur)) != NULL) {
    e634:	e01d      	b.n	e672 <dict_print+0x66>
        if (!first) {
    e636:	7ffb      	ldrb	r3, [r7, #31]
    e638:	f083 0301 	eor.w	r3, r3, #1
    e63c:	b2db      	uxtb	r3, r3
    e63e:	2b00      	cmp	r3, #0
    e640:	d003      	beq.n	e64a <dict_print+0x3e>
            mp_print_str(print, ", ");
    e642:	4916      	ldr	r1, [pc, #88]	; (e69c <dict_print+0x90>)
    e644:	68f8      	ldr	r0, [r7, #12]
    e646:	f7f3 f9e3 	bl	1a10 <mp_print_str>
        }
        first = false;
    e64a:	2300      	movs	r3, #0
    e64c:	77fb      	strb	r3, [r7, #31]
        mp_obj_print_helper(print, next->key, kind);
    e64e:	697b      	ldr	r3, [r7, #20]
    e650:	681b      	ldr	r3, [r3, #0]
    e652:	687a      	ldr	r2, [r7, #4]
    e654:	4619      	mov	r1, r3
    e656:	68f8      	ldr	r0, [r7, #12]
    e658:	f7ff f94e 	bl	d8f8 <mp_obj_print_helper>
        mp_print_str(print, ": ");
    e65c:	4910      	ldr	r1, [pc, #64]	; (e6a0 <dict_print+0x94>)
    e65e:	68f8      	ldr	r0, [r7, #12]
    e660:	f7f3 f9d6 	bl	1a10 <mp_print_str>
        mp_obj_print_helper(print, next->value, kind);
    e664:	697b      	ldr	r3, [r7, #20]
    e666:	685b      	ldr	r3, [r3, #4]
    e668:	687a      	ldr	r2, [r7, #4]
    e66a:	4619      	mov	r1, r3
    e66c:	68f8      	ldr	r0, [r7, #12]
    e66e:	f7ff f943 	bl	d8f8 <mp_obj_print_helper>
    while ((next = dict_iter_next(self, &cur)) != NULL) {
    e672:	f107 0310 	add.w	r3, r7, #16
    e676:	4619      	mov	r1, r3
    e678:	69b8      	ldr	r0, [r7, #24]
    e67a:	f7ff ff9b 	bl	e5b4 <dict_iter_next>
    e67e:	6178      	str	r0, [r7, #20]
    e680:	697b      	ldr	r3, [r7, #20]
    e682:	2b00      	cmp	r3, #0
    e684:	d1d7      	bne.n	e636 <dict_print+0x2a>
    }
    mp_print_str(print, "}");
    e686:	4907      	ldr	r1, [pc, #28]	; (e6a4 <dict_print+0x98>)
    e688:	68f8      	ldr	r0, [r7, #12]
    e68a:	f7f3 f9c1 	bl	1a10 <mp_print_str>
    if (MICROPY_PY_COLLECTIONS_ORDEREDDICT && self->base.type != &mp_type_dict) {
        mp_print_str(print, ")");
    }
}
    e68e:	bf00      	nop
    e690:	3720      	adds	r7, #32
    e692:	46bd      	mov	sp, r7
    e694:	bd80      	pop	{r7, pc}
    e696:	bf00      	nop
    e698:	00021d1c 	.word	0x00021d1c
    e69c:	00021d20 	.word	0x00021d20
    e6a0:	00021d24 	.word	0x00021d24
    e6a4:	00021d28 	.word	0x00021d28

0000e6a8 <dict_make_new>:

STATIC mp_obj_t dict_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e6a8:	b580      	push	{r7, lr}
    e6aa:	b08c      	sub	sp, #48	; 0x30
    e6ac:	af00      	add	r7, sp, #0
    e6ae:	60f8      	str	r0, [r7, #12]
    e6b0:	60b9      	str	r1, [r7, #8]
    e6b2:	607a      	str	r2, [r7, #4]
    e6b4:	603b      	str	r3, [r7, #0]
    mp_obj_t dict_out = mp_obj_new_dict(0);
    e6b6:	2000      	movs	r0, #0
    e6b8:	f000 fdbc 	bl	f234 <mp_obj_new_dict>
    e6bc:	62f8      	str	r0, [r7, #44]	; 0x2c
    mp_obj_dict_t *dict = MP_OBJ_TO_PTR(dict_out);
    e6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e6c0:	62bb      	str	r3, [r7, #40]	; 0x28
    dict->base.type = type;
    e6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e6c4:	68fa      	ldr	r2, [r7, #12]
    e6c6:	601a      	str	r2, [r3, #0]
    #if MICROPY_PY_COLLECTIONS_ORDEREDDICT
    if (type == &mp_type_ordereddict) {
        dict->map.is_ordered = 1;
    }
    #endif
    if (n_args > 0 || n_kw > 0) {
    e6c8:	68bb      	ldr	r3, [r7, #8]
    e6ca:	2b00      	cmp	r3, #0
    e6cc:	d102      	bne.n	e6d4 <dict_make_new+0x2c>
    e6ce:	687b      	ldr	r3, [r7, #4]
    e6d0:	2b00      	cmp	r3, #0
    e6d2:	d017      	beq.n	e704 <dict_make_new+0x5c>
        mp_obj_t args2[2] = {dict_out, args[0]}; // args[0] is always valid, even if it's not a positional arg
    e6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e6d6:	623b      	str	r3, [r7, #32]
    e6d8:	683b      	ldr	r3, [r7, #0]
    e6da:	681b      	ldr	r3, [r3, #0]
    e6dc:	627b      	str	r3, [r7, #36]	; 0x24
        mp_map_t kwargs;
        mp_map_init_fixed_table(&kwargs, n_kw, args + n_args);
    e6de:	68bb      	ldr	r3, [r7, #8]
    e6e0:	009b      	lsls	r3, r3, #2
    e6e2:	683a      	ldr	r2, [r7, #0]
    e6e4:	441a      	add	r2, r3
    e6e6:	f107 0314 	add.w	r3, r7, #20
    e6ea:	6879      	ldr	r1, [r7, #4]
    e6ec:	4618      	mov	r0, r3
    e6ee:	f7fe fe5f 	bl	d3b0 <mp_map_init_fixed_table>
        dict_update(n_args + 1, args2, &kwargs); // dict_update will check that n_args + 1 == 1 or 2
    e6f2:	68bb      	ldr	r3, [r7, #8]
    e6f4:	3301      	adds	r3, #1
    e6f6:	f107 0214 	add.w	r2, r7, #20
    e6fa:	f107 0120 	add.w	r1, r7, #32
    e6fe:	4618      	mov	r0, r3
    e700:	f000 faec 	bl	ecdc <dict_update>
    }
    return dict_out;
    e704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    e706:	4618      	mov	r0, r3
    e708:	3730      	adds	r7, #48	; 0x30
    e70a:	46bd      	mov	sp, r7
    e70c:	bd80      	pop	{r7, pc}
    e70e:	bf00      	nop

0000e710 <dict_unary_op>:

STATIC mp_obj_t dict_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
    e710:	b580      	push	{r7, lr}
    e712:	b084      	sub	sp, #16
    e714:	af00      	add	r7, sp, #0
    e716:	6078      	str	r0, [r7, #4]
    e718:	6039      	str	r1, [r7, #0]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e71a:	683b      	ldr	r3, [r7, #0]
    e71c:	60fb      	str	r3, [r7, #12]
    switch (op) {
    e71e:	687b      	ldr	r3, [r7, #4]
    e720:	2b04      	cmp	r3, #4
    e722:	d002      	beq.n	e72a <dict_unary_op+0x1a>
    e724:	2b05      	cmp	r3, #5
    e726:	d00e      	beq.n	e746 <dict_unary_op+0x36>
    e728:	e015      	b.n	e756 <dict_unary_op+0x46>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->map.used != 0);
    e72a:	68fb      	ldr	r3, [r7, #12]
    e72c:	685b      	ldr	r3, [r3, #4]
    e72e:	f023 0307 	bic.w	r3, r3, #7
    e732:	2b00      	cmp	r3, #0
    e734:	bf14      	ite	ne
    e736:	2301      	movne	r3, #1
    e738:	2300      	moveq	r3, #0
    e73a:	b2db      	uxtb	r3, r3
    e73c:	4618      	mov	r0, r3
    e73e:	f7ff ff09 	bl	e554 <mp_obj_new_bool>
    e742:	4603      	mov	r3, r0
    e744:	e008      	b.n	e758 <dict_unary_op+0x48>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->map.used);
    e746:	68fb      	ldr	r3, [r7, #12]
    e748:	685b      	ldr	r3, [r3, #4]
    e74a:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    e74e:	005b      	lsls	r3, r3, #1
    e750:	f043 0301 	orr.w	r3, r3, #1
    e754:	e000      	b.n	e758 <dict_unary_op+0x48>
        case MP_UNARY_OP_SIZEOF: {
            size_t sz = sizeof(*self) + sizeof(*self->map.table) * self->map.alloc;
            return MP_OBJ_NEW_SMALL_INT(sz);
        }
        #endif
        default: return MP_OBJ_NULL; // op not supported
    e756:	2300      	movs	r3, #0
    }
}
    e758:	4618      	mov	r0, r3
    e75a:	3710      	adds	r7, #16
    e75c:	46bd      	mov	sp, r7
    e75e:	bd80      	pop	{r7, pc}

0000e760 <dict_binary_op>:

STATIC mp_obj_t dict_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    e760:	b580      	push	{r7, lr}
    e762:	b08a      	sub	sp, #40	; 0x28
    e764:	af00      	add	r7, sp, #0
    e766:	60f8      	str	r0, [r7, #12]
    e768:	60b9      	str	r1, [r7, #8]
    e76a:	607a      	str	r2, [r7, #4]
    mp_obj_dict_t *o = MP_OBJ_TO_PTR(lhs_in);
    e76c:	68bb      	ldr	r3, [r7, #8]
    e76e:	627b      	str	r3, [r7, #36]	; 0x24
    switch (op) {
    e770:	68fb      	ldr	r3, [r7, #12]
    e772:	2b02      	cmp	r3, #2
    e774:	d014      	beq.n	e7a0 <dict_binary_op+0x40>
    e776:	2b22      	cmp	r3, #34	; 0x22
    e778:	d15a      	bne.n	e830 <dict_binary_op+0xd0>
        case MP_BINARY_OP_CONTAINS: {
            mp_map_elem_t *elem = mp_map_lookup(&o->map, rhs_in, MP_MAP_LOOKUP);
    e77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e77c:	3304      	adds	r3, #4
    e77e:	2200      	movs	r2, #0
    e780:	6879      	ldr	r1, [r7, #4]
    e782:	4618      	mov	r0, r3
    e784:	f7fe fedc 	bl	d540 <mp_map_lookup>
    e788:	6238      	str	r0, [r7, #32]
            return mp_obj_new_bool(elem != NULL);
    e78a:	6a3b      	ldr	r3, [r7, #32]
    e78c:	2b00      	cmp	r3, #0
    e78e:	bf14      	ite	ne
    e790:	2301      	movne	r3, #1
    e792:	2300      	moveq	r3, #0
    e794:	b2db      	uxtb	r3, r3
    e796:	4618      	mov	r0, r3
    e798:	f7ff fedc 	bl	e554 <mp_obj_new_bool>
    e79c:	4603      	mov	r3, r0
    e79e:	e048      	b.n	e832 <dict_binary_op+0xd2>
                    }
                }
                return e1 == NULL && e2 == NULL ? mp_const_true : mp_const_false;
            } else
            #endif
            if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_dict)) {
    e7a0:	6878      	ldr	r0, [r7, #4]
    e7a2:	f7ff fea3 	bl	e4ec <MP_OBJ_IS_OBJ>
    e7a6:	4603      	mov	r3, r0
    e7a8:	2b00      	cmp	r3, #0
    e7aa:	d03f      	beq.n	e82c <dict_binary_op+0xcc>
    e7ac:	687b      	ldr	r3, [r7, #4]
    e7ae:	681b      	ldr	r3, [r3, #0]
    e7b0:	4a22      	ldr	r2, [pc, #136]	; (e83c <dict_binary_op+0xdc>)
    e7b2:	4293      	cmp	r3, r2
    e7b4:	d13a      	bne.n	e82c <dict_binary_op+0xcc>
                mp_obj_dict_t *rhs = MP_OBJ_TO_PTR(rhs_in);
    e7b6:	687b      	ldr	r3, [r7, #4]
    e7b8:	61fb      	str	r3, [r7, #28]
                if (o->map.used != rhs->map.used) {
    e7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e7bc:	685b      	ldr	r3, [r3, #4]
    e7be:	f3c3 02dc 	ubfx	r2, r3, #3, #29
    e7c2:	69fb      	ldr	r3, [r7, #28]
    e7c4:	685b      	ldr	r3, [r3, #4]
    e7c6:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    e7ca:	429a      	cmp	r2, r3
    e7cc:	d001      	beq.n	e7d2 <dict_binary_op+0x72>
                    return mp_const_false;
    e7ce:	4b1c      	ldr	r3, [pc, #112]	; (e840 <dict_binary_op+0xe0>)
    e7d0:	e02f      	b.n	e832 <dict_binary_op+0xd2>
                }

                size_t cur = 0;
    e7d2:	2300      	movs	r3, #0
    e7d4:	613b      	str	r3, [r7, #16]
                mp_map_elem_t *next = NULL;
    e7d6:	2300      	movs	r3, #0
    e7d8:	61bb      	str	r3, [r7, #24]
                while ((next = dict_iter_next(o, &cur)) != NULL) {
    e7da:	e01b      	b.n	e814 <dict_binary_op+0xb4>
                    mp_map_elem_t *elem = mp_map_lookup(&rhs->map, next->key, MP_MAP_LOOKUP);
    e7dc:	69fb      	ldr	r3, [r7, #28]
    e7de:	1d18      	adds	r0, r3, #4
    e7e0:	69bb      	ldr	r3, [r7, #24]
    e7e2:	681b      	ldr	r3, [r3, #0]
    e7e4:	2200      	movs	r2, #0
    e7e6:	4619      	mov	r1, r3
    e7e8:	f7fe feaa 	bl	d540 <mp_map_lookup>
    e7ec:	6178      	str	r0, [r7, #20]
                    if (elem == NULL || !mp_obj_equal(next->value, elem->value)) {
    e7ee:	697b      	ldr	r3, [r7, #20]
    e7f0:	2b00      	cmp	r3, #0
    e7f2:	d00d      	beq.n	e810 <dict_binary_op+0xb0>
    e7f4:	69bb      	ldr	r3, [r7, #24]
    e7f6:	685a      	ldr	r2, [r3, #4]
    e7f8:	697b      	ldr	r3, [r7, #20]
    e7fa:	685b      	ldr	r3, [r3, #4]
    e7fc:	4619      	mov	r1, r3
    e7fe:	4610      	mov	r0, r2
    e800:	f7ff f99c 	bl	db3c <mp_obj_equal>
    e804:	4603      	mov	r3, r0
    e806:	f083 0301 	eor.w	r3, r3, #1
    e80a:	b2db      	uxtb	r3, r3
    e80c:	2b00      	cmp	r3, #0
    e80e:	d001      	beq.n	e814 <dict_binary_op+0xb4>
                        return mp_const_false;
    e810:	4b0b      	ldr	r3, [pc, #44]	; (e840 <dict_binary_op+0xe0>)
    e812:	e00e      	b.n	e832 <dict_binary_op+0xd2>
                while ((next = dict_iter_next(o, &cur)) != NULL) {
    e814:	f107 0310 	add.w	r3, r7, #16
    e818:	4619      	mov	r1, r3
    e81a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e81c:	f7ff feca 	bl	e5b4 <dict_iter_next>
    e820:	61b8      	str	r0, [r7, #24]
    e822:	69bb      	ldr	r3, [r7, #24]
    e824:	2b00      	cmp	r3, #0
    e826:	d1d9      	bne.n	e7dc <dict_binary_op+0x7c>
                    }
                }
                return mp_const_true;
    e828:	4b06      	ldr	r3, [pc, #24]	; (e844 <dict_binary_op+0xe4>)
    e82a:	e002      	b.n	e832 <dict_binary_op+0xd2>
            } else {
                // dict is not equal to instance of any other type
                return mp_const_false;
    e82c:	4b04      	ldr	r3, [pc, #16]	; (e840 <dict_binary_op+0xe0>)
    e82e:	e000      	b.n	e832 <dict_binary_op+0xd2>
            }
        }
        default:
            // op not supported
            return MP_OBJ_NULL;
    e830:	2300      	movs	r3, #0
    }
}
    e832:	4618      	mov	r0, r3
    e834:	3728      	adds	r7, #40	; 0x28
    e836:	46bd      	mov	sp, r7
    e838:	bd80      	pop	{r7, pc}
    e83a:	bf00      	nop
    e83c:	00022104 	.word	0x00022104
    e840:	00021c58 	.word	0x00021c58
    e844:	00021c60 	.word	0x00021c60

0000e848 <mp_obj_dict_get>:

// Note: Make sure this is inlined in load part of dict_subscr() below.
mp_obj_t mp_obj_dict_get(mp_obj_t self_in, mp_obj_t index) {
    e848:	b580      	push	{r7, lr}
    e84a:	b084      	sub	sp, #16
    e84c:	af00      	add	r7, sp, #0
    e84e:	6078      	str	r0, [r7, #4]
    e850:	6039      	str	r1, [r7, #0]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e852:	687b      	ldr	r3, [r7, #4]
    e854:	60fb      	str	r3, [r7, #12]
    mp_map_elem_t *elem = mp_map_lookup(&self->map, index, MP_MAP_LOOKUP);
    e856:	68fb      	ldr	r3, [r7, #12]
    e858:	3304      	adds	r3, #4
    e85a:	2200      	movs	r2, #0
    e85c:	6839      	ldr	r1, [r7, #0]
    e85e:	4618      	mov	r0, r3
    e860:	f7fe fe6e 	bl	d540 <mp_map_lookup>
    e864:	60b8      	str	r0, [r7, #8]
    if (elem == NULL) {
    e866:	68bb      	ldr	r3, [r7, #8]
    e868:	2b00      	cmp	r3, #0
    e86a:	d107      	bne.n	e87c <mp_obj_dict_get+0x34>
        nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, index));
    e86c:	6839      	ldr	r1, [r7, #0]
    e86e:	4806      	ldr	r0, [pc, #24]	; (e888 <mp_obj_dict_get+0x40>)
    e870:	f000 fe92 	bl	f598 <mp_obj_new_exception_arg1>
    e874:	4603      	mov	r3, r0
    e876:	4618      	mov	r0, r3
    e878:	f7f1 fd32 	bl	2e0 <nlr_jump>
    } else {
        return elem->value;
    e87c:	68bb      	ldr	r3, [r7, #8]
    e87e:	685b      	ldr	r3, [r3, #4]
    }
}
    e880:	4618      	mov	r0, r3
    e882:	3710      	adds	r7, #16
    e884:	46bd      	mov	sp, r7
    e886:	bd80      	pop	{r7, pc}
    e888:	0002258c 	.word	0x0002258c

0000e88c <dict_subscr>:

STATIC mp_obj_t dict_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
    e88c:	b580      	push	{r7, lr}
    e88e:	b086      	sub	sp, #24
    e890:	af00      	add	r7, sp, #0
    e892:	60f8      	str	r0, [r7, #12]
    e894:	60b9      	str	r1, [r7, #8]
    e896:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_NULL) {
    e898:	687b      	ldr	r3, [r7, #4]
    e89a:	2b00      	cmp	r3, #0
    e89c:	d105      	bne.n	e8aa <dict_subscr+0x1e>
        // delete
        mp_obj_dict_delete(self_in, index);
    e89e:	68b9      	ldr	r1, [r7, #8]
    e8a0:	68f8      	ldr	r0, [r7, #12]
    e8a2:	f000 fd21 	bl	f2e8 <mp_obj_dict_delete>
        return mp_const_none;
    e8a6:	4b13      	ldr	r3, [pc, #76]	; (e8f4 <dict_subscr+0x68>)
    e8a8:	e020      	b.n	e8ec <dict_subscr+0x60>
    } else if (value == MP_OBJ_SENTINEL) {
    e8aa:	687b      	ldr	r3, [r7, #4]
    e8ac:	2b08      	cmp	r3, #8
    e8ae:	d117      	bne.n	e8e0 <dict_subscr+0x54>
        // load
        mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e8b0:	68fb      	ldr	r3, [r7, #12]
    e8b2:	617b      	str	r3, [r7, #20]
        mp_map_elem_t *elem = mp_map_lookup(&self->map, index, MP_MAP_LOOKUP);
    e8b4:	697b      	ldr	r3, [r7, #20]
    e8b6:	3304      	adds	r3, #4
    e8b8:	2200      	movs	r2, #0
    e8ba:	68b9      	ldr	r1, [r7, #8]
    e8bc:	4618      	mov	r0, r3
    e8be:	f7fe fe3f 	bl	d540 <mp_map_lookup>
    e8c2:	6138      	str	r0, [r7, #16]
        if (elem == NULL) {
    e8c4:	693b      	ldr	r3, [r7, #16]
    e8c6:	2b00      	cmp	r3, #0
    e8c8:	d107      	bne.n	e8da <dict_subscr+0x4e>
            nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, index));
    e8ca:	68b9      	ldr	r1, [r7, #8]
    e8cc:	480a      	ldr	r0, [pc, #40]	; (e8f8 <dict_subscr+0x6c>)
    e8ce:	f000 fe63 	bl	f598 <mp_obj_new_exception_arg1>
    e8d2:	4603      	mov	r3, r0
    e8d4:	4618      	mov	r0, r3
    e8d6:	f7f1 fd03 	bl	2e0 <nlr_jump>
        } else {
            return elem->value;
    e8da:	693b      	ldr	r3, [r7, #16]
    e8dc:	685b      	ldr	r3, [r3, #4]
    e8de:	e005      	b.n	e8ec <dict_subscr+0x60>
        }
    } else {
        // store
        mp_obj_dict_store(self_in, index, value);
    e8e0:	687a      	ldr	r2, [r7, #4]
    e8e2:	68b9      	ldr	r1, [r7, #8]
    e8e4:	68f8      	ldr	r0, [r7, #12]
    e8e6:	f000 fcc7 	bl	f278 <mp_obj_dict_store>
        return mp_const_none;
    e8ea:	4b02      	ldr	r3, [pc, #8]	; (e8f4 <dict_subscr+0x68>)
    }
}
    e8ec:	4618      	mov	r0, r3
    e8ee:	3718      	adds	r7, #24
    e8f0:	46bd      	mov	sp, r7
    e8f2:	bd80      	pop	{r7, pc}
    e8f4:	000234d4 	.word	0x000234d4
    e8f8:	0002258c 	.word	0x0002258c

0000e8fc <mp_ensure_not_fixed>:

/******************************************************************************/
/* dict methods                                                               */

STATIC void mp_ensure_not_fixed(const mp_obj_dict_t *dict) {
    e8fc:	b580      	push	{r7, lr}
    e8fe:	b082      	sub	sp, #8
    e900:	af00      	add	r7, sp, #0
    e902:	6078      	str	r0, [r7, #4]
    if (dict->map.is_fixed) {
    e904:	687b      	ldr	r3, [r7, #4]
    e906:	791b      	ldrb	r3, [r3, #4]
    e908:	f003 0302 	and.w	r3, r3, #2
    e90c:	b2db      	uxtb	r3, r3
    e90e:	2b00      	cmp	r3, #0
    e910:	d002      	beq.n	e918 <mp_ensure_not_fixed+0x1c>
        mp_raise_TypeError(NULL);
    e912:	2000      	movs	r0, #0
    e914:	f7fe fb50 	bl	cfb8 <mp_raise_TypeError>
    }
}
    e918:	bf00      	nop
    e91a:	3708      	adds	r7, #8
    e91c:	46bd      	mov	sp, r7
    e91e:	bd80      	pop	{r7, pc}

0000e920 <dict_clear>:

STATIC mp_obj_t dict_clear(mp_obj_t self_in) {
    e920:	b580      	push	{r7, lr}
    e922:	b084      	sub	sp, #16
    e924:	af00      	add	r7, sp, #0
    e926:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    e928:	6878      	ldr	r0, [r7, #4]
    e92a:	f7ff fddf 	bl	e4ec <MP_OBJ_IS_OBJ>
    e92e:	4603      	mov	r3, r0
    e930:	f083 0301 	eor.w	r3, r3, #1
    e934:	b2db      	uxtb	r3, r3
    e936:	2b00      	cmp	r3, #0
    e938:	d105      	bne.n	e946 <dict_clear+0x26>
    e93a:	687b      	ldr	r3, [r7, #4]
    e93c:	681b      	ldr	r3, [r3, #0]
    e93e:	68db      	ldr	r3, [r3, #12]
    e940:	4a0b      	ldr	r2, [pc, #44]	; (e970 <dict_clear+0x50>)
    e942:	4293      	cmp	r3, r2
    e944:	d005      	beq.n	e952 <dict_clear+0x32>
    e946:	4b0b      	ldr	r3, [pc, #44]	; (e974 <dict_clear+0x54>)
    e948:	4a0b      	ldr	r2, [pc, #44]	; (e978 <dict_clear+0x58>)
    e94a:	21cd      	movs	r1, #205	; 0xcd
    e94c:	480b      	ldr	r0, [pc, #44]	; (e97c <dict_clear+0x5c>)
    e94e:	f00c ff19 	bl	1b784 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e952:	687b      	ldr	r3, [r7, #4]
    e954:	60fb      	str	r3, [r7, #12]
    mp_ensure_not_fixed(self);
    e956:	68f8      	ldr	r0, [r7, #12]
    e958:	f7ff ffd0 	bl	e8fc <mp_ensure_not_fixed>

    mp_map_clear(&self->map);
    e95c:	68fb      	ldr	r3, [r7, #12]
    e95e:	3304      	adds	r3, #4
    e960:	4618      	mov	r0, r3
    e962:	f7fe fd6b 	bl	d43c <mp_map_clear>

    return mp_const_none;
    e966:	4b06      	ldr	r3, [pc, #24]	; (e980 <dict_clear+0x60>)
}
    e968:	4618      	mov	r0, r3
    e96a:	3710      	adds	r7, #16
    e96c:	46bd      	mov	sp, r7
    e96e:	bd80      	pop	{r7, pc}
    e970:	0000e6a9 	.word	0x0000e6a9
    e974:	00021d2c 	.word	0x00021d2c
    e978:	00022140 	.word	0x00022140
    e97c:	00021d8c 	.word	0x00021d8c
    e980:	000234d4 	.word	0x000234d4

0000e984 <dict_copy>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_clear_obj, dict_clear);

STATIC mp_obj_t dict_copy(mp_obj_t self_in) {
    e984:	b580      	push	{r7, lr}
    e986:	b086      	sub	sp, #24
    e988:	af00      	add	r7, sp, #0
    e98a:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    e98c:	6878      	ldr	r0, [r7, #4]
    e98e:	f7ff fdad 	bl	e4ec <MP_OBJ_IS_OBJ>
    e992:	4603      	mov	r3, r0
    e994:	f083 0301 	eor.w	r3, r3, #1
    e998:	b2db      	uxtb	r3, r3
    e99a:	2b00      	cmp	r3, #0
    e99c:	d105      	bne.n	e9aa <dict_copy+0x26>
    e99e:	687b      	ldr	r3, [r7, #4]
    e9a0:	681b      	ldr	r3, [r3, #0]
    e9a2:	68db      	ldr	r3, [r3, #12]
    e9a4:	4a23      	ldr	r2, [pc, #140]	; (ea34 <dict_copy+0xb0>)
    e9a6:	4293      	cmp	r3, r2
    e9a8:	d005      	beq.n	e9b6 <dict_copy+0x32>
    e9aa:	4b23      	ldr	r3, [pc, #140]	; (ea38 <dict_copy+0xb4>)
    e9ac:	4a23      	ldr	r2, [pc, #140]	; (ea3c <dict_copy+0xb8>)
    e9ae:	21d8      	movs	r1, #216	; 0xd8
    e9b0:	4823      	ldr	r0, [pc, #140]	; (ea40 <dict_copy+0xbc>)
    e9b2:	f00c fee7 	bl	1b784 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e9b6:	687b      	ldr	r3, [r7, #4]
    e9b8:	617b      	str	r3, [r7, #20]
    mp_obj_t other_out = mp_obj_new_dict(self->map.alloc);
    e9ba:	697b      	ldr	r3, [r7, #20]
    e9bc:	689b      	ldr	r3, [r3, #8]
    e9be:	4618      	mov	r0, r3
    e9c0:	f000 fc38 	bl	f234 <mp_obj_new_dict>
    e9c4:	6138      	str	r0, [r7, #16]
    mp_obj_dict_t *other = MP_OBJ_TO_PTR(other_out);
    e9c6:	693b      	ldr	r3, [r7, #16]
    e9c8:	60fb      	str	r3, [r7, #12]
    other->base.type = self->base.type;
    e9ca:	697b      	ldr	r3, [r7, #20]
    e9cc:	681a      	ldr	r2, [r3, #0]
    e9ce:	68fb      	ldr	r3, [r7, #12]
    e9d0:	601a      	str	r2, [r3, #0]
    other->map.used = self->map.used;
    e9d2:	697b      	ldr	r3, [r7, #20]
    e9d4:	685b      	ldr	r3, [r3, #4]
    e9d6:	f3c3 01dc 	ubfx	r1, r3, #3, #29
    e9da:	68fa      	ldr	r2, [r7, #12]
    e9dc:	6853      	ldr	r3, [r2, #4]
    e9de:	f361 03df 	bfi	r3, r1, #3, #29
    e9e2:	6053      	str	r3, [r2, #4]
    other->map.all_keys_are_qstrs = self->map.all_keys_are_qstrs;
    e9e4:	697b      	ldr	r3, [r7, #20]
    e9e6:	791b      	ldrb	r3, [r3, #4]
    e9e8:	f3c3 0300 	ubfx	r3, r3, #0, #1
    e9ec:	b2d9      	uxtb	r1, r3
    e9ee:	68fa      	ldr	r2, [r7, #12]
    e9f0:	7913      	ldrb	r3, [r2, #4]
    e9f2:	f361 0300 	bfi	r3, r1, #0, #1
    e9f6:	7113      	strb	r3, [r2, #4]
    other->map.is_fixed = 0;
    e9f8:	68fa      	ldr	r2, [r7, #12]
    e9fa:	7913      	ldrb	r3, [r2, #4]
    e9fc:	f36f 0341 	bfc	r3, #1, #1
    ea00:	7113      	strb	r3, [r2, #4]
    other->map.is_ordered = self->map.is_ordered;
    ea02:	697b      	ldr	r3, [r7, #20]
    ea04:	791b      	ldrb	r3, [r3, #4]
    ea06:	f3c3 0380 	ubfx	r3, r3, #2, #1
    ea0a:	b2d9      	uxtb	r1, r3
    ea0c:	68fa      	ldr	r2, [r7, #12]
    ea0e:	7913      	ldrb	r3, [r2, #4]
    ea10:	f361 0382 	bfi	r3, r1, #2, #1
    ea14:	7113      	strb	r3, [r2, #4]
    memcpy(other->map.table, self->map.table, self->map.alloc * sizeof(mp_map_elem_t));
    ea16:	68fb      	ldr	r3, [r7, #12]
    ea18:	68d8      	ldr	r0, [r3, #12]
    ea1a:	697b      	ldr	r3, [r7, #20]
    ea1c:	68d9      	ldr	r1, [r3, #12]
    ea1e:	697b      	ldr	r3, [r7, #20]
    ea20:	689b      	ldr	r3, [r3, #8]
    ea22:	00db      	lsls	r3, r3, #3
    ea24:	461a      	mov	r2, r3
    ea26:	f00e f9b3 	bl	1cd90 <memcpy>
    return other_out;
    ea2a:	693b      	ldr	r3, [r7, #16]
}
    ea2c:	4618      	mov	r0, r3
    ea2e:	3718      	adds	r7, #24
    ea30:	46bd      	mov	sp, r7
    ea32:	bd80      	pop	{r7, pc}
    ea34:	0000e6a9 	.word	0x0000e6a9
    ea38:	00021d2c 	.word	0x00021d2c
    ea3c:	0002214c 	.word	0x0002214c
    ea40:	00021d8c 	.word	0x00021d8c

0000ea44 <dict_fromkeys>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_copy_obj, dict_copy);

// this is a classmethod
STATIC mp_obj_t dict_fromkeys(size_t n_args, const mp_obj_t *args) {
    ea44:	b580      	push	{r7, lr}
    ea46:	b088      	sub	sp, #32
    ea48:	af00      	add	r7, sp, #0
    ea4a:	6078      	str	r0, [r7, #4]
    ea4c:	6039      	str	r1, [r7, #0]
    mp_obj_t iter = mp_getiter(args[1], NULL);
    ea4e:	683b      	ldr	r3, [r7, #0]
    ea50:	3304      	adds	r3, #4
    ea52:	681b      	ldr	r3, [r3, #0]
    ea54:	2100      	movs	r1, #0
    ea56:	4618      	mov	r0, r3
    ea58:	f7fd ff74 	bl	c944 <mp_getiter>
    ea5c:	6178      	str	r0, [r7, #20]
    mp_obj_t value = mp_const_none;
    ea5e:	4b1c      	ldr	r3, [pc, #112]	; (ead0 <dict_fromkeys+0x8c>)
    ea60:	61fb      	str	r3, [r7, #28]
    mp_obj_t next = MP_OBJ_NULL;
    ea62:	2300      	movs	r3, #0
    ea64:	613b      	str	r3, [r7, #16]

    if (n_args > 2) {
    ea66:	687b      	ldr	r3, [r7, #4]
    ea68:	2b02      	cmp	r3, #2
    ea6a:	d902      	bls.n	ea72 <dict_fromkeys+0x2e>
        value = args[2];
    ea6c:	683b      	ldr	r3, [r7, #0]
    ea6e:	689b      	ldr	r3, [r3, #8]
    ea70:	61fb      	str	r3, [r7, #28]
    }

    // optimisation to allocate result based on len of argument
    mp_obj_t self_out;
    mp_obj_t len = mp_obj_len_maybe(args[1]);
    ea72:	683b      	ldr	r3, [r7, #0]
    ea74:	3304      	adds	r3, #4
    ea76:	681b      	ldr	r3, [r3, #0]
    ea78:	4618      	mov	r0, r3
    ea7a:	f7ff fa65 	bl	df48 <mp_obj_len_maybe>
    ea7e:	60f8      	str	r0, [r7, #12]
    if (len == MP_OBJ_NULL) {
    ea80:	68fb      	ldr	r3, [r7, #12]
    ea82:	2b00      	cmp	r3, #0
    ea84:	d104      	bne.n	ea90 <dict_fromkeys+0x4c>
        /* object's type doesn't have a __len__ slot */
        self_out = mp_obj_new_dict(0);
    ea86:	2000      	movs	r0, #0
    ea88:	f000 fbd4 	bl	f234 <mp_obj_new_dict>
    ea8c:	61b8      	str	r0, [r7, #24]
    ea8e:	e005      	b.n	ea9c <dict_fromkeys+0x58>
    } else {
        self_out = mp_obj_new_dict(MP_OBJ_SMALL_INT_VALUE(len));
    ea90:	68fb      	ldr	r3, [r7, #12]
    ea92:	105b      	asrs	r3, r3, #1
    ea94:	4618      	mov	r0, r3
    ea96:	f000 fbcd 	bl	f234 <mp_obj_new_dict>
    ea9a:	61b8      	str	r0, [r7, #24]
    }

    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_out);
    ea9c:	69bb      	ldr	r3, [r7, #24]
    ea9e:	60bb      	str	r3, [r7, #8]
    while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    eaa0:	e009      	b.n	eab6 <dict_fromkeys+0x72>
        mp_map_lookup(&self->map, next, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    eaa2:	68bb      	ldr	r3, [r7, #8]
    eaa4:	3304      	adds	r3, #4
    eaa6:	2201      	movs	r2, #1
    eaa8:	6939      	ldr	r1, [r7, #16]
    eaaa:	4618      	mov	r0, r3
    eaac:	f7fe fd48 	bl	d540 <mp_map_lookup>
    eab0:	4602      	mov	r2, r0
    eab2:	69fb      	ldr	r3, [r7, #28]
    eab4:	6053      	str	r3, [r2, #4]
    while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    eab6:	6978      	ldr	r0, [r7, #20]
    eab8:	f7fd ffc6 	bl	ca48 <mp_iternext>
    eabc:	6138      	str	r0, [r7, #16]
    eabe:	693b      	ldr	r3, [r7, #16]
    eac0:	2b04      	cmp	r3, #4
    eac2:	d1ee      	bne.n	eaa2 <dict_fromkeys+0x5e>
    }

    return self_out;
    eac4:	69bb      	ldr	r3, [r7, #24]
}
    eac6:	4618      	mov	r0, r3
    eac8:	3720      	adds	r7, #32
    eaca:	46bd      	mov	sp, r7
    eacc:	bd80      	pop	{r7, pc}
    eace:	bf00      	nop
    ead0:	000234d4 	.word	0x000234d4

0000ead4 <dict_get_helper>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_fromkeys_fun_obj, 2, 3, dict_fromkeys);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(dict_fromkeys_obj, MP_ROM_PTR(&dict_fromkeys_fun_obj));

STATIC mp_obj_t dict_get_helper(size_t n_args, const mp_obj_t *args, mp_map_lookup_kind_t lookup_kind) {
    ead4:	b580      	push	{r7, lr}
    ead6:	b088      	sub	sp, #32
    ead8:	af00      	add	r7, sp, #0
    eada:	60f8      	str	r0, [r7, #12]
    eadc:	60b9      	str	r1, [r7, #8]
    eade:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(args[0]));
    eae0:	68bb      	ldr	r3, [r7, #8]
    eae2:	681b      	ldr	r3, [r3, #0]
    eae4:	4618      	mov	r0, r3
    eae6:	f7ff fd01 	bl	e4ec <MP_OBJ_IS_OBJ>
    eaea:	4603      	mov	r3, r0
    eaec:	f083 0301 	eor.w	r3, r3, #1
    eaf0:	b2db      	uxtb	r3, r3
    eaf2:	2b00      	cmp	r3, #0
    eaf4:	d106      	bne.n	eb04 <dict_get_helper+0x30>
    eaf6:	68bb      	ldr	r3, [r7, #8]
    eaf8:	681b      	ldr	r3, [r3, #0]
    eafa:	681b      	ldr	r3, [r3, #0]
    eafc:	68db      	ldr	r3, [r3, #12]
    eafe:	4a28      	ldr	r2, [pc, #160]	; (eba0 <dict_get_helper+0xcc>)
    eb00:	4293      	cmp	r3, r2
    eb02:	d006      	beq.n	eb12 <dict_get_helper+0x3e>
    eb04:	4b27      	ldr	r3, [pc, #156]	; (eba4 <dict_get_helper+0xd0>)
    eb06:	4a28      	ldr	r2, [pc, #160]	; (eba8 <dict_get_helper+0xd4>)
    eb08:	f240 1105 	movw	r1, #261	; 0x105
    eb0c:	4827      	ldr	r0, [pc, #156]	; (ebac <dict_get_helper+0xd8>)
    eb0e:	f00c fe39 	bl	1b784 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(args[0]);
    eb12:	68bb      	ldr	r3, [r7, #8]
    eb14:	681b      	ldr	r3, [r3, #0]
    eb16:	61bb      	str	r3, [r7, #24]
    if (lookup_kind != MP_MAP_LOOKUP) {
    eb18:	687b      	ldr	r3, [r7, #4]
    eb1a:	2b00      	cmp	r3, #0
    eb1c:	d002      	beq.n	eb24 <dict_get_helper+0x50>
        mp_ensure_not_fixed(self);
    eb1e:	69b8      	ldr	r0, [r7, #24]
    eb20:	f7ff feec 	bl	e8fc <mp_ensure_not_fixed>
    }
    mp_map_elem_t *elem = mp_map_lookup(&self->map, args[1], lookup_kind);
    eb24:	69bb      	ldr	r3, [r7, #24]
    eb26:	1d18      	adds	r0, r3, #4
    eb28:	68bb      	ldr	r3, [r7, #8]
    eb2a:	3304      	adds	r3, #4
    eb2c:	681b      	ldr	r3, [r3, #0]
    eb2e:	687a      	ldr	r2, [r7, #4]
    eb30:	4619      	mov	r1, r3
    eb32:	f7fe fd05 	bl	d540 <mp_map_lookup>
    eb36:	6178      	str	r0, [r7, #20]
    mp_obj_t value;
    if (elem == NULL || elem->value == MP_OBJ_NULL) {
    eb38:	697b      	ldr	r3, [r7, #20]
    eb3a:	2b00      	cmp	r3, #0
    eb3c:	d003      	beq.n	eb46 <dict_get_helper+0x72>
    eb3e:	697b      	ldr	r3, [r7, #20]
    eb40:	685b      	ldr	r3, [r3, #4]
    eb42:	2b00      	cmp	r3, #0
    eb44:	d11d      	bne.n	eb82 <dict_get_helper+0xae>
        if (n_args == 2) {
    eb46:	68fb      	ldr	r3, [r7, #12]
    eb48:	2b02      	cmp	r3, #2
    eb4a:	d110      	bne.n	eb6e <dict_get_helper+0x9a>
            if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    eb4c:	687b      	ldr	r3, [r7, #4]
    eb4e:	2b02      	cmp	r3, #2
    eb50:	d10a      	bne.n	eb68 <dict_get_helper+0x94>
                nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, args[1]));
    eb52:	68bb      	ldr	r3, [r7, #8]
    eb54:	3304      	adds	r3, #4
    eb56:	681b      	ldr	r3, [r3, #0]
    eb58:	4619      	mov	r1, r3
    eb5a:	4815      	ldr	r0, [pc, #84]	; (ebb0 <dict_get_helper+0xdc>)
    eb5c:	f000 fd1c 	bl	f598 <mp_obj_new_exception_arg1>
    eb60:	4603      	mov	r3, r0
    eb62:	4618      	mov	r0, r3
    eb64:	f7f1 fbbc 	bl	2e0 <nlr_jump>
            } else {
                value = mp_const_none;
    eb68:	4b12      	ldr	r3, [pc, #72]	; (ebb4 <dict_get_helper+0xe0>)
    eb6a:	61fb      	str	r3, [r7, #28]
    eb6c:	e002      	b.n	eb74 <dict_get_helper+0xa0>
            }
        } else {
            value = args[2];
    eb6e:	68bb      	ldr	r3, [r7, #8]
    eb70:	689b      	ldr	r3, [r3, #8]
    eb72:	61fb      	str	r3, [r7, #28]
        }
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    eb74:	687b      	ldr	r3, [r7, #4]
    eb76:	2b01      	cmp	r3, #1
    eb78:	d10c      	bne.n	eb94 <dict_get_helper+0xc0>
            elem->value = value;
    eb7a:	697b      	ldr	r3, [r7, #20]
    eb7c:	69fa      	ldr	r2, [r7, #28]
    eb7e:	605a      	str	r2, [r3, #4]
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    eb80:	e008      	b.n	eb94 <dict_get_helper+0xc0>
        }
    } else {
        value = elem->value;
    eb82:	697b      	ldr	r3, [r7, #20]
    eb84:	685b      	ldr	r3, [r3, #4]
    eb86:	61fb      	str	r3, [r7, #28]
        if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    eb88:	687b      	ldr	r3, [r7, #4]
    eb8a:	2b02      	cmp	r3, #2
    eb8c:	d102      	bne.n	eb94 <dict_get_helper+0xc0>
            elem->value = MP_OBJ_NULL; // so that GC can collect the deleted value
    eb8e:	697b      	ldr	r3, [r7, #20]
    eb90:	2200      	movs	r2, #0
    eb92:	605a      	str	r2, [r3, #4]
        }
    }
    return value;
    eb94:	69fb      	ldr	r3, [r7, #28]
}
    eb96:	4618      	mov	r0, r3
    eb98:	3720      	adds	r7, #32
    eb9a:	46bd      	mov	sp, r7
    eb9c:	bd80      	pop	{r7, pc}
    eb9e:	bf00      	nop
    eba0:	0000e6a9 	.word	0x0000e6a9
    eba4:	00021dc4 	.word	0x00021dc4
    eba8:	00022158 	.word	0x00022158
    ebac:	00021d8c 	.word	0x00021d8c
    ebb0:	0002258c 	.word	0x0002258c
    ebb4:	000234d4 	.word	0x000234d4

0000ebb8 <dict_get>:

STATIC mp_obj_t dict_get(size_t n_args, const mp_obj_t *args) {
    ebb8:	b580      	push	{r7, lr}
    ebba:	b082      	sub	sp, #8
    ebbc:	af00      	add	r7, sp, #0
    ebbe:	6078      	str	r0, [r7, #4]
    ebc0:	6039      	str	r1, [r7, #0]
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP);
    ebc2:	2200      	movs	r2, #0
    ebc4:	6839      	ldr	r1, [r7, #0]
    ebc6:	6878      	ldr	r0, [r7, #4]
    ebc8:	f7ff ff84 	bl	ead4 <dict_get_helper>
    ebcc:	4603      	mov	r3, r0
}
    ebce:	4618      	mov	r0, r3
    ebd0:	3708      	adds	r7, #8
    ebd2:	46bd      	mov	sp, r7
    ebd4:	bd80      	pop	{r7, pc}
    ebd6:	bf00      	nop

0000ebd8 <dict_pop>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_get_obj, 2, 3, dict_get);

STATIC mp_obj_t dict_pop(size_t n_args, const mp_obj_t *args) {
    ebd8:	b580      	push	{r7, lr}
    ebda:	b082      	sub	sp, #8
    ebdc:	af00      	add	r7, sp, #0
    ebde:	6078      	str	r0, [r7, #4]
    ebe0:	6039      	str	r1, [r7, #0]
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP_REMOVE_IF_FOUND);
    ebe2:	2202      	movs	r2, #2
    ebe4:	6839      	ldr	r1, [r7, #0]
    ebe6:	6878      	ldr	r0, [r7, #4]
    ebe8:	f7ff ff74 	bl	ead4 <dict_get_helper>
    ebec:	4603      	mov	r3, r0
}
    ebee:	4618      	mov	r0, r3
    ebf0:	3708      	adds	r7, #8
    ebf2:	46bd      	mov	sp, r7
    ebf4:	bd80      	pop	{r7, pc}
    ebf6:	bf00      	nop

0000ebf8 <dict_setdefault>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_pop_obj, 2, 3, dict_pop);

STATIC mp_obj_t dict_setdefault(size_t n_args, const mp_obj_t *args) {
    ebf8:	b580      	push	{r7, lr}
    ebfa:	b082      	sub	sp, #8
    ebfc:	af00      	add	r7, sp, #0
    ebfe:	6078      	str	r0, [r7, #4]
    ec00:	6039      	str	r1, [r7, #0]
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
    ec02:	2201      	movs	r2, #1
    ec04:	6839      	ldr	r1, [r7, #0]
    ec06:	6878      	ldr	r0, [r7, #4]
    ec08:	f7ff ff64 	bl	ead4 <dict_get_helper>
    ec0c:	4603      	mov	r3, r0
}
    ec0e:	4618      	mov	r0, r3
    ec10:	3708      	adds	r7, #8
    ec12:	46bd      	mov	sp, r7
    ec14:	bd80      	pop	{r7, pc}
    ec16:	bf00      	nop

0000ec18 <dict_popitem>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_setdefault_obj, 2, 3, dict_setdefault);

STATIC mp_obj_t dict_popitem(mp_obj_t self_in) {
    ec18:	b580      	push	{r7, lr}
    ec1a:	b088      	sub	sp, #32
    ec1c:	af00      	add	r7, sp, #0
    ec1e:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    ec20:	6878      	ldr	r0, [r7, #4]
    ec22:	f7ff fc63 	bl	e4ec <MP_OBJ_IS_OBJ>
    ec26:	4603      	mov	r3, r0
    ec28:	f083 0301 	eor.w	r3, r3, #1
    ec2c:	b2db      	uxtb	r3, r3
    ec2e:	2b00      	cmp	r3, #0
    ec30:	d105      	bne.n	ec3e <dict_popitem+0x26>
    ec32:	687b      	ldr	r3, [r7, #4]
    ec34:	681b      	ldr	r3, [r3, #0]
    ec36:	68db      	ldr	r3, [r3, #12]
    ec38:	4a22      	ldr	r2, [pc, #136]	; (ecc4 <dict_popitem+0xac>)
    ec3a:	4293      	cmp	r3, r2
    ec3c:	d006      	beq.n	ec4c <dict_popitem+0x34>
    ec3e:	4b22      	ldr	r3, [pc, #136]	; (ecc8 <dict_popitem+0xb0>)
    ec40:	4a22      	ldr	r2, [pc, #136]	; (eccc <dict_popitem+0xb4>)
    ec42:	f44f 7199 	mov.w	r1, #306	; 0x132
    ec46:	4822      	ldr	r0, [pc, #136]	; (ecd0 <dict_popitem+0xb8>)
    ec48:	f00c fd9c 	bl	1b784 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    ec4c:	687b      	ldr	r3, [r7, #4]
    ec4e:	61fb      	str	r3, [r7, #28]
    mp_ensure_not_fixed(self);
    ec50:	69f8      	ldr	r0, [r7, #28]
    ec52:	f7ff fe53 	bl	e8fc <mp_ensure_not_fixed>
    size_t cur = 0;
    ec56:	2300      	movs	r3, #0
    ec58:	613b      	str	r3, [r7, #16]
    mp_map_elem_t *next = dict_iter_next(self, &cur);
    ec5a:	f107 0310 	add.w	r3, r7, #16
    ec5e:	4619      	mov	r1, r3
    ec60:	69f8      	ldr	r0, [r7, #28]
    ec62:	f7ff fca7 	bl	e5b4 <dict_iter_next>
    ec66:	61b8      	str	r0, [r7, #24]
    if (next == NULL) {
    ec68:	69bb      	ldr	r3, [r7, #24]
    ec6a:	2b00      	cmp	r3, #0
    ec6c:	d103      	bne.n	ec76 <dict_popitem+0x5e>
        mp_raise_msg(&mp_type_KeyError, "popitem(): dictionary is empty");
    ec6e:	4919      	ldr	r1, [pc, #100]	; (ecd4 <dict_popitem+0xbc>)
    ec70:	4819      	ldr	r0, [pc, #100]	; (ecd8 <dict_popitem+0xc0>)
    ec72:	f7fe f97f 	bl	cf74 <mp_raise_msg>
    }
    self->map.used--;
    ec76:	69fb      	ldr	r3, [r7, #28]
    ec78:	685b      	ldr	r3, [r3, #4]
    ec7a:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    ec7e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    ec82:	3b01      	subs	r3, #1
    ec84:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    ec88:	69f9      	ldr	r1, [r7, #28]
    ec8a:	684a      	ldr	r2, [r1, #4]
    ec8c:	f363 02df 	bfi	r2, r3, #3, #29
    ec90:	604a      	str	r2, [r1, #4]
    mp_obj_t items[] = {next->key, next->value};
    ec92:	69bb      	ldr	r3, [r7, #24]
    ec94:	681b      	ldr	r3, [r3, #0]
    ec96:	60bb      	str	r3, [r7, #8]
    ec98:	69bb      	ldr	r3, [r7, #24]
    ec9a:	685b      	ldr	r3, [r3, #4]
    ec9c:	60fb      	str	r3, [r7, #12]
    next->key = MP_OBJ_SENTINEL; // must mark key as sentinel to indicate that it was deleted
    ec9e:	69bb      	ldr	r3, [r7, #24]
    eca0:	2208      	movs	r2, #8
    eca2:	601a      	str	r2, [r3, #0]
    next->value = MP_OBJ_NULL;
    eca4:	69bb      	ldr	r3, [r7, #24]
    eca6:	2200      	movs	r2, #0
    eca8:	605a      	str	r2, [r3, #4]
    mp_obj_t tuple = mp_obj_new_tuple(2, items);
    ecaa:	f107 0308 	add.w	r3, r7, #8
    ecae:	4619      	mov	r1, r3
    ecb0:	2002      	movs	r0, #2
    ecb2:	f007 f95d 	bl	15f70 <mp_obj_new_tuple>
    ecb6:	6178      	str	r0, [r7, #20]

    return tuple;
    ecb8:	697b      	ldr	r3, [r7, #20]
}
    ecba:	4618      	mov	r0, r3
    ecbc:	3720      	adds	r7, #32
    ecbe:	46bd      	mov	sp, r7
    ecc0:	bd80      	pop	{r7, pc}
    ecc2:	bf00      	nop
    ecc4:	0000e6a9 	.word	0x0000e6a9
    ecc8:	00021d2c 	.word	0x00021d2c
    eccc:	00022168 	.word	0x00022168
    ecd0:	00021d8c 	.word	0x00021d8c
    ecd4:	00021e48 	.word	0x00021e48
    ecd8:	0002258c 	.word	0x0002258c

0000ecdc <dict_update>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_popitem_obj, dict_popitem);

STATIC mp_obj_t dict_update(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
    ecdc:	b580      	push	{r7, lr}
    ecde:	b090      	sub	sp, #64	; 0x40
    ece0:	af02      	add	r7, sp, #8
    ece2:	60f8      	str	r0, [r7, #12]
    ece4:	60b9      	str	r1, [r7, #8]
    ece6:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(args[0]));
    ece8:	68bb      	ldr	r3, [r7, #8]
    ecea:	681b      	ldr	r3, [r3, #0]
    ecec:	4618      	mov	r0, r3
    ecee:	f7ff fbfd 	bl	e4ec <MP_OBJ_IS_OBJ>
    ecf2:	4603      	mov	r3, r0
    ecf4:	f083 0301 	eor.w	r3, r3, #1
    ecf8:	b2db      	uxtb	r3, r3
    ecfa:	2b00      	cmp	r3, #0
    ecfc:	d106      	bne.n	ed0c <dict_update+0x30>
    ecfe:	68bb      	ldr	r3, [r7, #8]
    ed00:	681b      	ldr	r3, [r3, #0]
    ed02:	681b      	ldr	r3, [r3, #0]
    ed04:	68db      	ldr	r3, [r3, #12]
    ed06:	4a5d      	ldr	r2, [pc, #372]	; (ee7c <dict_update+0x1a0>)
    ed08:	4293      	cmp	r3, r2
    ed0a:	d006      	beq.n	ed1a <dict_update+0x3e>
    ed0c:	4b5c      	ldr	r3, [pc, #368]	; (ee80 <dict_update+0x1a4>)
    ed0e:	4a5d      	ldr	r2, [pc, #372]	; (ee84 <dict_update+0x1a8>)
    ed10:	f240 1145 	movw	r1, #325	; 0x145
    ed14:	485c      	ldr	r0, [pc, #368]	; (ee88 <dict_update+0x1ac>)
    ed16:	f00c fd35 	bl	1b784 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(args[0]);
    ed1a:	68bb      	ldr	r3, [r7, #8]
    ed1c:	681b      	ldr	r3, [r3, #0]
    ed1e:	633b      	str	r3, [r7, #48]	; 0x30
    mp_ensure_not_fixed(self);
    ed20:	6b38      	ldr	r0, [r7, #48]	; 0x30
    ed22:	f7ff fdeb 	bl	e8fc <mp_ensure_not_fixed>

    mp_arg_check_num(n_args, kwargs->used, 1, 2, true);
    ed26:	687b      	ldr	r3, [r7, #4]
    ed28:	681b      	ldr	r3, [r3, #0]
    ed2a:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    ed2e:	4619      	mov	r1, r3
    ed30:	2301      	movs	r3, #1
    ed32:	9300      	str	r3, [sp, #0]
    ed34:	2302      	movs	r3, #2
    ed36:	2201      	movs	r2, #1
    ed38:	68f8      	ldr	r0, [r7, #12]
    ed3a:	f7ff fc1f 	bl	e57c <mp_arg_check_num>

    if (n_args == 2) {
    ed3e:	68fb      	ldr	r3, [r7, #12]
    ed40:	2b02      	cmp	r3, #2
    ed42:	d16f      	bne.n	ee24 <dict_update+0x148>
        // given a positional argument

        if (MP_OBJ_IS_DICT_TYPE(args[1])) {
    ed44:	68bb      	ldr	r3, [r7, #8]
    ed46:	3304      	adds	r3, #4
    ed48:	681b      	ldr	r3, [r3, #0]
    ed4a:	4618      	mov	r0, r3
    ed4c:	f7ff fbce 	bl	e4ec <MP_OBJ_IS_OBJ>
    ed50:	4603      	mov	r3, r0
    ed52:	2b00      	cmp	r3, #0
    ed54:	d02d      	beq.n	edb2 <dict_update+0xd6>
    ed56:	68bb      	ldr	r3, [r7, #8]
    ed58:	3304      	adds	r3, #4
    ed5a:	681b      	ldr	r3, [r3, #0]
    ed5c:	681b      	ldr	r3, [r3, #0]
    ed5e:	68db      	ldr	r3, [r3, #12]
    ed60:	4a46      	ldr	r2, [pc, #280]	; (ee7c <dict_update+0x1a0>)
    ed62:	4293      	cmp	r3, r2
    ed64:	d125      	bne.n	edb2 <dict_update+0xd6>
            // update from other dictionary (make sure other is not self)
            if (args[1] != args[0]) {
    ed66:	68bb      	ldr	r3, [r7, #8]
    ed68:	3304      	adds	r3, #4
    ed6a:	681a      	ldr	r2, [r3, #0]
    ed6c:	68bb      	ldr	r3, [r7, #8]
    ed6e:	681b      	ldr	r3, [r3, #0]
    ed70:	429a      	cmp	r2, r3
    ed72:	d057      	beq.n	ee24 <dict_update+0x148>
                size_t cur = 0;
    ed74:	2300      	movs	r3, #0
    ed76:	613b      	str	r3, [r7, #16]
                mp_map_elem_t *elem = NULL;
    ed78:	2300      	movs	r3, #0
    ed7a:	62fb      	str	r3, [r7, #44]	; 0x2c
                while ((elem = dict_iter_next((mp_obj_dict_t*)MP_OBJ_TO_PTR(args[1]), &cur)) != NULL) {
    ed7c:	e00b      	b.n	ed96 <dict_update+0xba>
                    mp_map_lookup(&self->map, elem->key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = elem->value;
    ed7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ed80:	1d18      	adds	r0, r3, #4
    ed82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ed84:	681b      	ldr	r3, [r3, #0]
    ed86:	2201      	movs	r2, #1
    ed88:	4619      	mov	r1, r3
    ed8a:	f7fe fbd9 	bl	d540 <mp_map_lookup>
    ed8e:	4602      	mov	r2, r0
    ed90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ed92:	685b      	ldr	r3, [r3, #4]
    ed94:	6053      	str	r3, [r2, #4]
                while ((elem = dict_iter_next((mp_obj_dict_t*)MP_OBJ_TO_PTR(args[1]), &cur)) != NULL) {
    ed96:	68bb      	ldr	r3, [r7, #8]
    ed98:	3304      	adds	r3, #4
    ed9a:	681b      	ldr	r3, [r3, #0]
    ed9c:	f107 0210 	add.w	r2, r7, #16
    eda0:	4611      	mov	r1, r2
    eda2:	4618      	mov	r0, r3
    eda4:	f7ff fc06 	bl	e5b4 <dict_iter_next>
    eda8:	62f8      	str	r0, [r7, #44]	; 0x2c
    edaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    edac:	2b00      	cmp	r3, #0
    edae:	d1e6      	bne.n	ed7e <dict_update+0xa2>
            if (args[1] != args[0]) {
    edb0:	e038      	b.n	ee24 <dict_update+0x148>
                }
            }
        } else {
            // update from a generic iterable of pairs
            mp_obj_t iter = mp_getiter(args[1], NULL);
    edb2:	68bb      	ldr	r3, [r7, #8]
    edb4:	3304      	adds	r3, #4
    edb6:	681b      	ldr	r3, [r3, #0]
    edb8:	2100      	movs	r1, #0
    edba:	4618      	mov	r0, r3
    edbc:	f7fd fdc2 	bl	c944 <mp_getiter>
    edc0:	62b8      	str	r0, [r7, #40]	; 0x28
            mp_obj_t next = MP_OBJ_NULL;
    edc2:	2300      	movs	r3, #0
    edc4:	627b      	str	r3, [r7, #36]	; 0x24
            while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    edc6:	e026      	b.n	ee16 <dict_update+0x13a>
                mp_obj_t inneriter = mp_getiter(next, NULL);
    edc8:	2100      	movs	r1, #0
    edca:	6a78      	ldr	r0, [r7, #36]	; 0x24
    edcc:	f7fd fdba 	bl	c944 <mp_getiter>
    edd0:	6238      	str	r0, [r7, #32]
                mp_obj_t key = mp_iternext(inneriter);
    edd2:	6a38      	ldr	r0, [r7, #32]
    edd4:	f7fd fe38 	bl	ca48 <mp_iternext>
    edd8:	61f8      	str	r0, [r7, #28]
                mp_obj_t value = mp_iternext(inneriter);
    edda:	6a38      	ldr	r0, [r7, #32]
    eddc:	f7fd fe34 	bl	ca48 <mp_iternext>
    ede0:	61b8      	str	r0, [r7, #24]
                mp_obj_t stop = mp_iternext(inneriter);
    ede2:	6a38      	ldr	r0, [r7, #32]
    ede4:	f7fd fe30 	bl	ca48 <mp_iternext>
    ede8:	6178      	str	r0, [r7, #20]
                if (key == MP_OBJ_STOP_ITERATION
    edea:	69fb      	ldr	r3, [r7, #28]
    edec:	2b04      	cmp	r3, #4
    edee:	d005      	beq.n	edfc <dict_update+0x120>
                    || value == MP_OBJ_STOP_ITERATION
    edf0:	69bb      	ldr	r3, [r7, #24]
    edf2:	2b04      	cmp	r3, #4
    edf4:	d002      	beq.n	edfc <dict_update+0x120>
                    || stop != MP_OBJ_STOP_ITERATION) {
    edf6:	697b      	ldr	r3, [r7, #20]
    edf8:	2b04      	cmp	r3, #4
    edfa:	d002      	beq.n	ee02 <dict_update+0x126>
                    mp_raise_ValueError("dict update sequence has wrong length");
    edfc:	4823      	ldr	r0, [pc, #140]	; (ee8c <dict_update+0x1b0>)
    edfe:	f7fe f8d1 	bl	cfa4 <mp_raise_ValueError>
                } else {
                    mp_map_lookup(&self->map, key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    ee02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ee04:	3304      	adds	r3, #4
    ee06:	2201      	movs	r2, #1
    ee08:	69f9      	ldr	r1, [r7, #28]
    ee0a:	4618      	mov	r0, r3
    ee0c:	f7fe fb98 	bl	d540 <mp_map_lookup>
    ee10:	4602      	mov	r2, r0
    ee12:	69bb      	ldr	r3, [r7, #24]
    ee14:	6053      	str	r3, [r2, #4]
            while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    ee16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ee18:	f7fd fe16 	bl	ca48 <mp_iternext>
    ee1c:	6278      	str	r0, [r7, #36]	; 0x24
    ee1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ee20:	2b04      	cmp	r3, #4
    ee22:	d1d1      	bne.n	edc8 <dict_update+0xec>
            }
        }
    }

    // update the dict with any keyword args
    for (size_t i = 0; i < kwargs->alloc; i++) {
    ee24:	2300      	movs	r3, #0
    ee26:	637b      	str	r3, [r7, #52]	; 0x34
    ee28:	e01d      	b.n	ee66 <dict_update+0x18a>
        if (MP_MAP_SLOT_IS_FILLED(kwargs, i)) {
    ee2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
    ee2c:	6878      	ldr	r0, [r7, #4]
    ee2e:	f7ff fb6f 	bl	e510 <MP_MAP_SLOT_IS_FILLED>
    ee32:	4603      	mov	r3, r0
    ee34:	2b00      	cmp	r3, #0
    ee36:	d013      	beq.n	ee60 <dict_update+0x184>
            mp_map_lookup(&self->map, kwargs->table[i].key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = kwargs->table[i].value;
    ee38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ee3a:	1d18      	adds	r0, r3, #4
    ee3c:	687b      	ldr	r3, [r7, #4]
    ee3e:	689a      	ldr	r2, [r3, #8]
    ee40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ee42:	00db      	lsls	r3, r3, #3
    ee44:	4413      	add	r3, r2
    ee46:	681b      	ldr	r3, [r3, #0]
    ee48:	2201      	movs	r2, #1
    ee4a:	4619      	mov	r1, r3
    ee4c:	f7fe fb78 	bl	d540 <mp_map_lookup>
    ee50:	4601      	mov	r1, r0
    ee52:	687b      	ldr	r3, [r7, #4]
    ee54:	689a      	ldr	r2, [r3, #8]
    ee56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ee58:	00db      	lsls	r3, r3, #3
    ee5a:	4413      	add	r3, r2
    ee5c:	685b      	ldr	r3, [r3, #4]
    ee5e:	604b      	str	r3, [r1, #4]
    for (size_t i = 0; i < kwargs->alloc; i++) {
    ee60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ee62:	3301      	adds	r3, #1
    ee64:	637b      	str	r3, [r7, #52]	; 0x34
    ee66:	687b      	ldr	r3, [r7, #4]
    ee68:	685a      	ldr	r2, [r3, #4]
    ee6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ee6c:	429a      	cmp	r2, r3
    ee6e:	d8dc      	bhi.n	ee2a <dict_update+0x14e>
        }
    }

    return mp_const_none;
    ee70:	4b07      	ldr	r3, [pc, #28]	; (ee90 <dict_update+0x1b4>)
}
    ee72:	4618      	mov	r0, r3
    ee74:	3738      	adds	r7, #56	; 0x38
    ee76:	46bd      	mov	sp, r7
    ee78:	bd80      	pop	{r7, pc}
    ee7a:	bf00      	nop
    ee7c:	0000e6a9 	.word	0x0000e6a9
    ee80:	00021dc4 	.word	0x00021dc4
    ee84:	00022178 	.word	0x00022178
    ee88:	00021d8c 	.word	0x00021d8c
    ee8c:	00021e70 	.word	0x00021e70
    ee90:	000234d4 	.word	0x000234d4

0000ee94 <dict_view_it_iternext>:
    mp_obj_base_t base;
    mp_obj_t dict;
    mp_dict_view_kind_t kind;
} mp_obj_dict_view_t;

STATIC mp_obj_t dict_view_it_iternext(mp_obj_t self_in) {
    ee94:	b580      	push	{r7, lr}
    ee96:	b086      	sub	sp, #24
    ee98:	af00      	add	r7, sp, #0
    ee9a:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &dict_view_it_type));
    ee9c:	6878      	ldr	r0, [r7, #4]
    ee9e:	f7ff fb25 	bl	e4ec <MP_OBJ_IS_OBJ>
    eea2:	4603      	mov	r3, r0
    eea4:	f083 0301 	eor.w	r3, r3, #1
    eea8:	b2db      	uxtb	r3, r3
    eeaa:	2b00      	cmp	r3, #0
    eeac:	d104      	bne.n	eeb8 <dict_view_it_iternext+0x24>
    eeae:	687b      	ldr	r3, [r7, #4]
    eeb0:	681b      	ldr	r3, [r3, #0]
    eeb2:	4a1b      	ldr	r2, [pc, #108]	; (ef20 <dict_view_it_iternext+0x8c>)
    eeb4:	4293      	cmp	r3, r2
    eeb6:	d006      	beq.n	eec6 <dict_view_it_iternext+0x32>
    eeb8:	4b1a      	ldr	r3, [pc, #104]	; (ef24 <dict_view_it_iternext+0x90>)
    eeba:	4a1b      	ldr	r2, [pc, #108]	; (ef28 <dict_view_it_iternext+0x94>)
    eebc:	f240 1193 	movw	r1, #403	; 0x193
    eec0:	481a      	ldr	r0, [pc, #104]	; (ef2c <dict_view_it_iternext+0x98>)
    eec2:	f00c fc5f 	bl	1b784 <__assert_func>
    mp_obj_dict_view_it_t *self = MP_OBJ_TO_PTR(self_in);
    eec6:	687b      	ldr	r3, [r7, #4]
    eec8:	617b      	str	r3, [r7, #20]
    mp_map_elem_t *next = dict_iter_next(MP_OBJ_TO_PTR(self->dict), &self->cur);
    eeca:	697b      	ldr	r3, [r7, #20]
    eecc:	689a      	ldr	r2, [r3, #8]
    eece:	697b      	ldr	r3, [r7, #20]
    eed0:	330c      	adds	r3, #12
    eed2:	4619      	mov	r1, r3
    eed4:	4610      	mov	r0, r2
    eed6:	f7ff fb6d 	bl	e5b4 <dict_iter_next>
    eeda:	6138      	str	r0, [r7, #16]

    if (next == NULL) {
    eedc:	693b      	ldr	r3, [r7, #16]
    eede:	2b00      	cmp	r3, #0
    eee0:	d101      	bne.n	eee6 <dict_view_it_iternext+0x52>
        return MP_OBJ_STOP_ITERATION;
    eee2:	2304      	movs	r3, #4
    eee4:	e018      	b.n	ef18 <dict_view_it_iternext+0x84>
    } else {
        switch (self->kind) {
    eee6:	697b      	ldr	r3, [r7, #20]
    eee8:	685b      	ldr	r3, [r3, #4]
    eeea:	2b01      	cmp	r3, #1
    eeec:	d00f      	beq.n	ef0e <dict_view_it_iternext+0x7a>
    eeee:	2b02      	cmp	r3, #2
    eef0:	d010      	beq.n	ef14 <dict_view_it_iternext+0x80>
            case MP_DICT_VIEW_ITEMS:
            default: {
                mp_obj_t items[] = {next->key, next->value};
    eef2:	693b      	ldr	r3, [r7, #16]
    eef4:	681b      	ldr	r3, [r3, #0]
    eef6:	60bb      	str	r3, [r7, #8]
    eef8:	693b      	ldr	r3, [r7, #16]
    eefa:	685b      	ldr	r3, [r3, #4]
    eefc:	60fb      	str	r3, [r7, #12]
                return mp_obj_new_tuple(2, items);
    eefe:	f107 0308 	add.w	r3, r7, #8
    ef02:	4619      	mov	r1, r3
    ef04:	2002      	movs	r0, #2
    ef06:	f007 f833 	bl	15f70 <mp_obj_new_tuple>
    ef0a:	4603      	mov	r3, r0
    ef0c:	e004      	b.n	ef18 <dict_view_it_iternext+0x84>
            }
            case MP_DICT_VIEW_KEYS:
                return next->key;
    ef0e:	693b      	ldr	r3, [r7, #16]
    ef10:	681b      	ldr	r3, [r3, #0]
    ef12:	e001      	b.n	ef18 <dict_view_it_iternext+0x84>
            case MP_DICT_VIEW_VALUES:
                return next->value;
    ef14:	693b      	ldr	r3, [r7, #16]
    ef16:	685b      	ldr	r3, [r3, #4]
        }
    }
}
    ef18:	4618      	mov	r0, r3
    ef1a:	3718      	adds	r7, #24
    ef1c:	46bd      	mov	sp, r7
    ef1e:	bd80      	pop	{r7, pc}
    ef20:	00021ee0 	.word	0x00021ee0
    ef24:	00021f4c 	.word	0x00021f4c
    ef28:	00022184 	.word	0x00022184
    ef2c:	00021d8c 	.word	0x00021d8c

0000ef30 <dict_view_getiter>:
    .name = MP_QSTR_iterator,
    .getiter = mp_identity_getiter,
    .iternext = dict_view_it_iternext,
};

STATIC mp_obj_t dict_view_getiter(mp_obj_t view_in, mp_obj_iter_buf_t *iter_buf) {
    ef30:	b580      	push	{r7, lr}
    ef32:	b084      	sub	sp, #16
    ef34:	af00      	add	r7, sp, #0
    ef36:	6078      	str	r0, [r7, #4]
    ef38:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_dict_view_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_check_self(MP_OBJ_IS_TYPE(view_in, &dict_view_type));
    ef3a:	6878      	ldr	r0, [r7, #4]
    ef3c:	f7ff fad6 	bl	e4ec <MP_OBJ_IS_OBJ>
    ef40:	4603      	mov	r3, r0
    ef42:	f083 0301 	eor.w	r3, r3, #1
    ef46:	b2db      	uxtb	r3, r3
    ef48:	2b00      	cmp	r3, #0
    ef4a:	d104      	bne.n	ef56 <dict_view_getiter+0x26>
    ef4c:	687b      	ldr	r3, [r7, #4]
    ef4e:	681b      	ldr	r3, [r3, #0]
    ef50:	4a10      	ldr	r2, [pc, #64]	; (ef94 <dict_view_getiter+0x64>)
    ef52:	4293      	cmp	r3, r2
    ef54:	d006      	beq.n	ef64 <dict_view_getiter+0x34>
    ef56:	4b10      	ldr	r3, [pc, #64]	; (ef98 <dict_view_getiter+0x68>)
    ef58:	4a10      	ldr	r2, [pc, #64]	; (ef9c <dict_view_getiter+0x6c>)
    ef5a:	f240 11b1 	movw	r1, #433	; 0x1b1
    ef5e:	4810      	ldr	r0, [pc, #64]	; (efa0 <dict_view_getiter+0x70>)
    ef60:	f00c fc10 	bl	1b784 <__assert_func>
    mp_obj_dict_view_t *view = MP_OBJ_TO_PTR(view_in);
    ef64:	687b      	ldr	r3, [r7, #4]
    ef66:	60fb      	str	r3, [r7, #12]
    mp_obj_dict_view_it_t *o = (mp_obj_dict_view_it_t*)iter_buf;
    ef68:	683b      	ldr	r3, [r7, #0]
    ef6a:	60bb      	str	r3, [r7, #8]
    o->base.type = &dict_view_it_type;
    ef6c:	68bb      	ldr	r3, [r7, #8]
    ef6e:	4a0d      	ldr	r2, [pc, #52]	; (efa4 <dict_view_getiter+0x74>)
    ef70:	601a      	str	r2, [r3, #0]
    o->kind = view->kind;
    ef72:	68fb      	ldr	r3, [r7, #12]
    ef74:	689a      	ldr	r2, [r3, #8]
    ef76:	68bb      	ldr	r3, [r7, #8]
    ef78:	605a      	str	r2, [r3, #4]
    o->dict = view->dict;
    ef7a:	68fb      	ldr	r3, [r7, #12]
    ef7c:	685a      	ldr	r2, [r3, #4]
    ef7e:	68bb      	ldr	r3, [r7, #8]
    ef80:	609a      	str	r2, [r3, #8]
    o->cur = 0;
    ef82:	68bb      	ldr	r3, [r7, #8]
    ef84:	2200      	movs	r2, #0
    ef86:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
    ef88:	68bb      	ldr	r3, [r7, #8]
}
    ef8a:	4618      	mov	r0, r3
    ef8c:	3710      	adds	r7, #16
    ef8e:	46bd      	mov	sp, r7
    ef90:	bd80      	pop	{r7, pc}
    ef92:	bf00      	nop
    ef94:	00021ea4 	.word	0x00021ea4
    ef98:	00021fac 	.word	0x00021fac
    ef9c:	0002219c 	.word	0x0002219c
    efa0:	00021d8c 	.word	0x00021d8c
    efa4:	00021ee0 	.word	0x00021ee0

0000efa8 <dict_view_print>:

STATIC void dict_view_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    efa8:	b580      	push	{r7, lr}
    efaa:	b08c      	sub	sp, #48	; 0x30
    efac:	af00      	add	r7, sp, #0
    efae:	60f8      	str	r0, [r7, #12]
    efb0:	60b9      	str	r1, [r7, #8]
    efb2:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &dict_view_type));
    efb4:	68b8      	ldr	r0, [r7, #8]
    efb6:	f7ff fa99 	bl	e4ec <MP_OBJ_IS_OBJ>
    efba:	4603      	mov	r3, r0
    efbc:	f083 0301 	eor.w	r3, r3, #1
    efc0:	b2db      	uxtb	r3, r3
    efc2:	2b00      	cmp	r3, #0
    efc4:	d104      	bne.n	efd0 <dict_view_print+0x28>
    efc6:	68bb      	ldr	r3, [r7, #8]
    efc8:	681b      	ldr	r3, [r3, #0]
    efca:	4a24      	ldr	r2, [pc, #144]	; (f05c <dict_view_print+0xb4>)
    efcc:	4293      	cmp	r3, r2
    efce:	d006      	beq.n	efde <dict_view_print+0x36>
    efd0:	4b23      	ldr	r3, [pc, #140]	; (f060 <dict_view_print+0xb8>)
    efd2:	4a24      	ldr	r2, [pc, #144]	; (f064 <dict_view_print+0xbc>)
    efd4:	f240 11bd 	movw	r1, #445	; 0x1bd
    efd8:	4823      	ldr	r0, [pc, #140]	; (f068 <dict_view_print+0xc0>)
    efda:	f00c fbd3 	bl	1b784 <__assert_func>
    mp_obj_dict_view_t *self = MP_OBJ_TO_PTR(self_in);
    efde:	68bb      	ldr	r3, [r7, #8]
    efe0:	62bb      	str	r3, [r7, #40]	; 0x28
    bool first = true;
    efe2:	2301      	movs	r3, #1
    efe4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    mp_print_str(print, mp_dict_view_names[self->kind]);
    efe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    efea:	689b      	ldr	r3, [r3, #8]
    efec:	4a1f      	ldr	r2, [pc, #124]	; (f06c <dict_view_print+0xc4>)
    efee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eff2:	4619      	mov	r1, r3
    eff4:	68f8      	ldr	r0, [r7, #12]
    eff6:	f7f2 fd0b 	bl	1a10 <mp_print_str>
    mp_print_str(print, "([");
    effa:	491d      	ldr	r1, [pc, #116]	; (f070 <dict_view_print+0xc8>)
    effc:	68f8      	ldr	r0, [r7, #12]
    effe:	f7f2 fd07 	bl	1a10 <mp_print_str>
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t self_iter = dict_view_getiter(self_in, &iter_buf);
    f002:	f107 0310 	add.w	r3, r7, #16
    f006:	4619      	mov	r1, r3
    f008:	68b8      	ldr	r0, [r7, #8]
    f00a:	f7ff ff91 	bl	ef30 <dict_view_getiter>
    f00e:	6278      	str	r0, [r7, #36]	; 0x24
    mp_obj_t next = MP_OBJ_NULL;
    f010:	2300      	movs	r3, #0
    f012:	623b      	str	r3, [r7, #32]
    while ((next = dict_view_it_iternext(self_iter)) != MP_OBJ_STOP_ITERATION) {
    f014:	e012      	b.n	f03c <dict_view_print+0x94>
        if (!first) {
    f016:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    f01a:	f083 0301 	eor.w	r3, r3, #1
    f01e:	b2db      	uxtb	r3, r3
    f020:	2b00      	cmp	r3, #0
    f022:	d003      	beq.n	f02c <dict_view_print+0x84>
            mp_print_str(print, ", ");
    f024:	4913      	ldr	r1, [pc, #76]	; (f074 <dict_view_print+0xcc>)
    f026:	68f8      	ldr	r0, [r7, #12]
    f028:	f7f2 fcf2 	bl	1a10 <mp_print_str>
        }
        first = false;
    f02c:	2300      	movs	r3, #0
    f02e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        mp_obj_print_helper(print, next, PRINT_REPR);
    f032:	2201      	movs	r2, #1
    f034:	6a39      	ldr	r1, [r7, #32]
    f036:	68f8      	ldr	r0, [r7, #12]
    f038:	f7fe fc5e 	bl	d8f8 <mp_obj_print_helper>
    while ((next = dict_view_it_iternext(self_iter)) != MP_OBJ_STOP_ITERATION) {
    f03c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    f03e:	f7ff ff29 	bl	ee94 <dict_view_it_iternext>
    f042:	6238      	str	r0, [r7, #32]
    f044:	6a3b      	ldr	r3, [r7, #32]
    f046:	2b04      	cmp	r3, #4
    f048:	d1e5      	bne.n	f016 <dict_view_print+0x6e>
    }
    mp_print_str(print, "])");
    f04a:	490b      	ldr	r1, [pc, #44]	; (f078 <dict_view_print+0xd0>)
    f04c:	68f8      	ldr	r0, [r7, #12]
    f04e:	f7f2 fcdf 	bl	1a10 <mp_print_str>
}
    f052:	bf00      	nop
    f054:	3730      	adds	r7, #48	; 0x30
    f056:	46bd      	mov	sp, r7
    f058:	bd80      	pop	{r7, pc}
    f05a:	bf00      	nop
    f05c:	00021ea4 	.word	0x00021ea4
    f060:	00022008 	.word	0x00022008
    f064:	000221b0 	.word	0x000221b0
    f068:	00021d8c 	.word	0x00021d8c
    f06c:	00021f40 	.word	0x00021f40
    f070:	00022064 	.word	0x00022064
    f074:	00021d20 	.word	0x00021d20
    f078:	00022068 	.word	0x00022068

0000f07c <dict_view_binary_op>:

STATIC mp_obj_t dict_view_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    f07c:	b580      	push	{r7, lr}
    f07e:	b086      	sub	sp, #24
    f080:	af00      	add	r7, sp, #0
    f082:	60f8      	str	r0, [r7, #12]
    f084:	60b9      	str	r1, [r7, #8]
    f086:	607a      	str	r2, [r7, #4]
    // only supported for the 'keys' kind until sets and dicts are refactored
    mp_obj_dict_view_t *o = MP_OBJ_TO_PTR(lhs_in);
    f088:	68bb      	ldr	r3, [r7, #8]
    f08a:	617b      	str	r3, [r7, #20]
    if (o->kind != MP_DICT_VIEW_KEYS) {
    f08c:	697b      	ldr	r3, [r7, #20]
    f08e:	689b      	ldr	r3, [r3, #8]
    f090:	2b01      	cmp	r3, #1
    f092:	d001      	beq.n	f098 <dict_view_binary_op+0x1c>
        return MP_OBJ_NULL; // op not supported
    f094:	2300      	movs	r3, #0
    f096:	e00c      	b.n	f0b2 <dict_view_binary_op+0x36>
    }
    if (op != MP_BINARY_OP_CONTAINS) {
    f098:	68fb      	ldr	r3, [r7, #12]
    f09a:	2b22      	cmp	r3, #34	; 0x22
    f09c:	d001      	beq.n	f0a2 <dict_view_binary_op+0x26>
        return MP_OBJ_NULL; // op not supported
    f09e:	2300      	movs	r3, #0
    f0a0:	e007      	b.n	f0b2 <dict_view_binary_op+0x36>
    }
    return dict_binary_op(op, o->dict, rhs_in);
    f0a2:	697b      	ldr	r3, [r7, #20]
    f0a4:	685b      	ldr	r3, [r3, #4]
    f0a6:	687a      	ldr	r2, [r7, #4]
    f0a8:	4619      	mov	r1, r3
    f0aa:	68f8      	ldr	r0, [r7, #12]
    f0ac:	f7ff fb58 	bl	e760 <dict_binary_op>
    f0b0:	4603      	mov	r3, r0
}
    f0b2:	4618      	mov	r0, r3
    f0b4:	3718      	adds	r7, #24
    f0b6:	46bd      	mov	sp, r7
    f0b8:	bd80      	pop	{r7, pc}
    f0ba:	bf00      	nop

0000f0bc <mp_obj_new_dict_view>:
    .print = dict_view_print,
    .binary_op = dict_view_binary_op,
    .getiter = dict_view_getiter,
};

STATIC mp_obj_t mp_obj_new_dict_view(mp_obj_t dict, mp_dict_view_kind_t kind) {
    f0bc:	b580      	push	{r7, lr}
    f0be:	b084      	sub	sp, #16
    f0c0:	af00      	add	r7, sp, #0
    f0c2:	6078      	str	r0, [r7, #4]
    f0c4:	6039      	str	r1, [r7, #0]
    mp_obj_dict_view_t *o = m_new_obj(mp_obj_dict_view_t);
    f0c6:	200c      	movs	r0, #12
    f0c8:	f7f1 f928 	bl	31c <m_malloc>
    f0cc:	60f8      	str	r0, [r7, #12]
    o->base.type = &dict_view_type;
    f0ce:	68fb      	ldr	r3, [r7, #12]
    f0d0:	4a06      	ldr	r2, [pc, #24]	; (f0ec <mp_obj_new_dict_view+0x30>)
    f0d2:	601a      	str	r2, [r3, #0]
    o->dict = dict;
    f0d4:	68fb      	ldr	r3, [r7, #12]
    f0d6:	687a      	ldr	r2, [r7, #4]
    f0d8:	605a      	str	r2, [r3, #4]
    o->kind = kind;
    f0da:	68fb      	ldr	r3, [r7, #12]
    f0dc:	683a      	ldr	r2, [r7, #0]
    f0de:	609a      	str	r2, [r3, #8]
    return MP_OBJ_FROM_PTR(o);
    f0e0:	68fb      	ldr	r3, [r7, #12]
}
    f0e2:	4618      	mov	r0, r3
    f0e4:	3710      	adds	r7, #16
    f0e6:	46bd      	mov	sp, r7
    f0e8:	bd80      	pop	{r7, pc}
    f0ea:	bf00      	nop
    f0ec:	00021ea4 	.word	0x00021ea4

0000f0f0 <dict_view>:

STATIC mp_obj_t dict_view(mp_obj_t self_in, mp_dict_view_kind_t kind) {
    f0f0:	b580      	push	{r7, lr}
    f0f2:	b082      	sub	sp, #8
    f0f4:	af00      	add	r7, sp, #0
    f0f6:	6078      	str	r0, [r7, #4]
    f0f8:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    f0fa:	6878      	ldr	r0, [r7, #4]
    f0fc:	f7ff f9f6 	bl	e4ec <MP_OBJ_IS_OBJ>
    f100:	4603      	mov	r3, r0
    f102:	f083 0301 	eor.w	r3, r3, #1
    f106:	b2db      	uxtb	r3, r3
    f108:	2b00      	cmp	r3, #0
    f10a:	d105      	bne.n	f118 <dict_view+0x28>
    f10c:	687b      	ldr	r3, [r7, #4]
    f10e:	681b      	ldr	r3, [r3, #0]
    f110:	68db      	ldr	r3, [r3, #12]
    f112:	4a09      	ldr	r2, [pc, #36]	; (f138 <dict_view+0x48>)
    f114:	4293      	cmp	r3, r2
    f116:	d006      	beq.n	f126 <dict_view+0x36>
    f118:	4b08      	ldr	r3, [pc, #32]	; (f13c <dict_view+0x4c>)
    f11a:	4a09      	ldr	r2, [pc, #36]	; (f140 <dict_view+0x50>)
    f11c:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    f120:	4808      	ldr	r0, [pc, #32]	; (f144 <dict_view+0x54>)
    f122:	f00c fb2f 	bl	1b784 <__assert_func>
    return mp_obj_new_dict_view(self_in, kind);
    f126:	6839      	ldr	r1, [r7, #0]
    f128:	6878      	ldr	r0, [r7, #4]
    f12a:	f7ff ffc7 	bl	f0bc <mp_obj_new_dict_view>
    f12e:	4603      	mov	r3, r0
}
    f130:	4618      	mov	r0, r3
    f132:	3708      	adds	r7, #8
    f134:	46bd      	mov	sp, r7
    f136:	bd80      	pop	{r7, pc}
    f138:	0000e6a9 	.word	0x0000e6a9
    f13c:	00021d2c 	.word	0x00021d2c
    f140:	000221c0 	.word	0x000221c0
    f144:	00021d8c 	.word	0x00021d8c

0000f148 <dict_items>:

STATIC mp_obj_t dict_items(mp_obj_t self_in) {
    f148:	b580      	push	{r7, lr}
    f14a:	b082      	sub	sp, #8
    f14c:	af00      	add	r7, sp, #0
    f14e:	6078      	str	r0, [r7, #4]
    return dict_view(self_in, MP_DICT_VIEW_ITEMS);
    f150:	2100      	movs	r1, #0
    f152:	6878      	ldr	r0, [r7, #4]
    f154:	f7ff ffcc 	bl	f0f0 <dict_view>
    f158:	4603      	mov	r3, r0
}
    f15a:	4618      	mov	r0, r3
    f15c:	3708      	adds	r7, #8
    f15e:	46bd      	mov	sp, r7
    f160:	bd80      	pop	{r7, pc}
    f162:	bf00      	nop

0000f164 <dict_keys>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_items_obj, dict_items);

STATIC mp_obj_t dict_keys(mp_obj_t self_in) {
    f164:	b580      	push	{r7, lr}
    f166:	b082      	sub	sp, #8
    f168:	af00      	add	r7, sp, #0
    f16a:	6078      	str	r0, [r7, #4]
    return dict_view(self_in, MP_DICT_VIEW_KEYS);
    f16c:	2101      	movs	r1, #1
    f16e:	6878      	ldr	r0, [r7, #4]
    f170:	f7ff ffbe 	bl	f0f0 <dict_view>
    f174:	4603      	mov	r3, r0
}
    f176:	4618      	mov	r0, r3
    f178:	3708      	adds	r7, #8
    f17a:	46bd      	mov	sp, r7
    f17c:	bd80      	pop	{r7, pc}
    f17e:	bf00      	nop

0000f180 <dict_values>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_keys_obj, dict_keys);

STATIC mp_obj_t dict_values(mp_obj_t self_in) {
    f180:	b580      	push	{r7, lr}
    f182:	b082      	sub	sp, #8
    f184:	af00      	add	r7, sp, #0
    f186:	6078      	str	r0, [r7, #4]
    return dict_view(self_in, MP_DICT_VIEW_VALUES);
    f188:	2102      	movs	r1, #2
    f18a:	6878      	ldr	r0, [r7, #4]
    f18c:	f7ff ffb0 	bl	f0f0 <dict_view>
    f190:	4603      	mov	r3, r0
}
    f192:	4618      	mov	r0, r3
    f194:	3708      	adds	r7, #8
    f196:	46bd      	mov	sp, r7
    f198:	bd80      	pop	{r7, pc}
    f19a:	bf00      	nop

0000f19c <dict_getiter>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_values_obj, dict_values);

/******************************************************************************/
/* dict iterator                                                              */

STATIC mp_obj_t dict_getiter(mp_obj_t self_in, mp_obj_iter_buf_t *iter_buf) {
    f19c:	b580      	push	{r7, lr}
    f19e:	b084      	sub	sp, #16
    f1a0:	af00      	add	r7, sp, #0
    f1a2:	6078      	str	r0, [r7, #4]
    f1a4:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_dict_view_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    f1a6:	6878      	ldr	r0, [r7, #4]
    f1a8:	f7ff f9a0 	bl	e4ec <MP_OBJ_IS_OBJ>
    f1ac:	4603      	mov	r3, r0
    f1ae:	f083 0301 	eor.w	r3, r3, #1
    f1b2:	b2db      	uxtb	r3, r3
    f1b4:	2b00      	cmp	r3, #0
    f1b6:	d105      	bne.n	f1c4 <dict_getiter+0x28>
    f1b8:	687b      	ldr	r3, [r7, #4]
    f1ba:	681b      	ldr	r3, [r3, #0]
    f1bc:	68db      	ldr	r3, [r3, #12]
    f1be:	4a0e      	ldr	r2, [pc, #56]	; (f1f8 <dict_getiter+0x5c>)
    f1c0:	4293      	cmp	r3, r2
    f1c2:	d006      	beq.n	f1d2 <dict_getiter+0x36>
    f1c4:	4b0d      	ldr	r3, [pc, #52]	; (f1fc <dict_getiter+0x60>)
    f1c6:	4a0e      	ldr	r2, [pc, #56]	; (f200 <dict_getiter+0x64>)
    f1c8:	f44f 7101 	mov.w	r1, #516	; 0x204
    f1cc:	480d      	ldr	r0, [pc, #52]	; (f204 <dict_getiter+0x68>)
    f1ce:	f00c fad9 	bl	1b784 <__assert_func>
    mp_obj_dict_view_it_t *o = (mp_obj_dict_view_it_t*)iter_buf;
    f1d2:	683b      	ldr	r3, [r7, #0]
    f1d4:	60fb      	str	r3, [r7, #12]
    o->base.type = &dict_view_it_type;
    f1d6:	68fb      	ldr	r3, [r7, #12]
    f1d8:	4a0b      	ldr	r2, [pc, #44]	; (f208 <dict_getiter+0x6c>)
    f1da:	601a      	str	r2, [r3, #0]
    o->kind = MP_DICT_VIEW_KEYS;
    f1dc:	68fb      	ldr	r3, [r7, #12]
    f1de:	2201      	movs	r2, #1
    f1e0:	605a      	str	r2, [r3, #4]
    o->dict = self_in;
    f1e2:	68fb      	ldr	r3, [r7, #12]
    f1e4:	687a      	ldr	r2, [r7, #4]
    f1e6:	609a      	str	r2, [r3, #8]
    o->cur = 0;
    f1e8:	68fb      	ldr	r3, [r7, #12]
    f1ea:	2200      	movs	r2, #0
    f1ec:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
    f1ee:	68fb      	ldr	r3, [r7, #12]
}
    f1f0:	4618      	mov	r0, r3
    f1f2:	3710      	adds	r7, #16
    f1f4:	46bd      	mov	sp, r7
    f1f6:	bd80      	pop	{r7, pc}
    f1f8:	0000e6a9 	.word	0x0000e6a9
    f1fc:	00021d2c 	.word	0x00021d2c
    f200:	000221cc 	.word	0x000221cc
    f204:	00021d8c 	.word	0x00021d8c
    f208:	00021ee0 	.word	0x00021ee0

0000f20c <mp_obj_dict_init>:
    .parent = &mp_type_dict,
    .locals_dict = (mp_obj_dict_t*)&dict_locals_dict,
};
#endif

void mp_obj_dict_init(mp_obj_dict_t *dict, size_t n_args) {
    f20c:	b580      	push	{r7, lr}
    f20e:	b082      	sub	sp, #8
    f210:	af00      	add	r7, sp, #0
    f212:	6078      	str	r0, [r7, #4]
    f214:	6039      	str	r1, [r7, #0]
    dict->base.type = &mp_type_dict;
    f216:	687b      	ldr	r3, [r7, #4]
    f218:	4a05      	ldr	r2, [pc, #20]	; (f230 <mp_obj_dict_init+0x24>)
    f21a:	601a      	str	r2, [r3, #0]
    mp_map_init(&dict->map, n_args);
    f21c:	687b      	ldr	r3, [r7, #4]
    f21e:	3304      	adds	r3, #4
    f220:	6839      	ldr	r1, [r7, #0]
    f222:	4618      	mov	r0, r3
    f224:	f7fe f890 	bl	d348 <mp_map_init>
}
    f228:	bf00      	nop
    f22a:	3708      	adds	r7, #8
    f22c:	46bd      	mov	sp, r7
    f22e:	bd80      	pop	{r7, pc}
    f230:	00022104 	.word	0x00022104

0000f234 <mp_obj_new_dict>:

mp_obj_t mp_obj_new_dict(size_t n_args) {
    f234:	b580      	push	{r7, lr}
    f236:	b084      	sub	sp, #16
    f238:	af00      	add	r7, sp, #0
    f23a:	6078      	str	r0, [r7, #4]
    mp_obj_dict_t *o = m_new_obj(mp_obj_dict_t);
    f23c:	2010      	movs	r0, #16
    f23e:	f7f1 f86d 	bl	31c <m_malloc>
    f242:	60f8      	str	r0, [r7, #12]
    mp_obj_dict_init(o, n_args);
    f244:	6879      	ldr	r1, [r7, #4]
    f246:	68f8      	ldr	r0, [r7, #12]
    f248:	f7ff ffe0 	bl	f20c <mp_obj_dict_init>
    return MP_OBJ_FROM_PTR(o);
    f24c:	68fb      	ldr	r3, [r7, #12]
}
    f24e:	4618      	mov	r0, r3
    f250:	3710      	adds	r7, #16
    f252:	46bd      	mov	sp, r7
    f254:	bd80      	pop	{r7, pc}
    f256:	bf00      	nop

0000f258 <mp_obj_dict_len>:

size_t mp_obj_dict_len(mp_obj_t self_in) {
    f258:	b480      	push	{r7}
    f25a:	b085      	sub	sp, #20
    f25c:	af00      	add	r7, sp, #0
    f25e:	6078      	str	r0, [r7, #4]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    f260:	687b      	ldr	r3, [r7, #4]
    f262:	60fb      	str	r3, [r7, #12]
    return self->map.used;
    f264:	68fb      	ldr	r3, [r7, #12]
    f266:	685b      	ldr	r3, [r3, #4]
    f268:	f3c3 03dc 	ubfx	r3, r3, #3, #29
}
    f26c:	4618      	mov	r0, r3
    f26e:	3714      	adds	r7, #20
    f270:	46bd      	mov	sp, r7
    f272:	f85d 7b04 	ldr.w	r7, [sp], #4
    f276:	4770      	bx	lr

0000f278 <mp_obj_dict_store>:

mp_obj_t mp_obj_dict_store(mp_obj_t self_in, mp_obj_t key, mp_obj_t value) {
    f278:	b580      	push	{r7, lr}
    f27a:	b086      	sub	sp, #24
    f27c:	af00      	add	r7, sp, #0
    f27e:	60f8      	str	r0, [r7, #12]
    f280:	60b9      	str	r1, [r7, #8]
    f282:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    f284:	68f8      	ldr	r0, [r7, #12]
    f286:	f7ff f931 	bl	e4ec <MP_OBJ_IS_OBJ>
    f28a:	4603      	mov	r3, r0
    f28c:	f083 0301 	eor.w	r3, r3, #1
    f290:	b2db      	uxtb	r3, r3
    f292:	2b00      	cmp	r3, #0
    f294:	d105      	bne.n	f2a2 <mp_obj_dict_store+0x2a>
    f296:	68fb      	ldr	r3, [r7, #12]
    f298:	681b      	ldr	r3, [r3, #0]
    f29a:	68db      	ldr	r3, [r3, #12]
    f29c:	4a0e      	ldr	r2, [pc, #56]	; (f2d8 <mp_obj_dict_store+0x60>)
    f29e:	4293      	cmp	r3, r2
    f2a0:	d006      	beq.n	f2b0 <mp_obj_dict_store+0x38>
    f2a2:	4b0e      	ldr	r3, [pc, #56]	; (f2dc <mp_obj_dict_store+0x64>)
    f2a4:	4a0e      	ldr	r2, [pc, #56]	; (f2e0 <mp_obj_dict_store+0x68>)
    f2a6:	f240 214f 	movw	r1, #591	; 0x24f
    f2aa:	480e      	ldr	r0, [pc, #56]	; (f2e4 <mp_obj_dict_store+0x6c>)
    f2ac:	f00c fa6a 	bl	1b784 <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    f2b0:	68fb      	ldr	r3, [r7, #12]
    f2b2:	617b      	str	r3, [r7, #20]
    mp_ensure_not_fixed(self);
    f2b4:	6978      	ldr	r0, [r7, #20]
    f2b6:	f7ff fb21 	bl	e8fc <mp_ensure_not_fixed>
    mp_map_lookup(&self->map, key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    f2ba:	697b      	ldr	r3, [r7, #20]
    f2bc:	3304      	adds	r3, #4
    f2be:	2201      	movs	r2, #1
    f2c0:	68b9      	ldr	r1, [r7, #8]
    f2c2:	4618      	mov	r0, r3
    f2c4:	f7fe f93c 	bl	d540 <mp_map_lookup>
    f2c8:	4602      	mov	r2, r0
    f2ca:	687b      	ldr	r3, [r7, #4]
    f2cc:	6053      	str	r3, [r2, #4]
    return self_in;
    f2ce:	68fb      	ldr	r3, [r7, #12]
}
    f2d0:	4618      	mov	r0, r3
    f2d2:	3718      	adds	r7, #24
    f2d4:	46bd      	mov	sp, r7
    f2d6:	bd80      	pop	{r7, pc}
    f2d8:	0000e6a9 	.word	0x0000e6a9
    f2dc:	00021d2c 	.word	0x00021d2c
    f2e0:	000221dc 	.word	0x000221dc
    f2e4:	00021d8c 	.word	0x00021d8c

0000f2e8 <mp_obj_dict_delete>:

mp_obj_t mp_obj_dict_delete(mp_obj_t self_in, mp_obj_t key) {
    f2e8:	b580      	push	{r7, lr}
    f2ea:	b084      	sub	sp, #16
    f2ec:	af00      	add	r7, sp, #0
    f2ee:	6078      	str	r0, [r7, #4]
    f2f0:	6039      	str	r1, [r7, #0]
    mp_obj_t args[2] = {self_in, key};
    f2f2:	687b      	ldr	r3, [r7, #4]
    f2f4:	60bb      	str	r3, [r7, #8]
    f2f6:	683b      	ldr	r3, [r7, #0]
    f2f8:	60fb      	str	r3, [r7, #12]
    dict_get_helper(2, args, MP_MAP_LOOKUP_REMOVE_IF_FOUND);
    f2fa:	f107 0308 	add.w	r3, r7, #8
    f2fe:	2202      	movs	r2, #2
    f300:	4619      	mov	r1, r3
    f302:	2002      	movs	r0, #2
    f304:	f7ff fbe6 	bl	ead4 <dict_get_helper>
    return self_in;
    f308:	687b      	ldr	r3, [r7, #4]
}
    f30a:	4618      	mov	r0, r3
    f30c:	3710      	adds	r7, #16
    f30e:	46bd      	mov	sp, r7
    f310:	bd80      	pop	{r7, pc}
    f312:	bf00      	nop

0000f314 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    f314:	b480      	push	{r7}
    f316:	b083      	sub	sp, #12
    f318:	af00      	add	r7, sp, #0
    f31a:	6078      	str	r0, [r7, #4]
    f31c:	687b      	ldr	r3, [r7, #4]
    f31e:	f003 0303 	and.w	r3, r3, #3
    f322:	2b00      	cmp	r3, #0
    f324:	bf0c      	ite	eq
    f326:	2301      	moveq	r3, #1
    f328:	2300      	movne	r3, #0
    f32a:	b2db      	uxtb	r3, r3
    f32c:	4618      	mov	r0, r3
    f32e:	370c      	adds	r7, #12
    f330:	46bd      	mov	sp, r7
    f332:	f85d 7b04 	ldr.w	r7, [sp], #4
    f336:	4770      	bx	lr

0000f338 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
    f338:	b580      	push	{r7, lr}
    f33a:	b084      	sub	sp, #16
    f33c:	af00      	add	r7, sp, #0
    f33e:	60f8      	str	r0, [r7, #12]
    f340:	60b9      	str	r1, [r7, #8]
    f342:	607a      	str	r2, [r7, #4]
    f344:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
    f346:	687b      	ldr	r3, [r7, #4]
    f348:	045a      	lsls	r2, r3, #17
    f34a:	683b      	ldr	r3, [r7, #0]
    f34c:	005b      	lsls	r3, r3, #1
    f34e:	431a      	orrs	r2, r3
    f350:	7e3b      	ldrb	r3, [r7, #24]
    f352:	2b00      	cmp	r3, #0
    f354:	d001      	beq.n	f35a <mp_arg_check_num+0x22>
    f356:	2301      	movs	r3, #1
    f358:	e000      	b.n	f35c <mp_arg_check_num+0x24>
    f35a:	2300      	movs	r3, #0
    f35c:	4313      	orrs	r3, r2
    f35e:	461a      	mov	r2, r3
    f360:	68b9      	ldr	r1, [r7, #8]
    f362:	68f8      	ldr	r0, [r7, #12]
    f364:	f7fd fe94 	bl	d090 <mp_arg_check_num_sig>
}
    f368:	bf00      	nop
    f36a:	3710      	adds	r7, #16
    f36c:	46bd      	mov	sp, r7
    f36e:	bd80      	pop	{r7, pc}

0000f370 <mp_obj_exception_print>:
// Instance of GeneratorExit exception - needed by generator.close()
// This would belong to objgenerator.c, but to keep mp_obj_exception_t
// definition module-private so far, have it here.
const mp_obj_exception_t mp_const_GeneratorExit_obj = {{&mp_type_GeneratorExit}, 0, 0, NULL, (mp_obj_tuple_t*)&mp_const_empty_tuple_obj};

void mp_obj_exception_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
    f370:	b580      	push	{r7, lr}
    f372:	b088      	sub	sp, #32
    f374:	af00      	add	r7, sp, #0
    f376:	60f8      	str	r0, [r7, #12]
    f378:	60b9      	str	r1, [r7, #8]
    f37a:	607a      	str	r2, [r7, #4]
    mp_obj_exception_t *o = MP_OBJ_TO_PTR(o_in);
    f37c:	68bb      	ldr	r3, [r7, #8]
    f37e:	61fb      	str	r3, [r7, #28]
    mp_print_kind_t k = kind & ~PRINT_EXC_SUBCLASS;
    f380:	687b      	ldr	r3, [r7, #4]
    f382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f386:	61bb      	str	r3, [r7, #24]
    bool is_subclass = kind & PRINT_EXC_SUBCLASS;
    f388:	687b      	ldr	r3, [r7, #4]
    f38a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f38e:	2b00      	cmp	r3, #0
    f390:	bf14      	ite	ne
    f392:	2301      	movne	r3, #1
    f394:	2300      	moveq	r3, #0
    f396:	75fb      	strb	r3, [r7, #23]
    if (!is_subclass && (k == PRINT_REPR || k == PRINT_EXC)) {
    f398:	7dfb      	ldrb	r3, [r7, #23]
    f39a:	f083 0301 	eor.w	r3, r3, #1
    f39e:	b2db      	uxtb	r3, r3
    f3a0:	2b00      	cmp	r3, #0
    f3a2:	d010      	beq.n	f3c6 <mp_obj_exception_print+0x56>
    f3a4:	69bb      	ldr	r3, [r7, #24]
    f3a6:	2b01      	cmp	r3, #1
    f3a8:	d002      	beq.n	f3b0 <mp_obj_exception_print+0x40>
    f3aa:	69bb      	ldr	r3, [r7, #24]
    f3ac:	2b02      	cmp	r3, #2
    f3ae:	d10a      	bne.n	f3c6 <mp_obj_exception_print+0x56>
        mp_print_str(print, qstr_str(o->base.type->name));
    f3b0:	69fb      	ldr	r3, [r7, #28]
    f3b2:	681b      	ldr	r3, [r3, #0]
    f3b4:	88db      	ldrh	r3, [r3, #6]
    f3b6:	4618      	mov	r0, r3
    f3b8:	f7f1 ffe6 	bl	1388 <qstr_str>
    f3bc:	4603      	mov	r3, r0
    f3be:	4619      	mov	r1, r3
    f3c0:	68f8      	ldr	r0, [r7, #12]
    f3c2:	f7f2 fb25 	bl	1a10 <mp_print_str>
    }

    if (k == PRINT_EXC) {
    f3c6:	69bb      	ldr	r3, [r7, #24]
    f3c8:	2b02      	cmp	r3, #2
    f3ca:	d103      	bne.n	f3d4 <mp_obj_exception_print+0x64>
        mp_print_str(print, ": ");
    f3cc:	4917      	ldr	r1, [pc, #92]	; (f42c <mp_obj_exception_print+0xbc>)
    f3ce:	68f8      	ldr	r0, [r7, #12]
    f3d0:	f7f2 fb1e 	bl	1a10 <mp_print_str>
    }

    if (k == PRINT_STR || k == PRINT_EXC) {
    f3d4:	69bb      	ldr	r3, [r7, #24]
    f3d6:	2b00      	cmp	r3, #0
    f3d8:	d002      	beq.n	f3e0 <mp_obj_exception_print+0x70>
    f3da:	69bb      	ldr	r3, [r7, #24]
    f3dc:	2b02      	cmp	r3, #2
    f3de:	d11b      	bne.n	f418 <mp_obj_exception_print+0xa8>
        if (o->args == NULL || o->args->len == 0) {
    f3e0:	69fb      	ldr	r3, [r7, #28]
    f3e2:	68db      	ldr	r3, [r3, #12]
    f3e4:	2b00      	cmp	r3, #0
    f3e6:	d004      	beq.n	f3f2 <mp_obj_exception_print+0x82>
    f3e8:	69fb      	ldr	r3, [r7, #28]
    f3ea:	68db      	ldr	r3, [r3, #12]
    f3ec:	685b      	ldr	r3, [r3, #4]
    f3ee:	2b00      	cmp	r3, #0
    f3f0:	d104      	bne.n	f3fc <mp_obj_exception_print+0x8c>
            mp_print_str(print, "");
    f3f2:	490f      	ldr	r1, [pc, #60]	; (f430 <mp_obj_exception_print+0xc0>)
    f3f4:	68f8      	ldr	r0, [r7, #12]
    f3f6:	f7f2 fb0b 	bl	1a10 <mp_print_str>
            return;
    f3fa:	e014      	b.n	f426 <mp_obj_exception_print+0xb6>
        } else if (o->args->len == 1) {
    f3fc:	69fb      	ldr	r3, [r7, #28]
    f3fe:	68db      	ldr	r3, [r3, #12]
    f400:	685b      	ldr	r3, [r3, #4]
    f402:	2b01      	cmp	r3, #1
    f404:	d108      	bne.n	f418 <mp_obj_exception_print+0xa8>
                    mp_printf(print, "[Errno " INT_FMT "] %q", MP_OBJ_SMALL_INT_VALUE(o->args->items[0]), qst);
                    return;
                }
            }
            #endif
            mp_obj_print_helper(print, o->args->items[0], PRINT_STR);
    f406:	69fb      	ldr	r3, [r7, #28]
    f408:	68db      	ldr	r3, [r3, #12]
    f40a:	689b      	ldr	r3, [r3, #8]
    f40c:	2200      	movs	r2, #0
    f40e:	4619      	mov	r1, r3
    f410:	68f8      	ldr	r0, [r7, #12]
    f412:	f7fe fa71 	bl	d8f8 <mp_obj_print_helper>
            return;
    f416:	e006      	b.n	f426 <mp_obj_exception_print+0xb6>
        }
    }
    mp_obj_tuple_print(print, MP_OBJ_FROM_PTR(o->args), kind);
    f418:	69fb      	ldr	r3, [r7, #28]
    f41a:	68db      	ldr	r3, [r3, #12]
    f41c:	687a      	ldr	r2, [r7, #4]
    f41e:	4619      	mov	r1, r3
    f420:	68f8      	ldr	r0, [r7, #12]
    f422:	f006 fb17 	bl	15a54 <mp_obj_tuple_print>
}
    f426:	3720      	adds	r7, #32
    f428:	46bd      	mov	sp, r7
    f42a:	bd80      	pop	{r7, pc}
    f42c:	00022200 	.word	0x00022200
    f430:	00022204 	.word	0x00022204

0000f434 <mp_obj_exception_make_new>:

mp_obj_t mp_obj_exception_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    f434:	b580      	push	{r7, lr}
    f436:	b088      	sub	sp, #32
    f438:	af02      	add	r7, sp, #8
    f43a:	60f8      	str	r0, [r7, #12]
    f43c:	60b9      	str	r1, [r7, #8]
    f43e:	607a      	str	r2, [r7, #4]
    f440:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 0, MP_OBJ_FUN_ARGS_MAX, false);
    f442:	2300      	movs	r3, #0
    f444:	9300      	str	r3, [sp, #0]
    f446:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f44a:	2200      	movs	r2, #0
    f44c:	6879      	ldr	r1, [r7, #4]
    f44e:	68b8      	ldr	r0, [r7, #8]
    f450:	f7ff ff72 	bl	f338 <mp_arg_check_num>

    // Try to allocate memory for the exception, with fallback to emergency exception object
    mp_obj_exception_t *o_exc = m_new_obj_maybe(mp_obj_exception_t);
    f454:	2010      	movs	r0, #16
    f456:	f7f0 ff79 	bl	34c <m_malloc_maybe>
    f45a:	6178      	str	r0, [r7, #20]
    if (o_exc == NULL) {
    f45c:	697b      	ldr	r3, [r7, #20]
    f45e:	2b00      	cmp	r3, #0
    f460:	d101      	bne.n	f466 <mp_obj_exception_make_new+0x32>
        o_exc = &MP_STATE_VM(mp_emergency_exception_obj);
    f462:	4b19      	ldr	r3, [pc, #100]	; (f4c8 <mp_obj_exception_make_new+0x94>)
    f464:	617b      	str	r3, [r7, #20]
    }

    // Populate the exception object
    o_exc->base.type = type;
    f466:	697b      	ldr	r3, [r7, #20]
    f468:	68fa      	ldr	r2, [r7, #12]
    f46a:	601a      	str	r2, [r3, #0]
    o_exc->traceback_data = NULL;
    f46c:	697b      	ldr	r3, [r7, #20]
    f46e:	2200      	movs	r2, #0
    f470:	609a      	str	r2, [r3, #8]

    mp_obj_tuple_t *o_tuple;
    if (n_args == 0) {
    f472:	68bb      	ldr	r3, [r7, #8]
    f474:	2b00      	cmp	r3, #0
    f476:	d102      	bne.n	f47e <mp_obj_exception_make_new+0x4a>
        // No args, can use the empty tuple straightaway
        o_tuple = (mp_obj_tuple_t*)&mp_const_empty_tuple_obj;
    f478:	4b14      	ldr	r3, [pc, #80]	; (f4cc <mp_obj_exception_make_new+0x98>)
    f47a:	613b      	str	r3, [r7, #16]
    f47c:	e01b      	b.n	f4b6 <mp_obj_exception_make_new+0x82>
    } else {
        // Try to allocate memory for the tuple containing the args
        o_tuple = m_new_obj_var_maybe(mp_obj_tuple_t, mp_obj_t, n_args);
    f47e:	68bb      	ldr	r3, [r7, #8]
    f480:	3302      	adds	r3, #2
    f482:	009b      	lsls	r3, r3, #2
    f484:	4618      	mov	r0, r3
    f486:	f7f0 ff61 	bl	34c <m_malloc_maybe>
    f48a:	6138      	str	r0, [r7, #16]
            o_tuple = (mp_obj_tuple_t*)
                ((uint8_t*)MP_STATE_VM(mp_emergency_exception_buf) + EMG_TRACEBACK_ALLOC * sizeof(size_t));
        }
        #endif

        if (o_tuple == NULL) {
    f48c:	693b      	ldr	r3, [r7, #16]
    f48e:	2b00      	cmp	r3, #0
    f490:	d102      	bne.n	f498 <mp_obj_exception_make_new+0x64>
            // No memory for a tuple, fallback to an empty tuple
            o_tuple = (mp_obj_tuple_t*)&mp_const_empty_tuple_obj;
    f492:	4b0e      	ldr	r3, [pc, #56]	; (f4cc <mp_obj_exception_make_new+0x98>)
    f494:	613b      	str	r3, [r7, #16]
    f496:	e00e      	b.n	f4b6 <mp_obj_exception_make_new+0x82>
        } else {
            // Have memory for a tuple so populate it
            o_tuple->base.type = &mp_type_tuple;
    f498:	693b      	ldr	r3, [r7, #16]
    f49a:	4a0d      	ldr	r2, [pc, #52]	; (f4d0 <mp_obj_exception_make_new+0x9c>)
    f49c:	601a      	str	r2, [r3, #0]
            o_tuple->len = n_args;
    f49e:	693b      	ldr	r3, [r7, #16]
    f4a0:	68ba      	ldr	r2, [r7, #8]
    f4a2:	605a      	str	r2, [r3, #4]
            memcpy(o_tuple->items, args, n_args * sizeof(mp_obj_t));
    f4a4:	693b      	ldr	r3, [r7, #16]
    f4a6:	f103 0008 	add.w	r0, r3, #8
    f4aa:	68bb      	ldr	r3, [r7, #8]
    f4ac:	009b      	lsls	r3, r3, #2
    f4ae:	461a      	mov	r2, r3
    f4b0:	6839      	ldr	r1, [r7, #0]
    f4b2:	f00d fc6d 	bl	1cd90 <memcpy>
        }
    }

    // Store the tuple of args in the exception object
    o_exc->args = o_tuple;
    f4b6:	697b      	ldr	r3, [r7, #20]
    f4b8:	693a      	ldr	r2, [r7, #16]
    f4ba:	60da      	str	r2, [r3, #12]

    return MP_OBJ_FROM_PTR(o_exc);
    f4bc:	697b      	ldr	r3, [r7, #20]
}
    f4be:	4618      	mov	r0, r3
    f4c0:	3718      	adds	r7, #24
    f4c2:	46bd      	mov	sp, r7
    f4c4:	bd80      	pop	{r7, pc}
    f4c6:	bf00      	nop
    f4c8:	20001304 	.word	0x20001304
    f4cc:	00023e28 	.word	0x00023e28
    f4d0:	00023dec 	.word	0x00023dec

0000f4d4 <mp_obj_exception_get_value>:

// Get exception "value" - that is, first argument, or None
mp_obj_t mp_obj_exception_get_value(mp_obj_t self_in) {
    f4d4:	b480      	push	{r7}
    f4d6:	b085      	sub	sp, #20
    f4d8:	af00      	add	r7, sp, #0
    f4da:	6078      	str	r0, [r7, #4]
    mp_obj_exception_t *self = MP_OBJ_TO_PTR(self_in);
    f4dc:	687b      	ldr	r3, [r7, #4]
    f4de:	60fb      	str	r3, [r7, #12]
    if (self->args->len == 0) {
    f4e0:	68fb      	ldr	r3, [r7, #12]
    f4e2:	68db      	ldr	r3, [r3, #12]
    f4e4:	685b      	ldr	r3, [r3, #4]
    f4e6:	2b00      	cmp	r3, #0
    f4e8:	d101      	bne.n	f4ee <mp_obj_exception_get_value+0x1a>
        return mp_const_none;
    f4ea:	4b05      	ldr	r3, [pc, #20]	; (f500 <mp_obj_exception_get_value+0x2c>)
    f4ec:	e002      	b.n	f4f4 <mp_obj_exception_get_value+0x20>
    } else {
        return self->args->items[0];
    f4ee:	68fb      	ldr	r3, [r7, #12]
    f4f0:	68db      	ldr	r3, [r3, #12]
    f4f2:	689b      	ldr	r3, [r3, #8]
    }
}
    f4f4:	4618      	mov	r0, r3
    f4f6:	3714      	adds	r7, #20
    f4f8:	46bd      	mov	sp, r7
    f4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    f4fe:	4770      	bx	lr
    f500:	000234d4 	.word	0x000234d4

0000f504 <mp_obj_exception_attr>:

void mp_obj_exception_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
    f504:	b580      	push	{r7, lr}
    f506:	b086      	sub	sp, #24
    f508:	af00      	add	r7, sp, #0
    f50a:	60f8      	str	r0, [r7, #12]
    f50c:	60b9      	str	r1, [r7, #8]
    f50e:	607a      	str	r2, [r7, #4]
    mp_obj_exception_t *self = MP_OBJ_TO_PTR(self_in);
    f510:	68fb      	ldr	r3, [r7, #12]
    f512:	617b      	str	r3, [r7, #20]
    if (dest[0] != MP_OBJ_NULL) {
    f514:	687b      	ldr	r3, [r7, #4]
    f516:	681b      	ldr	r3, [r3, #0]
    f518:	2b00      	cmp	r3, #0
    f51a:	d00f      	beq.n	f53c <mp_obj_exception_attr+0x38>
        // store/delete attribute
        if (attr == MP_QSTR___traceback__ && dest[1] == mp_const_none) {
    f51c:	68bb      	ldr	r3, [r7, #8]
    f51e:	2b27      	cmp	r3, #39	; 0x27
    f520:	d124      	bne.n	f56c <mp_obj_exception_attr+0x68>
    f522:	687b      	ldr	r3, [r7, #4]
    f524:	3304      	adds	r3, #4
    f526:	681b      	ldr	r3, [r3, #0]
    f528:	4a12      	ldr	r2, [pc, #72]	; (f574 <mp_obj_exception_attr+0x70>)
    f52a:	4293      	cmp	r3, r2
    f52c:	d11e      	bne.n	f56c <mp_obj_exception_attr+0x68>
            // optimization of pre-allocating exception instance and raising
            // it repeatedly - this avoids memory allocation during raise.
            // However, uPy will keep adding traceback entries to such
            // exception instance, so before throwing it, traceback should
            // be cleared like above.
            self->traceback_len = 0;
    f52e:	697b      	ldr	r3, [r7, #20]
    f530:	2200      	movs	r2, #0
    f532:	80da      	strh	r2, [r3, #6]
            dest[0] = MP_OBJ_NULL; // indicate success
    f534:	687b      	ldr	r3, [r7, #4]
    f536:	2200      	movs	r2, #0
    f538:	601a      	str	r2, [r3, #0]
        }
        return;
    f53a:	e017      	b.n	f56c <mp_obj_exception_attr+0x68>
    }
    if (attr == MP_QSTR_args) {
    f53c:	68bb      	ldr	r3, [r7, #8]
    f53e:	2bed      	cmp	r3, #237	; 0xed
    f540:	d104      	bne.n	f54c <mp_obj_exception_attr+0x48>
        dest[0] = MP_OBJ_FROM_PTR(self->args);
    f542:	697b      	ldr	r3, [r7, #20]
    f544:	68da      	ldr	r2, [r3, #12]
    f546:	687b      	ldr	r3, [r7, #4]
    f548:	601a      	str	r2, [r3, #0]
    f54a:	e010      	b.n	f56e <mp_obj_exception_attr+0x6a>
    } else if (self->base.type == &mp_type_StopIteration && attr == MP_QSTR_value) {
    f54c:	697b      	ldr	r3, [r7, #20]
    f54e:	681b      	ldr	r3, [r3, #0]
    f550:	4a09      	ldr	r2, [pc, #36]	; (f578 <mp_obj_exception_attr+0x74>)
    f552:	4293      	cmp	r3, r2
    f554:	d10b      	bne.n	f56e <mp_obj_exception_attr+0x6a>
    f556:	68bb      	ldr	r3, [r7, #8]
    f558:	f5b3 7fbd 	cmp.w	r3, #378	; 0x17a
    f55c:	d107      	bne.n	f56e <mp_obj_exception_attr+0x6a>
        dest[0] = mp_obj_exception_get_value(self_in);
    f55e:	68f8      	ldr	r0, [r7, #12]
    f560:	f7ff ffb8 	bl	f4d4 <mp_obj_exception_get_value>
    f564:	4602      	mov	r2, r0
    f566:	687b      	ldr	r3, [r7, #4]
    f568:	601a      	str	r2, [r3, #0]
    f56a:	e000      	b.n	f56e <mp_obj_exception_attr+0x6a>
        return;
    f56c:	bf00      	nop
    }
}
    f56e:	3718      	adds	r7, #24
    f570:	46bd      	mov	sp, r7
    f572:	bd80      	pop	{r7, pc}
    f574:	000234d4 	.word	0x000234d4
    f578:	00022334 	.word	0x00022334

0000f57c <mp_obj_new_exception>:
    MP_DEFINE_EXCEPTION(UnicodeWarning, Warning)
    MP_DEFINE_EXCEPTION(BytesWarning, Warning)
    MP_DEFINE_EXCEPTION(ResourceWarning, Warning)
    */

mp_obj_t mp_obj_new_exception(const mp_obj_type_t *exc_type) {
    f57c:	b580      	push	{r7, lr}
    f57e:	b082      	sub	sp, #8
    f580:	af00      	add	r7, sp, #0
    f582:	6078      	str	r0, [r7, #4]
    return mp_obj_new_exception_args(exc_type, 0, NULL);
    f584:	2200      	movs	r2, #0
    f586:	2100      	movs	r1, #0
    f588:	6878      	ldr	r0, [r7, #4]
    f58a:	f000 f815 	bl	f5b8 <mp_obj_new_exception_args>
    f58e:	4603      	mov	r3, r0
}
    f590:	4618      	mov	r0, r3
    f592:	3708      	adds	r7, #8
    f594:	46bd      	mov	sp, r7
    f596:	bd80      	pop	{r7, pc}

0000f598 <mp_obj_new_exception_arg1>:

// "Optimized" version for common(?) case of having 1 exception arg
mp_obj_t mp_obj_new_exception_arg1(const mp_obj_type_t *exc_type, mp_obj_t arg) {
    f598:	b580      	push	{r7, lr}
    f59a:	b082      	sub	sp, #8
    f59c:	af00      	add	r7, sp, #0
    f59e:	6078      	str	r0, [r7, #4]
    f5a0:	6039      	str	r1, [r7, #0]
    return mp_obj_new_exception_args(exc_type, 1, &arg);
    f5a2:	463b      	mov	r3, r7
    f5a4:	461a      	mov	r2, r3
    f5a6:	2101      	movs	r1, #1
    f5a8:	6878      	ldr	r0, [r7, #4]
    f5aa:	f000 f805 	bl	f5b8 <mp_obj_new_exception_args>
    f5ae:	4603      	mov	r3, r0
}
    f5b0:	4618      	mov	r0, r3
    f5b2:	3708      	adds	r7, #8
    f5b4:	46bd      	mov	sp, r7
    f5b6:	bd80      	pop	{r7, pc}

0000f5b8 <mp_obj_new_exception_args>:

mp_obj_t mp_obj_new_exception_args(const mp_obj_type_t *exc_type, size_t n_args, const mp_obj_t *args) {
    f5b8:	b590      	push	{r4, r7, lr}
    f5ba:	b085      	sub	sp, #20
    f5bc:	af00      	add	r7, sp, #0
    f5be:	60f8      	str	r0, [r7, #12]
    f5c0:	60b9      	str	r1, [r7, #8]
    f5c2:	607a      	str	r2, [r7, #4]
    assert(exc_type->make_new == mp_obj_exception_make_new);
    f5c4:	68fb      	ldr	r3, [r7, #12]
    f5c6:	68db      	ldr	r3, [r3, #12]
    f5c8:	4a0a      	ldr	r2, [pc, #40]	; (f5f4 <mp_obj_new_exception_args+0x3c>)
    f5ca:	4293      	cmp	r3, r2
    f5cc:	d006      	beq.n	f5dc <mp_obj_new_exception_args+0x24>
    f5ce:	4b0a      	ldr	r3, [pc, #40]	; (f5f8 <mp_obj_new_exception_args+0x40>)
    f5d0:	4a0a      	ldr	r2, [pc, #40]	; (f5fc <mp_obj_new_exception_args+0x44>)
    f5d2:	f240 1137 	movw	r1, #311	; 0x137
    f5d6:	480a      	ldr	r0, [pc, #40]	; (f600 <mp_obj_new_exception_args+0x48>)
    f5d8:	f00c f8d4 	bl	1b784 <__assert_func>
    return exc_type->make_new(exc_type, n_args, 0, args);
    f5dc:	68fb      	ldr	r3, [r7, #12]
    f5de:	68dc      	ldr	r4, [r3, #12]
    f5e0:	687b      	ldr	r3, [r7, #4]
    f5e2:	2200      	movs	r2, #0
    f5e4:	68b9      	ldr	r1, [r7, #8]
    f5e6:	68f8      	ldr	r0, [r7, #12]
    f5e8:	47a0      	blx	r4
    f5ea:	4603      	mov	r3, r0
}
    f5ec:	4618      	mov	r0, r3
    f5ee:	3714      	adds	r7, #20
    f5f0:	46bd      	mov	sp, r7
    f5f2:	bd90      	pop	{r4, r7, pc}
    f5f4:	0000f435 	.word	0x0000f435
    f5f8:	000227e4 	.word	0x000227e4
    f5fc:	00022860 	.word	0x00022860
    f600:	00022814 	.word	0x00022814

0000f604 <mp_obj_new_exception_msg>:

mp_obj_t mp_obj_new_exception_msg(const mp_obj_type_t *exc_type, const char *msg) {
    f604:	b580      	push	{r7, lr}
    f606:	b082      	sub	sp, #8
    f608:	af00      	add	r7, sp, #0
    f60a:	6078      	str	r0, [r7, #4]
    f60c:	6039      	str	r1, [r7, #0]
    return mp_obj_new_exception_msg_varg(exc_type, msg);
    f60e:	6839      	ldr	r1, [r7, #0]
    f610:	6878      	ldr	r0, [r7, #4]
    f612:	f000 f857 	bl	f6c4 <mp_obj_new_exception_msg_varg>
    f616:	4603      	mov	r3, r0
}
    f618:	4618      	mov	r0, r3
    f61a:	3708      	adds	r7, #8
    f61c:	46bd      	mov	sp, r7
    f61e:	bd80      	pop	{r7, pc}

0000f620 <exc_add_strn>:
    size_t alloc;
    size_t len;
    byte *buf;
};

STATIC void exc_add_strn(void *data, const char *str, size_t len) {
    f620:	b580      	push	{r7, lr}
    f622:	b088      	sub	sp, #32
    f624:	af00      	add	r7, sp, #0
    f626:	60f8      	str	r0, [r7, #12]
    f628:	60b9      	str	r1, [r7, #8]
    f62a:	607a      	str	r2, [r7, #4]
    struct _exc_printer_t *pr = data;
    f62c:	68fb      	ldr	r3, [r7, #12]
    f62e:	61fb      	str	r3, [r7, #28]
    if (pr->len + len >= pr->alloc) {
    f630:	69fb      	ldr	r3, [r7, #28]
    f632:	689a      	ldr	r2, [r3, #8]
    f634:	687b      	ldr	r3, [r7, #4]
    f636:	441a      	add	r2, r3
    f638:	69fb      	ldr	r3, [r7, #28]
    f63a:	685b      	ldr	r3, [r3, #4]
    f63c:	429a      	cmp	r2, r3
    f63e:	d32d      	bcc.n	f69c <exc_add_strn+0x7c>
        // Not enough room for data plus a null byte so try to grow the buffer
        if (pr->allow_realloc) {
    f640:	69fb      	ldr	r3, [r7, #28]
    f642:	781b      	ldrb	r3, [r3, #0]
    f644:	2b00      	cmp	r3, #0
    f646:	d022      	beq.n	f68e <exc_add_strn+0x6e>
            size_t new_alloc = pr->alloc + len + 16;
    f648:	69fb      	ldr	r3, [r7, #28]
    f64a:	685a      	ldr	r2, [r3, #4]
    f64c:	687b      	ldr	r3, [r7, #4]
    f64e:	4413      	add	r3, r2
    f650:	3310      	adds	r3, #16
    f652:	61bb      	str	r3, [r7, #24]
            byte *new_buf = m_renew_maybe(byte, pr->buf, pr->alloc, new_alloc, true);
    f654:	69fb      	ldr	r3, [r7, #28]
    f656:	68db      	ldr	r3, [r3, #12]
    f658:	2201      	movs	r2, #1
    f65a:	69b9      	ldr	r1, [r7, #24]
    f65c:	4618      	mov	r0, r3
    f65e:	f7f0 fec3 	bl	3e8 <m_realloc_maybe>
    f662:	6178      	str	r0, [r7, #20]
            if (new_buf == NULL) {
    f664:	697b      	ldr	r3, [r7, #20]
    f666:	2b00      	cmp	r3, #0
    f668:	d10a      	bne.n	f680 <exc_add_strn+0x60>
                pr->allow_realloc = false;
    f66a:	69fb      	ldr	r3, [r7, #28]
    f66c:	2200      	movs	r2, #0
    f66e:	701a      	strb	r2, [r3, #0]
                len = pr->alloc - pr->len - 1;
    f670:	69fb      	ldr	r3, [r7, #28]
    f672:	685a      	ldr	r2, [r3, #4]
    f674:	69fb      	ldr	r3, [r7, #28]
    f676:	689b      	ldr	r3, [r3, #8]
    f678:	1ad3      	subs	r3, r2, r3
    f67a:	3b01      	subs	r3, #1
    f67c:	607b      	str	r3, [r7, #4]
    f67e:	e00d      	b.n	f69c <exc_add_strn+0x7c>
            } else {
                pr->alloc = new_alloc;
    f680:	69fb      	ldr	r3, [r7, #28]
    f682:	69ba      	ldr	r2, [r7, #24]
    f684:	605a      	str	r2, [r3, #4]
                pr->buf = new_buf;
    f686:	69fb      	ldr	r3, [r7, #28]
    f688:	697a      	ldr	r2, [r7, #20]
    f68a:	60da      	str	r2, [r3, #12]
    f68c:	e006      	b.n	f69c <exc_add_strn+0x7c>
            }
        } else {
            len = pr->alloc - pr->len - 1;
    f68e:	69fb      	ldr	r3, [r7, #28]
    f690:	685a      	ldr	r2, [r3, #4]
    f692:	69fb      	ldr	r3, [r7, #28]
    f694:	689b      	ldr	r3, [r3, #8]
    f696:	1ad3      	subs	r3, r2, r3
    f698:	3b01      	subs	r3, #1
    f69a:	607b      	str	r3, [r7, #4]
        }
    }
    memcpy(pr->buf + pr->len, str, len);
    f69c:	69fb      	ldr	r3, [r7, #28]
    f69e:	68da      	ldr	r2, [r3, #12]
    f6a0:	69fb      	ldr	r3, [r7, #28]
    f6a2:	689b      	ldr	r3, [r3, #8]
    f6a4:	4413      	add	r3, r2
    f6a6:	687a      	ldr	r2, [r7, #4]
    f6a8:	68b9      	ldr	r1, [r7, #8]
    f6aa:	4618      	mov	r0, r3
    f6ac:	f00d fb70 	bl	1cd90 <memcpy>
    pr->len += len;
    f6b0:	69fb      	ldr	r3, [r7, #28]
    f6b2:	689a      	ldr	r2, [r3, #8]
    f6b4:	687b      	ldr	r3, [r7, #4]
    f6b6:	441a      	add	r2, r3
    f6b8:	69fb      	ldr	r3, [r7, #28]
    f6ba:	609a      	str	r2, [r3, #8]
}
    f6bc:	bf00      	nop
    f6be:	3720      	adds	r7, #32
    f6c0:	46bd      	mov	sp, r7
    f6c2:	bd80      	pop	{r7, pc}

0000f6c4 <mp_obj_new_exception_msg_varg>:

mp_obj_t mp_obj_new_exception_msg_varg(const mp_obj_type_t *exc_type, const char *fmt, ...) {
    f6c4:	b40e      	push	{r1, r2, r3}
    f6c6:	b580      	push	{r7, lr}
    f6c8:	b08f      	sub	sp, #60	; 0x3c
    f6ca:	af00      	add	r7, sp, #0
    f6cc:	6078      	str	r0, [r7, #4]
    assert(fmt != NULL);
    f6ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f6d0:	2b00      	cmp	r3, #0
    f6d2:	d106      	bne.n	f6e2 <mp_obj_new_exception_msg_varg+0x1e>
    f6d4:	4b43      	ldr	r3, [pc, #268]	; (f7e4 <mp_obj_new_exception_msg_varg+0x120>)
    f6d6:	4a44      	ldr	r2, [pc, #272]	; (f7e8 <mp_obj_new_exception_msg_varg+0x124>)
    f6d8:	f240 1161 	movw	r1, #353	; 0x161
    f6dc:	4843      	ldr	r0, [pc, #268]	; (f7ec <mp_obj_new_exception_msg_varg+0x128>)
    f6de:	f00c f851 	bl	1b784 <__assert_func>

    // Check that the given type is an exception type
    assert(exc_type->make_new == mp_obj_exception_make_new);
    f6e2:	687b      	ldr	r3, [r7, #4]
    f6e4:	68db      	ldr	r3, [r3, #12]
    f6e6:	4a42      	ldr	r2, [pc, #264]	; (f7f0 <mp_obj_new_exception_msg_varg+0x12c>)
    f6e8:	4293      	cmp	r3, r2
    f6ea:	d006      	beq.n	f6fa <mp_obj_new_exception_msg_varg+0x36>
    f6ec:	4b41      	ldr	r3, [pc, #260]	; (f7f4 <mp_obj_new_exception_msg_varg+0x130>)
    f6ee:	4a3e      	ldr	r2, [pc, #248]	; (f7e8 <mp_obj_new_exception_msg_varg+0x124>)
    f6f0:	f44f 71b2 	mov.w	r1, #356	; 0x164
    f6f4:	483d      	ldr	r0, [pc, #244]	; (f7ec <mp_obj_new_exception_msg_varg+0x128>)
    f6f6:	f00c f845 	bl	1b784 <__assert_func>

    // Try to allocate memory for the message
    mp_obj_str_t *o_str = m_new_obj_maybe(mp_obj_str_t);
    f6fa:	2010      	movs	r0, #16
    f6fc:	f7f0 fe26 	bl	34c <m_malloc_maybe>
    f700:	6378      	str	r0, [r7, #52]	; 0x34
    size_t o_str_alloc = strlen(fmt) + 1;
    f702:	6c78      	ldr	r0, [r7, #68]	; 0x44
    f704:	f00d fc7e 	bl	1d004 <strlen>
    f708:	4603      	mov	r3, r0
    f70a:	3301      	adds	r3, #1
    f70c:	633b      	str	r3, [r7, #48]	; 0x30
    byte *o_str_buf = m_new_maybe(byte, o_str_alloc);
    f70e:	6b38      	ldr	r0, [r7, #48]	; 0x30
    f710:	f7f0 fe1c 	bl	34c <m_malloc_maybe>
    f714:	62f8      	str	r0, [r7, #44]	; 0x2c

    bool used_emg_buf = false;
    f716:	2300      	movs	r3, #0
    f718:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        o_str_alloc = (uint8_t*)MP_STATE_VM(mp_emergency_exception_buf)
            + mp_emergency_exception_buf_size - o_str_buf;
    }
    #endif

    if (o_str == NULL) {
    f71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f71e:	2b00      	cmp	r3, #0
    f720:	d107      	bne.n	f732 <mp_obj_new_exception_msg_varg+0x6e>
        // No memory for the string object so create the exception with no args
        return mp_obj_exception_make_new(exc_type, 0, 0, NULL);
    f722:	2300      	movs	r3, #0
    f724:	2200      	movs	r2, #0
    f726:	2100      	movs	r1, #0
    f728:	6878      	ldr	r0, [r7, #4]
    f72a:	f7ff fe83 	bl	f434 <mp_obj_exception_make_new>
    f72e:	4603      	mov	r3, r0
    f730:	e050      	b.n	f7d4 <mp_obj_new_exception_msg_varg+0x110>
    }

    if (o_str_buf == NULL) {
    f732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f734:	2b00      	cmp	r3, #0
    f736:	d107      	bne.n	f748 <mp_obj_new_exception_msg_varg+0x84>
        // No memory for the string buffer: assume that the fmt string is in ROM
        // and use that data as the data of the string
        o_str->len = o_str_alloc - 1; // will be equal to strlen(fmt)
    f738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f73a:	1e5a      	subs	r2, r3, #1
    f73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f73e:	609a      	str	r2, [r3, #8]
        o_str->data = (const byte*)fmt;
    f740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    f744:	60da      	str	r2, [r3, #12]
    f746:	e02d      	b.n	f7a4 <mp_obj_new_exception_msg_varg+0xe0>
    } else {
        // We have some memory to format the string
        struct _exc_printer_t exc_pr = {!used_emg_buf, o_str_alloc, 0, o_str_buf};
    f748:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    f74c:	2b00      	cmp	r3, #0
    f74e:	bf14      	ite	ne
    f750:	2301      	movne	r3, #1
    f752:	2300      	moveq	r3, #0
    f754:	b2db      	uxtb	r3, r3
    f756:	f083 0301 	eor.w	r3, r3, #1
    f75a:	b2db      	uxtb	r3, r3
    f75c:	f003 0301 	and.w	r3, r3, #1
    f760:	b2db      	uxtb	r3, r3
    f762:	753b      	strb	r3, [r7, #20]
    f764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f766:	61bb      	str	r3, [r7, #24]
    f768:	2300      	movs	r3, #0
    f76a:	61fb      	str	r3, [r7, #28]
    f76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f76e:	623b      	str	r3, [r7, #32]
        mp_print_t print = {&exc_pr, exc_add_strn};
    f770:	f107 0314 	add.w	r3, r7, #20
    f774:	60fb      	str	r3, [r7, #12]
    f776:	4b20      	ldr	r3, [pc, #128]	; (f7f8 <mp_obj_new_exception_msg_varg+0x134>)
    f778:	613b      	str	r3, [r7, #16]
        va_list ap;
        va_start(ap, fmt);
    f77a:	f107 0348 	add.w	r3, r7, #72	; 0x48
    f77e:	60bb      	str	r3, [r7, #8]
        mp_vprintf(&print, fmt, ap);
    f780:	f107 030c 	add.w	r3, r7, #12
    f784:	68ba      	ldr	r2, [r7, #8]
    f786:	6c79      	ldr	r1, [r7, #68]	; 0x44
    f788:	4618      	mov	r0, r3
    f78a:	f7f2 fc6b 	bl	2064 <mp_vprintf>
        va_end(ap);
        exc_pr.buf[exc_pr.len] = '\0';
    f78e:	6a3a      	ldr	r2, [r7, #32]
    f790:	69fb      	ldr	r3, [r7, #28]
    f792:	4413      	add	r3, r2
    f794:	2200      	movs	r2, #0
    f796:	701a      	strb	r2, [r3, #0]
        o_str->len = exc_pr.len;
    f798:	69fa      	ldr	r2, [r7, #28]
    f79a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f79c:	609a      	str	r2, [r3, #8]
        o_str->data = exc_pr.buf;
    f79e:	6a3a      	ldr	r2, [r7, #32]
    f7a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f7a2:	60da      	str	r2, [r3, #12]
    }

    // Create the string object and call mp_obj_exception_make_new to create the exception
    o_str->base.type = &mp_type_str;
    f7a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f7a6:	4a15      	ldr	r2, [pc, #84]	; (f7fc <mp_obj_new_exception_msg_varg+0x138>)
    f7a8:	601a      	str	r2, [r3, #0]
    o_str->hash = qstr_compute_hash(o_str->data, o_str->len);
    f7aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f7ac:	68da      	ldr	r2, [r3, #12]
    f7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f7b0:	689b      	ldr	r3, [r3, #8]
    f7b2:	4619      	mov	r1, r3
    f7b4:	4610      	mov	r0, r2
    f7b6:	f7f1 fbf7 	bl	fa8 <qstr_compute_hash>
    f7ba:	4602      	mov	r2, r0
    f7bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f7be:	605a      	str	r2, [r3, #4]
    mp_obj_t arg = MP_OBJ_FROM_PTR(o_str);
    f7c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f7c2:	627b      	str	r3, [r7, #36]	; 0x24
    return mp_obj_exception_make_new(exc_type, 1, 0, &arg);
    f7c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
    f7c8:	2200      	movs	r2, #0
    f7ca:	2101      	movs	r1, #1
    f7cc:	6878      	ldr	r0, [r7, #4]
    f7ce:	f7ff fe31 	bl	f434 <mp_obj_exception_make_new>
    f7d2:	4603      	mov	r3, r0
}
    f7d4:	4618      	mov	r0, r3
    f7d6:	373c      	adds	r7, #60	; 0x3c
    f7d8:	46bd      	mov	sp, r7
    f7da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    f7de:	b003      	add	sp, #12
    f7e0:	4770      	bx	lr
    f7e2:	bf00      	nop
    f7e4:	0002282c 	.word	0x0002282c
    f7e8:	0002287c 	.word	0x0002287c
    f7ec:	00022814 	.word	0x00022814
    f7f0:	0000f435 	.word	0x0000f435
    f7f4:	000227e4 	.word	0x000227e4
    f7f8:	0000f621 	.word	0x0000f621
    f7fc:	00023b68 	.word	0x00023b68

0000f800 <mp_obj_is_exception_type>:

// return true if the given object is an exception type
bool mp_obj_is_exception_type(mp_obj_t self_in) {
    f800:	b580      	push	{r7, lr}
    f802:	b084      	sub	sp, #16
    f804:	af00      	add	r7, sp, #0
    f806:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_TYPE(self_in, &mp_type_type)) {
    f808:	6878      	ldr	r0, [r7, #4]
    f80a:	f7ff fd83 	bl	f314 <MP_OBJ_IS_OBJ>
    f80e:	4603      	mov	r3, r0
    f810:	2b00      	cmp	r3, #0
    f812:	d00d      	beq.n	f830 <mp_obj_is_exception_type+0x30>
    f814:	687b      	ldr	r3, [r7, #4]
    f816:	681b      	ldr	r3, [r3, #0]
    f818:	4a0a      	ldr	r2, [pc, #40]	; (f844 <mp_obj_is_exception_type+0x44>)
    f81a:	4293      	cmp	r3, r2
    f81c:	d108      	bne.n	f830 <mp_obj_is_exception_type+0x30>
        // optimisation when self_in is a builtin exception
        mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
    f81e:	687b      	ldr	r3, [r7, #4]
    f820:	60fb      	str	r3, [r7, #12]
        if (self->make_new == mp_obj_exception_make_new) {
    f822:	68fb      	ldr	r3, [r7, #12]
    f824:	68db      	ldr	r3, [r3, #12]
    f826:	4a08      	ldr	r2, [pc, #32]	; (f848 <mp_obj_is_exception_type+0x48>)
    f828:	4293      	cmp	r3, r2
    f82a:	d101      	bne.n	f830 <mp_obj_is_exception_type+0x30>
            return true;
    f82c:	2301      	movs	r3, #1
    f82e:	e004      	b.n	f83a <mp_obj_is_exception_type+0x3a>
        }
    }
    return mp_obj_is_subclass_fast(self_in, MP_OBJ_FROM_PTR(&mp_type_BaseException));
    f830:	4906      	ldr	r1, [pc, #24]	; (f84c <mp_obj_is_exception_type+0x4c>)
    f832:	6878      	ldr	r0, [r7, #4]
    f834:	f007 fe68 	bl	17508 <mp_obj_is_subclass_fast>
    f838:	4603      	mov	r3, r0
}
    f83a:	4618      	mov	r0, r3
    f83c:	3710      	adds	r7, #16
    f83e:	46bd      	mov	sp, r7
    f840:	bd80      	pop	{r7, pc}
    f842:	bf00      	nop
    f844:	000240e4 	.word	0x000240e4
    f848:	0000f435 	.word	0x0000f435
    f84c:	00022208 	.word	0x00022208

0000f850 <mp_obj_is_exception_instance>:

// return true if the given object is an instance of an exception type
bool mp_obj_is_exception_instance(mp_obj_t self_in) {
    f850:	b580      	push	{r7, lr}
    f852:	b082      	sub	sp, #8
    f854:	af00      	add	r7, sp, #0
    f856:	6078      	str	r0, [r7, #4]
    return mp_obj_is_exception_type(MP_OBJ_FROM_PTR(mp_obj_get_type(self_in)));
    f858:	6878      	ldr	r0, [r7, #4]
    f85a:	f7fe f81b 	bl	d894 <mp_obj_get_type>
    f85e:	4603      	mov	r3, r0
    f860:	4618      	mov	r0, r3
    f862:	f7ff ffcd 	bl	f800 <mp_obj_is_exception_type>
    f866:	4603      	mov	r3, r0
}
    f868:	4618      	mov	r0, r3
    f86a:	3708      	adds	r7, #8
    f86c:	46bd      	mov	sp, r7
    f86e:	bd80      	pop	{r7, pc}

0000f870 <mp_obj_exception_match>:

// Return true if exception (type or instance) is a subclass of given
// exception type.  Assumes exc_type is a subclass of BaseException, as
// defined by mp_obj_is_exception_type(exc_type).
bool mp_obj_exception_match(mp_obj_t exc, mp_const_obj_t exc_type) {
    f870:	b580      	push	{r7, lr}
    f872:	b082      	sub	sp, #8
    f874:	af00      	add	r7, sp, #0
    f876:	6078      	str	r0, [r7, #4]
    f878:	6039      	str	r1, [r7, #0]
    // if exc is an instance of an exception, then extract and use its type
    if (mp_obj_is_exception_instance(exc)) {
    f87a:	6878      	ldr	r0, [r7, #4]
    f87c:	f7ff ffe8 	bl	f850 <mp_obj_is_exception_instance>
    f880:	4603      	mov	r3, r0
    f882:	2b00      	cmp	r3, #0
    f884:	d003      	beq.n	f88e <mp_obj_exception_match+0x1e>
        exc = MP_OBJ_FROM_PTR(mp_obj_get_type(exc));
    f886:	6878      	ldr	r0, [r7, #4]
    f888:	f7fe f804 	bl	d894 <mp_obj_get_type>
    f88c:	6078      	str	r0, [r7, #4]
    }
    return mp_obj_is_subclass_fast(exc, exc_type);
    f88e:	6839      	ldr	r1, [r7, #0]
    f890:	6878      	ldr	r0, [r7, #4]
    f892:	f007 fe39 	bl	17508 <mp_obj_is_subclass_fast>
    f896:	4603      	mov	r3, r0
}
    f898:	4618      	mov	r0, r3
    f89a:	3708      	adds	r7, #8
    f89c:	46bd      	mov	sp, r7
    f89e:	bd80      	pop	{r7, pc}

0000f8a0 <mp_obj_exception_clear_traceback>:
        self = MP_OBJ_TO_PTR(self_in); \
    } else { \
        self = MP_OBJ_TO_PTR(((mp_obj_instance_t*)MP_OBJ_TO_PTR(self_in))->subobj[0]); \
    }

void mp_obj_exception_clear_traceback(mp_obj_t self_in) {
    f8a0:	b580      	push	{r7, lr}
    f8a2:	b084      	sub	sp, #16
    f8a4:	af00      	add	r7, sp, #0
    f8a6:	6078      	str	r0, [r7, #4]
    GET_NATIVE_EXCEPTION(self, self_in);
    f8a8:	6878      	ldr	r0, [r7, #4]
    f8aa:	f7ff ffd1 	bl	f850 <mp_obj_is_exception_instance>
    f8ae:	4603      	mov	r3, r0
    f8b0:	2b00      	cmp	r3, #0
    f8b2:	d106      	bne.n	f8c2 <mp_obj_exception_clear_traceback+0x22>
    f8b4:	4b0d      	ldr	r3, [pc, #52]	; (f8ec <mp_obj_exception_clear_traceback+0x4c>)
    f8b6:	4a0e      	ldr	r2, [pc, #56]	; (f8f0 <mp_obj_exception_clear_traceback+0x50>)
    f8b8:	f240 11c3 	movw	r1, #451	; 0x1c3
    f8bc:	480d      	ldr	r0, [pc, #52]	; (f8f4 <mp_obj_exception_clear_traceback+0x54>)
    f8be:	f00b ff61 	bl	1b784 <__assert_func>
    f8c2:	6878      	ldr	r0, [r7, #4]
    f8c4:	f7fd ffe6 	bl	d894 <mp_obj_get_type>
    f8c8:	4603      	mov	r3, r0
    f8ca:	68db      	ldr	r3, [r3, #12]
    f8cc:	4a0a      	ldr	r2, [pc, #40]	; (f8f8 <mp_obj_exception_clear_traceback+0x58>)
    f8ce:	4293      	cmp	r3, r2
    f8d0:	d102      	bne.n	f8d8 <mp_obj_exception_clear_traceback+0x38>
    f8d2:	687b      	ldr	r3, [r7, #4]
    f8d4:	60fb      	str	r3, [r7, #12]
    f8d6:	e002      	b.n	f8de <mp_obj_exception_clear_traceback+0x3e>
    f8d8:	687b      	ldr	r3, [r7, #4]
    f8da:	691b      	ldr	r3, [r3, #16]
    f8dc:	60fb      	str	r3, [r7, #12]
    // just set the traceback to the null object
    // we don't want to call any memory management functions here
    self->traceback_data = NULL;
    f8de:	68fb      	ldr	r3, [r7, #12]
    f8e0:	2200      	movs	r2, #0
    f8e2:	609a      	str	r2, [r3, #8]
}
    f8e4:	bf00      	nop
    f8e6:	3710      	adds	r7, #16
    f8e8:	46bd      	mov	sp, r7
    f8ea:	bd80      	pop	{r7, pc}
    f8ec:	00022838 	.word	0x00022838
    f8f0:	0002289c 	.word	0x0002289c
    f8f4:	00022814 	.word	0x00022814
    f8f8:	0000f435 	.word	0x0000f435

0000f8fc <mp_obj_exception_add_traceback>:

void mp_obj_exception_add_traceback(mp_obj_t self_in, qstr file, size_t line, qstr block) {
    f8fc:	b580      	push	{r7, lr}
    f8fe:	b088      	sub	sp, #32
    f900:	af00      	add	r7, sp, #0
    f902:	60f8      	str	r0, [r7, #12]
    f904:	60b9      	str	r1, [r7, #8]
    f906:	607a      	str	r2, [r7, #4]
    f908:	603b      	str	r3, [r7, #0]
    GET_NATIVE_EXCEPTION(self, self_in);
    f90a:	68f8      	ldr	r0, [r7, #12]
    f90c:	f7ff ffa0 	bl	f850 <mp_obj_is_exception_instance>
    f910:	4603      	mov	r3, r0
    f912:	2b00      	cmp	r3, #0
    f914:	d106      	bne.n	f924 <mp_obj_exception_add_traceback+0x28>
    f916:	4b33      	ldr	r3, [pc, #204]	; (f9e4 <mp_obj_exception_add_traceback+0xe8>)
    f918:	4a33      	ldr	r2, [pc, #204]	; (f9e8 <mp_obj_exception_add_traceback+0xec>)
    f91a:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
    f91e:	4833      	ldr	r0, [pc, #204]	; (f9ec <mp_obj_exception_add_traceback+0xf0>)
    f920:	f00b ff30 	bl	1b784 <__assert_func>
    f924:	68f8      	ldr	r0, [r7, #12]
    f926:	f7fd ffb5 	bl	d894 <mp_obj_get_type>
    f92a:	4603      	mov	r3, r0
    f92c:	68db      	ldr	r3, [r3, #12]
    f92e:	4a30      	ldr	r2, [pc, #192]	; (f9f0 <mp_obj_exception_add_traceback+0xf4>)
    f930:	4293      	cmp	r3, r2
    f932:	d102      	bne.n	f93a <mp_obj_exception_add_traceback+0x3e>
    f934:	68fb      	ldr	r3, [r7, #12]
    f936:	61fb      	str	r3, [r7, #28]
    f938:	e002      	b.n	f940 <mp_obj_exception_add_traceback+0x44>
    f93a:	68fb      	ldr	r3, [r7, #12]
    f93c:	691b      	ldr	r3, [r3, #16]
    f93e:	61fb      	str	r3, [r7, #28]

    // append this traceback info to traceback data
    // if memory allocation fails (eg because gc is locked), just return

    if (self->traceback_data == NULL) {
    f940:	69fb      	ldr	r3, [r7, #28]
    f942:	689b      	ldr	r3, [r3, #8]
    f944:	2b00      	cmp	r3, #0
    f946:	d110      	bne.n	f96a <mp_obj_exception_add_traceback+0x6e>
        self->traceback_data = m_new_maybe(size_t, TRACEBACK_ENTRY_LEN);
    f948:	200c      	movs	r0, #12
    f94a:	f7f0 fcff 	bl	34c <m_malloc_maybe>
    f94e:	4602      	mov	r2, r0
    f950:	69fb      	ldr	r3, [r7, #28]
    f952:	609a      	str	r2, [r3, #8]
        if (self->traceback_data == NULL) {
    f954:	69fb      	ldr	r3, [r7, #28]
    f956:	689b      	ldr	r3, [r3, #8]
    f958:	2b00      	cmp	r3, #0
    f95a:	d03d      	beq.n	f9d8 <mp_obj_exception_add_traceback+0xdc>
            // Can't allocate
            return;
            #endif
        } else {
            // Allocated the traceback data on the heap
            self->traceback_alloc = TRACEBACK_ENTRY_LEN;
    f95c:	69fb      	ldr	r3, [r7, #28]
    f95e:	2203      	movs	r2, #3
    f960:	809a      	strh	r2, [r3, #4]
        }
        self->traceback_len = 0;
    f962:	69fb      	ldr	r3, [r7, #28]
    f964:	2200      	movs	r2, #0
    f966:	80da      	strh	r2, [r3, #6]
    f968:	e01d      	b.n	f9a6 <mp_obj_exception_add_traceback+0xaa>
    } else if (self->traceback_len + TRACEBACK_ENTRY_LEN > self->traceback_alloc) {
    f96a:	69fb      	ldr	r3, [r7, #28]
    f96c:	88db      	ldrh	r3, [r3, #6]
    f96e:	3303      	adds	r3, #3
    f970:	69fa      	ldr	r2, [r7, #28]
    f972:	8892      	ldrh	r2, [r2, #4]
    f974:	4293      	cmp	r3, r2
    f976:	dd16      	ble.n	f9a6 <mp_obj_exception_add_traceback+0xaa>
            // Can't resize the emergency buffer
            return;
        }
        #endif
        // be conservative with growing traceback data
        size_t *tb_data = m_renew_maybe(size_t, self->traceback_data, self->traceback_alloc,
    f978:	69fb      	ldr	r3, [r7, #28]
    f97a:	6898      	ldr	r0, [r3, #8]
    f97c:	69fb      	ldr	r3, [r7, #28]
    f97e:	889b      	ldrh	r3, [r3, #4]
    f980:	3303      	adds	r3, #3
    f982:	009b      	lsls	r3, r3, #2
    f984:	2201      	movs	r2, #1
    f986:	4619      	mov	r1, r3
    f988:	f7f0 fd2e 	bl	3e8 <m_realloc_maybe>
    f98c:	61b8      	str	r0, [r7, #24]
            self->traceback_alloc + TRACEBACK_ENTRY_LEN, true);
        if (tb_data == NULL) {
    f98e:	69bb      	ldr	r3, [r7, #24]
    f990:	2b00      	cmp	r3, #0
    f992:	d023      	beq.n	f9dc <mp_obj_exception_add_traceback+0xe0>
            return;
        }
        self->traceback_data = tb_data;
    f994:	69fb      	ldr	r3, [r7, #28]
    f996:	69ba      	ldr	r2, [r7, #24]
    f998:	609a      	str	r2, [r3, #8]
        self->traceback_alloc += TRACEBACK_ENTRY_LEN;
    f99a:	69fb      	ldr	r3, [r7, #28]
    f99c:	889b      	ldrh	r3, [r3, #4]
    f99e:	3303      	adds	r3, #3
    f9a0:	b29a      	uxth	r2, r3
    f9a2:	69fb      	ldr	r3, [r7, #28]
    f9a4:	809a      	strh	r2, [r3, #4]
    }

    size_t *tb_data = &self->traceback_data[self->traceback_len];
    f9a6:	69fb      	ldr	r3, [r7, #28]
    f9a8:	689a      	ldr	r2, [r3, #8]
    f9aa:	69fb      	ldr	r3, [r7, #28]
    f9ac:	88db      	ldrh	r3, [r3, #6]
    f9ae:	009b      	lsls	r3, r3, #2
    f9b0:	4413      	add	r3, r2
    f9b2:	617b      	str	r3, [r7, #20]
    self->traceback_len += TRACEBACK_ENTRY_LEN;
    f9b4:	69fb      	ldr	r3, [r7, #28]
    f9b6:	88db      	ldrh	r3, [r3, #6]
    f9b8:	3303      	adds	r3, #3
    f9ba:	b29a      	uxth	r2, r3
    f9bc:	69fb      	ldr	r3, [r7, #28]
    f9be:	80da      	strh	r2, [r3, #6]
    tb_data[0] = file;
    f9c0:	697b      	ldr	r3, [r7, #20]
    f9c2:	68ba      	ldr	r2, [r7, #8]
    f9c4:	601a      	str	r2, [r3, #0]
    tb_data[1] = line;
    f9c6:	697b      	ldr	r3, [r7, #20]
    f9c8:	3304      	adds	r3, #4
    f9ca:	687a      	ldr	r2, [r7, #4]
    f9cc:	601a      	str	r2, [r3, #0]
    tb_data[2] = block;
    f9ce:	697b      	ldr	r3, [r7, #20]
    f9d0:	3308      	adds	r3, #8
    f9d2:	683a      	ldr	r2, [r7, #0]
    f9d4:	601a      	str	r2, [r3, #0]
    f9d6:	e002      	b.n	f9de <mp_obj_exception_add_traceback+0xe2>
            return;
    f9d8:	bf00      	nop
    f9da:	e000      	b.n	f9de <mp_obj_exception_add_traceback+0xe2>
            return;
    f9dc:	bf00      	nop
}
    f9de:	3720      	adds	r7, #32
    f9e0:	46bd      	mov	sp, r7
    f9e2:	bd80      	pop	{r7, pc}
    f9e4:	00022838 	.word	0x00022838
    f9e8:	000228c0 	.word	0x000228c0
    f9ec:	00022814 	.word	0x00022814
    f9f0:	0000f435 	.word	0x0000f435

0000f9f4 <mp_obj_exception_get_traceback>:

void mp_obj_exception_get_traceback(mp_obj_t self_in, size_t *n, size_t **values) {
    f9f4:	b580      	push	{r7, lr}
    f9f6:	b086      	sub	sp, #24
    f9f8:	af00      	add	r7, sp, #0
    f9fa:	60f8      	str	r0, [r7, #12]
    f9fc:	60b9      	str	r1, [r7, #8]
    f9fe:	607a      	str	r2, [r7, #4]
    GET_NATIVE_EXCEPTION(self, self_in);
    fa00:	68f8      	ldr	r0, [r7, #12]
    fa02:	f7ff ff25 	bl	f850 <mp_obj_is_exception_instance>
    fa06:	4603      	mov	r3, r0
    fa08:	2b00      	cmp	r3, #0
    fa0a:	d106      	bne.n	fa1a <mp_obj_exception_get_traceback+0x26>
    fa0c:	4b16      	ldr	r3, [pc, #88]	; (fa68 <mp_obj_exception_get_traceback+0x74>)
    fa0e:	4a17      	ldr	r2, [pc, #92]	; (fa6c <mp_obj_exception_get_traceback+0x78>)
    fa10:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
    fa14:	4816      	ldr	r0, [pc, #88]	; (fa70 <mp_obj_exception_get_traceback+0x7c>)
    fa16:	f00b feb5 	bl	1b784 <__assert_func>
    fa1a:	68f8      	ldr	r0, [r7, #12]
    fa1c:	f7fd ff3a 	bl	d894 <mp_obj_get_type>
    fa20:	4603      	mov	r3, r0
    fa22:	68db      	ldr	r3, [r3, #12]
    fa24:	4a13      	ldr	r2, [pc, #76]	; (fa74 <mp_obj_exception_get_traceback+0x80>)
    fa26:	4293      	cmp	r3, r2
    fa28:	d102      	bne.n	fa30 <mp_obj_exception_get_traceback+0x3c>
    fa2a:	68fb      	ldr	r3, [r7, #12]
    fa2c:	617b      	str	r3, [r7, #20]
    fa2e:	e002      	b.n	fa36 <mp_obj_exception_get_traceback+0x42>
    fa30:	68fb      	ldr	r3, [r7, #12]
    fa32:	691b      	ldr	r3, [r3, #16]
    fa34:	617b      	str	r3, [r7, #20]

    if (self->traceback_data == NULL) {
    fa36:	697b      	ldr	r3, [r7, #20]
    fa38:	689b      	ldr	r3, [r3, #8]
    fa3a:	2b00      	cmp	r3, #0
    fa3c:	d106      	bne.n	fa4c <mp_obj_exception_get_traceback+0x58>
        *n = 0;
    fa3e:	68bb      	ldr	r3, [r7, #8]
    fa40:	2200      	movs	r2, #0
    fa42:	601a      	str	r2, [r3, #0]
        *values = NULL;
    fa44:	687b      	ldr	r3, [r7, #4]
    fa46:	2200      	movs	r2, #0
    fa48:	601a      	str	r2, [r3, #0]
    } else {
        *n = self->traceback_len;
        *values = self->traceback_data;
    }
}
    fa4a:	e008      	b.n	fa5e <mp_obj_exception_get_traceback+0x6a>
        *n = self->traceback_len;
    fa4c:	697b      	ldr	r3, [r7, #20]
    fa4e:	88db      	ldrh	r3, [r3, #6]
    fa50:	461a      	mov	r2, r3
    fa52:	68bb      	ldr	r3, [r7, #8]
    fa54:	601a      	str	r2, [r3, #0]
        *values = self->traceback_data;
    fa56:	697b      	ldr	r3, [r7, #20]
    fa58:	689a      	ldr	r2, [r3, #8]
    fa5a:	687b      	ldr	r3, [r7, #4]
    fa5c:	601a      	str	r2, [r3, #0]
}
    fa5e:	bf00      	nop
    fa60:	3718      	adds	r7, #24
    fa62:	46bd      	mov	sp, r7
    fa64:	bd80      	pop	{r7, pc}
    fa66:	bf00      	nop
    fa68:	00022838 	.word	0x00022838
    fa6c:	000228e0 	.word	0x000228e0
    fa70:	00022814 	.word	0x00022814
    fa74:	0000f435 	.word	0x0000f435

0000fa78 <MP_OBJ_IS_OBJ>:
    fa78:	b480      	push	{r7}
    fa7a:	b083      	sub	sp, #12
    fa7c:	af00      	add	r7, sp, #0
    fa7e:	6078      	str	r0, [r7, #4]
    fa80:	687b      	ldr	r3, [r7, #4]
    fa82:	f003 0303 	and.w	r3, r3, #3
    fa86:	2b00      	cmp	r3, #0
    fa88:	bf0c      	ite	eq
    fa8a:	2301      	moveq	r3, #1
    fa8c:	2300      	movne	r3, #0
    fa8e:	b2db      	uxtb	r3, r3
    fa90:	4618      	mov	r0, r3
    fa92:	370c      	adds	r7, #12
    fa94:	46bd      	mov	sp, r7
    fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
    fa9a:	4770      	bx	lr

0000fa9c <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
    fa9c:	b580      	push	{r7, lr}
    fa9e:	b084      	sub	sp, #16
    faa0:	af00      	add	r7, sp, #0
    faa2:	60f8      	str	r0, [r7, #12]
    faa4:	60b9      	str	r1, [r7, #8]
    faa6:	607a      	str	r2, [r7, #4]
    faa8:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
    faaa:	687b      	ldr	r3, [r7, #4]
    faac:	045a      	lsls	r2, r3, #17
    faae:	683b      	ldr	r3, [r7, #0]
    fab0:	005b      	lsls	r3, r3, #1
    fab2:	431a      	orrs	r2, r3
    fab4:	7e3b      	ldrb	r3, [r7, #24]
    fab6:	2b00      	cmp	r3, #0
    fab8:	d001      	beq.n	fabe <mp_arg_check_num+0x22>
    faba:	2301      	movs	r3, #1
    fabc:	e000      	b.n	fac0 <mp_arg_check_num+0x24>
    fabe:	2300      	movs	r3, #0
    fac0:	4313      	orrs	r3, r2
    fac2:	461a      	mov	r2, r3
    fac4:	68b9      	ldr	r1, [r7, #8]
    fac6:	68f8      	ldr	r0, [r7, #12]
    fac8:	f7fd fae2 	bl	d090 <mp_arg_check_num_sig>
}
    facc:	bf00      	nop
    face:	3710      	adds	r7, #16
    fad0:	46bd      	mov	sp, r7
    fad2:	bd80      	pop	{r7, pc}

0000fad4 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    fad4:	b480      	push	{r7}
    fad6:	af00      	add	r7, sp, #0
    fad8:	4b03      	ldr	r3, [pc, #12]	; (fae8 <mp_globals_get+0x14>)
    fada:	689b      	ldr	r3, [r3, #8]
    fadc:	4618      	mov	r0, r3
    fade:	46bd      	mov	sp, r7
    fae0:	f85d 7b04 	ldr.w	r7, [sp], #4
    fae4:	4770      	bx	lr
    fae6:	bf00      	nop
    fae8:	200012f0 	.word	0x200012f0

0000faec <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    faec:	b480      	push	{r7}
    faee:	b083      	sub	sp, #12
    faf0:	af00      	add	r7, sp, #0
    faf2:	6078      	str	r0, [r7, #4]
    faf4:	4a04      	ldr	r2, [pc, #16]	; (fb08 <mp_globals_set+0x1c>)
    faf6:	687b      	ldr	r3, [r7, #4]
    faf8:	6093      	str	r3, [r2, #8]
    fafa:	bf00      	nop
    fafc:	370c      	adds	r7, #12
    fafe:	46bd      	mov	sp, r7
    fb00:	f85d 7b04 	ldr.w	r7, [sp], #4
    fb04:	4770      	bx	lr
    fb06:	bf00      	nop
    fb08:	200012f0 	.word	0x200012f0

0000fb0c <fun_builtin_0_call>:
// function type.

/******************************************************************************/
/* builtin functions                                                          */

STATIC mp_obj_t fun_builtin_0_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fb0c:	b580      	push	{r7, lr}
    fb0e:	b088      	sub	sp, #32
    fb10:	af02      	add	r7, sp, #8
    fb12:	60f8      	str	r0, [r7, #12]
    fb14:	60b9      	str	r1, [r7, #8]
    fb16:	607a      	str	r2, [r7, #4]
    fb18:	603b      	str	r3, [r7, #0]
    (void)args;
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_0));
    fb1a:	68f8      	ldr	r0, [r7, #12]
    fb1c:	f7ff ffac 	bl	fa78 <MP_OBJ_IS_OBJ>
    fb20:	4603      	mov	r3, r0
    fb22:	f083 0301 	eor.w	r3, r3, #1
    fb26:	b2db      	uxtb	r3, r3
    fb28:	2b00      	cmp	r3, #0
    fb2a:	d104      	bne.n	fb36 <fun_builtin_0_call+0x2a>
    fb2c:	68fb      	ldr	r3, [r7, #12]
    fb2e:	681b      	ldr	r3, [r3, #0]
    fb30:	4a0d      	ldr	r2, [pc, #52]	; (fb68 <fun_builtin_0_call+0x5c>)
    fb32:	4293      	cmp	r3, r2
    fb34:	d005      	beq.n	fb42 <fun_builtin_0_call+0x36>
    fb36:	4b0d      	ldr	r3, [pc, #52]	; (fb6c <fun_builtin_0_call+0x60>)
    fb38:	4a0d      	ldr	r2, [pc, #52]	; (fb70 <fun_builtin_0_call+0x64>)
    fb3a:	2135      	movs	r1, #53	; 0x35
    fb3c:	480d      	ldr	r0, [pc, #52]	; (fb74 <fun_builtin_0_call+0x68>)
    fb3e:	f00b fe21 	bl	1b784 <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    fb42:	68fb      	ldr	r3, [r7, #12]
    fb44:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 0, 0, false);
    fb46:	2300      	movs	r3, #0
    fb48:	9300      	str	r3, [sp, #0]
    fb4a:	2300      	movs	r3, #0
    fb4c:	2200      	movs	r2, #0
    fb4e:	6879      	ldr	r1, [r7, #4]
    fb50:	68b8      	ldr	r0, [r7, #8]
    fb52:	f7ff ffa3 	bl	fa9c <mp_arg_check_num>
    return self->fun._0();
    fb56:	697b      	ldr	r3, [r7, #20]
    fb58:	685b      	ldr	r3, [r3, #4]
    fb5a:	4798      	blx	r3
    fb5c:	4603      	mov	r3, r0
}
    fb5e:	4618      	mov	r0, r3
    fb60:	3718      	adds	r7, #24
    fb62:	46bd      	mov	sp, r7
    fb64:	bd80      	pop	{r7, pc}
    fb66:	bf00      	nop
    fb68:	00022944 	.word	0x00022944
    fb6c:	00022900 	.word	0x00022900
    fb70:	00022bc8 	.word	0x00022bc8
    fb74:	00022930 	.word	0x00022930

0000fb78 <fun_builtin_1_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_0_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_1_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fb78:	b580      	push	{r7, lr}
    fb7a:	b088      	sub	sp, #32
    fb7c:	af02      	add	r7, sp, #8
    fb7e:	60f8      	str	r0, [r7, #12]
    fb80:	60b9      	str	r1, [r7, #8]
    fb82:	607a      	str	r2, [r7, #4]
    fb84:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_1));
    fb86:	68f8      	ldr	r0, [r7, #12]
    fb88:	f7ff ff76 	bl	fa78 <MP_OBJ_IS_OBJ>
    fb8c:	4603      	mov	r3, r0
    fb8e:	f083 0301 	eor.w	r3, r3, #1
    fb92:	b2db      	uxtb	r3, r3
    fb94:	2b00      	cmp	r3, #0
    fb96:	d104      	bne.n	fba2 <fun_builtin_1_call+0x2a>
    fb98:	68fb      	ldr	r3, [r7, #12]
    fb9a:	681b      	ldr	r3, [r3, #0]
    fb9c:	4a0e      	ldr	r2, [pc, #56]	; (fbd8 <fun_builtin_1_call+0x60>)
    fb9e:	4293      	cmp	r3, r2
    fba0:	d005      	beq.n	fbae <fun_builtin_1_call+0x36>
    fba2:	4b0e      	ldr	r3, [pc, #56]	; (fbdc <fun_builtin_1_call+0x64>)
    fba4:	4a0e      	ldr	r2, [pc, #56]	; (fbe0 <fun_builtin_1_call+0x68>)
    fba6:	2143      	movs	r1, #67	; 0x43
    fba8:	480e      	ldr	r0, [pc, #56]	; (fbe4 <fun_builtin_1_call+0x6c>)
    fbaa:	f00b fdeb 	bl	1b784 <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    fbae:	68fb      	ldr	r3, [r7, #12]
    fbb0:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 1, 1, false);
    fbb2:	2300      	movs	r3, #0
    fbb4:	9300      	str	r3, [sp, #0]
    fbb6:	2301      	movs	r3, #1
    fbb8:	2201      	movs	r2, #1
    fbba:	6879      	ldr	r1, [r7, #4]
    fbbc:	68b8      	ldr	r0, [r7, #8]
    fbbe:	f7ff ff6d 	bl	fa9c <mp_arg_check_num>
    return self->fun._1(args[0]);
    fbc2:	697b      	ldr	r3, [r7, #20]
    fbc4:	685b      	ldr	r3, [r3, #4]
    fbc6:	683a      	ldr	r2, [r7, #0]
    fbc8:	6812      	ldr	r2, [r2, #0]
    fbca:	4610      	mov	r0, r2
    fbcc:	4798      	blx	r3
    fbce:	4603      	mov	r3, r0
}
    fbd0:	4618      	mov	r0, r3
    fbd2:	3718      	adds	r7, #24
    fbd4:	46bd      	mov	sp, r7
    fbd6:	bd80      	pop	{r7, pc}
    fbd8:	000229b0 	.word	0x000229b0
    fbdc:	00022980 	.word	0x00022980
    fbe0:	00022bdc 	.word	0x00022bdc
    fbe4:	00022930 	.word	0x00022930

0000fbe8 <fun_builtin_2_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_1_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_2_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fbe8:	b580      	push	{r7, lr}
    fbea:	b088      	sub	sp, #32
    fbec:	af02      	add	r7, sp, #8
    fbee:	60f8      	str	r0, [r7, #12]
    fbf0:	60b9      	str	r1, [r7, #8]
    fbf2:	607a      	str	r2, [r7, #4]
    fbf4:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_2));
    fbf6:	68f8      	ldr	r0, [r7, #12]
    fbf8:	f7ff ff3e 	bl	fa78 <MP_OBJ_IS_OBJ>
    fbfc:	4603      	mov	r3, r0
    fbfe:	f083 0301 	eor.w	r3, r3, #1
    fc02:	b2db      	uxtb	r3, r3
    fc04:	2b00      	cmp	r3, #0
    fc06:	d104      	bne.n	fc12 <fun_builtin_2_call+0x2a>
    fc08:	68fb      	ldr	r3, [r7, #12]
    fc0a:	681b      	ldr	r3, [r3, #0]
    fc0c:	4a10      	ldr	r2, [pc, #64]	; (fc50 <fun_builtin_2_call+0x68>)
    fc0e:	4293      	cmp	r3, r2
    fc10:	d005      	beq.n	fc1e <fun_builtin_2_call+0x36>
    fc12:	4b10      	ldr	r3, [pc, #64]	; (fc54 <fun_builtin_2_call+0x6c>)
    fc14:	4a10      	ldr	r2, [pc, #64]	; (fc58 <fun_builtin_2_call+0x70>)
    fc16:	2151      	movs	r1, #81	; 0x51
    fc18:	4810      	ldr	r0, [pc, #64]	; (fc5c <fun_builtin_2_call+0x74>)
    fc1a:	f00b fdb3 	bl	1b784 <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    fc1e:	68fb      	ldr	r3, [r7, #12]
    fc20:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 2, 2, false);
    fc22:	2300      	movs	r3, #0
    fc24:	9300      	str	r3, [sp, #0]
    fc26:	2302      	movs	r3, #2
    fc28:	2202      	movs	r2, #2
    fc2a:	6879      	ldr	r1, [r7, #4]
    fc2c:	68b8      	ldr	r0, [r7, #8]
    fc2e:	f7ff ff35 	bl	fa9c <mp_arg_check_num>
    return self->fun._2(args[0], args[1]);
    fc32:	697b      	ldr	r3, [r7, #20]
    fc34:	685b      	ldr	r3, [r3, #4]
    fc36:	683a      	ldr	r2, [r7, #0]
    fc38:	6810      	ldr	r0, [r2, #0]
    fc3a:	683a      	ldr	r2, [r7, #0]
    fc3c:	3204      	adds	r2, #4
    fc3e:	6812      	ldr	r2, [r2, #0]
    fc40:	4611      	mov	r1, r2
    fc42:	4798      	blx	r3
    fc44:	4603      	mov	r3, r0
}
    fc46:	4618      	mov	r0, r3
    fc48:	3718      	adds	r7, #24
    fc4a:	46bd      	mov	sp, r7
    fc4c:	bd80      	pop	{r7, pc}
    fc4e:	bf00      	nop
    fc50:	00022a1c 	.word	0x00022a1c
    fc54:	000229ec 	.word	0x000229ec
    fc58:	00022bf0 	.word	0x00022bf0
    fc5c:	00022930 	.word	0x00022930

0000fc60 <fun_builtin_3_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_2_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_3_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fc60:	b580      	push	{r7, lr}
    fc62:	b088      	sub	sp, #32
    fc64:	af02      	add	r7, sp, #8
    fc66:	60f8      	str	r0, [r7, #12]
    fc68:	60b9      	str	r1, [r7, #8]
    fc6a:	607a      	str	r2, [r7, #4]
    fc6c:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_3));
    fc6e:	68f8      	ldr	r0, [r7, #12]
    fc70:	f7ff ff02 	bl	fa78 <MP_OBJ_IS_OBJ>
    fc74:	4603      	mov	r3, r0
    fc76:	f083 0301 	eor.w	r3, r3, #1
    fc7a:	b2db      	uxtb	r3, r3
    fc7c:	2b00      	cmp	r3, #0
    fc7e:	d104      	bne.n	fc8a <fun_builtin_3_call+0x2a>
    fc80:	68fb      	ldr	r3, [r7, #12]
    fc82:	681b      	ldr	r3, [r3, #0]
    fc84:	4a11      	ldr	r2, [pc, #68]	; (fccc <fun_builtin_3_call+0x6c>)
    fc86:	4293      	cmp	r3, r2
    fc88:	d005      	beq.n	fc96 <fun_builtin_3_call+0x36>
    fc8a:	4b11      	ldr	r3, [pc, #68]	; (fcd0 <fun_builtin_3_call+0x70>)
    fc8c:	4a11      	ldr	r2, [pc, #68]	; (fcd4 <fun_builtin_3_call+0x74>)
    fc8e:	215f      	movs	r1, #95	; 0x5f
    fc90:	4811      	ldr	r0, [pc, #68]	; (fcd8 <fun_builtin_3_call+0x78>)
    fc92:	f00b fd77 	bl	1b784 <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    fc96:	68fb      	ldr	r3, [r7, #12]
    fc98:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 3, 3, false);
    fc9a:	2300      	movs	r3, #0
    fc9c:	9300      	str	r3, [sp, #0]
    fc9e:	2303      	movs	r3, #3
    fca0:	2203      	movs	r2, #3
    fca2:	6879      	ldr	r1, [r7, #4]
    fca4:	68b8      	ldr	r0, [r7, #8]
    fca6:	f7ff fef9 	bl	fa9c <mp_arg_check_num>
    return self->fun._3(args[0], args[1], args[2]);
    fcaa:	697b      	ldr	r3, [r7, #20]
    fcac:	685b      	ldr	r3, [r3, #4]
    fcae:	683a      	ldr	r2, [r7, #0]
    fcb0:	6810      	ldr	r0, [r2, #0]
    fcb2:	683a      	ldr	r2, [r7, #0]
    fcb4:	3204      	adds	r2, #4
    fcb6:	6811      	ldr	r1, [r2, #0]
    fcb8:	683a      	ldr	r2, [r7, #0]
    fcba:	3208      	adds	r2, #8
    fcbc:	6812      	ldr	r2, [r2, #0]
    fcbe:	4798      	blx	r3
    fcc0:	4603      	mov	r3, r0
}
    fcc2:	4618      	mov	r0, r3
    fcc4:	3718      	adds	r7, #24
    fcc6:	46bd      	mov	sp, r7
    fcc8:	bd80      	pop	{r7, pc}
    fcca:	bf00      	nop
    fccc:	00022a88 	.word	0x00022a88
    fcd0:	00022a58 	.word	0x00022a58
    fcd4:	00022c04 	.word	0x00022c04
    fcd8:	00022930 	.word	0x00022930

0000fcdc <fun_builtin_var_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_3_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_var_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fcdc:	b580      	push	{r7, lr}
    fcde:	b088      	sub	sp, #32
    fce0:	af00      	add	r7, sp, #0
    fce2:	60f8      	str	r0, [r7, #12]
    fce4:	60b9      	str	r1, [r7, #8]
    fce6:	607a      	str	r2, [r7, #4]
    fce8:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_var));
    fcea:	68f8      	ldr	r0, [r7, #12]
    fcec:	f7ff fec4 	bl	fa78 <MP_OBJ_IS_OBJ>
    fcf0:	4603      	mov	r3, r0
    fcf2:	f083 0301 	eor.w	r3, r3, #1
    fcf6:	b2db      	uxtb	r3, r3
    fcf8:	2b00      	cmp	r3, #0
    fcfa:	d104      	bne.n	fd06 <fun_builtin_var_call+0x2a>
    fcfc:	68fb      	ldr	r3, [r7, #12]
    fcfe:	681b      	ldr	r3, [r3, #0]
    fd00:	4a1a      	ldr	r2, [pc, #104]	; (fd6c <fun_builtin_var_call+0x90>)
    fd02:	4293      	cmp	r3, r2
    fd04:	d005      	beq.n	fd12 <fun_builtin_var_call+0x36>
    fd06:	4b1a      	ldr	r3, [pc, #104]	; (fd70 <fun_builtin_var_call+0x94>)
    fd08:	4a1a      	ldr	r2, [pc, #104]	; (fd74 <fun_builtin_var_call+0x98>)
    fd0a:	216d      	movs	r1, #109	; 0x6d
    fd0c:	481a      	ldr	r0, [pc, #104]	; (fd78 <fun_builtin_var_call+0x9c>)
    fd0e:	f00b fd39 	bl	1b784 <__assert_func>
    mp_obj_fun_builtin_var_t *self = MP_OBJ_TO_PTR(self_in);
    fd12:	68fb      	ldr	r3, [r7, #12]
    fd14:	61fb      	str	r3, [r7, #28]

    // check number of arguments
    mp_arg_check_num_sig(n_args, n_kw, self->sig);
    fd16:	69fb      	ldr	r3, [r7, #28]
    fd18:	685b      	ldr	r3, [r3, #4]
    fd1a:	461a      	mov	r2, r3
    fd1c:	6879      	ldr	r1, [r7, #4]
    fd1e:	68b8      	ldr	r0, [r7, #8]
    fd20:	f7fd f9b6 	bl	d090 <mp_arg_check_num_sig>

    if (self->sig & 1) {
    fd24:	69fb      	ldr	r3, [r7, #28]
    fd26:	685b      	ldr	r3, [r3, #4]
    fd28:	f003 0301 	and.w	r3, r3, #1
    fd2c:	2b00      	cmp	r3, #0
    fd2e:	d012      	beq.n	fd56 <fun_builtin_var_call+0x7a>
        // function allows keywords

        // we create a map directly from the given args array
        mp_map_t kw_args;
        mp_map_init_fixed_table(&kw_args, n_kw, args + n_args);
    fd30:	68bb      	ldr	r3, [r7, #8]
    fd32:	009b      	lsls	r3, r3, #2
    fd34:	683a      	ldr	r2, [r7, #0]
    fd36:	441a      	add	r2, r3
    fd38:	f107 0310 	add.w	r3, r7, #16
    fd3c:	6879      	ldr	r1, [r7, #4]
    fd3e:	4618      	mov	r0, r3
    fd40:	f7fd fb36 	bl	d3b0 <mp_map_init_fixed_table>

        return self->fun.kw(n_args, args, &kw_args);
    fd44:	69fb      	ldr	r3, [r7, #28]
    fd46:	689b      	ldr	r3, [r3, #8]
    fd48:	f107 0210 	add.w	r2, r7, #16
    fd4c:	6839      	ldr	r1, [r7, #0]
    fd4e:	68b8      	ldr	r0, [r7, #8]
    fd50:	4798      	blx	r3
    fd52:	4603      	mov	r3, r0
    fd54:	e005      	b.n	fd62 <fun_builtin_var_call+0x86>

    } else {
        // function takes a variable number of arguments, but no keywords

        return self->fun.var(n_args, args);
    fd56:	69fb      	ldr	r3, [r7, #28]
    fd58:	689b      	ldr	r3, [r3, #8]
    fd5a:	6839      	ldr	r1, [r7, #0]
    fd5c:	68b8      	ldr	r0, [r7, #8]
    fd5e:	4798      	blx	r3
    fd60:	4603      	mov	r3, r0
    }
}
    fd62:	4618      	mov	r0, r3
    fd64:	3720      	adds	r7, #32
    fd66:	46bd      	mov	sp, r7
    fd68:	bd80      	pop	{r7, pc}
    fd6a:	bf00      	nop
    fd6c:	00022af8 	.word	0x00022af8
    fd70:	00022ac4 	.word	0x00022ac4
    fd74:	00022c18 	.word	0x00022c18
    fd78:	00022930 	.word	0x00022930

0000fd7c <mp_obj_code_get_name>:
};

/******************************************************************************/
/* byte code functions                                                        */

qstr mp_obj_code_get_name(const byte *code_info) {
    fd7c:	b580      	push	{r7, lr}
    fd7e:	b082      	sub	sp, #8
    fd80:	af00      	add	r7, sp, #0
    fd82:	6078      	str	r0, [r7, #4]
    code_info = mp_decode_uint_skip(code_info); // skip code_info_size entry
    fd84:	6878      	ldr	r0, [r7, #4]
    fd86:	f00a fdc9 	bl	1a91c <mp_decode_uint_skip>
    fd8a:	6078      	str	r0, [r7, #4]
    #if MICROPY_PERSISTENT_CODE
    return code_info[0] | (code_info[1] << 8);
    #else
    return mp_decode_uint_value(code_info);
    fd8c:	6878      	ldr	r0, [r7, #4]
    fd8e:	f00a fdb7 	bl	1a900 <mp_decode_uint_value>
    fd92:	4603      	mov	r3, r0
    #endif
}
    fd94:	4618      	mov	r0, r3
    fd96:	3708      	adds	r7, #8
    fd98:	46bd      	mov	sp, r7
    fd9a:	bd80      	pop	{r7, pc}

0000fd9c <mp_obj_fun_get_name>:

#if MICROPY_EMIT_NATIVE
STATIC const mp_obj_type_t mp_type_fun_native;
#endif

qstr mp_obj_fun_get_name(mp_const_obj_t fun_in) {
    fd9c:	b580      	push	{r7, lr}
    fd9e:	b084      	sub	sp, #16
    fda0:	af00      	add	r7, sp, #0
    fda2:	6078      	str	r0, [r7, #4]
    const mp_obj_fun_bc_t *fun = MP_OBJ_TO_PTR(fun_in);
    fda4:	687b      	ldr	r3, [r7, #4]
    fda6:	60fb      	str	r3, [r7, #12]
        // TODO native functions don't have name stored
        return MP_QSTR_;
    }
    #endif

    const byte *bc = fun->bytecode;
    fda8:	68fb      	ldr	r3, [r7, #12]
    fdaa:	689b      	ldr	r3, [r3, #8]
    fdac:	60bb      	str	r3, [r7, #8]
    bc = mp_decode_uint_skip(bc); // skip n_state
    fdae:	68b8      	ldr	r0, [r7, #8]
    fdb0:	f00a fdb4 	bl	1a91c <mp_decode_uint_skip>
    fdb4:	60b8      	str	r0, [r7, #8]
    bc = mp_decode_uint_skip(bc); // skip n_exc_stack
    fdb6:	68b8      	ldr	r0, [r7, #8]
    fdb8:	f00a fdb0 	bl	1a91c <mp_decode_uint_skip>
    fdbc:	60b8      	str	r0, [r7, #8]
    bc++; // skip scope_params
    fdbe:	68bb      	ldr	r3, [r7, #8]
    fdc0:	3301      	adds	r3, #1
    fdc2:	60bb      	str	r3, [r7, #8]
    bc++; // skip n_pos_args
    fdc4:	68bb      	ldr	r3, [r7, #8]
    fdc6:	3301      	adds	r3, #1
    fdc8:	60bb      	str	r3, [r7, #8]
    bc++; // skip n_kwonly_args
    fdca:	68bb      	ldr	r3, [r7, #8]
    fdcc:	3301      	adds	r3, #1
    fdce:	60bb      	str	r3, [r7, #8]
    bc++; // skip n_def_pos_args
    fdd0:	68bb      	ldr	r3, [r7, #8]
    fdd2:	3301      	adds	r3, #1
    fdd4:	60bb      	str	r3, [r7, #8]
    return mp_obj_code_get_name(bc);
    fdd6:	68b8      	ldr	r0, [r7, #8]
    fdd8:	f7ff ffd0 	bl	fd7c <mp_obj_code_get_name>
    fddc:	4603      	mov	r3, r0
}
    fdde:	4618      	mov	r0, r3
    fde0:	3710      	adds	r7, #16
    fde2:	46bd      	mov	sp, r7
    fde4:	bd80      	pop	{r7, pc}
    fde6:	bf00      	nop

0000fde8 <fun_bc_call>:

    return code_state;
}
#endif

STATIC mp_obj_t fun_bc_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fde8:	b580      	push	{r7, lr}
    fdea:	b08c      	sub	sp, #48	; 0x30
    fdec:	af00      	add	r7, sp, #0
    fdee:	60f8      	str	r0, [r7, #12]
    fdf0:	60b9      	str	r1, [r7, #8]
    fdf2:	607a      	str	r2, [r7, #4]
    fdf4:	603b      	str	r3, [r7, #0]
    DEBUG_printf("Input pos args: ");
    dump_args(args, n_args);
    DEBUG_printf("Input kw args: ");
    dump_args(args + n_args, n_kw * 2);

    mp_obj_fun_bc_t *self = MP_OBJ_TO_PTR(self_in);
    fdf6:	68fb      	ldr	r3, [r7, #12]
    fdf8:	623b      	str	r3, [r7, #32]

    size_t n_state, state_size;
    DECODE_CODESTATE_SIZE(self->bytecode, n_state, state_size);
    fdfa:	6a3b      	ldr	r3, [r7, #32]
    fdfc:	689b      	ldr	r3, [r3, #8]
    fdfe:	4618      	mov	r0, r3
    fe00:	f00a fd7e 	bl	1a900 <mp_decode_uint_value>
    fe04:	61f8      	str	r0, [r7, #28]
    fe06:	6a3b      	ldr	r3, [r7, #32]
    fe08:	689b      	ldr	r3, [r3, #8]
    fe0a:	4618      	mov	r0, r3
    fe0c:	f00a fd86 	bl	1a91c <mp_decode_uint_skip>
    fe10:	4603      	mov	r3, r0
    fe12:	4618      	mov	r0, r3
    fe14:	f00a fd74 	bl	1a900 <mp_decode_uint_value>
    fe18:	61b8      	str	r0, [r7, #24]
    fe1a:	69ba      	ldr	r2, [r7, #24]
    fe1c:	4613      	mov	r3, r2
    fe1e:	005b      	lsls	r3, r3, #1
    fe20:	441a      	add	r2, r3
    fe22:	69fb      	ldr	r3, [r7, #28]
    fe24:	4413      	add	r3, r2
    fe26:	009b      	lsls	r3, r3, #2
    fe28:	62fb      	str	r3, [r7, #44]	; 0x2c

    // allocate state for locals and stack
    mp_code_state_t *code_state = NULL;
    fe2a:	2300      	movs	r3, #0
    fe2c:	62bb      	str	r3, [r7, #40]	; 0x28
    #if MICROPY_ENABLE_PYSTACK
    code_state = mp_pystack_alloc(sizeof(mp_code_state_t) + state_size);
    #else
    if (state_size > VM_MAX_STATE_ON_STACK) {
    fe2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fe30:	2b2c      	cmp	r3, #44	; 0x2c
    fe32:	d905      	bls.n	fe40 <fun_bc_call+0x58>
        code_state = m_new_obj_var_maybe(mp_code_state_t, byte, state_size);
    fe34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fe36:	3314      	adds	r3, #20
    fe38:	4618      	mov	r0, r3
    fe3a:	f7f0 fa87 	bl	34c <m_malloc_maybe>
    fe3e:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    if (code_state == NULL) {
    fe40:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fe42:	2b00      	cmp	r3, #0
    fe44:	d10e      	bne.n	fe64 <fun_bc_call+0x7c>
        code_state = alloca(sizeof(mp_code_state_t) + state_size);
    fe46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fe48:	3314      	adds	r3, #20
    fe4a:	3307      	adds	r3, #7
    fe4c:	3307      	adds	r3, #7
    fe4e:	08db      	lsrs	r3, r3, #3
    fe50:	00db      	lsls	r3, r3, #3
    fe52:	ebad 0d03 	sub.w	sp, sp, r3
    fe56:	466b      	mov	r3, sp
    fe58:	3307      	adds	r3, #7
    fe5a:	08db      	lsrs	r3, r3, #3
    fe5c:	00db      	lsls	r3, r3, #3
    fe5e:	62bb      	str	r3, [r7, #40]	; 0x28
        state_size = 0; // indicate that we allocated using alloca
    fe60:	2300      	movs	r3, #0
    fe62:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    #endif

    INIT_CODESTATE(code_state, self, n_args, n_kw, args);
    fe64:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fe66:	6a3a      	ldr	r2, [r7, #32]
    fe68:	601a      	str	r2, [r3, #0]
    fe6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fe6c:	2200      	movs	r2, #0
    fe6e:	605a      	str	r2, [r3, #4]
    fe70:	683b      	ldr	r3, [r7, #0]
    fe72:	687a      	ldr	r2, [r7, #4]
    fe74:	68b9      	ldr	r1, [r7, #8]
    fe76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    fe78:	f00a fd6c 	bl	1a954 <mp_setup_code_state>
    fe7c:	f7ff fe2a 	bl	fad4 <mp_globals_get>
    fe80:	4602      	mov	r2, r0
    fe82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fe84:	611a      	str	r2, [r3, #16]

    // execute the byte code with the correct globals context
    mp_globals_set(self->globals);
    fe86:	6a3b      	ldr	r3, [r7, #32]
    fe88:	685b      	ldr	r3, [r3, #4]
    fe8a:	4618      	mov	r0, r3
    fe8c:	f7ff fe2e 	bl	faec <mp_globals_set>
    mp_vm_return_kind_t vm_return_kind = mp_execute_bytecode(code_state, MP_OBJ_NULL);
    fe90:	2100      	movs	r1, #0
    fe92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    fe94:	f009 fd6c 	bl	19970 <mp_execute_bytecode>
    fe98:	6178      	str	r0, [r7, #20]
    mp_globals_set(code_state->old_globals);
    fe9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fe9c:	691b      	ldr	r3, [r3, #16]
    fe9e:	4618      	mov	r0, r3
    fea0:	f7ff fe24 	bl	faec <mp_globals_set>
        }
    }
#endif

    mp_obj_t result;
    if (vm_return_kind == MP_VM_RETURN_NORMAL) {
    fea4:	697b      	ldr	r3, [r7, #20]
    fea6:	2b00      	cmp	r3, #0
    fea8:	d104      	bne.n	feb4 <fun_bc_call+0xcc>
        // return value is in *sp
        result = *code_state->sp;
    feaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    feac:	689b      	ldr	r3, [r3, #8]
    feae:	681b      	ldr	r3, [r3, #0]
    feb0:	627b      	str	r3, [r7, #36]	; 0x24
    feb2:	e00c      	b.n	fece <fun_bc_call+0xe6>
    } else {
        // must be an exception because normal functions can't yield
        assert(vm_return_kind == MP_VM_RETURN_EXCEPTION);
    feb4:	697b      	ldr	r3, [r7, #20]
    feb6:	2b02      	cmp	r3, #2
    feb8:	d006      	beq.n	fec8 <fun_bc_call+0xe0>
    feba:	4b0e      	ldr	r3, [pc, #56]	; (fef4 <fun_bc_call+0x10c>)
    febc:	4a0e      	ldr	r2, [pc, #56]	; (fef8 <fun_bc_call+0x110>)
    febe:	f240 113f 	movw	r1, #319	; 0x13f
    fec2:	480e      	ldr	r0, [pc, #56]	; (fefc <fun_bc_call+0x114>)
    fec4:	f00b fc5e 	bl	1b784 <__assert_func>
        // return value is in fastn[0]==state[n_state - 1]
        result = code_state->state[0];
    fec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    feca:	695b      	ldr	r3, [r3, #20]
    fecc:	627b      	str	r3, [r7, #36]	; 0x24

    #if MICROPY_ENABLE_PYSTACK
    mp_pystack_free(code_state);
    #else
    // free the state if it was allocated on the heap
    if (state_size != 0) {
    fece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fed0:	2b00      	cmp	r3, #0
    fed2:	d002      	beq.n	feda <fun_bc_call+0xf2>
        m_del_var(mp_code_state_t, byte, state_size, code_state);
    fed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    fed6:	f7f0 fa9b 	bl	410 <m_free>
    }
    #endif

    if (vm_return_kind == MP_VM_RETURN_NORMAL) {
    feda:	697b      	ldr	r3, [r7, #20]
    fedc:	2b00      	cmp	r3, #0
    fede:	d101      	bne.n	fee4 <fun_bc_call+0xfc>
        return result;
    fee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fee2:	e002      	b.n	feea <fun_bc_call+0x102>
    } else { // MP_VM_RETURN_EXCEPTION
        nlr_raise(result);
    fee4:	6a78      	ldr	r0, [r7, #36]	; 0x24
    fee6:	f7f0 f9fb 	bl	2e0 <nlr_jump>
    }
}
    feea:	4618      	mov	r0, r3
    feec:	3730      	adds	r7, #48	; 0x30
    feee:	46bd      	mov	sp, r7
    fef0:	bd80      	pop	{r7, pc}
    fef2:	bf00      	nop
    fef4:	00022b34 	.word	0x00022b34
    fef8:	00022c30 	.word	0x00022c30
    fefc:	00022930 	.word	0x00022930

0000ff00 <mp_obj_new_fun_bc>:
#if MICROPY_PY_FUNCTION_ATTRS
    .attr = mp_obj_fun_bc_attr,
#endif
};

mp_obj_t mp_obj_new_fun_bc(mp_obj_t def_args_in, mp_obj_t def_kw_args, const byte *code, const mp_uint_t *const_table) {
    ff00:	b580      	push	{r7, lr}
    ff02:	b088      	sub	sp, #32
    ff04:	af00      	add	r7, sp, #0
    ff06:	60f8      	str	r0, [r7, #12]
    ff08:	60b9      	str	r1, [r7, #8]
    ff0a:	607a      	str	r2, [r7, #4]
    ff0c:	603b      	str	r3, [r7, #0]
    size_t n_def_args = 0;
    ff0e:	2300      	movs	r3, #0
    ff10:	61fb      	str	r3, [r7, #28]
    size_t n_extra_args = 0;
    ff12:	2300      	movs	r3, #0
    ff14:	61bb      	str	r3, [r7, #24]
    mp_obj_tuple_t *def_args = MP_OBJ_TO_PTR(def_args_in);
    ff16:	68fb      	ldr	r3, [r7, #12]
    ff18:	617b      	str	r3, [r7, #20]
    if (def_args_in != MP_OBJ_NULL) {
    ff1a:	68fb      	ldr	r3, [r7, #12]
    ff1c:	2b00      	cmp	r3, #0
    ff1e:	d01a      	beq.n	ff56 <mp_obj_new_fun_bc+0x56>
        assert(MP_OBJ_IS_TYPE(def_args_in, &mp_type_tuple));
    ff20:	68f8      	ldr	r0, [r7, #12]
    ff22:	f7ff fda9 	bl	fa78 <MP_OBJ_IS_OBJ>
    ff26:	4603      	mov	r3, r0
    ff28:	f083 0301 	eor.w	r3, r3, #1
    ff2c:	b2db      	uxtb	r3, r3
    ff2e:	2b00      	cmp	r3, #0
    ff30:	d104      	bne.n	ff3c <mp_obj_new_fun_bc+0x3c>
    ff32:	68fb      	ldr	r3, [r7, #12]
    ff34:	681b      	ldr	r3, [r3, #0]
    ff36:	4a23      	ldr	r2, [pc, #140]	; (ffc4 <mp_obj_new_fun_bc+0xc4>)
    ff38:	4293      	cmp	r3, r2
    ff3a:	d006      	beq.n	ff4a <mp_obj_new_fun_bc+0x4a>
    ff3c:	4b22      	ldr	r3, [pc, #136]	; (ffc8 <mp_obj_new_fun_bc+0xc8>)
    ff3e:	4a23      	ldr	r2, [pc, #140]	; (ffcc <mp_obj_new_fun_bc+0xcc>)
    ff40:	f44f 71b9 	mov.w	r1, #370	; 0x172
    ff44:	4822      	ldr	r0, [pc, #136]	; (ffd0 <mp_obj_new_fun_bc+0xd0>)
    ff46:	f00b fc1d 	bl	1b784 <__assert_func>
        n_def_args = def_args->len;
    ff4a:	697b      	ldr	r3, [r7, #20]
    ff4c:	685b      	ldr	r3, [r3, #4]
    ff4e:	61fb      	str	r3, [r7, #28]
        n_extra_args = def_args->len;
    ff50:	697b      	ldr	r3, [r7, #20]
    ff52:	685b      	ldr	r3, [r3, #4]
    ff54:	61bb      	str	r3, [r7, #24]
    }
    if (def_kw_args != MP_OBJ_NULL) {
    ff56:	68bb      	ldr	r3, [r7, #8]
    ff58:	2b00      	cmp	r3, #0
    ff5a:	d002      	beq.n	ff62 <mp_obj_new_fun_bc+0x62>
        n_extra_args += 1;
    ff5c:	69bb      	ldr	r3, [r7, #24]
    ff5e:	3301      	adds	r3, #1
    ff60:	61bb      	str	r3, [r7, #24]
    }
    mp_obj_fun_bc_t *o = m_new_obj_var(mp_obj_fun_bc_t, mp_obj_t, n_extra_args);
    ff62:	69bb      	ldr	r3, [r7, #24]
    ff64:	3304      	adds	r3, #4
    ff66:	009b      	lsls	r3, r3, #2
    ff68:	4618      	mov	r0, r3
    ff6a:	f7f0 f9d7 	bl	31c <m_malloc>
    ff6e:	6138      	str	r0, [r7, #16]
    o->base.type = &mp_type_fun_bc;
    ff70:	693b      	ldr	r3, [r7, #16]
    ff72:	4a18      	ldr	r2, [pc, #96]	; (ffd4 <mp_obj_new_fun_bc+0xd4>)
    ff74:	601a      	str	r2, [r3, #0]
    o->globals = mp_globals_get();
    ff76:	f7ff fdad 	bl	fad4 <mp_globals_get>
    ff7a:	4602      	mov	r2, r0
    ff7c:	693b      	ldr	r3, [r7, #16]
    ff7e:	605a      	str	r2, [r3, #4]
    o->bytecode = code;
    ff80:	693b      	ldr	r3, [r7, #16]
    ff82:	687a      	ldr	r2, [r7, #4]
    ff84:	609a      	str	r2, [r3, #8]
    o->const_table = const_table;
    ff86:	693b      	ldr	r3, [r7, #16]
    ff88:	683a      	ldr	r2, [r7, #0]
    ff8a:	60da      	str	r2, [r3, #12]
    if (def_args != NULL) {
    ff8c:	697b      	ldr	r3, [r7, #20]
    ff8e:	2b00      	cmp	r3, #0
    ff90:	d00a      	beq.n	ffa8 <mp_obj_new_fun_bc+0xa8>
        memcpy(o->extra_args, def_args->items, n_def_args * sizeof(mp_obj_t));
    ff92:	693b      	ldr	r3, [r7, #16]
    ff94:	f103 0010 	add.w	r0, r3, #16
    ff98:	697b      	ldr	r3, [r7, #20]
    ff9a:	f103 0108 	add.w	r1, r3, #8
    ff9e:	69fb      	ldr	r3, [r7, #28]
    ffa0:	009b      	lsls	r3, r3, #2
    ffa2:	461a      	mov	r2, r3
    ffa4:	f00c fef4 	bl	1cd90 <memcpy>
    }
    if (def_kw_args != MP_OBJ_NULL) {
    ffa8:	68bb      	ldr	r3, [r7, #8]
    ffaa:	2b00      	cmp	r3, #0
    ffac:	d005      	beq.n	ffba <mp_obj_new_fun_bc+0xba>
        o->extra_args[n_def_args] = def_kw_args;
    ffae:	693b      	ldr	r3, [r7, #16]
    ffb0:	69fa      	ldr	r2, [r7, #28]
    ffb2:	3204      	adds	r2, #4
    ffb4:	68b9      	ldr	r1, [r7, #8]
    ffb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
    return MP_OBJ_FROM_PTR(o);
    ffba:	693b      	ldr	r3, [r7, #16]
}
    ffbc:	4618      	mov	r0, r3
    ffbe:	3720      	adds	r7, #32
    ffc0:	46bd      	mov	sp, r7
    ffc2:	bd80      	pop	{r7, pc}
    ffc4:	00023dec 	.word	0x00023dec
    ffc8:	00022b9c 	.word	0x00022b9c
    ffcc:	00022c3c 	.word	0x00022c3c
    ffd0:	00022930 	.word	0x00022930
    ffd4:	00022b60 	.word	0x00022b60

0000ffd8 <MP_OBJ_IS_OBJ>:
    ffd8:	b480      	push	{r7}
    ffda:	b083      	sub	sp, #12
    ffdc:	af00      	add	r7, sp, #0
    ffde:	6078      	str	r0, [r7, #4]
    ffe0:	687b      	ldr	r3, [r7, #4]
    ffe2:	f003 0303 	and.w	r3, r3, #3
    ffe6:	2b00      	cmp	r3, #0
    ffe8:	bf0c      	ite	eq
    ffea:	2301      	moveq	r3, #1
    ffec:	2300      	movne	r3, #0
    ffee:	b2db      	uxtb	r3, r3
    fff0:	4618      	mov	r0, r3
    fff2:	370c      	adds	r7, #12
    fff4:	46bd      	mov	sp, r7
    fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
    fffa:	4770      	bx	lr

0000fffc <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    fffc:	b480      	push	{r7}
    fffe:	af00      	add	r7, sp, #0
   10000:	4b03      	ldr	r3, [pc, #12]	; (10010 <mp_globals_get+0x14>)
   10002:	689b      	ldr	r3, [r3, #8]
   10004:	4618      	mov	r0, r3
   10006:	46bd      	mov	sp, r7
   10008:	f85d 7b04 	ldr.w	r7, [sp], #4
   1000c:	4770      	bx	lr
   1000e:	bf00      	nop
   10010:	200012f0 	.word	0x200012f0

00010014 <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
   10014:	b480      	push	{r7}
   10016:	b083      	sub	sp, #12
   10018:	af00      	add	r7, sp, #0
   1001a:	6078      	str	r0, [r7, #4]
   1001c:	4a04      	ldr	r2, [pc, #16]	; (10030 <mp_globals_set+0x1c>)
   1001e:	687b      	ldr	r3, [r7, #4]
   10020:	6093      	str	r3, [r2, #8]
   10022:	bf00      	nop
   10024:	370c      	adds	r7, #12
   10026:	46bd      	mov	sp, r7
   10028:	f85d 7b04 	ldr.w	r7, [sp], #4
   1002c:	4770      	bx	lr
   1002e:	bf00      	nop
   10030:	200012f0 	.word	0x200012f0

00010034 <gen_wrap_call>:
    mp_obj_base_t base;
    mp_obj_dict_t *globals;
    mp_code_state_t code_state;
} mp_obj_gen_instance_t;

STATIC mp_obj_t gen_wrap_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   10034:	b580      	push	{r7, lr}
   10036:	b088      	sub	sp, #32
   10038:	af00      	add	r7, sp, #0
   1003a:	60f8      	str	r0, [r7, #12]
   1003c:	60b9      	str	r1, [r7, #8]
   1003e:	607a      	str	r2, [r7, #4]
   10040:	603b      	str	r3, [r7, #0]
    // A generating function is just a bytecode function with type mp_type_gen_wrap
    mp_obj_fun_bc_t *self_fun = MP_OBJ_TO_PTR(self_in);
   10042:	68fb      	ldr	r3, [r7, #12]
   10044:	61fb      	str	r3, [r7, #28]

    // bytecode prelude: get state size and exception stack size
    size_t n_state = mp_decode_uint_value(self_fun->bytecode);
   10046:	69fb      	ldr	r3, [r7, #28]
   10048:	689b      	ldr	r3, [r3, #8]
   1004a:	4618      	mov	r0, r3
   1004c:	f00a fc58 	bl	1a900 <mp_decode_uint_value>
   10050:	61b8      	str	r0, [r7, #24]
    size_t n_exc_stack = mp_decode_uint_value(mp_decode_uint_skip(self_fun->bytecode));
   10052:	69fb      	ldr	r3, [r7, #28]
   10054:	689b      	ldr	r3, [r3, #8]
   10056:	4618      	mov	r0, r3
   10058:	f00a fc60 	bl	1a91c <mp_decode_uint_skip>
   1005c:	4603      	mov	r3, r0
   1005e:	4618      	mov	r0, r3
   10060:	f00a fc4e 	bl	1a900 <mp_decode_uint_value>
   10064:	6178      	str	r0, [r7, #20]

    // allocate the generator object, with room for local stack and exception stack
    mp_obj_gen_instance_t *o = m_new_obj_var(mp_obj_gen_instance_t, byte,
   10066:	697a      	ldr	r2, [r7, #20]
   10068:	4613      	mov	r3, r2
   1006a:	005b      	lsls	r3, r3, #1
   1006c:	441a      	add	r2, r3
   1006e:	69bb      	ldr	r3, [r7, #24]
   10070:	4413      	add	r3, r2
   10072:	3307      	adds	r3, #7
   10074:	009b      	lsls	r3, r3, #2
   10076:	4618      	mov	r0, r3
   10078:	f7f0 f950 	bl	31c <m_malloc>
   1007c:	6138      	str	r0, [r7, #16]
        n_state * sizeof(mp_obj_t) + n_exc_stack * sizeof(mp_exc_stack_t));
    o->base.type = &mp_type_gen_instance;
   1007e:	693b      	ldr	r3, [r7, #16]
   10080:	4a0c      	ldr	r2, [pc, #48]	; (100b4 <gen_wrap_call+0x80>)
   10082:	601a      	str	r2, [r3, #0]

    o->globals = self_fun->globals;
   10084:	69fb      	ldr	r3, [r7, #28]
   10086:	685a      	ldr	r2, [r3, #4]
   10088:	693b      	ldr	r3, [r7, #16]
   1008a:	605a      	str	r2, [r3, #4]
    o->code_state.fun_bc = self_fun;
   1008c:	693b      	ldr	r3, [r7, #16]
   1008e:	69fa      	ldr	r2, [r7, #28]
   10090:	609a      	str	r2, [r3, #8]
    o->code_state.ip = 0;
   10092:	693b      	ldr	r3, [r7, #16]
   10094:	2200      	movs	r2, #0
   10096:	60da      	str	r2, [r3, #12]
    mp_setup_code_state(&o->code_state, n_args, n_kw, args);
   10098:	693b      	ldr	r3, [r7, #16]
   1009a:	f103 0008 	add.w	r0, r3, #8
   1009e:	683b      	ldr	r3, [r7, #0]
   100a0:	687a      	ldr	r2, [r7, #4]
   100a2:	68b9      	ldr	r1, [r7, #8]
   100a4:	f00a fc56 	bl	1a954 <mp_setup_code_state>
    return MP_OBJ_FROM_PTR(o);
   100a8:	693b      	ldr	r3, [r7, #16]
}
   100aa:	4618      	mov	r0, r3
   100ac:	3720      	adds	r7, #32
   100ae:	46bd      	mov	sp, r7
   100b0:	bd80      	pop	{r7, pc}
   100b2:	bf00      	nop
   100b4:	00022e3c 	.word	0x00022e3c

000100b8 <gen_instance_print>:
#endif // MICROPY_EMIT_NATIVE

/******************************************************************************/
/* generator instance                                                         */

STATIC void gen_instance_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   100b8:	b580      	push	{r7, lr}
   100ba:	b086      	sub	sp, #24
   100bc:	af00      	add	r7, sp, #0
   100be:	60f8      	str	r0, [r7, #12]
   100c0:	60b9      	str	r1, [r7, #8]
   100c2:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
   100c4:	68bb      	ldr	r3, [r7, #8]
   100c6:	617b      	str	r3, [r7, #20]
    mp_printf(print, "<generator object '%q' at %p>", mp_obj_fun_get_name(MP_OBJ_FROM_PTR(self->code_state.fun_bc)), self);
   100c8:	697b      	ldr	r3, [r7, #20]
   100ca:	689b      	ldr	r3, [r3, #8]
   100cc:	4618      	mov	r0, r3
   100ce:	f7ff fe65 	bl	fd9c <mp_obj_fun_get_name>
   100d2:	4602      	mov	r2, r0
   100d4:	697b      	ldr	r3, [r7, #20]
   100d6:	4904      	ldr	r1, [pc, #16]	; (100e8 <gen_instance_print+0x30>)
   100d8:	68f8      	ldr	r0, [r7, #12]
   100da:	f7f1 ffad 	bl	2038 <mp_printf>
}
   100de:	bf00      	nop
   100e0:	3718      	adds	r7, #24
   100e2:	46bd      	mov	sp, r7
   100e4:	bd80      	pop	{r7, pc}
   100e6:	bf00      	nop
   100e8:	00022c8c 	.word	0x00022c8c

000100ec <mp_obj_gen_resume>:

mp_vm_return_kind_t mp_obj_gen_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val) {
   100ec:	b580      	push	{r7, lr}
   100ee:	b086      	sub	sp, #24
   100f0:	af00      	add	r7, sp, #0
   100f2:	60f8      	str	r0, [r7, #12]
   100f4:	60b9      	str	r1, [r7, #8]
   100f6:	607a      	str	r2, [r7, #4]
   100f8:	603b      	str	r3, [r7, #0]
    MP_STACK_CHECK();
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_gen_instance));
   100fa:	68f8      	ldr	r0, [r7, #12]
   100fc:	f7ff ff6c 	bl	ffd8 <MP_OBJ_IS_OBJ>
   10100:	4603      	mov	r3, r0
   10102:	f083 0301 	eor.w	r3, r3, #1
   10106:	b2db      	uxtb	r3, r3
   10108:	2b00      	cmp	r3, #0
   1010a:	d104      	bne.n	10116 <mp_obj_gen_resume+0x2a>
   1010c:	68fb      	ldr	r3, [r7, #12]
   1010e:	681b      	ldr	r3, [r3, #0]
   10110:	4a49      	ldr	r2, [pc, #292]	; (10238 <mp_obj_gen_resume+0x14c>)
   10112:	4293      	cmp	r3, r2
   10114:	d005      	beq.n	10122 <mp_obj_gen_resume+0x36>
   10116:	4b49      	ldr	r3, [pc, #292]	; (1023c <mp_obj_gen_resume+0x150>)
   10118:	4a49      	ldr	r2, [pc, #292]	; (10240 <mp_obj_gen_resume+0x154>)
   1011a:	2186      	movs	r1, #134	; 0x86
   1011c:	4849      	ldr	r0, [pc, #292]	; (10244 <mp_obj_gen_resume+0x158>)
   1011e:	f00b fb31 	bl	1b784 <__assert_func>
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
   10122:	68fb      	ldr	r3, [r7, #12]
   10124:	617b      	str	r3, [r7, #20]
    if (self->code_state.ip == 0) {
   10126:	697b      	ldr	r3, [r7, #20]
   10128:	68db      	ldr	r3, [r3, #12]
   1012a:	2b00      	cmp	r3, #0
   1012c:	d104      	bne.n	10138 <mp_obj_gen_resume+0x4c>
        // Trying to resume already stopped generator
        *ret_val = MP_OBJ_STOP_ITERATION;
   1012e:	683b      	ldr	r3, [r7, #0]
   10130:	2204      	movs	r2, #4
   10132:	601a      	str	r2, [r3, #0]
        return MP_VM_RETURN_NORMAL;
   10134:	2300      	movs	r3, #0
   10136:	e07a      	b.n	1022e <mp_obj_gen_resume+0x142>
    }
    if (self->code_state.sp == self->code_state.state - 1) {
   10138:	697b      	ldr	r3, [r7, #20]
   1013a:	691a      	ldr	r2, [r3, #16]
   1013c:	697b      	ldr	r3, [r7, #20]
   1013e:	331c      	adds	r3, #28
   10140:	3b04      	subs	r3, #4
   10142:	429a      	cmp	r2, r3
   10144:	d106      	bne.n	10154 <mp_obj_gen_resume+0x68>
        if (send_value != mp_const_none) {
   10146:	68bb      	ldr	r3, [r7, #8]
   10148:	4a3f      	ldr	r2, [pc, #252]	; (10248 <mp_obj_gen_resume+0x15c>)
   1014a:	4293      	cmp	r3, r2
   1014c:	d015      	beq.n	1017a <mp_obj_gen_resume+0x8e>
            mp_raise_TypeError("can't send non-None value to a just-started generator");
   1014e:	483f      	ldr	r0, [pc, #252]	; (1024c <mp_obj_gen_resume+0x160>)
   10150:	f7fc ff32 	bl	cfb8 <mp_raise_TypeError>
        }
    } else {
        #if MICROPY_PY_GENERATOR_PEND_THROW
        // If exception is pending (set using .pend_throw()), process it now.
        if (*self->code_state.sp != mp_const_none) {
   10154:	697b      	ldr	r3, [r7, #20]
   10156:	691b      	ldr	r3, [r3, #16]
   10158:	681b      	ldr	r3, [r3, #0]
   1015a:	4a3b      	ldr	r2, [pc, #236]	; (10248 <mp_obj_gen_resume+0x15c>)
   1015c:	4293      	cmp	r3, r2
   1015e:	d008      	beq.n	10172 <mp_obj_gen_resume+0x86>
            throw_value = *self->code_state.sp;
   10160:	697b      	ldr	r3, [r7, #20]
   10162:	691b      	ldr	r3, [r3, #16]
   10164:	681b      	ldr	r3, [r3, #0]
   10166:	607b      	str	r3, [r7, #4]
            *self->code_state.sp = MP_OBJ_NULL;
   10168:	697b      	ldr	r3, [r7, #20]
   1016a:	691b      	ldr	r3, [r3, #16]
   1016c:	2200      	movs	r2, #0
   1016e:	601a      	str	r2, [r3, #0]
   10170:	e003      	b.n	1017a <mp_obj_gen_resume+0x8e>
        } else
        #endif
        {
            *self->code_state.sp = send_value;
   10172:	697b      	ldr	r3, [r7, #20]
   10174:	691b      	ldr	r3, [r3, #16]
   10176:	68ba      	ldr	r2, [r7, #8]
   10178:	601a      	str	r2, [r3, #0]
        }
    }

    // We set self->globals=NULL while executing, for a sentinel to ensure the generator
    // cannot be reentered during execution
    if (self->globals == NULL) {
   1017a:	697b      	ldr	r3, [r7, #20]
   1017c:	685b      	ldr	r3, [r3, #4]
   1017e:	2b00      	cmp	r3, #0
   10180:	d102      	bne.n	10188 <mp_obj_gen_resume+0x9c>
        mp_raise_ValueError("generator already executing");
   10182:	4833      	ldr	r0, [pc, #204]	; (10250 <mp_obj_gen_resume+0x164>)
   10184:	f7fc ff0e 	bl	cfa4 <mp_raise_ValueError>
    }

    // Set up the correct globals context for the generator and execute it
    self->code_state.old_globals = mp_globals_get();
   10188:	f7ff ff38 	bl	fffc <mp_globals_get>
   1018c:	4602      	mov	r2, r0
   1018e:	697b      	ldr	r3, [r7, #20]
   10190:	619a      	str	r2, [r3, #24]
    mp_globals_set(self->globals);
   10192:	697b      	ldr	r3, [r7, #20]
   10194:	685b      	ldr	r3, [r3, #4]
   10196:	4618      	mov	r0, r3
   10198:	f7ff ff3c 	bl	10014 <mp_globals_set>
    self->globals = NULL;
   1019c:	697b      	ldr	r3, [r7, #20]
   1019e:	2200      	movs	r2, #0
   101a0:	605a      	str	r2, [r3, #4]
        ret_kind = fun((void*)&self->code_state, throw_value);
    } else
    #endif
    {
        // A bytecode generator
        ret_kind = mp_execute_bytecode(&self->code_state, throw_value);
   101a2:	697b      	ldr	r3, [r7, #20]
   101a4:	3308      	adds	r3, #8
   101a6:	6879      	ldr	r1, [r7, #4]
   101a8:	4618      	mov	r0, r3
   101aa:	f009 fbe1 	bl	19970 <mp_execute_bytecode>
   101ae:	6138      	str	r0, [r7, #16]
    }

    self->globals = mp_globals_get();
   101b0:	f7ff ff24 	bl	fffc <mp_globals_get>
   101b4:	4602      	mov	r2, r0
   101b6:	697b      	ldr	r3, [r7, #20]
   101b8:	605a      	str	r2, [r3, #4]
    mp_globals_set(self->code_state.old_globals);
   101ba:	697b      	ldr	r3, [r7, #20]
   101bc:	699b      	ldr	r3, [r3, #24]
   101be:	4618      	mov	r0, r3
   101c0:	f7ff ff28 	bl	10014 <mp_globals_set>

    switch (ret_kind) {
   101c4:	693b      	ldr	r3, [r7, #16]
   101c6:	2b01      	cmp	r3, #1
   101c8:	d00a      	beq.n	101e0 <mp_obj_gen_resume+0xf4>
   101ca:	2b02      	cmp	r3, #2
   101cc:	d012      	beq.n	101f4 <mp_obj_gen_resume+0x108>
        case MP_VM_RETURN_NORMAL:
        default:
            // Explicitly mark generator as completed. If we don't do this,
            // subsequent next() may re-execute statements after last yield
            // again and again, leading to side effects.
            self->code_state.ip = 0;
   101ce:	697b      	ldr	r3, [r7, #20]
   101d0:	2200      	movs	r2, #0
   101d2:	60da      	str	r2, [r3, #12]
            *ret_val = *self->code_state.sp;
   101d4:	697b      	ldr	r3, [r7, #20]
   101d6:	691b      	ldr	r3, [r3, #16]
   101d8:	681a      	ldr	r2, [r3, #0]
   101da:	683b      	ldr	r3, [r7, #0]
   101dc:	601a      	str	r2, [r3, #0]
            break;
   101de:	e025      	b.n	1022c <mp_obj_gen_resume+0x140>

        case MP_VM_RETURN_YIELD:
            *ret_val = *self->code_state.sp;
   101e0:	697b      	ldr	r3, [r7, #20]
   101e2:	691b      	ldr	r3, [r3, #16]
   101e4:	681a      	ldr	r2, [r3, #0]
   101e6:	683b      	ldr	r3, [r7, #0]
   101e8:	601a      	str	r2, [r3, #0]
            #if MICROPY_PY_GENERATOR_PEND_THROW
            *self->code_state.sp = mp_const_none;
   101ea:	697b      	ldr	r3, [r7, #20]
   101ec:	691b      	ldr	r3, [r3, #16]
   101ee:	4a16      	ldr	r2, [pc, #88]	; (10248 <mp_obj_gen_resume+0x15c>)
   101f0:	601a      	str	r2, [r3, #0]
            #endif
            break;
   101f2:	e01b      	b.n	1022c <mp_obj_gen_resume+0x140>

        case MP_VM_RETURN_EXCEPTION: {
            self->code_state.ip = 0;
   101f4:	697b      	ldr	r3, [r7, #20]
   101f6:	2200      	movs	r2, #0
   101f8:	60da      	str	r2, [r3, #12]
            *ret_val = self->code_state.state[0];
   101fa:	697b      	ldr	r3, [r7, #20]
   101fc:	69da      	ldr	r2, [r3, #28]
   101fe:	683b      	ldr	r3, [r7, #0]
   10200:	601a      	str	r2, [r3, #0]
            // PEP479: if StopIteration is raised inside a generator it is replaced with RuntimeError
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(*ret_val)), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   10202:	683b      	ldr	r3, [r7, #0]
   10204:	681b      	ldr	r3, [r3, #0]
   10206:	4618      	mov	r0, r3
   10208:	f7fd fb44 	bl	d894 <mp_obj_get_type>
   1020c:	4603      	mov	r3, r0
   1020e:	4911      	ldr	r1, [pc, #68]	; (10254 <mp_obj_gen_resume+0x168>)
   10210:	4618      	mov	r0, r3
   10212:	f007 f979 	bl	17508 <mp_obj_is_subclass_fast>
   10216:	4603      	mov	r3, r0
   10218:	2b00      	cmp	r3, #0
   1021a:	d006      	beq.n	1022a <mp_obj_gen_resume+0x13e>
                *ret_val = mp_obj_new_exception_msg(&mp_type_RuntimeError, "generator raised StopIteration");
   1021c:	490e      	ldr	r1, [pc, #56]	; (10258 <mp_obj_gen_resume+0x16c>)
   1021e:	480f      	ldr	r0, [pc, #60]	; (1025c <mp_obj_gen_resume+0x170>)
   10220:	f7ff f9f0 	bl	f604 <mp_obj_new_exception_msg>
   10224:	4602      	mov	r2, r0
   10226:	683b      	ldr	r3, [r7, #0]
   10228:	601a      	str	r2, [r3, #0]
            }
            break;
   1022a:	bf00      	nop
        }
    }

    return ret_kind;
   1022c:	693b      	ldr	r3, [r7, #16]
}
   1022e:	4618      	mov	r0, r3
   10230:	3718      	adds	r7, #24
   10232:	46bd      	mov	sp, r7
   10234:	bd80      	pop	{r7, pc}
   10236:	bf00      	nop
   10238:	00022e3c 	.word	0x00022e3c
   1023c:	00022cac 	.word	0x00022cac
   10240:	00022e78 	.word	0x00022e78
   10244:	00022d10 	.word	0x00022d10
   10248:	000234d4 	.word	0x000234d4
   1024c:	00022d28 	.word	0x00022d28
   10250:	00022d60 	.word	0x00022d60
   10254:	00022334 	.word	0x00022334
   10258:	00022d7c 	.word	0x00022d7c
   1025c:	0002267c 	.word	0x0002267c

00010260 <gen_resume_and_raise>:

STATIC mp_obj_t gen_resume_and_raise(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value) {
   10260:	b580      	push	{r7, lr}
   10262:	b086      	sub	sp, #24
   10264:	af00      	add	r7, sp, #0
   10266:	60f8      	str	r0, [r7, #12]
   10268:	60b9      	str	r1, [r7, #8]
   1026a:	607a      	str	r2, [r7, #4]
    mp_obj_t ret;
    switch (mp_obj_gen_resume(self_in, send_value, throw_value, &ret)) {
   1026c:	f107 0314 	add.w	r3, r7, #20
   10270:	687a      	ldr	r2, [r7, #4]
   10272:	68b9      	ldr	r1, [r7, #8]
   10274:	68f8      	ldr	r0, [r7, #12]
   10276:	f7ff ff39 	bl	100ec <mp_obj_gen_resume>
   1027a:	4603      	mov	r3, r0
   1027c:	2b01      	cmp	r3, #1
   1027e:	d015      	beq.n	102ac <gen_resume_and_raise+0x4c>
   10280:	2b02      	cmp	r3, #2
   10282:	d015      	beq.n	102b0 <gen_resume_and_raise+0x50>
        case MP_VM_RETURN_NORMAL:
        default:
            // Optimize return w/o value in case generator is used in for loop
            if (ret == mp_const_none || ret == MP_OBJ_STOP_ITERATION) {
   10284:	697b      	ldr	r3, [r7, #20]
   10286:	4a0e      	ldr	r2, [pc, #56]	; (102c0 <gen_resume_and_raise+0x60>)
   10288:	4293      	cmp	r3, r2
   1028a:	d002      	beq.n	10292 <gen_resume_and_raise+0x32>
   1028c:	697b      	ldr	r3, [r7, #20]
   1028e:	2b04      	cmp	r3, #4
   10290:	d101      	bne.n	10296 <gen_resume_and_raise+0x36>
                return MP_OBJ_STOP_ITERATION;
   10292:	2304      	movs	r3, #4
   10294:	e010      	b.n	102b8 <gen_resume_and_raise+0x58>
            } else {
                nlr_raise(mp_obj_new_exception_args(&mp_type_StopIteration, 1, &ret));
   10296:	f107 0314 	add.w	r3, r7, #20
   1029a:	461a      	mov	r2, r3
   1029c:	2101      	movs	r1, #1
   1029e:	4809      	ldr	r0, [pc, #36]	; (102c4 <gen_resume_and_raise+0x64>)
   102a0:	f7ff f98a 	bl	f5b8 <mp_obj_new_exception_args>
   102a4:	4603      	mov	r3, r0
   102a6:	4618      	mov	r0, r3
   102a8:	f7f0 f81a 	bl	2e0 <nlr_jump>
            }

        case MP_VM_RETURN_YIELD:
            return ret;
   102ac:	697b      	ldr	r3, [r7, #20]
   102ae:	e003      	b.n	102b8 <gen_resume_and_raise+0x58>

        case MP_VM_RETURN_EXCEPTION:
            nlr_raise(ret);
   102b0:	697b      	ldr	r3, [r7, #20]
   102b2:	4618      	mov	r0, r3
   102b4:	f7f0 f814 	bl	2e0 <nlr_jump>
    }
}
   102b8:	4618      	mov	r0, r3
   102ba:	3718      	adds	r7, #24
   102bc:	46bd      	mov	sp, r7
   102be:	bd80      	pop	{r7, pc}
   102c0:	000234d4 	.word	0x000234d4
   102c4:	00022334 	.word	0x00022334

000102c8 <gen_instance_iternext>:

STATIC mp_obj_t gen_instance_iternext(mp_obj_t self_in) {
   102c8:	b580      	push	{r7, lr}
   102ca:	b082      	sub	sp, #8
   102cc:	af00      	add	r7, sp, #0
   102ce:	6078      	str	r0, [r7, #4]
    return gen_resume_and_raise(self_in, mp_const_none, MP_OBJ_NULL);
   102d0:	2200      	movs	r2, #0
   102d2:	4904      	ldr	r1, [pc, #16]	; (102e4 <gen_instance_iternext+0x1c>)
   102d4:	6878      	ldr	r0, [r7, #4]
   102d6:	f7ff ffc3 	bl	10260 <gen_resume_and_raise>
   102da:	4603      	mov	r3, r0
}
   102dc:	4618      	mov	r0, r3
   102de:	3708      	adds	r7, #8
   102e0:	46bd      	mov	sp, r7
   102e2:	bd80      	pop	{r7, pc}
   102e4:	000234d4 	.word	0x000234d4

000102e8 <gen_instance_send>:

STATIC mp_obj_t gen_instance_send(mp_obj_t self_in, mp_obj_t send_value) {
   102e8:	b580      	push	{r7, lr}
   102ea:	b084      	sub	sp, #16
   102ec:	af00      	add	r7, sp, #0
   102ee:	6078      	str	r0, [r7, #4]
   102f0:	6039      	str	r1, [r7, #0]
    mp_obj_t ret = gen_resume_and_raise(self_in, send_value, MP_OBJ_NULL);
   102f2:	2200      	movs	r2, #0
   102f4:	6839      	ldr	r1, [r7, #0]
   102f6:	6878      	ldr	r0, [r7, #4]
   102f8:	f7ff ffb2 	bl	10260 <gen_resume_and_raise>
   102fc:	60f8      	str	r0, [r7, #12]
    if (ret == MP_OBJ_STOP_ITERATION) {
   102fe:	68fb      	ldr	r3, [r7, #12]
   10300:	2b04      	cmp	r3, #4
   10302:	d106      	bne.n	10312 <gen_instance_send+0x2a>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   10304:	4805      	ldr	r0, [pc, #20]	; (1031c <gen_instance_send+0x34>)
   10306:	f7ff f939 	bl	f57c <mp_obj_new_exception>
   1030a:	4603      	mov	r3, r0
   1030c:	4618      	mov	r0, r3
   1030e:	f7ef ffe7 	bl	2e0 <nlr_jump>
    } else {
        return ret;
   10312:	68fb      	ldr	r3, [r7, #12]
    }
}
   10314:	4618      	mov	r0, r3
   10316:	3710      	adds	r7, #16
   10318:	46bd      	mov	sp, r7
   1031a:	bd80      	pop	{r7, pc}
   1031c:	00022334 	.word	0x00022334

00010320 <gen_instance_throw>:

STATIC MP_DEFINE_CONST_FUN_OBJ_2(gen_instance_send_obj, gen_instance_send);

STATIC mp_obj_t gen_instance_close(mp_obj_t self_in);
STATIC mp_obj_t gen_instance_throw(size_t n_args, const mp_obj_t *args) {
   10320:	b580      	push	{r7, lr}
   10322:	b084      	sub	sp, #16
   10324:	af00      	add	r7, sp, #0
   10326:	6078      	str	r0, [r7, #4]
   10328:	6039      	str	r1, [r7, #0]
    mp_obj_t exc = (n_args == 2) ? args[1] : args[2];
   1032a:	687b      	ldr	r3, [r7, #4]
   1032c:	2b02      	cmp	r3, #2
   1032e:	d102      	bne.n	10336 <gen_instance_throw+0x16>
   10330:	683b      	ldr	r3, [r7, #0]
   10332:	685b      	ldr	r3, [r3, #4]
   10334:	e001      	b.n	1033a <gen_instance_throw+0x1a>
   10336:	683b      	ldr	r3, [r7, #0]
   10338:	689b      	ldr	r3, [r3, #8]
   1033a:	60fb      	str	r3, [r7, #12]

    mp_obj_t ret = gen_resume_and_raise(args[0], mp_const_none, exc);
   1033c:	683b      	ldr	r3, [r7, #0]
   1033e:	681b      	ldr	r3, [r3, #0]
   10340:	68fa      	ldr	r2, [r7, #12]
   10342:	490a      	ldr	r1, [pc, #40]	; (1036c <gen_instance_throw+0x4c>)
   10344:	4618      	mov	r0, r3
   10346:	f7ff ff8b 	bl	10260 <gen_resume_and_raise>
   1034a:	60b8      	str	r0, [r7, #8]
    if (ret == MP_OBJ_STOP_ITERATION) {
   1034c:	68bb      	ldr	r3, [r7, #8]
   1034e:	2b04      	cmp	r3, #4
   10350:	d106      	bne.n	10360 <gen_instance_throw+0x40>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   10352:	4807      	ldr	r0, [pc, #28]	; (10370 <gen_instance_throw+0x50>)
   10354:	f7ff f912 	bl	f57c <mp_obj_new_exception>
   10358:	4603      	mov	r3, r0
   1035a:	4618      	mov	r0, r3
   1035c:	f7ef ffc0 	bl	2e0 <nlr_jump>
    } else {
        return ret;
   10360:	68bb      	ldr	r3, [r7, #8]
    }
}
   10362:	4618      	mov	r0, r3
   10364:	3710      	adds	r7, #16
   10366:	46bd      	mov	sp, r7
   10368:	bd80      	pop	{r7, pc}
   1036a:	bf00      	nop
   1036c:	000234d4 	.word	0x000234d4
   10370:	00022334 	.word	0x00022334

00010374 <gen_instance_close>:

STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(gen_instance_throw_obj, 2, 4, gen_instance_throw);

STATIC mp_obj_t gen_instance_close(mp_obj_t self_in) {
   10374:	b580      	push	{r7, lr}
   10376:	b084      	sub	sp, #16
   10378:	af00      	add	r7, sp, #0
   1037a:	6078      	str	r0, [r7, #4]
    mp_obj_t ret;
    switch (mp_obj_gen_resume(self_in, mp_const_none, MP_OBJ_FROM_PTR(&mp_const_GeneratorExit_obj), &ret)) {
   1037c:	f107 030c 	add.w	r3, r7, #12
   10380:	4a12      	ldr	r2, [pc, #72]	; (103cc <gen_instance_close+0x58>)
   10382:	4913      	ldr	r1, [pc, #76]	; (103d0 <gen_instance_close+0x5c>)
   10384:	6878      	ldr	r0, [r7, #4]
   10386:	f7ff feb1 	bl	100ec <mp_obj_gen_resume>
   1038a:	4603      	mov	r3, r0
   1038c:	2b01      	cmp	r3, #1
   1038e:	d002      	beq.n	10396 <gen_instance_close+0x22>
   10390:	2b02      	cmp	r3, #2
   10392:	d004      	beq.n	1039e <gen_instance_close+0x2a>
   10394:	e015      	b.n	103c2 <gen_instance_close+0x4e>
        case MP_VM_RETURN_YIELD:
            mp_raise_msg(&mp_type_RuntimeError, "generator ignored GeneratorExit");
   10396:	490f      	ldr	r1, [pc, #60]	; (103d4 <gen_instance_close+0x60>)
   10398:	480f      	ldr	r0, [pc, #60]	; (103d8 <gen_instance_close+0x64>)
   1039a:	f7fc fdeb 	bl	cf74 <mp_raise_msg>

        // Swallow GeneratorExit (== successful close), and re-raise any other
        case MP_VM_RETURN_EXCEPTION:
            // ret should always be an instance of an exception class
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit))) {
   1039e:	68fb      	ldr	r3, [r7, #12]
   103a0:	4618      	mov	r0, r3
   103a2:	f7fd fa77 	bl	d894 <mp_obj_get_type>
   103a6:	4603      	mov	r3, r0
   103a8:	490c      	ldr	r1, [pc, #48]	; (103dc <gen_instance_close+0x68>)
   103aa:	4618      	mov	r0, r3
   103ac:	f007 f8ac 	bl	17508 <mp_obj_is_subclass_fast>
   103b0:	4603      	mov	r3, r0
   103b2:	2b00      	cmp	r3, #0
   103b4:	d001      	beq.n	103ba <gen_instance_close+0x46>
                return mp_const_none;
   103b6:	4b06      	ldr	r3, [pc, #24]	; (103d0 <gen_instance_close+0x5c>)
   103b8:	e004      	b.n	103c4 <gen_instance_close+0x50>
            }
            nlr_raise(ret);
   103ba:	68fb      	ldr	r3, [r7, #12]
   103bc:	4618      	mov	r0, r3
   103be:	f7ef ff8f 	bl	2e0 <nlr_jump>

        default:
            // The only choice left is MP_VM_RETURN_NORMAL which is successful close
            return mp_const_none;
   103c2:	4b03      	ldr	r3, [pc, #12]	; (103d0 <gen_instance_close+0x5c>)
    }
}
   103c4:	4618      	mov	r0, r3
   103c6:	3710      	adds	r7, #16
   103c8:	46bd      	mov	sp, r7
   103ca:	bd80      	pop	{r7, pc}
   103cc:	000221f0 	.word	0x000221f0
   103d0:	000234d4 	.word	0x000234d4
   103d4:	00022db0 	.word	0x00022db0
   103d8:	0002267c 	.word	0x0002267c
   103dc:	000222bc 	.word	0x000222bc

000103e0 <gen_instance_pend_throw>:

STATIC MP_DEFINE_CONST_FUN_OBJ_1(gen_instance_close_obj, gen_instance_close);

STATIC mp_obj_t gen_instance_pend_throw(mp_obj_t self_in, mp_obj_t exc_in) {
   103e0:	b580      	push	{r7, lr}
   103e2:	b084      	sub	sp, #16
   103e4:	af00      	add	r7, sp, #0
   103e6:	6078      	str	r0, [r7, #4]
   103e8:	6039      	str	r1, [r7, #0]
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
   103ea:	687b      	ldr	r3, [r7, #4]
   103ec:	60fb      	str	r3, [r7, #12]
    if (self->code_state.sp == self->code_state.state - 1) {
   103ee:	68fb      	ldr	r3, [r7, #12]
   103f0:	691a      	ldr	r2, [r3, #16]
   103f2:	68fb      	ldr	r3, [r7, #12]
   103f4:	331c      	adds	r3, #28
   103f6:	3b04      	subs	r3, #4
   103f8:	429a      	cmp	r2, r3
   103fa:	d102      	bne.n	10402 <gen_instance_pend_throw+0x22>
        mp_raise_TypeError("can't pend throw to just-started generator");
   103fc:	4807      	ldr	r0, [pc, #28]	; (1041c <gen_instance_pend_throw+0x3c>)
   103fe:	f7fc fddb 	bl	cfb8 <mp_raise_TypeError>
    }
    mp_obj_t prev = *self->code_state.sp;
   10402:	68fb      	ldr	r3, [r7, #12]
   10404:	691b      	ldr	r3, [r3, #16]
   10406:	681b      	ldr	r3, [r3, #0]
   10408:	60bb      	str	r3, [r7, #8]
    *self->code_state.sp = exc_in;
   1040a:	68fb      	ldr	r3, [r7, #12]
   1040c:	691b      	ldr	r3, [r3, #16]
   1040e:	683a      	ldr	r2, [r7, #0]
   10410:	601a      	str	r2, [r3, #0]
    return prev;
   10412:	68bb      	ldr	r3, [r7, #8]
}
   10414:	4618      	mov	r0, r3
   10416:	3710      	adds	r7, #16
   10418:	46bd      	mov	sp, r7
   1041a:	bd80      	pop	{r7, pc}
   1041c:	00022dd8 	.word	0x00022dd8

00010420 <it_iternext>:
typedef struct _mp_obj_getitem_iter_t {
    mp_obj_base_t base;
    mp_obj_t args[3];
} mp_obj_getitem_iter_t;

STATIC mp_obj_t it_iternext(mp_obj_t self_in) {
   10420:	b580      	push	{r7, lr}
   10422:	b092      	sub	sp, #72	; 0x48
   10424:	af00      	add	r7, sp, #0
   10426:	6078      	str	r0, [r7, #4]
    mp_obj_getitem_iter_t *self = MP_OBJ_TO_PTR(self_in);
   10428:	687b      	ldr	r3, [r7, #4]
   1042a:	647b      	str	r3, [r7, #68]	; 0x44
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   1042c:	f107 030c 	add.w	r3, r7, #12
   10430:	4618      	mov	r0, r3
   10432:	f7ef ff43 	bl	2bc <nlr_push>
   10436:	4603      	mov	r3, r0
   10438:	2b00      	cmp	r3, #0
   1043a:	d115      	bne.n	10468 <it_iternext+0x48>
        // try to get next item
        mp_obj_t value = mp_call_method_n_kw(1, 0, self->args);
   1043c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1043e:	3304      	adds	r3, #4
   10440:	461a      	mov	r2, r3
   10442:	2100      	movs	r1, #0
   10444:	2001      	movs	r0, #1
   10446:	f7fb fd27 	bl	be98 <mp_call_method_n_kw>
   1044a:	6438      	str	r0, [r7, #64]	; 0x40
        self->args[2] = MP_OBJ_NEW_SMALL_INT(MP_OBJ_SMALL_INT_VALUE(self->args[2]) + 1);
   1044c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1044e:	68db      	ldr	r3, [r3, #12]
   10450:	105b      	asrs	r3, r3, #1
   10452:	3301      	adds	r3, #1
   10454:	005b      	lsls	r3, r3, #1
   10456:	f043 0301 	orr.w	r3, r3, #1
   1045a:	461a      	mov	r2, r3
   1045c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1045e:	60da      	str	r2, [r3, #12]
        nlr_pop();
   10460:	f7ef ff1a 	bl	298 <nlr_pop>
        return value;
   10464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10466:	e010      	b.n	1048a <it_iternext+0x6a>
    } else {
        // an exception was raised
        mp_obj_type_t *t = (mp_obj_type_t*)((mp_obj_base_t*)nlr.ret_val)->type;
   10468:	693b      	ldr	r3, [r7, #16]
   1046a:	681b      	ldr	r3, [r3, #0]
   1046c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (t == &mp_type_StopIteration || t == &mp_type_IndexError) {
   1046e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10470:	4a08      	ldr	r2, [pc, #32]	; (10494 <it_iternext+0x74>)
   10472:	4293      	cmp	r3, r2
   10474:	d003      	beq.n	1047e <it_iternext+0x5e>
   10476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10478:	4a07      	ldr	r2, [pc, #28]	; (10498 <it_iternext+0x78>)
   1047a:	4293      	cmp	r3, r2
   1047c:	d101      	bne.n	10482 <it_iternext+0x62>
            // return MP_OBJ_STOP_ITERATION instead of raising
            return MP_OBJ_STOP_ITERATION;
   1047e:	2304      	movs	r3, #4
   10480:	e003      	b.n	1048a <it_iternext+0x6a>
        } else {
            // re-raise exception
            nlr_jump(nlr.ret_val);
   10482:	693b      	ldr	r3, [r7, #16]
   10484:	4618      	mov	r0, r3
   10486:	f7ef ff2b 	bl	2e0 <nlr_jump>
        }
    }
}
   1048a:	4618      	mov	r0, r3
   1048c:	3748      	adds	r7, #72	; 0x48
   1048e:	46bd      	mov	sp, r7
   10490:	bd80      	pop	{r7, pc}
   10492:	bf00      	nop
   10494:	00022334 	.word	0x00022334
   10498:	00022550 	.word	0x00022550

0001049c <mp_obj_new_getitem_iter>:
    .getiter = mp_identity_getiter,
    .iternext = it_iternext,
};

// args are those returned from mp_load_method_maybe (ie either an attribute or a method)
mp_obj_t mp_obj_new_getitem_iter(mp_obj_t *args, mp_obj_iter_buf_t *iter_buf) {
   1049c:	b480      	push	{r7}
   1049e:	b085      	sub	sp, #20
   104a0:	af00      	add	r7, sp, #0
   104a2:	6078      	str	r0, [r7, #4]
   104a4:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_getitem_iter_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_getitem_iter_t *o = (mp_obj_getitem_iter_t*)iter_buf;
   104a6:	683b      	ldr	r3, [r7, #0]
   104a8:	60fb      	str	r3, [r7, #12]
    o->base.type = &it_type;
   104aa:	68fb      	ldr	r3, [r7, #12]
   104ac:	4a09      	ldr	r2, [pc, #36]	; (104d4 <mp_obj_new_getitem_iter+0x38>)
   104ae:	601a      	str	r2, [r3, #0]
    o->args[0] = args[0];
   104b0:	687b      	ldr	r3, [r7, #4]
   104b2:	681a      	ldr	r2, [r3, #0]
   104b4:	68fb      	ldr	r3, [r7, #12]
   104b6:	605a      	str	r2, [r3, #4]
    o->args[1] = args[1];
   104b8:	687b      	ldr	r3, [r7, #4]
   104ba:	685a      	ldr	r2, [r3, #4]
   104bc:	68fb      	ldr	r3, [r7, #12]
   104be:	609a      	str	r2, [r3, #8]
    o->args[2] = MP_OBJ_NEW_SMALL_INT(0);
   104c0:	68fb      	ldr	r3, [r7, #12]
   104c2:	2201      	movs	r2, #1
   104c4:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   104c6:	68fb      	ldr	r3, [r7, #12]
}
   104c8:	4618      	mov	r0, r3
   104ca:	3714      	adds	r7, #20
   104cc:	46bd      	mov	sp, r7
   104ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   104d2:	4770      	bx	lr
   104d4:	00022e8c 	.word	0x00022e8c

000104d8 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   104d8:	b480      	push	{r7}
   104da:	b083      	sub	sp, #12
   104dc:	af00      	add	r7, sp, #0
   104de:	6078      	str	r0, [r7, #4]
   104e0:	687b      	ldr	r3, [r7, #4]
   104e2:	f003 0301 	and.w	r3, r3, #1
   104e6:	2b00      	cmp	r3, #0
   104e8:	bf14      	ite	ne
   104ea:	2301      	movne	r3, #1
   104ec:	2300      	moveq	r3, #0
   104ee:	b2db      	uxtb	r3, r3
   104f0:	4618      	mov	r0, r3
   104f2:	370c      	adds	r7, #12
   104f4:	46bd      	mov	sp, r7
   104f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   104fa:	4770      	bx	lr

000104fc <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
   104fc:	b480      	push	{r7}
   104fe:	b083      	sub	sp, #12
   10500:	af00      	add	r7, sp, #0
   10502:	6078      	str	r0, [r7, #4]
   10504:	687b      	ldr	r3, [r7, #4]
   10506:	f003 0303 	and.w	r3, r3, #3
   1050a:	2b02      	cmp	r3, #2
   1050c:	bf0c      	ite	eq
   1050e:	2301      	moveq	r3, #1
   10510:	2300      	movne	r3, #0
   10512:	b2db      	uxtb	r3, r3
   10514:	4618      	mov	r0, r3
   10516:	370c      	adds	r7, #12
   10518:	46bd      	mov	sp, r7
   1051a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1051e:	4770      	bx	lr

00010520 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   10520:	b480      	push	{r7}
   10522:	b083      	sub	sp, #12
   10524:	af00      	add	r7, sp, #0
   10526:	6078      	str	r0, [r7, #4]
   10528:	687b      	ldr	r3, [r7, #4]
   1052a:	f003 0303 	and.w	r3, r3, #3
   1052e:	2b00      	cmp	r3, #0
   10530:	bf0c      	ite	eq
   10532:	2301      	moveq	r3, #1
   10534:	2300      	movne	r3, #0
   10536:	b2db      	uxtb	r3, r3
   10538:	4618      	mov	r0, r3
   1053a:	370c      	adds	r7, #12
   1053c:	46bd      	mov	sp, r7
   1053e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10542:	4770      	bx	lr

00010544 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   10544:	b580      	push	{r7, lr}
   10546:	b084      	sub	sp, #16
   10548:	af00      	add	r7, sp, #0
   1054a:	60f8      	str	r0, [r7, #12]
   1054c:	60b9      	str	r1, [r7, #8]
   1054e:	607a      	str	r2, [r7, #4]
   10550:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   10552:	687b      	ldr	r3, [r7, #4]
   10554:	045a      	lsls	r2, r3, #17
   10556:	683b      	ldr	r3, [r7, #0]
   10558:	005b      	lsls	r3, r3, #1
   1055a:	431a      	orrs	r2, r3
   1055c:	7e3b      	ldrb	r3, [r7, #24]
   1055e:	2b00      	cmp	r3, #0
   10560:	d001      	beq.n	10566 <mp_arg_check_num+0x22>
   10562:	2301      	movs	r3, #1
   10564:	e000      	b.n	10568 <mp_arg_check_num+0x24>
   10566:	2300      	movs	r3, #0
   10568:	4313      	orrs	r3, r2
   1056a:	461a      	mov	r2, r3
   1056c:	68b9      	ldr	r1, [r7, #8]
   1056e:	68f8      	ldr	r0, [r7, #12]
   10570:	f7fc fd8e 	bl	d090 <mp_arg_check_num_sig>
}
   10574:	bf00      	nop
   10576:	3710      	adds	r7, #16
   10578:	46bd      	mov	sp, r7
   1057a:	bd80      	pop	{r7, pc}

0001057c <mp_obj_int_make_new>:
#if MICROPY_PY_BUILTINS_FLOAT
#include <math.h>
#endif

// This dispatcher function is expected to be independent of the implementation of long int
STATIC mp_obj_t mp_obj_int_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1057c:	b590      	push	{r4, r7, lr}
   1057e:	b08b      	sub	sp, #44	; 0x2c
   10580:	af02      	add	r7, sp, #8
   10582:	60f8      	str	r0, [r7, #12]
   10584:	60b9      	str	r1, [r7, #8]
   10586:	607a      	str	r2, [r7, #4]
   10588:	603b      	str	r3, [r7, #0]
    (void)type_in;
    mp_arg_check_num(n_args, n_kw, 0, 2, false);
   1058a:	2300      	movs	r3, #0
   1058c:	9300      	str	r3, [sp, #0]
   1058e:	2302      	movs	r3, #2
   10590:	2200      	movs	r2, #0
   10592:	6879      	ldr	r1, [r7, #4]
   10594:	68b8      	ldr	r0, [r7, #8]
   10596:	f7ff ffd5 	bl	10544 <mp_arg_check_num>

    switch (n_args) {
   1059a:	68bb      	ldr	r3, [r7, #8]
   1059c:	2b00      	cmp	r3, #0
   1059e:	d002      	beq.n	105a6 <mp_obj_int_make_new+0x2a>
   105a0:	2b01      	cmp	r3, #1
   105a2:	d002      	beq.n	105aa <mp_obj_int_make_new+0x2e>
   105a4:	e04a      	b.n	1063c <mp_obj_int_make_new+0xc0>
        case 0:
            return MP_OBJ_NEW_SMALL_INT(0);
   105a6:	2301      	movs	r3, #1
   105a8:	e05f      	b.n	1066a <mp_obj_int_make_new+0xee>

        case 1:
            if (MP_OBJ_IS_INT(args[0])) {
   105aa:	683b      	ldr	r3, [r7, #0]
   105ac:	681b      	ldr	r3, [r3, #0]
   105ae:	4618      	mov	r0, r3
   105b0:	f7ff ff92 	bl	104d8 <MP_OBJ_IS_SMALL_INT>
   105b4:	4603      	mov	r3, r0
   105b6:	2b00      	cmp	r3, #0
   105b8:	d10d      	bne.n	105d6 <mp_obj_int_make_new+0x5a>
   105ba:	683b      	ldr	r3, [r7, #0]
   105bc:	681b      	ldr	r3, [r3, #0]
   105be:	4618      	mov	r0, r3
   105c0:	f7ff ffae 	bl	10520 <MP_OBJ_IS_OBJ>
   105c4:	4603      	mov	r3, r0
   105c6:	2b00      	cmp	r3, #0
   105c8:	d008      	beq.n	105dc <mp_obj_int_make_new+0x60>
   105ca:	683b      	ldr	r3, [r7, #0]
   105cc:	681b      	ldr	r3, [r3, #0]
   105ce:	681b      	ldr	r3, [r3, #0]
   105d0:	4a28      	ldr	r2, [pc, #160]	; (10674 <mp_obj_int_make_new+0xf8>)
   105d2:	4293      	cmp	r3, r2
   105d4:	d102      	bne.n	105dc <mp_obj_int_make_new+0x60>
                // already an int (small or long), just return it
                return args[0];
   105d6:	683b      	ldr	r3, [r7, #0]
   105d8:	681b      	ldr	r3, [r3, #0]
   105da:	e046      	b.n	1066a <mp_obj_int_make_new+0xee>
            } else if (MP_OBJ_IS_STR_OR_BYTES(args[0])) {
   105dc:	683b      	ldr	r3, [r7, #0]
   105de:	681b      	ldr	r3, [r3, #0]
   105e0:	4618      	mov	r0, r3
   105e2:	f7ff ff8b 	bl	104fc <MP_OBJ_IS_QSTR>
   105e6:	4603      	mov	r3, r0
   105e8:	2b00      	cmp	r3, #0
   105ea:	d10e      	bne.n	1060a <mp_obj_int_make_new+0x8e>
   105ec:	683b      	ldr	r3, [r7, #0]
   105ee:	681b      	ldr	r3, [r3, #0]
   105f0:	4618      	mov	r0, r3
   105f2:	f7ff ff95 	bl	10520 <MP_OBJ_IS_OBJ>
   105f6:	4603      	mov	r3, r0
   105f8:	2b00      	cmp	r3, #0
   105fa:	d017      	beq.n	1062c <mp_obj_int_make_new+0xb0>
   105fc:	683b      	ldr	r3, [r7, #0]
   105fe:	681b      	ldr	r3, [r3, #0]
   10600:	681b      	ldr	r3, [r3, #0]
   10602:	699b      	ldr	r3, [r3, #24]
   10604:	4a1c      	ldr	r2, [pc, #112]	; (10678 <mp_obj_int_make_new+0xfc>)
   10606:	4293      	cmp	r3, r2
   10608:	d110      	bne.n	1062c <mp_obj_int_make_new+0xb0>
                // a string, parse it
                size_t l;
                const char *s = mp_obj_str_get_data(args[0], &l);
   1060a:	683b      	ldr	r3, [r7, #0]
   1060c:	681b      	ldr	r3, [r3, #0]
   1060e:	f107 0214 	add.w	r2, r7, #20
   10612:	4611      	mov	r1, r2
   10614:	4618      	mov	r0, r3
   10616:	f005 f8eb 	bl	157f0 <mp_obj_str_get_data>
   1061a:	61f8      	str	r0, [r7, #28]
                return mp_parse_num_integer(s, l, 0, NULL);
   1061c:	6979      	ldr	r1, [r7, #20]
   1061e:	2300      	movs	r3, #0
   10620:	2200      	movs	r2, #0
   10622:	69f8      	ldr	r0, [r7, #28]
   10624:	f7fa fccc 	bl	afc0 <mp_parse_num_integer>
   10628:	4603      	mov	r3, r0
   1062a:	e01e      	b.n	1066a <mp_obj_int_make_new+0xee>
#if MICROPY_PY_BUILTINS_FLOAT
            } else if (mp_obj_is_float(args[0])) {
                return mp_obj_new_int_from_float(mp_obj_float_get(args[0]));
#endif
            } else {
                return mp_unary_op(MP_UNARY_OP_INT, args[0]);
   1062c:	683b      	ldr	r3, [r7, #0]
   1062e:	681b      	ldr	r3, [r3, #0]
   10630:	4619      	mov	r1, r3
   10632:	2008      	movs	r0, #8
   10634:	f7fb f886 	bl	b744 <mp_unary_op>
   10638:	4603      	mov	r3, r0
   1063a:	e016      	b.n	1066a <mp_obj_int_make_new+0xee>

        case 2:
        default: {
            // should be a string, parse it
            size_t l;
            const char *s = mp_obj_str_get_data(args[0], &l);
   1063c:	683b      	ldr	r3, [r7, #0]
   1063e:	681b      	ldr	r3, [r3, #0]
   10640:	f107 0210 	add.w	r2, r7, #16
   10644:	4611      	mov	r1, r2
   10646:	4618      	mov	r0, r3
   10648:	f005 f8d2 	bl	157f0 <mp_obj_str_get_data>
   1064c:	61b8      	str	r0, [r7, #24]
            return mp_parse_num_integer(s, l, mp_obj_get_int(args[1]), NULL);
   1064e:	693c      	ldr	r4, [r7, #16]
   10650:	683b      	ldr	r3, [r7, #0]
   10652:	3304      	adds	r3, #4
   10654:	681b      	ldr	r3, [r3, #0]
   10656:	4618      	mov	r0, r3
   10658:	f7fd fafa 	bl	dc50 <mp_obj_get_int>
   1065c:	4602      	mov	r2, r0
   1065e:	2300      	movs	r3, #0
   10660:	4621      	mov	r1, r4
   10662:	69b8      	ldr	r0, [r7, #24]
   10664:	f7fa fcac 	bl	afc0 <mp_parse_num_integer>
   10668:	4603      	mov	r3, r0
        }
    }
}
   1066a:	4618      	mov	r0, r3
   1066c:	3724      	adds	r7, #36	; 0x24
   1066e:	46bd      	mov	sp, r7
   10670:	bd90      	pop	{r4, r7, pc}
   10672:	bf00      	nop
   10674:	00022f80 	.word	0x00022f80
   10678:	000129d5 	.word	0x000129d5

0001067c <mp_obj_int_print>:
#else
typedef mp_int_t fmt_int_t;
typedef mp_uint_t fmt_uint_t;
#endif

void mp_obj_int_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   1067c:	b580      	push	{r7, lr}
   1067e:	b090      	sub	sp, #64	; 0x40
   10680:	af04      	add	r7, sp, #16
   10682:	60f8      	str	r0, [r7, #12]
   10684:	60b9      	str	r1, [r7, #8]
   10686:	607a      	str	r2, [r7, #4]
    (void)kind;
    // The size of this buffer is rather arbitrary. If it's not large
    // enough, a dynamic one will be allocated.
    char stack_buf[sizeof(fmt_int_t) * 4];
    char *buf = stack_buf;
   10688:	f107 031c 	add.w	r3, r7, #28
   1068c:	61bb      	str	r3, [r7, #24]
    size_t buf_size = sizeof(stack_buf);
   1068e:	2310      	movs	r3, #16
   10690:	617b      	str	r3, [r7, #20]
    size_t fmt_size;

    char *str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size, self_in, 10, NULL, '\0', '\0');
   10692:	f107 0210 	add.w	r2, r7, #16
   10696:	f107 0114 	add.w	r1, r7, #20
   1069a:	f107 0018 	add.w	r0, r7, #24
   1069e:	2300      	movs	r3, #0
   106a0:	9303      	str	r3, [sp, #12]
   106a2:	2300      	movs	r3, #0
   106a4:	9302      	str	r3, [sp, #8]
   106a6:	2300      	movs	r3, #0
   106a8:	9301      	str	r3, [sp, #4]
   106aa:	230a      	movs	r3, #10
   106ac:	9300      	str	r3, [sp, #0]
   106ae:	68bb      	ldr	r3, [r7, #8]
   106b0:	f000 f858 	bl	10764 <mp_obj_int_formatted>
   106b4:	62f8      	str	r0, [r7, #44]	; 0x2c
    mp_print_str(print, str);
   106b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   106b8:	68f8      	ldr	r0, [r7, #12]
   106ba:	f7f1 f9a9 	bl	1a10 <mp_print_str>

    if (buf != stack_buf) {
   106be:	69ba      	ldr	r2, [r7, #24]
   106c0:	f107 031c 	add.w	r3, r7, #28
   106c4:	429a      	cmp	r2, r3
   106c6:	d003      	beq.n	106d0 <mp_obj_int_print+0x54>
        m_del(char, buf, buf_size);
   106c8:	69bb      	ldr	r3, [r7, #24]
   106ca:	4618      	mov	r0, r3
   106cc:	f7ef fea0 	bl	410 <m_free>
    }
}
   106d0:	bf00      	nop
   106d2:	3730      	adds	r7, #48	; 0x30
   106d4:	46bd      	mov	sp, r7
   106d6:	bd80      	pop	{r7, pc}

000106d8 <mp_int_format_size>:
    4, 4, 4, 4,
    4, 4, 4, 5
    */
};

size_t mp_int_format_size(size_t num_bits, int base, const char *prefix, char comma) {
   106d8:	b580      	push	{r7, lr}
   106da:	b088      	sub	sp, #32
   106dc:	af00      	add	r7, sp, #0
   106de:	60f8      	str	r0, [r7, #12]
   106e0:	60b9      	str	r1, [r7, #8]
   106e2:	607a      	str	r2, [r7, #4]
   106e4:	70fb      	strb	r3, [r7, #3]
    assert(2 <= base && base <= 16);
   106e6:	68bb      	ldr	r3, [r7, #8]
   106e8:	2b01      	cmp	r3, #1
   106ea:	dd02      	ble.n	106f2 <mp_int_format_size+0x1a>
   106ec:	68bb      	ldr	r3, [r7, #8]
   106ee:	2b10      	cmp	r3, #16
   106f0:	dd05      	ble.n	106fe <mp_int_format_size+0x26>
   106f2:	4b17      	ldr	r3, [pc, #92]	; (10750 <mp_int_format_size+0x78>)
   106f4:	4a17      	ldr	r2, [pc, #92]	; (10754 <mp_int_format_size+0x7c>)
   106f6:	21ce      	movs	r1, #206	; 0xce
   106f8:	4817      	ldr	r0, [pc, #92]	; (10758 <mp_int_format_size+0x80>)
   106fa:	f00b f843 	bl	1b784 <__assert_func>
    size_t num_digits = num_bits / log_base2_floor[base - 1] + 1;
   106fe:	68bb      	ldr	r3, [r7, #8]
   10700:	3b01      	subs	r3, #1
   10702:	4a16      	ldr	r2, [pc, #88]	; (1075c <mp_int_format_size+0x84>)
   10704:	5cd3      	ldrb	r3, [r2, r3]
   10706:	461a      	mov	r2, r3
   10708:	68fb      	ldr	r3, [r7, #12]
   1070a:	fbb3 f3f2 	udiv	r3, r3, r2
   1070e:	3301      	adds	r3, #1
   10710:	61fb      	str	r3, [r7, #28]
    size_t num_commas = comma ? num_digits / 3 : 0;
   10712:	78fb      	ldrb	r3, [r7, #3]
   10714:	2b00      	cmp	r3, #0
   10716:	d005      	beq.n	10724 <mp_int_format_size+0x4c>
   10718:	69fb      	ldr	r3, [r7, #28]
   1071a:	4a11      	ldr	r2, [pc, #68]	; (10760 <mp_int_format_size+0x88>)
   1071c:	fba2 2303 	umull	r2, r3, r2, r3
   10720:	085b      	lsrs	r3, r3, #1
   10722:	e000      	b.n	10726 <mp_int_format_size+0x4e>
   10724:	2300      	movs	r3, #0
   10726:	61bb      	str	r3, [r7, #24]
    size_t prefix_len = prefix ? strlen(prefix) : 0;
   10728:	687b      	ldr	r3, [r7, #4]
   1072a:	2b00      	cmp	r3, #0
   1072c:	d004      	beq.n	10738 <mp_int_format_size+0x60>
   1072e:	6878      	ldr	r0, [r7, #4]
   10730:	f00c fc68 	bl	1d004 <strlen>
   10734:	4603      	mov	r3, r0
   10736:	e000      	b.n	1073a <mp_int_format_size+0x62>
   10738:	2300      	movs	r3, #0
   1073a:	617b      	str	r3, [r7, #20]
    return num_digits + num_commas + prefix_len + 2; // +1 for sign, +1 for null byte
   1073c:	69fa      	ldr	r2, [r7, #28]
   1073e:	69bb      	ldr	r3, [r7, #24]
   10740:	441a      	add	r2, r3
   10742:	697b      	ldr	r3, [r7, #20]
   10744:	4413      	add	r3, r2
   10746:	3302      	adds	r3, #2
}
   10748:	4618      	mov	r0, r3
   1074a:	3720      	adds	r7, #32
   1074c:	46bd      	mov	sp, r7
   1074e:	bd80      	pop	{r7, pc}
   10750:	00022ed8 	.word	0x00022ed8
   10754:	00022fbc 	.word	0x00022fbc
   10758:	00022ef0 	.word	0x00022ef0
   1075c:	00022ec8 	.word	0x00022ec8
   10760:	aaaaaaab 	.word	0xaaaaaaab

00010764 <mp_obj_int_formatted>:
// is the callers responsibility to free this allocated buffer.
//
// The resulting formatted string will be returned from this function and the
// formatted size will be in *fmt_size.
char *mp_obj_int_formatted(char **buf, size_t *buf_size, size_t *fmt_size, mp_const_obj_t self_in,
                           int base, const char *prefix, char base_char, char comma) {
   10764:	b580      	push	{r7, lr}
   10766:	b08e      	sub	sp, #56	; 0x38
   10768:	af00      	add	r7, sp, #0
   1076a:	60f8      	str	r0, [r7, #12]
   1076c:	60b9      	str	r1, [r7, #8]
   1076e:	607a      	str	r2, [r7, #4]
   10770:	603b      	str	r3, [r7, #0]
    fmt_int_t num;
    #if MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_NONE
    // Only have small ints; get the integer value to format.
    num = MP_OBJ_SMALL_INT_VALUE(self_in);
   10772:	683b      	ldr	r3, [r7, #0]
   10774:	105b      	asrs	r3, r3, #1
   10776:	637b      	str	r3, [r7, #52]	; 0x34
        return mp_obj_int_formatted_impl(buf, buf_size, fmt_size, self_in, base, prefix, base_char, comma);
        #endif
    }
    #endif

    char sign = '\0';
   10778:	2300      	movs	r3, #0
   1077a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (num < 0) {
   1077e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10780:	2b00      	cmp	r3, #0
   10782:	da05      	bge.n	10790 <mp_obj_int_formatted+0x2c>
        num = -num;
   10784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10786:	425b      	negs	r3, r3
   10788:	637b      	str	r3, [r7, #52]	; 0x34
        sign = '-';
   1078a:	232d      	movs	r3, #45	; 0x2d
   1078c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }

    size_t needed_size = mp_int_format_size(sizeof(fmt_int_t) * 8, base, prefix, comma);
   10790:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   10794:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   10796:	6c39      	ldr	r1, [r7, #64]	; 0x40
   10798:	2020      	movs	r0, #32
   1079a:	f7ff ff9d 	bl	106d8 <mp_int_format_size>
   1079e:	61f8      	str	r0, [r7, #28]
    if (needed_size > *buf_size) {
   107a0:	68bb      	ldr	r3, [r7, #8]
   107a2:	681a      	ldr	r2, [r3, #0]
   107a4:	69fb      	ldr	r3, [r7, #28]
   107a6:	429a      	cmp	r2, r3
   107a8:	d208      	bcs.n	107bc <mp_obj_int_formatted+0x58>
        *buf = m_new(char, needed_size);
   107aa:	69f8      	ldr	r0, [r7, #28]
   107ac:	f7ef fdb6 	bl	31c <m_malloc>
   107b0:	4602      	mov	r2, r0
   107b2:	68fb      	ldr	r3, [r7, #12]
   107b4:	601a      	str	r2, [r3, #0]
        *buf_size = needed_size;
   107b6:	68bb      	ldr	r3, [r7, #8]
   107b8:	69fa      	ldr	r2, [r7, #28]
   107ba:	601a      	str	r2, [r3, #0]
    }
    char *str = *buf;
   107bc:	68fb      	ldr	r3, [r7, #12]
   107be:	681b      	ldr	r3, [r3, #0]
   107c0:	61bb      	str	r3, [r7, #24]

    char *b = str + needed_size;
   107c2:	69ba      	ldr	r2, [r7, #24]
   107c4:	69fb      	ldr	r3, [r7, #28]
   107c6:	4413      	add	r3, r2
   107c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *(--b) = '\0';
   107ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   107cc:	3b01      	subs	r3, #1
   107ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   107d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   107d2:	2200      	movs	r2, #0
   107d4:	701a      	strb	r2, [r3, #0]
    char *last_comma = b;
   107d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   107d8:	62bb      	str	r3, [r7, #40]	; 0x28

    if (num == 0) {
   107da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   107dc:	2b00      	cmp	r3, #0
   107de:	d106      	bne.n	107ee <mp_obj_int_formatted+0x8a>
        *(--b) = '0';
   107e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   107e2:	3b01      	subs	r3, #1
   107e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   107e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   107e8:	2230      	movs	r2, #48	; 0x30
   107ea:	701a      	strb	r2, [r3, #0]
   107ec:	e040      	b.n	10870 <mp_obj_int_formatted+0x10c>
    } else {
        do {
            // The cast to fmt_uint_t is because num is positive and we want unsigned arithmetic
            int c = (fmt_uint_t)num % base;
   107ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   107f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   107f2:	fbb3 f1f2 	udiv	r1, r3, r2
   107f6:	fb02 f201 	mul.w	r2, r2, r1
   107fa:	1a9b      	subs	r3, r3, r2
   107fc:	627b      	str	r3, [r7, #36]	; 0x24
            num = (fmt_uint_t)num / base;
   107fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   10800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10802:	fbb2 f3f3 	udiv	r3, r2, r3
   10806:	637b      	str	r3, [r7, #52]	; 0x34
            if (c >= 10) {
   10808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1080a:	2b09      	cmp	r3, #9
   1080c:	dd06      	ble.n	1081c <mp_obj_int_formatted+0xb8>
                c += base_char - 10;
   1080e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
   10812:	3b0a      	subs	r3, #10
   10814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10816:	4413      	add	r3, r2
   10818:	627b      	str	r3, [r7, #36]	; 0x24
   1081a:	e002      	b.n	10822 <mp_obj_int_formatted+0xbe>
            } else {
                c += '0';
   1081c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1081e:	3330      	adds	r3, #48	; 0x30
   10820:	627b      	str	r3, [r7, #36]	; 0x24
            }
            *(--b) = c;
   10822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10824:	3b01      	subs	r3, #1
   10826:	62fb      	str	r3, [r7, #44]	; 0x2c
   10828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1082a:	b2da      	uxtb	r2, r3
   1082c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1082e:	701a      	strb	r2, [r3, #0]
            if (comma && num != 0 && b > str && (last_comma - b) == 3) {
   10830:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   10834:	2b00      	cmp	r3, #0
   10836:	d014      	beq.n	10862 <mp_obj_int_formatted+0xfe>
   10838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1083a:	2b00      	cmp	r3, #0
   1083c:	d011      	beq.n	10862 <mp_obj_int_formatted+0xfe>
   1083e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10840:	69bb      	ldr	r3, [r7, #24]
   10842:	429a      	cmp	r2, r3
   10844:	d90d      	bls.n	10862 <mp_obj_int_formatted+0xfe>
   10846:	6aba      	ldr	r2, [r7, #40]	; 0x28
   10848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1084a:	1ad3      	subs	r3, r2, r3
   1084c:	2b03      	cmp	r3, #3
   1084e:	d108      	bne.n	10862 <mp_obj_int_formatted+0xfe>
                *(--b) = comma;
   10850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10852:	3b01      	subs	r3, #1
   10854:	62fb      	str	r3, [r7, #44]	; 0x2c
   10856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10858:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
   1085c:	701a      	strb	r2, [r3, #0]
                last_comma = b;
   1085e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10860:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }
        while (b > str && num != 0);
   10862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10864:	69bb      	ldr	r3, [r7, #24]
   10866:	429a      	cmp	r2, r3
   10868:	d902      	bls.n	10870 <mp_obj_int_formatted+0x10c>
   1086a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1086c:	2b00      	cmp	r3, #0
   1086e:	d1be      	bne.n	107ee <mp_obj_int_formatted+0x8a>
    }
    if (prefix) {
   10870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10872:	2b00      	cmp	r3, #0
   10874:	d01b      	beq.n	108ae <mp_obj_int_formatted+0x14a>
        size_t prefix_len = strlen(prefix);
   10876:	6c78      	ldr	r0, [r7, #68]	; 0x44
   10878:	f00c fbc4 	bl	1d004 <strlen>
   1087c:	6178      	str	r0, [r7, #20]
        char *p = b - prefix_len;
   1087e:	697b      	ldr	r3, [r7, #20]
   10880:	425b      	negs	r3, r3
   10882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10884:	4413      	add	r3, r2
   10886:	623b      	str	r3, [r7, #32]
        if (p > str) {
   10888:	6a3a      	ldr	r2, [r7, #32]
   1088a:	69bb      	ldr	r3, [r7, #24]
   1088c:	429a      	cmp	r2, r3
   1088e:	d90e      	bls.n	108ae <mp_obj_int_formatted+0x14a>
            b = p;
   10890:	6a3b      	ldr	r3, [r7, #32]
   10892:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (*prefix) {
   10894:	e007      	b.n	108a6 <mp_obj_int_formatted+0x142>
                *p++ = *prefix++;
   10896:	6a3b      	ldr	r3, [r7, #32]
   10898:	1c5a      	adds	r2, r3, #1
   1089a:	623a      	str	r2, [r7, #32]
   1089c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1089e:	1c51      	adds	r1, r2, #1
   108a0:	6479      	str	r1, [r7, #68]	; 0x44
   108a2:	7812      	ldrb	r2, [r2, #0]
   108a4:	701a      	strb	r2, [r3, #0]
            while (*prefix) {
   108a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   108a8:	781b      	ldrb	r3, [r3, #0]
   108aa:	2b00      	cmp	r3, #0
   108ac:	d1f3      	bne.n	10896 <mp_obj_int_formatted+0x132>
            }
        }
    }
    if (sign && b > str) {
   108ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   108b2:	2b00      	cmp	r3, #0
   108b4:	d00a      	beq.n	108cc <mp_obj_int_formatted+0x168>
   108b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   108b8:	69bb      	ldr	r3, [r7, #24]
   108ba:	429a      	cmp	r2, r3
   108bc:	d906      	bls.n	108cc <mp_obj_int_formatted+0x168>
        *(--b) = sign;
   108be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   108c0:	3b01      	subs	r3, #1
   108c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   108c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   108c6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
   108ca:	701a      	strb	r2, [r3, #0]
    }
    *fmt_size = *buf + needed_size - b - 1;
   108cc:	68fb      	ldr	r3, [r7, #12]
   108ce:	681a      	ldr	r2, [r3, #0]
   108d0:	69fb      	ldr	r3, [r7, #28]
   108d2:	4413      	add	r3, r2
   108d4:	461a      	mov	r2, r3
   108d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   108d8:	1ad3      	subs	r3, r2, r3
   108da:	3b01      	subs	r3, #1
   108dc:	461a      	mov	r2, r3
   108de:	687b      	ldr	r3, [r7, #4]
   108e0:	601a      	str	r2, [r3, #0]

    return b;
   108e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   108e4:	4618      	mov	r0, r3
   108e6:	3738      	adds	r7, #56	; 0x38
   108e8:	46bd      	mov	sp, r7
   108ea:	bd80      	pop	{r7, pc}

000108ec <mp_obj_int_sign>:

#if MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_NONE

int mp_obj_int_sign(mp_obj_t self_in) {
   108ec:	b580      	push	{r7, lr}
   108ee:	b084      	sub	sp, #16
   108f0:	af00      	add	r7, sp, #0
   108f2:	6078      	str	r0, [r7, #4]
    mp_int_t val = mp_obj_get_int(self_in);
   108f4:	6878      	ldr	r0, [r7, #4]
   108f6:	f7fd f9ab 	bl	dc50 <mp_obj_get_int>
   108fa:	60f8      	str	r0, [r7, #12]
    if (val < 0) {
   108fc:	68fb      	ldr	r3, [r7, #12]
   108fe:	2b00      	cmp	r3, #0
   10900:	da02      	bge.n	10908 <mp_obj_int_sign+0x1c>
        return -1;
   10902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10906:	e005      	b.n	10914 <mp_obj_int_sign+0x28>
    } else if (val > 0) {
   10908:	68fb      	ldr	r3, [r7, #12]
   1090a:	2b00      	cmp	r3, #0
   1090c:	dd01      	ble.n	10912 <mp_obj_int_sign+0x26>
        return 1;
   1090e:	2301      	movs	r3, #1
   10910:	e000      	b.n	10914 <mp_obj_int_sign+0x28>
    } else {
        return 0;
   10912:	2300      	movs	r3, #0
    }
}
   10914:	4618      	mov	r0, r3
   10916:	3710      	adds	r7, #16
   10918:	46bd      	mov	sp, r7
   1091a:	bd80      	pop	{r7, pc}

0001091c <mp_obj_int_unary_op>:

// This is called for operations on SMALL_INT that are not handled by mp_unary_op
mp_obj_t mp_obj_int_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
   1091c:	b480      	push	{r7}
   1091e:	b083      	sub	sp, #12
   10920:	af00      	add	r7, sp, #0
   10922:	6078      	str	r0, [r7, #4]
   10924:	6039      	str	r1, [r7, #0]
    return MP_OBJ_NULL; // op not supported
   10926:	2300      	movs	r3, #0
}
   10928:	4618      	mov	r0, r3
   1092a:	370c      	adds	r7, #12
   1092c:	46bd      	mov	sp, r7
   1092e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10932:	4770      	bx	lr

00010934 <mp_obj_int_binary_op>:

// This is called for operations on SMALL_INT that are not handled by mp_binary_op
mp_obj_t mp_obj_int_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   10934:	b580      	push	{r7, lr}
   10936:	b084      	sub	sp, #16
   10938:	af00      	add	r7, sp, #0
   1093a:	60f8      	str	r0, [r7, #12]
   1093c:	60b9      	str	r1, [r7, #8]
   1093e:	607a      	str	r2, [r7, #4]
    return mp_obj_int_binary_op_extra_cases(op, lhs_in, rhs_in);
   10940:	687a      	ldr	r2, [r7, #4]
   10942:	68b9      	ldr	r1, [r7, #8]
   10944:	68f8      	ldr	r0, [r7, #12]
   10946:	f000 f87f 	bl	10a48 <mp_obj_int_binary_op_extra_cases>
   1094a:	4603      	mov	r3, r0
}
   1094c:	4618      	mov	r0, r3
   1094e:	3710      	adds	r7, #16
   10950:	46bd      	mov	sp, r7
   10952:	bd80      	pop	{r7, pc}

00010954 <mp_obj_new_int_from_str_len>:

// This is called only with strings whose value doesn't fit in SMALL_INT
mp_obj_t mp_obj_new_int_from_str_len(const char **str, size_t len, bool neg, unsigned int base) {
   10954:	b580      	push	{r7, lr}
   10956:	b084      	sub	sp, #16
   10958:	af00      	add	r7, sp, #0
   1095a:	60f8      	str	r0, [r7, #12]
   1095c:	60b9      	str	r1, [r7, #8]
   1095e:	603b      	str	r3, [r7, #0]
   10960:	4613      	mov	r3, r2
   10962:	71fb      	strb	r3, [r7, #7]
    mp_raise_msg(&mp_type_OverflowError, "long int not supported in this build");
   10964:	4901      	ldr	r1, [pc, #4]	; (1096c <mp_obj_new_int_from_str_len+0x18>)
   10966:	4802      	ldr	r0, [pc, #8]	; (10970 <mp_obj_new_int_from_str_len+0x1c>)
   10968:	f7fc fb04 	bl	cf74 <mp_raise_msg>
   1096c:	00022f04 	.word	0x00022f04
   10970:	000223ac 	.word	0x000223ac

00010974 <mp_obj_new_int_from_ll>:
    return mp_const_none;
}

// This is called when an integer larger than a SMALL_INT is needed (although val might still fit in a SMALL_INT)
mp_obj_t mp_obj_new_int_from_ll(long long val) {
   10974:	b580      	push	{r7, lr}
   10976:	b082      	sub	sp, #8
   10978:	af00      	add	r7, sp, #0
   1097a:	e9c7 0100 	strd	r0, r1, [r7]
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   1097e:	4902      	ldr	r1, [pc, #8]	; (10988 <mp_obj_new_int_from_ll+0x14>)
   10980:	4802      	ldr	r0, [pc, #8]	; (1098c <mp_obj_new_int_from_ll+0x18>)
   10982:	f7fc faf7 	bl	cf74 <mp_raise_msg>
   10986:	bf00      	nop
   10988:	00022f2c 	.word	0x00022f2c
   1098c:	000223ac 	.word	0x000223ac

00010990 <mp_obj_new_int_from_ull>:
    return mp_const_none;
}

// This is called when an integer larger than a SMALL_INT is needed (although val might still fit in a SMALL_INT)
mp_obj_t mp_obj_new_int_from_ull(unsigned long long val) {
   10990:	b580      	push	{r7, lr}
   10992:	b082      	sub	sp, #8
   10994:	af00      	add	r7, sp, #0
   10996:	e9c7 0100 	strd	r0, r1, [r7]
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   1099a:	4902      	ldr	r1, [pc, #8]	; (109a4 <mp_obj_new_int_from_ull+0x14>)
   1099c:	4802      	ldr	r0, [pc, #8]	; (109a8 <mp_obj_new_int_from_ull+0x18>)
   1099e:	f7fc fae9 	bl	cf74 <mp_raise_msg>
   109a2:	bf00      	nop
   109a4:	00022f2c 	.word	0x00022f2c
   109a8:	000223ac 	.word	0x000223ac

000109ac <mp_obj_new_int_from_uint>:
    return mp_const_none;
}

mp_obj_t mp_obj_new_int_from_uint(mp_uint_t value) {
   109ac:	b580      	push	{r7, lr}
   109ae:	b082      	sub	sp, #8
   109b0:	af00      	add	r7, sp, #0
   109b2:	6078      	str	r0, [r7, #4]
    // SMALL_INT accepts only signed numbers, so make sure the input
    // value fits completely in the small-int positive range.
    if ((value & ~MP_SMALL_INT_POSITIVE_MASK) == 0) {
   109b4:	687b      	ldr	r3, [r7, #4]
   109b6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
   109ba:	2b00      	cmp	r3, #0
   109bc:	d104      	bne.n	109c8 <mp_obj_new_int_from_uint+0x1c>
        return MP_OBJ_NEW_SMALL_INT(value);
   109be:	687b      	ldr	r3, [r7, #4]
   109c0:	005b      	lsls	r3, r3, #1
   109c2:	f043 0301 	orr.w	r3, r3, #1
   109c6:	e003      	b.n	109d0 <mp_obj_new_int_from_uint+0x24>
    }
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   109c8:	4903      	ldr	r1, [pc, #12]	; (109d8 <mp_obj_new_int_from_uint+0x2c>)
   109ca:	4804      	ldr	r0, [pc, #16]	; (109dc <mp_obj_new_int_from_uint+0x30>)
   109cc:	f7fc fad2 	bl	cf74 <mp_raise_msg>
    return mp_const_none;
}
   109d0:	4618      	mov	r0, r3
   109d2:	3708      	adds	r7, #8
   109d4:	46bd      	mov	sp, r7
   109d6:	bd80      	pop	{r7, pc}
   109d8:	00022f2c 	.word	0x00022f2c
   109dc:	000223ac 	.word	0x000223ac

000109e0 <mp_obj_new_int>:

mp_obj_t mp_obj_new_int(mp_int_t value) {
   109e0:	b580      	push	{r7, lr}
   109e2:	b082      	sub	sp, #8
   109e4:	af00      	add	r7, sp, #0
   109e6:	6078      	str	r0, [r7, #4]
    if (MP_SMALL_INT_FITS(value)) {
   109e8:	687b      	ldr	r3, [r7, #4]
   109ea:	005a      	lsls	r2, r3, #1
   109ec:	687b      	ldr	r3, [r7, #4]
   109ee:	4053      	eors	r3, r2
   109f0:	2b00      	cmp	r3, #0
   109f2:	db04      	blt.n	109fe <mp_obj_new_int+0x1e>
        return MP_OBJ_NEW_SMALL_INT(value);
   109f4:	687b      	ldr	r3, [r7, #4]
   109f6:	005b      	lsls	r3, r3, #1
   109f8:	f043 0301 	orr.w	r3, r3, #1
   109fc:	e003      	b.n	10a06 <mp_obj_new_int+0x26>
    }
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   109fe:	4904      	ldr	r1, [pc, #16]	; (10a10 <mp_obj_new_int+0x30>)
   10a00:	4804      	ldr	r0, [pc, #16]	; (10a14 <mp_obj_new_int+0x34>)
   10a02:	f7fc fab7 	bl	cf74 <mp_raise_msg>
    return mp_const_none;
}
   10a06:	4618      	mov	r0, r3
   10a08:	3708      	adds	r7, #8
   10a0a:	46bd      	mov	sp, r7
   10a0c:	bd80      	pop	{r7, pc}
   10a0e:	bf00      	nop
   10a10:	00022f2c 	.word	0x00022f2c
   10a14:	000223ac 	.word	0x000223ac

00010a18 <mp_obj_int_get_truncated>:

mp_int_t mp_obj_int_get_truncated(mp_const_obj_t self_in) {
   10a18:	b480      	push	{r7}
   10a1a:	b083      	sub	sp, #12
   10a1c:	af00      	add	r7, sp, #0
   10a1e:	6078      	str	r0, [r7, #4]
    return MP_OBJ_SMALL_INT_VALUE(self_in);
   10a20:	687b      	ldr	r3, [r7, #4]
   10a22:	105b      	asrs	r3, r3, #1
}
   10a24:	4618      	mov	r0, r3
   10a26:	370c      	adds	r7, #12
   10a28:	46bd      	mov	sp, r7
   10a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   10a2e:	4770      	bx	lr

00010a30 <mp_obj_int_get_checked>:

mp_int_t mp_obj_int_get_checked(mp_const_obj_t self_in) {
   10a30:	b480      	push	{r7}
   10a32:	b083      	sub	sp, #12
   10a34:	af00      	add	r7, sp, #0
   10a36:	6078      	str	r0, [r7, #4]
    return MP_OBJ_SMALL_INT_VALUE(self_in);
   10a38:	687b      	ldr	r3, [r7, #4]
   10a3a:	105b      	asrs	r3, r3, #1
}
   10a3c:	4618      	mov	r0, r3
   10a3e:	370c      	adds	r7, #12
   10a40:	46bd      	mov	sp, r7
   10a42:	f85d 7b04 	ldr.w	r7, [sp], #4
   10a46:	4770      	bx	lr

00010a48 <mp_obj_int_binary_op_extra_cases>:

#endif // MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_NONE

// This dispatcher function is expected to be independent of the implementation of long int
// It handles the extra cases for integer-like arithmetic
mp_obj_t mp_obj_int_binary_op_extra_cases(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   10a48:	b580      	push	{r7, lr}
   10a4a:	b084      	sub	sp, #16
   10a4c:	af00      	add	r7, sp, #0
   10a4e:	60f8      	str	r0, [r7, #12]
   10a50:	60b9      	str	r1, [r7, #8]
   10a52:	607a      	str	r2, [r7, #4]
    if (rhs_in == mp_const_false) {
   10a54:	687b      	ldr	r3, [r7, #4]
   10a56:	4a26      	ldr	r2, [pc, #152]	; (10af0 <mp_obj_int_binary_op_extra_cases+0xa8>)
   10a58:	4293      	cmp	r3, r2
   10a5a:	d106      	bne.n	10a6a <mp_obj_int_binary_op_extra_cases+0x22>
        // false acts as 0
        return mp_binary_op(op, lhs_in, MP_OBJ_NEW_SMALL_INT(0));
   10a5c:	2201      	movs	r2, #1
   10a5e:	68b9      	ldr	r1, [r7, #8]
   10a60:	68f8      	ldr	r0, [r7, #12]
   10a62:	f7fa ff5f 	bl	b924 <mp_binary_op>
   10a66:	4603      	mov	r3, r0
   10a68:	e03d      	b.n	10ae6 <mp_obj_int_binary_op_extra_cases+0x9e>
    } else if (rhs_in == mp_const_true) {
   10a6a:	687b      	ldr	r3, [r7, #4]
   10a6c:	4a21      	ldr	r2, [pc, #132]	; (10af4 <mp_obj_int_binary_op_extra_cases+0xac>)
   10a6e:	4293      	cmp	r3, r2
   10a70:	d106      	bne.n	10a80 <mp_obj_int_binary_op_extra_cases+0x38>
        // true acts as 0
        return mp_binary_op(op, lhs_in, MP_OBJ_NEW_SMALL_INT(1));
   10a72:	2203      	movs	r2, #3
   10a74:	68b9      	ldr	r1, [r7, #8]
   10a76:	68f8      	ldr	r0, [r7, #12]
   10a78:	f7fa ff54 	bl	b924 <mp_binary_op>
   10a7c:	4603      	mov	r3, r0
   10a7e:	e032      	b.n	10ae6 <mp_obj_int_binary_op_extra_cases+0x9e>
    } else if (op == MP_BINARY_OP_MULTIPLY) {
   10a80:	68fb      	ldr	r3, [r7, #12]
   10a82:	2b1c      	cmp	r3, #28
   10a84:	d12e      	bne.n	10ae4 <mp_obj_int_binary_op_extra_cases+0x9c>
        if (MP_OBJ_IS_STR_OR_BYTES(rhs_in) || MP_OBJ_IS_TYPE(rhs_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(rhs_in, &mp_type_list)) {
   10a86:	6878      	ldr	r0, [r7, #4]
   10a88:	f7ff fd38 	bl	104fc <MP_OBJ_IS_QSTR>
   10a8c:	4603      	mov	r3, r0
   10a8e:	2b00      	cmp	r3, #0
   10a90:	d121      	bne.n	10ad6 <mp_obj_int_binary_op_extra_cases+0x8e>
   10a92:	6878      	ldr	r0, [r7, #4]
   10a94:	f7ff fd44 	bl	10520 <MP_OBJ_IS_OBJ>
   10a98:	4603      	mov	r3, r0
   10a9a:	2b00      	cmp	r3, #0
   10a9c:	d005      	beq.n	10aaa <mp_obj_int_binary_op_extra_cases+0x62>
   10a9e:	687b      	ldr	r3, [r7, #4]
   10aa0:	681b      	ldr	r3, [r3, #0]
   10aa2:	699b      	ldr	r3, [r3, #24]
   10aa4:	4a14      	ldr	r2, [pc, #80]	; (10af8 <mp_obj_int_binary_op_extra_cases+0xb0>)
   10aa6:	4293      	cmp	r3, r2
   10aa8:	d015      	beq.n	10ad6 <mp_obj_int_binary_op_extra_cases+0x8e>
   10aaa:	6878      	ldr	r0, [r7, #4]
   10aac:	f7ff fd38 	bl	10520 <MP_OBJ_IS_OBJ>
   10ab0:	4603      	mov	r3, r0
   10ab2:	2b00      	cmp	r3, #0
   10ab4:	d004      	beq.n	10ac0 <mp_obj_int_binary_op_extra_cases+0x78>
   10ab6:	687b      	ldr	r3, [r7, #4]
   10ab8:	681b      	ldr	r3, [r3, #0]
   10aba:	4a10      	ldr	r2, [pc, #64]	; (10afc <mp_obj_int_binary_op_extra_cases+0xb4>)
   10abc:	4293      	cmp	r3, r2
   10abe:	d00a      	beq.n	10ad6 <mp_obj_int_binary_op_extra_cases+0x8e>
   10ac0:	6878      	ldr	r0, [r7, #4]
   10ac2:	f7ff fd2d 	bl	10520 <MP_OBJ_IS_OBJ>
   10ac6:	4603      	mov	r3, r0
   10ac8:	2b00      	cmp	r3, #0
   10aca:	d00b      	beq.n	10ae4 <mp_obj_int_binary_op_extra_cases+0x9c>
   10acc:	687b      	ldr	r3, [r7, #4]
   10ace:	681b      	ldr	r3, [r3, #0]
   10ad0:	4a0b      	ldr	r2, [pc, #44]	; (10b00 <mp_obj_int_binary_op_extra_cases+0xb8>)
   10ad2:	4293      	cmp	r3, r2
   10ad4:	d106      	bne.n	10ae4 <mp_obj_int_binary_op_extra_cases+0x9c>
            // multiply is commutative for these types, so delegate to them
            return mp_binary_op(op, rhs_in, lhs_in);
   10ad6:	68ba      	ldr	r2, [r7, #8]
   10ad8:	6879      	ldr	r1, [r7, #4]
   10ada:	68f8      	ldr	r0, [r7, #12]
   10adc:	f7fa ff22 	bl	b924 <mp_binary_op>
   10ae0:	4603      	mov	r3, r0
   10ae2:	e000      	b.n	10ae6 <mp_obj_int_binary_op_extra_cases+0x9e>
        }
    }
    return MP_OBJ_NULL; // op not supported
   10ae4:	2300      	movs	r3, #0
}
   10ae6:	4618      	mov	r0, r3
   10ae8:	3710      	adds	r7, #16
   10aea:	46bd      	mov	sp, r7
   10aec:	bd80      	pop	{r7, pc}
   10aee:	bf00      	nop
   10af0:	00021c58 	.word	0x00021c58
   10af4:	00021c60 	.word	0x00021c60
   10af8:	000129d5 	.word	0x000129d5
   10afc:	00023dec 	.word	0x00023dec
   10b00:	000231ec 	.word	0x000231ec

00010b04 <int_from_bytes>:

// this is a classmethod
STATIC mp_obj_t int_from_bytes(size_t n_args, const mp_obj_t *args) {
   10b04:	b580      	push	{r7, lr}
   10b06:	b08a      	sub	sp, #40	; 0x28
   10b08:	af00      	add	r7, sp, #0
   10b0a:	6078      	str	r0, [r7, #4]
   10b0c:	6039      	str	r1, [r7, #0]
    // TODO: Support signed param (assumes signed=False at the moment)
    (void)n_args;

    // get the buffer info
    mp_buffer_info_t bufinfo;
    mp_get_buffer_raise(args[1], &bufinfo, MP_BUFFER_READ);
   10b0e:	683b      	ldr	r3, [r7, #0]
   10b10:	3304      	adds	r3, #4
   10b12:	681b      	ldr	r3, [r3, #0]
   10b14:	f107 010c 	add.w	r1, r7, #12
   10b18:	2201      	movs	r2, #1
   10b1a:	4618      	mov	r0, r3
   10b1c:	f7fd fad0 	bl	e0c0 <mp_get_buffer_raise>

    const byte* buf = (const byte*)bufinfo.buf;
   10b20:	68fb      	ldr	r3, [r7, #12]
   10b22:	627b      	str	r3, [r7, #36]	; 0x24
    int delta = 1;
   10b24:	2301      	movs	r3, #1
   10b26:	623b      	str	r3, [r7, #32]
    if (args[2] == MP_OBJ_NEW_QSTR(MP_QSTR_little)) {
   10b28:	683b      	ldr	r3, [r7, #0]
   10b2a:	3308      	adds	r3, #8
   10b2c:	681b      	ldr	r3, [r3, #0]
   10b2e:	f240 42de 	movw	r2, #1246	; 0x4de
   10b32:	4293      	cmp	r3, r2
   10b34:	d107      	bne.n	10b46 <int_from_bytes+0x42>
        buf += bufinfo.len - 1;
   10b36:	693b      	ldr	r3, [r7, #16]
   10b38:	3b01      	subs	r3, #1
   10b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10b3c:	4413      	add	r3, r2
   10b3e:	627b      	str	r3, [r7, #36]	; 0x24
        delta = -1;
   10b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10b44:	623b      	str	r3, [r7, #32]
    }

    mp_uint_t value = 0;
   10b46:	2300      	movs	r3, #0
   10b48:	61fb      	str	r3, [r7, #28]
    size_t len = bufinfo.len;
   10b4a:	693b      	ldr	r3, [r7, #16]
   10b4c:	61bb      	str	r3, [r7, #24]
    for (; len--; buf += delta) {
   10b4e:	e009      	b.n	10b64 <int_from_bytes+0x60>
        if (value > (MP_SMALL_INT_MAX >> 8)) {
            // Result will overflow a small-int so construct a big-int
            return mp_obj_int_from_bytes_impl(args[2] != MP_OBJ_NEW_QSTR(MP_QSTR_little), bufinfo.len, bufinfo.buf);
        }
        #endif
        value = (value << 8) | *buf;
   10b50:	69fb      	ldr	r3, [r7, #28]
   10b52:	021b      	lsls	r3, r3, #8
   10b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10b56:	7812      	ldrb	r2, [r2, #0]
   10b58:	4313      	orrs	r3, r2
   10b5a:	61fb      	str	r3, [r7, #28]
    for (; len--; buf += delta) {
   10b5c:	6a3b      	ldr	r3, [r7, #32]
   10b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10b60:	4413      	add	r3, r2
   10b62:	627b      	str	r3, [r7, #36]	; 0x24
   10b64:	69bb      	ldr	r3, [r7, #24]
   10b66:	1e5a      	subs	r2, r3, #1
   10b68:	61ba      	str	r2, [r7, #24]
   10b6a:	2b00      	cmp	r3, #0
   10b6c:	d1f0      	bne.n	10b50 <int_from_bytes+0x4c>
    }
    return mp_obj_new_int_from_uint(value);
   10b6e:	69f8      	ldr	r0, [r7, #28]
   10b70:	f7ff ff1c 	bl	109ac <mp_obj_new_int_from_uint>
   10b74:	4603      	mov	r3, r0
}
   10b76:	4618      	mov	r0, r3
   10b78:	3728      	adds	r7, #40	; 0x28
   10b7a:	46bd      	mov	sp, r7
   10b7c:	bd80      	pop	{r7, pc}
   10b7e:	bf00      	nop

00010b80 <int_to_bytes>:

STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(int_from_bytes_fun_obj, 3, 4, int_from_bytes);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(int_from_bytes_obj, MP_ROM_PTR(&int_from_bytes_fun_obj));

STATIC mp_obj_t int_to_bytes(size_t n_args, const mp_obj_t *args) {
   10b80:	b580      	push	{r7, lr}
   10b82:	b08c      	sub	sp, #48	; 0x30
   10b84:	af00      	add	r7, sp, #0
   10b86:	6078      	str	r0, [r7, #4]
   10b88:	6039      	str	r1, [r7, #0]
    // TODO: Support signed param (assumes signed=False)
    (void)n_args;

    mp_int_t len = mp_obj_get_int(args[1]);
   10b8a:	683b      	ldr	r3, [r7, #0]
   10b8c:	3304      	adds	r3, #4
   10b8e:	681b      	ldr	r3, [r3, #0]
   10b90:	4618      	mov	r0, r3
   10b92:	f7fd f85d 	bl	dc50 <mp_obj_get_int>
   10b96:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (len < 0) {
   10b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10b9a:	2b00      	cmp	r3, #0
   10b9c:	da02      	bge.n	10ba4 <int_to_bytes+0x24>
        mp_raise_ValueError(NULL);
   10b9e:	2000      	movs	r0, #0
   10ba0:	f7fc fa00 	bl	cfa4 <mp_raise_ValueError>
    }
    bool big_endian = args[2] != MP_OBJ_NEW_QSTR(MP_QSTR_little);
   10ba4:	683b      	ldr	r3, [r7, #0]
   10ba6:	3308      	adds	r3, #8
   10ba8:	681b      	ldr	r3, [r3, #0]
   10baa:	f240 42de 	movw	r2, #1246	; 0x4de
   10bae:	4293      	cmp	r3, r2
   10bb0:	bf14      	ite	ne
   10bb2:	2301      	movne	r3, #1
   10bb4:	2300      	moveq	r3, #0
   10bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    vstr_t vstr;
    vstr_init_len(&vstr, len);
   10bba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10bbc:	f107 030c 	add.w	r3, r7, #12
   10bc0:	4611      	mov	r1, r2
   10bc2:	4618      	mov	r0, r3
   10bc4:	f7f0 fc88 	bl	14d8 <vstr_init_len>
    byte *data = (byte*)vstr.buf;
   10bc8:	697b      	ldr	r3, [r7, #20]
   10bca:	627b      	str	r3, [r7, #36]	; 0x24
    memset(data, 0, len);
   10bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10bce:	461a      	mov	r2, r3
   10bd0:	2100      	movs	r1, #0
   10bd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
   10bd4:	f00c f978 	bl	1cec8 <memset>
    if (!MP_OBJ_IS_SMALL_INT(args[0])) {
        mp_obj_int_to_bytes_impl(args[0], big_endian, len, data);
    } else
    #endif
    {
        mp_int_t val = MP_OBJ_SMALL_INT_VALUE(args[0]);
   10bd8:	683b      	ldr	r3, [r7, #0]
   10bda:	681b      	ldr	r3, [r3, #0]
   10bdc:	105b      	asrs	r3, r3, #1
   10bde:	623b      	str	r3, [r7, #32]
        size_t l = MIN((size_t)len, sizeof(val));
   10be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10be2:	2b04      	cmp	r3, #4
   10be4:	bf28      	it	cs
   10be6:	2304      	movcs	r3, #4
   10be8:	61fb      	str	r3, [r7, #28]
        mp_binary_set_int(l, big_endian, data + (big_endian ? (len - l) : 0), val);
   10bea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   10bee:	2b00      	cmp	r3, #0
   10bf0:	d003      	beq.n	10bfa <int_to_bytes+0x7a>
   10bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10bf4:	69fb      	ldr	r3, [r7, #28]
   10bf6:	1ad3      	subs	r3, r2, r3
   10bf8:	e000      	b.n	10bfc <int_to_bytes+0x7c>
   10bfa:	2300      	movs	r3, #0
   10bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10bfe:	441a      	add	r2, r3
   10c00:	6a3b      	ldr	r3, [r7, #32]
   10c02:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
   10c06:	69f8      	ldr	r0, [r7, #28]
   10c08:	f007 fc74 	bl	184f4 <mp_binary_set_int>
    }

    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   10c0c:	f107 030c 	add.w	r3, r7, #12
   10c10:	4619      	mov	r1, r3
   10c12:	4804      	ldr	r0, [pc, #16]	; (10c24 <int_to_bytes+0xa4>)
   10c14:	f004 fc28 	bl	15468 <mp_obj_new_str_from_vstr>
   10c18:	4603      	mov	r3, r0
}
   10c1a:	4618      	mov	r0, r3
   10c1c:	3730      	adds	r7, #48	; 0x30
   10c1e:	46bd      	mov	sp, r7
   10c20:	bd80      	pop	{r7, pc}
   10c22:	bf00      	nop
   10c24:	00023ba4 	.word	0x00023ba4

00010c28 <MP_OBJ_IS_OBJ>:
   10c28:	b480      	push	{r7}
   10c2a:	b083      	sub	sp, #12
   10c2c:	af00      	add	r7, sp, #0
   10c2e:	6078      	str	r0, [r7, #4]
   10c30:	687b      	ldr	r3, [r7, #4]
   10c32:	f003 0303 	and.w	r3, r3, #3
   10c36:	2b00      	cmp	r3, #0
   10c38:	bf0c      	ite	eq
   10c3a:	2301      	moveq	r3, #1
   10c3c:	2300      	movne	r3, #0
   10c3e:	b2db      	uxtb	r3, r3
   10c40:	4618      	mov	r0, r3
   10c42:	370c      	adds	r7, #12
   10c44:	46bd      	mov	sp, r7
   10c46:	f85d 7b04 	ldr.w	r7, [sp], #4
   10c4a:	4770      	bx	lr

00010c4c <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   10c4c:	b480      	push	{r7}
   10c4e:	b083      	sub	sp, #12
   10c50:	af00      	add	r7, sp, #0
   10c52:	6078      	str	r0, [r7, #4]
   10c54:	687b      	ldr	r3, [r7, #4]
   10c56:	2b00      	cmp	r3, #0
   10c58:	d001      	beq.n	10c5e <mp_obj_new_bool+0x12>
   10c5a:	4b04      	ldr	r3, [pc, #16]	; (10c6c <mp_obj_new_bool+0x20>)
   10c5c:	e000      	b.n	10c60 <mp_obj_new_bool+0x14>
   10c5e:	4b04      	ldr	r3, [pc, #16]	; (10c70 <mp_obj_new_bool+0x24>)
   10c60:	4618      	mov	r0, r3
   10c62:	370c      	adds	r7, #12
   10c64:	46bd      	mov	sp, r7
   10c66:	f85d 7b04 	ldr.w	r7, [sp], #4
   10c6a:	4770      	bx	lr
   10c6c:	00021c60 	.word	0x00021c60
   10c70:	00021c58 	.word	0x00021c58

00010c74 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   10c74:	b580      	push	{r7, lr}
   10c76:	b084      	sub	sp, #16
   10c78:	af00      	add	r7, sp, #0
   10c7a:	60f8      	str	r0, [r7, #12]
   10c7c:	60b9      	str	r1, [r7, #8]
   10c7e:	607a      	str	r2, [r7, #4]
   10c80:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   10c82:	687b      	ldr	r3, [r7, #4]
   10c84:	045a      	lsls	r2, r3, #17
   10c86:	683b      	ldr	r3, [r7, #0]
   10c88:	005b      	lsls	r3, r3, #1
   10c8a:	431a      	orrs	r2, r3
   10c8c:	7e3b      	ldrb	r3, [r7, #24]
   10c8e:	2b00      	cmp	r3, #0
   10c90:	d001      	beq.n	10c96 <mp_arg_check_num+0x22>
   10c92:	2301      	movs	r3, #1
   10c94:	e000      	b.n	10c98 <mp_arg_check_num+0x24>
   10c96:	2300      	movs	r3, #0
   10c98:	4313      	orrs	r3, r2
   10c9a:	461a      	mov	r2, r3
   10c9c:	68b9      	ldr	r1, [r7, #8]
   10c9e:	68f8      	ldr	r0, [r7, #12]
   10ca0:	f7fc f9f6 	bl	d090 <mp_arg_check_num_sig>
}
   10ca4:	bf00      	nop
   10ca6:	3710      	adds	r7, #16
   10ca8:	46bd      	mov	sp, r7
   10caa:	bd80      	pop	{r7, pc}

00010cac <list_print>:
#define LIST_MIN_ALLOC 4

/******************************************************************************/
/* list                                                                       */

STATIC void list_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
   10cac:	b580      	push	{r7, lr}
   10cae:	b086      	sub	sp, #24
   10cb0:	af00      	add	r7, sp, #0
   10cb2:	60f8      	str	r0, [r7, #12]
   10cb4:	60b9      	str	r1, [r7, #8]
   10cb6:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *o = MP_OBJ_TO_PTR(o_in);
   10cb8:	68bb      	ldr	r3, [r7, #8]
   10cba:	613b      	str	r3, [r7, #16]
    if (!(MICROPY_PY_UJSON && kind == PRINT_JSON)) {
        kind = PRINT_REPR;
   10cbc:	2301      	movs	r3, #1
   10cbe:	607b      	str	r3, [r7, #4]
    }
    mp_print_str(print, "[");
   10cc0:	4914      	ldr	r1, [pc, #80]	; (10d14 <list_print+0x68>)
   10cc2:	68f8      	ldr	r0, [r7, #12]
   10cc4:	f7f0 fea4 	bl	1a10 <mp_print_str>
    for (size_t i = 0; i < o->len; i++) {
   10cc8:	2300      	movs	r3, #0
   10cca:	617b      	str	r3, [r7, #20]
   10ccc:	e014      	b.n	10cf8 <list_print+0x4c>
        if (i > 0) {
   10cce:	697b      	ldr	r3, [r7, #20]
   10cd0:	2b00      	cmp	r3, #0
   10cd2:	d003      	beq.n	10cdc <list_print+0x30>
            mp_print_str(print, ", ");
   10cd4:	4910      	ldr	r1, [pc, #64]	; (10d18 <list_print+0x6c>)
   10cd6:	68f8      	ldr	r0, [r7, #12]
   10cd8:	f7f0 fe9a 	bl	1a10 <mp_print_str>
        }
        mp_obj_print_helper(print, o->items[i], kind);
   10cdc:	693b      	ldr	r3, [r7, #16]
   10cde:	68da      	ldr	r2, [r3, #12]
   10ce0:	697b      	ldr	r3, [r7, #20]
   10ce2:	009b      	lsls	r3, r3, #2
   10ce4:	4413      	add	r3, r2
   10ce6:	681b      	ldr	r3, [r3, #0]
   10ce8:	687a      	ldr	r2, [r7, #4]
   10cea:	4619      	mov	r1, r3
   10cec:	68f8      	ldr	r0, [r7, #12]
   10cee:	f7fc fe03 	bl	d8f8 <mp_obj_print_helper>
    for (size_t i = 0; i < o->len; i++) {
   10cf2:	697b      	ldr	r3, [r7, #20]
   10cf4:	3301      	adds	r3, #1
   10cf6:	617b      	str	r3, [r7, #20]
   10cf8:	693b      	ldr	r3, [r7, #16]
   10cfa:	689a      	ldr	r2, [r3, #8]
   10cfc:	697b      	ldr	r3, [r7, #20]
   10cfe:	429a      	cmp	r2, r3
   10d00:	d8e5      	bhi.n	10cce <list_print+0x22>
    }
    mp_print_str(print, "]");
   10d02:	4906      	ldr	r1, [pc, #24]	; (10d1c <list_print+0x70>)
   10d04:	68f8      	ldr	r0, [r7, #12]
   10d06:	f7f0 fe83 	bl	1a10 <mp_print_str>
}
   10d0a:	bf00      	nop
   10d0c:	3718      	adds	r7, #24
   10d0e:	46bd      	mov	sp, r7
   10d10:	bd80      	pop	{r7, pc}
   10d12:	bf00      	nop
   10d14:	00022fd0 	.word	0x00022fd0
   10d18:	00022fd4 	.word	0x00022fd4
   10d1c:	00022fd8 	.word	0x00022fd8

00010d20 <list_extend_from_iter>:

STATIC mp_obj_t list_extend_from_iter(mp_obj_t list, mp_obj_t iterable) {
   10d20:	b580      	push	{r7, lr}
   10d22:	b084      	sub	sp, #16
   10d24:	af00      	add	r7, sp, #0
   10d26:	6078      	str	r0, [r7, #4]
   10d28:	6039      	str	r1, [r7, #0]
    mp_obj_t iter = mp_getiter(iterable, NULL);
   10d2a:	2100      	movs	r1, #0
   10d2c:	6838      	ldr	r0, [r7, #0]
   10d2e:	f7fb fe09 	bl	c944 <mp_getiter>
   10d32:	60f8      	str	r0, [r7, #12]
    mp_obj_t item;
    while ((item = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
   10d34:	e003      	b.n	10d3e <list_extend_from_iter+0x1e>
        mp_obj_list_append(list, item);
   10d36:	68b9      	ldr	r1, [r7, #8]
   10d38:	6878      	ldr	r0, [r7, #4]
   10d3a:	f000 f985 	bl	11048 <mp_obj_list_append>
    while ((item = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
   10d3e:	68f8      	ldr	r0, [r7, #12]
   10d40:	f7fb fe82 	bl	ca48 <mp_iternext>
   10d44:	60b8      	str	r0, [r7, #8]
   10d46:	68bb      	ldr	r3, [r7, #8]
   10d48:	2b04      	cmp	r3, #4
   10d4a:	d1f4      	bne.n	10d36 <list_extend_from_iter+0x16>
    }
    return list;
   10d4c:	687b      	ldr	r3, [r7, #4]
}
   10d4e:	4618      	mov	r0, r3
   10d50:	3710      	adds	r7, #16
   10d52:	46bd      	mov	sp, r7
   10d54:	bd80      	pop	{r7, pc}
   10d56:	bf00      	nop

00010d58 <list_make_new>:

STATIC mp_obj_t list_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   10d58:	b580      	push	{r7, lr}
   10d5a:	b088      	sub	sp, #32
   10d5c:	af02      	add	r7, sp, #8
   10d5e:	60f8      	str	r0, [r7, #12]
   10d60:	60b9      	str	r1, [r7, #8]
   10d62:	607a      	str	r2, [r7, #4]
   10d64:	603b      	str	r3, [r7, #0]
    (void)type_in;
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
   10d66:	2300      	movs	r3, #0
   10d68:	9300      	str	r3, [sp, #0]
   10d6a:	2301      	movs	r3, #1
   10d6c:	2200      	movs	r2, #0
   10d6e:	6879      	ldr	r1, [r7, #4]
   10d70:	68b8      	ldr	r0, [r7, #8]
   10d72:	f7ff ff7f 	bl	10c74 <mp_arg_check_num>

    switch (n_args) {
   10d76:	68bb      	ldr	r3, [r7, #8]
   10d78:	2b00      	cmp	r3, #0
   10d7a:	d105      	bne.n	10d88 <list_make_new+0x30>
        case 0:
            // return a new, empty list
            return mp_obj_new_list(0, NULL);
   10d7c:	2100      	movs	r1, #0
   10d7e:	2000      	movs	r0, #0
   10d80:	f000 fdf4 	bl	1196c <mp_obj_new_list>
   10d84:	4603      	mov	r3, r0
   10d86:	e00b      	b.n	10da0 <list_make_new+0x48>

        case 1:
        default: {
            // make list from iterable
            // TODO: optimize list/tuple
            mp_obj_t list = mp_obj_new_list(0, NULL);
   10d88:	2100      	movs	r1, #0
   10d8a:	2000      	movs	r0, #0
   10d8c:	f000 fdee 	bl	1196c <mp_obj_new_list>
   10d90:	6178      	str	r0, [r7, #20]
            return list_extend_from_iter(list, args[0]);
   10d92:	683b      	ldr	r3, [r7, #0]
   10d94:	681b      	ldr	r3, [r3, #0]
   10d96:	4619      	mov	r1, r3
   10d98:	6978      	ldr	r0, [r7, #20]
   10d9a:	f7ff ffc1 	bl	10d20 <list_extend_from_iter>
   10d9e:	4603      	mov	r3, r0
        }
    }
}
   10da0:	4618      	mov	r0, r3
   10da2:	3718      	adds	r7, #24
   10da4:	46bd      	mov	sp, r7
   10da6:	bd80      	pop	{r7, pc}

00010da8 <list_unary_op>:

STATIC mp_obj_t list_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   10da8:	b580      	push	{r7, lr}
   10daa:	b084      	sub	sp, #16
   10dac:	af00      	add	r7, sp, #0
   10dae:	6078      	str	r0, [r7, #4]
   10db0:	6039      	str	r1, [r7, #0]
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   10db2:	683b      	ldr	r3, [r7, #0]
   10db4:	60fb      	str	r3, [r7, #12]
    switch (op) {
   10db6:	687b      	ldr	r3, [r7, #4]
   10db8:	2b04      	cmp	r3, #4
   10dba:	d002      	beq.n	10dc2 <list_unary_op+0x1a>
   10dbc:	2b05      	cmp	r3, #5
   10dbe:	d00c      	beq.n	10dda <list_unary_op+0x32>
   10dc0:	e011      	b.n	10de6 <list_unary_op+0x3e>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->len != 0);
   10dc2:	68fb      	ldr	r3, [r7, #12]
   10dc4:	689b      	ldr	r3, [r3, #8]
   10dc6:	2b00      	cmp	r3, #0
   10dc8:	bf14      	ite	ne
   10dca:	2301      	movne	r3, #1
   10dcc:	2300      	moveq	r3, #0
   10dce:	b2db      	uxtb	r3, r3
   10dd0:	4618      	mov	r0, r3
   10dd2:	f7ff ff3b 	bl	10c4c <mp_obj_new_bool>
   10dd6:	4603      	mov	r3, r0
   10dd8:	e006      	b.n	10de8 <list_unary_op+0x40>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->len);
   10dda:	68fb      	ldr	r3, [r7, #12]
   10ddc:	689b      	ldr	r3, [r3, #8]
   10dde:	005b      	lsls	r3, r3, #1
   10de0:	f043 0301 	orr.w	r3, r3, #1
   10de4:	e000      	b.n	10de8 <list_unary_op+0x40>
        case MP_UNARY_OP_SIZEOF: {
            size_t sz = sizeof(*self) + sizeof(mp_obj_t) * self->alloc;
            return MP_OBJ_NEW_SMALL_INT(sz);
        }
        #endif
        default: return MP_OBJ_NULL; // op not supported
   10de6:	2300      	movs	r3, #0
    }
}
   10de8:	4618      	mov	r0, r3
   10dea:	3710      	adds	r7, #16
   10dec:	46bd      	mov	sp, r7
   10dee:	bd80      	pop	{r7, pc}

00010df0 <list_binary_op>:

STATIC mp_obj_t list_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
   10df0:	b580      	push	{r7, lr}
   10df2:	b08e      	sub	sp, #56	; 0x38
   10df4:	af02      	add	r7, sp, #8
   10df6:	60f8      	str	r0, [r7, #12]
   10df8:	60b9      	str	r1, [r7, #8]
   10dfa:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *o = MP_OBJ_TO_PTR(lhs);
   10dfc:	68bb      	ldr	r3, [r7, #8]
   10dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch (op) {
   10e00:	68fb      	ldr	r3, [r7, #12]
   10e02:	2b1c      	cmp	r3, #28
   10e04:	f200 80d0 	bhi.w	10fa8 <list_binary_op+0x1b8>
   10e08:	a201      	add	r2, pc, #4	; (adr r2, 10e10 <list_binary_op+0x20>)
   10e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10e0e:	bf00      	nop
   10e10:	00010f51 	.word	0x00010f51
   10e14:	00010f51 	.word	0x00010f51
   10e18:	00010f51 	.word	0x00010f51
   10e1c:	00010f51 	.word	0x00010f51
   10e20:	00010f51 	.word	0x00010f51
   10e24:	00010fa9 	.word	0x00010fa9
   10e28:	00010fa9 	.word	0x00010fa9
   10e2c:	00010fa9 	.word	0x00010fa9
   10e30:	00010fa9 	.word	0x00010fa9
   10e34:	00010fa9 	.word	0x00010fa9
   10e38:	00010fa9 	.word	0x00010fa9
   10e3c:	00010fa9 	.word	0x00010fa9
   10e40:	00010fa9 	.word	0x00010fa9
   10e44:	00010fa9 	.word	0x00010fa9
   10e48:	00010eef 	.word	0x00010eef
   10e4c:	00010fa9 	.word	0x00010fa9
   10e50:	00010fa9 	.word	0x00010fa9
   10e54:	00010fa9 	.word	0x00010fa9
   10e58:	00010fa9 	.word	0x00010fa9
   10e5c:	00010fa9 	.word	0x00010fa9
   10e60:	00010fa9 	.word	0x00010fa9
   10e64:	00010fa9 	.word	0x00010fa9
   10e68:	00010fa9 	.word	0x00010fa9
   10e6c:	00010fa9 	.word	0x00010fa9
   10e70:	00010fa9 	.word	0x00010fa9
   10e74:	00010fa9 	.word	0x00010fa9
   10e78:	00010e85 	.word	0x00010e85
   10e7c:	00010fa9 	.word	0x00010fa9
   10e80:	00010efb 	.word	0x00010efb
        case MP_BINARY_OP_ADD: {
            if (!MP_OBJ_IS_TYPE(rhs, &mp_type_list)) {
   10e84:	6878      	ldr	r0, [r7, #4]
   10e86:	f7ff fecf 	bl	10c28 <MP_OBJ_IS_OBJ>
   10e8a:	4603      	mov	r3, r0
   10e8c:	f083 0301 	eor.w	r3, r3, #1
   10e90:	b2db      	uxtb	r3, r3
   10e92:	2b00      	cmp	r3, #0
   10e94:	d104      	bne.n	10ea0 <list_binary_op+0xb0>
   10e96:	687b      	ldr	r3, [r7, #4]
   10e98:	681b      	ldr	r3, [r3, #0]
   10e9a:	4a46      	ldr	r2, [pc, #280]	; (10fb4 <list_binary_op+0x1c4>)
   10e9c:	4293      	cmp	r3, r2
   10e9e:	d001      	beq.n	10ea4 <list_binary_op+0xb4>
                return MP_OBJ_NULL; // op not supported
   10ea0:	2300      	movs	r3, #0
   10ea2:	e082      	b.n	10faa <list_binary_op+0x1ba>
            }
            mp_obj_list_t *p = MP_OBJ_TO_PTR(rhs);
   10ea4:	687b      	ldr	r3, [r7, #4]
   10ea6:	62bb      	str	r3, [r7, #40]	; 0x28
            mp_obj_list_t *s = list_new(o->len + p->len);
   10ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10eaa:	689a      	ldr	r2, [r3, #8]
   10eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10eae:	689b      	ldr	r3, [r3, #8]
   10eb0:	4413      	add	r3, r2
   10eb2:	4618      	mov	r0, r3
   10eb4:	f000 fd48 	bl	11948 <list_new>
   10eb8:	6278      	str	r0, [r7, #36]	; 0x24
            mp_seq_cat(s->items, o->items, o->len, p->items, p->len, mp_obj_t);
   10eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10ebc:	68d8      	ldr	r0, [r3, #12]
   10ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10ec0:	68d9      	ldr	r1, [r3, #12]
   10ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10ec4:	689b      	ldr	r3, [r3, #8]
   10ec6:	009b      	lsls	r3, r3, #2
   10ec8:	461a      	mov	r2, r3
   10eca:	f00b ff61 	bl	1cd90 <memcpy>
   10ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10ed0:	68da      	ldr	r2, [r3, #12]
   10ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10ed4:	689b      	ldr	r3, [r3, #8]
   10ed6:	009b      	lsls	r3, r3, #2
   10ed8:	18d0      	adds	r0, r2, r3
   10eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10edc:	68d9      	ldr	r1, [r3, #12]
   10ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10ee0:	689b      	ldr	r3, [r3, #8]
   10ee2:	009b      	lsls	r3, r3, #2
   10ee4:	461a      	mov	r2, r3
   10ee6:	f00b ff53 	bl	1cd90 <memcpy>
            return MP_OBJ_FROM_PTR(s);
   10eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10eec:	e05d      	b.n	10faa <list_binary_op+0x1ba>
        }
        case MP_BINARY_OP_INPLACE_ADD: {
            list_extend(lhs, rhs);
   10eee:	6879      	ldr	r1, [r7, #4]
   10ef0:	68b8      	ldr	r0, [r7, #8]
   10ef2:	f000 f909 	bl	11108 <list_extend>
            return lhs;
   10ef6:	68bb      	ldr	r3, [r7, #8]
   10ef8:	e057      	b.n	10faa <list_binary_op+0x1ba>
        }
        case MP_BINARY_OP_MULTIPLY: {
            mp_int_t n;
            if (!mp_obj_get_int_maybe(rhs, &n)) {
   10efa:	f107 0314 	add.w	r3, r7, #20
   10efe:	4619      	mov	r1, r3
   10f00:	6878      	ldr	r0, [r7, #4]
   10f02:	f7fc ff05 	bl	dd10 <mp_obj_get_int_maybe>
   10f06:	4603      	mov	r3, r0
   10f08:	f083 0301 	eor.w	r3, r3, #1
   10f0c:	b2db      	uxtb	r3, r3
   10f0e:	2b00      	cmp	r3, #0
   10f10:	d001      	beq.n	10f16 <list_binary_op+0x126>
                return MP_OBJ_NULL; // op not supported
   10f12:	2300      	movs	r3, #0
   10f14:	e049      	b.n	10faa <list_binary_op+0x1ba>
            }
            if (n < 0) {
   10f16:	697b      	ldr	r3, [r7, #20]
   10f18:	2b00      	cmp	r3, #0
   10f1a:	da01      	bge.n	10f20 <list_binary_op+0x130>
                n = 0;
   10f1c:	2300      	movs	r3, #0
   10f1e:	617b      	str	r3, [r7, #20]
            }
            mp_obj_list_t *s = list_new(o->len * n);
   10f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10f22:	689b      	ldr	r3, [r3, #8]
   10f24:	697a      	ldr	r2, [r7, #20]
   10f26:	fb02 f303 	mul.w	r3, r2, r3
   10f2a:	4618      	mov	r0, r3
   10f2c:	f000 fd0c 	bl	11948 <list_new>
   10f30:	6238      	str	r0, [r7, #32]
            mp_seq_multiply(o->items, sizeof(*o->items), o->len, n, s->items);
   10f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10f34:	68d8      	ldr	r0, [r3, #12]
   10f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10f38:	689a      	ldr	r2, [r3, #8]
   10f3a:	697b      	ldr	r3, [r7, #20]
   10f3c:	4619      	mov	r1, r3
   10f3e:	6a3b      	ldr	r3, [r7, #32]
   10f40:	68db      	ldr	r3, [r3, #12]
   10f42:	9300      	str	r3, [sp, #0]
   10f44:	460b      	mov	r3, r1
   10f46:	2104      	movs	r1, #4
   10f48:	f006 fd38 	bl	179bc <mp_seq_multiply>
            return MP_OBJ_FROM_PTR(s);
   10f4c:	6a3b      	ldr	r3, [r7, #32]
   10f4e:	e02c      	b.n	10faa <list_binary_op+0x1ba>
        case MP_BINARY_OP_EQUAL:
        case MP_BINARY_OP_LESS:
        case MP_BINARY_OP_LESS_EQUAL:
        case MP_BINARY_OP_MORE:
        case MP_BINARY_OP_MORE_EQUAL: {
            if (!MP_OBJ_IS_TYPE(rhs, &mp_type_list)) {
   10f50:	6878      	ldr	r0, [r7, #4]
   10f52:	f7ff fe69 	bl	10c28 <MP_OBJ_IS_OBJ>
   10f56:	4603      	mov	r3, r0
   10f58:	f083 0301 	eor.w	r3, r3, #1
   10f5c:	b2db      	uxtb	r3, r3
   10f5e:	2b00      	cmp	r3, #0
   10f60:	d104      	bne.n	10f6c <list_binary_op+0x17c>
   10f62:	687b      	ldr	r3, [r7, #4]
   10f64:	681b      	ldr	r3, [r3, #0]
   10f66:	4a13      	ldr	r2, [pc, #76]	; (10fb4 <list_binary_op+0x1c4>)
   10f68:	4293      	cmp	r3, r2
   10f6a:	d006      	beq.n	10f7a <list_binary_op+0x18a>
                if (op == MP_BINARY_OP_EQUAL) {
   10f6c:	68fb      	ldr	r3, [r7, #12]
   10f6e:	2b02      	cmp	r3, #2
   10f70:	d101      	bne.n	10f76 <list_binary_op+0x186>
                    return mp_const_false;
   10f72:	4b11      	ldr	r3, [pc, #68]	; (10fb8 <list_binary_op+0x1c8>)
   10f74:	e019      	b.n	10faa <list_binary_op+0x1ba>
                }
                return MP_OBJ_NULL; // op not supported
   10f76:	2300      	movs	r3, #0
   10f78:	e017      	b.n	10faa <list_binary_op+0x1ba>
            }

            mp_obj_list_t *another = MP_OBJ_TO_PTR(rhs);
   10f7a:	687b      	ldr	r3, [r7, #4]
   10f7c:	61fb      	str	r3, [r7, #28]
            bool res = mp_seq_cmp_objs(op, o->items, o->len, another->items, another->len);
   10f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10f80:	68d9      	ldr	r1, [r3, #12]
   10f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10f84:	689a      	ldr	r2, [r3, #8]
   10f86:	69fb      	ldr	r3, [r7, #28]
   10f88:	68d8      	ldr	r0, [r3, #12]
   10f8a:	69fb      	ldr	r3, [r7, #28]
   10f8c:	689b      	ldr	r3, [r3, #8]
   10f8e:	9300      	str	r3, [sp, #0]
   10f90:	4603      	mov	r3, r0
   10f92:	68f8      	ldr	r0, [r7, #12]
   10f94:	f006 fdd4 	bl	17b40 <mp_seq_cmp_objs>
   10f98:	4603      	mov	r3, r0
   10f9a:	76fb      	strb	r3, [r7, #27]
            return mp_obj_new_bool(res);
   10f9c:	7efb      	ldrb	r3, [r7, #27]
   10f9e:	4618      	mov	r0, r3
   10fa0:	f7ff fe54 	bl	10c4c <mp_obj_new_bool>
   10fa4:	4603      	mov	r3, r0
   10fa6:	e000      	b.n	10faa <list_binary_op+0x1ba>
        }

        default:
            return MP_OBJ_NULL; // op not supported
   10fa8:	2300      	movs	r3, #0
    }
}
   10faa:	4618      	mov	r0, r3
   10fac:	3730      	adds	r7, #48	; 0x30
   10fae:	46bd      	mov	sp, r7
   10fb0:	bd80      	pop	{r7, pc}
   10fb2:	bf00      	nop
   10fb4:	000231ec 	.word	0x000231ec
   10fb8:	00021c58 	.word	0x00021c58

00010fbc <list_subscr>:

STATIC mp_obj_t list_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   10fbc:	b580      	push	{r7, lr}
   10fbe:	b088      	sub	sp, #32
   10fc0:	af00      	add	r7, sp, #0
   10fc2:	60f8      	str	r0, [r7, #12]
   10fc4:	60b9      	str	r1, [r7, #8]
   10fc6:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_NULL) {
   10fc8:	687b      	ldr	r3, [r7, #4]
   10fca:	2b00      	cmp	r3, #0
   10fcc:	d10b      	bne.n	10fe6 <list_subscr+0x2a>
            mp_seq_clear(self->items, self->len + len_adj, self->len, sizeof(*self->items));
            self->len += len_adj;
            return mp_const_none;
        }
#endif
        mp_obj_t args[2] = {self_in, index};
   10fce:	68fb      	ldr	r3, [r7, #12]
   10fd0:	613b      	str	r3, [r7, #16]
   10fd2:	68bb      	ldr	r3, [r7, #8]
   10fd4:	617b      	str	r3, [r7, #20]
        list_pop(2, args);
   10fd6:	f107 0310 	add.w	r3, r7, #16
   10fda:	4619      	mov	r1, r3
   10fdc:	2002      	movs	r0, #2
   10fde:	f000 f91b 	bl	11218 <list_pop>
        return mp_const_none;
   10fe2:	4b10      	ldr	r3, [pc, #64]	; (11024 <list_subscr+0x68>)
   10fe4:	e01a      	b.n	1101c <list_subscr+0x60>
    } else if (value == MP_OBJ_SENTINEL) {
   10fe6:	687b      	ldr	r3, [r7, #4]
   10fe8:	2b08      	cmp	r3, #8
   10fea:	d111      	bne.n	11010 <list_subscr+0x54>
        // load
        mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   10fec:	68fb      	ldr	r3, [r7, #12]
   10fee:	61fb      	str	r3, [r7, #28]
            mp_obj_list_t *res = list_new(slice.stop - slice.start);
            mp_seq_copy(res->items, self->items + slice.start, res->len, mp_obj_t);
            return MP_OBJ_FROM_PTR(res);
        }
#endif
        size_t index_val = mp_get_index(self->base.type, self->len, index, false);
   10ff0:	69fb      	ldr	r3, [r7, #28]
   10ff2:	6818      	ldr	r0, [r3, #0]
   10ff4:	69fb      	ldr	r3, [r7, #28]
   10ff6:	6899      	ldr	r1, [r3, #8]
   10ff8:	2300      	movs	r3, #0
   10ffa:	68ba      	ldr	r2, [r7, #8]
   10ffc:	f7fc ff18 	bl	de30 <mp_get_index>
   11000:	61b8      	str	r0, [r7, #24]
        return self->items[index_val];
   11002:	69fb      	ldr	r3, [r7, #28]
   11004:	68da      	ldr	r2, [r3, #12]
   11006:	69bb      	ldr	r3, [r7, #24]
   11008:	009b      	lsls	r3, r3, #2
   1100a:	4413      	add	r3, r2
   1100c:	681b      	ldr	r3, [r3, #0]
   1100e:	e005      	b.n	1101c <list_subscr+0x60>
            }
            self->len += len_adj;
            return mp_const_none;
        }
#endif
        mp_obj_list_store(self_in, index, value);
   11010:	687a      	ldr	r2, [r7, #4]
   11012:	68b9      	ldr	r1, [r7, #8]
   11014:	68f8      	ldr	r0, [r7, #12]
   11016:	f000 fcf5 	bl	11a04 <mp_obj_list_store>
        return mp_const_none;
   1101a:	4b02      	ldr	r3, [pc, #8]	; (11024 <list_subscr+0x68>)
    }
}
   1101c:	4618      	mov	r0, r3
   1101e:	3720      	adds	r7, #32
   11020:	46bd      	mov	sp, r7
   11022:	bd80      	pop	{r7, pc}
   11024:	000234d4 	.word	0x000234d4

00011028 <list_getiter>:

STATIC mp_obj_t list_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
   11028:	b580      	push	{r7, lr}
   1102a:	b082      	sub	sp, #8
   1102c:	af00      	add	r7, sp, #0
   1102e:	6078      	str	r0, [r7, #4]
   11030:	6039      	str	r1, [r7, #0]
    return mp_obj_new_list_iterator(o_in, 0, iter_buf);
   11032:	683a      	ldr	r2, [r7, #0]
   11034:	2100      	movs	r1, #0
   11036:	6878      	ldr	r0, [r7, #4]
   11038:	f000 fd26 	bl	11a88 <mp_obj_new_list_iterator>
   1103c:	4603      	mov	r3, r0
}
   1103e:	4618      	mov	r0, r3
   11040:	3708      	adds	r7, #8
   11042:	46bd      	mov	sp, r7
   11044:	bd80      	pop	{r7, pc}
   11046:	bf00      	nop

00011048 <mp_obj_list_append>:

mp_obj_t mp_obj_list_append(mp_obj_t self_in, mp_obj_t arg) {
   11048:	b580      	push	{r7, lr}
   1104a:	b084      	sub	sp, #16
   1104c:	af00      	add	r7, sp, #0
   1104e:	6078      	str	r0, [r7, #4]
   11050:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11052:	6878      	ldr	r0, [r7, #4]
   11054:	f7ff fde8 	bl	10c28 <MP_OBJ_IS_OBJ>
   11058:	4603      	mov	r3, r0
   1105a:	f083 0301 	eor.w	r3, r3, #1
   1105e:	b2db      	uxtb	r3, r3
   11060:	2b00      	cmp	r3, #0
   11062:	d104      	bne.n	1106e <mp_obj_list_append+0x26>
   11064:	687b      	ldr	r3, [r7, #4]
   11066:	681b      	ldr	r3, [r3, #0]
   11068:	4a22      	ldr	r2, [pc, #136]	; (110f4 <mp_obj_list_append+0xac>)
   1106a:	4293      	cmp	r3, r2
   1106c:	d005      	beq.n	1107a <mp_obj_list_append+0x32>
   1106e:	4b22      	ldr	r3, [pc, #136]	; (110f8 <mp_obj_list_append+0xb0>)
   11070:	4a22      	ldr	r2, [pc, #136]	; (110fc <mp_obj_list_append+0xb4>)
   11072:	21eb      	movs	r1, #235	; 0xeb
   11074:	4822      	ldr	r0, [pc, #136]	; (11100 <mp_obj_list_append+0xb8>)
   11076:	f00a fb85 	bl	1b784 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   1107a:	687b      	ldr	r3, [r7, #4]
   1107c:	60fb      	str	r3, [r7, #12]
    if (self->len >= self->alloc) {
   1107e:	68fb      	ldr	r3, [r7, #12]
   11080:	689a      	ldr	r2, [r3, #8]
   11082:	68fb      	ldr	r3, [r7, #12]
   11084:	685b      	ldr	r3, [r3, #4]
   11086:	429a      	cmp	r2, r3
   11088:	d324      	bcc.n	110d4 <mp_obj_list_append+0x8c>
        self->items = m_renew(mp_obj_t, self->items, self->alloc, self->alloc * 2);
   1108a:	68fb      	ldr	r3, [r7, #12]
   1108c:	68da      	ldr	r2, [r3, #12]
   1108e:	68fb      	ldr	r3, [r7, #12]
   11090:	685b      	ldr	r3, [r3, #4]
   11092:	00db      	lsls	r3, r3, #3
   11094:	4619      	mov	r1, r3
   11096:	4610      	mov	r0, r2
   11098:	f7ef f98c 	bl	3b4 <m_realloc>
   1109c:	4602      	mov	r2, r0
   1109e:	68fb      	ldr	r3, [r7, #12]
   110a0:	60da      	str	r2, [r3, #12]
        self->alloc *= 2;
   110a2:	68fb      	ldr	r3, [r7, #12]
   110a4:	685b      	ldr	r3, [r3, #4]
   110a6:	005a      	lsls	r2, r3, #1
   110a8:	68fb      	ldr	r3, [r7, #12]
   110aa:	605a      	str	r2, [r3, #4]
        mp_seq_clear(self->items, self->len + 1, self->alloc, sizeof(*self->items));
   110ac:	68fb      	ldr	r3, [r7, #12]
   110ae:	68da      	ldr	r2, [r3, #12]
   110b0:	68fb      	ldr	r3, [r7, #12]
   110b2:	689b      	ldr	r3, [r3, #8]
   110b4:	3301      	adds	r3, #1
   110b6:	009b      	lsls	r3, r3, #2
   110b8:	18d0      	adds	r0, r2, r3
   110ba:	68fb      	ldr	r3, [r7, #12]
   110bc:	685a      	ldr	r2, [r3, #4]
   110be:	68fb      	ldr	r3, [r7, #12]
   110c0:	689b      	ldr	r3, [r3, #8]
   110c2:	1ad3      	subs	r3, r2, r3
   110c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   110c8:	3b01      	subs	r3, #1
   110ca:	009b      	lsls	r3, r3, #2
   110cc:	461a      	mov	r2, r3
   110ce:	2100      	movs	r1, #0
   110d0:	f00b fefa 	bl	1cec8 <memset>
    }
    self->items[self->len++] = arg;
   110d4:	68fb      	ldr	r3, [r7, #12]
   110d6:	68da      	ldr	r2, [r3, #12]
   110d8:	68fb      	ldr	r3, [r7, #12]
   110da:	689b      	ldr	r3, [r3, #8]
   110dc:	1c58      	adds	r0, r3, #1
   110de:	68f9      	ldr	r1, [r7, #12]
   110e0:	6088      	str	r0, [r1, #8]
   110e2:	009b      	lsls	r3, r3, #2
   110e4:	4413      	add	r3, r2
   110e6:	683a      	ldr	r2, [r7, #0]
   110e8:	601a      	str	r2, [r3, #0]
    return mp_const_none; // return None, as per CPython
   110ea:	4b06      	ldr	r3, [pc, #24]	; (11104 <mp_obj_list_append+0xbc>)
}
   110ec:	4618      	mov	r0, r3
   110ee:	3710      	adds	r7, #16
   110f0:	46bd      	mov	sp, r7
   110f2:	bd80      	pop	{r7, pc}
   110f4:	000231ec 	.word	0x000231ec
   110f8:	00022fdc 	.word	0x00022fdc
   110fc:	00023228 	.word	0x00023228
   11100:	00023038 	.word	0x00023038
   11104:	000234d4 	.word	0x000234d4

00011108 <list_extend>:

STATIC mp_obj_t list_extend(mp_obj_t self_in, mp_obj_t arg_in) {
   11108:	b580      	push	{r7, lr}
   1110a:	b084      	sub	sp, #16
   1110c:	af00      	add	r7, sp, #0
   1110e:	6078      	str	r0, [r7, #4]
   11110:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11112:	6878      	ldr	r0, [r7, #4]
   11114:	f7ff fd88 	bl	10c28 <MP_OBJ_IS_OBJ>
   11118:	4603      	mov	r3, r0
   1111a:	f083 0301 	eor.w	r3, r3, #1
   1111e:	b2db      	uxtb	r3, r3
   11120:	2b00      	cmp	r3, #0
   11122:	d104      	bne.n	1112e <list_extend+0x26>
   11124:	687b      	ldr	r3, [r7, #4]
   11126:	681b      	ldr	r3, [r3, #0]
   11128:	4a36      	ldr	r2, [pc, #216]	; (11204 <list_extend+0xfc>)
   1112a:	4293      	cmp	r3, r2
   1112c:	d005      	beq.n	1113a <list_extend+0x32>
   1112e:	4b36      	ldr	r3, [pc, #216]	; (11208 <list_extend+0x100>)
   11130:	4a36      	ldr	r2, [pc, #216]	; (1120c <list_extend+0x104>)
   11132:	21f7      	movs	r1, #247	; 0xf7
   11134:	4836      	ldr	r0, [pc, #216]	; (11210 <list_extend+0x108>)
   11136:	f00a fb25 	bl	1b784 <__assert_func>
    if (MP_OBJ_IS_TYPE(arg_in, &mp_type_list)) {
   1113a:	6838      	ldr	r0, [r7, #0]
   1113c:	f7ff fd74 	bl	10c28 <MP_OBJ_IS_OBJ>
   11140:	4603      	mov	r3, r0
   11142:	2b00      	cmp	r3, #0
   11144:	d054      	beq.n	111f0 <list_extend+0xe8>
   11146:	683b      	ldr	r3, [r7, #0]
   11148:	681b      	ldr	r3, [r3, #0]
   1114a:	4a2e      	ldr	r2, [pc, #184]	; (11204 <list_extend+0xfc>)
   1114c:	4293      	cmp	r3, r2
   1114e:	d14f      	bne.n	111f0 <list_extend+0xe8>
        mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11150:	687b      	ldr	r3, [r7, #4]
   11152:	60fb      	str	r3, [r7, #12]
        mp_obj_list_t *arg = MP_OBJ_TO_PTR(arg_in);
   11154:	683b      	ldr	r3, [r7, #0]
   11156:	60bb      	str	r3, [r7, #8]

        if (self->len + arg->len > self->alloc) {
   11158:	68fb      	ldr	r3, [r7, #12]
   1115a:	689a      	ldr	r2, [r3, #8]
   1115c:	68bb      	ldr	r3, [r7, #8]
   1115e:	689b      	ldr	r3, [r3, #8]
   11160:	441a      	add	r2, r3
   11162:	68fb      	ldr	r3, [r7, #12]
   11164:	685b      	ldr	r3, [r3, #4]
   11166:	429a      	cmp	r2, r3
   11168:	d92c      	bls.n	111c4 <list_extend+0xbc>
            // TODO: use alloc policy for "4"
            self->items = m_renew(mp_obj_t, self->items, self->alloc, self->len + arg->len + 4);
   1116a:	68fb      	ldr	r3, [r7, #12]
   1116c:	68d8      	ldr	r0, [r3, #12]
   1116e:	68fb      	ldr	r3, [r7, #12]
   11170:	689a      	ldr	r2, [r3, #8]
   11172:	68bb      	ldr	r3, [r7, #8]
   11174:	689b      	ldr	r3, [r3, #8]
   11176:	4413      	add	r3, r2
   11178:	3304      	adds	r3, #4
   1117a:	009b      	lsls	r3, r3, #2
   1117c:	4619      	mov	r1, r3
   1117e:	f7ef f919 	bl	3b4 <m_realloc>
   11182:	4602      	mov	r2, r0
   11184:	68fb      	ldr	r3, [r7, #12]
   11186:	60da      	str	r2, [r3, #12]
            self->alloc = self->len + arg->len + 4;
   11188:	68fb      	ldr	r3, [r7, #12]
   1118a:	689a      	ldr	r2, [r3, #8]
   1118c:	68bb      	ldr	r3, [r7, #8]
   1118e:	689b      	ldr	r3, [r3, #8]
   11190:	4413      	add	r3, r2
   11192:	1d1a      	adds	r2, r3, #4
   11194:	68fb      	ldr	r3, [r7, #12]
   11196:	605a      	str	r2, [r3, #4]
            mp_seq_clear(self->items, self->len + arg->len, self->alloc, sizeof(*self->items));
   11198:	68fb      	ldr	r3, [r7, #12]
   1119a:	68da      	ldr	r2, [r3, #12]
   1119c:	68fb      	ldr	r3, [r7, #12]
   1119e:	6899      	ldr	r1, [r3, #8]
   111a0:	68bb      	ldr	r3, [r7, #8]
   111a2:	689b      	ldr	r3, [r3, #8]
   111a4:	440b      	add	r3, r1
   111a6:	009b      	lsls	r3, r3, #2
   111a8:	18d0      	adds	r0, r2, r3
   111aa:	68fb      	ldr	r3, [r7, #12]
   111ac:	685a      	ldr	r2, [r3, #4]
   111ae:	68fb      	ldr	r3, [r7, #12]
   111b0:	6899      	ldr	r1, [r3, #8]
   111b2:	68bb      	ldr	r3, [r7, #8]
   111b4:	689b      	ldr	r3, [r3, #8]
   111b6:	440b      	add	r3, r1
   111b8:	1ad3      	subs	r3, r2, r3
   111ba:	009b      	lsls	r3, r3, #2
   111bc:	461a      	mov	r2, r3
   111be:	2100      	movs	r1, #0
   111c0:	f00b fe82 	bl	1cec8 <memset>
        }

        memcpy(self->items + self->len, arg->items, sizeof(mp_obj_t) * arg->len);
   111c4:	68fb      	ldr	r3, [r7, #12]
   111c6:	68da      	ldr	r2, [r3, #12]
   111c8:	68fb      	ldr	r3, [r7, #12]
   111ca:	689b      	ldr	r3, [r3, #8]
   111cc:	009b      	lsls	r3, r3, #2
   111ce:	18d0      	adds	r0, r2, r3
   111d0:	68bb      	ldr	r3, [r7, #8]
   111d2:	68d9      	ldr	r1, [r3, #12]
   111d4:	68bb      	ldr	r3, [r7, #8]
   111d6:	689b      	ldr	r3, [r3, #8]
   111d8:	009b      	lsls	r3, r3, #2
   111da:	461a      	mov	r2, r3
   111dc:	f00b fdd8 	bl	1cd90 <memcpy>
        self->len += arg->len;
   111e0:	68fb      	ldr	r3, [r7, #12]
   111e2:	689a      	ldr	r2, [r3, #8]
   111e4:	68bb      	ldr	r3, [r7, #8]
   111e6:	689b      	ldr	r3, [r3, #8]
   111e8:	441a      	add	r2, r3
   111ea:	68fb      	ldr	r3, [r7, #12]
   111ec:	609a      	str	r2, [r3, #8]
    if (MP_OBJ_IS_TYPE(arg_in, &mp_type_list)) {
   111ee:	e003      	b.n	111f8 <list_extend+0xf0>
    } else {
        list_extend_from_iter(self_in, arg_in);
   111f0:	6839      	ldr	r1, [r7, #0]
   111f2:	6878      	ldr	r0, [r7, #4]
   111f4:	f7ff fd94 	bl	10d20 <list_extend_from_iter>
    }
    return mp_const_none; // return None, as per CPython
   111f8:	4b06      	ldr	r3, [pc, #24]	; (11214 <list_extend+0x10c>)
}
   111fa:	4618      	mov	r0, r3
   111fc:	3710      	adds	r7, #16
   111fe:	46bd      	mov	sp, r7
   11200:	bd80      	pop	{r7, pc}
   11202:	bf00      	nop
   11204:	000231ec 	.word	0x000231ec
   11208:	00022fdc 	.word	0x00022fdc
   1120c:	0002323c 	.word	0x0002323c
   11210:	00023038 	.word	0x00023038
   11214:	000234d4 	.word	0x000234d4

00011218 <list_pop>:

STATIC mp_obj_t list_pop(size_t n_args, const mp_obj_t *args) {
   11218:	b580      	push	{r7, lr}
   1121a:	b086      	sub	sp, #24
   1121c:	af00      	add	r7, sp, #0
   1121e:	6078      	str	r0, [r7, #4]
   11220:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_list));
   11222:	683b      	ldr	r3, [r7, #0]
   11224:	681b      	ldr	r3, [r3, #0]
   11226:	4618      	mov	r0, r3
   11228:	f7ff fcfe 	bl	10c28 <MP_OBJ_IS_OBJ>
   1122c:	4603      	mov	r3, r0
   1122e:	f083 0301 	eor.w	r3, r3, #1
   11232:	b2db      	uxtb	r3, r3
   11234:	2b00      	cmp	r3, #0
   11236:	d105      	bne.n	11244 <list_pop+0x2c>
   11238:	683b      	ldr	r3, [r7, #0]
   1123a:	681b      	ldr	r3, [r3, #0]
   1123c:	681b      	ldr	r3, [r3, #0]
   1123e:	4a37      	ldr	r2, [pc, #220]	; (1131c <list_pop+0x104>)
   11240:	4293      	cmp	r3, r2
   11242:	d006      	beq.n	11252 <list_pop+0x3a>
   11244:	4b36      	ldr	r3, [pc, #216]	; (11320 <list_pop+0x108>)
   11246:	4a37      	ldr	r2, [pc, #220]	; (11324 <list_pop+0x10c>)
   11248:	f44f 7186 	mov.w	r1, #268	; 0x10c
   1124c:	4836      	ldr	r0, [pc, #216]	; (11328 <list_pop+0x110>)
   1124e:	f00a fa99 	bl	1b784 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(args[0]);
   11252:	683b      	ldr	r3, [r7, #0]
   11254:	681b      	ldr	r3, [r3, #0]
   11256:	617b      	str	r3, [r7, #20]
    if (self->len == 0) {
   11258:	697b      	ldr	r3, [r7, #20]
   1125a:	689b      	ldr	r3, [r3, #8]
   1125c:	2b00      	cmp	r3, #0
   1125e:	d103      	bne.n	11268 <list_pop+0x50>
        mp_raise_msg(&mp_type_IndexError, "pop from empty list");
   11260:	4932      	ldr	r1, [pc, #200]	; (1132c <list_pop+0x114>)
   11262:	4833      	ldr	r0, [pc, #204]	; (11330 <list_pop+0x118>)
   11264:	f7fb fe86 	bl	cf74 <mp_raise_msg>
    }
    size_t index = mp_get_index(self->base.type, self->len, n_args == 1 ? MP_OBJ_NEW_SMALL_INT(-1) : args[1], false);
   11268:	697b      	ldr	r3, [r7, #20]
   1126a:	6818      	ldr	r0, [r3, #0]
   1126c:	697b      	ldr	r3, [r7, #20]
   1126e:	6899      	ldr	r1, [r3, #8]
   11270:	687b      	ldr	r3, [r7, #4]
   11272:	2b01      	cmp	r3, #1
   11274:	d002      	beq.n	1127c <list_pop+0x64>
   11276:	683b      	ldr	r3, [r7, #0]
   11278:	685a      	ldr	r2, [r3, #4]
   1127a:	e001      	b.n	11280 <list_pop+0x68>
   1127c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11280:	2300      	movs	r3, #0
   11282:	f7fc fdd5 	bl	de30 <mp_get_index>
   11286:	6138      	str	r0, [r7, #16]
    mp_obj_t ret = self->items[index];
   11288:	697b      	ldr	r3, [r7, #20]
   1128a:	68da      	ldr	r2, [r3, #12]
   1128c:	693b      	ldr	r3, [r7, #16]
   1128e:	009b      	lsls	r3, r3, #2
   11290:	4413      	add	r3, r2
   11292:	681b      	ldr	r3, [r3, #0]
   11294:	60fb      	str	r3, [r7, #12]
    self->len -= 1;
   11296:	697b      	ldr	r3, [r7, #20]
   11298:	689b      	ldr	r3, [r3, #8]
   1129a:	1e5a      	subs	r2, r3, #1
   1129c:	697b      	ldr	r3, [r7, #20]
   1129e:	609a      	str	r2, [r3, #8]
    memmove(self->items + index, self->items + index + 1, (self->len - index) * sizeof(mp_obj_t));
   112a0:	697b      	ldr	r3, [r7, #20]
   112a2:	68da      	ldr	r2, [r3, #12]
   112a4:	693b      	ldr	r3, [r7, #16]
   112a6:	009b      	lsls	r3, r3, #2
   112a8:	18d0      	adds	r0, r2, r3
   112aa:	697b      	ldr	r3, [r7, #20]
   112ac:	68da      	ldr	r2, [r3, #12]
   112ae:	693b      	ldr	r3, [r7, #16]
   112b0:	3301      	adds	r3, #1
   112b2:	009b      	lsls	r3, r3, #2
   112b4:	18d1      	adds	r1, r2, r3
   112b6:	697b      	ldr	r3, [r7, #20]
   112b8:	689a      	ldr	r2, [r3, #8]
   112ba:	693b      	ldr	r3, [r7, #16]
   112bc:	1ad3      	subs	r3, r2, r3
   112be:	009b      	lsls	r3, r3, #2
   112c0:	461a      	mov	r2, r3
   112c2:	f00b fdcb 	bl	1ce5c <memmove>
    // Clear stale pointer from slot which just got freed to prevent GC issues
    self->items[self->len] = MP_OBJ_NULL;
   112c6:	697b      	ldr	r3, [r7, #20]
   112c8:	68da      	ldr	r2, [r3, #12]
   112ca:	697b      	ldr	r3, [r7, #20]
   112cc:	689b      	ldr	r3, [r3, #8]
   112ce:	009b      	lsls	r3, r3, #2
   112d0:	4413      	add	r3, r2
   112d2:	2200      	movs	r2, #0
   112d4:	601a      	str	r2, [r3, #0]
    if (self->alloc > LIST_MIN_ALLOC && self->alloc > 2 * self->len) {
   112d6:	697b      	ldr	r3, [r7, #20]
   112d8:	685b      	ldr	r3, [r3, #4]
   112da:	2b04      	cmp	r3, #4
   112dc:	d918      	bls.n	11310 <list_pop+0xf8>
   112de:	697b      	ldr	r3, [r7, #20]
   112e0:	685a      	ldr	r2, [r3, #4]
   112e2:	697b      	ldr	r3, [r7, #20]
   112e4:	689b      	ldr	r3, [r3, #8]
   112e6:	005b      	lsls	r3, r3, #1
   112e8:	429a      	cmp	r2, r3
   112ea:	d911      	bls.n	11310 <list_pop+0xf8>
        self->items = m_renew(mp_obj_t, self->items, self->alloc, self->alloc/2);
   112ec:	697b      	ldr	r3, [r7, #20]
   112ee:	68da      	ldr	r2, [r3, #12]
   112f0:	697b      	ldr	r3, [r7, #20]
   112f2:	685b      	ldr	r3, [r3, #4]
   112f4:	085b      	lsrs	r3, r3, #1
   112f6:	009b      	lsls	r3, r3, #2
   112f8:	4619      	mov	r1, r3
   112fa:	4610      	mov	r0, r2
   112fc:	f7ef f85a 	bl	3b4 <m_realloc>
   11300:	4602      	mov	r2, r0
   11302:	697b      	ldr	r3, [r7, #20]
   11304:	60da      	str	r2, [r3, #12]
        self->alloc /= 2;
   11306:	697b      	ldr	r3, [r7, #20]
   11308:	685b      	ldr	r3, [r3, #4]
   1130a:	085a      	lsrs	r2, r3, #1
   1130c:	697b      	ldr	r3, [r7, #20]
   1130e:	605a      	str	r2, [r3, #4]
    }
    return ret;
   11310:	68fb      	ldr	r3, [r7, #12]
}
   11312:	4618      	mov	r0, r3
   11314:	3718      	adds	r7, #24
   11316:	46bd      	mov	sp, r7
   11318:	bd80      	pop	{r7, pc}
   1131a:	bf00      	nop
   1131c:	000231ec 	.word	0x000231ec
   11320:	0002304c 	.word	0x0002304c
   11324:	00023248 	.word	0x00023248
   11328:	00023038 	.word	0x00023038
   1132c:	000230a8 	.word	0x000230a8
   11330:	00022550 	.word	0x00022550

00011334 <mp_quicksort>:

STATIC void mp_quicksort(mp_obj_t *head, mp_obj_t *tail, mp_obj_t key_fn, mp_obj_t binop_less_result) {
   11334:	b580      	push	{r7, lr}
   11336:	b08a      	sub	sp, #40	; 0x28
   11338:	af00      	add	r7, sp, #0
   1133a:	60f8      	str	r0, [r7, #12]
   1133c:	60b9      	str	r1, [r7, #8]
   1133e:	607a      	str	r2, [r7, #4]
   11340:	603b      	str	r3, [r7, #0]
    MP_STACK_CHECK();
    while (head < tail) {
   11342:	e085      	b.n	11450 <mp_quicksort+0x11c>
        mp_obj_t *h = head - 1;
   11344:	68fb      	ldr	r3, [r7, #12]
   11346:	3b04      	subs	r3, #4
   11348:	627b      	str	r3, [r7, #36]	; 0x24
        mp_obj_t *t = tail;
   1134a:	68bb      	ldr	r3, [r7, #8]
   1134c:	623b      	str	r3, [r7, #32]
        mp_obj_t v = key_fn == MP_OBJ_NULL ? tail[0] : mp_call_function_1(key_fn, tail[0]); // get pivot using key_fn
   1134e:	687b      	ldr	r3, [r7, #4]
   11350:	2b00      	cmp	r3, #0
   11352:	d102      	bne.n	1135a <mp_quicksort+0x26>
   11354:	68bb      	ldr	r3, [r7, #8]
   11356:	681b      	ldr	r3, [r3, #0]
   11358:	e006      	b.n	11368 <mp_quicksort+0x34>
   1135a:	68bb      	ldr	r3, [r7, #8]
   1135c:	681b      	ldr	r3, [r3, #0]
   1135e:	4619      	mov	r1, r3
   11360:	6878      	ldr	r0, [r7, #4]
   11362:	f7fa fd51 	bl	be08 <mp_call_function_1>
   11366:	4603      	mov	r3, r0
   11368:	61fb      	str	r3, [r7, #28]
        for (;;) {
            do ++h; while (h < t && mp_binary_op(MP_BINARY_OP_LESS, key_fn == MP_OBJ_NULL ? h[0] : mp_call_function_1(key_fn, h[0]), v) == binop_less_result);
   1136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1136c:	3304      	adds	r3, #4
   1136e:	627b      	str	r3, [r7, #36]	; 0x24
   11370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11372:	6a3b      	ldr	r3, [r7, #32]
   11374:	429a      	cmp	r2, r3
   11376:	d215      	bcs.n	113a4 <mp_quicksort+0x70>
   11378:	687b      	ldr	r3, [r7, #4]
   1137a:	2b00      	cmp	r3, #0
   1137c:	d102      	bne.n	11384 <mp_quicksort+0x50>
   1137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11380:	681b      	ldr	r3, [r3, #0]
   11382:	e006      	b.n	11392 <mp_quicksort+0x5e>
   11384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11386:	681b      	ldr	r3, [r3, #0]
   11388:	4619      	mov	r1, r3
   1138a:	6878      	ldr	r0, [r7, #4]
   1138c:	f7fa fd3c 	bl	be08 <mp_call_function_1>
   11390:	4603      	mov	r3, r0
   11392:	69fa      	ldr	r2, [r7, #28]
   11394:	4619      	mov	r1, r3
   11396:	2000      	movs	r0, #0
   11398:	f7fa fac4 	bl	b924 <mp_binary_op>
   1139c:	4602      	mov	r2, r0
   1139e:	683b      	ldr	r3, [r7, #0]
   113a0:	429a      	cmp	r2, r3
   113a2:	d0e2      	beq.n	1136a <mp_quicksort+0x36>
            do --t; while (h < t && mp_binary_op(MP_BINARY_OP_LESS, v, key_fn == MP_OBJ_NULL ? t[0] : mp_call_function_1(key_fn, t[0])) == binop_less_result);
   113a4:	6a3b      	ldr	r3, [r7, #32]
   113a6:	3b04      	subs	r3, #4
   113a8:	623b      	str	r3, [r7, #32]
   113aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   113ac:	6a3b      	ldr	r3, [r7, #32]
   113ae:	429a      	cmp	r2, r3
   113b0:	d215      	bcs.n	113de <mp_quicksort+0xaa>
   113b2:	687b      	ldr	r3, [r7, #4]
   113b4:	2b00      	cmp	r3, #0
   113b6:	d102      	bne.n	113be <mp_quicksort+0x8a>
   113b8:	6a3b      	ldr	r3, [r7, #32]
   113ba:	681b      	ldr	r3, [r3, #0]
   113bc:	e006      	b.n	113cc <mp_quicksort+0x98>
   113be:	6a3b      	ldr	r3, [r7, #32]
   113c0:	681b      	ldr	r3, [r3, #0]
   113c2:	4619      	mov	r1, r3
   113c4:	6878      	ldr	r0, [r7, #4]
   113c6:	f7fa fd1f 	bl	be08 <mp_call_function_1>
   113ca:	4603      	mov	r3, r0
   113cc:	461a      	mov	r2, r3
   113ce:	69f9      	ldr	r1, [r7, #28]
   113d0:	2000      	movs	r0, #0
   113d2:	f7fa faa7 	bl	b924 <mp_binary_op>
   113d6:	4602      	mov	r2, r0
   113d8:	683b      	ldr	r3, [r7, #0]
   113da:	429a      	cmp	r2, r3
   113dc:	d0e2      	beq.n	113a4 <mp_quicksort+0x70>
            if (h >= t) break;
   113de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   113e0:	6a3b      	ldr	r3, [r7, #32]
   113e2:	429a      	cmp	r2, r3
   113e4:	d20a      	bcs.n	113fc <mp_quicksort+0xc8>
            mp_obj_t x = h[0];
   113e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   113e8:	681b      	ldr	r3, [r3, #0]
   113ea:	61bb      	str	r3, [r7, #24]
            h[0] = t[0];
   113ec:	6a3b      	ldr	r3, [r7, #32]
   113ee:	681a      	ldr	r2, [r3, #0]
   113f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   113f2:	601a      	str	r2, [r3, #0]
            t[0] = x;
   113f4:	6a3b      	ldr	r3, [r7, #32]
   113f6:	69ba      	ldr	r2, [r7, #24]
   113f8:	601a      	str	r2, [r3, #0]
        }
   113fa:	e7b6      	b.n	1136a <mp_quicksort+0x36>
            if (h >= t) break;
   113fc:	bf00      	nop
        mp_obj_t x = h[0];
   113fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11400:	681b      	ldr	r3, [r3, #0]
   11402:	617b      	str	r3, [r7, #20]
        h[0] = tail[0];
   11404:	68bb      	ldr	r3, [r7, #8]
   11406:	681a      	ldr	r2, [r3, #0]
   11408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1140a:	601a      	str	r2, [r3, #0]
        tail[0] = x;
   1140c:	68bb      	ldr	r3, [r7, #8]
   1140e:	697a      	ldr	r2, [r7, #20]
   11410:	601a      	str	r2, [r3, #0]
        // do the smaller recursive call first, to keep stack within O(log(N))
        if (t - head < tail - h - 1) {
   11412:	6a3a      	ldr	r2, [r7, #32]
   11414:	68fb      	ldr	r3, [r7, #12]
   11416:	1ad3      	subs	r3, r2, r3
   11418:	109b      	asrs	r3, r3, #2
   1141a:	4619      	mov	r1, r3
   1141c:	68ba      	ldr	r2, [r7, #8]
   1141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11420:	1ad3      	subs	r3, r2, r3
   11422:	109b      	asrs	r3, r3, #2
   11424:	3b01      	subs	r3, #1
   11426:	4299      	cmp	r1, r3
   11428:	da09      	bge.n	1143e <mp_quicksort+0x10a>
            mp_quicksort(head, t, key_fn, binop_less_result);
   1142a:	683b      	ldr	r3, [r7, #0]
   1142c:	687a      	ldr	r2, [r7, #4]
   1142e:	6a39      	ldr	r1, [r7, #32]
   11430:	68f8      	ldr	r0, [r7, #12]
   11432:	f7ff ff7f 	bl	11334 <mp_quicksort>
            head = h + 1;
   11436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11438:	3304      	adds	r3, #4
   1143a:	60fb      	str	r3, [r7, #12]
   1143c:	e008      	b.n	11450 <mp_quicksort+0x11c>
        } else {
            mp_quicksort(h + 1, tail, key_fn, binop_less_result);
   1143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11440:	1d18      	adds	r0, r3, #4
   11442:	683b      	ldr	r3, [r7, #0]
   11444:	687a      	ldr	r2, [r7, #4]
   11446:	68b9      	ldr	r1, [r7, #8]
   11448:	f7ff ff74 	bl	11334 <mp_quicksort>
            tail = t;
   1144c:	6a3b      	ldr	r3, [r7, #32]
   1144e:	60bb      	str	r3, [r7, #8]
    while (head < tail) {
   11450:	68fa      	ldr	r2, [r7, #12]
   11452:	68bb      	ldr	r3, [r7, #8]
   11454:	429a      	cmp	r2, r3
   11456:	f4ff af75 	bcc.w	11344 <mp_quicksort+0x10>
        }
    }
}
   1145a:	bf00      	nop
   1145c:	3728      	adds	r7, #40	; 0x28
   1145e:	46bd      	mov	sp, r7
   11460:	bd80      	pop	{r7, pc}
   11462:	bf00      	nop

00011464 <mp_obj_list_sort>:

// TODO Python defines sort to be stable but ours is not
mp_obj_t mp_obj_list_sort(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   11464:	b580      	push	{r7, lr}
   11466:	b08a      	sub	sp, #40	; 0x28
   11468:	af02      	add	r7, sp, #8
   1146a:	60f8      	str	r0, [r7, #12]
   1146c:	60b9      	str	r1, [r7, #8]
   1146e:	607a      	str	r2, [r7, #4]

    // parse args
    struct {
        mp_arg_val_t key, reverse;
    } args;
    mp_arg_parse_all(n_args - 1, pos_args + 1, kw_args,
   11470:	68fb      	ldr	r3, [r7, #12]
   11472:	1e58      	subs	r0, r3, #1
   11474:	68bb      	ldr	r3, [r7, #8]
   11476:	1d19      	adds	r1, r3, #4
   11478:	f107 0314 	add.w	r3, r7, #20
   1147c:	9301      	str	r3, [sp, #4]
   1147e:	4b22      	ldr	r3, [pc, #136]	; (11508 <mp_obj_list_sort+0xa4>)
   11480:	9300      	str	r3, [sp, #0]
   11482:	2302      	movs	r3, #2
   11484:	687a      	ldr	r2, [r7, #4]
   11486:	f7fb fe3d 	bl	d104 <mp_arg_parse_all>
        MP_ARRAY_SIZE(allowed_args), allowed_args, (mp_arg_val_t*)&args);

    mp_check_self(MP_OBJ_IS_TYPE(pos_args[0], &mp_type_list));
   1148a:	68bb      	ldr	r3, [r7, #8]
   1148c:	681b      	ldr	r3, [r3, #0]
   1148e:	4618      	mov	r0, r3
   11490:	f7ff fbca 	bl	10c28 <MP_OBJ_IS_OBJ>
   11494:	4603      	mov	r3, r0
   11496:	f083 0301 	eor.w	r3, r3, #1
   1149a:	b2db      	uxtb	r3, r3
   1149c:	2b00      	cmp	r3, #0
   1149e:	d105      	bne.n	114ac <mp_obj_list_sort+0x48>
   114a0:	68bb      	ldr	r3, [r7, #8]
   114a2:	681b      	ldr	r3, [r3, #0]
   114a4:	681b      	ldr	r3, [r3, #0]
   114a6:	4a19      	ldr	r2, [pc, #100]	; (1150c <mp_obj_list_sort+0xa8>)
   114a8:	4293      	cmp	r3, r2
   114aa:	d006      	beq.n	114ba <mp_obj_list_sort+0x56>
   114ac:	4b18      	ldr	r3, [pc, #96]	; (11510 <mp_obj_list_sort+0xac>)
   114ae:	4a19      	ldr	r2, [pc, #100]	; (11514 <mp_obj_list_sort+0xb0>)
   114b0:	f44f 71a4 	mov.w	r1, #328	; 0x148
   114b4:	4818      	ldr	r0, [pc, #96]	; (11518 <mp_obj_list_sort+0xb4>)
   114b6:	f00a f965 	bl	1b784 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(pos_args[0]);
   114ba:	68bb      	ldr	r3, [r7, #8]
   114bc:	681b      	ldr	r3, [r3, #0]
   114be:	61fb      	str	r3, [r7, #28]

    if (self->len > 1) {
   114c0:	69fb      	ldr	r3, [r7, #28]
   114c2:	689b      	ldr	r3, [r3, #8]
   114c4:	2b01      	cmp	r3, #1
   114c6:	d919      	bls.n	114fc <mp_obj_list_sort+0x98>
        mp_quicksort(self->items, self->items + self->len - 1,
   114c8:	69fb      	ldr	r3, [r7, #28]
   114ca:	68d8      	ldr	r0, [r3, #12]
   114cc:	69fb      	ldr	r3, [r7, #28]
   114ce:	68da      	ldr	r2, [r3, #12]
   114d0:	69fb      	ldr	r3, [r7, #28]
   114d2:	689b      	ldr	r3, [r3, #8]
   114d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   114d8:	3b01      	subs	r3, #1
   114da:	009b      	lsls	r3, r3, #2
   114dc:	18d1      	adds	r1, r2, r3
                     args.key.u_obj == mp_const_none ? MP_OBJ_NULL : args.key.u_obj,
   114de:	697b      	ldr	r3, [r7, #20]
        mp_quicksort(self->items, self->items + self->len - 1,
   114e0:	4a0e      	ldr	r2, [pc, #56]	; (1151c <mp_obj_list_sort+0xb8>)
   114e2:	4293      	cmp	r3, r2
   114e4:	d001      	beq.n	114ea <mp_obj_list_sort+0x86>
   114e6:	697a      	ldr	r2, [r7, #20]
   114e8:	e000      	b.n	114ec <mp_obj_list_sort+0x88>
   114ea:	2200      	movs	r2, #0
                     args.reverse.u_bool ? mp_const_false : mp_const_true);
   114ec:	7e3b      	ldrb	r3, [r7, #24]
        mp_quicksort(self->items, self->items + self->len - 1,
   114ee:	2b00      	cmp	r3, #0
   114f0:	d001      	beq.n	114f6 <mp_obj_list_sort+0x92>
   114f2:	4b0b      	ldr	r3, [pc, #44]	; (11520 <mp_obj_list_sort+0xbc>)
   114f4:	e000      	b.n	114f8 <mp_obj_list_sort+0x94>
   114f6:	4b0b      	ldr	r3, [pc, #44]	; (11524 <mp_obj_list_sort+0xc0>)
   114f8:	f7ff ff1c 	bl	11334 <mp_quicksort>
    }

    return mp_const_none;
   114fc:	4b07      	ldr	r3, [pc, #28]	; (1151c <mp_obj_list_sort+0xb8>)
}
   114fe:	4618      	mov	r0, r3
   11500:	3720      	adds	r7, #32
   11502:	46bd      	mov	sp, r7
   11504:	bd80      	pop	{r7, pc}
   11506:	bf00      	nop
   11508:	00023254 	.word	0x00023254
   1150c:	000231ec 	.word	0x000231ec
   11510:	000230bc 	.word	0x000230bc
   11514:	00023264 	.word	0x00023264
   11518:	00023038 	.word	0x00023038
   1151c:	000234d4 	.word	0x000234d4
   11520:	00021c58 	.word	0x00021c58
   11524:	00021c60 	.word	0x00021c60

00011528 <list_clear>:

STATIC mp_obj_t list_clear(mp_obj_t self_in) {
   11528:	b580      	push	{r7, lr}
   1152a:	b084      	sub	sp, #16
   1152c:	af00      	add	r7, sp, #0
   1152e:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11530:	6878      	ldr	r0, [r7, #4]
   11532:	f7ff fb79 	bl	10c28 <MP_OBJ_IS_OBJ>
   11536:	4603      	mov	r3, r0
   11538:	f083 0301 	eor.w	r3, r3, #1
   1153c:	b2db      	uxtb	r3, r3
   1153e:	2b00      	cmp	r3, #0
   11540:	d104      	bne.n	1154c <list_clear+0x24>
   11542:	687b      	ldr	r3, [r7, #4]
   11544:	681b      	ldr	r3, [r3, #0]
   11546:	4a14      	ldr	r2, [pc, #80]	; (11598 <list_clear+0x70>)
   11548:	4293      	cmp	r3, r2
   1154a:	d006      	beq.n	1155a <list_clear+0x32>
   1154c:	4b13      	ldr	r3, [pc, #76]	; (1159c <list_clear+0x74>)
   1154e:	4a14      	ldr	r2, [pc, #80]	; (115a0 <list_clear+0x78>)
   11550:	f240 1155 	movw	r1, #341	; 0x155
   11554:	4813      	ldr	r0, [pc, #76]	; (115a4 <list_clear+0x7c>)
   11556:	f00a f915 	bl	1b784 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   1155a:	687b      	ldr	r3, [r7, #4]
   1155c:	60fb      	str	r3, [r7, #12]
    self->len = 0;
   1155e:	68fb      	ldr	r3, [r7, #12]
   11560:	2200      	movs	r2, #0
   11562:	609a      	str	r2, [r3, #8]
    self->items = m_renew(mp_obj_t, self->items, self->alloc, LIST_MIN_ALLOC);
   11564:	68fb      	ldr	r3, [r7, #12]
   11566:	68db      	ldr	r3, [r3, #12]
   11568:	2110      	movs	r1, #16
   1156a:	4618      	mov	r0, r3
   1156c:	f7ee ff22 	bl	3b4 <m_realloc>
   11570:	4602      	mov	r2, r0
   11572:	68fb      	ldr	r3, [r7, #12]
   11574:	60da      	str	r2, [r3, #12]
    self->alloc = LIST_MIN_ALLOC;
   11576:	68fb      	ldr	r3, [r7, #12]
   11578:	2204      	movs	r2, #4
   1157a:	605a      	str	r2, [r3, #4]
    mp_seq_clear(self->items, 0, self->alloc, sizeof(*self->items));
   1157c:	68fb      	ldr	r3, [r7, #12]
   1157e:	68d8      	ldr	r0, [r3, #12]
   11580:	68fb      	ldr	r3, [r7, #12]
   11582:	685b      	ldr	r3, [r3, #4]
   11584:	009b      	lsls	r3, r3, #2
   11586:	461a      	mov	r2, r3
   11588:	2100      	movs	r1, #0
   1158a:	f00b fc9d 	bl	1cec8 <memset>
    return mp_const_none;
   1158e:	4b06      	ldr	r3, [pc, #24]	; (115a8 <list_clear+0x80>)
}
   11590:	4618      	mov	r0, r3
   11592:	3710      	adds	r7, #16
   11594:	46bd      	mov	sp, r7
   11596:	bd80      	pop	{r7, pc}
   11598:	000231ec 	.word	0x000231ec
   1159c:	00022fdc 	.word	0x00022fdc
   115a0:	00023278 	.word	0x00023278
   115a4:	00023038 	.word	0x00023038
   115a8:	000234d4 	.word	0x000234d4

000115ac <list_copy>:

STATIC mp_obj_t list_copy(mp_obj_t self_in) {
   115ac:	b580      	push	{r7, lr}
   115ae:	b084      	sub	sp, #16
   115b0:	af00      	add	r7, sp, #0
   115b2:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   115b4:	6878      	ldr	r0, [r7, #4]
   115b6:	f7ff fb37 	bl	10c28 <MP_OBJ_IS_OBJ>
   115ba:	4603      	mov	r3, r0
   115bc:	f083 0301 	eor.w	r3, r3, #1
   115c0:	b2db      	uxtb	r3, r3
   115c2:	2b00      	cmp	r3, #0
   115c4:	d104      	bne.n	115d0 <list_copy+0x24>
   115c6:	687b      	ldr	r3, [r7, #4]
   115c8:	681b      	ldr	r3, [r3, #0]
   115ca:	4a0c      	ldr	r2, [pc, #48]	; (115fc <list_copy+0x50>)
   115cc:	4293      	cmp	r3, r2
   115ce:	d006      	beq.n	115de <list_copy+0x32>
   115d0:	4b0b      	ldr	r3, [pc, #44]	; (11600 <list_copy+0x54>)
   115d2:	4a0c      	ldr	r2, [pc, #48]	; (11604 <list_copy+0x58>)
   115d4:	f240 115f 	movw	r1, #351	; 0x15f
   115d8:	480b      	ldr	r0, [pc, #44]	; (11608 <list_copy+0x5c>)
   115da:	f00a f8d3 	bl	1b784 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   115de:	687b      	ldr	r3, [r7, #4]
   115e0:	60fb      	str	r3, [r7, #12]
    return mp_obj_new_list(self->len, self->items);
   115e2:	68fb      	ldr	r3, [r7, #12]
   115e4:	689a      	ldr	r2, [r3, #8]
   115e6:	68fb      	ldr	r3, [r7, #12]
   115e8:	68db      	ldr	r3, [r3, #12]
   115ea:	4619      	mov	r1, r3
   115ec:	4610      	mov	r0, r2
   115ee:	f000 f9bd 	bl	1196c <mp_obj_new_list>
   115f2:	4603      	mov	r3, r0
}
   115f4:	4618      	mov	r0, r3
   115f6:	3710      	adds	r7, #16
   115f8:	46bd      	mov	sp, r7
   115fa:	bd80      	pop	{r7, pc}
   115fc:	000231ec 	.word	0x000231ec
   11600:	00022fdc 	.word	0x00022fdc
   11604:	00023284 	.word	0x00023284
   11608:	00023038 	.word	0x00023038

0001160c <list_count>:

STATIC mp_obj_t list_count(mp_obj_t self_in, mp_obj_t value) {
   1160c:	b580      	push	{r7, lr}
   1160e:	b084      	sub	sp, #16
   11610:	af00      	add	r7, sp, #0
   11612:	6078      	str	r0, [r7, #4]
   11614:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11616:	6878      	ldr	r0, [r7, #4]
   11618:	f7ff fb06 	bl	10c28 <MP_OBJ_IS_OBJ>
   1161c:	4603      	mov	r3, r0
   1161e:	f083 0301 	eor.w	r3, r3, #1
   11622:	b2db      	uxtb	r3, r3
   11624:	2b00      	cmp	r3, #0
   11626:	d104      	bne.n	11632 <list_count+0x26>
   11628:	687b      	ldr	r3, [r7, #4]
   1162a:	681b      	ldr	r3, [r3, #0]
   1162c:	4a0c      	ldr	r2, [pc, #48]	; (11660 <list_count+0x54>)
   1162e:	4293      	cmp	r3, r2
   11630:	d006      	beq.n	11640 <list_count+0x34>
   11632:	4b0c      	ldr	r3, [pc, #48]	; (11664 <list_count+0x58>)
   11634:	4a0c      	ldr	r2, [pc, #48]	; (11668 <list_count+0x5c>)
   11636:	f240 1165 	movw	r1, #357	; 0x165
   1163a:	480c      	ldr	r0, [pc, #48]	; (1166c <list_count+0x60>)
   1163c:	f00a f8a2 	bl	1b784 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11640:	687b      	ldr	r3, [r7, #4]
   11642:	60fb      	str	r3, [r7, #12]
    return mp_seq_count_obj(self->items, self->len, value);
   11644:	68fb      	ldr	r3, [r7, #12]
   11646:	68d8      	ldr	r0, [r3, #12]
   11648:	68fb      	ldr	r3, [r7, #12]
   1164a:	689b      	ldr	r3, [r3, #8]
   1164c:	683a      	ldr	r2, [r7, #0]
   1164e:	4619      	mov	r1, r3
   11650:	f006 fb42 	bl	17cd8 <mp_seq_count_obj>
   11654:	4603      	mov	r3, r0
}
   11656:	4618      	mov	r0, r3
   11658:	3710      	adds	r7, #16
   1165a:	46bd      	mov	sp, r7
   1165c:	bd80      	pop	{r7, pc}
   1165e:	bf00      	nop
   11660:	000231ec 	.word	0x000231ec
   11664:	00022fdc 	.word	0x00022fdc
   11668:	00023290 	.word	0x00023290
   1166c:	00023038 	.word	0x00023038

00011670 <list_index>:

STATIC mp_obj_t list_index(size_t n_args, const mp_obj_t *args) {
   11670:	b580      	push	{r7, lr}
   11672:	b084      	sub	sp, #16
   11674:	af00      	add	r7, sp, #0
   11676:	6078      	str	r0, [r7, #4]
   11678:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_list));
   1167a:	683b      	ldr	r3, [r7, #0]
   1167c:	681b      	ldr	r3, [r3, #0]
   1167e:	4618      	mov	r0, r3
   11680:	f7ff fad2 	bl	10c28 <MP_OBJ_IS_OBJ>
   11684:	4603      	mov	r3, r0
   11686:	f083 0301 	eor.w	r3, r3, #1
   1168a:	b2db      	uxtb	r3, r3
   1168c:	2b00      	cmp	r3, #0
   1168e:	d105      	bne.n	1169c <list_index+0x2c>
   11690:	683b      	ldr	r3, [r7, #0]
   11692:	681b      	ldr	r3, [r3, #0]
   11694:	681b      	ldr	r3, [r3, #0]
   11696:	4a0d      	ldr	r2, [pc, #52]	; (116cc <list_index+0x5c>)
   11698:	4293      	cmp	r3, r2
   1169a:	d006      	beq.n	116aa <list_index+0x3a>
   1169c:	4b0c      	ldr	r3, [pc, #48]	; (116d0 <list_index+0x60>)
   1169e:	4a0d      	ldr	r2, [pc, #52]	; (116d4 <list_index+0x64>)
   116a0:	f240 116b 	movw	r1, #363	; 0x16b
   116a4:	480c      	ldr	r0, [pc, #48]	; (116d8 <list_index+0x68>)
   116a6:	f00a f86d 	bl	1b784 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(args[0]);
   116aa:	683b      	ldr	r3, [r7, #0]
   116ac:	681b      	ldr	r3, [r3, #0]
   116ae:	60fb      	str	r3, [r7, #12]
    return mp_seq_index_obj(self->items, self->len, n_args, args);
   116b0:	68fb      	ldr	r3, [r7, #12]
   116b2:	68d8      	ldr	r0, [r3, #12]
   116b4:	68fb      	ldr	r3, [r7, #12]
   116b6:	6899      	ldr	r1, [r3, #8]
   116b8:	683b      	ldr	r3, [r7, #0]
   116ba:	687a      	ldr	r2, [r7, #4]
   116bc:	f006 fabc 	bl	17c38 <mp_seq_index_obj>
   116c0:	4603      	mov	r3, r0
}
   116c2:	4618      	mov	r0, r3
   116c4:	3710      	adds	r7, #16
   116c6:	46bd      	mov	sp, r7
   116c8:	bd80      	pop	{r7, pc}
   116ca:	bf00      	nop
   116cc:	000231ec 	.word	0x000231ec
   116d0:	0002304c 	.word	0x0002304c
   116d4:	0002329c 	.word	0x0002329c
   116d8:	00023038 	.word	0x00023038

000116dc <list_insert>:

STATIC mp_obj_t list_insert(mp_obj_t self_in, mp_obj_t idx, mp_obj_t obj) {
   116dc:	b580      	push	{r7, lr}
   116de:	b088      	sub	sp, #32
   116e0:	af00      	add	r7, sp, #0
   116e2:	60f8      	str	r0, [r7, #12]
   116e4:	60b9      	str	r1, [r7, #8]
   116e6:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   116e8:	68f8      	ldr	r0, [r7, #12]
   116ea:	f7ff fa9d 	bl	10c28 <MP_OBJ_IS_OBJ>
   116ee:	4603      	mov	r3, r0
   116f0:	f083 0301 	eor.w	r3, r3, #1
   116f4:	b2db      	uxtb	r3, r3
   116f6:	2b00      	cmp	r3, #0
   116f8:	d104      	bne.n	11704 <list_insert+0x28>
   116fa:	68fb      	ldr	r3, [r7, #12]
   116fc:	681b      	ldr	r3, [r3, #0]
   116fe:	4a27      	ldr	r2, [pc, #156]	; (1179c <list_insert+0xc0>)
   11700:	4293      	cmp	r3, r2
   11702:	d006      	beq.n	11712 <list_insert+0x36>
   11704:	4b26      	ldr	r3, [pc, #152]	; (117a0 <list_insert+0xc4>)
   11706:	4a27      	ldr	r2, [pc, #156]	; (117a4 <list_insert+0xc8>)
   11708:	f240 1171 	movw	r1, #369	; 0x171
   1170c:	4826      	ldr	r0, [pc, #152]	; (117a8 <list_insert+0xcc>)
   1170e:	f00a f839 	bl	1b784 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11712:	68fb      	ldr	r3, [r7, #12]
   11714:	617b      	str	r3, [r7, #20]
    // insert has its own strange index logic
    mp_int_t index = MP_OBJ_SMALL_INT_VALUE(idx);
   11716:	68bb      	ldr	r3, [r7, #8]
   11718:	105b      	asrs	r3, r3, #1
   1171a:	61fb      	str	r3, [r7, #28]
    if (index < 0) {
   1171c:	69fb      	ldr	r3, [r7, #28]
   1171e:	2b00      	cmp	r3, #0
   11720:	da04      	bge.n	1172c <list_insert+0x50>
         index += self->len;
   11722:	697b      	ldr	r3, [r7, #20]
   11724:	689a      	ldr	r2, [r3, #8]
   11726:	69fb      	ldr	r3, [r7, #28]
   11728:	4413      	add	r3, r2
   1172a:	61fb      	str	r3, [r7, #28]
    }
    if (index < 0) {
   1172c:	69fb      	ldr	r3, [r7, #28]
   1172e:	2b00      	cmp	r3, #0
   11730:	da01      	bge.n	11736 <list_insert+0x5a>
         index = 0;
   11732:	2300      	movs	r3, #0
   11734:	61fb      	str	r3, [r7, #28]
    }
    if ((size_t)index > self->len) {
   11736:	697b      	ldr	r3, [r7, #20]
   11738:	689a      	ldr	r2, [r3, #8]
   1173a:	69fb      	ldr	r3, [r7, #28]
   1173c:	429a      	cmp	r2, r3
   1173e:	d202      	bcs.n	11746 <list_insert+0x6a>
         index = self->len;
   11740:	697b      	ldr	r3, [r7, #20]
   11742:	689b      	ldr	r3, [r3, #8]
   11744:	61fb      	str	r3, [r7, #28]
    }

    mp_obj_list_append(self_in, mp_const_none);
   11746:	4919      	ldr	r1, [pc, #100]	; (117ac <list_insert+0xd0>)
   11748:	68f8      	ldr	r0, [r7, #12]
   1174a:	f7ff fc7d 	bl	11048 <mp_obj_list_append>

    for (mp_int_t i = self->len-1; i > index; i--) {
   1174e:	697b      	ldr	r3, [r7, #20]
   11750:	689b      	ldr	r3, [r3, #8]
   11752:	3b01      	subs	r3, #1
   11754:	61bb      	str	r3, [r7, #24]
   11756:	e011      	b.n	1177c <list_insert+0xa0>
         self->items[i] = self->items[i-1];
   11758:	697b      	ldr	r3, [r7, #20]
   1175a:	68da      	ldr	r2, [r3, #12]
   1175c:	69bb      	ldr	r3, [r7, #24]
   1175e:	009b      	lsls	r3, r3, #2
   11760:	441a      	add	r2, r3
   11762:	697b      	ldr	r3, [r7, #20]
   11764:	68d9      	ldr	r1, [r3, #12]
   11766:	69bb      	ldr	r3, [r7, #24]
   11768:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1176c:	3b01      	subs	r3, #1
   1176e:	009b      	lsls	r3, r3, #2
   11770:	440b      	add	r3, r1
   11772:	681b      	ldr	r3, [r3, #0]
   11774:	6013      	str	r3, [r2, #0]
    for (mp_int_t i = self->len-1; i > index; i--) {
   11776:	69bb      	ldr	r3, [r7, #24]
   11778:	3b01      	subs	r3, #1
   1177a:	61bb      	str	r3, [r7, #24]
   1177c:	69ba      	ldr	r2, [r7, #24]
   1177e:	69fb      	ldr	r3, [r7, #28]
   11780:	429a      	cmp	r2, r3
   11782:	dce9      	bgt.n	11758 <list_insert+0x7c>
    }
    self->items[index] = obj;
   11784:	697b      	ldr	r3, [r7, #20]
   11786:	68da      	ldr	r2, [r3, #12]
   11788:	69fb      	ldr	r3, [r7, #28]
   1178a:	009b      	lsls	r3, r3, #2
   1178c:	4413      	add	r3, r2
   1178e:	687a      	ldr	r2, [r7, #4]
   11790:	601a      	str	r2, [r3, #0]

    return mp_const_none;
   11792:	4b06      	ldr	r3, [pc, #24]	; (117ac <list_insert+0xd0>)
}
   11794:	4618      	mov	r0, r3
   11796:	3720      	adds	r7, #32
   11798:	46bd      	mov	sp, r7
   1179a:	bd80      	pop	{r7, pc}
   1179c:	000231ec 	.word	0x000231ec
   117a0:	00022fdc 	.word	0x00022fdc
   117a4:	000232a8 	.word	0x000232a8
   117a8:	00023038 	.word	0x00023038
   117ac:	000234d4 	.word	0x000234d4

000117b0 <mp_obj_list_remove>:

mp_obj_t mp_obj_list_remove(mp_obj_t self_in, mp_obj_t value) {
   117b0:	b580      	push	{r7, lr}
   117b2:	b084      	sub	sp, #16
   117b4:	af00      	add	r7, sp, #0
   117b6:	6078      	str	r0, [r7, #4]
   117b8:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   117ba:	6878      	ldr	r0, [r7, #4]
   117bc:	f7ff fa34 	bl	10c28 <MP_OBJ_IS_OBJ>
   117c0:	4603      	mov	r3, r0
   117c2:	f083 0301 	eor.w	r3, r3, #1
   117c6:	b2db      	uxtb	r3, r3
   117c8:	2b00      	cmp	r3, #0
   117ca:	d104      	bne.n	117d6 <mp_obj_list_remove+0x26>
   117cc:	687b      	ldr	r3, [r7, #4]
   117ce:	681b      	ldr	r3, [r3, #0]
   117d0:	4a10      	ldr	r2, [pc, #64]	; (11814 <mp_obj_list_remove+0x64>)
   117d2:	4293      	cmp	r3, r2
   117d4:	d006      	beq.n	117e4 <mp_obj_list_remove+0x34>
   117d6:	4b10      	ldr	r3, [pc, #64]	; (11818 <mp_obj_list_remove+0x68>)
   117d8:	4a10      	ldr	r2, [pc, #64]	; (1181c <mp_obj_list_remove+0x6c>)
   117da:	f44f 71c5 	mov.w	r1, #394	; 0x18a
   117de:	4810      	ldr	r0, [pc, #64]	; (11820 <mp_obj_list_remove+0x70>)
   117e0:	f009 ffd0 	bl	1b784 <__assert_func>
    mp_obj_t args[] = {self_in, value};
   117e4:	687b      	ldr	r3, [r7, #4]
   117e6:	60bb      	str	r3, [r7, #8]
   117e8:	683b      	ldr	r3, [r7, #0]
   117ea:	60fb      	str	r3, [r7, #12]
    args[1] = list_index(2, args);
   117ec:	f107 0308 	add.w	r3, r7, #8
   117f0:	4619      	mov	r1, r3
   117f2:	2002      	movs	r0, #2
   117f4:	f7ff ff3c 	bl	11670 <list_index>
   117f8:	4603      	mov	r3, r0
   117fa:	60fb      	str	r3, [r7, #12]
    list_pop(2, args);
   117fc:	f107 0308 	add.w	r3, r7, #8
   11800:	4619      	mov	r1, r3
   11802:	2002      	movs	r0, #2
   11804:	f7ff fd08 	bl	11218 <list_pop>

    return mp_const_none;
   11808:	4b06      	ldr	r3, [pc, #24]	; (11824 <mp_obj_list_remove+0x74>)
}
   1180a:	4618      	mov	r0, r3
   1180c:	3710      	adds	r7, #16
   1180e:	46bd      	mov	sp, r7
   11810:	bd80      	pop	{r7, pc}
   11812:	bf00      	nop
   11814:	000231ec 	.word	0x000231ec
   11818:	00022fdc 	.word	0x00022fdc
   1181c:	000232b4 	.word	0x000232b4
   11820:	00023038 	.word	0x00023038
   11824:	000234d4 	.word	0x000234d4

00011828 <list_reverse>:

STATIC mp_obj_t list_reverse(mp_obj_t self_in) {
   11828:	b580      	push	{r7, lr}
   1182a:	b086      	sub	sp, #24
   1182c:	af00      	add	r7, sp, #0
   1182e:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11830:	6878      	ldr	r0, [r7, #4]
   11832:	f7ff f9f9 	bl	10c28 <MP_OBJ_IS_OBJ>
   11836:	4603      	mov	r3, r0
   11838:	f083 0301 	eor.w	r3, r3, #1
   1183c:	b2db      	uxtb	r3, r3
   1183e:	2b00      	cmp	r3, #0
   11840:	d104      	bne.n	1184c <list_reverse+0x24>
   11842:	687b      	ldr	r3, [r7, #4]
   11844:	681b      	ldr	r3, [r3, #0]
   11846:	4a23      	ldr	r2, [pc, #140]	; (118d4 <list_reverse+0xac>)
   11848:	4293      	cmp	r3, r2
   1184a:	d006      	beq.n	1185a <list_reverse+0x32>
   1184c:	4b22      	ldr	r3, [pc, #136]	; (118d8 <list_reverse+0xb0>)
   1184e:	4a23      	ldr	r2, [pc, #140]	; (118dc <list_reverse+0xb4>)
   11850:	f240 1193 	movw	r1, #403	; 0x193
   11854:	4822      	ldr	r0, [pc, #136]	; (118e0 <list_reverse+0xb8>)
   11856:	f009 ff95 	bl	1b784 <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   1185a:	687b      	ldr	r3, [r7, #4]
   1185c:	613b      	str	r3, [r7, #16]

    mp_int_t len = self->len;
   1185e:	693b      	ldr	r3, [r7, #16]
   11860:	689b      	ldr	r3, [r3, #8]
   11862:	60fb      	str	r3, [r7, #12]
    for (mp_int_t i = 0; i < len/2; i++) {
   11864:	2300      	movs	r3, #0
   11866:	617b      	str	r3, [r7, #20]
   11868:	e026      	b.n	118b8 <list_reverse+0x90>
         mp_obj_t a = self->items[i];
   1186a:	693b      	ldr	r3, [r7, #16]
   1186c:	68da      	ldr	r2, [r3, #12]
   1186e:	697b      	ldr	r3, [r7, #20]
   11870:	009b      	lsls	r3, r3, #2
   11872:	4413      	add	r3, r2
   11874:	681b      	ldr	r3, [r3, #0]
   11876:	60bb      	str	r3, [r7, #8]
         self->items[i] = self->items[len-i-1];
   11878:	693b      	ldr	r3, [r7, #16]
   1187a:	68da      	ldr	r2, [r3, #12]
   1187c:	697b      	ldr	r3, [r7, #20]
   1187e:	009b      	lsls	r3, r3, #2
   11880:	441a      	add	r2, r3
   11882:	693b      	ldr	r3, [r7, #16]
   11884:	68d9      	ldr	r1, [r3, #12]
   11886:	68f8      	ldr	r0, [r7, #12]
   11888:	697b      	ldr	r3, [r7, #20]
   1188a:	1ac3      	subs	r3, r0, r3
   1188c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11890:	3b01      	subs	r3, #1
   11892:	009b      	lsls	r3, r3, #2
   11894:	440b      	add	r3, r1
   11896:	681b      	ldr	r3, [r3, #0]
   11898:	6013      	str	r3, [r2, #0]
         self->items[len-i-1] = a;
   1189a:	693b      	ldr	r3, [r7, #16]
   1189c:	68da      	ldr	r2, [r3, #12]
   1189e:	68f9      	ldr	r1, [r7, #12]
   118a0:	697b      	ldr	r3, [r7, #20]
   118a2:	1acb      	subs	r3, r1, r3
   118a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   118a8:	3b01      	subs	r3, #1
   118aa:	009b      	lsls	r3, r3, #2
   118ac:	4413      	add	r3, r2
   118ae:	68ba      	ldr	r2, [r7, #8]
   118b0:	601a      	str	r2, [r3, #0]
    for (mp_int_t i = 0; i < len/2; i++) {
   118b2:	697b      	ldr	r3, [r7, #20]
   118b4:	3301      	adds	r3, #1
   118b6:	617b      	str	r3, [r7, #20]
   118b8:	68fb      	ldr	r3, [r7, #12]
   118ba:	0fda      	lsrs	r2, r3, #31
   118bc:	4413      	add	r3, r2
   118be:	105b      	asrs	r3, r3, #1
   118c0:	461a      	mov	r2, r3
   118c2:	697b      	ldr	r3, [r7, #20]
   118c4:	429a      	cmp	r2, r3
   118c6:	dcd0      	bgt.n	1186a <list_reverse+0x42>
    }

    return mp_const_none;
   118c8:	4b06      	ldr	r3, [pc, #24]	; (118e4 <list_reverse+0xbc>)
}
   118ca:	4618      	mov	r0, r3
   118cc:	3718      	adds	r7, #24
   118ce:	46bd      	mov	sp, r7
   118d0:	bd80      	pop	{r7, pc}
   118d2:	bf00      	nop
   118d4:	000231ec 	.word	0x000231ec
   118d8:	00022fdc 	.word	0x00022fdc
   118dc:	000232c8 	.word	0x000232c8
   118e0:	00023038 	.word	0x00023038
   118e4:	000234d4 	.word	0x000234d4

000118e8 <mp_obj_list_init>:
    .subscr = list_subscr,
    .getiter = list_getiter,
    .locals_dict = (mp_obj_dict_t*)&list_locals_dict,
};

void mp_obj_list_init(mp_obj_list_t *o, size_t n) {
   118e8:	b580      	push	{r7, lr}
   118ea:	b082      	sub	sp, #8
   118ec:	af00      	add	r7, sp, #0
   118ee:	6078      	str	r0, [r7, #4]
   118f0:	6039      	str	r1, [r7, #0]
    o->base.type = &mp_type_list;
   118f2:	687b      	ldr	r3, [r7, #4]
   118f4:	4a13      	ldr	r2, [pc, #76]	; (11944 <mp_obj_list_init+0x5c>)
   118f6:	601a      	str	r2, [r3, #0]
    o->alloc = n < LIST_MIN_ALLOC ? LIST_MIN_ALLOC : n;
   118f8:	683b      	ldr	r3, [r7, #0]
   118fa:	2b04      	cmp	r3, #4
   118fc:	bf38      	it	cc
   118fe:	2304      	movcc	r3, #4
   11900:	461a      	mov	r2, r3
   11902:	687b      	ldr	r3, [r7, #4]
   11904:	605a      	str	r2, [r3, #4]
    o->len = n;
   11906:	687b      	ldr	r3, [r7, #4]
   11908:	683a      	ldr	r2, [r7, #0]
   1190a:	609a      	str	r2, [r3, #8]
    o->items = m_new(mp_obj_t, o->alloc);
   1190c:	687b      	ldr	r3, [r7, #4]
   1190e:	685b      	ldr	r3, [r3, #4]
   11910:	009b      	lsls	r3, r3, #2
   11912:	4618      	mov	r0, r3
   11914:	f7ee fd02 	bl	31c <m_malloc>
   11918:	4602      	mov	r2, r0
   1191a:	687b      	ldr	r3, [r7, #4]
   1191c:	60da      	str	r2, [r3, #12]
    mp_seq_clear(o->items, n, o->alloc, sizeof(*o->items));
   1191e:	687b      	ldr	r3, [r7, #4]
   11920:	68da      	ldr	r2, [r3, #12]
   11922:	683b      	ldr	r3, [r7, #0]
   11924:	009b      	lsls	r3, r3, #2
   11926:	18d0      	adds	r0, r2, r3
   11928:	687b      	ldr	r3, [r7, #4]
   1192a:	685a      	ldr	r2, [r3, #4]
   1192c:	683b      	ldr	r3, [r7, #0]
   1192e:	1ad3      	subs	r3, r2, r3
   11930:	009b      	lsls	r3, r3, #2
   11932:	461a      	mov	r2, r3
   11934:	2100      	movs	r1, #0
   11936:	f00b fac7 	bl	1cec8 <memset>
}
   1193a:	bf00      	nop
   1193c:	3708      	adds	r7, #8
   1193e:	46bd      	mov	sp, r7
   11940:	bd80      	pop	{r7, pc}
   11942:	bf00      	nop
   11944:	000231ec 	.word	0x000231ec

00011948 <list_new>:

STATIC mp_obj_list_t *list_new(size_t n) {
   11948:	b580      	push	{r7, lr}
   1194a:	b084      	sub	sp, #16
   1194c:	af00      	add	r7, sp, #0
   1194e:	6078      	str	r0, [r7, #4]
    mp_obj_list_t *o = m_new_obj(mp_obj_list_t);
   11950:	2010      	movs	r0, #16
   11952:	f7ee fce3 	bl	31c <m_malloc>
   11956:	60f8      	str	r0, [r7, #12]
    mp_obj_list_init(o, n);
   11958:	6879      	ldr	r1, [r7, #4]
   1195a:	68f8      	ldr	r0, [r7, #12]
   1195c:	f7ff ffc4 	bl	118e8 <mp_obj_list_init>
    return o;
   11960:	68fb      	ldr	r3, [r7, #12]
}
   11962:	4618      	mov	r0, r3
   11964:	3710      	adds	r7, #16
   11966:	46bd      	mov	sp, r7
   11968:	bd80      	pop	{r7, pc}
   1196a:	bf00      	nop

0001196c <mp_obj_new_list>:

mp_obj_t mp_obj_new_list(size_t n, mp_obj_t *items) {
   1196c:	b580      	push	{r7, lr}
   1196e:	b084      	sub	sp, #16
   11970:	af00      	add	r7, sp, #0
   11972:	6078      	str	r0, [r7, #4]
   11974:	6039      	str	r1, [r7, #0]
    mp_obj_list_t *o = list_new(n);
   11976:	6878      	ldr	r0, [r7, #4]
   11978:	f7ff ffe6 	bl	11948 <list_new>
   1197c:	60b8      	str	r0, [r7, #8]
    if (items != NULL) {
   1197e:	683b      	ldr	r3, [r7, #0]
   11980:	2b00      	cmp	r3, #0
   11982:	d014      	beq.n	119ae <mp_obj_new_list+0x42>
        for (size_t i = 0; i < n; i++) {
   11984:	2300      	movs	r3, #0
   11986:	60fb      	str	r3, [r7, #12]
   11988:	e00d      	b.n	119a6 <mp_obj_new_list+0x3a>
            o->items[i] = items[i];
   1198a:	68bb      	ldr	r3, [r7, #8]
   1198c:	68da      	ldr	r2, [r3, #12]
   1198e:	68fb      	ldr	r3, [r7, #12]
   11990:	009b      	lsls	r3, r3, #2
   11992:	4413      	add	r3, r2
   11994:	68fa      	ldr	r2, [r7, #12]
   11996:	0092      	lsls	r2, r2, #2
   11998:	6839      	ldr	r1, [r7, #0]
   1199a:	440a      	add	r2, r1
   1199c:	6812      	ldr	r2, [r2, #0]
   1199e:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < n; i++) {
   119a0:	68fb      	ldr	r3, [r7, #12]
   119a2:	3301      	adds	r3, #1
   119a4:	60fb      	str	r3, [r7, #12]
   119a6:	68fa      	ldr	r2, [r7, #12]
   119a8:	687b      	ldr	r3, [r7, #4]
   119aa:	429a      	cmp	r2, r3
   119ac:	d3ed      	bcc.n	1198a <mp_obj_new_list+0x1e>
        }
    }
    return MP_OBJ_FROM_PTR(o);
   119ae:	68bb      	ldr	r3, [r7, #8]
}
   119b0:	4618      	mov	r0, r3
   119b2:	3710      	adds	r7, #16
   119b4:	46bd      	mov	sp, r7
   119b6:	bd80      	pop	{r7, pc}

000119b8 <mp_obj_list_get>:

void mp_obj_list_get(mp_obj_t self_in, size_t *len, mp_obj_t **items) {
   119b8:	b480      	push	{r7}
   119ba:	b087      	sub	sp, #28
   119bc:	af00      	add	r7, sp, #0
   119be:	60f8      	str	r0, [r7, #12]
   119c0:	60b9      	str	r1, [r7, #8]
   119c2:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   119c4:	68fb      	ldr	r3, [r7, #12]
   119c6:	617b      	str	r3, [r7, #20]
    *len = self->len;
   119c8:	697b      	ldr	r3, [r7, #20]
   119ca:	689a      	ldr	r2, [r3, #8]
   119cc:	68bb      	ldr	r3, [r7, #8]
   119ce:	601a      	str	r2, [r3, #0]
    *items = self->items;
   119d0:	697b      	ldr	r3, [r7, #20]
   119d2:	68da      	ldr	r2, [r3, #12]
   119d4:	687b      	ldr	r3, [r7, #4]
   119d6:	601a      	str	r2, [r3, #0]
}
   119d8:	bf00      	nop
   119da:	371c      	adds	r7, #28
   119dc:	46bd      	mov	sp, r7
   119de:	f85d 7b04 	ldr.w	r7, [sp], #4
   119e2:	4770      	bx	lr

000119e4 <mp_obj_list_set_len>:

void mp_obj_list_set_len(mp_obj_t self_in, size_t len) {
   119e4:	b480      	push	{r7}
   119e6:	b085      	sub	sp, #20
   119e8:	af00      	add	r7, sp, #0
   119ea:	6078      	str	r0, [r7, #4]
   119ec:	6039      	str	r1, [r7, #0]
    // trust that the caller knows what it's doing
    // TODO realloc if len got much smaller than alloc
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   119ee:	687b      	ldr	r3, [r7, #4]
   119f0:	60fb      	str	r3, [r7, #12]
    self->len = len;
   119f2:	68fb      	ldr	r3, [r7, #12]
   119f4:	683a      	ldr	r2, [r7, #0]
   119f6:	609a      	str	r2, [r3, #8]
}
   119f8:	bf00      	nop
   119fa:	3714      	adds	r7, #20
   119fc:	46bd      	mov	sp, r7
   119fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   11a02:	4770      	bx	lr

00011a04 <mp_obj_list_store>:

void mp_obj_list_store(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   11a04:	b580      	push	{r7, lr}
   11a06:	b086      	sub	sp, #24
   11a08:	af00      	add	r7, sp, #0
   11a0a:	60f8      	str	r0, [r7, #12]
   11a0c:	60b9      	str	r1, [r7, #8]
   11a0e:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11a10:	68fb      	ldr	r3, [r7, #12]
   11a12:	617b      	str	r3, [r7, #20]
    size_t i = mp_get_index(self->base.type, self->len, index, false);
   11a14:	697b      	ldr	r3, [r7, #20]
   11a16:	6818      	ldr	r0, [r3, #0]
   11a18:	697b      	ldr	r3, [r7, #20]
   11a1a:	6899      	ldr	r1, [r3, #8]
   11a1c:	2300      	movs	r3, #0
   11a1e:	68ba      	ldr	r2, [r7, #8]
   11a20:	f7fc fa06 	bl	de30 <mp_get_index>
   11a24:	6138      	str	r0, [r7, #16]
    self->items[i] = value;
   11a26:	697b      	ldr	r3, [r7, #20]
   11a28:	68da      	ldr	r2, [r3, #12]
   11a2a:	693b      	ldr	r3, [r7, #16]
   11a2c:	009b      	lsls	r3, r3, #2
   11a2e:	4413      	add	r3, r2
   11a30:	687a      	ldr	r2, [r7, #4]
   11a32:	601a      	str	r2, [r3, #0]
}
   11a34:	bf00      	nop
   11a36:	3718      	adds	r7, #24
   11a38:	46bd      	mov	sp, r7
   11a3a:	bd80      	pop	{r7, pc}

00011a3c <list_it_iternext>:
    mp_fun_1_t iternext;
    mp_obj_t list;
    size_t cur;
} mp_obj_list_it_t;

STATIC mp_obj_t list_it_iternext(mp_obj_t self_in) {
   11a3c:	b480      	push	{r7}
   11a3e:	b087      	sub	sp, #28
   11a40:	af00      	add	r7, sp, #0
   11a42:	6078      	str	r0, [r7, #4]
    mp_obj_list_it_t *self = MP_OBJ_TO_PTR(self_in);
   11a44:	687b      	ldr	r3, [r7, #4]
   11a46:	617b      	str	r3, [r7, #20]
    mp_obj_list_t *list = MP_OBJ_TO_PTR(self->list);
   11a48:	697b      	ldr	r3, [r7, #20]
   11a4a:	689b      	ldr	r3, [r3, #8]
   11a4c:	613b      	str	r3, [r7, #16]
    if (self->cur < list->len) {
   11a4e:	697b      	ldr	r3, [r7, #20]
   11a50:	68da      	ldr	r2, [r3, #12]
   11a52:	693b      	ldr	r3, [r7, #16]
   11a54:	689b      	ldr	r3, [r3, #8]
   11a56:	429a      	cmp	r2, r3
   11a58:	d20e      	bcs.n	11a78 <list_it_iternext+0x3c>
        mp_obj_t o_out = list->items[self->cur];
   11a5a:	693b      	ldr	r3, [r7, #16]
   11a5c:	68da      	ldr	r2, [r3, #12]
   11a5e:	697b      	ldr	r3, [r7, #20]
   11a60:	68db      	ldr	r3, [r3, #12]
   11a62:	009b      	lsls	r3, r3, #2
   11a64:	4413      	add	r3, r2
   11a66:	681b      	ldr	r3, [r3, #0]
   11a68:	60fb      	str	r3, [r7, #12]
        self->cur += 1;
   11a6a:	697b      	ldr	r3, [r7, #20]
   11a6c:	68db      	ldr	r3, [r3, #12]
   11a6e:	1c5a      	adds	r2, r3, #1
   11a70:	697b      	ldr	r3, [r7, #20]
   11a72:	60da      	str	r2, [r3, #12]
        return o_out;
   11a74:	68fb      	ldr	r3, [r7, #12]
   11a76:	e000      	b.n	11a7a <list_it_iternext+0x3e>
    } else {
        return MP_OBJ_STOP_ITERATION;
   11a78:	2304      	movs	r3, #4
    }
}
   11a7a:	4618      	mov	r0, r3
   11a7c:	371c      	adds	r7, #28
   11a7e:	46bd      	mov	sp, r7
   11a80:	f85d 7b04 	ldr.w	r7, [sp], #4
   11a84:	4770      	bx	lr
   11a86:	bf00      	nop

00011a88 <mp_obj_new_list_iterator>:

mp_obj_t mp_obj_new_list_iterator(mp_obj_t list, size_t cur, mp_obj_iter_buf_t *iter_buf) {
   11a88:	b480      	push	{r7}
   11a8a:	b087      	sub	sp, #28
   11a8c:	af00      	add	r7, sp, #0
   11a8e:	60f8      	str	r0, [r7, #12]
   11a90:	60b9      	str	r1, [r7, #8]
   11a92:	607a      	str	r2, [r7, #4]
    assert(sizeof(mp_obj_list_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_list_it_t *o = (mp_obj_list_it_t*)iter_buf;
   11a94:	687b      	ldr	r3, [r7, #4]
   11a96:	617b      	str	r3, [r7, #20]
    o->base.type = &mp_type_polymorph_iter;
   11a98:	697b      	ldr	r3, [r7, #20]
   11a9a:	4a09      	ldr	r2, [pc, #36]	; (11ac0 <mp_obj_new_list_iterator+0x38>)
   11a9c:	601a      	str	r2, [r3, #0]
    o->iternext = list_it_iternext;
   11a9e:	697b      	ldr	r3, [r7, #20]
   11aa0:	4a08      	ldr	r2, [pc, #32]	; (11ac4 <mp_obj_new_list_iterator+0x3c>)
   11aa2:	605a      	str	r2, [r3, #4]
    o->list = list;
   11aa4:	697b      	ldr	r3, [r7, #20]
   11aa6:	68fa      	ldr	r2, [r7, #12]
   11aa8:	609a      	str	r2, [r3, #8]
    o->cur = cur;
   11aaa:	697b      	ldr	r3, [r7, #20]
   11aac:	68ba      	ldr	r2, [r7, #8]
   11aae:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   11ab0:	697b      	ldr	r3, [r7, #20]
}
   11ab2:	4618      	mov	r0, r3
   11ab4:	371c      	adds	r7, #28
   11ab6:	46bd      	mov	sp, r7
   11ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
   11abc:	4770      	bx	lr
   11abe:	bf00      	nop
   11ac0:	00023454 	.word	0x00023454
   11ac4:	00011a3d 	.word	0x00011a3d

00011ac8 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   11ac8:	b480      	push	{r7}
   11aca:	b083      	sub	sp, #12
   11acc:	af00      	add	r7, sp, #0
   11ace:	6078      	str	r0, [r7, #4]
   11ad0:	687b      	ldr	r3, [r7, #4]
   11ad2:	f003 0303 	and.w	r3, r3, #3
   11ad6:	2b00      	cmp	r3, #0
   11ad8:	bf0c      	ite	eq
   11ada:	2301      	moveq	r3, #1
   11adc:	2300      	movne	r3, #0
   11ade:	b2db      	uxtb	r3, r3
   11ae0:	4618      	mov	r0, r3
   11ae2:	370c      	adds	r7, #12
   11ae4:	46bd      	mov	sp, r7
   11ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
   11aea:	4770      	bx	lr

00011aec <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   11aec:	b580      	push	{r7, lr}
   11aee:	b084      	sub	sp, #16
   11af0:	af00      	add	r7, sp, #0
   11af2:	60f8      	str	r0, [r7, #12]
   11af4:	60b9      	str	r1, [r7, #8]
   11af6:	607a      	str	r2, [r7, #4]
   11af8:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   11afa:	687b      	ldr	r3, [r7, #4]
   11afc:	045a      	lsls	r2, r3, #17
   11afe:	683b      	ldr	r3, [r7, #0]
   11b00:	005b      	lsls	r3, r3, #1
   11b02:	431a      	orrs	r2, r3
   11b04:	7e3b      	ldrb	r3, [r7, #24]
   11b06:	2b00      	cmp	r3, #0
   11b08:	d001      	beq.n	11b0e <mp_arg_check_num+0x22>
   11b0a:	2301      	movs	r3, #1
   11b0c:	e000      	b.n	11b10 <mp_arg_check_num+0x24>
   11b0e:	2300      	movs	r3, #0
   11b10:	4313      	orrs	r3, r2
   11b12:	461a      	mov	r2, r3
   11b14:	68b9      	ldr	r1, [r7, #8]
   11b16:	68f8      	ldr	r0, [r7, #12]
   11b18:	f7fb faba 	bl	d090 <mp_arg_check_num_sig>
}
   11b1c:	bf00      	nop
   11b1e:	3710      	adds	r7, #16
   11b20:	46bd      	mov	sp, r7
   11b22:	bd80      	pop	{r7, pc}

00011b24 <map_make_new>:
    size_t n_iters;
    mp_obj_t fun;
    mp_obj_t iters[];
} mp_obj_map_t;

STATIC mp_obj_t map_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   11b24:	b580      	push	{r7, lr}
   11b26:	b088      	sub	sp, #32
   11b28:	af02      	add	r7, sp, #8
   11b2a:	60f8      	str	r0, [r7, #12]
   11b2c:	60b9      	str	r1, [r7, #8]
   11b2e:	607a      	str	r2, [r7, #4]
   11b30:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 2, MP_OBJ_FUN_ARGS_MAX, false);
   11b32:	2300      	movs	r3, #0
   11b34:	9300      	str	r3, [sp, #0]
   11b36:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11b3a:	2202      	movs	r2, #2
   11b3c:	6879      	ldr	r1, [r7, #4]
   11b3e:	68b8      	ldr	r0, [r7, #8]
   11b40:	f7ff ffd4 	bl	11aec <mp_arg_check_num>
    mp_obj_map_t *o = m_new_obj_var(mp_obj_map_t, mp_obj_t, n_args - 1);
   11b44:	68bb      	ldr	r3, [r7, #8]
   11b46:	3302      	adds	r3, #2
   11b48:	009b      	lsls	r3, r3, #2
   11b4a:	4618      	mov	r0, r3
   11b4c:	f7ee fbe6 	bl	31c <m_malloc>
   11b50:	6138      	str	r0, [r7, #16]
    o->base.type = type;
   11b52:	693b      	ldr	r3, [r7, #16]
   11b54:	68fa      	ldr	r2, [r7, #12]
   11b56:	601a      	str	r2, [r3, #0]
    o->n_iters = n_args - 1;
   11b58:	68bb      	ldr	r3, [r7, #8]
   11b5a:	1e5a      	subs	r2, r3, #1
   11b5c:	693b      	ldr	r3, [r7, #16]
   11b5e:	605a      	str	r2, [r3, #4]
    o->fun = args[0];
   11b60:	683b      	ldr	r3, [r7, #0]
   11b62:	681a      	ldr	r2, [r3, #0]
   11b64:	693b      	ldr	r3, [r7, #16]
   11b66:	609a      	str	r2, [r3, #8]
    for (size_t i = 0; i < n_args - 1; i++) {
   11b68:	2300      	movs	r3, #0
   11b6a:	617b      	str	r3, [r7, #20]
   11b6c:	e013      	b.n	11b96 <map_make_new+0x72>
        o->iters[i] = mp_getiter(args[i + 1], NULL);
   11b6e:	697b      	ldr	r3, [r7, #20]
   11b70:	3301      	adds	r3, #1
   11b72:	009b      	lsls	r3, r3, #2
   11b74:	683a      	ldr	r2, [r7, #0]
   11b76:	4413      	add	r3, r2
   11b78:	681b      	ldr	r3, [r3, #0]
   11b7a:	2100      	movs	r1, #0
   11b7c:	4618      	mov	r0, r3
   11b7e:	f7fa fee1 	bl	c944 <mp_getiter>
   11b82:	4601      	mov	r1, r0
   11b84:	693a      	ldr	r2, [r7, #16]
   11b86:	697b      	ldr	r3, [r7, #20]
   11b88:	3302      	adds	r3, #2
   11b8a:	009b      	lsls	r3, r3, #2
   11b8c:	4413      	add	r3, r2
   11b8e:	6059      	str	r1, [r3, #4]
    for (size_t i = 0; i < n_args - 1; i++) {
   11b90:	697b      	ldr	r3, [r7, #20]
   11b92:	3301      	adds	r3, #1
   11b94:	617b      	str	r3, [r7, #20]
   11b96:	68bb      	ldr	r3, [r7, #8]
   11b98:	1e5a      	subs	r2, r3, #1
   11b9a:	697b      	ldr	r3, [r7, #20]
   11b9c:	429a      	cmp	r2, r3
   11b9e:	d8e6      	bhi.n	11b6e <map_make_new+0x4a>
    }
    return MP_OBJ_FROM_PTR(o);
   11ba0:	693b      	ldr	r3, [r7, #16]
}
   11ba2:	4618      	mov	r0, r3
   11ba4:	3718      	adds	r7, #24
   11ba6:	46bd      	mov	sp, r7
   11ba8:	bd80      	pop	{r7, pc}
   11baa:	bf00      	nop

00011bac <map_iternext>:

STATIC mp_obj_t map_iternext(mp_obj_t self_in) {
   11bac:	b580      	push	{r7, lr}
   11bae:	b086      	sub	sp, #24
   11bb0:	af00      	add	r7, sp, #0
   11bb2:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_map));
   11bb4:	6878      	ldr	r0, [r7, #4]
   11bb6:	f7ff ff87 	bl	11ac8 <MP_OBJ_IS_OBJ>
   11bba:	4603      	mov	r3, r0
   11bbc:	f083 0301 	eor.w	r3, r3, #1
   11bc0:	b2db      	uxtb	r3, r3
   11bc2:	2b00      	cmp	r3, #0
   11bc4:	d104      	bne.n	11bd0 <map_iternext+0x24>
   11bc6:	687b      	ldr	r3, [r7, #4]
   11bc8:	681b      	ldr	r3, [r3, #0]
   11bca:	4a21      	ldr	r2, [pc, #132]	; (11c50 <map_iternext+0xa4>)
   11bcc:	4293      	cmp	r3, r2
   11bce:	d005      	beq.n	11bdc <map_iternext+0x30>
   11bd0:	4b20      	ldr	r3, [pc, #128]	; (11c54 <map_iternext+0xa8>)
   11bd2:	4a21      	ldr	r2, [pc, #132]	; (11c58 <map_iternext+0xac>)
   11bd4:	2134      	movs	r1, #52	; 0x34
   11bd6:	4821      	ldr	r0, [pc, #132]	; (11c5c <map_iternext+0xb0>)
   11bd8:	f009 fdd4 	bl	1b784 <__assert_func>
    mp_obj_map_t *self = MP_OBJ_TO_PTR(self_in);
   11bdc:	687b      	ldr	r3, [r7, #4]
   11bde:	613b      	str	r3, [r7, #16]
    mp_obj_t *nextses = m_new(mp_obj_t, self->n_iters);
   11be0:	693b      	ldr	r3, [r7, #16]
   11be2:	685b      	ldr	r3, [r3, #4]
   11be4:	009b      	lsls	r3, r3, #2
   11be6:	4618      	mov	r0, r3
   11be8:	f7ee fb98 	bl	31c <m_malloc>
   11bec:	60f8      	str	r0, [r7, #12]

    for (size_t i = 0; i < self->n_iters; i++) {
   11bee:	2300      	movs	r3, #0
   11bf0:	617b      	str	r3, [r7, #20]
   11bf2:	e01a      	b.n	11c2a <map_iternext+0x7e>
        mp_obj_t next = mp_iternext(self->iters[i]);
   11bf4:	693a      	ldr	r2, [r7, #16]
   11bf6:	697b      	ldr	r3, [r7, #20]
   11bf8:	3302      	adds	r3, #2
   11bfa:	009b      	lsls	r3, r3, #2
   11bfc:	4413      	add	r3, r2
   11bfe:	685b      	ldr	r3, [r3, #4]
   11c00:	4618      	mov	r0, r3
   11c02:	f7fa ff21 	bl	ca48 <mp_iternext>
   11c06:	60b8      	str	r0, [r7, #8]
        if (next == MP_OBJ_STOP_ITERATION) {
   11c08:	68bb      	ldr	r3, [r7, #8]
   11c0a:	2b04      	cmp	r3, #4
   11c0c:	d104      	bne.n	11c18 <map_iternext+0x6c>
            m_del(mp_obj_t, nextses, self->n_iters);
   11c0e:	68f8      	ldr	r0, [r7, #12]
   11c10:	f7ee fbfe 	bl	410 <m_free>
            return MP_OBJ_STOP_ITERATION;
   11c14:	2304      	movs	r3, #4
   11c16:	e016      	b.n	11c46 <map_iternext+0x9a>
        }
        nextses[i] = next;
   11c18:	697b      	ldr	r3, [r7, #20]
   11c1a:	009b      	lsls	r3, r3, #2
   11c1c:	68fa      	ldr	r2, [r7, #12]
   11c1e:	4413      	add	r3, r2
   11c20:	68ba      	ldr	r2, [r7, #8]
   11c22:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < self->n_iters; i++) {
   11c24:	697b      	ldr	r3, [r7, #20]
   11c26:	3301      	adds	r3, #1
   11c28:	617b      	str	r3, [r7, #20]
   11c2a:	693b      	ldr	r3, [r7, #16]
   11c2c:	685a      	ldr	r2, [r3, #4]
   11c2e:	697b      	ldr	r3, [r7, #20]
   11c30:	429a      	cmp	r2, r3
   11c32:	d8df      	bhi.n	11bf4 <map_iternext+0x48>
    }
    return mp_call_function_n_kw(self->fun, self->n_iters, 0, nextses);
   11c34:	693b      	ldr	r3, [r7, #16]
   11c36:	6898      	ldr	r0, [r3, #8]
   11c38:	693b      	ldr	r3, [r7, #16]
   11c3a:	6859      	ldr	r1, [r3, #4]
   11c3c:	68fb      	ldr	r3, [r7, #12]
   11c3e:	2200      	movs	r2, #0
   11c40:	f7fa f908 	bl	be54 <mp_call_function_n_kw>
   11c44:	4603      	mov	r3, r0
}
   11c46:	4618      	mov	r0, r3
   11c48:	3718      	adds	r7, #24
   11c4a:	46bd      	mov	sp, r7
   11c4c:	bd80      	pop	{r7, pc}
   11c4e:	bf00      	nop
   11c50:	00023348 	.word	0x00023348
   11c54:	000232d8 	.word	0x000232d8
   11c58:	00023384 	.word	0x00023384
   11c5c:	00023334 	.word	0x00023334

00011c60 <mp_module_call_init>:
void mp_module_register(qstr qstr, mp_obj_t module);

#if MICROPY_MODULE_BUILTIN_INIT
void mp_module_call_init(qstr module_name, mp_obj_t module_obj);
#else
static inline void mp_module_call_init(qstr module_name, mp_obj_t module_obj) {
   11c60:	b480      	push	{r7}
   11c62:	b083      	sub	sp, #12
   11c64:	af00      	add	r7, sp, #0
   11c66:	6078      	str	r0, [r7, #4]
   11c68:	6039      	str	r1, [r7, #0]
    (void)module_name;
    (void)module_obj;
}
   11c6a:	bf00      	nop
   11c6c:	370c      	adds	r7, #12
   11c6e:	46bd      	mov	sp, r7
   11c70:	f85d 7b04 	ldr.w	r7, [sp], #4
   11c74:	4770      	bx	lr
   11c76:	bf00      	nop

00011c78 <module_print>:

#include "py/objmodule.h"
#include "py/runtime.h"
#include "py/builtin.h"

STATIC void module_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   11c78:	b580      	push	{r7, lr}
   11c7a:	b088      	sub	sp, #32
   11c7c:	af00      	add	r7, sp, #0
   11c7e:	60f8      	str	r0, [r7, #12]
   11c80:	60b9      	str	r1, [r7, #8]
   11c82:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_module_t *self = MP_OBJ_TO_PTR(self_in);
   11c84:	68bb      	ldr	r3, [r7, #8]
   11c86:	61bb      	str	r3, [r7, #24]

    const char *module_name = "";
   11c88:	4b0e      	ldr	r3, [pc, #56]	; (11cc4 <module_print+0x4c>)
   11c8a:	61fb      	str	r3, [r7, #28]
    mp_map_elem_t *elem = mp_map_lookup(&self->globals->map, MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_MAP_LOOKUP);
   11c8c:	69bb      	ldr	r3, [r7, #24]
   11c8e:	685b      	ldr	r3, [r3, #4]
   11c90:	3304      	adds	r3, #4
   11c92:	2200      	movs	r2, #0
   11c94:	2176      	movs	r1, #118	; 0x76
   11c96:	4618      	mov	r0, r3
   11c98:	f7fb fc52 	bl	d540 <mp_map_lookup>
   11c9c:	6178      	str	r0, [r7, #20]
    if (elem != NULL) {
   11c9e:	697b      	ldr	r3, [r7, #20]
   11ca0:	2b00      	cmp	r3, #0
   11ca2:	d005      	beq.n	11cb0 <module_print+0x38>
        module_name = mp_obj_str_get_str(elem->value);
   11ca4:	697b      	ldr	r3, [r7, #20]
   11ca6:	685b      	ldr	r3, [r3, #4]
   11ca8:	4618      	mov	r0, r3
   11caa:	f003 fd69 	bl	15780 <mp_obj_str_get_str>
   11cae:	61f8      	str	r0, [r7, #28]
        mp_printf(print, "<module '%s' from '%s'>", module_name, mp_obj_str_get_str(elem->value));
        return;
    }
#endif

    mp_printf(print, "<module '%s'>", module_name);
   11cb0:	69fa      	ldr	r2, [r7, #28]
   11cb2:	4905      	ldr	r1, [pc, #20]	; (11cc8 <module_print+0x50>)
   11cb4:	68f8      	ldr	r0, [r7, #12]
   11cb6:	f7f0 f9bf 	bl	2038 <mp_printf>
}
   11cba:	bf00      	nop
   11cbc:	3720      	adds	r7, #32
   11cbe:	46bd      	mov	sp, r7
   11cc0:	bd80      	pop	{r7, pc}
   11cc2:	bf00      	nop
   11cc4:	00023394 	.word	0x00023394
   11cc8:	00023398 	.word	0x00023398

00011ccc <module_attr>:

STATIC void module_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   11ccc:	b580      	push	{r7, lr}
   11cce:	b088      	sub	sp, #32
   11cd0:	af00      	add	r7, sp, #0
   11cd2:	60f8      	str	r0, [r7, #12]
   11cd4:	60b9      	str	r1, [r7, #8]
   11cd6:	607a      	str	r2, [r7, #4]
    mp_obj_module_t *self = MP_OBJ_TO_PTR(self_in);
   11cd8:	68fb      	ldr	r3, [r7, #12]
   11cda:	61fb      	str	r3, [r7, #28]
    if (dest[0] == MP_OBJ_NULL) {
   11cdc:	687b      	ldr	r3, [r7, #4]
   11cde:	681b      	ldr	r3, [r3, #0]
   11ce0:	2b00      	cmp	r3, #0
   11ce2:	d113      	bne.n	11d0c <module_attr+0x40>
        // load attribute
        mp_map_elem_t *elem = mp_map_lookup(&self->globals->map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
   11ce4:	69fb      	ldr	r3, [r7, #28]
   11ce6:	685b      	ldr	r3, [r3, #4]
   11ce8:	1d18      	adds	r0, r3, #4
   11cea:	68bb      	ldr	r3, [r7, #8]
   11cec:	009b      	lsls	r3, r3, #2
   11cee:	f043 0302 	orr.w	r3, r3, #2
   11cf2:	2200      	movs	r2, #0
   11cf4:	4619      	mov	r1, r3
   11cf6:	f7fb fc23 	bl	d540 <mp_map_lookup>
   11cfa:	61b8      	str	r0, [r7, #24]
        if (elem != NULL) {
   11cfc:	69bb      	ldr	r3, [r7, #24]
   11cfe:	2b00      	cmp	r3, #0
   11d00:	d02d      	beq.n	11d5e <module_attr+0x92>
            dest[0] = elem->value;
   11d02:	69bb      	ldr	r3, [r7, #24]
   11d04:	685a      	ldr	r2, [r3, #4]
   11d06:	687b      	ldr	r3, [r7, #4]
   11d08:	601a      	str	r2, [r3, #0]
   11d0a:	e028      	b.n	11d5e <module_attr+0x92>
            }
        #endif
        }
    } else {
        // delete/store attribute
        mp_obj_dict_t *dict = self->globals;
   11d0c:	69fb      	ldr	r3, [r7, #28]
   11d0e:	685b      	ldr	r3, [r3, #4]
   11d10:	617b      	str	r3, [r7, #20]
        if (dict->map.is_fixed) {
   11d12:	697b      	ldr	r3, [r7, #20]
   11d14:	791b      	ldrb	r3, [r3, #4]
   11d16:	f003 0302 	and.w	r3, r3, #2
   11d1a:	b2db      	uxtb	r3, r3
   11d1c:	2b00      	cmp	r3, #0
   11d1e:	d11d      	bne.n	11d5c <module_attr+0x90>
            {
                // can't delete or store to fixed map
                return;
            }
        }
        if (dest[1] == MP_OBJ_NULL) {
   11d20:	687b      	ldr	r3, [r7, #4]
   11d22:	3304      	adds	r3, #4
   11d24:	681b      	ldr	r3, [r3, #0]
   11d26:	2b00      	cmp	r3, #0
   11d28:	d108      	bne.n	11d3c <module_attr+0x70>
            // delete attribute
            mp_obj_dict_delete(MP_OBJ_FROM_PTR(dict), MP_OBJ_NEW_QSTR(attr));
   11d2a:	68bb      	ldr	r3, [r7, #8]
   11d2c:	009b      	lsls	r3, r3, #2
   11d2e:	f043 0302 	orr.w	r3, r3, #2
   11d32:	4619      	mov	r1, r3
   11d34:	6978      	ldr	r0, [r7, #20]
   11d36:	f7fd fad7 	bl	f2e8 <mp_obj_dict_delete>
   11d3a:	e00b      	b.n	11d54 <module_attr+0x88>
        } else {
            // store attribute
            mp_obj_dict_store(MP_OBJ_FROM_PTR(dict), MP_OBJ_NEW_QSTR(attr), dest[1]);
   11d3c:	68bb      	ldr	r3, [r7, #8]
   11d3e:	009b      	lsls	r3, r3, #2
   11d40:	f043 0302 	orr.w	r3, r3, #2
   11d44:	4619      	mov	r1, r3
   11d46:	687b      	ldr	r3, [r7, #4]
   11d48:	3304      	adds	r3, #4
   11d4a:	681b      	ldr	r3, [r3, #0]
   11d4c:	461a      	mov	r2, r3
   11d4e:	6978      	ldr	r0, [r7, #20]
   11d50:	f7fd fa92 	bl	f278 <mp_obj_dict_store>
        }
        dest[0] = MP_OBJ_NULL; // indicate success
   11d54:	687b      	ldr	r3, [r7, #4]
   11d56:	2200      	movs	r2, #0
   11d58:	601a      	str	r2, [r3, #0]
   11d5a:	e000      	b.n	11d5e <module_attr+0x92>
                return;
   11d5c:	bf00      	nop
    }
}
   11d5e:	3720      	adds	r7, #32
   11d60:	46bd      	mov	sp, r7
   11d62:	bd80      	pop	{r7, pc}

00011d64 <mp_obj_new_module>:
    .name = MP_QSTR_module,
    .print = module_print,
    .attr = module_attr,
};

mp_obj_t mp_obj_new_module(qstr module_name) {
   11d64:	b580      	push	{r7, lr}
   11d66:	b086      	sub	sp, #24
   11d68:	af00      	add	r7, sp, #0
   11d6a:	6078      	str	r0, [r7, #4]
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
   11d6c:	4b18      	ldr	r3, [pc, #96]	; (11dd0 <mp_obj_new_module+0x6c>)
   11d6e:	617b      	str	r3, [r7, #20]
    mp_map_elem_t *el = mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
   11d70:	687b      	ldr	r3, [r7, #4]
   11d72:	009b      	lsls	r3, r3, #2
   11d74:	f043 0302 	orr.w	r3, r3, #2
   11d78:	2201      	movs	r2, #1
   11d7a:	4619      	mov	r1, r3
   11d7c:	6978      	ldr	r0, [r7, #20]
   11d7e:	f7fb fbdf 	bl	d540 <mp_map_lookup>
   11d82:	6138      	str	r0, [r7, #16]
    // We could error out if module already exists, but let C extensions
    // add new members to existing modules.
    if (el->value != MP_OBJ_NULL) {
   11d84:	693b      	ldr	r3, [r7, #16]
   11d86:	685b      	ldr	r3, [r3, #4]
   11d88:	2b00      	cmp	r3, #0
   11d8a:	d002      	beq.n	11d92 <mp_obj_new_module+0x2e>
        return el->value;
   11d8c:	693b      	ldr	r3, [r7, #16]
   11d8e:	685b      	ldr	r3, [r3, #4]
   11d90:	e01a      	b.n	11dc8 <mp_obj_new_module+0x64>
    }

    // create new module object
    mp_obj_module_t *o = m_new_obj(mp_obj_module_t);
   11d92:	2008      	movs	r0, #8
   11d94:	f7ee fac2 	bl	31c <m_malloc>
   11d98:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_module;
   11d9a:	68fb      	ldr	r3, [r7, #12]
   11d9c:	4a0d      	ldr	r2, [pc, #52]	; (11dd4 <mp_obj_new_module+0x70>)
   11d9e:	601a      	str	r2, [r3, #0]
    o->globals = MP_OBJ_TO_PTR(mp_obj_new_dict(MICROPY_MODULE_DICT_SIZE));
   11da0:	2001      	movs	r0, #1
   11da2:	f7fd fa47 	bl	f234 <mp_obj_new_dict>
   11da6:	4602      	mov	r2, r0
   11da8:	68fb      	ldr	r3, [r7, #12]
   11daa:	605a      	str	r2, [r3, #4]

    // store __name__ entry in the module
    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(module_name));
   11dac:	68fb      	ldr	r3, [r7, #12]
   11dae:	6858      	ldr	r0, [r3, #4]
   11db0:	687b      	ldr	r3, [r7, #4]
   11db2:	009b      	lsls	r3, r3, #2
   11db4:	f043 0302 	orr.w	r3, r3, #2
   11db8:	461a      	mov	r2, r3
   11dba:	2176      	movs	r1, #118	; 0x76
   11dbc:	f7fd fa5c 	bl	f278 <mp_obj_dict_store>

    // store the new module into the slot in the global dict holding all modules
    el->value = MP_OBJ_FROM_PTR(o);
   11dc0:	693b      	ldr	r3, [r7, #16]
   11dc2:	68fa      	ldr	r2, [r7, #12]
   11dc4:	605a      	str	r2, [r3, #4]

    // return the new module
    return MP_OBJ_FROM_PTR(o);
   11dc6:	68fb      	ldr	r3, [r7, #12]
}
   11dc8:	4618      	mov	r0, r3
   11dca:	3718      	adds	r7, #24
   11dcc:	46bd      	mov	sp, r7
   11dce:	bd80      	pop	{r7, pc}
   11dd0:	20001318 	.word	0x20001318
   11dd4:	000233a8 	.word	0x000233a8

00011dd8 <mp_module_get>:

MP_DEFINE_CONST_MAP(mp_builtin_module_weak_links_map, mp_builtin_module_weak_links_table);
#endif

// returns MP_OBJ_NULL if not found
mp_obj_t mp_module_get(qstr module_name) {
   11dd8:	b580      	push	{r7, lr}
   11dda:	b084      	sub	sp, #16
   11ddc:	af00      	add	r7, sp, #0
   11dde:	6078      	str	r0, [r7, #4]
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
   11de0:	4b14      	ldr	r3, [pc, #80]	; (11e34 <mp_module_get+0x5c>)
   11de2:	60bb      	str	r3, [r7, #8]
    // lookup module
    mp_map_elem_t *el = mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP);
   11de4:	687b      	ldr	r3, [r7, #4]
   11de6:	009b      	lsls	r3, r3, #2
   11de8:	f043 0302 	orr.w	r3, r3, #2
   11dec:	2200      	movs	r2, #0
   11dee:	4619      	mov	r1, r3
   11df0:	68b8      	ldr	r0, [r7, #8]
   11df2:	f7fb fba5 	bl	d540 <mp_map_lookup>
   11df6:	60f8      	str	r0, [r7, #12]

    if (el == NULL) {
   11df8:	68fb      	ldr	r3, [r7, #12]
   11dfa:	2b00      	cmp	r3, #0
   11dfc:	d114      	bne.n	11e28 <mp_module_get+0x50>
        // module not found, look for builtin module names
        el = mp_map_lookup((mp_map_t*)&mp_builtin_module_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP);
   11dfe:	687b      	ldr	r3, [r7, #4]
   11e00:	009b      	lsls	r3, r3, #2
   11e02:	f043 0302 	orr.w	r3, r3, #2
   11e06:	2200      	movs	r2, #0
   11e08:	4619      	mov	r1, r3
   11e0a:	480b      	ldr	r0, [pc, #44]	; (11e38 <mp_module_get+0x60>)
   11e0c:	f7fb fb98 	bl	d540 <mp_map_lookup>
   11e10:	60f8      	str	r0, [r7, #12]
        if (el == NULL) {
   11e12:	68fb      	ldr	r3, [r7, #12]
   11e14:	2b00      	cmp	r3, #0
   11e16:	d101      	bne.n	11e1c <mp_module_get+0x44>
            return MP_OBJ_NULL;
   11e18:	2300      	movs	r3, #0
   11e1a:	e007      	b.n	11e2c <mp_module_get+0x54>
        }
        mp_module_call_init(module_name, el->value);
   11e1c:	68fb      	ldr	r3, [r7, #12]
   11e1e:	685b      	ldr	r3, [r3, #4]
   11e20:	4619      	mov	r1, r3
   11e22:	6878      	ldr	r0, [r7, #4]
   11e24:	f7ff ff1c 	bl	11c60 <mp_module_call_init>
    }

    // module found, return it
    return el->value;
   11e28:	68fb      	ldr	r3, [r7, #12]
   11e2a:	685b      	ldr	r3, [r3, #4]
}
   11e2c:	4618      	mov	r0, r3
   11e2e:	3710      	adds	r7, #16
   11e30:	46bd      	mov	sp, r7
   11e32:	bd80      	pop	{r7, pc}
   11e34:	20001318 	.word	0x20001318
   11e38:	0002340c 	.word	0x0002340c

00011e3c <mp_module_register>:

void mp_module_register(qstr qst, mp_obj_t module) {
   11e3c:	b580      	push	{r7, lr}
   11e3e:	b084      	sub	sp, #16
   11e40:	af00      	add	r7, sp, #0
   11e42:	6078      	str	r0, [r7, #4]
   11e44:	6039      	str	r1, [r7, #0]
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
   11e46:	4b09      	ldr	r3, [pc, #36]	; (11e6c <mp_module_register+0x30>)
   11e48:	60fb      	str	r3, [r7, #12]
    mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = module;
   11e4a:	687b      	ldr	r3, [r7, #4]
   11e4c:	009b      	lsls	r3, r3, #2
   11e4e:	f043 0302 	orr.w	r3, r3, #2
   11e52:	2201      	movs	r2, #1
   11e54:	4619      	mov	r1, r3
   11e56:	68f8      	ldr	r0, [r7, #12]
   11e58:	f7fb fb72 	bl	d540 <mp_map_lookup>
   11e5c:	4602      	mov	r2, r0
   11e5e:	683b      	ldr	r3, [r7, #0]
   11e60:	6053      	str	r3, [r2, #4]
}
   11e62:	bf00      	nop
   11e64:	3710      	adds	r7, #16
   11e66:	46bd      	mov	sp, r7
   11e68:	bd80      	pop	{r7, pc}
   11e6a:	bf00      	nop
   11e6c:	20001318 	.word	0x20001318

00011e70 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   11e70:	b580      	push	{r7, lr}
   11e72:	b084      	sub	sp, #16
   11e74:	af00      	add	r7, sp, #0
   11e76:	60f8      	str	r0, [r7, #12]
   11e78:	60b9      	str	r1, [r7, #8]
   11e7a:	607a      	str	r2, [r7, #4]
   11e7c:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   11e7e:	687b      	ldr	r3, [r7, #4]
   11e80:	045a      	lsls	r2, r3, #17
   11e82:	683b      	ldr	r3, [r7, #0]
   11e84:	005b      	lsls	r3, r3, #1
   11e86:	431a      	orrs	r2, r3
   11e88:	7e3b      	ldrb	r3, [r7, #24]
   11e8a:	2b00      	cmp	r3, #0
   11e8c:	d001      	beq.n	11e92 <mp_arg_check_num+0x22>
   11e8e:	2301      	movs	r3, #1
   11e90:	e000      	b.n	11e94 <mp_arg_check_num+0x24>
   11e92:	2300      	movs	r3, #0
   11e94:	4313      	orrs	r3, r2
   11e96:	461a      	mov	r2, r3
   11e98:	68b9      	ldr	r1, [r7, #8]
   11e9a:	68f8      	ldr	r0, [r7, #12]
   11e9c:	f7fb f8f8 	bl	d090 <mp_arg_check_num_sig>
}
   11ea0:	bf00      	nop
   11ea2:	3710      	adds	r7, #16
   11ea4:	46bd      	mov	sp, r7
   11ea6:	bd80      	pop	{r7, pc}

00011ea8 <object_make_new>:

typedef struct _mp_obj_object_t {
    mp_obj_base_t base;
} mp_obj_object_t;

STATIC mp_obj_t object_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   11ea8:	b580      	push	{r7, lr}
   11eaa:	b088      	sub	sp, #32
   11eac:	af02      	add	r7, sp, #8
   11eae:	60f8      	str	r0, [r7, #12]
   11eb0:	60b9      	str	r1, [r7, #8]
   11eb2:	607a      	str	r2, [r7, #4]
   11eb4:	603b      	str	r3, [r7, #0]
    (void)args;
    mp_arg_check_num(n_args, n_kw, 0, 0, false);
   11eb6:	2300      	movs	r3, #0
   11eb8:	9300      	str	r3, [sp, #0]
   11eba:	2300      	movs	r3, #0
   11ebc:	2200      	movs	r2, #0
   11ebe:	6879      	ldr	r1, [r7, #4]
   11ec0:	68b8      	ldr	r0, [r7, #8]
   11ec2:	f7ff ffd5 	bl	11e70 <mp_arg_check_num>
    mp_obj_object_t *o = m_new_obj(mp_obj_object_t);
   11ec6:	2004      	movs	r0, #4
   11ec8:	f7ee fa28 	bl	31c <m_malloc>
   11ecc:	6178      	str	r0, [r7, #20]
    o->base.type = type;
   11ece:	697b      	ldr	r3, [r7, #20]
   11ed0:	68fa      	ldr	r2, [r7, #12]
   11ed2:	601a      	str	r2, [r3, #0]
    return MP_OBJ_FROM_PTR(o);
   11ed4:	697b      	ldr	r3, [r7, #20]
}
   11ed6:	4618      	mov	r0, r3
   11ed8:	3718      	adds	r7, #24
   11eda:	46bd      	mov	sp, r7
   11edc:	bd80      	pop	{r7, pc}
   11ede:	bf00      	nop

00011ee0 <polymorph_it_iternext>:
typedef struct _mp_obj_polymorph_iter_t {
    mp_obj_base_t base;
    mp_fun_1_t iternext;
} mp_obj_polymorph_iter_t;

STATIC mp_obj_t polymorph_it_iternext(mp_obj_t self_in) {
   11ee0:	b580      	push	{r7, lr}
   11ee2:	b084      	sub	sp, #16
   11ee4:	af00      	add	r7, sp, #0
   11ee6:	6078      	str	r0, [r7, #4]
    mp_obj_polymorph_iter_t *self = MP_OBJ_TO_PTR(self_in);
   11ee8:	687b      	ldr	r3, [r7, #4]
   11eea:	60fb      	str	r3, [r7, #12]
    // Redirect call to object instance's iternext method
    return self->iternext(self_in);
   11eec:	68fb      	ldr	r3, [r7, #12]
   11eee:	685b      	ldr	r3, [r3, #4]
   11ef0:	6878      	ldr	r0, [r7, #4]
   11ef2:	4798      	blx	r3
   11ef4:	4603      	mov	r3, r0
}
   11ef6:	4618      	mov	r0, r3
   11ef8:	3710      	adds	r7, #16
   11efa:	46bd      	mov	sp, r7
   11efc:	bd80      	pop	{r7, pc}
   11efe:	bf00      	nop

00011f00 <none_print>:

typedef struct _mp_obj_none_t {
    mp_obj_base_t base;
} mp_obj_none_t;

STATIC void none_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   11f00:	b580      	push	{r7, lr}
   11f02:	b084      	sub	sp, #16
   11f04:	af00      	add	r7, sp, #0
   11f06:	60f8      	str	r0, [r7, #12]
   11f08:	60b9      	str	r1, [r7, #8]
   11f0a:	607a      	str	r2, [r7, #4]
    (void)self_in;
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "null");
    } else {
        mp_print_str(print, "None");
   11f0c:	4903      	ldr	r1, [pc, #12]	; (11f1c <none_print+0x1c>)
   11f0e:	68f8      	ldr	r0, [r7, #12]
   11f10:	f7ef fd7e 	bl	1a10 <mp_print_str>
    }
}
   11f14:	bf00      	nop
   11f16:	3710      	adds	r7, #16
   11f18:	46bd      	mov	sp, r7
   11f1a:	bd80      	pop	{r7, pc}
   11f1c:	00023490 	.word	0x00023490

00011f20 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   11f20:	b480      	push	{r7}
   11f22:	b083      	sub	sp, #12
   11f24:	af00      	add	r7, sp, #0
   11f26:	6078      	str	r0, [r7, #4]
   11f28:	687b      	ldr	r3, [r7, #4]
   11f2a:	2b00      	cmp	r3, #0
   11f2c:	d001      	beq.n	11f32 <mp_obj_new_bool+0x12>
   11f2e:	4b04      	ldr	r3, [pc, #16]	; (11f40 <mp_obj_new_bool+0x20>)
   11f30:	e000      	b.n	11f34 <mp_obj_new_bool+0x14>
   11f32:	4b04      	ldr	r3, [pc, #16]	; (11f44 <mp_obj_new_bool+0x24>)
   11f34:	4618      	mov	r0, r3
   11f36:	370c      	adds	r7, #12
   11f38:	46bd      	mov	sp, r7
   11f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
   11f3e:	4770      	bx	lr
   11f40:	00021c60 	.word	0x00021c60
   11f44:	00021c58 	.word	0x00021c58

00011f48 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   11f48:	b580      	push	{r7, lr}
   11f4a:	b084      	sub	sp, #16
   11f4c:	af00      	add	r7, sp, #0
   11f4e:	60f8      	str	r0, [r7, #12]
   11f50:	60b9      	str	r1, [r7, #8]
   11f52:	607a      	str	r2, [r7, #4]
   11f54:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   11f56:	687b      	ldr	r3, [r7, #4]
   11f58:	045a      	lsls	r2, r3, #17
   11f5a:	683b      	ldr	r3, [r7, #0]
   11f5c:	005b      	lsls	r3, r3, #1
   11f5e:	431a      	orrs	r2, r3
   11f60:	7e3b      	ldrb	r3, [r7, #24]
   11f62:	2b00      	cmp	r3, #0
   11f64:	d001      	beq.n	11f6a <mp_arg_check_num+0x22>
   11f66:	2301      	movs	r3, #1
   11f68:	e000      	b.n	11f6c <mp_arg_check_num+0x24>
   11f6a:	2300      	movs	r3, #0
   11f6c:	4313      	orrs	r3, r2
   11f6e:	461a      	mov	r2, r3
   11f70:	68b9      	ldr	r1, [r7, #8]
   11f72:	68f8      	ldr	r0, [r7, #12]
   11f74:	f7fb f88c 	bl	d090 <mp_arg_check_num_sig>
}
   11f78:	bf00      	nop
   11f7a:	3710      	adds	r7, #16
   11f7c:	46bd      	mov	sp, r7
   11f7e:	bd80      	pop	{r7, pc}

00011f80 <range_it_iternext>:
    mp_int_t cur;
    mp_int_t stop;
    mp_int_t step;
} mp_obj_range_it_t;

STATIC mp_obj_t range_it_iternext(mp_obj_t o_in) {
   11f80:	b480      	push	{r7}
   11f82:	b085      	sub	sp, #20
   11f84:	af00      	add	r7, sp, #0
   11f86:	6078      	str	r0, [r7, #4]
    mp_obj_range_it_t *o = MP_OBJ_TO_PTR(o_in);
   11f88:	687b      	ldr	r3, [r7, #4]
   11f8a:	60fb      	str	r3, [r7, #12]
    if ((o->step > 0 && o->cur < o->stop) || (o->step < 0 && o->cur > o->stop)) {
   11f8c:	68fb      	ldr	r3, [r7, #12]
   11f8e:	68db      	ldr	r3, [r3, #12]
   11f90:	2b00      	cmp	r3, #0
   11f92:	dd05      	ble.n	11fa0 <range_it_iternext+0x20>
   11f94:	68fb      	ldr	r3, [r7, #12]
   11f96:	685a      	ldr	r2, [r3, #4]
   11f98:	68fb      	ldr	r3, [r7, #12]
   11f9a:	689b      	ldr	r3, [r3, #8]
   11f9c:	429a      	cmp	r2, r3
   11f9e:	db09      	blt.n	11fb4 <range_it_iternext+0x34>
   11fa0:	68fb      	ldr	r3, [r7, #12]
   11fa2:	68db      	ldr	r3, [r3, #12]
   11fa4:	2b00      	cmp	r3, #0
   11fa6:	da14      	bge.n	11fd2 <range_it_iternext+0x52>
   11fa8:	68fb      	ldr	r3, [r7, #12]
   11faa:	685a      	ldr	r2, [r3, #4]
   11fac:	68fb      	ldr	r3, [r7, #12]
   11fae:	689b      	ldr	r3, [r3, #8]
   11fb0:	429a      	cmp	r2, r3
   11fb2:	dd0e      	ble.n	11fd2 <range_it_iternext+0x52>
        mp_obj_t o_out = MP_OBJ_NEW_SMALL_INT(o->cur);
   11fb4:	68fb      	ldr	r3, [r7, #12]
   11fb6:	685b      	ldr	r3, [r3, #4]
   11fb8:	005b      	lsls	r3, r3, #1
   11fba:	f043 0301 	orr.w	r3, r3, #1
   11fbe:	60bb      	str	r3, [r7, #8]
        o->cur += o->step;
   11fc0:	68fb      	ldr	r3, [r7, #12]
   11fc2:	685a      	ldr	r2, [r3, #4]
   11fc4:	68fb      	ldr	r3, [r7, #12]
   11fc6:	68db      	ldr	r3, [r3, #12]
   11fc8:	441a      	add	r2, r3
   11fca:	68fb      	ldr	r3, [r7, #12]
   11fcc:	605a      	str	r2, [r3, #4]
        return o_out;
   11fce:	68bb      	ldr	r3, [r7, #8]
   11fd0:	e000      	b.n	11fd4 <range_it_iternext+0x54>
    } else {
        return MP_OBJ_STOP_ITERATION;
   11fd2:	2304      	movs	r3, #4
    }
}
   11fd4:	4618      	mov	r0, r3
   11fd6:	3714      	adds	r7, #20
   11fd8:	46bd      	mov	sp, r7
   11fda:	f85d 7b04 	ldr.w	r7, [sp], #4
   11fde:	4770      	bx	lr

00011fe0 <mp_obj_new_range_iterator>:
    .name = MP_QSTR_iterator,
    .getiter = mp_identity_getiter,
    .iternext = range_it_iternext,
};

STATIC mp_obj_t mp_obj_new_range_iterator(mp_int_t cur, mp_int_t stop, mp_int_t step, mp_obj_iter_buf_t *iter_buf) {
   11fe0:	b480      	push	{r7}
   11fe2:	b087      	sub	sp, #28
   11fe4:	af00      	add	r7, sp, #0
   11fe6:	60f8      	str	r0, [r7, #12]
   11fe8:	60b9      	str	r1, [r7, #8]
   11fea:	607a      	str	r2, [r7, #4]
   11fec:	603b      	str	r3, [r7, #0]
    assert(sizeof(mp_obj_range_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_range_it_t *o = (mp_obj_range_it_t*)iter_buf;
   11fee:	683b      	ldr	r3, [r7, #0]
   11ff0:	617b      	str	r3, [r7, #20]
    o->base.type = &range_it_type;
   11ff2:	697b      	ldr	r3, [r7, #20]
   11ff4:	4a08      	ldr	r2, [pc, #32]	; (12018 <mp_obj_new_range_iterator+0x38>)
   11ff6:	601a      	str	r2, [r3, #0]
    o->cur = cur;
   11ff8:	697b      	ldr	r3, [r7, #20]
   11ffa:	68fa      	ldr	r2, [r7, #12]
   11ffc:	605a      	str	r2, [r3, #4]
    o->stop = stop;
   11ffe:	697b      	ldr	r3, [r7, #20]
   12000:	68ba      	ldr	r2, [r7, #8]
   12002:	609a      	str	r2, [r3, #8]
    o->step = step;
   12004:	697b      	ldr	r3, [r7, #20]
   12006:	687a      	ldr	r2, [r7, #4]
   12008:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   1200a:	697b      	ldr	r3, [r7, #20]
}
   1200c:	4618      	mov	r0, r3
   1200e:	371c      	adds	r7, #28
   12010:	46bd      	mov	sp, r7
   12012:	f85d 7b04 	ldr.w	r7, [sp], #4
   12016:	4770      	bx	lr
   12018:	000234d8 	.word	0x000234d8

0001201c <range_print>:
    mp_int_t start;
    mp_int_t stop;
    mp_int_t step;
} mp_obj_range_t;

STATIC void range_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   1201c:	b580      	push	{r7, lr}
   1201e:	b086      	sub	sp, #24
   12020:	af00      	add	r7, sp, #0
   12022:	60f8      	str	r0, [r7, #12]
   12024:	60b9      	str	r1, [r7, #8]
   12026:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
   12028:	68bb      	ldr	r3, [r7, #8]
   1202a:	617b      	str	r3, [r7, #20]
    mp_printf(print, "range(" INT_FMT ", " INT_FMT "", self->start, self->stop);
   1202c:	697b      	ldr	r3, [r7, #20]
   1202e:	685a      	ldr	r2, [r3, #4]
   12030:	697b      	ldr	r3, [r7, #20]
   12032:	689b      	ldr	r3, [r3, #8]
   12034:	490b      	ldr	r1, [pc, #44]	; (12064 <range_print+0x48>)
   12036:	68f8      	ldr	r0, [r7, #12]
   12038:	f7ef fffe 	bl	2038 <mp_printf>
    if (self->step == 1) {
   1203c:	697b      	ldr	r3, [r7, #20]
   1203e:	68db      	ldr	r3, [r3, #12]
   12040:	2b01      	cmp	r3, #1
   12042:	d104      	bne.n	1204e <range_print+0x32>
        mp_print_str(print, ")");
   12044:	4908      	ldr	r1, [pc, #32]	; (12068 <range_print+0x4c>)
   12046:	68f8      	ldr	r0, [r7, #12]
   12048:	f7ef fce2 	bl	1a10 <mp_print_str>
    } else {
        mp_printf(print, ", " INT_FMT ")", self->step);
    }
}
   1204c:	e006      	b.n	1205c <range_print+0x40>
        mp_printf(print, ", " INT_FMT ")", self->step);
   1204e:	697b      	ldr	r3, [r7, #20]
   12050:	68db      	ldr	r3, [r3, #12]
   12052:	461a      	mov	r2, r3
   12054:	4905      	ldr	r1, [pc, #20]	; (1206c <range_print+0x50>)
   12056:	68f8      	ldr	r0, [r7, #12]
   12058:	f7ef ffee 	bl	2038 <mp_printf>
}
   1205c:	bf00      	nop
   1205e:	3718      	adds	r7, #24
   12060:	46bd      	mov	sp, r7
   12062:	bd80      	pop	{r7, pc}
   12064:	00023514 	.word	0x00023514
   12068:	00023524 	.word	0x00023524
   1206c:	00023528 	.word	0x00023528

00012070 <range_make_new>:

STATIC mp_obj_t range_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   12070:	b580      	push	{r7, lr}
   12072:	b088      	sub	sp, #32
   12074:	af02      	add	r7, sp, #8
   12076:	60f8      	str	r0, [r7, #12]
   12078:	60b9      	str	r1, [r7, #8]
   1207a:	607a      	str	r2, [r7, #4]
   1207c:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 1, 3, false);
   1207e:	2300      	movs	r3, #0
   12080:	9300      	str	r3, [sp, #0]
   12082:	2303      	movs	r3, #3
   12084:	2201      	movs	r2, #1
   12086:	6879      	ldr	r1, [r7, #4]
   12088:	68b8      	ldr	r0, [r7, #8]
   1208a:	f7ff ff5d 	bl	11f48 <mp_arg_check_num>

    mp_obj_range_t *o = m_new_obj(mp_obj_range_t);
   1208e:	2010      	movs	r0, #16
   12090:	f7ee f944 	bl	31c <m_malloc>
   12094:	6178      	str	r0, [r7, #20]
    o->base.type = type;
   12096:	697b      	ldr	r3, [r7, #20]
   12098:	68fa      	ldr	r2, [r7, #12]
   1209a:	601a      	str	r2, [r3, #0]
    o->start = 0;
   1209c:	697b      	ldr	r3, [r7, #20]
   1209e:	2200      	movs	r2, #0
   120a0:	605a      	str	r2, [r3, #4]
    o->step = 1;
   120a2:	697b      	ldr	r3, [r7, #20]
   120a4:	2201      	movs	r2, #1
   120a6:	60da      	str	r2, [r3, #12]

    if (n_args == 1) {
   120a8:	68bb      	ldr	r3, [r7, #8]
   120aa:	2b01      	cmp	r3, #1
   120ac:	d108      	bne.n	120c0 <range_make_new+0x50>
        o->stop = mp_obj_get_int(args[0]);
   120ae:	683b      	ldr	r3, [r7, #0]
   120b0:	681b      	ldr	r3, [r3, #0]
   120b2:	4618      	mov	r0, r3
   120b4:	f7fb fdcc 	bl	dc50 <mp_obj_get_int>
   120b8:	4602      	mov	r2, r0
   120ba:	697b      	ldr	r3, [r7, #20]
   120bc:	609a      	str	r2, [r3, #8]
   120be:	e023      	b.n	12108 <range_make_new+0x98>
    } else {
        o->start = mp_obj_get_int(args[0]);
   120c0:	683b      	ldr	r3, [r7, #0]
   120c2:	681b      	ldr	r3, [r3, #0]
   120c4:	4618      	mov	r0, r3
   120c6:	f7fb fdc3 	bl	dc50 <mp_obj_get_int>
   120ca:	4602      	mov	r2, r0
   120cc:	697b      	ldr	r3, [r7, #20]
   120ce:	605a      	str	r2, [r3, #4]
        o->stop = mp_obj_get_int(args[1]);
   120d0:	683b      	ldr	r3, [r7, #0]
   120d2:	3304      	adds	r3, #4
   120d4:	681b      	ldr	r3, [r3, #0]
   120d6:	4618      	mov	r0, r3
   120d8:	f7fb fdba 	bl	dc50 <mp_obj_get_int>
   120dc:	4602      	mov	r2, r0
   120de:	697b      	ldr	r3, [r7, #20]
   120e0:	609a      	str	r2, [r3, #8]
        if (n_args == 3) {
   120e2:	68bb      	ldr	r3, [r7, #8]
   120e4:	2b03      	cmp	r3, #3
   120e6:	d10f      	bne.n	12108 <range_make_new+0x98>
            o->step = mp_obj_get_int(args[2]);
   120e8:	683b      	ldr	r3, [r7, #0]
   120ea:	3308      	adds	r3, #8
   120ec:	681b      	ldr	r3, [r3, #0]
   120ee:	4618      	mov	r0, r3
   120f0:	f7fb fdae 	bl	dc50 <mp_obj_get_int>
   120f4:	4602      	mov	r2, r0
   120f6:	697b      	ldr	r3, [r7, #20]
   120f8:	60da      	str	r2, [r3, #12]
            if (o->step == 0) {
   120fa:	697b      	ldr	r3, [r7, #20]
   120fc:	68db      	ldr	r3, [r3, #12]
   120fe:	2b00      	cmp	r3, #0
   12100:	d102      	bne.n	12108 <range_make_new+0x98>
                mp_raise_ValueError("zero step");
   12102:	4804      	ldr	r0, [pc, #16]	; (12114 <range_make_new+0xa4>)
   12104:	f7fa ff4e 	bl	cfa4 <mp_raise_ValueError>
            }
        }
    }

    return MP_OBJ_FROM_PTR(o);
   12108:	697b      	ldr	r3, [r7, #20]
}
   1210a:	4618      	mov	r0, r3
   1210c:	3718      	adds	r7, #24
   1210e:	46bd      	mov	sp, r7
   12110:	bd80      	pop	{r7, pc}
   12112:	bf00      	nop
   12114:	00023530 	.word	0x00023530

00012118 <range_len>:

STATIC mp_int_t range_len(mp_obj_range_t *self) {
   12118:	b480      	push	{r7}
   1211a:	b085      	sub	sp, #20
   1211c:	af00      	add	r7, sp, #0
   1211e:	6078      	str	r0, [r7, #4]
    // When computing length, need to take into account step!=1 and step<0.
    mp_int_t len = self->stop - self->start + self->step;
   12120:	687b      	ldr	r3, [r7, #4]
   12122:	689a      	ldr	r2, [r3, #8]
   12124:	687b      	ldr	r3, [r7, #4]
   12126:	685b      	ldr	r3, [r3, #4]
   12128:	1ad2      	subs	r2, r2, r3
   1212a:	687b      	ldr	r3, [r7, #4]
   1212c:	68db      	ldr	r3, [r3, #12]
   1212e:	4413      	add	r3, r2
   12130:	60fb      	str	r3, [r7, #12]
    if (self->step > 0) {
   12132:	687b      	ldr	r3, [r7, #4]
   12134:	68db      	ldr	r3, [r3, #12]
   12136:	2b00      	cmp	r3, #0
   12138:	dd03      	ble.n	12142 <range_len+0x2a>
        len -= 1;
   1213a:	68fb      	ldr	r3, [r7, #12]
   1213c:	3b01      	subs	r3, #1
   1213e:	60fb      	str	r3, [r7, #12]
   12140:	e002      	b.n	12148 <range_len+0x30>
    } else {
        len += 1;
   12142:	68fb      	ldr	r3, [r7, #12]
   12144:	3301      	adds	r3, #1
   12146:	60fb      	str	r3, [r7, #12]
    }
    len = len / self->step;
   12148:	687b      	ldr	r3, [r7, #4]
   1214a:	68db      	ldr	r3, [r3, #12]
   1214c:	68fa      	ldr	r2, [r7, #12]
   1214e:	fb92 f3f3 	sdiv	r3, r2, r3
   12152:	60fb      	str	r3, [r7, #12]
    if (len < 0) {
   12154:	68fb      	ldr	r3, [r7, #12]
   12156:	2b00      	cmp	r3, #0
   12158:	da01      	bge.n	1215e <range_len+0x46>
        len = 0;
   1215a:	2300      	movs	r3, #0
   1215c:	60fb      	str	r3, [r7, #12]
    }
    return len;
   1215e:	68fb      	ldr	r3, [r7, #12]
}
   12160:	4618      	mov	r0, r3
   12162:	3714      	adds	r7, #20
   12164:	46bd      	mov	sp, r7
   12166:	f85d 7b04 	ldr.w	r7, [sp], #4
   1216a:	4770      	bx	lr

0001216c <range_unary_op>:

STATIC mp_obj_t range_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   1216c:	b580      	push	{r7, lr}
   1216e:	b084      	sub	sp, #16
   12170:	af00      	add	r7, sp, #0
   12172:	6078      	str	r0, [r7, #4]
   12174:	6039      	str	r1, [r7, #0]
    mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
   12176:	683b      	ldr	r3, [r7, #0]
   12178:	60fb      	str	r3, [r7, #12]
    mp_int_t len = range_len(self);
   1217a:	68f8      	ldr	r0, [r7, #12]
   1217c:	f7ff ffcc 	bl	12118 <range_len>
   12180:	60b8      	str	r0, [r7, #8]
    switch (op) {
   12182:	687b      	ldr	r3, [r7, #4]
   12184:	2b04      	cmp	r3, #4
   12186:	d002      	beq.n	1218e <range_unary_op+0x22>
   12188:	2b05      	cmp	r3, #5
   1218a:	d00b      	beq.n	121a4 <range_unary_op+0x38>
   1218c:	e00f      	b.n	121ae <range_unary_op+0x42>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(len > 0);
   1218e:	68bb      	ldr	r3, [r7, #8]
   12190:	2b00      	cmp	r3, #0
   12192:	bfcc      	ite	gt
   12194:	2301      	movgt	r3, #1
   12196:	2300      	movle	r3, #0
   12198:	b2db      	uxtb	r3, r3
   1219a:	4618      	mov	r0, r3
   1219c:	f7ff fec0 	bl	11f20 <mp_obj_new_bool>
   121a0:	4603      	mov	r3, r0
   121a2:	e005      	b.n	121b0 <range_unary_op+0x44>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(len);
   121a4:	68bb      	ldr	r3, [r7, #8]
   121a6:	005b      	lsls	r3, r3, #1
   121a8:	f043 0301 	orr.w	r3, r3, #1
   121ac:	e000      	b.n	121b0 <range_unary_op+0x44>
        default: return MP_OBJ_NULL; // op not supported
   121ae:	2300      	movs	r3, #0
    }
}
   121b0:	4618      	mov	r0, r3
   121b2:	3710      	adds	r7, #16
   121b4:	46bd      	mov	sp, r7
   121b6:	bd80      	pop	{r7, pc}

000121b8 <range_subscr>:
                && (lhs_len == 1 || lhs->step == rhs->step)))
    );
}
#endif

STATIC mp_obj_t range_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   121b8:	b580      	push	{r7, lr}
   121ba:	b088      	sub	sp, #32
   121bc:	af00      	add	r7, sp, #0
   121be:	60f8      	str	r0, [r7, #12]
   121c0:	60b9      	str	r1, [r7, #8]
   121c2:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_SENTINEL) {
   121c4:	687b      	ldr	r3, [r7, #4]
   121c6:	2b08      	cmp	r3, #8
   121c8:	d11b      	bne.n	12202 <range_subscr+0x4a>
        // load
        mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
   121ca:	68fb      	ldr	r3, [r7, #12]
   121cc:	61fb      	str	r3, [r7, #28]
        mp_int_t len = range_len(self);
   121ce:	69f8      	ldr	r0, [r7, #28]
   121d0:	f7ff ffa2 	bl	12118 <range_len>
   121d4:	61b8      	str	r0, [r7, #24]
                o->stop -= self->step;
            }
            return MP_OBJ_FROM_PTR(o);
        }
#endif
        size_t index_val = mp_get_index(self->base.type, len, index, false);
   121d6:	69fb      	ldr	r3, [r7, #28]
   121d8:	6818      	ldr	r0, [r3, #0]
   121da:	69b9      	ldr	r1, [r7, #24]
   121dc:	2300      	movs	r3, #0
   121de:	68ba      	ldr	r2, [r7, #8]
   121e0:	f7fb fe26 	bl	de30 <mp_get_index>
   121e4:	6178      	str	r0, [r7, #20]
        return MP_OBJ_NEW_SMALL_INT(self->start + index_val * self->step);
   121e6:	69fb      	ldr	r3, [r7, #28]
   121e8:	685b      	ldr	r3, [r3, #4]
   121ea:	461a      	mov	r2, r3
   121ec:	69fb      	ldr	r3, [r7, #28]
   121ee:	68db      	ldr	r3, [r3, #12]
   121f0:	4619      	mov	r1, r3
   121f2:	697b      	ldr	r3, [r7, #20]
   121f4:	fb03 f301 	mul.w	r3, r3, r1
   121f8:	4413      	add	r3, r2
   121fa:	005b      	lsls	r3, r3, #1
   121fc:	f043 0301 	orr.w	r3, r3, #1
   12200:	e000      	b.n	12204 <range_subscr+0x4c>
    } else {
        return MP_OBJ_NULL; // op not supported
   12202:	2300      	movs	r3, #0
    }
}
   12204:	4618      	mov	r0, r3
   12206:	3720      	adds	r7, #32
   12208:	46bd      	mov	sp, r7
   1220a:	bd80      	pop	{r7, pc}

0001220c <range_getiter>:

STATIC mp_obj_t range_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
   1220c:	b580      	push	{r7, lr}
   1220e:	b084      	sub	sp, #16
   12210:	af00      	add	r7, sp, #0
   12212:	6078      	str	r0, [r7, #4]
   12214:	6039      	str	r1, [r7, #0]
    mp_obj_range_t *o = MP_OBJ_TO_PTR(o_in);
   12216:	687b      	ldr	r3, [r7, #4]
   12218:	60fb      	str	r3, [r7, #12]
    return mp_obj_new_range_iterator(o->start, o->stop, o->step, iter_buf);
   1221a:	68fb      	ldr	r3, [r7, #12]
   1221c:	6858      	ldr	r0, [r3, #4]
   1221e:	68fb      	ldr	r3, [r7, #12]
   12220:	6899      	ldr	r1, [r3, #8]
   12222:	68fb      	ldr	r3, [r7, #12]
   12224:	68da      	ldr	r2, [r3, #12]
   12226:	683b      	ldr	r3, [r7, #0]
   12228:	f7ff feda 	bl	11fe0 <mp_obj_new_range_iterator>
   1222c:	4603      	mov	r3, r0
}
   1222e:	4618      	mov	r0, r3
   12230:	3710      	adds	r7, #16
   12232:	46bd      	mov	sp, r7
   12234:	bd80      	pop	{r7, pc}
   12236:	bf00      	nop

00012238 <range_attr>:


#if MICROPY_PY_BUILTINS_RANGE_ATTRS
STATIC void range_attr(mp_obj_t o_in, qstr attr, mp_obj_t *dest) {
   12238:	b580      	push	{r7, lr}
   1223a:	b086      	sub	sp, #24
   1223c:	af00      	add	r7, sp, #0
   1223e:	60f8      	str	r0, [r7, #12]
   12240:	60b9      	str	r1, [r7, #8]
   12242:	607a      	str	r2, [r7, #4]
    if (dest[0] != MP_OBJ_NULL) {
   12244:	687b      	ldr	r3, [r7, #4]
   12246:	681b      	ldr	r3, [r3, #0]
   12248:	2b00      	cmp	r3, #0
   1224a:	d129      	bne.n	122a0 <range_attr+0x68>
        // not load attribute
        return;
    }
    mp_obj_range_t *o = MP_OBJ_TO_PTR(o_in);
   1224c:	68fb      	ldr	r3, [r7, #12]
   1224e:	617b      	str	r3, [r7, #20]
    if (attr == MP_QSTR_start) {
   12250:	68bb      	ldr	r3, [r7, #8]
   12252:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
   12256:	d108      	bne.n	1226a <range_attr+0x32>
        dest[0] = mp_obj_new_int(o->start);
   12258:	697b      	ldr	r3, [r7, #20]
   1225a:	685b      	ldr	r3, [r3, #4]
   1225c:	4618      	mov	r0, r3
   1225e:	f7fe fbbf 	bl	109e0 <mp_obj_new_int>
   12262:	4602      	mov	r2, r0
   12264:	687b      	ldr	r3, [r7, #4]
   12266:	601a      	str	r2, [r3, #0]
   12268:	e01b      	b.n	122a2 <range_attr+0x6a>
    } else if (attr == MP_QSTR_stop) {
   1226a:	68bb      	ldr	r3, [r7, #8]
   1226c:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
   12270:	d108      	bne.n	12284 <range_attr+0x4c>
        dest[0] = mp_obj_new_int(o->stop);
   12272:	697b      	ldr	r3, [r7, #20]
   12274:	689b      	ldr	r3, [r3, #8]
   12276:	4618      	mov	r0, r3
   12278:	f7fe fbb2 	bl	109e0 <mp_obj_new_int>
   1227c:	4602      	mov	r2, r0
   1227e:	687b      	ldr	r3, [r7, #4]
   12280:	601a      	str	r2, [r3, #0]
   12282:	e00e      	b.n	122a2 <range_attr+0x6a>
    } else if (attr == MP_QSTR_step) {
   12284:	68bb      	ldr	r3, [r7, #8]
   12286:	f240 126b 	movw	r2, #363	; 0x16b
   1228a:	4293      	cmp	r3, r2
   1228c:	d109      	bne.n	122a2 <range_attr+0x6a>
        dest[0] = mp_obj_new_int(o->step);
   1228e:	697b      	ldr	r3, [r7, #20]
   12290:	68db      	ldr	r3, [r3, #12]
   12292:	4618      	mov	r0, r3
   12294:	f7fe fba4 	bl	109e0 <mp_obj_new_int>
   12298:	4602      	mov	r2, r0
   1229a:	687b      	ldr	r3, [r7, #4]
   1229c:	601a      	str	r2, [r3, #0]
   1229e:	e000      	b.n	122a2 <range_attr+0x6a>
        return;
   122a0:	bf00      	nop
    }
}
   122a2:	3718      	adds	r7, #24
   122a4:	46bd      	mov	sp, r7
   122a6:	bd80      	pop	{r7, pc}

000122a8 <singleton_print>:
typedef struct _mp_obj_singleton_t {
    mp_obj_base_t base;
    qstr name;
} mp_obj_singleton_t;

STATIC void singleton_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   122a8:	b580      	push	{r7, lr}
   122aa:	b086      	sub	sp, #24
   122ac:	af00      	add	r7, sp, #0
   122ae:	60f8      	str	r0, [r7, #12]
   122b0:	60b9      	str	r1, [r7, #8]
   122b2:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_singleton_t *self = MP_OBJ_TO_PTR(self_in);
   122b4:	68bb      	ldr	r3, [r7, #8]
   122b6:	617b      	str	r3, [r7, #20]
    mp_printf(print, "%q", self->name);
   122b8:	697b      	ldr	r3, [r7, #20]
   122ba:	685b      	ldr	r3, [r3, #4]
   122bc:	461a      	mov	r2, r3
   122be:	4904      	ldr	r1, [pc, #16]	; (122d0 <singleton_print+0x28>)
   122c0:	68f8      	ldr	r0, [r7, #12]
   122c2:	f7ef feb9 	bl	2038 <mp_printf>
}
   122c6:	bf00      	nop
   122c8:	3718      	adds	r7, #24
   122ca:	46bd      	mov	sp, r7
   122cc:	bd80      	pop	{r7, pc}
   122ce:	bf00      	nop
   122d0:	00023578 	.word	0x00023578

000122d4 <utf8_next_char>:
static inline const byte *utf8_next_char(const byte *s) { return s + 1; }
   122d4:	b480      	push	{r7}
   122d6:	b083      	sub	sp, #12
   122d8:	af00      	add	r7, sp, #0
   122da:	6078      	str	r0, [r7, #4]
   122dc:	687b      	ldr	r3, [r7, #4]
   122de:	3301      	adds	r3, #1
   122e0:	4618      	mov	r0, r3
   122e2:	370c      	adds	r7, #12
   122e4:	46bd      	mov	sp, r7
   122e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   122ea:	4770      	bx	lr

000122ec <utf8_charlen>:
static inline size_t utf8_charlen(const byte *str, size_t len) { (void)str; return len; }
   122ec:	b480      	push	{r7}
   122ee:	b083      	sub	sp, #12
   122f0:	af00      	add	r7, sp, #0
   122f2:	6078      	str	r0, [r7, #4]
   122f4:	6039      	str	r1, [r7, #0]
   122f6:	683b      	ldr	r3, [r7, #0]
   122f8:	4618      	mov	r0, r3
   122fa:	370c      	adds	r7, #12
   122fc:	46bd      	mov	sp, r7
   122fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   12302:	4770      	bx	lr

00012304 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   12304:	b480      	push	{r7}
   12306:	b083      	sub	sp, #12
   12308:	af00      	add	r7, sp, #0
   1230a:	6078      	str	r0, [r7, #4]
   1230c:	687b      	ldr	r3, [r7, #4]
   1230e:	f003 0301 	and.w	r3, r3, #1
   12312:	2b00      	cmp	r3, #0
   12314:	bf14      	ite	ne
   12316:	2301      	movne	r3, #1
   12318:	2300      	moveq	r3, #0
   1231a:	b2db      	uxtb	r3, r3
   1231c:	4618      	mov	r0, r3
   1231e:	370c      	adds	r7, #12
   12320:	46bd      	mov	sp, r7
   12322:	f85d 7b04 	ldr.w	r7, [sp], #4
   12326:	4770      	bx	lr

00012328 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
   12328:	b480      	push	{r7}
   1232a:	b083      	sub	sp, #12
   1232c:	af00      	add	r7, sp, #0
   1232e:	6078      	str	r0, [r7, #4]
   12330:	687b      	ldr	r3, [r7, #4]
   12332:	f003 0303 	and.w	r3, r3, #3
   12336:	2b02      	cmp	r3, #2
   12338:	bf0c      	ite	eq
   1233a:	2301      	moveq	r3, #1
   1233c:	2300      	movne	r3, #0
   1233e:	b2db      	uxtb	r3, r3
   12340:	4618      	mov	r0, r3
   12342:	370c      	adds	r7, #12
   12344:	46bd      	mov	sp, r7
   12346:	f85d 7b04 	ldr.w	r7, [sp], #4
   1234a:	4770      	bx	lr

0001234c <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   1234c:	b480      	push	{r7}
   1234e:	b083      	sub	sp, #12
   12350:	af00      	add	r7, sp, #0
   12352:	6078      	str	r0, [r7, #4]
   12354:	687b      	ldr	r3, [r7, #4]
   12356:	f003 0303 	and.w	r3, r3, #3
   1235a:	2b00      	cmp	r3, #0
   1235c:	bf0c      	ite	eq
   1235e:	2301      	moveq	r3, #1
   12360:	2300      	movne	r3, #0
   12362:	b2db      	uxtb	r3, r3
   12364:	4618      	mov	r0, r3
   12366:	370c      	adds	r7, #12
   12368:	46bd      	mov	sp, r7
   1236a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1236e:	4770      	bx	lr

00012370 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   12370:	b480      	push	{r7}
   12372:	b083      	sub	sp, #12
   12374:	af00      	add	r7, sp, #0
   12376:	6078      	str	r0, [r7, #4]
   12378:	687b      	ldr	r3, [r7, #4]
   1237a:	2b00      	cmp	r3, #0
   1237c:	d001      	beq.n	12382 <mp_obj_new_bool+0x12>
   1237e:	4b04      	ldr	r3, [pc, #16]	; (12390 <mp_obj_new_bool+0x20>)
   12380:	e000      	b.n	12384 <mp_obj_new_bool+0x14>
   12382:	4b04      	ldr	r3, [pc, #16]	; (12394 <mp_obj_new_bool+0x24>)
   12384:	4618      	mov	r0, r3
   12386:	370c      	adds	r7, #12
   12388:	46bd      	mov	sp, r7
   1238a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1238e:	4770      	bx	lr
   12390:	00021c60 	.word	0x00021c60
   12394:	00021c58 	.word	0x00021c58

00012398 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   12398:	b580      	push	{r7, lr}
   1239a:	b084      	sub	sp, #16
   1239c:	af00      	add	r7, sp, #0
   1239e:	60f8      	str	r0, [r7, #12]
   123a0:	60b9      	str	r1, [r7, #8]
   123a2:	607a      	str	r2, [r7, #4]
   123a4:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   123a6:	687b      	ldr	r3, [r7, #4]
   123a8:	045a      	lsls	r2, r3, #17
   123aa:	683b      	ldr	r3, [r7, #0]
   123ac:	005b      	lsls	r3, r3, #1
   123ae:	431a      	orrs	r2, r3
   123b0:	7e3b      	ldrb	r3, [r7, #24]
   123b2:	2b00      	cmp	r3, #0
   123b4:	d001      	beq.n	123ba <mp_arg_check_num+0x22>
   123b6:	2301      	movs	r3, #1
   123b8:	e000      	b.n	123bc <mp_arg_check_num+0x24>
   123ba:	2300      	movs	r3, #0
   123bc:	4313      	orrs	r3, r2
   123be:	461a      	mov	r2, r3
   123c0:	68b9      	ldr	r1, [r7, #8]
   123c2:	68f8      	ldr	r0, [r7, #12]
   123c4:	f7fa fe64 	bl	d090 <mp_arg_check_num_sig>
}
   123c8:	bf00      	nop
   123ca:	3710      	adds	r7, #16
   123cc:	46bd      	mov	sp, r7
   123ce:	bd80      	pop	{r7, pc}

000123d0 <mp_str_print_quoted>:
STATIC NORETURN void bad_implicit_conversion(mp_obj_t self_in);

/******************************************************************************/
/* str                                                                        */

void mp_str_print_quoted(const mp_print_t *print, const byte *str_data, size_t str_len, bool is_bytes) {
   123d0:	b580      	push	{r7, lr}
   123d2:	b08a      	sub	sp, #40	; 0x28
   123d4:	af00      	add	r7, sp, #0
   123d6:	60f8      	str	r0, [r7, #12]
   123d8:	60b9      	str	r1, [r7, #8]
   123da:	607a      	str	r2, [r7, #4]
   123dc:	70fb      	strb	r3, [r7, #3]
    // this escapes characters, but it will be very slow to print (calling print many times)
    bool has_single_quote = false;
   123de:	2300      	movs	r3, #0
   123e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool has_double_quote = false;
   123e4:	2300      	movs	r3, #0
   123e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (const byte *s = str_data, *top = str_data + str_len; !has_double_quote && s < top; s++) {
   123ea:	68bb      	ldr	r3, [r7, #8]
   123ec:	623b      	str	r3, [r7, #32]
   123ee:	68ba      	ldr	r2, [r7, #8]
   123f0:	687b      	ldr	r3, [r7, #4]
   123f2:	4413      	add	r3, r2
   123f4:	617b      	str	r3, [r7, #20]
   123f6:	e011      	b.n	1241c <mp_str_print_quoted+0x4c>
        if (*s == '\'') {
   123f8:	6a3b      	ldr	r3, [r7, #32]
   123fa:	781b      	ldrb	r3, [r3, #0]
   123fc:	2b27      	cmp	r3, #39	; 0x27
   123fe:	d103      	bne.n	12408 <mp_str_print_quoted+0x38>
            has_single_quote = true;
   12400:	2301      	movs	r3, #1
   12402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   12406:	e006      	b.n	12416 <mp_str_print_quoted+0x46>
        } else if (*s == '"') {
   12408:	6a3b      	ldr	r3, [r7, #32]
   1240a:	781b      	ldrb	r3, [r3, #0]
   1240c:	2b22      	cmp	r3, #34	; 0x22
   1240e:	d102      	bne.n	12416 <mp_str_print_quoted+0x46>
            has_double_quote = true;
   12410:	2301      	movs	r3, #1
   12412:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (const byte *s = str_data, *top = str_data + str_len; !has_double_quote && s < top; s++) {
   12416:	6a3b      	ldr	r3, [r7, #32]
   12418:	3301      	adds	r3, #1
   1241a:	623b      	str	r3, [r7, #32]
   1241c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   12420:	f083 0301 	eor.w	r3, r3, #1
   12424:	b2db      	uxtb	r3, r3
   12426:	2b00      	cmp	r3, #0
   12428:	d003      	beq.n	12432 <mp_str_print_quoted+0x62>
   1242a:	6a3a      	ldr	r2, [r7, #32]
   1242c:	697b      	ldr	r3, [r7, #20]
   1242e:	429a      	cmp	r2, r3
   12430:	d3e2      	bcc.n	123f8 <mp_str_print_quoted+0x28>
        }
    }
    int quote_char = '\'';
   12432:	2327      	movs	r3, #39	; 0x27
   12434:	61fb      	str	r3, [r7, #28]
    if (has_single_quote && !has_double_quote) {
   12436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1243a:	2b00      	cmp	r3, #0
   1243c:	d008      	beq.n	12450 <mp_str_print_quoted+0x80>
   1243e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   12442:	f083 0301 	eor.w	r3, r3, #1
   12446:	b2db      	uxtb	r3, r3
   12448:	2b00      	cmp	r3, #0
   1244a:	d001      	beq.n	12450 <mp_str_print_quoted+0x80>
        quote_char = '"';
   1244c:	2322      	movs	r3, #34	; 0x22
   1244e:	61fb      	str	r3, [r7, #28]
    }
    mp_printf(print, "%c", quote_char);
   12450:	69fa      	ldr	r2, [r7, #28]
   12452:	4936      	ldr	r1, [pc, #216]	; (1252c <mp_str_print_quoted+0x15c>)
   12454:	68f8      	ldr	r0, [r7, #12]
   12456:	f7ef fdef 	bl	2038 <mp_printf>
    for (const byte *s = str_data, *top = str_data + str_len; s < top; s++) {
   1245a:	68bb      	ldr	r3, [r7, #8]
   1245c:	61bb      	str	r3, [r7, #24]
   1245e:	68ba      	ldr	r2, [r7, #8]
   12460:	687b      	ldr	r3, [r7, #4]
   12462:	4413      	add	r3, r2
   12464:	613b      	str	r3, [r7, #16]
   12466:	e054      	b.n	12512 <mp_str_print_quoted+0x142>
        if (*s == quote_char) {
   12468:	69bb      	ldr	r3, [r7, #24]
   1246a:	781b      	ldrb	r3, [r3, #0]
   1246c:	461a      	mov	r2, r3
   1246e:	69fb      	ldr	r3, [r7, #28]
   12470:	429a      	cmp	r2, r3
   12472:	d105      	bne.n	12480 <mp_str_print_quoted+0xb0>
            mp_printf(print, "\\%c", quote_char);
   12474:	69fa      	ldr	r2, [r7, #28]
   12476:	492e      	ldr	r1, [pc, #184]	; (12530 <mp_str_print_quoted+0x160>)
   12478:	68f8      	ldr	r0, [r7, #12]
   1247a:	f7ef fddd 	bl	2038 <mp_printf>
   1247e:	e045      	b.n	1250c <mp_str_print_quoted+0x13c>
        } else if (*s == '\\') {
   12480:	69bb      	ldr	r3, [r7, #24]
   12482:	781b      	ldrb	r3, [r3, #0]
   12484:	2b5c      	cmp	r3, #92	; 0x5c
   12486:	d104      	bne.n	12492 <mp_str_print_quoted+0xc2>
            mp_print_str(print, "\\\\");
   12488:	492a      	ldr	r1, [pc, #168]	; (12534 <mp_str_print_quoted+0x164>)
   1248a:	68f8      	ldr	r0, [r7, #12]
   1248c:	f7ef fac0 	bl	1a10 <mp_print_str>
   12490:	e03c      	b.n	1250c <mp_str_print_quoted+0x13c>
        } else if (*s >= 0x20 && *s != 0x7f && (!is_bytes || *s < 0x80)) {
   12492:	69bb      	ldr	r3, [r7, #24]
   12494:	781b      	ldrb	r3, [r3, #0]
   12496:	2b1f      	cmp	r3, #31
   12498:	d916      	bls.n	124c8 <mp_str_print_quoted+0xf8>
   1249a:	69bb      	ldr	r3, [r7, #24]
   1249c:	781b      	ldrb	r3, [r3, #0]
   1249e:	2b7f      	cmp	r3, #127	; 0x7f
   124a0:	d012      	beq.n	124c8 <mp_str_print_quoted+0xf8>
   124a2:	78fb      	ldrb	r3, [r7, #3]
   124a4:	f083 0301 	eor.w	r3, r3, #1
   124a8:	b2db      	uxtb	r3, r3
   124aa:	2b00      	cmp	r3, #0
   124ac:	d104      	bne.n	124b8 <mp_str_print_quoted+0xe8>
   124ae:	69bb      	ldr	r3, [r7, #24]
   124b0:	781b      	ldrb	r3, [r3, #0]
   124b2:	b25b      	sxtb	r3, r3
   124b4:	2b00      	cmp	r3, #0
   124b6:	db07      	blt.n	124c8 <mp_str_print_quoted+0xf8>
            // In strings, anything which is not ascii control character
            // is printed as is, this includes characters in range 0x80-0xff
            // (which can be non-Latin letters, etc.)
            mp_printf(print, "%c", *s);
   124b8:	69bb      	ldr	r3, [r7, #24]
   124ba:	781b      	ldrb	r3, [r3, #0]
   124bc:	461a      	mov	r2, r3
   124be:	491b      	ldr	r1, [pc, #108]	; (1252c <mp_str_print_quoted+0x15c>)
   124c0:	68f8      	ldr	r0, [r7, #12]
   124c2:	f7ef fdb9 	bl	2038 <mp_printf>
   124c6:	e021      	b.n	1250c <mp_str_print_quoted+0x13c>
        } else if (*s == '\n') {
   124c8:	69bb      	ldr	r3, [r7, #24]
   124ca:	781b      	ldrb	r3, [r3, #0]
   124cc:	2b0a      	cmp	r3, #10
   124ce:	d104      	bne.n	124da <mp_str_print_quoted+0x10a>
            mp_print_str(print, "\\n");
   124d0:	4919      	ldr	r1, [pc, #100]	; (12538 <mp_str_print_quoted+0x168>)
   124d2:	68f8      	ldr	r0, [r7, #12]
   124d4:	f7ef fa9c 	bl	1a10 <mp_print_str>
   124d8:	e018      	b.n	1250c <mp_str_print_quoted+0x13c>
        } else if (*s == '\r') {
   124da:	69bb      	ldr	r3, [r7, #24]
   124dc:	781b      	ldrb	r3, [r3, #0]
   124de:	2b0d      	cmp	r3, #13
   124e0:	d104      	bne.n	124ec <mp_str_print_quoted+0x11c>
            mp_print_str(print, "\\r");
   124e2:	4916      	ldr	r1, [pc, #88]	; (1253c <mp_str_print_quoted+0x16c>)
   124e4:	68f8      	ldr	r0, [r7, #12]
   124e6:	f7ef fa93 	bl	1a10 <mp_print_str>
   124ea:	e00f      	b.n	1250c <mp_str_print_quoted+0x13c>
        } else if (*s == '\t') {
   124ec:	69bb      	ldr	r3, [r7, #24]
   124ee:	781b      	ldrb	r3, [r3, #0]
   124f0:	2b09      	cmp	r3, #9
   124f2:	d104      	bne.n	124fe <mp_str_print_quoted+0x12e>
            mp_print_str(print, "\\t");
   124f4:	4912      	ldr	r1, [pc, #72]	; (12540 <mp_str_print_quoted+0x170>)
   124f6:	68f8      	ldr	r0, [r7, #12]
   124f8:	f7ef fa8a 	bl	1a10 <mp_print_str>
   124fc:	e006      	b.n	1250c <mp_str_print_quoted+0x13c>
        } else {
            mp_printf(print, "\\x%02x", *s);
   124fe:	69bb      	ldr	r3, [r7, #24]
   12500:	781b      	ldrb	r3, [r3, #0]
   12502:	461a      	mov	r2, r3
   12504:	490f      	ldr	r1, [pc, #60]	; (12544 <mp_str_print_quoted+0x174>)
   12506:	68f8      	ldr	r0, [r7, #12]
   12508:	f7ef fd96 	bl	2038 <mp_printf>
    for (const byte *s = str_data, *top = str_data + str_len; s < top; s++) {
   1250c:	69bb      	ldr	r3, [r7, #24]
   1250e:	3301      	adds	r3, #1
   12510:	61bb      	str	r3, [r7, #24]
   12512:	69ba      	ldr	r2, [r7, #24]
   12514:	693b      	ldr	r3, [r7, #16]
   12516:	429a      	cmp	r2, r3
   12518:	d3a6      	bcc.n	12468 <mp_str_print_quoted+0x98>
        }
    }
    mp_printf(print, "%c", quote_char);
   1251a:	69fa      	ldr	r2, [r7, #28]
   1251c:	4903      	ldr	r1, [pc, #12]	; (1252c <mp_str_print_quoted+0x15c>)
   1251e:	68f8      	ldr	r0, [r7, #12]
   12520:	f7ef fd8a 	bl	2038 <mp_printf>
}
   12524:	bf00      	nop
   12526:	3728      	adds	r7, #40	; 0x28
   12528:	46bd      	mov	sp, r7
   1252a:	bd80      	pop	{r7, pc}
   1252c:	000235c0 	.word	0x000235c0
   12530:	000235c4 	.word	0x000235c4
   12534:	000235c8 	.word	0x000235c8
   12538:	000235cc 	.word	0x000235cc
   1253c:	000235d0 	.word	0x000235d0
   12540:	000235d4 	.word	0x000235d4
   12544:	000235d8 	.word	0x000235d8

00012548 <str_print>:
    }
    mp_print_str(print, "\"");
}
#endif

STATIC void str_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   12548:	b580      	push	{r7, lr}
   1254a:	b088      	sub	sp, #32
   1254c:	af00      	add	r7, sp, #0
   1254e:	60f8      	str	r0, [r7, #12]
   12550:	60b9      	str	r1, [r7, #8]
   12552:	607a      	str	r2, [r7, #4]
    GET_STR_DATA_LEN(self_in, str_data, str_len);
   12554:	68b8      	ldr	r0, [r7, #8]
   12556:	f7ff fee7 	bl	12328 <MP_OBJ_IS_QSTR>
   1255a:	4603      	mov	r3, r0
   1255c:	2b00      	cmp	r3, #0
   1255e:	d009      	beq.n	12574 <str_print+0x2c>
   12560:	68bb      	ldr	r3, [r7, #8]
   12562:	089b      	lsrs	r3, r3, #2
   12564:	f107 0214 	add.w	r2, r7, #20
   12568:	4611      	mov	r1, r2
   1256a:	4618      	mov	r0, r3
   1256c:	f7ee ff1a 	bl	13a4 <qstr_data>
   12570:	61f8      	str	r0, [r7, #28]
   12572:	e005      	b.n	12580 <str_print+0x38>
   12574:	68bb      	ldr	r3, [r7, #8]
   12576:	689b      	ldr	r3, [r3, #8]
   12578:	617b      	str	r3, [r7, #20]
   1257a:	68bb      	ldr	r3, [r7, #8]
   1257c:	68db      	ldr	r3, [r3, #12]
   1257e:	61fb      	str	r3, [r7, #28]
        mp_str_print_json(print, str_data, str_len);
        return;
    }
    #endif
    #if !MICROPY_PY_BUILTINS_STR_UNICODE
    bool is_bytes = MP_OBJ_IS_TYPE(self_in, &mp_type_bytes);
   12580:	68b8      	ldr	r0, [r7, #8]
   12582:	f7ff fee3 	bl	1234c <MP_OBJ_IS_OBJ>
   12586:	4603      	mov	r3, r0
   12588:	2b00      	cmp	r3, #0
   1258a:	d006      	beq.n	1259a <str_print+0x52>
   1258c:	68bb      	ldr	r3, [r7, #8]
   1258e:	681b      	ldr	r3, [r3, #0]
   12590:	4a17      	ldr	r2, [pc, #92]	; (125f0 <str_print+0xa8>)
   12592:	4293      	cmp	r3, r2
   12594:	d101      	bne.n	1259a <str_print+0x52>
   12596:	2301      	movs	r3, #1
   12598:	e000      	b.n	1259c <str_print+0x54>
   1259a:	2300      	movs	r3, #0
   1259c:	76fb      	strb	r3, [r7, #27]
   1259e:	7efb      	ldrb	r3, [r7, #27]
   125a0:	f003 0301 	and.w	r3, r3, #1
   125a4:	76fb      	strb	r3, [r7, #27]
    #else
    bool is_bytes = true;
    #endif
    if (kind == PRINT_RAW || (!MICROPY_PY_BUILTINS_STR_UNICODE && kind == PRINT_STR && !is_bytes)) {
   125a6:	687b      	ldr	r3, [r7, #4]
   125a8:	2b04      	cmp	r3, #4
   125aa:	d008      	beq.n	125be <str_print+0x76>
   125ac:	687b      	ldr	r3, [r7, #4]
   125ae:	2b00      	cmp	r3, #0
   125b0:	d10c      	bne.n	125cc <str_print+0x84>
   125b2:	7efb      	ldrb	r3, [r7, #27]
   125b4:	f083 0301 	eor.w	r3, r3, #1
   125b8:	b2db      	uxtb	r3, r3
   125ba:	2b00      	cmp	r3, #0
   125bc:	d006      	beq.n	125cc <str_print+0x84>
        mp_printf(print, "%.*s", str_len, str_data);
   125be:	697a      	ldr	r2, [r7, #20]
   125c0:	69fb      	ldr	r3, [r7, #28]
   125c2:	490c      	ldr	r1, [pc, #48]	; (125f4 <str_print+0xac>)
   125c4:	68f8      	ldr	r0, [r7, #12]
   125c6:	f7ef fd37 	bl	2038 <mp_printf>
   125ca:	e00c      	b.n	125e6 <str_print+0x9e>
    } else {
        if (is_bytes) {
   125cc:	7efb      	ldrb	r3, [r7, #27]
   125ce:	2b00      	cmp	r3, #0
   125d0:	d003      	beq.n	125da <str_print+0x92>
            mp_print_str(print, "b");
   125d2:	4909      	ldr	r1, [pc, #36]	; (125f8 <str_print+0xb0>)
   125d4:	68f8      	ldr	r0, [r7, #12]
   125d6:	f7ef fa1b 	bl	1a10 <mp_print_str>
        }
        mp_str_print_quoted(print, str_data, str_len, is_bytes);
   125da:	697a      	ldr	r2, [r7, #20]
   125dc:	7efb      	ldrb	r3, [r7, #27]
   125de:	69f9      	ldr	r1, [r7, #28]
   125e0:	68f8      	ldr	r0, [r7, #12]
   125e2:	f7ff fef5 	bl	123d0 <mp_str_print_quoted>
    }
}
   125e6:	bf00      	nop
   125e8:	3720      	adds	r7, #32
   125ea:	46bd      	mov	sp, r7
   125ec:	bd80      	pop	{r7, pc}
   125ee:	bf00      	nop
   125f0:	00023ba4 	.word	0x00023ba4
   125f4:	000235e0 	.word	0x000235e0
   125f8:	000235e8 	.word	0x000235e8

000125fc <mp_obj_str_make_new>:

mp_obj_t mp_obj_str_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   125fc:	b580      	push	{r7, lr}
   125fe:	b094      	sub	sp, #80	; 0x50
   12600:	af02      	add	r7, sp, #8
   12602:	60f8      	str	r0, [r7, #12]
   12604:	60b9      	str	r1, [r7, #8]
   12606:	607a      	str	r2, [r7, #4]
   12608:	603b      	str	r3, [r7, #0]
    if (n_kw != 0) {
        mp_arg_error_unimpl_kw();
    }
#endif

    mp_arg_check_num(n_args, n_kw, 0, 3, false);
   1260a:	2300      	movs	r3, #0
   1260c:	9300      	str	r3, [sp, #0]
   1260e:	2303      	movs	r3, #3
   12610:	2200      	movs	r2, #0
   12612:	6879      	ldr	r1, [r7, #4]
   12614:	68b8      	ldr	r0, [r7, #8]
   12616:	f7ff febf 	bl	12398 <mp_arg_check_num>

    switch (n_args) {
   1261a:	68bb      	ldr	r3, [r7, #8]
   1261c:	2b00      	cmp	r3, #0
   1261e:	d002      	beq.n	12626 <mp_obj_str_make_new+0x2a>
   12620:	2b01      	cmp	r3, #1
   12622:	d002      	beq.n	1262a <mp_obj_str_make_new+0x2e>
   12624:	e019      	b.n	1265a <mp_obj_str_make_new+0x5e>
        case 0:
            return MP_OBJ_NEW_QSTR(MP_QSTR_);
   12626:	2306      	movs	r3, #6
   12628:	e089      	b.n	1273e <mp_obj_str_make_new+0x142>

        case 1: {
            vstr_t vstr;
            mp_print_t print;
            vstr_init_print(&vstr, 16, &print);
   1262a:	f107 0220 	add.w	r2, r7, #32
   1262e:	f107 0328 	add.w	r3, r7, #40	; 0x28
   12632:	2110      	movs	r1, #16
   12634:	4618      	mov	r0, r3
   12636:	f7ee ff7b 	bl	1530 <vstr_init_print>
            mp_obj_print_helper(&print, args[0], PRINT_STR);
   1263a:	683b      	ldr	r3, [r7, #0]
   1263c:	6819      	ldr	r1, [r3, #0]
   1263e:	f107 0320 	add.w	r3, r7, #32
   12642:	2200      	movs	r2, #0
   12644:	4618      	mov	r0, r3
   12646:	f7fb f957 	bl	d8f8 <mp_obj_print_helper>
            return mp_obj_new_str_from_vstr(type, &vstr);
   1264a:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1264e:	4619      	mov	r1, r3
   12650:	68f8      	ldr	r0, [r7, #12]
   12652:	f002 ff09 	bl	15468 <mp_obj_new_str_from_vstr>
   12656:	4603      	mov	r3, r0
   12658:	e071      	b.n	1273e <mp_obj_str_make_new+0x142>
        }

        default: // 2 or 3 args
            // TODO: validate 2nd/3rd args
            if (MP_OBJ_IS_TYPE(args[0], &mp_type_bytes)) {
   1265a:	683b      	ldr	r3, [r7, #0]
   1265c:	681b      	ldr	r3, [r3, #0]
   1265e:	4618      	mov	r0, r3
   12660:	f7ff fe74 	bl	1234c <MP_OBJ_IS_OBJ>
   12664:	4603      	mov	r3, r0
   12666:	2b00      	cmp	r3, #0
   12668:	d05a      	beq.n	12720 <mp_obj_str_make_new+0x124>
   1266a:	683b      	ldr	r3, [r7, #0]
   1266c:	681b      	ldr	r3, [r3, #0]
   1266e:	681b      	ldr	r3, [r3, #0]
   12670:	4a35      	ldr	r2, [pc, #212]	; (12748 <mp_obj_str_make_new+0x14c>)
   12672:	4293      	cmp	r3, r2
   12674:	d154      	bne.n	12720 <mp_obj_str_make_new+0x124>
                GET_STR_DATA_LEN(args[0], str_data, str_len);
   12676:	683b      	ldr	r3, [r7, #0]
   12678:	681b      	ldr	r3, [r3, #0]
   1267a:	4618      	mov	r0, r3
   1267c:	f7ff fe54 	bl	12328 <MP_OBJ_IS_QSTR>
   12680:	4603      	mov	r3, r0
   12682:	2b00      	cmp	r3, #0
   12684:	d00a      	beq.n	1269c <mp_obj_str_make_new+0xa0>
   12686:	683b      	ldr	r3, [r7, #0]
   12688:	681b      	ldr	r3, [r3, #0]
   1268a:	089b      	lsrs	r3, r3, #2
   1268c:	f107 021c 	add.w	r2, r7, #28
   12690:	4611      	mov	r1, r2
   12692:	4618      	mov	r0, r3
   12694:	f7ee fe86 	bl	13a4 <qstr_data>
   12698:	6478      	str	r0, [r7, #68]	; 0x44
   1269a:	e007      	b.n	126ac <mp_obj_str_make_new+0xb0>
   1269c:	683b      	ldr	r3, [r7, #0]
   1269e:	681b      	ldr	r3, [r3, #0]
   126a0:	689b      	ldr	r3, [r3, #8]
   126a2:	61fb      	str	r3, [r7, #28]
   126a4:	683b      	ldr	r3, [r7, #0]
   126a6:	681b      	ldr	r3, [r3, #0]
   126a8:	68db      	ldr	r3, [r3, #12]
   126aa:	647b      	str	r3, [r7, #68]	; 0x44
                GET_STR_HASH(args[0], str_hash);
   126ac:	683b      	ldr	r3, [r7, #0]
   126ae:	681b      	ldr	r3, [r3, #0]
   126b0:	4618      	mov	r0, r3
   126b2:	f7ff fe39 	bl	12328 <MP_OBJ_IS_QSTR>
   126b6:	4603      	mov	r3, r0
   126b8:	2b00      	cmp	r3, #0
   126ba:	d007      	beq.n	126cc <mp_obj_str_make_new+0xd0>
   126bc:	683b      	ldr	r3, [r7, #0]
   126be:	681b      	ldr	r3, [r3, #0]
   126c0:	089b      	lsrs	r3, r3, #2
   126c2:	4618      	mov	r0, r3
   126c4:	f7ee fe42 	bl	134c <qstr_hash>
   126c8:	6438      	str	r0, [r7, #64]	; 0x40
   126ca:	e003      	b.n	126d4 <mp_obj_str_make_new+0xd8>
   126cc:	683b      	ldr	r3, [r7, #0]
   126ce:	681b      	ldr	r3, [r3, #0]
   126d0:	685b      	ldr	r3, [r3, #4]
   126d2:	643b      	str	r3, [r7, #64]	; 0x40
                if (str_hash == 0) {
   126d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   126d6:	2b00      	cmp	r3, #0
   126d8:	d105      	bne.n	126e6 <mp_obj_str_make_new+0xea>
                    str_hash = qstr_compute_hash(str_data, str_len);
   126da:	69fb      	ldr	r3, [r7, #28]
   126dc:	4619      	mov	r1, r3
   126de:	6c78      	ldr	r0, [r7, #68]	; 0x44
   126e0:	f7ee fc62 	bl	fa8 <qstr_compute_hash>
   126e4:	6438      	str	r0, [r7, #64]	; 0x40
                    mp_raise_msg(&mp_type_UnicodeError, NULL);
                }
                #endif

                // Check if a qstr with this data already exists
                qstr q = qstr_find_strn((const char*)str_data, str_len);
   126e6:	69fb      	ldr	r3, [r7, #28]
   126e8:	4619      	mov	r1, r3
   126ea:	6c78      	ldr	r0, [r7, #68]	; 0x44
   126ec:	f7ee fd0c 	bl	1108 <qstr_find_strn>
   126f0:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (q != MP_QSTR_NULL) {
   126f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   126f4:	2b00      	cmp	r3, #0
   126f6:	d004      	beq.n	12702 <mp_obj_str_make_new+0x106>
                    return MP_OBJ_NEW_QSTR(q);
   126f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   126fa:	009b      	lsls	r3, r3, #2
   126fc:	f043 0302 	orr.w	r3, r3, #2
   12700:	e01d      	b.n	1273e <mp_obj_str_make_new+0x142>
                }

                mp_obj_str_t *o = MP_OBJ_TO_PTR(mp_obj_new_str_copy(type, NULL, str_len));
   12702:	69fb      	ldr	r3, [r7, #28]
   12704:	461a      	mov	r2, r3
   12706:	2100      	movs	r1, #0
   12708:	68f8      	ldr	r0, [r7, #12]
   1270a:	f002 fe4d 	bl	153a8 <mp_obj_new_str_copy>
   1270e:	63b8      	str	r0, [r7, #56]	; 0x38
                o->data = str_data;
   12710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12712:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   12714:	60da      	str	r2, [r3, #12]
                o->hash = str_hash;
   12716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12718:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1271a:	605a      	str	r2, [r3, #4]
                return MP_OBJ_FROM_PTR(o);
   1271c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1271e:	e00e      	b.n	1273e <mp_obj_str_make_new+0x142>
            } else {
                mp_buffer_info_t bufinfo;
                mp_get_buffer_raise(args[0], &bufinfo, MP_BUFFER_READ);
   12720:	683b      	ldr	r3, [r7, #0]
   12722:	681b      	ldr	r3, [r3, #0]
   12724:	f107 0110 	add.w	r1, r7, #16
   12728:	2201      	movs	r2, #1
   1272a:	4618      	mov	r0, r3
   1272c:	f7fb fcc8 	bl	e0c0 <mp_get_buffer_raise>
                #if MICROPY_PY_BUILTINS_STR_UNICODE_CHECK
                if (!utf8_check(bufinfo.buf, bufinfo.len)) {
                    mp_raise_msg(&mp_type_UnicodeError, NULL);
                }
                #endif
                return mp_obj_new_str(bufinfo.buf, bufinfo.len);
   12730:	693b      	ldr	r3, [r7, #16]
   12732:	697a      	ldr	r2, [r7, #20]
   12734:	4611      	mov	r1, r2
   12736:	4618      	mov	r0, r3
   12738:	f002 fef8 	bl	1552c <mp_obj_new_str>
   1273c:	4603      	mov	r3, r0
            }
    }
}
   1273e:	4618      	mov	r0, r3
   12740:	3748      	adds	r7, #72	; 0x48
   12742:	46bd      	mov	sp, r7
   12744:	bd80      	pop	{r7, pc}
   12746:	bf00      	nop
   12748:	00023ba4 	.word	0x00023ba4

0001274c <bytes_make_new>:

STATIC mp_obj_t bytes_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1274c:	b580      	push	{r7, lr}
   1274e:	b09e      	sub	sp, #120	; 0x78
   12750:	af00      	add	r7, sp, #0
   12752:	60f8      	str	r0, [r7, #12]
   12754:	60b9      	str	r1, [r7, #8]
   12756:	607a      	str	r2, [r7, #4]
   12758:	603b      	str	r3, [r7, #0]
    }
    #else
    (void)n_kw;
    #endif

    if (n_args == 0) {
   1275a:	68bb      	ldr	r3, [r7, #8]
   1275c:	2b00      	cmp	r3, #0
   1275e:	d101      	bne.n	12764 <bytes_make_new+0x18>
        return mp_const_empty_bytes;
   12760:	4b7a      	ldr	r3, [pc, #488]	; (1294c <bytes_make_new+0x200>)
   12762:	e0ee      	b.n	12942 <bytes_make_new+0x1f6>
    }

    if (MP_OBJ_IS_STR(args[0])) {
   12764:	683b      	ldr	r3, [r7, #0]
   12766:	681b      	ldr	r3, [r3, #0]
   12768:	4618      	mov	r0, r3
   1276a:	f7ff fddd 	bl	12328 <MP_OBJ_IS_QSTR>
   1276e:	4603      	mov	r3, r0
   12770:	2b00      	cmp	r3, #0
   12772:	d10d      	bne.n	12790 <bytes_make_new+0x44>
   12774:	683b      	ldr	r3, [r7, #0]
   12776:	681b      	ldr	r3, [r3, #0]
   12778:	4618      	mov	r0, r3
   1277a:	f7ff fde7 	bl	1234c <MP_OBJ_IS_OBJ>
   1277e:	4603      	mov	r3, r0
   12780:	2b00      	cmp	r3, #0
   12782:	d054      	beq.n	1282e <bytes_make_new+0xe2>
   12784:	683b      	ldr	r3, [r7, #0]
   12786:	681b      	ldr	r3, [r3, #0]
   12788:	681b      	ldr	r3, [r3, #0]
   1278a:	4a71      	ldr	r2, [pc, #452]	; (12950 <bytes_make_new+0x204>)
   1278c:	4293      	cmp	r3, r2
   1278e:	d14e      	bne.n	1282e <bytes_make_new+0xe2>
        if (n_args < 2 || n_args > 3) {
   12790:	68bb      	ldr	r3, [r7, #8]
   12792:	2b01      	cmp	r3, #1
   12794:	f240 80d2 	bls.w	1293c <bytes_make_new+0x1f0>
   12798:	68bb      	ldr	r3, [r7, #8]
   1279a:	2b03      	cmp	r3, #3
   1279c:	f200 80ce 	bhi.w	1293c <bytes_make_new+0x1f0>
            goto wrong_args;
        }
        GET_STR_DATA_LEN(args[0], str_data, str_len);
   127a0:	683b      	ldr	r3, [r7, #0]
   127a2:	681b      	ldr	r3, [r3, #0]
   127a4:	4618      	mov	r0, r3
   127a6:	f7ff fdbf 	bl	12328 <MP_OBJ_IS_QSTR>
   127aa:	4603      	mov	r3, r0
   127ac:	2b00      	cmp	r3, #0
   127ae:	d00a      	beq.n	127c6 <bytes_make_new+0x7a>
   127b0:	683b      	ldr	r3, [r7, #0]
   127b2:	681b      	ldr	r3, [r3, #0]
   127b4:	089b      	lsrs	r3, r3, #2
   127b6:	f107 0224 	add.w	r2, r7, #36	; 0x24
   127ba:	4611      	mov	r1, r2
   127bc:	4618      	mov	r0, r3
   127be:	f7ee fdf1 	bl	13a4 <qstr_data>
   127c2:	6778      	str	r0, [r7, #116]	; 0x74
   127c4:	e007      	b.n	127d6 <bytes_make_new+0x8a>
   127c6:	683b      	ldr	r3, [r7, #0]
   127c8:	681b      	ldr	r3, [r3, #0]
   127ca:	689b      	ldr	r3, [r3, #8]
   127cc:	627b      	str	r3, [r7, #36]	; 0x24
   127ce:	683b      	ldr	r3, [r7, #0]
   127d0:	681b      	ldr	r3, [r3, #0]
   127d2:	68db      	ldr	r3, [r3, #12]
   127d4:	677b      	str	r3, [r7, #116]	; 0x74
        GET_STR_HASH(args[0], str_hash);
   127d6:	683b      	ldr	r3, [r7, #0]
   127d8:	681b      	ldr	r3, [r3, #0]
   127da:	4618      	mov	r0, r3
   127dc:	f7ff fda4 	bl	12328 <MP_OBJ_IS_QSTR>
   127e0:	4603      	mov	r3, r0
   127e2:	2b00      	cmp	r3, #0
   127e4:	d007      	beq.n	127f6 <bytes_make_new+0xaa>
   127e6:	683b      	ldr	r3, [r7, #0]
   127e8:	681b      	ldr	r3, [r3, #0]
   127ea:	089b      	lsrs	r3, r3, #2
   127ec:	4618      	mov	r0, r3
   127ee:	f7ee fdad 	bl	134c <qstr_hash>
   127f2:	6738      	str	r0, [r7, #112]	; 0x70
   127f4:	e003      	b.n	127fe <bytes_make_new+0xb2>
   127f6:	683b      	ldr	r3, [r7, #0]
   127f8:	681b      	ldr	r3, [r3, #0]
   127fa:	685b      	ldr	r3, [r3, #4]
   127fc:	673b      	str	r3, [r7, #112]	; 0x70
        if (str_hash == 0) {
   127fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   12800:	2b00      	cmp	r3, #0
   12802:	d105      	bne.n	12810 <bytes_make_new+0xc4>
            str_hash = qstr_compute_hash(str_data, str_len);
   12804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12806:	4619      	mov	r1, r3
   12808:	6f78      	ldr	r0, [r7, #116]	; 0x74
   1280a:	f7ee fbcd 	bl	fa8 <qstr_compute_hash>
   1280e:	6738      	str	r0, [r7, #112]	; 0x70
        }
        mp_obj_str_t *o = MP_OBJ_TO_PTR(mp_obj_new_str_copy(&mp_type_bytes, NULL, str_len));
   12810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12812:	461a      	mov	r2, r3
   12814:	2100      	movs	r1, #0
   12816:	484f      	ldr	r0, [pc, #316]	; (12954 <bytes_make_new+0x208>)
   12818:	f002 fdc6 	bl	153a8 <mp_obj_new_str_copy>
   1281c:	6578      	str	r0, [r7, #84]	; 0x54
        o->data = str_data;
   1281e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   12820:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   12822:	60da      	str	r2, [r3, #12]
        o->hash = str_hash;
   12824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   12826:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   12828:	605a      	str	r2, [r3, #4]
        return MP_OBJ_FROM_PTR(o);
   1282a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1282c:	e089      	b.n	12942 <bytes_make_new+0x1f6>
    }

    if (n_args > 1) {
   1282e:	68bb      	ldr	r3, [r7, #8]
   12830:	2b01      	cmp	r3, #1
   12832:	f200 8082 	bhi.w	1293a <bytes_make_new+0x1ee>
        goto wrong_args;
    }

    if (MP_OBJ_IS_SMALL_INT(args[0])) {
   12836:	683b      	ldr	r3, [r7, #0]
   12838:	681b      	ldr	r3, [r3, #0]
   1283a:	4618      	mov	r0, r3
   1283c:	f7ff fd62 	bl	12304 <MP_OBJ_IS_SMALL_INT>
   12840:	4603      	mov	r3, r0
   12842:	2b00      	cmp	r3, #0
   12844:	d01e      	beq.n	12884 <bytes_make_new+0x138>
        mp_int_t len = MP_OBJ_SMALL_INT_VALUE(args[0]);
   12846:	683b      	ldr	r3, [r7, #0]
   12848:	681b      	ldr	r3, [r3, #0]
   1284a:	105b      	asrs	r3, r3, #1
   1284c:	66fb      	str	r3, [r7, #108]	; 0x6c
        if (len < 0) {
   1284e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   12850:	2b00      	cmp	r3, #0
   12852:	da02      	bge.n	1285a <bytes_make_new+0x10e>
            mp_raise_ValueError(NULL);
   12854:	2000      	movs	r0, #0
   12856:	f7fa fba5 	bl	cfa4 <mp_raise_ValueError>
        }
        vstr_t vstr;
        vstr_init_len(&vstr, len);
   1285a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1285c:	f107 0314 	add.w	r3, r7, #20
   12860:	4611      	mov	r1, r2
   12862:	4618      	mov	r0, r3
   12864:	f7ee fe38 	bl	14d8 <vstr_init_len>
        memset(vstr.buf, 0, len);
   12868:	69fb      	ldr	r3, [r7, #28]
   1286a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1286c:	2100      	movs	r1, #0
   1286e:	4618      	mov	r0, r3
   12870:	f00a fb2a 	bl	1cec8 <memset>
        return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   12874:	f107 0314 	add.w	r3, r7, #20
   12878:	4619      	mov	r1, r3
   1287a:	4836      	ldr	r0, [pc, #216]	; (12954 <bytes_make_new+0x208>)
   1287c:	f002 fdf4 	bl	15468 <mp_obj_new_str_from_vstr>
   12880:	4603      	mov	r3, r0
   12882:	e05e      	b.n	12942 <bytes_make_new+0x1f6>
    }

    // check if argument has the buffer protocol
    mp_buffer_info_t bufinfo;
    if (mp_get_buffer(args[0], &bufinfo, MP_BUFFER_READ)) {
   12884:	683b      	ldr	r3, [r7, #0]
   12886:	681b      	ldr	r3, [r3, #0]
   12888:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1288c:	2201      	movs	r2, #1
   1288e:	4618      	mov	r0, r3
   12890:	f7fb fbf4 	bl	e07c <mp_get_buffer>
   12894:	4603      	mov	r3, r0
   12896:	2b00      	cmp	r3, #0
   12898:	d007      	beq.n	128aa <bytes_make_new+0x15e>
        return mp_obj_new_bytes(bufinfo.buf, bufinfo.len);
   1289a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1289c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1289e:	4611      	mov	r1, r2
   128a0:	4618      	mov	r0, r3
   128a2:	f002 fe9b 	bl	155dc <mp_obj_new_bytes>
   128a6:	4603      	mov	r3, r0
   128a8:	e04b      	b.n	12942 <bytes_make_new+0x1f6>
    }

    vstr_t vstr;
    // Try to create array of exact len if initializer len is known
    mp_obj_t len_in = mp_obj_len_maybe(args[0]);
   128aa:	683b      	ldr	r3, [r7, #0]
   128ac:	681b      	ldr	r3, [r3, #0]
   128ae:	4618      	mov	r0, r3
   128b0:	f7fb fb4a 	bl	df48 <mp_obj_len_maybe>
   128b4:	66b8      	str	r0, [r7, #104]	; 0x68
    if (len_in == MP_OBJ_NULL) {
   128b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   128b8:	2b00      	cmp	r3, #0
   128ba:	d106      	bne.n	128ca <bytes_make_new+0x17e>
        vstr_init(&vstr, 16);
   128bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
   128c0:	2110      	movs	r1, #16
   128c2:	4618      	mov	r0, r3
   128c4:	f7ee fde6 	bl	1494 <vstr_init>
   128c8:	e009      	b.n	128de <bytes_make_new+0x192>
    } else {
        mp_int_t len = MP_OBJ_SMALL_INT_VALUE(len_in);
   128ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   128cc:	105b      	asrs	r3, r3, #1
   128ce:	667b      	str	r3, [r7, #100]	; 0x64
        vstr_init(&vstr, len);
   128d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   128d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
   128d6:	4611      	mov	r1, r2
   128d8:	4618      	mov	r0, r3
   128da:	f7ee fddb 	bl	1494 <vstr_init>
    }

    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(args[0], &iter_buf);
   128de:	683b      	ldr	r3, [r7, #0]
   128e0:	681b      	ldr	r3, [r3, #0]
   128e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
   128e6:	4611      	mov	r1, r2
   128e8:	4618      	mov	r0, r3
   128ea:	f7fa f82b 	bl	c944 <mp_getiter>
   128ee:	6638      	str	r0, [r7, #96]	; 0x60
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   128f0:	e014      	b.n	1291c <bytes_make_new+0x1d0>
        mp_int_t val = mp_obj_get_int(item);
   128f2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   128f4:	f7fb f9ac 	bl	dc50 <mp_obj_get_int>
   128f8:	65b8      	str	r0, [r7, #88]	; 0x58
        #if MICROPY_FULL_CHECKS
        if (val < 0 || val > 255) {
   128fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   128fc:	2b00      	cmp	r3, #0
   128fe:	db02      	blt.n	12906 <bytes_make_new+0x1ba>
   12900:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12902:	2bff      	cmp	r3, #255	; 0xff
   12904:	dd02      	ble.n	1290c <bytes_make_new+0x1c0>
            mp_raise_ValueError("bytes value out of range");
   12906:	4814      	ldr	r0, [pc, #80]	; (12958 <bytes_make_new+0x20c>)
   12908:	f7fa fb4c 	bl	cfa4 <mp_raise_ValueError>
        }
        #endif
        vstr_add_byte(&vstr, val);
   1290c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1290e:	b2da      	uxtb	r2, r3
   12910:	f107 0338 	add.w	r3, r7, #56	; 0x38
   12914:	4611      	mov	r1, r2
   12916:	4618      	mov	r0, r3
   12918:	f7ee ff12 	bl	1740 <vstr_add_byte>
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   1291c:	6e38      	ldr	r0, [r7, #96]	; 0x60
   1291e:	f7fa f893 	bl	ca48 <mp_iternext>
   12922:	65f8      	str	r0, [r7, #92]	; 0x5c
   12924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   12926:	2b04      	cmp	r3, #4
   12928:	d1e3      	bne.n	128f2 <bytes_make_new+0x1a6>
    }

    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   1292a:	f107 0338 	add.w	r3, r7, #56	; 0x38
   1292e:	4619      	mov	r1, r3
   12930:	4808      	ldr	r0, [pc, #32]	; (12954 <bytes_make_new+0x208>)
   12932:	f002 fd99 	bl	15468 <mp_obj_new_str_from_vstr>
   12936:	4603      	mov	r3, r0
   12938:	e003      	b.n	12942 <bytes_make_new+0x1f6>
        goto wrong_args;
   1293a:	bf00      	nop

wrong_args:
    mp_raise_TypeError("wrong number of arguments");
   1293c:	4807      	ldr	r0, [pc, #28]	; (1295c <bytes_make_new+0x210>)
   1293e:	f7fa fb3b 	bl	cfb8 <mp_raise_TypeError>
}
   12942:	4618      	mov	r0, r3
   12944:	3778      	adds	r7, #120	; 0x78
   12946:	46bd      	mov	sp, r7
   12948:	bd80      	pop	{r7, pc}
   1294a:	bf00      	nop
   1294c:	00023be4 	.word	0x00023be4
   12950:	00023b68 	.word	0x00023b68
   12954:	00023ba4 	.word	0x00023ba4
   12958:	000235ec 	.word	0x000235ec
   1295c:	00023608 	.word	0x00023608

00012960 <find_subbytes>:

// like strstr but with specified length and allows \0 bytes
// TODO replace with something more efficient/standard
const byte *find_subbytes(const byte *haystack, size_t hlen, const byte *needle, size_t nlen, int direction) {
   12960:	b580      	push	{r7, lr}
   12962:	b086      	sub	sp, #24
   12964:	af00      	add	r7, sp, #0
   12966:	60f8      	str	r0, [r7, #12]
   12968:	60b9      	str	r1, [r7, #8]
   1296a:	607a      	str	r2, [r7, #4]
   1296c:	603b      	str	r3, [r7, #0]
    if (hlen >= nlen) {
   1296e:	68ba      	ldr	r2, [r7, #8]
   12970:	683b      	ldr	r3, [r7, #0]
   12972:	429a      	cmp	r2, r3
   12974:	d328      	bcc.n	129c8 <find_subbytes+0x68>
        size_t str_index, str_index_end;
        if (direction > 0) {
   12976:	6a3b      	ldr	r3, [r7, #32]
   12978:	2b00      	cmp	r3, #0
   1297a:	dd06      	ble.n	1298a <find_subbytes+0x2a>
            str_index = 0;
   1297c:	2300      	movs	r3, #0
   1297e:	617b      	str	r3, [r7, #20]
            str_index_end = hlen - nlen;
   12980:	68ba      	ldr	r2, [r7, #8]
   12982:	683b      	ldr	r3, [r7, #0]
   12984:	1ad3      	subs	r3, r2, r3
   12986:	613b      	str	r3, [r7, #16]
   12988:	e005      	b.n	12996 <find_subbytes+0x36>
        } else {
            str_index = hlen - nlen;
   1298a:	68ba      	ldr	r2, [r7, #8]
   1298c:	683b      	ldr	r3, [r7, #0]
   1298e:	1ad3      	subs	r3, r2, r3
   12990:	617b      	str	r3, [r7, #20]
            str_index_end = 0;
   12992:	2300      	movs	r3, #0
   12994:	613b      	str	r3, [r7, #16]
        }
        for (;;) {
            if (memcmp(&haystack[str_index], needle, nlen) == 0) {
   12996:	68fa      	ldr	r2, [r7, #12]
   12998:	697b      	ldr	r3, [r7, #20]
   1299a:	4413      	add	r3, r2
   1299c:	683a      	ldr	r2, [r7, #0]
   1299e:	6879      	ldr	r1, [r7, #4]
   129a0:	4618      	mov	r0, r3
   129a2:	f00a fadd 	bl	1cf60 <memcmp>
   129a6:	4603      	mov	r3, r0
   129a8:	2b00      	cmp	r3, #0
   129aa:	d103      	bne.n	129b4 <find_subbytes+0x54>
                //found
                return haystack + str_index;
   129ac:	68fa      	ldr	r2, [r7, #12]
   129ae:	697b      	ldr	r3, [r7, #20]
   129b0:	4413      	add	r3, r2
   129b2:	e00a      	b.n	129ca <find_subbytes+0x6a>
            }
            if (str_index == str_index_end) {
   129b4:	697a      	ldr	r2, [r7, #20]
   129b6:	693b      	ldr	r3, [r7, #16]
   129b8:	429a      	cmp	r2, r3
   129ba:	d004      	beq.n	129c6 <find_subbytes+0x66>
                //not found
                break;
            }
            str_index += direction;
   129bc:	6a3b      	ldr	r3, [r7, #32]
   129be:	697a      	ldr	r2, [r7, #20]
   129c0:	4413      	add	r3, r2
   129c2:	617b      	str	r3, [r7, #20]
        }
   129c4:	e7e7      	b.n	12996 <find_subbytes+0x36>
                break;
   129c6:	bf00      	nop
    }
    return NULL;
   129c8:	2300      	movs	r3, #0
}
   129ca:	4618      	mov	r0, r3
   129cc:	3718      	adds	r7, #24
   129ce:	46bd      	mov	sp, r7
   129d0:	bd80      	pop	{r7, pc}
   129d2:	bf00      	nop

000129d4 <mp_obj_str_binary_op>:

// Note: this function is used to check if an object is a str or bytes, which
// works because both those types use it as their binary_op method.  Revisit
// MP_OBJ_IS_STR_OR_BYTES if this fact changes.
mp_obj_t mp_obj_str_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   129d4:	b580      	push	{r7, lr}
   129d6:	b09c      	sub	sp, #112	; 0x70
   129d8:	af02      	add	r7, sp, #8
   129da:	60f8      	str	r0, [r7, #12]
   129dc:	60b9      	str	r1, [r7, #8]
   129de:	607a      	str	r2, [r7, #4]
    // check for modulo
    if (op == MP_BINARY_OP_MODULO) {
   129e0:	68fb      	ldr	r3, [r7, #12]
   129e2:	2b1f      	cmp	r3, #31
   129e4:	d130      	bne.n	12a48 <mp_obj_str_binary_op+0x74>
        #if MICROPY_PY_BUILTINS_STR_OP_MODULO
        mp_obj_t *args = &rhs_in;
   129e6:	1d3b      	adds	r3, r7, #4
   129e8:	64bb      	str	r3, [r7, #72]	; 0x48
        size_t n_args = 1;
   129ea:	2301      	movs	r3, #1
   129ec:	647b      	str	r3, [r7, #68]	; 0x44
        mp_obj_t dict = MP_OBJ_NULL;
   129ee:	2300      	movs	r3, #0
   129f0:	667b      	str	r3, [r7, #100]	; 0x64
        if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_tuple)) {
   129f2:	687b      	ldr	r3, [r7, #4]
   129f4:	4618      	mov	r0, r3
   129f6:	f7ff fca9 	bl	1234c <MP_OBJ_IS_OBJ>
   129fa:	4603      	mov	r3, r0
   129fc:	2b00      	cmp	r3, #0
   129fe:	d00d      	beq.n	12a1c <mp_obj_str_binary_op+0x48>
   12a00:	687b      	ldr	r3, [r7, #4]
   12a02:	681b      	ldr	r3, [r3, #0]
   12a04:	4aac      	ldr	r2, [pc, #688]	; (12cb8 <mp_obj_str_binary_op+0x2e4>)
   12a06:	4293      	cmp	r3, r2
   12a08:	d108      	bne.n	12a1c <mp_obj_str_binary_op+0x48>
            // TODO: Support tuple subclasses?
            mp_obj_tuple_get(rhs_in, &n_args, &args);
   12a0a:	687b      	ldr	r3, [r7, #4]
   12a0c:	f107 0248 	add.w	r2, r7, #72	; 0x48
   12a10:	f107 0144 	add.w	r1, r7, #68	; 0x44
   12a14:	4618      	mov	r0, r3
   12a16:	f003 fae3 	bl	15fe0 <mp_obj_tuple_get>
   12a1a:	e00d      	b.n	12a38 <mp_obj_str_binary_op+0x64>
        } else if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_dict)) {
   12a1c:	687b      	ldr	r3, [r7, #4]
   12a1e:	4618      	mov	r0, r3
   12a20:	f7ff fc94 	bl	1234c <MP_OBJ_IS_OBJ>
   12a24:	4603      	mov	r3, r0
   12a26:	2b00      	cmp	r3, #0
   12a28:	d006      	beq.n	12a38 <mp_obj_str_binary_op+0x64>
   12a2a:	687b      	ldr	r3, [r7, #4]
   12a2c:	681b      	ldr	r3, [r3, #0]
   12a2e:	4aa3      	ldr	r2, [pc, #652]	; (12cbc <mp_obj_str_binary_op+0x2e8>)
   12a30:	4293      	cmp	r3, r2
   12a32:	d101      	bne.n	12a38 <mp_obj_str_binary_op+0x64>
            dict = rhs_in;
   12a34:	687b      	ldr	r3, [r7, #4]
   12a36:	667b      	str	r3, [r7, #100]	; 0x64
        }
        return str_modulo_format(lhs_in, n_args, args, dict);
   12a38:	6c79      	ldr	r1, [r7, #68]	; 0x44
   12a3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
   12a3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   12a3e:	68b8      	ldr	r0, [r7, #8]
   12a40:	f001 fdb4 	bl	145ac <str_modulo_format>
   12a44:	4603      	mov	r3, r0
   12a46:	e132      	b.n	12cae <mp_obj_str_binary_op+0x2da>
        return MP_OBJ_NULL;
        #endif
    }

    // from now on we need lhs type and data, so extract them
    mp_obj_type_t *lhs_type = mp_obj_get_type(lhs_in);
   12a48:	68b8      	ldr	r0, [r7, #8]
   12a4a:	f7fa ff23 	bl	d894 <mp_obj_get_type>
   12a4e:	6538      	str	r0, [r7, #80]	; 0x50
    GET_STR_DATA_LEN(lhs_in, lhs_data, lhs_len);
   12a50:	68b8      	ldr	r0, [r7, #8]
   12a52:	f7ff fc69 	bl	12328 <MP_OBJ_IS_QSTR>
   12a56:	4603      	mov	r3, r0
   12a58:	2b00      	cmp	r3, #0
   12a5a:	d009      	beq.n	12a70 <mp_obj_str_binary_op+0x9c>
   12a5c:	68bb      	ldr	r3, [r7, #8]
   12a5e:	089b      	lsrs	r3, r3, #2
   12a60:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   12a64:	4611      	mov	r1, r2
   12a66:	4618      	mov	r0, r3
   12a68:	f7ee fc9c 	bl	13a4 <qstr_data>
   12a6c:	6638      	str	r0, [r7, #96]	; 0x60
   12a6e:	e005      	b.n	12a7c <mp_obj_str_binary_op+0xa8>
   12a70:	68bb      	ldr	r3, [r7, #8]
   12a72:	689b      	ldr	r3, [r3, #8]
   12a74:	64fb      	str	r3, [r7, #76]	; 0x4c
   12a76:	68bb      	ldr	r3, [r7, #8]
   12a78:	68db      	ldr	r3, [r3, #12]
   12a7a:	663b      	str	r3, [r7, #96]	; 0x60

    // check for multiply
    if (op == MP_BINARY_OP_MULTIPLY) {
   12a7c:	68fb      	ldr	r3, [r7, #12]
   12a7e:	2b1c      	cmp	r3, #28
   12a80:	d135      	bne.n	12aee <mp_obj_str_binary_op+0x11a>
        mp_int_t n;
        if (!mp_obj_get_int_maybe(rhs_in, &n)) {
   12a82:	687b      	ldr	r3, [r7, #4]
   12a84:	f107 0240 	add.w	r2, r7, #64	; 0x40
   12a88:	4611      	mov	r1, r2
   12a8a:	4618      	mov	r0, r3
   12a8c:	f7fb f940 	bl	dd10 <mp_obj_get_int_maybe>
   12a90:	4603      	mov	r3, r0
   12a92:	f083 0301 	eor.w	r3, r3, #1
   12a96:	b2db      	uxtb	r3, r3
   12a98:	2b00      	cmp	r3, #0
   12a9a:	d001      	beq.n	12aa0 <mp_obj_str_binary_op+0xcc>
            return MP_OBJ_NULL; // op not supported
   12a9c:	2300      	movs	r3, #0
   12a9e:	e106      	b.n	12cae <mp_obj_str_binary_op+0x2da>
        }
        if (n <= 0) {
   12aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12aa2:	2b00      	cmp	r3, #0
   12aa4:	dc07      	bgt.n	12ab6 <mp_obj_str_binary_op+0xe2>
            if (lhs_type == &mp_type_str) {
   12aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   12aa8:	4a85      	ldr	r2, [pc, #532]	; (12cc0 <mp_obj_str_binary_op+0x2ec>)
   12aaa:	4293      	cmp	r3, r2
   12aac:	d101      	bne.n	12ab2 <mp_obj_str_binary_op+0xde>
                return MP_OBJ_NEW_QSTR(MP_QSTR_); // empty str
   12aae:	2306      	movs	r3, #6
   12ab0:	e0fd      	b.n	12cae <mp_obj_str_binary_op+0x2da>
            } else {
                return mp_const_empty_bytes;
   12ab2:	4b84      	ldr	r3, [pc, #528]	; (12cc4 <mp_obj_str_binary_op+0x2f0>)
   12ab4:	e0fb      	b.n	12cae <mp_obj_str_binary_op+0x2da>
            }
        }
        vstr_t vstr;
        vstr_init_len(&vstr, lhs_len * n);
   12ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12ab8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12aba:	fb02 f203 	mul.w	r2, r2, r3
   12abe:	f107 0330 	add.w	r3, r7, #48	; 0x30
   12ac2:	4611      	mov	r1, r2
   12ac4:	4618      	mov	r0, r3
   12ac6:	f7ee fd07 	bl	14d8 <vstr_init_len>
        mp_seq_multiply(lhs_data, sizeof(*lhs_data), lhs_len, n, vstr.buf);
   12aca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12ace:	4619      	mov	r1, r3
   12ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12ad2:	9300      	str	r3, [sp, #0]
   12ad4:	460b      	mov	r3, r1
   12ad6:	2101      	movs	r1, #1
   12ad8:	6e38      	ldr	r0, [r7, #96]	; 0x60
   12ada:	f004 ff6f 	bl	179bc <mp_seq_multiply>
        return mp_obj_new_str_from_vstr(lhs_type, &vstr);
   12ade:	f107 0330 	add.w	r3, r7, #48	; 0x30
   12ae2:	4619      	mov	r1, r3
   12ae4:	6d38      	ldr	r0, [r7, #80]	; 0x50
   12ae6:	f002 fcbf 	bl	15468 <mp_obj_new_str_from_vstr>
   12aea:	4603      	mov	r3, r0
   12aec:	e0df      	b.n	12cae <mp_obj_str_binary_op+0x2da>
    // easy to "fix" this with a bit of extra logic below, but it costs code
    // size and execution time so we don't.

    const byte *rhs_data;
    size_t rhs_len;
    if (lhs_type == mp_obj_get_type(rhs_in)) {
   12aee:	687b      	ldr	r3, [r7, #4]
   12af0:	4618      	mov	r0, r3
   12af2:	f7fa fecf 	bl	d894 <mp_obj_get_type>
   12af6:	4602      	mov	r2, r0
   12af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   12afa:	429a      	cmp	r2, r3
   12afc:	d11b      	bne.n	12b36 <mp_obj_str_binary_op+0x162>
        GET_STR_DATA_LEN(rhs_in, rhs_data_, rhs_len_);
   12afe:	687b      	ldr	r3, [r7, #4]
   12b00:	4618      	mov	r0, r3
   12b02:	f7ff fc11 	bl	12328 <MP_OBJ_IS_QSTR>
   12b06:	4603      	mov	r3, r0
   12b08:	2b00      	cmp	r3, #0
   12b0a:	d009      	beq.n	12b20 <mp_obj_str_binary_op+0x14c>
   12b0c:	687b      	ldr	r3, [r7, #4]
   12b0e:	089b      	lsrs	r3, r3, #2
   12b10:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   12b14:	4611      	mov	r1, r2
   12b16:	4618      	mov	r0, r3
   12b18:	f7ee fc44 	bl	13a4 <qstr_data>
   12b1c:	6578      	str	r0, [r7, #84]	; 0x54
   12b1e:	e005      	b.n	12b2c <mp_obj_str_binary_op+0x158>
   12b20:	687b      	ldr	r3, [r7, #4]
   12b22:	689b      	ldr	r3, [r3, #8]
   12b24:	62fb      	str	r3, [r7, #44]	; 0x2c
   12b26:	687b      	ldr	r3, [r7, #4]
   12b28:	68db      	ldr	r3, [r3, #12]
   12b2a:	657b      	str	r3, [r7, #84]	; 0x54
        rhs_data = rhs_data_;
   12b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   12b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
        rhs_len = rhs_len_;
   12b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12b32:	65bb      	str	r3, [r7, #88]	; 0x58
   12b34:	e01b      	b.n	12b6e <mp_obj_str_binary_op+0x19a>
    } else if (lhs_type == &mp_type_bytes) {
   12b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   12b38:	4a63      	ldr	r2, [pc, #396]	; (12cc8 <mp_obj_str_binary_op+0x2f4>)
   12b3a:	4293      	cmp	r3, r2
   12b3c:	d113      	bne.n	12b66 <mp_obj_str_binary_op+0x192>
        mp_buffer_info_t bufinfo;
        if (!mp_get_buffer(rhs_in, &bufinfo, MP_BUFFER_READ)) {
   12b3e:	687b      	ldr	r3, [r7, #4]
   12b40:	f107 0120 	add.w	r1, r7, #32
   12b44:	2201      	movs	r2, #1
   12b46:	4618      	mov	r0, r3
   12b48:	f7fb fa98 	bl	e07c <mp_get_buffer>
   12b4c:	4603      	mov	r3, r0
   12b4e:	f083 0301 	eor.w	r3, r3, #1
   12b52:	b2db      	uxtb	r3, r3
   12b54:	2b00      	cmp	r3, #0
   12b56:	d001      	beq.n	12b5c <mp_obj_str_binary_op+0x188>
            return MP_OBJ_NULL; // op not supported
   12b58:	2300      	movs	r3, #0
   12b5a:	e0a8      	b.n	12cae <mp_obj_str_binary_op+0x2da>
        }
        rhs_data = bufinfo.buf;
   12b5c:	6a3b      	ldr	r3, [r7, #32]
   12b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
        rhs_len = bufinfo.len;
   12b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12b62:	65bb      	str	r3, [r7, #88]	; 0x58
   12b64:	e003      	b.n	12b6e <mp_obj_str_binary_op+0x19a>
    } else {
        // LHS is str and RHS has an incompatible type
        // (except if operation is EQUAL, but that's handled by mp_obj_equal)
        bad_implicit_conversion(rhs_in);
   12b66:	687b      	ldr	r3, [r7, #4]
   12b68:	4618      	mov	r0, r3
   12b6a:	f002 fdd1 	bl	15710 <bad_implicit_conversion>
    }

    switch (op) {
   12b6e:	68fb      	ldr	r3, [r7, #12]
   12b70:	2b22      	cmp	r3, #34	; 0x22
   12b72:	f200 809b 	bhi.w	12cac <mp_obj_str_binary_op+0x2d8>
   12b76:	a201      	add	r2, pc, #4	; (adr r2, 12b7c <mp_obj_str_binary_op+0x1a8>)
   12b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12b7c:	00012c91 	.word	0x00012c91
   12b80:	00012c91 	.word	0x00012c91
   12b84:	00012c91 	.word	0x00012c91
   12b88:	00012c91 	.word	0x00012c91
   12b8c:	00012c91 	.word	0x00012c91
   12b90:	00012cad 	.word	0x00012cad
   12b94:	00012cad 	.word	0x00012cad
   12b98:	00012cad 	.word	0x00012cad
   12b9c:	00012cad 	.word	0x00012cad
   12ba0:	00012cad 	.word	0x00012cad
   12ba4:	00012cad 	.word	0x00012cad
   12ba8:	00012cad 	.word	0x00012cad
   12bac:	00012cad 	.word	0x00012cad
   12bb0:	00012cad 	.word	0x00012cad
   12bb4:	00012c09 	.word	0x00012c09
   12bb8:	00012cad 	.word	0x00012cad
   12bbc:	00012cad 	.word	0x00012cad
   12bc0:	00012cad 	.word	0x00012cad
   12bc4:	00012cad 	.word	0x00012cad
   12bc8:	00012cad 	.word	0x00012cad
   12bcc:	00012cad 	.word	0x00012cad
   12bd0:	00012cad 	.word	0x00012cad
   12bd4:	00012cad 	.word	0x00012cad
   12bd8:	00012cad 	.word	0x00012cad
   12bdc:	00012cad 	.word	0x00012cad
   12be0:	00012cad 	.word	0x00012cad
   12be4:	00012c09 	.word	0x00012c09
   12be8:	00012cad 	.word	0x00012cad
   12bec:	00012cad 	.word	0x00012cad
   12bf0:	00012cad 	.word	0x00012cad
   12bf4:	00012cad 	.word	0x00012cad
   12bf8:	00012cad 	.word	0x00012cad
   12bfc:	00012cad 	.word	0x00012cad
   12c00:	00012cad 	.word	0x00012cad
   12c04:	00012c6b 	.word	0x00012c6b
        case MP_BINARY_OP_ADD:
        case MP_BINARY_OP_INPLACE_ADD: {
            if (lhs_len == 0 && mp_obj_get_type(rhs_in) == lhs_type) {
   12c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12c0a:	2b00      	cmp	r3, #0
   12c0c:	d109      	bne.n	12c22 <mp_obj_str_binary_op+0x24e>
   12c0e:	687b      	ldr	r3, [r7, #4]
   12c10:	4618      	mov	r0, r3
   12c12:	f7fa fe3f 	bl	d894 <mp_obj_get_type>
   12c16:	4602      	mov	r2, r0
   12c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   12c1a:	429a      	cmp	r2, r3
   12c1c:	d101      	bne.n	12c22 <mp_obj_str_binary_op+0x24e>
                return rhs_in;
   12c1e:	687b      	ldr	r3, [r7, #4]
   12c20:	e045      	b.n	12cae <mp_obj_str_binary_op+0x2da>
            }
            if (rhs_len == 0) {
   12c22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12c24:	2b00      	cmp	r3, #0
   12c26:	d101      	bne.n	12c2c <mp_obj_str_binary_op+0x258>
                return lhs_in;
   12c28:	68bb      	ldr	r3, [r7, #8]
   12c2a:	e040      	b.n	12cae <mp_obj_str_binary_op+0x2da>
            }

            vstr_t vstr;
            vstr_init_len(&vstr, lhs_len + rhs_len);
   12c2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12c2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12c30:	441a      	add	r2, r3
   12c32:	f107 0310 	add.w	r3, r7, #16
   12c36:	4611      	mov	r1, r2
   12c38:	4618      	mov	r0, r3
   12c3a:	f7ee fc4d 	bl	14d8 <vstr_init_len>
            memcpy(vstr.buf, lhs_data, lhs_len);
   12c3e:	69bb      	ldr	r3, [r7, #24]
   12c40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12c42:	6e39      	ldr	r1, [r7, #96]	; 0x60
   12c44:	4618      	mov	r0, r3
   12c46:	f00a f8a3 	bl	1cd90 <memcpy>
            memcpy(vstr.buf + lhs_len, rhs_data, rhs_len);
   12c4a:	69ba      	ldr	r2, [r7, #24]
   12c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12c4e:	4413      	add	r3, r2
   12c50:	6dba      	ldr	r2, [r7, #88]	; 0x58
   12c52:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   12c54:	4618      	mov	r0, r3
   12c56:	f00a f89b 	bl	1cd90 <memcpy>
            return mp_obj_new_str_from_vstr(lhs_type, &vstr);
   12c5a:	f107 0310 	add.w	r3, r7, #16
   12c5e:	4619      	mov	r1, r3
   12c60:	6d38      	ldr	r0, [r7, #80]	; 0x50
   12c62:	f002 fc01 	bl	15468 <mp_obj_new_str_from_vstr>
   12c66:	4603      	mov	r3, r0
   12c68:	e021      	b.n	12cae <mp_obj_str_binary_op+0x2da>
        }

        case MP_BINARY_OP_CONTAINS:
            return mp_obj_new_bool(find_subbytes(lhs_data, lhs_len, rhs_data, rhs_len, 1) != NULL);
   12c6a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   12c6c:	2301      	movs	r3, #1
   12c6e:	9300      	str	r3, [sp, #0]
   12c70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12c72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   12c74:	6e38      	ldr	r0, [r7, #96]	; 0x60
   12c76:	f7ff fe73 	bl	12960 <find_subbytes>
   12c7a:	4603      	mov	r3, r0
   12c7c:	2b00      	cmp	r3, #0
   12c7e:	bf14      	ite	ne
   12c80:	2301      	movne	r3, #1
   12c82:	2300      	moveq	r3, #0
   12c84:	b2db      	uxtb	r3, r3
   12c86:	4618      	mov	r0, r3
   12c88:	f7ff fb72 	bl	12370 <mp_obj_new_bool>
   12c8c:	4603      	mov	r3, r0
   12c8e:	e00e      	b.n	12cae <mp_obj_str_binary_op+0x2da>
        case MP_BINARY_OP_EQUAL: // This will be passed only for bytes, str is dealt with in mp_obj_equal()
        case MP_BINARY_OP_LESS:
        case MP_BINARY_OP_LESS_EQUAL:
        case MP_BINARY_OP_MORE:
        case MP_BINARY_OP_MORE_EQUAL:
            return mp_obj_new_bool(mp_seq_cmp_bytes(op, lhs_data, lhs_len, rhs_data, rhs_len));
   12c90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12c92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12c94:	9300      	str	r3, [sp, #0]
   12c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   12c98:	6e39      	ldr	r1, [r7, #96]	; 0x60
   12c9a:	68f8      	ldr	r0, [r7, #12]
   12c9c:	f004 fef2 	bl	17a84 <mp_seq_cmp_bytes>
   12ca0:	4603      	mov	r3, r0
   12ca2:	4618      	mov	r0, r3
   12ca4:	f7ff fb64 	bl	12370 <mp_obj_new_bool>
   12ca8:	4603      	mov	r3, r0
   12caa:	e000      	b.n	12cae <mp_obj_str_binary_op+0x2da>

        default:
            return MP_OBJ_NULL; // op not supported
   12cac:	2300      	movs	r3, #0
    }
}
   12cae:	4618      	mov	r0, r3
   12cb0:	3768      	adds	r7, #104	; 0x68
   12cb2:	46bd      	mov	sp, r7
   12cb4:	bd80      	pop	{r7, pc}
   12cb6:	bf00      	nop
   12cb8:	00023dec 	.word	0x00023dec
   12cbc:	00022104 	.word	0x00022104
   12cc0:	00023b68 	.word	0x00023b68
   12cc4:	00023be4 	.word	0x00023be4
   12cc8:	00023ba4 	.word	0x00023ba4

00012ccc <str_index_to_ptr>:

#if !MICROPY_PY_BUILTINS_STR_UNICODE
// objstrunicode defines own version
const byte *str_index_to_ptr(const mp_obj_type_t *type, const byte *self_data, size_t self_len,
                             mp_obj_t index, bool is_slice) {
   12ccc:	b580      	push	{r7, lr}
   12cce:	b086      	sub	sp, #24
   12cd0:	af00      	add	r7, sp, #0
   12cd2:	60f8      	str	r0, [r7, #12]
   12cd4:	60b9      	str	r1, [r7, #8]
   12cd6:	607a      	str	r2, [r7, #4]
   12cd8:	603b      	str	r3, [r7, #0]
    size_t index_val = mp_get_index(type, self_len, index, is_slice);
   12cda:	f897 3020 	ldrb.w	r3, [r7, #32]
   12cde:	683a      	ldr	r2, [r7, #0]
   12ce0:	6879      	ldr	r1, [r7, #4]
   12ce2:	68f8      	ldr	r0, [r7, #12]
   12ce4:	f7fb f8a4 	bl	de30 <mp_get_index>
   12ce8:	6178      	str	r0, [r7, #20]
    return self_data + index_val;
   12cea:	68ba      	ldr	r2, [r7, #8]
   12cec:	697b      	ldr	r3, [r7, #20]
   12cee:	4413      	add	r3, r2
}
   12cf0:	4618      	mov	r0, r3
   12cf2:	3718      	adds	r7, #24
   12cf4:	46bd      	mov	sp, r7
   12cf6:	bd80      	pop	{r7, pc}

00012cf8 <bytes_subscr>:
#endif

// This is used for both bytes and 8-bit strings. This is not used for unicode strings.
STATIC mp_obj_t bytes_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   12cf8:	b580      	push	{r7, lr}
   12cfa:	b088      	sub	sp, #32
   12cfc:	af00      	add	r7, sp, #0
   12cfe:	60f8      	str	r0, [r7, #12]
   12d00:	60b9      	str	r1, [r7, #8]
   12d02:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   12d04:	68f8      	ldr	r0, [r7, #12]
   12d06:	f7fa fdc5 	bl	d894 <mp_obj_get_type>
   12d0a:	61b8      	str	r0, [r7, #24]
    GET_STR_DATA_LEN(self_in, self_data, self_len);
   12d0c:	68f8      	ldr	r0, [r7, #12]
   12d0e:	f7ff fb0b 	bl	12328 <MP_OBJ_IS_QSTR>
   12d12:	4603      	mov	r3, r0
   12d14:	2b00      	cmp	r3, #0
   12d16:	d009      	beq.n	12d2c <bytes_subscr+0x34>
   12d18:	68fb      	ldr	r3, [r7, #12]
   12d1a:	089b      	lsrs	r3, r3, #2
   12d1c:	f107 0210 	add.w	r2, r7, #16
   12d20:	4611      	mov	r1, r2
   12d22:	4618      	mov	r0, r3
   12d24:	f7ee fb3e 	bl	13a4 <qstr_data>
   12d28:	61f8      	str	r0, [r7, #28]
   12d2a:	e005      	b.n	12d38 <bytes_subscr+0x40>
   12d2c:	68fb      	ldr	r3, [r7, #12]
   12d2e:	689b      	ldr	r3, [r3, #8]
   12d30:	613b      	str	r3, [r7, #16]
   12d32:	68fb      	ldr	r3, [r7, #12]
   12d34:	68db      	ldr	r3, [r3, #12]
   12d36:	61fb      	str	r3, [r7, #28]
    if (value == MP_OBJ_SENTINEL) {
   12d38:	687b      	ldr	r3, [r7, #4]
   12d3a:	2b08      	cmp	r3, #8
   12d3c:	d11b      	bne.n	12d76 <bytes_subscr+0x7e>
                mp_raise_NotImplementedError("only slices with step=1 (aka None) are supported");
            }
            return mp_obj_new_str_of_type(type, self_data + slice.start, slice.stop - slice.start);
        }
#endif
        size_t index_val = mp_get_index(type, self_len, index, false);
   12d3e:	6939      	ldr	r1, [r7, #16]
   12d40:	2300      	movs	r3, #0
   12d42:	68ba      	ldr	r2, [r7, #8]
   12d44:	69b8      	ldr	r0, [r7, #24]
   12d46:	f7fb f873 	bl	de30 <mp_get_index>
   12d4a:	6178      	str	r0, [r7, #20]
        // If we have unicode enabled the type will always be bytes, so take the short cut.
        if (MICROPY_PY_BUILTINS_STR_UNICODE || type == &mp_type_bytes) {
   12d4c:	69bb      	ldr	r3, [r7, #24]
   12d4e:	4a0c      	ldr	r2, [pc, #48]	; (12d80 <bytes_subscr+0x88>)
   12d50:	4293      	cmp	r3, r2
   12d52:	d107      	bne.n	12d64 <bytes_subscr+0x6c>
            return MP_OBJ_NEW_SMALL_INT(self_data[index_val]);
   12d54:	69fa      	ldr	r2, [r7, #28]
   12d56:	697b      	ldr	r3, [r7, #20]
   12d58:	4413      	add	r3, r2
   12d5a:	781b      	ldrb	r3, [r3, #0]
   12d5c:	005b      	lsls	r3, r3, #1
   12d5e:	f043 0301 	orr.w	r3, r3, #1
   12d62:	e009      	b.n	12d78 <bytes_subscr+0x80>
        } else {
            return mp_obj_new_str_via_qstr((char*)&self_data[index_val], 1);
   12d64:	69fa      	ldr	r2, [r7, #28]
   12d66:	697b      	ldr	r3, [r7, #20]
   12d68:	4413      	add	r3, r2
   12d6a:	2101      	movs	r1, #1
   12d6c:	4618      	mov	r0, r3
   12d6e:	f002 fb69 	bl	15444 <mp_obj_new_str_via_qstr>
   12d72:	4603      	mov	r3, r0
   12d74:	e000      	b.n	12d78 <bytes_subscr+0x80>
        }
    } else {
        return MP_OBJ_NULL; // op not supported
   12d76:	2300      	movs	r3, #0
    }
}
   12d78:	4618      	mov	r0, r3
   12d7a:	3720      	adds	r7, #32
   12d7c:	46bd      	mov	sp, r7
   12d7e:	bd80      	pop	{r7, pc}
   12d80:	00023ba4 	.word	0x00023ba4

00012d84 <str_join>:

STATIC mp_obj_t str_join(mp_obj_t self_in, mp_obj_t arg) {
   12d84:	b590      	push	{r4, r7, lr}
   12d86:	b093      	sub	sp, #76	; 0x4c
   12d88:	af00      	add	r7, sp, #0
   12d8a:	6078      	str	r0, [r7, #4]
   12d8c:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(self_in));
   12d8e:	6878      	ldr	r0, [r7, #4]
   12d90:	f7ff faca 	bl	12328 <MP_OBJ_IS_QSTR>
   12d94:	4603      	mov	r3, r0
   12d96:	f083 0301 	eor.w	r3, r3, #1
   12d9a:	b2db      	uxtb	r3, r3
   12d9c:	2b00      	cmp	r3, #0
   12d9e:	d015      	beq.n	12dcc <str_join+0x48>
   12da0:	6878      	ldr	r0, [r7, #4]
   12da2:	f7ff fad3 	bl	1234c <MP_OBJ_IS_OBJ>
   12da6:	4603      	mov	r3, r0
   12da8:	f083 0301 	eor.w	r3, r3, #1
   12dac:	b2db      	uxtb	r3, r3
   12dae:	2b00      	cmp	r3, #0
   12db0:	d105      	bne.n	12dbe <str_join+0x3a>
   12db2:	687b      	ldr	r3, [r7, #4]
   12db4:	681b      	ldr	r3, [r3, #0]
   12db6:	699b      	ldr	r3, [r3, #24]
   12db8:	4a78      	ldr	r2, [pc, #480]	; (12f9c <str_join+0x218>)
   12dba:	4293      	cmp	r3, r2
   12dbc:	d006      	beq.n	12dcc <str_join+0x48>
   12dbe:	4b78      	ldr	r3, [pc, #480]	; (12fa0 <str_join+0x21c>)
   12dc0:	4a78      	ldr	r2, [pc, #480]	; (12fa4 <str_join+0x220>)
   12dc2:	f240 11c1 	movw	r1, #449	; 0x1c1
   12dc6:	4878      	ldr	r0, [pc, #480]	; (12fa8 <str_join+0x224>)
   12dc8:	f008 fcdc 	bl	1b784 <__assert_func>
    const mp_obj_type_t *self_type = mp_obj_get_type(self_in);
   12dcc:	6878      	ldr	r0, [r7, #4]
   12dce:	f7fa fd61 	bl	d894 <mp_obj_get_type>
   12dd2:	62b8      	str	r0, [r7, #40]	; 0x28

    // get separation string
    GET_STR_DATA_LEN(self_in, sep_str, sep_len);
   12dd4:	6878      	ldr	r0, [r7, #4]
   12dd6:	f7ff faa7 	bl	12328 <MP_OBJ_IS_QSTR>
   12dda:	4603      	mov	r3, r0
   12ddc:	2b00      	cmp	r3, #0
   12dde:	d009      	beq.n	12df4 <str_join+0x70>
   12de0:	687b      	ldr	r3, [r7, #4]
   12de2:	089b      	lsrs	r3, r3, #2
   12de4:	f107 0224 	add.w	r2, r7, #36	; 0x24
   12de8:	4611      	mov	r1, r2
   12dea:	4618      	mov	r0, r3
   12dec:	f7ee fada 	bl	13a4 <qstr_data>
   12df0:	6478      	str	r0, [r7, #68]	; 0x44
   12df2:	e005      	b.n	12e00 <str_join+0x7c>
   12df4:	687b      	ldr	r3, [r7, #4]
   12df6:	689b      	ldr	r3, [r3, #8]
   12df8:	627b      	str	r3, [r7, #36]	; 0x24
   12dfa:	687b      	ldr	r3, [r7, #4]
   12dfc:	68db      	ldr	r3, [r3, #12]
   12dfe:	647b      	str	r3, [r7, #68]	; 0x44

    // process args
    size_t seq_len;
    mp_obj_t *seq_items;

    if (!MP_OBJ_IS_TYPE(arg, &mp_type_list) && !MP_OBJ_IS_TYPE(arg, &mp_type_tuple)) {
   12e00:	683b      	ldr	r3, [r7, #0]
   12e02:	4618      	mov	r0, r3
   12e04:	f7ff faa2 	bl	1234c <MP_OBJ_IS_OBJ>
   12e08:	4603      	mov	r3, r0
   12e0a:	f083 0301 	eor.w	r3, r3, #1
   12e0e:	b2db      	uxtb	r3, r3
   12e10:	2b00      	cmp	r3, #0
   12e12:	d104      	bne.n	12e1e <str_join+0x9a>
   12e14:	683b      	ldr	r3, [r7, #0]
   12e16:	681b      	ldr	r3, [r3, #0]
   12e18:	4a64      	ldr	r2, [pc, #400]	; (12fac <str_join+0x228>)
   12e1a:	4293      	cmp	r3, r2
   12e1c:	d017      	beq.n	12e4e <str_join+0xca>
   12e1e:	683b      	ldr	r3, [r7, #0]
   12e20:	4618      	mov	r0, r3
   12e22:	f7ff fa93 	bl	1234c <MP_OBJ_IS_OBJ>
   12e26:	4603      	mov	r3, r0
   12e28:	f083 0301 	eor.w	r3, r3, #1
   12e2c:	b2db      	uxtb	r3, r3
   12e2e:	2b00      	cmp	r3, #0
   12e30:	d104      	bne.n	12e3c <str_join+0xb8>
   12e32:	683b      	ldr	r3, [r7, #0]
   12e34:	681b      	ldr	r3, [r3, #0]
   12e36:	4a5e      	ldr	r2, [pc, #376]	; (12fb0 <str_join+0x22c>)
   12e38:	4293      	cmp	r3, r2
   12e3a:	d008      	beq.n	12e4e <str_join+0xca>
        // arg is not a list nor a tuple, try to convert it to a list
        // TODO: Try to optimize?
        arg = mp_type_list.make_new(&mp_type_list, 1, 0, &arg);
   12e3c:	4b5b      	ldr	r3, [pc, #364]	; (12fac <str_join+0x228>)
   12e3e:	68dc      	ldr	r4, [r3, #12]
   12e40:	463b      	mov	r3, r7
   12e42:	2200      	movs	r2, #0
   12e44:	2101      	movs	r1, #1
   12e46:	4859      	ldr	r0, [pc, #356]	; (12fac <str_join+0x228>)
   12e48:	47a0      	blx	r4
   12e4a:	4603      	mov	r3, r0
   12e4c:	603b      	str	r3, [r7, #0]
    }
    mp_obj_get_array(arg, &seq_len, &seq_items);
   12e4e:	683b      	ldr	r3, [r7, #0]
   12e50:	f107 021c 	add.w	r2, r7, #28
   12e54:	f107 0120 	add.w	r1, r7, #32
   12e58:	4618      	mov	r0, r3
   12e5a:	f7fa ff99 	bl	dd90 <mp_obj_get_array>

    // count required length
    size_t required_len = 0;
   12e5e:	2300      	movs	r3, #0
   12e60:	643b      	str	r3, [r7, #64]	; 0x40
    for (size_t i = 0; i < seq_len; i++) {
   12e62:	2300      	movs	r3, #0
   12e64:	63fb      	str	r3, [r7, #60]	; 0x3c
   12e66:	e039      	b.n	12edc <str_join+0x158>
        if (mp_obj_get_type(seq_items[i]) != self_type) {
   12e68:	69fa      	ldr	r2, [r7, #28]
   12e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12e6c:	009b      	lsls	r3, r3, #2
   12e6e:	4413      	add	r3, r2
   12e70:	681b      	ldr	r3, [r3, #0]
   12e72:	4618      	mov	r0, r3
   12e74:	f7fa fd0e 	bl	d894 <mp_obj_get_type>
   12e78:	4602      	mov	r2, r0
   12e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12e7c:	429a      	cmp	r2, r3
   12e7e:	d002      	beq.n	12e86 <str_join+0x102>
            mp_raise_TypeError(
   12e80:	484c      	ldr	r0, [pc, #304]	; (12fb4 <str_join+0x230>)
   12e82:	f7fa f899 	bl	cfb8 <mp_raise_TypeError>
                "join expects a list of str/bytes objects consistent with self object");
        }
        if (i > 0) {
   12e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12e88:	2b00      	cmp	r3, #0
   12e8a:	d003      	beq.n	12e94 <str_join+0x110>
            required_len += sep_len;
   12e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12e8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12e90:	4413      	add	r3, r2
   12e92:	643b      	str	r3, [r7, #64]	; 0x40
        }
        GET_STR_LEN(seq_items[i], l);
   12e94:	69fa      	ldr	r2, [r7, #28]
   12e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12e98:	009b      	lsls	r3, r3, #2
   12e9a:	4413      	add	r3, r2
   12e9c:	681b      	ldr	r3, [r3, #0]
   12e9e:	4618      	mov	r0, r3
   12ea0:	f7ff fa42 	bl	12328 <MP_OBJ_IS_QSTR>
   12ea4:	4603      	mov	r3, r0
   12ea6:	2b00      	cmp	r3, #0
   12ea8:	d00a      	beq.n	12ec0 <str_join+0x13c>
   12eaa:	69fa      	ldr	r2, [r7, #28]
   12eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12eae:	009b      	lsls	r3, r3, #2
   12eb0:	4413      	add	r3, r2
   12eb2:	681b      	ldr	r3, [r3, #0]
   12eb4:	089b      	lsrs	r3, r3, #2
   12eb6:	4618      	mov	r0, r3
   12eb8:	f7ee fa56 	bl	1368 <qstr_len>
   12ebc:	63b8      	str	r0, [r7, #56]	; 0x38
   12ebe:	e006      	b.n	12ece <str_join+0x14a>
   12ec0:	69fa      	ldr	r2, [r7, #28]
   12ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12ec4:	009b      	lsls	r3, r3, #2
   12ec6:	4413      	add	r3, r2
   12ec8:	681b      	ldr	r3, [r3, #0]
   12eca:	689b      	ldr	r3, [r3, #8]
   12ecc:	63bb      	str	r3, [r7, #56]	; 0x38
        required_len += l;
   12ece:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12ed2:	4413      	add	r3, r2
   12ed4:	643b      	str	r3, [r7, #64]	; 0x40
    for (size_t i = 0; i < seq_len; i++) {
   12ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12ed8:	3301      	adds	r3, #1
   12eda:	63fb      	str	r3, [r7, #60]	; 0x3c
   12edc:	6a3b      	ldr	r3, [r7, #32]
   12ede:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12ee0:	429a      	cmp	r2, r3
   12ee2:	d3c1      	bcc.n	12e68 <str_join+0xe4>
    }

    // make joined string
    vstr_t vstr;
    vstr_init_len(&vstr, required_len);
   12ee4:	f107 030c 	add.w	r3, r7, #12
   12ee8:	6c39      	ldr	r1, [r7, #64]	; 0x40
   12eea:	4618      	mov	r0, r3
   12eec:	f7ee faf4 	bl	14d8 <vstr_init_len>
    byte *data = (byte*)vstr.buf;
   12ef0:	697b      	ldr	r3, [r7, #20]
   12ef2:	637b      	str	r3, [r7, #52]	; 0x34
    for (size_t i = 0; i < seq_len; i++) {
   12ef4:	2300      	movs	r3, #0
   12ef6:	633b      	str	r3, [r7, #48]	; 0x30
   12ef8:	e040      	b.n	12f7c <str_join+0x1f8>
        if (i > 0) {
   12efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12efc:	2b00      	cmp	r3, #0
   12efe:	d009      	beq.n	12f14 <str_join+0x190>
            memcpy(data, sep_str, sep_len);
   12f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12f02:	461a      	mov	r2, r3
   12f04:	6c79      	ldr	r1, [r7, #68]	; 0x44
   12f06:	6b78      	ldr	r0, [r7, #52]	; 0x34
   12f08:	f009 ff42 	bl	1cd90 <memcpy>
            data += sep_len;
   12f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   12f10:	4413      	add	r3, r2
   12f12:	637b      	str	r3, [r7, #52]	; 0x34
        }
        GET_STR_DATA_LEN(seq_items[i], s, l);
   12f14:	69fa      	ldr	r2, [r7, #28]
   12f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12f18:	009b      	lsls	r3, r3, #2
   12f1a:	4413      	add	r3, r2
   12f1c:	681b      	ldr	r3, [r3, #0]
   12f1e:	4618      	mov	r0, r3
   12f20:	f7ff fa02 	bl	12328 <MP_OBJ_IS_QSTR>
   12f24:	4603      	mov	r3, r0
   12f26:	2b00      	cmp	r3, #0
   12f28:	d00d      	beq.n	12f46 <str_join+0x1c2>
   12f2a:	69fa      	ldr	r2, [r7, #28]
   12f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12f2e:	009b      	lsls	r3, r3, #2
   12f30:	4413      	add	r3, r2
   12f32:	681b      	ldr	r3, [r3, #0]
   12f34:	089b      	lsrs	r3, r3, #2
   12f36:	f107 0208 	add.w	r2, r7, #8
   12f3a:	4611      	mov	r1, r2
   12f3c:	4618      	mov	r0, r3
   12f3e:	f7ee fa31 	bl	13a4 <qstr_data>
   12f42:	62f8      	str	r0, [r7, #44]	; 0x2c
   12f44:	e00d      	b.n	12f62 <str_join+0x1de>
   12f46:	69fa      	ldr	r2, [r7, #28]
   12f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12f4a:	009b      	lsls	r3, r3, #2
   12f4c:	4413      	add	r3, r2
   12f4e:	681b      	ldr	r3, [r3, #0]
   12f50:	689b      	ldr	r3, [r3, #8]
   12f52:	60bb      	str	r3, [r7, #8]
   12f54:	69fa      	ldr	r2, [r7, #28]
   12f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12f58:	009b      	lsls	r3, r3, #2
   12f5a:	4413      	add	r3, r2
   12f5c:	681b      	ldr	r3, [r3, #0]
   12f5e:	68db      	ldr	r3, [r3, #12]
   12f60:	62fb      	str	r3, [r7, #44]	; 0x2c
        memcpy(data, s, l);
   12f62:	68bb      	ldr	r3, [r7, #8]
   12f64:	461a      	mov	r2, r3
   12f66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   12f68:	6b78      	ldr	r0, [r7, #52]	; 0x34
   12f6a:	f009 ff11 	bl	1cd90 <memcpy>
        data += l;
   12f6e:	68bb      	ldr	r3, [r7, #8]
   12f70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   12f72:	4413      	add	r3, r2
   12f74:	637b      	str	r3, [r7, #52]	; 0x34
    for (size_t i = 0; i < seq_len; i++) {
   12f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12f78:	3301      	adds	r3, #1
   12f7a:	633b      	str	r3, [r7, #48]	; 0x30
   12f7c:	6a3b      	ldr	r3, [r7, #32]
   12f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12f80:	429a      	cmp	r2, r3
   12f82:	d3ba      	bcc.n	12efa <str_join+0x176>
    }

    // return joined string
    return mp_obj_new_str_from_vstr(self_type, &vstr);
   12f84:	f107 030c 	add.w	r3, r7, #12
   12f88:	4619      	mov	r1, r3
   12f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12f8c:	f002 fa6c 	bl	15468 <mp_obj_new_str_from_vstr>
   12f90:	4603      	mov	r3, r0
}
   12f92:	4618      	mov	r0, r3
   12f94:	374c      	adds	r7, #76	; 0x4c
   12f96:	46bd      	mov	sp, r7
   12f98:	bd90      	pop	{r4, r7, pc}
   12f9a:	bf00      	nop
   12f9c:	000129d5 	.word	0x000129d5
   12fa0:	00023624 	.word	0x00023624
   12fa4:	00023c14 	.word	0x00023c14
   12fa8:	000236ac 	.word	0x000236ac
   12fac:	000231ec 	.word	0x000231ec
   12fb0:	00023dec 	.word	0x00023dec
   12fb4:	000236c0 	.word	0x000236c0

00012fb8 <mp_obj_str_split>:
MP_DEFINE_CONST_FUN_OBJ_2(str_join_obj, str_join);

mp_obj_t mp_obj_str_split(size_t n_args, const mp_obj_t *args) {
   12fb8:	b580      	push	{r7, lr}
   12fba:	b08e      	sub	sp, #56	; 0x38
   12fbc:	af00      	add	r7, sp, #0
   12fbe:	6078      	str	r0, [r7, #4]
   12fc0:	6039      	str	r1, [r7, #0]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   12fc2:	683b      	ldr	r3, [r7, #0]
   12fc4:	681b      	ldr	r3, [r3, #0]
   12fc6:	4618      	mov	r0, r3
   12fc8:	f7fa fc64 	bl	d894 <mp_obj_get_type>
   12fcc:	62b8      	str	r0, [r7, #40]	; 0x28
    mp_int_t splits = -1;
   12fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12fd2:	637b      	str	r3, [r7, #52]	; 0x34
    mp_obj_t sep = mp_const_none;
   12fd4:	4b7b      	ldr	r3, [pc, #492]	; (131c4 <mp_obj_str_split+0x20c>)
   12fd6:	633b      	str	r3, [r7, #48]	; 0x30
    if (n_args > 1) {
   12fd8:	687b      	ldr	r3, [r7, #4]
   12fda:	2b01      	cmp	r3, #1
   12fdc:	d90c      	bls.n	12ff8 <mp_obj_str_split+0x40>
        sep = args[1];
   12fde:	683b      	ldr	r3, [r7, #0]
   12fe0:	685b      	ldr	r3, [r3, #4]
   12fe2:	633b      	str	r3, [r7, #48]	; 0x30
        if (n_args > 2) {
   12fe4:	687b      	ldr	r3, [r7, #4]
   12fe6:	2b02      	cmp	r3, #2
   12fe8:	d906      	bls.n	12ff8 <mp_obj_str_split+0x40>
            splits = mp_obj_get_int(args[2]);
   12fea:	683b      	ldr	r3, [r7, #0]
   12fec:	3308      	adds	r3, #8
   12fee:	681b      	ldr	r3, [r3, #0]
   12ff0:	4618      	mov	r0, r3
   12ff2:	f7fa fe2d 	bl	dc50 <mp_obj_get_int>
   12ff6:	6378      	str	r0, [r7, #52]	; 0x34
        }
    }

    mp_obj_t res = mp_obj_new_list(0, NULL);
   12ff8:	2100      	movs	r1, #0
   12ffa:	2000      	movs	r0, #0
   12ffc:	f7fe fcb6 	bl	1196c <mp_obj_new_list>
   13000:	6278      	str	r0, [r7, #36]	; 0x24
    GET_STR_DATA_LEN(args[0], s, len);
   13002:	683b      	ldr	r3, [r7, #0]
   13004:	681b      	ldr	r3, [r3, #0]
   13006:	4618      	mov	r0, r3
   13008:	f7ff f98e 	bl	12328 <MP_OBJ_IS_QSTR>
   1300c:	4603      	mov	r3, r0
   1300e:	2b00      	cmp	r3, #0
   13010:	d00a      	beq.n	13028 <mp_obj_str_split+0x70>
   13012:	683b      	ldr	r3, [r7, #0]
   13014:	681b      	ldr	r3, [r3, #0]
   13016:	089b      	lsrs	r3, r3, #2
   13018:	f107 0210 	add.w	r2, r7, #16
   1301c:	4611      	mov	r1, r2
   1301e:	4618      	mov	r0, r3
   13020:	f7ee f9c0 	bl	13a4 <qstr_data>
   13024:	62f8      	str	r0, [r7, #44]	; 0x2c
   13026:	e007      	b.n	13038 <mp_obj_str_split+0x80>
   13028:	683b      	ldr	r3, [r7, #0]
   1302a:	681b      	ldr	r3, [r3, #0]
   1302c:	689b      	ldr	r3, [r3, #8]
   1302e:	613b      	str	r3, [r7, #16]
   13030:	683b      	ldr	r3, [r7, #0]
   13032:	681b      	ldr	r3, [r3, #0]
   13034:	68db      	ldr	r3, [r3, #12]
   13036:	62fb      	str	r3, [r7, #44]	; 0x2c
    const byte *top = s + len;
   13038:	693b      	ldr	r3, [r7, #16]
   1303a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1303c:	4413      	add	r3, r2
   1303e:	623b      	str	r3, [r7, #32]

    if (sep == mp_const_none) {
   13040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13042:	4a60      	ldr	r2, [pc, #384]	; (131c4 <mp_obj_str_split+0x20c>)
   13044:	4293      	cmp	r3, r2
   13046:	d167      	bne.n	13118 <mp_obj_str_split+0x160>
        // sep not given, so separate on whitespace

        // Initial whitespace is not counted as split, so we pre-do it
        while (s < top && unichar_isspace(*s)) s++;
   13048:	e002      	b.n	13050 <mp_obj_str_split+0x98>
   1304a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1304c:	3301      	adds	r3, #1
   1304e:	62fb      	str	r3, [r7, #44]	; 0x2c
   13050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13052:	6a3b      	ldr	r3, [r7, #32]
   13054:	429a      	cmp	r2, r3
   13056:	d244      	bcs.n	130e2 <mp_obj_str_split+0x12a>
   13058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1305a:	781b      	ldrb	r3, [r3, #0]
   1305c:	4618      	mov	r0, r3
   1305e:	f7ef fa59 	bl	2514 <unichar_isspace>
   13062:	4603      	mov	r3, r0
   13064:	2b00      	cmp	r3, #0
   13066:	d1f0      	bne.n	1304a <mp_obj_str_split+0x92>
        while (s < top && splits != 0) {
   13068:	e03b      	b.n	130e2 <mp_obj_str_split+0x12a>
            const byte *start = s;
   1306a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1306c:	61fb      	str	r3, [r7, #28]
            while (s < top && !unichar_isspace(*s)) s++;
   1306e:	e002      	b.n	13076 <mp_obj_str_split+0xbe>
   13070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13072:	3301      	adds	r3, #1
   13074:	62fb      	str	r3, [r7, #44]	; 0x2c
   13076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13078:	6a3b      	ldr	r3, [r7, #32]
   1307a:	429a      	cmp	r2, r3
   1307c:	d20a      	bcs.n	13094 <mp_obj_str_split+0xdc>
   1307e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13080:	781b      	ldrb	r3, [r3, #0]
   13082:	4618      	mov	r0, r3
   13084:	f7ef fa46 	bl	2514 <unichar_isspace>
   13088:	4603      	mov	r3, r0
   1308a:	f083 0301 	eor.w	r3, r3, #1
   1308e:	b2db      	uxtb	r3, r3
   13090:	2b00      	cmp	r3, #0
   13092:	d1ed      	bne.n	13070 <mp_obj_str_split+0xb8>
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, start, s - start));
   13094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13096:	69fb      	ldr	r3, [r7, #28]
   13098:	1ad3      	subs	r3, r2, r3
   1309a:	461a      	mov	r2, r3
   1309c:	69f9      	ldr	r1, [r7, #28]
   1309e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   130a0:	f002 f9b4 	bl	1540c <mp_obj_new_str_of_type>
   130a4:	4603      	mov	r3, r0
   130a6:	4619      	mov	r1, r3
   130a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
   130aa:	f7fd ffcd 	bl	11048 <mp_obj_list_append>
            if (s >= top) {
   130ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   130b0:	6a3b      	ldr	r3, [r7, #32]
   130b2:	429a      	cmp	r2, r3
   130b4:	d21d      	bcs.n	130f2 <mp_obj_str_split+0x13a>
                break;
            }
            while (s < top && unichar_isspace(*s)) s++;
   130b6:	e002      	b.n	130be <mp_obj_str_split+0x106>
   130b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   130ba:	3301      	adds	r3, #1
   130bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   130be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   130c0:	6a3b      	ldr	r3, [r7, #32]
   130c2:	429a      	cmp	r2, r3
   130c4:	d207      	bcs.n	130d6 <mp_obj_str_split+0x11e>
   130c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   130c8:	781b      	ldrb	r3, [r3, #0]
   130ca:	4618      	mov	r0, r3
   130cc:	f7ef fa22 	bl	2514 <unichar_isspace>
   130d0:	4603      	mov	r3, r0
   130d2:	2b00      	cmp	r3, #0
   130d4:	d1f0      	bne.n	130b8 <mp_obj_str_split+0x100>
            if (splits > 0) {
   130d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   130d8:	2b00      	cmp	r3, #0
   130da:	dd02      	ble.n	130e2 <mp_obj_str_split+0x12a>
                splits--;
   130dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   130de:	3b01      	subs	r3, #1
   130e0:	637b      	str	r3, [r7, #52]	; 0x34
        while (s < top && splits != 0) {
   130e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   130e4:	6a3b      	ldr	r3, [r7, #32]
   130e6:	429a      	cmp	r2, r3
   130e8:	d204      	bcs.n	130f4 <mp_obj_str_split+0x13c>
   130ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   130ec:	2b00      	cmp	r3, #0
   130ee:	d1bc      	bne.n	1306a <mp_obj_str_split+0xb2>
   130f0:	e000      	b.n	130f4 <mp_obj_str_split+0x13c>
                break;
   130f2:	bf00      	nop
            }
        }

        if (s < top) {
   130f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   130f6:	6a3b      	ldr	r3, [r7, #32]
   130f8:	429a      	cmp	r2, r3
   130fa:	d25d      	bcs.n	131b8 <mp_obj_str_split+0x200>
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, s, top - s));
   130fc:	6a3a      	ldr	r2, [r7, #32]
   130fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13100:	1ad3      	subs	r3, r2, r3
   13102:	461a      	mov	r2, r3
   13104:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   13106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13108:	f002 f980 	bl	1540c <mp_obj_new_str_of_type>
   1310c:	4603      	mov	r3, r0
   1310e:	4619      	mov	r1, r3
   13110:	6a78      	ldr	r0, [r7, #36]	; 0x24
   13112:	f7fd ff99 	bl	11048 <mp_obj_list_append>
   13116:	e04f      	b.n	131b8 <mp_obj_str_split+0x200>
        }

    } else {
        // sep given
        if (mp_obj_get_type(sep) != self_type) {
   13118:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1311a:	f7fa fbbb 	bl	d894 <mp_obj_get_type>
   1311e:	4602      	mov	r2, r0
   13120:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13122:	429a      	cmp	r2, r3
   13124:	d002      	beq.n	1312c <mp_obj_str_split+0x174>
            bad_implicit_conversion(sep);
   13126:	6b38      	ldr	r0, [r7, #48]	; 0x30
   13128:	f002 faf2 	bl	15710 <bad_implicit_conversion>
        }

        size_t sep_len;
        const char *sep_str = mp_obj_str_get_data(sep, &sep_len);
   1312c:	f107 030c 	add.w	r3, r7, #12
   13130:	4619      	mov	r1, r3
   13132:	6b38      	ldr	r0, [r7, #48]	; 0x30
   13134:	f002 fb5c 	bl	157f0 <mp_obj_str_get_data>
   13138:	61b8      	str	r0, [r7, #24]

        if (sep_len == 0) {
   1313a:	68fb      	ldr	r3, [r7, #12]
   1313c:	2b00      	cmp	r3, #0
   1313e:	d102      	bne.n	13146 <mp_obj_str_split+0x18e>
            mp_raise_ValueError("empty separator");
   13140:	4821      	ldr	r0, [pc, #132]	; (131c8 <mp_obj_str_split+0x210>)
   13142:	f7f9 ff2f 	bl	cfa4 <mp_raise_ValueError>
        }

        for (;;) {
            const byte *start = s;
   13146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13148:	617b      	str	r3, [r7, #20]
            for (;;) {
                if (splits == 0 || s + sep_len > top) {
   1314a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1314c:	2b00      	cmp	r3, #0
   1314e:	d005      	beq.n	1315c <mp_obj_str_split+0x1a4>
   13150:	68fb      	ldr	r3, [r7, #12]
   13152:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13154:	441a      	add	r2, r3
   13156:	6a3b      	ldr	r3, [r7, #32]
   13158:	429a      	cmp	r2, r3
   1315a:	d902      	bls.n	13162 <mp_obj_str_split+0x1aa>
                    s = top;
   1315c:	6a3b      	ldr	r3, [r7, #32]
   1315e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
   13160:	e00d      	b.n	1317e <mp_obj_str_split+0x1c6>
                } else if (memcmp(s, sep_str, sep_len) == 0) {
   13162:	68fb      	ldr	r3, [r7, #12]
   13164:	461a      	mov	r2, r3
   13166:	69b9      	ldr	r1, [r7, #24]
   13168:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1316a:	f009 fef9 	bl	1cf60 <memcmp>
   1316e:	4603      	mov	r3, r0
   13170:	2b00      	cmp	r3, #0
   13172:	d003      	beq.n	1317c <mp_obj_str_split+0x1c4>
                    break;
                }
                s++;
   13174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13176:	3301      	adds	r3, #1
   13178:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
   1317a:	e7e6      	b.n	1314a <mp_obj_str_split+0x192>
                    break;
   1317c:	bf00      	nop
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, start, s - start));
   1317e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13180:	697b      	ldr	r3, [r7, #20]
   13182:	1ad3      	subs	r3, r2, r3
   13184:	461a      	mov	r2, r3
   13186:	6979      	ldr	r1, [r7, #20]
   13188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1318a:	f002 f93f 	bl	1540c <mp_obj_new_str_of_type>
   1318e:	4603      	mov	r3, r0
   13190:	4619      	mov	r1, r3
   13192:	6a78      	ldr	r0, [r7, #36]	; 0x24
   13194:	f7fd ff58 	bl	11048 <mp_obj_list_append>
            if (s >= top) {
   13198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1319a:	6a3b      	ldr	r3, [r7, #32]
   1319c:	429a      	cmp	r2, r3
   1319e:	d20a      	bcs.n	131b6 <mp_obj_str_split+0x1fe>
                break;
            }
            s += sep_len;
   131a0:	68fb      	ldr	r3, [r7, #12]
   131a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   131a4:	4413      	add	r3, r2
   131a6:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (splits > 0) {
   131a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   131aa:	2b00      	cmp	r3, #0
   131ac:	ddcb      	ble.n	13146 <mp_obj_str_split+0x18e>
                splits--;
   131ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   131b0:	3b01      	subs	r3, #1
   131b2:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
   131b4:	e7c7      	b.n	13146 <mp_obj_str_split+0x18e>
                break;
   131b6:	bf00      	nop
    }

    return res;
   131b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   131ba:	4618      	mov	r0, r3
   131bc:	3738      	adds	r7, #56	; 0x38
   131be:	46bd      	mov	sp, r7
   131c0:	bd80      	pop	{r7, pc}
   131c2:	bf00      	nop
   131c4:	000234d4 	.word	0x000234d4
   131c8:	00023710 	.word	0x00023710

000131cc <str_rsplit>:
    return res;
}
MP_DEFINE_CONST_FUN_OBJ_KW(str_splitlines_obj, 1, str_splitlines);
#endif

STATIC mp_obj_t str_rsplit(size_t n_args, const mp_obj_t *args) {
   131cc:	b590      	push	{r4, r7, lr}
   131ce:	b091      	sub	sp, #68	; 0x44
   131d0:	af00      	add	r7, sp, #0
   131d2:	6078      	str	r0, [r7, #4]
   131d4:	6039      	str	r1, [r7, #0]
    if (n_args < 3) {
   131d6:	687b      	ldr	r3, [r7, #4]
   131d8:	2b02      	cmp	r3, #2
   131da:	d805      	bhi.n	131e8 <str_rsplit+0x1c>
        // If we don't have split limit, it doesn't matter from which side
        // we split.
        return mp_obj_str_split(n_args, args);
   131dc:	6839      	ldr	r1, [r7, #0]
   131de:	6878      	ldr	r0, [r7, #4]
   131e0:	f7ff feea 	bl	12fb8 <mp_obj_str_split>
   131e4:	4603      	mov	r3, r0
   131e6:	e0cc      	b.n	13382 <str_rsplit+0x1b6>
    }
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   131e8:	683b      	ldr	r3, [r7, #0]
   131ea:	681b      	ldr	r3, [r3, #0]
   131ec:	4618      	mov	r0, r3
   131ee:	f7fa fb51 	bl	d894 <mp_obj_get_type>
   131f2:	62f8      	str	r0, [r7, #44]	; 0x2c
    mp_obj_t sep = args[1];
   131f4:	683b      	ldr	r3, [r7, #0]
   131f6:	685b      	ldr	r3, [r3, #4]
   131f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_STR_DATA_LEN(args[0], s, len);
   131fa:	683b      	ldr	r3, [r7, #0]
   131fc:	681b      	ldr	r3, [r3, #0]
   131fe:	4618      	mov	r0, r3
   13200:	f7ff f892 	bl	12328 <MP_OBJ_IS_QSTR>
   13204:	4603      	mov	r3, r0
   13206:	2b00      	cmp	r3, #0
   13208:	d00a      	beq.n	13220 <str_rsplit+0x54>
   1320a:	683b      	ldr	r3, [r7, #0]
   1320c:	681b      	ldr	r3, [r3, #0]
   1320e:	089b      	lsrs	r3, r3, #2
   13210:	f107 0210 	add.w	r2, r7, #16
   13214:	4611      	mov	r1, r2
   13216:	4618      	mov	r0, r3
   13218:	f7ee f8c4 	bl	13a4 <qstr_data>
   1321c:	63f8      	str	r0, [r7, #60]	; 0x3c
   1321e:	e007      	b.n	13230 <str_rsplit+0x64>
   13220:	683b      	ldr	r3, [r7, #0]
   13222:	681b      	ldr	r3, [r3, #0]
   13224:	689b      	ldr	r3, [r3, #8]
   13226:	613b      	str	r3, [r7, #16]
   13228:	683b      	ldr	r3, [r7, #0]
   1322a:	681b      	ldr	r3, [r3, #0]
   1322c:	68db      	ldr	r3, [r3, #12]
   1322e:	63fb      	str	r3, [r7, #60]	; 0x3c

    mp_int_t splits = mp_obj_get_int(args[2]);
   13230:	683b      	ldr	r3, [r7, #0]
   13232:	3308      	adds	r3, #8
   13234:	681b      	ldr	r3, [r3, #0]
   13236:	4618      	mov	r0, r3
   13238:	f7fa fd0a 	bl	dc50 <mp_obj_get_int>
   1323c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (splits < 0) {
   1323e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13240:	2b00      	cmp	r3, #0
   13242:	da05      	bge.n	13250 <str_rsplit+0x84>
        // Negative limit means no limit, so delegate to split().
        return mp_obj_str_split(n_args, args);
   13244:	6839      	ldr	r1, [r7, #0]
   13246:	6878      	ldr	r0, [r7, #4]
   13248:	f7ff feb6 	bl	12fb8 <mp_obj_str_split>
   1324c:	4603      	mov	r3, r0
   1324e:	e098      	b.n	13382 <str_rsplit+0x1b6>
    }

    mp_int_t org_splits = splits;
   13250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13252:	627b      	str	r3, [r7, #36]	; 0x24
    // Preallocate list to the max expected # of elements, as we
    // will fill it from the end.
    mp_obj_list_t *res = MP_OBJ_TO_PTR(mp_obj_new_list(splits + 1, NULL));
   13254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13256:	3301      	adds	r3, #1
   13258:	2100      	movs	r1, #0
   1325a:	4618      	mov	r0, r3
   1325c:	f7fe fb86 	bl	1196c <mp_obj_new_list>
   13260:	6238      	str	r0, [r7, #32]
    mp_int_t idx = splits;
   13262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13264:	637b      	str	r3, [r7, #52]	; 0x34

    if (sep == mp_const_none) {
   13266:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13268:	4a48      	ldr	r2, [pc, #288]	; (1338c <str_rsplit+0x1c0>)
   1326a:	4293      	cmp	r3, r2
   1326c:	d102      	bne.n	13274 <str_rsplit+0xa8>
        mp_raise_NotImplementedError("rsplit(None,n)");
   1326e:	4848      	ldr	r0, [pc, #288]	; (13390 <str_rsplit+0x1c4>)
   13270:	f7f9 febe 	bl	cff0 <mp_raise_NotImplementedError>
    } else {
        size_t sep_len;
        const char *sep_str = mp_obj_str_get_data(sep, &sep_len);
   13274:	f107 030c 	add.w	r3, r7, #12
   13278:	4619      	mov	r1, r3
   1327a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1327c:	f002 fab8 	bl	157f0 <mp_obj_str_get_data>
   13280:	61f8      	str	r0, [r7, #28]

        if (sep_len == 0) {
   13282:	68fb      	ldr	r3, [r7, #12]
   13284:	2b00      	cmp	r3, #0
   13286:	d102      	bne.n	1328e <str_rsplit+0xc2>
            mp_raise_ValueError("empty separator");
   13288:	4842      	ldr	r0, [pc, #264]	; (13394 <str_rsplit+0x1c8>)
   1328a:	f7f9 fe8b 	bl	cfa4 <mp_raise_ValueError>
        }

        const byte *beg = s;
   1328e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13290:	61bb      	str	r3, [r7, #24]
        const byte *last = s + len;
   13292:	693b      	ldr	r3, [r7, #16]
   13294:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   13296:	4413      	add	r3, r2
   13298:	633b      	str	r3, [r7, #48]	; 0x30
        for (;;) {
            s = last - sep_len;
   1329a:	68fb      	ldr	r3, [r7, #12]
   1329c:	425b      	negs	r3, r3
   1329e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   132a0:	4413      	add	r3, r2
   132a2:	63fb      	str	r3, [r7, #60]	; 0x3c
            for (;;) {
                if (splits == 0 || s < beg) {
   132a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   132a6:	2b00      	cmp	r3, #0
   132a8:	d011      	beq.n	132ce <str_rsplit+0x102>
   132aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   132ac:	69bb      	ldr	r3, [r7, #24]
   132ae:	429a      	cmp	r2, r3
   132b0:	d30d      	bcc.n	132ce <str_rsplit+0x102>
                    break;
                } else if (memcmp(s, sep_str, sep_len) == 0) {
   132b2:	68fb      	ldr	r3, [r7, #12]
   132b4:	461a      	mov	r2, r3
   132b6:	69f9      	ldr	r1, [r7, #28]
   132b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   132ba:	f009 fe51 	bl	1cf60 <memcmp>
   132be:	4603      	mov	r3, r0
   132c0:	2b00      	cmp	r3, #0
   132c2:	d003      	beq.n	132cc <str_rsplit+0x100>
                    break;
                }
                s--;
   132c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   132c6:	3b01      	subs	r3, #1
   132c8:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
   132ca:	e7eb      	b.n	132a4 <str_rsplit+0xd8>
                    break;
   132cc:	bf00      	nop
            if (s < beg || splits == 0) {
   132ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   132d0:	69bb      	ldr	r3, [r7, #24]
   132d2:	429a      	cmp	r2, r3
   132d4:	d302      	bcc.n	132dc <str_rsplit+0x110>
   132d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   132d8:	2b00      	cmp	r3, #0
   132da:	d113      	bne.n	13304 <str_rsplit+0x138>
                res->items[idx] = mp_obj_new_str_of_type(self_type, beg, last - beg);
   132dc:	6a3b      	ldr	r3, [r7, #32]
   132de:	68da      	ldr	r2, [r3, #12]
   132e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   132e2:	009b      	lsls	r3, r3, #2
   132e4:	18d4      	adds	r4, r2, r3
   132e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   132e8:	69bb      	ldr	r3, [r7, #24]
   132ea:	1ad3      	subs	r3, r2, r3
   132ec:	461a      	mov	r2, r3
   132ee:	69b9      	ldr	r1, [r7, #24]
   132f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   132f2:	f002 f88b 	bl	1540c <mp_obj_new_str_of_type>
   132f6:	4603      	mov	r3, r0
   132f8:	6023      	str	r3, [r4, #0]
                break;
   132fa:	bf00      	nop
            }
            res->items[idx--] = mp_obj_new_str_of_type(self_type, s + sep_len, last - s - sep_len);
            last = s;
            splits--;
        }
        if (idx != 0) {
   132fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   132fe:	2b00      	cmp	r3, #0
   13300:	d03e      	beq.n	13380 <str_rsplit+0x1b4>
   13302:	e01b      	b.n	1333c <str_rsplit+0x170>
            res->items[idx--] = mp_obj_new_str_of_type(self_type, s + sep_len, last - s - sep_len);
   13304:	6a3b      	ldr	r3, [r7, #32]
   13306:	68da      	ldr	r2, [r3, #12]
   13308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1330a:	1e59      	subs	r1, r3, #1
   1330c:	6379      	str	r1, [r7, #52]	; 0x34
   1330e:	009b      	lsls	r3, r3, #2
   13310:	18d4      	adds	r4, r2, r3
   13312:	68fb      	ldr	r3, [r7, #12]
   13314:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   13316:	18d1      	adds	r1, r2, r3
   13318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1331a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1331c:	1ad3      	subs	r3, r2, r3
   1331e:	461a      	mov	r2, r3
   13320:	68fb      	ldr	r3, [r7, #12]
   13322:	1ad3      	subs	r3, r2, r3
   13324:	461a      	mov	r2, r3
   13326:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   13328:	f002 f870 	bl	1540c <mp_obj_new_str_of_type>
   1332c:	4603      	mov	r3, r0
   1332e:	6023      	str	r3, [r4, #0]
            last = s;
   13330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13332:	633b      	str	r3, [r7, #48]	; 0x30
            splits--;
   13334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13336:	3b01      	subs	r3, #1
   13338:	63bb      	str	r3, [r7, #56]	; 0x38
        }
   1333a:	e7ae      	b.n	1329a <str_rsplit+0xce>
            // We split less parts than split limit, now go cleanup surplus
            size_t used = org_splits + 1 - idx;
   1333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1333e:	1c5a      	adds	r2, r3, #1
   13340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13342:	1ad3      	subs	r3, r2, r3
   13344:	617b      	str	r3, [r7, #20]
            memmove(res->items, &res->items[idx], used * sizeof(mp_obj_t));
   13346:	6a3b      	ldr	r3, [r7, #32]
   13348:	68d8      	ldr	r0, [r3, #12]
   1334a:	6a3b      	ldr	r3, [r7, #32]
   1334c:	68da      	ldr	r2, [r3, #12]
   1334e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13350:	009b      	lsls	r3, r3, #2
   13352:	18d1      	adds	r1, r2, r3
   13354:	697b      	ldr	r3, [r7, #20]
   13356:	009b      	lsls	r3, r3, #2
   13358:	461a      	mov	r2, r3
   1335a:	f009 fd7f 	bl	1ce5c <memmove>
            mp_seq_clear(res->items, used, res->alloc, sizeof(*res->items));
   1335e:	6a3b      	ldr	r3, [r7, #32]
   13360:	68da      	ldr	r2, [r3, #12]
   13362:	697b      	ldr	r3, [r7, #20]
   13364:	009b      	lsls	r3, r3, #2
   13366:	18d0      	adds	r0, r2, r3
   13368:	6a3b      	ldr	r3, [r7, #32]
   1336a:	685a      	ldr	r2, [r3, #4]
   1336c:	697b      	ldr	r3, [r7, #20]
   1336e:	1ad3      	subs	r3, r2, r3
   13370:	009b      	lsls	r3, r3, #2
   13372:	461a      	mov	r2, r3
   13374:	2100      	movs	r1, #0
   13376:	f009 fda7 	bl	1cec8 <memset>
            res->len = used;
   1337a:	6a3b      	ldr	r3, [r7, #32]
   1337c:	697a      	ldr	r2, [r7, #20]
   1337e:	609a      	str	r2, [r3, #8]
        }
    }

    return MP_OBJ_FROM_PTR(res);
   13380:	6a3b      	ldr	r3, [r7, #32]
}
   13382:	4618      	mov	r0, r3
   13384:	3744      	adds	r7, #68	; 0x44
   13386:	46bd      	mov	sp, r7
   13388:	bd90      	pop	{r4, r7, pc}
   1338a:	bf00      	nop
   1338c:	000234d4 	.word	0x000234d4
   13390:	0002372c 	.word	0x0002372c
   13394:	00023710 	.word	0x00023710

00013398 <str_finder>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_rsplit_obj, 1, 3, str_rsplit);

STATIC mp_obj_t str_finder(size_t n_args, const mp_obj_t *args, int direction, bool is_index) {
   13398:	b580      	push	{r7, lr}
   1339a:	b08e      	sub	sp, #56	; 0x38
   1339c:	af02      	add	r7, sp, #8
   1339e:	60f8      	str	r0, [r7, #12]
   133a0:	60b9      	str	r1, [r7, #8]
   133a2:	607a      	str	r2, [r7, #4]
   133a4:	70fb      	strb	r3, [r7, #3]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   133a6:	68bb      	ldr	r3, [r7, #8]
   133a8:	681b      	ldr	r3, [r3, #0]
   133aa:	4618      	mov	r0, r3
   133ac:	f7fa fa72 	bl	d894 <mp_obj_get_type>
   133b0:	61f8      	str	r0, [r7, #28]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   133b2:	68bb      	ldr	r3, [r7, #8]
   133b4:	681b      	ldr	r3, [r3, #0]
   133b6:	4618      	mov	r0, r3
   133b8:	f7fe ffb6 	bl	12328 <MP_OBJ_IS_QSTR>
   133bc:	4603      	mov	r3, r0
   133be:	f083 0301 	eor.w	r3, r3, #1
   133c2:	b2db      	uxtb	r3, r3
   133c4:	2b00      	cmp	r3, #0
   133c6:	d018      	beq.n	133fa <str_finder+0x62>
   133c8:	68bb      	ldr	r3, [r7, #8]
   133ca:	681b      	ldr	r3, [r3, #0]
   133cc:	4618      	mov	r0, r3
   133ce:	f7fe ffbd 	bl	1234c <MP_OBJ_IS_OBJ>
   133d2:	4603      	mov	r3, r0
   133d4:	f083 0301 	eor.w	r3, r3, #1
   133d8:	b2db      	uxtb	r3, r3
   133da:	2b00      	cmp	r3, #0
   133dc:	d106      	bne.n	133ec <str_finder+0x54>
   133de:	68bb      	ldr	r3, [r7, #8]
   133e0:	681b      	ldr	r3, [r3, #0]
   133e2:	681b      	ldr	r3, [r3, #0]
   133e4:	699b      	ldr	r3, [r3, #24]
   133e6:	4a56      	ldr	r2, [pc, #344]	; (13540 <str_finder+0x1a8>)
   133e8:	4293      	cmp	r3, r2
   133ea:	d006      	beq.n	133fa <str_finder+0x62>
   133ec:	4b55      	ldr	r3, [pc, #340]	; (13544 <str_finder+0x1ac>)
   133ee:	4a56      	ldr	r2, [pc, #344]	; (13548 <str_finder+0x1b0>)
   133f0:	f240 21b1 	movw	r1, #689	; 0x2b1
   133f4:	4855      	ldr	r0, [pc, #340]	; (1354c <str_finder+0x1b4>)
   133f6:	f008 f9c5 	bl	1b784 <__assert_func>

    // check argument type
    if (mp_obj_get_type(args[1]) != self_type) {
   133fa:	68bb      	ldr	r3, [r7, #8]
   133fc:	3304      	adds	r3, #4
   133fe:	681b      	ldr	r3, [r3, #0]
   13400:	4618      	mov	r0, r3
   13402:	f7fa fa47 	bl	d894 <mp_obj_get_type>
   13406:	4602      	mov	r2, r0
   13408:	69fb      	ldr	r3, [r7, #28]
   1340a:	429a      	cmp	r2, r3
   1340c:	d005      	beq.n	1341a <str_finder+0x82>
        bad_implicit_conversion(args[1]);
   1340e:	68bb      	ldr	r3, [r7, #8]
   13410:	3304      	adds	r3, #4
   13412:	681b      	ldr	r3, [r3, #0]
   13414:	4618      	mov	r0, r3
   13416:	f002 f97b 	bl	15710 <bad_implicit_conversion>
    }

    GET_STR_DATA_LEN(args[0], haystack, haystack_len);
   1341a:	68bb      	ldr	r3, [r7, #8]
   1341c:	681b      	ldr	r3, [r3, #0]
   1341e:	4618      	mov	r0, r3
   13420:	f7fe ff82 	bl	12328 <MP_OBJ_IS_QSTR>
   13424:	4603      	mov	r3, r0
   13426:	2b00      	cmp	r3, #0
   13428:	d00a      	beq.n	13440 <str_finder+0xa8>
   1342a:	68bb      	ldr	r3, [r7, #8]
   1342c:	681b      	ldr	r3, [r3, #0]
   1342e:	089b      	lsrs	r3, r3, #2
   13430:	f107 0214 	add.w	r2, r7, #20
   13434:	4611      	mov	r1, r2
   13436:	4618      	mov	r0, r3
   13438:	f7ed ffb4 	bl	13a4 <qstr_data>
   1343c:	62f8      	str	r0, [r7, #44]	; 0x2c
   1343e:	e007      	b.n	13450 <str_finder+0xb8>
   13440:	68bb      	ldr	r3, [r7, #8]
   13442:	681b      	ldr	r3, [r3, #0]
   13444:	689b      	ldr	r3, [r3, #8]
   13446:	617b      	str	r3, [r7, #20]
   13448:	68bb      	ldr	r3, [r7, #8]
   1344a:	681b      	ldr	r3, [r3, #0]
   1344c:	68db      	ldr	r3, [r3, #12]
   1344e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_STR_DATA_LEN(args[1], needle, needle_len);
   13450:	68bb      	ldr	r3, [r7, #8]
   13452:	3304      	adds	r3, #4
   13454:	681b      	ldr	r3, [r3, #0]
   13456:	4618      	mov	r0, r3
   13458:	f7fe ff66 	bl	12328 <MP_OBJ_IS_QSTR>
   1345c:	4603      	mov	r3, r0
   1345e:	2b00      	cmp	r3, #0
   13460:	d00b      	beq.n	1347a <str_finder+0xe2>
   13462:	68bb      	ldr	r3, [r7, #8]
   13464:	3304      	adds	r3, #4
   13466:	681b      	ldr	r3, [r3, #0]
   13468:	089b      	lsrs	r3, r3, #2
   1346a:	f107 0210 	add.w	r2, r7, #16
   1346e:	4611      	mov	r1, r2
   13470:	4618      	mov	r0, r3
   13472:	f7ed ff97 	bl	13a4 <qstr_data>
   13476:	62b8      	str	r0, [r7, #40]	; 0x28
   13478:	e009      	b.n	1348e <str_finder+0xf6>
   1347a:	68bb      	ldr	r3, [r7, #8]
   1347c:	3304      	adds	r3, #4
   1347e:	681b      	ldr	r3, [r3, #0]
   13480:	689b      	ldr	r3, [r3, #8]
   13482:	613b      	str	r3, [r7, #16]
   13484:	68bb      	ldr	r3, [r7, #8]
   13486:	3304      	adds	r3, #4
   13488:	681b      	ldr	r3, [r3, #0]
   1348a:	68db      	ldr	r3, [r3, #12]
   1348c:	62bb      	str	r3, [r7, #40]	; 0x28

    const byte *start = haystack;
   1348e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13490:	627b      	str	r3, [r7, #36]	; 0x24
    const byte *end = haystack + haystack_len;
   13492:	697b      	ldr	r3, [r7, #20]
   13494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13496:	4413      	add	r3, r2
   13498:	623b      	str	r3, [r7, #32]
    if (n_args >= 3 && args[2] != mp_const_none) {
   1349a:	68fb      	ldr	r3, [r7, #12]
   1349c:	2b02      	cmp	r3, #2
   1349e:	d911      	bls.n	134c4 <str_finder+0x12c>
   134a0:	68bb      	ldr	r3, [r7, #8]
   134a2:	3308      	adds	r3, #8
   134a4:	681b      	ldr	r3, [r3, #0]
   134a6:	4a2a      	ldr	r2, [pc, #168]	; (13550 <str_finder+0x1b8>)
   134a8:	4293      	cmp	r3, r2
   134aa:	d00b      	beq.n	134c4 <str_finder+0x12c>
        start = str_index_to_ptr(self_type, haystack, haystack_len, args[2], true);
   134ac:	697a      	ldr	r2, [r7, #20]
   134ae:	68bb      	ldr	r3, [r7, #8]
   134b0:	3308      	adds	r3, #8
   134b2:	6819      	ldr	r1, [r3, #0]
   134b4:	2301      	movs	r3, #1
   134b6:	9300      	str	r3, [sp, #0]
   134b8:	460b      	mov	r3, r1
   134ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   134bc:	69f8      	ldr	r0, [r7, #28]
   134be:	f7ff fc05 	bl	12ccc <str_index_to_ptr>
   134c2:	6278      	str	r0, [r7, #36]	; 0x24
    }
    if (n_args >= 4 && args[3] != mp_const_none) {
   134c4:	68fb      	ldr	r3, [r7, #12]
   134c6:	2b03      	cmp	r3, #3
   134c8:	d911      	bls.n	134ee <str_finder+0x156>
   134ca:	68bb      	ldr	r3, [r7, #8]
   134cc:	330c      	adds	r3, #12
   134ce:	681b      	ldr	r3, [r3, #0]
   134d0:	4a1f      	ldr	r2, [pc, #124]	; (13550 <str_finder+0x1b8>)
   134d2:	4293      	cmp	r3, r2
   134d4:	d00b      	beq.n	134ee <str_finder+0x156>
        end = str_index_to_ptr(self_type, haystack, haystack_len, args[3], true);
   134d6:	697a      	ldr	r2, [r7, #20]
   134d8:	68bb      	ldr	r3, [r7, #8]
   134da:	330c      	adds	r3, #12
   134dc:	6819      	ldr	r1, [r3, #0]
   134de:	2301      	movs	r3, #1
   134e0:	9300      	str	r3, [sp, #0]
   134e2:	460b      	mov	r3, r1
   134e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   134e6:	69f8      	ldr	r0, [r7, #28]
   134e8:	f7ff fbf0 	bl	12ccc <str_index_to_ptr>
   134ec:	6238      	str	r0, [r7, #32]
    }

    if (end < start) {
   134ee:	6a3a      	ldr	r2, [r7, #32]
   134f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   134f2:	429a      	cmp	r2, r3
   134f4:	d310      	bcc.n	13518 <str_finder+0x180>
        goto out_error;
    }

    const byte *p = find_subbytes(start, end - start, needle, needle_len, direction);
   134f6:	6a3a      	ldr	r2, [r7, #32]
   134f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   134fa:	1ad3      	subs	r3, r2, r3
   134fc:	4619      	mov	r1, r3
   134fe:	693a      	ldr	r2, [r7, #16]
   13500:	687b      	ldr	r3, [r7, #4]
   13502:	9300      	str	r3, [sp, #0]
   13504:	4613      	mov	r3, r2
   13506:	6aba      	ldr	r2, [r7, #40]	; 0x28
   13508:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1350a:	f7ff fa29 	bl	12960 <find_subbytes>
   1350e:	61b8      	str	r0, [r7, #24]
    if (p == NULL) {
   13510:	69bb      	ldr	r3, [r7, #24]
   13512:	2b00      	cmp	r3, #0
   13514:	d10a      	bne.n	1352c <str_finder+0x194>
   13516:	e000      	b.n	1351a <str_finder+0x182>
        goto out_error;
   13518:	bf00      	nop
    out_error:
        // not found
        if (is_index) {
   1351a:	78fb      	ldrb	r3, [r7, #3]
   1351c:	2b00      	cmp	r3, #0
   1351e:	d002      	beq.n	13526 <str_finder+0x18e>
            mp_raise_ValueError("substring not found");
   13520:	480c      	ldr	r0, [pc, #48]	; (13554 <str_finder+0x1bc>)
   13522:	f7f9 fd3f 	bl	cfa4 <mp_raise_ValueError>
        } else {
            return MP_OBJ_NEW_SMALL_INT(-1);
   13526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1352a:	e005      	b.n	13538 <str_finder+0x1a0>
        #if MICROPY_PY_BUILTINS_STR_UNICODE
        if (self_type == &mp_type_str) {
            return MP_OBJ_NEW_SMALL_INT(utf8_ptr_to_index(haystack, p));
        }
        #endif
        return MP_OBJ_NEW_SMALL_INT(p - haystack);
   1352c:	69ba      	ldr	r2, [r7, #24]
   1352e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13530:	1ad3      	subs	r3, r2, r3
   13532:	005b      	lsls	r3, r3, #1
   13534:	f043 0301 	orr.w	r3, r3, #1
    }
}
   13538:	4618      	mov	r0, r3
   1353a:	3730      	adds	r7, #48	; 0x30
   1353c:	46bd      	mov	sp, r7
   1353e:	bd80      	pop	{r7, pc}
   13540:	000129d5 	.word	0x000129d5
   13544:	00023748 	.word	0x00023748
   13548:	00023c20 	.word	0x00023c20
   1354c:	000236ac 	.word	0x000236ac
   13550:	000234d4 	.word	0x000234d4
   13554:	000237d0 	.word	0x000237d0

00013558 <str_find>:

STATIC mp_obj_t str_find(size_t n_args, const mp_obj_t *args) {
   13558:	b580      	push	{r7, lr}
   1355a:	b082      	sub	sp, #8
   1355c:	af00      	add	r7, sp, #0
   1355e:	6078      	str	r0, [r7, #4]
   13560:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, 1, false);
   13562:	2300      	movs	r3, #0
   13564:	2201      	movs	r2, #1
   13566:	6839      	ldr	r1, [r7, #0]
   13568:	6878      	ldr	r0, [r7, #4]
   1356a:	f7ff ff15 	bl	13398 <str_finder>
   1356e:	4603      	mov	r3, r0
}
   13570:	4618      	mov	r0, r3
   13572:	3708      	adds	r7, #8
   13574:	46bd      	mov	sp, r7
   13576:	bd80      	pop	{r7, pc}

00013578 <str_rfind>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_find_obj, 2, 4, str_find);

STATIC mp_obj_t str_rfind(size_t n_args, const mp_obj_t *args) {
   13578:	b580      	push	{r7, lr}
   1357a:	b082      	sub	sp, #8
   1357c:	af00      	add	r7, sp, #0
   1357e:	6078      	str	r0, [r7, #4]
   13580:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, -1, false);
   13582:	2300      	movs	r3, #0
   13584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13588:	6839      	ldr	r1, [r7, #0]
   1358a:	6878      	ldr	r0, [r7, #4]
   1358c:	f7ff ff04 	bl	13398 <str_finder>
   13590:	4603      	mov	r3, r0
}
   13592:	4618      	mov	r0, r3
   13594:	3708      	adds	r7, #8
   13596:	46bd      	mov	sp, r7
   13598:	bd80      	pop	{r7, pc}
   1359a:	bf00      	nop

0001359c <str_index>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_rfind_obj, 2, 4, str_rfind);

STATIC mp_obj_t str_index(size_t n_args, const mp_obj_t *args) {
   1359c:	b580      	push	{r7, lr}
   1359e:	b082      	sub	sp, #8
   135a0:	af00      	add	r7, sp, #0
   135a2:	6078      	str	r0, [r7, #4]
   135a4:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, 1, true);
   135a6:	2301      	movs	r3, #1
   135a8:	2201      	movs	r2, #1
   135aa:	6839      	ldr	r1, [r7, #0]
   135ac:	6878      	ldr	r0, [r7, #4]
   135ae:	f7ff fef3 	bl	13398 <str_finder>
   135b2:	4603      	mov	r3, r0
}
   135b4:	4618      	mov	r0, r3
   135b6:	3708      	adds	r7, #8
   135b8:	46bd      	mov	sp, r7
   135ba:	bd80      	pop	{r7, pc}

000135bc <str_rindex>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_index_obj, 2, 4, str_index);

STATIC mp_obj_t str_rindex(size_t n_args, const mp_obj_t *args) {
   135bc:	b580      	push	{r7, lr}
   135be:	b082      	sub	sp, #8
   135c0:	af00      	add	r7, sp, #0
   135c2:	6078      	str	r0, [r7, #4]
   135c4:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, -1, true);
   135c6:	2301      	movs	r3, #1
   135c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   135cc:	6839      	ldr	r1, [r7, #0]
   135ce:	6878      	ldr	r0, [r7, #4]
   135d0:	f7ff fee2 	bl	13398 <str_finder>
   135d4:	4603      	mov	r3, r0
}
   135d6:	4618      	mov	r0, r3
   135d8:	3708      	adds	r7, #8
   135da:	46bd      	mov	sp, r7
   135dc:	bd80      	pop	{r7, pc}
   135de:	bf00      	nop

000135e0 <str_startswith>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_rindex_obj, 2, 4, str_rindex);

// TODO: (Much) more variety in args
STATIC mp_obj_t str_startswith(size_t n_args, const mp_obj_t *args) {
   135e0:	b580      	push	{r7, lr}
   135e2:	b08a      	sub	sp, #40	; 0x28
   135e4:	af02      	add	r7, sp, #8
   135e6:	6078      	str	r0, [r7, #4]
   135e8:	6039      	str	r1, [r7, #0]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   135ea:	683b      	ldr	r3, [r7, #0]
   135ec:	681b      	ldr	r3, [r3, #0]
   135ee:	4618      	mov	r0, r3
   135f0:	f7fa f950 	bl	d894 <mp_obj_get_type>
   135f4:	6178      	str	r0, [r7, #20]
    GET_STR_DATA_LEN(args[0], str, str_len);
   135f6:	683b      	ldr	r3, [r7, #0]
   135f8:	681b      	ldr	r3, [r3, #0]
   135fa:	4618      	mov	r0, r3
   135fc:	f7fe fe94 	bl	12328 <MP_OBJ_IS_QSTR>
   13600:	4603      	mov	r3, r0
   13602:	2b00      	cmp	r3, #0
   13604:	d00a      	beq.n	1361c <str_startswith+0x3c>
   13606:	683b      	ldr	r3, [r7, #0]
   13608:	681b      	ldr	r3, [r3, #0]
   1360a:	089b      	lsrs	r3, r3, #2
   1360c:	f107 020c 	add.w	r2, r7, #12
   13610:	4611      	mov	r1, r2
   13612:	4618      	mov	r0, r3
   13614:	f7ed fec6 	bl	13a4 <qstr_data>
   13618:	61f8      	str	r0, [r7, #28]
   1361a:	e007      	b.n	1362c <str_startswith+0x4c>
   1361c:	683b      	ldr	r3, [r7, #0]
   1361e:	681b      	ldr	r3, [r3, #0]
   13620:	689b      	ldr	r3, [r3, #8]
   13622:	60fb      	str	r3, [r7, #12]
   13624:	683b      	ldr	r3, [r7, #0]
   13626:	681b      	ldr	r3, [r3, #0]
   13628:	68db      	ldr	r3, [r3, #12]
   1362a:	61fb      	str	r3, [r7, #28]
    size_t prefix_len;
    const char *prefix = mp_obj_str_get_data(args[1], &prefix_len);
   1362c:	683b      	ldr	r3, [r7, #0]
   1362e:	3304      	adds	r3, #4
   13630:	681b      	ldr	r3, [r3, #0]
   13632:	f107 0208 	add.w	r2, r7, #8
   13636:	4611      	mov	r1, r2
   13638:	4618      	mov	r0, r3
   1363a:	f002 f8d9 	bl	157f0 <mp_obj_str_get_data>
   1363e:	6138      	str	r0, [r7, #16]
    const byte *start = str;
   13640:	69fb      	ldr	r3, [r7, #28]
   13642:	61bb      	str	r3, [r7, #24]
    if (n_args > 2) {
   13644:	687b      	ldr	r3, [r7, #4]
   13646:	2b02      	cmp	r3, #2
   13648:	d90b      	bls.n	13662 <str_startswith+0x82>
        start = str_index_to_ptr(self_type, str, str_len, args[2], true);
   1364a:	68fa      	ldr	r2, [r7, #12]
   1364c:	683b      	ldr	r3, [r7, #0]
   1364e:	3308      	adds	r3, #8
   13650:	6819      	ldr	r1, [r3, #0]
   13652:	2301      	movs	r3, #1
   13654:	9300      	str	r3, [sp, #0]
   13656:	460b      	mov	r3, r1
   13658:	69f9      	ldr	r1, [r7, #28]
   1365a:	6978      	ldr	r0, [r7, #20]
   1365c:	f7ff fb36 	bl	12ccc <str_index_to_ptr>
   13660:	61b8      	str	r0, [r7, #24]
    }
    if (prefix_len + (start - str) > str_len) {
   13662:	69ba      	ldr	r2, [r7, #24]
   13664:	69fb      	ldr	r3, [r7, #28]
   13666:	1ad3      	subs	r3, r2, r3
   13668:	461a      	mov	r2, r3
   1366a:	68bb      	ldr	r3, [r7, #8]
   1366c:	441a      	add	r2, r3
   1366e:	68fb      	ldr	r3, [r7, #12]
   13670:	429a      	cmp	r2, r3
   13672:	d901      	bls.n	13678 <str_startswith+0x98>
        return mp_const_false;
   13674:	4b0a      	ldr	r3, [pc, #40]	; (136a0 <str_startswith+0xc0>)
   13676:	e00f      	b.n	13698 <str_startswith+0xb8>
    }
    return mp_obj_new_bool(memcmp(start, prefix, prefix_len) == 0);
   13678:	68bb      	ldr	r3, [r7, #8]
   1367a:	461a      	mov	r2, r3
   1367c:	6939      	ldr	r1, [r7, #16]
   1367e:	69b8      	ldr	r0, [r7, #24]
   13680:	f009 fc6e 	bl	1cf60 <memcmp>
   13684:	4603      	mov	r3, r0
   13686:	2b00      	cmp	r3, #0
   13688:	bf0c      	ite	eq
   1368a:	2301      	moveq	r3, #1
   1368c:	2300      	movne	r3, #0
   1368e:	b2db      	uxtb	r3, r3
   13690:	4618      	mov	r0, r3
   13692:	f7fe fe6d 	bl	12370 <mp_obj_new_bool>
   13696:	4603      	mov	r3, r0
}
   13698:	4618      	mov	r0, r3
   1369a:	3720      	adds	r7, #32
   1369c:	46bd      	mov	sp, r7
   1369e:	bd80      	pop	{r7, pc}
   136a0:	00021c58 	.word	0x00021c58

000136a4 <str_endswith>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_startswith_obj, 2, 3, str_startswith);

STATIC mp_obj_t str_endswith(size_t n_args, const mp_obj_t *args) {
   136a4:	b580      	push	{r7, lr}
   136a6:	b086      	sub	sp, #24
   136a8:	af00      	add	r7, sp, #0
   136aa:	6078      	str	r0, [r7, #4]
   136ac:	6039      	str	r1, [r7, #0]
    GET_STR_DATA_LEN(args[0], str, str_len);
   136ae:	683b      	ldr	r3, [r7, #0]
   136b0:	681b      	ldr	r3, [r3, #0]
   136b2:	4618      	mov	r0, r3
   136b4:	f7fe fe38 	bl	12328 <MP_OBJ_IS_QSTR>
   136b8:	4603      	mov	r3, r0
   136ba:	2b00      	cmp	r3, #0
   136bc:	d00a      	beq.n	136d4 <str_endswith+0x30>
   136be:	683b      	ldr	r3, [r7, #0]
   136c0:	681b      	ldr	r3, [r3, #0]
   136c2:	089b      	lsrs	r3, r3, #2
   136c4:	f107 020c 	add.w	r2, r7, #12
   136c8:	4611      	mov	r1, r2
   136ca:	4618      	mov	r0, r3
   136cc:	f7ed fe6a 	bl	13a4 <qstr_data>
   136d0:	6178      	str	r0, [r7, #20]
   136d2:	e007      	b.n	136e4 <str_endswith+0x40>
   136d4:	683b      	ldr	r3, [r7, #0]
   136d6:	681b      	ldr	r3, [r3, #0]
   136d8:	689b      	ldr	r3, [r3, #8]
   136da:	60fb      	str	r3, [r7, #12]
   136dc:	683b      	ldr	r3, [r7, #0]
   136de:	681b      	ldr	r3, [r3, #0]
   136e0:	68db      	ldr	r3, [r3, #12]
   136e2:	617b      	str	r3, [r7, #20]
    size_t suffix_len;
    const char *suffix = mp_obj_str_get_data(args[1], &suffix_len);
   136e4:	683b      	ldr	r3, [r7, #0]
   136e6:	3304      	adds	r3, #4
   136e8:	681b      	ldr	r3, [r3, #0]
   136ea:	f107 0208 	add.w	r2, r7, #8
   136ee:	4611      	mov	r1, r2
   136f0:	4618      	mov	r0, r3
   136f2:	f002 f87d 	bl	157f0 <mp_obj_str_get_data>
   136f6:	6138      	str	r0, [r7, #16]
    if (n_args > 2) {
   136f8:	687b      	ldr	r3, [r7, #4]
   136fa:	2b02      	cmp	r3, #2
   136fc:	d902      	bls.n	13704 <str_endswith+0x60>
        mp_raise_NotImplementedError("start/end indices");
   136fe:	4810      	ldr	r0, [pc, #64]	; (13740 <str_endswith+0x9c>)
   13700:	f7f9 fc76 	bl	cff0 <mp_raise_NotImplementedError>
    }

    if (suffix_len > str_len) {
   13704:	68ba      	ldr	r2, [r7, #8]
   13706:	68fb      	ldr	r3, [r7, #12]
   13708:	429a      	cmp	r2, r3
   1370a:	d901      	bls.n	13710 <str_endswith+0x6c>
        return mp_const_false;
   1370c:	4b0d      	ldr	r3, [pc, #52]	; (13744 <str_endswith+0xa0>)
   1370e:	e013      	b.n	13738 <str_endswith+0x94>
    }
    return mp_obj_new_bool(memcmp(str + (str_len - suffix_len), suffix, suffix_len) == 0);
   13710:	68fa      	ldr	r2, [r7, #12]
   13712:	68bb      	ldr	r3, [r7, #8]
   13714:	1ad3      	subs	r3, r2, r3
   13716:	697a      	ldr	r2, [r7, #20]
   13718:	4413      	add	r3, r2
   1371a:	68ba      	ldr	r2, [r7, #8]
   1371c:	6939      	ldr	r1, [r7, #16]
   1371e:	4618      	mov	r0, r3
   13720:	f009 fc1e 	bl	1cf60 <memcmp>
   13724:	4603      	mov	r3, r0
   13726:	2b00      	cmp	r3, #0
   13728:	bf0c      	ite	eq
   1372a:	2301      	moveq	r3, #1
   1372c:	2300      	movne	r3, #0
   1372e:	b2db      	uxtb	r3, r3
   13730:	4618      	mov	r0, r3
   13732:	f7fe fe1d 	bl	12370 <mp_obj_new_bool>
   13736:	4603      	mov	r3, r0
}
   13738:	4618      	mov	r0, r3
   1373a:	3718      	adds	r7, #24
   1373c:	46bd      	mov	sp, r7
   1373e:	bd80      	pop	{r7, pc}
   13740:	00023820 	.word	0x00023820
   13744:	00021c58 	.word	0x00021c58

00013748 <str_uni_strip>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_endswith_obj, 2, 3, str_endswith);

enum { LSTRIP, RSTRIP, STRIP };

STATIC mp_obj_t str_uni_strip(int type, size_t n_args, const mp_obj_t *args) {
   13748:	b580      	push	{r7, lr}
   1374a:	b094      	sub	sp, #80	; 0x50
   1374c:	af02      	add	r7, sp, #8
   1374e:	60f8      	str	r0, [r7, #12]
   13750:	60b9      	str	r1, [r7, #8]
   13752:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   13754:	687b      	ldr	r3, [r7, #4]
   13756:	681b      	ldr	r3, [r3, #0]
   13758:	4618      	mov	r0, r3
   1375a:	f7fe fde5 	bl	12328 <MP_OBJ_IS_QSTR>
   1375e:	4603      	mov	r3, r0
   13760:	f083 0301 	eor.w	r3, r3, #1
   13764:	b2db      	uxtb	r3, r3
   13766:	2b00      	cmp	r3, #0
   13768:	d018      	beq.n	1379c <str_uni_strip+0x54>
   1376a:	687b      	ldr	r3, [r7, #4]
   1376c:	681b      	ldr	r3, [r3, #0]
   1376e:	4618      	mov	r0, r3
   13770:	f7fe fdec 	bl	1234c <MP_OBJ_IS_OBJ>
   13774:	4603      	mov	r3, r0
   13776:	f083 0301 	eor.w	r3, r3, #1
   1377a:	b2db      	uxtb	r3, r3
   1377c:	2b00      	cmp	r3, #0
   1377e:	d106      	bne.n	1378e <str_uni_strip+0x46>
   13780:	687b      	ldr	r3, [r7, #4]
   13782:	681b      	ldr	r3, [r3, #0]
   13784:	681b      	ldr	r3, [r3, #0]
   13786:	699b      	ldr	r3, [r3, #24]
   13788:	4a76      	ldr	r2, [pc, #472]	; (13964 <str_uni_strip+0x21c>)
   1378a:	4293      	cmp	r3, r2
   1378c:	d006      	beq.n	1379c <str_uni_strip+0x54>
   1378e:	4b76      	ldr	r3, [pc, #472]	; (13968 <str_uni_strip+0x220>)
   13790:	4a76      	ldr	r2, [pc, #472]	; (1396c <str_uni_strip+0x224>)
   13792:	f240 3113 	movw	r1, #787	; 0x313
   13796:	4876      	ldr	r0, [pc, #472]	; (13970 <str_uni_strip+0x228>)
   13798:	f007 fff4 	bl	1b784 <__assert_func>
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   1379c:	687b      	ldr	r3, [r7, #4]
   1379e:	681b      	ldr	r3, [r3, #0]
   137a0:	4618      	mov	r0, r3
   137a2:	f7fa f877 	bl	d894 <mp_obj_get_type>
   137a6:	61f8      	str	r0, [r7, #28]

    const byte *chars_to_del;
    uint chars_to_del_len;
    static const byte whitespace[] = " \t\n\r\v\f";

    if (n_args == 1) {
   137a8:	68bb      	ldr	r3, [r7, #8]
   137aa:	2b01      	cmp	r3, #1
   137ac:	d104      	bne.n	137b8 <str_uni_strip+0x70>
        chars_to_del = whitespace;
   137ae:	4b71      	ldr	r3, [pc, #452]	; (13974 <str_uni_strip+0x22c>)
   137b0:	647b      	str	r3, [r7, #68]	; 0x44
        chars_to_del_len = sizeof(whitespace) - 1;
   137b2:	2306      	movs	r3, #6
   137b4:	643b      	str	r3, [r7, #64]	; 0x40
   137b6:	e032      	b.n	1381e <str_uni_strip+0xd6>
    } else {
        if (mp_obj_get_type(args[1]) != self_type) {
   137b8:	687b      	ldr	r3, [r7, #4]
   137ba:	3304      	adds	r3, #4
   137bc:	681b      	ldr	r3, [r3, #0]
   137be:	4618      	mov	r0, r3
   137c0:	f7fa f868 	bl	d894 <mp_obj_get_type>
   137c4:	4602      	mov	r2, r0
   137c6:	69fb      	ldr	r3, [r7, #28]
   137c8:	429a      	cmp	r2, r3
   137ca:	d005      	beq.n	137d8 <str_uni_strip+0x90>
            bad_implicit_conversion(args[1]);
   137cc:	687b      	ldr	r3, [r7, #4]
   137ce:	3304      	adds	r3, #4
   137d0:	681b      	ldr	r3, [r3, #0]
   137d2:	4618      	mov	r0, r3
   137d4:	f001 ff9c 	bl	15710 <bad_implicit_conversion>
        }
        GET_STR_DATA_LEN(args[1], s, l);
   137d8:	687b      	ldr	r3, [r7, #4]
   137da:	3304      	adds	r3, #4
   137dc:	681b      	ldr	r3, [r3, #0]
   137de:	4618      	mov	r0, r3
   137e0:	f7fe fda2 	bl	12328 <MP_OBJ_IS_QSTR>
   137e4:	4603      	mov	r3, r0
   137e6:	2b00      	cmp	r3, #0
   137e8:	d00b      	beq.n	13802 <str_uni_strip+0xba>
   137ea:	687b      	ldr	r3, [r7, #4]
   137ec:	3304      	adds	r3, #4
   137ee:	681b      	ldr	r3, [r3, #0]
   137f0:	089b      	lsrs	r3, r3, #2
   137f2:	f107 0210 	add.w	r2, r7, #16
   137f6:	4611      	mov	r1, r2
   137f8:	4618      	mov	r0, r3
   137fa:	f7ed fdd3 	bl	13a4 <qstr_data>
   137fe:	63f8      	str	r0, [r7, #60]	; 0x3c
   13800:	e009      	b.n	13816 <str_uni_strip+0xce>
   13802:	687b      	ldr	r3, [r7, #4]
   13804:	3304      	adds	r3, #4
   13806:	681b      	ldr	r3, [r3, #0]
   13808:	689b      	ldr	r3, [r3, #8]
   1380a:	613b      	str	r3, [r7, #16]
   1380c:	687b      	ldr	r3, [r7, #4]
   1380e:	3304      	adds	r3, #4
   13810:	681b      	ldr	r3, [r3, #0]
   13812:	68db      	ldr	r3, [r3, #12]
   13814:	63fb      	str	r3, [r7, #60]	; 0x3c
        chars_to_del = s;
   13816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13818:	647b      	str	r3, [r7, #68]	; 0x44
        chars_to_del_len = l;
   1381a:	693b      	ldr	r3, [r7, #16]
   1381c:	643b      	str	r3, [r7, #64]	; 0x40
    }

    GET_STR_DATA_LEN(args[0], orig_str, orig_str_len);
   1381e:	687b      	ldr	r3, [r7, #4]
   13820:	681b      	ldr	r3, [r3, #0]
   13822:	4618      	mov	r0, r3
   13824:	f7fe fd80 	bl	12328 <MP_OBJ_IS_QSTR>
   13828:	4603      	mov	r3, r0
   1382a:	2b00      	cmp	r3, #0
   1382c:	d00a      	beq.n	13844 <str_uni_strip+0xfc>
   1382e:	687b      	ldr	r3, [r7, #4]
   13830:	681b      	ldr	r3, [r3, #0]
   13832:	089b      	lsrs	r3, r3, #2
   13834:	f107 0214 	add.w	r2, r7, #20
   13838:	4611      	mov	r1, r2
   1383a:	4618      	mov	r0, r3
   1383c:	f7ed fdb2 	bl	13a4 <qstr_data>
   13840:	63b8      	str	r0, [r7, #56]	; 0x38
   13842:	e007      	b.n	13854 <str_uni_strip+0x10c>
   13844:	687b      	ldr	r3, [r7, #4]
   13846:	681b      	ldr	r3, [r3, #0]
   13848:	689b      	ldr	r3, [r3, #8]
   1384a:	617b      	str	r3, [r7, #20]
   1384c:	687b      	ldr	r3, [r7, #4]
   1384e:	681b      	ldr	r3, [r3, #0]
   13850:	68db      	ldr	r3, [r3, #12]
   13852:	63bb      	str	r3, [r7, #56]	; 0x38

    size_t first_good_char_pos = 0;
   13854:	2300      	movs	r3, #0
   13856:	637b      	str	r3, [r7, #52]	; 0x34
    bool first_good_char_pos_set = false;
   13858:	2300      	movs	r3, #0
   1385a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    size_t last_good_char_pos = 0;
   1385e:	2300      	movs	r3, #0
   13860:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t i = 0;
   13862:	2300      	movs	r3, #0
   13864:	62bb      	str	r3, [r7, #40]	; 0x28
    int delta = 1;
   13866:	2301      	movs	r3, #1
   13868:	627b      	str	r3, [r7, #36]	; 0x24
    if (type == RSTRIP) {
   1386a:	68fb      	ldr	r3, [r7, #12]
   1386c:	2b01      	cmp	r3, #1
   1386e:	d105      	bne.n	1387c <str_uni_strip+0x134>
        i = orig_str_len - 1;
   13870:	697b      	ldr	r3, [r7, #20]
   13872:	3b01      	subs	r3, #1
   13874:	62bb      	str	r3, [r7, #40]	; 0x28
        delta = -1;
   13876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1387a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    for (size_t len = orig_str_len; len > 0; len--) {
   1387c:	697b      	ldr	r3, [r7, #20]
   1387e:	623b      	str	r3, [r7, #32]
   13880:	e030      	b.n	138e4 <str_uni_strip+0x19c>
        if (find_subbytes(chars_to_del, chars_to_del_len, &orig_str[i], 1, 1) == NULL) {
   13882:	6bba      	ldr	r2, [r7, #56]	; 0x38
   13884:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13886:	441a      	add	r2, r3
   13888:	2301      	movs	r3, #1
   1388a:	9300      	str	r3, [sp, #0]
   1388c:	2301      	movs	r3, #1
   1388e:	6c39      	ldr	r1, [r7, #64]	; 0x40
   13890:	6c78      	ldr	r0, [r7, #68]	; 0x44
   13892:	f7ff f865 	bl	12960 <find_subbytes>
   13896:	4603      	mov	r3, r0
   13898:	2b00      	cmp	r3, #0
   1389a:	d11c      	bne.n	138d6 <str_uni_strip+0x18e>
            if (!first_good_char_pos_set) {
   1389c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   138a0:	f083 0301 	eor.w	r3, r3, #1
   138a4:	b2db      	uxtb	r3, r3
   138a6:	2b00      	cmp	r3, #0
   138a8:	d013      	beq.n	138d2 <str_uni_strip+0x18a>
                first_good_char_pos_set = true;
   138aa:	2301      	movs	r3, #1
   138ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                first_good_char_pos = i;
   138b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   138b2:	637b      	str	r3, [r7, #52]	; 0x34
                if (type == LSTRIP) {
   138b4:	68fb      	ldr	r3, [r7, #12]
   138b6:	2b00      	cmp	r3, #0
   138b8:	d103      	bne.n	138c2 <str_uni_strip+0x17a>
                    last_good_char_pos = orig_str_len - 1;
   138ba:	697b      	ldr	r3, [r7, #20]
   138bc:	3b01      	subs	r3, #1
   138be:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
   138c0:	e013      	b.n	138ea <str_uni_strip+0x1a2>
                } else if (type == RSTRIP) {
   138c2:	68fb      	ldr	r3, [r7, #12]
   138c4:	2b01      	cmp	r3, #1
   138c6:	d104      	bne.n	138d2 <str_uni_strip+0x18a>
                    first_good_char_pos = 0;
   138c8:	2300      	movs	r3, #0
   138ca:	637b      	str	r3, [r7, #52]	; 0x34
                    last_good_char_pos = i;
   138cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   138ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
   138d0:	e00b      	b.n	138ea <str_uni_strip+0x1a2>
                }
            }
            last_good_char_pos = i;
   138d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   138d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        i += delta;
   138d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   138d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   138da:	4413      	add	r3, r2
   138dc:	62bb      	str	r3, [r7, #40]	; 0x28
    for (size_t len = orig_str_len; len > 0; len--) {
   138de:	6a3b      	ldr	r3, [r7, #32]
   138e0:	3b01      	subs	r3, #1
   138e2:	623b      	str	r3, [r7, #32]
   138e4:	6a3b      	ldr	r3, [r7, #32]
   138e6:	2b00      	cmp	r3, #0
   138e8:	d1cb      	bne.n	13882 <str_uni_strip+0x13a>
    }

    if (!first_good_char_pos_set) {
   138ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   138ee:	f083 0301 	eor.w	r3, r3, #1
   138f2:	b2db      	uxtb	r3, r3
   138f4:	2b00      	cmp	r3, #0
   138f6:	d007      	beq.n	13908 <str_uni_strip+0x1c0>
        // string is all whitespace, return ''
        if (self_type == &mp_type_str) {
   138f8:	69fb      	ldr	r3, [r7, #28]
   138fa:	4a1f      	ldr	r2, [pc, #124]	; (13978 <str_uni_strip+0x230>)
   138fc:	4293      	cmp	r3, r2
   138fe:	d101      	bne.n	13904 <str_uni_strip+0x1bc>
            return MP_OBJ_NEW_QSTR(MP_QSTR_);
   13900:	2306      	movs	r3, #6
   13902:	e02b      	b.n	1395c <str_uni_strip+0x214>
        } else {
            return mp_const_empty_bytes;
   13904:	4b1d      	ldr	r3, [pc, #116]	; (1397c <str_uni_strip+0x234>)
   13906:	e029      	b.n	1395c <str_uni_strip+0x214>
        }
    }

    assert(last_good_char_pos >= first_good_char_pos);
   13908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1390a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1390c:	429a      	cmp	r2, r3
   1390e:	d206      	bcs.n	1391e <str_uni_strip+0x1d6>
   13910:	4b1b      	ldr	r3, [pc, #108]	; (13980 <str_uni_strip+0x238>)
   13912:	4a16      	ldr	r2, [pc, #88]	; (1396c <str_uni_strip+0x224>)
   13914:	f240 314d 	movw	r1, #845	; 0x34d
   13918:	4815      	ldr	r0, [pc, #84]	; (13970 <str_uni_strip+0x228>)
   1391a:	f007 ff33 	bl	1b784 <__assert_func>
    //+1 to accommodate the last character
    size_t stripped_len = last_good_char_pos - first_good_char_pos + 1;
   1391e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13922:	1ad3      	subs	r3, r2, r3
   13924:	3301      	adds	r3, #1
   13926:	61bb      	str	r3, [r7, #24]
    if (stripped_len == orig_str_len) {
   13928:	697b      	ldr	r3, [r7, #20]
   1392a:	69ba      	ldr	r2, [r7, #24]
   1392c:	429a      	cmp	r2, r3
   1392e:	d10c      	bne.n	1394a <str_uni_strip+0x202>
        // If nothing was stripped, don't bother to dup original string
        // TODO: watch out for this case when we'll get to bytearray.strip()
        assert(first_good_char_pos == 0);
   13930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13932:	2b00      	cmp	r3, #0
   13934:	d006      	beq.n	13944 <str_uni_strip+0x1fc>
   13936:	4b13      	ldr	r3, [pc, #76]	; (13984 <str_uni_strip+0x23c>)
   13938:	4a0c      	ldr	r2, [pc, #48]	; (1396c <str_uni_strip+0x224>)
   1393a:	f240 3153 	movw	r1, #851	; 0x353
   1393e:	480c      	ldr	r0, [pc, #48]	; (13970 <str_uni_strip+0x228>)
   13940:	f007 ff20 	bl	1b784 <__assert_func>
        return args[0];
   13944:	687b      	ldr	r3, [r7, #4]
   13946:	681b      	ldr	r3, [r3, #0]
   13948:	e008      	b.n	1395c <str_uni_strip+0x214>
    }
    return mp_obj_new_str_of_type(self_type, orig_str + first_good_char_pos, stripped_len);
   1394a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1394c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1394e:	4413      	add	r3, r2
   13950:	69ba      	ldr	r2, [r7, #24]
   13952:	4619      	mov	r1, r3
   13954:	69f8      	ldr	r0, [r7, #28]
   13956:	f001 fd59 	bl	1540c <mp_obj_new_str_of_type>
   1395a:	4603      	mov	r3, r0
}
   1395c:	4618      	mov	r0, r3
   1395e:	3748      	adds	r7, #72	; 0x48
   13960:	46bd      	mov	sp, r7
   13962:	bd80      	pop	{r7, pc}
   13964:	000129d5 	.word	0x000129d5
   13968:	00023748 	.word	0x00023748
   1396c:	00023c2c 	.word	0x00023c2c
   13970:	000236ac 	.word	0x000236ac
   13974:	00023c3c 	.word	0x00023c3c
   13978:	00023b68 	.word	0x00023b68
   1397c:	00023be4 	.word	0x00023be4
   13980:	00023840 	.word	0x00023840
   13984:	0002386c 	.word	0x0002386c

00013988 <str_strip>:

STATIC mp_obj_t str_strip(size_t n_args, const mp_obj_t *args) {
   13988:	b580      	push	{r7, lr}
   1398a:	b082      	sub	sp, #8
   1398c:	af00      	add	r7, sp, #0
   1398e:	6078      	str	r0, [r7, #4]
   13990:	6039      	str	r1, [r7, #0]
    return str_uni_strip(STRIP, n_args, args);
   13992:	683a      	ldr	r2, [r7, #0]
   13994:	6879      	ldr	r1, [r7, #4]
   13996:	2002      	movs	r0, #2
   13998:	f7ff fed6 	bl	13748 <str_uni_strip>
   1399c:	4603      	mov	r3, r0
}
   1399e:	4618      	mov	r0, r3
   139a0:	3708      	adds	r7, #8
   139a2:	46bd      	mov	sp, r7
   139a4:	bd80      	pop	{r7, pc}
   139a6:	bf00      	nop

000139a8 <str_lstrip>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_strip_obj, 1, 2, str_strip);

STATIC mp_obj_t str_lstrip(size_t n_args, const mp_obj_t *args) {
   139a8:	b580      	push	{r7, lr}
   139aa:	b082      	sub	sp, #8
   139ac:	af00      	add	r7, sp, #0
   139ae:	6078      	str	r0, [r7, #4]
   139b0:	6039      	str	r1, [r7, #0]
    return str_uni_strip(LSTRIP, n_args, args);
   139b2:	683a      	ldr	r2, [r7, #0]
   139b4:	6879      	ldr	r1, [r7, #4]
   139b6:	2000      	movs	r0, #0
   139b8:	f7ff fec6 	bl	13748 <str_uni_strip>
   139bc:	4603      	mov	r3, r0
}
   139be:	4618      	mov	r0, r3
   139c0:	3708      	adds	r7, #8
   139c2:	46bd      	mov	sp, r7
   139c4:	bd80      	pop	{r7, pc}
   139c6:	bf00      	nop

000139c8 <str_rstrip>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_lstrip_obj, 1, 2, str_lstrip);

STATIC mp_obj_t str_rstrip(size_t n_args, const mp_obj_t *args) {
   139c8:	b580      	push	{r7, lr}
   139ca:	b082      	sub	sp, #8
   139cc:	af00      	add	r7, sp, #0
   139ce:	6078      	str	r0, [r7, #4]
   139d0:	6039      	str	r1, [r7, #0]
    return str_uni_strip(RSTRIP, n_args, args);
   139d2:	683a      	ldr	r2, [r7, #0]
   139d4:	6879      	ldr	r1, [r7, #4]
   139d6:	2001      	movs	r0, #1
   139d8:	f7ff feb6 	bl	13748 <str_uni_strip>
   139dc:	4603      	mov	r3, r0
}
   139de:	4618      	mov	r0, r3
   139e0:	3708      	adds	r7, #8
   139e2:	46bd      	mov	sp, r7
   139e4:	bd80      	pop	{r7, pc}
   139e6:	bf00      	nop

000139e8 <str_to_int>:
MP_DEFINE_CONST_FUN_OBJ_2(str_center_obj, str_center);
#endif

// Takes an int arg, but only parses unsigned numbers, and only changes
// *num if at least one digit was parsed.
STATIC const char *str_to_int(const char *str, const char *top, int *num) {
   139e8:	b480      	push	{r7}
   139ea:	b085      	sub	sp, #20
   139ec:	af00      	add	r7, sp, #0
   139ee:	60f8      	str	r0, [r7, #12]
   139f0:	60b9      	str	r1, [r7, #8]
   139f2:	607a      	str	r2, [r7, #4]
    if (str < top && '0' <= *str && *str <= '9') {
   139f4:	68fa      	ldr	r2, [r7, #12]
   139f6:	68bb      	ldr	r3, [r7, #8]
   139f8:	429a      	cmp	r2, r3
   139fa:	d226      	bcs.n	13a4a <str_to_int+0x62>
   139fc:	68fb      	ldr	r3, [r7, #12]
   139fe:	781b      	ldrb	r3, [r3, #0]
   13a00:	2b2f      	cmp	r3, #47	; 0x2f
   13a02:	d922      	bls.n	13a4a <str_to_int+0x62>
   13a04:	68fb      	ldr	r3, [r7, #12]
   13a06:	781b      	ldrb	r3, [r3, #0]
   13a08:	2b39      	cmp	r3, #57	; 0x39
   13a0a:	d81e      	bhi.n	13a4a <str_to_int+0x62>
        *num = 0;
   13a0c:	687b      	ldr	r3, [r7, #4]
   13a0e:	2200      	movs	r2, #0
   13a10:	601a      	str	r2, [r3, #0]
        do {
            *num = *num * 10 + (*str - '0');
   13a12:	687b      	ldr	r3, [r7, #4]
   13a14:	681a      	ldr	r2, [r3, #0]
   13a16:	4613      	mov	r3, r2
   13a18:	009b      	lsls	r3, r3, #2
   13a1a:	4413      	add	r3, r2
   13a1c:	005b      	lsls	r3, r3, #1
   13a1e:	461a      	mov	r2, r3
   13a20:	68fb      	ldr	r3, [r7, #12]
   13a22:	781b      	ldrb	r3, [r3, #0]
   13a24:	3b30      	subs	r3, #48	; 0x30
   13a26:	441a      	add	r2, r3
   13a28:	687b      	ldr	r3, [r7, #4]
   13a2a:	601a      	str	r2, [r3, #0]
            str++;
   13a2c:	68fb      	ldr	r3, [r7, #12]
   13a2e:	3301      	adds	r3, #1
   13a30:	60fb      	str	r3, [r7, #12]
        }
        while (str < top && '0' <= *str && *str <= '9');
   13a32:	68fa      	ldr	r2, [r7, #12]
   13a34:	68bb      	ldr	r3, [r7, #8]
   13a36:	429a      	cmp	r2, r3
   13a38:	d207      	bcs.n	13a4a <str_to_int+0x62>
   13a3a:	68fb      	ldr	r3, [r7, #12]
   13a3c:	781b      	ldrb	r3, [r3, #0]
   13a3e:	2b2f      	cmp	r3, #47	; 0x2f
   13a40:	d903      	bls.n	13a4a <str_to_int+0x62>
   13a42:	68fb      	ldr	r3, [r7, #12]
   13a44:	781b      	ldrb	r3, [r3, #0]
   13a46:	2b39      	cmp	r3, #57	; 0x39
   13a48:	d9e3      	bls.n	13a12 <str_to_int+0x2a>
    }
    return str;
   13a4a:	68fb      	ldr	r3, [r7, #12]
}
   13a4c:	4618      	mov	r0, r3
   13a4e:	3714      	adds	r7, #20
   13a50:	46bd      	mov	sp, r7
   13a52:	f85d 7b04 	ldr.w	r7, [sp], #4
   13a56:	4770      	bx	lr

00013a58 <isalignment>:

STATIC bool isalignment(char ch) {
   13a58:	b580      	push	{r7, lr}
   13a5a:	b082      	sub	sp, #8
   13a5c:	af00      	add	r7, sp, #0
   13a5e:	4603      	mov	r3, r0
   13a60:	71fb      	strb	r3, [r7, #7]
    return ch && strchr("<>=^", ch) != NULL;
   13a62:	79fb      	ldrb	r3, [r7, #7]
   13a64:	2b00      	cmp	r3, #0
   13a66:	d009      	beq.n	13a7c <isalignment+0x24>
   13a68:	79fb      	ldrb	r3, [r7, #7]
   13a6a:	4619      	mov	r1, r3
   13a6c:	4807      	ldr	r0, [pc, #28]	; (13a8c <isalignment+0x34>)
   13a6e:	f009 fbc3 	bl	1d1f8 <strchr>
   13a72:	4603      	mov	r3, r0
   13a74:	2b00      	cmp	r3, #0
   13a76:	d001      	beq.n	13a7c <isalignment+0x24>
   13a78:	2301      	movs	r3, #1
   13a7a:	e000      	b.n	13a7e <isalignment+0x26>
   13a7c:	2300      	movs	r3, #0
   13a7e:	f003 0301 	and.w	r3, r3, #1
   13a82:	b2db      	uxtb	r3, r3
}
   13a84:	4618      	mov	r0, r3
   13a86:	3708      	adds	r7, #8
   13a88:	46bd      	mov	sp, r7
   13a8a:	bd80      	pop	{r7, pc}
   13a8c:	000238ac 	.word	0x000238ac

00013a90 <istype>:

STATIC bool istype(char ch) {
   13a90:	b580      	push	{r7, lr}
   13a92:	b082      	sub	sp, #8
   13a94:	af00      	add	r7, sp, #0
   13a96:	4603      	mov	r3, r0
   13a98:	71fb      	strb	r3, [r7, #7]
    return ch && strchr("bcdeEfFgGnosxX%", ch) != NULL;
   13a9a:	79fb      	ldrb	r3, [r7, #7]
   13a9c:	2b00      	cmp	r3, #0
   13a9e:	d009      	beq.n	13ab4 <istype+0x24>
   13aa0:	79fb      	ldrb	r3, [r7, #7]
   13aa2:	4619      	mov	r1, r3
   13aa4:	4807      	ldr	r0, [pc, #28]	; (13ac4 <istype+0x34>)
   13aa6:	f009 fba7 	bl	1d1f8 <strchr>
   13aaa:	4603      	mov	r3, r0
   13aac:	2b00      	cmp	r3, #0
   13aae:	d001      	beq.n	13ab4 <istype+0x24>
   13ab0:	2301      	movs	r3, #1
   13ab2:	e000      	b.n	13ab6 <istype+0x26>
   13ab4:	2300      	movs	r3, #0
   13ab6:	f003 0301 	and.w	r3, r3, #1
   13aba:	b2db      	uxtb	r3, r3
}
   13abc:	4618      	mov	r0, r3
   13abe:	3708      	adds	r7, #8
   13ac0:	46bd      	mov	sp, r7
   13ac2:	bd80      	pop	{r7, pc}
   13ac4:	000238b4 	.word	0x000238b4

00013ac8 <arg_looks_integer>:

STATIC bool arg_looks_integer(mp_obj_t arg) {
   13ac8:	b580      	push	{r7, lr}
   13aca:	b082      	sub	sp, #8
   13acc:	af00      	add	r7, sp, #0
   13ace:	6078      	str	r0, [r7, #4]
    return MP_OBJ_IS_TYPE(arg, &mp_type_bool) || MP_OBJ_IS_INT(arg);
   13ad0:	6878      	ldr	r0, [r7, #4]
   13ad2:	f7fe fc3b 	bl	1234c <MP_OBJ_IS_OBJ>
   13ad6:	4603      	mov	r3, r0
   13ad8:	2b00      	cmp	r3, #0
   13ada:	d004      	beq.n	13ae6 <arg_looks_integer+0x1e>
   13adc:	687b      	ldr	r3, [r7, #4]
   13ade:	681b      	ldr	r3, [r3, #0]
   13ae0:	4a0e      	ldr	r2, [pc, #56]	; (13b1c <arg_looks_integer+0x54>)
   13ae2:	4293      	cmp	r3, r2
   13ae4:	d010      	beq.n	13b08 <arg_looks_integer+0x40>
   13ae6:	6878      	ldr	r0, [r7, #4]
   13ae8:	f7fe fc0c 	bl	12304 <MP_OBJ_IS_SMALL_INT>
   13aec:	4603      	mov	r3, r0
   13aee:	2b00      	cmp	r3, #0
   13af0:	d10a      	bne.n	13b08 <arg_looks_integer+0x40>
   13af2:	6878      	ldr	r0, [r7, #4]
   13af4:	f7fe fc2a 	bl	1234c <MP_OBJ_IS_OBJ>
   13af8:	4603      	mov	r3, r0
   13afa:	2b00      	cmp	r3, #0
   13afc:	d006      	beq.n	13b0c <arg_looks_integer+0x44>
   13afe:	687b      	ldr	r3, [r7, #4]
   13b00:	681b      	ldr	r3, [r3, #0]
   13b02:	4a07      	ldr	r2, [pc, #28]	; (13b20 <arg_looks_integer+0x58>)
   13b04:	4293      	cmp	r3, r2
   13b06:	d101      	bne.n	13b0c <arg_looks_integer+0x44>
   13b08:	2301      	movs	r3, #1
   13b0a:	e000      	b.n	13b0e <arg_looks_integer+0x46>
   13b0c:	2300      	movs	r3, #0
   13b0e:	f003 0301 	and.w	r3, r3, #1
   13b12:	b2db      	uxtb	r3, r3
}
   13b14:	4618      	mov	r0, r3
   13b16:	3708      	adds	r7, #8
   13b18:	46bd      	mov	sp, r7
   13b1a:	bd80      	pop	{r7, pc}
   13b1c:	00021c1c 	.word	0x00021c1c
   13b20:	00022f80 	.word	0x00022f80

00013b24 <arg_looks_numeric>:

STATIC bool arg_looks_numeric(mp_obj_t arg) {
   13b24:	b580      	push	{r7, lr}
   13b26:	b082      	sub	sp, #8
   13b28:	af00      	add	r7, sp, #0
   13b2a:	6078      	str	r0, [r7, #4]
    return arg_looks_integer(arg)
   13b2c:	6878      	ldr	r0, [r7, #4]
   13b2e:	f7ff ffcb 	bl	13ac8 <arg_looks_integer>
   13b32:	4603      	mov	r3, r0
#if MICROPY_PY_BUILTINS_FLOAT
        || mp_obj_is_float(arg)
#endif
    ;
}
   13b34:	4618      	mov	r0, r3
   13b36:	3708      	adds	r7, #8
   13b38:	46bd      	mov	sp, r7
   13b3a:	bd80      	pop	{r7, pc}

00013b3c <arg_as_int>:

#if MICROPY_PY_BUILTINS_STR_OP_MODULO
STATIC mp_obj_t arg_as_int(mp_obj_t arg) {
   13b3c:	b480      	push	{r7}
   13b3e:	b083      	sub	sp, #12
   13b40:	af00      	add	r7, sp, #0
   13b42:	6078      	str	r0, [r7, #4]
#if MICROPY_PY_BUILTINS_FLOAT
    if (mp_obj_is_float(arg)) {
        return mp_obj_new_int_from_float(mp_obj_float_get(arg));
    }
#endif
    return arg;
   13b44:	687b      	ldr	r3, [r7, #4]
}
   13b46:	4618      	mov	r0, r3
   13b48:	370c      	adds	r7, #12
   13b4a:	46bd      	mov	sp, r7
   13b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
   13b50:	4770      	bx	lr
   13b52:	bf00      	nop

00013b54 <terse_str_format_value_error>:
#endif

#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE
STATIC NORETURN void terse_str_format_value_error(void) {
   13b54:	b580      	push	{r7, lr}
   13b56:	af00      	add	r7, sp, #0
    mp_raise_ValueError("bad format string");
   13b58:	4801      	ldr	r0, [pc, #4]	; (13b60 <terse_str_format_value_error+0xc>)
   13b5a:	f7f9 fa23 	bl	cfa4 <mp_raise_ValueError>
   13b5e:	bf00      	nop
   13b60:	000238c4 	.word	0x000238c4

00013b64 <mp_obj_str_format_helper>:
#else
// define to nothing to improve coverage
#define terse_str_format_value_error()
#endif

STATIC vstr_t mp_obj_str_format_helper(const char *str, const char *top, int *arg_i, size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   13b64:	b590      	push	{r4, r7, lr}
   13b66:	b0ad      	sub	sp, #180	; 0xb4
   13b68:	af04      	add	r7, sp, #16
   13b6a:	60f8      	str	r0, [r7, #12]
   13b6c:	60b9      	str	r1, [r7, #8]
   13b6e:	607a      	str	r2, [r7, #4]
   13b70:	603b      	str	r3, [r7, #0]
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
   13b72:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   13b76:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13b7a:	2110      	movs	r1, #16
   13b7c:	4618      	mov	r0, r3
   13b7e:	f7ed fcd7 	bl	1530 <vstr_init_print>

    for (; str < top; str++) {
   13b82:	f000 bc91 	b.w	144a8 <mp_obj_str_format_helper+0x944>
        if (*str == '}') {
   13b86:	68bb      	ldr	r3, [r7, #8]
   13b88:	781b      	ldrb	r3, [r3, #0]
   13b8a:	2b7d      	cmp	r3, #125	; 0x7d
   13b8c:	d114      	bne.n	13bb8 <mp_obj_str_format_helper+0x54>
            str++;
   13b8e:	68bb      	ldr	r3, [r7, #8]
   13b90:	3301      	adds	r3, #1
   13b92:	60bb      	str	r3, [r7, #8]
            if (str < top && *str == '}') {
   13b94:	68ba      	ldr	r2, [r7, #8]
   13b96:	687b      	ldr	r3, [r7, #4]
   13b98:	429a      	cmp	r2, r3
   13b9a:	d20b      	bcs.n	13bb4 <mp_obj_str_format_helper+0x50>
   13b9c:	68bb      	ldr	r3, [r7, #8]
   13b9e:	781b      	ldrb	r3, [r3, #0]
   13ba0:	2b7d      	cmp	r3, #125	; 0x7d
   13ba2:	d107      	bne.n	13bb4 <mp_obj_str_format_helper+0x50>
                vstr_add_byte(&vstr, '}');
   13ba4:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13ba8:	217d      	movs	r1, #125	; 0x7d
   13baa:	4618      	mov	r0, r3
   13bac:	f7ed fdc8 	bl	1740 <vstr_add_byte>
                continue;
   13bb0:	f000 bc77 	b.w	144a2 <mp_obj_str_format_helper+0x93e>
            }
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   13bb4:	f7ff ffce 	bl	13b54 <terse_str_format_value_error>
            } else {
                mp_raise_ValueError("single '}' encountered in format string");
            }
        }
        if (*str != '{') {
   13bb8:	68bb      	ldr	r3, [r7, #8]
   13bba:	781b      	ldrb	r3, [r3, #0]
   13bbc:	2b7b      	cmp	r3, #123	; 0x7b
   13bbe:	d009      	beq.n	13bd4 <mp_obj_str_format_helper+0x70>
            vstr_add_byte(&vstr, *str);
   13bc0:	68bb      	ldr	r3, [r7, #8]
   13bc2:	781a      	ldrb	r2, [r3, #0]
   13bc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13bc8:	4611      	mov	r1, r2
   13bca:	4618      	mov	r0, r3
   13bcc:	f7ed fdb8 	bl	1740 <vstr_add_byte>
            continue;
   13bd0:	f000 bc67 	b.w	144a2 <mp_obj_str_format_helper+0x93e>
        }

        str++;
   13bd4:	68bb      	ldr	r3, [r7, #8]
   13bd6:	3301      	adds	r3, #1
   13bd8:	60bb      	str	r3, [r7, #8]
        if (str < top && *str == '{') {
   13bda:	68ba      	ldr	r2, [r7, #8]
   13bdc:	687b      	ldr	r3, [r7, #4]
   13bde:	429a      	cmp	r2, r3
   13be0:	d20b      	bcs.n	13bfa <mp_obj_str_format_helper+0x96>
   13be2:	68bb      	ldr	r3, [r7, #8]
   13be4:	781b      	ldrb	r3, [r3, #0]
   13be6:	2b7b      	cmp	r3, #123	; 0x7b
   13be8:	d107      	bne.n	13bfa <mp_obj_str_format_helper+0x96>
            vstr_add_byte(&vstr, '{');
   13bea:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13bee:	217b      	movs	r1, #123	; 0x7b
   13bf0:	4618      	mov	r0, r3
   13bf2:	f7ed fda5 	bl	1740 <vstr_add_byte>
            continue;
   13bf6:	f000 bc54 	b.w	144a2 <mp_obj_str_format_helper+0x93e>
        }

        // replacement_field ::=  "{" [field_name] ["!" conversion] [":" format_spec] "}"

        const char *field_name = NULL;
   13bfa:	2300      	movs	r3, #0
   13bfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const char *field_name_top = NULL;
   13c00:	2300      	movs	r3, #0
   13c02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        char conversion = '\0';
   13c06:	2300      	movs	r3, #0
   13c08:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        const char *format_spec = NULL;
   13c0c:	2300      	movs	r3, #0
   13c0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        if (str < top && *str != '}' && *str != '!' && *str != ':') {
   13c12:	68ba      	ldr	r2, [r7, #8]
   13c14:	687b      	ldr	r3, [r7, #4]
   13c16:	429a      	cmp	r2, r3
   13c18:	d225      	bcs.n	13c66 <mp_obj_str_format_helper+0x102>
   13c1a:	68bb      	ldr	r3, [r7, #8]
   13c1c:	781b      	ldrb	r3, [r3, #0]
   13c1e:	2b7d      	cmp	r3, #125	; 0x7d
   13c20:	d021      	beq.n	13c66 <mp_obj_str_format_helper+0x102>
   13c22:	68bb      	ldr	r3, [r7, #8]
   13c24:	781b      	ldrb	r3, [r3, #0]
   13c26:	2b21      	cmp	r3, #33	; 0x21
   13c28:	d01d      	beq.n	13c66 <mp_obj_str_format_helper+0x102>
   13c2a:	68bb      	ldr	r3, [r7, #8]
   13c2c:	781b      	ldrb	r3, [r3, #0]
   13c2e:	2b3a      	cmp	r3, #58	; 0x3a
   13c30:	d019      	beq.n	13c66 <mp_obj_str_format_helper+0x102>
            field_name = (const char *)str;
   13c32:	68bb      	ldr	r3, [r7, #8]
   13c34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            while (str < top && *str != '}' && *str != '!' && *str != ':') {
   13c38:	e002      	b.n	13c40 <mp_obj_str_format_helper+0xdc>
                ++str;
   13c3a:	68bb      	ldr	r3, [r7, #8]
   13c3c:	3301      	adds	r3, #1
   13c3e:	60bb      	str	r3, [r7, #8]
            while (str < top && *str != '}' && *str != '!' && *str != ':') {
   13c40:	68ba      	ldr	r2, [r7, #8]
   13c42:	687b      	ldr	r3, [r7, #4]
   13c44:	429a      	cmp	r2, r3
   13c46:	d20b      	bcs.n	13c60 <mp_obj_str_format_helper+0xfc>
   13c48:	68bb      	ldr	r3, [r7, #8]
   13c4a:	781b      	ldrb	r3, [r3, #0]
   13c4c:	2b7d      	cmp	r3, #125	; 0x7d
   13c4e:	d007      	beq.n	13c60 <mp_obj_str_format_helper+0xfc>
   13c50:	68bb      	ldr	r3, [r7, #8]
   13c52:	781b      	ldrb	r3, [r3, #0]
   13c54:	2b21      	cmp	r3, #33	; 0x21
   13c56:	d003      	beq.n	13c60 <mp_obj_str_format_helper+0xfc>
   13c58:	68bb      	ldr	r3, [r7, #8]
   13c5a:	781b      	ldrb	r3, [r3, #0]
   13c5c:	2b3a      	cmp	r3, #58	; 0x3a
   13c5e:	d1ec      	bne.n	13c3a <mp_obj_str_format_helper+0xd6>
            }
            field_name_top = (const char *)str;
   13c60:	68bb      	ldr	r3, [r7, #8]
   13c62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        }

        // conversion ::=  "r" | "s"

        if (str < top && *str == '!') {
   13c66:	68ba      	ldr	r2, [r7, #8]
   13c68:	687b      	ldr	r3, [r7, #4]
   13c6a:	429a      	cmp	r2, r3
   13c6c:	d21b      	bcs.n	13ca6 <mp_obj_str_format_helper+0x142>
   13c6e:	68bb      	ldr	r3, [r7, #8]
   13c70:	781b      	ldrb	r3, [r3, #0]
   13c72:	2b21      	cmp	r3, #33	; 0x21
   13c74:	d117      	bne.n	13ca6 <mp_obj_str_format_helper+0x142>
            str++;
   13c76:	68bb      	ldr	r3, [r7, #8]
   13c78:	3301      	adds	r3, #1
   13c7a:	60bb      	str	r3, [r7, #8]
            if (str < top && (*str == 'r' || *str == 's')) {
   13c7c:	68ba      	ldr	r2, [r7, #8]
   13c7e:	687b      	ldr	r3, [r7, #4]
   13c80:	429a      	cmp	r2, r3
   13c82:	d20e      	bcs.n	13ca2 <mp_obj_str_format_helper+0x13e>
   13c84:	68bb      	ldr	r3, [r7, #8]
   13c86:	781b      	ldrb	r3, [r3, #0]
   13c88:	2b72      	cmp	r3, #114	; 0x72
   13c8a:	d003      	beq.n	13c94 <mp_obj_str_format_helper+0x130>
   13c8c:	68bb      	ldr	r3, [r7, #8]
   13c8e:	781b      	ldrb	r3, [r3, #0]
   13c90:	2b73      	cmp	r3, #115	; 0x73
   13c92:	d106      	bne.n	13ca2 <mp_obj_str_format_helper+0x13e>
                conversion = *str++;
   13c94:	68bb      	ldr	r3, [r7, #8]
   13c96:	1c5a      	adds	r2, r3, #1
   13c98:	60ba      	str	r2, [r7, #8]
   13c9a:	781b      	ldrb	r3, [r3, #0]
   13c9c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
   13ca0:	e001      	b.n	13ca6 <mp_obj_str_format_helper+0x142>
            } else {
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13ca2:	f7ff ff57 	bl	13b54 <terse_str_format_value_error>
                    }
                }
            }
        }

        if (str < top && *str == ':') {
   13ca6:	68ba      	ldr	r2, [r7, #8]
   13ca8:	687b      	ldr	r3, [r7, #4]
   13caa:	429a      	cmp	r2, r3
   13cac:	d231      	bcs.n	13d12 <mp_obj_str_format_helper+0x1ae>
   13cae:	68bb      	ldr	r3, [r7, #8]
   13cb0:	781b      	ldrb	r3, [r3, #0]
   13cb2:	2b3a      	cmp	r3, #58	; 0x3a
   13cb4:	d12d      	bne.n	13d12 <mp_obj_str_format_helper+0x1ae>
            str++;
   13cb6:	68bb      	ldr	r3, [r7, #8]
   13cb8:	3301      	adds	r3, #1
   13cba:	60bb      	str	r3, [r7, #8]
            // {:} is the same as {}, which is the same as {!s}
            // This makes a difference when passing in a True or False
            // '{}'.format(True) returns 'True'
            // '{:d}'.format(True) returns '1'
            // So we treat {:} as {} and this later gets treated to be {!s}
            if (*str != '}') {
   13cbc:	68bb      	ldr	r3, [r7, #8]
   13cbe:	781b      	ldrb	r3, [r3, #0]
   13cc0:	2b7d      	cmp	r3, #125	; 0x7d
   13cc2:	d026      	beq.n	13d12 <mp_obj_str_format_helper+0x1ae>
                format_spec = str;
   13cc4:	68bb      	ldr	r3, [r7, #8]
   13cc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                for (int nest = 1; str < top;) {
   13cca:	2301      	movs	r3, #1
   13ccc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   13cd0:	e019      	b.n	13d06 <mp_obj_str_format_helper+0x1a2>
                    if (*str == '{') {
   13cd2:	68bb      	ldr	r3, [r7, #8]
   13cd4:	781b      	ldrb	r3, [r3, #0]
   13cd6:	2b7b      	cmp	r3, #123	; 0x7b
   13cd8:	d105      	bne.n	13ce6 <mp_obj_str_format_helper+0x182>
                        ++nest;
   13cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   13cde:	3301      	adds	r3, #1
   13ce0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   13ce4:	e00c      	b.n	13d00 <mp_obj_str_format_helper+0x19c>
                    } else if (*str == '}') {
   13ce6:	68bb      	ldr	r3, [r7, #8]
   13ce8:	781b      	ldrb	r3, [r3, #0]
   13cea:	2b7d      	cmp	r3, #125	; 0x7d
   13cec:	d108      	bne.n	13d00 <mp_obj_str_format_helper+0x19c>
                        if (--nest == 0) {
   13cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   13cf2:	3b01      	subs	r3, #1
   13cf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   13cf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   13cfc:	2b00      	cmp	r3, #0
   13cfe:	d007      	beq.n	13d10 <mp_obj_str_format_helper+0x1ac>
                            break;
                        }
                    }
                    ++str;
   13d00:	68bb      	ldr	r3, [r7, #8]
   13d02:	3301      	adds	r3, #1
   13d04:	60bb      	str	r3, [r7, #8]
                for (int nest = 1; str < top;) {
   13d06:	68ba      	ldr	r2, [r7, #8]
   13d08:	687b      	ldr	r3, [r7, #4]
   13d0a:	429a      	cmp	r2, r3
   13d0c:	d3e1      	bcc.n	13cd2 <mp_obj_str_format_helper+0x16e>
   13d0e:	e000      	b.n	13d12 <mp_obj_str_format_helper+0x1ae>
                            break;
   13d10:	bf00      	nop
                }
            }
        }
        if (str >= top) {
   13d12:	68ba      	ldr	r2, [r7, #8]
   13d14:	687b      	ldr	r3, [r7, #4]
   13d16:	429a      	cmp	r2, r3
   13d18:	d301      	bcc.n	13d1e <mp_obj_str_format_helper+0x1ba>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   13d1a:	f7ff ff1b 	bl	13b54 <terse_str_format_value_error>
            } else {
                mp_raise_ValueError("unmatched '{' in format");
            }
        }
        if (*str != '}') {
   13d1e:	68bb      	ldr	r3, [r7, #8]
   13d20:	781b      	ldrb	r3, [r3, #0]
   13d22:	2b7d      	cmp	r3, #125	; 0x7d
   13d24:	d001      	beq.n	13d2a <mp_obj_str_format_helper+0x1c6>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   13d26:	f7ff ff15 	bl	13b54 <terse_str_format_value_error>
            } else {
                mp_raise_ValueError("expected ':' after format specifier");
            }
        }

        mp_obj_t arg = mp_const_none;
   13d2a:	4ba8      	ldr	r3, [pc, #672]	; (13fcc <mp_obj_str_format_helper+0x468>)
   13d2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        if (field_name) {
   13d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13d34:	2b00      	cmp	r3, #0
   13d36:	d07b      	beq.n	13e30 <mp_obj_str_format_helper+0x2cc>
            int index = 0;
   13d38:	2300      	movs	r3, #0
   13d3a:	643b      	str	r3, [r7, #64]	; 0x40
            if (MP_LIKELY(unichar_isdigit(*field_name))) {
   13d3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13d40:	781b      	ldrb	r3, [r3, #0]
   13d42:	4618      	mov	r0, r3
   13d44:	f7ee fc22 	bl	258c <unichar_isdigit>
   13d48:	4603      	mov	r3, r0
   13d4a:	2b00      	cmp	r3, #0
   13d4c:	d028      	beq.n	13da0 <mp_obj_str_format_helper+0x23c>
                if (*arg_i > 0) {
   13d4e:	683b      	ldr	r3, [r7, #0]
   13d50:	681b      	ldr	r3, [r3, #0]
   13d52:	2b00      	cmp	r3, #0
   13d54:	dd01      	ble.n	13d5a <mp_obj_str_format_helper+0x1f6>
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   13d56:	f7ff fefd 	bl	13b54 <terse_str_format_value_error>
                    } else {
                        mp_raise_ValueError(
                            "can't switch from automatic field numbering to manual field specification");
                    }
                }
                field_name = str_to_int(field_name, field_name_top, &index);
   13d5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
   13d5e:	461a      	mov	r2, r3
   13d60:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
   13d64:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
   13d68:	f7ff fe3e 	bl	139e8 <str_to_int>
   13d6c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                if ((uint)index >= n_args - 1) {
   13d70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   13d74:	3b01      	subs	r3, #1
   13d76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   13d78:	4293      	cmp	r3, r2
   13d7a:	d803      	bhi.n	13d84 <mp_obj_str_format_helper+0x220>
                    mp_raise_msg(&mp_type_IndexError, "tuple index out of range");
   13d7c:	4994      	ldr	r1, [pc, #592]	; (13fd0 <mp_obj_str_format_helper+0x46c>)
   13d7e:	4895      	ldr	r0, [pc, #596]	; (13fd4 <mp_obj_str_format_helper+0x470>)
   13d80:	f7f9 f8f8 	bl	cf74 <mp_raise_msg>
                }
                arg = args[index + 1];
   13d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13d86:	3301      	adds	r3, #1
   13d88:	009b      	lsls	r3, r3, #2
   13d8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
   13d8e:	4413      	add	r3, r2
   13d90:	681b      	ldr	r3, [r3, #0]
   13d92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                *arg_i = -1;
   13d96:	683b      	ldr	r3, [r7, #0]
   13d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13d9c:	601a      	str	r2, [r3, #0]
   13d9e:	e03e      	b.n	13e1e <mp_obj_str_format_helper+0x2ba>
            } else {
                const char *lookup;
                for (lookup = field_name; lookup < field_name_top && *lookup != '.' && *lookup != '['; lookup++);
   13da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13da4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   13da8:	e004      	b.n	13db4 <mp_obj_str_format_helper+0x250>
   13daa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13dae:	3301      	adds	r3, #1
   13db0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   13db4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   13db8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   13dbc:	429a      	cmp	r2, r3
   13dbe:	d209      	bcs.n	13dd4 <mp_obj_str_format_helper+0x270>
   13dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13dc4:	781b      	ldrb	r3, [r3, #0]
   13dc6:	2b2e      	cmp	r3, #46	; 0x2e
   13dc8:	d004      	beq.n	13dd4 <mp_obj_str_format_helper+0x270>
   13dca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13dce:	781b      	ldrb	r3, [r3, #0]
   13dd0:	2b5b      	cmp	r3, #91	; 0x5b
   13dd2:	d1ea      	bne.n	13daa <mp_obj_str_format_helper+0x246>
                mp_obj_t field_q = mp_obj_new_str_via_qstr(field_name, lookup - field_name); // should it be via qstr?
   13dd4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   13dd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13ddc:	1ad3      	subs	r3, r2, r3
   13dde:	4619      	mov	r1, r3
   13de0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
   13de4:	f001 fb2e 	bl	15444 <mp_obj_new_str_via_qstr>
   13de8:	6738      	str	r0, [r7, #112]	; 0x70
                field_name = lookup;
   13dea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13dee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                mp_map_elem_t *key_elem = mp_map_lookup(kwargs, field_q, MP_MAP_LOOKUP);
   13df2:	2200      	movs	r2, #0
   13df4:	6f39      	ldr	r1, [r7, #112]	; 0x70
   13df6:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
   13dfa:	f7f9 fba1 	bl	d540 <mp_map_lookup>
   13dfe:	66f8      	str	r0, [r7, #108]	; 0x6c
                if (key_elem == NULL) {
   13e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   13e02:	2b00      	cmp	r3, #0
   13e04:	d107      	bne.n	13e16 <mp_obj_str_format_helper+0x2b2>
                    nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, field_q));
   13e06:	6f39      	ldr	r1, [r7, #112]	; 0x70
   13e08:	4873      	ldr	r0, [pc, #460]	; (13fd8 <mp_obj_str_format_helper+0x474>)
   13e0a:	f7fb fbc5 	bl	f598 <mp_obj_new_exception_arg1>
   13e0e:	4603      	mov	r3, r0
   13e10:	4618      	mov	r0, r3
   13e12:	f7ec fa65 	bl	2e0 <nlr_jump>
                }
                arg = key_elem->value;
   13e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   13e18:	685b      	ldr	r3, [r3, #4]
   13e1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
            if (field_name < field_name_top) {
   13e1e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   13e22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   13e26:	429a      	cmp	r2, r3
   13e28:	d223      	bcs.n	13e72 <mp_obj_str_format_helper+0x30e>
                mp_raise_NotImplementedError("attributes not supported yet");
   13e2a:	486c      	ldr	r0, [pc, #432]	; (13fdc <mp_obj_str_format_helper+0x478>)
   13e2c:	f7f9 f8e0 	bl	cff0 <mp_raise_NotImplementedError>
            }
        } else {
            if (*arg_i < 0) {
   13e30:	683b      	ldr	r3, [r7, #0]
   13e32:	681b      	ldr	r3, [r3, #0]
   13e34:	2b00      	cmp	r3, #0
   13e36:	da01      	bge.n	13e3c <mp_obj_str_format_helper+0x2d8>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13e38:	f7ff fe8c 	bl	13b54 <terse_str_format_value_error>
                } else {
                    mp_raise_ValueError(
                        "can't switch from manual field specification to automatic field numbering");
                }
            }
            if ((uint)*arg_i >= n_args - 1) {
   13e3c:	683b      	ldr	r3, [r7, #0]
   13e3e:	681b      	ldr	r3, [r3, #0]
   13e40:	461a      	mov	r2, r3
   13e42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   13e46:	3b01      	subs	r3, #1
   13e48:	429a      	cmp	r2, r3
   13e4a:	d303      	bcc.n	13e54 <mp_obj_str_format_helper+0x2f0>
                mp_raise_msg(&mp_type_IndexError, "tuple index out of range");
   13e4c:	4960      	ldr	r1, [pc, #384]	; (13fd0 <mp_obj_str_format_helper+0x46c>)
   13e4e:	4861      	ldr	r0, [pc, #388]	; (13fd4 <mp_obj_str_format_helper+0x470>)
   13e50:	f7f9 f890 	bl	cf74 <mp_raise_msg>
            }
            arg = args[(*arg_i) + 1];
   13e54:	683b      	ldr	r3, [r7, #0]
   13e56:	681b      	ldr	r3, [r3, #0]
   13e58:	3301      	adds	r3, #1
   13e5a:	009b      	lsls	r3, r3, #2
   13e5c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
   13e60:	4413      	add	r3, r2
   13e62:	681b      	ldr	r3, [r3, #0]
   13e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            (*arg_i)++;
   13e68:	683b      	ldr	r3, [r7, #0]
   13e6a:	681b      	ldr	r3, [r3, #0]
   13e6c:	1c5a      	adds	r2, r3, #1
   13e6e:	683b      	ldr	r3, [r7, #0]
   13e70:	601a      	str	r2, [r3, #0]
        }
        if (!format_spec && !conversion) {
   13e72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   13e76:	2b00      	cmp	r3, #0
   13e78:	d106      	bne.n	13e88 <mp_obj_str_format_helper+0x324>
   13e7a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   13e7e:	2b00      	cmp	r3, #0
   13e80:	d102      	bne.n	13e88 <mp_obj_str_format_helper+0x324>
            conversion = 's';
   13e82:	2373      	movs	r3, #115	; 0x73
   13e84:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        }
        if (conversion) {
   13e88:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   13e8c:	2b00      	cmp	r3, #0
   13e8e:	d02e      	beq.n	13eee <mp_obj_str_format_helper+0x38a>
            mp_print_kind_t print_kind;
            if (conversion == 's') {
   13e90:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   13e94:	2b73      	cmp	r3, #115	; 0x73
   13e96:	d103      	bne.n	13ea0 <mp_obj_str_format_helper+0x33c>
                print_kind = PRINT_STR;
   13e98:	2300      	movs	r3, #0
   13e9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   13e9e:	e00d      	b.n	13ebc <mp_obj_str_format_helper+0x358>
            } else {
                assert(conversion == 'r');
   13ea0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   13ea4:	2b72      	cmp	r3, #114	; 0x72
   13ea6:	d006      	beq.n	13eb6 <mp_obj_str_format_helper+0x352>
   13ea8:	4b4d      	ldr	r3, [pc, #308]	; (13fe0 <mp_obj_str_format_helper+0x47c>)
   13eaa:	4a4e      	ldr	r2, [pc, #312]	; (13fe4 <mp_obj_str_format_helper+0x480>)
   13eac:	f240 414f 	movw	r1, #1103	; 0x44f
   13eb0:	484d      	ldr	r0, [pc, #308]	; (13fe8 <mp_obj_str_format_helper+0x484>)
   13eb2:	f007 fc67 	bl	1b784 <__assert_func>
                print_kind = PRINT_REPR;
   13eb6:	2301      	movs	r3, #1
   13eb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }
            vstr_t arg_vstr;
            mp_print_t arg_print;
            vstr_init_print(&arg_vstr, 16, &arg_print);
   13ebc:	f107 0228 	add.w	r2, r7, #40	; 0x28
   13ec0:	f107 0330 	add.w	r3, r7, #48	; 0x30
   13ec4:	2110      	movs	r1, #16
   13ec6:	4618      	mov	r0, r3
   13ec8:	f7ed fb32 	bl	1530 <vstr_init_print>
            mp_obj_print_helper(&arg_print, arg, print_kind);
   13ecc:	f107 0328 	add.w	r3, r7, #40	; 0x28
   13ed0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   13ed4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   13ed8:	4618      	mov	r0, r3
   13eda:	f7f9 fd0d 	bl	d8f8 <mp_obj_print_helper>
            arg = mp_obj_new_str_from_vstr(&mp_type_str, &arg_vstr);
   13ede:	f107 0330 	add.w	r3, r7, #48	; 0x30
   13ee2:	4619      	mov	r1, r3
   13ee4:	4841      	ldr	r0, [pc, #260]	; (13fec <mp_obj_str_format_helper+0x488>)
   13ee6:	f001 fabf 	bl	15468 <mp_obj_new_str_from_vstr>
   13eea:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
        }

        char fill = '\0';
   13eee:	2300      	movs	r3, #0
   13ef0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        char align = '\0';
   13ef4:	2300      	movs	r3, #0
   13ef6:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
        int width = -1;
   13efa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13efe:	64bb      	str	r3, [r7, #72]	; 0x48
        int precision = -1;
   13f00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13f04:	647b      	str	r3, [r7, #68]	; 0x44
        char type = '\0';
   13f06:	2300      	movs	r3, #0
   13f08:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
        int flags = 0;
   13f0c:	2300      	movs	r3, #0
   13f0e:	67bb      	str	r3, [r7, #120]	; 0x78

        if (format_spec) {
   13f10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   13f14:	2b00      	cmp	r3, #0
   13f16:	f000 80ce 	beq.w	140b6 <mp_obj_str_format_helper+0x552>
            // precision   ::=  integer
            // type        ::=  "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" | "n" | "o" | "s" | "x" | "X" | "%"

            // recursively call the formatter to format any nested specifiers
            MP_STACK_CHECK();
            vstr_t format_spec_vstr = mp_obj_str_format_helper(format_spec, str, arg_i, n_args, args, kwargs);
   13f1a:	f107 0018 	add.w	r0, r7, #24
   13f1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   13f22:	9302      	str	r3, [sp, #8]
   13f24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   13f28:	9301      	str	r3, [sp, #4]
   13f2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   13f2e:	9300      	str	r3, [sp, #0]
   13f30:	683b      	ldr	r3, [r7, #0]
   13f32:	68ba      	ldr	r2, [r7, #8]
   13f34:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   13f38:	f7ff fe14 	bl	13b64 <mp_obj_str_format_helper>
            const char *s = vstr_null_terminated_str(&format_spec_vstr);
   13f3c:	f107 0318 	add.w	r3, r7, #24
   13f40:	4618      	mov	r0, r3
   13f42:	f7ed fbe1 	bl	1708 <vstr_null_terminated_str>
   13f46:	6778      	str	r0, [r7, #116]	; 0x74
            const char *stop = s + format_spec_vstr.len;
   13f48:	69fb      	ldr	r3, [r7, #28]
   13f4a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   13f4c:	4413      	add	r3, r2
   13f4e:	66bb      	str	r3, [r7, #104]	; 0x68
            if (isalignment(*s)) {
   13f50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13f52:	781b      	ldrb	r3, [r3, #0]
   13f54:	4618      	mov	r0, r3
   13f56:	f7ff fd7f 	bl	13a58 <isalignment>
   13f5a:	4603      	mov	r3, r0
   13f5c:	2b00      	cmp	r3, #0
   13f5e:	d006      	beq.n	13f6e <mp_obj_str_format_helper+0x40a>
                align = *s++;
   13f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13f62:	1c5a      	adds	r2, r3, #1
   13f64:	677a      	str	r2, [r7, #116]	; 0x74
   13f66:	781b      	ldrb	r3, [r3, #0]
   13f68:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
   13f6c:	e018      	b.n	13fa0 <mp_obj_str_format_helper+0x43c>
            } else if (*s && isalignment(s[1])) {
   13f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13f70:	781b      	ldrb	r3, [r3, #0]
   13f72:	2b00      	cmp	r3, #0
   13f74:	d014      	beq.n	13fa0 <mp_obj_str_format_helper+0x43c>
   13f76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13f78:	3301      	adds	r3, #1
   13f7a:	781b      	ldrb	r3, [r3, #0]
   13f7c:	4618      	mov	r0, r3
   13f7e:	f7ff fd6b 	bl	13a58 <isalignment>
   13f82:	4603      	mov	r3, r0
   13f84:	2b00      	cmp	r3, #0
   13f86:	d00b      	beq.n	13fa0 <mp_obj_str_format_helper+0x43c>
                fill = *s++;
   13f88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13f8a:	1c5a      	adds	r2, r3, #1
   13f8c:	677a      	str	r2, [r7, #116]	; 0x74
   13f8e:	781b      	ldrb	r3, [r3, #0]
   13f90:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
                align = *s++;
   13f94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13f96:	1c5a      	adds	r2, r3, #1
   13f98:	677a      	str	r2, [r7, #116]	; 0x74
   13f9a:	781b      	ldrb	r3, [r3, #0]
   13f9c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
            }
            if (*s == '+' || *s == '-' || *s == ' ') {
   13fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13fa2:	781b      	ldrb	r3, [r3, #0]
   13fa4:	2b2b      	cmp	r3, #43	; 0x2b
   13fa6:	d007      	beq.n	13fb8 <mp_obj_str_format_helper+0x454>
   13fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13faa:	781b      	ldrb	r3, [r3, #0]
   13fac:	2b2d      	cmp	r3, #45	; 0x2d
   13fae:	d003      	beq.n	13fb8 <mp_obj_str_format_helper+0x454>
   13fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13fb2:	781b      	ldrb	r3, [r3, #0]
   13fb4:	2b20      	cmp	r3, #32
   13fb6:	d126      	bne.n	14006 <mp_obj_str_format_helper+0x4a2>
                if (*s == '+') {
   13fb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13fba:	781b      	ldrb	r3, [r3, #0]
   13fbc:	2b2b      	cmp	r3, #43	; 0x2b
   13fbe:	d117      	bne.n	13ff0 <mp_obj_str_format_helper+0x48c>
                    flags |= PF_FLAG_SHOW_SIGN;
   13fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13fc2:	f043 0302 	orr.w	r3, r3, #2
   13fc6:	67bb      	str	r3, [r7, #120]	; 0x78
   13fc8:	e01a      	b.n	14000 <mp_obj_str_format_helper+0x49c>
   13fca:	bf00      	nop
   13fcc:	000234d4 	.word	0x000234d4
   13fd0:	000238d8 	.word	0x000238d8
   13fd4:	00022550 	.word	0x00022550
   13fd8:	0002258c 	.word	0x0002258c
   13fdc:	000238f4 	.word	0x000238f4
   13fe0:	00023914 	.word	0x00023914
   13fe4:	00023c44 	.word	0x00023c44
   13fe8:	000236ac 	.word	0x000236ac
   13fec:	00023b68 	.word	0x00023b68
                } else if (*s == ' ') {
   13ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13ff2:	781b      	ldrb	r3, [r3, #0]
   13ff4:	2b20      	cmp	r3, #32
   13ff6:	d103      	bne.n	14000 <mp_obj_str_format_helper+0x49c>
                    flags |= PF_FLAG_SPACE_SIGN;
   13ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13ffa:	f043 0304 	orr.w	r3, r3, #4
   13ffe:	67bb      	str	r3, [r7, #120]	; 0x78
                }
                s++;
   14000:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   14002:	3301      	adds	r3, #1
   14004:	677b      	str	r3, [r7, #116]	; 0x74
            }
            if (*s == '#') {
   14006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   14008:	781b      	ldrb	r3, [r3, #0]
   1400a:	2b23      	cmp	r3, #35	; 0x23
   1400c:	d106      	bne.n	1401c <mp_obj_str_format_helper+0x4b8>
                flags |= PF_FLAG_SHOW_PREFIX;
   1400e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14010:	f043 0310 	orr.w	r3, r3, #16
   14014:	67bb      	str	r3, [r7, #120]	; 0x78
                s++;
   14016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   14018:	3301      	adds	r3, #1
   1401a:	677b      	str	r3, [r7, #116]	; 0x74
            }
            if (*s == '0') {
   1401c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1401e:	781b      	ldrb	r3, [r3, #0]
   14020:	2b30      	cmp	r3, #48	; 0x30
   14022:	d10d      	bne.n	14040 <mp_obj_str_format_helper+0x4dc>
                if (!align) {
   14024:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   14028:	2b00      	cmp	r3, #0
   1402a:	d102      	bne.n	14032 <mp_obj_str_format_helper+0x4ce>
                    align = '=';
   1402c:	233d      	movs	r3, #61	; 0x3d
   1402e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
                }
                if (!fill) {
   14032:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14036:	2b00      	cmp	r3, #0
   14038:	d102      	bne.n	14040 <mp_obj_str_format_helper+0x4dc>
                    fill = '0';
   1403a:	2330      	movs	r3, #48	; 0x30
   1403c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
                }
            }
            s = str_to_int(s, stop, &width);
   14040:	f107 0348 	add.w	r3, r7, #72	; 0x48
   14044:	461a      	mov	r2, r3
   14046:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   14048:	6f78      	ldr	r0, [r7, #116]	; 0x74
   1404a:	f7ff fccd 	bl	139e8 <str_to_int>
   1404e:	6778      	str	r0, [r7, #116]	; 0x74
            if (*s == ',') {
   14050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   14052:	781b      	ldrb	r3, [r3, #0]
   14054:	2b2c      	cmp	r3, #44	; 0x2c
   14056:	d106      	bne.n	14066 <mp_obj_str_format_helper+0x502>
                flags |= PF_FLAG_SHOW_COMMA;
   14058:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1405a:	f043 0320 	orr.w	r3, r3, #32
   1405e:	67bb      	str	r3, [r7, #120]	; 0x78
                s++;
   14060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   14062:	3301      	adds	r3, #1
   14064:	677b      	str	r3, [r7, #116]	; 0x74
            }
            if (*s == '.') {
   14066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   14068:	781b      	ldrb	r3, [r3, #0]
   1406a:	2b2e      	cmp	r3, #46	; 0x2e
   1406c:	d10a      	bne.n	14084 <mp_obj_str_format_helper+0x520>
                s++;
   1406e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   14070:	3301      	adds	r3, #1
   14072:	677b      	str	r3, [r7, #116]	; 0x74
                s = str_to_int(s, stop, &precision);
   14074:	f107 0344 	add.w	r3, r7, #68	; 0x44
   14078:	461a      	mov	r2, r3
   1407a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   1407c:	6f78      	ldr	r0, [r7, #116]	; 0x74
   1407e:	f7ff fcb3 	bl	139e8 <str_to_int>
   14082:	6778      	str	r0, [r7, #116]	; 0x74
            }
            if (istype(*s)) {
   14084:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   14086:	781b      	ldrb	r3, [r3, #0]
   14088:	4618      	mov	r0, r3
   1408a:	f7ff fd01 	bl	13a90 <istype>
   1408e:	4603      	mov	r3, r0
   14090:	2b00      	cmp	r3, #0
   14092:	d005      	beq.n	140a0 <mp_obj_str_format_helper+0x53c>
                type = *s++;
   14094:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   14096:	1c5a      	adds	r2, r3, #1
   14098:	677a      	str	r2, [r7, #116]	; 0x74
   1409a:	781b      	ldrb	r3, [r3, #0]
   1409c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
            }
            if (*s) {
   140a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   140a2:	781b      	ldrb	r3, [r3, #0]
   140a4:	2b00      	cmp	r3, #0
   140a6:	d001      	beq.n	140ac <mp_obj_str_format_helper+0x548>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   140a8:	f7ff fd54 	bl	13b54 <terse_str_format_value_error>
                } else {
                    mp_raise_ValueError("invalid format specifier");
                }
            }
            vstr_clear(&format_spec_vstr);
   140ac:	f107 0318 	add.w	r3, r7, #24
   140b0:	4618      	mov	r0, r3
   140b2:	f7ed fa53 	bl	155c <vstr_clear>
        }
        if (!align) {
   140b6:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   140ba:	2b00      	cmp	r3, #0
   140bc:	d10d      	bne.n	140da <mp_obj_str_format_helper+0x576>
            if (arg_looks_numeric(arg)) {
   140be:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   140c2:	f7ff fd2f 	bl	13b24 <arg_looks_numeric>
   140c6:	4603      	mov	r3, r0
   140c8:	2b00      	cmp	r3, #0
   140ca:	d003      	beq.n	140d4 <mp_obj_str_format_helper+0x570>
                align = '>';
   140cc:	233e      	movs	r3, #62	; 0x3e
   140ce:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
   140d2:	e002      	b.n	140da <mp_obj_str_format_helper+0x576>
            } else {
                align = '<';
   140d4:	233c      	movs	r3, #60	; 0x3c
   140d6:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
            }
        }
        if (!fill) {
   140da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   140de:	2b00      	cmp	r3, #0
   140e0:	d102      	bne.n	140e8 <mp_obj_str_format_helper+0x584>
            fill = ' ';
   140e2:	2320      	movs	r3, #32
   140e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        }

        if (flags & (PF_FLAG_SHOW_SIGN | PF_FLAG_SPACE_SIGN)) {
   140e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   140ea:	f003 0306 	and.w	r3, r3, #6
   140ee:	2b00      	cmp	r3, #0
   140f0:	d00b      	beq.n	1410a <mp_obj_str_format_helper+0x5a6>
            if (type == 's') {
   140f2:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   140f6:	2b73      	cmp	r3, #115	; 0x73
   140f8:	d101      	bne.n	140fe <mp_obj_str_format_helper+0x59a>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   140fa:	f7ff fd2b 	bl	13b54 <terse_str_format_value_error>
                } else {
                    mp_raise_ValueError("sign not allowed in string format specifier");
                }
            }
            if (type == 'c') {
   140fe:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   14102:	2b63      	cmp	r3, #99	; 0x63
   14104:	d101      	bne.n	1410a <mp_obj_str_format_helper+0x5a6>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   14106:	f7ff fd25 	bl	13b54 <terse_str_format_value_error>
                        "sign not allowed with integer format specifier 'c'");
                }
            }
        }

        switch (align) {
   1410a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   1410e:	2b3d      	cmp	r3, #61	; 0x3d
   14110:	d008      	beq.n	14124 <mp_obj_str_format_helper+0x5c0>
   14112:	2b5e      	cmp	r3, #94	; 0x5e
   14114:	d00b      	beq.n	1412e <mp_obj_str_format_helper+0x5ca>
   14116:	2b3c      	cmp	r3, #60	; 0x3c
   14118:	d10e      	bne.n	14138 <mp_obj_str_format_helper+0x5d4>
            case '<': flags |= PF_FLAG_LEFT_ADJUST;     break;
   1411a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1411c:	f043 0301 	orr.w	r3, r3, #1
   14120:	67bb      	str	r3, [r7, #120]	; 0x78
   14122:	e009      	b.n	14138 <mp_obj_str_format_helper+0x5d4>
            case '=': flags |= PF_FLAG_PAD_AFTER_SIGN;  break;
   14124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1412a:	67bb      	str	r3, [r7, #120]	; 0x78
   1412c:	e004      	b.n	14138 <mp_obj_str_format_helper+0x5d4>
            case '^': flags |= PF_FLAG_CENTER_ADJUST;   break;
   1412e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14134:	67bb      	str	r3, [r7, #120]	; 0x78
   14136:	bf00      	nop
        }

        if (arg_looks_integer(arg)) {
   14138:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   1413c:	f7ff fcc4 	bl	13ac8 <arg_looks_integer>
   14140:	4603      	mov	r3, r0
   14142:	2b00      	cmp	r3, #0
   14144:	f000 8167 	beq.w	14416 <mp_obj_str_format_helper+0x8b2>
            switch (type) {
   14148:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   1414c:	2b78      	cmp	r3, #120	; 0x78
   1414e:	f200 815f 	bhi.w	14410 <mp_obj_str_format_helper+0x8ac>
   14152:	a201      	add	r2, pc, #4	; (adr r2, 14158 <mp_obj_str_format_helper+0x5f4>)
   14154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14158:	0001438b 	.word	0x0001438b
   1415c:	00014411 	.word	0x00014411
   14160:	00014411 	.word	0x00014411
   14164:	00014411 	.word	0x00014411
   14168:	00014411 	.word	0x00014411
   1416c:	00014411 	.word	0x00014411
   14170:	00014411 	.word	0x00014411
   14174:	00014411 	.word	0x00014411
   14178:	00014411 	.word	0x00014411
   1417c:	00014411 	.word	0x00014411
   14180:	00014411 	.word	0x00014411
   14184:	00014411 	.word	0x00014411
   14188:	00014411 	.word	0x00014411
   1418c:	00014411 	.word	0x00014411
   14190:	00014411 	.word	0x00014411
   14194:	00014411 	.word	0x00014411
   14198:	00014411 	.word	0x00014411
   1419c:	00014411 	.word	0x00014411
   141a0:	00014411 	.word	0x00014411
   141a4:	00014411 	.word	0x00014411
   141a8:	00014411 	.word	0x00014411
   141ac:	00014411 	.word	0x00014411
   141b0:	00014411 	.word	0x00014411
   141b4:	00014411 	.word	0x00014411
   141b8:	00014411 	.word	0x00014411
   141bc:	00014411 	.word	0x00014411
   141c0:	00014411 	.word	0x00014411
   141c4:	00014411 	.word	0x00014411
   141c8:	00014411 	.word	0x00014411
   141cc:	00014411 	.word	0x00014411
   141d0:	00014411 	.word	0x00014411
   141d4:	00014411 	.word	0x00014411
   141d8:	00014411 	.word	0x00014411
   141dc:	00014411 	.word	0x00014411
   141e0:	00014411 	.word	0x00014411
   141e4:	00014411 	.word	0x00014411
   141e8:	00014411 	.word	0x00014411
   141ec:	00014415 	.word	0x00014415
   141f0:	00014411 	.word	0x00014411
   141f4:	00014411 	.word	0x00014411
   141f8:	00014411 	.word	0x00014411
   141fc:	00014411 	.word	0x00014411
   14200:	00014411 	.word	0x00014411
   14204:	00014411 	.word	0x00014411
   14208:	00014411 	.word	0x00014411
   1420c:	00014411 	.word	0x00014411
   14210:	00014411 	.word	0x00014411
   14214:	00014411 	.word	0x00014411
   14218:	00014411 	.word	0x00014411
   1421c:	00014411 	.word	0x00014411
   14220:	00014411 	.word	0x00014411
   14224:	00014411 	.word	0x00014411
   14228:	00014411 	.word	0x00014411
   1422c:	00014411 	.word	0x00014411
   14230:	00014411 	.word	0x00014411
   14234:	00014411 	.word	0x00014411
   14238:	00014411 	.word	0x00014411
   1423c:	00014411 	.word	0x00014411
   14240:	00014411 	.word	0x00014411
   14244:	00014411 	.word	0x00014411
   14248:	00014411 	.word	0x00014411
   1424c:	00014411 	.word	0x00014411
   14250:	00014411 	.word	0x00014411
   14254:	00014411 	.word	0x00014411
   14258:	00014411 	.word	0x00014411
   1425c:	00014411 	.word	0x00014411
   14260:	00014411 	.word	0x00014411
   14264:	00014411 	.word	0x00014411
   14268:	00014411 	.word	0x00014411
   1426c:	00014415 	.word	0x00014415
   14270:	00014415 	.word	0x00014415
   14274:	00014415 	.word	0x00014415
   14278:	00014411 	.word	0x00014411
   1427c:	00014411 	.word	0x00014411
   14280:	00014411 	.word	0x00014411
   14284:	00014411 	.word	0x00014411
   14288:	00014411 	.word	0x00014411
   1428c:	00014411 	.word	0x00014411
   14290:	00014411 	.word	0x00014411
   14294:	00014411 	.word	0x00014411
   14298:	00014411 	.word	0x00014411
   1429c:	00014411 	.word	0x00014411
   142a0:	00014411 	.word	0x00014411
   142a4:	00014411 	.word	0x00014411
   142a8:	00014411 	.word	0x00014411
   142ac:	00014411 	.word	0x00014411
   142b0:	00014411 	.word	0x00014411
   142b4:	00014411 	.word	0x00014411
   142b8:	000143e5 	.word	0x000143e5
   142bc:	00014411 	.word	0x00014411
   142c0:	00014411 	.word	0x00014411
   142c4:	00014411 	.word	0x00014411
   142c8:	00014411 	.word	0x00014411
   142cc:	00014411 	.word	0x00014411
   142d0:	00014411 	.word	0x00014411
   142d4:	00014411 	.word	0x00014411
   142d8:	00014411 	.word	0x00014411
   142dc:	00014411 	.word	0x00014411
   142e0:	0001433d 	.word	0x0001433d
   142e4:	00014361 	.word	0x00014361
   142e8:	0001438b 	.word	0x0001438b
   142ec:	00014415 	.word	0x00014415
   142f0:	00014415 	.word	0x00014415
   142f4:	00014415 	.word	0x00014415
   142f8:	00014411 	.word	0x00014411
   142fc:	00014411 	.word	0x00014411
   14300:	00014411 	.word	0x00014411
   14304:	00014411 	.word	0x00014411
   14308:	00014411 	.word	0x00014411
   1430c:	00014411 	.word	0x00014411
   14310:	0001438b 	.word	0x0001438b
   14314:	000143af 	.word	0x000143af
   14318:	00014411 	.word	0x00014411
   1431c:	00014411 	.word	0x00014411
   14320:	00014411 	.word	0x00014411
   14324:	00014411 	.word	0x00014411
   14328:	00014411 	.word	0x00014411
   1432c:	00014411 	.word	0x00014411
   14330:	00014411 	.word	0x00014411
   14334:	00014411 	.word	0x00014411
   14338:	000143e5 	.word	0x000143e5
                case 'b':
                    mp_print_mp_int(&print, arg, 2, 'a', flags, fill, width, 0);
   1433c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1433e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   14342:	2200      	movs	r2, #0
   14344:	9203      	str	r2, [sp, #12]
   14346:	9302      	str	r3, [sp, #8]
   14348:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   1434c:	9301      	str	r3, [sp, #4]
   1434e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14350:	9300      	str	r3, [sp, #0]
   14352:	2361      	movs	r3, #97	; 0x61
   14354:	2202      	movs	r2, #2
   14356:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   1435a:	f7ed fcb1 	bl	1cc0 <mp_print_mp_int>
                    continue;
   1435e:	e0a0      	b.n	144a2 <mp_obj_str_format_helper+0x93e>

                case 'c':
                {
                    char ch = mp_obj_get_int(arg);
   14360:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   14364:	f7f9 fc74 	bl	dc50 <mp_obj_get_int>
   14368:	4603      	mov	r3, r0
   1436a:	b2db      	uxtb	r3, r3
   1436c:	75fb      	strb	r3, [r7, #23]
                    mp_print_strn(&print, &ch, 1, flags, fill, width);
   1436e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14370:	f107 0117 	add.w	r1, r7, #23
   14374:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   14378:	9301      	str	r3, [sp, #4]
   1437a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   1437e:	9300      	str	r3, [sp, #0]
   14380:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14382:	2201      	movs	r2, #1
   14384:	f7ed fb5c 	bl	1a40 <mp_print_strn>
   14388:	e08b      	b.n	144a2 <mp_obj_str_format_helper+0x93e>
                }

                case '\0':  // No explicit format type implies 'd'
                case 'n':   // I don't think we support locales in uPy so use 'd'
                case 'd':
                    mp_print_mp_int(&print, arg, 10, 'a', flags, fill, width, 0);
   1438a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1438c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   14390:	2200      	movs	r2, #0
   14392:	9203      	str	r2, [sp, #12]
   14394:	9302      	str	r3, [sp, #8]
   14396:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   1439a:	9301      	str	r3, [sp, #4]
   1439c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1439e:	9300      	str	r3, [sp, #0]
   143a0:	2361      	movs	r3, #97	; 0x61
   143a2:	220a      	movs	r2, #10
   143a4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   143a8:	f7ed fc8a 	bl	1cc0 <mp_print_mp_int>
                    continue;
   143ac:	e079      	b.n	144a2 <mp_obj_str_format_helper+0x93e>

                case 'o':
                    if (flags & PF_FLAG_SHOW_PREFIX) {
   143ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   143b0:	f003 0310 	and.w	r3, r3, #16
   143b4:	2b00      	cmp	r3, #0
   143b6:	d003      	beq.n	143c0 <mp_obj_str_format_helper+0x85c>
                        flags |= PF_FLAG_SHOW_OCTAL_LETTER;
   143b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   143ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   143be:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    mp_print_mp_int(&print, arg, 8, 'a', flags, fill, width, 0);
   143c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   143c2:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   143c6:	2200      	movs	r2, #0
   143c8:	9203      	str	r2, [sp, #12]
   143ca:	9302      	str	r3, [sp, #8]
   143cc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   143d0:	9301      	str	r3, [sp, #4]
   143d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   143d4:	9300      	str	r3, [sp, #0]
   143d6:	2361      	movs	r3, #97	; 0x61
   143d8:	2208      	movs	r2, #8
   143da:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   143de:	f7ed fc6f 	bl	1cc0 <mp_print_mp_int>
                    continue;
   143e2:	e05e      	b.n	144a2 <mp_obj_str_format_helper+0x93e>

                case 'X':
                case 'x':
                    mp_print_mp_int(&print, arg, 16, type - ('X' - 'A'), flags, fill, width, 0);
   143e4:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   143e8:	f1a3 0117 	sub.w	r1, r3, #23
   143ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   143ee:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   143f2:	2200      	movs	r2, #0
   143f4:	9203      	str	r2, [sp, #12]
   143f6:	9302      	str	r3, [sp, #8]
   143f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   143fc:	9301      	str	r3, [sp, #4]
   143fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14400:	9300      	str	r3, [sp, #0]
   14402:	460b      	mov	r3, r1
   14404:	2210      	movs	r2, #16
   14406:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   1440a:	f7ed fc59 	bl	1cc0 <mp_print_mp_int>
                    continue;
   1440e:	e048      	b.n	144a2 <mp_obj_str_format_helper+0x93e>
                    // looks like an integer
                    break;

                default:
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   14410:	f7ff fba0 	bl	13b54 <terse_str_format_value_error>
                    break;
   14414:	bf00      	nop
            }
        }

        // NOTE: no else here. We need the e, f, g etc formats for integer
        //       arguments (from above if) to take this if.
        if (arg_looks_numeric(arg)) {
   14416:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   1441a:	f7ff fb83 	bl	13b24 <arg_looks_numeric>
   1441e:	4603      	mov	r3, r0
   14420:	2b00      	cmp	r3, #0
   14422:	d00f      	beq.n	14444 <mp_obj_str_format_helper+0x8e0>
            if (!type) {
   14424:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   14428:	2b00      	cmp	r3, #0
   1442a:	d102      	bne.n	14432 <mp_obj_str_format_helper+0x8ce>
                // CPython sources say:
                //   Omitted type specifier.  Behaves in the same way as repr(x)
                //   and str(x) if no precision is given, else like 'g', but with
                //   at least one digit after the decimal point. */

                type = 'g';
   1442c:	2367      	movs	r3, #103	; 0x67
   1442e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
            }
            if (type == 'n') {
   14432:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   14436:	2b6e      	cmp	r3, #110	; 0x6e
   14438:	d102      	bne.n	14440 <mp_obj_str_format_helper+0x8dc>
                type = 'g';
   1443a:	2367      	movs	r3, #103	; 0x67
   1443c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
                    break;
#endif

                default:
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   14440:	f7ff fb88 	bl	13b54 <terse_str_format_value_error>
                    }
            }
        } else {
            // arg doesn't look like a number

            if (align == '=') {
   14444:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   14448:	2b3d      	cmp	r3, #61	; 0x3d
   1444a:	d101      	bne.n	14450 <mp_obj_str_format_helper+0x8ec>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   1444c:	f7ff fb82 	bl	13b54 <terse_str_format_value_error>
                    mp_raise_ValueError(
                        "'=' alignment not allowed in string format specifier");
                }
            }

            switch (type) {
   14450:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   14454:	2b00      	cmp	r3, #0
   14456:	d001      	beq.n	1445c <mp_obj_str_format_helper+0x8f8>
   14458:	2b73      	cmp	r3, #115	; 0x73
   1445a:	d120      	bne.n	1449e <mp_obj_str_format_helper+0x93a>
                case '\0': // no explicit format type implies 's'
                case 's': {
                    size_t slen;
                    const char *s = mp_obj_str_get_data(arg, &slen);
   1445c:	f107 0310 	add.w	r3, r7, #16
   14460:	4619      	mov	r1, r3
   14462:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   14466:	f001 f9c3 	bl	157f0 <mp_obj_str_get_data>
   1446a:	6678      	str	r0, [r7, #100]	; 0x64
                    if (precision < 0) {
   1446c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1446e:	2b00      	cmp	r3, #0
   14470:	da01      	bge.n	14476 <mp_obj_str_format_helper+0x912>
                        precision = slen;
   14472:	693b      	ldr	r3, [r7, #16]
   14474:	647b      	str	r3, [r7, #68]	; 0x44
                    }
                    if (slen > (size_t)precision) {
   14476:	693b      	ldr	r3, [r7, #16]
   14478:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1447a:	4293      	cmp	r3, r2
   1447c:	d901      	bls.n	14482 <mp_obj_str_format_helper+0x91e>
                        slen = precision;
   1447e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14480:	613b      	str	r3, [r7, #16]
                    }
                    mp_print_strn(&print, s, slen, flags, fill, width);
   14482:	693a      	ldr	r2, [r7, #16]
   14484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14486:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   1448a:	9301      	str	r3, [sp, #4]
   1448c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14490:	9300      	str	r3, [sp, #0]
   14492:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14494:	6e79      	ldr	r1, [r7, #100]	; 0x64
   14496:	f7ed fad3 	bl	1a40 <mp_print_strn>
                    break;
   1449a:	bf00      	nop
   1449c:	e001      	b.n	144a2 <mp_obj_str_format_helper+0x93e>
                }

                default:
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   1449e:	f7ff fb59 	bl	13b54 <terse_str_format_value_error>
    for (; str < top; str++) {
   144a2:	68bb      	ldr	r3, [r7, #8]
   144a4:	3301      	adds	r3, #1
   144a6:	60bb      	str	r3, [r7, #8]
   144a8:	68ba      	ldr	r2, [r7, #8]
   144aa:	687b      	ldr	r3, [r7, #4]
   144ac:	429a      	cmp	r2, r3
   144ae:	f4ff ab6a 	bcc.w	13b86 <mp_obj_str_format_helper+0x22>
                    }
            }
        }
    }

    return vstr;
   144b2:	68fb      	ldr	r3, [r7, #12]
   144b4:	461c      	mov	r4, r3
   144b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
   144ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   144bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   144c0:	68f8      	ldr	r0, [r7, #12]
   144c2:	37a4      	adds	r7, #164	; 0xa4
   144c4:	46bd      	mov	sp, r7
   144c6:	bd90      	pop	{r4, r7, pc}

000144c8 <mp_obj_str_format>:

mp_obj_t mp_obj_str_format(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   144c8:	b580      	push	{r7, lr}
   144ca:	b090      	sub	sp, #64	; 0x40
   144cc:	af04      	add	r7, sp, #16
   144ce:	60f8      	str	r0, [r7, #12]
   144d0:	60b9      	str	r1, [r7, #8]
   144d2:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   144d4:	68bb      	ldr	r3, [r7, #8]
   144d6:	681b      	ldr	r3, [r3, #0]
   144d8:	4618      	mov	r0, r3
   144da:	f7fd ff25 	bl	12328 <MP_OBJ_IS_QSTR>
   144de:	4603      	mov	r3, r0
   144e0:	f083 0301 	eor.w	r3, r3, #1
   144e4:	b2db      	uxtb	r3, r3
   144e6:	2b00      	cmp	r3, #0
   144e8:	d018      	beq.n	1451c <mp_obj_str_format+0x54>
   144ea:	68bb      	ldr	r3, [r7, #8]
   144ec:	681b      	ldr	r3, [r3, #0]
   144ee:	4618      	mov	r0, r3
   144f0:	f7fd ff2c 	bl	1234c <MP_OBJ_IS_OBJ>
   144f4:	4603      	mov	r3, r0
   144f6:	f083 0301 	eor.w	r3, r3, #1
   144fa:	b2db      	uxtb	r3, r3
   144fc:	2b00      	cmp	r3, #0
   144fe:	d106      	bne.n	1450e <mp_obj_str_format+0x46>
   14500:	68bb      	ldr	r3, [r7, #8]
   14502:	681b      	ldr	r3, [r3, #0]
   14504:	681b      	ldr	r3, [r3, #0]
   14506:	699b      	ldr	r3, [r3, #24]
   14508:	4a24      	ldr	r2, [pc, #144]	; (1459c <mp_obj_str_format+0xd4>)
   1450a:	4293      	cmp	r3, r2
   1450c:	d006      	beq.n	1451c <mp_obj_str_format+0x54>
   1450e:	4b24      	ldr	r3, [pc, #144]	; (145a0 <mp_obj_str_format+0xd8>)
   14510:	4a24      	ldr	r2, [pc, #144]	; (145a4 <mp_obj_str_format+0xdc>)
   14512:	f240 5169 	movw	r1, #1385	; 0x569
   14516:	4824      	ldr	r0, [pc, #144]	; (145a8 <mp_obj_str_format+0xe0>)
   14518:	f007 f934 	bl	1b784 <__assert_func>

    GET_STR_DATA_LEN(args[0], str, len);
   1451c:	68bb      	ldr	r3, [r7, #8]
   1451e:	681b      	ldr	r3, [r3, #0]
   14520:	4618      	mov	r0, r3
   14522:	f7fd ff01 	bl	12328 <MP_OBJ_IS_QSTR>
   14526:	4603      	mov	r3, r0
   14528:	2b00      	cmp	r3, #0
   1452a:	d00a      	beq.n	14542 <mp_obj_str_format+0x7a>
   1452c:	68bb      	ldr	r3, [r7, #8]
   1452e:	681b      	ldr	r3, [r3, #0]
   14530:	089b      	lsrs	r3, r3, #2
   14532:	f107 0228 	add.w	r2, r7, #40	; 0x28
   14536:	4611      	mov	r1, r2
   14538:	4618      	mov	r0, r3
   1453a:	f7ec ff33 	bl	13a4 <qstr_data>
   1453e:	62f8      	str	r0, [r7, #44]	; 0x2c
   14540:	e007      	b.n	14552 <mp_obj_str_format+0x8a>
   14542:	68bb      	ldr	r3, [r7, #8]
   14544:	681b      	ldr	r3, [r3, #0]
   14546:	689b      	ldr	r3, [r3, #8]
   14548:	62bb      	str	r3, [r7, #40]	; 0x28
   1454a:	68bb      	ldr	r3, [r7, #8]
   1454c:	681b      	ldr	r3, [r3, #0]
   1454e:	68db      	ldr	r3, [r3, #12]
   14550:	62fb      	str	r3, [r7, #44]	; 0x2c
    int arg_i = 0;
   14552:	2300      	movs	r3, #0
   14554:	627b      	str	r3, [r7, #36]	; 0x24
    vstr_t vstr = mp_obj_str_format_helper((const char*)str, (const char*)str + len, &arg_i, n_args, args, kwargs);
   14556:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1455a:	441a      	add	r2, r3
   1455c:	f107 0014 	add.w	r0, r7, #20
   14560:	f107 0124 	add.w	r1, r7, #36	; 0x24
   14564:	687b      	ldr	r3, [r7, #4]
   14566:	9302      	str	r3, [sp, #8]
   14568:	68bb      	ldr	r3, [r7, #8]
   1456a:	9301      	str	r3, [sp, #4]
   1456c:	68fb      	ldr	r3, [r7, #12]
   1456e:	9300      	str	r3, [sp, #0]
   14570:	460b      	mov	r3, r1
   14572:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14574:	f7ff faf6 	bl	13b64 <mp_obj_str_format_helper>
    return mp_obj_new_str_from_vstr(mp_obj_get_type(args[0]), &vstr);
   14578:	68bb      	ldr	r3, [r7, #8]
   1457a:	681b      	ldr	r3, [r3, #0]
   1457c:	4618      	mov	r0, r3
   1457e:	f7f9 f989 	bl	d894 <mp_obj_get_type>
   14582:	4602      	mov	r2, r0
   14584:	f107 0314 	add.w	r3, r7, #20
   14588:	4619      	mov	r1, r3
   1458a:	4610      	mov	r0, r2
   1458c:	f000 ff6c 	bl	15468 <mp_obj_new_str_from_vstr>
   14590:	4603      	mov	r3, r0
}
   14592:	4618      	mov	r0, r3
   14594:	3730      	adds	r7, #48	; 0x30
   14596:	46bd      	mov	sp, r7
   14598:	bd80      	pop	{r7, pc}
   1459a:	bf00      	nop
   1459c:	000129d5 	.word	0x000129d5
   145a0:	00023748 	.word	0x00023748
   145a4:	00023c60 	.word	0x00023c60
   145a8:	000236ac 	.word	0x000236ac

000145ac <str_modulo_format>:
MP_DEFINE_CONST_FUN_OBJ_KW(str_format_obj, 1, mp_obj_str_format);

#if MICROPY_PY_BUILTINS_STR_OP_MODULO
STATIC mp_obj_t str_modulo_format(mp_obj_t pattern, size_t n_args, const mp_obj_t *args, mp_obj_t dict) {
   145ac:	b590      	push	{r4, r7, lr}
   145ae:	b0a9      	sub	sp, #164	; 0xa4
   145b0:	af04      	add	r7, sp, #16
   145b2:	60f8      	str	r0, [r7, #12]
   145b4:	60b9      	str	r1, [r7, #8]
   145b6:	607a      	str	r2, [r7, #4]
   145b8:	603b      	str	r3, [r7, #0]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(pattern));
   145ba:	68f8      	ldr	r0, [r7, #12]
   145bc:	f7fd feb4 	bl	12328 <MP_OBJ_IS_QSTR>
   145c0:	4603      	mov	r3, r0
   145c2:	f083 0301 	eor.w	r3, r3, #1
   145c6:	b2db      	uxtb	r3, r3
   145c8:	2b00      	cmp	r3, #0
   145ca:	d015      	beq.n	145f8 <str_modulo_format+0x4c>
   145cc:	68f8      	ldr	r0, [r7, #12]
   145ce:	f7fd febd 	bl	1234c <MP_OBJ_IS_OBJ>
   145d2:	4603      	mov	r3, r0
   145d4:	f083 0301 	eor.w	r3, r3, #1
   145d8:	b2db      	uxtb	r3, r3
   145da:	2b00      	cmp	r3, #0
   145dc:	d105      	bne.n	145ea <str_modulo_format+0x3e>
   145de:	68fb      	ldr	r3, [r7, #12]
   145e0:	681b      	ldr	r3, [r3, #0]
   145e2:	699b      	ldr	r3, [r3, #24]
   145e4:	4ac4      	ldr	r2, [pc, #784]	; (148f8 <str_modulo_format+0x34c>)
   145e6:	4293      	cmp	r3, r2
   145e8:	d006      	beq.n	145f8 <str_modulo_format+0x4c>
   145ea:	4bc4      	ldr	r3, [pc, #784]	; (148fc <str_modulo_format+0x350>)
   145ec:	4ac4      	ldr	r2, [pc, #784]	; (14900 <str_modulo_format+0x354>)
   145ee:	f240 5174 	movw	r1, #1396	; 0x574
   145f2:	48c4      	ldr	r0, [pc, #784]	; (14904 <str_modulo_format+0x358>)
   145f4:	f007 f8c6 	bl	1b784 <__assert_func>

    GET_STR_DATA_LEN(pattern, str, len);
   145f8:	68f8      	ldr	r0, [r7, #12]
   145fa:	f7fd fe95 	bl	12328 <MP_OBJ_IS_QSTR>
   145fe:	4603      	mov	r3, r0
   14600:	2b00      	cmp	r3, #0
   14602:	d00a      	beq.n	1461a <str_modulo_format+0x6e>
   14604:	68fb      	ldr	r3, [r7, #12]
   14606:	089b      	lsrs	r3, r3, #2
   14608:	f107 0254 	add.w	r2, r7, #84	; 0x54
   1460c:	4611      	mov	r1, r2
   1460e:	4618      	mov	r0, r3
   14610:	f7ec fec8 	bl	13a4 <qstr_data>
   14614:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   14618:	e006      	b.n	14628 <str_modulo_format+0x7c>
   1461a:	68fb      	ldr	r3, [r7, #12]
   1461c:	689b      	ldr	r3, [r3, #8]
   1461e:	657b      	str	r3, [r7, #84]	; 0x54
   14620:	68fb      	ldr	r3, [r7, #12]
   14622:	68db      	ldr	r3, [r3, #12]
   14624:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const byte *start_str = str;
   14628:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1462c:	66fb      	str	r3, [r7, #108]	; 0x6c
    bool is_bytes = MP_OBJ_IS_TYPE(pattern, &mp_type_bytes);
   1462e:	68f8      	ldr	r0, [r7, #12]
   14630:	f7fd fe8c 	bl	1234c <MP_OBJ_IS_OBJ>
   14634:	4603      	mov	r3, r0
   14636:	2b00      	cmp	r3, #0
   14638:	d006      	beq.n	14648 <str_modulo_format+0x9c>
   1463a:	68fb      	ldr	r3, [r7, #12]
   1463c:	681b      	ldr	r3, [r3, #0]
   1463e:	4ab2      	ldr	r2, [pc, #712]	; (14908 <str_modulo_format+0x35c>)
   14640:	4293      	cmp	r3, r2
   14642:	d101      	bne.n	14648 <str_modulo_format+0x9c>
   14644:	2301      	movs	r3, #1
   14646:	e000      	b.n	1464a <str_modulo_format+0x9e>
   14648:	2300      	movs	r3, #0
   1464a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
   1464e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   14652:	f003 0301 	and.w	r3, r3, #1
   14656:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    size_t arg_i = 0;
   1465a:	2300      	movs	r3, #0
   1465c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
   14660:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   14664:	f107 0344 	add.w	r3, r7, #68	; 0x44
   14668:	2110      	movs	r1, #16
   1466a:	4618      	mov	r0, r3
   1466c:	f7ec ff60 	bl	1530 <vstr_init_print>

    for (const byte *top = str + len; str < top; str++) {
   14670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   14672:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14676:	4413      	add	r3, r2
   14678:	667b      	str	r3, [r7, #100]	; 0x64
   1467a:	e296      	b.n	14baa <str_modulo_format+0x5fe>
        mp_obj_t arg = MP_OBJ_NULL;
   1467c:	2300      	movs	r3, #0
   1467e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        if (*str != '%') {
   14682:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14686:	781b      	ldrb	r3, [r3, #0]
   14688:	2b25      	cmp	r3, #37	; 0x25
   1468a:	d009      	beq.n	146a0 <str_modulo_format+0xf4>
            vstr_add_byte(&vstr, *str);
   1468c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14690:	781a      	ldrb	r2, [r3, #0]
   14692:	f107 0344 	add.w	r3, r7, #68	; 0x44
   14696:	4611      	mov	r1, r2
   14698:	4618      	mov	r0, r3
   1469a:	f7ed f851 	bl	1740 <vstr_add_byte>
            continue;
   1469e:	e27f      	b.n	14ba0 <str_modulo_format+0x5f4>
        }
        if (++str >= top) {
   146a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   146a4:	3301      	adds	r3, #1
   146a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   146aa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   146ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   146b0:	429a      	cmp	r2, r3
   146b2:	f080 810d 	bcs.w	148d0 <str_modulo_format+0x324>
            goto incomplete_format;
        }
        if (*str == '%') {
   146b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   146ba:	781b      	ldrb	r3, [r3, #0]
   146bc:	2b25      	cmp	r3, #37	; 0x25
   146be:	d106      	bne.n	146ce <str_modulo_format+0x122>
            vstr_add_byte(&vstr, '%');
   146c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
   146c4:	2125      	movs	r1, #37	; 0x25
   146c6:	4618      	mov	r0, r3
   146c8:	f7ed f83a 	bl	1740 <vstr_add_byte>
            continue;
   146cc:	e268      	b.n	14ba0 <str_modulo_format+0x5f4>
        }

        // Dictionary value lookup
        if (*str == '(') {
   146ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   146d2:	781b      	ldrb	r3, [r3, #0]
   146d4:	2b28      	cmp	r3, #40	; 0x28
   146d6:	d136      	bne.n	14746 <str_modulo_format+0x19a>
            if (dict == MP_OBJ_NULL) {
   146d8:	683b      	ldr	r3, [r7, #0]
   146da:	2b00      	cmp	r3, #0
   146dc:	d102      	bne.n	146e4 <str_modulo_format+0x138>
                mp_raise_TypeError("format needs a dict");
   146de:	488b      	ldr	r0, [pc, #556]	; (1490c <str_modulo_format+0x360>)
   146e0:	f7f8 fc6a 	bl	cfb8 <mp_raise_TypeError>
            }
            arg_i = 1; // we used up the single dict argument
   146e4:	2301      	movs	r3, #1
   146e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            const byte *key = ++str;
   146ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   146ee:	3301      	adds	r3, #1
   146f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   146f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   146f8:	663b      	str	r3, [r7, #96]	; 0x60
            while (*str != ')') {
   146fa:	e00b      	b.n	14714 <str_modulo_format+0x168>
                if (str >= top) {
   146fc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14702:	429a      	cmp	r2, r3
   14704:	d301      	bcc.n	1470a <str_modulo_format+0x15e>
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   14706:	f7ff fa25 	bl	13b54 <terse_str_format_value_error>
                    } else {
                        mp_raise_ValueError("incomplete format key");
                    }
                }
                ++str;
   1470a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1470e:	3301      	adds	r3, #1
   14710:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            while (*str != ')') {
   14714:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14718:	781b      	ldrb	r3, [r3, #0]
   1471a:	2b29      	cmp	r3, #41	; 0x29
   1471c:	d1ee      	bne.n	146fc <str_modulo_format+0x150>
            }
            mp_obj_t k_obj = mp_obj_new_str_via_qstr((const char*)key, str - key);
   1471e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   14724:	1ad3      	subs	r3, r2, r3
   14726:	4619      	mov	r1, r3
   14728:	6e38      	ldr	r0, [r7, #96]	; 0x60
   1472a:	f000 fe8b 	bl	15444 <mp_obj_new_str_via_qstr>
   1472e:	65f8      	str	r0, [r7, #92]	; 0x5c
            arg = mp_obj_dict_get(dict, k_obj);
   14730:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   14732:	6838      	ldr	r0, [r7, #0]
   14734:	f7fa f888 	bl	e848 <mp_obj_dict_get>
   14738:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
            str++;
   1473c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14740:	3301      	adds	r3, #1
   14742:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }

        int flags = 0;
   14746:	2300      	movs	r3, #0
   14748:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        char fill = ' ';
   1474c:	2320      	movs	r3, #32
   1474e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        int alt = 0;
   14752:	2300      	movs	r3, #0
   14754:	67bb      	str	r3, [r7, #120]	; 0x78
        while (str < top) {
   14756:	e03e      	b.n	147d6 <str_modulo_format+0x22a>
            if (*str == '-')      flags |= PF_FLAG_LEFT_ADJUST;
   14758:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1475c:	781b      	ldrb	r3, [r3, #0]
   1475e:	2b2d      	cmp	r3, #45	; 0x2d
   14760:	d106      	bne.n	14770 <str_modulo_format+0x1c4>
   14762:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14766:	f043 0301 	orr.w	r3, r3, #1
   1476a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   1476e:	e02d      	b.n	147cc <str_modulo_format+0x220>
            else if (*str == '+') flags |= PF_FLAG_SHOW_SIGN;
   14770:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14774:	781b      	ldrb	r3, [r3, #0]
   14776:	2b2b      	cmp	r3, #43	; 0x2b
   14778:	d106      	bne.n	14788 <str_modulo_format+0x1dc>
   1477a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1477e:	f043 0302 	orr.w	r3, r3, #2
   14782:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   14786:	e021      	b.n	147cc <str_modulo_format+0x220>
            else if (*str == ' ') flags |= PF_FLAG_SPACE_SIGN;
   14788:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1478c:	781b      	ldrb	r3, [r3, #0]
   1478e:	2b20      	cmp	r3, #32
   14790:	d106      	bne.n	147a0 <str_modulo_format+0x1f4>
   14792:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14796:	f043 0304 	orr.w	r3, r3, #4
   1479a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   1479e:	e015      	b.n	147cc <str_modulo_format+0x220>
            else if (*str == '#') alt = PF_FLAG_SHOW_PREFIX;
   147a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   147a4:	781b      	ldrb	r3, [r3, #0]
   147a6:	2b23      	cmp	r3, #35	; 0x23
   147a8:	d102      	bne.n	147b0 <str_modulo_format+0x204>
   147aa:	2310      	movs	r3, #16
   147ac:	67bb      	str	r3, [r7, #120]	; 0x78
   147ae:	e00d      	b.n	147cc <str_modulo_format+0x220>
            else if (*str == '0') {
   147b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   147b4:	781b      	ldrb	r3, [r3, #0]
   147b6:	2b30      	cmp	r3, #48	; 0x30
   147b8:	d113      	bne.n	147e2 <str_modulo_format+0x236>
                flags |= PF_FLAG_PAD_AFTER_SIGN;
   147ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   147be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   147c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                fill = '0';
   147c6:	2330      	movs	r3, #48	; 0x30
   147c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            } else break;
            str++;
   147cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   147d0:	3301      	adds	r3, #1
   147d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        while (str < top) {
   147d6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   147da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   147dc:	429a      	cmp	r2, r3
   147de:	d3bb      	bcc.n	14758 <str_modulo_format+0x1ac>
   147e0:	e000      	b.n	147e4 <str_modulo_format+0x238>
            } else break;
   147e2:	bf00      	nop
        }
        // parse width, if it exists
        int width = 0;
   147e4:	2300      	movs	r3, #0
   147e6:	63bb      	str	r3, [r7, #56]	; 0x38
        if (str < top) {
   147e8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   147ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   147ee:	429a      	cmp	r2, r3
   147f0:	d227      	bcs.n	14842 <str_modulo_format+0x296>
            if (*str == '*') {
   147f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   147f6:	781b      	ldrb	r3, [r3, #0]
   147f8:	2b2a      	cmp	r3, #42	; 0x2a
   147fa:	d118      	bne.n	1482e <str_modulo_format+0x282>
                if (arg_i >= n_args) {
   147fc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   14800:	68bb      	ldr	r3, [r7, #8]
   14802:	429a      	cmp	r2, r3
   14804:	d271      	bcs.n	148ea <str_modulo_format+0x33e>
                    goto not_enough_args;
                }
                width = mp_obj_get_int(args[arg_i++]);
   14806:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   1480a:	1c5a      	adds	r2, r3, #1
   1480c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   14810:	009b      	lsls	r3, r3, #2
   14812:	687a      	ldr	r2, [r7, #4]
   14814:	4413      	add	r3, r2
   14816:	681b      	ldr	r3, [r3, #0]
   14818:	4618      	mov	r0, r3
   1481a:	f7f9 fa19 	bl	dc50 <mp_obj_get_int>
   1481e:	4603      	mov	r3, r0
   14820:	63bb      	str	r3, [r7, #56]	; 0x38
                str++;
   14822:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14826:	3301      	adds	r3, #1
   14828:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   1482c:	e009      	b.n	14842 <str_modulo_format+0x296>
            } else {
                str = (const byte*)str_to_int((const char*)str, (const char*)top, &width);
   1482e:	f107 0338 	add.w	r3, r7, #56	; 0x38
   14832:	461a      	mov	r2, r3
   14834:	6e79      	ldr	r1, [r7, #100]	; 0x64
   14836:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   1483a:	f7ff f8d5 	bl	139e8 <str_to_int>
   1483e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            }
        }
        int prec = -1;
   14842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14846:	637b      	str	r3, [r7, #52]	; 0x34
        if (str < top && *str == '.') {
   14848:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1484c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1484e:	429a      	cmp	r2, r3
   14850:	d238      	bcs.n	148c4 <str_modulo_format+0x318>
   14852:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14856:	781b      	ldrb	r3, [r3, #0]
   14858:	2b2e      	cmp	r3, #46	; 0x2e
   1485a:	d133      	bne.n	148c4 <str_modulo_format+0x318>
            if (++str < top) {
   1485c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14860:	3301      	adds	r3, #1
   14862:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14866:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1486a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1486c:	429a      	cmp	r2, r3
   1486e:	d229      	bcs.n	148c4 <str_modulo_format+0x318>
                if (*str == '*') {
   14870:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14874:	781b      	ldrb	r3, [r3, #0]
   14876:	2b2a      	cmp	r3, #42	; 0x2a
   14878:	d118      	bne.n	148ac <str_modulo_format+0x300>
                    if (arg_i >= n_args) {
   1487a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   1487e:	68bb      	ldr	r3, [r7, #8]
   14880:	429a      	cmp	r2, r3
   14882:	d234      	bcs.n	148ee <str_modulo_format+0x342>
                        goto not_enough_args;
                    }
                    prec = mp_obj_get_int(args[arg_i++]);
   14884:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   14888:	1c5a      	adds	r2, r3, #1
   1488a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   1488e:	009b      	lsls	r3, r3, #2
   14890:	687a      	ldr	r2, [r7, #4]
   14892:	4413      	add	r3, r2
   14894:	681b      	ldr	r3, [r3, #0]
   14896:	4618      	mov	r0, r3
   14898:	f7f9 f9da 	bl	dc50 <mp_obj_get_int>
   1489c:	4603      	mov	r3, r0
   1489e:	637b      	str	r3, [r7, #52]	; 0x34
                    str++;
   148a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   148a4:	3301      	adds	r3, #1
   148a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   148aa:	e00b      	b.n	148c4 <str_modulo_format+0x318>
                } else {
                    prec = 0;
   148ac:	2300      	movs	r3, #0
   148ae:	637b      	str	r3, [r7, #52]	; 0x34
                    str = (const byte*)str_to_int((const char*)str, (const char*)top, &prec);
   148b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
   148b4:	461a      	mov	r2, r3
   148b6:	6e79      	ldr	r1, [r7, #100]	; 0x64
   148b8:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   148bc:	f7ff f894 	bl	139e8 <str_to_int>
   148c0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                }
            }
        }

        if (str >= top) {
   148c4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   148c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   148ca:	429a      	cmp	r2, r3
   148cc:	d303      	bcc.n	148d6 <str_modulo_format+0x32a>
   148ce:	e000      	b.n	148d2 <str_modulo_format+0x326>
            goto incomplete_format;
   148d0:	bf00      	nop
incomplete_format:
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   148d2:	f7ff f93f 	bl	13b54 <terse_str_format_value_error>
                mp_raise_ValueError("incomplete format");
            }
        }

        // Tuple value lookup
        if (arg == MP_OBJ_NULL) {
   148d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   148da:	2b00      	cmp	r3, #0
   148dc:	d125      	bne.n	1492a <str_modulo_format+0x37e>
            if (arg_i >= n_args) {
   148de:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   148e2:	68bb      	ldr	r3, [r7, #8]
   148e4:	429a      	cmp	r2, r3
   148e6:	d315      	bcc.n	14914 <str_modulo_format+0x368>
   148e8:	e002      	b.n	148f0 <str_modulo_format+0x344>
                    goto not_enough_args;
   148ea:	bf00      	nop
   148ec:	e000      	b.n	148f0 <str_modulo_format+0x344>
                        goto not_enough_args;
   148ee:	bf00      	nop
not_enough_args:
                mp_raise_TypeError("format string needs more arguments");
   148f0:	4807      	ldr	r0, [pc, #28]	; (14910 <str_modulo_format+0x364>)
   148f2:	f7f8 fb61 	bl	cfb8 <mp_raise_TypeError>
   148f6:	bf00      	nop
   148f8:	000129d5 	.word	0x000129d5
   148fc:	00023934 	.word	0x00023934
   14900:	00023c74 	.word	0x00023c74
   14904:	000236ac 	.word	0x000236ac
   14908:	00023ba4 	.word	0x00023ba4
   1490c:	000239bc 	.word	0x000239bc
   14910:	000239d0 	.word	0x000239d0
            }
            arg = args[arg_i++];
   14914:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   14918:	1c5a      	adds	r2, r3, #1
   1491a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   1491e:	009b      	lsls	r3, r3, #2
   14920:	687a      	ldr	r2, [r7, #4]
   14922:	4413      	add	r3, r2
   14924:	681b      	ldr	r3, [r3, #0]
   14926:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        }
        switch (*str) {
   1492a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1492e:	781b      	ldrb	r3, [r3, #0]
   14930:	3b58      	subs	r3, #88	; 0x58
   14932:	2b20      	cmp	r3, #32
   14934:	f200 8132 	bhi.w	14b9c <str_modulo_format+0x5f0>
   14938:	a201      	add	r2, pc, #4	; (adr r2, 14940 <str_modulo_format+0x394>)
   1493a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1493e:	bf00      	nop
   14940:	00014b69 	.word	0x00014b69
   14944:	00014b9d 	.word	0x00014b9d
   14948:	00014b9d 	.word	0x00014b9d
   1494c:	00014b9d 	.word	0x00014b9d
   14950:	00014b9d 	.word	0x00014b9d
   14954:	00014b9d 	.word	0x00014b9d
   14958:	00014b9d 	.word	0x00014b9d
   1495c:	00014b9d 	.word	0x00014b9d
   14960:	00014b9d 	.word	0x00014b9d
   14964:	00014b9d 	.word	0x00014b9d
   14968:	00014b9d 	.word	0x00014b9d
   1496c:	000149c5 	.word	0x000149c5
   14970:	00014a65 	.word	0x00014a65
   14974:	00014b9d 	.word	0x00014b9d
   14978:	00014b9d 	.word	0x00014b9d
   1497c:	00014b9d 	.word	0x00014b9d
   14980:	00014b9d 	.word	0x00014b9d
   14984:	00014a65 	.word	0x00014a65
   14988:	00014b9d 	.word	0x00014b9d
   1498c:	00014b9d 	.word	0x00014b9d
   14990:	00014b9d 	.word	0x00014b9d
   14994:	00014b9d 	.word	0x00014b9d
   14998:	00014b9d 	.word	0x00014b9d
   1499c:	00014a91 	.word	0x00014a91
   149a0:	00014b9d 	.word	0x00014b9d
   149a4:	00014b9d 	.word	0x00014b9d
   149a8:	00014ac9 	.word	0x00014ac9
   149ac:	00014ac9 	.word	0x00014ac9
   149b0:	00014b9d 	.word	0x00014b9d
   149b4:	00014a65 	.word	0x00014a65
   149b8:	00014b9d 	.word	0x00014b9d
   149bc:	00014b9d 	.word	0x00014b9d
   149c0:	00014b69 	.word	0x00014b69
            case 'c':
                if (MP_OBJ_IS_STR(arg)) {
   149c4:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   149c8:	f7fd fcae 	bl	12328 <MP_OBJ_IS_QSTR>
   149cc:	4603      	mov	r3, r0
   149ce:	2b00      	cmp	r3, #0
   149d0:	d10c      	bne.n	149ec <str_modulo_format+0x440>
   149d2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   149d6:	f7fd fcb9 	bl	1234c <MP_OBJ_IS_OBJ>
   149da:	4603      	mov	r3, r0
   149dc:	2b00      	cmp	r3, #0
   149de:	d021      	beq.n	14a24 <str_modulo_format+0x478>
   149e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   149e4:	681b      	ldr	r3, [r3, #0]
   149e6:	4a81      	ldr	r2, [pc, #516]	; (14bec <str_modulo_format+0x640>)
   149e8:	4293      	cmp	r3, r2
   149ea:	d11b      	bne.n	14a24 <str_modulo_format+0x478>
                    size_t slen;
                    const char *s = mp_obj_str_get_data(arg, &slen);
   149ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
   149f0:	4619      	mov	r1, r3
   149f2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   149f6:	f000 fefb 	bl	157f0 <mp_obj_str_get_data>
   149fa:	65b8      	str	r0, [r7, #88]	; 0x58
                    if (slen != 1) {
   149fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   149fe:	2b01      	cmp	r3, #1
   14a00:	d002      	beq.n	14a08 <str_modulo_format+0x45c>
                        mp_raise_TypeError("%%c needs int or char");
   14a02:	487b      	ldr	r0, [pc, #492]	; (14bf0 <str_modulo_format+0x644>)
   14a04:	f7f8 fad8 	bl	cfb8 <mp_raise_TypeError>
                    }
                    mp_print_strn(&print, s, 1, flags, ' ', width);
   14a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14a0a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14a0e:	9301      	str	r3, [sp, #4]
   14a10:	2320      	movs	r3, #32
   14a12:	9300      	str	r3, [sp, #0]
   14a14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14a18:	2201      	movs	r2, #1
   14a1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
   14a1c:	f7ed f810 	bl	1a40 <mp_print_strn>
                if (MP_OBJ_IS_STR(arg)) {
   14a20:	bf00      	nop
                    char ch = mp_obj_get_int(arg);
                    mp_print_strn(&print, &ch, 1, flags, ' ', width);
                } else {
                    mp_raise_TypeError("integer needed");
                }
                break;
   14a22:	e0bd      	b.n	14ba0 <str_modulo_format+0x5f4>
                } else if (arg_looks_integer(arg)) {
   14a24:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14a28:	f7ff f84e 	bl	13ac8 <arg_looks_integer>
   14a2c:	4603      	mov	r3, r0
   14a2e:	2b00      	cmp	r3, #0
   14a30:	d015      	beq.n	14a5e <str_modulo_format+0x4b2>
                    char ch = mp_obj_get_int(arg);
   14a32:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14a36:	f7f9 f90b 	bl	dc50 <mp_obj_get_int>
   14a3a:	4603      	mov	r3, r0
   14a3c:	b2db      	uxtb	r3, r3
   14a3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    mp_print_strn(&print, &ch, 1, flags, ' ', width);
   14a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14a44:	f107 012f 	add.w	r1, r7, #47	; 0x2f
   14a48:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14a4c:	9301      	str	r3, [sp, #4]
   14a4e:	2320      	movs	r3, #32
   14a50:	9300      	str	r3, [sp, #0]
   14a52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14a56:	2201      	movs	r2, #1
   14a58:	f7ec fff2 	bl	1a40 <mp_print_strn>
                break;
   14a5c:	e0a0      	b.n	14ba0 <str_modulo_format+0x5f4>
                    mp_raise_TypeError("integer needed");
   14a5e:	4865      	ldr	r0, [pc, #404]	; (14bf4 <str_modulo_format+0x648>)
   14a60:	f7f8 faaa 	bl	cfb8 <mp_raise_TypeError>

            case 'd':
            case 'i':
            case 'u':
                mp_print_mp_int(&print, arg_as_int(arg), 10, 'a', flags, fill, width, prec);
   14a64:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14a68:	f7ff f868 	bl	13b3c <arg_as_int>
   14a6c:	4601      	mov	r1, r0
   14a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14a70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14a72:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14a76:	9203      	str	r2, [sp, #12]
   14a78:	9302      	str	r3, [sp, #8]
   14a7a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14a7e:	9301      	str	r3, [sp, #4]
   14a80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14a84:	9300      	str	r3, [sp, #0]
   14a86:	2361      	movs	r3, #97	; 0x61
   14a88:	220a      	movs	r2, #10
   14a8a:	f7ed f919 	bl	1cc0 <mp_print_mp_int>
                break;
   14a8e:	e087      	b.n	14ba0 <str_modulo_format+0x5f4>
                mp_print_float(&print, mp_obj_get_float(arg), *str, flags, fill, width, prec);
                break;
#endif

            case 'o':
                if (alt) {
   14a90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14a92:	2b00      	cmp	r3, #0
   14a94:	d005      	beq.n	14aa2 <str_modulo_format+0x4f6>
                    flags |= (PF_FLAG_SHOW_PREFIX | PF_FLAG_SHOW_OCTAL_LETTER);
   14a96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14a9a:	f443 7304 	orr.w	r3, r3, #528	; 0x210
   14a9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                }
                mp_print_mp_int(&print, arg, 8, 'a', flags, fill, width, prec);
   14aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14aa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14aa6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14aaa:	9203      	str	r2, [sp, #12]
   14aac:	9302      	str	r3, [sp, #8]
   14aae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14ab2:	9301      	str	r3, [sp, #4]
   14ab4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14ab8:	9300      	str	r3, [sp, #0]
   14aba:	2361      	movs	r3, #97	; 0x61
   14abc:	2208      	movs	r2, #8
   14abe:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   14ac2:	f7ed f8fd 	bl	1cc0 <mp_print_mp_int>
                break;
   14ac6:	e06b      	b.n	14ba0 <str_modulo_format+0x5f4>
            case 'r':
            case 's':
            {
                vstr_t arg_vstr;
                mp_print_t arg_print;
                vstr_init_print(&arg_vstr, 16, &arg_print);
   14ac8:	f107 0214 	add.w	r2, r7, #20
   14acc:	f107 031c 	add.w	r3, r7, #28
   14ad0:	2110      	movs	r1, #16
   14ad2:	4618      	mov	r0, r3
   14ad4:	f7ec fd2c 	bl	1530 <vstr_init_print>
                mp_print_kind_t print_kind = (*str == 'r' ? PRINT_REPR : PRINT_STR);
   14ad8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14adc:	781b      	ldrb	r3, [r3, #0]
   14ade:	2b72      	cmp	r3, #114	; 0x72
   14ae0:	bf0c      	ite	eq
   14ae2:	2301      	moveq	r3, #1
   14ae4:	2300      	movne	r3, #0
   14ae6:	b2db      	uxtb	r3, r3
   14ae8:	677b      	str	r3, [r7, #116]	; 0x74
                if (print_kind == PRINT_STR && is_bytes && MP_OBJ_IS_TYPE(arg, &mp_type_bytes)) {
   14aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   14aec:	2b00      	cmp	r3, #0
   14aee:	d112      	bne.n	14b16 <str_modulo_format+0x56a>
   14af0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   14af4:	2b00      	cmp	r3, #0
   14af6:	d00e      	beq.n	14b16 <str_modulo_format+0x56a>
   14af8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14afc:	f7fd fc26 	bl	1234c <MP_OBJ_IS_OBJ>
   14b00:	4603      	mov	r3, r0
   14b02:	2b00      	cmp	r3, #0
   14b04:	d007      	beq.n	14b16 <str_modulo_format+0x56a>
   14b06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   14b0a:	681b      	ldr	r3, [r3, #0]
   14b0c:	4a3a      	ldr	r2, [pc, #232]	; (14bf8 <str_modulo_format+0x64c>)
   14b0e:	4293      	cmp	r3, r2
   14b10:	d101      	bne.n	14b16 <str_modulo_format+0x56a>
                    // If we have something like b"%s" % b"1", bytes arg should be
                    // printed undecorated.
                    print_kind = PRINT_RAW;
   14b12:	2304      	movs	r3, #4
   14b14:	677b      	str	r3, [r7, #116]	; 0x74
                }
                mp_obj_print_helper(&arg_print, arg, print_kind);
   14b16:	f107 0314 	add.w	r3, r7, #20
   14b1a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   14b1c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   14b20:	4618      	mov	r0, r3
   14b22:	f7f8 fee9 	bl	d8f8 <mp_obj_print_helper>
                uint vlen = arg_vstr.len;
   14b26:	6a3b      	ldr	r3, [r7, #32]
   14b28:	673b      	str	r3, [r7, #112]	; 0x70
                if (prec < 0) {
   14b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14b2c:	2b00      	cmp	r3, #0
   14b2e:	da01      	bge.n	14b34 <str_modulo_format+0x588>
                    prec = vlen;
   14b30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   14b32:	637b      	str	r3, [r7, #52]	; 0x34
                }
                if (vlen > (uint)prec) {
   14b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14b36:	461a      	mov	r2, r3
   14b38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   14b3a:	4293      	cmp	r3, r2
   14b3c:	d901      	bls.n	14b42 <str_modulo_format+0x596>
                    vlen = prec;
   14b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14b40:	673b      	str	r3, [r7, #112]	; 0x70
                }
                mp_print_strn(&print, arg_vstr.buf, vlen, flags, ' ', width);
   14b42:	6a79      	ldr	r1, [r7, #36]	; 0x24
   14b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b46:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14b4a:	9301      	str	r3, [sp, #4]
   14b4c:	2320      	movs	r3, #32
   14b4e:	9300      	str	r3, [sp, #0]
   14b50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14b54:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   14b56:	f7ec ff73 	bl	1a40 <mp_print_strn>
                vstr_clear(&arg_vstr);
   14b5a:	f107 031c 	add.w	r3, r7, #28
   14b5e:	4618      	mov	r0, r3
   14b60:	f7ec fcfc 	bl	155c <vstr_clear>
                break;
   14b64:	bf00      	nop
   14b66:	e01b      	b.n	14ba0 <str_modulo_format+0x5f4>
            }

            case 'X':
            case 'x':
                mp_print_mp_int(&print, arg, 16, *str - ('X' - 'A'), flags | alt, fill, width, prec);
   14b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14b6c:	781b      	ldrb	r3, [r3, #0]
   14b6e:	f1a3 0417 	sub.w	r4, r3, #23
   14b72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   14b76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14b78:	4313      	orrs	r3, r2
   14b7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14b7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
   14b7e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14b82:	9103      	str	r1, [sp, #12]
   14b84:	9202      	str	r2, [sp, #8]
   14b86:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
   14b8a:	9201      	str	r2, [sp, #4]
   14b8c:	9300      	str	r3, [sp, #0]
   14b8e:	4623      	mov	r3, r4
   14b90:	2210      	movs	r2, #16
   14b92:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   14b96:	f7ed f893 	bl	1cc0 <mp_print_mp_int>
                break;
   14b9a:	e001      	b.n	14ba0 <str_modulo_format+0x5f4>

            default:
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   14b9c:	f7fe ffda 	bl	13b54 <terse_str_format_value_error>
    for (const byte *top = str + len; str < top; str++) {
   14ba0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14ba4:	3301      	adds	r3, #1
   14ba6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14baa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14bae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14bb0:	429a      	cmp	r2, r3
   14bb2:	f4ff ad63 	bcc.w	1467c <str_modulo_format+0xd0>
                        *str, *str, str - start_str));
                }
        }
    }

    if (arg_i != n_args) {
   14bb6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   14bba:	68bb      	ldr	r3, [r7, #8]
   14bbc:	429a      	cmp	r2, r3
   14bbe:	d002      	beq.n	14bc6 <str_modulo_format+0x61a>
        mp_raise_TypeError("format string didn't convert all arguments");
   14bc0:	480e      	ldr	r0, [pc, #56]	; (14bfc <str_modulo_format+0x650>)
   14bc2:	f7f8 f9f9 	bl	cfb8 <mp_raise_TypeError>
    }

    return mp_obj_new_str_from_vstr(is_bytes ? &mp_type_bytes : &mp_type_str, &vstr);
   14bc6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   14bca:	2b00      	cmp	r3, #0
   14bcc:	d001      	beq.n	14bd2 <str_modulo_format+0x626>
   14bce:	4b0a      	ldr	r3, [pc, #40]	; (14bf8 <str_modulo_format+0x64c>)
   14bd0:	e000      	b.n	14bd4 <str_modulo_format+0x628>
   14bd2:	4b06      	ldr	r3, [pc, #24]	; (14bec <str_modulo_format+0x640>)
   14bd4:	f107 0244 	add.w	r2, r7, #68	; 0x44
   14bd8:	4611      	mov	r1, r2
   14bda:	4618      	mov	r0, r3
   14bdc:	f000 fc44 	bl	15468 <mp_obj_new_str_from_vstr>
   14be0:	4603      	mov	r3, r0
}
   14be2:	4618      	mov	r0, r3
   14be4:	3794      	adds	r7, #148	; 0x94
   14be6:	46bd      	mov	sp, r7
   14be8:	bd90      	pop	{r4, r7, pc}
   14bea:	bf00      	nop
   14bec:	00023b68 	.word	0x00023b68
   14bf0:	000239f4 	.word	0x000239f4
   14bf4:	00023a0c 	.word	0x00023a0c
   14bf8:	00023ba4 	.word	0x00023ba4
   14bfc:	00023a1c 	.word	0x00023a1c

00014c00 <str_replace>:
#endif

// The implementation is optimized, returning the original string if there's
// nothing to replace.
STATIC mp_obj_t str_replace(size_t n_args, const mp_obj_t *args) {
   14c00:	b580      	push	{r7, lr}
   14c02:	b096      	sub	sp, #88	; 0x58
   14c04:	af02      	add	r7, sp, #8
   14c06:	6078      	str	r0, [r7, #4]
   14c08:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   14c0a:	683b      	ldr	r3, [r7, #0]
   14c0c:	681b      	ldr	r3, [r3, #0]
   14c0e:	4618      	mov	r0, r3
   14c10:	f7fd fb8a 	bl	12328 <MP_OBJ_IS_QSTR>
   14c14:	4603      	mov	r3, r0
   14c16:	f083 0301 	eor.w	r3, r3, #1
   14c1a:	b2db      	uxtb	r3, r3
   14c1c:	2b00      	cmp	r3, #0
   14c1e:	d018      	beq.n	14c52 <str_replace+0x52>
   14c20:	683b      	ldr	r3, [r7, #0]
   14c22:	681b      	ldr	r3, [r3, #0]
   14c24:	4618      	mov	r0, r3
   14c26:	f7fd fb91 	bl	1234c <MP_OBJ_IS_OBJ>
   14c2a:	4603      	mov	r3, r0
   14c2c:	f083 0301 	eor.w	r3, r3, #1
   14c30:	b2db      	uxtb	r3, r3
   14c32:	2b00      	cmp	r3, #0
   14c34:	d106      	bne.n	14c44 <str_replace+0x44>
   14c36:	683b      	ldr	r3, [r7, #0]
   14c38:	681b      	ldr	r3, [r3, #0]
   14c3a:	681b      	ldr	r3, [r3, #0]
   14c3c:	699b      	ldr	r3, [r3, #24]
   14c3e:	4aa4      	ldr	r2, [pc, #656]	; (14ed0 <str_replace+0x2d0>)
   14c40:	4293      	cmp	r3, r2
   14c42:	d006      	beq.n	14c52 <str_replace+0x52>
   14c44:	4ba3      	ldr	r3, [pc, #652]	; (14ed4 <str_replace+0x2d4>)
   14c46:	4aa4      	ldr	r2, [pc, #656]	; (14ed8 <str_replace+0x2d8>)
   14c48:	f240 613b 	movw	r1, #1595	; 0x63b
   14c4c:	48a3      	ldr	r0, [pc, #652]	; (14edc <str_replace+0x2dc>)
   14c4e:	f006 fd99 	bl	1b784 <__assert_func>

    mp_int_t max_rep = -1;
   14c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14c56:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (n_args == 4) {
   14c58:	687b      	ldr	r3, [r7, #4]
   14c5a:	2b04      	cmp	r3, #4
   14c5c:	d112      	bne.n	14c84 <str_replace+0x84>
        max_rep = mp_obj_get_int(args[3]);
   14c5e:	683b      	ldr	r3, [r7, #0]
   14c60:	330c      	adds	r3, #12
   14c62:	681b      	ldr	r3, [r3, #0]
   14c64:	4618      	mov	r0, r3
   14c66:	f7f8 fff3 	bl	dc50 <mp_obj_get_int>
   14c6a:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (max_rep == 0) {
   14c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14c6e:	2b00      	cmp	r3, #0
   14c70:	d102      	bne.n	14c78 <str_replace+0x78>
            return args[0];
   14c72:	683b      	ldr	r3, [r7, #0]
   14c74:	681b      	ldr	r3, [r3, #0]
   14c76:	e127      	b.n	14ec8 <str_replace+0x2c8>
        } else if (max_rep < 0) {
   14c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14c7a:	2b00      	cmp	r3, #0
   14c7c:	da02      	bge.n	14c84 <str_replace+0x84>
            max_rep = -1;
   14c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14c82:	64fb      	str	r3, [r7, #76]	; 0x4c

    // if max_rep is still -1 by this point we will need to do all possible replacements

    // check argument types

    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   14c84:	683b      	ldr	r3, [r7, #0]
   14c86:	681b      	ldr	r3, [r3, #0]
   14c88:	4618      	mov	r0, r3
   14c8a:	f7f8 fe03 	bl	d894 <mp_obj_get_type>
   14c8e:	6278      	str	r0, [r7, #36]	; 0x24

    if (mp_obj_get_type(args[1]) != self_type) {
   14c90:	683b      	ldr	r3, [r7, #0]
   14c92:	3304      	adds	r3, #4
   14c94:	681b      	ldr	r3, [r3, #0]
   14c96:	4618      	mov	r0, r3
   14c98:	f7f8 fdfc 	bl	d894 <mp_obj_get_type>
   14c9c:	4602      	mov	r2, r0
   14c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14ca0:	429a      	cmp	r2, r3
   14ca2:	d005      	beq.n	14cb0 <str_replace+0xb0>
        bad_implicit_conversion(args[1]);
   14ca4:	683b      	ldr	r3, [r7, #0]
   14ca6:	3304      	adds	r3, #4
   14ca8:	681b      	ldr	r3, [r3, #0]
   14caa:	4618      	mov	r0, r3
   14cac:	f000 fd30 	bl	15710 <bad_implicit_conversion>
    }

    if (mp_obj_get_type(args[2]) != self_type) {
   14cb0:	683b      	ldr	r3, [r7, #0]
   14cb2:	3308      	adds	r3, #8
   14cb4:	681b      	ldr	r3, [r3, #0]
   14cb6:	4618      	mov	r0, r3
   14cb8:	f7f8 fdec 	bl	d894 <mp_obj_get_type>
   14cbc:	4602      	mov	r2, r0
   14cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14cc0:	429a      	cmp	r2, r3
   14cc2:	d005      	beq.n	14cd0 <str_replace+0xd0>
        bad_implicit_conversion(args[2]);
   14cc4:	683b      	ldr	r3, [r7, #0]
   14cc6:	3308      	adds	r3, #8
   14cc8:	681b      	ldr	r3, [r3, #0]
   14cca:	4618      	mov	r0, r3
   14ccc:	f000 fd20 	bl	15710 <bad_implicit_conversion>
    }

    // extract string data

    GET_STR_DATA_LEN(args[0], str, str_len);
   14cd0:	683b      	ldr	r3, [r7, #0]
   14cd2:	681b      	ldr	r3, [r3, #0]
   14cd4:	4618      	mov	r0, r3
   14cd6:	f7fd fb27 	bl	12328 <MP_OBJ_IS_QSTR>
   14cda:	4603      	mov	r3, r0
   14cdc:	2b00      	cmp	r3, #0
   14cde:	d00a      	beq.n	14cf6 <str_replace+0xf6>
   14ce0:	683b      	ldr	r3, [r7, #0]
   14ce2:	681b      	ldr	r3, [r3, #0]
   14ce4:	089b      	lsrs	r3, r3, #2
   14ce6:	f107 0220 	add.w	r2, r7, #32
   14cea:	4611      	mov	r1, r2
   14cec:	4618      	mov	r0, r3
   14cee:	f7ec fb59 	bl	13a4 <qstr_data>
   14cf2:	64b8      	str	r0, [r7, #72]	; 0x48
   14cf4:	e007      	b.n	14d06 <str_replace+0x106>
   14cf6:	683b      	ldr	r3, [r7, #0]
   14cf8:	681b      	ldr	r3, [r3, #0]
   14cfa:	689b      	ldr	r3, [r3, #8]
   14cfc:	623b      	str	r3, [r7, #32]
   14cfe:	683b      	ldr	r3, [r7, #0]
   14d00:	681b      	ldr	r3, [r3, #0]
   14d02:	68db      	ldr	r3, [r3, #12]
   14d04:	64bb      	str	r3, [r7, #72]	; 0x48
    GET_STR_DATA_LEN(args[1], old, old_len);
   14d06:	683b      	ldr	r3, [r7, #0]
   14d08:	3304      	adds	r3, #4
   14d0a:	681b      	ldr	r3, [r3, #0]
   14d0c:	4618      	mov	r0, r3
   14d0e:	f7fd fb0b 	bl	12328 <MP_OBJ_IS_QSTR>
   14d12:	4603      	mov	r3, r0
   14d14:	2b00      	cmp	r3, #0
   14d16:	d00b      	beq.n	14d30 <str_replace+0x130>
   14d18:	683b      	ldr	r3, [r7, #0]
   14d1a:	3304      	adds	r3, #4
   14d1c:	681b      	ldr	r3, [r3, #0]
   14d1e:	089b      	lsrs	r3, r3, #2
   14d20:	f107 021c 	add.w	r2, r7, #28
   14d24:	4611      	mov	r1, r2
   14d26:	4618      	mov	r0, r3
   14d28:	f7ec fb3c 	bl	13a4 <qstr_data>
   14d2c:	6478      	str	r0, [r7, #68]	; 0x44
   14d2e:	e009      	b.n	14d44 <str_replace+0x144>
   14d30:	683b      	ldr	r3, [r7, #0]
   14d32:	3304      	adds	r3, #4
   14d34:	681b      	ldr	r3, [r3, #0]
   14d36:	689b      	ldr	r3, [r3, #8]
   14d38:	61fb      	str	r3, [r7, #28]
   14d3a:	683b      	ldr	r3, [r7, #0]
   14d3c:	3304      	adds	r3, #4
   14d3e:	681b      	ldr	r3, [r3, #0]
   14d40:	68db      	ldr	r3, [r3, #12]
   14d42:	647b      	str	r3, [r7, #68]	; 0x44
    GET_STR_DATA_LEN(args[2], new, new_len);
   14d44:	683b      	ldr	r3, [r7, #0]
   14d46:	3308      	adds	r3, #8
   14d48:	681b      	ldr	r3, [r3, #0]
   14d4a:	4618      	mov	r0, r3
   14d4c:	f7fd faec 	bl	12328 <MP_OBJ_IS_QSTR>
   14d50:	4603      	mov	r3, r0
   14d52:	2b00      	cmp	r3, #0
   14d54:	d00b      	beq.n	14d6e <str_replace+0x16e>
   14d56:	683b      	ldr	r3, [r7, #0]
   14d58:	3308      	adds	r3, #8
   14d5a:	681b      	ldr	r3, [r3, #0]
   14d5c:	089b      	lsrs	r3, r3, #2
   14d5e:	f107 0218 	add.w	r2, r7, #24
   14d62:	4611      	mov	r1, r2
   14d64:	4618      	mov	r0, r3
   14d66:	f7ec fb1d 	bl	13a4 <qstr_data>
   14d6a:	6438      	str	r0, [r7, #64]	; 0x40
   14d6c:	e009      	b.n	14d82 <str_replace+0x182>
   14d6e:	683b      	ldr	r3, [r7, #0]
   14d70:	3308      	adds	r3, #8
   14d72:	681b      	ldr	r3, [r3, #0]
   14d74:	689b      	ldr	r3, [r3, #8]
   14d76:	61bb      	str	r3, [r7, #24]
   14d78:	683b      	ldr	r3, [r7, #0]
   14d7a:	3308      	adds	r3, #8
   14d7c:	681b      	ldr	r3, [r3, #0]
   14d7e:	68db      	ldr	r3, [r3, #12]
   14d80:	643b      	str	r3, [r7, #64]	; 0x40

    // old won't exist in str if it's longer, so nothing to replace
    if (old_len > str_len) {
   14d82:	69fa      	ldr	r2, [r7, #28]
   14d84:	6a3b      	ldr	r3, [r7, #32]
   14d86:	429a      	cmp	r2, r3
   14d88:	d902      	bls.n	14d90 <str_replace+0x190>
        return args[0];
   14d8a:	683b      	ldr	r3, [r7, #0]
   14d8c:	681b      	ldr	r3, [r3, #0]
   14d8e:	e09b      	b.n	14ec8 <str_replace+0x2c8>
    }

    // data for the replaced string
    byte *data = NULL;
   14d90:	2300      	movs	r3, #0
   14d92:	63fb      	str	r3, [r7, #60]	; 0x3c

    // do 2 passes over the string:
    //   first pass computes the required length of the replaced string
    //   second pass does the replacements
    for (;;) {
        size_t replaced_str_index = 0;
   14d94:	2300      	movs	r3, #0
   14d96:	63bb      	str	r3, [r7, #56]	; 0x38
        size_t num_replacements_done = 0;
   14d98:	2300      	movs	r3, #0
   14d9a:	637b      	str	r3, [r7, #52]	; 0x34
        const byte *old_occurrence;
        const byte *offset_ptr = str;
   14d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        size_t str_len_remain = str_len;
   14da0:	6a3b      	ldr	r3, [r7, #32]
   14da2:	62bb      	str	r3, [r7, #40]	; 0x28
        if (old_len == 0) {
   14da4:	69fb      	ldr	r3, [r7, #28]
   14da6:	2b00      	cmp	r3, #0
   14da8:	d147      	bne.n	14e3a <str_replace+0x23a>
            // if old_str is empty, copy new_str to start of replaced string
            // copy the replacement string
            if (data != NULL) {
   14daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14dac:	2b00      	cmp	r3, #0
   14dae:	d005      	beq.n	14dbc <str_replace+0x1bc>
                memcpy(data, new, new_len);
   14db0:	69bb      	ldr	r3, [r7, #24]
   14db2:	461a      	mov	r2, r3
   14db4:	6c39      	ldr	r1, [r7, #64]	; 0x40
   14db6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   14db8:	f007 ffea 	bl	1cd90 <memcpy>
            }
            replaced_str_index += new_len;
   14dbc:	69bb      	ldr	r3, [r7, #24]
   14dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14dc0:	4413      	add	r3, r2
   14dc2:	63bb      	str	r3, [r7, #56]	; 0x38
            num_replacements_done++;
   14dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14dc6:	3301      	adds	r3, #1
   14dc8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        while (num_replacements_done != (size_t)max_rep && str_len_remain > 0 && (old_occurrence = find_subbytes(offset_ptr, str_len_remain, old, old_len, 1)) != NULL) {
   14dca:	e036      	b.n	14e3a <str_replace+0x23a>
            if (old_len == 0) {
   14dcc:	69fb      	ldr	r3, [r7, #28]
   14dce:	2b00      	cmp	r3, #0
   14dd0:	d102      	bne.n	14dd8 <str_replace+0x1d8>
                old_occurrence += 1;
   14dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14dd4:	3301      	adds	r3, #1
   14dd6:	633b      	str	r3, [r7, #48]	; 0x30
            }
            // copy from just after end of last occurrence of to-be-replaced string to right before start of next occurrence
            if (data != NULL) {
   14dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14dda:	2b00      	cmp	r3, #0
   14ddc:	d009      	beq.n	14df2 <str_replace+0x1f2>
                memcpy(data + replaced_str_index, offset_ptr, old_occurrence - offset_ptr);
   14dde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14de2:	18d0      	adds	r0, r2, r3
   14de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   14de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14de8:	1ad3      	subs	r3, r2, r3
   14dea:	461a      	mov	r2, r3
   14dec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14dee:	f007 ffcf 	bl	1cd90 <memcpy>
            }
            replaced_str_index += old_occurrence - offset_ptr;
   14df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   14df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14df6:	1ad3      	subs	r3, r2, r3
   14df8:	461a      	mov	r2, r3
   14dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14dfc:	4413      	add	r3, r2
   14dfe:	63bb      	str	r3, [r7, #56]	; 0x38
            // copy the replacement string
            if (data != NULL) {
   14e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14e02:	2b00      	cmp	r3, #0
   14e04:	d007      	beq.n	14e16 <str_replace+0x216>
                memcpy(data + replaced_str_index, new, new_len);
   14e06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14e0a:	4413      	add	r3, r2
   14e0c:	69ba      	ldr	r2, [r7, #24]
   14e0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
   14e10:	4618      	mov	r0, r3
   14e12:	f007 ffbd 	bl	1cd90 <memcpy>
            }
            replaced_str_index += new_len;
   14e16:	69bb      	ldr	r3, [r7, #24]
   14e18:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14e1a:	4413      	add	r3, r2
   14e1c:	63bb      	str	r3, [r7, #56]	; 0x38
            offset_ptr = old_occurrence + old_len;
   14e1e:	69fb      	ldr	r3, [r7, #28]
   14e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   14e22:	4413      	add	r3, r2
   14e24:	62fb      	str	r3, [r7, #44]	; 0x2c
            str_len_remain = str + str_len - offset_ptr;
   14e26:	6a3b      	ldr	r3, [r7, #32]
   14e28:	6cba      	ldr	r2, [r7, #72]	; 0x48
   14e2a:	4413      	add	r3, r2
   14e2c:	461a      	mov	r2, r3
   14e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14e30:	1ad3      	subs	r3, r2, r3
   14e32:	62bb      	str	r3, [r7, #40]	; 0x28
            num_replacements_done++;
   14e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14e36:	3301      	adds	r3, #1
   14e38:	637b      	str	r3, [r7, #52]	; 0x34
        while (num_replacements_done != (size_t)max_rep && str_len_remain > 0 && (old_occurrence = find_subbytes(offset_ptr, str_len_remain, old, old_len, 1)) != NULL) {
   14e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14e3e:	429a      	cmp	r2, r3
   14e40:	d00f      	beq.n	14e62 <str_replace+0x262>
   14e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14e44:	2b00      	cmp	r3, #0
   14e46:	d00c      	beq.n	14e62 <str_replace+0x262>
   14e48:	69fa      	ldr	r2, [r7, #28]
   14e4a:	2301      	movs	r3, #1
   14e4c:	9300      	str	r3, [sp, #0]
   14e4e:	4613      	mov	r3, r2
   14e50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   14e52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   14e54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   14e56:	f7fd fd83 	bl	12960 <find_subbytes>
   14e5a:	6338      	str	r0, [r7, #48]	; 0x30
   14e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14e5e:	2b00      	cmp	r3, #0
   14e60:	d1b4      	bne.n	14dcc <str_replace+0x1cc>
        }

        // copy from just after end of last occurrence of to-be-replaced string to end of old string
        if (data != NULL) {
   14e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14e64:	2b00      	cmp	r3, #0
   14e66:	d007      	beq.n	14e78 <str_replace+0x278>
            memcpy(data + replaced_str_index, offset_ptr, str_len_remain);
   14e68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14e6c:	4413      	add	r3, r2
   14e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   14e70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14e72:	4618      	mov	r0, r3
   14e74:	f007 ff8c 	bl	1cd90 <memcpy>
        }
        replaced_str_index += str_len_remain;
   14e78:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14e7c:	4413      	add	r3, r2
   14e7e:	63bb      	str	r3, [r7, #56]	; 0x38

        if (data == NULL) {
   14e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14e82:	2b00      	cmp	r3, #0
   14e84:	d118      	bne.n	14eb8 <str_replace+0x2b8>
            // first pass
            if (num_replacements_done == 0) {
   14e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14e88:	2b00      	cmp	r3, #0
   14e8a:	d102      	bne.n	14e92 <str_replace+0x292>
                // no substr found, return original string
                return args[0];
   14e8c:	683b      	ldr	r3, [r7, #0]
   14e8e:	681b      	ldr	r3, [r3, #0]
   14e90:	e01a      	b.n	14ec8 <str_replace+0x2c8>
            } else {
                // substr found, allocate new string
                vstr_init_len(&vstr, replaced_str_index);
   14e92:	f107 0308 	add.w	r3, r7, #8
   14e96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   14e98:	4618      	mov	r0, r3
   14e9a:	f7ec fb1d 	bl	14d8 <vstr_init_len>
                data = (byte*)vstr.buf;
   14e9e:	693b      	ldr	r3, [r7, #16]
   14ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
                assert(data != NULL);
   14ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14ea4:	2b00      	cmp	r3, #0
   14ea6:	f47f af75 	bne.w	14d94 <str_replace+0x194>
   14eaa:	4b0d      	ldr	r3, [pc, #52]	; (14ee0 <str_replace+0x2e0>)
   14eac:	4a0a      	ldr	r2, [pc, #40]	; (14ed8 <str_replace+0x2d8>)
   14eae:	f44f 61d3 	mov.w	r1, #1688	; 0x698
   14eb2:	480a      	ldr	r0, [pc, #40]	; (14edc <str_replace+0x2dc>)
   14eb4:	f006 fc66 	bl	1b784 <__assert_func>
            }
        } else {
            // second pass, we are done
            break;
   14eb8:	bf00      	nop
        }
    }

    return mp_obj_new_str_from_vstr(self_type, &vstr);
   14eba:	f107 0308 	add.w	r3, r7, #8
   14ebe:	4619      	mov	r1, r3
   14ec0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   14ec2:	f000 fad1 	bl	15468 <mp_obj_new_str_from_vstr>
   14ec6:	4603      	mov	r3, r0
}
   14ec8:	4618      	mov	r0, r3
   14eca:	3750      	adds	r7, #80	; 0x50
   14ecc:	46bd      	mov	sp, r7
   14ece:	bd80      	pop	{r7, pc}
   14ed0:	000129d5 	.word	0x000129d5
   14ed4:	00023748 	.word	0x00023748
   14ed8:	00023c88 	.word	0x00023c88
   14edc:	000236ac 	.word	0x000236ac
   14ee0:	00023a48 	.word	0x00023a48

00014ee4 <str_count>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_replace_obj, 3, 4, str_replace);

#if MICROPY_PY_BUILTINS_STR_COUNT
STATIC mp_obj_t str_count(size_t n_args, const mp_obj_t *args) {
   14ee4:	b580      	push	{r7, lr}
   14ee6:	b08e      	sub	sp, #56	; 0x38
   14ee8:	af02      	add	r7, sp, #8
   14eea:	6078      	str	r0, [r7, #4]
   14eec:	6039      	str	r1, [r7, #0]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   14eee:	683b      	ldr	r3, [r7, #0]
   14ef0:	681b      	ldr	r3, [r3, #0]
   14ef2:	4618      	mov	r0, r3
   14ef4:	f7f8 fcce 	bl	d894 <mp_obj_get_type>
   14ef8:	6178      	str	r0, [r7, #20]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   14efa:	683b      	ldr	r3, [r7, #0]
   14efc:	681b      	ldr	r3, [r3, #0]
   14efe:	4618      	mov	r0, r3
   14f00:	f7fd fa12 	bl	12328 <MP_OBJ_IS_QSTR>
   14f04:	4603      	mov	r3, r0
   14f06:	f083 0301 	eor.w	r3, r3, #1
   14f0a:	b2db      	uxtb	r3, r3
   14f0c:	2b00      	cmp	r3, #0
   14f0e:	d018      	beq.n	14f42 <str_count+0x5e>
   14f10:	683b      	ldr	r3, [r7, #0]
   14f12:	681b      	ldr	r3, [r3, #0]
   14f14:	4618      	mov	r0, r3
   14f16:	f7fd fa19 	bl	1234c <MP_OBJ_IS_OBJ>
   14f1a:	4603      	mov	r3, r0
   14f1c:	f083 0301 	eor.w	r3, r3, #1
   14f20:	b2db      	uxtb	r3, r3
   14f22:	2b00      	cmp	r3, #0
   14f24:	d106      	bne.n	14f34 <str_count+0x50>
   14f26:	683b      	ldr	r3, [r7, #0]
   14f28:	681b      	ldr	r3, [r3, #0]
   14f2a:	681b      	ldr	r3, [r3, #0]
   14f2c:	699b      	ldr	r3, [r3, #24]
   14f2e:	4a5e      	ldr	r2, [pc, #376]	; (150a8 <str_count+0x1c4>)
   14f30:	4293      	cmp	r3, r2
   14f32:	d006      	beq.n	14f42 <str_count+0x5e>
   14f34:	4b5d      	ldr	r3, [pc, #372]	; (150ac <str_count+0x1c8>)
   14f36:	4a5e      	ldr	r2, [pc, #376]	; (150b0 <str_count+0x1cc>)
   14f38:	f240 61a7 	movw	r1, #1703	; 0x6a7
   14f3c:	485d      	ldr	r0, [pc, #372]	; (150b4 <str_count+0x1d0>)
   14f3e:	f006 fc21 	bl	1b784 <__assert_func>

    // check argument type
    if (mp_obj_get_type(args[1]) != self_type) {
   14f42:	683b      	ldr	r3, [r7, #0]
   14f44:	3304      	adds	r3, #4
   14f46:	681b      	ldr	r3, [r3, #0]
   14f48:	4618      	mov	r0, r3
   14f4a:	f7f8 fca3 	bl	d894 <mp_obj_get_type>
   14f4e:	4602      	mov	r2, r0
   14f50:	697b      	ldr	r3, [r7, #20]
   14f52:	429a      	cmp	r2, r3
   14f54:	d005      	beq.n	14f62 <str_count+0x7e>
        bad_implicit_conversion(args[1]);
   14f56:	683b      	ldr	r3, [r7, #0]
   14f58:	3304      	adds	r3, #4
   14f5a:	681b      	ldr	r3, [r3, #0]
   14f5c:	4618      	mov	r0, r3
   14f5e:	f000 fbd7 	bl	15710 <bad_implicit_conversion>
    }

    GET_STR_DATA_LEN(args[0], haystack, haystack_len);
   14f62:	683b      	ldr	r3, [r7, #0]
   14f64:	681b      	ldr	r3, [r3, #0]
   14f66:	4618      	mov	r0, r3
   14f68:	f7fd f9de 	bl	12328 <MP_OBJ_IS_QSTR>
   14f6c:	4603      	mov	r3, r0
   14f6e:	2b00      	cmp	r3, #0
   14f70:	d00a      	beq.n	14f88 <str_count+0xa4>
   14f72:	683b      	ldr	r3, [r7, #0]
   14f74:	681b      	ldr	r3, [r3, #0]
   14f76:	089b      	lsrs	r3, r3, #2
   14f78:	f107 0210 	add.w	r2, r7, #16
   14f7c:	4611      	mov	r1, r2
   14f7e:	4618      	mov	r0, r3
   14f80:	f7ec fa10 	bl	13a4 <qstr_data>
   14f84:	62f8      	str	r0, [r7, #44]	; 0x2c
   14f86:	e007      	b.n	14f98 <str_count+0xb4>
   14f88:	683b      	ldr	r3, [r7, #0]
   14f8a:	681b      	ldr	r3, [r3, #0]
   14f8c:	689b      	ldr	r3, [r3, #8]
   14f8e:	613b      	str	r3, [r7, #16]
   14f90:	683b      	ldr	r3, [r7, #0]
   14f92:	681b      	ldr	r3, [r3, #0]
   14f94:	68db      	ldr	r3, [r3, #12]
   14f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_STR_DATA_LEN(args[1], needle, needle_len);
   14f98:	683b      	ldr	r3, [r7, #0]
   14f9a:	3304      	adds	r3, #4
   14f9c:	681b      	ldr	r3, [r3, #0]
   14f9e:	4618      	mov	r0, r3
   14fa0:	f7fd f9c2 	bl	12328 <MP_OBJ_IS_QSTR>
   14fa4:	4603      	mov	r3, r0
   14fa6:	2b00      	cmp	r3, #0
   14fa8:	d00b      	beq.n	14fc2 <str_count+0xde>
   14faa:	683b      	ldr	r3, [r7, #0]
   14fac:	3304      	adds	r3, #4
   14fae:	681b      	ldr	r3, [r3, #0]
   14fb0:	089b      	lsrs	r3, r3, #2
   14fb2:	f107 020c 	add.w	r2, r7, #12
   14fb6:	4611      	mov	r1, r2
   14fb8:	4618      	mov	r0, r3
   14fba:	f7ec f9f3 	bl	13a4 <qstr_data>
   14fbe:	62b8      	str	r0, [r7, #40]	; 0x28
   14fc0:	e009      	b.n	14fd6 <str_count+0xf2>
   14fc2:	683b      	ldr	r3, [r7, #0]
   14fc4:	3304      	adds	r3, #4
   14fc6:	681b      	ldr	r3, [r3, #0]
   14fc8:	689b      	ldr	r3, [r3, #8]
   14fca:	60fb      	str	r3, [r7, #12]
   14fcc:	683b      	ldr	r3, [r7, #0]
   14fce:	3304      	adds	r3, #4
   14fd0:	681b      	ldr	r3, [r3, #0]
   14fd2:	68db      	ldr	r3, [r3, #12]
   14fd4:	62bb      	str	r3, [r7, #40]	; 0x28

    const byte *start = haystack;
   14fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14fd8:	627b      	str	r3, [r7, #36]	; 0x24
    const byte *end = haystack + haystack_len;
   14fda:	693b      	ldr	r3, [r7, #16]
   14fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   14fde:	4413      	add	r3, r2
   14fe0:	623b      	str	r3, [r7, #32]
    if (n_args >= 3 && args[2] != mp_const_none) {
   14fe2:	687b      	ldr	r3, [r7, #4]
   14fe4:	2b02      	cmp	r3, #2
   14fe6:	d911      	bls.n	1500c <str_count+0x128>
   14fe8:	683b      	ldr	r3, [r7, #0]
   14fea:	3308      	adds	r3, #8
   14fec:	681b      	ldr	r3, [r3, #0]
   14fee:	4a32      	ldr	r2, [pc, #200]	; (150b8 <str_count+0x1d4>)
   14ff0:	4293      	cmp	r3, r2
   14ff2:	d00b      	beq.n	1500c <str_count+0x128>
        start = str_index_to_ptr(self_type, haystack, haystack_len, args[2], true);
   14ff4:	693a      	ldr	r2, [r7, #16]
   14ff6:	683b      	ldr	r3, [r7, #0]
   14ff8:	3308      	adds	r3, #8
   14ffa:	6819      	ldr	r1, [r3, #0]
   14ffc:	2301      	movs	r3, #1
   14ffe:	9300      	str	r3, [sp, #0]
   15000:	460b      	mov	r3, r1
   15002:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   15004:	6978      	ldr	r0, [r7, #20]
   15006:	f7fd fe61 	bl	12ccc <str_index_to_ptr>
   1500a:	6278      	str	r0, [r7, #36]	; 0x24
    }
    if (n_args >= 4 && args[3] != mp_const_none) {
   1500c:	687b      	ldr	r3, [r7, #4]
   1500e:	2b03      	cmp	r3, #3
   15010:	d911      	bls.n	15036 <str_count+0x152>
   15012:	683b      	ldr	r3, [r7, #0]
   15014:	330c      	adds	r3, #12
   15016:	681b      	ldr	r3, [r3, #0]
   15018:	4a27      	ldr	r2, [pc, #156]	; (150b8 <str_count+0x1d4>)
   1501a:	4293      	cmp	r3, r2
   1501c:	d00b      	beq.n	15036 <str_count+0x152>
        end = str_index_to_ptr(self_type, haystack, haystack_len, args[3], true);
   1501e:	693a      	ldr	r2, [r7, #16]
   15020:	683b      	ldr	r3, [r7, #0]
   15022:	330c      	adds	r3, #12
   15024:	6819      	ldr	r1, [r3, #0]
   15026:	2301      	movs	r3, #1
   15028:	9300      	str	r3, [sp, #0]
   1502a:	460b      	mov	r3, r1
   1502c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1502e:	6978      	ldr	r0, [r7, #20]
   15030:	f7fd fe4c 	bl	12ccc <str_index_to_ptr>
   15034:	6238      	str	r0, [r7, #32]
    }

    // if needle_len is zero then we count each gap between characters as an occurrence
    if (needle_len == 0) {
   15036:	68fb      	ldr	r3, [r7, #12]
   15038:	2b00      	cmp	r3, #0
   1503a:	d10c      	bne.n	15056 <str_count+0x172>
        return MP_OBJ_NEW_SMALL_INT(utf8_charlen(start, end - start) + 1);
   1503c:	6a3a      	ldr	r2, [r7, #32]
   1503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15040:	1ad3      	subs	r3, r2, r3
   15042:	4619      	mov	r1, r3
   15044:	6a78      	ldr	r0, [r7, #36]	; 0x24
   15046:	f7fd f951 	bl	122ec <utf8_charlen>
   1504a:	4603      	mov	r3, r0
   1504c:	3301      	adds	r3, #1
   1504e:	005b      	lsls	r3, r3, #1
   15050:	f043 0301 	orr.w	r3, r3, #1
   15054:	e023      	b.n	1509e <str_count+0x1ba>
    }

    // count the occurrences
    mp_int_t num_occurrences = 0;
   15056:	2300      	movs	r3, #0
   15058:	61fb      	str	r3, [r7, #28]
    for (const byte *haystack_ptr = start; haystack_ptr + needle_len <= end;) {
   1505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1505c:	61bb      	str	r3, [r7, #24]
   1505e:	e014      	b.n	1508a <str_count+0x1a6>
        if (memcmp(haystack_ptr, needle, needle_len) == 0) {
   15060:	68fb      	ldr	r3, [r7, #12]
   15062:	461a      	mov	r2, r3
   15064:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   15066:	69b8      	ldr	r0, [r7, #24]
   15068:	f007 ff7a 	bl	1cf60 <memcmp>
   1506c:	4603      	mov	r3, r0
   1506e:	2b00      	cmp	r3, #0
   15070:	d107      	bne.n	15082 <str_count+0x19e>
            num_occurrences++;
   15072:	69fb      	ldr	r3, [r7, #28]
   15074:	3301      	adds	r3, #1
   15076:	61fb      	str	r3, [r7, #28]
            haystack_ptr += needle_len;
   15078:	68fb      	ldr	r3, [r7, #12]
   1507a:	69ba      	ldr	r2, [r7, #24]
   1507c:	4413      	add	r3, r2
   1507e:	61bb      	str	r3, [r7, #24]
   15080:	e003      	b.n	1508a <str_count+0x1a6>
        } else {
            haystack_ptr = utf8_next_char(haystack_ptr);
   15082:	69b8      	ldr	r0, [r7, #24]
   15084:	f7fd f926 	bl	122d4 <utf8_next_char>
   15088:	61b8      	str	r0, [r7, #24]
    for (const byte *haystack_ptr = start; haystack_ptr + needle_len <= end;) {
   1508a:	68fb      	ldr	r3, [r7, #12]
   1508c:	69ba      	ldr	r2, [r7, #24]
   1508e:	441a      	add	r2, r3
   15090:	6a3b      	ldr	r3, [r7, #32]
   15092:	429a      	cmp	r2, r3
   15094:	d9e4      	bls.n	15060 <str_count+0x17c>
        }
    }

    return MP_OBJ_NEW_SMALL_INT(num_occurrences);
   15096:	69fb      	ldr	r3, [r7, #28]
   15098:	005b      	lsls	r3, r3, #1
   1509a:	f043 0301 	orr.w	r3, r3, #1
}
   1509e:	4618      	mov	r0, r3
   150a0:	3730      	adds	r7, #48	; 0x30
   150a2:	46bd      	mov	sp, r7
   150a4:	bd80      	pop	{r7, pc}
   150a6:	bf00      	nop
   150a8:	000129d5 	.word	0x000129d5
   150ac:	00023748 	.word	0x00023748
   150b0:	00023c94 	.word	0x00023c94
   150b4:	000236ac 	.word	0x000236ac
   150b8:	000234d4 	.word	0x000234d4

000150bc <str_caseconv>:
}
MP_DEFINE_CONST_FUN_OBJ_2(str_rpartition_obj, str_rpartition);
#endif

// Supposedly not too critical operations, so optimize for code size
STATIC mp_obj_t str_caseconv(unichar (*op)(unichar), mp_obj_t self_in) {
   150bc:	b590      	push	{r4, r7, lr}
   150be:	b08b      	sub	sp, #44	; 0x2c
   150c0:	af00      	add	r7, sp, #0
   150c2:	6078      	str	r0, [r7, #4]
   150c4:	6039      	str	r1, [r7, #0]
    GET_STR_DATA_LEN(self_in, self_data, self_len);
   150c6:	6838      	ldr	r0, [r7, #0]
   150c8:	f7fd f92e 	bl	12328 <MP_OBJ_IS_QSTR>
   150cc:	4603      	mov	r3, r0
   150ce:	2b00      	cmp	r3, #0
   150d0:	d009      	beq.n	150e6 <str_caseconv+0x2a>
   150d2:	683b      	ldr	r3, [r7, #0]
   150d4:	089b      	lsrs	r3, r3, #2
   150d6:	f107 0218 	add.w	r2, r7, #24
   150da:	4611      	mov	r1, r2
   150dc:	4618      	mov	r0, r3
   150de:	f7ec f961 	bl	13a4 <qstr_data>
   150e2:	6278      	str	r0, [r7, #36]	; 0x24
   150e4:	e005      	b.n	150f2 <str_caseconv+0x36>
   150e6:	683b      	ldr	r3, [r7, #0]
   150e8:	689b      	ldr	r3, [r3, #8]
   150ea:	61bb      	str	r3, [r7, #24]
   150ec:	683b      	ldr	r3, [r7, #0]
   150ee:	68db      	ldr	r3, [r3, #12]
   150f0:	627b      	str	r3, [r7, #36]	; 0x24
    vstr_t vstr;
    vstr_init_len(&vstr, self_len);
   150f2:	69ba      	ldr	r2, [r7, #24]
   150f4:	f107 0308 	add.w	r3, r7, #8
   150f8:	4611      	mov	r1, r2
   150fa:	4618      	mov	r0, r3
   150fc:	f7ec f9ec 	bl	14d8 <vstr_init_len>
    byte *data = (byte*)vstr.buf;
   15100:	693b      	ldr	r3, [r7, #16]
   15102:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < self_len; i++) {
   15104:	2300      	movs	r3, #0
   15106:	61fb      	str	r3, [r7, #28]
   15108:	e010      	b.n	1512c <str_caseconv+0x70>
        *data++ = op(*self_data++);
   1510a:	6a3c      	ldr	r4, [r7, #32]
   1510c:	1c63      	adds	r3, r4, #1
   1510e:	623b      	str	r3, [r7, #32]
   15110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15112:	1c5a      	adds	r2, r3, #1
   15114:	627a      	str	r2, [r7, #36]	; 0x24
   15116:	781b      	ldrb	r3, [r3, #0]
   15118:	461a      	mov	r2, r3
   1511a:	687b      	ldr	r3, [r7, #4]
   1511c:	4610      	mov	r0, r2
   1511e:	4798      	blx	r3
   15120:	4603      	mov	r3, r0
   15122:	b2db      	uxtb	r3, r3
   15124:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < self_len; i++) {
   15126:	69fb      	ldr	r3, [r7, #28]
   15128:	3301      	adds	r3, #1
   1512a:	61fb      	str	r3, [r7, #28]
   1512c:	69bb      	ldr	r3, [r7, #24]
   1512e:	69fa      	ldr	r2, [r7, #28]
   15130:	429a      	cmp	r2, r3
   15132:	d3ea      	bcc.n	1510a <str_caseconv+0x4e>
    }
    return mp_obj_new_str_from_vstr(mp_obj_get_type(self_in), &vstr);
   15134:	6838      	ldr	r0, [r7, #0]
   15136:	f7f8 fbad 	bl	d894 <mp_obj_get_type>
   1513a:	4602      	mov	r2, r0
   1513c:	f107 0308 	add.w	r3, r7, #8
   15140:	4619      	mov	r1, r3
   15142:	4610      	mov	r0, r2
   15144:	f000 f990 	bl	15468 <mp_obj_new_str_from_vstr>
   15148:	4603      	mov	r3, r0
}
   1514a:	4618      	mov	r0, r3
   1514c:	372c      	adds	r7, #44	; 0x2c
   1514e:	46bd      	mov	sp, r7
   15150:	bd90      	pop	{r4, r7, pc}
   15152:	bf00      	nop

00015154 <str_lower>:

STATIC mp_obj_t str_lower(mp_obj_t self_in) {
   15154:	b580      	push	{r7, lr}
   15156:	b082      	sub	sp, #8
   15158:	af00      	add	r7, sp, #0
   1515a:	6078      	str	r0, [r7, #4]
    return str_caseconv(unichar_tolower, self_in);
   1515c:	6879      	ldr	r1, [r7, #4]
   1515e:	4804      	ldr	r0, [pc, #16]	; (15170 <str_lower+0x1c>)
   15160:	f7ff ffac 	bl	150bc <str_caseconv>
   15164:	4603      	mov	r3, r0
}
   15166:	4618      	mov	r0, r3
   15168:	3708      	adds	r7, #8
   1516a:	46bd      	mov	sp, r7
   1516c:	bd80      	pop	{r7, pc}
   1516e:	bf00      	nop
   15170:	000026bd 	.word	0x000026bd

00015174 <str_upper>:
MP_DEFINE_CONST_FUN_OBJ_1(str_lower_obj, str_lower);

STATIC mp_obj_t str_upper(mp_obj_t self_in) {
   15174:	b580      	push	{r7, lr}
   15176:	b082      	sub	sp, #8
   15178:	af00      	add	r7, sp, #0
   1517a:	6078      	str	r0, [r7, #4]
    return str_caseconv(unichar_toupper, self_in);
   1517c:	6879      	ldr	r1, [r7, #4]
   1517e:	4804      	ldr	r0, [pc, #16]	; (15190 <str_upper+0x1c>)
   15180:	f7ff ff9c 	bl	150bc <str_caseconv>
   15184:	4603      	mov	r3, r0
}
   15186:	4618      	mov	r0, r3
   15188:	3708      	adds	r7, #8
   1518a:	46bd      	mov	sp, r7
   1518c:	bd80      	pop	{r7, pc}
   1518e:	bf00      	nop
   15190:	000026e1 	.word	0x000026e1

00015194 <str_uni_istype>:
MP_DEFINE_CONST_FUN_OBJ_1(str_upper_obj, str_upper);

STATIC mp_obj_t str_uni_istype(bool (*f)(unichar), mp_obj_t self_in) {
   15194:	b580      	push	{r7, lr}
   15196:	b088      	sub	sp, #32
   15198:	af00      	add	r7, sp, #0
   1519a:	6078      	str	r0, [r7, #4]
   1519c:	6039      	str	r1, [r7, #0]
    GET_STR_DATA_LEN(self_in, self_data, self_len);
   1519e:	6838      	ldr	r0, [r7, #0]
   151a0:	f7fd f8c2 	bl	12328 <MP_OBJ_IS_QSTR>
   151a4:	4603      	mov	r3, r0
   151a6:	2b00      	cmp	r3, #0
   151a8:	d009      	beq.n	151be <str_uni_istype+0x2a>
   151aa:	683b      	ldr	r3, [r7, #0]
   151ac:	089b      	lsrs	r3, r3, #2
   151ae:	f107 020c 	add.w	r2, r7, #12
   151b2:	4611      	mov	r1, r2
   151b4:	4618      	mov	r0, r3
   151b6:	f7ec f8f5 	bl	13a4 <qstr_data>
   151ba:	61f8      	str	r0, [r7, #28]
   151bc:	e005      	b.n	151ca <str_uni_istype+0x36>
   151be:	683b      	ldr	r3, [r7, #0]
   151c0:	689b      	ldr	r3, [r3, #8]
   151c2:	60fb      	str	r3, [r7, #12]
   151c4:	683b      	ldr	r3, [r7, #0]
   151c6:	68db      	ldr	r3, [r3, #12]
   151c8:	61fb      	str	r3, [r7, #28]

    if (self_len == 0) {
   151ca:	68fb      	ldr	r3, [r7, #12]
   151cc:	2b00      	cmp	r3, #0
   151ce:	d101      	bne.n	151d4 <str_uni_istype+0x40>
        return mp_const_false; // default to False for empty str
   151d0:	4b2c      	ldr	r3, [pc, #176]	; (15284 <str_uni_istype+0xf0>)
   151d2:	e052      	b.n	1527a <str_uni_istype+0xe6>
    }

    if (f != unichar_isupper && f != unichar_islower) {
   151d4:	687b      	ldr	r3, [r7, #4]
   151d6:	4a2c      	ldr	r2, [pc, #176]	; (15288 <str_uni_istype+0xf4>)
   151d8:	4293      	cmp	r3, r2
   151da:	d01e      	beq.n	1521a <str_uni_istype+0x86>
   151dc:	687b      	ldr	r3, [r7, #4]
   151de:	4a2b      	ldr	r2, [pc, #172]	; (1528c <str_uni_istype+0xf8>)
   151e0:	4293      	cmp	r3, r2
   151e2:	d01a      	beq.n	1521a <str_uni_istype+0x86>
        for (size_t i = 0; i < self_len; i++) {
   151e4:	2300      	movs	r3, #0
   151e6:	61bb      	str	r3, [r7, #24]
   151e8:	e012      	b.n	15210 <str_uni_istype+0x7c>
            if (!f(*self_data++)) {
   151ea:	69fb      	ldr	r3, [r7, #28]
   151ec:	1c5a      	adds	r2, r3, #1
   151ee:	61fa      	str	r2, [r7, #28]
   151f0:	781b      	ldrb	r3, [r3, #0]
   151f2:	461a      	mov	r2, r3
   151f4:	687b      	ldr	r3, [r7, #4]
   151f6:	4610      	mov	r0, r2
   151f8:	4798      	blx	r3
   151fa:	4603      	mov	r3, r0
   151fc:	f083 0301 	eor.w	r3, r3, #1
   15200:	b2db      	uxtb	r3, r3
   15202:	2b00      	cmp	r3, #0
   15204:	d001      	beq.n	1520a <str_uni_istype+0x76>
                return mp_const_false;
   15206:	4b1f      	ldr	r3, [pc, #124]	; (15284 <str_uni_istype+0xf0>)
   15208:	e037      	b.n	1527a <str_uni_istype+0xe6>
        for (size_t i = 0; i < self_len; i++) {
   1520a:	69bb      	ldr	r3, [r7, #24]
   1520c:	3301      	adds	r3, #1
   1520e:	61bb      	str	r3, [r7, #24]
   15210:	68fb      	ldr	r3, [r7, #12]
   15212:	69ba      	ldr	r2, [r7, #24]
   15214:	429a      	cmp	r2, r3
   15216:	d3e8      	bcc.n	151ea <str_uni_istype+0x56>
   15218:	e02e      	b.n	15278 <str_uni_istype+0xe4>
            }
        }
    } else {
        bool contains_alpha = false;
   1521a:	2300      	movs	r3, #0
   1521c:	75fb      	strb	r3, [r7, #23]

        for (size_t i = 0; i < self_len; i++) { // only check alphanumeric characters
   1521e:	2300      	movs	r3, #0
   15220:	613b      	str	r3, [r7, #16]
   15222:	e01d      	b.n	15260 <str_uni_istype+0xcc>
            if (unichar_isalpha(*self_data++)) {
   15224:	69fb      	ldr	r3, [r7, #28]
   15226:	1c5a      	adds	r2, r3, #1
   15228:	61fa      	str	r2, [r7, #28]
   1522a:	781b      	ldrb	r3, [r3, #0]
   1522c:	4618      	mov	r0, r3
   1522e:	f7ed f98f 	bl	2550 <unichar_isalpha>
   15232:	4603      	mov	r3, r0
   15234:	2b00      	cmp	r3, #0
   15236:	d010      	beq.n	1525a <str_uni_istype+0xc6>
                contains_alpha = true;
   15238:	2301      	movs	r3, #1
   1523a:	75fb      	strb	r3, [r7, #23]
                if (!f(*(self_data - 1))) { // -1 because we already incremented above
   1523c:	69fb      	ldr	r3, [r7, #28]
   1523e:	3b01      	subs	r3, #1
   15240:	781b      	ldrb	r3, [r3, #0]
   15242:	461a      	mov	r2, r3
   15244:	687b      	ldr	r3, [r7, #4]
   15246:	4610      	mov	r0, r2
   15248:	4798      	blx	r3
   1524a:	4603      	mov	r3, r0
   1524c:	f083 0301 	eor.w	r3, r3, #1
   15250:	b2db      	uxtb	r3, r3
   15252:	2b00      	cmp	r3, #0
   15254:	d001      	beq.n	1525a <str_uni_istype+0xc6>
                    return mp_const_false;
   15256:	4b0b      	ldr	r3, [pc, #44]	; (15284 <str_uni_istype+0xf0>)
   15258:	e00f      	b.n	1527a <str_uni_istype+0xe6>
        for (size_t i = 0; i < self_len; i++) { // only check alphanumeric characters
   1525a:	693b      	ldr	r3, [r7, #16]
   1525c:	3301      	adds	r3, #1
   1525e:	613b      	str	r3, [r7, #16]
   15260:	68fb      	ldr	r3, [r7, #12]
   15262:	693a      	ldr	r2, [r7, #16]
   15264:	429a      	cmp	r2, r3
   15266:	d3dd      	bcc.n	15224 <str_uni_istype+0x90>
                }
            }
        }

        if (!contains_alpha) {
   15268:	7dfb      	ldrb	r3, [r7, #23]
   1526a:	f083 0301 	eor.w	r3, r3, #1
   1526e:	b2db      	uxtb	r3, r3
   15270:	2b00      	cmp	r3, #0
   15272:	d001      	beq.n	15278 <str_uni_istype+0xe4>
            return mp_const_false;
   15274:	4b03      	ldr	r3, [pc, #12]	; (15284 <str_uni_istype+0xf0>)
   15276:	e000      	b.n	1527a <str_uni_istype+0xe6>
        }
    }

    return mp_const_true;
   15278:	4b05      	ldr	r3, [pc, #20]	; (15290 <str_uni_istype+0xfc>)
}
   1527a:	4618      	mov	r0, r3
   1527c:	3720      	adds	r7, #32
   1527e:	46bd      	mov	sp, r7
   15280:	bd80      	pop	{r7, pc}
   15282:	bf00      	nop
   15284:	00021c58 	.word	0x00021c58
   15288:	00002645 	.word	0x00002645
   1528c:	00002681 	.word	0x00002681
   15290:	00021c60 	.word	0x00021c60

00015294 <str_isspace>:

STATIC mp_obj_t str_isspace(mp_obj_t self_in) {
   15294:	b580      	push	{r7, lr}
   15296:	b082      	sub	sp, #8
   15298:	af00      	add	r7, sp, #0
   1529a:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isspace, self_in);
   1529c:	6879      	ldr	r1, [r7, #4]
   1529e:	4804      	ldr	r0, [pc, #16]	; (152b0 <str_isspace+0x1c>)
   152a0:	f7ff ff78 	bl	15194 <str_uni_istype>
   152a4:	4603      	mov	r3, r0
}
   152a6:	4618      	mov	r0, r3
   152a8:	3708      	adds	r7, #8
   152aa:	46bd      	mov	sp, r7
   152ac:	bd80      	pop	{r7, pc}
   152ae:	bf00      	nop
   152b0:	00002515 	.word	0x00002515

000152b4 <str_isalpha>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isspace_obj, str_isspace);

STATIC mp_obj_t str_isalpha(mp_obj_t self_in) {
   152b4:	b580      	push	{r7, lr}
   152b6:	b082      	sub	sp, #8
   152b8:	af00      	add	r7, sp, #0
   152ba:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isalpha, self_in);
   152bc:	6879      	ldr	r1, [r7, #4]
   152be:	4804      	ldr	r0, [pc, #16]	; (152d0 <str_isalpha+0x1c>)
   152c0:	f7ff ff68 	bl	15194 <str_uni_istype>
   152c4:	4603      	mov	r3, r0
}
   152c6:	4618      	mov	r0, r3
   152c8:	3708      	adds	r7, #8
   152ca:	46bd      	mov	sp, r7
   152cc:	bd80      	pop	{r7, pc}
   152ce:	bf00      	nop
   152d0:	00002551 	.word	0x00002551

000152d4 <str_isdigit>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isalpha_obj, str_isalpha);

STATIC mp_obj_t str_isdigit(mp_obj_t self_in) {
   152d4:	b580      	push	{r7, lr}
   152d6:	b082      	sub	sp, #8
   152d8:	af00      	add	r7, sp, #0
   152da:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isdigit, self_in);
   152dc:	6879      	ldr	r1, [r7, #4]
   152de:	4804      	ldr	r0, [pc, #16]	; (152f0 <str_isdigit+0x1c>)
   152e0:	f7ff ff58 	bl	15194 <str_uni_istype>
   152e4:	4603      	mov	r3, r0
}
   152e6:	4618      	mov	r0, r3
   152e8:	3708      	adds	r7, #8
   152ea:	46bd      	mov	sp, r7
   152ec:	bd80      	pop	{r7, pc}
   152ee:	bf00      	nop
   152f0:	0000258d 	.word	0x0000258d

000152f4 <str_isupper>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isdigit_obj, str_isdigit);

STATIC mp_obj_t str_isupper(mp_obj_t self_in) {
   152f4:	b580      	push	{r7, lr}
   152f6:	b082      	sub	sp, #8
   152f8:	af00      	add	r7, sp, #0
   152fa:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isupper, self_in);
   152fc:	6879      	ldr	r1, [r7, #4]
   152fe:	4804      	ldr	r0, [pc, #16]	; (15310 <str_isupper+0x1c>)
   15300:	f7ff ff48 	bl	15194 <str_uni_istype>
   15304:	4603      	mov	r3, r0
}
   15306:	4618      	mov	r0, r3
   15308:	3708      	adds	r7, #8
   1530a:	46bd      	mov	sp, r7
   1530c:	bd80      	pop	{r7, pc}
   1530e:	bf00      	nop
   15310:	00002645 	.word	0x00002645

00015314 <str_islower>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isupper_obj, str_isupper);

STATIC mp_obj_t str_islower(mp_obj_t self_in) {
   15314:	b580      	push	{r7, lr}
   15316:	b082      	sub	sp, #8
   15318:	af00      	add	r7, sp, #0
   1531a:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_islower, self_in);
   1531c:	6879      	ldr	r1, [r7, #4]
   1531e:	4804      	ldr	r0, [pc, #16]	; (15330 <str_islower+0x1c>)
   15320:	f7ff ff38 	bl	15194 <str_uni_istype>
   15324:	4603      	mov	r3, r0
}
   15326:	4618      	mov	r0, r3
   15328:	3708      	adds	r7, #8
   1532a:	46bd      	mov	sp, r7
   1532c:	bd80      	pop	{r7, pc}
   1532e:	bf00      	nop
   15330:	00002681 	.word	0x00002681

00015334 <mp_obj_str_get_buffer>:
    return bytes_make_new(NULL, n_args, 0, args);
}
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_encode_obj, 1, 3, str_encode);
#endif

mp_int_t mp_obj_str_get_buffer(mp_obj_t self_in, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
   15334:	b580      	push	{r7, lr}
   15336:	b086      	sub	sp, #24
   15338:	af00      	add	r7, sp, #0
   1533a:	60f8      	str	r0, [r7, #12]
   1533c:	60b9      	str	r1, [r7, #8]
   1533e:	607a      	str	r2, [r7, #4]
    if (flags == MP_BUFFER_READ) {
   15340:	687b      	ldr	r3, [r7, #4]
   15342:	2b01      	cmp	r3, #1
   15344:	d120      	bne.n	15388 <mp_obj_str_get_buffer+0x54>
        GET_STR_DATA_LEN(self_in, str_data, str_len);
   15346:	68f8      	ldr	r0, [r7, #12]
   15348:	f7fc ffee 	bl	12328 <MP_OBJ_IS_QSTR>
   1534c:	4603      	mov	r3, r0
   1534e:	2b00      	cmp	r3, #0
   15350:	d009      	beq.n	15366 <mp_obj_str_get_buffer+0x32>
   15352:	68fb      	ldr	r3, [r7, #12]
   15354:	089b      	lsrs	r3, r3, #2
   15356:	f107 0210 	add.w	r2, r7, #16
   1535a:	4611      	mov	r1, r2
   1535c:	4618      	mov	r0, r3
   1535e:	f7ec f821 	bl	13a4 <qstr_data>
   15362:	6178      	str	r0, [r7, #20]
   15364:	e005      	b.n	15372 <mp_obj_str_get_buffer+0x3e>
   15366:	68fb      	ldr	r3, [r7, #12]
   15368:	689b      	ldr	r3, [r3, #8]
   1536a:	613b      	str	r3, [r7, #16]
   1536c:	68fb      	ldr	r3, [r7, #12]
   1536e:	68db      	ldr	r3, [r3, #12]
   15370:	617b      	str	r3, [r7, #20]
        bufinfo->buf = (void*)str_data;
   15372:	68bb      	ldr	r3, [r7, #8]
   15374:	697a      	ldr	r2, [r7, #20]
   15376:	601a      	str	r2, [r3, #0]
        bufinfo->len = str_len;
   15378:	693a      	ldr	r2, [r7, #16]
   1537a:	68bb      	ldr	r3, [r7, #8]
   1537c:	605a      	str	r2, [r3, #4]
        bufinfo->typecode = 'B'; // bytes should be unsigned, so should unicode byte-access
   1537e:	68bb      	ldr	r3, [r7, #8]
   15380:	2242      	movs	r2, #66	; 0x42
   15382:	609a      	str	r2, [r3, #8]
        return 0;
   15384:	2300      	movs	r3, #0
   15386:	e00a      	b.n	1539e <mp_obj_str_get_buffer+0x6a>
    } else {
        // can't write to a string
        bufinfo->buf = NULL;
   15388:	68bb      	ldr	r3, [r7, #8]
   1538a:	2200      	movs	r2, #0
   1538c:	601a      	str	r2, [r3, #0]
        bufinfo->len = 0;
   1538e:	68bb      	ldr	r3, [r7, #8]
   15390:	2200      	movs	r2, #0
   15392:	605a      	str	r2, [r3, #4]
        bufinfo->typecode = -1;
   15394:	68bb      	ldr	r3, [r7, #8]
   15396:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1539a:	609a      	str	r2, [r3, #8]
        return 1;
   1539c:	2301      	movs	r3, #1
    }
}
   1539e:	4618      	mov	r0, r3
   153a0:	3718      	adds	r7, #24
   153a2:	46bd      	mov	sp, r7
   153a4:	bd80      	pop	{r7, pc}
   153a6:	bf00      	nop

000153a8 <mp_obj_new_str_copy>:
const mp_obj_str_t mp_const_empty_bytes_obj = {{&mp_type_bytes}, 0, 0, (const byte*)""};

// Create a str/bytes object using the given data.  New memory is allocated and
// the data is copied across.  This function should only be used if the type is bytes,
// or if the type is str and the string data is known to be not interned.
mp_obj_t mp_obj_new_str_copy(const mp_obj_type_t *type, const byte* data, size_t len) {
   153a8:	b580      	push	{r7, lr}
   153aa:	b086      	sub	sp, #24
   153ac:	af00      	add	r7, sp, #0
   153ae:	60f8      	str	r0, [r7, #12]
   153b0:	60b9      	str	r1, [r7, #8]
   153b2:	607a      	str	r2, [r7, #4]
    mp_obj_str_t *o = m_new_obj(mp_obj_str_t);
   153b4:	2010      	movs	r0, #16
   153b6:	f7ea ffb1 	bl	31c <m_malloc>
   153ba:	6178      	str	r0, [r7, #20]
    o->base.type = type;
   153bc:	697b      	ldr	r3, [r7, #20]
   153be:	68fa      	ldr	r2, [r7, #12]
   153c0:	601a      	str	r2, [r3, #0]
    o->len = len;
   153c2:	697b      	ldr	r3, [r7, #20]
   153c4:	687a      	ldr	r2, [r7, #4]
   153c6:	609a      	str	r2, [r3, #8]
    if (data) {
   153c8:	68bb      	ldr	r3, [r7, #8]
   153ca:	2b00      	cmp	r3, #0
   153cc:	d019      	beq.n	15402 <mp_obj_new_str_copy+0x5a>
        o->hash = qstr_compute_hash(data, len);
   153ce:	6879      	ldr	r1, [r7, #4]
   153d0:	68b8      	ldr	r0, [r7, #8]
   153d2:	f7eb fde9 	bl	fa8 <qstr_compute_hash>
   153d6:	4602      	mov	r2, r0
   153d8:	697b      	ldr	r3, [r7, #20]
   153da:	605a      	str	r2, [r3, #4]
        byte *p = m_new(byte, len + 1);
   153dc:	687b      	ldr	r3, [r7, #4]
   153de:	3301      	adds	r3, #1
   153e0:	4618      	mov	r0, r3
   153e2:	f7ea ff9b 	bl	31c <m_malloc>
   153e6:	6138      	str	r0, [r7, #16]
        o->data = p;
   153e8:	697b      	ldr	r3, [r7, #20]
   153ea:	693a      	ldr	r2, [r7, #16]
   153ec:	60da      	str	r2, [r3, #12]
        memcpy(p, data, len * sizeof(byte));
   153ee:	687a      	ldr	r2, [r7, #4]
   153f0:	68b9      	ldr	r1, [r7, #8]
   153f2:	6938      	ldr	r0, [r7, #16]
   153f4:	f007 fccc 	bl	1cd90 <memcpy>
        p[len] = '\0'; // for now we add null for compatibility with C ASCIIZ strings
   153f8:	693a      	ldr	r2, [r7, #16]
   153fa:	687b      	ldr	r3, [r7, #4]
   153fc:	4413      	add	r3, r2
   153fe:	2200      	movs	r2, #0
   15400:	701a      	strb	r2, [r3, #0]
    }
    return MP_OBJ_FROM_PTR(o);
   15402:	697b      	ldr	r3, [r7, #20]
}
   15404:	4618      	mov	r0, r3
   15406:	3718      	adds	r7, #24
   15408:	46bd      	mov	sp, r7
   1540a:	bd80      	pop	{r7, pc}

0001540c <mp_obj_new_str_of_type>:

// Create a str/bytes object using the given data.  If the type is str and the string
// data is already interned, then a qstr object is returned.  Otherwise new memory is
// allocated for the object and the data is copied across.
mp_obj_t mp_obj_new_str_of_type(const mp_obj_type_t *type, const byte* data, size_t len) {
   1540c:	b580      	push	{r7, lr}
   1540e:	b084      	sub	sp, #16
   15410:	af00      	add	r7, sp, #0
   15412:	60f8      	str	r0, [r7, #12]
   15414:	60b9      	str	r1, [r7, #8]
   15416:	607a      	str	r2, [r7, #4]
    if (type == &mp_type_str) {
   15418:	68fb      	ldr	r3, [r7, #12]
   1541a:	4a09      	ldr	r2, [pc, #36]	; (15440 <mp_obj_new_str_of_type+0x34>)
   1541c:	4293      	cmp	r3, r2
   1541e:	d105      	bne.n	1542c <mp_obj_new_str_of_type+0x20>
        return mp_obj_new_str((const char*)data, len);
   15420:	6879      	ldr	r1, [r7, #4]
   15422:	68b8      	ldr	r0, [r7, #8]
   15424:	f000 f882 	bl	1552c <mp_obj_new_str>
   15428:	4603      	mov	r3, r0
   1542a:	e004      	b.n	15436 <mp_obj_new_str_of_type+0x2a>
    } else {
        return mp_obj_new_bytes(data, len);
   1542c:	6879      	ldr	r1, [r7, #4]
   1542e:	68b8      	ldr	r0, [r7, #8]
   15430:	f000 f8d4 	bl	155dc <mp_obj_new_bytes>
   15434:	4603      	mov	r3, r0
    }
}
   15436:	4618      	mov	r0, r3
   15438:	3710      	adds	r7, #16
   1543a:	46bd      	mov	sp, r7
   1543c:	bd80      	pop	{r7, pc}
   1543e:	bf00      	nop
   15440:	00023b68 	.word	0x00023b68

00015444 <mp_obj_new_str_via_qstr>:

// Create a str using a qstr to store the data; may use existing or new qstr.
mp_obj_t mp_obj_new_str_via_qstr(const char* data, size_t len) {
   15444:	b580      	push	{r7, lr}
   15446:	b082      	sub	sp, #8
   15448:	af00      	add	r7, sp, #0
   1544a:	6078      	str	r0, [r7, #4]
   1544c:	6039      	str	r1, [r7, #0]
    return MP_OBJ_NEW_QSTR(qstr_from_strn(data, len));
   1544e:	6839      	ldr	r1, [r7, #0]
   15450:	6878      	ldr	r0, [r7, #4]
   15452:	f7eb febd 	bl	11d0 <qstr_from_strn>
   15456:	4603      	mov	r3, r0
   15458:	009b      	lsls	r3, r3, #2
   1545a:	f043 0302 	orr.w	r3, r3, #2
}
   1545e:	4618      	mov	r0, r3
   15460:	3708      	adds	r7, #8
   15462:	46bd      	mov	sp, r7
   15464:	bd80      	pop	{r7, pc}
   15466:	bf00      	nop

00015468 <mp_obj_new_str_from_vstr>:

// Create a str/bytes object from the given vstr.  The vstr buffer is resized to
// the exact length required and then reused for the str/bytes object.  The vstr
// is cleared and can safely be passed to vstr_free if it was heap allocated.
mp_obj_t mp_obj_new_str_from_vstr(const mp_obj_type_t *type, vstr_t *vstr) {
   15468:	b580      	push	{r7, lr}
   1546a:	b084      	sub	sp, #16
   1546c:	af00      	add	r7, sp, #0
   1546e:	6078      	str	r0, [r7, #4]
   15470:	6039      	str	r1, [r7, #0]
    // if not a bytes object, look if a qstr with this data already exists
    if (type == &mp_type_str) {
   15472:	687b      	ldr	r3, [r7, #4]
   15474:	4a2c      	ldr	r2, [pc, #176]	; (15528 <mp_obj_new_str_from_vstr+0xc0>)
   15476:	4293      	cmp	r3, r2
   15478:	d116      	bne.n	154a8 <mp_obj_new_str_from_vstr+0x40>
        qstr q = qstr_find_strn(vstr->buf, vstr->len);
   1547a:	683b      	ldr	r3, [r7, #0]
   1547c:	689a      	ldr	r2, [r3, #8]
   1547e:	683b      	ldr	r3, [r7, #0]
   15480:	685b      	ldr	r3, [r3, #4]
   15482:	4619      	mov	r1, r3
   15484:	4610      	mov	r0, r2
   15486:	f7eb fe3f 	bl	1108 <qstr_find_strn>
   1548a:	60f8      	str	r0, [r7, #12]
        if (q != MP_QSTR_NULL) {
   1548c:	68fb      	ldr	r3, [r7, #12]
   1548e:	2b00      	cmp	r3, #0
   15490:	d00a      	beq.n	154a8 <mp_obj_new_str_from_vstr+0x40>
            vstr_clear(vstr);
   15492:	6838      	ldr	r0, [r7, #0]
   15494:	f7ec f862 	bl	155c <vstr_clear>
            vstr->alloc = 0;
   15498:	683b      	ldr	r3, [r7, #0]
   1549a:	2200      	movs	r2, #0
   1549c:	601a      	str	r2, [r3, #0]
            return MP_OBJ_NEW_QSTR(q);
   1549e:	68fb      	ldr	r3, [r7, #12]
   154a0:	009b      	lsls	r3, r3, #2
   154a2:	f043 0302 	orr.w	r3, r3, #2
   154a6:	e03b      	b.n	15520 <mp_obj_new_str_from_vstr+0xb8>
        }
    }

    // make a new str/bytes object
    mp_obj_str_t *o = m_new_obj(mp_obj_str_t);
   154a8:	2010      	movs	r0, #16
   154aa:	f7ea ff37 	bl	31c <m_malloc>
   154ae:	60b8      	str	r0, [r7, #8]
    o->base.type = type;
   154b0:	68bb      	ldr	r3, [r7, #8]
   154b2:	687a      	ldr	r2, [r7, #4]
   154b4:	601a      	str	r2, [r3, #0]
    o->len = vstr->len;
   154b6:	683b      	ldr	r3, [r7, #0]
   154b8:	685a      	ldr	r2, [r3, #4]
   154ba:	68bb      	ldr	r3, [r7, #8]
   154bc:	609a      	str	r2, [r3, #8]
    o->hash = qstr_compute_hash((byte*)vstr->buf, vstr->len);
   154be:	683b      	ldr	r3, [r7, #0]
   154c0:	689a      	ldr	r2, [r3, #8]
   154c2:	683b      	ldr	r3, [r7, #0]
   154c4:	685b      	ldr	r3, [r3, #4]
   154c6:	4619      	mov	r1, r3
   154c8:	4610      	mov	r0, r2
   154ca:	f7eb fd6d 	bl	fa8 <qstr_compute_hash>
   154ce:	4602      	mov	r2, r0
   154d0:	68bb      	ldr	r3, [r7, #8]
   154d2:	605a      	str	r2, [r3, #4]
    if (vstr->len + 1 == vstr->alloc) {
   154d4:	683b      	ldr	r3, [r7, #0]
   154d6:	685b      	ldr	r3, [r3, #4]
   154d8:	1c5a      	adds	r2, r3, #1
   154da:	683b      	ldr	r3, [r7, #0]
   154dc:	681b      	ldr	r3, [r3, #0]
   154de:	429a      	cmp	r2, r3
   154e0:	d104      	bne.n	154ec <mp_obj_new_str_from_vstr+0x84>
        o->data = (byte*)vstr->buf;
   154e2:	683b      	ldr	r3, [r7, #0]
   154e4:	689a      	ldr	r2, [r3, #8]
   154e6:	68bb      	ldr	r3, [r7, #8]
   154e8:	60da      	str	r2, [r3, #12]
   154ea:	e00b      	b.n	15504 <mp_obj_new_str_from_vstr+0x9c>
    } else {
        o->data = (byte*)m_renew(char, vstr->buf, vstr->alloc, vstr->len + 1);
   154ec:	683b      	ldr	r3, [r7, #0]
   154ee:	689a      	ldr	r2, [r3, #8]
   154f0:	683b      	ldr	r3, [r7, #0]
   154f2:	685b      	ldr	r3, [r3, #4]
   154f4:	3301      	adds	r3, #1
   154f6:	4619      	mov	r1, r3
   154f8:	4610      	mov	r0, r2
   154fa:	f7ea ff5b 	bl	3b4 <m_realloc>
   154fe:	4602      	mov	r2, r0
   15500:	68bb      	ldr	r3, [r7, #8]
   15502:	60da      	str	r2, [r3, #12]
    }
    ((byte*)o->data)[o->len] = '\0'; // add null byte
   15504:	68bb      	ldr	r3, [r7, #8]
   15506:	68da      	ldr	r2, [r3, #12]
   15508:	68bb      	ldr	r3, [r7, #8]
   1550a:	689b      	ldr	r3, [r3, #8]
   1550c:	4413      	add	r3, r2
   1550e:	2200      	movs	r2, #0
   15510:	701a      	strb	r2, [r3, #0]
    vstr->buf = NULL;
   15512:	683b      	ldr	r3, [r7, #0]
   15514:	2200      	movs	r2, #0
   15516:	609a      	str	r2, [r3, #8]
    vstr->alloc = 0;
   15518:	683b      	ldr	r3, [r7, #0]
   1551a:	2200      	movs	r2, #0
   1551c:	601a      	str	r2, [r3, #0]
    return MP_OBJ_FROM_PTR(o);
   1551e:	68bb      	ldr	r3, [r7, #8]
}
   15520:	4618      	mov	r0, r3
   15522:	3710      	adds	r7, #16
   15524:	46bd      	mov	sp, r7
   15526:	bd80      	pop	{r7, pc}
   15528:	00023b68 	.word	0x00023b68

0001552c <mp_obj_new_str>:

mp_obj_t mp_obj_new_str(const char* data, size_t len) {
   1552c:	b580      	push	{r7, lr}
   1552e:	b084      	sub	sp, #16
   15530:	af00      	add	r7, sp, #0
   15532:	6078      	str	r0, [r7, #4]
   15534:	6039      	str	r1, [r7, #0]
    qstr q = qstr_find_strn(data, len);
   15536:	6839      	ldr	r1, [r7, #0]
   15538:	6878      	ldr	r0, [r7, #4]
   1553a:	f7eb fde5 	bl	1108 <qstr_find_strn>
   1553e:	60f8      	str	r0, [r7, #12]
    if (q != MP_QSTR_NULL) {
   15540:	68fb      	ldr	r3, [r7, #12]
   15542:	2b00      	cmp	r3, #0
   15544:	d004      	beq.n	15550 <mp_obj_new_str+0x24>
        // qstr with this data already exists
        return MP_OBJ_NEW_QSTR(q);
   15546:	68fb      	ldr	r3, [r7, #12]
   15548:	009b      	lsls	r3, r3, #2
   1554a:	f043 0302 	orr.w	r3, r3, #2
   1554e:	e005      	b.n	1555c <mp_obj_new_str+0x30>
    } else {
        // no existing qstr, don't make one
        return mp_obj_new_str_copy(&mp_type_str, (const byte*)data, len);
   15550:	683a      	ldr	r2, [r7, #0]
   15552:	6879      	ldr	r1, [r7, #4]
   15554:	4803      	ldr	r0, [pc, #12]	; (15564 <mp_obj_new_str+0x38>)
   15556:	f7ff ff27 	bl	153a8 <mp_obj_new_str_copy>
   1555a:	4603      	mov	r3, r0
    }
}
   1555c:	4618      	mov	r0, r3
   1555e:	3710      	adds	r7, #16
   15560:	46bd      	mov	sp, r7
   15562:	bd80      	pop	{r7, pc}
   15564:	00023b68 	.word	0x00023b68

00015568 <mp_obj_str_intern>:

mp_obj_t mp_obj_str_intern(mp_obj_t str) {
   15568:	b580      	push	{r7, lr}
   1556a:	b084      	sub	sp, #16
   1556c:	af00      	add	r7, sp, #0
   1556e:	6078      	str	r0, [r7, #4]
    GET_STR_DATA_LEN(str, data, len);
   15570:	6878      	ldr	r0, [r7, #4]
   15572:	f7fc fed9 	bl	12328 <MP_OBJ_IS_QSTR>
   15576:	4603      	mov	r3, r0
   15578:	2b00      	cmp	r3, #0
   1557a:	d009      	beq.n	15590 <mp_obj_str_intern+0x28>
   1557c:	687b      	ldr	r3, [r7, #4]
   1557e:	089b      	lsrs	r3, r3, #2
   15580:	f107 0208 	add.w	r2, r7, #8
   15584:	4611      	mov	r1, r2
   15586:	4618      	mov	r0, r3
   15588:	f7eb ff0c 	bl	13a4 <qstr_data>
   1558c:	60f8      	str	r0, [r7, #12]
   1558e:	e005      	b.n	1559c <mp_obj_str_intern+0x34>
   15590:	687b      	ldr	r3, [r7, #4]
   15592:	689b      	ldr	r3, [r3, #8]
   15594:	60bb      	str	r3, [r7, #8]
   15596:	687b      	ldr	r3, [r7, #4]
   15598:	68db      	ldr	r3, [r3, #12]
   1559a:	60fb      	str	r3, [r7, #12]
    return mp_obj_new_str_via_qstr((const char*)data, len);
   1559c:	68bb      	ldr	r3, [r7, #8]
   1559e:	4619      	mov	r1, r3
   155a0:	68f8      	ldr	r0, [r7, #12]
   155a2:	f7ff ff4f 	bl	15444 <mp_obj_new_str_via_qstr>
   155a6:	4603      	mov	r3, r0
}
   155a8:	4618      	mov	r0, r3
   155aa:	3710      	adds	r7, #16
   155ac:	46bd      	mov	sp, r7
   155ae:	bd80      	pop	{r7, pc}

000155b0 <mp_obj_str_intern_checked>:

mp_obj_t mp_obj_str_intern_checked(mp_obj_t obj) {
   155b0:	b580      	push	{r7, lr}
   155b2:	b084      	sub	sp, #16
   155b4:	af00      	add	r7, sp, #0
   155b6:	6078      	str	r0, [r7, #4]
    size_t len;
    const char *data = mp_obj_str_get_data(obj, &len);
   155b8:	f107 0308 	add.w	r3, r7, #8
   155bc:	4619      	mov	r1, r3
   155be:	6878      	ldr	r0, [r7, #4]
   155c0:	f000 f916 	bl	157f0 <mp_obj_str_get_data>
   155c4:	60f8      	str	r0, [r7, #12]
    return mp_obj_new_str_via_qstr((const char*)data, len);
   155c6:	68bb      	ldr	r3, [r7, #8]
   155c8:	4619      	mov	r1, r3
   155ca:	68f8      	ldr	r0, [r7, #12]
   155cc:	f7ff ff3a 	bl	15444 <mp_obj_new_str_via_qstr>
   155d0:	4603      	mov	r3, r0
}
   155d2:	4618      	mov	r0, r3
   155d4:	3710      	adds	r7, #16
   155d6:	46bd      	mov	sp, r7
   155d8:	bd80      	pop	{r7, pc}
   155da:	bf00      	nop

000155dc <mp_obj_new_bytes>:

mp_obj_t mp_obj_new_bytes(const byte* data, size_t len) {
   155dc:	b580      	push	{r7, lr}
   155de:	b082      	sub	sp, #8
   155e0:	af00      	add	r7, sp, #0
   155e2:	6078      	str	r0, [r7, #4]
   155e4:	6039      	str	r1, [r7, #0]
    return mp_obj_new_str_copy(&mp_type_bytes, data, len);
   155e6:	683a      	ldr	r2, [r7, #0]
   155e8:	6879      	ldr	r1, [r7, #4]
   155ea:	4804      	ldr	r0, [pc, #16]	; (155fc <mp_obj_new_bytes+0x20>)
   155ec:	f7ff fedc 	bl	153a8 <mp_obj_new_str_copy>
   155f0:	4603      	mov	r3, r0
}
   155f2:	4618      	mov	r0, r3
   155f4:	3708      	adds	r7, #8
   155f6:	46bd      	mov	sp, r7
   155f8:	bd80      	pop	{r7, pc}
   155fa:	bf00      	nop
   155fc:	00023ba4 	.word	0x00023ba4

00015600 <mp_obj_str_equal>:

bool mp_obj_str_equal(mp_obj_t s1, mp_obj_t s2) {
   15600:	b580      	push	{r7, lr}
   15602:	b088      	sub	sp, #32
   15604:	af00      	add	r7, sp, #0
   15606:	6078      	str	r0, [r7, #4]
   15608:	6039      	str	r1, [r7, #0]
    if (MP_OBJ_IS_QSTR(s1) && MP_OBJ_IS_QSTR(s2)) {
   1560a:	6878      	ldr	r0, [r7, #4]
   1560c:	f7fc fe8c 	bl	12328 <MP_OBJ_IS_QSTR>
   15610:	4603      	mov	r3, r0
   15612:	2b00      	cmp	r3, #0
   15614:	d00d      	beq.n	15632 <mp_obj_str_equal+0x32>
   15616:	6838      	ldr	r0, [r7, #0]
   15618:	f7fc fe86 	bl	12328 <MP_OBJ_IS_QSTR>
   1561c:	4603      	mov	r3, r0
   1561e:	2b00      	cmp	r3, #0
   15620:	d007      	beq.n	15632 <mp_obj_str_equal+0x32>
        return s1 == s2;
   15622:	687a      	ldr	r2, [r7, #4]
   15624:	683b      	ldr	r3, [r7, #0]
   15626:	429a      	cmp	r2, r3
   15628:	bf0c      	ite	eq
   1562a:	2301      	moveq	r3, #1
   1562c:	2300      	movne	r3, #0
   1562e:	b2db      	uxtb	r3, r3
   15630:	e069      	b.n	15706 <mp_obj_str_equal+0x106>
    } else {
        GET_STR_HASH(s1, h1);
   15632:	6878      	ldr	r0, [r7, #4]
   15634:	f7fc fe78 	bl	12328 <MP_OBJ_IS_QSTR>
   15638:	4603      	mov	r3, r0
   1563a:	2b00      	cmp	r3, #0
   1563c:	d006      	beq.n	1564c <mp_obj_str_equal+0x4c>
   1563e:	687b      	ldr	r3, [r7, #4]
   15640:	089b      	lsrs	r3, r3, #2
   15642:	4618      	mov	r0, r3
   15644:	f7eb fe82 	bl	134c <qstr_hash>
   15648:	61f8      	str	r0, [r7, #28]
   1564a:	e002      	b.n	15652 <mp_obj_str_equal+0x52>
   1564c:	687b      	ldr	r3, [r7, #4]
   1564e:	685b      	ldr	r3, [r3, #4]
   15650:	61fb      	str	r3, [r7, #28]
        GET_STR_HASH(s2, h2);
   15652:	6838      	ldr	r0, [r7, #0]
   15654:	f7fc fe68 	bl	12328 <MP_OBJ_IS_QSTR>
   15658:	4603      	mov	r3, r0
   1565a:	2b00      	cmp	r3, #0
   1565c:	d006      	beq.n	1566c <mp_obj_str_equal+0x6c>
   1565e:	683b      	ldr	r3, [r7, #0]
   15660:	089b      	lsrs	r3, r3, #2
   15662:	4618      	mov	r0, r3
   15664:	f7eb fe72 	bl	134c <qstr_hash>
   15668:	61b8      	str	r0, [r7, #24]
   1566a:	e002      	b.n	15672 <mp_obj_str_equal+0x72>
   1566c:	683b      	ldr	r3, [r7, #0]
   1566e:	685b      	ldr	r3, [r3, #4]
   15670:	61bb      	str	r3, [r7, #24]
        // If any of hashes is 0, it means it's not valid
        if (h1 != 0 && h2 != 0 && h1 != h2) {
   15672:	69fb      	ldr	r3, [r7, #28]
   15674:	2b00      	cmp	r3, #0
   15676:	d008      	beq.n	1568a <mp_obj_str_equal+0x8a>
   15678:	69bb      	ldr	r3, [r7, #24]
   1567a:	2b00      	cmp	r3, #0
   1567c:	d005      	beq.n	1568a <mp_obj_str_equal+0x8a>
   1567e:	69fa      	ldr	r2, [r7, #28]
   15680:	69bb      	ldr	r3, [r7, #24]
   15682:	429a      	cmp	r2, r3
   15684:	d001      	beq.n	1568a <mp_obj_str_equal+0x8a>
            return false;
   15686:	2300      	movs	r3, #0
   15688:	e03d      	b.n	15706 <mp_obj_str_equal+0x106>
        }
        GET_STR_DATA_LEN(s1, d1, l1);
   1568a:	6878      	ldr	r0, [r7, #4]
   1568c:	f7fc fe4c 	bl	12328 <MP_OBJ_IS_QSTR>
   15690:	4603      	mov	r3, r0
   15692:	2b00      	cmp	r3, #0
   15694:	d009      	beq.n	156aa <mp_obj_str_equal+0xaa>
   15696:	687b      	ldr	r3, [r7, #4]
   15698:	089b      	lsrs	r3, r3, #2
   1569a:	f107 020c 	add.w	r2, r7, #12
   1569e:	4611      	mov	r1, r2
   156a0:	4618      	mov	r0, r3
   156a2:	f7eb fe7f 	bl	13a4 <qstr_data>
   156a6:	6178      	str	r0, [r7, #20]
   156a8:	e005      	b.n	156b6 <mp_obj_str_equal+0xb6>
   156aa:	687b      	ldr	r3, [r7, #4]
   156ac:	689b      	ldr	r3, [r3, #8]
   156ae:	60fb      	str	r3, [r7, #12]
   156b0:	687b      	ldr	r3, [r7, #4]
   156b2:	68db      	ldr	r3, [r3, #12]
   156b4:	617b      	str	r3, [r7, #20]
        GET_STR_DATA_LEN(s2, d2, l2);
   156b6:	6838      	ldr	r0, [r7, #0]
   156b8:	f7fc fe36 	bl	12328 <MP_OBJ_IS_QSTR>
   156bc:	4603      	mov	r3, r0
   156be:	2b00      	cmp	r3, #0
   156c0:	d009      	beq.n	156d6 <mp_obj_str_equal+0xd6>
   156c2:	683b      	ldr	r3, [r7, #0]
   156c4:	089b      	lsrs	r3, r3, #2
   156c6:	f107 0208 	add.w	r2, r7, #8
   156ca:	4611      	mov	r1, r2
   156cc:	4618      	mov	r0, r3
   156ce:	f7eb fe69 	bl	13a4 <qstr_data>
   156d2:	6138      	str	r0, [r7, #16]
   156d4:	e005      	b.n	156e2 <mp_obj_str_equal+0xe2>
   156d6:	683b      	ldr	r3, [r7, #0]
   156d8:	689b      	ldr	r3, [r3, #8]
   156da:	60bb      	str	r3, [r7, #8]
   156dc:	683b      	ldr	r3, [r7, #0]
   156de:	68db      	ldr	r3, [r3, #12]
   156e0:	613b      	str	r3, [r7, #16]
        if (l1 != l2) {
   156e2:	68fa      	ldr	r2, [r7, #12]
   156e4:	68bb      	ldr	r3, [r7, #8]
   156e6:	429a      	cmp	r2, r3
   156e8:	d001      	beq.n	156ee <mp_obj_str_equal+0xee>
            return false;
   156ea:	2300      	movs	r3, #0
   156ec:	e00b      	b.n	15706 <mp_obj_str_equal+0x106>
        }
        return memcmp(d1, d2, l1) == 0;
   156ee:	68fb      	ldr	r3, [r7, #12]
   156f0:	461a      	mov	r2, r3
   156f2:	6939      	ldr	r1, [r7, #16]
   156f4:	6978      	ldr	r0, [r7, #20]
   156f6:	f007 fc33 	bl	1cf60 <memcmp>
   156fa:	4603      	mov	r3, r0
   156fc:	2b00      	cmp	r3, #0
   156fe:	bf0c      	ite	eq
   15700:	2301      	moveq	r3, #1
   15702:	2300      	movne	r3, #0
   15704:	b2db      	uxtb	r3, r3
    }
}
   15706:	4618      	mov	r0, r3
   15708:	3720      	adds	r7, #32
   1570a:	46bd      	mov	sp, r7
   1570c:	bd80      	pop	{r7, pc}
   1570e:	bf00      	nop

00015710 <bad_implicit_conversion>:

STATIC NORETURN void bad_implicit_conversion(mp_obj_t self_in) {
   15710:	b580      	push	{r7, lr}
   15712:	b082      	sub	sp, #8
   15714:	af00      	add	r7, sp, #0
   15716:	6078      	str	r0, [r7, #4]
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("can't convert to str implicitly");
   15718:	4801      	ldr	r0, [pc, #4]	; (15720 <bad_implicit_conversion+0x10>)
   1571a:	f7f7 fc4d 	bl	cfb8 <mp_raise_TypeError>
   1571e:	bf00      	nop
   15720:	00023bf4 	.word	0x00023bf4

00015724 <mp_obj_str_get_qstr>:
    }
}

// use this if you will anyway convert the string to a qstr
// will be more efficient for the case where it's already a qstr
qstr mp_obj_str_get_qstr(mp_obj_t self_in) {
   15724:	b580      	push	{r7, lr}
   15726:	b084      	sub	sp, #16
   15728:	af00      	add	r7, sp, #0
   1572a:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_QSTR(self_in)) {
   1572c:	6878      	ldr	r0, [r7, #4]
   1572e:	f7fc fdfb 	bl	12328 <MP_OBJ_IS_QSTR>
   15732:	4603      	mov	r3, r0
   15734:	2b00      	cmp	r3, #0
   15736:	d002      	beq.n	1573e <mp_obj_str_get_qstr+0x1a>
        return MP_OBJ_QSTR_VALUE(self_in);
   15738:	687b      	ldr	r3, [r7, #4]
   1573a:	089b      	lsrs	r3, r3, #2
   1573c:	e019      	b.n	15772 <mp_obj_str_get_qstr+0x4e>
    } else if (MP_OBJ_IS_TYPE(self_in, &mp_type_str)) {
   1573e:	6878      	ldr	r0, [r7, #4]
   15740:	f7fc fe04 	bl	1234c <MP_OBJ_IS_OBJ>
   15744:	4603      	mov	r3, r0
   15746:	2b00      	cmp	r3, #0
   15748:	d010      	beq.n	1576c <mp_obj_str_get_qstr+0x48>
   1574a:	687b      	ldr	r3, [r7, #4]
   1574c:	681b      	ldr	r3, [r3, #0]
   1574e:	4a0b      	ldr	r2, [pc, #44]	; (1577c <mp_obj_str_get_qstr+0x58>)
   15750:	4293      	cmp	r3, r2
   15752:	d10b      	bne.n	1576c <mp_obj_str_get_qstr+0x48>
        mp_obj_str_t *self = MP_OBJ_TO_PTR(self_in);
   15754:	687b      	ldr	r3, [r7, #4]
   15756:	60fb      	str	r3, [r7, #12]
        return qstr_from_strn((char*)self->data, self->len);
   15758:	68fb      	ldr	r3, [r7, #12]
   1575a:	68da      	ldr	r2, [r3, #12]
   1575c:	68fb      	ldr	r3, [r7, #12]
   1575e:	689b      	ldr	r3, [r3, #8]
   15760:	4619      	mov	r1, r3
   15762:	4610      	mov	r0, r2
   15764:	f7eb fd34 	bl	11d0 <qstr_from_strn>
   15768:	4603      	mov	r3, r0
   1576a:	e002      	b.n	15772 <mp_obj_str_get_qstr+0x4e>
    } else {
        bad_implicit_conversion(self_in);
   1576c:	6878      	ldr	r0, [r7, #4]
   1576e:	f7ff ffcf 	bl	15710 <bad_implicit_conversion>
    }
}
   15772:	4618      	mov	r0, r3
   15774:	3710      	adds	r7, #16
   15776:	46bd      	mov	sp, r7
   15778:	bd80      	pop	{r7, pc}
   1577a:	bf00      	nop
   1577c:	00023b68 	.word	0x00023b68

00015780 <mp_obj_str_get_str>:

// only use this function if you need the str data to be zero terminated
// at the moment all strings are zero terminated to help with C ASCIIZ compatibility
const char *mp_obj_str_get_str(mp_obj_t self_in) {
   15780:	b580      	push	{r7, lr}
   15782:	b084      	sub	sp, #16
   15784:	af00      	add	r7, sp, #0
   15786:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_STR_OR_BYTES(self_in)) {
   15788:	6878      	ldr	r0, [r7, #4]
   1578a:	f7fc fdcd 	bl	12328 <MP_OBJ_IS_QSTR>
   1578e:	4603      	mov	r3, r0
   15790:	2b00      	cmp	r3, #0
   15792:	d10b      	bne.n	157ac <mp_obj_str_get_str+0x2c>
   15794:	6878      	ldr	r0, [r7, #4]
   15796:	f7fc fdd9 	bl	1234c <MP_OBJ_IS_OBJ>
   1579a:	4603      	mov	r3, r0
   1579c:	2b00      	cmp	r3, #0
   1579e:	d01d      	beq.n	157dc <mp_obj_str_get_str+0x5c>
   157a0:	687b      	ldr	r3, [r7, #4]
   157a2:	681b      	ldr	r3, [r3, #0]
   157a4:	699b      	ldr	r3, [r3, #24]
   157a6:	4a11      	ldr	r2, [pc, #68]	; (157ec <mp_obj_str_get_str+0x6c>)
   157a8:	4293      	cmp	r3, r2
   157aa:	d117      	bne.n	157dc <mp_obj_str_get_str+0x5c>
        GET_STR_DATA_LEN(self_in, s, l);
   157ac:	6878      	ldr	r0, [r7, #4]
   157ae:	f7fc fdbb 	bl	12328 <MP_OBJ_IS_QSTR>
   157b2:	4603      	mov	r3, r0
   157b4:	2b00      	cmp	r3, #0
   157b6:	d009      	beq.n	157cc <mp_obj_str_get_str+0x4c>
   157b8:	687b      	ldr	r3, [r7, #4]
   157ba:	089b      	lsrs	r3, r3, #2
   157bc:	f107 0208 	add.w	r2, r7, #8
   157c0:	4611      	mov	r1, r2
   157c2:	4618      	mov	r0, r3
   157c4:	f7eb fdee 	bl	13a4 <qstr_data>
   157c8:	60f8      	str	r0, [r7, #12]
   157ca:	e005      	b.n	157d8 <mp_obj_str_get_str+0x58>
   157cc:	687b      	ldr	r3, [r7, #4]
   157ce:	689b      	ldr	r3, [r3, #8]
   157d0:	60bb      	str	r3, [r7, #8]
   157d2:	687b      	ldr	r3, [r7, #4]
   157d4:	68db      	ldr	r3, [r3, #12]
   157d6:	60fb      	str	r3, [r7, #12]
        (void)l; // len unused
        return (const char*)s;
   157d8:	68fb      	ldr	r3, [r7, #12]
   157da:	e002      	b.n	157e2 <mp_obj_str_get_str+0x62>
    } else {
        bad_implicit_conversion(self_in);
   157dc:	6878      	ldr	r0, [r7, #4]
   157de:	f7ff ff97 	bl	15710 <bad_implicit_conversion>
    }
}
   157e2:	4618      	mov	r0, r3
   157e4:	3710      	adds	r7, #16
   157e6:	46bd      	mov	sp, r7
   157e8:	bd80      	pop	{r7, pc}
   157ea:	bf00      	nop
   157ec:	000129d5 	.word	0x000129d5

000157f0 <mp_obj_str_get_data>:

const char *mp_obj_str_get_data(mp_obj_t self_in, size_t *len) {
   157f0:	b580      	push	{r7, lr}
   157f2:	b084      	sub	sp, #16
   157f4:	af00      	add	r7, sp, #0
   157f6:	6078      	str	r0, [r7, #4]
   157f8:	6039      	str	r1, [r7, #0]
    if (MP_OBJ_IS_STR_OR_BYTES(self_in)) {
   157fa:	6878      	ldr	r0, [r7, #4]
   157fc:	f7fc fd94 	bl	12328 <MP_OBJ_IS_QSTR>
   15800:	4603      	mov	r3, r0
   15802:	2b00      	cmp	r3, #0
   15804:	d10b      	bne.n	1581e <mp_obj_str_get_data+0x2e>
   15806:	6878      	ldr	r0, [r7, #4]
   15808:	f7fc fda0 	bl	1234c <MP_OBJ_IS_OBJ>
   1580c:	4603      	mov	r3, r0
   1580e:	2b00      	cmp	r3, #0
   15810:	d020      	beq.n	15854 <mp_obj_str_get_data+0x64>
   15812:	687b      	ldr	r3, [r7, #4]
   15814:	681b      	ldr	r3, [r3, #0]
   15816:	699b      	ldr	r3, [r3, #24]
   15818:	4a12      	ldr	r2, [pc, #72]	; (15864 <mp_obj_str_get_data+0x74>)
   1581a:	4293      	cmp	r3, r2
   1581c:	d11a      	bne.n	15854 <mp_obj_str_get_data+0x64>
        GET_STR_DATA_LEN(self_in, s, l);
   1581e:	6878      	ldr	r0, [r7, #4]
   15820:	f7fc fd82 	bl	12328 <MP_OBJ_IS_QSTR>
   15824:	4603      	mov	r3, r0
   15826:	2b00      	cmp	r3, #0
   15828:	d009      	beq.n	1583e <mp_obj_str_get_data+0x4e>
   1582a:	687b      	ldr	r3, [r7, #4]
   1582c:	089b      	lsrs	r3, r3, #2
   1582e:	f107 0208 	add.w	r2, r7, #8
   15832:	4611      	mov	r1, r2
   15834:	4618      	mov	r0, r3
   15836:	f7eb fdb5 	bl	13a4 <qstr_data>
   1583a:	60f8      	str	r0, [r7, #12]
   1583c:	e005      	b.n	1584a <mp_obj_str_get_data+0x5a>
   1583e:	687b      	ldr	r3, [r7, #4]
   15840:	689b      	ldr	r3, [r3, #8]
   15842:	60bb      	str	r3, [r7, #8]
   15844:	687b      	ldr	r3, [r7, #4]
   15846:	68db      	ldr	r3, [r3, #12]
   15848:	60fb      	str	r3, [r7, #12]
        *len = l;
   1584a:	68ba      	ldr	r2, [r7, #8]
   1584c:	683b      	ldr	r3, [r7, #0]
   1584e:	601a      	str	r2, [r3, #0]
        return (const char*)s;
   15850:	68fb      	ldr	r3, [r7, #12]
   15852:	e002      	b.n	1585a <mp_obj_str_get_data+0x6a>
    } else {
        bad_implicit_conversion(self_in);
   15854:	6878      	ldr	r0, [r7, #4]
   15856:	f7ff ff5b 	bl	15710 <bad_implicit_conversion>
    }
}
   1585a:	4618      	mov	r0, r3
   1585c:	3710      	adds	r7, #16
   1585e:	46bd      	mov	sp, r7
   15860:	bd80      	pop	{r7, pc}
   15862:	bf00      	nop
   15864:	000129d5 	.word	0x000129d5

00015868 <str_it_iternext>:
    mp_obj_t str;
    size_t cur;
} mp_obj_str8_it_t;

#if !MICROPY_PY_BUILTINS_STR_UNICODE
STATIC mp_obj_t str_it_iternext(mp_obj_t self_in) {
   15868:	b580      	push	{r7, lr}
   1586a:	b086      	sub	sp, #24
   1586c:	af00      	add	r7, sp, #0
   1586e:	6078      	str	r0, [r7, #4]
    mp_obj_str8_it_t *self = MP_OBJ_TO_PTR(self_in);
   15870:	687b      	ldr	r3, [r7, #4]
   15872:	613b      	str	r3, [r7, #16]
    GET_STR_DATA_LEN(self->str, str, len);
   15874:	693b      	ldr	r3, [r7, #16]
   15876:	689b      	ldr	r3, [r3, #8]
   15878:	4618      	mov	r0, r3
   1587a:	f7fc fd55 	bl	12328 <MP_OBJ_IS_QSTR>
   1587e:	4603      	mov	r3, r0
   15880:	2b00      	cmp	r3, #0
   15882:	d00a      	beq.n	1589a <str_it_iternext+0x32>
   15884:	693b      	ldr	r3, [r7, #16]
   15886:	689b      	ldr	r3, [r3, #8]
   15888:	089b      	lsrs	r3, r3, #2
   1588a:	f107 0208 	add.w	r2, r7, #8
   1588e:	4611      	mov	r1, r2
   15890:	4618      	mov	r0, r3
   15892:	f7eb fd87 	bl	13a4 <qstr_data>
   15896:	6178      	str	r0, [r7, #20]
   15898:	e007      	b.n	158aa <str_it_iternext+0x42>
   1589a:	693b      	ldr	r3, [r7, #16]
   1589c:	689b      	ldr	r3, [r3, #8]
   1589e:	689b      	ldr	r3, [r3, #8]
   158a0:	60bb      	str	r3, [r7, #8]
   158a2:	693b      	ldr	r3, [r7, #16]
   158a4:	689b      	ldr	r3, [r3, #8]
   158a6:	68db      	ldr	r3, [r3, #12]
   158a8:	617b      	str	r3, [r7, #20]
    if (self->cur < len) {
   158aa:	693b      	ldr	r3, [r7, #16]
   158ac:	68da      	ldr	r2, [r3, #12]
   158ae:	68bb      	ldr	r3, [r7, #8]
   158b0:	429a      	cmp	r2, r3
   158b2:	d20f      	bcs.n	158d4 <str_it_iternext+0x6c>
        mp_obj_t o_out = mp_obj_new_str_via_qstr((const char*)str + self->cur, 1);
   158b4:	693b      	ldr	r3, [r7, #16]
   158b6:	68db      	ldr	r3, [r3, #12]
   158b8:	697a      	ldr	r2, [r7, #20]
   158ba:	4413      	add	r3, r2
   158bc:	2101      	movs	r1, #1
   158be:	4618      	mov	r0, r3
   158c0:	f7ff fdc0 	bl	15444 <mp_obj_new_str_via_qstr>
   158c4:	60f8      	str	r0, [r7, #12]
        self->cur += 1;
   158c6:	693b      	ldr	r3, [r7, #16]
   158c8:	68db      	ldr	r3, [r3, #12]
   158ca:	1c5a      	adds	r2, r3, #1
   158cc:	693b      	ldr	r3, [r7, #16]
   158ce:	60da      	str	r2, [r3, #12]
        return o_out;
   158d0:	68fb      	ldr	r3, [r7, #12]
   158d2:	e000      	b.n	158d6 <str_it_iternext+0x6e>
    } else {
        return MP_OBJ_STOP_ITERATION;
   158d4:	2304      	movs	r3, #4
    }
}
   158d6:	4618      	mov	r0, r3
   158d8:	3718      	adds	r7, #24
   158da:	46bd      	mov	sp, r7
   158dc:	bd80      	pop	{r7, pc}
   158de:	bf00      	nop

000158e0 <mp_obj_new_str_iterator>:

STATIC mp_obj_t mp_obj_new_str_iterator(mp_obj_t str, mp_obj_iter_buf_t *iter_buf) {
   158e0:	b480      	push	{r7}
   158e2:	b085      	sub	sp, #20
   158e4:	af00      	add	r7, sp, #0
   158e6:	6078      	str	r0, [r7, #4]
   158e8:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_str8_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_str8_it_t *o = (mp_obj_str8_it_t*)iter_buf;
   158ea:	683b      	ldr	r3, [r7, #0]
   158ec:	60fb      	str	r3, [r7, #12]
    o->base.type = &mp_type_polymorph_iter;
   158ee:	68fb      	ldr	r3, [r7, #12]
   158f0:	4a08      	ldr	r2, [pc, #32]	; (15914 <mp_obj_new_str_iterator+0x34>)
   158f2:	601a      	str	r2, [r3, #0]
    o->iternext = str_it_iternext;
   158f4:	68fb      	ldr	r3, [r7, #12]
   158f6:	4a08      	ldr	r2, [pc, #32]	; (15918 <mp_obj_new_str_iterator+0x38>)
   158f8:	605a      	str	r2, [r3, #4]
    o->str = str;
   158fa:	68fb      	ldr	r3, [r7, #12]
   158fc:	687a      	ldr	r2, [r7, #4]
   158fe:	609a      	str	r2, [r3, #8]
    o->cur = 0;
   15900:	68fb      	ldr	r3, [r7, #12]
   15902:	2200      	movs	r2, #0
   15904:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   15906:	68fb      	ldr	r3, [r7, #12]
}
   15908:	4618      	mov	r0, r3
   1590a:	3714      	adds	r7, #20
   1590c:	46bd      	mov	sp, r7
   1590e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15912:	4770      	bx	lr
   15914:	00023454 	.word	0x00023454
   15918:	00015869 	.word	0x00015869

0001591c <bytes_it_iternext>:
#endif

STATIC mp_obj_t bytes_it_iternext(mp_obj_t self_in) {
   1591c:	b580      	push	{r7, lr}
   1591e:	b086      	sub	sp, #24
   15920:	af00      	add	r7, sp, #0
   15922:	6078      	str	r0, [r7, #4]
    mp_obj_str8_it_t *self = MP_OBJ_TO_PTR(self_in);
   15924:	687b      	ldr	r3, [r7, #4]
   15926:	613b      	str	r3, [r7, #16]
    GET_STR_DATA_LEN(self->str, str, len);
   15928:	693b      	ldr	r3, [r7, #16]
   1592a:	689b      	ldr	r3, [r3, #8]
   1592c:	4618      	mov	r0, r3
   1592e:	f7fc fcfb 	bl	12328 <MP_OBJ_IS_QSTR>
   15932:	4603      	mov	r3, r0
   15934:	2b00      	cmp	r3, #0
   15936:	d00a      	beq.n	1594e <bytes_it_iternext+0x32>
   15938:	693b      	ldr	r3, [r7, #16]
   1593a:	689b      	ldr	r3, [r3, #8]
   1593c:	089b      	lsrs	r3, r3, #2
   1593e:	f107 0208 	add.w	r2, r7, #8
   15942:	4611      	mov	r1, r2
   15944:	4618      	mov	r0, r3
   15946:	f7eb fd2d 	bl	13a4 <qstr_data>
   1594a:	6178      	str	r0, [r7, #20]
   1594c:	e007      	b.n	1595e <bytes_it_iternext+0x42>
   1594e:	693b      	ldr	r3, [r7, #16]
   15950:	689b      	ldr	r3, [r3, #8]
   15952:	689b      	ldr	r3, [r3, #8]
   15954:	60bb      	str	r3, [r7, #8]
   15956:	693b      	ldr	r3, [r7, #16]
   15958:	689b      	ldr	r3, [r3, #8]
   1595a:	68db      	ldr	r3, [r3, #12]
   1595c:	617b      	str	r3, [r7, #20]
    if (self->cur < len) {
   1595e:	693b      	ldr	r3, [r7, #16]
   15960:	68da      	ldr	r2, [r3, #12]
   15962:	68bb      	ldr	r3, [r7, #8]
   15964:	429a      	cmp	r2, r3
   15966:	d20f      	bcs.n	15988 <bytes_it_iternext+0x6c>
        mp_obj_t o_out = MP_OBJ_NEW_SMALL_INT(str[self->cur]);
   15968:	693b      	ldr	r3, [r7, #16]
   1596a:	68db      	ldr	r3, [r3, #12]
   1596c:	697a      	ldr	r2, [r7, #20]
   1596e:	4413      	add	r3, r2
   15970:	781b      	ldrb	r3, [r3, #0]
   15972:	005b      	lsls	r3, r3, #1
   15974:	f043 0301 	orr.w	r3, r3, #1
   15978:	60fb      	str	r3, [r7, #12]
        self->cur += 1;
   1597a:	693b      	ldr	r3, [r7, #16]
   1597c:	68db      	ldr	r3, [r3, #12]
   1597e:	1c5a      	adds	r2, r3, #1
   15980:	693b      	ldr	r3, [r7, #16]
   15982:	60da      	str	r2, [r3, #12]
        return o_out;
   15984:	68fb      	ldr	r3, [r7, #12]
   15986:	e000      	b.n	1598a <bytes_it_iternext+0x6e>
    } else {
        return MP_OBJ_STOP_ITERATION;
   15988:	2304      	movs	r3, #4
    }
}
   1598a:	4618      	mov	r0, r3
   1598c:	3718      	adds	r7, #24
   1598e:	46bd      	mov	sp, r7
   15990:	bd80      	pop	{r7, pc}
   15992:	bf00      	nop

00015994 <mp_obj_new_bytes_iterator>:

mp_obj_t mp_obj_new_bytes_iterator(mp_obj_t str, mp_obj_iter_buf_t *iter_buf) {
   15994:	b480      	push	{r7}
   15996:	b085      	sub	sp, #20
   15998:	af00      	add	r7, sp, #0
   1599a:	6078      	str	r0, [r7, #4]
   1599c:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_str8_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_str8_it_t *o = (mp_obj_str8_it_t*)iter_buf;
   1599e:	683b      	ldr	r3, [r7, #0]
   159a0:	60fb      	str	r3, [r7, #12]
    o->base.type = &mp_type_polymorph_iter;
   159a2:	68fb      	ldr	r3, [r7, #12]
   159a4:	4a08      	ldr	r2, [pc, #32]	; (159c8 <mp_obj_new_bytes_iterator+0x34>)
   159a6:	601a      	str	r2, [r3, #0]
    o->iternext = bytes_it_iternext;
   159a8:	68fb      	ldr	r3, [r7, #12]
   159aa:	4a08      	ldr	r2, [pc, #32]	; (159cc <mp_obj_new_bytes_iterator+0x38>)
   159ac:	605a      	str	r2, [r3, #4]
    o->str = str;
   159ae:	68fb      	ldr	r3, [r7, #12]
   159b0:	687a      	ldr	r2, [r7, #4]
   159b2:	609a      	str	r2, [r3, #8]
    o->cur = 0;
   159b4:	68fb      	ldr	r3, [r7, #12]
   159b6:	2200      	movs	r2, #0
   159b8:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   159ba:	68fb      	ldr	r3, [r7, #12]
}
   159bc:	4618      	mov	r0, r3
   159be:	3714      	adds	r7, #20
   159c0:	46bd      	mov	sp, r7
   159c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   159c6:	4770      	bx	lr
   159c8:	00023454 	.word	0x00023454
   159cc:	0001591d 	.word	0x0001591d

000159d0 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   159d0:	b480      	push	{r7}
   159d2:	b083      	sub	sp, #12
   159d4:	af00      	add	r7, sp, #0
   159d6:	6078      	str	r0, [r7, #4]
   159d8:	687b      	ldr	r3, [r7, #4]
   159da:	f003 0303 	and.w	r3, r3, #3
   159de:	2b00      	cmp	r3, #0
   159e0:	bf0c      	ite	eq
   159e2:	2301      	moveq	r3, #1
   159e4:	2300      	movne	r3, #0
   159e6:	b2db      	uxtb	r3, r3
   159e8:	4618      	mov	r0, r3
   159ea:	370c      	adds	r7, #12
   159ec:	46bd      	mov	sp, r7
   159ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   159f2:	4770      	bx	lr

000159f4 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   159f4:	b480      	push	{r7}
   159f6:	b083      	sub	sp, #12
   159f8:	af00      	add	r7, sp, #0
   159fa:	6078      	str	r0, [r7, #4]
   159fc:	687b      	ldr	r3, [r7, #4]
   159fe:	2b00      	cmp	r3, #0
   15a00:	d001      	beq.n	15a06 <mp_obj_new_bool+0x12>
   15a02:	4b04      	ldr	r3, [pc, #16]	; (15a14 <mp_obj_new_bool+0x20>)
   15a04:	e000      	b.n	15a08 <mp_obj_new_bool+0x14>
   15a06:	4b04      	ldr	r3, [pc, #16]	; (15a18 <mp_obj_new_bool+0x24>)
   15a08:	4618      	mov	r0, r3
   15a0a:	370c      	adds	r7, #12
   15a0c:	46bd      	mov	sp, r7
   15a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15a12:	4770      	bx	lr
   15a14:	00021c60 	.word	0x00021c60
   15a18:	00021c58 	.word	0x00021c58

00015a1c <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   15a1c:	b580      	push	{r7, lr}
   15a1e:	b084      	sub	sp, #16
   15a20:	af00      	add	r7, sp, #0
   15a22:	60f8      	str	r0, [r7, #12]
   15a24:	60b9      	str	r1, [r7, #8]
   15a26:	607a      	str	r2, [r7, #4]
   15a28:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   15a2a:	687b      	ldr	r3, [r7, #4]
   15a2c:	045a      	lsls	r2, r3, #17
   15a2e:	683b      	ldr	r3, [r7, #0]
   15a30:	005b      	lsls	r3, r3, #1
   15a32:	431a      	orrs	r2, r3
   15a34:	7e3b      	ldrb	r3, [r7, #24]
   15a36:	2b00      	cmp	r3, #0
   15a38:	d001      	beq.n	15a3e <mp_arg_check_num+0x22>
   15a3a:	2301      	movs	r3, #1
   15a3c:	e000      	b.n	15a40 <mp_arg_check_num+0x24>
   15a3e:	2300      	movs	r3, #0
   15a40:	4313      	orrs	r3, r2
   15a42:	461a      	mov	r2, r3
   15a44:	68b9      	ldr	r1, [r7, #8]
   15a46:	68f8      	ldr	r0, [r7, #12]
   15a48:	f7f7 fb22 	bl	d090 <mp_arg_check_num_sig>
}
   15a4c:	bf00      	nop
   15a4e:	3710      	adds	r7, #16
   15a50:	46bd      	mov	sp, r7
   15a52:	bd80      	pop	{r7, pc}

00015a54 <mp_obj_tuple_print>:
#include "py/runtime.h"

/******************************************************************************/
/* tuple                                                                      */

void mp_obj_tuple_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
   15a54:	b580      	push	{r7, lr}
   15a56:	b086      	sub	sp, #24
   15a58:	af00      	add	r7, sp, #0
   15a5a:	60f8      	str	r0, [r7, #12]
   15a5c:	60b9      	str	r1, [r7, #8]
   15a5e:	607a      	str	r2, [r7, #4]
    mp_obj_tuple_t *o = MP_OBJ_TO_PTR(o_in);
   15a60:	68bb      	ldr	r3, [r7, #8]
   15a62:	613b      	str	r3, [r7, #16]
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "[");
    } else {
        mp_print_str(print, "(");
   15a64:	4918      	ldr	r1, [pc, #96]	; (15ac8 <mp_obj_tuple_print+0x74>)
   15a66:	68f8      	ldr	r0, [r7, #12]
   15a68:	f7eb ffd2 	bl	1a10 <mp_print_str>
        kind = PRINT_REPR;
   15a6c:	2301      	movs	r3, #1
   15a6e:	607b      	str	r3, [r7, #4]
    }
    for (size_t i = 0; i < o->len; i++) {
   15a70:	2300      	movs	r3, #0
   15a72:	617b      	str	r3, [r7, #20]
   15a74:	e013      	b.n	15a9e <mp_obj_tuple_print+0x4a>
        if (i > 0) {
   15a76:	697b      	ldr	r3, [r7, #20]
   15a78:	2b00      	cmp	r3, #0
   15a7a:	d003      	beq.n	15a84 <mp_obj_tuple_print+0x30>
            mp_print_str(print, ", ");
   15a7c:	4913      	ldr	r1, [pc, #76]	; (15acc <mp_obj_tuple_print+0x78>)
   15a7e:	68f8      	ldr	r0, [r7, #12]
   15a80:	f7eb ffc6 	bl	1a10 <mp_print_str>
        }
        mp_obj_print_helper(print, o->items[i], kind);
   15a84:	693b      	ldr	r3, [r7, #16]
   15a86:	697a      	ldr	r2, [r7, #20]
   15a88:	3202      	adds	r2, #2
   15a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15a8e:	687a      	ldr	r2, [r7, #4]
   15a90:	4619      	mov	r1, r3
   15a92:	68f8      	ldr	r0, [r7, #12]
   15a94:	f7f7 ff30 	bl	d8f8 <mp_obj_print_helper>
    for (size_t i = 0; i < o->len; i++) {
   15a98:	697b      	ldr	r3, [r7, #20]
   15a9a:	3301      	adds	r3, #1
   15a9c:	617b      	str	r3, [r7, #20]
   15a9e:	693b      	ldr	r3, [r7, #16]
   15aa0:	685a      	ldr	r2, [r3, #4]
   15aa2:	697b      	ldr	r3, [r7, #20]
   15aa4:	429a      	cmp	r2, r3
   15aa6:	d8e6      	bhi.n	15a76 <mp_obj_tuple_print+0x22>
    }
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "]");
    } else {
        if (o->len == 1) {
   15aa8:	693b      	ldr	r3, [r7, #16]
   15aaa:	685b      	ldr	r3, [r3, #4]
   15aac:	2b01      	cmp	r3, #1
   15aae:	d103      	bne.n	15ab8 <mp_obj_tuple_print+0x64>
            mp_print_str(print, ",");
   15ab0:	4907      	ldr	r1, [pc, #28]	; (15ad0 <mp_obj_tuple_print+0x7c>)
   15ab2:	68f8      	ldr	r0, [r7, #12]
   15ab4:	f7eb ffac 	bl	1a10 <mp_print_str>
        }
        mp_print_str(print, ")");
   15ab8:	4906      	ldr	r1, [pc, #24]	; (15ad4 <mp_obj_tuple_print+0x80>)
   15aba:	68f8      	ldr	r0, [r7, #12]
   15abc:	f7eb ffa8 	bl	1a10 <mp_print_str>
    }
}
   15ac0:	bf00      	nop
   15ac2:	3718      	adds	r7, #24
   15ac4:	46bd      	mov	sp, r7
   15ac6:	bd80      	pop	{r7, pc}
   15ac8:	00023ca0 	.word	0x00023ca0
   15acc:	00023ca4 	.word	0x00023ca4
   15ad0:	00023ca8 	.word	0x00023ca8
   15ad4:	00023cac 	.word	0x00023cac

00015ad8 <mp_obj_tuple_make_new>:

STATIC mp_obj_t mp_obj_tuple_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   15ad8:	b580      	push	{r7, lr}
   15ada:	b08c      	sub	sp, #48	; 0x30
   15adc:	af02      	add	r7, sp, #8
   15ade:	60f8      	str	r0, [r7, #12]
   15ae0:	60b9      	str	r1, [r7, #8]
   15ae2:	607a      	str	r2, [r7, #4]
   15ae4:	603b      	str	r3, [r7, #0]
    (void)type_in;

    mp_arg_check_num(n_args, n_kw, 0, 1, false);
   15ae6:	2300      	movs	r3, #0
   15ae8:	9300      	str	r3, [sp, #0]
   15aea:	2301      	movs	r3, #1
   15aec:	2200      	movs	r2, #0
   15aee:	6879      	ldr	r1, [r7, #4]
   15af0:	68b8      	ldr	r0, [r7, #8]
   15af2:	f7ff ff93 	bl	15a1c <mp_arg_check_num>

    switch (n_args) {
   15af6:	68bb      	ldr	r3, [r7, #8]
   15af8:	2b00      	cmp	r3, #0
   15afa:	d101      	bne.n	15b00 <mp_obj_tuple_make_new+0x28>
        case 0:
            // return a empty tuple
            return mp_const_empty_tuple;
   15afc:	4b27      	ldr	r3, [pc, #156]	; (15b9c <mp_obj_tuple_make_new+0xc4>)
   15afe:	e048      	b.n	15b92 <mp_obj_tuple_make_new+0xba>

        case 1:
        default: {
            // 1 argument, an iterable from which we make a new tuple
            if (MP_OBJ_IS_TYPE(args[0], &mp_type_tuple)) {
   15b00:	683b      	ldr	r3, [r7, #0]
   15b02:	681b      	ldr	r3, [r3, #0]
   15b04:	4618      	mov	r0, r3
   15b06:	f7ff ff63 	bl	159d0 <MP_OBJ_IS_OBJ>
   15b0a:	4603      	mov	r3, r0
   15b0c:	2b00      	cmp	r3, #0
   15b0e:	d008      	beq.n	15b22 <mp_obj_tuple_make_new+0x4a>
   15b10:	683b      	ldr	r3, [r7, #0]
   15b12:	681b      	ldr	r3, [r3, #0]
   15b14:	681b      	ldr	r3, [r3, #0]
   15b16:	4a22      	ldr	r2, [pc, #136]	; (15ba0 <mp_obj_tuple_make_new+0xc8>)
   15b18:	4293      	cmp	r3, r2
   15b1a:	d102      	bne.n	15b22 <mp_obj_tuple_make_new+0x4a>
                return args[0];
   15b1c:	683b      	ldr	r3, [r7, #0]
   15b1e:	681b      	ldr	r3, [r3, #0]
   15b20:	e037      	b.n	15b92 <mp_obj_tuple_make_new+0xba>
            }

            // TODO optimise for cases where we know the length of the iterator

            size_t alloc = 4;
   15b22:	2304      	movs	r3, #4
   15b24:	627b      	str	r3, [r7, #36]	; 0x24
            size_t len = 0;
   15b26:	2300      	movs	r3, #0
   15b28:	623b      	str	r3, [r7, #32]
            mp_obj_t *items = m_new(mp_obj_t, alloc);
   15b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15b2c:	009b      	lsls	r3, r3, #2
   15b2e:	4618      	mov	r0, r3
   15b30:	f7ea fbf4 	bl	31c <m_malloc>
   15b34:	61f8      	str	r0, [r7, #28]

            mp_obj_t iterable = mp_getiter(args[0], NULL);
   15b36:	683b      	ldr	r3, [r7, #0]
   15b38:	681b      	ldr	r3, [r3, #0]
   15b3a:	2100      	movs	r1, #0
   15b3c:	4618      	mov	r0, r3
   15b3e:	f7f6 ff01 	bl	c944 <mp_getiter>
   15b42:	61b8      	str	r0, [r7, #24]
            mp_obj_t item;
            while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   15b44:	e015      	b.n	15b72 <mp_obj_tuple_make_new+0x9a>
                if (len >= alloc) {
   15b46:	6a3a      	ldr	r2, [r7, #32]
   15b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15b4a:	429a      	cmp	r2, r3
   15b4c:	d309      	bcc.n	15b62 <mp_obj_tuple_make_new+0x8a>
                    items = m_renew(mp_obj_t, items, alloc, alloc * 2);
   15b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15b50:	00db      	lsls	r3, r3, #3
   15b52:	4619      	mov	r1, r3
   15b54:	69f8      	ldr	r0, [r7, #28]
   15b56:	f7ea fc2d 	bl	3b4 <m_realloc>
   15b5a:	61f8      	str	r0, [r7, #28]
                    alloc *= 2;
   15b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15b5e:	005b      	lsls	r3, r3, #1
   15b60:	627b      	str	r3, [r7, #36]	; 0x24
                }
                items[len++] = item;
   15b62:	6a3b      	ldr	r3, [r7, #32]
   15b64:	1c5a      	adds	r2, r3, #1
   15b66:	623a      	str	r2, [r7, #32]
   15b68:	009b      	lsls	r3, r3, #2
   15b6a:	69fa      	ldr	r2, [r7, #28]
   15b6c:	4413      	add	r3, r2
   15b6e:	697a      	ldr	r2, [r7, #20]
   15b70:	601a      	str	r2, [r3, #0]
            while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   15b72:	69b8      	ldr	r0, [r7, #24]
   15b74:	f7f6 ff68 	bl	ca48 <mp_iternext>
   15b78:	6178      	str	r0, [r7, #20]
   15b7a:	697b      	ldr	r3, [r7, #20]
   15b7c:	2b04      	cmp	r3, #4
   15b7e:	d1e2      	bne.n	15b46 <mp_obj_tuple_make_new+0x6e>
            }

            mp_obj_t tuple = mp_obj_new_tuple(len, items);
   15b80:	69f9      	ldr	r1, [r7, #28]
   15b82:	6a38      	ldr	r0, [r7, #32]
   15b84:	f000 f9f4 	bl	15f70 <mp_obj_new_tuple>
   15b88:	6138      	str	r0, [r7, #16]
            m_del(mp_obj_t, items, alloc);
   15b8a:	69f8      	ldr	r0, [r7, #28]
   15b8c:	f7ea fc40 	bl	410 <m_free>

            return tuple;
   15b90:	693b      	ldr	r3, [r7, #16]
        }
    }
}
   15b92:	4618      	mov	r0, r3
   15b94:	3728      	adds	r7, #40	; 0x28
   15b96:	46bd      	mov	sp, r7
   15b98:	bd80      	pop	{r7, pc}
   15b9a:	bf00      	nop
   15b9c:	00023e28 	.word	0x00023e28
   15ba0:	00023dec 	.word	0x00023dec

00015ba4 <tuple_cmp_helper>:

// Don't pass MP_BINARY_OP_NOT_EQUAL here
STATIC mp_obj_t tuple_cmp_helper(mp_uint_t op, mp_obj_t self_in, mp_obj_t another_in) {
   15ba4:	b580      	push	{r7, lr}
   15ba6:	b08a      	sub	sp, #40	; 0x28
   15ba8:	af02      	add	r7, sp, #8
   15baa:	60f8      	str	r0, [r7, #12]
   15bac:	60b9      	str	r1, [r7, #8]
   15bae:	607a      	str	r2, [r7, #4]
    // type check is done on getiter method to allow tuple, namedtuple, attrtuple
    mp_check_self(mp_obj_get_type(self_in)->getiter == mp_obj_tuple_getiter);
   15bb0:	68b8      	ldr	r0, [r7, #8]
   15bb2:	f7f7 fe6f 	bl	d894 <mp_obj_get_type>
   15bb6:	4603      	mov	r3, r0
   15bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15bba:	4a1e      	ldr	r2, [pc, #120]	; (15c34 <tuple_cmp_helper+0x90>)
   15bbc:	4293      	cmp	r3, r2
   15bbe:	d005      	beq.n	15bcc <tuple_cmp_helper+0x28>
   15bc0:	4b1d      	ldr	r3, [pc, #116]	; (15c38 <tuple_cmp_helper+0x94>)
   15bc2:	4a1e      	ldr	r2, [pc, #120]	; (15c3c <tuple_cmp_helper+0x98>)
   15bc4:	2168      	movs	r1, #104	; 0x68
   15bc6:	481e      	ldr	r0, [pc, #120]	; (15c40 <tuple_cmp_helper+0x9c>)
   15bc8:	f005 fddc 	bl	1b784 <__assert_func>
    mp_obj_type_t *another_type = mp_obj_get_type(another_in);
   15bcc:	6878      	ldr	r0, [r7, #4]
   15bce:	f7f7 fe61 	bl	d894 <mp_obj_get_type>
   15bd2:	61f8      	str	r0, [r7, #28]
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15bd4:	68bb      	ldr	r3, [r7, #8]
   15bd6:	61bb      	str	r3, [r7, #24]
    if (another_type->getiter != mp_obj_tuple_getiter) {
   15bd8:	69fb      	ldr	r3, [r7, #28]
   15bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15bdc:	4a15      	ldr	r2, [pc, #84]	; (15c34 <tuple_cmp_helper+0x90>)
   15bde:	4293      	cmp	r3, r2
   15be0:	d00e      	beq.n	15c00 <tuple_cmp_helper+0x5c>
        // Slow path for user subclasses
        another_in = mp_instance_cast_to_native_base(another_in, MP_OBJ_FROM_PTR(&mp_type_tuple));
   15be2:	4918      	ldr	r1, [pc, #96]	; (15c44 <tuple_cmp_helper+0xa0>)
   15be4:	6878      	ldr	r0, [r7, #4]
   15be6:	f001 fd81 	bl	176ec <mp_instance_cast_to_native_base>
   15bea:	6078      	str	r0, [r7, #4]
        if (another_in == MP_OBJ_NULL) {
   15bec:	687b      	ldr	r3, [r7, #4]
   15bee:	2b00      	cmp	r3, #0
   15bf0:	d106      	bne.n	15c00 <tuple_cmp_helper+0x5c>
            if (op == MP_BINARY_OP_EQUAL) {
   15bf2:	68fb      	ldr	r3, [r7, #12]
   15bf4:	2b02      	cmp	r3, #2
   15bf6:	d101      	bne.n	15bfc <tuple_cmp_helper+0x58>
                return mp_const_false;
   15bf8:	4b13      	ldr	r3, [pc, #76]	; (15c48 <tuple_cmp_helper+0xa4>)
   15bfa:	e017      	b.n	15c2c <tuple_cmp_helper+0x88>
            }
            return MP_OBJ_NULL;
   15bfc:	2300      	movs	r3, #0
   15bfe:	e015      	b.n	15c2c <tuple_cmp_helper+0x88>
        }
    }
    mp_obj_tuple_t *another = MP_OBJ_TO_PTR(another_in);
   15c00:	687b      	ldr	r3, [r7, #4]
   15c02:	617b      	str	r3, [r7, #20]

    return mp_obj_new_bool(mp_seq_cmp_objs(op, self->items, self->len, another->items, another->len));
   15c04:	69bb      	ldr	r3, [r7, #24]
   15c06:	f103 0108 	add.w	r1, r3, #8
   15c0a:	69bb      	ldr	r3, [r7, #24]
   15c0c:	685a      	ldr	r2, [r3, #4]
   15c0e:	697b      	ldr	r3, [r7, #20]
   15c10:	f103 0008 	add.w	r0, r3, #8
   15c14:	697b      	ldr	r3, [r7, #20]
   15c16:	685b      	ldr	r3, [r3, #4]
   15c18:	9300      	str	r3, [sp, #0]
   15c1a:	4603      	mov	r3, r0
   15c1c:	68f8      	ldr	r0, [r7, #12]
   15c1e:	f001 ff8f 	bl	17b40 <mp_seq_cmp_objs>
   15c22:	4603      	mov	r3, r0
   15c24:	4618      	mov	r0, r3
   15c26:	f7ff fee5 	bl	159f4 <mp_obj_new_bool>
   15c2a:	4603      	mov	r3, r0
}
   15c2c:	4618      	mov	r0, r3
   15c2e:	3720      	adds	r7, #32
   15c30:	46bd      	mov	sp, r7
   15c32:	bd80      	pop	{r7, pc}
   15c34:	000160e1 	.word	0x000160e1
   15c38:	00023cb0 	.word	0x00023cb0
   15c3c:	00023e58 	.word	0x00023e58
   15c40:	00023cec 	.word	0x00023cec
   15c44:	00023dec 	.word	0x00023dec
   15c48:	00021c58 	.word	0x00021c58

00015c4c <mp_obj_tuple_unary_op>:

mp_obj_t mp_obj_tuple_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   15c4c:	b580      	push	{r7, lr}
   15c4e:	b086      	sub	sp, #24
   15c50:	af00      	add	r7, sp, #0
   15c52:	6078      	str	r0, [r7, #4]
   15c54:	6039      	str	r1, [r7, #0]
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15c56:	683b      	ldr	r3, [r7, #0]
   15c58:	60fb      	str	r3, [r7, #12]
    switch (op) {
   15c5a:	687b      	ldr	r3, [r7, #4]
   15c5c:	2b05      	cmp	r3, #5
   15c5e:	d02f      	beq.n	15cc0 <mp_obj_tuple_unary_op+0x74>
   15c60:	2b06      	cmp	r3, #6
   15c62:	d00d      	beq.n	15c80 <mp_obj_tuple_unary_op+0x34>
   15c64:	2b04      	cmp	r3, #4
   15c66:	d131      	bne.n	15ccc <mp_obj_tuple_unary_op+0x80>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->len != 0);
   15c68:	68fb      	ldr	r3, [r7, #12]
   15c6a:	685b      	ldr	r3, [r3, #4]
   15c6c:	2b00      	cmp	r3, #0
   15c6e:	bf14      	ite	ne
   15c70:	2301      	movne	r3, #1
   15c72:	2300      	moveq	r3, #0
   15c74:	b2db      	uxtb	r3, r3
   15c76:	4618      	mov	r0, r3
   15c78:	f7ff febc 	bl	159f4 <mp_obj_new_bool>
   15c7c:	4603      	mov	r3, r0
   15c7e:	e026      	b.n	15cce <mp_obj_tuple_unary_op+0x82>
        case MP_UNARY_OP_HASH: {
            // start hash with pointer to empty tuple, to make it fairly unique
            mp_int_t hash = (mp_int_t)mp_const_empty_tuple;
   15c80:	4b15      	ldr	r3, [pc, #84]	; (15cd8 <mp_obj_tuple_unary_op+0x8c>)
   15c82:	617b      	str	r3, [r7, #20]
            for (size_t i = 0; i < self->len; i++) {
   15c84:	2300      	movs	r3, #0
   15c86:	613b      	str	r3, [r7, #16]
   15c88:	e010      	b.n	15cac <mp_obj_tuple_unary_op+0x60>
                hash += MP_OBJ_SMALL_INT_VALUE(mp_unary_op(MP_UNARY_OP_HASH, self->items[i]));
   15c8a:	68fb      	ldr	r3, [r7, #12]
   15c8c:	693a      	ldr	r2, [r7, #16]
   15c8e:	3202      	adds	r2, #2
   15c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15c94:	4619      	mov	r1, r3
   15c96:	2006      	movs	r0, #6
   15c98:	f7f5 fd54 	bl	b744 <mp_unary_op>
   15c9c:	4603      	mov	r3, r0
   15c9e:	105b      	asrs	r3, r3, #1
   15ca0:	697a      	ldr	r2, [r7, #20]
   15ca2:	4413      	add	r3, r2
   15ca4:	617b      	str	r3, [r7, #20]
            for (size_t i = 0; i < self->len; i++) {
   15ca6:	693b      	ldr	r3, [r7, #16]
   15ca8:	3301      	adds	r3, #1
   15caa:	613b      	str	r3, [r7, #16]
   15cac:	68fb      	ldr	r3, [r7, #12]
   15cae:	685a      	ldr	r2, [r3, #4]
   15cb0:	693b      	ldr	r3, [r7, #16]
   15cb2:	429a      	cmp	r2, r3
   15cb4:	d8e9      	bhi.n	15c8a <mp_obj_tuple_unary_op+0x3e>
            }
            return MP_OBJ_NEW_SMALL_INT(hash);
   15cb6:	697b      	ldr	r3, [r7, #20]
   15cb8:	005b      	lsls	r3, r3, #1
   15cba:	f043 0301 	orr.w	r3, r3, #1
   15cbe:	e006      	b.n	15cce <mp_obj_tuple_unary_op+0x82>
        }
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->len);
   15cc0:	68fb      	ldr	r3, [r7, #12]
   15cc2:	685b      	ldr	r3, [r3, #4]
   15cc4:	005b      	lsls	r3, r3, #1
   15cc6:	f043 0301 	orr.w	r3, r3, #1
   15cca:	e000      	b.n	15cce <mp_obj_tuple_unary_op+0x82>
        default: return MP_OBJ_NULL; // op not supported
   15ccc:	2300      	movs	r3, #0
    }
}
   15cce:	4618      	mov	r0, r3
   15cd0:	3718      	adds	r7, #24
   15cd2:	46bd      	mov	sp, r7
   15cd4:	bd80      	pop	{r7, pc}
   15cd6:	bf00      	nop
   15cd8:	00023e28 	.word	0x00023e28

00015cdc <mp_obj_tuple_binary_op>:

mp_obj_t mp_obj_tuple_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
   15cdc:	b580      	push	{r7, lr}
   15cde:	b08c      	sub	sp, #48	; 0x30
   15ce0:	af02      	add	r7, sp, #8
   15ce2:	60f8      	str	r0, [r7, #12]
   15ce4:	60b9      	str	r1, [r7, #8]
   15ce6:	607a      	str	r2, [r7, #4]
    mp_obj_tuple_t *o = MP_OBJ_TO_PTR(lhs);
   15ce8:	68bb      	ldr	r3, [r7, #8]
   15cea:	627b      	str	r3, [r7, #36]	; 0x24
    switch (op) {
   15cec:	68fb      	ldr	r3, [r7, #12]
   15cee:	2b1c      	cmp	r3, #28
   15cf0:	f200 80ac 	bhi.w	15e4c <mp_obj_tuple_binary_op+0x170>
   15cf4:	a201      	add	r2, pc, #4	; (adr r2, 15cfc <mp_obj_tuple_binary_op+0x20>)
   15cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15cfa:	bf00      	nop
   15cfc:	00015e3f 	.word	0x00015e3f
   15d00:	00015e3f 	.word	0x00015e3f
   15d04:	00015e3f 	.word	0x00015e3f
   15d08:	00015e3f 	.word	0x00015e3f
   15d0c:	00015e3f 	.word	0x00015e3f
   15d10:	00015e4d 	.word	0x00015e4d
   15d14:	00015e4d 	.word	0x00015e4d
   15d18:	00015e4d 	.word	0x00015e4d
   15d1c:	00015e4d 	.word	0x00015e4d
   15d20:	00015e4d 	.word	0x00015e4d
   15d24:	00015e4d 	.word	0x00015e4d
   15d28:	00015e4d 	.word	0x00015e4d
   15d2c:	00015e4d 	.word	0x00015e4d
   15d30:	00015e4d 	.word	0x00015e4d
   15d34:	00015d71 	.word	0x00015d71
   15d38:	00015e4d 	.word	0x00015e4d
   15d3c:	00015de5 	.word	0x00015de5
   15d40:	00015e4d 	.word	0x00015e4d
   15d44:	00015e4d 	.word	0x00015e4d
   15d48:	00015e4d 	.word	0x00015e4d
   15d4c:	00015e4d 	.word	0x00015e4d
   15d50:	00015e4d 	.word	0x00015e4d
   15d54:	00015e4d 	.word	0x00015e4d
   15d58:	00015e4d 	.word	0x00015e4d
   15d5c:	00015e4d 	.word	0x00015e4d
   15d60:	00015e4d 	.word	0x00015e4d
   15d64:	00015d71 	.word	0x00015d71
   15d68:	00015e4d 	.word	0x00015e4d
   15d6c:	00015de5 	.word	0x00015de5
        case MP_BINARY_OP_ADD:
        case MP_BINARY_OP_INPLACE_ADD: {
            if (!mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(rhs)), MP_OBJ_FROM_PTR(&mp_type_tuple))) {
   15d70:	6878      	ldr	r0, [r7, #4]
   15d72:	f7f7 fd8f 	bl	d894 <mp_obj_get_type>
   15d76:	4603      	mov	r3, r0
   15d78:	4937      	ldr	r1, [pc, #220]	; (15e58 <mp_obj_tuple_binary_op+0x17c>)
   15d7a:	4618      	mov	r0, r3
   15d7c:	f001 fbc4 	bl	17508 <mp_obj_is_subclass_fast>
   15d80:	4603      	mov	r3, r0
   15d82:	f083 0301 	eor.w	r3, r3, #1
   15d86:	b2db      	uxtb	r3, r3
   15d88:	2b00      	cmp	r3, #0
   15d8a:	d001      	beq.n	15d90 <mp_obj_tuple_binary_op+0xb4>
                return MP_OBJ_NULL; // op not supported
   15d8c:	2300      	movs	r3, #0
   15d8e:	e05e      	b.n	15e4e <mp_obj_tuple_binary_op+0x172>
            }
            mp_obj_tuple_t *p = MP_OBJ_TO_PTR(rhs);
   15d90:	687b      	ldr	r3, [r7, #4]
   15d92:	623b      	str	r3, [r7, #32]
            mp_obj_tuple_t *s = MP_OBJ_TO_PTR(mp_obj_new_tuple(o->len + p->len, NULL));
   15d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15d96:	685a      	ldr	r2, [r3, #4]
   15d98:	6a3b      	ldr	r3, [r7, #32]
   15d9a:	685b      	ldr	r3, [r3, #4]
   15d9c:	4413      	add	r3, r2
   15d9e:	2100      	movs	r1, #0
   15da0:	4618      	mov	r0, r3
   15da2:	f000 f8e5 	bl	15f70 <mp_obj_new_tuple>
   15da6:	61f8      	str	r0, [r7, #28]
            mp_seq_cat(s->items, o->items, o->len, p->items, p->len, mp_obj_t);
   15da8:	69fb      	ldr	r3, [r7, #28]
   15daa:	f103 0008 	add.w	r0, r3, #8
   15dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15db0:	f103 0108 	add.w	r1, r3, #8
   15db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15db6:	685b      	ldr	r3, [r3, #4]
   15db8:	009b      	lsls	r3, r3, #2
   15dba:	461a      	mov	r2, r3
   15dbc:	f006 ffe8 	bl	1cd90 <memcpy>
   15dc0:	69fb      	ldr	r3, [r7, #28]
   15dc2:	f103 0208 	add.w	r2, r3, #8
   15dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15dc8:	685b      	ldr	r3, [r3, #4]
   15dca:	009b      	lsls	r3, r3, #2
   15dcc:	18d0      	adds	r0, r2, r3
   15dce:	6a3b      	ldr	r3, [r7, #32]
   15dd0:	f103 0108 	add.w	r1, r3, #8
   15dd4:	6a3b      	ldr	r3, [r7, #32]
   15dd6:	685b      	ldr	r3, [r3, #4]
   15dd8:	009b      	lsls	r3, r3, #2
   15dda:	461a      	mov	r2, r3
   15ddc:	f006 ffd8 	bl	1cd90 <memcpy>
            return MP_OBJ_FROM_PTR(s);
   15de0:	69fb      	ldr	r3, [r7, #28]
   15de2:	e034      	b.n	15e4e <mp_obj_tuple_binary_op+0x172>
        }
        case MP_BINARY_OP_MULTIPLY:
        case MP_BINARY_OP_INPLACE_MULTIPLY: {
            mp_int_t n;
            if (!mp_obj_get_int_maybe(rhs, &n)) {
   15de4:	f107 0314 	add.w	r3, r7, #20
   15de8:	4619      	mov	r1, r3
   15dea:	6878      	ldr	r0, [r7, #4]
   15dec:	f7f7 ff90 	bl	dd10 <mp_obj_get_int_maybe>
   15df0:	4603      	mov	r3, r0
   15df2:	f083 0301 	eor.w	r3, r3, #1
   15df6:	b2db      	uxtb	r3, r3
   15df8:	2b00      	cmp	r3, #0
   15dfa:	d001      	beq.n	15e00 <mp_obj_tuple_binary_op+0x124>
                return MP_OBJ_NULL; // op not supported
   15dfc:	2300      	movs	r3, #0
   15dfe:	e026      	b.n	15e4e <mp_obj_tuple_binary_op+0x172>
            }
            if (n <= 0) {
   15e00:	697b      	ldr	r3, [r7, #20]
   15e02:	2b00      	cmp	r3, #0
   15e04:	dc01      	bgt.n	15e0a <mp_obj_tuple_binary_op+0x12e>
                return mp_const_empty_tuple;
   15e06:	4b15      	ldr	r3, [pc, #84]	; (15e5c <mp_obj_tuple_binary_op+0x180>)
   15e08:	e021      	b.n	15e4e <mp_obj_tuple_binary_op+0x172>
            }
            mp_obj_tuple_t *s = MP_OBJ_TO_PTR(mp_obj_new_tuple(o->len * n, NULL));
   15e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15e0c:	685b      	ldr	r3, [r3, #4]
   15e0e:	697a      	ldr	r2, [r7, #20]
   15e10:	fb02 f303 	mul.w	r3, r2, r3
   15e14:	2100      	movs	r1, #0
   15e16:	4618      	mov	r0, r3
   15e18:	f000 f8aa 	bl	15f70 <mp_obj_new_tuple>
   15e1c:	61b8      	str	r0, [r7, #24]
            mp_seq_multiply(o->items, sizeof(*o->items), o->len, n, s->items);
   15e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15e20:	f103 0008 	add.w	r0, r3, #8
   15e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15e26:	685a      	ldr	r2, [r3, #4]
   15e28:	697b      	ldr	r3, [r7, #20]
   15e2a:	4619      	mov	r1, r3
   15e2c:	69bb      	ldr	r3, [r7, #24]
   15e2e:	3308      	adds	r3, #8
   15e30:	9300      	str	r3, [sp, #0]
   15e32:	460b      	mov	r3, r1
   15e34:	2104      	movs	r1, #4
   15e36:	f001 fdc1 	bl	179bc <mp_seq_multiply>
            return MP_OBJ_FROM_PTR(s);
   15e3a:	69bb      	ldr	r3, [r7, #24]
   15e3c:	e007      	b.n	15e4e <mp_obj_tuple_binary_op+0x172>
        case MP_BINARY_OP_EQUAL:
        case MP_BINARY_OP_LESS:
        case MP_BINARY_OP_LESS_EQUAL:
        case MP_BINARY_OP_MORE:
        case MP_BINARY_OP_MORE_EQUAL:
            return tuple_cmp_helper(op, lhs, rhs);
   15e3e:	687a      	ldr	r2, [r7, #4]
   15e40:	68b9      	ldr	r1, [r7, #8]
   15e42:	68f8      	ldr	r0, [r7, #12]
   15e44:	f7ff feae 	bl	15ba4 <tuple_cmp_helper>
   15e48:	4603      	mov	r3, r0
   15e4a:	e000      	b.n	15e4e <mp_obj_tuple_binary_op+0x172>

        default:
            return MP_OBJ_NULL; // op not supported
   15e4c:	2300      	movs	r3, #0
    }
}
   15e4e:	4618      	mov	r0, r3
   15e50:	3728      	adds	r7, #40	; 0x28
   15e52:	46bd      	mov	sp, r7
   15e54:	bd80      	pop	{r7, pc}
   15e56:	bf00      	nop
   15e58:	00023dec 	.word	0x00023dec
   15e5c:	00023e28 	.word	0x00023e28

00015e60 <mp_obj_tuple_subscr>:

mp_obj_t mp_obj_tuple_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   15e60:	b580      	push	{r7, lr}
   15e62:	b086      	sub	sp, #24
   15e64:	af00      	add	r7, sp, #0
   15e66:	60f8      	str	r0, [r7, #12]
   15e68:	60b9      	str	r1, [r7, #8]
   15e6a:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_SENTINEL) {
   15e6c:	687b      	ldr	r3, [r7, #4]
   15e6e:	2b08      	cmp	r3, #8
   15e70:	d110      	bne.n	15e94 <mp_obj_tuple_subscr+0x34>
        // load
        mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15e72:	68fb      	ldr	r3, [r7, #12]
   15e74:	617b      	str	r3, [r7, #20]
            mp_obj_tuple_t *res = MP_OBJ_TO_PTR(mp_obj_new_tuple(slice.stop - slice.start, NULL));
            mp_seq_copy(res->items, self->items + slice.start, res->len, mp_obj_t);
            return MP_OBJ_FROM_PTR(res);
        }
#endif
        size_t index_value = mp_get_index(self->base.type, self->len, index, false);
   15e76:	697b      	ldr	r3, [r7, #20]
   15e78:	6818      	ldr	r0, [r3, #0]
   15e7a:	697b      	ldr	r3, [r7, #20]
   15e7c:	6859      	ldr	r1, [r3, #4]
   15e7e:	2300      	movs	r3, #0
   15e80:	68ba      	ldr	r2, [r7, #8]
   15e82:	f7f7 ffd5 	bl	de30 <mp_get_index>
   15e86:	6138      	str	r0, [r7, #16]
        return self->items[index_value];
   15e88:	697b      	ldr	r3, [r7, #20]
   15e8a:	693a      	ldr	r2, [r7, #16]
   15e8c:	3202      	adds	r2, #2
   15e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15e92:	e000      	b.n	15e96 <mp_obj_tuple_subscr+0x36>
    } else {
        return MP_OBJ_NULL; // op not supported
   15e94:	2300      	movs	r3, #0
    }
}
   15e96:	4618      	mov	r0, r3
   15e98:	3718      	adds	r7, #24
   15e9a:	46bd      	mov	sp, r7
   15e9c:	bd80      	pop	{r7, pc}
   15e9e:	bf00      	nop

00015ea0 <tuple_count>:

STATIC mp_obj_t tuple_count(mp_obj_t self_in, mp_obj_t value) {
   15ea0:	b580      	push	{r7, lr}
   15ea2:	b084      	sub	sp, #16
   15ea4:	af00      	add	r7, sp, #0
   15ea6:	6078      	str	r0, [r7, #4]
   15ea8:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   15eaa:	6878      	ldr	r0, [r7, #4]
   15eac:	f7ff fd90 	bl	159d0 <MP_OBJ_IS_OBJ>
   15eb0:	4603      	mov	r3, r0
   15eb2:	f083 0301 	eor.w	r3, r3, #1
   15eb6:	b2db      	uxtb	r3, r3
   15eb8:	2b00      	cmp	r3, #0
   15eba:	d104      	bne.n	15ec6 <tuple_count+0x26>
   15ebc:	687b      	ldr	r3, [r7, #4]
   15ebe:	681b      	ldr	r3, [r3, #0]
   15ec0:	4a0c      	ldr	r2, [pc, #48]	; (15ef4 <tuple_count+0x54>)
   15ec2:	4293      	cmp	r3, r2
   15ec4:	d005      	beq.n	15ed2 <tuple_count+0x32>
   15ec6:	4b0c      	ldr	r3, [pc, #48]	; (15ef8 <tuple_count+0x58>)
   15ec8:	4a0c      	ldr	r2, [pc, #48]	; (15efc <tuple_count+0x5c>)
   15eca:	21c8      	movs	r1, #200	; 0xc8
   15ecc:	480c      	ldr	r0, [pc, #48]	; (15f00 <tuple_count+0x60>)
   15ece:	f005 fc59 	bl	1b784 <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15ed2:	687b      	ldr	r3, [r7, #4]
   15ed4:	60fb      	str	r3, [r7, #12]
    return mp_seq_count_obj(self->items, self->len, value);
   15ed6:	68fb      	ldr	r3, [r7, #12]
   15ed8:	f103 0008 	add.w	r0, r3, #8
   15edc:	68fb      	ldr	r3, [r7, #12]
   15ede:	685b      	ldr	r3, [r3, #4]
   15ee0:	683a      	ldr	r2, [r7, #0]
   15ee2:	4619      	mov	r1, r3
   15ee4:	f001 fef8 	bl	17cd8 <mp_seq_count_obj>
   15ee8:	4603      	mov	r3, r0
}
   15eea:	4618      	mov	r0, r3
   15eec:	3710      	adds	r7, #16
   15eee:	46bd      	mov	sp, r7
   15ef0:	bd80      	pop	{r7, pc}
   15ef2:	bf00      	nop
   15ef4:	00023dec 	.word	0x00023dec
   15ef8:	00023d00 	.word	0x00023d00
   15efc:	00023e6c 	.word	0x00023e6c
   15f00:	00023cec 	.word	0x00023cec

00015f04 <tuple_index>:
STATIC MP_DEFINE_CONST_FUN_OBJ_2(tuple_count_obj, tuple_count);

STATIC mp_obj_t tuple_index(size_t n_args, const mp_obj_t *args) {
   15f04:	b580      	push	{r7, lr}
   15f06:	b084      	sub	sp, #16
   15f08:	af00      	add	r7, sp, #0
   15f0a:	6078      	str	r0, [r7, #4]
   15f0c:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_tuple));
   15f0e:	683b      	ldr	r3, [r7, #0]
   15f10:	681b      	ldr	r3, [r3, #0]
   15f12:	4618      	mov	r0, r3
   15f14:	f7ff fd5c 	bl	159d0 <MP_OBJ_IS_OBJ>
   15f18:	4603      	mov	r3, r0
   15f1a:	f083 0301 	eor.w	r3, r3, #1
   15f1e:	b2db      	uxtb	r3, r3
   15f20:	2b00      	cmp	r3, #0
   15f22:	d105      	bne.n	15f30 <tuple_index+0x2c>
   15f24:	683b      	ldr	r3, [r7, #0]
   15f26:	681b      	ldr	r3, [r3, #0]
   15f28:	681b      	ldr	r3, [r3, #0]
   15f2a:	4a0d      	ldr	r2, [pc, #52]	; (15f60 <tuple_index+0x5c>)
   15f2c:	4293      	cmp	r3, r2
   15f2e:	d005      	beq.n	15f3c <tuple_index+0x38>
   15f30:	4b0c      	ldr	r3, [pc, #48]	; (15f64 <tuple_index+0x60>)
   15f32:	4a0d      	ldr	r2, [pc, #52]	; (15f68 <tuple_index+0x64>)
   15f34:	21cf      	movs	r1, #207	; 0xcf
   15f36:	480d      	ldr	r0, [pc, #52]	; (15f6c <tuple_index+0x68>)
   15f38:	f005 fc24 	bl	1b784 <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(args[0]);
   15f3c:	683b      	ldr	r3, [r7, #0]
   15f3e:	681b      	ldr	r3, [r3, #0]
   15f40:	60fb      	str	r3, [r7, #12]
    return mp_seq_index_obj(self->items, self->len, n_args, args);
   15f42:	68fb      	ldr	r3, [r7, #12]
   15f44:	f103 0008 	add.w	r0, r3, #8
   15f48:	68fb      	ldr	r3, [r7, #12]
   15f4a:	6859      	ldr	r1, [r3, #4]
   15f4c:	683b      	ldr	r3, [r7, #0]
   15f4e:	687a      	ldr	r2, [r7, #4]
   15f50:	f001 fe72 	bl	17c38 <mp_seq_index_obj>
   15f54:	4603      	mov	r3, r0
}
   15f56:	4618      	mov	r0, r3
   15f58:	3710      	adds	r7, #16
   15f5a:	46bd      	mov	sp, r7
   15f5c:	bd80      	pop	{r7, pc}
   15f5e:	bf00      	nop
   15f60:	00023dec 	.word	0x00023dec
   15f64:	00023d64 	.word	0x00023d64
   15f68:	00023e78 	.word	0x00023e78
   15f6c:	00023cec 	.word	0x00023cec

00015f70 <mp_obj_new_tuple>:
};

// the zero-length tuple
const mp_obj_tuple_t mp_const_empty_tuple_obj = {{&mp_type_tuple}, 0};

mp_obj_t mp_obj_new_tuple(size_t n, const mp_obj_t *items) {
   15f70:	b580      	push	{r7, lr}
   15f72:	b084      	sub	sp, #16
   15f74:	af00      	add	r7, sp, #0
   15f76:	6078      	str	r0, [r7, #4]
   15f78:	6039      	str	r1, [r7, #0]
    if (n == 0) {
   15f7a:	687b      	ldr	r3, [r7, #4]
   15f7c:	2b00      	cmp	r3, #0
   15f7e:	d101      	bne.n	15f84 <mp_obj_new_tuple+0x14>
        return mp_const_empty_tuple;
   15f80:	4b15      	ldr	r3, [pc, #84]	; (15fd8 <mp_obj_new_tuple+0x68>)
   15f82:	e024      	b.n	15fce <mp_obj_new_tuple+0x5e>
    }
    mp_obj_tuple_t *o = m_new_obj_var(mp_obj_tuple_t, mp_obj_t, n);
   15f84:	687b      	ldr	r3, [r7, #4]
   15f86:	3302      	adds	r3, #2
   15f88:	009b      	lsls	r3, r3, #2
   15f8a:	4618      	mov	r0, r3
   15f8c:	f7ea f9c6 	bl	31c <m_malloc>
   15f90:	60b8      	str	r0, [r7, #8]
    o->base.type = &mp_type_tuple;
   15f92:	68bb      	ldr	r3, [r7, #8]
   15f94:	4a11      	ldr	r2, [pc, #68]	; (15fdc <mp_obj_new_tuple+0x6c>)
   15f96:	601a      	str	r2, [r3, #0]
    o->len = n;
   15f98:	68bb      	ldr	r3, [r7, #8]
   15f9a:	687a      	ldr	r2, [r7, #4]
   15f9c:	605a      	str	r2, [r3, #4]
    if (items) {
   15f9e:	683b      	ldr	r3, [r7, #0]
   15fa0:	2b00      	cmp	r3, #0
   15fa2:	d013      	beq.n	15fcc <mp_obj_new_tuple+0x5c>
        for (size_t i = 0; i < n; i++) {
   15fa4:	2300      	movs	r3, #0
   15fa6:	60fb      	str	r3, [r7, #12]
   15fa8:	e00c      	b.n	15fc4 <mp_obj_new_tuple+0x54>
            o->items[i] = items[i];
   15faa:	68fb      	ldr	r3, [r7, #12]
   15fac:	009b      	lsls	r3, r3, #2
   15fae:	683a      	ldr	r2, [r7, #0]
   15fb0:	4413      	add	r3, r2
   15fb2:	6819      	ldr	r1, [r3, #0]
   15fb4:	68bb      	ldr	r3, [r7, #8]
   15fb6:	68fa      	ldr	r2, [r7, #12]
   15fb8:	3202      	adds	r2, #2
   15fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (size_t i = 0; i < n; i++) {
   15fbe:	68fb      	ldr	r3, [r7, #12]
   15fc0:	3301      	adds	r3, #1
   15fc2:	60fb      	str	r3, [r7, #12]
   15fc4:	68fa      	ldr	r2, [r7, #12]
   15fc6:	687b      	ldr	r3, [r7, #4]
   15fc8:	429a      	cmp	r2, r3
   15fca:	d3ee      	bcc.n	15faa <mp_obj_new_tuple+0x3a>
        }
    }
    return MP_OBJ_FROM_PTR(o);
   15fcc:	68bb      	ldr	r3, [r7, #8]
}
   15fce:	4618      	mov	r0, r3
   15fd0:	3710      	adds	r7, #16
   15fd2:	46bd      	mov	sp, r7
   15fd4:	bd80      	pop	{r7, pc}
   15fd6:	bf00      	nop
   15fd8:	00023e28 	.word	0x00023e28
   15fdc:	00023dec 	.word	0x00023dec

00015fe0 <mp_obj_tuple_get>:

void mp_obj_tuple_get(mp_obj_t self_in, size_t *len, mp_obj_t **items) {
   15fe0:	b580      	push	{r7, lr}
   15fe2:	b086      	sub	sp, #24
   15fe4:	af00      	add	r7, sp, #0
   15fe6:	60f8      	str	r0, [r7, #12]
   15fe8:	60b9      	str	r1, [r7, #8]
   15fea:	607a      	str	r2, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   15fec:	68f8      	ldr	r0, [r7, #12]
   15fee:	f7ff fcef 	bl	159d0 <MP_OBJ_IS_OBJ>
   15ff2:	4603      	mov	r3, r0
   15ff4:	f083 0301 	eor.w	r3, r3, #1
   15ff8:	b2db      	uxtb	r3, r3
   15ffa:	2b00      	cmp	r3, #0
   15ffc:	d104      	bne.n	16008 <mp_obj_tuple_get+0x28>
   15ffe:	68fb      	ldr	r3, [r7, #12]
   16000:	681b      	ldr	r3, [r3, #0]
   16002:	4a0c      	ldr	r2, [pc, #48]	; (16034 <mp_obj_tuple_get+0x54>)
   16004:	4293      	cmp	r3, r2
   16006:	d005      	beq.n	16014 <mp_obj_tuple_get+0x34>
   16008:	4b0b      	ldr	r3, [pc, #44]	; (16038 <mp_obj_tuple_get+0x58>)
   1600a:	4a0c      	ldr	r2, [pc, #48]	; (1603c <mp_obj_tuple_get+0x5c>)
   1600c:	21fb      	movs	r1, #251	; 0xfb
   1600e:	480c      	ldr	r0, [pc, #48]	; (16040 <mp_obj_tuple_get+0x60>)
   16010:	f005 fbb8 	bl	1b784 <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   16014:	68fb      	ldr	r3, [r7, #12]
   16016:	617b      	str	r3, [r7, #20]
    *len = self->len;
   16018:	697b      	ldr	r3, [r7, #20]
   1601a:	685a      	ldr	r2, [r3, #4]
   1601c:	68bb      	ldr	r3, [r7, #8]
   1601e:	601a      	str	r2, [r3, #0]
    *items = &self->items[0];
   16020:	697b      	ldr	r3, [r7, #20]
   16022:	f103 0208 	add.w	r2, r3, #8
   16026:	687b      	ldr	r3, [r7, #4]
   16028:	601a      	str	r2, [r3, #0]
}
   1602a:	bf00      	nop
   1602c:	3718      	adds	r7, #24
   1602e:	46bd      	mov	sp, r7
   16030:	bd80      	pop	{r7, pc}
   16032:	bf00      	nop
   16034:	00023dec 	.word	0x00023dec
   16038:	00023e30 	.word	0x00023e30
   1603c:	00023e84 	.word	0x00023e84
   16040:	00023cec 	.word	0x00023cec

00016044 <mp_obj_tuple_del>:

void mp_obj_tuple_del(mp_obj_t self_in) {
   16044:	b580      	push	{r7, lr}
   16046:	b084      	sub	sp, #16
   16048:	af00      	add	r7, sp, #0
   1604a:	6078      	str	r0, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   1604c:	6878      	ldr	r0, [r7, #4]
   1604e:	f7ff fcbf 	bl	159d0 <MP_OBJ_IS_OBJ>
   16052:	4603      	mov	r3, r0
   16054:	f083 0301 	eor.w	r3, r3, #1
   16058:	b2db      	uxtb	r3, r3
   1605a:	2b00      	cmp	r3, #0
   1605c:	d104      	bne.n	16068 <mp_obj_tuple_del+0x24>
   1605e:	687b      	ldr	r3, [r7, #4]
   16060:	681b      	ldr	r3, [r3, #0]
   16062:	4a09      	ldr	r2, [pc, #36]	; (16088 <mp_obj_tuple_del+0x44>)
   16064:	4293      	cmp	r3, r2
   16066:	d006      	beq.n	16076 <mp_obj_tuple_del+0x32>
   16068:	4b08      	ldr	r3, [pc, #32]	; (1608c <mp_obj_tuple_del+0x48>)
   1606a:	4a09      	ldr	r2, [pc, #36]	; (16090 <mp_obj_tuple_del+0x4c>)
   1606c:	f44f 7181 	mov.w	r1, #258	; 0x102
   16070:	4808      	ldr	r0, [pc, #32]	; (16094 <mp_obj_tuple_del+0x50>)
   16072:	f005 fb87 	bl	1b784 <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   16076:	687b      	ldr	r3, [r7, #4]
   16078:	60fb      	str	r3, [r7, #12]
    m_del_var(mp_obj_tuple_t, mp_obj_t, self->len, self);
   1607a:	68f8      	ldr	r0, [r7, #12]
   1607c:	f7ea f9c8 	bl	410 <m_free>
}
   16080:	bf00      	nop
   16082:	3710      	adds	r7, #16
   16084:	46bd      	mov	sp, r7
   16086:	bd80      	pop	{r7, pc}
   16088:	00023dec 	.word	0x00023dec
   1608c:	00023e30 	.word	0x00023e30
   16090:	00023e98 	.word	0x00023e98
   16094:	00023cec 	.word	0x00023cec

00016098 <tuple_it_iternext>:
    mp_fun_1_t iternext;
    mp_obj_tuple_t *tuple;
    size_t cur;
} mp_obj_tuple_it_t;

STATIC mp_obj_t tuple_it_iternext(mp_obj_t self_in) {
   16098:	b480      	push	{r7}
   1609a:	b085      	sub	sp, #20
   1609c:	af00      	add	r7, sp, #0
   1609e:	6078      	str	r0, [r7, #4]
    mp_obj_tuple_it_t *self = MP_OBJ_TO_PTR(self_in);
   160a0:	687b      	ldr	r3, [r7, #4]
   160a2:	60fb      	str	r3, [r7, #12]
    if (self->cur < self->tuple->len) {
   160a4:	68fb      	ldr	r3, [r7, #12]
   160a6:	68da      	ldr	r2, [r3, #12]
   160a8:	68fb      	ldr	r3, [r7, #12]
   160aa:	689b      	ldr	r3, [r3, #8]
   160ac:	685b      	ldr	r3, [r3, #4]
   160ae:	429a      	cmp	r2, r3
   160b0:	d20e      	bcs.n	160d0 <tuple_it_iternext+0x38>
        mp_obj_t o_out = self->tuple->items[self->cur];
   160b2:	68fb      	ldr	r3, [r7, #12]
   160b4:	689b      	ldr	r3, [r3, #8]
   160b6:	68fa      	ldr	r2, [r7, #12]
   160b8:	68d2      	ldr	r2, [r2, #12]
   160ba:	3202      	adds	r2, #2
   160bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   160c0:	60bb      	str	r3, [r7, #8]
        self->cur += 1;
   160c2:	68fb      	ldr	r3, [r7, #12]
   160c4:	68db      	ldr	r3, [r3, #12]
   160c6:	1c5a      	adds	r2, r3, #1
   160c8:	68fb      	ldr	r3, [r7, #12]
   160ca:	60da      	str	r2, [r3, #12]
        return o_out;
   160cc:	68bb      	ldr	r3, [r7, #8]
   160ce:	e000      	b.n	160d2 <tuple_it_iternext+0x3a>
    } else {
        return MP_OBJ_STOP_ITERATION;
   160d0:	2304      	movs	r3, #4
    }
}
   160d2:	4618      	mov	r0, r3
   160d4:	3714      	adds	r7, #20
   160d6:	46bd      	mov	sp, r7
   160d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   160dc:	4770      	bx	lr
   160de:	bf00      	nop

000160e0 <mp_obj_tuple_getiter>:

mp_obj_t mp_obj_tuple_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
   160e0:	b480      	push	{r7}
   160e2:	b085      	sub	sp, #20
   160e4:	af00      	add	r7, sp, #0
   160e6:	6078      	str	r0, [r7, #4]
   160e8:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_tuple_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_tuple_it_t *o = (mp_obj_tuple_it_t*)iter_buf;
   160ea:	683b      	ldr	r3, [r7, #0]
   160ec:	60fb      	str	r3, [r7, #12]
    o->base.type = &mp_type_polymorph_iter;
   160ee:	68fb      	ldr	r3, [r7, #12]
   160f0:	4a08      	ldr	r2, [pc, #32]	; (16114 <mp_obj_tuple_getiter+0x34>)
   160f2:	601a      	str	r2, [r3, #0]
    o->iternext = tuple_it_iternext;
   160f4:	68fb      	ldr	r3, [r7, #12]
   160f6:	4a08      	ldr	r2, [pc, #32]	; (16118 <mp_obj_tuple_getiter+0x38>)
   160f8:	605a      	str	r2, [r3, #4]
    o->tuple = MP_OBJ_TO_PTR(o_in);
   160fa:	68fb      	ldr	r3, [r7, #12]
   160fc:	687a      	ldr	r2, [r7, #4]
   160fe:	609a      	str	r2, [r3, #8]
    o->cur = 0;
   16100:	68fb      	ldr	r3, [r7, #12]
   16102:	2200      	movs	r2, #0
   16104:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   16106:	68fb      	ldr	r3, [r7, #12]
}
   16108:	4618      	mov	r0, r3
   1610a:	3714      	adds	r7, #20
   1610c:	46bd      	mov	sp, r7
   1610e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16112:	4770      	bx	lr
   16114:	00023454 	.word	0x00023454
   16118:	00016099 	.word	0x00016099

0001611c <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   1611c:	b480      	push	{r7}
   1611e:	b083      	sub	sp, #12
   16120:	af00      	add	r7, sp, #0
   16122:	6078      	str	r0, [r7, #4]
   16124:	687b      	ldr	r3, [r7, #4]
   16126:	f003 0301 	and.w	r3, r3, #1
   1612a:	2b00      	cmp	r3, #0
   1612c:	bf14      	ite	ne
   1612e:	2301      	movne	r3, #1
   16130:	2300      	moveq	r3, #0
   16132:	b2db      	uxtb	r3, r3
   16134:	4618      	mov	r0, r3
   16136:	370c      	adds	r7, #12
   16138:	46bd      	mov	sp, r7
   1613a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1613e:	4770      	bx	lr

00016140 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   16140:	b480      	push	{r7}
   16142:	b083      	sub	sp, #12
   16144:	af00      	add	r7, sp, #0
   16146:	6078      	str	r0, [r7, #4]
   16148:	687b      	ldr	r3, [r7, #4]
   1614a:	f003 0303 	and.w	r3, r3, #3
   1614e:	2b00      	cmp	r3, #0
   16150:	bf0c      	ite	eq
   16152:	2301      	moveq	r3, #1
   16154:	2300      	movne	r3, #0
   16156:	b2db      	uxtb	r3, r3
   16158:	4618      	mov	r0, r3
   1615a:	370c      	adds	r7, #12
   1615c:	46bd      	mov	sp, r7
   1615e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16162:	4770      	bx	lr

00016164 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   16164:	b580      	push	{r7, lr}
   16166:	b084      	sub	sp, #16
   16168:	af00      	add	r7, sp, #0
   1616a:	60f8      	str	r0, [r7, #12]
   1616c:	60b9      	str	r1, [r7, #8]
   1616e:	607a      	str	r2, [r7, #4]
   16170:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   16172:	687b      	ldr	r3, [r7, #4]
   16174:	045a      	lsls	r2, r3, #17
   16176:	683b      	ldr	r3, [r7, #0]
   16178:	005b      	lsls	r3, r3, #1
   1617a:	431a      	orrs	r2, r3
   1617c:	7e3b      	ldrb	r3, [r7, #24]
   1617e:	2b00      	cmp	r3, #0
   16180:	d001      	beq.n	16186 <mp_arg_check_num+0x22>
   16182:	2301      	movs	r3, #1
   16184:	e000      	b.n	16188 <mp_arg_check_num+0x24>
   16186:	2300      	movs	r3, #0
   16188:	4313      	orrs	r3, r2
   1618a:	461a      	mov	r2, r3
   1618c:	68b9      	ldr	r1, [r7, #8]
   1618e:	68f8      	ldr	r0, [r7, #12]
   16190:	f7f6 ff7e 	bl	d090 <mp_arg_check_num_sig>
}
   16194:	bf00      	nop
   16196:	3710      	adds	r7, #16
   16198:	46bd      	mov	sp, r7
   1619a:	bd80      	pop	{r7, pc}

0001619c <instance_count_native_bases>:
STATIC mp_obj_t static_class_method_make_new(const mp_obj_type_t *self_in, size_t n_args, size_t n_kw, const mp_obj_t *args);

/******************************************************************************/
// instance object

STATIC int instance_count_native_bases(const mp_obj_type_t *type, const mp_obj_type_t **last_native_base) {
   1619c:	b580      	push	{r7, lr}
   1619e:	b088      	sub	sp, #32
   161a0:	af00      	add	r7, sp, #0
   161a2:	6078      	str	r0, [r7, #4]
   161a4:	6039      	str	r1, [r7, #0]
    int count = 0;
   161a6:	2300      	movs	r3, #0
   161a8:	61fb      	str	r3, [r7, #28]
    for (;;) {
        if (type == &mp_type_object) {
   161aa:	687b      	ldr	r3, [r7, #4]
   161ac:	4a2d      	ldr	r2, [pc, #180]	; (16264 <instance_count_native_bases+0xc8>)
   161ae:	4293      	cmp	r3, r2
   161b0:	d101      	bne.n	161b6 <instance_count_native_bases+0x1a>
            // Not a "real" type, end search here.
            return count;
   161b2:	69fb      	ldr	r3, [r7, #28]
   161b4:	e052      	b.n	1625c <instance_count_native_bases+0xc0>
        } else if (mp_obj_is_native_type(type)) {
   161b6:	687b      	ldr	r3, [r7, #4]
   161b8:	68db      	ldr	r3, [r3, #12]
   161ba:	4a2b      	ldr	r2, [pc, #172]	; (16268 <instance_count_native_bases+0xcc>)
   161bc:	4293      	cmp	r3, r2
   161be:	d005      	beq.n	161cc <instance_count_native_bases+0x30>
            // Native types don't have parents (at least not from our perspective) so end.
            *last_native_base = type;
   161c0:	683b      	ldr	r3, [r7, #0]
   161c2:	687a      	ldr	r2, [r7, #4]
   161c4:	601a      	str	r2, [r3, #0]
            return count + 1;
   161c6:	69fb      	ldr	r3, [r7, #28]
   161c8:	3301      	adds	r3, #1
   161ca:	e047      	b.n	1625c <instance_count_native_bases+0xc0>
        } else if (type->parent == NULL) {
   161cc:	687b      	ldr	r3, [r7, #4]
   161ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   161d0:	2b00      	cmp	r3, #0
   161d2:	d101      	bne.n	161d8 <instance_count_native_bases+0x3c>
            // No parents so end search here.
            return count;
   161d4:	69fb      	ldr	r3, [r7, #28]
   161d6:	e041      	b.n	1625c <instance_count_native_bases+0xc0>
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   161d8:	687b      	ldr	r3, [r7, #4]
   161da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   161dc:	681b      	ldr	r3, [r3, #0]
   161de:	4a23      	ldr	r2, [pc, #140]	; (1626c <instance_count_native_bases+0xd0>)
   161e0:	4293      	cmp	r3, r2
   161e2:	d137      	bne.n	16254 <instance_count_native_bases+0xb8>
            // Multiple parents, search through them all recursively.
            const mp_obj_tuple_t *parent_tuple = type->parent;
   161e4:	687b      	ldr	r3, [r7, #4]
   161e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   161e8:	617b      	str	r3, [r7, #20]
            const mp_obj_t *item = parent_tuple->items;
   161ea:	697b      	ldr	r3, [r7, #20]
   161ec:	3308      	adds	r3, #8
   161ee:	61bb      	str	r3, [r7, #24]
            const mp_obj_t *top = item + parent_tuple->len;
   161f0:	697b      	ldr	r3, [r7, #20]
   161f2:	685b      	ldr	r3, [r3, #4]
   161f4:	009b      	lsls	r3, r3, #2
   161f6:	69ba      	ldr	r2, [r7, #24]
   161f8:	4413      	add	r3, r2
   161fa:	613b      	str	r3, [r7, #16]
            for (; item < top; ++item) {
   161fc:	e024      	b.n	16248 <instance_count_native_bases+0xac>
                assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   161fe:	69bb      	ldr	r3, [r7, #24]
   16200:	681b      	ldr	r3, [r3, #0]
   16202:	4618      	mov	r0, r3
   16204:	f7ff ff9c 	bl	16140 <MP_OBJ_IS_OBJ>
   16208:	4603      	mov	r3, r0
   1620a:	f083 0301 	eor.w	r3, r3, #1
   1620e:	b2db      	uxtb	r3, r3
   16210:	2b00      	cmp	r3, #0
   16212:	d105      	bne.n	16220 <instance_count_native_bases+0x84>
   16214:	69bb      	ldr	r3, [r7, #24]
   16216:	681b      	ldr	r3, [r3, #0]
   16218:	681b      	ldr	r3, [r3, #0]
   1621a:	4a15      	ldr	r2, [pc, #84]	; (16270 <instance_count_native_bases+0xd4>)
   1621c:	4293      	cmp	r3, r2
   1621e:	d005      	beq.n	1622c <instance_count_native_bases+0x90>
   16220:	4b14      	ldr	r3, [pc, #80]	; (16274 <instance_count_native_bases+0xd8>)
   16222:	4a15      	ldr	r2, [pc, #84]	; (16278 <instance_count_native_bases+0xdc>)
   16224:	214b      	movs	r1, #75	; 0x4b
   16226:	4815      	ldr	r0, [pc, #84]	; (1627c <instance_count_native_bases+0xe0>)
   16228:	f005 faac 	bl	1b784 <__assert_func>
                const mp_obj_type_t *bt = (const mp_obj_type_t *)MP_OBJ_TO_PTR(*item);
   1622c:	69bb      	ldr	r3, [r7, #24]
   1622e:	681b      	ldr	r3, [r3, #0]
   16230:	60fb      	str	r3, [r7, #12]
                count += instance_count_native_bases(bt, last_native_base);
   16232:	6839      	ldr	r1, [r7, #0]
   16234:	68f8      	ldr	r0, [r7, #12]
   16236:	f7ff ffb1 	bl	1619c <instance_count_native_bases>
   1623a:	4602      	mov	r2, r0
   1623c:	69fb      	ldr	r3, [r7, #28]
   1623e:	4413      	add	r3, r2
   16240:	61fb      	str	r3, [r7, #28]
            for (; item < top; ++item) {
   16242:	69bb      	ldr	r3, [r7, #24]
   16244:	3304      	adds	r3, #4
   16246:	61bb      	str	r3, [r7, #24]
   16248:	69ba      	ldr	r2, [r7, #24]
   1624a:	693b      	ldr	r3, [r7, #16]
   1624c:	429a      	cmp	r2, r3
   1624e:	d3d6      	bcc.n	161fe <instance_count_native_bases+0x62>
            }
            return count;
   16250:	69fb      	ldr	r3, [r7, #28]
   16252:	e003      	b.n	1625c <instance_count_native_bases+0xc0>
        #endif
        } else {
            // A single parent, use iteration to continue the search.
            type = type->parent;
   16254:	687b      	ldr	r3, [r7, #4]
   16256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16258:	607b      	str	r3, [r7, #4]
        }
    }
   1625a:	e7a6      	b.n	161aa <instance_count_native_bases+0xe>
}
   1625c:	4618      	mov	r0, r3
   1625e:	3720      	adds	r7, #32
   16260:	46bd      	mov	sp, r7
   16262:	bd80      	pop	{r7, pc}
   16264:	00023418 	.word	0x00023418
   16268:	000166ad 	.word	0x000166ad
   1626c:	00023dec 	.word	0x00023dec
   16270:	000240e4 	.word	0x000240e4
   16274:	00023eac 	.word	0x00023eac
   16278:	00024368 	.word	0x00024368
   1627c:	00023ed4 	.word	0x00023ed4

00016280 <native_base_init_wrapper>:

// This wrapper function is allows a subclass of a native type to call the
// __init__() method (corresponding to type->make_new) of the native type.
STATIC mp_obj_t native_base_init_wrapper(size_t n_args, const mp_obj_t *args) {
   16280:	b590      	push	{r4, r7, lr}
   16282:	b085      	sub	sp, #20
   16284:	af00      	add	r7, sp, #0
   16286:	6078      	str	r0, [r7, #4]
   16288:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(args[0]);
   1628a:	683b      	ldr	r3, [r7, #0]
   1628c:	681b      	ldr	r3, [r3, #0]
   1628e:	60fb      	str	r3, [r7, #12]
    const mp_obj_type_t *native_base = NULL;
   16290:	2300      	movs	r3, #0
   16292:	60bb      	str	r3, [r7, #8]
    instance_count_native_bases(self->base.type, &native_base);
   16294:	68fb      	ldr	r3, [r7, #12]
   16296:	681b      	ldr	r3, [r3, #0]
   16298:	f107 0208 	add.w	r2, r7, #8
   1629c:	4611      	mov	r1, r2
   1629e:	4618      	mov	r0, r3
   162a0:	f7ff ff7c 	bl	1619c <instance_count_native_bases>
    self->subobj[0] = native_base->make_new(native_base, n_args - 1, 0, args + 1);
   162a4:	68bb      	ldr	r3, [r7, #8]
   162a6:	68dc      	ldr	r4, [r3, #12]
   162a8:	68b8      	ldr	r0, [r7, #8]
   162aa:	687b      	ldr	r3, [r7, #4]
   162ac:	1e59      	subs	r1, r3, #1
   162ae:	683b      	ldr	r3, [r7, #0]
   162b0:	3304      	adds	r3, #4
   162b2:	2200      	movs	r2, #0
   162b4:	47a0      	blx	r4
   162b6:	4602      	mov	r2, r0
   162b8:	68fb      	ldr	r3, [r7, #12]
   162ba:	611a      	str	r2, [r3, #16]
    return mp_const_none;
   162bc:	4b02      	ldr	r3, [pc, #8]	; (162c8 <native_base_init_wrapper+0x48>)
}
   162be:	4618      	mov	r0, r3
   162c0:	3714      	adds	r7, #20
   162c2:	46bd      	mov	sp, r7
   162c4:	bd90      	pop	{r4, r7, pc}
   162c6:	bf00      	nop
   162c8:	000234d4 	.word	0x000234d4

000162cc <mp_obj_new_instance>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(native_base_init_wrapper_obj, 1, MP_OBJ_FUN_ARGS_MAX, native_base_init_wrapper);

#if !MICROPY_CPYTHON_COMPAT
STATIC
#endif
mp_obj_instance_t *mp_obj_new_instance(const mp_obj_type_t *class, const mp_obj_type_t **native_base) {
   162cc:	b580      	push	{r7, lr}
   162ce:	b084      	sub	sp, #16
   162d0:	af00      	add	r7, sp, #0
   162d2:	6078      	str	r0, [r7, #4]
   162d4:	6039      	str	r1, [r7, #0]
    size_t num_native_bases = instance_count_native_bases(class, native_base);
   162d6:	6839      	ldr	r1, [r7, #0]
   162d8:	6878      	ldr	r0, [r7, #4]
   162da:	f7ff ff5f 	bl	1619c <instance_count_native_bases>
   162de:	4603      	mov	r3, r0
   162e0:	60fb      	str	r3, [r7, #12]
    assert(num_native_bases < 2);
   162e2:	68fb      	ldr	r3, [r7, #12]
   162e4:	2b01      	cmp	r3, #1
   162e6:	d905      	bls.n	162f4 <mp_obj_new_instance+0x28>
   162e8:	4b10      	ldr	r3, [pc, #64]	; (1632c <mp_obj_new_instance+0x60>)
   162ea:	4a11      	ldr	r2, [pc, #68]	; (16330 <mp_obj_new_instance+0x64>)
   162ec:	2168      	movs	r1, #104	; 0x68
   162ee:	4811      	ldr	r0, [pc, #68]	; (16334 <mp_obj_new_instance+0x68>)
   162f0:	f005 fa48 	bl	1b784 <__assert_func>
    mp_obj_instance_t *o = m_new_obj_var(mp_obj_instance_t, mp_obj_t, num_native_bases);
   162f4:	68fb      	ldr	r3, [r7, #12]
   162f6:	3304      	adds	r3, #4
   162f8:	009b      	lsls	r3, r3, #2
   162fa:	4618      	mov	r0, r3
   162fc:	f7ea f80e 	bl	31c <m_malloc>
   16300:	60b8      	str	r0, [r7, #8]
    o->base.type = class;
   16302:	68bb      	ldr	r3, [r7, #8]
   16304:	687a      	ldr	r2, [r7, #4]
   16306:	601a      	str	r2, [r3, #0]
    mp_map_init(&o->members, 0);
   16308:	68bb      	ldr	r3, [r7, #8]
   1630a:	3304      	adds	r3, #4
   1630c:	2100      	movs	r1, #0
   1630e:	4618      	mov	r0, r3
   16310:	f7f7 f81a 	bl	d348 <mp_map_init>
    // Initialise the native base-class slot (should be 1 at most) with a valid
    // object.  It doesn't matter which object, so long as it can be uniquely
    // distinguished from a native class that is initialised.
    if (num_native_bases != 0) {
   16314:	68fb      	ldr	r3, [r7, #12]
   16316:	2b00      	cmp	r3, #0
   16318:	d002      	beq.n	16320 <mp_obj_new_instance+0x54>
        o->subobj[0] = MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj);
   1631a:	68bb      	ldr	r3, [r7, #8]
   1631c:	4a06      	ldr	r2, [pc, #24]	; (16338 <mp_obj_new_instance+0x6c>)
   1631e:	611a      	str	r2, [r3, #16]
    }
    return o;
   16320:	68bb      	ldr	r3, [r7, #8]
}
   16322:	4618      	mov	r0, r3
   16324:	3710      	adds	r7, #16
   16326:	46bd      	mov	sp, r7
   16328:	bd80      	pop	{r7, pc}
   1632a:	bf00      	nop
   1632c:	00023ef4 	.word	0x00023ef4
   16330:	00024384 	.word	0x00024384
   16334:	00023ed4 	.word	0x00023ed4
   16338:	00023ee8 	.word	0x00023ee8

0001633c <mp_obj_class_lookup>:
    size_t meth_offset;
    mp_obj_t *dest;
    bool is_type;
};

STATIC void mp_obj_class_lookup(struct class_lookup_data  *lookup, const mp_obj_type_t *type) {
   1633c:	b580      	push	{r7, lr}
   1633e:	b08c      	sub	sp, #48	; 0x30
   16340:	af00      	add	r7, sp, #0
   16342:	6078      	str	r0, [r7, #4]
   16344:	6039      	str	r1, [r7, #0]
    assert(lookup->dest[0] == MP_OBJ_NULL);
   16346:	687b      	ldr	r3, [r7, #4]
   16348:	68db      	ldr	r3, [r3, #12]
   1634a:	681b      	ldr	r3, [r3, #0]
   1634c:	2b00      	cmp	r3, #0
   1634e:	d005      	beq.n	1635c <mp_obj_class_lookup+0x20>
   16350:	4b88      	ldr	r3, [pc, #544]	; (16574 <mp_obj_class_lookup+0x238>)
   16352:	4a89      	ldr	r2, [pc, #548]	; (16578 <mp_obj_class_lookup+0x23c>)
   16354:	218c      	movs	r1, #140	; 0x8c
   16356:	4889      	ldr	r0, [pc, #548]	; (1657c <mp_obj_class_lookup+0x240>)
   16358:	f005 fa14 	bl	1b784 <__assert_func>
    assert(lookup->dest[1] == MP_OBJ_NULL);
   1635c:	687b      	ldr	r3, [r7, #4]
   1635e:	68db      	ldr	r3, [r3, #12]
   16360:	3304      	adds	r3, #4
   16362:	681b      	ldr	r3, [r3, #0]
   16364:	2b00      	cmp	r3, #0
   16366:	d005      	beq.n	16374 <mp_obj_class_lookup+0x38>
   16368:	4b85      	ldr	r3, [pc, #532]	; (16580 <mp_obj_class_lookup+0x244>)
   1636a:	4a83      	ldr	r2, [pc, #524]	; (16578 <mp_obj_class_lookup+0x23c>)
   1636c:	218d      	movs	r1, #141	; 0x8d
   1636e:	4883      	ldr	r0, [pc, #524]	; (1657c <mp_obj_class_lookup+0x240>)
   16370:	f005 fa08 	bl	1b784 <__assert_func>
        DEBUG_printf("mp_obj_class_lookup: Looking up %s in %s\n", qstr_str(lookup->attr), qstr_str(type->name));
        // Optimize special method lookup for native types
        // This avoids extra method_name => slot lookup. On the other hand,
        // this should not be applied to class types, as will result in extra
        // lookup either.
        if (lookup->meth_offset != 0 && mp_obj_is_native_type(type)) {
   16374:	687b      	ldr	r3, [r7, #4]
   16376:	689b      	ldr	r3, [r3, #8]
   16378:	2b00      	cmp	r3, #0
   1637a:	d010      	beq.n	1639e <mp_obj_class_lookup+0x62>
   1637c:	683b      	ldr	r3, [r7, #0]
   1637e:	68db      	ldr	r3, [r3, #12]
   16380:	4a80      	ldr	r2, [pc, #512]	; (16584 <mp_obj_class_lookup+0x248>)
   16382:	4293      	cmp	r3, r2
   16384:	d00b      	beq.n	1639e <mp_obj_class_lookup+0x62>
            if (*(void**)((char*)type + lookup->meth_offset) != NULL) {
   16386:	687b      	ldr	r3, [r7, #4]
   16388:	689b      	ldr	r3, [r3, #8]
   1638a:	683a      	ldr	r2, [r7, #0]
   1638c:	4413      	add	r3, r2
   1638e:	681b      	ldr	r3, [r3, #0]
   16390:	2b00      	cmp	r3, #0
   16392:	d004      	beq.n	1639e <mp_obj_class_lookup+0x62>
                DEBUG_printf("mp_obj_class_lookup: Matched special meth slot (off=%d) for %s\n",
                    lookup->meth_offset, qstr_str(lookup->attr));
                lookup->dest[0] = MP_OBJ_SENTINEL;
   16394:	687b      	ldr	r3, [r7, #4]
   16396:	68db      	ldr	r3, [r3, #12]
   16398:	2208      	movs	r2, #8
   1639a:	601a      	str	r2, [r3, #0]
                return;
   1639c:	e0e6      	b.n	1656c <mp_obj_class_lookup+0x230>
            }
        }

        if (type->locals_dict != NULL) {
   1639e:	683b      	ldr	r3, [r7, #0]
   163a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   163a2:	2b00      	cmp	r3, #0
   163a4:	d04b      	beq.n	1643e <mp_obj_class_lookup+0x102>
            // search locals_dict (the set of methods/attributes)
            assert(type->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
   163a6:	683b      	ldr	r3, [r7, #0]
   163a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   163aa:	681b      	ldr	r3, [r3, #0]
   163ac:	4a76      	ldr	r2, [pc, #472]	; (16588 <mp_obj_class_lookup+0x24c>)
   163ae:	4293      	cmp	r3, r2
   163b0:	d005      	beq.n	163be <mp_obj_class_lookup+0x82>
   163b2:	4b76      	ldr	r3, [pc, #472]	; (1658c <mp_obj_class_lookup+0x250>)
   163b4:	4a70      	ldr	r2, [pc, #448]	; (16578 <mp_obj_class_lookup+0x23c>)
   163b6:	219f      	movs	r1, #159	; 0x9f
   163b8:	4870      	ldr	r0, [pc, #448]	; (1657c <mp_obj_class_lookup+0x240>)
   163ba:	f005 f9e3 	bl	1b784 <__assert_func>
            mp_map_t *locals_map = &type->locals_dict->map;
   163be:	683b      	ldr	r3, [r7, #0]
   163c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   163c2:	3304      	adds	r3, #4
   163c4:	627b      	str	r3, [r7, #36]	; 0x24
            mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(lookup->attr), MP_MAP_LOOKUP);
   163c6:	687b      	ldr	r3, [r7, #4]
   163c8:	685b      	ldr	r3, [r3, #4]
   163ca:	009b      	lsls	r3, r3, #2
   163cc:	f043 0302 	orr.w	r3, r3, #2
   163d0:	2200      	movs	r2, #0
   163d2:	4619      	mov	r1, r3
   163d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
   163d6:	f7f7 f8b3 	bl	d540 <mp_map_lookup>
   163da:	6238      	str	r0, [r7, #32]
            if (elem != NULL) {
   163dc:	6a3b      	ldr	r3, [r7, #32]
   163de:	2b00      	cmp	r3, #0
   163e0:	d02d      	beq.n	1643e <mp_obj_class_lookup+0x102>
                if (lookup->is_type) {
   163e2:	687b      	ldr	r3, [r7, #4]
   163e4:	7c1b      	ldrb	r3, [r3, #16]
   163e6:	2b00      	cmp	r3, #0
   163e8:	d00b      	beq.n	16402 <mp_obj_class_lookup+0xc6>
                    // If we look up a class method, we need to return original type for which we
                    // do a lookup, not a (base) type in which we found the class method.
                    const mp_obj_type_t *org_type = (const mp_obj_type_t*)lookup->obj;
   163ea:	687b      	ldr	r3, [r7, #4]
   163ec:	681b      	ldr	r3, [r3, #0]
   163ee:	61fb      	str	r3, [r7, #28]
                    mp_convert_member_lookup(MP_OBJ_NULL, org_type, elem->value, lookup->dest);
   163f0:	6a3b      	ldr	r3, [r7, #32]
   163f2:	685a      	ldr	r2, [r3, #4]
   163f4:	687b      	ldr	r3, [r7, #4]
   163f6:	68db      	ldr	r3, [r3, #12]
   163f8:	69f9      	ldr	r1, [r7, #28]
   163fa:	2000      	movs	r0, #0
   163fc:	f7f6 f952 	bl	c6a4 <mp_convert_member_lookup>
                    // Don't try to repr() lookup->dest[1], as we can be called recursively
                    DEBUG_printf(" <%s @%p>", mp_obj_get_type_str(lookup->dest[1]), MP_OBJ_TO_PTR(lookup->dest[1]));
                }
                DEBUG_printf("\n");
#endif
                return;
   16400:	e0b4      	b.n	1656c <mp_obj_class_lookup+0x230>
                    mp_obj_instance_t *obj = lookup->obj;
   16402:	687b      	ldr	r3, [r7, #4]
   16404:	681b      	ldr	r3, [r3, #0]
   16406:	61bb      	str	r3, [r7, #24]
                    if (obj != NULL && mp_obj_is_native_type(type) && type != &mp_type_object /* object is not a real type */) {
   16408:	69bb      	ldr	r3, [r7, #24]
   1640a:	2b00      	cmp	r3, #0
   1640c:	d00c      	beq.n	16428 <mp_obj_class_lookup+0xec>
   1640e:	683b      	ldr	r3, [r7, #0]
   16410:	68db      	ldr	r3, [r3, #12]
   16412:	4a5c      	ldr	r2, [pc, #368]	; (16584 <mp_obj_class_lookup+0x248>)
   16414:	4293      	cmp	r3, r2
   16416:	d007      	beq.n	16428 <mp_obj_class_lookup+0xec>
   16418:	683b      	ldr	r3, [r7, #0]
   1641a:	4a5d      	ldr	r2, [pc, #372]	; (16590 <mp_obj_class_lookup+0x254>)
   1641c:	4293      	cmp	r3, r2
   1641e:	d003      	beq.n	16428 <mp_obj_class_lookup+0xec>
                        obj_obj = obj->subobj[0];
   16420:	69bb      	ldr	r3, [r7, #24]
   16422:	691b      	ldr	r3, [r3, #16]
   16424:	62fb      	str	r3, [r7, #44]	; 0x2c
   16426:	e001      	b.n	1642c <mp_obj_class_lookup+0xf0>
                        obj_obj = MP_OBJ_FROM_PTR(obj);
   16428:	69bb      	ldr	r3, [r7, #24]
   1642a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    mp_convert_member_lookup(obj_obj, type, elem->value, lookup->dest);
   1642c:	6a3b      	ldr	r3, [r7, #32]
   1642e:	685a      	ldr	r2, [r3, #4]
   16430:	687b      	ldr	r3, [r7, #4]
   16432:	68db      	ldr	r3, [r3, #12]
   16434:	6839      	ldr	r1, [r7, #0]
   16436:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16438:	f7f6 f934 	bl	c6a4 <mp_convert_member_lookup>
                return;
   1643c:	e096      	b.n	1656c <mp_obj_class_lookup+0x230>
        }

        // Previous code block takes care about attributes defined in .locals_dict,
        // but some attributes of native types may be handled using .load_attr method,
        // so make sure we try to lookup those too.
        if (lookup->obj != NULL && !lookup->is_type && mp_obj_is_native_type(type) && type != &mp_type_object /* object is not a real type */) {
   1643e:	687b      	ldr	r3, [r7, #4]
   16440:	681b      	ldr	r3, [r3, #0]
   16442:	2b00      	cmp	r3, #0
   16444:	d01e      	beq.n	16484 <mp_obj_class_lookup+0x148>
   16446:	687b      	ldr	r3, [r7, #4]
   16448:	7c1b      	ldrb	r3, [r3, #16]
   1644a:	f083 0301 	eor.w	r3, r3, #1
   1644e:	b2db      	uxtb	r3, r3
   16450:	2b00      	cmp	r3, #0
   16452:	d017      	beq.n	16484 <mp_obj_class_lookup+0x148>
   16454:	683b      	ldr	r3, [r7, #0]
   16456:	68db      	ldr	r3, [r3, #12]
   16458:	4a4a      	ldr	r2, [pc, #296]	; (16584 <mp_obj_class_lookup+0x248>)
   1645a:	4293      	cmp	r3, r2
   1645c:	d012      	beq.n	16484 <mp_obj_class_lookup+0x148>
   1645e:	683b      	ldr	r3, [r7, #0]
   16460:	4a4b      	ldr	r2, [pc, #300]	; (16590 <mp_obj_class_lookup+0x254>)
   16462:	4293      	cmp	r3, r2
   16464:	d00e      	beq.n	16484 <mp_obj_class_lookup+0x148>
            mp_load_method_maybe(lookup->obj->subobj[0], lookup->attr, lookup->dest);
   16466:	687b      	ldr	r3, [r7, #4]
   16468:	681b      	ldr	r3, [r3, #0]
   1646a:	6918      	ldr	r0, [r3, #16]
   1646c:	687b      	ldr	r3, [r7, #4]
   1646e:	6859      	ldr	r1, [r3, #4]
   16470:	687b      	ldr	r3, [r7, #4]
   16472:	68db      	ldr	r3, [r3, #12]
   16474:	461a      	mov	r2, r3
   16476:	f7f6 f98b 	bl	c790 <mp_load_method_maybe>
            if (lookup->dest[0] != MP_OBJ_NULL) {
   1647a:	687b      	ldr	r3, [r7, #4]
   1647c:	68db      	ldr	r3, [r3, #12]
   1647e:	681b      	ldr	r3, [r3, #0]
   16480:	2b00      	cmp	r3, #0
   16482:	d16c      	bne.n	1655e <mp_obj_class_lookup+0x222>
            }
        }

        // attribute not found, keep searching base classes

        if (type->parent == NULL) {
   16484:	683b      	ldr	r3, [r7, #0]
   16486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16488:	2b00      	cmp	r3, #0
   1648a:	d06a      	beq.n	16562 <mp_obj_class_lookup+0x226>
            DEBUG_printf("mp_obj_class_lookup: No more parents\n");
            return;
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   1648c:	683b      	ldr	r3, [r7, #0]
   1648e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16490:	681b      	ldr	r3, [r3, #0]
   16492:	4a40      	ldr	r2, [pc, #256]	; (16594 <mp_obj_class_lookup+0x258>)
   16494:	4293      	cmp	r3, r2
   16496:	d15a      	bne.n	1654e <mp_obj_class_lookup+0x212>
            const mp_obj_tuple_t *parent_tuple = type->parent;
   16498:	683b      	ldr	r3, [r7, #0]
   1649a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1649c:	617b      	str	r3, [r7, #20]
            const mp_obj_t *item = parent_tuple->items;
   1649e:	697b      	ldr	r3, [r7, #20]
   164a0:	3308      	adds	r3, #8
   164a2:	62bb      	str	r3, [r7, #40]	; 0x28
            const mp_obj_t *top = item + parent_tuple->len - 1;
   164a4:	697b      	ldr	r3, [r7, #20]
   164a6:	685b      	ldr	r3, [r3, #4]
   164a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   164ac:	3b01      	subs	r3, #1
   164ae:	009b      	lsls	r3, r3, #2
   164b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   164b2:	4413      	add	r3, r2
   164b4:	613b      	str	r3, [r7, #16]
            for (; item < top; ++item) {
   164b6:	e02b      	b.n	16510 <mp_obj_class_lookup+0x1d4>
                assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   164b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   164ba:	681b      	ldr	r3, [r3, #0]
   164bc:	4618      	mov	r0, r3
   164be:	f7ff fe3f 	bl	16140 <MP_OBJ_IS_OBJ>
   164c2:	4603      	mov	r3, r0
   164c4:	f083 0301 	eor.w	r3, r3, #1
   164c8:	b2db      	uxtb	r3, r3
   164ca:	2b00      	cmp	r3, #0
   164cc:	d105      	bne.n	164da <mp_obj_class_lookup+0x19e>
   164ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   164d0:	681b      	ldr	r3, [r3, #0]
   164d2:	681b      	ldr	r3, [r3, #0]
   164d4:	4a30      	ldr	r2, [pc, #192]	; (16598 <mp_obj_class_lookup+0x25c>)
   164d6:	4293      	cmp	r3, r2
   164d8:	d005      	beq.n	164e6 <mp_obj_class_lookup+0x1aa>
   164da:	4b30      	ldr	r3, [pc, #192]	; (1659c <mp_obj_class_lookup+0x260>)
   164dc:	4a26      	ldr	r2, [pc, #152]	; (16578 <mp_obj_class_lookup+0x23c>)
   164de:	21d5      	movs	r1, #213	; 0xd5
   164e0:	4826      	ldr	r0, [pc, #152]	; (1657c <mp_obj_class_lookup+0x240>)
   164e2:	f005 f94f 	bl	1b784 <__assert_func>
                mp_obj_type_t *bt = (mp_obj_type_t*)MP_OBJ_TO_PTR(*item);
   164e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   164e8:	681b      	ldr	r3, [r3, #0]
   164ea:	60fb      	str	r3, [r7, #12]
                if (bt == &mp_type_object) {
   164ec:	68fb      	ldr	r3, [r7, #12]
   164ee:	4a28      	ldr	r2, [pc, #160]	; (16590 <mp_obj_class_lookup+0x254>)
   164f0:	4293      	cmp	r3, r2
   164f2:	d009      	beq.n	16508 <mp_obj_class_lookup+0x1cc>
                    // Not a "real" type
                    continue;
                }
                mp_obj_class_lookup(lookup, bt);
   164f4:	68f9      	ldr	r1, [r7, #12]
   164f6:	6878      	ldr	r0, [r7, #4]
   164f8:	f7ff ff20 	bl	1633c <mp_obj_class_lookup>
                if (lookup->dest[0] != MP_OBJ_NULL) {
   164fc:	687b      	ldr	r3, [r7, #4]
   164fe:	68db      	ldr	r3, [r3, #12]
   16500:	681b      	ldr	r3, [r3, #0]
   16502:	2b00      	cmp	r3, #0
   16504:	d12f      	bne.n	16566 <mp_obj_class_lookup+0x22a>
   16506:	e000      	b.n	1650a <mp_obj_class_lookup+0x1ce>
                    continue;
   16508:	bf00      	nop
            for (; item < top; ++item) {
   1650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1650c:	3304      	adds	r3, #4
   1650e:	62bb      	str	r3, [r7, #40]	; 0x28
   16510:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16512:	693b      	ldr	r3, [r7, #16]
   16514:	429a      	cmp	r2, r3
   16516:	d3cf      	bcc.n	164b8 <mp_obj_class_lookup+0x17c>
                    return;
                }
            }

            // search last base (simple tail recursion elimination)
            assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   16518:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1651a:	681b      	ldr	r3, [r3, #0]
   1651c:	4618      	mov	r0, r3
   1651e:	f7ff fe0f 	bl	16140 <MP_OBJ_IS_OBJ>
   16522:	4603      	mov	r3, r0
   16524:	f083 0301 	eor.w	r3, r3, #1
   16528:	b2db      	uxtb	r3, r3
   1652a:	2b00      	cmp	r3, #0
   1652c:	d105      	bne.n	1653a <mp_obj_class_lookup+0x1fe>
   1652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16530:	681b      	ldr	r3, [r3, #0]
   16532:	681b      	ldr	r3, [r3, #0]
   16534:	4a18      	ldr	r2, [pc, #96]	; (16598 <mp_obj_class_lookup+0x25c>)
   16536:	4293      	cmp	r3, r2
   16538:	d005      	beq.n	16546 <mp_obj_class_lookup+0x20a>
   1653a:	4b18      	ldr	r3, [pc, #96]	; (1659c <mp_obj_class_lookup+0x260>)
   1653c:	4a0e      	ldr	r2, [pc, #56]	; (16578 <mp_obj_class_lookup+0x23c>)
   1653e:	21e2      	movs	r1, #226	; 0xe2
   16540:	480e      	ldr	r0, [pc, #56]	; (1657c <mp_obj_class_lookup+0x240>)
   16542:	f005 f91f 	bl	1b784 <__assert_func>
            type = (mp_obj_type_t*)MP_OBJ_TO_PTR(*item);
   16546:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16548:	681b      	ldr	r3, [r3, #0]
   1654a:	603b      	str	r3, [r7, #0]
   1654c:	e002      	b.n	16554 <mp_obj_class_lookup+0x218>
        #endif
        } else {
            type = type->parent;
   1654e:	683b      	ldr	r3, [r7, #0]
   16550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16552:	603b      	str	r3, [r7, #0]
        }
        if (type == &mp_type_object) {
   16554:	683b      	ldr	r3, [r7, #0]
   16556:	4a0e      	ldr	r2, [pc, #56]	; (16590 <mp_obj_class_lookup+0x254>)
   16558:	4293      	cmp	r3, r2
   1655a:	d006      	beq.n	1656a <mp_obj_class_lookup+0x22e>
            // Not a "real" type
            return;
        }
    }
   1655c:	e70a      	b.n	16374 <mp_obj_class_lookup+0x38>
                return;
   1655e:	bf00      	nop
   16560:	e004      	b.n	1656c <mp_obj_class_lookup+0x230>
            return;
   16562:	bf00      	nop
   16564:	e002      	b.n	1656c <mp_obj_class_lookup+0x230>
                    return;
   16566:	bf00      	nop
   16568:	e000      	b.n	1656c <mp_obj_class_lookup+0x230>
            return;
   1656a:	bf00      	nop
}
   1656c:	3730      	adds	r7, #48	; 0x30
   1656e:	46bd      	mov	sp, r7
   16570:	bd80      	pop	{r7, pc}
   16572:	bf00      	nop
   16574:	00023f0c 	.word	0x00023f0c
   16578:	00024398 	.word	0x00024398
   1657c:	00023ed4 	.word	0x00023ed4
   16580:	00023f2c 	.word	0x00023f2c
   16584:	000166ad 	.word	0x000166ad
   16588:	00022104 	.word	0x00022104
   1658c:	00023f4c 	.word	0x00023f4c
   16590:	00023418 	.word	0x00023418
   16594:	00023dec 	.word	0x00023dec
   16598:	000240e4 	.word	0x000240e4
   1659c:	00023eac 	.word	0x00023eac

000165a0 <instance_print>:

STATIC void instance_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   165a0:	b580      	push	{r7, lr}
   165a2:	b08e      	sub	sp, #56	; 0x38
   165a4:	af00      	add	r7, sp, #0
   165a6:	60f8      	str	r0, [r7, #12]
   165a8:	60b9      	str	r1, [r7, #8]
   165aa:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   165ac:	68bb      	ldr	r3, [r7, #8]
   165ae:	637b      	str	r3, [r7, #52]	; 0x34
    qstr meth = (kind == PRINT_STR) ? MP_QSTR___str__ : MP_QSTR___repr__;
   165b0:	687b      	ldr	r3, [r7, #4]
   165b2:	2b00      	cmp	r3, #0
   165b4:	d101      	bne.n	165ba <instance_print+0x1a>
   165b6:	2325      	movs	r3, #37	; 0x25
   165b8:	e000      	b.n	165bc <instance_print+0x1c>
   165ba:	2323      	movs	r3, #35	; 0x23
   165bc:	633b      	str	r3, [r7, #48]	; 0x30
    mp_obj_t member[2] = {MP_OBJ_NULL};
   165be:	f107 0324 	add.w	r3, r7, #36	; 0x24
   165c2:	2200      	movs	r2, #0
   165c4:	601a      	str	r2, [r3, #0]
   165c6:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   165c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   165ca:	613b      	str	r3, [r7, #16]
   165cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   165ce:	617b      	str	r3, [r7, #20]
   165d0:	2308      	movs	r3, #8
   165d2:	61bb      	str	r3, [r7, #24]
   165d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
   165d8:	61fb      	str	r3, [r7, #28]
   165da:	2300      	movs	r3, #0
   165dc:	f887 3020 	strb.w	r3, [r7, #32]
        .attr = meth,
        .meth_offset = offsetof(mp_obj_type_t, print),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   165e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   165e2:	681a      	ldr	r2, [r3, #0]
   165e4:	f107 0310 	add.w	r3, r7, #16
   165e8:	4611      	mov	r1, r2
   165ea:	4618      	mov	r0, r3
   165ec:	f7ff fea6 	bl	1633c <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_NULL && kind == PRINT_STR) {
   165f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   165f2:	2b00      	cmp	r3, #0
   165f4:	d10e      	bne.n	16614 <instance_print+0x74>
   165f6:	687b      	ldr	r3, [r7, #4]
   165f8:	2b00      	cmp	r3, #0
   165fa:	d10b      	bne.n	16614 <instance_print+0x74>
        // If there's no __str__, fall back to __repr__
        lookup.attr = MP_QSTR___repr__;
   165fc:	2323      	movs	r3, #35	; 0x23
   165fe:	617b      	str	r3, [r7, #20]
        lookup.meth_offset = 0;
   16600:	2300      	movs	r3, #0
   16602:	61bb      	str	r3, [r7, #24]
        mp_obj_class_lookup(&lookup, self->base.type);
   16604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16606:	681a      	ldr	r2, [r3, #0]
   16608:	f107 0310 	add.w	r3, r7, #16
   1660c:	4611      	mov	r1, r2
   1660e:	4618      	mov	r0, r3
   16610:	f7ff fe94 	bl	1633c <mp_obj_class_lookup>
    }

    if (member[0] == MP_OBJ_SENTINEL) {
   16614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16616:	2b08      	cmp	r3, #8
   16618:	d129      	bne.n	1666e <instance_print+0xce>
        // Handle Exception subclasses specially
        if (mp_obj_is_native_exception_instance(self->subobj[0])) {
   1661a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1661c:	691b      	ldr	r3, [r3, #16]
   1661e:	4618      	mov	r0, r3
   16620:	f7f7 f938 	bl	d894 <mp_obj_get_type>
   16624:	4603      	mov	r3, r0
   16626:	68db      	ldr	r3, [r3, #12]
   16628:	4a1e      	ldr	r2, [pc, #120]	; (166a4 <instance_print+0x104>)
   1662a:	4293      	cmp	r3, r2
   1662c:	d117      	bne.n	1665e <instance_print+0xbe>
            if (kind != PRINT_STR) {
   1662e:	687b      	ldr	r3, [r7, #4]
   16630:	2b00      	cmp	r3, #0
   16632:	d00a      	beq.n	1664a <instance_print+0xaa>
                mp_print_str(print, qstr_str(self->base.type->name));
   16634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16636:	681b      	ldr	r3, [r3, #0]
   16638:	88db      	ldrh	r3, [r3, #6]
   1663a:	4618      	mov	r0, r3
   1663c:	f7ea fea4 	bl	1388 <qstr_str>
   16640:	4603      	mov	r3, r0
   16642:	4619      	mov	r1, r3
   16644:	68f8      	ldr	r0, [r7, #12]
   16646:	f7eb f9e3 	bl	1a10 <mp_print_str>
            }
            mp_obj_print_helper(print, self->subobj[0], kind | PRINT_EXC_SUBCLASS);
   1664a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1664c:	6919      	ldr	r1, [r3, #16]
   1664e:	687b      	ldr	r3, [r7, #4]
   16650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16654:	461a      	mov	r2, r3
   16656:	68f8      	ldr	r0, [r7, #12]
   16658:	f7f7 f94e 	bl	d8f8 <mp_obj_print_helper>
        } else {
            mp_obj_print_helper(print, self->subobj[0], kind);
        }
        return;
   1665c:	e01f      	b.n	1669e <instance_print+0xfe>
            mp_obj_print_helper(print, self->subobj[0], kind);
   1665e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16660:	691b      	ldr	r3, [r3, #16]
   16662:	687a      	ldr	r2, [r7, #4]
   16664:	4619      	mov	r1, r3
   16666:	68f8      	ldr	r0, [r7, #12]
   16668:	f7f7 f946 	bl	d8f8 <mp_obj_print_helper>
        return;
   1666c:	e017      	b.n	1669e <instance_print+0xfe>
    }

    if (member[0] != MP_OBJ_NULL) {
   1666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16670:	2b00      	cmp	r3, #0
   16672:	d00b      	beq.n	1668c <instance_print+0xec>
        mp_obj_t r = mp_call_function_1(member[0], self_in);
   16674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16676:	68b9      	ldr	r1, [r7, #8]
   16678:	4618      	mov	r0, r3
   1667a:	f7f5 fbc5 	bl	be08 <mp_call_function_1>
   1667e:	62f8      	str	r0, [r7, #44]	; 0x2c
        mp_obj_print_helper(print, r, PRINT_STR);
   16680:	2200      	movs	r2, #0
   16682:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   16684:	68f8      	ldr	r0, [r7, #12]
   16686:	f7f7 f937 	bl	d8f8 <mp_obj_print_helper>
        return;
   1668a:	e008      	b.n	1669e <instance_print+0xfe>
    }

    // TODO: CPython prints fully-qualified type name
    mp_printf(print, "<%s object at %p>", mp_obj_get_type_str(self_in), self);
   1668c:	68b8      	ldr	r0, [r7, #8]
   1668e:	f7f7 f921 	bl	d8d4 <mp_obj_get_type_str>
   16692:	4602      	mov	r2, r0
   16694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16696:	4904      	ldr	r1, [pc, #16]	; (166a8 <instance_print+0x108>)
   16698:	68f8      	ldr	r0, [r7, #12]
   1669a:	f7eb fccd 	bl	2038 <mp_printf>
}
   1669e:	3738      	adds	r7, #56	; 0x38
   166a0:	46bd      	mov	sp, r7
   166a2:	bd80      	pop	{r7, pc}
   166a4:	0000f435 	.word	0x0000f435
   166a8:	00023f7c 	.word	0x00023f7c

000166ac <mp_obj_instance_make_new>:

mp_obj_t mp_obj_instance_make_new(const mp_obj_type_t *self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   166ac:	b590      	push	{r4, r7, lr}
   166ae:	b093      	sub	sp, #76	; 0x4c
   166b0:	af00      	add	r7, sp, #0
   166b2:	60f8      	str	r0, [r7, #12]
   166b4:	60b9      	str	r1, [r7, #8]
   166b6:	607a      	str	r2, [r7, #4]
   166b8:	603b      	str	r3, [r7, #0]
    assert(mp_obj_is_instance_type(self));
   166ba:	68fb      	ldr	r3, [r7, #12]
   166bc:	68db      	ldr	r3, [r3, #12]
   166be:	4a6b      	ldr	r2, [pc, #428]	; (1686c <mp_obj_instance_make_new+0x1c0>)
   166c0:	4293      	cmp	r3, r2
   166c2:	d006      	beq.n	166d2 <mp_obj_instance_make_new+0x26>
   166c4:	4b6a      	ldr	r3, [pc, #424]	; (16870 <mp_obj_instance_make_new+0x1c4>)
   166c6:	4a6b      	ldr	r2, [pc, #428]	; (16874 <mp_obj_instance_make_new+0x1c8>)
   166c8:	f44f 718d 	mov.w	r1, #282	; 0x11a
   166cc:	486a      	ldr	r0, [pc, #424]	; (16878 <mp_obj_instance_make_new+0x1cc>)
   166ce:	f005 f859 	bl	1b784 <__assert_func>

    // look for __new__ function
    mp_obj_t init_fn[2] = {MP_OBJ_NULL};
   166d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   166d6:	2200      	movs	r2, #0
   166d8:	601a      	str	r2, [r3, #0]
   166da:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   166dc:	2300      	movs	r3, #0
   166de:	61bb      	str	r3, [r7, #24]
   166e0:	231e      	movs	r3, #30
   166e2:	61fb      	str	r3, [r7, #28]
   166e4:	230c      	movs	r3, #12
   166e6:	623b      	str	r3, [r7, #32]
   166e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   166ec:	627b      	str	r3, [r7, #36]	; 0x24
   166ee:	2300      	movs	r3, #0
   166f0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        .attr = MP_QSTR___new__,
        .meth_offset = offsetof(mp_obj_type_t, make_new),
        .dest = init_fn,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self);
   166f4:	f107 0318 	add.w	r3, r7, #24
   166f8:	68f9      	ldr	r1, [r7, #12]
   166fa:	4618      	mov	r0, r3
   166fc:	f7ff fe1e 	bl	1633c <mp_obj_class_lookup>

    const mp_obj_type_t *native_base = NULL;
   16700:	2300      	movs	r3, #0
   16702:	617b      	str	r3, [r7, #20]
    mp_obj_instance_t *o;
    if (init_fn[0] == MP_OBJ_NULL || init_fn[0] == MP_OBJ_SENTINEL) {
   16704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16706:	2b00      	cmp	r3, #0
   16708:	d002      	beq.n	16710 <mp_obj_instance_make_new+0x64>
   1670a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1670c:	2b08      	cmp	r3, #8
   1670e:	d107      	bne.n	16720 <mp_obj_instance_make_new+0x74>
        // Either there is no __new__() method defined or there is a native
        // constructor.  In both cases create a blank instance.
        o = mp_obj_new_instance(self, &native_base);
   16710:	f107 0314 	add.w	r3, r7, #20
   16714:	4619      	mov	r1, r3
   16716:	68f8      	ldr	r0, [r7, #12]
   16718:	f7ff fdd8 	bl	162cc <mp_obj_new_instance>
   1671c:	6478      	str	r0, [r7, #68]	; 0x44
   1671e:	e03e      	b.n	1679e <mp_obj_instance_make_new+0xf2>
        // said native constructor.

    } else {
        // Call Python class __new__ function with all args to create an instance
        mp_obj_t new_ret;
        if (n_args == 0 && n_kw == 0) {
   16720:	68bb      	ldr	r3, [r7, #8]
   16722:	2b00      	cmp	r3, #0
   16724:	d10d      	bne.n	16742 <mp_obj_instance_make_new+0x96>
   16726:	687b      	ldr	r3, [r7, #4]
   16728:	2b00      	cmp	r3, #0
   1672a:	d10a      	bne.n	16742 <mp_obj_instance_make_new+0x96>
            mp_obj_t args2[1] = {MP_OBJ_FROM_PTR(self)};
   1672c:	68fb      	ldr	r3, [r7, #12]
   1672e:	613b      	str	r3, [r7, #16]
            new_ret = mp_call_function_n_kw(init_fn[0], 1, 0, args2);
   16730:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16732:	f107 0310 	add.w	r3, r7, #16
   16736:	2200      	movs	r2, #0
   16738:	2101      	movs	r1, #1
   1673a:	f7f5 fb8b 	bl	be54 <mp_call_function_n_kw>
   1673e:	6438      	str	r0, [r7, #64]	; 0x40
        if (n_args == 0 && n_kw == 0) {
   16740:	e022      	b.n	16788 <mp_obj_instance_make_new+0xdc>
        } else {
            mp_obj_t *args2 = m_new(mp_obj_t, 1 + n_args + 2 * n_kw);
   16742:	687b      	ldr	r3, [r7, #4]
   16744:	005a      	lsls	r2, r3, #1
   16746:	68bb      	ldr	r3, [r7, #8]
   16748:	4413      	add	r3, r2
   1674a:	3301      	adds	r3, #1
   1674c:	009b      	lsls	r3, r3, #2
   1674e:	4618      	mov	r0, r3
   16750:	f7e9 fde4 	bl	31c <m_malloc>
   16754:	63b8      	str	r0, [r7, #56]	; 0x38
            args2[0] = MP_OBJ_FROM_PTR(self);
   16756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16758:	68fa      	ldr	r2, [r7, #12]
   1675a:	601a      	str	r2, [r3, #0]
            memcpy(args2 + 1, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
   1675c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1675e:	1d18      	adds	r0, r3, #4
   16760:	687b      	ldr	r3, [r7, #4]
   16762:	005a      	lsls	r2, r3, #1
   16764:	68bb      	ldr	r3, [r7, #8]
   16766:	4413      	add	r3, r2
   16768:	009b      	lsls	r3, r3, #2
   1676a:	461a      	mov	r2, r3
   1676c:	6839      	ldr	r1, [r7, #0]
   1676e:	f006 fb0f 	bl	1cd90 <memcpy>
            new_ret = mp_call_function_n_kw(init_fn[0], n_args + 1, n_kw, args2);
   16772:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16774:	68bb      	ldr	r3, [r7, #8]
   16776:	1c59      	adds	r1, r3, #1
   16778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1677a:	687a      	ldr	r2, [r7, #4]
   1677c:	f7f5 fb6a 	bl	be54 <mp_call_function_n_kw>
   16780:	6438      	str	r0, [r7, #64]	; 0x40
            m_del(mp_obj_t, args2, 1 + n_args + 2 * n_kw);
   16782:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   16784:	f7e9 fe44 	bl	410 <m_free>
        }

        // https://docs.python.org/3.4/reference/datamodel.html#object.__new__
        // "If __new__() does not return an instance of cls, then the new
        // instance's __init__() method will not be invoked."
        if (mp_obj_get_type(new_ret) != self) {
   16788:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1678a:	f7f7 f883 	bl	d894 <mp_obj_get_type>
   1678e:	4602      	mov	r2, r0
   16790:	68fb      	ldr	r3, [r7, #12]
   16792:	429a      	cmp	r2, r3
   16794:	d001      	beq.n	1679a <mp_obj_instance_make_new+0xee>
            return new_ret;
   16796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16798:	e063      	b.n	16862 <mp_obj_instance_make_new+0x1b6>
        }

        // The instance returned by __new__() becomes the new object
        o = MP_OBJ_TO_PTR(new_ret);
   1679a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1679c:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // now call Python class __init__ function with all args
    // This method has a chance to call super().__init__() to construct a
    // possible native base class.
    init_fn[0] = init_fn[1] = MP_OBJ_NULL;
   1679e:	2300      	movs	r3, #0
   167a0:	633b      	str	r3, [r7, #48]	; 0x30
   167a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   167a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    lookup.obj = o;
   167a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   167a8:	61bb      	str	r3, [r7, #24]
    lookup.attr = MP_QSTR___init__;
   167aa:	2314      	movs	r3, #20
   167ac:	61fb      	str	r3, [r7, #28]
    lookup.meth_offset = 0;
   167ae:	2300      	movs	r3, #0
   167b0:	623b      	str	r3, [r7, #32]
    mp_obj_class_lookup(&lookup, self);
   167b2:	f107 0318 	add.w	r3, r7, #24
   167b6:	68f9      	ldr	r1, [r7, #12]
   167b8:	4618      	mov	r0, r3
   167ba:	f7ff fdbf 	bl	1633c <mp_obj_class_lookup>
    if (init_fn[0] != MP_OBJ_NULL) {
   167be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   167c0:	2b00      	cmp	r3, #0
   167c2:	d03b      	beq.n	1683c <mp_obj_instance_make_new+0x190>
        mp_obj_t init_ret;
        if (n_args == 0 && n_kw == 0) {
   167c4:	68bb      	ldr	r3, [r7, #8]
   167c6:	2b00      	cmp	r3, #0
   167c8:	d10b      	bne.n	167e2 <mp_obj_instance_make_new+0x136>
   167ca:	687b      	ldr	r3, [r7, #4]
   167cc:	2b00      	cmp	r3, #0
   167ce:	d108      	bne.n	167e2 <mp_obj_instance_make_new+0x136>
            init_ret = mp_call_method_n_kw(0, 0, init_fn);
   167d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   167d4:	461a      	mov	r2, r3
   167d6:	2100      	movs	r1, #0
   167d8:	2000      	movs	r0, #0
   167da:	f7f5 fb5d 	bl	be98 <mp_call_method_n_kw>
   167de:	63f8      	str	r0, [r7, #60]	; 0x3c
   167e0:	e025      	b.n	1682e <mp_obj_instance_make_new+0x182>
        } else {
            mp_obj_t *args2 = m_new(mp_obj_t, 2 + n_args + 2 * n_kw);
   167e2:	687b      	ldr	r3, [r7, #4]
   167e4:	005a      	lsls	r2, r3, #1
   167e6:	68bb      	ldr	r3, [r7, #8]
   167e8:	4413      	add	r3, r2
   167ea:	3302      	adds	r3, #2
   167ec:	009b      	lsls	r3, r3, #2
   167ee:	4618      	mov	r0, r3
   167f0:	f7e9 fd94 	bl	31c <m_malloc>
   167f4:	6378      	str	r0, [r7, #52]	; 0x34
            args2[0] = init_fn[0];
   167f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   167f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   167fa:	601a      	str	r2, [r3, #0]
            args2[1] = init_fn[1];
   167fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   167fe:	3304      	adds	r3, #4
   16800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   16802:	601a      	str	r2, [r3, #0]
            memcpy(args2 + 2, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
   16804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16806:	f103 0008 	add.w	r0, r3, #8
   1680a:	687b      	ldr	r3, [r7, #4]
   1680c:	005a      	lsls	r2, r3, #1
   1680e:	68bb      	ldr	r3, [r7, #8]
   16810:	4413      	add	r3, r2
   16812:	009b      	lsls	r3, r3, #2
   16814:	461a      	mov	r2, r3
   16816:	6839      	ldr	r1, [r7, #0]
   16818:	f006 faba 	bl	1cd90 <memcpy>
            init_ret = mp_call_method_n_kw(n_args, n_kw, args2);
   1681c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1681e:	6879      	ldr	r1, [r7, #4]
   16820:	68b8      	ldr	r0, [r7, #8]
   16822:	f7f5 fb39 	bl	be98 <mp_call_method_n_kw>
   16826:	63f8      	str	r0, [r7, #60]	; 0x3c
            m_del(mp_obj_t, args2, 2 + n_args + 2 * n_kw);
   16828:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1682a:	f7e9 fdf1 	bl	410 <m_free>
        }
        if (init_ret != mp_const_none) {
   1682e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16830:	4a12      	ldr	r2, [pc, #72]	; (1687c <mp_obj_instance_make_new+0x1d0>)
   16832:	4293      	cmp	r3, r2
   16834:	d002      	beq.n	1683c <mp_obj_instance_make_new+0x190>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("__init__() should return None");
   16836:	4812      	ldr	r0, [pc, #72]	; (16880 <mp_obj_instance_make_new+0x1d4>)
   16838:	f7f6 fbbe 	bl	cfb8 <mp_raise_TypeError>

    }

    // If the type had a native base that was not explicitly initialised
    // (constructed) by the Python __init__() method then construct it now.
    if (native_base != NULL && o->subobj[0] == MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj)) {
   1683c:	697b      	ldr	r3, [r7, #20]
   1683e:	2b00      	cmp	r3, #0
   16840:	d00e      	beq.n	16860 <mp_obj_instance_make_new+0x1b4>
   16842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16844:	691b      	ldr	r3, [r3, #16]
   16846:	4a0f      	ldr	r2, [pc, #60]	; (16884 <mp_obj_instance_make_new+0x1d8>)
   16848:	4293      	cmp	r3, r2
   1684a:	d109      	bne.n	16860 <mp_obj_instance_make_new+0x1b4>
        o->subobj[0] = native_base->make_new(native_base, n_args, n_kw, args);
   1684c:	697b      	ldr	r3, [r7, #20]
   1684e:	68dc      	ldr	r4, [r3, #12]
   16850:	6978      	ldr	r0, [r7, #20]
   16852:	683b      	ldr	r3, [r7, #0]
   16854:	687a      	ldr	r2, [r7, #4]
   16856:	68b9      	ldr	r1, [r7, #8]
   16858:	47a0      	blx	r4
   1685a:	4602      	mov	r2, r0
   1685c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1685e:	611a      	str	r2, [r3, #16]
    }

    return MP_OBJ_FROM_PTR(o);
   16860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   16862:	4618      	mov	r0, r3
   16864:	374c      	adds	r7, #76	; 0x4c
   16866:	46bd      	mov	sp, r7
   16868:	bd90      	pop	{r4, r7, pc}
   1686a:	bf00      	nop
   1686c:	000166ad 	.word	0x000166ad
   16870:	00023f90 	.word	0x00023f90
   16874:	000243ac 	.word	0x000243ac
   16878:	00023ed4 	.word	0x00023ed4
   1687c:	000234d4 	.word	0x000234d4
   16880:	00023fb0 	.word	0x00023fb0
   16884:	00023ee8 	.word	0x00023ee8

00016888 <instance_unary_op>:
    #if MICROPY_PY_SYS_GETSIZEOF
    [MP_UNARY_OP_SIZEOF] = MP_QSTR___sizeof__,
    #endif
};

STATIC mp_obj_t instance_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   16888:	b580      	push	{r7, lr}
   1688a:	b08c      	sub	sp, #48	; 0x30
   1688c:	af00      	add	r7, sp, #0
   1688e:	6078      	str	r0, [r7, #4]
   16890:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16892:	683b      	ldr	r3, [r7, #0]
   16894:	62bb      	str	r3, [r7, #40]	; 0x28
            + sizeof(*self->members.table) * self->members.alloc;
        return MP_OBJ_NEW_SMALL_INT(sz);
    }
    #endif

    qstr op_name = mp_unary_op_method_name[op];
   16896:	4a3b      	ldr	r2, [pc, #236]	; (16984 <instance_unary_op+0xfc>)
   16898:	687b      	ldr	r3, [r7, #4]
   1689a:	4413      	add	r3, r2
   1689c:	781b      	ldrb	r3, [r3, #0]
   1689e:	627b      	str	r3, [r7, #36]	; 0x24
    /* Still try to lookup native slot
    if (op_name == 0) {
        return MP_OBJ_NULL;
    }
    */
    mp_obj_t member[2] = {MP_OBJ_NULL};
   168a0:	f107 031c 	add.w	r3, r7, #28
   168a4:	2200      	movs	r2, #0
   168a6:	601a      	str	r2, [r3, #0]
   168a8:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   168aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   168ac:	60bb      	str	r3, [r7, #8]
   168ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   168b0:	60fb      	str	r3, [r7, #12]
   168b2:	2314      	movs	r3, #20
   168b4:	613b      	str	r3, [r7, #16]
   168b6:	f107 031c 	add.w	r3, r7, #28
   168ba:	617b      	str	r3, [r7, #20]
   168bc:	2300      	movs	r3, #0
   168be:	763b      	strb	r3, [r7, #24]
        .attr = op_name,
        .meth_offset = offsetof(mp_obj_type_t, unary_op),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   168c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   168c2:	681a      	ldr	r2, [r3, #0]
   168c4:	f107 0308 	add.w	r3, r7, #8
   168c8:	4611      	mov	r1, r2
   168ca:	4618      	mov	r0, r3
   168cc:	f7ff fd36 	bl	1633c <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_SENTINEL) {
   168d0:	69fb      	ldr	r3, [r7, #28]
   168d2:	2b08      	cmp	r3, #8
   168d4:	d107      	bne.n	168e6 <instance_unary_op+0x5e>
        return mp_unary_op(op, self->subobj[0]);
   168d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   168d8:	691b      	ldr	r3, [r3, #16]
   168da:	4619      	mov	r1, r3
   168dc:	6878      	ldr	r0, [r7, #4]
   168de:	f7f4 ff31 	bl	b744 <mp_unary_op>
   168e2:	4603      	mov	r3, r0
   168e4:	e04a      	b.n	1697c <instance_unary_op+0xf4>
    } else if (member[0] != MP_OBJ_NULL) {
   168e6:	69fb      	ldr	r3, [r7, #28]
   168e8:	2b00      	cmp	r3, #0
   168ea:	d031      	beq.n	16950 <instance_unary_op+0xc8>
        mp_obj_t val = mp_call_function_1(member[0], self_in);
   168ec:	69fb      	ldr	r3, [r7, #28]
   168ee:	6839      	ldr	r1, [r7, #0]
   168f0:	4618      	mov	r0, r3
   168f2:	f7f5 fa89 	bl	be08 <mp_call_function_1>
   168f6:	62f8      	str	r0, [r7, #44]	; 0x2c

        switch (op) {
   168f8:	687b      	ldr	r3, [r7, #4]
   168fa:	2b06      	cmp	r3, #6
   168fc:	d002      	beq.n	16904 <instance_unary_op+0x7c>
   168fe:	2b08      	cmp	r3, #8
   16900:	d009      	beq.n	16916 <instance_unary_op+0x8e>
   16902:	e023      	b.n	1694c <instance_unary_op+0xc4>
            case MP_UNARY_OP_HASH:
                // __hash__ must return a small int
                val = MP_OBJ_NEW_SMALL_INT(mp_obj_get_int_truncated(val));
   16904:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16906:	f7f7 f9df 	bl	dcc8 <mp_obj_get_int_truncated>
   1690a:	4603      	mov	r3, r0
   1690c:	005b      	lsls	r3, r3, #1
   1690e:	f043 0301 	orr.w	r3, r3, #1
   16912:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
   16914:	e01a      	b.n	1694c <instance_unary_op+0xc4>
            case MP_UNARY_OP_INT:
                // Must return int
                if (!MP_OBJ_IS_INT(val)) {
   16916:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16918:	f7ff fc00 	bl	1611c <MP_OBJ_IS_SMALL_INT>
   1691c:	4603      	mov	r3, r0
   1691e:	f083 0301 	eor.w	r3, r3, #1
   16922:	b2db      	uxtb	r3, r3
   16924:	2b00      	cmp	r3, #0
   16926:	d010      	beq.n	1694a <instance_unary_op+0xc2>
   16928:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1692a:	f7ff fc09 	bl	16140 <MP_OBJ_IS_OBJ>
   1692e:	4603      	mov	r3, r0
   16930:	f083 0301 	eor.w	r3, r3, #1
   16934:	b2db      	uxtb	r3, r3
   16936:	2b00      	cmp	r3, #0
   16938:	d104      	bne.n	16944 <instance_unary_op+0xbc>
   1693a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1693c:	681b      	ldr	r3, [r3, #0]
   1693e:	4a12      	ldr	r2, [pc, #72]	; (16988 <instance_unary_op+0x100>)
   16940:	4293      	cmp	r3, r2
   16942:	d002      	beq.n	1694a <instance_unary_op+0xc2>
                    mp_raise_TypeError(NULL);
   16944:	2000      	movs	r0, #0
   16946:	f7f6 fb37 	bl	cfb8 <mp_raise_TypeError>
                }
                break;
   1694a:	bf00      	nop
            default:
                // No need to do anything
                ;
        }
        return val;
   1694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1694e:	e015      	b.n	1697c <instance_unary_op+0xf4>
    } else {
        if (op == MP_UNARY_OP_HASH) {
   16950:	687b      	ldr	r3, [r7, #4]
   16952:	2b06      	cmp	r3, #6
   16954:	d111      	bne.n	1697a <instance_unary_op+0xf2>
            lookup.attr = MP_QSTR___eq__;
   16956:	230b      	movs	r3, #11
   16958:	60fb      	str	r3, [r7, #12]
            mp_obj_class_lookup(&lookup, self->base.type);
   1695a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1695c:	681a      	ldr	r2, [r3, #0]
   1695e:	f107 0308 	add.w	r3, r7, #8
   16962:	4611      	mov	r1, r2
   16964:	4618      	mov	r0, r3
   16966:	f7ff fce9 	bl	1633c <mp_obj_class_lookup>
            if (member[0] == MP_OBJ_NULL) {
   1696a:	69fb      	ldr	r3, [r7, #28]
   1696c:	2b00      	cmp	r3, #0
   1696e:	d104      	bne.n	1697a <instance_unary_op+0xf2>
                // https://docs.python.org/3/reference/datamodel.html#object.__hash__
                // "User-defined classes have __eq__() and __hash__() methods by default;
                // with them, all objects compare unequal (except with themselves) and
                // x.__hash__() returns an appropriate value such that x == y implies
                // both that x is y and hash(x) == hash(y)."
                return MP_OBJ_NEW_SMALL_INT((mp_uint_t)self_in);
   16970:	683b      	ldr	r3, [r7, #0]
   16972:	005b      	lsls	r3, r3, #1
   16974:	f043 0301 	orr.w	r3, r3, #1
   16978:	e000      	b.n	1697c <instance_unary_op+0xf4>
            }
            // "A class that overrides __eq__() and does not define __hash__() will have its __hash__() implicitly set to None.
            // When the __hash__() method of a class is None, instances of the class will raise an appropriate TypeError"
        }

        return MP_OBJ_NULL; // op not supported
   1697a:	2300      	movs	r3, #0
    }
}
   1697c:	4618      	mov	r0, r3
   1697e:	3730      	adds	r7, #48	; 0x30
   16980:	46bd      	mov	sp, r7
   16982:	bd80      	pop	{r7, pc}
   16984:	00023fd0 	.word	0x00023fd0
   16988:	00022f80 	.word	0x00022f80

0001698c <instance_binary_op>:
    [MP_BINARY_OP_REVERSE_RSHIFT] = MP_QSTR___rrshift__,
    #endif
    #endif
};

STATIC mp_obj_t instance_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   1698c:	b580      	push	{r7, lr}
   1698e:	b090      	sub	sp, #64	; 0x40
   16990:	af00      	add	r7, sp, #0
   16992:	60f8      	str	r0, [r7, #12]
   16994:	60b9      	str	r1, [r7, #8]
   16996:	607a      	str	r2, [r7, #4]
    // Note: For ducktyping, CPython does not look in the instance members or use
    // __getattr__ or __getattribute__.  It only looks in the class dictionary.
    mp_obj_instance_t *lhs = MP_OBJ_TO_PTR(lhs_in);
   16998:	68bb      	ldr	r3, [r7, #8]
   1699a:	63bb      	str	r3, [r7, #56]	; 0x38
retry:;
    qstr op_name = mp_binary_op_method_name[op];
   1699c:	4a24      	ldr	r2, [pc, #144]	; (16a30 <instance_binary_op+0xa4>)
   1699e:	68fb      	ldr	r3, [r7, #12]
   169a0:	4413      	add	r3, r2
   169a2:	781b      	ldrb	r3, [r3, #0]
   169a4:	637b      	str	r3, [r7, #52]	; 0x34
    /* Still try to lookup native slot
    if (op_name == 0) {
        return MP_OBJ_NULL;
    }
    */
    mp_obj_t dest[3] = {MP_OBJ_NULL};
   169a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
   169aa:	2200      	movs	r2, #0
   169ac:	601a      	str	r2, [r3, #0]
   169ae:	605a      	str	r2, [r3, #4]
   169b0:	609a      	str	r2, [r3, #8]
    struct class_lookup_data lookup = {
   169b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   169b4:	617b      	str	r3, [r7, #20]
   169b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   169b8:	61bb      	str	r3, [r7, #24]
   169ba:	2318      	movs	r3, #24
   169bc:	61fb      	str	r3, [r7, #28]
   169be:	f107 0328 	add.w	r3, r7, #40	; 0x28
   169c2:	623b      	str	r3, [r7, #32]
   169c4:	2300      	movs	r3, #0
   169c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .attr = op_name,
        .meth_offset = offsetof(mp_obj_type_t, binary_op),
        .dest = dest,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, lhs->base.type);
   169ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   169cc:	681a      	ldr	r2, [r3, #0]
   169ce:	f107 0314 	add.w	r3, r7, #20
   169d2:	4611      	mov	r1, r2
   169d4:	4618      	mov	r0, r3
   169d6:	f7ff fcb1 	bl	1633c <mp_obj_class_lookup>

    mp_obj_t res;
    if (dest[0] == MP_OBJ_SENTINEL) {
   169da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   169dc:	2b08      	cmp	r3, #8
   169de:	d108      	bne.n	169f2 <instance_binary_op+0x66>
        res = mp_binary_op(op, lhs->subobj[0], rhs_in);
   169e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   169e2:	691b      	ldr	r3, [r3, #16]
   169e4:	687a      	ldr	r2, [r7, #4]
   169e6:	4619      	mov	r1, r3
   169e8:	68f8      	ldr	r0, [r7, #12]
   169ea:	f7f4 ff9b 	bl	b924 <mp_binary_op>
   169ee:	63f8      	str	r0, [r7, #60]	; 0x3c
   169f0:	e019      	b.n	16a26 <instance_binary_op+0x9a>
    } else if (dest[0] != MP_OBJ_NULL) {
   169f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   169f4:	2b00      	cmp	r3, #0
   169f6:	d00a      	beq.n	16a0e <instance_binary_op+0x82>
        dest[2] = rhs_in;
   169f8:	687b      	ldr	r3, [r7, #4]
   169fa:	633b      	str	r3, [r7, #48]	; 0x30
        res = mp_call_method_n_kw(1, 0, dest);
   169fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16a00:	461a      	mov	r2, r3
   16a02:	2100      	movs	r1, #0
   16a04:	2001      	movs	r0, #1
   16a06:	f7f5 fa47 	bl	be98 <mp_call_method_n_kw>
   16a0a:	63f8      	str	r0, [r7, #60]	; 0x3c
   16a0c:	e00b      	b.n	16a26 <instance_binary_op+0x9a>
    } else {
        // If this was an inplace method, fallback to normal method
        // https://docs.python.org/3/reference/datamodel.html#object.__iadd__ :
        // "If a specific method is not defined, the augmented assignment
        // falls back to the normal methods."
        if (op >= MP_BINARY_OP_INPLACE_OR && op <= MP_BINARY_OP_INPLACE_POWER) {
   16a0e:	68fb      	ldr	r3, [r7, #12]
   16a10:	2b08      	cmp	r3, #8
   16a12:	d906      	bls.n	16a22 <instance_binary_op+0x96>
   16a14:	68fb      	ldr	r3, [r7, #12]
   16a16:	2b14      	cmp	r3, #20
   16a18:	d803      	bhi.n	16a22 <instance_binary_op+0x96>
            op -= MP_BINARY_OP_INPLACE_OR - MP_BINARY_OP_OR;
   16a1a:	68fb      	ldr	r3, [r7, #12]
   16a1c:	330c      	adds	r3, #12
   16a1e:	60fb      	str	r3, [r7, #12]
            goto retry;
   16a20:	e7bc      	b.n	1699c <instance_binary_op+0x10>
        }
        return MP_OBJ_NULL; // op not supported
   16a22:	2300      	movs	r3, #0
   16a24:	e000      	b.n	16a28 <instance_binary_op+0x9c>
    if (res == mp_const_notimplemented) {
        return MP_OBJ_NULL; // op not supported
    }
    #endif

    return res;
   16a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   16a28:	4618      	mov	r0, r3
   16a2a:	3740      	adds	r7, #64	; 0x40
   16a2c:	46bd      	mov	sp, r7
   16a2e:	bd80      	pop	{r7, pc}
   16a30:	00023fdc 	.word	0x00023fdc

00016a34 <mp_obj_instance_load_attr>:

STATIC void mp_obj_instance_load_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   16a34:	b580      	push	{r7, lr}
   16a36:	b090      	sub	sp, #64	; 0x40
   16a38:	af00      	add	r7, sp, #0
   16a3a:	60f8      	str	r0, [r7, #12]
   16a3c:	60b9      	str	r1, [r7, #8]
   16a3e:	607a      	str	r2, [r7, #4]
    // logic: look in instance members then class locals
    assert(mp_obj_is_instance_type(mp_obj_get_type(self_in)));
   16a40:	68f8      	ldr	r0, [r7, #12]
   16a42:	f7f6 ff27 	bl	d894 <mp_obj_get_type>
   16a46:	4603      	mov	r3, r0
   16a48:	68db      	ldr	r3, [r3, #12]
   16a4a:	4a2f      	ldr	r2, [pc, #188]	; (16b08 <mp_obj_instance_load_attr+0xd4>)
   16a4c:	4293      	cmp	r3, r2
   16a4e:	d006      	beq.n	16a5e <mp_obj_instance_load_attr+0x2a>
   16a50:	4b2e      	ldr	r3, [pc, #184]	; (16b0c <mp_obj_instance_load_attr+0xd8>)
   16a52:	4a2f      	ldr	r2, [pc, #188]	; (16b10 <mp_obj_instance_load_attr+0xdc>)
   16a54:	f44f 7111 	mov.w	r1, #580	; 0x244
   16a58:	482e      	ldr	r0, [pc, #184]	; (16b14 <mp_obj_instance_load_attr+0xe0>)
   16a5a:	f004 fe93 	bl	1b784 <__assert_func>
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16a5e:	68fb      	ldr	r3, [r7, #12]
   16a60:	63fb      	str	r3, [r7, #60]	; 0x3c

    mp_map_elem_t *elem = mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
   16a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16a64:	1d18      	adds	r0, r3, #4
   16a66:	68bb      	ldr	r3, [r7, #8]
   16a68:	009b      	lsls	r3, r3, #2
   16a6a:	f043 0302 	orr.w	r3, r3, #2
   16a6e:	2200      	movs	r2, #0
   16a70:	4619      	mov	r1, r3
   16a72:	f7f6 fd65 	bl	d540 <mp_map_lookup>
   16a76:	63b8      	str	r0, [r7, #56]	; 0x38
    if (elem != NULL) {
   16a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16a7a:	2b00      	cmp	r3, #0
   16a7c:	d004      	beq.n	16a88 <mp_obj_instance_load_attr+0x54>
        // object member, always treated as a value
        dest[0] = elem->value;
   16a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16a80:	685a      	ldr	r2, [r3, #4]
   16a82:	687b      	ldr	r3, [r7, #4]
   16a84:	601a      	str	r2, [r3, #0]
        return;
   16a86:	e03b      	b.n	16b00 <mp_obj_instance_load_attr+0xcc>
        }
        dest[0] = attr_dict;
        return;
    }
#endif
    struct class_lookup_data lookup = {
   16a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16a8a:	623b      	str	r3, [r7, #32]
   16a8c:	68bb      	ldr	r3, [r7, #8]
   16a8e:	627b      	str	r3, [r7, #36]	; 0x24
   16a90:	2300      	movs	r3, #0
   16a92:	62bb      	str	r3, [r7, #40]	; 0x28
   16a94:	687b      	ldr	r3, [r7, #4]
   16a96:	62fb      	str	r3, [r7, #44]	; 0x2c
   16a98:	2300      	movs	r3, #0
   16a9a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        .attr = attr,
        .meth_offset = 0,
        .dest = dest,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16aa0:	681a      	ldr	r2, [r3, #0]
   16aa2:	f107 0320 	add.w	r3, r7, #32
   16aa6:	4611      	mov	r1, r2
   16aa8:	4618      	mov	r0, r3
   16aaa:	f7ff fc47 	bl	1633c <mp_obj_class_lookup>
    mp_obj_t member = dest[0];
   16aae:	687b      	ldr	r3, [r7, #4]
   16ab0:	681b      	ldr	r3, [r3, #0]
   16ab2:	637b      	str	r3, [r7, #52]	; 0x34
    if (member != MP_OBJ_NULL) {
   16ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16ab6:	2b00      	cmp	r3, #0
   16ab8:	d006      	beq.n	16ac8 <mp_obj_instance_load_attr+0x94>
        if (!(self->base.type->flags & TYPE_FLAG_HAS_SPECIAL_ACCESSORS)) {
   16aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16abc:	681b      	ldr	r3, [r3, #0]
   16abe:	889b      	ldrh	r3, [r3, #4]
   16ac0:	f003 0302 	and.w	r3, r3, #2
   16ac4:	2b00      	cmp	r3, #0
            attr_get_method[2] = self_in;
            attr_get_method[3] = MP_OBJ_FROM_PTR(mp_obj_get_type(self_in));
            dest[0] = mp_call_method_n_kw(2, 0, attr_get_method);
        }
        #endif
        return;
   16ac6:	e01b      	b.n	16b00 <mp_obj_instance_load_attr+0xcc>
    }

    // try __getattr__
    if (attr != MP_QSTR___getattr__) {
   16ac8:	68bb      	ldr	r3, [r7, #8]
   16aca:	2b0e      	cmp	r3, #14
   16acc:	d018      	beq.n	16b00 <mp_obj_instance_load_attr+0xcc>
            return;
        }
        #endif

        mp_obj_t dest2[3];
        mp_load_method_maybe(self_in, MP_QSTR___getattr__, dest2);
   16ace:	f107 0314 	add.w	r3, r7, #20
   16ad2:	461a      	mov	r2, r3
   16ad4:	210e      	movs	r1, #14
   16ad6:	68f8      	ldr	r0, [r7, #12]
   16ad8:	f7f5 fe5a 	bl	c790 <mp_load_method_maybe>
        if (dest2[0] != MP_OBJ_NULL) {
   16adc:	697b      	ldr	r3, [r7, #20]
   16ade:	2b00      	cmp	r3, #0
   16ae0:	d00e      	beq.n	16b00 <mp_obj_instance_load_attr+0xcc>
            // __getattr__ exists, call it and return its result
            dest2[2] = MP_OBJ_NEW_QSTR(attr);
   16ae2:	68bb      	ldr	r3, [r7, #8]
   16ae4:	009b      	lsls	r3, r3, #2
   16ae6:	f043 0302 	orr.w	r3, r3, #2
   16aea:	61fb      	str	r3, [r7, #28]
            dest[0] = mp_call_method_n_kw(1, 0, dest2);
   16aec:	f107 0314 	add.w	r3, r7, #20
   16af0:	461a      	mov	r2, r3
   16af2:	2100      	movs	r1, #0
   16af4:	2001      	movs	r0, #1
   16af6:	f7f5 f9cf 	bl	be98 <mp_call_method_n_kw>
   16afa:	4602      	mov	r2, r0
   16afc:	687b      	ldr	r3, [r7, #4]
   16afe:	601a      	str	r2, [r3, #0]
            return;
        }
    }
}
   16b00:	3740      	adds	r7, #64	; 0x40
   16b02:	46bd      	mov	sp, r7
   16b04:	bd80      	pop	{r7, pc}
   16b06:	bf00      	nop
   16b08:	000166ad 	.word	0x000166ad
   16b0c:	00024000 	.word	0x00024000
   16b10:	000243c8 	.word	0x000243c8
   16b14:	00023ed4 	.word	0x00023ed4

00016b18 <mp_obj_instance_store_attr>:

STATIC bool mp_obj_instance_store_attr(mp_obj_t self_in, qstr attr, mp_obj_t value) {
   16b18:	b580      	push	{r7, lr}
   16b1a:	b086      	sub	sp, #24
   16b1c:	af00      	add	r7, sp, #0
   16b1e:	60f8      	str	r0, [r7, #12]
   16b20:	60b9      	str	r1, [r7, #8]
   16b22:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16b24:	68fb      	ldr	r3, [r7, #12]
   16b26:	617b      	str	r3, [r7, #20]

    if (!(self->base.type->flags & TYPE_FLAG_HAS_SPECIAL_ACCESSORS)) {
   16b28:	697b      	ldr	r3, [r7, #20]
   16b2a:	681b      	ldr	r3, [r3, #0]
   16b2c:	889b      	ldrh	r3, [r3, #4]
   16b2e:	f003 0302 	and.w	r3, r3, #2
   16b32:	2b00      	cmp	r3, #0
    }
    #endif

skip_special_accessors:

    if (value == MP_OBJ_NULL) {
   16b34:	687b      	ldr	r3, [r7, #4]
   16b36:	2b00      	cmp	r3, #0
   16b38:	d111      	bne.n	16b5e <mp_obj_instance_store_attr+0x46>
        // delete attribute
        mp_map_elem_t *elem = mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_REMOVE_IF_FOUND);
   16b3a:	697b      	ldr	r3, [r7, #20]
   16b3c:	1d18      	adds	r0, r3, #4
   16b3e:	68bb      	ldr	r3, [r7, #8]
   16b40:	009b      	lsls	r3, r3, #2
   16b42:	f043 0302 	orr.w	r3, r3, #2
   16b46:	2202      	movs	r2, #2
   16b48:	4619      	mov	r1, r3
   16b4a:	f7f6 fcf9 	bl	d540 <mp_map_lookup>
   16b4e:	6138      	str	r0, [r7, #16]
        return elem != NULL;
   16b50:	693b      	ldr	r3, [r7, #16]
   16b52:	2b00      	cmp	r3, #0
   16b54:	bf14      	ite	ne
   16b56:	2301      	movne	r3, #1
   16b58:	2300      	moveq	r3, #0
   16b5a:	b2db      	uxtb	r3, r3
   16b5c:	e00d      	b.n	16b7a <mp_obj_instance_store_attr+0x62>
    } else {
        // store attribute
        mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
   16b5e:	697b      	ldr	r3, [r7, #20]
   16b60:	1d18      	adds	r0, r3, #4
   16b62:	68bb      	ldr	r3, [r7, #8]
   16b64:	009b      	lsls	r3, r3, #2
   16b66:	f043 0302 	orr.w	r3, r3, #2
   16b6a:	2201      	movs	r2, #1
   16b6c:	4619      	mov	r1, r3
   16b6e:	f7f6 fce7 	bl	d540 <mp_map_lookup>
   16b72:	4602      	mov	r2, r0
   16b74:	687b      	ldr	r3, [r7, #4]
   16b76:	6053      	str	r3, [r2, #4]
        return true;
   16b78:	2301      	movs	r3, #1
    }
}
   16b7a:	4618      	mov	r0, r3
   16b7c:	3718      	adds	r7, #24
   16b7e:	46bd      	mov	sp, r7
   16b80:	bd80      	pop	{r7, pc}
   16b82:	bf00      	nop

00016b84 <mp_obj_instance_attr>:

STATIC void mp_obj_instance_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   16b84:	b580      	push	{r7, lr}
   16b86:	b084      	sub	sp, #16
   16b88:	af00      	add	r7, sp, #0
   16b8a:	60f8      	str	r0, [r7, #12]
   16b8c:	60b9      	str	r1, [r7, #8]
   16b8e:	607a      	str	r2, [r7, #4]
    if (dest[0] == MP_OBJ_NULL) {
   16b90:	687b      	ldr	r3, [r7, #4]
   16b92:	681b      	ldr	r3, [r3, #0]
   16b94:	2b00      	cmp	r3, #0
   16b96:	d105      	bne.n	16ba4 <mp_obj_instance_attr+0x20>
        mp_obj_instance_load_attr(self_in, attr, dest);
   16b98:	687a      	ldr	r2, [r7, #4]
   16b9a:	68b9      	ldr	r1, [r7, #8]
   16b9c:	68f8      	ldr	r0, [r7, #12]
   16b9e:	f7ff ff49 	bl	16a34 <mp_obj_instance_load_attr>
    } else {
        if (mp_obj_instance_store_attr(self_in, attr, dest[1])) {
            dest[0] = MP_OBJ_NULL; // indicate success
        }
    }
}
   16ba2:	e00d      	b.n	16bc0 <mp_obj_instance_attr+0x3c>
        if (mp_obj_instance_store_attr(self_in, attr, dest[1])) {
   16ba4:	687b      	ldr	r3, [r7, #4]
   16ba6:	3304      	adds	r3, #4
   16ba8:	681b      	ldr	r3, [r3, #0]
   16baa:	461a      	mov	r2, r3
   16bac:	68b9      	ldr	r1, [r7, #8]
   16bae:	68f8      	ldr	r0, [r7, #12]
   16bb0:	f7ff ffb2 	bl	16b18 <mp_obj_instance_store_attr>
   16bb4:	4603      	mov	r3, r0
   16bb6:	2b00      	cmp	r3, #0
   16bb8:	d002      	beq.n	16bc0 <mp_obj_instance_attr+0x3c>
            dest[0] = MP_OBJ_NULL; // indicate success
   16bba:	687b      	ldr	r3, [r7, #4]
   16bbc:	2200      	movs	r2, #0
   16bbe:	601a      	str	r2, [r3, #0]
}
   16bc0:	bf00      	nop
   16bc2:	3710      	adds	r7, #16
   16bc4:	46bd      	mov	sp, r7
   16bc6:	bd80      	pop	{r7, pc}

00016bc8 <instance_subscr>:

STATIC mp_obj_t instance_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   16bc8:	b580      	push	{r7, lr}
   16bca:	b090      	sub	sp, #64	; 0x40
   16bcc:	af00      	add	r7, sp, #0
   16bce:	60f8      	str	r0, [r7, #12]
   16bd0:	60b9      	str	r1, [r7, #8]
   16bd2:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16bd4:	68fb      	ldr	r3, [r7, #12]
   16bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    mp_obj_t member[4] = {MP_OBJ_NULL, MP_OBJ_NULL, index, value};
   16bd8:	2300      	movs	r3, #0
   16bda:	627b      	str	r3, [r7, #36]	; 0x24
   16bdc:	2300      	movs	r3, #0
   16bde:	62bb      	str	r3, [r7, #40]	; 0x28
   16be0:	68bb      	ldr	r3, [r7, #8]
   16be2:	62fb      	str	r3, [r7, #44]	; 0x2c
   16be4:	687b      	ldr	r3, [r7, #4]
   16be6:	633b      	str	r3, [r7, #48]	; 0x30
    struct class_lookup_data lookup = {
   16be8:	f107 0310 	add.w	r3, r7, #16
   16bec:	2200      	movs	r2, #0
   16bee:	601a      	str	r2, [r3, #0]
   16bf0:	605a      	str	r2, [r3, #4]
   16bf2:	609a      	str	r2, [r3, #8]
   16bf4:	60da      	str	r2, [r3, #12]
   16bf6:	611a      	str	r2, [r3, #16]
   16bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16bfa:	613b      	str	r3, [r7, #16]
   16bfc:	2320      	movs	r3, #32
   16bfe:	61bb      	str	r3, [r7, #24]
   16c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
   16c04:	61fb      	str	r3, [r7, #28]
        .obj = self,
        .meth_offset = offsetof(mp_obj_type_t, subscr),
        .dest = member,
        .is_type = false,
    };
    if (value == MP_OBJ_NULL) {
   16c06:	687b      	ldr	r3, [r7, #4]
   16c08:	2b00      	cmp	r3, #0
   16c0a:	d102      	bne.n	16c12 <instance_subscr+0x4a>
        // delete item
        lookup.attr = MP_QSTR___delitem__;
   16c0c:	2309      	movs	r3, #9
   16c0e:	617b      	str	r3, [r7, #20]
   16c10:	e007      	b.n	16c22 <instance_subscr+0x5a>
    } else if (value == MP_OBJ_SENTINEL) {
   16c12:	687b      	ldr	r3, [r7, #4]
   16c14:	2b08      	cmp	r3, #8
   16c16:	d102      	bne.n	16c1e <instance_subscr+0x56>
        // load item
        lookup.attr = MP_QSTR___getitem__;
   16c18:	230f      	movs	r3, #15
   16c1a:	617b      	str	r3, [r7, #20]
   16c1c:	e001      	b.n	16c22 <instance_subscr+0x5a>
    } else {
        // store item
        lookup.attr = MP_QSTR___setitem__;
   16c1e:	2324      	movs	r3, #36	; 0x24
   16c20:	617b      	str	r3, [r7, #20]
    }
    mp_obj_class_lookup(&lookup, self->base.type);
   16c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16c24:	681a      	ldr	r2, [r3, #0]
   16c26:	f107 0310 	add.w	r3, r7, #16
   16c2a:	4611      	mov	r1, r2
   16c2c:	4618      	mov	r0, r3
   16c2e:	f7ff fb85 	bl	1633c <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_SENTINEL) {
   16c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16c34:	2b08      	cmp	r3, #8
   16c36:	d108      	bne.n	16c4a <instance_subscr+0x82>
        return mp_obj_subscr(self->subobj[0], index, value);
   16c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16c3a:	691b      	ldr	r3, [r3, #16]
   16c3c:	687a      	ldr	r2, [r7, #4]
   16c3e:	68b9      	ldr	r1, [r7, #8]
   16c40:	4618      	mov	r0, r3
   16c42:	f7f7 f9cf 	bl	dfe4 <mp_obj_subscr>
   16c46:	4603      	mov	r3, r0
   16c48:	e01c      	b.n	16c84 <instance_subscr+0xbc>
    } else if (member[0] != MP_OBJ_NULL) {
   16c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16c4c:	2b00      	cmp	r3, #0
   16c4e:	d018      	beq.n	16c82 <instance_subscr+0xba>
        size_t n_args = value == MP_OBJ_NULL || value == MP_OBJ_SENTINEL ? 1 : 2;
   16c50:	687b      	ldr	r3, [r7, #4]
   16c52:	2b00      	cmp	r3, #0
   16c54:	d002      	beq.n	16c5c <instance_subscr+0x94>
   16c56:	687b      	ldr	r3, [r7, #4]
   16c58:	2b08      	cmp	r3, #8
   16c5a:	d101      	bne.n	16c60 <instance_subscr+0x98>
   16c5c:	2301      	movs	r3, #1
   16c5e:	e000      	b.n	16c62 <instance_subscr+0x9a>
   16c60:	2302      	movs	r3, #2
   16c62:	63bb      	str	r3, [r7, #56]	; 0x38
        mp_obj_t ret = mp_call_method_n_kw(n_args, 0, member);
   16c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
   16c68:	461a      	mov	r2, r3
   16c6a:	2100      	movs	r1, #0
   16c6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   16c6e:	f7f5 f913 	bl	be98 <mp_call_method_n_kw>
   16c72:	6378      	str	r0, [r7, #52]	; 0x34
        if (value == MP_OBJ_SENTINEL) {
   16c74:	687b      	ldr	r3, [r7, #4]
   16c76:	2b08      	cmp	r3, #8
   16c78:	d101      	bne.n	16c7e <instance_subscr+0xb6>
            return ret;
   16c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16c7c:	e002      	b.n	16c84 <instance_subscr+0xbc>
        } else {
            return mp_const_none;
   16c7e:	4b03      	ldr	r3, [pc, #12]	; (16c8c <instance_subscr+0xc4>)
   16c80:	e000      	b.n	16c84 <instance_subscr+0xbc>
        }
    } else {
        return MP_OBJ_NULL; // op not supported
   16c82:	2300      	movs	r3, #0
    }
}
   16c84:	4618      	mov	r0, r3
   16c86:	3740      	adds	r7, #64	; 0x40
   16c88:	46bd      	mov	sp, r7
   16c8a:	bd80      	pop	{r7, pc}
   16c8c:	000234d4 	.word	0x000234d4

00016c90 <mp_obj_instance_get_call>:

STATIC mp_obj_t mp_obj_instance_get_call(mp_obj_t self_in, mp_obj_t *member) {
   16c90:	b580      	push	{r7, lr}
   16c92:	b088      	sub	sp, #32
   16c94:	af00      	add	r7, sp, #0
   16c96:	6078      	str	r0, [r7, #4]
   16c98:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16c9a:	687b      	ldr	r3, [r7, #4]
   16c9c:	61fb      	str	r3, [r7, #28]
    struct class_lookup_data lookup = {
   16c9e:	69fb      	ldr	r3, [r7, #28]
   16ca0:	60bb      	str	r3, [r7, #8]
   16ca2:	2305      	movs	r3, #5
   16ca4:	60fb      	str	r3, [r7, #12]
   16ca6:	2310      	movs	r3, #16
   16ca8:	613b      	str	r3, [r7, #16]
   16caa:	683b      	ldr	r3, [r7, #0]
   16cac:	617b      	str	r3, [r7, #20]
   16cae:	2300      	movs	r3, #0
   16cb0:	763b      	strb	r3, [r7, #24]
        .attr = MP_QSTR___call__,
        .meth_offset = offsetof(mp_obj_type_t, call),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16cb2:	69fb      	ldr	r3, [r7, #28]
   16cb4:	681a      	ldr	r2, [r3, #0]
   16cb6:	f107 0308 	add.w	r3, r7, #8
   16cba:	4611      	mov	r1, r2
   16cbc:	4618      	mov	r0, r3
   16cbe:	f7ff fb3d 	bl	1633c <mp_obj_class_lookup>
    return member[0];
   16cc2:	683b      	ldr	r3, [r7, #0]
   16cc4:	681b      	ldr	r3, [r3, #0]
}
   16cc6:	4618      	mov	r0, r3
   16cc8:	3720      	adds	r7, #32
   16cca:	46bd      	mov	sp, r7
   16ccc:	bd80      	pop	{r7, pc}
   16cce:	bf00      	nop

00016cd0 <mp_obj_instance_is_callable>:

bool mp_obj_instance_is_callable(mp_obj_t self_in) {
   16cd0:	b580      	push	{r7, lr}
   16cd2:	b084      	sub	sp, #16
   16cd4:	af00      	add	r7, sp, #0
   16cd6:	6078      	str	r0, [r7, #4]
    mp_obj_t member[2] = {MP_OBJ_NULL, MP_OBJ_NULL};
   16cd8:	2300      	movs	r3, #0
   16cda:	60bb      	str	r3, [r7, #8]
   16cdc:	2300      	movs	r3, #0
   16cde:	60fb      	str	r3, [r7, #12]
    return mp_obj_instance_get_call(self_in, member) != MP_OBJ_NULL;
   16ce0:	f107 0308 	add.w	r3, r7, #8
   16ce4:	4619      	mov	r1, r3
   16ce6:	6878      	ldr	r0, [r7, #4]
   16ce8:	f7ff ffd2 	bl	16c90 <mp_obj_instance_get_call>
   16cec:	4603      	mov	r3, r0
   16cee:	2b00      	cmp	r3, #0
   16cf0:	bf14      	ite	ne
   16cf2:	2301      	movne	r3, #1
   16cf4:	2300      	moveq	r3, #0
   16cf6:	b2db      	uxtb	r3, r3
}
   16cf8:	4618      	mov	r0, r3
   16cfa:	3710      	adds	r7, #16
   16cfc:	46bd      	mov	sp, r7
   16cfe:	bd80      	pop	{r7, pc}

00016d00 <mp_obj_instance_call>:

mp_obj_t mp_obj_instance_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16d00:	b580      	push	{r7, lr}
   16d02:	b08a      	sub	sp, #40	; 0x28
   16d04:	af02      	add	r7, sp, #8
   16d06:	60f8      	str	r0, [r7, #12]
   16d08:	60b9      	str	r1, [r7, #8]
   16d0a:	607a      	str	r2, [r7, #4]
   16d0c:	603b      	str	r3, [r7, #0]
    mp_obj_t member[2] = {MP_OBJ_NULL, MP_OBJ_NULL};
   16d0e:	2300      	movs	r3, #0
   16d10:	613b      	str	r3, [r7, #16]
   16d12:	2300      	movs	r3, #0
   16d14:	617b      	str	r3, [r7, #20]
    mp_obj_t call = mp_obj_instance_get_call(self_in, member);
   16d16:	f107 0310 	add.w	r3, r7, #16
   16d1a:	4619      	mov	r1, r3
   16d1c:	68f8      	ldr	r0, [r7, #12]
   16d1e:	f7ff ffb7 	bl	16c90 <mp_obj_instance_get_call>
   16d22:	61f8      	str	r0, [r7, #28]
    if (call == MP_OBJ_NULL) {
   16d24:	69fb      	ldr	r3, [r7, #28]
   16d26:	2b00      	cmp	r3, #0
   16d28:	d102      	bne.n	16d30 <mp_obj_instance_call+0x30>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object not callable");
   16d2a:	480f      	ldr	r0, [pc, #60]	; (16d68 <mp_obj_instance_call+0x68>)
   16d2c:	f7f6 f944 	bl	cfb8 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object isn't callable", mp_obj_get_type_str(self_in)));
        }
    }
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16d30:	68fb      	ldr	r3, [r7, #12]
   16d32:	61bb      	str	r3, [r7, #24]
    if (call == MP_OBJ_SENTINEL) {
   16d34:	69fb      	ldr	r3, [r7, #28]
   16d36:	2b08      	cmp	r3, #8
   16d38:	d108      	bne.n	16d4c <mp_obj_instance_call+0x4c>
        return mp_call_function_n_kw(self->subobj[0], n_args, n_kw, args);
   16d3a:	69bb      	ldr	r3, [r7, #24]
   16d3c:	6918      	ldr	r0, [r3, #16]
   16d3e:	683b      	ldr	r3, [r7, #0]
   16d40:	687a      	ldr	r2, [r7, #4]
   16d42:	68b9      	ldr	r1, [r7, #8]
   16d44:	f7f5 f886 	bl	be54 <mp_call_function_n_kw>
   16d48:	4603      	mov	r3, r0
   16d4a:	e008      	b.n	16d5e <mp_obj_instance_call+0x5e>
    }

    return mp_call_method_self_n_kw(member[0], member[1], n_args, n_kw, args);
   16d4c:	6938      	ldr	r0, [r7, #16]
   16d4e:	6979      	ldr	r1, [r7, #20]
   16d50:	683b      	ldr	r3, [r7, #0]
   16d52:	9300      	str	r3, [sp, #0]
   16d54:	687b      	ldr	r3, [r7, #4]
   16d56:	68ba      	ldr	r2, [r7, #8]
   16d58:	f7f7 fa84 	bl	e264 <mp_call_method_self_n_kw>
   16d5c:	4603      	mov	r3, r0
}
   16d5e:	4618      	mov	r0, r3
   16d60:	3720      	adds	r7, #32
   16d62:	46bd      	mov	sp, r7
   16d64:	bd80      	pop	{r7, pc}
   16d66:	bf00      	nop
   16d68:	00024034 	.word	0x00024034

00016d6c <instance_getiter>:

STATIC mp_obj_t instance_getiter(mp_obj_t self_in, mp_obj_iter_buf_t *iter_buf) {
   16d6c:	b580      	push	{r7, lr}
   16d6e:	b08c      	sub	sp, #48	; 0x30
   16d70:	af00      	add	r7, sp, #0
   16d72:	6078      	str	r0, [r7, #4]
   16d74:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16d76:	687b      	ldr	r3, [r7, #4]
   16d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_obj_t member[2] = {MP_OBJ_NULL};
   16d7a:	f107 0320 	add.w	r3, r7, #32
   16d7e:	2200      	movs	r2, #0
   16d80:	601a      	str	r2, [r3, #0]
   16d82:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16d86:	60fb      	str	r3, [r7, #12]
   16d88:	2317      	movs	r3, #23
   16d8a:	613b      	str	r3, [r7, #16]
   16d8c:	2324      	movs	r3, #36	; 0x24
   16d8e:	617b      	str	r3, [r7, #20]
   16d90:	f107 0320 	add.w	r3, r7, #32
   16d94:	61bb      	str	r3, [r7, #24]
   16d96:	2300      	movs	r3, #0
   16d98:	773b      	strb	r3, [r7, #28]
        .attr = MP_QSTR___iter__,
        .meth_offset = offsetof(mp_obj_type_t, getiter),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16d9c:	681a      	ldr	r2, [r3, #0]
   16d9e:	f107 030c 	add.w	r3, r7, #12
   16da2:	4611      	mov	r1, r2
   16da4:	4618      	mov	r0, r3
   16da6:	f7ff fac9 	bl	1633c <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_NULL) {
   16daa:	6a3b      	ldr	r3, [r7, #32]
   16dac:	2b00      	cmp	r3, #0
   16dae:	d101      	bne.n	16db4 <instance_getiter+0x48>
        return MP_OBJ_NULL;
   16db0:	2300      	movs	r3, #0
   16db2:	e019      	b.n	16de8 <instance_getiter+0x7c>
    } else if (member[0] == MP_OBJ_SENTINEL) {
   16db4:	6a3b      	ldr	r3, [r7, #32]
   16db6:	2b08      	cmp	r3, #8
   16db8:	d10e      	bne.n	16dd8 <instance_getiter+0x6c>
        mp_obj_type_t *type = mp_obj_get_type(self->subobj[0]);
   16dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16dbc:	691b      	ldr	r3, [r3, #16]
   16dbe:	4618      	mov	r0, r3
   16dc0:	f7f6 fd68 	bl	d894 <mp_obj_get_type>
   16dc4:	62b8      	str	r0, [r7, #40]	; 0x28
        return type->getiter(self->subobj[0], iter_buf);
   16dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16dcc:	6912      	ldr	r2, [r2, #16]
   16dce:	6839      	ldr	r1, [r7, #0]
   16dd0:	4610      	mov	r0, r2
   16dd2:	4798      	blx	r3
   16dd4:	4603      	mov	r3, r0
   16dd6:	e007      	b.n	16de8 <instance_getiter+0x7c>
    } else {
        return mp_call_method_n_kw(0, 0, member);
   16dd8:	f107 0320 	add.w	r3, r7, #32
   16ddc:	461a      	mov	r2, r3
   16dde:	2100      	movs	r1, #0
   16de0:	2000      	movs	r0, #0
   16de2:	f7f5 f859 	bl	be98 <mp_call_method_n_kw>
   16de6:	4603      	mov	r3, r0
    }
}
   16de8:	4618      	mov	r0, r3
   16dea:	3730      	adds	r7, #48	; 0x30
   16dec:	46bd      	mov	sp, r7
   16dee:	bd80      	pop	{r7, pc}

00016df0 <instance_get_buffer>:

STATIC mp_int_t instance_get_buffer(mp_obj_t self_in, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
   16df0:	b580      	push	{r7, lr}
   16df2:	b08e      	sub	sp, #56	; 0x38
   16df4:	af00      	add	r7, sp, #0
   16df6:	60f8      	str	r0, [r7, #12]
   16df8:	60b9      	str	r1, [r7, #8]
   16dfa:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16dfc:	68fb      	ldr	r3, [r7, #12]
   16dfe:	637b      	str	r3, [r7, #52]	; 0x34
    mp_obj_t member[2] = {MP_OBJ_NULL};
   16e00:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16e04:	2200      	movs	r2, #0
   16e06:	601a      	str	r2, [r3, #0]
   16e08:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16e0c:	617b      	str	r3, [r7, #20]
   16e0e:	2301      	movs	r3, #1
   16e10:	61bb      	str	r3, [r7, #24]
   16e12:	232c      	movs	r3, #44	; 0x2c
   16e14:	61fb      	str	r3, [r7, #28]
   16e16:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16e1a:	623b      	str	r3, [r7, #32]
   16e1c:	2300      	movs	r3, #0
   16e1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .attr = MP_QSTR_, // don't actually look for a method
        .meth_offset = offsetof(mp_obj_type_t, buffer_p.get_buffer),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16e24:	681a      	ldr	r2, [r3, #0]
   16e26:	f107 0314 	add.w	r3, r7, #20
   16e2a:	4611      	mov	r1, r2
   16e2c:	4618      	mov	r0, r3
   16e2e:	f7ff fa85 	bl	1633c <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_SENTINEL) {
   16e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16e34:	2b08      	cmp	r3, #8
   16e36:	d10e      	bne.n	16e56 <instance_get_buffer+0x66>
        mp_obj_type_t *type = mp_obj_get_type(self->subobj[0]);
   16e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16e3a:	691b      	ldr	r3, [r3, #16]
   16e3c:	4618      	mov	r0, r3
   16e3e:	f7f6 fd29 	bl	d894 <mp_obj_get_type>
   16e42:	6338      	str	r0, [r7, #48]	; 0x30
        return type->buffer_p.get_buffer(self->subobj[0], bufinfo, flags);
   16e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16e48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16e4a:	6910      	ldr	r0, [r2, #16]
   16e4c:	687a      	ldr	r2, [r7, #4]
   16e4e:	68b9      	ldr	r1, [r7, #8]
   16e50:	4798      	blx	r3
   16e52:	4603      	mov	r3, r0
   16e54:	e000      	b.n	16e58 <instance_get_buffer+0x68>
    } else {
        return 1; // object does not support buffer protocol
   16e56:	2301      	movs	r3, #1
    }
}
   16e58:	4618      	mov	r0, r3
   16e5a:	3738      	adds	r7, #56	; 0x38
   16e5c:	46bd      	mov	sp, r7
   16e5e:	bd80      	pop	{r7, pc}

00016e60 <type_print>:
    #endif
    return false;
}
#endif

STATIC void type_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   16e60:	b580      	push	{r7, lr}
   16e62:	b086      	sub	sp, #24
   16e64:	af00      	add	r7, sp, #0
   16e66:	60f8      	str	r0, [r7, #12]
   16e68:	60b9      	str	r1, [r7, #8]
   16e6a:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
   16e6c:	68bb      	ldr	r3, [r7, #8]
   16e6e:	617b      	str	r3, [r7, #20]
    mp_printf(print, "<class '%q'>", self->name);
   16e70:	697b      	ldr	r3, [r7, #20]
   16e72:	88db      	ldrh	r3, [r3, #6]
   16e74:	461a      	mov	r2, r3
   16e76:	4904      	ldr	r1, [pc, #16]	; (16e88 <type_print+0x28>)
   16e78:	68f8      	ldr	r0, [r7, #12]
   16e7a:	f7eb f8dd 	bl	2038 <mp_printf>
}
   16e7e:	bf00      	nop
   16e80:	3718      	adds	r7, #24
   16e82:	46bd      	mov	sp, r7
   16e84:	bd80      	pop	{r7, pc}
   16e86:	bf00      	nop
   16e88:	00024048 	.word	0x00024048

00016e8c <type_make_new>:

STATIC mp_obj_t type_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16e8c:	b580      	push	{r7, lr}
   16e8e:	b086      	sub	sp, #24
   16e90:	af02      	add	r7, sp, #8
   16e92:	60f8      	str	r0, [r7, #12]
   16e94:	60b9      	str	r1, [r7, #8]
   16e96:	607a      	str	r2, [r7, #4]
   16e98:	603b      	str	r3, [r7, #0]
    (void)type_in;

    mp_arg_check_num(n_args, n_kw, 1, 3, false);
   16e9a:	2300      	movs	r3, #0
   16e9c:	9300      	str	r3, [sp, #0]
   16e9e:	2303      	movs	r3, #3
   16ea0:	2201      	movs	r2, #1
   16ea2:	6879      	ldr	r1, [r7, #4]
   16ea4:	68b8      	ldr	r0, [r7, #8]
   16ea6:	f7ff f95d 	bl	16164 <mp_arg_check_num>

    switch (n_args) {
   16eaa:	68bb      	ldr	r3, [r7, #8]
   16eac:	2b01      	cmp	r3, #1
   16eae:	d002      	beq.n	16eb6 <type_make_new+0x2a>
   16eb0:	2b03      	cmp	r3, #3
   16eb2:	d007      	beq.n	16ec4 <type_make_new+0x38>
   16eb4:	e016      	b.n	16ee4 <type_make_new+0x58>
        case 1:
            return MP_OBJ_FROM_PTR(mp_obj_get_type(args[0]));
   16eb6:	683b      	ldr	r3, [r7, #0]
   16eb8:	681b      	ldr	r3, [r3, #0]
   16eba:	4618      	mov	r0, r3
   16ebc:	f7f6 fcea 	bl	d894 <mp_obj_get_type>
   16ec0:	4603      	mov	r3, r0
   16ec2:	e012      	b.n	16eea <type_make_new+0x5e>

        case 3:
            // args[0] = name
            // args[1] = bases tuple
            // args[2] = locals dict
            return mp_obj_new_type(mp_obj_str_get_qstr(args[0]), args[1], args[2]);
   16ec4:	683b      	ldr	r3, [r7, #0]
   16ec6:	681b      	ldr	r3, [r3, #0]
   16ec8:	4618      	mov	r0, r3
   16eca:	f7fe fc2b 	bl	15724 <mp_obj_str_get_qstr>
   16ece:	683b      	ldr	r3, [r7, #0]
   16ed0:	3304      	adds	r3, #4
   16ed2:	6819      	ldr	r1, [r3, #0]
   16ed4:	683b      	ldr	r3, [r7, #0]
   16ed6:	3308      	adds	r3, #8
   16ed8:	681b      	ldr	r3, [r3, #0]
   16eda:	461a      	mov	r2, r3
   16edc:	f000 f8b4 	bl	17048 <mp_obj_new_type>
   16ee0:	4603      	mov	r3, r0
   16ee2:	e002      	b.n	16eea <type_make_new+0x5e>

        default:
            mp_raise_TypeError("type takes 1 or 3 arguments");
   16ee4:	4803      	ldr	r0, [pc, #12]	; (16ef4 <type_make_new+0x68>)
   16ee6:	f7f6 f867 	bl	cfb8 <mp_raise_TypeError>
    }
}
   16eea:	4618      	mov	r0, r3
   16eec:	3710      	adds	r7, #16
   16eee:	46bd      	mov	sp, r7
   16ef0:	bd80      	pop	{r7, pc}
   16ef2:	bf00      	nop
   16ef4:	00024058 	.word	0x00024058

00016ef8 <type_call>:

STATIC mp_obj_t type_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16ef8:	b590      	push	{r4, r7, lr}
   16efa:	b087      	sub	sp, #28
   16efc:	af00      	add	r7, sp, #0
   16efe:	60f8      	str	r0, [r7, #12]
   16f00:	60b9      	str	r1, [r7, #8]
   16f02:	607a      	str	r2, [r7, #4]
   16f04:	603b      	str	r3, [r7, #0]
    // instantiate an instance of a class

    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
   16f06:	68fb      	ldr	r3, [r7, #12]
   16f08:	617b      	str	r3, [r7, #20]

    if (self->make_new == NULL) {
   16f0a:	697b      	ldr	r3, [r7, #20]
   16f0c:	68db      	ldr	r3, [r3, #12]
   16f0e:	2b00      	cmp	r3, #0
   16f10:	d102      	bne.n	16f18 <type_call+0x20>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("cannot create instance");
   16f12:	4808      	ldr	r0, [pc, #32]	; (16f34 <type_call+0x3c>)
   16f14:	f7f6 f850 	bl	cfb8 <mp_raise_TypeError>
                "cannot create '%q' instances", self->name));
        }
    }

    // make new instance
    mp_obj_t o = self->make_new(self, n_args, n_kw, args);
   16f18:	697b      	ldr	r3, [r7, #20]
   16f1a:	68dc      	ldr	r4, [r3, #12]
   16f1c:	683b      	ldr	r3, [r7, #0]
   16f1e:	687a      	ldr	r2, [r7, #4]
   16f20:	68b9      	ldr	r1, [r7, #8]
   16f22:	6978      	ldr	r0, [r7, #20]
   16f24:	47a0      	blx	r4
   16f26:	6138      	str	r0, [r7, #16]

    // return new instance
    return o;
   16f28:	693b      	ldr	r3, [r7, #16]
}
   16f2a:	4618      	mov	r0, r3
   16f2c:	371c      	adds	r7, #28
   16f2e:	46bd      	mov	sp, r7
   16f30:	bd90      	pop	{r4, r7, pc}
   16f32:	bf00      	nop
   16f34:	00024074 	.word	0x00024074

00016f38 <type_attr>:

STATIC void type_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   16f38:	b580      	push	{r7, lr}
   16f3a:	b08e      	sub	sp, #56	; 0x38
   16f3c:	af00      	add	r7, sp, #0
   16f3e:	60f8      	str	r0, [r7, #12]
   16f40:	60b9      	str	r1, [r7, #8]
   16f42:	607a      	str	r2, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_type));
   16f44:	68f8      	ldr	r0, [r7, #12]
   16f46:	f7ff f8fb 	bl	16140 <MP_OBJ_IS_OBJ>
   16f4a:	4603      	mov	r3, r0
   16f4c:	f083 0301 	eor.w	r3, r3, #1
   16f50:	b2db      	uxtb	r3, r3
   16f52:	2b00      	cmp	r3, #0
   16f54:	d104      	bne.n	16f60 <type_attr+0x28>
   16f56:	68fb      	ldr	r3, [r7, #12]
   16f58:	681b      	ldr	r3, [r3, #0]
   16f5a:	4a35      	ldr	r2, [pc, #212]	; (17030 <type_attr+0xf8>)
   16f5c:	4293      	cmp	r3, r2
   16f5e:	d006      	beq.n	16f6e <type_attr+0x36>
   16f60:	4b34      	ldr	r3, [pc, #208]	; (17034 <type_attr+0xfc>)
   16f62:	4a35      	ldr	r2, [pc, #212]	; (17038 <type_attr+0x100>)
   16f64:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
   16f68:	4834      	ldr	r0, [pc, #208]	; (1703c <type_attr+0x104>)
   16f6a:	f004 fc0b 	bl	1b784 <__assert_func>
    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
   16f6e:	68fb      	ldr	r3, [r7, #12]
   16f70:	637b      	str	r3, [r7, #52]	; 0x34

    if (dest[0] == MP_OBJ_NULL) {
   16f72:	687b      	ldr	r3, [r7, #4]
   16f74:	681b      	ldr	r3, [r3, #0]
   16f76:	2b00      	cmp	r3, #0
   16f78:	d111      	bne.n	16f9e <type_attr+0x66>
        if (attr == MP_QSTR___name__) {
            dest[0] = MP_OBJ_NEW_QSTR(self->name);
            return;
        }
        #endif
        struct class_lookup_data lookup = {
   16f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16f7c:	617b      	str	r3, [r7, #20]
   16f7e:	68bb      	ldr	r3, [r7, #8]
   16f80:	61bb      	str	r3, [r7, #24]
   16f82:	2300      	movs	r3, #0
   16f84:	61fb      	str	r3, [r7, #28]
   16f86:	687b      	ldr	r3, [r7, #4]
   16f88:	623b      	str	r3, [r7, #32]
   16f8a:	2301      	movs	r3, #1
   16f8c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            .attr = attr,
            .meth_offset = 0,
            .dest = dest,
            .is_type = true,
        };
        mp_obj_class_lookup(&lookup, self);
   16f90:	f107 0314 	add.w	r3, r7, #20
   16f94:	6b79      	ldr	r1, [r7, #52]	; 0x34
   16f96:	4618      	mov	r0, r3
   16f98:	f7ff f9d0 	bl	1633c <mp_obj_class_lookup>
   16f9c:	e044      	b.n	17028 <type_attr+0xf0>
    } else {
        // delete/store attribute

        if (self->locals_dict != NULL) {
   16f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16fa2:	2b00      	cmp	r3, #0
   16fa4:	d040      	beq.n	17028 <type_attr+0xf0>
            assert(self->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
   16fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16faa:	681b      	ldr	r3, [r3, #0]
   16fac:	4a24      	ldr	r2, [pc, #144]	; (17040 <type_attr+0x108>)
   16fae:	4293      	cmp	r3, r2
   16fb0:	d006      	beq.n	16fc0 <type_attr+0x88>
   16fb2:	4b24      	ldr	r3, [pc, #144]	; (17044 <type_attr+0x10c>)
   16fb4:	4a20      	ldr	r2, [pc, #128]	; (17038 <type_attr+0x100>)
   16fb6:	f240 4103 	movw	r1, #1027	; 0x403
   16fba:	4820      	ldr	r0, [pc, #128]	; (1703c <type_attr+0x104>)
   16fbc:	f004 fbe2 	bl	1b784 <__assert_func>
            mp_map_t *locals_map = &self->locals_dict->map;
   16fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16fc4:	3304      	adds	r3, #4
   16fc6:	633b      	str	r3, [r7, #48]	; 0x30
            if (locals_map->is_fixed) {
   16fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16fca:	781b      	ldrb	r3, [r3, #0]
   16fcc:	f003 0302 	and.w	r3, r3, #2
   16fd0:	b2db      	uxtb	r3, r3
   16fd2:	2b00      	cmp	r3, #0
   16fd4:	d127      	bne.n	17026 <type_attr+0xee>
                // can't apply delete/store to a fixed map
                return;
            }
            if (dest[1] == MP_OBJ_NULL) {
   16fd6:	687b      	ldr	r3, [r7, #4]
   16fd8:	3304      	adds	r3, #4
   16fda:	681b      	ldr	r3, [r3, #0]
   16fdc:	2b00      	cmp	r3, #0
   16fde:	d110      	bne.n	17002 <type_attr+0xca>
                // delete attribute
                mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_REMOVE_IF_FOUND);
   16fe0:	68bb      	ldr	r3, [r7, #8]
   16fe2:	009b      	lsls	r3, r3, #2
   16fe4:	f043 0302 	orr.w	r3, r3, #2
   16fe8:	2202      	movs	r2, #2
   16fea:	4619      	mov	r1, r3
   16fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
   16fee:	f7f6 faa7 	bl	d540 <mp_map_lookup>
   16ff2:	62f8      	str	r0, [r7, #44]	; 0x2c
                if (elem != NULL) {
   16ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16ff6:	2b00      	cmp	r3, #0
   16ff8:	d016      	beq.n	17028 <type_attr+0xf0>
                    dest[0] = MP_OBJ_NULL; // indicate success
   16ffa:	687b      	ldr	r3, [r7, #4]
   16ffc:	2200      	movs	r2, #0
   16ffe:	601a      	str	r2, [r3, #0]
   17000:	e012      	b.n	17028 <type_attr+0xf0>
                    }
                }
                #endif

                // store attribute
                mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
   17002:	68bb      	ldr	r3, [r7, #8]
   17004:	009b      	lsls	r3, r3, #2
   17006:	f043 0302 	orr.w	r3, r3, #2
   1700a:	2201      	movs	r2, #1
   1700c:	4619      	mov	r1, r3
   1700e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   17010:	f7f6 fa96 	bl	d540 <mp_map_lookup>
   17014:	62b8      	str	r0, [r7, #40]	; 0x28
                elem->value = dest[1];
   17016:	687b      	ldr	r3, [r7, #4]
   17018:	685a      	ldr	r2, [r3, #4]
   1701a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1701c:	605a      	str	r2, [r3, #4]
                dest[0] = MP_OBJ_NULL; // indicate success
   1701e:	687b      	ldr	r3, [r7, #4]
   17020:	2200      	movs	r2, #0
   17022:	601a      	str	r2, [r3, #0]
   17024:	e000      	b.n	17028 <type_attr+0xf0>
                return;
   17026:	bf00      	nop
            }
        }
    }
}
   17028:	3738      	adds	r7, #56	; 0x38
   1702a:	46bd      	mov	sp, r7
   1702c:	bd80      	pop	{r7, pc}
   1702e:	bf00      	nop
   17030:	000240e4 	.word	0x000240e4
   17034:	0002408c 	.word	0x0002408c
   17038:	000243e4 	.word	0x000243e4
   1703c:	00023ed4 	.word	0x00023ed4
   17040:	00022104 	.word	0x00022104
   17044:	000240b4 	.word	0x000240b4

00017048 <mp_obj_new_type>:
    .call = type_call,
    .unary_op = mp_generic_unary_op,
    .attr = type_attr,
};

mp_obj_t mp_obj_new_type(qstr name, mp_obj_t bases_tuple, mp_obj_t locals_dict) {
   17048:	b580      	push	{r7, lr}
   1704a:	b08e      	sub	sp, #56	; 0x38
   1704c:	af00      	add	r7, sp, #0
   1704e:	60f8      	str	r0, [r7, #12]
   17050:	60b9      	str	r1, [r7, #8]
   17052:	607a      	str	r2, [r7, #4]
    // Verify input objects have expected type
    if (!MP_OBJ_IS_TYPE(bases_tuple, &mp_type_tuple)) {
   17054:	68b8      	ldr	r0, [r7, #8]
   17056:	f7ff f873 	bl	16140 <MP_OBJ_IS_OBJ>
   1705a:	4603      	mov	r3, r0
   1705c:	f083 0301 	eor.w	r3, r3, #1
   17060:	b2db      	uxtb	r3, r3
   17062:	2b00      	cmp	r3, #0
   17064:	d104      	bne.n	17070 <mp_obj_new_type+0x28>
   17066:	68bb      	ldr	r3, [r7, #8]
   17068:	681b      	ldr	r3, [r3, #0]
   1706a:	4a65      	ldr	r2, [pc, #404]	; (17200 <mp_obj_new_type+0x1b8>)
   1706c:	4293      	cmp	r3, r2
   1706e:	d002      	beq.n	17076 <mp_obj_new_type+0x2e>
        mp_raise_TypeError(NULL);
   17070:	2000      	movs	r0, #0
   17072:	f7f5 ffa1 	bl	cfb8 <mp_raise_TypeError>
    }
    if (!MP_OBJ_IS_TYPE(locals_dict, &mp_type_dict)) {
   17076:	6878      	ldr	r0, [r7, #4]
   17078:	f7ff f862 	bl	16140 <MP_OBJ_IS_OBJ>
   1707c:	4603      	mov	r3, r0
   1707e:	f083 0301 	eor.w	r3, r3, #1
   17082:	b2db      	uxtb	r3, r3
   17084:	2b00      	cmp	r3, #0
   17086:	d104      	bne.n	17092 <mp_obj_new_type+0x4a>
   17088:	687b      	ldr	r3, [r7, #4]
   1708a:	681b      	ldr	r3, [r3, #0]
   1708c:	4a5d      	ldr	r2, [pc, #372]	; (17204 <mp_obj_new_type+0x1bc>)
   1708e:	4293      	cmp	r3, r2
   17090:	d002      	beq.n	17098 <mp_obj_new_type+0x50>
        mp_raise_TypeError(NULL);
   17092:	2000      	movs	r0, #0
   17094:	f7f5 ff90 	bl	cfb8 <mp_raise_TypeError>
    }

    // TODO might need to make a copy of locals_dict; at least that's how CPython does it

    // Basic validation of base classes
    uint16_t base_flags = 0;
   17098:	2300      	movs	r3, #0
   1709a:	867b      	strh	r3, [r7, #50]	; 0x32
    size_t bases_len;
    mp_obj_t *bases_items;
    mp_obj_tuple_get(bases_tuple, &bases_len, &bases_items);
   1709c:	f107 0214 	add.w	r2, r7, #20
   170a0:	f107 0318 	add.w	r3, r7, #24
   170a4:	4619      	mov	r1, r3
   170a6:	68b8      	ldr	r0, [r7, #8]
   170a8:	f7fe ff9a 	bl	15fe0 <mp_obj_tuple_get>
    for (size_t i = 0; i < bases_len; i++) {
   170ac:	2300      	movs	r3, #0
   170ae:	637b      	str	r3, [r7, #52]	; 0x34
   170b0:	e029      	b.n	17106 <mp_obj_new_type+0xbe>
        if (!MP_OBJ_IS_TYPE(bases_items[i], &mp_type_type)) {
   170b2:	697a      	ldr	r2, [r7, #20]
   170b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   170b6:	009b      	lsls	r3, r3, #2
   170b8:	4413      	add	r3, r2
   170ba:	681b      	ldr	r3, [r3, #0]
   170bc:	4618      	mov	r0, r3
   170be:	f7ff f83f 	bl	16140 <MP_OBJ_IS_OBJ>
   170c2:	4603      	mov	r3, r0
   170c4:	f083 0301 	eor.w	r3, r3, #1
   170c8:	b2db      	uxtb	r3, r3
   170ca:	2b00      	cmp	r3, #0
   170cc:	d108      	bne.n	170e0 <mp_obj_new_type+0x98>
   170ce:	697a      	ldr	r2, [r7, #20]
   170d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   170d2:	009b      	lsls	r3, r3, #2
   170d4:	4413      	add	r3, r2
   170d6:	681b      	ldr	r3, [r3, #0]
   170d8:	681b      	ldr	r3, [r3, #0]
   170da:	4a4b      	ldr	r2, [pc, #300]	; (17208 <mp_obj_new_type+0x1c0>)
   170dc:	4293      	cmp	r3, r2
   170de:	d002      	beq.n	170e6 <mp_obj_new_type+0x9e>
            mp_raise_TypeError(NULL);
   170e0:	2000      	movs	r0, #0
   170e2:	f7f5 ff69 	bl	cfb8 <mp_raise_TypeError>
        }
        mp_obj_type_t *t = MP_OBJ_TO_PTR(bases_items[i]);
   170e6:	697a      	ldr	r2, [r7, #20]
   170e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   170ea:	009b      	lsls	r3, r3, #2
   170ec:	4413      	add	r3, r2
   170ee:	681b      	ldr	r3, [r3, #0]
   170f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        // TODO: Verify with CPy, tested on function type
        if (t->make_new == NULL) {
   170f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   170f4:	68db      	ldr	r3, [r3, #12]
   170f6:	2b00      	cmp	r3, #0
   170f8:	d102      	bne.n	17100 <mp_obj_new_type+0xb8>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("type isn't an acceptable base type");
   170fa:	4844      	ldr	r0, [pc, #272]	; (1720c <mp_obj_new_type+0x1c4>)
   170fc:	f7f5 ff5c 	bl	cfb8 <mp_raise_TypeError>
    for (size_t i = 0; i < bases_len; i++) {
   17100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17102:	3301      	adds	r3, #1
   17104:	637b      	str	r3, [r7, #52]	; 0x34
   17106:	69bb      	ldr	r3, [r7, #24]
   17108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1710a:	429a      	cmp	r2, r3
   1710c:	d3d1      	bcc.n	170b2 <mp_obj_new_type+0x6a>
            base_flags |= t->flags & TYPE_FLAG_HAS_SPECIAL_ACCESSORS;
        }
        #endif
    }

    mp_obj_type_t *o = m_new0(mp_obj_type_t, 1);
   1710e:	203c      	movs	r0, #60	; 0x3c
   17110:	f7e9 f942 	bl	398 <m_malloc0>
   17114:	62b8      	str	r0, [r7, #40]	; 0x28
    o->base.type = &mp_type_type;
   17116:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17118:	4a3b      	ldr	r2, [pc, #236]	; (17208 <mp_obj_new_type+0x1c0>)
   1711a:	601a      	str	r2, [r3, #0]
    o->flags = base_flags;
   1711c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1711e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   17120:	809a      	strh	r2, [r3, #4]
    o->name = name;
   17122:	68fb      	ldr	r3, [r7, #12]
   17124:	b29a      	uxth	r2, r3
   17126:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17128:	80da      	strh	r2, [r3, #6]
    o->print = instance_print;
   1712a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1712c:	4a38      	ldr	r2, [pc, #224]	; (17210 <mp_obj_new_type+0x1c8>)
   1712e:	609a      	str	r2, [r3, #8]
    o->make_new = mp_obj_instance_make_new;
   17130:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17132:	4a38      	ldr	r2, [pc, #224]	; (17214 <mp_obj_new_type+0x1cc>)
   17134:	60da      	str	r2, [r3, #12]
    o->call = mp_obj_instance_call;
   17136:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17138:	4a37      	ldr	r2, [pc, #220]	; (17218 <mp_obj_new_type+0x1d0>)
   1713a:	611a      	str	r2, [r3, #16]
    o->unary_op = instance_unary_op;
   1713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1713e:	4a37      	ldr	r2, [pc, #220]	; (1721c <mp_obj_new_type+0x1d4>)
   17140:	615a      	str	r2, [r3, #20]
    o->binary_op = instance_binary_op;
   17142:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17144:	4a36      	ldr	r2, [pc, #216]	; (17220 <mp_obj_new_type+0x1d8>)
   17146:	619a      	str	r2, [r3, #24]
    o->attr = mp_obj_instance_attr;
   17148:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1714a:	4a36      	ldr	r2, [pc, #216]	; (17224 <mp_obj_new_type+0x1dc>)
   1714c:	61da      	str	r2, [r3, #28]
    o->subscr = instance_subscr;
   1714e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17150:	4a35      	ldr	r2, [pc, #212]	; (17228 <mp_obj_new_type+0x1e0>)
   17152:	621a      	str	r2, [r3, #32]
    o->getiter = instance_getiter;
   17154:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17156:	4a35      	ldr	r2, [pc, #212]	; (1722c <mp_obj_new_type+0x1e4>)
   17158:	625a      	str	r2, [r3, #36]	; 0x24
    //o->iternext = ; not implemented
    o->buffer_p.get_buffer = instance_get_buffer;
   1715a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1715c:	4a34      	ldr	r2, [pc, #208]	; (17230 <mp_obj_new_type+0x1e8>)
   1715e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (bases_len > 0) {
   17160:	69bb      	ldr	r3, [r7, #24]
   17162:	2b00      	cmp	r3, #0
   17164:	d00f      	beq.n	17186 <mp_obj_new_type+0x13e>
        // Inherit protocol from a base class. This allows to define an
        // abstract base class which would translate C-level protocol to
        // Python method calls, and any subclass inheriting from it will
        // support this feature.
        o->protocol = ((mp_obj_type_t*)MP_OBJ_TO_PTR(bases_items[0]))->protocol;
   17166:	697b      	ldr	r3, [r7, #20]
   17168:	681b      	ldr	r3, [r3, #0]
   1716a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1716e:	631a      	str	r2, [r3, #48]	; 0x30

        if (bases_len >= 2) {
   17170:	69bb      	ldr	r3, [r7, #24]
   17172:	2b01      	cmp	r3, #1
   17174:	d903      	bls.n	1717e <mp_obj_new_type+0x136>
            #if MICROPY_MULTIPLE_INHERITANCE
            o->parent = MP_OBJ_TO_PTR(bases_tuple);
   17176:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17178:	68ba      	ldr	r2, [r7, #8]
   1717a:	635a      	str	r2, [r3, #52]	; 0x34
   1717c:	e003      	b.n	17186 <mp_obj_new_type+0x13e>
            #else
            mp_raise_NotImplementedError("multiple inheritance not supported");
            #endif
        } else {
            o->parent = MP_OBJ_TO_PTR(bases_items[0]);
   1717e:	697b      	ldr	r3, [r7, #20]
   17180:	681a      	ldr	r2, [r3, #0]
   17182:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17184:	635a      	str	r2, [r3, #52]	; 0x34
        }
    }

    o->locals_dict = MP_OBJ_TO_PTR(locals_dict);
   17186:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17188:	687a      	ldr	r2, [r7, #4]
   1718a:	639a      	str	r2, [r3, #56]	; 0x38
        }
    }
    #endif

    const mp_obj_type_t *native_base;
    size_t num_native_bases = instance_count_native_bases(o, &native_base);
   1718c:	f107 0310 	add.w	r3, r7, #16
   17190:	4619      	mov	r1, r3
   17192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   17194:	f7ff f802 	bl	1619c <instance_count_native_bases>
   17198:	4603      	mov	r3, r0
   1719a:	627b      	str	r3, [r7, #36]	; 0x24
    if (num_native_bases > 1) {
   1719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1719e:	2b01      	cmp	r3, #1
   171a0:	d902      	bls.n	171a8 <mp_obj_new_type+0x160>
        mp_raise_TypeError("multiple bases have instance lay-out conflict");
   171a2:	4824      	ldr	r0, [pc, #144]	; (17234 <mp_obj_new_type+0x1ec>)
   171a4:	f7f5 ff08 	bl	cfb8 <mp_raise_TypeError>
    }

    mp_map_t *locals_map = &o->locals_dict->map;
   171a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   171aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   171ac:	3304      	adds	r3, #4
   171ae:	623b      	str	r3, [r7, #32]
    mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(MP_QSTR___new__), MP_MAP_LOOKUP);
   171b0:	2200      	movs	r2, #0
   171b2:	217a      	movs	r1, #122	; 0x7a
   171b4:	6a38      	ldr	r0, [r7, #32]
   171b6:	f7f6 f9c3 	bl	d540 <mp_map_lookup>
   171ba:	61f8      	str	r0, [r7, #28]
    if (elem != NULL) {
   171bc:	69fb      	ldr	r3, [r7, #28]
   171be:	2b00      	cmp	r3, #0
   171c0:	d019      	beq.n	171f6 <mp_obj_new_type+0x1ae>
        // __new__ slot exists; check if it is a function
        if (MP_OBJ_IS_FUN(elem->value)) {
   171c2:	69fb      	ldr	r3, [r7, #28]
   171c4:	685b      	ldr	r3, [r3, #4]
   171c6:	4618      	mov	r0, r3
   171c8:	f7fe ffba 	bl	16140 <MP_OBJ_IS_OBJ>
   171cc:	4603      	mov	r3, r0
   171ce:	2b00      	cmp	r3, #0
   171d0:	d011      	beq.n	171f6 <mp_obj_new_type+0x1ae>
   171d2:	69fb      	ldr	r3, [r7, #28]
   171d4:	685b      	ldr	r3, [r3, #4]
   171d6:	681b      	ldr	r3, [r3, #0]
   171d8:	88db      	ldrh	r3, [r3, #6]
   171da:	f240 1213 	movw	r2, #275	; 0x113
   171de:	4293      	cmp	r3, r2
   171e0:	d109      	bne.n	171f6 <mp_obj_new_type+0x1ae>
            // __new__ is a function, wrap it in a staticmethod decorator
            elem->value = static_class_method_make_new(&mp_type_staticmethod, 1, 0, &elem->value);
   171e2:	69fb      	ldr	r3, [r7, #28]
   171e4:	3304      	adds	r3, #4
   171e6:	2200      	movs	r2, #0
   171e8:	2101      	movs	r1, #1
   171ea:	4813      	ldr	r0, [pc, #76]	; (17238 <mp_obj_new_type+0x1f0>)
   171ec:	f000 fa9c 	bl	17728 <static_class_method_make_new>
   171f0:	4602      	mov	r2, r0
   171f2:	69fb      	ldr	r3, [r7, #28]
   171f4:	605a      	str	r2, [r3, #4]
        }
    }

    return MP_OBJ_FROM_PTR(o);
   171f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
   171f8:	4618      	mov	r0, r3
   171fa:	3738      	adds	r7, #56	; 0x38
   171fc:	46bd      	mov	sp, r7
   171fe:	bd80      	pop	{r7, pc}
   17200:	00023dec 	.word	0x00023dec
   17204:	00022104 	.word	0x00022104
   17208:	000240e4 	.word	0x000240e4
   1720c:	00024120 	.word	0x00024120
   17210:	000165a1 	.word	0x000165a1
   17214:	000166ad 	.word	0x000166ad
   17218:	00016d01 	.word	0x00016d01
   1721c:	00016889 	.word	0x00016889
   17220:	0001698d 	.word	0x0001698d
   17224:	00016b85 	.word	0x00016b85
   17228:	00016bc9 	.word	0x00016bc9
   1722c:	00016d6d 	.word	0x00016d6d
   17230:	00016df1 	.word	0x00016df1
   17234:	00024144 	.word	0x00024144
   17238:	000242f0 	.word	0x000242f0

0001723c <super_print>:
    mp_obj_base_t base;
    mp_obj_t type;
    mp_obj_t obj;
} mp_obj_super_t;

STATIC void super_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   1723c:	b580      	push	{r7, lr}
   1723e:	b086      	sub	sp, #24
   17240:	af00      	add	r7, sp, #0
   17242:	60f8      	str	r0, [r7, #12]
   17244:	60b9      	str	r1, [r7, #8]
   17246:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_super_t *self = MP_OBJ_TO_PTR(self_in);
   17248:	68bb      	ldr	r3, [r7, #8]
   1724a:	617b      	str	r3, [r7, #20]
    mp_print_str(print, "<super: ");
   1724c:	490e      	ldr	r1, [pc, #56]	; (17288 <super_print+0x4c>)
   1724e:	68f8      	ldr	r0, [r7, #12]
   17250:	f7ea fbde 	bl	1a10 <mp_print_str>
    mp_obj_print_helper(print, self->type, PRINT_STR);
   17254:	697b      	ldr	r3, [r7, #20]
   17256:	685b      	ldr	r3, [r3, #4]
   17258:	2200      	movs	r2, #0
   1725a:	4619      	mov	r1, r3
   1725c:	68f8      	ldr	r0, [r7, #12]
   1725e:	f7f6 fb4b 	bl	d8f8 <mp_obj_print_helper>
    mp_print_str(print, ", ");
   17262:	490a      	ldr	r1, [pc, #40]	; (1728c <super_print+0x50>)
   17264:	68f8      	ldr	r0, [r7, #12]
   17266:	f7ea fbd3 	bl	1a10 <mp_print_str>
    mp_obj_print_helper(print, self->obj, PRINT_STR);
   1726a:	697b      	ldr	r3, [r7, #20]
   1726c:	689b      	ldr	r3, [r3, #8]
   1726e:	2200      	movs	r2, #0
   17270:	4619      	mov	r1, r3
   17272:	68f8      	ldr	r0, [r7, #12]
   17274:	f7f6 fb40 	bl	d8f8 <mp_obj_print_helper>
    mp_print_str(print, ">");
   17278:	4905      	ldr	r1, [pc, #20]	; (17290 <super_print+0x54>)
   1727a:	68f8      	ldr	r0, [r7, #12]
   1727c:	f7ea fbc8 	bl	1a10 <mp_print_str>
}
   17280:	bf00      	nop
   17282:	3718      	adds	r7, #24
   17284:	46bd      	mov	sp, r7
   17286:	bd80      	pop	{r7, pc}
   17288:	00024174 	.word	0x00024174
   1728c:	00024180 	.word	0x00024180
   17290:	00024184 	.word	0x00024184

00017294 <super_make_new>:

STATIC mp_obj_t super_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   17294:	b580      	push	{r7, lr}
   17296:	b088      	sub	sp, #32
   17298:	af02      	add	r7, sp, #8
   1729a:	60f8      	str	r0, [r7, #12]
   1729c:	60b9      	str	r1, [r7, #8]
   1729e:	607a      	str	r2, [r7, #4]
   172a0:	603b      	str	r3, [r7, #0]
    (void)type_in;
    // 0 arguments are turned into 2 in the compiler
    // 1 argument is not yet implemented
    mp_arg_check_num(n_args, n_kw, 2, 2, false);
   172a2:	2300      	movs	r3, #0
   172a4:	9300      	str	r3, [sp, #0]
   172a6:	2302      	movs	r3, #2
   172a8:	2202      	movs	r2, #2
   172aa:	6879      	ldr	r1, [r7, #4]
   172ac:	68b8      	ldr	r0, [r7, #8]
   172ae:	f7fe ff59 	bl	16164 <mp_arg_check_num>
    if (!MP_OBJ_IS_TYPE(args[0], &mp_type_type)) {
   172b2:	683b      	ldr	r3, [r7, #0]
   172b4:	681b      	ldr	r3, [r3, #0]
   172b6:	4618      	mov	r0, r3
   172b8:	f7fe ff42 	bl	16140 <MP_OBJ_IS_OBJ>
   172bc:	4603      	mov	r3, r0
   172be:	f083 0301 	eor.w	r3, r3, #1
   172c2:	b2db      	uxtb	r3, r3
   172c4:	2b00      	cmp	r3, #0
   172c6:	d105      	bne.n	172d4 <super_make_new+0x40>
   172c8:	683b      	ldr	r3, [r7, #0]
   172ca:	681b      	ldr	r3, [r3, #0]
   172cc:	681b      	ldr	r3, [r3, #0]
   172ce:	4a0d      	ldr	r2, [pc, #52]	; (17304 <super_make_new+0x70>)
   172d0:	4293      	cmp	r3, r2
   172d2:	d002      	beq.n	172da <super_make_new+0x46>
        mp_raise_TypeError(NULL);
   172d4:	2000      	movs	r0, #0
   172d6:	f7f5 fe6f 	bl	cfb8 <mp_raise_TypeError>
    }
    mp_obj_super_t *o = m_new_obj(mp_obj_super_t);
   172da:	200c      	movs	r0, #12
   172dc:	f7e9 f81e 	bl	31c <m_malloc>
   172e0:	6178      	str	r0, [r7, #20]
    *o = (mp_obj_super_t){{type_in}, args[0], args[1]};
   172e2:	683b      	ldr	r3, [r7, #0]
   172e4:	6819      	ldr	r1, [r3, #0]
   172e6:	683b      	ldr	r3, [r7, #0]
   172e8:	3304      	adds	r3, #4
   172ea:	681a      	ldr	r2, [r3, #0]
   172ec:	697b      	ldr	r3, [r7, #20]
   172ee:	68f8      	ldr	r0, [r7, #12]
   172f0:	6018      	str	r0, [r3, #0]
   172f2:	697b      	ldr	r3, [r7, #20]
   172f4:	6059      	str	r1, [r3, #4]
   172f6:	697b      	ldr	r3, [r7, #20]
   172f8:	609a      	str	r2, [r3, #8]
    return MP_OBJ_FROM_PTR(o);
   172fa:	697b      	ldr	r3, [r7, #20]
}
   172fc:	4618      	mov	r0, r3
   172fe:	3718      	adds	r7, #24
   17300:	46bd      	mov	sp, r7
   17302:	bd80      	pop	{r7, pc}
   17304:	000240e4 	.word	0x000240e4

00017308 <super_attr>:

STATIC void super_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   17308:	b580      	push	{r7, lr}
   1730a:	b090      	sub	sp, #64	; 0x40
   1730c:	af00      	add	r7, sp, #0
   1730e:	60f8      	str	r0, [r7, #12]
   17310:	60b9      	str	r1, [r7, #8]
   17312:	607a      	str	r2, [r7, #4]
    if (dest[0] != MP_OBJ_NULL) {
   17314:	687b      	ldr	r3, [r7, #4]
   17316:	681b      	ldr	r3, [r3, #0]
   17318:	2b00      	cmp	r3, #0
   1731a:	f040 80c1 	bne.w	174a0 <super_attr+0x198>
        // not load attribute
        return;
    }

    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_super));
   1731e:	68f8      	ldr	r0, [r7, #12]
   17320:	f7fe ff0e 	bl	16140 <MP_OBJ_IS_OBJ>
   17324:	4603      	mov	r3, r0
   17326:	f083 0301 	eor.w	r3, r3, #1
   1732a:	b2db      	uxtb	r3, r3
   1732c:	2b00      	cmp	r3, #0
   1732e:	d104      	bne.n	1733a <super_attr+0x32>
   17330:	68fb      	ldr	r3, [r7, #12]
   17332:	681b      	ldr	r3, [r3, #0]
   17334:	4a5d      	ldr	r2, [pc, #372]	; (174ac <super_attr+0x1a4>)
   17336:	4293      	cmp	r3, r2
   17338:	d006      	beq.n	17348 <super_attr+0x40>
   1733a:	4b5d      	ldr	r3, [pc, #372]	; (174b0 <super_attr+0x1a8>)
   1733c:	4a5d      	ldr	r2, [pc, #372]	; (174b4 <super_attr+0x1ac>)
   1733e:	f240 41c1 	movw	r1, #1217	; 0x4c1
   17342:	485d      	ldr	r0, [pc, #372]	; (174b8 <super_attr+0x1b0>)
   17344:	f004 fa1e 	bl	1b784 <__assert_func>
    mp_obj_super_t *self = MP_OBJ_TO_PTR(self_in);
   17348:	68fb      	ldr	r3, [r7, #12]
   1734a:	63bb      	str	r3, [r7, #56]	; 0x38

    assert(MP_OBJ_IS_TYPE(self->type, &mp_type_type));
   1734c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1734e:	685b      	ldr	r3, [r3, #4]
   17350:	4618      	mov	r0, r3
   17352:	f7fe fef5 	bl	16140 <MP_OBJ_IS_OBJ>
   17356:	4603      	mov	r3, r0
   17358:	f083 0301 	eor.w	r3, r3, #1
   1735c:	b2db      	uxtb	r3, r3
   1735e:	2b00      	cmp	r3, #0
   17360:	d105      	bne.n	1736e <super_attr+0x66>
   17362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17364:	685b      	ldr	r3, [r3, #4]
   17366:	681b      	ldr	r3, [r3, #0]
   17368:	4a54      	ldr	r2, [pc, #336]	; (174bc <super_attr+0x1b4>)
   1736a:	4293      	cmp	r3, r2
   1736c:	d006      	beq.n	1737c <super_attr+0x74>
   1736e:	4b54      	ldr	r3, [pc, #336]	; (174c0 <super_attr+0x1b8>)
   17370:	4a50      	ldr	r2, [pc, #320]	; (174b4 <super_attr+0x1ac>)
   17372:	f240 41c4 	movw	r1, #1220	; 0x4c4
   17376:	4850      	ldr	r0, [pc, #320]	; (174b8 <super_attr+0x1b0>)
   17378:	f004 fa04 	bl	1b784 <__assert_func>

    mp_obj_type_t *type = MP_OBJ_TO_PTR(self->type);
   1737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1737e:	685b      	ldr	r3, [r3, #4]
   17380:	637b      	str	r3, [r7, #52]	; 0x34

    struct class_lookup_data lookup = {
        .obj = MP_OBJ_TO_PTR(self->obj),
   17382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17384:	689b      	ldr	r3, [r3, #8]
    struct class_lookup_data lookup = {
   17386:	617b      	str	r3, [r7, #20]
   17388:	68bb      	ldr	r3, [r7, #8]
   1738a:	61bb      	str	r3, [r7, #24]
   1738c:	2300      	movs	r3, #0
   1738e:	61fb      	str	r3, [r7, #28]
   17390:	687b      	ldr	r3, [r7, #4]
   17392:	623b      	str	r3, [r7, #32]
   17394:	2300      	movs	r3, #0
   17396:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .dest = dest,
        .is_type = false,
    };

    // Allow a call super().__init__() to reach any native base classes
    if (attr == MP_QSTR___init__) {
   1739a:	68bb      	ldr	r3, [r7, #8]
   1739c:	2b14      	cmp	r3, #20
   1739e:	d101      	bne.n	173a4 <super_attr+0x9c>
        lookup.meth_offset = offsetof(mp_obj_type_t, make_new);
   173a0:	230c      	movs	r3, #12
   173a2:	61fb      	str	r3, [r7, #28]
    }

    if (type->parent == NULL) {
   173a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   173a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   173a8:	2b00      	cmp	r3, #0
   173aa:	d05f      	beq.n	1746c <super_attr+0x164>
        // no parents, do nothing
    #if MICROPY_MULTIPLE_INHERITANCE
    } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   173ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   173ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   173b0:	681b      	ldr	r3, [r3, #0]
   173b2:	4a44      	ldr	r2, [pc, #272]	; (174c4 <super_attr+0x1bc>)
   173b4:	4293      	cmp	r3, r2
   173b6:	d14a      	bne.n	1744e <super_attr+0x146>
        const mp_obj_tuple_t *parent_tuple = type->parent;
   173b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   173ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   173bc:	633b      	str	r3, [r7, #48]	; 0x30
        size_t len = parent_tuple->len;
   173be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   173c0:	685b      	ldr	r3, [r3, #4]
   173c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        const mp_obj_t *items = parent_tuple->items;
   173c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   173c6:	3308      	adds	r3, #8
   173c8:	62bb      	str	r3, [r7, #40]	; 0x28
        for (size_t i = 0; i < len; i++) {
   173ca:	2300      	movs	r3, #0
   173cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   173ce:	e039      	b.n	17444 <super_attr+0x13c>
            assert(MP_OBJ_IS_TYPE(items[i], &mp_type_type));
   173d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   173d2:	009b      	lsls	r3, r3, #2
   173d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   173d6:	4413      	add	r3, r2
   173d8:	681b      	ldr	r3, [r3, #0]
   173da:	4618      	mov	r0, r3
   173dc:	f7fe feb0 	bl	16140 <MP_OBJ_IS_OBJ>
   173e0:	4603      	mov	r3, r0
   173e2:	f083 0301 	eor.w	r3, r3, #1
   173e6:	b2db      	uxtb	r3, r3
   173e8:	2b00      	cmp	r3, #0
   173ea:	d108      	bne.n	173fe <super_attr+0xf6>
   173ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   173ee:	009b      	lsls	r3, r3, #2
   173f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   173f2:	4413      	add	r3, r2
   173f4:	681b      	ldr	r3, [r3, #0]
   173f6:	681b      	ldr	r3, [r3, #0]
   173f8:	4a30      	ldr	r2, [pc, #192]	; (174bc <super_attr+0x1b4>)
   173fa:	4293      	cmp	r3, r2
   173fc:	d006      	beq.n	1740c <super_attr+0x104>
   173fe:	4b32      	ldr	r3, [pc, #200]	; (174c8 <super_attr+0x1c0>)
   17400:	4a2c      	ldr	r2, [pc, #176]	; (174b4 <super_attr+0x1ac>)
   17402:	f240 41dd 	movw	r1, #1245	; 0x4dd
   17406:	482c      	ldr	r0, [pc, #176]	; (174b8 <super_attr+0x1b0>)
   17408:	f004 f9bc 	bl	1b784 <__assert_func>
            if (MP_OBJ_TO_PTR(items[i]) == &mp_type_object) {
   1740c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1740e:	009b      	lsls	r3, r3, #2
   17410:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17412:	4413      	add	r3, r2
   17414:	681b      	ldr	r3, [r3, #0]
   17416:	4a2d      	ldr	r2, [pc, #180]	; (174cc <super_attr+0x1c4>)
   17418:	4293      	cmp	r3, r2
   1741a:	d00f      	beq.n	1743c <super_attr+0x134>
                // The "object" type will be searched at the end of this function,
                // and we don't want to lookup native methods in object.
                continue;
            }
            mp_obj_class_lookup(&lookup, (mp_obj_type_t*)MP_OBJ_TO_PTR(items[i]));
   1741c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1741e:	009b      	lsls	r3, r3, #2
   17420:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17422:	4413      	add	r3, r2
   17424:	681a      	ldr	r2, [r3, #0]
   17426:	f107 0314 	add.w	r3, r7, #20
   1742a:	4611      	mov	r1, r2
   1742c:	4618      	mov	r0, r3
   1742e:	f7fe ff85 	bl	1633c <mp_obj_class_lookup>
            if (dest[0] != MP_OBJ_NULL) {
   17432:	687b      	ldr	r3, [r7, #4]
   17434:	681b      	ldr	r3, [r3, #0]
   17436:	2b00      	cmp	r3, #0
   17438:	d117      	bne.n	1746a <super_attr+0x162>
   1743a:	e000      	b.n	1743e <super_attr+0x136>
                continue;
   1743c:	bf00      	nop
        for (size_t i = 0; i < len; i++) {
   1743e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17440:	3301      	adds	r3, #1
   17442:	63fb      	str	r3, [r7, #60]	; 0x3c
   17444:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   17446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17448:	429a      	cmp	r2, r3
   1744a:	d3c1      	bcc.n	173d0 <super_attr+0xc8>
   1744c:	e00e      	b.n	1746c <super_attr+0x164>
                break;
            }
        }
    #endif
    } else if (type->parent != &mp_type_object) {
   1744e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17452:	4a1e      	ldr	r2, [pc, #120]	; (174cc <super_attr+0x1c4>)
   17454:	4293      	cmp	r3, r2
   17456:	d009      	beq.n	1746c <super_attr+0x164>
        mp_obj_class_lookup(&lookup, type->parent);
   17458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1745a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1745c:	f107 0314 	add.w	r3, r7, #20
   17460:	4611      	mov	r1, r2
   17462:	4618      	mov	r0, r3
   17464:	f7fe ff6a 	bl	1633c <mp_obj_class_lookup>
   17468:	e000      	b.n	1746c <super_attr+0x164>
                break;
   1746a:	bf00      	nop
    }

    if (dest[0] != MP_OBJ_NULL) {
   1746c:	687b      	ldr	r3, [r7, #4]
   1746e:	681b      	ldr	r3, [r3, #0]
   17470:	2b00      	cmp	r3, #0
   17472:	d00c      	beq.n	1748e <super_attr+0x186>
        if (dest[0] == MP_OBJ_SENTINEL) {
   17474:	687b      	ldr	r3, [r7, #4]
   17476:	681b      	ldr	r3, [r3, #0]
   17478:	2b08      	cmp	r3, #8
   1747a:	d113      	bne.n	174a4 <super_attr+0x19c>
            // Looked up native __init__ so defer to it
            dest[0] = MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj);
   1747c:	687b      	ldr	r3, [r7, #4]
   1747e:	4a14      	ldr	r2, [pc, #80]	; (174d0 <super_attr+0x1c8>)
   17480:	601a      	str	r2, [r3, #0]
            dest[1] = self->obj;
   17482:	687b      	ldr	r3, [r7, #4]
   17484:	3304      	adds	r3, #4
   17486:	6bba      	ldr	r2, [r7, #56]	; 0x38
   17488:	6892      	ldr	r2, [r2, #8]
   1748a:	601a      	str	r2, [r3, #0]
        }
        return;
   1748c:	e00a      	b.n	174a4 <super_attr+0x19c>
    }

    // Reset meth_offset so we don't look up any native methods in object,
    // because object never takes up the native base-class slot.
    lookup.meth_offset = 0;
   1748e:	2300      	movs	r3, #0
   17490:	61fb      	str	r3, [r7, #28]

    mp_obj_class_lookup(&lookup, &mp_type_object);
   17492:	f107 0314 	add.w	r3, r7, #20
   17496:	490d      	ldr	r1, [pc, #52]	; (174cc <super_attr+0x1c4>)
   17498:	4618      	mov	r0, r3
   1749a:	f7fe ff4f 	bl	1633c <mp_obj_class_lookup>
   1749e:	e002      	b.n	174a6 <super_attr+0x19e>
        return;
   174a0:	bf00      	nop
   174a2:	e000      	b.n	174a6 <super_attr+0x19e>
        return;
   174a4:	bf00      	nop
}
   174a6:	3740      	adds	r7, #64	; 0x40
   174a8:	46bd      	mov	sp, r7
   174aa:	bd80      	pop	{r7, pc}
   174ac:	00024204 	.word	0x00024204
   174b0:	00024188 	.word	0x00024188
   174b4:	000243f0 	.word	0x000243f0
   174b8:	00023ed4 	.word	0x00023ed4
   174bc:	000240e4 	.word	0x000240e4
   174c0:	000241b0 	.word	0x000241b0
   174c4:	00023dec 	.word	0x00023dec
   174c8:	000241dc 	.word	0x000241dc
   174cc:	00023418 	.word	0x00023418
   174d0:	00023ee8 	.word	0x00023ee8

000174d4 <mp_load_super_method>:
    .print = super_print,
    .make_new = super_make_new,
    .attr = super_attr,
};

void mp_load_super_method(qstr attr, mp_obj_t *dest) {
   174d4:	b580      	push	{r7, lr}
   174d6:	b086      	sub	sp, #24
   174d8:	af00      	add	r7, sp, #0
   174da:	6078      	str	r0, [r7, #4]
   174dc:	6039      	str	r1, [r7, #0]
    mp_obj_super_t super = {{&mp_type_super}, dest[1], dest[2]};
   174de:	4b09      	ldr	r3, [pc, #36]	; (17504 <mp_load_super_method+0x30>)
   174e0:	60fb      	str	r3, [r7, #12]
   174e2:	683b      	ldr	r3, [r7, #0]
   174e4:	685b      	ldr	r3, [r3, #4]
   174e6:	613b      	str	r3, [r7, #16]
   174e8:	683b      	ldr	r3, [r7, #0]
   174ea:	689b      	ldr	r3, [r3, #8]
   174ec:	617b      	str	r3, [r7, #20]
    mp_load_method(MP_OBJ_FROM_PTR(&super), attr, dest);
   174ee:	f107 030c 	add.w	r3, r7, #12
   174f2:	683a      	ldr	r2, [r7, #0]
   174f4:	6879      	ldr	r1, [r7, #4]
   174f6:	4618      	mov	r0, r3
   174f8:	f7f5 f9ac 	bl	c854 <mp_load_method>
}
   174fc:	bf00      	nop
   174fe:	3718      	adds	r7, #24
   17500:	46bd      	mov	sp, r7
   17502:	bd80      	pop	{r7, pc}
   17504:	00024204 	.word	0x00024204

00017508 <mp_obj_is_subclass_fast>:
/******************************************************************************/
// subclassing and built-ins specific to types

// object and classinfo should be type objects
// (but the function will fail gracefully if they are not)
bool mp_obj_is_subclass_fast(mp_const_obj_t object, mp_const_obj_t classinfo) {
   17508:	b580      	push	{r7, lr}
   1750a:	b086      	sub	sp, #24
   1750c:	af00      	add	r7, sp, #0
   1750e:	6078      	str	r0, [r7, #4]
   17510:	6039      	str	r1, [r7, #0]
    for (;;) {
        if (object == classinfo) {
   17512:	687a      	ldr	r2, [r7, #4]
   17514:	683b      	ldr	r3, [r7, #0]
   17516:	429a      	cmp	r2, r3
   17518:	d101      	bne.n	1751e <mp_obj_is_subclass_fast+0x16>
            return true;
   1751a:	2301      	movs	r3, #1
   1751c:	e047      	b.n	175ae <mp_obj_is_subclass_fast+0xa6>
        }

        // not equivalent classes, keep searching base classes

        // object should always be a type object, but just return false if it's not
        if (!MP_OBJ_IS_TYPE(object, &mp_type_type)) {
   1751e:	6878      	ldr	r0, [r7, #4]
   17520:	f7fe fe0e 	bl	16140 <MP_OBJ_IS_OBJ>
   17524:	4603      	mov	r3, r0
   17526:	f083 0301 	eor.w	r3, r3, #1
   1752a:	b2db      	uxtb	r3, r3
   1752c:	2b00      	cmp	r3, #0
   1752e:	d104      	bne.n	1753a <mp_obj_is_subclass_fast+0x32>
   17530:	687b      	ldr	r3, [r7, #4]
   17532:	681b      	ldr	r3, [r3, #0]
   17534:	4a20      	ldr	r2, [pc, #128]	; (175b8 <mp_obj_is_subclass_fast+0xb0>)
   17536:	4293      	cmp	r3, r2
   17538:	d001      	beq.n	1753e <mp_obj_is_subclass_fast+0x36>
            return false;
   1753a:	2300      	movs	r3, #0
   1753c:	e037      	b.n	175ae <mp_obj_is_subclass_fast+0xa6>
        }

        const mp_obj_type_t *self = MP_OBJ_TO_PTR(object);
   1753e:	687b      	ldr	r3, [r7, #4]
   17540:	613b      	str	r3, [r7, #16]

        if (self->parent == NULL) {
   17542:	693b      	ldr	r3, [r7, #16]
   17544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17546:	2b00      	cmp	r3, #0
   17548:	d101      	bne.n	1754e <mp_obj_is_subclass_fast+0x46>
            // type has no parents
            return false;
   1754a:	2300      	movs	r3, #0
   1754c:	e02f      	b.n	175ae <mp_obj_is_subclass_fast+0xa6>
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)self->parent)->type == &mp_type_tuple) {
   1754e:	693b      	ldr	r3, [r7, #16]
   17550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17552:	681b      	ldr	r3, [r3, #0]
   17554:	4a19      	ldr	r2, [pc, #100]	; (175bc <mp_obj_is_subclass_fast+0xb4>)
   17556:	4293      	cmp	r3, r2
   17558:	d125      	bne.n	175a6 <mp_obj_is_subclass_fast+0x9e>
            // get the base objects (they should be type objects)
            const mp_obj_tuple_t *parent_tuple = self->parent;
   1755a:	693b      	ldr	r3, [r7, #16]
   1755c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1755e:	60fb      	str	r3, [r7, #12]
            const mp_obj_t *item = parent_tuple->items;
   17560:	68fb      	ldr	r3, [r7, #12]
   17562:	3308      	adds	r3, #8
   17564:	617b      	str	r3, [r7, #20]
            const mp_obj_t *top = item + parent_tuple->len - 1;
   17566:	68fb      	ldr	r3, [r7, #12]
   17568:	685b      	ldr	r3, [r3, #4]
   1756a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1756e:	3b01      	subs	r3, #1
   17570:	009b      	lsls	r3, r3, #2
   17572:	697a      	ldr	r2, [r7, #20]
   17574:	4413      	add	r3, r2
   17576:	60bb      	str	r3, [r7, #8]

            // iterate through the base objects
            for (; item < top; ++item) {
   17578:	e00d      	b.n	17596 <mp_obj_is_subclass_fast+0x8e>
                if (mp_obj_is_subclass_fast(*item, classinfo)) {
   1757a:	697b      	ldr	r3, [r7, #20]
   1757c:	681b      	ldr	r3, [r3, #0]
   1757e:	6839      	ldr	r1, [r7, #0]
   17580:	4618      	mov	r0, r3
   17582:	f7ff ffc1 	bl	17508 <mp_obj_is_subclass_fast>
   17586:	4603      	mov	r3, r0
   17588:	2b00      	cmp	r3, #0
   1758a:	d001      	beq.n	17590 <mp_obj_is_subclass_fast+0x88>
                    return true;
   1758c:	2301      	movs	r3, #1
   1758e:	e00e      	b.n	175ae <mp_obj_is_subclass_fast+0xa6>
            for (; item < top; ++item) {
   17590:	697b      	ldr	r3, [r7, #20]
   17592:	3304      	adds	r3, #4
   17594:	617b      	str	r3, [r7, #20]
   17596:	697a      	ldr	r2, [r7, #20]
   17598:	68bb      	ldr	r3, [r7, #8]
   1759a:	429a      	cmp	r2, r3
   1759c:	d3ed      	bcc.n	1757a <mp_obj_is_subclass_fast+0x72>
                }
            }

            // search last base (simple tail recursion elimination)
            object = *item;
   1759e:	697b      	ldr	r3, [r7, #20]
   175a0:	681b      	ldr	r3, [r3, #0]
   175a2:	607b      	str	r3, [r7, #4]
   175a4:	e7b5      	b.n	17512 <mp_obj_is_subclass_fast+0xa>
        #endif
        } else {
            // type has 1 parent
            object = MP_OBJ_FROM_PTR(self->parent);
   175a6:	693b      	ldr	r3, [r7, #16]
   175a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   175aa:	607b      	str	r3, [r7, #4]
        }
    }
   175ac:	e7b1      	b.n	17512 <mp_obj_is_subclass_fast+0xa>
}
   175ae:	4618      	mov	r0, r3
   175b0:	3718      	adds	r7, #24
   175b2:	46bd      	mov	sp, r7
   175b4:	bd80      	pop	{r7, pc}
   175b6:	bf00      	nop
   175b8:	000240e4 	.word	0x000240e4
   175bc:	00023dec 	.word	0x00023dec

000175c0 <mp_obj_is_subclass>:

STATIC mp_obj_t mp_obj_is_subclass(mp_obj_t object, mp_obj_t classinfo) {
   175c0:	b580      	push	{r7, lr}
   175c2:	b086      	sub	sp, #24
   175c4:	af00      	add	r7, sp, #0
   175c6:	6078      	str	r0, [r7, #4]
   175c8:	6039      	str	r1, [r7, #0]
    size_t len;
    mp_obj_t *items;
    if (MP_OBJ_IS_TYPE(classinfo, &mp_type_type)) {
   175ca:	683b      	ldr	r3, [r7, #0]
   175cc:	4618      	mov	r0, r3
   175ce:	f7fe fdb7 	bl	16140 <MP_OBJ_IS_OBJ>
   175d2:	4603      	mov	r3, r0
   175d4:	2b00      	cmp	r3, #0
   175d6:	d009      	beq.n	175ec <mp_obj_is_subclass+0x2c>
   175d8:	683b      	ldr	r3, [r7, #0]
   175da:	681b      	ldr	r3, [r3, #0]
   175dc:	4a22      	ldr	r2, [pc, #136]	; (17668 <mp_obj_is_subclass+0xa8>)
   175de:	4293      	cmp	r3, r2
   175e0:	d104      	bne.n	175ec <mp_obj_is_subclass+0x2c>
        len = 1;
   175e2:	2301      	movs	r3, #1
   175e4:	613b      	str	r3, [r7, #16]
        items = &classinfo;
   175e6:	463b      	mov	r3, r7
   175e8:	60fb      	str	r3, [r7, #12]
   175ea:	e017      	b.n	1761c <mp_obj_is_subclass+0x5c>
    } else if (MP_OBJ_IS_TYPE(classinfo, &mp_type_tuple)) {
   175ec:	683b      	ldr	r3, [r7, #0]
   175ee:	4618      	mov	r0, r3
   175f0:	f7fe fda6 	bl	16140 <MP_OBJ_IS_OBJ>
   175f4:	4603      	mov	r3, r0
   175f6:	2b00      	cmp	r3, #0
   175f8:	d00d      	beq.n	17616 <mp_obj_is_subclass+0x56>
   175fa:	683b      	ldr	r3, [r7, #0]
   175fc:	681b      	ldr	r3, [r3, #0]
   175fe:	4a1b      	ldr	r2, [pc, #108]	; (1766c <mp_obj_is_subclass+0xac>)
   17600:	4293      	cmp	r3, r2
   17602:	d108      	bne.n	17616 <mp_obj_is_subclass+0x56>
        mp_obj_tuple_get(classinfo, &len, &items);
   17604:	683b      	ldr	r3, [r7, #0]
   17606:	f107 020c 	add.w	r2, r7, #12
   1760a:	f107 0110 	add.w	r1, r7, #16
   1760e:	4618      	mov	r0, r3
   17610:	f7fe fce6 	bl	15fe0 <mp_obj_tuple_get>
   17614:	e002      	b.n	1761c <mp_obj_is_subclass+0x5c>
    } else {
        mp_raise_TypeError("issubclass() arg 2 must be a class or a tuple of classes");
   17616:	4816      	ldr	r0, [pc, #88]	; (17670 <mp_obj_is_subclass+0xb0>)
   17618:	f7f5 fcce 	bl	cfb8 <mp_raise_TypeError>
    }

    for (size_t i = 0; i < len; i++) {
   1761c:	2300      	movs	r3, #0
   1761e:	617b      	str	r3, [r7, #20]
   17620:	e018      	b.n	17654 <mp_obj_is_subclass+0x94>
        // We explicitly check for 'object' here since no-one explicitly derives from it
        if (items[i] == MP_OBJ_FROM_PTR(&mp_type_object) || mp_obj_is_subclass_fast(object, items[i])) {
   17622:	68fa      	ldr	r2, [r7, #12]
   17624:	697b      	ldr	r3, [r7, #20]
   17626:	009b      	lsls	r3, r3, #2
   17628:	4413      	add	r3, r2
   1762a:	681b      	ldr	r3, [r3, #0]
   1762c:	4a11      	ldr	r2, [pc, #68]	; (17674 <mp_obj_is_subclass+0xb4>)
   1762e:	4293      	cmp	r3, r2
   17630:	d00b      	beq.n	1764a <mp_obj_is_subclass+0x8a>
   17632:	68fa      	ldr	r2, [r7, #12]
   17634:	697b      	ldr	r3, [r7, #20]
   17636:	009b      	lsls	r3, r3, #2
   17638:	4413      	add	r3, r2
   1763a:	681b      	ldr	r3, [r3, #0]
   1763c:	4619      	mov	r1, r3
   1763e:	6878      	ldr	r0, [r7, #4]
   17640:	f7ff ff62 	bl	17508 <mp_obj_is_subclass_fast>
   17644:	4603      	mov	r3, r0
   17646:	2b00      	cmp	r3, #0
   17648:	d001      	beq.n	1764e <mp_obj_is_subclass+0x8e>
            return mp_const_true;
   1764a:	4b0b      	ldr	r3, [pc, #44]	; (17678 <mp_obj_is_subclass+0xb8>)
   1764c:	e007      	b.n	1765e <mp_obj_is_subclass+0x9e>
    for (size_t i = 0; i < len; i++) {
   1764e:	697b      	ldr	r3, [r7, #20]
   17650:	3301      	adds	r3, #1
   17652:	617b      	str	r3, [r7, #20]
   17654:	693b      	ldr	r3, [r7, #16]
   17656:	697a      	ldr	r2, [r7, #20]
   17658:	429a      	cmp	r2, r3
   1765a:	d3e2      	bcc.n	17622 <mp_obj_is_subclass+0x62>
        }
    }
    return mp_const_false;
   1765c:	4b07      	ldr	r3, [pc, #28]	; (1767c <mp_obj_is_subclass+0xbc>)
}
   1765e:	4618      	mov	r0, r3
   17660:	3718      	adds	r7, #24
   17662:	46bd      	mov	sp, r7
   17664:	bd80      	pop	{r7, pc}
   17666:	bf00      	nop
   17668:	000240e4 	.word	0x000240e4
   1766c:	00023dec 	.word	0x00023dec
   17670:	00024240 	.word	0x00024240
   17674:	00023418 	.word	0x00023418
   17678:	00021c60 	.word	0x00021c60
   1767c:	00021c58 	.word	0x00021c58

00017680 <mp_builtin_issubclass>:

STATIC mp_obj_t mp_builtin_issubclass(mp_obj_t object, mp_obj_t classinfo) {
   17680:	b580      	push	{r7, lr}
   17682:	b082      	sub	sp, #8
   17684:	af00      	add	r7, sp, #0
   17686:	6078      	str	r0, [r7, #4]
   17688:	6039      	str	r1, [r7, #0]
    if (!MP_OBJ_IS_TYPE(object, &mp_type_type)) {
   1768a:	6878      	ldr	r0, [r7, #4]
   1768c:	f7fe fd58 	bl	16140 <MP_OBJ_IS_OBJ>
   17690:	4603      	mov	r3, r0
   17692:	f083 0301 	eor.w	r3, r3, #1
   17696:	b2db      	uxtb	r3, r3
   17698:	2b00      	cmp	r3, #0
   1769a:	d104      	bne.n	176a6 <mp_builtin_issubclass+0x26>
   1769c:	687b      	ldr	r3, [r7, #4]
   1769e:	681b      	ldr	r3, [r3, #0]
   176a0:	4a07      	ldr	r2, [pc, #28]	; (176c0 <mp_builtin_issubclass+0x40>)
   176a2:	4293      	cmp	r3, r2
   176a4:	d002      	beq.n	176ac <mp_builtin_issubclass+0x2c>
        mp_raise_TypeError("issubclass() arg 1 must be a class");
   176a6:	4807      	ldr	r0, [pc, #28]	; (176c4 <mp_builtin_issubclass+0x44>)
   176a8:	f7f5 fc86 	bl	cfb8 <mp_raise_TypeError>
    }
    return mp_obj_is_subclass(object, classinfo);
   176ac:	6839      	ldr	r1, [r7, #0]
   176ae:	6878      	ldr	r0, [r7, #4]
   176b0:	f7ff ff86 	bl	175c0 <mp_obj_is_subclass>
   176b4:	4603      	mov	r3, r0
}
   176b6:	4618      	mov	r0, r3
   176b8:	3708      	adds	r7, #8
   176ba:	46bd      	mov	sp, r7
   176bc:	bd80      	pop	{r7, pc}
   176be:	bf00      	nop
   176c0:	000240e4 	.word	0x000240e4
   176c4:	0002427c 	.word	0x0002427c

000176c8 <mp_builtin_isinstance>:

MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_issubclass_obj, mp_builtin_issubclass);

STATIC mp_obj_t mp_builtin_isinstance(mp_obj_t object, mp_obj_t classinfo) {
   176c8:	b580      	push	{r7, lr}
   176ca:	b082      	sub	sp, #8
   176cc:	af00      	add	r7, sp, #0
   176ce:	6078      	str	r0, [r7, #4]
   176d0:	6039      	str	r1, [r7, #0]
    return mp_obj_is_subclass(MP_OBJ_FROM_PTR(mp_obj_get_type(object)), classinfo);
   176d2:	6878      	ldr	r0, [r7, #4]
   176d4:	f7f6 f8de 	bl	d894 <mp_obj_get_type>
   176d8:	4603      	mov	r3, r0
   176da:	6839      	ldr	r1, [r7, #0]
   176dc:	4618      	mov	r0, r3
   176de:	f7ff ff6f 	bl	175c0 <mp_obj_is_subclass>
   176e2:	4603      	mov	r3, r0
}
   176e4:	4618      	mov	r0, r3
   176e6:	3708      	adds	r7, #8
   176e8:	46bd      	mov	sp, r7
   176ea:	bd80      	pop	{r7, pc}

000176ec <mp_instance_cast_to_native_base>:

MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_isinstance_obj, mp_builtin_isinstance);

mp_obj_t mp_instance_cast_to_native_base(mp_const_obj_t self_in, mp_const_obj_t native_type) {
   176ec:	b580      	push	{r7, lr}
   176ee:	b084      	sub	sp, #16
   176f0:	af00      	add	r7, sp, #0
   176f2:	6078      	str	r0, [r7, #4]
   176f4:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *self_type = mp_obj_get_type(self_in);
   176f6:	6878      	ldr	r0, [r7, #4]
   176f8:	f7f6 f8cc 	bl	d894 <mp_obj_get_type>
   176fc:	60f8      	str	r0, [r7, #12]
    if (!mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(self_type), native_type)) {
   176fe:	6839      	ldr	r1, [r7, #0]
   17700:	68f8      	ldr	r0, [r7, #12]
   17702:	f7ff ff01 	bl	17508 <mp_obj_is_subclass_fast>
   17706:	4603      	mov	r3, r0
   17708:	f083 0301 	eor.w	r3, r3, #1
   1770c:	b2db      	uxtb	r3, r3
   1770e:	2b00      	cmp	r3, #0
   17710:	d001      	beq.n	17716 <mp_instance_cast_to_native_base+0x2a>
        return MP_OBJ_NULL;
   17712:	2300      	movs	r3, #0
   17714:	e003      	b.n	1771e <mp_instance_cast_to_native_base+0x32>
    }
    mp_obj_instance_t *self = (mp_obj_instance_t*)MP_OBJ_TO_PTR(self_in);
   17716:	687b      	ldr	r3, [r7, #4]
   17718:	60bb      	str	r3, [r7, #8]
    return self->subobj[0];
   1771a:	68bb      	ldr	r3, [r7, #8]
   1771c:	691b      	ldr	r3, [r3, #16]
}
   1771e:	4618      	mov	r0, r3
   17720:	3710      	adds	r7, #16
   17722:	46bd      	mov	sp, r7
   17724:	bd80      	pop	{r7, pc}
   17726:	bf00      	nop

00017728 <static_class_method_make_new>:

/******************************************************************************/
// staticmethod and classmethod types (probably should go in a different file)

STATIC mp_obj_t static_class_method_make_new(const mp_obj_type_t *self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   17728:	b580      	push	{r7, lr}
   1772a:	b088      	sub	sp, #32
   1772c:	af02      	add	r7, sp, #8
   1772e:	60f8      	str	r0, [r7, #12]
   17730:	60b9      	str	r1, [r7, #8]
   17732:	607a      	str	r2, [r7, #4]
   17734:	603b      	str	r3, [r7, #0]
    assert(self == &mp_type_staticmethod || self == &mp_type_classmethod);
   17736:	68fb      	ldr	r3, [r7, #12]
   17738:	4a12      	ldr	r2, [pc, #72]	; (17784 <static_class_method_make_new+0x5c>)
   1773a:	4293      	cmp	r3, r2
   1773c:	d00a      	beq.n	17754 <static_class_method_make_new+0x2c>
   1773e:	68fb      	ldr	r3, [r7, #12]
   17740:	4a11      	ldr	r2, [pc, #68]	; (17788 <static_class_method_make_new+0x60>)
   17742:	4293      	cmp	r3, r2
   17744:	d006      	beq.n	17754 <static_class_method_make_new+0x2c>
   17746:	4b11      	ldr	r3, [pc, #68]	; (1778c <static_class_method_make_new+0x64>)
   17748:	4a11      	ldr	r2, [pc, #68]	; (17790 <static_class_method_make_new+0x68>)
   1774a:	f240 516a 	movw	r1, #1386	; 0x56a
   1774e:	4811      	ldr	r0, [pc, #68]	; (17794 <static_class_method_make_new+0x6c>)
   17750:	f004 f818 	bl	1b784 <__assert_func>

    mp_arg_check_num(n_args, n_kw, 1, 1, false);
   17754:	2300      	movs	r3, #0
   17756:	9300      	str	r3, [sp, #0]
   17758:	2301      	movs	r3, #1
   1775a:	2201      	movs	r2, #1
   1775c:	6879      	ldr	r1, [r7, #4]
   1775e:	68b8      	ldr	r0, [r7, #8]
   17760:	f7fe fd00 	bl	16164 <mp_arg_check_num>

    mp_obj_static_class_method_t *o = m_new_obj(mp_obj_static_class_method_t);
   17764:	2008      	movs	r0, #8
   17766:	f7e8 fdd9 	bl	31c <m_malloc>
   1776a:	6178      	str	r0, [r7, #20]
    *o = (mp_obj_static_class_method_t){{self}, args[0]};
   1776c:	683b      	ldr	r3, [r7, #0]
   1776e:	681a      	ldr	r2, [r3, #0]
   17770:	697b      	ldr	r3, [r7, #20]
   17772:	68f9      	ldr	r1, [r7, #12]
   17774:	6019      	str	r1, [r3, #0]
   17776:	697b      	ldr	r3, [r7, #20]
   17778:	605a      	str	r2, [r3, #4]
    return MP_OBJ_FROM_PTR(o);
   1777a:	697b      	ldr	r3, [r7, #20]
}
   1777c:	4618      	mov	r0, r3
   1777e:	3718      	adds	r7, #24
   17780:	46bd      	mov	sp, r7
   17782:	bd80      	pop	{r7, pc}
   17784:	000242f0 	.word	0x000242f0
   17788:	0002432c 	.word	0x0002432c
   1778c:	000242b0 	.word	0x000242b0
   17790:	000243fc 	.word	0x000243fc
   17794:	00023ed4 	.word	0x00023ed4

00017798 <MP_OBJ_IS_OBJ>:
   17798:	b480      	push	{r7}
   1779a:	b083      	sub	sp, #12
   1779c:	af00      	add	r7, sp, #0
   1779e:	6078      	str	r0, [r7, #4]
   177a0:	687b      	ldr	r3, [r7, #4]
   177a2:	f003 0303 	and.w	r3, r3, #3
   177a6:	2b00      	cmp	r3, #0
   177a8:	bf0c      	ite	eq
   177aa:	2301      	moveq	r3, #1
   177ac:	2300      	movne	r3, #0
   177ae:	b2db      	uxtb	r3, r3
   177b0:	4618      	mov	r0, r3
   177b2:	370c      	adds	r7, #12
   177b4:	46bd      	mov	sp, r7
   177b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   177ba:	4770      	bx	lr

000177bc <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   177bc:	b580      	push	{r7, lr}
   177be:	b084      	sub	sp, #16
   177c0:	af00      	add	r7, sp, #0
   177c2:	60f8      	str	r0, [r7, #12]
   177c4:	60b9      	str	r1, [r7, #8]
   177c6:	607a      	str	r2, [r7, #4]
   177c8:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   177ca:	687b      	ldr	r3, [r7, #4]
   177cc:	045a      	lsls	r2, r3, #17
   177ce:	683b      	ldr	r3, [r7, #0]
   177d0:	005b      	lsls	r3, r3, #1
   177d2:	431a      	orrs	r2, r3
   177d4:	7e3b      	ldrb	r3, [r7, #24]
   177d6:	2b00      	cmp	r3, #0
   177d8:	d001      	beq.n	177de <mp_arg_check_num+0x22>
   177da:	2301      	movs	r3, #1
   177dc:	e000      	b.n	177e0 <mp_arg_check_num+0x24>
   177de:	2300      	movs	r3, #0
   177e0:	4313      	orrs	r3, r2
   177e2:	461a      	mov	r2, r3
   177e4:	68b9      	ldr	r1, [r7, #8]
   177e6:	68f8      	ldr	r0, [r7, #12]
   177e8:	f7f5 fc52 	bl	d090 <mp_arg_check_num_sig>
}
   177ec:	bf00      	nop
   177ee:	3710      	adds	r7, #16
   177f0:	46bd      	mov	sp, r7
   177f2:	bd80      	pop	{r7, pc}

000177f4 <zip_make_new>:
    mp_obj_base_t base;
    size_t n_iters;
    mp_obj_t iters[];
} mp_obj_zip_t;

STATIC mp_obj_t zip_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   177f4:	b580      	push	{r7, lr}
   177f6:	b088      	sub	sp, #32
   177f8:	af02      	add	r7, sp, #8
   177fa:	60f8      	str	r0, [r7, #12]
   177fc:	60b9      	str	r1, [r7, #8]
   177fe:	607a      	str	r2, [r7, #4]
   17800:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 0, MP_OBJ_FUN_ARGS_MAX, false);
   17802:	2300      	movs	r3, #0
   17804:	9300      	str	r3, [sp, #0]
   17806:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1780a:	2200      	movs	r2, #0
   1780c:	6879      	ldr	r1, [r7, #4]
   1780e:	68b8      	ldr	r0, [r7, #8]
   17810:	f7ff ffd4 	bl	177bc <mp_arg_check_num>

    mp_obj_zip_t *o = m_new_obj_var(mp_obj_zip_t, mp_obj_t, n_args);
   17814:	68bb      	ldr	r3, [r7, #8]
   17816:	3302      	adds	r3, #2
   17818:	009b      	lsls	r3, r3, #2
   1781a:	4618      	mov	r0, r3
   1781c:	f7e8 fd7e 	bl	31c <m_malloc>
   17820:	6138      	str	r0, [r7, #16]
    o->base.type = type;
   17822:	693b      	ldr	r3, [r7, #16]
   17824:	68fa      	ldr	r2, [r7, #12]
   17826:	601a      	str	r2, [r3, #0]
    o->n_iters = n_args;
   17828:	693b      	ldr	r3, [r7, #16]
   1782a:	68ba      	ldr	r2, [r7, #8]
   1782c:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < n_args; i++) {
   1782e:	2300      	movs	r3, #0
   17830:	617b      	str	r3, [r7, #20]
   17832:	e011      	b.n	17858 <zip_make_new+0x64>
        o->iters[i] = mp_getiter(args[i], NULL);
   17834:	697b      	ldr	r3, [r7, #20]
   17836:	009b      	lsls	r3, r3, #2
   17838:	683a      	ldr	r2, [r7, #0]
   1783a:	4413      	add	r3, r2
   1783c:	681b      	ldr	r3, [r3, #0]
   1783e:	2100      	movs	r1, #0
   17840:	4618      	mov	r0, r3
   17842:	f7f5 f87f 	bl	c944 <mp_getiter>
   17846:	4601      	mov	r1, r0
   17848:	693b      	ldr	r3, [r7, #16]
   1784a:	697a      	ldr	r2, [r7, #20]
   1784c:	3202      	adds	r2, #2
   1784e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < n_args; i++) {
   17852:	697b      	ldr	r3, [r7, #20]
   17854:	3301      	adds	r3, #1
   17856:	617b      	str	r3, [r7, #20]
   17858:	697a      	ldr	r2, [r7, #20]
   1785a:	68bb      	ldr	r3, [r7, #8]
   1785c:	429a      	cmp	r2, r3
   1785e:	d3e9      	bcc.n	17834 <zip_make_new+0x40>
    }
    return MP_OBJ_FROM_PTR(o);
   17860:	693b      	ldr	r3, [r7, #16]
}
   17862:	4618      	mov	r0, r3
   17864:	3718      	adds	r7, #24
   17866:	46bd      	mov	sp, r7
   17868:	bd80      	pop	{r7, pc}
   1786a:	bf00      	nop

0001786c <zip_iternext>:

STATIC mp_obj_t zip_iternext(mp_obj_t self_in) {
   1786c:	b580      	push	{r7, lr}
   1786e:	b086      	sub	sp, #24
   17870:	af00      	add	r7, sp, #0
   17872:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_zip));
   17874:	6878      	ldr	r0, [r7, #4]
   17876:	f7ff ff8f 	bl	17798 <MP_OBJ_IS_OBJ>
   1787a:	4603      	mov	r3, r0
   1787c:	f083 0301 	eor.w	r3, r3, #1
   17880:	b2db      	uxtb	r3, r3
   17882:	2b00      	cmp	r3, #0
   17884:	d104      	bne.n	17890 <zip_iternext+0x24>
   17886:	687b      	ldr	r3, [r7, #4]
   17888:	681b      	ldr	r3, [r3, #0]
   1788a:	4a1f      	ldr	r2, [pc, #124]	; (17908 <zip_iternext+0x9c>)
   1788c:	4293      	cmp	r3, r2
   1788e:	d005      	beq.n	1789c <zip_iternext+0x30>
   17890:	4b1e      	ldr	r3, [pc, #120]	; (1790c <zip_iternext+0xa0>)
   17892:	4a1f      	ldr	r2, [pc, #124]	; (17910 <zip_iternext+0xa4>)
   17894:	2134      	movs	r1, #52	; 0x34
   17896:	481f      	ldr	r0, [pc, #124]	; (17914 <zip_iternext+0xa8>)
   17898:	f003 ff74 	bl	1b784 <__assert_func>
    mp_obj_zip_t *self = MP_OBJ_TO_PTR(self_in);
   1789c:	687b      	ldr	r3, [r7, #4]
   1789e:	613b      	str	r3, [r7, #16]
    if (self->n_iters == 0) {
   178a0:	693b      	ldr	r3, [r7, #16]
   178a2:	685b      	ldr	r3, [r3, #4]
   178a4:	2b00      	cmp	r3, #0
   178a6:	d101      	bne.n	178ac <zip_iternext+0x40>
        return MP_OBJ_STOP_ITERATION;
   178a8:	2304      	movs	r3, #4
   178aa:	e029      	b.n	17900 <zip_iternext+0x94>
    }
    mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(mp_obj_new_tuple(self->n_iters, NULL));
   178ac:	693b      	ldr	r3, [r7, #16]
   178ae:	685b      	ldr	r3, [r3, #4]
   178b0:	2100      	movs	r1, #0
   178b2:	4618      	mov	r0, r3
   178b4:	f7fe fb5c 	bl	15f70 <mp_obj_new_tuple>
   178b8:	60f8      	str	r0, [r7, #12]

    for (size_t i = 0; i < self->n_iters; i++) {
   178ba:	2300      	movs	r3, #0
   178bc:	617b      	str	r3, [r7, #20]
   178be:	e019      	b.n	178f4 <zip_iternext+0x88>
        mp_obj_t next = mp_iternext(self->iters[i]);
   178c0:	693b      	ldr	r3, [r7, #16]
   178c2:	697a      	ldr	r2, [r7, #20]
   178c4:	3202      	adds	r2, #2
   178c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   178ca:	4618      	mov	r0, r3
   178cc:	f7f5 f8bc 	bl	ca48 <mp_iternext>
   178d0:	60b8      	str	r0, [r7, #8]
        if (next == MP_OBJ_STOP_ITERATION) {
   178d2:	68bb      	ldr	r3, [r7, #8]
   178d4:	2b04      	cmp	r3, #4
   178d6:	d104      	bne.n	178e2 <zip_iternext+0x76>
            mp_obj_tuple_del(MP_OBJ_FROM_PTR(tuple));
   178d8:	68f8      	ldr	r0, [r7, #12]
   178da:	f7fe fbb3 	bl	16044 <mp_obj_tuple_del>
            return MP_OBJ_STOP_ITERATION;
   178de:	2304      	movs	r3, #4
   178e0:	e00e      	b.n	17900 <zip_iternext+0x94>
        }
        tuple->items[i] = next;
   178e2:	68fb      	ldr	r3, [r7, #12]
   178e4:	697a      	ldr	r2, [r7, #20]
   178e6:	3202      	adds	r2, #2
   178e8:	68b9      	ldr	r1, [r7, #8]
   178ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < self->n_iters; i++) {
   178ee:	697b      	ldr	r3, [r7, #20]
   178f0:	3301      	adds	r3, #1
   178f2:	617b      	str	r3, [r7, #20]
   178f4:	693b      	ldr	r3, [r7, #16]
   178f6:	685a      	ldr	r2, [r3, #4]
   178f8:	697b      	ldr	r3, [r7, #20]
   178fa:	429a      	cmp	r2, r3
   178fc:	d8e0      	bhi.n	178c0 <zip_iternext+0x54>
    }
    return MP_OBJ_FROM_PTR(tuple);
   178fe:	68fb      	ldr	r3, [r7, #12]
}
   17900:	4618      	mov	r0, r3
   17902:	3718      	adds	r7, #24
   17904:	46bd      	mov	sp, r7
   17906:	bd80      	pop	{r7, pc}
   17908:	0002448c 	.word	0x0002448c
   1790c:	0002441c 	.word	0x0002441c
   17910:	000244c8 	.word	0x000244c8
   17914:	00024478 	.word	0x00024478

00017918 <op_getitem>:
 */

#include "py/obj.h"
#include "py/builtin.h"

STATIC mp_obj_t op_getitem(mp_obj_t self_in, mp_obj_t key_in) {
   17918:	b580      	push	{r7, lr}
   1791a:	b084      	sub	sp, #16
   1791c:	af00      	add	r7, sp, #0
   1791e:	6078      	str	r0, [r7, #4]
   17920:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   17922:	6878      	ldr	r0, [r7, #4]
   17924:	f7f5 ffb6 	bl	d894 <mp_obj_get_type>
   17928:	60f8      	str	r0, [r7, #12]
    return type->subscr(self_in, key_in, MP_OBJ_SENTINEL);
   1792a:	68fb      	ldr	r3, [r7, #12]
   1792c:	6a1b      	ldr	r3, [r3, #32]
   1792e:	2208      	movs	r2, #8
   17930:	6839      	ldr	r1, [r7, #0]
   17932:	6878      	ldr	r0, [r7, #4]
   17934:	4798      	blx	r3
   17936:	4603      	mov	r3, r0
}
   17938:	4618      	mov	r0, r3
   1793a:	3710      	adds	r7, #16
   1793c:	46bd      	mov	sp, r7
   1793e:	bd80      	pop	{r7, pc}

00017940 <op_setitem>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_op_getitem_obj, op_getitem);

STATIC mp_obj_t op_setitem(mp_obj_t self_in, mp_obj_t key_in, mp_obj_t value_in) {
   17940:	b580      	push	{r7, lr}
   17942:	b086      	sub	sp, #24
   17944:	af00      	add	r7, sp, #0
   17946:	60f8      	str	r0, [r7, #12]
   17948:	60b9      	str	r1, [r7, #8]
   1794a:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   1794c:	68f8      	ldr	r0, [r7, #12]
   1794e:	f7f5 ffa1 	bl	d894 <mp_obj_get_type>
   17952:	6178      	str	r0, [r7, #20]
    return type->subscr(self_in, key_in, value_in);
   17954:	697b      	ldr	r3, [r7, #20]
   17956:	6a1b      	ldr	r3, [r3, #32]
   17958:	687a      	ldr	r2, [r7, #4]
   1795a:	68b9      	ldr	r1, [r7, #8]
   1795c:	68f8      	ldr	r0, [r7, #12]
   1795e:	4798      	blx	r3
   17960:	4603      	mov	r3, r0
}
   17962:	4618      	mov	r0, r3
   17964:	3718      	adds	r7, #24
   17966:	46bd      	mov	sp, r7
   17968:	bd80      	pop	{r7, pc}
   1796a:	bf00      	nop

0001796c <op_delitem>:
MP_DEFINE_CONST_FUN_OBJ_3(mp_op_setitem_obj, op_setitem);

STATIC mp_obj_t op_delitem(mp_obj_t self_in, mp_obj_t key_in) {
   1796c:	b580      	push	{r7, lr}
   1796e:	b084      	sub	sp, #16
   17970:	af00      	add	r7, sp, #0
   17972:	6078      	str	r0, [r7, #4]
   17974:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   17976:	6878      	ldr	r0, [r7, #4]
   17978:	f7f5 ff8c 	bl	d894 <mp_obj_get_type>
   1797c:	60f8      	str	r0, [r7, #12]
    return type->subscr(self_in, key_in, MP_OBJ_NULL);
   1797e:	68fb      	ldr	r3, [r7, #12]
   17980:	6a1b      	ldr	r3, [r3, #32]
   17982:	2200      	movs	r2, #0
   17984:	6839      	ldr	r1, [r7, #0]
   17986:	6878      	ldr	r0, [r7, #4]
   17988:	4798      	blx	r3
   1798a:	4603      	mov	r3, r0
}
   1798c:	4618      	mov	r0, r3
   1798e:	3710      	adds	r7, #16
   17990:	46bd      	mov	sp, r7
   17992:	bd80      	pop	{r7, pc}

00017994 <op_contains>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_op_delitem_obj, op_delitem);

STATIC mp_obj_t op_contains(mp_obj_t lhs_in, mp_obj_t rhs_in) {
   17994:	b580      	push	{r7, lr}
   17996:	b084      	sub	sp, #16
   17998:	af00      	add	r7, sp, #0
   1799a:	6078      	str	r0, [r7, #4]
   1799c:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(lhs_in);
   1799e:	6878      	ldr	r0, [r7, #4]
   179a0:	f7f5 ff78 	bl	d894 <mp_obj_get_type>
   179a4:	60f8      	str	r0, [r7, #12]
    return type->binary_op(MP_BINARY_OP_CONTAINS, lhs_in, rhs_in);
   179a6:	68fb      	ldr	r3, [r7, #12]
   179a8:	699b      	ldr	r3, [r3, #24]
   179aa:	683a      	ldr	r2, [r7, #0]
   179ac:	6879      	ldr	r1, [r7, #4]
   179ae:	2022      	movs	r0, #34	; 0x22
   179b0:	4798      	blx	r3
   179b2:	4603      	mov	r3, r0
}
   179b4:	4618      	mov	r0, r3
   179b6:	3710      	adds	r7, #16
   179b8:	46bd      	mov	sp, r7
   179ba:	bd80      	pop	{r7, pc}

000179bc <mp_seq_multiply>:

#define SWAP(type, var1, var2) { type t = var2; var2 = var1; var1 = t; }

// Implements backend of sequence * integer operation. Assumes elements are
// memory-adjacent in sequence.
void mp_seq_multiply(const void *items, size_t item_sz, size_t len, size_t times, void *dest) {
   179bc:	b580      	push	{r7, lr}
   179be:	b086      	sub	sp, #24
   179c0:	af00      	add	r7, sp, #0
   179c2:	60f8      	str	r0, [r7, #12]
   179c4:	60b9      	str	r1, [r7, #8]
   179c6:	607a      	str	r2, [r7, #4]
   179c8:	603b      	str	r3, [r7, #0]
    for (size_t i = 0; i < times; i++) {
   179ca:	2300      	movs	r3, #0
   179cc:	617b      	str	r3, [r7, #20]
   179ce:	e010      	b.n	179f2 <mp_seq_multiply+0x36>
        size_t copy_sz = item_sz * len;
   179d0:	68bb      	ldr	r3, [r7, #8]
   179d2:	687a      	ldr	r2, [r7, #4]
   179d4:	fb02 f303 	mul.w	r3, r2, r3
   179d8:	613b      	str	r3, [r7, #16]
        memcpy(dest, items, copy_sz);
   179da:	693a      	ldr	r2, [r7, #16]
   179dc:	68f9      	ldr	r1, [r7, #12]
   179de:	6a38      	ldr	r0, [r7, #32]
   179e0:	f005 f9d6 	bl	1cd90 <memcpy>
        dest = (char*)dest + copy_sz;
   179e4:	6a3a      	ldr	r2, [r7, #32]
   179e6:	693b      	ldr	r3, [r7, #16]
   179e8:	4413      	add	r3, r2
   179ea:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < times; i++) {
   179ec:	697b      	ldr	r3, [r7, #20]
   179ee:	3301      	adds	r3, #1
   179f0:	617b      	str	r3, [r7, #20]
   179f2:	697a      	ldr	r2, [r7, #20]
   179f4:	683b      	ldr	r3, [r7, #0]
   179f6:	429a      	cmp	r2, r3
   179f8:	d3ea      	bcc.n	179d0 <mp_seq_multiply+0x14>
    }
}
   179fa:	bf00      	nop
   179fc:	3718      	adds	r7, #24
   179fe:	46bd      	mov	sp, r7
   17a00:	bd80      	pop	{r7, pc}
   17a02:	bf00      	nop

00017a04 <mp_seq_extract_slice>:
    return indexes->step == 1;
}

#endif

mp_obj_t mp_seq_extract_slice(size_t len, const mp_obj_t *seq, mp_bound_slice_t *indexes) {
   17a04:	b580      	push	{r7, lr}
   17a06:	b088      	sub	sp, #32
   17a08:	af00      	add	r7, sp, #0
   17a0a:	60f8      	str	r0, [r7, #12]
   17a0c:	60b9      	str	r1, [r7, #8]
   17a0e:	607a      	str	r2, [r7, #4]
    (void)len; // TODO can we remove len from the arg list?

    mp_int_t start = indexes->start, stop = indexes->stop;
   17a10:	687b      	ldr	r3, [r7, #4]
   17a12:	681b      	ldr	r3, [r3, #0]
   17a14:	61fb      	str	r3, [r7, #28]
   17a16:	687b      	ldr	r3, [r7, #4]
   17a18:	685b      	ldr	r3, [r3, #4]
   17a1a:	61bb      	str	r3, [r7, #24]
    mp_int_t step = indexes->step;
   17a1c:	687b      	ldr	r3, [r7, #4]
   17a1e:	689b      	ldr	r3, [r3, #8]
   17a20:	617b      	str	r3, [r7, #20]

    mp_obj_t res = mp_obj_new_list(0, NULL);
   17a22:	2100      	movs	r1, #0
   17a24:	2000      	movs	r0, #0
   17a26:	f7f9 ffa1 	bl	1196c <mp_obj_new_list>
   17a2a:	6138      	str	r0, [r7, #16]

    if (step < 0) {
   17a2c:	697b      	ldr	r3, [r7, #20]
   17a2e:	2b00      	cmp	r3, #0
   17a30:	da1f      	bge.n	17a72 <mp_seq_extract_slice+0x6e>
        while (start >= stop) {
   17a32:	e00c      	b.n	17a4e <mp_seq_extract_slice+0x4a>
            mp_obj_list_append(res, seq[start]);
   17a34:	69fb      	ldr	r3, [r7, #28]
   17a36:	009b      	lsls	r3, r3, #2
   17a38:	68ba      	ldr	r2, [r7, #8]
   17a3a:	4413      	add	r3, r2
   17a3c:	681b      	ldr	r3, [r3, #0]
   17a3e:	4619      	mov	r1, r3
   17a40:	6938      	ldr	r0, [r7, #16]
   17a42:	f7f9 fb01 	bl	11048 <mp_obj_list_append>
            start += step;
   17a46:	69fa      	ldr	r2, [r7, #28]
   17a48:	697b      	ldr	r3, [r7, #20]
   17a4a:	4413      	add	r3, r2
   17a4c:	61fb      	str	r3, [r7, #28]
        while (start >= stop) {
   17a4e:	69fa      	ldr	r2, [r7, #28]
   17a50:	69bb      	ldr	r3, [r7, #24]
   17a52:	429a      	cmp	r2, r3
   17a54:	daee      	bge.n	17a34 <mp_seq_extract_slice+0x30>
   17a56:	e010      	b.n	17a7a <mp_seq_extract_slice+0x76>
        }
    } else {
        while (start < stop) {
            mp_obj_list_append(res, seq[start]);
   17a58:	69fb      	ldr	r3, [r7, #28]
   17a5a:	009b      	lsls	r3, r3, #2
   17a5c:	68ba      	ldr	r2, [r7, #8]
   17a5e:	4413      	add	r3, r2
   17a60:	681b      	ldr	r3, [r3, #0]
   17a62:	4619      	mov	r1, r3
   17a64:	6938      	ldr	r0, [r7, #16]
   17a66:	f7f9 faef 	bl	11048 <mp_obj_list_append>
            start += step;
   17a6a:	69fa      	ldr	r2, [r7, #28]
   17a6c:	697b      	ldr	r3, [r7, #20]
   17a6e:	4413      	add	r3, r2
   17a70:	61fb      	str	r3, [r7, #28]
        while (start < stop) {
   17a72:	69fa      	ldr	r2, [r7, #28]
   17a74:	69bb      	ldr	r3, [r7, #24]
   17a76:	429a      	cmp	r2, r3
   17a78:	dbee      	blt.n	17a58 <mp_seq_extract_slice+0x54>
        }
    }
    return res;
   17a7a:	693b      	ldr	r3, [r7, #16]
}
   17a7c:	4618      	mov	r0, r3
   17a7e:	3720      	adds	r7, #32
   17a80:	46bd      	mov	sp, r7
   17a82:	bd80      	pop	{r7, pc}

00017a84 <mp_seq_cmp_bytes>:

// Special-case comparison function for sequences of bytes
// Don't pass MP_BINARY_OP_NOT_EQUAL here
bool mp_seq_cmp_bytes(mp_uint_t op, const byte *data1, size_t len1, const byte *data2, size_t len2) {
   17a84:	b580      	push	{r7, lr}
   17a86:	b088      	sub	sp, #32
   17a88:	af00      	add	r7, sp, #0
   17a8a:	60f8      	str	r0, [r7, #12]
   17a8c:	60b9      	str	r1, [r7, #8]
   17a8e:	607a      	str	r2, [r7, #4]
   17a90:	603b      	str	r3, [r7, #0]
    if (op == MP_BINARY_OP_EQUAL && len1 != len2) {
   17a92:	68fb      	ldr	r3, [r7, #12]
   17a94:	2b02      	cmp	r3, #2
   17a96:	d105      	bne.n	17aa4 <mp_seq_cmp_bytes+0x20>
   17a98:	687a      	ldr	r2, [r7, #4]
   17a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17a9c:	429a      	cmp	r2, r3
   17a9e:	d001      	beq.n	17aa4 <mp_seq_cmp_bytes+0x20>
        return false;
   17aa0:	2300      	movs	r3, #0
   17aa2:	e049      	b.n	17b38 <mp_seq_cmp_bytes+0xb4>
    }

    // Let's deal only with > & >=
    if (op == MP_BINARY_OP_LESS || op == MP_BINARY_OP_LESS_EQUAL) {
   17aa4:	68fb      	ldr	r3, [r7, #12]
   17aa6:	2b00      	cmp	r3, #0
   17aa8:	d002      	beq.n	17ab0 <mp_seq_cmp_bytes+0x2c>
   17aaa:	68fb      	ldr	r3, [r7, #12]
   17aac:	2b03      	cmp	r3, #3
   17aae:	d113      	bne.n	17ad8 <mp_seq_cmp_bytes+0x54>
        SWAP(const byte*, data1, data2);
   17ab0:	683b      	ldr	r3, [r7, #0]
   17ab2:	61fb      	str	r3, [r7, #28]
   17ab4:	68bb      	ldr	r3, [r7, #8]
   17ab6:	603b      	str	r3, [r7, #0]
   17ab8:	69fb      	ldr	r3, [r7, #28]
   17aba:	60bb      	str	r3, [r7, #8]
        SWAP(size_t, len1, len2);
   17abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17abe:	61bb      	str	r3, [r7, #24]
   17ac0:	687b      	ldr	r3, [r7, #4]
   17ac2:	62bb      	str	r3, [r7, #40]	; 0x28
   17ac4:	69bb      	ldr	r3, [r7, #24]
   17ac6:	607b      	str	r3, [r7, #4]
        if (op == MP_BINARY_OP_LESS) {
   17ac8:	68fb      	ldr	r3, [r7, #12]
   17aca:	2b00      	cmp	r3, #0
   17acc:	d102      	bne.n	17ad4 <mp_seq_cmp_bytes+0x50>
            op = MP_BINARY_OP_MORE;
   17ace:	2301      	movs	r3, #1
   17ad0:	60fb      	str	r3, [r7, #12]
   17ad2:	e001      	b.n	17ad8 <mp_seq_cmp_bytes+0x54>
        } else {
            op = MP_BINARY_OP_MORE_EQUAL;
   17ad4:	2304      	movs	r3, #4
   17ad6:	60fb      	str	r3, [r7, #12]
        }
    }
    size_t min_len = len1 < len2 ? len1 : len2;
   17ad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17ada:	687b      	ldr	r3, [r7, #4]
   17adc:	4293      	cmp	r3, r2
   17ade:	bf28      	it	cs
   17ae0:	4613      	movcs	r3, r2
   17ae2:	617b      	str	r3, [r7, #20]
    int res = memcmp(data1, data2, min_len);
   17ae4:	697a      	ldr	r2, [r7, #20]
   17ae6:	6839      	ldr	r1, [r7, #0]
   17ae8:	68b8      	ldr	r0, [r7, #8]
   17aea:	f005 fa39 	bl	1cf60 <memcmp>
   17aee:	6138      	str	r0, [r7, #16]
    if (op == MP_BINARY_OP_EQUAL) {
   17af0:	68fb      	ldr	r3, [r7, #12]
   17af2:	2b02      	cmp	r3, #2
   17af4:	d106      	bne.n	17b04 <mp_seq_cmp_bytes+0x80>
        // If we are checking for equality, here're the answer
        return res == 0;
   17af6:	693b      	ldr	r3, [r7, #16]
   17af8:	2b00      	cmp	r3, #0
   17afa:	bf0c      	ite	eq
   17afc:	2301      	moveq	r3, #1
   17afe:	2300      	movne	r3, #0
   17b00:	b2db      	uxtb	r3, r3
   17b02:	e019      	b.n	17b38 <mp_seq_cmp_bytes+0xb4>
    }
    if (res < 0) {
   17b04:	693b      	ldr	r3, [r7, #16]
   17b06:	2b00      	cmp	r3, #0
   17b08:	da01      	bge.n	17b0e <mp_seq_cmp_bytes+0x8a>
        return false;
   17b0a:	2300      	movs	r3, #0
   17b0c:	e014      	b.n	17b38 <mp_seq_cmp_bytes+0xb4>
    }
    if (res > 0) {
   17b0e:	693b      	ldr	r3, [r7, #16]
   17b10:	2b00      	cmp	r3, #0
   17b12:	dd01      	ble.n	17b18 <mp_seq_cmp_bytes+0x94>
        return true;
   17b14:	2301      	movs	r3, #1
   17b16:	e00f      	b.n	17b38 <mp_seq_cmp_bytes+0xb4>
    }

    // If we had tie in the last element...
    // ... and we have lists of different lengths...
    if (len1 != len2) {
   17b18:	687a      	ldr	r2, [r7, #4]
   17b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17b1c:	429a      	cmp	r2, r3
   17b1e:	d005      	beq.n	17b2c <mp_seq_cmp_bytes+0xa8>
        if (len1 < len2) {
   17b20:	687a      	ldr	r2, [r7, #4]
   17b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17b24:	429a      	cmp	r2, r3
   17b26:	d206      	bcs.n	17b36 <mp_seq_cmp_bytes+0xb2>
            // ... then longer list length wins (we deal only with >)
            return false;
   17b28:	2300      	movs	r3, #0
   17b2a:	e005      	b.n	17b38 <mp_seq_cmp_bytes+0xb4>
        }
    } else if (op == MP_BINARY_OP_MORE) {
   17b2c:	68fb      	ldr	r3, [r7, #12]
   17b2e:	2b01      	cmp	r3, #1
   17b30:	d101      	bne.n	17b36 <mp_seq_cmp_bytes+0xb2>
        // Otherwise, if we have strict relation, equality means failure
        return false;
   17b32:	2300      	movs	r3, #0
   17b34:	e000      	b.n	17b38 <mp_seq_cmp_bytes+0xb4>
    }
    return true;
   17b36:	2301      	movs	r3, #1
}
   17b38:	4618      	mov	r0, r3
   17b3a:	3720      	adds	r7, #32
   17b3c:	46bd      	mov	sp, r7
   17b3e:	bd80      	pop	{r7, pc}

00017b40 <mp_seq_cmp_objs>:

// Special-case comparison function for sequences of mp_obj_t
// Don't pass MP_BINARY_OP_NOT_EQUAL here
bool mp_seq_cmp_objs(mp_uint_t op, const mp_obj_t *items1, size_t len1, const mp_obj_t *items2, size_t len2) {
   17b40:	b580      	push	{r7, lr}
   17b42:	b088      	sub	sp, #32
   17b44:	af00      	add	r7, sp, #0
   17b46:	60f8      	str	r0, [r7, #12]
   17b48:	60b9      	str	r1, [r7, #8]
   17b4a:	607a      	str	r2, [r7, #4]
   17b4c:	603b      	str	r3, [r7, #0]
    if (op == MP_BINARY_OP_EQUAL && len1 != len2) {
   17b4e:	68fb      	ldr	r3, [r7, #12]
   17b50:	2b02      	cmp	r3, #2
   17b52:	d105      	bne.n	17b60 <mp_seq_cmp_objs+0x20>
   17b54:	687a      	ldr	r2, [r7, #4]
   17b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17b58:	429a      	cmp	r2, r3
   17b5a:	d001      	beq.n	17b60 <mp_seq_cmp_objs+0x20>
        return false;
   17b5c:	2300      	movs	r3, #0
   17b5e:	e065      	b.n	17c2c <mp_seq_cmp_objs+0xec>
    }

    // Let's deal only with > & >=
    if (op == MP_BINARY_OP_LESS || op == MP_BINARY_OP_LESS_EQUAL) {
   17b60:	68fb      	ldr	r3, [r7, #12]
   17b62:	2b00      	cmp	r3, #0
   17b64:	d002      	beq.n	17b6c <mp_seq_cmp_objs+0x2c>
   17b66:	68fb      	ldr	r3, [r7, #12]
   17b68:	2b03      	cmp	r3, #3
   17b6a:	d113      	bne.n	17b94 <mp_seq_cmp_objs+0x54>
        SWAP(const mp_obj_t *, items1, items2);
   17b6c:	683b      	ldr	r3, [r7, #0]
   17b6e:	61bb      	str	r3, [r7, #24]
   17b70:	68bb      	ldr	r3, [r7, #8]
   17b72:	603b      	str	r3, [r7, #0]
   17b74:	69bb      	ldr	r3, [r7, #24]
   17b76:	60bb      	str	r3, [r7, #8]
        SWAP(size_t, len1, len2);
   17b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17b7a:	617b      	str	r3, [r7, #20]
   17b7c:	687b      	ldr	r3, [r7, #4]
   17b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   17b80:	697b      	ldr	r3, [r7, #20]
   17b82:	607b      	str	r3, [r7, #4]
        if (op == MP_BINARY_OP_LESS) {
   17b84:	68fb      	ldr	r3, [r7, #12]
   17b86:	2b00      	cmp	r3, #0
   17b88:	d102      	bne.n	17b90 <mp_seq_cmp_objs+0x50>
            op = MP_BINARY_OP_MORE;
   17b8a:	2301      	movs	r3, #1
   17b8c:	60fb      	str	r3, [r7, #12]
   17b8e:	e001      	b.n	17b94 <mp_seq_cmp_objs+0x54>
        } else {
            op = MP_BINARY_OP_MORE_EQUAL;
   17b90:	2304      	movs	r3, #4
   17b92:	60fb      	str	r3, [r7, #12]
        }
    }

    size_t len = len1 < len2 ? len1 : len2;
   17b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17b96:	687b      	ldr	r3, [r7, #4]
   17b98:	4293      	cmp	r3, r2
   17b9a:	bf28      	it	cs
   17b9c:	4613      	movcs	r3, r2
   17b9e:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < len; i++) {
   17ba0:	2300      	movs	r3, #0
   17ba2:	61fb      	str	r3, [r7, #28]
   17ba4:	e02e      	b.n	17c04 <mp_seq_cmp_objs+0xc4>
        // If current elements equal, can't decide anything - go on
        if (mp_obj_equal(items1[i], items2[i])) {
   17ba6:	69fb      	ldr	r3, [r7, #28]
   17ba8:	009b      	lsls	r3, r3, #2
   17baa:	68ba      	ldr	r2, [r7, #8]
   17bac:	4413      	add	r3, r2
   17bae:	6818      	ldr	r0, [r3, #0]
   17bb0:	69fb      	ldr	r3, [r7, #28]
   17bb2:	009b      	lsls	r3, r3, #2
   17bb4:	683a      	ldr	r2, [r7, #0]
   17bb6:	4413      	add	r3, r2
   17bb8:	681b      	ldr	r3, [r3, #0]
   17bba:	4619      	mov	r1, r3
   17bbc:	f7f5 ffbe 	bl	db3c <mp_obj_equal>
   17bc0:	4603      	mov	r3, r0
   17bc2:	2b00      	cmp	r3, #0
   17bc4:	d003      	beq.n	17bce <mp_seq_cmp_objs+0x8e>
    for (size_t i = 0; i < len; i++) {
   17bc6:	69fb      	ldr	r3, [r7, #28]
   17bc8:	3301      	adds	r3, #1
   17bca:	61fb      	str	r3, [r7, #28]
   17bcc:	e01a      	b.n	17c04 <mp_seq_cmp_objs+0xc4>
            continue;
        }

        // Othewise, if they are not equal, we can have final decision based on them
        if (op == MP_BINARY_OP_EQUAL) {
   17bce:	68fb      	ldr	r3, [r7, #12]
   17bd0:	2b02      	cmp	r3, #2
   17bd2:	d101      	bne.n	17bd8 <mp_seq_cmp_objs+0x98>
            // In particular, if we are checking for equality, here're the answer
            return false;
   17bd4:	2300      	movs	r3, #0
   17bd6:	e029      	b.n	17c2c <mp_seq_cmp_objs+0xec>
        }

        // Otherwise, application of relation op gives the answer
        return (mp_binary_op(op, items1[i], items2[i]) == mp_const_true);
   17bd8:	69fb      	ldr	r3, [r7, #28]
   17bda:	009b      	lsls	r3, r3, #2
   17bdc:	68ba      	ldr	r2, [r7, #8]
   17bde:	4413      	add	r3, r2
   17be0:	6819      	ldr	r1, [r3, #0]
   17be2:	69fb      	ldr	r3, [r7, #28]
   17be4:	009b      	lsls	r3, r3, #2
   17be6:	683a      	ldr	r2, [r7, #0]
   17be8:	4413      	add	r3, r2
   17bea:	681b      	ldr	r3, [r3, #0]
   17bec:	461a      	mov	r2, r3
   17bee:	68f8      	ldr	r0, [r7, #12]
   17bf0:	f7f3 fe98 	bl	b924 <mp_binary_op>
   17bf4:	4602      	mov	r2, r0
   17bf6:	4b0f      	ldr	r3, [pc, #60]	; (17c34 <mp_seq_cmp_objs+0xf4>)
   17bf8:	429a      	cmp	r2, r3
   17bfa:	bf0c      	ite	eq
   17bfc:	2301      	moveq	r3, #1
   17bfe:	2300      	movne	r3, #0
   17c00:	b2db      	uxtb	r3, r3
   17c02:	e013      	b.n	17c2c <mp_seq_cmp_objs+0xec>
    for (size_t i = 0; i < len; i++) {
   17c04:	69fa      	ldr	r2, [r7, #28]
   17c06:	693b      	ldr	r3, [r7, #16]
   17c08:	429a      	cmp	r2, r3
   17c0a:	d3cc      	bcc.n	17ba6 <mp_seq_cmp_objs+0x66>
    }

    // If we had tie in the last element...
    // ... and we have lists of different lengths...
    if (len1 != len2) {
   17c0c:	687a      	ldr	r2, [r7, #4]
   17c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17c10:	429a      	cmp	r2, r3
   17c12:	d005      	beq.n	17c20 <mp_seq_cmp_objs+0xe0>
        if (len1 < len2) {
   17c14:	687a      	ldr	r2, [r7, #4]
   17c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17c18:	429a      	cmp	r2, r3
   17c1a:	d206      	bcs.n	17c2a <mp_seq_cmp_objs+0xea>
            // ... then longer list length wins (we deal only with >)
            return false;
   17c1c:	2300      	movs	r3, #0
   17c1e:	e005      	b.n	17c2c <mp_seq_cmp_objs+0xec>
        }
    } else if (op == MP_BINARY_OP_MORE) {
   17c20:	68fb      	ldr	r3, [r7, #12]
   17c22:	2b01      	cmp	r3, #1
   17c24:	d101      	bne.n	17c2a <mp_seq_cmp_objs+0xea>
        // Otherwise, if we have strict relation, sequence equality means failure
        return false;
   17c26:	2300      	movs	r3, #0
   17c28:	e000      	b.n	17c2c <mp_seq_cmp_objs+0xec>
    }

    return true;
   17c2a:	2301      	movs	r3, #1
}
   17c2c:	4618      	mov	r0, r3
   17c2e:	3720      	adds	r7, #32
   17c30:	46bd      	mov	sp, r7
   17c32:	bd80      	pop	{r7, pc}
   17c34:	00021c60 	.word	0x00021c60

00017c38 <mp_seq_index_obj>:

// Special-case of index() which searches for mp_obj_t
mp_obj_t mp_seq_index_obj(const mp_obj_t *items, size_t len, size_t n_args, const mp_obj_t *args) {
   17c38:	b580      	push	{r7, lr}
   17c3a:	b08a      	sub	sp, #40	; 0x28
   17c3c:	af00      	add	r7, sp, #0
   17c3e:	60f8      	str	r0, [r7, #12]
   17c40:	60b9      	str	r1, [r7, #8]
   17c42:	607a      	str	r2, [r7, #4]
   17c44:	603b      	str	r3, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(args[0]);
   17c46:	683b      	ldr	r3, [r7, #0]
   17c48:	681b      	ldr	r3, [r3, #0]
   17c4a:	4618      	mov	r0, r3
   17c4c:	f7f5 fe22 	bl	d894 <mp_obj_get_type>
   17c50:	61b8      	str	r0, [r7, #24]
    mp_obj_t value = args[1];
   17c52:	683b      	ldr	r3, [r7, #0]
   17c54:	685b      	ldr	r3, [r3, #4]
   17c56:	617b      	str	r3, [r7, #20]
    size_t start = 0;
   17c58:	2300      	movs	r3, #0
   17c5a:	627b      	str	r3, [r7, #36]	; 0x24
    size_t stop = len;
   17c5c:	68bb      	ldr	r3, [r7, #8]
   17c5e:	623b      	str	r3, [r7, #32]

    if (n_args >= 3) {
   17c60:	687b      	ldr	r3, [r7, #4]
   17c62:	2b02      	cmp	r3, #2
   17c64:	d914      	bls.n	17c90 <mp_seq_index_obj+0x58>
        start = mp_get_index(type, len, args[2], true);
   17c66:	683b      	ldr	r3, [r7, #0]
   17c68:	3308      	adds	r3, #8
   17c6a:	681a      	ldr	r2, [r3, #0]
   17c6c:	2301      	movs	r3, #1
   17c6e:	68b9      	ldr	r1, [r7, #8]
   17c70:	69b8      	ldr	r0, [r7, #24]
   17c72:	f7f6 f8dd 	bl	de30 <mp_get_index>
   17c76:	6278      	str	r0, [r7, #36]	; 0x24
        if (n_args >= 4) {
   17c78:	687b      	ldr	r3, [r7, #4]
   17c7a:	2b03      	cmp	r3, #3
   17c7c:	d908      	bls.n	17c90 <mp_seq_index_obj+0x58>
            stop = mp_get_index(type, len, args[3], true);
   17c7e:	683b      	ldr	r3, [r7, #0]
   17c80:	330c      	adds	r3, #12
   17c82:	681a      	ldr	r2, [r3, #0]
   17c84:	2301      	movs	r3, #1
   17c86:	68b9      	ldr	r1, [r7, #8]
   17c88:	69b8      	ldr	r0, [r7, #24]
   17c8a:	f7f6 f8d1 	bl	de30 <mp_get_index>
   17c8e:	6238      	str	r0, [r7, #32]
        }
    }

    for (size_t i = start; i < stop; i++) {
   17c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17c92:	61fb      	str	r3, [r7, #28]
   17c94:	e013      	b.n	17cbe <mp_seq_index_obj+0x86>
        if (mp_obj_equal(items[i], value)) {
   17c96:	69fb      	ldr	r3, [r7, #28]
   17c98:	009b      	lsls	r3, r3, #2
   17c9a:	68fa      	ldr	r2, [r7, #12]
   17c9c:	4413      	add	r3, r2
   17c9e:	681b      	ldr	r3, [r3, #0]
   17ca0:	6979      	ldr	r1, [r7, #20]
   17ca2:	4618      	mov	r0, r3
   17ca4:	f7f5 ff4a 	bl	db3c <mp_obj_equal>
   17ca8:	4603      	mov	r3, r0
   17caa:	2b00      	cmp	r3, #0
   17cac:	d004      	beq.n	17cb8 <mp_seq_index_obj+0x80>
            // Common sense says this cannot overflow small int
            return MP_OBJ_NEW_SMALL_INT(i);
   17cae:	69fb      	ldr	r3, [r7, #28]
   17cb0:	005b      	lsls	r3, r3, #1
   17cb2:	f043 0301 	orr.w	r3, r3, #1
   17cb6:	e009      	b.n	17ccc <mp_seq_index_obj+0x94>
    for (size_t i = start; i < stop; i++) {
   17cb8:	69fb      	ldr	r3, [r7, #28]
   17cba:	3301      	adds	r3, #1
   17cbc:	61fb      	str	r3, [r7, #28]
   17cbe:	69fa      	ldr	r2, [r7, #28]
   17cc0:	6a3b      	ldr	r3, [r7, #32]
   17cc2:	429a      	cmp	r2, r3
   17cc4:	d3e7      	bcc.n	17c96 <mp_seq_index_obj+0x5e>
        }
    }

    mp_raise_ValueError("object not in sequence");
   17cc6:	4803      	ldr	r0, [pc, #12]	; (17cd4 <mp_seq_index_obj+0x9c>)
   17cc8:	f7f5 f96c 	bl	cfa4 <mp_raise_ValueError>
}
   17ccc:	4618      	mov	r0, r3
   17cce:	3728      	adds	r7, #40	; 0x28
   17cd0:	46bd      	mov	sp, r7
   17cd2:	bd80      	pop	{r7, pc}
   17cd4:	000244f8 	.word	0x000244f8

00017cd8 <mp_seq_count_obj>:

mp_obj_t mp_seq_count_obj(const mp_obj_t *items, size_t len, mp_obj_t value) {
   17cd8:	b580      	push	{r7, lr}
   17cda:	b086      	sub	sp, #24
   17cdc:	af00      	add	r7, sp, #0
   17cde:	60f8      	str	r0, [r7, #12]
   17ce0:	60b9      	str	r1, [r7, #8]
   17ce2:	607a      	str	r2, [r7, #4]
    size_t count = 0;
   17ce4:	2300      	movs	r3, #0
   17ce6:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < len; i++) {
   17ce8:	2300      	movs	r3, #0
   17cea:	613b      	str	r3, [r7, #16]
   17cec:	e011      	b.n	17d12 <mp_seq_count_obj+0x3a>
         if (mp_obj_equal(items[i], value)) {
   17cee:	693b      	ldr	r3, [r7, #16]
   17cf0:	009b      	lsls	r3, r3, #2
   17cf2:	68fa      	ldr	r2, [r7, #12]
   17cf4:	4413      	add	r3, r2
   17cf6:	681b      	ldr	r3, [r3, #0]
   17cf8:	6879      	ldr	r1, [r7, #4]
   17cfa:	4618      	mov	r0, r3
   17cfc:	f7f5 ff1e 	bl	db3c <mp_obj_equal>
   17d00:	4603      	mov	r3, r0
   17d02:	2b00      	cmp	r3, #0
   17d04:	d002      	beq.n	17d0c <mp_seq_count_obj+0x34>
              count++;
   17d06:	697b      	ldr	r3, [r7, #20]
   17d08:	3301      	adds	r3, #1
   17d0a:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < len; i++) {
   17d0c:	693b      	ldr	r3, [r7, #16]
   17d0e:	3301      	adds	r3, #1
   17d10:	613b      	str	r3, [r7, #16]
   17d12:	693a      	ldr	r2, [r7, #16]
   17d14:	68bb      	ldr	r3, [r7, #8]
   17d16:	429a      	cmp	r2, r3
   17d18:	d3e9      	bcc.n	17cee <mp_seq_count_obj+0x16>
         }
    }

    // Common sense says this cannot overflow small int
    return MP_OBJ_NEW_SMALL_INT(count);
   17d1a:	697b      	ldr	r3, [r7, #20]
   17d1c:	005b      	lsls	r3, r3, #1
   17d1e:	f043 0301 	orr.w	r3, r3, #1
}
   17d22:	4618      	mov	r0, r3
   17d24:	3718      	adds	r7, #24
   17d26:	46bd      	mov	sp, r7
   17d28:	bd80      	pop	{r7, pc}
   17d2a:	bf00      	nop

00017d2c <mp_binary_get_size>:

#ifndef alignof
#define alignof(type) offsetof(struct { char c; type t; }, t)
#endif

size_t mp_binary_get_size(char struct_type, char val_type, mp_uint_t *palign) {
   17d2c:	b580      	push	{r7, lr}
   17d2e:	b084      	sub	sp, #16
   17d30:	af00      	add	r7, sp, #0
   17d32:	4603      	mov	r3, r0
   17d34:	603a      	str	r2, [r7, #0]
   17d36:	71fb      	strb	r3, [r7, #7]
   17d38:	460b      	mov	r3, r1
   17d3a:	71bb      	strb	r3, [r7, #6]
    size_t size = 0;
   17d3c:	2300      	movs	r3, #0
   17d3e:	60fb      	str	r3, [r7, #12]
    int align = 1;
   17d40:	2301      	movs	r3, #1
   17d42:	60bb      	str	r3, [r7, #8]
    switch (struct_type) {
   17d44:	79fb      	ldrb	r3, [r7, #7]
   17d46:	2b3e      	cmp	r3, #62	; 0x3e
   17d48:	d005      	beq.n	17d56 <mp_binary_get_size+0x2a>
   17d4a:	2b40      	cmp	r3, #64	; 0x40
   17d4c:	f000 8085 	beq.w	17e5a <mp_binary_get_size+0x12e>
   17d50:	2b3c      	cmp	r3, #60	; 0x3c
   17d52:	f040 8196 	bne.w	18082 <mp_binary_get_size+0x356>
        case '<': case '>':
            switch (val_type) {
   17d56:	79bb      	ldrb	r3, [r7, #6]
   17d58:	3b42      	subs	r3, #66	; 0x42
   17d5a:	2b2f      	cmp	r3, #47	; 0x2f
   17d5c:	f200 8190 	bhi.w	18080 <mp_binary_get_size+0x354>
   17d60:	a201      	add	r2, pc, #4	; (adr r2, 17d68 <mp_binary_get_size+0x3c>)
   17d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17d66:	bf00      	nop
   17d68:	00017e29 	.word	0x00017e29
   17d6c:	00018081 	.word	0x00018081
   17d70:	00018081 	.word	0x00018081
   17d74:	00018081 	.word	0x00018081
   17d78:	00018081 	.word	0x00018081
   17d7c:	00018081 	.word	0x00018081
   17d80:	00017e2f 	.word	0x00017e2f
   17d84:	00017e35 	.word	0x00017e35
   17d88:	00018081 	.word	0x00018081
   17d8c:	00018081 	.word	0x00018081
   17d90:	00017e3b 	.word	0x00017e3b
   17d94:	00018081 	.word	0x00018081
   17d98:	00018081 	.word	0x00018081
   17d9c:	00017e47 	.word	0x00017e47
   17da0:	00017e47 	.word	0x00017e47
   17da4:	00017e41 	.word	0x00017e41
   17da8:	00018081 	.word	0x00018081
   17dac:	00017e47 	.word	0x00017e47
   17db0:	00018081 	.word	0x00018081
   17db4:	00018081 	.word	0x00018081
   17db8:	00018081 	.word	0x00018081
   17dbc:	00018081 	.word	0x00018081
   17dc0:	00018081 	.word	0x00018081
   17dc4:	00018081 	.word	0x00018081
   17dc8:	00018081 	.word	0x00018081
   17dcc:	00018081 	.word	0x00018081
   17dd0:	00018081 	.word	0x00018081
   17dd4:	00018081 	.word	0x00018081
   17dd8:	00018081 	.word	0x00018081
   17ddc:	00018081 	.word	0x00018081
   17de0:	00018081 	.word	0x00018081
   17de4:	00018081 	.word	0x00018081
   17de8:	00017e29 	.word	0x00017e29
   17dec:	00018081 	.word	0x00018081
   17df0:	00017e53 	.word	0x00017e53
   17df4:	00018081 	.word	0x00018081
   17df8:	00017e4d 	.word	0x00017e4d
   17dfc:	00018081 	.word	0x00018081
   17e00:	00017e2f 	.word	0x00017e2f
   17e04:	00017e35 	.word	0x00017e35
   17e08:	00018081 	.word	0x00018081
   17e0c:	00018081 	.word	0x00018081
   17e10:	00017e3b 	.word	0x00017e3b
   17e14:	00018081 	.word	0x00018081
   17e18:	00018081 	.word	0x00018081
   17e1c:	00018081 	.word	0x00018081
   17e20:	00018081 	.word	0x00018081
   17e24:	00017e41 	.word	0x00017e41
                case 'b': case 'B':
                    size = 1; break;
   17e28:	2301      	movs	r3, #1
   17e2a:	60fb      	str	r3, [r7, #12]
   17e2c:	e014      	b.n	17e58 <mp_binary_get_size+0x12c>
                case 'h': case 'H':
                    size = 2; break;
   17e2e:	2302      	movs	r3, #2
   17e30:	60fb      	str	r3, [r7, #12]
   17e32:	e011      	b.n	17e58 <mp_binary_get_size+0x12c>
                case 'i': case 'I':
                    size = 4; break;
   17e34:	2304      	movs	r3, #4
   17e36:	60fb      	str	r3, [r7, #12]
   17e38:	e00e      	b.n	17e58 <mp_binary_get_size+0x12c>
                case 'l': case 'L':
                    size = 4; break;
   17e3a:	2304      	movs	r3, #4
   17e3c:	60fb      	str	r3, [r7, #12]
   17e3e:	e00b      	b.n	17e58 <mp_binary_get_size+0x12c>
                case 'q': case 'Q':
                    size = 8; break;
   17e40:	2308      	movs	r3, #8
   17e42:	60fb      	str	r3, [r7, #12]
   17e44:	e008      	b.n	17e58 <mp_binary_get_size+0x12c>
                case 'P': case 'O': case 'S':
                    size = sizeof(void*); break;
   17e46:	2304      	movs	r3, #4
   17e48:	60fb      	str	r3, [r7, #12]
   17e4a:	e005      	b.n	17e58 <mp_binary_get_size+0x12c>
                case 'f':
                    size = sizeof(float); break;
   17e4c:	2304      	movs	r3, #4
   17e4e:	60fb      	str	r3, [r7, #12]
   17e50:	e002      	b.n	17e58 <mp_binary_get_size+0x12c>
                case 'd':
                    size = sizeof(double); break;
   17e52:	2308      	movs	r3, #8
   17e54:	60fb      	str	r3, [r7, #12]
   17e56:	bf00      	nop
            }
            break;
   17e58:	e112      	b.n	18080 <mp_binary_get_size+0x354>
            // size, but that doesn't work for "bigger than int" types,
            // for example, long long may very well have long alignment
            // So, we introduce separate alignment handling, but having
            // formal support for that is different from actually supporting
            // particular (or any) ABI.
            switch (val_type) {
   17e5a:	79bb      	ldrb	r3, [r7, #6]
   17e5c:	3b01      	subs	r3, #1
   17e5e:	2b70      	cmp	r3, #112	; 0x70
   17e60:	f200 810f 	bhi.w	18082 <mp_binary_get_size+0x356>
   17e64:	a201      	add	r2, pc, #4	; (adr r2, 17e6c <mp_binary_get_size+0x140>)
   17e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17e6a:	bf00      	nop
   17e6c:	00018031 	.word	0x00018031
   17e70:	00018083 	.word	0x00018083
   17e74:	00018083 	.word	0x00018083
   17e78:	00018083 	.word	0x00018083
   17e7c:	00018083 	.word	0x00018083
   17e80:	00018083 	.word	0x00018083
   17e84:	00018083 	.word	0x00018083
   17e88:	00018083 	.word	0x00018083
   17e8c:	00018083 	.word	0x00018083
   17e90:	00018083 	.word	0x00018083
   17e94:	00018083 	.word	0x00018083
   17e98:	00018083 	.word	0x00018083
   17e9c:	00018083 	.word	0x00018083
   17ea0:	00018083 	.word	0x00018083
   17ea4:	00018083 	.word	0x00018083
   17ea8:	00018083 	.word	0x00018083
   17eac:	00018083 	.word	0x00018083
   17eb0:	00018083 	.word	0x00018083
   17eb4:	00018083 	.word	0x00018083
   17eb8:	00018083 	.word	0x00018083
   17ebc:	00018083 	.word	0x00018083
   17ec0:	00018083 	.word	0x00018083
   17ec4:	00018083 	.word	0x00018083
   17ec8:	00018083 	.word	0x00018083
   17ecc:	00018083 	.word	0x00018083
   17ed0:	00018083 	.word	0x00018083
   17ed4:	00018083 	.word	0x00018083
   17ed8:	00018083 	.word	0x00018083
   17edc:	00018083 	.word	0x00018083
   17ee0:	00018083 	.word	0x00018083
   17ee4:	00018083 	.word	0x00018083
   17ee8:	00018083 	.word	0x00018083
   17eec:	00018083 	.word	0x00018083
   17ef0:	00018083 	.word	0x00018083
   17ef4:	00018083 	.word	0x00018083
   17ef8:	00018083 	.word	0x00018083
   17efc:	00018083 	.word	0x00018083
   17f00:	00018083 	.word	0x00018083
   17f04:	00018083 	.word	0x00018083
   17f08:	00018083 	.word	0x00018083
   17f0c:	00018083 	.word	0x00018083
   17f10:	00018083 	.word	0x00018083
   17f14:	00018083 	.word	0x00018083
   17f18:	00018083 	.word	0x00018083
   17f1c:	00018083 	.word	0x00018083
   17f20:	00018083 	.word	0x00018083
   17f24:	00018083 	.word	0x00018083
   17f28:	00018083 	.word	0x00018083
   17f2c:	00018083 	.word	0x00018083
   17f30:	00018083 	.word	0x00018083
   17f34:	00018083 	.word	0x00018083
   17f38:	00018083 	.word	0x00018083
   17f3c:	00018083 	.word	0x00018083
   17f40:	00018083 	.word	0x00018083
   17f44:	00018083 	.word	0x00018083
   17f48:	00018083 	.word	0x00018083
   17f4c:	00018083 	.word	0x00018083
   17f50:	00018083 	.word	0x00018083
   17f54:	00018083 	.word	0x00018083
   17f58:	00018083 	.word	0x00018083
   17f5c:	00018083 	.word	0x00018083
   17f60:	00018083 	.word	0x00018083
   17f64:	00018083 	.word	0x00018083
   17f68:	00018083 	.word	0x00018083
   17f6c:	00018083 	.word	0x00018083
   17f70:	00018031 	.word	0x00018031
   17f74:	00018083 	.word	0x00018083
   17f78:	00018083 	.word	0x00018083
   17f7c:	00018083 	.word	0x00018083
   17f80:	00018083 	.word	0x00018083
   17f84:	00018083 	.word	0x00018083
   17f88:	0001803b 	.word	0x0001803b
   17f8c:	00018045 	.word	0x00018045
   17f90:	00018083 	.word	0x00018083
   17f94:	00018083 	.word	0x00018083
   17f98:	0001804f 	.word	0x0001804f
   17f9c:	00018083 	.word	0x00018083
   17fa0:	00018083 	.word	0x00018083
   17fa4:	00018063 	.word	0x00018063
   17fa8:	00018063 	.word	0x00018063
   17fac:	00018059 	.word	0x00018059
   17fb0:	00018083 	.word	0x00018083
   17fb4:	00018063 	.word	0x00018063
   17fb8:	00018083 	.word	0x00018083
   17fbc:	00018083 	.word	0x00018083
   17fc0:	00018083 	.word	0x00018083
   17fc4:	00018083 	.word	0x00018083
   17fc8:	00018083 	.word	0x00018083
   17fcc:	00018083 	.word	0x00018083
   17fd0:	00018083 	.word	0x00018083
   17fd4:	00018083 	.word	0x00018083
   17fd8:	00018083 	.word	0x00018083
   17fdc:	00018083 	.word	0x00018083
   17fe0:	00018083 	.word	0x00018083
   17fe4:	00018083 	.word	0x00018083
   17fe8:	00018083 	.word	0x00018083
   17fec:	00018083 	.word	0x00018083
   17ff0:	00018031 	.word	0x00018031
   17ff4:	00018083 	.word	0x00018083
   17ff8:	00018077 	.word	0x00018077
   17ffc:	00018083 	.word	0x00018083
   18000:	0001806d 	.word	0x0001806d
   18004:	00018083 	.word	0x00018083
   18008:	0001803b 	.word	0x0001803b
   1800c:	00018045 	.word	0x00018045
   18010:	00018083 	.word	0x00018083
   18014:	00018083 	.word	0x00018083
   18018:	0001804f 	.word	0x0001804f
   1801c:	00018083 	.word	0x00018083
   18020:	00018083 	.word	0x00018083
   18024:	00018083 	.word	0x00018083
   18028:	00018083 	.word	0x00018083
   1802c:	00018059 	.word	0x00018059
                case BYTEARRAY_TYPECODE:
                case 'b': case 'B':
                    align = size = 1; break;
   18030:	2301      	movs	r3, #1
   18032:	60fb      	str	r3, [r7, #12]
   18034:	2301      	movs	r3, #1
   18036:	60bb      	str	r3, [r7, #8]
   18038:	e023      	b.n	18082 <mp_binary_get_size+0x356>
                case 'h': case 'H':
                    align = alignof(short);
   1803a:	2302      	movs	r3, #2
   1803c:	60bb      	str	r3, [r7, #8]
                    size = sizeof(short); break;
   1803e:	2302      	movs	r3, #2
   18040:	60fb      	str	r3, [r7, #12]
   18042:	e01e      	b.n	18082 <mp_binary_get_size+0x356>
                case 'i': case 'I':
                    align = alignof(int);
   18044:	2304      	movs	r3, #4
   18046:	60bb      	str	r3, [r7, #8]
                    size = sizeof(int); break;
   18048:	2304      	movs	r3, #4
   1804a:	60fb      	str	r3, [r7, #12]
   1804c:	e019      	b.n	18082 <mp_binary_get_size+0x356>
                case 'l': case 'L':
                    align = alignof(long);
   1804e:	2304      	movs	r3, #4
   18050:	60bb      	str	r3, [r7, #8]
                    size = sizeof(long); break;
   18052:	2304      	movs	r3, #4
   18054:	60fb      	str	r3, [r7, #12]
   18056:	e014      	b.n	18082 <mp_binary_get_size+0x356>
                case 'q': case 'Q':
                    align = alignof(long long);
   18058:	2308      	movs	r3, #8
   1805a:	60bb      	str	r3, [r7, #8]
                    size = sizeof(long long); break;
   1805c:	2308      	movs	r3, #8
   1805e:	60fb      	str	r3, [r7, #12]
   18060:	e00f      	b.n	18082 <mp_binary_get_size+0x356>
                case 'P': case 'O': case 'S':
                    align = alignof(void*);
   18062:	2304      	movs	r3, #4
   18064:	60bb      	str	r3, [r7, #8]
                    size = sizeof(void*); break;
   18066:	2304      	movs	r3, #4
   18068:	60fb      	str	r3, [r7, #12]
   1806a:	e00a      	b.n	18082 <mp_binary_get_size+0x356>
                case 'f':
                    align = alignof(float);
   1806c:	2304      	movs	r3, #4
   1806e:	60bb      	str	r3, [r7, #8]
                    size = sizeof(float); break;
   18070:	2304      	movs	r3, #4
   18072:	60fb      	str	r3, [r7, #12]
   18074:	e005      	b.n	18082 <mp_binary_get_size+0x356>
                case 'd':
                    align = alignof(double);
   18076:	2308      	movs	r3, #8
   18078:	60bb      	str	r3, [r7, #8]
                    size = sizeof(double); break;
   1807a:	2308      	movs	r3, #8
   1807c:	60fb      	str	r3, [r7, #12]
   1807e:	e000      	b.n	18082 <mp_binary_get_size+0x356>
            break;
   18080:	bf00      	nop
            }
        }
    }

    if (size == 0) {
   18082:	68fb      	ldr	r3, [r7, #12]
   18084:	2b00      	cmp	r3, #0
   18086:	d102      	bne.n	1808e <mp_binary_get_size+0x362>
        mp_raise_ValueError("bad typecode");
   18088:	4806      	ldr	r0, [pc, #24]	; (180a4 <mp_binary_get_size+0x378>)
   1808a:	f7f4 ff8b 	bl	cfa4 <mp_raise_ValueError>
    }

    if (palign != NULL) {
   1808e:	683b      	ldr	r3, [r7, #0]
   18090:	2b00      	cmp	r3, #0
   18092:	d002      	beq.n	1809a <mp_binary_get_size+0x36e>
        *palign = align;
   18094:	68ba      	ldr	r2, [r7, #8]
   18096:	683b      	ldr	r3, [r7, #0]
   18098:	601a      	str	r2, [r3, #0]
    }
    return size;
   1809a:	68fb      	ldr	r3, [r7, #12]
}
   1809c:	4618      	mov	r0, r3
   1809e:	3710      	adds	r7, #16
   180a0:	46bd      	mov	sp, r7
   180a2:	bd80      	pop	{r7, pc}
   180a4:	00024510 	.word	0x00024510

000180a8 <mp_binary_get_val_array>:

mp_obj_t mp_binary_get_val_array(char typecode, void *p, mp_uint_t index) {
   180a8:	b580      	push	{r7, lr}
   180aa:	b086      	sub	sp, #24
   180ac:	af00      	add	r7, sp, #0
   180ae:	4603      	mov	r3, r0
   180b0:	60b9      	str	r1, [r7, #8]
   180b2:	607a      	str	r2, [r7, #4]
   180b4:	73fb      	strb	r3, [r7, #15]
    mp_int_t val = 0;
   180b6:	2300      	movs	r3, #0
   180b8:	617b      	str	r3, [r7, #20]
    switch (typecode) {
   180ba:	7bfb      	ldrb	r3, [r7, #15]
   180bc:	3b01      	subs	r3, #1
   180be:	2b6b      	cmp	r3, #107	; 0x6b
   180c0:	f200 8130 	bhi.w	18324 <mp_binary_get_val_array+0x27c>
   180c4:	a201      	add	r2, pc, #4	; (adr r2, 180cc <mp_binary_get_val_array+0x24>)
   180c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   180ca:	bf00      	nop
   180cc:	0001828b 	.word	0x0001828b
   180d0:	00018325 	.word	0x00018325
   180d4:	00018325 	.word	0x00018325
   180d8:	00018325 	.word	0x00018325
   180dc:	00018325 	.word	0x00018325
   180e0:	00018325 	.word	0x00018325
   180e4:	00018325 	.word	0x00018325
   180e8:	00018325 	.word	0x00018325
   180ec:	00018325 	.word	0x00018325
   180f0:	00018325 	.word	0x00018325
   180f4:	00018325 	.word	0x00018325
   180f8:	00018325 	.word	0x00018325
   180fc:	00018325 	.word	0x00018325
   18100:	00018325 	.word	0x00018325
   18104:	00018325 	.word	0x00018325
   18108:	00018325 	.word	0x00018325
   1810c:	00018325 	.word	0x00018325
   18110:	00018325 	.word	0x00018325
   18114:	00018325 	.word	0x00018325
   18118:	00018325 	.word	0x00018325
   1811c:	00018325 	.word	0x00018325
   18120:	00018325 	.word	0x00018325
   18124:	00018325 	.word	0x00018325
   18128:	00018325 	.word	0x00018325
   1812c:	00018325 	.word	0x00018325
   18130:	00018325 	.word	0x00018325
   18134:	00018325 	.word	0x00018325
   18138:	00018325 	.word	0x00018325
   1813c:	00018325 	.word	0x00018325
   18140:	00018325 	.word	0x00018325
   18144:	00018325 	.word	0x00018325
   18148:	00018325 	.word	0x00018325
   1814c:	00018325 	.word	0x00018325
   18150:	00018325 	.word	0x00018325
   18154:	00018325 	.word	0x00018325
   18158:	00018325 	.word	0x00018325
   1815c:	00018325 	.word	0x00018325
   18160:	00018325 	.word	0x00018325
   18164:	00018325 	.word	0x00018325
   18168:	00018325 	.word	0x00018325
   1816c:	00018325 	.word	0x00018325
   18170:	00018325 	.word	0x00018325
   18174:	00018325 	.word	0x00018325
   18178:	00018325 	.word	0x00018325
   1817c:	00018325 	.word	0x00018325
   18180:	00018325 	.word	0x00018325
   18184:	00018325 	.word	0x00018325
   18188:	00018325 	.word	0x00018325
   1818c:	00018325 	.word	0x00018325
   18190:	00018325 	.word	0x00018325
   18194:	00018325 	.word	0x00018325
   18198:	00018325 	.word	0x00018325
   1819c:	00018325 	.word	0x00018325
   181a0:	00018325 	.word	0x00018325
   181a4:	00018325 	.word	0x00018325
   181a8:	00018325 	.word	0x00018325
   181ac:	00018325 	.word	0x00018325
   181b0:	00018325 	.word	0x00018325
   181b4:	00018325 	.word	0x00018325
   181b8:	00018325 	.word	0x00018325
   181bc:	00018325 	.word	0x00018325
   181c0:	00018325 	.word	0x00018325
   181c4:	00018325 	.word	0x00018325
   181c8:	00018325 	.word	0x00018325
   181cc:	00018325 	.word	0x00018325
   181d0:	0001828b 	.word	0x0001828b
   181d4:	00018325 	.word	0x00018325
   181d8:	00018325 	.word	0x00018325
   181dc:	00018325 	.word	0x00018325
   181e0:	00018325 	.word	0x00018325
   181e4:	00018325 	.word	0x00018325
   181e8:	000182a7 	.word	0x000182a7
   181ec:	000182c9 	.word	0x000182c9
   181f0:	00018325 	.word	0x00018325
   181f4:	00018325 	.word	0x00018325
   181f8:	000182f1 	.word	0x000182f1
   181fc:	00018325 	.word	0x00018325
   18200:	00018325 	.word	0x00018325
   18204:	00018305 	.word	0x00018305
   18208:	00018311 	.word	0x00018311
   1820c:	00018325 	.word	0x00018325
   18210:	00018325 	.word	0x00018325
   18214:	00018325 	.word	0x00018325
   18218:	00018325 	.word	0x00018325
   1821c:	00018325 	.word	0x00018325
   18220:	00018325 	.word	0x00018325
   18224:	00018325 	.word	0x00018325
   18228:	00018325 	.word	0x00018325
   1822c:	00018325 	.word	0x00018325
   18230:	00018325 	.word	0x00018325
   18234:	00018325 	.word	0x00018325
   18238:	00018325 	.word	0x00018325
   1823c:	00018325 	.word	0x00018325
   18240:	00018325 	.word	0x00018325
   18244:	00018325 	.word	0x00018325
   18248:	00018325 	.word	0x00018325
   1824c:	00018325 	.word	0x00018325
   18250:	0001827d 	.word	0x0001827d
   18254:	00018325 	.word	0x00018325
   18258:	00018325 	.word	0x00018325
   1825c:	00018325 	.word	0x00018325
   18260:	00018325 	.word	0x00018325
   18264:	00018325 	.word	0x00018325
   18268:	00018297 	.word	0x00018297
   1826c:	000182b5 	.word	0x000182b5
   18270:	00018325 	.word	0x00018325
   18274:	00018325 	.word	0x00018325
   18278:	000182dd 	.word	0x000182dd
        case 'b':
            val = ((signed char*)p)[index];
   1827c:	68ba      	ldr	r2, [r7, #8]
   1827e:	687b      	ldr	r3, [r7, #4]
   18280:	4413      	add	r3, r2
   18282:	f993 3000 	ldrsb.w	r3, [r3]
   18286:	617b      	str	r3, [r7, #20]
            break;
   18288:	e04c      	b.n	18324 <mp_binary_get_val_array+0x27c>
        case BYTEARRAY_TYPECODE:
        case 'B':
            val = ((unsigned char*)p)[index];
   1828a:	68ba      	ldr	r2, [r7, #8]
   1828c:	687b      	ldr	r3, [r7, #4]
   1828e:	4413      	add	r3, r2
   18290:	781b      	ldrb	r3, [r3, #0]
   18292:	617b      	str	r3, [r7, #20]
            break;
   18294:	e046      	b.n	18324 <mp_binary_get_val_array+0x27c>
        case 'h':
            val = ((short*)p)[index];
   18296:	687b      	ldr	r3, [r7, #4]
   18298:	005b      	lsls	r3, r3, #1
   1829a:	68ba      	ldr	r2, [r7, #8]
   1829c:	4413      	add	r3, r2
   1829e:	f9b3 3000 	ldrsh.w	r3, [r3]
   182a2:	617b      	str	r3, [r7, #20]
            break;
   182a4:	e03e      	b.n	18324 <mp_binary_get_val_array+0x27c>
        case 'H':
            val = ((unsigned short*)p)[index];
   182a6:	687b      	ldr	r3, [r7, #4]
   182a8:	005b      	lsls	r3, r3, #1
   182aa:	68ba      	ldr	r2, [r7, #8]
   182ac:	4413      	add	r3, r2
   182ae:	881b      	ldrh	r3, [r3, #0]
   182b0:	617b      	str	r3, [r7, #20]
            break;
   182b2:	e037      	b.n	18324 <mp_binary_get_val_array+0x27c>
        case 'i':
            return mp_obj_new_int(((int*)p)[index]);
   182b4:	687b      	ldr	r3, [r7, #4]
   182b6:	009b      	lsls	r3, r3, #2
   182b8:	68ba      	ldr	r2, [r7, #8]
   182ba:	4413      	add	r3, r2
   182bc:	681b      	ldr	r3, [r3, #0]
   182be:	4618      	mov	r0, r3
   182c0:	f7f8 fb8e 	bl	109e0 <mp_obj_new_int>
   182c4:	4603      	mov	r3, r0
   182c6:	e031      	b.n	1832c <mp_binary_get_val_array+0x284>
        case 'I':
            return mp_obj_new_int_from_uint(((unsigned int*)p)[index]);
   182c8:	687b      	ldr	r3, [r7, #4]
   182ca:	009b      	lsls	r3, r3, #2
   182cc:	68ba      	ldr	r2, [r7, #8]
   182ce:	4413      	add	r3, r2
   182d0:	681b      	ldr	r3, [r3, #0]
   182d2:	4618      	mov	r0, r3
   182d4:	f7f8 fb6a 	bl	109ac <mp_obj_new_int_from_uint>
   182d8:	4603      	mov	r3, r0
   182da:	e027      	b.n	1832c <mp_binary_get_val_array+0x284>
        case 'l':
            return mp_obj_new_int(((long*)p)[index]);
   182dc:	687b      	ldr	r3, [r7, #4]
   182de:	009b      	lsls	r3, r3, #2
   182e0:	68ba      	ldr	r2, [r7, #8]
   182e2:	4413      	add	r3, r2
   182e4:	681b      	ldr	r3, [r3, #0]
   182e6:	4618      	mov	r0, r3
   182e8:	f7f8 fb7a 	bl	109e0 <mp_obj_new_int>
   182ec:	4603      	mov	r3, r0
   182ee:	e01d      	b.n	1832c <mp_binary_get_val_array+0x284>
        case 'L':
            return mp_obj_new_int_from_uint(((unsigned long*)p)[index]);
   182f0:	687b      	ldr	r3, [r7, #4]
   182f2:	009b      	lsls	r3, r3, #2
   182f4:	68ba      	ldr	r2, [r7, #8]
   182f6:	4413      	add	r3, r2
   182f8:	681b      	ldr	r3, [r3, #0]
   182fa:	4618      	mov	r0, r3
   182fc:	f7f8 fb56 	bl	109ac <mp_obj_new_int_from_uint>
   18300:	4603      	mov	r3, r0
   18302:	e013      	b.n	1832c <mp_binary_get_val_array+0x284>
        case 'd':
            return mp_obj_new_float(((double*)p)[index]);
#endif
        // Extension to CPython: array of objects
        case 'O':
            return ((mp_obj_t*)p)[index];
   18304:	687b      	ldr	r3, [r7, #4]
   18306:	009b      	lsls	r3, r3, #2
   18308:	68ba      	ldr	r2, [r7, #8]
   1830a:	4413      	add	r3, r2
   1830c:	681b      	ldr	r3, [r3, #0]
   1830e:	e00d      	b.n	1832c <mp_binary_get_val_array+0x284>
        // Extension to CPython: array of pointers
        case 'P':
            return mp_obj_new_int((mp_int_t)(uintptr_t)((void**)p)[index]);
   18310:	687b      	ldr	r3, [r7, #4]
   18312:	009b      	lsls	r3, r3, #2
   18314:	68ba      	ldr	r2, [r7, #8]
   18316:	4413      	add	r3, r2
   18318:	681b      	ldr	r3, [r3, #0]
   1831a:	4618      	mov	r0, r3
   1831c:	f7f8 fb60 	bl	109e0 <mp_obj_new_int>
   18320:	4603      	mov	r3, r0
   18322:	e003      	b.n	1832c <mp_binary_get_val_array+0x284>
    }
    return MP_OBJ_NEW_SMALL_INT(val);
   18324:	697b      	ldr	r3, [r7, #20]
   18326:	005b      	lsls	r3, r3, #1
   18328:	f043 0301 	orr.w	r3, r3, #1
}
   1832c:	4618      	mov	r0, r3
   1832e:	3718      	adds	r7, #24
   18330:	46bd      	mov	sp, r7
   18332:	bd80      	pop	{r7, pc}

00018334 <mp_binary_get_int>:

// The long long type is guaranteed to hold at least 64 bits, and size is at
// most 8 (for q and Q), so we will always be able to parse the given data
// and fit it into a long long.
long long mp_binary_get_int(mp_uint_t size, bool is_signed, bool big_endian, const byte *src) {
   18334:	b4b0      	push	{r4, r5, r7}
   18336:	b08b      	sub	sp, #44	; 0x2c
   18338:	af00      	add	r7, sp, #0
   1833a:	60f8      	str	r0, [r7, #12]
   1833c:	607b      	str	r3, [r7, #4]
   1833e:	460b      	mov	r3, r1
   18340:	72fb      	strb	r3, [r7, #11]
   18342:	4613      	mov	r3, r2
   18344:	72bb      	strb	r3, [r7, #10]
    int delta;
    if (!big_endian) {
   18346:	7abb      	ldrb	r3, [r7, #10]
   18348:	f083 0301 	eor.w	r3, r3, #1
   1834c:	b2db      	uxtb	r3, r3
   1834e:	2b00      	cmp	r3, #0
   18350:	d008      	beq.n	18364 <mp_binary_get_int+0x30>
        delta = -1;
   18352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18356:	627b      	str	r3, [r7, #36]	; 0x24
        src += size - 1;
   18358:	68fb      	ldr	r3, [r7, #12]
   1835a:	3b01      	subs	r3, #1
   1835c:	687a      	ldr	r2, [r7, #4]
   1835e:	4413      	add	r3, r2
   18360:	607b      	str	r3, [r7, #4]
   18362:	e001      	b.n	18368 <mp_binary_get_int+0x34>
    } else {
        delta = 1;
   18364:	2301      	movs	r3, #1
   18366:	627b      	str	r3, [r7, #36]	; 0x24
    }

    long long val = 0;
   18368:	f04f 0200 	mov.w	r2, #0
   1836c:	f04f 0300 	mov.w	r3, #0
   18370:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (is_signed && *src & 0x80) {
   18374:	7afb      	ldrb	r3, [r7, #11]
   18376:	2b00      	cmp	r3, #0
   18378:	d00a      	beq.n	18390 <mp_binary_get_int+0x5c>
   1837a:	687b      	ldr	r3, [r7, #4]
   1837c:	781b      	ldrb	r3, [r3, #0]
   1837e:	b25b      	sxtb	r3, r3
   18380:	2b00      	cmp	r3, #0
   18382:	da05      	bge.n	18390 <mp_binary_get_int+0x5c>
        val = -1;
   18384:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1838c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    }
    for (uint i = 0; i < size; i++) {
   18390:	2300      	movs	r3, #0
   18392:	617b      	str	r3, [r7, #20]
   18394:	e01b      	b.n	183ce <mp_binary_get_int+0x9a>
        val <<= 8;
   18396:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1839a:	021d      	lsls	r5, r3, #8
   1839c:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
   183a0:	0214      	lsls	r4, r2, #8
   183a2:	e9c7 4506 	strd	r4, r5, [r7, #24]
        val |= *src;
   183a6:	687b      	ldr	r3, [r7, #4]
   183a8:	781b      	ldrb	r3, [r3, #0]
   183aa:	b2da      	uxtb	r2, r3
   183ac:	f04f 0300 	mov.w	r3, #0
   183b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   183b4:	ea42 0200 	orr.w	r2, r2, r0
   183b8:	ea43 0301 	orr.w	r3, r3, r1
   183bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
        src += delta;
   183c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   183c2:	687a      	ldr	r2, [r7, #4]
   183c4:	4413      	add	r3, r2
   183c6:	607b      	str	r3, [r7, #4]
    for (uint i = 0; i < size; i++) {
   183c8:	697b      	ldr	r3, [r7, #20]
   183ca:	3301      	adds	r3, #1
   183cc:	617b      	str	r3, [r7, #20]
   183ce:	697a      	ldr	r2, [r7, #20]
   183d0:	68fb      	ldr	r3, [r7, #12]
   183d2:	429a      	cmp	r2, r3
   183d4:	d3df      	bcc.n	18396 <mp_binary_get_int+0x62>
    }

    return val;
   183d6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
}
   183da:	4618      	mov	r0, r3
   183dc:	4621      	mov	r1, r4
   183de:	372c      	adds	r7, #44	; 0x2c
   183e0:	46bd      	mov	sp, r7
   183e2:	bcb0      	pop	{r4, r5, r7}
   183e4:	4770      	bx	lr
   183e6:	bf00      	nop

000183e8 <mp_binary_get_val>:

#define is_signed(typecode) (typecode > 'Z')
mp_obj_t mp_binary_get_val(char struct_type, char val_type, byte **ptr) {
   183e8:	b590      	push	{r4, r7, lr}
   183ea:	b089      	sub	sp, #36	; 0x24
   183ec:	af00      	add	r7, sp, #0
   183ee:	4603      	mov	r3, r0
   183f0:	603a      	str	r2, [r7, #0]
   183f2:	71fb      	strb	r3, [r7, #7]
   183f4:	460b      	mov	r3, r1
   183f6:	71bb      	strb	r3, [r7, #6]
    byte *p = *ptr;
   183f8:	683b      	ldr	r3, [r7, #0]
   183fa:	681b      	ldr	r3, [r3, #0]
   183fc:	61fb      	str	r3, [r7, #28]
    mp_uint_t align;

    size_t size = mp_binary_get_size(struct_type, val_type, &align);
   183fe:	f107 0208 	add.w	r2, r7, #8
   18402:	79b9      	ldrb	r1, [r7, #6]
   18404:	79fb      	ldrb	r3, [r7, #7]
   18406:	4618      	mov	r0, r3
   18408:	f7ff fc90 	bl	17d2c <mp_binary_get_size>
   1840c:	61b8      	str	r0, [r7, #24]
    if (struct_type == '@') {
   1840e:	79fb      	ldrb	r3, [r7, #7]
   18410:	2b40      	cmp	r3, #64	; 0x40
   18412:	d109      	bne.n	18428 <mp_binary_get_val+0x40>
        // Make pointer aligned
        p = (byte*)MP_ALIGN(p, (size_t)align);
   18414:	68ba      	ldr	r2, [r7, #8]
   18416:	69fb      	ldr	r3, [r7, #28]
   18418:	4413      	add	r3, r2
   1841a:	1e5a      	subs	r2, r3, #1
   1841c:	68bb      	ldr	r3, [r7, #8]
   1841e:	425b      	negs	r3, r3
   18420:	4013      	ands	r3, r2
   18422:	61fb      	str	r3, [r7, #28]
        #if MP_ENDIANNESS_LITTLE
        struct_type = '<';
   18424:	233c      	movs	r3, #60	; 0x3c
   18426:	71fb      	strb	r3, [r7, #7]
        #else
        struct_type = '>';
        #endif
    }
    *ptr = p + size;
   18428:	69fa      	ldr	r2, [r7, #28]
   1842a:	69bb      	ldr	r3, [r7, #24]
   1842c:	441a      	add	r2, r3
   1842e:	683b      	ldr	r3, [r7, #0]
   18430:	601a      	str	r2, [r3, #0]

    long long val = mp_binary_get_int(size, is_signed(val_type), (struct_type == '>'), p);
   18432:	79bb      	ldrb	r3, [r7, #6]
   18434:	2b5a      	cmp	r3, #90	; 0x5a
   18436:	bf8c      	ite	hi
   18438:	2301      	movhi	r3, #1
   1843a:	2300      	movls	r3, #0
   1843c:	b2d9      	uxtb	r1, r3
   1843e:	79fb      	ldrb	r3, [r7, #7]
   18440:	2b3e      	cmp	r3, #62	; 0x3e
   18442:	bf0c      	ite	eq
   18444:	2301      	moveq	r3, #1
   18446:	2300      	movne	r3, #0
   18448:	b2da      	uxtb	r2, r3
   1844a:	69fb      	ldr	r3, [r7, #28]
   1844c:	69b8      	ldr	r0, [r7, #24]
   1844e:	f7ff ff71 	bl	18334 <mp_binary_get_int>
   18452:	e9c7 0104 	strd	r0, r1, [r7, #16]

    if (val_type == 'O') {
   18456:	79bb      	ldrb	r3, [r7, #6]
   18458:	2b4f      	cmp	r3, #79	; 0x4f
   1845a:	d101      	bne.n	18460 <mp_binary_get_val+0x78>
        return (mp_obj_t)(mp_uint_t)val;
   1845c:	693b      	ldr	r3, [r7, #16]
   1845e:	e045      	b.n	184ec <mp_binary_get_val+0x104>
    } else if (val_type == 'S') {
   18460:	79bb      	ldrb	r3, [r7, #6]
   18462:	2b53      	cmp	r3, #83	; 0x53
   18464:	d10b      	bne.n	1847e <mp_binary_get_val+0x96>
        const char *s_val = (const char*)(uintptr_t)(mp_uint_t)val;
   18466:	693b      	ldr	r3, [r7, #16]
   18468:	60fb      	str	r3, [r7, #12]
        return mp_obj_new_str(s_val, strlen(s_val));
   1846a:	68f8      	ldr	r0, [r7, #12]
   1846c:	f004 fdca 	bl	1d004 <strlen>
   18470:	4603      	mov	r3, r0
   18472:	4619      	mov	r1, r3
   18474:	68f8      	ldr	r0, [r7, #12]
   18476:	f7fd f859 	bl	1552c <mp_obj_new_str>
   1847a:	4603      	mov	r3, r0
   1847c:	e036      	b.n	184ec <mp_binary_get_val+0x104>
        return mp_obj_new_float(fpu.f);
    } else if (val_type == 'd') {
        union { uint64_t i; double f; } fpu = {val};
        return mp_obj_new_float(fpu.f);
#endif
    } else if (is_signed(val_type)) {
   1847e:	79bb      	ldrb	r3, [r7, #6]
   18480:	2b5a      	cmp	r3, #90	; 0x5a
   18482:	d91c      	bls.n	184be <mp_binary_get_val+0xd6>
        if ((long long)MP_SMALL_INT_MIN <= val && val <= (long long)MP_SMALL_INT_MAX) {
   18484:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   18488:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
   1848c:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
   18490:	db0f      	blt.n	184b2 <mp_binary_get_val+0xca>
   18492:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   18496:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
   1849a:	f04f 0200 	mov.w	r2, #0
   1849e:	4299      	cmp	r1, r3
   184a0:	eb72 0304 	sbcs.w	r3, r2, r4
   184a4:	db05      	blt.n	184b2 <mp_binary_get_val+0xca>
            return mp_obj_new_int((mp_int_t)val);
   184a6:	693b      	ldr	r3, [r7, #16]
   184a8:	4618      	mov	r0, r3
   184aa:	f7f8 fa99 	bl	109e0 <mp_obj_new_int>
   184ae:	4603      	mov	r3, r0
   184b0:	e01c      	b.n	184ec <mp_binary_get_val+0x104>
        } else {
            return mp_obj_new_int_from_ll(val);
   184b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   184b6:	f7f8 fa5d 	bl	10974 <mp_obj_new_int_from_ll>
   184ba:	4603      	mov	r3, r0
   184bc:	e016      	b.n	184ec <mp_binary_get_val+0x104>
        }
    } else {
        if ((unsigned long long)val <= (unsigned long long)MP_SMALL_INT_MAX) {
   184be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   184c2:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
   184c6:	f04f 0200 	mov.w	r2, #0
   184ca:	42a2      	cmp	r2, r4
   184cc:	bf08      	it	eq
   184ce:	4299      	cmpeq	r1, r3
   184d0:	d305      	bcc.n	184de <mp_binary_get_val+0xf6>
            return mp_obj_new_int_from_uint((mp_uint_t)val);
   184d2:	693b      	ldr	r3, [r7, #16]
   184d4:	4618      	mov	r0, r3
   184d6:	f7f8 fa69 	bl	109ac <mp_obj_new_int_from_uint>
   184da:	4603      	mov	r3, r0
   184dc:	e006      	b.n	184ec <mp_binary_get_val+0x104>
        } else {
            return mp_obj_new_int_from_ull(val);
   184de:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   184e2:	4618      	mov	r0, r3
   184e4:	4621      	mov	r1, r4
   184e6:	f7f8 fa53 	bl	10990 <mp_obj_new_int_from_ull>
   184ea:	4603      	mov	r3, r0
        }
    }
}
   184ec:	4618      	mov	r0, r3
   184ee:	3724      	adds	r7, #36	; 0x24
   184f0:	46bd      	mov	sp, r7
   184f2:	bd90      	pop	{r4, r7, pc}

000184f4 <mp_binary_set_int>:

void mp_binary_set_int(mp_uint_t val_sz, bool big_endian, byte *dest, mp_uint_t val) {
   184f4:	b580      	push	{r7, lr}
   184f6:	b086      	sub	sp, #24
   184f8:	af00      	add	r7, sp, #0
   184fa:	60f8      	str	r0, [r7, #12]
   184fc:	607a      	str	r2, [r7, #4]
   184fe:	603b      	str	r3, [r7, #0]
   18500:	460b      	mov	r3, r1
   18502:	72fb      	strb	r3, [r7, #11]
    if (MP_ENDIANNESS_LITTLE && !big_endian) {
   18504:	7afb      	ldrb	r3, [r7, #11]
   18506:	f083 0301 	eor.w	r3, r3, #1
   1850a:	b2db      	uxtb	r3, r3
   1850c:	2b00      	cmp	r3, #0
   1850e:	d006      	beq.n	1851e <mp_binary_set_int+0x2a>
        memcpy(dest, &val, val_sz);
   18510:	463b      	mov	r3, r7
   18512:	68fa      	ldr	r2, [r7, #12]
   18514:	4619      	mov	r1, r3
   18516:	6878      	ldr	r0, [r7, #4]
   18518:	f004 fc3a 	bl	1cd90 <memcpy>
        }
        while (val_sz--) {
            *dest++ = *--src;
        }
    }
}
   1851c:	e012      	b.n	18544 <mp_binary_set_int+0x50>
            src = (const byte*)&val + val_sz;
   1851e:	463a      	mov	r2, r7
   18520:	68fb      	ldr	r3, [r7, #12]
   18522:	4413      	add	r3, r2
   18524:	617b      	str	r3, [r7, #20]
        while (val_sz--) {
   18526:	e008      	b.n	1853a <mp_binary_set_int+0x46>
            *dest++ = *--src;
   18528:	687b      	ldr	r3, [r7, #4]
   1852a:	1c5a      	adds	r2, r3, #1
   1852c:	607a      	str	r2, [r7, #4]
   1852e:	697a      	ldr	r2, [r7, #20]
   18530:	3a01      	subs	r2, #1
   18532:	617a      	str	r2, [r7, #20]
   18534:	697a      	ldr	r2, [r7, #20]
   18536:	7812      	ldrb	r2, [r2, #0]
   18538:	701a      	strb	r2, [r3, #0]
        while (val_sz--) {
   1853a:	68fb      	ldr	r3, [r7, #12]
   1853c:	1e5a      	subs	r2, r3, #1
   1853e:	60fa      	str	r2, [r7, #12]
   18540:	2b00      	cmp	r3, #0
   18542:	d1f1      	bne.n	18528 <mp_binary_set_int+0x34>
}
   18544:	bf00      	nop
   18546:	3718      	adds	r7, #24
   18548:	46bd      	mov	sp, r7
   1854a:	bd80      	pop	{r7, pc}

0001854c <mp_binary_set_val>:

void mp_binary_set_val(char struct_type, char val_type, mp_obj_t val_in, byte **ptr) {
   1854c:	b580      	push	{r7, lr}
   1854e:	b08a      	sub	sp, #40	; 0x28
   18550:	af00      	add	r7, sp, #0
   18552:	60ba      	str	r2, [r7, #8]
   18554:	607b      	str	r3, [r7, #4]
   18556:	4603      	mov	r3, r0
   18558:	73fb      	strb	r3, [r7, #15]
   1855a:	460b      	mov	r3, r1
   1855c:	73bb      	strb	r3, [r7, #14]
    byte *p = *ptr;
   1855e:	687b      	ldr	r3, [r7, #4]
   18560:	681b      	ldr	r3, [r3, #0]
   18562:	627b      	str	r3, [r7, #36]	; 0x24
    mp_uint_t align;

    size_t size = mp_binary_get_size(struct_type, val_type, &align);
   18564:	f107 0214 	add.w	r2, r7, #20
   18568:	7bb9      	ldrb	r1, [r7, #14]
   1856a:	7bfb      	ldrb	r3, [r7, #15]
   1856c:	4618      	mov	r0, r3
   1856e:	f7ff fbdd 	bl	17d2c <mp_binary_get_size>
   18572:	61f8      	str	r0, [r7, #28]
    if (struct_type == '@') {
   18574:	7bfb      	ldrb	r3, [r7, #15]
   18576:	2b40      	cmp	r3, #64	; 0x40
   18578:	d109      	bne.n	1858e <mp_binary_set_val+0x42>
        // Make pointer aligned
        p = (byte*)MP_ALIGN(p, (size_t)align);
   1857a:	697a      	ldr	r2, [r7, #20]
   1857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1857e:	4413      	add	r3, r2
   18580:	1e5a      	subs	r2, r3, #1
   18582:	697b      	ldr	r3, [r7, #20]
   18584:	425b      	negs	r3, r3
   18586:	4013      	ands	r3, r2
   18588:	627b      	str	r3, [r7, #36]	; 0x24
        if (MP_ENDIANNESS_LITTLE) {
            struct_type = '<';
   1858a:	233c      	movs	r3, #60	; 0x3c
   1858c:	73fb      	strb	r3, [r7, #15]
        } else {
            struct_type = '>';
        }
    }
    *ptr = p + size;
   1858e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   18590:	69fb      	ldr	r3, [r7, #28]
   18592:	441a      	add	r2, r3
   18594:	687b      	ldr	r3, [r7, #4]
   18596:	601a      	str	r2, [r3, #0]

    mp_uint_t val;
    switch (val_type) {
   18598:	7bbb      	ldrb	r3, [r7, #14]
   1859a:	2b4f      	cmp	r3, #79	; 0x4f
   1859c:	d102      	bne.n	185a4 <mp_binary_set_val+0x58>
        case 'O':
            val = (mp_uint_t)val_in;
   1859e:	68bb      	ldr	r3, [r7, #8]
   185a0:	623b      	str	r3, [r7, #32]
            break;
   185a2:	e01e      	b.n	185e2 <mp_binary_set_val+0x96>
                mp_obj_int_to_bytes_impl(val_in, struct_type == '>', size, p);
                return;
            } else
            #endif
            {
                val = mp_obj_get_int(val_in);
   185a4:	68b8      	ldr	r0, [r7, #8]
   185a6:	f7f5 fb53 	bl	dc50 <mp_obj_get_int>
   185aa:	4603      	mov	r3, r0
   185ac:	623b      	str	r3, [r7, #32]
                // zero/sign extend if needed
                if (BYTES_PER_WORD < 8 && size > sizeof(val)) {
   185ae:	69fb      	ldr	r3, [r7, #28]
   185b0:	2b04      	cmp	r3, #4
   185b2:	d916      	bls.n	185e2 <mp_binary_set_val+0x96>
                    int c = (is_signed(val_type) && (mp_int_t)val < 0) ? 0xff : 0x00;
   185b4:	7bbb      	ldrb	r3, [r7, #14]
   185b6:	2b5a      	cmp	r3, #90	; 0x5a
   185b8:	d904      	bls.n	185c4 <mp_binary_set_val+0x78>
   185ba:	6a3b      	ldr	r3, [r7, #32]
   185bc:	2b00      	cmp	r3, #0
   185be:	da01      	bge.n	185c4 <mp_binary_set_val+0x78>
   185c0:	23ff      	movs	r3, #255	; 0xff
   185c2:	e000      	b.n	185c6 <mp_binary_set_val+0x7a>
   185c4:	2300      	movs	r3, #0
   185c6:	61bb      	str	r3, [r7, #24]
                    memset(p, c, size);
   185c8:	69fa      	ldr	r2, [r7, #28]
   185ca:	69b9      	ldr	r1, [r7, #24]
   185cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
   185ce:	f004 fc7b 	bl	1cec8 <memset>
                    if (struct_type == '>') {
   185d2:	7bfb      	ldrb	r3, [r7, #15]
   185d4:	2b3e      	cmp	r3, #62	; 0x3e
   185d6:	d104      	bne.n	185e2 <mp_binary_set_val+0x96>
                        p += size - sizeof(val);
   185d8:	69fb      	ldr	r3, [r7, #28]
   185da:	3b04      	subs	r3, #4
   185dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   185de:	4413      	add	r3, r2
   185e0:	627b      	str	r3, [r7, #36]	; 0x24
                    }
                }
            }
    }

    mp_binary_set_int(MIN((size_t)size, sizeof(val)), struct_type == '>', p, val);
   185e2:	69fb      	ldr	r3, [r7, #28]
   185e4:	2b04      	cmp	r3, #4
   185e6:	bf28      	it	cs
   185e8:	2304      	movcs	r3, #4
   185ea:	4618      	mov	r0, r3
   185ec:	7bfb      	ldrb	r3, [r7, #15]
   185ee:	2b3e      	cmp	r3, #62	; 0x3e
   185f0:	bf0c      	ite	eq
   185f2:	2301      	moveq	r3, #1
   185f4:	2300      	movne	r3, #0
   185f6:	b2d9      	uxtb	r1, r3
   185f8:	6a3b      	ldr	r3, [r7, #32]
   185fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   185fc:	f7ff ff7a 	bl	184f4 <mp_binary_set_int>
}
   18600:	bf00      	nop
   18602:	3728      	adds	r7, #40	; 0x28
   18604:	46bd      	mov	sp, r7
   18606:	bd80      	pop	{r7, pc}

00018608 <mp_binary_set_val_array>:

void mp_binary_set_val_array(char typecode, void *p, mp_uint_t index, mp_obj_t val_in) {
   18608:	b580      	push	{r7, lr}
   1860a:	b084      	sub	sp, #16
   1860c:	af00      	add	r7, sp, #0
   1860e:	60b9      	str	r1, [r7, #8]
   18610:	607a      	str	r2, [r7, #4]
   18612:	603b      	str	r3, [r7, #0]
   18614:	4603      	mov	r3, r0
   18616:	73fb      	strb	r3, [r7, #15]
    switch (typecode) {
   18618:	7bfb      	ldrb	r3, [r7, #15]
   1861a:	2b4f      	cmp	r3, #79	; 0x4f
   1861c:	d106      	bne.n	1862c <mp_binary_set_val_array+0x24>
            ((double*)p)[index] = mp_obj_get_float(val_in);
            break;
#endif
        // Extension to CPython: array of objects
        case 'O':
            ((mp_obj_t*)p)[index] = val_in;
   1861e:	687b      	ldr	r3, [r7, #4]
   18620:	009b      	lsls	r3, r3, #2
   18622:	68ba      	ldr	r2, [r7, #8]
   18624:	4413      	add	r3, r2
   18626:	683a      	ldr	r2, [r7, #0]
   18628:	601a      	str	r2, [r3, #0]
            break;
   1862a:	e008      	b.n	1863e <mp_binary_set_val_array+0x36>
                mp_obj_int_to_bytes_impl(val_in, MP_ENDIANNESS_BIG,
                    size, (uint8_t*)p + index * size);
                return;
            }
            #endif
            mp_binary_set_val_array_from_int(typecode, p, index, mp_obj_get_int(val_in));
   1862c:	6838      	ldr	r0, [r7, #0]
   1862e:	f7f5 fb0f 	bl	dc50 <mp_obj_get_int>
   18632:	4603      	mov	r3, r0
   18634:	7bf8      	ldrb	r0, [r7, #15]
   18636:	687a      	ldr	r2, [r7, #4]
   18638:	68b9      	ldr	r1, [r7, #8]
   1863a:	f000 f805 	bl	18648 <mp_binary_set_val_array_from_int>
    }
}
   1863e:	bf00      	nop
   18640:	3710      	adds	r7, #16
   18642:	46bd      	mov	sp, r7
   18644:	bd80      	pop	{r7, pc}
   18646:	bf00      	nop

00018648 <mp_binary_set_val_array_from_int>:

void mp_binary_set_val_array_from_int(char typecode, void *p, mp_uint_t index, mp_int_t val) {
   18648:	b480      	push	{r7}
   1864a:	b085      	sub	sp, #20
   1864c:	af00      	add	r7, sp, #0
   1864e:	60b9      	str	r1, [r7, #8]
   18650:	607a      	str	r2, [r7, #4]
   18652:	603b      	str	r3, [r7, #0]
   18654:	4603      	mov	r3, r0
   18656:	73fb      	strb	r3, [r7, #15]
    switch (typecode) {
   18658:	7bfb      	ldrb	r3, [r7, #15]
   1865a:	2b4c      	cmp	r3, #76	; 0x4c
   1865c:	d04e      	beq.n	186fc <mp_binary_set_val_array_from_int+0xb4>
   1865e:	2b4c      	cmp	r3, #76	; 0x4c
   18660:	dc0b      	bgt.n	1867a <mp_binary_set_val_array_from_int+0x32>
   18662:	2b42      	cmp	r3, #66	; 0x42
   18664:	d01e      	beq.n	186a4 <mp_binary_set_val_array_from_int+0x5c>
   18666:	2b42      	cmp	r3, #66	; 0x42
   18668:	dc02      	bgt.n	18670 <mp_binary_set_val_array_from_int+0x28>
   1866a:	2b01      	cmp	r3, #1
   1866c:	d01a      	beq.n	186a4 <mp_binary_set_val_array_from_int+0x5c>
        // Extension to CPython: array of pointers
        case 'P':
            ((void**)p)[index] = (void*)(uintptr_t)val;
            break;
    }
}
   1866e:	e053      	b.n	18718 <mp_binary_set_val_array_from_int+0xd0>
    switch (typecode) {
   18670:	2b48      	cmp	r3, #72	; 0x48
   18672:	d026      	beq.n	186c2 <mp_binary_set_val_array_from_int+0x7a>
   18674:	2b49      	cmp	r3, #73	; 0x49
   18676:	d033      	beq.n	186e0 <mp_binary_set_val_array_from_int+0x98>
}
   18678:	e04e      	b.n	18718 <mp_binary_set_val_array_from_int+0xd0>
    switch (typecode) {
   1867a:	2b68      	cmp	r3, #104	; 0x68
   1867c:	d019      	beq.n	186b2 <mp_binary_set_val_array_from_int+0x6a>
   1867e:	2b68      	cmp	r3, #104	; 0x68
   18680:	dc04      	bgt.n	1868c <mp_binary_set_val_array_from_int+0x44>
   18682:	2b50      	cmp	r3, #80	; 0x50
   18684:	d041      	beq.n	1870a <mp_binary_set_val_array_from_int+0xc2>
   18686:	2b62      	cmp	r3, #98	; 0x62
   18688:	d005      	beq.n	18696 <mp_binary_set_val_array_from_int+0x4e>
}
   1868a:	e045      	b.n	18718 <mp_binary_set_val_array_from_int+0xd0>
    switch (typecode) {
   1868c:	2b69      	cmp	r3, #105	; 0x69
   1868e:	d020      	beq.n	186d2 <mp_binary_set_val_array_from_int+0x8a>
   18690:	2b6c      	cmp	r3, #108	; 0x6c
   18692:	d02c      	beq.n	186ee <mp_binary_set_val_array_from_int+0xa6>
}
   18694:	e040      	b.n	18718 <mp_binary_set_val_array_from_int+0xd0>
            ((signed char*)p)[index] = val;
   18696:	68ba      	ldr	r2, [r7, #8]
   18698:	687b      	ldr	r3, [r7, #4]
   1869a:	4413      	add	r3, r2
   1869c:	683a      	ldr	r2, [r7, #0]
   1869e:	b252      	sxtb	r2, r2
   186a0:	701a      	strb	r2, [r3, #0]
            break;
   186a2:	e039      	b.n	18718 <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned char*)p)[index] = val;
   186a4:	68ba      	ldr	r2, [r7, #8]
   186a6:	687b      	ldr	r3, [r7, #4]
   186a8:	4413      	add	r3, r2
   186aa:	683a      	ldr	r2, [r7, #0]
   186ac:	b2d2      	uxtb	r2, r2
   186ae:	701a      	strb	r2, [r3, #0]
            break;
   186b0:	e032      	b.n	18718 <mp_binary_set_val_array_from_int+0xd0>
            ((short*)p)[index] = val;
   186b2:	687b      	ldr	r3, [r7, #4]
   186b4:	005b      	lsls	r3, r3, #1
   186b6:	68ba      	ldr	r2, [r7, #8]
   186b8:	4413      	add	r3, r2
   186ba:	683a      	ldr	r2, [r7, #0]
   186bc:	b212      	sxth	r2, r2
   186be:	801a      	strh	r2, [r3, #0]
            break;
   186c0:	e02a      	b.n	18718 <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned short*)p)[index] = val;
   186c2:	687b      	ldr	r3, [r7, #4]
   186c4:	005b      	lsls	r3, r3, #1
   186c6:	68ba      	ldr	r2, [r7, #8]
   186c8:	4413      	add	r3, r2
   186ca:	683a      	ldr	r2, [r7, #0]
   186cc:	b292      	uxth	r2, r2
   186ce:	801a      	strh	r2, [r3, #0]
            break;
   186d0:	e022      	b.n	18718 <mp_binary_set_val_array_from_int+0xd0>
            ((int*)p)[index] = val;
   186d2:	687b      	ldr	r3, [r7, #4]
   186d4:	009b      	lsls	r3, r3, #2
   186d6:	68ba      	ldr	r2, [r7, #8]
   186d8:	4413      	add	r3, r2
   186da:	683a      	ldr	r2, [r7, #0]
   186dc:	601a      	str	r2, [r3, #0]
            break;
   186de:	e01b      	b.n	18718 <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned int*)p)[index] = val;
   186e0:	687b      	ldr	r3, [r7, #4]
   186e2:	009b      	lsls	r3, r3, #2
   186e4:	68ba      	ldr	r2, [r7, #8]
   186e6:	4413      	add	r3, r2
   186e8:	683a      	ldr	r2, [r7, #0]
   186ea:	601a      	str	r2, [r3, #0]
            break;
   186ec:	e014      	b.n	18718 <mp_binary_set_val_array_from_int+0xd0>
            ((long*)p)[index] = val;
   186ee:	687b      	ldr	r3, [r7, #4]
   186f0:	009b      	lsls	r3, r3, #2
   186f2:	68ba      	ldr	r2, [r7, #8]
   186f4:	4413      	add	r3, r2
   186f6:	683a      	ldr	r2, [r7, #0]
   186f8:	601a      	str	r2, [r3, #0]
            break;
   186fa:	e00d      	b.n	18718 <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned long*)p)[index] = val;
   186fc:	687b      	ldr	r3, [r7, #4]
   186fe:	009b      	lsls	r3, r3, #2
   18700:	68ba      	ldr	r2, [r7, #8]
   18702:	4413      	add	r3, r2
   18704:	683a      	ldr	r2, [r7, #0]
   18706:	601a      	str	r2, [r3, #0]
            break;
   18708:	e006      	b.n	18718 <mp_binary_set_val_array_from_int+0xd0>
            ((void**)p)[index] = (void*)(uintptr_t)val;
   1870a:	687b      	ldr	r3, [r7, #4]
   1870c:	009b      	lsls	r3, r3, #2
   1870e:	68ba      	ldr	r2, [r7, #8]
   18710:	4413      	add	r3, r2
   18712:	683a      	ldr	r2, [r7, #0]
   18714:	601a      	str	r2, [r3, #0]
            break;
   18716:	bf00      	nop
}
   18718:	bf00      	nop
   1871a:	3714      	adds	r7, #20
   1871c:	46bd      	mov	sp, r7
   1871e:	f85d 7b04 	ldr.w	r7, [sp], #4
   18722:	4770      	bx	lr

00018724 <vstr_str>:
static inline char *vstr_str(vstr_t *vstr) { return vstr->buf; }
   18724:	b480      	push	{r7}
   18726:	b083      	sub	sp, #12
   18728:	af00      	add	r7, sp, #0
   1872a:	6078      	str	r0, [r7, #4]
   1872c:	687b      	ldr	r3, [r7, #4]
   1872e:	689b      	ldr	r3, [r3, #8]
   18730:	4618      	mov	r0, r3
   18732:	370c      	adds	r7, #12
   18734:	46bd      	mov	sp, r7
   18736:	f85d 7b04 	ldr.w	r7, [sp], #4
   1873a:	4770      	bx	lr

0001873c <vstr_len>:
static inline size_t vstr_len(vstr_t *vstr) { return vstr->len; }
   1873c:	b480      	push	{r7}
   1873e:	b083      	sub	sp, #12
   18740:	af00      	add	r7, sp, #0
   18742:	6078      	str	r0, [r7, #4]
   18744:	687b      	ldr	r3, [r7, #4]
   18746:	685b      	ldr	r3, [r3, #4]
   18748:	4618      	mov	r0, r3
   1874a:	370c      	adds	r7, #12
   1874c:	46bd      	mov	sp, r7
   1874e:	f85d 7b04 	ldr.w	r7, [sp], #4
   18752:	4770      	bx	lr

00018754 <mp_obj_module_get_globals>:
static inline mp_obj_dict_t *mp_obj_module_get_globals(mp_obj_t module) {
   18754:	b480      	push	{r7}
   18756:	b083      	sub	sp, #12
   18758:	af00      	add	r7, sp, #0
   1875a:	6078      	str	r0, [r7, #4]
    return ((mp_obj_module_t*)MP_OBJ_TO_PTR(module))->globals;
   1875c:	687b      	ldr	r3, [r7, #4]
   1875e:	685b      	ldr	r3, [r3, #4]
}
   18760:	4618      	mov	r0, r3
   18762:	370c      	adds	r7, #12
   18764:	46bd      	mov	sp, r7
   18766:	f85d 7b04 	ldr.w	r7, [sp], #4
   1876a:	4770      	bx	lr

0001876c <mp_local_free>:
static inline void mp_local_free(void *ptr) {
   1876c:	b480      	push	{r7}
   1876e:	b083      	sub	sp, #12
   18770:	af00      	add	r7, sp, #0
   18772:	6078      	str	r0, [r7, #4]
}
   18774:	bf00      	nop
   18776:	370c      	adds	r7, #12
   18778:	46bd      	mov	sp, r7
   1877a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1877e:	4770      	bx	lr

00018780 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   18780:	b480      	push	{r7}
   18782:	af00      	add	r7, sp, #0
   18784:	4b03      	ldr	r3, [pc, #12]	; (18794 <mp_globals_get+0x14>)
   18786:	689b      	ldr	r3, [r3, #8]
   18788:	4618      	mov	r0, r3
   1878a:	46bd      	mov	sp, r7
   1878c:	f85d 7b04 	ldr.w	r7, [sp], #4
   18790:	4770      	bx	lr
   18792:	bf00      	nop
   18794:	200012f0 	.word	0x200012f0

00018798 <mp_obj_is_package>:

#if MICROPY_ENABLE_EXTERNAL_IMPORT

#define PATH_SEP_CHAR '/'

bool mp_obj_is_package(mp_obj_t module) {
   18798:	b580      	push	{r7, lr}
   1879a:	b084      	sub	sp, #16
   1879c:	af00      	add	r7, sp, #0
   1879e:	6078      	str	r0, [r7, #4]
    mp_obj_t dest[2];
    mp_load_method_maybe(module, MP_QSTR___path__, dest);
   187a0:	f107 0308 	add.w	r3, r7, #8
   187a4:	461a      	mov	r2, r3
   187a6:	2120      	movs	r1, #32
   187a8:	6878      	ldr	r0, [r7, #4]
   187aa:	f7f3 fff1 	bl	c790 <mp_load_method_maybe>
    return dest[0] != MP_OBJ_NULL;
   187ae:	68bb      	ldr	r3, [r7, #8]
   187b0:	2b00      	cmp	r3, #0
   187b2:	bf14      	ite	ne
   187b4:	2301      	movne	r3, #1
   187b6:	2300      	moveq	r3, #0
   187b8:	b2db      	uxtb	r3, r3
}
   187ba:	4618      	mov	r0, r3
   187bc:	3710      	adds	r7, #16
   187be:	46bd      	mov	sp, r7
   187c0:	bd80      	pop	{r7, pc}
   187c2:	bf00      	nop

000187c4 <mp_import_stat_any>:

// Stat either frozen or normal module by a given path
// (whatever is available, if at all).
STATIC mp_import_stat_t mp_import_stat_any(const char *path) {
   187c4:	b580      	push	{r7, lr}
   187c6:	b082      	sub	sp, #8
   187c8:	af00      	add	r7, sp, #0
   187ca:	6078      	str	r0, [r7, #4]
    mp_import_stat_t st = mp_frozen_stat(path);
    if (st != MP_IMPORT_STAT_NO_EXIST) {
        return st;
    }
    #endif
    return mp_import_stat(path);
   187cc:	6878      	ldr	r0, [r7, #4]
   187ce:	f002 ffb1 	bl	1b734 <mp_import_stat>
   187d2:	4603      	mov	r3, r0
}
   187d4:	4618      	mov	r0, r3
   187d6:	3708      	adds	r7, #8
   187d8:	46bd      	mov	sp, r7
   187da:	bd80      	pop	{r7, pc}

000187dc <stat_file_py_or_mpy>:

STATIC mp_import_stat_t stat_file_py_or_mpy(vstr_t *path) {
   187dc:	b580      	push	{r7, lr}
   187de:	b084      	sub	sp, #16
   187e0:	af00      	add	r7, sp, #0
   187e2:	6078      	str	r0, [r7, #4]
    mp_import_stat_t stat = mp_import_stat_any(vstr_null_terminated_str(path));
   187e4:	6878      	ldr	r0, [r7, #4]
   187e6:	f7e8 ff8f 	bl	1708 <vstr_null_terminated_str>
   187ea:	4603      	mov	r3, r0
   187ec:	4618      	mov	r0, r3
   187ee:	f7ff ffe9 	bl	187c4 <mp_import_stat_any>
   187f2:	60f8      	str	r0, [r7, #12]
    if (stat == MP_IMPORT_STAT_FILE) {
   187f4:	68fb      	ldr	r3, [r7, #12]
   187f6:	2b02      	cmp	r3, #2
   187f8:	d101      	bne.n	187fe <stat_file_py_or_mpy+0x22>
        return stat;
   187fa:	68fb      	ldr	r3, [r7, #12]
   187fc:	e000      	b.n	18800 <stat_file_py_or_mpy+0x24>
    if (stat == MP_IMPORT_STAT_FILE) {
        return stat;
    }
    #endif

    return MP_IMPORT_STAT_NO_EXIST;
   187fe:	2300      	movs	r3, #0
}
   18800:	4618      	mov	r0, r3
   18802:	3710      	adds	r7, #16
   18804:	46bd      	mov	sp, r7
   18806:	bd80      	pop	{r7, pc}

00018808 <stat_dir_or_file>:

STATIC mp_import_stat_t stat_dir_or_file(vstr_t *path) {
   18808:	b580      	push	{r7, lr}
   1880a:	b084      	sub	sp, #16
   1880c:	af00      	add	r7, sp, #0
   1880e:	6078      	str	r0, [r7, #4]
    mp_import_stat_t stat = mp_import_stat_any(vstr_null_terminated_str(path));
   18810:	6878      	ldr	r0, [r7, #4]
   18812:	f7e8 ff79 	bl	1708 <vstr_null_terminated_str>
   18816:	4603      	mov	r3, r0
   18818:	4618      	mov	r0, r3
   1881a:	f7ff ffd3 	bl	187c4 <mp_import_stat_any>
   1881e:	60f8      	str	r0, [r7, #12]
    DEBUG_printf("stat %s: %d\n", vstr_str(path), stat);
    if (stat == MP_IMPORT_STAT_DIR) {
   18820:	68fb      	ldr	r3, [r7, #12]
   18822:	2b01      	cmp	r3, #1
   18824:	d101      	bne.n	1882a <stat_dir_or_file+0x22>
        return stat;
   18826:	68fb      	ldr	r3, [r7, #12]
   18828:	e007      	b.n	1883a <stat_dir_or_file+0x32>
    }

    // not a directory, add .py and try as a file
    vstr_add_str(path, ".py");
   1882a:	4906      	ldr	r1, [pc, #24]	; (18844 <stat_dir_or_file+0x3c>)
   1882c:	6878      	ldr	r0, [r7, #4]
   1882e:	f7e8 ffa9 	bl	1784 <vstr_add_str>
    return stat_file_py_or_mpy(path);
   18832:	6878      	ldr	r0, [r7, #4]
   18834:	f7ff ffd2 	bl	187dc <stat_file_py_or_mpy>
   18838:	4603      	mov	r3, r0
}
   1883a:	4618      	mov	r0, r3
   1883c:	3710      	adds	r7, #16
   1883e:	46bd      	mov	sp, r7
   18840:	bd80      	pop	{r7, pc}
   18842:	bf00      	nop
   18844:	00024520 	.word	0x00024520

00018848 <find_file>:

STATIC mp_import_stat_t find_file(const char *file_str, uint file_len, vstr_t *dest) {
   18848:	b580      	push	{r7, lr}
   1884a:	b084      	sub	sp, #16
   1884c:	af00      	add	r7, sp, #0
   1884e:	60f8      	str	r0, [r7, #12]
   18850:	60b9      	str	r1, [r7, #8]
   18852:	607a      	str	r2, [r7, #4]
    mp_obj_list_get(mp_sys_path, &path_num, &path_items);

    if (path_num == 0) {
#endif
        // mp_sys_path is empty, so just use the given file name
        vstr_add_strn(dest, file_str, file_len);
   18854:	68ba      	ldr	r2, [r7, #8]
   18856:	68f9      	ldr	r1, [r7, #12]
   18858:	6878      	ldr	r0, [r7, #4]
   1885a:	f7e8 ffa5 	bl	17a8 <vstr_add_strn>
        return stat_dir_or_file(dest);
   1885e:	6878      	ldr	r0, [r7, #4]
   18860:	f7ff ffd2 	bl	18808 <stat_dir_or_file>
   18864:	4603      	mov	r3, r0

        // could not find a directory or file
        return MP_IMPORT_STAT_NO_EXIST;
    }
#endif
}
   18866:	4618      	mov	r0, r3
   18868:	3710      	adds	r7, #16
   1886a:	46bd      	mov	sp, r7
   1886c:	bd80      	pop	{r7, pc}
   1886e:	bf00      	nop

00018870 <do_load_from_lexer>:

#if MICROPY_ENABLE_COMPILER
STATIC void do_load_from_lexer(mp_obj_t module_obj, mp_lexer_t *lex) {
   18870:	b580      	push	{r7, lr}
   18872:	b084      	sub	sp, #16
   18874:	af00      	add	r7, sp, #0
   18876:	6078      	str	r0, [r7, #4]
   18878:	6039      	str	r1, [r7, #0]
    qstr source_name = lex->source_name;
    mp_store_attr(module_obj, MP_QSTR___file__, MP_OBJ_NEW_QSTR(source_name));
    #endif

    // parse, compile and execute the module in its context
    mp_obj_dict_t *mod_globals = mp_obj_module_get_globals(module_obj);
   1887a:	6878      	ldr	r0, [r7, #4]
   1887c:	f7ff ff6a 	bl	18754 <mp_obj_module_get_globals>
   18880:	60f8      	str	r0, [r7, #12]
    mp_parse_compile_execute(lex, MP_PARSE_FILE_INPUT, mod_globals, mod_globals);
   18882:	68fb      	ldr	r3, [r7, #12]
   18884:	68fa      	ldr	r2, [r7, #12]
   18886:	2101      	movs	r1, #1
   18888:	6838      	ldr	r0, [r7, #0]
   1888a:	f7f4 fb07 	bl	ce9c <mp_parse_compile_execute>
}
   1888e:	bf00      	nop
   18890:	3710      	adds	r7, #16
   18892:	46bd      	mov	sp, r7
   18894:	bd80      	pop	{r7, pc}
   18896:	bf00      	nop

00018898 <do_load>:
        nlr_jump(nlr.ret_val);
    }
}
#endif

STATIC void do_load(mp_obj_t module_obj, vstr_t *file) {
   18898:	b580      	push	{r7, lr}
   1889a:	b084      	sub	sp, #16
   1889c:	af00      	add	r7, sp, #0
   1889e:	6078      	str	r0, [r7, #4]
   188a0:	6039      	str	r1, [r7, #0]
    #if MICROPY_MODULE_FROZEN || MICROPY_PERSISTENT_CODE_LOAD || MICROPY_ENABLE_COMPILER
    char *file_str = vstr_null_terminated_str(file);
   188a2:	6838      	ldr	r0, [r7, #0]
   188a4:	f7e8 ff30 	bl	1708 <vstr_null_terminated_str>
   188a8:	60f8      	str	r0, [r7, #12]
    #endif

    // If we can compile scripts then load the file and compile and execute it.
    #if MICROPY_ENABLE_COMPILER
    {
        mp_lexer_t *lex = mp_lexer_new_from_file(file_str);
   188aa:	68f8      	ldr	r0, [r7, #12]
   188ac:	f002 ff3a 	bl	1b724 <mp_lexer_new_from_file>
   188b0:	60b8      	str	r0, [r7, #8]
        do_load_from_lexer(module_obj, lex);
   188b2:	68b9      	ldr	r1, [r7, #8]
   188b4:	6878      	ldr	r0, [r7, #4]
   188b6:	f7ff ffdb 	bl	18870 <do_load_from_lexer>
        return;
   188ba:	bf00      	nop
    #else

    // If we get here then the file was not frozen and we can't compile scripts.
    mp_raise_msg(&mp_type_ImportError, "script compilation not supported");
    #endif
}
   188bc:	3710      	adds	r7, #16
   188be:	46bd      	mov	sp, r7
   188c0:	bd80      	pop	{r7, pc}
   188c2:	bf00      	nop

000188c4 <chop_component>:

STATIC void chop_component(const char *start, const char **end) {
   188c4:	b480      	push	{r7}
   188c6:	b085      	sub	sp, #20
   188c8:	af00      	add	r7, sp, #0
   188ca:	6078      	str	r0, [r7, #4]
   188cc:	6039      	str	r1, [r7, #0]
    const char *p = *end;
   188ce:	683b      	ldr	r3, [r7, #0]
   188d0:	681b      	ldr	r3, [r3, #0]
   188d2:	60fb      	str	r3, [r7, #12]
    while (p > start) {
   188d4:	e00a      	b.n	188ec <chop_component+0x28>
        if (*--p == '.') {
   188d6:	68fb      	ldr	r3, [r7, #12]
   188d8:	3b01      	subs	r3, #1
   188da:	60fb      	str	r3, [r7, #12]
   188dc:	68fb      	ldr	r3, [r7, #12]
   188de:	781b      	ldrb	r3, [r3, #0]
   188e0:	2b2e      	cmp	r3, #46	; 0x2e
   188e2:	d103      	bne.n	188ec <chop_component+0x28>
            *end = p;
   188e4:	683b      	ldr	r3, [r7, #0]
   188e6:	68fa      	ldr	r2, [r7, #12]
   188e8:	601a      	str	r2, [r3, #0]
            return;
   188ea:	e006      	b.n	188fa <chop_component+0x36>
    while (p > start) {
   188ec:	68fa      	ldr	r2, [r7, #12]
   188ee:	687b      	ldr	r3, [r7, #4]
   188f0:	429a      	cmp	r2, r3
   188f2:	d8f0      	bhi.n	188d6 <chop_component+0x12>
        }
    }
    *end = p;
   188f4:	683b      	ldr	r3, [r7, #0]
   188f6:	68fa      	ldr	r2, [r7, #12]
   188f8:	601a      	str	r2, [r3, #0]
}
   188fa:	3714      	adds	r7, #20
   188fc:	46bd      	mov	sp, r7
   188fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   18902:	4770      	bx	lr

00018904 <mp_builtin___import__>:

mp_obj_t mp_builtin___import__(size_t n_args, const mp_obj_t *args) {
   18904:	b590      	push	{r4, r7, lr}
   18906:	b0e3      	sub	sp, #396	; 0x18c
   18908:	af00      	add	r7, sp, #0
   1890a:	1d3b      	adds	r3, r7, #4
   1890c:	6018      	str	r0, [r3, #0]
   1890e:	463b      	mov	r3, r7
   18910:	6019      	str	r1, [r3, #0]
        mp_obj_print(args[i], PRINT_REPR);
        DEBUG_printf("\n");
    }
#endif

    mp_obj_t module_name = args[0];
   18912:	463b      	mov	r3, r7
   18914:	681b      	ldr	r3, [r3, #0]
   18916:	681b      	ldr	r3, [r3, #0]
   18918:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    mp_obj_t fromtuple = mp_const_none;
   1891c:	4bd6      	ldr	r3, [pc, #856]	; (18c78 <mp_builtin___import__+0x374>)
   1891e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    mp_int_t level = 0;
   18922:	2300      	movs	r3, #0
   18924:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    if (n_args >= 4) {
   18928:	1d3b      	adds	r3, r7, #4
   1892a:	681b      	ldr	r3, [r3, #0]
   1892c:	2b03      	cmp	r3, #3
   1892e:	d916      	bls.n	1895e <mp_builtin___import__+0x5a>
        fromtuple = args[3];
   18930:	463b      	mov	r3, r7
   18932:	681b      	ldr	r3, [r3, #0]
   18934:	68db      	ldr	r3, [r3, #12]
   18936:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        if (n_args >= 5) {
   1893a:	1d3b      	adds	r3, r7, #4
   1893c:	681b      	ldr	r3, [r3, #0]
   1893e:	2b04      	cmp	r3, #4
   18940:	d90d      	bls.n	1895e <mp_builtin___import__+0x5a>
            level = MP_OBJ_SMALL_INT_VALUE(args[4]);
   18942:	463b      	mov	r3, r7
   18944:	681b      	ldr	r3, [r3, #0]
   18946:	3310      	adds	r3, #16
   18948:	681b      	ldr	r3, [r3, #0]
   1894a:	105b      	asrs	r3, r3, #1
   1894c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
            if (level < 0) {
   18950:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   18954:	2b00      	cmp	r3, #0
   18956:	da02      	bge.n	1895e <mp_builtin___import__+0x5a>
                mp_raise_ValueError(NULL);
   18958:	2000      	movs	r0, #0
   1895a:	f7f4 fb23 	bl	cfa4 <mp_raise_ValueError>
            }
        }
    }

    size_t mod_len;
    const char *mod_str = mp_obj_str_get_data(module_name, &mod_len);
   1895e:	f507 7390 	add.w	r3, r7, #288	; 0x120
   18962:	4619      	mov	r1, r3
   18964:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
   18968:	f7fc ff42 	bl	157f0 <mp_obj_str_get_data>
   1896c:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178

    if (level != 0) {
   18970:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   18974:	2b00      	cmp	r3, #0
   18976:	f000 80de 	beq.w	18b36 <mp_builtin___import__+0x232>
        // module name, thus resolving relative import name into absolute.
        // This even appears to be correct per
        // http://legacy.python.org/dev/peps/pep-0328/#relative-imports-and-name
        // "Relative imports use a module's __name__ attribute to determine that
        // module's position in the package hierarchy."
        level--;
   1897a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   1897e:	3b01      	subs	r3, #1
   18980:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
        mp_obj_t this_name_q = mp_obj_dict_get(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(MP_QSTR___name__));
   18984:	f7ff fefc 	bl	18780 <mp_globals_get>
   18988:	4603      	mov	r3, r0
   1898a:	2176      	movs	r1, #118	; 0x76
   1898c:	4618      	mov	r0, r3
   1898e:	f7f5 ff5b 	bl	e848 <mp_obj_dict_get>
   18992:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
        assert(this_name_q != MP_OBJ_NULL);
   18996:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
   1899a:	2b00      	cmp	r3, #0
   1899c:	d106      	bne.n	189ac <mp_builtin___import__+0xa8>
   1899e:	4bb7      	ldr	r3, [pc, #732]	; (18c7c <mp_builtin___import__+0x378>)
   189a0:	4ab7      	ldr	r2, [pc, #732]	; (18c80 <mp_builtin___import__+0x37c>)
   189a2:	f240 111d 	movw	r1, #285	; 0x11d
   189a6:	48b7      	ldr	r0, [pc, #732]	; (18c84 <mp_builtin___import__+0x380>)
   189a8:	f002 feec 	bl	1b784 <__assert_func>
        if (MP_OBJ_QSTR_VALUE(this_name_q) == MP_QSTR___main__) {
            // This is a module run by -m command-line switch, get its real name from backup attribute
            this_name_q = mp_obj_dict_get(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
        }
        #endif
        mp_map_t *globals_map = &mp_globals_get()->map;
   189ac:	f7ff fee8 	bl	18780 <mp_globals_get>
   189b0:	4603      	mov	r3, r0
   189b2:	3304      	adds	r3, #4
   189b4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        mp_map_elem_t *elem = mp_map_lookup(globals_map, MP_OBJ_NEW_QSTR(MP_QSTR___path__), MP_MAP_LOOKUP);
   189b8:	2200      	movs	r2, #0
   189ba:	2182      	movs	r1, #130	; 0x82
   189bc:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
   189c0:	f7f4 fdbe 	bl	d540 <mp_map_lookup>
   189c4:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
        bool is_pkg = (elem != NULL);
   189c8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
   189cc:	2b00      	cmp	r3, #0
   189ce:	bf14      	ite	ne
   189d0:	2301      	movne	r3, #1
   189d2:	2300      	moveq	r3, #0
   189d4:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        DEBUG_printf(", is_package: %d", is_pkg);
        DEBUG_printf("\n");
#endif

        size_t this_name_l;
        const char *this_name = mp_obj_str_get_data(this_name_q, &this_name_l);
   189d8:	f107 030c 	add.w	r3, r7, #12
   189dc:	4619      	mov	r1, r3
   189de:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
   189e2:	f7fc ff05 	bl	157f0 <mp_obj_str_get_data>
   189e6:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c

        const char *p = this_name + this_name_l;
   189ea:	f107 030c 	add.w	r3, r7, #12
   189ee:	681b      	ldr	r3, [r3, #0]
   189f0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
   189f4:	441a      	add	r2, r3
   189f6:	f107 0308 	add.w	r3, r7, #8
   189fa:	601a      	str	r2, [r3, #0]
        if (!is_pkg) {
   189fc:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
   18a00:	f083 0301 	eor.w	r3, r3, #1
   18a04:	b2db      	uxtb	r3, r3
   18a06:	2b00      	cmp	r3, #0
   18a08:	d00e      	beq.n	18a28 <mp_builtin___import__+0x124>
            // We have module, but relative imports are anchored at package, so
            // go there.
            chop_component(this_name, &p);
   18a0a:	f107 0308 	add.w	r3, r7, #8
   18a0e:	4619      	mov	r1, r3
   18a10:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
   18a14:	f7ff ff56 	bl	188c4 <chop_component>
        }

        while (level--) {
   18a18:	e006      	b.n	18a28 <mp_builtin___import__+0x124>
            chop_component(this_name, &p);
   18a1a:	f107 0308 	add.w	r3, r7, #8
   18a1e:	4619      	mov	r1, r3
   18a20:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
   18a24:	f7ff ff4e 	bl	188c4 <chop_component>
        while (level--) {
   18a28:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   18a2c:	1e5a      	subs	r2, r3, #1
   18a2e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
   18a32:	2b00      	cmp	r3, #0
   18a34:	d1f1      	bne.n	18a1a <mp_builtin___import__+0x116>
        }

        // We must have some component left over to import from
        if (p == this_name) {
   18a36:	f107 0308 	add.w	r3, r7, #8
   18a3a:	681a      	ldr	r2, [r3, #0]
   18a3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   18a40:	429a      	cmp	r2, r3
   18a42:	d102      	bne.n	18a4a <mp_builtin___import__+0x146>
            mp_raise_ValueError("cannot perform relative import");
   18a44:	4890      	ldr	r0, [pc, #576]	; (18c88 <mp_builtin___import__+0x384>)
   18a46:	f7f4 faad 	bl	cfa4 <mp_raise_ValueError>
        }

        uint new_mod_l = (mod_len == 0 ? (size_t)(p - this_name) : (size_t)(p - this_name) + 1 + mod_len);
   18a4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18a4e:	2b00      	cmp	r3, #0
   18a50:	d107      	bne.n	18a62 <mp_builtin___import__+0x15e>
   18a52:	f107 0308 	add.w	r3, r7, #8
   18a56:	681b      	ldr	r3, [r3, #0]
   18a58:	461a      	mov	r2, r3
   18a5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   18a5e:	1ad3      	subs	r3, r2, r3
   18a60:	e00b      	b.n	18a7a <mp_builtin___import__+0x176>
   18a62:	f107 0308 	add.w	r3, r7, #8
   18a66:	681b      	ldr	r3, [r3, #0]
   18a68:	461a      	mov	r2, r3
   18a6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   18a6e:	1ad3      	subs	r3, r2, r3
   18a70:	461a      	mov	r2, r3
   18a72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18a76:	4413      	add	r3, r2
   18a78:	3301      	adds	r3, #1
   18a7a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
        char *new_mod = mp_local_alloc(new_mod_l);
   18a7e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
   18a82:	3307      	adds	r3, #7
   18a84:	3307      	adds	r3, #7
   18a86:	08db      	lsrs	r3, r3, #3
   18a88:	00db      	lsls	r3, r3, #3
   18a8a:	ebad 0d03 	sub.w	sp, sp, r3
   18a8e:	466b      	mov	r3, sp
   18a90:	3307      	adds	r3, #7
   18a92:	08db      	lsrs	r3, r3, #3
   18a94:	00db      	lsls	r3, r3, #3
   18a96:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
        memcpy(new_mod, this_name, p - this_name);
   18a9a:	f107 0308 	add.w	r3, r7, #8
   18a9e:	681b      	ldr	r3, [r3, #0]
   18aa0:	461a      	mov	r2, r3
   18aa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   18aa6:	1ad3      	subs	r3, r2, r3
   18aa8:	461a      	mov	r2, r3
   18aaa:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
   18aae:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
   18ab2:	f004 f96d 	bl	1cd90 <memcpy>
        if (mod_len != 0) {
   18ab6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18aba:	2b00      	cmp	r3, #0
   18abc:	d01e      	beq.n	18afc <mp_builtin___import__+0x1f8>
            new_mod[p - this_name] = '.';
   18abe:	f107 0308 	add.w	r3, r7, #8
   18ac2:	681b      	ldr	r3, [r3, #0]
   18ac4:	461a      	mov	r2, r3
   18ac6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   18aca:	1ad3      	subs	r3, r2, r3
   18acc:	461a      	mov	r2, r3
   18ace:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
   18ad2:	4413      	add	r3, r2
   18ad4:	222e      	movs	r2, #46	; 0x2e
   18ad6:	701a      	strb	r2, [r3, #0]
            memcpy(new_mod + (p - this_name) + 1, mod_str, mod_len);
   18ad8:	f107 0308 	add.w	r3, r7, #8
   18adc:	681b      	ldr	r3, [r3, #0]
   18ade:	461a      	mov	r2, r3
   18ae0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   18ae4:	1ad3      	subs	r3, r2, r3
   18ae6:	3301      	adds	r3, #1
   18ae8:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
   18aec:	4413      	add	r3, r2
   18aee:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
   18af2:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
   18af6:	4618      	mov	r0, r3
   18af8:	f004 f94a 	bl	1cd90 <memcpy>
        }

        qstr new_mod_q = qstr_from_strn(new_mod, new_mod_l);
   18afc:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
   18b00:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
   18b04:	f7e8 fb64 	bl	11d0 <qstr_from_strn>
   18b08:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
        mp_local_free(new_mod);
   18b0c:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
   18b10:	f7ff fe2c 	bl	1876c <mp_local_free>
        DEBUG_printf("Resolved base name for relative import: '%s'\n", qstr_str(new_mod_q));
        module_name = MP_OBJ_NEW_QSTR(new_mod_q);
   18b14:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   18b18:	009b      	lsls	r3, r3, #2
   18b1a:	f043 0302 	orr.w	r3, r3, #2
   18b1e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
        mod_str = qstr_str(new_mod_q);
   18b22:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
   18b26:	f7e8 fc2f 	bl	1388 <qstr_str>
   18b2a:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
        mod_len = new_mod_l;
   18b2e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
   18b32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    }

    // check if module already exists
    qstr module_name_qstr = mp_obj_str_get_qstr(module_name);
   18b36:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
   18b3a:	f7fc fdf3 	bl	15724 <mp_obj_str_get_qstr>
   18b3e:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
    mp_obj_t module_obj = mp_module_get(module_name_qstr);
   18b42:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
   18b46:	f7f9 f947 	bl	11dd8 <mp_module_get>
   18b4a:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
    if (module_obj != MP_OBJ_NULL) {
   18b4e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18b52:	2b00      	cmp	r3, #0
   18b54:	d027      	beq.n	18ba6 <mp_builtin___import__+0x2a2>
        DEBUG_printf("Module already loaded\n");
        // If it's not a package, return module right away
        char *p = strchr(mod_str, '.');
   18b56:	212e      	movs	r1, #46	; 0x2e
   18b58:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   18b5c:	f004 fb4c 	bl	1d1f8 <strchr>
   18b60:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
        if (p == NULL) {
   18b64:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
   18b68:	2b00      	cmp	r3, #0
   18b6a:	d102      	bne.n	18b72 <mp_builtin___import__+0x26e>
            return module_obj;
   18b6c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18b70:	e143      	b.n	18dfa <mp_builtin___import__+0x4f6>
        }
        // If fromlist is not empty, return leaf module
        if (fromtuple != mp_const_none) {
   18b72:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   18b76:	4a40      	ldr	r2, [pc, #256]	; (18c78 <mp_builtin___import__+0x374>)
   18b78:	4293      	cmp	r3, r2
   18b7a:	d002      	beq.n	18b82 <mp_builtin___import__+0x27e>
            return module_obj;
   18b7c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18b80:	e13b      	b.n	18dfa <mp_builtin___import__+0x4f6>
        }
        // Otherwise, we need to return top-level package
        qstr pkg_name = qstr_from_strn(mod_str, p - mod_str);
   18b82:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
   18b86:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   18b8a:	1ad3      	subs	r3, r2, r3
   18b8c:	4619      	mov	r1, r3
   18b8e:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   18b92:	f7e8 fb1d 	bl	11d0 <qstr_from_strn>
   18b96:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
        return mp_module_get(pkg_name);
   18b9a:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
   18b9e:	f7f9 f91b 	bl	11dd8 <mp_module_get>
   18ba2:	4603      	mov	r3, r0
   18ba4:	e129      	b.n	18dfa <mp_builtin___import__+0x4f6>
    }
    DEBUG_printf("Module not yet loaded\n");

    uint last = 0;
   18ba6:	2300      	movs	r3, #0
   18ba8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    VSTR_FIXED(path, MICROPY_ALLOC_PATH_MAX)
   18bac:	f107 0210 	add.w	r2, r7, #16
   18bb0:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18bb4:	f44f 7180 	mov.w	r1, #256	; 0x100
   18bb8:	4618      	mov	r0, r3
   18bba:	f7e8 fc9f 	bl	14fc <vstr_init_fixed_buf>
    module_obj = MP_OBJ_NULL;
   18bbe:	2300      	movs	r3, #0
   18bc0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    mp_obj_t top_module_obj = MP_OBJ_NULL;
   18bc4:	2300      	movs	r3, #0
   18bc6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    mp_obj_t outer_module_obj = MP_OBJ_NULL;
   18bca:	2300      	movs	r3, #0
   18bcc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    uint i;
    for (i = 1; i <= mod_len; i++) {
   18bd0:	2301      	movs	r3, #1
   18bd2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   18bd6:	e0ff      	b.n	18dd8 <mp_builtin___import__+0x4d4>
        if (i == mod_len || mod_str[i] == '.') {
   18bd8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18bdc:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18be0:	429a      	cmp	r2, r3
   18be2:	d008      	beq.n	18bf6 <mp_builtin___import__+0x2f2>
   18be4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   18be8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
   18bec:	4413      	add	r3, r2
   18bee:	781b      	ldrb	r3, [r3, #0]
   18bf0:	2b2e      	cmp	r3, #46	; 0x2e
   18bf2:	f040 80ec 	bne.w	18dce <mp_builtin___import__+0x4ca>
            // create a qstr for the module name up to this depth
            qstr mod_name = qstr_from_strn(mod_str, i);
   18bf6:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
   18bfa:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   18bfe:	f7e8 fae7 	bl	11d0 <qstr_from_strn>
   18c02:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
            DEBUG_printf("Processing module: %s\n", qstr_str(mod_name));
            DEBUG_printf("Previous path: =%.*s=\n", vstr_len(&path), vstr_str(&path));

            // find the file corresponding to the module name
            mp_import_stat_t stat;
            if (vstr_len(&path) == 0) {
   18c06:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18c0a:	4618      	mov	r0, r3
   18c0c:	f7ff fd96 	bl	1873c <vstr_len>
   18c10:	4603      	mov	r3, r0
   18c12:	2b00      	cmp	r3, #0
   18c14:	d10b      	bne.n	18c2e <mp_builtin___import__+0x32a>
                // first module in the dotted-name; search for a directory or file
                stat = find_file(mod_str, i, &path);
   18c16:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18c1a:	461a      	mov	r2, r3
   18c1c:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
   18c20:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   18c24:	f7ff fe10 	bl	18848 <find_file>
   18c28:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
   18c2c:	e01b      	b.n	18c66 <mp_builtin___import__+0x362>
            } else {
                // latter module in the dotted-name; append to path
                vstr_add_char(&path, PATH_SEP_CHAR);
   18c2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18c32:	212f      	movs	r1, #47	; 0x2f
   18c34:	4618      	mov	r0, r3
   18c36:	f7e8 fd95 	bl	1764 <vstr_add_char>
                vstr_add_strn(&path, mod_str + last, i - last);
   18c3a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   18c3e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   18c42:	18d1      	adds	r1, r2, r3
   18c44:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18c48:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   18c4c:	1ad2      	subs	r2, r2, r3
   18c4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18c52:	4618      	mov	r0, r3
   18c54:	f7e8 fda8 	bl	17a8 <vstr_add_strn>
                stat = stat_dir_or_file(&path);
   18c58:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18c5c:	4618      	mov	r0, r3
   18c5e:	f7ff fdd3 	bl	18808 <stat_dir_or_file>
   18c62:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
            }
            DEBUG_printf("Current path: %.*s\n", vstr_len(&path), vstr_str(&path));

            if (stat == MP_IMPORT_STAT_NO_EXIST) {
   18c66:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   18c6a:	2b00      	cmp	r3, #0
   18c6c:	d112      	bne.n	18c94 <mp_builtin___import__+0x390>
                #else
                {
                #endif
                    // couldn't find the file, so fail
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        mp_raise_msg(&mp_type_ImportError, "module not found");
   18c6e:	4907      	ldr	r1, [pc, #28]	; (18c8c <mp_builtin___import__+0x388>)
   18c70:	4807      	ldr	r0, [pc, #28]	; (18c90 <mp_builtin___import__+0x38c>)
   18c72:	f7f4 f97f 	bl	cf74 <mp_raise_msg>
   18c76:	bf00      	nop
   18c78:	000234d4 	.word	0x000234d4
   18c7c:	00024524 	.word	0x00024524
   18c80:	000245a8 	.word	0x000245a8
   18c84:	00024540 	.word	0x00024540
   18c88:	0002455c 	.word	0x0002455c
   18c8c:	0002457c 	.word	0x0002457c
   18c90:	000224d8 	.word	0x000224d8
                            "no module named '%q'", mod_name));
                    }
                }
            } else {
                // found the file, so get the module
                module_obj = mp_module_get(mod_name);
   18c94:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   18c98:	f7f9 f89e 	bl	11dd8 <mp_module_get>
   18c9c:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
            }

            if (module_obj == MP_OBJ_NULL) {
   18ca0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18ca4:	2b00      	cmp	r3, #0
   18ca6:	d166      	bne.n	18d76 <mp_builtin___import__+0x472>
                // module not already loaded, so load it!

                module_obj = mp_obj_new_module(mod_name);
   18ca8:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   18cac:	f7f9 f85a 	bl	11d64 <mp_obj_new_module>
   18cb0:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
                // for *modules* however - packages never have their names
                // replaced, instead they're -m'ed using a special __main__
                // submodule in them. (This all apparently is done to not
                // touch package name itself, which is important for future
                // imports).
                if (i == mod_len && fromtuple == mp_const_false && stat != MP_IMPORT_STAT_DIR) {
   18cb4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18cb8:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18cbc:	429a      	cmp	r2, r3
   18cbe:	d114      	bne.n	18cea <mp_builtin___import__+0x3e6>
   18cc0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   18cc4:	4a4f      	ldr	r2, [pc, #316]	; (18e04 <mp_builtin___import__+0x500>)
   18cc6:	4293      	cmp	r3, r2
   18cc8:	d10f      	bne.n	18cea <mp_builtin___import__+0x3e6>
   18cca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   18cce:	2b01      	cmp	r3, #1
   18cd0:	d00b      	beq.n	18cea <mp_builtin___import__+0x3e6>
                    mp_obj_module_t *o = MP_OBJ_TO_PTR(module_obj);
   18cd2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18cd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
   18cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
   18cde:	685b      	ldr	r3, [r3, #4]
   18ce0:	226e      	movs	r2, #110	; 0x6e
   18ce2:	2176      	movs	r1, #118	; 0x76
   18ce4:	4618      	mov	r0, r3
   18ce6:	f7f6 fac7 	bl	f278 <mp_obj_dict_store>
                    // Store real name in "__main__" attribute. Chosen semi-randonly, to reuse existing qstr's.
                    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___main__), MP_OBJ_NEW_QSTR(mod_name));
                    #endif
                }

                if (stat == MP_IMPORT_STAT_DIR) {
   18cea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   18cee:	2b01      	cmp	r3, #1
   18cf0:	d13a      	bne.n	18d68 <mp_builtin___import__+0x464>
                    DEBUG_printf("%.*s is dir\n", vstr_len(&path), vstr_str(&path));
                    // https://docs.python.org/3/reference/import.html
                    // "Specifically, any module that contains a __path__ attribute is considered a package."
                    mp_store_attr(module_obj, MP_QSTR___path__, mp_obj_new_str(vstr_str(&path), vstr_len(&path)));
   18cf2:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18cf6:	4618      	mov	r0, r3
   18cf8:	f7ff fd14 	bl	18724 <vstr_str>
   18cfc:	4604      	mov	r4, r0
   18cfe:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18d02:	4618      	mov	r0, r3
   18d04:	f7ff fd1a 	bl	1873c <vstr_len>
   18d08:	4603      	mov	r3, r0
   18d0a:	4619      	mov	r1, r3
   18d0c:	4620      	mov	r0, r4
   18d0e:	f7fc fc0d 	bl	1552c <mp_obj_new_str>
   18d12:	4603      	mov	r3, r0
   18d14:	461a      	mov	r2, r3
   18d16:	2120      	movs	r1, #32
   18d18:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
   18d1c:	f7f3 fdea 	bl	c8f4 <mp_store_attr>
                    size_t orig_path_len = path.len;
   18d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   18d24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    vstr_add_char(&path, PATH_SEP_CHAR);
   18d28:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18d2c:	212f      	movs	r1, #47	; 0x2f
   18d2e:	4618      	mov	r0, r3
   18d30:	f7e8 fd18 	bl	1764 <vstr_add_char>
                    vstr_add_str(&path, "__init__.py");
   18d34:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18d38:	4933      	ldr	r1, [pc, #204]	; (18e08 <mp_builtin___import__+0x504>)
   18d3a:	4618      	mov	r0, r3
   18d3c:	f7e8 fd22 	bl	1784 <vstr_add_str>
                    if (stat_file_py_or_mpy(&path) != MP_IMPORT_STAT_FILE) {
   18d40:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18d44:	4618      	mov	r0, r3
   18d46:	f7ff fd49 	bl	187dc <stat_file_py_or_mpy>
   18d4a:	4603      	mov	r3, r0
   18d4c:	2b02      	cmp	r3, #2
   18d4e:	d106      	bne.n	18d5e <mp_builtin___import__+0x45a>
                        //mp_warning("%s is imported as namespace package", vstr_str(&path));
                    } else {
                        do_load(module_obj, &path);
   18d50:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18d54:	4619      	mov	r1, r3
   18d56:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
   18d5a:	f7ff fd9d 	bl	18898 <do_load>
                    }
                    path.len = orig_path_len;
   18d5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
   18d62:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   18d66:	e006      	b.n	18d76 <mp_builtin___import__+0x472>
                } else { // MP_IMPORT_STAT_FILE
                    do_load(module_obj, &path);
   18d68:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18d6c:	4619      	mov	r1, r3
   18d6e:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
   18d72:	f7ff fd91 	bl	18898 <do_load>
                    // remaining components then it's an ImportError because the current path
                    // (the module that was just loaded) is not a package.  This will be caught
                    // on the next iteration because the file will not exist.
                }
            }
            if (outer_module_obj != MP_OBJ_NULL) {
   18d76:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
   18d7a:	2b00      	cmp	r3, #0
   18d7c:	d016      	beq.n	18dac <mp_builtin___import__+0x4a8>
                qstr s = qstr_from_strn(mod_str + last, i - last);
   18d7e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   18d82:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   18d86:	18d0      	adds	r0, r2, r3
   18d88:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18d8c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   18d90:	1ad3      	subs	r3, r2, r3
   18d92:	4619      	mov	r1, r3
   18d94:	f7e8 fa1c 	bl	11d0 <qstr_from_strn>
   18d98:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
                mp_store_attr(outer_module_obj, s, module_obj);
   18d9c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
   18da0:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
   18da4:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
   18da8:	f7f3 fda4 	bl	c8f4 <mp_store_attr>
            }
            outer_module_obj = module_obj;
   18dac:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18db0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
            if (top_module_obj == MP_OBJ_NULL) {
   18db4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
   18db8:	2b00      	cmp	r3, #0
   18dba:	d103      	bne.n	18dc4 <mp_builtin___import__+0x4c0>
                top_module_obj = module_obj;
   18dbc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18dc0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
            }
            last = i + 1;
   18dc4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
   18dc8:	3301      	adds	r3, #1
   18dca:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    for (i = 1; i <= mod_len; i++) {
   18dce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
   18dd2:	3301      	adds	r3, #1
   18dd4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   18dd8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18ddc:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18de0:	429a      	cmp	r2, r3
   18de2:	f67f aef9 	bls.w	18bd8 <mp_builtin___import__+0x2d4>
        }
    }

    // If fromlist is not empty, return leaf module
    if (fromtuple != mp_const_none) {
   18de6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   18dea:	4a08      	ldr	r2, [pc, #32]	; (18e0c <mp_builtin___import__+0x508>)
   18dec:	4293      	cmp	r3, r2
   18dee:	d002      	beq.n	18df6 <mp_builtin___import__+0x4f2>
        return module_obj;
   18df0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18df4:	e001      	b.n	18dfa <mp_builtin___import__+0x4f6>
    }
    // Otherwise, we need to return top-level package
    return top_module_obj;
   18df6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
}
   18dfa:	4618      	mov	r0, r3
   18dfc:	f507 77c6 	add.w	r7, r7, #396	; 0x18c
   18e00:	46bd      	mov	sp, r7
   18e02:	bd90      	pop	{r4, r7, pc}
   18e04:	00021c58 	.word	0x00021c58
   18e08:	00024590 	.word	0x00024590
   18e0c:	000234d4 	.word	0x000234d4

00018e10 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   18e10:	b480      	push	{r7}
   18e12:	b083      	sub	sp, #12
   18e14:	af00      	add	r7, sp, #0
   18e16:	6078      	str	r0, [r7, #4]
   18e18:	687b      	ldr	r3, [r7, #4]
   18e1a:	f003 0303 	and.w	r3, r3, #3
   18e1e:	2b00      	cmp	r3, #0
   18e20:	bf0c      	ite	eq
   18e22:	2301      	moveq	r3, #1
   18e24:	2300      	movne	r3, #0
   18e26:	b2db      	uxtb	r3, r3
   18e28:	4618      	mov	r0, r3
   18e2a:	370c      	adds	r7, #12
   18e2c:	46bd      	mov	sp, r7
   18e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
   18e32:	4770      	bx	lr

00018e34 <mp_locals_get>:
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
   18e34:	b480      	push	{r7}
   18e36:	af00      	add	r7, sp, #0
   18e38:	4b03      	ldr	r3, [pc, #12]	; (18e48 <mp_locals_get+0x14>)
   18e3a:	685b      	ldr	r3, [r3, #4]
   18e3c:	4618      	mov	r0, r3
   18e3e:	46bd      	mov	sp, r7
   18e40:	f85d 7b04 	ldr.w	r7, [sp], #4
   18e44:	4770      	bx	lr
   18e46:	bf00      	nop
   18e48:	200012f0 	.word	0x200012f0

00018e4c <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   18e4c:	b480      	push	{r7}
   18e4e:	af00      	add	r7, sp, #0
   18e50:	4b03      	ldr	r3, [pc, #12]	; (18e60 <mp_globals_get+0x14>)
   18e52:	689b      	ldr	r3, [r3, #8]
   18e54:	4618      	mov	r0, r3
   18e56:	46bd      	mov	sp, r7
   18e58:	f85d 7b04 	ldr.w	r7, [sp], #4
   18e5c:	4770      	bx	lr
   18e5e:	bf00      	nop
   18e60:	200012f0 	.word	0x200012f0

00018e64 <eval_exec_helper>:

#endif // MICROPY_PY_BUILTINS_COMPILE

#if MICROPY_PY_BUILTINS_EVAL_EXEC

STATIC mp_obj_t eval_exec_helper(size_t n_args, const mp_obj_t *args, mp_parse_input_kind_t parse_input_kind) {
   18e64:	b580      	push	{r7, lr}
   18e66:	b08a      	sub	sp, #40	; 0x28
   18e68:	af00      	add	r7, sp, #0
   18e6a:	60f8      	str	r0, [r7, #12]
   18e6c:	60b9      	str	r1, [r7, #8]
   18e6e:	607a      	str	r2, [r7, #4]
    // work out the context
    mp_obj_dict_t *globals = mp_globals_get();
   18e70:	f7ff ffec 	bl	18e4c <mp_globals_get>
   18e74:	6278      	str	r0, [r7, #36]	; 0x24
    mp_obj_dict_t *locals = mp_locals_get();
   18e76:	f7ff ffdd 	bl	18e34 <mp_locals_get>
   18e7a:	6238      	str	r0, [r7, #32]
    for (size_t i = 1; i < 3 && i < n_args; ++i) {
   18e7c:	2301      	movs	r3, #1
   18e7e:	61fb      	str	r3, [r7, #28]
   18e80:	e02f      	b.n	18ee2 <eval_exec_helper+0x7e>
        if (args[i] != mp_const_none) {
   18e82:	69fb      	ldr	r3, [r7, #28]
   18e84:	009b      	lsls	r3, r3, #2
   18e86:	68ba      	ldr	r2, [r7, #8]
   18e88:	4413      	add	r3, r2
   18e8a:	681b      	ldr	r3, [r3, #0]
   18e8c:	4a26      	ldr	r2, [pc, #152]	; (18f28 <eval_exec_helper+0xc4>)
   18e8e:	4293      	cmp	r3, r2
   18e90:	d024      	beq.n	18edc <eval_exec_helper+0x78>
            if (!MP_OBJ_IS_TYPE(args[i], &mp_type_dict)) {
   18e92:	69fb      	ldr	r3, [r7, #28]
   18e94:	009b      	lsls	r3, r3, #2
   18e96:	68ba      	ldr	r2, [r7, #8]
   18e98:	4413      	add	r3, r2
   18e9a:	681b      	ldr	r3, [r3, #0]
   18e9c:	4618      	mov	r0, r3
   18e9e:	f7ff ffb7 	bl	18e10 <MP_OBJ_IS_OBJ>
   18ea2:	4603      	mov	r3, r0
   18ea4:	f083 0301 	eor.w	r3, r3, #1
   18ea8:	b2db      	uxtb	r3, r3
   18eaa:	2b00      	cmp	r3, #0
   18eac:	d108      	bne.n	18ec0 <eval_exec_helper+0x5c>
   18eae:	69fb      	ldr	r3, [r7, #28]
   18eb0:	009b      	lsls	r3, r3, #2
   18eb2:	68ba      	ldr	r2, [r7, #8]
   18eb4:	4413      	add	r3, r2
   18eb6:	681b      	ldr	r3, [r3, #0]
   18eb8:	681b      	ldr	r3, [r3, #0]
   18eba:	4a1c      	ldr	r2, [pc, #112]	; (18f2c <eval_exec_helper+0xc8>)
   18ebc:	4293      	cmp	r3, r2
   18ebe:	d002      	beq.n	18ec6 <eval_exec_helper+0x62>
                mp_raise_TypeError(NULL);
   18ec0:	2000      	movs	r0, #0
   18ec2:	f7f4 f879 	bl	cfb8 <mp_raise_TypeError>
            }
            locals = MP_OBJ_TO_PTR(args[i]);
   18ec6:	69fb      	ldr	r3, [r7, #28]
   18ec8:	009b      	lsls	r3, r3, #2
   18eca:	68ba      	ldr	r2, [r7, #8]
   18ecc:	4413      	add	r3, r2
   18ece:	681b      	ldr	r3, [r3, #0]
   18ed0:	623b      	str	r3, [r7, #32]
            if (i == 1) {
   18ed2:	69fb      	ldr	r3, [r7, #28]
   18ed4:	2b01      	cmp	r3, #1
   18ed6:	d101      	bne.n	18edc <eval_exec_helper+0x78>
                globals = locals;
   18ed8:	6a3b      	ldr	r3, [r7, #32]
   18eda:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t i = 1; i < 3 && i < n_args; ++i) {
   18edc:	69fb      	ldr	r3, [r7, #28]
   18ede:	3301      	adds	r3, #1
   18ee0:	61fb      	str	r3, [r7, #28]
   18ee2:	69fb      	ldr	r3, [r7, #28]
   18ee4:	2b02      	cmp	r3, #2
   18ee6:	d803      	bhi.n	18ef0 <eval_exec_helper+0x8c>
   18ee8:	69fa      	ldr	r2, [r7, #28]
   18eea:	68fb      	ldr	r3, [r7, #12]
   18eec:	429a      	cmp	r2, r3
   18eee:	d3c8      	bcc.n	18e82 <eval_exec_helper+0x1e>
        return code_execute(MP_OBJ_TO_PTR(args[0]), globals, locals);
    }
    #endif

    size_t str_len;
    const char *str = mp_obj_str_get_data(args[0], &str_len);
   18ef0:	68bb      	ldr	r3, [r7, #8]
   18ef2:	681b      	ldr	r3, [r3, #0]
   18ef4:	f107 0210 	add.w	r2, r7, #16
   18ef8:	4611      	mov	r1, r2
   18efa:	4618      	mov	r0, r3
   18efc:	f7fc fc78 	bl	157f0 <mp_obj_str_get_data>
   18f00:	61b8      	str	r0, [r7, #24]
    mp_lexer_t *lex;
    if (MICROPY_PY_BUILTINS_EXECFILE && parse_input_kind == MP_PARSE_SINGLE_INPUT) {
        lex = mp_lexer_new_from_file(str);
        parse_input_kind = MP_PARSE_FILE_INPUT;
    } else {
        lex = mp_lexer_new_from_str_len(MP_QSTR__lt_string_gt_, str, str_len, 0);
   18f02:	693a      	ldr	r2, [r7, #16]
   18f04:	2300      	movs	r3, #0
   18f06:	69b9      	ldr	r1, [r7, #24]
   18f08:	2037      	movs	r0, #55	; 0x37
   18f0a:	f7ea fcdf 	bl	38cc <mp_lexer_new_from_str_len>
   18f0e:	6178      	str	r0, [r7, #20]
    }

    return mp_parse_compile_execute(lex, parse_input_kind, globals, locals);
   18f10:	6a3b      	ldr	r3, [r7, #32]
   18f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   18f14:	6879      	ldr	r1, [r7, #4]
   18f16:	6978      	ldr	r0, [r7, #20]
   18f18:	f7f3 ffc0 	bl	ce9c <mp_parse_compile_execute>
   18f1c:	4603      	mov	r3, r0
}
   18f1e:	4618      	mov	r0, r3
   18f20:	3728      	adds	r7, #40	; 0x28
   18f22:	46bd      	mov	sp, r7
   18f24:	bd80      	pop	{r7, pc}
   18f26:	bf00      	nop
   18f28:	000234d4 	.word	0x000234d4
   18f2c:	00022104 	.word	0x00022104

00018f30 <mp_builtin_eval>:

STATIC mp_obj_t mp_builtin_eval(size_t n_args, const mp_obj_t *args) {
   18f30:	b580      	push	{r7, lr}
   18f32:	b082      	sub	sp, #8
   18f34:	af00      	add	r7, sp, #0
   18f36:	6078      	str	r0, [r7, #4]
   18f38:	6039      	str	r1, [r7, #0]
    return eval_exec_helper(n_args, args, MP_PARSE_EVAL_INPUT);
   18f3a:	2202      	movs	r2, #2
   18f3c:	6839      	ldr	r1, [r7, #0]
   18f3e:	6878      	ldr	r0, [r7, #4]
   18f40:	f7ff ff90 	bl	18e64 <eval_exec_helper>
   18f44:	4603      	mov	r3, r0
}
   18f46:	4618      	mov	r0, r3
   18f48:	3708      	adds	r7, #8
   18f4a:	46bd      	mov	sp, r7
   18f4c:	bd80      	pop	{r7, pc}
   18f4e:	bf00      	nop

00018f50 <mp_builtin_exec>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_eval_obj, 1, 3, mp_builtin_eval);

STATIC mp_obj_t mp_builtin_exec(size_t n_args, const mp_obj_t *args) {
   18f50:	b580      	push	{r7, lr}
   18f52:	b082      	sub	sp, #8
   18f54:	af00      	add	r7, sp, #0
   18f56:	6078      	str	r0, [r7, #4]
   18f58:	6039      	str	r1, [r7, #0]
    return eval_exec_helper(n_args, args, MP_PARSE_FILE_INPUT);
   18f5a:	2201      	movs	r2, #1
   18f5c:	6839      	ldr	r1, [r7, #0]
   18f5e:	6878      	ldr	r0, [r7, #4]
   18f60:	f7ff ff80 	bl	18e64 <eval_exec_helper>
   18f64:	4603      	mov	r3, r0
}
   18f66:	4618      	mov	r0, r3
   18f68:	3708      	adds	r7, #8
   18f6a:	46bd      	mov	sp, r7
   18f6c:	bd80      	pop	{r7, pc}
   18f6e:	bf00      	nop

00018f70 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   18f70:	b480      	push	{r7}
   18f72:	b083      	sub	sp, #12
   18f74:	af00      	add	r7, sp, #0
   18f76:	6078      	str	r0, [r7, #4]
   18f78:	687b      	ldr	r3, [r7, #4]
   18f7a:	f003 0301 	and.w	r3, r3, #1
   18f7e:	2b00      	cmp	r3, #0
   18f80:	bf14      	ite	ne
   18f82:	2301      	movne	r3, #1
   18f84:	2300      	moveq	r3, #0
   18f86:	b2db      	uxtb	r3, r3
   18f88:	4618      	mov	r0, r3
   18f8a:	370c      	adds	r7, #12
   18f8c:	46bd      	mov	sp, r7
   18f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
   18f92:	4770      	bx	lr

00018f94 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   18f94:	b480      	push	{r7}
   18f96:	b083      	sub	sp, #12
   18f98:	af00      	add	r7, sp, #0
   18f9a:	6078      	str	r0, [r7, #4]
   18f9c:	687b      	ldr	r3, [r7, #4]
   18f9e:	f003 0303 	and.w	r3, r3, #3
   18fa2:	2b00      	cmp	r3, #0
   18fa4:	bf0c      	ite	eq
   18fa6:	2301      	moveq	r3, #1
   18fa8:	2300      	movne	r3, #0
   18faa:	b2db      	uxtb	r3, r3
   18fac:	4618      	mov	r0, r3
   18fae:	370c      	adds	r7, #12
   18fb0:	46bd      	mov	sp, r7
   18fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
   18fb6:	4770      	bx	lr

00018fb8 <MP_MAP_SLOT_IS_FILLED>:
static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
   18fb8:	b480      	push	{r7}
   18fba:	b083      	sub	sp, #12
   18fbc:	af00      	add	r7, sp, #0
   18fbe:	6078      	str	r0, [r7, #4]
   18fc0:	6039      	str	r1, [r7, #0]
   18fc2:	687b      	ldr	r3, [r7, #4]
   18fc4:	689a      	ldr	r2, [r3, #8]
   18fc6:	683b      	ldr	r3, [r7, #0]
   18fc8:	00db      	lsls	r3, r3, #3
   18fca:	4413      	add	r3, r2
   18fcc:	681b      	ldr	r3, [r3, #0]
   18fce:	2b00      	cmp	r3, #0
   18fd0:	d009      	beq.n	18fe6 <MP_MAP_SLOT_IS_FILLED+0x2e>
   18fd2:	687b      	ldr	r3, [r7, #4]
   18fd4:	689a      	ldr	r2, [r3, #8]
   18fd6:	683b      	ldr	r3, [r7, #0]
   18fd8:	00db      	lsls	r3, r3, #3
   18fda:	4413      	add	r3, r2
   18fdc:	681b      	ldr	r3, [r3, #0]
   18fde:	2b08      	cmp	r3, #8
   18fe0:	d001      	beq.n	18fe6 <MP_MAP_SLOT_IS_FILLED+0x2e>
   18fe2:	2301      	movs	r3, #1
   18fe4:	e000      	b.n	18fe8 <MP_MAP_SLOT_IS_FILLED+0x30>
   18fe6:	2300      	movs	r3, #0
   18fe8:	f003 0301 	and.w	r3, r3, #1
   18fec:	b2db      	uxtb	r3, r3
   18fee:	4618      	mov	r0, r3
   18ff0:	370c      	adds	r7, #12
   18ff2:	46bd      	mov	sp, r7
   18ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
   18ff8:	4770      	bx	lr
   18ffa:	bf00      	nop

00018ffc <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   18ffc:	b480      	push	{r7}
   18ffe:	b083      	sub	sp, #12
   19000:	af00      	add	r7, sp, #0
   19002:	6078      	str	r0, [r7, #4]
   19004:	687b      	ldr	r3, [r7, #4]
   19006:	2b00      	cmp	r3, #0
   19008:	d001      	beq.n	1900e <mp_obj_new_bool+0x12>
   1900a:	4b04      	ldr	r3, [pc, #16]	; (1901c <mp_obj_new_bool+0x20>)
   1900c:	e000      	b.n	19010 <mp_obj_new_bool+0x14>
   1900e:	4b04      	ldr	r3, [pc, #16]	; (19020 <mp_obj_new_bool+0x24>)
   19010:	4618      	mov	r0, r3
   19012:	370c      	adds	r7, #12
   19014:	46bd      	mov	sp, r7
   19016:	f85d 7b04 	ldr.w	r7, [sp], #4
   1901a:	4770      	bx	lr
   1901c:	00021c60 	.word	0x00021c60
   19020:	00021c58 	.word	0x00021c58

00019024 <mp_locals_get>:
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
   19024:	b480      	push	{r7}
   19026:	af00      	add	r7, sp, #0
   19028:	4b03      	ldr	r3, [pc, #12]	; (19038 <mp_locals_get+0x14>)
   1902a:	685b      	ldr	r3, [r3, #4]
   1902c:	4618      	mov	r0, r3
   1902e:	46bd      	mov	sp, r7
   19030:	f85d 7b04 	ldr.w	r7, [sp], #4
   19034:	4770      	bx	lr
   19036:	bf00      	nop
   19038:	200012f0 	.word	0x200012f0

0001903c <mp_locals_set>:
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
   1903c:	b480      	push	{r7}
   1903e:	b083      	sub	sp, #12
   19040:	af00      	add	r7, sp, #0
   19042:	6078      	str	r0, [r7, #4]
   19044:	4a04      	ldr	r2, [pc, #16]	; (19058 <mp_locals_set+0x1c>)
   19046:	687b      	ldr	r3, [r7, #4]
   19048:	6053      	str	r3, [r2, #4]
   1904a:	bf00      	nop
   1904c:	370c      	adds	r7, #12
   1904e:	46bd      	mov	sp, r7
   19050:	f85d 7b04 	ldr.w	r7, [sp], #4
   19054:	4770      	bx	lr
   19056:	bf00      	nop
   19058:	200012f0 	.word	0x200012f0

0001905c <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   1905c:	b480      	push	{r7}
   1905e:	af00      	add	r7, sp, #0
   19060:	4b03      	ldr	r3, [pc, #12]	; (19070 <mp_globals_get+0x14>)
   19062:	689b      	ldr	r3, [r3, #8]
   19064:	4618      	mov	r0, r3
   19066:	46bd      	mov	sp, r7
   19068:	f85d 7b04 	ldr.w	r7, [sp], #4
   1906c:	4770      	bx	lr
   1906e:	bf00      	nop
   19070:	200012f0 	.word	0x200012f0

00019074 <mp_builtin___build_class__>:
#endif

// args[0] is function from class body
// args[1] is class name
// args[2:] are base objects
STATIC mp_obj_t mp_builtin___build_class__(size_t n_args, const mp_obj_t *args) {
   19074:	b580      	push	{r7, lr}
   19076:	b08a      	sub	sp, #40	; 0x28
   19078:	af00      	add	r7, sp, #0
   1907a:	6078      	str	r0, [r7, #4]
   1907c:	6039      	str	r1, [r7, #0]
    assert(2 <= n_args);
   1907e:	687b      	ldr	r3, [r7, #4]
   19080:	2b01      	cmp	r3, #1
   19082:	d805      	bhi.n	19090 <mp_builtin___build_class__+0x1c>
   19084:	4b24      	ldr	r3, [pc, #144]	; (19118 <mp_builtin___build_class__+0xa4>)
   19086:	4a25      	ldr	r2, [pc, #148]	; (1911c <mp_builtin___build_class__+0xa8>)
   19088:	2132      	movs	r1, #50	; 0x32
   1908a:	4825      	ldr	r0, [pc, #148]	; (19120 <mp_builtin___build_class__+0xac>)
   1908c:	f002 fb7a 	bl	1b784 <__assert_func>

    // set the new classes __locals__ object
    mp_obj_dict_t *old_locals = mp_locals_get();
   19090:	f7ff ffc8 	bl	19024 <mp_locals_get>
   19094:	6238      	str	r0, [r7, #32]
    mp_obj_t class_locals = mp_obj_new_dict(0);
   19096:	2000      	movs	r0, #0
   19098:	f7f6 f8cc 	bl	f234 <mp_obj_new_dict>
   1909c:	61f8      	str	r0, [r7, #28]
    mp_locals_set(MP_OBJ_TO_PTR(class_locals));
   1909e:	69f8      	ldr	r0, [r7, #28]
   190a0:	f7ff ffcc 	bl	1903c <mp_locals_set>

    // call the class code
    mp_obj_t cell = mp_call_function_0(args[0]);
   190a4:	683b      	ldr	r3, [r7, #0]
   190a6:	681b      	ldr	r3, [r3, #0]
   190a8:	4618      	mov	r0, r3
   190aa:	f7f2 fe9d 	bl	bde8 <mp_call_function_0>
   190ae:	61b8      	str	r0, [r7, #24]

    // restore old __locals__ object
    mp_locals_set(old_locals);
   190b0:	6a38      	ldr	r0, [r7, #32]
   190b2:	f7ff ffc3 	bl	1903c <mp_locals_set>

    // get the class type (meta object) from the base objects
    mp_obj_t meta;
    if (n_args == 2) {
   190b6:	687b      	ldr	r3, [r7, #4]
   190b8:	2b02      	cmp	r3, #2
   190ba:	d102      	bne.n	190c2 <mp_builtin___build_class__+0x4e>
        // no explicit bases, so use 'type'
        meta = MP_OBJ_FROM_PTR(&mp_type_type);
   190bc:	4b19      	ldr	r3, [pc, #100]	; (19124 <mp_builtin___build_class__+0xb0>)
   190be:	627b      	str	r3, [r7, #36]	; 0x24
   190c0:	e006      	b.n	190d0 <mp_builtin___build_class__+0x5c>
    } else {
        // use type of first base object
        meta = MP_OBJ_FROM_PTR(mp_obj_get_type(args[2]));
   190c2:	683b      	ldr	r3, [r7, #0]
   190c4:	3308      	adds	r3, #8
   190c6:	681b      	ldr	r3, [r3, #0]
   190c8:	4618      	mov	r0, r3
   190ca:	f7f4 fbe3 	bl	d894 <mp_obj_get_type>
   190ce:	6278      	str	r0, [r7, #36]	; 0x24

    // TODO do proper metaclass resolution for multiple base objects

    // create the new class using a call to the meta object
    mp_obj_t meta_args[3];
    meta_args[0] = args[1]; // class name
   190d0:	683b      	ldr	r3, [r7, #0]
   190d2:	685b      	ldr	r3, [r3, #4]
   190d4:	60bb      	str	r3, [r7, #8]
    meta_args[1] = mp_obj_new_tuple(n_args - 2, args + 2); // tuple of bases
   190d6:	687b      	ldr	r3, [r7, #4]
   190d8:	1e9a      	subs	r2, r3, #2
   190da:	683b      	ldr	r3, [r7, #0]
   190dc:	3308      	adds	r3, #8
   190de:	4619      	mov	r1, r3
   190e0:	4610      	mov	r0, r2
   190e2:	f7fc ff45 	bl	15f70 <mp_obj_new_tuple>
   190e6:	4603      	mov	r3, r0
   190e8:	60fb      	str	r3, [r7, #12]
    meta_args[2] = class_locals; // dict of members
   190ea:	69fb      	ldr	r3, [r7, #28]
   190ec:	613b      	str	r3, [r7, #16]
    mp_obj_t new_class = mp_call_function_n_kw(meta, 3, 0, meta_args);
   190ee:	f107 0308 	add.w	r3, r7, #8
   190f2:	2200      	movs	r2, #0
   190f4:	2103      	movs	r1, #3
   190f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
   190f8:	f7f2 feac 	bl	be54 <mp_call_function_n_kw>
   190fc:	6178      	str	r0, [r7, #20]

    // store into cell if neede
    if (cell != mp_const_none) {
   190fe:	69bb      	ldr	r3, [r7, #24]
   19100:	4a09      	ldr	r2, [pc, #36]	; (19128 <mp_builtin___build_class__+0xb4>)
   19102:	4293      	cmp	r3, r2
   19104:	d003      	beq.n	1910e <mp_builtin___build_class__+0x9a>
        mp_obj_cell_set(cell, new_class);
   19106:	6979      	ldr	r1, [r7, #20]
   19108:	69b8      	ldr	r0, [r7, #24]
   1910a:	f7f5 f937 	bl	e37c <mp_obj_cell_set>
    }

    return new_class;
   1910e:	697b      	ldr	r3, [r7, #20]
}
   19110:	4618      	mov	r0, r3
   19112:	3728      	adds	r7, #40	; 0x28
   19114:	46bd      	mov	sp, r7
   19116:	bd80      	pop	{r7, pc}
   19118:	000245d8 	.word	0x000245d8
   1911c:	000249fc 	.word	0x000249fc
   19120:	000245e4 	.word	0x000245e4
   19124:	000240e4 	.word	0x000240e4
   19128:	000234d4 	.word	0x000234d4

0001912c <mp_builtin_abs>:
MP_DEFINE_CONST_FUN_OBJ_VAR(mp_builtin___build_class___obj, 2, mp_builtin___build_class__);

STATIC mp_obj_t mp_builtin_abs(mp_obj_t o_in) {
   1912c:	b580      	push	{r7, lr}
   1912e:	b082      	sub	sp, #8
   19130:	af00      	add	r7, sp, #0
   19132:	6078      	str	r0, [r7, #4]
    return mp_unary_op(MP_UNARY_OP_ABS, o_in);
   19134:	6879      	ldr	r1, [r7, #4]
   19136:	2007      	movs	r0, #7
   19138:	f7f2 fb04 	bl	b744 <mp_unary_op>
   1913c:	4603      	mov	r3, r0
}
   1913e:	4618      	mov	r0, r3
   19140:	3708      	adds	r7, #8
   19142:	46bd      	mov	sp, r7
   19144:	bd80      	pop	{r7, pc}
   19146:	bf00      	nop

00019148 <mp_builtin_all>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_abs_obj, mp_builtin_abs);

STATIC mp_obj_t mp_builtin_all(mp_obj_t o_in) {
   19148:	b580      	push	{r7, lr}
   1914a:	b088      	sub	sp, #32
   1914c:	af00      	add	r7, sp, #0
   1914e:	6078      	str	r0, [r7, #4]
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(o_in, &iter_buf);
   19150:	f107 0308 	add.w	r3, r7, #8
   19154:	4619      	mov	r1, r3
   19156:	6878      	ldr	r0, [r7, #4]
   19158:	f7f3 fbf4 	bl	c944 <mp_getiter>
   1915c:	61f8      	str	r0, [r7, #28]
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   1915e:	e00a      	b.n	19176 <mp_builtin_all+0x2e>
        if (!mp_obj_is_true(item)) {
   19160:	69b8      	ldr	r0, [r7, #24]
   19162:	f7f4 fc75 	bl	da50 <mp_obj_is_true>
   19166:	4603      	mov	r3, r0
   19168:	f083 0301 	eor.w	r3, r3, #1
   1916c:	b2db      	uxtb	r3, r3
   1916e:	2b00      	cmp	r3, #0
   19170:	d001      	beq.n	19176 <mp_builtin_all+0x2e>
            return mp_const_false;
   19172:	4b07      	ldr	r3, [pc, #28]	; (19190 <mp_builtin_all+0x48>)
   19174:	e007      	b.n	19186 <mp_builtin_all+0x3e>
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   19176:	69f8      	ldr	r0, [r7, #28]
   19178:	f7f3 fc66 	bl	ca48 <mp_iternext>
   1917c:	61b8      	str	r0, [r7, #24]
   1917e:	69bb      	ldr	r3, [r7, #24]
   19180:	2b04      	cmp	r3, #4
   19182:	d1ed      	bne.n	19160 <mp_builtin_all+0x18>
        }
    }
    return mp_const_true;
   19184:	4b03      	ldr	r3, [pc, #12]	; (19194 <mp_builtin_all+0x4c>)
}
   19186:	4618      	mov	r0, r3
   19188:	3720      	adds	r7, #32
   1918a:	46bd      	mov	sp, r7
   1918c:	bd80      	pop	{r7, pc}
   1918e:	bf00      	nop
   19190:	00021c58 	.word	0x00021c58
   19194:	00021c60 	.word	0x00021c60

00019198 <mp_builtin_any>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_all_obj, mp_builtin_all);

STATIC mp_obj_t mp_builtin_any(mp_obj_t o_in) {
   19198:	b580      	push	{r7, lr}
   1919a:	b088      	sub	sp, #32
   1919c:	af00      	add	r7, sp, #0
   1919e:	6078      	str	r0, [r7, #4]
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(o_in, &iter_buf);
   191a0:	f107 0308 	add.w	r3, r7, #8
   191a4:	4619      	mov	r1, r3
   191a6:	6878      	ldr	r0, [r7, #4]
   191a8:	f7f3 fbcc 	bl	c944 <mp_getiter>
   191ac:	61f8      	str	r0, [r7, #28]
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   191ae:	e007      	b.n	191c0 <mp_builtin_any+0x28>
        if (mp_obj_is_true(item)) {
   191b0:	69b8      	ldr	r0, [r7, #24]
   191b2:	f7f4 fc4d 	bl	da50 <mp_obj_is_true>
   191b6:	4603      	mov	r3, r0
   191b8:	2b00      	cmp	r3, #0
   191ba:	d001      	beq.n	191c0 <mp_builtin_any+0x28>
            return mp_const_true;
   191bc:	4b06      	ldr	r3, [pc, #24]	; (191d8 <mp_builtin_any+0x40>)
   191be:	e007      	b.n	191d0 <mp_builtin_any+0x38>
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   191c0:	69f8      	ldr	r0, [r7, #28]
   191c2:	f7f3 fc41 	bl	ca48 <mp_iternext>
   191c6:	61b8      	str	r0, [r7, #24]
   191c8:	69bb      	ldr	r3, [r7, #24]
   191ca:	2b04      	cmp	r3, #4
   191cc:	d1f0      	bne.n	191b0 <mp_builtin_any+0x18>
        }
    }
    return mp_const_false;
   191ce:	4b03      	ldr	r3, [pc, #12]	; (191dc <mp_builtin_any+0x44>)
}
   191d0:	4618      	mov	r0, r3
   191d2:	3720      	adds	r7, #32
   191d4:	46bd      	mov	sp, r7
   191d6:	bd80      	pop	{r7, pc}
   191d8:	00021c60 	.word	0x00021c60
   191dc:	00021c58 	.word	0x00021c58

000191e0 <mp_builtin_bin>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_any_obj, mp_builtin_any);

STATIC mp_obj_t mp_builtin_bin(mp_obj_t o_in) {
   191e0:	b580      	push	{r7, lr}
   191e2:	b084      	sub	sp, #16
   191e4:	af00      	add	r7, sp, #0
   191e6:	6078      	str	r0, [r7, #4]
    mp_obj_t args[] = { MP_OBJ_NEW_QSTR(MP_QSTR__brace_open__colon__hash_b_brace_close_), o_in };
   191e8:	23b6      	movs	r3, #182	; 0xb6
   191ea:	60bb      	str	r3, [r7, #8]
   191ec:	687b      	ldr	r3, [r7, #4]
   191ee:	60fb      	str	r3, [r7, #12]
    return mp_obj_str_format(MP_ARRAY_SIZE(args), args, NULL);
   191f0:	f107 0308 	add.w	r3, r7, #8
   191f4:	2200      	movs	r2, #0
   191f6:	4619      	mov	r1, r3
   191f8:	2002      	movs	r0, #2
   191fa:	f7fb f965 	bl	144c8 <mp_obj_str_format>
   191fe:	4603      	mov	r3, r0
}
   19200:	4618      	mov	r0, r3
   19202:	3710      	adds	r7, #16
   19204:	46bd      	mov	sp, r7
   19206:	bd80      	pop	{r7, pc}

00019208 <mp_builtin_callable>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_bin_obj, mp_builtin_bin);

STATIC mp_obj_t mp_builtin_callable(mp_obj_t o_in) {
   19208:	b580      	push	{r7, lr}
   1920a:	b082      	sub	sp, #8
   1920c:	af00      	add	r7, sp, #0
   1920e:	6078      	str	r0, [r7, #4]
    if (mp_obj_is_callable(o_in)) {
   19210:	6878      	ldr	r0, [r7, #4]
   19212:	f7f4 fc73 	bl	dafc <mp_obj_is_callable>
   19216:	4603      	mov	r3, r0
   19218:	2b00      	cmp	r3, #0
   1921a:	d001      	beq.n	19220 <mp_builtin_callable+0x18>
        return mp_const_true;
   1921c:	4b03      	ldr	r3, [pc, #12]	; (1922c <mp_builtin_callable+0x24>)
   1921e:	e000      	b.n	19222 <mp_builtin_callable+0x1a>
    } else {
        return mp_const_false;
   19220:	4b03      	ldr	r3, [pc, #12]	; (19230 <mp_builtin_callable+0x28>)
    }
}
   19222:	4618      	mov	r0, r3
   19224:	3708      	adds	r7, #8
   19226:	46bd      	mov	sp, r7
   19228:	bd80      	pop	{r7, pc}
   1922a:	bf00      	nop
   1922c:	00021c60 	.word	0x00021c60
   19230:	00021c58 	.word	0x00021c58

00019234 <mp_builtin_chr>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_callable_obj, mp_builtin_callable);

STATIC mp_obj_t mp_builtin_chr(mp_obj_t o_in) {
   19234:	b580      	push	{r7, lr}
   19236:	b084      	sub	sp, #16
   19238:	af00      	add	r7, sp, #0
   1923a:	6078      	str	r0, [r7, #4]
    } else {
        mp_raise_ValueError("chr() arg not in range(0x110000)");
    }
    return mp_obj_new_str_via_qstr((char*)str, len);
    #else
    mp_int_t ord = mp_obj_get_int(o_in);
   1923c:	6878      	ldr	r0, [r7, #4]
   1923e:	f7f4 fd07 	bl	dc50 <mp_obj_get_int>
   19242:	60f8      	str	r0, [r7, #12]
    if (0 <= ord && ord <= 0xff) {
   19244:	68fb      	ldr	r3, [r7, #12]
   19246:	2b00      	cmp	r3, #0
   19248:	db0d      	blt.n	19266 <mp_builtin_chr+0x32>
   1924a:	68fb      	ldr	r3, [r7, #12]
   1924c:	2bff      	cmp	r3, #255	; 0xff
   1924e:	dc0a      	bgt.n	19266 <mp_builtin_chr+0x32>
        uint8_t str[1] = {ord};
   19250:	68fb      	ldr	r3, [r7, #12]
   19252:	b2db      	uxtb	r3, r3
   19254:	723b      	strb	r3, [r7, #8]
        return mp_obj_new_str_via_qstr((char*)str, 1);
   19256:	f107 0308 	add.w	r3, r7, #8
   1925a:	2101      	movs	r1, #1
   1925c:	4618      	mov	r0, r3
   1925e:	f7fc f8f1 	bl	15444 <mp_obj_new_str_via_qstr>
   19262:	4603      	mov	r3, r0
   19264:	e002      	b.n	1926c <mp_builtin_chr+0x38>
    } else {
        mp_raise_ValueError("chr() arg not in range(256)");
   19266:	4803      	ldr	r0, [pc, #12]	; (19274 <mp_builtin_chr+0x40>)
   19268:	f7f3 fe9c 	bl	cfa4 <mp_raise_ValueError>
    }
    #endif
}
   1926c:	4618      	mov	r0, r3
   1926e:	3710      	adds	r7, #16
   19270:	46bd      	mov	sp, r7
   19272:	bd80      	pop	{r7, pc}
   19274:	00024630 	.word	0x00024630

00019278 <mp_builtin_dir>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_chr_obj, mp_builtin_chr);

STATIC mp_obj_t mp_builtin_dir(size_t n_args, const mp_obj_t *args) {
   19278:	b580      	push	{r7, lr}
   1927a:	b08a      	sub	sp, #40	; 0x28
   1927c:	af00      	add	r7, sp, #0
   1927e:	6078      	str	r0, [r7, #4]
   19280:	6039      	str	r1, [r7, #0]
    mp_obj_t dir = mp_obj_new_list(0, NULL);
   19282:	2100      	movs	r1, #0
   19284:	2000      	movs	r0, #0
   19286:	f7f8 fb71 	bl	1196c <mp_obj_new_list>
   1928a:	61f8      	str	r0, [r7, #28]
    if (n_args == 0) {
   1928c:	687b      	ldr	r3, [r7, #4]
   1928e:	2b00      	cmp	r3, #0
   19290:	d121      	bne.n	192d6 <mp_builtin_dir+0x5e>
        // Make a list of names in the local namespace
        mp_obj_dict_t *dict = mp_locals_get();
   19292:	f7ff fec7 	bl	19024 <mp_locals_get>
   19296:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0; i < dict->map.alloc; i++) {
   19298:	2300      	movs	r3, #0
   1929a:	627b      	str	r3, [r7, #36]	; 0x24
   1929c:	e015      	b.n	192ca <mp_builtin_dir+0x52>
            if (MP_MAP_SLOT_IS_FILLED(&dict->map, i)) {
   1929e:	69bb      	ldr	r3, [r7, #24]
   192a0:	3304      	adds	r3, #4
   192a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
   192a4:	4618      	mov	r0, r3
   192a6:	f7ff fe87 	bl	18fb8 <MP_MAP_SLOT_IS_FILLED>
   192aa:	4603      	mov	r3, r0
   192ac:	2b00      	cmp	r3, #0
   192ae:	d009      	beq.n	192c4 <mp_builtin_dir+0x4c>
                mp_obj_list_append(dir, dict->map.table[i].key);
   192b0:	69bb      	ldr	r3, [r7, #24]
   192b2:	68da      	ldr	r2, [r3, #12]
   192b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   192b6:	00db      	lsls	r3, r3, #3
   192b8:	4413      	add	r3, r2
   192ba:	681b      	ldr	r3, [r3, #0]
   192bc:	4619      	mov	r1, r3
   192be:	69f8      	ldr	r0, [r7, #28]
   192c0:	f7f7 fec2 	bl	11048 <mp_obj_list_append>
        for (size_t i = 0; i < dict->map.alloc; i++) {
   192c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   192c6:	3301      	adds	r3, #1
   192c8:	627b      	str	r3, [r7, #36]	; 0x24
   192ca:	69bb      	ldr	r3, [r7, #24]
   192cc:	689a      	ldr	r2, [r3, #8]
   192ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   192d0:	429a      	cmp	r2, r3
   192d2:	d8e4      	bhi.n	1929e <mp_builtin_dir+0x26>
   192d4:	e024      	b.n	19320 <mp_builtin_dir+0xa8>
            }
        }
    } else { // n_args == 1
        // Make a list of names in the given object
        // Implemented by probing all possible qstrs with mp_load_method_maybe
        size_t nqstr = QSTR_TOTAL();
   192d6:	4b15      	ldr	r3, [pc, #84]	; (1932c <mp_builtin_dir+0xb4>)
   192d8:	691b      	ldr	r3, [r3, #16]
   192da:	685a      	ldr	r2, [r3, #4]
   192dc:	4b13      	ldr	r3, [pc, #76]	; (1932c <mp_builtin_dir+0xb4>)
   192de:	691b      	ldr	r3, [r3, #16]
   192e0:	68db      	ldr	r3, [r3, #12]
   192e2:	4413      	add	r3, r2
   192e4:	617b      	str	r3, [r7, #20]
        for (size_t i = MP_QSTR_ + 1; i < nqstr; ++i) {
   192e6:	2302      	movs	r3, #2
   192e8:	623b      	str	r3, [r7, #32]
   192ea:	e015      	b.n	19318 <mp_builtin_dir+0xa0>
            mp_obj_t dest[2];
            mp_load_method_protected(args[0], i, dest, false);
   192ec:	683b      	ldr	r3, [r7, #0]
   192ee:	6818      	ldr	r0, [r3, #0]
   192f0:	f107 020c 	add.w	r2, r7, #12
   192f4:	2300      	movs	r3, #0
   192f6:	6a39      	ldr	r1, [r7, #32]
   192f8:	f7f3 fac8 	bl	c88c <mp_load_method_protected>
            if (dest[0] != MP_OBJ_NULL) {
   192fc:	68fb      	ldr	r3, [r7, #12]
   192fe:	2b00      	cmp	r3, #0
   19300:	d007      	beq.n	19312 <mp_builtin_dir+0x9a>
                // This relies on MP_QSTR__dir__ being first after MP_QSTR_
                if (i == MP_QSTR___dir__ && dest[1] != MP_OBJ_NULL) {
                    return mp_call_method_n_kw(0, 0, dest);
                }
                #endif
                mp_obj_list_append(dir, MP_OBJ_NEW_QSTR(i));
   19302:	6a3b      	ldr	r3, [r7, #32]
   19304:	009b      	lsls	r3, r3, #2
   19306:	f043 0302 	orr.w	r3, r3, #2
   1930a:	4619      	mov	r1, r3
   1930c:	69f8      	ldr	r0, [r7, #28]
   1930e:	f7f7 fe9b 	bl	11048 <mp_obj_list_append>
        for (size_t i = MP_QSTR_ + 1; i < nqstr; ++i) {
   19312:	6a3b      	ldr	r3, [r7, #32]
   19314:	3301      	adds	r3, #1
   19316:	623b      	str	r3, [r7, #32]
   19318:	6a3a      	ldr	r2, [r7, #32]
   1931a:	697b      	ldr	r3, [r7, #20]
   1931c:	429a      	cmp	r2, r3
   1931e:	d3e5      	bcc.n	192ec <mp_builtin_dir+0x74>
            }
        }
    }
    return dir;
   19320:	69fb      	ldr	r3, [r7, #28]
}
   19322:	4618      	mov	r0, r3
   19324:	3728      	adds	r7, #40	; 0x28
   19326:	46bd      	mov	sp, r7
   19328:	bd80      	pop	{r7, pc}
   1932a:	bf00      	nop
   1932c:	200012f0 	.word	0x200012f0

00019330 <mp_builtin_divmod>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_dir_obj, 0, 1, mp_builtin_dir);

STATIC mp_obj_t mp_builtin_divmod(mp_obj_t o1_in, mp_obj_t o2_in) {
   19330:	b580      	push	{r7, lr}
   19332:	b082      	sub	sp, #8
   19334:	af00      	add	r7, sp, #0
   19336:	6078      	str	r0, [r7, #4]
   19338:	6039      	str	r1, [r7, #0]
    return mp_binary_op(MP_BINARY_OP_DIVMOD, o1_in, o2_in);
   1933a:	683a      	ldr	r2, [r7, #0]
   1933c:	6879      	ldr	r1, [r7, #4]
   1933e:	2021      	movs	r0, #33	; 0x21
   19340:	f7f2 faf0 	bl	b924 <mp_binary_op>
   19344:	4603      	mov	r3, r0
}
   19346:	4618      	mov	r0, r3
   19348:	3708      	adds	r7, #8
   1934a:	46bd      	mov	sp, r7
   1934c:	bd80      	pop	{r7, pc}
   1934e:	bf00      	nop

00019350 <mp_builtin_hash>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_divmod_obj, mp_builtin_divmod);

STATIC mp_obj_t mp_builtin_hash(mp_obj_t o_in) {
   19350:	b580      	push	{r7, lr}
   19352:	b082      	sub	sp, #8
   19354:	af00      	add	r7, sp, #0
   19356:	6078      	str	r0, [r7, #4]
    // result is guaranteed to be a (small) int
    return mp_unary_op(MP_UNARY_OP_HASH, o_in);
   19358:	6879      	ldr	r1, [r7, #4]
   1935a:	2006      	movs	r0, #6
   1935c:	f7f2 f9f2 	bl	b744 <mp_unary_op>
   19360:	4603      	mov	r3, r0
}
   19362:	4618      	mov	r0, r3
   19364:	3708      	adds	r7, #8
   19366:	46bd      	mov	sp, r7
   19368:	bd80      	pop	{r7, pc}
   1936a:	bf00      	nop

0001936c <mp_builtin_hex>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_hash_obj, mp_builtin_hash);

STATIC mp_obj_t mp_builtin_hex(mp_obj_t o_in) {
   1936c:	b580      	push	{r7, lr}
   1936e:	b082      	sub	sp, #8
   19370:	af00      	add	r7, sp, #0
   19372:	6078      	str	r0, [r7, #4]
    #if MICROPY_PY_BUILTINS_STR_OP_MODULO
    return mp_binary_op(MP_BINARY_OP_MODULO, MP_OBJ_NEW_QSTR(MP_QSTR__percent__hash_x), o_in);
   19374:	687a      	ldr	r2, [r7, #4]
   19376:	21b2      	movs	r1, #178	; 0xb2
   19378:	201f      	movs	r0, #31
   1937a:	f7f2 fad3 	bl	b924 <mp_binary_op>
   1937e:	4603      	mov	r3, r0
    #else
    mp_obj_t args[] = { MP_OBJ_NEW_QSTR(MP_QSTR__brace_open__colon__hash_x_brace_close_), o_in };
    return mp_obj_str_format(MP_ARRAY_SIZE(args), args, NULL);
    #endif
}
   19380:	4618      	mov	r0, r3
   19382:	3708      	adds	r7, #8
   19384:	46bd      	mov	sp, r7
   19386:	bd80      	pop	{r7, pc}

00019388 <mp_builtin_iter>:
}
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_input_obj, 0, 1, mp_builtin_input);

#endif

STATIC mp_obj_t mp_builtin_iter(mp_obj_t o_in) {
   19388:	b580      	push	{r7, lr}
   1938a:	b082      	sub	sp, #8
   1938c:	af00      	add	r7, sp, #0
   1938e:	6078      	str	r0, [r7, #4]
    return mp_getiter(o_in, NULL);
   19390:	2100      	movs	r1, #0
   19392:	6878      	ldr	r0, [r7, #4]
   19394:	f7f3 fad6 	bl	c944 <mp_getiter>
   19398:	4603      	mov	r3, r0
}
   1939a:	4618      	mov	r0, r3
   1939c:	3708      	adds	r7, #8
   1939e:	46bd      	mov	sp, r7
   193a0:	bd80      	pop	{r7, pc}
   193a2:	bf00      	nop

000193a4 <mp_builtin_next>:
}
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_min_obj, 1, mp_builtin_min);

#endif

STATIC mp_obj_t mp_builtin_next(mp_obj_t o) {
   193a4:	b580      	push	{r7, lr}
   193a6:	b084      	sub	sp, #16
   193a8:	af00      	add	r7, sp, #0
   193aa:	6078      	str	r0, [r7, #4]
    mp_obj_t ret = mp_iternext_allow_raise(o);
   193ac:	6878      	ldr	r0, [r7, #4]
   193ae:	f7f3 fb1d 	bl	c9ec <mp_iternext_allow_raise>
   193b2:	60f8      	str	r0, [r7, #12]
    if (ret == MP_OBJ_STOP_ITERATION) {
   193b4:	68fb      	ldr	r3, [r7, #12]
   193b6:	2b04      	cmp	r3, #4
   193b8:	d106      	bne.n	193c8 <mp_builtin_next+0x24>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   193ba:	4806      	ldr	r0, [pc, #24]	; (193d4 <mp_builtin_next+0x30>)
   193bc:	f7f6 f8de 	bl	f57c <mp_obj_new_exception>
   193c0:	4603      	mov	r3, r0
   193c2:	4618      	mov	r0, r3
   193c4:	f7e6 ff8c 	bl	2e0 <nlr_jump>
    } else {
        return ret;
   193c8:	68fb      	ldr	r3, [r7, #12]
    }
}
   193ca:	4618      	mov	r0, r3
   193cc:	3710      	adds	r7, #16
   193ce:	46bd      	mov	sp, r7
   193d0:	bd80      	pop	{r7, pc}
   193d2:	bf00      	nop
   193d4:	00022334 	.word	0x00022334

000193d8 <mp_builtin_oct>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_next_obj, mp_builtin_next);

STATIC mp_obj_t mp_builtin_oct(mp_obj_t o_in) {
   193d8:	b580      	push	{r7, lr}
   193da:	b082      	sub	sp, #8
   193dc:	af00      	add	r7, sp, #0
   193de:	6078      	str	r0, [r7, #4]
    #if MICROPY_PY_BUILTINS_STR_OP_MODULO
    return mp_binary_op(MP_BINARY_OP_MODULO, MP_OBJ_NEW_QSTR(MP_QSTR__percent__hash_o), o_in);
   193e0:	687a      	ldr	r2, [r7, #4]
   193e2:	21ae      	movs	r1, #174	; 0xae
   193e4:	201f      	movs	r0, #31
   193e6:	f7f2 fa9d 	bl	b924 <mp_binary_op>
   193ea:	4603      	mov	r3, r0
    #else
    mp_obj_t args[] = { MP_OBJ_NEW_QSTR(MP_QSTR__brace_open__colon__hash_o_brace_close_), o_in };
    return mp_obj_str_format(MP_ARRAY_SIZE(args), args, NULL);
    #endif
}
   193ec:	4618      	mov	r0, r3
   193ee:	3708      	adds	r7, #8
   193f0:	46bd      	mov	sp, r7
   193f2:	bd80      	pop	{r7, pc}

000193f4 <mp_builtin_ord>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_oct_obj, mp_builtin_oct);

STATIC mp_obj_t mp_builtin_ord(mp_obj_t o_in) {
   193f4:	b580      	push	{r7, lr}
   193f6:	b084      	sub	sp, #16
   193f8:	af00      	add	r7, sp, #0
   193fa:	6078      	str	r0, [r7, #4]
    size_t len;
    const byte *str = (const byte*)mp_obj_str_get_data(o_in, &len);
   193fc:	f107 0308 	add.w	r3, r7, #8
   19400:	4619      	mov	r1, r3
   19402:	6878      	ldr	r0, [r7, #4]
   19404:	f7fc f9f4 	bl	157f0 <mp_obj_str_get_data>
   19408:	60f8      	str	r0, [r7, #12]
        }
    } else
    #endif
    {
        // a bytes object, or a str without unicode support (don't sign extend the char)
        if (len == 1) {
   1940a:	68bb      	ldr	r3, [r7, #8]
   1940c:	2b01      	cmp	r3, #1
   1940e:	d105      	bne.n	1941c <mp_builtin_ord+0x28>
            return MP_OBJ_NEW_SMALL_INT(str[0]);
   19410:	68fb      	ldr	r3, [r7, #12]
   19412:	781b      	ldrb	r3, [r3, #0]
   19414:	005b      	lsls	r3, r3, #1
   19416:	f043 0301 	orr.w	r3, r3, #1
   1941a:	e002      	b.n	19422 <mp_builtin_ord+0x2e>
        }
    }

    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("ord expects a character");
   1941c:	4803      	ldr	r0, [pc, #12]	; (1942c <mp_builtin_ord+0x38>)
   1941e:	f7f3 fdcb 	bl	cfb8 <mp_raise_TypeError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "ord() expected a character, but string of length %d found", (int)len));
    }
}
   19422:	4618      	mov	r0, r3
   19424:	3710      	adds	r7, #16
   19426:	46bd      	mov	sp, r7
   19428:	bd80      	pop	{r7, pc}
   1942a:	bf00      	nop
   1942c:	00024690 	.word	0x00024690

00019430 <mp_builtin_pow>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_ord_obj, mp_builtin_ord);

STATIC mp_obj_t mp_builtin_pow(size_t n_args, const mp_obj_t *args) {
   19430:	b580      	push	{r7, lr}
   19432:	b082      	sub	sp, #8
   19434:	af00      	add	r7, sp, #0
   19436:	6078      	str	r0, [r7, #4]
   19438:	6039      	str	r1, [r7, #0]
    switch (n_args) {
   1943a:	687b      	ldr	r3, [r7, #4]
   1943c:	2b02      	cmp	r3, #2
   1943e:	d10a      	bne.n	19456 <mp_builtin_pow+0x26>
        case 2: return mp_binary_op(MP_BINARY_OP_POWER, args[0], args[1]);
   19440:	683b      	ldr	r3, [r7, #0]
   19442:	6819      	ldr	r1, [r3, #0]
   19444:	683b      	ldr	r3, [r7, #0]
   19446:	3304      	adds	r3, #4
   19448:	681b      	ldr	r3, [r3, #0]
   1944a:	461a      	mov	r2, r3
   1944c:	2020      	movs	r0, #32
   1944e:	f7f2 fa69 	bl	b924 <mp_binary_op>
   19452:	4603      	mov	r3, r0
   19454:	e003      	b.n	1945e <mp_builtin_pow+0x2e>
        default:
#if !MICROPY_PY_BUILTINS_POW3
            mp_raise_msg(&mp_type_NotImplementedError, "3-arg pow() not supported");
   19456:	4904      	ldr	r1, [pc, #16]	; (19468 <mp_builtin_pow+0x38>)
   19458:	4804      	ldr	r0, [pc, #16]	; (1946c <mp_builtin_pow+0x3c>)
   1945a:	f7f3 fd8b 	bl	cf74 <mp_raise_msg>
            return mp_binary_op(MP_BINARY_OP_MODULO, mp_binary_op(MP_BINARY_OP_POWER, args[0], args[1]), args[2]);
#else
            return mp_obj_int_pow3(args[0], args[1], args[2]);
#endif
    }
}
   1945e:	4618      	mov	r0, r3
   19460:	3708      	adds	r7, #8
   19462:	46bd      	mov	sp, r7
   19464:	bd80      	pop	{r7, pc}
   19466:	bf00      	nop
   19468:	000246b0 	.word	0x000246b0
   1946c:	000226b8 	.word	0x000226b8

00019470 <mp_builtin_print>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_pow_obj, 2, 3, mp_builtin_pow);

STATIC mp_obj_t mp_builtin_print(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   19470:	b580      	push	{r7, lr}
   19472:	b08e      	sub	sp, #56	; 0x38
   19474:	af02      	add	r7, sp, #8
   19476:	60f8      	str	r0, [r7, #12]
   19478:	60b9      	str	r1, [r7, #8]
   1947a:	607a      	str	r2, [r7, #4]
    // parse args (a union is used to reduce the amount of C stack that is needed)
    union {
        mp_arg_val_t args[MP_ARRAY_SIZE(allowed_args)];
        size_t len[2];
    } u;
    mp_arg_parse_all(0, NULL, kw_args, MP_ARRAY_SIZE(allowed_args), allowed_args, u.args);
   1947c:	f107 0314 	add.w	r3, r7, #20
   19480:	9301      	str	r3, [sp, #4]
   19482:	4b25      	ldr	r3, [pc, #148]	; (19518 <mp_builtin_print+0xa8>)
   19484:	9300      	str	r3, [sp, #0]
   19486:	2302      	movs	r3, #2
   19488:	687a      	ldr	r2, [r7, #4]
   1948a:	2100      	movs	r1, #0
   1948c:	2000      	movs	r0, #0
   1948e:	f7f3 fe39 	bl	d104 <mp_arg_parse_all>
    mp_get_stream_raise(u.args[ARG_file].u_obj, MP_STREAM_OP_WRITE);
    mp_print_t print = {MP_OBJ_TO_PTR(u.args[ARG_file].u_obj), mp_stream_write_adaptor};
    #endif

    // extract the objects first because we are going to use the other part of the union
    mp_obj_t sep = u.args[ARG_sep].u_obj;
   19492:	697b      	ldr	r3, [r7, #20]
   19494:	62bb      	str	r3, [r7, #40]	; 0x28
    mp_obj_t end = u.args[ARG_end].u_obj;
   19496:	69bb      	ldr	r3, [r7, #24]
   19498:	627b      	str	r3, [r7, #36]	; 0x24
    const char *sep_data = mp_obj_str_get_data(sep, &u.len[0]);
   1949a:	f107 0314 	add.w	r3, r7, #20
   1949e:	4619      	mov	r1, r3
   194a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   194a2:	f7fc f9a5 	bl	157f0 <mp_obj_str_get_data>
   194a6:	6238      	str	r0, [r7, #32]
    const char *end_data = mp_obj_str_get_data(end, &u.len[1]);
   194a8:	f107 0314 	add.w	r3, r7, #20
   194ac:	3304      	adds	r3, #4
   194ae:	4619      	mov	r1, r3
   194b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   194b2:	f7fc f99d 	bl	157f0 <mp_obj_str_get_data>
   194b6:	61f8      	str	r0, [r7, #28]

    for (size_t i = 0; i < n_args; i++) {
   194b8:	2300      	movs	r3, #0
   194ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   194bc:	e019      	b.n	194f2 <mp_builtin_print+0x82>
        if (i > 0) {
   194be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   194c0:	2b00      	cmp	r3, #0
   194c2:	d009      	beq.n	194d8 <mp_builtin_print+0x68>
            #if MICROPY_PY_IO && MICROPY_PY_SYS_STDFILES
            mp_stream_write_adaptor(print.data, sep_data, u.len[0]);
            #else
            mp_print_strn(&mp_plat_print, sep_data, u.len[0], 0, 0, 0);
   194c4:	697a      	ldr	r2, [r7, #20]
   194c6:	2300      	movs	r3, #0
   194c8:	9301      	str	r3, [sp, #4]
   194ca:	2300      	movs	r3, #0
   194cc:	9300      	str	r3, [sp, #0]
   194ce:	2300      	movs	r3, #0
   194d0:	6a39      	ldr	r1, [r7, #32]
   194d2:	4812      	ldr	r0, [pc, #72]	; (1951c <mp_builtin_print+0xac>)
   194d4:	f7e8 fab4 	bl	1a40 <mp_print_strn>
            #endif
        }
        #if MICROPY_PY_IO && MICROPY_PY_SYS_STDFILES
        mp_obj_print_helper(&print, pos_args[i], PRINT_STR);
        #else
        mp_obj_print_helper(&mp_plat_print, pos_args[i], PRINT_STR);
   194d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   194da:	009b      	lsls	r3, r3, #2
   194dc:	68ba      	ldr	r2, [r7, #8]
   194de:	4413      	add	r3, r2
   194e0:	681b      	ldr	r3, [r3, #0]
   194e2:	2200      	movs	r2, #0
   194e4:	4619      	mov	r1, r3
   194e6:	480d      	ldr	r0, [pc, #52]	; (1951c <mp_builtin_print+0xac>)
   194e8:	f7f4 fa06 	bl	d8f8 <mp_obj_print_helper>
    for (size_t i = 0; i < n_args; i++) {
   194ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   194ee:	3301      	adds	r3, #1
   194f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   194f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   194f4:	68fb      	ldr	r3, [r7, #12]
   194f6:	429a      	cmp	r2, r3
   194f8:	d3e1      	bcc.n	194be <mp_builtin_print+0x4e>
        #endif
    }
    #if MICROPY_PY_IO && MICROPY_PY_SYS_STDFILES
    mp_stream_write_adaptor(print.data, end_data, u.len[1]);
    #else
    mp_print_strn(&mp_plat_print, end_data, u.len[1], 0, 0, 0);
   194fa:	69ba      	ldr	r2, [r7, #24]
   194fc:	2300      	movs	r3, #0
   194fe:	9301      	str	r3, [sp, #4]
   19500:	2300      	movs	r3, #0
   19502:	9300      	str	r3, [sp, #0]
   19504:	2300      	movs	r3, #0
   19506:	69f9      	ldr	r1, [r7, #28]
   19508:	4804      	ldr	r0, [pc, #16]	; (1951c <mp_builtin_print+0xac>)
   1950a:	f7e8 fa99 	bl	1a40 <mp_print_strn>
    #endif
    return mp_const_none;
   1950e:	4b04      	ldr	r3, [pc, #16]	; (19520 <mp_builtin_print+0xb0>)
}
   19510:	4618      	mov	r0, r3
   19512:	3730      	adds	r7, #48	; 0x30
   19514:	46bd      	mov	sp, r7
   19516:	bd80      	pop	{r7, pc}
   19518:	00024a18 	.word	0x00024a18
   1951c:	0001f884 	.word	0x0001f884
   19520:	000234d4 	.word	0x000234d4

00019524 <mp_builtin___repl_print__>:
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_print_obj, 0, mp_builtin_print);

STATIC mp_obj_t mp_builtin___repl_print__(mp_obj_t o) {
   19524:	b580      	push	{r7, lr}
   19526:	b082      	sub	sp, #8
   19528:	af00      	add	r7, sp, #0
   1952a:	6078      	str	r0, [r7, #4]
    if (o != mp_const_none) {
   1952c:	687b      	ldr	r3, [r7, #4]
   1952e:	4a08      	ldr	r2, [pc, #32]	; (19550 <mp_builtin___repl_print__+0x2c>)
   19530:	4293      	cmp	r3, r2
   19532:	d008      	beq.n	19546 <mp_builtin___repl_print__+0x22>
        mp_obj_print_helper(MP_PYTHON_PRINTER, o, PRINT_REPR);
   19534:	2201      	movs	r2, #1
   19536:	6879      	ldr	r1, [r7, #4]
   19538:	4806      	ldr	r0, [pc, #24]	; (19554 <mp_builtin___repl_print__+0x30>)
   1953a:	f7f4 f9dd 	bl	d8f8 <mp_obj_print_helper>
        mp_print_str(MP_PYTHON_PRINTER, "\n");
   1953e:	4906      	ldr	r1, [pc, #24]	; (19558 <mp_builtin___repl_print__+0x34>)
   19540:	4804      	ldr	r0, [pc, #16]	; (19554 <mp_builtin___repl_print__+0x30>)
   19542:	f7e8 fa65 	bl	1a10 <mp_print_str>
        // Set "_" special variable
        mp_obj_t dest[2] = {MP_OBJ_SENTINEL, o};
        mp_type_module.attr(MP_OBJ_FROM_PTR(&mp_module_builtins), MP_QSTR__, dest);
        #endif
    }
    return mp_const_none;
   19546:	4b02      	ldr	r3, [pc, #8]	; (19550 <mp_builtin___repl_print__+0x2c>)
}
   19548:	4618      	mov	r0, r3
   1954a:	3708      	adds	r7, #8
   1954c:	46bd      	mov	sp, r7
   1954e:	bd80      	pop	{r7, pc}
   19550:	000234d4 	.word	0x000234d4
   19554:	0001f884 	.word	0x0001f884
   19558:	000246e4 	.word	0x000246e4

0001955c <mp_builtin_repr>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin___repl_print___obj, mp_builtin___repl_print__);

STATIC mp_obj_t mp_builtin_repr(mp_obj_t o_in) {
   1955c:	b580      	push	{r7, lr}
   1955e:	b088      	sub	sp, #32
   19560:	af00      	add	r7, sp, #0
   19562:	6078      	str	r0, [r7, #4]
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
   19564:	f107 0208 	add.w	r2, r7, #8
   19568:	f107 0310 	add.w	r3, r7, #16
   1956c:	2110      	movs	r1, #16
   1956e:	4618      	mov	r0, r3
   19570:	f7e7 ffde 	bl	1530 <vstr_init_print>
    mp_obj_print_helper(&print, o_in, PRINT_REPR);
   19574:	f107 0308 	add.w	r3, r7, #8
   19578:	2201      	movs	r2, #1
   1957a:	6879      	ldr	r1, [r7, #4]
   1957c:	4618      	mov	r0, r3
   1957e:	f7f4 f9bb 	bl	d8f8 <mp_obj_print_helper>
    return mp_obj_new_str_from_vstr(&mp_type_str, &vstr);
   19582:	f107 0310 	add.w	r3, r7, #16
   19586:	4619      	mov	r1, r3
   19588:	4803      	ldr	r0, [pc, #12]	; (19598 <mp_builtin_repr+0x3c>)
   1958a:	f7fb ff6d 	bl	15468 <mp_obj_new_str_from_vstr>
   1958e:	4603      	mov	r3, r0
}
   19590:	4618      	mov	r0, r3
   19592:	3720      	adds	r7, #32
   19594:	46bd      	mov	sp, r7
   19596:	bd80      	pop	{r7, pc}
   19598:	00023b68 	.word	0x00023b68

0001959c <mp_builtin_round>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_repr_obj, mp_builtin_repr);

STATIC mp_obj_t mp_builtin_round(size_t n_args, const mp_obj_t *args) {
   1959c:	b580      	push	{r7, lr}
   1959e:	b084      	sub	sp, #16
   195a0:	af00      	add	r7, sp, #0
   195a2:	6078      	str	r0, [r7, #4]
   195a4:	6039      	str	r1, [r7, #0]
    mp_obj_t o_in = args[0];
   195a6:	683b      	ldr	r3, [r7, #0]
   195a8:	681b      	ldr	r3, [r3, #0]
   195aa:	60fb      	str	r3, [r7, #12]
    if (MP_OBJ_IS_INT(o_in)) {
   195ac:	68f8      	ldr	r0, [r7, #12]
   195ae:	f7ff fcdf 	bl	18f70 <MP_OBJ_IS_SMALL_INT>
   195b2:	4603      	mov	r3, r0
   195b4:	2b00      	cmp	r3, #0
   195b6:	d10a      	bne.n	195ce <mp_builtin_round+0x32>
   195b8:	68f8      	ldr	r0, [r7, #12]
   195ba:	f7ff fceb 	bl	18f94 <MP_OBJ_IS_OBJ>
   195be:	4603      	mov	r3, r0
   195c0:	2b00      	cmp	r3, #0
   195c2:	d00c      	beq.n	195de <mp_builtin_round+0x42>
   195c4:	68fb      	ldr	r3, [r7, #12]
   195c6:	681b      	ldr	r3, [r3, #0]
   195c8:	4a0b      	ldr	r2, [pc, #44]	; (195f8 <mp_builtin_round+0x5c>)
   195ca:	4293      	cmp	r3, r2
   195cc:	d107      	bne.n	195de <mp_builtin_round+0x42>
        if (n_args <= 1) {
   195ce:	687b      	ldr	r3, [r7, #4]
   195d0:	2b01      	cmp	r3, #1
   195d2:	d801      	bhi.n	195d8 <mp_builtin_round+0x3c>
            return o_in;
   195d4:	68fb      	ldr	r3, [r7, #12]
   195d6:	e00a      	b.n	195ee <mp_builtin_round+0x52>
        }

        #if !MICROPY_PY_BUILTINS_ROUND_INT
        mp_raise_NotImplementedError(NULL);
   195d8:	2000      	movs	r0, #0
   195da:	f7f3 fd09 	bl	cff0 <mp_raise_NotImplementedError>
        return mp_obj_new_float(rounded);
    }
    mp_float_t rounded = MICROPY_FLOAT_C_FUN(nearbyint)(val);
    return mp_obj_new_int_from_float(rounded);
#else
    mp_int_t r = mp_obj_get_int(o_in);
   195de:	68f8      	ldr	r0, [r7, #12]
   195e0:	f7f4 fb36 	bl	dc50 <mp_obj_get_int>
   195e4:	60b8      	str	r0, [r7, #8]
    return mp_obj_new_int(r);
   195e6:	68b8      	ldr	r0, [r7, #8]
   195e8:	f7f7 f9fa 	bl	109e0 <mp_obj_new_int>
   195ec:	4603      	mov	r3, r0
#endif
}
   195ee:	4618      	mov	r0, r3
   195f0:	3710      	adds	r7, #16
   195f2:	46bd      	mov	sp, r7
   195f4:	bd80      	pop	{r7, pc}
   195f6:	bf00      	nop
   195f8:	00022f80 	.word	0x00022f80

000195fc <mp_builtin_sum>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_round_obj, 1, 2, mp_builtin_round);

STATIC mp_obj_t mp_builtin_sum(size_t n_args, const mp_obj_t *args) {
   195fc:	b580      	push	{r7, lr}
   195fe:	b08a      	sub	sp, #40	; 0x28
   19600:	af00      	add	r7, sp, #0
   19602:	6078      	str	r0, [r7, #4]
   19604:	6039      	str	r1, [r7, #0]
    mp_obj_t value;
    switch (n_args) {
   19606:	687b      	ldr	r3, [r7, #4]
   19608:	2b01      	cmp	r3, #1
   1960a:	d102      	bne.n	19612 <mp_builtin_sum+0x16>
        case 1: value = MP_OBJ_NEW_SMALL_INT(0); break;
   1960c:	2301      	movs	r3, #1
   1960e:	627b      	str	r3, [r7, #36]	; 0x24
   19610:	e003      	b.n	1961a <mp_builtin_sum+0x1e>
        default: value = args[1]; break;
   19612:	683b      	ldr	r3, [r7, #0]
   19614:	685b      	ldr	r3, [r3, #4]
   19616:	627b      	str	r3, [r7, #36]	; 0x24
   19618:	bf00      	nop
    }
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(args[0], &iter_buf);
   1961a:	683b      	ldr	r3, [r7, #0]
   1961c:	681b      	ldr	r3, [r3, #0]
   1961e:	f107 020c 	add.w	r2, r7, #12
   19622:	4611      	mov	r1, r2
   19624:	4618      	mov	r0, r3
   19626:	f7f3 f98d 	bl	c944 <mp_getiter>
   1962a:	6238      	str	r0, [r7, #32]
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   1962c:	e005      	b.n	1963a <mp_builtin_sum+0x3e>
        value = mp_binary_op(MP_BINARY_OP_ADD, value, item);
   1962e:	69fa      	ldr	r2, [r7, #28]
   19630:	6a79      	ldr	r1, [r7, #36]	; 0x24
   19632:	201a      	movs	r0, #26
   19634:	f7f2 f976 	bl	b924 <mp_binary_op>
   19638:	6278      	str	r0, [r7, #36]	; 0x24
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   1963a:	6a38      	ldr	r0, [r7, #32]
   1963c:	f7f3 fa04 	bl	ca48 <mp_iternext>
   19640:	61f8      	str	r0, [r7, #28]
   19642:	69fb      	ldr	r3, [r7, #28]
   19644:	2b04      	cmp	r3, #4
   19646:	d1f2      	bne.n	1962e <mp_builtin_sum+0x32>
    }
    return value;
   19648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1964a:	4618      	mov	r0, r3
   1964c:	3728      	adds	r7, #40	; 0x28
   1964e:	46bd      	mov	sp, r7
   19650:	bd80      	pop	{r7, pc}
   19652:	bf00      	nop

00019654 <mp_builtin_sorted>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_sum_obj, 1, 2, mp_builtin_sum);

STATIC mp_obj_t mp_builtin_sorted(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   19654:	b590      	push	{r4, r7, lr}
   19656:	b087      	sub	sp, #28
   19658:	af00      	add	r7, sp, #0
   1965a:	60f8      	str	r0, [r7, #12]
   1965c:	60b9      	str	r1, [r7, #8]
   1965e:	607a      	str	r2, [r7, #4]
    if (n_args > 1) {
   19660:	68fb      	ldr	r3, [r7, #12]
   19662:	2b01      	cmp	r3, #1
   19664:	d902      	bls.n	1966c <mp_builtin_sorted+0x18>
        mp_raise_TypeError("must use keyword argument for key function");
   19666:	480c      	ldr	r0, [pc, #48]	; (19698 <mp_builtin_sorted+0x44>)
   19668:	f7f3 fca6 	bl	cfb8 <mp_raise_TypeError>
    }
    mp_obj_t self = mp_type_list.make_new(&mp_type_list, 1, 0, args);
   1966c:	4b0b      	ldr	r3, [pc, #44]	; (1969c <mp_builtin_sorted+0x48>)
   1966e:	68dc      	ldr	r4, [r3, #12]
   19670:	68bb      	ldr	r3, [r7, #8]
   19672:	2200      	movs	r2, #0
   19674:	2101      	movs	r1, #1
   19676:	4809      	ldr	r0, [pc, #36]	; (1969c <mp_builtin_sorted+0x48>)
   19678:	47a0      	blx	r4
   1967a:	4603      	mov	r3, r0
   1967c:	617b      	str	r3, [r7, #20]
    mp_obj_list_sort(1, &self, kwargs);
   1967e:	f107 0314 	add.w	r3, r7, #20
   19682:	687a      	ldr	r2, [r7, #4]
   19684:	4619      	mov	r1, r3
   19686:	2001      	movs	r0, #1
   19688:	f7f7 feec 	bl	11464 <mp_obj_list_sort>

    return self;
   1968c:	697b      	ldr	r3, [r7, #20]
}
   1968e:	4618      	mov	r0, r3
   19690:	371c      	adds	r7, #28
   19692:	46bd      	mov	sp, r7
   19694:	bd90      	pop	{r4, r7, pc}
   19696:	bf00      	nop
   19698:	00024710 	.word	0x00024710
   1969c:	000231ec 	.word	0x000231ec

000196a0 <mp_load_attr_default>:
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_sorted_obj, 1, mp_builtin_sorted);

// See mp_load_attr() if making any changes
static inline mp_obj_t mp_load_attr_default(mp_obj_t base, qstr attr, mp_obj_t defval) {
   196a0:	b580      	push	{r7, lr}
   196a2:	b086      	sub	sp, #24
   196a4:	af00      	add	r7, sp, #0
   196a6:	60f8      	str	r0, [r7, #12]
   196a8:	60b9      	str	r1, [r7, #8]
   196aa:	607a      	str	r2, [r7, #4]
    mp_obj_t dest[2];
    // use load_method, raising or not raising exception
    ((defval == MP_OBJ_NULL) ? mp_load_method : mp_load_method_maybe)(base, attr, dest);
   196ac:	687b      	ldr	r3, [r7, #4]
   196ae:	2b00      	cmp	r3, #0
   196b0:	d101      	bne.n	196b6 <mp_load_attr_default+0x16>
   196b2:	4b0e      	ldr	r3, [pc, #56]	; (196ec <mp_load_attr_default+0x4c>)
   196b4:	e000      	b.n	196b8 <mp_load_attr_default+0x18>
   196b6:	4b0e      	ldr	r3, [pc, #56]	; (196f0 <mp_load_attr_default+0x50>)
   196b8:	f107 0210 	add.w	r2, r7, #16
   196bc:	68b9      	ldr	r1, [r7, #8]
   196be:	68f8      	ldr	r0, [r7, #12]
   196c0:	4798      	blx	r3
    if (dest[0] == MP_OBJ_NULL) {
   196c2:	693b      	ldr	r3, [r7, #16]
   196c4:	2b00      	cmp	r3, #0
   196c6:	d101      	bne.n	196cc <mp_load_attr_default+0x2c>
        return defval;
   196c8:	687b      	ldr	r3, [r7, #4]
   196ca:	e00b      	b.n	196e4 <mp_load_attr_default+0x44>
    } else if (dest[1] == MP_OBJ_NULL) {
   196cc:	697b      	ldr	r3, [r7, #20]
   196ce:	2b00      	cmp	r3, #0
   196d0:	d101      	bne.n	196d6 <mp_load_attr_default+0x36>
        // load_method returned just a normal attribute
        return dest[0];
   196d2:	693b      	ldr	r3, [r7, #16]
   196d4:	e006      	b.n	196e4 <mp_load_attr_default+0x44>
    } else {
        // load_method returned a method, so build a bound method object
        return mp_obj_new_bound_meth(dest[0], dest[1]);
   196d6:	693b      	ldr	r3, [r7, #16]
   196d8:	697a      	ldr	r2, [r7, #20]
   196da:	4611      	mov	r1, r2
   196dc:	4618      	mov	r0, r3
   196de:	f7f4 fe25 	bl	e32c <mp_obj_new_bound_meth>
   196e2:	4603      	mov	r3, r0
    }
}
   196e4:	4618      	mov	r0, r3
   196e6:	3718      	adds	r7, #24
   196e8:	46bd      	mov	sp, r7
   196ea:	bd80      	pop	{r7, pc}
   196ec:	0000c855 	.word	0x0000c855
   196f0:	0000c791 	.word	0x0000c791

000196f4 <mp_builtin_getattr>:

STATIC mp_obj_t mp_builtin_getattr(size_t n_args, const mp_obj_t *args) {
   196f4:	b590      	push	{r4, r7, lr}
   196f6:	b085      	sub	sp, #20
   196f8:	af00      	add	r7, sp, #0
   196fa:	6078      	str	r0, [r7, #4]
   196fc:	6039      	str	r1, [r7, #0]
    mp_obj_t defval = MP_OBJ_NULL;
   196fe:	2300      	movs	r3, #0
   19700:	60fb      	str	r3, [r7, #12]
    if (n_args > 2) {
   19702:	687b      	ldr	r3, [r7, #4]
   19704:	2b02      	cmp	r3, #2
   19706:	d902      	bls.n	1970e <mp_builtin_getattr+0x1a>
        defval = args[2];
   19708:	683b      	ldr	r3, [r7, #0]
   1970a:	689b      	ldr	r3, [r3, #8]
   1970c:	60fb      	str	r3, [r7, #12]
    }
    return mp_load_attr_default(args[0], mp_obj_str_get_qstr(args[1]), defval);
   1970e:	683b      	ldr	r3, [r7, #0]
   19710:	681c      	ldr	r4, [r3, #0]
   19712:	683b      	ldr	r3, [r7, #0]
   19714:	3304      	adds	r3, #4
   19716:	681b      	ldr	r3, [r3, #0]
   19718:	4618      	mov	r0, r3
   1971a:	f7fc f803 	bl	15724 <mp_obj_str_get_qstr>
   1971e:	4603      	mov	r3, r0
   19720:	68fa      	ldr	r2, [r7, #12]
   19722:	4619      	mov	r1, r3
   19724:	4620      	mov	r0, r4
   19726:	f7ff ffbb 	bl	196a0 <mp_load_attr_default>
   1972a:	4603      	mov	r3, r0
}
   1972c:	4618      	mov	r0, r3
   1972e:	3714      	adds	r7, #20
   19730:	46bd      	mov	sp, r7
   19732:	bd90      	pop	{r4, r7, pc}

00019734 <mp_builtin_setattr>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_getattr_obj, 2, 3, mp_builtin_getattr);

STATIC mp_obj_t mp_builtin_setattr(mp_obj_t base, mp_obj_t attr, mp_obj_t value) {
   19734:	b580      	push	{r7, lr}
   19736:	b084      	sub	sp, #16
   19738:	af00      	add	r7, sp, #0
   1973a:	60f8      	str	r0, [r7, #12]
   1973c:	60b9      	str	r1, [r7, #8]
   1973e:	607a      	str	r2, [r7, #4]
    mp_store_attr(base, mp_obj_str_get_qstr(attr), value);
   19740:	68b8      	ldr	r0, [r7, #8]
   19742:	f7fb ffef 	bl	15724 <mp_obj_str_get_qstr>
   19746:	4603      	mov	r3, r0
   19748:	687a      	ldr	r2, [r7, #4]
   1974a:	4619      	mov	r1, r3
   1974c:	68f8      	ldr	r0, [r7, #12]
   1974e:	f7f3 f8d1 	bl	c8f4 <mp_store_attr>
    return mp_const_none;
   19752:	4b02      	ldr	r3, [pc, #8]	; (1975c <mp_builtin_setattr+0x28>)
}
   19754:	4618      	mov	r0, r3
   19756:	3710      	adds	r7, #16
   19758:	46bd      	mov	sp, r7
   1975a:	bd80      	pop	{r7, pc}
   1975c:	000234d4 	.word	0x000234d4

00019760 <mp_builtin_hasattr>:
    return mp_builtin_setattr(base, attr, MP_OBJ_NULL);
}
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_delattr_obj, mp_builtin_delattr);
#endif

STATIC mp_obj_t mp_builtin_hasattr(mp_obj_t object_in, mp_obj_t attr_in) {
   19760:	b580      	push	{r7, lr}
   19762:	b086      	sub	sp, #24
   19764:	af00      	add	r7, sp, #0
   19766:	6078      	str	r0, [r7, #4]
   19768:	6039      	str	r1, [r7, #0]
    qstr attr = mp_obj_str_get_qstr(attr_in);
   1976a:	6838      	ldr	r0, [r7, #0]
   1976c:	f7fb ffda 	bl	15724 <mp_obj_str_get_qstr>
   19770:	6178      	str	r0, [r7, #20]
    mp_obj_t dest[2];
    mp_load_method_protected(object_in, attr, dest, false);
   19772:	f107 020c 	add.w	r2, r7, #12
   19776:	2300      	movs	r3, #0
   19778:	6979      	ldr	r1, [r7, #20]
   1977a:	6878      	ldr	r0, [r7, #4]
   1977c:	f7f3 f886 	bl	c88c <mp_load_method_protected>
    return mp_obj_new_bool(dest[0] != MP_OBJ_NULL);
   19780:	68fb      	ldr	r3, [r7, #12]
   19782:	2b00      	cmp	r3, #0
   19784:	bf14      	ite	ne
   19786:	2301      	movne	r3, #1
   19788:	2300      	moveq	r3, #0
   1978a:	b2db      	uxtb	r3, r3
   1978c:	4618      	mov	r0, r3
   1978e:	f7ff fc35 	bl	18ffc <mp_obj_new_bool>
   19792:	4603      	mov	r3, r0
}
   19794:	4618      	mov	r0, r3
   19796:	3718      	adds	r7, #24
   19798:	46bd      	mov	sp, r7
   1979a:	bd80      	pop	{r7, pc}

0001979c <mp_builtin_globals>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_hasattr_obj, mp_builtin_hasattr);

STATIC mp_obj_t mp_builtin_globals(void) {
   1979c:	b580      	push	{r7, lr}
   1979e:	af00      	add	r7, sp, #0
    return MP_OBJ_FROM_PTR(mp_globals_get());
   197a0:	f7ff fc5c 	bl	1905c <mp_globals_get>
   197a4:	4603      	mov	r3, r0
}
   197a6:	4618      	mov	r0, r3
   197a8:	bd80      	pop	{r7, pc}
   197aa:	bf00      	nop

000197ac <mp_builtin_locals>:
MP_DEFINE_CONST_FUN_OBJ_0(mp_builtin_globals_obj, mp_builtin_globals);

STATIC mp_obj_t mp_builtin_locals(void) {
   197ac:	b580      	push	{r7, lr}
   197ae:	af00      	add	r7, sp, #0
    return MP_OBJ_FROM_PTR(mp_locals_get());
   197b0:	f7ff fc38 	bl	19024 <mp_locals_get>
   197b4:	4603      	mov	r3, r0
}
   197b6:	4618      	mov	r0, r3
   197b8:	bd80      	pop	{r7, pc}
   197ba:	bf00      	nop

000197bc <mp_obj_new_bool>:
   197bc:	b480      	push	{r7}
   197be:	b083      	sub	sp, #12
   197c0:	af00      	add	r7, sp, #0
   197c2:	6078      	str	r0, [r7, #4]
   197c4:	687b      	ldr	r3, [r7, #4]
   197c6:	2b00      	cmp	r3, #0
   197c8:	d001      	beq.n	197ce <mp_obj_new_bool+0x12>
   197ca:	4b04      	ldr	r3, [pc, #16]	; (197dc <mp_obj_new_bool+0x20>)
   197cc:	e000      	b.n	197d0 <mp_obj_new_bool+0x14>
   197ce:	4b04      	ldr	r3, [pc, #16]	; (197e0 <mp_obj_new_bool+0x24>)
   197d0:	4618      	mov	r0, r3
   197d2:	370c      	adds	r7, #12
   197d4:	46bd      	mov	sp, r7
   197d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   197da:	4770      	bx	lr
   197dc:	00021c60 	.word	0x00021c60
   197e0:	00021c58 	.word	0x00021c58

000197e4 <py_gc_collect>:
#include "py/gc.h"

#if MICROPY_PY_GC && MICROPY_ENABLE_GC

// collect(): run a garbage collection
STATIC mp_obj_t py_gc_collect(void) {
   197e4:	b580      	push	{r7, lr}
   197e6:	af00      	add	r7, sp, #0
    gc_collect();
   197e8:	f001 ff82 	bl	1b6f0 <gc_collect>
#if MICROPY_PY_GC_COLLECT_RETVAL
    return MP_OBJ_NEW_SMALL_INT(MP_STATE_MEM(gc_collected));
#else
    return mp_const_none;
   197ec:	4b01      	ldr	r3, [pc, #4]	; (197f4 <py_gc_collect+0x10>)
#endif
}
   197ee:	4618      	mov	r0, r3
   197f0:	bd80      	pop	{r7, pc}
   197f2:	bf00      	nop
   197f4:	000234d4 	.word	0x000234d4

000197f8 <gc_disable>:
MP_DEFINE_CONST_FUN_OBJ_0(gc_collect_obj, py_gc_collect);

// disable(): disable the garbage collector
STATIC mp_obj_t gc_disable(void) {
   197f8:	b480      	push	{r7}
   197fa:	af00      	add	r7, sp, #0
    MP_STATE_MEM(gc_auto_collect_enabled) = 0;
   197fc:	4b04      	ldr	r3, [pc, #16]	; (19810 <gc_disable+0x18>)
   197fe:	2200      	movs	r2, #0
   19800:	f8a3 21ce 	strh.w	r2, [r3, #462]	; 0x1ce
    return mp_const_none;
   19804:	4b03      	ldr	r3, [pc, #12]	; (19814 <gc_disable+0x1c>)
}
   19806:	4618      	mov	r0, r3
   19808:	46bd      	mov	sp, r7
   1980a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1980e:	4770      	bx	lr
   19810:	200012f0 	.word	0x200012f0
   19814:	000234d4 	.word	0x000234d4

00019818 <gc_enable>:
MP_DEFINE_CONST_FUN_OBJ_0(gc_disable_obj, gc_disable);

// enable(): enable the garbage collector
STATIC mp_obj_t gc_enable(void) {
   19818:	b480      	push	{r7}
   1981a:	af00      	add	r7, sp, #0
    MP_STATE_MEM(gc_auto_collect_enabled) = 1;
   1981c:	4b04      	ldr	r3, [pc, #16]	; (19830 <gc_enable+0x18>)
   1981e:	2201      	movs	r2, #1
   19820:	f8a3 21ce 	strh.w	r2, [r3, #462]	; 0x1ce
    return mp_const_none;
   19824:	4b03      	ldr	r3, [pc, #12]	; (19834 <gc_enable+0x1c>)
}
   19826:	4618      	mov	r0, r3
   19828:	46bd      	mov	sp, r7
   1982a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1982e:	4770      	bx	lr
   19830:	200012f0 	.word	0x200012f0
   19834:	000234d4 	.word	0x000234d4

00019838 <gc_isenabled>:
MP_DEFINE_CONST_FUN_OBJ_0(gc_enable_obj, gc_enable);

STATIC mp_obj_t gc_isenabled(void) {
   19838:	b580      	push	{r7, lr}
   1983a:	af00      	add	r7, sp, #0
    return mp_obj_new_bool(MP_STATE_MEM(gc_auto_collect_enabled));
   1983c:	4b04      	ldr	r3, [pc, #16]	; (19850 <gc_isenabled+0x18>)
   1983e:	f8b3 31ce 	ldrh.w	r3, [r3, #462]	; 0x1ce
   19842:	4618      	mov	r0, r3
   19844:	f7ff ffba 	bl	197bc <mp_obj_new_bool>
   19848:	4603      	mov	r3, r0
}
   1984a:	4618      	mov	r0, r3
   1984c:	bd80      	pop	{r7, pc}
   1984e:	bf00      	nop
   19850:	200012f0 	.word	0x200012f0

00019854 <gc_mem_free>:
MP_DEFINE_CONST_FUN_OBJ_0(gc_isenabled_obj, gc_isenabled);

// mem_free(): return the number of bytes of available heap RAM
STATIC mp_obj_t gc_mem_free(void) {
   19854:	b580      	push	{r7, lr}
   19856:	b088      	sub	sp, #32
   19858:	af00      	add	r7, sp, #0
    gc_info_t info;
    gc_info(&info);
   1985a:	1d3b      	adds	r3, r7, #4
   1985c:	4618      	mov	r0, r3
   1985e:	f7e7 f82d 	bl	8bc <gc_info>
    return MP_OBJ_NEW_SMALL_INT(info.free);
   19862:	68fb      	ldr	r3, [r7, #12]
   19864:	005b      	lsls	r3, r3, #1
   19866:	f043 0301 	orr.w	r3, r3, #1
}
   1986a:	4618      	mov	r0, r3
   1986c:	3720      	adds	r7, #32
   1986e:	46bd      	mov	sp, r7
   19870:	bd80      	pop	{r7, pc}
   19872:	bf00      	nop

00019874 <gc_mem_alloc>:
MP_DEFINE_CONST_FUN_OBJ_0(gc_mem_free_obj, gc_mem_free);

// mem_alloc(): return the number of bytes of heap RAM that are allocated
STATIC mp_obj_t gc_mem_alloc(void) {
   19874:	b580      	push	{r7, lr}
   19876:	b088      	sub	sp, #32
   19878:	af00      	add	r7, sp, #0
    gc_info_t info;
    gc_info(&info);
   1987a:	1d3b      	adds	r3, r7, #4
   1987c:	4618      	mov	r0, r3
   1987e:	f7e7 f81d 	bl	8bc <gc_info>
    return MP_OBJ_NEW_SMALL_INT(info.used);
   19882:	68bb      	ldr	r3, [r7, #8]
   19884:	005b      	lsls	r3, r3, #1
   19886:	f043 0301 	orr.w	r3, r3, #1
}
   1988a:	4618      	mov	r0, r3
   1988c:	3720      	adds	r7, #32
   1988e:	46bd      	mov	sp, r7
   19890:	bd80      	pop	{r7, pc}
   19892:	bf00      	nop

00019894 <gc_threshold>:
MP_DEFINE_CONST_FUN_OBJ_0(gc_mem_alloc_obj, gc_mem_alloc);

#if MICROPY_GC_ALLOC_THRESHOLD
STATIC mp_obj_t gc_threshold(size_t n_args, const mp_obj_t *args) {
   19894:	b580      	push	{r7, lr}
   19896:	b084      	sub	sp, #16
   19898:	af00      	add	r7, sp, #0
   1989a:	6078      	str	r0, [r7, #4]
   1989c:	6039      	str	r1, [r7, #0]
    if (n_args == 0) {
   1989e:	687b      	ldr	r3, [r7, #4]
   198a0:	2b00      	cmp	r3, #0
   198a2:	d111      	bne.n	198c8 <gc_threshold+0x34>
        if (MP_STATE_MEM(gc_alloc_threshold) == (size_t)-1) {
   198a4:	4b15      	ldr	r3, [pc, #84]	; (198fc <gc_threshold+0x68>)
   198a6:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
   198aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   198ae:	d102      	bne.n	198b6 <gc_threshold+0x22>
            return MP_OBJ_NEW_SMALL_INT(-1);
   198b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   198b4:	e01d      	b.n	198f2 <gc_threshold+0x5e>
        }
        return mp_obj_new_int(MP_STATE_MEM(gc_alloc_threshold) * MICROPY_BYTES_PER_GC_BLOCK);
   198b6:	4b11      	ldr	r3, [pc, #68]	; (198fc <gc_threshold+0x68>)
   198b8:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
   198bc:	011b      	lsls	r3, r3, #4
   198be:	4618      	mov	r0, r3
   198c0:	f7f7 f88e 	bl	109e0 <mp_obj_new_int>
   198c4:	4603      	mov	r3, r0
   198c6:	e014      	b.n	198f2 <gc_threshold+0x5e>
    }
    mp_int_t val = mp_obj_get_int(args[0]);
   198c8:	683b      	ldr	r3, [r7, #0]
   198ca:	681b      	ldr	r3, [r3, #0]
   198cc:	4618      	mov	r0, r3
   198ce:	f7f4 f9bf 	bl	dc50 <mp_obj_get_int>
   198d2:	60f8      	str	r0, [r7, #12]
    if (val < 0) {
   198d4:	68fb      	ldr	r3, [r7, #12]
   198d6:	2b00      	cmp	r3, #0
   198d8:	da05      	bge.n	198e6 <gc_threshold+0x52>
        MP_STATE_MEM(gc_alloc_threshold) = (size_t)-1;
   198da:	4b08      	ldr	r3, [pc, #32]	; (198fc <gc_threshold+0x68>)
   198dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   198e0:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
   198e4:	e004      	b.n	198f0 <gc_threshold+0x5c>
    } else {
        MP_STATE_MEM(gc_alloc_threshold) = val / MICROPY_BYTES_PER_GC_BLOCK;
   198e6:	68fb      	ldr	r3, [r7, #12]
   198e8:	091b      	lsrs	r3, r3, #4
   198ea:	4a04      	ldr	r2, [pc, #16]	; (198fc <gc_threshold+0x68>)
   198ec:	f8c2 31d4 	str.w	r3, [r2, #468]	; 0x1d4
    }
    return mp_const_none;
   198f0:	4b03      	ldr	r3, [pc, #12]	; (19900 <gc_threshold+0x6c>)
}
   198f2:	4618      	mov	r0, r3
   198f4:	3710      	adds	r7, #16
   198f6:	46bd      	mov	sp, r7
   198f8:	bd80      	pop	{r7, pc}
   198fa:	bf00      	nop
   198fc:	200012f0 	.word	0x200012f0
   19900:	000234d4 	.word	0x000234d4

00019904 <mp_micropython_opt_level>:

// Various builtins specific to MicroPython runtime,
// living in micropython module

#if MICROPY_ENABLE_COMPILER
STATIC mp_obj_t mp_micropython_opt_level(size_t n_args, const mp_obj_t *args) {
   19904:	b580      	push	{r7, lr}
   19906:	b082      	sub	sp, #8
   19908:	af00      	add	r7, sp, #0
   1990a:	6078      	str	r0, [r7, #4]
   1990c:	6039      	str	r1, [r7, #0]
    if (n_args == 0) {
   1990e:	687b      	ldr	r3, [r7, #4]
   19910:	2b00      	cmp	r3, #0
   19912:	d106      	bne.n	19922 <mp_micropython_opt_level+0x1e>
        return MP_OBJ_NEW_SMALL_INT(MP_STATE_VM(mp_optimise_value));
   19914:	4b0a      	ldr	r3, [pc, #40]	; (19940 <mp_micropython_opt_level+0x3c>)
   19916:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   1991a:	005b      	lsls	r3, r3, #1
   1991c:	f043 0301 	orr.w	r3, r3, #1
   19920:	e00a      	b.n	19938 <mp_micropython_opt_level+0x34>
    } else {
        MP_STATE_VM(mp_optimise_value) = mp_obj_get_int(args[0]);
   19922:	683b      	ldr	r3, [r7, #0]
   19924:	681b      	ldr	r3, [r3, #0]
   19926:	4618      	mov	r0, r3
   19928:	f7f4 f992 	bl	dc50 <mp_obj_get_int>
   1992c:	4603      	mov	r3, r0
   1992e:	461a      	mov	r2, r3
   19930:	4b03      	ldr	r3, [pc, #12]	; (19940 <mp_micropython_opt_level+0x3c>)
   19932:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        return mp_const_none;
   19936:	4b03      	ldr	r3, [pc, #12]	; (19944 <mp_micropython_opt_level+0x40>)
    }
}
   19938:	4618      	mov	r0, r3
   1993a:	3708      	adds	r7, #8
   1993c:	46bd      	mov	sp, r7
   1993e:	bd80      	pop	{r7, pc}
   19940:	200012f0 	.word	0x200012f0
   19944:	000234d4 	.word	0x000234d4

00019948 <mp_micropython_heap_lock>:
}
STATIC MP_DEFINE_CONST_FUN_OBJ_0(mp_micropython_pystack_use_obj, mp_micropython_pystack_use);
#endif

#if MICROPY_ENABLE_GC
STATIC mp_obj_t mp_micropython_heap_lock(void) {
   19948:	b580      	push	{r7, lr}
   1994a:	af00      	add	r7, sp, #0
    gc_lock();
   1994c:	f7e6 fe6c 	bl	628 <gc_lock>
    return mp_const_none;
   19950:	4b01      	ldr	r3, [pc, #4]	; (19958 <mp_micropython_heap_lock+0x10>)
}
   19952:	4618      	mov	r0, r3
   19954:	bd80      	pop	{r7, pc}
   19956:	bf00      	nop
   19958:	000234d4 	.word	0x000234d4

0001995c <mp_micropython_heap_unlock>:
STATIC MP_DEFINE_CONST_FUN_OBJ_0(mp_micropython_heap_lock_obj, mp_micropython_heap_lock);

STATIC mp_obj_t mp_micropython_heap_unlock(void) {
   1995c:	b580      	push	{r7, lr}
   1995e:	af00      	add	r7, sp, #0
    gc_unlock();
   19960:	f7e6 fe6c 	bl	63c <gc_unlock>
    return mp_const_none;
   19964:	4b01      	ldr	r3, [pc, #4]	; (1996c <mp_micropython_heap_unlock+0x10>)
}
   19966:	4618      	mov	r0, r3
   19968:	bd80      	pop	{r7, pc}
   1996a:	bf00      	nop
   1996c:	000234d4 	.word	0x000234d4

00019970 <mp_execute_bytecode>:
// sp points to bottom of stack which grows up
// returns:
//  MP_VM_RETURN_NORMAL, sp valid, return value in *sp
//  MP_VM_RETURN_YIELD, ip, sp valid, yielded value in *sp
//  MP_VM_RETURN_EXCEPTION, exception in fastn[0]
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   19970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif
    // Pointers which are constant for particular invocation of mp_execute_bytecode()
    mp_obj_t * /*const*/ fastn;
    mp_exc_stack_t * /*const*/ exc_stack;
    {
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   19974:	6803      	ldr	r3, [r0, #0]
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   19976:	b093      	sub	sp, #76	; 0x4c
   19978:	4680      	mov	r8, r0
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   1997a:	6898      	ldr	r0, [r3, #8]
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   1997c:	9101      	str	r1, [sp, #4]
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   1997e:	f000 ffbf 	bl	1a900 <mp_decode_uint_value>
        fastn = &code_state->state[n_state - 1];
        exc_stack = (mp_exc_stack_t*)(code_state->state + n_state);
    }

    // variables that are visible to the exception handler (declared volatile)
    volatile bool currently_in_except_block = MP_TAGPTR_TAG0(code_state->exc_sp); // 0 or 1, to detect nested exceptions
   19982:	f8d8 300c 	ldr.w	r3, [r8, #12]
   19986:	f003 0201 	and.w	r2, r3, #1
    mp_exc_stack_t *volatile exc_sp = MP_TAGPTR_PTR(code_state->exc_sp); // stack grows up, exc_sp points to top of stack
   1998a:	f023 0303 	bic.w	r3, r3, #3
        fastn = &code_state->state[n_state - 1];
   1998e:	eb08 0980 	add.w	r9, r8, r0, lsl #2
        exc_stack = (mp_exc_stack_t*)(code_state->state + n_state);
   19992:	f108 0714 	add.w	r7, r8, #20
    volatile bool currently_in_except_block = MP_TAGPTR_TAG0(code_state->exc_sp); // 0 or 1, to detect nested exceptions
   19996:	f88d 200f 	strb.w	r2, [sp, #15]
    mp_exc_stack_t *volatile exc_sp = MP_TAGPTR_PTR(code_state->exc_sp); // stack grows up, exc_sp points to top of stack
   1999a:	9304      	str	r3, [sp, #16]
        fastn = &code_state->state[n_state - 1];
   1999c:	1e43      	subs	r3, r0, #1
   1999e:	f109 0910 	add.w	r9, r9, #16
        exc_stack = (mp_exc_stack_t*)(code_state->state + n_state);
   199a2:	eb07 0780 	add.w	r7, r7, r0, lsl #2
        fastn = &code_state->state[n_state - 1];
   199a6:	9300      	str	r3, [sp, #0]

    // outer exception handling loop
    for (;;) {
        nlr_buf_t nlr;
outer_dispatch_loop:
        if (nlr_push(&nlr) == 0) {
   199a8:	a806      	add	r0, sp, #24
   199aa:	f7e6 fc87 	bl	2bc <nlr_push>
   199ae:	2800      	cmp	r0, #0
   199b0:	f040 809d 	bne.w	19aee <mp_execute_bytecode+0x17e>
            // If we have exception to inject, now that we finish setting up
            // execution context, raise it. This works as if RAISE_VARARGS
            // bytecode was executed.
            // Injecting exc into yield from generator is a special case,
            // handled by MP_BC_YIELD_FROM itself
            if (inject_exc != MP_OBJ_NULL && *ip != MP_BC_YIELD_FROM) {
   199b4:	9b01      	ldr	r3, [sp, #4]
            const byte *ip = code_state->ip;
   199b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
            mp_obj_t *sp = code_state->sp;
   199ba:	f8d8 6008 	ldr.w	r6, [r8, #8]
            if (inject_exc != MP_OBJ_NULL && *ip != MP_BC_YIELD_FROM) {
   199be:	2b00      	cmp	r3, #0
   199c0:	f000 80aa 	beq.w	19b18 <mp_execute_bytecode+0x1a8>
   199c4:	782b      	ldrb	r3, [r5, #0]
   199c6:	2b5e      	cmp	r3, #94	; 0x5e
   199c8:	f000 80a6 	beq.w	19b18 <mp_execute_bytecode+0x1a8>
                mp_obj_t exc = inject_exc;
   199cc:	9b01      	ldr	r3, [sp, #4]
                inject_exc = MP_OBJ_NULL;
   199ce:	9001      	str	r0, [sp, #4]
                exc = mp_make_raise_obj(exc);
   199d0:	4618      	mov	r0, r3
                        sp--;
                        if (EXC_MATCH(ret_value, MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
                            PUSH(mp_obj_exception_get_value(ret_value));
                            // If we injected GeneratorExit downstream, then even
                            // if it was swallowed, we re-raise GeneratorExit
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   199d2:	f7f3 f959 	bl	cc88 <mp_make_raise_obj>
   199d6:	4604      	mov	r4, r0
   199d8:	f7e6 fc5e 	bl	298 <nlr_pop>
   199dc:	9407      	str	r4, [sp, #28]
   199de:	4620      	mov	r0, r4
            #if SELECTIVE_EXC_IP
            // with selective ip, we store the ip 1 byte past the opcode, so move ptr back
            code_state->ip -= 1;
            #endif

            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   199e0:	6800      	ldr	r0, [r0, #0]
   199e2:	49d2      	ldr	r1, [pc, #840]	; (19d2c <mp_execute_bytecode+0x3bc>)
   199e4:	f7fd fd90 	bl	17508 <mp_obj_is_subclass_fast>
   199e8:	b148      	cbz	r0, 199fe <mp_execute_bytecode+0x8e>
                if (code_state->ip) {
   199ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
   199ee:	b133      	cbz	r3, 199fe <mp_execute_bytecode+0x8e>
                    // check if it's a StopIteration within a for block
                    if (*code_state->ip == MP_BC_FOR_ITER) {
   199f0:	781a      	ldrb	r2, [r3, #0]
   199f2:	2a43      	cmp	r2, #67	; 0x43
   199f4:	f000 8610 	beq.w	1a618 <mp_execute_bytecode+0xca8>
                        const byte *ip = code_state->ip + 1;
                        DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
                        code_state->ip = ip + ulab; // jump to after for-block
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
                        goto outer_dispatch_loop; // continue with dispatch loop
                    } else if (*code_state->ip == MP_BC_YIELD_FROM) {
   199f8:	2a5e      	cmp	r2, #94	; 0x5e
   199fa:	f000 8694 	beq.w	1a726 <mp_execute_bytecode+0xdb6>
unwind_loop:
#endif
            // set file and line number that the exception occurred at
            // TODO: don't set traceback for exceptions re-raised by END_FINALLY.
            // But consider how to handle nested exceptions.
            if (nlr.ret_val != &mp_const_GeneratorExit_obj) {
   199fe:	4bcc      	ldr	r3, [pc, #816]	; (19d30 <mp_execute_bytecode+0x3c0>)
   19a00:	9a07      	ldr	r2, [sp, #28]
   19a02:	429a      	cmp	r2, r3
   19a04:	d053      	beq.n	19aae <mp_execute_bytecode+0x13e>
                const byte *ip = code_state->fun_bc->bytecode;
   19a06:	f8d8 3000 	ldr.w	r3, [r8]
                ip = mp_decode_uint_skip(ip); // skip n_state
   19a0a:	6898      	ldr	r0, [r3, #8]
   19a0c:	f000 ff86 	bl	1a91c <mp_decode_uint_skip>
                ip = mp_decode_uint_skip(ip); // skip n_exc_stack
   19a10:	f000 ff84 	bl	1a91c <mp_decode_uint_skip>
                ip++; // skip scope_params
                ip++; // skip n_pos_args
                ip++; // skip n_kwonly_args
                ip++; // skip n_def_pos_args
                size_t bc = code_state->ip - ip;
   19a14:	f8d8 3004 	ldr.w	r3, [r8, #4]
                ip++; // skip n_def_pos_args
   19a18:	1d05      	adds	r5, r0, #4
                size_t code_info_size = mp_decode_uint_value(ip);
   19a1a:	4628      	mov	r0, r5
                size_t bc = code_state->ip - ip;
   19a1c:	1b5c      	subs	r4, r3, r5
                size_t code_info_size = mp_decode_uint_value(ip);
   19a1e:	f000 ff6f 	bl	1a900 <mp_decode_uint_value>
   19a22:	4606      	mov	r6, r0
                ip = mp_decode_uint_skip(ip); // skip code_info_size
   19a24:	4628      	mov	r0, r5
   19a26:	f000 ff79 	bl	1a91c <mp_decode_uint_skip>
   19a2a:	4605      	mov	r5, r0
                #if MICROPY_PERSISTENT_CODE
                qstr block_name = ip[0] | (ip[1] << 8);
                qstr source_file = ip[2] | (ip[3] << 8);
                ip += 4;
                #else
                qstr block_name = mp_decode_uint_value(ip);
   19a2c:	f000 ff68 	bl	1a900 <mp_decode_uint_value>
   19a30:	4683      	mov	fp, r0
                ip = mp_decode_uint_skip(ip);
   19a32:	4628      	mov	r0, r5
   19a34:	f000 ff72 	bl	1a91c <mp_decode_uint_skip>
   19a38:	4605      	mov	r5, r0
                qstr source_file = mp_decode_uint_value(ip);
   19a3a:	f000 ff61 	bl	1a900 <mp_decode_uint_value>
   19a3e:	4682      	mov	sl, r0
                ip = mp_decode_uint_skip(ip);
   19a40:	4628      	mov	r0, r5
   19a42:	f000 ff6b 	bl	1a91c <mp_decode_uint_skip>
                bc -= code_info_size;
   19a46:	1ba3      	subs	r3, r4, r6
                #endif
                size_t source_line = 1;
                size_t c;
                while ((c = *ip)) {
   19a48:	7804      	ldrb	r4, [r0, #0]
   19a4a:	2201      	movs	r2, #1
   19a4c:	b964      	cbnz	r4, 19a68 <mp_execute_bytecode+0xf8>
   19a4e:	e019      	b.n	19a84 <mp_execute_bytecode+0x114>
                    size_t b, l;
                    if ((c & 0x80) == 0) {
                        // 0b0LLBBBBB encoding
                        b = c & 0x1f;
   19a50:	f004 061f 	and.w	r6, r4, #31
                        // 0b1LLLBBBB 0bLLLLLLLL encoding (l's LSB in second byte)
                        b = c & 0xf;
                        l = ((c << 4) & 0x700) | ip[1];
                        ip += 2;
                    }
                    if (bc >= b) {
   19a54:	429e      	cmp	r6, r3
                        ip += 1;
   19a56:	f100 0001 	add.w	r0, r0, #1
                        l = c >> 5;
   19a5a:	ea4f 1154 	mov.w	r1, r4, lsr #5
                    if (bc >= b) {
   19a5e:	d811      	bhi.n	19a84 <mp_execute_bytecode+0x114>
                while ((c = *ip)) {
   19a60:	7804      	ldrb	r4, [r0, #0]
                        bc -= b;
   19a62:	1b9b      	subs	r3, r3, r6
                        source_line += l;
   19a64:	440a      	add	r2, r1
                while ((c = *ip)) {
   19a66:	b16c      	cbz	r4, 19a84 <mp_execute_bytecode+0x114>
                    if ((c & 0x80) == 0) {
   19a68:	0621      	lsls	r1, r4, #24
   19a6a:	d5f1      	bpl.n	19a50 <mp_execute_bytecode+0xe0>
                        l = ((c << 4) & 0x700) | ip[1];
   19a6c:	7845      	ldrb	r5, [r0, #1]
   19a6e:	0121      	lsls	r1, r4, #4
                        b = c & 0xf;
   19a70:	f004 060f 	and.w	r6, r4, #15
                        l = ((c << 4) & 0x700) | ip[1];
   19a74:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
                    if (bc >= b) {
   19a78:	429e      	cmp	r6, r3
                        l = ((c << 4) & 0x700) | ip[1];
   19a7a:	ea41 0105 	orr.w	r1, r1, r5
                        ip += 2;
   19a7e:	f100 0002 	add.w	r0, r0, #2
                    if (bc >= b) {
   19a82:	d9ed      	bls.n	19a60 <mp_execute_bytecode+0xf0>
                    } else {
                        // found source line corresponding to bytecode offset
                        break;
                    }
                }
                mp_obj_exception_add_traceback(MP_OBJ_FROM_PTR(nlr.ret_val), source_file, source_line, block_name);
   19a84:	465b      	mov	r3, fp
   19a86:	4651      	mov	r1, sl
   19a88:	9807      	ldr	r0, [sp, #28]
   19a8a:	f7f5 ff37 	bl	f8fc <mp_obj_exception_add_traceback>
            }

            while (currently_in_except_block) {
   19a8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   19a92:	b183      	cbz	r3, 19ab6 <mp_execute_bytecode+0x146>
                // nested exception

                assert(exc_sp >= exc_stack);
   19a94:	9b04      	ldr	r3, [sp, #16]
   19a96:	429f      	cmp	r7, r3
   19a98:	f200 8684 	bhi.w	1a7a4 <mp_execute_bytecode+0xe34>

                // TODO make a proper message for nested exception
                // at the moment we are just raising the very last exception (the one that caused the nested exception)

                // move up to previous exception handler
                POP_EXC_BLOCK();
   19a9c:	9b04      	ldr	r3, [sp, #16]
   19a9e:	685b      	ldr	r3, [r3, #4]
   19aa0:	f003 0301 	and.w	r3, r3, #1
   19aa4:	f88d 300f 	strb.w	r3, [sp, #15]
   19aa8:	9b04      	ldr	r3, [sp, #16]
   19aaa:	3b0c      	subs	r3, #12
   19aac:	9304      	str	r3, [sp, #16]
            while (currently_in_except_block) {
   19aae:	f89d 300f 	ldrb.w	r3, [sp, #15]
   19ab2:	2b00      	cmp	r3, #0
   19ab4:	d1ee      	bne.n	19a94 <mp_execute_bytecode+0x124>
            }

            if (exc_sp >= exc_stack) {
   19ab6:	9b04      	ldr	r3, [sp, #16]
   19ab8:	429f      	cmp	r7, r3
   19aba:	f200 8655 	bhi.w	1a768 <mp_execute_bytecode+0xdf8>
                // set flag to indicate that we are now handling an exception
                currently_in_except_block = 1;
   19abe:	2301      	movs	r3, #1
   19ac0:	f88d 300f 	strb.w	r3, [sp, #15]

                // catch exception and pass to byte code
                code_state->ip = exc_sp->handler;
   19ac4:	9a04      	ldr	r2, [sp, #16]
                mp_obj_t *sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   19ac6:	9b04      	ldr	r3, [sp, #16]
                // save this exception in the stack so it can be used in a reraise, if needed
                exc_sp->prev_exc = nlr.ret_val;
   19ac8:	9904      	ldr	r1, [sp, #16]
                mp_obj_t *sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   19aca:	685b      	ldr	r3, [r3, #4]
                code_state->ip = exc_sp->handler;
   19acc:	6810      	ldr	r0, [r2, #0]
                exc_sp->prev_exc = nlr.ret_val;
   19ace:	9a07      	ldr	r2, [sp, #28]
                code_state->ip = exc_sp->handler;
   19ad0:	f8c8 0004 	str.w	r0, [r8, #4]
                // push exception object so it can be handled by bytecode
                PUSH(MP_OBJ_FROM_PTR(nlr.ret_val));
   19ad4:	f023 0303 	bic.w	r3, r3, #3
                exc_sp->prev_exc = nlr.ret_val;
   19ad8:	608a      	str	r2, [r1, #8]
                PUSH(MP_OBJ_FROM_PTR(nlr.ret_val));
   19ada:	f843 2f04 	str.w	r2, [r3, #4]!
        if (nlr_push(&nlr) == 0) {
   19ade:	a806      	add	r0, sp, #24
                code_state->sp = sp;
   19ae0:	f8c8 3008 	str.w	r3, [r8, #8]
        if (nlr_push(&nlr) == 0) {
   19ae4:	f7e6 fbea 	bl	2bc <nlr_push>
   19ae8:	2800      	cmp	r0, #0
   19aea:	f43f af63 	beq.w	199b4 <mp_execute_bytecode+0x44>
   19aee:	9807      	ldr	r0, [sp, #28]
   19af0:	e776      	b.n	199e0 <mp_execute_bytecode+0x70>
                    assert(exc_sp >= exc_stack);
   19af2:	9b04      	ldr	r3, [sp, #16]
   19af4:	429f      	cmp	r7, r3
   19af6:	f200 86c6 	bhi.w	1a886 <mp_execute_bytecode+0xf16>
                    assert(currently_in_except_block);
   19afa:	f89d 300f 	ldrb.w	r3, [sp, #15]
   19afe:	2b00      	cmp	r3, #0
   19b00:	f000 86ac 	beq.w	1a85c <mp_execute_bytecode+0xeec>
                    POP_EXC_BLOCK();
   19b04:	9b04      	ldr	r3, [sp, #16]
   19b06:	685b      	ldr	r3, [r3, #4]
   19b08:	f003 0301 	and.w	r3, r3, #1
   19b0c:	f88d 300f 	strb.w	r3, [sp, #15]
   19b10:	9b04      	ldr	r3, [sp, #16]
   19b12:	3b0c      	subs	r3, #12
                switch (*ip++) {
   19b14:	4625      	mov	r5, r4
                    POP_EXC_BLOCK();
   19b16:	9304      	str	r3, [sp, #16]
                MARK_EXC_IP_GLOBAL();
   19b18:	f8c8 5004 	str.w	r5, [r8, #4]
                switch (*ip++) {
   19b1c:	7828      	ldrb	r0, [r5, #0]
   19b1e:	f1a0 0310 	sub.w	r3, r0, #16
   19b22:	1c6c      	adds	r4, r5, #1
   19b24:	2b5a      	cmp	r3, #90	; 0x5a
   19b26:	f200 8540 	bhi.w	1a5aa <mp_execute_bytecode+0xc3a>
   19b2a:	a201      	add	r2, pc, #4	; (adr r2, 19b30 <mp_execute_bytecode+0x1c0>)
   19b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19b30:	0001a179 	.word	0x0001a179
   19b34:	0001a16f 	.word	0x0001a16f
   19b38:	0001a165 	.word	0x0001a165
   19b3c:	0001a5ab 	.word	0x0001a5ab
   19b40:	0001a141 	.word	0x0001a141
   19b44:	0001a5ab 	.word	0x0001a5ab
   19b48:	0001a121 	.word	0x0001a121
   19b4c:	0001a0ff 	.word	0x0001a0ff
   19b50:	0001a0f5 	.word	0x0001a0f5
   19b54:	0001a0d7 	.word	0x0001a0d7
   19b58:	0001a0ab 	.word	0x0001a0ab
   19b5c:	0001a08b 	.word	0x0001a08b
   19b60:	0001a06b 	.word	0x0001a06b
   19b64:	0001a04d 	.word	0x0001a04d
   19b68:	0001a02d 	.word	0x0001a02d
   19b6c:	0001a00d 	.word	0x0001a00d
   19b70:	0001a35d 	.word	0x0001a35d
   19b74:	0001a343 	.word	0x0001a343
   19b78:	0001a31f 	.word	0x0001a31f
   19b7c:	0001a2f7 	.word	0x0001a2f7
   19b80:	0001a2d9 	.word	0x0001a2d9
   19b84:	0001a2bb 	.word	0x0001a2bb
   19b88:	0001a299 	.word	0x0001a299
   19b8c:	0001a285 	.word	0x0001a285
   19b90:	0001a25b 	.word	0x0001a25b
   19b94:	0001a229 	.word	0x0001a229
   19b98:	0001a20f 	.word	0x0001a20f
   19b9c:	0001a1f5 	.word	0x0001a1f5
   19ba0:	0001a5ab 	.word	0x0001a5ab
   19ba4:	0001a5ab 	.word	0x0001a5ab
   19ba8:	0001a5ab 	.word	0x0001a5ab
   19bac:	0001a5ab 	.word	0x0001a5ab
   19bb0:	0001a1eb 	.word	0x0001a1eb
   19bb4:	0001a1db 	.word	0x0001a1db
   19bb8:	00019ce9 	.word	0x00019ce9
   19bbc:	00019da5 	.word	0x00019da5
   19bc0:	0001a50d 	.word	0x0001a50d
   19bc4:	0001a4e1 	.word	0x0001a4e1
   19bc8:	0001a4c9 	.word	0x0001a4c9
   19bcc:	0001a4b1 	.word	0x0001a4b1
   19bd0:	0001a499 	.word	0x0001a499
   19bd4:	0001a479 	.word	0x0001a479
   19bd8:	0001a5ab 	.word	0x0001a5ab
   19bdc:	0001a5ab 	.word	0x0001a5ab
   19be0:	0001a5ab 	.word	0x0001a5ab
   19be4:	0001a417 	.word	0x0001a417
   19be8:	0001a3dd 	.word	0x0001a3dd
   19bec:	0001a55d 	.word	0x0001a55d
   19bf0:	0001a55d 	.word	0x0001a55d
   19bf4:	00019cdf 	.word	0x00019cdf
   19bf8:	0001a54d 	.word	0x0001a54d
   19bfc:	0001a523 	.word	0x0001a523
   19c00:	0001a595 	.word	0x0001a595
   19c04:	00019af3 	.word	0x00019af3
   19c08:	0001a38d 	.word	0x0001a38d
   19c0c:	0001a36d 	.word	0x0001a36d
   19c10:	0001a5ab 	.word	0x0001a5ab
   19c14:	0001a5ab 	.word	0x0001a5ab
   19c18:	0001a5ab 	.word	0x0001a5ab
   19c1c:	0001a5ab 	.word	0x0001a5ab
   19c20:	0001a5ab 	.word	0x0001a5ab
   19c24:	0001a5ab 	.word	0x0001a5ab
   19c28:	0001a5ab 	.word	0x0001a5ab
   19c2c:	0001a5ab 	.word	0x0001a5ab
   19c30:	00019d7f 	.word	0x00019d7f
   19c34:	00019d59 	.word	0x00019d59
   19c38:	0001a5ab 	.word	0x0001a5ab
   19c3c:	00019d39 	.word	0x00019d39
   19c40:	00019d15 	.word	0x00019d15
   19c44:	0001a5ab 	.word	0x0001a5ab
   19c48:	0001a5ab 	.word	0x0001a5ab
   19c4c:	0001a1ad 	.word	0x0001a1ad
   19c50:	0001a5ab 	.word	0x0001a5ab
   19c54:	0001a183 	.word	0x0001a183
   19c58:	00019ef3 	.word	0x00019ef3
   19c5c:	00019cbf 	.word	0x00019cbf
   19c60:	00019db5 	.word	0x00019db5
   19c64:	00019cf5 	.word	0x00019cf5
   19c68:	00019e05 	.word	0x00019e05
   19c6c:	0001a5ab 	.word	0x0001a5ab
   19c70:	00019deb 	.word	0x00019deb
   19c74:	00019ed5 	.word	0x00019ed5
   19c78:	00019eb7 	.word	0x00019eb7
   19c7c:	00019e97 	.word	0x00019e97
   19c80:	00019e65 	.word	0x00019e65
   19c84:	00019fdd 	.word	0x00019fdd
   19c88:	00019fab 	.word	0x00019fab
   19c8c:	00019f7b 	.word	0x00019f7b
   19c90:	00019f53 	.word	0x00019f53
   19c94:	00019f2f 	.word	0x00019f2f
   19c98:	00019f1f 	.word	0x00019f1f
                        if (!currently_in_except_block && MP_TAGPTR_TAG1(exc_sp->val_sp)) {
   19c9c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   19ca0:	b923      	cbnz	r3, 19cac <mp_execute_bytecode+0x33c>
   19ca2:	9b04      	ldr	r3, [sp, #16]
   19ca4:	685b      	ldr	r3, [r3, #4]
   19ca6:	079b      	lsls	r3, r3, #30
   19ca8:	f100 850e 	bmi.w	1a6c8 <mp_execute_bytecode+0xd58>
                        POP_EXC_BLOCK();
   19cac:	9b04      	ldr	r3, [sp, #16]
   19cae:	685b      	ldr	r3, [r3, #4]
   19cb0:	f003 0301 	and.w	r3, r3, #1
   19cb4:	f88d 300f 	strb.w	r3, [sp, #15]
   19cb8:	9b04      	ldr	r3, [sp, #16]
   19cba:	3b0c      	subs	r3, #12
   19cbc:	9304      	str	r3, [sp, #16]
                    while (exc_sp >= exc_stack) {
   19cbe:	9b04      	ldr	r3, [sp, #16]
   19cc0:	429f      	cmp	r7, r3
   19cc2:	d9eb      	bls.n	19c9c <mp_execute_bytecode+0x32c>
                    nlr_pop();
   19cc4:	f7e6 fae8 	bl	298 <nlr_pop>
                    assert(exc_sp == exc_stack - 1);
   19cc8:	9b04      	ldr	r3, [sp, #16]
                    code_state->sp = sp;
   19cca:	f8c8 6008 	str.w	r6, [r8, #8]
                    assert(exc_sp == exc_stack - 1);
   19cce:	3f0c      	subs	r7, #12
   19cd0:	42bb      	cmp	r3, r7
   19cd2:	f040 85ca 	bne.w	1a86a <mp_execute_bytecode+0xefa>
                    return MP_VM_RETURN_NORMAL;
   19cd6:	2000      	movs	r0, #0
                code_state->state[0] = MP_OBJ_FROM_PTR(nlr.ret_val); // put exception here because sp is invalid
                return MP_VM_RETURN_EXCEPTION;
            }
        }
    }
}
   19cd8:	b013      	add	sp, #76	; 0x4c
   19cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    if (TOP() == mp_const_none) {
   19cde:	6830      	ldr	r0, [r6, #0]
   19ce0:	4b14      	ldr	r3, [pc, #80]	; (19d34 <mp_execute_bytecode+0x3c4>)
   19ce2:	4298      	cmp	r0, r3
   19ce4:	f040 846d 	bne.w	1a5c2 <mp_execute_bytecode+0xc52>
                        sp--;
   19ce8:	3e04      	subs	r6, #4
                switch (*ip++) {
   19cea:	4625      	mov	r5, r4
                    DISPATCH();
   19cec:	e714      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                        PUSH(ret_value);
   19cee:	9b05      	ldr	r3, [sp, #20]
   19cf0:	6033      	str	r3, [r6, #0]
                        goto yield;
   19cf2:	462c      	mov	r4, r5
                    nlr_pop();
   19cf4:	f7e6 fad0 	bl	298 <nlr_pop>
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   19cf8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   19cfc:	9a04      	ldr	r2, [sp, #16]
                    code_state->ip = ip;
   19cfe:	f8c8 4004 	str.w	r4, [r8, #4]
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   19d02:	4313      	orrs	r3, r2
                    code_state->sp = sp;
   19d04:	f8c8 6008 	str.w	r6, [r8, #8]
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   19d08:	f8c8 300c 	str.w	r3, [r8, #12]
                    return MP_VM_RETURN_YIELD;
   19d0c:	2001      	movs	r0, #1
}
   19d0e:	b013      	add	sp, #76	; 0x4c
   19d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    sp -= 2;
   19d14:	f1a6 0308 	sub.w	r3, r6, #8
                    mp_obj_dict_store(sp[0], sp[2], sp[1]);
   19d18:	f856 2c04 	ldr.w	r2, [r6, #-4]
   19d1c:	6831      	ldr	r1, [r6, #0]
   19d1e:	f856 0c08 	ldr.w	r0, [r6, #-8]
                switch (*ip++) {
   19d22:	4625      	mov	r5, r4
                    sp -= 2;
   19d24:	461e      	mov	r6, r3
                    mp_obj_dict_store(sp[0], sp[2], sp[1]);
   19d26:	f7f5 faa7 	bl	f278 <mp_obj_dict_store>
                    DISPATCH();
   19d2a:	e6f5      	b.n	19b18 <mp_execute_bytecode+0x1a8>
   19d2c:	00022334 	.word	0x00022334
   19d30:	000221f0 	.word	0x000221f0
   19d34:	000234d4 	.word	0x000234d4
                switch (*ip++) {
   19d38:	2000      	movs	r0, #0
                    DECODE_UINT;
   19d3a:	f814 3b01 	ldrb.w	r3, [r4], #1
   19d3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19d42:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   19d46:	061a      	lsls	r2, r3, #24
   19d48:	d4f7      	bmi.n	19d3a <mp_execute_bytecode+0x3ca>
                    PUSH(mp_obj_new_dict(unum));
   19d4a:	f7f5 fa73 	bl	f234 <mp_obj_new_dict>
   19d4e:	1d33      	adds	r3, r6, #4
   19d50:	6070      	str	r0, [r6, #4]
                    DECODE_UINT;
   19d52:	4625      	mov	r5, r4
                    PUSH(mp_obj_new_dict(unum));
   19d54:	461e      	mov	r6, r3
                    DISPATCH();
   19d56:	e6df      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   19d58:	2000      	movs	r0, #0
                    DECODE_UINT;
   19d5a:	f814 3b01 	ldrb.w	r3, [r4], #1
   19d5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19d62:	0619      	lsls	r1, r3, #24
   19d64:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   19d68:	d4f7      	bmi.n	19d5a <mp_execute_bytecode+0x3ea>
                    sp -= unum - 1;
   19d6a:	0083      	lsls	r3, r0, #2
   19d6c:	f1c3 0304 	rsb	r3, r3, #4
   19d70:	441e      	add	r6, r3
                    SET_TOP(mp_obj_new_list(unum, sp));
   19d72:	4631      	mov	r1, r6
   19d74:	f7f7 fdfa 	bl	1196c <mp_obj_new_list>
                    DECODE_UINT;
   19d78:	4625      	mov	r5, r4
                    SET_TOP(mp_obj_new_list(unum, sp));
   19d7a:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   19d7c:	e6cc      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   19d7e:	2000      	movs	r0, #0
                    DECODE_UINT;
   19d80:	f814 3b01 	ldrb.w	r3, [r4], #1
   19d84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19d88:	061d      	lsls	r5, r3, #24
   19d8a:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   19d8e:	d4f7      	bmi.n	19d80 <mp_execute_bytecode+0x410>
                    sp -= unum - 1;
   19d90:	0083      	lsls	r3, r0, #2
   19d92:	f1c3 0304 	rsb	r3, r3, #4
   19d96:	441e      	add	r6, r3
                    SET_TOP(mp_obj_new_tuple(unum, sp));
   19d98:	4631      	mov	r1, r6
   19d9a:	f7fc f8e9 	bl	15f70 <mp_obj_new_tuple>
                    DECODE_UINT;
   19d9e:	4625      	mov	r5, r4
                    SET_TOP(mp_obj_new_tuple(unum, sp));
   19da0:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   19da2:	e6b9      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                    mp_obj_t top = sp[0];
   19da4:	6833      	ldr	r3, [r6, #0]
                    sp[0] = sp[-1];
   19da6:	f856 2c04 	ldr.w	r2, [r6, #-4]
   19daa:	6032      	str	r2, [r6, #0]
                switch (*ip++) {
   19dac:	4625      	mov	r5, r4
                    sp[-1] = top;
   19dae:	f846 3c04 	str.w	r3, [r6, #-4]
                    DISPATCH();
   19db2:	e6b1      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                    mp_uint_t unum = *ip;
   19db4:	786b      	ldrb	r3, [r5, #1]
                    if (unum == 2) {
   19db6:	2b02      	cmp	r3, #2
   19db8:	f000 843b 	beq.w	1a632 <mp_execute_bytecode+0xcc2>
                    if (unum == 0) {
   19dbc:	2b00      	cmp	r3, #0
   19dbe:	f040 8439 	bne.w	1a634 <mp_execute_bytecode+0xcc4>
                        for (mp_exc_stack_t *e = exc_sp; e >= exc_stack; e--) {
   19dc2:	9b04      	ldr	r3, [sp, #16]
   19dc4:	429f      	cmp	r7, r3
   19dc6:	d806      	bhi.n	19dd6 <mp_execute_bytecode+0x466>
                            if (e->prev_exc != NULL) {
   19dc8:	6898      	ldr	r0, [r3, #8]
   19dca:	2800      	cmp	r0, #0
   19dcc:	f47f ae01 	bne.w	199d2 <mp_execute_bytecode+0x62>
                        for (mp_exc_stack_t *e = exc_sp; e >= exc_stack; e--) {
   19dd0:	3b0c      	subs	r3, #12
   19dd2:	429f      	cmp	r7, r3
   19dd4:	d9f8      	bls.n	19dc8 <mp_execute_bytecode+0x458>
                            obj = mp_obj_new_exception_msg(&mp_type_RuntimeError, "no active exception to reraise");
   19dd6:	49ce      	ldr	r1, [pc, #824]	; (1a110 <mp_execute_bytecode+0x7a0>)
   19dd8:	48ce      	ldr	r0, [pc, #824]	; (1a114 <mp_execute_bytecode+0x7a4>)
   19dda:	f7f5 fc13 	bl	f604 <mp_obj_new_exception_msg>
   19dde:	4604      	mov	r4, r0
                            RAISE(obj);
   19de0:	f7e6 fa5a 	bl	298 <nlr_pop>
   19de4:	9407      	str	r4, [sp, #28]
   19de6:	4620      	mov	r0, r4
   19de8:	e5fa      	b.n	199e0 <mp_execute_bytecode+0x70>
                    DECODE_PTR;
   19dea:	1ce5      	adds	r5, r4, #3
   19dec:	f025 0503 	bic.w	r5, r5, #3
                    PUSH(mp_make_function_from_raw_code(ptr, MP_OBJ_NULL, MP_OBJ_NULL));
   19df0:	2200      	movs	r2, #0
   19df2:	6828      	ldr	r0, [r5, #0]
   19df4:	4611      	mov	r1, r2
   19df6:	f7f1 fa2b 	bl	b250 <mp_make_function_from_raw_code>
   19dfa:	1d33      	adds	r3, r6, #4
   19dfc:	6070      	str	r0, [r6, #4]
                    DECODE_PTR;
   19dfe:	3504      	adds	r5, #4
                    PUSH(mp_make_function_from_raw_code(ptr, MP_OBJ_NULL, MP_OBJ_NULL));
   19e00:	461e      	mov	r6, r3
                    DISPATCH();
   19e02:	e689      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                    mp_obj_t send_value = POP();
   19e04:	46b2      	mov	sl, r6
                    if (inject_exc != MP_OBJ_NULL) {
   19e06:	9a01      	ldr	r2, [sp, #4]
                    mp_obj_t send_value = POP();
   19e08:	f85a 1904 	ldr.w	r1, [sl], #-4
                    code_state->sp = sp; // Save sp because it's needed if mp_resume raises StopIteration
   19e0c:	f8c8 a008 	str.w	sl, [r8, #8]
                    if (inject_exc != MP_OBJ_NULL) {
   19e10:	2a00      	cmp	r2, #0
   19e12:	f000 8480 	beq.w	1a716 <mp_execute_bytecode+0xda6>
                        t_exc = inject_exc;
   19e16:	f8dd b004 	ldr.w	fp, [sp, #4]
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   19e1a:	f856 0c04 	ldr.w	r0, [r6, #-4]
                        inject_exc = MP_OBJ_NULL;
   19e1e:	f04f 0e00 	mov.w	lr, #0
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   19e22:	465a      	mov	r2, fp
   19e24:	4671      	mov	r1, lr
   19e26:	ab05      	add	r3, sp, #20
                        inject_exc = MP_OBJ_NULL;
   19e28:	f8cd e004 	str.w	lr, [sp, #4]
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   19e2c:	f7f2 fe56 	bl	cadc <mp_resume>
                    if (ret_kind == MP_VM_RETURN_YIELD) {
   19e30:	2801      	cmp	r0, #1
   19e32:	f43f af5c 	beq.w	19cee <mp_execute_bytecode+0x37e>
                    } else if (ret_kind == MP_VM_RETURN_NORMAL) {
   19e36:	2800      	cmp	r0, #0
   19e38:	f040 83ff 	bne.w	1a63a <mp_execute_bytecode+0xcca>
                        if (ret_value == MP_OBJ_STOP_ITERATION) {
   19e3c:	9b05      	ldr	r3, [sp, #20]
                            PUSH(mp_const_none);
   19e3e:	4ab6      	ldr	r2, [pc, #728]	; (1a118 <mp_execute_bytecode+0x7a8>)
   19e40:	2b04      	cmp	r3, #4
   19e42:	bf08      	it	eq
   19e44:	4613      	moveq	r3, r2
   19e46:	f846 3c04 	str.w	r3, [r6, #-4]
                        GENERATOR_EXIT_IF_NEEDED(t_exc);
   19e4a:	f1bb 0f00 	cmp.w	fp, #0
   19e4e:	d006      	beq.n	19e5e <mp_execute_bytecode+0x4ee>
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   19e50:	49b2      	ldr	r1, [pc, #712]	; (1a11c <mp_execute_bytecode+0x7ac>)
   19e52:	4658      	mov	r0, fp
   19e54:	f7f5 fd0c 	bl	f870 <mp_obj_exception_match>
   19e58:	2800      	cmp	r0, #0
   19e5a:	f040 849c 	bne.w	1a796 <mp_execute_bytecode+0xe26>
                    sp += MP_OBJ_ITER_BUF_NSLOTS - 1;
   19e5e:	4656      	mov	r6, sl
                switch (*ip++) {
   19e60:	4625      	mov	r5, r4
   19e62:	e659      	b.n	19b18 <mp_execute_bytecode+0x1a8>
   19e64:	2200      	movs	r2, #0
                    DECODE_UINT;
   19e66:	f814 3b01 	ldrb.w	r3, [r4], #1
   19e6a:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19e6e:	061b      	lsls	r3, r3, #24
   19e70:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19e74:	d4f7      	bmi.n	19e66 <mp_execute_bytecode+0x4f6>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe);
   19e76:	09d3      	lsrs	r3, r2, #7
   19e78:	b2d1      	uxtb	r1, r2
   19e7a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   19e7e:	440b      	add	r3, r1
   19e80:	eba6 0683 	sub.w	r6, r6, r3, lsl #2
                    SET_TOP(mp_call_function_n_kw(*sp, unum & 0xff, (unum >> 8) & 0xff, sp + 1));
   19e84:	f3c2 2207 	ubfx	r2, r2, #8, #8
   19e88:	1d33      	adds	r3, r6, #4
   19e8a:	6830      	ldr	r0, [r6, #0]
   19e8c:	f7f1 ffe2 	bl	be54 <mp_call_function_n_kw>
                    DECODE_UINT;
   19e90:	4625      	mov	r5, r4
                    SET_TOP(mp_call_function_n_kw(*sp, unum & 0xff, (unum >> 8) & 0xff, sp + 1));
   19e92:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   19e94:	e640      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                    DECODE_PTR;
   19e96:	1ce3      	adds	r3, r4, #3
   19e98:	f023 0303 	bic.w	r3, r3, #3
                    size_t n_closed_over = *ip++;
   19e9c:	1d5d      	adds	r5, r3, #5
   19e9e:	7919      	ldrb	r1, [r3, #4]
                    SET_TOP(mp_make_closure_from_raw_code(ptr, 0x100 | n_closed_over, sp));
   19ea0:	6818      	ldr	r0, [r3, #0]
                    sp -= 2 + n_closed_over - 1;
   19ea2:	43cb      	mvns	r3, r1
   19ea4:	eb06 0683 	add.w	r6, r6, r3, lsl #2
                    SET_TOP(mp_make_closure_from_raw_code(ptr, 0x100 | n_closed_over, sp));
   19ea8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   19eac:	4632      	mov	r2, r6
   19eae:	f7f1 fa4b 	bl	b348 <mp_make_closure_from_raw_code>
   19eb2:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   19eb4:	e630      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                    DECODE_PTR;
   19eb6:	1ce3      	adds	r3, r4, #3
   19eb8:	f023 0303 	bic.w	r3, r3, #3
                    size_t n_closed_over = *ip++;
   19ebc:	1d5d      	adds	r5, r3, #5
   19ebe:	7919      	ldrb	r1, [r3, #4]
                    SET_TOP(mp_make_closure_from_raw_code(ptr, n_closed_over, sp));
   19ec0:	6818      	ldr	r0, [r3, #0]
                    sp -= n_closed_over - 1;
   19ec2:	008b      	lsls	r3, r1, #2
   19ec4:	f1c3 0304 	rsb	r3, r3, #4
   19ec8:	441e      	add	r6, r3
                    SET_TOP(mp_make_closure_from_raw_code(ptr, n_closed_over, sp));
   19eca:	4632      	mov	r2, r6
   19ecc:	f7f1 fa3c 	bl	b348 <mp_make_closure_from_raw_code>
   19ed0:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   19ed2:	e621      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                    DECODE_PTR;
   19ed4:	1ce5      	adds	r5, r4, #3
   19ed6:	f025 0503 	bic.w	r5, r5, #3
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   19eda:	6832      	ldr	r2, [r6, #0]
   19edc:	6828      	ldr	r0, [r5, #0]
   19ede:	f856 1c04 	ldr.w	r1, [r6, #-4]
   19ee2:	f7f1 f9b5 	bl	b250 <mp_make_function_from_raw_code>
                    mp_obj_t def_dict = POP();
   19ee6:	1f33      	subs	r3, r6, #4
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   19ee8:	f846 0c04 	str.w	r0, [r6, #-4]
                    DECODE_PTR;
   19eec:	3504      	adds	r5, #4
                    mp_obj_t def_dict = POP();
   19eee:	461e      	mov	r6, r3
                    DISPATCH();
   19ef0:	e612      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   19ef2:	2500      	movs	r5, #0
                    DECODE_UINT;
   19ef4:	f814 3b01 	ldrb.w	r3, [r4], #1
   19ef8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19efc:	eb02 15c5 	add.w	r5, r2, r5, lsl #7
   19f00:	061a      	lsls	r2, r3, #24
   19f02:	d4f7      	bmi.n	19ef4 <mp_execute_bytecode+0x584>
                    mp_unpack_ex(sp[0], unum, sp);
   19f04:	4632      	mov	r2, r6
   19f06:	4629      	mov	r1, r5
   19f08:	6830      	ldr	r0, [r6, #0]
   19f0a:	f7f2 fabf 	bl	c48c <mp_unpack_ex>
                    sp += (unum & 0xff) + ((unum >> 8) & 0xff);
   19f0e:	f3c5 2307 	ubfx	r3, r5, #8, #8
   19f12:	fa53 f385 	uxtab	r3, r3, r5
   19f16:	eb06 0683 	add.w	r6, r6, r3, lsl #2
                    DECODE_UINT;
   19f1a:	4625      	mov	r5, r4
                    DISPATCH();
   19f1c:	e5fc      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                    mp_import_all(POP());
   19f1e:	6830      	ldr	r0, [r6, #0]
   19f20:	f1a6 0a04 	sub.w	sl, r6, #4
                switch (*ip++) {
   19f24:	4625      	mov	r5, r4
                    mp_import_all(POP());
   19f26:	f7f2 ff77 	bl	ce18 <mp_import_all>
   19f2a:	4656      	mov	r6, sl
                    DISPATCH();
   19f2c:	e5f4      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   19f2e:	2100      	movs	r1, #0
                    DECODE_QSTR;
   19f30:	f814 3b01 	ldrb.w	r3, [r4], #1
   19f34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19f38:	0618      	lsls	r0, r3, #24
   19f3a:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   19f3e:	d4f7      	bmi.n	19f30 <mp_execute_bytecode+0x5c0>
                    mp_obj_t obj = mp_import_from(TOP(), qst);
   19f40:	46b2      	mov	sl, r6
                    DECODE_QSTR;
   19f42:	4625      	mov	r5, r4
                    mp_obj_t obj = mp_import_from(TOP(), qst);
   19f44:	f85a 0b04 	ldr.w	r0, [sl], #4
   19f48:	f7f2 fee6 	bl	cd18 <mp_import_from>
                    PUSH(obj);
   19f4c:	6070      	str	r0, [r6, #4]
   19f4e:	4656      	mov	r6, sl
                    DISPATCH();
   19f50:	e5e2      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   19f52:	2000      	movs	r0, #0
                    DECODE_QSTR;
   19f54:	f814 3b01 	ldrb.w	r3, [r4], #1
   19f58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19f5c:	061d      	lsls	r5, r3, #24
   19f5e:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   19f62:	d4f7      	bmi.n	19f54 <mp_execute_bytecode+0x5e4>
                    SET_TOP(mp_import_name(qst, obj, TOP()));
   19f64:	f856 2c04 	ldr.w	r2, [r6, #-4]
   19f68:	6831      	ldr	r1, [r6, #0]
   19f6a:	f7f2 feb5 	bl	ccd8 <mp_import_name>
                    mp_obj_t obj = POP();
   19f6e:	1f33      	subs	r3, r6, #4
                    SET_TOP(mp_import_name(qst, obj, TOP()));
   19f70:	f846 0c04 	str.w	r0, [r6, #-4]
                    DECODE_QSTR;
   19f74:	4625      	mov	r5, r4
                    mp_obj_t obj = POP();
   19f76:	461e      	mov	r6, r3
                    DISPATCH();
   19f78:	e5ce      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   19f7a:	2100      	movs	r1, #0
                    DECODE_UINT;
   19f7c:	f814 3b01 	ldrb.w	r3, [r4], #1
   19f80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19f84:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   19f88:	061a      	lsls	r2, r3, #24
   19f8a:	d4f7      	bmi.n	19f7c <mp_execute_bytecode+0x60c>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 3;
   19f8c:	09cb      	lsrs	r3, r1, #7
   19f8e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   19f92:	fa53 f381 	uxtab	r3, r3, r1
   19f96:	eba6 0683 	sub.w	r6, r6, r3, lsl #2
   19f9a:	3e0c      	subs	r6, #12
                    SET_TOP(mp_call_method_n_kw_var(true, unum, sp));
   19f9c:	4632      	mov	r2, r6
   19f9e:	2001      	movs	r0, #1
   19fa0:	f7f2 f9cc 	bl	c33c <mp_call_method_n_kw_var>
                    DECODE_UINT;
   19fa4:	4625      	mov	r5, r4
                    SET_TOP(mp_call_method_n_kw_var(true, unum, sp));
   19fa6:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   19fa8:	e5b6      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   19faa:	2100      	movs	r1, #0
                    DECODE_UINT;
   19fac:	f814 3b01 	ldrb.w	r3, [r4], #1
   19fb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19fb4:	0618      	lsls	r0, r3, #24
   19fb6:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   19fba:	d4f7      	bmi.n	19fac <mp_execute_bytecode+0x63c>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 1;
   19fbc:	b2c8      	uxtb	r0, r1
   19fbe:	09ca      	lsrs	r2, r1, #7
   19fc0:	1c43      	adds	r3, r0, #1
   19fc2:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
   19fc6:	4413      	add	r3, r2
   19fc8:	eba6 0683 	sub.w	r6, r6, r3, lsl #2
                    SET_TOP(mp_call_method_n_kw(unum & 0xff, (unum >> 8) & 0xff, sp));
   19fcc:	f3c1 2107 	ubfx	r1, r1, #8, #8
   19fd0:	4632      	mov	r2, r6
   19fd2:	f7f1 ff61 	bl	be98 <mp_call_method_n_kw>
                    DECODE_UINT;
   19fd6:	4625      	mov	r5, r4
                    SET_TOP(mp_call_method_n_kw(unum & 0xff, (unum >> 8) & 0xff, sp));
   19fd8:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   19fda:	e59d      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   19fdc:	2100      	movs	r1, #0
                    DECODE_UINT;
   19fde:	f814 3b01 	ldrb.w	r3, [r4], #1
   19fe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19fe6:	061d      	lsls	r5, r3, #24
   19fe8:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   19fec:	d4f7      	bmi.n	19fde <mp_execute_bytecode+0x66e>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 2;
   19fee:	09cb      	lsrs	r3, r1, #7
   19ff0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   19ff4:	fa53 f381 	uxtab	r3, r3, r1
   19ff8:	eba6 0683 	sub.w	r6, r6, r3, lsl #2
   19ffc:	3e08      	subs	r6, #8
                    SET_TOP(mp_call_method_n_kw_var(false, unum, sp));
   19ffe:	4632      	mov	r2, r6
   1a000:	2000      	movs	r0, #0
   1a002:	f7f2 f99b 	bl	c33c <mp_call_method_n_kw_var>
                    DECODE_UINT;
   1a006:	4625      	mov	r5, r4
                    SET_TOP(mp_call_method_n_kw_var(false, unum, sp));
   1a008:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   1a00a:	e585      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   1a00c:	2000      	movs	r0, #0
                    DECODE_QSTR;
   1a00e:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a016:	061d      	lsls	r5, r3, #24
   1a018:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1a01c:	d4f7      	bmi.n	1a00e <mp_execute_bytecode+0x69e>
                    mp_load_super_method(qst, sp - 1);
   1a01e:	f1a6 0108 	sub.w	r1, r6, #8
                    DECODE_QSTR;
   1a022:	4625      	mov	r5, r4
                    sp -= 1;
   1a024:	3e04      	subs	r6, #4
                    mp_load_super_method(qst, sp - 1);
   1a026:	f7fd fa55 	bl	174d4 <mp_load_super_method>
                    DISPATCH();
   1a02a:	e575      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   1a02c:	2100      	movs	r1, #0
                    DECODE_QSTR;
   1a02e:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a032:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a036:	061b      	lsls	r3, r3, #24
   1a038:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   1a03c:	d4f7      	bmi.n	1a02e <mp_execute_bytecode+0x6be>
                    mp_load_method(*sp, qst, sp);
   1a03e:	4632      	mov	r2, r6
   1a040:	6830      	ldr	r0, [r6, #0]
                    DECODE_QSTR;
   1a042:	4625      	mov	r5, r4
                    mp_load_method(*sp, qst, sp);
   1a044:	f7f2 fc06 	bl	c854 <mp_load_method>
                    sp += 1;
   1a048:	3604      	adds	r6, #4
                    DISPATCH();
   1a04a:	e565      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   1a04c:	2100      	movs	r1, #0
                    DECODE_QSTR;
   1a04e:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a052:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a056:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   1a05a:	061a      	lsls	r2, r3, #24
   1a05c:	d4f7      	bmi.n	1a04e <mp_execute_bytecode+0x6de>
                    SET_TOP(mp_load_attr(TOP(), qst));
   1a05e:	6830      	ldr	r0, [r6, #0]
   1a060:	f7f2 fb04 	bl	c66c <mp_load_attr>
                    DECODE_QSTR;
   1a064:	4625      	mov	r5, r4
                    SET_TOP(mp_load_attr(TOP(), qst));
   1a066:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   1a068:	e556      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   1a06a:	2000      	movs	r0, #0
                    DECODE_QSTR;
   1a06c:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a070:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a074:	0619      	lsls	r1, r3, #24
   1a076:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1a07a:	d4f7      	bmi.n	1a06c <mp_execute_bytecode+0x6fc>
                    PUSH(mp_load_global(qst));
   1a07c:	f7f1 fad6 	bl	b62c <mp_load_global>
   1a080:	1d33      	adds	r3, r6, #4
   1a082:	6070      	str	r0, [r6, #4]
                    DECODE_QSTR;
   1a084:	4625      	mov	r5, r4
                    PUSH(mp_load_global(qst));
   1a086:	461e      	mov	r6, r3
                    DISPATCH();
   1a088:	e546      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   1a08a:	2000      	movs	r0, #0
                    DECODE_QSTR;
   1a08c:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a090:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a094:	061d      	lsls	r5, r3, #24
   1a096:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1a09a:	d4f7      	bmi.n	1a08c <mp_execute_bytecode+0x71c>
                    PUSH(mp_load_name(qst));
   1a09c:	f7f1 fa9e 	bl	b5dc <mp_load_name>
   1a0a0:	1d33      	adds	r3, r6, #4
   1a0a2:	6070      	str	r0, [r6, #4]
                    DECODE_QSTR;
   1a0a4:	4625      	mov	r5, r4
                    PUSH(mp_load_name(qst));
   1a0a6:	461e      	mov	r6, r3
                    DISPATCH();
   1a0a8:	e536      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   1a0aa:	4625      	mov	r5, r4
   1a0ac:	2200      	movs	r2, #0
                    DECODE_UINT;
   1a0ae:	f815 3b01 	ldrb.w	r3, [r5], #1
   1a0b2:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a0b6:	061b      	lsls	r3, r3, #24
   1a0b8:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a0bc:	d4f7      	bmi.n	1a0ae <mp_execute_bytecode+0x73e>
                    obj_shared = mp_obj_cell_get(fastn[-unum]);
   1a0be:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   1a0c2:	f859 0022 	ldr.w	r0, [r9, r2, lsl #2]
   1a0c6:	f7f4 f94b 	bl	e360 <mp_obj_cell_get>
                    if (obj_shared == MP_OBJ_NULL) {
   1a0ca:	2800      	cmp	r0, #0
   1a0cc:	f000 8366 	beq.w	1a79c <mp_execute_bytecode+0xe2c>
                        PUSH(value); // push the next iteration value
   1a0d0:	6070      	str	r0, [r6, #4]
   1a0d2:	3604      	adds	r6, #4
   1a0d4:	e520      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   1a0d6:	4625      	mov	r5, r4
   1a0d8:	2200      	movs	r2, #0
                    DECODE_UINT;
   1a0da:	f815 3b01 	ldrb.w	r3, [r5], #1
   1a0de:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a0e2:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a0e6:	0619      	lsls	r1, r3, #24
   1a0e8:	d4f7      	bmi.n	1a0da <mp_execute_bytecode+0x76a>
                    obj_shared = fastn[-unum];
   1a0ea:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   1a0ee:	f859 0022 	ldr.w	r0, [r9, r2, lsl #2]
   1a0f2:	e7ea      	b.n	1a0ca <mp_execute_bytecode+0x75a>
                    PUSH(MP_OBJ_NULL);
   1a0f4:	2300      	movs	r3, #0
   1a0f6:	6073      	str	r3, [r6, #4]
                switch (*ip++) {
   1a0f8:	4625      	mov	r5, r4
                    PUSH(MP_OBJ_NULL);
   1a0fa:	3604      	adds	r6, #4
                    DISPATCH();
   1a0fc:	e50c      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                    DECODE_OBJ;
   1a0fe:	3403      	adds	r4, #3
   1a100:	f024 0503 	bic.w	r5, r4, #3
                    PUSH(obj);
   1a104:	3604      	adds	r6, #4
                    DECODE_OBJ;
   1a106:	f855 3b04 	ldr.w	r3, [r5], #4
                    PUSH(obj);
   1a10a:	6033      	str	r3, [r6, #0]
                    DISPATCH();
   1a10c:	e504      	b.n	19b18 <mp_execute_bytecode+0x1a8>
   1a10e:	bf00      	nop
   1a110:	00024c14 	.word	0x00024c14
   1a114:	0002267c 	.word	0x0002267c
   1a118:	000234d4 	.word	0x000234d4
   1a11c:	000222bc 	.word	0x000222bc
                switch (*ip++) {
   1a120:	2200      	movs	r2, #0
                    DECODE_QSTR;
   1a122:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a126:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a12a:	0618      	lsls	r0, r3, #24
   1a12c:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a130:	d4f7      	bmi.n	1a122 <mp_execute_bytecode+0x7b2>
                    PUSH(MP_OBJ_NEW_QSTR(qst));
   1a132:	0093      	lsls	r3, r2, #2
   1a134:	f043 0302 	orr.w	r3, r3, #2
   1a138:	6073      	str	r3, [r6, #4]
                    DECODE_QSTR;
   1a13a:	4625      	mov	r5, r4
                    PUSH(MP_OBJ_NEW_QSTR(qst));
   1a13c:	3604      	adds	r6, #4
                    DISPATCH();
   1a13e:	e4eb      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                    if ((ip[0] & 0x40) != 0) {
   1a140:	786a      	ldrb	r2, [r5, #1]
   1a142:	f342 1280 	sbfx	r2, r2, #6, #1
                        num = (num << 7) | (*ip & 0x7f);
   1a146:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a14a:	f003 017f 	and.w	r1, r3, #127	; 0x7f
                    } while ((*ip++ & 0x80) != 0);
   1a14e:	061d      	lsls	r5, r3, #24
                        num = (num << 7) | (*ip & 0x7f);
   1a150:	ea41 12c2 	orr.w	r2, r1, r2, lsl #7
                    } while ((*ip++ & 0x80) != 0);
   1a154:	d4f7      	bmi.n	1a146 <mp_execute_bytecode+0x7d6>
                    PUSH(MP_OBJ_NEW_SMALL_INT(num));
   1a156:	0053      	lsls	r3, r2, #1
   1a158:	f043 0301 	orr.w	r3, r3, #1
   1a15c:	6073      	str	r3, [r6, #4]
                    } while ((*ip++ & 0x80) != 0);
   1a15e:	4625      	mov	r5, r4
                    PUSH(MP_OBJ_NEW_SMALL_INT(num));
   1a160:	3604      	adds	r6, #4
                    DISPATCH();
   1a162:	e4d9      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                    PUSH(mp_const_true);
   1a164:	4bc9      	ldr	r3, [pc, #804]	; (1a48c <mp_execute_bytecode+0xb1c>)
   1a166:	6073      	str	r3, [r6, #4]
                switch (*ip++) {
   1a168:	4625      	mov	r5, r4
                    PUSH(mp_const_true);
   1a16a:	3604      	adds	r6, #4
                    DISPATCH();
   1a16c:	e4d4      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                    PUSH(mp_const_none);
   1a16e:	4bc8      	ldr	r3, [pc, #800]	; (1a490 <mp_execute_bytecode+0xb20>)
   1a170:	6073      	str	r3, [r6, #4]
                switch (*ip++) {
   1a172:	4625      	mov	r5, r4
                    PUSH(mp_const_none);
   1a174:	3604      	adds	r6, #4
                    DISPATCH();
   1a176:	e4cf      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                    PUSH(mp_const_false);
   1a178:	4bc6      	ldr	r3, [pc, #792]	; (1a494 <mp_execute_bytecode+0xb24>)
   1a17a:	6073      	str	r3, [r6, #4]
                switch (*ip++) {
   1a17c:	4625      	mov	r5, r4
                    PUSH(mp_const_false);
   1a17e:	3604      	adds	r6, #4
                    DISPATCH();
   1a180:	e4ca      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   1a182:	2500      	movs	r5, #0
                    DECODE_UINT;
   1a184:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a188:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a18c:	0619      	lsls	r1, r3, #24
   1a18e:	eb02 15c5 	add.w	r5, r2, r5, lsl #7
   1a192:	d4f7      	bmi.n	1a184 <mp_execute_bytecode+0x814>
                    mp_unpack_sequence(sp[0], unum, sp);
   1a194:	4632      	mov	r2, r6
   1a196:	4629      	mov	r1, r5
   1a198:	6830      	ldr	r0, [r6, #0]
   1a19a:	f7f2 f8f1 	bl	c380 <mp_unpack_sequence>
                    sp += unum - 1;
   1a19e:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
   1a1a2:	3b01      	subs	r3, #1
                    DECODE_UINT;
   1a1a4:	4625      	mov	r5, r4
                    sp += unum - 1;
   1a1a6:	eb06 0683 	add.w	r6, r6, r3, lsl #2
                    DISPATCH();
   1a1aa:	e4b5      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   1a1ac:	2200      	movs	r2, #0
                    DECODE_UINT;
   1a1ae:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a1b2:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a1b6:	061b      	lsls	r3, r3, #24
   1a1b8:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a1bc:	d4f7      	bmi.n	1a1ae <mp_execute_bytecode+0x83e>
                    mp_obj_t obj = sp[-(unum >> 2)];
   1a1be:	0893      	lsrs	r3, r2, #2
   1a1c0:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
                    if ((unum & 3) == 0) {
   1a1c4:	0795      	lsls	r5, r2, #30
                    mp_obj_t obj = sp[-(unum >> 2)];
   1a1c6:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
                    if ((unum & 3) == 0) {
   1a1ca:	f040 8202 	bne.w	1a5d2 <mp_execute_bytecode+0xc62>
                        mp_obj_list_append(obj, sp[0]);
   1a1ce:	f856 1904 	ldr.w	r1, [r6], #-4
                    DECODE_UINT;
   1a1d2:	4625      	mov	r5, r4
                        mp_obj_list_append(obj, sp[0]);
   1a1d4:	f7f6 ff38 	bl	11048 <mp_obj_list_append>
   1a1d8:	e49e      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                    sp[0] = sp[-2];
   1a1da:	6832      	ldr	r2, [r6, #0]
                    sp[-1] = sp[-3];
   1a1dc:	f856 3c04 	ldr.w	r3, [r6, #-4]
                    sp[0] = sp[-2];
   1a1e0:	60b2      	str	r2, [r6, #8]
                    sp[-1] = sp[-3];
   1a1e2:	6073      	str	r3, [r6, #4]
                switch (*ip++) {
   1a1e4:	4625      	mov	r5, r4
                    sp += 2;
   1a1e6:	3608      	adds	r6, #8
                    DISPATCH();
   1a1e8:	e496      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                    PUSH(top);
   1a1ea:	6833      	ldr	r3, [r6, #0]
   1a1ec:	6073      	str	r3, [r6, #4]
                switch (*ip++) {
   1a1ee:	4625      	mov	r5, r4
                    PUSH(top);
   1a1f0:	3604      	adds	r6, #4
                    DISPATCH();
   1a1f2:	e491      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   1a1f4:	2000      	movs	r0, #0
                    DECODE_QSTR;
   1a1f6:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a1fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a1fe:	061d      	lsls	r5, r3, #24
   1a200:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1a204:	d4f7      	bmi.n	1a1f6 <mp_execute_bytecode+0x886>
                    mp_delete_global(qst);
   1a206:	f7f1 fa89 	bl	b71c <mp_delete_global>
                    DECODE_QSTR;
   1a20a:	4625      	mov	r5, r4
                    DISPATCH();
   1a20c:	e484      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   1a20e:	2000      	movs	r0, #0
                    DECODE_QSTR;
   1a210:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a214:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a218:	061b      	lsls	r3, r3, #24
   1a21a:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1a21e:	d4f7      	bmi.n	1a210 <mp_execute_bytecode+0x8a0>
                    mp_delete_name(qst);
   1a220:	f7f1 fa54 	bl	b6cc <mp_delete_name>
                    DECODE_QSTR;
   1a224:	4625      	mov	r5, r4
                    DISPATCH();
   1a226:	e477      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   1a228:	2200      	movs	r2, #0
                    DECODE_UINT;
   1a22a:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a22e:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a232:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a236:	0619      	lsls	r1, r3, #24
   1a238:	d4f7      	bmi.n	1a22a <mp_execute_bytecode+0x8ba>
                    if (mp_obj_cell_get(fastn[-unum]) == MP_OBJ_NULL) {
   1a23a:	ebc2 7582 	rsb	r5, r2, r2, lsl #30
   1a23e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
   1a242:	f7f4 f88d 	bl	e360 <mp_obj_cell_get>
   1a246:	2800      	cmp	r0, #0
   1a248:	f000 82a8 	beq.w	1a79c <mp_execute_bytecode+0xe2c>
                    mp_obj_cell_set(fastn[-unum], MP_OBJ_NULL);
   1a24c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
   1a250:	2100      	movs	r1, #0
                    DECODE_UINT;
   1a252:	4625      	mov	r5, r4
                    mp_obj_cell_set(fastn[-unum], MP_OBJ_NULL);
   1a254:	f7f4 f892 	bl	e37c <mp_obj_cell_set>
                    DISPATCH();
   1a258:	e45e      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   1a25a:	2200      	movs	r2, #0
                    DECODE_UINT;
   1a25c:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a260:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a264:	0618      	lsls	r0, r3, #24
   1a266:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a26a:	d4f7      	bmi.n	1a25c <mp_execute_bytecode+0x8ec>
                    if (fastn[-unum] == MP_OBJ_NULL) {
   1a26c:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   1a270:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
   1a274:	2b00      	cmp	r3, #0
   1a276:	f000 8291 	beq.w	1a79c <mp_execute_bytecode+0xe2c>
                    fastn[-unum] = MP_OBJ_NULL;
   1a27a:	2300      	movs	r3, #0
                    DECODE_UINT;
   1a27c:	4625      	mov	r5, r4
                    fastn[-unum] = MP_OBJ_NULL;
   1a27e:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
                    DISPATCH();
   1a282:	e449      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                    mp_obj_subscr(sp[-1], sp[0], sp[-2]);
   1a284:	f856 2c08 	ldr.w	r2, [r6, #-8]
   1a288:	6831      	ldr	r1, [r6, #0]
   1a28a:	f856 0c04 	ldr.w	r0, [r6, #-4]
                switch (*ip++) {
   1a28e:	4625      	mov	r5, r4
                    mp_obj_subscr(sp[-1], sp[0], sp[-2]);
   1a290:	f7f3 fea8 	bl	dfe4 <mp_obj_subscr>
                    sp -= 3;
   1a294:	3e0c      	subs	r6, #12
                    DISPATCH();
   1a296:	e43f      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   1a298:	2100      	movs	r1, #0
                    DECODE_QSTR;
   1a29a:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a29e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a2a2:	061d      	lsls	r5, r3, #24
   1a2a4:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   1a2a8:	d4f7      	bmi.n	1a29a <mp_execute_bytecode+0x92a>
                    mp_store_attr(sp[0], qst, sp[-1]);
   1a2aa:	f856 2c04 	ldr.w	r2, [r6, #-4]
   1a2ae:	f856 0908 	ldr.w	r0, [r6], #-8
                    DECODE_QSTR;
   1a2b2:	4625      	mov	r5, r4
                    mp_store_attr(sp[0], qst, sp[-1]);
   1a2b4:	f7f2 fb1e 	bl	c8f4 <mp_store_attr>
                    DISPATCH();
   1a2b8:	e42e      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   1a2ba:	2000      	movs	r0, #0
                    DECODE_QSTR;
   1a2bc:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a2c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a2c4:	061b      	lsls	r3, r3, #24
   1a2c6:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1a2ca:	d4f7      	bmi.n	1a2bc <mp_execute_bytecode+0x94c>
                    mp_store_global(qst, POP());
   1a2cc:	6831      	ldr	r1, [r6, #0]
                    DECODE_QSTR;
   1a2ce:	4625      	mov	r5, r4
                    mp_store_global(qst, POP());
   1a2d0:	3e04      	subs	r6, #4
   1a2d2:	f7f1 fa0f 	bl	b6f4 <mp_store_global>
                    DISPATCH();
   1a2d6:	e41f      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   1a2d8:	2000      	movs	r0, #0
                    DECODE_QSTR;
   1a2da:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a2de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a2e2:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1a2e6:	061a      	lsls	r2, r3, #24
   1a2e8:	d4f7      	bmi.n	1a2da <mp_execute_bytecode+0x96a>
                    mp_store_name(qst, POP());
   1a2ea:	6831      	ldr	r1, [r6, #0]
                    DECODE_QSTR;
   1a2ec:	4625      	mov	r5, r4
                    mp_store_name(qst, POP());
   1a2ee:	3e04      	subs	r6, #4
   1a2f0:	f7f1 f9d8 	bl	b6a4 <mp_store_name>
                    DISPATCH();
   1a2f4:	e410      	b.n	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   1a2f6:	2200      	movs	r2, #0
                    DECODE_UINT;
   1a2f8:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a2fc:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a300:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a304:	0619      	lsls	r1, r3, #24
   1a306:	d4f7      	bmi.n	1a2f8 <mp_execute_bytecode+0x988>
                    mp_obj_cell_set(fastn[-unum], POP());
   1a308:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   1a30c:	6831      	ldr	r1, [r6, #0]
   1a30e:	f859 0022 	ldr.w	r0, [r9, r2, lsl #2]
   1a312:	3e04      	subs	r6, #4
                    DECODE_UINT;
   1a314:	4625      	mov	r5, r4
                    mp_obj_cell_set(fastn[-unum], POP());
   1a316:	f7f4 f831 	bl	e37c <mp_obj_cell_set>
                    DISPATCH();
   1a31a:	f7ff bbfd 	b.w	19b18 <mp_execute_bytecode+0x1a8>
                switch (*ip++) {
   1a31e:	2200      	movs	r2, #0
                    DECODE_UINT;
   1a320:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a324:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a328:	0618      	lsls	r0, r3, #24
   1a32a:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a32e:	d4f7      	bmi.n	1a320 <mp_execute_bytecode+0x9b0>
                    fastn[-unum] = POP();
   1a330:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   1a334:	6833      	ldr	r3, [r6, #0]
   1a336:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
                    DECODE_UINT;
   1a33a:	4625      	mov	r5, r4
                    fastn[-unum] = POP();
   1a33c:	3e04      	subs	r6, #4
                    DISPATCH();
   1a33e:	f7ff bbeb 	b.w	19b18 <mp_execute_bytecode+0x1a8>
                    SET_TOP(mp_obj_subscr(TOP(), index, MP_OBJ_SENTINEL));
   1a342:	6831      	ldr	r1, [r6, #0]
   1a344:	f856 0c04 	ldr.w	r0, [r6, #-4]
   1a348:	2208      	movs	r2, #8
   1a34a:	f7f3 fe4b 	bl	dfe4 <mp_obj_subscr>
                    mp_obj_t index = POP();
   1a34e:	1f33      	subs	r3, r6, #4
                    SET_TOP(mp_obj_subscr(TOP(), index, MP_OBJ_SENTINEL));
   1a350:	f846 0c04 	str.w	r0, [r6, #-4]
                switch (*ip++) {
   1a354:	4625      	mov	r5, r4
                    mp_obj_t index = POP();
   1a356:	461e      	mov	r6, r3
                    DISPATCH();
   1a358:	f7ff bbde 	b.w	19b18 <mp_execute_bytecode+0x1a8>
                    PUSH(mp_load_build_class());
   1a35c:	f7f1 f998 	bl	b690 <mp_load_build_class>
   1a360:	1d33      	adds	r3, r6, #4
   1a362:	6070      	str	r0, [r6, #4]
                switch (*ip++) {
   1a364:	4625      	mov	r5, r4
                    PUSH(mp_load_build_class());
   1a366:	461e      	mov	r6, r3
                    DISPATCH();
   1a368:	f7ff bbd6 	b.w	19b18 <mp_execute_bytecode+0x1a8>
                    mp_obj_t obj = TOP();
   1a36c:	46b2      	mov	sl, r6
                    obj = mp_getiter(obj, iter_buf);
   1a36e:	4631      	mov	r1, r6
   1a370:	f85a 0b0c 	ldr.w	r0, [sl], #12
   1a374:	f7f2 fae6 	bl	c944 <mp_getiter>
                    if (obj != MP_OBJ_FROM_PTR(iter_buf)) {
   1a378:	4286      	cmp	r6, r0
   1a37a:	f43f ad70 	beq.w	19e5e <mp_execute_bytecode+0x4ee>
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] = MP_OBJ_NULL;
   1a37e:	2300      	movs	r3, #0
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 2] = obj;
   1a380:	6070      	str	r0, [r6, #4]
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] = MP_OBJ_NULL;
   1a382:	6033      	str	r3, [r6, #0]
                switch (*ip++) {
   1a384:	4625      	mov	r5, r4
                    sp += MP_OBJ_ITER_BUF_NSLOTS - 1;
   1a386:	4656      	mov	r6, sl
   1a388:	f7ff bbc6 	b.w	19b18 <mp_execute_bytecode+0x1a8>
                    PUSH((mp_obj_t)(mp_uint_t)(uintptr_t)(ip + slab)); // push destination ip for jump
   1a38c:	f8b5 3001 	ldrh.w	r3, [r5, #1]
   1a390:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
   1a394:	3b7e      	subs	r3, #126	; 0x7e
   1a396:	4423      	add	r3, r4
   1a398:	6073      	str	r3, [r6, #4]
                    PUSH((mp_obj_t)(mp_uint_t)(*ip)); // push number of exception handlers to unwind (0x80 bit set if we also need to pop stack)
   1a39a:	78ea      	ldrb	r2, [r5, #3]
   1a39c:	60b2      	str	r2, [r6, #8]
   1a39e:	3608      	adds	r6, #8
   1a3a0:	e013      	b.n	1a3ca <mp_execute_bytecode+0xa5a>
                        assert(exc_sp >= exc_stack);
   1a3a2:	9b04      	ldr	r3, [sp, #16]
   1a3a4:	429f      	cmp	r7, r3
                        unum -= 1;
   1a3a6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
                        assert(exc_sp >= exc_stack);
   1a3aa:	f200 8213 	bhi.w	1a7d4 <mp_execute_bytecode+0xe64>
                        if (MP_TAGPTR_TAG1(exc_sp->val_sp)) {
   1a3ae:	9b04      	ldr	r3, [sp, #16]
   1a3b0:	685b      	ldr	r3, [r3, #4]
   1a3b2:	0798      	lsls	r0, r3, #30
   1a3b4:	f100 8125 	bmi.w	1a602 <mp_execute_bytecode+0xc92>
                        POP_EXC_BLOCK();
   1a3b8:	9b04      	ldr	r3, [sp, #16]
   1a3ba:	685b      	ldr	r3, [r3, #4]
   1a3bc:	f003 0301 	and.w	r3, r3, #1
   1a3c0:	f88d 300f 	strb.w	r3, [sp, #15]
   1a3c4:	9b04      	ldr	r3, [sp, #16]
   1a3c6:	3b0c      	subs	r3, #12
   1a3c8:	9304      	str	r3, [sp, #16]
                    while ((unum & 0x7f) > 0) {
   1a3ca:	0651      	lsls	r1, r2, #25
   1a3cc:	d1e9      	bne.n	1a3a2 <mp_execute_bytecode+0xa32>
                    ip = (const byte*)MP_OBJ_TO_PTR(POP()); // pop destination ip for jump
   1a3ce:	f856 5c04 	ldr.w	r5, [r6, #-4]
                    if (unum != 0) {
   1a3d2:	2a00      	cmp	r2, #0
   1a3d4:	f040 8176 	bne.w	1a6c4 <mp_execute_bytecode+0xd54>
                    ip = (const byte*)MP_OBJ_TO_PTR(POP()); // pop destination ip for jump
   1a3d8:	3e08      	subs	r6, #8
   1a3da:	e087      	b.n	1a4ec <mp_execute_bytecode+0xb7c>
                    if (TOP() == mp_const_none) {
   1a3dc:	f8d6 a000 	ldr.w	sl, [r6]
   1a3e0:	4d2b      	ldr	r5, [pc, #172]	; (1a490 <mp_execute_bytecode+0xb20>)
   1a3e2:	45aa      	cmp	sl, r5
   1a3e4:	f000 81c6 	beq.w	1a774 <mp_execute_bytecode+0xe04>
                    } else if (MP_OBJ_IS_SMALL_INT(TOP())) {
   1a3e8:	f01a 0b01 	ands.w	fp, sl, #1
   1a3ec:	f000 8140 	beq.w	1a670 <mp_execute_bytecode+0xd00>
                        mp_obj_t data = sp[-1];
   1a3f0:	f856 bc04 	ldr.w	fp, [r6, #-4]
                        sp[0] = mp_const_none;
   1a3f4:	6035      	str	r5, [r6, #0]
                        sp[1] = mp_const_none;
   1a3f6:	6075      	str	r5, [r6, #4]
                        sp[-1] = mp_const_none;
   1a3f8:	f846 5c04 	str.w	r5, [r6, #-4]
                        mp_call_method_n_kw(3, 0, sp - 3);
   1a3fc:	f1a6 020c 	sub.w	r2, r6, #12
   1a400:	2100      	movs	r1, #0
   1a402:	2003      	movs	r0, #3
   1a404:	f7f1 fd48 	bl	be98 <mp_call_method_n_kw>
                switch (*ip++) {
   1a408:	4625      	mov	r5, r4
                        sp[-3] = data;
   1a40a:	f846 bc0c 	str.w	fp, [r6, #-12]
                        sp[-2] = cause;
   1a40e:	f846 ad08 	str.w	sl, [r6, #-8]!
   1a412:	f7ff bb81 	b.w	19b18 <mp_execute_bytecode+0x1a8>
                    mp_obj_t obj = TOP();
   1a416:	f8d6 a000 	ldr.w	sl, [r6]
                    mp_load_method(obj, MP_QSTR___exit__, sp);
   1a41a:	4632      	mov	r2, r6
                    mp_load_method(obj, MP_QSTR___enter__, sp + 2);
   1a41c:	f106 0408 	add.w	r4, r6, #8
                    mp_load_method(obj, MP_QSTR___exit__, sp);
   1a420:	4650      	mov	r0, sl
   1a422:	210c      	movs	r1, #12
   1a424:	f7f2 fa16 	bl	c854 <mp_load_method>
                    mp_load_method(obj, MP_QSTR___enter__, sp + 2);
   1a428:	4650      	mov	r0, sl
   1a42a:	4622      	mov	r2, r4
   1a42c:	210a      	movs	r1, #10
   1a42e:	f7f2 fa11 	bl	c854 <mp_load_method>
                    mp_obj_t ret = mp_call_method_n_kw(0, 0, sp + 2);
   1a432:	2100      	movs	r1, #0
   1a434:	4622      	mov	r2, r4
   1a436:	4608      	mov	r0, r1
   1a438:	f7f1 fd2e 	bl	be98 <mp_call_method_n_kw>
                    PUSH_EXC_BLOCK(1);
   1a43c:	9b04      	ldr	r3, [sp, #16]
   1a43e:	f8b5 2001 	ldrh.w	r2, [r5, #1]
   1a442:	330c      	adds	r3, #12
   1a444:	9304      	str	r3, [sp, #16]
   1a446:	f8dd c010 	ldr.w	ip, [sp, #16]
   1a44a:	f8dd e010 	ldr.w	lr, [sp, #16]
   1a44e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1a452:	9904      	ldr	r1, [sp, #16]
   1a454:	3503      	adds	r5, #3
   1a456:	442a      	add	r2, r5
   1a458:	f8cc 2000 	str.w	r2, [ip]
   1a45c:	f043 0302 	orr.w	r3, r3, #2
   1a460:	1d32      	adds	r2, r6, #4
   1a462:	4313      	orrs	r3, r2
   1a464:	2200      	movs	r2, #0
   1a466:	f8ce 3004 	str.w	r3, [lr, #4]
   1a46a:	f88d 200f 	strb.w	r2, [sp, #15]
   1a46e:	608a      	str	r2, [r1, #8]
                    PUSH(ret);
   1a470:	60b0      	str	r0, [r6, #8]
   1a472:	4626      	mov	r6, r4
                    DISPATCH();
   1a474:	f7ff bb50 	b.w	19b18 <mp_execute_bytecode+0x1a8>
                    if (mp_obj_is_true(TOP())) {
   1a478:	6830      	ldr	r0, [r6, #0]
   1a47a:	f8b5 4001 	ldrh.w	r4, [r5, #1]
                    DECODE_SLABEL;
   1a47e:	3503      	adds	r5, #3
                    if (mp_obj_is_true(TOP())) {
   1a480:	f7f3 fae6 	bl	da50 <mp_obj_is_true>
   1a484:	b180      	cbz	r0, 1a4a8 <mp_execute_bytecode+0xb38>
                        sp--;
   1a486:	3e04      	subs	r6, #4
   1a488:	e030      	b.n	1a4ec <mp_execute_bytecode+0xb7c>
   1a48a:	bf00      	nop
   1a48c:	00021c60 	.word	0x00021c60
   1a490:	000234d4 	.word	0x000234d4
   1a494:	00021c58 	.word	0x00021c58
                    if (mp_obj_is_true(TOP())) {
   1a498:	6830      	ldr	r0, [r6, #0]
   1a49a:	f8b5 4001 	ldrh.w	r4, [r5, #1]
                    DECODE_SLABEL;
   1a49e:	3503      	adds	r5, #3
                    if (mp_obj_is_true(TOP())) {
   1a4a0:	f7f3 fad6 	bl	da50 <mp_obj_is_true>
   1a4a4:	2800      	cmp	r0, #0
   1a4a6:	d0ee      	beq.n	1a486 <mp_execute_bytecode+0xb16>
                        ip += slab;
   1a4a8:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
   1a4ac:	4425      	add	r5, r4
   1a4ae:	e01d      	b.n	1a4ec <mp_execute_bytecode+0xb7c>
                    if (!mp_obj_is_true(POP())) {
   1a4b0:	6830      	ldr	r0, [r6, #0]
   1a4b2:	f8b5 4001 	ldrh.w	r4, [r5, #1]
   1a4b6:	3e04      	subs	r6, #4
                    DECODE_SLABEL;
   1a4b8:	3503      	adds	r5, #3
                    if (!mp_obj_is_true(POP())) {
   1a4ba:	f7f3 fac9 	bl	da50 <mp_obj_is_true>
   1a4be:	b9a8      	cbnz	r0, 1a4ec <mp_execute_bytecode+0xb7c>
                        ip += slab;
   1a4c0:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
   1a4c4:	4425      	add	r5, r4
   1a4c6:	e011      	b.n	1a4ec <mp_execute_bytecode+0xb7c>
                    if (mp_obj_is_true(POP())) {
   1a4c8:	6830      	ldr	r0, [r6, #0]
   1a4ca:	f8b5 4001 	ldrh.w	r4, [r5, #1]
   1a4ce:	3e04      	subs	r6, #4
                    DECODE_SLABEL;
   1a4d0:	3503      	adds	r5, #3
                    if (mp_obj_is_true(POP())) {
   1a4d2:	f7f3 fabd 	bl	da50 <mp_obj_is_true>
   1a4d6:	b148      	cbz	r0, 1a4ec <mp_execute_bytecode+0xb7c>
                        ip += slab;
   1a4d8:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
   1a4dc:	4425      	add	r5, r4
   1a4de:	e005      	b.n	1a4ec <mp_execute_bytecode+0xb7c>
   1a4e0:	f8b5 5001 	ldrh.w	r5, [r5, #1]
   1a4e4:	f5a5 45ff 	sub.w	r5, r5, #32640	; 0x7f80
   1a4e8:	3d7e      	subs	r5, #126	; 0x7e
                    ip += slab;
   1a4ea:	4425      	add	r5, r4
                if (MP_STATE_VM(mp_pending_exception) != MP_OBJ_NULL) {
   1a4ec:	4bc7      	ldr	r3, [pc, #796]	; (1a80c <mp_execute_bytecode+0xe9c>)
   1a4ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1a4f0:	2b00      	cmp	r3, #0
   1a4f2:	f43f ab11 	beq.w	19b18 <mp_execute_bytecode+0x1a8>
                    mp_obj_t obj = MP_STATE_VM(mp_pending_exception);
   1a4f6:	4bc5      	ldr	r3, [pc, #788]	; (1a80c <mp_execute_bytecode+0xe9c>)
                    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
   1a4f8:	4ac4      	ldr	r2, [pc, #784]	; (1a80c <mp_execute_bytecode+0xe9c>)
                    mp_obj_t obj = MP_STATE_VM(mp_pending_exception);
   1a4fa:	6b5c      	ldr	r4, [r3, #52]	; 0x34
                    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
   1a4fc:	2300      	movs	r3, #0
   1a4fe:	6353      	str	r3, [r2, #52]	; 0x34
                    RAISE(obj);
   1a500:	f7e5 feca 	bl	298 <nlr_pop>
   1a504:	9407      	str	r4, [sp, #28]
   1a506:	4620      	mov	r0, r4
   1a508:	f7ff ba6a 	b.w	199e0 <mp_execute_bytecode+0x70>
                    sp[0] = sp[-1];
   1a50c:	e916 000c 	ldmdb	r6, {r2, r3}
                    mp_obj_t top = sp[0];
   1a510:	6831      	ldr	r1, [r6, #0]
                    sp[-2] = top;
   1a512:	f846 1c08 	str.w	r1, [r6, #-8]
                switch (*ip++) {
   1a516:	4625      	mov	r5, r4
                    sp[-1] = sp[-2];
   1a518:	f846 2c04 	str.w	r2, [r6, #-4]
                    sp[0] = sp[-1];
   1a51c:	6033      	str	r3, [r6, #0]
                    DISPATCH();
   1a51e:	f7ff bafb 	b.w	19b18 <mp_execute_bytecode+0x1a8>
   1a522:	f8b5 4001 	ldrh.w	r4, [r5, #1]
                    code_state->sp = sp;
   1a526:	f8c8 6008 	str.w	r6, [r8, #8]
                    if (sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] == MP_OBJ_NULL) {
   1a52a:	f856 3c0c 	ldr.w	r3, [r6, #-12]
                    DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   1a52e:	3503      	adds	r5, #3
                    if (sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] == MP_OBJ_NULL) {
   1a530:	2b00      	cmp	r3, #0
   1a532:	f000 80ed 	beq.w	1a710 <mp_execute_bytecode+0xda0>
                        obj = MP_OBJ_FROM_PTR(&sp[-MP_OBJ_ITER_BUF_NSLOTS + 1]);
   1a536:	f1a6 000c 	sub.w	r0, r6, #12
                    mp_obj_t value = mp_iternext_allow_raise(obj);
   1a53a:	f7f2 fa57 	bl	c9ec <mp_iternext_allow_raise>
                    if (value == MP_OBJ_STOP_ITERATION) {
   1a53e:	2804      	cmp	r0, #4
   1a540:	f47f adc6 	bne.w	1a0d0 <mp_execute_bytecode+0x760>
                        sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1a544:	3e10      	subs	r6, #16
                        ip += ulab; // jump to after for-block
   1a546:	4425      	add	r5, r4
   1a548:	f7ff bae6 	b.w	19b18 <mp_execute_bytecode+0x1a8>
                    SET_TOP(mp_getiter(TOP(), NULL));
   1a54c:	2100      	movs	r1, #0
   1a54e:	6830      	ldr	r0, [r6, #0]
   1a550:	f7f2 f9f8 	bl	c944 <mp_getiter>
                switch (*ip++) {
   1a554:	4625      	mov	r5, r4
                    SET_TOP(mp_getiter(TOP(), NULL));
   1a556:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   1a558:	f7ff bade 	b.w	19b18 <mp_execute_bytecode+0x1a8>
                    PUSH_EXC_BLOCK((code_state->ip[0] == MP_BC_SETUP_FINALLY) ? 1 : 0);
   1a55c:	9a04      	ldr	r2, [sp, #16]
   1a55e:	f8b5 3001 	ldrh.w	r3, [r5, #1]
   1a562:	320c      	adds	r2, #12
   1a564:	9204      	str	r2, [sp, #16]
   1a566:	9a04      	ldr	r2, [sp, #16]
   1a568:	9c04      	ldr	r4, [sp, #16]
   1a56a:	1ce9      	adds	r1, r5, #3
   1a56c:	440b      	add	r3, r1
   1a56e:	6013      	str	r3, [r2, #0]
   1a570:	782b      	ldrb	r3, [r5, #0]
   1a572:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1a576:	9804      	ldr	r0, [sp, #16]
   1a578:	2b40      	cmp	r3, #64	; 0x40
   1a57a:	bf14      	ite	ne
   1a57c:	2300      	movne	r3, #0
   1a57e:	2302      	moveq	r3, #2
   1a580:	4313      	orrs	r3, r2
   1a582:	4333      	orrs	r3, r6
   1a584:	2200      	movs	r2, #0
   1a586:	6063      	str	r3, [r4, #4]
   1a588:	460d      	mov	r5, r1
   1a58a:	f88d 200f 	strb.w	r2, [sp, #15]
   1a58e:	6082      	str	r2, [r0, #8]
                    DISPATCH();
   1a590:	f7ff bac2 	b.w	19b18 <mp_execute_bytecode+0x1a8>
                    assert(exc_sp >= exc_stack);
   1a594:	9b04      	ldr	r3, [sp, #16]
   1a596:	429f      	cmp	r7, r3
   1a598:	f67f aab4 	bls.w	19b04 <mp_execute_bytecode+0x194>
   1a59c:	4b9c      	ldr	r3, [pc, #624]	; (1a810 <mp_execute_bytecode+0xea0>)
   1a59e:	4a9d      	ldr	r2, [pc, #628]	; (1a814 <mp_execute_bytecode+0xea4>)
   1a5a0:	489d      	ldr	r0, [pc, #628]	; (1a818 <mp_execute_bytecode+0xea8>)
   1a5a2:	f240 21ff 	movw	r1, #767	; 0x2ff
   1a5a6:	f001 f8ed 	bl	1b784 <__assert_func>
                    if (ip[-1] < MP_BC_LOAD_CONST_SMALL_INT_MULTI + 64) {
   1a5aa:	28af      	cmp	r0, #175	; 0xaf
   1a5ac:	d81a      	bhi.n	1a5e4 <mp_execute_bytecode+0xc74>
                        PUSH(MP_OBJ_NEW_SMALL_INT((mp_int_t)ip[-1] - MP_BC_LOAD_CONST_SMALL_INT_MULTI - 16));
   1a5ae:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   1a5b2:	005b      	lsls	r3, r3, #1
   1a5b4:	f043 0301 	orr.w	r3, r3, #1
   1a5b8:	6073      	str	r3, [r6, #4]
                switch (*ip++) {
   1a5ba:	4625      	mov	r5, r4
                        PUSH(MP_OBJ_NEW_SMALL_INT((mp_int_t)ip[-1] - MP_BC_LOAD_CONST_SMALL_INT_MULTI - 16));
   1a5bc:	3604      	adds	r6, #4
                        DISPATCH();
   1a5be:	f7ff baab 	b.w	19b18 <mp_execute_bytecode+0x1a8>
                    } else if (MP_OBJ_IS_SMALL_INT(TOP())) {
   1a5c2:	07c3      	lsls	r3, r0, #31
   1a5c4:	f140 80fd 	bpl.w	1a7c2 <mp_execute_bytecode+0xe52>
                        if (cause < 0) {
   1a5c8:	1042      	asrs	r2, r0, #1
   1a5ca:	f100 80b9 	bmi.w	1a740 <mp_execute_bytecode+0xdd0>
                            PUSH((mp_obj_t)cause);
   1a5ce:	6032      	str	r2, [r6, #0]
                            goto unwind_jump;
   1a5d0:	e6fb      	b.n	1a3ca <mp_execute_bytecode+0xa5a>
                        mp_obj_dict_store(obj, sp[0], sp[-1]);
   1a5d2:	f856 2c04 	ldr.w	r2, [r6, #-4]
   1a5d6:	f856 1908 	ldr.w	r1, [r6], #-8
                    DECODE_UINT;
   1a5da:	4625      	mov	r5, r4
                        mp_obj_dict_store(obj, sp[0], sp[-1]);
   1a5dc:	f7f4 fe4c 	bl	f278 <mp_obj_dict_store>
   1a5e0:	f7ff ba9a 	b.w	19b18 <mp_execute_bytecode+0x1a8>
                    } else if (ip[-1] < MP_BC_LOAD_FAST_MULTI + 16) {
   1a5e4:	28bf      	cmp	r0, #191	; 0xbf
   1a5e6:	f240 8086 	bls.w	1a6f6 <mp_execute_bytecode+0xd86>
                    } else if (ip[-1] < MP_BC_STORE_FAST_MULTI + 16) {
   1a5ea:	28cf      	cmp	r0, #207	; 0xcf
   1a5ec:	f200 80ab 	bhi.w	1a746 <mp_execute_bytecode+0xdd6>
                        fastn[MP_BC_STORE_FAST_MULTI - (mp_int_t)ip[-1]] = POP();
   1a5f0:	f1c0 00c0 	rsb	r0, r0, #192	; 0xc0
   1a5f4:	6833      	ldr	r3, [r6, #0]
   1a5f6:	f849 3020 	str.w	r3, [r9, r0, lsl #2]
                switch (*ip++) {
   1a5fa:	4625      	mov	r5, r4
                        fastn[MP_BC_STORE_FAST_MULTI - (mp_int_t)ip[-1]] = POP();
   1a5fc:	3e04      	subs	r6, #4
                        DISPATCH();
   1a5fe:	f7ff ba8b 	b.w	19b18 <mp_execute_bytecode+0x1a8>
                            ip = exc_sp->handler; // get exception handler byte code address
   1a602:	9904      	ldr	r1, [sp, #16]
                            exc_sp--; // pop exception handler
   1a604:	9b04      	ldr	r3, [sp, #16]
                            PUSH(MP_OBJ_NEW_SMALL_INT(unum));
   1a606:	0052      	lsls	r2, r2, #1
   1a608:	f042 0201 	orr.w	r2, r2, #1
   1a60c:	6032      	str	r2, [r6, #0]
                            exc_sp--; // pop exception handler
   1a60e:	3b0c      	subs	r3, #12
                            ip = exc_sp->handler; // get exception handler byte code address
   1a610:	680d      	ldr	r5, [r1, #0]
                            exc_sp--; // pop exception handler
   1a612:	9304      	str	r3, [sp, #16]
                            goto dispatch_loop; // run the exception handler
   1a614:	f7ff ba80 	b.w	19b18 <mp_execute_bytecode+0x1a8>
   1a618:	f8b3 1001 	ldrh.w	r1, [r3, #1]
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1a61c:	f8d8 2008 	ldr.w	r2, [r8, #8]
                        DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   1a620:	3303      	adds	r3, #3
                        code_state->ip = ip + ulab; // jump to after for-block
   1a622:	440b      	add	r3, r1
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1a624:	3a10      	subs	r2, #16
                        code_state->ip = ip + ulab; // jump to after for-block
   1a626:	f8c8 3004 	str.w	r3, [r8, #4]
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1a62a:	f8c8 2008 	str.w	r2, [r8, #8]
                        goto outer_dispatch_loop; // continue with dispatch loop
   1a62e:	f7ff b9bb 	b.w	199a8 <mp_execute_bytecode+0x38>
                        sp--;
   1a632:	3e04      	subs	r6, #4
                        obj = TOP();
   1a634:	6830      	ldr	r0, [r6, #0]
   1a636:	f7ff b9cc 	b.w	199d2 <mp_execute_bytecode+0x62>
                        assert(ret_kind == MP_VM_RETURN_EXCEPTION);
   1a63a:	2802      	cmp	r0, #2
   1a63c:	f040 811c 	bne.w	1a878 <mp_execute_bytecode+0xf08>
                        if (EXC_MATCH(ret_value, MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   1a640:	4976      	ldr	r1, [pc, #472]	; (1a81c <mp_execute_bytecode+0xeac>)
   1a642:	9805      	ldr	r0, [sp, #20]
   1a644:	f7f5 f914 	bl	f870 <mp_obj_exception_match>
   1a648:	2800      	cmp	r0, #0
   1a64a:	f000 80ca 	beq.w	1a7e2 <mp_execute_bytecode+0xe72>
                            PUSH(mp_obj_exception_get_value(ret_value));
   1a64e:	9805      	ldr	r0, [sp, #20]
   1a650:	f7f4 ff40 	bl	f4d4 <mp_obj_exception_get_value>
   1a654:	f846 0c04 	str.w	r0, [r6, #-4]
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   1a658:	f1bb 0f00 	cmp.w	fp, #0
   1a65c:	f43f abff 	beq.w	19e5e <mp_execute_bytecode+0x4ee>
   1a660:	496f      	ldr	r1, [pc, #444]	; (1a820 <mp_execute_bytecode+0xeb0>)
   1a662:	4658      	mov	r0, fp
   1a664:	f7f5 f904 	bl	f870 <mp_obj_exception_match>
   1a668:	2800      	cmp	r0, #0
   1a66a:	f43f abf8 	beq.w	19e5e <mp_execute_bytecode+0x4ee>
   1a66e:	e092      	b.n	1a796 <mp_execute_bytecode+0xe26>
                        assert(mp_obj_is_exception_instance(TOP()));
   1a670:	4650      	mov	r0, sl
   1a672:	f7f5 f8ed 	bl	f850 <mp_obj_is_exception_instance>
   1a676:	2800      	cmp	r0, #0
   1a678:	f000 80e9 	beq.w	1a84e <mp_execute_bytecode+0xede>
                        sp[1] = sp[0];
   1a67c:	6830      	ldr	r0, [r6, #0]
   1a67e:	6070      	str	r0, [r6, #4]
                        sp[0] = MP_OBJ_FROM_PTR(mp_obj_get_type(sp[0]));
   1a680:	f7f3 f908 	bl	d894 <mp_obj_get_type>
                        sp -= 2;
   1a684:	f1a6 0a08 	sub.w	sl, r6, #8
                        sp[0] = MP_OBJ_FROM_PTR(mp_obj_get_type(sp[0]));
   1a688:	6030      	str	r0, [r6, #0]
                        mp_obj_t ret_value = mp_call_method_n_kw(3, 0, sp);
   1a68a:	4659      	mov	r1, fp
   1a68c:	4652      	mov	r2, sl
                        sp[2] = mp_const_none;
   1a68e:	60b5      	str	r5, [r6, #8]
                        mp_obj_t ret_value = mp_call_method_n_kw(3, 0, sp);
   1a690:	2003      	movs	r0, #3
   1a692:	f7f1 fc01 	bl	be98 <mp_call_method_n_kw>
                        if (mp_obj_is_true(ret_value)) {
   1a696:	f7f3 f9db 	bl	da50 <mp_obj_is_true>
   1a69a:	2800      	cmp	r0, #0
   1a69c:	d031      	beq.n	1a702 <mp_execute_bytecode+0xd92>
                            assert(exc_sp >= exc_stack);
   1a69e:	9b04      	ldr	r3, [sp, #16]
                            SET_TOP(mp_const_none);
   1a6a0:	f846 5c08 	str.w	r5, [r6, #-8]
                            assert(exc_sp >= exc_stack);
   1a6a4:	429f      	cmp	r7, r3
   1a6a6:	f200 80a9 	bhi.w	1a7fc <mp_execute_bytecode+0xe8c>
                            POP_EXC_BLOCK();
   1a6aa:	9b04      	ldr	r3, [sp, #16]
   1a6ac:	685b      	ldr	r3, [r3, #4]
   1a6ae:	f003 0301 	and.w	r3, r3, #1
   1a6b2:	f88d 300f 	strb.w	r3, [sp, #15]
   1a6b6:	9b04      	ldr	r3, [sp, #16]
   1a6b8:	3b0c      	subs	r3, #12
                        sp -= 2;
   1a6ba:	4656      	mov	r6, sl
                switch (*ip++) {
   1a6bc:	4625      	mov	r5, r4
                            POP_EXC_BLOCK();
   1a6be:	9304      	str	r3, [sp, #16]
   1a6c0:	f7ff ba2a 	b.w	19b18 <mp_execute_bytecode+0x1a8>
                        sp -= MP_OBJ_ITER_BUF_NSLOTS;
   1a6c4:	3e18      	subs	r6, #24
   1a6c6:	e711      	b.n	1a4ec <mp_execute_bytecode+0xb7c>
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   1a6c8:	9b04      	ldr	r3, [sp, #16]
                            finally_sp[1] = sp[0];
   1a6ca:	6830      	ldr	r0, [r6, #0]
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   1a6cc:	685e      	ldr	r6, [r3, #4]
                            ip = exc_sp->handler;
   1a6ce:	9a04      	ldr	r2, [sp, #16]
                            POP_EXC_BLOCK();
   1a6d0:	9b04      	ldr	r3, [sp, #16]
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   1a6d2:	f026 0603 	bic.w	r6, r6, #3
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   1a6d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
                            finally_sp[1] = sp[0];
   1a6da:	6070      	str	r0, [r6, #4]
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   1a6dc:	60b1      	str	r1, [r6, #8]
                            POP_EXC_BLOCK();
   1a6de:	685b      	ldr	r3, [r3, #4]
                            ip = exc_sp->handler;
   1a6e0:	6815      	ldr	r5, [r2, #0]
                            POP_EXC_BLOCK();
   1a6e2:	f003 0301 	and.w	r3, r3, #1
   1a6e6:	f88d 300f 	strb.w	r3, [sp, #15]
   1a6ea:	9b04      	ldr	r3, [sp, #16]
   1a6ec:	3b0c      	subs	r3, #12
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   1a6ee:	3608      	adds	r6, #8
                            POP_EXC_BLOCK();
   1a6f0:	9304      	str	r3, [sp, #16]
                            goto dispatch_loop;
   1a6f2:	f7ff ba11 	b.w	19b18 <mp_execute_bytecode+0x1a8>
                        obj_shared = fastn[MP_BC_LOAD_FAST_MULTI - (mp_int_t)ip[-1]];
   1a6f6:	f1c0 00b0 	rsb	r0, r0, #176	; 0xb0
                switch (*ip++) {
   1a6fa:	4625      	mov	r5, r4
                        obj_shared = fastn[MP_BC_LOAD_FAST_MULTI - (mp_int_t)ip[-1]];
   1a6fc:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
                        goto load_check;
   1a700:	e4e3      	b.n	1a0ca <mp_execute_bytecode+0x75a>
                            sp[0] = sp[3];
   1a702:	6873      	ldr	r3, [r6, #4]
   1a704:	f846 3c08 	str.w	r3, [r6, #-8]
                switch (*ip++) {
   1a708:	4625      	mov	r5, r4
                        sp -= 2;
   1a70a:	4656      	mov	r6, sl
   1a70c:	f7ff ba04 	b.w	19b18 <mp_execute_bytecode+0x1a8>
                        obj = sp[-MP_OBJ_ITER_BUF_NSLOTS + 2];
   1a710:	f856 0c08 	ldr.w	r0, [r6, #-8]
   1a714:	e711      	b.n	1a53a <mp_execute_bytecode+0xbca>
                        ret_kind = mp_resume(TOP(), send_value, MP_OBJ_NULL, &ret_value);
   1a716:	ab05      	add	r3, sp, #20
   1a718:	f856 0c04 	ldr.w	r0, [r6, #-4]
                    mp_obj_t t_exc = MP_OBJ_NULL;
   1a71c:	4693      	mov	fp, r2
                        ret_kind = mp_resume(TOP(), send_value, MP_OBJ_NULL, &ret_value);
   1a71e:	f7f2 f9dd 	bl	cadc <mp_resume>
   1a722:	f7ff bb85 	b.w	19e30 <mp_execute_bytecode+0x4c0>
                        *code_state->sp = mp_obj_exception_get_value(MP_OBJ_FROM_PTR(nlr.ret_val));
   1a726:	9807      	ldr	r0, [sp, #28]
   1a728:	f8d8 4008 	ldr.w	r4, [r8, #8]
   1a72c:	f7f4 fed2 	bl	f4d4 <mp_obj_exception_get_value>
   1a730:	6020      	str	r0, [r4, #0]
                        code_state->ip++; // yield from is over, move to next instruction
   1a732:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1a736:	3301      	adds	r3, #1
   1a738:	f8c8 3004 	str.w	r3, [r8, #4]
                        goto outer_dispatch_loop; // continue with dispatch loop
   1a73c:	f7ff b934 	b.w	199a8 <mp_execute_bytecode+0x38>
                        mp_int_t cause = MP_OBJ_SMALL_INT_VALUE(POP());
   1a740:	3e04      	subs	r6, #4
   1a742:	f7ff babc 	b.w	19cbe <mp_execute_bytecode+0x34e>
                    } else if (ip[-1] < MP_BC_UNARY_OP_MULTI + MP_UNARY_OP_NUM_BYTECODE) {
   1a746:	28d3      	cmp	r0, #211	; 0xd3
   1a748:	d933      	bls.n	1a7b2 <mp_execute_bytecode+0xe42>
                    } else if (ip[-1] < MP_BC_BINARY_OP_MULTI + MP_BINARY_OP_NUM_BYTECODE) {
   1a74a:	28f7      	cmp	r0, #247	; 0xf7
   1a74c:	d870      	bhi.n	1a830 <mp_execute_bytecode+0xec0>
                        SET_TOP(mp_binary_op(ip[-1] - MP_BC_BINARY_OP_MULTI, lhs, rhs));
   1a74e:	6832      	ldr	r2, [r6, #0]
   1a750:	f856 1c04 	ldr.w	r1, [r6, #-4]
   1a754:	38d7      	subs	r0, #215	; 0xd7
   1a756:	f7f1 f8e5 	bl	b924 <mp_binary_op>
                        mp_obj_t rhs = POP();
   1a75a:	1f33      	subs	r3, r6, #4
                        SET_TOP(mp_binary_op(ip[-1] - MP_BC_BINARY_OP_MULTI, lhs, rhs));
   1a75c:	f846 0c04 	str.w	r0, [r6, #-4]
                switch (*ip++) {
   1a760:	4625      	mov	r5, r4
                        mp_obj_t rhs = POP();
   1a762:	461e      	mov	r6, r3
                        DISPATCH();
   1a764:	f7ff b9d8 	b.w	19b18 <mp_execute_bytecode+0x1a8>
                code_state->state[0] = MP_OBJ_FROM_PTR(nlr.ret_val); // put exception here because sp is invalid
   1a768:	9b07      	ldr	r3, [sp, #28]
   1a76a:	f8c8 3014 	str.w	r3, [r8, #20]
                return MP_VM_RETURN_EXCEPTION;
   1a76e:	2002      	movs	r0, #2
   1a770:	f7ff bacd 	b.w	19d0e <mp_execute_bytecode+0x39e>
                        sp -= 2;
   1a774:	f1a6 0b08 	sub.w	fp, r6, #8
                        sp[1] = mp_const_none;
   1a778:	f8c6 a004 	str.w	sl, [r6, #4]
                        sp[2] = mp_const_none;
   1a77c:	f8c6 a008 	str.w	sl, [r6, #8]
                        mp_call_method_n_kw(3, 0, sp);
   1a780:	465a      	mov	r2, fp
   1a782:	2100      	movs	r1, #0
   1a784:	2003      	movs	r0, #3
   1a786:	f7f1 fb87 	bl	be98 <mp_call_method_n_kw>
                switch (*ip++) {
   1a78a:	4625      	mov	r5, r4
                        SET_TOP(mp_const_none);
   1a78c:	f846 ac08 	str.w	sl, [r6, #-8]
                        sp -= 2;
   1a790:	465e      	mov	r6, fp
   1a792:	f7ff b9c1 	b.w	19b18 <mp_execute_bytecode+0x1a8>
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   1a796:	4658      	mov	r0, fp
   1a798:	f7ff b91b 	b.w	199d2 <mp_execute_bytecode+0x62>
                            mp_obj_t obj = mp_obj_new_exception_msg(&mp_type_NameError, "local variable referenced before assignment");
   1a79c:	4921      	ldr	r1, [pc, #132]	; (1a824 <mp_execute_bytecode+0xeb4>)
   1a79e:	4822      	ldr	r0, [pc, #136]	; (1a828 <mp_execute_bytecode+0xeb8>)
   1a7a0:	f7ff bb1b 	b.w	19dda <mp_execute_bytecode+0x46a>
                assert(exc_sp >= exc_stack);
   1a7a4:	4b1a      	ldr	r3, [pc, #104]	; (1a810 <mp_execute_bytecode+0xea0>)
   1a7a6:	4a1b      	ldr	r2, [pc, #108]	; (1a814 <mp_execute_bytecode+0xea4>)
   1a7a8:	481b      	ldr	r0, [pc, #108]	; (1a818 <mp_execute_bytecode+0xea8>)
   1a7aa:	f240 5191 	movw	r1, #1425	; 0x591
   1a7ae:	f000 ffe9 	bl	1b784 <__assert_func>
                        SET_TOP(mp_unary_op(ip[-1] - MP_BC_UNARY_OP_MULTI, TOP()));
   1a7b2:	38d0      	subs	r0, #208	; 0xd0
   1a7b4:	6831      	ldr	r1, [r6, #0]
   1a7b6:	f7f0 ffc5 	bl	b744 <mp_unary_op>
                switch (*ip++) {
   1a7ba:	4625      	mov	r5, r4
                        SET_TOP(mp_unary_op(ip[-1] - MP_BC_UNARY_OP_MULTI, TOP()));
   1a7bc:	6030      	str	r0, [r6, #0]
                        DISPATCH();
   1a7be:	f7ff b9ab 	b.w	19b18 <mp_execute_bytecode+0x1a8>
                        assert(mp_obj_is_exception_instance(TOP()));
   1a7c2:	f7f5 f845 	bl	f850 <mp_obj_is_exception_instance>
   1a7c6:	b190      	cbz	r0, 1a7ee <mp_execute_bytecode+0xe7e>
                        RAISE(TOP());
   1a7c8:	f7e5 fd66 	bl	298 <nlr_pop>
   1a7cc:	6830      	ldr	r0, [r6, #0]
   1a7ce:	9007      	str	r0, [sp, #28]
   1a7d0:	f7ff b906 	b.w	199e0 <mp_execute_bytecode+0x70>
                        assert(exc_sp >= exc_stack);
   1a7d4:	4b0e      	ldr	r3, [pc, #56]	; (1a810 <mp_execute_bytecode+0xea0>)
   1a7d6:	4a0f      	ldr	r2, [pc, #60]	; (1a814 <mp_execute_bytecode+0xea4>)
   1a7d8:	480f      	ldr	r0, [pc, #60]	; (1a818 <mp_execute_bytecode+0xea8>)
   1a7da:	f44f 7124 	mov.w	r1, #656	; 0x290
   1a7de:	f000 ffd1 	bl	1b784 <__assert_func>
                            RAISE(ret_value);
   1a7e2:	f7e5 fd59 	bl	298 <nlr_pop>
   1a7e6:	9805      	ldr	r0, [sp, #20]
   1a7e8:	9007      	str	r0, [sp, #28]
   1a7ea:	f7ff b8f9 	b.w	199e0 <mp_execute_bytecode+0x70>
                        assert(mp_obj_is_exception_instance(TOP()));
   1a7ee:	4b0f      	ldr	r3, [pc, #60]	; (1a82c <mp_execute_bytecode+0xebc>)
   1a7f0:	4a08      	ldr	r2, [pc, #32]	; (1a814 <mp_execute_bytecode+0xea4>)
   1a7f2:	4809      	ldr	r0, [pc, #36]	; (1a818 <mp_execute_bytecode+0xea8>)
   1a7f4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
   1a7f8:	f000 ffc4 	bl	1b784 <__assert_func>
                            assert(exc_sp >= exc_stack);
   1a7fc:	4b04      	ldr	r3, [pc, #16]	; (1a810 <mp_execute_bytecode+0xea0>)
   1a7fe:	4a05      	ldr	r2, [pc, #20]	; (1a814 <mp_execute_bytecode+0xea4>)
   1a800:	4805      	ldr	r0, [pc, #20]	; (1a818 <mp_execute_bytecode+0xea8>)
   1a802:	f44f 711f 	mov.w	r1, #636	; 0x27c
   1a806:	f000 ffbd 	bl	1b784 <__assert_func>
   1a80a:	bf00      	nop
   1a80c:	200012f0 	.word	0x200012f0
   1a810:	00024b8c 	.word	0x00024b8c
   1a814:	00024b18 	.word	0x00024b18
   1a818:	00024b7c 	.word	0x00024b7c
   1a81c:	00022334 	.word	0x00022334
   1a820:	000222bc 	.word	0x000222bc
   1a824:	00024b2c 	.word	0x00024b2c
   1a828:	00022604 	.word	0x00022604
   1a82c:	00024b58 	.word	0x00024b58
                    mp_obj_t obj = mp_obj_new_exception_msg(&mp_type_NotImplementedError, "byte code not implemented");
   1a830:	4918      	ldr	r1, [pc, #96]	; (1a894 <mp_execute_bytecode+0xf24>)
   1a832:	4819      	ldr	r0, [pc, #100]	; (1a898 <mp_execute_bytecode+0xf28>)
   1a834:	f7f4 fee6 	bl	f604 <mp_obj_new_exception_msg>
   1a838:	4604      	mov	r4, r0
                    nlr_pop();
   1a83a:	f7e5 fd2d 	bl	298 <nlr_pop>
                    fastn[0] = obj;
   1a83e:	9b00      	ldr	r3, [sp, #0]
   1a840:	eb08 0883 	add.w	r8, r8, r3, lsl #2
                    return MP_VM_RETURN_EXCEPTION;
   1a844:	2002      	movs	r0, #2
                    fastn[0] = obj;
   1a846:	f8c8 4014 	str.w	r4, [r8, #20]
                    return MP_VM_RETURN_EXCEPTION;
   1a84a:	f7ff ba60 	b.w	19d0e <mp_execute_bytecode+0x39e>
                        assert(mp_obj_is_exception_instance(TOP()));
   1a84e:	4b13      	ldr	r3, [pc, #76]	; (1a89c <mp_execute_bytecode+0xf2c>)
   1a850:	4a13      	ldr	r2, [pc, #76]	; (1a8a0 <mp_execute_bytecode+0xf30>)
   1a852:	4814      	ldr	r0, [pc, #80]	; (1a8a4 <mp_execute_bytecode+0xf34>)
   1a854:	f240 216e 	movw	r1, #622	; 0x26e
   1a858:	f000 ff94 	bl	1b784 <__assert_func>
                    assert(currently_in_except_block);
   1a85c:	4b12      	ldr	r3, [pc, #72]	; (1a8a8 <mp_execute_bytecode+0xf38>)
   1a85e:	4a10      	ldr	r2, [pc, #64]	; (1a8a0 <mp_execute_bytecode+0xf30>)
   1a860:	4810      	ldr	r0, [pc, #64]	; (1a8a4 <mp_execute_bytecode+0xf34>)
   1a862:	f240 3106 	movw	r1, #774	; 0x306
   1a866:	f000 ff8d 	bl	1b784 <__assert_func>
                    assert(exc_sp == exc_stack - 1);
   1a86a:	4b10      	ldr	r3, [pc, #64]	; (1a8ac <mp_execute_bytecode+0xf3c>)
   1a86c:	4a0c      	ldr	r2, [pc, #48]	; (1a8a0 <mp_execute_bytecode+0xf30>)
   1a86e:	480d      	ldr	r0, [pc, #52]	; (1a8a4 <mp_execute_bytecode+0xf34>)
   1a870:	f240 4145 	movw	r1, #1093	; 0x445
   1a874:	f000 ff86 	bl	1b784 <__assert_func>
                        assert(ret_kind == MP_VM_RETURN_EXCEPTION);
   1a878:	4b0d      	ldr	r3, [pc, #52]	; (1a8b0 <mp_execute_bytecode+0xf40>)
   1a87a:	4a09      	ldr	r2, [pc, #36]	; (1a8a0 <mp_execute_bytecode+0xf30>)
   1a87c:	4809      	ldr	r0, [pc, #36]	; (1a8a4 <mp_execute_bytecode+0xf34>)
   1a87e:	f240 41a5 	movw	r1, #1189	; 0x4a5
   1a882:	f000 ff7f 	bl	1b784 <__assert_func>
                    assert(exc_sp >= exc_stack);
   1a886:	4b0b      	ldr	r3, [pc, #44]	; (1a8b4 <mp_execute_bytecode+0xf44>)
   1a888:	4a05      	ldr	r2, [pc, #20]	; (1a8a0 <mp_execute_bytecode+0xf30>)
   1a88a:	4806      	ldr	r0, [pc, #24]	; (1a8a4 <mp_execute_bytecode+0xf34>)
   1a88c:	f240 3105 	movw	r1, #773	; 0x305
   1a890:	f000 ff78 	bl	1b784 <__assert_func>
   1a894:	00024bf8 	.word	0x00024bf8
   1a898:	000226b8 	.word	0x000226b8
   1a89c:	00024b58 	.word	0x00024b58
   1a8a0:	00024b18 	.word	0x00024b18
   1a8a4:	00024b7c 	.word	0x00024b7c
   1a8a8:	00024ba0 	.word	0x00024ba0
   1a8ac:	00024bbc 	.word	0x00024bbc
   1a8b0:	00024bd4 	.word	0x00024bd4
   1a8b4:	00024b8c 	.word	0x00024b8c

0001a8b8 <mp_decode_uint>:
#else // don't print debugging info
#define DEBUG_PRINT (0)
#define DEBUG_printf(...) (void)0
#endif

mp_uint_t mp_decode_uint(const byte **ptr) {
   1a8b8:	b480      	push	{r7}
   1a8ba:	b087      	sub	sp, #28
   1a8bc:	af00      	add	r7, sp, #0
   1a8be:	6078      	str	r0, [r7, #4]
    mp_uint_t unum = 0;
   1a8c0:	2300      	movs	r3, #0
   1a8c2:	617b      	str	r3, [r7, #20]
    byte val;
    const byte *p = *ptr;
   1a8c4:	687b      	ldr	r3, [r7, #4]
   1a8c6:	681b      	ldr	r3, [r3, #0]
   1a8c8:	613b      	str	r3, [r7, #16]
    do {
        val = *p++;
   1a8ca:	693b      	ldr	r3, [r7, #16]
   1a8cc:	1c5a      	adds	r2, r3, #1
   1a8ce:	613a      	str	r2, [r7, #16]
   1a8d0:	781b      	ldrb	r3, [r3, #0]
   1a8d2:	73fb      	strb	r3, [r7, #15]
        unum = (unum << 7) | (val & 0x7f);
   1a8d4:	697b      	ldr	r3, [r7, #20]
   1a8d6:	01da      	lsls	r2, r3, #7
   1a8d8:	7bfb      	ldrb	r3, [r7, #15]
   1a8da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a8de:	4313      	orrs	r3, r2
   1a8e0:	617b      	str	r3, [r7, #20]
    } while ((val & 0x80) != 0);
   1a8e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1a8e6:	2b00      	cmp	r3, #0
   1a8e8:	dbef      	blt.n	1a8ca <mp_decode_uint+0x12>
    *ptr = p;
   1a8ea:	687b      	ldr	r3, [r7, #4]
   1a8ec:	693a      	ldr	r2, [r7, #16]
   1a8ee:	601a      	str	r2, [r3, #0]
    return unum;
   1a8f0:	697b      	ldr	r3, [r7, #20]
}
   1a8f2:	4618      	mov	r0, r3
   1a8f4:	371c      	adds	r7, #28
   1a8f6:	46bd      	mov	sp, r7
   1a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a8fc:	4770      	bx	lr
   1a8fe:	bf00      	nop

0001a900 <mp_decode_uint_value>:
// the caller doesn't need to increase the ptr argument.  If ptr is a local variable
// and the caller uses mp_decode_uint(&ptr) instead of this function, then the compiler
// must allocate a slot on the stack for ptr, and this slot cannot be reused for
// anything else in the function because the pointer may have been stored in a global
// and reused later in the function.
mp_uint_t mp_decode_uint_value(const byte *ptr) {
   1a900:	b580      	push	{r7, lr}
   1a902:	b082      	sub	sp, #8
   1a904:	af00      	add	r7, sp, #0
   1a906:	6078      	str	r0, [r7, #4]
    return mp_decode_uint(&ptr);
   1a908:	1d3b      	adds	r3, r7, #4
   1a90a:	4618      	mov	r0, r3
   1a90c:	f7ff ffd4 	bl	1a8b8 <mp_decode_uint>
   1a910:	4603      	mov	r3, r0
}
   1a912:	4618      	mov	r0, r3
   1a914:	3708      	adds	r7, #8
   1a916:	46bd      	mov	sp, r7
   1a918:	bd80      	pop	{r7, pc}
   1a91a:	bf00      	nop

0001a91c <mp_decode_uint_skip>:

// This function is used to help reduce stack usage at the caller, for the case when
// the caller doesn't need the actual value and just wants to skip over it.
const byte *mp_decode_uint_skip(const byte *ptr) {
   1a91c:	b480      	push	{r7}
   1a91e:	b083      	sub	sp, #12
   1a920:	af00      	add	r7, sp, #0
   1a922:	6078      	str	r0, [r7, #4]
    while ((*ptr++) & 0x80) {
   1a924:	bf00      	nop
   1a926:	687b      	ldr	r3, [r7, #4]
   1a928:	1c5a      	adds	r2, r3, #1
   1a92a:	607a      	str	r2, [r7, #4]
   1a92c:	781b      	ldrb	r3, [r3, #0]
   1a92e:	b25b      	sxtb	r3, r3
   1a930:	2b00      	cmp	r3, #0
   1a932:	dbf8      	blt.n	1a926 <mp_decode_uint_skip+0xa>
    }
    return ptr;
   1a934:	687b      	ldr	r3, [r7, #4]
}
   1a936:	4618      	mov	r0, r3
   1a938:	370c      	adds	r7, #12
   1a93a:	46bd      	mov	sp, r7
   1a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a940:	4770      	bx	lr
   1a942:	bf00      	nop

0001a944 <fun_pos_args_mismatch>:

STATIC NORETURN void fun_pos_args_mismatch(mp_obj_fun_bc_t *f, size_t expected, size_t given) {
   1a944:	b580      	push	{r7, lr}
   1a946:	b084      	sub	sp, #16
   1a948:	af00      	add	r7, sp, #0
   1a94a:	60f8      	str	r0, [r7, #12]
   1a94c:	60b9      	str	r1, [r7, #8]
   1a94e:	607a      	str	r2, [r7, #4]
#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE
    // generic message, used also for other argument issues
    (void)f;
    (void)expected;
    (void)given;
    mp_arg_error_terse_mismatch();
   1a950:	f7f2 fca6 	bl	d2a0 <mp_arg_error_terse_mismatch>

0001a954 <mp_setup_code_state>:
// On entry code_state should be allocated somewhere (stack/heap) and
// contain the following valid entries:
//    - code_state->fun_bc should contain a pointer to the function object
//    - code_state->ip should contain the offset in bytes from the pointer
//      code_state->fun_bc->bytecode to the entry n_state (0 for bytecode, non-zero for native)
void mp_setup_code_state(mp_code_state_t *code_state, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1a954:	b590      	push	{r4, r7, lr}
   1a956:	b09b      	sub	sp, #108	; 0x6c
   1a958:	af00      	add	r7, sp, #0
   1a95a:	60f8      	str	r0, [r7, #12]
   1a95c:	60b9      	str	r1, [r7, #8]
   1a95e:	607a      	str	r2, [r7, #4]
   1a960:	603b      	str	r3, [r7, #0]
    // This function is pretty complicated.  It's main aim is to be efficient in speed and RAM
    // usage for the common case of positional only args.

    // get the function object that we want to set up (could be bytecode or native code)
    mp_obj_fun_bc_t *self = code_state->fun_bc;
   1a962:	68fb      	ldr	r3, [r7, #12]
   1a964:	681b      	ldr	r3, [r3, #0]
   1a966:	637b      	str	r3, [r7, #52]	; 0x34

    // ip comes in as an offset into bytecode, so turn it into a true pointer
    code_state->ip = self->bytecode + (size_t)code_state->ip;
   1a968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a96a:	689b      	ldr	r3, [r3, #8]
   1a96c:	68fa      	ldr	r2, [r7, #12]
   1a96e:	6852      	ldr	r2, [r2, #4]
   1a970:	441a      	add	r2, r3
   1a972:	68fb      	ldr	r3, [r7, #12]
   1a974:	605a      	str	r2, [r3, #4]
    #if MICROPY_STACKLESS
    code_state->prev = NULL;
    #endif

    // get params
    size_t n_state = mp_decode_uint(&code_state->ip);
   1a976:	68fb      	ldr	r3, [r7, #12]
   1a978:	3304      	adds	r3, #4
   1a97a:	4618      	mov	r0, r3
   1a97c:	f7ff ff9c 	bl	1a8b8 <mp_decode_uint>
   1a980:	6338      	str	r0, [r7, #48]	; 0x30
    code_state->ip = mp_decode_uint_skip(code_state->ip); // skip n_exc_stack
   1a982:	68fb      	ldr	r3, [r7, #12]
   1a984:	685b      	ldr	r3, [r3, #4]
   1a986:	4618      	mov	r0, r3
   1a988:	f7ff ffc8 	bl	1a91c <mp_decode_uint_skip>
   1a98c:	4602      	mov	r2, r0
   1a98e:	68fb      	ldr	r3, [r7, #12]
   1a990:	605a      	str	r2, [r3, #4]
    size_t scope_flags = *code_state->ip++;
   1a992:	68fb      	ldr	r3, [r7, #12]
   1a994:	685b      	ldr	r3, [r3, #4]
   1a996:	1c59      	adds	r1, r3, #1
   1a998:	68fa      	ldr	r2, [r7, #12]
   1a99a:	6051      	str	r1, [r2, #4]
   1a99c:	781b      	ldrb	r3, [r3, #0]
   1a99e:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t n_pos_args = *code_state->ip++;
   1a9a0:	68fb      	ldr	r3, [r7, #12]
   1a9a2:	685b      	ldr	r3, [r3, #4]
   1a9a4:	1c59      	adds	r1, r3, #1
   1a9a6:	68fa      	ldr	r2, [r7, #12]
   1a9a8:	6051      	str	r1, [r2, #4]
   1a9aa:	781b      	ldrb	r3, [r3, #0]
   1a9ac:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t n_kwonly_args = *code_state->ip++;
   1a9ae:	68fb      	ldr	r3, [r7, #12]
   1a9b0:	685b      	ldr	r3, [r3, #4]
   1a9b2:	1c59      	adds	r1, r3, #1
   1a9b4:	68fa      	ldr	r2, [r7, #12]
   1a9b6:	6051      	str	r1, [r2, #4]
   1a9b8:	781b      	ldrb	r3, [r3, #0]
   1a9ba:	627b      	str	r3, [r7, #36]	; 0x24
    size_t n_def_pos_args = *code_state->ip++;
   1a9bc:	68fb      	ldr	r3, [r7, #12]
   1a9be:	685b      	ldr	r3, [r3, #4]
   1a9c0:	1c59      	adds	r1, r3, #1
   1a9c2:	68fa      	ldr	r2, [r7, #12]
   1a9c4:	6051      	str	r1, [r2, #4]
   1a9c6:	781b      	ldrb	r3, [r3, #0]
   1a9c8:	623b      	str	r3, [r7, #32]

    code_state->sp = &code_state->state[0] - 1;
   1a9ca:	68fb      	ldr	r3, [r7, #12]
   1a9cc:	3314      	adds	r3, #20
   1a9ce:	1f1a      	subs	r2, r3, #4
   1a9d0:	68fb      	ldr	r3, [r7, #12]
   1a9d2:	609a      	str	r2, [r3, #8]
    code_state->exc_sp = (mp_exc_stack_t*)(code_state->state + n_state) - 1;
   1a9d4:	68fb      	ldr	r3, [r7, #12]
   1a9d6:	f103 0214 	add.w	r2, r3, #20
   1a9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a9dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a9e0:	3b03      	subs	r3, #3
   1a9e2:	009b      	lsls	r3, r3, #2
   1a9e4:	441a      	add	r2, r3
   1a9e6:	68fb      	ldr	r3, [r7, #12]
   1a9e8:	60da      	str	r2, [r3, #12]

    // zero out the local stack to begin with
    memset(code_state->state, 0, n_state * sizeof(*code_state->state));
   1a9ea:	68fb      	ldr	r3, [r7, #12]
   1a9ec:	f103 0014 	add.w	r0, r3, #20
   1a9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a9f2:	009b      	lsls	r3, r3, #2
   1a9f4:	461a      	mov	r2, r3
   1a9f6:	2100      	movs	r1, #0
   1a9f8:	f002 fa66 	bl	1cec8 <memset>

    const mp_obj_t *kwargs = args + n_args;
   1a9fc:	68bb      	ldr	r3, [r7, #8]
   1a9fe:	009b      	lsls	r3, r3, #2
   1aa00:	683a      	ldr	r2, [r7, #0]
   1aa02:	4413      	add	r3, r2
   1aa04:	61fb      	str	r3, [r7, #28]

    // var_pos_kw_args points to the stack where the var-args tuple, and var-kw dict, should go (if they are needed)
    mp_obj_t *var_pos_kw_args = &code_state->state[n_state - 1 - n_pos_args - n_kwonly_args];
   1aa06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1aa08:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aa0a:	1ad2      	subs	r2, r2, r3
   1aa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aa0e:	1ad3      	subs	r3, r2, r3
   1aa10:	3b01      	subs	r3, #1
   1aa12:	3304      	adds	r3, #4
   1aa14:	009b      	lsls	r3, r3, #2
   1aa16:	68fa      	ldr	r2, [r7, #12]
   1aa18:	4413      	add	r3, r2
   1aa1a:	3304      	adds	r3, #4
   1aa1c:	667b      	str	r3, [r7, #100]	; 0x64

    // check positional arguments

    if (n_args > n_pos_args) {
   1aa1e:	68ba      	ldr	r2, [r7, #8]
   1aa20:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aa22:	429a      	cmp	r2, r3
   1aa24:	d91b      	bls.n	1aa5e <mp_setup_code_state+0x10a>
        // given more than enough arguments
        if ((scope_flags & MP_SCOPE_FLAG_VARARGS) == 0) {
   1aa26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aa28:	f003 0301 	and.w	r3, r3, #1
   1aa2c:	2b00      	cmp	r3, #0
   1aa2e:	d104      	bne.n	1aa3a <mp_setup_code_state+0xe6>
            fun_pos_args_mismatch(self, n_pos_args, n_args);
   1aa30:	68ba      	ldr	r2, [r7, #8]
   1aa32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1aa34:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1aa36:	f7ff ff85 	bl	1a944 <fun_pos_args_mismatch>
        }
        // put extra arguments in varargs tuple
        *var_pos_kw_args-- = mp_obj_new_tuple(n_args - n_pos_args, args + n_pos_args);
   1aa3a:	6e7c      	ldr	r4, [r7, #100]	; 0x64
   1aa3c:	1f23      	subs	r3, r4, #4
   1aa3e:	667b      	str	r3, [r7, #100]	; 0x64
   1aa40:	68ba      	ldr	r2, [r7, #8]
   1aa42:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aa44:	1ad0      	subs	r0, r2, r3
   1aa46:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aa48:	009b      	lsls	r3, r3, #2
   1aa4a:	683a      	ldr	r2, [r7, #0]
   1aa4c:	4413      	add	r3, r2
   1aa4e:	4619      	mov	r1, r3
   1aa50:	f7fb fa8e 	bl	15f70 <mp_obj_new_tuple>
   1aa54:	4603      	mov	r3, r0
   1aa56:	6023      	str	r3, [r4, #0]
        n_args = n_pos_args;
   1aa58:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aa5a:	60bb      	str	r3, [r7, #8]
   1aa5c:	e03c      	b.n	1aad8 <mp_setup_code_state+0x184>
    } else {
        if ((scope_flags & MP_SCOPE_FLAG_VARARGS) != 0) {
   1aa5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aa60:	f003 0301 	and.w	r3, r3, #1
   1aa64:	2b00      	cmp	r3, #0
   1aa66:	d004      	beq.n	1aa72 <mp_setup_code_state+0x11e>
            DEBUG_printf("passing empty tuple as *args\n");
            *var_pos_kw_args-- = mp_const_empty_tuple;
   1aa68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1aa6a:	1f1a      	subs	r2, r3, #4
   1aa6c:	667a      	str	r2, [r7, #100]	; 0x64
   1aa6e:	4aa6      	ldr	r2, [pc, #664]	; (1ad08 <mp_setup_code_state+0x3b4>)
   1aa70:	601a      	str	r2, [r3, #0]
        }
        // Apply processing and check below only if we don't have kwargs,
        // otherwise, kw handling code below has own extensive checks.
        if (n_kw == 0 && (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) == 0) {
   1aa72:	687b      	ldr	r3, [r7, #4]
   1aa74:	2b00      	cmp	r3, #0
   1aa76:	d12f      	bne.n	1aad8 <mp_setup_code_state+0x184>
   1aa78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aa7a:	f003 0308 	and.w	r3, r3, #8
   1aa7e:	2b00      	cmp	r3, #0
   1aa80:	d12a      	bne.n	1aad8 <mp_setup_code_state+0x184>
            if (n_args >= (size_t)(n_pos_args - n_def_pos_args)) {
   1aa82:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1aa84:	6a3b      	ldr	r3, [r7, #32]
   1aa86:	1ad2      	subs	r2, r2, r3
   1aa88:	68bb      	ldr	r3, [r7, #8]
   1aa8a:	429a      	cmp	r2, r3
   1aa8c:	d81c      	bhi.n	1aac8 <mp_setup_code_state+0x174>
                // given enough arguments, but may need to use some default arguments
                for (size_t i = n_args; i < n_pos_args; i++) {
   1aa8e:	68bb      	ldr	r3, [r7, #8]
   1aa90:	663b      	str	r3, [r7, #96]	; 0x60
   1aa92:	e014      	b.n	1aabe <mp_setup_code_state+0x16a>
                    code_state->state[n_state - 1 - i] = self->extra_args[i - (n_pos_args - n_def_pos_args)];
   1aa94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1aa96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1aa98:	1ad3      	subs	r3, r2, r3
   1aa9a:	3b01      	subs	r3, #1
   1aa9c:	6a39      	ldr	r1, [r7, #32]
   1aa9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1aaa0:	1a89      	subs	r1, r1, r2
   1aaa2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1aaa4:	4411      	add	r1, r2
   1aaa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1aaa8:	3104      	adds	r1, #4
   1aaaa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   1aaae:	68f9      	ldr	r1, [r7, #12]
   1aab0:	3304      	adds	r3, #4
   1aab2:	009b      	lsls	r3, r3, #2
   1aab4:	440b      	add	r3, r1
   1aab6:	605a      	str	r2, [r3, #4]
                for (size_t i = n_args; i < n_pos_args; i++) {
   1aab8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1aaba:	3301      	adds	r3, #1
   1aabc:	663b      	str	r3, [r7, #96]	; 0x60
   1aabe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1aac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aac2:	429a      	cmp	r2, r3
   1aac4:	d3e6      	bcc.n	1aa94 <mp_setup_code_state+0x140>
   1aac6:	e007      	b.n	1aad8 <mp_setup_code_state+0x184>
                }
            } else {
                fun_pos_args_mismatch(self, n_pos_args - n_def_pos_args, n_args);
   1aac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1aaca:	6a3b      	ldr	r3, [r7, #32]
   1aacc:	1ad3      	subs	r3, r2, r3
   1aace:	68ba      	ldr	r2, [r7, #8]
   1aad0:	4619      	mov	r1, r3
   1aad2:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1aad4:	f7ff ff36 	bl	1a944 <fun_pos_args_mismatch>
            }
        }
    }

    // copy positional args into state
    for (size_t i = 0; i < n_args; i++) {
   1aad8:	2300      	movs	r3, #0
   1aada:	65fb      	str	r3, [r7, #92]	; 0x5c
   1aadc:	e010      	b.n	1ab00 <mp_setup_code_state+0x1ac>
        code_state->state[n_state - 1 - i] = args[i];
   1aade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1aae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1aae2:	1ad3      	subs	r3, r2, r3
   1aae4:	3b01      	subs	r3, #1
   1aae6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1aae8:	0092      	lsls	r2, r2, #2
   1aaea:	6839      	ldr	r1, [r7, #0]
   1aaec:	440a      	add	r2, r1
   1aaee:	6812      	ldr	r2, [r2, #0]
   1aaf0:	68f9      	ldr	r1, [r7, #12]
   1aaf2:	3304      	adds	r3, #4
   1aaf4:	009b      	lsls	r3, r3, #2
   1aaf6:	440b      	add	r3, r1
   1aaf8:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < n_args; i++) {
   1aafa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1aafc:	3301      	adds	r3, #1
   1aafe:	65fb      	str	r3, [r7, #92]	; 0x5c
   1ab00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1ab02:	68bb      	ldr	r3, [r7, #8]
   1ab04:	429a      	cmp	r2, r3
   1ab06:	d3ea      	bcc.n	1aade <mp_setup_code_state+0x18a>
    }

    // check keyword arguments

    if (n_kw != 0 || (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   1ab08:	687b      	ldr	r3, [r7, #4]
   1ab0a:	2b00      	cmp	r3, #0
   1ab0c:	d105      	bne.n	1ab1a <mp_setup_code_state+0x1c6>
   1ab0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ab10:	f003 0308 	and.w	r3, r3, #8
   1ab14:	2b00      	cmp	r3, #0
   1ab16:	f000 811a 	beq.w	1ad4e <mp_setup_code_state+0x3fa>
        DEBUG_printf("Initial args: ");
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);

        mp_obj_t dict = MP_OBJ_NULL;
   1ab1a:	2300      	movs	r3, #0
   1ab1c:	65bb      	str	r3, [r7, #88]	; 0x58
        if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
   1ab1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ab20:	f003 0302 	and.w	r3, r3, #2
   1ab24:	2b00      	cmp	r3, #0
   1ab26:	d006      	beq.n	1ab36 <mp_setup_code_state+0x1e2>
            dict = mp_obj_new_dict(n_kw); // TODO: better go conservative with 0?
   1ab28:	6878      	ldr	r0, [r7, #4]
   1ab2a:	f7f4 fb83 	bl	f234 <mp_obj_new_dict>
   1ab2e:	65b8      	str	r0, [r7, #88]	; 0x58
            *var_pos_kw_args = dict;
   1ab30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1ab32:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1ab34:	601a      	str	r2, [r3, #0]
        }

        // get pointer to arg_names array
        const mp_obj_t *arg_names = (const mp_obj_t*)self->const_table;
   1ab36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ab38:	68db      	ldr	r3, [r3, #12]
   1ab3a:	61bb      	str	r3, [r7, #24]

        for (size_t i = 0; i < n_kw; i++) {
   1ab3c:	2300      	movs	r3, #0
   1ab3e:	657b      	str	r3, [r7, #84]	; 0x54
   1ab40:	e059      	b.n	1abf6 <mp_setup_code_state+0x2a2>
            // the keys in kwargs are expected to be qstr objects
            mp_obj_t wanted_arg_name = kwargs[2 * i];
   1ab42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1ab44:	00db      	lsls	r3, r3, #3
   1ab46:	69fa      	ldr	r2, [r7, #28]
   1ab48:	4413      	add	r3, r2
   1ab4a:	681b      	ldr	r3, [r3, #0]
   1ab4c:	617b      	str	r3, [r7, #20]
            for (size_t j = 0; j < n_pos_args + n_kwonly_args; j++) {
   1ab4e:	2300      	movs	r3, #0
   1ab50:	653b      	str	r3, [r7, #80]	; 0x50
   1ab52:	e030      	b.n	1abb6 <mp_setup_code_state+0x262>
                if (wanted_arg_name == arg_names[j]) {
   1ab54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ab56:	009b      	lsls	r3, r3, #2
   1ab58:	69ba      	ldr	r2, [r7, #24]
   1ab5a:	4413      	add	r3, r2
   1ab5c:	681a      	ldr	r2, [r3, #0]
   1ab5e:	697b      	ldr	r3, [r7, #20]
   1ab60:	429a      	cmp	r2, r3
   1ab62:	d125      	bne.n	1abb0 <mp_setup_code_state+0x25c>
                    if (code_state->state[n_state - 1 - j] != MP_OBJ_NULL) {
   1ab64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1ab66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ab68:	1ad3      	subs	r3, r2, r3
   1ab6a:	3b01      	subs	r3, #1
   1ab6c:	68fa      	ldr	r2, [r7, #12]
   1ab6e:	3304      	adds	r3, #4
   1ab70:	009b      	lsls	r3, r3, #2
   1ab72:	4413      	add	r3, r2
   1ab74:	685b      	ldr	r3, [r3, #4]
   1ab76:	2b00      	cmp	r3, #0
   1ab78:	d00a      	beq.n	1ab90 <mp_setup_code_state+0x23c>
                        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1ab7a:	697b      	ldr	r3, [r7, #20]
   1ab7c:	089b      	lsrs	r3, r3, #2
   1ab7e:	461a      	mov	r2, r3
   1ab80:	4962      	ldr	r1, [pc, #392]	; (1ad0c <mp_setup_code_state+0x3b8>)
   1ab82:	4863      	ldr	r0, [pc, #396]	; (1ad10 <mp_setup_code_state+0x3bc>)
   1ab84:	f7f4 fd9e 	bl	f6c4 <mp_obj_new_exception_msg_varg>
   1ab88:	4603      	mov	r3, r0
   1ab8a:	4618      	mov	r0, r3
   1ab8c:	f7e5 fba8 	bl	2e0 <nlr_jump>
                            "function got multiple values for argument '%q'", MP_OBJ_QSTR_VALUE(wanted_arg_name)));
                    }
                    code_state->state[n_state - 1 - j] = kwargs[2 * i + 1];
   1ab90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1ab92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ab94:	1ad3      	subs	r3, r2, r3
   1ab96:	3b01      	subs	r3, #1
   1ab98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1ab9a:	00d2      	lsls	r2, r2, #3
   1ab9c:	3204      	adds	r2, #4
   1ab9e:	69f9      	ldr	r1, [r7, #28]
   1aba0:	440a      	add	r2, r1
   1aba2:	6812      	ldr	r2, [r2, #0]
   1aba4:	68f9      	ldr	r1, [r7, #12]
   1aba6:	3304      	adds	r3, #4
   1aba8:	009b      	lsls	r3, r3, #2
   1abaa:	440b      	add	r3, r1
   1abac:	605a      	str	r2, [r3, #4]
                    goto continue2;
   1abae:	e01f      	b.n	1abf0 <mp_setup_code_state+0x29c>
            for (size_t j = 0; j < n_pos_args + n_kwonly_args; j++) {
   1abb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1abb2:	3301      	adds	r3, #1
   1abb4:	653b      	str	r3, [r7, #80]	; 0x50
   1abb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1abb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1abba:	441a      	add	r2, r3
   1abbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1abbe:	429a      	cmp	r2, r3
   1abc0:	d8c8      	bhi.n	1ab54 <mp_setup_code_state+0x200>
                }
            }
            // Didn't find name match with positional args
            if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) == 0) {
   1abc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1abc4:	f003 0302 	and.w	r3, r3, #2
   1abc8:	2b00      	cmp	r3, #0
   1abca:	d102      	bne.n	1abd2 <mp_setup_code_state+0x27e>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    mp_raise_TypeError("unexpected keyword argument");
   1abcc:	4851      	ldr	r0, [pc, #324]	; (1ad14 <mp_setup_code_state+0x3c0>)
   1abce:	f7f2 f9f3 	bl	cfb8 <mp_raise_TypeError>
                } else {
                    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                        "unexpected keyword argument '%q'", MP_OBJ_QSTR_VALUE(wanted_arg_name)));
                }
            }
            mp_obj_dict_store(dict, kwargs[2 * i], kwargs[2 * i + 1]);
   1abd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1abd4:	00db      	lsls	r3, r3, #3
   1abd6:	69fa      	ldr	r2, [r7, #28]
   1abd8:	4413      	add	r3, r2
   1abda:	6819      	ldr	r1, [r3, #0]
   1abdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1abde:	00db      	lsls	r3, r3, #3
   1abe0:	3304      	adds	r3, #4
   1abe2:	69fa      	ldr	r2, [r7, #28]
   1abe4:	4413      	add	r3, r2
   1abe6:	681b      	ldr	r3, [r3, #0]
   1abe8:	461a      	mov	r2, r3
   1abea:	6db8      	ldr	r0, [r7, #88]	; 0x58
   1abec:	f7f4 fb44 	bl	f278 <mp_obj_dict_store>
        for (size_t i = 0; i < n_kw; i++) {
   1abf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1abf2:	3301      	adds	r3, #1
   1abf4:	657b      	str	r3, [r7, #84]	; 0x54
   1abf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1abf8:	687b      	ldr	r3, [r7, #4]
   1abfa:	429a      	cmp	r2, r3
   1abfc:	d3a1      	bcc.n	1ab42 <mp_setup_code_state+0x1ee>

        DEBUG_printf("Args with kws flattened: ");
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);

        // fill in defaults for positional args
        mp_obj_t *d = &code_state->state[n_state - n_pos_args];
   1abfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1ac00:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ac02:	1ad3      	subs	r3, r2, r3
   1ac04:	3304      	adds	r3, #4
   1ac06:	009b      	lsls	r3, r3, #2
   1ac08:	68fa      	ldr	r2, [r7, #12]
   1ac0a:	4413      	add	r3, r2
   1ac0c:	3304      	adds	r3, #4
   1ac0e:	64fb      	str	r3, [r7, #76]	; 0x4c
        mp_obj_t *s = &self->extra_args[n_def_pos_args - 1];
   1ac10:	6a3b      	ldr	r3, [r7, #32]
   1ac12:	3b01      	subs	r3, #1
   1ac14:	3304      	adds	r3, #4
   1ac16:	009b      	lsls	r3, r3, #2
   1ac18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1ac1a:	4413      	add	r3, r2
   1ac1c:	64bb      	str	r3, [r7, #72]	; 0x48
        for (size_t i = n_def_pos_args; i > 0; i--, d++, s--) {
   1ac1e:	6a3b      	ldr	r3, [r7, #32]
   1ac20:	647b      	str	r3, [r7, #68]	; 0x44
   1ac22:	e010      	b.n	1ac46 <mp_setup_code_state+0x2f2>
            if (*d == MP_OBJ_NULL) {
   1ac24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ac26:	681b      	ldr	r3, [r3, #0]
   1ac28:	2b00      	cmp	r3, #0
   1ac2a:	d103      	bne.n	1ac34 <mp_setup_code_state+0x2e0>
                *d = *s;
   1ac2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1ac2e:	681a      	ldr	r2, [r3, #0]
   1ac30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ac32:	601a      	str	r2, [r3, #0]
        for (size_t i = n_def_pos_args; i > 0; i--, d++, s--) {
   1ac34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1ac36:	3b01      	subs	r3, #1
   1ac38:	647b      	str	r3, [r7, #68]	; 0x44
   1ac3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ac3c:	3304      	adds	r3, #4
   1ac3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   1ac40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1ac42:	3b04      	subs	r3, #4
   1ac44:	64bb      	str	r3, [r7, #72]	; 0x48
   1ac46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1ac48:	2b00      	cmp	r3, #0
   1ac4a:	d1eb      	bne.n	1ac24 <mp_setup_code_state+0x2d0>

        DEBUG_printf("Args after filling default positional: ");
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);

        // Check that all mandatory positional args are specified
        while (d < &code_state->state[n_state]) {
   1ac4c:	e018      	b.n	1ac80 <mp_setup_code_state+0x32c>
            if (*d++ == MP_OBJ_NULL) {
   1ac4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ac50:	1d1a      	adds	r2, r3, #4
   1ac52:	64fa      	str	r2, [r7, #76]	; 0x4c
   1ac54:	681b      	ldr	r3, [r3, #0]
   1ac56:	2b00      	cmp	r3, #0
   1ac58:	d112      	bne.n	1ac80 <mp_setup_code_state+0x32c>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1ac5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ac5c:	3304      	adds	r3, #4
   1ac5e:	009b      	lsls	r3, r3, #2
   1ac60:	68fa      	ldr	r2, [r7, #12]
   1ac62:	4413      	add	r3, r2
   1ac64:	3304      	adds	r3, #4
   1ac66:	461a      	mov	r2, r3
   1ac68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ac6a:	1ad3      	subs	r3, r2, r3
   1ac6c:	109b      	asrs	r3, r3, #2
   1ac6e:	461a      	mov	r2, r3
   1ac70:	4929      	ldr	r1, [pc, #164]	; (1ad18 <mp_setup_code_state+0x3c4>)
   1ac72:	4827      	ldr	r0, [pc, #156]	; (1ad10 <mp_setup_code_state+0x3bc>)
   1ac74:	f7f4 fd26 	bl	f6c4 <mp_obj_new_exception_msg_varg>
   1ac78:	4603      	mov	r3, r0
   1ac7a:	4618      	mov	r0, r3
   1ac7c:	f7e5 fb30 	bl	2e0 <nlr_jump>
        while (d < &code_state->state[n_state]) {
   1ac80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ac82:	3304      	adds	r3, #4
   1ac84:	009b      	lsls	r3, r3, #2
   1ac86:	68fa      	ldr	r2, [r7, #12]
   1ac88:	4413      	add	r3, r2
   1ac8a:	1d1a      	adds	r2, r3, #4
   1ac8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ac8e:	429a      	cmp	r2, r3
   1ac90:	d8dd      	bhi.n	1ac4e <mp_setup_code_state+0x2fa>
            }
        }

        // Check that all mandatory keyword args are specified
        // Fill in default kw args if we have them
        for (size_t i = 0; i < n_kwonly_args; i++) {
   1ac92:	2300      	movs	r3, #0
   1ac94:	643b      	str	r3, [r7, #64]	; 0x40
   1ac96:	e055      	b.n	1ad44 <mp_setup_code_state+0x3f0>
            if (code_state->state[n_state - 1 - n_pos_args - i] == MP_OBJ_NULL) {
   1ac98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1ac9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ac9c:	1ad2      	subs	r2, r2, r3
   1ac9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1aca0:	1ad3      	subs	r3, r2, r3
   1aca2:	3b01      	subs	r3, #1
   1aca4:	68fa      	ldr	r2, [r7, #12]
   1aca6:	3304      	adds	r3, #4
   1aca8:	009b      	lsls	r3, r3, #2
   1acaa:	4413      	add	r3, r2
   1acac:	685b      	ldr	r3, [r3, #4]
   1acae:	2b00      	cmp	r3, #0
   1acb0:	d145      	bne.n	1ad3e <mp_setup_code_state+0x3ea>
                mp_map_elem_t *elem = NULL;
   1acb2:	2300      	movs	r3, #0
   1acb4:	63fb      	str	r3, [r7, #60]	; 0x3c
                if ((scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   1acb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1acb8:	f003 0308 	and.w	r3, r3, #8
   1acbc:	2b00      	cmp	r3, #0
   1acbe:	d011      	beq.n	1ace4 <mp_setup_code_state+0x390>
                    elem = mp_map_lookup(&((mp_obj_dict_t*)MP_OBJ_TO_PTR(self->extra_args[n_def_pos_args]))->map, arg_names[n_pos_args + i], MP_MAP_LOOKUP);
   1acc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1acc2:	6a3a      	ldr	r2, [r7, #32]
   1acc4:	3204      	adds	r2, #4
   1acc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1acca:	1d18      	adds	r0, r3, #4
   1accc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1acce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1acd0:	4413      	add	r3, r2
   1acd2:	009b      	lsls	r3, r3, #2
   1acd4:	69ba      	ldr	r2, [r7, #24]
   1acd6:	4413      	add	r3, r2
   1acd8:	681b      	ldr	r3, [r3, #0]
   1acda:	2200      	movs	r2, #0
   1acdc:	4619      	mov	r1, r3
   1acde:	f7f2 fc2f 	bl	d540 <mp_map_lookup>
   1ace2:	63f8      	str	r0, [r7, #60]	; 0x3c
                }
                if (elem != NULL) {
   1ace4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ace6:	2b00      	cmp	r3, #0
   1ace8:	d018      	beq.n	1ad1c <mp_setup_code_state+0x3c8>
                    code_state->state[n_state - 1 - n_pos_args - i] = elem->value;
   1acea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1acec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1acee:	1ad2      	subs	r2, r2, r3
   1acf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1acf2:	1ad3      	subs	r3, r2, r3
   1acf4:	3b01      	subs	r3, #1
   1acf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1acf8:	6852      	ldr	r2, [r2, #4]
   1acfa:	68f9      	ldr	r1, [r7, #12]
   1acfc:	3304      	adds	r3, #4
   1acfe:	009b      	lsls	r3, r3, #2
   1ad00:	440b      	add	r3, r1
   1ad02:	605a      	str	r2, [r3, #4]
   1ad04:	e01b      	b.n	1ad3e <mp_setup_code_state+0x3ea>
   1ad06:	bf00      	nop
   1ad08:	00023e28 	.word	0x00023e28
   1ad0c:	00024c34 	.word	0x00024c34
   1ad10:	0002276c 	.word	0x0002276c
   1ad14:	00024c64 	.word	0x00024c64
   1ad18:	00024c80 	.word	0x00024c80
                } else {
                    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1ad1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ad1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ad20:	4413      	add	r3, r2
   1ad22:	009b      	lsls	r3, r3, #2
   1ad24:	69ba      	ldr	r2, [r7, #24]
   1ad26:	4413      	add	r3, r2
   1ad28:	681b      	ldr	r3, [r3, #0]
   1ad2a:	089b      	lsrs	r3, r3, #2
   1ad2c:	461a      	mov	r2, r3
   1ad2e:	4928      	ldr	r1, [pc, #160]	; (1add0 <mp_setup_code_state+0x47c>)
   1ad30:	4828      	ldr	r0, [pc, #160]	; (1add4 <mp_setup_code_state+0x480>)
   1ad32:	f7f4 fcc7 	bl	f6c4 <mp_obj_new_exception_msg_varg>
   1ad36:	4603      	mov	r3, r0
   1ad38:	4618      	mov	r0, r3
   1ad3a:	f7e5 fad1 	bl	2e0 <nlr_jump>
        for (size_t i = 0; i < n_kwonly_args; i++) {
   1ad3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ad40:	3301      	adds	r3, #1
   1ad42:	643b      	str	r3, [r7, #64]	; 0x40
   1ad44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1ad46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ad48:	429a      	cmp	r2, r3
   1ad4a:	d3a5      	bcc.n	1ac98 <mp_setup_code_state+0x344>
    if (n_kw != 0 || (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   1ad4c:	e010      	b.n	1ad70 <mp_setup_code_state+0x41c>
            }
        }

    } else {
        // no keyword arguments given
        if (n_kwonly_args != 0) {
   1ad4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ad50:	2b00      	cmp	r3, #0
   1ad52:	d002      	beq.n	1ad5a <mp_setup_code_state+0x406>
            mp_raise_TypeError("function missing keyword-only argument");
   1ad54:	4820      	ldr	r0, [pc, #128]	; (1add8 <mp_setup_code_state+0x484>)
   1ad56:	f7f2 f92f 	bl	cfb8 <mp_raise_TypeError>
        }
        if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
   1ad5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ad5c:	f003 0302 	and.w	r3, r3, #2
   1ad60:	2b00      	cmp	r3, #0
   1ad62:	d005      	beq.n	1ad70 <mp_setup_code_state+0x41c>
            *var_pos_kw_args = mp_obj_new_dict(0);
   1ad64:	2000      	movs	r0, #0
   1ad66:	f7f4 fa65 	bl	f234 <mp_obj_new_dict>
   1ad6a:	4602      	mov	r2, r0
   1ad6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1ad6e:	601a      	str	r2, [r3, #0]
        }
    }

    // get the ip and skip argument names
    const byte *ip = code_state->ip;
   1ad70:	68fb      	ldr	r3, [r7, #12]
   1ad72:	685b      	ldr	r3, [r3, #4]
   1ad74:	63bb      	str	r3, [r7, #56]	; 0x38

    // jump over code info (source file and line-number mapping)
    ip += mp_decode_uint_value(ip);
   1ad76:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1ad78:	f7ff fdc2 	bl	1a900 <mp_decode_uint_value>
   1ad7c:	4602      	mov	r2, r0
   1ad7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ad80:	4413      	add	r3, r2
   1ad82:	63bb      	str	r3, [r7, #56]	; 0x38

    // bytecode prelude: initialise closed over variables
    size_t local_num;
    while ((local_num = *ip++) != 255) {
   1ad84:	e015      	b.n	1adb2 <mp_setup_code_state+0x45e>
        code_state->state[n_state - 1 - local_num] =
   1ad86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1ad88:	693b      	ldr	r3, [r7, #16]
   1ad8a:	1ad3      	subs	r3, r2, r3
   1ad8c:	1e5c      	subs	r4, r3, #1
            mp_obj_new_cell(code_state->state[n_state - 1 - local_num]);
   1ad8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1ad90:	693b      	ldr	r3, [r7, #16]
   1ad92:	1ad3      	subs	r3, r2, r3
   1ad94:	3b01      	subs	r3, #1
   1ad96:	68fa      	ldr	r2, [r7, #12]
   1ad98:	3304      	adds	r3, #4
   1ad9a:	009b      	lsls	r3, r3, #2
   1ad9c:	4413      	add	r3, r2
   1ad9e:	685b      	ldr	r3, [r3, #4]
   1ada0:	4618      	mov	r0, r3
   1ada2:	f7f3 fafb 	bl	e39c <mp_obj_new_cell>
   1ada6:	4601      	mov	r1, r0
        code_state->state[n_state - 1 - local_num] =
   1ada8:	68fa      	ldr	r2, [r7, #12]
   1adaa:	1d23      	adds	r3, r4, #4
   1adac:	009b      	lsls	r3, r3, #2
   1adae:	4413      	add	r3, r2
   1adb0:	6059      	str	r1, [r3, #4]
    while ((local_num = *ip++) != 255) {
   1adb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1adb4:	1c5a      	adds	r2, r3, #1
   1adb6:	63ba      	str	r2, [r7, #56]	; 0x38
   1adb8:	781b      	ldrb	r3, [r3, #0]
   1adba:	613b      	str	r3, [r7, #16]
   1adbc:	693b      	ldr	r3, [r7, #16]
   1adbe:	2bff      	cmp	r3, #255	; 0xff
   1adc0:	d1e1      	bne.n	1ad86 <mp_setup_code_state+0x432>
    }

    // now that we skipped over the prelude, set the ip for the VM
    code_state->ip = ip;
   1adc2:	68fb      	ldr	r3, [r7, #12]
   1adc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1adc6:	605a      	str	r2, [r3, #4]

    DEBUG_printf("Calling: n_pos_args=%d, n_kwonly_args=%d\n", n_pos_args, n_kwonly_args);
    dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);
    dump_args(code_state->state, n_state);
}
   1adc8:	bf00      	nop
   1adca:	376c      	adds	r7, #108	; 0x6c
   1adcc:	46bd      	mov	sp, r7
   1adce:	bd90      	pop	{r4, r7, pc}
   1add0:	00024cb4 	.word	0x00024cb4
   1add4:	0002276c 	.word	0x0002276c
   1add8:	00024ce4 	.word	0x00024ce4

0001addc <str_startswith_word>:
#include "py/builtin.h"
#include "py/repl.h"

#if MICROPY_HELPER_REPL

STATIC bool str_startswith_word(const char *str, const char *head) {
   1addc:	b580      	push	{r7, lr}
   1adde:	b084      	sub	sp, #16
   1ade0:	af00      	add	r7, sp, #0
   1ade2:	6078      	str	r0, [r7, #4]
   1ade4:	6039      	str	r1, [r7, #0]
    size_t i;
    for (i = 0; str[i] && head[i]; i++) {
   1ade6:	2300      	movs	r3, #0
   1ade8:	60fb      	str	r3, [r7, #12]
   1adea:	e00e      	b.n	1ae0a <str_startswith_word+0x2e>
        if (str[i] != head[i]) {
   1adec:	687a      	ldr	r2, [r7, #4]
   1adee:	68fb      	ldr	r3, [r7, #12]
   1adf0:	4413      	add	r3, r2
   1adf2:	781a      	ldrb	r2, [r3, #0]
   1adf4:	6839      	ldr	r1, [r7, #0]
   1adf6:	68fb      	ldr	r3, [r7, #12]
   1adf8:	440b      	add	r3, r1
   1adfa:	781b      	ldrb	r3, [r3, #0]
   1adfc:	429a      	cmp	r2, r3
   1adfe:	d001      	beq.n	1ae04 <str_startswith_word+0x28>
            return false;
   1ae00:	2300      	movs	r3, #0
   1ae02:	e02d      	b.n	1ae60 <str_startswith_word+0x84>
    for (i = 0; str[i] && head[i]; i++) {
   1ae04:	68fb      	ldr	r3, [r7, #12]
   1ae06:	3301      	adds	r3, #1
   1ae08:	60fb      	str	r3, [r7, #12]
   1ae0a:	687a      	ldr	r2, [r7, #4]
   1ae0c:	68fb      	ldr	r3, [r7, #12]
   1ae0e:	4413      	add	r3, r2
   1ae10:	781b      	ldrb	r3, [r3, #0]
   1ae12:	2b00      	cmp	r3, #0
   1ae14:	d005      	beq.n	1ae22 <str_startswith_word+0x46>
   1ae16:	683a      	ldr	r2, [r7, #0]
   1ae18:	68fb      	ldr	r3, [r7, #12]
   1ae1a:	4413      	add	r3, r2
   1ae1c:	781b      	ldrb	r3, [r3, #0]
   1ae1e:	2b00      	cmp	r3, #0
   1ae20:	d1e4      	bne.n	1adec <str_startswith_word+0x10>
        }
    }
    return head[i] == '\0' && (str[i] == '\0' || !unichar_isident(str[i]));
   1ae22:	683a      	ldr	r2, [r7, #0]
   1ae24:	68fb      	ldr	r3, [r7, #12]
   1ae26:	4413      	add	r3, r2
   1ae28:	781b      	ldrb	r3, [r3, #0]
   1ae2a:	2b00      	cmp	r3, #0
   1ae2c:	d114      	bne.n	1ae58 <str_startswith_word+0x7c>
   1ae2e:	687a      	ldr	r2, [r7, #4]
   1ae30:	68fb      	ldr	r3, [r7, #12]
   1ae32:	4413      	add	r3, r2
   1ae34:	781b      	ldrb	r3, [r3, #0]
   1ae36:	2b00      	cmp	r3, #0
   1ae38:	d00c      	beq.n	1ae54 <str_startswith_word+0x78>
   1ae3a:	687a      	ldr	r2, [r7, #4]
   1ae3c:	68fb      	ldr	r3, [r7, #12]
   1ae3e:	4413      	add	r3, r2
   1ae40:	781b      	ldrb	r3, [r3, #0]
   1ae42:	4618      	mov	r0, r3
   1ae44:	f7e7 fbde 	bl	2604 <unichar_isident>
   1ae48:	4603      	mov	r3, r0
   1ae4a:	f083 0301 	eor.w	r3, r3, #1
   1ae4e:	b2db      	uxtb	r3, r3
   1ae50:	2b00      	cmp	r3, #0
   1ae52:	d001      	beq.n	1ae58 <str_startswith_word+0x7c>
   1ae54:	2301      	movs	r3, #1
   1ae56:	e000      	b.n	1ae5a <str_startswith_word+0x7e>
   1ae58:	2300      	movs	r3, #0
   1ae5a:	f003 0301 	and.w	r3, r3, #1
   1ae5e:	b2db      	uxtb	r3, r3
}
   1ae60:	4618      	mov	r0, r3
   1ae62:	3710      	adds	r7, #16
   1ae64:	46bd      	mov	sp, r7
   1ae66:	bd80      	pop	{r7, pc}

0001ae68 <mp_repl_continue_with_input>:

bool mp_repl_continue_with_input(const char *input) {
   1ae68:	b580      	push	{r7, lr}
   1ae6a:	b088      	sub	sp, #32
   1ae6c:	af00      	add	r7, sp, #0
   1ae6e:	6078      	str	r0, [r7, #4]
    // check for blank input
    if (input[0] == '\0') {
   1ae70:	687b      	ldr	r3, [r7, #4]
   1ae72:	781b      	ldrb	r3, [r3, #0]
   1ae74:	2b00      	cmp	r3, #0
   1ae76:	d101      	bne.n	1ae7c <mp_repl_continue_with_input+0x14>
        return false;
   1ae78:	2300      	movs	r3, #0
   1ae7a:	e10c      	b.n	1b096 <mp_repl_continue_with_input+0x22e>
    }

    // check if input starts with a certain keyword
    bool starts_with_compound_keyword =
           input[0] == '@'
   1ae7c:	687b      	ldr	r3, [r7, #4]
   1ae7e:	781b      	ldrb	r3, [r3, #0]
        || str_startswith_word(input, "while")
        || str_startswith_word(input, "for")
        || str_startswith_word(input, "try")
        || str_startswith_word(input, "with")
        || str_startswith_word(input, "def")
        || str_startswith_word(input, "class")
   1ae80:	2b40      	cmp	r3, #64	; 0x40
   1ae82:	d030      	beq.n	1aee6 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "if")
   1ae84:	4986      	ldr	r1, [pc, #536]	; (1b0a0 <mp_repl_continue_with_input+0x238>)
   1ae86:	6878      	ldr	r0, [r7, #4]
   1ae88:	f7ff ffa8 	bl	1addc <str_startswith_word>
   1ae8c:	4603      	mov	r3, r0
   1ae8e:	2b00      	cmp	r3, #0
   1ae90:	d129      	bne.n	1aee6 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "while")
   1ae92:	4984      	ldr	r1, [pc, #528]	; (1b0a4 <mp_repl_continue_with_input+0x23c>)
   1ae94:	6878      	ldr	r0, [r7, #4]
   1ae96:	f7ff ffa1 	bl	1addc <str_startswith_word>
   1ae9a:	4603      	mov	r3, r0
   1ae9c:	2b00      	cmp	r3, #0
   1ae9e:	d122      	bne.n	1aee6 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "for")
   1aea0:	4981      	ldr	r1, [pc, #516]	; (1b0a8 <mp_repl_continue_with_input+0x240>)
   1aea2:	6878      	ldr	r0, [r7, #4]
   1aea4:	f7ff ff9a 	bl	1addc <str_startswith_word>
   1aea8:	4603      	mov	r3, r0
   1aeaa:	2b00      	cmp	r3, #0
   1aeac:	d11b      	bne.n	1aee6 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "try")
   1aeae:	497f      	ldr	r1, [pc, #508]	; (1b0ac <mp_repl_continue_with_input+0x244>)
   1aeb0:	6878      	ldr	r0, [r7, #4]
   1aeb2:	f7ff ff93 	bl	1addc <str_startswith_word>
   1aeb6:	4603      	mov	r3, r0
   1aeb8:	2b00      	cmp	r3, #0
   1aeba:	d114      	bne.n	1aee6 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "with")
   1aebc:	497c      	ldr	r1, [pc, #496]	; (1b0b0 <mp_repl_continue_with_input+0x248>)
   1aebe:	6878      	ldr	r0, [r7, #4]
   1aec0:	f7ff ff8c 	bl	1addc <str_startswith_word>
   1aec4:	4603      	mov	r3, r0
   1aec6:	2b00      	cmp	r3, #0
   1aec8:	d10d      	bne.n	1aee6 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "def")
   1aeca:	497a      	ldr	r1, [pc, #488]	; (1b0b4 <mp_repl_continue_with_input+0x24c>)
   1aecc:	6878      	ldr	r0, [r7, #4]
   1aece:	f7ff ff85 	bl	1addc <str_startswith_word>
   1aed2:	4603      	mov	r3, r0
   1aed4:	2b00      	cmp	r3, #0
   1aed6:	d106      	bne.n	1aee6 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "class")
   1aed8:	4977      	ldr	r1, [pc, #476]	; (1b0b8 <mp_repl_continue_with_input+0x250>)
   1aeda:	6878      	ldr	r0, [r7, #4]
   1aedc:	f7ff ff7e 	bl	1addc <str_startswith_word>
   1aee0:	4603      	mov	r3, r0
   1aee2:	2b00      	cmp	r3, #0
   1aee4:	d001      	beq.n	1aeea <mp_repl_continue_with_input+0x82>
   1aee6:	2301      	movs	r3, #1
   1aee8:	e000      	b.n	1aeec <mp_repl_continue_with_input+0x84>
   1aeea:	2300      	movs	r3, #0
    bool starts_with_compound_keyword =
   1aeec:	72fb      	strb	r3, [r7, #11]
   1aeee:	7afb      	ldrb	r3, [r7, #11]
   1aef0:	f003 0301 	and.w	r3, r3, #1
   1aef4:	72fb      	strb	r3, [r7, #11]
    #define Q_NONE (0)
    #define Q_1_SINGLE (1)
    #define Q_1_DOUBLE (2)
    #define Q_3_SINGLE (3)
    #define Q_3_DOUBLE (4)
    int n_paren = 0;
   1aef6:	2300      	movs	r3, #0
   1aef8:	61fb      	str	r3, [r7, #28]
    int n_brack = 0;
   1aefa:	2300      	movs	r3, #0
   1aefc:	61bb      	str	r3, [r7, #24]
    int n_brace = 0;
   1aefe:	2300      	movs	r3, #0
   1af00:	617b      	str	r3, [r7, #20]
    int in_quote = Q_NONE;
   1af02:	2300      	movs	r3, #0
   1af04:	613b      	str	r3, [r7, #16]
    const char *i;
    for (i = input; *i; i++) {
   1af06:	687b      	ldr	r3, [r7, #4]
   1af08:	60fb      	str	r3, [r7, #12]
   1af0a:	e097      	b.n	1b03c <mp_repl_continue_with_input+0x1d4>
        if (*i == '\'') {
   1af0c:	68fb      	ldr	r3, [r7, #12]
   1af0e:	781b      	ldrb	r3, [r3, #0]
   1af10:	2b27      	cmp	r3, #39	; 0x27
   1af12:	d122      	bne.n	1af5a <mp_repl_continue_with_input+0xf2>
            if ((in_quote == Q_NONE || in_quote == Q_3_SINGLE) && i[1] == '\'' && i[2] == '\'') {
   1af14:	693b      	ldr	r3, [r7, #16]
   1af16:	2b00      	cmp	r3, #0
   1af18:	d002      	beq.n	1af20 <mp_repl_continue_with_input+0xb8>
   1af1a:	693b      	ldr	r3, [r7, #16]
   1af1c:	2b03      	cmp	r3, #3
   1af1e:	d111      	bne.n	1af44 <mp_repl_continue_with_input+0xdc>
   1af20:	68fb      	ldr	r3, [r7, #12]
   1af22:	3301      	adds	r3, #1
   1af24:	781b      	ldrb	r3, [r3, #0]
   1af26:	2b27      	cmp	r3, #39	; 0x27
   1af28:	d10c      	bne.n	1af44 <mp_repl_continue_with_input+0xdc>
   1af2a:	68fb      	ldr	r3, [r7, #12]
   1af2c:	3302      	adds	r3, #2
   1af2e:	781b      	ldrb	r3, [r3, #0]
   1af30:	2b27      	cmp	r3, #39	; 0x27
   1af32:	d107      	bne.n	1af44 <mp_repl_continue_with_input+0xdc>
                i += 2;
   1af34:	68fb      	ldr	r3, [r7, #12]
   1af36:	3302      	adds	r3, #2
   1af38:	60fb      	str	r3, [r7, #12]
                in_quote = Q_3_SINGLE - in_quote;
   1af3a:	693b      	ldr	r3, [r7, #16]
   1af3c:	f1c3 0303 	rsb	r3, r3, #3
   1af40:	613b      	str	r3, [r7, #16]
   1af42:	e078      	b.n	1b036 <mp_repl_continue_with_input+0x1ce>
            } else if (in_quote == Q_NONE || in_quote == Q_1_SINGLE) {
   1af44:	693b      	ldr	r3, [r7, #16]
   1af46:	2b00      	cmp	r3, #0
   1af48:	d002      	beq.n	1af50 <mp_repl_continue_with_input+0xe8>
   1af4a:	693b      	ldr	r3, [r7, #16]
   1af4c:	2b01      	cmp	r3, #1
   1af4e:	d172      	bne.n	1b036 <mp_repl_continue_with_input+0x1ce>
                in_quote = Q_1_SINGLE - in_quote;
   1af50:	693b      	ldr	r3, [r7, #16]
   1af52:	f1c3 0301 	rsb	r3, r3, #1
   1af56:	613b      	str	r3, [r7, #16]
   1af58:	e06d      	b.n	1b036 <mp_repl_continue_with_input+0x1ce>
            }
        } else if (*i == '"') {
   1af5a:	68fb      	ldr	r3, [r7, #12]
   1af5c:	781b      	ldrb	r3, [r3, #0]
   1af5e:	2b22      	cmp	r3, #34	; 0x22
   1af60:	d122      	bne.n	1afa8 <mp_repl_continue_with_input+0x140>
            if ((in_quote == Q_NONE || in_quote == Q_3_DOUBLE) && i[1] == '"' && i[2] == '"') {
   1af62:	693b      	ldr	r3, [r7, #16]
   1af64:	2b00      	cmp	r3, #0
   1af66:	d002      	beq.n	1af6e <mp_repl_continue_with_input+0x106>
   1af68:	693b      	ldr	r3, [r7, #16]
   1af6a:	2b04      	cmp	r3, #4
   1af6c:	d111      	bne.n	1af92 <mp_repl_continue_with_input+0x12a>
   1af6e:	68fb      	ldr	r3, [r7, #12]
   1af70:	3301      	adds	r3, #1
   1af72:	781b      	ldrb	r3, [r3, #0]
   1af74:	2b22      	cmp	r3, #34	; 0x22
   1af76:	d10c      	bne.n	1af92 <mp_repl_continue_with_input+0x12a>
   1af78:	68fb      	ldr	r3, [r7, #12]
   1af7a:	3302      	adds	r3, #2
   1af7c:	781b      	ldrb	r3, [r3, #0]
   1af7e:	2b22      	cmp	r3, #34	; 0x22
   1af80:	d107      	bne.n	1af92 <mp_repl_continue_with_input+0x12a>
                i += 2;
   1af82:	68fb      	ldr	r3, [r7, #12]
   1af84:	3302      	adds	r3, #2
   1af86:	60fb      	str	r3, [r7, #12]
                in_quote = Q_3_DOUBLE - in_quote;
   1af88:	693b      	ldr	r3, [r7, #16]
   1af8a:	f1c3 0304 	rsb	r3, r3, #4
   1af8e:	613b      	str	r3, [r7, #16]
   1af90:	e051      	b.n	1b036 <mp_repl_continue_with_input+0x1ce>
            } else if (in_quote == Q_NONE || in_quote == Q_1_DOUBLE) {
   1af92:	693b      	ldr	r3, [r7, #16]
   1af94:	2b00      	cmp	r3, #0
   1af96:	d002      	beq.n	1af9e <mp_repl_continue_with_input+0x136>
   1af98:	693b      	ldr	r3, [r7, #16]
   1af9a:	2b02      	cmp	r3, #2
   1af9c:	d14b      	bne.n	1b036 <mp_repl_continue_with_input+0x1ce>
                in_quote = Q_1_DOUBLE - in_quote;
   1af9e:	693b      	ldr	r3, [r7, #16]
   1afa0:	f1c3 0302 	rsb	r3, r3, #2
   1afa4:	613b      	str	r3, [r7, #16]
   1afa6:	e046      	b.n	1b036 <mp_repl_continue_with_input+0x1ce>
            }
        } else if (*i == '\\' && (i[1] == '\'' || i[1] == '"' || i[1] == '\\')) {
   1afa8:	68fb      	ldr	r3, [r7, #12]
   1afaa:	781b      	ldrb	r3, [r3, #0]
   1afac:	2b5c      	cmp	r3, #92	; 0x5c
   1afae:	d115      	bne.n	1afdc <mp_repl_continue_with_input+0x174>
   1afb0:	68fb      	ldr	r3, [r7, #12]
   1afb2:	3301      	adds	r3, #1
   1afb4:	781b      	ldrb	r3, [r3, #0]
   1afb6:	2b27      	cmp	r3, #39	; 0x27
   1afb8:	d009      	beq.n	1afce <mp_repl_continue_with_input+0x166>
   1afba:	68fb      	ldr	r3, [r7, #12]
   1afbc:	3301      	adds	r3, #1
   1afbe:	781b      	ldrb	r3, [r3, #0]
   1afc0:	2b22      	cmp	r3, #34	; 0x22
   1afc2:	d004      	beq.n	1afce <mp_repl_continue_with_input+0x166>
   1afc4:	68fb      	ldr	r3, [r7, #12]
   1afc6:	3301      	adds	r3, #1
   1afc8:	781b      	ldrb	r3, [r3, #0]
   1afca:	2b5c      	cmp	r3, #92	; 0x5c
   1afcc:	d106      	bne.n	1afdc <mp_repl_continue_with_input+0x174>
            if (in_quote != Q_NONE) {
   1afce:	693b      	ldr	r3, [r7, #16]
   1afd0:	2b00      	cmp	r3, #0
   1afd2:	d030      	beq.n	1b036 <mp_repl_continue_with_input+0x1ce>
                i++;
   1afd4:	68fb      	ldr	r3, [r7, #12]
   1afd6:	3301      	adds	r3, #1
   1afd8:	60fb      	str	r3, [r7, #12]
            if (in_quote != Q_NONE) {
   1afda:	e02c      	b.n	1b036 <mp_repl_continue_with_input+0x1ce>
            }
        } else if (in_quote == Q_NONE) {
   1afdc:	693b      	ldr	r3, [r7, #16]
   1afde:	2b00      	cmp	r3, #0
   1afe0:	d129      	bne.n	1b036 <mp_repl_continue_with_input+0x1ce>
            switch (*i) {
   1afe2:	68fb      	ldr	r3, [r7, #12]
   1afe4:	781b      	ldrb	r3, [r3, #0]
   1afe6:	2b5b      	cmp	r3, #91	; 0x5b
   1afe8:	d015      	beq.n	1b016 <mp_repl_continue_with_input+0x1ae>
   1afea:	2b5b      	cmp	r3, #91	; 0x5b
   1afec:	dc04      	bgt.n	1aff8 <mp_repl_continue_with_input+0x190>
   1afee:	2b28      	cmp	r3, #40	; 0x28
   1aff0:	d009      	beq.n	1b006 <mp_repl_continue_with_input+0x19e>
   1aff2:	2b29      	cmp	r3, #41	; 0x29
   1aff4:	d00b      	beq.n	1b00e <mp_repl_continue_with_input+0x1a6>
                case ')': n_paren -= 1; break;
                case '[': n_brack += 1; break;
                case ']': n_brack -= 1; break;
                case '{': n_brace += 1; break;
                case '}': n_brace -= 1; break;
                default: break;
   1aff6:	e01e      	b.n	1b036 <mp_repl_continue_with_input+0x1ce>
            switch (*i) {
   1aff8:	2b7b      	cmp	r3, #123	; 0x7b
   1affa:	d014      	beq.n	1b026 <mp_repl_continue_with_input+0x1be>
   1affc:	2b7d      	cmp	r3, #125	; 0x7d
   1affe:	d016      	beq.n	1b02e <mp_repl_continue_with_input+0x1c6>
   1b000:	2b5d      	cmp	r3, #93	; 0x5d
   1b002:	d00c      	beq.n	1b01e <mp_repl_continue_with_input+0x1b6>
                default: break;
   1b004:	e017      	b.n	1b036 <mp_repl_continue_with_input+0x1ce>
                case '(': n_paren += 1; break;
   1b006:	69fb      	ldr	r3, [r7, #28]
   1b008:	3301      	adds	r3, #1
   1b00a:	61fb      	str	r3, [r7, #28]
   1b00c:	e013      	b.n	1b036 <mp_repl_continue_with_input+0x1ce>
                case ')': n_paren -= 1; break;
   1b00e:	69fb      	ldr	r3, [r7, #28]
   1b010:	3b01      	subs	r3, #1
   1b012:	61fb      	str	r3, [r7, #28]
   1b014:	e00f      	b.n	1b036 <mp_repl_continue_with_input+0x1ce>
                case '[': n_brack += 1; break;
   1b016:	69bb      	ldr	r3, [r7, #24]
   1b018:	3301      	adds	r3, #1
   1b01a:	61bb      	str	r3, [r7, #24]
   1b01c:	e00b      	b.n	1b036 <mp_repl_continue_with_input+0x1ce>
                case ']': n_brack -= 1; break;
   1b01e:	69bb      	ldr	r3, [r7, #24]
   1b020:	3b01      	subs	r3, #1
   1b022:	61bb      	str	r3, [r7, #24]
   1b024:	e007      	b.n	1b036 <mp_repl_continue_with_input+0x1ce>
                case '{': n_brace += 1; break;
   1b026:	697b      	ldr	r3, [r7, #20]
   1b028:	3301      	adds	r3, #1
   1b02a:	617b      	str	r3, [r7, #20]
   1b02c:	e003      	b.n	1b036 <mp_repl_continue_with_input+0x1ce>
                case '}': n_brace -= 1; break;
   1b02e:	697b      	ldr	r3, [r7, #20]
   1b030:	3b01      	subs	r3, #1
   1b032:	617b      	str	r3, [r7, #20]
   1b034:	bf00      	nop
    for (i = input; *i; i++) {
   1b036:	68fb      	ldr	r3, [r7, #12]
   1b038:	3301      	adds	r3, #1
   1b03a:	60fb      	str	r3, [r7, #12]
   1b03c:	68fb      	ldr	r3, [r7, #12]
   1b03e:	781b      	ldrb	r3, [r3, #0]
   1b040:	2b00      	cmp	r3, #0
   1b042:	f47f af63 	bne.w	1af0c <mp_repl_continue_with_input+0xa4>
            }
        }
    }

    // continue if unmatched 3-quotes
    if (in_quote == Q_3_SINGLE || in_quote == Q_3_DOUBLE) {
   1b046:	693b      	ldr	r3, [r7, #16]
   1b048:	2b03      	cmp	r3, #3
   1b04a:	d002      	beq.n	1b052 <mp_repl_continue_with_input+0x1ea>
   1b04c:	693b      	ldr	r3, [r7, #16]
   1b04e:	2b04      	cmp	r3, #4
   1b050:	d101      	bne.n	1b056 <mp_repl_continue_with_input+0x1ee>
        return true;
   1b052:	2301      	movs	r3, #1
   1b054:	e01f      	b.n	1b096 <mp_repl_continue_with_input+0x22e>
    }

    // continue if unmatched brackets, but only if not in a 1-quote
    if ((n_paren > 0 || n_brack > 0 || n_brace > 0) && in_quote == Q_NONE) {
   1b056:	69fb      	ldr	r3, [r7, #28]
   1b058:	2b00      	cmp	r3, #0
   1b05a:	dc05      	bgt.n	1b068 <mp_repl_continue_with_input+0x200>
   1b05c:	69bb      	ldr	r3, [r7, #24]
   1b05e:	2b00      	cmp	r3, #0
   1b060:	dc02      	bgt.n	1b068 <mp_repl_continue_with_input+0x200>
   1b062:	697b      	ldr	r3, [r7, #20]
   1b064:	2b00      	cmp	r3, #0
   1b066:	dd04      	ble.n	1b072 <mp_repl_continue_with_input+0x20a>
   1b068:	693b      	ldr	r3, [r7, #16]
   1b06a:	2b00      	cmp	r3, #0
   1b06c:	d101      	bne.n	1b072 <mp_repl_continue_with_input+0x20a>
        return true;
   1b06e:	2301      	movs	r3, #1
   1b070:	e011      	b.n	1b096 <mp_repl_continue_with_input+0x22e>
    }

    // continue if last character was backslash (for line continuation)
    if (i[-1] == '\\') {
   1b072:	68fb      	ldr	r3, [r7, #12]
   1b074:	3b01      	subs	r3, #1
   1b076:	781b      	ldrb	r3, [r3, #0]
   1b078:	2b5c      	cmp	r3, #92	; 0x5c
   1b07a:	d101      	bne.n	1b080 <mp_repl_continue_with_input+0x218>
        return true;
   1b07c:	2301      	movs	r3, #1
   1b07e:	e00a      	b.n	1b096 <mp_repl_continue_with_input+0x22e>
    }

    // continue if compound keyword and last line was not empty
    if (starts_with_compound_keyword && i[-1] != '\n') {
   1b080:	7afb      	ldrb	r3, [r7, #11]
   1b082:	2b00      	cmp	r3, #0
   1b084:	d006      	beq.n	1b094 <mp_repl_continue_with_input+0x22c>
   1b086:	68fb      	ldr	r3, [r7, #12]
   1b088:	3b01      	subs	r3, #1
   1b08a:	781b      	ldrb	r3, [r3, #0]
   1b08c:	2b0a      	cmp	r3, #10
   1b08e:	d001      	beq.n	1b094 <mp_repl_continue_with_input+0x22c>
        return true;
   1b090:	2301      	movs	r3, #1
   1b092:	e000      	b.n	1b096 <mp_repl_continue_with_input+0x22e>
    }

    // otherwise, don't continue
    return false;
   1b094:	2300      	movs	r3, #0
}
   1b096:	4618      	mov	r0, r3
   1b098:	3720      	adds	r7, #32
   1b09a:	46bd      	mov	sp, r7
   1b09c:	bd80      	pop	{r7, pc}
   1b09e:	bf00      	nop
   1b0a0:	00024d0c 	.word	0x00024d0c
   1b0a4:	00024d10 	.word	0x00024d10
   1b0a8:	00024d18 	.word	0x00024d18
   1b0ac:	00024d1c 	.word	0x00024d1c
   1b0b0:	00024d20 	.word	0x00024d20
   1b0b4:	00024d28 	.word	0x00024d28
   1b0b8:	00024d2c 	.word	0x00024d2c

0001b0bc <mp_repl_autocomplete>:

size_t mp_repl_autocomplete(const char *str, size_t len, const mp_print_t *print, const char **compl_str) {
   1b0bc:	b580      	push	{r7, lr}
   1b0be:	b09c      	sub	sp, #112	; 0x70
   1b0c0:	af00      	add	r7, sp, #0
   1b0c2:	60f8      	str	r0, [r7, #12]
   1b0c4:	60b9      	str	r1, [r7, #8]
   1b0c6:	607a      	str	r2, [r7, #4]
   1b0c8:	603b      	str	r3, [r7, #0]
    // scan backwards to find start of "a.b.c" chain
    const char *org_str = str;
   1b0ca:	68fb      	ldr	r3, [r7, #12]
   1b0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    const char *top = str + len;
   1b0ce:	68fa      	ldr	r2, [r7, #12]
   1b0d0:	68bb      	ldr	r3, [r7, #8]
   1b0d2:	4413      	add	r3, r2
   1b0d4:	63bb      	str	r3, [r7, #56]	; 0x38
    for (const char *s = top; --s >= str;) {
   1b0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b0d8:	66fb      	str	r3, [r7, #108]	; 0x6c
   1b0da:	e023      	b.n	1b124 <mp_repl_autocomplete+0x68>
        if (!(unichar_isalpha(*s) || unichar_isdigit(*s) || *s == '_' || *s == '.')) {
   1b0dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b0de:	781b      	ldrb	r3, [r3, #0]
   1b0e0:	4618      	mov	r0, r3
   1b0e2:	f7e7 fa35 	bl	2550 <unichar_isalpha>
   1b0e6:	4603      	mov	r3, r0
   1b0e8:	f083 0301 	eor.w	r3, r3, #1
   1b0ec:	b2db      	uxtb	r3, r3
   1b0ee:	2b00      	cmp	r3, #0
   1b0f0:	d018      	beq.n	1b124 <mp_repl_autocomplete+0x68>
   1b0f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b0f4:	781b      	ldrb	r3, [r3, #0]
   1b0f6:	4618      	mov	r0, r3
   1b0f8:	f7e7 fa48 	bl	258c <unichar_isdigit>
   1b0fc:	4603      	mov	r3, r0
   1b0fe:	f083 0301 	eor.w	r3, r3, #1
   1b102:	b2db      	uxtb	r3, r3
   1b104:	2b00      	cmp	r3, #0
   1b106:	d00d      	beq.n	1b124 <mp_repl_autocomplete+0x68>
   1b108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b10a:	781b      	ldrb	r3, [r3, #0]
   1b10c:	2b5f      	cmp	r3, #95	; 0x5f
   1b10e:	d009      	beq.n	1b124 <mp_repl_autocomplete+0x68>
   1b110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b112:	781b      	ldrb	r3, [r3, #0]
   1b114:	2b2e      	cmp	r3, #46	; 0x2e
   1b116:	d005      	beq.n	1b124 <mp_repl_autocomplete+0x68>
            ++s;
   1b118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b11a:	3301      	adds	r3, #1
   1b11c:	66fb      	str	r3, [r7, #108]	; 0x6c
            str = s;
   1b11e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b120:	60fb      	str	r3, [r7, #12]
            break;
   1b122:	e006      	b.n	1b132 <mp_repl_autocomplete+0x76>
    for (const char *s = top; --s >= str;) {
   1b124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b126:	3b01      	subs	r3, #1
   1b128:	66fb      	str	r3, [r7, #108]	; 0x6c
   1b12a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1b12c:	68fb      	ldr	r3, [r7, #12]
   1b12e:	429a      	cmp	r2, r3
   1b130:	d2d4      	bcs.n	1b0dc <mp_repl_autocomplete+0x20>
        }
    }

    size_t nqstr = QSTR_TOTAL();
   1b132:	4b95      	ldr	r3, [pc, #596]	; (1b388 <mp_repl_autocomplete+0x2cc>)
   1b134:	691b      	ldr	r3, [r3, #16]
   1b136:	685a      	ldr	r2, [r3, #4]
   1b138:	4b93      	ldr	r3, [pc, #588]	; (1b388 <mp_repl_autocomplete+0x2cc>)
   1b13a:	691b      	ldr	r3, [r3, #16]
   1b13c:	68db      	ldr	r3, [r3, #12]
   1b13e:	4413      	add	r3, r2
   1b140:	637b      	str	r3, [r7, #52]	; 0x34

    // begin search in outer global dict which is accessed from __main__
    mp_obj_t obj = MP_OBJ_FROM_PTR(&mp_module___main__);
   1b142:	4b92      	ldr	r3, [pc, #584]	; (1b38c <mp_repl_autocomplete+0x2d0>)
   1b144:	66bb      	str	r3, [r7, #104]	; 0x68
    mp_obj_t dest[2];

    for (;;) {
        // get next word in string to complete
        const char *s_start = str;
   1b146:	68fb      	ldr	r3, [r7, #12]
   1b148:	633b      	str	r3, [r7, #48]	; 0x30
        while (str < top && *str != '.') {
   1b14a:	e002      	b.n	1b152 <mp_repl_autocomplete+0x96>
            ++str;
   1b14c:	68fb      	ldr	r3, [r7, #12]
   1b14e:	3301      	adds	r3, #1
   1b150:	60fb      	str	r3, [r7, #12]
        while (str < top && *str != '.') {
   1b152:	68fa      	ldr	r2, [r7, #12]
   1b154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b156:	429a      	cmp	r2, r3
   1b158:	d203      	bcs.n	1b162 <mp_repl_autocomplete+0xa6>
   1b15a:	68fb      	ldr	r3, [r7, #12]
   1b15c:	781b      	ldrb	r3, [r3, #0]
   1b15e:	2b2e      	cmp	r3, #46	; 0x2e
   1b160:	d1f4      	bne.n	1b14c <mp_repl_autocomplete+0x90>
        }
        size_t s_len = str - s_start;
   1b162:	68fa      	ldr	r2, [r7, #12]
   1b164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b166:	1ad3      	subs	r3, r2, r3
   1b168:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (str < top) {
   1b16a:	68fa      	ldr	r2, [r7, #12]
   1b16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b16e:	429a      	cmp	r2, r3
   1b170:	d21b      	bcs.n	1b1aa <mp_repl_autocomplete+0xee>
            // a complete word, lookup in current object
            qstr q = qstr_find_strn(s_start, s_len);
   1b172:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1b174:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1b176:	f7e5 ffc7 	bl	1108 <qstr_find_strn>
   1b17a:	62b8      	str	r0, [r7, #40]	; 0x28
            if (q == MP_QSTR_NULL) {
   1b17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b17e:	2b00      	cmp	r3, #0
   1b180:	d101      	bne.n	1b186 <mp_repl_autocomplete+0xca>
                // lookup will fail
                return 0;
   1b182:	2300      	movs	r3, #0
   1b184:	e0fc      	b.n	1b380 <mp_repl_autocomplete+0x2c4>
            }
            mp_load_method_protected(obj, q, dest, true);
   1b186:	f107 0218 	add.w	r2, r7, #24
   1b18a:	2301      	movs	r3, #1
   1b18c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1b18e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   1b190:	f7f1 fb7c 	bl	c88c <mp_load_method_protected>
            obj = dest[0]; // attribute, method, or MP_OBJ_NULL if nothing found
   1b194:	69bb      	ldr	r3, [r7, #24]
   1b196:	66bb      	str	r3, [r7, #104]	; 0x68

            if (obj == MP_OBJ_NULL) {
   1b198:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1b19a:	2b00      	cmp	r3, #0
   1b19c:	d101      	bne.n	1b1a2 <mp_repl_autocomplete+0xe6>
                // lookup failed
                return 0;
   1b19e:	2300      	movs	r3, #0
   1b1a0:	e0ee      	b.n	1b380 <mp_repl_autocomplete+0x2c4>
            }

            // skip '.' to move to next word
            ++str;
   1b1a2:	68fb      	ldr	r3, [r7, #12]
   1b1a4:	3301      	adds	r3, #1
   1b1a6:	60fb      	str	r3, [r7, #12]
   1b1a8:	e7cd      	b.n	1b146 <mp_repl_autocomplete+0x8a>

        } else {
            // end of string, do completion on this partial name

            // look for matches
            const char *match_str = NULL;
   1b1aa:	2300      	movs	r3, #0
   1b1ac:	667b      	str	r3, [r7, #100]	; 0x64
            size_t match_len = 0;
   1b1ae:	2300      	movs	r3, #0
   1b1b0:	663b      	str	r3, [r7, #96]	; 0x60
            qstr q_first = 0, q_last = 0;
   1b1b2:	2300      	movs	r3, #0
   1b1b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   1b1b6:	2300      	movs	r3, #0
   1b1b8:	65bb      	str	r3, [r7, #88]	; 0x58
            for (qstr q = MP_QSTR_ + 1; q < nqstr; ++q) {
   1b1ba:	2302      	movs	r3, #2
   1b1bc:	657b      	str	r3, [r7, #84]	; 0x54
   1b1be:	e049      	b.n	1b254 <mp_repl_autocomplete+0x198>
                size_t d_len;
                const char *d_str = (const char*)qstr_data(q, &d_len);
   1b1c0:	f107 0314 	add.w	r3, r7, #20
   1b1c4:	4619      	mov	r1, r3
   1b1c6:	6d78      	ldr	r0, [r7, #84]	; 0x54
   1b1c8:	f7e6 f8ec 	bl	13a4 <qstr_data>
   1b1cc:	6278      	str	r0, [r7, #36]	; 0x24
                if (s_len <= d_len && strncmp(s_start, d_str, s_len) == 0) {
   1b1ce:	697b      	ldr	r3, [r7, #20]
   1b1d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1b1d2:	429a      	cmp	r2, r3
   1b1d4:	d83b      	bhi.n	1b24e <mp_repl_autocomplete+0x192>
   1b1d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1b1d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1b1da:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1b1dc:	f001 ff66 	bl	1d0ac <strncmp>
   1b1e0:	4603      	mov	r3, r0
   1b1e2:	2b00      	cmp	r3, #0
   1b1e4:	d133      	bne.n	1b24e <mp_repl_autocomplete+0x192>
                    mp_load_method_protected(obj, q, dest, true);
   1b1e6:	f107 0218 	add.w	r2, r7, #24
   1b1ea:	2301      	movs	r3, #1
   1b1ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
   1b1ee:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   1b1f0:	f7f1 fb4c 	bl	c88c <mp_load_method_protected>
                    if (dest[0] != MP_OBJ_NULL) {
   1b1f4:	69bb      	ldr	r3, [r7, #24]
   1b1f6:	2b00      	cmp	r3, #0
   1b1f8:	d029      	beq.n	1b24e <mp_repl_autocomplete+0x192>
                        if (match_str == NULL) {
   1b1fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1b1fc:	2b00      	cmp	r3, #0
   1b1fe:	d104      	bne.n	1b20a <mp_repl_autocomplete+0x14e>
                            match_str = d_str;
   1b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b202:	667b      	str	r3, [r7, #100]	; 0x64
                            match_len = d_len;
   1b204:	697b      	ldr	r3, [r7, #20]
   1b206:	663b      	str	r3, [r7, #96]	; 0x60
   1b208:	e01a      	b.n	1b240 <mp_repl_autocomplete+0x184>
                        } else {
                            // search for longest common prefix of match_str and d_str
                            // (assumes these strings are null-terminated)
                            for (size_t j = s_len; j <= match_len && j <= d_len; ++j) {
   1b20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b20c:	653b      	str	r3, [r7, #80]	; 0x50
   1b20e:	e00f      	b.n	1b230 <mp_repl_autocomplete+0x174>
                                if (match_str[j] != d_str[j]) {
   1b210:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1b212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1b214:	4413      	add	r3, r2
   1b216:	781a      	ldrb	r2, [r3, #0]
   1b218:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1b21a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1b21c:	440b      	add	r3, r1
   1b21e:	781b      	ldrb	r3, [r3, #0]
   1b220:	429a      	cmp	r2, r3
   1b222:	d002      	beq.n	1b22a <mp_repl_autocomplete+0x16e>
                                    match_len = j;
   1b224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1b226:	663b      	str	r3, [r7, #96]	; 0x60
                                    break;
   1b228:	e00a      	b.n	1b240 <mp_repl_autocomplete+0x184>
                            for (size_t j = s_len; j <= match_len && j <= d_len; ++j) {
   1b22a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1b22c:	3301      	adds	r3, #1
   1b22e:	653b      	str	r3, [r7, #80]	; 0x50
   1b230:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   1b232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1b234:	429a      	cmp	r2, r3
   1b236:	d803      	bhi.n	1b240 <mp_repl_autocomplete+0x184>
   1b238:	697b      	ldr	r3, [r7, #20]
   1b23a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   1b23c:	429a      	cmp	r2, r3
   1b23e:	d9e7      	bls.n	1b210 <mp_repl_autocomplete+0x154>
                                }
                            }
                        }
                        if (q_first == 0) {
   1b240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1b242:	2b00      	cmp	r3, #0
   1b244:	d101      	bne.n	1b24a <mp_repl_autocomplete+0x18e>
                            q_first = q;
   1b246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1b248:	65fb      	str	r3, [r7, #92]	; 0x5c
                        }
                        q_last = q;
   1b24a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1b24c:	65bb      	str	r3, [r7, #88]	; 0x58
            for (qstr q = MP_QSTR_ + 1; q < nqstr; ++q) {
   1b24e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1b250:	3301      	adds	r3, #1
   1b252:	657b      	str	r3, [r7, #84]	; 0x54
   1b254:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1b256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b258:	429a      	cmp	r2, r3
   1b25a:	d3b1      	bcc.n	1b1c0 <mp_repl_autocomplete+0x104>
                    }
                }
            }

            // nothing found
            if (q_first == 0) {
   1b25c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1b25e:	2b00      	cmp	r3, #0
   1b260:	d116      	bne.n	1b290 <mp_repl_autocomplete+0x1d4>
                // If there're no better alternatives, and if it's first word
                // in the line, try to complete "import".
                if (s_start == org_str) {
   1b262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1b264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b266:	429a      	cmp	r2, r3
   1b268:	d110      	bne.n	1b28c <mp_repl_autocomplete+0x1d0>
                    static const char import_str[] = "import ";
                    if (memcmp(s_start, import_str, s_len) == 0) {
   1b26a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1b26c:	4948      	ldr	r1, [pc, #288]	; (1b390 <mp_repl_autocomplete+0x2d4>)
   1b26e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1b270:	f001 fe76 	bl	1cf60 <memcmp>
   1b274:	4603      	mov	r3, r0
   1b276:	2b00      	cmp	r3, #0
   1b278:	d108      	bne.n	1b28c <mp_repl_autocomplete+0x1d0>
                        *compl_str = import_str + s_len;
   1b27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b27c:	4a44      	ldr	r2, [pc, #272]	; (1b390 <mp_repl_autocomplete+0x2d4>)
   1b27e:	441a      	add	r2, r3
   1b280:	683b      	ldr	r3, [r7, #0]
   1b282:	601a      	str	r2, [r3, #0]
                        return sizeof(import_str) - 1 - s_len;
   1b284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b286:	f1c3 0307 	rsb	r3, r3, #7
   1b28a:	e079      	b.n	1b380 <mp_repl_autocomplete+0x2c4>
                    }
                }

                return 0;
   1b28c:	2300      	movs	r3, #0
   1b28e:	e077      	b.n	1b380 <mp_repl_autocomplete+0x2c4>
            }

            // 1 match found, or multiple matches with a common prefix
            if (q_first == q_last || match_len > s_len) {
   1b290:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1b292:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1b294:	429a      	cmp	r2, r3
   1b296:	d003      	beq.n	1b2a0 <mp_repl_autocomplete+0x1e4>
   1b298:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1b29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b29c:	429a      	cmp	r2, r3
   1b29e:	d908      	bls.n	1b2b2 <mp_repl_autocomplete+0x1f6>
                *compl_str = match_str + s_len;
   1b2a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1b2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b2a4:	441a      	add	r2, r3
   1b2a6:	683b      	ldr	r3, [r7, #0]
   1b2a8:	601a      	str	r2, [r3, #0]
                return match_len - s_len;
   1b2aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1b2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b2ae:	1ad3      	subs	r3, r2, r3
   1b2b0:	e066      	b.n	1b380 <mp_repl_autocomplete+0x2c4>
            // multiple matches found, print them out

            #define WORD_SLOT_LEN (16)
            #define MAX_LINE_LEN  (4 * WORD_SLOT_LEN)

            int line_len = MAX_LINE_LEN; // force a newline for first word
   1b2b2:	2340      	movs	r3, #64	; 0x40
   1b2b4:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (qstr q = q_first; q <= q_last; ++q) {
   1b2b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1b2b8:	64bb      	str	r3, [r7, #72]	; 0x48
   1b2ba:	e057      	b.n	1b36c <mp_repl_autocomplete+0x2b0>
                size_t d_len;
                const char *d_str = (const char*)qstr_data(q, &d_len);
   1b2bc:	f107 0310 	add.w	r3, r7, #16
   1b2c0:	4619      	mov	r1, r3
   1b2c2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   1b2c4:	f7e6 f86e 	bl	13a4 <qstr_data>
   1b2c8:	6238      	str	r0, [r7, #32]
                if (s_len <= d_len && strncmp(s_start, d_str, s_len) == 0) {
   1b2ca:	693b      	ldr	r3, [r7, #16]
   1b2cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1b2ce:	429a      	cmp	r2, r3
   1b2d0:	d849      	bhi.n	1b366 <mp_repl_autocomplete+0x2aa>
   1b2d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1b2d4:	6a39      	ldr	r1, [r7, #32]
   1b2d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1b2d8:	f001 fee8 	bl	1d0ac <strncmp>
   1b2dc:	4603      	mov	r3, r0
   1b2de:	2b00      	cmp	r3, #0
   1b2e0:	d141      	bne.n	1b366 <mp_repl_autocomplete+0x2aa>
                    mp_load_method_protected(obj, q, dest, true);
   1b2e2:	f107 0218 	add.w	r2, r7, #24
   1b2e6:	2301      	movs	r3, #1
   1b2e8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1b2ea:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   1b2ec:	f7f1 face 	bl	c88c <mp_load_method_protected>
                    if (dest[0] != MP_OBJ_NULL) {
   1b2f0:	69bb      	ldr	r3, [r7, #24]
   1b2f2:	2b00      	cmp	r3, #0
   1b2f4:	d037      	beq.n	1b366 <mp_repl_autocomplete+0x2aa>
                        int gap = (line_len + WORD_SLOT_LEN - 1) / WORD_SLOT_LEN * WORD_SLOT_LEN - line_len;
   1b2f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b2f8:	330f      	adds	r3, #15
   1b2fa:	2b00      	cmp	r3, #0
   1b2fc:	da00      	bge.n	1b300 <mp_repl_autocomplete+0x244>
   1b2fe:	330f      	adds	r3, #15
   1b300:	111b      	asrs	r3, r3, #4
   1b302:	011a      	lsls	r2, r3, #4
   1b304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b306:	1ad3      	subs	r3, r2, r3
   1b308:	647b      	str	r3, [r7, #68]	; 0x44
                        if (gap < 2) {
   1b30a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1b30c:	2b01      	cmp	r3, #1
   1b30e:	dc02      	bgt.n	1b316 <mp_repl_autocomplete+0x25a>
                            gap += WORD_SLOT_LEN;
   1b310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1b312:	3310      	adds	r3, #16
   1b314:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                        if (line_len + gap + d_len <= MAX_LINE_LEN) {
   1b316:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1b318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1b31a:	4413      	add	r3, r2
   1b31c:	461a      	mov	r2, r3
   1b31e:	693b      	ldr	r3, [r7, #16]
   1b320:	4413      	add	r3, r2
   1b322:	2b40      	cmp	r3, #64	; 0x40
   1b324:	d818      	bhi.n	1b358 <mp_repl_autocomplete+0x29c>
                            // TODO optimise printing of gap?
                            for (int j = 0; j < gap; ++j) {
   1b326:	2300      	movs	r3, #0
   1b328:	643b      	str	r3, [r7, #64]	; 0x40
   1b32a:	e006      	b.n	1b33a <mp_repl_autocomplete+0x27e>
                                mp_print_str(print, " ");
   1b32c:	4919      	ldr	r1, [pc, #100]	; (1b394 <mp_repl_autocomplete+0x2d8>)
   1b32e:	6878      	ldr	r0, [r7, #4]
   1b330:	f7e6 fb6e 	bl	1a10 <mp_print_str>
                            for (int j = 0; j < gap; ++j) {
   1b334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b336:	3301      	adds	r3, #1
   1b338:	643b      	str	r3, [r7, #64]	; 0x40
   1b33a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1b33c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1b33e:	429a      	cmp	r2, r3
   1b340:	dbf4      	blt.n	1b32c <mp_repl_autocomplete+0x270>
                            }
                            mp_print_str(print, d_str);
   1b342:	6a39      	ldr	r1, [r7, #32]
   1b344:	6878      	ldr	r0, [r7, #4]
   1b346:	f7e6 fb63 	bl	1a10 <mp_print_str>
                            line_len += gap + d_len;
   1b34a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1b34c:	693b      	ldr	r3, [r7, #16]
   1b34e:	441a      	add	r2, r3
   1b350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b352:	4413      	add	r3, r2
   1b354:	64fb      	str	r3, [r7, #76]	; 0x4c
   1b356:	e006      	b.n	1b366 <mp_repl_autocomplete+0x2aa>
                        } else {
                            mp_printf(print, "\n%s", d_str);
   1b358:	6a3a      	ldr	r2, [r7, #32]
   1b35a:	490f      	ldr	r1, [pc, #60]	; (1b398 <mp_repl_autocomplete+0x2dc>)
   1b35c:	6878      	ldr	r0, [r7, #4]
   1b35e:	f7e6 fe6b 	bl	2038 <mp_printf>
                            line_len = d_len;
   1b362:	693b      	ldr	r3, [r7, #16]
   1b364:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (qstr q = q_first; q <= q_last; ++q) {
   1b366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1b368:	3301      	adds	r3, #1
   1b36a:	64bb      	str	r3, [r7, #72]	; 0x48
   1b36c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1b36e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1b370:	429a      	cmp	r2, r3
   1b372:	d9a3      	bls.n	1b2bc <mp_repl_autocomplete+0x200>
                        }
                    }
                }
            }
            mp_print_str(print, "\n");
   1b374:	4909      	ldr	r1, [pc, #36]	; (1b39c <mp_repl_autocomplete+0x2e0>)
   1b376:	6878      	ldr	r0, [r7, #4]
   1b378:	f7e6 fb4a 	bl	1a10 <mp_print_str>

            return (size_t)(-1); // indicate many matches
   1b37c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        }
    }
}
   1b380:	4618      	mov	r0, r3
   1b382:	3770      	adds	r7, #112	; 0x70
   1b384:	46bd      	mov	sp, r7
   1b386:	bd80      	pop	{r7, pc}
   1b388:	200012f0 	.word	0x200012f0
   1b38c:	0002165c 	.word	0x0002165c
   1b390:	00024d40 	.word	0x00024d40
   1b394:	00024d34 	.word	0x00024d34
   1b398:	00024d38 	.word	0x00024d38
   1b39c:	00024d3c 	.word	0x00024d3c

0001b3a0 <mp_small_int_mul_overflow>:
 * THE SOFTWARE.
 */

#include "py/smallint.h"

bool mp_small_int_mul_overflow(mp_int_t x, mp_int_t y) {
   1b3a0:	b480      	push	{r7}
   1b3a2:	b083      	sub	sp, #12
   1b3a4:	af00      	add	r7, sp, #0
   1b3a6:	6078      	str	r0, [r7, #4]
   1b3a8:	6039      	str	r1, [r7, #0]
    // Check for multiply overflow; see CERT INT32-C
    if (x > 0) { // x is positive
   1b3aa:	687b      	ldr	r3, [r7, #4]
   1b3ac:	2b00      	cmp	r3, #0
   1b3ae:	dd16      	ble.n	1b3de <mp_small_int_mul_overflow+0x3e>
        if (y > 0) { // x and y are positive
   1b3b0:	683b      	ldr	r3, [r7, #0]
   1b3b2:	2b00      	cmp	r3, #0
   1b3b4:	dd09      	ble.n	1b3ca <mp_small_int_mul_overflow+0x2a>
            if (x > (MP_SMALL_INT_MAX / y)) {
   1b3b6:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
   1b3ba:	683b      	ldr	r3, [r7, #0]
   1b3bc:	fb92 f2f3 	sdiv	r2, r2, r3
   1b3c0:	687b      	ldr	r3, [r7, #4]
   1b3c2:	429a      	cmp	r2, r3
   1b3c4:	da25      	bge.n	1b412 <mp_small_int_mul_overflow+0x72>
                return true;
   1b3c6:	2301      	movs	r3, #1
   1b3c8:	e024      	b.n	1b414 <mp_small_int_mul_overflow+0x74>
            }
        } else { // x positive, y nonpositive
            if (y < (MP_SMALL_INT_MIN / x)) {
   1b3ca:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   1b3ce:	687b      	ldr	r3, [r7, #4]
   1b3d0:	fb92 f2f3 	sdiv	r2, r2, r3
   1b3d4:	683b      	ldr	r3, [r7, #0]
   1b3d6:	429a      	cmp	r2, r3
   1b3d8:	dd1b      	ble.n	1b412 <mp_small_int_mul_overflow+0x72>
                return true;
   1b3da:	2301      	movs	r3, #1
   1b3dc:	e01a      	b.n	1b414 <mp_small_int_mul_overflow+0x74>
            }
        } // x positive, y nonpositive
    } else { // x is nonpositive
        if (y > 0) { // x is nonpositive, y is positive
   1b3de:	683b      	ldr	r3, [r7, #0]
   1b3e0:	2b00      	cmp	r3, #0
   1b3e2:	dd09      	ble.n	1b3f8 <mp_small_int_mul_overflow+0x58>
            if (x < (MP_SMALL_INT_MIN / y)) {
   1b3e4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   1b3e8:	683b      	ldr	r3, [r7, #0]
   1b3ea:	fb92 f2f3 	sdiv	r2, r2, r3
   1b3ee:	687b      	ldr	r3, [r7, #4]
   1b3f0:	429a      	cmp	r2, r3
   1b3f2:	dd0e      	ble.n	1b412 <mp_small_int_mul_overflow+0x72>
                return true;
   1b3f4:	2301      	movs	r3, #1
   1b3f6:	e00d      	b.n	1b414 <mp_small_int_mul_overflow+0x74>
            }
        } else { // x and y are nonpositive
            if (x != 0 && y < (MP_SMALL_INT_MAX / x)) {
   1b3f8:	687b      	ldr	r3, [r7, #4]
   1b3fa:	2b00      	cmp	r3, #0
   1b3fc:	d009      	beq.n	1b412 <mp_small_int_mul_overflow+0x72>
   1b3fe:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
   1b402:	687b      	ldr	r3, [r7, #4]
   1b404:	fb92 f2f3 	sdiv	r2, r2, r3
   1b408:	683b      	ldr	r3, [r7, #0]
   1b40a:	429a      	cmp	r2, r3
   1b40c:	dd01      	ble.n	1b412 <mp_small_int_mul_overflow+0x72>
                return true;
   1b40e:	2301      	movs	r3, #1
   1b410:	e000      	b.n	1b414 <mp_small_int_mul_overflow+0x74>
            }
        } // End if x and y are nonpositive
    } // End if x is nonpositive
    return false;
   1b412:	2300      	movs	r3, #0
}
   1b414:	4618      	mov	r0, r3
   1b416:	370c      	adds	r7, #12
   1b418:	46bd      	mov	sp, r7
   1b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b41e:	4770      	bx	lr

0001b420 <mp_small_int_modulo>:

mp_int_t mp_small_int_modulo(mp_int_t dividend, mp_int_t divisor) {
   1b420:	b480      	push	{r7}
   1b422:	b083      	sub	sp, #12
   1b424:	af00      	add	r7, sp, #0
   1b426:	6078      	str	r0, [r7, #4]
   1b428:	6039      	str	r1, [r7, #0]
    // Python specs require that mod has same sign as second operand
    dividend %= divisor;
   1b42a:	687b      	ldr	r3, [r7, #4]
   1b42c:	683a      	ldr	r2, [r7, #0]
   1b42e:	fb93 f2f2 	sdiv	r2, r3, r2
   1b432:	6839      	ldr	r1, [r7, #0]
   1b434:	fb01 f202 	mul.w	r2, r1, r2
   1b438:	1a9b      	subs	r3, r3, r2
   1b43a:	607b      	str	r3, [r7, #4]
    if ((dividend < 0 && divisor > 0) || (dividend > 0 && divisor < 0)) {
   1b43c:	687b      	ldr	r3, [r7, #4]
   1b43e:	2b00      	cmp	r3, #0
   1b440:	da02      	bge.n	1b448 <mp_small_int_modulo+0x28>
   1b442:	683b      	ldr	r3, [r7, #0]
   1b444:	2b00      	cmp	r3, #0
   1b446:	dc05      	bgt.n	1b454 <mp_small_int_modulo+0x34>
   1b448:	687b      	ldr	r3, [r7, #4]
   1b44a:	2b00      	cmp	r3, #0
   1b44c:	dd06      	ble.n	1b45c <mp_small_int_modulo+0x3c>
   1b44e:	683b      	ldr	r3, [r7, #0]
   1b450:	2b00      	cmp	r3, #0
   1b452:	da03      	bge.n	1b45c <mp_small_int_modulo+0x3c>
        dividend += divisor;
   1b454:	687a      	ldr	r2, [r7, #4]
   1b456:	683b      	ldr	r3, [r7, #0]
   1b458:	4413      	add	r3, r2
   1b45a:	607b      	str	r3, [r7, #4]
    }
    return dividend;
   1b45c:	687b      	ldr	r3, [r7, #4]
}
   1b45e:	4618      	mov	r0, r3
   1b460:	370c      	adds	r7, #12
   1b462:	46bd      	mov	sp, r7
   1b464:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b468:	4770      	bx	lr
   1b46a:	bf00      	nop

0001b46c <mp_small_int_floor_divide>:

mp_int_t mp_small_int_floor_divide(mp_int_t num, mp_int_t denom) {
   1b46c:	b480      	push	{r7}
   1b46e:	b083      	sub	sp, #12
   1b470:	af00      	add	r7, sp, #0
   1b472:	6078      	str	r0, [r7, #4]
   1b474:	6039      	str	r1, [r7, #0]
    if (num >= 0) {
   1b476:	687b      	ldr	r3, [r7, #4]
   1b478:	2b00      	cmp	r3, #0
   1b47a:	db08      	blt.n	1b48e <mp_small_int_floor_divide+0x22>
        if (denom < 0) {
   1b47c:	683b      	ldr	r3, [r7, #0]
   1b47e:	2b00      	cmp	r3, #0
   1b480:	da0e      	bge.n	1b4a0 <mp_small_int_floor_divide+0x34>
            num += -denom - 1;
   1b482:	683b      	ldr	r3, [r7, #0]
   1b484:	43db      	mvns	r3, r3
   1b486:	687a      	ldr	r2, [r7, #4]
   1b488:	4413      	add	r3, r2
   1b48a:	607b      	str	r3, [r7, #4]
   1b48c:	e008      	b.n	1b4a0 <mp_small_int_floor_divide+0x34>
        }
    } else {
        if (denom >= 0) {
   1b48e:	683b      	ldr	r3, [r7, #0]
   1b490:	2b00      	cmp	r3, #0
   1b492:	db05      	blt.n	1b4a0 <mp_small_int_floor_divide+0x34>
            num += -denom + 1;
   1b494:	683b      	ldr	r3, [r7, #0]
   1b496:	f1c3 0301 	rsb	r3, r3, #1
   1b49a:	687a      	ldr	r2, [r7, #4]
   1b49c:	4413      	add	r3, r2
   1b49e:	607b      	str	r3, [r7, #4]
        }
    }
    return num / denom;
   1b4a0:	687a      	ldr	r2, [r7, #4]
   1b4a2:	683b      	ldr	r3, [r7, #0]
   1b4a4:	fb92 f3f3 	sdiv	r3, r2, r3
}
   1b4a8:	4618      	mov	r0, r3
   1b4aa:	370c      	adds	r7, #12
   1b4ac:	46bd      	mov	sp, r7
   1b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b4b2:	4770      	bx	lr

0001b4b4 <printf>:
int putchar(int c);
int puts(const char *s);
int vsnprintf(char *str, size_t size, const char *fmt, va_list ap);
int snprintf(char *str, size_t size, const char *fmt, ...);

int printf(const char *fmt, ...) {
   1b4b4:	b40f      	push	{r0, r1, r2, r3}
   1b4b6:	b580      	push	{r7, lr}
   1b4b8:	b082      	sub	sp, #8
   1b4ba:	af00      	add	r7, sp, #0
    va_list ap;
    va_start(ap, fmt);
   1b4bc:	f107 0314 	add.w	r3, r7, #20
   1b4c0:	603b      	str	r3, [r7, #0]
    int ret = mp_vprintf(&mp_plat_print, fmt, ap);
   1b4c2:	683a      	ldr	r2, [r7, #0]
   1b4c4:	6939      	ldr	r1, [r7, #16]
   1b4c6:	4806      	ldr	r0, [pc, #24]	; (1b4e0 <printf+0x2c>)
   1b4c8:	f7e6 fdcc 	bl	2064 <mp_vprintf>
   1b4cc:	6078      	str	r0, [r7, #4]
    va_end(ap);
    return ret;
   1b4ce:	687b      	ldr	r3, [r7, #4]
}
   1b4d0:	4618      	mov	r0, r3
   1b4d2:	3708      	adds	r7, #8
   1b4d4:	46bd      	mov	sp, r7
   1b4d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1b4da:	b004      	add	sp, #16
   1b4dc:	4770      	bx	lr
   1b4de:	bf00      	nop
   1b4e0:	0001f884 	.word	0x0001f884

0001b4e4 <vprintf>:

int vprintf(const char *fmt, va_list ap) {
   1b4e4:	b580      	push	{r7, lr}
   1b4e6:	b082      	sub	sp, #8
   1b4e8:	af00      	add	r7, sp, #0
   1b4ea:	6078      	str	r0, [r7, #4]
   1b4ec:	6039      	str	r1, [r7, #0]
    return mp_vprintf(&mp_plat_print, fmt, ap);
   1b4ee:	683a      	ldr	r2, [r7, #0]
   1b4f0:	6879      	ldr	r1, [r7, #4]
   1b4f2:	4804      	ldr	r0, [pc, #16]	; (1b504 <vprintf+0x20>)
   1b4f4:	f7e6 fdb6 	bl	2064 <mp_vprintf>
   1b4f8:	4603      	mov	r3, r0
}
   1b4fa:	4618      	mov	r0, r3
   1b4fc:	3708      	adds	r7, #8
   1b4fe:	46bd      	mov	sp, r7
   1b500:	bd80      	pop	{r7, pc}
   1b502:	bf00      	nop
   1b504:	0001f884 	.word	0x0001f884

0001b508 <putchar>:

// need this because gcc optimises printf("%c", c) -> putchar(c), and printf("a") -> putchar('a')
int putchar(int c) {
   1b508:	b580      	push	{r7, lr}
   1b50a:	b084      	sub	sp, #16
   1b50c:	af00      	add	r7, sp, #0
   1b50e:	6078      	str	r0, [r7, #4]
    char chr = c;
   1b510:	687b      	ldr	r3, [r7, #4]
   1b512:	b2db      	uxtb	r3, r3
   1b514:	73fb      	strb	r3, [r7, #15]
    mp_hal_stdout_tx_strn_cooked(&chr, 1);
   1b516:	f107 030f 	add.w	r3, r7, #15
   1b51a:	2101      	movs	r1, #1
   1b51c:	4618      	mov	r0, r3
   1b51e:	f001 f9b9 	bl	1c894 <mp_hal_stdout_tx_strn_cooked>
    return chr;
   1b522:	7bfb      	ldrb	r3, [r7, #15]
}
   1b524:	4618      	mov	r0, r3
   1b526:	3710      	adds	r7, #16
   1b528:	46bd      	mov	sp, r7
   1b52a:	bd80      	pop	{r7, pc}

0001b52c <puts>:

// need this because gcc optimises printf("string\n") -> puts("string")
int puts(const char *s) {
   1b52c:	b580      	push	{r7, lr}
   1b52e:	b084      	sub	sp, #16
   1b530:	af00      	add	r7, sp, #0
   1b532:	6078      	str	r0, [r7, #4]
    mp_hal_stdout_tx_strn_cooked(s, strlen(s));
   1b534:	6878      	ldr	r0, [r7, #4]
   1b536:	f001 fd65 	bl	1d004 <strlen>
   1b53a:	4603      	mov	r3, r0
   1b53c:	4619      	mov	r1, r3
   1b53e:	6878      	ldr	r0, [r7, #4]
   1b540:	f001 f9a8 	bl	1c894 <mp_hal_stdout_tx_strn_cooked>
    char chr = '\n';
   1b544:	230a      	movs	r3, #10
   1b546:	73fb      	strb	r3, [r7, #15]
    mp_hal_stdout_tx_strn_cooked(&chr, 1);
   1b548:	f107 030f 	add.w	r3, r7, #15
   1b54c:	2101      	movs	r1, #1
   1b54e:	4618      	mov	r0, r3
   1b550:	f001 f9a0 	bl	1c894 <mp_hal_stdout_tx_strn_cooked>
    return 1;
   1b554:	2301      	movs	r3, #1
}
   1b556:	4618      	mov	r0, r3
   1b558:	3710      	adds	r7, #16
   1b55a:	46bd      	mov	sp, r7
   1b55c:	bd80      	pop	{r7, pc}
   1b55e:	bf00      	nop

0001b560 <strn_print_strn>:
typedef struct _strn_print_env_t {
    char *cur;
    size_t remain;
} strn_print_env_t;

STATIC void strn_print_strn(void *data, const char *str, size_t len) {
   1b560:	b580      	push	{r7, lr}
   1b562:	b086      	sub	sp, #24
   1b564:	af00      	add	r7, sp, #0
   1b566:	60f8      	str	r0, [r7, #12]
   1b568:	60b9      	str	r1, [r7, #8]
   1b56a:	607a      	str	r2, [r7, #4]
    strn_print_env_t *strn_print_env = data;
   1b56c:	68fb      	ldr	r3, [r7, #12]
   1b56e:	617b      	str	r3, [r7, #20]
    if (len > strn_print_env->remain) {
   1b570:	697b      	ldr	r3, [r7, #20]
   1b572:	685a      	ldr	r2, [r3, #4]
   1b574:	687b      	ldr	r3, [r7, #4]
   1b576:	429a      	cmp	r2, r3
   1b578:	d202      	bcs.n	1b580 <strn_print_strn+0x20>
        len = strn_print_env->remain;
   1b57a:	697b      	ldr	r3, [r7, #20]
   1b57c:	685b      	ldr	r3, [r3, #4]
   1b57e:	607b      	str	r3, [r7, #4]
    }
    memcpy(strn_print_env->cur, str, len);
   1b580:	697b      	ldr	r3, [r7, #20]
   1b582:	681b      	ldr	r3, [r3, #0]
   1b584:	687a      	ldr	r2, [r7, #4]
   1b586:	68b9      	ldr	r1, [r7, #8]
   1b588:	4618      	mov	r0, r3
   1b58a:	f001 fc01 	bl	1cd90 <memcpy>
    strn_print_env->cur += len;
   1b58e:	697b      	ldr	r3, [r7, #20]
   1b590:	681a      	ldr	r2, [r3, #0]
   1b592:	687b      	ldr	r3, [r7, #4]
   1b594:	441a      	add	r2, r3
   1b596:	697b      	ldr	r3, [r7, #20]
   1b598:	601a      	str	r2, [r3, #0]
    strn_print_env->remain -= len;
   1b59a:	697b      	ldr	r3, [r7, #20]
   1b59c:	685a      	ldr	r2, [r3, #4]
   1b59e:	687b      	ldr	r3, [r7, #4]
   1b5a0:	1ad2      	subs	r2, r2, r3
   1b5a2:	697b      	ldr	r3, [r7, #20]
   1b5a4:	605a      	str	r2, [r3, #4]
}
   1b5a6:	bf00      	nop
   1b5a8:	3718      	adds	r7, #24
   1b5aa:	46bd      	mov	sp, r7
   1b5ac:	bd80      	pop	{r7, pc}
   1b5ae:	bf00      	nop

0001b5b0 <vsnprintf>:
// uClibc requires this alias to be defined, or there may be link errors
// when linkings against it statically.
int __GI_vsnprintf(char *str, size_t size, const char *fmt, va_list ap) __attribute__((weak, alias ("vsnprintf")));
#endif

int vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
   1b5b0:	b580      	push	{r7, lr}
   1b5b2:	b08a      	sub	sp, #40	; 0x28
   1b5b4:	af00      	add	r7, sp, #0
   1b5b6:	60f8      	str	r0, [r7, #12]
   1b5b8:	60b9      	str	r1, [r7, #8]
   1b5ba:	607a      	str	r2, [r7, #4]
   1b5bc:	603b      	str	r3, [r7, #0]
    strn_print_env_t strn_print_env = {str, size};
   1b5be:	68fb      	ldr	r3, [r7, #12]
   1b5c0:	61fb      	str	r3, [r7, #28]
   1b5c2:	68bb      	ldr	r3, [r7, #8]
   1b5c4:	623b      	str	r3, [r7, #32]
    mp_print_t print = {&strn_print_env, strn_print_strn};
   1b5c6:	f107 031c 	add.w	r3, r7, #28
   1b5ca:	617b      	str	r3, [r7, #20]
   1b5cc:	4b0e      	ldr	r3, [pc, #56]	; (1b608 <vsnprintf+0x58>)
   1b5ce:	61bb      	str	r3, [r7, #24]
    int len = mp_vprintf(&print, fmt, ap);
   1b5d0:	f107 0314 	add.w	r3, r7, #20
   1b5d4:	683a      	ldr	r2, [r7, #0]
   1b5d6:	6879      	ldr	r1, [r7, #4]
   1b5d8:	4618      	mov	r0, r3
   1b5da:	f7e6 fd43 	bl	2064 <mp_vprintf>
   1b5de:	6278      	str	r0, [r7, #36]	; 0x24
    // add terminating null byte
    if (size > 0) {
   1b5e0:	68bb      	ldr	r3, [r7, #8]
   1b5e2:	2b00      	cmp	r3, #0
   1b5e4:	d00a      	beq.n	1b5fc <vsnprintf+0x4c>
        if (strn_print_env.remain == 0) {
   1b5e6:	6a3b      	ldr	r3, [r7, #32]
   1b5e8:	2b00      	cmp	r3, #0
   1b5ea:	d104      	bne.n	1b5f6 <vsnprintf+0x46>
            strn_print_env.cur[-1] = 0;
   1b5ec:	69fb      	ldr	r3, [r7, #28]
   1b5ee:	3b01      	subs	r3, #1
   1b5f0:	2200      	movs	r2, #0
   1b5f2:	701a      	strb	r2, [r3, #0]
   1b5f4:	e002      	b.n	1b5fc <vsnprintf+0x4c>
        } else {
            strn_print_env.cur[0] = 0;
   1b5f6:	69fb      	ldr	r3, [r7, #28]
   1b5f8:	2200      	movs	r2, #0
   1b5fa:	701a      	strb	r2, [r3, #0]
        }
    }
    return len;
   1b5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1b5fe:	4618      	mov	r0, r3
   1b600:	3728      	adds	r7, #40	; 0x28
   1b602:	46bd      	mov	sp, r7
   1b604:	bd80      	pop	{r7, pc}
   1b606:	bf00      	nop
   1b608:	0001b561 	.word	0x0001b561

0001b60c <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...) {
   1b60c:	b40c      	push	{r2, r3}
   1b60e:	b580      	push	{r7, lr}
   1b610:	b084      	sub	sp, #16
   1b612:	af00      	add	r7, sp, #0
   1b614:	6078      	str	r0, [r7, #4]
   1b616:	6039      	str	r1, [r7, #0]
    va_list ap;
    va_start(ap, fmt);
   1b618:	f107 031c 	add.w	r3, r7, #28
   1b61c:	60bb      	str	r3, [r7, #8]
    int ret = vsnprintf(str, size, fmt, ap);
   1b61e:	68bb      	ldr	r3, [r7, #8]
   1b620:	69ba      	ldr	r2, [r7, #24]
   1b622:	6839      	ldr	r1, [r7, #0]
   1b624:	6878      	ldr	r0, [r7, #4]
   1b626:	f7ff ffc3 	bl	1b5b0 <vsnprintf>
   1b62a:	60f8      	str	r0, [r7, #12]
    va_end(ap);
    return ret;
   1b62c:	68fb      	ldr	r3, [r7, #12]
}
   1b62e:	4618      	mov	r0, r3
   1b630:	3710      	adds	r7, #16
   1b632:	46bd      	mov	sp, r7
   1b634:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1b638:	b002      	add	sp, #8
   1b63a:	4770      	bx	lr

0001b63c <do_str>:
#include "driverlib/gpio.h"
#include "driverlib/rom.h"
#include "driverlib/rom_map.h"

#if MICROPY_ENABLE_COMPILER
void do_str(const char *src, mp_parse_input_kind_t input_kind) {
   1b63c:	b580      	push	{r7, lr}
   1b63e:	b094      	sub	sp, #80	; 0x50
   1b640:	af00      	add	r7, sp, #0
   1b642:	6078      	str	r0, [r7, #4]
   1b644:	6039      	str	r1, [r7, #0]
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   1b646:	f107 0314 	add.w	r3, r7, #20
   1b64a:	4618      	mov	r0, r3
   1b64c:	f7e4 fe36 	bl	2bc <nlr_push>
   1b650:	4603      	mov	r3, r0
   1b652:	2b00      	cmp	r3, #0
   1b654:	d121      	bne.n	1b69a <do_str+0x5e>
        mp_lexer_t *lex = mp_lexer_new_from_str_len(MP_QSTR__lt_stdin_gt_, src, strlen(src), 0);
   1b656:	6878      	ldr	r0, [r7, #4]
   1b658:	f001 fcd4 	bl	1d004 <strlen>
   1b65c:	4602      	mov	r2, r0
   1b65e:	2300      	movs	r3, #0
   1b660:	6879      	ldr	r1, [r7, #4]
   1b662:	2038      	movs	r0, #56	; 0x38
   1b664:	f7e8 f932 	bl	38cc <mp_lexer_new_from_str_len>
   1b668:	64f8      	str	r0, [r7, #76]	; 0x4c
        qstr source_name = lex->source_name;
   1b66a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b66c:	681b      	ldr	r3, [r3, #0]
   1b66e:	64bb      	str	r3, [r7, #72]	; 0x48
        mp_parse_tree_t parse_tree = mp_parse(lex, input_kind);
   1b670:	f107 030c 	add.w	r3, r7, #12
   1b674:	683a      	ldr	r2, [r7, #0]
   1b676:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1b678:	4618      	mov	r0, r3
   1b67a:	f7e8 ff23 	bl	44c4 <mp_parse>
        mp_obj_t module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, true);
   1b67e:	f107 000c 	add.w	r0, r7, #12
   1b682:	2301      	movs	r3, #1
   1b684:	2200      	movs	r2, #0
   1b686:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1b688:	f7ee f916 	bl	98b8 <mp_compile>
   1b68c:	6478      	str	r0, [r7, #68]	; 0x44
        mp_call_function_0(module_fun);
   1b68e:	6c78      	ldr	r0, [r7, #68]	; 0x44
   1b690:	f7f0 fbaa 	bl	bde8 <mp_call_function_0>
        nlr_pop();
   1b694:	f7e4 fe00 	bl	298 <nlr_pop>
    } else {
        // uncaught exception
        mp_obj_print_exception(&mp_plat_print, (mp_obj_t)nlr.ret_val);
    }
}
   1b698:	e004      	b.n	1b6a4 <do_str+0x68>
        mp_obj_print_exception(&mp_plat_print, (mp_obj_t)nlr.ret_val);
   1b69a:	69bb      	ldr	r3, [r7, #24]
   1b69c:	4619      	mov	r1, r3
   1b69e:	4803      	ldr	r0, [pc, #12]	; (1b6ac <do_str+0x70>)
   1b6a0:	f7f2 f966 	bl	d970 <mp_obj_print_exception>
}
   1b6a4:	bf00      	nop
   1b6a6:	3750      	adds	r7, #80	; 0x50
   1b6a8:	46bd      	mov	sp, r7
   1b6aa:	bd80      	pop	{r7, pc}
   1b6ac:	0001f884 	.word	0x0001f884

0001b6b0 <main>:
static char *stack_top;
#if MICROPY_ENABLE_GC
static char heap[2048];
#endif

int main(int argc, char **argv) {
   1b6b0:	b580      	push	{r7, lr}
   1b6b2:	b084      	sub	sp, #16
   1b6b4:	af00      	add	r7, sp, #0
   1b6b6:	6078      	str	r0, [r7, #4]
   1b6b8:	6039      	str	r1, [r7, #0]
    int stack_dummy;
    stack_top = (char*)&stack_dummy;
   1b6ba:	4a0a      	ldr	r2, [pc, #40]	; (1b6e4 <main+0x34>)
   1b6bc:	f107 030c 	add.w	r3, r7, #12
   1b6c0:	6013      	str	r3, [r2, #0]

    #if MICROPY_ENABLE_GC
    gc_init(heap, heap + sizeof(heap));
   1b6c2:	4b09      	ldr	r3, [pc, #36]	; (1b6e8 <main+0x38>)
   1b6c4:	4619      	mov	r1, r3
   1b6c6:	4809      	ldr	r0, [pc, #36]	; (1b6ec <main+0x3c>)
   1b6c8:	f7e4 ff68 	bl	59c <gc_init>
    #endif
    mp_init();
   1b6cc:	f7ef ff58 	bl	b580 <mp_init>
        if (pyexec_event_repl_process_char(c)) {
            break;
        }
    }
    #else
    pyexec_friendly_repl();
   1b6d0:	f001 fa60 	bl	1cb94 <pyexec_friendly_repl>
    //do_str("print('hello world!', list(x+1 for x in range(10)), end='eol\\n')", MP_PARSE_SINGLE_INPUT);
    //do_str("for i in range(10):\r\n  print(i)", MP_PARSE_FILE_INPUT);
    #else
    pyexec_frozen_module("frozentest.py");
    #endif
    mp_deinit();
   1b6d4:	f7ef ff7a 	bl	b5cc <mp_deinit>
    return 0;
   1b6d8:	2300      	movs	r3, #0
}
   1b6da:	4618      	mov	r0, r3
   1b6dc:	3710      	adds	r7, #16
   1b6de:	46bd      	mov	sp, r7
   1b6e0:	bd80      	pop	{r7, pc}
   1b6e2:	bf00      	nop
   1b6e4:	200008c0 	.word	0x200008c0
   1b6e8:	200010c4 	.word	0x200010c4
   1b6ec:	200008c4 	.word	0x200008c4

0001b6f0 <gc_collect>:

void gc_collect(void) {
   1b6f0:	b580      	push	{r7, lr}
   1b6f2:	b082      	sub	sp, #8
   1b6f4:	af00      	add	r7, sp, #0
    // WARNING: This gc_collect implementation doesn't try to get root
    // pointers from CPU registers, and thus may function incorrectly.
    void *dummy;
    gc_collect_start();
   1b6f6:	f7e4 ffb5 	bl	664 <gc_collect_start>
    gc_collect_root(&dummy, ((mp_uint_t)stack_top - (mp_uint_t)&dummy) / sizeof(mp_uint_t));
   1b6fa:	4b09      	ldr	r3, [pc, #36]	; (1b720 <gc_collect+0x30>)
   1b6fc:	681b      	ldr	r3, [r3, #0]
   1b6fe:	461a      	mov	r2, r3
   1b700:	1d3b      	adds	r3, r7, #4
   1b702:	1ad3      	subs	r3, r2, r3
   1b704:	089a      	lsrs	r2, r3, #2
   1b706:	1d3b      	adds	r3, r7, #4
   1b708:	4611      	mov	r1, r2
   1b70a:	4618      	mov	r0, r3
   1b70c:	f7e4 ffea 	bl	6e4 <gc_collect_root>
    gc_collect_end();
   1b710:	f7e5 f820 	bl	754 <gc_collect_end>
    gc_dump_info();
   1b714:	f7e5 fb6a 	bl	dec <gc_dump_info>
}
   1b718:	bf00      	nop
   1b71a:	3708      	adds	r7, #8
   1b71c:	46bd      	mov	sp, r7
   1b71e:	bd80      	pop	{r7, pc}
   1b720:	200008c0 	.word	0x200008c0

0001b724 <mp_lexer_new_from_file>:

mp_lexer_t *mp_lexer_new_from_file(const char *filename) {
   1b724:	b580      	push	{r7, lr}
   1b726:	b082      	sub	sp, #8
   1b728:	af00      	add	r7, sp, #0
   1b72a:	6078      	str	r0, [r7, #4]
    mp_raise_OSError(MP_ENOENT);
   1b72c:	2002      	movs	r0, #2
   1b72e:	f7f1 fc4d 	bl	cfcc <mp_raise_OSError>
   1b732:	bf00      	nop

0001b734 <mp_import_stat>:
}

mp_import_stat_t mp_import_stat(const char *path) { // @suppress("Type cannot be resolved")
   1b734:	b480      	push	{r7}
   1b736:	b083      	sub	sp, #12
   1b738:	af00      	add	r7, sp, #0
   1b73a:	6078      	str	r0, [r7, #4]
    return MP_IMPORT_STAT_NO_EXIST;
   1b73c:	2300      	movs	r3, #0
}
   1b73e:	4618      	mov	r0, r3
   1b740:	370c      	adds	r7, #12
   1b742:	46bd      	mov	sp, r7
   1b744:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b748:	4770      	bx	lr
   1b74a:	bf00      	nop

0001b74c <mp_builtin_open>:

mp_obj_t mp_builtin_open(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   1b74c:	b480      	push	{r7}
   1b74e:	b085      	sub	sp, #20
   1b750:	af00      	add	r7, sp, #0
   1b752:	60f8      	str	r0, [r7, #12]
   1b754:	60b9      	str	r1, [r7, #8]
   1b756:	607a      	str	r2, [r7, #4]
    return mp_const_none;
   1b758:	4b03      	ldr	r3, [pc, #12]	; (1b768 <mp_builtin_open+0x1c>)
}
   1b75a:	4618      	mov	r0, r3
   1b75c:	3714      	adds	r7, #20
   1b75e:	46bd      	mov	sp, r7
   1b760:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b764:	4770      	bx	lr
   1b766:	bf00      	nop
   1b768:	000234d4 	.word	0x000234d4

0001b76c <nlr_jump_fail>:
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_open_obj, 1, mp_builtin_open);

void nlr_jump_fail(void *val) {
   1b76c:	b480      	push	{r7}
   1b76e:	b083      	sub	sp, #12
   1b770:	af00      	add	r7, sp, #0
   1b772:	6078      	str	r0, [r7, #4]
    while (1);
   1b774:	e7fe      	b.n	1b774 <nlr_jump_fail+0x8>
   1b776:	bf00      	nop

0001b778 <__fatal_error>:
}

void NORETURN __fatal_error(const char *msg) {
   1b778:	b480      	push	{r7}
   1b77a:	b083      	sub	sp, #12
   1b77c:	af00      	add	r7, sp, #0
   1b77e:	6078      	str	r0, [r7, #4]
    while (1);
   1b780:	e7fe      	b.n	1b780 <__fatal_error+0x8>
   1b782:	bf00      	nop

0001b784 <__assert_func>:
}

#ifndef NDEBUG
void MP_WEAK __assert_func(const char *file, int line, const char *func, const char *expr) {
   1b784:	b580      	push	{r7, lr}
   1b786:	b084      	sub	sp, #16
   1b788:	af00      	add	r7, sp, #0
   1b78a:	60f8      	str	r0, [r7, #12]
   1b78c:	60b9      	str	r1, [r7, #8]
   1b78e:	607a      	str	r2, [r7, #4]
   1b790:	603b      	str	r3, [r7, #0]
    printf("Assertion '%s' failed, at file %s:%d\n", expr, file, line);
   1b792:	68bb      	ldr	r3, [r7, #8]
   1b794:	68fa      	ldr	r2, [r7, #12]
   1b796:	6839      	ldr	r1, [r7, #0]
   1b798:	4802      	ldr	r0, [pc, #8]	; (1b7a4 <__assert_func+0x20>)
   1b79a:	f7ff fe8b 	bl	1b4b4 <printf>
    __fatal_error("Assertion failed");
   1b79e:	4802      	ldr	r0, [pc, #8]	; (1b7a8 <__assert_func+0x24>)
   1b7a0:	f7ff ffea 	bl	1b778 <__fatal_error>
   1b7a4:	00024d54 	.word	0x00024d54
   1b7a8:	00024d7c 	.word	0x00024d7c

0001b7ac <_start>:
//    0,
//    (uint32_t)&Default_Handler, // PendSV_Handler
//    (uint32_t)&Default_Handler, // SysTick_Handler
//};

void _start(void) {
   1b7ac:	b580      	push	{r7, lr}
   1b7ae:	af00      	add	r7, sp, #0
    // when we get here: stack is initialised, bss is clear, data is copied

    // SCB->CCR: enable 8-byte stack alignment for IRQ handlers, in accord with EABI
    *((volatile uint32_t*)0xe000ed14) |= 1 << 9;
   1b7b0:	4a06      	ldr	r2, [pc, #24]	; (1b7cc <_start+0x20>)
   1b7b2:	4b06      	ldr	r3, [pc, #24]	; (1b7cc <_start+0x20>)
   1b7b4:	681b      	ldr	r3, [r3, #0]
   1b7b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1b7ba:	6013      	str	r3, [r2, #0]

    // initialise the cpu and peripherals
    #if MICROPY_MIN_USE_TM4C123_MCU
    void tm4c123_init(void);
    tm4c123_init();
   1b7bc:	f000 f808 	bl	1b7d0 <tm4c123_init>
    #endif

    // now that we have a basic system up and running we can call main
    main(0, NULL);
   1b7c0:	2100      	movs	r1, #0
   1b7c2:	2000      	movs	r0, #0
   1b7c4:	f7ff ff74 	bl	1b6b0 <main>

    // we must not return
    for (;;) {
    }
   1b7c8:	e7fe      	b.n	1b7c8 <_start+0x1c>
   1b7ca:	bf00      	nop
   1b7cc:	e000ed14 	.word	0xe000ed14

0001b7d0 <tm4c123_init>:

//#define SYSCTL ((periph_sysctl_t*)  0x400FE000)



void tm4c123_init(void) {
   1b7d0:	b580      	push	{r7, lr}
   1b7d2:	af00      	add	r7, sp, #0
    // basic MCU config

    // set system clock to 80MHz
    SYSCTL->RCC |= (uint32_t)0x00000800;   // set BYPASS bit
   1b7d4:	4a4d      	ldr	r2, [pc, #308]	; (1b90c <tm4c123_init+0x13c>)
   1b7d6:	4b4d      	ldr	r3, [pc, #308]	; (1b90c <tm4c123_init+0x13c>)
   1b7d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b7da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1b7de:	6613      	str	r3, [r2, #96]	; 0x60
    SYSCTL->RCC2 |= (uint32_t)0xC0000800;  // set BYPASS2 bit, DIV400 and USERCC2
   1b7e0:	4a4a      	ldr	r2, [pc, #296]	; (1b90c <tm4c123_init+0x13c>)
   1b7e2:	4b4a      	ldr	r3, [pc, #296]	; (1b90c <tm4c123_init+0x13c>)
   1b7e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b7e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   1b7ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1b7ee:	6713      	str	r3, [r2, #112]	; 0x70
    SYSCTL->RCC &= (uint32_t)0xFFBFFFFF;   // clear USESYSDIV bit
   1b7f0:	4a46      	ldr	r2, [pc, #280]	; (1b90c <tm4c123_init+0x13c>)
   1b7f2:	4b46      	ldr	r3, [pc, #280]	; (1b90c <tm4c123_init+0x13c>)
   1b7f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b7f6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1b7fa:	6613      	str	r3, [r2, #96]	; 0x60
    SYSCTL->RCC = (SYSCTL->RCC & (uint32_t)0xFFFFF83F) | (uint32_t)0x00000B70;    // XTAL to 16 MHz
   1b7fc:	4a43      	ldr	r2, [pc, #268]	; (1b90c <tm4c123_init+0x13c>)
   1b7fe:	4b43      	ldr	r3, [pc, #268]	; (1b90c <tm4c123_init+0x13c>)
   1b800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b802:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   1b806:	f443 6337 	orr.w	r3, r3, #2928	; 0xb70
   1b80a:	6613      	str	r3, [r2, #96]	; 0x60
    SYSCTL->MISC &= 0xFFFFFFBF;            // clear PLLLRIS bit
   1b80c:	4a3f      	ldr	r2, [pc, #252]	; (1b90c <tm4c123_init+0x13c>)
   1b80e:	4b3f      	ldr	r3, [pc, #252]	; (1b90c <tm4c123_init+0x13c>)
   1b810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1b812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1b816:	6593      	str	r3, [r2, #88]	; 0x58
    SYSCTL->RCC2 &= (uint32_t)0xFFFFDFFF;  // clear PWRDN2 Bit to enable PLL
   1b818:	4a3c      	ldr	r2, [pc, #240]	; (1b90c <tm4c123_init+0x13c>)
   1b81a:	4b3c      	ldr	r3, [pc, #240]	; (1b90c <tm4c123_init+0x13c>)
   1b81c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b81e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1b822:	6713      	str	r3, [r2, #112]	; 0x70
    SYSCTL->RCC2 = (SYSCTL->RCC2 & (uint32_t)0xE03FFFFF) | (uint32_t)0x01000000;  // Set SYSDIV2 to 0x2 for 80MHz
   1b824:	4a39      	ldr	r2, [pc, #228]	; (1b90c <tm4c123_init+0x13c>)
   1b826:	4b39      	ldr	r3, [pc, #228]	; (1b90c <tm4c123_init+0x13c>)
   1b828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b82a:	f023 53fe 	bic.w	r3, r3, #532676608	; 0x1fc00000
   1b82e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1b832:	6713      	str	r3, [r2, #112]	; 0x70
    SYSCTL->RCC |= (uint32_t)0x00400000;   // set USESYSDIV bit
   1b834:	4a35      	ldr	r2, [pc, #212]	; (1b90c <tm4c123_init+0x13c>)
   1b836:	4b35      	ldr	r3, [pc, #212]	; (1b90c <tm4c123_init+0x13c>)
   1b838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b83a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1b83e:	6613      	str	r3, [r2, #96]	; 0x60
    while(!(SYSCTL->RIS & 0x00000040)){};  // wait for Pll to lock, PLLLRIS bit
   1b840:	bf00      	nop
   1b842:	4b32      	ldr	r3, [pc, #200]	; (1b90c <tm4c123_init+0x13c>)
   1b844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1b846:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1b84a:	2b00      	cmp	r3, #0
   1b84c:	d0f9      	beq.n	1b842 <tm4c123_init+0x72>
    SYSCTL->RCC2 &= 0xFFFFF7FF;            // clear BYPASS2 bit, clears BYPASS as well
   1b84e:	4a2f      	ldr	r2, [pc, #188]	; (1b90c <tm4c123_init+0x13c>)
   1b850:	4b2e      	ldr	r3, [pc, #184]	; (1b90c <tm4c123_init+0x13c>)
   1b852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b854:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1b858:	6713      	str	r3, [r2, #112]	; 0x70
    // write final configuration
    SYSCTL->RCC = (uint32_t)(0x07C00550);  // 0b0000 0 1111 1 0 0 000 000 0 0 0 10101 01 000 0
   1b85a:	4b2c      	ldr	r3, [pc, #176]	; (1b90c <tm4c123_init+0x13c>)
   1b85c:	4a2c      	ldr	r2, [pc, #176]	; (1b910 <tm4c123_init+0x140>)
   1b85e:	661a      	str	r2, [r3, #96]	; 0x60
    SYSCTL->RCC2 = (uint32_t)(0xC1000000); // 0b 1100 0001 0000 0000 0000 0000 0000 0000
   1b860:	4b2a      	ldr	r3, [pc, #168]	; (1b90c <tm4c123_init+0x13c>)
   1b862:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
   1b866:	671a      	str	r2, [r3, #112]	; 0x70

    // enable high performance GPIO BUS Ctl
    SYSCTL->GPIOHBCTL = 0x0000003F;
   1b868:	4b28      	ldr	r3, [pc, #160]	; (1b90c <tm4c123_init+0x13c>)
   1b86a:	223f      	movs	r2, #63	; 0x3f
   1b86c:	66da      	str	r2, [r3, #108]	; 0x6c

    // enable GPIO Port F
        SYSCTL->RCGCGPIO |= 0x00000020;
   1b86e:	4a27      	ldr	r2, [pc, #156]	; (1b90c <tm4c123_init+0x13c>)
   1b870:	4b26      	ldr	r3, [pc, #152]	; (1b90c <tm4c123_init+0x13c>)
   1b872:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   1b876:	f043 0320 	orr.w	r3, r3, #32
   1b87a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    //*((volatile uint32_t*)0x400FE608) = 0x00000021;
    while( !(SYSCTL->PRGPIO & 0x00000020)){};
   1b87e:	bf00      	nop
   1b880:	4b22      	ldr	r3, [pc, #136]	; (1b90c <tm4c123_init+0x13c>)
   1b882:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
   1b886:	f003 0320 	and.w	r3, r3, #32
   1b88a:	2b00      	cmp	r3, #0
   1b88c:	d0f8      	beq.n	1b880 <tm4c123_init+0xb0>
//    gpio_high(GPIOF, 3);
//    //*((volatile uint32_t*)0x4005D3FC) = 0x00000007;

    // enable UART0 at 9600 baud (TX=A1, RX=A0)
    // enable UART0
    SYSCTL->RCGCUART = 0x00000001;
   1b88e:	4b1f      	ldr	r3, [pc, #124]	; (1b90c <tm4c123_init+0x13c>)
   1b890:	2201      	movs	r2, #1
   1b892:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
    //*((volatile uint32_t*)0x400FE618) = 0x00000001;
    while(SYSCTL->PRUART != 0x00000001){};
   1b896:	bf00      	nop
   1b898:	4b1c      	ldr	r3, [pc, #112]	; (1b90c <tm4c123_init+0x13c>)
   1b89a:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
   1b89e:	2b01      	cmp	r3, #1
   1b8a0:	d1fa      	bne.n	1b898 <tm4c123_init+0xc8>
    //while( *((volatile uint32_t*)0x400FEA18) != 0x00000001){};

    // enable GPIO Port A
    SYSCTL->RCGCGPIO |= 0x00000001;
   1b8a2:	4a1a      	ldr	r2, [pc, #104]	; (1b90c <tm4c123_init+0x13c>)
   1b8a4:	4b19      	ldr	r3, [pc, #100]	; (1b90c <tm4c123_init+0x13c>)
   1b8a6:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   1b8aa:	f043 0301 	orr.w	r3, r3, #1
   1b8ae:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    while( !(SYSCTL->PRGPIO & 0x00000001)){};
   1b8b2:	bf00      	nop
   1b8b4:	4b15      	ldr	r3, [pc, #84]	; (1b90c <tm4c123_init+0x13c>)
   1b8b6:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
   1b8ba:	f003 0301 	and.w	r3, r3, #1
   1b8be:	2b00      	cmp	r3, #0
   1b8c0:	d0f8      	beq.n	1b8b4 <tm4c123_init+0xe4>

//    // GPIOA already configured for UART0 after reset
//    gpio_init(GPIOA, 0, GPIO_MODE_ALT, GPIO_PULL_NONE, 1);
//    gpio_init(GPIOA, 1, GPIO_MODE_ALT, GPIO_PULL_NONE, 1);

    MAP_GPIOPinTypeUART(GPIO_PORTA_AHB_BASE, GPIO_PIN_0 | GPIO_PIN_1);
   1b8c2:	2103      	movs	r1, #3
   1b8c4:	4813      	ldr	r0, [pc, #76]	; (1b914 <tm4c123_init+0x144>)
   1b8c6:	f002 fa24 	bl	1dd12 <GPIOPinTypeUART>

    // BRD = IBRD + FRAC = UARTSysClk / (ClkDiv * BaudRate)
    // 520.8333 = 104  + 0.166 = 80MHz      / (16     * 9600    )
    // FBRD = (0.833333 * 64 + 0.5) ~ 53
    UART0->CTL &= ~0x00000001;
   1b8ca:	4a13      	ldr	r2, [pc, #76]	; (1b918 <tm4c123_init+0x148>)
   1b8cc:	4b12      	ldr	r3, [pc, #72]	; (1b918 <tm4c123_init+0x148>)
   1b8ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b8d0:	f023 0301 	bic.w	r3, r3, #1
   1b8d4:	6313      	str	r3, [r2, #48]	; 0x30
    UART0->IBRD = 0x00000208;
   1b8d6:	4b10      	ldr	r3, [pc, #64]	; (1b918 <tm4c123_init+0x148>)
   1b8d8:	f44f 7202 	mov.w	r2, #520	; 0x208
   1b8dc:	625a      	str	r2, [r3, #36]	; 0x24
    UART0->FBRD = 0x00000035;
   1b8de:	4b0e      	ldr	r3, [pc, #56]	; (1b918 <tm4c123_init+0x148>)
   1b8e0:	2235      	movs	r2, #53	; 0x35
   1b8e2:	629a      	str	r2, [r3, #40]	; 0x28
    UART0->LCRH = 0x00000060; // no stick parity, word length 8bit, FIFO enable, one STOP bit, odd parity, no parity check, no break
   1b8e4:	4b0c      	ldr	r3, [pc, #48]	; (1b918 <tm4c123_init+0x148>)
   1b8e6:	2260      	movs	r2, #96	; 0x60
   1b8e8:	62da      	str	r2, [r3, #44]	; 0x2c
    UART0->CC = 0x00000000;   // use SysClock
   1b8ea:	4b0b      	ldr	r3, [pc, #44]	; (1b918 <tm4c123_init+0x148>)
   1b8ec:	2200      	movs	r2, #0
   1b8ee:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    UART0->CTL = 0x00000300; // disable cts & rts, RXE, TXE, no loopback, 16x oversampling, TXRIS on IFLS match, no smart card, no low power, no SIR, UART enabled
   1b8f2:	4b09      	ldr	r3, [pc, #36]	; (1b918 <tm4c123_init+0x148>)
   1b8f4:	f44f 7240 	mov.w	r2, #768	; 0x300
   1b8f8:	631a      	str	r2, [r3, #48]	; 0x30
    UART0->CTL |= 0x00000001;
   1b8fa:	4a07      	ldr	r2, [pc, #28]	; (1b918 <tm4c123_init+0x148>)
   1b8fc:	4b06      	ldr	r3, [pc, #24]	; (1b918 <tm4c123_init+0x148>)
   1b8fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b900:	f043 0301 	orr.w	r3, r3, #1
   1b904:	6313      	str	r3, [r2, #48]	; 0x30
    // to change settings in active mode: page 918 of reference
}
   1b906:	bf00      	nop
   1b908:	bd80      	pop	{r7, pc}
   1b90a:	bf00      	nop
   1b90c:	400fe000 	.word	0x400fe000
   1b910:	07c00550 	.word	0x07c00550
   1b914:	40058000 	.word	0x40058000
   1b918:	4000c000 	.word	0x4000c000

0001b91c <ResetISR>:
// application.
//
//*****************************************************************************
void
ResetISR(void)
{
   1b91c:	b580      	push	{r7, lr}
   1b91e:	b082      	sub	sp, #8
   1b920:	af00      	add	r7, sp, #0
    uint32_t *pui32Src, *pui32Dest;

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pui32Src = &_ldata;
   1b922:	4b13      	ldr	r3, [pc, #76]	; (1b970 <zero_loop+0x24>)
   1b924:	607b      	str	r3, [r7, #4]
    for(pui32Dest = &_data; pui32Dest < &_edata; )
   1b926:	4b13      	ldr	r3, [pc, #76]	; (1b974 <zero_loop+0x28>)
   1b928:	603b      	str	r3, [r7, #0]
   1b92a:	e007      	b.n	1b93c <ResetISR+0x20>
    {
        *pui32Dest++ = *pui32Src++;
   1b92c:	683b      	ldr	r3, [r7, #0]
   1b92e:	1d1a      	adds	r2, r3, #4
   1b930:	603a      	str	r2, [r7, #0]
   1b932:	687a      	ldr	r2, [r7, #4]
   1b934:	1d11      	adds	r1, r2, #4
   1b936:	6079      	str	r1, [r7, #4]
   1b938:	6812      	ldr	r2, [r2, #0]
   1b93a:	601a      	str	r2, [r3, #0]
    for(pui32Dest = &_data; pui32Dest < &_edata; )
   1b93c:	683b      	ldr	r3, [r7, #0]
   1b93e:	4a0e      	ldr	r2, [pc, #56]	; (1b978 <zero_loop+0x2c>)
   1b940:	4293      	cmp	r3, r2
   1b942:	d3f3      	bcc.n	1b92c <ResetISR+0x10>
    }

    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_bss\n"
   1b944:	4814      	ldr	r0, [pc, #80]	; (1b998 <IntDefaultHandler+0x8>)
   1b946:	4915      	ldr	r1, [pc, #84]	; (1b99c <IntDefaultHandler+0xc>)
   1b948:	f04f 0200 	mov.w	r2, #0

0001b94c <zero_loop>:
   1b94c:	4288      	cmp	r0, r1
   1b94e:	bfb8      	it	lt
   1b950:	f840 2b04 	strlt.w	r2, [r0], #4
   1b954:	dbfa      	blt.n	1b94c <zero_loop>
    // APIs must be done here prior to the floating-point unit being enabled.
    //
    // Note that this does not use DriverLib since it might not be included in
    // this project.
    //
    HWREG(NVIC_CPAC) = ((HWREG(NVIC_CPAC) &
   1b956:	4a09      	ldr	r2, [pc, #36]	; (1b97c <zero_loop+0x30>)
   1b958:	4b08      	ldr	r3, [pc, #32]	; (1b97c <zero_loop+0x30>)
   1b95a:	681b      	ldr	r3, [r3, #0]
                         ~(NVIC_CPAC_CP10_M | NVIC_CPAC_CP11_M)) |
                        NVIC_CPAC_CP10_FULL | NVIC_CPAC_CP11_FULL);
   1b95c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    HWREG(NVIC_CPAC) = ((HWREG(NVIC_CPAC) &
   1b960:	6013      	str	r3, [r2, #0]

    //
    // Call the application's entry point.
    //
    _start();
   1b962:	f7ff ff23 	bl	1b7ac <_start>
}
   1b966:	bf00      	nop
   1b968:	3708      	adds	r7, #8
   1b96a:	46bd      	mov	sp, r7
   1b96c:	bd80      	pop	{r7, pc}
   1b96e:	bf00      	nop
   1b970:	00025fa0 	.word	0x00025fa0
   1b974:	20000000 	.word	0x20000000
   1b978:	200008c0 	.word	0x200008c0
   1b97c:	e000ed88 	.word	0xe000ed88

0001b980 <NmiSR>:
// by a debugger.
//
//*****************************************************************************
static void
NmiSR(void)
{
   1b980:	b480      	push	{r7}
   1b982:	af00      	add	r7, sp, #0
    //
    // Enter an infinite loop.
    //
    while(1)
    {
    }
   1b984:	e7fe      	b.n	1b984 <NmiSR+0x4>
   1b986:	bf00      	nop

0001b988 <FaultISR>:
// for examination by a debugger.
//
//*****************************************************************************
static void
FaultISR(void)
{
   1b988:	b480      	push	{r7}
   1b98a:	af00      	add	r7, sp, #0
    //
    // Enter an infinite loop.
    //
    while(1)
    {
    }
   1b98c:	e7fe      	b.n	1b98c <FaultISR+0x4>
   1b98e:	bf00      	nop

0001b990 <IntDefaultHandler>:
// for examination by a debugger.
//
//*****************************************************************************
static void
IntDefaultHandler(void)
{
   1b990:	b480      	push	{r7}
   1b992:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
   1b994:	e7fe      	b.n	1b994 <IntDefaultHandler+0x4>
   1b996:	0000      	.short	0x0000
   1b998:	200008c0 	.word	0x200008c0
   1b99c:	200014cc 	.word	0x200014cc

0001b9a0 <mp_hal_stdin_rx_chr>:
} periph_uart_t;
#define UART0 ((periph_uart_t*)0x4000C000)
#endif

// Receive single character
int mp_hal_stdin_rx_chr(void) {
   1b9a0:	b480      	push	{r7}
   1b9a2:	b083      	sub	sp, #12
   1b9a4:	af00      	add	r7, sp, #0
    unsigned char c = 0;
   1b9a6:	2300      	movs	r3, #0
   1b9a8:	71fb      	strb	r3, [r7, #7]
#if MICROPY_MIN_USE_STDOUT
    int r = read(0, &c, 1);
    (void)r;
#elif MICROPY_MIN_USE_TM4C123_MCU
    // wait for RXFE to clear
    while (UART0->FR & (1 << 4)) {
   1b9aa:	bf00      	nop
   1b9ac:	4b07      	ldr	r3, [pc, #28]	; (1b9cc <mp_hal_stdin_rx_chr+0x2c>)
   1b9ae:	699b      	ldr	r3, [r3, #24]
   1b9b0:	f003 0310 	and.w	r3, r3, #16
   1b9b4:	2b00      	cmp	r3, #0
   1b9b6:	d1f9      	bne.n	1b9ac <mp_hal_stdin_rx_chr+0xc>
    }
    c = UART0->DR & 0xFF;
   1b9b8:	4b04      	ldr	r3, [pc, #16]	; (1b9cc <mp_hal_stdin_rx_chr+0x2c>)
   1b9ba:	681b      	ldr	r3, [r3, #0]
   1b9bc:	71fb      	strb	r3, [r7, #7]
#endif
    return c;
   1b9be:	79fb      	ldrb	r3, [r7, #7]
}
   1b9c0:	4618      	mov	r0, r3
   1b9c2:	370c      	adds	r7, #12
   1b9c4:	46bd      	mov	sp, r7
   1b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b9ca:	4770      	bx	lr
   1b9cc:	4000c000 	.word	0x4000c000

0001b9d0 <mp_hal_stdout_tx_strn>:

// Send string of given length
void mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {
   1b9d0:	b480      	push	{r7}
   1b9d2:	b083      	sub	sp, #12
   1b9d4:	af00      	add	r7, sp, #0
   1b9d6:	6078      	str	r0, [r7, #4]
   1b9d8:	6039      	str	r1, [r7, #0]
#if MICROPY_MIN_USE_STDOUT
    int r = write(1, str, len);
    (void)r;
#elif MICROPY_MIN_USE_TM4C123_MCU
    while (len--) {
   1b9da:	e00c      	b.n	1b9f6 <mp_hal_stdout_tx_strn+0x26>
        // wait for TXFF to clear
        while (UART0->FR & (1 << 5)) {
   1b9dc:	bf00      	nop
   1b9de:	4b0b      	ldr	r3, [pc, #44]	; (1ba0c <mp_hal_stdout_tx_strn+0x3c>)
   1b9e0:	699b      	ldr	r3, [r3, #24]
   1b9e2:	f003 0320 	and.w	r3, r3, #32
   1b9e6:	2b00      	cmp	r3, #0
   1b9e8:	d1f9      	bne.n	1b9de <mp_hal_stdout_tx_strn+0xe>
        }
        UART0->DR = *str++;
   1b9ea:	4908      	ldr	r1, [pc, #32]	; (1ba0c <mp_hal_stdout_tx_strn+0x3c>)
   1b9ec:	687b      	ldr	r3, [r7, #4]
   1b9ee:	1c5a      	adds	r2, r3, #1
   1b9f0:	607a      	str	r2, [r7, #4]
   1b9f2:	781b      	ldrb	r3, [r3, #0]
   1b9f4:	600b      	str	r3, [r1, #0]
    while (len--) {
   1b9f6:	683b      	ldr	r3, [r7, #0]
   1b9f8:	1e5a      	subs	r2, r3, #1
   1b9fa:	603a      	str	r2, [r7, #0]
   1b9fc:	2b00      	cmp	r3, #0
   1b9fe:	d1ed      	bne.n	1b9dc <mp_hal_stdout_tx_strn+0xc>
    }
#endif
}
   1ba00:	bf00      	nop
   1ba02:	370c      	adds	r7, #12
   1ba04:	46bd      	mov	sp, r7
   1ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ba0a:	4770      	bx	lr
   1ba0c:	4000c000 	.word	0x4000c000

0001ba10 <mp_hal_ticks_cpu_enable>:

//NORETURN void mp_hal_raise(HAL_StatusTypeDef status) {
//    mp_raise_OSError(mp_hal_status_to_errno_table[status]);
//}

void mp_hal_ticks_cpu_enable(void) {
   1ba10:	b480      	push	{r7}
   1ba12:	af00      	add	r7, sp, #0
//        DWT->LAR = 0xc5acce55;
//        #endif
//        DWT->CYCCNT = 0;
//        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
//    }
}
   1ba14:	bf00      	nop
   1ba16:	46bd      	mov	sp, r7
   1ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ba1c:	4770      	bx	lr
   1ba1e:	bf00      	nop

0001ba20 <mp_hal_ticks_cpu>:

mp_uint_t mp_hal_ticks_cpu(void) {
   1ba20:	b480      	push	{r7}
   1ba22:	af00      	add	r7, sp, #0
    return (*((volatile uint32_t *)0xE000E018));
   1ba24:	4b03      	ldr	r3, [pc, #12]	; (1ba34 <mp_hal_ticks_cpu+0x14>)
   1ba26:	681b      	ldr	r3, [r3, #0]
}
   1ba28:	4618      	mov	r0, r3
   1ba2a:	46bd      	mov	sp, r7
   1ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ba30:	4770      	bx	lr
   1ba32:	bf00      	nop
   1ba34:	e000e018 	.word	0xe000e018

0001ba38 <mp_hal_ticks_ms>:

mp_uint_t mp_hal_ticks_ms(void) {
   1ba38:	b598      	push	{r3, r4, r7, lr}
   1ba3a:	af00      	add	r7, sp, #0
    return (*((volatile uint32_t *)0xE000E018)) / (MAP_SysCtlClockGet()*3000);
   1ba3c:	4b06      	ldr	r3, [pc, #24]	; (1ba58 <mp_hal_ticks_ms+0x20>)
   1ba3e:	681c      	ldr	r4, [r3, #0]
   1ba40:	f002 f9de 	bl	1de00 <SysCtlClockGet>
   1ba44:	4602      	mov	r2, r0
   1ba46:	f640 33b8 	movw	r3, #3000	; 0xbb8
   1ba4a:	fb03 f302 	mul.w	r3, r3, r2
   1ba4e:	fbb4 f3f3 	udiv	r3, r4, r3
}
   1ba52:	4618      	mov	r0, r3
   1ba54:	bd98      	pop	{r3, r4, r7, pc}
   1ba56:	bf00      	nop
   1ba58:	e000e018 	.word	0xe000e018

0001ba5c <mp_hal_ticks_us>:

mp_uint_t mp_hal_ticks_us(void) {
   1ba5c:	b598      	push	{r3, r4, r7, lr}
   1ba5e:	af00      	add	r7, sp, #0
    return (*((volatile uint32_t *)0xE000E018)) / (MAP_SysCtlClockGet()*3000000);
   1ba60:	4b05      	ldr	r3, [pc, #20]	; (1ba78 <mp_hal_ticks_us+0x1c>)
   1ba62:	681c      	ldr	r4, [r3, #0]
   1ba64:	f002 f9cc 	bl	1de00 <SysCtlClockGet>
   1ba68:	4602      	mov	r2, r0
   1ba6a:	4b04      	ldr	r3, [pc, #16]	; (1ba7c <mp_hal_ticks_us+0x20>)
   1ba6c:	fb03 f302 	mul.w	r3, r3, r2
   1ba70:	fbb4 f3f3 	udiv	r3, r4, r3
}
   1ba74:	4618      	mov	r0, r3
   1ba76:	bd98      	pop	{r3, r4, r7, pc}
   1ba78:	e000e018 	.word	0xe000e018
   1ba7c:	002dc6c0 	.word	0x002dc6c0

0001ba80 <mp_hal_gpio_clock_enable>:

void mp_hal_gpio_clock_enable(const uint32_t periph) {
   1ba80:	b580      	push	{r7, lr}
   1ba82:	b082      	sub	sp, #8
   1ba84:	af00      	add	r7, sp, #0
   1ba86:	6078      	str	r0, [r7, #4]
    if (MAP_SysCtlPeripheralReady(periph)) {
   1ba88:	6878      	ldr	r0, [r7, #4]
   1ba8a:	f002 f967 	bl	1dd5c <SysCtlPeripheralReady>
   1ba8e:	4603      	mov	r3, r0
   1ba90:	2b00      	cmp	r3, #0
   1ba92:	d10d      	bne.n	1bab0 <mp_hal_gpio_clock_enable+0x30>
        //Already acive
        return;
    }
    MAP_SysCtlPeripheralEnable(periph);
   1ba94:	6878      	ldr	r0, [r7, #4]
   1ba96:	f002 f977 	bl	1dd88 <SysCtlPeripheralEnable>
    while(!MAP_SysCtlPeripheralReady(periph)){};
   1ba9a:	bf00      	nop
   1ba9c:	6878      	ldr	r0, [r7, #4]
   1ba9e:	f002 f95d 	bl	1dd5c <SysCtlPeripheralReady>
   1baa2:	4603      	mov	r3, r0
   1baa4:	f083 0301 	eor.w	r3, r3, #1
   1baa8:	b2db      	uxtb	r3, r3
   1baaa:	2b00      	cmp	r3, #0
   1baac:	d1f6      	bne.n	1ba9c <mp_hal_gpio_clock_enable+0x1c>
   1baae:	e000      	b.n	1bab2 <mp_hal_gpio_clock_enable+0x32>
        return;
   1bab0:	bf00      	nop
}
   1bab2:	3708      	adds	r7, #8
   1bab4:	46bd      	mov	sp, r7
   1bab6:	bd80      	pop	{r7, pc}

0001bab8 <mp_hal_pin_config>:

void mp_hal_pin_config(mp_hal_pin_obj_t pin_obj, uint32_t dir, uint32_t type, uint32_t drive) {
   1bab8:	b580      	push	{r7, lr}
   1baba:	b084      	sub	sp, #16
   1babc:	af00      	add	r7, sp, #0
   1babe:	60f8      	str	r0, [r7, #12]
   1bac0:	60b9      	str	r1, [r7, #8]
   1bac2:	607a      	str	r2, [r7, #4]
   1bac4:	603b      	str	r3, [r7, #0]
    mp_hal_gpio_clock_enable(pin_obj->periph);
   1bac6:	68fb      	ldr	r3, [r7, #12]
   1bac8:	68db      	ldr	r3, [r3, #12]
   1baca:	4618      	mov	r0, r3
   1bacc:	f7ff ffd8 	bl	1ba80 <mp_hal_gpio_clock_enable>

    MAP_GPIODirModeSet(pin_obj->port, pin_obj->pin_mask, dir);
   1bad0:	68fb      	ldr	r3, [r7, #12]
   1bad2:	6898      	ldr	r0, [r3, #8]
   1bad4:	68fb      	ldr	r3, [r7, #12]
   1bad6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1bada:	68ba      	ldr	r2, [r7, #8]
   1badc:	4619      	mov	r1, r3
   1bade:	f001 ffe5 	bl	1daac <GPIODirModeSet>
    MAP_GPIOPadConfigSet(pin_obj->port, pin_obj->pin_mask, drive, type);
   1bae2:	68fb      	ldr	r3, [r7, #12]
   1bae4:	6898      	ldr	r0, [r3, #8]
   1bae6:	68fb      	ldr	r3, [r7, #12]
   1bae8:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   1baec:	687b      	ldr	r3, [r7, #4]
   1baee:	683a      	ldr	r2, [r7, #0]
   1baf0:	f002 f805 	bl	1dafe <GPIOPadConfigSet>
}
   1baf4:	bf00      	nop
   1baf6:	3710      	adds	r7, #16
   1baf8:	46bd      	mov	sp, r7
   1bafa:	bd80      	pop	{r7, pc}

0001bafc <mp_hal_pin_set_af>:

void mp_hal_pin_set_af(mp_hal_pin_obj_t pin_obj, uint8_t af_id) {
   1bafc:	b580      	push	{r7, lr}
   1bafe:	b082      	sub	sp, #8
   1bb00:	af00      	add	r7, sp, #0
   1bb02:	6078      	str	r0, [r7, #4]
   1bb04:	460b      	mov	r3, r1
   1bb06:	70fb      	strb	r3, [r7, #3]
    if (af_id == 0xFF) return;
   1bb08:	78fb      	ldrb	r3, [r7, #3]
   1bb0a:	2bff      	cmp	r3, #255	; 0xff
   1bb0c:	d01b      	beq.n	1bb46 <mp_hal_pin_set_af+0x4a>
    MAP_GPIODirModeSet(pin_obj->port, pin_obj->pin_mask, GPIO_DIR_MODE_HW);
   1bb0e:	687b      	ldr	r3, [r7, #4]
   1bb10:	6898      	ldr	r0, [r3, #8]
   1bb12:	687b      	ldr	r3, [r7, #4]
   1bb14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1bb18:	2202      	movs	r2, #2
   1bb1a:	4619      	mov	r1, r3
   1bb1c:	f001 ffc6 	bl	1daac <GPIODirModeSet>
    MAP_GPIOPadConfigSet(pin_obj->port, pin_obj->pin_mask, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD);
   1bb20:	687b      	ldr	r3, [r7, #4]
   1bb22:	6898      	ldr	r0, [r3, #8]
   1bb24:	687b      	ldr	r3, [r7, #4]
   1bb26:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   1bb2a:	2308      	movs	r3, #8
   1bb2c:	2201      	movs	r2, #1
   1bb2e:	f001 ffe6 	bl	1dafe <GPIOPadConfigSet>
    MAP_GPIOPinConfigure((pin_obj->af_list)[af_id].conf);
   1bb32:	687b      	ldr	r3, [r7, #4]
   1bb34:	695a      	ldr	r2, [r3, #20]
   1bb36:	78fb      	ldrb	r3, [r7, #3]
   1bb38:	011b      	lsls	r3, r3, #4
   1bb3a:	4413      	add	r3, r2
   1bb3c:	68db      	ldr	r3, [r3, #12]
   1bb3e:	4618      	mov	r0, r3
   1bb40:	f002 f8ea 	bl	1dd18 <GPIOPinConfigure>
   1bb44:	e000      	b.n	1bb48 <mp_hal_pin_set_af+0x4c>
    if (af_id == 0xFF) return;
   1bb46:	bf00      	nop
}
   1bb48:	3708      	adds	r7, #8
   1bb4a:	46bd      	mov	sp, r7
   1bb4c:	bd80      	pop	{r7, pc}
   1bb4e:	bf00      	nop

0001bb50 <mp_hal_set_interrupt_char>:

void mp_hal_set_interrupt_char(int c) {
   1bb50:	b480      	push	{r7}
   1bb52:	b083      	sub	sp, #12
   1bb54:	af00      	add	r7, sp, #0
   1bb56:	6078      	str	r0, [r7, #4]

}
   1bb58:	bf00      	nop
   1bb5a:	370c      	adds	r7, #12
   1bb5c:	46bd      	mov	sp, r7
   1bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bb62:	4770      	bx	lr

0001bb64 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   1bb64:	b480      	push	{r7}
   1bb66:	b083      	sub	sp, #12
   1bb68:	af00      	add	r7, sp, #0
   1bb6a:	6078      	str	r0, [r7, #4]
   1bb6c:	687b      	ldr	r3, [r7, #4]
   1bb6e:	f003 0303 	and.w	r3, r3, #3
   1bb72:	2b00      	cmp	r3, #0
   1bb74:	bf0c      	ite	eq
   1bb76:	2301      	moveq	r3, #1
   1bb78:	2300      	movne	r3, #0
   1bb7a:	b2db      	uxtb	r3, r3
   1bb7c:	4618      	mov	r0, r3
   1bb7e:	370c      	adds	r7, #12
   1bb80:	46bd      	mov	sp, r7
   1bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bb86:	4770      	bx	lr

0001bb88 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   1bb88:	b480      	push	{r7}
   1bb8a:	b083      	sub	sp, #12
   1bb8c:	af00      	add	r7, sp, #0
   1bb8e:	6078      	str	r0, [r7, #4]
   1bb90:	687b      	ldr	r3, [r7, #4]
   1bb92:	2b00      	cmp	r3, #0
   1bb94:	d001      	beq.n	1bb9a <mp_obj_new_bool+0x12>
   1bb96:	4b04      	ldr	r3, [pc, #16]	; (1bba8 <mp_obj_new_bool+0x20>)
   1bb98:	e000      	b.n	1bb9c <mp_obj_new_bool+0x14>
   1bb9a:	4b04      	ldr	r3, [pc, #16]	; (1bbac <mp_obj_new_bool+0x24>)
   1bb9c:	4618      	mov	r0, r3
   1bb9e:	370c      	adds	r7, #12
   1bba0:	46bd      	mov	sp, r7
   1bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bba6:	4770      	bx	lr
   1bba8:	00021c60 	.word	0x00021c60
   1bbac:	00021c58 	.word	0x00021c58

0001bbb0 <mp_obj_dict_get_map>:
static inline mp_map_t *mp_obj_dict_get_map(mp_obj_t dict) {
   1bbb0:	b480      	push	{r7}
   1bbb2:	b083      	sub	sp, #12
   1bbb4:	af00      	add	r7, sp, #0
   1bbb6:	6078      	str	r0, [r7, #4]
    return &((mp_obj_dict_t*)MP_OBJ_TO_PTR(dict))->map;
   1bbb8:	687b      	ldr	r3, [r7, #4]
   1bbba:	3304      	adds	r3, #4
}
   1bbbc:	4618      	mov	r0, r3
   1bbbe:	370c      	adds	r7, #12
   1bbc0:	46bd      	mov	sp, r7
   1bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bbc6:	4770      	bx	lr

0001bbc8 <mp_arg_check_num>:
static inline void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
   1bbc8:	b580      	push	{r7, lr}
   1bbca:	b084      	sub	sp, #16
   1bbcc:	af00      	add	r7, sp, #0
   1bbce:	60f8      	str	r0, [r7, #12]
   1bbd0:	60b9      	str	r1, [r7, #8]
   1bbd2:	607a      	str	r2, [r7, #4]
   1bbd4:	603b      	str	r3, [r7, #0]
    mp_arg_check_num_sig(n_args, n_kw, (uint32_t)MP_OBJ_FUN_MAKE_SIG(n_args_min, n_args_max, takes_kw));
   1bbd6:	687b      	ldr	r3, [r7, #4]
   1bbd8:	045a      	lsls	r2, r3, #17
   1bbda:	683b      	ldr	r3, [r7, #0]
   1bbdc:	005b      	lsls	r3, r3, #1
   1bbde:	431a      	orrs	r2, r3
   1bbe0:	7e3b      	ldrb	r3, [r7, #24]
   1bbe2:	2b00      	cmp	r3, #0
   1bbe4:	d001      	beq.n	1bbea <mp_arg_check_num+0x22>
   1bbe6:	2301      	movs	r3, #1
   1bbe8:	e000      	b.n	1bbec <mp_arg_check_num+0x24>
   1bbea:	2300      	movs	r3, #0
   1bbec:	4313      	orrs	r3, r2
   1bbee:	461a      	mov	r2, r3
   1bbf0:	68b9      	ldr	r1, [r7, #8]
   1bbf2:	68f8      	ldr	r0, [r7, #12]
   1bbf4:	f7f1 fa4c 	bl	d090 <mp_arg_check_num_sig>
}
   1bbf8:	bf00      	nop
   1bbfa:	3710      	adds	r7, #16
   1bbfc:	46bd      	mov	sp, r7
   1bbfe:	bd80      	pop	{r7, pc}

0001bc00 <pin_init0>:
/// how a particular object gets mapped to a pin.

// Pin class variables
STATIC bool pin_class_debug;

void pin_init0(void) {
   1bc00:	b480      	push	{r7}
   1bc02:	af00      	add	r7, sp, #0
    MP_STATE_PORT(pin_class_mapper) = mp_const_none;
   1bc04:	4b07      	ldr	r3, [pc, #28]	; (1bc24 <pin_init0+0x24>)
   1bc06:	4a08      	ldr	r2, [pc, #32]	; (1bc28 <pin_init0+0x28>)
   1bc08:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    MP_STATE_PORT(pin_class_map_dict) = mp_const_none;
   1bc0c:	4b05      	ldr	r3, [pc, #20]	; (1bc24 <pin_init0+0x24>)
   1bc0e:	4a06      	ldr	r2, [pc, #24]	; (1bc28 <pin_init0+0x28>)
   1bc10:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    pin_class_debug = false;
   1bc14:	4b05      	ldr	r3, [pc, #20]	; (1bc2c <pin_init0+0x2c>)
   1bc16:	2200      	movs	r2, #0
   1bc18:	701a      	strb	r2, [r3, #0]
}
   1bc1a:	bf00      	nop
   1bc1c:	46bd      	mov	sp, r7
   1bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bc22:	4770      	bx	lr
   1bc24:	200012f0 	.word	0x200012f0
   1bc28:	000234d4 	.word	0x000234d4
   1bc2c:	200012c4 	.word	0x200012c4

0001bc30 <pin_find>:



// C API used to convert a user-supplied pin name into an ordinal pin number.
const pin_obj_t *pin_find(mp_obj_t user_obj) {
   1bc30:	b580      	push	{r7, lr}
   1bc32:	b088      	sub	sp, #32
   1bc34:	af00      	add	r7, sp, #0
   1bc36:	6078      	str	r0, [r7, #4]
    const pin_obj_t *pin_obj;

    // If a pin was provided, then use it
    if (MP_OBJ_IS_TYPE(user_obj, &pin_mod)) {
   1bc38:	6878      	ldr	r0, [r7, #4]
   1bc3a:	f7ff ff93 	bl	1bb64 <MP_OBJ_IS_OBJ>
   1bc3e:	4603      	mov	r3, r0
   1bc40:	2b00      	cmp	r3, #0
   1bc42:	d016      	beq.n	1bc72 <pin_find+0x42>
   1bc44:	687b      	ldr	r3, [r7, #4]
   1bc46:	681b      	ldr	r3, [r3, #0]
   1bc48:	4a59      	ldr	r2, [pc, #356]	; (1bdb0 <pin_find+0x180>)
   1bc4a:	4293      	cmp	r3, r2
   1bc4c:	d111      	bne.n	1bc72 <pin_find+0x42>
        pin_obj = MP_OBJ_TO_PTR(user_obj);
   1bc4e:	687b      	ldr	r3, [r7, #4]
   1bc50:	61fb      	str	r3, [r7, #28]
        if (pin_class_debug) {
   1bc52:	4b58      	ldr	r3, [pc, #352]	; (1bdb4 <pin_find+0x184>)
   1bc54:	781b      	ldrb	r3, [r3, #0]
   1bc56:	2b00      	cmp	r3, #0
   1bc58:	d009      	beq.n	1bc6e <pin_find+0x3e>
            printf("Pin map passed pin ");
   1bc5a:	4857      	ldr	r0, [pc, #348]	; (1bdb8 <pin_find+0x188>)
   1bc5c:	f7ff fc2a 	bl	1b4b4 <printf>
            mp_obj_print(MP_OBJ_FROM_PTR(pin_obj), PRINT_STR);
   1bc60:	2100      	movs	r1, #0
   1bc62:	69f8      	ldr	r0, [r7, #28]
   1bc64:	f7f1 fe74 	bl	d950 <mp_obj_print>
            printf("\n");
   1bc68:	200a      	movs	r0, #10
   1bc6a:	f7ff fc4d 	bl	1b508 <putchar>
        }
        return pin_obj;
   1bc6e:	69fb      	ldr	r3, [r7, #28]
   1bc70:	e099      	b.n	1bda6 <pin_find+0x176>
    }


    if (MP_STATE_PORT(pin_class_mapper) != mp_const_none) {
   1bc72:	4b52      	ldr	r3, [pc, #328]	; (1bdbc <pin_find+0x18c>)
   1bc74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   1bc78:	4a51      	ldr	r2, [pc, #324]	; (1bdc0 <pin_find+0x190>)
   1bc7a:	4293      	cmp	r3, r2
   1bc7c:	d033      	beq.n	1bce6 <pin_find+0xb6>
        mp_obj_t o = mp_call_function_1(MP_STATE_PORT(pin_class_mapper), user_obj);
   1bc7e:	4b4f      	ldr	r3, [pc, #316]	; (1bdbc <pin_find+0x18c>)
   1bc80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   1bc84:	6879      	ldr	r1, [r7, #4]
   1bc86:	4618      	mov	r0, r3
   1bc88:	f7f0 f8be 	bl	be08 <mp_call_function_1>
   1bc8c:	61b8      	str	r0, [r7, #24]
        if (o != mp_const_none) {
   1bc8e:	69bb      	ldr	r3, [r7, #24]
   1bc90:	4a4b      	ldr	r2, [pc, #300]	; (1bdc0 <pin_find+0x190>)
   1bc92:	4293      	cmp	r3, r2
   1bc94:	d027      	beq.n	1bce6 <pin_find+0xb6>
            if (!MP_OBJ_IS_TYPE(o, &pin_mod)) {
   1bc96:	69b8      	ldr	r0, [r7, #24]
   1bc98:	f7ff ff64 	bl	1bb64 <MP_OBJ_IS_OBJ>
   1bc9c:	4603      	mov	r3, r0
   1bc9e:	f083 0301 	eor.w	r3, r3, #1
   1bca2:	b2db      	uxtb	r3, r3
   1bca4:	2b00      	cmp	r3, #0
   1bca6:	d104      	bne.n	1bcb2 <pin_find+0x82>
   1bca8:	69bb      	ldr	r3, [r7, #24]
   1bcaa:	681b      	ldr	r3, [r3, #0]
   1bcac:	4a40      	ldr	r2, [pc, #256]	; (1bdb0 <pin_find+0x180>)
   1bcae:	4293      	cmp	r3, r2
   1bcb0:	d002      	beq.n	1bcb8 <pin_find+0x88>
                mp_raise_ValueError("Pin.mapper didn't return a Pin object");
   1bcb2:	4844      	ldr	r0, [pc, #272]	; (1bdc4 <pin_find+0x194>)
   1bcb4:	f7f1 f976 	bl	cfa4 <mp_raise_ValueError>
            }
            if (pin_class_debug) {
   1bcb8:	4b3e      	ldr	r3, [pc, #248]	; (1bdb4 <pin_find+0x184>)
   1bcba:	781b      	ldrb	r3, [r3, #0]
   1bcbc:	2b00      	cmp	r3, #0
   1bcbe:	d010      	beq.n	1bce2 <pin_find+0xb2>
                printf("Pin.mapper maps ");
   1bcc0:	4841      	ldr	r0, [pc, #260]	; (1bdc8 <pin_find+0x198>)
   1bcc2:	f7ff fbf7 	bl	1b4b4 <printf>
                mp_obj_print(user_obj, PRINT_REPR);
   1bcc6:	2101      	movs	r1, #1
   1bcc8:	6878      	ldr	r0, [r7, #4]
   1bcca:	f7f1 fe41 	bl	d950 <mp_obj_print>
                printf(" to ");
   1bcce:	483f      	ldr	r0, [pc, #252]	; (1bdcc <pin_find+0x19c>)
   1bcd0:	f7ff fbf0 	bl	1b4b4 <printf>
                mp_obj_print(o, PRINT_STR);
   1bcd4:	2100      	movs	r1, #0
   1bcd6:	69b8      	ldr	r0, [r7, #24]
   1bcd8:	f7f1 fe3a 	bl	d950 <mp_obj_print>
                printf("\n");
   1bcdc:	200a      	movs	r0, #10
   1bcde:	f7ff fc13 	bl	1b508 <putchar>
            }
            return MP_OBJ_TO_PTR(o);
   1bce2:	69bb      	ldr	r3, [r7, #24]
   1bce4:	e05f      	b.n	1bda6 <pin_find+0x176>
        }
        // The pin mapping function returned mp_const_none, fall through to
        // other lookup methods.
    }

    if (MP_STATE_PORT(pin_class_map_dict) != mp_const_none) {
   1bce6:	4b35      	ldr	r3, [pc, #212]	; (1bdbc <pin_find+0x18c>)
   1bce8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1bcec:	4a34      	ldr	r2, [pc, #208]	; (1bdc0 <pin_find+0x190>)
   1bcee:	4293      	cmp	r3, r2
   1bcf0:	d02d      	beq.n	1bd4e <pin_find+0x11e>
        mp_map_t *pin_map_map = mp_obj_dict_get_map(MP_STATE_PORT(pin_class_map_dict));
   1bcf2:	4b32      	ldr	r3, [pc, #200]	; (1bdbc <pin_find+0x18c>)
   1bcf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   1bcf8:	4618      	mov	r0, r3
   1bcfa:	f7ff ff59 	bl	1bbb0 <mp_obj_dict_get_map>
   1bcfe:	6178      	str	r0, [r7, #20]
        mp_map_elem_t *elem = mp_map_lookup(pin_map_map, user_obj, MP_MAP_LOOKUP);
   1bd00:	2200      	movs	r2, #0
   1bd02:	6879      	ldr	r1, [r7, #4]
   1bd04:	6978      	ldr	r0, [r7, #20]
   1bd06:	f7f1 fc1b 	bl	d540 <mp_map_lookup>
   1bd0a:	6138      	str	r0, [r7, #16]
        if (elem != NULL && elem->value != MP_OBJ_NULL) {
   1bd0c:	693b      	ldr	r3, [r7, #16]
   1bd0e:	2b00      	cmp	r3, #0
   1bd10:	d01d      	beq.n	1bd4e <pin_find+0x11e>
   1bd12:	693b      	ldr	r3, [r7, #16]
   1bd14:	685b      	ldr	r3, [r3, #4]
   1bd16:	2b00      	cmp	r3, #0
   1bd18:	d019      	beq.n	1bd4e <pin_find+0x11e>
            mp_obj_t o = elem->value;
   1bd1a:	693b      	ldr	r3, [r7, #16]
   1bd1c:	685b      	ldr	r3, [r3, #4]
   1bd1e:	60fb      	str	r3, [r7, #12]
            if (pin_class_debug) {
   1bd20:	4b24      	ldr	r3, [pc, #144]	; (1bdb4 <pin_find+0x184>)
   1bd22:	781b      	ldrb	r3, [r3, #0]
   1bd24:	2b00      	cmp	r3, #0
   1bd26:	d010      	beq.n	1bd4a <pin_find+0x11a>
                printf("Pin.map_dict maps ");
   1bd28:	4829      	ldr	r0, [pc, #164]	; (1bdd0 <pin_find+0x1a0>)
   1bd2a:	f7ff fbc3 	bl	1b4b4 <printf>
                mp_obj_print(user_obj, PRINT_REPR);
   1bd2e:	2101      	movs	r1, #1
   1bd30:	6878      	ldr	r0, [r7, #4]
   1bd32:	f7f1 fe0d 	bl	d950 <mp_obj_print>
                printf(" to ");
   1bd36:	4825      	ldr	r0, [pc, #148]	; (1bdcc <pin_find+0x19c>)
   1bd38:	f7ff fbbc 	bl	1b4b4 <printf>
                mp_obj_print(o, PRINT_STR);
   1bd3c:	2100      	movs	r1, #0
   1bd3e:	68f8      	ldr	r0, [r7, #12]
   1bd40:	f7f1 fe06 	bl	d950 <mp_obj_print>
                printf("\n");
   1bd44:	200a      	movs	r0, #10
   1bd46:	f7ff fbdf 	bl	1b508 <putchar>
            }
            return MP_OBJ_TO_PTR(o);
   1bd4a:	68fb      	ldr	r3, [r7, #12]
   1bd4c:	e02b      	b.n	1bda6 <pin_find+0x176>
        }
    }

    // See if the pin name matches a board pin
    pin_obj = pin_find_named_pin(&pin_board_pins_locals_dict, user_obj);
   1bd4e:	6879      	ldr	r1, [r7, #4]
   1bd50:	4820      	ldr	r0, [pc, #128]	; (1bdd4 <pin_find+0x1a4>)
   1bd52:	f000 fbfb 	bl	1c54c <pin_find_named_pin>
   1bd56:	61f8      	str	r0, [r7, #28]
    if (pin_obj) {
   1bd58:	69fb      	ldr	r3, [r7, #28]
   1bd5a:	2b00      	cmp	r3, #0
   1bd5c:	d016      	beq.n	1bd8c <pin_find+0x15c>
        if (pin_class_debug) {
   1bd5e:	4b15      	ldr	r3, [pc, #84]	; (1bdb4 <pin_find+0x184>)
   1bd60:	781b      	ldrb	r3, [r3, #0]
   1bd62:	2b00      	cmp	r3, #0
   1bd64:	d010      	beq.n	1bd88 <pin_find+0x158>
            printf("Pin.board maps ");
   1bd66:	481c      	ldr	r0, [pc, #112]	; (1bdd8 <pin_find+0x1a8>)
   1bd68:	f7ff fba4 	bl	1b4b4 <printf>
            mp_obj_print(user_obj, PRINT_REPR);
   1bd6c:	2101      	movs	r1, #1
   1bd6e:	6878      	ldr	r0, [r7, #4]
   1bd70:	f7f1 fdee 	bl	d950 <mp_obj_print>
            printf(" to ");
   1bd74:	4815      	ldr	r0, [pc, #84]	; (1bdcc <pin_find+0x19c>)
   1bd76:	f7ff fb9d 	bl	1b4b4 <printf>
            mp_obj_print(MP_OBJ_FROM_PTR(pin_obj), PRINT_STR);
   1bd7a:	2100      	movs	r1, #0
   1bd7c:	69f8      	ldr	r0, [r7, #28]
   1bd7e:	f7f1 fde7 	bl	d950 <mp_obj_print>
            printf("\n");
   1bd82:	200a      	movs	r0, #10
   1bd84:	f7ff fbc0 	bl	1b508 <putchar>
        }
        return pin_obj;
   1bd88:	69fb      	ldr	r3, [r7, #28]
   1bd8a:	e00c      	b.n	1bda6 <pin_find+0x176>
//            printf("\n");
//        }
//        return pin_obj;
//    }

    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "Pin(%s) doesn't exist", mp_obj_str_get_str(user_obj)));
   1bd8c:	6878      	ldr	r0, [r7, #4]
   1bd8e:	f7f9 fcf7 	bl	15780 <mp_obj_str_get_str>
   1bd92:	4603      	mov	r3, r0
   1bd94:	461a      	mov	r2, r3
   1bd96:	4911      	ldr	r1, [pc, #68]	; (1bddc <pin_find+0x1ac>)
   1bd98:	4811      	ldr	r0, [pc, #68]	; (1bde0 <pin_find+0x1b0>)
   1bd9a:	f7f3 fc93 	bl	f6c4 <mp_obj_new_exception_msg_varg>
   1bd9e:	4603      	mov	r3, r0
   1bda0:	4618      	mov	r0, r3
   1bda2:	f7e4 fa9d 	bl	2e0 <nlr_jump>
}
   1bda6:	4618      	mov	r0, r3
   1bda8:	3720      	adds	r7, #32
   1bdaa:	46bd      	mov	sp, r7
   1bdac:	bd80      	pop	{r7, pc}
   1bdae:	bf00      	nop
   1bdb0:	000250c0 	.word	0x000250c0
   1bdb4:	200012c4 	.word	0x200012c4
   1bdb8:	00024d90 	.word	0x00024d90
   1bdbc:	200012f0 	.word	0x200012f0
   1bdc0:	000234d4 	.word	0x000234d4
   1bdc4:	00024da4 	.word	0x00024da4
   1bdc8:	00024dcc 	.word	0x00024dcc
   1bdcc:	00024de0 	.word	0x00024de0
   1bdd0:	00024de8 	.word	0x00024de8
   1bdd4:	00025a88 	.word	0x00025a88
   1bdd8:	00024dfc 	.word	0x00024dfc
   1bddc:	00024e0c 	.word	0x00024e0c
   1bde0:	000227a8 	.word	0x000227a8

0001bde4 <pin_print>:

/// \method __str__()
/// Return a string describing the pin object.
STATIC void pin_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   1bde4:	b580      	push	{r7, lr}
   1bde6:	b08e      	sub	sp, #56	; 0x38
   1bde8:	af00      	add	r7, sp, #0
   1bdea:	60f8      	str	r0, [r7, #12]
   1bdec:	60b9      	str	r1, [r7, #8]
   1bdee:	607a      	str	r2, [r7, #4]

    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1bdf0:	68bb      	ldr	r3, [r7, #8]
   1bdf2:	62bb      	str	r3, [r7, #40]	; 0x28

    // pin name
    mp_printf(print, "Pin(Pin.cpu.%q, mode=Pin.", self->name);
   1bdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bdf6:	685b      	ldr	r3, [r3, #4]
   1bdf8:	461a      	mov	r2, r3
   1bdfa:	4949      	ldr	r1, [pc, #292]	; (1bf20 <pin_print+0x13c>)
   1bdfc:	68f8      	ldr	r0, [r7, #12]
   1bdfe:	f7e6 f91b 	bl	2038 <mp_printf>

    uint32_t dir = MAP_GPIODirModeGet(self->port, self->pin_mask);
   1be02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be04:	689a      	ldr	r2, [r3, #8]
   1be06:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1be0c:	4619      	mov	r1, r3
   1be0e:	4610      	mov	r0, r2
   1be10:	f001 fe63 	bl	1dada <GPIODirModeGet>
   1be14:	6278      	str	r0, [r7, #36]	; 0x24
    uint32_t type;
    uint32_t strength;
    MAP_GPIOPadConfigGet(self->port, self->pin_mask, &strength, &type);
   1be16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be18:	6898      	ldr	r0, [r3, #8]
   1be1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be1c:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   1be20:	f107 0318 	add.w	r3, r7, #24
   1be24:	f107 0214 	add.w	r2, r7, #20
   1be28:	f001 fef8 	bl	1dc1c <GPIOPadConfigGet>


    if (dir == GPIO_DIR_MODE_HW && type == GPIO_PIN_TYPE_ANALOG) {
   1be2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1be2e:	2b02      	cmp	r3, #2
   1be30:	d107      	bne.n	1be42 <pin_print+0x5e>
   1be32:	69bb      	ldr	r3, [r7, #24]
   1be34:	2b00      	cmp	r3, #0
   1be36:	d104      	bne.n	1be42 <pin_print+0x5e>
        // analog
        mp_print_str(print, "ANALOG)");
   1be38:	493a      	ldr	r1, [pc, #232]	; (1bf24 <pin_print+0x140>)
   1be3a:	68f8      	ldr	r0, [r7, #12]
   1be3c:	f7e5 fde8 	bl	1a10 <mp_print_str>
            }
        } else {
            mp_print_str(print, ")");
        }
    }
}
   1be40:	e06a      	b.n	1bf18 <pin_print+0x134>
        bool af = false;
   1be42:	2300      	movs	r3, #0
   1be44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (dir == GPIO_DIR_MODE_IN) {
   1be48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1be4a:	2b00      	cmp	r3, #0
   1be4c:	d102      	bne.n	1be54 <pin_print+0x70>
            mode_qst = MP_QSTR_IN;
   1be4e:	23c2      	movs	r3, #194	; 0xc2
   1be50:	633b      	str	r3, [r7, #48]	; 0x30
   1be52:	e019      	b.n	1be88 <pin_print+0xa4>
        } else if (dir == GPIO_DIR_MODE_OUT) {
   1be54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1be56:	2b01      	cmp	r3, #1
   1be58:	d108      	bne.n	1be6c <pin_print+0x88>
            if (type == GPIO_PIN_TYPE_OD){
   1be5a:	69bb      	ldr	r3, [r7, #24]
   1be5c:	2b09      	cmp	r3, #9
   1be5e:	d102      	bne.n	1be66 <pin_print+0x82>
                mode_qst = MP_QSTR_OPEN_DRAIN;
   1be60:	23d4      	movs	r3, #212	; 0xd4
   1be62:	633b      	str	r3, [r7, #48]	; 0x30
   1be64:	e010      	b.n	1be88 <pin_print+0xa4>
                mode_qst = MP_QSTR_OUT;
   1be66:	23d6      	movs	r3, #214	; 0xd6
   1be68:	633b      	str	r3, [r7, #48]	; 0x30
   1be6a:	e00d      	b.n	1be88 <pin_print+0xa4>
            af = true;
   1be6c:	2301      	movs	r3, #1
   1be6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (dir == GPIO_DIR_MODE_HW) {
   1be72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1be74:	2b02      	cmp	r3, #2
   1be76:	d107      	bne.n	1be88 <pin_print+0xa4>
                if (type == GPIO_PIN_TYPE_OD){
   1be78:	69bb      	ldr	r3, [r7, #24]
   1be7a:	2b09      	cmp	r3, #9
   1be7c:	d102      	bne.n	1be84 <pin_print+0xa0>
                   mode_qst = MP_QSTR_ALT_OPEN_DRAIN;
   1be7e:	23b5      	movs	r3, #181	; 0xb5
   1be80:	633b      	str	r3, [r7, #48]	; 0x30
   1be82:	e001      	b.n	1be88 <pin_print+0xa4>
                    mode_qst = MP_QSTR_ALT;
   1be84:	23b4      	movs	r3, #180	; 0xb4
   1be86:	633b      	str	r3, [r7, #48]	; 0x30
        mp_print_str(print, qstr_str(mode_qst));
   1be88:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1be8a:	f7e5 fa7d 	bl	1388 <qstr_str>
   1be8e:	4603      	mov	r3, r0
   1be90:	4619      	mov	r1, r3
   1be92:	68f8      	ldr	r0, [r7, #12]
   1be94:	f7e5 fdbc 	bl	1a10 <mp_print_str>
        qstr pull_qst = MP_QSTR_NULL;
   1be98:	2300      	movs	r3, #0
   1be9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (type == GPIO_PIN_TYPE_STD_WPU) {
   1be9c:	69bb      	ldr	r3, [r7, #24]
   1be9e:	2b0a      	cmp	r3, #10
   1bea0:	d102      	bne.n	1bea8 <pin_print+0xc4>
            pull_qst = MP_QSTR_PULL_UP;
   1bea2:	23da      	movs	r3, #218	; 0xda
   1bea4:	62fb      	str	r3, [r7, #44]	; 0x2c
   1bea6:	e004      	b.n	1beb2 <pin_print+0xce>
        } else if (type == GPIO_PIN_TYPE_STD_WPD) {
   1bea8:	69bb      	ldr	r3, [r7, #24]
   1beaa:	2b0c      	cmp	r3, #12
   1beac:	d101      	bne.n	1beb2 <pin_print+0xce>
            pull_qst = MP_QSTR_PULL_DOWN;
   1beae:	23d8      	movs	r3, #216	; 0xd8
   1beb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (pull_qst != MP_QSTR_NULL) {
   1beb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1beb4:	2b00      	cmp	r3, #0
   1beb6:	d004      	beq.n	1bec2 <pin_print+0xde>
            mp_printf(print, ", pull=Pin.%q", pull_qst);
   1beb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1beba:	491b      	ldr	r1, [pc, #108]	; (1bf28 <pin_print+0x144>)
   1bebc:	68f8      	ldr	r0, [r7, #12]
   1bebe:	f7e6 f8bb 	bl	2038 <mp_printf>
        if (af) {
   1bec2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   1bec6:	2b00      	cmp	r3, #0
   1bec8:	d022      	beq.n	1bf10 <pin_print+0x12c>
            mp_uint_t af_idx = mp_hal_pin_get_af(self);
   1beca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1becc:	691b      	ldr	r3, [r3, #16]
   1bece:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
   1bed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bed4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1bed8:	009b      	lsls	r3, r3, #2
   1beda:	fa22 f303 	lsr.w	r3, r2, r3
   1bede:	f003 030f 	and.w	r3, r3, #15
   1bee2:	623b      	str	r3, [r7, #32]
            const pin_af_obj_t *af_obj = pin_find_af_by_index(self, af_idx);
   1bee4:	6a39      	ldr	r1, [r7, #32]
   1bee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1bee8:	f000 fb7c 	bl	1c5e4 <pin_find_af_by_index>
   1beec:	61f8      	str	r0, [r7, #28]
            if (af_obj == NULL) {
   1beee:	69fb      	ldr	r3, [r7, #28]
   1bef0:	2b00      	cmp	r3, #0
   1bef2:	d105      	bne.n	1bf00 <pin_print+0x11c>
                mp_printf(print, ", af=%d)", af_idx);
   1bef4:	6a3a      	ldr	r2, [r7, #32]
   1bef6:	490d      	ldr	r1, [pc, #52]	; (1bf2c <pin_print+0x148>)
   1bef8:	68f8      	ldr	r0, [r7, #12]
   1befa:	f7e6 f89d 	bl	2038 <mp_printf>
}
   1befe:	e00b      	b.n	1bf18 <pin_print+0x134>
                mp_printf(print, ", af=Pin.%q)", af_obj->name);
   1bf00:	69fb      	ldr	r3, [r7, #28]
   1bf02:	681b      	ldr	r3, [r3, #0]
   1bf04:	461a      	mov	r2, r3
   1bf06:	490a      	ldr	r1, [pc, #40]	; (1bf30 <pin_print+0x14c>)
   1bf08:	68f8      	ldr	r0, [r7, #12]
   1bf0a:	f7e6 f895 	bl	2038 <mp_printf>
}
   1bf0e:	e003      	b.n	1bf18 <pin_print+0x134>
            mp_print_str(print, ")");
   1bf10:	4908      	ldr	r1, [pc, #32]	; (1bf34 <pin_print+0x150>)
   1bf12:	68f8      	ldr	r0, [r7, #12]
   1bf14:	f7e5 fd7c 	bl	1a10 <mp_print_str>
}
   1bf18:	bf00      	nop
   1bf1a:	3738      	adds	r7, #56	; 0x38
   1bf1c:	46bd      	mov	sp, r7
   1bf1e:	bd80      	pop	{r7, pc}
   1bf20:	00024e24 	.word	0x00024e24
   1bf24:	00024e40 	.word	0x00024e40
   1bf28:	00024e48 	.word	0x00024e48
   1bf2c:	00024e58 	.word	0x00024e58
   1bf30:	00024e64 	.word	0x00024e64
   1bf34:	00024e74 	.word	0x00024e74

0001bf38 <pin_make_new>:
STATIC mp_obj_t pin_obj_init_helper(const pin_obj_t *pin, size_t n_args, const mp_obj_t *args, mp_map_t *kw_args);

/// \classmethod \constructor(id, ...)
/// Create a new Pin object associated with the id.  If additional arguments are given,
/// they are used to initialise the pin.  See `init`.
mp_obj_t pin_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1bf38:	b580      	push	{r7, lr}
   1bf3a:	b08a      	sub	sp, #40	; 0x28
   1bf3c:	af02      	add	r7, sp, #8
   1bf3e:	60f8      	str	r0, [r7, #12]
   1bf40:	60b9      	str	r1, [r7, #8]
   1bf42:	607a      	str	r2, [r7, #4]
   1bf44:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 1, MP_OBJ_FUN_ARGS_MAX, true);
   1bf46:	2301      	movs	r3, #1
   1bf48:	9300      	str	r3, [sp, #0]
   1bf4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bf4e:	2201      	movs	r2, #1
   1bf50:	6879      	ldr	r1, [r7, #4]
   1bf52:	68b8      	ldr	r0, [r7, #8]
   1bf54:	f7ff fe38 	bl	1bbc8 <mp_arg_check_num>

    // Run an argument through the mapper and return the result.
    const pin_obj_t *pin = pin_find(args[0]);
   1bf58:	683b      	ldr	r3, [r7, #0]
   1bf5a:	681b      	ldr	r3, [r3, #0]
   1bf5c:	4618      	mov	r0, r3
   1bf5e:	f7ff fe67 	bl	1bc30 <pin_find>
   1bf62:	61f8      	str	r0, [r7, #28]

    if (n_args > 1 || n_kw > 0) {
   1bf64:	68bb      	ldr	r3, [r7, #8]
   1bf66:	2b01      	cmp	r3, #1
   1bf68:	d802      	bhi.n	1bf70 <pin_make_new+0x38>
   1bf6a:	687b      	ldr	r3, [r7, #4]
   1bf6c:	2b00      	cmp	r3, #0
   1bf6e:	d012      	beq.n	1bf96 <pin_make_new+0x5e>
        // pin mode given, so configure this GPIO
        mp_map_t kw_args;
        mp_map_init_fixed_table(&kw_args, n_kw, args + n_args);
   1bf70:	68bb      	ldr	r3, [r7, #8]
   1bf72:	009b      	lsls	r3, r3, #2
   1bf74:	683a      	ldr	r2, [r7, #0]
   1bf76:	441a      	add	r2, r3
   1bf78:	f107 0310 	add.w	r3, r7, #16
   1bf7c:	6879      	ldr	r1, [r7, #4]
   1bf7e:	4618      	mov	r0, r3
   1bf80:	f7f1 fa16 	bl	d3b0 <mp_map_init_fixed_table>
        pin_obj_init_helper(pin, n_args - 1, args + 1, &kw_args);
   1bf84:	68bb      	ldr	r3, [r7, #8]
   1bf86:	1e59      	subs	r1, r3, #1
   1bf88:	683b      	ldr	r3, [r7, #0]
   1bf8a:	1d1a      	adds	r2, r3, #4
   1bf8c:	f107 0310 	add.w	r3, r7, #16
   1bf90:	69f8      	ldr	r0, [r7, #28]
   1bf92:	f000 f8c7 	bl	1c124 <pin_obj_init_helper>
    }

    return MP_OBJ_FROM_PTR(pin);
   1bf96:	69fb      	ldr	r3, [r7, #28]
}
   1bf98:	4618      	mov	r0, r3
   1bf9a:	3720      	adds	r7, #32
   1bf9c:	46bd      	mov	sp, r7
   1bf9e:	bd80      	pop	{r7, pc}

0001bfa0 <pin_call>:

// fast method for getting/setting pin value
STATIC mp_obj_t pin_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1bfa0:	b5b0      	push	{r4, r5, r7, lr}
   1bfa2:	b088      	sub	sp, #32
   1bfa4:	af02      	add	r7, sp, #8
   1bfa6:	60f8      	str	r0, [r7, #12]
   1bfa8:	60b9      	str	r1, [r7, #8]
   1bfaa:	607a      	str	r2, [r7, #4]
   1bfac:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
   1bfae:	2300      	movs	r3, #0
   1bfb0:	9300      	str	r3, [sp, #0]
   1bfb2:	2301      	movs	r3, #1
   1bfb4:	2200      	movs	r2, #0
   1bfb6:	6879      	ldr	r1, [r7, #4]
   1bfb8:	68b8      	ldr	r0, [r7, #8]
   1bfba:	f7ff fe05 	bl	1bbc8 <mp_arg_check_num>
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1bfbe:	68fb      	ldr	r3, [r7, #12]
   1bfc0:	617b      	str	r3, [r7, #20]
    if (n_args == 0) {
   1bfc2:	68bb      	ldr	r3, [r7, #8]
   1bfc4:	2b00      	cmp	r3, #0
   1bfc6:	d10d      	bne.n	1bfe4 <pin_call+0x44>
        // get pin
        return MP_OBJ_NEW_SMALL_INT(mp_hal_pin_read(self));
   1bfc8:	697b      	ldr	r3, [r7, #20]
   1bfca:	689a      	ldr	r2, [r3, #8]
   1bfcc:	697b      	ldr	r3, [r7, #20]
   1bfce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1bfd2:	4619      	mov	r1, r3
   1bfd4:	4610      	mov	r0, r2
   1bfd6:	f001 fe8a 	bl	1dcee <GPIOPinRead>
   1bfda:	4603      	mov	r3, r0
   1bfdc:	005b      	lsls	r3, r3, #1
   1bfde:	f043 0301 	orr.w	r3, r3, #1
   1bfe2:	e017      	b.n	1c014 <pin_call+0x74>
    } else {
        // set pin
        mp_hal_pin_write(self, mp_obj_is_true(args[0]));
   1bfe4:	697b      	ldr	r3, [r7, #20]
   1bfe6:	689c      	ldr	r4, [r3, #8]
   1bfe8:	697b      	ldr	r3, [r7, #20]
   1bfea:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
   1bfee:	683b      	ldr	r3, [r7, #0]
   1bff0:	681b      	ldr	r3, [r3, #0]
   1bff2:	4618      	mov	r0, r3
   1bff4:	f7f1 fd2c 	bl	da50 <mp_obj_is_true>
   1bff8:	4603      	mov	r3, r0
   1bffa:	2b00      	cmp	r3, #0
   1bffc:	d003      	beq.n	1c006 <pin_call+0x66>
   1bffe:	697b      	ldr	r3, [r7, #20]
   1c000:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1c004:	e000      	b.n	1c008 <pin_call+0x68>
   1c006:	2300      	movs	r3, #0
   1c008:	461a      	mov	r2, r3
   1c00a:	4629      	mov	r1, r5
   1c00c:	4620      	mov	r0, r4
   1c00e:	f001 fe71 	bl	1dcf4 <GPIOPinWrite>
        return mp_const_none;
   1c012:	4b02      	ldr	r3, [pc, #8]	; (1c01c <pin_call+0x7c>)
    }
}
   1c014:	4618      	mov	r0, r3
   1c016:	3718      	adds	r7, #24
   1c018:	46bd      	mov	sp, r7
   1c01a:	bdb0      	pop	{r4, r5, r7, pc}
   1c01c:	000234d4 	.word	0x000234d4

0001c020 <pin_mapper>:

/// \classmethod mapper([fun])
/// Get or set the pin mapper function.
STATIC mp_obj_t pin_mapper(size_t n_args, const mp_obj_t *args) {
   1c020:	b480      	push	{r7}
   1c022:	b083      	sub	sp, #12
   1c024:	af00      	add	r7, sp, #0
   1c026:	6078      	str	r0, [r7, #4]
   1c028:	6039      	str	r1, [r7, #0]
    if (n_args > 1) {
   1c02a:	687b      	ldr	r3, [r7, #4]
   1c02c:	2b01      	cmp	r3, #1
   1c02e:	d906      	bls.n	1c03e <pin_mapper+0x1e>
        MP_STATE_PORT(pin_class_mapper) = args[1];
   1c030:	683b      	ldr	r3, [r7, #0]
   1c032:	685b      	ldr	r3, [r3, #4]
   1c034:	4a06      	ldr	r2, [pc, #24]	; (1c050 <pin_mapper+0x30>)
   1c036:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
        return mp_const_none;
   1c03a:	4b06      	ldr	r3, [pc, #24]	; (1c054 <pin_mapper+0x34>)
   1c03c:	e002      	b.n	1c044 <pin_mapper+0x24>
    }
    return MP_STATE_PORT(pin_class_mapper);
   1c03e:	4b04      	ldr	r3, [pc, #16]	; (1c050 <pin_mapper+0x30>)
   1c040:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
}
   1c044:	4618      	mov	r0, r3
   1c046:	370c      	adds	r7, #12
   1c048:	46bd      	mov	sp, r7
   1c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c04e:	4770      	bx	lr
   1c050:	200012f0 	.word	0x200012f0
   1c054:	000234d4 	.word	0x000234d4

0001c058 <pin_map_dict>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(pin_mapper_fun_obj, 1, 2, pin_mapper);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(pin_mapper_obj, MP_ROM_PTR(&pin_mapper_fun_obj));

/// \classmethod dict([dict])
/// Get or set the pin mapper dictionary.
STATIC mp_obj_t pin_map_dict(size_t n_args, const mp_obj_t *args) {
   1c058:	b480      	push	{r7}
   1c05a:	b083      	sub	sp, #12
   1c05c:	af00      	add	r7, sp, #0
   1c05e:	6078      	str	r0, [r7, #4]
   1c060:	6039      	str	r1, [r7, #0]
    if (n_args > 1) {
   1c062:	687b      	ldr	r3, [r7, #4]
   1c064:	2b01      	cmp	r3, #1
   1c066:	d906      	bls.n	1c076 <pin_map_dict+0x1e>
        MP_STATE_PORT(pin_class_map_dict) = args[1];
   1c068:	683b      	ldr	r3, [r7, #0]
   1c06a:	685b      	ldr	r3, [r3, #4]
   1c06c:	4a06      	ldr	r2, [pc, #24]	; (1c088 <pin_map_dict+0x30>)
   1c06e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
        return mp_const_none;
   1c072:	4b06      	ldr	r3, [pc, #24]	; (1c08c <pin_map_dict+0x34>)
   1c074:	e002      	b.n	1c07c <pin_map_dict+0x24>
    }
    return MP_STATE_PORT(pin_class_map_dict);
   1c076:	4b04      	ldr	r3, [pc, #16]	; (1c088 <pin_map_dict+0x30>)
   1c078:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
}
   1c07c:	4618      	mov	r0, r3
   1c07e:	370c      	adds	r7, #12
   1c080:	46bd      	mov	sp, r7
   1c082:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c086:	4770      	bx	lr
   1c088:	200012f0 	.word	0x200012f0
   1c08c:	000234d4 	.word	0x000234d4

0001c090 <pin_af_list>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(pin_map_dict_fun_obj, 1, 2, pin_map_dict);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(pin_map_dict_obj, MP_ROM_PTR(&pin_map_dict_fun_obj));

/// \classmethod af_list()
/// Returns an array of alternate functions available for this pin.
STATIC mp_obj_t pin_af_list(mp_obj_t self_in) {
   1c090:	b580      	push	{r7, lr}
   1c092:	b086      	sub	sp, #24
   1c094:	af00      	add	r7, sp, #0
   1c096:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1c098:	687b      	ldr	r3, [r7, #4]
   1c09a:	60fb      	str	r3, [r7, #12]
    mp_obj_t result = mp_obj_new_list(0, NULL);
   1c09c:	2100      	movs	r1, #0
   1c09e:	2000      	movs	r0, #0
   1c0a0:	f7f5 fc64 	bl	1196c <mp_obj_new_list>
   1c0a4:	60b8      	str	r0, [r7, #8]

    const pin_af_obj_t *af = self->af_list;
   1c0a6:	68fb      	ldr	r3, [r7, #12]
   1c0a8:	695b      	ldr	r3, [r3, #20]
   1c0aa:	617b      	str	r3, [r7, #20]
    for (mp_uint_t i = 0; i < self->num_afs; i++, af++) {
   1c0ac:	2300      	movs	r3, #0
   1c0ae:	613b      	str	r3, [r7, #16]
   1c0b0:	e009      	b.n	1c0c6 <pin_af_list+0x36>
        mp_obj_list_append(result, MP_OBJ_FROM_PTR(af));
   1c0b2:	6979      	ldr	r1, [r7, #20]
   1c0b4:	68b8      	ldr	r0, [r7, #8]
   1c0b6:	f7f4 ffc7 	bl	11048 <mp_obj_list_append>
    for (mp_uint_t i = 0; i < self->num_afs; i++, af++) {
   1c0ba:	693b      	ldr	r3, [r7, #16]
   1c0bc:	3301      	adds	r3, #1
   1c0be:	613b      	str	r3, [r7, #16]
   1c0c0:	697b      	ldr	r3, [r7, #20]
   1c0c2:	3310      	adds	r3, #16
   1c0c4:	617b      	str	r3, [r7, #20]
   1c0c6:	68fb      	ldr	r3, [r7, #12]
   1c0c8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
   1c0cc:	461a      	mov	r2, r3
   1c0ce:	693b      	ldr	r3, [r7, #16]
   1c0d0:	429a      	cmp	r2, r3
   1c0d2:	d8ee      	bhi.n	1c0b2 <pin_af_list+0x22>
    }
    return result;
   1c0d4:	68bb      	ldr	r3, [r7, #8]
}
   1c0d6:	4618      	mov	r0, r3
   1c0d8:	3718      	adds	r7, #24
   1c0da:	46bd      	mov	sp, r7
   1c0dc:	bd80      	pop	{r7, pc}
   1c0de:	bf00      	nop

0001c0e0 <pin_debug>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_af_list_obj, pin_af_list);

/// \classmethod debug([state])
/// Get or set the debugging state (`True` or `False` for on or off).
STATIC mp_obj_t pin_debug(size_t n_args, const mp_obj_t *args) {
   1c0e0:	b580      	push	{r7, lr}
   1c0e2:	b082      	sub	sp, #8
   1c0e4:	af00      	add	r7, sp, #0
   1c0e6:	6078      	str	r0, [r7, #4]
   1c0e8:	6039      	str	r1, [r7, #0]
    if (n_args > 1) {
   1c0ea:	687b      	ldr	r3, [r7, #4]
   1c0ec:	2b01      	cmp	r3, #1
   1c0ee:	d90b      	bls.n	1c108 <pin_debug+0x28>
        pin_class_debug = mp_obj_is_true(args[1]);
   1c0f0:	683b      	ldr	r3, [r7, #0]
   1c0f2:	3304      	adds	r3, #4
   1c0f4:	681b      	ldr	r3, [r3, #0]
   1c0f6:	4618      	mov	r0, r3
   1c0f8:	f7f1 fcaa 	bl	da50 <mp_obj_is_true>
   1c0fc:	4603      	mov	r3, r0
   1c0fe:	461a      	mov	r2, r3
   1c100:	4b06      	ldr	r3, [pc, #24]	; (1c11c <pin_debug+0x3c>)
   1c102:	701a      	strb	r2, [r3, #0]
        return mp_const_none;
   1c104:	4b06      	ldr	r3, [pc, #24]	; (1c120 <pin_debug+0x40>)
   1c106:	e005      	b.n	1c114 <pin_debug+0x34>
    }
    return mp_obj_new_bool(pin_class_debug);
   1c108:	4b04      	ldr	r3, [pc, #16]	; (1c11c <pin_debug+0x3c>)
   1c10a:	781b      	ldrb	r3, [r3, #0]
   1c10c:	4618      	mov	r0, r3
   1c10e:	f7ff fd3b 	bl	1bb88 <mp_obj_new_bool>
   1c112:	4603      	mov	r3, r0
}
   1c114:	4618      	mov	r0, r3
   1c116:	3708      	adds	r7, #8
   1c118:	46bd      	mov	sp, r7
   1c11a:	bd80      	pop	{r7, pc}
   1c11c:	200012c4 	.word	0x200012c4
   1c120:	000234d4 	.word	0x000234d4

0001c124 <pin_obj_init_helper>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(pin_debug_fun_obj, 1, 2, pin_debug);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(pin_debug_obj, MP_ROM_PTR(&pin_debug_fun_obj));

// init(dir, pull=None, af=-1, *, value, alt)
STATIC mp_obj_t pin_obj_init_helper(const pin_obj_t *self, size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   1c124:	b5b0      	push	{r4, r5, r7, lr}
   1c126:	b090      	sub	sp, #64	; 0x40
   1c128:	af02      	add	r7, sp, #8
   1c12a:	60f8      	str	r0, [r7, #12]
   1c12c:	60b9      	str	r1, [r7, #8]
   1c12e:	607a      	str	r2, [r7, #4]
   1c130:	603b      	str	r3, [r7, #0]
        { MP_QSTR_alt, MP_ARG_KW_ONLY | MP_ARG_INT, {.u_int = -1}},
    };

    // parse args
    mp_arg_val_t args[MP_ARRAY_SIZE(allowed_args)];
    mp_arg_parse_all(n_args, pos_args, kw_args, MP_ARRAY_SIZE(allowed_args), allowed_args, args);
   1c132:	f107 0310 	add.w	r3, r7, #16
   1c136:	9301      	str	r3, [sp, #4]
   1c138:	4b59      	ldr	r3, [pc, #356]	; (1c2a0 <pin_obj_init_helper+0x17c>)
   1c13a:	9300      	str	r3, [sp, #0]
   1c13c:	2306      	movs	r3, #6
   1c13e:	683a      	ldr	r2, [r7, #0]
   1c140:	6879      	ldr	r1, [r7, #4]
   1c142:	68b8      	ldr	r0, [r7, #8]
   1c144:	f7f0 ffde 	bl	d104 <mp_arg_parse_all>

    // get io dir
    uint32_t dir = args[0].u_int;
   1c148:	693b      	ldr	r3, [r7, #16]
   1c14a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (!IS_GPIO_DIR(dir)) {
   1c14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c14e:	2b00      	cmp	r3, #0
   1c150:	d00e      	beq.n	1c170 <pin_obj_init_helper+0x4c>
   1c152:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c154:	2b01      	cmp	r3, #1
   1c156:	d00b      	beq.n	1c170 <pin_obj_init_helper+0x4c>
   1c158:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c15a:	2b02      	cmp	r3, #2
   1c15c:	d008      	beq.n	1c170 <pin_obj_init_helper+0x4c>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "invalid pin direction: %d", dir));
   1c15e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c160:	4950      	ldr	r1, [pc, #320]	; (1c2a4 <pin_obj_init_helper+0x180>)
   1c162:	4851      	ldr	r0, [pc, #324]	; (1c2a8 <pin_obj_init_helper+0x184>)
   1c164:	f7f3 faae 	bl	f6c4 <mp_obj_new_exception_msg_varg>
   1c168:	4603      	mov	r3, r0
   1c16a:	4618      	mov	r0, r3
   1c16c:	f7e4 f8b8 	bl	2e0 <nlr_jump>
    }

    // get pull dir
    uint type = GPIO_PIN_TYPE_STD;
   1c170:	2308      	movs	r3, #8
   1c172:	637b      	str	r3, [r7, #52]	; 0x34
    if (args[1].u_obj != mp_const_none) {
   1c174:	697b      	ldr	r3, [r7, #20]
   1c176:	4a4d      	ldr	r2, [pc, #308]	; (1c2ac <pin_obj_init_helper+0x188>)
   1c178:	4293      	cmp	r3, r2
   1c17a:	d005      	beq.n	1c188 <pin_obj_init_helper+0x64>
        type = mp_obj_get_int(args[1].u_obj);
   1c17c:	697b      	ldr	r3, [r7, #20]
   1c17e:	4618      	mov	r0, r3
   1c180:	f7f1 fd66 	bl	dc50 <mp_obj_get_int>
   1c184:	4603      	mov	r3, r0
   1c186:	637b      	str	r3, [r7, #52]	; 0x34
    }
    if (!IS_GPIO_TYPE(type)) {
   1c188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c18a:	2b08      	cmp	r3, #8
   1c18c:	d01c      	beq.n	1c1c8 <pin_obj_init_helper+0xa4>
   1c18e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c190:	2b0a      	cmp	r3, #10
   1c192:	d019      	beq.n	1c1c8 <pin_obj_init_helper+0xa4>
   1c194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c196:	2b0c      	cmp	r3, #12
   1c198:	d016      	beq.n	1c1c8 <pin_obj_init_helper+0xa4>
   1c19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c19c:	2b09      	cmp	r3, #9
   1c19e:	d013      	beq.n	1c1c8 <pin_obj_init_helper+0xa4>
   1c1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c1a2:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
   1c1a6:	d00f      	beq.n	1c1c8 <pin_obj_init_helper+0xa4>
   1c1a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c1aa:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
   1c1ae:	d00b      	beq.n	1c1c8 <pin_obj_init_helper+0xa4>
   1c1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c1b2:	2b00      	cmp	r3, #0
   1c1b4:	d008      	beq.n	1c1c8 <pin_obj_init_helper+0xa4>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "invalid pin type: %d", type));
   1c1b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1c1b8:	493d      	ldr	r1, [pc, #244]	; (1c2b0 <pin_obj_init_helper+0x18c>)
   1c1ba:	483b      	ldr	r0, [pc, #236]	; (1c2a8 <pin_obj_init_helper+0x184>)
   1c1bc:	f7f3 fa82 	bl	f6c4 <mp_obj_new_exception_msg_varg>
   1c1c0:	4603      	mov	r3, r0
   1c1c2:	4618      	mov	r0, r3
   1c1c4:	f7e4 f88c 	bl	2e0 <nlr_jump>
    }

    uint drive = GPIO_STRENGTH_2MA;
   1c1c8:	2301      	movs	r3, #1
   1c1ca:	633b      	str	r3, [r7, #48]	; 0x30
    if (args[2].u_obj != MP_OBJ_NULL) {
   1c1cc:	69bb      	ldr	r3, [r7, #24]
   1c1ce:	2b00      	cmp	r3, #0
   1c1d0:	d005      	beq.n	1c1de <pin_obj_init_helper+0xba>
        drive = mp_obj_get_int(args[2].u_obj);
   1c1d2:	69bb      	ldr	r3, [r7, #24]
   1c1d4:	4618      	mov	r0, r3
   1c1d6:	f7f1 fd3b 	bl	dc50 <mp_obj_get_int>
   1c1da:	4603      	mov	r3, r0
   1c1dc:	633b      	str	r3, [r7, #48]	; 0x30
    }
    if (!IS_GPIO_STRENGTH(drive)) {
   1c1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c1e0:	2b01      	cmp	r3, #1
   1c1e2:	d00e      	beq.n	1c202 <pin_obj_init_helper+0xde>
   1c1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c1e6:	2b02      	cmp	r3, #2
   1c1e8:	d00b      	beq.n	1c202 <pin_obj_init_helper+0xde>
   1c1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c1ec:	2b66      	cmp	r3, #102	; 0x66
   1c1ee:	d008      	beq.n	1c202 <pin_obj_init_helper+0xde>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "invalid pin drive: %d", drive));
   1c1f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1c1f2:	4930      	ldr	r1, [pc, #192]	; (1c2b4 <pin_obj_init_helper+0x190>)
   1c1f4:	482c      	ldr	r0, [pc, #176]	; (1c2a8 <pin_obj_init_helper+0x184>)
   1c1f6:	f7f3 fa65 	bl	f6c4 <mp_obj_new_exception_msg_varg>
   1c1fa:	4603      	mov	r3, r0
   1c1fc:	4618      	mov	r0, r3
   1c1fe:	f7e4 f86f 	bl	2e0 <nlr_jump>
    }

    // get af (alternate function); alt-arg overrides af-arg
    mp_int_t af = args[5].u_int;
   1c202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c204:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (af == -1) {
   1c206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c20c:	d101      	bne.n	1c212 <pin_obj_init_helper+0xee>
        af = args[3].u_int;
   1c20e:	69fb      	ldr	r3, [r7, #28]
   1c210:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    if ((dir == GPIO_DIR_MODE_HW) && !IS_GPIO_AF(af)) {
   1c212:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c214:	2b02      	cmp	r3, #2
   1c216:	d119      	bne.n	1c24c <pin_obj_init_helper+0x128>
   1c218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c21a:	2b01      	cmp	r3, #1
   1c21c:	dd04      	ble.n	1c228 <pin_obj_init_helper+0x104>
   1c21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c220:	2b0c      	cmp	r3, #12
   1c222:	dc01      	bgt.n	1c228 <pin_obj_init_helper+0x104>
   1c224:	2301      	movs	r3, #1
   1c226:	e000      	b.n	1c22a <pin_obj_init_helper+0x106>
   1c228:	2300      	movs	r3, #0
   1c22a:	f003 0301 	and.w	r3, r3, #1
   1c22e:	b2db      	uxtb	r3, r3
   1c230:	f083 0301 	eor.w	r3, r3, #1
   1c234:	b2db      	uxtb	r3, r3
   1c236:	2b00      	cmp	r3, #0
   1c238:	d008      	beq.n	1c24c <pin_obj_init_helper+0x128>
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError, "invalid pin af: %d", af));
   1c23a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c23c:	491e      	ldr	r1, [pc, #120]	; (1c2b8 <pin_obj_init_helper+0x194>)
   1c23e:	481a      	ldr	r0, [pc, #104]	; (1c2a8 <pin_obj_init_helper+0x184>)
   1c240:	f7f3 fa40 	bl	f6c4 <mp_obj_new_exception_msg_varg>
   1c244:	4603      	mov	r3, r0
   1c246:	4618      	mov	r0, r3
   1c248:	f7e4 f84a 	bl	2e0 <nlr_jump>

    // if given, set the pin value before initialising to prevent glitches
//    if (args[4].u_obj != MP_OBJ_NULL) {
//        mp_hal_pin_write(self, mp_obj_is_true(args[3].u_obj));
//    }
    mp_hal_pin_config(self, dir, type, drive);
   1c24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c24e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1c250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1c252:	68f8      	ldr	r0, [r7, #12]
   1c254:	f7ff fc30 	bl	1bab8 <mp_hal_pin_config>
    mp_hal_pin_set_af(self, af);
   1c258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c25a:	b2db      	uxtb	r3, r3
   1c25c:	4619      	mov	r1, r3
   1c25e:	68f8      	ldr	r0, [r7, #12]
   1c260:	f7ff fc4c 	bl	1bafc <mp_hal_pin_set_af>

    if (args[4].u_obj != MP_OBJ_NULL) {
   1c264:	6a3b      	ldr	r3, [r7, #32]
   1c266:	2b00      	cmp	r3, #0
   1c268:	d015      	beq.n	1c296 <pin_obj_init_helper+0x172>
        mp_hal_pin_write(self, mp_obj_is_true(args[4].u_obj));
   1c26a:	68fb      	ldr	r3, [r7, #12]
   1c26c:	689c      	ldr	r4, [r3, #8]
   1c26e:	68fb      	ldr	r3, [r7, #12]
   1c270:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
   1c274:	6a3b      	ldr	r3, [r7, #32]
   1c276:	4618      	mov	r0, r3
   1c278:	f7f1 fbea 	bl	da50 <mp_obj_is_true>
   1c27c:	4603      	mov	r3, r0
   1c27e:	2b00      	cmp	r3, #0
   1c280:	d003      	beq.n	1c28a <pin_obj_init_helper+0x166>
   1c282:	68fb      	ldr	r3, [r7, #12]
   1c284:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1c288:	e000      	b.n	1c28c <pin_obj_init_helper+0x168>
   1c28a:	2300      	movs	r3, #0
   1c28c:	461a      	mov	r2, r3
   1c28e:	4629      	mov	r1, r5
   1c290:	4620      	mov	r0, r4
   1c292:	f001 fd2f 	bl	1dcf4 <GPIOPinWrite>
    }

    return mp_const_none;
   1c296:	4b05      	ldr	r3, [pc, #20]	; (1c2ac <pin_obj_init_helper+0x188>)
}
   1c298:	4618      	mov	r0, r3
   1c29a:	3738      	adds	r7, #56	; 0x38
   1c29c:	46bd      	mov	sp, r7
   1c29e:	bdb0      	pop	{r4, r5, r7, pc}
   1c2a0:	000250fc 	.word	0x000250fc
   1c2a4:	00024ebc 	.word	0x00024ebc
   1c2a8:	000227a8 	.word	0x000227a8
   1c2ac:	000234d4 	.word	0x000234d4
   1c2b0:	00024ed8 	.word	0x00024ed8
   1c2b4:	00024ef0 	.word	0x00024ef0
   1c2b8:	00024f08 	.word	0x00024f08

0001c2bc <pin_obj_init>:

STATIC mp_obj_t pin_obj_init(size_t n_args, const mp_obj_t *args, mp_map_t *kw_args) {
   1c2bc:	b580      	push	{r7, lr}
   1c2be:	b084      	sub	sp, #16
   1c2c0:	af00      	add	r7, sp, #0
   1c2c2:	60f8      	str	r0, [r7, #12]
   1c2c4:	60b9      	str	r1, [r7, #8]
   1c2c6:	607a      	str	r2, [r7, #4]
    return pin_obj_init_helper(MP_OBJ_TO_PTR(args[0]), n_args - 1, args + 1, kw_args);
   1c2c8:	68bb      	ldr	r3, [r7, #8]
   1c2ca:	6818      	ldr	r0, [r3, #0]
   1c2cc:	68fb      	ldr	r3, [r7, #12]
   1c2ce:	1e59      	subs	r1, r3, #1
   1c2d0:	68bb      	ldr	r3, [r7, #8]
   1c2d2:	1d1a      	adds	r2, r3, #4
   1c2d4:	687b      	ldr	r3, [r7, #4]
   1c2d6:	f7ff ff25 	bl	1c124 <pin_obj_init_helper>
   1c2da:	4603      	mov	r3, r0
}
   1c2dc:	4618      	mov	r0, r3
   1c2de:	3710      	adds	r7, #16
   1c2e0:	46bd      	mov	sp, r7
   1c2e2:	bd80      	pop	{r7, pc}

0001c2e4 <pin_value>:
///
///   - With no argument, return 0 or 1 depending on the logic level of the pin.
///   - With `value` given, set the logic level of the pin.  `value` can be
///   anything that converts to a boolean.  If it converts to `True`, the pin
///   is set high, otherwise it is set low.
STATIC mp_obj_t pin_value(size_t n_args, const mp_obj_t *args) {
   1c2e4:	b580      	push	{r7, lr}
   1c2e6:	b082      	sub	sp, #8
   1c2e8:	af00      	add	r7, sp, #0
   1c2ea:	6078      	str	r0, [r7, #4]
   1c2ec:	6039      	str	r1, [r7, #0]
    return pin_call(args[0], n_args - 1, 0, args + 1);
   1c2ee:	683b      	ldr	r3, [r7, #0]
   1c2f0:	6818      	ldr	r0, [r3, #0]
   1c2f2:	687b      	ldr	r3, [r7, #4]
   1c2f4:	1e59      	subs	r1, r3, #1
   1c2f6:	683b      	ldr	r3, [r7, #0]
   1c2f8:	3304      	adds	r3, #4
   1c2fa:	2200      	movs	r2, #0
   1c2fc:	f7ff fe50 	bl	1bfa0 <pin_call>
   1c300:	4603      	mov	r3, r0
}
   1c302:	4618      	mov	r0, r3
   1c304:	3708      	adds	r7, #8
   1c306:	46bd      	mov	sp, r7
   1c308:	bd80      	pop	{r7, pc}
   1c30a:	bf00      	nop

0001c30c <pin_off>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(pin_value_obj, 1, 2, pin_value);

STATIC mp_obj_t pin_off(mp_obj_t self_in) {
   1c30c:	b580      	push	{r7, lr}
   1c30e:	b084      	sub	sp, #16
   1c310:	af00      	add	r7, sp, #0
   1c312:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1c314:	687b      	ldr	r3, [r7, #4]
   1c316:	60fb      	str	r3, [r7, #12]
    mp_hal_pin_low(self);
   1c318:	68fb      	ldr	r3, [r7, #12]
   1c31a:	6898      	ldr	r0, [r3, #8]
   1c31c:	68fb      	ldr	r3, [r7, #12]
   1c31e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1c322:	2200      	movs	r2, #0
   1c324:	4619      	mov	r1, r3
   1c326:	f001 fce5 	bl	1dcf4 <GPIOPinWrite>
    return mp_const_none;
   1c32a:	4b02      	ldr	r3, [pc, #8]	; (1c334 <pin_off+0x28>)
}
   1c32c:	4618      	mov	r0, r3
   1c32e:	3710      	adds	r7, #16
   1c330:	46bd      	mov	sp, r7
   1c332:	bd80      	pop	{r7, pc}
   1c334:	000234d4 	.word	0x000234d4

0001c338 <pin_on>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_off_obj, pin_off);

STATIC mp_obj_t pin_on(mp_obj_t self_in) {
   1c338:	b580      	push	{r7, lr}
   1c33a:	b084      	sub	sp, #16
   1c33c:	af00      	add	r7, sp, #0
   1c33e:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1c340:	687b      	ldr	r3, [r7, #4]
   1c342:	60fb      	str	r3, [r7, #12]
    mp_hal_pin_high(self);
   1c344:	68fb      	ldr	r3, [r7, #12]
   1c346:	6898      	ldr	r0, [r3, #8]
   1c348:	68fb      	ldr	r3, [r7, #12]
   1c34a:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   1c34e:	68fb      	ldr	r3, [r7, #12]
   1c350:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1c354:	461a      	mov	r2, r3
   1c356:	f001 fccd 	bl	1dcf4 <GPIOPinWrite>
    return mp_const_none;
   1c35a:	4b02      	ldr	r3, [pc, #8]	; (1c364 <pin_on+0x2c>)
}
   1c35c:	4618      	mov	r0, r3
   1c35e:	3710      	adds	r7, #16
   1c360:	46bd      	mov	sp, r7
   1c362:	bd80      	pop	{r7, pc}
   1c364:	000234d4 	.word	0x000234d4

0001c368 <pin_irq>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_on_obj, pin_on);

// pin.irq(handler=None, trigger=IRQ_RISING, hard=False)
STATIC mp_obj_t pin_irq(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   1c368:	b480      	push	{r7}
   1c36a:	b085      	sub	sp, #20
   1c36c:	af00      	add	r7, sp, #0
   1c36e:	60f8      	str	r0, [r7, #12]
   1c370:	60b9      	str	r1, [r7, #8]
   1c372:	607a      	str	r2, [r7, #4]
//        extint_register_pin(self, args[ARG_trigger].u_int,
//            args[ARG_hard].u_bool, args[ARG_handler].u_obj);
//    }
//
//    // TODO should return an IRQ object
    return mp_const_none;
   1c374:	4b03      	ldr	r3, [pc, #12]	; (1c384 <pin_irq+0x1c>)
}
   1c376:	4618      	mov	r0, r3
   1c378:	3714      	adds	r7, #20
   1c37a:	46bd      	mov	sp, r7
   1c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c380:	4770      	bx	lr
   1c382:	bf00      	nop
   1c384:	000234d4 	.word	0x000234d4

0001c388 <pin_name>:
STATIC MP_DEFINE_CONST_FUN_OBJ_KW(pin_irq_obj, 1, pin_irq);

/// \method name()
/// Get the pin name.
STATIC mp_obj_t pin_name(mp_obj_t self_in) {
   1c388:	b480      	push	{r7}
   1c38a:	b085      	sub	sp, #20
   1c38c:	af00      	add	r7, sp, #0
   1c38e:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1c390:	687b      	ldr	r3, [r7, #4]
   1c392:	60fb      	str	r3, [r7, #12]
    return MP_OBJ_NEW_QSTR(self->name);
   1c394:	68fb      	ldr	r3, [r7, #12]
   1c396:	685b      	ldr	r3, [r3, #4]
   1c398:	009b      	lsls	r3, r3, #2
   1c39a:	f043 0302 	orr.w	r3, r3, #2
}
   1c39e:	4618      	mov	r0, r3
   1c3a0:	3714      	adds	r7, #20
   1c3a2:	46bd      	mov	sp, r7
   1c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c3a8:	4770      	bx	lr
   1c3aa:	bf00      	nop

0001c3ac <pin_names>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_name_obj, pin_name);

/// \method names()
/// Returns the cpu and board names for this pin.
STATIC mp_obj_t pin_names(mp_obj_t self_in) {
   1c3ac:	b580      	push	{r7, lr}
   1c3ae:	b088      	sub	sp, #32
   1c3b0:	af00      	add	r7, sp, #0
   1c3b2:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1c3b4:	687b      	ldr	r3, [r7, #4]
   1c3b6:	617b      	str	r3, [r7, #20]
    mp_obj_t result = mp_obj_new_list(0, NULL);
   1c3b8:	2100      	movs	r1, #0
   1c3ba:	2000      	movs	r0, #0
   1c3bc:	f7f5 fad6 	bl	1196c <mp_obj_new_list>
   1c3c0:	6138      	str	r0, [r7, #16]
    mp_obj_list_append(result, MP_OBJ_NEW_QSTR(self->name));
   1c3c2:	697b      	ldr	r3, [r7, #20]
   1c3c4:	685b      	ldr	r3, [r3, #4]
   1c3c6:	009b      	lsls	r3, r3, #2
   1c3c8:	f043 0302 	orr.w	r3, r3, #2
   1c3cc:	4619      	mov	r1, r3
   1c3ce:	6938      	ldr	r0, [r7, #16]
   1c3d0:	f7f4 fe3a 	bl	11048 <mp_obj_list_append>

    const mp_map_t *map = &pin_board_pins_locals_dict.map;
   1c3d4:	4b12      	ldr	r3, [pc, #72]	; (1c420 <pin_names+0x74>)
   1c3d6:	60fb      	str	r3, [r7, #12]
    mp_map_elem_t *elem = map->table;
   1c3d8:	68fb      	ldr	r3, [r7, #12]
   1c3da:	689b      	ldr	r3, [r3, #8]
   1c3dc:	61fb      	str	r3, [r7, #28]

    for (mp_uint_t i = 0; i < map->used; i++, elem++) {
   1c3de:	2300      	movs	r3, #0
   1c3e0:	61bb      	str	r3, [r7, #24]
   1c3e2:	e010      	b.n	1c406 <pin_names+0x5a>
        if (elem->value == self_in) {
   1c3e4:	69fb      	ldr	r3, [r7, #28]
   1c3e6:	685a      	ldr	r2, [r3, #4]
   1c3e8:	687b      	ldr	r3, [r7, #4]
   1c3ea:	429a      	cmp	r2, r3
   1c3ec:	d105      	bne.n	1c3fa <pin_names+0x4e>
            mp_obj_list_append(result, elem->key);
   1c3ee:	69fb      	ldr	r3, [r7, #28]
   1c3f0:	681b      	ldr	r3, [r3, #0]
   1c3f2:	4619      	mov	r1, r3
   1c3f4:	6938      	ldr	r0, [r7, #16]
   1c3f6:	f7f4 fe27 	bl	11048 <mp_obj_list_append>
    for (mp_uint_t i = 0; i < map->used; i++, elem++) {
   1c3fa:	69bb      	ldr	r3, [r7, #24]
   1c3fc:	3301      	adds	r3, #1
   1c3fe:	61bb      	str	r3, [r7, #24]
   1c400:	69fb      	ldr	r3, [r7, #28]
   1c402:	3308      	adds	r3, #8
   1c404:	61fb      	str	r3, [r7, #28]
   1c406:	68fb      	ldr	r3, [r7, #12]
   1c408:	681b      	ldr	r3, [r3, #0]
   1c40a:	f3c3 03dc 	ubfx	r3, r3, #3, #29
   1c40e:	461a      	mov	r2, r3
   1c410:	69bb      	ldr	r3, [r7, #24]
   1c412:	429a      	cmp	r2, r3
   1c414:	d8e6      	bhi.n	1c3e4 <pin_names+0x38>
        }
    }
    return result;
   1c416:	693b      	ldr	r3, [r7, #16]
}
   1c418:	4618      	mov	r0, r3
   1c41a:	3720      	adds	r7, #32
   1c41c:	46bd      	mov	sp, r7
   1c41e:	bd80      	pop	{r7, pc}
   1c420:	00025a8c 	.word	0x00025a8c

0001c424 <pin_port>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_names_obj, pin_names);

/// \method port()
/// Get the pin port.
STATIC mp_obj_t pin_port(mp_obj_t self_in) {
   1c424:	b480      	push	{r7}
   1c426:	b085      	sub	sp, #20
   1c428:	af00      	add	r7, sp, #0
   1c42a:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1c42c:	687b      	ldr	r3, [r7, #4]
   1c42e:	60fb      	str	r3, [r7, #12]
    return MP_OBJ_NEW_SMALL_INT(self->port);
   1c430:	68fb      	ldr	r3, [r7, #12]
   1c432:	689b      	ldr	r3, [r3, #8]
   1c434:	005b      	lsls	r3, r3, #1
   1c436:	f043 0301 	orr.w	r3, r3, #1
}
   1c43a:	4618      	mov	r0, r3
   1c43c:	3714      	adds	r7, #20
   1c43e:	46bd      	mov	sp, r7
   1c440:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c444:	4770      	bx	lr
   1c446:	bf00      	nop

0001c448 <pin_pin>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_port_obj, pin_port);

/// \method pin()
/// Get the pin number.
STATIC mp_obj_t pin_pin(mp_obj_t self_in) {
   1c448:	b480      	push	{r7}
   1c44a:	b085      	sub	sp, #20
   1c44c:	af00      	add	r7, sp, #0
   1c44e:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1c450:	687b      	ldr	r3, [r7, #4]
   1c452:	60fb      	str	r3, [r7, #12]
    return MP_OBJ_NEW_SMALL_INT(self->pin_num);
   1c454:	68fb      	ldr	r3, [r7, #12]
   1c456:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1c45a:	005b      	lsls	r3, r3, #1
   1c45c:	f043 0301 	orr.w	r3, r3, #1
}
   1c460:	4618      	mov	r0, r3
   1c462:	3714      	adds	r7, #20
   1c464:	46bd      	mov	sp, r7
   1c466:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c46a:	4770      	bx	lr

0001c46c <pin_gpio>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(pin_pin_obj, pin_pin);

/// \method gpio()
/// Returns the base address of the GPIO block associated with this pin.
STATIC mp_obj_t pin_gpio(mp_obj_t self_in) {
   1c46c:	b480      	push	{r7}
   1c46e:	b085      	sub	sp, #20
   1c470:	af00      	add	r7, sp, #0
   1c472:	6078      	str	r0, [r7, #4]
    pin_obj_t *self = MP_OBJ_TO_PTR(self_in);
   1c474:	687b      	ldr	r3, [r7, #4]
   1c476:	60fb      	str	r3, [r7, #12]
    return MP_OBJ_NEW_SMALL_INT((intptr_t)self->port);
   1c478:	68fb      	ldr	r3, [r7, #12]
   1c47a:	689b      	ldr	r3, [r3, #8]
   1c47c:	005b      	lsls	r3, r3, #1
   1c47e:	f043 0301 	orr.w	r3, r3, #1
}
   1c482:	4618      	mov	r0, r3
   1c484:	3714      	adds	r7, #20
   1c486:	46bd      	mov	sp, r7
   1c488:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c48c:	4770      	bx	lr
   1c48e:	bf00      	nop

0001c490 <pin_dir>:

/// \method dir()
/// Returns the currently configured mode of the pin. The integer returned
/// will match one of the allowed constants for the mode argument to the init
/// function.
STATIC mp_obj_t pin_dir(mp_obj_t self_in) {
   1c490:	b580      	push	{r7, lr}
   1c492:	b082      	sub	sp, #8
   1c494:	af00      	add	r7, sp, #0
   1c496:	6078      	str	r0, [r7, #4]
    return MP_OBJ_NEW_SMALL_INT(mp_hal_pin_get_dir((pin_obj_t*)MP_OBJ_TO_PTR(self_in)));
   1c498:	687b      	ldr	r3, [r7, #4]
   1c49a:	689a      	ldr	r2, [r3, #8]
   1c49c:	687b      	ldr	r3, [r7, #4]
   1c49e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1c4a2:	4619      	mov	r1, r3
   1c4a4:	4610      	mov	r0, r2
   1c4a6:	f001 fb18 	bl	1dada <GPIODirModeGet>
   1c4aa:	4603      	mov	r3, r0
   1c4ac:	005b      	lsls	r3, r3, #1
   1c4ae:	f043 0301 	orr.w	r3, r3, #1
}
   1c4b2:	4618      	mov	r0, r3
   1c4b4:	3708      	adds	r7, #8
   1c4b6:	46bd      	mov	sp, r7
   1c4b8:	bd80      	pop	{r7, pc}
   1c4ba:	bf00      	nop

0001c4bc <pin_type>:

/// \method pull()
/// Returns the currently configured pull of the pin. The integer returned
/// will match one of the allowed constants for the pull argument to the init
/// function.
STATIC mp_obj_t pin_type(mp_obj_t self_in) {
   1c4bc:	b580      	push	{r7, lr}
   1c4be:	b084      	sub	sp, #16
   1c4c0:	af00      	add	r7, sp, #0
   1c4c2:	6078      	str	r0, [r7, #4]
    uint32_t type;
    pin_obj_t* self = MP_OBJ_TO_PTR(self_in);
   1c4c4:	687b      	ldr	r3, [r7, #4]
   1c4c6:	60fb      	str	r3, [r7, #12]
    MAP_GPIOPadConfigGet(self->port, self->pin_mask, NULL, &type);
   1c4c8:	68fb      	ldr	r3, [r7, #12]
   1c4ca:	6898      	ldr	r0, [r3, #8]
   1c4cc:	68fb      	ldr	r3, [r7, #12]
   1c4ce:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   1c4d2:	f107 0308 	add.w	r3, r7, #8
   1c4d6:	2200      	movs	r2, #0
   1c4d8:	f001 fba0 	bl	1dc1c <GPIOPadConfigGet>

    return MP_OBJ_NEW_SMALL_INT(type);
   1c4dc:	68bb      	ldr	r3, [r7, #8]
   1c4de:	005b      	lsls	r3, r3, #1
   1c4e0:	f043 0301 	orr.w	r3, r3, #1
}
   1c4e4:	4618      	mov	r0, r3
   1c4e6:	3710      	adds	r7, #16
   1c4e8:	46bd      	mov	sp, r7
   1c4ea:	bd80      	pop	{r7, pc}

0001c4ec <pin_af>:

/// \method af()
/// Returns the currently configured alternate-function of the pin. The
/// integer returned will match one of the allowed constants for the af
/// argument to the init function.
STATIC mp_obj_t pin_af(mp_obj_t self_in) {
   1c4ec:	b480      	push	{r7}
   1c4ee:	b083      	sub	sp, #12
   1c4f0:	af00      	add	r7, sp, #0
   1c4f2:	6078      	str	r0, [r7, #4]
    return MP_OBJ_NEW_SMALL_INT(mp_hal_pin_get_af((pin_obj_t*)MP_OBJ_TO_PTR(self_in)));
   1c4f4:	687b      	ldr	r3, [r7, #4]
   1c4f6:	691b      	ldr	r3, [r3, #16]
   1c4f8:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
   1c4fc:	687b      	ldr	r3, [r7, #4]
   1c4fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1c502:	009b      	lsls	r3, r3, #2
   1c504:	fa22 f303 	lsr.w	r3, r2, r3
   1c508:	f003 030f 	and.w	r3, r3, #15
   1c50c:	005b      	lsls	r3, r3, #1
   1c50e:	f043 0301 	orr.w	r3, r3, #1
}
   1c512:	4618      	mov	r0, r3
   1c514:	370c      	adds	r7, #12
   1c516:	46bd      	mov	sp, r7
   1c518:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c51c:	4770      	bx	lr
   1c51e:	bf00      	nop

0001c520 <pin_named_pins_obj_print>:
#include "py/mphal.h"
#include "pin.h"



STATIC void pin_named_pins_obj_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   1c520:	b580      	push	{r7, lr}
   1c522:	b086      	sub	sp, #24
   1c524:	af00      	add	r7, sp, #0
   1c526:	60f8      	str	r0, [r7, #12]
   1c528:	60b9      	str	r1, [r7, #8]
   1c52a:	607a      	str	r2, [r7, #4]
    pin_named_pins_obj_t *self = self_in;
   1c52c:	68bb      	ldr	r3, [r7, #8]
   1c52e:	617b      	str	r3, [r7, #20]
    mp_printf(print, "<Pin.%q>", self->name);
   1c530:	697b      	ldr	r3, [r7, #20]
   1c532:	685b      	ldr	r3, [r3, #4]
   1c534:	461a      	mov	r2, r3
   1c536:	4904      	ldr	r1, [pc, #16]	; (1c548 <pin_named_pins_obj_print+0x28>)
   1c538:	68f8      	ldr	r0, [r7, #12]
   1c53a:	f7e5 fd7d 	bl	2038 <mp_printf>
}
   1c53e:	bf00      	nop
   1c540:	3718      	adds	r7, #24
   1c542:	46bd      	mov	sp, r7
   1c544:	bd80      	pop	{r7, pc}
   1c546:	bf00      	nop
   1c548:	0002512c 	.word	0x0002512c

0001c54c <pin_find_named_pin>:
    .name = MP_QSTR_board,
    .print = pin_named_pins_obj_print,
    .locals_dict = (mp_obj_t)&pin_board_pins_locals_dict,
};

const pin_obj_t *pin_find_named_pin(const mp_obj_dict_t *named_pins, mp_obj_t name) {
   1c54c:	b580      	push	{r7, lr}
   1c54e:	b084      	sub	sp, #16
   1c550:	af00      	add	r7, sp, #0
   1c552:	6078      	str	r0, [r7, #4]
   1c554:	6039      	str	r1, [r7, #0]
    const mp_map_t *named_map = &named_pins->map;
   1c556:	687b      	ldr	r3, [r7, #4]
   1c558:	3304      	adds	r3, #4
   1c55a:	60fb      	str	r3, [r7, #12]
    mp_map_elem_t *named_elem = mp_map_lookup((mp_map_t*)named_map, name, MP_MAP_LOOKUP);
   1c55c:	2200      	movs	r2, #0
   1c55e:	6839      	ldr	r1, [r7, #0]
   1c560:	68f8      	ldr	r0, [r7, #12]
   1c562:	f7f0 ffed 	bl	d540 <mp_map_lookup>
   1c566:	60b8      	str	r0, [r7, #8]
    if (named_elem != NULL && named_elem->value != MP_OBJ_NULL) {
   1c568:	68bb      	ldr	r3, [r7, #8]
   1c56a:	2b00      	cmp	r3, #0
   1c56c:	d006      	beq.n	1c57c <pin_find_named_pin+0x30>
   1c56e:	68bb      	ldr	r3, [r7, #8]
   1c570:	685b      	ldr	r3, [r3, #4]
   1c572:	2b00      	cmp	r3, #0
   1c574:	d002      	beq.n	1c57c <pin_find_named_pin+0x30>
        return MP_OBJ_TO_PTR(named_elem->value);
   1c576:	68bb      	ldr	r3, [r7, #8]
   1c578:	685b      	ldr	r3, [r3, #4]
   1c57a:	e000      	b.n	1c57e <pin_find_named_pin+0x32>
    }
    return NULL;
   1c57c:	2300      	movs	r3, #0
}
   1c57e:	4618      	mov	r0, r3
   1c580:	3710      	adds	r7, #16
   1c582:	46bd      	mov	sp, r7
   1c584:	bd80      	pop	{r7, pc}
   1c586:	bf00      	nop

0001c588 <pin_find_af>:

const pin_af_obj_t *pin_find_af(const pin_obj_t *pin, uint8_t fn, uint8_t unit) {
   1c588:	b480      	push	{r7}
   1c58a:	b085      	sub	sp, #20
   1c58c:	af00      	add	r7, sp, #0
   1c58e:	6078      	str	r0, [r7, #4]
   1c590:	460b      	mov	r3, r1
   1c592:	70fb      	strb	r3, [r7, #3]
   1c594:	4613      	mov	r3, r2
   1c596:	70bb      	strb	r3, [r7, #2]
    const pin_af_obj_t *af = pin->af_list;
   1c598:	687b      	ldr	r3, [r7, #4]
   1c59a:	695b      	ldr	r3, [r3, #20]
   1c59c:	60fb      	str	r3, [r7, #12]
    for (mp_uint_t i = 0; i < pin->num_afs; i++, af++) {
   1c59e:	2300      	movs	r3, #0
   1c5a0:	60bb      	str	r3, [r7, #8]
   1c5a2:	e011      	b.n	1c5c8 <pin_find_af+0x40>
        if (af->fn == fn && af->unit == unit) {
   1c5a4:	68fb      	ldr	r3, [r7, #12]
   1c5a6:	795b      	ldrb	r3, [r3, #5]
   1c5a8:	78fa      	ldrb	r2, [r7, #3]
   1c5aa:	429a      	cmp	r2, r3
   1c5ac:	d106      	bne.n	1c5bc <pin_find_af+0x34>
   1c5ae:	68fb      	ldr	r3, [r7, #12]
   1c5b0:	799b      	ldrb	r3, [r3, #6]
   1c5b2:	78ba      	ldrb	r2, [r7, #2]
   1c5b4:	429a      	cmp	r2, r3
   1c5b6:	d101      	bne.n	1c5bc <pin_find_af+0x34>
            return af;
   1c5b8:	68fb      	ldr	r3, [r7, #12]
   1c5ba:	e00d      	b.n	1c5d8 <pin_find_af+0x50>
    for (mp_uint_t i = 0; i < pin->num_afs; i++, af++) {
   1c5bc:	68bb      	ldr	r3, [r7, #8]
   1c5be:	3301      	adds	r3, #1
   1c5c0:	60bb      	str	r3, [r7, #8]
   1c5c2:	68fb      	ldr	r3, [r7, #12]
   1c5c4:	3310      	adds	r3, #16
   1c5c6:	60fb      	str	r3, [r7, #12]
   1c5c8:	687b      	ldr	r3, [r7, #4]
   1c5ca:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
   1c5ce:	461a      	mov	r2, r3
   1c5d0:	68bb      	ldr	r3, [r7, #8]
   1c5d2:	429a      	cmp	r2, r3
   1c5d4:	d8e6      	bhi.n	1c5a4 <pin_find_af+0x1c>
        }
    }
    return NULL;
   1c5d6:	2300      	movs	r3, #0
}
   1c5d8:	4618      	mov	r0, r3
   1c5da:	3714      	adds	r7, #20
   1c5dc:	46bd      	mov	sp, r7
   1c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c5e2:	4770      	bx	lr

0001c5e4 <pin_find_af_by_index>:

const pin_af_obj_t *pin_find_af_by_index(const pin_obj_t *pin, mp_uint_t af_idx) {
   1c5e4:	b480      	push	{r7}
   1c5e6:	b085      	sub	sp, #20
   1c5e8:	af00      	add	r7, sp, #0
   1c5ea:	6078      	str	r0, [r7, #4]
   1c5ec:	6039      	str	r1, [r7, #0]
    const pin_af_obj_t *af = pin->af_list;
   1c5ee:	687b      	ldr	r3, [r7, #4]
   1c5f0:	695b      	ldr	r3, [r3, #20]
   1c5f2:	60fb      	str	r3, [r7, #12]
    for (mp_uint_t i = 0; i < pin->num_afs; i++, af++) {
   1c5f4:	2300      	movs	r3, #0
   1c5f6:	60bb      	str	r3, [r7, #8]
   1c5f8:	e00e      	b.n	1c618 <pin_find_af_by_index+0x34>
        if (af->idx == af_idx) {
   1c5fa:	68fb      	ldr	r3, [r7, #12]
   1c5fc:	f993 3004 	ldrsb.w	r3, [r3, #4]
   1c600:	461a      	mov	r2, r3
   1c602:	683b      	ldr	r3, [r7, #0]
   1c604:	429a      	cmp	r2, r3
   1c606:	d101      	bne.n	1c60c <pin_find_af_by_index+0x28>
            return af;
   1c608:	68fb      	ldr	r3, [r7, #12]
   1c60a:	e00d      	b.n	1c628 <pin_find_af_by_index+0x44>
    for (mp_uint_t i = 0; i < pin->num_afs; i++, af++) {
   1c60c:	68bb      	ldr	r3, [r7, #8]
   1c60e:	3301      	adds	r3, #1
   1c610:	60bb      	str	r3, [r7, #8]
   1c612:	68fb      	ldr	r3, [r7, #12]
   1c614:	3310      	adds	r3, #16
   1c616:	60fb      	str	r3, [r7, #12]
   1c618:	687b      	ldr	r3, [r7, #4]
   1c61a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
   1c61e:	461a      	mov	r2, r3
   1c620:	68bb      	ldr	r3, [r7, #8]
   1c622:	429a      	cmp	r2, r3
   1c624:	d8e9      	bhi.n	1c5fa <pin_find_af_by_index+0x16>
        }
    }
    return NULL;
   1c626:	2300      	movs	r3, #0
}
   1c628:	4618      	mov	r0, r3
   1c62a:	3714      	adds	r7, #20
   1c62c:	46bd      	mov	sp, r7
   1c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c632:	4770      	bx	lr

0001c634 <machine_init>:
#define PYB_RESET_BROWNOUT  (5)
#define PYB_RESET_OTHER     (6)

STATIC uint32_t reset_cause;

void machine_init(void) {
   1c634:	b580      	push	{r7, lr}
   1c636:	b082      	sub	sp, #8
   1c638:	af00      	add	r7, sp, #0

    // get reset cause from RCC flags
    uint32_t state = MAP_SysCtlResetCauseGet();
   1c63a:	f001 fbd3 	bl	1dde4 <SysCtlResetCauseGet>
   1c63e:	6078      	str	r0, [r7, #4]
    if ((state & SYSCTL_CAUSE_WDOG0) || (state & SYSCTL_CAUSE_WDOG1)) {
   1c640:	687b      	ldr	r3, [r7, #4]
   1c642:	f003 0308 	and.w	r3, r3, #8
   1c646:	2b00      	cmp	r3, #0
   1c648:	d104      	bne.n	1c654 <machine_init+0x20>
   1c64a:	687b      	ldr	r3, [r7, #4]
   1c64c:	f003 0320 	and.w	r3, r3, #32
   1c650:	2b00      	cmp	r3, #0
   1c652:	d003      	beq.n	1c65c <machine_init+0x28>
        reset_cause = PYB_RESET_WDT;
   1c654:	4b1b      	ldr	r3, [pc, #108]	; (1c6c4 <machine_init+0x90>)
   1c656:	2203      	movs	r2, #3
   1c658:	601a      	str	r2, [r3, #0]
   1c65a:	e02b      	b.n	1c6b4 <machine_init+0x80>
    } else if (state & SYSCTL_CAUSE_POR)  {
   1c65c:	687b      	ldr	r3, [r7, #4]
   1c65e:	f003 0302 	and.w	r3, r3, #2
   1c662:	2b00      	cmp	r3, #0
   1c664:	d003      	beq.n	1c66e <machine_init+0x3a>
        reset_cause = PYB_RESET_POWER_ON;
   1c666:	4b17      	ldr	r3, [pc, #92]	; (1c6c4 <machine_init+0x90>)
   1c668:	2201      	movs	r2, #1
   1c66a:	601a      	str	r2, [r3, #0]
   1c66c:	e022      	b.n	1c6b4 <machine_init+0x80>
    } else if (state & SYSCTL_CAUSE_BOR) {
   1c66e:	687b      	ldr	r3, [r7, #4]
   1c670:	f003 0304 	and.w	r3, r3, #4
   1c674:	2b00      	cmp	r3, #0
   1c676:	d003      	beq.n	1c680 <machine_init+0x4c>
        reset_cause = PYB_RESET_BROWNOUT;
   1c678:	4b12      	ldr	r3, [pc, #72]	; (1c6c4 <machine_init+0x90>)
   1c67a:	2205      	movs	r2, #5
   1c67c:	601a      	str	r2, [r3, #0]
   1c67e:	e019      	b.n	1c6b4 <machine_init+0x80>
    } else if (state & SYSCTL_CAUSE_EXT) {
   1c680:	687b      	ldr	r3, [r7, #4]
   1c682:	f003 0301 	and.w	r3, r3, #1
   1c686:	2b00      	cmp	r3, #0
   1c688:	d003      	beq.n	1c692 <machine_init+0x5e>
        reset_cause = PYB_RESET_HARD;
   1c68a:	4b0e      	ldr	r3, [pc, #56]	; (1c6c4 <machine_init+0x90>)
   1c68c:	2202      	movs	r2, #2
   1c68e:	601a      	str	r2, [r3, #0]
   1c690:	e010      	b.n	1c6b4 <machine_init+0x80>
    } else if ((state & SYSCTL_CAUSE_HSRVREQ) || (state & SYSCTL_CAUSE_HIB)){
   1c692:	687b      	ldr	r3, [r7, #4]
   1c694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   1c698:	2b00      	cmp	r3, #0
   1c69a:	d104      	bne.n	1c6a6 <machine_init+0x72>
   1c69c:	687b      	ldr	r3, [r7, #4]
   1c69e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1c6a2:	2b00      	cmp	r3, #0
   1c6a4:	d003      	beq.n	1c6ae <machine_init+0x7a>
        reset_cause = PYB_RESET_OTHER;
   1c6a6:	4b07      	ldr	r3, [pc, #28]	; (1c6c4 <machine_init+0x90>)
   1c6a8:	2206      	movs	r2, #6
   1c6aa:	601a      	str	r2, [r3, #0]
   1c6ac:	e002      	b.n	1c6b4 <machine_init+0x80>
    } else {
        // default is soft reset
        reset_cause = PYB_RESET_SOFT;
   1c6ae:	4b05      	ldr	r3, [pc, #20]	; (1c6c4 <machine_init+0x90>)
   1c6b0:	2200      	movs	r2, #0
   1c6b2:	601a      	str	r2, [r3, #0]
    }
    // clear RCC reset flags
    MAP_SysCtlResetCauseClear(state);
   1c6b4:	6878      	ldr	r0, [r7, #4]
   1c6b6:	f001 fb9b 	bl	1ddf0 <SysCtlResetCauseClear>
}
   1c6ba:	bf00      	nop
   1c6bc:	3708      	adds	r7, #8
   1c6be:	46bd      	mov	sp, r7
   1c6c0:	bd80      	pop	{r7, pc}
   1c6c2:	bf00      	nop
   1c6c4:	200012c8 	.word	0x200012c8

0001c6c8 <machine_deinit>:

void machine_deinit(void) {
   1c6c8:	b480      	push	{r7}
   1c6ca:	af00      	add	r7, sp, #0
    // we are doing a soft-reset so change the reset_cause
    reset_cause = PYB_RESET_SOFT;
   1c6cc:	4b03      	ldr	r3, [pc, #12]	; (1c6dc <machine_deinit+0x14>)
   1c6ce:	2200      	movs	r2, #0
   1c6d0:	601a      	str	r2, [r3, #0]
}
   1c6d2:	bf00      	nop
   1c6d4:	46bd      	mov	sp, r7
   1c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c6da:	4770      	bx	lr
   1c6dc:	200012c8 	.word	0x200012c8

0001c6e0 <machine_info>:

// machine.info([dump_alloc_table])
// Print out lots of information about the board.
STATIC mp_obj_t machine_info(size_t n_args, const mp_obj_t *args) {
   1c6e0:	b580      	push	{r7, lr}
   1c6e2:	b090      	sub	sp, #64	; 0x40
   1c6e4:	af02      	add	r7, sp, #8
   1c6e6:	6078      	str	r0, [r7, #4]
   1c6e8:	6039      	str	r1, [r7, #0]
    // get and print unique id; 96 bits
    {
        uint32_t id = SYSCTL->DID0;
   1c6ea:	4b26      	ldr	r3, [pc, #152]	; (1c784 <machine_info+0xa4>)
   1c6ec:	681b      	ldr	r3, [r3, #0]
   1c6ee:	637b      	str	r3, [r7, #52]	; 0x34

        printf("ID: CLASS=%02x, v%02u.%02u", (uint8_t)((id >> 16) & 0xff), (uint8_t)((id >> 8) & 0xff), (uint8_t)(id & 0xff));
   1c6f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c6f2:	0c1b      	lsrs	r3, r3, #16
   1c6f4:	b2db      	uxtb	r3, r3
   1c6f6:	4619      	mov	r1, r3
   1c6f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c6fa:	0a1b      	lsrs	r3, r3, #8
   1c6fc:	b2db      	uxtb	r3, r3
   1c6fe:	461a      	mov	r2, r3
   1c700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c702:	b2db      	uxtb	r3, r3
   1c704:	4820      	ldr	r0, [pc, #128]	; (1c788 <machine_info+0xa8>)
   1c706:	f7fe fed5 	bl	1b4b4 <printf>
    }

    // get and print clock speeds
    // SYSCLK=168MHz, HCLK=168MHz, PCLK1=42MHz, PCLK2=84MHz
    {
        printf("%u Hz", (unsigned int)SysCtlClockGet());
   1c70a:	f001 fb79 	bl	1de00 <SysCtlClockGet>
   1c70e:	4603      	mov	r3, r0
   1c710:	4619      	mov	r1, r3
   1c712:	481e      	ldr	r0, [pc, #120]	; (1c78c <machine_info+0xac>)
   1c714:	f7fe fece 	bl	1b4b4 <printf>
//    }

    // qstr info
    {
        size_t n_pool, n_qstr, n_str_data_bytes, n_total_bytes;
        qstr_pool_info(&n_pool, &n_qstr, &n_str_data_bytes, &n_total_bytes);
   1c718:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1c71c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1c720:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1c724:	f107 0030 	add.w	r0, r7, #48	; 0x30
   1c728:	f7e4 fe52 	bl	13d0 <qstr_pool_info>
        printf("qstr:\n  n_pool=%u\n  n_qstr=%u\n  n_str_data_bytes=%u\n  n_total_bytes=%u\n", n_pool, n_qstr, n_str_data_bytes, n_total_bytes);
   1c72c:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1c72e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c734:	9300      	str	r3, [sp, #0]
   1c736:	4603      	mov	r3, r0
   1c738:	4815      	ldr	r0, [pc, #84]	; (1c790 <machine_info+0xb0>)
   1c73a:	f7fe febb 	bl	1b4b4 <printf>
    }

    // GC info
    {
        gc_info_t info;
        gc_info(&info);
   1c73e:	f107 0308 	add.w	r3, r7, #8
   1c742:	4618      	mov	r0, r3
   1c744:	f7e4 f8ba 	bl	8bc <gc_info>
        printf("GC:\n");
   1c748:	4812      	ldr	r0, [pc, #72]	; (1c794 <machine_info+0xb4>)
   1c74a:	f7fe feef 	bl	1b52c <puts>
        printf("  %u total\n", info.total);
   1c74e:	68bb      	ldr	r3, [r7, #8]
   1c750:	4619      	mov	r1, r3
   1c752:	4811      	ldr	r0, [pc, #68]	; (1c798 <machine_info+0xb8>)
   1c754:	f7fe feae 	bl	1b4b4 <printf>
        printf("  %u : %u\n", info.used, info.free);
   1c758:	68fb      	ldr	r3, [r7, #12]
   1c75a:	693a      	ldr	r2, [r7, #16]
   1c75c:	4619      	mov	r1, r3
   1c75e:	480f      	ldr	r0, [pc, #60]	; (1c79c <machine_info+0xbc>)
   1c760:	f7fe fea8 	bl	1b4b4 <printf>
        printf("  1=%u 2=%u m=%u\n", info.num_1block, info.num_2block, info.max_block);
   1c764:	69b9      	ldr	r1, [r7, #24]
   1c766:	69fa      	ldr	r2, [r7, #28]
   1c768:	6a3b      	ldr	r3, [r7, #32]
   1c76a:	480d      	ldr	r0, [pc, #52]	; (1c7a0 <machine_info+0xc0>)
   1c76c:	f7fe fea2 	bl	1b4b4 <printf>

    #if MICROPY_PY_THREAD
    pyb_thread_dump();
    #endif

    if (n_args == 1) {
   1c770:	687b      	ldr	r3, [r7, #4]
   1c772:	2b01      	cmp	r3, #1
   1c774:	d101      	bne.n	1c77a <machine_info+0x9a>
        // arg given means dump gc allocation table
        gc_dump_alloc_table();
   1c776:	f7e4 fb59 	bl	e2c <gc_dump_alloc_table>
    }

    return mp_const_none;
   1c77a:	4b0a      	ldr	r3, [pc, #40]	; (1c7a4 <machine_info+0xc4>)
}
   1c77c:	4618      	mov	r0, r3
   1c77e:	3738      	adds	r7, #56	; 0x38
   1c780:	46bd      	mov	sp, r7
   1c782:	bd80      	pop	{r7, pc}
   1c784:	400fe000 	.word	0x400fe000
   1c788:	000251b0 	.word	0x000251b0
   1c78c:	000251cc 	.word	0x000251cc
   1c790:	000251d4 	.word	0x000251d4
   1c794:	0002521c 	.word	0x0002521c
   1c798:	00025220 	.word	0x00025220
   1c79c:	0002522c 	.word	0x0002522c
   1c7a0:	00025238 	.word	0x00025238
   1c7a4:	000234d4 	.word	0x000234d4

0001c7a8 <machine_unique_id>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(machine_info_obj, 0, 1, machine_info);

// Returns a string of 12 bytes (96 bits), which is the unique ID for the MCU.
STATIC mp_obj_t machine_unique_id(void) {
   1c7a8:	b580      	push	{r7, lr}
   1c7aa:	b082      	sub	sp, #8
   1c7ac:	af00      	add	r7, sp, #0
    byte *id = (byte*)(SYSCTL->DID1 + 2);
   1c7ae:	4b06      	ldr	r3, [pc, #24]	; (1c7c8 <machine_unique_id+0x20>)
   1c7b0:	685b      	ldr	r3, [r3, #4]
   1c7b2:	3302      	adds	r3, #2
   1c7b4:	607b      	str	r3, [r7, #4]
    return mp_obj_new_bytes(id, 12);
   1c7b6:	210c      	movs	r1, #12
   1c7b8:	6878      	ldr	r0, [r7, #4]
   1c7ba:	f7f8 ff0f 	bl	155dc <mp_obj_new_bytes>
   1c7be:	4603      	mov	r3, r0
}
   1c7c0:	4618      	mov	r0, r3
   1c7c2:	3708      	adds	r7, #8
   1c7c4:	46bd      	mov	sp, r7
   1c7c6:	bd80      	pop	{r7, pc}
   1c7c8:	400fe000 	.word	0x400fe000

0001c7cc <machine_reset>:
MP_DEFINE_CONST_FUN_OBJ_0(machine_unique_id_obj, machine_unique_id);

// Resets the pyboard in a manner similar to pushing the external RESET button.
STATIC mp_obj_t machine_reset(void) {
   1c7cc:	b580      	push	{r7, lr}
   1c7ce:	af00      	add	r7, sp, #0
    MAP_SysCtlReset();
   1c7d0:	f001 faee 	bl	1ddb0 <SysCtlReset>
    return mp_const_none;
   1c7d4:	4b01      	ldr	r3, [pc, #4]	; (1c7dc <machine_reset+0x10>)
}
   1c7d6:	4618      	mov	r0, r3
   1c7d8:	bd80      	pop	{r7, pc}
   1c7da:	bf00      	nop
   1c7dc:	000234d4 	.word	0x000234d4

0001c7e0 <machine_soft_reset>:
MP_DEFINE_CONST_FUN_OBJ_0(machine_reset_obj, machine_reset);

STATIC mp_obj_t machine_soft_reset(void) {
   1c7e0:	b580      	push	{r7, lr}
   1c7e2:	af00      	add	r7, sp, #0
    pyexec_system_exit = PYEXEC_FORCED_EXIT;
   1c7e4:	4b05      	ldr	r3, [pc, #20]	; (1c7fc <machine_soft_reset+0x1c>)
   1c7e6:	f44f 7280 	mov.w	r2, #256	; 0x100
   1c7ea:	601a      	str	r2, [r3, #0]
    nlr_raise(mp_obj_new_exception(&mp_type_SystemExit));
   1c7ec:	4804      	ldr	r0, [pc, #16]	; (1c800 <machine_soft_reset+0x20>)
   1c7ee:	f7f2 fec5 	bl	f57c <mp_obj_new_exception>
   1c7f2:	4603      	mov	r3, r0
   1c7f4:	4618      	mov	r0, r3
   1c7f6:	f7e3 fd73 	bl	2e0 <nlr_jump>
   1c7fa:	bf00      	nop
   1c7fc:	200012cc 	.word	0x200012cc
   1c800:	00022244 	.word	0x00022244

0001c804 <machine_bootloader>:
}
MP_DEFINE_CONST_FUN_OBJ_0(machine_soft_reset_obj, machine_soft_reset);

// Activate the bootloader without BOOT* pins.
STATIC NORETURN mp_obj_t machine_bootloader(void) {
   1c804:	b480      	push	{r7}
   1c806:	af00      	add	r7, sp, #0
//    //__set_MSP(*((uint32_t*) 0x00000000));
//    __ASM volatile ("movs r3, #0\nldr r3, [r3, #0]\nMSR msp, r3\n" : : : "r3", "sp");
//
//    ((void (*)(void)) *((uint32_t*) 0x00000004))();
//
    while (1);
   1c808:	e7fe      	b.n	1c808 <machine_bootloader+0x4>
   1c80a:	bf00      	nop

0001c80c <machine_freq>:
}
MP_DEFINE_CONST_FUN_OBJ_0(machine_bootloader_obj, machine_bootloader);


STATIC mp_obj_t machine_freq(size_t n_args, const mp_obj_t *args) {
   1c80c:	b580      	push	{r7, lr}
   1c80e:	b084      	sub	sp, #16
   1c810:	af00      	add	r7, sp, #0
   1c812:	6078      	str	r0, [r7, #4]
   1c814:	6039      	str	r1, [r7, #0]
    if (n_args == 0) {
   1c816:	687b      	ldr	r3, [r7, #4]
   1c818:	2b00      	cmp	r3, #0
   1c81a:	d10f      	bne.n	1c83c <machine_freq+0x30>
        // get
        mp_obj_t tuple[] = {
           mp_obj_new_int(MAP_SysCtlClockGet()),
   1c81c:	f001 faf0 	bl	1de00 <SysCtlClockGet>
   1c820:	4603      	mov	r3, r0
   1c822:	4618      	mov	r0, r3
   1c824:	f7f4 f8dc 	bl	109e0 <mp_obj_new_int>
   1c828:	4603      	mov	r3, r0
        mp_obj_t tuple[] = {
   1c82a:	60fb      	str	r3, [r7, #12]
        };
        return mp_obj_new_tuple(MP_ARRAY_SIZE(tuple), tuple);
   1c82c:	f107 030c 	add.w	r3, r7, #12
   1c830:	4619      	mov	r1, r3
   1c832:	2001      	movs	r0, #1
   1c834:	f7f9 fb9c 	bl	15f70 <mp_obj_new_tuple>
   1c838:	4603      	mov	r3, r0
   1c83a:	e002      	b.n	1c842 <machine_freq+0x36>
        } else {
            mp_raise_ValueError("freq change not supported");
   1c83c:	4803      	ldr	r0, [pc, #12]	; (1c84c <machine_freq+0x40>)
   1c83e:	f7f0 fbb1 	bl	cfa4 <mp_raise_ValueError>
//        void NORETURN __fatal_error(const char *msg);
//        __fatal_error("can't change freq");
//
//        #endif
    }
}
   1c842:	4618      	mov	r0, r3
   1c844:	3710      	adds	r7, #16
   1c846:	46bd      	mov	sp, r7
   1c848:	bd80      	pop	{r7, pc}
   1c84a:	bf00      	nop
   1c84c:	00025278 	.word	0x00025278

0001c850 <machine_sleep>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(machine_freq_obj, 0, 4, machine_freq);

STATIC mp_obj_t machine_sleep(void) {
   1c850:	b580      	push	{r7, lr}
   1c852:	af00      	add	r7, sp, #0
    //send system to sleep
    MAP_SysCtlSleep();
   1c854:	f001 fab4 	bl	1ddc0 <SysCtlSleep>
    return mp_const_none;
   1c858:	4b01      	ldr	r3, [pc, #4]	; (1c860 <machine_sleep+0x10>)
}
   1c85a:	4618      	mov	r0, r3
   1c85c:	bd80      	pop	{r7, pc}
   1c85e:	bf00      	nop
   1c860:	000234d4 	.word	0x000234d4

0001c864 <machine_deepsleep>:
MP_DEFINE_CONST_FUN_OBJ_0(machine_sleep_obj, machine_sleep);

STATIC mp_obj_t machine_deepsleep(void) {
   1c864:	b580      	push	{r7, lr}
   1c866:	af00      	add	r7, sp, #0
    MAP_SysCtlDeepSleep();
   1c868:	f001 faac 	bl	1ddc4 <SysCtlDeepSleep>
    return mp_const_none;
   1c86c:	4b01      	ldr	r3, [pc, #4]	; (1c874 <machine_deepsleep+0x10>)
}
   1c86e:	4618      	mov	r0, r3
   1c870:	bd80      	pop	{r7, pc}
   1c872:	bf00      	nop
   1c874:	000234d4 	.word	0x000234d4

0001c878 <machine_reset_cause>:
MP_DEFINE_CONST_FUN_OBJ_0(machine_deepsleep_obj, machine_deepsleep);

STATIC mp_obj_t machine_reset_cause(void) {
   1c878:	b480      	push	{r7}
   1c87a:	af00      	add	r7, sp, #0
    return MP_OBJ_NEW_SMALL_INT(reset_cause);
   1c87c:	4b04      	ldr	r3, [pc, #16]	; (1c890 <machine_reset_cause+0x18>)
   1c87e:	681b      	ldr	r3, [r3, #0]
   1c880:	005b      	lsls	r3, r3, #1
   1c882:	f043 0301 	orr.w	r3, r3, #1
}
   1c886:	4618      	mov	r0, r3
   1c888:	46bd      	mov	sp, r7
   1c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c88e:	4770      	bx	lr
   1c890:	200012c8 	.word	0x200012c8

0001c894 <mp_hal_stdout_tx_strn_cooked>:
 * implementation below can be used.
 */

// Send "cooked" string of given length, where every occurrence of
// LF character is replaced with CR LF.
void mp_hal_stdout_tx_strn_cooked(const char *str, size_t len) {
   1c894:	b580      	push	{r7, lr}
   1c896:	b082      	sub	sp, #8
   1c898:	af00      	add	r7, sp, #0
   1c89a:	6078      	str	r0, [r7, #4]
   1c89c:	6039      	str	r1, [r7, #0]
    while (len--) {
   1c89e:	e00e      	b.n	1c8be <mp_hal_stdout_tx_strn_cooked+0x2a>
        if (*str == '\n') {
   1c8a0:	687b      	ldr	r3, [r7, #4]
   1c8a2:	781b      	ldrb	r3, [r3, #0]
   1c8a4:	2b0a      	cmp	r3, #10
   1c8a6:	d103      	bne.n	1c8b0 <mp_hal_stdout_tx_strn_cooked+0x1c>
            mp_hal_stdout_tx_strn("\r", 1);
   1c8a8:	2101      	movs	r1, #1
   1c8aa:	4809      	ldr	r0, [pc, #36]	; (1c8d0 <mp_hal_stdout_tx_strn_cooked+0x3c>)
   1c8ac:	f7ff f890 	bl	1b9d0 <mp_hal_stdout_tx_strn>
        }
        mp_hal_stdout_tx_strn(str++, 1);
   1c8b0:	687b      	ldr	r3, [r7, #4]
   1c8b2:	1c5a      	adds	r2, r3, #1
   1c8b4:	607a      	str	r2, [r7, #4]
   1c8b6:	2101      	movs	r1, #1
   1c8b8:	4618      	mov	r0, r3
   1c8ba:	f7ff f889 	bl	1b9d0 <mp_hal_stdout_tx_strn>
    while (len--) {
   1c8be:	683b      	ldr	r3, [r7, #0]
   1c8c0:	1e5a      	subs	r2, r3, #1
   1c8c2:	603a      	str	r2, [r7, #0]
   1c8c4:	2b00      	cmp	r3, #0
   1c8c6:	d1eb      	bne.n	1c8a0 <mp_hal_stdout_tx_strn_cooked+0xc>
    }
}
   1c8c8:	bf00      	nop
   1c8ca:	3708      	adds	r7, #8
   1c8cc:	46bd      	mov	sp, r7
   1c8ce:	bd80      	pop	{r7, pc}
   1c8d0:	00025c00 	.word	0x00025c00

0001c8d4 <mp_hal_stdout_tx_str>:

// Send zero-terminated string
void mp_hal_stdout_tx_str(const char *str) {
   1c8d4:	b580      	push	{r7, lr}
   1c8d6:	b082      	sub	sp, #8
   1c8d8:	af00      	add	r7, sp, #0
   1c8da:	6078      	str	r0, [r7, #4]
    mp_hal_stdout_tx_strn(str, strlen(str));
   1c8dc:	6878      	ldr	r0, [r7, #4]
   1c8de:	f000 fb91 	bl	1d004 <strlen>
   1c8e2:	4603      	mov	r3, r0
   1c8e4:	4619      	mov	r1, r3
   1c8e6:	6878      	ldr	r0, [r7, #4]
   1c8e8:	f7ff f872 	bl	1b9d0 <mp_hal_stdout_tx_strn>
}
   1c8ec:	bf00      	nop
   1c8ee:	3708      	adds	r7, #8
   1c8f0:	46bd      	mov	sp, r7
   1c8f2:	bd80      	pop	{r7, pc}

0001c8f4 <vstr_reset>:
static inline void vstr_reset(vstr_t *vstr) { vstr->len = 0; }
   1c8f4:	b480      	push	{r7}
   1c8f6:	b083      	sub	sp, #12
   1c8f8:	af00      	add	r7, sp, #0
   1c8fa:	6078      	str	r0, [r7, #4]
   1c8fc:	687b      	ldr	r3, [r7, #4]
   1c8fe:	2200      	movs	r2, #0
   1c900:	605a      	str	r2, [r3, #4]
   1c902:	bf00      	nop
   1c904:	370c      	adds	r7, #12
   1c906:	46bd      	mov	sp, r7
   1c908:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c90c:	4770      	bx	lr
   1c90e:	bf00      	nop

0001c910 <vstr_len>:
static inline size_t vstr_len(vstr_t *vstr) { return vstr->len; }
   1c910:	b480      	push	{r7}
   1c912:	b083      	sub	sp, #12
   1c914:	af00      	add	r7, sp, #0
   1c916:	6078      	str	r0, [r7, #4]
   1c918:	687b      	ldr	r3, [r7, #4]
   1c91a:	685b      	ldr	r3, [r3, #4]
   1c91c:	4618      	mov	r0, r3
   1c91e:	370c      	adds	r7, #12
   1c920:	46bd      	mov	sp, r7
   1c922:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c926:	4770      	bx	lr

0001c928 <parse_compile_execute>:
// parses, compiles and executes the code in the lexer
// frees the lexer before returning
// EXEC_FLAG_PRINT_EOF prints 2 EOF chars: 1 after normal output, 1 after exception output
// EXEC_FLAG_ALLOW_DEBUGGING allows debugging info to be printed after executing the code
// EXEC_FLAG_IS_REPL is used for REPL inputs (flag passed on to mp_compile)
STATIC int parse_compile_execute(const void *source, mp_parse_input_kind_t input_kind, int exec_flags) {
   1c928:	b580      	push	{r7, lr}
   1c92a:	b0a0      	sub	sp, #128	; 0x80
   1c92c:	af02      	add	r7, sp, #8
   1c92e:	60f8      	str	r0, [r7, #12]
   1c930:	60b9      	str	r1, [r7, #8]
   1c932:	607a      	str	r2, [r7, #4]
    int ret = 0;
   1c934:	2300      	movs	r3, #0
   1c936:	677b      	str	r3, [r7, #116]	; 0x74
    uint32_t start = 0;
   1c938:	2300      	movs	r3, #0
   1c93a:	673b      	str	r3, [r7, #112]	; 0x70

    // by default a SystemExit exception returns 0
    pyexec_system_exit = 0;
   1c93c:	4b5a      	ldr	r3, [pc, #360]	; (1caa8 <parse_compile_execute+0x180>)
   1c93e:	2200      	movs	r2, #0
   1c940:	601a      	str	r2, [r3, #0]

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   1c942:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1c946:	4618      	mov	r0, r3
   1c948:	f7e3 fcb8 	bl	2bc <nlr_push>
   1c94c:	4603      	mov	r3, r0
   1c94e:	2b00      	cmp	r3, #0
   1c950:	d150      	bne.n	1c9f4 <parse_compile_execute+0xcc>
        } else
        #endif
        {
            #if MICROPY_ENABLE_COMPILER
            mp_lexer_t *lex;
            if (exec_flags & EXEC_FLAG_SOURCE_IS_VSTR) {
   1c952:	687b      	ldr	r3, [r7, #4]
   1c954:	f003 0310 	and.w	r3, r3, #16
   1c958:	2b00      	cmp	r3, #0
   1c95a:	d00b      	beq.n	1c974 <parse_compile_execute+0x4c>
                const vstr_t *vstr = source;
   1c95c:	68fb      	ldr	r3, [r7, #12]
   1c95e:	66bb      	str	r3, [r7, #104]	; 0x68
                lex = mp_lexer_new_from_str_len(MP_QSTR__lt_stdin_gt_, vstr->buf, vstr->len, 0);
   1c960:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1c962:	6899      	ldr	r1, [r3, #8]
   1c964:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1c966:	685a      	ldr	r2, [r3, #4]
   1c968:	2300      	movs	r3, #0
   1c96a:	2038      	movs	r0, #56	; 0x38
   1c96c:	f7e6 ffae 	bl	38cc <mp_lexer_new_from_str_len>
   1c970:	66f8      	str	r0, [r7, #108]	; 0x6c
   1c972:	e00b      	b.n	1c98c <parse_compile_execute+0x64>
            } else if (exec_flags & EXEC_FLAG_SOURCE_IS_FILENAME) {
   1c974:	687b      	ldr	r3, [r7, #4]
   1c976:	f003 0320 	and.w	r3, r3, #32
   1c97a:	2b00      	cmp	r3, #0
   1c97c:	d004      	beq.n	1c988 <parse_compile_execute+0x60>
                lex = mp_lexer_new_from_file(source);
   1c97e:	68f8      	ldr	r0, [r7, #12]
   1c980:	f7fe fed0 	bl	1b724 <mp_lexer_new_from_file>
   1c984:	66f8      	str	r0, [r7, #108]	; 0x6c
   1c986:	e001      	b.n	1c98c <parse_compile_execute+0x64>
            } else {
                lex = (mp_lexer_t*)source;
   1c988:	68fb      	ldr	r3, [r7, #12]
   1c98a:	66fb      	str	r3, [r7, #108]	; 0x6c
            }
            // source is a lexer, parse and compile the script
            qstr source_name = lex->source_name;
   1c98c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1c98e:	681b      	ldr	r3, [r3, #0]
   1c990:	667b      	str	r3, [r7, #100]	; 0x64
            mp_parse_tree_t parse_tree = mp_parse(lex, input_kind);
   1c992:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1c996:	68ba      	ldr	r2, [r7, #8]
   1c998:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
   1c99a:	4618      	mov	r0, r3
   1c99c:	f7e7 fd92 	bl	44c4 <mp_parse>
            module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, exec_flags & EXEC_FLAG_IS_REPL);
   1c9a0:	687b      	ldr	r3, [r7, #4]
   1c9a2:	f003 0304 	and.w	r3, r3, #4
   1c9a6:	2b00      	cmp	r3, #0
   1c9a8:	bf14      	ite	ne
   1c9aa:	2301      	movne	r3, #1
   1c9ac:	2300      	moveq	r3, #0
   1c9ae:	b2db      	uxtb	r3, r3
   1c9b0:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1c9b4:	2200      	movs	r2, #0
   1c9b6:	6e79      	ldr	r1, [r7, #100]	; 0x64
   1c9b8:	f7ec ff7e 	bl	98b8 <mp_compile>
   1c9bc:	6638      	str	r0, [r7, #96]	; 0x60
            mp_raise_msg(&mp_type_RuntimeError, "script compilation not supported");
            #endif
        }

        // execute code
        mp_hal_set_interrupt_char(CHAR_CTRL_C); // allow ctrl-C to interrupt us
   1c9be:	2003      	movs	r0, #3
   1c9c0:	f7ff f8c6 	bl	1bb50 <mp_hal_set_interrupt_char>
        start = mp_hal_ticks_ms();
   1c9c4:	f7ff f838 	bl	1ba38 <mp_hal_ticks_ms>
   1c9c8:	6738      	str	r0, [r7, #112]	; 0x70
        mp_call_function_0(module_fun);
   1c9ca:	6e38      	ldr	r0, [r7, #96]	; 0x60
   1c9cc:	f7ef fa0c 	bl	bde8 <mp_call_function_0>
        mp_hal_set_interrupt_char(-1); // disable interrupt
   1c9d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c9d4:	f7ff f8bc 	bl	1bb50 <mp_hal_set_interrupt_char>
        nlr_pop();
   1c9d8:	f7e3 fc5e 	bl	298 <nlr_pop>
        ret = 1;
   1c9dc:	2301      	movs	r3, #1
   1c9de:	677b      	str	r3, [r7, #116]	; 0x74
        if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1c9e0:	687b      	ldr	r3, [r7, #4]
   1c9e2:	f003 0301 	and.w	r3, r3, #1
   1c9e6:	2b00      	cmp	r3, #0
   1c9e8:	d025      	beq.n	1ca36 <parse_compile_execute+0x10e>
            mp_hal_stdout_tx_strn("\x04", 1);
   1c9ea:	2101      	movs	r1, #1
   1c9ec:	482f      	ldr	r0, [pc, #188]	; (1caac <parse_compile_execute+0x184>)
   1c9ee:	f7fe ffef 	bl	1b9d0 <mp_hal_stdout_tx_strn>
   1c9f2:	e020      	b.n	1ca36 <parse_compile_execute+0x10e>
        }
    } else {
        // uncaught exception
        // FIXME it could be that an interrupt happens just before we disable it here
        mp_hal_set_interrupt_char(-1); // disable interrupt
   1c9f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c9f8:	f7ff f8aa 	bl	1bb50 <mp_hal_set_interrupt_char>
        // print EOF after normal output
        if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1c9fc:	687b      	ldr	r3, [r7, #4]
   1c9fe:	f003 0301 	and.w	r3, r3, #1
   1ca02:	2b00      	cmp	r3, #0
   1ca04:	d003      	beq.n	1ca0e <parse_compile_execute+0xe6>
            mp_hal_stdout_tx_strn("\x04", 1);
   1ca06:	2101      	movs	r1, #1
   1ca08:	4828      	ldr	r0, [pc, #160]	; (1caac <parse_compile_execute+0x184>)
   1ca0a:	f7fe ffe1 	bl	1b9d0 <mp_hal_stdout_tx_strn>
        }
        // check for SystemExit
        if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_SystemExit))) {
   1ca0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ca10:	681b      	ldr	r3, [r3, #0]
   1ca12:	4927      	ldr	r1, [pc, #156]	; (1cab0 <parse_compile_execute+0x188>)
   1ca14:	4618      	mov	r0, r3
   1ca16:	f7fa fd77 	bl	17508 <mp_obj_is_subclass_fast>
   1ca1a:	4603      	mov	r3, r0
   1ca1c:	2b00      	cmp	r3, #0
   1ca1e:	d003      	beq.n	1ca28 <parse_compile_execute+0x100>
            // at the moment, the value of SystemExit is unused
            ret = pyexec_system_exit;
   1ca20:	4b21      	ldr	r3, [pc, #132]	; (1caa8 <parse_compile_execute+0x180>)
   1ca22:	681b      	ldr	r3, [r3, #0]
   1ca24:	677b      	str	r3, [r7, #116]	; 0x74
   1ca26:	e006      	b.n	1ca36 <parse_compile_execute+0x10e>
        } else {
            mp_obj_print_exception(&mp_plat_print, MP_OBJ_FROM_PTR(nlr.ret_val));
   1ca28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ca2a:	4619      	mov	r1, r3
   1ca2c:	4821      	ldr	r0, [pc, #132]	; (1cab4 <parse_compile_execute+0x18c>)
   1ca2e:	f7f0 ff9f 	bl	d970 <mp_obj_print_exception>
            ret = 0;
   1ca32:	2300      	movs	r3, #0
   1ca34:	677b      	str	r3, [r7, #116]	; 0x74
        }
    }

    // display debugging info if wanted
    if ((exec_flags & EXEC_FLAG_ALLOW_DEBUGGING) && repl_display_debugging_info) {
   1ca36:	687b      	ldr	r3, [r7, #4]
   1ca38:	f003 0302 	and.w	r3, r3, #2
   1ca3c:	2b00      	cmp	r3, #0
   1ca3e:	d024      	beq.n	1ca8a <parse_compile_execute+0x162>
   1ca40:	4b1d      	ldr	r3, [pc, #116]	; (1cab8 <parse_compile_execute+0x190>)
   1ca42:	781b      	ldrb	r3, [r3, #0]
   1ca44:	2b00      	cmp	r3, #0
   1ca46:	d020      	beq.n	1ca8a <parse_compile_execute+0x162>
        mp_uint_t ticks = mp_hal_ticks_ms() - start; // TODO implement a function that does this properly
   1ca48:	f7fe fff6 	bl	1ba38 <mp_hal_ticks_ms>
   1ca4c:	4602      	mov	r2, r0
   1ca4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1ca50:	1ad3      	subs	r3, r2, r3
   1ca52:	65fb      	str	r3, [r7, #92]	; 0x5c
        printf("took " UINT_FMT " ms\n", ticks);
   1ca54:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1ca56:	4819      	ldr	r0, [pc, #100]	; (1cabc <parse_compile_execute+0x194>)
   1ca58:	f7fe fd2c 	bl	1b4b4 <printf>
        // qstr info
        {
            size_t n_pool, n_qstr, n_str_data_bytes, n_total_bytes;
            qstr_pool_info(&n_pool, &n_qstr, &n_str_data_bytes, &n_total_bytes);
   1ca5c:	f107 0314 	add.w	r3, r7, #20
   1ca60:	f107 0218 	add.w	r2, r7, #24
   1ca64:	f107 011c 	add.w	r1, r7, #28
   1ca68:	f107 0020 	add.w	r0, r7, #32
   1ca6c:	f7e4 fcb0 	bl	13d0 <qstr_pool_info>
            printf("qstr:\n  n_pool=%u\n  n_qstr=%u\n  "
   1ca70:	6a39      	ldr	r1, [r7, #32]
   1ca72:	69fa      	ldr	r2, [r7, #28]
   1ca74:	69b8      	ldr	r0, [r7, #24]
   1ca76:	697b      	ldr	r3, [r7, #20]
   1ca78:	9300      	str	r3, [sp, #0]
   1ca7a:	4603      	mov	r3, r0
   1ca7c:	4810      	ldr	r0, [pc, #64]	; (1cac0 <parse_compile_execute+0x198>)
   1ca7e:	f7fe fd19 	bl	1b4b4 <printf>
                   (unsigned)n_pool, (unsigned)n_qstr, (unsigned)n_str_data_bytes, (unsigned)n_total_bytes);
        }

        #if MICROPY_ENABLE_GC
        // run collection and print GC info
        gc_collect();
   1ca82:	f7fe fe35 	bl	1b6f0 <gc_collect>
        gc_dump_info();
   1ca86:	f7e4 f9b1 	bl	dec <gc_dump_info>
        #endif
    }

    if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1ca8a:	687b      	ldr	r3, [r7, #4]
   1ca8c:	f003 0301 	and.w	r3, r3, #1
   1ca90:	2b00      	cmp	r3, #0
   1ca92:	d003      	beq.n	1ca9c <parse_compile_execute+0x174>
        mp_hal_stdout_tx_strn("\x04", 1);
   1ca94:	2101      	movs	r1, #1
   1ca96:	4805      	ldr	r0, [pc, #20]	; (1caac <parse_compile_execute+0x184>)
   1ca98:	f7fe ff9a 	bl	1b9d0 <mp_hal_stdout_tx_strn>
    }

    return ret;
   1ca9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   1ca9e:	4618      	mov	r0, r3
   1caa0:	3778      	adds	r7, #120	; 0x78
   1caa2:	46bd      	mov	sp, r7
   1caa4:	bd80      	pop	{r7, pc}
   1caa6:	bf00      	nop
   1caa8:	200012cc 	.word	0x200012cc
   1caac:	00025c04 	.word	0x00025c04
   1cab0:	00022244 	.word	0x00022244
   1cab4:	0001f884 	.word	0x0001f884
   1cab8:	200012d0 	.word	0x200012d0
   1cabc:	00025c08 	.word	0x00025c08
   1cac0:	00025c14 	.word	0x00025c14

0001cac4 <pyexec_raw_repl>:
    return res;
}

#else // MICROPY_REPL_EVENT_DRIVEN

int pyexec_raw_repl(void) {
   1cac4:	b580      	push	{r7, lr}
   1cac6:	b086      	sub	sp, #24
   1cac8:	af00      	add	r7, sp, #0
    vstr_t line;
    vstr_init(&line, 32);
   1caca:	463b      	mov	r3, r7
   1cacc:	2120      	movs	r1, #32
   1cace:	4618      	mov	r0, r3
   1cad0:	f7e4 fce0 	bl	1494 <vstr_init>

raw_repl_reset:
    mp_hal_stdout_tx_str("raw REPL; CTRL-B to exit\r\n");
   1cad4:	482a      	ldr	r0, [pc, #168]	; (1cb80 <pyexec_raw_repl+0xbc>)
   1cad6:	f7ff fefd 	bl	1c8d4 <mp_hal_stdout_tx_str>

    for (;;) {
        vstr_reset(&line);
   1cada:	463b      	mov	r3, r7
   1cadc:	4618      	mov	r0, r3
   1cade:	f7ff ff09 	bl	1c8f4 <vstr_reset>
        mp_hal_stdout_tx_str(">");
   1cae2:	4828      	ldr	r0, [pc, #160]	; (1cb84 <pyexec_raw_repl+0xc0>)
   1cae4:	f7ff fef6 	bl	1c8d4 <mp_hal_stdout_tx_str>
        for (;;) {
            int c = mp_hal_stdin_rx_chr();
   1cae8:	f7fe ff5a 	bl	1b9a0 <mp_hal_stdin_rx_chr>
   1caec:	6178      	str	r0, [r7, #20]
            if (c == CHAR_CTRL_A) {
   1caee:	697b      	ldr	r3, [r7, #20]
   1caf0:	2b01      	cmp	r3, #1
   1caf2:	d100      	bne.n	1caf6 <pyexec_raw_repl+0x32>
                // reset raw REPL
                goto raw_repl_reset;
   1caf4:	e7ee      	b.n	1cad4 <pyexec_raw_repl+0x10>
            } else if (c == CHAR_CTRL_B) {
   1caf6:	697b      	ldr	r3, [r7, #20]
   1caf8:	2b02      	cmp	r3, #2
   1cafa:	d10b      	bne.n	1cb14 <pyexec_raw_repl+0x50>
                // change to friendly REPL
                mp_hal_stdout_tx_str("\r\n");
   1cafc:	4822      	ldr	r0, [pc, #136]	; (1cb88 <pyexec_raw_repl+0xc4>)
   1cafe:	f7ff fee9 	bl	1c8d4 <mp_hal_stdout_tx_str>
                vstr_clear(&line);
   1cb02:	463b      	mov	r3, r7
   1cb04:	4618      	mov	r0, r3
   1cb06:	f7e4 fd29 	bl	155c <vstr_clear>
                pyexec_mode_kind = PYEXEC_MODE_FRIENDLY_REPL;
   1cb0a:	4b20      	ldr	r3, [pc, #128]	; (1cb8c <pyexec_raw_repl+0xc8>)
   1cb0c:	2201      	movs	r2, #1
   1cb0e:	601a      	str	r2, [r3, #0]
                return 0;
   1cb10:	2300      	movs	r3, #0
   1cb12:	e030      	b.n	1cb76 <pyexec_raw_repl+0xb2>
            } else if (c == CHAR_CTRL_C) {
   1cb14:	697b      	ldr	r3, [r7, #20]
   1cb16:	2b03      	cmp	r3, #3
   1cb18:	d104      	bne.n	1cb24 <pyexec_raw_repl+0x60>
                // clear line
                vstr_reset(&line);
   1cb1a:	463b      	mov	r3, r7
   1cb1c:	4618      	mov	r0, r3
   1cb1e:	f7ff fee9 	bl	1c8f4 <vstr_reset>
   1cb22:	e7e1      	b.n	1cae8 <pyexec_raw_repl+0x24>
            } else if (c == CHAR_CTRL_D) {
   1cb24:	697b      	ldr	r3, [r7, #20]
   1cb26:	2b04      	cmp	r3, #4
   1cb28:	d007      	beq.n	1cb3a <pyexec_raw_repl+0x76>
                // input finished
                break;
            } else {
                // let through any other raw 8-bit value
                vstr_add_byte(&line, c);
   1cb2a:	697b      	ldr	r3, [r7, #20]
   1cb2c:	b2da      	uxtb	r2, r3
   1cb2e:	463b      	mov	r3, r7
   1cb30:	4611      	mov	r1, r2
   1cb32:	4618      	mov	r0, r3
   1cb34:	f7e4 fe04 	bl	1740 <vstr_add_byte>
            }
        }
   1cb38:	e7d6      	b.n	1cae8 <pyexec_raw_repl+0x24>
                break;
   1cb3a:	bf00      	nop

        // indicate reception of command
        mp_hal_stdout_tx_str("OK");
   1cb3c:	4814      	ldr	r0, [pc, #80]	; (1cb90 <pyexec_raw_repl+0xcc>)
   1cb3e:	f7ff fec9 	bl	1c8d4 <mp_hal_stdout_tx_str>

        if (line.len == 0) {
   1cb42:	687b      	ldr	r3, [r7, #4]
   1cb44:	2b00      	cmp	r3, #0
   1cb46:	d109      	bne.n	1cb5c <pyexec_raw_repl+0x98>
            // exit for a soft reset
            mp_hal_stdout_tx_str("\r\n");
   1cb48:	480f      	ldr	r0, [pc, #60]	; (1cb88 <pyexec_raw_repl+0xc4>)
   1cb4a:	f7ff fec3 	bl	1c8d4 <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1cb4e:	463b      	mov	r3, r7
   1cb50:	4618      	mov	r0, r3
   1cb52:	f7e4 fd03 	bl	155c <vstr_clear>
            return PYEXEC_FORCED_EXIT;
   1cb56:	f44f 7380 	mov.w	r3, #256	; 0x100
   1cb5a:	e00c      	b.n	1cb76 <pyexec_raw_repl+0xb2>
        }

        int ret = parse_compile_execute(&line, MP_PARSE_FILE_INPUT, EXEC_FLAG_PRINT_EOF | EXEC_FLAG_SOURCE_IS_VSTR);
   1cb5c:	463b      	mov	r3, r7
   1cb5e:	2211      	movs	r2, #17
   1cb60:	2101      	movs	r1, #1
   1cb62:	4618      	mov	r0, r3
   1cb64:	f7ff fee0 	bl	1c928 <parse_compile_execute>
   1cb68:	6138      	str	r0, [r7, #16]
        if (ret & PYEXEC_FORCED_EXIT) {
   1cb6a:	693b      	ldr	r3, [r7, #16]
   1cb6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
   1cb70:	2b00      	cmp	r3, #0
   1cb72:	d0b2      	beq.n	1cada <pyexec_raw_repl+0x16>
            return ret;
   1cb74:	693b      	ldr	r3, [r7, #16]
        }
    }
}
   1cb76:	4618      	mov	r0, r3
   1cb78:	3718      	adds	r7, #24
   1cb7a:	46bd      	mov	sp, r7
   1cb7c:	bd80      	pop	{r7, pc}
   1cb7e:	bf00      	nop
   1cb80:	00025c5c 	.word	0x00025c5c
   1cb84:	00025c78 	.word	0x00025c78
   1cb88:	00025c7c 	.word	0x00025c7c
   1cb8c:	200008bc 	.word	0x200008bc
   1cb90:	00025c80 	.word	0x00025c80

0001cb94 <pyexec_friendly_repl>:

int pyexec_friendly_repl(void) {
   1cb94:	b580      	push	{r7, lr}
   1cb96:	b088      	sub	sp, #32
   1cb98:	af00      	add	r7, sp, #0
    vstr_t line;
    vstr_init(&line, 32);
   1cb9a:	f107 0308 	add.w	r3, r7, #8
   1cb9e:	2120      	movs	r1, #32
   1cba0:	4618      	mov	r0, r3
   1cba2:	f7e4 fc77 	bl	1494 <vstr_init>
    mp_obj_t lcd_o = mp_call_function_0(mp_load_name(qstr_from_str("LCD")));
    mp_call_function_1(mp_load_attr(lcd_o, qstr_from_str("light")), mp_const_true);
#endif

friendly_repl_reset:
    mp_hal_stdout_tx_str("MicroPython " MICROPY_GIT_TAG " on " MICROPY_BUILD_DATE "; " MICROPY_HW_BOARD_NAME " with " MICROPY_HW_MCU_NAME "\r\n");
   1cba6:	485f      	ldr	r0, [pc, #380]	; (1cd24 <pyexec_friendly_repl+0x190>)
   1cba8:	f7ff fe94 	bl	1c8d4 <mp_hal_stdout_tx_str>
        }
        #endif

        // If the GC is locked at this point there is no way out except a reset,
        // so force the GC to be unlocked to help the user debug what went wrong.
        if (MP_STATE_MEM(gc_lock_depth) != 0) {
   1cbac:	4b5e      	ldr	r3, [pc, #376]	; (1cd28 <pyexec_friendly_repl+0x194>)
   1cbae:	f8b3 31cc 	ldrh.w	r3, [r3, #460]	; 0x1cc
   1cbb2:	2b00      	cmp	r3, #0
   1cbb4:	d003      	beq.n	1cbbe <pyexec_friendly_repl+0x2a>
            MP_STATE_MEM(gc_lock_depth) = 0;
   1cbb6:	4b5c      	ldr	r3, [pc, #368]	; (1cd28 <pyexec_friendly_repl+0x194>)
   1cbb8:	2200      	movs	r2, #0
   1cbba:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
        }

        vstr_reset(&line);
   1cbbe:	f107 0308 	add.w	r3, r7, #8
   1cbc2:	4618      	mov	r0, r3
   1cbc4:	f7ff fe96 	bl	1c8f4 <vstr_reset>
        int ret = readline(&line, ">>> ");
   1cbc8:	f107 0308 	add.w	r3, r7, #8
   1cbcc:	4957      	ldr	r1, [pc, #348]	; (1cd2c <pyexec_friendly_repl+0x198>)
   1cbce:	4618      	mov	r0, r3
   1cbd0:	f000 ff1a 	bl	1da08 <readline>
   1cbd4:	61b8      	str	r0, [r7, #24]
        mp_parse_input_kind_t parse_input_kind = MP_PARSE_SINGLE_INPUT;
   1cbd6:	2300      	movs	r3, #0
   1cbd8:	61fb      	str	r3, [r7, #28]

        if (ret == CHAR_CTRL_A) {
   1cbda:	69bb      	ldr	r3, [r7, #24]
   1cbdc:	2b01      	cmp	r3, #1
   1cbde:	d10c      	bne.n	1cbfa <pyexec_friendly_repl+0x66>
            // change to raw REPL
            mp_hal_stdout_tx_str("\r\n");
   1cbe0:	4853      	ldr	r0, [pc, #332]	; (1cd30 <pyexec_friendly_repl+0x19c>)
   1cbe2:	f7ff fe77 	bl	1c8d4 <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1cbe6:	f107 0308 	add.w	r3, r7, #8
   1cbea:	4618      	mov	r0, r3
   1cbec:	f7e4 fcb6 	bl	155c <vstr_clear>
            pyexec_mode_kind = PYEXEC_MODE_RAW_REPL;
   1cbf0:	4b50      	ldr	r3, [pc, #320]	; (1cd34 <pyexec_friendly_repl+0x1a0>)
   1cbf2:	2200      	movs	r2, #0
   1cbf4:	601a      	str	r2, [r3, #0]
            return 0;
   1cbf6:	2300      	movs	r3, #0
   1cbf8:	e08f      	b.n	1cd1a <pyexec_friendly_repl+0x186>
        } else if (ret == CHAR_CTRL_B) {
   1cbfa:	69bb      	ldr	r3, [r7, #24]
   1cbfc:	2b02      	cmp	r3, #2
   1cbfe:	d103      	bne.n	1cc08 <pyexec_friendly_repl+0x74>
            // reset friendly REPL
            mp_hal_stdout_tx_str("\r\n");
   1cc00:	484b      	ldr	r0, [pc, #300]	; (1cd30 <pyexec_friendly_repl+0x19c>)
   1cc02:	f7ff fe67 	bl	1c8d4 <mp_hal_stdout_tx_str>
            goto friendly_repl_reset;
   1cc06:	e7ce      	b.n	1cba6 <pyexec_friendly_repl+0x12>
        } else if (ret == CHAR_CTRL_C) {
   1cc08:	69bb      	ldr	r3, [r7, #24]
   1cc0a:	2b03      	cmp	r3, #3
   1cc0c:	d103      	bne.n	1cc16 <pyexec_friendly_repl+0x82>
            // break
            mp_hal_stdout_tx_str("\r\n");
   1cc0e:	4848      	ldr	r0, [pc, #288]	; (1cd30 <pyexec_friendly_repl+0x19c>)
   1cc10:	f7ff fe60 	bl	1c8d4 <mp_hal_stdout_tx_str>
            continue;
   1cc14:	e080      	b.n	1cd18 <pyexec_friendly_repl+0x184>
        } else if (ret == CHAR_CTRL_D) {
   1cc16:	69bb      	ldr	r3, [r7, #24]
   1cc18:	2b04      	cmp	r3, #4
   1cc1a:	d10a      	bne.n	1cc32 <pyexec_friendly_repl+0x9e>
            // exit for a soft reset
            mp_hal_stdout_tx_str("\r\n");
   1cc1c:	4844      	ldr	r0, [pc, #272]	; (1cd30 <pyexec_friendly_repl+0x19c>)
   1cc1e:	f7ff fe59 	bl	1c8d4 <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1cc22:	f107 0308 	add.w	r3, r7, #8
   1cc26:	4618      	mov	r0, r3
   1cc28:	f7e4 fc98 	bl	155c <vstr_clear>
            return PYEXEC_FORCED_EXIT;
   1cc2c:	f44f 7380 	mov.w	r3, #256	; 0x100
   1cc30:	e073      	b.n	1cd1a <pyexec_friendly_repl+0x186>
        } else if (ret == CHAR_CTRL_E) {
   1cc32:	69bb      	ldr	r3, [r7, #24]
   1cc34:	2b05      	cmp	r3, #5
   1cc36:	d130      	bne.n	1cc9a <pyexec_friendly_repl+0x106>
            // paste mode
            mp_hal_stdout_tx_str("\r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== ");
   1cc38:	483f      	ldr	r0, [pc, #252]	; (1cd38 <pyexec_friendly_repl+0x1a4>)
   1cc3a:	f7ff fe4b 	bl	1c8d4 <mp_hal_stdout_tx_str>
            vstr_reset(&line);
   1cc3e:	f107 0308 	add.w	r3, r7, #8
   1cc42:	4618      	mov	r0, r3
   1cc44:	f7ff fe56 	bl	1c8f4 <vstr_reset>
            for (;;) {
                char c = mp_hal_stdin_rx_chr();
   1cc48:	f7fe feaa 	bl	1b9a0 <mp_hal_stdin_rx_chr>
   1cc4c:	4603      	mov	r3, r0
   1cc4e:	b2db      	uxtb	r3, r3
   1cc50:	71fb      	strb	r3, [r7, #7]
                if (c == CHAR_CTRL_C) {
   1cc52:	79fb      	ldrb	r3, [r7, #7]
   1cc54:	2b03      	cmp	r3, #3
   1cc56:	d103      	bne.n	1cc60 <pyexec_friendly_repl+0xcc>
                    // cancel everything
                    mp_hal_stdout_tx_str("\r\n");
   1cc58:	4835      	ldr	r0, [pc, #212]	; (1cd30 <pyexec_friendly_repl+0x19c>)
   1cc5a:	f7ff fe3b 	bl	1c8d4 <mp_hal_stdout_tx_str>
   1cc5e:	e7a5      	b.n	1cbac <pyexec_friendly_repl+0x18>
                    goto input_restart;
                } else if (c == CHAR_CTRL_D) {
   1cc60:	79fb      	ldrb	r3, [r7, #7]
   1cc62:	2b04      	cmp	r3, #4
   1cc64:	d105      	bne.n	1cc72 <pyexec_friendly_repl+0xde>
                    // end of input
                    mp_hal_stdout_tx_str("\r\n");
   1cc66:	4832      	ldr	r0, [pc, #200]	; (1cd30 <pyexec_friendly_repl+0x19c>)
   1cc68:	f7ff fe34 	bl	1c8d4 <mp_hal_stdout_tx_str>
                    } else {
                        mp_hal_stdout_tx_strn(&c, 1);
                    }
                }
            }
            parse_input_kind = MP_PARSE_FILE_INPUT;
   1cc6c:	2301      	movs	r3, #1
   1cc6e:	61fb      	str	r3, [r7, #28]
   1cc70:	e041      	b.n	1ccf6 <pyexec_friendly_repl+0x162>
                    vstr_add_byte(&line, c);
   1cc72:	79fa      	ldrb	r2, [r7, #7]
   1cc74:	f107 0308 	add.w	r3, r7, #8
   1cc78:	4611      	mov	r1, r2
   1cc7a:	4618      	mov	r0, r3
   1cc7c:	f7e4 fd60 	bl	1740 <vstr_add_byte>
                    if (c == '\r') {
   1cc80:	79fb      	ldrb	r3, [r7, #7]
   1cc82:	2b0d      	cmp	r3, #13
   1cc84:	d103      	bne.n	1cc8e <pyexec_friendly_repl+0xfa>
                        mp_hal_stdout_tx_str("\r\n=== ");
   1cc86:	482d      	ldr	r0, [pc, #180]	; (1cd3c <pyexec_friendly_repl+0x1a8>)
   1cc88:	f7ff fe24 	bl	1c8d4 <mp_hal_stdout_tx_str>
   1cc8c:	e7dc      	b.n	1cc48 <pyexec_friendly_repl+0xb4>
                        mp_hal_stdout_tx_strn(&c, 1);
   1cc8e:	1dfb      	adds	r3, r7, #7
   1cc90:	2101      	movs	r1, #1
   1cc92:	4618      	mov	r0, r3
   1cc94:	f7fe fe9c 	bl	1b9d0 <mp_hal_stdout_tx_strn>
            }
   1cc98:	e7d6      	b.n	1cc48 <pyexec_friendly_repl+0xb4>
        } else if (vstr_len(&line) == 0) {
   1cc9a:	f107 0308 	add.w	r3, r7, #8
   1cc9e:	4618      	mov	r0, r3
   1cca0:	f7ff fe36 	bl	1c910 <vstr_len>
   1cca4:	4603      	mov	r3, r0
   1cca6:	2b00      	cmp	r3, #0
   1cca8:	d035      	beq.n	1cd16 <pyexec_friendly_repl+0x182>
            continue;
        } else {
            // got a line with non-zero length, see if it needs continuing
            while (mp_repl_continue_with_input(vstr_null_terminated_str(&line))) {
   1ccaa:	e016      	b.n	1ccda <pyexec_friendly_repl+0x146>
                vstr_add_byte(&line, '\n');
   1ccac:	f107 0308 	add.w	r3, r7, #8
   1ccb0:	210a      	movs	r1, #10
   1ccb2:	4618      	mov	r0, r3
   1ccb4:	f7e4 fd44 	bl	1740 <vstr_add_byte>
                ret = readline(&line, "... ");
   1ccb8:	f107 0308 	add.w	r3, r7, #8
   1ccbc:	4920      	ldr	r1, [pc, #128]	; (1cd40 <pyexec_friendly_repl+0x1ac>)
   1ccbe:	4618      	mov	r0, r3
   1ccc0:	f000 fea2 	bl	1da08 <readline>
   1ccc4:	61b8      	str	r0, [r7, #24]
                if (ret == CHAR_CTRL_C) {
   1ccc6:	69bb      	ldr	r3, [r7, #24]
   1ccc8:	2b03      	cmp	r3, #3
   1ccca:	d103      	bne.n	1ccd4 <pyexec_friendly_repl+0x140>
                    // cancel everything
                    mp_hal_stdout_tx_str("\r\n");
   1cccc:	4818      	ldr	r0, [pc, #96]	; (1cd30 <pyexec_friendly_repl+0x19c>)
   1ccce:	f7ff fe01 	bl	1c8d4 <mp_hal_stdout_tx_str>
                    goto input_restart;
   1ccd2:	e76b      	b.n	1cbac <pyexec_friendly_repl+0x18>
                } else if (ret == CHAR_CTRL_D) {
   1ccd4:	69bb      	ldr	r3, [r7, #24]
   1ccd6:	2b04      	cmp	r3, #4
   1ccd8:	d00c      	beq.n	1ccf4 <pyexec_friendly_repl+0x160>
            while (mp_repl_continue_with_input(vstr_null_terminated_str(&line))) {
   1ccda:	f107 0308 	add.w	r3, r7, #8
   1ccde:	4618      	mov	r0, r3
   1cce0:	f7e4 fd12 	bl	1708 <vstr_null_terminated_str>
   1cce4:	4603      	mov	r3, r0
   1cce6:	4618      	mov	r0, r3
   1cce8:	f7fe f8be 	bl	1ae68 <mp_repl_continue_with_input>
   1ccec:	4603      	mov	r3, r0
   1ccee:	2b00      	cmp	r3, #0
   1ccf0:	d1dc      	bne.n	1ccac <pyexec_friendly_repl+0x118>
   1ccf2:	e000      	b.n	1ccf6 <pyexec_friendly_repl+0x162>
                    // stop entering compound statement
                    break;
   1ccf4:	bf00      	nop
                }
            }
        }

        ret = parse_compile_execute(&line, parse_input_kind, EXEC_FLAG_ALLOW_DEBUGGING | EXEC_FLAG_IS_REPL | EXEC_FLAG_SOURCE_IS_VSTR);
   1ccf6:	f107 0308 	add.w	r3, r7, #8
   1ccfa:	2216      	movs	r2, #22
   1ccfc:	69f9      	ldr	r1, [r7, #28]
   1ccfe:	4618      	mov	r0, r3
   1cd00:	f7ff fe12 	bl	1c928 <parse_compile_execute>
   1cd04:	61b8      	str	r0, [r7, #24]
        if (ret & PYEXEC_FORCED_EXIT) {
   1cd06:	69bb      	ldr	r3, [r7, #24]
   1cd08:	f403 7380 	and.w	r3, r3, #256	; 0x100
   1cd0c:	2b00      	cmp	r3, #0
   1cd0e:	f43f af4d 	beq.w	1cbac <pyexec_friendly_repl+0x18>
            return ret;
   1cd12:	69bb      	ldr	r3, [r7, #24]
   1cd14:	e001      	b.n	1cd1a <pyexec_friendly_repl+0x186>
            continue;
   1cd16:	bf00      	nop
        }
    }
   1cd18:	e748      	b.n	1cbac <pyexec_friendly_repl+0x18>
}
   1cd1a:	4618      	mov	r0, r3
   1cd1c:	3720      	adds	r7, #32
   1cd1e:	46bd      	mov	sp, r7
   1cd20:	bd80      	pop	{r7, pc}
   1cd22:	bf00      	nop
   1cd24:	00025c84 	.word	0x00025c84
   1cd28:	200012f0 	.word	0x200012f0
   1cd2c:	00025ce0 	.word	0x00025ce0
   1cd30:	00025c7c 	.word	0x00025c7c
   1cd34:	200008bc 	.word	0x200008bc
   1cd38:	00025ce8 	.word	0x00025ce8
   1cd3c:	00025d20 	.word	0x00025d20
   1cd40:	00025d28 	.word	0x00025d28

0001cd44 <pyexec_file>:

#endif // MICROPY_REPL_EVENT_DRIVEN
#endif // MICROPY_ENABLE_COMPILER

int pyexec_file(const char *filename) {
   1cd44:	b580      	push	{r7, lr}
   1cd46:	b082      	sub	sp, #8
   1cd48:	af00      	add	r7, sp, #0
   1cd4a:	6078      	str	r0, [r7, #4]
    return parse_compile_execute(filename, MP_PARSE_FILE_INPUT, EXEC_FLAG_SOURCE_IS_FILENAME);
   1cd4c:	2220      	movs	r2, #32
   1cd4e:	2101      	movs	r1, #1
   1cd50:	6878      	ldr	r0, [r7, #4]
   1cd52:	f7ff fde9 	bl	1c928 <parse_compile_execute>
   1cd56:	4603      	mov	r3, r0
}
   1cd58:	4618      	mov	r0, r3
   1cd5a:	3708      	adds	r7, #8
   1cd5c:	46bd      	mov	sp, r7
   1cd5e:	bd80      	pop	{r7, pc}

0001cd60 <pyb_set_repl_info>:
            return false;
    }
}
#endif

mp_obj_t pyb_set_repl_info(mp_obj_t o_value) {
   1cd60:	b580      	push	{r7, lr}
   1cd62:	b082      	sub	sp, #8
   1cd64:	af00      	add	r7, sp, #0
   1cd66:	6078      	str	r0, [r7, #4]
    repl_display_debugging_info = mp_obj_get_int(o_value);
   1cd68:	6878      	ldr	r0, [r7, #4]
   1cd6a:	f7f0 ff71 	bl	dc50 <mp_obj_get_int>
   1cd6e:	4603      	mov	r3, r0
   1cd70:	2b00      	cmp	r3, #0
   1cd72:	bf14      	ite	ne
   1cd74:	2301      	movne	r3, #1
   1cd76:	2300      	moveq	r3, #0
   1cd78:	b2da      	uxtb	r2, r3
   1cd7a:	4b03      	ldr	r3, [pc, #12]	; (1cd88 <pyb_set_repl_info+0x28>)
   1cd7c:	701a      	strb	r2, [r3, #0]
    return mp_const_none;
   1cd7e:	4b03      	ldr	r3, [pc, #12]	; (1cd8c <pyb_set_repl_info+0x2c>)
}
   1cd80:	4618      	mov	r0, r3
   1cd82:	3708      	adds	r7, #8
   1cd84:	46bd      	mov	sp, r7
   1cd86:	bd80      	pop	{r7, pc}
   1cd88:	200012d0 	.word	0x200012d0
   1cd8c:	000234d4 	.word	0x000234d4

0001cd90 <memcpy>:
#include <stdint.h>
#include <string.h>

#define likely(x) __builtin_expect((x), 1)

void *memcpy(void *dst, const void *src, size_t n) {
   1cd90:	b480      	push	{r7}
   1cd92:	b08b      	sub	sp, #44	; 0x2c
   1cd94:	af00      	add	r7, sp, #0
   1cd96:	60f8      	str	r0, [r7, #12]
   1cd98:	60b9      	str	r1, [r7, #8]
   1cd9a:	607a      	str	r2, [r7, #4]
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1cd9c:	68fb      	ldr	r3, [r7, #12]
   1cd9e:	f003 0303 	and.w	r3, r3, #3
   1cda2:	2b00      	cmp	r3, #0
   1cda4:	bf0c      	ite	eq
   1cda6:	2301      	moveq	r3, #1
   1cda8:	2300      	movne	r3, #0
   1cdaa:	b2db      	uxtb	r3, r3
   1cdac:	2b00      	cmp	r3, #0
   1cdae:	d038      	beq.n	1ce22 <memcpy+0x92>
   1cdb0:	68bb      	ldr	r3, [r7, #8]
   1cdb2:	f003 0303 	and.w	r3, r3, #3
   1cdb6:	2b00      	cmp	r3, #0
   1cdb8:	bf0c      	ite	eq
   1cdba:	2301      	moveq	r3, #1
   1cdbc:	2300      	movne	r3, #0
   1cdbe:	b2db      	uxtb	r3, r3
   1cdc0:	2b00      	cmp	r3, #0
   1cdc2:	d02e      	beq.n	1ce22 <memcpy+0x92>
        // pointers aligned
        uint32_t *d = dst;
   1cdc4:	68fb      	ldr	r3, [r7, #12]
   1cdc6:	627b      	str	r3, [r7, #36]	; 0x24
        const uint32_t *s = src;
   1cdc8:	68bb      	ldr	r3, [r7, #8]
   1cdca:	623b      	str	r3, [r7, #32]

        // copy words first
        for (size_t i = (n >> 2); i; i--) {
   1cdcc:	687b      	ldr	r3, [r7, #4]
   1cdce:	089b      	lsrs	r3, r3, #2
   1cdd0:	61fb      	str	r3, [r7, #28]
   1cdd2:	e00a      	b.n	1cdea <memcpy+0x5a>
            *d++ = *s++;
   1cdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cdd6:	1d1a      	adds	r2, r3, #4
   1cdd8:	627a      	str	r2, [r7, #36]	; 0x24
   1cdda:	6a3a      	ldr	r2, [r7, #32]
   1cddc:	1d11      	adds	r1, r2, #4
   1cdde:	6239      	str	r1, [r7, #32]
   1cde0:	6812      	ldr	r2, [r2, #0]
   1cde2:	601a      	str	r2, [r3, #0]
        for (size_t i = (n >> 2); i; i--) {
   1cde4:	69fb      	ldr	r3, [r7, #28]
   1cde6:	3b01      	subs	r3, #1
   1cde8:	61fb      	str	r3, [r7, #28]
   1cdea:	69fb      	ldr	r3, [r7, #28]
   1cdec:	2b00      	cmp	r3, #0
   1cdee:	d1f1      	bne.n	1cdd4 <memcpy+0x44>
        }

        if (n & 2) {
   1cdf0:	687b      	ldr	r3, [r7, #4]
   1cdf2:	f003 0302 	and.w	r3, r3, #2
   1cdf6:	2b00      	cmp	r3, #0
   1cdf8:	d009      	beq.n	1ce0e <memcpy+0x7e>
            // copy half-word
            *(uint16_t*)d = *(const uint16_t*)s;
   1cdfa:	6a3b      	ldr	r3, [r7, #32]
   1cdfc:	881a      	ldrh	r2, [r3, #0]
   1cdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ce00:	801a      	strh	r2, [r3, #0]
            d = (uint32_t*)((uint16_t*)d + 1);
   1ce02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ce04:	3302      	adds	r3, #2
   1ce06:	627b      	str	r3, [r7, #36]	; 0x24
            s = (const uint32_t*)((const uint16_t*)s + 1);
   1ce08:	6a3b      	ldr	r3, [r7, #32]
   1ce0a:	3302      	adds	r3, #2
   1ce0c:	623b      	str	r3, [r7, #32]
        }

        if (n & 1) {
   1ce0e:	687b      	ldr	r3, [r7, #4]
   1ce10:	f003 0301 	and.w	r3, r3, #1
   1ce14:	2b00      	cmp	r3, #0
   1ce16:	d018      	beq.n	1ce4a <memcpy+0xba>
            // copy byte
            *((uint8_t*)d) = *((const uint8_t*)s);
   1ce18:	6a3b      	ldr	r3, [r7, #32]
   1ce1a:	781a      	ldrb	r2, [r3, #0]
   1ce1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ce1e:	701a      	strb	r2, [r3, #0]
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1ce20:	e013      	b.n	1ce4a <memcpy+0xba>
        }
    } else {
        // unaligned access, copy bytes
        uint8_t *d = dst;
   1ce22:	68fb      	ldr	r3, [r7, #12]
   1ce24:	61bb      	str	r3, [r7, #24]
        const uint8_t *s = src;
   1ce26:	68bb      	ldr	r3, [r7, #8]
   1ce28:	617b      	str	r3, [r7, #20]

        for (; n; n--) {
   1ce2a:	e00a      	b.n	1ce42 <memcpy+0xb2>
            *d++ = *s++;
   1ce2c:	69bb      	ldr	r3, [r7, #24]
   1ce2e:	1c5a      	adds	r2, r3, #1
   1ce30:	61ba      	str	r2, [r7, #24]
   1ce32:	697a      	ldr	r2, [r7, #20]
   1ce34:	1c51      	adds	r1, r2, #1
   1ce36:	6179      	str	r1, [r7, #20]
   1ce38:	7812      	ldrb	r2, [r2, #0]
   1ce3a:	701a      	strb	r2, [r3, #0]
        for (; n; n--) {
   1ce3c:	687b      	ldr	r3, [r7, #4]
   1ce3e:	3b01      	subs	r3, #1
   1ce40:	607b      	str	r3, [r7, #4]
   1ce42:	687b      	ldr	r3, [r7, #4]
   1ce44:	2b00      	cmp	r3, #0
   1ce46:	d1f1      	bne.n	1ce2c <memcpy+0x9c>
   1ce48:	e000      	b.n	1ce4c <memcpy+0xbc>
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1ce4a:	bf00      	nop
        }
    }

    return dst;
   1ce4c:	68fb      	ldr	r3, [r7, #12]
}
   1ce4e:	4618      	mov	r0, r3
   1ce50:	372c      	adds	r7, #44	; 0x2c
   1ce52:	46bd      	mov	sp, r7
   1ce54:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ce58:	4770      	bx	lr
   1ce5a:	bf00      	nop

0001ce5c <memmove>:

void *memmove(void *dest, const void *src, size_t n) {
   1ce5c:	b580      	push	{r7, lr}
   1ce5e:	b086      	sub	sp, #24
   1ce60:	af00      	add	r7, sp, #0
   1ce62:	60f8      	str	r0, [r7, #12]
   1ce64:	60b9      	str	r1, [r7, #8]
   1ce66:	607a      	str	r2, [r7, #4]
    if (src < dest && (uint8_t*)dest < (const uint8_t*)src + n) {
   1ce68:	68ba      	ldr	r2, [r7, #8]
   1ce6a:	68fb      	ldr	r3, [r7, #12]
   1ce6c:	429a      	cmp	r2, r3
   1ce6e:	d220      	bcs.n	1ceb2 <memmove+0x56>
   1ce70:	68ba      	ldr	r2, [r7, #8]
   1ce72:	687b      	ldr	r3, [r7, #4]
   1ce74:	441a      	add	r2, r3
   1ce76:	68fb      	ldr	r3, [r7, #12]
   1ce78:	429a      	cmp	r2, r3
   1ce7a:	d91a      	bls.n	1ceb2 <memmove+0x56>
        // need to copy backwards
        uint8_t *d = (uint8_t*)dest + n - 1;
   1ce7c:	687b      	ldr	r3, [r7, #4]
   1ce7e:	3b01      	subs	r3, #1
   1ce80:	68fa      	ldr	r2, [r7, #12]
   1ce82:	4413      	add	r3, r2
   1ce84:	617b      	str	r3, [r7, #20]
        const uint8_t *s = (const uint8_t*)src + n - 1;
   1ce86:	687b      	ldr	r3, [r7, #4]
   1ce88:	3b01      	subs	r3, #1
   1ce8a:	68ba      	ldr	r2, [r7, #8]
   1ce8c:	4413      	add	r3, r2
   1ce8e:	613b      	str	r3, [r7, #16]
        for (; n > 0; n--) {
   1ce90:	e00a      	b.n	1cea8 <memmove+0x4c>
            *d-- = *s--;
   1ce92:	697b      	ldr	r3, [r7, #20]
   1ce94:	1e5a      	subs	r2, r3, #1
   1ce96:	617a      	str	r2, [r7, #20]
   1ce98:	693a      	ldr	r2, [r7, #16]
   1ce9a:	1e51      	subs	r1, r2, #1
   1ce9c:	6139      	str	r1, [r7, #16]
   1ce9e:	7812      	ldrb	r2, [r2, #0]
   1cea0:	701a      	strb	r2, [r3, #0]
        for (; n > 0; n--) {
   1cea2:	687b      	ldr	r3, [r7, #4]
   1cea4:	3b01      	subs	r3, #1
   1cea6:	607b      	str	r3, [r7, #4]
   1cea8:	687b      	ldr	r3, [r7, #4]
   1ceaa:	2b00      	cmp	r3, #0
   1ceac:	d1f1      	bne.n	1ce92 <memmove+0x36>
        }
        return dest;
   1ceae:	68fb      	ldr	r3, [r7, #12]
   1ceb0:	e005      	b.n	1cebe <memmove+0x62>
    } else {
        // can use normal memcpy
        return memcpy(dest, src, n);
   1ceb2:	687a      	ldr	r2, [r7, #4]
   1ceb4:	68b9      	ldr	r1, [r7, #8]
   1ceb6:	68f8      	ldr	r0, [r7, #12]
   1ceb8:	f7ff ff6a 	bl	1cd90 <memcpy>
   1cebc:	4603      	mov	r3, r0
    }
}
   1cebe:	4618      	mov	r0, r3
   1cec0:	3718      	adds	r7, #24
   1cec2:	46bd      	mov	sp, r7
   1cec4:	bd80      	pop	{r7, pc}
   1cec6:	bf00      	nop

0001cec8 <memset>:

void *memset(void *s, int c, size_t n) {
   1cec8:	b480      	push	{r7}
   1ceca:	b089      	sub	sp, #36	; 0x24
   1cecc:	af00      	add	r7, sp, #0
   1cece:	60f8      	str	r0, [r7, #12]
   1ced0:	60b9      	str	r1, [r7, #8]
   1ced2:	607a      	str	r2, [r7, #4]
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1ced4:	68bb      	ldr	r3, [r7, #8]
   1ced6:	2b00      	cmp	r3, #0
   1ced8:	d129      	bne.n	1cf2e <memset+0x66>
   1ceda:	68fb      	ldr	r3, [r7, #12]
   1cedc:	f003 0303 	and.w	r3, r3, #3
   1cee0:	2b00      	cmp	r3, #0
   1cee2:	d124      	bne.n	1cf2e <memset+0x66>
        // aligned store of 0
        uint32_t *s32 = s;
   1cee4:	68fb      	ldr	r3, [r7, #12]
   1cee6:	61fb      	str	r3, [r7, #28]
        for (size_t i = n >> 2; i > 0; i--) {
   1cee8:	687b      	ldr	r3, [r7, #4]
   1ceea:	089b      	lsrs	r3, r3, #2
   1ceec:	61bb      	str	r3, [r7, #24]
   1ceee:	e007      	b.n	1cf00 <memset+0x38>
            *s32++ = 0;
   1cef0:	69fb      	ldr	r3, [r7, #28]
   1cef2:	1d1a      	adds	r2, r3, #4
   1cef4:	61fa      	str	r2, [r7, #28]
   1cef6:	2200      	movs	r2, #0
   1cef8:	601a      	str	r2, [r3, #0]
        for (size_t i = n >> 2; i > 0; i--) {
   1cefa:	69bb      	ldr	r3, [r7, #24]
   1cefc:	3b01      	subs	r3, #1
   1cefe:	61bb      	str	r3, [r7, #24]
   1cf00:	69bb      	ldr	r3, [r7, #24]
   1cf02:	2b00      	cmp	r3, #0
   1cf04:	d1f4      	bne.n	1cef0 <memset+0x28>
        }
        if (n & 2) {
   1cf06:	687b      	ldr	r3, [r7, #4]
   1cf08:	f003 0302 	and.w	r3, r3, #2
   1cf0c:	2b00      	cmp	r3, #0
   1cf0e:	d005      	beq.n	1cf1c <memset+0x54>
            *((uint16_t*)s32) = 0;
   1cf10:	69fb      	ldr	r3, [r7, #28]
   1cf12:	2200      	movs	r2, #0
   1cf14:	801a      	strh	r2, [r3, #0]
            s32 = (uint32_t*)((uint16_t*)s32 + 1);
   1cf16:	69fb      	ldr	r3, [r7, #28]
   1cf18:	3302      	adds	r3, #2
   1cf1a:	61fb      	str	r3, [r7, #28]
        }
        if (n & 1) {
   1cf1c:	687b      	ldr	r3, [r7, #4]
   1cf1e:	f003 0301 	and.w	r3, r3, #1
   1cf22:	2b00      	cmp	r3, #0
   1cf24:	d013      	beq.n	1cf4e <memset+0x86>
            *((uint8_t*)s32) = 0;
   1cf26:	69fb      	ldr	r3, [r7, #28]
   1cf28:	2200      	movs	r2, #0
   1cf2a:	701a      	strb	r2, [r3, #0]
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1cf2c:	e00f      	b.n	1cf4e <memset+0x86>
        }
    } else {
        uint8_t *s2 = s;
   1cf2e:	68fb      	ldr	r3, [r7, #12]
   1cf30:	617b      	str	r3, [r7, #20]
        for (; n > 0; n--) {
   1cf32:	e008      	b.n	1cf46 <memset+0x7e>
            *s2++ = c;
   1cf34:	697b      	ldr	r3, [r7, #20]
   1cf36:	1c5a      	adds	r2, r3, #1
   1cf38:	617a      	str	r2, [r7, #20]
   1cf3a:	68ba      	ldr	r2, [r7, #8]
   1cf3c:	b2d2      	uxtb	r2, r2
   1cf3e:	701a      	strb	r2, [r3, #0]
        for (; n > 0; n--) {
   1cf40:	687b      	ldr	r3, [r7, #4]
   1cf42:	3b01      	subs	r3, #1
   1cf44:	607b      	str	r3, [r7, #4]
   1cf46:	687b      	ldr	r3, [r7, #4]
   1cf48:	2b00      	cmp	r3, #0
   1cf4a:	d1f3      	bne.n	1cf34 <memset+0x6c>
   1cf4c:	e000      	b.n	1cf50 <memset+0x88>
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1cf4e:	bf00      	nop
        }
    }
    return s;
   1cf50:	68fb      	ldr	r3, [r7, #12]
}
   1cf52:	4618      	mov	r0, r3
   1cf54:	3724      	adds	r7, #36	; 0x24
   1cf56:	46bd      	mov	sp, r7
   1cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cf5c:	4770      	bx	lr
   1cf5e:	bf00      	nop

0001cf60 <memcmp>:

int memcmp(const void *s1, const void *s2, size_t n) {
   1cf60:	b480      	push	{r7}
   1cf62:	b089      	sub	sp, #36	; 0x24
   1cf64:	af00      	add	r7, sp, #0
   1cf66:	60f8      	str	r0, [r7, #12]
   1cf68:	60b9      	str	r1, [r7, #8]
   1cf6a:	607a      	str	r2, [r7, #4]
    const uint8_t *s1_8 = s1;
   1cf6c:	68fb      	ldr	r3, [r7, #12]
   1cf6e:	61fb      	str	r3, [r7, #28]
    const uint8_t *s2_8 = s2;
   1cf70:	68bb      	ldr	r3, [r7, #8]
   1cf72:	61bb      	str	r3, [r7, #24]
    while (n--) {
   1cf74:	e016      	b.n	1cfa4 <memcmp+0x44>
        char c1 = *s1_8++;
   1cf76:	69fb      	ldr	r3, [r7, #28]
   1cf78:	1c5a      	adds	r2, r3, #1
   1cf7a:	61fa      	str	r2, [r7, #28]
   1cf7c:	781b      	ldrb	r3, [r3, #0]
   1cf7e:	75fb      	strb	r3, [r7, #23]
        char c2 = *s2_8++;
   1cf80:	69bb      	ldr	r3, [r7, #24]
   1cf82:	1c5a      	adds	r2, r3, #1
   1cf84:	61ba      	str	r2, [r7, #24]
   1cf86:	781b      	ldrb	r3, [r3, #0]
   1cf88:	75bb      	strb	r3, [r7, #22]
        if (c1 < c2) return -1;
   1cf8a:	7dfa      	ldrb	r2, [r7, #23]
   1cf8c:	7dbb      	ldrb	r3, [r7, #22]
   1cf8e:	429a      	cmp	r2, r3
   1cf90:	d202      	bcs.n	1cf98 <memcmp+0x38>
   1cf92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cf96:	e00b      	b.n	1cfb0 <memcmp+0x50>
        else if (c1 > c2) return 1;
   1cf98:	7dfa      	ldrb	r2, [r7, #23]
   1cf9a:	7dbb      	ldrb	r3, [r7, #22]
   1cf9c:	429a      	cmp	r2, r3
   1cf9e:	d901      	bls.n	1cfa4 <memcmp+0x44>
   1cfa0:	2301      	movs	r3, #1
   1cfa2:	e005      	b.n	1cfb0 <memcmp+0x50>
    while (n--) {
   1cfa4:	687b      	ldr	r3, [r7, #4]
   1cfa6:	1e5a      	subs	r2, r3, #1
   1cfa8:	607a      	str	r2, [r7, #4]
   1cfaa:	2b00      	cmp	r3, #0
   1cfac:	d1e3      	bne.n	1cf76 <memcmp+0x16>
    }
    return 0;
   1cfae:	2300      	movs	r3, #0
}
   1cfb0:	4618      	mov	r0, r3
   1cfb2:	3724      	adds	r7, #36	; 0x24
   1cfb4:	46bd      	mov	sp, r7
   1cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cfba:	4770      	bx	lr

0001cfbc <memchr>:

void *memchr(const void *s, int c, size_t n) {
   1cfbc:	b480      	push	{r7}
   1cfbe:	b087      	sub	sp, #28
   1cfc0:	af00      	add	r7, sp, #0
   1cfc2:	60f8      	str	r0, [r7, #12]
   1cfc4:	60b9      	str	r1, [r7, #8]
   1cfc6:	607a      	str	r2, [r7, #4]
    if (n != 0) {
   1cfc8:	687b      	ldr	r3, [r7, #4]
   1cfca:	2b00      	cmp	r3, #0
   1cfcc:	d012      	beq.n	1cff4 <memchr+0x38>
        const unsigned char *p = s;
   1cfce:	68fb      	ldr	r3, [r7, #12]
   1cfd0:	617b      	str	r3, [r7, #20]

        do {
            if (*p++ == c)
   1cfd2:	697b      	ldr	r3, [r7, #20]
   1cfd4:	1c5a      	adds	r2, r3, #1
   1cfd6:	617a      	str	r2, [r7, #20]
   1cfd8:	781b      	ldrb	r3, [r3, #0]
   1cfda:	461a      	mov	r2, r3
   1cfdc:	68bb      	ldr	r3, [r7, #8]
   1cfde:	429a      	cmp	r2, r3
   1cfe0:	d102      	bne.n	1cfe8 <memchr+0x2c>
                return ((void *)(p - 1));
   1cfe2:	697b      	ldr	r3, [r7, #20]
   1cfe4:	3b01      	subs	r3, #1
   1cfe6:	e006      	b.n	1cff6 <memchr+0x3a>
        } while (--n != 0);
   1cfe8:	687b      	ldr	r3, [r7, #4]
   1cfea:	3b01      	subs	r3, #1
   1cfec:	607b      	str	r3, [r7, #4]
   1cfee:	687b      	ldr	r3, [r7, #4]
   1cff0:	2b00      	cmp	r3, #0
   1cff2:	d1ee      	bne.n	1cfd2 <memchr+0x16>
    }
    return 0;
   1cff4:	2300      	movs	r3, #0
}
   1cff6:	4618      	mov	r0, r3
   1cff8:	371c      	adds	r7, #28
   1cffa:	46bd      	mov	sp, r7
   1cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d000:	4770      	bx	lr
   1d002:	bf00      	nop

0001d004 <strlen>:

size_t strlen(const char *str) {
   1d004:	b480      	push	{r7}
   1d006:	b085      	sub	sp, #20
   1d008:	af00      	add	r7, sp, #0
   1d00a:	6078      	str	r0, [r7, #4]
    int len = 0;
   1d00c:	2300      	movs	r3, #0
   1d00e:	60fb      	str	r3, [r7, #12]
    for (const char *s = str; *s; s++) {
   1d010:	687b      	ldr	r3, [r7, #4]
   1d012:	60bb      	str	r3, [r7, #8]
   1d014:	e005      	b.n	1d022 <strlen+0x1e>
        len += 1;
   1d016:	68fb      	ldr	r3, [r7, #12]
   1d018:	3301      	adds	r3, #1
   1d01a:	60fb      	str	r3, [r7, #12]
    for (const char *s = str; *s; s++) {
   1d01c:	68bb      	ldr	r3, [r7, #8]
   1d01e:	3301      	adds	r3, #1
   1d020:	60bb      	str	r3, [r7, #8]
   1d022:	68bb      	ldr	r3, [r7, #8]
   1d024:	781b      	ldrb	r3, [r3, #0]
   1d026:	2b00      	cmp	r3, #0
   1d028:	d1f5      	bne.n	1d016 <strlen+0x12>
    }
    return len;
   1d02a:	68fb      	ldr	r3, [r7, #12]
}
   1d02c:	4618      	mov	r0, r3
   1d02e:	3714      	adds	r7, #20
   1d030:	46bd      	mov	sp, r7
   1d032:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d036:	4770      	bx	lr

0001d038 <strcmp>:

int strcmp(const char *s1, const char *s2) {
   1d038:	b480      	push	{r7}
   1d03a:	b085      	sub	sp, #20
   1d03c:	af00      	add	r7, sp, #0
   1d03e:	6078      	str	r0, [r7, #4]
   1d040:	6039      	str	r1, [r7, #0]
    while (*s1 && *s2) {
   1d042:	e016      	b.n	1d072 <strcmp+0x3a>
        char c1 = *s1++; // XXX UTF8 get char, next char
   1d044:	687b      	ldr	r3, [r7, #4]
   1d046:	1c5a      	adds	r2, r3, #1
   1d048:	607a      	str	r2, [r7, #4]
   1d04a:	781b      	ldrb	r3, [r3, #0]
   1d04c:	73fb      	strb	r3, [r7, #15]
        char c2 = *s2++; // XXX UTF8 get char, next char
   1d04e:	683b      	ldr	r3, [r7, #0]
   1d050:	1c5a      	adds	r2, r3, #1
   1d052:	603a      	str	r2, [r7, #0]
   1d054:	781b      	ldrb	r3, [r3, #0]
   1d056:	73bb      	strb	r3, [r7, #14]
        if (c1 < c2) return -1;
   1d058:	7bfa      	ldrb	r2, [r7, #15]
   1d05a:	7bbb      	ldrb	r3, [r7, #14]
   1d05c:	429a      	cmp	r2, r3
   1d05e:	d202      	bcs.n	1d066 <strcmp+0x2e>
   1d060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d064:	e01b      	b.n	1d09e <strcmp+0x66>
        else if (c1 > c2) return 1;
   1d066:	7bfa      	ldrb	r2, [r7, #15]
   1d068:	7bbb      	ldrb	r3, [r7, #14]
   1d06a:	429a      	cmp	r2, r3
   1d06c:	d901      	bls.n	1d072 <strcmp+0x3a>
   1d06e:	2301      	movs	r3, #1
   1d070:	e015      	b.n	1d09e <strcmp+0x66>
    while (*s1 && *s2) {
   1d072:	687b      	ldr	r3, [r7, #4]
   1d074:	781b      	ldrb	r3, [r3, #0]
   1d076:	2b00      	cmp	r3, #0
   1d078:	d003      	beq.n	1d082 <strcmp+0x4a>
   1d07a:	683b      	ldr	r3, [r7, #0]
   1d07c:	781b      	ldrb	r3, [r3, #0]
   1d07e:	2b00      	cmp	r3, #0
   1d080:	d1e0      	bne.n	1d044 <strcmp+0xc>
    }
    if (*s2) return -1;
   1d082:	683b      	ldr	r3, [r7, #0]
   1d084:	781b      	ldrb	r3, [r3, #0]
   1d086:	2b00      	cmp	r3, #0
   1d088:	d002      	beq.n	1d090 <strcmp+0x58>
   1d08a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d08e:	e006      	b.n	1d09e <strcmp+0x66>
    else if (*s1) return 1;
   1d090:	687b      	ldr	r3, [r7, #4]
   1d092:	781b      	ldrb	r3, [r3, #0]
   1d094:	2b00      	cmp	r3, #0
   1d096:	d001      	beq.n	1d09c <strcmp+0x64>
   1d098:	2301      	movs	r3, #1
   1d09a:	e000      	b.n	1d09e <strcmp+0x66>
    else return 0;
   1d09c:	2300      	movs	r3, #0
}
   1d09e:	4618      	mov	r0, r3
   1d0a0:	3714      	adds	r7, #20
   1d0a2:	46bd      	mov	sp, r7
   1d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d0a8:	4770      	bx	lr
   1d0aa:	bf00      	nop

0001d0ac <strncmp>:

int strncmp(const char *s1, const char *s2, size_t n) {
   1d0ac:	b480      	push	{r7}
   1d0ae:	b087      	sub	sp, #28
   1d0b0:	af00      	add	r7, sp, #0
   1d0b2:	60f8      	str	r0, [r7, #12]
   1d0b4:	60b9      	str	r1, [r7, #8]
   1d0b6:	607a      	str	r2, [r7, #4]
    while (*s1 && *s2 && n > 0) {
   1d0b8:	e019      	b.n	1d0ee <strncmp+0x42>
        char c1 = *s1++; // XXX UTF8 get char, next char
   1d0ba:	68fb      	ldr	r3, [r7, #12]
   1d0bc:	1c5a      	adds	r2, r3, #1
   1d0be:	60fa      	str	r2, [r7, #12]
   1d0c0:	781b      	ldrb	r3, [r3, #0]
   1d0c2:	75fb      	strb	r3, [r7, #23]
        char c2 = *s2++; // XXX UTF8 get char, next char
   1d0c4:	68bb      	ldr	r3, [r7, #8]
   1d0c6:	1c5a      	adds	r2, r3, #1
   1d0c8:	60ba      	str	r2, [r7, #8]
   1d0ca:	781b      	ldrb	r3, [r3, #0]
   1d0cc:	75bb      	strb	r3, [r7, #22]
        n--;
   1d0ce:	687b      	ldr	r3, [r7, #4]
   1d0d0:	3b01      	subs	r3, #1
   1d0d2:	607b      	str	r3, [r7, #4]
        if (c1 < c2) return -1;
   1d0d4:	7dfa      	ldrb	r2, [r7, #23]
   1d0d6:	7dbb      	ldrb	r3, [r7, #22]
   1d0d8:	429a      	cmp	r2, r3
   1d0da:	d202      	bcs.n	1d0e2 <strncmp+0x36>
   1d0dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d0e0:	e023      	b.n	1d12a <strncmp+0x7e>
        else if (c1 > c2) return 1;
   1d0e2:	7dfa      	ldrb	r2, [r7, #23]
   1d0e4:	7dbb      	ldrb	r3, [r7, #22]
   1d0e6:	429a      	cmp	r2, r3
   1d0e8:	d901      	bls.n	1d0ee <strncmp+0x42>
   1d0ea:	2301      	movs	r3, #1
   1d0ec:	e01d      	b.n	1d12a <strncmp+0x7e>
    while (*s1 && *s2 && n > 0) {
   1d0ee:	68fb      	ldr	r3, [r7, #12]
   1d0f0:	781b      	ldrb	r3, [r3, #0]
   1d0f2:	2b00      	cmp	r3, #0
   1d0f4:	d006      	beq.n	1d104 <strncmp+0x58>
   1d0f6:	68bb      	ldr	r3, [r7, #8]
   1d0f8:	781b      	ldrb	r3, [r3, #0]
   1d0fa:	2b00      	cmp	r3, #0
   1d0fc:	d002      	beq.n	1d104 <strncmp+0x58>
   1d0fe:	687b      	ldr	r3, [r7, #4]
   1d100:	2b00      	cmp	r3, #0
   1d102:	d1da      	bne.n	1d0ba <strncmp+0xe>
    }
    if (n == 0) return 0;
   1d104:	687b      	ldr	r3, [r7, #4]
   1d106:	2b00      	cmp	r3, #0
   1d108:	d101      	bne.n	1d10e <strncmp+0x62>
   1d10a:	2300      	movs	r3, #0
   1d10c:	e00d      	b.n	1d12a <strncmp+0x7e>
    else if (*s2) return -1;
   1d10e:	68bb      	ldr	r3, [r7, #8]
   1d110:	781b      	ldrb	r3, [r3, #0]
   1d112:	2b00      	cmp	r3, #0
   1d114:	d002      	beq.n	1d11c <strncmp+0x70>
   1d116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d11a:	e006      	b.n	1d12a <strncmp+0x7e>
    else if (*s1) return 1;
   1d11c:	68fb      	ldr	r3, [r7, #12]
   1d11e:	781b      	ldrb	r3, [r3, #0]
   1d120:	2b00      	cmp	r3, #0
   1d122:	d001      	beq.n	1d128 <strncmp+0x7c>
   1d124:	2301      	movs	r3, #1
   1d126:	e000      	b.n	1d12a <strncmp+0x7e>
    else return 0;
   1d128:	2300      	movs	r3, #0
}
   1d12a:	4618      	mov	r0, r3
   1d12c:	371c      	adds	r7, #28
   1d12e:	46bd      	mov	sp, r7
   1d130:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d134:	4770      	bx	lr
   1d136:	bf00      	nop

0001d138 <strcpy>:

char *strcpy(char *dest, const char *src) {
   1d138:	b480      	push	{r7}
   1d13a:	b085      	sub	sp, #20
   1d13c:	af00      	add	r7, sp, #0
   1d13e:	6078      	str	r0, [r7, #4]
   1d140:	6039      	str	r1, [r7, #0]
    char *d = dest;
   1d142:	687b      	ldr	r3, [r7, #4]
   1d144:	60fb      	str	r3, [r7, #12]
    while (*src) {
   1d146:	e007      	b.n	1d158 <strcpy+0x20>
        *d++ = *src++;
   1d148:	68fb      	ldr	r3, [r7, #12]
   1d14a:	1c5a      	adds	r2, r3, #1
   1d14c:	60fa      	str	r2, [r7, #12]
   1d14e:	683a      	ldr	r2, [r7, #0]
   1d150:	1c51      	adds	r1, r2, #1
   1d152:	6039      	str	r1, [r7, #0]
   1d154:	7812      	ldrb	r2, [r2, #0]
   1d156:	701a      	strb	r2, [r3, #0]
    while (*src) {
   1d158:	683b      	ldr	r3, [r7, #0]
   1d15a:	781b      	ldrb	r3, [r3, #0]
   1d15c:	2b00      	cmp	r3, #0
   1d15e:	d1f3      	bne.n	1d148 <strcpy+0x10>
    }
    *d = '\0';
   1d160:	68fb      	ldr	r3, [r7, #12]
   1d162:	2200      	movs	r2, #0
   1d164:	701a      	strb	r2, [r3, #0]
    return dest;
   1d166:	687b      	ldr	r3, [r7, #4]
}
   1d168:	4618      	mov	r0, r3
   1d16a:	3714      	adds	r7, #20
   1d16c:	46bd      	mov	sp, r7
   1d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d172:	4770      	bx	lr

0001d174 <stpcpy>:

// needed because gcc optimises strcpy + strcat to this
char *stpcpy(char *dest, const char *src) {
   1d174:	b480      	push	{r7}
   1d176:	b083      	sub	sp, #12
   1d178:	af00      	add	r7, sp, #0
   1d17a:	6078      	str	r0, [r7, #4]
   1d17c:	6039      	str	r1, [r7, #0]
    while (*src) {
   1d17e:	e007      	b.n	1d190 <stpcpy+0x1c>
        *dest++ = *src++;
   1d180:	687b      	ldr	r3, [r7, #4]
   1d182:	1c5a      	adds	r2, r3, #1
   1d184:	607a      	str	r2, [r7, #4]
   1d186:	683a      	ldr	r2, [r7, #0]
   1d188:	1c51      	adds	r1, r2, #1
   1d18a:	6039      	str	r1, [r7, #0]
   1d18c:	7812      	ldrb	r2, [r2, #0]
   1d18e:	701a      	strb	r2, [r3, #0]
    while (*src) {
   1d190:	683b      	ldr	r3, [r7, #0]
   1d192:	781b      	ldrb	r3, [r3, #0]
   1d194:	2b00      	cmp	r3, #0
   1d196:	d1f3      	bne.n	1d180 <stpcpy+0xc>
    }
    *dest = '\0';
   1d198:	687b      	ldr	r3, [r7, #4]
   1d19a:	2200      	movs	r2, #0
   1d19c:	701a      	strb	r2, [r3, #0]
    return dest;
   1d19e:	687b      	ldr	r3, [r7, #4]
}
   1d1a0:	4618      	mov	r0, r3
   1d1a2:	370c      	adds	r7, #12
   1d1a4:	46bd      	mov	sp, r7
   1d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d1aa:	4770      	bx	lr

0001d1ac <strcat>:

char *strcat(char *dest, const char *src) {
   1d1ac:	b480      	push	{r7}
   1d1ae:	b085      	sub	sp, #20
   1d1b0:	af00      	add	r7, sp, #0
   1d1b2:	6078      	str	r0, [r7, #4]
   1d1b4:	6039      	str	r1, [r7, #0]
    char *d = dest;
   1d1b6:	687b      	ldr	r3, [r7, #4]
   1d1b8:	60fb      	str	r3, [r7, #12]
    while (*d) {
   1d1ba:	e002      	b.n	1d1c2 <strcat+0x16>
        d++;
   1d1bc:	68fb      	ldr	r3, [r7, #12]
   1d1be:	3301      	adds	r3, #1
   1d1c0:	60fb      	str	r3, [r7, #12]
    while (*d) {
   1d1c2:	68fb      	ldr	r3, [r7, #12]
   1d1c4:	781b      	ldrb	r3, [r3, #0]
   1d1c6:	2b00      	cmp	r3, #0
   1d1c8:	d1f8      	bne.n	1d1bc <strcat+0x10>
    }
    while (*src) {
   1d1ca:	e007      	b.n	1d1dc <strcat+0x30>
        *d++ = *src++;
   1d1cc:	68fb      	ldr	r3, [r7, #12]
   1d1ce:	1c5a      	adds	r2, r3, #1
   1d1d0:	60fa      	str	r2, [r7, #12]
   1d1d2:	683a      	ldr	r2, [r7, #0]
   1d1d4:	1c51      	adds	r1, r2, #1
   1d1d6:	6039      	str	r1, [r7, #0]
   1d1d8:	7812      	ldrb	r2, [r2, #0]
   1d1da:	701a      	strb	r2, [r3, #0]
    while (*src) {
   1d1dc:	683b      	ldr	r3, [r7, #0]
   1d1de:	781b      	ldrb	r3, [r3, #0]
   1d1e0:	2b00      	cmp	r3, #0
   1d1e2:	d1f3      	bne.n	1d1cc <strcat+0x20>
    }
    *d = '\0';
   1d1e4:	68fb      	ldr	r3, [r7, #12]
   1d1e6:	2200      	movs	r2, #0
   1d1e8:	701a      	strb	r2, [r3, #0]
    return dest;
   1d1ea:	687b      	ldr	r3, [r7, #4]
}
   1d1ec:	4618      	mov	r0, r3
   1d1ee:	3714      	adds	r7, #20
   1d1f0:	46bd      	mov	sp, r7
   1d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d1f6:	4770      	bx	lr

0001d1f8 <strchr>:

// Public Domain implementation of strchr from:
// http://en.wikibooks.org/wiki/C_Programming/Strings#The_strchr_function
char *strchr(const char *s, int c)
{
   1d1f8:	b480      	push	{r7}
   1d1fa:	b083      	sub	sp, #12
   1d1fc:	af00      	add	r7, sp, #0
   1d1fe:	6078      	str	r0, [r7, #4]
   1d200:	6039      	str	r1, [r7, #0]
    /* Scan s for the character.  When this loop is finished,
       s will either point to the end of the string or the
       character we were looking for.  */
    while (*s != '\0' && *s != (char)c)
   1d202:	e002      	b.n	1d20a <strchr+0x12>
        s++;
   1d204:	687b      	ldr	r3, [r7, #4]
   1d206:	3301      	adds	r3, #1
   1d208:	607b      	str	r3, [r7, #4]
    while (*s != '\0' && *s != (char)c)
   1d20a:	687b      	ldr	r3, [r7, #4]
   1d20c:	781b      	ldrb	r3, [r3, #0]
   1d20e:	2b00      	cmp	r3, #0
   1d210:	d005      	beq.n	1d21e <strchr+0x26>
   1d212:	687b      	ldr	r3, [r7, #4]
   1d214:	781a      	ldrb	r2, [r3, #0]
   1d216:	683b      	ldr	r3, [r7, #0]
   1d218:	b2db      	uxtb	r3, r3
   1d21a:	429a      	cmp	r2, r3
   1d21c:	d1f2      	bne.n	1d204 <strchr+0xc>
    return ((*s == c) ? (char *) s : 0);
   1d21e:	687b      	ldr	r3, [r7, #4]
   1d220:	781b      	ldrb	r3, [r3, #0]
   1d222:	461a      	mov	r2, r3
   1d224:	683b      	ldr	r3, [r7, #0]
   1d226:	429a      	cmp	r2, r3
   1d228:	d101      	bne.n	1d22e <strchr+0x36>
   1d22a:	687b      	ldr	r3, [r7, #4]
   1d22c:	e000      	b.n	1d230 <strchr+0x38>
   1d22e:	2300      	movs	r3, #0
}
   1d230:	4618      	mov	r0, r3
   1d232:	370c      	adds	r7, #12
   1d234:	46bd      	mov	sp, r7
   1d236:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d23a:	4770      	bx	lr

0001d23c <strstr>:


// Public Domain implementation of strstr from:
// http://en.wikibooks.org/wiki/C_Programming/Strings#The_strstr_function
char *strstr(const char *haystack, const char *needle)
{
   1d23c:	b580      	push	{r7, lr}
   1d23e:	b084      	sub	sp, #16
   1d240:	af00      	add	r7, sp, #0
   1d242:	6078      	str	r0, [r7, #4]
   1d244:	6039      	str	r1, [r7, #0]
    size_t needlelen;
    /* Check for the null needle case.  */
    if (*needle == '\0')
   1d246:	683b      	ldr	r3, [r7, #0]
   1d248:	781b      	ldrb	r3, [r3, #0]
   1d24a:	2b00      	cmp	r3, #0
   1d24c:	d101      	bne.n	1d252 <strstr+0x16>
        return (char *) haystack;
   1d24e:	687b      	ldr	r3, [r7, #4]
   1d250:	e01c      	b.n	1d28c <strstr+0x50>
    needlelen = strlen(needle);
   1d252:	6838      	ldr	r0, [r7, #0]
   1d254:	f7ff fed6 	bl	1d004 <strlen>
   1d258:	60f8      	str	r0, [r7, #12]
    for (; (haystack = strchr(haystack, *needle)) != 0; haystack++)
   1d25a:	e00c      	b.n	1d276 <strstr+0x3a>
        if (strncmp(haystack, needle, needlelen) == 0)
   1d25c:	68fa      	ldr	r2, [r7, #12]
   1d25e:	6839      	ldr	r1, [r7, #0]
   1d260:	6878      	ldr	r0, [r7, #4]
   1d262:	f7ff ff23 	bl	1d0ac <strncmp>
   1d266:	4603      	mov	r3, r0
   1d268:	2b00      	cmp	r3, #0
   1d26a:	d101      	bne.n	1d270 <strstr+0x34>
            return (char *) haystack;
   1d26c:	687b      	ldr	r3, [r7, #4]
   1d26e:	e00d      	b.n	1d28c <strstr+0x50>
    for (; (haystack = strchr(haystack, *needle)) != 0; haystack++)
   1d270:	687b      	ldr	r3, [r7, #4]
   1d272:	3301      	adds	r3, #1
   1d274:	607b      	str	r3, [r7, #4]
   1d276:	683b      	ldr	r3, [r7, #0]
   1d278:	781b      	ldrb	r3, [r3, #0]
   1d27a:	4619      	mov	r1, r3
   1d27c:	6878      	ldr	r0, [r7, #4]
   1d27e:	f7ff ffbb 	bl	1d1f8 <strchr>
   1d282:	6078      	str	r0, [r7, #4]
   1d284:	687b      	ldr	r3, [r7, #4]
   1d286:	2b00      	cmp	r3, #0
   1d288:	d1e8      	bne.n	1d25c <strstr+0x20>
    return 0;
   1d28a:	2300      	movs	r3, #0
}
   1d28c:	4618      	mov	r0, r3
   1d28e:	3710      	adds	r7, #16
   1d290:	46bd      	mov	sp, r7
   1d292:	bd80      	pop	{r7, pc}

0001d294 <vstr_len>:
   1d294:	b480      	push	{r7}
   1d296:	b083      	sub	sp, #12
   1d298:	af00      	add	r7, sp, #0
   1d29a:	6078      	str	r0, [r7, #4]
   1d29c:	687b      	ldr	r3, [r7, #4]
   1d29e:	685b      	ldr	r3, [r3, #4]
   1d2a0:	4618      	mov	r0, r3
   1d2a2:	370c      	adds	r7, #12
   1d2a4:	46bd      	mov	sp, r7
   1d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d2aa:	4770      	bx	lr

0001d2ac <readline_init0>:

#define READLINE_HIST_SIZE (MP_ARRAY_SIZE(MP_STATE_PORT(readline_hist)))

enum { ESEQ_NONE, ESEQ_ESC, ESEQ_ESC_BRACKET, ESEQ_ESC_BRACKET_DIGIT, ESEQ_ESC_O };

void readline_init0(void) {
   1d2ac:	b580      	push	{r7, lr}
   1d2ae:	af00      	add	r7, sp, #0
    memset(MP_STATE_PORT(readline_hist), 0, READLINE_HIST_SIZE * sizeof(const char*));
   1d2b0:	2220      	movs	r2, #32
   1d2b2:	2100      	movs	r1, #0
   1d2b4:	4802      	ldr	r0, [pc, #8]	; (1d2c0 <readline_init0+0x14>)
   1d2b6:	f7ff fe07 	bl	1cec8 <memset>
}
   1d2ba:	bf00      	nop
   1d2bc:	bd80      	pop	{r7, pc}
   1d2be:	bf00      	nop
   1d2c0:	20001358 	.word	0x20001358

0001d2c4 <str_dup_maybe>:

STATIC char *str_dup_maybe(const char *str) {
   1d2c4:	b580      	push	{r7, lr}
   1d2c6:	b084      	sub	sp, #16
   1d2c8:	af00      	add	r7, sp, #0
   1d2ca:	6078      	str	r0, [r7, #4]
    uint32_t len = strlen(str);
   1d2cc:	6878      	ldr	r0, [r7, #4]
   1d2ce:	f7ff fe99 	bl	1d004 <strlen>
   1d2d2:	60f8      	str	r0, [r7, #12]
    char *s2 = m_new_maybe(char, len + 1);
   1d2d4:	68fb      	ldr	r3, [r7, #12]
   1d2d6:	3301      	adds	r3, #1
   1d2d8:	4618      	mov	r0, r3
   1d2da:	f7e3 f837 	bl	34c <m_malloc_maybe>
   1d2de:	60b8      	str	r0, [r7, #8]
    if (s2 == NULL) {
   1d2e0:	68bb      	ldr	r3, [r7, #8]
   1d2e2:	2b00      	cmp	r3, #0
   1d2e4:	d101      	bne.n	1d2ea <str_dup_maybe+0x26>
        return NULL;
   1d2e6:	2300      	movs	r3, #0
   1d2e8:	e007      	b.n	1d2fa <str_dup_maybe+0x36>
    }
    memcpy(s2, str, len + 1);
   1d2ea:	68fb      	ldr	r3, [r7, #12]
   1d2ec:	3301      	adds	r3, #1
   1d2ee:	461a      	mov	r2, r3
   1d2f0:	6879      	ldr	r1, [r7, #4]
   1d2f2:	68b8      	ldr	r0, [r7, #8]
   1d2f4:	f7ff fd4c 	bl	1cd90 <memcpy>
    return s2;
   1d2f8:	68bb      	ldr	r3, [r7, #8]
}
   1d2fa:	4618      	mov	r0, r3
   1d2fc:	3710      	adds	r7, #16
   1d2fe:	46bd      	mov	sp, r7
   1d300:	bd80      	pop	{r7, pc}
   1d302:	bf00      	nop

0001d304 <mp_hal_move_cursor_back>:
#define MICROPY_HAL_HAS_VT100 (1)
#endif

// ...and provide the implementation using them
#if MICROPY_HAL_HAS_VT100
STATIC void mp_hal_move_cursor_back(uint pos) {
   1d304:	b580      	push	{r7, lr}
   1d306:	b086      	sub	sp, #24
   1d308:	af00      	add	r7, sp, #0
   1d30a:	6078      	str	r0, [r7, #4]
    if (pos <= 4) {
   1d30c:	687b      	ldr	r3, [r7, #4]
   1d30e:	2b04      	cmp	r3, #4
   1d310:	d804      	bhi.n	1d31c <mp_hal_move_cursor_back+0x18>
        // fast path for most common case of 1 step back
        mp_hal_stdout_tx_strn("\b\b\b\b", pos);
   1d312:	6879      	ldr	r1, [r7, #4]
   1d314:	4810      	ldr	r0, [pc, #64]	; (1d358 <mp_hal_move_cursor_back+0x54>)
   1d316:	f7fe fb5b 	bl	1b9d0 <mp_hal_stdout_tx_strn>
        if (n > 0) {
            vt100_command[n] = 'D'; // replace null char
            mp_hal_stdout_tx_strn(vt100_command, n + 1);
        }
    }
}
   1d31a:	e019      	b.n	1d350 <mp_hal_move_cursor_back+0x4c>
        int n = snprintf(&vt100_command[0], sizeof(vt100_command), "\x1b[%u", pos);
   1d31c:	f107 000c 	add.w	r0, r7, #12
   1d320:	687b      	ldr	r3, [r7, #4]
   1d322:	4a0e      	ldr	r2, [pc, #56]	; (1d35c <mp_hal_move_cursor_back+0x58>)
   1d324:	2106      	movs	r1, #6
   1d326:	f7fe f971 	bl	1b60c <snprintf>
   1d32a:	6178      	str	r0, [r7, #20]
        if (n > 0) {
   1d32c:	697b      	ldr	r3, [r7, #20]
   1d32e:	2b00      	cmp	r3, #0
   1d330:	dd0e      	ble.n	1d350 <mp_hal_move_cursor_back+0x4c>
            vt100_command[n] = 'D'; // replace null char
   1d332:	f107 020c 	add.w	r2, r7, #12
   1d336:	697b      	ldr	r3, [r7, #20]
   1d338:	4413      	add	r3, r2
   1d33a:	2244      	movs	r2, #68	; 0x44
   1d33c:	701a      	strb	r2, [r3, #0]
            mp_hal_stdout_tx_strn(vt100_command, n + 1);
   1d33e:	697b      	ldr	r3, [r7, #20]
   1d340:	3301      	adds	r3, #1
   1d342:	461a      	mov	r2, r3
   1d344:	f107 030c 	add.w	r3, r7, #12
   1d348:	4611      	mov	r1, r2
   1d34a:	4618      	mov	r0, r3
   1d34c:	f7fe fb40 	bl	1b9d0 <mp_hal_stdout_tx_strn>
}
   1d350:	bf00      	nop
   1d352:	3718      	adds	r7, #24
   1d354:	46bd      	mov	sp, r7
   1d356:	bd80      	pop	{r7, pc}
   1d358:	00025d38 	.word	0x00025d38
   1d35c:	00025d40 	.word	0x00025d40

0001d360 <mp_hal_erase_line_from_cursor>:

STATIC void mp_hal_erase_line_from_cursor(uint n_chars_to_erase) {
   1d360:	b580      	push	{r7, lr}
   1d362:	b082      	sub	sp, #8
   1d364:	af00      	add	r7, sp, #0
   1d366:	6078      	str	r0, [r7, #4]
    (void)n_chars_to_erase;
    mp_hal_stdout_tx_strn("\x1b[K", 3);
   1d368:	2103      	movs	r1, #3
   1d36a:	4803      	ldr	r0, [pc, #12]	; (1d378 <mp_hal_erase_line_from_cursor+0x18>)
   1d36c:	f7fe fb30 	bl	1b9d0 <mp_hal_stdout_tx_strn>
}
   1d370:	bf00      	nop
   1d372:	3708      	adds	r7, #8
   1d374:	46bd      	mov	sp, r7
   1d376:	bd80      	pop	{r7, pc}
   1d378:	00025d48 	.word	0x00025d48

0001d37c <readline_process_char>:
    const char *prompt;
} readline_t;

STATIC readline_t rl;

int readline_process_char(int c) {
   1d37c:	b580      	push	{r7, lr}
   1d37e:	b08c      	sub	sp, #48	; 0x30
   1d380:	af00      	add	r7, sp, #0
   1d382:	6078      	str	r0, [r7, #4]
    size_t last_line_len = rl.line->len;
   1d384:	4b8c      	ldr	r3, [pc, #560]	; (1d5b8 <readline_process_char+0x23c>)
   1d386:	681b      	ldr	r3, [r3, #0]
   1d388:	685b      	ldr	r3, [r3, #4]
   1d38a:	617b      	str	r3, [r7, #20]
    int redraw_step_back = 0;
   1d38c:	2300      	movs	r3, #0
   1d38e:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool redraw_from_cursor = false;
   1d390:	2300      	movs	r3, #0
   1d392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    int redraw_step_forward = 0;
   1d396:	2300      	movs	r3, #0
   1d398:	627b      	str	r3, [r7, #36]	; 0x24
    if (rl.escape_seq == ESEQ_NONE) {
   1d39a:	4b87      	ldr	r3, [pc, #540]	; (1d5b8 <readline_process_char+0x23c>)
   1d39c:	689b      	ldr	r3, [r3, #8]
   1d39e:	2b00      	cmp	r3, #0
   1d3a0:	f040 80e1 	bne.w	1d566 <readline_process_char+0x1ea>
        if (CHAR_CTRL_A <= c && c <= CHAR_CTRL_E && vstr_len(rl.line) == rl.orig_line_len) {
   1d3a4:	687b      	ldr	r3, [r7, #4]
   1d3a6:	2b00      	cmp	r3, #0
   1d3a8:	dd0e      	ble.n	1d3c8 <readline_process_char+0x4c>
   1d3aa:	687b      	ldr	r3, [r7, #4]
   1d3ac:	2b05      	cmp	r3, #5
   1d3ae:	dc0b      	bgt.n	1d3c8 <readline_process_char+0x4c>
   1d3b0:	4b81      	ldr	r3, [pc, #516]	; (1d5b8 <readline_process_char+0x23c>)
   1d3b2:	681b      	ldr	r3, [r3, #0]
   1d3b4:	4618      	mov	r0, r3
   1d3b6:	f7ff ff6d 	bl	1d294 <vstr_len>
   1d3ba:	4602      	mov	r2, r0
   1d3bc:	4b7e      	ldr	r3, [pc, #504]	; (1d5b8 <readline_process_char+0x23c>)
   1d3be:	685b      	ldr	r3, [r3, #4]
   1d3c0:	429a      	cmp	r2, r3
   1d3c2:	d101      	bne.n	1d3c8 <readline_process_char+0x4c>
            // control character with empty line
            return c;
   1d3c4:	687b      	ldr	r3, [r7, #4]
   1d3c6:	e245      	b.n	1d854 <readline_process_char+0x4d8>
        } else if (c == CHAR_CTRL_A) {
   1d3c8:	687b      	ldr	r3, [r7, #4]
   1d3ca:	2b01      	cmp	r3, #1
   1d3cc:	f000 819e 	beq.w	1d70c <readline_process_char+0x390>
        #if MICROPY_REPL_EMACS_KEYS
        } else if (c == CHAR_CTRL_B) {
            // CTRL-B with non-empty line is go-back-one-char
            goto left_arrow_key;
        #endif
        } else if (c == CHAR_CTRL_C) {
   1d3d0:	687b      	ldr	r3, [r7, #4]
   1d3d2:	2b03      	cmp	r3, #3
   1d3d4:	d101      	bne.n	1d3da <readline_process_char+0x5e>
            // CTRL-C with non-empty line is cancel
            return c;
   1d3d6:	687b      	ldr	r3, [r7, #4]
   1d3d8:	e23c      	b.n	1d854 <readline_process_char+0x4d8>
        #if MICROPY_REPL_EMACS_KEYS
        } else if (c == CHAR_CTRL_D) {
            // CTRL-D with non-empty line is delete-at-cursor
            goto delete_key;
        #endif
        } else if (c == CHAR_CTRL_E) {
   1d3da:	687b      	ldr	r3, [r7, #4]
   1d3dc:	2b05      	cmp	r3, #5
   1d3de:	f000 81aa 	beq.w	1d736 <readline_process_char+0x3ba>
            vstr_cut_out_bytes(rl.line, rl.orig_line_len, rl.cursor_pos - rl.orig_line_len);
            // set redraw parameters
            redraw_step_back = rl.cursor_pos - rl.orig_line_len;
            redraw_from_cursor = true;
        #endif
        } else if (c == '\r') {
   1d3e2:	687b      	ldr	r3, [r7, #4]
   1d3e4:	2b0d      	cmp	r3, #13
   1d3e6:	d110      	bne.n	1d40a <readline_process_char+0x8e>
            // newline
            mp_hal_stdout_tx_str("\r\n");
   1d3e8:	4874      	ldr	r0, [pc, #464]	; (1d5bc <readline_process_char+0x240>)
   1d3ea:	f7ff fa73 	bl	1c8d4 <mp_hal_stdout_tx_str>
            readline_push_history(vstr_null_terminated_str(rl.line) + rl.orig_line_len);
   1d3ee:	4b72      	ldr	r3, [pc, #456]	; (1d5b8 <readline_process_char+0x23c>)
   1d3f0:	681b      	ldr	r3, [r3, #0]
   1d3f2:	4618      	mov	r0, r3
   1d3f4:	f7e4 f988 	bl	1708 <vstr_null_terminated_str>
   1d3f8:	4602      	mov	r2, r0
   1d3fa:	4b6f      	ldr	r3, [pc, #444]	; (1d5b8 <readline_process_char+0x23c>)
   1d3fc:	685b      	ldr	r3, [r3, #4]
   1d3fe:	4413      	add	r3, r2
   1d400:	4618      	mov	r0, r3
   1d402:	f000 fb19 	bl	1da38 <readline_push_history>
            return 0;
   1d406:	2300      	movs	r3, #0
   1d408:	e224      	b.n	1d854 <readline_process_char+0x4d8>
        } else if (c == 27) {
   1d40a:	687b      	ldr	r3, [r7, #4]
   1d40c:	2b1b      	cmp	r3, #27
   1d40e:	d103      	bne.n	1d418 <readline_process_char+0x9c>
            // escape sequence
            rl.escape_seq = ESEQ_ESC;
   1d410:	4b69      	ldr	r3, [pc, #420]	; (1d5b8 <readline_process_char+0x23c>)
   1d412:	2201      	movs	r2, #1
   1d414:	609a      	str	r2, [r3, #8]
   1d416:	e1c3      	b.n	1d7a0 <readline_process_char+0x424>
        } else if (c == 8 || c == 127) {
   1d418:	687b      	ldr	r3, [r7, #4]
   1d41a:	2b08      	cmp	r3, #8
   1d41c:	d002      	beq.n	1d424 <readline_process_char+0xa8>
   1d41e:	687b      	ldr	r3, [r7, #4]
   1d420:	2b7f      	cmp	r3, #127	; 0x7f
   1d422:	d13a      	bne.n	1d49a <readline_process_char+0x11e>
            // backspace/delete
            if (rl.cursor_pos > rl.orig_line_len) {
   1d424:	4b64      	ldr	r3, [pc, #400]	; (1d5b8 <readline_process_char+0x23c>)
   1d426:	691a      	ldr	r2, [r3, #16]
   1d428:	4b63      	ldr	r3, [pc, #396]	; (1d5b8 <readline_process_char+0x23c>)
   1d42a:	685b      	ldr	r3, [r3, #4]
   1d42c:	429a      	cmp	r2, r3
   1d42e:	f240 81b7 	bls.w	1d7a0 <readline_process_char+0x424>
                // work out how many chars to backspace
                #if MICROPY_REPL_AUTO_INDENT
                int nspace = 0;
   1d432:	2300      	movs	r3, #0
   1d434:	623b      	str	r3, [r7, #32]
                for (size_t i = rl.orig_line_len; i < rl.cursor_pos; i++) {
   1d436:	4b60      	ldr	r3, [pc, #384]	; (1d5b8 <readline_process_char+0x23c>)
   1d438:	685b      	ldr	r3, [r3, #4]
   1d43a:	61fb      	str	r3, [r7, #28]
   1d43c:	e010      	b.n	1d460 <readline_process_char+0xe4>
                    if (rl.line->buf[i] != ' ') {
   1d43e:	4b5e      	ldr	r3, [pc, #376]	; (1d5b8 <readline_process_char+0x23c>)
   1d440:	681b      	ldr	r3, [r3, #0]
   1d442:	689a      	ldr	r2, [r3, #8]
   1d444:	69fb      	ldr	r3, [r7, #28]
   1d446:	4413      	add	r3, r2
   1d448:	781b      	ldrb	r3, [r3, #0]
   1d44a:	2b20      	cmp	r3, #32
   1d44c:	d002      	beq.n	1d454 <readline_process_char+0xd8>
                        nspace = 0;
   1d44e:	2300      	movs	r3, #0
   1d450:	623b      	str	r3, [r7, #32]
                        break;
   1d452:	e00a      	b.n	1d46a <readline_process_char+0xee>
                    }
                    nspace += 1;
   1d454:	6a3b      	ldr	r3, [r7, #32]
   1d456:	3301      	adds	r3, #1
   1d458:	623b      	str	r3, [r7, #32]
                for (size_t i = rl.orig_line_len; i < rl.cursor_pos; i++) {
   1d45a:	69fb      	ldr	r3, [r7, #28]
   1d45c:	3301      	adds	r3, #1
   1d45e:	61fb      	str	r3, [r7, #28]
   1d460:	4b55      	ldr	r3, [pc, #340]	; (1d5b8 <readline_process_char+0x23c>)
   1d462:	691a      	ldr	r2, [r3, #16]
   1d464:	69fb      	ldr	r3, [r7, #28]
   1d466:	429a      	cmp	r2, r3
   1d468:	d8e9      	bhi.n	1d43e <readline_process_char+0xc2>
                }
                if (nspace < 4) {
   1d46a:	6a3b      	ldr	r3, [r7, #32]
   1d46c:	2b03      	cmp	r3, #3
   1d46e:	dc02      	bgt.n	1d476 <readline_process_char+0xfa>
                    nspace = 1;
   1d470:	2301      	movs	r3, #1
   1d472:	623b      	str	r3, [r7, #32]
   1d474:	e001      	b.n	1d47a <readline_process_char+0xfe>
                } else {
                    nspace = 4;
   1d476:	2304      	movs	r3, #4
   1d478:	623b      	str	r3, [r7, #32]
                #else
                int nspace = 1;
                #endif

                // do the backspace
                vstr_cut_out_bytes(rl.line, rl.cursor_pos - nspace, nspace);
   1d47a:	4b4f      	ldr	r3, [pc, #316]	; (1d5b8 <readline_process_char+0x23c>)
   1d47c:	6818      	ldr	r0, [r3, #0]
   1d47e:	4b4e      	ldr	r3, [pc, #312]	; (1d5b8 <readline_process_char+0x23c>)
   1d480:	691a      	ldr	r2, [r3, #16]
   1d482:	6a3b      	ldr	r3, [r7, #32]
   1d484:	1ad3      	subs	r3, r2, r3
   1d486:	6a3a      	ldr	r2, [r7, #32]
   1d488:	4619      	mov	r1, r3
   1d48a:	f7e4 fa2f 	bl	18ec <vstr_cut_out_bytes>
                // set redraw parameters
                redraw_step_back = nspace;
   1d48e:	6a3b      	ldr	r3, [r7, #32]
   1d490:	62fb      	str	r3, [r7, #44]	; 0x2c
                redraw_from_cursor = true;
   1d492:	2301      	movs	r3, #1
   1d494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if (rl.cursor_pos > rl.orig_line_len) {
   1d498:	e182      	b.n	1d7a0 <readline_process_char+0x424>
            }
        #if MICROPY_HELPER_REPL
        } else if (c == 9) {
   1d49a:	687b      	ldr	r3, [r7, #4]
   1d49c:	2b09      	cmp	r3, #9
   1d49e:	d14c      	bne.n	1d53a <readline_process_char+0x1be>
            // tab magic
            const char *compl_str;
            size_t compl_len = mp_repl_autocomplete(rl.line->buf + rl.orig_line_len, rl.cursor_pos - rl.orig_line_len, &mp_plat_print, &compl_str);
   1d4a0:	4b45      	ldr	r3, [pc, #276]	; (1d5b8 <readline_process_char+0x23c>)
   1d4a2:	681b      	ldr	r3, [r3, #0]
   1d4a4:	689a      	ldr	r2, [r3, #8]
   1d4a6:	4b44      	ldr	r3, [pc, #272]	; (1d5b8 <readline_process_char+0x23c>)
   1d4a8:	685b      	ldr	r3, [r3, #4]
   1d4aa:	18d0      	adds	r0, r2, r3
   1d4ac:	4b42      	ldr	r3, [pc, #264]	; (1d5b8 <readline_process_char+0x23c>)
   1d4ae:	691a      	ldr	r2, [r3, #16]
   1d4b0:	4b41      	ldr	r3, [pc, #260]	; (1d5b8 <readline_process_char+0x23c>)
   1d4b2:	685b      	ldr	r3, [r3, #4]
   1d4b4:	1ad1      	subs	r1, r2, r3
   1d4b6:	f107 030c 	add.w	r3, r7, #12
   1d4ba:	4a41      	ldr	r2, [pc, #260]	; (1d5c0 <readline_process_char+0x244>)
   1d4bc:	f7fd fdfe 	bl	1b0bc <mp_repl_autocomplete>
   1d4c0:	6138      	str	r0, [r7, #16]
            if (compl_len == 0) {
   1d4c2:	693b      	ldr	r3, [r7, #16]
   1d4c4:	2b00      	cmp	r3, #0
   1d4c6:	f000 816b 	beq.w	1d7a0 <readline_process_char+0x424>
                // no match
            } else if (compl_len == (size_t)(-1)) {
   1d4ca:	693b      	ldr	r3, [r7, #16]
   1d4cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1d4d0:	d116      	bne.n	1d500 <readline_process_char+0x184>
                // many matches
                mp_hal_stdout_tx_str(rl.prompt);
   1d4d2:	4b39      	ldr	r3, [pc, #228]	; (1d5b8 <readline_process_char+0x23c>)
   1d4d4:	699b      	ldr	r3, [r3, #24]
   1d4d6:	4618      	mov	r0, r3
   1d4d8:	f7ff f9fc 	bl	1c8d4 <mp_hal_stdout_tx_str>
                mp_hal_stdout_tx_strn(rl.line->buf + rl.orig_line_len, rl.cursor_pos - rl.orig_line_len);
   1d4dc:	4b36      	ldr	r3, [pc, #216]	; (1d5b8 <readline_process_char+0x23c>)
   1d4de:	681b      	ldr	r3, [r3, #0]
   1d4e0:	689a      	ldr	r2, [r3, #8]
   1d4e2:	4b35      	ldr	r3, [pc, #212]	; (1d5b8 <readline_process_char+0x23c>)
   1d4e4:	685b      	ldr	r3, [r3, #4]
   1d4e6:	18d0      	adds	r0, r2, r3
   1d4e8:	4b33      	ldr	r3, [pc, #204]	; (1d5b8 <readline_process_char+0x23c>)
   1d4ea:	691a      	ldr	r2, [r3, #16]
   1d4ec:	4b32      	ldr	r3, [pc, #200]	; (1d5b8 <readline_process_char+0x23c>)
   1d4ee:	685b      	ldr	r3, [r3, #4]
   1d4f0:	1ad3      	subs	r3, r2, r3
   1d4f2:	4619      	mov	r1, r3
   1d4f4:	f7fe fa6c 	bl	1b9d0 <mp_hal_stdout_tx_strn>
                redraw_from_cursor = true;
   1d4f8:	2301      	movs	r3, #1
   1d4fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   1d4fe:	e14f      	b.n	1d7a0 <readline_process_char+0x424>
            } else {
                // one match
                for (size_t i = 0; i < compl_len; ++i) {
   1d500:	2300      	movs	r3, #0
   1d502:	61bb      	str	r3, [r7, #24]
   1d504:	e00f      	b.n	1d526 <readline_process_char+0x1aa>
                    vstr_ins_byte(rl.line, rl.cursor_pos + i, *compl_str++);
   1d506:	4b2c      	ldr	r3, [pc, #176]	; (1d5b8 <readline_process_char+0x23c>)
   1d508:	6818      	ldr	r0, [r3, #0]
   1d50a:	4b2b      	ldr	r3, [pc, #172]	; (1d5b8 <readline_process_char+0x23c>)
   1d50c:	691a      	ldr	r2, [r3, #16]
   1d50e:	69bb      	ldr	r3, [r7, #24]
   1d510:	18d1      	adds	r1, r2, r3
   1d512:	68fb      	ldr	r3, [r7, #12]
   1d514:	1c5a      	adds	r2, r3, #1
   1d516:	60fa      	str	r2, [r7, #12]
   1d518:	781b      	ldrb	r3, [r3, #0]
   1d51a:	461a      	mov	r2, r3
   1d51c:	f7e4 f996 	bl	184c <vstr_ins_byte>
                for (size_t i = 0; i < compl_len; ++i) {
   1d520:	69bb      	ldr	r3, [r7, #24]
   1d522:	3301      	adds	r3, #1
   1d524:	61bb      	str	r3, [r7, #24]
   1d526:	69ba      	ldr	r2, [r7, #24]
   1d528:	693b      	ldr	r3, [r7, #16]
   1d52a:	429a      	cmp	r2, r3
   1d52c:	d3eb      	bcc.n	1d506 <readline_process_char+0x18a>
                }
                // set redraw parameters
                redraw_from_cursor = true;
   1d52e:	2301      	movs	r3, #1
   1d530:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                redraw_step_forward = compl_len;
   1d534:	693b      	ldr	r3, [r7, #16]
   1d536:	627b      	str	r3, [r7, #36]	; 0x24
   1d538:	e132      	b.n	1d7a0 <readline_process_char+0x424>
            }
        #endif
        } else if (32 <= c && c <= 126) {
   1d53a:	687b      	ldr	r3, [r7, #4]
   1d53c:	2b1f      	cmp	r3, #31
   1d53e:	f340 812f 	ble.w	1d7a0 <readline_process_char+0x424>
   1d542:	687b      	ldr	r3, [r7, #4]
   1d544:	2b7e      	cmp	r3, #126	; 0x7e
   1d546:	f300 812b 	bgt.w	1d7a0 <readline_process_char+0x424>
            // printable character
            vstr_ins_char(rl.line, rl.cursor_pos, c);
   1d54a:	4b1b      	ldr	r3, [pc, #108]	; (1d5b8 <readline_process_char+0x23c>)
   1d54c:	6818      	ldr	r0, [r3, #0]
   1d54e:	4b1a      	ldr	r3, [pc, #104]	; (1d5b8 <readline_process_char+0x23c>)
   1d550:	691b      	ldr	r3, [r3, #16]
   1d552:	687a      	ldr	r2, [r7, #4]
   1d554:	4619      	mov	r1, r3
   1d556:	f7e4 f98d 	bl	1874 <vstr_ins_char>
            // set redraw parameters
            redraw_from_cursor = true;
   1d55a:	2301      	movs	r3, #1
   1d55c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            redraw_step_forward = 1;
   1d560:	2301      	movs	r3, #1
   1d562:	627b      	str	r3, [r7, #36]	; 0x24
   1d564:	e11c      	b.n	1d7a0 <readline_process_char+0x424>
        }
    } else if (rl.escape_seq == ESEQ_ESC) {
   1d566:	4b14      	ldr	r3, [pc, #80]	; (1d5b8 <readline_process_char+0x23c>)
   1d568:	689b      	ldr	r3, [r3, #8]
   1d56a:	2b01      	cmp	r3, #1
   1d56c:	d110      	bne.n	1d590 <readline_process_char+0x214>
        switch (c) {
   1d56e:	687b      	ldr	r3, [r7, #4]
   1d570:	2b4f      	cmp	r3, #79	; 0x4f
   1d572:	d005      	beq.n	1d580 <readline_process_char+0x204>
   1d574:	2b5b      	cmp	r3, #91	; 0x5b
   1d576:	d107      	bne.n	1d588 <readline_process_char+0x20c>
            case '[':
                rl.escape_seq = ESEQ_ESC_BRACKET;
   1d578:	4b0f      	ldr	r3, [pc, #60]	; (1d5b8 <readline_process_char+0x23c>)
   1d57a:	2202      	movs	r2, #2
   1d57c:	609a      	str	r2, [r3, #8]
                break;
   1d57e:	e10f      	b.n	1d7a0 <readline_process_char+0x424>
            case 'O':
                rl.escape_seq = ESEQ_ESC_O;
   1d580:	4b0d      	ldr	r3, [pc, #52]	; (1d5b8 <readline_process_char+0x23c>)
   1d582:	2204      	movs	r2, #4
   1d584:	609a      	str	r2, [r3, #8]
                break;
   1d586:	e10b      	b.n	1d7a0 <readline_process_char+0x424>
            default:
                DEBUG_printf("(ESC %d)", c);
                rl.escape_seq = ESEQ_NONE;
   1d588:	4b0b      	ldr	r3, [pc, #44]	; (1d5b8 <readline_process_char+0x23c>)
   1d58a:	2200      	movs	r2, #0
   1d58c:	609a      	str	r2, [r3, #8]
   1d58e:	e107      	b.n	1d7a0 <readline_process_char+0x424>
        }
    } else if (rl.escape_seq == ESEQ_ESC_BRACKET) {
   1d590:	4b09      	ldr	r3, [pc, #36]	; (1d5b8 <readline_process_char+0x23c>)
   1d592:	689b      	ldr	r3, [r3, #8]
   1d594:	2b02      	cmp	r3, #2
   1d596:	f040 80a9 	bne.w	1d6ec <readline_process_char+0x370>
        if ('0' <= c && c <= '9') {
   1d59a:	687b      	ldr	r3, [r7, #4]
   1d59c:	2b2f      	cmp	r3, #47	; 0x2f
   1d59e:	dd11      	ble.n	1d5c4 <readline_process_char+0x248>
   1d5a0:	687b      	ldr	r3, [r7, #4]
   1d5a2:	2b39      	cmp	r3, #57	; 0x39
   1d5a4:	dc0e      	bgt.n	1d5c4 <readline_process_char+0x248>
            rl.escape_seq = ESEQ_ESC_BRACKET_DIGIT;
   1d5a6:	4b04      	ldr	r3, [pc, #16]	; (1d5b8 <readline_process_char+0x23c>)
   1d5a8:	2203      	movs	r2, #3
   1d5aa:	609a      	str	r2, [r3, #8]
            rl.escape_seq_buf[0] = c;
   1d5ac:	687b      	ldr	r3, [r7, #4]
   1d5ae:	b2da      	uxtb	r2, r3
   1d5b0:	4b01      	ldr	r3, [pc, #4]	; (1d5b8 <readline_process_char+0x23c>)
   1d5b2:	751a      	strb	r2, [r3, #20]
   1d5b4:	e0f4      	b.n	1d7a0 <readline_process_char+0x424>
   1d5b6:	bf00      	nop
   1d5b8:	200012d4 	.word	0x200012d4
   1d5bc:	00025d4c 	.word	0x00025d4c
   1d5c0:	0001f884 	.word	0x0001f884
        } else {
            rl.escape_seq = ESEQ_NONE;
   1d5c4:	4b96      	ldr	r3, [pc, #600]	; (1d820 <readline_process_char+0x4a4>)
   1d5c6:	2200      	movs	r2, #0
   1d5c8:	609a      	str	r2, [r3, #8]
            if (c == 'A') {
   1d5ca:	687b      	ldr	r3, [r7, #4]
   1d5cc:	2b41      	cmp	r3, #65	; 0x41
   1d5ce:	d135      	bne.n	1d63c <readline_process_char+0x2c0>
#if MICROPY_REPL_EMACS_KEYS
up_arrow_key:
#endif
                // up arrow
                if (rl.hist_cur + 1 < (int)READLINE_HIST_SIZE && MP_STATE_PORT(readline_hist)[rl.hist_cur + 1] != NULL) {
   1d5d0:	4b93      	ldr	r3, [pc, #588]	; (1d820 <readline_process_char+0x4a4>)
   1d5d2:	68db      	ldr	r3, [r3, #12]
   1d5d4:	3301      	adds	r3, #1
   1d5d6:	2b07      	cmp	r3, #7
   1d5d8:	f300 80e2 	bgt.w	1d7a0 <readline_process_char+0x424>
   1d5dc:	4b90      	ldr	r3, [pc, #576]	; (1d820 <readline_process_char+0x4a4>)
   1d5de:	68db      	ldr	r3, [r3, #12]
   1d5e0:	3301      	adds	r3, #1
   1d5e2:	4a90      	ldr	r2, [pc, #576]	; (1d824 <readline_process_char+0x4a8>)
   1d5e4:	331a      	adds	r3, #26
   1d5e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1d5ea:	2b00      	cmp	r3, #0
   1d5ec:	f000 80d8 	beq.w	1d7a0 <readline_process_char+0x424>
                    // increase hist num
                    rl.hist_cur += 1;
   1d5f0:	4b8b      	ldr	r3, [pc, #556]	; (1d820 <readline_process_char+0x4a4>)
   1d5f2:	68db      	ldr	r3, [r3, #12]
   1d5f4:	3301      	adds	r3, #1
   1d5f6:	4a8a      	ldr	r2, [pc, #552]	; (1d820 <readline_process_char+0x4a4>)
   1d5f8:	60d3      	str	r3, [r2, #12]
                    // set line to history
                    rl.line->len = rl.orig_line_len;
   1d5fa:	4b89      	ldr	r3, [pc, #548]	; (1d820 <readline_process_char+0x4a4>)
   1d5fc:	681b      	ldr	r3, [r3, #0]
   1d5fe:	4a88      	ldr	r2, [pc, #544]	; (1d820 <readline_process_char+0x4a4>)
   1d600:	6852      	ldr	r2, [r2, #4]
   1d602:	605a      	str	r2, [r3, #4]
                    vstr_add_str(rl.line, MP_STATE_PORT(readline_hist)[rl.hist_cur]);
   1d604:	4b86      	ldr	r3, [pc, #536]	; (1d820 <readline_process_char+0x4a4>)
   1d606:	6818      	ldr	r0, [r3, #0]
   1d608:	4b85      	ldr	r3, [pc, #532]	; (1d820 <readline_process_char+0x4a4>)
   1d60a:	68db      	ldr	r3, [r3, #12]
   1d60c:	4a85      	ldr	r2, [pc, #532]	; (1d824 <readline_process_char+0x4a8>)
   1d60e:	331a      	adds	r3, #26
   1d610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1d614:	4619      	mov	r1, r3
   1d616:	f7e4 f8b5 	bl	1784 <vstr_add_str>
                    // set redraw parameters
                    redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1d61a:	4b81      	ldr	r3, [pc, #516]	; (1d820 <readline_process_char+0x4a4>)
   1d61c:	691a      	ldr	r2, [r3, #16]
   1d61e:	4b80      	ldr	r3, [pc, #512]	; (1d820 <readline_process_char+0x4a4>)
   1d620:	685b      	ldr	r3, [r3, #4]
   1d622:	1ad3      	subs	r3, r2, r3
   1d624:	62fb      	str	r3, [r7, #44]	; 0x2c
                    redraw_from_cursor = true;
   1d626:	2301      	movs	r3, #1
   1d628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    redraw_step_forward = rl.line->len - rl.orig_line_len;
   1d62c:	4b7c      	ldr	r3, [pc, #496]	; (1d820 <readline_process_char+0x4a4>)
   1d62e:	681b      	ldr	r3, [r3, #0]
   1d630:	685a      	ldr	r2, [r3, #4]
   1d632:	4b7b      	ldr	r3, [pc, #492]	; (1d820 <readline_process_char+0x4a4>)
   1d634:	685b      	ldr	r3, [r3, #4]
   1d636:	1ad3      	subs	r3, r2, r3
   1d638:	627b      	str	r3, [r7, #36]	; 0x24
   1d63a:	e0b1      	b.n	1d7a0 <readline_process_char+0x424>
                }
            } else if (c == 'B') {
   1d63c:	687b      	ldr	r3, [r7, #4]
   1d63e:	2b42      	cmp	r3, #66	; 0x42
   1d640:	d134      	bne.n	1d6ac <readline_process_char+0x330>
#if MICROPY_REPL_EMACS_KEYS
down_arrow_key:
#endif
                // down arrow
                if (rl.hist_cur >= 0) {
   1d642:	4b77      	ldr	r3, [pc, #476]	; (1d820 <readline_process_char+0x4a4>)
   1d644:	68db      	ldr	r3, [r3, #12]
   1d646:	2b00      	cmp	r3, #0
   1d648:	f2c0 80aa 	blt.w	1d7a0 <readline_process_char+0x424>
                    // decrease hist num
                    rl.hist_cur -= 1;
   1d64c:	4b74      	ldr	r3, [pc, #464]	; (1d820 <readline_process_char+0x4a4>)
   1d64e:	68db      	ldr	r3, [r3, #12]
   1d650:	3b01      	subs	r3, #1
   1d652:	4a73      	ldr	r2, [pc, #460]	; (1d820 <readline_process_char+0x4a4>)
   1d654:	60d3      	str	r3, [r2, #12]
                    // set line to history
                    vstr_cut_tail_bytes(rl.line, rl.line->len - rl.orig_line_len);
   1d656:	4b72      	ldr	r3, [pc, #456]	; (1d820 <readline_process_char+0x4a4>)
   1d658:	6818      	ldr	r0, [r3, #0]
   1d65a:	4b71      	ldr	r3, [pc, #452]	; (1d820 <readline_process_char+0x4a4>)
   1d65c:	681b      	ldr	r3, [r3, #0]
   1d65e:	685a      	ldr	r2, [r3, #4]
   1d660:	4b6f      	ldr	r3, [pc, #444]	; (1d820 <readline_process_char+0x4a4>)
   1d662:	685b      	ldr	r3, [r3, #4]
   1d664:	1ad3      	subs	r3, r2, r3
   1d666:	4619      	mov	r1, r3
   1d668:	f7e4 f926 	bl	18b8 <vstr_cut_tail_bytes>
                    if (rl.hist_cur >= 0) {
   1d66c:	4b6c      	ldr	r3, [pc, #432]	; (1d820 <readline_process_char+0x4a4>)
   1d66e:	68db      	ldr	r3, [r3, #12]
   1d670:	2b00      	cmp	r3, #0
   1d672:	db0a      	blt.n	1d68a <readline_process_char+0x30e>
                        vstr_add_str(rl.line, MP_STATE_PORT(readline_hist)[rl.hist_cur]);
   1d674:	4b6a      	ldr	r3, [pc, #424]	; (1d820 <readline_process_char+0x4a4>)
   1d676:	6818      	ldr	r0, [r3, #0]
   1d678:	4b69      	ldr	r3, [pc, #420]	; (1d820 <readline_process_char+0x4a4>)
   1d67a:	68db      	ldr	r3, [r3, #12]
   1d67c:	4a69      	ldr	r2, [pc, #420]	; (1d824 <readline_process_char+0x4a8>)
   1d67e:	331a      	adds	r3, #26
   1d680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1d684:	4619      	mov	r1, r3
   1d686:	f7e4 f87d 	bl	1784 <vstr_add_str>
                    }
                    // set redraw parameters
                    redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1d68a:	4b65      	ldr	r3, [pc, #404]	; (1d820 <readline_process_char+0x4a4>)
   1d68c:	691a      	ldr	r2, [r3, #16]
   1d68e:	4b64      	ldr	r3, [pc, #400]	; (1d820 <readline_process_char+0x4a4>)
   1d690:	685b      	ldr	r3, [r3, #4]
   1d692:	1ad3      	subs	r3, r2, r3
   1d694:	62fb      	str	r3, [r7, #44]	; 0x2c
                    redraw_from_cursor = true;
   1d696:	2301      	movs	r3, #1
   1d698:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    redraw_step_forward = rl.line->len - rl.orig_line_len;
   1d69c:	4b60      	ldr	r3, [pc, #384]	; (1d820 <readline_process_char+0x4a4>)
   1d69e:	681b      	ldr	r3, [r3, #0]
   1d6a0:	685a      	ldr	r2, [r3, #4]
   1d6a2:	4b5f      	ldr	r3, [pc, #380]	; (1d820 <readline_process_char+0x4a4>)
   1d6a4:	685b      	ldr	r3, [r3, #4]
   1d6a6:	1ad3      	subs	r3, r2, r3
   1d6a8:	627b      	str	r3, [r7, #36]	; 0x24
   1d6aa:	e079      	b.n	1d7a0 <readline_process_char+0x424>
                }
            } else if (c == 'C') {
   1d6ac:	687b      	ldr	r3, [r7, #4]
   1d6ae:	2b43      	cmp	r3, #67	; 0x43
   1d6b0:	d109      	bne.n	1d6c6 <readline_process_char+0x34a>
#if MICROPY_REPL_EMACS_KEYS
right_arrow_key:
#endif
                // right arrow
                if (rl.cursor_pos < rl.line->len) {
   1d6b2:	4b5b      	ldr	r3, [pc, #364]	; (1d820 <readline_process_char+0x4a4>)
   1d6b4:	691a      	ldr	r2, [r3, #16]
   1d6b6:	4b5a      	ldr	r3, [pc, #360]	; (1d820 <readline_process_char+0x4a4>)
   1d6b8:	681b      	ldr	r3, [r3, #0]
   1d6ba:	685b      	ldr	r3, [r3, #4]
   1d6bc:	429a      	cmp	r2, r3
   1d6be:	d26f      	bcs.n	1d7a0 <readline_process_char+0x424>
                    redraw_step_forward = 1;
   1d6c0:	2301      	movs	r3, #1
   1d6c2:	627b      	str	r3, [r7, #36]	; 0x24
   1d6c4:	e06c      	b.n	1d7a0 <readline_process_char+0x424>
                }
            } else if (c == 'D') {
   1d6c6:	687b      	ldr	r3, [r7, #4]
   1d6c8:	2b44      	cmp	r3, #68	; 0x44
   1d6ca:	d108      	bne.n	1d6de <readline_process_char+0x362>
#if MICROPY_REPL_EMACS_KEYS
left_arrow_key:
#endif
                // left arrow
                if (rl.cursor_pos > rl.orig_line_len) {
   1d6cc:	4b54      	ldr	r3, [pc, #336]	; (1d820 <readline_process_char+0x4a4>)
   1d6ce:	691a      	ldr	r2, [r3, #16]
   1d6d0:	4b53      	ldr	r3, [pc, #332]	; (1d820 <readline_process_char+0x4a4>)
   1d6d2:	685b      	ldr	r3, [r3, #4]
   1d6d4:	429a      	cmp	r2, r3
   1d6d6:	d963      	bls.n	1d7a0 <readline_process_char+0x424>
                    redraw_step_back = 1;
   1d6d8:	2301      	movs	r3, #1
   1d6da:	62fb      	str	r3, [r7, #44]	; 0x2c
   1d6dc:	e060      	b.n	1d7a0 <readline_process_char+0x424>
                }
            } else if (c == 'H') {
   1d6de:	687b      	ldr	r3, [r7, #4]
   1d6e0:	2b48      	cmp	r3, #72	; 0x48
   1d6e2:	d015      	beq.n	1d710 <readline_process_char+0x394>
                // home
                goto home_key;
            } else if (c == 'F') {
   1d6e4:	687b      	ldr	r3, [r7, #4]
   1d6e6:	2b46      	cmp	r3, #70	; 0x46
   1d6e8:	d15a      	bne.n	1d7a0 <readline_process_char+0x424>
                // end
                goto end_key;
   1d6ea:	e027      	b.n	1d73c <readline_process_char+0x3c0>
            } else {
                DEBUG_printf("(ESC [ %d)", c);
            }
        }
    } else if (rl.escape_seq == ESEQ_ESC_BRACKET_DIGIT) {
   1d6ec:	4b4c      	ldr	r3, [pc, #304]	; (1d820 <readline_process_char+0x4a4>)
   1d6ee:	689b      	ldr	r3, [r3, #8]
   1d6f0:	2b03      	cmp	r3, #3
   1d6f2:	d145      	bne.n	1d780 <readline_process_char+0x404>
        if (c == '~') {
   1d6f4:	687b      	ldr	r3, [r7, #4]
   1d6f6:	2b7e      	cmp	r3, #126	; 0x7e
   1d6f8:	d13e      	bne.n	1d778 <readline_process_char+0x3fc>
            if (rl.escape_seq_buf[0] == '1' || rl.escape_seq_buf[0] == '7') {
   1d6fa:	4b49      	ldr	r3, [pc, #292]	; (1d820 <readline_process_char+0x4a4>)
   1d6fc:	7d1b      	ldrb	r3, [r3, #20]
   1d6fe:	2b31      	cmp	r3, #49	; 0x31
   1d700:	d009      	beq.n	1d716 <readline_process_char+0x39a>
   1d702:	4b47      	ldr	r3, [pc, #284]	; (1d820 <readline_process_char+0x4a4>)
   1d704:	7d1b      	ldrb	r3, [r3, #20]
   1d706:	2b37      	cmp	r3, #55	; 0x37
   1d708:	d10c      	bne.n	1d724 <readline_process_char+0x3a8>
   1d70a:	e004      	b.n	1d716 <readline_process_char+0x39a>
            goto home_key;
   1d70c:	bf00      	nop
   1d70e:	e002      	b.n	1d716 <readline_process_char+0x39a>
                goto home_key;
   1d710:	bf00      	nop
   1d712:	e000      	b.n	1d716 <readline_process_char+0x39a>
        }
        rl.escape_seq = ESEQ_NONE;
    } else if (rl.escape_seq == ESEQ_ESC_O) {
        switch (c) {
            case 'H':
                goto home_key;
   1d714:	bf00      	nop
                redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1d716:	4b42      	ldr	r3, [pc, #264]	; (1d820 <readline_process_char+0x4a4>)
   1d718:	691a      	ldr	r2, [r3, #16]
   1d71a:	4b41      	ldr	r3, [pc, #260]	; (1d820 <readline_process_char+0x4a4>)
   1d71c:	685b      	ldr	r3, [r3, #4]
   1d71e:	1ad3      	subs	r3, r2, r3
   1d720:	62fb      	str	r3, [r7, #44]	; 0x2c
   1d722:	e029      	b.n	1d778 <readline_process_char+0x3fc>
            } else if (rl.escape_seq_buf[0] == '4' || rl.escape_seq_buf[0] == '8') {
   1d724:	4b3e      	ldr	r3, [pc, #248]	; (1d820 <readline_process_char+0x4a4>)
   1d726:	7d1b      	ldrb	r3, [r3, #20]
   1d728:	2b34      	cmp	r3, #52	; 0x34
   1d72a:	d007      	beq.n	1d73c <readline_process_char+0x3c0>
   1d72c:	4b3c      	ldr	r3, [pc, #240]	; (1d820 <readline_process_char+0x4a4>)
   1d72e:	7d1b      	ldrb	r3, [r3, #20]
   1d730:	2b38      	cmp	r3, #56	; 0x38
   1d732:	d10b      	bne.n	1d74c <readline_process_char+0x3d0>
   1d734:	e002      	b.n	1d73c <readline_process_char+0x3c0>
            goto end_key;
   1d736:	bf00      	nop
   1d738:	e000      	b.n	1d73c <readline_process_char+0x3c0>
            case 'F':
                goto end_key;
   1d73a:	bf00      	nop
                redraw_step_forward = rl.line->len - rl.cursor_pos;
   1d73c:	4b38      	ldr	r3, [pc, #224]	; (1d820 <readline_process_char+0x4a4>)
   1d73e:	681b      	ldr	r3, [r3, #0]
   1d740:	685a      	ldr	r2, [r3, #4]
   1d742:	4b37      	ldr	r3, [pc, #220]	; (1d820 <readline_process_char+0x4a4>)
   1d744:	691b      	ldr	r3, [r3, #16]
   1d746:	1ad3      	subs	r3, r2, r3
   1d748:	627b      	str	r3, [r7, #36]	; 0x24
   1d74a:	e015      	b.n	1d778 <readline_process_char+0x3fc>
            } else if (rl.escape_seq_buf[0] == '3') {
   1d74c:	4b34      	ldr	r3, [pc, #208]	; (1d820 <readline_process_char+0x4a4>)
   1d74e:	7d1b      	ldrb	r3, [r3, #20]
   1d750:	2b33      	cmp	r3, #51	; 0x33
   1d752:	d111      	bne.n	1d778 <readline_process_char+0x3fc>
                if (rl.cursor_pos < rl.line->len) {
   1d754:	4b32      	ldr	r3, [pc, #200]	; (1d820 <readline_process_char+0x4a4>)
   1d756:	691a      	ldr	r2, [r3, #16]
   1d758:	4b31      	ldr	r3, [pc, #196]	; (1d820 <readline_process_char+0x4a4>)
   1d75a:	681b      	ldr	r3, [r3, #0]
   1d75c:	685b      	ldr	r3, [r3, #4]
   1d75e:	429a      	cmp	r2, r3
   1d760:	d20a      	bcs.n	1d778 <readline_process_char+0x3fc>
                    vstr_cut_out_bytes(rl.line, rl.cursor_pos, 1);
   1d762:	4b2f      	ldr	r3, [pc, #188]	; (1d820 <readline_process_char+0x4a4>)
   1d764:	6818      	ldr	r0, [r3, #0]
   1d766:	4b2e      	ldr	r3, [pc, #184]	; (1d820 <readline_process_char+0x4a4>)
   1d768:	691b      	ldr	r3, [r3, #16]
   1d76a:	2201      	movs	r2, #1
   1d76c:	4619      	mov	r1, r3
   1d76e:	f7e4 f8bd 	bl	18ec <vstr_cut_out_bytes>
                    redraw_from_cursor = true;
   1d772:	2301      	movs	r3, #1
   1d774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        rl.escape_seq = ESEQ_NONE;
   1d778:	4b29      	ldr	r3, [pc, #164]	; (1d820 <readline_process_char+0x4a4>)
   1d77a:	2200      	movs	r2, #0
   1d77c:	609a      	str	r2, [r3, #8]
   1d77e:	e00f      	b.n	1d7a0 <readline_process_char+0x424>
    } else if (rl.escape_seq == ESEQ_ESC_O) {
   1d780:	4b27      	ldr	r3, [pc, #156]	; (1d820 <readline_process_char+0x4a4>)
   1d782:	689b      	ldr	r3, [r3, #8]
   1d784:	2b04      	cmp	r3, #4
   1d786:	d108      	bne.n	1d79a <readline_process_char+0x41e>
        switch (c) {
   1d788:	687b      	ldr	r3, [r7, #4]
   1d78a:	2b46      	cmp	r3, #70	; 0x46
   1d78c:	d0d5      	beq.n	1d73a <readline_process_char+0x3be>
   1d78e:	2b48      	cmp	r3, #72	; 0x48
   1d790:	d0c0      	beq.n	1d714 <readline_process_char+0x398>
            default:
                DEBUG_printf("(ESC O %d)", c);
                rl.escape_seq = ESEQ_NONE;
   1d792:	4b23      	ldr	r3, [pc, #140]	; (1d820 <readline_process_char+0x4a4>)
   1d794:	2200      	movs	r2, #0
   1d796:	609a      	str	r2, [r3, #8]
   1d798:	e002      	b.n	1d7a0 <readline_process_char+0x424>
        }
    } else {
        rl.escape_seq = ESEQ_NONE;
   1d79a:	4b21      	ldr	r3, [pc, #132]	; (1d820 <readline_process_char+0x4a4>)
   1d79c:	2200      	movs	r2, #0
   1d79e:	609a      	str	r2, [r3, #8]
    }

    // redraw command prompt, efficiently
    if (redraw_step_back > 0) {
   1d7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d7a2:	2b00      	cmp	r3, #0
   1d7a4:	dd09      	ble.n	1d7ba <readline_process_char+0x43e>
        mp_hal_move_cursor_back(redraw_step_back);
   1d7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d7a8:	4618      	mov	r0, r3
   1d7aa:	f7ff fdab 	bl	1d304 <mp_hal_move_cursor_back>
        rl.cursor_pos -= redraw_step_back;
   1d7ae:	4b1c      	ldr	r3, [pc, #112]	; (1d820 <readline_process_char+0x4a4>)
   1d7b0:	691a      	ldr	r2, [r3, #16]
   1d7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d7b4:	1ad3      	subs	r3, r2, r3
   1d7b6:	4a1a      	ldr	r2, [pc, #104]	; (1d820 <readline_process_char+0x4a4>)
   1d7b8:	6113      	str	r3, [r2, #16]
    }
    if (redraw_from_cursor) {
   1d7ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   1d7be:	2b00      	cmp	r3, #0
   1d7c0:	d032      	beq.n	1d828 <readline_process_char+0x4ac>
        if (rl.line->len < last_line_len) {
   1d7c2:	4b17      	ldr	r3, [pc, #92]	; (1d820 <readline_process_char+0x4a4>)
   1d7c4:	681b      	ldr	r3, [r3, #0]
   1d7c6:	685a      	ldr	r2, [r3, #4]
   1d7c8:	697b      	ldr	r3, [r7, #20]
   1d7ca:	429a      	cmp	r2, r3
   1d7cc:	d206      	bcs.n	1d7dc <readline_process_char+0x460>
            // erase old chars
            mp_hal_erase_line_from_cursor(last_line_len - rl.cursor_pos);
   1d7ce:	4b14      	ldr	r3, [pc, #80]	; (1d820 <readline_process_char+0x4a4>)
   1d7d0:	691b      	ldr	r3, [r3, #16]
   1d7d2:	697a      	ldr	r2, [r7, #20]
   1d7d4:	1ad3      	subs	r3, r2, r3
   1d7d6:	4618      	mov	r0, r3
   1d7d8:	f7ff fdc2 	bl	1d360 <mp_hal_erase_line_from_cursor>
        }
        // draw new chars
        mp_hal_stdout_tx_strn(rl.line->buf + rl.cursor_pos, rl.line->len - rl.cursor_pos);
   1d7dc:	4b10      	ldr	r3, [pc, #64]	; (1d820 <readline_process_char+0x4a4>)
   1d7de:	681b      	ldr	r3, [r3, #0]
   1d7e0:	689a      	ldr	r2, [r3, #8]
   1d7e2:	4b0f      	ldr	r3, [pc, #60]	; (1d820 <readline_process_char+0x4a4>)
   1d7e4:	691b      	ldr	r3, [r3, #16]
   1d7e6:	18d0      	adds	r0, r2, r3
   1d7e8:	4b0d      	ldr	r3, [pc, #52]	; (1d820 <readline_process_char+0x4a4>)
   1d7ea:	681b      	ldr	r3, [r3, #0]
   1d7ec:	685a      	ldr	r2, [r3, #4]
   1d7ee:	4b0c      	ldr	r3, [pc, #48]	; (1d820 <readline_process_char+0x4a4>)
   1d7f0:	691b      	ldr	r3, [r3, #16]
   1d7f2:	1ad3      	subs	r3, r2, r3
   1d7f4:	4619      	mov	r1, r3
   1d7f6:	f7fe f8eb 	bl	1b9d0 <mp_hal_stdout_tx_strn>
        // move cursor forward if needed (already moved forward by length of line, so move it back)
        mp_hal_move_cursor_back(rl.line->len - (rl.cursor_pos + redraw_step_forward));
   1d7fa:	4b09      	ldr	r3, [pc, #36]	; (1d820 <readline_process_char+0x4a4>)
   1d7fc:	681b      	ldr	r3, [r3, #0]
   1d7fe:	685a      	ldr	r2, [r3, #4]
   1d800:	4b07      	ldr	r3, [pc, #28]	; (1d820 <readline_process_char+0x4a4>)
   1d802:	6919      	ldr	r1, [r3, #16]
   1d804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d806:	440b      	add	r3, r1
   1d808:	1ad3      	subs	r3, r2, r3
   1d80a:	4618      	mov	r0, r3
   1d80c:	f7ff fd7a 	bl	1d304 <mp_hal_move_cursor_back>
        rl.cursor_pos += redraw_step_forward;
   1d810:	4b03      	ldr	r3, [pc, #12]	; (1d820 <readline_process_char+0x4a4>)
   1d812:	691a      	ldr	r2, [r3, #16]
   1d814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d816:	4413      	add	r3, r2
   1d818:	4a01      	ldr	r2, [pc, #4]	; (1d820 <readline_process_char+0x4a4>)
   1d81a:	6113      	str	r3, [r2, #16]
   1d81c:	e018      	b.n	1d850 <readline_process_char+0x4d4>
   1d81e:	bf00      	nop
   1d820:	200012d4 	.word	0x200012d4
   1d824:	200012f0 	.word	0x200012f0
    } else if (redraw_step_forward > 0) {
   1d828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d82a:	2b00      	cmp	r3, #0
   1d82c:	dd10      	ble.n	1d850 <readline_process_char+0x4d4>
        // draw over old chars to move cursor forwards
        mp_hal_stdout_tx_strn(rl.line->buf + rl.cursor_pos, redraw_step_forward);
   1d82e:	4b0b      	ldr	r3, [pc, #44]	; (1d85c <readline_process_char+0x4e0>)
   1d830:	681b      	ldr	r3, [r3, #0]
   1d832:	689a      	ldr	r2, [r3, #8]
   1d834:	4b09      	ldr	r3, [pc, #36]	; (1d85c <readline_process_char+0x4e0>)
   1d836:	691b      	ldr	r3, [r3, #16]
   1d838:	4413      	add	r3, r2
   1d83a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d83c:	4611      	mov	r1, r2
   1d83e:	4618      	mov	r0, r3
   1d840:	f7fe f8c6 	bl	1b9d0 <mp_hal_stdout_tx_strn>
        rl.cursor_pos += redraw_step_forward;
   1d844:	4b05      	ldr	r3, [pc, #20]	; (1d85c <readline_process_char+0x4e0>)
   1d846:	691a      	ldr	r2, [r3, #16]
   1d848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d84a:	4413      	add	r3, r2
   1d84c:	4a03      	ldr	r2, [pc, #12]	; (1d85c <readline_process_char+0x4e0>)
   1d84e:	6113      	str	r3, [r2, #16]
    }

    return -1;
   1d850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1d854:	4618      	mov	r0, r3
   1d856:	3730      	adds	r7, #48	; 0x30
   1d858:	46bd      	mov	sp, r7
   1d85a:	bd80      	pop	{r7, pc}
   1d85c:	200012d4 	.word	0x200012d4

0001d860 <readline_auto_indent>:

#if MICROPY_REPL_AUTO_INDENT
STATIC void readline_auto_indent(void) {
   1d860:	b580      	push	{r7, lr}
   1d862:	b086      	sub	sp, #24
   1d864:	af00      	add	r7, sp, #0
    vstr_t *line = rl.line;
   1d866:	4b44      	ldr	r3, [pc, #272]	; (1d978 <readline_auto_indent+0x118>)
   1d868:	681b      	ldr	r3, [r3, #0]
   1d86a:	607b      	str	r3, [r7, #4]
    if (line->len > 1 && line->buf[line->len - 1] == '\n') {
   1d86c:	687b      	ldr	r3, [r7, #4]
   1d86e:	685b      	ldr	r3, [r3, #4]
   1d870:	2b01      	cmp	r3, #1
   1d872:	d97d      	bls.n	1d970 <readline_auto_indent+0x110>
   1d874:	687b      	ldr	r3, [r7, #4]
   1d876:	689a      	ldr	r2, [r3, #8]
   1d878:	687b      	ldr	r3, [r7, #4]
   1d87a:	685b      	ldr	r3, [r3, #4]
   1d87c:	3b01      	subs	r3, #1
   1d87e:	4413      	add	r3, r2
   1d880:	781b      	ldrb	r3, [r3, #0]
   1d882:	2b0a      	cmp	r3, #10
   1d884:	d174      	bne.n	1d970 <readline_auto_indent+0x110>
        int i;
        for (i = line->len - 1; i > 0; i--) {
   1d886:	687b      	ldr	r3, [r7, #4]
   1d888:	685b      	ldr	r3, [r3, #4]
   1d88a:	3b01      	subs	r3, #1
   1d88c:	617b      	str	r3, [r7, #20]
   1d88e:	e00a      	b.n	1d8a6 <readline_auto_indent+0x46>
            if (line->buf[i - 1] == '\n') {
   1d890:	687b      	ldr	r3, [r7, #4]
   1d892:	689a      	ldr	r2, [r3, #8]
   1d894:	697b      	ldr	r3, [r7, #20]
   1d896:	3b01      	subs	r3, #1
   1d898:	4413      	add	r3, r2
   1d89a:	781b      	ldrb	r3, [r3, #0]
   1d89c:	2b0a      	cmp	r3, #10
   1d89e:	d006      	beq.n	1d8ae <readline_auto_indent+0x4e>
        for (i = line->len - 1; i > 0; i--) {
   1d8a0:	697b      	ldr	r3, [r7, #20]
   1d8a2:	3b01      	subs	r3, #1
   1d8a4:	617b      	str	r3, [r7, #20]
   1d8a6:	697b      	ldr	r3, [r7, #20]
   1d8a8:	2b00      	cmp	r3, #0
   1d8aa:	dcf1      	bgt.n	1d890 <readline_auto_indent+0x30>
   1d8ac:	e000      	b.n	1d8b0 <readline_auto_indent+0x50>
                break;
   1d8ae:	bf00      	nop
            }
        }
        size_t j;
        for (j = i; j < line->len; j++) {
   1d8b0:	697b      	ldr	r3, [r7, #20]
   1d8b2:	613b      	str	r3, [r7, #16]
   1d8b4:	e009      	b.n	1d8ca <readline_auto_indent+0x6a>
            if (line->buf[j] != ' ') {
   1d8b6:	687b      	ldr	r3, [r7, #4]
   1d8b8:	689a      	ldr	r2, [r3, #8]
   1d8ba:	693b      	ldr	r3, [r7, #16]
   1d8bc:	4413      	add	r3, r2
   1d8be:	781b      	ldrb	r3, [r3, #0]
   1d8c0:	2b20      	cmp	r3, #32
   1d8c2:	d108      	bne.n	1d8d6 <readline_auto_indent+0x76>
        for (j = i; j < line->len; j++) {
   1d8c4:	693b      	ldr	r3, [r7, #16]
   1d8c6:	3301      	adds	r3, #1
   1d8c8:	613b      	str	r3, [r7, #16]
   1d8ca:	687b      	ldr	r3, [r7, #4]
   1d8cc:	685a      	ldr	r2, [r3, #4]
   1d8ce:	693b      	ldr	r3, [r7, #16]
   1d8d0:	429a      	cmp	r2, r3
   1d8d2:	d8f0      	bhi.n	1d8b6 <readline_auto_indent+0x56>
   1d8d4:	e000      	b.n	1d8d8 <readline_auto_indent+0x78>
                break;
   1d8d6:	bf00      	nop
            }
        }
        // i=start of line; j=first non-space
        if (i > 0 && j + 1 == line->len) {
   1d8d8:	697b      	ldr	r3, [r7, #20]
   1d8da:	2b00      	cmp	r3, #0
   1d8dc:	dd21      	ble.n	1d922 <readline_auto_indent+0xc2>
   1d8de:	693b      	ldr	r3, [r7, #16]
   1d8e0:	1c5a      	adds	r2, r3, #1
   1d8e2:	687b      	ldr	r3, [r7, #4]
   1d8e4:	685b      	ldr	r3, [r3, #4]
   1d8e6:	429a      	cmp	r2, r3
   1d8e8:	d11b      	bne.n	1d922 <readline_auto_indent+0xc2>
            // previous line is not first line and is all spaces
            for (size_t k = i - 1; k > 0; --k) {
   1d8ea:	697b      	ldr	r3, [r7, #20]
   1d8ec:	3b01      	subs	r3, #1
   1d8ee:	60fb      	str	r3, [r7, #12]
   1d8f0:	e012      	b.n	1d918 <readline_auto_indent+0xb8>
                if (line->buf[k - 1] == '\n') {
   1d8f2:	687b      	ldr	r3, [r7, #4]
   1d8f4:	689a      	ldr	r2, [r3, #8]
   1d8f6:	68fb      	ldr	r3, [r7, #12]
   1d8f8:	3b01      	subs	r3, #1
   1d8fa:	4413      	add	r3, r2
   1d8fc:	781b      	ldrb	r3, [r3, #0]
   1d8fe:	2b0a      	cmp	r3, #10
   1d900:	d035      	beq.n	1d96e <readline_auto_indent+0x10e>
                    // don't auto-indent if last 2 lines are all spaces
                    return;
                } else if (line->buf[k - 1] != ' ') {
   1d902:	687b      	ldr	r3, [r7, #4]
   1d904:	689a      	ldr	r2, [r3, #8]
   1d906:	68fb      	ldr	r3, [r7, #12]
   1d908:	3b01      	subs	r3, #1
   1d90a:	4413      	add	r3, r2
   1d90c:	781b      	ldrb	r3, [r3, #0]
   1d90e:	2b20      	cmp	r3, #32
   1d910:	d106      	bne.n	1d920 <readline_auto_indent+0xc0>
            for (size_t k = i - 1; k > 0; --k) {
   1d912:	68fb      	ldr	r3, [r7, #12]
   1d914:	3b01      	subs	r3, #1
   1d916:	60fb      	str	r3, [r7, #12]
   1d918:	68fb      	ldr	r3, [r7, #12]
   1d91a:	2b00      	cmp	r3, #0
   1d91c:	d1e9      	bne.n	1d8f2 <readline_auto_indent+0x92>
   1d91e:	e000      	b.n	1d922 <readline_auto_indent+0xc2>
                    // 2nd previous line is not all spaces
                    break;
   1d920:	bf00      	nop
                }
            }
        }
        int n = (j - i) / 4;
   1d922:	697b      	ldr	r3, [r7, #20]
   1d924:	693a      	ldr	r2, [r7, #16]
   1d926:	1ad3      	subs	r3, r2, r3
   1d928:	089b      	lsrs	r3, r3, #2
   1d92a:	60bb      	str	r3, [r7, #8]
        if (line->buf[line->len - 2] == ':') {
   1d92c:	687b      	ldr	r3, [r7, #4]
   1d92e:	689a      	ldr	r2, [r3, #8]
   1d930:	687b      	ldr	r3, [r7, #4]
   1d932:	685b      	ldr	r3, [r3, #4]
   1d934:	3b02      	subs	r3, #2
   1d936:	4413      	add	r3, r2
   1d938:	781b      	ldrb	r3, [r3, #0]
   1d93a:	2b3a      	cmp	r3, #58	; 0x3a
   1d93c:	d111      	bne.n	1d962 <readline_auto_indent+0x102>
            n += 1;
   1d93e:	68bb      	ldr	r3, [r7, #8]
   1d940:	3301      	adds	r3, #1
   1d942:	60bb      	str	r3, [r7, #8]
        }
        while (n-- > 0) {
   1d944:	e00d      	b.n	1d962 <readline_auto_indent+0x102>
            vstr_add_strn(line, "    ", 4);
   1d946:	2204      	movs	r2, #4
   1d948:	490c      	ldr	r1, [pc, #48]	; (1d97c <readline_auto_indent+0x11c>)
   1d94a:	6878      	ldr	r0, [r7, #4]
   1d94c:	f7e3 ff2c 	bl	17a8 <vstr_add_strn>
            mp_hal_stdout_tx_strn("    ", 4);
   1d950:	2104      	movs	r1, #4
   1d952:	480a      	ldr	r0, [pc, #40]	; (1d97c <readline_auto_indent+0x11c>)
   1d954:	f7fe f83c 	bl	1b9d0 <mp_hal_stdout_tx_strn>
            rl.cursor_pos += 4;
   1d958:	4b07      	ldr	r3, [pc, #28]	; (1d978 <readline_auto_indent+0x118>)
   1d95a:	691b      	ldr	r3, [r3, #16]
   1d95c:	3304      	adds	r3, #4
   1d95e:	4a06      	ldr	r2, [pc, #24]	; (1d978 <readline_auto_indent+0x118>)
   1d960:	6113      	str	r3, [r2, #16]
        while (n-- > 0) {
   1d962:	68bb      	ldr	r3, [r7, #8]
   1d964:	1e5a      	subs	r2, r3, #1
   1d966:	60ba      	str	r2, [r7, #8]
   1d968:	2b00      	cmp	r3, #0
   1d96a:	dcec      	bgt.n	1d946 <readline_auto_indent+0xe6>
   1d96c:	e000      	b.n	1d970 <readline_auto_indent+0x110>
                    return;
   1d96e:	bf00      	nop
        }
    }
}
   1d970:	3718      	adds	r7, #24
   1d972:	46bd      	mov	sp, r7
   1d974:	bd80      	pop	{r7, pc}
   1d976:	bf00      	nop
   1d978:	200012d4 	.word	0x200012d4
   1d97c:	00025d50 	.word	0x00025d50

0001d980 <readline_note_newline>:
#endif

void readline_note_newline(const char *prompt) {
   1d980:	b580      	push	{r7, lr}
   1d982:	b082      	sub	sp, #8
   1d984:	af00      	add	r7, sp, #0
   1d986:	6078      	str	r0, [r7, #4]
    rl.orig_line_len = rl.line->len;
   1d988:	4b0a      	ldr	r3, [pc, #40]	; (1d9b4 <readline_note_newline+0x34>)
   1d98a:	681b      	ldr	r3, [r3, #0]
   1d98c:	685b      	ldr	r3, [r3, #4]
   1d98e:	4a09      	ldr	r2, [pc, #36]	; (1d9b4 <readline_note_newline+0x34>)
   1d990:	6053      	str	r3, [r2, #4]
    rl.cursor_pos = rl.orig_line_len;
   1d992:	4b08      	ldr	r3, [pc, #32]	; (1d9b4 <readline_note_newline+0x34>)
   1d994:	685b      	ldr	r3, [r3, #4]
   1d996:	4a07      	ldr	r2, [pc, #28]	; (1d9b4 <readline_note_newline+0x34>)
   1d998:	6113      	str	r3, [r2, #16]
    rl.prompt = prompt;
   1d99a:	4a06      	ldr	r2, [pc, #24]	; (1d9b4 <readline_note_newline+0x34>)
   1d99c:	687b      	ldr	r3, [r7, #4]
   1d99e:	6193      	str	r3, [r2, #24]
    mp_hal_stdout_tx_str(prompt);
   1d9a0:	6878      	ldr	r0, [r7, #4]
   1d9a2:	f7fe ff97 	bl	1c8d4 <mp_hal_stdout_tx_str>
    #if MICROPY_REPL_AUTO_INDENT
    readline_auto_indent();
   1d9a6:	f7ff ff5b 	bl	1d860 <readline_auto_indent>
    #endif
}
   1d9aa:	bf00      	nop
   1d9ac:	3708      	adds	r7, #8
   1d9ae:	46bd      	mov	sp, r7
   1d9b0:	bd80      	pop	{r7, pc}
   1d9b2:	bf00      	nop
   1d9b4:	200012d4 	.word	0x200012d4

0001d9b8 <readline_init>:

void readline_init(vstr_t *line, const char *prompt) {
   1d9b8:	b580      	push	{r7, lr}
   1d9ba:	b082      	sub	sp, #8
   1d9bc:	af00      	add	r7, sp, #0
   1d9be:	6078      	str	r0, [r7, #4]
   1d9c0:	6039      	str	r1, [r7, #0]
    rl.line = line;
   1d9c2:	4a10      	ldr	r2, [pc, #64]	; (1da04 <readline_init+0x4c>)
   1d9c4:	687b      	ldr	r3, [r7, #4]
   1d9c6:	6013      	str	r3, [r2, #0]
    rl.orig_line_len = line->len;
   1d9c8:	687b      	ldr	r3, [r7, #4]
   1d9ca:	685b      	ldr	r3, [r3, #4]
   1d9cc:	4a0d      	ldr	r2, [pc, #52]	; (1da04 <readline_init+0x4c>)
   1d9ce:	6053      	str	r3, [r2, #4]
    rl.escape_seq = ESEQ_NONE;
   1d9d0:	4b0c      	ldr	r3, [pc, #48]	; (1da04 <readline_init+0x4c>)
   1d9d2:	2200      	movs	r2, #0
   1d9d4:	609a      	str	r2, [r3, #8]
    rl.escape_seq_buf[0] = 0;
   1d9d6:	4b0b      	ldr	r3, [pc, #44]	; (1da04 <readline_init+0x4c>)
   1d9d8:	2200      	movs	r2, #0
   1d9da:	751a      	strb	r2, [r3, #20]
    rl.hist_cur = -1;
   1d9dc:	4b09      	ldr	r3, [pc, #36]	; (1da04 <readline_init+0x4c>)
   1d9de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d9e2:	60da      	str	r2, [r3, #12]
    rl.cursor_pos = rl.orig_line_len;
   1d9e4:	4b07      	ldr	r3, [pc, #28]	; (1da04 <readline_init+0x4c>)
   1d9e6:	685b      	ldr	r3, [r3, #4]
   1d9e8:	4a06      	ldr	r2, [pc, #24]	; (1da04 <readline_init+0x4c>)
   1d9ea:	6113      	str	r3, [r2, #16]
    rl.prompt = prompt;
   1d9ec:	4a05      	ldr	r2, [pc, #20]	; (1da04 <readline_init+0x4c>)
   1d9ee:	683b      	ldr	r3, [r7, #0]
   1d9f0:	6193      	str	r3, [r2, #24]
    mp_hal_stdout_tx_str(prompt);
   1d9f2:	6838      	ldr	r0, [r7, #0]
   1d9f4:	f7fe ff6e 	bl	1c8d4 <mp_hal_stdout_tx_str>
    #if MICROPY_REPL_AUTO_INDENT
    readline_auto_indent();
   1d9f8:	f7ff ff32 	bl	1d860 <readline_auto_indent>
    #endif
}
   1d9fc:	bf00      	nop
   1d9fe:	3708      	adds	r7, #8
   1da00:	46bd      	mov	sp, r7
   1da02:	bd80      	pop	{r7, pc}
   1da04:	200012d4 	.word	0x200012d4

0001da08 <readline>:

int readline(vstr_t *line, const char *prompt) {
   1da08:	b580      	push	{r7, lr}
   1da0a:	b084      	sub	sp, #16
   1da0c:	af00      	add	r7, sp, #0
   1da0e:	6078      	str	r0, [r7, #4]
   1da10:	6039      	str	r1, [r7, #0]
    readline_init(line, prompt);
   1da12:	6839      	ldr	r1, [r7, #0]
   1da14:	6878      	ldr	r0, [r7, #4]
   1da16:	f7ff ffcf 	bl	1d9b8 <readline_init>
    for (;;) {
        int c = mp_hal_stdin_rx_chr();
   1da1a:	f7fd ffc1 	bl	1b9a0 <mp_hal_stdin_rx_chr>
   1da1e:	60f8      	str	r0, [r7, #12]
        int r = readline_process_char(c);
   1da20:	68f8      	ldr	r0, [r7, #12]
   1da22:	f7ff fcab 	bl	1d37c <readline_process_char>
   1da26:	60b8      	str	r0, [r7, #8]
        if (r >= 0) {
   1da28:	68bb      	ldr	r3, [r7, #8]
   1da2a:	2b00      	cmp	r3, #0
   1da2c:	dbf5      	blt.n	1da1a <readline+0x12>
            return r;
   1da2e:	68bb      	ldr	r3, [r7, #8]
        }
    }
}
   1da30:	4618      	mov	r0, r3
   1da32:	3710      	adds	r7, #16
   1da34:	46bd      	mov	sp, r7
   1da36:	bd80      	pop	{r7, pc}

0001da38 <readline_push_history>:

void readline_push_history(const char *line) {
   1da38:	b580      	push	{r7, lr}
   1da3a:	b084      	sub	sp, #16
   1da3c:	af00      	add	r7, sp, #0
   1da3e:	6078      	str	r0, [r7, #4]
    if (line[0] != '\0'
   1da40:	687b      	ldr	r3, [r7, #4]
   1da42:	781b      	ldrb	r3, [r3, #0]
   1da44:	2b00      	cmp	r3, #0
   1da46:	d02a      	beq.n	1da9e <readline_push_history+0x66>
        && (MP_STATE_PORT(readline_hist)[0] == NULL
   1da48:	4b17      	ldr	r3, [pc, #92]	; (1daa8 <readline_push_history+0x70>)
   1da4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1da4c:	2b00      	cmp	r3, #0
   1da4e:	d008      	beq.n	1da62 <readline_push_history+0x2a>
            || strcmp(MP_STATE_PORT(readline_hist)[0], line) != 0)) {
   1da50:	4b15      	ldr	r3, [pc, #84]	; (1daa8 <readline_push_history+0x70>)
   1da52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1da54:	6879      	ldr	r1, [r7, #4]
   1da56:	4618      	mov	r0, r3
   1da58:	f7ff faee 	bl	1d038 <strcmp>
   1da5c:	4603      	mov	r3, r0
   1da5e:	2b00      	cmp	r3, #0
   1da60:	d01d      	beq.n	1da9e <readline_push_history+0x66>
        // a line which is not empty and different from the last one
        // so update the history
        char *most_recent_hist = str_dup_maybe(line);
   1da62:	6878      	ldr	r0, [r7, #4]
   1da64:	f7ff fc2e 	bl	1d2c4 <str_dup_maybe>
   1da68:	60b8      	str	r0, [r7, #8]
        if (most_recent_hist != NULL) {
   1da6a:	68bb      	ldr	r3, [r7, #8]
   1da6c:	2b00      	cmp	r3, #0
   1da6e:	d016      	beq.n	1da9e <readline_push_history+0x66>
            for (int i = READLINE_HIST_SIZE - 1; i > 0; i--) {
   1da70:	2307      	movs	r3, #7
   1da72:	60fb      	str	r3, [r7, #12]
   1da74:	e00d      	b.n	1da92 <readline_push_history+0x5a>
                MP_STATE_PORT(readline_hist)[i] = MP_STATE_PORT(readline_hist)[i - 1];
   1da76:	68fb      	ldr	r3, [r7, #12]
   1da78:	3b01      	subs	r3, #1
   1da7a:	4a0b      	ldr	r2, [pc, #44]	; (1daa8 <readline_push_history+0x70>)
   1da7c:	331a      	adds	r3, #26
   1da7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1da82:	4909      	ldr	r1, [pc, #36]	; (1daa8 <readline_push_history+0x70>)
   1da84:	68fb      	ldr	r3, [r7, #12]
   1da86:	331a      	adds	r3, #26
   1da88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (int i = READLINE_HIST_SIZE - 1; i > 0; i--) {
   1da8c:	68fb      	ldr	r3, [r7, #12]
   1da8e:	3b01      	subs	r3, #1
   1da90:	60fb      	str	r3, [r7, #12]
   1da92:	68fb      	ldr	r3, [r7, #12]
   1da94:	2b00      	cmp	r3, #0
   1da96:	dcee      	bgt.n	1da76 <readline_push_history+0x3e>
            }
            MP_STATE_PORT(readline_hist)[0] = most_recent_hist;
   1da98:	4a03      	ldr	r2, [pc, #12]	; (1daa8 <readline_push_history+0x70>)
   1da9a:	68bb      	ldr	r3, [r7, #8]
   1da9c:	6693      	str	r3, [r2, #104]	; 0x68
        }
    }
}
   1da9e:	bf00      	nop
   1daa0:	3710      	adds	r7, #16
   1daa2:	46bd      	mov	sp, r7
   1daa4:	bd80      	pop	{r7, pc}
   1daa6:	bf00      	nop
   1daa8:	200012f0 	.word	0x200012f0

0001daac <GPIODirModeSet>:
   1daac:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
   1dab0:	f012 0f01 	tst.w	r2, #1
   1dab4:	b510      	push	{r4, lr}
   1dab6:	f500 6480 	add.w	r4, r0, #1024	; 0x400
   1daba:	bf14      	ite	ne
   1dabc:	430b      	orrne	r3, r1
   1dabe:	438b      	biceq	r3, r1
   1dac0:	6023      	str	r3, [r4, #0]
   1dac2:	f012 0f02 	tst.w	r2, #2
   1dac6:	f8d0 2420 	ldr.w	r2, [r0, #1056]	; 0x420
   1daca:	f500 6384 	add.w	r3, r0, #1056	; 0x420
   1dace:	bf14      	ite	ne
   1dad0:	4311      	orrne	r1, r2
   1dad2:	ea22 0101 	biceq.w	r1, r2, r1
   1dad6:	6019      	str	r1, [r3, #0]
   1dad8:	bd10      	pop	{r4, pc}

0001dada <GPIODirModeGet>:
   1dada:	2301      	movs	r3, #1
   1dadc:	fa03 f101 	lsl.w	r1, r3, r1
   1dae0:	b510      	push	{r4, lr}
   1dae2:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
   1dae6:	f8d0 2420 	ldr.w	r2, [r0, #1056]	; 0x420
   1daea:	b2c9      	uxtb	r1, r1
   1daec:	420c      	tst	r4, r1
   1daee:	bf08      	it	eq
   1daf0:	2300      	moveq	r3, #0
   1daf2:	420a      	tst	r2, r1
   1daf4:	bf14      	ite	ne
   1daf6:	2002      	movne	r0, #2
   1daf8:	2000      	moveq	r0, #0
   1dafa:	4318      	orrs	r0, r3
   1dafc:	bd10      	pop	{r4, pc}

0001dafe <GPIOPadConfigSet>:
   1dafe:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db00:	f3c2 1741 	ubfx	r7, r2, #5, #2
   1db04:	2400      	movs	r4, #0
   1db06:	f04f 0e03 	mov.w	lr, #3
   1db0a:	fa41 f504 	asr.w	r5, r1, r4
   1db0e:	07ed      	lsls	r5, r5, #31
   1db10:	d50f      	bpl.n	1db32 <GPIOPadConfigSet+0x34>
   1db12:	f8d0 6fc4 	ldr.w	r6, [r0, #4036]	; 0xfc4
   1db16:	0065      	lsls	r5, r4, #1
   1db18:	fa0e fc05 	lsl.w	ip, lr, r5
   1db1c:	ea26 060c 	bic.w	r6, r6, ip
   1db20:	f8c0 6fc4 	str.w	r6, [r0, #4036]	; 0xfc4
   1db24:	f8d0 6fc4 	ldr.w	r6, [r0, #4036]	; 0xfc4
   1db28:	fa07 f505 	lsl.w	r5, r7, r5
   1db2c:	4335      	orrs	r5, r6
   1db2e:	f8c0 5fc4 	str.w	r5, [r0, #4036]	; 0xfc4
   1db32:	3401      	adds	r4, #1
   1db34:	2c08      	cmp	r4, #8
   1db36:	d1e8      	bne.n	1db0a <GPIOPadConfigSet+0xc>
   1db38:	f8d0 4500 	ldr.w	r4, [r0, #1280]	; 0x500
   1db3c:	07d6      	lsls	r6, r2, #31
   1db3e:	f500 65a0 	add.w	r5, r0, #1280	; 0x500
   1db42:	bf4c      	ite	mi
   1db44:	430c      	orrmi	r4, r1
   1db46:	438c      	bicpl	r4, r1
   1db48:	602c      	str	r4, [r5, #0]
   1db4a:	f8d0 4504 	ldr.w	r4, [r0, #1284]	; 0x504
   1db4e:	0797      	lsls	r7, r2, #30
   1db50:	f200 5504 	addw	r5, r0, #1284	; 0x504
   1db54:	bf4c      	ite	mi
   1db56:	430c      	orrmi	r4, r1
   1db58:	438c      	bicpl	r4, r1
   1db5a:	602c      	str	r4, [r5, #0]
   1db5c:	f8d0 4508 	ldr.w	r4, [r0, #1288]	; 0x508
   1db60:	0756      	lsls	r6, r2, #29
   1db62:	f500 65a1 	add.w	r5, r0, #1288	; 0x508
   1db66:	bf4c      	ite	mi
   1db68:	430c      	orrmi	r4, r1
   1db6a:	438c      	bicpl	r4, r1
   1db6c:	602c      	str	r4, [r5, #0]
   1db6e:	f8d0 4518 	ldr.w	r4, [r0, #1304]	; 0x518
   1db72:	0717      	lsls	r7, r2, #28
   1db74:	f500 65a3 	add.w	r5, r0, #1304	; 0x518
   1db78:	bf4c      	ite	mi
   1db7a:	430c      	orrmi	r4, r1
   1db7c:	438c      	bicpl	r4, r1
   1db7e:	602c      	str	r4, [r5, #0]
   1db80:	f012 0f10 	tst.w	r2, #16
   1db84:	f8d0 253c 	ldr.w	r2, [r0, #1340]	; 0x53c
   1db88:	f200 543c 	addw	r4, r0, #1340	; 0x53c
   1db8c:	bf14      	ite	ne
   1db8e:	430a      	orrne	r2, r1
   1db90:	438a      	biceq	r2, r1
   1db92:	6022      	str	r2, [r4, #0]
   1db94:	f8d0 250c 	ldr.w	r2, [r0, #1292]	; 0x50c
   1db98:	f200 540c 	addw	r4, r0, #1292	; 0x50c
   1db9c:	07de      	lsls	r6, r3, #31
   1db9e:	bf4c      	ite	mi
   1dba0:	430a      	orrmi	r2, r1
   1dba2:	438a      	bicpl	r2, r1
   1dba4:	6022      	str	r2, [r4, #0]
   1dba6:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   1dbaa:	f500 64a2 	add.w	r4, r0, #1296	; 0x510
   1dbae:	079d      	lsls	r5, r3, #30
   1dbb0:	bf4c      	ite	mi
   1dbb2:	430a      	orrmi	r2, r1
   1dbb4:	438a      	bicpl	r2, r1
   1dbb6:	6022      	str	r2, [r4, #0]
   1dbb8:	f8d0 2514 	ldr.w	r2, [r0, #1300]	; 0x514
   1dbbc:	f200 5414 	addw	r4, r0, #1300	; 0x514
   1dbc0:	075f      	lsls	r7, r3, #29
   1dbc2:	bf4c      	ite	mi
   1dbc4:	430a      	orrmi	r2, r1
   1dbc6:	438a      	bicpl	r2, r1
   1dbc8:	6022      	str	r2, [r4, #0]
   1dbca:	f8d0 251c 	ldr.w	r2, [r0, #1308]	; 0x51c
   1dbce:	f200 541c 	addw	r4, r0, #1308	; 0x51c
   1dbd2:	071e      	lsls	r6, r3, #28
   1dbd4:	bf4c      	ite	mi
   1dbd6:	430a      	orrmi	r2, r1
   1dbd8:	438a      	bicpl	r2, r1
   1dbda:	6022      	str	r2, [r4, #0]
   1dbdc:	f8d0 2544 	ldr.w	r2, [r0, #1348]	; 0x544
   1dbe0:	f200 5444 	addw	r4, r0, #1348	; 0x544
   1dbe4:	059d      	lsls	r5, r3, #22
   1dbe6:	bf4c      	ite	mi
   1dbe8:	430a      	orrmi	r2, r1
   1dbea:	438a      	bicpl	r2, r1
   1dbec:	6022      	str	r2, [r4, #0]
   1dbee:	f8d0 2540 	ldr.w	r2, [r0, #1344]	; 0x540
   1dbf2:	f413 7f40 	tst.w	r3, #768	; 0x300
   1dbf6:	f500 64a8 	add.w	r4, r0, #1344	; 0x540
   1dbfa:	bf14      	ite	ne
   1dbfc:	430a      	orrne	r2, r1
   1dbfe:	438a      	biceq	r2, r1
   1dc00:	6022      	str	r2, [r4, #0]
   1dc02:	f500 62a5 	add.w	r2, r0, #1320	; 0x528
   1dc06:	b91b      	cbnz	r3, 1dc10 <GPIOPadConfigSet+0x112>
   1dc08:	f8d0 3528 	ldr.w	r3, [r0, #1320]	; 0x528
   1dc0c:	4319      	orrs	r1, r3
   1dc0e:	e003      	b.n	1dc18 <GPIOPadConfigSet+0x11a>
   1dc10:	f8d0 3528 	ldr.w	r3, [r0, #1320]	; 0x528
   1dc14:	ea23 0101 	bic.w	r1, r3, r1
   1dc18:	6011      	str	r1, [r2, #0]
   1dc1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001dc1c <GPIOPadConfigGet>:
   1dc1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dc20:	2401      	movs	r4, #1
   1dc22:	f8d0 5500 	ldr.w	r5, [r0, #1280]	; 0x500
   1dc26:	fa04 f101 	lsl.w	r1, r4, r1
   1dc2a:	b2c9      	uxtb	r1, r1
   1dc2c:	420d      	tst	r5, r1
   1dc2e:	bf18      	it	ne
   1dc30:	46a0      	movne	r8, r4
   1dc32:	f8d0 4504 	ldr.w	r4, [r0, #1284]	; 0x504
   1dc36:	bf08      	it	eq
   1dc38:	f04f 0800 	moveq.w	r8, #0
   1dc3c:	4221      	tst	r1, r4
   1dc3e:	f8d0 4508 	ldr.w	r4, [r0, #1288]	; 0x508
   1dc42:	bf14      	ite	ne
   1dc44:	f04f 0c02 	movne.w	ip, #2
   1dc48:	f04f 0c00 	moveq.w	ip, #0
   1dc4c:	4221      	tst	r1, r4
   1dc4e:	f8d0 4518 	ldr.w	r4, [r0, #1304]	; 0x518
   1dc52:	bf14      	ite	ne
   1dc54:	2704      	movne	r7, #4
   1dc56:	2700      	moveq	r7, #0
   1dc58:	4221      	tst	r1, r4
   1dc5a:	f8d0 453c 	ldr.w	r4, [r0, #1340]	; 0x53c
   1dc5e:	f8d0 5fc4 	ldr.w	r5, [r0, #4036]	; 0xfc4
   1dc62:	bf14      	ite	ne
   1dc64:	2608      	movne	r6, #8
   1dc66:	2600      	moveq	r6, #0
   1dc68:	4221      	tst	r1, r4
   1dc6a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1dc6e:	fa25 f404 	lsr.w	r4, r5, r4
   1dc72:	ea4f 1444 	mov.w	r4, r4, lsl #5
   1dc76:	f004 0460 	and.w	r4, r4, #96	; 0x60
   1dc7a:	ea44 0408 	orr.w	r4, r4, r8
   1dc7e:	ea44 040c 	orr.w	r4, r4, ip
   1dc82:	ea44 0407 	orr.w	r4, r4, r7
   1dc86:	bf14      	ite	ne
   1dc88:	f04f 0e10 	movne.w	lr, #16
   1dc8c:	f04f 0e00 	moveq.w	lr, #0
   1dc90:	4334      	orrs	r4, r6
   1dc92:	ea4e 0404 	orr.w	r4, lr, r4
   1dc96:	6014      	str	r4, [r2, #0]
   1dc98:	f8d0 250c 	ldr.w	r2, [r0, #1292]	; 0x50c
   1dc9c:	f8d0 4510 	ldr.w	r4, [r0, #1296]	; 0x510
   1dca0:	4211      	tst	r1, r2
   1dca2:	bf14      	ite	ne
   1dca4:	2201      	movne	r2, #1
   1dca6:	2200      	moveq	r2, #0
   1dca8:	4221      	tst	r1, r4
   1dcaa:	bf14      	ite	ne
   1dcac:	2402      	movne	r4, #2
   1dcae:	2400      	moveq	r4, #0
   1dcb0:	4322      	orrs	r2, r4
   1dcb2:	f8d0 4514 	ldr.w	r4, [r0, #1300]	; 0x514
   1dcb6:	4221      	tst	r1, r4
   1dcb8:	bf14      	ite	ne
   1dcba:	2404      	movne	r4, #4
   1dcbc:	2400      	moveq	r4, #0
   1dcbe:	4322      	orrs	r2, r4
   1dcc0:	f8d0 451c 	ldr.w	r4, [r0, #1308]	; 0x51c
   1dcc4:	4221      	tst	r1, r4
   1dcc6:	bf14      	ite	ne
   1dcc8:	2408      	movne	r4, #8
   1dcca:	2400      	moveq	r4, #0
   1dccc:	4322      	orrs	r2, r4
   1dcce:	f8d0 4540 	ldr.w	r4, [r0, #1344]	; 0x540
   1dcd2:	4221      	tst	r1, r4
   1dcd4:	d008      	beq.n	1dce8 <GPIOPadConfigGet+0xcc>
   1dcd6:	f8d0 0544 	ldr.w	r0, [r0, #1348]	; 0x544
   1dcda:	4201      	tst	r1, r0
   1dcdc:	bf14      	ite	ne
   1dcde:	f44f 7100 	movne.w	r1, #512	; 0x200
   1dce2:	f44f 7180 	moveq.w	r1, #256	; 0x100
   1dce6:	430a      	orrs	r2, r1
   1dce8:	601a      	str	r2, [r3, #0]
   1dcea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001dcee <GPIOPinRead>:
   1dcee:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   1dcf2:	4770      	bx	lr

0001dcf4 <GPIOPinWrite>:
   1dcf4:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   1dcf8:	4770      	bx	lr

0001dcfa <GPIOPinTypeUSBDigital>:
   1dcfa:	b570      	push	{r4, r5, r6, lr}
   1dcfc:	2202      	movs	r2, #2
   1dcfe:	460d      	mov	r5, r1
   1dd00:	f7ff fed4 	bl	1daac <GPIODirModeSet>
   1dd04:	4629      	mov	r1, r5
   1dd06:	2308      	movs	r3, #8
   1dd08:	2201      	movs	r2, #1
   1dd0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1dd0e:	f7ff bef6 	b.w	1dafe <GPIOPadConfigSet>

0001dd12 <GPIOPinTypeUART>:
   1dd12:	f7ff bff2 	b.w	1dcfa <GPIOPinTypeUSBDigital>
	...

0001dd18 <GPIOPinConfigure>:
   1dd18:	4a0e      	ldr	r2, [pc, #56]	; (1dd54 <GPIOPinConfigure+0x3c>)
   1dd1a:	f3c0 4307 	ubfx	r3, r0, #16, #8
   1dd1e:	6811      	ldr	r1, [r2, #0]
   1dd20:	2201      	movs	r2, #1
   1dd22:	409a      	lsls	r2, r3
   1dd24:	420a      	tst	r2, r1
   1dd26:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1dd2a:	4a0b      	ldr	r2, [pc, #44]	; (1dd58 <GPIOPinConfigure+0x40>)
   1dd2c:	bf18      	it	ne
   1dd2e:	3301      	addne	r3, #1
   1dd30:	b510      	push	{r4, lr}
   1dd32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1dd36:	f3c0 2407 	ubfx	r4, r0, #8, #8
   1dd3a:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
   1dd3e:	220f      	movs	r2, #15
   1dd40:	40a2      	lsls	r2, r4
   1dd42:	f000 000f 	and.w	r0, r0, #15
   1dd46:	ea21 0202 	bic.w	r2, r1, r2
   1dd4a:	40a0      	lsls	r0, r4
   1dd4c:	4310      	orrs	r0, r2
   1dd4e:	f8c3 052c 	str.w	r0, [r3, #1324]	; 0x52c
   1dd52:	bd10      	pop	{r4, pc}
   1dd54:	400fe06c 	.word	0x400fe06c
   1dd58:	00025ea4 	.word	0x00025ea4

0001dd5c <SysCtlPeripheralReady>:
   1dd5c:	4b09      	ldr	r3, [pc, #36]	; (1dd84 <SysCtlPeripheralReady+0x28>)
   1dd5e:	f3c0 2207 	ubfx	r2, r0, #8, #8
   1dd62:	4413      	add	r3, r2
   1dd64:	015b      	lsls	r3, r3, #5
   1dd66:	0080      	lsls	r0, r0, #2
   1dd68:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1dd6c:	f400 707f 	and.w	r0, r0, #1020	; 0x3fc
   1dd70:	f023 031f 	bic.w	r3, r3, #31
   1dd74:	f040 4084 	orr.w	r0, r0, #1107296256	; 0x42000000
   1dd78:	4318      	orrs	r0, r3
   1dd7a:	6800      	ldr	r0, [r0, #0]
   1dd7c:	3000      	adds	r0, #0
   1dd7e:	bf18      	it	ne
   1dd80:	2001      	movne	r0, #1
   1dd82:	4770      	bx	lr
   1dd84:	400fea00 	.word	0x400fea00

0001dd88 <SysCtlPeripheralEnable>:
   1dd88:	4b08      	ldr	r3, [pc, #32]	; (1ddac <SysCtlPeripheralEnable+0x24>)
   1dd8a:	f3c0 2207 	ubfx	r2, r0, #8, #8
   1dd8e:	4413      	add	r3, r2
   1dd90:	015b      	lsls	r3, r3, #5
   1dd92:	0080      	lsls	r0, r0, #2
   1dd94:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1dd98:	f400 707f 	and.w	r0, r0, #1020	; 0x3fc
   1dd9c:	f023 031f 	bic.w	r3, r3, #31
   1dda0:	f040 4084 	orr.w	r0, r0, #1107296256	; 0x42000000
   1dda4:	4318      	orrs	r0, r3
   1dda6:	2301      	movs	r3, #1
   1dda8:	6003      	str	r3, [r0, #0]
   1ddaa:	4770      	bx	lr
   1ddac:	400fe600 	.word	0x400fe600

0001ddb0 <SysCtlReset>:
   1ddb0:	4b01      	ldr	r3, [pc, #4]	; (1ddb8 <SysCtlReset+0x8>)
   1ddb2:	4a02      	ldr	r2, [pc, #8]	; (1ddbc <SysCtlReset+0xc>)
   1ddb4:	601a      	str	r2, [r3, #0]
   1ddb6:	e7fe      	b.n	1ddb6 <SysCtlReset+0x6>
   1ddb8:	e000ed0c 	.word	0xe000ed0c
   1ddbc:	05fa0004 	.word	0x05fa0004

0001ddc0 <SysCtlSleep>:
   1ddc0:	f000 b8c2 	b.w	1df48 <CPUwfi>

0001ddc4 <SysCtlDeepSleep>:
   1ddc4:	b510      	push	{r4, lr}
   1ddc6:	4c06      	ldr	r4, [pc, #24]	; (1dde0 <SysCtlDeepSleep+0x1c>)
   1ddc8:	6823      	ldr	r3, [r4, #0]
   1ddca:	f043 0304 	orr.w	r3, r3, #4
   1ddce:	6023      	str	r3, [r4, #0]
   1ddd0:	f000 f8ba 	bl	1df48 <CPUwfi>
   1ddd4:	6823      	ldr	r3, [r4, #0]
   1ddd6:	f023 0304 	bic.w	r3, r3, #4
   1ddda:	6023      	str	r3, [r4, #0]
   1dddc:	bd10      	pop	{r4, pc}
   1ddde:	bf00      	nop
   1dde0:	e000ed10 	.word	0xe000ed10

0001dde4 <SysCtlResetCauseGet>:
   1dde4:	4b01      	ldr	r3, [pc, #4]	; (1ddec <SysCtlResetCauseGet+0x8>)
   1dde6:	6818      	ldr	r0, [r3, #0]
   1dde8:	4770      	bx	lr
   1ddea:	bf00      	nop
   1ddec:	400fe05c 	.word	0x400fe05c

0001ddf0 <SysCtlResetCauseClear>:
   1ddf0:	4a02      	ldr	r2, [pc, #8]	; (1ddfc <SysCtlResetCauseClear+0xc>)
   1ddf2:	6813      	ldr	r3, [r2, #0]
   1ddf4:	ea23 0000 	bic.w	r0, r3, r0
   1ddf8:	6010      	str	r0, [r2, #0]
   1ddfa:	4770      	bx	lr
   1ddfc:	400fe05c 	.word	0x400fe05c

0001de00 <SysCtlClockGet>:
   1de00:	4b46      	ldr	r3, [pc, #280]	; (1df1c <SysCtlClockGet+0x11c>)
   1de02:	b570      	push	{r4, r5, r6, lr}
   1de04:	681d      	ldr	r5, [r3, #0]
   1de06:	691a      	ldr	r2, [r3, #16]
   1de08:	2a00      	cmp	r2, #0
   1de0a:	da10      	bge.n	1de2e <SysCtlClockGet+0x2e>
   1de0c:	f002 0370 	and.w	r3, r2, #112	; 0x70
   1de10:	2b20      	cmp	r3, #32
   1de12:	d022      	beq.n	1de5a <SysCtlClockGet+0x5a>
   1de14:	d804      	bhi.n	1de20 <SysCtlClockGet+0x20>
   1de16:	b1c3      	cbz	r3, 1de4a <SysCtlClockGet+0x4a>
   1de18:	2b10      	cmp	r3, #16
   1de1a:	d17a      	bne.n	1df12 <SysCtlClockGet+0x112>
   1de1c:	4b40      	ldr	r3, [pc, #256]	; (1df20 <SysCtlClockGet+0x120>)
   1de1e:	e01d      	b.n	1de5c <SysCtlClockGet+0x5c>
   1de20:	2b30      	cmp	r3, #48	; 0x30
   1de22:	d078      	beq.n	1df16 <SysCtlClockGet+0x116>
   1de24:	2b70      	cmp	r3, #112	; 0x70
   1de26:	d174      	bne.n	1df12 <SysCtlClockGet+0x112>
   1de28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1de2c:	e016      	b.n	1de5c <SysCtlClockGet+0x5c>
   1de2e:	f005 0330 	and.w	r3, r5, #48	; 0x30
   1de32:	2b10      	cmp	r3, #16
   1de34:	d015      	beq.n	1de62 <SysCtlClockGet+0x62>
   1de36:	d801      	bhi.n	1de3c <SysCtlClockGet+0x3c>
   1de38:	b13b      	cbz	r3, 1de4a <SysCtlClockGet+0x4a>
   1de3a:	e06a      	b.n	1df12 <SysCtlClockGet+0x112>
   1de3c:	2b20      	cmp	r3, #32
   1de3e:	d012      	beq.n	1de66 <SysCtlClockGet+0x66>
   1de40:	2b30      	cmp	r3, #48	; 0x30
   1de42:	d166      	bne.n	1df12 <SysCtlClockGet+0x112>
   1de44:	f247 5330 	movw	r3, #30000	; 0x7530
   1de48:	e00e      	b.n	1de68 <SysCtlClockGet+0x68>
   1de4a:	f3c5 1184 	ubfx	r1, r5, #6, #5
   1de4e:	4b35      	ldr	r3, [pc, #212]	; (1df24 <SysCtlClockGet+0x124>)
   1de50:	2a00      	cmp	r2, #0
   1de52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1de56:	da07      	bge.n	1de68 <SysCtlClockGet+0x68>
   1de58:	e000      	b.n	1de5c <SysCtlClockGet+0x5c>
   1de5a:	4b33      	ldr	r3, [pc, #204]	; (1df28 <SysCtlClockGet+0x128>)
   1de5c:	f412 6f00 	tst.w	r2, #2048	; 0x800
   1de60:	e004      	b.n	1de6c <SysCtlClockGet+0x6c>
   1de62:	4b2f      	ldr	r3, [pc, #188]	; (1df20 <SysCtlClockGet+0x120>)
   1de64:	e000      	b.n	1de68 <SysCtlClockGet+0x68>
   1de66:	4b30      	ldr	r3, [pc, #192]	; (1df28 <SysCtlClockGet+0x128>)
   1de68:	f415 6f00 	tst.w	r5, #2048	; 0x800
   1de6c:	d134      	bne.n	1ded8 <SysCtlClockGet+0xd8>
   1de6e:	492f      	ldr	r1, [pc, #188]	; (1df2c <SysCtlClockGet+0x12c>)
   1de70:	680e      	ldr	r6, [r1, #0]
   1de72:	684c      	ldr	r4, [r1, #4]
   1de74:	f3c4 2004 	ubfx	r0, r4, #8, #5
   1de78:	f004 041f 	and.w	r4, r4, #31
   1de7c:	3401      	adds	r4, #1
   1de7e:	0061      	lsls	r1, r4, #1
   1de80:	fb00 1101 	mla	r1, r0, r1, r1
   1de84:	fbb3 f1f1 	udiv	r1, r3, r1
   1de88:	f3c6 0309 	ubfx	r3, r6, #0, #10
   1de8c:	f3c6 2689 	ubfx	r6, r6, #10, #10
   1de90:	434e      	muls	r6, r1
   1de92:	0ab6      	lsrs	r6, r6, #10
   1de94:	fb01 6303 	mla	r3, r1, r3, r6
   1de98:	4925      	ldr	r1, [pc, #148]	; (1df30 <SysCtlClockGet+0x130>)
   1de9a:	6809      	ldr	r1, [r1, #0]
   1de9c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   1dea0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   1dea4:	f445 0580 	orr.w	r5, r5, #4194304	; 0x400000
   1dea8:	d012      	beq.n	1ded0 <SysCtlClockGet+0xd0>
   1deaa:	d807      	bhi.n	1debc <SysCtlClockGet+0xbc>
   1deac:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
   1deb0:	d00c      	beq.n	1decc <SysCtlClockGet+0xcc>
   1deb2:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
   1deb6:	d10f      	bne.n	1ded8 <SysCtlClockGet+0xd8>
   1deb8:	481e      	ldr	r0, [pc, #120]	; (1df34 <SysCtlClockGet+0x134>)
   1deba:	e00f      	b.n	1dedc <SysCtlClockGet+0xdc>
   1debc:	f5b1 4fe0 	cmp.w	r1, #28672	; 0x7000
   1dec0:	d008      	beq.n	1ded4 <SysCtlClockGet+0xd4>
   1dec2:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
   1dec6:	d107      	bne.n	1ded8 <SysCtlClockGet+0xd8>
   1dec8:	481b      	ldr	r0, [pc, #108]	; (1df38 <SysCtlClockGet+0x138>)
   1deca:	e007      	b.n	1dedc <SysCtlClockGet+0xdc>
   1decc:	481b      	ldr	r0, [pc, #108]	; (1df3c <SysCtlClockGet+0x13c>)
   1dece:	e005      	b.n	1dedc <SysCtlClockGet+0xdc>
   1ded0:	481b      	ldr	r0, [pc, #108]	; (1df40 <SysCtlClockGet+0x140>)
   1ded2:	e003      	b.n	1dedc <SysCtlClockGet+0xdc>
   1ded4:	481b      	ldr	r0, [pc, #108]	; (1df44 <SysCtlClockGet+0x144>)
   1ded6:	e001      	b.n	1dedc <SysCtlClockGet+0xdc>
   1ded8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dedc:	026e      	lsls	r6, r5, #9
   1dede:	d514      	bpl.n	1df0a <SysCtlClockGet+0x10a>
   1dee0:	2a00      	cmp	r2, #0
   1dee2:	da0d      	bge.n	1df00 <SysCtlClockGet+0x100>
   1dee4:	0054      	lsls	r4, r2, #1
   1dee6:	d505      	bpl.n	1def4 <SysCtlClockGet+0xf4>
   1dee8:	0511      	lsls	r1, r2, #20
   1deea:	d403      	bmi.n	1def4 <SysCtlClockGet+0xf4>
   1deec:	005b      	lsls	r3, r3, #1
   1deee:	f3c2 5286 	ubfx	r2, r2, #22, #7
   1def2:	e001      	b.n	1def8 <SysCtlClockGet+0xf8>
   1def4:	f3c2 52c5 	ubfx	r2, r2, #23, #6
   1def8:	3201      	adds	r2, #1
   1defa:	fbb3 f3f2 	udiv	r3, r3, r2
   1defe:	e004      	b.n	1df0a <SysCtlClockGet+0x10a>
   1df00:	f3c5 55c3 	ubfx	r5, r5, #23, #4
   1df04:	3501      	adds	r5, #1
   1df06:	fbb3 f3f5 	udiv	r3, r3, r5
   1df0a:	4298      	cmp	r0, r3
   1df0c:	bf28      	it	cs
   1df0e:	4618      	movcs	r0, r3
   1df10:	bd70      	pop	{r4, r5, r6, pc}
   1df12:	2000      	movs	r0, #0
   1df14:	bd70      	pop	{r4, r5, r6, pc}
   1df16:	f247 5330 	movw	r3, #30000	; 0x7530
   1df1a:	e79f      	b.n	1de5c <SysCtlClockGet+0x5c>
   1df1c:	400fe060 	.word	0x400fe060
   1df20:	00f42400 	.word	0x00f42400
   1df24:	00025f34 	.word	0x00025f34
   1df28:	003d0900 	.word	0x003d0900
   1df2c:	400fe160 	.word	0x400fe160
   1df30:	400fe010 	.word	0x400fe010
   1df34:	02faf080 	.word	0x02faf080
   1df38:	01312d00 	.word	0x01312d00
   1df3c:	04c4b400 	.word	0x04c4b400
   1df40:	02625a00 	.word	0x02625a00
   1df44:	017d7840 	.word	0x017d7840

0001df48 <CPUwfi>:
   1df48:	bf30      	wfi
   1df4a:	4770      	bx	lr

0001df4c <__func__.6826>:
   1df4c:	6367 665f 6572 0065                         gc_free.

0001df54 <__func__.6714>:
   1df54:	6367 695f 696e 0074                         gc_init.

0001df5c <__func__.6843>:
   1df5c:	6367 725f 6165 6c6c 636f 0000 4556 4952     gc_realloc..VERI
   1df6c:	5946 505f 5254 7028 7274 0029 2e2e 2e2f     FY_PTR(ptr).../.
   1df7c:	2f2e 7970 672f 2e63 0063 0000 5441 5f42     ./py/gc.c...ATB_
   1df8c:	4547 5f54 494b 444e 6228 6f6c 6b63 2029     GET_KIND(block) 
   1df9c:	3d3d 4120 5f54 4548 4441 0000 504d 535f     == AT_HEAD..MP_S
   1dfac:	4154 4554 4d5f 4d45 6728 5f63 6f70 6c6f     TATE_MEM(gc_pool
   1dfbc:	735f 6174 7472 2029 3d3e 4d20 5f50 5453     _start) >= MP_ST
   1dfcc:	5441 5f45 454d 284d 6367 665f 6e69 6c61     ATE_MEM(gc_final
   1dfdc:	7369 7265 745f 6261 656c 735f 6174 7472     iser_table_start
   1dfec:	2029 202b 6367 665f 6e69 6c61 7369 7265     ) + gc_finaliser
   1dffc:	745f 6261 656c 625f 7479 5f65 656c 006e     _table_byte_len.
   1e00c:	5441 5f42 4547 5f54 494b 444e 6228 296c     ATB_GET_KIND(bl)
   1e01c:	3d20 203d 5441 465f 4552 0045 4347 203a      == AT_FREE.GC: 
   1e02c:	6f74 6174 3a6c 2520 2c75 7520 6573 3a64     total: %u, used:
   1e03c:	2520 2c75 6620 6572 3a65 2520 0a75 0000      %u, free: %u...
   1e04c:	4e20 2e6f 6f20 2066 2d31 6c62 636f 736b      No. of 1-blocks
   1e05c:	203a 7525 202c 2d32 6c62 636f 736b 203a     : %u, 2-blocks: 
   1e06c:	7525 202c 616d 2078 6c62 206b 7a73 203a     %u, max blk sz: 
   1e07c:	7525 202c 616d 2078 7266 6565 7320 3a7a     %u, max free sz:
   1e08c:	2520 0a75 0000 0000 4347 6d20 6d65 726f      %u.....GC memor
   1e09c:	2079 616c 6f79 7475 203b 7266 6d6f 2520     y layout; from %
   1e0ac:	3a70 0000 000a 0000 200a 2020 2020 2020     p:.......       
   1e0bc:	2528 2075 696c 656e 2073 6c61 206c 7266     (%u lines all fr
   1e0cc:	6565 0029 250a 3530 3a78 0020 6325 0000     ee)..%05x: .%c..
   1e0dc:	0000 0000 0005 0000 07c4 5f5f 6461 5f64     ..........__add_
   1e0ec:	005f 0000 082b 5f5f 6f62 6c6f 5f5f 0000     _...+.__bool__..
   1e0fc:	0f42 5f5f 7562 6c69 5f64 6c63 7361 5f73     B.__build_class_
   1e10c:	005f 0000 08a7 5f5f 6163 6c6c 5f5f 0000     _.....__call__..
   1e11c:	092b 5f5f 6c63 7361 5f73 005f 0cc6 5f5f     +.__class__...__
   1e12c:	6f63 746e 6961 736e 5f5f 0000 0768 5f5f     contains__..h.__
   1e13c:	6564 5f6c 005f 0000 0bfd 5f5f 6564 696c     del__.....__deli
   1e14c:	6574 5f6d 005f 0000 096d 5f5f 6e65 6574     tem__...m.__ente
   1e15c:	5f72 005f 0671 5f5f 7165 5f5f 0000 0000     r__.q.__eq__....
   1e16c:	0845 5f5f 7865 7469 5f5f 0000 06a7 5f5f     E.__exit__....__
   1e17c:	6567 5f5f 0000 0000 0b40 5f5f 6567 6174     ge__....@.__geta
   1e18c:	7474 5f72 005f 0000 0b26 5f5f 6567 6974     ttr__...&.__geti
   1e19c:	6574 5f6d 005f 0000 06b6 5f5f 7467 5f5f     tem__.....__gt__
   1e1ac:	0000 0000 08f7 5f5f 6168 6873 5f5f 0000     ......__hash__..
   1e1bc:	086d 5f5f 6169 6464 5f5f 0000 0a38 5f5f     m.__iadd__..8.__
   1e1cc:	6d69 6f70 7472 5f5f 0000 0000 085f 5f5f     import__...._.__
   1e1dc:	6e69 7469 5f5f 0000 0716 5f5f 6e69 5f74     init__....__int_
   1e1ec:	005f 0000 0808 5f5f 7369 6275 5f5f 0000     _.....__isub__..
   1e1fc:	08cf 5f5f 7469 7265 5f5f 0000 06cc 5f5f     ..__iter__....__
   1e20c:	656c 5f5f 0000 0000 07e2 5f5f 656c 5f6e     le__......__len_
   1e21c:	005f 0000 065d 5f5f 746c 5f5f 0000 0000     _...].__lt__....
   1e22c:	088e 5f5f 616d 6e69 5f5f 0000 0aff 5f5f     ..__main__....__
   1e23c:	6f6d 7564 656c 5f5f 0000 0000 08e2 5f5f     module__......__
   1e24c:	616e 656d 5f5f 0000 0779 5f5f 656e 5f77     name__..y.__new_
   1e25c:	005f 0000 0802 5f5f 656e 7478 5f5f 0000     _.....__next__..
   1e26c:	08c8 5f5f 6170 6874 5f5f 0000 0c6b 5f5f     ..__path__..k.__
   1e27c:	7571 6c61 616e 656d 5f5f 0000 0e01 5f5f     qualname__....__
   1e28c:	6572 6c70 705f 6972 746e 5f5f 0000 0000     repl_print__....
   1e29c:	0810 5f5f 6572 7270 5f5f 0000 0b32 5f5f     ..__repr__..2.__
   1e2ac:	6573 6974 6574 5f6d 005f 0000 07d0 5f5f     setitem__.....__
   1e2bc:	7473 5f72 005f 0000 0721 5f5f 7573 5f62     str__...!.__sub_
   1e2cc:	005f 0000 0d4f 5f5f 7274 6361 6265 6361     _...O.__tracebac
   1e2dc:	5f6b 005f 018f 002a 01fa 005f 018a 002f     k__...*..._.../.
   1e2ec:	036c 2325 006f 0000 037b 2325 0078 0000     l.%#o...{.%#x...
   1e2fc:	0558 3a7b 6223 007d 0185 0020 01af 000a     X.{:#b}... .....
   1e30c:	2073 616d 6978 756d 206d 6572 7563 7372     s maximum recurs
   1e31c:	6f69 206e 6564 7470 2068 7865 6563 6465     ion depth exceed
   1e32c:	6465 0000 08bd 6d3c 646f 6c75 3e65 0000     ed....<module>..
   1e33c:	0880 6c3c 6d61 6462 3e61 0000 0ad4 6c3c     ..<lambda>....<l
   1e34c:	7369 6374 6d6f 3e70 0000 0000 0acc 643c     istcomp>......<d
   1e35c:	6369 6374 6d6f 3e70 0000 0000 0954 733c     ictcomp>....T.<s
   1e36c:	7465 6f63 706d 003e 0934 673c 6e65 7865     etcomp>.4.<genex
   1e37c:	7270 003e 0852 733c 7274 6e69 3e67 0000     pr>.R.<string>..
   1e38c:	07e3 733c 6474 6e69 003e 0000 05b7 7475     ..<stdin>.....ut
   1e39c:	2d66 0038 061a 662f 616c 6873 0000 0000     f-8.../flash....
   1e3ac:	0a92 662f 616c 6873 6c2f 6269 0000 0000     ../flash/lib....
   1e3bc:	0364 4150 0030 0000 0365 4150 0031 0000     d.PA0...e.PA1...
   1e3cc:	0366 4150 0032 0000 0367 4150 0033 0000     f.PA2...g.PA3...
   1e3dc:	0360 4150 0034 0000 0361 4150 0035 0000     `.PA4...a.PA5...
   1e3ec:	0362 4150 0036 0000 0363 4150 0037 0000     b.PA6...c.PA7...
   1e3fc:	0387 4250 0030 0000 0386 4250 0031 0000     ..PB0.....PB1...
   1e40c:	0385 4250 0032 0000 0384 4250 0033 0000     ..PB2.....PB3...
   1e41c:	0383 4250 0034 0000 0382 4250 0035 0000     ..PB4.....PB5...
   1e42c:	0381 4250 0036 0000 0380 4250 0037 0000     ..PB6.....PB7...
   1e43c:	03a6 4350 0030 0000 03a7 4350 0031 0000     ..PC0.....PC1...
   1e44c:	03a4 4350 0032 0000 03a5 4350 0033 0000     ..PC2.....PC3...
   1e45c:	03a2 4350 0034 0000 03a3 4350 0035 0000     ..PC4.....PC5...
   1e46c:	03a0 4350 0036 0000 03a1 4350 0037 0000     ..PC6.....PC7...
   1e47c:	03c1 4450 0030 0000 03c0 4450 0031 0000     ..PD0.....PD1...
   1e48c:	03c3 4450 0032 0000 03c2 4450 0033 0000     ..PD2.....PD3...
   1e49c:	03c5 4450 0034 0000 03c4 4450 0035 0000     ..PD4.....PD5...
   1e4ac:	03c7 4450 0036 0000 03c6 4450 0037 0000     ..PD6.....PD7...
   1e4bc:	03e0 4550 0030 0000 03e1 4550 0031 0000     ..PE0.....PE1...
   1e4cc:	03e2 4550 0032 0000 03e3 4550 0033 0000     ..PE2.....PE3...
   1e4dc:	03e4 4550 0034 0000 03e5 4550 0035 0000     ..PE4.....PE5...
   1e4ec:	0303 4650 0030 0000 0302 4650 0031 0000     ..PF0.....PF1...
   1e4fc:	0301 4650 0032 0000 0301 4650 0033 0000     ..PF2.....PF3...
   1e50c:	0307 4650 0034 0000 088a 4441 5f43 4941     ..PF4.....ADC_AI
   1e51c:	304e 0000 088b 4441 5f43 4941 314e 0000     N0....ADC_AIN1..
   1e52c:	09db 4441 5f43 4941 314e 0030 09da 4441     ..ADC_AIN10...AD
   1e53c:	5f43 4941 314e 0031 0888 4441 5f43 4941     C_AIN11...ADC_AI
   1e54c:	324e 0000 0889 4441 5f43 4941 334e 0000     N2....ADC_AIN3..
   1e55c:	088e 4441 5f43 4941 344e 0000 088f 4441     ..ADC_AIN4....AD
   1e56c:	5f43 4941 354e 0000 088c 4441 5f43 4941     C_AIN5....ADC_AI
   1e57c:	364e 0000 088d 4441 5f43 4941 374e 0000     N6....ADC_AIN7..
   1e58c:	0882 4441 5f43 4941 384e 0000 0883 4441     ..ADC_AIN8....AD
   1e59c:	5f43 4941 394e 0000 080e 3249 3043 535f     C_AIN9....I2C0_S
   1e5ac:	4c43 0000 08e4 3249 3043 535f 4144 0000     CL....I2C0_SDA..
   1e5bc:	088f 3249 3143 535f 4c43 0000 08a5 3249     ..I2C1_SCL....I2
   1e5cc:	3143 535f 4144 0000 080c 3249 3243 535f     C1_SDA....I2C2_S
   1e5dc:	4c43 0000 088d 3249 3343 535f 4c43 0000     CL....I2C3_SCL..
   1e5ec:	0e21 544a 4741 545f 4b43 535f 4357 4b4c     !.JTAG_TCK_SWCLK
   1e5fc:	0000 0000 089b 544a 4741 545f 4944 0000     ......JTAG_TDI..
   1e60c:	0c49 544a 4741 545f 4f44 535f 4f57 0000     I.JTAG_TDO_SWO..
   1e61c:	0e11 544a 4741 545f 534d 535f 4457 4f49     ..JTAG_TMS_SWDIO
   1e62c:	0000 0000 0c97 544d 4c52 5f30 4146 4c55     ......MTRL0_FAUL
   1e63c:	3054 0000 0a97 544d 4c52 5f30 5750 304d     T0....MTRL0_PWM0
   1e64c:	0000 0000 0a96 544d 4c52 5f30 5750 314d     ......MTRL0_PWM1
   1e65c:	0000 0000 0a95 544d 4c52 5f30 5750 324d     ......MTRL0_PWM2
   1e66c:	0000 0000 0a94 544d 4c52 5f30 5750 334d     ......MTRL0_PWM3
   1e67c:	0000 0000 0a93 544d 4c52 5f30 5750 344d     ......MTRL0_PWM4
   1e68c:	0000 0000 0a92 544d 4c52 5f30 5750 354d     ......MTRL0_PWM5
   1e69c:	0000 0000 0a91 544d 4c52 5f30 5750 364d     ......MTRL0_PWM6
   1e6ac:	0000 0000 0a90 544d 4c52 5f30 5750 374d     ......MTRL0_PWM7
   1e6bc:	0000 0000 0c76 544d 4c52 5f31 4146 4c55     ....v.MTRL1_FAUL
   1e6cc:	3054 0000 0a36 544d 4c52 5f31 5750 304d     T0..6.MTRL1_PWM0
   1e6dc:	0000 0000 0a37 544d 4c52 5f31 5750 314d     ....7.MTRL1_PWM1
   1e6ec:	0000 0000 0a34 544d 4c52 5f31 5750 324d     ....4.MTRL1_PWM2
   1e6fc:	0000 0000 0a35 544d 4c52 5f31 5750 334d     ....5.MTRL1_PWM3
   1e70c:	0000 0000 0a32 544d 4c52 5f31 5750 344d     ....2.MTRL1_PWM4
   1e71c:	0000 0000 0a33 544d 4c52 5f31 5750 354d     ....3.MTRL1_PWM5
   1e72c:	0000 0000 0a30 544d 4c52 5f31 5750 364d     ....0.MTRL1_PWM6
   1e73c:	0000 0000 0a31 544d 4c52 5f31 5750 374d     ....1.MTRL1_PWM7
   1e74c:	0000 0000 038f 4d4e 0049 0000 0802 4551     ......NMI.....QE
   1e75c:	5f49 4449 3058 0000 0803 4551 5f49 4449     I_IDX0....QEI_ID
   1e76c:	3158 0000 093a 4954 304d 435f 5043 0030     X1..:.TIM0_CCP0.
   1e77c:	093b 4954 304d 435f 5043 0031 099b 4954     ;.TIM0_CCP1...TI
   1e78c:	314d 435f 5043 0030 099a 4954 314d 435f     M1_CCP0...TIM1_C
   1e79c:	5043 0031 09f8 4954 324d 435f 5043 0030     CP1...TIM2_CCP0.
   1e7ac:	09f9 4954 324d 435f 5043 0031 0959 4954     ..TIM2_CCP1.Y.TI
   1e7bc:	334d 435f 5043 0030 0958 4954 334d 435f     M3_CCP0.X.TIM3_C
   1e7cc:	5043 0031 09be 4954 344d 435f 5043 0030     CP1...TIM4_CCP0.
   1e7dc:	09bf 4954 344d 435f 5043 0031 091f 4954     ..TIM4_CCP1...TI
   1e7ec:	354d 435f 5043 0030 091e 4954 354d 435f     M5_CCP0...TIM5_C
   1e7fc:	5043 0031 0508 5254 445f 0030 0509 5254     CP1...TR_D0...TR
   1e80c:	445f 0031 099d 4155 5452 5f31 5443 0053     _D1...UART1_CTS.
   1e81c:	094c 4155 5452 5f31 5452 0053 07a7 5355     L.UART1_RTS...US
   1e82c:	3042 445f 004d 0000 07ba 5355 3042 445f     B0_DM.....USB0_D
   1e83c:	0050 0000 09f0 5355 3042 455f 4550 004e     P.....USB0_EPEN.
   1e84c:	07c3 5355 3042 495f 0044 0000 09a0 5355     ..USB0_ID.....US
   1e85c:	3042 505f 4c46 0054 091c 5355 3042 565f     B0_PFLT...USB0_V
   1e86c:	5542 0053 0aed 5457 4d49 5f30 4343 3050     BUS...WTIM0_CCP0
   1e87c:	0000 0000 0aec 5457 4d49 5f30 4343 3150     ......WTIM0_CCP1
   1e88c:	0000 0000 0a0c 5457 4d49 5f31 4343 3050     ......WTIM1_CCP0
   1e89c:	0000 0000 0a0d 5457 4d49 5f31 4343 3150     ......WTIM1_CCP1
   1e8ac:	0000 0000 0a2f 5457 4d49 5f32 4343 3050     ..../.WTIM2_CCP0
   1e8bc:	0000 0000 0a2e 5457 4d49 5f32 4343 3150     ......WTIM2_CCP1
   1e8cc:	0000 0000 0a4e 5457 4d49 5f33 4343 3050     ....N.WTIM3_CCP0
   1e8dc:	0000 0000 0a4f 5457 4d49 5f33 4343 3150     ....O.WTIM3_CCP1
   1e8ec:	0000 0000 0a69 5457 4d49 5f34 4343 3050     ....i.WTIM4_CCP0
   1e8fc:	0000 0000 0a68 5457 4d49 5f34 4343 3150     ....h.WTIM4_CCP1
   1e90c:	0000 0000 0a88 5457 4d49 5f35 4343 3050     ......WTIM5_CCP0
   1e91c:	0000 0000 0a89 5457 4d49 5f35 4343 3150     ......WTIM5_CCP1
   1e92c:	0000 0000 037c 4c41 0054 0000 0ef8 4c41     ....|.ALT.....AL
   1e93c:	5f54 504f 4e45 445f 4152 4e49 0000 0000     T_OPEN_DRAIN....
   1e94c:	06af 4e41 4c41 474f 0000 0000 0f2d 7241     ..ANALOG....-.Ar
   1e95c:	7469 6d68 7465 6369 7245 6f72 0072 0000     ithmeticError...
   1e96c:	0e97 7341 6573 7472 6f69 456e 7272 726f     ..AssertionError
   1e97c:	0000 0000 0e21 7441 7274 6269 7475 4565     ....!.AttributeE
   1e98c:	7272 726f 0000 0000 0d07 6142 6573 7845     rror......BaseEx
   1e99c:	6563 7470 6f69 006e 0f14 4544 5045 4c53     ception...DEEPSL
   1e9ac:	4545 5f50 4552 4553 0054 0000 0891 4f45     EEP_RESET.....EO
   1e9bc:	4546 7272 726f 0000 08f0 6c45 696c 7370     FError....Ellips
   1e9cc:	7369 0000 09f2 7845 6563 7470 6f69 006e     is....Exception.
   1e9dc:	0d16 6547 656e 6172 6f74 4572 6978 0074     ..GeneratorExit.
   1e9ec:	0ab0 4148 4452 525f 5345 5445 0000 0000     ..HARD_RESET....
   1e9fc:	08a4 4948 505f 574f 5245 0000 0222 4e49     ..HI_POWER..".IN
   1ea0c:	0000 0000 08c1 5249 5f51 4f42 4854 0000     ......IRQ_BOTH..
   1ea1c:	0b37 5249 5f51 4146 4c4c 4e49 0047 0000     7.IRQ_FALLING...
   1ea2c:	083e 5249 5f51 4948 4847 0000 07e4 5249     >.IRQ_HIGH....IR
   1ea3c:	5f51 4f4c 0057 0000 0a78 5249 5f51 4952     Q_LOW...x.IRQ_RI
   1ea4c:	4953 474e 0000 0000 0b20 6d49 6f70 7472     SING.... .Import
   1ea5c:	7245 6f72 0072 0000 105c 6e49 6564 746e     Error...\.Indent
   1ea6c:	7461 6f69 456e 7272 726f 0000 0a83 6e49     ationError....In
   1ea7c:	6564 4578 7272 726f 0000 0000 08ea 654b     dexError......Ke
   1ea8c:	4579 7272 726f 0000 11af 654b 6279 616f     yError....Keyboa
   1ea9c:	6472 6e49 6574 7272 7075 0074 09b1 4f4c     rdInterrupt...LO
   1eaac:	5f57 4f50 4557 0052 0bff 6f4c 6b6f 7075     W_POWER...Lookup
   1eabc:	7245 6f72 0072 0000 0969 454d 5f44 4f50     Error...i.MED_PO
   1eacc:	4557 0052 0bdc 654d 6f6d 7972 7245 6f72     WER...MemoryErro
   1eadc:	0072 0000 09ba 614e 656d 7245 6f72 0072     r.....NameError.
   1eaec:	0817 6f4e 656e 7954 6570 0000 13c6 6f4e     ..NoneType....No
   1eafc:	4974 706d 656c 656d 746e 6465 7245 6f72     tImplementedErro
   1eb0c:	0072 0000 0a5e 504f 4e45 445f 4152 4e49     r...^.OPEN_DRAIN
   1eb1c:	0000 0000 07a1 534f 7245 6f72 0072 0000     ......OSError...
   1eb2c:	030b 554f 0054 0000 0d81 764f 7265 6c66     ..OUT.....Overfl
   1eb3c:	776f 7245 6f72 0072 09ad 5550 4c4c 445f     owError...PULL_D
   1eb4c:	574f 004e 0955 5550 4c4c 4e5f 4e4f 0045     OWN.U.PULL_NONE.
   1eb5c:	07ba 5550 4c4c 555f 0050 0000 0bdb 5750     ..PULL_UP.....PW
   1eb6c:	4f52 5f4e 4552 4553 0054 0000 0312 6950     RON_RESET.....Pi
   1eb7c:	006e 0000 0c61 7552 746e 6d69 4565 7272     n...a.RuntimeErr
   1eb8c:	726f 0000 0a01 4f53 5446 525f 5345 5445     or....SOFT_RESET
   1eb9c:	0000 0000 0dea 7453 706f 7449 7265 7461     ......StopIterat
   1ebac:	6f69 006e 0b94 7953 746e 7861 7245 6f72     ion...SyntaxErro
   1ebbc:	0072 0000 0a20 7953 7473 6d65 7845 7469     r... .SystemExit
   1ebcc:	0000 0000 0925 7954 6570 7245 6f72 0072     ....%.TypeError.
   1ebdc:	0a96 6156 756c 4565 7272 726f 0000 0000     ..ValueError....
   1ebec:	0908 4457 5f54 4552 4553 0054 11b6 655a     ..WDT_RESET...Ze
   1ebfc:	6f72 6944 6976 6973 6e6f 7245 6f72 0072     roDivisionError.
   1ec0c:	0395 6261 0073 0000 0222 6661 0000 0000     ..abs...".af....
   1ec1c:	075f 6661 6c5f 7369 0074 0000 0344 6c61     _.af_list...D.al
   1ec2c:	006c 0000 035c 6c61 0074 0000 0313 6e61     l...\.alt.....an
   1ec3c:	0079 0000 066b 7061 6570 646e 0000 0000     y...k.append....
   1ec4c:	04c2 7261 7367 0000 03e0 6962 006e 0000     ..args....bin...
   1ec5c:	057f 6f62 7261 0064 04eb 6f62 6c6f 0000     ..board...bool..
   1ec6c:	0ae2 6f62 746f 6f6c 6461 7265 0000 0000     ..bootloader....
   1ec7c:	0c97 6f62 6e75 5f64 656d 6874 646f 0000     ..bound_method..
   1ec8c:	08f7 7562 6c69 6974 736e 0000 0822 7962     ..builtins..".by
   1ec9c:	6574 6f63 6564 0000 055c 7962 6574 0073     tecode..\.bytes.
   1ecac:	080d 6163 6c6c 6261 656c 0000 03dc 6863     ..callable....ch
   1ecbc:	0072 0000 0bb4 6c63 7361 6d73 7465 6f68     r.....classmetho
   1eccc:	0064 0000 057c 6c63 6165 0072 0533 6c63     d...|.clear.3.cl
   1ecdc:	736f 0065 0774 6c63 736f 7275 0065 0000     ose.t.closure...
   1ecec:	079b 6f63 6c6c 6365 0074 0000 05c0 6f63     ..collect.....co
   1ecfc:	736e 0074 04e0 6f63 7970 0000 05a6 6f63     nst...copy....co
   1ed0c:	6e75 0074 03c3 7063 0075 0000 05d4 6564     unt...cpu.....de
   1ed1c:	7562 0067 043f 6964 7463 0000 092d 6964     bug.?.dict..-.di
   1ed2c:	7463 765f 6569 0077 03fa 6964 0072 0000     ct_view...dir...
   1ed3c:	0791 6964 6173 6c62 0065 0000 06b8 6964     ..disable.....di
   1ed4c:	6d76 646f 0000 0000 0549 7264 7669 0065     vmod....I.drive.
   1ed5c:	0604 6e65 6261 656c 0000 0000 030a 6e65     ..enable......en
   1ed6c:	0064 0000 081b 6e65 7364 6977 6874 0000     d.....endswith..
   1ed7c:	049b 7665 6c61 0000 041e 7865 6365 0000     ..eval....exec..
   1ed8c:	0663 7865 6574 646e 0000 0000 0401 6966     c.extend......fi
   1ed9c:	646e 0000 0626 6f66 6d72 7461 0000 0000     nd..&.format....
   1edac:	04e5 7266 7165 0000 0a35 7266 6d6f 625f     ..freq..5.from_b
   1edbc:	7479 7365 0000 0000 0837 7266 6d6f 656b     ytes....7.fromke
   1edcc:	7379 0000 0827 7566 636e 6974 6e6f 0000     ys..'.function..
   1eddc:	0261 6367 0000 0000 0996 6567 656e 6172     a.gc......genera
   1edec:	6f74 0072 0333 6567 0074 0000 07c0 6567     tor.3.get.....ge
   1edfc:	6174 7474 0072 0000 079d 6c67 626f 6c61     tattr.....global
   1ee0c:	0073 0000 0454 7067 6f69 0000 078c 6168     s...T.gpio....ha
   1ee1c:	6173 7474 0072 0000 04b7 6168 6873 0000     sattr.....hash..
   1ee2c:	09ad 6568 7061 6c5f 636f 006b 0b56 6568     ..heap_lock.V.he
   1ee3c:	7061 755f 6c6e 636f 006b 0000 0370 6568     ap_unlock...p.he
   1ee4c:	0078 0000 042b 6968 6867 0000 0228 6469     x...+.high..(.id
   1ee5c:	0000 0000 057b 6e69 6564 0078 04eb 6e69     ....{.index...in
   1ee6c:	6f66 0000 041f 6e69 7469 0000 0612 6e69     fo....init....in
   1ee7c:	6573 7472 0000 0000 0316 6e69 0074 0000     sert......int...
   1ee8c:	038f 7269 0071 0000 07eb 7369 6c61 6870     ..irq.....isalph
   1ee9c:	0061 0000 07a8 7369 6964 6967 0074 0000     a.....isdigit...
   1eeac:	099a 7369 6e65 6261 656c 0064 0ab6 7369     ..isenabled...is
   1eebc:	6e69 7473 6e61 6563 0000 0000 07fc 7369     instance......is
   1eecc:	6f6c 6577 0072 0000 075b 7369 7073 6361     lower...[.isspac
   1eedc:	0065 0000 0ab5 7369 7573 6362 616c 7373     e.....issubclass
   1eeec:	0000 0000 07dd 7369 7075 6570 0072 0000     ......isupper...
   1eefc:	05e3 7469 6d65 0073 048f 7469 7265 0000     ..items...iter..
   1ef0c:	0847 7469 7265 7461 726f 0000 04a7 6f6a     G.iterator....jo
   1ef1c:	6e69 0000 0332 656b 0079 0000 0401 656b     in..2.key.....ke
   1ef2c:	7379 0000 0362 656c 006e 0000 0427 696c     ys..b.len...'.li
   1ef3c:	7473 0000 0689 696c 7474 656c 0000 0000     st....little....
   1ef4c:	063b 6f6c 6163 736c 0000 0000 0331 6f6c     ;.locals....1.lo
   1ef5c:	0077 0000 05c6 6f6c 6577 0072 06e5 736c     w.....lower...ls
   1ef6c:	7274 7069 0000 0000 03b9 616d 0070 0000     trip......map...
   1ef7c:	065e 616d 7070 7265 0000 0000 0952 656d     ^.mapper....R.me
   1ef8c:	5f6d 6c61 6f6c 0063 08cb 656d 5f6d 7266     m_alloc...mem_fr
   1ef9c:	6565 0000 0b0b 696d 7263 706f 7479 6f68     ee....micropytho
   1efac:	006e 0000 0426 6f6d 6564 0000 06bf 6f6d     n...&.mode....mo
   1efbc:	7564 656c 0000 0000 04a2 616e 656d 0000     dule......name..
   1efcc:	0591 616e 656d 0073 0442 656e 7478 0000     ..names.B.next..
   1efdc:	0690 626f 656a 7463 0000 0000 03fd 636f     ..object......oc
   1efec:	0074 0000 038a 666f 0066 0000 0264 6e6f     t.....off...d.on
   1effc:	0000 0000 0987 706f 5f74 656c 6576 006c     ......opt_level.
   1f00c:	031c 726f 0064 0000 0af3 6570 646e 745f     ..ord.....pend_t
   1f01c:	7268 776f 0000 0000 03f2 6970 006e 0000     hrow......pin...
   1f02c:	032a 6f70 0070 0000 07bf 6f70 6970 6574     *.pop.....popite
   1f03c:	006d 0000 045c 6f70 7472 0000 032d 6f70     m...\.port..-.po
   1f04c:	0077 0000 0554 7270 6e69 0074 0480 7570     w...T.print...pu
   1f05c:	6c6c 0000 051a 6172 676e 0065 0663 6572     ll....range.c.re
   1f06c:	6f6d 6576 0000 0000 0749 6572 6c70 6361     move....I.replac
   1f07c:	0065 0000 04d0 6572 7270 0000 0510 6572     e.....repr....re
   1f08c:	6573 0074 0bce 6572 6573 5f74 6163 7375     set...reset_caus
   1f09c:	0065 0000 0725 6572 6576 7372 0065 0000     e...%.reverse...
   1f0ac:	05d2 6672 6e69 0064 06e9 6972 646e 7865     ..rfind...rindex
   1f0bc:	0000 0000 05e7 6f72 6e75 0064 06a5 7372     ......round...rs
   1f0cc:	6c70 7469 0000 0000 063b 7372 7274 7069     plit....;.rstrip
   1f0dc:	0000 0000 04b9 6573 646e 0000 0323 6573     ......send..#.se
   1f0ec:	0070 0000 07d4 6573 6174 7474 0072 0000     p.....setattr...
   1f0fc:	0a6c 6573 6474 6665 7561 746c 0000 0000     l.setdefault....
   1f10c:	0ae1 6f73 7466 725f 7365 7465 0000 0000     ..soft_reset....
   1f11c:	04bf 6f73 7472 0000 065e 6f73 7472 6465     ..sort..^.sorted
   1f12c:	0000 0000 05b7 7073 696c 0074 0585 7473     ......split...st
   1f13c:	7261 0074 0a74 7473 7261 7374 6977 6874     art.t.startswith
   1f14c:	0000 0000 0c62 7473 7461 6369 656d 6874     ....b.staticmeth
   1f15c:	646f 0000 0457 7473 7065 0000 049d 7473     od..W.step....st
   1f16c:	706f 0000 0350 7473 0072 0000 0529 7473     op..P.str...).st
   1f17c:	6972 0070 032e 7573 006d 0000 05c4 7573     rip...sum.....su
   1f18c:	6570 0072 09f2 6874 6572 6873 6c6f 0064     per...threshold.
   1f19c:	05b3 6874 6f72 0077 08d8 6f74 625f 7479     ..throw...to_byt
   1f1ac:	7365 0000 05fd 7574 6c70 0065 049d 7974     es....tuple...ty
   1f1bc:	6570 0000 0895 6d75 6361 6968 656e 0000     pe....umachine..
   1f1cc:	0904 6e75 7169 6575 695f 0064 06b4 7075     ..unique_id...up
   1f1dc:	6164 6574 0000 0000 0527 7075 6570 0072     date....'.upper.
   1f1ec:	054e 6176 756c 0065 067d 6176 756c 7365     N.value.}.values
   1f1fc:	0000 0000 03e6 697a 0070 0000               ......zip...

0001f208 <mp_qstr_const_pool>:
	...
   1f210:	000a 0000 017d 0000 e0dc 0001 e0e0 0001     ....}...........
   1f220:	e0e4 0001 e0f0 0001 e0fc 0001 e110 0001     ................
   1f230:	e11c 0001 e128 0001 e138 0001 e144 0001     ....(...8...D...
   1f240:	e154 0001 e160 0001 e16c 0001 e178 0001     T...`...l...x...
   1f250:	e184 0001 e194 0001 e1a4 0001 e1b0 0001     ................
   1f260:	e1bc 0001 e1c8 0001 e1d8 0001 e1e4 0001     ................
   1f270:	e1f0 0001 e1fc 0001 e208 0001 e214 0001     ................
   1f280:	e220 0001 e22c 0001 e238 0001 e248 0001      ...,...8...H...
   1f290:	e254 0001 e260 0001 e26c 0001 e278 0001     T...`...l...x...
   1f2a0:	e288 0001 e29c 0001 e2a8 0001 e2b8 0001     ................
   1f2b0:	e2c4 0001 e2d0 0001 e2e0 0001 e2e4 0001     ................
   1f2c0:	e2e8 0001 e2ec 0001 e2f4 0001 e2fc 0001     ................
   1f2d0:	e304 0001 e308 0001 e30c 0001 e330 0001     ............0...
   1f2e0:	e33c 0001 e348 0001 e358 0001 e368 0001     <...H...X...h...
   1f2f0:	e374 0001 e380 0001 e38c 0001 e398 0001     t...............
   1f300:	e3a0 0001 e3ac 0001 e3bc 0001 e3c4 0001     ................
   1f310:	e3cc 0001 e3d4 0001 e3dc 0001 e3e4 0001     ................
   1f320:	e3ec 0001 e3f4 0001 e3fc 0001 e404 0001     ................
   1f330:	e40c 0001 e414 0001 e41c 0001 e424 0001     ............$...
   1f340:	e42c 0001 e434 0001 e43c 0001 e444 0001     ,...4...<...D...
   1f350:	e44c 0001 e454 0001 e45c 0001 e464 0001     L...T...\...d...
   1f360:	e46c 0001 e474 0001 e47c 0001 e484 0001     l...t...|.......
   1f370:	e48c 0001 e494 0001 e49c 0001 e4a4 0001     ................
   1f380:	e4ac 0001 e4b4 0001 e4bc 0001 e4c4 0001     ................
   1f390:	e4cc 0001 e4d4 0001 e4dc 0001 e4e4 0001     ................
   1f3a0:	e4ec 0001 e4f4 0001 e4fc 0001 e504 0001     ................
   1f3b0:	e50c 0001 e514 0001 e520 0001 e52c 0001     ........ ...,...
   1f3c0:	e538 0001 e544 0001 e550 0001 e55c 0001     8...D...P...\...
   1f3d0:	e568 0001 e574 0001 e580 0001 e58c 0001     h...t...........
   1f3e0:	e598 0001 e5a4 0001 e5b0 0001 e5bc 0001     ................
   1f3f0:	e5c8 0001 e5d4 0001 e5e0 0001 e5ec 0001     ................
   1f400:	e600 0001 e60c 0001 e61c 0001 e630 0001     ............0...
   1f410:	e640 0001 e650 0001 e660 0001 e670 0001     @...P...`...p...
   1f420:	e680 0001 e690 0001 e6a0 0001 e6b0 0001     ................
   1f430:	e6c0 0001 e6d0 0001 e6e0 0001 e6f0 0001     ................
   1f440:	e700 0001 e710 0001 e720 0001 e730 0001     ........ ...0...
   1f450:	e740 0001 e750 0001 e758 0001 e764 0001     @...P...X...d...
   1f460:	e770 0001 e77c 0001 e788 0001 e794 0001     p...|...........
   1f470:	e7a0 0001 e7ac 0001 e7b8 0001 e7c4 0001     ................
   1f480:	e7d0 0001 e7dc 0001 e7e8 0001 e7f4 0001     ................
   1f490:	e800 0001 e808 0001 e810 0001 e81c 0001     ................
   1f4a0:	e828 0001 e834 0001 e840 0001 e84c 0001     (...4...@...L...
   1f4b0:	e858 0001 e864 0001 e870 0001 e880 0001     X...d...p.......
   1f4c0:	e890 0001 e8a0 0001 e8b0 0001 e8c0 0001     ................
   1f4d0:	e8d0 0001 e8e0 0001 e8f0 0001 e900 0001     ................
   1f4e0:	e910 0001 e920 0001 e930 0001 e938 0001     .... ...0...8...
   1f4f0:	e94c 0001 e958 0001 e96c 0001 e980 0001     L...X...l.......
   1f500:	e994 0001 e9a4 0001 e9b8 0001 e9c4 0001     ................
   1f510:	e9d0 0001 e9dc 0001 e9ec 0001 e9fc 0001     ................
   1f520:	ea08 0001 ea10 0001 ea1c 0001 ea2c 0001     ............,...
   1f530:	ea38 0001 ea44 0001 ea54 0001 ea64 0001     8...D...T...d...
   1f540:	ea78 0001 ea88 0001 ea94 0001 eaa8 0001     x...............
   1f550:	eab4 0001 eac4 0001 ead0 0001 eae0 0001     ................
   1f560:	eaec 0001 eaf8 0001 eb10 0001 eb20 0001     ............ ...
   1f570:	eb2c 0001 eb34 0001 eb44 0001 eb50 0001     ,...4...D...P...
   1f580:	eb5c 0001 eb68 0001 eb78 0001 eb80 0001     \...h...x.......
   1f590:	eb90 0001 eba0 0001 ebb0 0001 ebc0 0001     ................
   1f5a0:	ebd0 0001 ebdc 0001 ebec 0001 ebf8 0001     ................
   1f5b0:	ec0c 0001 ec14 0001 ec1c 0001 ec28 0001     ............(...
   1f5c0:	ec30 0001 ec38 0001 ec40 0001 ec4c 0001     0...8...@...L...
   1f5d0:	ec54 0001 ec5c 0001 ec64 0001 ec6c 0001     T...\...d...l...
   1f5e0:	ec7c 0001 ec8c 0001 ec98 0001 eca4 0001     |...............
   1f5f0:	ecac 0001 ecb8 0001 ecc0 0001 ecd0 0001     ................
   1f600:	ecd8 0001 ece0 0001 ecec 0001 ecf8 0001     ................
   1f610:	ed00 0001 ed08 0001 ed10 0001 ed18 0001     ................
   1f620:	ed20 0001 ed28 0001 ed34 0001 ed3c 0001      ...(...4...<...
   1f630:	ed48 0001 ed54 0001 ed5c 0001 ed68 0001     H...T...\...h...
   1f640:	ed70 0001 ed7c 0001 ed84 0001 ed8c 0001     p...|...........
   1f650:	ed98 0001 eda0 0001 edac 0001 edb4 0001     ................
   1f660:	edc4 0001 edd0 0001 eddc 0001 ede4 0001     ................
   1f670:	edf0 0001 edf8 0001 ee04 0001 ee10 0001     ................
   1f680:	ee18 0001 ee24 0001 ee2c 0001 ee38 0001     ....$...,...8...
   1f690:	ee48 0001 ee50 0001 ee58 0001 ee60 0001     H...P...X...`...
   1f6a0:	ee68 0001 ee70 0001 ee78 0001 ee84 0001     h...p...x.......
   1f6b0:	ee8c 0001 ee94 0001 eea0 0001 eeac 0001     ................
   1f6c0:	eeb8 0001 eec8 0001 eed4 0001 eee0 0001     ................
   1f6d0:	eef0 0001 eefc 0001 ef04 0001 ef0c 0001     ................
   1f6e0:	ef18 0001 ef20 0001 ef28 0001 ef30 0001     .... ...(...0...
   1f6f0:	ef38 0001 ef40 0001 ef4c 0001 ef58 0001     8...@...L...X...
   1f700:	ef60 0001 ef68 0001 ef74 0001 ef7c 0001     `...h...t...|...
   1f710:	ef88 0001 ef94 0001 efa0 0001 efb0 0001     ................
   1f720:	efb8 0001 efc4 0001 efcc 0001 efd4 0001     ................
   1f730:	efdc 0001 efe8 0001 eff0 0001 eff8 0001     ................
   1f740:	f000 0001 f00c 0001 f014 0001 f024 0001     ............$...
   1f750:	f02c 0001 f034 0001 f040 0001 f048 0001     ,...4...@...H...
   1f760:	f050 0001 f058 0001 f060 0001 f068 0001     P...X...`...h...
   1f770:	f074 0001 f080 0001 f088 0001 f090 0001     t...............
   1f780:	f0a0 0001 f0ac 0001 f0b4 0001 f0c0 0001     ................
   1f790:	f0c8 0001 f0d4 0001 f0e0 0001 f0e8 0001     ................
   1f7a0:	f0f0 0001 f0fc 0001 f10c 0001 f11c 0001     ................
   1f7b0:	f124 0001 f130 0001 f138 0001 f140 0001     $...0...8...@...
   1f7c0:	f150 0001 f160 0001 f168 0001 f170 0001     P...`...h...p...
   1f7d0:	f178 0001 f180 0001 f188 0001 f190 0001     x...............
   1f7e0:	f19c 0001 f1a4 0001 f1b0 0001 f1b8 0001     ................
   1f7f0:	f1c0 0001 f1cc 0001 f1d8 0001 f1e4 0001     ................
   1f800:	f1ec 0001 f1f4 0001 f200 0001 656c 206e     ............len 
   1f810:	203c 3128 3c20 203c 3828 2a20 4d20 4349     < (1 << (8 * MIC
   1f820:	4f52 5950 515f 5453 5f52 5942 4554 5f53     ROPY_QSTR_BYTES_
   1f830:	4e49 4c5f 4e45 2929 0000 0000 2e2e 2e2f     IN_LEN))....../.
   1f840:	2f2e 7970 712f 7473 2e72 0063               ./py/qstr.c.

0001f84c <__func__.6499>:
   1f84c:	7371 7274 665f 6f72 5f6d 7473 6e72 0000     qstr_from_strn..

0001f85c <pad_spaces>:
   1f85c:	2020 2020 2020 2020 2020 2020 2020 2020                     
   1f86c:	0000 0000                                   ....

0001f870 <pad_zeroes>:
   1f870:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   1f880:	0000 0000                                   ....

0001f884 <mp_plat_print>:
   1f884:	0000 0000 19f5 0000 6162 6573 3d20 203d     ........base == 
   1f894:	2032 7c7c 6220 7361 2065 3d3d 3820 7c20     2 || base == 8 |
   1f8a4:	207c 6162 6573 3d20 203d 3031 7c20 207c     | base == 10 || 
   1f8b4:	6162 6573 3d20 203d 3631 0000 2e2e 2e2f     base == 16..../.
   1f8c4:	2f2e 7970 6d2f 7070 6972 746e 632e 0000     ./py/mpprint.c..
   1f8d4:	0000 0000 7274 6575 0000 0000 6166 736c     ....true....fals
   1f8e4:	0065 0000 6e28 6c75 296c 0000 662a 746d     e...(null)..*fmt
   1f8f4:	3d20 203d 2527 2027 7c7c 2120 7522 736e      == '%' || !"uns
   1f904:	7075 6f70 7472 6465 6620 746d 6320 6168     upported fmt cha
   1f914:	2272 0000                                   r"..

0001f918 <__func__.7545>:
   1f918:	706d 705f 6972 746e 6d5f 5f70 6e69 0074     mp_print_mp_int.

0001f928 <__func__.7610>:
   1f928:	706d 765f 7270 6e69 6674 0000               mp_vprintf..

0001f934 <attr>:
	...
   1f93c:	0300 0303 0303 0000 0000 0000 0000 0000     ................
	...
   1f954:	0103 0101 0101 0101 0101 0101 0101 0101     ................
   1f964:	4545 4545 4545 4545 4545 0101 0101 0101     EEEEEEEEEE......
   1f974:	5901 5959 5959 1959 1919 1919 1919 1919     .YYYYYY.........
   1f984:	1919 1919 1919 1919 1919 0119 0101 0101     ................
   1f994:	6901 6969 6969 2969 2929 2929 2929 2929     .iiiiii)))))))))
   1f9a4:	2929 2929 2929 2929 2929 0129 0101 0001     ))))))))))).....
   1f9b4:	2928 5d5b 7d7b 3a2c 403b 3c7e 3d65 3c63     ()[]{},:;@~<e=c<
   1f9c4:	3d65 653e 633d 653e 2a3d 3d65 2a63 3d65     e=>e=c>e=*e=c*e=
   1f9d4:	652b 2d3d 3d65 3e65 6526 7c3d 3d65 652f     +e=-e=e>&e=|e=/e
   1f9e4:	633d 652f 253d 3d65 655e 3d3d 3d65 2e21     =c/e=%e=^e==e=!.
   1f9f4:	0000 0000                                   ....

0001f9f8 <tok_enc>:
   1f9f8:	f9b4 0001                                   ....

0001f9fc <tok_enc_kind>:
   1f9fc:	4342 4544 4746 4948 4c4b 363d 373e 3858     BCDEFGHIKL=6>7X8
   1fa0c:	393f 3157 3250 2f59 304e 5a4f 543a 553b     ?9W1P2Y/N0OZ:T;U
   1fa1c:	5133 5234 5335 563c 404d 0000 6146 736c     3Q4R5S<VM@..Fals
   1fa2c:	0065 0000 6f4e 656e 0000 0000 7254 6575     e...None....True
   1fa3c:	0000 0000 5f5f 6564 7562 5f67 005f 0000     ....__debug__...
   1fa4c:	6e61 0064 7361 0000 7361 6573 7472 0000     and.as..assert..
   1fa5c:	7262 6165 006b 0000 6c63 7361 0073 0000     break...class...
   1fa6c:	6f63 746e 6e69 6575 0000 0000 6564 0066     continue....def.
   1fa7c:	6564 006c 6c65 6669 0000 0000 6c65 6573     del.elif....else
   1fa8c:	0000 0000 7865 6563 7470 0000 6966 616e     ....except..fina
   1fa9c:	6c6c 0079 6f66 0072 7266 6d6f 0000 0000     lly.for.from....
   1faac:	6c67 626f 6c61 0000 6669 0000 6d69 6f70     global..if..impo
   1fabc:	7472 0000 6e69 0000 7369 0000 616c 626d     rt..in..is..lamb
   1facc:	6164 0000 6f6e 6c6e 636f 6c61 0000 0000     da..nonlocal....
   1fadc:	6f6e 0074 726f 0000 6170 7373 0000 0000     not.or..pass....
   1faec:	6172 7369 0065 0000 6572 7574 6e72 0000     raise...return..
   1fafc:	7274 0079 6877 6c69 0065 0000 6977 6874     try.while...with
   1fb0c:	0000 0000 6979 6c65 0064 0000               ....yield...

0001fb18 <tok_kw>:
   1fb18:	fa28 0001 fa30 0001 fa38 0001 fa40 0001     (...0...8...@...
   1fb28:	fa4c 0001 fa50 0001 fa54 0001 fa5c 0001     L...P...T...\...
   1fb38:	fa64 0001 fa6c 0001 fa78 0001 fa7c 0001     d...l...x...|...
   1fb48:	fa80 0001 fa88 0001 fa90 0001 fa98 0001     ................
   1fb58:	faa0 0001 faa4 0001 faac 0001 fab4 0001     ................
   1fb68:	fab8 0001 fac0 0001 fac4 0001 fac8 0001     ................
   1fb78:	fad0 0001 fadc 0001 fae0 0001 fae4 0001     ................
   1fb88:	faec 0001 faf4 0001 fafc 0001 fb00 0001     ................
   1fb98:	fb08 0001 fb10 0001 6e75 6369 646f 2065     ........unicode 
   1fba8:	616e 656d 6520 6373 7061 7365 0000 0000     name escapes....

0001fbb8 <rule_act_table>:
   1fbb8:	3261 a862 2233 2233 2121 2221 2221 2422     a2b.3"3"!!!"!""$
   1fbc8:	2222 2623 2725 2424 6232 a4a4 3131 3122     ""#&%'$$2b..11"1
   1fbd8:	3122 3131 3131 6231 6262 2323 2323 2223     "111111bbb#####"
   1fbe8:	3333 a523 0022 1213 2162 3224 6212 1333     33#."...b!$2.b3.
   1fbf8:	2263 6223 2262 1333 2262 6222 1261 1862     c"#bb"3.b""ba.b.
   1fc08:	6212 6232 1212 151c 6262 1212 1362 3263     .b2b....bb..b.c2
   1fc18:	2212 6262 3133 3131 1862 2432 6312 6224     ."bb3111b.2$.c$b
   1fc28:	2332 3163 6262 6412 2412 1212 2219 2122     2#c1bb.d.$...""!
   1fc38:	1212 1214 1113 6232 121c 1262 6212 1333     ......2b..b..b3.
   1fc48:	1233 1262 3322 3363 2213 6222 6212 a512     3.b."3c3.""b.b..
   1fc58:	1223 0022                                   #.".

0001fc5c <rule_arg_combined_table>:
   1fc5c:	3001 2037 203b 203c 1017 1007 1042 303e     .07 ; < ....B.>0
   1fc6c:	1043 303d 1049 2076 204f 104b 2006 3050     C.=0I.v O K.. P0
   1fc7c:	2055 1048 1018 2090 1028 1014 1016 102a     U H.... (.....*.
   1fc8c:	3031 2034 1029 3058 1021 2065 101e 205b     104 ).X0!.e ..[ 
   1fc9c:	1021 205d 101f 2067 1025 2067 1013 2078     !.] ..g %.g ..x 
   1fcac:	3068 1020 2078 1049 2076 306a 3072 102c     h0 .x I.v j0r0,.
   1fcbc:	2078 1049 2076 3072 101d 2090 1022 2031     x I.v r0... ".1 
   1fccc:	1049 2076 3072 102b 1049 2076 206c 102d     I.v r0+.I.v l -.
   1fcdc:	2073 1049 2076 204d 201c 3079 1024 3046     s I.v M . y0$.F0
   1fcec:	1049 2078 1024 3046 1049 207a 201d 1027     I.x $.F0I.z . '.
   1fcfc:	207b 1011 1026 207b 2021 207c 1031 2021     { ..&.{ ! | 1.! 
   1fd0c:	2022 103b 2023 103c 2024 103a 2025 2080     " ;.# <.$ :.% . 
   1fd1c:	2026 2081 2083 2082 2084 2083 2085 3087     & . . . . . . .0
   1fd2c:	2088 3086 1042 3089 1043 1044 308a 1045     . .0B..0C.D..0E.
   1fd3c:	1046 3092 1047 1042 3097 1043 1044 2030     F..0G.B..0C.D.0 
   1fd4c:	1045 104a 1007 2078 1048 2078 1048 2078     E.J...x H.x H.x 
   1fd5c:	1049 2078 1015 1007 3096 1049 2076 102e     I.x .....0I.v ..
   1fd6c:	30a1 1004 204e 2069 1004 204d 2031 3039     .0..N i ..M 1 90
   1fd7c:	1004 104c 2066 302d 1004 203a 2033 2003     ..L.f -0..: 3 . 
   1fd8c:	105a 2078 203f 1048 2040 2041 2042 1007     Z.x ? H.@ A B ..
   1fd9c:	3043 3044 1031 3045 1032 1007 3043 1049     C0D01.E02...C0I.
   1fdac:	2078 104d 2078 1007 3043 2047 1048 2048     x M.x ..C0G H.H 
   1fdbc:	2049 204a 1007 304b 1031 304c 1032 1007     I J ..K01.L02...
   1fdcc:	104d 2078 1007 2069 204e 2004 1004 2007     M.x ..i N . ... 
   1fddc:	2008 2057 205a 2010 2011 2012 2005 2051     . W Z . . . . Q 
   1fdec:	2052 2056 2054 2053 104d 2054 2034 2006     R V T S M.T 4 . 
   1fdfc:	2020 2078 104e 104f 1050 1051 1053 1054       x N.O.P.Q.S.T.
   1fe0c:	1055 1056 1058 1057 1059 1052 2009 200a     U.V.X.W.Y.R.. . 
   1fe1c:	200b 200d 200c 2078 3059 101e 2078 200e     . . . x Y0..x . 
   1fe2c:	200f 2066 205c 205f 3066 1031 205e 2064     . f \ _ f01.^ d 
   1fe3c:	1042 2064 1043 2060 104a 100c 1007 3063     B.d C.` J.....c0
   1fe4c:	2066 3063 1012 1007 2061 1048 2062 1048     f c0....a H.b H.
   1fe5c:	1007 104a 1007 1048 1048 2078 2013 2014     ..J...H.H.x . . 
   1fe6c:	2015 2016 2017 2003 2033 2002 206b 1019     . . . . 3 . k ..
   1fe7c:	2078 1049 2076 206d 2071 2070 3072 3071     x I.v m q p r0q0
   1fe8c:	101b 306f 1049 2076 2078 3063 206e 101c     ..o0I.v x c0n ..
   1fe9c:	1049 2076 101a 1049 2076 2074 1048 2078     I.v ..I.v t H.x 
   1feac:	3075 1012 2021 2077 204e 1004 1005 2018     u0..! w N ..... 
   1febc:	1006 201a 2019 1020 201c 101a 2078 201b     ... .  .. ..x . 
   1fecc:	201c 201e 201f 1036 1038 1040 103e 103f     . . . 6.8.@.>.?.
   1fedc:	1041 1022 207d 207e 1026 1022 1023 307f     A.".} ~ &.".#..0
   1feec:	1026 1037 1039 102f 1030 1031 1033 1035     &.7.9./.0.1.3.5.
   1fefc:	1034 2027 2028 102f 1030 103d 2029 208f     4.' ( /.0.=.) . 
   1ff0c:	1032 2083 1007 1008 1009 100a 100b 100c     2.. ............
   1ff1c:	100e 100f 100d 202a 202b 202c 2034 208a     ......* + , 4 . 
   1ff2c:	208b 308c 2020 2078 209f 208d 1048 308e     . .0  x . . H..0
   1ff3c:	208b 1048 202d 202e 202f 2091 1048 2020     . H.- . / . H.  
   1ff4c:	2021 2032 3093 209f 2094 1048 3095 2032     ! 2 .0. . H..02 
   1ff5c:	1048 1042 3097 1043 2098 1048 2099 209a     H.B..0C.. H.. . 
   1ff6c:	209b 1031 2078 1032 2078 2078 309c 209f     . 1.x 2.x x .0. 
   1ff7c:	209d 104d 2078 209f 20a0 101d 2090 1022     . M.x . . ... ".
   1ff8c:	201c 309e 1020 207a 309e 20a2 2031 101e     . .0 .z .0. 1 ..
   1ff9c:	2078 0000                                   x ..

0001ffa0 <rule_arg_offset_table>:
   1ffa0:	0100 0402 0e0c 1210 1514 1716 1a19 1e1c     ................
   1ffb0:	2422 2926 342f 3f3b 4443 4a46 504e 5452     "$&)/4;?CDFJNPRT
   1ffc0:	5856 5c5a 605e 6462 6866 6d6a 7370 7976     VXZ\^`bdfhjmpsvy
   1ffd0:	7d7b 827f 0087 8c89 908e 9591 9896 9c9a     {}..............
   1ffe0:	a29f a7a4 aba9 afad b4b2 b8b6 bbba bfbd     ................
   1fff0:	c9c7 cccb d0ce ded2 e5e3 e9e7 edeb f3f0     ................
   20000:	f6f4 faf8 fefc 0200 0604 0f0e 1513 1c18     ................
   20010:	1f1e 2522 2927 2d2b 3331 3937 443b 4846     .."%')+-1379;DFH
   20020:	4b49 514d 5653 5857 665a 6a68 6e6c 7270     IKMQSVWXZfhjlnpr
   20030:	7775 7b79 7f7d 8481 8986 8d8b 918f 9593     uwy{}...........
   20040:	9d9a 009f                                   ....

00020044 <FIRST_RULE_WITH_OFFSET_ABOVE_255>:
   20044:	0066 0000 6128 6772 2620 5220 4c55 5f45     f...(arg & RULE_
   20054:	5241 5f47 494b 444e 4d5f 5341 294b 3d20     ARG_KIND_MASK) =
   20064:	203d 5552 454c 415f 4752 525f 4c55 2045     = RULE_ARG_RULE 
   20074:	7c7c 2820 7261 2067 2026 5552 454c 415f     || (arg & RULE_A
   20084:	4752 4b5f 4e49 5f44 414d 4b53 2029 3d3d     RG_KIND_MASK) ==
   20094:	5220 4c55 5f45 5241 5f47 504f 5f54 5552      RULE_ARG_OPT_RU
   200a4:	454c 0000 2e2e 2e2f 2f2e 7970 702f 7261     LE..../../py/par
   200b4:	6573 632e 0000 0000 6170 7372 7265 3e2d     se.c....parser->
   200c4:	6572 7573 746c 735f 6174 6b63 745f 706f     result_stack_top
   200d4:	3e20 3020 0000 0000 6170 7372 7265 3e2d      > 0....parser->
   200e4:	6572 7573 746c 735f 6174 6b63 745f 706f     result_stack_top
   200f4:	3e20 7020 736f 0000 6f74 206b 3d3d 4d20      > pos..tok == M
   20104:	5f50 4f54 454b 5f4e 504f 545f 4c49 4544     P_TOKEN_OP_TILDE
   20114:	0000 0000 696b 646e 3d20 203d 5552 454c     ....kind == RULE
   20124:	415f 4752 525f 4c55 0045 0000 2069 203e     _ARG_RULE...i > 
   20134:	0030 0000 2069 3d3d 6e20 0000 7228 6c75     0...i == n..(rul
   20144:	5f65 6361 2074 2026 5552 454c 415f 5443     e_act & RULE_ACT
   20154:	4b5f 4e49 5f44 414d 4b53 2029 3d3d 5220     _KIND_MASK) == R
   20164:	4c55 5f45 4341 5f54 494c 5453 0000 0000     ULE_ACT_LIST....
   20174:	6128 6772 2620 5220 4c55 5f45 5241 5f47     (arg & RULE_ARG_
   20184:	494b 444e 4d5f 5341 294b 3d20 203d 5552     KIND_MASK) == RU
   20194:	454c 415f 4752 525f 4c55 0045 2069 3d3e     LE_ARG_RULE.i >=
   201a4:	3120 0000 6e75 7865 6570 7463 6465 6920      1..unexpected i
   201b4:	646e 6e65 0074 0000 6e75 6e69 6564 746e     ndent...unindent
   201c4:	6420 656f 6e73 7427 6d20 7461 6863 6120      doesn't match a
   201d4:	796e 6f20 7475 7265 6920 646e 6e65 2074     ny outer indent 
   201e4:	656c 6576 006c 0000 6e69 6176 696c 2064     level...invalid 
   201f4:	7973 746e 7861 0000 6170 7372 7265 722e     syntax..parser.r
   20204:	7365 6c75 5f74 7473 6361 5f6b 6f74 2070     esult_stack_top 
   20214:	3d3d 3120 0000 0000                         == 1....

0002021c <__func__.8039>:
   2021c:	7570 6873 725f 6c75 5f65 7266 6d6f 615f     push_rule_from_a
   2022c:	6772 0000                                   rg..

00020230 <__func__.8067>:
   20230:	6f70 5f70 6572 7573 746c 0000               pop_result..

0002023c <__func__.8072>:
   2023c:	6570 6b65 725f 7365 6c75 0074               peek_result.

00020248 <token_to_op.8138>:
   20248:	1b1a ff1c 1dff ff1f ff18 0019               ............

00020254 <__func__.8147>:
   20254:	6f66 646c 635f 6e6f 7473 6e61 7374 0000     fold_constants..

00020264 <__func__.8185>:
   20264:	706d 705f 7261 6573 0000 0000               mp_parse....

00020270 <scope_simple_name_table>:
   20270:	0031 3332 3534 0036 504d 505f 5241 4553     1.23456.MP_PARSE
   20280:	4e5f 444f 5f45 5349 535f 5254 4355 2854     _NODE_IS_STRUCT(
   20290:	6e70 0029 2e2e 2e2f 2f2e 7970 732f 6f63     pn).../../py/sco
   202a0:	6570 632e 0000 0000 6373 706f 2d65 703e     pe.c....scope->p
   202b0:	7261 6e65 2074 3d21 4e20 4c55 004c 0000     arent != NULL...
   202c0:	2d73 703e 7261 6e65 2074 3d21 4e20 4c55     s->parent != NUL
   202d0:	004c 0000 6469 3e2d 696b 646e 3d20 203d     L...id->kind == 
   202e0:	4449 495f 464e 5f4f 494b 444e 465f 4552     ID_INFO_KIND_FRE
   202f0:	2045 7c7c 6920 2d64 6b3e 6e69 2064 3d3d     E || id->kind ==
   20300:	4920 5f44 4e49 4f46 4b5f 4e49 5f44 4543      ID_INFO_KIND_CE
   20310:	4c4c 0000                                   LL..

00020314 <__func__.5824>:
   20314:	6373 706f 5f65 656e 0077 0000               scope_new...

00020320 <__func__.5853>:
   20320:	6373 706f 5f65 6c63 736f 5f65 766f 7265     scope_close_over
   20330:	695f 5f6e 6170 6572 746e 0073 6f63 706d     _in_parents.comp
   20340:	3e2d 7563 5f72 7865 6563 7470 6c5f 7665     ->cur_except_lev
   20350:	6c65 3e20 3020 0000 2e2e 2e2f 2f2e 7970     el > 0..../../py
   20360:	632f 6d6f 6970 656c 632e 0000 504d 505f     /compile.c..MP_P
   20370:	5241 4553 4e5f 444f 5f45 5349 535f 5254     ARSE_NODE_IS_STR
   20380:	4355 5f54 494b 444e 7028 736e 3e2d 6f6e     UCT_KIND(pns->no
   20390:	6564 5b73 5d30 202c 4e50 745f 7365 6c74     des[0], PN_testl
   203a0:	7369 5f74 6f63 706d 0029 0000 504d 505f     ist_comp)...MP_P
   203b0:	5241 4553 4e5f 444f 5f45 5349 535f 5254     ARSE_NODE_IS_STR
   203c0:	4355 2854 6e70 3173 3e2d 6f6e 6564 5b73     UCT(pns1->nodes[
   203d0:	206e 202d 5d31 0029 504d 505f 5241 4553     n - 1]).MP_PARSE
   203e0:	4e5f 444f 5f45 5349 495f 2844 6e70 3173     _NODE_IS_ID(pns1
   203f0:	3e2d 6f6e 6564 5b73 5d30 0029 6163 276e     ->nodes[0]).can'
   20400:	2074 7361 6973 6e67 7420 206f 7865 7270     t assign to expr
   20410:	7365 6973 6e6f 0000 756d 746c 7069 656c     ession..multiple
   20420:	2a20 2078 6e69 6120 7373 6769 6d6e 6e65      *x in assignmen
   20430:	0074 0000 4d21 5f50 4150 5352 5f45 4f4e     t...!MP_PARSE_NO
   20440:	4544 495f 5f53 554e 4c4c 7028 296e 0000     DE_IS_NULL(pn)..
   20450:	504d 505f 5241 4553 4e5f 444f 5f45 5349     MP_PARSE_NODE_IS
   20460:	4e5f 4c55 284c 6e70 3273 3e2d 6f6e 6564     _NULL(pns2->node
   20470:	5b73 5d30 0029 0000 5f6e 6f70 5f73 6564     s[0])...n_pos_de
   20480:	6166 6c75 7374 3e20 203d 0030 5f6e 776b     faults >= 0.n_kw
   20490:	645f 6665 7561 746c 2073 3d3e 3020 0000     _defaults >= 0..
   204a0:	504d 505f 5241 4553 4e5f 444f 5f45 5349     MP_PARSE_NODE_IS
   204b0:	535f 5254 4355 2854 6e70 0029 6e70 6b5f     _STRUCT(pn).pn_k
   204c0:	6e69 2064 3d3d 5020 5f4e 6176 6172 6772     ind == PN_vararg
   204d0:	6c73 7369 5f74 616e 656d 0000 6f6e 2d6e     slist_name..non-
   204e0:	6564 6166 6c75 2074 7261 7567 656d 746e     default argument
   204f0:	6620 6c6f 6f6c 7377 6420 6665 7561 746c      follows default
   20500:	6120 6772 6d75 6e65 0074 0000 6e69 6176      argument...inva
   20510:	696c 2064 696d 7263 706f 7479 6f68 206e     lid micropython 
   20520:	6564 6f63 6172 6f74 0072 0000 504d 505f     decorator...MP_P
   20530:	5241 4553 4e5f 444f 5f45 5349 535f 5254     ARSE_NODE_IS_STR
   20540:	4355 5f54 494b 444e 6e28 646f 7365 695b     UCT_KIND(nodes[i
   20550:	2c5d 5020 5f4e 6564 6f63 6172 6f74 2972     ], PN_decorator)
   20560:	0000 0000 504d 505f 5241 4553 4e5f 444f     ....MP_PARSE_NOD
   20570:	5f45 5349 495f 2844 616e 656d 6e5f 646f     E_IS_ID(name_nod
   20580:	7365 6a5b 295d 0000 504d 505f 5241 4553     es[j])..MP_PARSE
   20590:	4e5f 444f 5f45 5453 5552 5443 4b5f 4e49     _NODE_STRUCT_KIN
   205a0:	2844 6e70 5f73 6f62 7964 2029 3d3d 5020     D(pns_body) == P
   205b0:	5f4e 6c63 7361 6473 6665 0000 504d 505f     N_classdef..MP_P
   205c0:	5241 4553 4e5f 444f 5f45 5349 535f 5254     ARSE_NODE_IS_STR
   205d0:	4355 5f54 494b 444e 7028 2c6e 5020 5f4e     UCT_KIND(pn, PN_
   205e0:	6574 7473 696c 7473 635f 6d6f 2970 0000     testlist_comp)..
   205f0:	504d 505f 5241 4553 4e5f 444f 5f45 5349     MP_PARSE_NODE_IS
   20600:	4e5f 4c55 284c 6e70 3173 3e2d 6f6e 6564     _NULL(pns1->node
   20610:	5b73 5d30 0029 0000 6163 276e 2074 6564     s[0])...can't de
   20620:	656c 6574 6520 7078 6572 7373 6f69 006e     lete expression.
   20630:	6227 6572 6b61 2027 756f 7374 6469 2065     'break' outside 
   20640:	6f6c 706f 0000 0000 6327 6e6f 6974 756e     loop....'continu
   20650:	2765 6f20 7475 6973 6564 6c20 6f6f 0070     e' outside loop.
   20660:	6f63 706d 3e2d 7563 5f72 7865 6563 7470     comp->cur_except
   20670:	6c5f 7665 6c65 3e20 203d 6f63 706d 3e2d     _level >= comp->
   20680:	7262 6165 5f6b 6f63 746e 6e69 6575 655f     break_continue_e
   20690:	6378 7065 5f74 656c 6576 006c 7227 7465     xcept_level.'ret
   206a0:	7275 276e 6f20 7475 6973 6564 6620 6e75     urn' outside fun
   206b0:	7463 6f69 006e 0000 504d 505f 5241 4553     ction...MP_PARSE
   206c0:	4e5f 444f 5f45 5349 535f 5254 4355 5f54     _NODE_IS_STRUCT_
   206d0:	494b 444e 7028 2c6e 5020 5f4e 6f64 7474     KIND(pn, PN_dott
   206e0:	6465 6e5f 6d61 2965 0000 0000 4d21 5f50     ed_name)....!MP_
   206f0:	4150 5352 5f45 4f4e 4544 495f 5f53 554e     PARSE_NODE_IS_NU
   20700:	4c4c 7028 5f6e 6d69 6f70 7472 735f 756f     LL(pn_import_sou
   20710:	6372 2965 0000 0000 504d 505f 5241 4553     rce)....MP_PARSE
   20720:	4e5f 444f 5f45 5349 535f 5254 4355 5f54     _NODE_IS_STRUCT_
   20730:	494b 444e 7028 5f6e 6f6e 6564 5b73 5d69     KIND(pn_nodes[i]
   20740:	202c 4e50 695f 706d 726f 5f74 7361 6e5f     , PN_import_as_n
   20750:	6d61 2965 0000 0000 6469 6e65 6974 6966     ame)....identifi
   20760:	7265 7220 6465 6665 6e69 6465 6120 2073     er redefined as 
   20770:	6c67 626f 6c61 0000 6f6e 6220 6e69 6964     global..no bindi
   20780:	676e 6620 726f 6e20 6e6f 6f6c 6163 206c     ng for nonlocal 
   20790:	6f66 6e75 0064 0000 6469 6e65 6974 6966     found...identifi
   207a0:	7265 7220 6465 6665 6e69 6465 6120 2073     er redefined as 
   207b0:	6f6e 6c6e 636f 6c61 0000 0000 6163 276e     nonlocal....can'
   207c0:	2074 6564 6c63 7261 2065 6f6e 6c6e 636f     t declare nonloc
   207d0:	6c61 6920 206e 756f 6574 2072 6f63 6564     al in outer code
   207e0:	0000 0000 504d 505f 5241 4553 4e5f 444f     ....MP_PARSE_NOD
   207f0:	5f45 5349 535f 5254 4355 5f54 494b 444e     E_IS_STRUCT_KIND
   20800:	7028 5f6e 6c65 6669 695b 2c5d 5020 5f4e     (pn_elif[i], PN_
   20810:	6669 735f 6d74 5f74 6c65 6669 0029 0000     if_stmt_elif)...
   20820:	504d 505f 5241 4553 4e5f 444f 5f45 5349     MP_PARSE_NODE_IS
   20830:	535f 414d 4c4c 495f 544e 7028 5f6e 7473     _SMALL_INT(pn_st
   20840:	7065 0029 504d 505f 5241 4553 4e5f 444f     ep).MP_PARSE_NOD
   20850:	5f45 5349 535f 5254 4355 5f54 494b 444e     E_IS_STRUCT_KIND
   20860:	7028 5f6e 7865 6563 7470 5b73 5d69 202c     (pn_excepts[i], 
   20870:	4e50 745f 7972 735f 6d74 5f74 7865 6563     PN_try_stmt_exce
   20880:	7470 0029 6564 6166 6c75 2074 6527 6378     pt).default 'exc
   20890:	7065 2774 6d20 7375 2074 6562 6c20 7361     ept' must be las
   208a0:	0074 0000 504d 505f 5241 4553 4e5f 444f     t...MP_PARSE_NOD
   208b0:	5f45 5349 4e5f 4c55 284c 6e70 655f 736c     E_IS_NULL(pn_els
   208c0:	2965 0000 504d 505f 5241 4553 4e5f 444f     e)..MP_PARSE_NOD
   208d0:	5f45 5349 535f 5254 4355 2854 6e70 2d73     E_IS_STRUCT(pns-
   208e0:	6e3e 646f 7365 315b 295d 0000 206e 203e     >nodes[1])..n > 
   208f0:	0030 0000 504d 505f 5241 4553 4e5f 444f     0...MP_PARSE_NOD
   20900:	5f45 5349 545f 4b4f 4e45 7028 736e 2d31     E_IS_TOKEN(pns1-
   20910:	6e3e 646f 7365 305b 295d 0000 504d 505f     >nodes[0])..MP_P
   20920:	5241 4553 4e5f 444f 5f45 5349 535f 5254     ARSE_NODE_IS_STR
   20930:	4355 5f54 494b 444e 7028 736e 3e2d 6f6e     UCT_KIND(pns->no
   20940:	6564 5b73 5d31 202c 4e50 745f 7365 5f74     des[1], PN_test_
   20950:	6669 655f 736c 2965 0000 0000 504d 505f     if_else)....MP_P
   20960:	5241 4553 4e5f 444f 5f45 5349 535f 5254     ARSE_NODE_IS_STR
   20970:	4355 2854 6e70 2d73 6e3e 646f 7365 695b     UCT(pns->nodes[i
   20980:	295d 0000 696b 646e 3d20 203d 4e50 635f     ])..kind == PN_c
   20990:	6d6f 5f70 706f 695f 0073 0000 782a 6d20     omp_op_is...*x m
   209a0:	7375 2074 6562 6120 7373 6769 6d6e 6e65     ust be assignmen
   209b0:	2074 6174 6772 7465 0000 0000 6f74 206b     t target....tok 
   209c0:	3d3d 4d20 5f50 4f54 454b 5f4e 504f 445f     == MP_TOKEN_OP_D
   209d0:	4c42 4d5f 524f 0045 6f74 206b 3d3d 4d20     BL_MORE.tok == M
   209e0:	5f50 4f54 454b 5f4e 504f 545f 4c49 4544     P_TOKEN_OP_TILDE
   209f0:	0000 0000 7573 6570 2872 2029 6163 276e     ....super() can'
   20a00:	2074 6966 646e 7320 6c65 0066 6163 276e     t find self.can'
   20a10:	2074 6168 6576 6d20 6c75 6974 6c70 2065     t have multiple 
   20a20:	782a 0000 6163 276e 2074 6168 6576 6d20     *x..can't have m
   20a30:	6c75 6974 6c70 2065 2a2a 0078 484c 2053     ultiple **x.LHS 
   20a40:	666f 6b20 7965 6f77 6472 6120 6772 6d20     of keyword arg m
   20a50:	7375 2074 6562 6120 206e 6469 0000 0000     ust be an id....
   20a60:	6f6e 2d6e 656b 7779 726f 2064 7261 2067     non-keyword arg 
   20a70:	6661 6574 2072 2f2a 2a2a 0000 6f6e 2d6e     after */**..non-
   20a80:	656b 7779 726f 2064 7261 2067 6661 6574     keyword arg afte
   20a90:	2072 656b 7779 726f 2064 7261 0067 0000     r keyword arg...
   20aa0:	504d 505f 5241 4553 4e5f 444f 5f45 5453     MP_PARSE_NODE_ST
   20ab0:	5552 5443 4e5f 4d55 4e5f 444f 5345 7028     RUCT_NUM_NODES(p
   20ac0:	736e 2029 3d3d 3220 0000 0000 504d 505f     ns) == 2....MP_P
   20ad0:	5241 4553 4e5f 444f 5f45 5349 535f 5254     ARSE_NODE_IS_STR
   20ae0:	4355 5f54 494b 444e 7028 736e 3e2d 6f6e     UCT_KIND(pns->no
   20af0:	6564 5b73 5d31 202c 4e50 635f 6d6f 5f70     des[1], PN_comp_
   20b00:	6f66 2972 0000 0000 4d21 5f50 4150 5352     for)....!MP_PARS
   20b10:	5f45 4f4e 4544 495f 5f53 554e 4c4c 7028     E_NODE_IS_NULL(p
   20b20:	736e 3e2d 6f6e 6564 5b73 5d31 0029 0000     ns->nodes[1])...
   20b30:	504d 505f 5241 4553 4e5f 444f 5f45 5349     MP_PARSE_NODE_IS
   20b40:	4e5f 4c55 284c 6e70 3373 3e2d 6f6e 6564     _NULL(pns3->node
   20b50:	5b73 5d30 0029 0000 6e69 6176 696c 2064     s[0])...invalid 
   20b60:	7973 746e 7861 0000 504d 505f 5241 4553     syntax..MP_PARSE
   20b70:	4e5f 444f 5f45 5453 5552 5443 4b5f 4e49     _NODE_STRUCT_KIN
   20b80:	2844 6e70 3173 2029 3d3d 5020 5f4e 6f63     D(pns1) == PN_co
   20b90:	706d 665f 726f 0000 0030 0000 7927 6569     mp_for..0...'yie
   20ba0:	646c 2027 756f 7374 6469 2065 7566 636e     ld' outside func
   20bb0:	6974 6e6f 0000 0000                         tion....

00020bb8 <compile_function>:
   20bb8:	50dd 0000 50dd 0000 5e61 0000 6019 0000     .P...P..a^...`..
   20bc8:	50dd 0000 77dd 0000 5265 0000 62d1 0000     .P...w..eR...b..
   20bd8:	50dd 0000 62f5 0000 62f5 0000 6385 0000     .P...b...b...c..
   20be8:	63dd 0000 6405 0000 66c1 0000 66e5 0000     .c...d...f...f..
   20bf8:	6a19 0000 6a19 0000 6acd 0000 6b4d 0000     .j...j...j..Mk..
   20c08:	6d05 0000 6ff1 0000 75ad 0000 7755 0000     .m...o...u..Uw..
   20c18:	50dd 0000 7a35 0000 7af1 0000 7af1 0000     .P..5z...z...z..
   20c28:	7b39 0000 7b39 0000 7bb5 0000 7be1 0000     9{..9{...{...{..
   20c38:	7e09 0000 7e2d 0000 7e2d 0000 7e2d 0000     .~..-~..-~..-~..
   20c48:	7e91 0000 7e91 0000 7e91 0000 7f7d 0000     .~...~...~..}...
   20c58:	81f5 0000 7fed 0000 8515 0000 8621 0000     ............!...
   20c68:	8765 0000 8931 0000 8951 0000 897d 0000     e...1...Q...}...
   20c78:	5265 0000 5265 0000 89a1 0000 89cd 0000     eR..eR..........
   20c88:	89f9 0000 8abd 0000 504d 505f 5241 4553     ........MP_PARSE
   20c98:	4e5f 444f 5f45 5453 5552 5443 4b5f 4e49     _NODE_STRUCT_KIN
   20ca8:	2844 6e70 2973 3c20 203d 4e50 635f 6e6f     D(pns) <= PN_con
   20cb8:	7473 6f5f 6a62 6365 0074 0000 504d 505f     st_object...MP_P
   20cc8:	5241 4553 4e5f 444f 5f45 5349 535f 5254     ARSE_NODE_IS_STR
   20cd8:	4355 5f54 494b 444e 7028 736e 3e2d 6f6e     UCT_KIND(pns->no
   20ce8:	6564 5b73 5d30 202c 4e50 745f 7066 6564     des[0], PN_tfpde
   20cf8:	2966 0000 504d 505f 5241 4553 4e5f 444f     f)..MP_PARSE_NOD
   20d08:	5f45 5453 5552 5443 4b5f 4e49 2844 6e70     E_STRUCT_KIND(pn
   20d18:	2973 3d20 203d 6e70 645f 6c62 735f 6174     s) == pn_dbl_sta
   20d28:	0072 0000 7261 7567 656d 746e 6e20 6d61     r...argument nam
   20d38:	2065 6572 7375 6465 0000 0000 504d 505f     e reused....MP_P
   20d48:	5241 4553 4e5f 444f 5f45 5453 5552 5443     ARSE_NODE_STRUCT
   20d58:	4b5f 4e49 2844 6d28 5f70 6170 7372 5f65     _KIND((mp_parse_
   20d68:	6f6e 6564 735f 7274 6375 5f74 2a74 7029     node_struct_t*)p
   20d78:	5f6e 7469 7265 2029 3d3d 5020 5f4e 6f63     n_iter) == PN_co
   20d88:	706d 665f 726f 0000 6373 706f 2d65 6b3e     mp_for..scope->k
   20d98:	6e69 2064 3d3d 5320 4f43 4550 4d5f 444f     ind == SCOPE_MOD
   20da8:	4c55 0045 504d 505f 5241 4553 4e5f 444f     ULE.MP_PARSE_NOD
   20db8:	5f45 5349 535f 5254 4355 2854 6373 706f     E_IS_STRUCT(scop
   20dc8:	2d65 703e 296e 0000 504d 505f 5241 4553     e->pn)..MP_PARSE
   20dd8:	4e5f 444f 5f45 5453 5552 5443 4b5f 4e49     _NODE_STRUCT_KIN
   20de8:	2844 6e70 2973 3d20 203d 4e50 665f 6e75     D(pns) == PN_fun
   20df8:	6463 6665 0000 0000 504d 505f 5241 4553     cdef....MP_PARSE
   20e08:	4e5f 444f 5f45 5453 5552 5443 4e5f 4d55     _NODE_STRUCT_NUM
   20e18:	4e5f 444f 5345 7028 736e 2029 3d3d 3320     _NODES(pns) == 3
   20e28:	0000 0000 6373 706f 2d65 6b3e 6e69 2064     ....scope->kind 
   20e38:	3d3d 5320 4f43 4550 435f 414c 5353 0000     == SCOPE_CLASS..
   20e48:	504d 505f 5241 4553 4e5f 444f 5f45 5453     MP_PARSE_NODE_ST
   20e58:	5552 5443 4b5f 4e49 2844 6e70 2973 3d20     RUCT_KIND(pns) =
   20e68:	203d 4e50 635f 616c 7373 6564 0066 0000     = PN_classdef...
   20e78:	6469 2120 203d 554e 4c4c 0000 6f63 706d     id != NULL..comp
   20e88:	3e2d 7563 5f72 7865 6563 7470 6c5f 7665     ->cur_except_lev
   20e98:	6c65 3d20 203d 0030 2821 6469 2d32 663e     el == 0.!(id2->f
   20ea8:	616c 7367 2620 4920 5f44 4c46 4741 495f     lags & ID_FLAG_I
   20eb8:	5f53 4150 4152 294d 0000 0000               S_PARAM)....

00020ec4 <__func__.7686>:
   20ec4:	6f63 706d 6c69 5f65 6564 7263 6165 6573     compile_decrease
   20ed4:	655f 6378 7065 5f74 656c 6576 006c 0000     _except_level...

00020ee4 <__func__.7768>:
   20ee4:	5f63 6669 635f 6e6f 0064 0000               c_if_cond...

00020ef0 <__func__.7789>:
   20ef0:	5f63 7361 6973 6e67 615f 6f74 5f6d 7865     c_assign_atom_ex
   20f00:	7270 0000                                   pr..

00020f04 <__func__.7811>:
   20f04:	5f63 7361 6973 6e67 0000 0000               c_assign....

00020f10 <__func__.7837>:
   20f10:	6c63 736f 5f65 766f 7265 765f 7261 6169     close_over_varia
   20f20:	6c62 7365 655f 6374 0000 0000               bles_etc....

00020f2c <__func__.7854>:
   20f2c:	6f63 706d 6c69 5f65 7566 636e 6564 5f66     compile_funcdef_
   20f3c:	616c 626d 6564 5f66 6170 6172 006d 0000     lambdef_param...

00020f4c <__func__.7899>:
   20f4c:	6f63 706d 6c69 5f65 6564 6f63 6172 6574     compile_decorate
   20f5c:	0064 0000                                   d...

00020f60 <__func__.7932>:
   20f60:	5f63 6564 5f6c 7473 746d 0000               c_del_stmt..

00020f6c <__func__.7952>:
   20f6c:	6f63 706d 6c69 5f65 7262 6165 5f6b 6f63     compile_break_co
   20f7c:	746e 735f 6d74 0074                         nt_stmt.

00020f84 <__func__.7976>:
   20f84:	6f64 695f 706d 726f 5f74 616e 656d 0000     do_import_name..

00020f94 <__func__.8014>:
   20f94:	6f63 706d 6c69 5f65 6d69 6f70 7472 665f     compile_import_f
   20fa4:	6f72 006d                                   rom.

00020fa8 <__func__.8076>:
   20fa8:	6f63 706d 6c69 5f65 6669 735f 6d74 0074     compile_if_stmt.

00020fb8 <__func__.8109>:
   20fb8:	6f63 706d 6c69 5f65 6f66 5f72 7473 746d     compile_for_stmt
   20fc8:	6f5f 7470 6d69 7369 6465 725f 6e61 6567     _optimised_range
   20fd8:	0000 0000                                   ....

00020fdc <__func__.8142>:
   20fdc:	6f63 706d 6c69 5f65 7274 5f79 7865 6563     compile_try_exce
   20fec:	7470 0000                                   pt..

00020ff0 <__func__.8161>:
   20ff0:	6f63 706d 6c69 5f65 7274 5f79 6966 616e     compile_try_fina
   21000:	6c6c 0079                                   lly.

00021004 <__func__.8166>:
   21004:	6f63 706d 6c69 5f65 7274 5f79 7473 746d     compile_try_stmt
   21014:	0000 0000                                   ....

00021018 <__func__.8186>:
   21018:	6f63 706d 6c69 5f65 6977 6874 735f 6d74     compile_with_stm
   21028:	0074 0000                                   t...

0002102c <__func__.8196>:
   2102c:	6f63 706d 6c69 5f65 7865 7270 735f 6d74     compile_expr_stm
   2103c:	0074 0000                                   t...

00021040 <__func__.8222>:
   21040:	6f63 706d 6c69 5f65 6574 7473 695f 5f66     compile_test_if_
   21050:	7865 7270 0000 0000                         expr....

00021058 <__func__.8265>:
   21058:	6f63 706d 6c69 5f65 6f63 706d 7261 7369     compile_comparis
   21068:	6e6f 0000                                   on..

0002106c <__func__.8303>:
   2106c:	6f63 706d 6c69 5f65 6574 6d72 0000 0000     compile_term....

0002107c <__func__.8317>:
   2107c:	6f63 706d 6c69 5f65 6166 7463 726f 325f     compile_factor_2
   2108c:	0000 0000                                   ....

00021090 <__func__.8366>:
   21090:	6f63 706d 6c69 5f65 6f63 706d 6572 6568     compile_comprehe
   210a0:	736e 6f69 006e 0000                         nsion...

000210a8 <__func__.8374>:
   210a8:	6f63 706d 6c69 5f65 7461 6d6f 705f 7261     compile_atom_par
   210b8:	6e65 0000                                   en..

000210bc <__func__.8383>:
   210bc:	6f63 706d 6c69 5f65 7461 6d6f 625f 6172     compile_atom_bra
   210cc:	6b63 7465 0000 0000                         cket....

000210d4 <__func__.8390>:
   210d4:	6f63 706d 6c69 5f65 7461 6d6f 625f 6172     compile_atom_bra
   210e4:	6563 0000                                   ce..

000210e8 <__func__.8453>:
   210e8:	6f63 706d 6c69 5f65 6f6e 6564 0000 0000     compile_node....

000210f8 <__func__.8465>:
   210f8:	6f63 706d 6c69 5f65 6373 706f 5f65 7566     compile_scope_fu
   21108:	636e 6c5f 6d61 6462 5f61 6170 6172 006d     nc_lambda_param.

00021118 <__func__.8486>:
   21118:	6f63 706d 6c69 5f65 6373 706f 5f65 6f63     compile_scope_co
   21128:	706d 695f 6574 0072                         mp_iter.

00021130 <__func__.8497>:
   21130:	6f63 706d 6c69 5f65 6373 706f 0065 0000     compile_scope...

00021140 <__func__.8532>:
   21140:	6373 706f 5f65 6f63 706d 7475 5f65 6874     scope_compute_th
   21150:	6e69 7367 0000 0000 6469 2120 203d 554e     ings....id != NU
   21160:	4c4c 0000 2e2e 2e2f 2f2e 7970 652f 696d     LL..../../py/emi
   21170:	6374 6d6f 6f6d 2e6e 0063 0000 6469 3e2d     tcommon.c...id->
   21180:	696b 646e 3d20 203d 4449 495f 464e 5f4f     kind == ID_INFO_
   21190:	494b 444e 435f 4c45 204c 7c7c 6920 2d64     KIND_CELL || id-
   211a0:	6b3e 6e69 2064 3d3d 4920 5f44 4e49 4f46     >kind == ID_INFO
   211b0:	4b5f 4e49 5f44 5246 4545 0000               _KIND_FREE..

000211bc <__func__.6423>:
   211bc:	706d 655f 696d 5f74 6f63 6d6d 6e6f 695f     mp_emit_common_i
   211cc:	5f64 706f 0000 0000 6d65 7469 3e2d 6f63     d_op....emit->co
   211dc:	6564 695f 666e 5f6f 666f 7366 7465 2b20     de_info_offset +
   211ec:	6e20 6d75 625f 7479 7365 745f 5f6f 7277      num_bytes_to_wr
   211fc:	7469 2065 3d3c 6520 696d 2d74 633e 646f     ite <= emit->cod
   2120c:	5f65 6e69 6f66 735f 7a69 0065 2e2e 2e2f     e_info_size.../.
   2121c:	2f2e 7970 652f 696d 6274 2e63 0063 0000     ./py/emitbc.c...
   2122c:	6d65 7469 3e2d 7962 6574 6f63 6564 6f5f     emit->bytecode_o
   2123c:	6666 6573 2074 202b 756e 5f6d 7962 6574     ffset + num_byte
   2124c:	5f73 6f74 775f 6972 6574 3c20 203d 6d65     s_to_write <= em
   2125c:	7469 3e2d 7962 6574 6f63 6564 735f 7a69     it->bytecode_siz
   2126c:	0065 0000 2063 3d3d 4d20 5f50 4c41 4749     e...c == MP_ALIG
   2127c:	284e 2c63 7320 7a69 6f65 2866 706d 6f5f     N(c, sizeof(mp_o
   2128c:	6a62 745f 2929 0000 2063 3d3d 4d20 5f50     bj_t))..c == MP_
   2129c:	4c41 4749 284e 2c63 7320 7a69 6f65 2866     ALIGN(c, sizeof(
   212ac:	6f76 6469 292a 0029 6469 3e2d 6f6c 6163     void*)).id->loca
   212bc:	5f6c 756e 206d 203c 3532 0035 6d65 7469     l_num < 255.emit
   212cc:	3e2d 7473 6361 5f6b 6973 657a 3d20 203d     ->stack_size == 
   212dc:	0030 0000 6d28 5f70 6e69 5f74 2974 6d65     0...(mp_int_t)em
   212ec:	7469 3e2d 7473 6361 5f6b 6973 657a 2b20     it->stack_size +
   212fc:	6420 6c65 6174 3e20 203d 0030 206c 203c      delta >= 0.l < 
   2130c:	6d65 7469 3e2d 616d 5f78 756e 5f6d 616c     emit->max_num_la
   2131c:	6562 736c 0000 0000 6d65 7469 3e2d 616c     bels....emit->la
   2132c:	6562 5f6c 666f 7366 7465 5b73 5d6c 3d20     bel_offsets[l] =
   2133c:	203d 6d28 5f70 6975 746e 745f 2d29 0031     = (mp_uint_t)-1.
   2134c:	6d65 7469 3e2d 616c 6562 5f6c 666f 7366     emit->label_offs
   2135c:	7465 5b73 5d6c 3d20 203d 6d65 7469 3e2d     ets[l] == emit->
   2136c:	7962 6574 6f63 6564 6f5f 6666 6573 0074     bytecode_offset.
   2137c:	6f74 206b 3d3d 4d20 5f50 4f54 454b 5f4e     tok == MP_TOKEN_
   2138c:	4c45 494c 5350 5349 0000 0000 5f6e 6c63     ELLIPSIS....n_cl
   2139c:	736f 6465 6f5f 6576 2072 3d3c 3220 3535     osed_over <= 255
   213ac:	0000 0000 5f6e 7261 7367 3c20 203d 0032     ....n_args <= 2.

000213bc <mp_emit_bc_method_table_load_id_ops>:
   213bc:	a4a9 0000 a4f9 0000                         ........

000213c4 <mp_emit_bc_method_table_store_id_ops>:
   213c4:	a629 0000 a679 0000                         )...y...

000213cc <mp_emit_bc_method_table_delete_id_ops>:
   213cc:	a6a9 0000 a6d1 0000                         ........

000213d4 <__func__.7215>:
   213d4:	6d65 7469 675f 7465 635f 7275 745f 5f6f     emit_get_cur_to_
   213e4:	7277 7469 5f65 6f63 6564 695f 666e 006f     write_code_info.

000213f4 <__func__.7233>:
   213f4:	6d65 7469 675f 7465 635f 7275 745f 5f6f     emit_get_cur_to_
   21404:	7277 7469 5f65 7962 6574 6f63 6564 0000     write_bytecode..

00021414 <__func__.7275>:
   21414:	6d65 7469 775f 6972 6574 625f 7479 6365     emit_write_bytec
   21424:	646f 5f65 7962 6574 6f5f 6a62 0000 0000     ode_byte_obj....

00021434 <__func__.7282>:
   21434:	6d65 7469 775f 6972 6574 625f 7479 6365     emit_write_bytec
   21444:	646f 5f65 7962 6574 725f 7761 635f 646f     ode_byte_raw_cod
   21454:	0065 0000                                   e...

00021458 <__func__.7305>:
   21458:	706d 655f 696d 5f74 6362 735f 6174 7472     mp_emit_bc_start
   21468:	705f 7361 0073 0000                         _pass...

00021470 <__func__.7322>:
   21470:	706d 655f 696d 5f74 6362 655f 646e 705f     mp_emit_bc_end_p
   21480:	7361 0073                                   ass.

00021484 <__func__.7330>:
   21484:	706d 655f 696d 5f74 6362 615f 6a64 7375     mp_emit_bc_adjus
   21494:	5f74 7473 6361 5f6b 6973 657a 0000 0000     t_stack_size....

000214a4 <__func__.7343>:
   214a4:	706d 655f 696d 5f74 6362 6c5f 6261 6c65     mp_emit_bc_label
   214b4:	615f 7373 6769 006e                         _assign.

000214bc <__func__.7358>:
   214bc:	706d 655f 696d 5f74 6362 6c5f 616f 5f64     mp_emit_bc_load_
   214cc:	6f63 736e 5f74 6f74 006b 0000               const_tok...

000214d8 <__func__.7537>:
   214d8:	706d 655f 696d 5f74 6362 6d5f 6b61 5f65     mp_emit_bc_make_
   214e8:	6c63 736f 7275 0065                         closure.

000214f0 <__func__.7565>:
   214f0:	706d 655f 696d 5f74 6362 725f 6961 6573     mp_emit_bc_raise
   21500:	765f 7261 7261 7367 0000 0000 6e69 2874     _varargs....int(
   21510:	2029 7261 2067 2032 756d 7473 6220 2065     ) arg 2 must be 
   21520:	3d3e 3220 6120 646e 3c20 203d 3633 0000     >= 2 and <= 36..
   21530:	6e69 6176 696c 2064 7973 746e 7861 6620     invalid syntax f
   21540:	726f 6920 746e 6765 7265 0000 6564 6963     or integer..deci
   21550:	616d 206c 756e 626d 7265 2073 6f6e 2074     mal numbers not 
   21560:	7573 7070 726f 6574 0064 0000 6372 2120     supported...rc !
   21570:	203d 554e 4c4c 0000 2e2e 2e2f 2f2e 7970     = NULL..../../py
   21580:	652f 696d 6774 756c 2e65 0063 6564 5f66     /emitglue.c.def_
   21590:	7261 7367 3d20 203d 504d 4f5f 4a42 4e5f     args == MP_OBJ_N
   215a0:	4c55 204c 7c7c 4d20 5f50 424f 5f4a 5349     ULL || MP_OBJ_IS
   215b0:	545f 5059 2845 6564 5f66 7261 7367 202c     _TYPE(def_args, 
   215c0:	6d26 5f70 7974 6570 745f 7075 656c 0029     &mp_type_tuple).
   215d0:	6564 5f66 776b 615f 6772 2073 3d3d 4d20     def_kw_args == M
   215e0:	5f50 424f 5f4a 554e 4c4c 7c20 207c 504d     P_OBJ_NULL || MP
   215f0:	4f5f 4a42 495f 5f53 5954 4550 6428 6665     _OBJ_IS_TYPE(def
   21600:	6b5f 5f77 7261 7367 202c 6d26 5f70 7974     _kw_args, &mp_ty
   21610:	6570 645f 6369 2974 0000 0000 6372 3e2d     pe_dict)....rc->
   21620:	696b 646e 3d20 203d 504d 435f 444f 5f45     kind == MP_CODE_
   21630:	5942 4554 4f43 4544 0000 0000               BYTECODE....

0002163c <__func__.6785>:
   2163c:	706d 6d5f 6b61 5f65 7566 636e 6974 6e6f     mp_make_function
   2164c:	665f 6f72 5f6d 6172 5f77 6f63 6564 0000     _from_raw_code..

0002165c <mp_module___main__>:
   2165c:	33a8 0002 1328 2000 616e 656d 6e20 746f     .3..(.. name not
   2166c:	6420 6665 6e69 6465 0000 0000 706f 3d20      defined....op =
   2167c:	203d 504d 555f 414e 5952 4f5f 5f50 4e49     = MP_UNARY_OP_IN
   2168c:	4556 5452 0000 0000 2e2e 2e2f 2f2e 7970     VERT....../../py
   2169c:	722f 6e75 6974 656d 632e 0000 6163 276e     /runtime.c..can'
   216ac:	2074 6f63 766e 7265 2074 6f74 6920 746e     t convert to int
   216bc:	0000 0000 6e75 7573 7070 726f 6574 2064     ....unsupported 
   216cc:	7974 6570 6620 726f 6f20 6570 6172 6f74     type for operato
   216dc:	0072 0000 656e 6167 6974 6576 7320 6968     r...negative shi
   216ec:	7466 6320 756f 746e 0000 0000 656e 6167     ft count....nega
   216fc:	6974 6576 7020 776f 7265 7720 7469 2068     tive power with 
   2170c:	6f6e 6620 6f6c 7461 7320 7075 6f70 7472     no float support
   2171c:	0000 0000 6964 6976 6564 6220 2079 657a     ....divide by ze
   2172c:	6f72 0000 626f 656a 7463 6e20 746f 6320     ro..object not c
   2173c:	6c61 616c 6c62 0065 7261 7367 5f32 656c     allable.args2_le
   2174c:	206e 202b 2032 202a 616d 2d70 753e 6573     n + 2 * map->use
   2175c:	2064 3d3c 6120 6772 3273 615f 6c6c 636f     d <= args2_alloc
   2176c:	0000 0000 7277 6e6f 2067 756e 626d 7265     ....wrong number
   2177c:	6f20 2066 6176 756c 7365 7420 206f 6e75      of values to un
   2178c:	6170 6b63 0000 0000 7974 6570 3e2d 6f6c     pack....type->lo
   2179c:	6163 736c 645f 6369 2d74 623e 7361 2e65     cals_dict->base.
   217ac:	7974 6570 3d20 203d 6d26 5f70 7974 6570     type == &mp_type
   217bc:	645f 6369 0074 0000 6f6e 7320 6375 2068     _dict...no such 
   217cc:	7461 7274 6269 7475 0065 0000 5f6f 6e69     attribute...o_in
   217dc:	0000 0000 626f 656a 7463 6e20 746f 6920     ....object not i
   217ec:	6574 6172 6c62 0065 626f 656a 7463 6e20     terable.object n
   217fc:	746f 6120 206e 7469 7265 7461 726f 0000     ot an iterator..
   2180c:	7328 6e65 5f64 6176 756c 2065 3d21 4d20     (send_value != M
   2181c:	5f50 424f 5f4a 554e 4c4c 2029 205e 7428     P_OBJ_NULL) ^ (t
   2182c:	7268 776f 765f 6c61 6575 2120 203d 504d     hrow_value != MP
   2183c:	4f5f 4a42 4e5f 4c55 294c 0000 6874 6f72     _OBJ_NULL)..thro
   2184c:	5f77 6176 756c 2065 3d21 4d20 5f50 424f     w_value != MP_OB
   2185c:	5f4a 554e 4c4c 0000 7865 6563 7470 6f69     J_NULL..exceptio
   2186c:	736e 6d20 7375 2074 6564 6972 6576 6620     ns must derive f
   2187c:	6f72 206d 6142 6573 7845 6563 7470 6f69     rom BaseExceptio
   2188c:	006e 0000 6163 6e6e 746f 6920 706d 726f     n...cannot impor
   2189c:	2074 616e 656d 2520 0071 0000 656d 6f6d     t name %q...memo
   218ac:	7972 6120 6c6c 636f 7461 6f69 206e 6166     ry allocation fa
   218bc:	6c69 6465 202c 6568 7061 6920 2073 6f6c     iled, heap is lo
   218cc:	6b63 6465 0000 0000 656d 6f6d 7972 6120     cked....memory a
   218dc:	6c6c 636f 7461 6f69 206e 6166 6c69 6465     llocation failed
   218ec:	202c 6c61 6f6c 6163 6974 676e 2520 2075     , allocating %u 
   218fc:	7962 6574 0073 0000                         bytes...

00021904 <__func__.7217>:
   21904:	706d 755f 616e 7972 6f5f 0070               mp_unary_op.

00021910 <__func__.7334>:
   21910:	706d 635f 6c61 5f6c 7270 7065 7261 5f65     mp_call_prepare_
   21920:	7261 7367 6e5f 6b5f 5f77 6176 0072 0000     args_n_kw_var...

00021930 <__func__.7422>:
   21930:	706d 6c5f 616f 5f64 656d 6874 646f 6d5f     mp_load_method_m
   21940:	7961 6562 0000 0000                         aybe....

00021948 <__func__.7448>:
   21948:	706d 675f 7465 7469 7265 0000               mp_getiter..

00021954 <__func__.7470>:
   21954:	706d 725f 7365 6d75 0065 0000 6128 6c6c     mp_resume...(all
   21964:	776f 6465 695b 2e5d 6c66 6761 2073 2026     owed[i].flags & 
   21974:	504d 415f 4752 4b5f 4e49 5f44 414d 4b53     MP_ARG_KIND_MASK
   21984:	2029 3d3d 4d20 5f50 5241 5f47 424f 004a     ) == MP_ARG_OBJ.
   21994:	2e2e 2e2f 2f2e 7970 612f 6772 6863 6365     ../../py/argchec
   219a4:	2e6b 0063 7261 7567 656d 746e 6e20 6d75     k.c.argument num
   219b4:	742f 7079 7365 6d20 7369 616d 6374 0068     /types mismatch.

000219c4 <__func__.6332>:
   219c4:	706d 615f 6772 705f 7261 6573 615f 6c6c     mp_arg_parse_all
   219d4:	0000 0000                                   ....

000219d8 <mp_const_empty_map>:
   219d8:	0006 0000 0000 0000 0000 0000               ............

000219e4 <hash_allocation_sizes>:
   219e4:	0000 0002 0004 0006 0008 000a 000c 0011     ................
   219f4:	0017 001d 0025 002f 003b 0049 0061 007f     ....%./.;.I.a...
   21a04:	00a7 00df 0125 0185 0209 02b3 0397 04c7     ....%...........
   21a14:	065b 0871 0c9d 12df 1c4b 2a6d 3f91 5f57     [.q.....K.m*.?W_
   21a24:	8eff d67b 6d21 7061 3e2d 7369 665f 7869     ..{.!map->is_fix
   21a34:	6465 7c20 207c 6f6c 6b6f 7075 6b5f 6e69     ed || lookup_kin
   21a44:	2064 3d3d 4d20 5f50 414d 5f50 4f4c 4b4f     d == MP_MAP_LOOK
   21a54:	5055 0000 2e2e 2e2f 2f2e 7970 6d2f 7061     UP..../../py/map
   21a64:	632e 0000                                   .c..

00021a68 <__func__.6436>:
   21a68:	706d 6d5f 7061 6c5f 6f6f 756b 0070 0000     mp_map_lookup...
   21a78:	6e28 6c69 0029 0000 253c 3e71 0000 0000     (nil)...<%q>....
   21a88:	206e 2025 2033 3d3d 3020 0000 2e2e 2e2f     n % 3 == 0..../.
   21a98:	2f2e 7970 6f2f 6a62 632e 0000 7254 6361     ./py/obj.c..Trac
   21aa8:	6265 6361 206b 6d28 736f 2074 6572 6563     eback (most rece
   21ab8:	746e 6320 6c61 206c 616c 7473 3a29 000a     nt call last):..
   21ac8:	2020 6946 656c 2220 7125 0022 000a 0000       File "%q".....
   21ad8:	202c 6e69 2520 0a71 0000 0000 7865 6570     , in %q.....expe
   21ae8:	7463 6465 7420 7075 656c 6c2f 7369 0074     cted tuple/list.
   21af8:	7574 6c70 2f65 696c 7473 6820 7361 7720     tuple/list has w
   21b08:	6f72 676e 6c20 6e65 7467 0068 6e69 6964     rong length.indi
   21b18:	6563 2073 756d 7473 6220 2065 6e69 6574     ces must be inte
   21b28:	6567 7372 0000 0000 6e69 6564 2078 756f     gers....index ou
   21b38:	2074 666f 7220 6e61 6567 0000 626f 656a     t of range..obje
   21b48:	7463 6820 7361 6e20 206f 656c 006e 0000     ct has no len...
   21b58:	626f 656a 7463 6420 656f 6e73 7427 7320     object doesn't s
   21b68:	7075 6f70 7472 6920 6574 206d 6564 656c     upport item dele
   21b78:	6974 6e6f 0000 0000 626f 656a 7463 6920     tion....object i
   21b88:	6e73 7427 7320 6275 6373 6972 7470 6261     sn't subscriptab
   21b98:	656c 0000 626f 656a 7463 6420 656f 6e73     le..object doesn
   21ba8:	7427 7320 7075 6f70 7472 6920 6574 206d     't support item 
   21bb8:	7361 6973 6e67 656d 746e 0000               assignment..

00021bc4 <mp_identity_obj>:
   21bc4:	29b0 0002 e04d 0000 626f 656a 7463 7720     .)..M...object w
   21bd4:	7469 2068 7562 6666 7265 7020 6f72 6f74     ith buffer proto
   21be4:	6f63 206c 6572 7571 7269 6465 0000 0000     col required....

00021bf4 <__func__.6961>:
   21bf4:	706d 6f5f 6a62 705f 6972 746e 655f 6378     mp_obj_print_exc
   21c04:	7065 6974 6e6f 0000 7254 6575 0000 0000     eption..True....
   21c14:	6146 736c 0065 0000                         False...

00021c1c <mp_type_bool>:
   21c1c:	40e4 0002 0000 00f0 e17d 0000 e1b9 0000     .@......}.......
   21c2c:	0000 0000 e201 0000 e235 0000 0000 0000     ........5.......
	...

00021c58 <mp_const_false_obj>:
   21c58:	1c1c 0002 0000 0000                         ........

00021c60 <mp_const_true_obj>:
   21c60:	1c1c 0002 0001 0000                         ........

00021c68 <mp_type_bound_meth>:
   21c68:	40e4 0002 0000 00f2 0000 0000 0000 0000     .@..............
   21c78:	e2fd 0000 0000 0000 0000 0000 0000 0000     ................
	...

00021ca4 <mp_type_cell>:
   21ca4:	40e4 0002 0000 0001 0000 0000 0000 0000     .@..............
	...

00021ce0 <closure_type>:
   21ce0:	40e4 0002 0000 00fb 0000 0000 0000 0000     .@..............
   21cf0:	e3c9 0000 0000 0000 0000 0000 0000 0000     ................
	...
   21d1c:	007b 0000 202c 0000 203a 0000 007d 0000     {..., ..: ..}...
   21d2c:	4d28 5f50 424f 5f4a 5349 4f5f 4a42 7328     (MP_OBJ_IS_OBJ(s
   21d3c:	6c65 5f66 6e69 2029 2626 2820 6d28 5f70     elf_in) && ((mp_
   21d4c:	626f 5f6a 6162 6573 745f 292a 2828 6f76     obj_base_t*)((vo
   21d5c:	6469 292a 6573 666c 695f 296e 2d29 743e     id*)self_in))->t
   21d6c:	7079 2d65 6d3e 6b61 5f65 656e 2077 3d3d     ype->make_new ==
   21d7c:	6420 6369 5f74 616d 656b 6e5f 7765 0029      dict_make_new).
   21d8c:	2e2e 2e2f 2f2e 7970 6f2f 6a62 6964 7463     ../../py/objdict
   21d9c:	632e 0000                                   .c..

00021da0 <dict_clear_obj>:
   21da0:	29b0 0002 e921 0000                         .)..!...

00021da8 <dict_copy_obj>:
   21da8:	29b0 0002 e985 0000                         .)......

00021db0 <dict_fromkeys_fun_obj>:
   21db0:	2af8 0002 0006 0004 ea45 0000               .*......E...

00021dbc <dict_fromkeys_obj>:
   21dbc:	432c 0002 1db0 0002 4d28 5f50 424f 5f4a     ,C......(MP_OBJ_
   21dcc:	5349 4f5f 4a42 6128 6772 5b73 5d30 2029     IS_OBJ(args[0]) 
   21ddc:	2626 2820 6d28 5f70 626f 5f6a 6162 6573     && ((mp_obj_base
   21dec:	745f 292a 2828 6f76 6469 292a 7261 7367     _t*)((void*)args
   21dfc:	305b 295d 2d29 743e 7079 2d65 6d3e 6b61     [0]))->type->mak
   21e0c:	5f65 656e 2077 3d3d 6420 6369 5f74 616d     e_new == dict_ma
   21e1c:	656b 6e5f 7765 0029                         ke_new).

00021e24 <dict_get_obj>:
   21e24:	2af8 0002 0006 0004 ebb9 0000               .*..........

00021e30 <dict_pop_obj>:
   21e30:	2af8 0002 0006 0004 ebd9 0000               .*..........

00021e3c <dict_setdefault_obj>:
   21e3c:	2af8 0002 0006 0004 ebf9 0000 6f70 6970     .*..........popi
   21e4c:	6574 286d 3a29 6420 6369 6974 6e6f 7261     tem(): dictionar
   21e5c:	2079 7369 6520 706d 7974 0000               y is empty..

00021e68 <dict_popitem_obj>:
   21e68:	29b0 0002 ec19 0000 6964 7463 7520 6470     .)......dict upd
   21e78:	7461 2065 6573 7571 6e65 6563 6820 7361     ate sequence has
   21e88:	7720 6f72 676e 6c20 6e65 7467 0068 0000      wrong length...

00021e98 <dict_update_obj>:
   21e98:	2af8 0002 ffff 0003 ecdd 0000               .*..........

00021ea4 <dict_view_type>:
   21ea4:	40e4 0002 0000 0103 efa9 0000 0000 0000     .@..............
	...
   21ebc:	f07d 0000 0000 0000 0000 0000 ef31 0000     }...........1...
	...

00021ee0 <dict_view_it_type>:
   21ee0:	40e4 0002 0000 0131 0000 0000 0000 0000     .@....1.........
	...
   21f04:	e065 0000 ee95 0000 0000 0000 0000 0000     e...............
	...
   21f1c:	6964 7463 695f 6574 736d 0000 6964 7463     dict_items..dict
   21f2c:	6b5f 7965 0073 0000 6964 7463 765f 6c61     _keys...dict_val
   21f3c:	6575 0073                                   ues.

00021f40 <mp_dict_view_names>:
   21f40:	1f1c 0002 1f28 0002 1f34 0002 4d28 5f50     ....(...4...(MP_
   21f50:	424f 5f4a 5349 4f5f 4a42 7328 6c65 5f66     OBJ_IS_OBJ(self_
   21f60:	6e69 2029 2626 2820 2828 706d 6f5f 6a62     in) && (((mp_obj
   21f70:	625f 7361 5f65 2a74 2829 7628 696f 2a64     _base_t*)((void*
   21f80:	7329 6c65 5f66 6e69 2929 3e2d 7974 6570     )self_in))->type
   21f90:	3d20 203d 2628 6964 7463 765f 6569 5f77      == (&dict_view_
   21fa0:	7469 745f 7079 2965 2929 0000 4d28 5f50     it_type)))..(MP_
   21fb0:	424f 5f4a 5349 4f5f 4a42 7628 6569 5f77     OBJ_IS_OBJ(view_
   21fc0:	6e69 2029 2626 2820 2828 706d 6f5f 6a62     in) && (((mp_obj
   21fd0:	625f 7361 5f65 2a74 2829 7628 696f 2a64     _base_t*)((void*
   21fe0:	7629 6569 5f77 6e69 2929 3e2d 7974 6570     )view_in))->type
   21ff0:	3d20 203d 2628 6964 7463 765f 6569 5f77      == (&dict_view_
   22000:	7974 6570 2929 0029 4d28 5f50 424f 5f4a     type))).(MP_OBJ_
   22010:	5349 4f5f 4a42 7328 6c65 5f66 6e69 2029     IS_OBJ(self_in) 
   22020:	2626 2820 2828 706d 6f5f 6a62 625f 7361     && (((mp_obj_bas
   22030:	5f65 2a74 2829 7628 696f 2a64 7329 6c65     e_t*)((void*)sel
   22040:	5f66 6e69 2929 3e2d 7974 6570 3d20 203d     f_in))->type == 
   22050:	2628 6964 7463 765f 6569 5f77 7974 6570     (&dict_view_type
   22060:	2929 0029 5b28 0000 295d 0000               ))).([..])..

0002206c <dict_items_obj>:
   2206c:	29b0 0002 f149 0000                         .)..I...

00022074 <dict_keys_obj>:
   22074:	29b0 0002 f165 0000                         .)..e...

0002207c <dict_values_obj>:
   2207c:	29b0 0002 f181 0000                         .)......

00022084 <dict_locals_dict_table>:
   22084:	03e6 0000 1da0 0002 03fa 0000 1da8 0002     ................
   22094:	044a 0000 1dbc 0002 045a 0000 1e24 0002     J.......Z...$...
   220a4:	04be 0000 206c 0002 04d2 0000 2074 0002     ....l ......t ..
   220b4:	053a 0000 1e30 0002 053e 0000 1e68 0002     :...0...>...h...
   220c4:	058e 0000 1e3c 0002 05e2 0000 1e98 0002     ....<...........
   220d4:	05ee 0000 207c 0002 003e 0000 44d8 0002     ....| ..>....D..
   220e4:	0092 0000 44e0 0002 0026 0000 44e8 0002     .....D..&....D..

000220f4 <dict_locals_dict>:
   220f4:	2104 0002 0077 0000 000e 0000 2084 0002     .!..w........ ..

00022104 <mp_type_dict>:
   22104:	40e4 0002 0000 0102 e60d 0000 e6a9 0000     .@..............
   22114:	0000 0000 e711 0000 e761 0000 0000 0000     ........a.......
   22124:	e88d 0000 f19d 0000 0000 0000 0000 0000     ................
	...
   2213c:	20f4 0002                                   . ..

00022140 <__func__.6309>:
   22140:	6964 7463 635f 656c 7261 0000               dict_clear..

0002214c <__func__.6315>:
   2214c:	6964 7463 635f 706f 0079 0000               dict_copy...

00022158 <__func__.6340>:
   22158:	6964 7463 675f 7465 685f 6c65 6570 0072     dict_get_helper.

00022168 <__func__.6362>:
   22168:	6964 7463 705f 706f 7469 6d65 0000 0000     dict_popitem....

00022178 <__func__.6374>:
   22178:	6964 7463 755f 6470 7461 0065               dict_update.

00022184 <__func__.6417>:
   22184:	6964 7463 765f 6569 5f77 7469 695f 6574     dict_view_it_ite
   22194:	6e72 7865 0074 0000                         rnext...

0002219c <__func__.6430>:
   2219c:	6964 7463 765f 6569 5f77 6567 6974 6574     dict_view_getite
   221ac:	0072 0000                                   r...

000221b0 <__func__.6438>:
   221b0:	6964 7463 765f 6569 5f77 7270 6e69 0074     dict_view_print.

000221c0 <__func__.6463>:
   221c0:	6964 7463 765f 6569 0077 0000               dict_view...

000221cc <__func__.6480>:
   221cc:	6964 7463 675f 7465 7469 7265 0000 0000     dict_getiter....

000221dc <__func__.6502>:
   221dc:	706d 6f5f 6a62 645f 6369 5f74 7473 726f     mp_obj_dict_stor
   221ec:	0065 0000                                   e...

000221f0 <mp_const_GeneratorExit_obj>:
   221f0:	22bc 0002 0000 0000 0000 0000 3e28 0002     ."..........(>..
   22200:	203a 0000 0000 0000                         : ......

00022208 <mp_type_BaseException>:
   22208:	40e4 0002 0000 00ba f371 0000 f435 0000     .@......q...5...
	...
   22224:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...

00022244 <mp_type_SystemExit>:
   22244:	40e4 0002 0000 00e1 f371 0000 f435 0000     .@......q...5...
	...
   22260:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22278:	2208 0002 0000 0000                         ."......

00022280 <mp_type_KeyboardInterrupt>:
   22280:	40e4 0002 0000 00cc f371 0000 f435 0000     .@......q...5...
	...
   2229c:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...
   222b4:	2208 0002 0000 0000                         ."......

000222bc <mp_type_GeneratorExit>:
   222bc:	40e4 0002 0000 00bf f371 0000 f435 0000     .@......q...5...
	...
   222d8:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...
   222f0:	2208 0002 0000 0000                         ."......

000222f8 <mp_type_Exception>:
   222f8:	40e4 0002 0000 00be f371 0000 f435 0000     .@......q...5...
	...
   22314:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...
   2232c:	2208 0002 0000 0000                         ."......

00022334 <mp_type_StopIteration>:
   22334:	40e4 0002 0000 00df f371 0000 f435 0000     .@......q...5...
	...
   22350:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22368:	22f8 0002 0000 0000                         ."......

00022370 <mp_type_ArithmeticError>:
   22370:	40e4 0002 0000 00b7 f371 0000 f435 0000     .@......q...5...
	...
   2238c:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...
   223a4:	22f8 0002 0000 0000                         ."......

000223ac <mp_type_OverflowError>:
   223ac:	40e4 0002 0000 00d7 f371 0000 f435 0000     .@......q...5...
	...
   223c8:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...
   223e0:	2370 0002 0000 0000                         p#......

000223e8 <mp_type_ZeroDivisionError>:
   223e8:	40e4 0002 0000 00e5 f371 0000 f435 0000     .@......q...5...
	...
   22404:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...
   2241c:	2370 0002 0000 0000                         p#......

00022424 <mp_type_AssertionError>:
   22424:	40e4 0002 0000 00b8 f371 0000 f435 0000     .@......q...5...
	...
   22440:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22458:	22f8 0002 0000 0000                         ."......

00022460 <mp_type_AttributeError>:
   22460:	40e4 0002 0000 00b9 f371 0000 f435 0000     .@......q...5...
	...
   2247c:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22494:	22f8 0002 0000 0000                         ."......

0002249c <mp_type_EOFError>:
   2249c:	40e4 0002 0000 00bc f371 0000 f435 0000     .@......q...5...
	...
   224b8:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...
   224d0:	22f8 0002 0000 0000                         ."......

000224d8 <mp_type_ImportError>:
   224d8:	40e4 0002 0000 00c8 f371 0000 f435 0000     .@......q...5...
	...
   224f4:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...
   2250c:	22f8 0002 0000 0000                         ."......

00022514 <mp_type_LookupError>:
   22514:	40e4 0002 0000 00ce f371 0000 f435 0000     .@......q...5...
	...
   22530:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22548:	22f8 0002 0000 0000                         ."......

00022550 <mp_type_IndexError>:
   22550:	40e4 0002 0000 00ca f371 0000 f435 0000     .@......q...5...
	...
   2256c:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22584:	2514 0002 0000 0000                         .%......

0002258c <mp_type_KeyError>:
   2258c:	40e4 0002 0000 00cb f371 0000 f435 0000     .@......q...5...
	...
   225a8:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...
   225c0:	2514 0002 0000 0000                         .%......

000225c8 <mp_type_MemoryError>:
   225c8:	40e4 0002 0000 00d0 f371 0000 f435 0000     .@......q...5...
	...
   225e4:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...
   225fc:	22f8 0002 0000 0000                         ."......

00022604 <mp_type_NameError>:
   22604:	40e4 0002 0000 00d1 f371 0000 f435 0000     .@......q...5...
	...
   22620:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22638:	22f8 0002 0000 0000                         ."......

00022640 <mp_type_OSError>:
   22640:	40e4 0002 0000 00d5 f371 0000 f435 0000     .@......q...5...
	...
   2265c:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22674:	22f8 0002 0000 0000                         ."......

0002267c <mp_type_RuntimeError>:
   2267c:	40e4 0002 0000 00dd f371 0000 f435 0000     .@......q...5...
	...
   22698:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...
   226b0:	22f8 0002 0000 0000                         ."......

000226b8 <mp_type_NotImplementedError>:
   226b8:	40e4 0002 0000 00d3 f371 0000 f435 0000     .@......q...5...
	...
   226d4:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...
   226ec:	267c 0002 0000 0000                         |&......

000226f4 <mp_type_SyntaxError>:
   226f4:	40e4 0002 0000 00e0 f371 0000 f435 0000     .@......q...5...
	...
   22710:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22728:	22f8 0002 0000 0000                         ."......

00022730 <mp_type_IndentationError>:
   22730:	40e4 0002 0000 00c9 f371 0000 f435 0000     .@......q...5...
	...
   2274c:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...
   22764:	26f4 0002 0000 0000                         .&......

0002276c <mp_type_TypeError>:
   2276c:	40e4 0002 0000 00e2 f371 0000 f435 0000     .@......q...5...
	...
   22788:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...
   227a0:	22f8 0002 0000 0000                         ."......

000227a8 <mp_type_ValueError>:
   227a8:	40e4 0002 0000 00e3 f371 0000 f435 0000     .@......q...5...
	...
   227c4:	f505 0000 0000 0000 0000 0000 0000 0000     ................
	...
   227dc:	22f8 0002 0000 0000 7865 5f63 7974 6570     ."......exc_type
   227ec:	3e2d 616d 656b 6e5f 7765 3d20 203d 706d     ->make_new == mp
   227fc:	6f5f 6a62 655f 6378 7065 6974 6e6f 6d5f     _obj_exception_m
   2280c:	6b61 5f65 656e 0077 2e2e 2e2f 2f2e 7970     ake_new.../../py
   2281c:	6f2f 6a62 7865 6563 7470 632e 0000 0000     /objexcept.c....
   2282c:	6d66 2074 3d21 4e20 4c55 004c 706d 6f5f     fmt != NULL.mp_o
   2283c:	6a62 695f 5f73 7865 6563 7470 6f69 5f6e     bj_is_exception_
   2284c:	6e69 7473 6e61 6563 7328 6c65 5f66 6e69     instance(self_in
   2285c:	0029 0000                                   )...

00022860 <__func__.6878>:
   22860:	706d 6f5f 6a62 6e5f 7765 655f 6378 7065     mp_obj_new_excep
   22870:	6974 6e6f 615f 6772 0073 0000               tion_args...

0002287c <__func__.6900>:
   2287c:	706d 6f5f 6a62 6e5f 7765 655f 6378 7065     mp_obj_new_excep
   2288c:	6974 6e6f 6d5f 6773 765f 7261 0067 0000     tion_msg_varg...

0002289c <__func__.6923>:
   2289c:	706d 6f5f 6a62 655f 6378 7065 6974 6e6f     mp_obj_exception
   228ac:	635f 656c 7261 745f 6172 6563 6162 6b63     _clear_traceback
   228bc:	0000 0000                                   ....

000228c0 <__func__.6931>:
   228c0:	706d 6f5f 6a62 655f 6378 7065 6974 6e6f     mp_obj_exception
   228d0:	615f 6464 745f 6172 6563 6162 6b63 0000     _add_traceback..

000228e0 <__func__.6940>:
   228e0:	706d 6f5f 6a62 655f 6378 7065 6974 6e6f     mp_obj_exception
   228f0:	675f 7465 745f 6172 6563 6162 6b63 0000     _get_traceback..
   22900:	504d 4f5f 4a42 495f 5f53 5954 4550 7328     MP_OBJ_IS_TYPE(s
   22910:	6c65 5f66 6e69 202c 6d26 5f70 7974 6570     elf_in, &mp_type
   22920:	665f 6e75 625f 6975 746c 6e69 305f 0029     _fun_builtin_0).
   22930:	2e2e 2e2f 2f2e 7970 6f2f 6a62 7566 2e6e     ../../py/objfun.
   22940:	0063 0000                                   c...

00022944 <mp_type_fun_builtin_0>:
   22944:	40e4 0002 0000 0113 0000 0000 0000 0000     .@..............
   22954:	fb0d 0000 e0f5 0000 0000 0000 0000 0000     ................
	...
   22980:	504d 4f5f 4a42 495f 5f53 5954 4550 7328     MP_OBJ_IS_TYPE(s
   22990:	6c65 5f66 6e69 202c 6d26 5f70 7974 6570     elf_in, &mp_type
   229a0:	665f 6e75 625f 6975 746c 6e69 315f 0029     _fun_builtin_1).

000229b0 <mp_type_fun_builtin_1>:
   229b0:	40e4 0002 0000 0113 0000 0000 0000 0000     .@..............
   229c0:	fb79 0000 e0f5 0000 0000 0000 0000 0000     y...............
	...
   229ec:	504d 4f5f 4a42 495f 5f53 5954 4550 7328     MP_OBJ_IS_TYPE(s
   229fc:	6c65 5f66 6e69 202c 6d26 5f70 7974 6570     elf_in, &mp_type
   22a0c:	665f 6e75 625f 6975 746c 6e69 325f 0029     _fun_builtin_2).

00022a1c <mp_type_fun_builtin_2>:
   22a1c:	40e4 0002 0000 0113 0000 0000 0000 0000     .@..............
   22a2c:	fbe9 0000 e0f5 0000 0000 0000 0000 0000     ................
	...
   22a58:	504d 4f5f 4a42 495f 5f53 5954 4550 7328     MP_OBJ_IS_TYPE(s
   22a68:	6c65 5f66 6e69 202c 6d26 5f70 7974 6570     elf_in, &mp_type
   22a78:	665f 6e75 625f 6975 746c 6e69 335f 0029     _fun_builtin_3).

00022a88 <mp_type_fun_builtin_3>:
   22a88:	40e4 0002 0000 0113 0000 0000 0000 0000     .@..............
   22a98:	fc61 0000 e0f5 0000 0000 0000 0000 0000     a...............
	...
   22ac4:	504d 4f5f 4a42 495f 5f53 5954 4550 7328     MP_OBJ_IS_TYPE(s
   22ad4:	6c65 5f66 6e69 202c 6d26 5f70 7974 6570     elf_in, &mp_type
   22ae4:	665f 6e75 625f 6975 746c 6e69 765f 7261     _fun_builtin_var
   22af4:	0029 0000                                   )...

00022af8 <mp_type_fun_builtin_var>:
   22af8:	40e4 0002 0000 0113 0000 0000 0000 0000     .@..............
   22b08:	fcdd 0000 e0f5 0000 0000 0000 0000 0000     ................
	...
   22b34:	6d76 725f 7465 7275 5f6e 696b 646e 3d20     vm_return_kind =
   22b44:	203d 504d 565f 5f4d 4552 5554 4e52 455f     = MP_VM_RETURN_E
   22b54:	4358 5045 4954 4e4f 0000 0000               XCEPTION....

00022b60 <mp_type_fun_bc>:
   22b60:	40e4 0002 0000 0113 0000 0000 0000 0000     .@..............
   22b70:	fde9 0000 e0f5 0000 0000 0000 0000 0000     ................
	...
   22b9c:	504d 4f5f 4a42 495f 5f53 5954 4550 6428     MP_OBJ_IS_TYPE(d
   22bac:	6665 615f 6772 5f73 6e69 202c 6d26 5f70     ef_args_in, &mp_
   22bbc:	7974 6570 745f 7075 656c 0029               type_tuple).

00022bc8 <__func__.6188>:
   22bc8:	7566 5f6e 7562 6c69 6974 5f6e 5f30 6163     fun_builtin_0_ca
   22bd8:	6c6c 0000                                   ll..

00022bdc <__func__.6197>:
   22bdc:	7566 5f6e 7562 6c69 6974 5f6e 5f31 6163     fun_builtin_1_ca
   22bec:	6c6c 0000                                   ll..

00022bf0 <__func__.6206>:
   22bf0:	7566 5f6e 7562 6c69 6974 5f6e 5f32 6163     fun_builtin_2_ca
   22c00:	6c6c 0000                                   ll..

00022c04 <__func__.6215>:
   22c04:	7566 5f6e 7562 6c69 6974 5f6e 5f33 6163     fun_builtin_3_ca
   22c14:	6c6c 0000                                   ll..

00022c18 <__func__.6224>:
   22c18:	7566 5f6e 7562 6c69 6974 5f6e 6176 5f72     fun_builtin_var_
   22c28:	6163 6c6c 0000 0000                         call....

00022c30 <__func__.6249>:
   22c30:	7566 5f6e 6362 635f 6c61 006c               fun_bc_call.

00022c3c <__func__.6260>:
   22c3c:	706d 6f5f 6a62 6e5f 7765 665f 6e75 625f     mp_obj_new_fun_b
   22c4c:	0063 0000                                   c...

00022c50 <mp_type_gen_wrap>:
   22c50:	40e4 0002 0000 0115 0000 0000 0000 0000     .@..............
   22c60:	0035 0001 e0f5 0000 0000 0000 0000 0000     5...............
	...
   22c8c:	673c 6e65 7265 7461 726f 6f20 6a62 6365     <generator objec
   22c9c:	2074 2527 2771 6120 2074 7025 003e 0000     t '%q' at %p>...
   22cac:	4d28 5f50 424f 5f4a 5349 4f5f 4a42 7328     (MP_OBJ_IS_OBJ(s
   22cbc:	6c65 5f66 6e69 2029 2626 2820 2828 706d     elf_in) && (((mp
   22ccc:	6f5f 6a62 625f 7361 5f65 2a74 2829 7628     _obj_base_t*)((v
   22cdc:	696f 2a64 7329 6c65 5f66 6e69 2929 3e2d     oid*)self_in))->
   22cec:	7974 6570 3d20 203d 2628 706d 745f 7079     type == (&mp_typ
   22cfc:	5f65 6567 5f6e 6e69 7473 6e61 6563 2929     e_gen_instance))
   22d0c:	0029 0000 2e2e 2e2f 2f2e 7970 6f2f 6a62     )...../../py/obj
   22d1c:	6567 656e 6172 6f74 2e72 0063 6163 276e     generator.c.can'
   22d2c:	2074 6573 646e 6e20 6e6f 4e2d 6e6f 2065     t send non-None 
   22d3c:	6176 756c 2065 6f74 6120 6a20 7375 2d74     value to a just-
   22d4c:	7473 7261 6574 2064 6567 656e 6172 6f74     started generato
   22d5c:	0072 0000 6567 656e 6172 6f74 2072 6c61     r...generator al
   22d6c:	6572 6461 2079 7865 6365 7475 6e69 0067     ready executing.
   22d7c:	6567 656e 6172 6f74 2072 6172 7369 6465     generator raised
   22d8c:	5320 6f74 4970 6574 6172 6974 6e6f 0000      StopIteration..

00022d9c <gen_instance_send_obj>:
   22d9c:	2a1c 0002 02e9 0001                         .*......

00022da4 <gen_instance_throw_obj>:
   22da4:	2af8 0002 0008 0004 0321 0001 6567 656e     .*......!...gene
   22db4:	6172 6f74 2072 6769 6f6e 6572 2064 6547     rator ignored Ge
   22dc4:	656e 6172 6f74 4572 6978 0074               neratorExit.

00022dd0 <gen_instance_close_obj>:
   22dd0:	29b0 0002 0375 0001 6163 276e 2074 6570     .)..u...can't pe
   22de0:	646e 7420 7268 776f 7420 206f 756a 7473     nd throw to just
   22df0:	732d 6174 7472 6465 6720 6e65 7265 7461     -started generat
   22e00:	726f 0000                                   or..

00022e04 <gen_instance_pend_throw_obj>:
   22e04:	2a1c 0002 03e1 0001                         .*......

00022e0c <gen_instance_locals_dict_table>:
   22e0c:	03ea 0000 2dd0 0002 0582 0000 2d9c 0002     .....-.......-..
   22e1c:	05ca 0000 2da4 0002 0532 0000 2e04 0002     .....-..2.......

00022e2c <gen_instance_locals_dict>:
   22e2c:	2104 0002 0027 0000 0004 0000 2e0c 0002     .!..'...........

00022e3c <mp_type_gen_instance>:
   22e3c:	40e4 0002 0000 0115 00b9 0001 0000 0000     .@..............
   22e4c:	0000 0000 e0f5 0000 0000 0000 0000 0000     ................
   22e5c:	0000 0000 e065 0000 02c9 0001 0000 0000     ....e...........
	...
   22e74:	2e2c 0002                                   ,...

00022e78 <__func__.6402>:
   22e78:	706d 6f5f 6a62 675f 6e65 725f 7365 6d75     mp_obj_gen_resum
   22e88:	0065 0000                                   e...

00022e8c <it_type>:
   22e8c:	40e4 0002 0000 0131 0000 0000 0000 0000     .@....1.........
	...
   22eb0:	e065 0000 0421 0001 0000 0000 0000 0000     e...!...........
	...

00022ec8 <log_base2_floor>:
   22ec8:	0100 0201 0202 0302 0303 0303 0303 0403     ................
   22ed8:	2032 3d3c 6220 7361 2065 2626 6220 7361     2 <= base && bas
   22ee8:	2065 3d3c 3120 0036 2e2e 2e2f 2f2e 7970     e <= 16.../../py
   22ef8:	6f2f 6a62 6e69 2e74 0063 0000 6f6c 676e     /objint.c...long
   22f08:	6920 746e 6e20 746f 7320 7075 6f70 7472      int not support
   22f18:	6465 6920 206e 6874 7369 6220 6975 646c     ed in this build
   22f28:	0000 0000 6d73 6c61 206c 6e69 2074 766f     ....small int ov
   22f38:	7265 6c66 776f 0000                         erflow..

00022f40 <int_from_bytes_fun_obj>:
   22f40:	2af8 0002 0008 0006 0b05 0001               .*..........

00022f4c <int_from_bytes_obj>:
   22f4c:	432c 0002 2f40 0002                         ,C..@/..

00022f54 <int_to_bytes_obj>:
   22f54:	2af8 0002 0008 0006 0b81 0001               .*..........

00022f60 <int_locals_dict_table>:
   22f60:	0446 0000 2f4c 0002 05ce 0000 2f54 0002     F...L/......T/..

00022f70 <int_locals_dict>:
   22f70:	2104 0002 0017 0000 0002 0000 2f60 0002     .!..........`/..

00022f80 <mp_type_int>:
   22f80:	40e4 0002 0000 0125 067d 0001 057d 0001     .@....%.}...}...
   22f90:	0000 0000 091d 0001 0935 0001 0000 0000     ........5.......
	...
   22fb8:	2f70 0002                                   p/..

00022fbc <__func__.6905>:
   22fbc:	706d 695f 746e 665f 726f 616d 5f74 6973     mp_int_format_si
   22fcc:	657a 0000 005b 0000 202c 0000 005d 0000     ze..[..., ..]...
   22fdc:	4d28 5f50 424f 5f4a 5349 4f5f 4a42 7328     (MP_OBJ_IS_OBJ(s
   22fec:	6c65 5f66 6e69 2029 2626 2820 2828 706d     elf_in) && (((mp
   22ffc:	6f5f 6a62 625f 7361 5f65 2a74 2829 7628     _obj_base_t*)((v
   2300c:	696f 2a64 7329 6c65 5f66 6e69 2929 3e2d     oid*)self_in))->
   2301c:	7974 6570 3d20 203d 2628 706d 745f 7079     type == (&mp_typ
   2302c:	5f65 696c 7473 2929 0029 0000 2e2e 2e2f     e_list)))...../.
   2303c:	2f2e 7970 6f2f 6a62 696c 7473 632e 0000     ./py/objlist.c..
   2304c:	4d28 5f50 424f 5f4a 5349 4f5f 4a42 6128     (MP_OBJ_IS_OBJ(a
   2305c:	6772 5b73 5d30 2029 2626 2820 2828 706d     rgs[0]) && (((mp
   2306c:	6f5f 6a62 625f 7361 5f65 2a74 2829 7628     _obj_base_t*)((v
   2307c:	696f 2a64 6129 6772 5b73 5d30 2929 3e2d     oid*)args[0]))->
   2308c:	7974 6570 3d20 203d 2628 706d 745f 7079     type == (&mp_typ
   2309c:	5f65 696c 7473 2929 0029 0000 6f70 2070     e_list)))...pop 
   230ac:	7266 6d6f 6520 706d 7974 6c20 7369 0074     from empty list.
   230bc:	4d28 5f50 424f 5f4a 5349 4f5f 4a42 7028     (MP_OBJ_IS_OBJ(p
   230cc:	736f 615f 6772 5b73 5d30 2029 2626 2820     os_args[0]) && (
   230dc:	2828 706d 6f5f 6a62 625f 7361 5f65 2a74     ((mp_obj_base_t*
   230ec:	2829 7628 696f 2a64 7029 736f 615f 6772     )((void*)pos_arg
   230fc:	5b73 5d30 2929 3e2d 7974 6570 3d20 203d     s[0]))->type == 
   2310c:	2628 706d 745f 7079 5f65 696c 7473 2929     (&mp_type_list))
   2311c:	0029 0000                                   )...

00023120 <list_append_obj>:
   23120:	2a1c 0002 1049 0001                         .*..I...

00023128 <list_extend_obj>:
   23128:	2a1c 0002 1109 0001                         .*......

00023130 <list_clear_obj>:
   23130:	29b0 0002 1529 0001                         .)..)...

00023138 <list_copy_obj>:
   23138:	29b0 0002 15ad 0001                         .)......

00023140 <list_count_obj>:
   23140:	2a1c 0002 160d 0001                         .*......

00023148 <list_index_obj>:
   23148:	2af8 0002 0008 0004 1671 0001               .*......q...

00023154 <list_insert_obj>:
   23154:	2a88 0002 16dd 0001                         .*......

0002315c <list_pop_obj>:
   2315c:	2af8 0002 0004 0002 1219 0001               .*..........

00023168 <list_remove_obj>:
   23168:	2a1c 0002 17b1 0001                         .*......

00023170 <list_reverse_obj>:
   23170:	29b0 0002 1829 0001                         .)..)...

00023178 <list_sort_obj>:
   23178:	2af8 0002 ffff 0003 1465 0001               .*......e...

00023184 <list_locals_dict_table>:
   23184:	03b2 0000 3120 0002 03e6 0000 3130 0002     .... 1......01..
   23194:	03fa 0000 3138 0002 03fe 0000 3140 0002     ....81......@1..
   231a4:	0436 0000 3128 0002 0486 0000 3148 0002     6...(1......H1..
   231b4:	0492 0000 3154 0002 053a 0000 315c 0002     ....T1..:...\1..
   231c4:	0556 0000 3168 0002 056a 0000 3170 0002     V...h1..j...p1..
   231d4:	0596 0000 3178 0002                         ....x1..

000231dc <list_locals_dict>:
   231dc:	2104 0002 005f 0000 000b 0000 3184 0002     .!.._........1..

000231ec <mp_type_list>:
   231ec:	40e4 0002 0000 0136 0cad 0001 0d59 0001     .@....6.....Y...
   231fc:	0000 0000 0da9 0001 0df1 0001 0000 0000     ................
   2320c:	0fbd 0001 1029 0001 0000 0000 0000 0000     ....)...........
	...
   23224:	31dc 0002                                   .1..

00023228 <__func__.6214>:
   23228:	706d 6f5f 6a62 6c5f 7369 5f74 7061 6570     mp_obj_list_appe
   23238:	646e 0000                                   nd..

0002323c <__func__.6220>:
   2323c:	696c 7473 655f 7478 6e65 0064               list_extend.

00023248 <__func__.6227>:
   23248:	696c 7473 705f 706f 0000 0000               list_pop....

00023254 <allowed_args.6256>:
   23254:	0133 0203 34d4 0002 015a 0201 0000 0000     3....4..Z.......

00023264 <__func__.6261>:
   23264:	706d 6f5f 6a62 6c5f 7369 5f74 6f73 7472     mp_obj_list_sort
   23274:	0000 0000                                   ....

00023278 <__func__.6266>:
   23278:	696c 7473 635f 656c 7261 0000               list_clear..

00023284 <__func__.6271>:
   23284:	696c 7473 635f 706f 0079 0000               list_copy...

00023290 <__func__.6277>:
   23290:	696c 7473 635f 756f 746e 0000               list_count..

0002329c <__func__.6283>:
   2329c:	696c 7473 695f 646e 7865 0000               list_index..

000232a8 <__func__.6290>:
   232a8:	696c 7473 695f 736e 7265 0074               list_insert.

000232b4 <__func__.6301>:
   232b4:	706d 6f5f 6a62 6c5f 7369 5f74 6572 6f6d     mp_obj_list_remo
   232c4:	6576 0000                                   ve..

000232c8 <__func__.6306>:
   232c8:	696c 7473 725f 7665 7265 6573 0000 0000     list_reverse....
   232d8:	4d28 5f50 424f 5f4a 5349 4f5f 4a42 7328     (MP_OBJ_IS_OBJ(s
   232e8:	6c65 5f66 6e69 2029 2626 2820 2828 706d     elf_in) && (((mp
   232f8:	6f5f 6a62 625f 7361 5f65 2a74 2829 7628     _obj_base_t*)((v
   23308:	696f 2a64 7329 6c65 5f66 6e69 2929 3e2d     oid*)self_in))->
   23318:	7974 6570 3d20 203d 2628 706d 745f 7079     type == (&mp_typ
   23328:	5f65 616d 2970 2929 0000 0000 2e2e 2e2f     e_map)))....../.
   23338:	2f2e 7970 6f2f 6a62 616d 2e70 0063 0000     ./py/objmap.c...

00023348 <mp_type_map>:
   23348:	40e4 0002 0000 013c 0000 0000 1b25 0001     .@....<.....%...
	...
   2336c:	e065 0000 1bad 0001 0000 0000 0000 0000     e...............
	...

00023384 <__func__.6329>:
   23384:	616d 5f70 7469 7265 656e 7478 0000 0000     map_iternext....
   23394:	0000 0000 6d3c 646f 6c75 2065 2527 2773     ....<module '%s'
   233a4:	003e 0000                                   >...

000233a8 <mp_type_module>:
   233a8:	40e4 0002 0000 0142 1c79 0001 0000 0000     .@....B.y.......
	...
   233c4:	1ccd 0001 0000 0000 0000 0000 0000 0000     ................
	...

000233e4 <mp_builtin_module_table>:
   233e4:	006e 0000 165c 0002 03ce 0000 49f4 0002     n...\........I..
   233f4:	0502 0000 4b10 0002 0452 0000 4ab4 0002     .....K..R....J..
   23404:	05da 0000 5338 0002                         ....8S..

0002340c <mp_builtin_module_map>:
   2340c:	002f 0000 0005 0000 33e4 0002               /........3..

00023418 <mp_type_object>:
   23418:	40e4 0002 0000 0146 0000 0000 1ea9 0001     .@....F.........
	...

00023454 <mp_type_polymorph_iter>:
   23454:	40e4 0002 0000 0131 0000 0000 0000 0000     .@....1.........
	...
   23478:	e065 0000 1ee1 0001 0000 0000 0000 0000     e...............
	...
   23490:	6f4e 656e 0000 0000                         None....

00023498 <mp_type_NoneType>:
   23498:	40e4 0002 0000 00d2 1f01 0001 0000 0000     .@..............
   234a8:	0000 0000 e0f5 0000 0000 0000 0000 0000     ................
	...

000234d4 <mp_const_none_obj>:
   234d4:	3498 0002                                   .4..

000234d8 <range_it_type>:
   234d8:	40e4 0002 0000 0131 0000 0000 0000 0000     .@....1.........
	...
   234fc:	e065 0000 1f81 0001 0000 0000 0000 0000     e...............
	...
   23514:	6172 676e 2865 6425 202c 6425 0000 0000     range(%d, %d....
   23524:	0029 0000 202c 6425 0029 0000 657a 6f72     )..., %d)...zero
   23534:	7320 6574 0070 0000                          step...

0002353c <mp_type_range>:
   2353c:	40e4 0002 0000 0154 201d 0001 2071 0001     .@....T.. ..q ..
   2354c:	0000 0000 216d 0001 0000 0000 2239 0001     ....m!......9"..
   2355c:	21b9 0001 220d 0001 0000 0000 0000 0000     .!..."..........
	...
   23578:	7125 0000                                   %q..

0002357c <mp_type_singleton>:
   2357c:	40e4 0002 0000 0001 22a9 0001 0000 0000     .@......."......
	...

000235b8 <mp_const_ellipsis_obj>:
   235b8:	357c 0002 00bd 0000 6325 0000 255c 0063     |5......%c..\%c.
   235c8:	5c5c 0000 6e5c 0000 725c 0000 745c 0000     \\..\n..\r..\t..
   235d8:	785c 3025 7832 0000 2e25 732a 0000 0000     \x%02x..%.*s....
   235e8:	0062 0000 7962 6574 2073 6176 756c 2065     b...bytes value 
   235f8:	756f 2074 666f 7220 6e61 6567 0000 0000     out of range....
   23608:	7277 6e6f 2067 756e 626d 7265 6f20 2066     wrong number of 
   23618:	7261 7567 656d 746e 0073 0000 4d28 5f50     arguments...(MP_
   23628:	424f 5f4a 5349 515f 5453 2852 6573 666c     OBJ_IS_QSTR(self
   23638:	695f 296e 7c20 207c 4d28 5f50 424f 5f4a     _in) || (MP_OBJ_
   23648:	5349 4f5f 4a42 7328 6c65 5f66 6e69 2029     IS_OBJ(self_in) 
   23658:	2626 2820 6d28 5f70 626f 5f6a 6162 6573     && ((mp_obj_base
   23668:	745f 292a 2828 6f76 6469 292a 6573 666c     _t*)((void*)self
   23678:	695f 296e 2d29 743e 7079 2d65 623e 6e69     _in))->type->bin
   23688:	7261 5f79 706f 3d20 203d 706d 6f5f 6a62     ary_op == mp_obj
   23698:	735f 7274 625f 6e69 7261 5f79 706f 2929     _str_binary_op))
   236a8:	0000 0000 2e2e 2e2f 2f2e 7970 6f2f 6a62     ....../../py/obj
   236b8:	7473 2e72 0063 0000 6f6a 6e69 6520 7078     str.c...join exp
   236c8:	6365 7374 6120 6c20 7369 2074 666f 7320     ects a list of s
   236d8:	7274 622f 7479 7365 6f20 6a62 6365 7374     tr/bytes objects
   236e8:	6320 6e6f 6973 7473 6e65 2074 6977 6874      consistent with
   236f8:	7320 6c65 2066 626f 656a 7463 0000 0000      self object....

00023708 <str_join_obj>:
   23708:	2a1c 0002 2d85 0001 6d65 7470 2079 6573     .*...-..empty se
   23718:	6170 6172 6f74 0072                         parator.

00023720 <str_split_obj>:
   23720:	2af8 0002 0006 0002 2fb9 0001 7372 6c70     .*......./..rspl
   23730:	7469 4e28 6e6f 2c65 296e 0000               it(None,n)..

0002373c <str_rsplit_obj>:
   2373c:	2af8 0002 0006 0002 31cd 0001 4d28 5f50     .*.......1..(MP_
   2374c:	424f 5f4a 5349 515f 5453 2852 7261 7367     OBJ_IS_QSTR(args
   2375c:	305b 295d 7c20 207c 4d28 5f50 424f 5f4a     [0]) || (MP_OBJ_
   2376c:	5349 4f5f 4a42 6128 6772 5b73 5d30 2029     IS_OBJ(args[0]) 
   2377c:	2626 2820 6d28 5f70 626f 5f6a 6162 6573     && ((mp_obj_base
   2378c:	745f 292a 2828 6f76 6469 292a 7261 7367     _t*)((void*)args
   2379c:	305b 295d 2d29 743e 7079 2d65 623e 6e69     [0]))->type->bin
   237ac:	7261 5f79 706f 3d20 203d 706d 6f5f 6a62     ary_op == mp_obj
   237bc:	735f 7274 625f 6e69 7261 5f79 706f 2929     _str_binary_op))
   237cc:	0000 0000 7573 7362 7274 6e69 2067 6f6e     ....substring no
   237dc:	2074 6f66 6e75 0064                         t found.

000237e4 <str_find_obj>:
   237e4:	2af8 0002 0008 0004 3559 0001               .*......Y5..

000237f0 <str_rfind_obj>:
   237f0:	2af8 0002 0008 0004 3579 0001               .*......y5..

000237fc <str_index_obj>:
   237fc:	2af8 0002 0008 0004 359d 0001               .*.......5..

00023808 <str_rindex_obj>:
   23808:	2af8 0002 0008 0004 35bd 0001               .*.......5..

00023814 <str_startswith_obj>:
   23814:	2af8 0002 0006 0004 35e1 0001 7473 7261     .*.......5..star
   23824:	2f74 6e65 2064 6e69 6964 6563 0073 0000     t/end indices...

00023834 <str_endswith_obj>:
   23834:	2af8 0002 0006 0004 36a5 0001 616c 7473     .*.......6..last
   23844:	675f 6f6f 5f64 6863 7261 705f 736f 3e20     _good_char_pos >
   23854:	203d 6966 7372 5f74 6f67 646f 635f 6168     = first_good_cha
   23864:	5f72 6f70 0073 0000 6966 7372 5f74 6f67     r_pos...first_go
   23874:	646f 635f 6168 5f72 6f70 2073 3d3d 3020     od_char_pos == 0
   23884:	0000 0000                                   ....

00023888 <str_strip_obj>:
   23888:	2af8 0002 0004 0002 3989 0001               .*.......9..

00023894 <str_lstrip_obj>:
   23894:	2af8 0002 0004 0002 39a9 0001               .*.......9..

000238a0 <str_rstrip_obj>:
   238a0:	2af8 0002 0004 0002 39c9 0001 3e3c 5e3d     .*.......9..<>=^
   238b0:	0000 0000 6362 6564 6645 6746 6e47 736f     ....bcdeEfFgGnos
   238c0:	5878 0025 6162 2064 6f66 6d72 7461 7320     xX%.bad format s
   238d0:	7274 6e69 0067 0000 7574 6c70 2065 6e69     tring...tuple in
   238e0:	6564 2078 756f 2074 666f 7220 6e61 6567     dex out of range
   238f0:	0000 0000 7461 7274 6269 7475 7365 6e20     ....attributes n
   23900:	746f 7320 7075 6f70 7472 6465 7920 7465     ot supported yet
   23910:	0000 0000 6f63 766e 7265 6973 6e6f 3d20     ....conversion =
   23920:	203d 7227 0027 0000                         = 'r'...

00023928 <str_format_obj>:
   23928:	2af8 0002 ffff 0003 44c9 0001 4d28 5f50     .*.......D..(MP_
   23938:	424f 5f4a 5349 515f 5453 2852 6170 7474     OBJ_IS_QSTR(patt
   23948:	7265 296e 7c20 207c 4d28 5f50 424f 5f4a     ern) || (MP_OBJ_
   23958:	5349 4f5f 4a42 7028 7461 6574 6e72 2029     IS_OBJ(pattern) 
   23968:	2626 2820 6d28 5f70 626f 5f6a 6162 6573     && ((mp_obj_base
   23978:	745f 292a 2828 6f76 6469 292a 6170 7474     _t*)((void*)patt
   23988:	7265 296e 2d29 743e 7079 2d65 623e 6e69     ern))->type->bin
   23998:	7261 5f79 706f 3d20 203d 706d 6f5f 6a62     ary_op == mp_obj
   239a8:	735f 7274 625f 6e69 7261 5f79 706f 2929     _str_binary_op))
   239b8:	0000 0000 6f66 6d72 7461 6e20 6565 7364     ....format needs
   239c8:	6120 6420 6369 0074 6f66 6d72 7461 7320      a dict.format s
   239d8:	7274 6e69 2067 656e 6465 2073 6f6d 6572     tring needs more
   239e8:	6120 6772 6d75 6e65 7374 0000 2525 2063      arguments..%%c 
   239f8:	656e 6465 2073 6e69 2074 726f 6320 6168     needs int or cha
   23a08:	0072 0000 6e69 6574 6567 2072 656e 6465     r...integer need
   23a18:	6465 0000 6f66 6d72 7461 7320 7274 6e69     ed..format strin
   23a28:	2067 6964 6e64 7427 6320 6e6f 6576 7472     g didn't convert
   23a38:	6120 6c6c 6120 6772 6d75 6e65 7374 0000      all arguments..
   23a48:	6164 6174 2120 203d 554e 4c4c 0000 0000     data != NULL....

00023a58 <str_replace_obj>:
   23a58:	2af8 0002 0008 0006 4c01 0001               .*.......L..

00023a64 <str_count_obj>:
   23a64:	2af8 0002 0008 0004 4ee5 0001               .*.......N..

00023a70 <str_lower_obj>:
   23a70:	29b0 0002 5155 0001                         .)..UQ..

00023a78 <str_upper_obj>:
   23a78:	29b0 0002 5175 0001                         .)..uQ..

00023a80 <str_isspace_obj>:
   23a80:	29b0 0002 5295 0001                         .)...R..

00023a88 <str_isalpha_obj>:
   23a88:	29b0 0002 52b5 0001                         .)...R..

00023a90 <str_isdigit_obj>:
   23a90:	29b0 0002 52d5 0001                         .)...R..

00023a98 <str_isupper_obj>:
   23a98:	29b0 0002 52f5 0001                         .)...R..

00023aa0 <str_islower_obj>:
   23aa0:	29b0 0002 5315 0001                         .)...S..

00023aa8 <str8_locals_dict_table>:
   23aa8:	043a 0000 37e4 0002 056e 0000 37f0 0002     :....7..n....7..
   23ab8:	0486 0000 37fc 0002 0572 0000 3808 0002     .....7..r....8..
   23ac8:	04ca 0000 3708 0002 059e 0000 3720 0002     .....7...... 7..
   23ad8:	057a 0000 373c 0002 05a6 0000 3814 0002     z...<7.......8..
   23ae8:	042a 0000 3834 0002 05ba 0000 3888 0002     *...48.......8..
   23af8:	04ee 0000 3894 0002 057e 0000 38a0 0002     .....8..~....8..
   23b08:	043e 0000 3928 0002 055a 0000 3a58 0002     >...(9..Z...X:..
   23b18:	03fe 0000 3a64 0002 04ea 0000 3a70 0002     ....d:......p:..
   23b28:	05e6 0000 3a78 0002 04b2 0000 3a80 0002     ....x:.......:..
   23b38:	049e 0000 3a88 0002 04a2 0000 3a90 0002     .....:.......:..
   23b48:	04ba 0000 3a98 0002 04ae 0000 3aa0 0002     .....:.......:..

00023b58 <str8_locals_dict>:
   23b58:	2104 0002 00b7 0000 0016 0000 3aa8 0002     .!...........:..

00023b68 <mp_type_str>:
   23b68:	40e4 0002 0000 016d 2549 0001 25fd 0001     .@....m.I%...%..
	...
   23b80:	29d5 0001 0000 0000 2cf9 0001 58e1 0001     .).......,...X..
   23b90:	0000 0000 5335 0001 0000 0000 0000 0000     ....5S..........
   23ba0:	3b58 0002                                   X;..

00023ba4 <mp_type_bytes>:
   23ba4:	40e4 0002 0000 00f5 2549 0001 274d 0001     .@......I%..M'..
	...
   23bbc:	29d5 0001 0000 0000 2cf9 0001 5995 0001     .).......,...Y..
   23bcc:	0000 0000 5335 0001 0000 0000 0000 0000     ....5S..........
   23bdc:	3b58 0002 0000 0000                         X;......

00023be4 <mp_const_empty_bytes_obj>:
   23be4:	3ba4 0002 0000 0000 0000 0000 3be0 0002     .;...........;..
   23bf4:	6163 276e 2074 6f63 766e 7265 2074 6f74     can't convert to
   23c04:	7320 7274 6920 706d 696c 6963 6c74 0079      str implicitly.

00023c14 <__func__.6348>:
   23c14:	7473 5f72 6f6a 6e69 0000 0000               str_join....

00023c20 <__func__.6430>:
   23c20:	7473 5f72 6966 646e 7265 0000               str_finder..

00023c2c <__func__.6488>:
   23c2c:	7473 5f72 6e75 5f69 7473 6972 0070 0000     str_uni_strip...

00023c3c <whitespace.6492>:
   23c3c:	0920 0d0a 0c0b 0000                          .......

00023c44 <__func__.6578>:
   23c44:	706d 6f5f 6a62 735f 7274 665f 726f 616d     mp_obj_str_forma
   23c54:	5f74 6568 706c 7265 0000 0000               t_helper....

00023c60 <__func__.6627>:
   23c60:	706d 6f5f 6a62 735f 7274 665f 726f 616d     mp_obj_str_forma
   23c70:	0074 0000                                   t...

00023c74 <__func__.6639>:
   23c74:	7473 5f72 6f6d 7564 6f6c 665f 726f 616d     str_modulo_forma
   23c84:	0074 0000                                   t...

00023c88 <__func__.6690>:
   23c88:	7473 5f72 6572 6c70 6361 0065               str_replace.

00023c94 <__func__.6717>:
   23c94:	7473 5f72 6f63 6e75 0074 0000 0028 0000     str_count...(...
   23ca4:	202c 0000 002c 0000 0029 0000 706d 6f5f     , ..,...)...mp_o
   23cb4:	6a62 675f 7465 745f 7079 2865 6573 666c     bj_get_type(self
   23cc4:	695f 296e 3e2d 6567 6974 6574 2072 3d3d     _in)->getiter ==
   23cd4:	6d20 5f70 626f 5f6a 7574 6c70 5f65 6567      mp_obj_tuple_ge
   23ce4:	6974 6574 0072 0000 2e2e 2e2f 2f2e 7970     titer...../../py
   23cf4:	6f2f 6a62 7574 6c70 2e65 0063 4d28 5f50     /objtuple.c.(MP_
   23d04:	424f 5f4a 5349 4f5f 4a42 7328 6c65 5f66     OBJ_IS_OBJ(self_
   23d14:	6e69 2029 2626 2820 2828 706d 6f5f 6a62     in) && (((mp_obj
   23d24:	625f 7361 5f65 2a74 2829 7628 696f 2a64     _base_t*)((void*
   23d34:	7329 6c65 5f66 6e69 2929 3e2d 7974 6570     )self_in))->type
   23d44:	3d20 203d 2628 706d 745f 7079 5f65 7574      == (&mp_type_tu
   23d54:	6c70 2965 2929 0000                         ple)))..

00023d5c <tuple_count_obj>:
   23d5c:	2a1c 0002 5ea1 0001 4d28 5f50 424f 5f4a     .*...^..(MP_OBJ_
   23d6c:	5349 4f5f 4a42 6128 6772 5b73 5d30 2029     IS_OBJ(args[0]) 
   23d7c:	2626 2820 2828 706d 6f5f 6a62 625f 7361     && (((mp_obj_bas
   23d8c:	5f65 2a74 2829 7628 696f 2a64 6129 6772     e_t*)((void*)arg
   23d9c:	5b73 5d30 2929 3e2d 7974 6570 3d20 203d     s[0]))->type == 
   23dac:	2628 706d 745f 7079 5f65 7574 6c70 2965     (&mp_type_tuple)
   23dbc:	2929 0000                                   ))..

00023dc0 <tuple_index_obj>:
   23dc0:	2af8 0002 0008 0004 5f05 0001               .*......._..

00023dcc <tuple_locals_dict_table>:
   23dcc:	03fe 0000 3d5c 0002 0486 0000 3dc0 0002     ....\=.......=..

00023ddc <tuple_locals_dict>:
   23ddc:	2104 0002 0017 0000 0002 0000 3dcc 0002     .!...........=..

00023dec <mp_type_tuple>:
   23dec:	40e4 0002 0000 0174 5a55 0001 5ad9 0001     .@....t.UZ...Z..
   23dfc:	0000 0000 5c4d 0001 5cdd 0001 0000 0000     ....M\...\......
   23e0c:	5e61 0001 60e1 0001 0000 0000 0000 0000     a^...`..........
	...
   23e24:	3ddc 0002                                   .=..

00023e28 <mp_const_empty_tuple_obj>:
   23e28:	3dec 0002 0000 0000 504d 4f5f 4a42 495f     .=......MP_OBJ_I
   23e38:	5f53 5954 4550 7328 6c65 5f66 6e69 202c     S_TYPE(self_in, 
   23e48:	6d26 5f70 7974 6570 745f 7075 656c 0029     &mp_type_tuple).

00023e58 <__func__.6155>:
   23e58:	7574 6c70 5f65 6d63 5f70 6568 706c 7265     tuple_cmp_helper
   23e68:	0000 0000                                   ....

00023e6c <__func__.6204>:
   23e6c:	7574 6c70 5f65 6f63 6e75 0074               tuple_count.

00023e78 <__func__.6211>:
   23e78:	7574 6c70 5f65 6e69 6564 0078               tuple_index.

00023e84 <__func__.6232>:
   23e84:	706d 6f5f 6a62 745f 7075 656c 675f 7465     mp_obj_tuple_get
   23e94:	0000 0000                                   ....

00023e98 <__func__.6237>:
   23e98:	706d 6f5f 6a62 745f 7075 656c 645f 6c65     mp_obj_tuple_del
   23ea8:	0000 0000 504d 4f5f 4a42 495f 5f53 5954     ....MP_OBJ_IS_TY
   23eb8:	4550 2a28 7469 6d65 202c 6d26 5f70 7974     PE(*item, &mp_ty
   23ec8:	6570 745f 7079 2965 0000 0000 2e2e 2e2f     pe_type)....../.
   23ed8:	2f2e 7970 6f2f 6a62 7974 6570 632e 0000     ./py/objtype.c..

00023ee8 <native_base_init_wrapper_obj>:
   23ee8:	2af8 0002 fffe 0003 6281 0001 756e 5f6d     .*.......b..num_
   23ef8:	616e 6974 6576 625f 7361 7365 3c20 3220     native_bases < 2
   23f08:	0000 0000 6f6c 6b6f 7075 3e2d 6564 7473     ....lookup->dest
   23f18:	305b 205d 3d3d 4d20 5f50 424f 5f4a 554e     [0] == MP_OBJ_NU
   23f28:	4c4c 0000 6f6c 6b6f 7075 3e2d 6564 7473     LL..lookup->dest
   23f38:	315b 205d 3d3d 4d20 5f50 424f 5f4a 554e     [1] == MP_OBJ_NU
   23f48:	4c4c 0000 7974 6570 3e2d 6f6c 6163 736c     LL..type->locals
   23f58:	645f 6369 2d74 623e 7361 2e65 7974 6570     _dict->base.type
   23f68:	3d20 203d 6d26 5f70 7974 6570 645f 6369      == &mp_type_dic
   23f78:	0074 0000 253c 2073 626f 656a 7463 6120     t...<%s object a
   23f88:	2074 7025 003e 0000 706d 6f5f 6a62 695f     t %p>...mp_obj_i
   23f98:	5f73 6e69 7473 6e61 6563 745f 7079 2865     s_instance_type(
   23fa8:	6573 666c 0029 0000 5f5f 6e69 7469 5f5f     self)...__init__
   23fb8:	2928 7320 6f68 6c75 2064 6572 7574 6e72     () should return
   23fc8:	4e20 6e6f 0065 0000                          None...

00023fd0 <mp_unary_op_method_name>:
   23fd0:	0000 0000 1903 0011 0015 0000               ............

00023fdc <mp_binary_op_method_name>:
   23fdc:	101a 180b 000d 0000 0000 0000 0000 1612     ................
	...
   23ff4:	0000 2602 0000 0000 0000 0007 706d 6f5f     ...&........mp_o
   24004:	6a62 695f 5f73 6e69 7473 6e61 6563 745f     bj_is_instance_t
   24014:	7079 2865 706d 6f5f 6a62 675f 7465 745f     ype(mp_obj_get_t
   24024:	7079 2865 6573 666c 695f 296e 0029 0000     ype(self_in))...
   24034:	626f 656a 7463 6e20 746f 6320 6c61 616c     object not calla
   24044:	6c62 0065 633c 616c 7373 2720 7125 3e27     ble.<class '%q'>
   24054:	0000 0000 7974 6570 7420 6b61 7365 3120     ....type takes 1
   24064:	6f20 2072 2033 7261 7567 656d 746e 0073      or 3 arguments.
   24074:	6163 6e6e 746f 6320 6572 7461 2065 6e69     cannot create in
   24084:	7473 6e61 6563 0000 504d 4f5f 4a42 495f     stance..MP_OBJ_I
   24094:	5f53 5954 4550 7328 6c65 5f66 6e69 202c     S_TYPE(self_in, 
   240a4:	6d26 5f70 7974 6570 745f 7079 2965 0000     &mp_type_type)..
   240b4:	6573 666c 3e2d 6f6c 6163 736c 645f 6369     self->locals_dic
   240c4:	2d74 623e 7361 2e65 7974 6570 3d20 203d     t->base.type == 
   240d4:	6d26 5f70 7974 6570 645f 6369 0074 0000     &mp_type_dict...

000240e4 <mp_type_type>:
   240e4:	40e4 0002 0000 0175 6e61 0001 6e8d 0001     .@....u.an...n..
   240f4:	6ef9 0001 e0f5 0000 0000 0000 6f39 0001     .n..........9o..
	...
   24120:	7974 6570 6920 6e73 7427 6120 206e 6361     type isn't an ac
   24130:	6563 7470 6261 656c 6220 7361 2065 7974     ceptable base ty
   24140:	6570 0000 756d 746c 7069 656c 6220 7361     pe..multiple bas
   24150:	7365 6820 7661 2065 6e69 7473 6e61 6563     es have instance
   24160:	6c20 7961 6f2d 7475 6320 6e6f 6c66 6369      lay-out conflic
   24170:	0074 0000 733c 7075 7265 203a 0000 0000     t...<super: ....
   24180:	202c 0000 003e 0000 504d 4f5f 4a42 495f     , ..>...MP_OBJ_I
   24190:	5f53 5954 4550 7328 6c65 5f66 6e69 202c     S_TYPE(self_in, 
   241a0:	6d26 5f70 7974 6570 735f 7075 7265 0029     &mp_type_super).
   241b0:	504d 4f5f 4a42 495f 5f53 5954 4550 7328     MP_OBJ_IS_TYPE(s
   241c0:	6c65 2d66 743e 7079 2c65 2620 706d 745f     elf->type, &mp_t
   241d0:	7079 5f65 7974 6570 0029 0000 504d 4f5f     ype_type)...MP_O
   241e0:	4a42 495f 5f53 5954 4550 6928 6574 736d     BJ_IS_TYPE(items
   241f0:	695b 2c5d 2620 706d 745f 7079 5f65 7974     [i], &mp_type_ty
   24200:	6570 0029                                   pe).

00024204 <mp_type_super>:
   24204:	40e4 0002 0000 0170 723d 0001 7295 0001     .@....p.=r...r..
	...
   24220:	7309 0001 0000 0000 0000 0000 0000 0000     .s..............
	...
   24240:	7369 7573 6362 616c 7373 2928 6120 6772     issubclass() arg
   24250:	3220 6d20 7375 2074 6562 6120 6320 616c      2 must be a cla
   24260:	7373 6f20 2072 2061 7574 6c70 2065 666f     ss or a tuple of
   24270:	6320 616c 7373 7365 0000 0000 7369 7573      classes....issu
   24280:	6362 616c 7373 2928 6120 6772 3120 6d20     bclass() arg 1 m
   24290:	7375 2074 6562 6120 6320 616c 7373 0000     ust be a class..

000242a0 <mp_builtin_issubclass_obj>:
   242a0:	2a1c 0002 7681 0001                         .*...v..

000242a8 <mp_builtin_isinstance_obj>:
   242a8:	2a1c 0002 76c9 0001 6573 666c 3d20 203d     .*...v..self == 
   242b8:	6d26 5f70 7974 6570 735f 6174 6974 6d63     &mp_type_staticm
   242c8:	7465 6f68 2064 7c7c 7320 6c65 2066 3d3d     ethod || self ==
   242d8:	2620 706d 745f 7079 5f65 6c63 7361 6d73      &mp_type_classm
   242e8:	7465 6f68 0064 0000                         ethod...

000242f0 <mp_type_staticmethod>:
   242f0:	40e4 0002 0000 016a 0000 0000 7729 0001     .@....j.....)w..
	...

0002432c <mp_type_classmethod>:
   2432c:	40e4 0002 0000 00f8 0000 0000 7729 0001     .@..........)w..
	...

00024368 <__func__.6691>:
   24368:	6e69 7473 6e61 6563 635f 756f 746e 6e5f     instance_count_n
   24378:	7461 7669 5f65 6162 6573 0073               ative_bases.

00024384 <__func__.6709>:
   24384:	706d 6f5f 6a62 6e5f 7765 695f 736e 6174     mp_obj_new_insta
   24394:	636e 0065                                   nce.

00024398 <__func__.6721>:
   24398:	706d 6f5f 6a62 635f 616c 7373 6c5f 6f6f     mp_obj_class_loo
   243a8:	756b 0070                                   kup.

000243ac <__func__.6752>:
   243ac:	706d 6f5f 6a62 695f 736e 6174 636e 5f65     mp_obj_instance_
   243bc:	616d 656b 6e5f 7765 0000 0000               make_new....

000243c8 <__func__.6793>:
   243c8:	706d 6f5f 6a62 695f 736e 6174 636e 5f65     mp_obj_instance_
   243d8:	6f6c 6461 615f 7474 0072 0000               load_attr...

000243e4 <__func__.6886>:
   243e4:	7974 6570 615f 7474 0072 0000               type_attr...

000243f0 <__func__.6935>:
   243f0:	7573 6570 5f72 7461 7274 0000               super_attr..

000243fc <__func__.6997>:
   243fc:	7473 7461 6369 635f 616c 7373 6d5f 7465     static_class_met
   2440c:	6f68 5f64 616d 656b 6e5f 7765 0000 0000     hod_make_new....
   2441c:	4d28 5f50 424f 5f4a 5349 4f5f 4a42 7328     (MP_OBJ_IS_OBJ(s
   2442c:	6c65 5f66 6e69 2029 2626 2820 2828 706d     elf_in) && (((mp
   2443c:	6f5f 6a62 625f 7361 5f65 2a74 2829 7628     _obj_base_t*)((v
   2444c:	696f 2a64 7329 6c65 5f66 6e69 2929 3e2d     oid*)self_in))->
   2445c:	7974 6570 3d20 203d 2628 706d 745f 7079     type == (&mp_typ
   2446c:	5f65 697a 2970 2929 0000 0000 2e2e 2e2f     e_zip)))....../.
   2447c:	2f2e 7970 6f2f 6a62 697a 2e70 0063 0000     ./py/objzip.c...

0002448c <mp_type_zip>:
   2448c:	40e4 0002 0000 017c 0000 0000 77f5 0001     .@....|......w..
	...
   244b0:	e065 0000 786d 0001 0000 0000 0000 0000     e...mx..........
	...

000244c8 <__func__.6328>:
   244c8:	697a 5f70 7469 7265 656e 7478 0000 0000     zip_iternext....

000244d8 <mp_op_getitem_obj>:
   244d8:	2a1c 0002 7919 0001                         .*...y..

000244e0 <mp_op_setitem_obj>:
   244e0:	2a88 0002 7941 0001                         .*..Ay..

000244e8 <mp_op_delitem_obj>:
   244e8:	2a1c 0002 796d 0001                         .*..my..

000244f0 <mp_op_contains_obj>:
   244f0:	2a1c 0002 7995 0001 626f 656a 7463 6e20     .*...y..object n
   24500:	746f 6920 206e 6573 7571 6e65 6563 0000     ot in sequence..
   24510:	6162 2064 7974 6570 6f63 6564 0000 0000     bad typecode....
   24520:	702e 0079 6874 7369 6e5f 6d61 5f65 2071     .py.this_name_q 
   24530:	3d21 4d20 5f50 424f 5f4a 554e 4c4c 0000     != MP_OBJ_NULL..
   24540:	2e2e 2e2f 2f2e 7970 622f 6975 746c 6e69     ../../py/builtin
   24550:	6d69 6f70 7472 632e 0000 0000 6163 6e6e     import.c....cann
   24560:	746f 7020 7265 6f66 6d72 7220 6c65 7461     ot perform relat
   24570:	7669 2065 6d69 6f70 7472 0000 6f6d 7564     ive import..modu
   24580:	656c 6e20 746f 6620 756f 646e 0000 0000     le not found....
   24590:	5f5f 6e69 7469 5f5f 702e 0079               __init__.py.

0002459c <mp_builtin___import___obj>:
   2459c:	2af8 0002 000a 0002 8905 0001               .*..........

000245a8 <__func__.7095>:
   245a8:	706d 625f 6975 746c 6e69 5f5f 695f 706d     mp_builtin___imp
   245b8:	726f 5f74 005f 0000                         ort__...

000245c0 <mp_builtin_eval_obj>:
   245c0:	2af8 0002 0006 0002 8f31 0001               .*......1...

000245cc <mp_builtin_exec_obj>:
   245cc:	2af8 0002 0006 0002 8f51 0001 2032 3d3c     .*......Q...2 <=
   245dc:	6e20 615f 6772 0073 2e2e 2e2f 2f2e 7970      n_args.../../py
   245ec:	6d2f 646f 7562 6c69 6974 736e 632e 0000     /modbuiltins.c..

000245fc <mp_builtin___build_class___obj>:
   245fc:	2af8 0002 fffe 0005 9075 0001               .*......u...

00024608 <mp_builtin_abs_obj>:
   24608:	29b0 0002 912d 0001                         .)..-...

00024610 <mp_builtin_all_obj>:
   24610:	29b0 0002 9149 0001                         .)..I...

00024618 <mp_builtin_any_obj>:
   24618:	29b0 0002 9199 0001                         .)......

00024620 <mp_builtin_bin_obj>:
   24620:	29b0 0002 91e1 0001                         .)......

00024628 <mp_builtin_callable_obj>:
   24628:	29b0 0002 9209 0001 6863 2872 2029 7261     .)......chr() ar
   24638:	2067 6f6e 2074 6e69 7220 6e61 6567 3228     g not in range(2
   24648:	3635 0029                                   56).

0002464c <mp_builtin_chr_obj>:
   2464c:	29b0 0002 9235 0001                         .)..5...

00024654 <mp_builtin_dir_obj>:
   24654:	2af8 0002 0002 0000 9279 0001               .*......y...

00024660 <mp_builtin_divmod_obj>:
   24660:	2a1c 0002 9331 0001                         .*..1...

00024668 <mp_builtin_hash_obj>:
   24668:	29b0 0002 9351 0001                         .)..Q...

00024670 <mp_builtin_hex_obj>:
   24670:	29b0 0002 936d 0001                         .)..m...

00024678 <mp_builtin_iter_obj>:
   24678:	29b0 0002 9389 0001                         .)......

00024680 <mp_builtin_next_obj>:
   24680:	29b0 0002 93a5 0001                         .)......

00024688 <mp_builtin_oct_obj>:
   24688:	29b0 0002 93d9 0001 726f 2064 7865 6570     .)......ord expe
   24698:	7463 2073 2061 6863 7261 6361 6574 0072     cts a character.

000246a8 <mp_builtin_ord_obj>:
   246a8:	29b0 0002 93f5 0001 2d33 7261 2067 6f70     .)......3-arg po
   246b8:	2877 2029 6f6e 2074 7573 7070 726f 6574     w() not supporte
   246c8:	0064 0000                                   d...

000246cc <mp_builtin_pow_obj>:
   246cc:	2af8 0002 0006 0004 9431 0001               .*......1...

000246d8 <mp_builtin_print_obj>:
   246d8:	2af8 0002 ffff 0001 9471 0001 000a 0000     .*......q.......

000246e8 <mp_builtin___repl_print___obj>:
   246e8:	29b0 0002 9525 0001                         .)..%...

000246f0 <mp_builtin_repr_obj>:
   246f0:	29b0 0002 955d 0001                         .)..]...

000246f8 <mp_builtin_round_obj>:
   246f8:	2af8 0002 0004 0002 959d 0001               .*..........

00024704 <mp_builtin_sum_obj>:
   24704:	2af8 0002 0004 0002 95fd 0001 756d 7473     .*..........must
   24714:	7520 6573 6b20 7965 6f77 6472 6120 6772      use keyword arg
   24724:	6d75 6e65 2074 6f66 2072 656b 2079 7566     ument for key fu
   24734:	636e 6974 6e6f 0000                         nction..

0002473c <mp_builtin_sorted_obj>:
   2473c:	2af8 0002 ffff 0003 9655 0001               .*......U...

00024748 <mp_builtin_getattr_obj>:
   24748:	2af8 0002 0006 0004 96f5 0001               .*..........

00024754 <mp_builtin_setattr_obj>:
   24754:	2a88 0002 9735 0001                         .*..5...

0002475c <mp_builtin_hasattr_obj>:
   2475c:	2a1c 0002 9761 0001                         .*..a...

00024764 <mp_builtin_globals_obj>:
   24764:	2944 0002 979d 0001                         D)......

0002476c <mp_builtin_locals_obj>:
   2476c:	2944 0002 97ad 0001                         D)......

00024774 <mp_builtin_id_obj>:
   24774:	29b0 0002 ded1 0000                         .)......

0002477c <mp_builtin_len_obj>:
   2477c:	29b0 0002 df1d 0000                         .)......

00024784 <mp_module_builtins_globals_table>:
   24784:	0076 0000 03ce 0000 0012 0000 45fc 0002     v............E..
   24794:	004e 0000 459c 0002 008a 0000 46e8 0002     N....E.......F..
   247a4:	03c2 0000 1c1c 0002 03d6 0000 3ba4 0002     .............;..
   247b4:	040a 0000 2104 0002 0496 0000 2f80 0002     .....!......./..
   247c4:	04da 0000 31ec 0002 04f2 0000 3348 0002     .....1......H3..
   247d4:	051a 0000 3418 0002 0552 0000 353c 0002     .....4..R...<5..
   247e4:	05b6 0000 3b68 0002 05c2 0000 4204 0002     ....h;.......B..
   247f4:	05d2 0000 3dec 0002 05d6 0000 40e4 0002     .....=.......@..
   24804:	05f2 0000 448c 0002 03e2 0000 432c 0002     .....D......,C..
   24814:	05aa 0000 42f0 0002 02f6 0000 35b8 0002     .....B.......5..
   24824:	039a 0000 4608 0002 03a6 0000 4610 0002     .....F.......F..
   24834:	03ae 0000 4618 0002 03ba 0000 4620 0002     .....F...... F..
   24844:	03da 0000 4628 0002 03de 0000 464c 0002     ....(F......LF..
   24854:	0412 0000 4654 0002 041a 0000 4660 0002     ....TF......`F..
   24864:	042e 0000 45c0 0002 0432 0000 45cc 0002     .....E..2....E..
   24874:	045e 0000 4748 0002 058a 0000 4754 0002     ^...HG......TG..
   24884:	0462 0000 4764 0002 046a 0000 475c 0002     b...dG..j...\G..
   24894:	046e 0000 4668 0002 047a 0000 4670 0002     n...hF..z...pF..
   248a4:	0482 0000 4774 0002 04aa 0000 42a8 0002     ....tG.......B..
   248b4:	04b6 0000 42a0 0002 04c2 0000 4678 0002     .....B......xF..
   248c4:	04d6 0000 477c 0002 04e2 0000 476c 0002     ....|G......lG..
   248d4:	0516 0000 4680 0002 051e 0000 4688 0002     .....F.......F..
   248e4:	052e 0000 46a8 0002 0546 0000 46cc 0002     .....F..F....F..
   248f4:	054a 0000 46d8 0002 055e 0000 46f0 0002     J....F..^....F..
   24904:	0576 0000 46f8 0002 059a 0000 473c 0002     v....F......<G..
   24914:	05be 0000 4704 0002 02ea 0000 2208 0002     .....G......."..
   24924:	02de 0000 2370 0002 02e2 0000 2424 0002     ....p#......$$..
   24934:	02e6 0000 2460 0002 02f2 0000 249c 0002     ....`$.......$..
   24944:	02fa 0000 22f8 0002 02fe 0000 22bc 0002     ....."......."..
   24954:	0322 0000 24d8 0002 0326 0000 2730 0002     "....$..&...0'..
   24964:	032a 0000 2550 0002 0332 0000 2280 0002     *...P%..2...."..
   24974:	032e 0000 258c 0002 033a 0000 2514 0002     .....%..:....%..
   24984:	0342 0000 25c8 0002 0346 0000 2604 0002     B....%..F....&..
   24994:	034e 0000 26b8 0002 0356 0000 2640 0002     N....&..V...@&..
   249a4:	035e 0000 23ac 0002 0376 0000 267c 0002     ^....#..v...|&..
   249b4:	037e 0000 2334 0002 0382 0000 26f4 0002     ~...4#.......&..
   249c4:	0386 0000 2244 0002 038a 0000 276c 0002     ....D"......l'..
   249d4:	038e 0000 27a8 0002 0396 0000 23e8 0002     .....'.......#..

000249e4 <mp_module_builtins_globals>:
   249e4:	2104 0002 0267 0000 004c 0000 4784 0002     .!..g...L....G..

000249f4 <mp_module_builtins>:
   249f4:	33a8 0002 49e4 0002                         .3...I..

000249fc <__func__.7026>:
   249fc:	706d 625f 6975 746c 6e69 5f5f 625f 6975     mp_builtin___bui
   24a0c:	646c 635f 616c 7373 5f5f 0000               ld_class__..

00024a18 <allowed_args.7138>:
   24a18:	0161 0203 00ba 0000 0109 0203 00be 0000     a...............

00024a28 <gc_collect_obj>:
   24a28:	2944 0002 97e5 0001                         D)......

00024a30 <gc_disable_obj>:
   24a30:	2944 0002 97f9 0001                         D)......

00024a38 <gc_enable_obj>:
   24a38:	2944 0002 9819 0001                         D)......

00024a40 <gc_isenabled_obj>:
   24a40:	2944 0002 9839 0001                         D)..9...

00024a48 <gc_mem_free_obj>:
   24a48:	2944 0002 9855 0001                         D)..U...

00024a50 <gc_mem_alloc_obj>:
   24a50:	2944 0002 9875 0001                         D)..u...

00024a58 <gc_threshold_obj>:
   24a58:	2af8 0002 0002 0000 9895 0001               .*..........

00024a64 <mp_module_gc_globals_table>:
   24a64:	0076 0000 0452 0000 03f2 0000 4a28 0002     v...R.......(J..
   24a74:	0416 0000 4a30 0002 0422 0000 4a38 0002     ....0J.."...8J..
   24a84:	04a6 0000 4a40 0002 04fe 0000 4a48 0002     ....@J......HJ..
   24a94:	04fa 0000 4a50 0002 05c6 0000 4a58 0002     ....PJ......XJ..

00024aa4 <mp_module_gc_globals>:
   24aa4:	2104 0002 0047 0000 0008 0000 4a64 0002     .!..G.......dJ..

00024ab4 <mp_module_gc>:
   24ab4:	33a8 0002 4aa4 0002                         .3...J..

00024abc <mp_micropython_opt_level_obj>:
   24abc:	2af8 0002 0002 0000 9905 0001               .*..........

00024ac8 <mp_micropython_heap_lock_obj>:
   24ac8:	2944 0002 9949 0001                         D)..I...

00024ad0 <mp_micropython_heap_unlock_obj>:
   24ad0:	2944 0002 995d 0001                         D)..]...

00024ad8 <mp_module_micropython_globals_table>:
   24ad8:	0076 0000 0502 0000 03f6 0000 1bc4 0002     v...............
   24ae8:	052a 0000 4abc 0002 0472 0000 4ac8 0002     *....J..r....J..
   24af8:	0476 0000 4ad0 0002                         v....J..

00024b00 <mp_module_micropython_globals>:
   24b00:	2104 0002 002f 0000 0005 0000 4ad8 0002     .!../........J..

00024b10 <mp_module_micropython>:
   24b10:	33a8 0002 4b00 0002                         .3...K..

00024b18 <__func__.6915>:
   24b18:	706d 655f 6578 7563 6574 625f 7479 6365     mp_execute_bytec
   24b28:	646f 0065 6f6c 6163 206c 6176 6972 6261     ode.local variab
   24b38:	656c 7220 6665 7265 6e65 6563 2064 6562     le referenced be
   24b48:	6f66 6572 6120 7373 6769 6d6e 6e65 0074     fore assignment.
   24b58:	706d 6f5f 6a62 695f 5f73 7865 6563 7470     mp_obj_is_except
   24b68:	6f69 5f6e 6e69 7473 6e61 6563 5428 504f     ion_instance(TOP
   24b78:	2928 0029 2e2e 2e2f 2f2e 7970 762f 2e6d     ()).../../py/vm.
   24b88:	0063 0000 7865 5f63 7073 3e20 203d 7865     c...exc_sp >= ex
   24b98:	5f63 7473 6361 006b 7563 7272 6e65 6c74     c_stack.currentl
   24ba8:	5f79 6e69 655f 6378 7065 5f74 6c62 636f     y_in_except_bloc
   24bb8:	006b 0000 7865 5f63 7073 3d20 203d 7865     k...exc_sp == ex
   24bc8:	5f63 7473 6361 206b 202d 0031 6572 5f74     c_stack - 1.ret_
   24bd8:	696b 646e 3d20 203d 504d 565f 5f4d 4552     kind == MP_VM_RE
   24be8:	5554 4e52 455f 4358 5045 4954 4e4f 0000     TURN_EXCEPTION..
   24bf8:	7962 6574 6320 646f 2065 6f6e 2074 6d69     byte code not im
   24c08:	6c70 6d65 6e65 6574 0064 0000 6f6e 6120     plemented...no a
   24c18:	7463 7669 2065 7865 6563 7470 6f69 206e     ctive exception 
   24c28:	6f74 7220 7265 6961 6573 0000 7566 636e     to reraise..func
   24c38:	6974 6e6f 6720 746f 6d20 6c75 6974 6c70     tion got multipl
   24c48:	2065 6176 756c 7365 6620 726f 6120 6772     e values for arg
   24c58:	6d75 6e65 2074 2527 2771 0000 6e75 7865     ument '%q'..unex
   24c68:	6570 7463 6465 6b20 7965 6f77 6472 6120     pected keyword a
   24c78:	6772 6d75 6e65 0074 7566 636e 6974 6e6f     rgument.function
   24c88:	6d20 7369 6973 676e 7220 7165 6975 6572      missing require
   24c98:	2064 6f70 6973 6974 6e6f 6c61 6120 6772     d positional arg
   24ca8:	6d75 6e65 2074 2523 0064 0000 7566 636e     ument #%d...func
   24cb8:	6974 6e6f 6d20 7369 6973 676e 7220 7165     tion missing req
   24cc8:	6975 6572 2064 656b 7779 726f 2064 7261     uired keyword ar
   24cd8:	7567 656d 746e 2720 7125 0027 7566 636e     gument '%q'.func
   24ce8:	6974 6e6f 6d20 7369 6973 676e 6b20 7965     tion missing key
   24cf8:	6f77 6472 6f2d 6c6e 2079 7261 7567 656d     word-only argume
   24d08:	746e 0000 6669 0000 6877 6c69 0065 0000     nt..if..while...
   24d18:	6f66 0072 7274 0079 6977 6874 0000 0000     for.try.with....
   24d28:	6564 0066 6c63 7361 0073 0000 0020 0000     def.class... ...
   24d38:	250a 0073 000a 0000                         .%s.....

00024d40 <import_str.6273>:
   24d40:	6d69 6f70 7472 0020                         import .

00024d48 <mp_builtin_open_obj>:
   24d48:	2af8 0002 ffff 0003 b74d 0001 7341 6573     .*......M...Asse
   24d58:	7472 6f69 206e 2527 2773 6620 6961 656c     rtion '%s' faile
   24d68:	2c64 6120 2074 6966 656c 2520 3a73 6425     d, at file %s:%d
   24d78:	000a 0000 7341 6573 7472 6f69 206e 6166     ....Assertion fa
   24d88:	6c69 6465 0000 0000 6950 206e 616d 2070     iled....Pin map 
   24d98:	6170 7373 6465 7020 6e69 0020 6950 2e6e     passed pin .Pin.
   24da8:	616d 7070 7265 6420 6469 276e 2074 6572     mapper didn't re
   24db8:	7574 6e72 6120 5020 6e69 6f20 6a62 6365     turn a Pin objec
   24dc8:	0074 0000 6950 2e6e 616d 7070 7265 6d20     t...Pin.mapper m
   24dd8:	7061 2073 0000 0000 7420 206f 0000 0000     aps .... to ....
   24de8:	6950 2e6e 616d 5f70 6964 7463 6d20 7061     Pin.map_dict map
   24df8:	2073 0000 6950 2e6e 6f62 7261 2064 616d     s ..Pin.board ma
   24e08:	7370 0020 6950 286e 7325 2029 6f64 7365     ps .Pin(%s) does
   24e18:	276e 2074 7865 7369 0074 0000 6950 286e     n't exist...Pin(
   24e28:	6950 2e6e 7063 2e75 7125 202c 6f6d 6564     Pin.cpu.%q, mode
   24e38:	503d 6e69 002e 0000 4e41 4c41 474f 0029     =Pin....ANALOG).
   24e48:	202c 7570 6c6c 503d 6e69 252e 0071 0000     , pull=Pin.%q...
   24e58:	202c 6661 253d 2964 0000 0000 202c 6661     , af=%d)...., af
   24e68:	503d 6e69 252e 2971 0000 0000 0029 0000     =Pin.%q)....)...

00024e78 <pin_mapper_fun_obj>:
   24e78:	2af8 0002 0004 0002 c021 0001               .*......!...

00024e84 <pin_mapper_obj>:
   24e84:	432c 0002 4e78 0002                         ,C..xN..

00024e8c <pin_map_dict_fun_obj>:
   24e8c:	2af8 0002 0004 0002 c059 0001               .*......Y...

00024e98 <pin_map_dict_obj>:
   24e98:	432c 0002 4e8c 0002                         ,C...N..

00024ea0 <pin_af_list_obj>:
   24ea0:	29b0 0002 c091 0001                         .)......

00024ea8 <pin_debug_fun_obj>:
   24ea8:	2af8 0002 0004 0002 c0e1 0001               .*..........

00024eb4 <pin_debug_obj>:
   24eb4:	432c 0002 4ea8 0002 6e69 6176 696c 2064     ,C...N..invalid 
   24ec4:	6970 206e 6964 6572 7463 6f69 3a6e 2520     pin direction: %
   24ed4:	0064 0000 6e69 6176 696c 2064 6970 206e     d...invalid pin 
   24ee4:	7974 6570 203a 6425 0000 0000 6e69 6176     type: %d....inva
   24ef4:	696c 2064 6970 206e 7264 7669 3a65 2520     lid pin drive: %
   24f04:	0064 0000 6e69 6176 696c 2064 6970 206e     d...invalid pin 
   24f14:	6661 203a 6425 0000                         af: %d..

00024f1c <pin_init_obj>:
   24f1c:	2af8 0002 ffff 0003 c2bd 0001               .*..........

00024f28 <pin_value_obj>:
   24f28:	2af8 0002 0004 0002 c2e5 0001               .*..........

00024f34 <pin_off_obj>:
   24f34:	29b0 0002 c30d 0001                         .)......

00024f3c <pin_on_obj>:
   24f3c:	29b0 0002 c339 0001                         .)..9...

00024f44 <pin_irq_obj>:
   24f44:	2af8 0002 ffff 0003 c369 0001               .*......i...

00024f50 <pin_name_obj>:
   24f50:	29b0 0002 c389 0001                         .)......

00024f58 <pin_names_obj>:
   24f58:	29b0 0002 c3ad 0001                         .)......

00024f60 <pin_port_obj>:
   24f60:	29b0 0002 c425 0001                         .)..%...

00024f68 <pin_pin_obj>:
   24f68:	29b0 0002 c449 0001                         .)..I...

00024f70 <pin_gpio_obj>:
   24f70:	29b0 0002 c46d 0001                         .)..m...

00024f78 <pin_dir_obj>:
   24f78:	29b0 0002 c491 0001                         .)......

00024f80 <pin_type_obj>:
   24f80:	29b0 0002 c4bd 0001                         .)......

00024f88 <pin_af_obj>:
   24f88:	29b0 0002 c4ed 0001                         .)......

00024f90 <pin_locals_dict_table>:
   24f90:	048e 0000 4f1c 0002 05ea 0000 4f28 0002     .....O......(O..
   24fa0:	0522 0000 4f34 0002 0526 0000 4f3c 0002     "...4O..&...<O..
   24fb0:	049a 0000 4f44 0002 04e6 0000 4f34 0002     ....DO......4O..
   24fc0:	047e 0000 4f3c 0002 050e 0000 4f50 0002     ~...<O......PO..
   24fd0:	0512 0000 4f58 0002 03a2 0000 4ea0 0002     ....XO.......N..
   24fe0:	0542 0000 4f60 0002 0536 0000 4f68 0002     B...`O..6...hO..
   24ff0:	0466 0000 4f70 0002 0412 0000 4f78 0002     f...pO......xO..
   25000:	05d6 0000 4f80 0002 039e 0000 4f88 0002     .....O.......O..
   25010:	04f6 0000 4e84 0002 040a 0000 4e98 0002     .....N.......N..
   25020:	0406 0000 4eb4 0002 03be 0000 5174 0002     .....N......tQ..
   25030:	030a 0000 0001 0000 035a 0000 0003 0000     ........Z.......
   25040:	0352 0000 0013 0000 02d2 0000 0005 0000     R...............
   25050:	02da 0000 0001 0000 036a 0000 0015 0000     ........j.......
   25060:	0362 0000 0019 0000 0366 0000 0011 0000     b.......f.......
   25070:	031e 0000 0009 0000 0312 0000 0001 0000     ................
   25080:	030e 0000 0003 0000 0316 0000 000d 0000     ................
   25090:	031a 0000 0005 0000 0336 0000 0003 0000     ........6.......
   250a0:	033e 0000 0005 0000 0306 0000 00cd 0000     >...............

000250b0 <pin_locals_dict>:
   250b0:	2104 0002 0127 0000 0024 0000 4f90 0002     .!..'...$....O..

000250c0 <pin_mod>:
   250c0:	40e4 0002 0000 00dc bde5 0001 bf39 0001     .@..........9...
   250d0:	bfa1 0001 0000 0000 0000 0000 0000 0000     ................
	...
   250f8:	50b0 0002                                   .P..

000250fc <allowed_args.7371>:
   250fc:	0141 0102 0000 0000 0153 0003 34d4 0002     A.......S....4..
   2510c:	0107 0003 0000 0000 00e7 0002 ffff ffff     ................
   2511c:	017a 0203 0000 0000 00ea 0202 ffff ffff     z...............
   2512c:	503c 6e69 252e 3e71 0000 0000               <Pin.%q>....

00025138 <pin_cpu_pins_obj_type>:
   25138:	40e4 0002 0000 0100 c521 0001 0000 0000     .@......!.......
	...
   25170:	5bf0 0002                                   .[..

00025174 <pin_board_pins_obj_type>:
   25174:	40e4 0002 0000 00ef c521 0001 0000 0000     .@......!.......
	...
   251ac:	5a88 0002 4449 203a 4c43 5341 3d53 3025     .Z..ID: CLASS=%0
   251bc:	7832 202c 2576 3230 2e75 3025 7532 0000     2x, v%02u.%02u..
   251cc:	7525 4820 007a 0000 7371 7274 0a3a 2020     %u Hz...qstr:.  
   251dc:	5f6e 6f70 6c6f 253d 0a75 2020 5f6e 7371     n_pool=%u.  n_qs
   251ec:	7274 253d 0a75 2020 5f6e 7473 5f72 6164     tr=%u.  n_str_da
   251fc:	6174 625f 7479 7365 253d 0a75 2020 5f6e     ta_bytes=%u.  n_
   2520c:	6f74 6174 5f6c 7962 6574 3d73 7525 000a     total_bytes=%u..
   2521c:	4347 003a 2020 7525 7420 746f 6c61 000a     GC:.  %u total..
   2522c:	2020 7525 3a20 2520 0a75 0000 2020 3d31       %u : %u...  1=
   2523c:	7525 3220 253d 2075 3d6d 7525 000a 0000     %u 2=%u m=%u....

0002524c <machine_info_obj>:
   2524c:	2af8 0002 0002 0000 c6e1 0001               .*..........

00025258 <machine_unique_id_obj>:
   25258:	2944 0002 c7a9 0001                         D)......

00025260 <machine_reset_obj>:
   25260:	2944 0002 c7cd 0001                         D)......

00025268 <machine_soft_reset_obj>:
   25268:	2944 0002 c7e1 0001                         D)......

00025270 <machine_bootloader_obj>:
   25270:	2944 0002 c805 0001 7266 7165 6320 6168     D)......freq cha
   25280:	676e 2065 6f6e 2074 7573 7070 726f 6574     nge not supporte
   25290:	0064 0000                                   d...

00025294 <machine_freq_obj>:
   25294:	2af8 0002 0008 0000 c80d 0001               .*..........

000252a0 <machine_sleep_obj>:
   252a0:	2944 0002 c851 0001                         D)..Q...

000252a8 <machine_deepsleep_obj>:
   252a8:	2944 0002 c865 0001                         D)..e...

000252b0 <machine_reset_cause_obj>:
   252b0:	2944 0002 c879 0001                         D)..y...

000252b8 <machine_module_globals_table>:
   252b8:	0076 0000 05da 0000 048a 0000 524c 0002     v...........LR..
   252c8:	05de 0000 5258 0002 0562 0000 5260 0002     ....XR..b...`R..
   252d8:	0592 0000 5268 0002 03c6 0000 5270 0002     ....hR......pR..
   252e8:	0442 0000 5294 0002 0566 0000 52b0 0002     B....R..f....R..
   252f8:	0372 0000 50c0 0002 036e 0000 0003 0000     r....P..n.......
   25308:	0302 0000 0005 0000 0392 0000 0007 0000     ................
   25318:	02ee 0000 0009 0000 037a 0000 0001 0000     ........z.......

00025328 <machine_module_globals>:
   25328:	2104 0002 0077 0000 000e 0000 52b8 0002     .!..w........R..

00025338 <machine_module>:
   25338:	33a8 0002 5328 0002                         .3..(S..

00025340 <pin_PB6_af>:
   25340:	007e 0000 0504 0000 0001 0000 1804 0001     ~...............
   25350:	0092 0000 0707 0000 0000 0000 1807 0001     ................

00025360 <pin_PB7_af>:
   25360:	007f 0000 0504 0000 0002 0000 1c04 0001     ................
   25370:	0093 0000 0707 0000 0001 0000 1c07 0001     ................

00025380 <pin_PF4_af>:
   25380:	0086 0000 0505 0001 0000 0000 1005 0005     ................
   25390:	0090 0000 0406 00ff 0004 0000 1006 0005     ................
   253a0:	0096 0000 0707 0002 0000 0000 1007 0005     ................
   253b0:	00a4 0000 0b08 0000 0000 0000 1008 0005     ................

000253c0 <pin_PE3_af>:
   253c0:	0067 0000 0000 00ff 0000 0000 ffff ffff     g...............

000253d0 <pin_PE2_af>:
   253d0:	0068 0000 0000 00ff 0001 0000 ffff ffff     h...............

000253e0 <pin_PE1_af>:
   253e0:	006b 0000 0000 00ff 0002 0000 ffff ffff     k...............

000253f0 <pin_PE0_af>:
   253f0:	006c 0000 0000 00ff 0003 0000 ffff ffff     l...............

00025400 <pin_PD7_af>:
   25400:	00b3 0000 0607 0005 0001 0000 1c07 0003     ................
   25410:	008f 0000 0908 00ff 0000 0000 1c08 0003     ................

00025420 <pin_PC7_af>:
   25420:	00ab 0000 0607 0001 0001 0000 1c07 0002     ................
   25430:	00a6 0000 0b08 0000 0001 0000 1c08 0002     ................

00025440 <pin_PC6_af>:
   25440:	00aa 0000 0607 0001 0000 0000 1807 0002     ................
   25450:	00a4 0000 0b08 0000 0000 0000 1808 0002     ................

00025460 <pin_PC5_af>:
   25460:	0085 0000 0504 0000 0008 0000 1404 0002     ................
   25470:	00a9 0000 0607 0000 0001 0000 1407 0002     ................
   25480:	00a0 0000 0108 0001 0003 0000 1408 0002     ................

00025490 <pin_PC4_af>:
   25490:	0084 0000 0504 0000 0007 0000 1004 0002     ................
   254a0:	0091 0000 0406 00ff 0005 0000 1006 0002     ................
   254b0:	00a8 0000 0607 0000 0000 0000 1007 0002     ................
   254c0:	00a1 0000 0108 0001 0002 0000 1008 0002     ................

000254d0 <pin_PA6_af>:
   254d0:	0075 0000 0303 0001 0001 0000 1803 0000     u...............
   254e0:	0089 0000 0505 0001 0003 0000 1805 0000     ................

000254f0 <pin_PA7_af>:
   254f0:	0076 0000 0303 0001 0000 0000 1c03 0000     v...............
   25500:	008a 0000 0505 0001 0004 0000 1c05 0000     ................

00025510 <pin_PF0_af>:
   25510:	00a1 0000 0101 0001 0002 0000 0001 0005     ................
   25520:	008b 0000 0505 0001 0005 0000 0005 0005     ................
   25530:	0092 0000 0707 0000 0000 0000 0007 0005     ................
   25540:	008f 0000 0908 00ff 0000 0000 0008 0005     ................

00025550 <pin_PF1_af>:
   25550:	00a0 0000 0101 0001 0003 0000 0401 0005     ................
   25560:	008c 0000 0505 0001 0006 0000 0405 0005     ................
   25570:	0093 0000 0707 0000 0001 0000 0407 0005     ................
   25580:	009f 0000 0d0e 00ff 0002 0000 040e 0005     ................

00025590 <pin_PF2_af>:
   25590:	007d 0000 0504 0000 0000 0000 0804 0005     }...............
   255a0:	008d 0000 0505 0001 0007 0000 0805 0005     ................
   255b0:	0094 0000 0707 0001 0000 0000 0807 0005     ................
   255c0:	009e 0000 0d0e 00ff 0001 0000 080e 0005     ................

000255d0 <pin_PF3_af>:
   255d0:	008e 0000 0505 0001 0008 0000 0c05 0005     ................
   255e0:	0095 0000 0707 0001 0001 0000 0c07 0005     ................

000255f0 <pin_PD4_af>:
   255f0:	00a2 0000 0b00 0000 0002 0000 ffff ffff     ................
   25600:	00b0 0000 0607 0004 0000 0000 1007 0003     ................

00025610 <pin_PD5_af>:
   25610:	00a3 0000 0b00 0000 0003 0000 ffff ffff     ................
   25620:	00b1 0000 0607 0004 0001 0000 1407 0003     ................

00025630 <pin_PB0_af>:
   25630:	00a5 0000 0b00 0000 0004 0000 ffff ffff     ................
   25640:	0096 0000 0707 0002 0000 0000 0007 0001     ................

00025650 <pin_PB1_af>:
   25650:	00a7 0000 0b00 0000 0005 0000 ffff ffff     ................
   25660:	0097 0000 0707 0002 0001 0000 0407 0001     ................

00025670 <pin_PB2_af>:
   25670:	0073 0000 0303 0000 0001 0000 0803 0001     s...............
   25680:	0098 0000 0707 0003 0000 0000 0807 0001     ................

00025690 <pin_PB3_af>:
   25690:	0074 0000 0303 0000 0000 0000 0c03 0001     t...............
   256a0:	0099 0000 0707 0003 0001 0000 0c07 0001     ................

000256b0 <pin_PC3_af>:
   256b0:	007b 0000 0801 00ff 0001 0000 0c01 0002     {...............
   256c0:	009d 0000 0707 0005 0001 0000 0c07 0002     ................

000256d0 <pin_PC2_af>:
   256d0:	007a 0000 0801 00ff 0004 0000 0801 0002     z...............
   256e0:	009c 0000 0707 0005 0000 0000 0807 0002     ................

000256f0 <pin_PC1_af>:
   256f0:	007c 0000 0801 00ff 0005 0000 0401 0002     |...............
   25700:	009b 0000 0707 0004 0001 0000 0407 0002     ................

00025710 <pin_PC0_af>:
   25710:	0079 0000 0801 00ff 0003 0000 0001 0002     y...............
   25720:	009a 0000 0707 0004 0000 0000 0007 0002     ................

00025730 <pin_PD6_af>:
   25730:	007d 0000 0504 0000 0000 0000 1804 0003     }...............
   25740:	00b2 0000 0607 0005 0000 0000 1807 0003     ................

00025750 <pin_PB5_af>:
   25750:	006a 0000 0000 00ff 000b 0000 ffff ffff     j...............
   25760:	0081 0000 0504 0000 0004 0000 1404 0001     ................
   25770:	0095 0000 0707 0001 0001 0000 1407 0001     ................

00025780 <pin_PB4_af>:
   25780:	0069 0000 0000 00ff 000a 0000 ffff ffff     i...............
   25790:	0080 0000 0504 0000 0003 0000 1004 0001     ................
   257a0:	0094 0000 0707 0001 0000 0000 1007 0001     ................

000257b0 <pin_PE4_af>:
   257b0:	0072 0000 0000 00ff 0009 0000 ffff ffff     r...............
   257c0:	0077 0000 0303 0002 0001 0000 1003 0004     w...............
   257d0:	0082 0000 0504 0000 0005 0000 1004 0004     ................
   257e0:	0089 0000 0505 0001 0003 0000 1005 0004     ................

000257f0 <pin_PE5_af>:
   257f0:	0071 0000 0000 00ff 0008 0000 ffff ffff     q...............
   25800:	0083 0000 0504 0000 0006 0000 1404 0004     ................
   25810:	008a 0000 0505 0001 0004 0000 1405 0004     ................

00025820 <pin_PD0_af>:
   25820:	0070 0000 0000 00ff 0007 0000 ffff ffff     p...............
   25830:	0078 0000 0303 0003 0001 0000 0003 0003     x...............
   25840:	0084 0000 0504 0000 0007 0000 0004 0003     ................
   25850:	0087 0000 0505 0001 0001 0000 0005 0003     ................
   25860:	00ac 0000 0607 0002 0000 0000 0007 0003     ................

00025870 <pin_PD1_af>:
   25870:	006f 0000 0000 00ff 0006 0000 ffff ffff     o...............
   25880:	0085 0000 0504 0000 0008 0000 0404 0003     ................
   25890:	0088 0000 0505 0001 0002 0000 0405 0003     ................
   258a0:	00ad 0000 0607 0002 0001 0000 0407 0003     ................

000258b0 <pin_PD2_af>:
   258b0:	006e 0000 0000 00ff 0005 0000 ffff ffff     n...............
   258c0:	007d 0000 0504 0000 0000 0000 0804 0003     }...............
   258d0:	00ae 0000 0607 0003 0000 0000 0807 0003     ................
   258e0:	00a4 0000 0b08 0000 0000 0000 0808 0003     ................

000258f0 <pin_PD3_af>:
   258f0:	006d 0000 0000 00ff 0004 0000 ffff ffff     m...............
   25900:	0090 0000 0406 00ff 0004 0000 0c06 0003     ................
   25910:	00af 0000 0607 0003 0001 0000 0c07 0003     ................
   25920:	00a6 0000 0b08 0000 0001 0000 0c08 0003     ................

00025930 <pin_board_pins_locals_dict_table>:
   25930:	012a 0000 0000 2000 012e 0000 0034 2000     *...... ....4.. 
   25940:	019a 0000 0068 2000 017e 0000 009c 2000     ....h.. ~...... 
   25950:	017a 0000 00d0 2000 0176 0000 0104 2000     z...... v...... 
   25960:	0172 0000 0138 2000 016e 0000 016c 2000     r...8.. n...l.. 
   25970:	014e 0000 01a0 2000 014a 0000 01d4 2000     N...... J...... 
   25980:	0146 0000 0208 2000 0142 0000 023c 2000     F...... B...<.. 
   25990:	00f2 0000 0270 2000 00f6 0000 02a4 2000     ....p.. ....... 
   259a0:	00fa 0000 02d8 2000 00fe 0000 030c 2000     ....... ....... 
   259b0:	0102 0000 0340 2000 0106 0000 0374 2000     ....@.. ....t.. 
   259c0:	010a 0000 03a8 2000 010e 0000 03dc 2000     ....... ....... 
   259d0:	018a 0000 0410 2000 018e 0000 0444 2000     ....... ....D.. 
   259e0:	0192 0000 0478 2000 0196 0000 04ac 2000     ....x.. ....... 
   259f0:	0162 0000 04e0 2000 0166 0000 0514 2000     b...... f...... 
   25a00:	0112 0000 0548 2000 0116 0000 057c 2000     ....H.. ....|.. 
   25a10:	011a 0000 05b0 2000 011e 0000 05e4 2000     ....... ....... 
   25a20:	013e 0000 0618 2000 013a 0000 064c 2000     >...... :...L.. 
   25a30:	0136 0000 0680 2000 0132 0000 06b4 2000     6...... 2...... 
   25a40:	016a 0000 06e8 2000 0126 0000 071c 2000     j...... &...... 
   25a50:	0122 0000 0750 2000 0182 0000 0784 2000     "...P.. ....... 
   25a60:	0186 0000 07b8 2000 0152 0000 07ec 2000     ....... R...... 
   25a70:	0156 0000 0820 2000 015a 0000 0854 2000     V... .. Z...T.. 
   25a80:	015e 0000 0888 2000                         ^...... 

00025a88 <pin_board_pins_locals_dict>:
   25a88:	2104 0002 015f 0000 002b 0000 5930 0002     .!.._...+...0Y..

00025a98 <pin_cpu_pins_locals_dict_table>:
   25a98:	012a 0000 0000 2000 012e 0000 0034 2000     *...... ....4.. 
   25aa8:	019a 0000 0068 2000 017e 0000 009c 2000     ....h.. ~...... 
   25ab8:	017a 0000 00d0 2000 0176 0000 0104 2000     z...... v...... 
   25ac8:	0172 0000 0138 2000 016e 0000 016c 2000     r...8.. n...l.. 
   25ad8:	014e 0000 01a0 2000 014a 0000 01d4 2000     N...... J...... 
   25ae8:	0146 0000 0208 2000 0142 0000 023c 2000     F...... B...<.. 
   25af8:	00f2 0000 0270 2000 00f6 0000 02a4 2000     ....p.. ....... 
   25b08:	00fa 0000 02d8 2000 00fe 0000 030c 2000     ....... ....... 
   25b18:	0102 0000 0340 2000 0106 0000 0374 2000     ....@.. ....t.. 
   25b28:	010a 0000 03a8 2000 010e 0000 03dc 2000     ....... ....... 
   25b38:	018a 0000 0410 2000 018e 0000 0444 2000     ....... ....D.. 
   25b48:	0192 0000 0478 2000 0196 0000 04ac 2000     ....x.. ....... 
   25b58:	0162 0000 04e0 2000 0166 0000 0514 2000     b...... f...... 
   25b68:	0112 0000 0548 2000 0116 0000 057c 2000     ....H.. ....|.. 
   25b78:	011a 0000 05b0 2000 011e 0000 05e4 2000     ....... ....... 
   25b88:	013e 0000 0618 2000 013a 0000 064c 2000     >...... :...L.. 
   25b98:	0136 0000 0680 2000 0132 0000 06b4 2000     6...... 2...... 
   25ba8:	016a 0000 06e8 2000 0126 0000 071c 2000     j...... &...... 
   25bb8:	0122 0000 0750 2000 0182 0000 0784 2000     "...P.. ....... 
   25bc8:	0186 0000 07b8 2000 0152 0000 07ec 2000     ....... R...... 
   25bd8:	0156 0000 0820 2000 015a 0000 0854 2000     V... .. Z...T.. 
   25be8:	015e 0000 0888 2000                         ^...... 

00025bf0 <pin_cpu_pins_locals_dict>:
   25bf0:	2104 0002 015f 0000 002b 0000 5a98 0002     .!.._...+....Z..
   25c00:	000d 0000 0004 0000 6f74 6b6f 2520 2075     ........took %u 
   25c10:	736d 000a 7371 7274 0a3a 2020 5f6e 6f70     ms..qstr:.  n_po
   25c20:	6c6f 253d 0a75 2020 5f6e 7371 7274 253d     ol=%u.  n_qstr=%
   25c30:	0a75 2020 5f6e 7473 5f72 6164 6174 625f     u.  n_str_data_b
   25c40:	7479 7365 253d 0a75 2020 5f6e 6f74 6174     ytes=%u.  n_tota
   25c50:	5f6c 7962 6574 3d73 7525 000a 6172 2077     l_bytes=%u..raw 
   25c60:	4552 4c50 203b 5443 4c52 422d 7420 206f     REPL; CTRL-B to 
   25c70:	7865 7469 0a0d 0000 003e 0000 0a0d 0000     exit....>.......
   25c80:	4b4f 0000 694d 7263 506f 7479 6f68 206e     OK..MicroPython 
   25c90:	3176 392e 342e 372d 3939 672d 3938 3439     v1.9.4-799-g8994
   25ca0:	6334 3935 2d31 6964 7472 2079 6e6f 3220     4c591-dirty on 2
   25cb0:	3130 2d38 3231 312d 3b35 5420 7669 2061     018-12-15; Tiva 
   25cc0:	614c 6e75 6863 5020 6461 7720 7469 2068     Launch Pad with 
   25cd0:	4d54 4334 3231 4733 4836 4d50 0a0d 0000     TM4C123G6HPM....
   25ce0:	3e3e 203e 0000 0000 0a0d 6170 7473 2065     >>> ......paste 
   25cf0:	6f6d 6564 203b 7443 6c72 432d 7420 206f     mode; Ctrl-C to 
   25d00:	6163 636e 6c65 202c 7443 6c72 442d 7420     cancel, Ctrl-D t
   25d10:	206f 6966 696e 6873 0a0d 3d3d 203d 0000     o finish..=== ..
   25d20:	0a0d 3d3d 203d 0000 2e2e 202e 0000 0000     ..=== ..... ....

00025d30 <pyb_set_repl_info_obj>:
   25d30:	29b0 0002 cd61 0001 0808 0808 0000 0000     .)..a...........
   25d40:	5b1b 7525 0000 0000 5b1b 004b 0a0d 0000     .[%u.....[K.....
   25d50:	2020 2020 0000 0000 0dfe 7266 7a6f 6e65         ......frozen
   25d60:	6574 7473 702e 0079 03f9 5075 0079 0000     test.py...uPy...
   25d70:	01cc 0069                                   ..i.

00025d74 <mp_qstr_frozen_const_pool>:
   25d74:	f208 0001 017d 0000 0003 0000 0003 0000     ....}...........
   25d84:	5d58 0002 5d68 0002 5d70 0002               X]..h]..p]..

00025d90 <bytecode_data_frozentest__lt_module_gt_>:
   25d90:	0003 0000 0000 310d 7d00 2a01 2828 2b28     .......1.}.*(((+
   25da0:	0028 ff00 521b 1601 017e 0164 1b32 0152     (....R..~.d.2.R.
   25db0:	0017 0164 1b32 0152 0117 0164 1b32 0152     ..d.2.R...d.2.R.
   25dc0:	0217 0164 1b32 0152 ba14 9aef 6415 3201     ..d.2.R......d.2
   25dd0:	3580 800f 2430 017f 521b 1b01 017f 0164     .5..0$...R....d.
   25de0:	8132 30e5 d784 eb36 327f 5b11 2061 6f6c     2..0..6..2.[a lo
   25df0:	676e 7320 7274 6e69 2067 6874 7461 6920     ng string that i
   25e00:	2073 6f6e 2074 6e69 6574 6e72 6465 0000     s not interned..

00025e10 <const_obj_frozentest__lt_module_gt__0>:
   25e10:	3b68 0002 00f6 0000 0022 0000 5dec 0002     h;......"....]..
   25e20:	2061 7473 6972 676e 7420 6168 2074 6168     a string that ha
   25e30:	2073 6e75 6369 646f 2065 b1ce b2ce b3ce     s unicode ......
   25e40:	6320 6168 7372 0000                          chars..

00025e48 <const_obj_frozentest__lt_module_gt__1>:
   25e48:	3b68 0002 00c8 0000 0026 0000 5e20 0002     h;......&... ^..
   25e58:	7962 6574 2073 3231 3433 0001               bytes 1234..

00025e64 <const_obj_frozentest__lt_module_gt__2>:
   25e64:	3ba4 0002 0039 0000 000b 0000 5e58 0002     .;..9.......X^..

00025e74 <const_table_data_frozentest__lt_module_gt_>:
   25e74:	5e10 0002 5e48 0002 5e64 0002               .^..H^..d^..

00025e80 <raw_code_frozentest__lt_module_gt_>:
   25e80:	0002 0000 5d90 0002 5e74 0002 0000 0000     .....]..t^......

00025e90 <mp_frozen_mpy_names>:
   25e90:	7266 7a6f 6e65 6574 7473 702e 0079 0000     frozentest.py...

00025ea0 <mp_frozen_mpy_content>:
   25ea0:	5e80 0002                                   .^..

00025ea4 <g_pui32GPIOBaseAddrs>:
   25ea4:	4000 4000 8000 4005 5000 4000 9000 4005     .@.@...@.P.@...@
   25eb4:	6000 4000 a000 4005 7000 4000 b000 4005     .`.@...@.p.@...@
   25ec4:	4000 4002 c000 4005 5000 4002 d000 4005     .@.@...@.P.@...@
   25ed4:	6000 4002 e000 4005 7000 4002 f000 4005     .`.@...@.p.@...@
   25ee4:	d000 4003 0000 4006 1000 4006 1000 4006     ...@...@...@...@
   25ef4:	2000 4006 2000 4006 3000 4006 3000 4006     . .@. .@.0.@.0.@
   25f04:	4000 4006 4000 4006 5000 4006 5000 4006     .@.@.@.@.P.@.P.@
   25f14:	6000 4006 6000 4006 7000 4006 7000 4006     .`.@.`.@.p.@.p.@
   25f24:	8000 4006 8000 4006 9000 4006 9000 4006     ...@...@...@...@

00025f34 <g_pui32Xtals>:
   25f34:	4240 000f 2000 001c 8480 001e 8000 0025     @B... ........%.
   25f44:	9e99 0036 4000 0038 0900 003d 8000 003e     ..6..@8...=...>.
   25f54:	0000 004b 4b40 004c 2000 004e 8d80 005b     ..K.@KL.. N...[.
   25f64:	c000 005d 8000 0070 1200 007a 0000 007d     ..]...p...z...}.
   25f74:	9680 0098 1b00 00b7 8000 00bb e8c0 00ce     ................
   25f84:	7a64 00da 2400 00f4 0000 00fa a880 0112     dz...$..........
   25f94:	2d00 0131 3600 016e 7840 017d               .-1..6n.@x}.
