
uPY_TM4C123.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	08 0a 00 20 d9 b6 01 00 3d b7 01 00 45 b7 01 00     ... ....=...E...
      10:	4d b7 01 00 4d b7 01 00 4d b7 01 00 00 00 00 00     M...M...M.......
	...
      2c:	4d b7 01 00 4d b7 01 00 00 00 00 00 4d b7 01 00     M...M.......M...
      3c:	4d b7 01 00 4d b7 01 00 4d b7 01 00 4d b7 01 00     M...M...M...M...
      4c:	4d b7 01 00 4d b7 01 00 4d b7 01 00 4d b7 01 00     M...M...M...M...
      5c:	4d b7 01 00 4d b7 01 00 4d b7 01 00 4d b7 01 00     M...M...M...M...
      6c:	4d b7 01 00 4d b7 01 00 4d b7 01 00 4d b7 01 00     M...M...M...M...
      7c:	4d b7 01 00 4d b7 01 00 4d b7 01 00 4d b7 01 00     M...M...M...M...
      8c:	4d b7 01 00 4d b7 01 00 4d b7 01 00 4d b7 01 00     M...M...M...M...
      9c:	4d b7 01 00 4d b7 01 00 4d b7 01 00 4d b7 01 00     M...M...M...M...
      ac:	4d b7 01 00 4d b7 01 00 4d b7 01 00 4d b7 01 00     M...M...M...M...
      bc:	4d b7 01 00 4d b7 01 00 4d b7 01 00 4d b7 01 00     M...M...M...M...
      cc:	4d b7 01 00 4d b7 01 00 4d b7 01 00 4d b7 01 00     M...M...M...M...
      dc:	4d b7 01 00 4d b7 01 00 00 00 00 00 00 00 00 00     M...M...........
      ec:	4d b7 01 00 4d b7 01 00 4d b7 01 00 4d b7 01 00     M...M...M...M...
      fc:	4d b7 01 00 4d b7 01 00 4d b7 01 00 4d b7 01 00     M...M...M...M...
     10c:	4d b7 01 00 00 00 00 00 00 00 00 00 4d b7 01 00     M...........M...
     11c:	4d b7 01 00 4d b7 01 00 4d b7 01 00 4d b7 01 00     M...M...M...M...
     12c:	4d b7 01 00 4d b7 01 00 4d b7 01 00 4d b7 01 00     M...M...M...M...
     13c:	4d b7 01 00 00 00 00 00 00 00 00 00 00 00 00 00     M...............
     14c:	00 00 00 00 4d b7 01 00 4d b7 01 00 4d b7 01 00     ....M...M...M...
     15c:	4d b7 01 00 00 00 00 00 00 00 00 00 00 00 00 00     M...............
	...
     1b0:	4d b7 01 00 4d b7 01 00 4d b7 01 00 4d b7 01 00     M...M...M...M...
     1c0:	4d b7 01 00 4d b7 01 00 4d b7 01 00 4d b7 01 00     M...M...M...M...
     1d0:	4d b7 01 00 4d b7 01 00 4d b7 01 00 4d b7 01 00     M...M...M...M...
     1e0:	4d b7 01 00 4d b7 01 00 4d b7 01 00 00 00 00 00     M...M...M.......
     1f0:	00 00 00 00 4d b7 01 00 4d b7 01 00 4d b7 01 00     ....M...M...M...
     200:	4d b7 01 00 4d b7 01 00 00 00 00 00 00 00 00 00     M...M...........
     210:	4d b7 01 00 4d b7 01 00 4d b7 01 00 4d b7 01 00     M...M...M...M...
     220:	4d b7 01 00 4d b7 01 00 4d b7 01 00 4d b7 01 00     M...M...M...M...
     230:	4d b7 01 00 4d b7 01 00 4d b7 01 00 4d b7 01 00     M...M...M...M...
     240:	4d b7 01 00 4d b7 01 00 4d b7 01 00 4d b7 01 00     M...M...M...M...
     250:	4d b7 01 00 4d b7 01 00 4d b7 01 00 4d b7 01 00     M...M...M...M...
     260:	4d b7 01 00 4d b7 01 00 4d b7 01 00                 M...M...M...

0000026c <nlr_push_tail>:
// LTO can't see inside inline asm functions so explicitly mark nlr_push_tail as used
__attribute__((used)) unsigned int nlr_push_tail(nlr_buf_t *nlr);
#endif
#endif

unsigned int nlr_push_tail(nlr_buf_t *nlr) {
     26c:	b480      	push	{r7}
     26e:	b085      	sub	sp, #20
     270:	af00      	add	r7, sp, #0
     272:	6078      	str	r0, [r7, #4]
    nlr_buf_t **top = &MP_STATE_THREAD(nlr_top);
     274:	4b07      	ldr	r3, [pc, #28]	; (294 <nlr_push_tail+0x28>)
     276:	60fb      	str	r3, [r7, #12]
    nlr->prev = *top;
     278:	68fb      	ldr	r3, [r7, #12]
     27a:	681a      	ldr	r2, [r3, #0]
     27c:	687b      	ldr	r3, [r7, #4]
     27e:	601a      	str	r2, [r3, #0]
    MP_NLR_SAVE_PYSTACK(nlr);
    *top = nlr;
     280:	68fb      	ldr	r3, [r7, #12]
     282:	687a      	ldr	r2, [r7, #4]
     284:	601a      	str	r2, [r3, #0]
    return 0; // normal return
     286:	2300      	movs	r3, #0
}
     288:	4618      	mov	r0, r3
     28a:	3714      	adds	r7, #20
     28c:	46bd      	mov	sp, r7
     28e:	f85d 7b04 	ldr.w	r7, [sp], #4
     292:	4770      	bx	lr
     294:	20000a38 	.word	0x20000a38

00000298 <nlr_pop>:

void nlr_pop(void) {
     298:	b480      	push	{r7}
     29a:	b083      	sub	sp, #12
     29c:	af00      	add	r7, sp, #0
    nlr_buf_t **top = &MP_STATE_THREAD(nlr_top);
     29e:	4b06      	ldr	r3, [pc, #24]	; (2b8 <nlr_pop+0x20>)
     2a0:	607b      	str	r3, [r7, #4]
    *top = (*top)->prev;
     2a2:	687b      	ldr	r3, [r7, #4]
     2a4:	681b      	ldr	r3, [r3, #0]
     2a6:	681a      	ldr	r2, [r3, #0]
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	601a      	str	r2, [r3, #0]
}
     2ac:	bf00      	nop
     2ae:	370c      	adds	r7, #12
     2b0:	46bd      	mov	sp, r7
     2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
     2b6:	4770      	bx	lr
     2b8:	20000a38 	.word	0x20000a38

000002bc <nlr_push>:
// For reference, arm/thumb callee save regs are:
//      r4-r11, r13=sp

__attribute__((naked)) unsigned int nlr_push(nlr_buf_t *nlr) {

    __asm volatile (
     2bc:	60c4      	str	r4, [r0, #12]
     2be:	6105      	str	r5, [r0, #16]
     2c0:	6146      	str	r6, [r0, #20]
     2c2:	6187      	str	r7, [r0, #24]
     2c4:	f8c0 801c 	str.w	r8, [r0, #28]
     2c8:	f8c0 9020 	str.w	r9, [r0, #32]
     2cc:	f8c0 a024 	str.w	sl, [r0, #36]	; 0x24
     2d0:	f8c0 b028 	str.w	fp, [r0, #40]	; 0x28
     2d4:	f8c0 d02c 	str.w	sp, [r0, #44]	; 0x2c
     2d8:	f8c0 e008 	str.w	lr, [r0, #8]
     2dc:	f7ff bfc6 	b.w	26c <nlr_push_tail>

000002e0 <nlr_jump>:
    return 0;
    #endif
}

NORETURN void nlr_jump(void *val) {
    MP_NLR_JUMP_HEAD(val, top)
     2e0:	4a0d      	ldr	r2, [pc, #52]	; (318 <nlr_jump+0x38>)
NORETURN void nlr_jump(void *val) {
     2e2:	b508      	push	{r3, lr}
    MP_NLR_JUMP_HEAD(val, top)
     2e4:	68d3      	ldr	r3, [r2, #12]
     2e6:	b90b      	cbnz	r3, 2ec <nlr_jump+0xc>
     2e8:	f01b f834 	bl	1b354 <nlr_jump_fail>
     2ec:	6819      	ldr	r1, [r3, #0]
     2ee:	6058      	str	r0, [r3, #4]
     2f0:	60d1      	str	r1, [r2, #12]

    __asm volatile (
     2f2:	4618      	mov	r0, r3
     2f4:	68c4      	ldr	r4, [r0, #12]
     2f6:	6905      	ldr	r5, [r0, #16]
     2f8:	6946      	ldr	r6, [r0, #20]
     2fa:	6987      	ldr	r7, [r0, #24]
     2fc:	f8d0 801c 	ldr.w	r8, [r0, #28]
     300:	f8d0 9020 	ldr.w	r9, [r0, #32]
     304:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
     308:	f8d0 b028 	ldr.w	fp, [r0, #40]	; 0x28
     30c:	f8d0 d02c 	ldr.w	sp, [r0, #44]	; 0x2c
     310:	f8d0 e008 	ldr.w	lr, [r0, #8]
     314:	2001      	movs	r0, #1
     316:	4770      	bx	lr
     318:	20000a2c 	.word	0x20000a2c

0000031c <m_malloc>:
        return NULL;
    }
}
#endif // MICROPY_ENABLE_GC

void *m_malloc(size_t num_bytes) {
     31c:	b580      	push	{r7, lr}
     31e:	b084      	sub	sp, #16
     320:	af00      	add	r7, sp, #0
     322:	6078      	str	r0, [r7, #4]
    void *ptr = malloc(num_bytes);
     324:	2100      	movs	r1, #0
     326:	6878      	ldr	r0, [r7, #4]
     328:	f000 fabc 	bl	8a4 <gc_alloc>
     32c:	60f8      	str	r0, [r7, #12]
    if (ptr == NULL && num_bytes != 0) {
     32e:	68fb      	ldr	r3, [r7, #12]
     330:	2b00      	cmp	r3, #0
     332:	d105      	bne.n	340 <m_malloc+0x24>
     334:	687b      	ldr	r3, [r7, #4]
     336:	2b00      	cmp	r3, #0
     338:	d002      	beq.n	340 <m_malloc+0x24>
        m_malloc_fail(num_bytes);
     33a:	6878      	ldr	r0, [r7, #4]
     33c:	f00c fe12 	bl	cf64 <m_malloc_fail>
    MP_STATE_MEM(total_bytes_allocated) += num_bytes;
    MP_STATE_MEM(current_bytes_allocated) += num_bytes;
    UPDATE_PEAK();
#endif
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
     340:	68fb      	ldr	r3, [r7, #12]
}
     342:	4618      	mov	r0, r3
     344:	3710      	adds	r7, #16
     346:	46bd      	mov	sp, r7
     348:	bd80      	pop	{r7, pc}
     34a:	bf00      	nop

0000034c <m_malloc_maybe>:

void *m_malloc_maybe(size_t num_bytes) {
     34c:	b580      	push	{r7, lr}
     34e:	b084      	sub	sp, #16
     350:	af00      	add	r7, sp, #0
     352:	6078      	str	r0, [r7, #4]
    void *ptr = malloc(num_bytes);
     354:	2100      	movs	r1, #0
     356:	6878      	ldr	r0, [r7, #4]
     358:	f000 faa4 	bl	8a4 <gc_alloc>
     35c:	60f8      	str	r0, [r7, #12]
    MP_STATE_MEM(total_bytes_allocated) += num_bytes;
    MP_STATE_MEM(current_bytes_allocated) += num_bytes;
    UPDATE_PEAK();
#endif
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
     35e:	68fb      	ldr	r3, [r7, #12]
}
     360:	4618      	mov	r0, r3
     362:	3710      	adds	r7, #16
     364:	46bd      	mov	sp, r7
     366:	bd80      	pop	{r7, pc}

00000368 <m_malloc0>:
    DEBUG_printf("malloc %d : %p\n", num_bytes, ptr);
    return ptr;
}
#endif

void *m_malloc0(size_t num_bytes) {
     368:	b580      	push	{r7, lr}
     36a:	b084      	sub	sp, #16
     36c:	af00      	add	r7, sp, #0
     36e:	6078      	str	r0, [r7, #4]
    void *ptr = m_malloc(num_bytes);
     370:	6878      	ldr	r0, [r7, #4]
     372:	f7ff ffd3 	bl	31c <m_malloc>
     376:	60f8      	str	r0, [r7, #12]
    // If this config is set then the GC clears all memory, so we don't need to.
    #if !MICROPY_GC_CONSERVATIVE_CLEAR
    memset(ptr, 0, num_bytes);
    #endif
    return ptr;
     378:	68fb      	ldr	r3, [r7, #12]
}
     37a:	4618      	mov	r0, r3
     37c:	3710      	adds	r7, #16
     37e:	46bd      	mov	sp, r7
     380:	bd80      	pop	{r7, pc}
     382:	bf00      	nop

00000384 <m_realloc>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void *m_realloc(void *ptr, size_t old_num_bytes, size_t new_num_bytes) {
#else
void *m_realloc(void *ptr, size_t new_num_bytes) {
     384:	b580      	push	{r7, lr}
     386:	b084      	sub	sp, #16
     388:	af00      	add	r7, sp, #0
     38a:	6078      	str	r0, [r7, #4]
     38c:	6039      	str	r1, [r7, #0]
#endif
    void *new_ptr = realloc(ptr, new_num_bytes);
     38e:	2201      	movs	r2, #1
     390:	6839      	ldr	r1, [r7, #0]
     392:	6878      	ldr	r0, [r7, #4]
     394:	f000 fb62 	bl	a5c <gc_realloc>
     398:	60f8      	str	r0, [r7, #12]
    if (new_ptr == NULL && new_num_bytes != 0) {
     39a:	68fb      	ldr	r3, [r7, #12]
     39c:	2b00      	cmp	r3, #0
     39e:	d105      	bne.n	3ac <m_realloc+0x28>
     3a0:	683b      	ldr	r3, [r7, #0]
     3a2:	2b00      	cmp	r3, #0
     3a4:	d002      	beq.n	3ac <m_realloc+0x28>
        m_malloc_fail(new_num_bytes);
     3a6:	6838      	ldr	r0, [r7, #0]
     3a8:	f00c fddc 	bl	cf64 <m_malloc_fail>
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, old_num_bytes, new_num_bytes, new_ptr);
    #else
    DEBUG_printf("realloc %p, %d : %p\n", ptr, new_num_bytes, new_ptr);
    #endif
    return new_ptr;
     3ac:	68fb      	ldr	r3, [r7, #12]
}
     3ae:	4618      	mov	r0, r3
     3b0:	3710      	adds	r7, #16
     3b2:	46bd      	mov	sp, r7
     3b4:	bd80      	pop	{r7, pc}
     3b6:	bf00      	nop

000003b8 <m_realloc_maybe>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void *m_realloc_maybe(void *ptr, size_t old_num_bytes, size_t new_num_bytes, bool allow_move) {
#else
void *m_realloc_maybe(void *ptr, size_t new_num_bytes, bool allow_move) {
     3b8:	b580      	push	{r7, lr}
     3ba:	b086      	sub	sp, #24
     3bc:	af00      	add	r7, sp, #0
     3be:	60f8      	str	r0, [r7, #12]
     3c0:	60b9      	str	r1, [r7, #8]
     3c2:	4613      	mov	r3, r2
     3c4:	71fb      	strb	r3, [r7, #7]
#endif
    void *new_ptr = realloc_ext(ptr, new_num_bytes, allow_move);
     3c6:	79fb      	ldrb	r3, [r7, #7]
     3c8:	461a      	mov	r2, r3
     3ca:	68b9      	ldr	r1, [r7, #8]
     3cc:	68f8      	ldr	r0, [r7, #12]
     3ce:	f000 fb45 	bl	a5c <gc_realloc>
     3d2:	6178      	str	r0, [r7, #20]
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, old_num_bytes, new_num_bytes, new_ptr);
    #else
    DEBUG_printf("realloc %p, %d, %d : %p\n", ptr, new_num_bytes, new_ptr);
    #endif
    return new_ptr;
     3d4:	697b      	ldr	r3, [r7, #20]
}
     3d6:	4618      	mov	r0, r3
     3d8:	3718      	adds	r7, #24
     3da:	46bd      	mov	sp, r7
     3dc:	bd80      	pop	{r7, pc}
     3de:	bf00      	nop

000003e0 <m_free>:

#if MICROPY_MALLOC_USES_ALLOCATED_SIZE
void m_free(void *ptr, size_t num_bytes) {
#else
void m_free(void *ptr) {
     3e0:	b580      	push	{r7, lr}
     3e2:	b082      	sub	sp, #8
     3e4:	af00      	add	r7, sp, #0
     3e6:	6078      	str	r0, [r7, #4]
#endif
    free(ptr);
     3e8:	6878      	ldr	r0, [r7, #4]
     3ea:	f000 faf9 	bl	9e0 <gc_free>
    #if MICROPY_MALLOC_USES_ALLOCATED_SIZE
    DEBUG_printf("free %p, %d\n", ptr, num_bytes);
    #else
    DEBUG_printf("free %p\n", ptr);
    #endif
}
     3ee:	bf00      	nop
     3f0:	3708      	adds	r7, #8
     3f2:	46bd      	mov	sp, r7
     3f4:	bd80      	pop	{r7, pc}
     3f6:	bf00      	nop

000003f8 <gc_mark_subtree>:

// Take the given block as the topmost block on the stack. Check all it's
// children: mark the unmarked child blocks and put those newly marked
// blocks on the stack. When all children have been checked, pop off the
// topmost block on the stack and repeat with that one.
STATIC void gc_mark_subtree(size_t block) {
     3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     3fc:	4c2b      	ldr	r4, [pc, #172]	; (4ac <gc_mark_subtree+0xb4>)
    // Start with the block passed in the argument.
    size_t sp = 0;
     3fe:	2500      	movs	r5, #0

        // check this block's children
        void **ptrs = (void**)PTR_FROM_BLOCK(block);
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
            void *ptr = *ptrs;
            if (VERIFY_PTR(ptr)) {
     400:	4626      	mov	r6, r4
                // Mark and push this pointer
                size_t childblock = BLOCK_FROM_PTR(ptr);
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
                    // an unmarked head, mark it, and push it on gc stack
                    TRACE_MARK(childblock, ptr);
                    ATB_HEAD_TO_MARK(childblock);
     402:	f04f 0a03 	mov.w	sl, #3
     406:	f8d4 e098 	ldr.w	lr, [r4, #152]	; 0x98
        size_t n_blocks = 0;
     40a:	2100      	movs	r1, #0
            n_blocks += 1;
     40c:	3101      	adds	r1, #1
     40e:	1843      	adds	r3, r0, r1
        } while (ATB_GET_KIND(block + n_blocks) == AT_TAIL);
     410:	089a      	lsrs	r2, r3, #2
     412:	f003 0303 	and.w	r3, r3, #3
     416:	f81e 2002 	ldrb.w	r2, [lr, r2]
     41a:	005b      	lsls	r3, r3, #1
     41c:	fa42 f303 	asr.w	r3, r2, r3
     420:	f003 0303 	and.w	r3, r3, #3
     424:	2b02      	cmp	r3, #2
     426:	d0f1      	beq.n	40c <gc_mark_subtree+0x14>
        void **ptrs = (void**)PTR_FROM_BLOCK(block);
     428:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     42c:	0109      	lsls	r1, r1, #4
     42e:	088a      	lsrs	r2, r1, #2
        void **ptrs = (void**)PTR_FROM_BLOCK(block);
     430:	eb03 1000 	add.w	r0, r3, r0, lsl #4
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     434:	b301      	cbz	r1, 478 <gc_mark_subtree+0x80>
     436:	3804      	subs	r0, #4
            void *ptr = *ptrs;
     438:	f850 1f04 	ldr.w	r1, [r0, #4]!
            if (VERIFY_PTR(ptr)) {
     43c:	070b      	lsls	r3, r1, #28
     43e:	d119      	bne.n	474 <gc_mark_subtree+0x7c>
     440:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
     444:	4299      	cmp	r1, r3
     446:	d315      	bcc.n	474 <gc_mark_subtree+0x7c>
                size_t childblock = BLOCK_FROM_PTR(ptr);
     448:	1acb      	subs	r3, r1, r3
            if (VERIFY_PTR(ptr)) {
     44a:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     44e:	ea4f 1c93 	mov.w	ip, r3, lsr #6
                size_t childblock = BLOCK_FROM_PTR(ptr);
     452:	091b      	lsrs	r3, r3, #4
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     454:	f003 0e03 	and.w	lr, r3, #3
            if (VERIFY_PTR(ptr)) {
     458:	42b9      	cmp	r1, r7
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     45a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
            if (VERIFY_PTR(ptr)) {
     45e:	d209      	bcs.n	474 <gc_mark_subtree+0x7c>
                if (ATB_GET_KIND(childblock) == AT_HEAD) {
     460:	f8d6 9098 	ldr.w	r9, [r6, #152]	; 0x98
     464:	f819 800c 	ldrb.w	r8, [r9, ip]
     468:	fa48 f10e 	asr.w	r1, r8, lr
     46c:	f001 0103 	and.w	r1, r1, #3
     470:	2901      	cmp	r1, #1
     472:	d008      	beq.n	486 <gc_mark_subtree+0x8e>
        for (size_t i = n_blocks * BYTES_PER_BLOCK / sizeof(void*); i > 0; i--, ptrs++) {
     474:	3a01      	subs	r2, #1
     476:	d1df      	bne.n	438 <gc_mark_subtree+0x40>
                }
            }
        }

        // Are there any blocks on the stack?
        if (sp == 0) {
     478:	b1ad      	cbz	r5, 4a6 <gc_mark_subtree+0xae>
            break; // No, stack is empty, we're done.
        }

        // pop the next block off the stack
        block = MP_STATE_MEM(gc_stack)[--sp];
     47a:	3d01      	subs	r5, #1
     47c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
     480:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    }
     484:	e7bf      	b.n	406 <gc_mark_subtree+0xe>
                    ATB_HEAD_TO_MARK(childblock);
     486:	fa0a fe0e 	lsl.w	lr, sl, lr
     48a:	ea4e 0e08 	orr.w	lr, lr, r8
                        MP_STATE_MEM(gc_stack)[sp++] = childblock;
     48e:	eb06 0885 	add.w	r8, r6, r5, lsl #2
                    if (sp < MICROPY_ALLOC_GC_STACK_SIZE) {
     492:	2d3f      	cmp	r5, #63	; 0x3f
                    ATB_HEAD_TO_MARK(childblock);
     494:	f809 e00c 	strb.w	lr, [r9, ip]
                        MP_STATE_MEM(gc_stack)[sp++] = childblock;
     498:	bf9a      	itte	ls
     49a:	3501      	addls	r5, #1
     49c:	f8c8 30ac 	strls.w	r3, [r8, #172]	; 0xac
                        MP_STATE_MEM(gc_stack_overflow) = 1;
     4a0:	f8c6 10a8 	strhi.w	r1, [r6, #168]	; 0xa8
     4a4:	e7e6      	b.n	474 <gc_mark_subtree+0x7c>
     4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     4aa:	bf00      	nop
     4ac:	20000a2c 	.word	0x20000a2c

000004b0 <gc_free.part.0>:
}
*/

// force the freeing of a piece of memory
// TODO: freeing here does not call finaliser
void gc_free(void *ptr) {
     4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if (ptr == NULL) {
        GC_EXIT();
    } else {
        // get the GC block number corresponding to this pointer
        assert(VERIFY_PTR(ptr));
     4b2:	0703      	lsls	r3, r0, #28
     4b4:	d134      	bne.n	520 <gc_free.part.0+0x70>
     4b6:	4e21      	ldr	r6, [pc, #132]	; (53c <gc_free.part.0+0x8c>)
     4b8:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
     4bc:	4298      	cmp	r0, r3
     4be:	d32f      	bcc.n	520 <gc_free.part.0+0x70>
     4c0:	f8d6 20a4 	ldr.w	r2, [r6, #164]	; 0xa4
     4c4:	4290      	cmp	r0, r2
     4c6:	d22b      	bcs.n	520 <gc_free.part.0+0x70>
        size_t block = BLOCK_FROM_PTR(ptr);
     4c8:	1ac0      	subs	r0, r0, r3
        assert(ATB_GET_KIND(block) == AT_HEAD);
     4ca:	0981      	lsrs	r1, r0, #6
     4cc:	f8d6 7098 	ldr.w	r7, [r6, #152]	; 0x98
        size_t block = BLOCK_FROM_PTR(ptr);
     4d0:	0900      	lsrs	r0, r0, #4
        assert(ATB_GET_KIND(block) == AT_HEAD);
     4d2:	f000 0303 	and.w	r3, r0, #3
     4d6:	5c7a      	ldrb	r2, [r7, r1]
     4d8:	005c      	lsls	r4, r3, #1
     4da:	4122      	asrs	r2, r4
     4dc:	f002 0203 	and.w	r2, r2, #3
     4e0:	2a01      	cmp	r2, #1
     4e2:	d124      	bne.n	52e <gc_free.part.0+0x7e>
        #if MICROPY_ENABLE_FINALISER
        FTB_CLEAR(block);
        #endif

        // set the last_free pointer to this block if it's earlier in the heap
        if (block / BLOCKS_PER_ATB < MP_STATE_MEM(gc_last_free_atb_index)) {
     4e4:	f8d6 21b0 	ldr.w	r2, [r6, #432]	; 0x1b0
     4e8:	0884      	lsrs	r4, r0, #2
     4ea:	4291      	cmp	r1, r2
            MP_STATE_MEM(gc_last_free_atb_index) = block / BLOCKS_PER_ATB;
     4ec:	bf38      	it	cc
     4ee:	f8c6 11b0 	strcc.w	r1, [r6, #432]	; 0x1b0
     4f2:	5d39      	ldrb	r1, [r7, r4]
        }

        // free head and all of its tail blocks
        do {
            ATB_ANY_TO_FREE(block);
     4f4:	2503      	movs	r5, #3
     4f6:	005b      	lsls	r3, r3, #1
     4f8:	fa05 f303 	lsl.w	r3, r5, r3
     4fc:	ea21 0103 	bic.w	r1, r1, r3
     500:	5539      	strb	r1, [r7, r4]
            block += 1;
     502:	3001      	adds	r0, #1
        } while (ATB_GET_KIND(block) == AT_TAIL);
     504:	f8d6 7098 	ldr.w	r7, [r6, #152]	; 0x98
     508:	0884      	lsrs	r4, r0, #2
     50a:	f000 0303 	and.w	r3, r0, #3
     50e:	5d39      	ldrb	r1, [r7, r4]
     510:	005a      	lsls	r2, r3, #1
     512:	fa41 f202 	asr.w	r2, r1, r2
     516:	f002 0203 	and.w	r2, r2, #3
     51a:	2a02      	cmp	r2, #2
     51c:	d0eb      	beq.n	4f6 <gc_free.part.0+0x46>

        #if EXTENSIVE_HEAP_PROFILING
        gc_dump_alloc_table();
        #endif
    }
}
     51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert(VERIFY_PTR(ptr));
     520:	4b07      	ldr	r3, [pc, #28]	; (540 <gc_free.part.0+0x90>)
     522:	4a08      	ldr	r2, [pc, #32]	; (544 <gc_free.part.0+0x94>)
     524:	4808      	ldr	r0, [pc, #32]	; (548 <gc_free.part.0+0x98>)
     526:	f44f 7110 	mov.w	r1, #576	; 0x240
     52a:	f01a ff1f 	bl	1b36c <__assert_func>
        assert(ATB_GET_KIND(block) == AT_HEAD);
     52e:	4b07      	ldr	r3, [pc, #28]	; (54c <gc_free.part.0+0x9c>)
     530:	4a04      	ldr	r2, [pc, #16]	; (544 <gc_free.part.0+0x94>)
     532:	4805      	ldr	r0, [pc, #20]	; (548 <gc_free.part.0+0x98>)
     534:	f240 2142 	movw	r1, #578	; 0x242
     538:	f01a ff18 	bl	1b36c <__assert_func>
     53c:	20000a2c 	.word	0x20000a2c
     540:	0001ca88 	.word	0x0001ca88
     544:	0001ca74 	.word	0x0001ca74
     548:	0001ca98 	.word	0x0001ca98
     54c:	0001caa8 	.word	0x0001caa8

00000550 <gc_init>:
void gc_init(void *start, void *end) {
     550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len / (1 + BITS_PER_BYTE / 2 * BYTES_PER_BLOCK);
     552:	4a0f      	ldr	r2, [pc, #60]	; (590 <gc_init+0x40>)
     554:	4c0f      	ldr	r4, [pc, #60]	; (594 <gc_init+0x44>)
    end = (void*)((uintptr_t)end & (~(BYTES_PER_BLOCK - 1)));
     556:	f021 050f 	bic.w	r5, r1, #15
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len / (1 + BITS_PER_BYTE / 2 * BYTES_PER_BLOCK);
     55a:	1a2b      	subs	r3, r5, r0
     55c:	fba2 2303 	umull	r2, r3, r2, r3
     560:	099b      	lsrs	r3, r3, #6
    MP_STATE_MEM(gc_pool_start) = (byte*)end - gc_pool_block_len * BYTES_PER_BLOCK;
     562:	eba5 1783 	sub.w	r7, r5, r3, lsl #6
    memset(MP_STATE_MEM(gc_alloc_table_start), 0, MP_STATE_MEM(gc_alloc_table_byte_len));
     566:	461a      	mov	r2, r3
     568:	2100      	movs	r1, #0
    MP_STATE_MEM(gc_alloc_table_byte_len) = total_byte_len / (1 + BITS_PER_BYTE / 2 * BYTES_PER_BLOCK);
     56a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    MP_STATE_MEM(gc_alloc_table_start) = (byte*)start;
     56e:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
    MP_STATE_MEM(gc_pool_end) = end;
     572:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
    MP_STATE_MEM(gc_pool_start) = (byte*)end - gc_pool_block_len * BYTES_PER_BLOCK;
     576:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
    memset(MP_STATE_MEM(gc_alloc_table_start), 0, MP_STATE_MEM(gc_alloc_table_byte_len));
     57a:	f01b fd3f 	bl	1bffc <memset>
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     57e:	2300      	movs	r3, #0
    MP_STATE_MEM(gc_auto_collect_enabled) = 1;
     580:	2201      	movs	r2, #1
     582:	f8a4 21ae 	strh.w	r2, [r4, #430]	; 0x1ae
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     586:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
    MP_STATE_MEM(gc_lock_depth) = 0;
     58a:	f8a4 31ac 	strh.w	r3, [r4, #428]	; 0x1ac
     58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     590:	fc0fc0fd 	.word	0xfc0fc0fd
     594:	20000a2c 	.word	0x20000a2c

00000598 <gc_lock>:
    MP_STATE_MEM(gc_lock_depth)++;
     598:	4a03      	ldr	r2, [pc, #12]	; (5a8 <gc_lock+0x10>)
     59a:	f8b2 31ac 	ldrh.w	r3, [r2, #428]	; 0x1ac
     59e:	3301      	adds	r3, #1
     5a0:	f8a2 31ac 	strh.w	r3, [r2, #428]	; 0x1ac
     5a4:	4770      	bx	lr
     5a6:	bf00      	nop
     5a8:	20000a2c 	.word	0x20000a2c

000005ac <gc_unlock>:
    MP_STATE_MEM(gc_lock_depth)--;
     5ac:	4a03      	ldr	r2, [pc, #12]	; (5bc <gc_unlock+0x10>)
     5ae:	f8b2 31ac 	ldrh.w	r3, [r2, #428]	; 0x1ac
     5b2:	3b01      	subs	r3, #1
     5b4:	f8a2 31ac 	strh.w	r3, [r2, #428]	; 0x1ac
     5b8:	4770      	bx	lr
     5ba:	bf00      	nop
     5bc:	20000a2c 	.word	0x20000a2c

000005c0 <gc_is_locked>:
    return MP_STATE_MEM(gc_lock_depth) != 0;
     5c0:	4b03      	ldr	r3, [pc, #12]	; (5d0 <gc_is_locked+0x10>)
     5c2:	f8b3 01ac 	ldrh.w	r0, [r3, #428]	; 0x1ac
}
     5c6:	3000      	adds	r0, #0
     5c8:	bf18      	it	ne
     5ca:	2001      	movne	r0, #1
     5cc:	4770      	bx	lr
     5ce:	bf00      	nop
     5d0:	20000a2c 	.word	0x20000a2c

000005d4 <gc_collect_start>:
    MP_STATE_MEM(gc_lock_depth)++;
     5d4:	4b1d      	ldr	r3, [pc, #116]	; (64c <gc_collect_start+0x78>)
     5d6:	f8b3 21ac 	ldrh.w	r2, [r3, #428]	; 0x1ac
    MP_STATE_MEM(gc_stack_overflow) = 0;
     5da:	2100      	movs	r1, #0
    MP_STATE_MEM(gc_lock_depth)++;
     5dc:	3201      	adds	r2, #1
void gc_collect_start(void) {
     5de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     5e2:	461e      	mov	r6, r3
    MP_STATE_MEM(gc_lock_depth)++;
     5e4:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
    MP_STATE_MEM(gc_stack_overflow) = 0;
     5e8:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     5ec:	461c      	mov	r4, r3
     5ee:	f103 0584 	add.w	r5, r3, #132	; 0x84
        if (VERIFY_PTR(ptr)) {
     5f2:	461f      	mov	r7, r3
                ATB_HEAD_TO_MARK(block);
     5f4:	f04f 0803 	mov.w	r8, #3
        void *ptr = ptrs[i];
     5f8:	f854 3f04 	ldr.w	r3, [r4, #4]!
        if (VERIFY_PTR(ptr)) {
     5fc:	071a      	lsls	r2, r3, #28
     5fe:	d119      	bne.n	634 <gc_collect_start+0x60>
     600:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
     604:	4283      	cmp	r3, r0
     606:	d315      	bcc.n	634 <gc_collect_start+0x60>
            size_t block = BLOCK_FROM_PTR(ptr);
     608:	1a18      	subs	r0, r3, r0
        if (VERIFY_PTR(ptr)) {
     60a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     60e:	ea4f 1e90 	mov.w	lr, r0, lsr #6
            size_t block = BLOCK_FROM_PTR(ptr);
     612:	0900      	lsrs	r0, r0, #4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     614:	f000 0203 	and.w	r2, r0, #3
        if (VERIFY_PTR(ptr)) {
     618:	428b      	cmp	r3, r1
            if (ATB_GET_KIND(block) == AT_HEAD) {
     61a:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if (VERIFY_PTR(ptr)) {
     61e:	d209      	bcs.n	634 <gc_collect_start+0x60>
            if (ATB_GET_KIND(block) == AT_HEAD) {
     620:	f8d7 c098 	ldr.w	ip, [r7, #152]	; 0x98
     624:	f81c 100e 	ldrb.w	r1, [ip, lr]
     628:	fa41 f302 	asr.w	r3, r1, r2
     62c:	f003 0303 	and.w	r3, r3, #3
     630:	2b01      	cmp	r3, #1
     632:	d003      	beq.n	63c <gc_collect_start+0x68>
    for (size_t i = 0; i < len; i++) {
     634:	42a5      	cmp	r5, r4
     636:	d1df      	bne.n	5f8 <gc_collect_start+0x24>
}
     638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ATB_HEAD_TO_MARK(block);
     63c:	fa08 f202 	lsl.w	r2, r8, r2
     640:	430a      	orrs	r2, r1
     642:	f80c 200e 	strb.w	r2, [ip, lr]
                gc_mark_subtree(block);
     646:	f7ff fed7 	bl	3f8 <gc_mark_subtree>
     64a:	e7f3      	b.n	634 <gc_collect_start+0x60>
     64c:	20000a2c 	.word	0x20000a2c

00000650 <gc_collect_root>:
    for (size_t i = 0; i < len; i++) {
     650:	b399      	cbz	r1, 6ba <gc_collect_root+0x6a>
void gc_collect_root(void **ptrs, size_t len) {
     652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if (VERIFY_PTR(ptr)) {
     656:	4f19      	ldr	r7, [pc, #100]	; (6bc <gc_collect_root+0x6c>)
     658:	460e      	mov	r6, r1
     65a:	1f05      	subs	r5, r0, #4
    for (size_t i = 0; i < len; i++) {
     65c:	2400      	movs	r4, #0
                ATB_HEAD_TO_MARK(block);
     65e:	f04f 0803 	mov.w	r8, #3
        void *ptr = ptrs[i];
     662:	f855 3f04 	ldr.w	r3, [r5, #4]!
        if (VERIFY_PTR(ptr)) {
     666:	071a      	lsls	r2, r3, #28
    for (size_t i = 0; i < len; i++) {
     668:	f104 0401 	add.w	r4, r4, #1
        if (VERIFY_PTR(ptr)) {
     66c:	d119      	bne.n	6a2 <gc_collect_root+0x52>
     66e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
     672:	4283      	cmp	r3, r0
     674:	d315      	bcc.n	6a2 <gc_collect_root+0x52>
            size_t block = BLOCK_FROM_PTR(ptr);
     676:	1a18      	subs	r0, r3, r0
        if (VERIFY_PTR(ptr)) {
     678:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     67c:	ea4f 1e90 	mov.w	lr, r0, lsr #6
            size_t block = BLOCK_FROM_PTR(ptr);
     680:	0900      	lsrs	r0, r0, #4
            if (ATB_GET_KIND(block) == AT_HEAD) {
     682:	f000 0203 	and.w	r2, r0, #3
        if (VERIFY_PTR(ptr)) {
     686:	428b      	cmp	r3, r1
            if (ATB_GET_KIND(block) == AT_HEAD) {
     688:	ea4f 0242 	mov.w	r2, r2, lsl #1
        if (VERIFY_PTR(ptr)) {
     68c:	d209      	bcs.n	6a2 <gc_collect_root+0x52>
            if (ATB_GET_KIND(block) == AT_HEAD) {
     68e:	f8d7 c098 	ldr.w	ip, [r7, #152]	; 0x98
     692:	f81c 100e 	ldrb.w	r1, [ip, lr]
     696:	fa41 f302 	asr.w	r3, r1, r2
     69a:	f003 0303 	and.w	r3, r3, #3
     69e:	2b01      	cmp	r3, #1
     6a0:	d003      	beq.n	6aa <gc_collect_root+0x5a>
    for (size_t i = 0; i < len; i++) {
     6a2:	42a6      	cmp	r6, r4
     6a4:	d1dd      	bne.n	662 <gc_collect_root+0x12>
     6a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ATB_HEAD_TO_MARK(block);
     6aa:	fa08 f202 	lsl.w	r2, r8, r2
     6ae:	430a      	orrs	r2, r1
     6b0:	f80c 200e 	strb.w	r2, [ip, lr]
                gc_mark_subtree(block);
     6b4:	f7ff fea0 	bl	3f8 <gc_mark_subtree>
     6b8:	e7f3      	b.n	6a2 <gc_collect_root+0x52>
     6ba:	4770      	bx	lr
     6bc:	20000a2c 	.word	0x20000a2c

000006c0 <gc_collect_end>:
void gc_collect_end(void) {
     6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     6c4:	4f37      	ldr	r7, [pc, #220]	; (7a4 <gc_collect_end+0xe4>)
     6c6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
     6ca:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
     6ce:	0080      	lsls	r0, r0, #2
            if (ATB_GET_KIND(block) == AT_MARK) {
     6d0:	463c      	mov	r4, r7
        MP_STATE_MEM(gc_stack_overflow) = 0;
     6d2:	2500      	movs	r5, #0
    while (MP_STATE_MEM(gc_stack_overflow)) {
     6d4:	b311      	cbz	r1, 71c <gc_collect_end+0x5c>
        MP_STATE_MEM(gc_stack_overflow) = 0;
     6d6:	f8c7 50a8 	str.w	r5, [r7, #168]	; 0xa8
        for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     6da:	2800      	cmp	r0, #0
     6dc:	d04d      	beq.n	77a <gc_collect_end+0xba>
     6de:	2600      	movs	r6, #0
     6e0:	e002      	b.n	6e8 <gc_collect_end+0x28>
     6e2:	3601      	adds	r6, #1
     6e4:	4286      	cmp	r6, r0
     6e6:	d215      	bcs.n	714 <gc_collect_end+0x54>
            if (ATB_GET_KIND(block) == AT_MARK) {
     6e8:	08b2      	lsrs	r2, r6, #2
     6ea:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
     6ee:	f006 0303 	and.w	r3, r6, #3
     6f2:	5c8a      	ldrb	r2, [r1, r2]
     6f4:	005b      	lsls	r3, r3, #1
     6f6:	fa42 f303 	asr.w	r3, r2, r3
     6fa:	f003 0303 	and.w	r3, r3, #3
     6fe:	2b03      	cmp	r3, #3
     700:	d1ef      	bne.n	6e2 <gc_collect_end+0x22>
                gc_mark_subtree(block);
     702:	4630      	mov	r0, r6
     704:	f7ff fe78 	bl	3f8 <gc_mark_subtree>
     708:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
        for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     70c:	3601      	adds	r6, #1
     70e:	0080      	lsls	r0, r0, #2
     710:	4286      	cmp	r6, r0
     712:	d3e9      	bcc.n	6e8 <gc_collect_end+0x28>
     714:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
    while (MP_STATE_MEM(gc_stack_overflow)) {
     718:	2900      	cmp	r1, #0
     71a:	d1dc      	bne.n	6d6 <gc_collect_end+0x16>
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     71c:	b368      	cbz	r0, 77a <gc_collect_end+0xba>
        switch (ATB_GET_KIND(block)) {
     71e:	f8df c084 	ldr.w	ip, [pc, #132]	; 7a4 <gc_collect_end+0xe4>
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     722:	460a      	mov	r2, r1
                    ATB_ANY_TO_FREE(block);
     724:	f04f 0e03 	mov.w	lr, #3
                ATB_MARK_TO_HEAD(block);
     728:	2602      	movs	r6, #2
     72a:	e008      	b.n	73e <gc_collect_end+0x7e>
        switch (ATB_GET_KIND(block)) {
     72c:	f1b9 0f03 	cmp.w	r9, #3
     730:	d02d      	beq.n	78e <gc_collect_end+0xce>
     732:	f1b9 0f01 	cmp.w	r9, #1
     736:	d013      	beq.n	760 <gc_collect_end+0xa0>
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     738:	3201      	adds	r2, #1
     73a:	4282      	cmp	r2, r0
     73c:	d21d      	bcs.n	77a <gc_collect_end+0xba>
        switch (ATB_GET_KIND(block)) {
     73e:	0894      	lsrs	r4, r2, #2
     740:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
     744:	f002 0303 	and.w	r3, r2, #3
     748:	f815 8004 	ldrb.w	r8, [r5, r4]
     74c:	005b      	lsls	r3, r3, #1
     74e:	fa48 f903 	asr.w	r9, r8, r3
     752:	f009 0903 	and.w	r9, r9, #3
     756:	f1b9 0f02 	cmp.w	r9, #2
     75a:	d1e7      	bne.n	72c <gc_collect_end+0x6c>
                if (free_tail) {
     75c:	2900      	cmp	r1, #0
     75e:	d0eb      	beq.n	738 <gc_collect_end+0x78>
                    ATB_ANY_TO_FREE(block);
     760:	fa0e f303 	lsl.w	r3, lr, r3
     764:	ea28 0303 	bic.w	r3, r8, r3
     768:	552b      	strb	r3, [r5, r4]
     76a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     76e:	3201      	adds	r2, #1
     770:	0080      	lsls	r0, r0, #2
     772:	4282      	cmp	r2, r0
                    ATB_ANY_TO_FREE(block);
     774:	f04f 0101 	mov.w	r1, #1
    for (size_t block = 0; block < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; block++) {
     778:	d3e1      	bcc.n	73e <gc_collect_end+0x7e>
    MP_STATE_MEM(gc_lock_depth)--;
     77a:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     77e:	2200      	movs	r2, #0
    MP_STATE_MEM(gc_lock_depth)--;
     780:	3b01      	subs	r3, #1
     782:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
    MP_STATE_MEM(gc_last_free_atb_index) = 0;
     786:	f8c7 21b0 	str.w	r2, [r7, #432]	; 0x1b0
}
     78a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                ATB_MARK_TO_HEAD(block);
     78e:	fa06 f303 	lsl.w	r3, r6, r3
     792:	ea28 0303 	bic.w	r3, r8, r3
     796:	552b      	strb	r3, [r5, r4]
     798:	f8dc 009c 	ldr.w	r0, [ip, #156]	; 0x9c
                free_tail = 0;
     79c:	2100      	movs	r1, #0
     79e:	0080      	lsls	r0, r0, #2
     7a0:	e7ca      	b.n	738 <gc_collect_end+0x78>
     7a2:	bf00      	nop
     7a4:	20000a2c 	.word	0x20000a2c

000007a8 <gc_info>:
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     7a8:	4b3d      	ldr	r3, [pc, #244]	; (8a0 <gc_info+0xf8>)
     7aa:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
     7ae:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
void gc_info(gc_info_t *info) {
     7b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     7b6:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
     7ba:	f8d3 7098 	ldr.w	r7, [r3, #152]	; 0x98
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     7be:	1a52      	subs	r2, r2, r1
    info->used = 0;
     7c0:	2300      	movs	r3, #0
    info->total = MP_STATE_MEM(gc_pool_end) - MP_STATE_MEM(gc_pool_start);
     7c2:	6002      	str	r2, [r0, #0]
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     7c4:	461d      	mov	r5, r3
     7c6:	00b6      	lsls	r6, r6, #2
    info->used = 0;
     7c8:	6043      	str	r3, [r0, #4]
    info->free = 0;
     7ca:	6083      	str	r3, [r0, #8]
    info->max_free = 0;
     7cc:	60c3      	str	r3, [r0, #12]
    info->num_1block = 0;
     7ce:	6103      	str	r3, [r0, #16]
    info->num_2block = 0;
     7d0:	6143      	str	r3, [r0, #20]
    info->max_block = 0;
     7d2:	6183      	str	r3, [r0, #24]
        finish = (block == MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB);
     7d4:	469c      	mov	ip, r3
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     7d6:	469e      	mov	lr, r3
     7d8:	461c      	mov	r4, r3
     7da:	461a      	mov	r2, r3
     7dc:	4699      	mov	r9, r3
     7de:	4619      	mov	r1, r3
     7e0:	4698      	mov	r8, r3
        size_t kind = ATB_GET_KIND(block);
     7e2:	f817 9009 	ldrb.w	r9, [r7, r9]
     7e6:	004b      	lsls	r3, r1, #1
     7e8:	fa49 f303 	asr.w	r3, r9, r3
     7ec:	f003 0303 	and.w	r3, r3, #3
        switch (kind) {
     7f0:	2b01      	cmp	r3, #1
     7f2:	d030      	beq.n	856 <gc_info+0xae>
     7f4:	d327      	bcc.n	846 <gc_info+0x9e>
     7f6:	2b02      	cmp	r3, #2
     7f8:	d102      	bne.n	800 <gc_info+0x58>
                info->used += 1;
     7fa:	3501      	adds	r5, #1
     7fc:	6045      	str	r5, [r0, #4]
                len += 1;
     7fe:	3401      	adds	r4, #1
        block++;
     800:	3201      	adds	r2, #1
        if (!finish) {
     802:	42b2      	cmp	r2, r6
     804:	d00e      	beq.n	824 <gc_info+0x7c>
            kind = ATB_GET_KIND(block);
     806:	ea4f 0992 	mov.w	r9, r2, lsr #2
     80a:	f002 0103 	and.w	r1, r2, #3
     80e:	f817 3009 	ldrb.w	r3, [r7, r9]
     812:	ea4f 0a41 	mov.w	sl, r1, lsl #1
     816:	fa43 f30a 	asr.w	r3, r3, sl
        if (finish || kind == AT_FREE || kind == AT_HEAD) {
     81a:	f013 0303 	ands.w	r3, r3, #3
     81e:	d001      	beq.n	824 <gc_info+0x7c>
     820:	2b01      	cmp	r3, #1
     822:	d1de      	bne.n	7e2 <gc_info+0x3a>
            if (len == 1) {
     824:	2c01      	cmp	r4, #1
     826:	d01a      	beq.n	85e <gc_info+0xb6>
            } else if (len == 2) {
     828:	2c02      	cmp	r4, #2
     82a:	d02b      	beq.n	884 <gc_info+0xdc>
            if (len > info->max_block) {
     82c:	6981      	ldr	r1, [r0, #24]
     82e:	428c      	cmp	r4, r1
                info->max_block = len;
     830:	bf88      	it	hi
     832:	6184      	strhi	r4, [r0, #24]
            if (finish || kind == AT_HEAD) {
     834:	42b2      	cmp	r2, r6
     836:	d01b      	beq.n	870 <gc_info+0xc8>
     838:	2b01      	cmp	r3, #1
     83a:	d027      	beq.n	88c <gc_info+0xe4>
     83c:	ea4f 0992 	mov.w	r9, r2, lsr #2
     840:	f002 0103 	and.w	r1, r2, #3
     844:	e7cd      	b.n	7e2 <gc_info+0x3a>
                info->free += 1;
     846:	f10c 0c01 	add.w	ip, ip, #1
     84a:	f8c0 c008 	str.w	ip, [r0, #8]
                len_free += 1;
     84e:	f10e 0e01 	add.w	lr, lr, #1
                len = 0;
     852:	2400      	movs	r4, #0
                break;
     854:	e7d4      	b.n	800 <gc_info+0x58>
                info->used += 1;
     856:	3501      	adds	r5, #1
     858:	6045      	str	r5, [r0, #4]
                len = 1;
     85a:	461c      	mov	r4, r3
                break;
     85c:	e7d0      	b.n	800 <gc_info+0x58>
                info->num_1block += 1;
     85e:	6901      	ldr	r1, [r0, #16]
     860:	3101      	adds	r1, #1
     862:	6101      	str	r1, [r0, #16]
            if (len > info->max_block) {
     864:	6981      	ldr	r1, [r0, #24]
     866:	428c      	cmp	r4, r1
                info->max_block = len;
     868:	bf88      	it	hi
     86a:	6184      	strhi	r4, [r0, #24]
            if (finish || kind == AT_HEAD) {
     86c:	42b2      	cmp	r2, r6
     86e:	d1e3      	bne.n	838 <gc_info+0x90>
                if (len_free > info->max_free) {
     870:	45c6      	cmp	lr, r8
     872:	d90e      	bls.n	892 <gc_info+0xea>
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     874:	42b2      	cmp	r2, r6
                    info->max_free = len_free;
     876:	f8c0 e00c 	str.w	lr, [r0, #12]
    for (size_t block = 0, len = 0, len_free = 0; !finish;) {
     87a:	d00a      	beq.n	892 <gc_info+0xea>
     87c:	46f0      	mov	r8, lr
                len_free = 0;
     87e:	f04f 0e00 	mov.w	lr, #0
     882:	e7db      	b.n	83c <gc_info+0x94>
                info->num_2block += 1;
     884:	6941      	ldr	r1, [r0, #20]
     886:	3101      	adds	r1, #1
     888:	6141      	str	r1, [r0, #20]
     88a:	e7cf      	b.n	82c <gc_info+0x84>
                if (len_free > info->max_free) {
     88c:	45f0      	cmp	r8, lr
     88e:	d2f6      	bcs.n	87e <gc_info+0xd6>
     890:	e7f0      	b.n	874 <gc_info+0xcc>
    info->used *= BYTES_PER_BLOCK;
     892:	012d      	lsls	r5, r5, #4
    info->free *= BYTES_PER_BLOCK;
     894:	ea4f 130c 	mov.w	r3, ip, lsl #4
    info->used *= BYTES_PER_BLOCK;
     898:	6045      	str	r5, [r0, #4]
    info->free *= BYTES_PER_BLOCK;
     89a:	6083      	str	r3, [r0, #8]
}
     89c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     8a0:	20000a2c 	.word	0x20000a2c

000008a4 <gc_alloc>:
void *gc_alloc(size_t n_bytes, bool has_finaliser) {
     8a4:	300f      	adds	r0, #15
     8a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (n_blocks == 0) {
     8aa:	0906      	lsrs	r6, r0, #4
     8ac:	f000 8090 	beq.w	9d0 <gc_alloc+0x12c>
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     8b0:	4d4a      	ldr	r5, [pc, #296]	; (9dc <gc_alloc+0x138>)
     8b2:	f8b5 41ac 	ldrh.w	r4, [r5, #428]	; 0x1ac
     8b6:	2c00      	cmp	r4, #0
     8b8:	f040 808a 	bne.w	9d0 <gc_alloc+0x12c>
    int collected = !MP_STATE_MEM(gc_auto_collect_enabled);
     8bc:	f8b5 e1ae 	ldrh.w	lr, [r5, #430]	; 0x1ae
     8c0:	fabe fe8e 	clz	lr, lr
     8c4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     8c8:	46a8      	mov	r8, r5
     8ca:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
     8ce:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
     8d2:	4282      	cmp	r2, r0
     8d4:	d234      	bcs.n	940 <gc_alloc+0x9c>
     8d6:	f8d8 7098 	ldr.w	r7, [r8, #152]	; 0x98
     8da:	18b9      	adds	r1, r7, r2
     8dc:	e017      	b.n	90e <gc_alloc+0x6a>
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     8de:	3401      	adds	r4, #1
     8e0:	42b4      	cmp	r4, r6
     8e2:	d235      	bcs.n	950 <gc_alloc+0xac>
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     8e4:	f013 0f0c 	tst.w	r3, #12
     8e8:	d11b      	bne.n	922 <gc_alloc+0x7e>
     8ea:	3401      	adds	r4, #1
     8ec:	42b4      	cmp	r4, r6
     8ee:	d269      	bcs.n	9c4 <gc_alloc+0x120>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     8f0:	f013 0f30 	tst.w	r3, #48	; 0x30
     8f4:	d11a      	bne.n	92c <gc_alloc+0x88>
     8f6:	3401      	adds	r4, #1
     8f8:	42b4      	cmp	r4, r6
     8fa:	d266      	bcs.n	9ca <gc_alloc+0x126>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     8fc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
     900:	d119      	bne.n	936 <gc_alloc+0x92>
     902:	3401      	adds	r4, #1
     904:	42b4      	cmp	r4, r6
     906:	d266      	bcs.n	9d6 <gc_alloc+0x132>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     908:	3201      	adds	r2, #1
     90a:	4282      	cmp	r2, r0
     90c:	d218      	bcs.n	940 <gc_alloc+0x9c>
            byte a = MP_STATE_MEM(gc_alloc_table_start)[i];
     90e:	f811 3b01 	ldrb.w	r3, [r1], #1
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     912:	f013 0f03 	tst.w	r3, #3
     916:	d0e2      	beq.n	8de <gc_alloc+0x3a>
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     918:	f013 0f0c 	tst.w	r3, #12
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     91c:	f04f 0400 	mov.w	r4, #0
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     920:	d0e3      	beq.n	8ea <gc_alloc+0x46>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     922:	f013 0f30 	tst.w	r3, #48	; 0x30
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     926:	f04f 0400 	mov.w	r4, #0
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     92a:	d0e4      	beq.n	8f6 <gc_alloc+0x52>
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     92c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     930:	f04f 0400 	mov.w	r4, #0
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     934:	d0e5      	beq.n	902 <gc_alloc+0x5e>
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     936:	3201      	adds	r2, #1
     938:	4282      	cmp	r2, r0
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     93a:	f04f 0400 	mov.w	r4, #0
        for (i = MP_STATE_MEM(gc_last_free_atb_index); i < MP_STATE_MEM(gc_alloc_table_byte_len); i++) {
     93e:	d3e6      	bcc.n	90e <gc_alloc+0x6a>
        if (collected) {
     940:	f1be 0f00 	cmp.w	lr, #0
     944:	d144      	bne.n	9d0 <gc_alloc+0x12c>
        gc_collect();
     946:	f01a fcc7 	bl	1b2d8 <gc_collect>
        collected = 1;
     94a:	f04f 0e01 	mov.w	lr, #1
    }
     94e:	e7bc      	b.n	8ca <gc_alloc+0x26>
            if (ATB_0_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 0; goto found; } } else { n_free = 0; }
     950:	0093      	lsls	r3, r2, #2
    if (n_free == 1) {
     952:	2c01      	cmp	r4, #1
    start_block = i - n_free + 1;
     954:	eba3 0004 	sub.w	r0, r3, r4
        MP_STATE_MEM(gc_last_free_atb_index) = (i + 1) / BLOCKS_PER_ATB;
     958:	f103 0201 	add.w	r2, r3, #1
    start_block = i - n_free + 1;
     95c:	f100 0c01 	add.w	ip, r0, #1
        MP_STATE_MEM(gc_last_free_atb_index) = (i + 1) / BLOCKS_PER_ATB;
     960:	bf04      	itt	eq
     962:	0891      	lsreq	r1, r2, #2
     964:	f8c5 11b0 	streq.w	r1, [r5, #432]	; 0x1b0
    ATB_FREE_TO_HEAD(start_block);
     968:	ea4f 019c 	mov.w	r1, ip, lsr #2
     96c:	f00c 0403 	and.w	r4, ip, #3
     970:	ea4f 0e44 	mov.w	lr, r4, lsl #1
     974:	5c7e      	ldrb	r6, [r7, r1]
     976:	2401      	movs	r4, #1
     978:	fa04 f40e 	lsl.w	r4, r4, lr
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     97c:	3002      	adds	r0, #2
    ATB_FREE_TO_HEAD(start_block);
     97e:	4334      	orrs	r4, r6
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     980:	4283      	cmp	r3, r0
    ATB_FREE_TO_HEAD(start_block);
     982:	547c      	strb	r4, [r7, r1]
        ATB_FREE_TO_TAIL(bl);
     984:	bf28      	it	cs
     986:	f04f 0e02 	movcs.w	lr, #2
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     98a:	d30d      	bcc.n	9a8 <gc_alloc+0x104>
        ATB_FREE_TO_TAIL(bl);
     98c:	0886      	lsrs	r6, r0, #2
     98e:	f8d5 7098 	ldr.w	r7, [r5, #152]	; 0x98
     992:	f000 0103 	and.w	r1, r0, #3
     996:	5dbc      	ldrb	r4, [r7, r6]
     998:	0049      	lsls	r1, r1, #1
     99a:	fa0e f101 	lsl.w	r1, lr, r1
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     99e:	3001      	adds	r0, #1
        ATB_FREE_TO_TAIL(bl);
     9a0:	4321      	orrs	r1, r4
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     9a2:	4283      	cmp	r3, r0
        ATB_FREE_TO_TAIL(bl);
     9a4:	55b9      	strb	r1, [r7, r6]
    for (size_t bl = start_block + 1; bl <= end_block; bl++) {
     9a6:	d2f1      	bcs.n	98c <gc_alloc+0xe8>
    void *ret_ptr = (void*)(MP_STATE_MEM(gc_pool_start) + start_block * BYTES_PER_BLOCK);
     9a8:	f8d5 40a0 	ldr.w	r4, [r5, #160]	; 0xa0
    memset((byte*)ret_ptr, 0, (end_block - start_block + 1) * BYTES_PER_BLOCK);
     9ac:	ebcc 0202 	rsb	r2, ip, r2
    void *ret_ptr = (void*)(MP_STATE_MEM(gc_pool_start) + start_block * BYTES_PER_BLOCK);
     9b0:	eb04 140c 	add.w	r4, r4, ip, lsl #4
    memset((byte*)ret_ptr, 0, (end_block - start_block + 1) * BYTES_PER_BLOCK);
     9b4:	0112      	lsls	r2, r2, #4
     9b6:	4620      	mov	r0, r4
     9b8:	2100      	movs	r1, #0
     9ba:	f01b fb1f 	bl	1bffc <memset>
    return ret_ptr;
     9be:	4620      	mov	r0, r4
     9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (ATB_1_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 1; goto found; } } else { n_free = 0; }
     9c4:	0092      	lsls	r2, r2, #2
     9c6:	1c53      	adds	r3, r2, #1
     9c8:	e7c3      	b.n	952 <gc_alloc+0xae>
            if (ATB_2_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 2; goto found; } } else { n_free = 0; }
     9ca:	0092      	lsls	r2, r2, #2
     9cc:	1c93      	adds	r3, r2, #2
     9ce:	e7c0      	b.n	952 <gc_alloc+0xae>
        return NULL;
     9d0:	2000      	movs	r0, #0
     9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (ATB_3_IS_FREE(a)) { if (++n_free >= n_blocks) { i = i * BLOCKS_PER_ATB + 3; goto found; } } else { n_free = 0; }
     9d6:	0092      	lsls	r2, r2, #2
     9d8:	1cd3      	adds	r3, r2, #3
     9da:	e7ba      	b.n	952 <gc_alloc+0xae>
     9dc:	20000a2c 	.word	0x20000a2c

000009e0 <gc_free>:
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     9e0:	4b03      	ldr	r3, [pc, #12]	; (9f0 <gc_free+0x10>)
     9e2:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
     9e6:	b90b      	cbnz	r3, 9ec <gc_free+0xc>
    if (ptr == NULL) {
     9e8:	b100      	cbz	r0, 9ec <gc_free+0xc>
     9ea:	e561      	b.n	4b0 <gc_free.part.0>
     9ec:	4770      	bx	lr
     9ee:	bf00      	nop
     9f0:	20000a2c 	.word	0x20000a2c

000009f4 <gc_nbytes>:

size_t gc_nbytes(const void *ptr) {
     9f4:	4603      	mov	r3, r0
    GC_ENTER();
    if (VERIFY_PTR(ptr)) {
     9f6:	f010 000f 	ands.w	r0, r0, #15
     9fa:	d12a      	bne.n	a52 <gc_nbytes+0x5e>
     9fc:	4a16      	ldr	r2, [pc, #88]	; (a58 <gc_nbytes+0x64>)
     9fe:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
     a02:	428b      	cmp	r3, r1
     a04:	d315      	bcc.n	a32 <gc_nbytes+0x3e>
size_t gc_nbytes(const void *ptr) {
     a06:	b410      	push	{r4}
    if (VERIFY_PTR(ptr)) {
     a08:	f8d2 40a4 	ldr.w	r4, [r2, #164]	; 0xa4
     a0c:	42a3      	cmp	r3, r4
     a0e:	d20e      	bcs.n	a2e <gc_nbytes+0x3a>
        size_t block = BLOCK_FROM_PTR(ptr);
     a10:	1a5b      	subs	r3, r3, r1
        if (ATB_GET_KIND(block) == AT_HEAD) {
     a12:	f8d2 4098 	ldr.w	r4, [r2, #152]	; 0x98
     a16:	099a      	lsrs	r2, r3, #6
        size_t block = BLOCK_FROM_PTR(ptr);
     a18:	0919      	lsrs	r1, r3, #4
        if (ATB_GET_KIND(block) == AT_HEAD) {
     a1a:	5ca2      	ldrb	r2, [r4, r2]
     a1c:	f001 0303 	and.w	r3, r1, #3
     a20:	005b      	lsls	r3, r3, #1
     a22:	fa42 f303 	asr.w	r3, r2, r3
     a26:	f003 0303 	and.w	r3, r3, #3
     a2a:	2b01      	cmp	r3, #1
     a2c:	d002      	beq.n	a34 <gc_nbytes+0x40>
    }

    // invalid pointer
    GC_EXIT();
    return 0;
}
     a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
     a32:	4770      	bx	lr
                n_blocks += 1;
     a34:	3001      	adds	r0, #1
     a36:	180b      	adds	r3, r1, r0
            } while (ATB_GET_KIND(block + n_blocks) == AT_TAIL);
     a38:	089a      	lsrs	r2, r3, #2
     a3a:	f003 0303 	and.w	r3, r3, #3
     a3e:	5ca2      	ldrb	r2, [r4, r2]
     a40:	005b      	lsls	r3, r3, #1
     a42:	fa42 f303 	asr.w	r3, r2, r3
     a46:	f003 0303 	and.w	r3, r3, #3
     a4a:	2b02      	cmp	r3, #2
     a4c:	d0f2      	beq.n	a34 <gc_nbytes+0x40>
            return n_blocks * BYTES_PER_BLOCK;
     a4e:	0100      	lsls	r0, r0, #4
     a50:	e7ed      	b.n	a2e <gc_nbytes+0x3a>
    return 0;
     a52:	2000      	movs	r0, #0
     a54:	4770      	bx	lr
     a56:	bf00      	nop
     a58:	20000a2c 	.word	0x20000a2c

00000a5c <gc_realloc>:
    }
}

#else // Alternative gc_realloc impl

void *gc_realloc(void *ptr_in, size_t n_bytes, bool allow_move) {
     a5c:	460b      	mov	r3, r1
    // check for pure allocation
    if (ptr_in == NULL) {
     a5e:	4601      	mov	r1, r0
     a60:	2800      	cmp	r0, #0
     a62:	f000 80d4 	beq.w	c0e <gc_realloc+0x1b2>
void *gc_realloc(void *ptr_in, size_t n_bytes, bool allow_move) {
     a66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     a6a:	4619      	mov	r1, r3
     a6c:	4605      	mov	r5, r0
     a6e:	4691      	mov	r9, r2
        return gc_alloc(n_bytes, false);
    }

    // check for pure free
    if (n_bytes == 0) {
     a70:	2b00      	cmp	r3, #0
     a72:	d07c      	beq.n	b6e <gc_realloc+0x112>

    void *ptr = ptr_in;

    GC_ENTER();

    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     a74:	4e72      	ldr	r6, [pc, #456]	; (c40 <gc_realloc+0x1e4>)
     a76:	f8b6 31ac 	ldrh.w	r3, [r6, #428]	; 0x1ac
     a7a:	2b00      	cmp	r3, #0
     a7c:	f040 80aa 	bne.w	bd4 <gc_realloc+0x178>
        GC_EXIT();
        return NULL;
    }

    // get the GC block number corresponding to this pointer
    assert(VERIFY_PTR(ptr));
     a80:	f010 080f 	ands.w	r8, r0, #15
     a84:	f040 80cd 	bne.w	c22 <gc_realloc+0x1c6>
     a88:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
     a8c:	4285      	cmp	r5, r0
     a8e:	f0c0 80c8 	bcc.w	c22 <gc_realloc+0x1c6>
     a92:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
     a96:	429d      	cmp	r5, r3
     a98:	f080 80c3 	bcs.w	c22 <gc_realloc+0x1c6>
    size_t block = BLOCK_FROM_PTR(ptr);
     a9c:	1a28      	subs	r0, r5, r0
    assert(ATB_GET_KIND(block) == AT_HEAD);
     a9e:	0983      	lsrs	r3, r0, #6
     aa0:	f8d6 2098 	ldr.w	r2, [r6, #152]	; 0x98
    size_t block = BLOCK_FROM_PTR(ptr);
     aa4:	0900      	lsrs	r0, r0, #4
    assert(ATB_GET_KIND(block) == AT_HEAD);
     aa6:	f000 0703 	and.w	r7, r0, #3
     aaa:	5cd3      	ldrb	r3, [r2, r3]
     aac:	007f      	lsls	r7, r7, #1
     aae:	fa43 f707 	asr.w	r7, r3, r7
     ab2:	f007 0703 	and.w	r7, r7, #3
     ab6:	2f01      	cmp	r7, #1
     ab8:	f040 80ba 	bne.w	c30 <gc_realloc+0x1d4>
    // free blocks to satisfy the realloc.  Note that we need to compute the
    // total size of the existing memory chunk so we can correctly and
    // efficiently shrink it (see below for shrinking code).
    size_t n_free   = 0;
    size_t n_blocks = 1; // counting HEAD block
    size_t max_block = MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB;
     abc:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     ac0:	f100 0c01 	add.w	ip, r0, #1
    size_t max_block = MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB;
     ac4:	ea4f 0a83 	mov.w	sl, r3, lsl #2
    size_t new_blocks = (n_bytes + BYTES_PER_BLOCK - 1) / BYTES_PER_BLOCK;
     ac8:	f101 0e0f 	add.w	lr, r1, #15
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     acc:	45e2      	cmp	sl, ip
    size_t new_blocks = (n_bytes + BYTES_PER_BLOCK - 1) / BYTES_PER_BLOCK;
     ace:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     ad2:	d912      	bls.n	afa <gc_realloc+0x9e>
        byte block_type = ATB_GET_KIND(bl);
     ad4:	ea4f 049c 	mov.w	r4, ip, lsr #2
     ad8:	f00c 0303 	and.w	r3, ip, #3
     adc:	5d14      	ldrb	r4, [r2, r4]
     ade:	005b      	lsls	r3, r3, #1
     ae0:	fa44 f303 	asr.w	r3, r4, r3
     ae4:	f003 0303 	and.w	r3, r3, #3
        if (block_type == AT_TAIL) {
     ae8:	2b02      	cmp	r3, #2
     aea:	d049      	beq.n	b80 <gc_realloc+0x124>
            n_blocks++;
            continue;
        }
        if (block_type == AT_FREE) {
     aec:	b92b      	cbnz	r3, afa <gc_realloc+0x9e>
            n_free++;
     aee:	f108 0801 	add.w	r8, r8, #1
            if (n_blocks + n_free >= new_blocks) {
     af2:	eb08 0307 	add.w	r3, r8, r7
     af6:	459e      	cmp	lr, r3
     af8:	d843      	bhi.n	b82 <gc_realloc+0x126>
        }
        break;
    }

    // return original ptr if it already has the requested number of blocks
    if (new_blocks == n_blocks) {
     afa:	45be      	cmp	lr, r7
     afc:	d034      	beq.n	b68 <gc_realloc+0x10c>
        GC_EXIT();
        return ptr_in;
    }

    // check if we can shrink the allocated area
    if (new_blocks < n_blocks) {
     afe:	d345      	bcc.n	b8c <gc_realloc+0x130>

        return ptr_in;
    }

    // check if we can expand in place
    if (new_blocks <= n_blocks + n_free) {
     b00:	44b8      	add	r8, r7
     b02:	45c6      	cmp	lr, r8
     b04:	d869      	bhi.n	bda <gc_realloc+0x17e>
        // mark few more blocks as used tail
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     b06:	19c1      	adds	r1, r0, r7
     b08:	4470      	add	r0, lr
     b0a:	4288      	cmp	r0, r1
     b0c:	d924      	bls.n	b58 <gc_realloc+0xfc>
            assert(ATB_GET_KIND(bl) == AT_FREE);
     b0e:	088c      	lsrs	r4, r1, #2
     b10:	f001 0303 	and.w	r3, r1, #3
     b14:	f812 c004 	ldrb.w	ip, [r2, r4]
     b18:	005b      	lsls	r3, r3, #1
     b1a:	fa4c f803 	asr.w	r8, ip, r3
     b1e:	f018 0f03 	tst.w	r8, #3
     b22:	4414      	add	r4, r2
            ATB_FREE_TO_TAIL(bl);
     b24:	bf08      	it	eq
     b26:	2202      	moveq	r2, #2
            assert(ATB_GET_KIND(bl) == AT_FREE);
     b28:	d00e      	beq.n	b48 <gc_realloc+0xec>
     b2a:	e073      	b.n	c14 <gc_realloc+0x1b8>
     b2c:	088c      	lsrs	r4, r1, #2
     b2e:	f8d6 8098 	ldr.w	r8, [r6, #152]	; 0x98
     b32:	f001 0303 	and.w	r3, r1, #3
     b36:	f818 c004 	ldrb.w	ip, [r8, r4]
     b3a:	005b      	lsls	r3, r3, #1
     b3c:	fa4c f903 	asr.w	r9, ip, r3
     b40:	f019 0f03 	tst.w	r9, #3
     b44:	4444      	add	r4, r8
     b46:	d165      	bne.n	c14 <gc_realloc+0x1b8>
            ATB_FREE_TO_TAIL(bl);
     b48:	fa02 f303 	lsl.w	r3, r2, r3
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     b4c:	3101      	adds	r1, #1
            ATB_FREE_TO_TAIL(bl);
     b4e:	ea43 030c 	orr.w	r3, r3, ip
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     b52:	4288      	cmp	r0, r1
            ATB_FREE_TO_TAIL(bl);
     b54:	7023      	strb	r3, [r4, #0]
        for (size_t bl = block + n_blocks; bl < block + new_blocks; bl++) {
     b56:	d8e9      	bhi.n	b2c <gc_realloc+0xd0>

        GC_EXIT();

        #if MICROPY_GC_CONSERVATIVE_CLEAR
        // be conservative and zero out all the newly allocated blocks
        memset((byte*)ptr_in + n_blocks * BYTES_PER_BLOCK, 0, (new_blocks - n_blocks) * BYTES_PER_BLOCK);
     b58:	ebc7 020e 	rsb	r2, r7, lr
     b5c:	0112      	lsls	r2, r2, #4
     b5e:	eb05 1007 	add.w	r0, r5, r7, lsl #4
     b62:	2100      	movs	r1, #0
     b64:	f01b fa4a 	bl	1bffc <memset>

        #if EXTENSIVE_HEAP_PROFILING
        gc_dump_alloc_table();
        #endif

        return ptr_in;
     b68:	4628      	mov	r0, r5
     b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     b6e:	4b34      	ldr	r3, [pc, #208]	; (c40 <gc_realloc+0x1e4>)
     b70:	f8b3 51ac 	ldrh.w	r5, [r3, #428]	; 0x1ac
     b74:	bb75      	cbnz	r5, bd4 <gc_realloc+0x178>
     b76:	f7ff fc9b 	bl	4b0 <gc_free.part.0>
        return NULL;
     b7a:	4628      	mov	r0, r5
     b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            n_blocks++;
     b80:	3701      	adds	r7, #1
    for (size_t bl = block + n_blocks; bl < max_block; bl++) {
     b82:	f10c 0c01 	add.w	ip, ip, #1
     b86:	45e2      	cmp	sl, ip
     b88:	d1a4      	bne.n	ad4 <gc_realloc+0x78>
     b8a:	e7b6      	b.n	afa <gc_realloc+0x9e>
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     b8c:	4486      	add	lr, r0
     b8e:	4671      	mov	r1, lr
     b90:	4438      	add	r0, r7
            ATB_ANY_TO_FREE(bl);
     b92:	f04f 0803 	mov.w	r8, #3
     b96:	e001      	b.n	b9c <gc_realloc+0x140>
     b98:	f8d6 2098 	ldr.w	r2, [r6, #152]	; 0x98
     b9c:	ea4f 0c91 	mov.w	ip, r1, lsr #2
     ba0:	f001 0303 	and.w	r3, r1, #3
     ba4:	f812 400c 	ldrb.w	r4, [r2, ip]
     ba8:	005b      	lsls	r3, r3, #1
     baa:	fa08 f303 	lsl.w	r3, r8, r3
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     bae:	3101      	adds	r1, #1
            ATB_ANY_TO_FREE(bl);
     bb0:	ea24 0303 	bic.w	r3, r4, r3
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     bb4:	4281      	cmp	r1, r0
            ATB_ANY_TO_FREE(bl);
     bb6:	f802 300c 	strb.w	r3, [r2, ip]
        for (size_t bl = block + new_blocks, count = n_blocks - new_blocks; count > 0; bl++, count--) {
     bba:	d1ed      	bne.n	b98 <gc_realloc+0x13c>
        if ((block + new_blocks) / BLOCKS_PER_ATB < MP_STATE_MEM(gc_last_free_atb_index)) {
     bbc:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
     bc0:	491f      	ldr	r1, [pc, #124]	; (c40 <gc_realloc+0x1e4>)
     bc2:	ea4f 029e 	mov.w	r2, lr, lsr #2
     bc6:	429a      	cmp	r2, r3
     bc8:	d2ce      	bcs.n	b68 <gc_realloc+0x10c>
            MP_STATE_MEM(gc_last_free_atb_index) = (block + new_blocks) / BLOCKS_PER_ATB;
     bca:	f8c1 21b0 	str.w	r2, [r1, #432]	; 0x1b0
     bce:	4628      	mov	r0, r5
     bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return NULL;
     bd4:	2000      	movs	r0, #0
     bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bool ftb_state = false;
    #endif

    GC_EXIT();

    if (!allow_move) {
     bda:	f1b9 0f00 	cmp.w	r9, #0
     bde:	d0f9      	beq.n	bd4 <gc_realloc+0x178>
        // not allowed to move memory block so return failure
        return NULL;
    }

    // can't resize inplace; try to find a new contiguous chain
    void *ptr_out = gc_alloc(n_bytes, ftb_state);
     be0:	4608      	mov	r0, r1
     be2:	2100      	movs	r1, #0
     be4:	f7ff fe5e 	bl	8a4 <gc_alloc>

    // check that the alloc succeeded
    if (ptr_out == NULL) {
     be8:	4604      	mov	r4, r0
     bea:	2800      	cmp	r0, #0
     bec:	d0f2      	beq.n	bd4 <gc_realloc+0x178>
        return NULL;
    }

    DEBUG_printf("gc_realloc(%p -> %p)\n", ptr_in, ptr_out);
    memcpy(ptr_out, ptr_in, n_blocks * BYTES_PER_BLOCK);
     bee:	013a      	lsls	r2, r7, #4
     bf0:	4629      	mov	r1, r5
     bf2:	f01b f967 	bl	1bec4 <memcpy>
    if (MP_STATE_MEM(gc_lock_depth) > 0) {
     bf6:	f8b6 31ac 	ldrh.w	r3, [r6, #428]	; 0x1ac
     bfa:	b92b      	cbnz	r3, c08 <gc_realloc+0x1ac>
     bfc:	4628      	mov	r0, r5
     bfe:	f7ff fc57 	bl	4b0 <gc_free.part.0>
     c02:	4620      	mov	r0, r4
     c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c08:	4620      	mov	r0, r4
    gc_free(ptr_in);
    return ptr_out;
}
     c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return gc_alloc(n_bytes, false);
     c0e:	4618      	mov	r0, r3
     c10:	f7ff be48 	b.w	8a4 <gc_alloc>
            assert(ATB_GET_KIND(bl) == AT_FREE);
     c14:	4b0b      	ldr	r3, [pc, #44]	; (c44 <gc_realloc+0x1e8>)
     c16:	4a0c      	ldr	r2, [pc, #48]	; (c48 <gc_realloc+0x1ec>)
     c18:	480c      	ldr	r0, [pc, #48]	; (c4c <gc_realloc+0x1f0>)
     c1a:	f240 21e2 	movw	r1, #738	; 0x2e2
     c1e:	f01a fba5 	bl	1b36c <__assert_func>
    assert(VERIFY_PTR(ptr));
     c22:	4b0b      	ldr	r3, [pc, #44]	; (c50 <gc_realloc+0x1f4>)
     c24:	4a08      	ldr	r2, [pc, #32]	; (c48 <gc_realloc+0x1ec>)
     c26:	4809      	ldr	r0, [pc, #36]	; (c4c <gc_realloc+0x1f0>)
     c28:	f240 21a2 	movw	r1, #674	; 0x2a2
     c2c:	f01a fb9e 	bl	1b36c <__assert_func>
    assert(ATB_GET_KIND(block) == AT_HEAD);
     c30:	4b08      	ldr	r3, [pc, #32]	; (c54 <gc_realloc+0x1f8>)
     c32:	4a05      	ldr	r2, [pc, #20]	; (c48 <gc_realloc+0x1ec>)
     c34:	4805      	ldr	r0, [pc, #20]	; (c4c <gc_realloc+0x1f0>)
     c36:	f44f 7129 	mov.w	r1, #676	; 0x2a4
     c3a:	f01a fb97 	bl	1b36c <__assert_func>
     c3e:	bf00      	nop
     c40:	20000a2c 	.word	0x20000a2c
     c44:	0001cac8 	.word	0x0001cac8
     c48:	0001ca7c 	.word	0x0001ca7c
     c4c:	0001ca98 	.word	0x0001ca98
     c50:	0001ca88 	.word	0x0001ca88
     c54:	0001caa8 	.word	0x0001caa8

00000c58 <gc_dump_info>:
#endif // Alternative gc_realloc impl

void gc_dump_info(void) {
     c58:	b510      	push	{r4, lr}
     c5a:	b08a      	sub	sp, #40	; 0x28
    gc_info_t info;
    gc_info(&info);
     c5c:	a803      	add	r0, sp, #12
    mp_printf(&mp_plat_print, "GC: total: %u, used: %u, free: %u\n",
     c5e:	4c0b      	ldr	r4, [pc, #44]	; (c8c <gc_dump_info+0x34>)
    gc_info(&info);
     c60:	f7ff fda2 	bl	7a8 <gc_info>
    mp_printf(&mp_plat_print, "GC: total: %u, used: %u, free: %u\n",
     c64:	9905      	ldr	r1, [sp, #20]
     c66:	9b04      	ldr	r3, [sp, #16]
     c68:	9a03      	ldr	r2, [sp, #12]
     c6a:	9100      	str	r1, [sp, #0]
     c6c:	4620      	mov	r0, r4
     c6e:	4908      	ldr	r1, [pc, #32]	; (c90 <gc_dump_info+0x38>)
     c70:	f001 f918 	bl	1ea4 <mp_printf>
        (uint)info.total, (uint)info.used, (uint)info.free);
    mp_printf(&mp_plat_print, " No. of 1-blocks: %u, 2-blocks: %u, max blk sz: %u, max free sz: %u\n",
     c74:	a806      	add	r0, sp, #24
     c76:	c80d      	ldmia	r0, {r0, r2, r3}
     c78:	9909      	ldr	r1, [sp, #36]	; 0x24
     c7a:	9001      	str	r0, [sp, #4]
     c7c:	9100      	str	r1, [sp, #0]
     c7e:	4620      	mov	r0, r4
     c80:	4904      	ldr	r1, [pc, #16]	; (c94 <gc_dump_info+0x3c>)
     c82:	f001 f90f 	bl	1ea4 <mp_printf>
           (uint)info.num_1block, (uint)info.num_2block, (uint)info.max_block, (uint)info.max_free);
}
     c86:	b00a      	add	sp, #40	; 0x28
     c88:	bd10      	pop	{r4, pc}
     c8a:	bf00      	nop
     c8c:	0001d82c 	.word	0x0001d82c
     c90:	0001cae4 	.word	0x0001cae4
     c94:	0001cb08 	.word	0x0001cb08

00000c98 <gc_dump_alloc_table>:

void gc_dump_alloc_table(void) {
     c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    GC_ENTER();
    static const size_t DUMP_BYTES_PER_LINE = 64;
    #if !EXTENSIVE_HEAP_PROFILING
    // When comparing heap output we don't want to print the starting
    // pointer of the heap because it changes from run to run.
    mp_printf(&mp_plat_print, "GC memory layout; from %p:", MP_STATE_MEM(gc_pool_start));
     c9c:	4f4e      	ldr	r7, [pc, #312]	; (dd8 <gc_dump_alloc_table+0x140>)
     c9e:	494f      	ldr	r1, [pc, #316]	; (ddc <gc_dump_alloc_table+0x144>)
     ca0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
     ca4:	484e      	ldr	r0, [pc, #312]	; (de0 <gc_dump_alloc_table+0x148>)
     ca6:	f001 f8fd 	bl	1ea4 <mp_printf>
    #endif
    for (size_t bl = 0; bl < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; bl++) {
     caa:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
     cae:	0089      	lsls	r1, r1, #2
     cb0:	bf18      	it	ne
     cb2:	2500      	movne	r5, #0
     cb4:	d11f      	bne.n	cf6 <gc_dump_alloc_table+0x5e>
     cb6:	e078      	b.n	daa <gc_dump_alloc_table+0x112>
     cb8:	f005 0603 	and.w	r6, r5, #3
     cbc:	0076      	lsls	r6, r6, #1
     cbe:	ea4f 0895 	mov.w	r8, r5, lsr #2
            // (the cast to uint32_t is for 16-bit ports)
            //mp_printf(&mp_plat_print, "\n%05x: ", (uint)(PTR_FROM_BLOCK(bl) & (uint32_t)0xfffff));
            mp_printf(&mp_plat_print, "\n%05x: ", (uint)((bl * BYTES_PER_BLOCK) & (uint32_t)0xfffff));
        }
        int c = ' ';
        switch (ATB_GET_KIND(bl)) {
     cc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
     cc6:	4a44      	ldr	r2, [pc, #272]	; (dd8 <gc_dump_alloc_table+0x140>)
     cc8:	f813 3008 	ldrb.w	r3, [r3, r8]
     ccc:	fa43 f606 	asr.w	r6, r3, r6
     cd0:	f006 0603 	and.w	r6, r6, #3
     cd4:	2e02      	cmp	r6, #2
     cd6:	d066      	beq.n	da6 <gc_dump_alloc_table+0x10e>
     cd8:	2e03      	cmp	r6, #3
     cda:	d062      	beq.n	da2 <gc_dump_alloc_table+0x10a>
     cdc:	2e01      	cmp	r6, #1
     cde:	d044      	beq.n	d6a <gc_dump_alloc_table+0xd2>
            case AT_FREE: c = '.'; break;
     ce0:	222e      	movs	r2, #46	; 0x2e
                break;
            }
            case AT_TAIL: c = '='; break;
            case AT_MARK: c = 'm'; break;
        }
        mp_printf(&mp_plat_print, "%c", c);
     ce2:	4940      	ldr	r1, [pc, #256]	; (de4 <gc_dump_alloc_table+0x14c>)
     ce4:	483e      	ldr	r0, [pc, #248]	; (de0 <gc_dump_alloc_table+0x148>)
     ce6:	f001 f8dd 	bl	1ea4 <mp_printf>
    for (size_t bl = 0; bl < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB; bl++) {
     cea:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
     cee:	3501      	adds	r5, #1
     cf0:	0089      	lsls	r1, r1, #2
     cf2:	42a9      	cmp	r1, r5
     cf4:	d959      	bls.n	daa <gc_dump_alloc_table+0x112>
        if (bl % DUMP_BYTES_PER_LINE == 0) {
     cf6:	06a8      	lsls	r0, r5, #26
     cf8:	d1de      	bne.n	cb8 <gc_dump_alloc_table+0x20>
                while (bl2 < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB && ATB_GET_KIND(bl2) == AT_FREE) {
     cfa:	428d      	cmp	r5, r1
     cfc:	d261      	bcs.n	dc2 <gc_dump_alloc_table+0x12a>
     cfe:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
     d02:	ea4f 0895 	mov.w	r8, r5, lsr #2
     d06:	f005 0603 	and.w	r6, r5, #3
     d0a:	f810 3008 	ldrb.w	r3, [r0, r8]
     d0e:	0076      	lsls	r6, r6, #1
     d10:	4133      	asrs	r3, r6
     d12:	079a      	lsls	r2, r3, #30
     d14:	d121      	bne.n	d5a <gc_dump_alloc_table+0xc2>
     d16:	462c      	mov	r4, r5
     d18:	e004      	b.n	d24 <gc_dump_alloc_table+0x8c>
     d1a:	5c82      	ldrb	r2, [r0, r2]
     d1c:	fa42 f303 	asr.w	r3, r2, r3
     d20:	079b      	lsls	r3, r3, #30
     d22:	d108      	bne.n	d36 <gc_dump_alloc_table+0x9e>
                    bl2++;
     d24:	3401      	adds	r4, #1
                while (bl2 < MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB && ATB_GET_KIND(bl2) == AT_FREE) {
     d26:	f004 0303 	and.w	r3, r4, #3
     d2a:	428c      	cmp	r4, r1
     d2c:	ea4f 0294 	mov.w	r2, r4, lsr #2
     d30:	ea4f 0343 	mov.w	r3, r3, lsl #1
     d34:	d3f1      	bcc.n	d1a <gc_dump_alloc_table+0x82>
                if (bl2 - bl >= 2 * DUMP_BYTES_PER_LINE) {
     d36:	1b62      	subs	r2, r4, r5
     d38:	2a7f      	cmp	r2, #127	; 0x7f
     d3a:	d90e      	bls.n	d5a <gc_dump_alloc_table+0xc2>
                    mp_printf(&mp_plat_print, "\n       (%u lines all free)", (uint)(bl2 - bl) / DUMP_BYTES_PER_LINE);
     d3c:	0992      	lsrs	r2, r2, #6
     d3e:	492a      	ldr	r1, [pc, #168]	; (de8 <gc_dump_alloc_table+0x150>)
     d40:	4827      	ldr	r0, [pc, #156]	; (de0 <gc_dump_alloc_table+0x148>)
     d42:	f001 f8af 	bl	1ea4 <mp_printf>
                    if (bl >= MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB) {
     d46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
                    bl = bl2 & (~(DUMP_BYTES_PER_LINE - 1));
     d4a:	f024 053f 	bic.w	r5, r4, #63	; 0x3f
                    if (bl >= MP_STATE_MEM(gc_alloc_table_byte_len) * BLOCKS_PER_ATB) {
     d4e:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
     d52:	d22a      	bcs.n	daa <gc_dump_alloc_table+0x112>
     d54:	ea4f 0895 	mov.w	r8, r5, lsr #2
     d58:	2600      	movs	r6, #0
            mp_printf(&mp_plat_print, "\n%05x: ", (uint)((bl * BYTES_PER_BLOCK) & (uint32_t)0xfffff));
     d5a:	4a24      	ldr	r2, [pc, #144]	; (dec <gc_dump_alloc_table+0x154>)
     d5c:	4924      	ldr	r1, [pc, #144]	; (df0 <gc_dump_alloc_table+0x158>)
     d5e:	4820      	ldr	r0, [pc, #128]	; (de0 <gc_dump_alloc_table+0x148>)
     d60:	012b      	lsls	r3, r5, #4
     d62:	401a      	ands	r2, r3
     d64:	f001 f89e 	bl	1ea4 <mp_printf>
     d68:	e7ab      	b.n	cc2 <gc_dump_alloc_table+0x2a>
                if (*ptr == &mp_type_tuple) { c = 'T'; }
     d6a:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
     d6e:	4a21      	ldr	r2, [pc, #132]	; (df4 <gc_dump_alloc_table+0x15c>)
     d70:	012b      	lsls	r3, r5, #4
     d72:	58cb      	ldr	r3, [r1, r3]
     d74:	4293      	cmp	r3, r2
     d76:	d020      	beq.n	dba <gc_dump_alloc_table+0x122>
                else if (*ptr == &mp_type_list) { c = 'L'; }
     d78:	4a1f      	ldr	r2, [pc, #124]	; (df8 <gc_dump_alloc_table+0x160>)
     d7a:	4293      	cmp	r3, r2
     d7c:	d01f      	beq.n	dbe <gc_dump_alloc_table+0x126>
                else if (*ptr == &mp_type_dict) { c = 'D'; }
     d7e:	4a1f      	ldr	r2, [pc, #124]	; (dfc <gc_dump_alloc_table+0x164>)
     d80:	4293      	cmp	r3, r2
     d82:	d024      	beq.n	dce <gc_dump_alloc_table+0x136>
                else if (*ptr == &mp_type_str || *ptr == &mp_type_bytes) { c = 'S'; }
     d84:	4a1e      	ldr	r2, [pc, #120]	; (e00 <gc_dump_alloc_table+0x168>)
     d86:	4293      	cmp	r3, r2
     d88:	d015      	beq.n	db6 <gc_dump_alloc_table+0x11e>
     d8a:	4a1e      	ldr	r2, [pc, #120]	; (e04 <gc_dump_alloc_table+0x16c>)
     d8c:	4293      	cmp	r3, r2
     d8e:	d012      	beq.n	db6 <gc_dump_alloc_table+0x11e>
                else if (*ptr == &mp_type_fun_bc) { c = 'B'; }
     d90:	4a1d      	ldr	r2, [pc, #116]	; (e08 <gc_dump_alloc_table+0x170>)
     d92:	4293      	cmp	r3, r2
     d94:	d01d      	beq.n	dd2 <gc_dump_alloc_table+0x13a>
                else if (*ptr == &mp_type_module) { c = 'M'; }
     d96:	4a1d      	ldr	r2, [pc, #116]	; (e0c <gc_dump_alloc_table+0x174>)
     d98:	4293      	cmp	r3, r2
     d9a:	bf14      	ite	ne
     d9c:	2268      	movne	r2, #104	; 0x68
     d9e:	224d      	moveq	r2, #77	; 0x4d
     da0:	e79f      	b.n	ce2 <gc_dump_alloc_table+0x4a>
            case AT_MARK: c = 'm'; break;
     da2:	226d      	movs	r2, #109	; 0x6d
     da4:	e79d      	b.n	ce2 <gc_dump_alloc_table+0x4a>
            case AT_TAIL: c = '='; break;
     da6:	223d      	movs	r2, #61	; 0x3d
     da8:	e79b      	b.n	ce2 <gc_dump_alloc_table+0x4a>
    }
    mp_print_str(&mp_plat_print, "\n");
     daa:	4919      	ldr	r1, [pc, #100]	; (e10 <gc_dump_alloc_table+0x178>)
     dac:	480c      	ldr	r0, [pc, #48]	; (de0 <gc_dump_alloc_table+0x148>)
    GC_EXIT();
}
     dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    mp_print_str(&mp_plat_print, "\n");
     db2:	f000 bd63 	b.w	187c <mp_print_str>
                else if (*ptr == &mp_type_str || *ptr == &mp_type_bytes) { c = 'S'; }
     db6:	2253      	movs	r2, #83	; 0x53
     db8:	e793      	b.n	ce2 <gc_dump_alloc_table+0x4a>
                if (*ptr == &mp_type_tuple) { c = 'T'; }
     dba:	2254      	movs	r2, #84	; 0x54
     dbc:	e791      	b.n	ce2 <gc_dump_alloc_table+0x4a>
                else if (*ptr == &mp_type_list) { c = 'L'; }
     dbe:	224c      	movs	r2, #76	; 0x4c
     dc0:	e78f      	b.n	ce2 <gc_dump_alloc_table+0x4a>
     dc2:	f005 0603 	and.w	r6, r5, #3
     dc6:	0076      	lsls	r6, r6, #1
     dc8:	ea4f 0895 	mov.w	r8, r5, lsr #2
     dcc:	e7c5      	b.n	d5a <gc_dump_alloc_table+0xc2>
                else if (*ptr == &mp_type_dict) { c = 'D'; }
     dce:	2244      	movs	r2, #68	; 0x44
     dd0:	e787      	b.n	ce2 <gc_dump_alloc_table+0x4a>
                else if (*ptr == &mp_type_fun_bc) { c = 'B'; }
     dd2:	2242      	movs	r2, #66	; 0x42
     dd4:	e785      	b.n	ce2 <gc_dump_alloc_table+0x4a>
     dd6:	bf00      	nop
     dd8:	20000a2c 	.word	0x20000a2c
     ddc:	0001cb50 	.word	0x0001cb50
     de0:	0001d82c 	.word	0x0001d82c
     de4:	0001cb94 	.word	0x0001cb94
     de8:	0001cb70 	.word	0x0001cb70
     dec:	000ffff0 	.word	0x000ffff0
     df0:	0001cb8c 	.word	0x0001cb8c
     df4:	00021e68 	.word	0x00021e68
     df8:	000211fc 	.word	0x000211fc
     dfc:	000200e8 	.word	0x000200e8
     e00:	00021be4 	.word	0x00021be4
     e04:	00021c20 	.word	0x00021c20
     e08:	00020b58 	.word	0x00020b58
     e0c:	000213b8 	.word	0x000213b8
     e10:	0001cb6c 	.word	0x0001cb6c

00000e14 <qstr_compute_hash>:
#define QSTR_ENTER()
#define QSTR_EXIT()
#endif

// this must match the equivalent function in makeqstrdata.py
mp_uint_t qstr_compute_hash(const byte *data, size_t len) {
     e14:	b480      	push	{r7}
     e16:	b085      	sub	sp, #20
     e18:	af00      	add	r7, sp, #0
     e1a:	6078      	str	r0, [r7, #4]
     e1c:	6039      	str	r1, [r7, #0]
    // djb2 algorithm; see http://www.cse.yorku.ca/~oz/hash.html
    mp_uint_t hash = 5381;
     e1e:	f241 5305 	movw	r3, #5381	; 0x1505
     e22:	60fb      	str	r3, [r7, #12]
    for (const byte *top = data + len; data < top; data++) {
     e24:	687a      	ldr	r2, [r7, #4]
     e26:	683b      	ldr	r3, [r7, #0]
     e28:	4413      	add	r3, r2
     e2a:	60bb      	str	r3, [r7, #8]
     e2c:	e00a      	b.n	e44 <qstr_compute_hash+0x30>
        hash = ((hash << 5) + hash) ^ (*data); // hash * 33 ^ data
     e2e:	68fb      	ldr	r3, [r7, #12]
     e30:	015a      	lsls	r2, r3, #5
     e32:	68fb      	ldr	r3, [r7, #12]
     e34:	4413      	add	r3, r2
     e36:	687a      	ldr	r2, [r7, #4]
     e38:	7812      	ldrb	r2, [r2, #0]
     e3a:	4053      	eors	r3, r2
     e3c:	60fb      	str	r3, [r7, #12]
    for (const byte *top = data + len; data < top; data++) {
     e3e:	687b      	ldr	r3, [r7, #4]
     e40:	3301      	adds	r3, #1
     e42:	607b      	str	r3, [r7, #4]
     e44:	687a      	ldr	r2, [r7, #4]
     e46:	68bb      	ldr	r3, [r7, #8]
     e48:	429a      	cmp	r2, r3
     e4a:	d3f0      	bcc.n	e2e <qstr_compute_hash+0x1a>
    }
    hash &= Q_HASH_MASK;
     e4c:	68fb      	ldr	r3, [r7, #12]
     e4e:	b2db      	uxtb	r3, r3
     e50:	60fb      	str	r3, [r7, #12]
    // Make sure that valid hash is never zero, zero means "hash not computed"
    if (hash == 0) {
     e52:	68fb      	ldr	r3, [r7, #12]
     e54:	2b00      	cmp	r3, #0
     e56:	d102      	bne.n	e5e <qstr_compute_hash+0x4a>
        hash++;
     e58:	68fb      	ldr	r3, [r7, #12]
     e5a:	3301      	adds	r3, #1
     e5c:	60fb      	str	r3, [r7, #12]
    }
    return hash;
     e5e:	68fb      	ldr	r3, [r7, #12]
}
     e60:	4618      	mov	r0, r3
     e62:	3714      	adds	r7, #20
     e64:	46bd      	mov	sp, r7
     e66:	f85d 7b04 	ldr.w	r7, [sp], #4
     e6a:	4770      	bx	lr

00000e6c <qstr_init>:
#define CONST_POOL MICROPY_QSTR_EXTRA_POOL
#else
#define CONST_POOL mp_qstr_const_pool
#endif

void qstr_init(void) {
     e6c:	b480      	push	{r7}
     e6e:	af00      	add	r7, sp, #0
    MP_STATE_VM(last_pool) = (qstr_pool_t*)&CONST_POOL; // we won't modify the const_pool since it has no allocated room left
     e70:	4b05      	ldr	r3, [pc, #20]	; (e88 <qstr_init+0x1c>)
     e72:	4a06      	ldr	r2, [pc, #24]	; (e8c <qstr_init+0x20>)
     e74:	611a      	str	r2, [r3, #16]
    MP_STATE_VM(qstr_last_chunk) = NULL;
     e76:	4b04      	ldr	r3, [pc, #16]	; (e88 <qstr_init+0x1c>)
     e78:	2200      	movs	r2, #0
     e7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    #if MICROPY_PY_THREAD
    mp_thread_mutex_init(&MP_STATE_VM(qstr_mutex));
    #endif
}
     e7e:	bf00      	nop
     e80:	46bd      	mov	sp, r7
     e82:	f85d 7b04 	ldr.w	r7, [sp], #4
     e86:	4770      	bx	lr
     e88:	20000a2c 	.word	0x20000a2c
     e8c:	00022f04 	.word	0x00022f04

00000e90 <find_qstr>:

STATIC const byte *find_qstr(qstr q) {
     e90:	b480      	push	{r7}
     e92:	b085      	sub	sp, #20
     e94:	af00      	add	r7, sp, #0
     e96:	6078      	str	r0, [r7, #4]
    // search pool for this qstr
    // total_prev_len==0 in the final pool, so the loop will always terminate
    qstr_pool_t *pool = MP_STATE_VM(last_pool);
     e98:	4b0c      	ldr	r3, [pc, #48]	; (ecc <find_qstr+0x3c>)
     e9a:	691b      	ldr	r3, [r3, #16]
     e9c:	60fb      	str	r3, [r7, #12]
    while (q < pool->total_prev_len) {
     e9e:	e002      	b.n	ea6 <find_qstr+0x16>
        pool = pool->prev;
     ea0:	68fb      	ldr	r3, [r7, #12]
     ea2:	681b      	ldr	r3, [r3, #0]
     ea4:	60fb      	str	r3, [r7, #12]
    while (q < pool->total_prev_len) {
     ea6:	68fb      	ldr	r3, [r7, #12]
     ea8:	685a      	ldr	r2, [r3, #4]
     eaa:	687b      	ldr	r3, [r7, #4]
     eac:	429a      	cmp	r2, r3
     eae:	d8f7      	bhi.n	ea0 <find_qstr+0x10>
    }
    return pool->qstrs[q - pool->total_prev_len];
     eb0:	68fb      	ldr	r3, [r7, #12]
     eb2:	685b      	ldr	r3, [r3, #4]
     eb4:	687a      	ldr	r2, [r7, #4]
     eb6:	1ad2      	subs	r2, r2, r3
     eb8:	68fb      	ldr	r3, [r7, #12]
     eba:	3204      	adds	r2, #4
     ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
     ec0:	4618      	mov	r0, r3
     ec2:	3714      	adds	r7, #20
     ec4:	46bd      	mov	sp, r7
     ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
     eca:	4770      	bx	lr
     ecc:	20000a2c 	.word	0x20000a2c

00000ed0 <qstr_add>:

// qstr_mutex must be taken while in this function
STATIC qstr qstr_add(const byte *q_ptr) {
     ed0:	b580      	push	{r7, lr}
     ed2:	b084      	sub	sp, #16
     ed4:	af00      	add	r7, sp, #0
     ed6:	6078      	str	r0, [r7, #4]
    DEBUG_printf("QSTR: add hash=%d len=%d data=%.*s\n", Q_GET_HASH(q_ptr), Q_GET_LENGTH(q_ptr), Q_GET_LENGTH(q_ptr), Q_GET_DATA(q_ptr));

    // make sure we have room in the pool for a new qstr
    if (MP_STATE_VM(last_pool)->len >= MP_STATE_VM(last_pool)->alloc) {
     ed8:	4b25      	ldr	r3, [pc, #148]	; (f70 <qstr_add+0xa0>)
     eda:	691b      	ldr	r3, [r3, #16]
     edc:	68da      	ldr	r2, [r3, #12]
     ede:	4b24      	ldr	r3, [pc, #144]	; (f70 <qstr_add+0xa0>)
     ee0:	691b      	ldr	r3, [r3, #16]
     ee2:	689b      	ldr	r3, [r3, #8]
     ee4:	429a      	cmp	r2, r3
     ee6:	d32b      	bcc.n	f40 <qstr_add+0x70>
        qstr_pool_t *pool = m_new_obj_var_maybe(qstr_pool_t, const char*, MP_STATE_VM(last_pool)->alloc * 2);
     ee8:	4b21      	ldr	r3, [pc, #132]	; (f70 <qstr_add+0xa0>)
     eea:	691b      	ldr	r3, [r3, #16]
     eec:	689b      	ldr	r3, [r3, #8]
     eee:	3302      	adds	r3, #2
     ef0:	00db      	lsls	r3, r3, #3
     ef2:	4618      	mov	r0, r3
     ef4:	f7ff fa2a 	bl	34c <m_malloc_maybe>
     ef8:	60f8      	str	r0, [r7, #12]
        if (pool == NULL) {
     efa:	68fb      	ldr	r3, [r7, #12]
     efc:	2b00      	cmp	r3, #0
     efe:	d106      	bne.n	f0e <qstr_add+0x3e>
            QSTR_EXIT();
            m_malloc_fail(MP_STATE_VM(last_pool)->alloc * 2);
     f00:	4b1b      	ldr	r3, [pc, #108]	; (f70 <qstr_add+0xa0>)
     f02:	691b      	ldr	r3, [r3, #16]
     f04:	689b      	ldr	r3, [r3, #8]
     f06:	005b      	lsls	r3, r3, #1
     f08:	4618      	mov	r0, r3
     f0a:	f00c f82b 	bl	cf64 <m_malloc_fail>
        }
        pool->prev = MP_STATE_VM(last_pool);
     f0e:	4b18      	ldr	r3, [pc, #96]	; (f70 <qstr_add+0xa0>)
     f10:	691a      	ldr	r2, [r3, #16]
     f12:	68fb      	ldr	r3, [r7, #12]
     f14:	601a      	str	r2, [r3, #0]
        pool->total_prev_len = MP_STATE_VM(last_pool)->total_prev_len + MP_STATE_VM(last_pool)->len;
     f16:	4b16      	ldr	r3, [pc, #88]	; (f70 <qstr_add+0xa0>)
     f18:	691b      	ldr	r3, [r3, #16]
     f1a:	685a      	ldr	r2, [r3, #4]
     f1c:	4b14      	ldr	r3, [pc, #80]	; (f70 <qstr_add+0xa0>)
     f1e:	691b      	ldr	r3, [r3, #16]
     f20:	68db      	ldr	r3, [r3, #12]
     f22:	441a      	add	r2, r3
     f24:	68fb      	ldr	r3, [r7, #12]
     f26:	605a      	str	r2, [r3, #4]
        pool->alloc = MP_STATE_VM(last_pool)->alloc * 2;
     f28:	4b11      	ldr	r3, [pc, #68]	; (f70 <qstr_add+0xa0>)
     f2a:	691b      	ldr	r3, [r3, #16]
     f2c:	689b      	ldr	r3, [r3, #8]
     f2e:	005a      	lsls	r2, r3, #1
     f30:	68fb      	ldr	r3, [r7, #12]
     f32:	609a      	str	r2, [r3, #8]
        pool->len = 0;
     f34:	68fb      	ldr	r3, [r7, #12]
     f36:	2200      	movs	r2, #0
     f38:	60da      	str	r2, [r3, #12]
        MP_STATE_VM(last_pool) = pool;
     f3a:	4a0d      	ldr	r2, [pc, #52]	; (f70 <qstr_add+0xa0>)
     f3c:	68fb      	ldr	r3, [r7, #12]
     f3e:	6113      	str	r3, [r2, #16]
        DEBUG_printf("QSTR: allocate new pool of size %d\n", MP_STATE_VM(last_pool)->alloc);
    }

    // add the new qstr
    MP_STATE_VM(last_pool)->qstrs[MP_STATE_VM(last_pool)->len++] = q_ptr;
     f40:	4b0b      	ldr	r3, [pc, #44]	; (f70 <qstr_add+0xa0>)
     f42:	6919      	ldr	r1, [r3, #16]
     f44:	4b0a      	ldr	r3, [pc, #40]	; (f70 <qstr_add+0xa0>)
     f46:	691a      	ldr	r2, [r3, #16]
     f48:	68d3      	ldr	r3, [r2, #12]
     f4a:	1c58      	adds	r0, r3, #1
     f4c:	60d0      	str	r0, [r2, #12]
     f4e:	3304      	adds	r3, #4
     f50:	687a      	ldr	r2, [r7, #4]
     f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // return id for the newly-added qstr
    return MP_STATE_VM(last_pool)->total_prev_len + MP_STATE_VM(last_pool)->len - 1;
     f56:	4b06      	ldr	r3, [pc, #24]	; (f70 <qstr_add+0xa0>)
     f58:	691b      	ldr	r3, [r3, #16]
     f5a:	685a      	ldr	r2, [r3, #4]
     f5c:	4b04      	ldr	r3, [pc, #16]	; (f70 <qstr_add+0xa0>)
     f5e:	691b      	ldr	r3, [r3, #16]
     f60:	68db      	ldr	r3, [r3, #12]
     f62:	4413      	add	r3, r2
     f64:	3b01      	subs	r3, #1
}
     f66:	4618      	mov	r0, r3
     f68:	3710      	adds	r7, #16
     f6a:	46bd      	mov	sp, r7
     f6c:	bd80      	pop	{r7, pc}
     f6e:	bf00      	nop
     f70:	20000a2c 	.word	0x20000a2c

00000f74 <qstr_find_strn>:

qstr qstr_find_strn(const char *str, size_t str_len) {
     f74:	b580      	push	{r7, lr}
     f76:	b086      	sub	sp, #24
     f78:	af00      	add	r7, sp, #0
     f7a:	6078      	str	r0, [r7, #4]
     f7c:	6039      	str	r1, [r7, #0]
    // work out hash of str
    mp_uint_t str_hash = qstr_compute_hash((const byte*)str, str_len);
     f7e:	6839      	ldr	r1, [r7, #0]
     f80:	6878      	ldr	r0, [r7, #4]
     f82:	f7ff ff47 	bl	e14 <qstr_compute_hash>
     f86:	60f8      	str	r0, [r7, #12]

    // search pools for the data
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL; pool = pool->prev) {
     f88:	4b22      	ldr	r3, [pc, #136]	; (1014 <qstr_find_strn+0xa0>)
     f8a:	691b      	ldr	r3, [r3, #16]
     f8c:	617b      	str	r3, [r7, #20]
     f8e:	e038      	b.n	1002 <qstr_find_strn+0x8e>
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
     f90:	697b      	ldr	r3, [r7, #20]
     f92:	3310      	adds	r3, #16
     f94:	613b      	str	r3, [r7, #16]
     f96:	697b      	ldr	r3, [r7, #20]
     f98:	f103 0210 	add.w	r2, r3, #16
     f9c:	697b      	ldr	r3, [r7, #20]
     f9e:	68db      	ldr	r3, [r3, #12]
     fa0:	009b      	lsls	r3, r3, #2
     fa2:	4413      	add	r3, r2
     fa4:	60bb      	str	r3, [r7, #8]
     fa6:	e025      	b.n	ff4 <qstr_find_strn+0x80>
            if (Q_GET_HASH(*q) == str_hash && Q_GET_LENGTH(*q) == str_len && memcmp(Q_GET_DATA(*q), str, str_len) == 0) {
     fa8:	693b      	ldr	r3, [r7, #16]
     faa:	681b      	ldr	r3, [r3, #0]
     fac:	781b      	ldrb	r3, [r3, #0]
     fae:	461a      	mov	r2, r3
     fb0:	68fb      	ldr	r3, [r7, #12]
     fb2:	429a      	cmp	r2, r3
     fb4:	d11b      	bne.n	fee <qstr_find_strn+0x7a>
     fb6:	693b      	ldr	r3, [r7, #16]
     fb8:	681b      	ldr	r3, [r3, #0]
     fba:	3301      	adds	r3, #1
     fbc:	781b      	ldrb	r3, [r3, #0]
     fbe:	461a      	mov	r2, r3
     fc0:	683b      	ldr	r3, [r7, #0]
     fc2:	429a      	cmp	r2, r3
     fc4:	d113      	bne.n	fee <qstr_find_strn+0x7a>
     fc6:	693b      	ldr	r3, [r7, #16]
     fc8:	681b      	ldr	r3, [r3, #0]
     fca:	3302      	adds	r3, #2
     fcc:	683a      	ldr	r2, [r7, #0]
     fce:	6879      	ldr	r1, [r7, #4]
     fd0:	4618      	mov	r0, r3
     fd2:	f01b f85f 	bl	1c094 <memcmp>
     fd6:	4603      	mov	r3, r0
     fd8:	2b00      	cmp	r3, #0
     fda:	d108      	bne.n	fee <qstr_find_strn+0x7a>
                return pool->total_prev_len + (q - pool->qstrs);
     fdc:	697b      	ldr	r3, [r7, #20]
     fde:	685b      	ldr	r3, [r3, #4]
     fe0:	693a      	ldr	r2, [r7, #16]
     fe2:	6979      	ldr	r1, [r7, #20]
     fe4:	3110      	adds	r1, #16
     fe6:	1a52      	subs	r2, r2, r1
     fe8:	1092      	asrs	r2, r2, #2
     fea:	4413      	add	r3, r2
     fec:	e00d      	b.n	100a <qstr_find_strn+0x96>
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
     fee:	693b      	ldr	r3, [r7, #16]
     ff0:	3304      	adds	r3, #4
     ff2:	613b      	str	r3, [r7, #16]
     ff4:	693a      	ldr	r2, [r7, #16]
     ff6:	68bb      	ldr	r3, [r7, #8]
     ff8:	429a      	cmp	r2, r3
     ffa:	d3d5      	bcc.n	fa8 <qstr_find_strn+0x34>
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL; pool = pool->prev) {
     ffc:	697b      	ldr	r3, [r7, #20]
     ffe:	681b      	ldr	r3, [r3, #0]
    1000:	617b      	str	r3, [r7, #20]
    1002:	697b      	ldr	r3, [r7, #20]
    1004:	2b00      	cmp	r3, #0
    1006:	d1c3      	bne.n	f90 <qstr_find_strn+0x1c>
            }
        }
    }

    // not found; return null qstr
    return 0;
    1008:	2300      	movs	r3, #0
}
    100a:	4618      	mov	r0, r3
    100c:	3718      	adds	r7, #24
    100e:	46bd      	mov	sp, r7
    1010:	bd80      	pop	{r7, pc}
    1012:	bf00      	nop
    1014:	20000a2c 	.word	0x20000a2c

00001018 <qstr_from_str>:

qstr qstr_from_str(const char *str) {
    1018:	b580      	push	{r7, lr}
    101a:	b082      	sub	sp, #8
    101c:	af00      	add	r7, sp, #0
    101e:	6078      	str	r0, [r7, #4]
    return qstr_from_strn(str, strlen(str));
    1020:	6878      	ldr	r0, [r7, #4]
    1022:	f01b f889 	bl	1c138 <strlen>
    1026:	4603      	mov	r3, r0
    1028:	4619      	mov	r1, r3
    102a:	6878      	ldr	r0, [r7, #4]
    102c:	f000 f806 	bl	103c <qstr_from_strn>
    1030:	4603      	mov	r3, r0
}
    1032:	4618      	mov	r0, r3
    1034:	3708      	adds	r7, #8
    1036:	46bd      	mov	sp, r7
    1038:	bd80      	pop	{r7, pc}
    103a:	bf00      	nop

0000103c <qstr_from_strn>:

qstr qstr_from_strn(const char *str, size_t len) {
    103c:	b580      	push	{r7, lr}
    103e:	b088      	sub	sp, #32
    1040:	af00      	add	r7, sp, #0
    1042:	6078      	str	r0, [r7, #4]
    1044:	6039      	str	r1, [r7, #0]
    assert(len < (1 << (8 * MICROPY_QSTR_BYTES_IN_LEN)));
    1046:	683b      	ldr	r3, [r7, #0]
    1048:	2bff      	cmp	r3, #255	; 0xff
    104a:	d905      	bls.n	1058 <qstr_from_strn+0x1c>
    104c:	4b56      	ldr	r3, [pc, #344]	; (11a8 <qstr_from_strn+0x16c>)
    104e:	4a57      	ldr	r2, [pc, #348]	; (11ac <qstr_from_strn+0x170>)
    1050:	21ba      	movs	r1, #186	; 0xba
    1052:	4857      	ldr	r0, [pc, #348]	; (11b0 <qstr_from_strn+0x174>)
    1054:	f01a f98a 	bl	1b36c <__assert_func>
    QSTR_ENTER();
    qstr q = qstr_find_strn(str, len);
    1058:	6839      	ldr	r1, [r7, #0]
    105a:	6878      	ldr	r0, [r7, #4]
    105c:	f7ff ff8a 	bl	f74 <qstr_find_strn>
    1060:	61f8      	str	r0, [r7, #28]
    if (q == 0) {
    1062:	69fb      	ldr	r3, [r7, #28]
    1064:	2b00      	cmp	r3, #0
    1066:	f040 8099 	bne.w	119c <qstr_from_strn+0x160>
        // qstr does not exist in interned pool so need to add it

        // compute number of bytes needed to intern this string
        size_t n_bytes = MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN + len + 1;
    106a:	683b      	ldr	r3, [r7, #0]
    106c:	3303      	adds	r3, #3
    106e:	617b      	str	r3, [r7, #20]

        if (MP_STATE_VM(qstr_last_chunk) != NULL && MP_STATE_VM(qstr_last_used) + n_bytes > MP_STATE_VM(qstr_last_alloc)) {
    1070:	4b50      	ldr	r3, [pc, #320]	; (11b4 <qstr_from_strn+0x178>)
    1072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    1076:	2b00      	cmp	r3, #0
    1078:	d030      	beq.n	10dc <qstr_from_strn+0xa0>
    107a:	4b4e      	ldr	r3, [pc, #312]	; (11b4 <qstr_from_strn+0x178>)
    107c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    1080:	697b      	ldr	r3, [r7, #20]
    1082:	441a      	add	r2, r3
    1084:	4b4b      	ldr	r3, [pc, #300]	; (11b4 <qstr_from_strn+0x178>)
    1086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    108a:	429a      	cmp	r2, r3
    108c:	d926      	bls.n	10dc <qstr_from_strn+0xa0>
            // not enough room at end of previously interned string so try to grow
            byte *new_p = m_renew_maybe(byte, MP_STATE_VM(qstr_last_chunk), MP_STATE_VM(qstr_last_alloc), MP_STATE_VM(qstr_last_alloc) + n_bytes, false);
    108e:	4b49      	ldr	r3, [pc, #292]	; (11b4 <qstr_from_strn+0x178>)
    1090:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    1094:	4b47      	ldr	r3, [pc, #284]	; (11b4 <qstr_from_strn+0x178>)
    1096:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    109a:	697b      	ldr	r3, [r7, #20]
    109c:	4413      	add	r3, r2
    109e:	2200      	movs	r2, #0
    10a0:	4619      	mov	r1, r3
    10a2:	f7ff f989 	bl	3b8 <m_realloc_maybe>
    10a6:	6138      	str	r0, [r7, #16]
            if (new_p == NULL) {
    10a8:	693b      	ldr	r3, [r7, #16]
    10aa:	2b00      	cmp	r3, #0
    10ac:	d10e      	bne.n	10cc <qstr_from_strn+0x90>
                // could not grow existing memory; shrink it to fit previous
                (void)m_renew_maybe(byte, MP_STATE_VM(qstr_last_chunk), MP_STATE_VM(qstr_last_alloc), MP_STATE_VM(qstr_last_used), false);
    10ae:	4b41      	ldr	r3, [pc, #260]	; (11b4 <qstr_from_strn+0x178>)
    10b0:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    10b4:	4b3f      	ldr	r3, [pc, #252]	; (11b4 <qstr_from_strn+0x178>)
    10b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    10ba:	2200      	movs	r2, #0
    10bc:	4619      	mov	r1, r3
    10be:	f7ff f97b 	bl	3b8 <m_realloc_maybe>
                MP_STATE_VM(qstr_last_chunk) = NULL;
    10c2:	4b3c      	ldr	r3, [pc, #240]	; (11b4 <qstr_from_strn+0x178>)
    10c4:	2200      	movs	r2, #0
    10c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    10ca:	e007      	b.n	10dc <qstr_from_strn+0xa0>
            } else {
                // could grow existing memory
                MP_STATE_VM(qstr_last_alloc) += n_bytes;
    10cc:	4b39      	ldr	r3, [pc, #228]	; (11b4 <qstr_from_strn+0x178>)
    10ce:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    10d2:	697b      	ldr	r3, [r7, #20]
    10d4:	4413      	add	r3, r2
    10d6:	4a37      	ldr	r2, [pc, #220]	; (11b4 <qstr_from_strn+0x178>)
    10d8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
            }
        }

        if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    10dc:	4b35      	ldr	r3, [pc, #212]	; (11b4 <qstr_from_strn+0x178>)
    10de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    10e2:	2b00      	cmp	r3, #0
    10e4:	d12b      	bne.n	113e <qstr_from_strn+0x102>
            // no existing memory for the interned string so allocate a new chunk
            size_t al = n_bytes;
    10e6:	697b      	ldr	r3, [r7, #20]
    10e8:	61bb      	str	r3, [r7, #24]
            if (al < MICROPY_ALLOC_QSTR_CHUNK_INIT) {
    10ea:	69bb      	ldr	r3, [r7, #24]
    10ec:	2b7f      	cmp	r3, #127	; 0x7f
    10ee:	d801      	bhi.n	10f4 <qstr_from_strn+0xb8>
                al = MICROPY_ALLOC_QSTR_CHUNK_INIT;
    10f0:	2380      	movs	r3, #128	; 0x80
    10f2:	61bb      	str	r3, [r7, #24]
            }
            MP_STATE_VM(qstr_last_chunk) = m_new_maybe(byte, al);
    10f4:	69b8      	ldr	r0, [r7, #24]
    10f6:	f7ff f929 	bl	34c <m_malloc_maybe>
    10fa:	4602      	mov	r2, r0
    10fc:	4b2d      	ldr	r3, [pc, #180]	; (11b4 <qstr_from_strn+0x178>)
    10fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    1102:	4b2c      	ldr	r3, [pc, #176]	; (11b4 <qstr_from_strn+0x178>)
    1104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    1108:	2b00      	cmp	r3, #0
    110a:	d110      	bne.n	112e <qstr_from_strn+0xf2>
                // failed to allocate a large chunk so try with exact size
                MP_STATE_VM(qstr_last_chunk) = m_new_maybe(byte, n_bytes);
    110c:	6978      	ldr	r0, [r7, #20]
    110e:	f7ff f91d 	bl	34c <m_malloc_maybe>
    1112:	4602      	mov	r2, r0
    1114:	4b27      	ldr	r3, [pc, #156]	; (11b4 <qstr_from_strn+0x178>)
    1116:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                if (MP_STATE_VM(qstr_last_chunk) == NULL) {
    111a:	4b26      	ldr	r3, [pc, #152]	; (11b4 <qstr_from_strn+0x178>)
    111c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    1120:	2b00      	cmp	r3, #0
    1122:	d102      	bne.n	112a <qstr_from_strn+0xee>
                    QSTR_EXIT();
                    m_malloc_fail(n_bytes);
    1124:	6978      	ldr	r0, [r7, #20]
    1126:	f00b ff1d 	bl	cf64 <m_malloc_fail>
                }
                al = n_bytes;
    112a:	697b      	ldr	r3, [r7, #20]
    112c:	61bb      	str	r3, [r7, #24]
            }
            MP_STATE_VM(qstr_last_alloc) = al;
    112e:	4a21      	ldr	r2, [pc, #132]	; (11b4 <qstr_from_strn+0x178>)
    1130:	69bb      	ldr	r3, [r7, #24]
    1132:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
            MP_STATE_VM(qstr_last_used) = 0;
    1136:	4b1f      	ldr	r3, [pc, #124]	; (11b4 <qstr_from_strn+0x178>)
    1138:	2200      	movs	r2, #0
    113a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        // allocate memory from the chunk for this new interned string's data
        byte *q_ptr = MP_STATE_VM(qstr_last_chunk) + MP_STATE_VM(qstr_last_used);
    113e:	4b1d      	ldr	r3, [pc, #116]	; (11b4 <qstr_from_strn+0x178>)
    1140:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1144:	4b1b      	ldr	r3, [pc, #108]	; (11b4 <qstr_from_strn+0x178>)
    1146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    114a:	4413      	add	r3, r2
    114c:	60fb      	str	r3, [r7, #12]
        MP_STATE_VM(qstr_last_used) += n_bytes;
    114e:	4b19      	ldr	r3, [pc, #100]	; (11b4 <qstr_from_strn+0x178>)
    1150:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    1154:	697b      	ldr	r3, [r7, #20]
    1156:	4413      	add	r3, r2
    1158:	4a16      	ldr	r2, [pc, #88]	; (11b4 <qstr_from_strn+0x178>)
    115a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        // store the interned strings' data
        mp_uint_t hash = qstr_compute_hash((const byte*)str, len);
    115e:	6839      	ldr	r1, [r7, #0]
    1160:	6878      	ldr	r0, [r7, #4]
    1162:	f7ff fe57 	bl	e14 <qstr_compute_hash>
    1166:	60b8      	str	r0, [r7, #8]
        Q_SET_HASH(q_ptr, hash);
    1168:	68bb      	ldr	r3, [r7, #8]
    116a:	b2da      	uxtb	r2, r3
    116c:	68fb      	ldr	r3, [r7, #12]
    116e:	701a      	strb	r2, [r3, #0]
        Q_SET_LENGTH(q_ptr, len);
    1170:	68fb      	ldr	r3, [r7, #12]
    1172:	3301      	adds	r3, #1
    1174:	683a      	ldr	r2, [r7, #0]
    1176:	b2d2      	uxtb	r2, r2
    1178:	701a      	strb	r2, [r3, #0]
        memcpy(q_ptr + MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN, str, len);
    117a:	68fb      	ldr	r3, [r7, #12]
    117c:	3302      	adds	r3, #2
    117e:	683a      	ldr	r2, [r7, #0]
    1180:	6879      	ldr	r1, [r7, #4]
    1182:	4618      	mov	r0, r3
    1184:	f01a fe9e 	bl	1bec4 <memcpy>
        q_ptr[MICROPY_QSTR_BYTES_IN_HASH + MICROPY_QSTR_BYTES_IN_LEN + len] = '\0';
    1188:	683b      	ldr	r3, [r7, #0]
    118a:	3302      	adds	r3, #2
    118c:	68fa      	ldr	r2, [r7, #12]
    118e:	4413      	add	r3, r2
    1190:	2200      	movs	r2, #0
    1192:	701a      	strb	r2, [r3, #0]
        q = qstr_add(q_ptr);
    1194:	68f8      	ldr	r0, [r7, #12]
    1196:	f7ff fe9b 	bl	ed0 <qstr_add>
    119a:	61f8      	str	r0, [r7, #28]
    }
    QSTR_EXIT();
    return q;
    119c:	69fb      	ldr	r3, [r7, #28]
}
    119e:	4618      	mov	r0, r3
    11a0:	3720      	adds	r7, #32
    11a2:	46bd      	mov	sp, r7
    11a4:	bd80      	pop	{r7, pc}
    11a6:	bf00      	nop
    11a8:	0001d7b4 	.word	0x0001d7b4
    11ac:	0001d7f4 	.word	0x0001d7f4
    11b0:	0001d7e4 	.word	0x0001d7e4
    11b4:	20000a2c 	.word	0x20000a2c

000011b8 <qstr_hash>:

mp_uint_t qstr_hash(qstr q) {
    11b8:	b580      	push	{r7, lr}
    11ba:	b082      	sub	sp, #8
    11bc:	af00      	add	r7, sp, #0
    11be:	6078      	str	r0, [r7, #4]
    return Q_GET_HASH(find_qstr(q));
    11c0:	6878      	ldr	r0, [r7, #4]
    11c2:	f7ff fe65 	bl	e90 <find_qstr>
    11c6:	4603      	mov	r3, r0
    11c8:	781b      	ldrb	r3, [r3, #0]
}
    11ca:	4618      	mov	r0, r3
    11cc:	3708      	adds	r7, #8
    11ce:	46bd      	mov	sp, r7
    11d0:	bd80      	pop	{r7, pc}
    11d2:	bf00      	nop

000011d4 <qstr_len>:

size_t qstr_len(qstr q) {
    11d4:	b580      	push	{r7, lr}
    11d6:	b084      	sub	sp, #16
    11d8:	af00      	add	r7, sp, #0
    11da:	6078      	str	r0, [r7, #4]
    const byte *qd = find_qstr(q);
    11dc:	6878      	ldr	r0, [r7, #4]
    11de:	f7ff fe57 	bl	e90 <find_qstr>
    11e2:	60f8      	str	r0, [r7, #12]
    return Q_GET_LENGTH(qd);
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	3301      	adds	r3, #1
    11e8:	781b      	ldrb	r3, [r3, #0]
}
    11ea:	4618      	mov	r0, r3
    11ec:	3710      	adds	r7, #16
    11ee:	46bd      	mov	sp, r7
    11f0:	bd80      	pop	{r7, pc}
    11f2:	bf00      	nop

000011f4 <qstr_str>:

const char *qstr_str(qstr q) {
    11f4:	b580      	push	{r7, lr}
    11f6:	b084      	sub	sp, #16
    11f8:	af00      	add	r7, sp, #0
    11fa:	6078      	str	r0, [r7, #4]
    const byte *qd = find_qstr(q);
    11fc:	6878      	ldr	r0, [r7, #4]
    11fe:	f7ff fe47 	bl	e90 <find_qstr>
    1202:	60f8      	str	r0, [r7, #12]
    return (const char*)Q_GET_DATA(qd);
    1204:	68fb      	ldr	r3, [r7, #12]
    1206:	3302      	adds	r3, #2
}
    1208:	4618      	mov	r0, r3
    120a:	3710      	adds	r7, #16
    120c:	46bd      	mov	sp, r7
    120e:	bd80      	pop	{r7, pc}

00001210 <qstr_data>:

const byte *qstr_data(qstr q, size_t *len) {
    1210:	b580      	push	{r7, lr}
    1212:	b084      	sub	sp, #16
    1214:	af00      	add	r7, sp, #0
    1216:	6078      	str	r0, [r7, #4]
    1218:	6039      	str	r1, [r7, #0]
    const byte *qd = find_qstr(q);
    121a:	6878      	ldr	r0, [r7, #4]
    121c:	f7ff fe38 	bl	e90 <find_qstr>
    1220:	60f8      	str	r0, [r7, #12]
    *len = Q_GET_LENGTH(qd);
    1222:	68fb      	ldr	r3, [r7, #12]
    1224:	3301      	adds	r3, #1
    1226:	781b      	ldrb	r3, [r3, #0]
    1228:	461a      	mov	r2, r3
    122a:	683b      	ldr	r3, [r7, #0]
    122c:	601a      	str	r2, [r3, #0]
    return Q_GET_DATA(qd);
    122e:	68fb      	ldr	r3, [r7, #12]
    1230:	3302      	adds	r3, #2
}
    1232:	4618      	mov	r0, r3
    1234:	3710      	adds	r7, #16
    1236:	46bd      	mov	sp, r7
    1238:	bd80      	pop	{r7, pc}
    123a:	bf00      	nop

0000123c <qstr_pool_info>:

void qstr_pool_info(size_t *n_pool, size_t *n_qstr, size_t *n_str_data_bytes, size_t *n_total_bytes) {
    123c:	b580      	push	{r7, lr}
    123e:	b088      	sub	sp, #32
    1240:	af00      	add	r7, sp, #0
    1242:	60f8      	str	r0, [r7, #12]
    1244:	60b9      	str	r1, [r7, #8]
    1246:	607a      	str	r2, [r7, #4]
    1248:	603b      	str	r3, [r7, #0]
    QSTR_ENTER();
    *n_pool = 0;
    124a:	68fb      	ldr	r3, [r7, #12]
    124c:	2200      	movs	r2, #0
    124e:	601a      	str	r2, [r3, #0]
    *n_qstr = 0;
    1250:	68bb      	ldr	r3, [r7, #8]
    1252:	2200      	movs	r2, #0
    1254:	601a      	str	r2, [r3, #0]
    *n_str_data_bytes = 0;
    1256:	687b      	ldr	r3, [r7, #4]
    1258:	2200      	movs	r2, #0
    125a:	601a      	str	r2, [r3, #0]
    *n_total_bytes = 0;
    125c:	683b      	ldr	r3, [r7, #0]
    125e:	2200      	movs	r2, #0
    1260:	601a      	str	r2, [r3, #0]
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL && pool != &CONST_POOL; pool = pool->prev) {
    1262:	4b25      	ldr	r3, [pc, #148]	; (12f8 <qstr_pool_info+0xbc>)
    1264:	691b      	ldr	r3, [r3, #16]
    1266:	61fb      	str	r3, [r7, #28]
    1268:	e034      	b.n	12d4 <qstr_pool_info+0x98>
        *n_pool += 1;
    126a:	68fb      	ldr	r3, [r7, #12]
    126c:	681b      	ldr	r3, [r3, #0]
    126e:	1c5a      	adds	r2, r3, #1
    1270:	68fb      	ldr	r3, [r7, #12]
    1272:	601a      	str	r2, [r3, #0]
        *n_qstr += pool->len;
    1274:	68bb      	ldr	r3, [r7, #8]
    1276:	681a      	ldr	r2, [r3, #0]
    1278:	69fb      	ldr	r3, [r7, #28]
    127a:	68db      	ldr	r3, [r3, #12]
    127c:	441a      	add	r2, r3
    127e:	68bb      	ldr	r3, [r7, #8]
    1280:	601a      	str	r2, [r3, #0]
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    1282:	69fb      	ldr	r3, [r7, #28]
    1284:	3310      	adds	r3, #16
    1286:	61bb      	str	r3, [r7, #24]
    1288:	69fb      	ldr	r3, [r7, #28]
    128a:	f103 0210 	add.w	r2, r3, #16
    128e:	69fb      	ldr	r3, [r7, #28]
    1290:	68db      	ldr	r3, [r3, #12]
    1292:	009b      	lsls	r3, r3, #2
    1294:	4413      	add	r3, r2
    1296:	617b      	str	r3, [r7, #20]
    1298:	e00c      	b.n	12b4 <qstr_pool_info+0x78>
            *n_str_data_bytes += Q_GET_ALLOC(*q);
    129a:	687b      	ldr	r3, [r7, #4]
    129c:	681b      	ldr	r3, [r3, #0]
    129e:	69ba      	ldr	r2, [r7, #24]
    12a0:	6812      	ldr	r2, [r2, #0]
    12a2:	3201      	adds	r2, #1
    12a4:	7812      	ldrb	r2, [r2, #0]
    12a6:	4413      	add	r3, r2
    12a8:	1cda      	adds	r2, r3, #3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	601a      	str	r2, [r3, #0]
        for (const byte **q = pool->qstrs, **q_top = pool->qstrs + pool->len; q < q_top; q++) {
    12ae:	69bb      	ldr	r3, [r7, #24]
    12b0:	3304      	adds	r3, #4
    12b2:	61bb      	str	r3, [r7, #24]
    12b4:	69ba      	ldr	r2, [r7, #24]
    12b6:	697b      	ldr	r3, [r7, #20]
    12b8:	429a      	cmp	r2, r3
    12ba:	d3ee      	bcc.n	129a <qstr_pool_info+0x5e>
        }
        #if MICROPY_ENABLE_GC
        *n_total_bytes += gc_nbytes(pool); // this counts actual bytes used in heap
    12bc:	69f8      	ldr	r0, [r7, #28]
    12be:	f7ff fb99 	bl	9f4 <gc_nbytes>
    12c2:	4602      	mov	r2, r0
    12c4:	683b      	ldr	r3, [r7, #0]
    12c6:	681b      	ldr	r3, [r3, #0]
    12c8:	441a      	add	r2, r3
    12ca:	683b      	ldr	r3, [r7, #0]
    12cc:	601a      	str	r2, [r3, #0]
    for (qstr_pool_t *pool = MP_STATE_VM(last_pool); pool != NULL && pool != &CONST_POOL; pool = pool->prev) {
    12ce:	69fb      	ldr	r3, [r7, #28]
    12d0:	681b      	ldr	r3, [r3, #0]
    12d2:	61fb      	str	r3, [r7, #28]
    12d4:	69fb      	ldr	r3, [r7, #28]
    12d6:	2b00      	cmp	r3, #0
    12d8:	d003      	beq.n	12e2 <qstr_pool_info+0xa6>
    12da:	69fb      	ldr	r3, [r7, #28]
    12dc:	4a07      	ldr	r2, [pc, #28]	; (12fc <qstr_pool_info+0xc0>)
    12de:	4293      	cmp	r3, r2
    12e0:	d1c3      	bne.n	126a <qstr_pool_info+0x2e>
        #else
        *n_total_bytes += sizeof(qstr_pool_t) + sizeof(qstr) * pool->alloc;
        #endif
    }
    *n_total_bytes += *n_str_data_bytes;
    12e2:	683b      	ldr	r3, [r7, #0]
    12e4:	681a      	ldr	r2, [r3, #0]
    12e6:	687b      	ldr	r3, [r7, #4]
    12e8:	681b      	ldr	r3, [r3, #0]
    12ea:	441a      	add	r2, r3
    12ec:	683b      	ldr	r3, [r7, #0]
    12ee:	601a      	str	r2, [r3, #0]
    QSTR_EXIT();
}
    12f0:	bf00      	nop
    12f2:	3720      	adds	r7, #32
    12f4:	46bd      	mov	sp, r7
    12f6:	bd80      	pop	{r7, pc}
    12f8:	20000a2c 	.word	0x20000a2c
    12fc:	00022f04 	.word	0x00022f04

00001300 <vstr_init>:

// returned value is always at least 1 greater than argument
#define ROUND_ALLOC(a) (((a) & ((~0U) - 7)) + 8)

// Init the vstr so it allocs exactly given number of bytes.  Set length to zero.
void vstr_init(vstr_t *vstr, size_t alloc) {
    1300:	b580      	push	{r7, lr}
    1302:	b082      	sub	sp, #8
    1304:	af00      	add	r7, sp, #0
    1306:	6078      	str	r0, [r7, #4]
    1308:	6039      	str	r1, [r7, #0]
    if (alloc < 1) {
    130a:	683b      	ldr	r3, [r7, #0]
    130c:	2b00      	cmp	r3, #0
    130e:	d101      	bne.n	1314 <vstr_init+0x14>
        alloc = 1;
    1310:	2301      	movs	r3, #1
    1312:	603b      	str	r3, [r7, #0]
    }
    vstr->alloc = alloc;
    1314:	687b      	ldr	r3, [r7, #4]
    1316:	683a      	ldr	r2, [r7, #0]
    1318:	601a      	str	r2, [r3, #0]
    vstr->len = 0;
    131a:	687b      	ldr	r3, [r7, #4]
    131c:	2200      	movs	r2, #0
    131e:	605a      	str	r2, [r3, #4]
    vstr->buf = m_new(char, vstr->alloc);
    1320:	687b      	ldr	r3, [r7, #4]
    1322:	681b      	ldr	r3, [r3, #0]
    1324:	4618      	mov	r0, r3
    1326:	f7fe fff9 	bl	31c <m_malloc>
    132a:	4602      	mov	r2, r0
    132c:	687b      	ldr	r3, [r7, #4]
    132e:	609a      	str	r2, [r3, #8]
    vstr->fixed_buf = false;
    1330:	687a      	ldr	r2, [r7, #4]
    1332:	7b13      	ldrb	r3, [r2, #12]
    1334:	f36f 0300 	bfc	r3, #0, #1
    1338:	7313      	strb	r3, [r2, #12]
}
    133a:	bf00      	nop
    133c:	3708      	adds	r7, #8
    133e:	46bd      	mov	sp, r7
    1340:	bd80      	pop	{r7, pc}
    1342:	bf00      	nop

00001344 <vstr_init_len>:

// Init the vstr so it allocs exactly enough ram to hold a null-terminated
// string of the given length, and set the length.
void vstr_init_len(vstr_t *vstr, size_t len) {
    1344:	b580      	push	{r7, lr}
    1346:	b082      	sub	sp, #8
    1348:	af00      	add	r7, sp, #0
    134a:	6078      	str	r0, [r7, #4]
    134c:	6039      	str	r1, [r7, #0]
    vstr_init(vstr, len + 1);
    134e:	683b      	ldr	r3, [r7, #0]
    1350:	3301      	adds	r3, #1
    1352:	4619      	mov	r1, r3
    1354:	6878      	ldr	r0, [r7, #4]
    1356:	f7ff ffd3 	bl	1300 <vstr_init>
    vstr->len = len;
    135a:	687b      	ldr	r3, [r7, #4]
    135c:	683a      	ldr	r2, [r7, #0]
    135e:	605a      	str	r2, [r3, #4]
}
    1360:	bf00      	nop
    1362:	3708      	adds	r7, #8
    1364:	46bd      	mov	sp, r7
    1366:	bd80      	pop	{r7, pc}

00001368 <vstr_init_fixed_buf>:

void vstr_init_fixed_buf(vstr_t *vstr, size_t alloc, char *buf) {
    1368:	b480      	push	{r7}
    136a:	b085      	sub	sp, #20
    136c:	af00      	add	r7, sp, #0
    136e:	60f8      	str	r0, [r7, #12]
    1370:	60b9      	str	r1, [r7, #8]
    1372:	607a      	str	r2, [r7, #4]
    vstr->alloc = alloc;
    1374:	68fb      	ldr	r3, [r7, #12]
    1376:	68ba      	ldr	r2, [r7, #8]
    1378:	601a      	str	r2, [r3, #0]
    vstr->len = 0;
    137a:	68fb      	ldr	r3, [r7, #12]
    137c:	2200      	movs	r2, #0
    137e:	605a      	str	r2, [r3, #4]
    vstr->buf = buf;
    1380:	68fb      	ldr	r3, [r7, #12]
    1382:	687a      	ldr	r2, [r7, #4]
    1384:	609a      	str	r2, [r3, #8]
    vstr->fixed_buf = true;
    1386:	68fa      	ldr	r2, [r7, #12]
    1388:	7b13      	ldrb	r3, [r2, #12]
    138a:	f043 0301 	orr.w	r3, r3, #1
    138e:	7313      	strb	r3, [r2, #12]
}
    1390:	bf00      	nop
    1392:	3714      	adds	r7, #20
    1394:	46bd      	mov	sp, r7
    1396:	f85d 7b04 	ldr.w	r7, [sp], #4
    139a:	4770      	bx	lr

0000139c <vstr_init_print>:

void vstr_init_print(vstr_t *vstr, size_t alloc, mp_print_t *print) {
    139c:	b580      	push	{r7, lr}
    139e:	b084      	sub	sp, #16
    13a0:	af00      	add	r7, sp, #0
    13a2:	60f8      	str	r0, [r7, #12]
    13a4:	60b9      	str	r1, [r7, #8]
    13a6:	607a      	str	r2, [r7, #4]
    vstr_init(vstr, alloc);
    13a8:	68b9      	ldr	r1, [r7, #8]
    13aa:	68f8      	ldr	r0, [r7, #12]
    13ac:	f7ff ffa8 	bl	1300 <vstr_init>
    print->data = vstr;
    13b0:	687b      	ldr	r3, [r7, #4]
    13b2:	68fa      	ldr	r2, [r7, #12]
    13b4:	601a      	str	r2, [r3, #0]
    print->print_strn = (mp_print_strn_t)vstr_add_strn;
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	4a02      	ldr	r2, [pc, #8]	; (13c4 <vstr_init_print+0x28>)
    13ba:	605a      	str	r2, [r3, #4]
}
    13bc:	bf00      	nop
    13be:	3710      	adds	r7, #16
    13c0:	46bd      	mov	sp, r7
    13c2:	bd80      	pop	{r7, pc}
    13c4:	00001615 	.word	0x00001615

000013c8 <vstr_clear>:

void vstr_clear(vstr_t *vstr) {
    13c8:	b580      	push	{r7, lr}
    13ca:	b082      	sub	sp, #8
    13cc:	af00      	add	r7, sp, #0
    13ce:	6078      	str	r0, [r7, #4]
    if (!vstr->fixed_buf) {
    13d0:	687b      	ldr	r3, [r7, #4]
    13d2:	7b1b      	ldrb	r3, [r3, #12]
    13d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
    13d8:	b2db      	uxtb	r3, r3
    13da:	f083 0301 	eor.w	r3, r3, #1
    13de:	b2db      	uxtb	r3, r3
    13e0:	2b00      	cmp	r3, #0
    13e2:	d004      	beq.n	13ee <vstr_clear+0x26>
        m_del(char, vstr->buf, vstr->alloc);
    13e4:	687b      	ldr	r3, [r7, #4]
    13e6:	689b      	ldr	r3, [r3, #8]
    13e8:	4618      	mov	r0, r3
    13ea:	f7fe fff9 	bl	3e0 <m_free>
    }
    vstr->buf = NULL;
    13ee:	687b      	ldr	r3, [r7, #4]
    13f0:	2200      	movs	r2, #0
    13f2:	609a      	str	r2, [r3, #8]
}
    13f4:	bf00      	nop
    13f6:	3708      	adds	r7, #8
    13f8:	46bd      	mov	sp, r7
    13fa:	bd80      	pop	{r7, pc}

000013fc <vstr_new>:

vstr_t *vstr_new(size_t alloc) {
    13fc:	b580      	push	{r7, lr}
    13fe:	b084      	sub	sp, #16
    1400:	af00      	add	r7, sp, #0
    1402:	6078      	str	r0, [r7, #4]
    vstr_t *vstr = m_new_obj(vstr_t);
    1404:	2010      	movs	r0, #16
    1406:	f7fe ff89 	bl	31c <m_malloc>
    140a:	60f8      	str	r0, [r7, #12]
    vstr_init(vstr, alloc);
    140c:	6879      	ldr	r1, [r7, #4]
    140e:	68f8      	ldr	r0, [r7, #12]
    1410:	f7ff ff76 	bl	1300 <vstr_init>
    return vstr;
    1414:	68fb      	ldr	r3, [r7, #12]
}
    1416:	4618      	mov	r0, r3
    1418:	3710      	adds	r7, #16
    141a:	46bd      	mov	sp, r7
    141c:	bd80      	pop	{r7, pc}
    141e:	bf00      	nop

00001420 <vstr_free>:

void vstr_free(vstr_t *vstr) {
    1420:	b580      	push	{r7, lr}
    1422:	b082      	sub	sp, #8
    1424:	af00      	add	r7, sp, #0
    1426:	6078      	str	r0, [r7, #4]
    if (vstr != NULL) {
    1428:	687b      	ldr	r3, [r7, #4]
    142a:	2b00      	cmp	r3, #0
    142c:	d011      	beq.n	1452 <vstr_free+0x32>
        if (!vstr->fixed_buf) {
    142e:	687b      	ldr	r3, [r7, #4]
    1430:	7b1b      	ldrb	r3, [r3, #12]
    1432:	f3c3 0300 	ubfx	r3, r3, #0, #1
    1436:	b2db      	uxtb	r3, r3
    1438:	f083 0301 	eor.w	r3, r3, #1
    143c:	b2db      	uxtb	r3, r3
    143e:	2b00      	cmp	r3, #0
    1440:	d004      	beq.n	144c <vstr_free+0x2c>
            m_del(char, vstr->buf, vstr->alloc);
    1442:	687b      	ldr	r3, [r7, #4]
    1444:	689b      	ldr	r3, [r3, #8]
    1446:	4618      	mov	r0, r3
    1448:	f7fe ffca 	bl	3e0 <m_free>
        }
        m_del_obj(vstr_t, vstr);
    144c:	6878      	ldr	r0, [r7, #4]
    144e:	f7fe ffc7 	bl	3e0 <m_free>
    }
}
    1452:	bf00      	nop
    1454:	3708      	adds	r7, #8
    1456:	46bd      	mov	sp, r7
    1458:	bd80      	pop	{r7, pc}
    145a:	bf00      	nop

0000145c <vstr_extend>:

// Extend vstr strictly by requested size, return pointer to newly added chunk.
char *vstr_extend(vstr_t *vstr, size_t size) {
    145c:	b580      	push	{r7, lr}
    145e:	b084      	sub	sp, #16
    1460:	af00      	add	r7, sp, #0
    1462:	6078      	str	r0, [r7, #4]
    1464:	6039      	str	r1, [r7, #0]
    if (vstr->fixed_buf) {
    1466:	687b      	ldr	r3, [r7, #4]
    1468:	7b1b      	ldrb	r3, [r3, #12]
    146a:	f3c3 0300 	ubfx	r3, r3, #0, #1
    146e:	b2db      	uxtb	r3, r3
    1470:	2b00      	cmp	r3, #0
    1472:	d003      	beq.n	147c <vstr_extend+0x20>
        // We can't reallocate, and the caller is expecting the space to
        // be there, so the only safe option is to raise an exception.
        mp_raise_msg(&mp_type_RuntimeError, NULL);
    1474:	2100      	movs	r1, #0
    1476:	4810      	ldr	r0, [pc, #64]	; (14b8 <vstr_extend+0x5c>)
    1478:	f00b fd90 	bl	cf9c <mp_raise_msg>
    }
    char *new_buf = m_renew(char, vstr->buf, vstr->alloc, vstr->alloc + size);
    147c:	687b      	ldr	r3, [r7, #4]
    147e:	6898      	ldr	r0, [r3, #8]
    1480:	687b      	ldr	r3, [r7, #4]
    1482:	681a      	ldr	r2, [r3, #0]
    1484:	683b      	ldr	r3, [r7, #0]
    1486:	4413      	add	r3, r2
    1488:	4619      	mov	r1, r3
    148a:	f7fe ff7b 	bl	384 <m_realloc>
    148e:	60f8      	str	r0, [r7, #12]
    char *p = new_buf + vstr->alloc;
    1490:	687b      	ldr	r3, [r7, #4]
    1492:	681b      	ldr	r3, [r3, #0]
    1494:	68fa      	ldr	r2, [r7, #12]
    1496:	4413      	add	r3, r2
    1498:	60bb      	str	r3, [r7, #8]
    vstr->alloc += size;
    149a:	687b      	ldr	r3, [r7, #4]
    149c:	681a      	ldr	r2, [r3, #0]
    149e:	683b      	ldr	r3, [r7, #0]
    14a0:	441a      	add	r2, r3
    14a2:	687b      	ldr	r3, [r7, #4]
    14a4:	601a      	str	r2, [r3, #0]
    vstr->buf = new_buf;
    14a6:	687b      	ldr	r3, [r7, #4]
    14a8:	68fa      	ldr	r2, [r7, #12]
    14aa:	609a      	str	r2, [r3, #8]
    return p;
    14ac:	68bb      	ldr	r3, [r7, #8]
}
    14ae:	4618      	mov	r0, r3
    14b0:	3710      	adds	r7, #16
    14b2:	46bd      	mov	sp, r7
    14b4:	bd80      	pop	{r7, pc}
    14b6:	bf00      	nop
    14b8:	00020674 	.word	0x00020674

000014bc <vstr_ensure_extra>:

STATIC void vstr_ensure_extra(vstr_t *vstr, size_t size) {
    14bc:	b580      	push	{r7, lr}
    14be:	b084      	sub	sp, #16
    14c0:	af00      	add	r7, sp, #0
    14c2:	6078      	str	r0, [r7, #4]
    14c4:	6039      	str	r1, [r7, #0]
    if (vstr->len + size > vstr->alloc) {
    14c6:	687b      	ldr	r3, [r7, #4]
    14c8:	685a      	ldr	r2, [r3, #4]
    14ca:	683b      	ldr	r3, [r7, #0]
    14cc:	441a      	add	r2, r3
    14ce:	687b      	ldr	r3, [r7, #4]
    14d0:	681b      	ldr	r3, [r3, #0]
    14d2:	429a      	cmp	r2, r3
    14d4:	d920      	bls.n	1518 <vstr_ensure_extra+0x5c>
        if (vstr->fixed_buf) {
    14d6:	687b      	ldr	r3, [r7, #4]
    14d8:	7b1b      	ldrb	r3, [r3, #12]
    14da:	f3c3 0300 	ubfx	r3, r3, #0, #1
    14de:	b2db      	uxtb	r3, r3
    14e0:	2b00      	cmp	r3, #0
    14e2:	d003      	beq.n	14ec <vstr_ensure_extra+0x30>
            // We can't reallocate, and the caller is expecting the space to
            // be there, so the only safe option is to raise an exception.
            mp_raise_msg(&mp_type_RuntimeError, NULL);
    14e4:	2100      	movs	r1, #0
    14e6:	480e      	ldr	r0, [pc, #56]	; (1520 <vstr_ensure_extra+0x64>)
    14e8:	f00b fd58 	bl	cf9c <mp_raise_msg>
        }
        size_t new_alloc = ROUND_ALLOC((vstr->len + size) + 16);
    14ec:	687b      	ldr	r3, [r7, #4]
    14ee:	685a      	ldr	r2, [r3, #4]
    14f0:	683b      	ldr	r3, [r7, #0]
    14f2:	4413      	add	r3, r2
    14f4:	3310      	adds	r3, #16
    14f6:	f023 0307 	bic.w	r3, r3, #7
    14fa:	3308      	adds	r3, #8
    14fc:	60fb      	str	r3, [r7, #12]
        char *new_buf = m_renew(char, vstr->buf, vstr->alloc, new_alloc);
    14fe:	687b      	ldr	r3, [r7, #4]
    1500:	689b      	ldr	r3, [r3, #8]
    1502:	68f9      	ldr	r1, [r7, #12]
    1504:	4618      	mov	r0, r3
    1506:	f7fe ff3d 	bl	384 <m_realloc>
    150a:	60b8      	str	r0, [r7, #8]
        vstr->alloc = new_alloc;
    150c:	687b      	ldr	r3, [r7, #4]
    150e:	68fa      	ldr	r2, [r7, #12]
    1510:	601a      	str	r2, [r3, #0]
        vstr->buf = new_buf;
    1512:	687b      	ldr	r3, [r7, #4]
    1514:	68ba      	ldr	r2, [r7, #8]
    1516:	609a      	str	r2, [r3, #8]
    }
}
    1518:	bf00      	nop
    151a:	3710      	adds	r7, #16
    151c:	46bd      	mov	sp, r7
    151e:	bd80      	pop	{r7, pc}
    1520:	00020674 	.word	0x00020674

00001524 <vstr_hint_size>:

void vstr_hint_size(vstr_t *vstr, size_t size) {
    1524:	b580      	push	{r7, lr}
    1526:	b082      	sub	sp, #8
    1528:	af00      	add	r7, sp, #0
    152a:	6078      	str	r0, [r7, #4]
    152c:	6039      	str	r1, [r7, #0]
    vstr_ensure_extra(vstr, size);
    152e:	6839      	ldr	r1, [r7, #0]
    1530:	6878      	ldr	r0, [r7, #4]
    1532:	f7ff ffc3 	bl	14bc <vstr_ensure_extra>
}
    1536:	bf00      	nop
    1538:	3708      	adds	r7, #8
    153a:	46bd      	mov	sp, r7
    153c:	bd80      	pop	{r7, pc}
    153e:	bf00      	nop

00001540 <vstr_add_len>:

char *vstr_add_len(vstr_t *vstr, size_t len) {
    1540:	b580      	push	{r7, lr}
    1542:	b084      	sub	sp, #16
    1544:	af00      	add	r7, sp, #0
    1546:	6078      	str	r0, [r7, #4]
    1548:	6039      	str	r1, [r7, #0]
    vstr_ensure_extra(vstr, len);
    154a:	6839      	ldr	r1, [r7, #0]
    154c:	6878      	ldr	r0, [r7, #4]
    154e:	f7ff ffb5 	bl	14bc <vstr_ensure_extra>
    char *buf = vstr->buf + vstr->len;
    1552:	687b      	ldr	r3, [r7, #4]
    1554:	689a      	ldr	r2, [r3, #8]
    1556:	687b      	ldr	r3, [r7, #4]
    1558:	685b      	ldr	r3, [r3, #4]
    155a:	4413      	add	r3, r2
    155c:	60fb      	str	r3, [r7, #12]
    vstr->len += len;
    155e:	687b      	ldr	r3, [r7, #4]
    1560:	685a      	ldr	r2, [r3, #4]
    1562:	683b      	ldr	r3, [r7, #0]
    1564:	441a      	add	r2, r3
    1566:	687b      	ldr	r3, [r7, #4]
    1568:	605a      	str	r2, [r3, #4]
    return buf;
    156a:	68fb      	ldr	r3, [r7, #12]
}
    156c:	4618      	mov	r0, r3
    156e:	3710      	adds	r7, #16
    1570:	46bd      	mov	sp, r7
    1572:	bd80      	pop	{r7, pc}

00001574 <vstr_null_terminated_str>:

// Doesn't increase len, just makes sure there is a null byte at the end
char *vstr_null_terminated_str(vstr_t *vstr) {
    1574:	b580      	push	{r7, lr}
    1576:	b082      	sub	sp, #8
    1578:	af00      	add	r7, sp, #0
    157a:	6078      	str	r0, [r7, #4]
    // If there's no more room, add single byte
    if (vstr->alloc == vstr->len) {
    157c:	687b      	ldr	r3, [r7, #4]
    157e:	681a      	ldr	r2, [r3, #0]
    1580:	687b      	ldr	r3, [r7, #4]
    1582:	685b      	ldr	r3, [r3, #4]
    1584:	429a      	cmp	r2, r3
    1586:	d103      	bne.n	1590 <vstr_null_terminated_str+0x1c>
        vstr_extend(vstr, 1);
    1588:	2101      	movs	r1, #1
    158a:	6878      	ldr	r0, [r7, #4]
    158c:	f7ff ff66 	bl	145c <vstr_extend>
    }
    vstr->buf[vstr->len] = '\0';
    1590:	687b      	ldr	r3, [r7, #4]
    1592:	689a      	ldr	r2, [r3, #8]
    1594:	687b      	ldr	r3, [r7, #4]
    1596:	685b      	ldr	r3, [r3, #4]
    1598:	4413      	add	r3, r2
    159a:	2200      	movs	r2, #0
    159c:	701a      	strb	r2, [r3, #0]
    return vstr->buf;
    159e:	687b      	ldr	r3, [r7, #4]
    15a0:	689b      	ldr	r3, [r3, #8]
}
    15a2:	4618      	mov	r0, r3
    15a4:	3708      	adds	r7, #8
    15a6:	46bd      	mov	sp, r7
    15a8:	bd80      	pop	{r7, pc}
    15aa:	bf00      	nop

000015ac <vstr_add_byte>:

void vstr_add_byte(vstr_t *vstr, byte b) {
    15ac:	b580      	push	{r7, lr}
    15ae:	b084      	sub	sp, #16
    15b0:	af00      	add	r7, sp, #0
    15b2:	6078      	str	r0, [r7, #4]
    15b4:	460b      	mov	r3, r1
    15b6:	70fb      	strb	r3, [r7, #3]
    byte *buf = (byte*)vstr_add_len(vstr, 1);
    15b8:	2101      	movs	r1, #1
    15ba:	6878      	ldr	r0, [r7, #4]
    15bc:	f7ff ffc0 	bl	1540 <vstr_add_len>
    15c0:	60f8      	str	r0, [r7, #12]
    buf[0] = b;
    15c2:	68fb      	ldr	r3, [r7, #12]
    15c4:	78fa      	ldrb	r2, [r7, #3]
    15c6:	701a      	strb	r2, [r3, #0]
}
    15c8:	bf00      	nop
    15ca:	3710      	adds	r7, #16
    15cc:	46bd      	mov	sp, r7
    15ce:	bd80      	pop	{r7, pc}

000015d0 <vstr_add_char>:

void vstr_add_char(vstr_t *vstr, unichar c) {
    15d0:	b580      	push	{r7, lr}
    15d2:	b082      	sub	sp, #8
    15d4:	af00      	add	r7, sp, #0
    15d6:	6078      	str	r0, [r7, #4]
    15d8:	6039      	str	r1, [r7, #0]
        buf[1] = ((c >> 12) & 0x3F) | 0x80;
        buf[2] = ((c >> 6) & 0x3F) | 0x80;
        buf[3] = (c & 0x3F) | 0x80;
    }
#else
    vstr_add_byte(vstr, c);
    15da:	683b      	ldr	r3, [r7, #0]
    15dc:	b2db      	uxtb	r3, r3
    15de:	4619      	mov	r1, r3
    15e0:	6878      	ldr	r0, [r7, #4]
    15e2:	f7ff ffe3 	bl	15ac <vstr_add_byte>
#endif
}
    15e6:	bf00      	nop
    15e8:	3708      	adds	r7, #8
    15ea:	46bd      	mov	sp, r7
    15ec:	bd80      	pop	{r7, pc}
    15ee:	bf00      	nop

000015f0 <vstr_add_str>:

void vstr_add_str(vstr_t *vstr, const char *str) {
    15f0:	b580      	push	{r7, lr}
    15f2:	b082      	sub	sp, #8
    15f4:	af00      	add	r7, sp, #0
    15f6:	6078      	str	r0, [r7, #4]
    15f8:	6039      	str	r1, [r7, #0]
    vstr_add_strn(vstr, str, strlen(str));
    15fa:	6838      	ldr	r0, [r7, #0]
    15fc:	f01a fd9c 	bl	1c138 <strlen>
    1600:	4603      	mov	r3, r0
    1602:	461a      	mov	r2, r3
    1604:	6839      	ldr	r1, [r7, #0]
    1606:	6878      	ldr	r0, [r7, #4]
    1608:	f000 f804 	bl	1614 <vstr_add_strn>
}
    160c:	bf00      	nop
    160e:	3708      	adds	r7, #8
    1610:	46bd      	mov	sp, r7
    1612:	bd80      	pop	{r7, pc}

00001614 <vstr_add_strn>:

void vstr_add_strn(vstr_t *vstr, const char *str, size_t len) {
    1614:	b580      	push	{r7, lr}
    1616:	b084      	sub	sp, #16
    1618:	af00      	add	r7, sp, #0
    161a:	60f8      	str	r0, [r7, #12]
    161c:	60b9      	str	r1, [r7, #8]
    161e:	607a      	str	r2, [r7, #4]
    vstr_ensure_extra(vstr, len);
    1620:	6879      	ldr	r1, [r7, #4]
    1622:	68f8      	ldr	r0, [r7, #12]
    1624:	f7ff ff4a 	bl	14bc <vstr_ensure_extra>
    memmove(vstr->buf + vstr->len, str, len);
    1628:	68fb      	ldr	r3, [r7, #12]
    162a:	689a      	ldr	r2, [r3, #8]
    162c:	68fb      	ldr	r3, [r7, #12]
    162e:	685b      	ldr	r3, [r3, #4]
    1630:	4413      	add	r3, r2
    1632:	687a      	ldr	r2, [r7, #4]
    1634:	68b9      	ldr	r1, [r7, #8]
    1636:	4618      	mov	r0, r3
    1638:	f01a fcaa 	bl	1bf90 <memmove>
    vstr->len += len;
    163c:	68fb      	ldr	r3, [r7, #12]
    163e:	685a      	ldr	r2, [r3, #4]
    1640:	687b      	ldr	r3, [r7, #4]
    1642:	441a      	add	r2, r3
    1644:	68fb      	ldr	r3, [r7, #12]
    1646:	605a      	str	r2, [r3, #4]
}
    1648:	bf00      	nop
    164a:	3710      	adds	r7, #16
    164c:	46bd      	mov	sp, r7
    164e:	bd80      	pop	{r7, pc}

00001650 <vstr_ins_blank_bytes>:

STATIC char *vstr_ins_blank_bytes(vstr_t *vstr, size_t byte_pos, size_t byte_len) {
    1650:	b580      	push	{r7, lr}
    1652:	b086      	sub	sp, #24
    1654:	af00      	add	r7, sp, #0
    1656:	60f8      	str	r0, [r7, #12]
    1658:	60b9      	str	r1, [r7, #8]
    165a:	607a      	str	r2, [r7, #4]
    size_t l = vstr->len;
    165c:	68fb      	ldr	r3, [r7, #12]
    165e:	685b      	ldr	r3, [r3, #4]
    1660:	617b      	str	r3, [r7, #20]
    if (byte_pos > l) {
    1662:	68ba      	ldr	r2, [r7, #8]
    1664:	697b      	ldr	r3, [r7, #20]
    1666:	429a      	cmp	r2, r3
    1668:	d901      	bls.n	166e <vstr_ins_blank_bytes+0x1e>
        byte_pos = l;
    166a:	697b      	ldr	r3, [r7, #20]
    166c:	60bb      	str	r3, [r7, #8]
    }
    if (byte_len > 0) {
    166e:	687b      	ldr	r3, [r7, #4]
    1670:	2b00      	cmp	r3, #0
    1672:	d019      	beq.n	16a8 <vstr_ins_blank_bytes+0x58>
        // ensure room for the new bytes
        vstr_ensure_extra(vstr, byte_len);
    1674:	6879      	ldr	r1, [r7, #4]
    1676:	68f8      	ldr	r0, [r7, #12]
    1678:	f7ff ff20 	bl	14bc <vstr_ensure_extra>
        // copy up the string to make room for the new bytes
        memmove(vstr->buf + byte_pos + byte_len, vstr->buf + byte_pos, l - byte_pos);
    167c:	68fb      	ldr	r3, [r7, #12]
    167e:	689a      	ldr	r2, [r3, #8]
    1680:	68b9      	ldr	r1, [r7, #8]
    1682:	687b      	ldr	r3, [r7, #4]
    1684:	440b      	add	r3, r1
    1686:	18d0      	adds	r0, r2, r3
    1688:	68fb      	ldr	r3, [r7, #12]
    168a:	689a      	ldr	r2, [r3, #8]
    168c:	68bb      	ldr	r3, [r7, #8]
    168e:	18d1      	adds	r1, r2, r3
    1690:	697a      	ldr	r2, [r7, #20]
    1692:	68bb      	ldr	r3, [r7, #8]
    1694:	1ad3      	subs	r3, r2, r3
    1696:	461a      	mov	r2, r3
    1698:	f01a fc7a 	bl	1bf90 <memmove>
        // increase the length
        vstr->len += byte_len;
    169c:	68fb      	ldr	r3, [r7, #12]
    169e:	685a      	ldr	r2, [r3, #4]
    16a0:	687b      	ldr	r3, [r7, #4]
    16a2:	441a      	add	r2, r3
    16a4:	68fb      	ldr	r3, [r7, #12]
    16a6:	605a      	str	r2, [r3, #4]
    }
    return vstr->buf + byte_pos;
    16a8:	68fb      	ldr	r3, [r7, #12]
    16aa:	689a      	ldr	r2, [r3, #8]
    16ac:	68bb      	ldr	r3, [r7, #8]
    16ae:	4413      	add	r3, r2
}
    16b0:	4618      	mov	r0, r3
    16b2:	3718      	adds	r7, #24
    16b4:	46bd      	mov	sp, r7
    16b6:	bd80      	pop	{r7, pc}

000016b8 <vstr_ins_byte>:

void vstr_ins_byte(vstr_t *vstr, size_t byte_pos, byte b) {
    16b8:	b580      	push	{r7, lr}
    16ba:	b086      	sub	sp, #24
    16bc:	af00      	add	r7, sp, #0
    16be:	60f8      	str	r0, [r7, #12]
    16c0:	60b9      	str	r1, [r7, #8]
    16c2:	4613      	mov	r3, r2
    16c4:	71fb      	strb	r3, [r7, #7]
    char *s = vstr_ins_blank_bytes(vstr, byte_pos, 1);
    16c6:	2201      	movs	r2, #1
    16c8:	68b9      	ldr	r1, [r7, #8]
    16ca:	68f8      	ldr	r0, [r7, #12]
    16cc:	f7ff ffc0 	bl	1650 <vstr_ins_blank_bytes>
    16d0:	6178      	str	r0, [r7, #20]
    *s = b;
    16d2:	697b      	ldr	r3, [r7, #20]
    16d4:	79fa      	ldrb	r2, [r7, #7]
    16d6:	701a      	strb	r2, [r3, #0]
}
    16d8:	bf00      	nop
    16da:	3718      	adds	r7, #24
    16dc:	46bd      	mov	sp, r7
    16de:	bd80      	pop	{r7, pc}

000016e0 <vstr_ins_char>:

void vstr_ins_char(vstr_t *vstr, size_t char_pos, unichar chr) {
    16e0:	b580      	push	{r7, lr}
    16e2:	b086      	sub	sp, #24
    16e4:	af00      	add	r7, sp, #0
    16e6:	60f8      	str	r0, [r7, #12]
    16e8:	60b9      	str	r1, [r7, #8]
    16ea:	607a      	str	r2, [r7, #4]
    // TODO UNICODE
    char *s = vstr_ins_blank_bytes(vstr, char_pos, 1);
    16ec:	2201      	movs	r2, #1
    16ee:	68b9      	ldr	r1, [r7, #8]
    16f0:	68f8      	ldr	r0, [r7, #12]
    16f2:	f7ff ffad 	bl	1650 <vstr_ins_blank_bytes>
    16f6:	6178      	str	r0, [r7, #20]
    *s = chr;
    16f8:	687b      	ldr	r3, [r7, #4]
    16fa:	b2da      	uxtb	r2, r3
    16fc:	697b      	ldr	r3, [r7, #20]
    16fe:	701a      	strb	r2, [r3, #0]
}
    1700:	bf00      	nop
    1702:	3718      	adds	r7, #24
    1704:	46bd      	mov	sp, r7
    1706:	bd80      	pop	{r7, pc}

00001708 <vstr_cut_head_bytes>:

void vstr_cut_head_bytes(vstr_t *vstr, size_t bytes_to_cut) {
    1708:	b580      	push	{r7, lr}
    170a:	b082      	sub	sp, #8
    170c:	af00      	add	r7, sp, #0
    170e:	6078      	str	r0, [r7, #4]
    1710:	6039      	str	r1, [r7, #0]
    vstr_cut_out_bytes(vstr, 0, bytes_to_cut);
    1712:	683a      	ldr	r2, [r7, #0]
    1714:	2100      	movs	r1, #0
    1716:	6878      	ldr	r0, [r7, #4]
    1718:	f000 f81e 	bl	1758 <vstr_cut_out_bytes>
}
    171c:	bf00      	nop
    171e:	3708      	adds	r7, #8
    1720:	46bd      	mov	sp, r7
    1722:	bd80      	pop	{r7, pc}

00001724 <vstr_cut_tail_bytes>:

void vstr_cut_tail_bytes(vstr_t *vstr, size_t len) {
    1724:	b480      	push	{r7}
    1726:	b083      	sub	sp, #12
    1728:	af00      	add	r7, sp, #0
    172a:	6078      	str	r0, [r7, #4]
    172c:	6039      	str	r1, [r7, #0]
    if (len > vstr->len) {
    172e:	687b      	ldr	r3, [r7, #4]
    1730:	685a      	ldr	r2, [r3, #4]
    1732:	683b      	ldr	r3, [r7, #0]
    1734:	429a      	cmp	r2, r3
    1736:	d203      	bcs.n	1740 <vstr_cut_tail_bytes+0x1c>
        vstr->len = 0;
    1738:	687b      	ldr	r3, [r7, #4]
    173a:	2200      	movs	r2, #0
    173c:	605a      	str	r2, [r3, #4]
    } else {
        vstr->len -= len;
    }
}
    173e:	e005      	b.n	174c <vstr_cut_tail_bytes+0x28>
        vstr->len -= len;
    1740:	687b      	ldr	r3, [r7, #4]
    1742:	685a      	ldr	r2, [r3, #4]
    1744:	683b      	ldr	r3, [r7, #0]
    1746:	1ad2      	subs	r2, r2, r3
    1748:	687b      	ldr	r3, [r7, #4]
    174a:	605a      	str	r2, [r3, #4]
}
    174c:	bf00      	nop
    174e:	370c      	adds	r7, #12
    1750:	46bd      	mov	sp, r7
    1752:	f85d 7b04 	ldr.w	r7, [sp], #4
    1756:	4770      	bx	lr

00001758 <vstr_cut_out_bytes>:

void vstr_cut_out_bytes(vstr_t *vstr, size_t byte_pos, size_t bytes_to_cut) {
    1758:	b580      	push	{r7, lr}
    175a:	b084      	sub	sp, #16
    175c:	af00      	add	r7, sp, #0
    175e:	60f8      	str	r0, [r7, #12]
    1760:	60b9      	str	r1, [r7, #8]
    1762:	607a      	str	r2, [r7, #4]
    if (byte_pos >= vstr->len) {
    1764:	68fb      	ldr	r3, [r7, #12]
    1766:	685a      	ldr	r2, [r3, #4]
    1768:	68bb      	ldr	r3, [r7, #8]
    176a:	429a      	cmp	r2, r3
    176c:	d924      	bls.n	17b8 <vstr_cut_out_bytes+0x60>
        return;
    } else if (byte_pos + bytes_to_cut >= vstr->len) {
    176e:	68ba      	ldr	r2, [r7, #8]
    1770:	687b      	ldr	r3, [r7, #4]
    1772:	441a      	add	r2, r3
    1774:	68fb      	ldr	r3, [r7, #12]
    1776:	685b      	ldr	r3, [r3, #4]
    1778:	429a      	cmp	r2, r3
    177a:	d303      	bcc.n	1784 <vstr_cut_out_bytes+0x2c>
        vstr->len = byte_pos;
    177c:	68fb      	ldr	r3, [r7, #12]
    177e:	68ba      	ldr	r2, [r7, #8]
    1780:	605a      	str	r2, [r3, #4]
    1782:	e01a      	b.n	17ba <vstr_cut_out_bytes+0x62>
    } else {
        memmove(vstr->buf + byte_pos, vstr->buf + byte_pos + bytes_to_cut, vstr->len - byte_pos - bytes_to_cut);
    1784:	68fb      	ldr	r3, [r7, #12]
    1786:	689a      	ldr	r2, [r3, #8]
    1788:	68bb      	ldr	r3, [r7, #8]
    178a:	18d0      	adds	r0, r2, r3
    178c:	68fb      	ldr	r3, [r7, #12]
    178e:	689a      	ldr	r2, [r3, #8]
    1790:	68b9      	ldr	r1, [r7, #8]
    1792:	687b      	ldr	r3, [r7, #4]
    1794:	440b      	add	r3, r1
    1796:	18d1      	adds	r1, r2, r3
    1798:	68fb      	ldr	r3, [r7, #12]
    179a:	685a      	ldr	r2, [r3, #4]
    179c:	68bb      	ldr	r3, [r7, #8]
    179e:	1ad2      	subs	r2, r2, r3
    17a0:	687b      	ldr	r3, [r7, #4]
    17a2:	1ad3      	subs	r3, r2, r3
    17a4:	461a      	mov	r2, r3
    17a6:	f01a fbf3 	bl	1bf90 <memmove>
        vstr->len -= bytes_to_cut;
    17aa:	68fb      	ldr	r3, [r7, #12]
    17ac:	685a      	ldr	r2, [r3, #4]
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	1ad2      	subs	r2, r2, r3
    17b2:	68fb      	ldr	r3, [r7, #12]
    17b4:	605a      	str	r2, [r3, #4]
    17b6:	e000      	b.n	17ba <vstr_cut_out_bytes+0x62>
        return;
    17b8:	bf00      	nop
    }
}
    17ba:	3710      	adds	r7, #16
    17bc:	46bd      	mov	sp, r7
    17be:	bd80      	pop	{r7, pc}

000017c0 <vstr_printf>:

void vstr_printf(vstr_t *vstr, const char *fmt, ...) {
    17c0:	b40e      	push	{r1, r2, r3}
    17c2:	b580      	push	{r7, lr}
    17c4:	b085      	sub	sp, #20
    17c6:	af00      	add	r7, sp, #0
    17c8:	6078      	str	r0, [r7, #4]
    va_list ap;
    va_start(ap, fmt);
    17ca:	f107 0320 	add.w	r3, r7, #32
    17ce:	60fb      	str	r3, [r7, #12]
    vstr_vprintf(vstr, fmt, ap);
    17d0:	68fa      	ldr	r2, [r7, #12]
    17d2:	69f9      	ldr	r1, [r7, #28]
    17d4:	6878      	ldr	r0, [r7, #4]
    17d6:	f000 f807 	bl	17e8 <vstr_vprintf>
    va_end(ap);
}
    17da:	bf00      	nop
    17dc:	3714      	adds	r7, #20
    17de:	46bd      	mov	sp, r7
    17e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    17e4:	b003      	add	sp, #12
    17e6:	4770      	bx	lr

000017e8 <vstr_vprintf>:

void vstr_vprintf(vstr_t *vstr, const char *fmt, va_list ap) {
    17e8:	b580      	push	{r7, lr}
    17ea:	b086      	sub	sp, #24
    17ec:	af00      	add	r7, sp, #0
    17ee:	60f8      	str	r0, [r7, #12]
    17f0:	60b9      	str	r1, [r7, #8]
    17f2:	607a      	str	r2, [r7, #4]
    mp_print_t print = {vstr, (mp_print_strn_t)vstr_add_strn};
    17f4:	68fb      	ldr	r3, [r7, #12]
    17f6:	613b      	str	r3, [r7, #16]
    17f8:	4b06      	ldr	r3, [pc, #24]	; (1814 <vstr_vprintf+0x2c>)
    17fa:	617b      	str	r3, [r7, #20]
    mp_vprintf(&print, fmt, ap);
    17fc:	f107 0310 	add.w	r3, r7, #16
    1800:	687a      	ldr	r2, [r7, #4]
    1802:	68b9      	ldr	r1, [r7, #8]
    1804:	4618      	mov	r0, r3
    1806:	f000 fb63 	bl	1ed0 <mp_vprintf>
}
    180a:	bf00      	nop
    180c:	3718      	adds	r7, #24
    180e:	46bd      	mov	sp, r7
    1810:	bd80      	pop	{r7, pc}
    1812:	bf00      	nop
    1814:	00001615 	.word	0x00001615

00001818 <MP_OBJ_IS_SMALL_INT>:
// unpack small ints, qstrs and full object pointers.

#if MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_A

static inline bool MP_OBJ_IS_SMALL_INT(mp_const_obj_t o)
    { return ((((mp_int_t)(o)) & 1) != 0); }
    1818:	b480      	push	{r7}
    181a:	b083      	sub	sp, #12
    181c:	af00      	add	r7, sp, #0
    181e:	6078      	str	r0, [r7, #4]
    1820:	687b      	ldr	r3, [r7, #4]
    1822:	f003 0301 	and.w	r3, r3, #1
    1826:	2b00      	cmp	r3, #0
    1828:	bf14      	ite	ne
    182a:	2301      	movne	r3, #1
    182c:	2300      	moveq	r3, #0
    182e:	b2db      	uxtb	r3, r3
    1830:	4618      	mov	r0, r3
    1832:	370c      	adds	r7, #12
    1834:	46bd      	mov	sp, r7
    1836:	f85d 7b04 	ldr.w	r7, [sp], #4
    183a:	4770      	bx	lr

0000183c <MP_OBJ_IS_OBJ>:
mp_float_t mp_obj_float_get(mp_obj_t self_in);
mp_obj_t mp_obj_new_float(mp_float_t value);
#endif

static inline bool MP_OBJ_IS_OBJ(mp_const_obj_t o)
    { return ((((mp_int_t)(o)) & 3) == 0); }
    183c:	b480      	push	{r7}
    183e:	b083      	sub	sp, #12
    1840:	af00      	add	r7, sp, #0
    1842:	6078      	str	r0, [r7, #4]
    1844:	687b      	ldr	r3, [r7, #4]
    1846:	f003 0303 	and.w	r3, r3, #3
    184a:	2b00      	cmp	r3, #0
    184c:	bf0c      	ite	eq
    184e:	2301      	moveq	r3, #1
    1850:	2300      	movne	r3, #0
    1852:	b2db      	uxtb	r3, r3
    1854:	4618      	mov	r0, r3
    1856:	370c      	adds	r7, #12
    1858:	46bd      	mov	sp, r7
    185a:	f85d 7b04 	ldr.w	r7, [sp], #4
    185e:	4770      	bx	lr

00001860 <plat_print_strn>:
#endif

static const char pad_spaces[] = "                ";
static const char pad_zeroes[] = "0000000000000000";

STATIC void plat_print_strn(void *env, const char *str, size_t len) {
    1860:	b580      	push	{r7, lr}
    1862:	b084      	sub	sp, #16
    1864:	af00      	add	r7, sp, #0
    1866:	60f8      	str	r0, [r7, #12]
    1868:	60b9      	str	r1, [r7, #8]
    186a:	607a      	str	r2, [r7, #4]
    (void)env;
    MP_PLAT_PRINT_STRN(str, len);
    186c:	6879      	ldr	r1, [r7, #4]
    186e:	68b8      	ldr	r0, [r7, #8]
    1870:	f01a f870 	bl	1b954 <mp_hal_stdout_tx_strn_cooked>
}
    1874:	bf00      	nop
    1876:	3710      	adds	r7, #16
    1878:	46bd      	mov	sp, r7
    187a:	bd80      	pop	{r7, pc}

0000187c <mp_print_str>:

const mp_print_t mp_plat_print = {NULL, plat_print_strn};

int mp_print_str(const mp_print_t *print, const char *str) {
    187c:	b580      	push	{r7, lr}
    187e:	b084      	sub	sp, #16
    1880:	af00      	add	r7, sp, #0
    1882:	6078      	str	r0, [r7, #4]
    1884:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
    1886:	6838      	ldr	r0, [r7, #0]
    1888:	f01a fc56 	bl	1c138 <strlen>
    188c:	60f8      	str	r0, [r7, #12]
    if (len) {
    188e:	68fb      	ldr	r3, [r7, #12]
    1890:	2b00      	cmp	r3, #0
    1892:	d006      	beq.n	18a2 <mp_print_str+0x26>
        print->print_strn(print->data, str, len);
    1894:	687b      	ldr	r3, [r7, #4]
    1896:	685b      	ldr	r3, [r3, #4]
    1898:	687a      	ldr	r2, [r7, #4]
    189a:	6810      	ldr	r0, [r2, #0]
    189c:	68fa      	ldr	r2, [r7, #12]
    189e:	6839      	ldr	r1, [r7, #0]
    18a0:	4798      	blx	r3
    }
    return len;
    18a2:	68fb      	ldr	r3, [r7, #12]
}
    18a4:	4618      	mov	r0, r3
    18a6:	3710      	adds	r7, #16
    18a8:	46bd      	mov	sp, r7
    18aa:	bd80      	pop	{r7, pc}

000018ac <mp_print_strn>:

int mp_print_strn(const mp_print_t *print, const char *str, size_t len, int flags, char fill, int width) {
    18ac:	b580      	push	{r7, lr}
    18ae:	b08c      	sub	sp, #48	; 0x30
    18b0:	af00      	add	r7, sp, #0
    18b2:	60f8      	str	r0, [r7, #12]
    18b4:	60b9      	str	r1, [r7, #8]
    18b6:	607a      	str	r2, [r7, #4]
    18b8:	603b      	str	r3, [r7, #0]
    int left_pad = 0;
    18ba:	2300      	movs	r3, #0
    18bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    int right_pad = 0;
    18be:	2300      	movs	r3, #0
    18c0:	62bb      	str	r3, [r7, #40]	; 0x28
    int pad = width - len;
    18c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	1ad3      	subs	r3, r2, r3
    18c8:	613b      	str	r3, [r7, #16]
    int pad_size;
    int total_chars_printed = 0;
    18ca:	2300      	movs	r3, #0
    18cc:	623b      	str	r3, [r7, #32]
    const char *pad_chars;

    if (!fill || fill == ' ') {
    18ce:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    18d2:	2b00      	cmp	r3, #0
    18d4:	d003      	beq.n	18de <mp_print_strn+0x32>
    18d6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    18da:	2b20      	cmp	r3, #32
    18dc:	d104      	bne.n	18e8 <mp_print_strn+0x3c>
        pad_chars = pad_spaces;
    18de:	4b3d      	ldr	r3, [pc, #244]	; (19d4 <mp_print_strn+0x128>)
    18e0:	61fb      	str	r3, [r7, #28]
        pad_size = sizeof(pad_spaces) - 1;
    18e2:	2310      	movs	r3, #16
    18e4:	627b      	str	r3, [r7, #36]	; 0x24
    18e6:	e00d      	b.n	1904 <mp_print_strn+0x58>
    } else if (fill == '0') {
    18e8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    18ec:	2b30      	cmp	r3, #48	; 0x30
    18ee:	d104      	bne.n	18fa <mp_print_strn+0x4e>
        pad_chars = pad_zeroes;
    18f0:	4b39      	ldr	r3, [pc, #228]	; (19d8 <mp_print_strn+0x12c>)
    18f2:	61fb      	str	r3, [r7, #28]
        pad_size = sizeof(pad_zeroes) - 1;
    18f4:	2310      	movs	r3, #16
    18f6:	627b      	str	r3, [r7, #36]	; 0x24
    18f8:	e004      	b.n	1904 <mp_print_strn+0x58>
    } else {
        // Other pad characters are fairly unusual, so we'll take the hit
        // and output them 1 at a time.
        pad_chars = &fill;
    18fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
    18fe:	61fb      	str	r3, [r7, #28]
        pad_size = 1;
    1900:	2301      	movs	r3, #1
    1902:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (flags & PF_FLAG_CENTER_ADJUST) {
    1904:	683b      	ldr	r3, [r7, #0]
    1906:	f003 0380 	and.w	r3, r3, #128	; 0x80
    190a:	2b00      	cmp	r3, #0
    190c:	d009      	beq.n	1922 <mp_print_strn+0x76>
        left_pad = pad / 2;
    190e:	693b      	ldr	r3, [r7, #16]
    1910:	0fda      	lsrs	r2, r3, #31
    1912:	4413      	add	r3, r2
    1914:	105b      	asrs	r3, r3, #1
    1916:	62fb      	str	r3, [r7, #44]	; 0x2c
        right_pad = pad - left_pad;
    1918:	693a      	ldr	r2, [r7, #16]
    191a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    191c:	1ad3      	subs	r3, r2, r3
    191e:	62bb      	str	r3, [r7, #40]	; 0x28
    1920:	e009      	b.n	1936 <mp_print_strn+0x8a>
    } else if (flags & PF_FLAG_LEFT_ADJUST) {
    1922:	683b      	ldr	r3, [r7, #0]
    1924:	f003 0301 	and.w	r3, r3, #1
    1928:	2b00      	cmp	r3, #0
    192a:	d002      	beq.n	1932 <mp_print_strn+0x86>
        right_pad = pad;
    192c:	693b      	ldr	r3, [r7, #16]
    192e:	62bb      	str	r3, [r7, #40]	; 0x28
    1930:	e001      	b.n	1936 <mp_print_strn+0x8a>
    } else {
        left_pad = pad;
    1932:	693b      	ldr	r3, [r7, #16]
    1934:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (left_pad > 0) {
    1936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1938:	2b00      	cmp	r3, #0
    193a:	dd1a      	ble.n	1972 <mp_print_strn+0xc6>
        total_chars_printed += left_pad;
    193c:	6a3a      	ldr	r2, [r7, #32]
    193e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1940:	4413      	add	r3, r2
    1942:	623b      	str	r3, [r7, #32]
        while (left_pad > 0) {
    1944:	e012      	b.n	196c <mp_print_strn+0xc0>
            int p = left_pad;
    1946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1948:	61bb      	str	r3, [r7, #24]
            if (p > pad_size) {
    194a:	69ba      	ldr	r2, [r7, #24]
    194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    194e:	429a      	cmp	r2, r3
    1950:	dd01      	ble.n	1956 <mp_print_strn+0xaa>
                p = pad_size;
    1952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1954:	61bb      	str	r3, [r7, #24]
            }
            print->print_strn(print->data, pad_chars, p);
    1956:	68fb      	ldr	r3, [r7, #12]
    1958:	685b      	ldr	r3, [r3, #4]
    195a:	68fa      	ldr	r2, [r7, #12]
    195c:	6810      	ldr	r0, [r2, #0]
    195e:	69ba      	ldr	r2, [r7, #24]
    1960:	69f9      	ldr	r1, [r7, #28]
    1962:	4798      	blx	r3
            left_pad -= p;
    1964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1966:	69bb      	ldr	r3, [r7, #24]
    1968:	1ad3      	subs	r3, r2, r3
    196a:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (left_pad > 0) {
    196c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    196e:	2b00      	cmp	r3, #0
    1970:	dce9      	bgt.n	1946 <mp_print_strn+0x9a>
        }
    }
    if (len) {
    1972:	687b      	ldr	r3, [r7, #4]
    1974:	2b00      	cmp	r3, #0
    1976:	d00a      	beq.n	198e <mp_print_strn+0xe2>
        print->print_strn(print->data, str, len);
    1978:	68fb      	ldr	r3, [r7, #12]
    197a:	685b      	ldr	r3, [r3, #4]
    197c:	68fa      	ldr	r2, [r7, #12]
    197e:	6810      	ldr	r0, [r2, #0]
    1980:	687a      	ldr	r2, [r7, #4]
    1982:	68b9      	ldr	r1, [r7, #8]
    1984:	4798      	blx	r3
        total_chars_printed += len;
    1986:	6a3a      	ldr	r2, [r7, #32]
    1988:	687b      	ldr	r3, [r7, #4]
    198a:	4413      	add	r3, r2
    198c:	623b      	str	r3, [r7, #32]
    }
    if (right_pad > 0) {
    198e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1990:	2b00      	cmp	r3, #0
    1992:	dd1a      	ble.n	19ca <mp_print_strn+0x11e>
        total_chars_printed += right_pad;
    1994:	6a3a      	ldr	r2, [r7, #32]
    1996:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1998:	4413      	add	r3, r2
    199a:	623b      	str	r3, [r7, #32]
        while (right_pad > 0) {
    199c:	e012      	b.n	19c4 <mp_print_strn+0x118>
            int p = right_pad;
    199e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    19a0:	617b      	str	r3, [r7, #20]
            if (p > pad_size) {
    19a2:	697a      	ldr	r2, [r7, #20]
    19a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    19a6:	429a      	cmp	r2, r3
    19a8:	dd01      	ble.n	19ae <mp_print_strn+0x102>
                p = pad_size;
    19aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    19ac:	617b      	str	r3, [r7, #20]
            }
            print->print_strn(print->data, pad_chars, p);
    19ae:	68fb      	ldr	r3, [r7, #12]
    19b0:	685b      	ldr	r3, [r3, #4]
    19b2:	68fa      	ldr	r2, [r7, #12]
    19b4:	6810      	ldr	r0, [r2, #0]
    19b6:	697a      	ldr	r2, [r7, #20]
    19b8:	69f9      	ldr	r1, [r7, #28]
    19ba:	4798      	blx	r3
            right_pad -= p;
    19bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    19be:	697b      	ldr	r3, [r7, #20]
    19c0:	1ad3      	subs	r3, r2, r3
    19c2:	62bb      	str	r3, [r7, #40]	; 0x28
        while (right_pad > 0) {
    19c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    19c6:	2b00      	cmp	r3, #0
    19c8:	dce9      	bgt.n	199e <mp_print_strn+0xf2>
        }
    }
    return total_chars_printed;
    19ca:	6a3b      	ldr	r3, [r7, #32]
}
    19cc:	4618      	mov	r0, r3
    19ce:	3730      	adds	r7, #48	; 0x30
    19d0:	46bd      	mov	sp, r7
    19d2:	bd80      	pop	{r7, pc}
    19d4:	0001d804 	.word	0x0001d804
    19d8:	0001d818 	.word	0x0001d818

000019dc <mp_print_int>:
// print the prefix of a non-base-10 number, so we don't need code for this.
#define SUPPORT_INT_BASE_PREFIX (0)

// This function is used exclusively by mp_vprintf to format ints.
// It needs to be a separate function to mp_print_mp_int, since converting to a mp_int looses the MSB.
STATIC int mp_print_int(const mp_print_t *print, mp_uint_t x, int sgn, int base, int base_char, int flags, char fill, int width) {
    19dc:	b580      	push	{r7, lr}
    19de:	b08e      	sub	sp, #56	; 0x38
    19e0:	af02      	add	r7, sp, #8
    19e2:	60f8      	str	r0, [r7, #12]
    19e4:	60b9      	str	r1, [r7, #8]
    19e6:	607a      	str	r2, [r7, #4]
    19e8:	603b      	str	r3, [r7, #0]
    char sign = 0;
    19ea:	2300      	movs	r3, #0
    19ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (sgn) {
    19f0:	687b      	ldr	r3, [r7, #4]
    19f2:	2b00      	cmp	r3, #0
    19f4:	d01a      	beq.n	1a2c <mp_print_int+0x50>
        if ((mp_int_t)x < 0) {
    19f6:	68bb      	ldr	r3, [r7, #8]
    19f8:	2b00      	cmp	r3, #0
    19fa:	da06      	bge.n	1a0a <mp_print_int+0x2e>
            sign = '-';
    19fc:	232d      	movs	r3, #45	; 0x2d
    19fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            x = -x;
    1a02:	68bb      	ldr	r3, [r7, #8]
    1a04:	425b      	negs	r3, r3
    1a06:	60bb      	str	r3, [r7, #8]
    1a08:	e010      	b.n	1a2c <mp_print_int+0x50>
        } else if (flags & PF_FLAG_SHOW_SIGN) {
    1a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1a0c:	f003 0302 	and.w	r3, r3, #2
    1a10:	2b00      	cmp	r3, #0
    1a12:	d003      	beq.n	1a1c <mp_print_int+0x40>
            sign = '+';
    1a14:	232b      	movs	r3, #43	; 0x2b
    1a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    1a1a:	e007      	b.n	1a2c <mp_print_int+0x50>
        } else if (flags & PF_FLAG_SPACE_SIGN) {
    1a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1a1e:	f003 0304 	and.w	r3, r3, #4
    1a22:	2b00      	cmp	r3, #0
    1a24:	d002      	beq.n	1a2c <mp_print_int+0x50>
            sign = ' ';
    1a26:	2320      	movs	r3, #32
    1a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        }
    }

    char buf[INT_BUF_SIZE];
    char *b = buf + INT_BUF_SIZE;
    1a2c:	f107 0310 	add.w	r3, r7, #16
    1a30:	3310      	adds	r3, #16
    1a32:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (x == 0) {
    1a34:	68bb      	ldr	r3, [r7, #8]
    1a36:	2b00      	cmp	r3, #0
    1a38:	d106      	bne.n	1a48 <mp_print_int+0x6c>
        *(--b) = '0';
    1a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a3c:	3b01      	subs	r3, #1
    1a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    1a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a42:	2230      	movs	r2, #48	; 0x30
    1a44:	701a      	strb	r2, [r3, #0]
    1a46:	e027      	b.n	1a98 <mp_print_int+0xbc>
    } else {
        do {
            int c = x % base;
    1a48:	683a      	ldr	r2, [r7, #0]
    1a4a:	68bb      	ldr	r3, [r7, #8]
    1a4c:	fbb3 f1f2 	udiv	r1, r3, r2
    1a50:	fb02 f201 	mul.w	r2, r2, r1
    1a54:	1a9b      	subs	r3, r3, r2
    1a56:	62bb      	str	r3, [r7, #40]	; 0x28
            x /= base;
    1a58:	683b      	ldr	r3, [r7, #0]
    1a5a:	68ba      	ldr	r2, [r7, #8]
    1a5c:	fbb2 f3f3 	udiv	r3, r2, r3
    1a60:	60bb      	str	r3, [r7, #8]
            if (c >= 10) {
    1a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1a64:	2b09      	cmp	r3, #9
    1a66:	dd05      	ble.n	1a74 <mp_print_int+0x98>
                c += base_char - 10;
    1a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1a6a:	3b0a      	subs	r3, #10
    1a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1a6e:	4413      	add	r3, r2
    1a70:	62bb      	str	r3, [r7, #40]	; 0x28
    1a72:	e002      	b.n	1a7a <mp_print_int+0x9e>
            } else {
                c += '0';
    1a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1a76:	3330      	adds	r3, #48	; 0x30
    1a78:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            *(--b) = c;
    1a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a7c:	3b01      	subs	r3, #1
    1a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    1a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1a82:	b2da      	uxtb	r2, r3
    1a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a86:	701a      	strb	r2, [r3, #0]
        } while (b > buf && x != 0);
    1a88:	f107 0310 	add.w	r3, r7, #16
    1a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1a8e:	429a      	cmp	r2, r3
    1a90:	d902      	bls.n	1a98 <mp_print_int+0xbc>
    1a92:	68bb      	ldr	r3, [r7, #8]
    1a94:	2b00      	cmp	r3, #0
    1a96:	d1d7      	bne.n	1a48 <mp_print_int+0x6c>
            prefix_char = base_char + 'x' - 'a';
        }
    }
    #endif

    int len = 0;
    1a98:	2300      	movs	r3, #0
    1a9a:	627b      	str	r3, [r7, #36]	; 0x24
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1aa2:	2b00      	cmp	r3, #0
    1aa4:	d017      	beq.n	1ad6 <mp_print_int+0xfa>
        if (sign) {
    1aa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    1aaa:	2b00      	cmp	r3, #0
    1aac:	d023      	beq.n	1af6 <mp_print_int+0x11a>
            len += mp_print_strn(print, &sign, 1, flags, fill, 1);
    1aae:	f107 0123 	add.w	r1, r7, #35	; 0x23
    1ab2:	2301      	movs	r3, #1
    1ab4:	9301      	str	r3, [sp, #4]
    1ab6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    1aba:	9300      	str	r3, [sp, #0]
    1abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1abe:	2201      	movs	r2, #1
    1ac0:	68f8      	ldr	r0, [r7, #12]
    1ac2:	f7ff fef3 	bl	18ac <mp_print_strn>
    1ac6:	4602      	mov	r2, r0
    1ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1aca:	4413      	add	r3, r2
    1acc:	627b      	str	r3, [r7, #36]	; 0x24
            width--;
    1ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1ad0:	3b01      	subs	r3, #1
    1ad2:	647b      	str	r3, [r7, #68]	; 0x44
    1ad4:	e00f      	b.n	1af6 <mp_print_int+0x11a>
        if (prefix_char && b > &buf[1]) {
            *(--b) = prefix_char;
            *(--b) = '0';
        }
        #endif
        if (sign && b > buf) {
    1ad6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    1ada:	2b00      	cmp	r3, #0
    1adc:	d00b      	beq.n	1af6 <mp_print_int+0x11a>
    1ade:	f107 0310 	add.w	r3, r7, #16
    1ae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1ae4:	429a      	cmp	r2, r3
    1ae6:	d906      	bls.n	1af6 <mp_print_int+0x11a>
            *(--b) = sign;
    1ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1aea:	3b01      	subs	r3, #1
    1aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    1aee:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    1af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1af4:	701a      	strb	r2, [r3, #0]
        }
    }

    len += mp_print_strn(print, b, buf + INT_BUF_SIZE - b, flags, fill, width);
    1af6:	f107 0310 	add.w	r3, r7, #16
    1afa:	3310      	adds	r3, #16
    1afc:	461a      	mov	r2, r3
    1afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1b00:	1ad3      	subs	r3, r2, r3
    1b02:	461a      	mov	r2, r3
    1b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1b06:	9301      	str	r3, [sp, #4]
    1b08:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    1b0c:	9300      	str	r3, [sp, #0]
    1b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1b10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    1b12:	68f8      	ldr	r0, [r7, #12]
    1b14:	f7ff feca 	bl	18ac <mp_print_strn>
    1b18:	4602      	mov	r2, r0
    1b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1b1c:	4413      	add	r3, r2
    1b1e:	627b      	str	r3, [r7, #36]	; 0x24
    return len;
    1b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    1b22:	4618      	mov	r0, r3
    1b24:	3730      	adds	r7, #48	; 0x30
    1b26:	46bd      	mov	sp, r7
    1b28:	bd80      	pop	{r7, pc}
    1b2a:	bf00      	nop

00001b2c <mp_print_mp_int>:

int mp_print_mp_int(const mp_print_t *print, mp_obj_t x, int base, int base_char, int flags, char fill, int width, int prec) {
    1b2c:	b590      	push	{r4, r7, lr}
    1b2e:	b09b      	sub	sp, #108	; 0x6c
    1b30:	af04      	add	r7, sp, #16
    1b32:	60f8      	str	r0, [r7, #12]
    1b34:	60b9      	str	r1, [r7, #8]
    1b36:	607a      	str	r2, [r7, #4]
    1b38:	603b      	str	r3, [r7, #0]
    // These are the only values for "base" that are required to be supported by this
    // function, since Python only allows the user to format integers in these bases.
    // If needed this function could be generalised to handle other values.
    assert(base == 2 || base == 8 || base == 10 || base == 16);
    1b3a:	687b      	ldr	r3, [r7, #4]
    1b3c:	2b02      	cmp	r3, #2
    1b3e:	d00e      	beq.n	1b5e <mp_print_mp_int+0x32>
    1b40:	687b      	ldr	r3, [r7, #4]
    1b42:	2b08      	cmp	r3, #8
    1b44:	d00b      	beq.n	1b5e <mp_print_mp_int+0x32>
    1b46:	687b      	ldr	r3, [r7, #4]
    1b48:	2b0a      	cmp	r3, #10
    1b4a:	d008      	beq.n	1b5e <mp_print_mp_int+0x32>
    1b4c:	687b      	ldr	r3, [r7, #4]
    1b4e:	2b10      	cmp	r3, #16
    1b50:	d005      	beq.n	1b5e <mp_print_mp_int+0x32>
    1b52:	4b8f      	ldr	r3, [pc, #572]	; (1d90 <mp_print_mp_int+0x264>)
    1b54:	4a8f      	ldr	r2, [pc, #572]	; (1d94 <mp_print_mp_int+0x268>)
    1b56:	21d0      	movs	r1, #208	; 0xd0
    1b58:	488f      	ldr	r0, [pc, #572]	; (1d98 <mp_print_mp_int+0x26c>)
    1b5a:	f019 fc07 	bl	1b36c <__assert_func>

    if (!MP_OBJ_IS_INT(x)) {
    1b5e:	68b8      	ldr	r0, [r7, #8]
    1b60:	f7ff fe5a 	bl	1818 <MP_OBJ_IS_SMALL_INT>
    1b64:	4603      	mov	r3, r0
    1b66:	f083 0301 	eor.w	r3, r3, #1
    1b6a:	b2db      	uxtb	r3, r3
    1b6c:	2b00      	cmp	r3, #0
    1b6e:	d015      	beq.n	1b9c <mp_print_mp_int+0x70>
    1b70:	68b8      	ldr	r0, [r7, #8]
    1b72:	f7ff fe63 	bl	183c <MP_OBJ_IS_OBJ>
    1b76:	4603      	mov	r3, r0
    1b78:	f083 0301 	eor.w	r3, r3, #1
    1b7c:	b2db      	uxtb	r3, r3
    1b7e:	2b00      	cmp	r3, #0
    1b80:	d104      	bne.n	1b8c <mp_print_mp_int+0x60>
    1b82:	68bb      	ldr	r3, [r7, #8]
    1b84:	681b      	ldr	r3, [r3, #0]
    1b86:	4a85      	ldr	r2, [pc, #532]	; (1d9c <mp_print_mp_int+0x270>)
    1b88:	4293      	cmp	r3, r2
    1b8a:	d007      	beq.n	1b9c <mp_print_mp_int+0x70>
        // This will convert booleans to int, or raise an error for
        // non-integer types.
        x = MP_OBJ_NEW_SMALL_INT(mp_obj_get_int(x));
    1b8c:	68b8      	ldr	r0, [r7, #8]
    1b8e:	f00c f81f 	bl	dbd0 <mp_obj_get_int>
    1b92:	4603      	mov	r3, r0
    1b94:	005b      	lsls	r3, r3, #1
    1b96:	f043 0301 	orr.w	r3, r3, #1
    1b9a:	60bb      	str	r3, [r7, #8]
    }

    if ((flags & (PF_FLAG_LEFT_ADJUST | PF_FLAG_CENTER_ADJUST)) == 0 && fill == '0') {
    1b9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1b9e:	f003 0381 	and.w	r3, r3, #129	; 0x81
    1ba2:	2b00      	cmp	r3, #0
    1ba4:	d10b      	bne.n	1bbe <mp_print_mp_int+0x92>
    1ba6:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
    1baa:	2b30      	cmp	r3, #48	; 0x30
    1bac:	d107      	bne.n	1bbe <mp_print_mp_int+0x92>
        if (prec > width) {
    1bae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    1bb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1bb2:	429a      	cmp	r2, r3
    1bb4:	dd01      	ble.n	1bba <mp_print_mp_int+0x8e>
            width = prec;
    1bb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1bb8:	673b      	str	r3, [r7, #112]	; 0x70
        }
        prec = 0;
    1bba:	2300      	movs	r3, #0
    1bbc:	677b      	str	r3, [r7, #116]	; 0x74
    }
    char prefix_buf[4];
    char *prefix = prefix_buf;
    1bbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1bc2:	657b      	str	r3, [r7, #84]	; 0x54

    if (mp_obj_int_sign(x) >= 0) {
    1bc4:	68b8      	ldr	r0, [r7, #8]
    1bc6:	f00e fe47 	bl	10858 <mp_obj_int_sign>
    1bca:	4603      	mov	r3, r0
    1bcc:	2b00      	cmp	r3, #0
    1bce:	db14      	blt.n	1bfa <mp_print_mp_int+0xce>
        if (flags & PF_FLAG_SHOW_SIGN) {
    1bd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1bd2:	f003 0302 	and.w	r3, r3, #2
    1bd6:	2b00      	cmp	r3, #0
    1bd8:	d005      	beq.n	1be6 <mp_print_mp_int+0xba>
            *prefix++ = '+';
    1bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1bdc:	1c5a      	adds	r2, r3, #1
    1bde:	657a      	str	r2, [r7, #84]	; 0x54
    1be0:	222b      	movs	r2, #43	; 0x2b
    1be2:	701a      	strb	r2, [r3, #0]
    1be4:	e009      	b.n	1bfa <mp_print_mp_int+0xce>
        } else if (flags & PF_FLAG_SPACE_SIGN) {
    1be6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1be8:	f003 0304 	and.w	r3, r3, #4
    1bec:	2b00      	cmp	r3, #0
    1bee:	d004      	beq.n	1bfa <mp_print_mp_int+0xce>
            *prefix++ = ' ';
    1bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1bf2:	1c5a      	adds	r2, r3, #1
    1bf4:	657a      	str	r2, [r7, #84]	; 0x54
    1bf6:	2220      	movs	r2, #32
    1bf8:	701a      	strb	r2, [r3, #0]
        }
    }

    if (flags & PF_FLAG_SHOW_PREFIX) {
    1bfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1bfc:	f003 0310 	and.w	r3, r3, #16
    1c00:	2b00      	cmp	r3, #0
    1c02:	d036      	beq.n	1c72 <mp_print_mp_int+0x146>
        if (base == 2) {
    1c04:	687b      	ldr	r3, [r7, #4]
    1c06:	2b02      	cmp	r3, #2
    1c08:	d10d      	bne.n	1c26 <mp_print_mp_int+0xfa>
            *prefix++ = '0';
    1c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c0c:	1c5a      	adds	r2, r3, #1
    1c0e:	657a      	str	r2, [r7, #84]	; 0x54
    1c10:	2230      	movs	r2, #48	; 0x30
    1c12:	701a      	strb	r2, [r3, #0]
            *prefix++ = base_char + 'b' - 'a';
    1c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c16:	1c5a      	adds	r2, r3, #1
    1c18:	657a      	str	r2, [r7, #84]	; 0x54
    1c1a:	683a      	ldr	r2, [r7, #0]
    1c1c:	b2d2      	uxtb	r2, r2
    1c1e:	3201      	adds	r2, #1
    1c20:	b2d2      	uxtb	r2, r2
    1c22:	701a      	strb	r2, [r3, #0]
    1c24:	e025      	b.n	1c72 <mp_print_mp_int+0x146>
        } else if (base == 8) {
    1c26:	687b      	ldr	r3, [r7, #4]
    1c28:	2b08      	cmp	r3, #8
    1c2a:	d112      	bne.n	1c52 <mp_print_mp_int+0x126>
            *prefix++ = '0';
    1c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c2e:	1c5a      	adds	r2, r3, #1
    1c30:	657a      	str	r2, [r7, #84]	; 0x54
    1c32:	2230      	movs	r2, #48	; 0x30
    1c34:	701a      	strb	r2, [r3, #0]
            if (flags & PF_FLAG_SHOW_OCTAL_LETTER) {
    1c36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1c38:	f403 7300 	and.w	r3, r3, #512	; 0x200
    1c3c:	2b00      	cmp	r3, #0
    1c3e:	d018      	beq.n	1c72 <mp_print_mp_int+0x146>
                *prefix++ = base_char + 'o' - 'a';
    1c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c42:	1c5a      	adds	r2, r3, #1
    1c44:	657a      	str	r2, [r7, #84]	; 0x54
    1c46:	683a      	ldr	r2, [r7, #0]
    1c48:	b2d2      	uxtb	r2, r2
    1c4a:	320e      	adds	r2, #14
    1c4c:	b2d2      	uxtb	r2, r2
    1c4e:	701a      	strb	r2, [r3, #0]
    1c50:	e00f      	b.n	1c72 <mp_print_mp_int+0x146>
            }
        } else if (base == 16) {
    1c52:	687b      	ldr	r3, [r7, #4]
    1c54:	2b10      	cmp	r3, #16
    1c56:	d10c      	bne.n	1c72 <mp_print_mp_int+0x146>
            *prefix++ = '0';
    1c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c5a:	1c5a      	adds	r2, r3, #1
    1c5c:	657a      	str	r2, [r7, #84]	; 0x54
    1c5e:	2230      	movs	r2, #48	; 0x30
    1c60:	701a      	strb	r2, [r3, #0]
            *prefix++ = base_char + 'x' - 'a';
    1c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c64:	1c5a      	adds	r2, r3, #1
    1c66:	657a      	str	r2, [r7, #84]	; 0x54
    1c68:	683a      	ldr	r2, [r7, #0]
    1c6a:	b2d2      	uxtb	r2, r2
    1c6c:	3217      	adds	r2, #23
    1c6e:	b2d2      	uxtb	r2, r2
    1c70:	701a      	strb	r2, [r3, #0]
        }
    }
    *prefix = '\0';
    1c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c74:	2200      	movs	r2, #0
    1c76:	701a      	strb	r2, [r3, #0]
    int prefix_len = prefix - prefix_buf;
    1c78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1c7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1c7e:	1ad3      	subs	r3, r2, r3
    1c80:	63bb      	str	r3, [r7, #56]	; 0x38
    prefix = prefix_buf;
    1c82:	f107 0334 	add.w	r3, r7, #52	; 0x34
    1c86:	657b      	str	r3, [r7, #84]	; 0x54

    char comma = '\0';
    1c88:	2300      	movs	r3, #0
    1c8a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    if (flags & PF_FLAG_SHOW_COMMA) {
    1c8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1c90:	f003 0320 	and.w	r3, r3, #32
    1c94:	2b00      	cmp	r3, #0
    1c96:	d002      	beq.n	1c9e <mp_print_mp_int+0x172>
        comma = ',';
    1c98:	232c      	movs	r3, #44	; 0x2c
    1c9a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    }

    // The size of this buffer is rather arbitrary. If it's not large
    // enough, a dynamic one will be allocated.
    char stack_buf[sizeof(mp_int_t) * 4];
    char *buf = stack_buf;
    1c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
    1ca2:	623b      	str	r3, [r7, #32]
    size_t buf_size = sizeof(stack_buf);
    1ca4:	2310      	movs	r3, #16
    1ca6:	61fb      	str	r3, [r7, #28]
    size_t fmt_size = 0;
    1ca8:	2300      	movs	r3, #0
    1caa:	61bb      	str	r3, [r7, #24]
    char *str;

    if (prec > 1) {
    1cac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1cae:	2b01      	cmp	r3, #1
    1cb0:	dd03      	ble.n	1cba <mp_print_mp_int+0x18e>
        flags |= PF_FLAG_PAD_AFTER_SIGN;
    1cb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1cb8:	66bb      	str	r3, [r7, #104]	; 0x68
    }
    char sign = '\0';
    1cba:	2300      	movs	r3, #0
    1cbc:	75fb      	strb	r3, [r7, #23]
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1cbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	d021      	beq.n	1d0c <mp_print_mp_int+0x1e0>
        // We add the pad in this function, so since the pad goes after
        // the sign & prefix, we format without a prefix
        str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size,
    1cc8:	683b      	ldr	r3, [r7, #0]
    1cca:	b2db      	uxtb	r3, r3
    1ccc:	f107 0418 	add.w	r4, r7, #24
    1cd0:	f107 011c 	add.w	r1, r7, #28
    1cd4:	f107 0020 	add.w	r0, r7, #32
    1cd8:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
    1cdc:	9203      	str	r2, [sp, #12]
    1cde:	9302      	str	r3, [sp, #8]
    1ce0:	2300      	movs	r3, #0
    1ce2:	9301      	str	r3, [sp, #4]
    1ce4:	687b      	ldr	r3, [r7, #4]
    1ce6:	9300      	str	r3, [sp, #0]
    1ce8:	68bb      	ldr	r3, [r7, #8]
    1cea:	4622      	mov	r2, r4
    1cec:	f00e fcf0 	bl	106d0 <mp_obj_int_formatted>
    1cf0:	64f8      	str	r0, [r7, #76]	; 0x4c
                                   x, base, NULL, base_char, comma);
        if (*str == '-') {
    1cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1cf4:	781b      	ldrb	r3, [r3, #0]
    1cf6:	2b2d      	cmp	r3, #45	; 0x2d
    1cf8:	d11d      	bne.n	1d36 <mp_print_mp_int+0x20a>
            sign = *str++;
    1cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1cfc:	1c5a      	adds	r2, r3, #1
    1cfe:	64fa      	str	r2, [r7, #76]	; 0x4c
    1d00:	781b      	ldrb	r3, [r3, #0]
    1d02:	75fb      	strb	r3, [r7, #23]
            fmt_size--;
    1d04:	69bb      	ldr	r3, [r7, #24]
    1d06:	3b01      	subs	r3, #1
    1d08:	61bb      	str	r3, [r7, #24]
    1d0a:	e014      	b.n	1d36 <mp_print_mp_int+0x20a>
        }
    } else {
        str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size,
    1d0c:	683b      	ldr	r3, [r7, #0]
    1d0e:	b2db      	uxtb	r3, r3
    1d10:	f107 0418 	add.w	r4, r7, #24
    1d14:	f107 011c 	add.w	r1, r7, #28
    1d18:	f107 0020 	add.w	r0, r7, #32
    1d1c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
    1d20:	9203      	str	r2, [sp, #12]
    1d22:	9302      	str	r3, [sp, #8]
    1d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1d26:	9301      	str	r3, [sp, #4]
    1d28:	687b      	ldr	r3, [r7, #4]
    1d2a:	9300      	str	r3, [sp, #0]
    1d2c:	68bb      	ldr	r3, [r7, #8]
    1d2e:	4622      	mov	r2, r4
    1d30:	f00e fcce 	bl	106d0 <mp_obj_int_formatted>
    1d34:	64f8      	str	r0, [r7, #76]	; 0x4c
                                   x, base, prefix, base_char, comma);
    }

    int spaces_before = 0;
    1d36:	2300      	movs	r3, #0
    1d38:	64bb      	str	r3, [r7, #72]	; 0x48
    int spaces_after = 0;
    1d3a:	2300      	movs	r3, #0
    1d3c:	647b      	str	r3, [r7, #68]	; 0x44

    if (prec > 1) {
    1d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1d40:	2b01      	cmp	r3, #1
    1d42:	dd38      	ble.n	1db6 <mp_print_mp_int+0x28a>
        // If prec was specified, then prec specifies the width to zero-pad the
        // the number to. This zero-padded number then gets left or right
        // aligned in width characters.

        int prec_width = fmt_size;  // The digits
    1d44:	69bb      	ldr	r3, [r7, #24]
    1d46:	643b      	str	r3, [r7, #64]	; 0x40
        if (prec_width < prec) {
    1d48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1d4c:	429a      	cmp	r2, r3
    1d4e:	da01      	bge.n	1d54 <mp_print_mp_int+0x228>
            prec_width = prec;
    1d50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1d52:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1d54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1d5a:	2b00      	cmp	r3, #0
    1d5c:	d009      	beq.n	1d72 <mp_print_mp_int+0x246>
            if (sign) {
    1d5e:	7dfb      	ldrb	r3, [r7, #23]
    1d60:	2b00      	cmp	r3, #0
    1d62:	d002      	beq.n	1d6a <mp_print_mp_int+0x23e>
                prec_width++;
    1d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1d66:	3301      	adds	r3, #1
    1d68:	643b      	str	r3, [r7, #64]	; 0x40
            }
            prec_width += prefix_len;
    1d6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1d6e:	4413      	add	r3, r2
    1d70:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (prec_width < width) {
    1d72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1d74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1d76:	429a      	cmp	r2, r3
    1d78:	da16      	bge.n	1da8 <mp_print_mp_int+0x27c>
            if (flags & PF_FLAG_LEFT_ADJUST) {
    1d7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1d7c:	f003 0301 	and.w	r3, r3, #1
    1d80:	2b00      	cmp	r3, #0
    1d82:	d00d      	beq.n	1da0 <mp_print_mp_int+0x274>
                spaces_after = width - prec_width;
    1d84:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1d88:	1ad3      	subs	r3, r2, r3
    1d8a:	647b      	str	r3, [r7, #68]	; 0x44
    1d8c:	e00c      	b.n	1da8 <mp_print_mp_int+0x27c>
    1d8e:	bf00      	nop
    1d90:	0001d834 	.word	0x0001d834
    1d94:	0001d8c0 	.word	0x0001d8c0
    1d98:	0001d868 	.word	0x0001d868
    1d9c:	00020f90 	.word	0x00020f90
            } else {
                spaces_before = width - prec_width;
    1da0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1da4:	1ad3      	subs	r3, r2, r3
    1da6:	64bb      	str	r3, [r7, #72]	; 0x48
            }
        }
        fill = '0';
    1da8:	2330      	movs	r3, #48	; 0x30
    1daa:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
        flags &= ~PF_FLAG_LEFT_ADJUST;
    1dae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1db0:	f023 0301 	bic.w	r3, r3, #1
    1db4:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    int len = 0;
    1db6:	2300      	movs	r3, #0
    1db8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (spaces_before) {
    1dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1dbc:	2b00      	cmp	r3, #0
    1dbe:	d00d      	beq.n	1ddc <mp_print_mp_int+0x2b0>
        len += mp_print_strn(print, "", 0, 0, ' ', spaces_before);
    1dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1dc2:	9301      	str	r3, [sp, #4]
    1dc4:	2320      	movs	r3, #32
    1dc6:	9300      	str	r3, [sp, #0]
    1dc8:	2300      	movs	r3, #0
    1dca:	2200      	movs	r2, #0
    1dcc:	4934      	ldr	r1, [pc, #208]	; (1ea0 <mp_print_mp_int+0x374>)
    1dce:	68f8      	ldr	r0, [r7, #12]
    1dd0:	f7ff fd6c 	bl	18ac <mp_print_strn>
    1dd4:	4602      	mov	r2, r0
    1dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1dd8:	4413      	add	r3, r2
    1dda:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if (flags & PF_FLAG_PAD_AFTER_SIGN) {
    1ddc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1de2:	2b00      	cmp	r3, #0
    1de4:	d029      	beq.n	1e3a <mp_print_mp_int+0x30e>
        // pad after sign implies pad after prefix as well.
        if (sign) {
    1de6:	7dfb      	ldrb	r3, [r7, #23]
    1de8:	2b00      	cmp	r3, #0
    1dea:	d011      	beq.n	1e10 <mp_print_mp_int+0x2e4>
            len += mp_print_strn(print, &sign, 1, 0, 0, 1);
    1dec:	f107 0117 	add.w	r1, r7, #23
    1df0:	2301      	movs	r3, #1
    1df2:	9301      	str	r3, [sp, #4]
    1df4:	2300      	movs	r3, #0
    1df6:	9300      	str	r3, [sp, #0]
    1df8:	2300      	movs	r3, #0
    1dfa:	2201      	movs	r2, #1
    1dfc:	68f8      	ldr	r0, [r7, #12]
    1dfe:	f7ff fd55 	bl	18ac <mp_print_strn>
    1e02:	4602      	mov	r2, r0
    1e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1e06:	4413      	add	r3, r2
    1e08:	63fb      	str	r3, [r7, #60]	; 0x3c
            width--;
    1e0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1e0c:	3b01      	subs	r3, #1
    1e0e:	673b      	str	r3, [r7, #112]	; 0x70
        }
        if (prefix_len) {
    1e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1e12:	2b00      	cmp	r3, #0
    1e14:	d011      	beq.n	1e3a <mp_print_mp_int+0x30e>
            len += mp_print_strn(print, prefix, prefix_len, 0, 0, 1);
    1e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1e18:	2301      	movs	r3, #1
    1e1a:	9301      	str	r3, [sp, #4]
    1e1c:	2300      	movs	r3, #0
    1e1e:	9300      	str	r3, [sp, #0]
    1e20:	2300      	movs	r3, #0
    1e22:	6d79      	ldr	r1, [r7, #84]	; 0x54
    1e24:	68f8      	ldr	r0, [r7, #12]
    1e26:	f7ff fd41 	bl	18ac <mp_print_strn>
    1e2a:	4602      	mov	r2, r0
    1e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1e2e:	4413      	add	r3, r2
    1e30:	63fb      	str	r3, [r7, #60]	; 0x3c
            width -= prefix_len;
    1e32:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    1e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1e36:	1ad3      	subs	r3, r2, r3
    1e38:	673b      	str	r3, [r7, #112]	; 0x70
        }
    }
    if (prec > 1) {
    1e3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1e3c:	2b01      	cmp	r3, #1
    1e3e:	dd01      	ble.n	1e44 <mp_print_mp_int+0x318>
        width = prec;
    1e40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1e42:	673b      	str	r3, [r7, #112]	; 0x70
    }

    len += mp_print_strn(print, str, fmt_size, flags, fill, width);
    1e44:	69ba      	ldr	r2, [r7, #24]
    1e46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1e48:	9301      	str	r3, [sp, #4]
    1e4a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
    1e4e:	9300      	str	r3, [sp, #0]
    1e50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1e52:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    1e54:	68f8      	ldr	r0, [r7, #12]
    1e56:	f7ff fd29 	bl	18ac <mp_print_strn>
    1e5a:	4602      	mov	r2, r0
    1e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1e5e:	4413      	add	r3, r2
    1e60:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (spaces_after) {
    1e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1e64:	2b00      	cmp	r3, #0
    1e66:	d00d      	beq.n	1e84 <mp_print_mp_int+0x358>
        len += mp_print_strn(print, "", 0, 0, ' ', spaces_after);
    1e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1e6a:	9301      	str	r3, [sp, #4]
    1e6c:	2320      	movs	r3, #32
    1e6e:	9300      	str	r3, [sp, #0]
    1e70:	2300      	movs	r3, #0
    1e72:	2200      	movs	r2, #0
    1e74:	490a      	ldr	r1, [pc, #40]	; (1ea0 <mp_print_mp_int+0x374>)
    1e76:	68f8      	ldr	r0, [r7, #12]
    1e78:	f7ff fd18 	bl	18ac <mp_print_strn>
    1e7c:	4602      	mov	r2, r0
    1e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1e80:	4413      	add	r3, r2
    1e82:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if (buf != stack_buf) {
    1e84:	6a3a      	ldr	r2, [r7, #32]
    1e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
    1e8a:	429a      	cmp	r2, r3
    1e8c:	d003      	beq.n	1e96 <mp_print_mp_int+0x36a>
        m_del(char, buf, buf_size);
    1e8e:	6a3b      	ldr	r3, [r7, #32]
    1e90:	4618      	mov	r0, r3
    1e92:	f7fe faa5 	bl	3e0 <m_free>
    }
    return len;
    1e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1e98:	4618      	mov	r0, r3
    1e9a:	375c      	adds	r7, #92	; 0x5c
    1e9c:	46bd      	mov	sp, r7
    1e9e:	bd90      	pop	{r4, r7, pc}
    1ea0:	0001d87c 	.word	0x0001d87c

00001ea4 <mp_printf>:

    return chrs;
}
#endif

int mp_printf(const mp_print_t *print, const char *fmt, ...) {
    1ea4:	b40e      	push	{r1, r2, r3}
    1ea6:	b580      	push	{r7, lr}
    1ea8:	b085      	sub	sp, #20
    1eaa:	af00      	add	r7, sp, #0
    1eac:	6078      	str	r0, [r7, #4]
    va_list ap;
    va_start(ap, fmt);
    1eae:	f107 0320 	add.w	r3, r7, #32
    1eb2:	60bb      	str	r3, [r7, #8]
    int ret = mp_vprintf(print, fmt, ap);
    1eb4:	68ba      	ldr	r2, [r7, #8]
    1eb6:	69f9      	ldr	r1, [r7, #28]
    1eb8:	6878      	ldr	r0, [r7, #4]
    1eba:	f000 f809 	bl	1ed0 <mp_vprintf>
    1ebe:	60f8      	str	r0, [r7, #12]
    va_end(ap);
    return ret;
    1ec0:	68fb      	ldr	r3, [r7, #12]
}
    1ec2:	4618      	mov	r0, r3
    1ec4:	3714      	adds	r7, #20
    1ec6:	46bd      	mov	sp, r7
    1ec8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    1ecc:	b003      	add	sp, #12
    1ece:	4770      	bx	lr

00001ed0 <mp_vprintf>:

int mp_vprintf(const mp_print_t *print, const char *fmt, va_list args) {
    1ed0:	b580      	push	{r7, lr}
    1ed2:	b096      	sub	sp, #88	; 0x58
    1ed4:	af04      	add	r7, sp, #16
    1ed6:	60f8      	str	r0, [r7, #12]
    1ed8:	60b9      	str	r1, [r7, #8]
    1eda:	607a      	str	r2, [r7, #4]
    int chrs = 0;
    1edc:	2300      	movs	r3, #0
    1ede:	647b      	str	r3, [r7, #68]	; 0x44
    for (;;) {
        {
            const char *f = fmt;
    1ee0:	68bb      	ldr	r3, [r7, #8]
    1ee2:	643b      	str	r3, [r7, #64]	; 0x40
            while (*f != '\0' && *f != '%') {
    1ee4:	e002      	b.n	1eec <mp_vprintf+0x1c>
                ++f; // XXX UTF8 advance char
    1ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1ee8:	3301      	adds	r3, #1
    1eea:	643b      	str	r3, [r7, #64]	; 0x40
            while (*f != '\0' && *f != '%') {
    1eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1eee:	781b      	ldrb	r3, [r3, #0]
    1ef0:	2b00      	cmp	r3, #0
    1ef2:	d003      	beq.n	1efc <mp_vprintf+0x2c>
    1ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1ef6:	781b      	ldrb	r3, [r3, #0]
    1ef8:	2b25      	cmp	r3, #37	; 0x25
    1efa:	d1f4      	bne.n	1ee6 <mp_vprintf+0x16>
            }
            if (f > fmt) {
    1efc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1efe:	68bb      	ldr	r3, [r7, #8]
    1f00:	429a      	cmp	r2, r3
    1f02:	d910      	bls.n	1f26 <mp_vprintf+0x56>
                print->print_strn(print->data, fmt, f - fmt);
    1f04:	68fb      	ldr	r3, [r7, #12]
    1f06:	685b      	ldr	r3, [r3, #4]
    1f08:	68fa      	ldr	r2, [r7, #12]
    1f0a:	6810      	ldr	r0, [r2, #0]
    1f0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
    1f0e:	68ba      	ldr	r2, [r7, #8]
    1f10:	1a8a      	subs	r2, r1, r2
    1f12:	68b9      	ldr	r1, [r7, #8]
    1f14:	4798      	blx	r3
                chrs += f - fmt;
    1f16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1f18:	68bb      	ldr	r3, [r7, #8]
    1f1a:	1ad3      	subs	r3, r2, r3
    1f1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    1f1e:	4413      	add	r3, r2
    1f20:	647b      	str	r3, [r7, #68]	; 0x44
                fmt = f;
    1f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1f24:	60bb      	str	r3, [r7, #8]
            }
        }

        if (*fmt == '\0') {
    1f26:	68bb      	ldr	r3, [r7, #8]
    1f28:	781b      	ldrb	r3, [r3, #0]
    1f2a:	2b00      	cmp	r3, #0
    1f2c:	f000 8214 	beq.w	2358 <mp_vprintf+0x488>
            break;
        }

        // move past % character
        ++fmt;
    1f30:	68bb      	ldr	r3, [r7, #8]
    1f32:	3301      	adds	r3, #1
    1f34:	60bb      	str	r3, [r7, #8]

        // parse flags, if they exist
        int flags = 0;
    1f36:	2300      	movs	r3, #0
    1f38:	63fb      	str	r3, [r7, #60]	; 0x3c
        char fill = ' ';
    1f3a:	2320      	movs	r3, #32
    1f3c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        while (*fmt != '\0') {
    1f40:	e031      	b.n	1fa6 <mp_vprintf+0xd6>
            if (*fmt == '-') flags |= PF_FLAG_LEFT_ADJUST;
    1f42:	68bb      	ldr	r3, [r7, #8]
    1f44:	781b      	ldrb	r3, [r3, #0]
    1f46:	2b2d      	cmp	r3, #45	; 0x2d
    1f48:	d104      	bne.n	1f54 <mp_vprintf+0x84>
    1f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f4c:	f043 0301 	orr.w	r3, r3, #1
    1f50:	63fb      	str	r3, [r7, #60]	; 0x3c
    1f52:	e025      	b.n	1fa0 <mp_vprintf+0xd0>
            else if (*fmt == '+') flags |= PF_FLAG_SHOW_SIGN;
    1f54:	68bb      	ldr	r3, [r7, #8]
    1f56:	781b      	ldrb	r3, [r3, #0]
    1f58:	2b2b      	cmp	r3, #43	; 0x2b
    1f5a:	d104      	bne.n	1f66 <mp_vprintf+0x96>
    1f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f5e:	f043 0302 	orr.w	r3, r3, #2
    1f62:	63fb      	str	r3, [r7, #60]	; 0x3c
    1f64:	e01c      	b.n	1fa0 <mp_vprintf+0xd0>
            else if (*fmt == ' ') flags |= PF_FLAG_SPACE_SIGN;
    1f66:	68bb      	ldr	r3, [r7, #8]
    1f68:	781b      	ldrb	r3, [r3, #0]
    1f6a:	2b20      	cmp	r3, #32
    1f6c:	d104      	bne.n	1f78 <mp_vprintf+0xa8>
    1f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f70:	f043 0304 	orr.w	r3, r3, #4
    1f74:	63fb      	str	r3, [r7, #60]	; 0x3c
    1f76:	e013      	b.n	1fa0 <mp_vprintf+0xd0>
            else if (*fmt == '!') flags |= PF_FLAG_NO_TRAILZ;
    1f78:	68bb      	ldr	r3, [r7, #8]
    1f7a:	781b      	ldrb	r3, [r3, #0]
    1f7c:	2b21      	cmp	r3, #33	; 0x21
    1f7e:	d104      	bne.n	1f8a <mp_vprintf+0xba>
    1f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f82:	f043 0308 	orr.w	r3, r3, #8
    1f86:	63fb      	str	r3, [r7, #60]	; 0x3c
    1f88:	e00a      	b.n	1fa0 <mp_vprintf+0xd0>
            else if (*fmt == '0') {
    1f8a:	68bb      	ldr	r3, [r7, #8]
    1f8c:	781b      	ldrb	r3, [r3, #0]
    1f8e:	2b30      	cmp	r3, #48	; 0x30
    1f90:	d10e      	bne.n	1fb0 <mp_vprintf+0xe0>
                flags |= PF_FLAG_PAD_AFTER_SIGN;
    1f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1f98:	63fb      	str	r3, [r7, #60]	; 0x3c
                fill = '0';
    1f9a:	2330      	movs	r3, #48	; 0x30
    1f9c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            } else break;
            ++fmt;
    1fa0:	68bb      	ldr	r3, [r7, #8]
    1fa2:	3301      	adds	r3, #1
    1fa4:	60bb      	str	r3, [r7, #8]
        while (*fmt != '\0') {
    1fa6:	68bb      	ldr	r3, [r7, #8]
    1fa8:	781b      	ldrb	r3, [r3, #0]
    1faa:	2b00      	cmp	r3, #0
    1fac:	d1c9      	bne.n	1f42 <mp_vprintf+0x72>
    1fae:	e000      	b.n	1fb2 <mp_vprintf+0xe2>
            } else break;
    1fb0:	bf00      	nop
        }

        // parse width, if it exists
        int width = 0;
    1fb2:	2300      	movs	r3, #0
    1fb4:	637b      	str	r3, [r7, #52]	; 0x34
        for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    1fb6:	e00d      	b.n	1fd4 <mp_vprintf+0x104>
            width = width * 10 + *fmt - '0';
    1fb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1fba:	4613      	mov	r3, r2
    1fbc:	009b      	lsls	r3, r3, #2
    1fbe:	4413      	add	r3, r2
    1fc0:	005b      	lsls	r3, r3, #1
    1fc2:	461a      	mov	r2, r3
    1fc4:	68bb      	ldr	r3, [r7, #8]
    1fc6:	781b      	ldrb	r3, [r3, #0]
    1fc8:	4413      	add	r3, r2
    1fca:	3b30      	subs	r3, #48	; 0x30
    1fcc:	637b      	str	r3, [r7, #52]	; 0x34
        for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    1fce:	68bb      	ldr	r3, [r7, #8]
    1fd0:	3301      	adds	r3, #1
    1fd2:	60bb      	str	r3, [r7, #8]
    1fd4:	68bb      	ldr	r3, [r7, #8]
    1fd6:	781b      	ldrb	r3, [r3, #0]
    1fd8:	2b2f      	cmp	r3, #47	; 0x2f
    1fda:	d903      	bls.n	1fe4 <mp_vprintf+0x114>
    1fdc:	68bb      	ldr	r3, [r7, #8]
    1fde:	781b      	ldrb	r3, [r3, #0]
    1fe0:	2b39      	cmp	r3, #57	; 0x39
    1fe2:	d9e9      	bls.n	1fb8 <mp_vprintf+0xe8>
        }

        // parse precision, if it exists
        int prec = -1;
    1fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1fe8:	633b      	str	r3, [r7, #48]	; 0x30
        if (*fmt == '.') {
    1fea:	68bb      	ldr	r3, [r7, #8]
    1fec:	781b      	ldrb	r3, [r3, #0]
    1fee:	2b2e      	cmp	r3, #46	; 0x2e
    1ff0:	d12d      	bne.n	204e <mp_vprintf+0x17e>
            ++fmt;
    1ff2:	68bb      	ldr	r3, [r7, #8]
    1ff4:	3301      	adds	r3, #1
    1ff6:	60bb      	str	r3, [r7, #8]
            if (*fmt == '*') {
    1ff8:	68bb      	ldr	r3, [r7, #8]
    1ffa:	781b      	ldrb	r3, [r3, #0]
    1ffc:	2b2a      	cmp	r3, #42	; 0x2a
    1ffe:	d108      	bne.n	2012 <mp_vprintf+0x142>
                ++fmt;
    2000:	68bb      	ldr	r3, [r7, #8]
    2002:	3301      	adds	r3, #1
    2004:	60bb      	str	r3, [r7, #8]
                prec = va_arg(args, int);
    2006:	687b      	ldr	r3, [r7, #4]
    2008:	1d1a      	adds	r2, r3, #4
    200a:	607a      	str	r2, [r7, #4]
    200c:	681b      	ldr	r3, [r3, #0]
    200e:	633b      	str	r3, [r7, #48]	; 0x30
    2010:	e018      	b.n	2044 <mp_vprintf+0x174>
            } else {
                prec = 0;
    2012:	2300      	movs	r3, #0
    2014:	633b      	str	r3, [r7, #48]	; 0x30
                for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    2016:	e00d      	b.n	2034 <mp_vprintf+0x164>
                    prec = prec * 10 + *fmt - '0';
    2018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    201a:	4613      	mov	r3, r2
    201c:	009b      	lsls	r3, r3, #2
    201e:	4413      	add	r3, r2
    2020:	005b      	lsls	r3, r3, #1
    2022:	461a      	mov	r2, r3
    2024:	68bb      	ldr	r3, [r7, #8]
    2026:	781b      	ldrb	r3, [r3, #0]
    2028:	4413      	add	r3, r2
    202a:	3b30      	subs	r3, #48	; 0x30
    202c:	633b      	str	r3, [r7, #48]	; 0x30
                for (; '0' <= *fmt && *fmt <= '9'; ++fmt) {
    202e:	68bb      	ldr	r3, [r7, #8]
    2030:	3301      	adds	r3, #1
    2032:	60bb      	str	r3, [r7, #8]
    2034:	68bb      	ldr	r3, [r7, #8]
    2036:	781b      	ldrb	r3, [r3, #0]
    2038:	2b2f      	cmp	r3, #47	; 0x2f
    203a:	d903      	bls.n	2044 <mp_vprintf+0x174>
    203c:	68bb      	ldr	r3, [r7, #8]
    203e:	781b      	ldrb	r3, [r3, #0]
    2040:	2b39      	cmp	r3, #57	; 0x39
    2042:	d9e9      	bls.n	2018 <mp_vprintf+0x148>
                }
            }
            if (prec < 0) {
    2044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2046:	2b00      	cmp	r3, #0
    2048:	da01      	bge.n	204e <mp_vprintf+0x17e>
                prec = 0;
    204a:	2300      	movs	r3, #0
    204c:	633b      	str	r3, [r7, #48]	; 0x30

        // parse long specifiers (only for LP64 model where they make a difference)
        #ifndef __LP64__
        const
        #endif
        bool long_arg = false;
    204e:	2300      	movs	r3, #0
    2050:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (*fmt == 'l') {
    2054:	68bb      	ldr	r3, [r7, #8]
    2056:	781b      	ldrb	r3, [r3, #0]
    2058:	2b6c      	cmp	r3, #108	; 0x6c
    205a:	d102      	bne.n	2062 <mp_vprintf+0x192>
            ++fmt;
    205c:	68bb      	ldr	r3, [r7, #8]
    205e:	3301      	adds	r3, #1
    2060:	60bb      	str	r3, [r7, #8]
            #ifdef __LP64__
            long_arg = true;
            #endif
        }

        if (*fmt == '\0') {
    2062:	68bb      	ldr	r3, [r7, #8]
    2064:	781b      	ldrb	r3, [r3, #0]
    2066:	2b00      	cmp	r3, #0
    2068:	f000 8178 	beq.w	235c <mp_vprintf+0x48c>
            break;
        }

        switch (*fmt) {
    206c:	68bb      	ldr	r3, [r7, #8]
    206e:	781b      	ldrb	r3, [r3, #0]
    2070:	3b50      	subs	r3, #80	; 0x50
    2072:	2b28      	cmp	r3, #40	; 0x28
    2074:	f200 8156 	bhi.w	2324 <mp_vprintf+0x454>
    2078:	a201      	add	r2, pc, #4	; (adr r2, 2080 <mp_vprintf+0x1b0>)
    207a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    207e:	bf00      	nop
    2080:	000022f7 	.word	0x000022f7
    2084:	00002325 	.word	0x00002325
    2088:	00002325 	.word	0x00002325
    208c:	00002325 	.word	0x00002325
    2090:	00002325 	.word	0x00002325
    2094:	00002325 	.word	0x00002325
    2098:	00002325 	.word	0x00002325
    209c:	00002325 	.word	0x00002325
    20a0:	000022a9 	.word	0x000022a9
    20a4:	00002325 	.word	0x00002325
    20a8:	00002325 	.word	0x00002325
    20ac:	00002325 	.word	0x00002325
    20b0:	00002325 	.word	0x00002325
    20b4:	00002325 	.word	0x00002325
    20b8:	00002325 	.word	0x00002325
    20bc:	00002325 	.word	0x00002325
    20c0:	00002325 	.word	0x00002325
    20c4:	00002325 	.word	0x00002325
    20c8:	00002125 	.word	0x00002125
    20cc:	00002171 	.word	0x00002171
    20d0:	00002279 	.word	0x00002279
    20d4:	00002325 	.word	0x00002325
    20d8:	00002325 	.word	0x00002325
    20dc:	00002325 	.word	0x00002325
    20e0:	00002325 	.word	0x00002325
    20e4:	00002325 	.word	0x00002325
    20e8:	00002325 	.word	0x00002325
    20ec:	00002325 	.word	0x00002325
    20f0:	00002325 	.word	0x00002325
    20f4:	00002325 	.word	0x00002325
    20f8:	00002325 	.word	0x00002325
    20fc:	00002325 	.word	0x00002325
    2100:	000022f7 	.word	0x000022f7
    2104:	000021a1 	.word	0x000021a1
    2108:	00002325 	.word	0x00002325
    210c:	000021e5 	.word	0x000021e5
    2110:	00002325 	.word	0x00002325
    2114:	0000224b 	.word	0x0000224b
    2118:	00002325 	.word	0x00002325
    211c:	00002325 	.word	0x00002325
    2120:	000022a9 	.word	0x000022a9
            case 'b':
                if (va_arg(args, int)) {
    2124:	687b      	ldr	r3, [r7, #4]
    2126:	1d1a      	adds	r2, r3, #4
    2128:	607a      	str	r2, [r7, #4]
    212a:	681b      	ldr	r3, [r3, #0]
    212c:	2b00      	cmp	r3, #0
    212e:	d00f      	beq.n	2150 <mp_vprintf+0x280>
                    chrs += mp_print_strn(print, "true", 4, flags, fill, width);
    2130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2132:	9301      	str	r3, [sp, #4]
    2134:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2138:	9300      	str	r3, [sp, #0]
    213a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    213c:	2204      	movs	r2, #4
    213e:	498a      	ldr	r1, [pc, #552]	; (2368 <mp_vprintf+0x498>)
    2140:	68f8      	ldr	r0, [r7, #12]
    2142:	f7ff fbb3 	bl	18ac <mp_print_strn>
    2146:	4602      	mov	r2, r0
    2148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    214a:	4413      	add	r3, r2
    214c:	647b      	str	r3, [r7, #68]	; 0x44
                } else {
                    chrs += mp_print_strn(print, "false", 5, flags, fill, width);
                }
                break;
    214e:	e0ff      	b.n	2350 <mp_vprintf+0x480>
                    chrs += mp_print_strn(print, "false", 5, flags, fill, width);
    2150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2152:	9301      	str	r3, [sp, #4]
    2154:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2158:	9300      	str	r3, [sp, #0]
    215a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    215c:	2205      	movs	r2, #5
    215e:	4983      	ldr	r1, [pc, #524]	; (236c <mp_vprintf+0x49c>)
    2160:	68f8      	ldr	r0, [r7, #12]
    2162:	f7ff fba3 	bl	18ac <mp_print_strn>
    2166:	4602      	mov	r2, r0
    2168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    216a:	4413      	add	r3, r2
    216c:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    216e:	e0ef      	b.n	2350 <mp_vprintf+0x480>
            case 'c':
            {
                char str = va_arg(args, int);
    2170:	687b      	ldr	r3, [r7, #4]
    2172:	1d1a      	adds	r2, r3, #4
    2174:	607a      	str	r2, [r7, #4]
    2176:	681b      	ldr	r3, [r3, #0]
    2178:	b2db      	uxtb	r3, r3
    217a:	76bb      	strb	r3, [r7, #26]
                chrs += mp_print_strn(print, &str, 1, flags, fill, width);
    217c:	f107 011a 	add.w	r1, r7, #26
    2180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2182:	9301      	str	r3, [sp, #4]
    2184:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2188:	9300      	str	r3, [sp, #0]
    218a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    218c:	2201      	movs	r2, #1
    218e:	68f8      	ldr	r0, [r7, #12]
    2190:	f7ff fb8c 	bl	18ac <mp_print_strn>
    2194:	4602      	mov	r2, r0
    2196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2198:	4413      	add	r3, r2
    219a:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    219c:	bf00      	nop
    219e:	e0d7      	b.n	2350 <mp_vprintf+0x480>
            }
            case 'q':
            {
                qstr qst = va_arg(args, qstr);
    21a0:	687b      	ldr	r3, [r7, #4]
    21a2:	1d1a      	adds	r2, r3, #4
    21a4:	607a      	str	r2, [r7, #4]
    21a6:	681b      	ldr	r3, [r3, #0]
    21a8:	627b      	str	r3, [r7, #36]	; 0x24
                size_t len;
                const char *str = (const char*)qstr_data(qst, &len);
    21aa:	f107 0314 	add.w	r3, r7, #20
    21ae:	4619      	mov	r1, r3
    21b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    21b2:	f7ff f82d 	bl	1210 <qstr_data>
    21b6:	6238      	str	r0, [r7, #32]
                if (prec < 0) {
    21b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    21ba:	2b00      	cmp	r3, #0
    21bc:	da01      	bge.n	21c2 <mp_vprintf+0x2f2>
                    prec = len;
    21be:	697b      	ldr	r3, [r7, #20]
    21c0:	633b      	str	r3, [r7, #48]	; 0x30
                }
                chrs += mp_print_strn(print, str, prec, flags, fill, width);
    21c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    21c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    21c6:	9301      	str	r3, [sp, #4]
    21c8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    21cc:	9300      	str	r3, [sp, #0]
    21ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    21d0:	6a39      	ldr	r1, [r7, #32]
    21d2:	68f8      	ldr	r0, [r7, #12]
    21d4:	f7ff fb6a 	bl	18ac <mp_print_strn>
    21d8:	4602      	mov	r2, r0
    21da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    21dc:	4413      	add	r3, r2
    21de:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    21e0:	bf00      	nop
    21e2:	e0b5      	b.n	2350 <mp_vprintf+0x480>
            }
            case 's':
            {
                const char *str = va_arg(args, const char*);
    21e4:	687b      	ldr	r3, [r7, #4]
    21e6:	1d1a      	adds	r2, r3, #4
    21e8:	607a      	str	r2, [r7, #4]
    21ea:	681b      	ldr	r3, [r3, #0]
    21ec:	61fb      	str	r3, [r7, #28]
                #ifndef NDEBUG
                // With debugging enabled, catch printing of null string pointers
                if (prec != 0 && str == NULL) {
    21ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    21f0:	2b00      	cmp	r3, #0
    21f2:	d012      	beq.n	221a <mp_vprintf+0x34a>
    21f4:	69fb      	ldr	r3, [r7, #28]
    21f6:	2b00      	cmp	r3, #0
    21f8:	d10f      	bne.n	221a <mp_vprintf+0x34a>
                    chrs += mp_print_strn(print, "(null)", 6, flags, fill, width);
    21fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    21fc:	9301      	str	r3, [sp, #4]
    21fe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2202:	9300      	str	r3, [sp, #0]
    2204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2206:	2206      	movs	r2, #6
    2208:	4959      	ldr	r1, [pc, #356]	; (2370 <mp_vprintf+0x4a0>)
    220a:	68f8      	ldr	r0, [r7, #12]
    220c:	f7ff fb4e 	bl	18ac <mp_print_strn>
    2210:	4602      	mov	r2, r0
    2212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2214:	4413      	add	r3, r2
    2216:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
    2218:	e09a      	b.n	2350 <mp_vprintf+0x480>
                }
                #endif
                if (prec < 0) {
    221a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    221c:	2b00      	cmp	r3, #0
    221e:	da04      	bge.n	222a <mp_vprintf+0x35a>
                    prec = strlen(str);
    2220:	69f8      	ldr	r0, [r7, #28]
    2222:	f019 ff89 	bl	1c138 <strlen>
    2226:	4603      	mov	r3, r0
    2228:	633b      	str	r3, [r7, #48]	; 0x30
                }
                chrs += mp_print_strn(print, str, prec, flags, fill, width);
    222a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    222c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    222e:	9301      	str	r3, [sp, #4]
    2230:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2234:	9300      	str	r3, [sp, #0]
    2236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2238:	69f9      	ldr	r1, [r7, #28]
    223a:	68f8      	ldr	r0, [r7, #12]
    223c:	f7ff fb36 	bl	18ac <mp_print_strn>
    2240:	4602      	mov	r2, r0
    2242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2244:	4413      	add	r3, r2
    2246:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2248:	e082      	b.n	2350 <mp_vprintf+0x480>
            }
            case 'u':
                chrs += mp_print_int(print, va_arg(args, unsigned int), 0, 10, 'a', flags, fill, width);
    224a:	687b      	ldr	r3, [r7, #4]
    224c:	1d1a      	adds	r2, r3, #4
    224e:	607a      	str	r2, [r7, #4]
    2250:	6819      	ldr	r1, [r3, #0]
    2252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2254:	9303      	str	r3, [sp, #12]
    2256:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    225a:	9302      	str	r3, [sp, #8]
    225c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    225e:	9301      	str	r3, [sp, #4]
    2260:	2361      	movs	r3, #97	; 0x61
    2262:	9300      	str	r3, [sp, #0]
    2264:	230a      	movs	r3, #10
    2266:	2200      	movs	r2, #0
    2268:	68f8      	ldr	r0, [r7, #12]
    226a:	f7ff fbb7 	bl	19dc <mp_print_int>
    226e:	4602      	mov	r2, r0
    2270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2272:	4413      	add	r3, r2
    2274:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2276:	e06b      	b.n	2350 <mp_vprintf+0x480>
            case 'd':
                chrs += mp_print_int(print, va_arg(args, int), 1, 10, 'a', flags, fill, width);
    2278:	687b      	ldr	r3, [r7, #4]
    227a:	1d1a      	adds	r2, r3, #4
    227c:	607a      	str	r2, [r7, #4]
    227e:	681b      	ldr	r3, [r3, #0]
    2280:	4619      	mov	r1, r3
    2282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2284:	9303      	str	r3, [sp, #12]
    2286:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    228a:	9302      	str	r3, [sp, #8]
    228c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    228e:	9301      	str	r3, [sp, #4]
    2290:	2361      	movs	r3, #97	; 0x61
    2292:	9300      	str	r3, [sp, #0]
    2294:	230a      	movs	r3, #10
    2296:	2201      	movs	r2, #1
    2298:	68f8      	ldr	r0, [r7, #12]
    229a:	f7ff fb9f 	bl	19dc <mp_print_int>
    229e:	4602      	mov	r2, r0
    22a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    22a2:	4413      	add	r3, r2
    22a4:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    22a6:	e053      	b.n	2350 <mp_vprintf+0x480>
            case 'x':
            case 'X': {
                char fmt_c = *fmt - 'X' + 'A';
    22a8:	68bb      	ldr	r3, [r7, #8]
    22aa:	781b      	ldrb	r3, [r3, #0]
    22ac:	3b17      	subs	r3, #23
    22ae:	76fb      	strb	r3, [r7, #27]
                mp_uint_t val;
                if (long_arg) {
    22b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    22b4:	2b00      	cmp	r3, #0
    22b6:	d005      	beq.n	22c4 <mp_vprintf+0x3f4>
                    val = va_arg(args, unsigned long int);
    22b8:	687b      	ldr	r3, [r7, #4]
    22ba:	1d1a      	adds	r2, r3, #4
    22bc:	607a      	str	r2, [r7, #4]
    22be:	681b      	ldr	r3, [r3, #0]
    22c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    22c2:	e004      	b.n	22ce <mp_vprintf+0x3fe>
                } else {
                    val = va_arg(args, unsigned int);
    22c4:	687b      	ldr	r3, [r7, #4]
    22c6:	1d1a      	adds	r2, r3, #4
    22c8:	607a      	str	r2, [r7, #4]
    22ca:	681b      	ldr	r3, [r3, #0]
    22cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                chrs += mp_print_int(print, val, 0, 16, fmt_c, flags, fill, width);
    22ce:	7efb      	ldrb	r3, [r7, #27]
    22d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    22d2:	9203      	str	r2, [sp, #12]
    22d4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
    22d8:	9202      	str	r2, [sp, #8]
    22da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    22dc:	9201      	str	r2, [sp, #4]
    22de:	9300      	str	r3, [sp, #0]
    22e0:	2310      	movs	r3, #16
    22e2:	2200      	movs	r2, #0
    22e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    22e6:	68f8      	ldr	r0, [r7, #12]
    22e8:	f7ff fb78 	bl	19dc <mp_print_int>
    22ec:	4602      	mov	r2, r0
    22ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    22f0:	4413      	add	r3, r2
    22f2:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    22f4:	e02c      	b.n	2350 <mp_vprintf+0x480>
            }
            case 'p':
            case 'P': // don't bother to handle upcase for 'P'
                // Use unsigned long int to work on both ILP32 and LP64 systems
                chrs += mp_print_int(print, va_arg(args, unsigned long int), 0, 16, 'a', flags, fill, width);
    22f6:	687b      	ldr	r3, [r7, #4]
    22f8:	1d1a      	adds	r2, r3, #4
    22fa:	607a      	str	r2, [r7, #4]
    22fc:	6819      	ldr	r1, [r3, #0]
    22fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2300:	9303      	str	r3, [sp, #12]
    2302:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    2306:	9302      	str	r3, [sp, #8]
    2308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    230a:	9301      	str	r3, [sp, #4]
    230c:	2361      	movs	r3, #97	; 0x61
    230e:	9300      	str	r3, [sp, #0]
    2310:	2310      	movs	r3, #16
    2312:	2200      	movs	r2, #0
    2314:	68f8      	ldr	r0, [r7, #12]
    2316:	f7ff fb61 	bl	19dc <mp_print_int>
    231a:	4602      	mov	r2, r0
    231c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    231e:	4413      	add	r3, r2
    2320:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    2322:	e015      	b.n	2350 <mp_vprintf+0x480>
                assert(!"unsupported fmt char");
            }
            #endif
            default:
                // if it's not %% then it's an unsupported format character
                assert(*fmt == '%' || !"unsupported fmt char");
    2324:	68bb      	ldr	r3, [r7, #8]
    2326:	781b      	ldrb	r3, [r3, #0]
    2328:	2b25      	cmp	r3, #37	; 0x25
    232a:	d006      	beq.n	233a <mp_vprintf+0x46a>
    232c:	4b11      	ldr	r3, [pc, #68]	; (2374 <mp_vprintf+0x4a4>)
    232e:	4a12      	ldr	r2, [pc, #72]	; (2378 <mp_vprintf+0x4a8>)
    2330:	f240 2132 	movw	r1, #562	; 0x232
    2334:	4811      	ldr	r0, [pc, #68]	; (237c <mp_vprintf+0x4ac>)
    2336:	f019 f819 	bl	1b36c <__assert_func>
                print->print_strn(print->data, fmt, 1);
    233a:	68fb      	ldr	r3, [r7, #12]
    233c:	685b      	ldr	r3, [r3, #4]
    233e:	68fa      	ldr	r2, [r7, #12]
    2340:	6810      	ldr	r0, [r2, #0]
    2342:	2201      	movs	r2, #1
    2344:	68b9      	ldr	r1, [r7, #8]
    2346:	4798      	blx	r3
                chrs += 1;
    2348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    234a:	3301      	adds	r3, #1
    234c:	647b      	str	r3, [r7, #68]	; 0x44
                break;
    234e:	bf00      	nop
        }
        ++fmt;
    2350:	68bb      	ldr	r3, [r7, #8]
    2352:	3301      	adds	r3, #1
    2354:	60bb      	str	r3, [r7, #8]
    }
    2356:	e5c3      	b.n	1ee0 <mp_vprintf+0x10>
            break;
    2358:	bf00      	nop
    235a:	e000      	b.n	235e <mp_vprintf+0x48e>
            break;
    235c:	bf00      	nop
    return chrs;
    235e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    2360:	4618      	mov	r0, r3
    2362:	3748      	adds	r7, #72	; 0x48
    2364:	46bd      	mov	sp, r7
    2366:	bd80      	pop	{r7, pc}
    2368:	0001d880 	.word	0x0001d880
    236c:	0001d888 	.word	0x0001d888
    2370:	0001d890 	.word	0x0001d890
    2374:	0001d898 	.word	0x0001d898
    2378:	0001d8d0 	.word	0x0001d8d0
    237c:	0001d868 	.word	0x0001d868

00002380 <unichar_isspace>:
}

#endif

// Be aware: These unichar_is* functions are actually ASCII-only!
bool unichar_isspace(unichar c) {
    2380:	b480      	push	{r7}
    2382:	b083      	sub	sp, #12
    2384:	af00      	add	r7, sp, #0
    2386:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_SPACE) != 0;
    2388:	687b      	ldr	r3, [r7, #4]
    238a:	2b7f      	cmp	r3, #127	; 0x7f
    238c:	d809      	bhi.n	23a2 <unichar_isspace+0x22>
    238e:	4a0a      	ldr	r2, [pc, #40]	; (23b8 <unichar_isspace+0x38>)
    2390:	687b      	ldr	r3, [r7, #4]
    2392:	4413      	add	r3, r2
    2394:	781b      	ldrb	r3, [r3, #0]
    2396:	f003 0302 	and.w	r3, r3, #2
    239a:	2b00      	cmp	r3, #0
    239c:	d001      	beq.n	23a2 <unichar_isspace+0x22>
    239e:	2301      	movs	r3, #1
    23a0:	e000      	b.n	23a4 <unichar_isspace+0x24>
    23a2:	2300      	movs	r3, #0
    23a4:	f003 0301 	and.w	r3, r3, #1
    23a8:	b2db      	uxtb	r3, r3
}
    23aa:	4618      	mov	r0, r3
    23ac:	370c      	adds	r7, #12
    23ae:	46bd      	mov	sp, r7
    23b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    23b4:	4770      	bx	lr
    23b6:	bf00      	nop
    23b8:	0001d8dc 	.word	0x0001d8dc

000023bc <unichar_isalpha>:

bool unichar_isalpha(unichar c) {
    23bc:	b480      	push	{r7}
    23be:	b083      	sub	sp, #12
    23c0:	af00      	add	r7, sp, #0
    23c2:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_ALPHA) != 0;
    23c4:	687b      	ldr	r3, [r7, #4]
    23c6:	2b7f      	cmp	r3, #127	; 0x7f
    23c8:	d809      	bhi.n	23de <unichar_isalpha+0x22>
    23ca:	4a0a      	ldr	r2, [pc, #40]	; (23f4 <unichar_isalpha+0x38>)
    23cc:	687b      	ldr	r3, [r7, #4]
    23ce:	4413      	add	r3, r2
    23d0:	781b      	ldrb	r3, [r3, #0]
    23d2:	f003 0308 	and.w	r3, r3, #8
    23d6:	2b00      	cmp	r3, #0
    23d8:	d001      	beq.n	23de <unichar_isalpha+0x22>
    23da:	2301      	movs	r3, #1
    23dc:	e000      	b.n	23e0 <unichar_isalpha+0x24>
    23de:	2300      	movs	r3, #0
    23e0:	f003 0301 	and.w	r3, r3, #1
    23e4:	b2db      	uxtb	r3, r3
}
    23e6:	4618      	mov	r0, r3
    23e8:	370c      	adds	r7, #12
    23ea:	46bd      	mov	sp, r7
    23ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    23f0:	4770      	bx	lr
    23f2:	bf00      	nop
    23f4:	0001d8dc 	.word	0x0001d8dc

000023f8 <unichar_isdigit>:
bool unichar_isprint(unichar c) {
    return c < 128 && (attr[c] & FL_PRINT) != 0;
}
*/

bool unichar_isdigit(unichar c) {
    23f8:	b480      	push	{r7}
    23fa:	b083      	sub	sp, #12
    23fc:	af00      	add	r7, sp, #0
    23fe:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_DIGIT) != 0;
    2400:	687b      	ldr	r3, [r7, #4]
    2402:	2b7f      	cmp	r3, #127	; 0x7f
    2404:	d809      	bhi.n	241a <unichar_isdigit+0x22>
    2406:	4a0a      	ldr	r2, [pc, #40]	; (2430 <unichar_isdigit+0x38>)
    2408:	687b      	ldr	r3, [r7, #4]
    240a:	4413      	add	r3, r2
    240c:	781b      	ldrb	r3, [r3, #0]
    240e:	f003 0304 	and.w	r3, r3, #4
    2412:	2b00      	cmp	r3, #0
    2414:	d001      	beq.n	241a <unichar_isdigit+0x22>
    2416:	2301      	movs	r3, #1
    2418:	e000      	b.n	241c <unichar_isdigit+0x24>
    241a:	2300      	movs	r3, #0
    241c:	f003 0301 	and.w	r3, r3, #1
    2420:	b2db      	uxtb	r3, r3
}
    2422:	4618      	mov	r0, r3
    2424:	370c      	adds	r7, #12
    2426:	46bd      	mov	sp, r7
    2428:	f85d 7b04 	ldr.w	r7, [sp], #4
    242c:	4770      	bx	lr
    242e:	bf00      	nop
    2430:	0001d8dc 	.word	0x0001d8dc

00002434 <unichar_isxdigit>:

bool unichar_isxdigit(unichar c) {
    2434:	b480      	push	{r7}
    2436:	b083      	sub	sp, #12
    2438:	af00      	add	r7, sp, #0
    243a:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_XDIGIT) != 0;
    243c:	687b      	ldr	r3, [r7, #4]
    243e:	2b7f      	cmp	r3, #127	; 0x7f
    2440:	d809      	bhi.n	2456 <unichar_isxdigit+0x22>
    2442:	4a0a      	ldr	r2, [pc, #40]	; (246c <unichar_isxdigit+0x38>)
    2444:	687b      	ldr	r3, [r7, #4]
    2446:	4413      	add	r3, r2
    2448:	781b      	ldrb	r3, [r3, #0]
    244a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    244e:	2b00      	cmp	r3, #0
    2450:	d001      	beq.n	2456 <unichar_isxdigit+0x22>
    2452:	2301      	movs	r3, #1
    2454:	e000      	b.n	2458 <unichar_isxdigit+0x24>
    2456:	2300      	movs	r3, #0
    2458:	f003 0301 	and.w	r3, r3, #1
    245c:	b2db      	uxtb	r3, r3
}
    245e:	4618      	mov	r0, r3
    2460:	370c      	adds	r7, #12
    2462:	46bd      	mov	sp, r7
    2464:	f85d 7b04 	ldr.w	r7, [sp], #4
    2468:	4770      	bx	lr
    246a:	bf00      	nop
    246c:	0001d8dc 	.word	0x0001d8dc

00002470 <unichar_isident>:

bool unichar_isident(unichar c) {
    2470:	b480      	push	{r7}
    2472:	b083      	sub	sp, #12
    2474:	af00      	add	r7, sp, #0
    2476:	6078      	str	r0, [r7, #4]
    return c < 128 && ((attr[c] & (FL_ALPHA | FL_DIGIT)) != 0 || c == '_');
    2478:	687b      	ldr	r3, [r7, #4]
    247a:	2b7f      	cmp	r3, #127	; 0x7f
    247c:	d80c      	bhi.n	2498 <unichar_isident+0x28>
    247e:	4a0b      	ldr	r2, [pc, #44]	; (24ac <unichar_isident+0x3c>)
    2480:	687b      	ldr	r3, [r7, #4]
    2482:	4413      	add	r3, r2
    2484:	781b      	ldrb	r3, [r3, #0]
    2486:	f003 030c 	and.w	r3, r3, #12
    248a:	2b00      	cmp	r3, #0
    248c:	d102      	bne.n	2494 <unichar_isident+0x24>
    248e:	687b      	ldr	r3, [r7, #4]
    2490:	2b5f      	cmp	r3, #95	; 0x5f
    2492:	d101      	bne.n	2498 <unichar_isident+0x28>
    2494:	2301      	movs	r3, #1
    2496:	e000      	b.n	249a <unichar_isident+0x2a>
    2498:	2300      	movs	r3, #0
    249a:	f003 0301 	and.w	r3, r3, #1
    249e:	b2db      	uxtb	r3, r3
}
    24a0:	4618      	mov	r0, r3
    24a2:	370c      	adds	r7, #12
    24a4:	46bd      	mov	sp, r7
    24a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    24aa:	4770      	bx	lr
    24ac:	0001d8dc 	.word	0x0001d8dc

000024b0 <unichar_isupper>:

bool unichar_isupper(unichar c) {
    24b0:	b480      	push	{r7}
    24b2:	b083      	sub	sp, #12
    24b4:	af00      	add	r7, sp, #0
    24b6:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_UPPER) != 0;
    24b8:	687b      	ldr	r3, [r7, #4]
    24ba:	2b7f      	cmp	r3, #127	; 0x7f
    24bc:	d809      	bhi.n	24d2 <unichar_isupper+0x22>
    24be:	4a0a      	ldr	r2, [pc, #40]	; (24e8 <unichar_isupper+0x38>)
    24c0:	687b      	ldr	r3, [r7, #4]
    24c2:	4413      	add	r3, r2
    24c4:	781b      	ldrb	r3, [r3, #0]
    24c6:	f003 0310 	and.w	r3, r3, #16
    24ca:	2b00      	cmp	r3, #0
    24cc:	d001      	beq.n	24d2 <unichar_isupper+0x22>
    24ce:	2301      	movs	r3, #1
    24d0:	e000      	b.n	24d4 <unichar_isupper+0x24>
    24d2:	2300      	movs	r3, #0
    24d4:	f003 0301 	and.w	r3, r3, #1
    24d8:	b2db      	uxtb	r3, r3
}
    24da:	4618      	mov	r0, r3
    24dc:	370c      	adds	r7, #12
    24de:	46bd      	mov	sp, r7
    24e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    24e4:	4770      	bx	lr
    24e6:	bf00      	nop
    24e8:	0001d8dc 	.word	0x0001d8dc

000024ec <unichar_islower>:

bool unichar_islower(unichar c) {
    24ec:	b480      	push	{r7}
    24ee:	b083      	sub	sp, #12
    24f0:	af00      	add	r7, sp, #0
    24f2:	6078      	str	r0, [r7, #4]
    return c < 128 && (attr[c] & FL_LOWER) != 0;
    24f4:	687b      	ldr	r3, [r7, #4]
    24f6:	2b7f      	cmp	r3, #127	; 0x7f
    24f8:	d809      	bhi.n	250e <unichar_islower+0x22>
    24fa:	4a0a      	ldr	r2, [pc, #40]	; (2524 <unichar_islower+0x38>)
    24fc:	687b      	ldr	r3, [r7, #4]
    24fe:	4413      	add	r3, r2
    2500:	781b      	ldrb	r3, [r3, #0]
    2502:	f003 0320 	and.w	r3, r3, #32
    2506:	2b00      	cmp	r3, #0
    2508:	d001      	beq.n	250e <unichar_islower+0x22>
    250a:	2301      	movs	r3, #1
    250c:	e000      	b.n	2510 <unichar_islower+0x24>
    250e:	2300      	movs	r3, #0
    2510:	f003 0301 	and.w	r3, r3, #1
    2514:	b2db      	uxtb	r3, r3
}
    2516:	4618      	mov	r0, r3
    2518:	370c      	adds	r7, #12
    251a:	46bd      	mov	sp, r7
    251c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2520:	4770      	bx	lr
    2522:	bf00      	nop
    2524:	0001d8dc 	.word	0x0001d8dc

00002528 <unichar_tolower>:

unichar unichar_tolower(unichar c) {
    2528:	b580      	push	{r7, lr}
    252a:	b082      	sub	sp, #8
    252c:	af00      	add	r7, sp, #0
    252e:	6078      	str	r0, [r7, #4]
    if (unichar_isupper(c)) {
    2530:	6878      	ldr	r0, [r7, #4]
    2532:	f7ff ffbd 	bl	24b0 <unichar_isupper>
    2536:	4603      	mov	r3, r0
    2538:	2b00      	cmp	r3, #0
    253a:	d002      	beq.n	2542 <unichar_tolower+0x1a>
        return c + 0x20;
    253c:	687b      	ldr	r3, [r7, #4]
    253e:	3320      	adds	r3, #32
    2540:	e000      	b.n	2544 <unichar_tolower+0x1c>
    }
    return c;
    2542:	687b      	ldr	r3, [r7, #4]
}
    2544:	4618      	mov	r0, r3
    2546:	3708      	adds	r7, #8
    2548:	46bd      	mov	sp, r7
    254a:	bd80      	pop	{r7, pc}

0000254c <unichar_toupper>:

unichar unichar_toupper(unichar c) {
    254c:	b580      	push	{r7, lr}
    254e:	b082      	sub	sp, #8
    2550:	af00      	add	r7, sp, #0
    2552:	6078      	str	r0, [r7, #4]
    if (unichar_islower(c)) {
    2554:	6878      	ldr	r0, [r7, #4]
    2556:	f7ff ffc9 	bl	24ec <unichar_islower>
    255a:	4603      	mov	r3, r0
    255c:	2b00      	cmp	r3, #0
    255e:	d002      	beq.n	2566 <unichar_toupper+0x1a>
        return c - 0x20;
    2560:	687b      	ldr	r3, [r7, #4]
    2562:	3b20      	subs	r3, #32
    2564:	e000      	b.n	2568 <unichar_toupper+0x1c>
    }
    return c;
    2566:	687b      	ldr	r3, [r7, #4]
}
    2568:	4618      	mov	r0, r3
    256a:	3708      	adds	r7, #8
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <unichar_xdigit_value>:

mp_uint_t unichar_xdigit_value(unichar c) {
    2570:	b480      	push	{r7}
    2572:	b085      	sub	sp, #20
    2574:	af00      	add	r7, sp, #0
    2576:	6078      	str	r0, [r7, #4]
    // c is assumed to be hex digit
    mp_uint_t n = c - '0';
    2578:	687b      	ldr	r3, [r7, #4]
    257a:	3b30      	subs	r3, #48	; 0x30
    257c:	60fb      	str	r3, [r7, #12]
    if (n > 9) {
    257e:	68fb      	ldr	r3, [r7, #12]
    2580:	2b09      	cmp	r3, #9
    2582:	d906      	bls.n	2592 <unichar_xdigit_value+0x22>
        n &= ~('a' - 'A');
    2584:	68fb      	ldr	r3, [r7, #12]
    2586:	f023 0320 	bic.w	r3, r3, #32
    258a:	60fb      	str	r3, [r7, #12]
        n -= ('A' - ('9' + 1));
    258c:	68fb      	ldr	r3, [r7, #12]
    258e:	3b07      	subs	r3, #7
    2590:	60fb      	str	r3, [r7, #12]
    }
    return n;
    2592:	68fb      	ldr	r3, [r7, #12]
}
    2594:	4618      	mov	r0, r3
    2596:	3714      	adds	r7, #20
    2598:	46bd      	mov	sp, r7
    259a:	f85d 7b04 	ldr.w	r7, [sp], #4
    259e:	4770      	bx	lr

000025a0 <mp_reader_mem_readbyte>:
    const byte *beg;
    const byte *cur;
    const byte *end;
} mp_reader_mem_t;

STATIC mp_uint_t mp_reader_mem_readbyte(void *data) {
    25a0:	b480      	push	{r7}
    25a2:	b085      	sub	sp, #20
    25a4:	af00      	add	r7, sp, #0
    25a6:	6078      	str	r0, [r7, #4]
    mp_reader_mem_t *reader = (mp_reader_mem_t*)data;
    25a8:	687b      	ldr	r3, [r7, #4]
    25aa:	60fb      	str	r3, [r7, #12]
    if (reader->cur < reader->end) {
    25ac:	68fb      	ldr	r3, [r7, #12]
    25ae:	689a      	ldr	r2, [r3, #8]
    25b0:	68fb      	ldr	r3, [r7, #12]
    25b2:	68db      	ldr	r3, [r3, #12]
    25b4:	429a      	cmp	r2, r3
    25b6:	d206      	bcs.n	25c6 <mp_reader_mem_readbyte+0x26>
        return *reader->cur++;
    25b8:	68fb      	ldr	r3, [r7, #12]
    25ba:	689b      	ldr	r3, [r3, #8]
    25bc:	1c59      	adds	r1, r3, #1
    25be:	68fa      	ldr	r2, [r7, #12]
    25c0:	6091      	str	r1, [r2, #8]
    25c2:	781b      	ldrb	r3, [r3, #0]
    25c4:	e001      	b.n	25ca <mp_reader_mem_readbyte+0x2a>
    } else {
        return MP_READER_EOF;
    25c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
    25ca:	4618      	mov	r0, r3
    25cc:	3714      	adds	r7, #20
    25ce:	46bd      	mov	sp, r7
    25d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    25d4:	4770      	bx	lr
    25d6:	bf00      	nop

000025d8 <mp_reader_mem_close>:

STATIC void mp_reader_mem_close(void *data) {
    25d8:	b580      	push	{r7, lr}
    25da:	b084      	sub	sp, #16
    25dc:	af00      	add	r7, sp, #0
    25de:	6078      	str	r0, [r7, #4]
    mp_reader_mem_t *reader = (mp_reader_mem_t*)data;
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	60fb      	str	r3, [r7, #12]
    if (reader->free_len > 0) {
    25e4:	68fb      	ldr	r3, [r7, #12]
    25e6:	681b      	ldr	r3, [r3, #0]
    25e8:	2b00      	cmp	r3, #0
    25ea:	d004      	beq.n	25f6 <mp_reader_mem_close+0x1e>
        m_del(char, (char*)reader->beg, reader->free_len);
    25ec:	68fb      	ldr	r3, [r7, #12]
    25ee:	685b      	ldr	r3, [r3, #4]
    25f0:	4618      	mov	r0, r3
    25f2:	f7fd fef5 	bl	3e0 <m_free>
    }
    m_del_obj(mp_reader_mem_t, reader);
    25f6:	68f8      	ldr	r0, [r7, #12]
    25f8:	f7fd fef2 	bl	3e0 <m_free>
}
    25fc:	bf00      	nop
    25fe:	3710      	adds	r7, #16
    2600:	46bd      	mov	sp, r7
    2602:	bd80      	pop	{r7, pc}

00002604 <mp_reader_new_mem>:

void mp_reader_new_mem(mp_reader_t *reader, const byte *buf, size_t len, size_t free_len) {
    2604:	b580      	push	{r7, lr}
    2606:	b086      	sub	sp, #24
    2608:	af00      	add	r7, sp, #0
    260a:	60f8      	str	r0, [r7, #12]
    260c:	60b9      	str	r1, [r7, #8]
    260e:	607a      	str	r2, [r7, #4]
    2610:	603b      	str	r3, [r7, #0]
    mp_reader_mem_t *rm = m_new_obj(mp_reader_mem_t);
    2612:	2010      	movs	r0, #16
    2614:	f7fd fe82 	bl	31c <m_malloc>
    2618:	6178      	str	r0, [r7, #20]
    rm->free_len = free_len;
    261a:	697b      	ldr	r3, [r7, #20]
    261c:	683a      	ldr	r2, [r7, #0]
    261e:	601a      	str	r2, [r3, #0]
    rm->beg = buf;
    2620:	697b      	ldr	r3, [r7, #20]
    2622:	68ba      	ldr	r2, [r7, #8]
    2624:	605a      	str	r2, [r3, #4]
    rm->cur = buf;
    2626:	697b      	ldr	r3, [r7, #20]
    2628:	68ba      	ldr	r2, [r7, #8]
    262a:	609a      	str	r2, [r3, #8]
    rm->end = buf + len;
    262c:	68ba      	ldr	r2, [r7, #8]
    262e:	687b      	ldr	r3, [r7, #4]
    2630:	441a      	add	r2, r3
    2632:	697b      	ldr	r3, [r7, #20]
    2634:	60da      	str	r2, [r3, #12]
    reader->data = rm;
    2636:	68fb      	ldr	r3, [r7, #12]
    2638:	697a      	ldr	r2, [r7, #20]
    263a:	601a      	str	r2, [r3, #0]
    reader->readbyte = mp_reader_mem_readbyte;
    263c:	68fb      	ldr	r3, [r7, #12]
    263e:	4a04      	ldr	r2, [pc, #16]	; (2650 <mp_reader_new_mem+0x4c>)
    2640:	605a      	str	r2, [r3, #4]
    reader->close = mp_reader_mem_close;
    2642:	68fb      	ldr	r3, [r7, #12]
    2644:	4a03      	ldr	r2, [pc, #12]	; (2654 <mp_reader_new_mem+0x50>)
    2646:	609a      	str	r2, [r3, #8]
}
    2648:	bf00      	nop
    264a:	3718      	adds	r7, #24
    264c:	46bd      	mov	sp, r7
    264e:	bd80      	pop	{r7, pc}
    2650:	000025a1 	.word	0x000025a1
    2654:	000025d9 	.word	0x000025d9

00002658 <vstr_reset>:
struct _mp_print_t;
void vstr_init_print(vstr_t *vstr, size_t alloc, struct _mp_print_t *print);
void vstr_clear(vstr_t *vstr);
vstr_t *vstr_new(size_t alloc);
void vstr_free(vstr_t *vstr);
static inline void vstr_reset(vstr_t *vstr) { vstr->len = 0; }
    2658:	b480      	push	{r7}
    265a:	b083      	sub	sp, #12
    265c:	af00      	add	r7, sp, #0
    265e:	6078      	str	r0, [r7, #4]
    2660:	687b      	ldr	r3, [r7, #4]
    2662:	2200      	movs	r2, #0
    2664:	605a      	str	r2, [r3, #4]
    2666:	bf00      	nop
    2668:	370c      	adds	r7, #12
    266a:	46bd      	mov	sp, r7
    266c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2670:	4770      	bx	lr
    2672:	bf00      	nop

00002674 <is_end>:
// don't know if that's intentional or not, but we don't allow it

#define MP_LEXER_EOF ((unichar)MP_READER_EOF)
#define CUR_CHAR(lex) ((lex)->chr0)

STATIC bool is_end(mp_lexer_t *lex) {
    2674:	b480      	push	{r7}
    2676:	b083      	sub	sp, #12
    2678:	af00      	add	r7, sp, #0
    267a:	6078      	str	r0, [r7, #4]
    return lex->chr0 == MP_LEXER_EOF;
    267c:	687b      	ldr	r3, [r7, #4]
    267e:	691b      	ldr	r3, [r3, #16]
    2680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2684:	bf0c      	ite	eq
    2686:	2301      	moveq	r3, #1
    2688:	2300      	movne	r3, #0
    268a:	b2db      	uxtb	r3, r3
}
    268c:	4618      	mov	r0, r3
    268e:	370c      	adds	r7, #12
    2690:	46bd      	mov	sp, r7
    2692:	f85d 7b04 	ldr.w	r7, [sp], #4
    2696:	4770      	bx	lr

00002698 <is_physical_newline>:

STATIC bool is_physical_newline(mp_lexer_t *lex) {
    2698:	b480      	push	{r7}
    269a:	b083      	sub	sp, #12
    269c:	af00      	add	r7, sp, #0
    269e:	6078      	str	r0, [r7, #4]
    return lex->chr0 == '\n';
    26a0:	687b      	ldr	r3, [r7, #4]
    26a2:	691b      	ldr	r3, [r3, #16]
    26a4:	2b0a      	cmp	r3, #10
    26a6:	bf0c      	ite	eq
    26a8:	2301      	moveq	r3, #1
    26aa:	2300      	movne	r3, #0
    26ac:	b2db      	uxtb	r3, r3
}
    26ae:	4618      	mov	r0, r3
    26b0:	370c      	adds	r7, #12
    26b2:	46bd      	mov	sp, r7
    26b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    26b8:	4770      	bx	lr
    26ba:	bf00      	nop

000026bc <is_char>:

STATIC bool is_char(mp_lexer_t *lex, byte c) {
    26bc:	b480      	push	{r7}
    26be:	b083      	sub	sp, #12
    26c0:	af00      	add	r7, sp, #0
    26c2:	6078      	str	r0, [r7, #4]
    26c4:	460b      	mov	r3, r1
    26c6:	70fb      	strb	r3, [r7, #3]
    return lex->chr0 == c;
    26c8:	687b      	ldr	r3, [r7, #4]
    26ca:	691a      	ldr	r2, [r3, #16]
    26cc:	78fb      	ldrb	r3, [r7, #3]
    26ce:	429a      	cmp	r2, r3
    26d0:	bf0c      	ite	eq
    26d2:	2301      	moveq	r3, #1
    26d4:	2300      	movne	r3, #0
    26d6:	b2db      	uxtb	r3, r3
}
    26d8:	4618      	mov	r0, r3
    26da:	370c      	adds	r7, #12
    26dc:	46bd      	mov	sp, r7
    26de:	f85d 7b04 	ldr.w	r7, [sp], #4
    26e2:	4770      	bx	lr

000026e4 <is_char_or>:

STATIC bool is_char_or(mp_lexer_t *lex, byte c1, byte c2) {
    26e4:	b480      	push	{r7}
    26e6:	b083      	sub	sp, #12
    26e8:	af00      	add	r7, sp, #0
    26ea:	6078      	str	r0, [r7, #4]
    26ec:	460b      	mov	r3, r1
    26ee:	70fb      	strb	r3, [r7, #3]
    26f0:	4613      	mov	r3, r2
    26f2:	70bb      	strb	r3, [r7, #2]
    return lex->chr0 == c1 || lex->chr0 == c2;
    26f4:	687b      	ldr	r3, [r7, #4]
    26f6:	691a      	ldr	r2, [r3, #16]
    26f8:	78fb      	ldrb	r3, [r7, #3]
    26fa:	429a      	cmp	r2, r3
    26fc:	d004      	beq.n	2708 <is_char_or+0x24>
    26fe:	687b      	ldr	r3, [r7, #4]
    2700:	691a      	ldr	r2, [r3, #16]
    2702:	78bb      	ldrb	r3, [r7, #2]
    2704:	429a      	cmp	r2, r3
    2706:	d101      	bne.n	270c <is_char_or+0x28>
    2708:	2301      	movs	r3, #1
    270a:	e000      	b.n	270e <is_char_or+0x2a>
    270c:	2300      	movs	r3, #0
    270e:	f003 0301 	and.w	r3, r3, #1
    2712:	b2db      	uxtb	r3, r3
}
    2714:	4618      	mov	r0, r3
    2716:	370c      	adds	r7, #12
    2718:	46bd      	mov	sp, r7
    271a:	f85d 7b04 	ldr.w	r7, [sp], #4
    271e:	4770      	bx	lr

00002720 <is_char_or3>:

STATIC bool is_char_or3(mp_lexer_t *lex, byte c1, byte c2, byte c3) {
    2720:	b480      	push	{r7}
    2722:	b083      	sub	sp, #12
    2724:	af00      	add	r7, sp, #0
    2726:	6078      	str	r0, [r7, #4]
    2728:	4608      	mov	r0, r1
    272a:	4611      	mov	r1, r2
    272c:	461a      	mov	r2, r3
    272e:	4603      	mov	r3, r0
    2730:	70fb      	strb	r3, [r7, #3]
    2732:	460b      	mov	r3, r1
    2734:	70bb      	strb	r3, [r7, #2]
    2736:	4613      	mov	r3, r2
    2738:	707b      	strb	r3, [r7, #1]
    return lex->chr0 == c1 || lex->chr0 == c2 || lex->chr0 == c3;
    273a:	687b      	ldr	r3, [r7, #4]
    273c:	691a      	ldr	r2, [r3, #16]
    273e:	78fb      	ldrb	r3, [r7, #3]
    2740:	429a      	cmp	r2, r3
    2742:	d009      	beq.n	2758 <is_char_or3+0x38>
    2744:	687b      	ldr	r3, [r7, #4]
    2746:	691a      	ldr	r2, [r3, #16]
    2748:	78bb      	ldrb	r3, [r7, #2]
    274a:	429a      	cmp	r2, r3
    274c:	d004      	beq.n	2758 <is_char_or3+0x38>
    274e:	687b      	ldr	r3, [r7, #4]
    2750:	691a      	ldr	r2, [r3, #16]
    2752:	787b      	ldrb	r3, [r7, #1]
    2754:	429a      	cmp	r2, r3
    2756:	d101      	bne.n	275c <is_char_or3+0x3c>
    2758:	2301      	movs	r3, #1
    275a:	e000      	b.n	275e <is_char_or3+0x3e>
    275c:	2300      	movs	r3, #0
    275e:	f003 0301 	and.w	r3, r3, #1
    2762:	b2db      	uxtb	r3, r3
}
    2764:	4618      	mov	r0, r3
    2766:	370c      	adds	r7, #12
    2768:	46bd      	mov	sp, r7
    276a:	f85d 7b04 	ldr.w	r7, [sp], #4
    276e:	4770      	bx	lr

00002770 <is_char_following>:

STATIC bool is_char_following(mp_lexer_t *lex, byte c) {
    2770:	b480      	push	{r7}
    2772:	b083      	sub	sp, #12
    2774:	af00      	add	r7, sp, #0
    2776:	6078      	str	r0, [r7, #4]
    2778:	460b      	mov	r3, r1
    277a:	70fb      	strb	r3, [r7, #3]
    return lex->chr1 == c;
    277c:	687b      	ldr	r3, [r7, #4]
    277e:	695a      	ldr	r2, [r3, #20]
    2780:	78fb      	ldrb	r3, [r7, #3]
    2782:	429a      	cmp	r2, r3
    2784:	bf0c      	ite	eq
    2786:	2301      	moveq	r3, #1
    2788:	2300      	movne	r3, #0
    278a:	b2db      	uxtb	r3, r3
}
    278c:	4618      	mov	r0, r3
    278e:	370c      	adds	r7, #12
    2790:	46bd      	mov	sp, r7
    2792:	f85d 7b04 	ldr.w	r7, [sp], #4
    2796:	4770      	bx	lr

00002798 <is_char_following_or>:

STATIC bool is_char_following_or(mp_lexer_t *lex, byte c1, byte c2) {
    2798:	b480      	push	{r7}
    279a:	b083      	sub	sp, #12
    279c:	af00      	add	r7, sp, #0
    279e:	6078      	str	r0, [r7, #4]
    27a0:	460b      	mov	r3, r1
    27a2:	70fb      	strb	r3, [r7, #3]
    27a4:	4613      	mov	r3, r2
    27a6:	70bb      	strb	r3, [r7, #2]
    return lex->chr1 == c1 || lex->chr1 == c2;
    27a8:	687b      	ldr	r3, [r7, #4]
    27aa:	695a      	ldr	r2, [r3, #20]
    27ac:	78fb      	ldrb	r3, [r7, #3]
    27ae:	429a      	cmp	r2, r3
    27b0:	d004      	beq.n	27bc <is_char_following_or+0x24>
    27b2:	687b      	ldr	r3, [r7, #4]
    27b4:	695a      	ldr	r2, [r3, #20]
    27b6:	78bb      	ldrb	r3, [r7, #2]
    27b8:	429a      	cmp	r2, r3
    27ba:	d101      	bne.n	27c0 <is_char_following_or+0x28>
    27bc:	2301      	movs	r3, #1
    27be:	e000      	b.n	27c2 <is_char_following_or+0x2a>
    27c0:	2300      	movs	r3, #0
    27c2:	f003 0301 	and.w	r3, r3, #1
    27c6:	b2db      	uxtb	r3, r3
}
    27c8:	4618      	mov	r0, r3
    27ca:	370c      	adds	r7, #12
    27cc:	46bd      	mov	sp, r7
    27ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    27d2:	4770      	bx	lr

000027d4 <is_char_following_following_or>:

STATIC bool is_char_following_following_or(mp_lexer_t *lex, byte c1, byte c2) {
    27d4:	b480      	push	{r7}
    27d6:	b083      	sub	sp, #12
    27d8:	af00      	add	r7, sp, #0
    27da:	6078      	str	r0, [r7, #4]
    27dc:	460b      	mov	r3, r1
    27de:	70fb      	strb	r3, [r7, #3]
    27e0:	4613      	mov	r3, r2
    27e2:	70bb      	strb	r3, [r7, #2]
    return lex->chr2 == c1 || lex->chr2 == c2;
    27e4:	687b      	ldr	r3, [r7, #4]
    27e6:	699a      	ldr	r2, [r3, #24]
    27e8:	78fb      	ldrb	r3, [r7, #3]
    27ea:	429a      	cmp	r2, r3
    27ec:	d004      	beq.n	27f8 <is_char_following_following_or+0x24>
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	699a      	ldr	r2, [r3, #24]
    27f2:	78bb      	ldrb	r3, [r7, #2]
    27f4:	429a      	cmp	r2, r3
    27f6:	d101      	bne.n	27fc <is_char_following_following_or+0x28>
    27f8:	2301      	movs	r3, #1
    27fa:	e000      	b.n	27fe <is_char_following_following_or+0x2a>
    27fc:	2300      	movs	r3, #0
    27fe:	f003 0301 	and.w	r3, r3, #1
    2802:	b2db      	uxtb	r3, r3
}
    2804:	4618      	mov	r0, r3
    2806:	370c      	adds	r7, #12
    2808:	46bd      	mov	sp, r7
    280a:	f85d 7b04 	ldr.w	r7, [sp], #4
    280e:	4770      	bx	lr

00002810 <is_char_and>:

STATIC bool is_char_and(mp_lexer_t *lex, byte c1, byte c2) {
    2810:	b480      	push	{r7}
    2812:	b083      	sub	sp, #12
    2814:	af00      	add	r7, sp, #0
    2816:	6078      	str	r0, [r7, #4]
    2818:	460b      	mov	r3, r1
    281a:	70fb      	strb	r3, [r7, #3]
    281c:	4613      	mov	r3, r2
    281e:	70bb      	strb	r3, [r7, #2]
    return lex->chr0 == c1 && lex->chr1 == c2;
    2820:	687b      	ldr	r3, [r7, #4]
    2822:	691a      	ldr	r2, [r3, #16]
    2824:	78fb      	ldrb	r3, [r7, #3]
    2826:	429a      	cmp	r2, r3
    2828:	d106      	bne.n	2838 <is_char_and+0x28>
    282a:	687b      	ldr	r3, [r7, #4]
    282c:	695a      	ldr	r2, [r3, #20]
    282e:	78bb      	ldrb	r3, [r7, #2]
    2830:	429a      	cmp	r2, r3
    2832:	d101      	bne.n	2838 <is_char_and+0x28>
    2834:	2301      	movs	r3, #1
    2836:	e000      	b.n	283a <is_char_and+0x2a>
    2838:	2300      	movs	r3, #0
    283a:	f003 0301 	and.w	r3, r3, #1
    283e:	b2db      	uxtb	r3, r3
}
    2840:	4618      	mov	r0, r3
    2842:	370c      	adds	r7, #12
    2844:	46bd      	mov	sp, r7
    2846:	f85d 7b04 	ldr.w	r7, [sp], #4
    284a:	4770      	bx	lr

0000284c <is_whitespace>:

STATIC bool is_whitespace(mp_lexer_t *lex) {
    284c:	b580      	push	{r7, lr}
    284e:	b082      	sub	sp, #8
    2850:	af00      	add	r7, sp, #0
    2852:	6078      	str	r0, [r7, #4]
    return unichar_isspace(lex->chr0);
    2854:	687b      	ldr	r3, [r7, #4]
    2856:	691b      	ldr	r3, [r3, #16]
    2858:	4618      	mov	r0, r3
    285a:	f7ff fd91 	bl	2380 <unichar_isspace>
    285e:	4603      	mov	r3, r0
}
    2860:	4618      	mov	r0, r3
    2862:	3708      	adds	r7, #8
    2864:	46bd      	mov	sp, r7
    2866:	bd80      	pop	{r7, pc}

00002868 <is_letter>:

STATIC bool is_letter(mp_lexer_t *lex) {
    2868:	b580      	push	{r7, lr}
    286a:	b082      	sub	sp, #8
    286c:	af00      	add	r7, sp, #0
    286e:	6078      	str	r0, [r7, #4]
    return unichar_isalpha(lex->chr0);
    2870:	687b      	ldr	r3, [r7, #4]
    2872:	691b      	ldr	r3, [r3, #16]
    2874:	4618      	mov	r0, r3
    2876:	f7ff fda1 	bl	23bc <unichar_isalpha>
    287a:	4603      	mov	r3, r0
}
    287c:	4618      	mov	r0, r3
    287e:	3708      	adds	r7, #8
    2880:	46bd      	mov	sp, r7
    2882:	bd80      	pop	{r7, pc}

00002884 <is_digit>:

STATIC bool is_digit(mp_lexer_t *lex) {
    2884:	b580      	push	{r7, lr}
    2886:	b082      	sub	sp, #8
    2888:	af00      	add	r7, sp, #0
    288a:	6078      	str	r0, [r7, #4]
    return unichar_isdigit(lex->chr0);
    288c:	687b      	ldr	r3, [r7, #4]
    288e:	691b      	ldr	r3, [r3, #16]
    2890:	4618      	mov	r0, r3
    2892:	f7ff fdb1 	bl	23f8 <unichar_isdigit>
    2896:	4603      	mov	r3, r0
}
    2898:	4618      	mov	r0, r3
    289a:	3708      	adds	r7, #8
    289c:	46bd      	mov	sp, r7
    289e:	bd80      	pop	{r7, pc}

000028a0 <is_following_digit>:

STATIC bool is_following_digit(mp_lexer_t *lex) {
    28a0:	b580      	push	{r7, lr}
    28a2:	b082      	sub	sp, #8
    28a4:	af00      	add	r7, sp, #0
    28a6:	6078      	str	r0, [r7, #4]
    return unichar_isdigit(lex->chr1);
    28a8:	687b      	ldr	r3, [r7, #4]
    28aa:	695b      	ldr	r3, [r3, #20]
    28ac:	4618      	mov	r0, r3
    28ae:	f7ff fda3 	bl	23f8 <unichar_isdigit>
    28b2:	4603      	mov	r3, r0
}
    28b4:	4618      	mov	r0, r3
    28b6:	3708      	adds	r7, #8
    28b8:	46bd      	mov	sp, r7
    28ba:	bd80      	pop	{r7, pc}

000028bc <is_following_base_char>:

STATIC bool is_following_base_char(mp_lexer_t *lex) {
    28bc:	b480      	push	{r7}
    28be:	b085      	sub	sp, #20
    28c0:	af00      	add	r7, sp, #0
    28c2:	6078      	str	r0, [r7, #4]
    const unichar chr1 = lex->chr1 | 0x20;
    28c4:	687b      	ldr	r3, [r7, #4]
    28c6:	695b      	ldr	r3, [r3, #20]
    28c8:	f043 0320 	orr.w	r3, r3, #32
    28cc:	60fb      	str	r3, [r7, #12]
    return chr1 == 'b' || chr1 == 'o' || chr1 == 'x';
    28ce:	68fb      	ldr	r3, [r7, #12]
    28d0:	2b62      	cmp	r3, #98	; 0x62
    28d2:	d005      	beq.n	28e0 <is_following_base_char+0x24>
    28d4:	68fb      	ldr	r3, [r7, #12]
    28d6:	2b6f      	cmp	r3, #111	; 0x6f
    28d8:	d002      	beq.n	28e0 <is_following_base_char+0x24>
    28da:	68fb      	ldr	r3, [r7, #12]
    28dc:	2b78      	cmp	r3, #120	; 0x78
    28de:	d101      	bne.n	28e4 <is_following_base_char+0x28>
    28e0:	2301      	movs	r3, #1
    28e2:	e000      	b.n	28e6 <is_following_base_char+0x2a>
    28e4:	2300      	movs	r3, #0
    28e6:	f003 0301 	and.w	r3, r3, #1
    28ea:	b2db      	uxtb	r3, r3
}
    28ec:	4618      	mov	r0, r3
    28ee:	3714      	adds	r7, #20
    28f0:	46bd      	mov	sp, r7
    28f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    28f6:	4770      	bx	lr

000028f8 <is_following_odigit>:

STATIC bool is_following_odigit(mp_lexer_t *lex) {
    28f8:	b480      	push	{r7}
    28fa:	b083      	sub	sp, #12
    28fc:	af00      	add	r7, sp, #0
    28fe:	6078      	str	r0, [r7, #4]
    return lex->chr1 >= '0' && lex->chr1 <= '7';
    2900:	687b      	ldr	r3, [r7, #4]
    2902:	695b      	ldr	r3, [r3, #20]
    2904:	2b2f      	cmp	r3, #47	; 0x2f
    2906:	d905      	bls.n	2914 <is_following_odigit+0x1c>
    2908:	687b      	ldr	r3, [r7, #4]
    290a:	695b      	ldr	r3, [r3, #20]
    290c:	2b37      	cmp	r3, #55	; 0x37
    290e:	d801      	bhi.n	2914 <is_following_odigit+0x1c>
    2910:	2301      	movs	r3, #1
    2912:	e000      	b.n	2916 <is_following_odigit+0x1e>
    2914:	2300      	movs	r3, #0
    2916:	f003 0301 	and.w	r3, r3, #1
    291a:	b2db      	uxtb	r3, r3
}
    291c:	4618      	mov	r0, r3
    291e:	370c      	adds	r7, #12
    2920:	46bd      	mov	sp, r7
    2922:	f85d 7b04 	ldr.w	r7, [sp], #4
    2926:	4770      	bx	lr

00002928 <is_string_or_bytes>:

STATIC bool is_string_or_bytes(mp_lexer_t *lex) {
    2928:	b580      	push	{r7, lr}
    292a:	b082      	sub	sp, #8
    292c:	af00      	add	r7, sp, #0
    292e:	6078      	str	r0, [r7, #4]
    return is_char_or(lex, '\'', '\"')
    2930:	2222      	movs	r2, #34	; 0x22
    2932:	2127      	movs	r1, #39	; 0x27
    2934:	6878      	ldr	r0, [r7, #4]
    2936:	f7ff fed5 	bl	26e4 <is_char_or>
    293a:	4603      	mov	r3, r0
        || (is_char_or3(lex, 'r', 'u', 'b') && is_char_following_or(lex, '\'', '\"'))
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    293c:	2b00      	cmp	r3, #0
    293e:	d128      	bne.n	2992 <is_string_or_bytes+0x6a>
        || (is_char_or3(lex, 'r', 'u', 'b') && is_char_following_or(lex, '\'', '\"'))
    2940:	2362      	movs	r3, #98	; 0x62
    2942:	2275      	movs	r2, #117	; 0x75
    2944:	2172      	movs	r1, #114	; 0x72
    2946:	6878      	ldr	r0, [r7, #4]
    2948:	f7ff feea 	bl	2720 <is_char_or3>
    294c:	4603      	mov	r3, r0
    294e:	2b00      	cmp	r3, #0
    2950:	d007      	beq.n	2962 <is_string_or_bytes+0x3a>
    2952:	2222      	movs	r2, #34	; 0x22
    2954:	2127      	movs	r1, #39	; 0x27
    2956:	6878      	ldr	r0, [r7, #4]
    2958:	f7ff ff1e 	bl	2798 <is_char_following_or>
    295c:	4603      	mov	r3, r0
    295e:	2b00      	cmp	r3, #0
    2960:	d117      	bne.n	2992 <is_string_or_bytes+0x6a>
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    2962:	2262      	movs	r2, #98	; 0x62
    2964:	2172      	movs	r1, #114	; 0x72
    2966:	6878      	ldr	r0, [r7, #4]
    2968:	f7ff ff52 	bl	2810 <is_char_and>
    296c:	4603      	mov	r3, r0
    296e:	2b00      	cmp	r3, #0
    2970:	d107      	bne.n	2982 <is_string_or_bytes+0x5a>
    2972:	2272      	movs	r2, #114	; 0x72
    2974:	2162      	movs	r1, #98	; 0x62
    2976:	6878      	ldr	r0, [r7, #4]
    2978:	f7ff ff4a 	bl	2810 <is_char_and>
    297c:	4603      	mov	r3, r0
    297e:	2b00      	cmp	r3, #0
    2980:	d009      	beq.n	2996 <is_string_or_bytes+0x6e>
            && is_char_following_following_or(lex, '\'', '\"'));
    2982:	2222      	movs	r2, #34	; 0x22
    2984:	2127      	movs	r1, #39	; 0x27
    2986:	6878      	ldr	r0, [r7, #4]
    2988:	f7ff ff24 	bl	27d4 <is_char_following_following_or>
    298c:	4603      	mov	r3, r0
    298e:	2b00      	cmp	r3, #0
    2990:	d001      	beq.n	2996 <is_string_or_bytes+0x6e>
        || ((is_char_and(lex, 'r', 'b') || is_char_and(lex, 'b', 'r'))
    2992:	2301      	movs	r3, #1
    2994:	e000      	b.n	2998 <is_string_or_bytes+0x70>
    2996:	2300      	movs	r3, #0
    return is_char_or(lex, '\'', '\"')
    2998:	f003 0301 	and.w	r3, r3, #1
    299c:	b2db      	uxtb	r3, r3
}
    299e:	4618      	mov	r0, r3
    29a0:	3708      	adds	r7, #8
    29a2:	46bd      	mov	sp, r7
    29a4:	bd80      	pop	{r7, pc}
    29a6:	bf00      	nop

000029a8 <is_head_of_identifier>:

// to easily parse utf-8 identifiers we allow any raw byte with high bit set
STATIC bool is_head_of_identifier(mp_lexer_t *lex) {
    29a8:	b580      	push	{r7, lr}
    29aa:	b082      	sub	sp, #8
    29ac:	af00      	add	r7, sp, #0
    29ae:	6078      	str	r0, [r7, #4]
    return is_letter(lex) || lex->chr0 == '_' || lex->chr0 >= 0x80;
    29b0:	6878      	ldr	r0, [r7, #4]
    29b2:	f7ff ff59 	bl	2868 <is_letter>
    29b6:	4603      	mov	r3, r0
    29b8:	2b00      	cmp	r3, #0
    29ba:	d107      	bne.n	29cc <is_head_of_identifier+0x24>
    29bc:	687b      	ldr	r3, [r7, #4]
    29be:	691b      	ldr	r3, [r3, #16]
    29c0:	2b5f      	cmp	r3, #95	; 0x5f
    29c2:	d003      	beq.n	29cc <is_head_of_identifier+0x24>
    29c4:	687b      	ldr	r3, [r7, #4]
    29c6:	691b      	ldr	r3, [r3, #16]
    29c8:	2b7f      	cmp	r3, #127	; 0x7f
    29ca:	d901      	bls.n	29d0 <is_head_of_identifier+0x28>
    29cc:	2301      	movs	r3, #1
    29ce:	e000      	b.n	29d2 <is_head_of_identifier+0x2a>
    29d0:	2300      	movs	r3, #0
    29d2:	f003 0301 	and.w	r3, r3, #1
    29d6:	b2db      	uxtb	r3, r3
}
    29d8:	4618      	mov	r0, r3
    29da:	3708      	adds	r7, #8
    29dc:	46bd      	mov	sp, r7
    29de:	bd80      	pop	{r7, pc}

000029e0 <is_tail_of_identifier>:

STATIC bool is_tail_of_identifier(mp_lexer_t *lex) {
    29e0:	b580      	push	{r7, lr}
    29e2:	b082      	sub	sp, #8
    29e4:	af00      	add	r7, sp, #0
    29e6:	6078      	str	r0, [r7, #4]
    return is_head_of_identifier(lex) || is_digit(lex);
    29e8:	6878      	ldr	r0, [r7, #4]
    29ea:	f7ff ffdd 	bl	29a8 <is_head_of_identifier>
    29ee:	4603      	mov	r3, r0
    29f0:	2b00      	cmp	r3, #0
    29f2:	d105      	bne.n	2a00 <is_tail_of_identifier+0x20>
    29f4:	6878      	ldr	r0, [r7, #4]
    29f6:	f7ff ff45 	bl	2884 <is_digit>
    29fa:	4603      	mov	r3, r0
    29fc:	2b00      	cmp	r3, #0
    29fe:	d001      	beq.n	2a04 <is_tail_of_identifier+0x24>
    2a00:	2301      	movs	r3, #1
    2a02:	e000      	b.n	2a06 <is_tail_of_identifier+0x26>
    2a04:	2300      	movs	r3, #0
    2a06:	f003 0301 	and.w	r3, r3, #1
    2a0a:	b2db      	uxtb	r3, r3
}
    2a0c:	4618      	mov	r0, r3
    2a0e:	3708      	adds	r7, #8
    2a10:	46bd      	mov	sp, r7
    2a12:	bd80      	pop	{r7, pc}

00002a14 <next_char>:

STATIC void next_char(mp_lexer_t *lex) {
    2a14:	b580      	push	{r7, lr}
    2a16:	b082      	sub	sp, #8
    2a18:	af00      	add	r7, sp, #0
    2a1a:	6078      	str	r0, [r7, #4]
    if (lex->chr0 == '\n') {
    2a1c:	687b      	ldr	r3, [r7, #4]
    2a1e:	691b      	ldr	r3, [r3, #16]
    2a20:	2b0a      	cmp	r3, #10
    2a22:	d108      	bne.n	2a36 <next_char+0x22>
        // a new line
        ++lex->line;
    2a24:	687b      	ldr	r3, [r7, #4]
    2a26:	69db      	ldr	r3, [r3, #28]
    2a28:	1c5a      	adds	r2, r3, #1
    2a2a:	687b      	ldr	r3, [r7, #4]
    2a2c:	61da      	str	r2, [r3, #28]
        lex->column = 1;
    2a2e:	687b      	ldr	r3, [r7, #4]
    2a30:	2201      	movs	r2, #1
    2a32:	621a      	str	r2, [r3, #32]
    2a34:	e011      	b.n	2a5a <next_char+0x46>
    } else if (lex->chr0 == '\t') {
    2a36:	687b      	ldr	r3, [r7, #4]
    2a38:	691b      	ldr	r3, [r3, #16]
    2a3a:	2b09      	cmp	r3, #9
    2a3c:	d108      	bne.n	2a50 <next_char+0x3c>
        // a tab
        lex->column = (((lex->column - 1 + TAB_SIZE) / TAB_SIZE) * TAB_SIZE) + 1;
    2a3e:	687b      	ldr	r3, [r7, #4]
    2a40:	6a1b      	ldr	r3, [r3, #32]
    2a42:	3307      	adds	r3, #7
    2a44:	08db      	lsrs	r3, r3, #3
    2a46:	00db      	lsls	r3, r3, #3
    2a48:	1c5a      	adds	r2, r3, #1
    2a4a:	687b      	ldr	r3, [r7, #4]
    2a4c:	621a      	str	r2, [r3, #32]
    2a4e:	e004      	b.n	2a5a <next_char+0x46>
    } else {
        // a character worth one column
        ++lex->column;
    2a50:	687b      	ldr	r3, [r7, #4]
    2a52:	6a1b      	ldr	r3, [r3, #32]
    2a54:	1c5a      	adds	r2, r3, #1
    2a56:	687b      	ldr	r3, [r7, #4]
    2a58:	621a      	str	r2, [r3, #32]
    }

    lex->chr0 = lex->chr1;
    2a5a:	687b      	ldr	r3, [r7, #4]
    2a5c:	695a      	ldr	r2, [r3, #20]
    2a5e:	687b      	ldr	r3, [r7, #4]
    2a60:	611a      	str	r2, [r3, #16]
    lex->chr1 = lex->chr2;
    2a62:	687b      	ldr	r3, [r7, #4]
    2a64:	699a      	ldr	r2, [r3, #24]
    2a66:	687b      	ldr	r3, [r7, #4]
    2a68:	615a      	str	r2, [r3, #20]
    lex->chr2 = lex->reader.readbyte(lex->reader.data);
    2a6a:	687b      	ldr	r3, [r7, #4]
    2a6c:	689b      	ldr	r3, [r3, #8]
    2a6e:	687a      	ldr	r2, [r7, #4]
    2a70:	6852      	ldr	r2, [r2, #4]
    2a72:	4610      	mov	r0, r2
    2a74:	4798      	blx	r3
    2a76:	4602      	mov	r2, r0
    2a78:	687b      	ldr	r3, [r7, #4]
    2a7a:	619a      	str	r2, [r3, #24]

    if (lex->chr1 == '\r') {
    2a7c:	687b      	ldr	r3, [r7, #4]
    2a7e:	695b      	ldr	r3, [r3, #20]
    2a80:	2b0d      	cmp	r3, #13
    2a82:	d10f      	bne.n	2aa4 <next_char+0x90>
        // CR is a new line, converted to LF
        lex->chr1 = '\n';
    2a84:	687b      	ldr	r3, [r7, #4]
    2a86:	220a      	movs	r2, #10
    2a88:	615a      	str	r2, [r3, #20]
        if (lex->chr2 == '\n') {
    2a8a:	687b      	ldr	r3, [r7, #4]
    2a8c:	699b      	ldr	r3, [r3, #24]
    2a8e:	2b0a      	cmp	r3, #10
    2a90:	d108      	bne.n	2aa4 <next_char+0x90>
            // CR LF is a single new line, throw out the extra LF
            lex->chr2 = lex->reader.readbyte(lex->reader.data);
    2a92:	687b      	ldr	r3, [r7, #4]
    2a94:	689b      	ldr	r3, [r3, #8]
    2a96:	687a      	ldr	r2, [r7, #4]
    2a98:	6852      	ldr	r2, [r2, #4]
    2a9a:	4610      	mov	r0, r2
    2a9c:	4798      	blx	r3
    2a9e:	4602      	mov	r2, r0
    2aa0:	687b      	ldr	r3, [r7, #4]
    2aa2:	619a      	str	r2, [r3, #24]
        }
    }

    // check if we need to insert a newline at end of file
    if (lex->chr2 == MP_LEXER_EOF && lex->chr1 != MP_LEXER_EOF && lex->chr1 != '\n') {
    2aa4:	687b      	ldr	r3, [r7, #4]
    2aa6:	699b      	ldr	r3, [r3, #24]
    2aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2aac:	d10b      	bne.n	2ac6 <next_char+0xb2>
    2aae:	687b      	ldr	r3, [r7, #4]
    2ab0:	695b      	ldr	r3, [r3, #20]
    2ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2ab6:	d006      	beq.n	2ac6 <next_char+0xb2>
    2ab8:	687b      	ldr	r3, [r7, #4]
    2aba:	695b      	ldr	r3, [r3, #20]
    2abc:	2b0a      	cmp	r3, #10
    2abe:	d002      	beq.n	2ac6 <next_char+0xb2>
        lex->chr2 = '\n';
    2ac0:	687b      	ldr	r3, [r7, #4]
    2ac2:	220a      	movs	r2, #10
    2ac4:	619a      	str	r2, [r3, #24]
    }
}
    2ac6:	bf00      	nop
    2ac8:	3708      	adds	r7, #8
    2aca:	46bd      	mov	sp, r7
    2acc:	bd80      	pop	{r7, pc}
    2ace:	bf00      	nop

00002ad0 <indent_push>:

STATIC void indent_push(mp_lexer_t *lex, size_t indent) {
    2ad0:	b580      	push	{r7, lr}
    2ad2:	b082      	sub	sp, #8
    2ad4:	af00      	add	r7, sp, #0
    2ad6:	6078      	str	r0, [r7, #4]
    2ad8:	6039      	str	r1, [r7, #0]
    if (lex->num_indent_level >= lex->alloc_indent_level) {
    2ada:	687b      	ldr	r3, [r7, #4]
    2adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2ade:	687b      	ldr	r3, [r7, #4]
    2ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2ae2:	429a      	cmp	r2, r3
    2ae4:	d312      	bcc.n	2b0c <indent_push+0x3c>
        lex->indent_level = m_renew(uint16_t, lex->indent_level, lex->alloc_indent_level, lex->alloc_indent_level + MICROPY_ALLOC_LEXEL_INDENT_INC);
    2ae6:	687b      	ldr	r3, [r7, #4]
    2ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2aea:	687b      	ldr	r3, [r7, #4]
    2aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2aee:	3308      	adds	r3, #8
    2af0:	005b      	lsls	r3, r3, #1
    2af2:	4619      	mov	r1, r3
    2af4:	4610      	mov	r0, r2
    2af6:	f7fd fc45 	bl	384 <m_realloc>
    2afa:	4602      	mov	r2, r0
    2afc:	687b      	ldr	r3, [r7, #4]
    2afe:	635a      	str	r2, [r3, #52]	; 0x34
        lex->alloc_indent_level += MICROPY_ALLOC_LEXEL_INDENT_INC;
    2b00:	687b      	ldr	r3, [r7, #4]
    2b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2b04:	f103 0208 	add.w	r2, r3, #8
    2b08:	687b      	ldr	r3, [r7, #4]
    2b0a:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    lex->indent_level[lex->num_indent_level++] = indent;
    2b0c:	687b      	ldr	r3, [r7, #4]
    2b0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2b10:	687b      	ldr	r3, [r7, #4]
    2b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2b14:	1c58      	adds	r0, r3, #1
    2b16:	6879      	ldr	r1, [r7, #4]
    2b18:	6308      	str	r0, [r1, #48]	; 0x30
    2b1a:	005b      	lsls	r3, r3, #1
    2b1c:	4413      	add	r3, r2
    2b1e:	683a      	ldr	r2, [r7, #0]
    2b20:	b292      	uxth	r2, r2
    2b22:	801a      	strh	r2, [r3, #0]
}
    2b24:	bf00      	nop
    2b26:	3708      	adds	r7, #8
    2b28:	46bd      	mov	sp, r7
    2b2a:	bd80      	pop	{r7, pc}

00002b2c <indent_top>:

STATIC size_t indent_top(mp_lexer_t *lex) {
    2b2c:	b480      	push	{r7}
    2b2e:	b083      	sub	sp, #12
    2b30:	af00      	add	r7, sp, #0
    2b32:	6078      	str	r0, [r7, #4]
    return lex->indent_level[lex->num_indent_level - 1];
    2b34:	687b      	ldr	r3, [r7, #4]
    2b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2b38:	687b      	ldr	r3, [r7, #4]
    2b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2b3c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    2b40:	3b01      	subs	r3, #1
    2b42:	005b      	lsls	r3, r3, #1
    2b44:	4413      	add	r3, r2
    2b46:	881b      	ldrh	r3, [r3, #0]
}
    2b48:	4618      	mov	r0, r3
    2b4a:	370c      	adds	r7, #12
    2b4c:	46bd      	mov	sp, r7
    2b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b52:	4770      	bx	lr

00002b54 <indent_pop>:

STATIC void indent_pop(mp_lexer_t *lex) {
    2b54:	b480      	push	{r7}
    2b56:	b083      	sub	sp, #12
    2b58:	af00      	add	r7, sp, #0
    2b5a:	6078      	str	r0, [r7, #4]
    lex->num_indent_level -= 1;
    2b5c:	687b      	ldr	r3, [r7, #4]
    2b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2b60:	1e5a      	subs	r2, r3, #1
    2b62:	687b      	ldr	r3, [r7, #4]
    2b64:	631a      	str	r2, [r3, #48]	; 0x30
}
    2b66:	bf00      	nop
    2b68:	370c      	adds	r7, #12
    2b6a:	46bd      	mov	sp, r7
    2b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b70:	4770      	bx	lr
    2b72:	bf00      	nop

00002b74 <get_hex>:
};

// This is called with CUR_CHAR() before first hex digit, and should return with
// it pointing to last hex digit
// num_digits must be greater than zero
STATIC bool get_hex(mp_lexer_t *lex, size_t num_digits, mp_uint_t *result) {
    2b74:	b590      	push	{r4, r7, lr}
    2b76:	b087      	sub	sp, #28
    2b78:	af00      	add	r7, sp, #0
    2b7a:	60f8      	str	r0, [r7, #12]
    2b7c:	60b9      	str	r1, [r7, #8]
    2b7e:	607a      	str	r2, [r7, #4]
    mp_uint_t num = 0;
    2b80:	2300      	movs	r3, #0
    2b82:	617b      	str	r3, [r7, #20]
    while (num_digits-- != 0) {
    2b84:	e018      	b.n	2bb8 <get_hex+0x44>
        next_char(lex);
    2b86:	68f8      	ldr	r0, [r7, #12]
    2b88:	f7ff ff44 	bl	2a14 <next_char>
        unichar c = CUR_CHAR(lex);
    2b8c:	68fb      	ldr	r3, [r7, #12]
    2b8e:	691b      	ldr	r3, [r3, #16]
    2b90:	613b      	str	r3, [r7, #16]
        if (!unichar_isxdigit(c)) {
    2b92:	6938      	ldr	r0, [r7, #16]
    2b94:	f7ff fc4e 	bl	2434 <unichar_isxdigit>
    2b98:	4603      	mov	r3, r0
    2b9a:	f083 0301 	eor.w	r3, r3, #1
    2b9e:	b2db      	uxtb	r3, r3
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d001      	beq.n	2ba8 <get_hex+0x34>
            return false;
    2ba4:	2300      	movs	r3, #0
    2ba6:	e010      	b.n	2bca <get_hex+0x56>
        }
        num = (num << 4) + unichar_xdigit_value(c);
    2ba8:	697b      	ldr	r3, [r7, #20]
    2baa:	011c      	lsls	r4, r3, #4
    2bac:	6938      	ldr	r0, [r7, #16]
    2bae:	f7ff fcdf 	bl	2570 <unichar_xdigit_value>
    2bb2:	4603      	mov	r3, r0
    2bb4:	4423      	add	r3, r4
    2bb6:	617b      	str	r3, [r7, #20]
    while (num_digits-- != 0) {
    2bb8:	68bb      	ldr	r3, [r7, #8]
    2bba:	1e5a      	subs	r2, r3, #1
    2bbc:	60ba      	str	r2, [r7, #8]
    2bbe:	2b00      	cmp	r3, #0
    2bc0:	d1e1      	bne.n	2b86 <get_hex+0x12>
    }
    *result = num;
    2bc2:	687b      	ldr	r3, [r7, #4]
    2bc4:	697a      	ldr	r2, [r7, #20]
    2bc6:	601a      	str	r2, [r3, #0]
    return true;
    2bc8:	2301      	movs	r3, #1
}
    2bca:	4618      	mov	r0, r3
    2bcc:	371c      	adds	r7, #28
    2bce:	46bd      	mov	sp, r7
    2bd0:	bd90      	pop	{r4, r7, pc}
    2bd2:	bf00      	nop

00002bd4 <parse_string_literal>:

STATIC void parse_string_literal(mp_lexer_t *lex, bool is_raw) {
    2bd4:	b580      	push	{r7, lr}
    2bd6:	b08a      	sub	sp, #40	; 0x28
    2bd8:	af00      	add	r7, sp, #0
    2bda:	6078      	str	r0, [r7, #4]
    2bdc:	460b      	mov	r3, r1
    2bde:	70fb      	strb	r3, [r7, #3]
    // get first quoting character
    char quote_char = '\'';
    2be0:	2327      	movs	r3, #39	; 0x27
    2be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (is_char(lex, '\"')) {
    2be6:	2122      	movs	r1, #34	; 0x22
    2be8:	6878      	ldr	r0, [r7, #4]
    2bea:	f7ff fd67 	bl	26bc <is_char>
    2bee:	4603      	mov	r3, r0
    2bf0:	2b00      	cmp	r3, #0
    2bf2:	d002      	beq.n	2bfa <parse_string_literal+0x26>
        quote_char = '\"';
    2bf4:	2322      	movs	r3, #34	; 0x22
    2bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    next_char(lex);
    2bfa:	6878      	ldr	r0, [r7, #4]
    2bfc:	f7ff ff0a 	bl	2a14 <next_char>

    // work out if it's a single or triple quoted literal
    size_t num_quotes;
    if (is_char_and(lex, quote_char, quote_char)) {
    2c00:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
    2c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2c08:	4619      	mov	r1, r3
    2c0a:	6878      	ldr	r0, [r7, #4]
    2c0c:	f7ff fe00 	bl	2810 <is_char_and>
    2c10:	4603      	mov	r3, r0
    2c12:	2b00      	cmp	r3, #0
    2c14:	d008      	beq.n	2c28 <parse_string_literal+0x54>
        // triple quotes
        next_char(lex);
    2c16:	6878      	ldr	r0, [r7, #4]
    2c18:	f7ff fefc 	bl	2a14 <next_char>
        next_char(lex);
    2c1c:	6878      	ldr	r0, [r7, #4]
    2c1e:	f7ff fef9 	bl	2a14 <next_char>
        num_quotes = 3;
    2c22:	2303      	movs	r3, #3
    2c24:	623b      	str	r3, [r7, #32]
    2c26:	e001      	b.n	2c2c <parse_string_literal+0x58>
    } else {
        // single quotes
        num_quotes = 1;
    2c28:	2301      	movs	r3, #1
    2c2a:	623b      	str	r3, [r7, #32]
    }

    size_t n_closing = 0;
    2c2c:	2300      	movs	r3, #0
    2c2e:	61fb      	str	r3, [r7, #28]
    while (!is_end(lex) && (num_quotes > 1 || !is_char(lex, '\n')) && n_closing < num_quotes) {
    2c30:	e1ac      	b.n	2f8c <parse_string_literal+0x3b8>
        if (is_char(lex, quote_char)) {
    2c32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    2c36:	4619      	mov	r1, r3
    2c38:	6878      	ldr	r0, [r7, #4]
    2c3a:	f7ff fd3f 	bl	26bc <is_char>
    2c3e:	4603      	mov	r3, r0
    2c40:	2b00      	cmp	r3, #0
    2c42:	d00c      	beq.n	2c5e <parse_string_literal+0x8a>
            n_closing += 1;
    2c44:	69fb      	ldr	r3, [r7, #28]
    2c46:	3301      	adds	r3, #1
    2c48:	61fb      	str	r3, [r7, #28]
            vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    2c4a:	687b      	ldr	r3, [r7, #4]
    2c4c:	f103 0244 	add.w	r2, r3, #68	; 0x44
    2c50:	687b      	ldr	r3, [r7, #4]
    2c52:	691b      	ldr	r3, [r3, #16]
    2c54:	4619      	mov	r1, r3
    2c56:	4610      	mov	r0, r2
    2c58:	f7fe fcba 	bl	15d0 <vstr_add_char>
    2c5c:	e193      	b.n	2f86 <parse_string_literal+0x3b2>
        } else {
            n_closing = 0;
    2c5e:	2300      	movs	r3, #0
    2c60:	61fb      	str	r3, [r7, #28]
            if (is_char(lex, '\\')) {
    2c62:	215c      	movs	r1, #92	; 0x5c
    2c64:	6878      	ldr	r0, [r7, #4]
    2c66:	f7ff fd29 	bl	26bc <is_char>
    2c6a:	4603      	mov	r3, r0
    2c6c:	2b00      	cmp	r3, #0
    2c6e:	f000 8180 	beq.w	2f72 <parse_string_literal+0x39e>
                next_char(lex);
    2c72:	6878      	ldr	r0, [r7, #4]
    2c74:	f7ff fece 	bl	2a14 <next_char>
                unichar c = CUR_CHAR(lex);
    2c78:	687b      	ldr	r3, [r7, #4]
    2c7a:	691b      	ldr	r3, [r3, #16]
    2c7c:	61bb      	str	r3, [r7, #24]
                if (is_raw) {
    2c7e:	78fb      	ldrb	r3, [r7, #3]
    2c80:	2b00      	cmp	r3, #0
    2c82:	d006      	beq.n	2c92 <parse_string_literal+0xbe>
                    // raw strings allow escaping of quotes, but the backslash is also emitted
                    vstr_add_char(&lex->vstr, '\\');
    2c84:	687b      	ldr	r3, [r7, #4]
    2c86:	3344      	adds	r3, #68	; 0x44
    2c88:	215c      	movs	r1, #92	; 0x5c
    2c8a:	4618      	mov	r0, r3
    2c8c:	f7fe fca0 	bl	15d0 <vstr_add_char>
    2c90:	e15b      	b.n	2f4a <parse_string_literal+0x376>
                } else {
                    switch (c) {
    2c92:	69bb      	ldr	r3, [r7, #24]
    2c94:	3b0a      	subs	r3, #10
    2c96:	2b6e      	cmp	r3, #110	; 0x6e
    2c98:	f200 8129 	bhi.w	2eee <parse_string_literal+0x31a>
    2c9c:	a201      	add	r2, pc, #4	; (adr r2, 2ca4 <parse_string_literal+0xd0>)
    2c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2ca2:	bf00      	nop
    2ca4:	00002e61 	.word	0x00002e61
    2ca8:	00002eef 	.word	0x00002eef
    2cac:	00002eef 	.word	0x00002eef
    2cb0:	00002eef 	.word	0x00002eef
    2cb4:	00002eef 	.word	0x00002eef
    2cb8:	00002eef 	.word	0x00002eef
    2cbc:	00002eef 	.word	0x00002eef
    2cc0:	00002eef 	.word	0x00002eef
    2cc4:	00002eef 	.word	0x00002eef
    2cc8:	00002eef 	.word	0x00002eef
    2ccc:	00002eef 	.word	0x00002eef
    2cd0:	00002eef 	.word	0x00002eef
    2cd4:	00002eef 	.word	0x00002eef
    2cd8:	00002eef 	.word	0x00002eef
    2cdc:	00002eef 	.word	0x00002eef
    2ce0:	00002eef 	.word	0x00002eef
    2ce4:	00002eef 	.word	0x00002eef
    2ce8:	00002eef 	.word	0x00002eef
    2cec:	00002eef 	.word	0x00002eef
    2cf0:	00002eef 	.word	0x00002eef
    2cf4:	00002eef 	.word	0x00002eef
    2cf8:	00002eef 	.word	0x00002eef
    2cfc:	00002eef 	.word	0x00002eef
    2d00:	00002eef 	.word	0x00002eef
    2d04:	00002f49 	.word	0x00002f49
    2d08:	00002eef 	.word	0x00002eef
    2d0c:	00002eef 	.word	0x00002eef
    2d10:	00002eef 	.word	0x00002eef
    2d14:	00002eef 	.word	0x00002eef
    2d18:	00002f49 	.word	0x00002f49
    2d1c:	00002eef 	.word	0x00002eef
    2d20:	00002eef 	.word	0x00002eef
    2d24:	00002eef 	.word	0x00002eef
    2d28:	00002eef 	.word	0x00002eef
    2d2c:	00002eef 	.word	0x00002eef
    2d30:	00002eef 	.word	0x00002eef
    2d34:	00002eef 	.word	0x00002eef
    2d38:	00002eef 	.word	0x00002eef
    2d3c:	00002eef 	.word	0x00002eef
    2d40:	00002eef 	.word	0x00002eef
    2d44:	00002eef 	.word	0x00002eef
    2d48:	00002eef 	.word	0x00002eef
    2d4c:	00002eef 	.word	0x00002eef
    2d50:	00002eef 	.word	0x00002eef
    2d54:	00002eef 	.word	0x00002eef
    2d58:	00002eef 	.word	0x00002eef
    2d5c:	00002eef 	.word	0x00002eef
    2d60:	00002eef 	.word	0x00002eef
    2d64:	00002eef 	.word	0x00002eef
    2d68:	00002eef 	.word	0x00002eef
    2d6c:	00002eef 	.word	0x00002eef
    2d70:	00002eef 	.word	0x00002eef
    2d74:	00002eef 	.word	0x00002eef
    2d78:	00002eef 	.word	0x00002eef
    2d7c:	00002eef 	.word	0x00002eef
    2d80:	00002eef 	.word	0x00002eef
    2d84:	00002eef 	.word	0x00002eef
    2d88:	00002eef 	.word	0x00002eef
    2d8c:	00002eef 	.word	0x00002eef
    2d90:	00002eef 	.word	0x00002eef
    2d94:	00002eef 	.word	0x00002eef
    2d98:	00002eef 	.word	0x00002eef
    2d9c:	00002eef 	.word	0x00002eef
    2da0:	00002eef 	.word	0x00002eef
    2da4:	00002eef 	.word	0x00002eef
    2da8:	00002eef 	.word	0x00002eef
    2dac:	00002eef 	.word	0x00002eef
    2db0:	00002eef 	.word	0x00002eef
    2db4:	00002ee9 	.word	0x00002ee9
    2db8:	00002eef 	.word	0x00002eef
    2dbc:	00002eef 	.word	0x00002eef
    2dc0:	00002eef 	.word	0x00002eef
    2dc4:	00002eef 	.word	0x00002eef
    2dc8:	00002eef 	.word	0x00002eef
    2dcc:	00002eef 	.word	0x00002eef
    2dd0:	00002e93 	.word	0x00002e93
    2dd4:	00002eef 	.word	0x00002eef
    2dd8:	00002eef 	.word	0x00002eef
    2ddc:	00002eef 	.word	0x00002eef
    2de0:	00002eef 	.word	0x00002eef
    2de4:	00002eef 	.word	0x00002eef
    2de8:	00002eef 	.word	0x00002eef
    2dec:	00002f49 	.word	0x00002f49
    2df0:	00002eef 	.word	0x00002eef
    2df4:	00002eef 	.word	0x00002eef
    2df8:	00002eef 	.word	0x00002eef
    2dfc:	00002eef 	.word	0x00002eef
    2e00:	00002e69 	.word	0x00002e69
    2e04:	00002e6f 	.word	0x00002e6f
    2e08:	00002eef 	.word	0x00002eef
    2e0c:	00002eef 	.word	0x00002eef
    2e10:	00002eef 	.word	0x00002eef
    2e14:	00002e87 	.word	0x00002e87
    2e18:	00002eef 	.word	0x00002eef
    2e1c:	00002eef 	.word	0x00002eef
    2e20:	00002eef 	.word	0x00002eef
    2e24:	00002eef 	.word	0x00002eef
    2e28:	00002eef 	.word	0x00002eef
    2e2c:	00002eef 	.word	0x00002eef
    2e30:	00002eef 	.word	0x00002eef
    2e34:	00002e7b 	.word	0x00002e7b
    2e38:	00002eef 	.word	0x00002eef
    2e3c:	00002eef 	.word	0x00002eef
    2e40:	00002eef 	.word	0x00002eef
    2e44:	00002e8d 	.word	0x00002e8d
    2e48:	00002eef 	.word	0x00002eef
    2e4c:	00002e75 	.word	0x00002e75
    2e50:	00002e93 	.word	0x00002e93
    2e54:	00002e81 	.word	0x00002e81
    2e58:	00002eef 	.word	0x00002eef
    2e5c:	00002ea9 	.word	0x00002ea9
                        // note: "c" can never be MP_LEXER_EOF because next_char
                        // always inserts a newline at the end of the input stream
                        case '\n': c = MP_LEXER_EOF; break; // backslash escape the newline, just ignore it
    2e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2e64:	61bb      	str	r3, [r7, #24]
    2e66:	e070      	b.n	2f4a <parse_string_literal+0x376>
                        case '\\': break;
                        case '\'': break;
                        case '"': break;
                        case 'a': c = 0x07; break;
    2e68:	2307      	movs	r3, #7
    2e6a:	61bb      	str	r3, [r7, #24]
    2e6c:	e06d      	b.n	2f4a <parse_string_literal+0x376>
                        case 'b': c = 0x08; break;
    2e6e:	2308      	movs	r3, #8
    2e70:	61bb      	str	r3, [r7, #24]
    2e72:	e06a      	b.n	2f4a <parse_string_literal+0x376>
                        case 't': c = 0x09; break;
    2e74:	2309      	movs	r3, #9
    2e76:	61bb      	str	r3, [r7, #24]
    2e78:	e067      	b.n	2f4a <parse_string_literal+0x376>
                        case 'n': c = 0x0a; break;
    2e7a:	230a      	movs	r3, #10
    2e7c:	61bb      	str	r3, [r7, #24]
    2e7e:	e064      	b.n	2f4a <parse_string_literal+0x376>
                        case 'v': c = 0x0b; break;
    2e80:	230b      	movs	r3, #11
    2e82:	61bb      	str	r3, [r7, #24]
    2e84:	e061      	b.n	2f4a <parse_string_literal+0x376>
                        case 'f': c = 0x0c; break;
    2e86:	230c      	movs	r3, #12
    2e88:	61bb      	str	r3, [r7, #24]
    2e8a:	e05e      	b.n	2f4a <parse_string_literal+0x376>
                        case 'r': c = 0x0d; break;
    2e8c:	230d      	movs	r3, #13
    2e8e:	61bb      	str	r3, [r7, #24]
    2e90:	e05b      	b.n	2f4a <parse_string_literal+0x376>
                        case 'u':
                        case 'U':
                            if (lex->tok_kind == MP_TOKEN_BYTES) {
    2e92:	687b      	ldr	r3, [r7, #4]
    2e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2e96:	2b0b      	cmp	r3, #11
    2e98:	d106      	bne.n	2ea8 <parse_string_literal+0x2d4>
                                // b'\u1234' == b'\\u1234'
                                vstr_add_char(&lex->vstr, '\\');
    2e9a:	687b      	ldr	r3, [r7, #4]
    2e9c:	3344      	adds	r3, #68	; 0x44
    2e9e:	215c      	movs	r1, #92	; 0x5c
    2ea0:	4618      	mov	r0, r3
    2ea2:	f7fe fb95 	bl	15d0 <vstr_add_char>
                                break;
    2ea6:	e050      	b.n	2f4a <parse_string_literal+0x376>
                            }
                            // Otherwise fall through.
                        case 'x':
                        {
                            mp_uint_t num = 0;
    2ea8:	2300      	movs	r3, #0
    2eaa:	60fb      	str	r3, [r7, #12]
                            if (!get_hex(lex, (c == 'x' ? 2 : c == 'u' ? 4 : 8), &num)) {
    2eac:	69bb      	ldr	r3, [r7, #24]
    2eae:	2b78      	cmp	r3, #120	; 0x78
    2eb0:	d006      	beq.n	2ec0 <parse_string_literal+0x2ec>
    2eb2:	69bb      	ldr	r3, [r7, #24]
    2eb4:	2b75      	cmp	r3, #117	; 0x75
    2eb6:	d101      	bne.n	2ebc <parse_string_literal+0x2e8>
    2eb8:	2304      	movs	r3, #4
    2eba:	e002      	b.n	2ec2 <parse_string_literal+0x2ee>
    2ebc:	2308      	movs	r3, #8
    2ebe:	e000      	b.n	2ec2 <parse_string_literal+0x2ee>
    2ec0:	2302      	movs	r3, #2
    2ec2:	f107 020c 	add.w	r2, r7, #12
    2ec6:	4619      	mov	r1, r3
    2ec8:	6878      	ldr	r0, [r7, #4]
    2eca:	f7ff fe53 	bl	2b74 <get_hex>
    2ece:	4603      	mov	r3, r0
    2ed0:	f083 0301 	eor.w	r3, r3, #1
    2ed4:	b2db      	uxtb	r3, r3
    2ed6:	2b00      	cmp	r3, #0
    2ed8:	d002      	beq.n	2ee0 <parse_string_literal+0x30c>
                                // not enough hex chars for escape sequence
                                lex->tok_kind = MP_TOKEN_INVALID;
    2eda:	687b      	ldr	r3, [r7, #4]
    2edc:	2201      	movs	r2, #1
    2ede:	641a      	str	r2, [r3, #64]	; 0x40
                            }
                            c = num;
    2ee0:	68fb      	ldr	r3, [r7, #12]
    2ee2:	61bb      	str	r3, [r7, #24]
                            break;
    2ee4:	bf00      	nop
    2ee6:	e030      	b.n	2f4a <parse_string_literal+0x376>
                            // Supporting '\N{LATIN SMALL LETTER A}' == 'a' would require keeping the
                            // entire Unicode name table in the core. As of Unicode 6.3.0, that's nearly
                            // 3MB of text; even gzip-compressed and with minimal structure, it'll take
                            // roughly half a meg of storage. This form of Unicode escape may be added
                            // later on, but it's definitely not a priority right now. -- CJA 20140607
                            mp_raise_NotImplementedError("unicode name escapes");
    2ee8:	483e      	ldr	r0, [pc, #248]	; (2fe4 <parse_string_literal+0x410>)
    2eea:	f00a f895 	bl	d018 <mp_raise_NotImplementedError>
                            break;
                        default:
                            if (c >= '0' && c <= '7') {
    2eee:	69bb      	ldr	r3, [r7, #24]
    2ef0:	2b2f      	cmp	r3, #47	; 0x2f
    2ef2:	d922      	bls.n	2f3a <parse_string_literal+0x366>
    2ef4:	69bb      	ldr	r3, [r7, #24]
    2ef6:	2b37      	cmp	r3, #55	; 0x37
    2ef8:	d81f      	bhi.n	2f3a <parse_string_literal+0x366>
                                // Octal sequence, 1-3 chars
                                size_t digits = 3;
    2efa:	2303      	movs	r3, #3
    2efc:	617b      	str	r3, [r7, #20]
                                mp_uint_t num = c - '0';
    2efe:	69bb      	ldr	r3, [r7, #24]
    2f00:	3b30      	subs	r3, #48	; 0x30
    2f02:	613b      	str	r3, [r7, #16]
                                while (is_following_odigit(lex) && --digits != 0) {
    2f04:	e009      	b.n	2f1a <parse_string_literal+0x346>
                                    next_char(lex);
    2f06:	6878      	ldr	r0, [r7, #4]
    2f08:	f7ff fd84 	bl	2a14 <next_char>
                                    num = num * 8 + (CUR_CHAR(lex) - '0');
    2f0c:	693b      	ldr	r3, [r7, #16]
    2f0e:	00da      	lsls	r2, r3, #3
    2f10:	687b      	ldr	r3, [r7, #4]
    2f12:	691b      	ldr	r3, [r3, #16]
    2f14:	4413      	add	r3, r2
    2f16:	3b30      	subs	r3, #48	; 0x30
    2f18:	613b      	str	r3, [r7, #16]
                                while (is_following_odigit(lex) && --digits != 0) {
    2f1a:	6878      	ldr	r0, [r7, #4]
    2f1c:	f7ff fcec 	bl	28f8 <is_following_odigit>
    2f20:	4603      	mov	r3, r0
    2f22:	2b00      	cmp	r3, #0
    2f24:	d005      	beq.n	2f32 <parse_string_literal+0x35e>
    2f26:	697b      	ldr	r3, [r7, #20]
    2f28:	3b01      	subs	r3, #1
    2f2a:	617b      	str	r3, [r7, #20]
    2f2c:	697b      	ldr	r3, [r7, #20]
    2f2e:	2b00      	cmp	r3, #0
    2f30:	d1e9      	bne.n	2f06 <parse_string_literal+0x332>
                                }
                                c = num;
    2f32:	693b      	ldr	r3, [r7, #16]
    2f34:	61bb      	str	r3, [r7, #24]
                            if (c >= '0' && c <= '7') {
    2f36:	bf00      	nop
                            } else {
                                // unrecognised escape character; CPython lets this through verbatim as '\' and then the character
                                vstr_add_char(&lex->vstr, '\\');
                            }
                            break;
    2f38:	e007      	b.n	2f4a <parse_string_literal+0x376>
                                vstr_add_char(&lex->vstr, '\\');
    2f3a:	687b      	ldr	r3, [r7, #4]
    2f3c:	3344      	adds	r3, #68	; 0x44
    2f3e:	215c      	movs	r1, #92	; 0x5c
    2f40:	4618      	mov	r0, r3
    2f42:	f7fe fb45 	bl	15d0 <vstr_add_char>
                            break;
    2f46:	e000      	b.n	2f4a <parse_string_literal+0x376>
                        case '"': break;
    2f48:	bf00      	nop
                    }
                }
                if (c != MP_LEXER_EOF) {
    2f4a:	69bb      	ldr	r3, [r7, #24]
    2f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2f50:	d019      	beq.n	2f86 <parse_string_literal+0x3b2>
                            // this raises a generic SyntaxError; could provide more info
                            lex->tok_kind = MP_TOKEN_INVALID;
                        }
                    } else {
                        // without unicode everything is just added as an 8-bit byte
                        if (c < 0x100) {
    2f52:	69bb      	ldr	r3, [r7, #24]
    2f54:	2bff      	cmp	r3, #255	; 0xff
    2f56:	d808      	bhi.n	2f6a <parse_string_literal+0x396>
                            vstr_add_byte(&lex->vstr, c);
    2f58:	687b      	ldr	r3, [r7, #4]
    2f5a:	3344      	adds	r3, #68	; 0x44
    2f5c:	69ba      	ldr	r2, [r7, #24]
    2f5e:	b2d2      	uxtb	r2, r2
    2f60:	4611      	mov	r1, r2
    2f62:	4618      	mov	r0, r3
    2f64:	f7fe fb22 	bl	15ac <vstr_add_byte>
    2f68:	e00d      	b.n	2f86 <parse_string_literal+0x3b2>
                        } else {
                            // 8-bit character out of range
                            // this raises a generic SyntaxError; could provide more info
                            lex->tok_kind = MP_TOKEN_INVALID;
    2f6a:	687b      	ldr	r3, [r7, #4]
    2f6c:	2201      	movs	r2, #1
    2f6e:	641a      	str	r2, [r3, #64]	; 0x40
    2f70:	e009      	b.n	2f86 <parse_string_literal+0x3b2>
                    }
                }
            } else {
                // Add the "character" as a byte so that we remain 8-bit clean.
                // This way, strings are parsed correctly whether or not they contain utf-8 chars.
                vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    2f72:	687b      	ldr	r3, [r7, #4]
    2f74:	f103 0244 	add.w	r2, r3, #68	; 0x44
    2f78:	687b      	ldr	r3, [r7, #4]
    2f7a:	691b      	ldr	r3, [r3, #16]
    2f7c:	b2db      	uxtb	r3, r3
    2f7e:	4619      	mov	r1, r3
    2f80:	4610      	mov	r0, r2
    2f82:	f7fe fb13 	bl	15ac <vstr_add_byte>
            }
        }
        next_char(lex);
    2f86:	6878      	ldr	r0, [r7, #4]
    2f88:	f7ff fd44 	bl	2a14 <next_char>
    while (!is_end(lex) && (num_quotes > 1 || !is_char(lex, '\n')) && n_closing < num_quotes) {
    2f8c:	6878      	ldr	r0, [r7, #4]
    2f8e:	f7ff fb71 	bl	2674 <is_end>
    2f92:	4603      	mov	r3, r0
    2f94:	f083 0301 	eor.w	r3, r3, #1
    2f98:	b2db      	uxtb	r3, r3
    2f9a:	2b00      	cmp	r3, #0
    2f9c:	d011      	beq.n	2fc2 <parse_string_literal+0x3ee>
    2f9e:	6a3b      	ldr	r3, [r7, #32]
    2fa0:	2b01      	cmp	r3, #1
    2fa2:	d809      	bhi.n	2fb8 <parse_string_literal+0x3e4>
    2fa4:	210a      	movs	r1, #10
    2fa6:	6878      	ldr	r0, [r7, #4]
    2fa8:	f7ff fb88 	bl	26bc <is_char>
    2fac:	4603      	mov	r3, r0
    2fae:	f083 0301 	eor.w	r3, r3, #1
    2fb2:	b2db      	uxtb	r3, r3
    2fb4:	2b00      	cmp	r3, #0
    2fb6:	d004      	beq.n	2fc2 <parse_string_literal+0x3ee>
    2fb8:	69fa      	ldr	r2, [r7, #28]
    2fba:	6a3b      	ldr	r3, [r7, #32]
    2fbc:	429a      	cmp	r2, r3
    2fbe:	f4ff ae38 	bcc.w	2c32 <parse_string_literal+0x5e>
    }

    // check we got the required end quotes
    if (n_closing < num_quotes) {
    2fc2:	69fa      	ldr	r2, [r7, #28]
    2fc4:	6a3b      	ldr	r3, [r7, #32]
    2fc6:	429a      	cmp	r2, r3
    2fc8:	d202      	bcs.n	2fd0 <parse_string_literal+0x3fc>
        lex->tok_kind = MP_TOKEN_LONELY_STRING_OPEN;
    2fca:	687b      	ldr	r3, [r7, #4]
    2fcc:	2203      	movs	r2, #3
    2fce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    // cut off the end quotes from the token text
    vstr_cut_tail_bytes(&lex->vstr, n_closing);
    2fd0:	687b      	ldr	r3, [r7, #4]
    2fd2:	3344      	adds	r3, #68	; 0x44
    2fd4:	69f9      	ldr	r1, [r7, #28]
    2fd6:	4618      	mov	r0, r3
    2fd8:	f7fe fba4 	bl	1724 <vstr_cut_tail_bytes>
}
    2fdc:	bf00      	nop
    2fde:	3728      	adds	r7, #40	; 0x28
    2fe0:	46bd      	mov	sp, r7
    2fe2:	bd80      	pop	{r7, pc}
    2fe4:	0001db48 	.word	0x0001db48

00002fe8 <skip_whitespace>:

STATIC bool skip_whitespace(mp_lexer_t *lex, bool stop_at_newline) {
    2fe8:	b580      	push	{r7, lr}
    2fea:	b084      	sub	sp, #16
    2fec:	af00      	add	r7, sp, #0
    2fee:	6078      	str	r0, [r7, #4]
    2ff0:	460b      	mov	r3, r1
    2ff2:	70fb      	strb	r3, [r7, #3]
    bool had_physical_newline = false;
    2ff4:	2300      	movs	r3, #0
    2ff6:	73fb      	strb	r3, [r7, #15]
    while (!is_end(lex)) {
    2ff8:	e04b      	b.n	3092 <skip_whitespace+0xaa>
        if (is_physical_newline(lex)) {
    2ffa:	6878      	ldr	r0, [r7, #4]
    2ffc:	f7ff fb4c 	bl	2698 <is_physical_newline>
    3000:	4603      	mov	r3, r0
    3002:	2b00      	cmp	r3, #0
    3004:	d00c      	beq.n	3020 <skip_whitespace+0x38>
            if (stop_at_newline && lex->nested_bracket_level == 0) {
    3006:	78fb      	ldrb	r3, [r7, #3]
    3008:	2b00      	cmp	r3, #0
    300a:	d003      	beq.n	3014 <skip_whitespace+0x2c>
    300c:	687b      	ldr	r3, [r7, #4]
    300e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3010:	2b00      	cmp	r3, #0
    3012:	d048      	beq.n	30a6 <skip_whitespace+0xbe>
                break;
            }
            had_physical_newline = true;
    3014:	2301      	movs	r3, #1
    3016:	73fb      	strb	r3, [r7, #15]
            next_char(lex);
    3018:	6878      	ldr	r0, [r7, #4]
    301a:	f7ff fcfb 	bl	2a14 <next_char>
    301e:	e038      	b.n	3092 <skip_whitespace+0xaa>
        } else if (is_whitespace(lex)) {
    3020:	6878      	ldr	r0, [r7, #4]
    3022:	f7ff fc13 	bl	284c <is_whitespace>
    3026:	4603      	mov	r3, r0
    3028:	2b00      	cmp	r3, #0
    302a:	d003      	beq.n	3034 <skip_whitespace+0x4c>
            next_char(lex);
    302c:	6878      	ldr	r0, [r7, #4]
    302e:	f7ff fcf1 	bl	2a14 <next_char>
    3032:	e02e      	b.n	3092 <skip_whitespace+0xaa>
        } else if (is_char(lex, '#')) {
    3034:	2123      	movs	r1, #35	; 0x23
    3036:	6878      	ldr	r0, [r7, #4]
    3038:	f7ff fb40 	bl	26bc <is_char>
    303c:	4603      	mov	r3, r0
    303e:	2b00      	cmp	r3, #0
    3040:	d019      	beq.n	3076 <skip_whitespace+0x8e>
            next_char(lex);
    3042:	6878      	ldr	r0, [r7, #4]
    3044:	f7ff fce6 	bl	2a14 <next_char>
            while (!is_end(lex) && !is_physical_newline(lex)) {
    3048:	e002      	b.n	3050 <skip_whitespace+0x68>
                next_char(lex);
    304a:	6878      	ldr	r0, [r7, #4]
    304c:	f7ff fce2 	bl	2a14 <next_char>
            while (!is_end(lex) && !is_physical_newline(lex)) {
    3050:	6878      	ldr	r0, [r7, #4]
    3052:	f7ff fb0f 	bl	2674 <is_end>
    3056:	4603      	mov	r3, r0
    3058:	f083 0301 	eor.w	r3, r3, #1
    305c:	b2db      	uxtb	r3, r3
    305e:	2b00      	cmp	r3, #0
    3060:	d017      	beq.n	3092 <skip_whitespace+0xaa>
    3062:	6878      	ldr	r0, [r7, #4]
    3064:	f7ff fb18 	bl	2698 <is_physical_newline>
    3068:	4603      	mov	r3, r0
    306a:	f083 0301 	eor.w	r3, r3, #1
    306e:	b2db      	uxtb	r3, r3
    3070:	2b00      	cmp	r3, #0
    3072:	d1ea      	bne.n	304a <skip_whitespace+0x62>
    3074:	e00d      	b.n	3092 <skip_whitespace+0xaa>
            }
            // had_physical_newline will be set on next loop
        } else if (is_char_and(lex, '\\', '\n')) {
    3076:	220a      	movs	r2, #10
    3078:	215c      	movs	r1, #92	; 0x5c
    307a:	6878      	ldr	r0, [r7, #4]
    307c:	f7ff fbc8 	bl	2810 <is_char_and>
    3080:	4603      	mov	r3, r0
    3082:	2b00      	cmp	r3, #0
    3084:	d011      	beq.n	30aa <skip_whitespace+0xc2>
            // line-continuation, so don't set had_physical_newline
            next_char(lex);
    3086:	6878      	ldr	r0, [r7, #4]
    3088:	f7ff fcc4 	bl	2a14 <next_char>
            next_char(lex);
    308c:	6878      	ldr	r0, [r7, #4]
    308e:	f7ff fcc1 	bl	2a14 <next_char>
    while (!is_end(lex)) {
    3092:	6878      	ldr	r0, [r7, #4]
    3094:	f7ff faee 	bl	2674 <is_end>
    3098:	4603      	mov	r3, r0
    309a:	f083 0301 	eor.w	r3, r3, #1
    309e:	b2db      	uxtb	r3, r3
    30a0:	2b00      	cmp	r3, #0
    30a2:	d1aa      	bne.n	2ffa <skip_whitespace+0x12>
    30a4:	e002      	b.n	30ac <skip_whitespace+0xc4>
                break;
    30a6:	bf00      	nop
    30a8:	e000      	b.n	30ac <skip_whitespace+0xc4>
        } else {
            break;
    30aa:	bf00      	nop
        }
    }
    return had_physical_newline;
    30ac:	7bfb      	ldrb	r3, [r7, #15]
}
    30ae:	4618      	mov	r0, r3
    30b0:	3710      	adds	r7, #16
    30b2:	46bd      	mov	sp, r7
    30b4:	bd80      	pop	{r7, pc}
    30b6:	bf00      	nop

000030b8 <mp_lexer_to_next>:

void mp_lexer_to_next(mp_lexer_t *lex) {
    30b8:	b580      	push	{r7, lr}
    30ba:	b08e      	sub	sp, #56	; 0x38
    30bc:	af00      	add	r7, sp, #0
    30be:	6078      	str	r0, [r7, #4]
    // start new token text
    vstr_reset(&lex->vstr);
    30c0:	687b      	ldr	r3, [r7, #4]
    30c2:	3344      	adds	r3, #68	; 0x44
    30c4:	4618      	mov	r0, r3
    30c6:	f7ff fac7 	bl	2658 <vstr_reset>

    // skip white space and comments
    bool had_physical_newline = skip_whitespace(lex, false);
    30ca:	2100      	movs	r1, #0
    30cc:	6878      	ldr	r0, [r7, #4]
    30ce:	f7ff ff8b 	bl	2fe8 <skip_whitespace>
    30d2:	4603      	mov	r3, r0
    30d4:	75fb      	strb	r3, [r7, #23]

    // set token source information
    lex->tok_line = lex->line;
    30d6:	687b      	ldr	r3, [r7, #4]
    30d8:	69da      	ldr	r2, [r3, #28]
    30da:	687b      	ldr	r3, [r7, #4]
    30dc:	639a      	str	r2, [r3, #56]	; 0x38
    lex->tok_column = lex->column;
    30de:	687b      	ldr	r3, [r7, #4]
    30e0:	6a1a      	ldr	r2, [r3, #32]
    30e2:	687b      	ldr	r3, [r7, #4]
    30e4:	63da      	str	r2, [r3, #60]	; 0x3c

    if (lex->emit_dent < 0) {
    30e6:	687b      	ldr	r3, [r7, #4]
    30e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    30ea:	2b00      	cmp	r3, #0
    30ec:	da08      	bge.n	3100 <mp_lexer_to_next+0x48>
        lex->tok_kind = MP_TOKEN_DEDENT;
    30ee:	687b      	ldr	r3, [r7, #4]
    30f0:	2206      	movs	r2, #6
    30f2:	641a      	str	r2, [r3, #64]	; 0x40
        lex->emit_dent += 1;
    30f4:	687b      	ldr	r3, [r7, #4]
    30f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    30f8:	1c5a      	adds	r2, r3, #1
    30fa:	687b      	ldr	r3, [r7, #4]
    30fc:	625a      	str	r2, [r3, #36]	; 0x24
            } else if (lex->tok_kind == MP_TOKEN_DEL_PAREN_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACKET_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACE_CLOSE) {
                lex->nested_bracket_level -= 1;
            }
        }
    }
}
    30fe:	e2ac      	b.n	365a <mp_lexer_to_next+0x5a2>
    } else if (lex->emit_dent > 0) {
    3100:	687b      	ldr	r3, [r7, #4]
    3102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3104:	2b00      	cmp	r3, #0
    3106:	dd08      	ble.n	311a <mp_lexer_to_next+0x62>
        lex->tok_kind = MP_TOKEN_INDENT;
    3108:	687b      	ldr	r3, [r7, #4]
    310a:	2205      	movs	r2, #5
    310c:	641a      	str	r2, [r3, #64]	; 0x40
        lex->emit_dent -= 1;
    310e:	687b      	ldr	r3, [r7, #4]
    3110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3112:	1e5a      	subs	r2, r3, #1
    3114:	687b      	ldr	r3, [r7, #4]
    3116:	625a      	str	r2, [r3, #36]	; 0x24
}
    3118:	e29f      	b.n	365a <mp_lexer_to_next+0x5a2>
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    311a:	7dfb      	ldrb	r3, [r7, #23]
    311c:	2b00      	cmp	r3, #0
    311e:	d03e      	beq.n	319e <mp_lexer_to_next+0xe6>
    3120:	687b      	ldr	r3, [r7, #4]
    3122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3124:	2b00      	cmp	r3, #0
    3126:	d13a      	bne.n	319e <mp_lexer_to_next+0xe6>
        lex->tok_kind = MP_TOKEN_NEWLINE;
    3128:	687b      	ldr	r3, [r7, #4]
    312a:	2204      	movs	r2, #4
    312c:	641a      	str	r2, [r3, #64]	; 0x40
        size_t num_spaces = lex->column - 1;
    312e:	687b      	ldr	r3, [r7, #4]
    3130:	6a1b      	ldr	r3, [r3, #32]
    3132:	3b01      	subs	r3, #1
    3134:	613b      	str	r3, [r7, #16]
        if (num_spaces == indent_top(lex)) {
    3136:	6878      	ldr	r0, [r7, #4]
    3138:	f7ff fcf8 	bl	2b2c <indent_top>
    313c:	4602      	mov	r2, r0
    313e:	693b      	ldr	r3, [r7, #16]
    3140:	429a      	cmp	r2, r3
    3142:	f000 8281 	beq.w	3648 <mp_lexer_to_next+0x590>
        } else if (num_spaces > indent_top(lex)) {
    3146:	6878      	ldr	r0, [r7, #4]
    3148:	f7ff fcf0 	bl	2b2c <indent_top>
    314c:	4602      	mov	r2, r0
    314e:	693b      	ldr	r3, [r7, #16]
    3150:	429a      	cmp	r2, r3
    3152:	d211      	bcs.n	3178 <mp_lexer_to_next+0xc0>
            indent_push(lex, num_spaces);
    3154:	6939      	ldr	r1, [r7, #16]
    3156:	6878      	ldr	r0, [r7, #4]
    3158:	f7ff fcba 	bl	2ad0 <indent_push>
            lex->emit_dent += 1;
    315c:	687b      	ldr	r3, [r7, #4]
    315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3160:	1c5a      	adds	r2, r3, #1
    3162:	687b      	ldr	r3, [r7, #4]
    3164:	625a      	str	r2, [r3, #36]	; 0x24
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    3166:	e26f      	b.n	3648 <mp_lexer_to_next+0x590>
                indent_pop(lex);
    3168:	6878      	ldr	r0, [r7, #4]
    316a:	f7ff fcf3 	bl	2b54 <indent_pop>
                lex->emit_dent -= 1;
    316e:	687b      	ldr	r3, [r7, #4]
    3170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3172:	1e5a      	subs	r2, r3, #1
    3174:	687b      	ldr	r3, [r7, #4]
    3176:	625a      	str	r2, [r3, #36]	; 0x24
            while (num_spaces < indent_top(lex)) {
    3178:	6878      	ldr	r0, [r7, #4]
    317a:	f7ff fcd7 	bl	2b2c <indent_top>
    317e:	4602      	mov	r2, r0
    3180:	693b      	ldr	r3, [r7, #16]
    3182:	429a      	cmp	r2, r3
    3184:	d8f0      	bhi.n	3168 <mp_lexer_to_next+0xb0>
            if (num_spaces != indent_top(lex)) {
    3186:	6878      	ldr	r0, [r7, #4]
    3188:	f7ff fcd0 	bl	2b2c <indent_top>
    318c:	4602      	mov	r2, r0
    318e:	693b      	ldr	r3, [r7, #16]
    3190:	429a      	cmp	r2, r3
    3192:	f000 8259 	beq.w	3648 <mp_lexer_to_next+0x590>
                lex->tok_kind = MP_TOKEN_DEDENT_MISMATCH;
    3196:	687b      	ldr	r3, [r7, #4]
    3198:	2202      	movs	r2, #2
    319a:	641a      	str	r2, [r3, #64]	; 0x40
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    319c:	e254      	b.n	3648 <mp_lexer_to_next+0x590>
    } else if (is_end(lex)) {
    319e:	6878      	ldr	r0, [r7, #4]
    31a0:	f7ff fa68 	bl	2674 <is_end>
    31a4:	4603      	mov	r3, r0
    31a6:	2b00      	cmp	r3, #0
    31a8:	d003      	beq.n	31b2 <mp_lexer_to_next+0xfa>
        lex->tok_kind = MP_TOKEN_END;
    31aa:	687b      	ldr	r3, [r7, #4]
    31ac:	2200      	movs	r2, #0
    31ae:	641a      	str	r2, [r3, #64]	; 0x40
}
    31b0:	e253      	b.n	365a <mp_lexer_to_next+0x5a2>
    } else if (is_string_or_bytes(lex)) {
    31b2:	6878      	ldr	r0, [r7, #4]
    31b4:	f7ff fbb8 	bl	2928 <is_string_or_bytes>
    31b8:	4603      	mov	r3, r0
    31ba:	2b00      	cmp	r3, #0
    31bc:	d06d      	beq.n	329a <mp_lexer_to_next+0x1e2>
        lex->tok_kind = MP_TOKEN_END;
    31be:	687b      	ldr	r3, [r7, #4]
    31c0:	2200      	movs	r2, #0
    31c2:	641a      	str	r2, [r3, #64]	; 0x40
            bool is_raw = false;
    31c4:	2300      	movs	r3, #0
    31c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            mp_token_kind_t kind = MP_TOKEN_STRING;
    31ca:	230a      	movs	r3, #10
    31cc:	633b      	str	r3, [r7, #48]	; 0x30
            int n_char = 0;
    31ce:	2300      	movs	r3, #0
    31d0:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (is_char(lex, 'u')) {
    31d2:	2175      	movs	r1, #117	; 0x75
    31d4:	6878      	ldr	r0, [r7, #4]
    31d6:	f7ff fa71 	bl	26bc <is_char>
    31da:	4603      	mov	r3, r0
    31dc:	2b00      	cmp	r3, #0
    31de:	d002      	beq.n	31e6 <mp_lexer_to_next+0x12e>
                n_char = 1;
    31e0:	2301      	movs	r3, #1
    31e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    31e4:	e02e      	b.n	3244 <mp_lexer_to_next+0x18c>
            } else if (is_char(lex, 'b')) {
    31e6:	2162      	movs	r1, #98	; 0x62
    31e8:	6878      	ldr	r0, [r7, #4]
    31ea:	f7ff fa67 	bl	26bc <is_char>
    31ee:	4603      	mov	r3, r0
    31f0:	2b00      	cmp	r3, #0
    31f2:	d010      	beq.n	3216 <mp_lexer_to_next+0x15e>
                kind = MP_TOKEN_BYTES;
    31f4:	230b      	movs	r3, #11
    31f6:	633b      	str	r3, [r7, #48]	; 0x30
                n_char = 1;
    31f8:	2301      	movs	r3, #1
    31fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (is_char_following(lex, 'r')) {
    31fc:	2172      	movs	r1, #114	; 0x72
    31fe:	6878      	ldr	r0, [r7, #4]
    3200:	f7ff fab6 	bl	2770 <is_char_following>
    3204:	4603      	mov	r3, r0
    3206:	2b00      	cmp	r3, #0
    3208:	d01c      	beq.n	3244 <mp_lexer_to_next+0x18c>
                    is_raw = true;
    320a:	2301      	movs	r3, #1
    320c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    n_char = 2;
    3210:	2302      	movs	r3, #2
    3212:	62fb      	str	r3, [r7, #44]	; 0x2c
    3214:	e016      	b.n	3244 <mp_lexer_to_next+0x18c>
            } else if (is_char(lex, 'r')) {
    3216:	2172      	movs	r1, #114	; 0x72
    3218:	6878      	ldr	r0, [r7, #4]
    321a:	f7ff fa4f 	bl	26bc <is_char>
    321e:	4603      	mov	r3, r0
    3220:	2b00      	cmp	r3, #0
    3222:	d00f      	beq.n	3244 <mp_lexer_to_next+0x18c>
                is_raw = true;
    3224:	2301      	movs	r3, #1
    3226:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                n_char = 1;
    322a:	2301      	movs	r3, #1
    322c:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (is_char_following(lex, 'b')) {
    322e:	2162      	movs	r1, #98	; 0x62
    3230:	6878      	ldr	r0, [r7, #4]
    3232:	f7ff fa9d 	bl	2770 <is_char_following>
    3236:	4603      	mov	r3, r0
    3238:	2b00      	cmp	r3, #0
    323a:	d003      	beq.n	3244 <mp_lexer_to_next+0x18c>
                    kind = MP_TOKEN_BYTES;
    323c:	230b      	movs	r3, #11
    323e:	633b      	str	r3, [r7, #48]	; 0x30
                    n_char = 2;
    3240:	2302      	movs	r3, #2
    3242:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (lex->tok_kind == MP_TOKEN_END) {
    3244:	687b      	ldr	r3, [r7, #4]
    3246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3248:	2b00      	cmp	r3, #0
    324a:	d103      	bne.n	3254 <mp_lexer_to_next+0x19c>
                lex->tok_kind = kind;
    324c:	687b      	ldr	r3, [r7, #4]
    324e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3250:	641a      	str	r2, [r3, #64]	; 0x40
    3252:	e005      	b.n	3260 <mp_lexer_to_next+0x1a8>
            } else if (lex->tok_kind != kind) {
    3254:	687b      	ldr	r3, [r7, #4]
    3256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    3258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    325a:	429a      	cmp	r2, r3
    325c:	f040 81f6 	bne.w	364c <mp_lexer_to_next+0x594>
            if (n_char != 0) {
    3260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3262:	2b00      	cmp	r3, #0
    3264:	d008      	beq.n	3278 <mp_lexer_to_next+0x1c0>
                next_char(lex);
    3266:	6878      	ldr	r0, [r7, #4]
    3268:	f7ff fbd4 	bl	2a14 <next_char>
                if (n_char == 2) {
    326c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    326e:	2b02      	cmp	r3, #2
    3270:	d102      	bne.n	3278 <mp_lexer_to_next+0x1c0>
                    next_char(lex);
    3272:	6878      	ldr	r0, [r7, #4]
    3274:	f7ff fbce 	bl	2a14 <next_char>
            parse_string_literal(lex, is_raw);
    3278:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    327c:	4619      	mov	r1, r3
    327e:	6878      	ldr	r0, [r7, #4]
    3280:	f7ff fca8 	bl	2bd4 <parse_string_literal>
            skip_whitespace(lex, true);
    3284:	2101      	movs	r1, #1
    3286:	6878      	ldr	r0, [r7, #4]
    3288:	f7ff feae 	bl	2fe8 <skip_whitespace>
        } while (is_string_or_bytes(lex));
    328c:	6878      	ldr	r0, [r7, #4]
    328e:	f7ff fb4b 	bl	2928 <is_string_or_bytes>
    3292:	4603      	mov	r3, r0
    3294:	2b00      	cmp	r3, #0
    3296:	d195      	bne.n	31c4 <mp_lexer_to_next+0x10c>
}
    3298:	e1df      	b.n	365a <mp_lexer_to_next+0x5a2>
    } else if (is_head_of_identifier(lex)) {
    329a:	6878      	ldr	r0, [r7, #4]
    329c:	f7ff fb84 	bl	29a8 <is_head_of_identifier>
    32a0:	4603      	mov	r3, r0
    32a2:	2b00      	cmp	r3, #0
    32a4:	d061      	beq.n	336a <mp_lexer_to_next+0x2b2>
        lex->tok_kind = MP_TOKEN_NAME;
    32a6:	687b      	ldr	r3, [r7, #4]
    32a8:	2207      	movs	r2, #7
    32aa:	641a      	str	r2, [r3, #64]	; 0x40
        vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    32ac:	687b      	ldr	r3, [r7, #4]
    32ae:	f103 0244 	add.w	r2, r3, #68	; 0x44
    32b2:	687b      	ldr	r3, [r7, #4]
    32b4:	691b      	ldr	r3, [r3, #16]
    32b6:	b2db      	uxtb	r3, r3
    32b8:	4619      	mov	r1, r3
    32ba:	4610      	mov	r0, r2
    32bc:	f7fe f976 	bl	15ac <vstr_add_byte>
        next_char(lex);
    32c0:	6878      	ldr	r0, [r7, #4]
    32c2:	f7ff fba7 	bl	2a14 <next_char>
        while (!is_end(lex) && is_tail_of_identifier(lex)) {
    32c6:	e00c      	b.n	32e2 <mp_lexer_to_next+0x22a>
            vstr_add_byte(&lex->vstr, CUR_CHAR(lex));
    32c8:	687b      	ldr	r3, [r7, #4]
    32ca:	f103 0244 	add.w	r2, r3, #68	; 0x44
    32ce:	687b      	ldr	r3, [r7, #4]
    32d0:	691b      	ldr	r3, [r3, #16]
    32d2:	b2db      	uxtb	r3, r3
    32d4:	4619      	mov	r1, r3
    32d6:	4610      	mov	r0, r2
    32d8:	f7fe f968 	bl	15ac <vstr_add_byte>
            next_char(lex);
    32dc:	6878      	ldr	r0, [r7, #4]
    32de:	f7ff fb99 	bl	2a14 <next_char>
        while (!is_end(lex) && is_tail_of_identifier(lex)) {
    32e2:	6878      	ldr	r0, [r7, #4]
    32e4:	f7ff f9c6 	bl	2674 <is_end>
    32e8:	4603      	mov	r3, r0
    32ea:	f083 0301 	eor.w	r3, r3, #1
    32ee:	b2db      	uxtb	r3, r3
    32f0:	2b00      	cmp	r3, #0
    32f2:	d005      	beq.n	3300 <mp_lexer_to_next+0x248>
    32f4:	6878      	ldr	r0, [r7, #4]
    32f6:	f7ff fb73 	bl	29e0 <is_tail_of_identifier>
    32fa:	4603      	mov	r3, r0
    32fc:	2b00      	cmp	r3, #0
    32fe:	d1e3      	bne.n	32c8 <mp_lexer_to_next+0x210>
        const char *s = vstr_null_terminated_str(&lex->vstr);
    3300:	687b      	ldr	r3, [r7, #4]
    3302:	3344      	adds	r3, #68	; 0x44
    3304:	4618      	mov	r0, r3
    3306:	f7fe f935 	bl	1574 <vstr_null_terminated_str>
    330a:	60f8      	str	r0, [r7, #12]
        for (size_t i = 0; i < MP_ARRAY_SIZE(tok_kw); i++) {
    330c:	2300      	movs	r3, #0
    330e:	62bb      	str	r3, [r7, #40]	; 0x28
    3310:	e027      	b.n	3362 <mp_lexer_to_next+0x2aa>
            int cmp = strcmp(s, tok_kw[i]);
    3312:	4aac      	ldr	r2, [pc, #688]	; (35c4 <mp_lexer_to_next+0x50c>)
    3314:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    331a:	4619      	mov	r1, r3
    331c:	68f8      	ldr	r0, [r7, #12]
    331e:	f018 ff25 	bl	1c16c <strcmp>
    3322:	60b8      	str	r0, [r7, #8]
            if (cmp == 0) {
    3324:	68bb      	ldr	r3, [r7, #8]
    3326:	2b00      	cmp	r3, #0
    3328:	d114      	bne.n	3354 <mp_lexer_to_next+0x29c>
                lex->tok_kind = MP_TOKEN_KW_FALSE + i;
    332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    332c:	f103 020d 	add.w	r2, r3, #13
    3330:	687b      	ldr	r3, [r7, #4]
    3332:	641a      	str	r2, [r3, #64]	; 0x40
                if (lex->tok_kind == MP_TOKEN_KW___DEBUG__) {
    3334:	687b      	ldr	r3, [r7, #4]
    3336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3338:	2b10      	cmp	r3, #16
    333a:	f040 8189 	bne.w	3650 <mp_lexer_to_next+0x598>
                    lex->tok_kind = (MP_STATE_VM(mp_optimise_value) == 0 ? MP_TOKEN_KW_TRUE : MP_TOKEN_KW_FALSE);
    333e:	4ba2      	ldr	r3, [pc, #648]	; (35c8 <mp_lexer_to_next+0x510>)
    3340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    3344:	2b00      	cmp	r3, #0
    3346:	d101      	bne.n	334c <mp_lexer_to_next+0x294>
    3348:	220f      	movs	r2, #15
    334a:	e000      	b.n	334e <mp_lexer_to_next+0x296>
    334c:	220d      	movs	r2, #13
    334e:	687b      	ldr	r3, [r7, #4]
    3350:	641a      	str	r2, [r3, #64]	; 0x40
                break;
    3352:	e17d      	b.n	3650 <mp_lexer_to_next+0x598>
            } else if (cmp < 0) {
    3354:	68bb      	ldr	r3, [r7, #8]
    3356:	2b00      	cmp	r3, #0
    3358:	f2c0 817c 	blt.w	3654 <mp_lexer_to_next+0x59c>
        for (size_t i = 0; i < MP_ARRAY_SIZE(tok_kw); i++) {
    335c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    335e:	3301      	adds	r3, #1
    3360:	62bb      	str	r3, [r7, #40]	; 0x28
    3362:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3364:	2b21      	cmp	r3, #33	; 0x21
    3366:	d9d4      	bls.n	3312 <mp_lexer_to_next+0x25a>
}
    3368:	e177      	b.n	365a <mp_lexer_to_next+0x5a2>
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    336a:	6878      	ldr	r0, [r7, #4]
    336c:	f7ff fa8a 	bl	2884 <is_digit>
    3370:	4603      	mov	r3, r0
    3372:	2b00      	cmp	r3, #0
    3374:	d10e      	bne.n	3394 <mp_lexer_to_next+0x2dc>
    3376:	212e      	movs	r1, #46	; 0x2e
    3378:	6878      	ldr	r0, [r7, #4]
    337a:	f7ff f99f 	bl	26bc <is_char>
    337e:	4603      	mov	r3, r0
    3380:	2b00      	cmp	r3, #0
    3382:	f000 80a1 	beq.w	34c8 <mp_lexer_to_next+0x410>
    3386:	6878      	ldr	r0, [r7, #4]
    3388:	f7ff fa8a 	bl	28a0 <is_following_digit>
    338c:	4603      	mov	r3, r0
    338e:	2b00      	cmp	r3, #0
    3390:	f000 809a 	beq.w	34c8 <mp_lexer_to_next+0x410>
        bool forced_integer = false;
    3394:	2300      	movs	r3, #0
    3396:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (is_char(lex, '.')) {
    339a:	212e      	movs	r1, #46	; 0x2e
    339c:	6878      	ldr	r0, [r7, #4]
    339e:	f7ff f98d 	bl	26bc <is_char>
    33a2:	4603      	mov	r3, r0
    33a4:	2b00      	cmp	r3, #0
    33a6:	d003      	beq.n	33b0 <mp_lexer_to_next+0x2f8>
            lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    33a8:	687b      	ldr	r3, [r7, #4]
    33aa:	2209      	movs	r2, #9
    33ac:	641a      	str	r2, [r3, #64]	; 0x40
    33ae:	e012      	b.n	33d6 <mp_lexer_to_next+0x31e>
            lex->tok_kind = MP_TOKEN_INTEGER;
    33b0:	687b      	ldr	r3, [r7, #4]
    33b2:	2208      	movs	r2, #8
    33b4:	641a      	str	r2, [r3, #64]	; 0x40
            if (is_char(lex, '0') && is_following_base_char(lex)) {
    33b6:	2130      	movs	r1, #48	; 0x30
    33b8:	6878      	ldr	r0, [r7, #4]
    33ba:	f7ff f97f 	bl	26bc <is_char>
    33be:	4603      	mov	r3, r0
    33c0:	2b00      	cmp	r3, #0
    33c2:	d008      	beq.n	33d6 <mp_lexer_to_next+0x31e>
    33c4:	6878      	ldr	r0, [r7, #4]
    33c6:	f7ff fa79 	bl	28bc <is_following_base_char>
    33ca:	4603      	mov	r3, r0
    33cc:	2b00      	cmp	r3, #0
    33ce:	d002      	beq.n	33d6 <mp_lexer_to_next+0x31e>
                forced_integer = true;
    33d0:	2301      	movs	r3, #1
    33d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    33d6:	687b      	ldr	r3, [r7, #4]
    33d8:	f103 0244 	add.w	r2, r3, #68	; 0x44
    33dc:	687b      	ldr	r3, [r7, #4]
    33de:	691b      	ldr	r3, [r3, #16]
    33e0:	4619      	mov	r1, r3
    33e2:	4610      	mov	r0, r2
    33e4:	f7fe f8f4 	bl	15d0 <vstr_add_char>
        next_char(lex);
    33e8:	6878      	ldr	r0, [r7, #4]
    33ea:	f7ff fb13 	bl	2a14 <next_char>
        while (!is_end(lex)) {
    33ee:	e061      	b.n	34b4 <mp_lexer_to_next+0x3fc>
            if (!forced_integer && is_char_or(lex, 'e', 'E')) {
    33f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    33f4:	f083 0301 	eor.w	r3, r3, #1
    33f8:	b2db      	uxtb	r3, r3
    33fa:	2b00      	cmp	r3, #0
    33fc:	d02e      	beq.n	345c <mp_lexer_to_next+0x3a4>
    33fe:	2245      	movs	r2, #69	; 0x45
    3400:	2165      	movs	r1, #101	; 0x65
    3402:	6878      	ldr	r0, [r7, #4]
    3404:	f7ff f96e 	bl	26e4 <is_char_or>
    3408:	4603      	mov	r3, r0
    340a:	2b00      	cmp	r3, #0
    340c:	d026      	beq.n	345c <mp_lexer_to_next+0x3a4>
                lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    340e:	687b      	ldr	r3, [r7, #4]
    3410:	2209      	movs	r2, #9
    3412:	641a      	str	r2, [r3, #64]	; 0x40
                vstr_add_char(&lex->vstr, 'e');
    3414:	687b      	ldr	r3, [r7, #4]
    3416:	3344      	adds	r3, #68	; 0x44
    3418:	2165      	movs	r1, #101	; 0x65
    341a:	4618      	mov	r0, r3
    341c:	f7fe f8d8 	bl	15d0 <vstr_add_char>
                next_char(lex);
    3420:	6878      	ldr	r0, [r7, #4]
    3422:	f7ff faf7 	bl	2a14 <next_char>
                if (is_char(lex, '+') || is_char(lex, '-')) {
    3426:	212b      	movs	r1, #43	; 0x2b
    3428:	6878      	ldr	r0, [r7, #4]
    342a:	f7ff f947 	bl	26bc <is_char>
    342e:	4603      	mov	r3, r0
    3430:	2b00      	cmp	r3, #0
    3432:	d106      	bne.n	3442 <mp_lexer_to_next+0x38a>
    3434:	212d      	movs	r1, #45	; 0x2d
    3436:	6878      	ldr	r0, [r7, #4]
    3438:	f7ff f940 	bl	26bc <is_char>
    343c:	4603      	mov	r3, r0
    343e:	2b00      	cmp	r3, #0
    3440:	d038      	beq.n	34b4 <mp_lexer_to_next+0x3fc>
                    vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    3442:	687b      	ldr	r3, [r7, #4]
    3444:	f103 0244 	add.w	r2, r3, #68	; 0x44
    3448:	687b      	ldr	r3, [r7, #4]
    344a:	691b      	ldr	r3, [r3, #16]
    344c:	4619      	mov	r1, r3
    344e:	4610      	mov	r0, r2
    3450:	f7fe f8be 	bl	15d0 <vstr_add_char>
                    next_char(lex);
    3454:	6878      	ldr	r0, [r7, #4]
    3456:	f7ff fadd 	bl	2a14 <next_char>
                if (is_char(lex, '+') || is_char(lex, '-')) {
    345a:	e02b      	b.n	34b4 <mp_lexer_to_next+0x3fc>
            } else if (is_letter(lex) || is_digit(lex) || is_char(lex, '.')) {
    345c:	6878      	ldr	r0, [r7, #4]
    345e:	f7ff fa03 	bl	2868 <is_letter>
    3462:	4603      	mov	r3, r0
    3464:	2b00      	cmp	r3, #0
    3466:	d10d      	bne.n	3484 <mp_lexer_to_next+0x3cc>
    3468:	6878      	ldr	r0, [r7, #4]
    346a:	f7ff fa0b 	bl	2884 <is_digit>
    346e:	4603      	mov	r3, r0
    3470:	2b00      	cmp	r3, #0
    3472:	d107      	bne.n	3484 <mp_lexer_to_next+0x3cc>
    3474:	212e      	movs	r1, #46	; 0x2e
    3476:	6878      	ldr	r0, [r7, #4]
    3478:	f7ff f920 	bl	26bc <is_char>
    347c:	4603      	mov	r3, r0
    347e:	2b00      	cmp	r3, #0
    3480:	f000 80ea 	beq.w	3658 <mp_lexer_to_next+0x5a0>
                if (is_char_or3(lex, '.', 'j', 'J')) {
    3484:	234a      	movs	r3, #74	; 0x4a
    3486:	226a      	movs	r2, #106	; 0x6a
    3488:	212e      	movs	r1, #46	; 0x2e
    348a:	6878      	ldr	r0, [r7, #4]
    348c:	f7ff f948 	bl	2720 <is_char_or3>
    3490:	4603      	mov	r3, r0
    3492:	2b00      	cmp	r3, #0
    3494:	d002      	beq.n	349c <mp_lexer_to_next+0x3e4>
                    lex->tok_kind = MP_TOKEN_FLOAT_OR_IMAG;
    3496:	687b      	ldr	r3, [r7, #4]
    3498:	2209      	movs	r2, #9
    349a:	641a      	str	r2, [r3, #64]	; 0x40
                vstr_add_char(&lex->vstr, CUR_CHAR(lex));
    349c:	687b      	ldr	r3, [r7, #4]
    349e:	f103 0244 	add.w	r2, r3, #68	; 0x44
    34a2:	687b      	ldr	r3, [r7, #4]
    34a4:	691b      	ldr	r3, [r3, #16]
    34a6:	4619      	mov	r1, r3
    34a8:	4610      	mov	r0, r2
    34aa:	f7fe f891 	bl	15d0 <vstr_add_char>
                next_char(lex);
    34ae:	6878      	ldr	r0, [r7, #4]
    34b0:	f7ff fab0 	bl	2a14 <next_char>
        while (!is_end(lex)) {
    34b4:	6878      	ldr	r0, [r7, #4]
    34b6:	f7ff f8dd 	bl	2674 <is_end>
    34ba:	4603      	mov	r3, r0
    34bc:	f083 0301 	eor.w	r3, r3, #1
    34c0:	b2db      	uxtb	r3, r3
    34c2:	2b00      	cmp	r3, #0
    34c4:	d194      	bne.n	33f0 <mp_lexer_to_next+0x338>
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    34c6:	e0c7      	b.n	3658 <mp_lexer_to_next+0x5a0>
        const char *t = tok_enc;
    34c8:	4b40      	ldr	r3, [pc, #256]	; (35cc <mp_lexer_to_next+0x514>)
    34ca:	623b      	str	r3, [r7, #32]
        size_t tok_enc_index = 0;
    34cc:	2300      	movs	r3, #0
    34ce:	61fb      	str	r3, [r7, #28]
        for (; *t != 0 && !is_char(lex, *t); t += 1) {
    34d0:	e010      	b.n	34f4 <mp_lexer_to_next+0x43c>
            if (*t == 'e' || *t == 'c') {
    34d2:	6a3b      	ldr	r3, [r7, #32]
    34d4:	781b      	ldrb	r3, [r3, #0]
    34d6:	2b65      	cmp	r3, #101	; 0x65
    34d8:	d003      	beq.n	34e2 <mp_lexer_to_next+0x42a>
    34da:	6a3b      	ldr	r3, [r7, #32]
    34dc:	781b      	ldrb	r3, [r3, #0]
    34de:	2b63      	cmp	r3, #99	; 0x63
    34e0:	d102      	bne.n	34e8 <mp_lexer_to_next+0x430>
                t += 1;
    34e2:	6a3b      	ldr	r3, [r7, #32]
    34e4:	3301      	adds	r3, #1
    34e6:	623b      	str	r3, [r7, #32]
            tok_enc_index += 1;
    34e8:	69fb      	ldr	r3, [r7, #28]
    34ea:	3301      	adds	r3, #1
    34ec:	61fb      	str	r3, [r7, #28]
        for (; *t != 0 && !is_char(lex, *t); t += 1) {
    34ee:	6a3b      	ldr	r3, [r7, #32]
    34f0:	3301      	adds	r3, #1
    34f2:	623b      	str	r3, [r7, #32]
    34f4:	6a3b      	ldr	r3, [r7, #32]
    34f6:	781b      	ldrb	r3, [r3, #0]
    34f8:	2b00      	cmp	r3, #0
    34fa:	d00b      	beq.n	3514 <mp_lexer_to_next+0x45c>
    34fc:	6a3b      	ldr	r3, [r7, #32]
    34fe:	781b      	ldrb	r3, [r3, #0]
    3500:	4619      	mov	r1, r3
    3502:	6878      	ldr	r0, [r7, #4]
    3504:	f7ff f8da 	bl	26bc <is_char>
    3508:	4603      	mov	r3, r0
    350a:	f083 0301 	eor.w	r3, r3, #1
    350e:	b2db      	uxtb	r3, r3
    3510:	2b00      	cmp	r3, #0
    3512:	d1de      	bne.n	34d2 <mp_lexer_to_next+0x41a>
        next_char(lex);
    3514:	6878      	ldr	r0, [r7, #4]
    3516:	f7ff fa7d 	bl	2a14 <next_char>
        if (*t == 0) {
    351a:	6a3b      	ldr	r3, [r7, #32]
    351c:	781b      	ldrb	r3, [r3, #0]
    351e:	2b00      	cmp	r3, #0
    3520:	d103      	bne.n	352a <mp_lexer_to_next+0x472>
            lex->tok_kind = MP_TOKEN_INVALID;
    3522:	687b      	ldr	r3, [r7, #4]
    3524:	2201      	movs	r2, #1
    3526:	641a      	str	r2, [r3, #64]	; 0x40
}
    3528:	e097      	b.n	365a <mp_lexer_to_next+0x5a2>
        } else if (*t == '!') {
    352a:	6a3b      	ldr	r3, [r7, #32]
    352c:	781b      	ldrb	r3, [r3, #0]
    352e:	2b21      	cmp	r3, #33	; 0x21
    3530:	d111      	bne.n	3556 <mp_lexer_to_next+0x49e>
            if (is_char(lex, '=')) {
    3532:	213d      	movs	r1, #61	; 0x3d
    3534:	6878      	ldr	r0, [r7, #4]
    3536:	f7ff f8c1 	bl	26bc <is_char>
    353a:	4603      	mov	r3, r0
    353c:	2b00      	cmp	r3, #0
    353e:	d006      	beq.n	354e <mp_lexer_to_next+0x496>
                next_char(lex);
    3540:	6878      	ldr	r0, [r7, #4]
    3542:	f7ff fa67 	bl	2a14 <next_char>
                lex->tok_kind = MP_TOKEN_OP_NOT_EQUAL;
    3546:	687b      	ldr	r3, [r7, #4]
    3548:	2241      	movs	r2, #65	; 0x41
    354a:	641a      	str	r2, [r3, #64]	; 0x40
}
    354c:	e085      	b.n	365a <mp_lexer_to_next+0x5a2>
                lex->tok_kind = MP_TOKEN_INVALID;
    354e:	687b      	ldr	r3, [r7, #4]
    3550:	2201      	movs	r2, #1
    3552:	641a      	str	r2, [r3, #64]	; 0x40
}
    3554:	e081      	b.n	365a <mp_lexer_to_next+0x5a2>
        } else if (*t == '.') {
    3556:	6a3b      	ldr	r3, [r7, #32]
    3558:	781b      	ldrb	r3, [r3, #0]
    355a:	2b2e      	cmp	r3, #46	; 0x2e
    355c:	d115      	bne.n	358a <mp_lexer_to_next+0x4d2>
            if (is_char_and(lex, '.', '.')) {
    355e:	222e      	movs	r2, #46	; 0x2e
    3560:	212e      	movs	r1, #46	; 0x2e
    3562:	6878      	ldr	r0, [r7, #4]
    3564:	f7ff f954 	bl	2810 <is_char_and>
    3568:	4603      	mov	r3, r0
    356a:	2b00      	cmp	r3, #0
    356c:	d009      	beq.n	3582 <mp_lexer_to_next+0x4ca>
                next_char(lex);
    356e:	6878      	ldr	r0, [r7, #4]
    3570:	f7ff fa50 	bl	2a14 <next_char>
                next_char(lex);
    3574:	6878      	ldr	r0, [r7, #4]
    3576:	f7ff fa4d 	bl	2a14 <next_char>
                lex->tok_kind = MP_TOKEN_ELLIPSIS;
    357a:	687b      	ldr	r3, [r7, #4]
    357c:	220c      	movs	r2, #12
    357e:	641a      	str	r2, [r3, #64]	; 0x40
}
    3580:	e06b      	b.n	365a <mp_lexer_to_next+0x5a2>
                lex->tok_kind = MP_TOKEN_DEL_PERIOD;
    3582:	687b      	ldr	r3, [r7, #4]
    3584:	224a      	movs	r2, #74	; 0x4a
    3586:	641a      	str	r2, [r3, #64]	; 0x40
}
    3588:	e067      	b.n	365a <mp_lexer_to_next+0x5a2>
            t += 1;
    358a:	6a3b      	ldr	r3, [r7, #32]
    358c:	3301      	adds	r3, #1
    358e:	623b      	str	r3, [r7, #32]
            size_t t_index = tok_enc_index;
    3590:	69fb      	ldr	r3, [r7, #28]
    3592:	61bb      	str	r3, [r7, #24]
            while (*t == 'c' || *t == 'e') {
    3594:	e023      	b.n	35de <mp_lexer_to_next+0x526>
                t_index += 1;
    3596:	69bb      	ldr	r3, [r7, #24]
    3598:	3301      	adds	r3, #1
    359a:	61bb      	str	r3, [r7, #24]
                if (is_char(lex, t[1])) {
    359c:	6a3b      	ldr	r3, [r7, #32]
    359e:	3301      	adds	r3, #1
    35a0:	781b      	ldrb	r3, [r3, #0]
    35a2:	4619      	mov	r1, r3
    35a4:	6878      	ldr	r0, [r7, #4]
    35a6:	f7ff f889 	bl	26bc <is_char>
    35aa:	4603      	mov	r3, r0
    35ac:	2b00      	cmp	r3, #0
    35ae:	d00f      	beq.n	35d0 <mp_lexer_to_next+0x518>
                    next_char(lex);
    35b0:	6878      	ldr	r0, [r7, #4]
    35b2:	f7ff fa2f 	bl	2a14 <next_char>
                    tok_enc_index = t_index;
    35b6:	69bb      	ldr	r3, [r7, #24]
    35b8:	61fb      	str	r3, [r7, #28]
                    if (*t == 'e') {
    35ba:	6a3b      	ldr	r3, [r7, #32]
    35bc:	781b      	ldrb	r3, [r3, #0]
    35be:	2b65      	cmp	r3, #101	; 0x65
    35c0:	d10a      	bne.n	35d8 <mp_lexer_to_next+0x520>
                        break;
    35c2:	e016      	b.n	35f2 <mp_lexer_to_next+0x53a>
    35c4:	0001dac0 	.word	0x0001dac0
    35c8:	20000a2c 	.word	0x20000a2c
    35cc:	0001d95c 	.word	0x0001d95c
                } else if (*t == 'c') {
    35d0:	6a3b      	ldr	r3, [r7, #32]
    35d2:	781b      	ldrb	r3, [r3, #0]
    35d4:	2b63      	cmp	r3, #99	; 0x63
    35d6:	d00b      	beq.n	35f0 <mp_lexer_to_next+0x538>
                t += 2;
    35d8:	6a3b      	ldr	r3, [r7, #32]
    35da:	3302      	adds	r3, #2
    35dc:	623b      	str	r3, [r7, #32]
            while (*t == 'c' || *t == 'e') {
    35de:	6a3b      	ldr	r3, [r7, #32]
    35e0:	781b      	ldrb	r3, [r3, #0]
    35e2:	2b63      	cmp	r3, #99	; 0x63
    35e4:	d0d7      	beq.n	3596 <mp_lexer_to_next+0x4de>
    35e6:	6a3b      	ldr	r3, [r7, #32]
    35e8:	781b      	ldrb	r3, [r3, #0]
    35ea:	2b65      	cmp	r3, #101	; 0x65
    35ec:	d0d3      	beq.n	3596 <mp_lexer_to_next+0x4de>
    35ee:	e000      	b.n	35f2 <mp_lexer_to_next+0x53a>
                    break;
    35f0:	bf00      	nop
            lex->tok_kind = tok_enc_kind[tok_enc_index];
    35f2:	4a1c      	ldr	r2, [pc, #112]	; (3664 <mp_lexer_to_next+0x5ac>)
    35f4:	69fb      	ldr	r3, [r7, #28]
    35f6:	4413      	add	r3, r2
    35f8:	781b      	ldrb	r3, [r3, #0]
    35fa:	461a      	mov	r2, r3
    35fc:	687b      	ldr	r3, [r7, #4]
    35fe:	641a      	str	r2, [r3, #64]	; 0x40
            if (lex->tok_kind == MP_TOKEN_DEL_PAREN_OPEN || lex->tok_kind == MP_TOKEN_DEL_BRACKET_OPEN || lex->tok_kind == MP_TOKEN_DEL_BRACE_OPEN) {
    3600:	687b      	ldr	r3, [r7, #4]
    3602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3604:	2b42      	cmp	r3, #66	; 0x42
    3606:	d007      	beq.n	3618 <mp_lexer_to_next+0x560>
    3608:	687b      	ldr	r3, [r7, #4]
    360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    360c:	2b44      	cmp	r3, #68	; 0x44
    360e:	d003      	beq.n	3618 <mp_lexer_to_next+0x560>
    3610:	687b      	ldr	r3, [r7, #4]
    3612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3614:	2b46      	cmp	r3, #70	; 0x46
    3616:	d105      	bne.n	3624 <mp_lexer_to_next+0x56c>
                lex->nested_bracket_level += 1;
    3618:	687b      	ldr	r3, [r7, #4]
    361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    361c:	1c5a      	adds	r2, r3, #1
    361e:	687b      	ldr	r3, [r7, #4]
    3620:	629a      	str	r2, [r3, #40]	; 0x28
    3622:	e01a      	b.n	365a <mp_lexer_to_next+0x5a2>
            } else if (lex->tok_kind == MP_TOKEN_DEL_PAREN_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACKET_CLOSE || lex->tok_kind == MP_TOKEN_DEL_BRACE_CLOSE) {
    3624:	687b      	ldr	r3, [r7, #4]
    3626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3628:	2b43      	cmp	r3, #67	; 0x43
    362a:	d007      	beq.n	363c <mp_lexer_to_next+0x584>
    362c:	687b      	ldr	r3, [r7, #4]
    362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3630:	2b45      	cmp	r3, #69	; 0x45
    3632:	d003      	beq.n	363c <mp_lexer_to_next+0x584>
    3634:	687b      	ldr	r3, [r7, #4]
    3636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3638:	2b47      	cmp	r3, #71	; 0x47
    363a:	d10e      	bne.n	365a <mp_lexer_to_next+0x5a2>
                lex->nested_bracket_level -= 1;
    363c:	687b      	ldr	r3, [r7, #4]
    363e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3640:	1e5a      	subs	r2, r3, #1
    3642:	687b      	ldr	r3, [r7, #4]
    3644:	629a      	str	r2, [r3, #40]	; 0x28
}
    3646:	e008      	b.n	365a <mp_lexer_to_next+0x5a2>
    } else if (had_physical_newline && lex->nested_bracket_level == 0) {
    3648:	bf00      	nop
    364a:	e006      	b.n	365a <mp_lexer_to_next+0x5a2>
                break;
    364c:	bf00      	nop
    364e:	e004      	b.n	365a <mp_lexer_to_next+0x5a2>
                break;
    3650:	bf00      	nop
    3652:	e002      	b.n	365a <mp_lexer_to_next+0x5a2>
                break;
    3654:	bf00      	nop
    3656:	e000      	b.n	365a <mp_lexer_to_next+0x5a2>
    } else if (is_digit(lex) || (is_char(lex, '.') && is_following_digit(lex))) {
    3658:	bf00      	nop
}
    365a:	bf00      	nop
    365c:	3738      	adds	r7, #56	; 0x38
    365e:	46bd      	mov	sp, r7
    3660:	bd80      	pop	{r7, pc}
    3662:	bf00      	nop
    3664:	0001d9a4 	.word	0x0001d9a4

00003668 <mp_lexer_new>:

mp_lexer_t *mp_lexer_new(qstr src_name, mp_reader_t reader) {
    3668:	b580      	push	{r7, lr}
    366a:	b086      	sub	sp, #24
    366c:	af00      	add	r7, sp, #0
    366e:	60f8      	str	r0, [r7, #12]
    3670:	4638      	mov	r0, r7
    3672:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    mp_lexer_t *lex = m_new_obj(mp_lexer_t);
    3676:	2054      	movs	r0, #84	; 0x54
    3678:	f7fc fe50 	bl	31c <m_malloc>
    367c:	6178      	str	r0, [r7, #20]

    lex->source_name = src_name;
    367e:	697b      	ldr	r3, [r7, #20]
    3680:	68fa      	ldr	r2, [r7, #12]
    3682:	601a      	str	r2, [r3, #0]
    lex->reader = reader;
    3684:	697b      	ldr	r3, [r7, #20]
    3686:	3304      	adds	r3, #4
    3688:	463a      	mov	r2, r7
    368a:	ca07      	ldmia	r2, {r0, r1, r2}
    368c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lex->line = 1;
    3690:	697b      	ldr	r3, [r7, #20]
    3692:	2201      	movs	r2, #1
    3694:	61da      	str	r2, [r3, #28]
    lex->column = (size_t)-2; // account for 3 dummy bytes
    3696:	697b      	ldr	r3, [r7, #20]
    3698:	f06f 0201 	mvn.w	r2, #1
    369c:	621a      	str	r2, [r3, #32]
    lex->emit_dent = 0;
    369e:	697b      	ldr	r3, [r7, #20]
    36a0:	2200      	movs	r2, #0
    36a2:	625a      	str	r2, [r3, #36]	; 0x24
    lex->nested_bracket_level = 0;
    36a4:	697b      	ldr	r3, [r7, #20]
    36a6:	2200      	movs	r2, #0
    36a8:	629a      	str	r2, [r3, #40]	; 0x28
    lex->alloc_indent_level = MICROPY_ALLOC_LEXER_INDENT_INIT;
    36aa:	697b      	ldr	r3, [r7, #20]
    36ac:	220a      	movs	r2, #10
    36ae:	62da      	str	r2, [r3, #44]	; 0x2c
    lex->num_indent_level = 1;
    36b0:	697b      	ldr	r3, [r7, #20]
    36b2:	2201      	movs	r2, #1
    36b4:	631a      	str	r2, [r3, #48]	; 0x30
    lex->indent_level = m_new(uint16_t, lex->alloc_indent_level);
    36b6:	697b      	ldr	r3, [r7, #20]
    36b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    36ba:	005b      	lsls	r3, r3, #1
    36bc:	4618      	mov	r0, r3
    36be:	f7fc fe2d 	bl	31c <m_malloc>
    36c2:	4602      	mov	r2, r0
    36c4:	697b      	ldr	r3, [r7, #20]
    36c6:	635a      	str	r2, [r3, #52]	; 0x34
    vstr_init(&lex->vstr, 32);
    36c8:	697b      	ldr	r3, [r7, #20]
    36ca:	3344      	adds	r3, #68	; 0x44
    36cc:	2120      	movs	r1, #32
    36ce:	4618      	mov	r0, r3
    36d0:	f7fd fe16 	bl	1300 <vstr_init>

    // store sentinel for first indentation level
    lex->indent_level[0] = 0;
    36d4:	697b      	ldr	r3, [r7, #20]
    36d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    36d8:	2200      	movs	r2, #0
    36da:	801a      	strh	r2, [r3, #0]

    // load lexer with start of file, advancing lex->column to 1
    // start with dummy bytes and use next_char() for proper EOL/EOF handling
    lex->chr0 = lex->chr1 = lex->chr2 = 0;
    36dc:	697b      	ldr	r3, [r7, #20]
    36de:	2200      	movs	r2, #0
    36e0:	619a      	str	r2, [r3, #24]
    36e2:	697b      	ldr	r3, [r7, #20]
    36e4:	699a      	ldr	r2, [r3, #24]
    36e6:	697b      	ldr	r3, [r7, #20]
    36e8:	615a      	str	r2, [r3, #20]
    36ea:	697b      	ldr	r3, [r7, #20]
    36ec:	695a      	ldr	r2, [r3, #20]
    36ee:	697b      	ldr	r3, [r7, #20]
    36f0:	611a      	str	r2, [r3, #16]
    next_char(lex);
    36f2:	6978      	ldr	r0, [r7, #20]
    36f4:	f7ff f98e 	bl	2a14 <next_char>
    next_char(lex);
    36f8:	6978      	ldr	r0, [r7, #20]
    36fa:	f7ff f98b 	bl	2a14 <next_char>
    next_char(lex);
    36fe:	6978      	ldr	r0, [r7, #20]
    3700:	f7ff f988 	bl	2a14 <next_char>

    // preload first token
    mp_lexer_to_next(lex);
    3704:	6978      	ldr	r0, [r7, #20]
    3706:	f7ff fcd7 	bl	30b8 <mp_lexer_to_next>

    // Check that the first token is in the first column.  If it's not then we
    // convert the token kind to INDENT so that the parser gives a syntax error.
    if (lex->tok_column != 1) {
    370a:	697b      	ldr	r3, [r7, #20]
    370c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    370e:	2b01      	cmp	r3, #1
    3710:	d002      	beq.n	3718 <mp_lexer_new+0xb0>
        lex->tok_kind = MP_TOKEN_INDENT;
    3712:	697b      	ldr	r3, [r7, #20]
    3714:	2205      	movs	r2, #5
    3716:	641a      	str	r2, [r3, #64]	; 0x40
    }

    return lex;
    3718:	697b      	ldr	r3, [r7, #20]
}
    371a:	4618      	mov	r0, r3
    371c:	3718      	adds	r7, #24
    371e:	46bd      	mov	sp, r7
    3720:	bd80      	pop	{r7, pc}
    3722:	bf00      	nop

00003724 <mp_lexer_new_from_str_len>:

mp_lexer_t *mp_lexer_new_from_str_len(qstr src_name, const char *str, size_t len, size_t free_len) {
    3724:	b580      	push	{r7, lr}
    3726:	b088      	sub	sp, #32
    3728:	af00      	add	r7, sp, #0
    372a:	60f8      	str	r0, [r7, #12]
    372c:	60b9      	str	r1, [r7, #8]
    372e:	607a      	str	r2, [r7, #4]
    3730:	603b      	str	r3, [r7, #0]
    mp_reader_t reader;
    mp_reader_new_mem(&reader, (const byte*)str, len, free_len);
    3732:	f107 0014 	add.w	r0, r7, #20
    3736:	683b      	ldr	r3, [r7, #0]
    3738:	687a      	ldr	r2, [r7, #4]
    373a:	68b9      	ldr	r1, [r7, #8]
    373c:	f7fe ff62 	bl	2604 <mp_reader_new_mem>
    return mp_lexer_new(src_name, reader);
    3740:	f107 0314 	add.w	r3, r7, #20
    3744:	cb0e      	ldmia	r3, {r1, r2, r3}
    3746:	68f8      	ldr	r0, [r7, #12]
    3748:	f7ff ff8e 	bl	3668 <mp_lexer_new>
    374c:	4603      	mov	r3, r0
}
    374e:	4618      	mov	r0, r3
    3750:	3720      	adds	r7, #32
    3752:	46bd      	mov	sp, r7
    3754:	bd80      	pop	{r7, pc}
    3756:	bf00      	nop

00003758 <mp_lexer_free>:

#endif

#endif

void mp_lexer_free(mp_lexer_t *lex) {
    3758:	b580      	push	{r7, lr}
    375a:	b082      	sub	sp, #8
    375c:	af00      	add	r7, sp, #0
    375e:	6078      	str	r0, [r7, #4]
    if (lex) {
    3760:	687b      	ldr	r3, [r7, #4]
    3762:	2b00      	cmp	r3, #0
    3764:	d012      	beq.n	378c <mp_lexer_free+0x34>
        lex->reader.close(lex->reader.data);
    3766:	687b      	ldr	r3, [r7, #4]
    3768:	68db      	ldr	r3, [r3, #12]
    376a:	687a      	ldr	r2, [r7, #4]
    376c:	6852      	ldr	r2, [r2, #4]
    376e:	4610      	mov	r0, r2
    3770:	4798      	blx	r3
        vstr_clear(&lex->vstr);
    3772:	687b      	ldr	r3, [r7, #4]
    3774:	3344      	adds	r3, #68	; 0x44
    3776:	4618      	mov	r0, r3
    3778:	f7fd fe26 	bl	13c8 <vstr_clear>
        m_del(uint16_t, lex->indent_level, lex->alloc_indent_level);
    377c:	687b      	ldr	r3, [r7, #4]
    377e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3780:	4618      	mov	r0, r3
    3782:	f7fc fe2d 	bl	3e0 <m_free>
        m_del_obj(mp_lexer_t, lex);
    3786:	6878      	ldr	r0, [r7, #4]
    3788:	f7fc fe2a 	bl	3e0 <m_free>
    }
}
    378c:	bf00      	nop
    378e:	3708      	adds	r7, #8
    3790:	46bd      	mov	sp, r7
    3792:	bd80      	pop	{r7, pc}

00003794 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
    3794:	b480      	push	{r7}
    3796:	b083      	sub	sp, #12
    3798:	af00      	add	r7, sp, #0
    379a:	6078      	str	r0, [r7, #4]
    379c:	687b      	ldr	r3, [r7, #4]
    379e:	f003 0301 	and.w	r3, r3, #1
    37a2:	2b00      	cmp	r3, #0
    37a4:	bf14      	ite	ne
    37a6:	2301      	movne	r3, #1
    37a8:	2300      	moveq	r3, #0
    37aa:	b2db      	uxtb	r3, r3
    37ac:	4618      	mov	r0, r3
    37ae:	370c      	adds	r7, #12
    37b0:	46bd      	mov	sp, r7
    37b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    37b6:	4770      	bx	lr

000037b8 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    37b8:	b480      	push	{r7}
    37ba:	b083      	sub	sp, #12
    37bc:	af00      	add	r7, sp, #0
    37be:	6078      	str	r0, [r7, #4]
    37c0:	687b      	ldr	r3, [r7, #4]
    37c2:	f003 0303 	and.w	r3, r3, #3
    37c6:	2b00      	cmp	r3, #0
    37c8:	bf0c      	ite	eq
    37ca:	2301      	moveq	r3, #1
    37cc:	2300      	movne	r3, #0
    37ce:	b2db      	uxtb	r3, r3
    37d0:	4618      	mov	r0, r3
    37d2:	370c      	adds	r7, #12
    37d4:	46bd      	mov	sp, r7
    37d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    37da:	4770      	bx	lr

000037dc <mp_parse_node_new_small_int>:
#define MP_PARSE_NODE_LEAF_ARG(pn) (((uintptr_t)(pn)) >> 4)
#define MP_PARSE_NODE_LEAF_SMALL_INT(pn) (((mp_int_t)(intptr_t)(pn)) >> 1)
#define MP_PARSE_NODE_STRUCT_KIND(pns) ((pns)->kind_num_nodes & 0xff)
#define MP_PARSE_NODE_STRUCT_NUM_NODES(pns) ((pns)->kind_num_nodes >> 8)

static inline mp_parse_node_t mp_parse_node_new_small_int(mp_int_t val) {
    37dc:	b480      	push	{r7}
    37de:	b083      	sub	sp, #12
    37e0:	af00      	add	r7, sp, #0
    37e2:	6078      	str	r0, [r7, #4]
    return (mp_parse_node_t)(MP_PARSE_NODE_SMALL_INT | ((mp_uint_t)val << 1));
    37e4:	687b      	ldr	r3, [r7, #4]
    37e6:	005b      	lsls	r3, r3, #1
    37e8:	f043 0301 	orr.w	r3, r3, #1
}
    37ec:	4618      	mov	r0, r3
    37ee:	370c      	adds	r7, #12
    37f0:	46bd      	mov	sp, r7
    37f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    37f6:	4770      	bx	lr

000037f8 <mp_parse_node_new_leaf>:
static inline mp_parse_node_t mp_parse_node_new_leaf(size_t kind, mp_int_t arg) {
    37f8:	b480      	push	{r7}
    37fa:	b083      	sub	sp, #12
    37fc:	af00      	add	r7, sp, #0
    37fe:	6078      	str	r0, [r7, #4]
    3800:	6039      	str	r1, [r7, #0]
    return (mp_parse_node_t)(kind | ((mp_uint_t)arg << 4));
    3802:	683b      	ldr	r3, [r7, #0]
    3804:	011a      	lsls	r2, r3, #4
    3806:	687b      	ldr	r3, [r7, #4]
    3808:	4313      	orrs	r3, r2
}
    380a:	4618      	mov	r0, r3
    380c:	370c      	adds	r7, #12
    380e:	46bd      	mov	sp, r7
    3810:	f85d 7b04 	ldr.w	r7, [sp], #4
    3814:	4770      	bx	lr
    3816:	bf00      	nop

00003818 <get_rule_arg>:
    #if MICROPY_COMP_CONST
    mp_map_t consts;
    #endif
} parser_t;

STATIC const uint16_t *get_rule_arg(uint8_t r_id) {
    3818:	b480      	push	{r7}
    381a:	b085      	sub	sp, #20
    381c:	af00      	add	r7, sp, #0
    381e:	4603      	mov	r3, r0
    3820:	71fb      	strb	r3, [r7, #7]
    size_t off = rule_arg_offset_table[r_id];
    3822:	79fb      	ldrb	r3, [r7, #7]
    3824:	4a0a      	ldr	r2, [pc, #40]	; (3850 <get_rule_arg+0x38>)
    3826:	5cd3      	ldrb	r3, [r2, r3]
    3828:	60fb      	str	r3, [r7, #12]
    if (r_id >= FIRST_RULE_WITH_OFFSET_ABOVE_255) {
    382a:	79fb      	ldrb	r3, [r7, #7]
    382c:	2266      	movs	r2, #102	; 0x66
    382e:	4293      	cmp	r3, r2
    3830:	d303      	bcc.n	383a <get_rule_arg+0x22>
        off |= 0x100;
    3832:	68fb      	ldr	r3, [r7, #12]
    3834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3838:	60fb      	str	r3, [r7, #12]
    }
    return &rule_arg_combined_table[off];
    383a:	68fb      	ldr	r3, [r7, #12]
    383c:	005b      	lsls	r3, r3, #1
    383e:	4a05      	ldr	r2, [pc, #20]	; (3854 <get_rule_arg+0x3c>)
    3840:	4413      	add	r3, r2
}
    3842:	4618      	mov	r0, r3
    3844:	3714      	adds	r7, #20
    3846:	46bd      	mov	sp, r7
    3848:	f85d 7b04 	ldr.w	r7, [sp], #4
    384c:	4770      	bx	lr
    384e:	bf00      	nop
    3850:	0001df48 	.word	0x0001df48
    3854:	0001dc04 	.word	0x0001dc04

00003858 <parser_alloc>:

STATIC void *parser_alloc(parser_t *parser, size_t num_bytes) {
    3858:	b580      	push	{r7, lr}
    385a:	b086      	sub	sp, #24
    385c:	af00      	add	r7, sp, #0
    385e:	6078      	str	r0, [r7, #4]
    3860:	6039      	str	r1, [r7, #0]
    // use a custom memory allocator to store parse nodes sequentially in large chunks

    mp_parse_chunk_t *chunk = parser->cur_chunk;
    3862:	687b      	ldr	r3, [r7, #4]
    3864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3866:	617b      	str	r3, [r7, #20]

    if (chunk != NULL && chunk->union_.used + num_bytes > chunk->alloc) {
    3868:	697b      	ldr	r3, [r7, #20]
    386a:	2b00      	cmp	r3, #0
    386c:	d031      	beq.n	38d2 <parser_alloc+0x7a>
    386e:	697b      	ldr	r3, [r7, #20]
    3870:	685a      	ldr	r2, [r3, #4]
    3872:	683b      	ldr	r3, [r7, #0]
    3874:	441a      	add	r2, r3
    3876:	697b      	ldr	r3, [r7, #20]
    3878:	681b      	ldr	r3, [r3, #0]
    387a:	429a      	cmp	r2, r3
    387c:	d929      	bls.n	38d2 <parser_alloc+0x7a>
        // not enough room at end of previously allocated chunk so try to grow
        mp_parse_chunk_t *new_data = (mp_parse_chunk_t*)m_renew_maybe(byte, chunk,
    387e:	697b      	ldr	r3, [r7, #20]
    3880:	681a      	ldr	r2, [r3, #0]
    3882:	683b      	ldr	r3, [r7, #0]
    3884:	4413      	add	r3, r2
    3886:	3308      	adds	r3, #8
    3888:	2200      	movs	r2, #0
    388a:	4619      	mov	r1, r3
    388c:	6978      	ldr	r0, [r7, #20]
    388e:	f7fc fd93 	bl	3b8 <m_realloc_maybe>
    3892:	60f8      	str	r0, [r7, #12]
            sizeof(mp_parse_chunk_t) + chunk->alloc,
            sizeof(mp_parse_chunk_t) + chunk->alloc + num_bytes, false);
        if (new_data == NULL) {
    3894:	68fb      	ldr	r3, [r7, #12]
    3896:	2b00      	cmp	r3, #0
    3898:	d115      	bne.n	38c6 <parser_alloc+0x6e>
            // could not grow existing memory; shrink it to fit previous
            (void)m_renew_maybe(byte, chunk, sizeof(mp_parse_chunk_t) + chunk->alloc,
    389a:	697b      	ldr	r3, [r7, #20]
    389c:	685b      	ldr	r3, [r3, #4]
    389e:	3308      	adds	r3, #8
    38a0:	2200      	movs	r2, #0
    38a2:	4619      	mov	r1, r3
    38a4:	6978      	ldr	r0, [r7, #20]
    38a6:	f7fc fd87 	bl	3b8 <m_realloc_maybe>
                sizeof(mp_parse_chunk_t) + chunk->union_.used, false);
            chunk->alloc = chunk->union_.used;
    38aa:	697b      	ldr	r3, [r7, #20]
    38ac:	685a      	ldr	r2, [r3, #4]
    38ae:	697b      	ldr	r3, [r7, #20]
    38b0:	601a      	str	r2, [r3, #0]
            chunk->union_.next = parser->tree.chunk;
    38b2:	687b      	ldr	r3, [r7, #4]
    38b4:	6a1a      	ldr	r2, [r3, #32]
    38b6:	697b      	ldr	r3, [r7, #20]
    38b8:	605a      	str	r2, [r3, #4]
            parser->tree.chunk = chunk;
    38ba:	687b      	ldr	r3, [r7, #4]
    38bc:	697a      	ldr	r2, [r7, #20]
    38be:	621a      	str	r2, [r3, #32]
            chunk = NULL;
    38c0:	2300      	movs	r3, #0
    38c2:	617b      	str	r3, [r7, #20]
    38c4:	e005      	b.n	38d2 <parser_alloc+0x7a>
        } else {
            // could grow existing memory
            chunk->alloc += num_bytes;
    38c6:	697b      	ldr	r3, [r7, #20]
    38c8:	681a      	ldr	r2, [r3, #0]
    38ca:	683b      	ldr	r3, [r7, #0]
    38cc:	441a      	add	r2, r3
    38ce:	697b      	ldr	r3, [r7, #20]
    38d0:	601a      	str	r2, [r3, #0]
        }
    }

    if (chunk == NULL) {
    38d2:	697b      	ldr	r3, [r7, #20]
    38d4:	2b00      	cmp	r3, #0
    38d6:	d116      	bne.n	3906 <parser_alloc+0xae>
        // no previous chunk, allocate a new chunk
        size_t alloc = MICROPY_ALLOC_PARSE_CHUNK_INIT;
    38d8:	2310      	movs	r3, #16
    38da:	613b      	str	r3, [r7, #16]
        if (alloc < num_bytes) {
    38dc:	693a      	ldr	r2, [r7, #16]
    38de:	683b      	ldr	r3, [r7, #0]
    38e0:	429a      	cmp	r2, r3
    38e2:	d201      	bcs.n	38e8 <parser_alloc+0x90>
            alloc = num_bytes;
    38e4:	683b      	ldr	r3, [r7, #0]
    38e6:	613b      	str	r3, [r7, #16]
        }
        chunk = (mp_parse_chunk_t*)m_new(byte, sizeof(mp_parse_chunk_t) + alloc);
    38e8:	693b      	ldr	r3, [r7, #16]
    38ea:	3308      	adds	r3, #8
    38ec:	4618      	mov	r0, r3
    38ee:	f7fc fd15 	bl	31c <m_malloc>
    38f2:	6178      	str	r0, [r7, #20]
        chunk->alloc = alloc;
    38f4:	697b      	ldr	r3, [r7, #20]
    38f6:	693a      	ldr	r2, [r7, #16]
    38f8:	601a      	str	r2, [r3, #0]
        chunk->union_.used = 0;
    38fa:	697b      	ldr	r3, [r7, #20]
    38fc:	2200      	movs	r2, #0
    38fe:	605a      	str	r2, [r3, #4]
        parser->cur_chunk = chunk;
    3900:	687b      	ldr	r3, [r7, #4]
    3902:	697a      	ldr	r2, [r7, #20]
    3904:	625a      	str	r2, [r3, #36]	; 0x24
    }

    byte *ret = chunk->data + chunk->union_.used;
    3906:	697b      	ldr	r3, [r7, #20]
    3908:	f103 0208 	add.w	r2, r3, #8
    390c:	697b      	ldr	r3, [r7, #20]
    390e:	685b      	ldr	r3, [r3, #4]
    3910:	4413      	add	r3, r2
    3912:	60bb      	str	r3, [r7, #8]
    chunk->union_.used += num_bytes;
    3914:	697b      	ldr	r3, [r7, #20]
    3916:	685a      	ldr	r2, [r3, #4]
    3918:	683b      	ldr	r3, [r7, #0]
    391a:	441a      	add	r2, r3
    391c:	697b      	ldr	r3, [r7, #20]
    391e:	605a      	str	r2, [r3, #4]
    return ret;
    3920:	68bb      	ldr	r3, [r7, #8]
}
    3922:	4618      	mov	r0, r3
    3924:	3718      	adds	r7, #24
    3926:	46bd      	mov	sp, r7
    3928:	bd80      	pop	{r7, pc}
    392a:	bf00      	nop

0000392c <push_rule>:

STATIC void push_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t arg_i) {
    392c:	b580      	push	{r7, lr}
    392e:	b086      	sub	sp, #24
    3930:	af00      	add	r7, sp, #0
    3932:	60f8      	str	r0, [r7, #12]
    3934:	60b9      	str	r1, [r7, #8]
    3936:	603b      	str	r3, [r7, #0]
    3938:	4613      	mov	r3, r2
    393a:	71fb      	strb	r3, [r7, #7]
    if (parser->rule_stack_top >= parser->rule_stack_alloc) {
    393c:	68fb      	ldr	r3, [r7, #12]
    393e:	685a      	ldr	r2, [r3, #4]
    3940:	68fb      	ldr	r3, [r7, #12]
    3942:	681b      	ldr	r3, [r3, #0]
    3944:	429a      	cmp	r2, r3
    3946:	d313      	bcc.n	3970 <push_rule+0x44>
        rule_stack_t *rs = m_renew(rule_stack_t, parser->rule_stack, parser->rule_stack_alloc, parser->rule_stack_alloc + MICROPY_ALLOC_PARSE_RULE_INC);
    3948:	68fb      	ldr	r3, [r7, #12]
    394a:	689a      	ldr	r2, [r3, #8]
    394c:	68fb      	ldr	r3, [r7, #12]
    394e:	681b      	ldr	r3, [r3, #0]
    3950:	3310      	adds	r3, #16
    3952:	00db      	lsls	r3, r3, #3
    3954:	4619      	mov	r1, r3
    3956:	4610      	mov	r0, r2
    3958:	f7fc fd14 	bl	384 <m_realloc>
    395c:	6178      	str	r0, [r7, #20]
        parser->rule_stack = rs;
    395e:	68fb      	ldr	r3, [r7, #12]
    3960:	697a      	ldr	r2, [r7, #20]
    3962:	609a      	str	r2, [r3, #8]
        parser->rule_stack_alloc += MICROPY_ALLOC_PARSE_RULE_INC;
    3964:	68fb      	ldr	r3, [r7, #12]
    3966:	681b      	ldr	r3, [r3, #0]
    3968:	f103 0210 	add.w	r2, r3, #16
    396c:	68fb      	ldr	r3, [r7, #12]
    396e:	601a      	str	r2, [r3, #0]
    }
    rule_stack_t *rs = &parser->rule_stack[parser->rule_stack_top++];
    3970:	68fb      	ldr	r3, [r7, #12]
    3972:	689a      	ldr	r2, [r3, #8]
    3974:	68fb      	ldr	r3, [r7, #12]
    3976:	685b      	ldr	r3, [r3, #4]
    3978:	1c58      	adds	r0, r3, #1
    397a:	68f9      	ldr	r1, [r7, #12]
    397c:	6048      	str	r0, [r1, #4]
    397e:	00db      	lsls	r3, r3, #3
    3980:	4413      	add	r3, r2
    3982:	613b      	str	r3, [r7, #16]
    rs->src_line = src_line;
    3984:	68bb      	ldr	r3, [r7, #8]
    3986:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
    398a:	693a      	ldr	r2, [r7, #16]
    398c:	6813      	ldr	r3, [r2, #0]
    398e:	f361 0317 	bfi	r3, r1, #0, #24
    3992:	6013      	str	r3, [r2, #0]
    rs->rule_id = rule_id;
    3994:	693b      	ldr	r3, [r7, #16]
    3996:	79fa      	ldrb	r2, [r7, #7]
    3998:	70da      	strb	r2, [r3, #3]
    rs->arg_i = arg_i;
    399a:	693b      	ldr	r3, [r7, #16]
    399c:	683a      	ldr	r2, [r7, #0]
    399e:	605a      	str	r2, [r3, #4]
}
    39a0:	bf00      	nop
    39a2:	3718      	adds	r7, #24
    39a4:	46bd      	mov	sp, r7
    39a6:	bd80      	pop	{r7, pc}

000039a8 <push_rule_from_arg>:

STATIC void push_rule_from_arg(parser_t *parser, size_t arg) {
    39a8:	b580      	push	{r7, lr}
    39aa:	b084      	sub	sp, #16
    39ac:	af00      	add	r7, sp, #0
    39ae:	6078      	str	r0, [r7, #4]
    39b0:	6039      	str	r1, [r7, #0]
    assert((arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE || (arg & RULE_ARG_KIND_MASK) == RULE_ARG_OPT_RULE);
    39b2:	683b      	ldr	r3, [r7, #0]
    39b4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    39b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    39bc:	d00c      	beq.n	39d8 <push_rule_from_arg+0x30>
    39be:	683b      	ldr	r3, [r7, #0]
    39c0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    39c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
    39c8:	d006      	beq.n	39d8 <push_rule_from_arg+0x30>
    39ca:	4b0c      	ldr	r3, [pc, #48]	; (39fc <push_rule_from_arg+0x54>)
    39cc:	4a0c      	ldr	r2, [pc, #48]	; (3a00 <push_rule_from_arg+0x58>)
    39ce:	f44f 7199 	mov.w	r1, #306	; 0x132
    39d2:	480c      	ldr	r0, [pc, #48]	; (3a04 <push_rule_from_arg+0x5c>)
    39d4:	f017 fcca 	bl	1b36c <__assert_func>
    size_t rule_id = arg & RULE_ARG_ARG_MASK;
    39d8:	683b      	ldr	r3, [r7, #0]
    39da:	f3c3 030b 	ubfx	r3, r3, #0, #12
    39de:	60fb      	str	r3, [r7, #12]
    push_rule(parser, parser->lexer->tok_line, rule_id, 0);
    39e0:	687b      	ldr	r3, [r7, #4]
    39e2:	699b      	ldr	r3, [r3, #24]
    39e4:	6b99      	ldr	r1, [r3, #56]	; 0x38
    39e6:	68fb      	ldr	r3, [r7, #12]
    39e8:	b2da      	uxtb	r2, r3
    39ea:	2300      	movs	r3, #0
    39ec:	6878      	ldr	r0, [r7, #4]
    39ee:	f7ff ff9d 	bl	392c <push_rule>
}
    39f2:	bf00      	nop
    39f4:	3710      	adds	r7, #16
    39f6:	46bd      	mov	sp, r7
    39f8:	bd80      	pop	{r7, pc}
    39fa:	bf00      	nop
    39fc:	0001dff0 	.word	0x0001dff0
    3a00:	0001e1c8 	.word	0x0001e1c8
    3a04:	0001e050 	.word	0x0001e050

00003a08 <pop_rule>:

STATIC uint8_t pop_rule(parser_t *parser, size_t *arg_i, size_t *src_line) {
    3a08:	b480      	push	{r7}
    3a0a:	b087      	sub	sp, #28
    3a0c:	af00      	add	r7, sp, #0
    3a0e:	60f8      	str	r0, [r7, #12]
    3a10:	60b9      	str	r1, [r7, #8]
    3a12:	607a      	str	r2, [r7, #4]
    parser->rule_stack_top -= 1;
    3a14:	68fb      	ldr	r3, [r7, #12]
    3a16:	685b      	ldr	r3, [r3, #4]
    3a18:	1e5a      	subs	r2, r3, #1
    3a1a:	68fb      	ldr	r3, [r7, #12]
    3a1c:	605a      	str	r2, [r3, #4]
    uint8_t rule_id = parser->rule_stack[parser->rule_stack_top].rule_id;
    3a1e:	68fb      	ldr	r3, [r7, #12]
    3a20:	689a      	ldr	r2, [r3, #8]
    3a22:	68fb      	ldr	r3, [r7, #12]
    3a24:	685b      	ldr	r3, [r3, #4]
    3a26:	00db      	lsls	r3, r3, #3
    3a28:	4413      	add	r3, r2
    3a2a:	78db      	ldrb	r3, [r3, #3]
    3a2c:	75fb      	strb	r3, [r7, #23]
    *arg_i = parser->rule_stack[parser->rule_stack_top].arg_i;
    3a2e:	68fb      	ldr	r3, [r7, #12]
    3a30:	689a      	ldr	r2, [r3, #8]
    3a32:	68fb      	ldr	r3, [r7, #12]
    3a34:	685b      	ldr	r3, [r3, #4]
    3a36:	00db      	lsls	r3, r3, #3
    3a38:	4413      	add	r3, r2
    3a3a:	685a      	ldr	r2, [r3, #4]
    3a3c:	68bb      	ldr	r3, [r7, #8]
    3a3e:	601a      	str	r2, [r3, #0]
    *src_line = parser->rule_stack[parser->rule_stack_top].src_line;
    3a40:	68fb      	ldr	r3, [r7, #12]
    3a42:	689a      	ldr	r2, [r3, #8]
    3a44:	68fb      	ldr	r3, [r7, #12]
    3a46:	685b      	ldr	r3, [r3, #4]
    3a48:	00db      	lsls	r3, r3, #3
    3a4a:	4413      	add	r3, r2
    3a4c:	681b      	ldr	r3, [r3, #0]
    3a4e:	f3c3 0317 	ubfx	r3, r3, #0, #24
    3a52:	461a      	mov	r2, r3
    3a54:	687b      	ldr	r3, [r7, #4]
    3a56:	601a      	str	r2, [r3, #0]
    return rule_id;
    3a58:	7dfb      	ldrb	r3, [r7, #23]
}
    3a5a:	4618      	mov	r0, r3
    3a5c:	371c      	adds	r7, #28
    3a5e:	46bd      	mov	sp, r7
    3a60:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a64:	4770      	bx	lr
    3a66:	bf00      	nop

00003a68 <mp_parse_node_is_const_false>:

bool mp_parse_node_is_const_false(mp_parse_node_t pn) {
    3a68:	b480      	push	{r7}
    3a6a:	b083      	sub	sp, #12
    3a6c:	af00      	add	r7, sp, #0
    3a6e:	6078      	str	r0, [r7, #4]
    return MP_PARSE_NODE_IS_TOKEN_KIND(pn, MP_TOKEN_KW_FALSE)
        || (MP_PARSE_NODE_IS_SMALL_INT(pn) && MP_PARSE_NODE_LEAF_SMALL_INT(pn) == 0);
    3a70:	687b      	ldr	r3, [r7, #4]
    3a72:	2bde      	cmp	r3, #222	; 0xde
    3a74:	d008      	beq.n	3a88 <mp_parse_node_is_const_false+0x20>
    3a76:	687b      	ldr	r3, [r7, #4]
    3a78:	f003 0301 	and.w	r3, r3, #1
    3a7c:	2b00      	cmp	r3, #0
    3a7e:	d005      	beq.n	3a8c <mp_parse_node_is_const_false+0x24>
    3a80:	687b      	ldr	r3, [r7, #4]
    3a82:	105b      	asrs	r3, r3, #1
    3a84:	2b00      	cmp	r3, #0
    3a86:	d101      	bne.n	3a8c <mp_parse_node_is_const_false+0x24>
    3a88:	2301      	movs	r3, #1
    3a8a:	e000      	b.n	3a8e <mp_parse_node_is_const_false+0x26>
    3a8c:	2300      	movs	r3, #0
    return MP_PARSE_NODE_IS_TOKEN_KIND(pn, MP_TOKEN_KW_FALSE)
    3a8e:	f003 0301 	and.w	r3, r3, #1
    3a92:	b2db      	uxtb	r3, r3
}
    3a94:	4618      	mov	r0, r3
    3a96:	370c      	adds	r7, #12
    3a98:	46bd      	mov	sp, r7
    3a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3a9e:	4770      	bx	lr

00003aa0 <mp_parse_node_is_const_true>:

bool mp_parse_node_is_const_true(mp_parse_node_t pn) {
    3aa0:	b480      	push	{r7}
    3aa2:	b083      	sub	sp, #12
    3aa4:	af00      	add	r7, sp, #0
    3aa6:	6078      	str	r0, [r7, #4]
    return MP_PARSE_NODE_IS_TOKEN_KIND(pn, MP_TOKEN_KW_TRUE)
        || (MP_PARSE_NODE_IS_SMALL_INT(pn) && MP_PARSE_NODE_LEAF_SMALL_INT(pn) != 0);
    3aa8:	687b      	ldr	r3, [r7, #4]
    3aaa:	2bfe      	cmp	r3, #254	; 0xfe
    3aac:	d008      	beq.n	3ac0 <mp_parse_node_is_const_true+0x20>
    3aae:	687b      	ldr	r3, [r7, #4]
    3ab0:	f003 0301 	and.w	r3, r3, #1
    3ab4:	2b00      	cmp	r3, #0
    3ab6:	d005      	beq.n	3ac4 <mp_parse_node_is_const_true+0x24>
    3ab8:	687b      	ldr	r3, [r7, #4]
    3aba:	105b      	asrs	r3, r3, #1
    3abc:	2b00      	cmp	r3, #0
    3abe:	d001      	beq.n	3ac4 <mp_parse_node_is_const_true+0x24>
    3ac0:	2301      	movs	r3, #1
    3ac2:	e000      	b.n	3ac6 <mp_parse_node_is_const_true+0x26>
    3ac4:	2300      	movs	r3, #0
    return MP_PARSE_NODE_IS_TOKEN_KIND(pn, MP_TOKEN_KW_TRUE)
    3ac6:	f003 0301 	and.w	r3, r3, #1
    3aca:	b2db      	uxtb	r3, r3
}
    3acc:	4618      	mov	r0, r3
    3ace:	370c      	adds	r7, #12
    3ad0:	46bd      	mov	sp, r7
    3ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ad6:	4770      	bx	lr

00003ad8 <mp_parse_node_get_int_maybe>:

bool mp_parse_node_get_int_maybe(mp_parse_node_t pn, mp_obj_t *o) {
    3ad8:	b580      	push	{r7, lr}
    3ada:	b084      	sub	sp, #16
    3adc:	af00      	add	r7, sp, #0
    3ade:	6078      	str	r0, [r7, #4]
    3ae0:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_SMALL_INT(pn)) {
    3ae2:	687b      	ldr	r3, [r7, #4]
    3ae4:	f003 0301 	and.w	r3, r3, #1
    3ae8:	2b00      	cmp	r3, #0
    3aea:	d007      	beq.n	3afc <mp_parse_node_get_int_maybe+0x24>
        *o = MP_OBJ_NEW_SMALL_INT(MP_PARSE_NODE_LEAF_SMALL_INT(pn));
    3aec:	687b      	ldr	r3, [r7, #4]
    3aee:	f043 0301 	orr.w	r3, r3, #1
    3af2:	461a      	mov	r2, r3
    3af4:	683b      	ldr	r3, [r7, #0]
    3af6:	601a      	str	r2, [r3, #0]
        return true;
    3af8:	2301      	movs	r3, #1
    3afa:	e031      	b.n	3b60 <mp_parse_node_get_int_maybe+0x88>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, RULE_const_object)) {
    3afc:	687b      	ldr	r3, [r7, #4]
    3afe:	2b00      	cmp	r3, #0
    3b00:	d02d      	beq.n	3b5e <mp_parse_node_get_int_maybe+0x86>
    3b02:	687b      	ldr	r3, [r7, #4]
    3b04:	f003 0303 	and.w	r3, r3, #3
    3b08:	2b00      	cmp	r3, #0
    3b0a:	d128      	bne.n	3b5e <mp_parse_node_get_int_maybe+0x86>
    3b0c:	687b      	ldr	r3, [r7, #4]
    3b0e:	685b      	ldr	r3, [r3, #4]
    3b10:	b2db      	uxtb	r3, r3
    3b12:	2b35      	cmp	r3, #53	; 0x35
    3b14:	d123      	bne.n	3b5e <mp_parse_node_get_int_maybe+0x86>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    3b16:	687b      	ldr	r3, [r7, #4]
    3b18:	60fb      	str	r3, [r7, #12]
        #if MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_D
        // nodes are 32-bit pointers, but need to extract 64-bit object
        *o = (uint64_t)pns->nodes[0] | ((uint64_t)pns->nodes[1] << 32);
        #else
        *o = (mp_obj_t)pns->nodes[0];
    3b1a:	68fb      	ldr	r3, [r7, #12]
    3b1c:	689b      	ldr	r3, [r3, #8]
    3b1e:	461a      	mov	r2, r3
    3b20:	683b      	ldr	r3, [r7, #0]
    3b22:	601a      	str	r2, [r3, #0]
        #endif
        return MP_OBJ_IS_INT(*o);
    3b24:	683b      	ldr	r3, [r7, #0]
    3b26:	681b      	ldr	r3, [r3, #0]
    3b28:	4618      	mov	r0, r3
    3b2a:	f7ff fe33 	bl	3794 <MP_OBJ_IS_SMALL_INT>
    3b2e:	4603      	mov	r3, r0
    3b30:	2b00      	cmp	r3, #0
    3b32:	d10d      	bne.n	3b50 <mp_parse_node_get_int_maybe+0x78>
    3b34:	683b      	ldr	r3, [r7, #0]
    3b36:	681b      	ldr	r3, [r3, #0]
    3b38:	4618      	mov	r0, r3
    3b3a:	f7ff fe3d 	bl	37b8 <MP_OBJ_IS_OBJ>
    3b3e:	4603      	mov	r3, r0
    3b40:	2b00      	cmp	r3, #0
    3b42:	d007      	beq.n	3b54 <mp_parse_node_get_int_maybe+0x7c>
    3b44:	683b      	ldr	r3, [r7, #0]
    3b46:	681b      	ldr	r3, [r3, #0]
    3b48:	681b      	ldr	r3, [r3, #0]
    3b4a:	4a07      	ldr	r2, [pc, #28]	; (3b68 <mp_parse_node_get_int_maybe+0x90>)
    3b4c:	4293      	cmp	r3, r2
    3b4e:	d101      	bne.n	3b54 <mp_parse_node_get_int_maybe+0x7c>
    3b50:	2301      	movs	r3, #1
    3b52:	e000      	b.n	3b56 <mp_parse_node_get_int_maybe+0x7e>
    3b54:	2300      	movs	r3, #0
    3b56:	f003 0301 	and.w	r3, r3, #1
    3b5a:	b2db      	uxtb	r3, r3
    3b5c:	e000      	b.n	3b60 <mp_parse_node_get_int_maybe+0x88>
    } else {
        return false;
    3b5e:	2300      	movs	r3, #0
    }
}
    3b60:	4618      	mov	r0, r3
    3b62:	3710      	adds	r7, #16
    3b64:	46bd      	mov	sp, r7
    3b66:	bd80      	pop	{r7, pc}
    3b68:	00020f90 	.word	0x00020f90

00003b6c <mp_parse_node_extract_list>:

int mp_parse_node_extract_list(mp_parse_node_t *pn, size_t pn_kind, mp_parse_node_t **nodes) {
    3b6c:	b480      	push	{r7}
    3b6e:	b087      	sub	sp, #28
    3b70:	af00      	add	r7, sp, #0
    3b72:	60f8      	str	r0, [r7, #12]
    3b74:	60b9      	str	r1, [r7, #8]
    3b76:	607a      	str	r2, [r7, #4]
    if (MP_PARSE_NODE_IS_NULL(*pn)) {
    3b78:	68fb      	ldr	r3, [r7, #12]
    3b7a:	681b      	ldr	r3, [r3, #0]
    3b7c:	2b00      	cmp	r3, #0
    3b7e:	d104      	bne.n	3b8a <mp_parse_node_extract_list+0x1e>
        *nodes = NULL;
    3b80:	687b      	ldr	r3, [r7, #4]
    3b82:	2200      	movs	r2, #0
    3b84:	601a      	str	r2, [r3, #0]
        return 0;
    3b86:	2300      	movs	r3, #0
    3b88:	e020      	b.n	3bcc <mp_parse_node_extract_list+0x60>
    } else if (MP_PARSE_NODE_IS_LEAF(*pn)) {
    3b8a:	68fb      	ldr	r3, [r7, #12]
    3b8c:	681b      	ldr	r3, [r3, #0]
    3b8e:	f003 0303 	and.w	r3, r3, #3
    3b92:	2b00      	cmp	r3, #0
    3b94:	d004      	beq.n	3ba0 <mp_parse_node_extract_list+0x34>
        *nodes = pn;
    3b96:	687b      	ldr	r3, [r7, #4]
    3b98:	68fa      	ldr	r2, [r7, #12]
    3b9a:	601a      	str	r2, [r3, #0]
        return 1;
    3b9c:	2301      	movs	r3, #1
    3b9e:	e015      	b.n	3bcc <mp_parse_node_extract_list+0x60>
    } else {
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)(*pn);
    3ba0:	68fb      	ldr	r3, [r7, #12]
    3ba2:	681b      	ldr	r3, [r3, #0]
    3ba4:	617b      	str	r3, [r7, #20]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) != pn_kind) {
    3ba6:	697b      	ldr	r3, [r7, #20]
    3ba8:	685b      	ldr	r3, [r3, #4]
    3baa:	b2da      	uxtb	r2, r3
    3bac:	68bb      	ldr	r3, [r7, #8]
    3bae:	429a      	cmp	r2, r3
    3bb0:	d004      	beq.n	3bbc <mp_parse_node_extract_list+0x50>
            *nodes = pn;
    3bb2:	687b      	ldr	r3, [r7, #4]
    3bb4:	68fa      	ldr	r2, [r7, #12]
    3bb6:	601a      	str	r2, [r3, #0]
            return 1;
    3bb8:	2301      	movs	r3, #1
    3bba:	e007      	b.n	3bcc <mp_parse_node_extract_list+0x60>
        } else {
            *nodes = pns->nodes;
    3bbc:	697b      	ldr	r3, [r7, #20]
    3bbe:	f103 0208 	add.w	r2, r3, #8
    3bc2:	687b      	ldr	r3, [r7, #4]
    3bc4:	601a      	str	r2, [r3, #0]
            return MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    3bc6:	697b      	ldr	r3, [r7, #20]
    3bc8:	685b      	ldr	r3, [r3, #4]
    3bca:	0a1b      	lsrs	r3, r3, #8
        }
    }
}
    3bcc:	4618      	mov	r0, r3
    3bce:	371c      	adds	r7, #28
    3bd0:	46bd      	mov	sp, r7
    3bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bd6:	4770      	bx	lr

00003bd8 <pop_result>:
        mp_parse_node_print(parser->result_stack[i], 0);
    }
}
*/

STATIC mp_parse_node_t pop_result(parser_t *parser) {
    3bd8:	b580      	push	{r7, lr}
    3bda:	b082      	sub	sp, #8
    3bdc:	af00      	add	r7, sp, #0
    3bde:	6078      	str	r0, [r7, #4]
    assert(parser->result_stack_top > 0);
    3be0:	687b      	ldr	r3, [r7, #4]
    3be2:	691b      	ldr	r3, [r3, #16]
    3be4:	2b00      	cmp	r3, #0
    3be6:	d106      	bne.n	3bf6 <pop_result+0x1e>
    3be8:	4b0b      	ldr	r3, [pc, #44]	; (3c18 <pop_result+0x40>)
    3bea:	4a0c      	ldr	r2, [pc, #48]	; (3c1c <pop_result+0x44>)
    3bec:	f240 11a9 	movw	r1, #425	; 0x1a9
    3bf0:	480b      	ldr	r0, [pc, #44]	; (3c20 <pop_result+0x48>)
    3bf2:	f017 fbbb 	bl	1b36c <__assert_func>
    return parser->result_stack[--parser->result_stack_top];
    3bf6:	687b      	ldr	r3, [r7, #4]
    3bf8:	695a      	ldr	r2, [r3, #20]
    3bfa:	687b      	ldr	r3, [r7, #4]
    3bfc:	691b      	ldr	r3, [r3, #16]
    3bfe:	1e59      	subs	r1, r3, #1
    3c00:	687b      	ldr	r3, [r7, #4]
    3c02:	6119      	str	r1, [r3, #16]
    3c04:	687b      	ldr	r3, [r7, #4]
    3c06:	691b      	ldr	r3, [r3, #16]
    3c08:	009b      	lsls	r3, r3, #2
    3c0a:	4413      	add	r3, r2
    3c0c:	681b      	ldr	r3, [r3, #0]
}
    3c0e:	4618      	mov	r0, r3
    3c10:	3708      	adds	r7, #8
    3c12:	46bd      	mov	sp, r7
    3c14:	bd80      	pop	{r7, pc}
    3c16:	bf00      	nop
    3c18:	0001e064 	.word	0x0001e064
    3c1c:	0001e1dc 	.word	0x0001e1dc
    3c20:	0001e050 	.word	0x0001e050

00003c24 <peek_result>:

STATIC mp_parse_node_t peek_result(parser_t *parser, size_t pos) {
    3c24:	b580      	push	{r7, lr}
    3c26:	b082      	sub	sp, #8
    3c28:	af00      	add	r7, sp, #0
    3c2a:	6078      	str	r0, [r7, #4]
    3c2c:	6039      	str	r1, [r7, #0]
    assert(parser->result_stack_top > pos);
    3c2e:	687b      	ldr	r3, [r7, #4]
    3c30:	691a      	ldr	r2, [r3, #16]
    3c32:	683b      	ldr	r3, [r7, #0]
    3c34:	429a      	cmp	r2, r3
    3c36:	d806      	bhi.n	3c46 <peek_result+0x22>
    3c38:	4b0b      	ldr	r3, [pc, #44]	; (3c68 <peek_result+0x44>)
    3c3a:	4a0c      	ldr	r2, [pc, #48]	; (3c6c <peek_result+0x48>)
    3c3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    3c40:	480b      	ldr	r0, [pc, #44]	; (3c70 <peek_result+0x4c>)
    3c42:	f017 fb93 	bl	1b36c <__assert_func>
    return parser->result_stack[parser->result_stack_top - 1 - pos];
    3c46:	687b      	ldr	r3, [r7, #4]
    3c48:	695a      	ldr	r2, [r3, #20]
    3c4a:	687b      	ldr	r3, [r7, #4]
    3c4c:	6919      	ldr	r1, [r3, #16]
    3c4e:	683b      	ldr	r3, [r7, #0]
    3c50:	1acb      	subs	r3, r1, r3
    3c52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3c56:	3b01      	subs	r3, #1
    3c58:	009b      	lsls	r3, r3, #2
    3c5a:	4413      	add	r3, r2
    3c5c:	681b      	ldr	r3, [r3, #0]
}
    3c5e:	4618      	mov	r0, r3
    3c60:	3708      	adds	r7, #8
    3c62:	46bd      	mov	sp, r7
    3c64:	bd80      	pop	{r7, pc}
    3c66:	bf00      	nop
    3c68:	0001e084 	.word	0x0001e084
    3c6c:	0001e1e8 	.word	0x0001e1e8
    3c70:	0001e050 	.word	0x0001e050

00003c74 <push_result_node>:

STATIC void push_result_node(parser_t *parser, mp_parse_node_t pn) {
    3c74:	b580      	push	{r7, lr}
    3c76:	b084      	sub	sp, #16
    3c78:	af00      	add	r7, sp, #0
    3c7a:	6078      	str	r0, [r7, #4]
    3c7c:	6039      	str	r1, [r7, #0]
    if (parser->result_stack_top >= parser->result_stack_alloc) {
    3c7e:	687b      	ldr	r3, [r7, #4]
    3c80:	691a      	ldr	r2, [r3, #16]
    3c82:	687b      	ldr	r3, [r7, #4]
    3c84:	68db      	ldr	r3, [r3, #12]
    3c86:	429a      	cmp	r2, r3
    3c88:	d313      	bcc.n	3cb2 <push_result_node+0x3e>
        mp_parse_node_t *stack = m_renew(mp_parse_node_t, parser->result_stack, parser->result_stack_alloc, parser->result_stack_alloc + MICROPY_ALLOC_PARSE_RESULT_INC);
    3c8a:	687b      	ldr	r3, [r7, #4]
    3c8c:	695a      	ldr	r2, [r3, #20]
    3c8e:	687b      	ldr	r3, [r7, #4]
    3c90:	68db      	ldr	r3, [r3, #12]
    3c92:	3310      	adds	r3, #16
    3c94:	009b      	lsls	r3, r3, #2
    3c96:	4619      	mov	r1, r3
    3c98:	4610      	mov	r0, r2
    3c9a:	f7fc fb73 	bl	384 <m_realloc>
    3c9e:	60f8      	str	r0, [r7, #12]
        parser->result_stack = stack;
    3ca0:	687b      	ldr	r3, [r7, #4]
    3ca2:	68fa      	ldr	r2, [r7, #12]
    3ca4:	615a      	str	r2, [r3, #20]
        parser->result_stack_alloc += MICROPY_ALLOC_PARSE_RESULT_INC;
    3ca6:	687b      	ldr	r3, [r7, #4]
    3ca8:	68db      	ldr	r3, [r3, #12]
    3caa:	f103 0210 	add.w	r2, r3, #16
    3cae:	687b      	ldr	r3, [r7, #4]
    3cb0:	60da      	str	r2, [r3, #12]
    }
    parser->result_stack[parser->result_stack_top++] = pn;
    3cb2:	687b      	ldr	r3, [r7, #4]
    3cb4:	695a      	ldr	r2, [r3, #20]
    3cb6:	687b      	ldr	r3, [r7, #4]
    3cb8:	691b      	ldr	r3, [r3, #16]
    3cba:	1c58      	adds	r0, r3, #1
    3cbc:	6879      	ldr	r1, [r7, #4]
    3cbe:	6108      	str	r0, [r1, #16]
    3cc0:	009b      	lsls	r3, r3, #2
    3cc2:	4413      	add	r3, r2
    3cc4:	683a      	ldr	r2, [r7, #0]
    3cc6:	601a      	str	r2, [r3, #0]
}
    3cc8:	bf00      	nop
    3cca:	3710      	adds	r7, #16
    3ccc:	46bd      	mov	sp, r7
    3cce:	bd80      	pop	{r7, pc}

00003cd0 <make_node_const_object>:

STATIC mp_parse_node_t make_node_const_object(parser_t *parser, size_t src_line, mp_obj_t obj) {
    3cd0:	b580      	push	{r7, lr}
    3cd2:	b086      	sub	sp, #24
    3cd4:	af00      	add	r7, sp, #0
    3cd6:	60f8      	str	r0, [r7, #12]
    3cd8:	60b9      	str	r1, [r7, #8]
    3cda:	607a      	str	r2, [r7, #4]
    mp_parse_node_struct_t *pn = parser_alloc(parser, sizeof(mp_parse_node_struct_t) + sizeof(mp_obj_t));
    3cdc:	210c      	movs	r1, #12
    3cde:	68f8      	ldr	r0, [r7, #12]
    3ce0:	f7ff fdba 	bl	3858 <parser_alloc>
    3ce4:	6178      	str	r0, [r7, #20]
    pn->source_line = src_line;
    3ce6:	697b      	ldr	r3, [r7, #20]
    3ce8:	68ba      	ldr	r2, [r7, #8]
    3cea:	601a      	str	r2, [r3, #0]
    // nodes are 32-bit pointers, but need to store 64-bit object
    pn->kind_num_nodes = RULE_const_object | (2 << 8);
    pn->nodes[0] = (uint64_t)obj;
    pn->nodes[1] = (uint64_t)obj >> 32;
    #else
    pn->kind_num_nodes = RULE_const_object | (1 << 8);
    3cec:	697b      	ldr	r3, [r7, #20]
    3cee:	f240 1235 	movw	r2, #309	; 0x135
    3cf2:	605a      	str	r2, [r3, #4]
    pn->nodes[0] = (uintptr_t)obj;
    3cf4:	687a      	ldr	r2, [r7, #4]
    3cf6:	697b      	ldr	r3, [r7, #20]
    3cf8:	609a      	str	r2, [r3, #8]
    #endif
    return (mp_parse_node_t)pn;
    3cfa:	697b      	ldr	r3, [r7, #20]
}
    3cfc:	4618      	mov	r0, r3
    3cfe:	3718      	adds	r7, #24
    3d00:	46bd      	mov	sp, r7
    3d02:	bd80      	pop	{r7, pc}

00003d04 <mp_parse_node_new_small_int_checked>:

STATIC mp_parse_node_t mp_parse_node_new_small_int_checked(parser_t *parser, mp_obj_t o_val) {
    3d04:	b580      	push	{r7, lr}
    3d06:	b084      	sub	sp, #16
    3d08:	af00      	add	r7, sp, #0
    3d0a:	6078      	str	r0, [r7, #4]
    3d0c:	6039      	str	r1, [r7, #0]
    (void)parser;
    mp_int_t val = MP_OBJ_SMALL_INT_VALUE(o_val);
    3d0e:	683b      	ldr	r3, [r7, #0]
    3d10:	105b      	asrs	r3, r3, #1
    3d12:	60fb      	str	r3, [r7, #12]
    // A parse node is only 32-bits and the small-int value must fit in 31-bits
    if (((val ^ (val << 1)) & 0xffffffff80000000) != 0) {
        return make_node_const_object(parser, 0, o_val);
    }
    #endif
    return mp_parse_node_new_small_int(val);
    3d14:	68f8      	ldr	r0, [r7, #12]
    3d16:	f7ff fd61 	bl	37dc <mp_parse_node_new_small_int>
    3d1a:	4603      	mov	r3, r0
}
    3d1c:	4618      	mov	r0, r3
    3d1e:	3710      	adds	r7, #16
    3d20:	46bd      	mov	sp, r7
    3d22:	bd80      	pop	{r7, pc}

00003d24 <push_result_token>:

STATIC void push_result_token(parser_t *parser, uint8_t rule_id) {
    3d24:	b580      	push	{r7, lr}
    3d26:	b08c      	sub	sp, #48	; 0x30
    3d28:	af02      	add	r7, sp, #8
    3d2a:	6078      	str	r0, [r7, #4]
    3d2c:	460b      	mov	r3, r1
    3d2e:	70fb      	strb	r3, [r7, #3]
    mp_parse_node_t pn;
    mp_lexer_t *lex = parser->lexer;
    3d30:	687b      	ldr	r3, [r7, #4]
    3d32:	699b      	ldr	r3, [r3, #24]
    3d34:	61fb      	str	r3, [r7, #28]
    if (lex->tok_kind == MP_TOKEN_NAME) {
    3d36:	69fb      	ldr	r3, [r7, #28]
    3d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3d3a:	2b07      	cmp	r3, #7
    3d3c:	d10f      	bne.n	3d5e <push_result_token+0x3a>
        qstr id = qstr_from_strn(lex->vstr.buf, lex->vstr.len);
    3d3e:	69fb      	ldr	r3, [r7, #28]
    3d40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3d42:	69fb      	ldr	r3, [r7, #28]
    3d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3d46:	4619      	mov	r1, r3
    3d48:	4610      	mov	r0, r2
    3d4a:	f7fd f977 	bl	103c <qstr_from_strn>
    3d4e:	61b8      	str	r0, [r7, #24]
        } else {
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_ID, id);
        }
        #else
        (void)rule_id;
        pn = mp_parse_node_new_leaf(MP_PARSE_NODE_ID, id);
    3d50:	69bb      	ldr	r3, [r7, #24]
    3d52:	4619      	mov	r1, r3
    3d54:	2002      	movs	r0, #2
    3d56:	f7ff fd4f 	bl	37f8 <mp_parse_node_new_leaf>
    3d5a:	6278      	str	r0, [r7, #36]	; 0x24
    3d5c:	e08a      	b.n	3e74 <push_result_token+0x150>
        #endif
    } else if (lex->tok_kind == MP_TOKEN_INTEGER) {
    3d5e:	69fb      	ldr	r3, [r7, #28]
    3d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3d62:	2b08      	cmp	r3, #8
    3d64:	d11d      	bne.n	3da2 <push_result_token+0x7e>
        mp_obj_t o = mp_parse_num_integer(lex->vstr.buf, lex->vstr.len, 0, lex);
    3d66:	69fb      	ldr	r3, [r7, #28]
    3d68:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    3d6a:	69fb      	ldr	r3, [r7, #28]
    3d6c:	6c99      	ldr	r1, [r3, #72]	; 0x48
    3d6e:	69fb      	ldr	r3, [r7, #28]
    3d70:	2200      	movs	r2, #0
    3d72:	f007 f955 	bl	b020 <mp_parse_num_integer>
    3d76:	6178      	str	r0, [r7, #20]
        if (MP_OBJ_IS_SMALL_INT(o)) {
    3d78:	6978      	ldr	r0, [r7, #20]
    3d7a:	f7ff fd0b 	bl	3794 <MP_OBJ_IS_SMALL_INT>
    3d7e:	4603      	mov	r3, r0
    3d80:	2b00      	cmp	r3, #0
    3d82:	d005      	beq.n	3d90 <push_result_token+0x6c>
            pn = mp_parse_node_new_small_int_checked(parser, o);
    3d84:	6979      	ldr	r1, [r7, #20]
    3d86:	6878      	ldr	r0, [r7, #4]
    3d88:	f7ff ffbc 	bl	3d04 <mp_parse_node_new_small_int_checked>
    3d8c:	6278      	str	r0, [r7, #36]	; 0x24
    3d8e:	e071      	b.n	3e74 <push_result_token+0x150>
        } else {
            pn = make_node_const_object(parser, lex->tok_line, o);
    3d90:	69fb      	ldr	r3, [r7, #28]
    3d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3d94:	697a      	ldr	r2, [r7, #20]
    3d96:	4619      	mov	r1, r3
    3d98:	6878      	ldr	r0, [r7, #4]
    3d9a:	f7ff ff99 	bl	3cd0 <make_node_const_object>
    3d9e:	6278      	str	r0, [r7, #36]	; 0x24
    3da0:	e068      	b.n	3e74 <push_result_token+0x150>
        }
    } else if (lex->tok_kind == MP_TOKEN_FLOAT_OR_IMAG) {
    3da2:	69fb      	ldr	r3, [r7, #28]
    3da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3da6:	2b09      	cmp	r3, #9
    3da8:	d113      	bne.n	3dd2 <push_result_token+0xae>
        mp_obj_t o = mp_parse_num_decimal(lex->vstr.buf, lex->vstr.len, true, false, lex);
    3daa:	69fb      	ldr	r3, [r7, #28]
    3dac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    3dae:	69fb      	ldr	r3, [r7, #28]
    3db0:	6c99      	ldr	r1, [r3, #72]	; 0x48
    3db2:	69fb      	ldr	r3, [r7, #28]
    3db4:	9300      	str	r3, [sp, #0]
    3db6:	2300      	movs	r3, #0
    3db8:	2201      	movs	r2, #1
    3dba:	f007 fa13 	bl	b1e4 <mp_parse_num_decimal>
    3dbe:	6138      	str	r0, [r7, #16]
        pn = make_node_const_object(parser, lex->tok_line, o);
    3dc0:	69fb      	ldr	r3, [r7, #28]
    3dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3dc4:	693a      	ldr	r2, [r7, #16]
    3dc6:	4619      	mov	r1, r3
    3dc8:	6878      	ldr	r0, [r7, #4]
    3dca:	f7ff ff81 	bl	3cd0 <make_node_const_object>
    3dce:	6278      	str	r0, [r7, #36]	; 0x24
    3dd0:	e050      	b.n	3e74 <push_result_token+0x150>
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    3dd2:	69fb      	ldr	r3, [r7, #28]
    3dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3dd6:	2b0a      	cmp	r3, #10
    3dd8:	d003      	beq.n	3de2 <push_result_token+0xbe>
    3dda:	69fb      	ldr	r3, [r7, #28]
    3ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3dde:	2b0b      	cmp	r3, #11
    3de0:	d141      	bne.n	3e66 <push_result_token+0x142>
        // Don't automatically intern all strings/bytes.  doc strings (which are usually large)
        // will be discarded by the compiler, and so we shouldn't intern them.
        qstr qst = MP_QSTR_NULL;
    3de2:	2300      	movs	r3, #0
    3de4:	623b      	str	r3, [r7, #32]
        if (lex->vstr.len <= MICROPY_ALLOC_PARSE_INTERN_STRING_LEN) {
    3de6:	69fb      	ldr	r3, [r7, #28]
    3de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3dea:	2b0a      	cmp	r3, #10
    3dec:	d809      	bhi.n	3e02 <push_result_token+0xde>
            // intern short strings
            qst = qstr_from_strn(lex->vstr.buf, lex->vstr.len);
    3dee:	69fb      	ldr	r3, [r7, #28]
    3df0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3df2:	69fb      	ldr	r3, [r7, #28]
    3df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3df6:	4619      	mov	r1, r3
    3df8:	4610      	mov	r0, r2
    3dfa:	f7fd f91f 	bl	103c <qstr_from_strn>
    3dfe:	6238      	str	r0, [r7, #32]
    3e00:	e008      	b.n	3e14 <push_result_token+0xf0>
        } else {
            // check if this string is already interned
            qst = qstr_find_strn(lex->vstr.buf, lex->vstr.len);
    3e02:	69fb      	ldr	r3, [r7, #28]
    3e04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3e06:	69fb      	ldr	r3, [r7, #28]
    3e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3e0a:	4619      	mov	r1, r3
    3e0c:	4610      	mov	r0, r2
    3e0e:	f7fd f8b1 	bl	f74 <qstr_find_strn>
    3e12:	6238      	str	r0, [r7, #32]
        }
        if (qst != MP_QSTR_NULL) {
    3e14:	6a3b      	ldr	r3, [r7, #32]
    3e16:	2b00      	cmp	r3, #0
    3e18:	d00d      	beq.n	3e36 <push_result_token+0x112>
            // qstr exists, make a leaf node
            pn = mp_parse_node_new_leaf(lex->tok_kind == MP_TOKEN_STRING ? MP_PARSE_NODE_STRING : MP_PARSE_NODE_BYTES, qst);
    3e1a:	69fb      	ldr	r3, [r7, #28]
    3e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3e1e:	2b0a      	cmp	r3, #10
    3e20:	d101      	bne.n	3e26 <push_result_token+0x102>
    3e22:	2306      	movs	r3, #6
    3e24:	e000      	b.n	3e28 <push_result_token+0x104>
    3e26:	230a      	movs	r3, #10
    3e28:	6a3a      	ldr	r2, [r7, #32]
    3e2a:	4611      	mov	r1, r2
    3e2c:	4618      	mov	r0, r3
    3e2e:	f7ff fce3 	bl	37f8 <mp_parse_node_new_leaf>
    3e32:	6278      	str	r0, [r7, #36]	; 0x24
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    3e34:	e01e      	b.n	3e74 <push_result_token+0x150>
        } else {
            // not interned, make a node holding a pointer to the string/bytes object
            mp_obj_t o = mp_obj_new_str_copy(
                lex->tok_kind == MP_TOKEN_STRING ? &mp_type_str : &mp_type_bytes,
    3e36:	69fb      	ldr	r3, [r7, #28]
    3e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            mp_obj_t o = mp_obj_new_str_copy(
    3e3a:	2b0a      	cmp	r3, #10
    3e3c:	d101      	bne.n	3e42 <push_result_token+0x11e>
    3e3e:	4811      	ldr	r0, [pc, #68]	; (3e84 <push_result_token+0x160>)
    3e40:	e000      	b.n	3e44 <push_result_token+0x120>
    3e42:	4811      	ldr	r0, [pc, #68]	; (3e88 <push_result_token+0x164>)
                (const byte*)lex->vstr.buf, lex->vstr.len);
    3e44:	69fb      	ldr	r3, [r7, #28]
    3e46:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
            mp_obj_t o = mp_obj_new_str_copy(
    3e48:	69fb      	ldr	r3, [r7, #28]
    3e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3e4c:	461a      	mov	r2, r3
    3e4e:	f011 fa07 	bl	15260 <mp_obj_new_str_copy>
    3e52:	60f8      	str	r0, [r7, #12]
            pn = make_node_const_object(parser, lex->tok_line, o);
    3e54:	69fb      	ldr	r3, [r7, #28]
    3e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3e58:	68fa      	ldr	r2, [r7, #12]
    3e5a:	4619      	mov	r1, r3
    3e5c:	6878      	ldr	r0, [r7, #4]
    3e5e:	f7ff ff37 	bl	3cd0 <make_node_const_object>
    3e62:	6278      	str	r0, [r7, #36]	; 0x24
    } else if (lex->tok_kind == MP_TOKEN_STRING || lex->tok_kind == MP_TOKEN_BYTES) {
    3e64:	e006      	b.n	3e74 <push_result_token+0x150>
        }
    } else {
        pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, lex->tok_kind);
    3e66:	69fb      	ldr	r3, [r7, #28]
    3e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3e6a:	4619      	mov	r1, r3
    3e6c:	200e      	movs	r0, #14
    3e6e:	f7ff fcc3 	bl	37f8 <mp_parse_node_new_leaf>
    3e72:	6278      	str	r0, [r7, #36]	; 0x24
    }
    push_result_node(parser, pn);
    3e74:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3e76:	6878      	ldr	r0, [r7, #4]
    3e78:	f7ff fefc 	bl	3c74 <push_result_node>
}
    3e7c:	bf00      	nop
    3e7e:	3728      	adds	r7, #40	; 0x28
    3e80:	46bd      	mov	sp, r7
    3e82:	bd80      	pop	{r7, pc}
    3e84:	00021be4 	.word	0x00021be4
    3e88:	00021c20 	.word	0x00021c20

00003e8c <fold_logical_constants>:
#endif

STATIC void push_result_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t num_args);

#if MICROPY_COMP_CONST_FOLDING
STATIC bool fold_logical_constants(parser_t *parser, uint8_t rule_id, size_t *num_args) {
    3e8c:	b580      	push	{r7, lr}
    3e8e:	b08a      	sub	sp, #40	; 0x28
    3e90:	af00      	add	r7, sp, #0
    3e92:	60f8      	str	r0, [r7, #12]
    3e94:	460b      	mov	r3, r1
    3e96:	607a      	str	r2, [r7, #4]
    3e98:	72fb      	strb	r3, [r7, #11]
    if (rule_id == RULE_or_test
    3e9a:	7afb      	ldrb	r3, [r7, #11]
    3e9c:	2b1c      	cmp	r3, #28
    3e9e:	d002      	beq.n	3ea6 <fold_logical_constants+0x1a>
        || rule_id == RULE_and_test) {
    3ea0:	7afb      	ldrb	r3, [r7, #11]
    3ea2:	2b1d      	cmp	r3, #29
    3ea4:	d169      	bne.n	3f7a <fold_logical_constants+0xee>
        // folding for binary logical ops: or and
        size_t copy_to = *num_args;
    3ea6:	687b      	ldr	r3, [r7, #4]
    3ea8:	681b      	ldr	r3, [r3, #0]
    3eaa:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = copy_to; i > 0;) {
    3eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3eae:	623b      	str	r3, [r7, #32]
    3eb0:	e03c      	b.n	3f2c <fold_logical_constants+0xa0>
            mp_parse_node_t pn = peek_result(parser, --i);
    3eb2:	6a3b      	ldr	r3, [r7, #32]
    3eb4:	3b01      	subs	r3, #1
    3eb6:	623b      	str	r3, [r7, #32]
    3eb8:	6a39      	ldr	r1, [r7, #32]
    3eba:	68f8      	ldr	r0, [r7, #12]
    3ebc:	f7ff feb2 	bl	3c24 <peek_result>
    3ec0:	6178      	str	r0, [r7, #20]
            parser->result_stack[parser->result_stack_top - copy_to] = pn;
    3ec2:	68fb      	ldr	r3, [r7, #12]
    3ec4:	695a      	ldr	r2, [r3, #20]
    3ec6:	68fb      	ldr	r3, [r7, #12]
    3ec8:	6919      	ldr	r1, [r3, #16]
    3eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3ecc:	1acb      	subs	r3, r1, r3
    3ece:	009b      	lsls	r3, r3, #2
    3ed0:	4413      	add	r3, r2
    3ed2:	697a      	ldr	r2, [r7, #20]
    3ed4:	601a      	str	r2, [r3, #0]
            if (i == 0) {
    3ed6:	6a3b      	ldr	r3, [r7, #32]
    3ed8:	2b00      	cmp	r3, #0
    3eda:	d02b      	beq.n	3f34 <fold_logical_constants+0xa8>
                // always need to keep the last value
                break;
            }
            if (rule_id == RULE_or_test) {
    3edc:	7afb      	ldrb	r3, [r7, #11]
    3ede:	2b1c      	cmp	r3, #28
    3ee0:	d112      	bne.n	3f08 <fold_logical_constants+0x7c>
                if (mp_parse_node_is_const_true(pn)) {
    3ee2:	6978      	ldr	r0, [r7, #20]
    3ee4:	f7ff fddc 	bl	3aa0 <mp_parse_node_is_const_true>
    3ee8:	4603      	mov	r3, r0
    3eea:	2b00      	cmp	r3, #0
    3eec:	d124      	bne.n	3f38 <fold_logical_constants+0xac>
                    //
                    break;
                } else if (!mp_parse_node_is_const_false(pn)) {
    3eee:	6978      	ldr	r0, [r7, #20]
    3ef0:	f7ff fdba 	bl	3a68 <mp_parse_node_is_const_false>
    3ef4:	4603      	mov	r3, r0
    3ef6:	f083 0301 	eor.w	r3, r3, #1
    3efa:	b2db      	uxtb	r3, r3
    3efc:	2b00      	cmp	r3, #0
    3efe:	d015      	beq.n	3f2c <fold_logical_constants+0xa0>
                    copy_to -= 1;
    3f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f02:	3b01      	subs	r3, #1
    3f04:	627b      	str	r3, [r7, #36]	; 0x24
    3f06:	e011      	b.n	3f2c <fold_logical_constants+0xa0>
                }
            } else {
                // RULE_and_test
                if (mp_parse_node_is_const_false(pn)) {
    3f08:	6978      	ldr	r0, [r7, #20]
    3f0a:	f7ff fdad 	bl	3a68 <mp_parse_node_is_const_false>
    3f0e:	4603      	mov	r3, r0
    3f10:	2b00      	cmp	r3, #0
    3f12:	d113      	bne.n	3f3c <fold_logical_constants+0xb0>
                    break;
                } else if (!mp_parse_node_is_const_true(pn)) {
    3f14:	6978      	ldr	r0, [r7, #20]
    3f16:	f7ff fdc3 	bl	3aa0 <mp_parse_node_is_const_true>
    3f1a:	4603      	mov	r3, r0
    3f1c:	f083 0301 	eor.w	r3, r3, #1
    3f20:	b2db      	uxtb	r3, r3
    3f22:	2b00      	cmp	r3, #0
    3f24:	d002      	beq.n	3f2c <fold_logical_constants+0xa0>
                    copy_to -= 1;
    3f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f28:	3b01      	subs	r3, #1
    3f2a:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = copy_to; i > 0;) {
    3f2c:	6a3b      	ldr	r3, [r7, #32]
    3f2e:	2b00      	cmp	r3, #0
    3f30:	d1bf      	bne.n	3eb2 <fold_logical_constants+0x26>
    3f32:	e004      	b.n	3f3e <fold_logical_constants+0xb2>
                break;
    3f34:	bf00      	nop
    3f36:	e002      	b.n	3f3e <fold_logical_constants+0xb2>
                    break;
    3f38:	bf00      	nop
    3f3a:	e000      	b.n	3f3e <fold_logical_constants+0xb2>
                    break;
    3f3c:	bf00      	nop
                }
            }
        }
        copy_to -= 1; // copy_to now contains number of args to pop
    3f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f40:	3b01      	subs	r3, #1
    3f42:	627b      	str	r3, [r7, #36]	; 0x24

        // pop and discard all the short-circuited expressions
        for (size_t i = 0; i < copy_to; ++i) {
    3f44:	2300      	movs	r3, #0
    3f46:	61fb      	str	r3, [r7, #28]
    3f48:	e005      	b.n	3f56 <fold_logical_constants+0xca>
            pop_result(parser);
    3f4a:	68f8      	ldr	r0, [r7, #12]
    3f4c:	f7ff fe44 	bl	3bd8 <pop_result>
        for (size_t i = 0; i < copy_to; ++i) {
    3f50:	69fb      	ldr	r3, [r7, #28]
    3f52:	3301      	adds	r3, #1
    3f54:	61fb      	str	r3, [r7, #28]
    3f56:	69fa      	ldr	r2, [r7, #28]
    3f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f5a:	429a      	cmp	r2, r3
    3f5c:	d3f5      	bcc.n	3f4a <fold_logical_constants+0xbe>
        }
        *num_args -= copy_to;
    3f5e:	687b      	ldr	r3, [r7, #4]
    3f60:	681a      	ldr	r2, [r3, #0]
    3f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f64:	1ad2      	subs	r2, r2, r3
    3f66:	687b      	ldr	r3, [r7, #4]
    3f68:	601a      	str	r2, [r3, #0]

        // we did a complete folding if there's only 1 arg left
        return *num_args == 1;
    3f6a:	687b      	ldr	r3, [r7, #4]
    3f6c:	681b      	ldr	r3, [r3, #0]
    3f6e:	2b01      	cmp	r3, #1
    3f70:	bf0c      	ite	eq
    3f72:	2301      	moveq	r3, #1
    3f74:	2300      	movne	r3, #0
    3f76:	b2db      	uxtb	r3, r3
    3f78:	e02b      	b.n	3fd2 <fold_logical_constants+0x146>

    } else if (rule_id == RULE_not_test_2) {
    3f7a:	7afb      	ldrb	r3, [r7, #11]
    3f7c:	2b1e      	cmp	r3, #30
    3f7e:	d127      	bne.n	3fd0 <fold_logical_constants+0x144>
        // folding for unary logical op: not
        mp_parse_node_t pn = peek_result(parser, 0);
    3f80:	2100      	movs	r1, #0
    3f82:	68f8      	ldr	r0, [r7, #12]
    3f84:	f7ff fe4e 	bl	3c24 <peek_result>
    3f88:	61b8      	str	r0, [r7, #24]
        if (mp_parse_node_is_const_false(pn)) {
    3f8a:	69b8      	ldr	r0, [r7, #24]
    3f8c:	f7ff fd6c 	bl	3a68 <mp_parse_node_is_const_false>
    3f90:	4603      	mov	r3, r0
    3f92:	2b00      	cmp	r3, #0
    3f94:	d005      	beq.n	3fa2 <fold_logical_constants+0x116>
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, MP_TOKEN_KW_TRUE);
    3f96:	210f      	movs	r1, #15
    3f98:	200e      	movs	r0, #14
    3f9a:	f7ff fc2d 	bl	37f8 <mp_parse_node_new_leaf>
    3f9e:	61b8      	str	r0, [r7, #24]
    3fa0:	e00d      	b.n	3fbe <fold_logical_constants+0x132>
        } else if (mp_parse_node_is_const_true(pn)) {
    3fa2:	69b8      	ldr	r0, [r7, #24]
    3fa4:	f7ff fd7c 	bl	3aa0 <mp_parse_node_is_const_true>
    3fa8:	4603      	mov	r3, r0
    3faa:	2b00      	cmp	r3, #0
    3fac:	d005      	beq.n	3fba <fold_logical_constants+0x12e>
            pn = mp_parse_node_new_leaf(MP_PARSE_NODE_TOKEN, MP_TOKEN_KW_FALSE);
    3fae:	210d      	movs	r1, #13
    3fb0:	200e      	movs	r0, #14
    3fb2:	f7ff fc21 	bl	37f8 <mp_parse_node_new_leaf>
    3fb6:	61b8      	str	r0, [r7, #24]
    3fb8:	e001      	b.n	3fbe <fold_logical_constants+0x132>
        } else {
            return false;
    3fba:	2300      	movs	r3, #0
    3fbc:	e009      	b.n	3fd2 <fold_logical_constants+0x146>
        }
        pop_result(parser);
    3fbe:	68f8      	ldr	r0, [r7, #12]
    3fc0:	f7ff fe0a 	bl	3bd8 <pop_result>
        push_result_node(parser, pn);
    3fc4:	69b9      	ldr	r1, [r7, #24]
    3fc6:	68f8      	ldr	r0, [r7, #12]
    3fc8:	f7ff fe54 	bl	3c74 <push_result_node>
        return true;
    3fcc:	2301      	movs	r3, #1
    3fce:	e000      	b.n	3fd2 <fold_logical_constants+0x146>
    }

    return false;
    3fd0:	2300      	movs	r3, #0
}
    3fd2:	4618      	mov	r0, r3
    3fd4:	3728      	adds	r7, #40	; 0x28
    3fd6:	46bd      	mov	sp, r7
    3fd8:	bd80      	pop	{r7, pc}
    3fda:	bf00      	nop

00003fdc <fold_constants>:

STATIC bool fold_constants(parser_t *parser, uint8_t rule_id, size_t num_args) {
    3fdc:	b580      	push	{r7, lr}
    3fde:	b094      	sub	sp, #80	; 0x50
    3fe0:	af00      	add	r7, sp, #0
    3fe2:	60f8      	str	r0, [r7, #12]
    3fe4:	460b      	mov	r3, r1
    3fe6:	607a      	str	r2, [r7, #4]
    3fe8:	72fb      	strb	r3, [r7, #11]
    // this code does folding of arbitrary integer expressions, eg 1 + 2 * 3 + 4
    // it does not do partial folding, eg 1 + 2 + x -> 3 + x

    mp_obj_t arg0;
    if (rule_id == RULE_expr
    3fea:	7afb      	ldrb	r3, [r7, #11]
    3fec:	2b21      	cmp	r3, #33	; 0x21
    3fee:	d005      	beq.n	3ffc <fold_constants+0x20>
        || rule_id == RULE_xor_expr
    3ff0:	7afb      	ldrb	r3, [r7, #11]
    3ff2:	2b22      	cmp	r3, #34	; 0x22
    3ff4:	d002      	beq.n	3ffc <fold_constants+0x20>
        || rule_id == RULE_and_expr) {
    3ff6:	7afb      	ldrb	r3, [r7, #11]
    3ff8:	2b23      	cmp	r3, #35	; 0x23
    3ffa:	d149      	bne.n	4090 <fold_constants+0xb4>
        // folding for binary ops: | ^ &
        mp_parse_node_t pn = peek_result(parser, num_args - 1);
    3ffc:	687b      	ldr	r3, [r7, #4]
    3ffe:	3b01      	subs	r3, #1
    4000:	4619      	mov	r1, r3
    4002:	68f8      	ldr	r0, [r7, #12]
    4004:	f7ff fe0e 	bl	3c24 <peek_result>
    4008:	6238      	str	r0, [r7, #32]
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    400a:	f107 031c 	add.w	r3, r7, #28
    400e:	4619      	mov	r1, r3
    4010:	6a38      	ldr	r0, [r7, #32]
    4012:	f7ff fd61 	bl	3ad8 <mp_parse_node_get_int_maybe>
    4016:	4603      	mov	r3, r0
    4018:	f083 0301 	eor.w	r3, r3, #1
    401c:	b2db      	uxtb	r3, r3
    401e:	2b00      	cmp	r3, #0
    4020:	d001      	beq.n	4026 <fold_constants+0x4a>
            return false;
    4022:	2300      	movs	r3, #0
    4024:	e10a      	b.n	423c <fold_constants+0x260>
        }
        mp_binary_op_t op;
        if (rule_id == RULE_expr) {
    4026:	7afb      	ldrb	r3, [r7, #11]
    4028:	2b21      	cmp	r3, #33	; 0x21
    402a:	d102      	bne.n	4032 <fold_constants+0x56>
            op = MP_BINARY_OP_OR;
    402c:	2315      	movs	r3, #21
    402e:	64fb      	str	r3, [r7, #76]	; 0x4c
    4030:	e007      	b.n	4042 <fold_constants+0x66>
        } else if (rule_id == RULE_xor_expr) {
    4032:	7afb      	ldrb	r3, [r7, #11]
    4034:	2b22      	cmp	r3, #34	; 0x22
    4036:	d102      	bne.n	403e <fold_constants+0x62>
            op = MP_BINARY_OP_XOR;
    4038:	2316      	movs	r3, #22
    403a:	64fb      	str	r3, [r7, #76]	; 0x4c
    403c:	e001      	b.n	4042 <fold_constants+0x66>
        } else {
            op = MP_BINARY_OP_AND;
    403e:	2317      	movs	r3, #23
    4040:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        for (ssize_t i = num_args - 2; i >= 0; --i) {
    4042:	687b      	ldr	r3, [r7, #4]
    4044:	3b02      	subs	r3, #2
    4046:	64bb      	str	r3, [r7, #72]	; 0x48
    4048:	e01e      	b.n	4088 <fold_constants+0xac>
            pn = peek_result(parser, i);
    404a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    404c:	4619      	mov	r1, r3
    404e:	68f8      	ldr	r0, [r7, #12]
    4050:	f7ff fde8 	bl	3c24 <peek_result>
    4054:	6238      	str	r0, [r7, #32]
            mp_obj_t arg1;
            if (!mp_parse_node_get_int_maybe(pn, &arg1)) {
    4056:	f107 0318 	add.w	r3, r7, #24
    405a:	4619      	mov	r1, r3
    405c:	6a38      	ldr	r0, [r7, #32]
    405e:	f7ff fd3b 	bl	3ad8 <mp_parse_node_get_int_maybe>
    4062:	4603      	mov	r3, r0
    4064:	f083 0301 	eor.w	r3, r3, #1
    4068:	b2db      	uxtb	r3, r3
    406a:	2b00      	cmp	r3, #0
    406c:	d001      	beq.n	4072 <fold_constants+0x96>
                return false;
    406e:	2300      	movs	r3, #0
    4070:	e0e4      	b.n	423c <fold_constants+0x260>
            }
            arg0 = mp_binary_op(op, arg0, arg1);
    4072:	69fb      	ldr	r3, [r7, #28]
    4074:	69ba      	ldr	r2, [r7, #24]
    4076:	4619      	mov	r1, r3
    4078:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    407a:	f007 fc59 	bl	b930 <mp_binary_op>
    407e:	4603      	mov	r3, r0
    4080:	61fb      	str	r3, [r7, #28]
        for (ssize_t i = num_args - 2; i >= 0; --i) {
    4082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4084:	3b01      	subs	r3, #1
    4086:	64bb      	str	r3, [r7, #72]	; 0x48
    4088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    408a:	2b00      	cmp	r3, #0
    408c:	dadd      	bge.n	404a <fold_constants+0x6e>
        || rule_id == RULE_and_expr) {
    408e:	e0ab      	b.n	41e8 <fold_constants+0x20c>
        }
    } else if (rule_id == RULE_shift_expr
    4090:	7afb      	ldrb	r3, [r7, #11]
    4092:	2b24      	cmp	r3, #36	; 0x24
    4094:	d005      	beq.n	40a2 <fold_constants+0xc6>
        || rule_id == RULE_arith_expr
    4096:	7afb      	ldrb	r3, [r7, #11]
    4098:	2b25      	cmp	r3, #37	; 0x25
    409a:	d002      	beq.n	40a2 <fold_constants+0xc6>
        || rule_id == RULE_term) {
    409c:	7afb      	ldrb	r3, [r7, #11]
    409e:	2b26      	cmp	r3, #38	; 0x26
    40a0:	d163      	bne.n	416a <fold_constants+0x18e>
        // folding for binary ops: << >> + - * / % //
        mp_parse_node_t pn = peek_result(parser, num_args - 1);
    40a2:	687b      	ldr	r3, [r7, #4]
    40a4:	3b01      	subs	r3, #1
    40a6:	4619      	mov	r1, r3
    40a8:	68f8      	ldr	r0, [r7, #12]
    40aa:	f7ff fdbb 	bl	3c24 <peek_result>
    40ae:	6338      	str	r0, [r7, #48]	; 0x30
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    40b0:	f107 031c 	add.w	r3, r7, #28
    40b4:	4619      	mov	r1, r3
    40b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
    40b8:	f7ff fd0e 	bl	3ad8 <mp_parse_node_get_int_maybe>
    40bc:	4603      	mov	r3, r0
    40be:	f083 0301 	eor.w	r3, r3, #1
    40c2:	b2db      	uxtb	r3, r3
    40c4:	2b00      	cmp	r3, #0
    40c6:	d001      	beq.n	40cc <fold_constants+0xf0>
            return false;
    40c8:	2300      	movs	r3, #0
    40ca:	e0b7      	b.n	423c <fold_constants+0x260>
        }
        for (ssize_t i = num_args - 2; i >= 1; i -= 2) {
    40cc:	687b      	ldr	r3, [r7, #4]
    40ce:	3b02      	subs	r3, #2
    40d0:	647b      	str	r3, [r7, #68]	; 0x44
    40d2:	e046      	b.n	4162 <fold_constants+0x186>
            pn = peek_result(parser, i - 1);
    40d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    40d6:	3b01      	subs	r3, #1
    40d8:	4619      	mov	r1, r3
    40da:	68f8      	ldr	r0, [r7, #12]
    40dc:	f7ff fda2 	bl	3c24 <peek_result>
    40e0:	6338      	str	r0, [r7, #48]	; 0x30
            mp_obj_t arg1;
            if (!mp_parse_node_get_int_maybe(pn, &arg1)) {
    40e2:	f107 0314 	add.w	r3, r7, #20
    40e6:	4619      	mov	r1, r3
    40e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
    40ea:	f7ff fcf5 	bl	3ad8 <mp_parse_node_get_int_maybe>
    40ee:	4603      	mov	r3, r0
    40f0:	f083 0301 	eor.w	r3, r3, #1
    40f4:	b2db      	uxtb	r3, r3
    40f6:	2b00      	cmp	r3, #0
    40f8:	d001      	beq.n	40fe <fold_constants+0x122>
                return false;
    40fa:	2300      	movs	r3, #0
    40fc:	e09e      	b.n	423c <fold_constants+0x260>
            }
            mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(peek_result(parser, i));
    40fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4100:	4619      	mov	r1, r3
    4102:	68f8      	ldr	r0, [r7, #12]
    4104:	f7ff fd8e 	bl	3c24 <peek_result>
    4108:	4603      	mov	r3, r0
    410a:	091b      	lsrs	r3, r3, #4
    410c:	62fb      	str	r3, [r7, #44]	; 0x2c
                255,//MP_BINARY_OP_LESS
                MP_BINARY_OP_LSHIFT,
                255,//MP_BINARY_OP_MORE
                MP_BINARY_OP_RSHIFT,
            };
            mp_binary_op_t op = token_to_op[tok - MP_TOKEN_OP_PLUS];
    410e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4110:	3b2f      	subs	r3, #47	; 0x2f
    4112:	4a4c      	ldr	r2, [pc, #304]	; (4244 <fold_constants+0x268>)
    4114:	5cd3      	ldrb	r3, [r2, r3]
    4116:	62bb      	str	r3, [r7, #40]	; 0x28
            if (op == (mp_binary_op_t)255) {
    4118:	6abb      	ldr	r3, [r7, #40]	; 0x28
    411a:	2bff      	cmp	r3, #255	; 0xff
    411c:	d101      	bne.n	4122 <fold_constants+0x146>
                return false;
    411e:	2300      	movs	r3, #0
    4120:	e08c      	b.n	423c <fold_constants+0x260>
            }
            int rhs_sign = mp_obj_int_sign(arg1);
    4122:	697b      	ldr	r3, [r7, #20]
    4124:	4618      	mov	r0, r3
    4126:	f00c fb97 	bl	10858 <mp_obj_int_sign>
    412a:	6278      	str	r0, [r7, #36]	; 0x24
            if (op <= MP_BINARY_OP_RSHIFT) {
    412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    412e:	2b19      	cmp	r3, #25
    4130:	d804      	bhi.n	413c <fold_constants+0x160>
                // << and >> can't have negative rhs
                if (rhs_sign < 0) {
    4132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4134:	2b00      	cmp	r3, #0
    4136:	da09      	bge.n	414c <fold_constants+0x170>
                    return false;
    4138:	2300      	movs	r3, #0
    413a:	e07f      	b.n	423c <fold_constants+0x260>
                }
            } else if (op >= MP_BINARY_OP_FLOOR_DIVIDE) {
    413c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    413e:	2b1c      	cmp	r3, #28
    4140:	d904      	bls.n	414c <fold_constants+0x170>
                // % and // can't have zero rhs
                if (rhs_sign == 0) {
    4142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4144:	2b00      	cmp	r3, #0
    4146:	d101      	bne.n	414c <fold_constants+0x170>
                    return false;
    4148:	2300      	movs	r3, #0
    414a:	e077      	b.n	423c <fold_constants+0x260>
                }
            }
            arg0 = mp_binary_op(op, arg0, arg1);
    414c:	69fb      	ldr	r3, [r7, #28]
    414e:	697a      	ldr	r2, [r7, #20]
    4150:	4619      	mov	r1, r3
    4152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    4154:	f007 fbec 	bl	b930 <mp_binary_op>
    4158:	4603      	mov	r3, r0
    415a:	61fb      	str	r3, [r7, #28]
        for (ssize_t i = num_args - 2; i >= 1; i -= 2) {
    415c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    415e:	3b02      	subs	r3, #2
    4160:	647b      	str	r3, [r7, #68]	; 0x44
    4162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4164:	2b00      	cmp	r3, #0
    4166:	dcb5      	bgt.n	40d4 <fold_constants+0xf8>
        || rule_id == RULE_term) {
    4168:	e03e      	b.n	41e8 <fold_constants+0x20c>
        }
    } else if (rule_id == RULE_factor_2) {
    416a:	7afb      	ldrb	r3, [r7, #11]
    416c:	2b27      	cmp	r3, #39	; 0x27
    416e:	d139      	bne.n	41e4 <fold_constants+0x208>
        // folding for unary ops: + - ~
        mp_parse_node_t pn = peek_result(parser, 0);
    4170:	2100      	movs	r1, #0
    4172:	68f8      	ldr	r0, [r7, #12]
    4174:	f7ff fd56 	bl	3c24 <peek_result>
    4178:	63b8      	str	r0, [r7, #56]	; 0x38
        if (!mp_parse_node_get_int_maybe(pn, &arg0)) {
    417a:	f107 031c 	add.w	r3, r7, #28
    417e:	4619      	mov	r1, r3
    4180:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    4182:	f7ff fca9 	bl	3ad8 <mp_parse_node_get_int_maybe>
    4186:	4603      	mov	r3, r0
    4188:	f083 0301 	eor.w	r3, r3, #1
    418c:	b2db      	uxtb	r3, r3
    418e:	2b00      	cmp	r3, #0
    4190:	d001      	beq.n	4196 <fold_constants+0x1ba>
            return false;
    4192:	2300      	movs	r3, #0
    4194:	e052      	b.n	423c <fold_constants+0x260>
        }
        mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(peek_result(parser, 1));
    4196:	2101      	movs	r1, #1
    4198:	68f8      	ldr	r0, [r7, #12]
    419a:	f7ff fd43 	bl	3c24 <peek_result>
    419e:	4603      	mov	r3, r0
    41a0:	091b      	lsrs	r3, r3, #4
    41a2:	637b      	str	r3, [r7, #52]	; 0x34
        mp_unary_op_t op;
        if (tok == MP_TOKEN_OP_PLUS) {
    41a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    41a6:	2b2f      	cmp	r3, #47	; 0x2f
    41a8:	d102      	bne.n	41b0 <fold_constants+0x1d4>
            op = MP_UNARY_OP_POSITIVE;
    41aa:	2300      	movs	r3, #0
    41ac:	643b      	str	r3, [r7, #64]	; 0x40
    41ae:	e011      	b.n	41d4 <fold_constants+0x1f8>
        } else if (tok == MP_TOKEN_OP_MINUS) {
    41b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    41b2:	2b30      	cmp	r3, #48	; 0x30
    41b4:	d102      	bne.n	41bc <fold_constants+0x1e0>
            op = MP_UNARY_OP_NEGATIVE;
    41b6:	2301      	movs	r3, #1
    41b8:	643b      	str	r3, [r7, #64]	; 0x40
    41ba:	e00b      	b.n	41d4 <fold_constants+0x1f8>
        } else {
            assert(tok == MP_TOKEN_OP_TILDE); // should be
    41bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    41be:	2b3d      	cmp	r3, #61	; 0x3d
    41c0:	d006      	beq.n	41d0 <fold_constants+0x1f4>
    41c2:	4b21      	ldr	r3, [pc, #132]	; (4248 <fold_constants+0x26c>)
    41c4:	4a21      	ldr	r2, [pc, #132]	; (424c <fold_constants+0x270>)
    41c6:	f240 21b3 	movw	r1, #691	; 0x2b3
    41ca:	4821      	ldr	r0, [pc, #132]	; (4250 <fold_constants+0x274>)
    41cc:	f017 f8ce 	bl	1b36c <__assert_func>
            op = MP_UNARY_OP_INVERT;
    41d0:	2302      	movs	r3, #2
    41d2:	643b      	str	r3, [r7, #64]	; 0x40
        }
        arg0 = mp_unary_op(op, arg0);
    41d4:	69fb      	ldr	r3, [r7, #28]
    41d6:	4619      	mov	r1, r3
    41d8:	6c38      	ldr	r0, [r7, #64]	; 0x40
    41da:	f007 fac3 	bl	b764 <mp_unary_op>
    41de:	4603      	mov	r3, r0
    41e0:	61fb      	str	r3, [r7, #28]
    41e2:	e001      	b.n	41e8 <fold_constants+0x20c>
        }
        arg0 = dest[0];
    #endif

    } else {
        return false;
    41e4:	2300      	movs	r3, #0
    41e6:	e029      	b.n	423c <fold_constants+0x260>
    }

    // success folding this rule

    for (size_t i = num_args; i > 0; i--) {
    41e8:	687b      	ldr	r3, [r7, #4]
    41ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    41ec:	e005      	b.n	41fa <fold_constants+0x21e>
        pop_result(parser);
    41ee:	68f8      	ldr	r0, [r7, #12]
    41f0:	f7ff fcf2 	bl	3bd8 <pop_result>
    for (size_t i = num_args; i > 0; i--) {
    41f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    41f6:	3b01      	subs	r3, #1
    41f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    41fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    41fc:	2b00      	cmp	r3, #0
    41fe:	d1f6      	bne.n	41ee <fold_constants+0x212>
    }
    if (MP_OBJ_IS_SMALL_INT(arg0)) {
    4200:	69fb      	ldr	r3, [r7, #28]
    4202:	4618      	mov	r0, r3
    4204:	f7ff fac6 	bl	3794 <MP_OBJ_IS_SMALL_INT>
    4208:	4603      	mov	r3, r0
    420a:	2b00      	cmp	r3, #0
    420c:	d00a      	beq.n	4224 <fold_constants+0x248>
        push_result_node(parser, mp_parse_node_new_small_int_checked(parser, arg0));
    420e:	69fb      	ldr	r3, [r7, #28]
    4210:	4619      	mov	r1, r3
    4212:	68f8      	ldr	r0, [r7, #12]
    4214:	f7ff fd76 	bl	3d04 <mp_parse_node_new_small_int_checked>
    4218:	4603      	mov	r3, r0
    421a:	4619      	mov	r1, r3
    421c:	68f8      	ldr	r0, [r7, #12]
    421e:	f7ff fd29 	bl	3c74 <push_result_node>
    4222:	e00a      	b.n	423a <fold_constants+0x25e>
    } else {
        // TODO reuse memory for parse node struct?
        push_result_node(parser, make_node_const_object(parser, 0, arg0));
    4224:	69fb      	ldr	r3, [r7, #28]
    4226:	461a      	mov	r2, r3
    4228:	2100      	movs	r1, #0
    422a:	68f8      	ldr	r0, [r7, #12]
    422c:	f7ff fd50 	bl	3cd0 <make_node_const_object>
    4230:	4603      	mov	r3, r0
    4232:	4619      	mov	r1, r3
    4234:	68f8      	ldr	r0, [r7, #12]
    4236:	f7ff fd1d 	bl	3c74 <push_result_node>
    }

    return true;
    423a:	2301      	movs	r3, #1
}
    423c:	4618      	mov	r0, r3
    423e:	3750      	adds	r7, #80	; 0x50
    4240:	46bd      	mov	sp, r7
    4242:	bd80      	pop	{r7, pc}
    4244:	0001e1f4 	.word	0x0001e1f4
    4248:	0001e0a4 	.word	0x0001e0a4
    424c:	0001e200 	.word	0x0001e200
    4250:	0001e050 	.word	0x0001e050

00004254 <push_result_rule>:
#endif

STATIC void push_result_rule(parser_t *parser, size_t src_line, uint8_t rule_id, size_t num_args) {
    4254:	b590      	push	{r4, r7, lr}
    4256:	b089      	sub	sp, #36	; 0x24
    4258:	af00      	add	r7, sp, #0
    425a:	60f8      	str	r0, [r7, #12]
    425c:	60b9      	str	r1, [r7, #8]
    425e:	603b      	str	r3, [r7, #0]
    4260:	4613      	mov	r3, r2
    4262:	71fb      	strb	r3, [r7, #7]
    // optimise away parenthesis around an expression if possible
    if (rule_id == RULE_atom_paren) {
    4264:	79fb      	ldrb	r3, [r7, #7]
    4266:	2b2a      	cmp	r3, #42	; 0x2a
    4268:	d114      	bne.n	4294 <push_result_rule+0x40>
        // there should be just 1 arg for this rule
        mp_parse_node_t pn = peek_result(parser, 0);
    426a:	2100      	movs	r1, #0
    426c:	68f8      	ldr	r0, [r7, #12]
    426e:	f7ff fcd9 	bl	3c24 <peek_result>
    4272:	61b8      	str	r0, [r7, #24]
        if (MP_PARSE_NODE_IS_NULL(pn)) {
    4274:	69bb      	ldr	r3, [r7, #24]
    4276:	2b00      	cmp	r3, #0
    4278:	d00c      	beq.n	4294 <push_result_rule+0x40>
            // need to keep parenthesis for ()
        } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, RULE_testlist_comp)) {
    427a:	69bb      	ldr	r3, [r7, #24]
    427c:	2b00      	cmp	r3, #0
    427e:	d045      	beq.n	430c <push_result_rule+0xb8>
    4280:	69bb      	ldr	r3, [r7, #24]
    4282:	f003 0303 	and.w	r3, r3, #3
    4286:	2b00      	cmp	r3, #0
    4288:	d140      	bne.n	430c <push_result_rule+0xb8>
    428a:	69bb      	ldr	r3, [r7, #24]
    428c:	685b      	ldr	r3, [r3, #4]
    428e:	b2db      	uxtb	r3, r3
    4290:	2b8a      	cmp	r3, #138	; 0x8a
    4292:	d13b      	bne.n	430c <push_result_rule+0xb8>
            return;
        }
    }

    #if MICROPY_COMP_CONST_FOLDING
    if (fold_logical_constants(parser, rule_id, &num_args)) {
    4294:	463a      	mov	r2, r7
    4296:	79fb      	ldrb	r3, [r7, #7]
    4298:	4619      	mov	r1, r3
    429a:	68f8      	ldr	r0, [r7, #12]
    429c:	f7ff fdf6 	bl	3e8c <fold_logical_constants>
    42a0:	4603      	mov	r3, r0
    42a2:	2b00      	cmp	r3, #0
    42a4:	d134      	bne.n	4310 <push_result_rule+0xbc>
        // we folded this rule so return straight away
        return;
    }
    if (fold_constants(parser, rule_id, num_args)) {
    42a6:	683a      	ldr	r2, [r7, #0]
    42a8:	79fb      	ldrb	r3, [r7, #7]
    42aa:	4619      	mov	r1, r3
    42ac:	68f8      	ldr	r0, [r7, #12]
    42ae:	f7ff fe95 	bl	3fdc <fold_constants>
    42b2:	4603      	mov	r3, r0
    42b4:	2b00      	cmp	r3, #0
    42b6:	d12d      	bne.n	4314 <push_result_rule+0xc0>
        // we folded this rule so return straight away
        return;
    }
    #endif

    mp_parse_node_struct_t *pn = parser_alloc(parser, sizeof(mp_parse_node_struct_t) + sizeof(mp_parse_node_t) * num_args);
    42b8:	683b      	ldr	r3, [r7, #0]
    42ba:	3302      	adds	r3, #2
    42bc:	009b      	lsls	r3, r3, #2
    42be:	4619      	mov	r1, r3
    42c0:	68f8      	ldr	r0, [r7, #12]
    42c2:	f7ff fac9 	bl	3858 <parser_alloc>
    42c6:	6178      	str	r0, [r7, #20]
    pn->source_line = src_line;
    42c8:	697b      	ldr	r3, [r7, #20]
    42ca:	68ba      	ldr	r2, [r7, #8]
    42cc:	601a      	str	r2, [r3, #0]
    pn->kind_num_nodes = (rule_id & 0xff) | (num_args << 8);
    42ce:	79fa      	ldrb	r2, [r7, #7]
    42d0:	683b      	ldr	r3, [r7, #0]
    42d2:	021b      	lsls	r3, r3, #8
    42d4:	431a      	orrs	r2, r3
    42d6:	697b      	ldr	r3, [r7, #20]
    42d8:	605a      	str	r2, [r3, #4]
    for (size_t i = num_args; i > 0; i--) {
    42da:	683b      	ldr	r3, [r7, #0]
    42dc:	61fb      	str	r3, [r7, #28]
    42de:	e00c      	b.n	42fa <push_result_rule+0xa6>
        pn->nodes[i - 1] = pop_result(parser);
    42e0:	69fb      	ldr	r3, [r7, #28]
    42e2:	1e5c      	subs	r4, r3, #1
    42e4:	68f8      	ldr	r0, [r7, #12]
    42e6:	f7ff fc77 	bl	3bd8 <pop_result>
    42ea:	4601      	mov	r1, r0
    42ec:	697b      	ldr	r3, [r7, #20]
    42ee:	1ca2      	adds	r2, r4, #2
    42f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = num_args; i > 0; i--) {
    42f4:	69fb      	ldr	r3, [r7, #28]
    42f6:	3b01      	subs	r3, #1
    42f8:	61fb      	str	r3, [r7, #28]
    42fa:	69fb      	ldr	r3, [r7, #28]
    42fc:	2b00      	cmp	r3, #0
    42fe:	d1ef      	bne.n	42e0 <push_result_rule+0x8c>
    }
    push_result_node(parser, (mp_parse_node_t)pn);
    4300:	697b      	ldr	r3, [r7, #20]
    4302:	4619      	mov	r1, r3
    4304:	68f8      	ldr	r0, [r7, #12]
    4306:	f7ff fcb5 	bl	3c74 <push_result_node>
    430a:	e004      	b.n	4316 <push_result_rule+0xc2>
            return;
    430c:	bf00      	nop
    430e:	e002      	b.n	4316 <push_result_rule+0xc2>
        return;
    4310:	bf00      	nop
    4312:	e000      	b.n	4316 <push_result_rule+0xc2>
        return;
    4314:	bf00      	nop
}
    4316:	3724      	adds	r7, #36	; 0x24
    4318:	46bd      	mov	sp, r7
    431a:	bd90      	pop	{r4, r7, pc}

0000431c <mp_parse>:

mp_parse_tree_t mp_parse(mp_lexer_t *lex, mp_parse_input_kind_t input_kind) {
    431c:	b580      	push	{r7, lr}
    431e:	b0a2      	sub	sp, #136	; 0x88
    4320:	af00      	add	r7, sp, #0
    4322:	60f8      	str	r0, [r7, #12]
    4324:	60b9      	str	r1, [r7, #8]
    4326:	607a      	str	r2, [r7, #4]

    // initialise parser and allocate memory for its stacks

    parser_t parser;

    parser.rule_stack_alloc = MICROPY_ALLOC_PARSE_RULE_INIT;
    4328:	2340      	movs	r3, #64	; 0x40
    432a:	61fb      	str	r3, [r7, #28]
    parser.rule_stack_top = 0;
    432c:	2300      	movs	r3, #0
    432e:	623b      	str	r3, [r7, #32]
    parser.rule_stack = m_new(rule_stack_t, parser.rule_stack_alloc);
    4330:	69fb      	ldr	r3, [r7, #28]
    4332:	00db      	lsls	r3, r3, #3
    4334:	4618      	mov	r0, r3
    4336:	f7fb fff1 	bl	31c <m_malloc>
    433a:	4603      	mov	r3, r0
    433c:	627b      	str	r3, [r7, #36]	; 0x24

    parser.result_stack_alloc = MICROPY_ALLOC_PARSE_RESULT_INIT;
    433e:	2320      	movs	r3, #32
    4340:	62bb      	str	r3, [r7, #40]	; 0x28
    parser.result_stack_top = 0;
    4342:	2300      	movs	r3, #0
    4344:	62fb      	str	r3, [r7, #44]	; 0x2c
    parser.result_stack = m_new(mp_parse_node_t, parser.result_stack_alloc);
    4346:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4348:	009b      	lsls	r3, r3, #2
    434a:	4618      	mov	r0, r3
    434c:	f7fb ffe6 	bl	31c <m_malloc>
    4350:	4603      	mov	r3, r0
    4352:	633b      	str	r3, [r7, #48]	; 0x30

    parser.lexer = lex;
    4354:	68bb      	ldr	r3, [r7, #8]
    4356:	637b      	str	r3, [r7, #52]	; 0x34

    parser.tree.chunk = NULL;
    4358:	2300      	movs	r3, #0
    435a:	63fb      	str	r3, [r7, #60]	; 0x3c
    parser.cur_chunk = NULL;
    435c:	2300      	movs	r3, #0
    435e:	643b      	str	r3, [r7, #64]	; 0x40
    mp_map_init(&parser.consts, 0);
    #endif

    // work out the top-level rule to use, and push it on the stack
    size_t top_level_rule;
    switch (input_kind) {
    4360:	687b      	ldr	r3, [r7, #4]
    4362:	2b00      	cmp	r3, #0
    4364:	d002      	beq.n	436c <mp_parse+0x50>
    4366:	2b02      	cmp	r3, #2
    4368:	d004      	beq.n	4374 <mp_parse+0x58>
    436a:	e007      	b.n	437c <mp_parse+0x60>
        case MP_PARSE_SINGLE_INPUT: top_level_rule = RULE_single_input; break;
    436c:	2336      	movs	r3, #54	; 0x36
    436e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    4372:	e006      	b.n	4382 <mp_parse+0x66>
        case MP_PARSE_EVAL_INPUT: top_level_rule = RULE_eval_input; break;
    4374:	2338      	movs	r3, #56	; 0x38
    4376:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    437a:	e002      	b.n	4382 <mp_parse+0x66>
        default: top_level_rule = RULE_file_input;
    437c:	2300      	movs	r3, #0
    437e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }
    push_rule(&parser, lex->tok_line, top_level_rule, 0);
    4382:	68bb      	ldr	r3, [r7, #8]
    4384:	6b99      	ldr	r1, [r3, #56]	; 0x38
    4386:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    438a:	b2da      	uxtb	r2, r3
    438c:	f107 001c 	add.w	r0, r7, #28
    4390:	2300      	movs	r3, #0
    4392:	f7ff facb 	bl	392c <push_rule>

    // parse!

    bool backtrack = false;
    4396:	2300      	movs	r3, #0
    4398:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

    for (;;) {
        next_rule:
        if (parser.rule_stack_top == 0) {
    439c:	6a3b      	ldr	r3, [r7, #32]
    439e:	2b00      	cmp	r3, #0
    43a0:	d104      	bne.n	43ac <mp_parse+0x90>
    #if MICROPY_COMP_CONST
    mp_map_deinit(&parser.consts);
    #endif

    // truncate final chunk and link into chain of chunks
    if (parser.cur_chunk != NULL) {
    43a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    43a4:	2b00      	cmp	r3, #0
    43a6:	f040 8292 	bne.w	48ce <mp_parse+0x5b2>
    43aa:	e2a1      	b.n	48f0 <mp_parse+0x5d4>
        uint8_t rule_id = pop_rule(&parser, &i, &rule_src_line);
    43ac:	f107 0214 	add.w	r2, r7, #20
    43b0:	f107 0118 	add.w	r1, r7, #24
    43b4:	f107 031c 	add.w	r3, r7, #28
    43b8:	4618      	mov	r0, r3
    43ba:	f7ff fb25 	bl	3a08 <pop_rule>
    43be:	4603      	mov	r3, r0
    43c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        uint8_t rule_act = rule_act_table[rule_id];
    43c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    43c8:	4ab2      	ldr	r2, [pc, #712]	; (4694 <mp_parse+0x378>)
    43ca:	5cd3      	ldrb	r3, [r2, r3]
    43cc:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        const uint16_t *rule_arg = get_rule_arg(rule_id);
    43d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    43d4:	4618      	mov	r0, r3
    43d6:	f7ff fa1f 	bl	3818 <get_rule_arg>
    43da:	6638      	str	r0, [r7, #96]	; 0x60
        size_t n = rule_act & RULE_ACT_ARG_MASK;
    43dc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    43e0:	f003 030f 	and.w	r3, r3, #15
    43e4:	65fb      	str	r3, [r7, #92]	; 0x5c
        switch (rule_act & RULE_ACT_KIND_MASK) {
    43e6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    43ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
    43ee:	2b10      	cmp	r3, #16
    43f0:	d002      	beq.n	43f8 <mp_parse+0xdc>
    43f2:	2b20      	cmp	r3, #32
    43f4:	d067      	beq.n	44c6 <mp_parse+0x1aa>
    43f6:	e1aa      	b.n	474e <mp_parse+0x432>
                if (i > 0 && !backtrack) {
    43f8:	69bb      	ldr	r3, [r7, #24]
    43fa:	2b00      	cmp	r3, #0
    43fc:	d006      	beq.n	440c <mp_parse+0xf0>
    43fe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
    4402:	f083 0301 	eor.w	r3, r3, #1
    4406:	b2db      	uxtb	r3, r3
    4408:	2b00      	cmp	r3, #0
    440a:	d1c7      	bne.n	439c <mp_parse+0x80>
                    backtrack = false;
    440c:	2300      	movs	r3, #0
    440e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                for (; i < n; ++i) {
    4412:	e050      	b.n	44b6 <mp_parse+0x19a>
                    uint16_t kind = rule_arg[i] & RULE_ARG_KIND_MASK;
    4414:	69bb      	ldr	r3, [r7, #24]
    4416:	005b      	lsls	r3, r3, #1
    4418:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    441a:	4413      	add	r3, r2
    441c:	881b      	ldrh	r3, [r3, #0]
    441e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    4422:	f023 030f 	bic.w	r3, r3, #15
    4426:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
                    if (kind == RULE_ARG_TOK) {
    442a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    442e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    4432:	d116      	bne.n	4462 <mp_parse+0x146>
                        if (lex->tok_kind == (rule_arg[i] & RULE_ARG_ARG_MASK)) {
    4434:	68bb      	ldr	r3, [r7, #8]
    4436:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    4438:	69bb      	ldr	r3, [r7, #24]
    443a:	005b      	lsls	r3, r3, #1
    443c:	6e39      	ldr	r1, [r7, #96]	; 0x60
    443e:	440b      	add	r3, r1
    4440:	881b      	ldrh	r3, [r3, #0]
    4442:	f3c3 030b 	ubfx	r3, r3, #0, #12
    4446:	429a      	cmp	r2, r3
    4448:	d132      	bne.n	44b0 <mp_parse+0x194>
                            push_result_token(&parser, rule_id);
    444a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    444e:	f107 031c 	add.w	r3, r7, #28
    4452:	4611      	mov	r1, r2
    4454:	4618      	mov	r0, r3
    4456:	f7ff fc65 	bl	3d24 <push_result_token>
                            mp_lexer_to_next(lex);
    445a:	68b8      	ldr	r0, [r7, #8]
    445c:	f7fe fe2c 	bl	30b8 <mp_lexer_to_next>
                            goto next_rule;
    4460:	e79c      	b.n	439c <mp_parse+0x80>
                        assert(kind == RULE_ARG_RULE);
    4462:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    4466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    446a:	d006      	beq.n	447a <mp_parse+0x15e>
    446c:	4b8a      	ldr	r3, [pc, #552]	; (4698 <mp_parse+0x37c>)
    446e:	4a8b      	ldr	r2, [pc, #556]	; (469c <mp_parse+0x380>)
    4470:	f240 318b 	movw	r1, #907	; 0x38b
    4474:	488a      	ldr	r0, [pc, #552]	; (46a0 <mp_parse+0x384>)
    4476:	f016 ff79 	bl	1b36c <__assert_func>
                        if (i + 1 < n) {
    447a:	69bb      	ldr	r3, [r7, #24]
    447c:	1c5a      	adds	r2, r3, #1
    447e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4480:	429a      	cmp	r2, r3
    4482:	d208      	bcs.n	4496 <mp_parse+0x17a>
                            push_rule(&parser, rule_src_line, rule_id, i + 1); // save this or-rule
    4484:	6979      	ldr	r1, [r7, #20]
    4486:	69bb      	ldr	r3, [r7, #24]
    4488:	3301      	adds	r3, #1
    448a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    448e:	f107 001c 	add.w	r0, r7, #28
    4492:	f7ff fa4b 	bl	392c <push_rule>
                        push_rule_from_arg(&parser, rule_arg[i]); // push child of or-rule
    4496:	69bb      	ldr	r3, [r7, #24]
    4498:	005b      	lsls	r3, r3, #1
    449a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    449c:	4413      	add	r3, r2
    449e:	881b      	ldrh	r3, [r3, #0]
    44a0:	461a      	mov	r2, r3
    44a2:	f107 031c 	add.w	r3, r7, #28
    44a6:	4611      	mov	r1, r2
    44a8:	4618      	mov	r0, r3
    44aa:	f7ff fa7d 	bl	39a8 <push_rule_from_arg>
                        goto next_rule;
    44ae:	e775      	b.n	439c <mp_parse+0x80>
                for (; i < n; ++i) {
    44b0:	69bb      	ldr	r3, [r7, #24]
    44b2:	3301      	adds	r3, #1
    44b4:	61bb      	str	r3, [r7, #24]
    44b6:	69ba      	ldr	r2, [r7, #24]
    44b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    44ba:	429a      	cmp	r2, r3
    44bc:	d3aa      	bcc.n	4414 <mp_parse+0xf8>
                backtrack = true;
    44be:	2301      	movs	r3, #1
    44c0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                break;
    44c4:	e202      	b.n	48cc <mp_parse+0x5b0>
                if (backtrack) {
    44c6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
    44ca:	2b00      	cmp	r3, #0
    44cc:	d06c      	beq.n	45a8 <mp_parse+0x28c>
                    assert(i > 0);
    44ce:	69bb      	ldr	r3, [r7, #24]
    44d0:	2b00      	cmp	r3, #0
    44d2:	d106      	bne.n	44e2 <mp_parse+0x1c6>
    44d4:	4b73      	ldr	r3, [pc, #460]	; (46a4 <mp_parse+0x388>)
    44d6:	4a71      	ldr	r2, [pc, #452]	; (469c <mp_parse+0x380>)
    44d8:	f240 319a 	movw	r1, #922	; 0x39a
    44dc:	4870      	ldr	r0, [pc, #448]	; (46a0 <mp_parse+0x384>)
    44de:	f016 ff45 	bl	1b36c <__assert_func>
                    if ((rule_arg[i - 1] & RULE_ARG_KIND_MASK) == RULE_ARG_OPT_RULE) {
    44e2:	69bb      	ldr	r3, [r7, #24]
    44e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    44e8:	3b01      	subs	r3, #1
    44ea:	005b      	lsls	r3, r3, #1
    44ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    44ee:	4413      	add	r3, r2
    44f0:	881b      	ldrh	r3, [r3, #0]
    44f2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    44f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
    44fa:	d109      	bne.n	4510 <mp_parse+0x1f4>
                        push_result_node(&parser, MP_PARSE_NODE_NULL);
    44fc:	f107 031c 	add.w	r3, r7, #28
    4500:	2100      	movs	r1, #0
    4502:	4618      	mov	r0, r3
    4504:	f7ff fbb6 	bl	3c74 <push_result_node>
                        backtrack = false;
    4508:	2300      	movs	r3, #0
    450a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    450e:	e04b      	b.n	45a8 <mp_parse+0x28c>
                        if (i > 1) {
    4510:	69bb      	ldr	r3, [r7, #24]
    4512:	2b01      	cmp	r3, #1
    4514:	f200 81f4 	bhi.w	4900 <mp_parse+0x5e4>
                            goto next_rule;
    4518:	e740      	b.n	439c <mp_parse+0x80>
                    if ((rule_arg[i] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    451a:	69bb      	ldr	r3, [r7, #24]
    451c:	005b      	lsls	r3, r3, #1
    451e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4520:	4413      	add	r3, r2
    4522:	881b      	ldrh	r3, [r3, #0]
    4524:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    452c:	d123      	bne.n	4576 <mp_parse+0x25a>
                        mp_token_kind_t tok_kind = rule_arg[i] & RULE_ARG_ARG_MASK;
    452e:	69bb      	ldr	r3, [r7, #24]
    4530:	005b      	lsls	r3, r3, #1
    4532:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4534:	4413      	add	r3, r2
    4536:	881b      	ldrh	r3, [r3, #0]
    4538:	f3c3 030b 	ubfx	r3, r3, #0, #12
    453c:	657b      	str	r3, [r7, #84]	; 0x54
                        if (lex->tok_kind == tok_kind) {
    453e:	68bb      	ldr	r3, [r7, #8]
    4540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    4542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4544:	429a      	cmp	r2, r3
    4546:	d10e      	bne.n	4566 <mp_parse+0x24a>
                            if (tok_kind == MP_TOKEN_NAME) {
    4548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    454a:	2b07      	cmp	r3, #7
    454c:	d107      	bne.n	455e <mp_parse+0x242>
                                push_result_token(&parser, rule_id);
    454e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4552:	f107 031c 	add.w	r3, r7, #28
    4556:	4611      	mov	r1, r2
    4558:	4618      	mov	r0, r3
    455a:	f7ff fbe3 	bl	3d24 <push_result_token>
                            mp_lexer_to_next(lex);
    455e:	68b8      	ldr	r0, [r7, #8]
    4560:	f7fe fdaa 	bl	30b8 <mp_lexer_to_next>
    4564:	e01d      	b.n	45a2 <mp_parse+0x286>
                            if (i > 0) {
    4566:	69bb      	ldr	r3, [r7, #24]
    4568:	2b00      	cmp	r3, #0
    456a:	f040 81cb 	bne.w	4904 <mp_parse+0x5e8>
                                backtrack = true;
    456e:	2301      	movs	r3, #1
    4570:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                                goto next_rule;
    4574:	e712      	b.n	439c <mp_parse+0x80>
                        push_rule(&parser, rule_src_line, rule_id, i + 1); // save this and-rule
    4576:	6979      	ldr	r1, [r7, #20]
    4578:	69bb      	ldr	r3, [r7, #24]
    457a:	3301      	adds	r3, #1
    457c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4580:	f107 001c 	add.w	r0, r7, #28
    4584:	f7ff f9d2 	bl	392c <push_rule>
                        push_rule_from_arg(&parser, rule_arg[i]); // push child of and-rule
    4588:	69bb      	ldr	r3, [r7, #24]
    458a:	005b      	lsls	r3, r3, #1
    458c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    458e:	4413      	add	r3, r2
    4590:	881b      	ldrh	r3, [r3, #0]
    4592:	461a      	mov	r2, r3
    4594:	f107 031c 	add.w	r3, r7, #28
    4598:	4611      	mov	r1, r2
    459a:	4618      	mov	r0, r3
    459c:	f7ff fa04 	bl	39a8 <push_rule_from_arg>
                        goto next_rule;
    45a0:	e6fc      	b.n	439c <mp_parse+0x80>
                for (; i < n; ++i) {
    45a2:	69bb      	ldr	r3, [r7, #24]
    45a4:	3301      	adds	r3, #1
    45a6:	61bb      	str	r3, [r7, #24]
    45a8:	69ba      	ldr	r2, [r7, #24]
    45aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    45ac:	429a      	cmp	r2, r3
    45ae:	d3b4      	bcc.n	451a <mp_parse+0x1fe>
                assert(i == n);
    45b0:	69ba      	ldr	r2, [r7, #24]
    45b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    45b4:	429a      	cmp	r2, r3
    45b6:	d006      	beq.n	45c6 <mp_parse+0x2aa>
    45b8:	4b3b      	ldr	r3, [pc, #236]	; (46a8 <mp_parse+0x38c>)
    45ba:	4a38      	ldr	r2, [pc, #224]	; (469c <mp_parse+0x380>)
    45bc:	f240 31c7 	movw	r1, #967	; 0x3c7
    45c0:	4837      	ldr	r0, [pc, #220]	; (46a0 <mp_parse+0x384>)
    45c2:	f016 fed3 	bl	1b36c <__assert_func>
                if (input_kind != MP_PARSE_SINGLE_INPUT && rule_id == RULE_expr_stmt && peek_result(&parser, 0) == MP_PARSE_NODE_NULL) {
    45c6:	687b      	ldr	r3, [r7, #4]
    45c8:	2b00      	cmp	r3, #0
    45ca:	d03c      	beq.n	4646 <mp_parse+0x32a>
    45cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    45d0:	2b05      	cmp	r3, #5
    45d2:	d138      	bne.n	4646 <mp_parse+0x32a>
    45d4:	f107 031c 	add.w	r3, r7, #28
    45d8:	2100      	movs	r1, #0
    45da:	4618      	mov	r0, r3
    45dc:	f7ff fb22 	bl	3c24 <peek_result>
    45e0:	4603      	mov	r3, r0
    45e2:	2b00      	cmp	r3, #0
    45e4:	d12f      	bne.n	4646 <mp_parse+0x32a>
                    mp_parse_node_t p = peek_result(&parser, 1);
    45e6:	f107 031c 	add.w	r3, r7, #28
    45ea:	2101      	movs	r1, #1
    45ec:	4618      	mov	r0, r3
    45ee:	f7ff fb19 	bl	3c24 <peek_result>
    45f2:	6538      	str	r0, [r7, #80]	; 0x50
                    if ((MP_PARSE_NODE_IS_LEAF(p) && !MP_PARSE_NODE_IS_ID(p))
    45f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    45f6:	f003 0303 	and.w	r3, r3, #3
    45fa:	2b00      	cmp	r3, #0
    45fc:	d004      	beq.n	4608 <mp_parse+0x2ec>
    45fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4600:	f003 030f 	and.w	r3, r3, #15
    4604:	2b02      	cmp	r3, #2
    4606:	d10c      	bne.n	4622 <mp_parse+0x306>
                        || MP_PARSE_NODE_IS_STRUCT_KIND(p, RULE_const_object)) {
    4608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    460a:	2b00      	cmp	r3, #0
    460c:	d01b      	beq.n	4646 <mp_parse+0x32a>
    460e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4610:	f003 0303 	and.w	r3, r3, #3
    4614:	2b00      	cmp	r3, #0
    4616:	d116      	bne.n	4646 <mp_parse+0x32a>
    4618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    461a:	685b      	ldr	r3, [r3, #4]
    461c:	b2db      	uxtb	r3, r3
    461e:	2b35      	cmp	r3, #53	; 0x35
    4620:	d111      	bne.n	4646 <mp_parse+0x32a>
                        pop_result(&parser); // MP_PARSE_NODE_NULL
    4622:	f107 031c 	add.w	r3, r7, #28
    4626:	4618      	mov	r0, r3
    4628:	f7ff fad6 	bl	3bd8 <pop_result>
                        pop_result(&parser); // const expression (leaf or RULE_const_object)
    462c:	f107 031c 	add.w	r3, r7, #28
    4630:	4618      	mov	r0, r3
    4632:	f7ff fad1 	bl	3bd8 <pop_result>
                        push_result_rule(&parser, rule_src_line, RULE_pass_stmt, 0);
    4636:	6979      	ldr	r1, [r7, #20]
    4638:	f107 001c 	add.w	r0, r7, #28
    463c:	2300      	movs	r3, #0
    463e:	2208      	movs	r2, #8
    4640:	f7ff fe08 	bl	4254 <push_result_rule>
                        break;
    4644:	e142      	b.n	48cc <mp_parse+0x5b0>
                i = 0;
    4646:	2300      	movs	r3, #0
    4648:	61bb      	str	r3, [r7, #24]
                size_t num_not_nil = 0;
    464a:	2300      	movs	r3, #0
    464c:	67fb      	str	r3, [r7, #124]	; 0x7c
                for (size_t x = n; x > 0;) {
    464e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4650:	67bb      	str	r3, [r7, #120]	; 0x78
    4652:	e03b      	b.n	46cc <mp_parse+0x3b0>
                    --x;
    4654:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4656:	3b01      	subs	r3, #1
    4658:	67bb      	str	r3, [r7, #120]	; 0x78
                    if ((rule_arg[x] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    465a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    465c:	005b      	lsls	r3, r3, #1
    465e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4660:	4413      	add	r3, r2
    4662:	881b      	ldrh	r3, [r3, #0]
    4664:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    4668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    466c:	d11e      	bne.n	46ac <mp_parse+0x390>
                        mp_token_kind_t tok_kind = rule_arg[x] & RULE_ARG_ARG_MASK;
    466e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    4670:	005b      	lsls	r3, r3, #1
    4672:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4674:	4413      	add	r3, r2
    4676:	881b      	ldrh	r3, [r3, #0]
    4678:	f3c3 030b 	ubfx	r3, r3, #0, #12
    467c:	64fb      	str	r3, [r7, #76]	; 0x4c
                        if (tok_kind == MP_TOKEN_NAME) {
    467e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4680:	2b07      	cmp	r3, #7
    4682:	d123      	bne.n	46cc <mp_parse+0x3b0>
                            i += 1;
    4684:	69bb      	ldr	r3, [r7, #24]
    4686:	3301      	adds	r3, #1
    4688:	61bb      	str	r3, [r7, #24]
                            num_not_nil += 1;
    468a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    468c:	3301      	adds	r3, #1
    468e:	67fb      	str	r3, [r7, #124]	; 0x7c
    4690:	e01c      	b.n	46cc <mp_parse+0x3b0>
    4692:	bf00      	nop
    4694:	0001db60 	.word	0x0001db60
    4698:	0001e0c0 	.word	0x0001e0c0
    469c:	0001e210 	.word	0x0001e210
    46a0:	0001e050 	.word	0x0001e050
    46a4:	0001e0d8 	.word	0x0001e0d8
    46a8:	0001e0e0 	.word	0x0001e0e0
                        if (peek_result(&parser, i) != MP_PARSE_NODE_NULL) {
    46ac:	69ba      	ldr	r2, [r7, #24]
    46ae:	f107 031c 	add.w	r3, r7, #28
    46b2:	4611      	mov	r1, r2
    46b4:	4618      	mov	r0, r3
    46b6:	f7ff fab5 	bl	3c24 <peek_result>
    46ba:	4603      	mov	r3, r0
    46bc:	2b00      	cmp	r3, #0
    46be:	d002      	beq.n	46c6 <mp_parse+0x3aa>
                            num_not_nil += 1;
    46c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    46c2:	3301      	adds	r3, #1
    46c4:	67fb      	str	r3, [r7, #124]	; 0x7c
                        i += 1;
    46c6:	69bb      	ldr	r3, [r7, #24]
    46c8:	3301      	adds	r3, #1
    46ca:	61bb      	str	r3, [r7, #24]
                for (size_t x = n; x > 0;) {
    46cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    46ce:	2b00      	cmp	r3, #0
    46d0:	d1c0      	bne.n	4654 <mp_parse+0x338>
                if (num_not_nil == 1 && (rule_act & RULE_ACT_ALLOW_IDENT)) {
    46d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    46d4:	2b01      	cmp	r3, #1
    46d6:	d124      	bne.n	4722 <mp_parse+0x406>
    46d8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    46dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    46e0:	2b00      	cmp	r3, #0
    46e2:	d01e      	beq.n	4722 <mp_parse+0x406>
                    mp_parse_node_t pn = MP_PARSE_NODE_NULL;
    46e4:	2300      	movs	r3, #0
    46e6:	677b      	str	r3, [r7, #116]	; 0x74
                    for (size_t x = 0; x < i; ++x) {
    46e8:	2300      	movs	r3, #0
    46ea:	673b      	str	r3, [r7, #112]	; 0x70
    46ec:	e00d      	b.n	470a <mp_parse+0x3ee>
                        mp_parse_node_t pn2 = pop_result(&parser);
    46ee:	f107 031c 	add.w	r3, r7, #28
    46f2:	4618      	mov	r0, r3
    46f4:	f7ff fa70 	bl	3bd8 <pop_result>
    46f8:	64b8      	str	r0, [r7, #72]	; 0x48
                        if (pn2 != MP_PARSE_NODE_NULL) {
    46fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    46fc:	2b00      	cmp	r3, #0
    46fe:	d001      	beq.n	4704 <mp_parse+0x3e8>
                            pn = pn2;
    4700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4702:	677b      	str	r3, [r7, #116]	; 0x74
                    for (size_t x = 0; x < i; ++x) {
    4704:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    4706:	3301      	adds	r3, #1
    4708:	673b      	str	r3, [r7, #112]	; 0x70
    470a:	69bb      	ldr	r3, [r7, #24]
    470c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    470e:	429a      	cmp	r2, r3
    4710:	d3ed      	bcc.n	46ee <mp_parse+0x3d2>
                    push_result_node(&parser, pn);
    4712:	f107 031c 	add.w	r3, r7, #28
    4716:	6f79      	ldr	r1, [r7, #116]	; 0x74
    4718:	4618      	mov	r0, r3
    471a:	f7ff faab 	bl	3c74 <push_result_node>
                if (num_not_nil == 1 && (rule_act & RULE_ACT_ALLOW_IDENT)) {
    471e:	bf00      	nop
                break;
    4720:	e0d4      	b.n	48cc <mp_parse+0x5b0>
                    if (rule_act & RULE_ACT_ADD_BLANK) {
    4722:	f997 3066 	ldrsb.w	r3, [r7, #102]	; 0x66
    4726:	2b00      	cmp	r3, #0
    4728:	da08      	bge.n	473c <mp_parse+0x420>
                        push_result_node(&parser, MP_PARSE_NODE_NULL);
    472a:	f107 031c 	add.w	r3, r7, #28
    472e:	2100      	movs	r1, #0
    4730:	4618      	mov	r0, r3
    4732:	f7ff fa9f 	bl	3c74 <push_result_node>
                        i += 1;
    4736:	69bb      	ldr	r3, [r7, #24]
    4738:	3301      	adds	r3, #1
    473a:	61bb      	str	r3, [r7, #24]
                    push_result_rule(&parser, rule_src_line, rule_id, i);
    473c:	6979      	ldr	r1, [r7, #20]
    473e:	69bb      	ldr	r3, [r7, #24]
    4740:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4744:	f107 001c 	add.w	r0, r7, #28
    4748:	f7ff fd84 	bl	4254 <push_result_rule>
                break;
    474c:	e0be      	b.n	48cc <mp_parse+0x5b0>
                assert((rule_act & RULE_ACT_KIND_MASK) == RULE_ACT_LIST);
    474e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
    4752:	f003 0330 	and.w	r3, r3, #48	; 0x30
    4756:	2b30      	cmp	r3, #48	; 0x30
    4758:	d006      	beq.n	4768 <mp_parse+0x44c>
    475a:	4b90      	ldr	r3, [pc, #576]	; (499c <mp_parse+0x680>)
    475c:	4a90      	ldr	r2, [pc, #576]	; (49a0 <mp_parse+0x684>)
    475e:	f240 410a 	movw	r1, #1034	; 0x40a
    4762:	4890      	ldr	r0, [pc, #576]	; (49a4 <mp_parse+0x688>)
    4764:	f016 fe02 	bl	1b36c <__assert_func>
                if (backtrack) {
    4768:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
    476c:	2b00      	cmp	r3, #0
    476e:	d025      	beq.n	47bc <mp_parse+0x4a0>
                    had_trailing_sep = false;
    4770:	2300      	movs	r3, #0
    4772:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                    if (n == 2) {
    4776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4778:	2b02      	cmp	r3, #2
    477a:	d107      	bne.n	478c <mp_parse+0x470>
                        if (i == 1) {
    477c:	69bb      	ldr	r3, [r7, #24]
    477e:	2b01      	cmp	r3, #1
    4780:	d100      	bne.n	4784 <mp_parse+0x468>
                            goto next_rule;
    4782:	e60b      	b.n	439c <mp_parse+0x80>
                            backtrack = false;
    4784:	2300      	movs	r3, #0
    4786:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    478a:	e068      	b.n	485e <mp_parse+0x542>
                        if (i == 1) {
    478c:	69bb      	ldr	r3, [r7, #24]
    478e:	2b01      	cmp	r3, #1
    4790:	d100      	bne.n	4794 <mp_parse+0x478>
                            goto next_rule;
    4792:	e603      	b.n	439c <mp_parse+0x80>
                        } else if ((i & 1) == 1) {
    4794:	69bb      	ldr	r3, [r7, #24]
    4796:	f003 0301 	and.w	r3, r3, #1
    479a:	2b00      	cmp	r3, #0
    479c:	d00a      	beq.n	47b4 <mp_parse+0x498>
                            if (n == 3) {
    479e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    47a0:	2b03      	cmp	r3, #3
    47a2:	f040 80b1 	bne.w	4908 <mp_parse+0x5ec>
                                had_trailing_sep = true;
    47a6:	2301      	movs	r3, #1
    47a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                                backtrack = false;
    47ac:	2300      	movs	r3, #0
    47ae:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    47b2:	e054      	b.n	485e <mp_parse+0x542>
                            backtrack = false;
    47b4:	2300      	movs	r3, #0
    47b6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    47ba:	e050      	b.n	485e <mp_parse+0x542>
                        size_t arg = rule_arg[i & 1 & n];
    47bc:	69ba      	ldr	r2, [r7, #24]
    47be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    47c0:	4013      	ands	r3, r2
    47c2:	f003 0301 	and.w	r3, r3, #1
    47c6:	005b      	lsls	r3, r3, #1
    47c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    47ca:	4413      	add	r3, r2
    47cc:	881b      	ldrh	r3, [r3, #0]
    47ce:	647b      	str	r3, [r7, #68]	; 0x44
                        if ((arg & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    47d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    47d2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    47d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    47da:	d123      	bne.n	4824 <mp_parse+0x508>
                            if (lex->tok_kind == (arg & RULE_ARG_ARG_MASK)) {
    47dc:	68bb      	ldr	r3, [r7, #8]
    47de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    47e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    47e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    47e6:	429a      	cmp	r2, r3
    47e8:	d115      	bne.n	4816 <mp_parse+0x4fa>
                                if (i & 1 & n) {
    47ea:	69ba      	ldr	r2, [r7, #24]
    47ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    47ee:	4013      	ands	r3, r2
    47f0:	f003 0301 	and.w	r3, r3, #1
    47f4:	2b00      	cmp	r3, #0
    47f6:	d107      	bne.n	4808 <mp_parse+0x4ec>
                                    push_result_token(&parser, rule_id);
    47f8:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    47fc:	f107 031c 	add.w	r3, r7, #28
    4800:	4611      	mov	r1, r2
    4802:	4618      	mov	r0, r3
    4804:	f7ff fa8e 	bl	3d24 <push_result_token>
                                mp_lexer_to_next(lex);
    4808:	68b8      	ldr	r0, [r7, #8]
    480a:	f7fe fc55 	bl	30b8 <mp_lexer_to_next>
                                i += 1;
    480e:	69bb      	ldr	r3, [r7, #24]
    4810:	3301      	adds	r3, #1
    4812:	61bb      	str	r3, [r7, #24]
    4814:	e7d2      	b.n	47bc <mp_parse+0x4a0>
                                i += 1;
    4816:	69bb      	ldr	r3, [r7, #24]
    4818:	3301      	adds	r3, #1
    481a:	61bb      	str	r3, [r7, #24]
                                backtrack = true;
    481c:	2301      	movs	r3, #1
    481e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                                goto list_backtrack;
    4822:	e7a5      	b.n	4770 <mp_parse+0x454>
                            assert((arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE);
    4824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4826:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    482a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    482e:	d006      	beq.n	483e <mp_parse+0x522>
    4830:	4b5d      	ldr	r3, [pc, #372]	; (49a8 <mp_parse+0x68c>)
    4832:	4a5b      	ldr	r2, [pc, #364]	; (49a0 <mp_parse+0x684>)
    4834:	f240 4142 	movw	r1, #1090	; 0x442
    4838:	485a      	ldr	r0, [pc, #360]	; (49a4 <mp_parse+0x688>)
    483a:	f016 fd97 	bl	1b36c <__assert_func>
                            push_rule(&parser, rule_src_line, rule_id, i + 1); // save this list-rule
    483e:	6979      	ldr	r1, [r7, #20]
    4840:	69bb      	ldr	r3, [r7, #24]
    4842:	3301      	adds	r3, #1
    4844:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    4848:	f107 001c 	add.w	r0, r7, #28
    484c:	f7ff f86e 	bl	392c <push_rule>
                            push_rule_from_arg(&parser, arg); // push child of list-rule
    4850:	f107 031c 	add.w	r3, r7, #28
    4854:	6c79      	ldr	r1, [r7, #68]	; 0x44
    4856:	4618      	mov	r0, r3
    4858:	f7ff f8a6 	bl	39a8 <push_rule_from_arg>
                            goto next_rule;
    485c:	e59e      	b.n	439c <mp_parse+0x80>
                assert(i >= 1);
    485e:	69bb      	ldr	r3, [r7, #24]
    4860:	2b00      	cmp	r3, #0
    4862:	d106      	bne.n	4872 <mp_parse+0x556>
    4864:	4b51      	ldr	r3, [pc, #324]	; (49ac <mp_parse+0x690>)
    4866:	4a4e      	ldr	r2, [pc, #312]	; (49a0 <mp_parse+0x684>)
    4868:	f240 4149 	movw	r1, #1097	; 0x449
    486c:	484d      	ldr	r0, [pc, #308]	; (49a4 <mp_parse+0x688>)
    486e:	f016 fd7d 	bl	1b36c <__assert_func>
                i -= 1;
    4872:	69bb      	ldr	r3, [r7, #24]
    4874:	3b01      	subs	r3, #1
    4876:	61bb      	str	r3, [r7, #24]
                if ((n & 1) && (rule_arg[1] & RULE_ARG_KIND_MASK) == RULE_ARG_TOK) {
    4878:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    487a:	f003 0301 	and.w	r3, r3, #1
    487e:	2b00      	cmp	r3, #0
    4880:	d00b      	beq.n	489a <mp_parse+0x57e>
    4882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4884:	3302      	adds	r3, #2
    4886:	881b      	ldrh	r3, [r3, #0]
    4888:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
    488c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    4890:	d103      	bne.n	489a <mp_parse+0x57e>
                    i = (i + 1) / 2;
    4892:	69bb      	ldr	r3, [r7, #24]
    4894:	3301      	adds	r3, #1
    4896:	085b      	lsrs	r3, r3, #1
    4898:	61bb      	str	r3, [r7, #24]
                if (i == 1) {
    489a:	69bb      	ldr	r3, [r7, #24]
    489c:	2b01      	cmp	r3, #1
    489e:	d10c      	bne.n	48ba <mp_parse+0x59e>
                    if (had_trailing_sep) {
    48a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
    48a4:	2b00      	cmp	r3, #0
    48a6:	d010      	beq.n	48ca <mp_parse+0x5ae>
                        push_result_rule(&parser, rule_src_line, rule_id, i);
    48a8:	6979      	ldr	r1, [r7, #20]
    48aa:	69bb      	ldr	r3, [r7, #24]
    48ac:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    48b0:	f107 001c 	add.w	r0, r7, #28
    48b4:	f7ff fcce 	bl	4254 <push_result_rule>
                break;
    48b8:	e007      	b.n	48ca <mp_parse+0x5ae>
                    push_result_rule(&parser, rule_src_line, rule_id, i);
    48ba:	6979      	ldr	r1, [r7, #20]
    48bc:	69bb      	ldr	r3, [r7, #24]
    48be:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
    48c2:	f107 001c 	add.w	r0, r7, #28
    48c6:	f7ff fcc5 	bl	4254 <push_result_rule>
                break;
    48ca:	bf00      	nop
    }
    48cc:	e566      	b.n	439c <mp_parse+0x80>
        (void)m_renew_maybe(byte, parser.cur_chunk,
    48ce:	6c38      	ldr	r0, [r7, #64]	; 0x40
    48d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    48d2:	685b      	ldr	r3, [r3, #4]
    48d4:	3308      	adds	r3, #8
    48d6:	2200      	movs	r2, #0
    48d8:	4619      	mov	r1, r3
    48da:	f7fb fd6d 	bl	3b8 <m_realloc_maybe>
            sizeof(mp_parse_chunk_t) + parser.cur_chunk->alloc,
            sizeof(mp_parse_chunk_t) + parser.cur_chunk->union_.used,
            false);
        parser.cur_chunk->alloc = parser.cur_chunk->union_.used;
    48de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    48e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    48e2:	6852      	ldr	r2, [r2, #4]
    48e4:	601a      	str	r2, [r3, #0]
        parser.cur_chunk->union_.next = parser.tree.chunk;
    48e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    48e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    48ea:	605a      	str	r2, [r3, #4]
        parser.tree.chunk = parser.cur_chunk;
    48ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    48ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if (
        lex->tok_kind != MP_TOKEN_END // check we are at the end of the token stream
    48f0:	68bb      	ldr	r3, [r7, #8]
    48f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    if (
    48f4:	2b00      	cmp	r3, #0
    48f6:	d108      	bne.n	490a <mp_parse+0x5ee>
        || parser.result_stack_top == 0 // check that we got a node (can fail on empty input)
    48f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    48fa:	2b00      	cmp	r3, #0
    48fc:	d129      	bne.n	4952 <mp_parse+0x636>
    48fe:	e004      	b.n	490a <mp_parse+0x5ee>
                            goto syntax_error;
    4900:	bf00      	nop
    4902:	e002      	b.n	490a <mp_parse+0x5ee>
                                goto syntax_error;
    4904:	bf00      	nop
    4906:	e000      	b.n	490a <mp_parse+0x5ee>
                                goto syntax_error;
    4908:	bf00      	nop
        ) {
    syntax_error:;
        mp_obj_t exc;
        if (lex->tok_kind == MP_TOKEN_INDENT) {
    490a:	68bb      	ldr	r3, [r7, #8]
    490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    490e:	2b05      	cmp	r3, #5
    4910:	d105      	bne.n	491e <mp_parse+0x602>
            exc = mp_obj_new_exception_msg(&mp_type_IndentationError,
    4912:	4927      	ldr	r1, [pc, #156]	; (49b0 <mp_parse+0x694>)
    4914:	4827      	ldr	r0, [pc, #156]	; (49b4 <mp_parse+0x698>)
    4916:	f00a fe07 	bl	f528 <mp_obj_new_exception_msg>
    491a:	66b8      	str	r0, [r7, #104]	; 0x68
    491c:	e00e      	b.n	493c <mp_parse+0x620>
                "unexpected indent");
        } else if (lex->tok_kind == MP_TOKEN_DEDENT_MISMATCH) {
    491e:	68bb      	ldr	r3, [r7, #8]
    4920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4922:	2b02      	cmp	r3, #2
    4924:	d105      	bne.n	4932 <mp_parse+0x616>
            exc = mp_obj_new_exception_msg(&mp_type_IndentationError,
    4926:	4924      	ldr	r1, [pc, #144]	; (49b8 <mp_parse+0x69c>)
    4928:	4822      	ldr	r0, [pc, #136]	; (49b4 <mp_parse+0x698>)
    492a:	f00a fdfd 	bl	f528 <mp_obj_new_exception_msg>
    492e:	66b8      	str	r0, [r7, #104]	; 0x68
    4930:	e004      	b.n	493c <mp_parse+0x620>
                "unindent does not match any outer indentation level");
        } else {
            exc = mp_obj_new_exception_msg(&mp_type_SyntaxError,
    4932:	4922      	ldr	r1, [pc, #136]	; (49bc <mp_parse+0x6a0>)
    4934:	4822      	ldr	r0, [pc, #136]	; (49c0 <mp_parse+0x6a4>)
    4936:	f00a fdf7 	bl	f528 <mp_obj_new_exception_msg>
    493a:	66b8      	str	r0, [r7, #104]	; 0x68
                "invalid syntax");
        }
        // add traceback to give info about file name and location
        // we don't have a 'block' name, so just pass the NULL qstr to indicate this
        mp_obj_exception_add_traceback(exc, lex->source_name, lex->tok_line, MP_QSTR_NULL);
    493c:	68bb      	ldr	r3, [r7, #8]
    493e:	6819      	ldr	r1, [r3, #0]
    4940:	68bb      	ldr	r3, [r7, #8]
    4942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4944:	2300      	movs	r3, #0
    4946:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    4948:	f00a ff6a 	bl	f820 <mp_obj_exception_add_traceback>
        nlr_raise(exc);
    494c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    494e:	f7fb fcc7 	bl	2e0 <nlr_jump>
    }

    // get the root parse node that we created
    assert(parser.result_stack_top == 1);
    4952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4954:	2b01      	cmp	r3, #1
    4956:	d006      	beq.n	4966 <mp_parse+0x64a>
    4958:	4b1a      	ldr	r3, [pc, #104]	; (49c4 <mp_parse+0x6a8>)
    495a:	4a11      	ldr	r2, [pc, #68]	; (49a0 <mp_parse+0x684>)
    495c:	f44f 6191 	mov.w	r1, #1160	; 0x488
    4960:	4810      	ldr	r0, [pc, #64]	; (49a4 <mp_parse+0x688>)
    4962:	f016 fd03 	bl	1b36c <__assert_func>
    parser.tree.root = parser.result_stack[0];
    4966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4968:	681b      	ldr	r3, [r3, #0]
    496a:	63bb      	str	r3, [r7, #56]	; 0x38

    // free the memory that we don't need anymore
    m_del(rule_stack_t, parser.rule_stack, parser.rule_stack_alloc);
    496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    496e:	4618      	mov	r0, r3
    4970:	f7fb fd36 	bl	3e0 <m_free>
    m_del(mp_parse_node_t, parser.result_stack, parser.result_stack_alloc);
    4974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4976:	4618      	mov	r0, r3
    4978:	f7fb fd32 	bl	3e0 <m_free>

    // we also free the lexer on behalf of the caller
    mp_lexer_free(lex);
    497c:	68b8      	ldr	r0, [r7, #8]
    497e:	f7fe feeb 	bl	3758 <mp_lexer_free>

    return parser.tree;
    4982:	68fb      	ldr	r3, [r7, #12]
    4984:	461a      	mov	r2, r3
    4986:	f107 0338 	add.w	r3, r7, #56	; 0x38
    498a:	e893 0003 	ldmia.w	r3, {r0, r1}
    498e:	e882 0003 	stmia.w	r2, {r0, r1}
}
    4992:	68f8      	ldr	r0, [r7, #12]
    4994:	3788      	adds	r7, #136	; 0x88
    4996:	46bd      	mov	sp, r7
    4998:	bd80      	pop	{r7, pc}
    499a:	bf00      	nop
    499c:	0001e0e8 	.word	0x0001e0e8
    49a0:	0001e210 	.word	0x0001e210
    49a4:	0001e050 	.word	0x0001e050
    49a8:	0001e11c 	.word	0x0001e11c
    49ac:	0001e148 	.word	0x0001e148
    49b0:	0001e150 	.word	0x0001e150
    49b4:	00020728 	.word	0x00020728
    49b8:	0001e164 	.word	0x0001e164
    49bc:	0001e198 	.word	0x0001e198
    49c0:	000206ec 	.word	0x000206ec
    49c4:	0001e1a8 	.word	0x0001e1a8

000049c8 <mp_parse_tree_clear>:

void mp_parse_tree_clear(mp_parse_tree_t *tree) {
    49c8:	b580      	push	{r7, lr}
    49ca:	b084      	sub	sp, #16
    49cc:	af00      	add	r7, sp, #0
    49ce:	6078      	str	r0, [r7, #4]
    mp_parse_chunk_t *chunk = tree->chunk;
    49d0:	687b      	ldr	r3, [r7, #4]
    49d2:	685b      	ldr	r3, [r3, #4]
    49d4:	60fb      	str	r3, [r7, #12]
    while (chunk != NULL) {
    49d6:	e007      	b.n	49e8 <mp_parse_tree_clear+0x20>
        mp_parse_chunk_t *next = chunk->union_.next;
    49d8:	68fb      	ldr	r3, [r7, #12]
    49da:	685b      	ldr	r3, [r3, #4]
    49dc:	60bb      	str	r3, [r7, #8]
        m_del(byte, chunk, sizeof(mp_parse_chunk_t) + chunk->alloc);
    49de:	68f8      	ldr	r0, [r7, #12]
    49e0:	f7fb fcfe 	bl	3e0 <m_free>
        chunk = next;
    49e4:	68bb      	ldr	r3, [r7, #8]
    49e6:	60fb      	str	r3, [r7, #12]
    while (chunk != NULL) {
    49e8:	68fb      	ldr	r3, [r7, #12]
    49ea:	2b00      	cmp	r3, #0
    49ec:	d1f4      	bne.n	49d8 <mp_parse_tree_clear+0x10>
    }
}
    49ee:	bf00      	nop
    49f0:	3710      	adds	r7, #16
    49f2:	46bd      	mov	sp, r7
    49f4:	bd80      	pop	{r7, pc}
    49f6:	bf00      	nop

000049f8 <scope_new>:
    [SCOPE_DICT_COMP] = MP_QSTR__lt_dictcomp_gt_,
    [SCOPE_SET_COMP] = MP_QSTR__lt_setcomp_gt_,
    [SCOPE_GEN_EXPR] = MP_QSTR__lt_genexpr_gt_,
};

scope_t *scope_new(scope_kind_t kind, mp_parse_node_t pn, qstr source_file, mp_uint_t emit_options) {
    49f8:	b580      	push	{r7, lr}
    49fa:	b086      	sub	sp, #24
    49fc:	af00      	add	r7, sp, #0
    49fe:	60f8      	str	r0, [r7, #12]
    4a00:	60b9      	str	r1, [r7, #8]
    4a02:	607a      	str	r2, [r7, #4]
    4a04:	603b      	str	r3, [r7, #0]
    scope_t *scope = m_new0(scope_t, 1);
    4a06:	2030      	movs	r0, #48	; 0x30
    4a08:	f7fb fcae 	bl	368 <m_malloc0>
    4a0c:	6178      	str	r0, [r7, #20]
    scope->kind = kind;
    4a0e:	697b      	ldr	r3, [r7, #20]
    4a10:	68fa      	ldr	r2, [r7, #12]
    4a12:	601a      	str	r2, [r3, #0]
    scope->pn = pn;
    4a14:	697b      	ldr	r3, [r7, #20]
    4a16:	68ba      	ldr	r2, [r7, #8]
    4a18:	60da      	str	r2, [r3, #12]
    scope->source_file = source_file;
    4a1a:	687b      	ldr	r3, [r7, #4]
    4a1c:	b29a      	uxth	r2, r3
    4a1e:	697b      	ldr	r3, [r7, #20]
    4a20:	821a      	strh	r2, [r3, #16]
    if (kind == SCOPE_FUNCTION || kind == SCOPE_CLASS) {
    4a22:	68fb      	ldr	r3, [r7, #12]
    4a24:	2b07      	cmp	r3, #7
    4a26:	d002      	beq.n	4a2e <scope_new+0x36>
    4a28:	68fb      	ldr	r3, [r7, #12]
    4a2a:	2b01      	cmp	r3, #1
    4a2c:	d114      	bne.n	4a58 <scope_new+0x60>
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    4a2e:	68bb      	ldr	r3, [r7, #8]
    4a30:	2b00      	cmp	r3, #0
    4a32:	d004      	beq.n	4a3e <scope_new+0x46>
    4a34:	68bb      	ldr	r3, [r7, #8]
    4a36:	f003 0303 	and.w	r3, r3, #3
    4a3a:	2b00      	cmp	r3, #0
    4a3c:	d005      	beq.n	4a4a <scope_new+0x52>
    4a3e:	4b17      	ldr	r3, [pc, #92]	; (4a9c <scope_new+0xa4>)
    4a40:	4a17      	ldr	r2, [pc, #92]	; (4aa0 <scope_new+0xa8>)
    4a42:	2131      	movs	r1, #49	; 0x31
    4a44:	4817      	ldr	r0, [pc, #92]	; (4aa4 <scope_new+0xac>)
    4a46:	f016 fc91 	bl	1b36c <__assert_func>
        scope->simple_name = MP_PARSE_NODE_LEAF_ARG(((mp_parse_node_struct_t*)pn)->nodes[0]);
    4a4a:	68bb      	ldr	r3, [r7, #8]
    4a4c:	689b      	ldr	r3, [r3, #8]
    4a4e:	091b      	lsrs	r3, r3, #4
    4a50:	b29a      	uxth	r2, r3
    4a52:	697b      	ldr	r3, [r7, #20]
    4a54:	825a      	strh	r2, [r3, #18]
    4a56:	e006      	b.n	4a66 <scope_new+0x6e>
    } else {
        scope->simple_name = scope_simple_name_table[kind];
    4a58:	4a13      	ldr	r2, [pc, #76]	; (4aa8 <scope_new+0xb0>)
    4a5a:	68fb      	ldr	r3, [r7, #12]
    4a5c:	4413      	add	r3, r2
    4a5e:	781b      	ldrb	r3, [r3, #0]
    4a60:	b29a      	uxth	r2, r3
    4a62:	697b      	ldr	r3, [r7, #20]
    4a64:	825a      	strh	r2, [r3, #18]
    }
    scope->raw_code = mp_emit_glue_new_raw_code();
    4a66:	f006 fbe7 	bl	b238 <mp_emit_glue_new_raw_code>
    4a6a:	4602      	mov	r2, r0
    4a6c:	697b      	ldr	r3, [r7, #20]
    4a6e:	615a      	str	r2, [r3, #20]
    scope->emit_options = emit_options;
    4a70:	683b      	ldr	r3, [r7, #0]
    4a72:	b2da      	uxtb	r2, r3
    4a74:	697b      	ldr	r3, [r7, #20]
    4a76:	765a      	strb	r2, [r3, #25]
    scope->id_info_alloc = MICROPY_ALLOC_SCOPE_ID_INIT;
    4a78:	697b      	ldr	r3, [r7, #20]
    4a7a:	2204      	movs	r2, #4
    4a7c:	84da      	strh	r2, [r3, #38]	; 0x26
    scope->id_info = m_new(id_info_t, scope->id_info_alloc);
    4a7e:	697b      	ldr	r3, [r7, #20]
    4a80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4a82:	00db      	lsls	r3, r3, #3
    4a84:	4618      	mov	r0, r3
    4a86:	f7fb fc49 	bl	31c <m_malloc>
    4a8a:	4602      	mov	r2, r0
    4a8c:	697b      	ldr	r3, [r7, #20]
    4a8e:	62da      	str	r2, [r3, #44]	; 0x2c

    return scope;
    4a90:	697b      	ldr	r3, [r7, #20]
}
    4a92:	4618      	mov	r0, r3
    4a94:	3718      	adds	r7, #24
    4a96:	46bd      	mov	sp, r7
    4a98:	bd80      	pop	{r7, pc}
    4a9a:	bf00      	nop
    4a9c:	0001e224 	.word	0x0001e224
    4aa0:	0001e2c0 	.word	0x0001e2c0
    4aa4:	0001e240 	.word	0x0001e240
    4aa8:	0001e21c 	.word	0x0001e21c

00004aac <scope_free>:

void scope_free(scope_t *scope) {
    4aac:	b580      	push	{r7, lr}
    4aae:	b082      	sub	sp, #8
    4ab0:	af00      	add	r7, sp, #0
    4ab2:	6078      	str	r0, [r7, #4]
    m_del(id_info_t, scope->id_info, scope->id_info_alloc);
    4ab4:	687b      	ldr	r3, [r7, #4]
    4ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4ab8:	4618      	mov	r0, r3
    4aba:	f7fb fc91 	bl	3e0 <m_free>
    m_del(scope_t, scope, 1);
    4abe:	6878      	ldr	r0, [r7, #4]
    4ac0:	f7fb fc8e 	bl	3e0 <m_free>
}
    4ac4:	bf00      	nop
    4ac6:	3708      	adds	r7, #8
    4ac8:	46bd      	mov	sp, r7
    4aca:	bd80      	pop	{r7, pc}

00004acc <scope_find_or_add_id>:

id_info_t *scope_find_or_add_id(scope_t *scope, qstr qst, bool *added) {
    4acc:	b580      	push	{r7, lr}
    4ace:	b086      	sub	sp, #24
    4ad0:	af00      	add	r7, sp, #0
    4ad2:	60f8      	str	r0, [r7, #12]
    4ad4:	60b9      	str	r1, [r7, #8]
    4ad6:	607a      	str	r2, [r7, #4]
    id_info_t *id_info = scope_find(scope, qst);
    4ad8:	68b9      	ldr	r1, [r7, #8]
    4ada:	68f8      	ldr	r0, [r7, #12]
    4adc:	f000 f842 	bl	4b64 <scope_find>
    4ae0:	6178      	str	r0, [r7, #20]
    if (id_info != NULL) {
    4ae2:	697b      	ldr	r3, [r7, #20]
    4ae4:	2b00      	cmp	r3, #0
    4ae6:	d004      	beq.n	4af2 <scope_find_or_add_id+0x26>
        *added = false;
    4ae8:	687b      	ldr	r3, [r7, #4]
    4aea:	2200      	movs	r2, #0
    4aec:	701a      	strb	r2, [r3, #0]
        return id_info;
    4aee:	697b      	ldr	r3, [r7, #20]
    4af0:	e033      	b.n	4b5a <scope_find_or_add_id+0x8e>
    }

    // make sure we have enough memory
    if (scope->id_info_len >= scope->id_info_alloc) {
    4af2:	68fb      	ldr	r3, [r7, #12]
    4af4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    4af6:	68fb      	ldr	r3, [r7, #12]
    4af8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4afa:	429a      	cmp	r2, r3
    4afc:	d312      	bcc.n	4b24 <scope_find_or_add_id+0x58>
        scope->id_info = m_renew(id_info_t, scope->id_info, scope->id_info_alloc, scope->id_info_alloc + MICROPY_ALLOC_SCOPE_ID_INC);
    4afe:	68fb      	ldr	r3, [r7, #12]
    4b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b02:	68fb      	ldr	r3, [r7, #12]
    4b04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4b06:	3306      	adds	r3, #6
    4b08:	00db      	lsls	r3, r3, #3
    4b0a:	4619      	mov	r1, r3
    4b0c:	4610      	mov	r0, r2
    4b0e:	f7fb fc39 	bl	384 <m_realloc>
    4b12:	4602      	mov	r2, r0
    4b14:	68fb      	ldr	r3, [r7, #12]
    4b16:	62da      	str	r2, [r3, #44]	; 0x2c
        scope->id_info_alloc += MICROPY_ALLOC_SCOPE_ID_INC;
    4b18:	68fb      	ldr	r3, [r7, #12]
    4b1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    4b1c:	3306      	adds	r3, #6
    4b1e:	b29a      	uxth	r2, r3
    4b20:	68fb      	ldr	r3, [r7, #12]
    4b22:	84da      	strh	r2, [r3, #38]	; 0x26
    }

    // add new id to end of array of all ids; this seems to match CPython
    // important thing is that function arguments are first, but that is
    // handled by the compiler because it adds arguments before compiling the body
    id_info = &scope->id_info[scope->id_info_len++];
    4b24:	68fb      	ldr	r3, [r7, #12]
    4b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b28:	68fb      	ldr	r3, [r7, #12]
    4b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4b2c:	1c59      	adds	r1, r3, #1
    4b2e:	b288      	uxth	r0, r1
    4b30:	68f9      	ldr	r1, [r7, #12]
    4b32:	8508      	strh	r0, [r1, #40]	; 0x28
    4b34:	00db      	lsls	r3, r3, #3
    4b36:	4413      	add	r3, r2
    4b38:	617b      	str	r3, [r7, #20]

    id_info->kind = 0;
    4b3a:	697b      	ldr	r3, [r7, #20]
    4b3c:	2200      	movs	r2, #0
    4b3e:	701a      	strb	r2, [r3, #0]
    id_info->flags = 0;
    4b40:	697b      	ldr	r3, [r7, #20]
    4b42:	2200      	movs	r2, #0
    4b44:	705a      	strb	r2, [r3, #1]
    id_info->local_num = 0;
    4b46:	697b      	ldr	r3, [r7, #20]
    4b48:	2200      	movs	r2, #0
    4b4a:	805a      	strh	r2, [r3, #2]
    id_info->qst = qst;
    4b4c:	697b      	ldr	r3, [r7, #20]
    4b4e:	68ba      	ldr	r2, [r7, #8]
    4b50:	605a      	str	r2, [r3, #4]
    *added = true;
    4b52:	687b      	ldr	r3, [r7, #4]
    4b54:	2201      	movs	r2, #1
    4b56:	701a      	strb	r2, [r3, #0]
    return id_info;
    4b58:	697b      	ldr	r3, [r7, #20]
}
    4b5a:	4618      	mov	r0, r3
    4b5c:	3718      	adds	r7, #24
    4b5e:	46bd      	mov	sp, r7
    4b60:	bd80      	pop	{r7, pc}
    4b62:	bf00      	nop

00004b64 <scope_find>:

id_info_t *scope_find(scope_t *scope, qstr qst) {
    4b64:	b480      	push	{r7}
    4b66:	b085      	sub	sp, #20
    4b68:	af00      	add	r7, sp, #0
    4b6a:	6078      	str	r0, [r7, #4]
    4b6c:	6039      	str	r1, [r7, #0]
    for (mp_uint_t i = 0; i < scope->id_info_len; i++) {
    4b6e:	2300      	movs	r3, #0
    4b70:	60fb      	str	r3, [r7, #12]
    4b72:	e011      	b.n	4b98 <scope_find+0x34>
        if (scope->id_info[i].qst == qst) {
    4b74:	687b      	ldr	r3, [r7, #4]
    4b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b78:	68fb      	ldr	r3, [r7, #12]
    4b7a:	00db      	lsls	r3, r3, #3
    4b7c:	4413      	add	r3, r2
    4b7e:	685a      	ldr	r2, [r3, #4]
    4b80:	683b      	ldr	r3, [r7, #0]
    4b82:	429a      	cmp	r2, r3
    4b84:	d105      	bne.n	4b92 <scope_find+0x2e>
            return &scope->id_info[i];
    4b86:	687b      	ldr	r3, [r7, #4]
    4b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b8a:	68fb      	ldr	r3, [r7, #12]
    4b8c:	00db      	lsls	r3, r3, #3
    4b8e:	4413      	add	r3, r2
    4b90:	e009      	b.n	4ba6 <scope_find+0x42>
    for (mp_uint_t i = 0; i < scope->id_info_len; i++) {
    4b92:	68fb      	ldr	r3, [r7, #12]
    4b94:	3301      	adds	r3, #1
    4b96:	60fb      	str	r3, [r7, #12]
    4b98:	687b      	ldr	r3, [r7, #4]
    4b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4b9c:	461a      	mov	r2, r3
    4b9e:	68fb      	ldr	r3, [r7, #12]
    4ba0:	429a      	cmp	r2, r3
    4ba2:	d8e7      	bhi.n	4b74 <scope_find+0x10>
        }
    }
    return NULL;
    4ba4:	2300      	movs	r3, #0
}
    4ba6:	4618      	mov	r0, r3
    4ba8:	3714      	adds	r7, #20
    4baa:	46bd      	mov	sp, r7
    4bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bb0:	4770      	bx	lr
    4bb2:	bf00      	nop

00004bb4 <scope_find_global>:

id_info_t *scope_find_global(scope_t *scope, qstr qst) {
    4bb4:	b580      	push	{r7, lr}
    4bb6:	b082      	sub	sp, #8
    4bb8:	af00      	add	r7, sp, #0
    4bba:	6078      	str	r0, [r7, #4]
    4bbc:	6039      	str	r1, [r7, #0]
    while (scope->parent != NULL) {
    4bbe:	e002      	b.n	4bc6 <scope_find_global+0x12>
        scope = scope->parent;
    4bc0:	687b      	ldr	r3, [r7, #4]
    4bc2:	685b      	ldr	r3, [r3, #4]
    4bc4:	607b      	str	r3, [r7, #4]
    while (scope->parent != NULL) {
    4bc6:	687b      	ldr	r3, [r7, #4]
    4bc8:	685b      	ldr	r3, [r3, #4]
    4bca:	2b00      	cmp	r3, #0
    4bcc:	d1f8      	bne.n	4bc0 <scope_find_global+0xc>
    }
    return scope_find(scope, qst);
    4bce:	6839      	ldr	r1, [r7, #0]
    4bd0:	6878      	ldr	r0, [r7, #4]
    4bd2:	f7ff ffc7 	bl	4b64 <scope_find>
    4bd6:	4603      	mov	r3, r0
}
    4bd8:	4618      	mov	r0, r3
    4bda:	3708      	adds	r7, #8
    4bdc:	46bd      	mov	sp, r7
    4bde:	bd80      	pop	{r7, pc}

00004be0 <scope_close_over_in_parents>:

STATIC void scope_close_over_in_parents(scope_t *scope, qstr qst) {
    4be0:	b580      	push	{r7, lr}
    4be2:	b086      	sub	sp, #24
    4be4:	af00      	add	r7, sp, #0
    4be6:	6078      	str	r0, [r7, #4]
    4be8:	6039      	str	r1, [r7, #0]
    assert(scope->parent != NULL); // we should have at least 1 parent
    4bea:	687b      	ldr	r3, [r7, #4]
    4bec:	685b      	ldr	r3, [r3, #4]
    4bee:	2b00      	cmp	r3, #0
    4bf0:	d105      	bne.n	4bfe <scope_close_over_in_parents+0x1e>
    4bf2:	4b1f      	ldr	r3, [pc, #124]	; (4c70 <scope_close_over_in_parents+0x90>)
    4bf4:	4a1f      	ldr	r2, [pc, #124]	; (4c74 <scope_close_over_in_parents+0x94>)
    4bf6:	216e      	movs	r1, #110	; 0x6e
    4bf8:	481f      	ldr	r0, [pc, #124]	; (4c78 <scope_close_over_in_parents+0x98>)
    4bfa:	f016 fbb7 	bl	1b36c <__assert_func>
    for (scope_t *s = scope->parent;; s = s->parent) {
    4bfe:	687b      	ldr	r3, [r7, #4]
    4c00:	685b      	ldr	r3, [r3, #4]
    4c02:	617b      	str	r3, [r7, #20]
        assert(s->parent != NULL); // we should not get to the outer scope
    4c04:	697b      	ldr	r3, [r7, #20]
    4c06:	685b      	ldr	r3, [r3, #4]
    4c08:	2b00      	cmp	r3, #0
    4c0a:	d105      	bne.n	4c18 <scope_close_over_in_parents+0x38>
    4c0c:	4b1b      	ldr	r3, [pc, #108]	; (4c7c <scope_close_over_in_parents+0x9c>)
    4c0e:	4a19      	ldr	r2, [pc, #100]	; (4c74 <scope_close_over_in_parents+0x94>)
    4c10:	2170      	movs	r1, #112	; 0x70
    4c12:	4819      	ldr	r0, [pc, #100]	; (4c78 <scope_close_over_in_parents+0x98>)
    4c14:	f016 fbaa 	bl	1b36c <__assert_func>
        bool added;
        id_info_t *id = scope_find_or_add_id(s, qst, &added);
    4c18:	f107 030f 	add.w	r3, r7, #15
    4c1c:	461a      	mov	r2, r3
    4c1e:	6839      	ldr	r1, [r7, #0]
    4c20:	6978      	ldr	r0, [r7, #20]
    4c22:	f7ff ff53 	bl	4acc <scope_find_or_add_id>
    4c26:	6138      	str	r0, [r7, #16]
        if (added) {
    4c28:	7bfb      	ldrb	r3, [r7, #15]
    4c2a:	2b00      	cmp	r3, #0
    4c2c:	d006      	beq.n	4c3c <scope_close_over_in_parents+0x5c>
            // variable not previously declared in this scope, so declare it as free and keep searching parents
            id->kind = ID_INFO_KIND_FREE;
    4c2e:	693b      	ldr	r3, [r7, #16]
    4c30:	2204      	movs	r2, #4
    4c32:	701a      	strb	r2, [r3, #0]
    for (scope_t *s = scope->parent;; s = s->parent) {
    4c34:	697b      	ldr	r3, [r7, #20]
    4c36:	685b      	ldr	r3, [r3, #4]
    4c38:	617b      	str	r3, [r7, #20]
                // ID_INFO_KIND_CELL: variable already closed over in this scope
                assert(id->kind == ID_INFO_KIND_FREE || id->kind == ID_INFO_KIND_CELL);
            }
            return;
        }
    }
    4c3a:	e7e3      	b.n	4c04 <scope_close_over_in_parents+0x24>
            if (id->kind == ID_INFO_KIND_LOCAL) {
    4c3c:	693b      	ldr	r3, [r7, #16]
    4c3e:	781b      	ldrb	r3, [r3, #0]
    4c40:	2b02      	cmp	r3, #2
    4c42:	d103      	bne.n	4c4c <scope_close_over_in_parents+0x6c>
                id->kind = ID_INFO_KIND_CELL;
    4c44:	693b      	ldr	r3, [r7, #16]
    4c46:	2203      	movs	r2, #3
    4c48:	701a      	strb	r2, [r3, #0]
            return;
    4c4a:	e00d      	b.n	4c68 <scope_close_over_in_parents+0x88>
                assert(id->kind == ID_INFO_KIND_FREE || id->kind == ID_INFO_KIND_CELL);
    4c4c:	693b      	ldr	r3, [r7, #16]
    4c4e:	781b      	ldrb	r3, [r3, #0]
    4c50:	2b04      	cmp	r3, #4
    4c52:	d009      	beq.n	4c68 <scope_close_over_in_parents+0x88>
    4c54:	693b      	ldr	r3, [r7, #16]
    4c56:	781b      	ldrb	r3, [r3, #0]
    4c58:	2b03      	cmp	r3, #3
    4c5a:	d005      	beq.n	4c68 <scope_close_over_in_parents+0x88>
    4c5c:	4b08      	ldr	r3, [pc, #32]	; (4c80 <scope_close_over_in_parents+0xa0>)
    4c5e:	4a05      	ldr	r2, [pc, #20]	; (4c74 <scope_close_over_in_parents+0x94>)
    4c60:	217e      	movs	r1, #126	; 0x7e
    4c62:	4805      	ldr	r0, [pc, #20]	; (4c78 <scope_close_over_in_parents+0x98>)
    4c64:	f016 fb82 	bl	1b36c <__assert_func>
            return;
    4c68:	bf00      	nop
}
    4c6a:	3718      	adds	r7, #24
    4c6c:	46bd      	mov	sp, r7
    4c6e:	bd80      	pop	{r7, pc}
    4c70:	0001e254 	.word	0x0001e254
    4c74:	0001e2cc 	.word	0x0001e2cc
    4c78:	0001e240 	.word	0x0001e240
    4c7c:	0001e26c 	.word	0x0001e26c
    4c80:	0001e280 	.word	0x0001e280

00004c84 <scope_find_local_and_close_over>:

void scope_find_local_and_close_over(scope_t *scope, id_info_t *id, qstr qst) {
    4c84:	b580      	push	{r7, lr}
    4c86:	b086      	sub	sp, #24
    4c88:	af00      	add	r7, sp, #0
    4c8a:	60f8      	str	r0, [r7, #12]
    4c8c:	60b9      	str	r1, [r7, #8]
    4c8e:	607a      	str	r2, [r7, #4]
    if (scope->parent != NULL) {
    4c90:	68fb      	ldr	r3, [r7, #12]
    4c92:	685b      	ldr	r3, [r3, #4]
    4c94:	2b00      	cmp	r3, #0
    4c96:	d028      	beq.n	4cea <scope_find_local_and_close_over+0x66>
        for (scope_t *s = scope->parent; s->parent != NULL; s = s->parent) {
    4c98:	68fb      	ldr	r3, [r7, #12]
    4c9a:	685b      	ldr	r3, [r3, #4]
    4c9c:	617b      	str	r3, [r7, #20]
    4c9e:	e01e      	b.n	4cde <scope_find_local_and_close_over+0x5a>
            id_info_t *id2 = scope_find(s, qst);
    4ca0:	6879      	ldr	r1, [r7, #4]
    4ca2:	6978      	ldr	r0, [r7, #20]
    4ca4:	f7ff ff5e 	bl	4b64 <scope_find>
    4ca8:	6138      	str	r0, [r7, #16]
            if (id2 != NULL) {
    4caa:	693b      	ldr	r3, [r7, #16]
    4cac:	2b00      	cmp	r3, #0
    4cae:	d013      	beq.n	4cd8 <scope_find_local_and_close_over+0x54>
                if (id2->kind == ID_INFO_KIND_LOCAL || id2->kind == ID_INFO_KIND_CELL || id2->kind == ID_INFO_KIND_FREE) {
    4cb0:	693b      	ldr	r3, [r7, #16]
    4cb2:	781b      	ldrb	r3, [r3, #0]
    4cb4:	2b02      	cmp	r3, #2
    4cb6:	d007      	beq.n	4cc8 <scope_find_local_and_close_over+0x44>
    4cb8:	693b      	ldr	r3, [r7, #16]
    4cba:	781b      	ldrb	r3, [r3, #0]
    4cbc:	2b03      	cmp	r3, #3
    4cbe:	d003      	beq.n	4cc8 <scope_find_local_and_close_over+0x44>
    4cc0:	693b      	ldr	r3, [r7, #16]
    4cc2:	781b      	ldrb	r3, [r3, #0]
    4cc4:	2b04      	cmp	r3, #4
    4cc6:	d10f      	bne.n	4ce8 <scope_find_local_and_close_over+0x64>
                    id->kind = ID_INFO_KIND_FREE;
    4cc8:	68bb      	ldr	r3, [r7, #8]
    4cca:	2204      	movs	r2, #4
    4ccc:	701a      	strb	r2, [r3, #0]
                    scope_close_over_in_parents(scope, qst);
    4cce:	6879      	ldr	r1, [r7, #4]
    4cd0:	68f8      	ldr	r0, [r7, #12]
    4cd2:	f7ff ff85 	bl	4be0 <scope_close_over_in_parents>
                    return;
    4cd6:	e00b      	b.n	4cf0 <scope_find_local_and_close_over+0x6c>
        for (scope_t *s = scope->parent; s->parent != NULL; s = s->parent) {
    4cd8:	697b      	ldr	r3, [r7, #20]
    4cda:	685b      	ldr	r3, [r3, #4]
    4cdc:	617b      	str	r3, [r7, #20]
    4cde:	697b      	ldr	r3, [r7, #20]
    4ce0:	685b      	ldr	r3, [r3, #4]
    4ce2:	2b00      	cmp	r3, #0
    4ce4:	d1dc      	bne.n	4ca0 <scope_find_local_and_close_over+0x1c>
    4ce6:	e000      	b.n	4cea <scope_find_local_and_close_over+0x66>
                }
                break;
    4ce8:	bf00      	nop
            }
        }
    }
    id->kind = ID_INFO_KIND_GLOBAL_IMPLICIT;
    4cea:	68bb      	ldr	r3, [r7, #8]
    4cec:	2200      	movs	r2, #0
    4cee:	701a      	strb	r2, [r3, #0]
}
    4cf0:	3718      	adds	r7, #24
    4cf2:	46bd      	mov	sp, r7
    4cf4:	bd80      	pop	{r7, pc}
    4cf6:	bf00      	nop

00004cf8 <mp_parse_node_new_small_int>:
static inline mp_parse_node_t mp_parse_node_new_small_int(mp_int_t val) {
    4cf8:	b480      	push	{r7}
    4cfa:	b083      	sub	sp, #12
    4cfc:	af00      	add	r7, sp, #0
    4cfe:	6078      	str	r0, [r7, #4]
    return (mp_parse_node_t)(MP_PARSE_NODE_SMALL_INT | ((mp_uint_t)val << 1));
    4d00:	687b      	ldr	r3, [r7, #4]
    4d02:	005b      	lsls	r3, r3, #1
    4d04:	f043 0301 	orr.w	r3, r3, #1
}
    4d08:	4618      	mov	r0, r3
    4d0a:	370c      	adds	r7, #12
    4d0c:	46bd      	mov	sp, r7
    4d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d12:	4770      	bx	lr

00004d14 <mp_local_free>:

#if !MICROPY_ENABLE_PYSTACK

#define mp_local_alloc(n_bytes) alloca(n_bytes)

static inline void mp_local_free(void *ptr) {
    4d14:	b480      	push	{r7}
    4d16:	b083      	sub	sp, #12
    4d18:	af00      	add	r7, sp, #0
    4d1a:	6078      	str	r0, [r7, #4]
    (void)ptr;
}
    4d1c:	bf00      	nop
    4d1e:	370c      	adds	r7, #12
    4d20:	46bd      	mov	sp, r7
    4d22:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d26:	4770      	bx	lr

00004d28 <compile_error_set_line>:
    emit_inline_asm_t *emit_inline_asm;                                   // current emitter for inline asm
    const emit_inline_asm_method_table_t *emit_inline_asm_method_table;   // current emit method table for inline asm
    #endif
} compiler_t;

STATIC void compile_error_set_line(compiler_t *comp, mp_parse_node_t pn) {
    4d28:	b480      	push	{r7}
    4d2a:	b083      	sub	sp, #12
    4d2c:	af00      	add	r7, sp, #0
    4d2e:	6078      	str	r0, [r7, #4]
    4d30:	6039      	str	r1, [r7, #0]
    // if the line of the error is unknown then try to update it from the pn
    if (comp->compile_error_line == 0 && MP_PARSE_NODE_IS_STRUCT(pn)) {
    4d32:	687b      	ldr	r3, [r7, #4]
    4d34:	68db      	ldr	r3, [r3, #12]
    4d36:	2b00      	cmp	r3, #0
    4d38:	d10b      	bne.n	4d52 <compile_error_set_line+0x2a>
    4d3a:	683b      	ldr	r3, [r7, #0]
    4d3c:	2b00      	cmp	r3, #0
    4d3e:	d008      	beq.n	4d52 <compile_error_set_line+0x2a>
    4d40:	683b      	ldr	r3, [r7, #0]
    4d42:	f003 0303 	and.w	r3, r3, #3
    4d46:	2b00      	cmp	r3, #0
    4d48:	d103      	bne.n	4d52 <compile_error_set_line+0x2a>
        comp->compile_error_line = ((mp_parse_node_struct_t*)pn)->source_line;
    4d4a:	683b      	ldr	r3, [r7, #0]
    4d4c:	681a      	ldr	r2, [r3, #0]
    4d4e:	687b      	ldr	r3, [r7, #4]
    4d50:	60da      	str	r2, [r3, #12]
    }
}
    4d52:	bf00      	nop
    4d54:	370c      	adds	r7, #12
    4d56:	46bd      	mov	sp, r7
    4d58:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d5c:	4770      	bx	lr
    4d5e:	bf00      	nop

00004d60 <compile_syntax_error>:

STATIC void compile_syntax_error(compiler_t *comp, mp_parse_node_t pn, const char *msg) {
    4d60:	b580      	push	{r7, lr}
    4d62:	b084      	sub	sp, #16
    4d64:	af00      	add	r7, sp, #0
    4d66:	60f8      	str	r0, [r7, #12]
    4d68:	60b9      	str	r1, [r7, #8]
    4d6a:	607a      	str	r2, [r7, #4]
    // only register the error if there has been no other error
    if (comp->compile_error == MP_OBJ_NULL) {
    4d6c:	68fb      	ldr	r3, [r7, #12]
    4d6e:	689b      	ldr	r3, [r3, #8]
    4d70:	2b00      	cmp	r3, #0
    4d72:	d10a      	bne.n	4d8a <compile_syntax_error+0x2a>
        comp->compile_error = mp_obj_new_exception_msg(&mp_type_SyntaxError, msg);
    4d74:	6879      	ldr	r1, [r7, #4]
    4d76:	4807      	ldr	r0, [pc, #28]	; (4d94 <compile_syntax_error+0x34>)
    4d78:	f00a fbd6 	bl	f528 <mp_obj_new_exception_msg>
    4d7c:	4602      	mov	r2, r0
    4d7e:	68fb      	ldr	r3, [r7, #12]
    4d80:	609a      	str	r2, [r3, #8]
        compile_error_set_line(comp, pn);
    4d82:	68b9      	ldr	r1, [r7, #8]
    4d84:	68f8      	ldr	r0, [r7, #12]
    4d86:	f7ff ffcf 	bl	4d28 <compile_error_set_line>
    }
}
    4d8a:	bf00      	nop
    4d8c:	3710      	adds	r7, #16
    4d8e:	46bd      	mov	sp, r7
    4d90:	bd80      	pop	{r7, pc}
    4d92:	bf00      	nop
    4d94:	000206ec 	.word	0x000206ec

00004d98 <comp_next_label>:

STATIC void compile_trailer_paren_helper(compiler_t *comp, mp_parse_node_t pn_arglist, bool is_method_call, int n_positional_extra);
STATIC void compile_comprehension(compiler_t *comp, mp_parse_node_struct_t *pns, scope_kind_t kind);
STATIC void compile_node(compiler_t *comp, mp_parse_node_t pn);

STATIC uint comp_next_label(compiler_t *comp) {
    4d98:	b480      	push	{r7}
    4d9a:	b083      	sub	sp, #12
    4d9c:	af00      	add	r7, sp, #0
    4d9e:	6078      	str	r0, [r7, #4]
    return comp->next_label++;
    4da0:	687b      	ldr	r3, [r7, #4]
    4da2:	691b      	ldr	r3, [r3, #16]
    4da4:	1c59      	adds	r1, r3, #1
    4da6:	687a      	ldr	r2, [r7, #4]
    4da8:	6111      	str	r1, [r2, #16]
}
    4daa:	4618      	mov	r0, r3
    4dac:	370c      	adds	r7, #12
    4dae:	46bd      	mov	sp, r7
    4db0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4db4:	4770      	bx	lr
    4db6:	bf00      	nop

00004db8 <compile_increase_except_level>:

STATIC void compile_increase_except_level(compiler_t *comp) {
    4db8:	b480      	push	{r7}
    4dba:	b083      	sub	sp, #12
    4dbc:	af00      	add	r7, sp, #0
    4dbe:	6078      	str	r0, [r7, #4]
    comp->cur_except_level += 1;
    4dc0:	687b      	ldr	r3, [r7, #4]
    4dc2:	8b9b      	ldrh	r3, [r3, #28]
    4dc4:	3301      	adds	r3, #1
    4dc6:	b29a      	uxth	r2, r3
    4dc8:	687b      	ldr	r3, [r7, #4]
    4dca:	839a      	strh	r2, [r3, #28]
    if (comp->cur_except_level > comp->scope_cur->exc_stack_size) {
    4dcc:	687b      	ldr	r3, [r7, #4]
    4dce:	8b9a      	ldrh	r2, [r3, #28]
    4dd0:	687b      	ldr	r3, [r7, #4]
    4dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4dd4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    4dd6:	429a      	cmp	r2, r3
    4dd8:	d904      	bls.n	4de4 <compile_increase_except_level+0x2c>
        comp->scope_cur->exc_stack_size = comp->cur_except_level;
    4dda:	687b      	ldr	r3, [r7, #4]
    4ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4dde:	687a      	ldr	r2, [r7, #4]
    4de0:	8b92      	ldrh	r2, [r2, #28]
    4de2:	849a      	strh	r2, [r3, #36]	; 0x24
    }
}
    4de4:	bf00      	nop
    4de6:	370c      	adds	r7, #12
    4de8:	46bd      	mov	sp, r7
    4dea:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dee:	4770      	bx	lr

00004df0 <compile_decrease_except_level>:

STATIC void compile_decrease_except_level(compiler_t *comp) {
    4df0:	b580      	push	{r7, lr}
    4df2:	b082      	sub	sp, #8
    4df4:	af00      	add	r7, sp, #0
    4df6:	6078      	str	r0, [r7, #4]
    assert(comp->cur_except_level > 0);
    4df8:	687b      	ldr	r3, [r7, #4]
    4dfa:	8b9b      	ldrh	r3, [r3, #28]
    4dfc:	2b00      	cmp	r3, #0
    4dfe:	d105      	bne.n	4e0c <compile_decrease_except_level+0x1c>
    4e00:	4b07      	ldr	r3, [pc, #28]	; (4e20 <compile_decrease_except_level+0x30>)
    4e02:	4a08      	ldr	r2, [pc, #32]	; (4e24 <compile_decrease_except_level+0x34>)
    4e04:	21b5      	movs	r1, #181	; 0xb5
    4e06:	4808      	ldr	r0, [pc, #32]	; (4e28 <compile_decrease_except_level+0x38>)
    4e08:	f016 fab0 	bl	1b36c <__assert_func>
    comp->cur_except_level -= 1;
    4e0c:	687b      	ldr	r3, [r7, #4]
    4e0e:	8b9b      	ldrh	r3, [r3, #28]
    4e10:	3b01      	subs	r3, #1
    4e12:	b29a      	uxth	r2, r3
    4e14:	687b      	ldr	r3, [r7, #4]
    4e16:	839a      	strh	r2, [r3, #28]
}
    4e18:	bf00      	nop
    4e1a:	3708      	adds	r7, #8
    4e1c:	46bd      	mov	sp, r7
    4e1e:	bd80      	pop	{r7, pc}
    4e20:	0001e2e8 	.word	0x0001e2e8
    4e24:	0001ee7c 	.word	0x0001ee7c
    4e28:	0001e304 	.word	0x0001e304

00004e2c <scope_new_and_link>:

STATIC scope_t *scope_new_and_link(compiler_t *comp, scope_kind_t kind, mp_parse_node_t pn, uint emit_options) {
    4e2c:	b580      	push	{r7, lr}
    4e2e:	b086      	sub	sp, #24
    4e30:	af00      	add	r7, sp, #0
    4e32:	60f8      	str	r0, [r7, #12]
    4e34:	60b9      	str	r1, [r7, #8]
    4e36:	607a      	str	r2, [r7, #4]
    4e38:	603b      	str	r3, [r7, #0]
    scope_t *scope = scope_new(kind, pn, comp->source_file, emit_options);
    4e3a:	68fb      	ldr	r3, [r7, #12]
    4e3c:	681a      	ldr	r2, [r3, #0]
    4e3e:	683b      	ldr	r3, [r7, #0]
    4e40:	6879      	ldr	r1, [r7, #4]
    4e42:	68b8      	ldr	r0, [r7, #8]
    4e44:	f7ff fdd8 	bl	49f8 <scope_new>
    4e48:	6138      	str	r0, [r7, #16]
    scope->parent = comp->scope_cur;
    4e4a:	68fb      	ldr	r3, [r7, #12]
    4e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4e4e:	693b      	ldr	r3, [r7, #16]
    4e50:	605a      	str	r2, [r3, #4]
    scope->next = NULL;
    4e52:	693b      	ldr	r3, [r7, #16]
    4e54:	2200      	movs	r2, #0
    4e56:	609a      	str	r2, [r3, #8]
    if (comp->scope_head == NULL) {
    4e58:	68fb      	ldr	r3, [r7, #12]
    4e5a:	6a1b      	ldr	r3, [r3, #32]
    4e5c:	2b00      	cmp	r3, #0
    4e5e:	d103      	bne.n	4e68 <scope_new_and_link+0x3c>
        comp->scope_head = scope;
    4e60:	68fb      	ldr	r3, [r7, #12]
    4e62:	693a      	ldr	r2, [r7, #16]
    4e64:	621a      	str	r2, [r3, #32]
    4e66:	e00d      	b.n	4e84 <scope_new_and_link+0x58>
    } else {
        scope_t *s = comp->scope_head;
    4e68:	68fb      	ldr	r3, [r7, #12]
    4e6a:	6a1b      	ldr	r3, [r3, #32]
    4e6c:	617b      	str	r3, [r7, #20]
        while (s->next != NULL) {
    4e6e:	e002      	b.n	4e76 <scope_new_and_link+0x4a>
            s = s->next;
    4e70:	697b      	ldr	r3, [r7, #20]
    4e72:	689b      	ldr	r3, [r3, #8]
    4e74:	617b      	str	r3, [r7, #20]
        while (s->next != NULL) {
    4e76:	697b      	ldr	r3, [r7, #20]
    4e78:	689b      	ldr	r3, [r3, #8]
    4e7a:	2b00      	cmp	r3, #0
    4e7c:	d1f8      	bne.n	4e70 <scope_new_and_link+0x44>
        }
        s->next = scope;
    4e7e:	697b      	ldr	r3, [r7, #20]
    4e80:	693a      	ldr	r2, [r7, #16]
    4e82:	609a      	str	r2, [r3, #8]
    }
    return scope;
    4e84:	693b      	ldr	r3, [r7, #16]
}
    4e86:	4618      	mov	r0, r3
    4e88:	3718      	adds	r7, #24
    4e8a:	46bd      	mov	sp, r7
    4e8c:	bd80      	pop	{r7, pc}
    4e8e:	bf00      	nop

00004e90 <apply_to_single_or_list>:

typedef void (*apply_list_fun_t)(compiler_t *comp, mp_parse_node_t pn);

STATIC void apply_to_single_or_list(compiler_t *comp, mp_parse_node_t pn, pn_kind_t pn_list_kind, apply_list_fun_t f) {
    4e90:	b580      	push	{r7, lr}
    4e92:	b088      	sub	sp, #32
    4e94:	af00      	add	r7, sp, #0
    4e96:	60f8      	str	r0, [r7, #12]
    4e98:	60b9      	str	r1, [r7, #8]
    4e9a:	607a      	str	r2, [r7, #4]
    4e9c:	603b      	str	r3, [r7, #0]
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, pn_list_kind)) {
    4e9e:	68bb      	ldr	r3, [r7, #8]
    4ea0:	2b00      	cmp	r3, #0
    4ea2:	d024      	beq.n	4eee <apply_to_single_or_list+0x5e>
    4ea4:	68bb      	ldr	r3, [r7, #8]
    4ea6:	f003 0303 	and.w	r3, r3, #3
    4eaa:	2b00      	cmp	r3, #0
    4eac:	d11f      	bne.n	4eee <apply_to_single_or_list+0x5e>
    4eae:	68bb      	ldr	r3, [r7, #8]
    4eb0:	685b      	ldr	r3, [r3, #4]
    4eb2:	b2da      	uxtb	r2, r3
    4eb4:	687b      	ldr	r3, [r7, #4]
    4eb6:	429a      	cmp	r2, r3
    4eb8:	d119      	bne.n	4eee <apply_to_single_or_list+0x5e>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    4eba:	68bb      	ldr	r3, [r7, #8]
    4ebc:	61bb      	str	r3, [r7, #24]
        int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    4ebe:	69bb      	ldr	r3, [r7, #24]
    4ec0:	685b      	ldr	r3, [r3, #4]
    4ec2:	0a1b      	lsrs	r3, r3, #8
    4ec4:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < num_nodes; i++) {
    4ec6:	2300      	movs	r3, #0
    4ec8:	61fb      	str	r3, [r7, #28]
    4eca:	e00b      	b.n	4ee4 <apply_to_single_or_list+0x54>
            f(comp, pns->nodes[i]);
    4ecc:	69bb      	ldr	r3, [r7, #24]
    4ece:	69fa      	ldr	r2, [r7, #28]
    4ed0:	3202      	adds	r2, #2
    4ed2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4ed6:	683b      	ldr	r3, [r7, #0]
    4ed8:	4611      	mov	r1, r2
    4eda:	68f8      	ldr	r0, [r7, #12]
    4edc:	4798      	blx	r3
        for (int i = 0; i < num_nodes; i++) {
    4ede:	69fb      	ldr	r3, [r7, #28]
    4ee0:	3301      	adds	r3, #1
    4ee2:	61fb      	str	r3, [r7, #28]
    4ee4:	69fa      	ldr	r2, [r7, #28]
    4ee6:	697b      	ldr	r3, [r7, #20]
    4ee8:	429a      	cmp	r2, r3
    4eea:	dbef      	blt.n	4ecc <apply_to_single_or_list+0x3c>
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, pn_list_kind)) {
    4eec:	e007      	b.n	4efe <apply_to_single_or_list+0x6e>
        }
    } else if (!MP_PARSE_NODE_IS_NULL(pn)) {
    4eee:	68bb      	ldr	r3, [r7, #8]
    4ef0:	2b00      	cmp	r3, #0
    4ef2:	d004      	beq.n	4efe <apply_to_single_or_list+0x6e>
        f(comp, pn);
    4ef4:	683b      	ldr	r3, [r7, #0]
    4ef6:	68b9      	ldr	r1, [r7, #8]
    4ef8:	68f8      	ldr	r0, [r7, #12]
    4efa:	4798      	blx	r3
    }
}
    4efc:	e7ff      	b.n	4efe <apply_to_single_or_list+0x6e>
    4efe:	bf00      	nop
    4f00:	3720      	adds	r7, #32
    4f02:	46bd      	mov	sp, r7
    4f04:	bd80      	pop	{r7, pc}
    4f06:	bf00      	nop

00004f08 <compile_generic_all_nodes>:

STATIC void compile_generic_all_nodes(compiler_t *comp, mp_parse_node_struct_t *pns) {
    4f08:	b580      	push	{r7, lr}
    4f0a:	b084      	sub	sp, #16
    4f0c:	af00      	add	r7, sp, #0
    4f0e:	6078      	str	r0, [r7, #4]
    4f10:	6039      	str	r1, [r7, #0]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    4f12:	683b      	ldr	r3, [r7, #0]
    4f14:	685b      	ldr	r3, [r3, #4]
    4f16:	0a1b      	lsrs	r3, r3, #8
    4f18:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < num_nodes; i++) {
    4f1a:	2300      	movs	r3, #0
    4f1c:	60fb      	str	r3, [r7, #12]
    4f1e:	e019      	b.n	4f54 <compile_generic_all_nodes+0x4c>
        compile_node(comp, pns->nodes[i]);
    4f20:	683b      	ldr	r3, [r7, #0]
    4f22:	68fa      	ldr	r2, [r7, #12]
    4f24:	3202      	adds	r2, #2
    4f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4f2a:	4619      	mov	r1, r3
    4f2c:	6878      	ldr	r0, [r7, #4]
    4f2e:	f003 fd91 	bl	8a54 <compile_node>
        if (comp->compile_error != MP_OBJ_NULL) {
    4f32:	687b      	ldr	r3, [r7, #4]
    4f34:	689b      	ldr	r3, [r3, #8]
    4f36:	2b00      	cmp	r3, #0
    4f38:	d009      	beq.n	4f4e <compile_generic_all_nodes+0x46>
            // add line info for the error in case it didn't have a line number
            compile_error_set_line(comp, pns->nodes[i]);
    4f3a:	683b      	ldr	r3, [r7, #0]
    4f3c:	68fa      	ldr	r2, [r7, #12]
    4f3e:	3202      	adds	r2, #2
    4f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4f44:	4619      	mov	r1, r3
    4f46:	6878      	ldr	r0, [r7, #4]
    4f48:	f7ff feee 	bl	4d28 <compile_error_set_line>
            return;
    4f4c:	e006      	b.n	4f5c <compile_generic_all_nodes+0x54>
    for (int i = 0; i < num_nodes; i++) {
    4f4e:	68fb      	ldr	r3, [r7, #12]
    4f50:	3301      	adds	r3, #1
    4f52:	60fb      	str	r3, [r7, #12]
    4f54:	68fa      	ldr	r2, [r7, #12]
    4f56:	68bb      	ldr	r3, [r7, #8]
    4f58:	429a      	cmp	r2, r3
    4f5a:	dbe1      	blt.n	4f20 <compile_generic_all_nodes+0x18>
        }
    }
}
    4f5c:	3710      	adds	r7, #16
    4f5e:	46bd      	mov	sp, r7
    4f60:	bd80      	pop	{r7, pc}
    4f62:	bf00      	nop

00004f64 <compile_load_id>:

STATIC void compile_load_id(compiler_t *comp, qstr qst) {
    4f64:	b580      	push	{r7, lr}
    4f66:	b082      	sub	sp, #8
    4f68:	af00      	add	r7, sp, #0
    4f6a:	6078      	str	r0, [r7, #4]
    4f6c:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    4f6e:	687b      	ldr	r3, [r7, #4]
    4f70:	795b      	ldrb	r3, [r3, #5]
    4f72:	2b01      	cmp	r3, #1
    4f74:	d106      	bne.n	4f84 <compile_load_id+0x20>
        mp_emit_common_get_id_for_load(comp->scope_cur, qst);
    4f76:	687b      	ldr	r3, [r7, #4]
    4f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4f7a:	6839      	ldr	r1, [r7, #0]
    4f7c:	4618      	mov	r0, r3
    4f7e:	f004 fc6f 	bl	9860 <mp_emit_common_get_id_for_load>
        mp_emit_common_id_op(comp->emit, &comp->emit_method_table->load_id, comp->scope_cur, qst);
        #else
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_load_id_ops, comp->scope_cur, qst);
        #endif
    }
}
    4f82:	e007      	b.n	4f94 <compile_load_id+0x30>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_load_id_ops, comp->scope_cur, qst);
    4f84:	687b      	ldr	r3, [r7, #4]
    4f86:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4f88:	687b      	ldr	r3, [r7, #4]
    4f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4f8c:	683b      	ldr	r3, [r7, #0]
    4f8e:	4903      	ldr	r1, [pc, #12]	; (4f9c <compile_load_id+0x38>)
    4f90:	f004 fcac 	bl	98ec <mp_emit_common_id_op>
}
    4f94:	bf00      	nop
    4f96:	3708      	adds	r7, #8
    4f98:	46bd      	mov	sp, r7
    4f9a:	bd80      	pop	{r7, pc}
    4f9c:	0001f3a4 	.word	0x0001f3a4

00004fa0 <compile_store_id>:

STATIC void compile_store_id(compiler_t *comp, qstr qst) {
    4fa0:	b580      	push	{r7, lr}
    4fa2:	b082      	sub	sp, #8
    4fa4:	af00      	add	r7, sp, #0
    4fa6:	6078      	str	r0, [r7, #4]
    4fa8:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    4faa:	687b      	ldr	r3, [r7, #4]
    4fac:	795b      	ldrb	r3, [r3, #5]
    4fae:	2b01      	cmp	r3, #1
    4fb0:	d106      	bne.n	4fc0 <compile_store_id+0x20>
        mp_emit_common_get_id_for_modification(comp->scope_cur, qst);
    4fb2:	687b      	ldr	r3, [r7, #4]
    4fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4fb6:	6839      	ldr	r1, [r7, #0]
    4fb8:	4618      	mov	r0, r3
    4fba:	f004 fc6b 	bl	9894 <mp_emit_common_get_id_for_modification>
        mp_emit_common_id_op(comp->emit, &comp->emit_method_table->store_id, comp->scope_cur, qst);
        #else
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_store_id_ops, comp->scope_cur, qst);
        #endif
    }
}
    4fbe:	e007      	b.n	4fd0 <compile_store_id+0x30>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_store_id_ops, comp->scope_cur, qst);
    4fc0:	687b      	ldr	r3, [r7, #4]
    4fc2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4fc4:	687b      	ldr	r3, [r7, #4]
    4fc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4fc8:	683b      	ldr	r3, [r7, #0]
    4fca:	4903      	ldr	r1, [pc, #12]	; (4fd8 <compile_store_id+0x38>)
    4fcc:	f004 fc8e 	bl	98ec <mp_emit_common_id_op>
}
    4fd0:	bf00      	nop
    4fd2:	3708      	adds	r7, #8
    4fd4:	46bd      	mov	sp, r7
    4fd6:	bd80      	pop	{r7, pc}
    4fd8:	0001f3ac 	.word	0x0001f3ac

00004fdc <compile_delete_id>:

STATIC void compile_delete_id(compiler_t *comp, qstr qst) {
    4fdc:	b580      	push	{r7, lr}
    4fde:	b082      	sub	sp, #8
    4fe0:	af00      	add	r7, sp, #0
    4fe2:	6078      	str	r0, [r7, #4]
    4fe4:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    4fe6:	687b      	ldr	r3, [r7, #4]
    4fe8:	795b      	ldrb	r3, [r3, #5]
    4fea:	2b01      	cmp	r3, #1
    4fec:	d106      	bne.n	4ffc <compile_delete_id+0x20>
        mp_emit_common_get_id_for_modification(comp->scope_cur, qst);
    4fee:	687b      	ldr	r3, [r7, #4]
    4ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4ff2:	6839      	ldr	r1, [r7, #0]
    4ff4:	4618      	mov	r0, r3
    4ff6:	f004 fc4d 	bl	9894 <mp_emit_common_get_id_for_modification>
        mp_emit_common_id_op(comp->emit, &comp->emit_method_table->delete_id, comp->scope_cur, qst);
        #else
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_delete_id_ops, comp->scope_cur, qst);
        #endif
    }
}
    4ffa:	e007      	b.n	500c <compile_delete_id+0x30>
        mp_emit_common_id_op(comp->emit, &mp_emit_bc_method_table_delete_id_ops, comp->scope_cur, qst);
    4ffc:	687b      	ldr	r3, [r7, #4]
    4ffe:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5000:	687b      	ldr	r3, [r7, #4]
    5002:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5004:	683b      	ldr	r3, [r7, #0]
    5006:	4903      	ldr	r1, [pc, #12]	; (5014 <compile_delete_id+0x38>)
    5008:	f004 fc70 	bl	98ec <mp_emit_common_id_op>
}
    500c:	bf00      	nop
    500e:	3708      	adds	r7, #8
    5010:	46bd      	mov	sp, r7
    5012:	bd80      	pop	{r7, pc}
    5014:	0001f3b4 	.word	0x0001f3b4

00005018 <c_tuple>:

STATIC void c_tuple(compiler_t *comp, mp_parse_node_t pn, mp_parse_node_struct_t *pns_list) {
    5018:	b580      	push	{r7, lr}
    501a:	b088      	sub	sp, #32
    501c:	af00      	add	r7, sp, #0
    501e:	60f8      	str	r0, [r7, #12]
    5020:	60b9      	str	r1, [r7, #8]
    5022:	607a      	str	r2, [r7, #4]
    int total = 0;
    5024:	2300      	movs	r3, #0
    5026:	61fb      	str	r3, [r7, #28]
    if (!MP_PARSE_NODE_IS_NULL(pn)) {
    5028:	68bb      	ldr	r3, [r7, #8]
    502a:	2b00      	cmp	r3, #0
    502c:	d006      	beq.n	503c <c_tuple+0x24>
        compile_node(comp, pn);
    502e:	68b9      	ldr	r1, [r7, #8]
    5030:	68f8      	ldr	r0, [r7, #12]
    5032:	f003 fd0f 	bl	8a54 <compile_node>
        total += 1;
    5036:	69fb      	ldr	r3, [r7, #28]
    5038:	3301      	adds	r3, #1
    503a:	61fb      	str	r3, [r7, #28]
    }
    if (pns_list != NULL) {
    503c:	687b      	ldr	r3, [r7, #4]
    503e:	2b00      	cmp	r3, #0
    5040:	d01a      	beq.n	5078 <c_tuple+0x60>
        int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns_list);
    5042:	687b      	ldr	r3, [r7, #4]
    5044:	685b      	ldr	r3, [r3, #4]
    5046:	0a1b      	lsrs	r3, r3, #8
    5048:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < n; i++) {
    504a:	2300      	movs	r3, #0
    504c:	61bb      	str	r3, [r7, #24]
    504e:	e00b      	b.n	5068 <c_tuple+0x50>
            compile_node(comp, pns_list->nodes[i]);
    5050:	687b      	ldr	r3, [r7, #4]
    5052:	69ba      	ldr	r2, [r7, #24]
    5054:	3202      	adds	r2, #2
    5056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    505a:	4619      	mov	r1, r3
    505c:	68f8      	ldr	r0, [r7, #12]
    505e:	f003 fcf9 	bl	8a54 <compile_node>
        for (int i = 0; i < n; i++) {
    5062:	69bb      	ldr	r3, [r7, #24]
    5064:	3301      	adds	r3, #1
    5066:	61bb      	str	r3, [r7, #24]
    5068:	69ba      	ldr	r2, [r7, #24]
    506a:	697b      	ldr	r3, [r7, #20]
    506c:	429a      	cmp	r2, r3
    506e:	dbef      	blt.n	5050 <c_tuple+0x38>
        }
        total += n;
    5070:	69fa      	ldr	r2, [r7, #28]
    5072:	697b      	ldr	r3, [r7, #20]
    5074:	4413      	add	r3, r2
    5076:	61fb      	str	r3, [r7, #28]
    }
    EMIT_ARG(build, total, MP_EMIT_BUILD_TUPLE);
    5078:	68fb      	ldr	r3, [r7, #12]
    507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    507c:	69f9      	ldr	r1, [r7, #28]
    507e:	2200      	movs	r2, #0
    5080:	4618      	mov	r0, r3
    5082:	f005 fd4f 	bl	ab24 <mp_emit_bc_build>
}
    5086:	bf00      	nop
    5088:	3720      	adds	r7, #32
    508a:	46bd      	mov	sp, r7
    508c:	bd80      	pop	{r7, pc}
    508e:	bf00      	nop

00005090 <compile_generic_tuple>:

STATIC void compile_generic_tuple(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5090:	b580      	push	{r7, lr}
    5092:	b082      	sub	sp, #8
    5094:	af00      	add	r7, sp, #0
    5096:	6078      	str	r0, [r7, #4]
    5098:	6039      	str	r1, [r7, #0]
    // a simple tuple expression
    c_tuple(comp, MP_PARSE_NODE_NULL, pns);
    509a:	683a      	ldr	r2, [r7, #0]
    509c:	2100      	movs	r1, #0
    509e:	6878      	ldr	r0, [r7, #4]
    50a0:	f7ff ffba 	bl	5018 <c_tuple>
}
    50a4:	bf00      	nop
    50a6:	3708      	adds	r7, #8
    50a8:	46bd      	mov	sp, r7
    50aa:	bd80      	pop	{r7, pc}

000050ac <c_if_cond>:

STATIC void c_if_cond(compiler_t *comp, mp_parse_node_t pn, bool jump_if, int label) {
    50ac:	b580      	push	{r7, lr}
    50ae:	b08a      	sub	sp, #40	; 0x28
    50b0:	af00      	add	r7, sp, #0
    50b2:	60f8      	str	r0, [r7, #12]
    50b4:	60b9      	str	r1, [r7, #8]
    50b6:	603b      	str	r3, [r7, #0]
    50b8:	4613      	mov	r3, r2
    50ba:	71fb      	strb	r3, [r7, #7]
    if (mp_parse_node_is_const_false(pn)) {
    50bc:	68b8      	ldr	r0, [r7, #8]
    50be:	f7fe fcd3 	bl	3a68 <mp_parse_node_is_const_false>
    50c2:	4603      	mov	r3, r0
    50c4:	2b00      	cmp	r3, #0
    50c6:	d00e      	beq.n	50e6 <c_if_cond+0x3a>
        if (jump_if == false) {
    50c8:	79fb      	ldrb	r3, [r7, #7]
    50ca:	f083 0301 	eor.w	r3, r3, #1
    50ce:	b2db      	uxtb	r3, r3
    50d0:	2b00      	cmp	r3, #0
    50d2:	f000 80eb 	beq.w	52ac <c_if_cond+0x200>
            EMIT_ARG(jump, label);
    50d6:	68fb      	ldr	r3, [r7, #12]
    50d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    50da:	683a      	ldr	r2, [r7, #0]
    50dc:	4611      	mov	r1, r2
    50de:	4618      	mov	r0, r3
    50e0:	f005 fb90 	bl	a804 <mp_emit_bc_jump>
        }
        return;
    50e4:	e0e2      	b.n	52ac <c_if_cond+0x200>
    } else if (mp_parse_node_is_const_true(pn)) {
    50e6:	68b8      	ldr	r0, [r7, #8]
    50e8:	f7fe fcda 	bl	3aa0 <mp_parse_node_is_const_true>
    50ec:	4603      	mov	r3, r0
    50ee:	2b00      	cmp	r3, #0
    50f0:	d00b      	beq.n	510a <c_if_cond+0x5e>
        if (jump_if == true) {
    50f2:	79fb      	ldrb	r3, [r7, #7]
    50f4:	2b00      	cmp	r3, #0
    50f6:	f000 80db 	beq.w	52b0 <c_if_cond+0x204>
            EMIT_ARG(jump, label);
    50fa:	68fb      	ldr	r3, [r7, #12]
    50fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    50fe:	683a      	ldr	r2, [r7, #0]
    5100:	4611      	mov	r1, r2
    5102:	4618      	mov	r0, r3
    5104:	f005 fb7e 	bl	a804 <mp_emit_bc_jump>
        }
        return;
    5108:	e0d2      	b.n	52b0 <c_if_cond+0x204>
    } else if (MP_PARSE_NODE_IS_STRUCT(pn)) {
    510a:	68bb      	ldr	r3, [r7, #8]
    510c:	2b00      	cmp	r3, #0
    510e:	f000 80c1 	beq.w	5294 <c_if_cond+0x1e8>
    5112:	68bb      	ldr	r3, [r7, #8]
    5114:	f003 0303 	and.w	r3, r3, #3
    5118:	2b00      	cmp	r3, #0
    511a:	f040 80bb 	bne.w	5294 <c_if_cond+0x1e8>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    511e:	68bb      	ldr	r3, [r7, #8]
    5120:	61fb      	str	r3, [r7, #28]
        int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    5122:	69fb      	ldr	r3, [r7, #28]
    5124:	685b      	ldr	r3, [r3, #4]
    5126:	0a1b      	lsrs	r3, r3, #8
    5128:	61bb      	str	r3, [r7, #24]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_or_test) {
    512a:	69fb      	ldr	r3, [r7, #28]
    512c:	685b      	ldr	r3, [r3, #4]
    512e:	b2db      	uxtb	r3, r3
    5130:	2b1c      	cmp	r3, #28
    5132:	d152      	bne.n	51da <c_if_cond+0x12e>
            if (jump_if == false) {
    5134:	79fb      	ldrb	r3, [r7, #7]
    5136:	f083 0301 	eor.w	r3, r3, #1
    513a:	b2db      	uxtb	r3, r3
    513c:	2b00      	cmp	r3, #0
    513e:	d037      	beq.n	51b0 <c_if_cond+0x104>
    5140:	e000      	b.n	5144 <c_if_cond+0x98>
            return;
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_and_test) {
            if (jump_if == false) {
                goto and_or_logic2;
            } else {
                goto and_or_logic1;
    5142:	bf00      	nop
                uint label2 = comp_next_label(comp);
    5144:	68f8      	ldr	r0, [r7, #12]
    5146:	f7ff fe27 	bl	4d98 <comp_next_label>
    514a:	6178      	str	r0, [r7, #20]
                for (int i = 0; i < n - 1; i++) {
    514c:	2300      	movs	r3, #0
    514e:	627b      	str	r3, [r7, #36]	; 0x24
    5150:	e017      	b.n	5182 <c_if_cond+0xd6>
                    c_if_cond(comp, pns->nodes[i], !jump_if, label2);
    5152:	69fb      	ldr	r3, [r7, #28]
    5154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5156:	3202      	adds	r2, #2
    5158:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    515c:	79fb      	ldrb	r3, [r7, #7]
    515e:	2b00      	cmp	r3, #0
    5160:	bf14      	ite	ne
    5162:	2301      	movne	r3, #1
    5164:	2300      	moveq	r3, #0
    5166:	b2db      	uxtb	r3, r3
    5168:	f083 0301 	eor.w	r3, r3, #1
    516c:	b2db      	uxtb	r3, r3
    516e:	f003 0301 	and.w	r3, r3, #1
    5172:	b2da      	uxtb	r2, r3
    5174:	697b      	ldr	r3, [r7, #20]
    5176:	68f8      	ldr	r0, [r7, #12]
    5178:	f7ff ff98 	bl	50ac <c_if_cond>
                for (int i = 0; i < n - 1; i++) {
    517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    517e:	3301      	adds	r3, #1
    5180:	627b      	str	r3, [r7, #36]	; 0x24
    5182:	69bb      	ldr	r3, [r7, #24]
    5184:	1e5a      	subs	r2, r3, #1
    5186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5188:	429a      	cmp	r2, r3
    518a:	dce2      	bgt.n	5152 <c_if_cond+0xa6>
                c_if_cond(comp, pns->nodes[n - 1], jump_if, label);
    518c:	69bb      	ldr	r3, [r7, #24]
    518e:	1e5a      	subs	r2, r3, #1
    5190:	69fb      	ldr	r3, [r7, #28]
    5192:	3202      	adds	r2, #2
    5194:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    5198:	79fa      	ldrb	r2, [r7, #7]
    519a:	683b      	ldr	r3, [r7, #0]
    519c:	68f8      	ldr	r0, [r7, #12]
    519e:	f7ff ff85 	bl	50ac <c_if_cond>
                EMIT_ARG(label_assign, label2);
    51a2:	68fb      	ldr	r3, [r7, #12]
    51a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    51a6:	6979      	ldr	r1, [r7, #20]
    51a8:	4618      	mov	r0, r3
    51aa:	f005 f89d 	bl	a2e8 <mp_emit_bc_label_assign>
            return;
    51ae:	e082      	b.n	52b6 <c_if_cond+0x20a>
                for (int i = 0; i < n; i++) {
    51b0:	2300      	movs	r3, #0
    51b2:	623b      	str	r3, [r7, #32]
    51b4:	e00c      	b.n	51d0 <c_if_cond+0x124>
                    c_if_cond(comp, pns->nodes[i], jump_if, label);
    51b6:	69fb      	ldr	r3, [r7, #28]
    51b8:	6a3a      	ldr	r2, [r7, #32]
    51ba:	3202      	adds	r2, #2
    51bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    51c0:	79fa      	ldrb	r2, [r7, #7]
    51c2:	683b      	ldr	r3, [r7, #0]
    51c4:	68f8      	ldr	r0, [r7, #12]
    51c6:	f7ff ff71 	bl	50ac <c_if_cond>
                for (int i = 0; i < n; i++) {
    51ca:	6a3b      	ldr	r3, [r7, #32]
    51cc:	3301      	adds	r3, #1
    51ce:	623b      	str	r3, [r7, #32]
    51d0:	6a3a      	ldr	r2, [r7, #32]
    51d2:	69bb      	ldr	r3, [r7, #24]
    51d4:	429a      	cmp	r2, r3
    51d6:	dbee      	blt.n	51b6 <c_if_cond+0x10a>
            return;
    51d8:	e06d      	b.n	52b6 <c_if_cond+0x20a>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_and_test) {
    51da:	69fb      	ldr	r3, [r7, #28]
    51dc:	685b      	ldr	r3, [r3, #4]
    51de:	b2db      	uxtb	r3, r3
    51e0:	2b1d      	cmp	r3, #29
    51e2:	d106      	bne.n	51f2 <c_if_cond+0x146>
            if (jump_if == false) {
    51e4:	79fb      	ldrb	r3, [r7, #7]
    51e6:	f083 0301 	eor.w	r3, r3, #1
    51ea:	b2db      	uxtb	r3, r3
    51ec:	2b00      	cmp	r3, #0
    51ee:	d0a8      	beq.n	5142 <c_if_cond+0x96>
                goto and_or_logic2;
    51f0:	e7de      	b.n	51b0 <c_if_cond+0x104>
            }
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_not_test_2) {
    51f2:	69fb      	ldr	r3, [r7, #28]
    51f4:	685b      	ldr	r3, [r3, #4]
    51f6:	b2db      	uxtb	r3, r3
    51f8:	2b1e      	cmp	r3, #30
    51fa:	d112      	bne.n	5222 <c_if_cond+0x176>
            c_if_cond(comp, pns->nodes[0], !jump_if, label);
    51fc:	69fb      	ldr	r3, [r7, #28]
    51fe:	6899      	ldr	r1, [r3, #8]
    5200:	79fb      	ldrb	r3, [r7, #7]
    5202:	2b00      	cmp	r3, #0
    5204:	bf14      	ite	ne
    5206:	2301      	movne	r3, #1
    5208:	2300      	moveq	r3, #0
    520a:	b2db      	uxtb	r3, r3
    520c:	f083 0301 	eor.w	r3, r3, #1
    5210:	b2db      	uxtb	r3, r3
    5212:	f003 0301 	and.w	r3, r3, #1
    5216:	b2da      	uxtb	r2, r3
    5218:	683b      	ldr	r3, [r7, #0]
    521a:	68f8      	ldr	r0, [r7, #12]
    521c:	f7ff ff46 	bl	50ac <c_if_cond>
            return;
    5220:	e049      	b.n	52b6 <c_if_cond+0x20a>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_atom_paren) {
    5222:	69fb      	ldr	r3, [r7, #28]
    5224:	685b      	ldr	r3, [r3, #4]
    5226:	b2db      	uxtb	r3, r3
    5228:	2b2a      	cmp	r3, #42	; 0x2a
    522a:	d133      	bne.n	5294 <c_if_cond+0x1e8>
            // cond is something in parenthesis
            if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    522c:	69fb      	ldr	r3, [r7, #28]
    522e:	689b      	ldr	r3, [r3, #8]
    5230:	2b00      	cmp	r3, #0
    5232:	d10d      	bne.n	5250 <c_if_cond+0x1a4>
                // empty tuple, acts as false for the condition
                if (jump_if == false) {
    5234:	79fb      	ldrb	r3, [r7, #7]
    5236:	f083 0301 	eor.w	r3, r3, #1
    523a:	b2db      	uxtb	r3, r3
    523c:	2b00      	cmp	r3, #0
    523e:	d039      	beq.n	52b4 <c_if_cond+0x208>
                    EMIT_ARG(jump, label);
    5240:	68fb      	ldr	r3, [r7, #12]
    5242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5244:	683a      	ldr	r2, [r7, #0]
    5246:	4611      	mov	r1, r2
    5248:	4618      	mov	r0, r3
    524a:	f005 fadb 	bl	a804 <mp_emit_bc_jump>
                // non-empty tuple, acts as true for the condition
                if (jump_if == true) {
                    EMIT_ARG(jump, label);
                }
            }
            return;
    524e:	e031      	b.n	52b4 <c_if_cond+0x208>
                assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    5250:	69fb      	ldr	r3, [r7, #28]
    5252:	689b      	ldr	r3, [r3, #8]
    5254:	2b00      	cmp	r3, #0
    5256:	d00b      	beq.n	5270 <c_if_cond+0x1c4>
    5258:	69fb      	ldr	r3, [r7, #28]
    525a:	689b      	ldr	r3, [r3, #8]
    525c:	f003 0303 	and.w	r3, r3, #3
    5260:	2b00      	cmp	r3, #0
    5262:	d105      	bne.n	5270 <c_if_cond+0x1c4>
    5264:	69fb      	ldr	r3, [r7, #28]
    5266:	689b      	ldr	r3, [r3, #8]
    5268:	685b      	ldr	r3, [r3, #4]
    526a:	b2db      	uxtb	r3, r3
    526c:	2b8a      	cmp	r3, #138	; 0x8a
    526e:	d006      	beq.n	527e <c_if_cond+0x1d2>
    5270:	4b12      	ldr	r3, [pc, #72]	; (52bc <c_if_cond+0x210>)
    5272:	4a13      	ldr	r2, [pc, #76]	; (52c0 <c_if_cond+0x214>)
    5274:	f240 114b 	movw	r1, #331	; 0x14b
    5278:	4812      	ldr	r0, [pc, #72]	; (52c4 <c_if_cond+0x218>)
    527a:	f016 f877 	bl	1b36c <__assert_func>
                if (jump_if == true) {
    527e:	79fb      	ldrb	r3, [r7, #7]
    5280:	2b00      	cmp	r3, #0
    5282:	d017      	beq.n	52b4 <c_if_cond+0x208>
                    EMIT_ARG(jump, label);
    5284:	68fb      	ldr	r3, [r7, #12]
    5286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5288:	683a      	ldr	r2, [r7, #0]
    528a:	4611      	mov	r1, r2
    528c:	4618      	mov	r0, r3
    528e:	f005 fab9 	bl	a804 <mp_emit_bc_jump>
            return;
    5292:	e00f      	b.n	52b4 <c_if_cond+0x208>
        }
    }

    // nothing special, fall back to default compiling for node and jump
    compile_node(comp, pn);
    5294:	68b9      	ldr	r1, [r7, #8]
    5296:	68f8      	ldr	r0, [r7, #12]
    5298:	f003 fbdc 	bl	8a54 <compile_node>
    EMIT_ARG(pop_jump_if, jump_if, label);
    529c:	68fb      	ldr	r3, [r7, #12]
    529e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    52a0:	683a      	ldr	r2, [r7, #0]
    52a2:	79f9      	ldrb	r1, [r7, #7]
    52a4:	4618      	mov	r0, r3
    52a6:	f005 fabf 	bl	a828 <mp_emit_bc_pop_jump_if>
    52aa:	e004      	b.n	52b6 <c_if_cond+0x20a>
        return;
    52ac:	bf00      	nop
    52ae:	e002      	b.n	52b6 <c_if_cond+0x20a>
        return;
    52b0:	bf00      	nop
    52b2:	e000      	b.n	52b6 <c_if_cond+0x20a>
            return;
    52b4:	bf00      	nop
}
    52b6:	3728      	adds	r7, #40	; 0x28
    52b8:	46bd      	mov	sp, r7
    52ba:	bd80      	pop	{r7, pc}
    52bc:	0001e318 	.word	0x0001e318
    52c0:	0001ee9c 	.word	0x0001ee9c
    52c4:	0001e304 	.word	0x0001e304

000052c8 <c_assign_atom_expr>:

typedef enum { ASSIGN_STORE, ASSIGN_AUG_LOAD, ASSIGN_AUG_STORE } assign_kind_t;
STATIC void c_assign(compiler_t *comp, mp_parse_node_t pn, assign_kind_t kind);

STATIC void c_assign_atom_expr(compiler_t *comp, mp_parse_node_struct_t *pns, assign_kind_t assign_kind) {
    52c8:	b580      	push	{r7, lr}
    52ca:	b088      	sub	sp, #32
    52cc:	af00      	add	r7, sp, #0
    52ce:	60f8      	str	r0, [r7, #12]
    52d0:	60b9      	str	r1, [r7, #8]
    52d2:	607a      	str	r2, [r7, #4]
    if (assign_kind != ASSIGN_AUG_STORE) {
    52d4:	687b      	ldr	r3, [r7, #4]
    52d6:	2b02      	cmp	r3, #2
    52d8:	d005      	beq.n	52e6 <c_assign_atom_expr+0x1e>
        compile_node(comp, pns->nodes[0]);
    52da:	68bb      	ldr	r3, [r7, #8]
    52dc:	689b      	ldr	r3, [r3, #8]
    52de:	4619      	mov	r1, r3
    52e0:	68f8      	ldr	r0, [r7, #12]
    52e2:	f003 fbb7 	bl	8a54 <compile_node>
    }

    if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    52e6:	68bb      	ldr	r3, [r7, #8]
    52e8:	68db      	ldr	r3, [r3, #12]
    52ea:	2b00      	cmp	r3, #0
    52ec:	f000 80b0 	beq.w	5450 <c_assign_atom_expr+0x188>
    52f0:	68bb      	ldr	r3, [r7, #8]
    52f2:	68db      	ldr	r3, [r3, #12]
    52f4:	f003 0303 	and.w	r3, r3, #3
    52f8:	2b00      	cmp	r3, #0
    52fa:	f040 80a9 	bne.w	5450 <c_assign_atom_expr+0x188>
        mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    52fe:	68bb      	ldr	r3, [r7, #8]
    5300:	68db      	ldr	r3, [r3, #12]
    5302:	61fb      	str	r3, [r7, #28]
        if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_atom_expr_trailers) {
    5304:	69fb      	ldr	r3, [r7, #28]
    5306:	685b      	ldr	r3, [r3, #4]
    5308:	b2db      	uxtb	r3, r3
    530a:	2b86      	cmp	r3, #134	; 0x86
    530c:	d13a      	bne.n	5384 <c_assign_atom_expr+0xbc>
            int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    530e:	69fb      	ldr	r3, [r7, #28]
    5310:	685b      	ldr	r3, [r3, #4]
    5312:	0a1b      	lsrs	r3, r3, #8
    5314:	617b      	str	r3, [r7, #20]
            if (assign_kind != ASSIGN_AUG_STORE) {
    5316:	687b      	ldr	r3, [r7, #4]
    5318:	2b02      	cmp	r3, #2
    531a:	d013      	beq.n	5344 <c_assign_atom_expr+0x7c>
                for (int i = 0; i < n - 1; i++) {
    531c:	2300      	movs	r3, #0
    531e:	61bb      	str	r3, [r7, #24]
    5320:	e00b      	b.n	533a <c_assign_atom_expr+0x72>
                    compile_node(comp, pns1->nodes[i]);
    5322:	69fb      	ldr	r3, [r7, #28]
    5324:	69ba      	ldr	r2, [r7, #24]
    5326:	3202      	adds	r2, #2
    5328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    532c:	4619      	mov	r1, r3
    532e:	68f8      	ldr	r0, [r7, #12]
    5330:	f003 fb90 	bl	8a54 <compile_node>
                for (int i = 0; i < n - 1; i++) {
    5334:	69bb      	ldr	r3, [r7, #24]
    5336:	3301      	adds	r3, #1
    5338:	61bb      	str	r3, [r7, #24]
    533a:	697b      	ldr	r3, [r7, #20]
    533c:	1e5a      	subs	r2, r3, #1
    533e:	69bb      	ldr	r3, [r7, #24]
    5340:	429a      	cmp	r2, r3
    5342:	dcee      	bgt.n	5322 <c_assign_atom_expr+0x5a>
                }
            }
            assert(MP_PARSE_NODE_IS_STRUCT(pns1->nodes[n - 1]));
    5344:	697b      	ldr	r3, [r7, #20]
    5346:	1e5a      	subs	r2, r3, #1
    5348:	69fb      	ldr	r3, [r7, #28]
    534a:	3202      	adds	r2, #2
    534c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5350:	2b00      	cmp	r3, #0
    5352:	d009      	beq.n	5368 <c_assign_atom_expr+0xa0>
    5354:	697b      	ldr	r3, [r7, #20]
    5356:	1e5a      	subs	r2, r3, #1
    5358:	69fb      	ldr	r3, [r7, #28]
    535a:	3202      	adds	r2, #2
    535c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5360:	f003 0303 	and.w	r3, r3, #3
    5364:	2b00      	cmp	r3, #0
    5366:	d006      	beq.n	5376 <c_assign_atom_expr+0xae>
    5368:	4b3e      	ldr	r3, [pc, #248]	; (5464 <c_assign_atom_expr+0x19c>)
    536a:	4a3f      	ldr	r2, [pc, #252]	; (5468 <c_assign_atom_expr+0x1a0>)
    536c:	f240 116b 	movw	r1, #363	; 0x16b
    5370:	483e      	ldr	r0, [pc, #248]	; (546c <c_assign_atom_expr+0x1a4>)
    5372:	f015 fffb 	bl	1b36c <__assert_func>
            pns1 = (mp_parse_node_struct_t*)pns1->nodes[n - 1];
    5376:	697b      	ldr	r3, [r7, #20]
    5378:	1e5a      	subs	r2, r3, #1
    537a:	69fb      	ldr	r3, [r7, #28]
    537c:	3202      	adds	r2, #2
    537e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5382:	61fb      	str	r3, [r7, #28]
        }
        if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_bracket) {
    5384:	69fb      	ldr	r3, [r7, #28]
    5386:	685b      	ldr	r3, [r3, #4]
    5388:	b2db      	uxtb	r3, r3
    538a:	2b2e      	cmp	r3, #46	; 0x2e
    538c:	d12a      	bne.n	53e4 <c_assign_atom_expr+0x11c>
            if (assign_kind == ASSIGN_AUG_STORE) {
    538e:	687b      	ldr	r3, [r7, #4]
    5390:	2b02      	cmp	r3, #2
    5392:	d10b      	bne.n	53ac <c_assign_atom_expr+0xe4>
                EMIT(rot_three);
    5394:	68fb      	ldr	r3, [r7, #12]
    5396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5398:	4618      	mov	r0, r3
    539a:	f005 fa23 	bl	a7e4 <mp_emit_bc_rot_three>
                EMIT_ARG(subscr, MP_EMIT_SUBSCR_STORE);
    539e:	68fb      	ldr	r3, [r7, #12]
    53a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53a2:	2101      	movs	r1, #1
    53a4:	4618      	mov	r0, r3
    53a6:	f005 f91d 	bl	a5e4 <mp_emit_bc_subscr>
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_LOAD);
                } else {
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_STORE);
                }
            }
            return;
    53aa:	e057      	b.n	545c <c_assign_atom_expr+0x194>
                compile_node(comp, pns1->nodes[0]);
    53ac:	69fb      	ldr	r3, [r7, #28]
    53ae:	689b      	ldr	r3, [r3, #8]
    53b0:	4619      	mov	r1, r3
    53b2:	68f8      	ldr	r0, [r7, #12]
    53b4:	f003 fb4e 	bl	8a54 <compile_node>
                if (assign_kind == ASSIGN_AUG_LOAD) {
    53b8:	687b      	ldr	r3, [r7, #4]
    53ba:	2b01      	cmp	r3, #1
    53bc:	d10b      	bne.n	53d6 <c_assign_atom_expr+0x10e>
                    EMIT(dup_top_two);
    53be:	68fb      	ldr	r3, [r7, #12]
    53c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53c2:	4618      	mov	r0, r3
    53c4:	f005 f9dc 	bl	a780 <mp_emit_bc_dup_top_two>
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_LOAD);
    53c8:	68fb      	ldr	r3, [r7, #12]
    53ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53cc:	2100      	movs	r1, #0
    53ce:	4618      	mov	r0, r3
    53d0:	f005 f908 	bl	a5e4 <mp_emit_bc_subscr>
            return;
    53d4:	e042      	b.n	545c <c_assign_atom_expr+0x194>
                    EMIT_ARG(subscr, MP_EMIT_SUBSCR_STORE);
    53d6:	68fb      	ldr	r3, [r7, #12]
    53d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53da:	2101      	movs	r1, #1
    53dc:	4618      	mov	r0, r3
    53de:	f005 f901 	bl	a5e4 <mp_emit_bc_subscr>
            return;
    53e2:	e03b      	b.n	545c <c_assign_atom_expr+0x194>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_period) {
    53e4:	69fb      	ldr	r3, [r7, #28]
    53e6:	685b      	ldr	r3, [r3, #4]
    53e8:	b2db      	uxtb	r3, r3
    53ea:	2b2f      	cmp	r3, #47	; 0x2f
    53ec:	d130      	bne.n	5450 <c_assign_atom_expr+0x188>
            assert(MP_PARSE_NODE_IS_ID(pns1->nodes[0]));
    53ee:	69fb      	ldr	r3, [r7, #28]
    53f0:	689b      	ldr	r3, [r3, #8]
    53f2:	f003 030f 	and.w	r3, r3, #15
    53f6:	2b02      	cmp	r3, #2
    53f8:	d006      	beq.n	5408 <c_assign_atom_expr+0x140>
    53fa:	4b1d      	ldr	r3, [pc, #116]	; (5470 <c_assign_atom_expr+0x1a8>)
    53fc:	4a1a      	ldr	r2, [pc, #104]	; (5468 <c_assign_atom_expr+0x1a0>)
    53fe:	f240 117d 	movw	r1, #381	; 0x17d
    5402:	481a      	ldr	r0, [pc, #104]	; (546c <c_assign_atom_expr+0x1a4>)
    5404:	f015 ffb2 	bl	1b36c <__assert_func>
            if (assign_kind == ASSIGN_AUG_LOAD) {
    5408:	687b      	ldr	r3, [r7, #4]
    540a:	2b01      	cmp	r3, #1
    540c:	d10e      	bne.n	542c <c_assign_atom_expr+0x164>
                EMIT(dup_top);
    540e:	68fb      	ldr	r3, [r7, #12]
    5410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5412:	4618      	mov	r0, r3
    5414:	f005 f9a4 	bl	a760 <mp_emit_bc_dup_top>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_LOAD);
    5418:	68fb      	ldr	r3, [r7, #12]
    541a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    541c:	69fb      	ldr	r3, [r7, #28]
    541e:	689b      	ldr	r3, [r3, #8]
    5420:	091b      	lsrs	r3, r3, #4
    5422:	2200      	movs	r2, #0
    5424:	4619      	mov	r1, r3
    5426:	f005 f905 	bl	a634 <mp_emit_bc_attr>
                if (assign_kind == ASSIGN_AUG_STORE) {
                    EMIT(rot_two);
                }
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_STORE);
            }
            return;
    542a:	e017      	b.n	545c <c_assign_atom_expr+0x194>
                if (assign_kind == ASSIGN_AUG_STORE) {
    542c:	687b      	ldr	r3, [r7, #4]
    542e:	2b02      	cmp	r3, #2
    5430:	d104      	bne.n	543c <c_assign_atom_expr+0x174>
                    EMIT(rot_two);
    5432:	68fb      	ldr	r3, [r7, #12]
    5434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5436:	4618      	mov	r0, r3
    5438:	f005 f9c4 	bl	a7c4 <mp_emit_bc_rot_two>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_STORE);
    543c:	68fb      	ldr	r3, [r7, #12]
    543e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5440:	69fb      	ldr	r3, [r7, #28]
    5442:	689b      	ldr	r3, [r3, #8]
    5444:	091b      	lsrs	r3, r3, #4
    5446:	2201      	movs	r2, #1
    5448:	4619      	mov	r1, r3
    544a:	f005 f8f3 	bl	a634 <mp_emit_bc_attr>
            return;
    544e:	e005      	b.n	545c <c_assign_atom_expr+0x194>
        }
    }

    compile_syntax_error(comp, (mp_parse_node_t)pns, "can't assign to expression");
    5450:	68bb      	ldr	r3, [r7, #8]
    5452:	4a08      	ldr	r2, [pc, #32]	; (5474 <c_assign_atom_expr+0x1ac>)
    5454:	4619      	mov	r1, r3
    5456:	68f8      	ldr	r0, [r7, #12]
    5458:	f7ff fc82 	bl	4d60 <compile_syntax_error>
}
    545c:	3720      	adds	r7, #32
    545e:	46bd      	mov	sp, r7
    5460:	bd80      	pop	{r7, pc}
    5462:	bf00      	nop
    5464:	0001e358 	.word	0x0001e358
    5468:	0001eea8 	.word	0x0001eea8
    546c:	0001e304 	.word	0x0001e304
    5470:	0001e384 	.word	0x0001e384
    5474:	0001e3a8 	.word	0x0001e3a8

00005478 <c_assign_tuple>:

// we need to allow for a caller passing in 1 initial node (node_head) followed by an array of nodes (nodes_tail)
STATIC void c_assign_tuple(compiler_t *comp, mp_parse_node_t node_head, uint num_tail, mp_parse_node_t *nodes_tail) {
    5478:	b580      	push	{r7, lr}
    547a:	b088      	sub	sp, #32
    547c:	af00      	add	r7, sp, #0
    547e:	60f8      	str	r0, [r7, #12]
    5480:	60b9      	str	r1, [r7, #8]
    5482:	607a      	str	r2, [r7, #4]
    5484:	603b      	str	r3, [r7, #0]
    uint num_head = (node_head == MP_PARSE_NODE_NULL) ? 0 : 1;
    5486:	68bb      	ldr	r3, [r7, #8]
    5488:	2b00      	cmp	r3, #0
    548a:	bf14      	ite	ne
    548c:	2301      	movne	r3, #1
    548e:	2300      	moveq	r3, #0
    5490:	b2db      	uxtb	r3, r3
    5492:	613b      	str	r3, [r7, #16]

    // look for star expression
    uint have_star_index = -1;
    5494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5498:	61fb      	str	r3, [r7, #28]
    if (num_head != 0 && MP_PARSE_NODE_IS_STRUCT_KIND(node_head, PN_star_expr)) {
    549a:	693b      	ldr	r3, [r7, #16]
    549c:	2b00      	cmp	r3, #0
    549e:	d015      	beq.n	54cc <c_assign_tuple+0x54>
    54a0:	68bb      	ldr	r3, [r7, #8]
    54a2:	2b00      	cmp	r3, #0
    54a4:	d012      	beq.n	54cc <c_assign_tuple+0x54>
    54a6:	68bb      	ldr	r3, [r7, #8]
    54a8:	f003 0303 	and.w	r3, r3, #3
    54ac:	2b00      	cmp	r3, #0
    54ae:	d10d      	bne.n	54cc <c_assign_tuple+0x54>
    54b0:	68bb      	ldr	r3, [r7, #8]
    54b2:	685b      	ldr	r3, [r3, #4]
    54b4:	b2db      	uxtb	r3, r3
    54b6:	2b20      	cmp	r3, #32
    54b8:	d108      	bne.n	54cc <c_assign_tuple+0x54>
        EMIT_ARG(unpack_ex, 0, num_tail);
    54ba:	68fb      	ldr	r3, [r7, #12]
    54bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    54be:	687a      	ldr	r2, [r7, #4]
    54c0:	2100      	movs	r1, #0
    54c2:	4618      	mov	r0, r3
    54c4:	f005 fb9e 	bl	ac04 <mp_emit_bc_unpack_ex>
        have_star_index = 0;
    54c8:	2300      	movs	r3, #0
    54ca:	61fb      	str	r3, [r7, #28]
    }
    for (uint i = 0; i < num_tail; i++) {
    54cc:	2300      	movs	r3, #0
    54ce:	61bb      	str	r3, [r7, #24]
    54d0:	e03b      	b.n	554a <c_assign_tuple+0xd2>
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes_tail[i], PN_star_expr)) {
    54d2:	69bb      	ldr	r3, [r7, #24]
    54d4:	009b      	lsls	r3, r3, #2
    54d6:	683a      	ldr	r2, [r7, #0]
    54d8:	4413      	add	r3, r2
    54da:	681b      	ldr	r3, [r3, #0]
    54dc:	2b00      	cmp	r3, #0
    54de:	d031      	beq.n	5544 <c_assign_tuple+0xcc>
    54e0:	69bb      	ldr	r3, [r7, #24]
    54e2:	009b      	lsls	r3, r3, #2
    54e4:	683a      	ldr	r2, [r7, #0]
    54e6:	4413      	add	r3, r2
    54e8:	681b      	ldr	r3, [r3, #0]
    54ea:	f003 0303 	and.w	r3, r3, #3
    54ee:	2b00      	cmp	r3, #0
    54f0:	d128      	bne.n	5544 <c_assign_tuple+0xcc>
    54f2:	69bb      	ldr	r3, [r7, #24]
    54f4:	009b      	lsls	r3, r3, #2
    54f6:	683a      	ldr	r2, [r7, #0]
    54f8:	4413      	add	r3, r2
    54fa:	681b      	ldr	r3, [r3, #0]
    54fc:	685b      	ldr	r3, [r3, #4]
    54fe:	b2db      	uxtb	r3, r3
    5500:	2b20      	cmp	r3, #32
    5502:	d11f      	bne.n	5544 <c_assign_tuple+0xcc>
            if (have_star_index == (uint)-1) {
    5504:	69fb      	ldr	r3, [r7, #28]
    5506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    550a:	d110      	bne.n	552e <c_assign_tuple+0xb6>
                EMIT_ARG(unpack_ex, num_head + i, num_tail - i - 1);
    550c:	68fb      	ldr	r3, [r7, #12]
    550e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5510:	693a      	ldr	r2, [r7, #16]
    5512:	69bb      	ldr	r3, [r7, #24]
    5514:	18d1      	adds	r1, r2, r3
    5516:	687a      	ldr	r2, [r7, #4]
    5518:	69bb      	ldr	r3, [r7, #24]
    551a:	1ad3      	subs	r3, r2, r3
    551c:	3b01      	subs	r3, #1
    551e:	461a      	mov	r2, r3
    5520:	f005 fb70 	bl	ac04 <mp_emit_bc_unpack_ex>
                have_star_index = num_head + i;
    5524:	693a      	ldr	r2, [r7, #16]
    5526:	69bb      	ldr	r3, [r7, #24]
    5528:	4413      	add	r3, r2
    552a:	61fb      	str	r3, [r7, #28]
    552c:	e00a      	b.n	5544 <c_assign_tuple+0xcc>
            } else {
                compile_syntax_error(comp, nodes_tail[i], "multiple *x in assignment");
    552e:	69bb      	ldr	r3, [r7, #24]
    5530:	009b      	lsls	r3, r3, #2
    5532:	683a      	ldr	r2, [r7, #0]
    5534:	4413      	add	r3, r2
    5536:	681b      	ldr	r3, [r3, #0]
    5538:	4a2a      	ldr	r2, [pc, #168]	; (55e4 <c_assign_tuple+0x16c>)
    553a:	4619      	mov	r1, r3
    553c:	68f8      	ldr	r0, [r7, #12]
    553e:	f7ff fc0f 	bl	4d60 <compile_syntax_error>
                return;
    5542:	e04b      	b.n	55dc <c_assign_tuple+0x164>
    for (uint i = 0; i < num_tail; i++) {
    5544:	69bb      	ldr	r3, [r7, #24]
    5546:	3301      	adds	r3, #1
    5548:	61bb      	str	r3, [r7, #24]
    554a:	69ba      	ldr	r2, [r7, #24]
    554c:	687b      	ldr	r3, [r7, #4]
    554e:	429a      	cmp	r2, r3
    5550:	d3bf      	bcc.n	54d2 <c_assign_tuple+0x5a>
            }
        }
    }
    if (have_star_index == (uint)-1) {
    5552:	69fb      	ldr	r3, [r7, #28]
    5554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5558:	d107      	bne.n	556a <c_assign_tuple+0xf2>
        EMIT_ARG(unpack_sequence, num_head + num_tail);
    555a:	68fb      	ldr	r3, [r7, #12]
    555c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    555e:	693a      	ldr	r2, [r7, #16]
    5560:	687b      	ldr	r3, [r7, #4]
    5562:	4413      	add	r3, r2
    5564:	4619      	mov	r1, r3
    5566:	f005 fb39 	bl	abdc <mp_emit_bc_unpack_sequence>
    }
    if (num_head != 0) {
    556a:	693b      	ldr	r3, [r7, #16]
    556c:	2b00      	cmp	r3, #0
    556e:	d00f      	beq.n	5590 <c_assign_tuple+0x118>
        if (0 == have_star_index) {
    5570:	69fb      	ldr	r3, [r7, #28]
    5572:	2b00      	cmp	r3, #0
    5574:	d107      	bne.n	5586 <c_assign_tuple+0x10e>
            c_assign(comp, ((mp_parse_node_struct_t*)node_head)->nodes[0], ASSIGN_STORE);
    5576:	68bb      	ldr	r3, [r7, #8]
    5578:	689b      	ldr	r3, [r3, #8]
    557a:	2200      	movs	r2, #0
    557c:	4619      	mov	r1, r3
    557e:	68f8      	ldr	r0, [r7, #12]
    5580:	f000 f832 	bl	55e8 <c_assign>
    5584:	e004      	b.n	5590 <c_assign_tuple+0x118>
        } else {
            c_assign(comp, node_head, ASSIGN_STORE);
    5586:	2200      	movs	r2, #0
    5588:	68b9      	ldr	r1, [r7, #8]
    558a:	68f8      	ldr	r0, [r7, #12]
    558c:	f000 f82c 	bl	55e8 <c_assign>
        }
    }
    for (uint i = 0; i < num_tail; i++) {
    5590:	2300      	movs	r3, #0
    5592:	617b      	str	r3, [r7, #20]
    5594:	e01e      	b.n	55d4 <c_assign_tuple+0x15c>
        if (num_head + i == have_star_index) {
    5596:	693a      	ldr	r2, [r7, #16]
    5598:	697b      	ldr	r3, [r7, #20]
    559a:	441a      	add	r2, r3
    559c:	69fb      	ldr	r3, [r7, #28]
    559e:	429a      	cmp	r2, r3
    55a0:	d10b      	bne.n	55ba <c_assign_tuple+0x142>
            c_assign(comp, ((mp_parse_node_struct_t*)nodes_tail[i])->nodes[0], ASSIGN_STORE);
    55a2:	697b      	ldr	r3, [r7, #20]
    55a4:	009b      	lsls	r3, r3, #2
    55a6:	683a      	ldr	r2, [r7, #0]
    55a8:	4413      	add	r3, r2
    55aa:	681b      	ldr	r3, [r3, #0]
    55ac:	689b      	ldr	r3, [r3, #8]
    55ae:	2200      	movs	r2, #0
    55b0:	4619      	mov	r1, r3
    55b2:	68f8      	ldr	r0, [r7, #12]
    55b4:	f000 f818 	bl	55e8 <c_assign>
    55b8:	e009      	b.n	55ce <c_assign_tuple+0x156>
        } else {
            c_assign(comp, nodes_tail[i], ASSIGN_STORE);
    55ba:	697b      	ldr	r3, [r7, #20]
    55bc:	009b      	lsls	r3, r3, #2
    55be:	683a      	ldr	r2, [r7, #0]
    55c0:	4413      	add	r3, r2
    55c2:	681b      	ldr	r3, [r3, #0]
    55c4:	2200      	movs	r2, #0
    55c6:	4619      	mov	r1, r3
    55c8:	68f8      	ldr	r0, [r7, #12]
    55ca:	f000 f80d 	bl	55e8 <c_assign>
    for (uint i = 0; i < num_tail; i++) {
    55ce:	697b      	ldr	r3, [r7, #20]
    55d0:	3301      	adds	r3, #1
    55d2:	617b      	str	r3, [r7, #20]
    55d4:	697a      	ldr	r2, [r7, #20]
    55d6:	687b      	ldr	r3, [r7, #4]
    55d8:	429a      	cmp	r2, r3
    55da:	d3dc      	bcc.n	5596 <c_assign_tuple+0x11e>
        }
    }
}
    55dc:	3720      	adds	r7, #32
    55de:	46bd      	mov	sp, r7
    55e0:	bd80      	pop	{r7, pc}
    55e2:	bf00      	nop
    55e4:	0001e3c4 	.word	0x0001e3c4

000055e8 <c_assign>:

// assigns top of stack to pn
STATIC void c_assign(compiler_t *comp, mp_parse_node_t pn, assign_kind_t assign_kind) {
    55e8:	b580      	push	{r7, lr}
    55ea:	b088      	sub	sp, #32
    55ec:	af00      	add	r7, sp, #0
    55ee:	60f8      	str	r0, [r7, #12]
    55f0:	60b9      	str	r1, [r7, #8]
    55f2:	607a      	str	r2, [r7, #4]
    assert(!MP_PARSE_NODE_IS_NULL(pn));
    55f4:	68bb      	ldr	r3, [r7, #8]
    55f6:	2b00      	cmp	r3, #0
    55f8:	d106      	bne.n	5608 <c_assign+0x20>
    55fa:	4b7a      	ldr	r3, [pc, #488]	; (57e4 <c_assign+0x1fc>)
    55fc:	4a7a      	ldr	r2, [pc, #488]	; (57e8 <c_assign+0x200>)
    55fe:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
    5602:	487a      	ldr	r0, [pc, #488]	; (57ec <c_assign+0x204>)
    5604:	f015 feb2 	bl	1b36c <__assert_func>
    if (MP_PARSE_NODE_IS_LEAF(pn)) {
    5608:	68bb      	ldr	r3, [r7, #8]
    560a:	f003 0303 	and.w	r3, r3, #3
    560e:	2b00      	cmp	r3, #0
    5610:	d018      	beq.n	5644 <c_assign+0x5c>
        if (MP_PARSE_NODE_IS_ID(pn)) {
    5612:	68bb      	ldr	r3, [r7, #8]
    5614:	f003 030f 	and.w	r3, r3, #15
    5618:	2b02      	cmp	r3, #2
    561a:	f040 80cf 	bne.w	57bc <c_assign+0x1d4>
            qstr arg = MP_PARSE_NODE_LEAF_ARG(pn);
    561e:	68bb      	ldr	r3, [r7, #8]
    5620:	091b      	lsrs	r3, r3, #4
    5622:	613b      	str	r3, [r7, #16]
            switch (assign_kind) {
    5624:	687b      	ldr	r3, [r7, #4]
    5626:	2b00      	cmp	r3, #0
    5628:	d001      	beq.n	562e <c_assign+0x46>
    562a:	2b02      	cmp	r3, #2
    562c:	d104      	bne.n	5638 <c_assign+0x50>
                case ASSIGN_STORE:
                case ASSIGN_AUG_STORE:
                    compile_store_id(comp, arg);
    562e:	6939      	ldr	r1, [r7, #16]
    5630:	68f8      	ldr	r0, [r7, #12]
    5632:	f7ff fcb5 	bl	4fa0 <compile_store_id>
                    break;
    5636:	e0c0      	b.n	57ba <c_assign+0x1d2>
                case ASSIGN_AUG_LOAD:
                default:
                    compile_load_id(comp, arg);
    5638:	6939      	ldr	r1, [r7, #16]
    563a:	68f8      	ldr	r0, [r7, #12]
    563c:	f7ff fc92 	bl	4f64 <compile_load_id>
                    break;
    5640:	bf00      	nop
    5642:	e0ba      	b.n	57ba <c_assign+0x1d2>
        } else {
            goto cannot_assign;
        }
    } else {
        // pn must be a struct
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    5644:	68bb      	ldr	r3, [r7, #8]
    5646:	61fb      	str	r3, [r7, #28]
        switch (MP_PARSE_NODE_STRUCT_KIND(pns)) {
    5648:	69fb      	ldr	r3, [r7, #28]
    564a:	685b      	ldr	r3, [r3, #4]
    564c:	b2db      	uxtb	r3, r3
    564e:	2b2a      	cmp	r3, #42	; 0x2a
    5650:	d01f      	beq.n	5692 <c_assign+0xaa>
    5652:	2b2a      	cmp	r3, #42	; 0x2a
    5654:	d804      	bhi.n	5660 <c_assign+0x78>
    5656:	2b06      	cmp	r3, #6
    5658:	d00d      	beq.n	5676 <c_assign+0x8e>
    565a:	2b29      	cmp	r3, #41	; 0x29
    565c:	d005      	beq.n	566a <c_assign+0x82>
                    c_assign_tuple(comp, pns->nodes[0], 0, NULL);
                }
                break;

            default:
                goto cannot_assign;
    565e:	e0b8      	b.n	57d2 <c_assign+0x1ea>
        switch (MP_PARSE_NODE_STRUCT_KIND(pns)) {
    5660:	2b2b      	cmp	r3, #43	; 0x2b
    5662:	d039      	beq.n	56d8 <c_assign+0xf0>
    5664:	2b90      	cmp	r3, #144	; 0x90
    5666:	d006      	beq.n	5676 <c_assign+0x8e>
                goto cannot_assign;
    5668:	e0b3      	b.n	57d2 <c_assign+0x1ea>
                c_assign_atom_expr(comp, pns, assign_kind);
    566a:	687a      	ldr	r2, [r7, #4]
    566c:	69f9      	ldr	r1, [r7, #28]
    566e:	68f8      	ldr	r0, [r7, #12]
    5670:	f7ff fe2a 	bl	52c8 <c_assign_atom_expr>
                break;
    5674:	e05a      	b.n	572c <c_assign+0x144>
                if (assign_kind != ASSIGN_STORE) {
    5676:	687b      	ldr	r3, [r7, #4]
    5678:	2b00      	cmp	r3, #0
    567a:	f040 80a1 	bne.w	57c0 <c_assign+0x1d8>
                c_assign_tuple(comp, MP_PARSE_NODE_NULL, MP_PARSE_NODE_STRUCT_NUM_NODES(pns), pns->nodes);
    567e:	69fb      	ldr	r3, [r7, #28]
    5680:	685b      	ldr	r3, [r3, #4]
    5682:	0a1a      	lsrs	r2, r3, #8
    5684:	69fb      	ldr	r3, [r7, #28]
    5686:	3308      	adds	r3, #8
    5688:	2100      	movs	r1, #0
    568a:	68f8      	ldr	r0, [r7, #12]
    568c:	f7ff fef4 	bl	5478 <c_assign_tuple>
                break;
    5690:	e04c      	b.n	572c <c_assign+0x144>
                if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    5692:	69fb      	ldr	r3, [r7, #28]
    5694:	689b      	ldr	r3, [r3, #8]
    5696:	2b00      	cmp	r3, #0
    5698:	f000 8094 	beq.w	57c4 <c_assign+0x1dc>
                    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    569c:	69fb      	ldr	r3, [r7, #28]
    569e:	689b      	ldr	r3, [r3, #8]
    56a0:	2b00      	cmp	r3, #0
    56a2:	d00b      	beq.n	56bc <c_assign+0xd4>
    56a4:	69fb      	ldr	r3, [r7, #28]
    56a6:	689b      	ldr	r3, [r3, #8]
    56a8:	f003 0303 	and.w	r3, r3, #3
    56ac:	2b00      	cmp	r3, #0
    56ae:	d105      	bne.n	56bc <c_assign+0xd4>
    56b0:	69fb      	ldr	r3, [r7, #28]
    56b2:	689b      	ldr	r3, [r3, #8]
    56b4:	685b      	ldr	r3, [r3, #4]
    56b6:	b2db      	uxtb	r3, r3
    56b8:	2b8a      	cmp	r3, #138	; 0x8a
    56ba:	d006      	beq.n	56ca <c_assign+0xe2>
    56bc:	4b4c      	ldr	r3, [pc, #304]	; (57f0 <c_assign+0x208>)
    56be:	4a4a      	ldr	r2, [pc, #296]	; (57e8 <c_assign+0x200>)
    56c0:	f240 11e1 	movw	r1, #481	; 0x1e1
    56c4:	4849      	ldr	r0, [pc, #292]	; (57ec <c_assign+0x204>)
    56c6:	f015 fe51 	bl	1b36c <__assert_func>
                    if (assign_kind != ASSIGN_STORE) {
    56ca:	687b      	ldr	r3, [r7, #4]
    56cc:	2b00      	cmp	r3, #0
    56ce:	d17b      	bne.n	57c8 <c_assign+0x1e0>
                    pns = (mp_parse_node_struct_t*)pns->nodes[0];
    56d0:	69fb      	ldr	r3, [r7, #28]
    56d2:	689b      	ldr	r3, [r3, #8]
    56d4:	61fb      	str	r3, [r7, #28]
                    goto testlist_comp;
    56d6:	e02a      	b.n	572e <c_assign+0x146>
                if (assign_kind != ASSIGN_STORE) {
    56d8:	687b      	ldr	r3, [r7, #4]
    56da:	2b00      	cmp	r3, #0
    56dc:	d176      	bne.n	57cc <c_assign+0x1e4>
                if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    56de:	69fb      	ldr	r3, [r7, #28]
    56e0:	689b      	ldr	r3, [r3, #8]
    56e2:	2b00      	cmp	r3, #0
    56e4:	d106      	bne.n	56f4 <c_assign+0x10c>
                    c_assign_tuple(comp, MP_PARSE_NODE_NULL, 0, NULL);
    56e6:	2300      	movs	r3, #0
    56e8:	2200      	movs	r2, #0
    56ea:	2100      	movs	r1, #0
    56ec:	68f8      	ldr	r0, [r7, #12]
    56ee:	f7ff fec3 	bl	5478 <c_assign_tuple>
                break;
    56f2:	e01a      	b.n	572a <c_assign+0x142>
                } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    56f4:	69fb      	ldr	r3, [r7, #28]
    56f6:	689b      	ldr	r3, [r3, #8]
    56f8:	2b00      	cmp	r3, #0
    56fa:	d00f      	beq.n	571c <c_assign+0x134>
    56fc:	69fb      	ldr	r3, [r7, #28]
    56fe:	689b      	ldr	r3, [r3, #8]
    5700:	f003 0303 	and.w	r3, r3, #3
    5704:	2b00      	cmp	r3, #0
    5706:	d109      	bne.n	571c <c_assign+0x134>
    5708:	69fb      	ldr	r3, [r7, #28]
    570a:	689b      	ldr	r3, [r3, #8]
    570c:	685b      	ldr	r3, [r3, #4]
    570e:	b2db      	uxtb	r3, r3
    5710:	2b8a      	cmp	r3, #138	; 0x8a
    5712:	d103      	bne.n	571c <c_assign+0x134>
                    pns = (mp_parse_node_struct_t*)pns->nodes[0];
    5714:	69fb      	ldr	r3, [r7, #28]
    5716:	689b      	ldr	r3, [r3, #8]
    5718:	61fb      	str	r3, [r7, #28]
                    goto testlist_comp;
    571a:	e008      	b.n	572e <c_assign+0x146>
                    c_assign_tuple(comp, pns->nodes[0], 0, NULL);
    571c:	69fb      	ldr	r3, [r7, #28]
    571e:	6899      	ldr	r1, [r3, #8]
    5720:	2300      	movs	r3, #0
    5722:	2200      	movs	r2, #0
    5724:	68f8      	ldr	r0, [r7, #12]
    5726:	f7ff fea7 	bl	5478 <c_assign_tuple>
                break;
    572a:	bf00      	nop
        }
        return;
    572c:	e056      	b.n	57dc <c_assign+0x1f4>

        testlist_comp:
        // lhs is a sequence
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    572e:	69fb      	ldr	r3, [r7, #28]
    5730:	68db      	ldr	r3, [r3, #12]
    5732:	2b00      	cmp	r3, #0
    5734:	d038      	beq.n	57a8 <c_assign+0x1c0>
    5736:	69fb      	ldr	r3, [r7, #28]
    5738:	68db      	ldr	r3, [r3, #12]
    573a:	f003 0303 	and.w	r3, r3, #3
    573e:	2b00      	cmp	r3, #0
    5740:	d132      	bne.n	57a8 <c_assign+0x1c0>
            mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[1];
    5742:	69fb      	ldr	r3, [r7, #28]
    5744:	68db      	ldr	r3, [r3, #12]
    5746:	61bb      	str	r3, [r7, #24]
            if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3b) {
    5748:	69bb      	ldr	r3, [r7, #24]
    574a:	685b      	ldr	r3, [r3, #4]
    574c:	b2db      	uxtb	r3, r3
    574e:	2b8d      	cmp	r3, #141	; 0x8d
    5750:	d112      	bne.n	5778 <c_assign+0x190>
                // sequence of one item, with trailing comma
                assert(MP_PARSE_NODE_IS_NULL(pns2->nodes[0]));
    5752:	69bb      	ldr	r3, [r7, #24]
    5754:	689b      	ldr	r3, [r3, #8]
    5756:	2b00      	cmp	r3, #0
    5758:	d006      	beq.n	5768 <c_assign+0x180>
    575a:	4b26      	ldr	r3, [pc, #152]	; (57f4 <c_assign+0x20c>)
    575c:	4a22      	ldr	r2, [pc, #136]	; (57e8 <c_assign+0x200>)
    575e:	f240 2106 	movw	r1, #518	; 0x206
    5762:	4822      	ldr	r0, [pc, #136]	; (57ec <c_assign+0x204>)
    5764:	f015 fe02 	bl	1b36c <__assert_func>
                c_assign_tuple(comp, pns->nodes[0], 0, NULL);
    5768:	69fb      	ldr	r3, [r7, #28]
    576a:	6899      	ldr	r1, [r3, #8]
    576c:	2300      	movs	r3, #0
    576e:	2200      	movs	r2, #0
    5770:	68f8      	ldr	r0, [r7, #12]
    5772:	f7ff fe81 	bl	5478 <c_assign_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    5776:	e01f      	b.n	57b8 <c_assign+0x1d0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3c) {
    5778:	69bb      	ldr	r3, [r7, #24]
    577a:	685b      	ldr	r3, [r3, #4]
    577c:	b2db      	uxtb	r3, r3
    577e:	2b8e      	cmp	r3, #142	; 0x8e
    5780:	d10c      	bne.n	579c <c_assign+0x1b4>
                // sequence of many items
                uint n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns2);
    5782:	69bb      	ldr	r3, [r7, #24]
    5784:	685b      	ldr	r3, [r3, #4]
    5786:	0a1b      	lsrs	r3, r3, #8
    5788:	617b      	str	r3, [r7, #20]
                c_assign_tuple(comp, pns->nodes[0], n, pns2->nodes);
    578a:	69fb      	ldr	r3, [r7, #28]
    578c:	6899      	ldr	r1, [r3, #8]
    578e:	69bb      	ldr	r3, [r7, #24]
    5790:	3308      	adds	r3, #8
    5792:	697a      	ldr	r2, [r7, #20]
    5794:	68f8      	ldr	r0, [r7, #12]
    5796:	f7ff fe6f 	bl	5478 <c_assign_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    579a:	e00d      	b.n	57b8 <c_assign+0x1d0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_comp_for) {
    579c:	69bb      	ldr	r3, [r7, #24]
    579e:	685b      	ldr	r3, [r3, #4]
    57a0:	b2db      	uxtb	r3, r3
    57a2:	2b9f      	cmp	r3, #159	; 0x9f
    57a4:	d014      	beq.n	57d0 <c_assign+0x1e8>
                goto cannot_assign;
            } else {
                // sequence with 2 items
                goto sequence_with_2_items;
    57a6:	bf00      	nop
            }
        } else {
            // sequence with 2 items
            sequence_with_2_items:
            c_assign_tuple(comp, MP_PARSE_NODE_NULL, 2, pns->nodes);
    57a8:	69fb      	ldr	r3, [r7, #28]
    57aa:	3308      	adds	r3, #8
    57ac:	2202      	movs	r2, #2
    57ae:	2100      	movs	r1, #0
    57b0:	68f8      	ldr	r0, [r7, #12]
    57b2:	f7ff fe61 	bl	5478 <c_assign_tuple>
        }
        return;
    57b6:	e011      	b.n	57dc <c_assign+0x1f4>
    57b8:	e010      	b.n	57dc <c_assign+0x1f4>
    }
    return;
    57ba:	e00f      	b.n	57dc <c_assign+0x1f4>
            goto cannot_assign;
    57bc:	bf00      	nop
    57be:	e008      	b.n	57d2 <c_assign+0x1ea>
                    goto cannot_assign;
    57c0:	bf00      	nop
    57c2:	e006      	b.n	57d2 <c_assign+0x1ea>
                    goto cannot_assign;
    57c4:	bf00      	nop
    57c6:	e004      	b.n	57d2 <c_assign+0x1ea>
                        goto cannot_assign;
    57c8:	bf00      	nop
    57ca:	e002      	b.n	57d2 <c_assign+0x1ea>
                    goto cannot_assign;
    57cc:	bf00      	nop
    57ce:	e000      	b.n	57d2 <c_assign+0x1ea>
                goto cannot_assign;
    57d0:	bf00      	nop

    cannot_assign:
    compile_syntax_error(comp, pn, "can't assign to expression");
    57d2:	4a09      	ldr	r2, [pc, #36]	; (57f8 <c_assign+0x210>)
    57d4:	68b9      	ldr	r1, [r7, #8]
    57d6:	68f8      	ldr	r0, [r7, #12]
    57d8:	f7ff fac2 	bl	4d60 <compile_syntax_error>
}
    57dc:	3720      	adds	r7, #32
    57de:	46bd      	mov	sp, r7
    57e0:	bd80      	pop	{r7, pc}
    57e2:	bf00      	nop
    57e4:	0001e3e0 	.word	0x0001e3e0
    57e8:	0001eebc 	.word	0x0001eebc
    57ec:	0001e304 	.word	0x0001e304
    57f0:	0001e318 	.word	0x0001e318
    57f4:	0001e3fc 	.word	0x0001e3fc
    57f8:	0001e3a8 	.word	0x0001e3a8

000057fc <close_over_variables_etc>:

// stuff for lambda and comprehensions and generators:
//  if n_pos_defaults > 0 then there is a tuple on the stack with the positional defaults
//  if n_kw_defaults > 0 then there is a dictionary on the stack with the keyword defaults
//  if both exist, the tuple is above the dictionary (ie the first pop gets the tuple)
STATIC void close_over_variables_etc(compiler_t *comp, scope_t *this_scope, int n_pos_defaults, int n_kw_defaults) {
    57fc:	b580      	push	{r7, lr}
    57fe:	b08c      	sub	sp, #48	; 0x30
    5800:	af02      	add	r7, sp, #8
    5802:	60f8      	str	r0, [r7, #12]
    5804:	60b9      	str	r1, [r7, #8]
    5806:	607a      	str	r2, [r7, #4]
    5808:	603b      	str	r3, [r7, #0]
    assert(n_pos_defaults >= 0);
    580a:	687b      	ldr	r3, [r7, #4]
    580c:	2b00      	cmp	r3, #0
    580e:	da06      	bge.n	581e <close_over_variables_etc+0x22>
    5810:	4b41      	ldr	r3, [pc, #260]	; (5918 <close_over_variables_etc+0x11c>)
    5812:	4a42      	ldr	r2, [pc, #264]	; (591c <close_over_variables_etc+0x120>)
    5814:	f44f 7109 	mov.w	r1, #548	; 0x224
    5818:	4841      	ldr	r0, [pc, #260]	; (5920 <close_over_variables_etc+0x124>)
    581a:	f015 fda7 	bl	1b36c <__assert_func>
    assert(n_kw_defaults >= 0);
    581e:	683b      	ldr	r3, [r7, #0]
    5820:	2b00      	cmp	r3, #0
    5822:	da06      	bge.n	5832 <close_over_variables_etc+0x36>
    5824:	4b3f      	ldr	r3, [pc, #252]	; (5924 <close_over_variables_etc+0x128>)
    5826:	4a3d      	ldr	r2, [pc, #244]	; (591c <close_over_variables_etc+0x120>)
    5828:	f240 2125 	movw	r1, #549	; 0x225
    582c:	483c      	ldr	r0, [pc, #240]	; (5920 <close_over_variables_etc+0x124>)
    582e:	f015 fd9d 	bl	1b36c <__assert_func>

    // set flags
    if (n_kw_defaults > 0) {
    5832:	683b      	ldr	r3, [r7, #0]
    5834:	2b00      	cmp	r3, #0
    5836:	dd06      	ble.n	5846 <close_over_variables_etc+0x4a>
        this_scope->scope_flags |= MP_SCOPE_FLAG_DEFKWARGS;
    5838:	68bb      	ldr	r3, [r7, #8]
    583a:	7e1b      	ldrb	r3, [r3, #24]
    583c:	f043 0308 	orr.w	r3, r3, #8
    5840:	b2da      	uxtb	r2, r3
    5842:	68bb      	ldr	r3, [r7, #8]
    5844:	761a      	strb	r2, [r3, #24]
    }
    this_scope->num_def_pos_args = n_pos_defaults;
    5846:	687b      	ldr	r3, [r7, #4]
    5848:	b29a      	uxth	r2, r3
    584a:	68bb      	ldr	r3, [r7, #8]
    584c:	83da      	strh	r2, [r3, #30]

    // make closed over variables, if any
    // ensure they are closed over in the order defined in the outer scope (mainly to agree with CPython)
    int nfree = 0;
    584e:	2300      	movs	r3, #0
    5850:	627b      	str	r3, [r7, #36]	; 0x24
    if (comp->scope_cur->kind != SCOPE_MODULE) {
    5852:	68fb      	ldr	r3, [r7, #12]
    5854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5856:	681b      	ldr	r3, [r3, #0]
    5858:	2b00      	cmp	r3, #0
    585a:	d044      	beq.n	58e6 <close_over_variables_etc+0xea>
        for (int i = 0; i < comp->scope_cur->id_info_len; i++) {
    585c:	2300      	movs	r3, #0
    585e:	623b      	str	r3, [r7, #32]
    5860:	e03a      	b.n	58d8 <close_over_variables_etc+0xdc>
            id_info_t *id = &comp->scope_cur->id_info[i];
    5862:	68fb      	ldr	r3, [r7, #12]
    5864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5868:	6a3b      	ldr	r3, [r7, #32]
    586a:	00db      	lsls	r3, r3, #3
    586c:	4413      	add	r3, r2
    586e:	61bb      	str	r3, [r7, #24]
            if (id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE) {
    5870:	69bb      	ldr	r3, [r7, #24]
    5872:	781b      	ldrb	r3, [r3, #0]
    5874:	2b03      	cmp	r3, #3
    5876:	d003      	beq.n	5880 <close_over_variables_etc+0x84>
    5878:	69bb      	ldr	r3, [r7, #24]
    587a:	781b      	ldrb	r3, [r3, #0]
    587c:	2b04      	cmp	r3, #4
    587e:	d128      	bne.n	58d2 <close_over_variables_etc+0xd6>
                for (int j = 0; j < this_scope->id_info_len; j++) {
    5880:	2300      	movs	r3, #0
    5882:	61fb      	str	r3, [r7, #28]
    5884:	e01f      	b.n	58c6 <close_over_variables_etc+0xca>
                    id_info_t *id2 = &this_scope->id_info[j];
    5886:	68bb      	ldr	r3, [r7, #8]
    5888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    588a:	69fb      	ldr	r3, [r7, #28]
    588c:	00db      	lsls	r3, r3, #3
    588e:	4413      	add	r3, r2
    5890:	617b      	str	r3, [r7, #20]
                    if (id2->kind == ID_INFO_KIND_FREE && id->qst == id2->qst) {
    5892:	697b      	ldr	r3, [r7, #20]
    5894:	781b      	ldrb	r3, [r3, #0]
    5896:	2b04      	cmp	r3, #4
    5898:	d112      	bne.n	58c0 <close_over_variables_etc+0xc4>
    589a:	69bb      	ldr	r3, [r7, #24]
    589c:	685a      	ldr	r2, [r3, #4]
    589e:	697b      	ldr	r3, [r7, #20]
    58a0:	685b      	ldr	r3, [r3, #4]
    58a2:	429a      	cmp	r2, r3
    58a4:	d10c      	bne.n	58c0 <close_over_variables_etc+0xc4>
                        // in MicroPython we load closures using LOAD_FAST
                        EMIT_LOAD_FAST(id->qst, id->local_num);
    58a6:	68fb      	ldr	r3, [r7, #12]
    58a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    58aa:	69bb      	ldr	r3, [r7, #24]
    58ac:	6859      	ldr	r1, [r3, #4]
    58ae:	69bb      	ldr	r3, [r7, #24]
    58b0:	885b      	ldrh	r3, [r3, #2]
    58b2:	461a      	mov	r2, r3
    58b4:	2300      	movs	r3, #0
    58b6:	f004 fe27 	bl	a508 <mp_emit_bc_load_local>
                        nfree += 1;
    58ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    58bc:	3301      	adds	r3, #1
    58be:	627b      	str	r3, [r7, #36]	; 0x24
                for (int j = 0; j < this_scope->id_info_len; j++) {
    58c0:	69fb      	ldr	r3, [r7, #28]
    58c2:	3301      	adds	r3, #1
    58c4:	61fb      	str	r3, [r7, #28]
    58c6:	68bb      	ldr	r3, [r7, #8]
    58c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    58ca:	461a      	mov	r2, r3
    58cc:	69fb      	ldr	r3, [r7, #28]
    58ce:	429a      	cmp	r2, r3
    58d0:	dcd9      	bgt.n	5886 <close_over_variables_etc+0x8a>
        for (int i = 0; i < comp->scope_cur->id_info_len; i++) {
    58d2:	6a3b      	ldr	r3, [r7, #32]
    58d4:	3301      	adds	r3, #1
    58d6:	623b      	str	r3, [r7, #32]
    58d8:	68fb      	ldr	r3, [r7, #12]
    58da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    58dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    58de:	461a      	mov	r2, r3
    58e0:	6a3b      	ldr	r3, [r7, #32]
    58e2:	429a      	cmp	r2, r3
    58e4:	dcbd      	bgt.n	5862 <close_over_variables_etc+0x66>
            }
        }
    }

    // make the function/closure
    if (nfree == 0) {
    58e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    58e8:	2b00      	cmp	r3, #0
    58ea:	d107      	bne.n	58fc <close_over_variables_etc+0x100>
        EMIT_ARG(make_function, this_scope, n_pos_defaults, n_kw_defaults);
    58ec:	68fb      	ldr	r3, [r7, #12]
    58ee:	6a98      	ldr	r0, [r3, #40]	; 0x28
    58f0:	687a      	ldr	r2, [r7, #4]
    58f2:	683b      	ldr	r3, [r7, #0]
    58f4:	68b9      	ldr	r1, [r7, #8]
    58f6:	f005 f99f 	bl	ac38 <mp_emit_bc_make_function>
    } else {
        EMIT_ARG(make_closure, this_scope, nfree, n_pos_defaults, n_kw_defaults);
    }
}
    58fa:	e009      	b.n	5910 <close_over_variables_etc+0x114>
        EMIT_ARG(make_closure, this_scope, nfree, n_pos_defaults, n_kw_defaults);
    58fc:	68fb      	ldr	r3, [r7, #12]
    58fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5902:	6879      	ldr	r1, [r7, #4]
    5904:	683b      	ldr	r3, [r7, #0]
    5906:	9300      	str	r3, [sp, #0]
    5908:	460b      	mov	r3, r1
    590a:	68b9      	ldr	r1, [r7, #8]
    590c:	f005 f9be 	bl	ac8c <mp_emit_bc_make_closure>
}
    5910:	bf00      	nop
    5912:	3728      	adds	r7, #40	; 0x28
    5914:	46bd      	mov	sp, r7
    5916:	bd80      	pop	{r7, pc}
    5918:	0001e424 	.word	0x0001e424
    591c:	0001eec8 	.word	0x0001eec8
    5920:	0001e304 	.word	0x0001e304
    5924:	0001e438 	.word	0x0001e438

00005928 <compile_funcdef_lambdef_param>:

STATIC void compile_funcdef_lambdef_param(compiler_t *comp, mp_parse_node_t pn) {
    5928:	b580      	push	{r7, lr}
    592a:	b088      	sub	sp, #32
    592c:	af00      	add	r7, sp, #0
    592e:	6078      	str	r0, [r7, #4]
    5930:	6039      	str	r1, [r7, #0]
    // For efficiency of the code below we extract the parse-node kind here
    int pn_kind;
    if (MP_PARSE_NODE_IS_ID(pn)) {
    5932:	683b      	ldr	r3, [r7, #0]
    5934:	f003 030f 	and.w	r3, r3, #15
    5938:	2b02      	cmp	r3, #2
    593a:	d103      	bne.n	5944 <compile_funcdef_lambdef_param+0x1c>
        pn_kind = -1;
    593c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5940:	61fb      	str	r3, [r7, #28]
    5942:	e012      	b.n	596a <compile_funcdef_lambdef_param+0x42>
    } else {
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    5944:	683b      	ldr	r3, [r7, #0]
    5946:	2b00      	cmp	r3, #0
    5948:	d004      	beq.n	5954 <compile_funcdef_lambdef_param+0x2c>
    594a:	683b      	ldr	r3, [r7, #0]
    594c:	f003 0303 	and.w	r3, r3, #3
    5950:	2b00      	cmp	r3, #0
    5952:	d006      	beq.n	5962 <compile_funcdef_lambdef_param+0x3a>
    5954:	4b4c      	ldr	r3, [pc, #304]	; (5a88 <compile_funcdef_lambdef_param+0x160>)
    5956:	4a4d      	ldr	r2, [pc, #308]	; (5a8c <compile_funcdef_lambdef_param+0x164>)
    5958:	f240 214e 	movw	r1, #590	; 0x24e
    595c:	484c      	ldr	r0, [pc, #304]	; (5a90 <compile_funcdef_lambdef_param+0x168>)
    595e:	f015 fd05 	bl	1b36c <__assert_func>
        pn_kind = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn);
    5962:	683b      	ldr	r3, [r7, #0]
    5964:	685b      	ldr	r3, [r3, #4]
    5966:	b2db      	uxtb	r3, r3
    5968:	61fb      	str	r3, [r7, #28]
    }

    if (pn_kind == PN_typedargslist_star || pn_kind == PN_varargslist_star) {
    596a:	69fb      	ldr	r3, [r7, #28]
    596c:	2b41      	cmp	r3, #65	; 0x41
    596e:	d002      	beq.n	5976 <compile_funcdef_lambdef_param+0x4e>
    5970:	69fb      	ldr	r3, [r7, #28]
    5972:	2b49      	cmp	r3, #73	; 0x49
    5974:	d103      	bne.n	597e <compile_funcdef_lambdef_param+0x56>
        comp->have_star = true;
    5976:	687b      	ldr	r3, [r7, #4]
    5978:	2201      	movs	r2, #1
    597a:	719a      	strb	r2, [r3, #6]
    597c:	e080      	b.n	5a80 <compile_funcdef_lambdef_param+0x158>
        } else {
            // named star
        }
        */

    } else if (pn_kind == PN_typedargslist_dbl_star || pn_kind == PN_varargslist_dbl_star) {
    597e:	69fb      	ldr	r3, [r7, #28]
    5980:	2b42      	cmp	r3, #66	; 0x42
    5982:	d07d      	beq.n	5a80 <compile_funcdef_lambdef_param+0x158>
    5984:	69fb      	ldr	r3, [r7, #28]
    5986:	2b4a      	cmp	r3, #74	; 0x4a
    5988:	d07a      	beq.n	5a80 <compile_funcdef_lambdef_param+0x158>
        // TODO do we need to do anything with this?

    } else {
        mp_parse_node_t pn_id;
        mp_parse_node_t pn_equal;
        if (pn_kind == -1) {
    598a:	69fb      	ldr	r3, [r7, #28]
    598c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5990:	d104      	bne.n	599c <compile_funcdef_lambdef_param+0x74>
            // this parameter is just an id

            pn_id = pn;
    5992:	683b      	ldr	r3, [r7, #0]
    5994:	61bb      	str	r3, [r7, #24]
            pn_equal = MP_PARSE_NODE_NULL;
    5996:	2300      	movs	r3, #0
    5998:	617b      	str	r3, [r7, #20]
    599a:	e01d      	b.n	59d8 <compile_funcdef_lambdef_param+0xb0>

        } else if (pn_kind == PN_typedargslist_name) {
    599c:	69fb      	ldr	r3, [r7, #28]
    599e:	2b40      	cmp	r3, #64	; 0x40
    59a0:	d108      	bne.n	59b4 <compile_funcdef_lambdef_param+0x8c>
            // this parameter has a colon and/or equal specifier

            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    59a2:	683b      	ldr	r3, [r7, #0]
    59a4:	613b      	str	r3, [r7, #16]
            pn_id = pns->nodes[0];
    59a6:	693b      	ldr	r3, [r7, #16]
    59a8:	689b      	ldr	r3, [r3, #8]
    59aa:	61bb      	str	r3, [r7, #24]
            //pn_colon = pns->nodes[1]; // unused
            pn_equal = pns->nodes[2];
    59ac:	693b      	ldr	r3, [r7, #16]
    59ae:	691b      	ldr	r3, [r3, #16]
    59b0:	617b      	str	r3, [r7, #20]
    59b2:	e011      	b.n	59d8 <compile_funcdef_lambdef_param+0xb0>

        } else {
            assert(pn_kind == PN_varargslist_name); // should be
    59b4:	69fb      	ldr	r3, [r7, #28]
    59b6:	2b48      	cmp	r3, #72	; 0x48
    59b8:	d006      	beq.n	59c8 <compile_funcdef_lambdef_param+0xa0>
    59ba:	4b36      	ldr	r3, [pc, #216]	; (5a94 <compile_funcdef_lambdef_param+0x16c>)
    59bc:	4a33      	ldr	r2, [pc, #204]	; (5a8c <compile_funcdef_lambdef_param+0x164>)
    59be:	f240 2173 	movw	r1, #627	; 0x273
    59c2:	4833      	ldr	r0, [pc, #204]	; (5a90 <compile_funcdef_lambdef_param+0x168>)
    59c4:	f015 fcd2 	bl	1b36c <__assert_func>
            // this parameter has an equal specifier

            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    59c8:	683b      	ldr	r3, [r7, #0]
    59ca:	60fb      	str	r3, [r7, #12]
            pn_id = pns->nodes[0];
    59cc:	68fb      	ldr	r3, [r7, #12]
    59ce:	689b      	ldr	r3, [r3, #8]
    59d0:	61bb      	str	r3, [r7, #24]
            pn_equal = pns->nodes[1];
    59d2:	68fb      	ldr	r3, [r7, #12]
    59d4:	68db      	ldr	r3, [r3, #12]
    59d6:	617b      	str	r3, [r7, #20]
        }

        if (MP_PARSE_NODE_IS_NULL(pn_equal)) {
    59d8:	697b      	ldr	r3, [r7, #20]
    59da:	2b00      	cmp	r3, #0
    59dc:	d10d      	bne.n	59fa <compile_funcdef_lambdef_param+0xd2>
            // this parameter does not have a default value

            // check for non-default parameters given after default parameters (allowed by parser, but not syntactically valid)
            if (!comp->have_star && comp->num_default_params != 0) {
    59de:	687b      	ldr	r3, [r7, #4]
    59e0:	799b      	ldrb	r3, [r3, #6]
    59e2:	2b00      	cmp	r3, #0
    59e4:	d14c      	bne.n	5a80 <compile_funcdef_lambdef_param+0x158>
    59e6:	687b      	ldr	r3, [r7, #4]
    59e8:	8adb      	ldrh	r3, [r3, #22]
    59ea:	2b00      	cmp	r3, #0
    59ec:	d048      	beq.n	5a80 <compile_funcdef_lambdef_param+0x158>
                compile_syntax_error(comp, pn, "non-default argument follows default argument");
    59ee:	4a2a      	ldr	r2, [pc, #168]	; (5a98 <compile_funcdef_lambdef_param+0x170>)
    59f0:	6839      	ldr	r1, [r7, #0]
    59f2:	6878      	ldr	r0, [r7, #4]
    59f4:	f7ff f9b4 	bl	4d60 <compile_syntax_error>
                return;
    59f8:	e042      	b.n	5a80 <compile_funcdef_lambdef_param+0x158>

        } else {
            // this parameter has a default value
            // in CPython, None (and True, False?) as default parameters are loaded with LOAD_NAME; don't understandy why

            if (comp->have_star) {
    59fa:	687b      	ldr	r3, [r7, #4]
    59fc:	799b      	ldrb	r3, [r3, #6]
    59fe:	2b00      	cmp	r3, #0
    5a00:	d034      	beq.n	5a6c <compile_funcdef_lambdef_param+0x144>
                comp->num_dict_params += 1;
    5a02:	687b      	ldr	r3, [r7, #4]
    5a04:	8a9b      	ldrh	r3, [r3, #20]
    5a06:	3301      	adds	r3, #1
    5a08:	b29a      	uxth	r2, r3
    5a0a:	687b      	ldr	r3, [r7, #4]
    5a0c:	829a      	strh	r2, [r3, #20]
                // in MicroPython we put the default dict parameters into a dictionary using the bytecode
                if (comp->num_dict_params == 1) {
    5a0e:	687b      	ldr	r3, [r7, #4]
    5a10:	8a9b      	ldrh	r3, [r3, #20]
    5a12:	2b01      	cmp	r3, #1
    5a14:	d118      	bne.n	5a48 <compile_funcdef_lambdef_param+0x120>
                    // in MicroPython we put the default positional parameters into a tuple using the bytecode
                    // we need to do this here before we start building the map for the default keywords
                    if (comp->num_default_params > 0) {
    5a16:	687b      	ldr	r3, [r7, #4]
    5a18:	8adb      	ldrh	r3, [r3, #22]
    5a1a:	2b00      	cmp	r3, #0
    5a1c:	d008      	beq.n	5a30 <compile_funcdef_lambdef_param+0x108>
                        EMIT_ARG(build, comp->num_default_params, MP_EMIT_BUILD_TUPLE);
    5a1e:	687b      	ldr	r3, [r7, #4]
    5a20:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5a22:	687b      	ldr	r3, [r7, #4]
    5a24:	8adb      	ldrh	r3, [r3, #22]
    5a26:	2200      	movs	r2, #0
    5a28:	4619      	mov	r1, r3
    5a2a:	f005 f87b 	bl	ab24 <mp_emit_bc_build>
    5a2e:	e004      	b.n	5a3a <compile_funcdef_lambdef_param+0x112>
                    } else {
                        EMIT(load_null); // sentinel indicating empty default positional args
    5a30:	687b      	ldr	r3, [r7, #4]
    5a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5a34:	4618      	mov	r0, r3
    5a36:	f004 fd57 	bl	a4e8 <mp_emit_bc_load_null>
                    }
                    // first default dict param, so make the map
                    EMIT_ARG(build, 0, MP_EMIT_BUILD_MAP);
    5a3a:	687b      	ldr	r3, [r7, #4]
    5a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5a3e:	2203      	movs	r2, #3
    5a40:	2100      	movs	r1, #0
    5a42:	4618      	mov	r0, r3
    5a44:	f005 f86e 	bl	ab24 <mp_emit_bc_build>
                }

                // compile value then key, then store it to the dict
                compile_node(comp, pn_equal);
    5a48:	6979      	ldr	r1, [r7, #20]
    5a4a:	6878      	ldr	r0, [r7, #4]
    5a4c:	f003 f802 	bl	8a54 <compile_node>
                EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pn_id));
    5a50:	687b      	ldr	r3, [r7, #4]
    5a52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5a54:	69bb      	ldr	r3, [r7, #24]
    5a56:	091b      	lsrs	r3, r3, #4
    5a58:	4619      	mov	r1, r3
    5a5a:	4610      	mov	r0, r2
    5a5c:	f004 fd20 	bl	a4a0 <mp_emit_bc_load_const_str>
                EMIT(store_map);
    5a60:	687b      	ldr	r3, [r7, #4]
    5a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5a64:	4618      	mov	r0, r3
    5a66:	f005 f87f 	bl	ab68 <mp_emit_bc_store_map>
    5a6a:	e009      	b.n	5a80 <compile_funcdef_lambdef_param+0x158>
            } else {
                comp->num_default_params += 1;
    5a6c:	687b      	ldr	r3, [r7, #4]
    5a6e:	8adb      	ldrh	r3, [r3, #22]
    5a70:	3301      	adds	r3, #1
    5a72:	b29a      	uxth	r2, r3
    5a74:	687b      	ldr	r3, [r7, #4]
    5a76:	82da      	strh	r2, [r3, #22]
                compile_node(comp, pn_equal);
    5a78:	6979      	ldr	r1, [r7, #20]
    5a7a:	6878      	ldr	r0, [r7, #4]
    5a7c:	f002 ffea 	bl	8a54 <compile_node>
            }
        }
    }
}
    5a80:	3720      	adds	r7, #32
    5a82:	46bd      	mov	sp, r7
    5a84:	bd80      	pop	{r7, pc}
    5a86:	bf00      	nop
    5a88:	0001e44c 	.word	0x0001e44c
    5a8c:	0001eee4 	.word	0x0001eee4
    5a90:	0001e304 	.word	0x0001e304
    5a94:	0001e468 	.word	0x0001e468
    5a98:	0001e488 	.word	0x0001e488

00005a9c <compile_funcdef_lambdef>:

STATIC void compile_funcdef_lambdef(compiler_t *comp, scope_t *scope, mp_parse_node_t pn_params, pn_kind_t pn_list_kind) {
    5a9c:	b580      	push	{r7, lr}
    5a9e:	b086      	sub	sp, #24
    5aa0:	af00      	add	r7, sp, #0
    5aa2:	60f8      	str	r0, [r7, #12]
    5aa4:	60b9      	str	r1, [r7, #8]
    5aa6:	607a      	str	r2, [r7, #4]
    5aa8:	603b      	str	r3, [r7, #0]
    // When we call compile_funcdef_lambdef_param below it can compile an arbitrary
    // expression for default arguments, which may contain a lambda.  The lambda will
    // call here in a nested way, so we must save and restore the relevant state.
    bool orig_have_star = comp->have_star;
    5aaa:	68fb      	ldr	r3, [r7, #12]
    5aac:	799b      	ldrb	r3, [r3, #6]
    5aae:	2b00      	cmp	r3, #0
    5ab0:	bf14      	ite	ne
    5ab2:	2301      	movne	r3, #1
    5ab4:	2300      	moveq	r3, #0
    5ab6:	75fb      	strb	r3, [r7, #23]
    uint16_t orig_num_dict_params = comp->num_dict_params;
    5ab8:	68fb      	ldr	r3, [r7, #12]
    5aba:	8a9b      	ldrh	r3, [r3, #20]
    5abc:	82bb      	strh	r3, [r7, #20]
    uint16_t orig_num_default_params = comp->num_default_params;
    5abe:	68fb      	ldr	r3, [r7, #12]
    5ac0:	8adb      	ldrh	r3, [r3, #22]
    5ac2:	827b      	strh	r3, [r7, #18]

    // compile default parameters
    comp->have_star = false;
    5ac4:	68fb      	ldr	r3, [r7, #12]
    5ac6:	2200      	movs	r2, #0
    5ac8:	719a      	strb	r2, [r3, #6]
    comp->num_dict_params = 0;
    5aca:	68fb      	ldr	r3, [r7, #12]
    5acc:	2200      	movs	r2, #0
    5ace:	829a      	strh	r2, [r3, #20]
    comp->num_default_params = 0;
    5ad0:	68fb      	ldr	r3, [r7, #12]
    5ad2:	2200      	movs	r2, #0
    5ad4:	82da      	strh	r2, [r3, #22]
    apply_to_single_or_list(comp, pn_params, pn_list_kind, compile_funcdef_lambdef_param);
    5ad6:	4b1b      	ldr	r3, [pc, #108]	; (5b44 <compile_funcdef_lambdef+0xa8>)
    5ad8:	683a      	ldr	r2, [r7, #0]
    5ada:	6879      	ldr	r1, [r7, #4]
    5adc:	68f8      	ldr	r0, [r7, #12]
    5ade:	f7ff f9d7 	bl	4e90 <apply_to_single_or_list>

    if (comp->compile_error != MP_OBJ_NULL) {
    5ae2:	68fb      	ldr	r3, [r7, #12]
    5ae4:	689b      	ldr	r3, [r3, #8]
    5ae6:	2b00      	cmp	r3, #0
    5ae8:	d127      	bne.n	5b3a <compile_funcdef_lambdef+0x9e>
        return;
    }

    // in MicroPython we put the default positional parameters into a tuple using the bytecode
    // the default keywords args may have already made the tuple; if not, do it now
    if (comp->num_default_params > 0 && comp->num_dict_params == 0) {
    5aea:	68fb      	ldr	r3, [r7, #12]
    5aec:	8adb      	ldrh	r3, [r3, #22]
    5aee:	2b00      	cmp	r3, #0
    5af0:	d010      	beq.n	5b14 <compile_funcdef_lambdef+0x78>
    5af2:	68fb      	ldr	r3, [r7, #12]
    5af4:	8a9b      	ldrh	r3, [r3, #20]
    5af6:	2b00      	cmp	r3, #0
    5af8:	d10c      	bne.n	5b14 <compile_funcdef_lambdef+0x78>
        EMIT_ARG(build, comp->num_default_params, MP_EMIT_BUILD_TUPLE);
    5afa:	68fb      	ldr	r3, [r7, #12]
    5afc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5afe:	68fb      	ldr	r3, [r7, #12]
    5b00:	8adb      	ldrh	r3, [r3, #22]
    5b02:	2200      	movs	r2, #0
    5b04:	4619      	mov	r1, r3
    5b06:	f005 f80d 	bl	ab24 <mp_emit_bc_build>
        EMIT(load_null); // sentinel indicating empty default keyword args
    5b0a:	68fb      	ldr	r3, [r7, #12]
    5b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b0e:	4618      	mov	r0, r3
    5b10:	f004 fcea 	bl	a4e8 <mp_emit_bc_load_null>
    }

    // make the function
    close_over_variables_etc(comp, scope, comp->num_default_params, comp->num_dict_params);
    5b14:	68fb      	ldr	r3, [r7, #12]
    5b16:	8adb      	ldrh	r3, [r3, #22]
    5b18:	461a      	mov	r2, r3
    5b1a:	68fb      	ldr	r3, [r7, #12]
    5b1c:	8a9b      	ldrh	r3, [r3, #20]
    5b1e:	68b9      	ldr	r1, [r7, #8]
    5b20:	68f8      	ldr	r0, [r7, #12]
    5b22:	f7ff fe6b 	bl	57fc <close_over_variables_etc>

    // restore state
    comp->have_star = orig_have_star;
    5b26:	7dfa      	ldrb	r2, [r7, #23]
    5b28:	68fb      	ldr	r3, [r7, #12]
    5b2a:	719a      	strb	r2, [r3, #6]
    comp->num_dict_params = orig_num_dict_params;
    5b2c:	68fb      	ldr	r3, [r7, #12]
    5b2e:	8aba      	ldrh	r2, [r7, #20]
    5b30:	829a      	strh	r2, [r3, #20]
    comp->num_default_params = orig_num_default_params;
    5b32:	68fb      	ldr	r3, [r7, #12]
    5b34:	8a7a      	ldrh	r2, [r7, #18]
    5b36:	82da      	strh	r2, [r3, #22]
    5b38:	e000      	b.n	5b3c <compile_funcdef_lambdef+0xa0>
        return;
    5b3a:	bf00      	nop
}
    5b3c:	3718      	adds	r7, #24
    5b3e:	46bd      	mov	sp, r7
    5b40:	bd80      	pop	{r7, pc}
    5b42:	bf00      	nop
    5b44:	00005929 	.word	0x00005929

00005b48 <compile_funcdef_helper>:

// leaves function object on stack
// returns function name
STATIC qstr compile_funcdef_helper(compiler_t *comp, mp_parse_node_struct_t *pns, uint emit_options) {
    5b48:	b580      	push	{r7, lr}
    5b4a:	b086      	sub	sp, #24
    5b4c:	af00      	add	r7, sp, #0
    5b4e:	60f8      	str	r0, [r7, #12]
    5b50:	60b9      	str	r1, [r7, #8]
    5b52:	607a      	str	r2, [r7, #4]
    if (comp->pass == MP_PASS_SCOPE) {
    5b54:	68fb      	ldr	r3, [r7, #12]
    5b56:	795b      	ldrb	r3, [r3, #5]
    5b58:	2b01      	cmp	r3, #1
    5b5a:	d109      	bne.n	5b70 <compile_funcdef_helper+0x28>
        // create a new scope for this function
        scope_t *s = scope_new_and_link(comp, SCOPE_FUNCTION, (mp_parse_node_t)pns, emit_options);
    5b5c:	68ba      	ldr	r2, [r7, #8]
    5b5e:	687b      	ldr	r3, [r7, #4]
    5b60:	2107      	movs	r1, #7
    5b62:	68f8      	ldr	r0, [r7, #12]
    5b64:	f7ff f962 	bl	4e2c <scope_new_and_link>
    5b68:	6178      	str	r0, [r7, #20]
        // store the function scope so the compiling function can use it at each pass
        pns->nodes[4] = (mp_parse_node_t)s;
    5b6a:	697a      	ldr	r2, [r7, #20]
    5b6c:	68bb      	ldr	r3, [r7, #8]
    5b6e:	619a      	str	r2, [r3, #24]
    }

    // get the scope for this function
    scope_t *fscope = (scope_t*)pns->nodes[4];
    5b70:	68bb      	ldr	r3, [r7, #8]
    5b72:	699b      	ldr	r3, [r3, #24]
    5b74:	613b      	str	r3, [r7, #16]

    // compile the function definition
    compile_funcdef_lambdef(comp, fscope, pns->nodes[1], PN_typedargslist);
    5b76:	68bb      	ldr	r3, [r7, #8]
    5b78:	68da      	ldr	r2, [r3, #12]
    5b7a:	233e      	movs	r3, #62	; 0x3e
    5b7c:	6939      	ldr	r1, [r7, #16]
    5b7e:	68f8      	ldr	r0, [r7, #12]
    5b80:	f7ff ff8c 	bl	5a9c <compile_funcdef_lambdef>

    // return its name (the 'f' in "def f(...):")
    return fscope->simple_name;
    5b84:	693b      	ldr	r3, [r7, #16]
    5b86:	8a5b      	ldrh	r3, [r3, #18]
}
    5b88:	4618      	mov	r0, r3
    5b8a:	3718      	adds	r7, #24
    5b8c:	46bd      	mov	sp, r7
    5b8e:	bd80      	pop	{r7, pc}

00005b90 <compile_classdef_helper>:

// leaves class object on stack
// returns class name
STATIC qstr compile_classdef_helper(compiler_t *comp, mp_parse_node_struct_t *pns, uint emit_options) {
    5b90:	b580      	push	{r7, lr}
    5b92:	b088      	sub	sp, #32
    5b94:	af00      	add	r7, sp, #0
    5b96:	60f8      	str	r0, [r7, #12]
    5b98:	60b9      	str	r1, [r7, #8]
    5b9a:	607a      	str	r2, [r7, #4]
    if (comp->pass == MP_PASS_SCOPE) {
    5b9c:	68fb      	ldr	r3, [r7, #12]
    5b9e:	795b      	ldrb	r3, [r3, #5]
    5ba0:	2b01      	cmp	r3, #1
    5ba2:	d109      	bne.n	5bb8 <compile_classdef_helper+0x28>
        // create a new scope for this class
        scope_t *s = scope_new_and_link(comp, SCOPE_CLASS, (mp_parse_node_t)pns, emit_options);
    5ba4:	68ba      	ldr	r2, [r7, #8]
    5ba6:	687b      	ldr	r3, [r7, #4]
    5ba8:	2101      	movs	r1, #1
    5baa:	68f8      	ldr	r0, [r7, #12]
    5bac:	f7ff f93e 	bl	4e2c <scope_new_and_link>
    5bb0:	61b8      	str	r0, [r7, #24]
        // store the class scope so the compiling function can use it at each pass
        pns->nodes[3] = (mp_parse_node_t)s;
    5bb2:	69ba      	ldr	r2, [r7, #24]
    5bb4:	68bb      	ldr	r3, [r7, #8]
    5bb6:	615a      	str	r2, [r3, #20]
    }

    EMIT(load_build_class);
    5bb8:	68fb      	ldr	r3, [r7, #12]
    5bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5bbc:	4618      	mov	r0, r3
    5bbe:	f004 fd01 	bl	a5c4 <mp_emit_bc_load_build_class>

    // scope for this class
    scope_t *cscope = (scope_t*)pns->nodes[3];
    5bc2:	68bb      	ldr	r3, [r7, #8]
    5bc4:	695b      	ldr	r3, [r3, #20]
    5bc6:	617b      	str	r3, [r7, #20]

    // compile the class
    close_over_variables_etc(comp, cscope, 0, 0);
    5bc8:	2300      	movs	r3, #0
    5bca:	2200      	movs	r2, #0
    5bcc:	6979      	ldr	r1, [r7, #20]
    5bce:	68f8      	ldr	r0, [r7, #12]
    5bd0:	f7ff fe14 	bl	57fc <close_over_variables_etc>

    // get its name
    EMIT_ARG(load_const_str, cscope->simple_name);
    5bd4:	68fb      	ldr	r3, [r7, #12]
    5bd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5bd8:	697b      	ldr	r3, [r7, #20]
    5bda:	8a5b      	ldrh	r3, [r3, #18]
    5bdc:	4619      	mov	r1, r3
    5bde:	4610      	mov	r0, r2
    5be0:	f004 fc5e 	bl	a4a0 <mp_emit_bc_load_const_str>

    // nodes[1] has parent classes, if any
    // empty parenthesis (eg class C():) gets here as an empty PN_classdef_2 and needs special handling
    mp_parse_node_t parents = pns->nodes[1];
    5be4:	68bb      	ldr	r3, [r7, #8]
    5be6:	68db      	ldr	r3, [r3, #12]
    5be8:	61fb      	str	r3, [r7, #28]
    if (MP_PARSE_NODE_IS_STRUCT_KIND(parents, PN_classdef_2)) {
    5bea:	69fb      	ldr	r3, [r7, #28]
    5bec:	2b00      	cmp	r3, #0
    5bee:	d00b      	beq.n	5c08 <compile_classdef_helper+0x78>
    5bf0:	69fb      	ldr	r3, [r7, #28]
    5bf2:	f003 0303 	and.w	r3, r3, #3
    5bf6:	2b00      	cmp	r3, #0
    5bf8:	d106      	bne.n	5c08 <compile_classdef_helper+0x78>
    5bfa:	69fb      	ldr	r3, [r7, #28]
    5bfc:	685b      	ldr	r3, [r3, #4]
    5bfe:	b2db      	uxtb	r3, r3
    5c00:	2b96      	cmp	r3, #150	; 0x96
    5c02:	d101      	bne.n	5c08 <compile_classdef_helper+0x78>
        parents = MP_PARSE_NODE_NULL;
    5c04:	2300      	movs	r3, #0
    5c06:	61fb      	str	r3, [r7, #28]
    }
    compile_trailer_paren_helper(comp, parents, false, 2);
    5c08:	2302      	movs	r3, #2
    5c0a:	2200      	movs	r2, #0
    5c0c:	69f9      	ldr	r1, [r7, #28]
    5c0e:	68f8      	ldr	r0, [r7, #12]
    5c10:	f002 fabc 	bl	818c <compile_trailer_paren_helper>

    // return its name (the 'C' in class C(...):")
    return cscope->simple_name;
    5c14:	697b      	ldr	r3, [r7, #20]
    5c16:	8a5b      	ldrh	r3, [r3, #18]
}
    5c18:	4618      	mov	r0, r3
    5c1a:	3720      	adds	r7, #32
    5c1c:	46bd      	mov	sp, r7
    5c1e:	bd80      	pop	{r7, pc}

00005c20 <compile_built_in_decorator>:

// returns true if it was a built-in decorator (even if the built-in had an error)
STATIC bool compile_built_in_decorator(compiler_t *comp, int name_len, mp_parse_node_t *name_nodes, uint *emit_options) {
    5c20:	b580      	push	{r7, lr}
    5c22:	b086      	sub	sp, #24
    5c24:	af00      	add	r7, sp, #0
    5c26:	60f8      	str	r0, [r7, #12]
    5c28:	60b9      	str	r1, [r7, #8]
    5c2a:	607a      	str	r2, [r7, #4]
    5c2c:	603b      	str	r3, [r7, #0]
    if (MP_PARSE_NODE_LEAF_ARG(name_nodes[0]) != MP_QSTR_micropython) {
    5c2e:	687b      	ldr	r3, [r7, #4]
    5c30:	681b      	ldr	r3, [r3, #0]
    5c32:	091b      	lsrs	r3, r3, #4
    5c34:	2b96      	cmp	r3, #150	; 0x96
    5c36:	d001      	beq.n	5c3c <compile_built_in_decorator+0x1c>
        return false;
    5c38:	2300      	movs	r3, #0
    5c3a:	e020      	b.n	5c7e <compile_built_in_decorator+0x5e>
    }

    if (name_len != 2) {
    5c3c:	68bb      	ldr	r3, [r7, #8]
    5c3e:	2b02      	cmp	r3, #2
    5c40:	d008      	beq.n	5c54 <compile_built_in_decorator+0x34>
        compile_syntax_error(comp, name_nodes[0], "invalid micropython decorator");
    5c42:	687b      	ldr	r3, [r7, #4]
    5c44:	681b      	ldr	r3, [r3, #0]
    5c46:	4a10      	ldr	r2, [pc, #64]	; (5c88 <compile_built_in_decorator+0x68>)
    5c48:	4619      	mov	r1, r3
    5c4a:	68f8      	ldr	r0, [r7, #12]
    5c4c:	f7ff f888 	bl	4d60 <compile_syntax_error>
        return true;
    5c50:	2301      	movs	r3, #1
    5c52:	e014      	b.n	5c7e <compile_built_in_decorator+0x5e>
    }

    qstr attr = MP_PARSE_NODE_LEAF_ARG(name_nodes[1]);
    5c54:	687b      	ldr	r3, [r7, #4]
    5c56:	3304      	adds	r3, #4
    5c58:	681b      	ldr	r3, [r3, #0]
    5c5a:	091b      	lsrs	r3, r3, #4
    5c5c:	617b      	str	r3, [r7, #20]
    if (attr == MP_QSTR_bytecode) {
    5c5e:	697b      	ldr	r3, [r7, #20]
    5c60:	2b5c      	cmp	r3, #92	; 0x5c
    5c62:	d103      	bne.n	5c6c <compile_built_in_decorator+0x4c>
        *emit_options = MP_EMIT_OPT_BYTECODE;
    5c64:	683b      	ldr	r3, [r7, #0]
    5c66:	2201      	movs	r2, #1
    5c68:	601a      	str	r2, [r3, #0]
    5c6a:	e007      	b.n	5c7c <compile_built_in_decorator+0x5c>
    #if MICROPY_EMIT_INLINE_ASM
    } else if (attr == ASM_DECORATOR_QSTR) {
        *emit_options = MP_EMIT_OPT_ASM;
    #endif
    } else {
        compile_syntax_error(comp, name_nodes[1], "invalid micropython decorator");
    5c6c:	687b      	ldr	r3, [r7, #4]
    5c6e:	3304      	adds	r3, #4
    5c70:	681b      	ldr	r3, [r3, #0]
    5c72:	4a05      	ldr	r2, [pc, #20]	; (5c88 <compile_built_in_decorator+0x68>)
    5c74:	4619      	mov	r1, r3
    5c76:	68f8      	ldr	r0, [r7, #12]
    5c78:	f7ff f872 	bl	4d60 <compile_syntax_error>
    }

    return true;
    5c7c:	2301      	movs	r3, #1
}
    5c7e:	4618      	mov	r0, r3
    5c80:	3718      	adds	r7, #24
    5c82:	46bd      	mov	sp, r7
    5c84:	bd80      	pop	{r7, pc}
    5c86:	bf00      	nop
    5c88:	0001e4b8 	.word	0x0001e4b8

00005c8c <compile_decorated>:

STATIC void compile_decorated(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5c8c:	b580      	push	{r7, lr}
    5c8e:	b08e      	sub	sp, #56	; 0x38
    5c90:	af00      	add	r7, sp, #0
    5c92:	6078      	str	r0, [r7, #4]
    5c94:	6039      	str	r1, [r7, #0]
    // get the list of decorators
    mp_parse_node_t *nodes;
    int n = mp_parse_node_extract_list(&pns->nodes[0], PN_decorators, &nodes);
    5c96:	683b      	ldr	r3, [r7, #0]
    5c98:	3308      	adds	r3, #8
    5c9a:	f107 0210 	add.w	r2, r7, #16
    5c9e:	213b      	movs	r1, #59	; 0x3b
    5ca0:	4618      	mov	r0, r3
    5ca2:	f7fd ff63 	bl	3b6c <mp_parse_node_extract_list>
    5ca6:	6238      	str	r0, [r7, #32]

    // inherit emit options for this function/class definition
    uint emit_options = comp->scope_cur->emit_options;
    5ca8:	687b      	ldr	r3, [r7, #4]
    5caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5cac:	7e5b      	ldrb	r3, [r3, #25]
    5cae:	60fb      	str	r3, [r7, #12]

    // compile each decorator
    int num_built_in_decorators = 0;
    5cb0:	2300      	movs	r3, #0
    5cb2:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 0; i < n; i++) {
    5cb4:	2300      	movs	r3, #0
    5cb6:	633b      	str	r3, [r7, #48]	; 0x30
    5cb8:	e075      	b.n	5da6 <compile_decorated+0x11a>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(nodes[i], PN_decorator)); // should be
    5cba:	693a      	ldr	r2, [r7, #16]
    5cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5cbe:	009b      	lsls	r3, r3, #2
    5cc0:	4413      	add	r3, r2
    5cc2:	681b      	ldr	r3, [r3, #0]
    5cc4:	2b00      	cmp	r3, #0
    5cc6:	d011      	beq.n	5cec <compile_decorated+0x60>
    5cc8:	693a      	ldr	r2, [r7, #16]
    5cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5ccc:	009b      	lsls	r3, r3, #2
    5cce:	4413      	add	r3, r2
    5cd0:	681b      	ldr	r3, [r3, #0]
    5cd2:	f003 0303 	and.w	r3, r3, #3
    5cd6:	2b00      	cmp	r3, #0
    5cd8:	d108      	bne.n	5cec <compile_decorated+0x60>
    5cda:	693a      	ldr	r2, [r7, #16]
    5cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5cde:	009b      	lsls	r3, r3, #2
    5ce0:	4413      	add	r3, r2
    5ce2:	681b      	ldr	r3, [r3, #0]
    5ce4:	685b      	ldr	r3, [r3, #4]
    5ce6:	b2db      	uxtb	r3, r3
    5ce8:	2b3a      	cmp	r3, #58	; 0x3a
    5cea:	d006      	beq.n	5cfa <compile_decorated+0x6e>
    5cec:	4b50      	ldr	r3, [pc, #320]	; (5e30 <compile_decorated+0x1a4>)
    5cee:	4a51      	ldr	r2, [pc, #324]	; (5e34 <compile_decorated+0x1a8>)
    5cf0:	f44f 7149 	mov.w	r1, #804	; 0x324
    5cf4:	4850      	ldr	r0, [pc, #320]	; (5e38 <compile_decorated+0x1ac>)
    5cf6:	f015 fb39 	bl	1b36c <__assert_func>
        mp_parse_node_struct_t *pns_decorator = (mp_parse_node_struct_t*)nodes[i];
    5cfa:	693a      	ldr	r2, [r7, #16]
    5cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5cfe:	009b      	lsls	r3, r3, #2
    5d00:	4413      	add	r3, r2
    5d02:	681b      	ldr	r3, [r3, #0]
    5d04:	61fb      	str	r3, [r7, #28]

        // nodes[0] contains the decorator function, which is a dotted name
        mp_parse_node_t *name_nodes;
        int name_len = mp_parse_node_extract_list(&pns_decorator->nodes[0], PN_dotted_name, &name_nodes);
    5d06:	69fb      	ldr	r3, [r7, #28]
    5d08:	3308      	adds	r3, #8
    5d0a:	f107 0208 	add.w	r2, r7, #8
    5d0e:	2166      	movs	r1, #102	; 0x66
    5d10:	4618      	mov	r0, r3
    5d12:	f7fd ff2b 	bl	3b6c <mp_parse_node_extract_list>
    5d16:	61b8      	str	r0, [r7, #24]

        // check for built-in decorators
        if (compile_built_in_decorator(comp, name_len, name_nodes, &emit_options)) {
    5d18:	68ba      	ldr	r2, [r7, #8]
    5d1a:	f107 030c 	add.w	r3, r7, #12
    5d1e:	69b9      	ldr	r1, [r7, #24]
    5d20:	6878      	ldr	r0, [r7, #4]
    5d22:	f7ff ff7d 	bl	5c20 <compile_built_in_decorator>
    5d26:	4603      	mov	r3, r0
    5d28:	2b00      	cmp	r3, #0
    5d2a:	d003      	beq.n	5d34 <compile_decorated+0xa8>
            // this was a built-in
            num_built_in_decorators += 1;
    5d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5d2e:	3301      	adds	r3, #1
    5d30:	637b      	str	r3, [r7, #52]	; 0x34
    5d32:	e035      	b.n	5da0 <compile_decorated+0x114>

        } else {
            // not a built-in, compile normally

            // compile the decorator function
            compile_node(comp, name_nodes[0]);
    5d34:	68bb      	ldr	r3, [r7, #8]
    5d36:	681b      	ldr	r3, [r3, #0]
    5d38:	4619      	mov	r1, r3
    5d3a:	6878      	ldr	r0, [r7, #4]
    5d3c:	f002 fe8a 	bl	8a54 <compile_node>
            for (int j = 1; j < name_len; j++) {
    5d40:	2301      	movs	r3, #1
    5d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    5d44:	e01e      	b.n	5d84 <compile_decorated+0xf8>
                assert(MP_PARSE_NODE_IS_ID(name_nodes[j])); // should be
    5d46:	68ba      	ldr	r2, [r7, #8]
    5d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5d4a:	009b      	lsls	r3, r3, #2
    5d4c:	4413      	add	r3, r2
    5d4e:	681b      	ldr	r3, [r3, #0]
    5d50:	f003 030f 	and.w	r3, r3, #15
    5d54:	2b02      	cmp	r3, #2
    5d56:	d006      	beq.n	5d66 <compile_decorated+0xda>
    5d58:	4b38      	ldr	r3, [pc, #224]	; (5e3c <compile_decorated+0x1b0>)
    5d5a:	4a36      	ldr	r2, [pc, #216]	; (5e34 <compile_decorated+0x1a8>)
    5d5c:	f240 3136 	movw	r1, #822	; 0x336
    5d60:	4835      	ldr	r0, [pc, #212]	; (5e38 <compile_decorated+0x1ac>)
    5d62:	f015 fb03 	bl	1b36c <__assert_func>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(name_nodes[j]), MP_EMIT_ATTR_LOAD);
    5d66:	687b      	ldr	r3, [r7, #4]
    5d68:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5d6a:	68ba      	ldr	r2, [r7, #8]
    5d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5d6e:	009b      	lsls	r3, r3, #2
    5d70:	4413      	add	r3, r2
    5d72:	681b      	ldr	r3, [r3, #0]
    5d74:	091b      	lsrs	r3, r3, #4
    5d76:	2200      	movs	r2, #0
    5d78:	4619      	mov	r1, r3
    5d7a:	f004 fc5b 	bl	a634 <mp_emit_bc_attr>
            for (int j = 1; j < name_len; j++) {
    5d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5d80:	3301      	adds	r3, #1
    5d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    5d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5d86:	69bb      	ldr	r3, [r7, #24]
    5d88:	429a      	cmp	r2, r3
    5d8a:	dbdc      	blt.n	5d46 <compile_decorated+0xba>
            }

            // nodes[1] contains arguments to the decorator function, if any
            if (!MP_PARSE_NODE_IS_NULL(pns_decorator->nodes[1])) {
    5d8c:	69fb      	ldr	r3, [r7, #28]
    5d8e:	68db      	ldr	r3, [r3, #12]
    5d90:	2b00      	cmp	r3, #0
    5d92:	d005      	beq.n	5da0 <compile_decorated+0x114>
                // call the decorator function with the arguments in nodes[1]
                compile_node(comp, pns_decorator->nodes[1]);
    5d94:	69fb      	ldr	r3, [r7, #28]
    5d96:	68db      	ldr	r3, [r3, #12]
    5d98:	4619      	mov	r1, r3
    5d9a:	6878      	ldr	r0, [r7, #4]
    5d9c:	f002 fe5a 	bl	8a54 <compile_node>
    for (int i = 0; i < n; i++) {
    5da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5da2:	3301      	adds	r3, #1
    5da4:	633b      	str	r3, [r7, #48]	; 0x30
    5da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    5da8:	6a3b      	ldr	r3, [r7, #32]
    5daa:	429a      	cmp	r2, r3
    5dac:	db85      	blt.n	5cba <compile_decorated+0x2e>
            }
        }
    }

    // compile the body (funcdef, async funcdef or classdef) and get its name
    mp_parse_node_struct_t *pns_body = (mp_parse_node_struct_t*)pns->nodes[1];
    5dae:	683b      	ldr	r3, [r7, #0]
    5db0:	68db      	ldr	r3, [r3, #12]
    5db2:	617b      	str	r3, [r7, #20]
    qstr body_name = 0;
    5db4:	2300      	movs	r3, #0
    5db6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (MP_PARSE_NODE_STRUCT_KIND(pns_body) == PN_funcdef) {
    5db8:	697b      	ldr	r3, [r7, #20]
    5dba:	685b      	ldr	r3, [r3, #4]
    5dbc:	b2db      	uxtb	r3, r3
    5dbe:	2b03      	cmp	r3, #3
    5dc0:	d107      	bne.n	5dd2 <compile_decorated+0x146>
        body_name = compile_funcdef_helper(comp, pns_body, emit_options);
    5dc2:	68fb      	ldr	r3, [r7, #12]
    5dc4:	461a      	mov	r2, r3
    5dc6:	6979      	ldr	r1, [r7, #20]
    5dc8:	6878      	ldr	r0, [r7, #4]
    5dca:	f7ff febd 	bl	5b48 <compile_funcdef_helper>
    5dce:	62b8      	str	r0, [r7, #40]	; 0x28
    5dd0:	e012      	b.n	5df8 <compile_decorated+0x16c>
        body_name = compile_funcdef_helper(comp, pns0, emit_options);
        scope_t *fscope = (scope_t*)pns0->nodes[4];
        fscope->scope_flags |= MP_SCOPE_FLAG_GENERATOR;
    #endif
    } else {
        assert(MP_PARSE_NODE_STRUCT_KIND(pns_body) == PN_classdef); // should be
    5dd2:	697b      	ldr	r3, [r7, #20]
    5dd4:	685b      	ldr	r3, [r3, #4]
    5dd6:	b2db      	uxtb	r3, r3
    5dd8:	2b33      	cmp	r3, #51	; 0x33
    5dda:	d006      	beq.n	5dea <compile_decorated+0x15e>
    5ddc:	4b18      	ldr	r3, [pc, #96]	; (5e40 <compile_decorated+0x1b4>)
    5dde:	4a15      	ldr	r2, [pc, #84]	; (5e34 <compile_decorated+0x1a8>)
    5de0:	f44f 7154 	mov.w	r1, #848	; 0x350
    5de4:	4814      	ldr	r0, [pc, #80]	; (5e38 <compile_decorated+0x1ac>)
    5de6:	f015 fac1 	bl	1b36c <__assert_func>
        body_name = compile_classdef_helper(comp, pns_body, emit_options);
    5dea:	68fb      	ldr	r3, [r7, #12]
    5dec:	461a      	mov	r2, r3
    5dee:	6979      	ldr	r1, [r7, #20]
    5df0:	6878      	ldr	r0, [r7, #4]
    5df2:	f7ff fecd 	bl	5b90 <compile_classdef_helper>
    5df6:	62b8      	str	r0, [r7, #40]	; 0x28
    }

    // call each decorator
    for (int i = 0; i < n - num_built_in_decorators; i++) {
    5df8:	2300      	movs	r3, #0
    5dfa:	627b      	str	r3, [r7, #36]	; 0x24
    5dfc:	e009      	b.n	5e12 <compile_decorated+0x186>
        EMIT_ARG(call_function, 1, 0, 0);
    5dfe:	687b      	ldr	r3, [r7, #4]
    5e00:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5e02:	2300      	movs	r3, #0
    5e04:	2200      	movs	r2, #0
    5e06:	2101      	movs	r1, #1
    5e08:	f004 ffc4 	bl	ad94 <mp_emit_bc_call_function>
    for (int i = 0; i < n - num_built_in_decorators; i++) {
    5e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e0e:	3301      	adds	r3, #1
    5e10:	627b      	str	r3, [r7, #36]	; 0x24
    5e12:	6a3a      	ldr	r2, [r7, #32]
    5e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5e16:	1ad2      	subs	r2, r2, r3
    5e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e1a:	429a      	cmp	r2, r3
    5e1c:	dcef      	bgt.n	5dfe <compile_decorated+0x172>
    }

    // store func/class object into name
    compile_store_id(comp, body_name);
    5e1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    5e20:	6878      	ldr	r0, [r7, #4]
    5e22:	f7ff f8bd 	bl	4fa0 <compile_store_id>
}
    5e26:	bf00      	nop
    5e28:	3738      	adds	r7, #56	; 0x38
    5e2a:	46bd      	mov	sp, r7
    5e2c:	bd80      	pop	{r7, pc}
    5e2e:	bf00      	nop
    5e30:	0001e4d8 	.word	0x0001e4d8
    5e34:	0001ef04 	.word	0x0001ef04
    5e38:	0001e304 	.word	0x0001e304
    5e3c:	0001e510 	.word	0x0001e510
    5e40:	0001e534 	.word	0x0001e534

00005e44 <compile_funcdef>:

STATIC void compile_funcdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    5e44:	b580      	push	{r7, lr}
    5e46:	b084      	sub	sp, #16
    5e48:	af00      	add	r7, sp, #0
    5e4a:	6078      	str	r0, [r7, #4]
    5e4c:	6039      	str	r1, [r7, #0]
    qstr fname = compile_funcdef_helper(comp, pns, comp->scope_cur->emit_options);
    5e4e:	687b      	ldr	r3, [r7, #4]
    5e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5e52:	7e5b      	ldrb	r3, [r3, #25]
    5e54:	461a      	mov	r2, r3
    5e56:	6839      	ldr	r1, [r7, #0]
    5e58:	6878      	ldr	r0, [r7, #4]
    5e5a:	f7ff fe75 	bl	5b48 <compile_funcdef_helper>
    5e5e:	60f8      	str	r0, [r7, #12]
    // store function object into function name
    compile_store_id(comp, fname);
    5e60:	68f9      	ldr	r1, [r7, #12]
    5e62:	6878      	ldr	r0, [r7, #4]
    5e64:	f7ff f89c 	bl	4fa0 <compile_store_id>
}
    5e68:	bf00      	nop
    5e6a:	3710      	adds	r7, #16
    5e6c:	46bd      	mov	sp, r7
    5e6e:	bd80      	pop	{r7, pc}

00005e70 <c_del_stmt>:

STATIC void c_del_stmt(compiler_t *comp, mp_parse_node_t pn) {
    5e70:	b580      	push	{r7, lr}
    5e72:	b08a      	sub	sp, #40	; 0x28
    5e74:	af00      	add	r7, sp, #0
    5e76:	6078      	str	r0, [r7, #4]
    5e78:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_ID(pn)) {
    5e7a:	683b      	ldr	r3, [r7, #0]
    5e7c:	f003 030f 	and.w	r3, r3, #15
    5e80:	2b02      	cmp	r3, #2
    5e82:	d106      	bne.n	5e92 <c_del_stmt+0x22>
        compile_delete_id(comp, MP_PARSE_NODE_LEAF_ARG(pn));
    5e84:	683b      	ldr	r3, [r7, #0]
    5e86:	091b      	lsrs	r3, r3, #4
    5e88:	4619      	mov	r1, r3
    5e8a:	6878      	ldr	r0, [r7, #4]
    5e8c:	f7ff f8a6 	bl	4fdc <compile_delete_id>
    } else {
        // some arbitrary statement that we can't delete (eg del 1)
        goto cannot_delete;
    }

    return;
    5e90:	e122      	b.n	60d8 <c_del_stmt+0x268>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    5e92:	683b      	ldr	r3, [r7, #0]
    5e94:	2b00      	cmp	r3, #0
    5e96:	f000 808f 	beq.w	5fb8 <c_del_stmt+0x148>
    5e9a:	683b      	ldr	r3, [r7, #0]
    5e9c:	f003 0303 	and.w	r3, r3, #3
    5ea0:	2b00      	cmp	r3, #0
    5ea2:	f040 8089 	bne.w	5fb8 <c_del_stmt+0x148>
    5ea6:	683b      	ldr	r3, [r7, #0]
    5ea8:	685b      	ldr	r3, [r3, #4]
    5eaa:	b2db      	uxtb	r3, r3
    5eac:	2b29      	cmp	r3, #41	; 0x29
    5eae:	f040 8083 	bne.w	5fb8 <c_del_stmt+0x148>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    5eb2:	683b      	ldr	r3, [r7, #0]
    5eb4:	61bb      	str	r3, [r7, #24]
        compile_node(comp, pns->nodes[0]); // base of the atom_expr_normal node
    5eb6:	69bb      	ldr	r3, [r7, #24]
    5eb8:	689b      	ldr	r3, [r3, #8]
    5eba:	4619      	mov	r1, r3
    5ebc:	6878      	ldr	r0, [r7, #4]
    5ebe:	f002 fdc9 	bl	8a54 <compile_node>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    5ec2:	69bb      	ldr	r3, [r7, #24]
    5ec4:	68db      	ldr	r3, [r3, #12]
    5ec6:	2b00      	cmp	r3, #0
    5ec8:	f000 8101 	beq.w	60ce <c_del_stmt+0x25e>
    5ecc:	69bb      	ldr	r3, [r7, #24]
    5ece:	68db      	ldr	r3, [r3, #12]
    5ed0:	f003 0303 	and.w	r3, r3, #3
    5ed4:	2b00      	cmp	r3, #0
    5ed6:	f040 80fa 	bne.w	60ce <c_del_stmt+0x25e>
            mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    5eda:	69bb      	ldr	r3, [r7, #24]
    5edc:	68db      	ldr	r3, [r3, #12]
    5ede:	627b      	str	r3, [r7, #36]	; 0x24
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_atom_expr_trailers) {
    5ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ee2:	685b      	ldr	r3, [r3, #4]
    5ee4:	b2db      	uxtb	r3, r3
    5ee6:	2b86      	cmp	r3, #134	; 0x86
    5ee8:	d137      	bne.n	5f5a <c_del_stmt+0xea>
                int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    5eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5eec:	685b      	ldr	r3, [r3, #4]
    5eee:	0a1b      	lsrs	r3, r3, #8
    5ef0:	617b      	str	r3, [r7, #20]
                for (int i = 0; i < n - 1; i++) {
    5ef2:	2300      	movs	r3, #0
    5ef4:	623b      	str	r3, [r7, #32]
    5ef6:	e00b      	b.n	5f10 <c_del_stmt+0xa0>
                    compile_node(comp, pns1->nodes[i]);
    5ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5efa:	6a3a      	ldr	r2, [r7, #32]
    5efc:	3202      	adds	r2, #2
    5efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5f02:	4619      	mov	r1, r3
    5f04:	6878      	ldr	r0, [r7, #4]
    5f06:	f002 fda5 	bl	8a54 <compile_node>
                for (int i = 0; i < n - 1; i++) {
    5f0a:	6a3b      	ldr	r3, [r7, #32]
    5f0c:	3301      	adds	r3, #1
    5f0e:	623b      	str	r3, [r7, #32]
    5f10:	697b      	ldr	r3, [r7, #20]
    5f12:	1e5a      	subs	r2, r3, #1
    5f14:	6a3b      	ldr	r3, [r7, #32]
    5f16:	429a      	cmp	r2, r3
    5f18:	dcee      	bgt.n	5ef8 <c_del_stmt+0x88>
                assert(MP_PARSE_NODE_IS_STRUCT(pns1->nodes[n - 1]));
    5f1a:	697b      	ldr	r3, [r7, #20]
    5f1c:	1e5a      	subs	r2, r3, #1
    5f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f20:	3202      	adds	r2, #2
    5f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5f26:	2b00      	cmp	r3, #0
    5f28:	d009      	beq.n	5f3e <c_del_stmt+0xce>
    5f2a:	697b      	ldr	r3, [r7, #20]
    5f2c:	1e5a      	subs	r2, r3, #1
    5f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f30:	3202      	adds	r2, #2
    5f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5f36:	f003 0303 	and.w	r3, r3, #3
    5f3a:	2b00      	cmp	r3, #0
    5f3c:	d006      	beq.n	5f4c <c_del_stmt+0xdc>
    5f3e:	4b68      	ldr	r3, [pc, #416]	; (60e0 <c_del_stmt+0x270>)
    5f40:	4a68      	ldr	r2, [pc, #416]	; (60e4 <c_del_stmt+0x274>)
    5f42:	f240 3172 	movw	r1, #882	; 0x372
    5f46:	4868      	ldr	r0, [pc, #416]	; (60e8 <c_del_stmt+0x278>)
    5f48:	f015 fa10 	bl	1b36c <__assert_func>
                pns1 = (mp_parse_node_struct_t*)pns1->nodes[n - 1];
    5f4c:	697b      	ldr	r3, [r7, #20]
    5f4e:	1e5a      	subs	r2, r3, #1
    5f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f52:	3202      	adds	r2, #2
    5f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5f58:	627b      	str	r3, [r7, #36]	; 0x24
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_bracket) {
    5f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f5c:	685b      	ldr	r3, [r3, #4]
    5f5e:	b2db      	uxtb	r3, r3
    5f60:	2b2e      	cmp	r3, #46	; 0x2e
    5f62:	d10c      	bne.n	5f7e <c_del_stmt+0x10e>
                compile_node(comp, pns1->nodes[0]);
    5f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f66:	689b      	ldr	r3, [r3, #8]
    5f68:	4619      	mov	r1, r3
    5f6a:	6878      	ldr	r0, [r7, #4]
    5f6c:	f002 fd72 	bl	8a54 <compile_node>
                EMIT_ARG(subscr, MP_EMIT_SUBSCR_DELETE);
    5f70:	687b      	ldr	r3, [r7, #4]
    5f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5f74:	2102      	movs	r1, #2
    5f76:	4618      	mov	r0, r3
    5f78:	f004 fb34 	bl	a5e4 <mp_emit_bc_subscr>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    5f7c:	e0a1      	b.n	60c2 <c_del_stmt+0x252>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_trailer_period) {
    5f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f80:	685b      	ldr	r3, [r3, #4]
    5f82:	b2db      	uxtb	r3, r3
    5f84:	2b2f      	cmp	r3, #47	; 0x2f
    5f86:	f040 809d 	bne.w	60c4 <c_del_stmt+0x254>
                assert(MP_PARSE_NODE_IS_ID(pns1->nodes[0]));
    5f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5f8c:	689b      	ldr	r3, [r3, #8]
    5f8e:	f003 030f 	and.w	r3, r3, #15
    5f92:	2b02      	cmp	r3, #2
    5f94:	d006      	beq.n	5fa4 <c_del_stmt+0x134>
    5f96:	4b55      	ldr	r3, [pc, #340]	; (60ec <c_del_stmt+0x27c>)
    5f98:	4a52      	ldr	r2, [pc, #328]	; (60e4 <c_del_stmt+0x274>)
    5f9a:	f240 3179 	movw	r1, #889	; 0x379
    5f9e:	4852      	ldr	r0, [pc, #328]	; (60e8 <c_del_stmt+0x278>)
    5fa0:	f015 f9e4 	bl	1b36c <__assert_func>
                EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0]), MP_EMIT_ATTR_DELETE);
    5fa4:	687b      	ldr	r3, [r7, #4]
    5fa6:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5faa:	689b      	ldr	r3, [r3, #8]
    5fac:	091b      	lsrs	r3, r3, #4
    5fae:	2202      	movs	r2, #2
    5fb0:	4619      	mov	r1, r3
    5fb2:	f004 fb3f 	bl	a634 <mp_emit_bc_attr>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_expr_normal)) {
    5fb6:	e084      	b.n	60c2 <c_del_stmt+0x252>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_atom_paren)) {
    5fb8:	683b      	ldr	r3, [r7, #0]
    5fba:	2b00      	cmp	r3, #0
    5fbc:	f000 8087 	beq.w	60ce <c_del_stmt+0x25e>
    5fc0:	683b      	ldr	r3, [r7, #0]
    5fc2:	f003 0303 	and.w	r3, r3, #3
    5fc6:	2b00      	cmp	r3, #0
    5fc8:	f040 8081 	bne.w	60ce <c_del_stmt+0x25e>
    5fcc:	683b      	ldr	r3, [r7, #0]
    5fce:	685b      	ldr	r3, [r3, #4]
    5fd0:	b2db      	uxtb	r3, r3
    5fd2:	2b2a      	cmp	r3, #42	; 0x2a
    5fd4:	d17b      	bne.n	60ce <c_del_stmt+0x25e>
        pn = ((mp_parse_node_struct_t*)pn)->nodes[0];
    5fd6:	683b      	ldr	r3, [r7, #0]
    5fd8:	689b      	ldr	r3, [r3, #8]
    5fda:	603b      	str	r3, [r7, #0]
        if (MP_PARSE_NODE_IS_NULL(pn)) {
    5fdc:	683b      	ldr	r3, [r7, #0]
    5fde:	2b00      	cmp	r3, #0
    5fe0:	d072      	beq.n	60c8 <c_del_stmt+0x258>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_testlist_comp));
    5fe2:	683b      	ldr	r3, [r7, #0]
    5fe4:	2b00      	cmp	r3, #0
    5fe6:	d009      	beq.n	5ffc <c_del_stmt+0x18c>
    5fe8:	683b      	ldr	r3, [r7, #0]
    5fea:	f003 0303 	and.w	r3, r3, #3
    5fee:	2b00      	cmp	r3, #0
    5ff0:	d104      	bne.n	5ffc <c_del_stmt+0x18c>
    5ff2:	683b      	ldr	r3, [r7, #0]
    5ff4:	685b      	ldr	r3, [r3, #4]
    5ff6:	b2db      	uxtb	r3, r3
    5ff8:	2b8a      	cmp	r3, #138	; 0x8a
    5ffa:	d006      	beq.n	600a <c_del_stmt+0x19a>
    5ffc:	4b3c      	ldr	r3, [pc, #240]	; (60f0 <c_del_stmt+0x280>)
    5ffe:	4a39      	ldr	r2, [pc, #228]	; (60e4 <c_del_stmt+0x274>)
    6000:	f240 3187 	movw	r1, #903	; 0x387
    6004:	4838      	ldr	r0, [pc, #224]	; (60e8 <c_del_stmt+0x278>)
    6006:	f015 f9b1 	bl	1b36c <__assert_func>
            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    600a:	683b      	ldr	r3, [r7, #0]
    600c:	613b      	str	r3, [r7, #16]
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    600e:	693b      	ldr	r3, [r7, #16]
    6010:	68db      	ldr	r3, [r3, #12]
    6012:	2b00      	cmp	r3, #0
    6014:	d048      	beq.n	60a8 <c_del_stmt+0x238>
    6016:	693b      	ldr	r3, [r7, #16]
    6018:	68db      	ldr	r3, [r3, #12]
    601a:	f003 0303 	and.w	r3, r3, #3
    601e:	2b00      	cmp	r3, #0
    6020:	d142      	bne.n	60a8 <c_del_stmt+0x238>
                mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    6022:	693b      	ldr	r3, [r7, #16]
    6024:	68db      	ldr	r3, [r3, #12]
    6026:	60fb      	str	r3, [r7, #12]
                if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_testlist_comp_3b) {
    6028:	68fb      	ldr	r3, [r7, #12]
    602a:	685b      	ldr	r3, [r3, #4]
    602c:	b2db      	uxtb	r3, r3
    602e:	2b8d      	cmp	r3, #141	; 0x8d
    6030:	d111      	bne.n	6056 <c_del_stmt+0x1e6>
                    assert(MP_PARSE_NODE_IS_NULL(pns1->nodes[0]));
    6032:	68fb      	ldr	r3, [r7, #12]
    6034:	689b      	ldr	r3, [r3, #8]
    6036:	2b00      	cmp	r3, #0
    6038:	d006      	beq.n	6048 <c_del_stmt+0x1d8>
    603a:	4b2e      	ldr	r3, [pc, #184]	; (60f4 <c_del_stmt+0x284>)
    603c:	4a29      	ldr	r2, [pc, #164]	; (60e4 <c_del_stmt+0x274>)
    603e:	f240 318f 	movw	r1, #911	; 0x38f
    6042:	4829      	ldr	r0, [pc, #164]	; (60e8 <c_del_stmt+0x278>)
    6044:	f015 f992 	bl	1b36c <__assert_func>
                    c_del_stmt(comp, pns->nodes[0]);
    6048:	693b      	ldr	r3, [r7, #16]
    604a:	689b      	ldr	r3, [r3, #8]
    604c:	4619      	mov	r1, r3
    604e:	6878      	ldr	r0, [r7, #4]
    6050:	f7ff ff0e 	bl	5e70 <c_del_stmt>
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    6054:	e035      	b.n	60c2 <c_del_stmt+0x252>
                } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_testlist_comp_3c) {
    6056:	68fb      	ldr	r3, [r7, #12]
    6058:	685b      	ldr	r3, [r3, #4]
    605a:	b2db      	uxtb	r3, r3
    605c:	2b8e      	cmp	r3, #142	; 0x8e
    605e:	d11d      	bne.n	609c <c_del_stmt+0x22c>
                    int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1);
    6060:	68fb      	ldr	r3, [r7, #12]
    6062:	685b      	ldr	r3, [r3, #4]
    6064:	0a1b      	lsrs	r3, r3, #8
    6066:	60bb      	str	r3, [r7, #8]
                    c_del_stmt(comp, pns->nodes[0]);
    6068:	693b      	ldr	r3, [r7, #16]
    606a:	689b      	ldr	r3, [r3, #8]
    606c:	4619      	mov	r1, r3
    606e:	6878      	ldr	r0, [r7, #4]
    6070:	f7ff fefe 	bl	5e70 <c_del_stmt>
                    for (int i = 0; i < n; i++) {
    6074:	2300      	movs	r3, #0
    6076:	61fb      	str	r3, [r7, #28]
    6078:	e00b      	b.n	6092 <c_del_stmt+0x222>
                        c_del_stmt(comp, pns1->nodes[i]);
    607a:	68fb      	ldr	r3, [r7, #12]
    607c:	69fa      	ldr	r2, [r7, #28]
    607e:	3202      	adds	r2, #2
    6080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6084:	4619      	mov	r1, r3
    6086:	6878      	ldr	r0, [r7, #4]
    6088:	f7ff fef2 	bl	5e70 <c_del_stmt>
                    for (int i = 0; i < n; i++) {
    608c:	69fb      	ldr	r3, [r7, #28]
    608e:	3301      	adds	r3, #1
    6090:	61fb      	str	r3, [r7, #28]
    6092:	69fa      	ldr	r2, [r7, #28]
    6094:	68bb      	ldr	r3, [r7, #8]
    6096:	429a      	cmp	r2, r3
    6098:	dbef      	blt.n	607a <c_del_stmt+0x20a>
            if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    609a:	e012      	b.n	60c2 <c_del_stmt+0x252>
                } else if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_comp_for) {
    609c:	68fb      	ldr	r3, [r7, #12]
    609e:	685b      	ldr	r3, [r3, #4]
    60a0:	b2db      	uxtb	r3, r3
    60a2:	2b9f      	cmp	r3, #159	; 0x9f
    60a4:	d012      	beq.n	60cc <c_del_stmt+0x25c>
                    goto sequence_with_2_items;
    60a6:	bf00      	nop
                c_del_stmt(comp, pns->nodes[0]);
    60a8:	693b      	ldr	r3, [r7, #16]
    60aa:	689b      	ldr	r3, [r3, #8]
    60ac:	4619      	mov	r1, r3
    60ae:	6878      	ldr	r0, [r7, #4]
    60b0:	f7ff fede 	bl	5e70 <c_del_stmt>
                c_del_stmt(comp, pns->nodes[1]);
    60b4:	693b      	ldr	r3, [r7, #16]
    60b6:	68db      	ldr	r3, [r3, #12]
    60b8:	4619      	mov	r1, r3
    60ba:	6878      	ldr	r0, [r7, #4]
    60bc:	f7ff fed8 	bl	5e70 <c_del_stmt>
    return;
    60c0:	e00a      	b.n	60d8 <c_del_stmt+0x268>
    60c2:	e009      	b.n	60d8 <c_del_stmt+0x268>
                goto cannot_delete;
    60c4:	bf00      	nop
    60c6:	e002      	b.n	60ce <c_del_stmt+0x25e>
            goto cannot_delete;
    60c8:	bf00      	nop
    60ca:	e000      	b.n	60ce <c_del_stmt+0x25e>
                    goto cannot_delete;
    60cc:	bf00      	nop

cannot_delete:
    compile_syntax_error(comp, (mp_parse_node_t)pn, "can't delete expression");
    60ce:	4a0a      	ldr	r2, [pc, #40]	; (60f8 <c_del_stmt+0x288>)
    60d0:	6839      	ldr	r1, [r7, #0]
    60d2:	6878      	ldr	r0, [r7, #4]
    60d4:	f7fe fe44 	bl	4d60 <compile_syntax_error>
}
    60d8:	3728      	adds	r7, #40	; 0x28
    60da:	46bd      	mov	sp, r7
    60dc:	bd80      	pop	{r7, pc}
    60de:	bf00      	nop
    60e0:	0001e358 	.word	0x0001e358
    60e4:	0001ef18 	.word	0x0001ef18
    60e8:	0001e304 	.word	0x0001e304
    60ec:	0001e384 	.word	0x0001e384
    60f0:	0001e568 	.word	0x0001e568
    60f4:	0001e59c 	.word	0x0001e59c
    60f8:	0001e5c4 	.word	0x0001e5c4

000060fc <compile_del_stmt>:

STATIC void compile_del_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    60fc:	b580      	push	{r7, lr}
    60fe:	b082      	sub	sp, #8
    6100:	af00      	add	r7, sp, #0
    6102:	6078      	str	r0, [r7, #4]
    6104:	6039      	str	r1, [r7, #0]
    apply_to_single_or_list(comp, pns->nodes[0], PN_exprlist, c_del_stmt);
    6106:	683b      	ldr	r3, [r7, #0]
    6108:	6899      	ldr	r1, [r3, #8]
    610a:	4b04      	ldr	r3, [pc, #16]	; (611c <compile_del_stmt+0x20>)
    610c:	2290      	movs	r2, #144	; 0x90
    610e:	6878      	ldr	r0, [r7, #4]
    6110:	f7fe febe 	bl	4e90 <apply_to_single_or_list>
}
    6114:	bf00      	nop
    6116:	3708      	adds	r7, #8
    6118:	46bd      	mov	sp, r7
    611a:	bd80      	pop	{r7, pc}
    611c:	00005e71 	.word	0x00005e71

00006120 <compile_break_stmt>:

STATIC void compile_break_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6120:	b580      	push	{r7, lr}
    6122:	b082      	sub	sp, #8
    6124:	af00      	add	r7, sp, #0
    6126:	6078      	str	r0, [r7, #4]
    6128:	6039      	str	r1, [r7, #0]
    if (comp->break_label == INVALID_LABEL) {
    612a:	687b      	ldr	r3, [r7, #4]
    612c:	8b1b      	ldrh	r3, [r3, #24]
    612e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6132:	4293      	cmp	r3, r2
    6134:	d105      	bne.n	6142 <compile_break_stmt+0x22>
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'break' outside loop");
    6136:	683b      	ldr	r3, [r7, #0]
    6138:	4a11      	ldr	r2, [pc, #68]	; (6180 <compile_break_stmt+0x60>)
    613a:	4619      	mov	r1, r3
    613c:	6878      	ldr	r0, [r7, #4]
    613e:	f7fe fe0f 	bl	4d60 <compile_syntax_error>
    }
    assert(comp->cur_except_level >= comp->break_continue_except_level);
    6142:	687b      	ldr	r3, [r7, #4]
    6144:	8b9a      	ldrh	r2, [r3, #28]
    6146:	687b      	ldr	r3, [r7, #4]
    6148:	8bdb      	ldrh	r3, [r3, #30]
    614a:	429a      	cmp	r2, r3
    614c:	d206      	bcs.n	615c <compile_break_stmt+0x3c>
    614e:	4b0d      	ldr	r3, [pc, #52]	; (6184 <compile_break_stmt+0x64>)
    6150:	4a0d      	ldr	r2, [pc, #52]	; (6188 <compile_break_stmt+0x68>)
    6152:	f44f 716e 	mov.w	r1, #952	; 0x3b8
    6156:	480d      	ldr	r0, [pc, #52]	; (618c <compile_break_stmt+0x6c>)
    6158:	f015 f908 	bl	1b36c <__assert_func>
    EMIT_ARG(unwind_jump, comp->break_label, comp->cur_except_level - comp->break_continue_except_level);
    615c:	687b      	ldr	r3, [r7, #4]
    615e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    6160:	687b      	ldr	r3, [r7, #4]
    6162:	8b1b      	ldrh	r3, [r3, #24]
    6164:	4619      	mov	r1, r3
    6166:	687b      	ldr	r3, [r7, #4]
    6168:	8b9b      	ldrh	r3, [r3, #28]
    616a:	461a      	mov	r2, r3
    616c:	687b      	ldr	r3, [r7, #4]
    616e:	8bdb      	ldrh	r3, [r3, #30]
    6170:	1ad3      	subs	r3, r2, r3
    6172:	461a      	mov	r2, r3
    6174:	f004 fb94 	bl	a8a0 <mp_emit_bc_unwind_jump>
}
    6178:	bf00      	nop
    617a:	3708      	adds	r7, #8
    617c:	46bd      	mov	sp, r7
    617e:	bd80      	pop	{r7, pc}
    6180:	0001e5dc 	.word	0x0001e5dc
    6184:	0001e5f4 	.word	0x0001e5f4
    6188:	0001ef24 	.word	0x0001ef24
    618c:	0001e304 	.word	0x0001e304

00006190 <compile_continue_stmt>:

STATIC void compile_continue_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6190:	b580      	push	{r7, lr}
    6192:	b082      	sub	sp, #8
    6194:	af00      	add	r7, sp, #0
    6196:	6078      	str	r0, [r7, #4]
    6198:	6039      	str	r1, [r7, #0]
    if (comp->continue_label == INVALID_LABEL) {
    619a:	687b      	ldr	r3, [r7, #4]
    619c:	8b5b      	ldrh	r3, [r3, #26]
    619e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    61a2:	4293      	cmp	r3, r2
    61a4:	d105      	bne.n	61b2 <compile_continue_stmt+0x22>
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'continue' outside loop");
    61a6:	683b      	ldr	r3, [r7, #0]
    61a8:	4a11      	ldr	r2, [pc, #68]	; (61f0 <compile_continue_stmt+0x60>)
    61aa:	4619      	mov	r1, r3
    61ac:	6878      	ldr	r0, [r7, #4]
    61ae:	f7fe fdd7 	bl	4d60 <compile_syntax_error>
    }
    assert(comp->cur_except_level >= comp->break_continue_except_level);
    61b2:	687b      	ldr	r3, [r7, #4]
    61b4:	8b9a      	ldrh	r2, [r3, #28]
    61b6:	687b      	ldr	r3, [r7, #4]
    61b8:	8bdb      	ldrh	r3, [r3, #30]
    61ba:	429a      	cmp	r2, r3
    61bc:	d206      	bcs.n	61cc <compile_continue_stmt+0x3c>
    61be:	4b0d      	ldr	r3, [pc, #52]	; (61f4 <compile_continue_stmt+0x64>)
    61c0:	4a0d      	ldr	r2, [pc, #52]	; (61f8 <compile_continue_stmt+0x68>)
    61c2:	f44f 7170 	mov.w	r1, #960	; 0x3c0
    61c6:	480d      	ldr	r0, [pc, #52]	; (61fc <compile_continue_stmt+0x6c>)
    61c8:	f015 f8d0 	bl	1b36c <__assert_func>
    EMIT_ARG(unwind_jump, comp->continue_label, comp->cur_except_level - comp->break_continue_except_level);
    61cc:	687b      	ldr	r3, [r7, #4]
    61ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
    61d0:	687b      	ldr	r3, [r7, #4]
    61d2:	8b5b      	ldrh	r3, [r3, #26]
    61d4:	4619      	mov	r1, r3
    61d6:	687b      	ldr	r3, [r7, #4]
    61d8:	8b9b      	ldrh	r3, [r3, #28]
    61da:	461a      	mov	r2, r3
    61dc:	687b      	ldr	r3, [r7, #4]
    61de:	8bdb      	ldrh	r3, [r3, #30]
    61e0:	1ad3      	subs	r3, r2, r3
    61e2:	461a      	mov	r2, r3
    61e4:	f004 fb5c 	bl	a8a0 <mp_emit_bc_unwind_jump>
}
    61e8:	bf00      	nop
    61ea:	3708      	adds	r7, #8
    61ec:	46bd      	mov	sp, r7
    61ee:	bd80      	pop	{r7, pc}
    61f0:	0001e630 	.word	0x0001e630
    61f4:	0001e5f4 	.word	0x0001e5f4
    61f8:	0001ef38 	.word	0x0001ef38
    61fc:	0001e304 	.word	0x0001e304

00006200 <compile_return_stmt>:

STATIC void compile_return_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6200:	b580      	push	{r7, lr}
    6202:	b082      	sub	sp, #8
    6204:	af00      	add	r7, sp, #0
    6206:	6078      	str	r0, [r7, #4]
    6208:	6039      	str	r1, [r7, #0]
    if (comp->scope_cur->kind != SCOPE_FUNCTION) {
    620a:	687b      	ldr	r3, [r7, #4]
    620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    620e:	681b      	ldr	r3, [r3, #0]
    6210:	2b07      	cmp	r3, #7
    6212:	d006      	beq.n	6222 <compile_return_stmt+0x22>
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'return' outside function");
    6214:	683b      	ldr	r3, [r7, #0]
    6216:	4a0f      	ldr	r2, [pc, #60]	; (6254 <compile_return_stmt+0x54>)
    6218:	4619      	mov	r1, r3
    621a:	6878      	ldr	r0, [r7, #4]
    621c:	f7fe fda0 	bl	4d60 <compile_syntax_error>
        return;
    6220:	e015      	b.n	624e <compile_return_stmt+0x4e>
    }
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    6222:	683b      	ldr	r3, [r7, #0]
    6224:	689b      	ldr	r3, [r3, #8]
    6226:	2b00      	cmp	r3, #0
    6228:	d106      	bne.n	6238 <compile_return_stmt+0x38>
        // no argument to 'return', so return None
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    622a:	687b      	ldr	r3, [r7, #4]
    622c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    622e:	210e      	movs	r1, #14
    6230:	4618      	mov	r0, r3
    6232:	f004 f8d7 	bl	a3e4 <mp_emit_bc_load_const_tok>
    6236:	e005      	b.n	6244 <compile_return_stmt+0x44>
        compile_node(comp, pns_test_if_expr->nodes[0]); // success value
        EMIT(return_value);
        EMIT_ARG(label_assign, l_fail);
        compile_node(comp, pns_test_if_else->nodes[1]); // failure value
    } else {
        compile_node(comp, pns->nodes[0]);
    6238:	683b      	ldr	r3, [r7, #0]
    623a:	689b      	ldr	r3, [r3, #8]
    623c:	4619      	mov	r1, r3
    623e:	6878      	ldr	r0, [r7, #4]
    6240:	f002 fc08 	bl	8a54 <compile_node>
    }
    EMIT(return_value);
    6244:	687b      	ldr	r3, [r7, #4]
    6246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6248:	4618      	mov	r0, r3
    624a:	f004 fdcf 	bl	adec <mp_emit_bc_return_value>
}
    624e:	3708      	adds	r7, #8
    6250:	46bd      	mov	sp, r7
    6252:	bd80      	pop	{r7, pc}
    6254:	0001e648 	.word	0x0001e648

00006258 <compile_yield_stmt>:

STATIC void compile_yield_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6258:	b580      	push	{r7, lr}
    625a:	b082      	sub	sp, #8
    625c:	af00      	add	r7, sp, #0
    625e:	6078      	str	r0, [r7, #4]
    6260:	6039      	str	r1, [r7, #0]
    compile_node(comp, pns->nodes[0]);
    6262:	683b      	ldr	r3, [r7, #0]
    6264:	689b      	ldr	r3, [r3, #8]
    6266:	4619      	mov	r1, r3
    6268:	6878      	ldr	r0, [r7, #4]
    626a:	f002 fbf3 	bl	8a54 <compile_node>
    EMIT(pop_top);
    626e:	687b      	ldr	r3, [r7, #4]
    6270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6272:	4618      	mov	r0, r3
    6274:	f004 fa94 	bl	a7a0 <mp_emit_bc_pop_top>
}
    6278:	bf00      	nop
    627a:	3708      	adds	r7, #8
    627c:	46bd      	mov	sp, r7
    627e:	bd80      	pop	{r7, pc}

00006280 <compile_raise_stmt>:

STATIC void compile_raise_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6280:	b580      	push	{r7, lr}
    6282:	b082      	sub	sp, #8
    6284:	af00      	add	r7, sp, #0
    6286:	6078      	str	r0, [r7, #4]
    6288:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    628a:	683b      	ldr	r3, [r7, #0]
    628c:	689b      	ldr	r3, [r3, #8]
    628e:	2b00      	cmp	r3, #0
    6290:	d106      	bne.n	62a0 <compile_raise_stmt+0x20>
        // raise
        EMIT_ARG(raise_varargs, 0);
    6292:	687b      	ldr	r3, [r7, #4]
    6294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6296:	2100      	movs	r1, #0
    6298:	4618      	mov	r0, r3
    629a:	f004 fdbb 	bl	ae14 <mp_emit_bc_raise_varargs>
    } else {
        // raise x
        compile_node(comp, pns->nodes[0]);
        EMIT_ARG(raise_varargs, 1);
    }
}
    629e:	e031      	b.n	6304 <compile_raise_stmt+0x84>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_raise_stmt_arg)) {
    62a0:	683b      	ldr	r3, [r7, #0]
    62a2:	689b      	ldr	r3, [r3, #8]
    62a4:	2b00      	cmp	r3, #0
    62a6:	d021      	beq.n	62ec <compile_raise_stmt+0x6c>
    62a8:	683b      	ldr	r3, [r7, #0]
    62aa:	689b      	ldr	r3, [r3, #8]
    62ac:	f003 0303 	and.w	r3, r3, #3
    62b0:	2b00      	cmp	r3, #0
    62b2:	d11b      	bne.n	62ec <compile_raise_stmt+0x6c>
    62b4:	683b      	ldr	r3, [r7, #0]
    62b6:	689b      	ldr	r3, [r3, #8]
    62b8:	685b      	ldr	r3, [r3, #4]
    62ba:	b2db      	uxtb	r3, r3
    62bc:	2b58      	cmp	r3, #88	; 0x58
    62be:	d115      	bne.n	62ec <compile_raise_stmt+0x6c>
        pns = (mp_parse_node_struct_t*)pns->nodes[0];
    62c0:	683b      	ldr	r3, [r7, #0]
    62c2:	689b      	ldr	r3, [r3, #8]
    62c4:	603b      	str	r3, [r7, #0]
        compile_node(comp, pns->nodes[0]);
    62c6:	683b      	ldr	r3, [r7, #0]
    62c8:	689b      	ldr	r3, [r3, #8]
    62ca:	4619      	mov	r1, r3
    62cc:	6878      	ldr	r0, [r7, #4]
    62ce:	f002 fbc1 	bl	8a54 <compile_node>
        compile_node(comp, pns->nodes[1]);
    62d2:	683b      	ldr	r3, [r7, #0]
    62d4:	68db      	ldr	r3, [r3, #12]
    62d6:	4619      	mov	r1, r3
    62d8:	6878      	ldr	r0, [r7, #4]
    62da:	f002 fbbb 	bl	8a54 <compile_node>
        EMIT_ARG(raise_varargs, 2);
    62de:	687b      	ldr	r3, [r7, #4]
    62e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    62e2:	2102      	movs	r1, #2
    62e4:	4618      	mov	r0, r3
    62e6:	f004 fd95 	bl	ae14 <mp_emit_bc_raise_varargs>
}
    62ea:	e00b      	b.n	6304 <compile_raise_stmt+0x84>
        compile_node(comp, pns->nodes[0]);
    62ec:	683b      	ldr	r3, [r7, #0]
    62ee:	689b      	ldr	r3, [r3, #8]
    62f0:	4619      	mov	r1, r3
    62f2:	6878      	ldr	r0, [r7, #4]
    62f4:	f002 fbae 	bl	8a54 <compile_node>
        EMIT_ARG(raise_varargs, 1);
    62f8:	687b      	ldr	r3, [r7, #4]
    62fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    62fc:	2101      	movs	r1, #1
    62fe:	4618      	mov	r0, r3
    6300:	f004 fd88 	bl	ae14 <mp_emit_bc_raise_varargs>
}
    6304:	bf00      	nop
    6306:	3708      	adds	r7, #8
    6308:	46bd      	mov	sp, r7
    630a:	bd80      	pop	{r7, pc}

0000630c <do_import_name>:

// q_base holds the base of the name
// eg   a -> q_base=a
//      a.b.c -> q_base=a
STATIC void do_import_name(compiler_t *comp, mp_parse_node_t pn, qstr *q_base) {
    630c:	b580      	push	{r7, lr}
    630e:	b092      	sub	sp, #72	; 0x48
    6310:	af00      	add	r7, sp, #0
    6312:	60f8      	str	r0, [r7, #12]
    6314:	60b9      	str	r1, [r7, #8]
    6316:	607a      	str	r2, [r7, #4]
    bool is_as = false;
    6318:	2300      	movs	r3, #0
    631a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_dotted_as_name)) {
    631e:	68bb      	ldr	r3, [r7, #8]
    6320:	2b00      	cmp	r3, #0
    6322:	d016      	beq.n	6352 <do_import_name+0x46>
    6324:	68bb      	ldr	r3, [r7, #8]
    6326:	f003 0303 	and.w	r3, r3, #3
    632a:	2b00      	cmp	r3, #0
    632c:	d111      	bne.n	6352 <do_import_name+0x46>
    632e:	68bb      	ldr	r3, [r7, #8]
    6330:	685b      	ldr	r3, [r3, #4]
    6332:	b2db      	uxtb	r3, r3
    6334:	2b62      	cmp	r3, #98	; 0x62
    6336:	d10c      	bne.n	6352 <do_import_name+0x46>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    6338:	68bb      	ldr	r3, [r7, #8]
    633a:	62fb      	str	r3, [r7, #44]	; 0x2c
        // a name of the form x as y; unwrap it
        *q_base = MP_PARSE_NODE_LEAF_ARG(pns->nodes[1]);
    633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    633e:	68db      	ldr	r3, [r3, #12]
    6340:	091a      	lsrs	r2, r3, #4
    6342:	687b      	ldr	r3, [r7, #4]
    6344:	601a      	str	r2, [r3, #0]
        pn = pns->nodes[0];
    6346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6348:	689b      	ldr	r3, [r3, #8]
    634a:	60bb      	str	r3, [r7, #8]
        is_as = true;
    634c:	2301      	movs	r3, #1
    634e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    6352:	68bb      	ldr	r3, [r7, #8]
    6354:	2b00      	cmp	r3, #0
    6356:	d10a      	bne.n	636e <do_import_name+0x62>
        // empty name (eg, from . import x)
        *q_base = MP_QSTR_;
    6358:	687b      	ldr	r3, [r7, #4]
    635a:	2201      	movs	r2, #1
    635c:	601a      	str	r2, [r3, #0]
        EMIT_ARG(import, MP_QSTR_, MP_EMIT_IMPORT_NAME); // import the empty string
    635e:	68fb      	ldr	r3, [r7, #12]
    6360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6362:	2200      	movs	r2, #0
    6364:	2101      	movs	r1, #1
    6366:	4618      	mov	r0, r3
    6368:	f004 f814 	bl	a394 <mp_emit_bc_import>
                    EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]), MP_EMIT_ATTR_LOAD);
                }
            }
        }
    }
}
    636c:	e0ba      	b.n	64e4 <do_import_name+0x1d8>
    } else if (MP_PARSE_NODE_IS_ID(pn)) {
    636e:	68bb      	ldr	r3, [r7, #8]
    6370:	f003 030f 	and.w	r3, r3, #15
    6374:	2b02      	cmp	r3, #2
    6376:	d114      	bne.n	63a2 <do_import_name+0x96>
        qstr q_full = MP_PARSE_NODE_LEAF_ARG(pn);
    6378:	68bb      	ldr	r3, [r7, #8]
    637a:	091b      	lsrs	r3, r3, #4
    637c:	62bb      	str	r3, [r7, #40]	; 0x28
        if (!is_as) {
    637e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    6382:	f083 0301 	eor.w	r3, r3, #1
    6386:	b2db      	uxtb	r3, r3
    6388:	2b00      	cmp	r3, #0
    638a:	d002      	beq.n	6392 <do_import_name+0x86>
            *q_base = q_full;
    638c:	687b      	ldr	r3, [r7, #4]
    638e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    6390:	601a      	str	r2, [r3, #0]
        EMIT_ARG(import, q_full, MP_EMIT_IMPORT_NAME);
    6392:	68fb      	ldr	r3, [r7, #12]
    6394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6396:	2200      	movs	r2, #0
    6398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    639a:	4618      	mov	r0, r3
    639c:	f003 fffa 	bl	a394 <mp_emit_bc_import>
}
    63a0:	e0a0      	b.n	64e4 <do_import_name+0x1d8>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_dotted_name)); // should be
    63a2:	68bb      	ldr	r3, [r7, #8]
    63a4:	2b00      	cmp	r3, #0
    63a6:	d009      	beq.n	63bc <do_import_name+0xb0>
    63a8:	68bb      	ldr	r3, [r7, #8]
    63aa:	f003 0303 	and.w	r3, r3, #3
    63ae:	2b00      	cmp	r3, #0
    63b0:	d104      	bne.n	63bc <do_import_name+0xb0>
    63b2:	68bb      	ldr	r3, [r7, #8]
    63b4:	685b      	ldr	r3, [r3, #4]
    63b6:	b2db      	uxtb	r3, r3
    63b8:	2b66      	cmp	r3, #102	; 0x66
    63ba:	d006      	beq.n	63ca <do_import_name+0xbe>
    63bc:	4b4b      	ldr	r3, [pc, #300]	; (64ec <do_import_name+0x1e0>)
    63be:	4a4c      	ldr	r2, [pc, #304]	; (64f0 <do_import_name+0x1e4>)
    63c0:	f240 410c 	movw	r1, #1036	; 0x40c
    63c4:	484b      	ldr	r0, [pc, #300]	; (64f4 <do_import_name+0x1e8>)
    63c6:	f014 ffd1 	bl	1b36c <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    63ca:	68bb      	ldr	r3, [r7, #8]
    63cc:	627b      	str	r3, [r7, #36]	; 0x24
            if (!is_as) {
    63ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    63d2:	f083 0301 	eor.w	r3, r3, #1
    63d6:	b2db      	uxtb	r3, r3
    63d8:	2b00      	cmp	r3, #0
    63da:	d004      	beq.n	63e6 <do_import_name+0xda>
                *q_base = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    63dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    63de:	689b      	ldr	r3, [r3, #8]
    63e0:	091a      	lsrs	r2, r3, #4
    63e2:	687b      	ldr	r3, [r7, #4]
    63e4:	601a      	str	r2, [r3, #0]
            int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    63e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    63e8:	685b      	ldr	r3, [r3, #4]
    63ea:	0a1b      	lsrs	r3, r3, #8
    63ec:	623b      	str	r3, [r7, #32]
            int len = n - 1;
    63ee:	6a3b      	ldr	r3, [r7, #32]
    63f0:	3b01      	subs	r3, #1
    63f2:	643b      	str	r3, [r7, #64]	; 0x40
            for (int i = 0; i < n; i++) {
    63f4:	2300      	movs	r3, #0
    63f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    63f8:	e00f      	b.n	641a <do_import_name+0x10e>
                len += qstr_len(MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]));
    63fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    63fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    63fe:	3202      	adds	r2, #2
    6400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6404:	091b      	lsrs	r3, r3, #4
    6406:	4618      	mov	r0, r3
    6408:	f7fa fee4 	bl	11d4 <qstr_len>
    640c:	4602      	mov	r2, r0
    640e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6410:	4413      	add	r3, r2
    6412:	643b      	str	r3, [r7, #64]	; 0x40
            for (int i = 0; i < n; i++) {
    6414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6416:	3301      	adds	r3, #1
    6418:	63fb      	str	r3, [r7, #60]	; 0x3c
    641a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    641c:	6a3b      	ldr	r3, [r7, #32]
    641e:	429a      	cmp	r2, r3
    6420:	dbeb      	blt.n	63fa <do_import_name+0xee>
            char *q_ptr = mp_local_alloc(len);
    6422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6424:	3307      	adds	r3, #7
    6426:	3307      	adds	r3, #7
    6428:	08db      	lsrs	r3, r3, #3
    642a:	00db      	lsls	r3, r3, #3
    642c:	ebad 0d03 	sub.w	sp, sp, r3
    6430:	466b      	mov	r3, sp
    6432:	3307      	adds	r3, #7
    6434:	08db      	lsrs	r3, r3, #3
    6436:	00db      	lsls	r3, r3, #3
    6438:	61fb      	str	r3, [r7, #28]
            char *str_dest = q_ptr;
    643a:	69fb      	ldr	r3, [r7, #28]
    643c:	63bb      	str	r3, [r7, #56]	; 0x38
            for (int i = 0; i < n; i++) {
    643e:	2300      	movs	r3, #0
    6440:	637b      	str	r3, [r7, #52]	; 0x34
    6442:	e021      	b.n	6488 <do_import_name+0x17c>
                if (i > 0) {
    6444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6446:	2b00      	cmp	r3, #0
    6448:	dd04      	ble.n	6454 <do_import_name+0x148>
                    *str_dest++ = '.';
    644a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    644c:	1c5a      	adds	r2, r3, #1
    644e:	63ba      	str	r2, [r7, #56]	; 0x38
    6450:	222e      	movs	r2, #46	; 0x2e
    6452:	701a      	strb	r2, [r3, #0]
                const byte *str_src = qstr_data(MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]), &str_src_len);
    6454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6456:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    6458:	3202      	adds	r2, #2
    645a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    645e:	091b      	lsrs	r3, r3, #4
    6460:	f107 0210 	add.w	r2, r7, #16
    6464:	4611      	mov	r1, r2
    6466:	4618      	mov	r0, r3
    6468:	f7fa fed2 	bl	1210 <qstr_data>
    646c:	61b8      	str	r0, [r7, #24]
                memcpy(str_dest, str_src, str_src_len);
    646e:	693b      	ldr	r3, [r7, #16]
    6470:	461a      	mov	r2, r3
    6472:	69b9      	ldr	r1, [r7, #24]
    6474:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    6476:	f015 fd25 	bl	1bec4 <memcpy>
                str_dest += str_src_len;
    647a:	693b      	ldr	r3, [r7, #16]
    647c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    647e:	4413      	add	r3, r2
    6480:	63bb      	str	r3, [r7, #56]	; 0x38
            for (int i = 0; i < n; i++) {
    6482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6484:	3301      	adds	r3, #1
    6486:	637b      	str	r3, [r7, #52]	; 0x34
    6488:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    648a:	6a3b      	ldr	r3, [r7, #32]
    648c:	429a      	cmp	r2, r3
    648e:	dbd9      	blt.n	6444 <do_import_name+0x138>
            qstr q_full = qstr_from_strn(q_ptr, len);
    6490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6492:	4619      	mov	r1, r3
    6494:	69f8      	ldr	r0, [r7, #28]
    6496:	f7fa fdd1 	bl	103c <qstr_from_strn>
    649a:	6178      	str	r0, [r7, #20]
            mp_local_free(q_ptr);
    649c:	69f8      	ldr	r0, [r7, #28]
    649e:	f7fe fc39 	bl	4d14 <mp_local_free>
            EMIT_ARG(import, q_full, MP_EMIT_IMPORT_NAME);
    64a2:	68fb      	ldr	r3, [r7, #12]
    64a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    64a6:	2200      	movs	r2, #0
    64a8:	6979      	ldr	r1, [r7, #20]
    64aa:	4618      	mov	r0, r3
    64ac:	f003 ff72 	bl	a394 <mp_emit_bc_import>
            if (is_as) {
    64b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    64b4:	2b00      	cmp	r3, #0
    64b6:	d015      	beq.n	64e4 <do_import_name+0x1d8>
                for (int i = 1; i < n; i++) {
    64b8:	2301      	movs	r3, #1
    64ba:	633b      	str	r3, [r7, #48]	; 0x30
    64bc:	e00e      	b.n	64dc <do_import_name+0x1d0>
                    EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]), MP_EMIT_ATTR_LOAD);
    64be:	68fb      	ldr	r3, [r7, #12]
    64c0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    64c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    64c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    64c6:	3202      	adds	r2, #2
    64c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    64cc:	091b      	lsrs	r3, r3, #4
    64ce:	2200      	movs	r2, #0
    64d0:	4619      	mov	r1, r3
    64d2:	f004 f8af 	bl	a634 <mp_emit_bc_attr>
                for (int i = 1; i < n; i++) {
    64d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    64d8:	3301      	adds	r3, #1
    64da:	633b      	str	r3, [r7, #48]	; 0x30
    64dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    64de:	6a3b      	ldr	r3, [r7, #32]
    64e0:	429a      	cmp	r2, r3
    64e2:	dbec      	blt.n	64be <do_import_name+0x1b2>
}
    64e4:	bf00      	nop
    64e6:	3748      	adds	r7, #72	; 0x48
    64e8:	46bd      	mov	sp, r7
    64ea:	bd80      	pop	{r7, pc}
    64ec:	0001e664 	.word	0x0001e664
    64f0:	0001ef50 	.word	0x0001ef50
    64f4:	0001e304 	.word	0x0001e304

000064f8 <compile_dotted_as_name>:

STATIC void compile_dotted_as_name(compiler_t *comp, mp_parse_node_t pn) {
    64f8:	b580      	push	{r7, lr}
    64fa:	b084      	sub	sp, #16
    64fc:	af00      	add	r7, sp, #0
    64fe:	6078      	str	r0, [r7, #4]
    6500:	6039      	str	r1, [r7, #0]
    EMIT_ARG(load_const_small_int, 0); // level 0 import
    6502:	687b      	ldr	r3, [r7, #4]
    6504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6506:	2100      	movs	r1, #0
    6508:	4618      	mov	r0, r3
    650a:	f003 ffa7 	bl	a45c <mp_emit_bc_load_const_small_int>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE); // not importing from anything
    650e:	687b      	ldr	r3, [r7, #4]
    6510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6512:	210e      	movs	r1, #14
    6514:	4618      	mov	r0, r3
    6516:	f003 ff65 	bl	a3e4 <mp_emit_bc_load_const_tok>
    qstr q_base;
    do_import_name(comp, pn, &q_base);
    651a:	f107 030c 	add.w	r3, r7, #12
    651e:	461a      	mov	r2, r3
    6520:	6839      	ldr	r1, [r7, #0]
    6522:	6878      	ldr	r0, [r7, #4]
    6524:	f7ff fef2 	bl	630c <do_import_name>
    compile_store_id(comp, q_base);
    6528:	68fb      	ldr	r3, [r7, #12]
    652a:	4619      	mov	r1, r3
    652c:	6878      	ldr	r0, [r7, #4]
    652e:	f7fe fd37 	bl	4fa0 <compile_store_id>
}
    6532:	bf00      	nop
    6534:	3710      	adds	r7, #16
    6536:	46bd      	mov	sp, r7
    6538:	bd80      	pop	{r7, pc}
    653a:	bf00      	nop

0000653c <compile_import_name>:

STATIC void compile_import_name(compiler_t *comp, mp_parse_node_struct_t *pns) {
    653c:	b580      	push	{r7, lr}
    653e:	b082      	sub	sp, #8
    6540:	af00      	add	r7, sp, #0
    6542:	6078      	str	r0, [r7, #4]
    6544:	6039      	str	r1, [r7, #0]
    apply_to_single_or_list(comp, pns->nodes[0], PN_dotted_as_names, compile_dotted_as_name);
    6546:	683b      	ldr	r3, [r7, #0]
    6548:	6899      	ldr	r1, [r3, #8]
    654a:	4b04      	ldr	r3, [pc, #16]	; (655c <compile_import_name+0x20>)
    654c:	2265      	movs	r2, #101	; 0x65
    654e:	6878      	ldr	r0, [r7, #4]
    6550:	f7fe fc9e 	bl	4e90 <apply_to_single_or_list>
}
    6554:	bf00      	nop
    6556:	3708      	adds	r7, #8
    6558:	46bd      	mov	sp, r7
    655a:	bd80      	pop	{r7, pc}
    655c:	000064f9 	.word	0x000064f9

00006560 <compile_import_from>:

STATIC void compile_import_from(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6560:	b580      	push	{r7, lr}
    6562:	b094      	sub	sp, #80	; 0x50
    6564:	af00      	add	r7, sp, #0
    6566:	6078      	str	r0, [r7, #4]
    6568:	6039      	str	r1, [r7, #0]
    mp_parse_node_t pn_import_source = pns->nodes[0];
    656a:	683b      	ldr	r3, [r7, #0]
    656c:	689b      	ldr	r3, [r3, #8]
    656e:	64fb      	str	r3, [r7, #76]	; 0x4c

    // extract the preceding .'s (if any) for a relative import, to compute the import level
    uint import_level = 0;
    6570:	2300      	movs	r3, #0
    6572:	64bb      	str	r3, [r7, #72]	; 0x48
    do {
        mp_parse_node_t pn_rel;
        if (MP_PARSE_NODE_IS_TOKEN(pn_import_source) || MP_PARSE_NODE_IS_STRUCT_KIND(pn_import_source, PN_one_or_more_period_or_ellipsis)) {
    6574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6576:	f003 030f 	and.w	r3, r3, #15
    657a:	2b0e      	cmp	r3, #14
    657c:	d00c      	beq.n	6598 <compile_import_from+0x38>
    657e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6580:	2b00      	cmp	r3, #0
    6582:	d00e      	beq.n	65a2 <compile_import_from+0x42>
    6584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6586:	f003 0303 	and.w	r3, r3, #3
    658a:	2b00      	cmp	r3, #0
    658c:	d109      	bne.n	65a2 <compile_import_from+0x42>
    658e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6590:	685b      	ldr	r3, [r3, #4]
    6592:	b2db      	uxtb	r3, r3
    6594:	2b5f      	cmp	r3, #95	; 0x5f
    6596:	d104      	bne.n	65a2 <compile_import_from+0x42>
            // This covers relative imports with dots only like "from .. import"
            pn_rel = pn_import_source;
    6598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    659a:	61fb      	str	r3, [r7, #28]
            pn_import_source = MP_PARSE_NODE_NULL;
    659c:	2300      	movs	r3, #0
    659e:	64fb      	str	r3, [r7, #76]	; 0x4c
    65a0:	e01e      	b.n	65e0 <compile_import_from+0x80>
        } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pn_import_source, PN_import_from_2b)) {
    65a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    65a4:	2b00      	cmp	r3, #0
    65a6:	d03e      	beq.n	6626 <compile_import_from+0xc6>
    65a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    65aa:	f003 0303 	and.w	r3, r3, #3
    65ae:	2b00      	cmp	r3, #0
    65b0:	d139      	bne.n	6626 <compile_import_from+0xc6>
    65b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    65b4:	685b      	ldr	r3, [r3, #4]
    65b6:	b2db      	uxtb	r3, r3
    65b8:	2b5c      	cmp	r3, #92	; 0x5c
    65ba:	d134      	bne.n	6626 <compile_import_from+0xc6>
            // This covers relative imports starting with dot(s) like "from .foo import"
            mp_parse_node_struct_t *pns_2b = (mp_parse_node_struct_t*)pn_import_source;
    65bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    65be:	63bb      	str	r3, [r7, #56]	; 0x38
            pn_rel = pns_2b->nodes[0];
    65c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    65c2:	689b      	ldr	r3, [r3, #8]
    65c4:	61fb      	str	r3, [r7, #28]
            pn_import_source = pns_2b->nodes[1];
    65c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    65c8:	68db      	ldr	r3, [r3, #12]
    65ca:	64fb      	str	r3, [r7, #76]	; 0x4c
            assert(!MP_PARSE_NODE_IS_NULL(pn_import_source)); // should not be
    65cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    65ce:	2b00      	cmp	r3, #0
    65d0:	d106      	bne.n	65e0 <compile_import_from+0x80>
    65d2:	4b7f      	ldr	r3, [pc, #508]	; (67d0 <compile_import_from+0x270>)
    65d4:	4a7f      	ldr	r2, [pc, #508]	; (67d4 <compile_import_from+0x274>)
    65d6:	f240 414b 	movw	r1, #1099	; 0x44b
    65da:	487f      	ldr	r0, [pc, #508]	; (67d8 <compile_import_from+0x278>)
    65dc:	f014 fec6 	bl	1b36c <__assert_func>
            break;
        }

        // get the list of . and/or ...'s
        mp_parse_node_t *nodes;
        int n = mp_parse_node_extract_list(&pn_rel, PN_one_or_more_period_or_ellipsis, &nodes);
    65e0:	f107 0218 	add.w	r2, r7, #24
    65e4:	f107 031c 	add.w	r3, r7, #28
    65e8:	215f      	movs	r1, #95	; 0x5f
    65ea:	4618      	mov	r0, r3
    65ec:	f7fd fabe 	bl	3b6c <mp_parse_node_extract_list>
    65f0:	6378      	str	r0, [r7, #52]	; 0x34

        // count the total number of .'s
        for (int i = 0; i < n; i++) {
    65f2:	2300      	movs	r3, #0
    65f4:	647b      	str	r3, [r7, #68]	; 0x44
    65f6:	e012      	b.n	661e <compile_import_from+0xbe>
            if (MP_PARSE_NODE_IS_TOKEN_KIND(nodes[i], MP_TOKEN_DEL_PERIOD)) {
    65f8:	69ba      	ldr	r2, [r7, #24]
    65fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    65fc:	009b      	lsls	r3, r3, #2
    65fe:	4413      	add	r3, r2
    6600:	681b      	ldr	r3, [r3, #0]
    6602:	f240 42ae 	movw	r2, #1198	; 0x4ae
    6606:	4293      	cmp	r3, r2
    6608:	d103      	bne.n	6612 <compile_import_from+0xb2>
                import_level++;
    660a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    660c:	3301      	adds	r3, #1
    660e:	64bb      	str	r3, [r7, #72]	; 0x48
    6610:	e002      	b.n	6618 <compile_import_from+0xb8>
            } else {
                // should be an MP_TOKEN_ELLIPSIS
                import_level += 3;
    6612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    6614:	3303      	adds	r3, #3
    6616:	64bb      	str	r3, [r7, #72]	; 0x48
        for (int i = 0; i < n; i++) {
    6618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    661a:	3301      	adds	r3, #1
    661c:	647b      	str	r3, [r7, #68]	; 0x44
    661e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6622:	429a      	cmp	r2, r3
    6624:	dbe8      	blt.n	65f8 <compile_import_from+0x98>
            }
        }
    } while (0);

    if (MP_PARSE_NODE_IS_TOKEN_KIND(pns->nodes[1], MP_TOKEN_OP_STAR)) {
    6626:	683b      	ldr	r3, [r7, #0]
    6628:	68db      	ldr	r3, [r3, #12]
    662a:	f240 321e 	movw	r2, #798	; 0x31e
    662e:	4293      	cmp	r3, r2
    6630:	d122      	bne.n	6678 <compile_import_from+0x118>
        EMIT_ARG(load_const_small_int, import_level);
    6632:	687b      	ldr	r3, [r7, #4]
    6634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6636:	6cba      	ldr	r2, [r7, #72]	; 0x48
    6638:	4611      	mov	r1, r2
    663a:	4618      	mov	r0, r3
    663c:	f003 ff0e 	bl	a45c <mp_emit_bc_load_const_small_int>

        // build the "fromlist" tuple
        EMIT_ARG(load_const_str, MP_QSTR__star_);
    6640:	687b      	ldr	r3, [r7, #4]
    6642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6644:	2126      	movs	r1, #38	; 0x26
    6646:	4618      	mov	r0, r3
    6648:	f003 ff2a 	bl	a4a0 <mp_emit_bc_load_const_str>
        EMIT_ARG(build, 1, MP_EMIT_BUILD_TUPLE);
    664c:	687b      	ldr	r3, [r7, #4]
    664e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6650:	2200      	movs	r2, #0
    6652:	2101      	movs	r1, #1
    6654:	4618      	mov	r0, r3
    6656:	f004 fa65 	bl	ab24 <mp_emit_bc_build>

        // do the import
        qstr dummy_q;
        do_import_name(comp, pn_import_source, &dummy_q);
    665a:	f107 0314 	add.w	r3, r7, #20
    665e:	461a      	mov	r2, r3
    6660:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    6662:	6878      	ldr	r0, [r7, #4]
    6664:	f7ff fe52 	bl	630c <do_import_name>
        EMIT_ARG(import, MP_QSTR_NULL, MP_EMIT_IMPORT_STAR);
    6668:	687b      	ldr	r3, [r7, #4]
    666a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    666c:	2202      	movs	r2, #2
    666e:	2100      	movs	r1, #0
    6670:	4618      	mov	r0, r3
    6672:	f003 fe8f 	bl	a394 <mp_emit_bc_import>
                compile_store_id(comp, MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]));
            }
        }
        EMIT(pop_top);
    }
}
    6676:	e0a7      	b.n	67c8 <compile_import_from+0x268>
        EMIT_ARG(load_const_small_int, import_level);
    6678:	687b      	ldr	r3, [r7, #4]
    667a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    667c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    667e:	4611      	mov	r1, r2
    6680:	4618      	mov	r0, r3
    6682:	f003 feeb 	bl	a45c <mp_emit_bc_load_const_small_int>
        int n = mp_parse_node_extract_list(&pns->nodes[1], PN_import_as_names, &pn_nodes);
    6686:	683b      	ldr	r3, [r7, #0]
    6688:	330c      	adds	r3, #12
    668a:	f107 0210 	add.w	r2, r7, #16
    668e:	2164      	movs	r1, #100	; 0x64
    6690:	4618      	mov	r0, r3
    6692:	f7fd fa6b 	bl	3b6c <mp_parse_node_extract_list>
    6696:	6338      	str	r0, [r7, #48]	; 0x30
        for (int i = 0; i < n; i++) {
    6698:	2300      	movs	r3, #0
    669a:	643b      	str	r3, [r7, #64]	; 0x40
    669c:	e032      	b.n	6704 <compile_import_from+0x1a4>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_nodes[i], PN_import_as_name));
    669e:	693a      	ldr	r2, [r7, #16]
    66a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    66a2:	009b      	lsls	r3, r3, #2
    66a4:	4413      	add	r3, r2
    66a6:	681b      	ldr	r3, [r3, #0]
    66a8:	2b00      	cmp	r3, #0
    66aa:	d011      	beq.n	66d0 <compile_import_from+0x170>
    66ac:	693a      	ldr	r2, [r7, #16]
    66ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    66b0:	009b      	lsls	r3, r3, #2
    66b2:	4413      	add	r3, r2
    66b4:	681b      	ldr	r3, [r3, #0]
    66b6:	f003 0303 	and.w	r3, r3, #3
    66ba:	2b00      	cmp	r3, #0
    66bc:	d108      	bne.n	66d0 <compile_import_from+0x170>
    66be:	693a      	ldr	r2, [r7, #16]
    66c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    66c2:	009b      	lsls	r3, r3, #2
    66c4:	4413      	add	r3, r2
    66c6:	681b      	ldr	r3, [r3, #0]
    66c8:	685b      	ldr	r3, [r3, #4]
    66ca:	b2db      	uxtb	r3, r3
    66cc:	2b61      	cmp	r3, #97	; 0x61
    66ce:	d006      	beq.n	66de <compile_import_from+0x17e>
    66d0:	4b42      	ldr	r3, [pc, #264]	; (67dc <compile_import_from+0x27c>)
    66d2:	4a40      	ldr	r2, [pc, #256]	; (67d4 <compile_import_from+0x274>)
    66d4:	f240 4173 	movw	r1, #1139	; 0x473
    66d8:	483f      	ldr	r0, [pc, #252]	; (67d8 <compile_import_from+0x278>)
    66da:	f014 fe47 	bl	1b36c <__assert_func>
            mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pn_nodes[i];
    66de:	693a      	ldr	r2, [r7, #16]
    66e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    66e2:	009b      	lsls	r3, r3, #2
    66e4:	4413      	add	r3, r2
    66e6:	681b      	ldr	r3, [r3, #0]
    66e8:	62fb      	str	r3, [r7, #44]	; 0x2c
            qstr id2 = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[0]); // should be id
    66ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    66ec:	689b      	ldr	r3, [r3, #8]
    66ee:	091b      	lsrs	r3, r3, #4
    66f0:	62bb      	str	r3, [r7, #40]	; 0x28
            EMIT_ARG(load_const_str, id2);
    66f2:	687b      	ldr	r3, [r7, #4]
    66f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    66f8:	4618      	mov	r0, r3
    66fa:	f003 fed1 	bl	a4a0 <mp_emit_bc_load_const_str>
        for (int i = 0; i < n; i++) {
    66fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6700:	3301      	adds	r3, #1
    6702:	643b      	str	r3, [r7, #64]	; 0x40
    6704:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    6706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6708:	429a      	cmp	r2, r3
    670a:	dbc8      	blt.n	669e <compile_import_from+0x13e>
        EMIT_ARG(build, n, MP_EMIT_BUILD_TUPLE);
    670c:	687b      	ldr	r3, [r7, #4]
    670e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6710:	6b39      	ldr	r1, [r7, #48]	; 0x30
    6712:	2200      	movs	r2, #0
    6714:	4618      	mov	r0, r3
    6716:	f004 fa05 	bl	ab24 <mp_emit_bc_build>
        do_import_name(comp, pn_import_source, &dummy_q);
    671a:	f107 030c 	add.w	r3, r7, #12
    671e:	461a      	mov	r2, r3
    6720:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    6722:	6878      	ldr	r0, [r7, #4]
    6724:	f7ff fdf2 	bl	630c <do_import_name>
        for (int i = 0; i < n; i++) {
    6728:	2300      	movs	r3, #0
    672a:	63fb      	str	r3, [r7, #60]	; 0x3c
    672c:	e043      	b.n	67b6 <compile_import_from+0x256>
            assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_nodes[i], PN_import_as_name));
    672e:	693a      	ldr	r2, [r7, #16]
    6730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6732:	009b      	lsls	r3, r3, #2
    6734:	4413      	add	r3, r2
    6736:	681b      	ldr	r3, [r3, #0]
    6738:	2b00      	cmp	r3, #0
    673a:	d011      	beq.n	6760 <compile_import_from+0x200>
    673c:	693a      	ldr	r2, [r7, #16]
    673e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6740:	009b      	lsls	r3, r3, #2
    6742:	4413      	add	r3, r2
    6744:	681b      	ldr	r3, [r3, #0]
    6746:	f003 0303 	and.w	r3, r3, #3
    674a:	2b00      	cmp	r3, #0
    674c:	d108      	bne.n	6760 <compile_import_from+0x200>
    674e:	693a      	ldr	r2, [r7, #16]
    6750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6752:	009b      	lsls	r3, r3, #2
    6754:	4413      	add	r3, r2
    6756:	681b      	ldr	r3, [r3, #0]
    6758:	685b      	ldr	r3, [r3, #4]
    675a:	b2db      	uxtb	r3, r3
    675c:	2b61      	cmp	r3, #97	; 0x61
    675e:	d006      	beq.n	676e <compile_import_from+0x20e>
    6760:	4b1e      	ldr	r3, [pc, #120]	; (67dc <compile_import_from+0x27c>)
    6762:	4a1c      	ldr	r2, [pc, #112]	; (67d4 <compile_import_from+0x274>)
    6764:	f240 417e 	movw	r1, #1150	; 0x47e
    6768:	481b      	ldr	r0, [pc, #108]	; (67d8 <compile_import_from+0x278>)
    676a:	f014 fdff 	bl	1b36c <__assert_func>
            mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pn_nodes[i];
    676e:	693a      	ldr	r2, [r7, #16]
    6770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6772:	009b      	lsls	r3, r3, #2
    6774:	4413      	add	r3, r2
    6776:	681b      	ldr	r3, [r3, #0]
    6778:	627b      	str	r3, [r7, #36]	; 0x24
            qstr id2 = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[0]); // should be id
    677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    677c:	689b      	ldr	r3, [r3, #8]
    677e:	091b      	lsrs	r3, r3, #4
    6780:	623b      	str	r3, [r7, #32]
            EMIT_ARG(import, id2, MP_EMIT_IMPORT_FROM);
    6782:	687b      	ldr	r3, [r7, #4]
    6784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6786:	2201      	movs	r2, #1
    6788:	6a39      	ldr	r1, [r7, #32]
    678a:	4618      	mov	r0, r3
    678c:	f003 fe02 	bl	a394 <mp_emit_bc_import>
            if (MP_PARSE_NODE_IS_NULL(pns3->nodes[1])) {
    6790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6792:	68db      	ldr	r3, [r3, #12]
    6794:	2b00      	cmp	r3, #0
    6796:	d104      	bne.n	67a2 <compile_import_from+0x242>
                compile_store_id(comp, id2);
    6798:	6a39      	ldr	r1, [r7, #32]
    679a:	6878      	ldr	r0, [r7, #4]
    679c:	f7fe fc00 	bl	4fa0 <compile_store_id>
    67a0:	e006      	b.n	67b0 <compile_import_from+0x250>
                compile_store_id(comp, MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]));
    67a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    67a4:	68db      	ldr	r3, [r3, #12]
    67a6:	091b      	lsrs	r3, r3, #4
    67a8:	4619      	mov	r1, r3
    67aa:	6878      	ldr	r0, [r7, #4]
    67ac:	f7fe fbf8 	bl	4fa0 <compile_store_id>
        for (int i = 0; i < n; i++) {
    67b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    67b2:	3301      	adds	r3, #1
    67b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    67b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    67b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    67ba:	429a      	cmp	r2, r3
    67bc:	dbb7      	blt.n	672e <compile_import_from+0x1ce>
        EMIT(pop_top);
    67be:	687b      	ldr	r3, [r7, #4]
    67c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67c2:	4618      	mov	r0, r3
    67c4:	f003 ffec 	bl	a7a0 <mp_emit_bc_pop_top>
}
    67c8:	bf00      	nop
    67ca:	3750      	adds	r7, #80	; 0x50
    67cc:	46bd      	mov	sp, r7
    67ce:	bd80      	pop	{r7, pc}
    67d0:	0001e698 	.word	0x0001e698
    67d4:	0001ef60 	.word	0x0001ef60
    67d8:	0001e304 	.word	0x0001e304
    67dc:	0001e6c4 	.word	0x0001e6c4

000067e0 <compile_declare_global>:

STATIC void compile_declare_global(compiler_t *comp, mp_parse_node_t pn, qstr qst) {
    67e0:	b580      	push	{r7, lr}
    67e2:	b086      	sub	sp, #24
    67e4:	af00      	add	r7, sp, #0
    67e6:	60f8      	str	r0, [r7, #12]
    67e8:	60b9      	str	r1, [r7, #8]
    67ea:	607a      	str	r2, [r7, #4]
    bool added;
    id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, qst, &added);
    67ec:	68fb      	ldr	r3, [r7, #12]
    67ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    67f0:	f107 0213 	add.w	r2, r7, #19
    67f4:	6879      	ldr	r1, [r7, #4]
    67f6:	4618      	mov	r0, r3
    67f8:	f7fe f968 	bl	4acc <scope_find_or_add_id>
    67fc:	6178      	str	r0, [r7, #20]
    if (!added && id_info->kind != ID_INFO_KIND_GLOBAL_EXPLICIT) {
    67fe:	7cfb      	ldrb	r3, [r7, #19]
    6800:	f083 0301 	eor.w	r3, r3, #1
    6804:	b2db      	uxtb	r3, r3
    6806:	2b00      	cmp	r3, #0
    6808:	d009      	beq.n	681e <compile_declare_global+0x3e>
    680a:	697b      	ldr	r3, [r7, #20]
    680c:	781b      	ldrb	r3, [r3, #0]
    680e:	2b01      	cmp	r3, #1
    6810:	d005      	beq.n	681e <compile_declare_global+0x3e>
        compile_syntax_error(comp, pn, "identifier redefined as global");
    6812:	4a0c      	ldr	r2, [pc, #48]	; (6844 <compile_declare_global+0x64>)
    6814:	68b9      	ldr	r1, [r7, #8]
    6816:	68f8      	ldr	r0, [r7, #12]
    6818:	f7fe faa2 	bl	4d60 <compile_syntax_error>
    681c:	e00f      	b.n	683e <compile_declare_global+0x5e>
        return;
    }
    id_info->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    681e:	697b      	ldr	r3, [r7, #20]
    6820:	2201      	movs	r2, #1
    6822:	701a      	strb	r2, [r3, #0]

    // if the id exists in the global scope, set its kind to EXPLICIT_GLOBAL
    id_info = scope_find_global(comp->scope_cur, qst);
    6824:	68fb      	ldr	r3, [r7, #12]
    6826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6828:	6879      	ldr	r1, [r7, #4]
    682a:	4618      	mov	r0, r3
    682c:	f7fe f9c2 	bl	4bb4 <scope_find_global>
    6830:	6178      	str	r0, [r7, #20]
    if (id_info != NULL) {
    6832:	697b      	ldr	r3, [r7, #20]
    6834:	2b00      	cmp	r3, #0
    6836:	d002      	beq.n	683e <compile_declare_global+0x5e>
        id_info->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    6838:	697b      	ldr	r3, [r7, #20]
    683a:	2201      	movs	r2, #1
    683c:	701a      	strb	r2, [r3, #0]
    }
}
    683e:	3718      	adds	r7, #24
    6840:	46bd      	mov	sp, r7
    6842:	bd80      	pop	{r7, pc}
    6844:	0001e704 	.word	0x0001e704

00006848 <compile_global_stmt>:

STATIC void compile_global_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6848:	b580      	push	{r7, lr}
    684a:	b086      	sub	sp, #24
    684c:	af00      	add	r7, sp, #0
    684e:	6078      	str	r0, [r7, #4]
    6850:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    6852:	687b      	ldr	r3, [r7, #4]
    6854:	795b      	ldrb	r3, [r3, #5]
    6856:	2b01      	cmp	r3, #1
    6858:	d11d      	bne.n	6896 <compile_global_stmt+0x4e>
        mp_parse_node_t *nodes;
        int n = mp_parse_node_extract_list(&pns->nodes[0], PN_name_list, &nodes);
    685a:	683b      	ldr	r3, [r7, #0]
    685c:	3308      	adds	r3, #8
    685e:	f107 020c 	add.w	r2, r7, #12
    6862:	2167      	movs	r1, #103	; 0x67
    6864:	4618      	mov	r0, r3
    6866:	f7fd f981 	bl	3b6c <mp_parse_node_extract_list>
    686a:	6138      	str	r0, [r7, #16]
        for (int i = 0; i < n; i++) {
    686c:	2300      	movs	r3, #0
    686e:	617b      	str	r3, [r7, #20]
    6870:	e00d      	b.n	688e <compile_global_stmt+0x46>
            compile_declare_global(comp, (mp_parse_node_t)pns, MP_PARSE_NODE_LEAF_ARG(nodes[i]));
    6872:	6839      	ldr	r1, [r7, #0]
    6874:	68fa      	ldr	r2, [r7, #12]
    6876:	697b      	ldr	r3, [r7, #20]
    6878:	009b      	lsls	r3, r3, #2
    687a:	4413      	add	r3, r2
    687c:	681b      	ldr	r3, [r3, #0]
    687e:	091b      	lsrs	r3, r3, #4
    6880:	461a      	mov	r2, r3
    6882:	6878      	ldr	r0, [r7, #4]
    6884:	f7ff ffac 	bl	67e0 <compile_declare_global>
        for (int i = 0; i < n; i++) {
    6888:	697b      	ldr	r3, [r7, #20]
    688a:	3301      	adds	r3, #1
    688c:	617b      	str	r3, [r7, #20]
    688e:	697a      	ldr	r2, [r7, #20]
    6890:	693b      	ldr	r3, [r7, #16]
    6892:	429a      	cmp	r2, r3
    6894:	dbed      	blt.n	6872 <compile_global_stmt+0x2a>
        }
    }
}
    6896:	bf00      	nop
    6898:	3718      	adds	r7, #24
    689a:	46bd      	mov	sp, r7
    689c:	bd80      	pop	{r7, pc}
    689e:	bf00      	nop

000068a0 <compile_declare_nonlocal>:

STATIC void compile_declare_nonlocal(compiler_t *comp, mp_parse_node_t pn, qstr qst) {
    68a0:	b580      	push	{r7, lr}
    68a2:	b086      	sub	sp, #24
    68a4:	af00      	add	r7, sp, #0
    68a6:	60f8      	str	r0, [r7, #12]
    68a8:	60b9      	str	r1, [r7, #8]
    68aa:	607a      	str	r2, [r7, #4]
    bool added;
    id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, qst, &added);
    68ac:	68fb      	ldr	r3, [r7, #12]
    68ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    68b0:	f107 0213 	add.w	r2, r7, #19
    68b4:	6879      	ldr	r1, [r7, #4]
    68b6:	4618      	mov	r0, r3
    68b8:	f7fe f908 	bl	4acc <scope_find_or_add_id>
    68bc:	6178      	str	r0, [r7, #20]
    if (added) {
    68be:	7cfb      	ldrb	r3, [r7, #19]
    68c0:	2b00      	cmp	r3, #0
    68c2:	d010      	beq.n	68e6 <compile_declare_nonlocal+0x46>
        scope_find_local_and_close_over(comp->scope_cur, id_info, qst);
    68c4:	68fb      	ldr	r3, [r7, #12]
    68c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    68c8:	687a      	ldr	r2, [r7, #4]
    68ca:	6979      	ldr	r1, [r7, #20]
    68cc:	4618      	mov	r0, r3
    68ce:	f7fe f9d9 	bl	4c84 <scope_find_local_and_close_over>
        if (id_info->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    68d2:	697b      	ldr	r3, [r7, #20]
    68d4:	781b      	ldrb	r3, [r3, #0]
    68d6:	2b00      	cmp	r3, #0
    68d8:	d10e      	bne.n	68f8 <compile_declare_nonlocal+0x58>
            compile_syntax_error(comp, pn, "no binding for nonlocal found");
    68da:	4a09      	ldr	r2, [pc, #36]	; (6900 <compile_declare_nonlocal+0x60>)
    68dc:	68b9      	ldr	r1, [r7, #8]
    68de:	68f8      	ldr	r0, [r7, #12]
    68e0:	f7fe fa3e 	bl	4d60 <compile_syntax_error>
        }
    } else if (id_info->kind != ID_INFO_KIND_FREE) {
        compile_syntax_error(comp, pn, "identifier redefined as nonlocal");
    }
}
    68e4:	e008      	b.n	68f8 <compile_declare_nonlocal+0x58>
    } else if (id_info->kind != ID_INFO_KIND_FREE) {
    68e6:	697b      	ldr	r3, [r7, #20]
    68e8:	781b      	ldrb	r3, [r3, #0]
    68ea:	2b04      	cmp	r3, #4
    68ec:	d004      	beq.n	68f8 <compile_declare_nonlocal+0x58>
        compile_syntax_error(comp, pn, "identifier redefined as nonlocal");
    68ee:	4a05      	ldr	r2, [pc, #20]	; (6904 <compile_declare_nonlocal+0x64>)
    68f0:	68b9      	ldr	r1, [r7, #8]
    68f2:	68f8      	ldr	r0, [r7, #12]
    68f4:	f7fe fa34 	bl	4d60 <compile_syntax_error>
}
    68f8:	bf00      	nop
    68fa:	3718      	adds	r7, #24
    68fc:	46bd      	mov	sp, r7
    68fe:	bd80      	pop	{r7, pc}
    6900:	0001e724 	.word	0x0001e724
    6904:	0001e744 	.word	0x0001e744

00006908 <compile_nonlocal_stmt>:

STATIC void compile_nonlocal_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6908:	b580      	push	{r7, lr}
    690a:	b086      	sub	sp, #24
    690c:	af00      	add	r7, sp, #0
    690e:	6078      	str	r0, [r7, #4]
    6910:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    6912:	687b      	ldr	r3, [r7, #4]
    6914:	795b      	ldrb	r3, [r3, #5]
    6916:	2b01      	cmp	r3, #1
    6918:	d129      	bne.n	696e <compile_nonlocal_stmt+0x66>
        if (comp->scope_cur->kind == SCOPE_MODULE) {
    691a:	687b      	ldr	r3, [r7, #4]
    691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    691e:	681b      	ldr	r3, [r3, #0]
    6920:	2b00      	cmp	r3, #0
    6922:	d106      	bne.n	6932 <compile_nonlocal_stmt+0x2a>
            compile_syntax_error(comp, (mp_parse_node_t)pns, "can't declare nonlocal in outer code");
    6924:	683b      	ldr	r3, [r7, #0]
    6926:	4a13      	ldr	r2, [pc, #76]	; (6974 <compile_nonlocal_stmt+0x6c>)
    6928:	4619      	mov	r1, r3
    692a:	6878      	ldr	r0, [r7, #4]
    692c:	f7fe fa18 	bl	4d60 <compile_syntax_error>
    6930:	e01d      	b.n	696e <compile_nonlocal_stmt+0x66>
            return;
        }
        mp_parse_node_t *nodes;
        int n = mp_parse_node_extract_list(&pns->nodes[0], PN_name_list, &nodes);
    6932:	683b      	ldr	r3, [r7, #0]
    6934:	3308      	adds	r3, #8
    6936:	f107 020c 	add.w	r2, r7, #12
    693a:	2167      	movs	r1, #103	; 0x67
    693c:	4618      	mov	r0, r3
    693e:	f7fd f915 	bl	3b6c <mp_parse_node_extract_list>
    6942:	6138      	str	r0, [r7, #16]
        for (int i = 0; i < n; i++) {
    6944:	2300      	movs	r3, #0
    6946:	617b      	str	r3, [r7, #20]
    6948:	e00d      	b.n	6966 <compile_nonlocal_stmt+0x5e>
            compile_declare_nonlocal(comp, (mp_parse_node_t)pns, MP_PARSE_NODE_LEAF_ARG(nodes[i]));
    694a:	6839      	ldr	r1, [r7, #0]
    694c:	68fa      	ldr	r2, [r7, #12]
    694e:	697b      	ldr	r3, [r7, #20]
    6950:	009b      	lsls	r3, r3, #2
    6952:	4413      	add	r3, r2
    6954:	681b      	ldr	r3, [r3, #0]
    6956:	091b      	lsrs	r3, r3, #4
    6958:	461a      	mov	r2, r3
    695a:	6878      	ldr	r0, [r7, #4]
    695c:	f7ff ffa0 	bl	68a0 <compile_declare_nonlocal>
        for (int i = 0; i < n; i++) {
    6960:	697b      	ldr	r3, [r7, #20]
    6962:	3301      	adds	r3, #1
    6964:	617b      	str	r3, [r7, #20]
    6966:	697a      	ldr	r2, [r7, #20]
    6968:	693b      	ldr	r3, [r7, #16]
    696a:	429a      	cmp	r2, r3
    696c:	dbed      	blt.n	694a <compile_nonlocal_stmt+0x42>
        }
    }
}
    696e:	3718      	adds	r7, #24
    6970:	46bd      	mov	sp, r7
    6972:	bd80      	pop	{r7, pc}
    6974:	0001e768 	.word	0x0001e768

00006978 <compile_assert_stmt>:

STATIC void compile_assert_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6978:	b580      	push	{r7, lr}
    697a:	b084      	sub	sp, #16
    697c:	af00      	add	r7, sp, #0
    697e:	6078      	str	r0, [r7, #4]
    6980:	6039      	str	r1, [r7, #0]
    // with optimisations enabled we don't compile assertions
    if (MP_STATE_VM(mp_optimise_value) != 0) {
    6982:	4b1c      	ldr	r3, [pc, #112]	; (69f4 <compile_assert_stmt+0x7c>)
    6984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    6988:	2b00      	cmp	r3, #0
    698a:	d12f      	bne.n	69ec <compile_assert_stmt+0x74>
        return;
    }

    uint l_end = comp_next_label(comp);
    698c:	6878      	ldr	r0, [r7, #4]
    698e:	f7fe fa03 	bl	4d98 <comp_next_label>
    6992:	60f8      	str	r0, [r7, #12]
    c_if_cond(comp, pns->nodes[0], true, l_end);
    6994:	683b      	ldr	r3, [r7, #0]
    6996:	6899      	ldr	r1, [r3, #8]
    6998:	68fb      	ldr	r3, [r7, #12]
    699a:	2201      	movs	r2, #1
    699c:	6878      	ldr	r0, [r7, #4]
    699e:	f7fe fb85 	bl	50ac <c_if_cond>
    EMIT_LOAD_GLOBAL(MP_QSTR_AssertionError); // we load_global instead of load_id, to be consistent with CPython
    69a2:	687b      	ldr	r3, [r7, #4]
    69a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    69a6:	2201      	movs	r2, #1
    69a8:	2139      	movs	r1, #57	; 0x39
    69aa:	4618      	mov	r0, r3
    69ac:	f003 fdd4 	bl	a558 <mp_emit_bc_load_global>
    if (!MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    69b0:	683b      	ldr	r3, [r7, #0]
    69b2:	68db      	ldr	r3, [r3, #12]
    69b4:	2b00      	cmp	r3, #0
    69b6:	d00c      	beq.n	69d2 <compile_assert_stmt+0x5a>
        // assertion message
        compile_node(comp, pns->nodes[1]);
    69b8:	683b      	ldr	r3, [r7, #0]
    69ba:	68db      	ldr	r3, [r3, #12]
    69bc:	4619      	mov	r1, r3
    69be:	6878      	ldr	r0, [r7, #4]
    69c0:	f002 f848 	bl	8a54 <compile_node>
        EMIT_ARG(call_function, 1, 0, 0);
    69c4:	687b      	ldr	r3, [r7, #4]
    69c6:	6a98      	ldr	r0, [r3, #40]	; 0x28
    69c8:	2300      	movs	r3, #0
    69ca:	2200      	movs	r2, #0
    69cc:	2101      	movs	r1, #1
    69ce:	f004 f9e1 	bl	ad94 <mp_emit_bc_call_function>
    }
    EMIT_ARG(raise_varargs, 1);
    69d2:	687b      	ldr	r3, [r7, #4]
    69d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    69d6:	2101      	movs	r1, #1
    69d8:	4618      	mov	r0, r3
    69da:	f004 fa1b 	bl	ae14 <mp_emit_bc_raise_varargs>
    EMIT_ARG(label_assign, l_end);
    69de:	687b      	ldr	r3, [r7, #4]
    69e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    69e2:	68f9      	ldr	r1, [r7, #12]
    69e4:	4618      	mov	r0, r3
    69e6:	f003 fc7f 	bl	a2e8 <mp_emit_bc_label_assign>
    69ea:	e000      	b.n	69ee <compile_assert_stmt+0x76>
        return;
    69ec:	bf00      	nop
}
    69ee:	3710      	adds	r7, #16
    69f0:	46bd      	mov	sp, r7
    69f2:	bd80      	pop	{r7, pc}
    69f4:	20000a2c 	.word	0x20000a2c

000069f8 <compile_if_stmt>:

STATIC void compile_if_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    69f8:	b580      	push	{r7, lr}
    69fa:	b08a      	sub	sp, #40	; 0x28
    69fc:	af00      	add	r7, sp, #0
    69fe:	6078      	str	r0, [r7, #4]
    6a00:	6039      	str	r1, [r7, #0]
    uint l_end = comp_next_label(comp);
    6a02:	6878      	ldr	r0, [r7, #4]
    6a04:	f7fe f9c8 	bl	4d98 <comp_next_label>
    6a08:	6238      	str	r0, [r7, #32]

    // optimisation: don't emit anything when "if False"
    if (!mp_parse_node_is_const_false(pns->nodes[0])) {
    6a0a:	683b      	ldr	r3, [r7, #0]
    6a0c:	689b      	ldr	r3, [r3, #8]
    6a0e:	4618      	mov	r0, r3
    6a10:	f7fd f82a 	bl	3a68 <mp_parse_node_is_const_false>
    6a14:	4603      	mov	r3, r0
    6a16:	f083 0301 	eor.w	r3, r3, #1
    6a1a:	b2db      	uxtb	r3, r3
    6a1c:	2b00      	cmp	r3, #0
    6a1e:	d038      	beq.n	6a92 <compile_if_stmt+0x9a>
        uint l_fail = comp_next_label(comp);
    6a20:	6878      	ldr	r0, [r7, #4]
    6a22:	f7fe f9b9 	bl	4d98 <comp_next_label>
    6a26:	61f8      	str	r0, [r7, #28]
        c_if_cond(comp, pns->nodes[0], false, l_fail); // if condition
    6a28:	683b      	ldr	r3, [r7, #0]
    6a2a:	6899      	ldr	r1, [r3, #8]
    6a2c:	69fb      	ldr	r3, [r7, #28]
    6a2e:	2200      	movs	r2, #0
    6a30:	6878      	ldr	r0, [r7, #4]
    6a32:	f7fe fb3b 	bl	50ac <c_if_cond>

        compile_node(comp, pns->nodes[1]); // if block
    6a36:	683b      	ldr	r3, [r7, #0]
    6a38:	68db      	ldr	r3, [r3, #12]
    6a3a:	4619      	mov	r1, r3
    6a3c:	6878      	ldr	r0, [r7, #4]
    6a3e:	f002 f809 	bl	8a54 <compile_node>

        // optimisation: skip everything else when "if True"
        if (mp_parse_node_is_const_true(pns->nodes[0])) {
    6a42:	683b      	ldr	r3, [r7, #0]
    6a44:	689b      	ldr	r3, [r3, #8]
    6a46:	4618      	mov	r0, r3
    6a48:	f7fd f82a 	bl	3aa0 <mp_parse_node_is_const_true>
    6a4c:	4603      	mov	r3, r0
    6a4e:	2b00      	cmp	r3, #0
    6a50:	f040 809a 	bne.w	6b88 <compile_if_stmt+0x190>
            goto done;
        }

        if (
            // optimisation: don't jump over non-existent elif/else blocks
            !(MP_PARSE_NODE_IS_NULL(pns->nodes[2]) && MP_PARSE_NODE_IS_NULL(pns->nodes[3]))
    6a54:	683b      	ldr	r3, [r7, #0]
    6a56:	691b      	ldr	r3, [r3, #16]
        if (
    6a58:	2b00      	cmp	r3, #0
    6a5a:	d103      	bne.n	6a64 <compile_if_stmt+0x6c>
            !(MP_PARSE_NODE_IS_NULL(pns->nodes[2]) && MP_PARSE_NODE_IS_NULL(pns->nodes[3]))
    6a5c:	683b      	ldr	r3, [r7, #0]
    6a5e:	695b      	ldr	r3, [r3, #20]
    6a60:	2b00      	cmp	r3, #0
    6a62:	d010      	beq.n	6a86 <compile_if_stmt+0x8e>
            // optimisation: don't jump if last instruction was return
            && !EMIT(last_emit_was_return_value)
    6a64:	687b      	ldr	r3, [r7, #4]
    6a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6a68:	4618      	mov	r0, r3
    6a6a:	f003 fbd9 	bl	a220 <mp_emit_bc_last_emit_was_return_value>
    6a6e:	4603      	mov	r3, r0
    6a70:	f083 0301 	eor.w	r3, r3, #1
    6a74:	b2db      	uxtb	r3, r3
    6a76:	2b00      	cmp	r3, #0
    6a78:	d005      	beq.n	6a86 <compile_if_stmt+0x8e>
            ) {
            // jump over elif/else blocks
            EMIT_ARG(jump, l_end);
    6a7a:	687b      	ldr	r3, [r7, #4]
    6a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6a7e:	6a39      	ldr	r1, [r7, #32]
    6a80:	4618      	mov	r0, r3
    6a82:	f003 febf 	bl	a804 <mp_emit_bc_jump>
        }

        EMIT_ARG(label_assign, l_fail);
    6a86:	687b      	ldr	r3, [r7, #4]
    6a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6a8a:	69f9      	ldr	r1, [r7, #28]
    6a8c:	4618      	mov	r0, r3
    6a8e:	f003 fc2b 	bl	a2e8 <mp_emit_bc_label_assign>
    }

    // compile elif blocks (if any)
    mp_parse_node_t *pn_elif;
    int n_elif = mp_parse_node_extract_list(&pns->nodes[2], PN_if_stmt_elif_list, &pn_elif);
    6a92:	683b      	ldr	r3, [r7, #0]
    6a94:	3310      	adds	r3, #16
    6a96:	f107 020c 	add.w	r2, r7, #12
    6a9a:	216a      	movs	r1, #106	; 0x6a
    6a9c:	4618      	mov	r0, r3
    6a9e:	f7fd f865 	bl	3b6c <mp_parse_node_extract_list>
    6aa2:	61b8      	str	r0, [r7, #24]
    for (int i = 0; i < n_elif; i++) {
    6aa4:	2300      	movs	r3, #0
    6aa6:	627b      	str	r3, [r7, #36]	; 0x24
    6aa8:	e063      	b.n	6b72 <compile_if_stmt+0x17a>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_elif[i], PN_if_stmt_elif)); // should be
    6aaa:	68fa      	ldr	r2, [r7, #12]
    6aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6aae:	009b      	lsls	r3, r3, #2
    6ab0:	4413      	add	r3, r2
    6ab2:	681b      	ldr	r3, [r3, #0]
    6ab4:	2b00      	cmp	r3, #0
    6ab6:	d011      	beq.n	6adc <compile_if_stmt+0xe4>
    6ab8:	68fa      	ldr	r2, [r7, #12]
    6aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6abc:	009b      	lsls	r3, r3, #2
    6abe:	4413      	add	r3, r2
    6ac0:	681b      	ldr	r3, [r3, #0]
    6ac2:	f003 0303 	and.w	r3, r3, #3
    6ac6:	2b00      	cmp	r3, #0
    6ac8:	d108      	bne.n	6adc <compile_if_stmt+0xe4>
    6aca:	68fa      	ldr	r2, [r7, #12]
    6acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6ace:	009b      	lsls	r3, r3, #2
    6ad0:	4413      	add	r3, r2
    6ad2:	681b      	ldr	r3, [r3, #0]
    6ad4:	685b      	ldr	r3, [r3, #4]
    6ad6:	b2db      	uxtb	r3, r3
    6ad8:	2b6b      	cmp	r3, #107	; 0x6b
    6ada:	d006      	beq.n	6aea <compile_if_stmt+0xf2>
    6adc:	4b31      	ldr	r3, [pc, #196]	; (6ba4 <compile_if_stmt+0x1ac>)
    6ade:	4a32      	ldr	r2, [pc, #200]	; (6ba8 <compile_if_stmt+0x1b0>)
    6ae0:	f240 41f3 	movw	r1, #1267	; 0x4f3
    6ae4:	4831      	ldr	r0, [pc, #196]	; (6bac <compile_if_stmt+0x1b4>)
    6ae6:	f014 fc41 	bl	1b36c <__assert_func>
        mp_parse_node_struct_t *pns_elif = (mp_parse_node_struct_t*)pn_elif[i];
    6aea:	68fa      	ldr	r2, [r7, #12]
    6aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6aee:	009b      	lsls	r3, r3, #2
    6af0:	4413      	add	r3, r2
    6af2:	681b      	ldr	r3, [r3, #0]
    6af4:	617b      	str	r3, [r7, #20]

        // optimisation: don't emit anything when "if False"
        if (!mp_parse_node_is_const_false(pns_elif->nodes[0])) {
    6af6:	697b      	ldr	r3, [r7, #20]
    6af8:	689b      	ldr	r3, [r3, #8]
    6afa:	4618      	mov	r0, r3
    6afc:	f7fc ffb4 	bl	3a68 <mp_parse_node_is_const_false>
    6b00:	4603      	mov	r3, r0
    6b02:	f083 0301 	eor.w	r3, r3, #1
    6b06:	b2db      	uxtb	r3, r3
    6b08:	2b00      	cmp	r3, #0
    6b0a:	d02f      	beq.n	6b6c <compile_if_stmt+0x174>
            uint l_fail = comp_next_label(comp);
    6b0c:	6878      	ldr	r0, [r7, #4]
    6b0e:	f7fe f943 	bl	4d98 <comp_next_label>
    6b12:	6138      	str	r0, [r7, #16]
            c_if_cond(comp, pns_elif->nodes[0], false, l_fail); // elif condition
    6b14:	697b      	ldr	r3, [r7, #20]
    6b16:	6899      	ldr	r1, [r3, #8]
    6b18:	693b      	ldr	r3, [r7, #16]
    6b1a:	2200      	movs	r2, #0
    6b1c:	6878      	ldr	r0, [r7, #4]
    6b1e:	f7fe fac5 	bl	50ac <c_if_cond>

            compile_node(comp, pns_elif->nodes[1]); // elif block
    6b22:	697b      	ldr	r3, [r7, #20]
    6b24:	68db      	ldr	r3, [r3, #12]
    6b26:	4619      	mov	r1, r3
    6b28:	6878      	ldr	r0, [r7, #4]
    6b2a:	f001 ff93 	bl	8a54 <compile_node>

            // optimisation: skip everything else when "elif True"
            if (mp_parse_node_is_const_true(pns_elif->nodes[0])) {
    6b2e:	697b      	ldr	r3, [r7, #20]
    6b30:	689b      	ldr	r3, [r3, #8]
    6b32:	4618      	mov	r0, r3
    6b34:	f7fc ffb4 	bl	3aa0 <mp_parse_node_is_const_true>
    6b38:	4603      	mov	r3, r0
    6b3a:	2b00      	cmp	r3, #0
    6b3c:	d126      	bne.n	6b8c <compile_if_stmt+0x194>
                goto done;
            }

            // optimisation: don't jump if last instruction was return
            if (!EMIT(last_emit_was_return_value)) {
    6b3e:	687b      	ldr	r3, [r7, #4]
    6b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b42:	4618      	mov	r0, r3
    6b44:	f003 fb6c 	bl	a220 <mp_emit_bc_last_emit_was_return_value>
    6b48:	4603      	mov	r3, r0
    6b4a:	f083 0301 	eor.w	r3, r3, #1
    6b4e:	b2db      	uxtb	r3, r3
    6b50:	2b00      	cmp	r3, #0
    6b52:	d005      	beq.n	6b60 <compile_if_stmt+0x168>
                EMIT_ARG(jump, l_end);
    6b54:	687b      	ldr	r3, [r7, #4]
    6b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b58:	6a39      	ldr	r1, [r7, #32]
    6b5a:	4618      	mov	r0, r3
    6b5c:	f003 fe52 	bl	a804 <mp_emit_bc_jump>
            }
            EMIT_ARG(label_assign, l_fail);
    6b60:	687b      	ldr	r3, [r7, #4]
    6b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b64:	6939      	ldr	r1, [r7, #16]
    6b66:	4618      	mov	r0, r3
    6b68:	f003 fbbe 	bl	a2e8 <mp_emit_bc_label_assign>
    for (int i = 0; i < n_elif; i++) {
    6b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6b6e:	3301      	adds	r3, #1
    6b70:	627b      	str	r3, [r7, #36]	; 0x24
    6b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6b74:	69bb      	ldr	r3, [r7, #24]
    6b76:	429a      	cmp	r2, r3
    6b78:	db97      	blt.n	6aaa <compile_if_stmt+0xb2>
        }
    }

    // compile else block
    compile_node(comp, pns->nodes[3]); // can be null
    6b7a:	683b      	ldr	r3, [r7, #0]
    6b7c:	695b      	ldr	r3, [r3, #20]
    6b7e:	4619      	mov	r1, r3
    6b80:	6878      	ldr	r0, [r7, #4]
    6b82:	f001 ff67 	bl	8a54 <compile_node>
    6b86:	e002      	b.n	6b8e <compile_if_stmt+0x196>
            goto done;
    6b88:	bf00      	nop
    6b8a:	e000      	b.n	6b8e <compile_if_stmt+0x196>
                goto done;
    6b8c:	bf00      	nop

done:
    EMIT_ARG(label_assign, l_end);
    6b8e:	687b      	ldr	r3, [r7, #4]
    6b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b92:	6a39      	ldr	r1, [r7, #32]
    6b94:	4618      	mov	r0, r3
    6b96:	f003 fba7 	bl	a2e8 <mp_emit_bc_label_assign>
}
    6b9a:	bf00      	nop
    6b9c:	3728      	adds	r7, #40	; 0x28
    6b9e:	46bd      	mov	sp, r7
    6ba0:	bd80      	pop	{r7, pc}
    6ba2:	bf00      	nop
    6ba4:	0001e790 	.word	0x0001e790
    6ba8:	0001ef74 	.word	0x0001ef74
    6bac:	0001e304 	.word	0x0001e304

00006bb0 <compile_while_stmt>:
#define END_BREAK_CONTINUE_BLOCK \
    comp->break_label = old_break_label; \
    comp->continue_label = old_continue_label; \
    comp->break_continue_except_level = old_break_continue_except_level;

STATIC void compile_while_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6bb0:	b580      	push	{r7, lr}
    6bb2:	b088      	sub	sp, #32
    6bb4:	af00      	add	r7, sp, #0
    6bb6:	6078      	str	r0, [r7, #4]
    6bb8:	6039      	str	r1, [r7, #0]
    START_BREAK_CONTINUE_BLOCK
    6bba:	687b      	ldr	r3, [r7, #4]
    6bbc:	8b1b      	ldrh	r3, [r3, #24]
    6bbe:	83fb      	strh	r3, [r7, #30]
    6bc0:	687b      	ldr	r3, [r7, #4]
    6bc2:	8b5b      	ldrh	r3, [r3, #26]
    6bc4:	83bb      	strh	r3, [r7, #28]
    6bc6:	687b      	ldr	r3, [r7, #4]
    6bc8:	8bdb      	ldrh	r3, [r3, #30]
    6bca:	837b      	strh	r3, [r7, #26]
    6bcc:	6878      	ldr	r0, [r7, #4]
    6bce:	f7fe f8e3 	bl	4d98 <comp_next_label>
    6bd2:	6178      	str	r0, [r7, #20]
    6bd4:	6878      	ldr	r0, [r7, #4]
    6bd6:	f7fe f8df 	bl	4d98 <comp_next_label>
    6bda:	6138      	str	r0, [r7, #16]
    6bdc:	697b      	ldr	r3, [r7, #20]
    6bde:	b29a      	uxth	r2, r3
    6be0:	687b      	ldr	r3, [r7, #4]
    6be2:	831a      	strh	r2, [r3, #24]
    6be4:	693b      	ldr	r3, [r7, #16]
    6be6:	b29a      	uxth	r2, r3
    6be8:	687b      	ldr	r3, [r7, #4]
    6bea:	835a      	strh	r2, [r3, #26]
    6bec:	687b      	ldr	r3, [r7, #4]
    6bee:	8b9a      	ldrh	r2, [r3, #28]
    6bf0:	687b      	ldr	r3, [r7, #4]
    6bf2:	83da      	strh	r2, [r3, #30]

    if (!mp_parse_node_is_const_false(pns->nodes[0])) { // optimisation: don't emit anything for "while False"
    6bf4:	683b      	ldr	r3, [r7, #0]
    6bf6:	689b      	ldr	r3, [r3, #8]
    6bf8:	4618      	mov	r0, r3
    6bfa:	f7fc ff35 	bl	3a68 <mp_parse_node_is_const_false>
    6bfe:	4603      	mov	r3, r0
    6c00:	f083 0301 	eor.w	r3, r3, #1
    6c04:	b2db      	uxtb	r3, r3
    6c06:	2b00      	cmp	r3, #0
    6c08:	d02d      	beq.n	6c66 <compile_while_stmt+0xb6>
        uint top_label = comp_next_label(comp);
    6c0a:	6878      	ldr	r0, [r7, #4]
    6c0c:	f7fe f8c4 	bl	4d98 <comp_next_label>
    6c10:	60f8      	str	r0, [r7, #12]
        if (!mp_parse_node_is_const_true(pns->nodes[0])) { // optimisation: don't jump to cond for "while True"
    6c12:	683b      	ldr	r3, [r7, #0]
    6c14:	689b      	ldr	r3, [r3, #8]
    6c16:	4618      	mov	r0, r3
    6c18:	f7fc ff42 	bl	3aa0 <mp_parse_node_is_const_true>
    6c1c:	4603      	mov	r3, r0
    6c1e:	f083 0301 	eor.w	r3, r3, #1
    6c22:	b2db      	uxtb	r3, r3
    6c24:	2b00      	cmp	r3, #0
    6c26:	d005      	beq.n	6c34 <compile_while_stmt+0x84>
            EMIT_ARG(jump, continue_label);
    6c28:	687b      	ldr	r3, [r7, #4]
    6c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c2c:	6939      	ldr	r1, [r7, #16]
    6c2e:	4618      	mov	r0, r3
    6c30:	f003 fde8 	bl	a804 <mp_emit_bc_jump>
        }
        EMIT_ARG(label_assign, top_label);
    6c34:	687b      	ldr	r3, [r7, #4]
    6c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c38:	68f9      	ldr	r1, [r7, #12]
    6c3a:	4618      	mov	r0, r3
    6c3c:	f003 fb54 	bl	a2e8 <mp_emit_bc_label_assign>
        compile_node(comp, pns->nodes[1]); // body
    6c40:	683b      	ldr	r3, [r7, #0]
    6c42:	68db      	ldr	r3, [r3, #12]
    6c44:	4619      	mov	r1, r3
    6c46:	6878      	ldr	r0, [r7, #4]
    6c48:	f001 ff04 	bl	8a54 <compile_node>
        EMIT_ARG(label_assign, continue_label);
    6c4c:	687b      	ldr	r3, [r7, #4]
    6c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c50:	6939      	ldr	r1, [r7, #16]
    6c52:	4618      	mov	r0, r3
    6c54:	f003 fb48 	bl	a2e8 <mp_emit_bc_label_assign>
        c_if_cond(comp, pns->nodes[0], true, top_label); // condition
    6c58:	683b      	ldr	r3, [r7, #0]
    6c5a:	6899      	ldr	r1, [r3, #8]
    6c5c:	68fb      	ldr	r3, [r7, #12]
    6c5e:	2201      	movs	r2, #1
    6c60:	6878      	ldr	r0, [r7, #4]
    6c62:	f7fe fa23 	bl	50ac <c_if_cond>
    }

    // break/continue apply to outer loop (if any) in the else block
    END_BREAK_CONTINUE_BLOCK
    6c66:	687b      	ldr	r3, [r7, #4]
    6c68:	8bfa      	ldrh	r2, [r7, #30]
    6c6a:	831a      	strh	r2, [r3, #24]
    6c6c:	687b      	ldr	r3, [r7, #4]
    6c6e:	8bba      	ldrh	r2, [r7, #28]
    6c70:	835a      	strh	r2, [r3, #26]
    6c72:	687b      	ldr	r3, [r7, #4]
    6c74:	8b7a      	ldrh	r2, [r7, #26]
    6c76:	83da      	strh	r2, [r3, #30]

    compile_node(comp, pns->nodes[2]); // else
    6c78:	683b      	ldr	r3, [r7, #0]
    6c7a:	691b      	ldr	r3, [r3, #16]
    6c7c:	4619      	mov	r1, r3
    6c7e:	6878      	ldr	r0, [r7, #4]
    6c80:	f001 fee8 	bl	8a54 <compile_node>

    EMIT_ARG(label_assign, break_label);
    6c84:	687b      	ldr	r3, [r7, #4]
    6c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c88:	6979      	ldr	r1, [r7, #20]
    6c8a:	4618      	mov	r0, r3
    6c8c:	f003 fb2c 	bl	a2e8 <mp_emit_bc_label_assign>
}
    6c90:	bf00      	nop
    6c92:	3720      	adds	r7, #32
    6c94:	46bd      	mov	sp, r7
    6c96:	bd80      	pop	{r7, pc}

00006c98 <compile_for_stmt_optimised_range>:
//    (<step> is a constant for us, so no need to worry about it changing)
//
// If <end> is a small-int, then the stack during the for-loop contains just
// the current value of <var>.  Otherwise, the stack contains <end> then the
// current value of <var>.
STATIC void compile_for_stmt_optimised_range(compiler_t *comp, mp_parse_node_t pn_var, mp_parse_node_t pn_start, mp_parse_node_t pn_end, mp_parse_node_t pn_step, mp_parse_node_t pn_body, mp_parse_node_t pn_else) {
    6c98:	b580      	push	{r7, lr}
    6c9a:	b08c      	sub	sp, #48	; 0x30
    6c9c:	af00      	add	r7, sp, #0
    6c9e:	60f8      	str	r0, [r7, #12]
    6ca0:	60b9      	str	r1, [r7, #8]
    6ca2:	607a      	str	r2, [r7, #4]
    6ca4:	603b      	str	r3, [r7, #0]
    START_BREAK_CONTINUE_BLOCK
    6ca6:	68fb      	ldr	r3, [r7, #12]
    6ca8:	8b1b      	ldrh	r3, [r3, #24]
    6caa:	857b      	strh	r3, [r7, #42]	; 0x2a
    6cac:	68fb      	ldr	r3, [r7, #12]
    6cae:	8b5b      	ldrh	r3, [r3, #26]
    6cb0:	853b      	strh	r3, [r7, #40]	; 0x28
    6cb2:	68fb      	ldr	r3, [r7, #12]
    6cb4:	8bdb      	ldrh	r3, [r3, #30]
    6cb6:	84fb      	strh	r3, [r7, #38]	; 0x26
    6cb8:	68f8      	ldr	r0, [r7, #12]
    6cba:	f7fe f86d 	bl	4d98 <comp_next_label>
    6cbe:	6238      	str	r0, [r7, #32]
    6cc0:	68f8      	ldr	r0, [r7, #12]
    6cc2:	f7fe f869 	bl	4d98 <comp_next_label>
    6cc6:	61f8      	str	r0, [r7, #28]
    6cc8:	6a3b      	ldr	r3, [r7, #32]
    6cca:	b29a      	uxth	r2, r3
    6ccc:	68fb      	ldr	r3, [r7, #12]
    6cce:	831a      	strh	r2, [r3, #24]
    6cd0:	69fb      	ldr	r3, [r7, #28]
    6cd2:	b29a      	uxth	r2, r3
    6cd4:	68fb      	ldr	r3, [r7, #12]
    6cd6:	835a      	strh	r2, [r3, #26]
    6cd8:	68fb      	ldr	r3, [r7, #12]
    6cda:	8b9a      	ldrh	r2, [r3, #28]
    6cdc:	68fb      	ldr	r3, [r7, #12]
    6cde:	83da      	strh	r2, [r3, #30]

    uint top_label = comp_next_label(comp);
    6ce0:	68f8      	ldr	r0, [r7, #12]
    6ce2:	f7fe f859 	bl	4d98 <comp_next_label>
    6ce6:	61b8      	str	r0, [r7, #24]
    uint entry_label = comp_next_label(comp);
    6ce8:	68f8      	ldr	r0, [r7, #12]
    6cea:	f7fe f855 	bl	4d98 <comp_next_label>
    6cee:	6178      	str	r0, [r7, #20]

    // put the end value on the stack if it's not a small-int constant
    bool end_on_stack = !MP_PARSE_NODE_IS_SMALL_INT(pn_end);
    6cf0:	683b      	ldr	r3, [r7, #0]
    6cf2:	f003 0301 	and.w	r3, r3, #1
    6cf6:	2b00      	cmp	r3, #0
    6cf8:	bf0c      	ite	eq
    6cfa:	2301      	moveq	r3, #1
    6cfc:	2300      	movne	r3, #0
    6cfe:	74fb      	strb	r3, [r7, #19]
    if (end_on_stack) {
    6d00:	7cfb      	ldrb	r3, [r7, #19]
    6d02:	2b00      	cmp	r3, #0
    6d04:	d003      	beq.n	6d0e <compile_for_stmt_optimised_range+0x76>
        compile_node(comp, pn_end);
    6d06:	6839      	ldr	r1, [r7, #0]
    6d08:	68f8      	ldr	r0, [r7, #12]
    6d0a:	f001 fea3 	bl	8a54 <compile_node>
    }

    // compile: start
    compile_node(comp, pn_start);
    6d0e:	6879      	ldr	r1, [r7, #4]
    6d10:	68f8      	ldr	r0, [r7, #12]
    6d12:	f001 fe9f 	bl	8a54 <compile_node>

    EMIT_ARG(jump, entry_label);
    6d16:	68fb      	ldr	r3, [r7, #12]
    6d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d1a:	6979      	ldr	r1, [r7, #20]
    6d1c:	4618      	mov	r0, r3
    6d1e:	f003 fd71 	bl	a804 <mp_emit_bc_jump>
    EMIT_ARG(label_assign, top_label);
    6d22:	68fb      	ldr	r3, [r7, #12]
    6d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d26:	69b9      	ldr	r1, [r7, #24]
    6d28:	4618      	mov	r0, r3
    6d2a:	f003 fadd 	bl	a2e8 <mp_emit_bc_label_assign>

    // duplicate next value and store it to var
    EMIT(dup_top);
    6d2e:	68fb      	ldr	r3, [r7, #12]
    6d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d32:	4618      	mov	r0, r3
    6d34:	f003 fd14 	bl	a760 <mp_emit_bc_dup_top>
    c_assign(comp, pn_var, ASSIGN_STORE);
    6d38:	2200      	movs	r2, #0
    6d3a:	68b9      	ldr	r1, [r7, #8]
    6d3c:	68f8      	ldr	r0, [r7, #12]
    6d3e:	f7fe fc53 	bl	55e8 <c_assign>

    // compile body
    compile_node(comp, pn_body);
    6d42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    6d44:	68f8      	ldr	r0, [r7, #12]
    6d46:	f001 fe85 	bl	8a54 <compile_node>

    EMIT_ARG(label_assign, continue_label);
    6d4a:	68fb      	ldr	r3, [r7, #12]
    6d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d4e:	69f9      	ldr	r1, [r7, #28]
    6d50:	4618      	mov	r0, r3
    6d52:	f003 fac9 	bl	a2e8 <mp_emit_bc_label_assign>

    // compile: var + step
    compile_node(comp, pn_step);
    6d56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    6d58:	68f8      	ldr	r0, [r7, #12]
    6d5a:	f001 fe7b 	bl	8a54 <compile_node>
    EMIT_ARG(binary_op, MP_BINARY_OP_INPLACE_ADD);
    6d5e:	68fb      	ldr	r3, [r7, #12]
    6d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d62:	210e      	movs	r1, #14
    6d64:	4618      	mov	r0, r3
    6d66:	f003 feab 	bl	aac0 <mp_emit_bc_binary_op>

    EMIT_ARG(label_assign, entry_label);
    6d6a:	68fb      	ldr	r3, [r7, #12]
    6d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d6e:	6979      	ldr	r1, [r7, #20]
    6d70:	4618      	mov	r0, r3
    6d72:	f003 fab9 	bl	a2e8 <mp_emit_bc_label_assign>

    // compile: if var <cond> end: goto top
    if (end_on_stack) {
    6d76:	7cfb      	ldrb	r3, [r7, #19]
    6d78:	2b00      	cmp	r3, #0
    6d7a:	d00a      	beq.n	6d92 <compile_for_stmt_optimised_range+0xfa>
        EMIT(dup_top_two);
    6d7c:	68fb      	ldr	r3, [r7, #12]
    6d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d80:	4618      	mov	r0, r3
    6d82:	f003 fcfd 	bl	a780 <mp_emit_bc_dup_top_two>
        EMIT(rot_two);
    6d86:	68fb      	ldr	r3, [r7, #12]
    6d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d8a:	4618      	mov	r0, r3
    6d8c:	f003 fd1a 	bl	a7c4 <mp_emit_bc_rot_two>
    6d90:	e008      	b.n	6da4 <compile_for_stmt_optimised_range+0x10c>
    } else {
        EMIT(dup_top);
    6d92:	68fb      	ldr	r3, [r7, #12]
    6d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d96:	4618      	mov	r0, r3
    6d98:	f003 fce2 	bl	a760 <mp_emit_bc_dup_top>
        compile_node(comp, pn_end);
    6d9c:	6839      	ldr	r1, [r7, #0]
    6d9e:	68f8      	ldr	r0, [r7, #12]
    6da0:	f001 fe58 	bl	8a54 <compile_node>
    }
    assert(MP_PARSE_NODE_IS_SMALL_INT(pn_step));
    6da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6da6:	f003 0301 	and.w	r3, r3, #1
    6daa:	2b00      	cmp	r3, #0
    6dac:	d106      	bne.n	6dbc <compile_for_stmt_optimised_range+0x124>
    6dae:	4b38      	ldr	r3, [pc, #224]	; (6e90 <compile_for_stmt_optimised_range+0x1f8>)
    6db0:	4a38      	ldr	r2, [pc, #224]	; (6e94 <compile_for_stmt_optimised_range+0x1fc>)
    6db2:	f240 516f 	movw	r1, #1391	; 0x56f
    6db6:	4838      	ldr	r0, [pc, #224]	; (6e98 <compile_for_stmt_optimised_range+0x200>)
    6db8:	f014 fad8 	bl	1b36c <__assert_func>
    if (MP_PARSE_NODE_LEAF_SMALL_INT(pn_step) >= 0) {
    6dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6dbe:	105b      	asrs	r3, r3, #1
    6dc0:	2b00      	cmp	r3, #0
    6dc2:	db06      	blt.n	6dd2 <compile_for_stmt_optimised_range+0x13a>
        EMIT_ARG(binary_op, MP_BINARY_OP_LESS);
    6dc4:	68fb      	ldr	r3, [r7, #12]
    6dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6dc8:	2100      	movs	r1, #0
    6dca:	4618      	mov	r0, r3
    6dcc:	f003 fe78 	bl	aac0 <mp_emit_bc_binary_op>
    6dd0:	e005      	b.n	6dde <compile_for_stmt_optimised_range+0x146>
    } else {
        EMIT_ARG(binary_op, MP_BINARY_OP_MORE);
    6dd2:	68fb      	ldr	r3, [r7, #12]
    6dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6dd6:	2101      	movs	r1, #1
    6dd8:	4618      	mov	r0, r3
    6dda:	f003 fe71 	bl	aac0 <mp_emit_bc_binary_op>
    }
    EMIT_ARG(pop_jump_if, true, top_label);
    6dde:	68fb      	ldr	r3, [r7, #12]
    6de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6de2:	69ba      	ldr	r2, [r7, #24]
    6de4:	2101      	movs	r1, #1
    6de6:	4618      	mov	r0, r3
    6de8:	f003 fd1e 	bl	a828 <mp_emit_bc_pop_jump_if>

    // break/continue apply to outer loop (if any) in the else block
    END_BREAK_CONTINUE_BLOCK
    6dec:	68fb      	ldr	r3, [r7, #12]
    6dee:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
    6df0:	831a      	strh	r2, [r3, #24]
    6df2:	68fb      	ldr	r3, [r7, #12]
    6df4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    6df6:	835a      	strh	r2, [r3, #26]
    6df8:	68fb      	ldr	r3, [r7, #12]
    6dfa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    6dfc:	83da      	strh	r2, [r3, #30]

    // Compile the else block.  We must pop the iterator variables before
    // executing the else code because it may contain break/continue statements.
    uint end_label = 0;
    6dfe:	2300      	movs	r3, #0
    6e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (!MP_PARSE_NODE_IS_NULL(pn_else)) {
    6e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6e04:	2b00      	cmp	r3, #0
    6e06:	d022      	beq.n	6e4e <compile_for_stmt_optimised_range+0x1b6>
        // discard final value of "var", and possible "end" value
        EMIT(pop_top);
    6e08:	68fb      	ldr	r3, [r7, #12]
    6e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e0c:	4618      	mov	r0, r3
    6e0e:	f003 fcc7 	bl	a7a0 <mp_emit_bc_pop_top>
        if (end_on_stack) {
    6e12:	7cfb      	ldrb	r3, [r7, #19]
    6e14:	2b00      	cmp	r3, #0
    6e16:	d004      	beq.n	6e22 <compile_for_stmt_optimised_range+0x18a>
            EMIT(pop_top);
    6e18:	68fb      	ldr	r3, [r7, #12]
    6e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e1c:	4618      	mov	r0, r3
    6e1e:	f003 fcbf 	bl	a7a0 <mp_emit_bc_pop_top>
        }
        compile_node(comp, pn_else);
    6e22:	6c39      	ldr	r1, [r7, #64]	; 0x40
    6e24:	68f8      	ldr	r0, [r7, #12]
    6e26:	f001 fe15 	bl	8a54 <compile_node>
        end_label = comp_next_label(comp);
    6e2a:	68f8      	ldr	r0, [r7, #12]
    6e2c:	f7fd ffb4 	bl	4d98 <comp_next_label>
    6e30:	62f8      	str	r0, [r7, #44]	; 0x2c
        EMIT_ARG(jump, end_label);
    6e32:	68fb      	ldr	r3, [r7, #12]
    6e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    6e38:	4618      	mov	r0, r3
    6e3a:	f003 fce3 	bl	a804 <mp_emit_bc_jump>
        EMIT_ARG(adjust_stack_size, 1 + end_on_stack);
    6e3e:	68fb      	ldr	r3, [r7, #12]
    6e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6e42:	7cfb      	ldrb	r3, [r7, #19]
    6e44:	3301      	adds	r3, #1
    6e46:	4619      	mov	r1, r3
    6e48:	4610      	mov	r0, r2
    6e4a:	f003 f9fb 	bl	a244 <mp_emit_bc_adjust_stack_size>
    }

    EMIT_ARG(label_assign, break_label);
    6e4e:	68fb      	ldr	r3, [r7, #12]
    6e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e52:	6a39      	ldr	r1, [r7, #32]
    6e54:	4618      	mov	r0, r3
    6e56:	f003 fa47 	bl	a2e8 <mp_emit_bc_label_assign>

    // discard final value of var that failed the loop condition
    EMIT(pop_top);
    6e5a:	68fb      	ldr	r3, [r7, #12]
    6e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e5e:	4618      	mov	r0, r3
    6e60:	f003 fc9e 	bl	a7a0 <mp_emit_bc_pop_top>

    // discard <end> value if it's on the stack
    if (end_on_stack) {
    6e64:	7cfb      	ldrb	r3, [r7, #19]
    6e66:	2b00      	cmp	r3, #0
    6e68:	d004      	beq.n	6e74 <compile_for_stmt_optimised_range+0x1dc>
        EMIT(pop_top);
    6e6a:	68fb      	ldr	r3, [r7, #12]
    6e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e6e:	4618      	mov	r0, r3
    6e70:	f003 fc96 	bl	a7a0 <mp_emit_bc_pop_top>
    }

    if (!MP_PARSE_NODE_IS_NULL(pn_else)) {
    6e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6e76:	2b00      	cmp	r3, #0
    6e78:	d005      	beq.n	6e86 <compile_for_stmt_optimised_range+0x1ee>
        EMIT_ARG(label_assign, end_label);
    6e7a:	68fb      	ldr	r3, [r7, #12]
    6e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    6e80:	4618      	mov	r0, r3
    6e82:	f003 fa31 	bl	a2e8 <mp_emit_bc_label_assign>
    }
}
    6e86:	bf00      	nop
    6e88:	3730      	adds	r7, #48	; 0x30
    6e8a:	46bd      	mov	sp, r7
    6e8c:	bd80      	pop	{r7, pc}
    6e8e:	bf00      	nop
    6e90:	0001e7cc 	.word	0x0001e7cc
    6e94:	0001ef84 	.word	0x0001ef84
    6e98:	0001e304 	.word	0x0001e304

00006e9c <compile_for_stmt>:

STATIC void compile_for_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    6e9c:	b580      	push	{r7, lr}
    6e9e:	b096      	sub	sp, #88	; 0x58
    6ea0:	af04      	add	r7, sp, #16
    6ea2:	6078      	str	r0, [r7, #4]
    6ea4:	6039      	str	r1, [r7, #0]
    // this bit optimises: for <x> in range(...), turning it into an explicitly incremented variable
    // this is actually slower, but uses no heap memory
    // for viper it will be much, much faster
    if (/*comp->scope_cur->emit_options == MP_EMIT_OPT_VIPER &&*/ MP_PARSE_NODE_IS_ID(pns->nodes[0]) && MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_atom_expr_normal)) {
    6ea6:	683b      	ldr	r3, [r7, #0]
    6ea8:	689b      	ldr	r3, [r3, #8]
    6eaa:	f003 030f 	and.w	r3, r3, #15
    6eae:	2b02      	cmp	r3, #2
    6eb0:	f040 80c1 	bne.w	7036 <compile_for_stmt+0x19a>
    6eb4:	683b      	ldr	r3, [r7, #0]
    6eb6:	68db      	ldr	r3, [r3, #12]
    6eb8:	2b00      	cmp	r3, #0
    6eba:	f000 80bc 	beq.w	7036 <compile_for_stmt+0x19a>
    6ebe:	683b      	ldr	r3, [r7, #0]
    6ec0:	68db      	ldr	r3, [r3, #12]
    6ec2:	f003 0303 	and.w	r3, r3, #3
    6ec6:	2b00      	cmp	r3, #0
    6ec8:	f040 80b5 	bne.w	7036 <compile_for_stmt+0x19a>
    6ecc:	683b      	ldr	r3, [r7, #0]
    6ece:	68db      	ldr	r3, [r3, #12]
    6ed0:	685b      	ldr	r3, [r3, #4]
    6ed2:	b2db      	uxtb	r3, r3
    6ed4:	2b29      	cmp	r3, #41	; 0x29
    6ed6:	f040 80ae 	bne.w	7036 <compile_for_stmt+0x19a>
        mp_parse_node_struct_t *pns_it = (mp_parse_node_struct_t*)pns->nodes[1];
    6eda:	683b      	ldr	r3, [r7, #0]
    6edc:	68db      	ldr	r3, [r3, #12]
    6ede:	637b      	str	r3, [r7, #52]	; 0x34
        if (MP_PARSE_NODE_IS_ID(pns_it->nodes[0])
    6ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6ee2:	689b      	ldr	r3, [r3, #8]
    6ee4:	f003 030f 	and.w	r3, r3, #15
    6ee8:	2b02      	cmp	r3, #2
    6eea:	f040 80a4 	bne.w	7036 <compile_for_stmt+0x19a>
            && MP_PARSE_NODE_LEAF_ARG(pns_it->nodes[0]) == MP_QSTR_range
    6eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6ef0:	689b      	ldr	r3, [r3, #8]
    6ef2:	091b      	lsrs	r3, r3, #4
    6ef4:	2ba3      	cmp	r3, #163	; 0xa3
    6ef6:	f040 809e 	bne.w	7036 <compile_for_stmt+0x19a>
            && MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pns_it->nodes[1]) == PN_trailer_paren) {
    6efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6efc:	68db      	ldr	r3, [r3, #12]
    6efe:	685b      	ldr	r3, [r3, #4]
    6f00:	b2db      	uxtb	r3, r3
    6f02:	2b2d      	cmp	r3, #45	; 0x2d
    6f04:	f040 8097 	bne.w	7036 <compile_for_stmt+0x19a>
            mp_parse_node_t pn_range_args = ((mp_parse_node_struct_t*)pns_it->nodes[1])->nodes[0];
    6f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6f0a:	68db      	ldr	r3, [r3, #12]
    6f0c:	689b      	ldr	r3, [r3, #8]
    6f0e:	613b      	str	r3, [r7, #16]
            mp_parse_node_t *args;
            int n_args = mp_parse_node_extract_list(&pn_range_args, PN_arglist, &args);
    6f10:	f107 020c 	add.w	r2, r7, #12
    6f14:	f107 0310 	add.w	r3, r7, #16
    6f18:	2197      	movs	r1, #151	; 0x97
    6f1a:	4618      	mov	r0, r3
    6f1c:	f7fc fe26 	bl	3b6c <mp_parse_node_extract_list>
    6f20:	6338      	str	r0, [r7, #48]	; 0x30
            mp_parse_node_t pn_range_start;
            mp_parse_node_t pn_range_end;
            mp_parse_node_t pn_range_step;
            bool optimize = false;
    6f22:	2300      	movs	r3, #0
    6f24:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            if (1 <= n_args && n_args <= 3) {
    6f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6f2a:	2b00      	cmp	r3, #0
    6f2c:	dd6f      	ble.n	700e <compile_for_stmt+0x172>
    6f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6f30:	2b03      	cmp	r3, #3
    6f32:	dc6c      	bgt.n	700e <compile_for_stmt+0x172>
                optimize = true;
    6f34:	2301      	movs	r3, #1
    6f36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                if (n_args == 1) {
    6f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6f3c:	2b01      	cmp	r3, #1
    6f3e:	d10b      	bne.n	6f58 <compile_for_stmt+0xbc>
                    pn_range_start = mp_parse_node_new_small_int(0);
    6f40:	2000      	movs	r0, #0
    6f42:	f7fd fed9 	bl	4cf8 <mp_parse_node_new_small_int>
    6f46:	6478      	str	r0, [r7, #68]	; 0x44
                    pn_range_end = args[0];
    6f48:	68fb      	ldr	r3, [r7, #12]
    6f4a:	681b      	ldr	r3, [r3, #0]
    6f4c:	643b      	str	r3, [r7, #64]	; 0x40
                    pn_range_step = mp_parse_node_new_small_int(1);
    6f4e:	2001      	movs	r0, #1
    6f50:	f7fd fed2 	bl	4cf8 <mp_parse_node_new_small_int>
    6f54:	63f8      	str	r0, [r7, #60]	; 0x3c
    6f56:	e022      	b.n	6f9e <compile_for_stmt+0x102>
                } else if (n_args == 2) {
    6f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6f5a:	2b02      	cmp	r3, #2
    6f5c:	d10a      	bne.n	6f74 <compile_for_stmt+0xd8>
                    pn_range_start = args[0];
    6f5e:	68fb      	ldr	r3, [r7, #12]
    6f60:	681b      	ldr	r3, [r3, #0]
    6f62:	647b      	str	r3, [r7, #68]	; 0x44
                    pn_range_end = args[1];
    6f64:	68fb      	ldr	r3, [r7, #12]
    6f66:	685b      	ldr	r3, [r3, #4]
    6f68:	643b      	str	r3, [r7, #64]	; 0x40
                    pn_range_step = mp_parse_node_new_small_int(1);
    6f6a:	2001      	movs	r0, #1
    6f6c:	f7fd fec4 	bl	4cf8 <mp_parse_node_new_small_int>
    6f70:	63f8      	str	r0, [r7, #60]	; 0x3c
    6f72:	e014      	b.n	6f9e <compile_for_stmt+0x102>
                } else {
                    pn_range_start = args[0];
    6f74:	68fb      	ldr	r3, [r7, #12]
    6f76:	681b      	ldr	r3, [r3, #0]
    6f78:	647b      	str	r3, [r7, #68]	; 0x44
                    pn_range_end = args[1];
    6f7a:	68fb      	ldr	r3, [r7, #12]
    6f7c:	685b      	ldr	r3, [r3, #4]
    6f7e:	643b      	str	r3, [r7, #64]	; 0x40
                    pn_range_step = args[2];
    6f80:	68fb      	ldr	r3, [r7, #12]
    6f82:	689b      	ldr	r3, [r3, #8]
    6f84:	63fb      	str	r3, [r7, #60]	; 0x3c
                    // the step must be a non-zero constant integer to do the optimisation
                    if (!MP_PARSE_NODE_IS_SMALL_INT(pn_range_step)
    6f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6f88:	f003 0301 	and.w	r3, r3, #1
    6f8c:	2b00      	cmp	r3, #0
    6f8e:	d003      	beq.n	6f98 <compile_for_stmt+0xfc>
                        || MP_PARSE_NODE_LEAF_SMALL_INT(pn_range_step) == 0) {
    6f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6f92:	105b      	asrs	r3, r3, #1
    6f94:	2b00      	cmp	r3, #0
    6f96:	d102      	bne.n	6f9e <compile_for_stmt+0x102>
                        optimize = false;
    6f98:	2300      	movs	r3, #0
    6f9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }
                }
                // arguments must be able to be compiled as standard expressions
                if (optimize && MP_PARSE_NODE_IS_STRUCT(pn_range_start)) {
    6f9e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    6fa2:	2b00      	cmp	r3, #0
    6fa4:	d017      	beq.n	6fd6 <compile_for_stmt+0x13a>
    6fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6fa8:	2b00      	cmp	r3, #0
    6faa:	d014      	beq.n	6fd6 <compile_for_stmt+0x13a>
    6fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6fae:	f003 0303 	and.w	r3, r3, #3
    6fb2:	2b00      	cmp	r3, #0
    6fb4:	d10f      	bne.n	6fd6 <compile_for_stmt+0x13a>
                    int k = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_range_start);
    6fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6fb8:	685b      	ldr	r3, [r3, #4]
    6fba:	b2db      	uxtb	r3, r3
    6fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (k == PN_arglist_star || k == PN_arglist_dbl_star || k == PN_argument) {
    6fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6fc0:	2b99      	cmp	r3, #153	; 0x99
    6fc2:	d005      	beq.n	6fd0 <compile_for_stmt+0x134>
    6fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6fc6:	2b9a      	cmp	r3, #154	; 0x9a
    6fc8:	d002      	beq.n	6fd0 <compile_for_stmt+0x134>
    6fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6fcc:	2b9b      	cmp	r3, #155	; 0x9b
    6fce:	d102      	bne.n	6fd6 <compile_for_stmt+0x13a>
                        optimize = false;
    6fd0:	2300      	movs	r3, #0
    6fd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }
                }
                if (optimize && MP_PARSE_NODE_IS_STRUCT(pn_range_end)) {
    6fd6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    6fda:	2b00      	cmp	r3, #0
    6fdc:	d017      	beq.n	700e <compile_for_stmt+0x172>
    6fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6fe0:	2b00      	cmp	r3, #0
    6fe2:	d014      	beq.n	700e <compile_for_stmt+0x172>
    6fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6fe6:	f003 0303 	and.w	r3, r3, #3
    6fea:	2b00      	cmp	r3, #0
    6fec:	d10f      	bne.n	700e <compile_for_stmt+0x172>
                    int k = MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_range_end);
    6fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6ff0:	685b      	ldr	r3, [r3, #4]
    6ff2:	b2db      	uxtb	r3, r3
    6ff4:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (k == PN_arglist_star || k == PN_arglist_dbl_star || k == PN_argument) {
    6ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6ff8:	2b99      	cmp	r3, #153	; 0x99
    6ffa:	d005      	beq.n	7008 <compile_for_stmt+0x16c>
    6ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6ffe:	2b9a      	cmp	r3, #154	; 0x9a
    7000:	d002      	beq.n	7008 <compile_for_stmt+0x16c>
    7002:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7004:	2b9b      	cmp	r3, #155	; 0x9b
    7006:	d102      	bne.n	700e <compile_for_stmt+0x172>
                        optimize = false;
    7008:	2300      	movs	r3, #0
    700a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    }
                }
            }
            if (optimize) {
    700e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    7012:	2b00      	cmp	r3, #0
    7014:	d00f      	beq.n	7036 <compile_for_stmt+0x19a>
                compile_for_stmt_optimised_range(comp, pns->nodes[0], pn_range_start, pn_range_end, pn_range_step, pns->nodes[2], pns->nodes[3]);
    7016:	683b      	ldr	r3, [r7, #0]
    7018:	6899      	ldr	r1, [r3, #8]
    701a:	683b      	ldr	r3, [r7, #0]
    701c:	691b      	ldr	r3, [r3, #16]
    701e:	683a      	ldr	r2, [r7, #0]
    7020:	6952      	ldr	r2, [r2, #20]
    7022:	9202      	str	r2, [sp, #8]
    7024:	9301      	str	r3, [sp, #4]
    7026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7028:	9300      	str	r3, [sp, #0]
    702a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    702c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    702e:	6878      	ldr	r0, [r7, #4]
    7030:	f7ff fe32 	bl	6c98 <compile_for_stmt_optimised_range>
    7034:	e07f      	b.n	7136 <compile_for_stmt+0x29a>
                return;
            }
        }
    }

    START_BREAK_CONTINUE_BLOCK
    7036:	687b      	ldr	r3, [r7, #4]
    7038:	8b1b      	ldrh	r3, [r3, #24]
    703a:	84fb      	strh	r3, [r7, #38]	; 0x26
    703c:	687b      	ldr	r3, [r7, #4]
    703e:	8b5b      	ldrh	r3, [r3, #26]
    7040:	84bb      	strh	r3, [r7, #36]	; 0x24
    7042:	687b      	ldr	r3, [r7, #4]
    7044:	8bdb      	ldrh	r3, [r3, #30]
    7046:	847b      	strh	r3, [r7, #34]	; 0x22
    7048:	6878      	ldr	r0, [r7, #4]
    704a:	f7fd fea5 	bl	4d98 <comp_next_label>
    704e:	61f8      	str	r0, [r7, #28]
    7050:	6878      	ldr	r0, [r7, #4]
    7052:	f7fd fea1 	bl	4d98 <comp_next_label>
    7056:	61b8      	str	r0, [r7, #24]
    7058:	69fb      	ldr	r3, [r7, #28]
    705a:	b29a      	uxth	r2, r3
    705c:	687b      	ldr	r3, [r7, #4]
    705e:	831a      	strh	r2, [r3, #24]
    7060:	69bb      	ldr	r3, [r7, #24]
    7062:	b29a      	uxth	r2, r3
    7064:	687b      	ldr	r3, [r7, #4]
    7066:	835a      	strh	r2, [r3, #26]
    7068:	687b      	ldr	r3, [r7, #4]
    706a:	8b9a      	ldrh	r2, [r3, #28]
    706c:	687b      	ldr	r3, [r7, #4]
    706e:	83da      	strh	r2, [r3, #30]
    comp->break_label |= MP_EMIT_BREAK_FROM_FOR;
    7070:	687b      	ldr	r3, [r7, #4]
    7072:	8b1b      	ldrh	r3, [r3, #24]
    7074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    7078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    707c:	b29a      	uxth	r2, r3
    707e:	687b      	ldr	r3, [r7, #4]
    7080:	831a      	strh	r2, [r3, #24]

    uint pop_label = comp_next_label(comp);
    7082:	6878      	ldr	r0, [r7, #4]
    7084:	f7fd fe88 	bl	4d98 <comp_next_label>
    7088:	6178      	str	r0, [r7, #20]

    compile_node(comp, pns->nodes[1]); // iterator
    708a:	683b      	ldr	r3, [r7, #0]
    708c:	68db      	ldr	r3, [r3, #12]
    708e:	4619      	mov	r1, r3
    7090:	6878      	ldr	r0, [r7, #4]
    7092:	f001 fcdf 	bl	8a54 <compile_node>
    EMIT_ARG(get_iter, true);
    7096:	687b      	ldr	r3, [r7, #4]
    7098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    709a:	2101      	movs	r1, #1
    709c:	4618      	mov	r0, r3
    709e:	f003 fc9b 	bl	a9d8 <mp_emit_bc_get_iter>
    EMIT_ARG(label_assign, continue_label);
    70a2:	687b      	ldr	r3, [r7, #4]
    70a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70a6:	69b9      	ldr	r1, [r7, #24]
    70a8:	4618      	mov	r0, r3
    70aa:	f003 f91d 	bl	a2e8 <mp_emit_bc_label_assign>
    EMIT_ARG(for_iter, pop_label);
    70ae:	687b      	ldr	r3, [r7, #4]
    70b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70b2:	6979      	ldr	r1, [r7, #20]
    70b4:	4618      	mov	r0, r3
    70b6:	f003 fcad 	bl	aa14 <mp_emit_bc_for_iter>
    c_assign(comp, pns->nodes[0], ASSIGN_STORE); // variable
    70ba:	683b      	ldr	r3, [r7, #0]
    70bc:	689b      	ldr	r3, [r3, #8]
    70be:	2200      	movs	r2, #0
    70c0:	4619      	mov	r1, r3
    70c2:	6878      	ldr	r0, [r7, #4]
    70c4:	f7fe fa90 	bl	55e8 <c_assign>
    compile_node(comp, pns->nodes[2]); // body
    70c8:	683b      	ldr	r3, [r7, #0]
    70ca:	691b      	ldr	r3, [r3, #16]
    70cc:	4619      	mov	r1, r3
    70ce:	6878      	ldr	r0, [r7, #4]
    70d0:	f001 fcc0 	bl	8a54 <compile_node>
    if (!EMIT(last_emit_was_return_value)) {
    70d4:	687b      	ldr	r3, [r7, #4]
    70d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70d8:	4618      	mov	r0, r3
    70da:	f003 f8a1 	bl	a220 <mp_emit_bc_last_emit_was_return_value>
    70de:	4603      	mov	r3, r0
    70e0:	f083 0301 	eor.w	r3, r3, #1
    70e4:	b2db      	uxtb	r3, r3
    70e6:	2b00      	cmp	r3, #0
    70e8:	d005      	beq.n	70f6 <compile_for_stmt+0x25a>
        EMIT_ARG(jump, continue_label);
    70ea:	687b      	ldr	r3, [r7, #4]
    70ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70ee:	69b9      	ldr	r1, [r7, #24]
    70f0:	4618      	mov	r0, r3
    70f2:	f003 fb87 	bl	a804 <mp_emit_bc_jump>
    }
    EMIT_ARG(label_assign, pop_label);
    70f6:	687b      	ldr	r3, [r7, #4]
    70f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70fa:	6979      	ldr	r1, [r7, #20]
    70fc:	4618      	mov	r0, r3
    70fe:	f003 f8f3 	bl	a2e8 <mp_emit_bc_label_assign>
    EMIT(for_iter_end);
    7102:	687b      	ldr	r3, [r7, #4]
    7104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7106:	4618      	mov	r0, r3
    7108:	f003 fc96 	bl	aa38 <mp_emit_bc_for_iter_end>

    // break/continue apply to outer loop (if any) in the else block
    END_BREAK_CONTINUE_BLOCK
    710c:	687b      	ldr	r3, [r7, #4]
    710e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    7110:	831a      	strh	r2, [r3, #24]
    7112:	687b      	ldr	r3, [r7, #4]
    7114:	8cba      	ldrh	r2, [r7, #36]	; 0x24
    7116:	835a      	strh	r2, [r3, #26]
    7118:	687b      	ldr	r3, [r7, #4]
    711a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
    711c:	83da      	strh	r2, [r3, #30]

    compile_node(comp, pns->nodes[3]); // else (may be empty)
    711e:	683b      	ldr	r3, [r7, #0]
    7120:	695b      	ldr	r3, [r3, #20]
    7122:	4619      	mov	r1, r3
    7124:	6878      	ldr	r0, [r7, #4]
    7126:	f001 fc95 	bl	8a54 <compile_node>

    EMIT_ARG(label_assign, break_label);
    712a:	687b      	ldr	r3, [r7, #4]
    712c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    712e:	69f9      	ldr	r1, [r7, #28]
    7130:	4618      	mov	r0, r3
    7132:	f003 f8d9 	bl	a2e8 <mp_emit_bc_label_assign>
}
    7136:	3748      	adds	r7, #72	; 0x48
    7138:	46bd      	mov	sp, r7
    713a:	bd80      	pop	{r7, pc}

0000713c <compile_try_except>:

STATIC void compile_try_except(compiler_t *comp, mp_parse_node_t pn_body, int n_except, mp_parse_node_t *pn_excepts, mp_parse_node_t pn_else) {
    713c:	b580      	push	{r7, lr}
    713e:	b08e      	sub	sp, #56	; 0x38
    7140:	af00      	add	r7, sp, #0
    7142:	60f8      	str	r0, [r7, #12]
    7144:	60b9      	str	r1, [r7, #8]
    7146:	607a      	str	r2, [r7, #4]
    7148:	603b      	str	r3, [r7, #0]
    // setup code
    uint l1 = comp_next_label(comp);
    714a:	68f8      	ldr	r0, [r7, #12]
    714c:	f7fd fe24 	bl	4d98 <comp_next_label>
    7150:	6278      	str	r0, [r7, #36]	; 0x24
    uint success_label = comp_next_label(comp);
    7152:	68f8      	ldr	r0, [r7, #12]
    7154:	f7fd fe20 	bl	4d98 <comp_next_label>
    7158:	6238      	str	r0, [r7, #32]

    EMIT_ARG(setup_block, l1, MP_EMIT_SETUP_BLOCK_EXCEPT);
    715a:	68fb      	ldr	r3, [r7, #12]
    715c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    715e:	2202      	movs	r2, #2
    7160:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7162:	4618      	mov	r0, r3
    7164:	f003 fbe4 	bl	a930 <mp_emit_bc_setup_block>
    compile_increase_except_level(comp);
    7168:	68f8      	ldr	r0, [r7, #12]
    716a:	f7fd fe25 	bl	4db8 <compile_increase_except_level>

    compile_node(comp, pn_body); // body
    716e:	68b9      	ldr	r1, [r7, #8]
    7170:	68f8      	ldr	r0, [r7, #12]
    7172:	f001 fc6f 	bl	8a54 <compile_node>
    EMIT(pop_block);
    7176:	68fb      	ldr	r3, [r7, #12]
    7178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    717a:	4618      	mov	r0, r3
    717c:	f003 fc6a 	bl	aa54 <mp_emit_bc_pop_block>
    EMIT_ARG(jump, success_label); // jump over exception handler
    7180:	68fb      	ldr	r3, [r7, #12]
    7182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7184:	6a39      	ldr	r1, [r7, #32]
    7186:	4618      	mov	r0, r3
    7188:	f003 fb3c 	bl	a804 <mp_emit_bc_jump>

    EMIT_ARG(label_assign, l1); // start of exception handler
    718c:	68fb      	ldr	r3, [r7, #12]
    718e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7190:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7192:	4618      	mov	r0, r3
    7194:	f003 f8a8 	bl	a2e8 <mp_emit_bc_label_assign>
    EMIT(start_except_handler);
    7198:	68fb      	ldr	r3, [r7, #12]
    719a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    719c:	4618      	mov	r0, r3
    719e:	f003 fe7f 	bl	aea0 <mp_emit_bc_start_except_handler>

    // at this point the top of the stack contains the exception instance that was raised

    uint l2 = comp_next_label(comp);
    71a2:	68f8      	ldr	r0, [r7, #12]
    71a4:	f7fd fdf8 	bl	4d98 <comp_next_label>
    71a8:	61f8      	str	r0, [r7, #28]

    for (int i = 0; i < n_except; i++) {
    71aa:	2300      	movs	r3, #0
    71ac:	637b      	str	r3, [r7, #52]	; 0x34
    71ae:	e0de      	b.n	736e <compile_try_except+0x232>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pn_excepts[i], PN_try_stmt_except)); // should be
    71b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    71b2:	009b      	lsls	r3, r3, #2
    71b4:	683a      	ldr	r2, [r7, #0]
    71b6:	4413      	add	r3, r2
    71b8:	681b      	ldr	r3, [r3, #0]
    71ba:	2b00      	cmp	r3, #0
    71bc:	d011      	beq.n	71e2 <compile_try_except+0xa6>
    71be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    71c0:	009b      	lsls	r3, r3, #2
    71c2:	683a      	ldr	r2, [r7, #0]
    71c4:	4413      	add	r3, r2
    71c6:	681b      	ldr	r3, [r3, #0]
    71c8:	f003 0303 	and.w	r3, r3, #3
    71cc:	2b00      	cmp	r3, #0
    71ce:	d108      	bne.n	71e2 <compile_try_except+0xa6>
    71d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    71d2:	009b      	lsls	r3, r3, #2
    71d4:	683a      	ldr	r2, [r7, #0]
    71d6:	4413      	add	r3, r2
    71d8:	681b      	ldr	r3, [r3, #0]
    71da:	685b      	ldr	r3, [r3, #4]
    71dc:	b2db      	uxtb	r3, r3
    71de:	2b6e      	cmp	r3, #110	; 0x6e
    71e0:	d006      	beq.n	71f0 <compile_try_except+0xb4>
    71e2:	4b75      	ldr	r3, [pc, #468]	; (73b8 <compile_try_except+0x27c>)
    71e4:	4a75      	ldr	r2, [pc, #468]	; (73bc <compile_try_except+0x280>)
    71e6:	f240 51fe 	movw	r1, #1534	; 0x5fe
    71ea:	4875      	ldr	r0, [pc, #468]	; (73c0 <compile_try_except+0x284>)
    71ec:	f014 f8be 	bl	1b36c <__assert_func>
        mp_parse_node_struct_t *pns_except = (mp_parse_node_struct_t*)pn_excepts[i];
    71f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    71f2:	009b      	lsls	r3, r3, #2
    71f4:	683a      	ldr	r2, [r7, #0]
    71f6:	4413      	add	r3, r2
    71f8:	681b      	ldr	r3, [r3, #0]
    71fa:	61bb      	str	r3, [r7, #24]

        qstr qstr_exception_local = 0;
    71fc:	2300      	movs	r3, #0
    71fe:	633b      	str	r3, [r7, #48]	; 0x30
        uint end_finally_label = comp_next_label(comp);
    7200:	68f8      	ldr	r0, [r7, #12]
    7202:	f7fd fdc9 	bl	4d98 <comp_next_label>
    7206:	6178      	str	r0, [r7, #20]

        if (MP_PARSE_NODE_IS_NULL(pns_except->nodes[0])) {
    7208:	69bb      	ldr	r3, [r7, #24]
    720a:	689b      	ldr	r3, [r3, #8]
    720c:	2b00      	cmp	r3, #0
    720e:	d112      	bne.n	7236 <compile_try_except+0xfa>
            // this is a catch all exception handler
            if (i + 1 != n_except) {
    7210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7212:	1c5a      	adds	r2, r3, #1
    7214:	687b      	ldr	r3, [r7, #4]
    7216:	429a      	cmp	r2, r3
    7218:	d03c      	beq.n	7294 <compile_try_except+0x158>
                compile_syntax_error(comp, pn_excepts[i], "default 'except' must be last");
    721a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    721c:	009b      	lsls	r3, r3, #2
    721e:	683a      	ldr	r2, [r7, #0]
    7220:	4413      	add	r3, r2
    7222:	681b      	ldr	r3, [r3, #0]
    7224:	4a67      	ldr	r2, [pc, #412]	; (73c4 <compile_try_except+0x288>)
    7226:	4619      	mov	r1, r3
    7228:	68f8      	ldr	r0, [r7, #12]
    722a:	f7fd fd99 	bl	4d60 <compile_syntax_error>
                compile_decrease_except_level(comp);
    722e:	68f8      	ldr	r0, [r7, #12]
    7230:	f7fd fdde 	bl	4df0 <compile_decrease_except_level>
                return;
    7234:	e0bd      	b.n	73b2 <compile_try_except+0x276>
            }
        } else {
            // this exception handler requires a match to a certain type of exception
            mp_parse_node_t pns_exception_expr = pns_except->nodes[0];
    7236:	69bb      	ldr	r3, [r7, #24]
    7238:	689b      	ldr	r3, [r3, #8]
    723a:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (MP_PARSE_NODE_IS_STRUCT(pns_exception_expr)) {
    723c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    723e:	2b00      	cmp	r3, #0
    7240:	d012      	beq.n	7268 <compile_try_except+0x12c>
    7242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7244:	f003 0303 	and.w	r3, r3, #3
    7248:	2b00      	cmp	r3, #0
    724a:	d10d      	bne.n	7268 <compile_try_except+0x12c>
                mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pns_exception_expr;
    724c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    724e:	613b      	str	r3, [r7, #16]
                if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_try_stmt_as_name) {
    7250:	693b      	ldr	r3, [r7, #16]
    7252:	685b      	ldr	r3, [r3, #4]
    7254:	b2db      	uxtb	r3, r3
    7256:	2b6f      	cmp	r3, #111	; 0x6f
    7258:	d106      	bne.n	7268 <compile_try_except+0x12c>
                    // handler binds the exception to a local
                    pns_exception_expr = pns3->nodes[0];
    725a:	693b      	ldr	r3, [r7, #16]
    725c:	689b      	ldr	r3, [r3, #8]
    725e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    qstr_exception_local = MP_PARSE_NODE_LEAF_ARG(pns3->nodes[1]);
    7260:	693b      	ldr	r3, [r7, #16]
    7262:	68db      	ldr	r3, [r3, #12]
    7264:	091b      	lsrs	r3, r3, #4
    7266:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }
            EMIT(dup_top);
    7268:	68fb      	ldr	r3, [r7, #12]
    726a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    726c:	4618      	mov	r0, r3
    726e:	f003 fa77 	bl	a760 <mp_emit_bc_dup_top>
            compile_node(comp, pns_exception_expr);
    7272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    7274:	68f8      	ldr	r0, [r7, #12]
    7276:	f001 fbed 	bl	8a54 <compile_node>
            EMIT_ARG(binary_op, MP_BINARY_OP_EXCEPTION_MATCH);
    727a:	68fb      	ldr	r3, [r7, #12]
    727c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    727e:	2108      	movs	r1, #8
    7280:	4618      	mov	r0, r3
    7282:	f003 fc1d 	bl	aac0 <mp_emit_bc_binary_op>
            EMIT_ARG(pop_jump_if, false, end_finally_label);
    7286:	68fb      	ldr	r3, [r7, #12]
    7288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    728a:	697a      	ldr	r2, [r7, #20]
    728c:	2100      	movs	r1, #0
    728e:	4618      	mov	r0, r3
    7290:	f003 faca 	bl	a828 <mp_emit_bc_pop_jump_if>
        }

        // either discard or store the exception instance
        if (qstr_exception_local == 0) {
    7294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7296:	2b00      	cmp	r3, #0
    7298:	d105      	bne.n	72a6 <compile_try_except+0x16a>
            EMIT(pop_top);
    729a:	68fb      	ldr	r3, [r7, #12]
    729c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    729e:	4618      	mov	r0, r3
    72a0:	f003 fa7e 	bl	a7a0 <mp_emit_bc_pop_top>
    72a4:	e003      	b.n	72ae <compile_try_except+0x172>
        } else {
            compile_store_id(comp, qstr_exception_local);
    72a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
    72a8:	68f8      	ldr	r0, [r7, #12]
    72aa:	f7fd fe79 	bl	4fa0 <compile_store_id>
        }

        uint l3 = 0;
    72ae:	2300      	movs	r3, #0
    72b0:	62bb      	str	r3, [r7, #40]	; 0x28
        if (qstr_exception_local != 0) {
    72b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    72b4:	2b00      	cmp	r3, #0
    72b6:	d00d      	beq.n	72d4 <compile_try_except+0x198>
            l3 = comp_next_label(comp);
    72b8:	68f8      	ldr	r0, [r7, #12]
    72ba:	f7fd fd6d 	bl	4d98 <comp_next_label>
    72be:	62b8      	str	r0, [r7, #40]	; 0x28
            EMIT_ARG(setup_block, l3, MP_EMIT_SETUP_BLOCK_FINALLY);
    72c0:	68fb      	ldr	r3, [r7, #12]
    72c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72c4:	2203      	movs	r2, #3
    72c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    72c8:	4618      	mov	r0, r3
    72ca:	f003 fb31 	bl	a930 <mp_emit_bc_setup_block>
            compile_increase_except_level(comp);
    72ce:	68f8      	ldr	r0, [r7, #12]
    72d0:	f7fd fd72 	bl	4db8 <compile_increase_except_level>
        }
        compile_node(comp, pns_except->nodes[1]);
    72d4:	69bb      	ldr	r3, [r7, #24]
    72d6:	68db      	ldr	r3, [r3, #12]
    72d8:	4619      	mov	r1, r3
    72da:	68f8      	ldr	r0, [r7, #12]
    72dc:	f001 fbba 	bl	8a54 <compile_node>
        if (qstr_exception_local != 0) {
    72e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    72e2:	2b00      	cmp	r3, #0
    72e4:	d004      	beq.n	72f0 <compile_try_except+0x1b4>
            EMIT(pop_block);
    72e6:	68fb      	ldr	r3, [r7, #12]
    72e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72ea:	4618      	mov	r0, r3
    72ec:	f003 fbb2 	bl	aa54 <mp_emit_bc_pop_block>
        }
        EMIT(pop_except);
    72f0:	68fb      	ldr	r3, [r7, #12]
    72f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72f4:	4618      	mov	r0, r3
    72f6:	f003 fbbd 	bl	aa74 <mp_emit_bc_pop_except>
        if (qstr_exception_local != 0) {
    72fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    72fc:	2b00      	cmp	r3, #0
    72fe:	d021      	beq.n	7344 <compile_try_except+0x208>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    7300:	68fb      	ldr	r3, [r7, #12]
    7302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7304:	210e      	movs	r1, #14
    7306:	4618      	mov	r0, r3
    7308:	f003 f86c 	bl	a3e4 <mp_emit_bc_load_const_tok>
            EMIT_ARG(label_assign, l3);
    730c:	68fb      	ldr	r3, [r7, #12]
    730e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    7312:	4618      	mov	r0, r3
    7314:	f002 ffe8 	bl	a2e8 <mp_emit_bc_label_assign>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    7318:	68fb      	ldr	r3, [r7, #12]
    731a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    731c:	210e      	movs	r1, #14
    731e:	4618      	mov	r0, r3
    7320:	f003 f860 	bl	a3e4 <mp_emit_bc_load_const_tok>
            compile_store_id(comp, qstr_exception_local);
    7324:	6b39      	ldr	r1, [r7, #48]	; 0x30
    7326:	68f8      	ldr	r0, [r7, #12]
    7328:	f7fd fe3a 	bl	4fa0 <compile_store_id>
            compile_delete_id(comp, qstr_exception_local);
    732c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    732e:	68f8      	ldr	r0, [r7, #12]
    7330:	f7fd fe54 	bl	4fdc <compile_delete_id>

            compile_decrease_except_level(comp);
    7334:	68f8      	ldr	r0, [r7, #12]
    7336:	f7fd fd5b 	bl	4df0 <compile_decrease_except_level>
            EMIT(end_finally);
    733a:	68fb      	ldr	r3, [r7, #12]
    733c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    733e:	4618      	mov	r0, r3
    7340:	f003 fb38 	bl	a9b4 <mp_emit_bc_end_finally>
        }
        EMIT_ARG(jump, l2);
    7344:	68fb      	ldr	r3, [r7, #12]
    7346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7348:	69f9      	ldr	r1, [r7, #28]
    734a:	4618      	mov	r0, r3
    734c:	f003 fa5a 	bl	a804 <mp_emit_bc_jump>
        EMIT_ARG(label_assign, end_finally_label);
    7350:	68fb      	ldr	r3, [r7, #12]
    7352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7354:	6979      	ldr	r1, [r7, #20]
    7356:	4618      	mov	r0, r3
    7358:	f002 ffc6 	bl	a2e8 <mp_emit_bc_label_assign>
        EMIT_ARG(adjust_stack_size, 1); // stack adjust for the exception instance
    735c:	68fb      	ldr	r3, [r7, #12]
    735e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7360:	2101      	movs	r1, #1
    7362:	4618      	mov	r0, r3
    7364:	f002 ff6e 	bl	a244 <mp_emit_bc_adjust_stack_size>
    for (int i = 0; i < n_except; i++) {
    7368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    736a:	3301      	adds	r3, #1
    736c:	637b      	str	r3, [r7, #52]	; 0x34
    736e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    7370:	687b      	ldr	r3, [r7, #4]
    7372:	429a      	cmp	r2, r3
    7374:	f6ff af1c 	blt.w	71b0 <compile_try_except+0x74>
    }

    compile_decrease_except_level(comp);
    7378:	68f8      	ldr	r0, [r7, #12]
    737a:	f7fd fd39 	bl	4df0 <compile_decrease_except_level>
    EMIT(end_finally);
    737e:	68fb      	ldr	r3, [r7, #12]
    7380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7382:	4618      	mov	r0, r3
    7384:	f003 fb16 	bl	a9b4 <mp_emit_bc_end_finally>
    EMIT(end_except_handler);
    7388:	68fb      	ldr	r3, [r7, #12]
    738a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    738c:	4618      	mov	r0, r3
    738e:	f003 fd93 	bl	aeb8 <mp_emit_bc_end_except_handler>

    EMIT_ARG(label_assign, success_label);
    7392:	68fb      	ldr	r3, [r7, #12]
    7394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7396:	6a39      	ldr	r1, [r7, #32]
    7398:	4618      	mov	r0, r3
    739a:	f002 ffa5 	bl	a2e8 <mp_emit_bc_label_assign>
    compile_node(comp, pn_else); // else block, can be null
    739e:	6c39      	ldr	r1, [r7, #64]	; 0x40
    73a0:	68f8      	ldr	r0, [r7, #12]
    73a2:	f001 fb57 	bl	8a54 <compile_node>
    EMIT_ARG(label_assign, l2);
    73a6:	68fb      	ldr	r3, [r7, #12]
    73a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73aa:	69f9      	ldr	r1, [r7, #28]
    73ac:	4618      	mov	r0, r3
    73ae:	f002 ff9b 	bl	a2e8 <mp_emit_bc_label_assign>
}
    73b2:	3738      	adds	r7, #56	; 0x38
    73b4:	46bd      	mov	sp, r7
    73b6:	bd80      	pop	{r7, pc}
    73b8:	0001e7f0 	.word	0x0001e7f0
    73bc:	0001efa8 	.word	0x0001efa8
    73c0:	0001e304 	.word	0x0001e304
    73c4:	0001e830 	.word	0x0001e830

000073c8 <compile_try_finally>:

STATIC void compile_try_finally(compiler_t *comp, mp_parse_node_t pn_body, int n_except, mp_parse_node_t *pn_except, mp_parse_node_t pn_else, mp_parse_node_t pn_finally) {
    73c8:	b580      	push	{r7, lr}
    73ca:	b088      	sub	sp, #32
    73cc:	af02      	add	r7, sp, #8
    73ce:	60f8      	str	r0, [r7, #12]
    73d0:	60b9      	str	r1, [r7, #8]
    73d2:	607a      	str	r2, [r7, #4]
    73d4:	603b      	str	r3, [r7, #0]
    uint l_finally_block = comp_next_label(comp);
    73d6:	68f8      	ldr	r0, [r7, #12]
    73d8:	f7fd fcde 	bl	4d98 <comp_next_label>
    73dc:	6178      	str	r0, [r7, #20]

    EMIT_ARG(setup_block, l_finally_block, MP_EMIT_SETUP_BLOCK_FINALLY);
    73de:	68fb      	ldr	r3, [r7, #12]
    73e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73e2:	2203      	movs	r2, #3
    73e4:	6979      	ldr	r1, [r7, #20]
    73e6:	4618      	mov	r0, r3
    73e8:	f003 faa2 	bl	a930 <mp_emit_bc_setup_block>
    compile_increase_except_level(comp);
    73ec:	68f8      	ldr	r0, [r7, #12]
    73ee:	f7fd fce3 	bl	4db8 <compile_increase_except_level>

    if (n_except == 0) {
    73f2:	687b      	ldr	r3, [r7, #4]
    73f4:	2b00      	cmp	r3, #0
    73f6:	d11b      	bne.n	7430 <compile_try_finally+0x68>
        assert(MP_PARSE_NODE_IS_NULL(pn_else));
    73f8:	6a3b      	ldr	r3, [r7, #32]
    73fa:	2b00      	cmp	r3, #0
    73fc:	d006      	beq.n	740c <compile_try_finally+0x44>
    73fe:	4b21      	ldr	r3, [pc, #132]	; (7484 <compile_try_finally+0xbc>)
    7400:	4a21      	ldr	r2, [pc, #132]	; (7488 <compile_try_finally+0xc0>)
    7402:	f240 614d 	movw	r1, #1613	; 0x64d
    7406:	4821      	ldr	r0, [pc, #132]	; (748c <compile_try_finally+0xc4>)
    7408:	f013 ffb0 	bl	1b36c <__assert_func>
        EMIT_ARG(adjust_stack_size, 3); // stack adjust for possible UNWIND_JUMP state
    740c:	68fb      	ldr	r3, [r7, #12]
    740e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7410:	2103      	movs	r1, #3
    7412:	4618      	mov	r0, r3
    7414:	f002 ff16 	bl	a244 <mp_emit_bc_adjust_stack_size>
        compile_node(comp, pn_body);
    7418:	68b9      	ldr	r1, [r7, #8]
    741a:	68f8      	ldr	r0, [r7, #12]
    741c:	f001 fb1a 	bl	8a54 <compile_node>
        EMIT_ARG(adjust_stack_size, -3);
    7420:	68fb      	ldr	r3, [r7, #12]
    7422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7424:	f06f 0102 	mvn.w	r1, #2
    7428:	4618      	mov	r0, r3
    742a:	f002 ff0b 	bl	a244 <mp_emit_bc_adjust_stack_size>
    742e:	e007      	b.n	7440 <compile_try_finally+0x78>
    } else {
        compile_try_except(comp, pn_body, n_except, pn_except, pn_else);
    7430:	6a3b      	ldr	r3, [r7, #32]
    7432:	9300      	str	r3, [sp, #0]
    7434:	683b      	ldr	r3, [r7, #0]
    7436:	687a      	ldr	r2, [r7, #4]
    7438:	68b9      	ldr	r1, [r7, #8]
    743a:	68f8      	ldr	r0, [r7, #12]
    743c:	f7ff fe7e 	bl	713c <compile_try_except>
    }
    EMIT(pop_block);
    7440:	68fb      	ldr	r3, [r7, #12]
    7442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7444:	4618      	mov	r0, r3
    7446:	f003 fb05 	bl	aa54 <mp_emit_bc_pop_block>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    744a:	68fb      	ldr	r3, [r7, #12]
    744c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    744e:	210e      	movs	r1, #14
    7450:	4618      	mov	r0, r3
    7452:	f002 ffc7 	bl	a3e4 <mp_emit_bc_load_const_tok>
    EMIT_ARG(label_assign, l_finally_block);
    7456:	68fb      	ldr	r3, [r7, #12]
    7458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    745a:	6979      	ldr	r1, [r7, #20]
    745c:	4618      	mov	r0, r3
    745e:	f002 ff43 	bl	a2e8 <mp_emit_bc_label_assign>
    compile_node(comp, pn_finally);
    7462:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7464:	68f8      	ldr	r0, [r7, #12]
    7466:	f001 faf5 	bl	8a54 <compile_node>

    compile_decrease_except_level(comp);
    746a:	68f8      	ldr	r0, [r7, #12]
    746c:	f7fd fcc0 	bl	4df0 <compile_decrease_except_level>
    EMIT(end_finally);
    7470:	68fb      	ldr	r3, [r7, #12]
    7472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7474:	4618      	mov	r0, r3
    7476:	f003 fa9d 	bl	a9b4 <mp_emit_bc_end_finally>
}
    747a:	bf00      	nop
    747c:	3718      	adds	r7, #24
    747e:	46bd      	mov	sp, r7
    7480:	bd80      	pop	{r7, pc}
    7482:	bf00      	nop
    7484:	0001e850 	.word	0x0001e850
    7488:	0001efbc 	.word	0x0001efbc
    748c:	0001e304 	.word	0x0001e304

00007490 <compile_try_stmt>:

STATIC void compile_try_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7490:	b580      	push	{r7, lr}
    7492:	b08a      	sub	sp, #40	; 0x28
    7494:	af02      	add	r7, sp, #8
    7496:	6078      	str	r0, [r7, #4]
    7498:	6039      	str	r1, [r7, #0]
    assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])); // should be
    749a:	683b      	ldr	r3, [r7, #0]
    749c:	68db      	ldr	r3, [r3, #12]
    749e:	2b00      	cmp	r3, #0
    74a0:	d005      	beq.n	74ae <compile_try_stmt+0x1e>
    74a2:	683b      	ldr	r3, [r7, #0]
    74a4:	68db      	ldr	r3, [r3, #12]
    74a6:	f003 0303 	and.w	r3, r3, #3
    74aa:	2b00      	cmp	r3, #0
    74ac:	d006      	beq.n	74bc <compile_try_stmt+0x2c>
    74ae:	4b30      	ldr	r3, [pc, #192]	; (7570 <compile_try_stmt+0xe0>)
    74b0:	4a30      	ldr	r2, [pc, #192]	; (7574 <compile_try_stmt+0xe4>)
    74b2:	f240 615e 	movw	r1, #1630	; 0x65e
    74b6:	4830      	ldr	r0, [pc, #192]	; (7578 <compile_try_stmt+0xe8>)
    74b8:	f013 ff58 	bl	1b36c <__assert_func>
    {
        mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[1];
    74bc:	683b      	ldr	r3, [r7, #0]
    74be:	68db      	ldr	r3, [r3, #12]
    74c0:	61fb      	str	r3, [r7, #28]
        if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_try_stmt_finally) {
    74c2:	69fb      	ldr	r3, [r7, #28]
    74c4:	685b      	ldr	r3, [r3, #4]
    74c6:	b2db      	uxtb	r3, r3
    74c8:	2b71      	cmp	r3, #113	; 0x71
    74ca:	d10c      	bne.n	74e6 <compile_try_stmt+0x56>
            // just try-finally
            compile_try_finally(comp, pns->nodes[0], 0, NULL, MP_PARSE_NODE_NULL, pns2->nodes[0]);
    74cc:	683b      	ldr	r3, [r7, #0]
    74ce:	6899      	ldr	r1, [r3, #8]
    74d0:	69fb      	ldr	r3, [r7, #28]
    74d2:	689b      	ldr	r3, [r3, #8]
    74d4:	9301      	str	r3, [sp, #4]
    74d6:	2300      	movs	r3, #0
    74d8:	9300      	str	r3, [sp, #0]
    74da:	2300      	movs	r3, #0
    74dc:	2200      	movs	r2, #0
    74de:	6878      	ldr	r0, [r7, #4]
    74e0:	f7ff ff72 	bl	73c8 <compile_try_finally>
            mp_parse_node_t *pn_excepts;
            int n_except = mp_parse_node_extract_list(&pns->nodes[1], PN_try_stmt_except_list, &pn_excepts);
            compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, MP_PARSE_NODE_NULL);
        }
    }
}
    74e4:	e040      	b.n	7568 <compile_try_stmt+0xd8>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_try_stmt_except_and_more) {
    74e6:	69fb      	ldr	r3, [r7, #28]
    74e8:	685b      	ldr	r3, [r3, #4]
    74ea:	b2db      	uxtb	r3, r3
    74ec:	2b6d      	cmp	r3, #109	; 0x6d
    74ee:	d128      	bne.n	7542 <compile_try_stmt+0xb2>
            int n_except = mp_parse_node_extract_list(&pns2->nodes[0], PN_try_stmt_except_list, &pn_excepts);
    74f0:	69fb      	ldr	r3, [r7, #28]
    74f2:	3308      	adds	r3, #8
    74f4:	f107 0210 	add.w	r2, r7, #16
    74f8:	2170      	movs	r1, #112	; 0x70
    74fa:	4618      	mov	r0, r3
    74fc:	f7fc fb36 	bl	3b6c <mp_parse_node_extract_list>
    7500:	61b8      	str	r0, [r7, #24]
            if (MP_PARSE_NODE_IS_NULL(pns2->nodes[2])) {
    7502:	69fb      	ldr	r3, [r7, #28]
    7504:	691b      	ldr	r3, [r3, #16]
    7506:	2b00      	cmp	r3, #0
    7508:	d10b      	bne.n	7522 <compile_try_stmt+0x92>
                compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, pns2->nodes[1]);
    750a:	683b      	ldr	r3, [r7, #0]
    750c:	6899      	ldr	r1, [r3, #8]
    750e:	693a      	ldr	r2, [r7, #16]
    7510:	69fb      	ldr	r3, [r7, #28]
    7512:	68db      	ldr	r3, [r3, #12]
    7514:	9300      	str	r3, [sp, #0]
    7516:	4613      	mov	r3, r2
    7518:	69ba      	ldr	r2, [r7, #24]
    751a:	6878      	ldr	r0, [r7, #4]
    751c:	f7ff fe0e 	bl	713c <compile_try_except>
}
    7520:	e022      	b.n	7568 <compile_try_stmt+0xd8>
                compile_try_finally(comp, pns->nodes[0], n_except, pn_excepts, pns2->nodes[1], ((mp_parse_node_struct_t*)pns2->nodes[2])->nodes[0]);
    7522:	683b      	ldr	r3, [r7, #0]
    7524:	6899      	ldr	r1, [r3, #8]
    7526:	6938      	ldr	r0, [r7, #16]
    7528:	69fb      	ldr	r3, [r7, #28]
    752a:	68db      	ldr	r3, [r3, #12]
    752c:	69fa      	ldr	r2, [r7, #28]
    752e:	6912      	ldr	r2, [r2, #16]
    7530:	6892      	ldr	r2, [r2, #8]
    7532:	9201      	str	r2, [sp, #4]
    7534:	9300      	str	r3, [sp, #0]
    7536:	4603      	mov	r3, r0
    7538:	69ba      	ldr	r2, [r7, #24]
    753a:	6878      	ldr	r0, [r7, #4]
    753c:	f7ff ff44 	bl	73c8 <compile_try_finally>
}
    7540:	e012      	b.n	7568 <compile_try_stmt+0xd8>
            int n_except = mp_parse_node_extract_list(&pns->nodes[1], PN_try_stmt_except_list, &pn_excepts);
    7542:	683b      	ldr	r3, [r7, #0]
    7544:	330c      	adds	r3, #12
    7546:	f107 020c 	add.w	r2, r7, #12
    754a:	2170      	movs	r1, #112	; 0x70
    754c:	4618      	mov	r0, r3
    754e:	f7fc fb0d 	bl	3b6c <mp_parse_node_extract_list>
    7552:	6178      	str	r0, [r7, #20]
            compile_try_except(comp, pns->nodes[0], n_except, pn_excepts, MP_PARSE_NODE_NULL);
    7554:	683b      	ldr	r3, [r7, #0]
    7556:	6899      	ldr	r1, [r3, #8]
    7558:	68fa      	ldr	r2, [r7, #12]
    755a:	2300      	movs	r3, #0
    755c:	9300      	str	r3, [sp, #0]
    755e:	4613      	mov	r3, r2
    7560:	697a      	ldr	r2, [r7, #20]
    7562:	6878      	ldr	r0, [r7, #4]
    7564:	f7ff fdea 	bl	713c <compile_try_except>
}
    7568:	bf00      	nop
    756a:	3720      	adds	r7, #32
    756c:	46bd      	mov	sp, r7
    756e:	bd80      	pop	{r7, pc}
    7570:	0001e870 	.word	0x0001e870
    7574:	0001efd0 	.word	0x0001efd0
    7578:	0001e304 	.word	0x0001e304

0000757c <compile_with_stmt_helper>:

STATIC void compile_with_stmt_helper(compiler_t *comp, int n, mp_parse_node_t *nodes, mp_parse_node_t body) {
    757c:	b580      	push	{r7, lr}
    757e:	b086      	sub	sp, #24
    7580:	af00      	add	r7, sp, #0
    7582:	60f8      	str	r0, [r7, #12]
    7584:	60b9      	str	r1, [r7, #8]
    7586:	607a      	str	r2, [r7, #4]
    7588:	603b      	str	r3, [r7, #0]
    if (n == 0) {
    758a:	68bb      	ldr	r3, [r7, #8]
    758c:	2b00      	cmp	r3, #0
    758e:	d104      	bne.n	759a <compile_with_stmt_helper+0x1e>
        // no more pre-bits, compile the body of the with
        compile_node(comp, body);
    7590:	6839      	ldr	r1, [r7, #0]
    7592:	68f8      	ldr	r0, [r7, #12]
    7594:	f001 fa5e 	bl	8a54 <compile_node>
        // finish this with block
        EMIT_ARG(with_cleanup, l_end);
        compile_decrease_except_level(comp);
        EMIT(end_finally);
    }
}
    7598:	e056      	b.n	7648 <compile_with_stmt_helper+0xcc>
        uint l_end = comp_next_label(comp);
    759a:	68f8      	ldr	r0, [r7, #12]
    759c:	f7fd fbfc 	bl	4d98 <comp_next_label>
    75a0:	6178      	str	r0, [r7, #20]
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes[0], PN_with_item)) {
    75a2:	687b      	ldr	r3, [r7, #4]
    75a4:	681b      	ldr	r3, [r3, #0]
    75a6:	2b00      	cmp	r3, #0
    75a8:	d023      	beq.n	75f2 <compile_with_stmt_helper+0x76>
    75aa:	687b      	ldr	r3, [r7, #4]
    75ac:	681b      	ldr	r3, [r3, #0]
    75ae:	f003 0303 	and.w	r3, r3, #3
    75b2:	2b00      	cmp	r3, #0
    75b4:	d11d      	bne.n	75f2 <compile_with_stmt_helper+0x76>
    75b6:	687b      	ldr	r3, [r7, #4]
    75b8:	681b      	ldr	r3, [r3, #0]
    75ba:	685b      	ldr	r3, [r3, #4]
    75bc:	b2db      	uxtb	r3, r3
    75be:	2b74      	cmp	r3, #116	; 0x74
    75c0:	d117      	bne.n	75f2 <compile_with_stmt_helper+0x76>
            mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)nodes[0];
    75c2:	687b      	ldr	r3, [r7, #4]
    75c4:	681b      	ldr	r3, [r3, #0]
    75c6:	613b      	str	r3, [r7, #16]
            compile_node(comp, pns->nodes[0]);
    75c8:	693b      	ldr	r3, [r7, #16]
    75ca:	689b      	ldr	r3, [r3, #8]
    75cc:	4619      	mov	r1, r3
    75ce:	68f8      	ldr	r0, [r7, #12]
    75d0:	f001 fa40 	bl	8a54 <compile_node>
            EMIT_ARG(setup_block, l_end, MP_EMIT_SETUP_BLOCK_WITH);
    75d4:	68fb      	ldr	r3, [r7, #12]
    75d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    75d8:	2200      	movs	r2, #0
    75da:	6979      	ldr	r1, [r7, #20]
    75dc:	4618      	mov	r0, r3
    75de:	f003 f9a7 	bl	a930 <mp_emit_bc_setup_block>
            c_assign(comp, pns->nodes[1], ASSIGN_STORE);
    75e2:	693b      	ldr	r3, [r7, #16]
    75e4:	68db      	ldr	r3, [r3, #12]
    75e6:	2200      	movs	r2, #0
    75e8:	4619      	mov	r1, r3
    75ea:	68f8      	ldr	r0, [r7, #12]
    75ec:	f7fd fffc 	bl	55e8 <c_assign>
        if (MP_PARSE_NODE_IS_STRUCT_KIND(nodes[0], PN_with_item)) {
    75f0:	e011      	b.n	7616 <compile_with_stmt_helper+0x9a>
            compile_node(comp, nodes[0]);
    75f2:	687b      	ldr	r3, [r7, #4]
    75f4:	681b      	ldr	r3, [r3, #0]
    75f6:	4619      	mov	r1, r3
    75f8:	68f8      	ldr	r0, [r7, #12]
    75fa:	f001 fa2b 	bl	8a54 <compile_node>
            EMIT_ARG(setup_block, l_end, MP_EMIT_SETUP_BLOCK_WITH);
    75fe:	68fb      	ldr	r3, [r7, #12]
    7600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7602:	2200      	movs	r2, #0
    7604:	6979      	ldr	r1, [r7, #20]
    7606:	4618      	mov	r0, r3
    7608:	f003 f992 	bl	a930 <mp_emit_bc_setup_block>
            EMIT(pop_top);
    760c:	68fb      	ldr	r3, [r7, #12]
    760e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7610:	4618      	mov	r0, r3
    7612:	f003 f8c5 	bl	a7a0 <mp_emit_bc_pop_top>
        compile_increase_except_level(comp);
    7616:	68f8      	ldr	r0, [r7, #12]
    7618:	f7fd fbce 	bl	4db8 <compile_increase_except_level>
        compile_with_stmt_helper(comp, n - 1, nodes + 1, body);
    761c:	68bb      	ldr	r3, [r7, #8]
    761e:	1e59      	subs	r1, r3, #1
    7620:	687b      	ldr	r3, [r7, #4]
    7622:	1d1a      	adds	r2, r3, #4
    7624:	683b      	ldr	r3, [r7, #0]
    7626:	68f8      	ldr	r0, [r7, #12]
    7628:	f7ff ffa8 	bl	757c <compile_with_stmt_helper>
        EMIT_ARG(with_cleanup, l_end);
    762c:	68fb      	ldr	r3, [r7, #12]
    762e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7630:	6979      	ldr	r1, [r7, #20]
    7632:	4618      	mov	r0, r3
    7634:	f003 f99c 	bl	a970 <mp_emit_bc_with_cleanup>
        compile_decrease_except_level(comp);
    7638:	68f8      	ldr	r0, [r7, #12]
    763a:	f7fd fbd9 	bl	4df0 <compile_decrease_except_level>
        EMIT(end_finally);
    763e:	68fb      	ldr	r3, [r7, #12]
    7640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7642:	4618      	mov	r0, r3
    7644:	f003 f9b6 	bl	a9b4 <mp_emit_bc_end_finally>
}
    7648:	bf00      	nop
    764a:	3718      	adds	r7, #24
    764c:	46bd      	mov	sp, r7
    764e:	bd80      	pop	{r7, pc}

00007650 <compile_with_stmt>:

STATIC void compile_with_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7650:	b580      	push	{r7, lr}
    7652:	b084      	sub	sp, #16
    7654:	af00      	add	r7, sp, #0
    7656:	6078      	str	r0, [r7, #4]
    7658:	6039      	str	r1, [r7, #0]
    // get the nodes for the pre-bit of the with (the a as b, c as d, ... bit)
    mp_parse_node_t *nodes;
    int n = mp_parse_node_extract_list(&pns->nodes[0], PN_with_stmt_list, &nodes);
    765a:	683b      	ldr	r3, [r7, #0]
    765c:	3308      	adds	r3, #8
    765e:	f107 0208 	add.w	r2, r7, #8
    7662:	2173      	movs	r1, #115	; 0x73
    7664:	4618      	mov	r0, r3
    7666:	f7fc fa81 	bl	3b6c <mp_parse_node_extract_list>
    766a:	60f8      	str	r0, [r7, #12]
    assert(n > 0);
    766c:	68fb      	ldr	r3, [r7, #12]
    766e:	2b00      	cmp	r3, #0
    7670:	dc06      	bgt.n	7680 <compile_with_stmt+0x30>
    7672:	4b09      	ldr	r3, [pc, #36]	; (7698 <compile_with_stmt+0x48>)
    7674:	4a09      	ldr	r2, [pc, #36]	; (769c <compile_with_stmt+0x4c>)
    7676:	f240 619d 	movw	r1, #1693	; 0x69d
    767a:	4809      	ldr	r0, [pc, #36]	; (76a0 <compile_with_stmt+0x50>)
    767c:	f013 fe76 	bl	1b36c <__assert_func>

    // compile in a nested fashion
    compile_with_stmt_helper(comp, n, nodes, pns->nodes[1]);
    7680:	68ba      	ldr	r2, [r7, #8]
    7682:	683b      	ldr	r3, [r7, #0]
    7684:	68db      	ldr	r3, [r3, #12]
    7686:	68f9      	ldr	r1, [r7, #12]
    7688:	6878      	ldr	r0, [r7, #4]
    768a:	f7ff ff77 	bl	757c <compile_with_stmt_helper>
}
    768e:	bf00      	nop
    7690:	3710      	adds	r7, #16
    7692:	46bd      	mov	sp, r7
    7694:	bd80      	pop	{r7, pc}
    7696:	bf00      	nop
    7698:	0001e898 	.word	0x0001e898
    769c:	0001efe4 	.word	0x0001efe4
    76a0:	0001e304 	.word	0x0001e304

000076a4 <compile_yield_from>:

STATIC void compile_yield_from(compiler_t *comp) {
    76a4:	b580      	push	{r7, lr}
    76a6:	b082      	sub	sp, #8
    76a8:	af00      	add	r7, sp, #0
    76aa:	6078      	str	r0, [r7, #4]
    EMIT_ARG(get_iter, false);
    76ac:	687b      	ldr	r3, [r7, #4]
    76ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    76b0:	2100      	movs	r1, #0
    76b2:	4618      	mov	r0, r3
    76b4:	f003 f990 	bl	a9d8 <mp_emit_bc_get_iter>
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    76b8:	687b      	ldr	r3, [r7, #4]
    76ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    76bc:	210e      	movs	r1, #14
    76be:	4618      	mov	r0, r3
    76c0:	f002 fe90 	bl	a3e4 <mp_emit_bc_load_const_tok>
    EMIT_ARG(yield, MP_EMIT_YIELD_FROM);
    76c4:	687b      	ldr	r3, [r7, #4]
    76c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    76c8:	2101      	movs	r1, #1
    76ca:	4618      	mov	r0, r3
    76cc:	f003 fbc8 	bl	ae60 <mp_emit_bc_yield>
}
    76d0:	bf00      	nop
    76d2:	3708      	adds	r7, #8
    76d4:	46bd      	mov	sp, r7
    76d6:	bd80      	pop	{r7, pc}

000076d8 <compile_expr_stmt>:
        compile_async_with_stmt(comp, pns0);
    }
}
#endif

STATIC void compile_expr_stmt(compiler_t *comp, mp_parse_node_struct_t *pns) {
    76d8:	b580      	push	{r7, lr}
    76da:	b088      	sub	sp, #32
    76dc:	af00      	add	r7, sp, #0
    76de:	6078      	str	r0, [r7, #4]
    76e0:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    76e2:	683b      	ldr	r3, [r7, #0]
    76e4:	68db      	ldr	r3, [r3, #12]
    76e6:	2b00      	cmp	r3, #0
    76e8:	d149      	bne.n	777e <compile_expr_stmt+0xa6>
        if (comp->is_repl && comp->scope_cur->kind == SCOPE_MODULE) {
    76ea:	687b      	ldr	r3, [r7, #4]
    76ec:	791b      	ldrb	r3, [r3, #4]
    76ee:	2b00      	cmp	r3, #0
    76f0:	d01b      	beq.n	772a <compile_expr_stmt+0x52>
    76f2:	687b      	ldr	r3, [r7, #4]
    76f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    76f6:	681b      	ldr	r3, [r3, #0]
    76f8:	2b00      	cmp	r3, #0
    76fa:	d116      	bne.n	772a <compile_expr_stmt+0x52>
            // for REPL, evaluate then print the expression
            compile_load_id(comp, MP_QSTR___repl_print__);
    76fc:	2120      	movs	r1, #32
    76fe:	6878      	ldr	r0, [r7, #4]
    7700:	f7fd fc30 	bl	4f64 <compile_load_id>
            compile_node(comp, pns->nodes[0]);
    7704:	683b      	ldr	r3, [r7, #0]
    7706:	689b      	ldr	r3, [r3, #8]
    7708:	4619      	mov	r1, r3
    770a:	6878      	ldr	r0, [r7, #4]
    770c:	f001 f9a2 	bl	8a54 <compile_node>
            EMIT_ARG(call_function, 1, 0, 0);
    7710:	687b      	ldr	r3, [r7, #4]
    7712:	6a98      	ldr	r0, [r3, #40]	; 0x28
    7714:	2300      	movs	r3, #0
    7716:	2200      	movs	r2, #0
    7718:	2101      	movs	r1, #1
    771a:	f003 fb3b 	bl	ad94 <mp_emit_bc_call_function>
            EMIT(pop_top);
    771e:	687b      	ldr	r3, [r7, #4]
    7720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7722:	4618      	mov	r0, r3
    7724:	f003 f83c 	bl	a7a0 <mp_emit_bc_pop_top>
    7728:	e0f7      	b.n	791a <compile_expr_stmt+0x242>

        } else {
            // for non-REPL, evaluate then discard the expression
            if ((MP_PARSE_NODE_IS_LEAF(pns->nodes[0]) && !MP_PARSE_NODE_IS_ID(pns->nodes[0]))
    772a:	683b      	ldr	r3, [r7, #0]
    772c:	689b      	ldr	r3, [r3, #8]
    772e:	f003 0303 	and.w	r3, r3, #3
    7732:	2b00      	cmp	r3, #0
    7734:	d006      	beq.n	7744 <compile_expr_stmt+0x6c>
    7736:	683b      	ldr	r3, [r7, #0]
    7738:	689b      	ldr	r3, [r3, #8]
    773a:	f003 030f 	and.w	r3, r3, #15
    773e:	2b02      	cmp	r3, #2
    7740:	f040 80eb 	bne.w	791a <compile_expr_stmt+0x242>
                || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_const_object)) {
    7744:	683b      	ldr	r3, [r7, #0]
    7746:	689b      	ldr	r3, [r3, #8]
    7748:	2b00      	cmp	r3, #0
    774a:	d00c      	beq.n	7766 <compile_expr_stmt+0x8e>
    774c:	683b      	ldr	r3, [r7, #0]
    774e:	689b      	ldr	r3, [r3, #8]
    7750:	f003 0303 	and.w	r3, r3, #3
    7754:	2b00      	cmp	r3, #0
    7756:	d106      	bne.n	7766 <compile_expr_stmt+0x8e>
    7758:	683b      	ldr	r3, [r7, #0]
    775a:	689b      	ldr	r3, [r3, #8]
    775c:	685b      	ldr	r3, [r3, #4]
    775e:	b2db      	uxtb	r3, r3
    7760:	2b35      	cmp	r3, #53	; 0x35
    7762:	f000 80da 	beq.w	791a <compile_expr_stmt+0x242>
                // do nothing with a lonely constant
            } else {
                compile_node(comp, pns->nodes[0]); // just an expression
    7766:	683b      	ldr	r3, [r7, #0]
    7768:	689b      	ldr	r3, [r3, #8]
    776a:	4619      	mov	r1, r3
    776c:	6878      	ldr	r0, [r7, #4]
    776e:	f001 f971 	bl	8a54 <compile_node>
                EMIT(pop_top); // discard last result since this is a statement and leaves nothing on the stack
    7772:	687b      	ldr	r3, [r7, #4]
    7774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7776:	4618      	mov	r0, r3
    7778:	f003 f812 	bl	a7a0 <mp_emit_bc_pop_top>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
        }
    } else {
        goto plain_assign;
    }
}
    777c:	e0cd      	b.n	791a <compile_expr_stmt+0x242>
    } else if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    777e:	683b      	ldr	r3, [r7, #0]
    7780:	68db      	ldr	r3, [r3, #12]
    7782:	2b00      	cmp	r3, #0
    7784:	f000 80bb 	beq.w	78fe <compile_expr_stmt+0x226>
    7788:	683b      	ldr	r3, [r7, #0]
    778a:	68db      	ldr	r3, [r3, #12]
    778c:	f003 0303 	and.w	r3, r3, #3
    7790:	2b00      	cmp	r3, #0
    7792:	f040 80b4 	bne.w	78fe <compile_expr_stmt+0x226>
        mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    7796:	683b      	ldr	r3, [r7, #0]
    7798:	68db      	ldr	r3, [r3, #12]
    779a:	617b      	str	r3, [r7, #20]
        int kind = MP_PARSE_NODE_STRUCT_KIND(pns1);
    779c:	697b      	ldr	r3, [r7, #20]
    779e:	685b      	ldr	r3, [r3, #4]
    77a0:	b2db      	uxtb	r3, r3
    77a2:	613b      	str	r3, [r7, #16]
        if (kind == PN_expr_stmt_augassign) {
    77a4:	693b      	ldr	r3, [r7, #16]
    77a6:	2b51      	cmp	r3, #81	; 0x51
    77a8:	d16a      	bne.n	7880 <compile_expr_stmt+0x1a8>
            c_assign(comp, pns->nodes[0], ASSIGN_AUG_LOAD); // lhs load for aug assign
    77aa:	683b      	ldr	r3, [r7, #0]
    77ac:	689b      	ldr	r3, [r3, #8]
    77ae:	2201      	movs	r2, #1
    77b0:	4619      	mov	r1, r3
    77b2:	6878      	ldr	r0, [r7, #4]
    77b4:	f7fd ff18 	bl	55e8 <c_assign>
            compile_node(comp, pns1->nodes[1]); // rhs
    77b8:	697b      	ldr	r3, [r7, #20]
    77ba:	68db      	ldr	r3, [r3, #12]
    77bc:	4619      	mov	r1, r3
    77be:	6878      	ldr	r0, [r7, #4]
    77c0:	f001 f948 	bl	8a54 <compile_node>
            assert(MP_PARSE_NODE_IS_TOKEN(pns1->nodes[0]));
    77c4:	697b      	ldr	r3, [r7, #20]
    77c6:	689b      	ldr	r3, [r3, #8]
    77c8:	f003 030f 	and.w	r3, r3, #15
    77cc:	2b0e      	cmp	r3, #14
    77ce:	d006      	beq.n	77de <compile_expr_stmt+0x106>
    77d0:	4b54      	ldr	r3, [pc, #336]	; (7924 <compile_expr_stmt+0x24c>)
    77d2:	4a55      	ldr	r2, [pc, #340]	; (7928 <compile_expr_stmt+0x250>)
    77d4:	f240 7171 	movw	r1, #1905	; 0x771
    77d8:	4854      	ldr	r0, [pc, #336]	; (792c <compile_expr_stmt+0x254>)
    77da:	f013 fdc7 	bl	1b36c <__assert_func>
            switch (MP_PARSE_NODE_LEAF_ARG(pns1->nodes[0])) {
    77de:	697b      	ldr	r3, [r7, #20]
    77e0:	689b      	ldr	r3, [r3, #8]
    77e2:	091b      	lsrs	r3, r3, #4
    77e4:	3b4e      	subs	r3, #78	; 0x4e
    77e6:	2b0a      	cmp	r3, #10
    77e8:	d839      	bhi.n	785e <compile_expr_stmt+0x186>
    77ea:	a201      	add	r2, pc, #4	; (adr r2, 77f0 <compile_expr_stmt+0x118>)
    77ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    77f0:	0000783b 	.word	0x0000783b
    77f4:	00007841 	.word	0x00007841
    77f8:	00007847 	.word	0x00007847
    77fc:	00007853 	.word	0x00007853
    7800:	0000784d 	.word	0x0000784d
    7804:	00007859 	.word	0x00007859
    7808:	00007829 	.word	0x00007829
    780c:	0000781d 	.word	0x0000781d
    7810:	00007823 	.word	0x00007823
    7814:	00007835 	.word	0x00007835
    7818:	0000782f 	.word	0x0000782f
                case MP_TOKEN_DEL_PIPE_EQUAL: op = MP_BINARY_OP_INPLACE_OR; break;
    781c:	2309      	movs	r3, #9
    781e:	61fb      	str	r3, [r7, #28]
    7820:	e020      	b.n	7864 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_CARET_EQUAL: op = MP_BINARY_OP_INPLACE_XOR; break;
    7822:	230a      	movs	r3, #10
    7824:	61fb      	str	r3, [r7, #28]
    7826:	e01d      	b.n	7864 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_AMPERSAND_EQUAL: op = MP_BINARY_OP_INPLACE_AND; break;
    7828:	230b      	movs	r3, #11
    782a:	61fb      	str	r3, [r7, #28]
    782c:	e01a      	b.n	7864 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_LESS_EQUAL: op = MP_BINARY_OP_INPLACE_LSHIFT; break;
    782e:	230c      	movs	r3, #12
    7830:	61fb      	str	r3, [r7, #28]
    7832:	e017      	b.n	7864 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_MORE_EQUAL: op = MP_BINARY_OP_INPLACE_RSHIFT; break;
    7834:	230d      	movs	r3, #13
    7836:	61fb      	str	r3, [r7, #28]
    7838:	e014      	b.n	7864 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_PLUS_EQUAL: op = MP_BINARY_OP_INPLACE_ADD; break;
    783a:	230e      	movs	r3, #14
    783c:	61fb      	str	r3, [r7, #28]
    783e:	e011      	b.n	7864 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_MINUS_EQUAL: op = MP_BINARY_OP_INPLACE_SUBTRACT; break;
    7840:	230f      	movs	r3, #15
    7842:	61fb      	str	r3, [r7, #28]
    7844:	e00e      	b.n	7864 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_STAR_EQUAL: op = MP_BINARY_OP_INPLACE_MULTIPLY; break;
    7846:	2310      	movs	r3, #16
    7848:	61fb      	str	r3, [r7, #28]
    784a:	e00b      	b.n	7864 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_SLASH_EQUAL: op = MP_BINARY_OP_INPLACE_FLOOR_DIVIDE; break;
    784c:	2311      	movs	r3, #17
    784e:	61fb      	str	r3, [r7, #28]
    7850:	e008      	b.n	7864 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_SLASH_EQUAL: op = MP_BINARY_OP_INPLACE_TRUE_DIVIDE; break;
    7852:	2312      	movs	r3, #18
    7854:	61fb      	str	r3, [r7, #28]
    7856:	e005      	b.n	7864 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_PERCENT_EQUAL: op = MP_BINARY_OP_INPLACE_MODULO; break;
    7858:	2313      	movs	r3, #19
    785a:	61fb      	str	r3, [r7, #28]
    785c:	e002      	b.n	7864 <compile_expr_stmt+0x18c>
                case MP_TOKEN_DEL_DBL_STAR_EQUAL: default: op = MP_BINARY_OP_INPLACE_POWER; break;
    785e:	2314      	movs	r3, #20
    7860:	61fb      	str	r3, [r7, #28]
    7862:	bf00      	nop
            EMIT_ARG(binary_op, op);
    7864:	687b      	ldr	r3, [r7, #4]
    7866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7868:	69f9      	ldr	r1, [r7, #28]
    786a:	4618      	mov	r0, r3
    786c:	f003 f928 	bl	aac0 <mp_emit_bc_binary_op>
            c_assign(comp, pns->nodes[0], ASSIGN_AUG_STORE); // lhs store for aug assign
    7870:	683b      	ldr	r3, [r7, #0]
    7872:	689b      	ldr	r3, [r3, #8]
    7874:	2202      	movs	r2, #2
    7876:	4619      	mov	r1, r3
    7878:	6878      	ldr	r0, [r7, #4]
    787a:	f7fd feb5 	bl	55e8 <c_assign>
}
    787e:	e04c      	b.n	791a <compile_expr_stmt+0x242>
        } else if (kind == PN_expr_stmt_assign_list) {
    7880:	693b      	ldr	r3, [r7, #16]
    7882:	2b52      	cmp	r3, #82	; 0x52
    7884:	d13b      	bne.n	78fe <compile_expr_stmt+0x226>
            int rhs = MP_PARSE_NODE_STRUCT_NUM_NODES(pns1) - 1;
    7886:	697b      	ldr	r3, [r7, #20]
    7888:	685b      	ldr	r3, [r3, #4]
    788a:	0a1b      	lsrs	r3, r3, #8
    788c:	3b01      	subs	r3, #1
    788e:	60fb      	str	r3, [r7, #12]
            compile_node(comp, pns1->nodes[rhs]); // rhs
    7890:	697b      	ldr	r3, [r7, #20]
    7892:	68fa      	ldr	r2, [r7, #12]
    7894:	3202      	adds	r2, #2
    7896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    789a:	4619      	mov	r1, r3
    789c:	6878      	ldr	r0, [r7, #4]
    789e:	f001 f8d9 	bl	8a54 <compile_node>
            if (rhs > 0) {
    78a2:	68fb      	ldr	r3, [r7, #12]
    78a4:	2b00      	cmp	r3, #0
    78a6:	dd04      	ble.n	78b2 <compile_expr_stmt+0x1da>
                EMIT(dup_top);
    78a8:	687b      	ldr	r3, [r7, #4]
    78aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    78ac:	4618      	mov	r0, r3
    78ae:	f002 ff57 	bl	a760 <mp_emit_bc_dup_top>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
    78b2:	683b      	ldr	r3, [r7, #0]
    78b4:	689b      	ldr	r3, [r3, #8]
    78b6:	2200      	movs	r2, #0
    78b8:	4619      	mov	r1, r3
    78ba:	6878      	ldr	r0, [r7, #4]
    78bc:	f7fd fe94 	bl	55e8 <c_assign>
            for (int i = 0; i < rhs; i++) {
    78c0:	2300      	movs	r3, #0
    78c2:	61bb      	str	r3, [r7, #24]
    78c4:	e016      	b.n	78f4 <compile_expr_stmt+0x21c>
                if (i + 1 < rhs) {
    78c6:	69bb      	ldr	r3, [r7, #24]
    78c8:	1c5a      	adds	r2, r3, #1
    78ca:	68fb      	ldr	r3, [r7, #12]
    78cc:	429a      	cmp	r2, r3
    78ce:	da04      	bge.n	78da <compile_expr_stmt+0x202>
                    EMIT(dup_top);
    78d0:	687b      	ldr	r3, [r7, #4]
    78d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    78d4:	4618      	mov	r0, r3
    78d6:	f002 ff43 	bl	a760 <mp_emit_bc_dup_top>
                c_assign(comp, pns1->nodes[i], ASSIGN_STORE); // middle store
    78da:	697b      	ldr	r3, [r7, #20]
    78dc:	69ba      	ldr	r2, [r7, #24]
    78de:	3202      	adds	r2, #2
    78e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    78e4:	2200      	movs	r2, #0
    78e6:	4619      	mov	r1, r3
    78e8:	6878      	ldr	r0, [r7, #4]
    78ea:	f7fd fe7d 	bl	55e8 <c_assign>
            for (int i = 0; i < rhs; i++) {
    78ee:	69bb      	ldr	r3, [r7, #24]
    78f0:	3301      	adds	r3, #1
    78f2:	61bb      	str	r3, [r7, #24]
    78f4:	69ba      	ldr	r2, [r7, #24]
    78f6:	68fb      	ldr	r3, [r7, #12]
    78f8:	429a      	cmp	r2, r3
    78fa:	dbe4      	blt.n	78c6 <compile_expr_stmt+0x1ee>
}
    78fc:	e00d      	b.n	791a <compile_expr_stmt+0x242>
            compile_node(comp, pns->nodes[1]); // rhs
    78fe:	683b      	ldr	r3, [r7, #0]
    7900:	68db      	ldr	r3, [r3, #12]
    7902:	4619      	mov	r1, r3
    7904:	6878      	ldr	r0, [r7, #4]
    7906:	f001 f8a5 	bl	8a54 <compile_node>
            c_assign(comp, pns->nodes[0], ASSIGN_STORE); // lhs store
    790a:	683b      	ldr	r3, [r7, #0]
    790c:	689b      	ldr	r3, [r3, #8]
    790e:	2200      	movs	r2, #0
    7910:	4619      	mov	r1, r3
    7912:	6878      	ldr	r0, [r7, #4]
    7914:	f7fd fe68 	bl	55e8 <c_assign>
}
    7918:	e7ff      	b.n	791a <compile_expr_stmt+0x242>
    791a:	bf00      	nop
    791c:	3720      	adds	r7, #32
    791e:	46bd      	mov	sp, r7
    7920:	bd80      	pop	{r7, pc}
    7922:	bf00      	nop
    7924:	0001e8a0 	.word	0x0001e8a0
    7928:	0001eff8 	.word	0x0001eff8
    792c:	0001e304 	.word	0x0001e304

00007930 <c_binary_op>:

STATIC void c_binary_op(compiler_t *comp, mp_parse_node_struct_t *pns, mp_binary_op_t binary_op) {
    7930:	b580      	push	{r7, lr}
    7932:	b086      	sub	sp, #24
    7934:	af00      	add	r7, sp, #0
    7936:	60f8      	str	r0, [r7, #12]
    7938:	60b9      	str	r1, [r7, #8]
    793a:	607a      	str	r2, [r7, #4]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    793c:	68bb      	ldr	r3, [r7, #8]
    793e:	685b      	ldr	r3, [r3, #4]
    7940:	0a1b      	lsrs	r3, r3, #8
    7942:	613b      	str	r3, [r7, #16]
    compile_node(comp, pns->nodes[0]);
    7944:	68bb      	ldr	r3, [r7, #8]
    7946:	689b      	ldr	r3, [r3, #8]
    7948:	4619      	mov	r1, r3
    794a:	68f8      	ldr	r0, [r7, #12]
    794c:	f001 f882 	bl	8a54 <compile_node>
    for (int i = 1; i < num_nodes; i += 1) {
    7950:	2301      	movs	r3, #1
    7952:	617b      	str	r3, [r7, #20]
    7954:	e011      	b.n	797a <c_binary_op+0x4a>
        compile_node(comp, pns->nodes[i]);
    7956:	68bb      	ldr	r3, [r7, #8]
    7958:	697a      	ldr	r2, [r7, #20]
    795a:	3202      	adds	r2, #2
    795c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7960:	4619      	mov	r1, r3
    7962:	68f8      	ldr	r0, [r7, #12]
    7964:	f001 f876 	bl	8a54 <compile_node>
        EMIT_ARG(binary_op, binary_op);
    7968:	68fb      	ldr	r3, [r7, #12]
    796a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    796c:	6879      	ldr	r1, [r7, #4]
    796e:	4618      	mov	r0, r3
    7970:	f003 f8a6 	bl	aac0 <mp_emit_bc_binary_op>
    for (int i = 1; i < num_nodes; i += 1) {
    7974:	697b      	ldr	r3, [r7, #20]
    7976:	3301      	adds	r3, #1
    7978:	617b      	str	r3, [r7, #20]
    797a:	697a      	ldr	r2, [r7, #20]
    797c:	693b      	ldr	r3, [r7, #16]
    797e:	429a      	cmp	r2, r3
    7980:	dbe9      	blt.n	7956 <c_binary_op+0x26>
    }
}
    7982:	bf00      	nop
    7984:	3718      	adds	r7, #24
    7986:	46bd      	mov	sp, r7
    7988:	bd80      	pop	{r7, pc}
    798a:	bf00      	nop

0000798c <compile_test_if_expr>:

STATIC void compile_test_if_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    798c:	b580      	push	{r7, lr}
    798e:	b086      	sub	sp, #24
    7990:	af00      	add	r7, sp, #0
    7992:	6078      	str	r0, [r7, #4]
    7994:	6039      	str	r1, [r7, #0]
    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_test_if_else));
    7996:	683b      	ldr	r3, [r7, #0]
    7998:	68db      	ldr	r3, [r3, #12]
    799a:	2b00      	cmp	r3, #0
    799c:	d00b      	beq.n	79b6 <compile_test_if_expr+0x2a>
    799e:	683b      	ldr	r3, [r7, #0]
    79a0:	68db      	ldr	r3, [r3, #12]
    79a2:	f003 0303 	and.w	r3, r3, #3
    79a6:	2b00      	cmp	r3, #0
    79a8:	d105      	bne.n	79b6 <compile_test_if_expr+0x2a>
    79aa:	683b      	ldr	r3, [r7, #0]
    79ac:	68db      	ldr	r3, [r3, #12]
    79ae:	685b      	ldr	r3, [r3, #4]
    79b0:	b2db      	uxtb	r3, r3
    79b2:	2b79      	cmp	r3, #121	; 0x79
    79b4:	d006      	beq.n	79c4 <compile_test_if_expr+0x38>
    79b6:	4b21      	ldr	r3, [pc, #132]	; (7a3c <compile_test_if_expr+0xb0>)
    79b8:	4a21      	ldr	r2, [pc, #132]	; (7a40 <compile_test_if_expr+0xb4>)
    79ba:	f240 71d1 	movw	r1, #2001	; 0x7d1
    79be:	4821      	ldr	r0, [pc, #132]	; (7a44 <compile_test_if_expr+0xb8>)
    79c0:	f013 fcd4 	bl	1b36c <__assert_func>
    mp_parse_node_struct_t *pns_test_if_else = (mp_parse_node_struct_t*)pns->nodes[1];
    79c4:	683b      	ldr	r3, [r7, #0]
    79c6:	68db      	ldr	r3, [r3, #12]
    79c8:	617b      	str	r3, [r7, #20]

    uint l_fail = comp_next_label(comp);
    79ca:	6878      	ldr	r0, [r7, #4]
    79cc:	f7fd f9e4 	bl	4d98 <comp_next_label>
    79d0:	6138      	str	r0, [r7, #16]
    uint l_end = comp_next_label(comp);
    79d2:	6878      	ldr	r0, [r7, #4]
    79d4:	f7fd f9e0 	bl	4d98 <comp_next_label>
    79d8:	60f8      	str	r0, [r7, #12]
    c_if_cond(comp, pns_test_if_else->nodes[0], false, l_fail); // condition
    79da:	697b      	ldr	r3, [r7, #20]
    79dc:	6899      	ldr	r1, [r3, #8]
    79de:	693b      	ldr	r3, [r7, #16]
    79e0:	2200      	movs	r2, #0
    79e2:	6878      	ldr	r0, [r7, #4]
    79e4:	f7fd fb62 	bl	50ac <c_if_cond>
    compile_node(comp, pns->nodes[0]); // success value
    79e8:	683b      	ldr	r3, [r7, #0]
    79ea:	689b      	ldr	r3, [r3, #8]
    79ec:	4619      	mov	r1, r3
    79ee:	6878      	ldr	r0, [r7, #4]
    79f0:	f001 f830 	bl	8a54 <compile_node>
    EMIT_ARG(jump, l_end);
    79f4:	687b      	ldr	r3, [r7, #4]
    79f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    79f8:	68f9      	ldr	r1, [r7, #12]
    79fa:	4618      	mov	r0, r3
    79fc:	f002 ff02 	bl	a804 <mp_emit_bc_jump>
    EMIT_ARG(label_assign, l_fail);
    7a00:	687b      	ldr	r3, [r7, #4]
    7a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7a04:	6939      	ldr	r1, [r7, #16]
    7a06:	4618      	mov	r0, r3
    7a08:	f002 fc6e 	bl	a2e8 <mp_emit_bc_label_assign>
    EMIT_ARG(adjust_stack_size, -1); // adjust stack size
    7a0c:	687b      	ldr	r3, [r7, #4]
    7a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7a10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7a14:	4618      	mov	r0, r3
    7a16:	f002 fc15 	bl	a244 <mp_emit_bc_adjust_stack_size>
    compile_node(comp, pns_test_if_else->nodes[1]); // failure value
    7a1a:	697b      	ldr	r3, [r7, #20]
    7a1c:	68db      	ldr	r3, [r3, #12]
    7a1e:	4619      	mov	r1, r3
    7a20:	6878      	ldr	r0, [r7, #4]
    7a22:	f001 f817 	bl	8a54 <compile_node>
    EMIT_ARG(label_assign, l_end);
    7a26:	687b      	ldr	r3, [r7, #4]
    7a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7a2a:	68f9      	ldr	r1, [r7, #12]
    7a2c:	4618      	mov	r0, r3
    7a2e:	f002 fc5b 	bl	a2e8 <mp_emit_bc_label_assign>
}
    7a32:	bf00      	nop
    7a34:	3718      	adds	r7, #24
    7a36:	46bd      	mov	sp, r7
    7a38:	bd80      	pop	{r7, pc}
    7a3a:	bf00      	nop
    7a3c:	0001e8c8 	.word	0x0001e8c8
    7a40:	0001f00c 	.word	0x0001f00c
    7a44:	0001e304 	.word	0x0001e304

00007a48 <compile_lambdef>:

STATIC void compile_lambdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7a48:	b580      	push	{r7, lr}
    7a4a:	b084      	sub	sp, #16
    7a4c:	af00      	add	r7, sp, #0
    7a4e:	6078      	str	r0, [r7, #4]
    7a50:	6039      	str	r1, [r7, #0]
    if (comp->pass == MP_PASS_SCOPE) {
    7a52:	687b      	ldr	r3, [r7, #4]
    7a54:	795b      	ldrb	r3, [r3, #5]
    7a56:	2b01      	cmp	r3, #1
    7a58:	d10b      	bne.n	7a72 <compile_lambdef+0x2a>
        // create a new scope for this lambda
        scope_t *s = scope_new_and_link(comp, SCOPE_LAMBDA, (mp_parse_node_t)pns, comp->scope_cur->emit_options);
    7a5a:	683a      	ldr	r2, [r7, #0]
    7a5c:	687b      	ldr	r3, [r7, #4]
    7a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7a60:	7e5b      	ldrb	r3, [r3, #25]
    7a62:	2102      	movs	r1, #2
    7a64:	6878      	ldr	r0, [r7, #4]
    7a66:	f7fd f9e1 	bl	4e2c <scope_new_and_link>
    7a6a:	60f8      	str	r0, [r7, #12]
        // store the lambda scope so the compiling function (this one) can use it at each pass
        pns->nodes[2] = (mp_parse_node_t)s;
    7a6c:	68fa      	ldr	r2, [r7, #12]
    7a6e:	683b      	ldr	r3, [r7, #0]
    7a70:	611a      	str	r2, [r3, #16]
    }

    // get the scope for this lambda
    scope_t *this_scope = (scope_t*)pns->nodes[2];
    7a72:	683b      	ldr	r3, [r7, #0]
    7a74:	691b      	ldr	r3, [r3, #16]
    7a76:	60bb      	str	r3, [r7, #8]

    // compile the lambda definition
    compile_funcdef_lambdef(comp, this_scope, pns->nodes[0], PN_varargslist);
    7a78:	683b      	ldr	r3, [r7, #0]
    7a7a:	689a      	ldr	r2, [r3, #8]
    7a7c:	2346      	movs	r3, #70	; 0x46
    7a7e:	68b9      	ldr	r1, [r7, #8]
    7a80:	6878      	ldr	r0, [r7, #4]
    7a82:	f7fe f80b 	bl	5a9c <compile_funcdef_lambdef>
}
    7a86:	bf00      	nop
    7a88:	3710      	adds	r7, #16
    7a8a:	46bd      	mov	sp, r7
    7a8c:	bd80      	pop	{r7, pc}
    7a8e:	bf00      	nop

00007a90 <compile_or_and_test>:

STATIC void compile_or_and_test(compiler_t *comp, mp_parse_node_struct_t *pns, bool cond) {
    7a90:	b580      	push	{r7, lr}
    7a92:	b088      	sub	sp, #32
    7a94:	af00      	add	r7, sp, #0
    7a96:	60f8      	str	r0, [r7, #12]
    7a98:	60b9      	str	r1, [r7, #8]
    7a9a:	4613      	mov	r3, r2
    7a9c:	71fb      	strb	r3, [r7, #7]
    uint l_end = comp_next_label(comp);
    7a9e:	68f8      	ldr	r0, [r7, #12]
    7aa0:	f7fd f97a 	bl	4d98 <comp_next_label>
    7aa4:	61b8      	str	r0, [r7, #24]
    int n = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7aa6:	68bb      	ldr	r3, [r7, #8]
    7aa8:	685b      	ldr	r3, [r3, #4]
    7aaa:	0a1b      	lsrs	r3, r3, #8
    7aac:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < n; i += 1) {
    7aae:	2300      	movs	r3, #0
    7ab0:	61fb      	str	r3, [r7, #28]
    7ab2:	e017      	b.n	7ae4 <compile_or_and_test+0x54>
        compile_node(comp, pns->nodes[i]);
    7ab4:	68bb      	ldr	r3, [r7, #8]
    7ab6:	69fa      	ldr	r2, [r7, #28]
    7ab8:	3202      	adds	r2, #2
    7aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7abe:	4619      	mov	r1, r3
    7ac0:	68f8      	ldr	r0, [r7, #12]
    7ac2:	f000 ffc7 	bl	8a54 <compile_node>
        if (i + 1 < n) {
    7ac6:	69fb      	ldr	r3, [r7, #28]
    7ac8:	1c5a      	adds	r2, r3, #1
    7aca:	697b      	ldr	r3, [r7, #20]
    7acc:	429a      	cmp	r2, r3
    7ace:	da06      	bge.n	7ade <compile_or_and_test+0x4e>
            EMIT_ARG(jump_if_or_pop, cond, l_end);
    7ad0:	68fb      	ldr	r3, [r7, #12]
    7ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7ad4:	79f9      	ldrb	r1, [r7, #7]
    7ad6:	69ba      	ldr	r2, [r7, #24]
    7ad8:	4618      	mov	r0, r3
    7ada:	f002 fec3 	bl	a864 <mp_emit_bc_jump_if_or_pop>
    for (int i = 0; i < n; i += 1) {
    7ade:	69fb      	ldr	r3, [r7, #28]
    7ae0:	3301      	adds	r3, #1
    7ae2:	61fb      	str	r3, [r7, #28]
    7ae4:	69fa      	ldr	r2, [r7, #28]
    7ae6:	697b      	ldr	r3, [r7, #20]
    7ae8:	429a      	cmp	r2, r3
    7aea:	dbe3      	blt.n	7ab4 <compile_or_and_test+0x24>
        }
    }
    EMIT_ARG(label_assign, l_end);
    7aec:	68fb      	ldr	r3, [r7, #12]
    7aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7af0:	69b9      	ldr	r1, [r7, #24]
    7af2:	4618      	mov	r0, r3
    7af4:	f002 fbf8 	bl	a2e8 <mp_emit_bc_label_assign>
}
    7af8:	bf00      	nop
    7afa:	3720      	adds	r7, #32
    7afc:	46bd      	mov	sp, r7
    7afe:	bd80      	pop	{r7, pc}

00007b00 <compile_or_test>:

STATIC void compile_or_test(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7b00:	b580      	push	{r7, lr}
    7b02:	b082      	sub	sp, #8
    7b04:	af00      	add	r7, sp, #0
    7b06:	6078      	str	r0, [r7, #4]
    7b08:	6039      	str	r1, [r7, #0]
    compile_or_and_test(comp, pns, true);
    7b0a:	2201      	movs	r2, #1
    7b0c:	6839      	ldr	r1, [r7, #0]
    7b0e:	6878      	ldr	r0, [r7, #4]
    7b10:	f7ff ffbe 	bl	7a90 <compile_or_and_test>
}
    7b14:	bf00      	nop
    7b16:	3708      	adds	r7, #8
    7b18:	46bd      	mov	sp, r7
    7b1a:	bd80      	pop	{r7, pc}

00007b1c <compile_and_test>:

STATIC void compile_and_test(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7b1c:	b580      	push	{r7, lr}
    7b1e:	b082      	sub	sp, #8
    7b20:	af00      	add	r7, sp, #0
    7b22:	6078      	str	r0, [r7, #4]
    7b24:	6039      	str	r1, [r7, #0]
    compile_or_and_test(comp, pns, false);
    7b26:	2200      	movs	r2, #0
    7b28:	6839      	ldr	r1, [r7, #0]
    7b2a:	6878      	ldr	r0, [r7, #4]
    7b2c:	f7ff ffb0 	bl	7a90 <compile_or_and_test>
}
    7b30:	bf00      	nop
    7b32:	3708      	adds	r7, #8
    7b34:	46bd      	mov	sp, r7
    7b36:	bd80      	pop	{r7, pc}

00007b38 <compile_not_test_2>:

STATIC void compile_not_test_2(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7b38:	b580      	push	{r7, lr}
    7b3a:	b082      	sub	sp, #8
    7b3c:	af00      	add	r7, sp, #0
    7b3e:	6078      	str	r0, [r7, #4]
    7b40:	6039      	str	r1, [r7, #0]
    compile_node(comp, pns->nodes[0]);
    7b42:	683b      	ldr	r3, [r7, #0]
    7b44:	689b      	ldr	r3, [r3, #8]
    7b46:	4619      	mov	r1, r3
    7b48:	6878      	ldr	r0, [r7, #4]
    7b4a:	f000 ff83 	bl	8a54 <compile_node>
    EMIT_ARG(unary_op, MP_UNARY_OP_NOT);
    7b4e:	687b      	ldr	r3, [r7, #4]
    7b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7b52:	2103      	movs	r1, #3
    7b54:	4618      	mov	r0, r3
    7b56:	f002 ff9d 	bl	aa94 <mp_emit_bc_unary_op>
}
    7b5a:	bf00      	nop
    7b5c:	3708      	adds	r7, #8
    7b5e:	46bd      	mov	sp, r7
    7b60:	bd80      	pop	{r7, pc}
    7b62:	bf00      	nop

00007b64 <compile_comparison>:

STATIC void compile_comparison(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7b64:	b580      	push	{r7, lr}
    7b66:	b08a      	sub	sp, #40	; 0x28
    7b68:	af00      	add	r7, sp, #0
    7b6a:	6078      	str	r0, [r7, #4]
    7b6c:	6039      	str	r1, [r7, #0]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7b6e:	683b      	ldr	r3, [r7, #0]
    7b70:	685b      	ldr	r3, [r3, #4]
    7b72:	0a1b      	lsrs	r3, r3, #8
    7b74:	61bb      	str	r3, [r7, #24]
    compile_node(comp, pns->nodes[0]);
    7b76:	683b      	ldr	r3, [r7, #0]
    7b78:	689b      	ldr	r3, [r3, #8]
    7b7a:	4619      	mov	r1, r3
    7b7c:	6878      	ldr	r0, [r7, #4]
    7b7e:	f000 ff69 	bl	8a54 <compile_node>
    bool multi = (num_nodes > 3);
    7b82:	69bb      	ldr	r3, [r7, #24]
    7b84:	2b03      	cmp	r3, #3
    7b86:	bfcc      	ite	gt
    7b88:	2301      	movgt	r3, #1
    7b8a:	2300      	movle	r3, #0
    7b8c:	75fb      	strb	r3, [r7, #23]
    uint l_fail = 0;
    7b8e:	2300      	movs	r3, #0
    7b90:	627b      	str	r3, [r7, #36]	; 0x24
    if (multi) {
    7b92:	7dfb      	ldrb	r3, [r7, #23]
    7b94:	2b00      	cmp	r3, #0
    7b96:	d003      	beq.n	7ba0 <compile_comparison+0x3c>
        l_fail = comp_next_label(comp);
    7b98:	6878      	ldr	r0, [r7, #4]
    7b9a:	f7fd f8fd 	bl	4d98 <comp_next_label>
    7b9e:	6278      	str	r0, [r7, #36]	; 0x24
    }
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7ba0:	2301      	movs	r3, #1
    7ba2:	623b      	str	r3, [r7, #32]
    7ba4:	e0b7      	b.n	7d16 <compile_comparison+0x1b2>
        compile_node(comp, pns->nodes[i + 1]);
    7ba6:	6a3b      	ldr	r3, [r7, #32]
    7ba8:	1c5a      	adds	r2, r3, #1
    7baa:	683b      	ldr	r3, [r7, #0]
    7bac:	3202      	adds	r2, #2
    7bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7bb2:	4619      	mov	r1, r3
    7bb4:	6878      	ldr	r0, [r7, #4]
    7bb6:	f000 ff4d 	bl	8a54 <compile_node>
        if (i + 2 < num_nodes) {
    7bba:	6a3b      	ldr	r3, [r7, #32]
    7bbc:	1c9a      	adds	r2, r3, #2
    7bbe:	69bb      	ldr	r3, [r7, #24]
    7bc0:	429a      	cmp	r2, r3
    7bc2:	da09      	bge.n	7bd8 <compile_comparison+0x74>
            EMIT(dup_top);
    7bc4:	687b      	ldr	r3, [r7, #4]
    7bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7bc8:	4618      	mov	r0, r3
    7bca:	f002 fdc9 	bl	a760 <mp_emit_bc_dup_top>
            EMIT(rot_three);
    7bce:	687b      	ldr	r3, [r7, #4]
    7bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7bd2:	4618      	mov	r0, r3
    7bd4:	f002 fe06 	bl	a7e4 <mp_emit_bc_rot_three>
        }
        if (MP_PARSE_NODE_IS_TOKEN(pns->nodes[i])) {
    7bd8:	683b      	ldr	r3, [r7, #0]
    7bda:	6a3a      	ldr	r2, [r7, #32]
    7bdc:	3202      	adds	r2, #2
    7bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7be2:	f003 030f 	and.w	r3, r3, #15
    7be6:	2b0e      	cmp	r3, #14
    7be8:	d140      	bne.n	7c6c <compile_comparison+0x108>
            mp_binary_op_t op;
            switch (MP_PARSE_NODE_LEAF_ARG(pns->nodes[i])) {
    7bea:	683b      	ldr	r3, [r7, #0]
    7bec:	6a3a      	ldr	r2, [r7, #32]
    7bee:	3202      	adds	r2, #2
    7bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7bf4:	091b      	lsrs	r3, r3, #4
    7bf6:	3b36      	subs	r3, #54	; 0x36
    7bf8:	2b0b      	cmp	r3, #11
    7bfa:	d82d      	bhi.n	7c58 <compile_comparison+0xf4>
    7bfc:	a201      	add	r2, pc, #4	; (adr r2, 7c04 <compile_comparison+0xa0>)
    7bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7c02:	bf00      	nop
    7c04:	00007c35 	.word	0x00007c35
    7c08:	00007c59 	.word	0x00007c59
    7c0c:	00007c3b 	.word	0x00007c3b
    7c10:	00007c59 	.word	0x00007c59
    7c14:	00007c59 	.word	0x00007c59
    7c18:	00007c59 	.word	0x00007c59
    7c1c:	00007c59 	.word	0x00007c59
    7c20:	00007c59 	.word	0x00007c59
    7c24:	00007c47 	.word	0x00007c47
    7c28:	00007c4d 	.word	0x00007c4d
    7c2c:	00007c41 	.word	0x00007c41
    7c30:	00007c53 	.word	0x00007c53
                case MP_TOKEN_OP_LESS: op = MP_BINARY_OP_LESS; break;
    7c34:	2300      	movs	r3, #0
    7c36:	61fb      	str	r3, [r7, #28]
    7c38:	e011      	b.n	7c5e <compile_comparison+0xfa>
                case MP_TOKEN_OP_MORE: op = MP_BINARY_OP_MORE; break;
    7c3a:	2301      	movs	r3, #1
    7c3c:	61fb      	str	r3, [r7, #28]
    7c3e:	e00e      	b.n	7c5e <compile_comparison+0xfa>
                case MP_TOKEN_OP_DBL_EQUAL: op = MP_BINARY_OP_EQUAL; break;
    7c40:	2302      	movs	r3, #2
    7c42:	61fb      	str	r3, [r7, #28]
    7c44:	e00b      	b.n	7c5e <compile_comparison+0xfa>
                case MP_TOKEN_OP_LESS_EQUAL: op = MP_BINARY_OP_LESS_EQUAL; break;
    7c46:	2303      	movs	r3, #3
    7c48:	61fb      	str	r3, [r7, #28]
    7c4a:	e008      	b.n	7c5e <compile_comparison+0xfa>
                case MP_TOKEN_OP_MORE_EQUAL: op = MP_BINARY_OP_MORE_EQUAL; break;
    7c4c:	2304      	movs	r3, #4
    7c4e:	61fb      	str	r3, [r7, #28]
    7c50:	e005      	b.n	7c5e <compile_comparison+0xfa>
                case MP_TOKEN_OP_NOT_EQUAL: op = MP_BINARY_OP_NOT_EQUAL; break;
    7c52:	2305      	movs	r3, #5
    7c54:	61fb      	str	r3, [r7, #28]
    7c56:	e002      	b.n	7c5e <compile_comparison+0xfa>
                case MP_TOKEN_KW_IN: default: op = MP_BINARY_OP_IN; break;
    7c58:	2306      	movs	r3, #6
    7c5a:	61fb      	str	r3, [r7, #28]
    7c5c:	bf00      	nop
            }
            EMIT_ARG(binary_op, op);
    7c5e:	687b      	ldr	r3, [r7, #4]
    7c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c62:	69f9      	ldr	r1, [r7, #28]
    7c64:	4618      	mov	r0, r3
    7c66:	f002 ff2b 	bl	aac0 <mp_emit_bc_binary_op>
    7c6a:	e045      	b.n	7cf8 <compile_comparison+0x194>
        } else {
            assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[i])); // should be
    7c6c:	683b      	ldr	r3, [r7, #0]
    7c6e:	6a3a      	ldr	r2, [r7, #32]
    7c70:	3202      	adds	r2, #2
    7c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7c76:	2b00      	cmp	r3, #0
    7c78:	d008      	beq.n	7c8c <compile_comparison+0x128>
    7c7a:	683b      	ldr	r3, [r7, #0]
    7c7c:	6a3a      	ldr	r2, [r7, #32]
    7c7e:	3202      	adds	r2, #2
    7c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7c84:	f003 0303 	and.w	r3, r3, #3
    7c88:	2b00      	cmp	r3, #0
    7c8a:	d006      	beq.n	7c9a <compile_comparison+0x136>
    7c8c:	4b3b      	ldr	r3, [pc, #236]	; (7d7c <compile_comparison+0x218>)
    7c8e:	4a3c      	ldr	r2, [pc, #240]	; (7d80 <compile_comparison+0x21c>)
    7c90:	f640 0122 	movw	r1, #2082	; 0x822
    7c94:	483b      	ldr	r0, [pc, #236]	; (7d84 <compile_comparison+0x220>)
    7c96:	f013 fb69 	bl	1b36c <__assert_func>
            mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[i];
    7c9a:	683b      	ldr	r3, [r7, #0]
    7c9c:	6a3a      	ldr	r2, [r7, #32]
    7c9e:	3202      	adds	r2, #2
    7ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7ca4:	613b      	str	r3, [r7, #16]
            int kind = MP_PARSE_NODE_STRUCT_KIND(pns2);
    7ca6:	693b      	ldr	r3, [r7, #16]
    7ca8:	685b      	ldr	r3, [r3, #4]
    7caa:	b2db      	uxtb	r3, r3
    7cac:	60fb      	str	r3, [r7, #12]
            if (kind == PN_comp_op_not_in) {
    7cae:	68fb      	ldr	r3, [r7, #12]
    7cb0:	2b7d      	cmp	r3, #125	; 0x7d
    7cb2:	d106      	bne.n	7cc2 <compile_comparison+0x15e>
                EMIT_ARG(binary_op, MP_BINARY_OP_NOT_IN);
    7cb4:	687b      	ldr	r3, [r7, #4]
    7cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7cb8:	2124      	movs	r1, #36	; 0x24
    7cba:	4618      	mov	r0, r3
    7cbc:	f002 ff00 	bl	aac0 <mp_emit_bc_binary_op>
    7cc0:	e01a      	b.n	7cf8 <compile_comparison+0x194>
            } else {
                assert(kind == PN_comp_op_is); // should be
    7cc2:	68fb      	ldr	r3, [r7, #12]
    7cc4:	2b7e      	cmp	r3, #126	; 0x7e
    7cc6:	d006      	beq.n	7cd6 <compile_comparison+0x172>
    7cc8:	4b2f      	ldr	r3, [pc, #188]	; (7d88 <compile_comparison+0x224>)
    7cca:	4a2d      	ldr	r2, [pc, #180]	; (7d80 <compile_comparison+0x21c>)
    7ccc:	f640 0128 	movw	r1, #2088	; 0x828
    7cd0:	482c      	ldr	r0, [pc, #176]	; (7d84 <compile_comparison+0x220>)
    7cd2:	f013 fb4b 	bl	1b36c <__assert_func>
                if (MP_PARSE_NODE_IS_NULL(pns2->nodes[0])) {
    7cd6:	693b      	ldr	r3, [r7, #16]
    7cd8:	689b      	ldr	r3, [r3, #8]
    7cda:	2b00      	cmp	r3, #0
    7cdc:	d106      	bne.n	7cec <compile_comparison+0x188>
                    EMIT_ARG(binary_op, MP_BINARY_OP_IS);
    7cde:	687b      	ldr	r3, [r7, #4]
    7ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7ce2:	2107      	movs	r1, #7
    7ce4:	4618      	mov	r0, r3
    7ce6:	f002 feeb 	bl	aac0 <mp_emit_bc_binary_op>
    7cea:	e005      	b.n	7cf8 <compile_comparison+0x194>
                } else {
                    EMIT_ARG(binary_op, MP_BINARY_OP_IS_NOT);
    7cec:	687b      	ldr	r3, [r7, #4]
    7cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7cf0:	2125      	movs	r1, #37	; 0x25
    7cf2:	4618      	mov	r0, r3
    7cf4:	f002 fee4 	bl	aac0 <mp_emit_bc_binary_op>
                }
            }
        }
        if (i + 2 < num_nodes) {
    7cf8:	6a3b      	ldr	r3, [r7, #32]
    7cfa:	1c9a      	adds	r2, r3, #2
    7cfc:	69bb      	ldr	r3, [r7, #24]
    7cfe:	429a      	cmp	r2, r3
    7d00:	da06      	bge.n	7d10 <compile_comparison+0x1ac>
            EMIT_ARG(jump_if_or_pop, false, l_fail);
    7d02:	687b      	ldr	r3, [r7, #4]
    7d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    7d08:	2100      	movs	r1, #0
    7d0a:	4618      	mov	r0, r3
    7d0c:	f002 fdaa 	bl	a864 <mp_emit_bc_jump_if_or_pop>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7d10:	6a3b      	ldr	r3, [r7, #32]
    7d12:	3302      	adds	r3, #2
    7d14:	623b      	str	r3, [r7, #32]
    7d16:	6a3b      	ldr	r3, [r7, #32]
    7d18:	1c5a      	adds	r2, r3, #1
    7d1a:	69bb      	ldr	r3, [r7, #24]
    7d1c:	429a      	cmp	r2, r3
    7d1e:	f6ff af42 	blt.w	7ba6 <compile_comparison+0x42>
        }
    }
    if (multi) {
    7d22:	7dfb      	ldrb	r3, [r7, #23]
    7d24:	2b00      	cmp	r3, #0
    7d26:	d025      	beq.n	7d74 <compile_comparison+0x210>
        uint l_end = comp_next_label(comp);
    7d28:	6878      	ldr	r0, [r7, #4]
    7d2a:	f7fd f835 	bl	4d98 <comp_next_label>
    7d2e:	60b8      	str	r0, [r7, #8]
        EMIT_ARG(jump, l_end);
    7d30:	687b      	ldr	r3, [r7, #4]
    7d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7d34:	68b9      	ldr	r1, [r7, #8]
    7d36:	4618      	mov	r0, r3
    7d38:	f002 fd64 	bl	a804 <mp_emit_bc_jump>
        EMIT_ARG(label_assign, l_fail);
    7d3c:	687b      	ldr	r3, [r7, #4]
    7d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7d40:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7d42:	4618      	mov	r0, r3
    7d44:	f002 fad0 	bl	a2e8 <mp_emit_bc_label_assign>
        EMIT_ARG(adjust_stack_size, 1);
    7d48:	687b      	ldr	r3, [r7, #4]
    7d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7d4c:	2101      	movs	r1, #1
    7d4e:	4618      	mov	r0, r3
    7d50:	f002 fa78 	bl	a244 <mp_emit_bc_adjust_stack_size>
        EMIT(rot_two);
    7d54:	687b      	ldr	r3, [r7, #4]
    7d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7d58:	4618      	mov	r0, r3
    7d5a:	f002 fd33 	bl	a7c4 <mp_emit_bc_rot_two>
        EMIT(pop_top);
    7d5e:	687b      	ldr	r3, [r7, #4]
    7d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7d62:	4618      	mov	r0, r3
    7d64:	f002 fd1c 	bl	a7a0 <mp_emit_bc_pop_top>
        EMIT_ARG(label_assign, l_end);
    7d68:	687b      	ldr	r3, [r7, #4]
    7d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7d6c:	68b9      	ldr	r1, [r7, #8]
    7d6e:	4618      	mov	r0, r3
    7d70:	f002 faba 	bl	a2e8 <mp_emit_bc_label_assign>
    }
}
    7d74:	bf00      	nop
    7d76:	3728      	adds	r7, #40	; 0x28
    7d78:	46bd      	mov	sp, r7
    7d7a:	bd80      	pop	{r7, pc}
    7d7c:	0001e908 	.word	0x0001e908
    7d80:	0001f024 	.word	0x0001f024
    7d84:	0001e304 	.word	0x0001e304
    7d88:	0001e930 	.word	0x0001e930

00007d8c <compile_star_expr>:

STATIC void compile_star_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7d8c:	b580      	push	{r7, lr}
    7d8e:	b082      	sub	sp, #8
    7d90:	af00      	add	r7, sp, #0
    7d92:	6078      	str	r0, [r7, #4]
    7d94:	6039      	str	r1, [r7, #0]
    compile_syntax_error(comp, (mp_parse_node_t)pns, "*x must be assignment target");
    7d96:	683b      	ldr	r3, [r7, #0]
    7d98:	4a04      	ldr	r2, [pc, #16]	; (7dac <compile_star_expr+0x20>)
    7d9a:	4619      	mov	r1, r3
    7d9c:	6878      	ldr	r0, [r7, #4]
    7d9e:	f7fc ffdf 	bl	4d60 <compile_syntax_error>
}
    7da2:	bf00      	nop
    7da4:	3708      	adds	r7, #8
    7da6:	46bd      	mov	sp, r7
    7da8:	bd80      	pop	{r7, pc}
    7daa:	bf00      	nop
    7dac:	0001e948 	.word	0x0001e948

00007db0 <compile_expr>:

STATIC void compile_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7db0:	b580      	push	{r7, lr}
    7db2:	b082      	sub	sp, #8
    7db4:	af00      	add	r7, sp, #0
    7db6:	6078      	str	r0, [r7, #4]
    7db8:	6039      	str	r1, [r7, #0]
    c_binary_op(comp, pns, MP_BINARY_OP_OR);
    7dba:	2215      	movs	r2, #21
    7dbc:	6839      	ldr	r1, [r7, #0]
    7dbe:	6878      	ldr	r0, [r7, #4]
    7dc0:	f7ff fdb6 	bl	7930 <c_binary_op>
}
    7dc4:	bf00      	nop
    7dc6:	3708      	adds	r7, #8
    7dc8:	46bd      	mov	sp, r7
    7dca:	bd80      	pop	{r7, pc}

00007dcc <compile_xor_expr>:

STATIC void compile_xor_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7dcc:	b580      	push	{r7, lr}
    7dce:	b082      	sub	sp, #8
    7dd0:	af00      	add	r7, sp, #0
    7dd2:	6078      	str	r0, [r7, #4]
    7dd4:	6039      	str	r1, [r7, #0]
    c_binary_op(comp, pns, MP_BINARY_OP_XOR);
    7dd6:	2216      	movs	r2, #22
    7dd8:	6839      	ldr	r1, [r7, #0]
    7dda:	6878      	ldr	r0, [r7, #4]
    7ddc:	f7ff fda8 	bl	7930 <c_binary_op>
}
    7de0:	bf00      	nop
    7de2:	3708      	adds	r7, #8
    7de4:	46bd      	mov	sp, r7
    7de6:	bd80      	pop	{r7, pc}

00007de8 <compile_and_expr>:

STATIC void compile_and_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7de8:	b580      	push	{r7, lr}
    7dea:	b082      	sub	sp, #8
    7dec:	af00      	add	r7, sp, #0
    7dee:	6078      	str	r0, [r7, #4]
    7df0:	6039      	str	r1, [r7, #0]
    c_binary_op(comp, pns, MP_BINARY_OP_AND);
    7df2:	2217      	movs	r2, #23
    7df4:	6839      	ldr	r1, [r7, #0]
    7df6:	6878      	ldr	r0, [r7, #4]
    7df8:	f7ff fd9a 	bl	7930 <c_binary_op>
}
    7dfc:	bf00      	nop
    7dfe:	3708      	adds	r7, #8
    7e00:	46bd      	mov	sp, r7
    7e02:	bd80      	pop	{r7, pc}

00007e04 <compile_term>:

STATIC void compile_term(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7e04:	b580      	push	{r7, lr}
    7e06:	b086      	sub	sp, #24
    7e08:	af00      	add	r7, sp, #0
    7e0a:	6078      	str	r0, [r7, #4]
    7e0c:	6039      	str	r1, [r7, #0]
    int num_nodes = MP_PARSE_NODE_STRUCT_NUM_NODES(pns);
    7e0e:	683b      	ldr	r3, [r7, #0]
    7e10:	685b      	ldr	r3, [r3, #4]
    7e12:	0a1b      	lsrs	r3, r3, #8
    7e14:	60fb      	str	r3, [r7, #12]
    compile_node(comp, pns->nodes[0]);
    7e16:	683b      	ldr	r3, [r7, #0]
    7e18:	689b      	ldr	r3, [r3, #8]
    7e1a:	4619      	mov	r1, r3
    7e1c:	6878      	ldr	r0, [r7, #4]
    7e1e:	f000 fe19 	bl	8a54 <compile_node>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7e22:	2301      	movs	r3, #1
    7e24:	617b      	str	r3, [r7, #20]
    7e26:	e054      	b.n	7ed2 <compile_term+0xce>
        compile_node(comp, pns->nodes[i + 1]);
    7e28:	697b      	ldr	r3, [r7, #20]
    7e2a:	1c5a      	adds	r2, r3, #1
    7e2c:	683b      	ldr	r3, [r7, #0]
    7e2e:	3202      	adds	r2, #2
    7e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7e34:	4619      	mov	r1, r3
    7e36:	6878      	ldr	r0, [r7, #4]
    7e38:	f000 fe0c 	bl	8a54 <compile_node>
        mp_binary_op_t op;
        mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(pns->nodes[i]);
    7e3c:	683b      	ldr	r3, [r7, #0]
    7e3e:	697a      	ldr	r2, [r7, #20]
    7e40:	3202      	adds	r2, #2
    7e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7e46:	091b      	lsrs	r3, r3, #4
    7e48:	60bb      	str	r3, [r7, #8]
        switch (tok) {
    7e4a:	68bb      	ldr	r3, [r7, #8]
    7e4c:	3b2f      	subs	r3, #47	; 0x2f
    7e4e:	2b08      	cmp	r3, #8
    7e50:	d829      	bhi.n	7ea6 <compile_term+0xa2>
    7e52:	a201      	add	r2, pc, #4	; (adr r2, 7e58 <compile_term+0x54>)
    7e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7e58:	00007e7d 	.word	0x00007e7d
    7e5c:	00007e83 	.word	0x00007e83
    7e60:	00007e89 	.word	0x00007e89
    7e64:	00007ea7 	.word	0x00007ea7
    7e68:	00007e95 	.word	0x00007e95
    7e6c:	00007e8f 	.word	0x00007e8f
    7e70:	00007e9b 	.word	0x00007e9b
    7e74:	00007ea7 	.word	0x00007ea7
    7e78:	00007ea1 	.word	0x00007ea1
            case MP_TOKEN_OP_PLUS:      op = MP_BINARY_OP_ADD; break;
    7e7c:	231a      	movs	r3, #26
    7e7e:	613b      	str	r3, [r7, #16]
    7e80:	e01e      	b.n	7ec0 <compile_term+0xbc>
            case MP_TOKEN_OP_MINUS:     op = MP_BINARY_OP_SUBTRACT; break;
    7e82:	231b      	movs	r3, #27
    7e84:	613b      	str	r3, [r7, #16]
    7e86:	e01b      	b.n	7ec0 <compile_term+0xbc>
            case MP_TOKEN_OP_STAR:      op = MP_BINARY_OP_MULTIPLY; break;
    7e88:	231c      	movs	r3, #28
    7e8a:	613b      	str	r3, [r7, #16]
    7e8c:	e018      	b.n	7ec0 <compile_term+0xbc>
            case MP_TOKEN_OP_DBL_SLASH: op = MP_BINARY_OP_FLOOR_DIVIDE; break;
    7e8e:	231d      	movs	r3, #29
    7e90:	613b      	str	r3, [r7, #16]
    7e92:	e015      	b.n	7ec0 <compile_term+0xbc>
            case MP_TOKEN_OP_SLASH:     op = MP_BINARY_OP_TRUE_DIVIDE; break;
    7e94:	231e      	movs	r3, #30
    7e96:	613b      	str	r3, [r7, #16]
    7e98:	e012      	b.n	7ec0 <compile_term+0xbc>
            case MP_TOKEN_OP_PERCENT:   op = MP_BINARY_OP_MODULO; break;
    7e9a:	231f      	movs	r3, #31
    7e9c:	613b      	str	r3, [r7, #16]
    7e9e:	e00f      	b.n	7ec0 <compile_term+0xbc>
            case MP_TOKEN_OP_DBL_LESS:  op = MP_BINARY_OP_LSHIFT; break;
    7ea0:	2318      	movs	r3, #24
    7ea2:	613b      	str	r3, [r7, #16]
    7ea4:	e00c      	b.n	7ec0 <compile_term+0xbc>
            default:
                assert(tok == MP_TOKEN_OP_DBL_MORE);
    7ea6:	68bb      	ldr	r3, [r7, #8]
    7ea8:	2b39      	cmp	r3, #57	; 0x39
    7eaa:	d006      	beq.n	7eba <compile_term+0xb6>
    7eac:	4b0d      	ldr	r3, [pc, #52]	; (7ee4 <compile_term+0xe0>)
    7eae:	4a0e      	ldr	r2, [pc, #56]	; (7ee8 <compile_term+0xe4>)
    7eb0:	f640 015f 	movw	r1, #2143	; 0x85f
    7eb4:	480d      	ldr	r0, [pc, #52]	; (7eec <compile_term+0xe8>)
    7eb6:	f013 fa59 	bl	1b36c <__assert_func>
                op = MP_BINARY_OP_RSHIFT;
    7eba:	2319      	movs	r3, #25
    7ebc:	613b      	str	r3, [r7, #16]
                break;
    7ebe:	bf00      	nop
        }
        EMIT_ARG(binary_op, op);
    7ec0:	687b      	ldr	r3, [r7, #4]
    7ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7ec4:	6939      	ldr	r1, [r7, #16]
    7ec6:	4618      	mov	r0, r3
    7ec8:	f002 fdfa 	bl	aac0 <mp_emit_bc_binary_op>
    for (int i = 1; i + 1 < num_nodes; i += 2) {
    7ecc:	697b      	ldr	r3, [r7, #20]
    7ece:	3302      	adds	r3, #2
    7ed0:	617b      	str	r3, [r7, #20]
    7ed2:	697b      	ldr	r3, [r7, #20]
    7ed4:	1c5a      	adds	r2, r3, #1
    7ed6:	68fb      	ldr	r3, [r7, #12]
    7ed8:	429a      	cmp	r2, r3
    7eda:	dba5      	blt.n	7e28 <compile_term+0x24>
    }
}
    7edc:	bf00      	nop
    7ede:	3718      	adds	r7, #24
    7ee0:	46bd      	mov	sp, r7
    7ee2:	bd80      	pop	{r7, pc}
    7ee4:	0001e968 	.word	0x0001e968
    7ee8:	0001f038 	.word	0x0001f038
    7eec:	0001e304 	.word	0x0001e304

00007ef0 <compile_factor_2>:

STATIC void compile_factor_2(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7ef0:	b580      	push	{r7, lr}
    7ef2:	b084      	sub	sp, #16
    7ef4:	af00      	add	r7, sp, #0
    7ef6:	6078      	str	r0, [r7, #4]
    7ef8:	6039      	str	r1, [r7, #0]
    compile_node(comp, pns->nodes[1]);
    7efa:	683b      	ldr	r3, [r7, #0]
    7efc:	68db      	ldr	r3, [r3, #12]
    7efe:	4619      	mov	r1, r3
    7f00:	6878      	ldr	r0, [r7, #4]
    7f02:	f000 fda7 	bl	8a54 <compile_node>
    mp_unary_op_t op;
    mp_token_kind_t tok = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    7f06:	683b      	ldr	r3, [r7, #0]
    7f08:	689b      	ldr	r3, [r3, #8]
    7f0a:	091b      	lsrs	r3, r3, #4
    7f0c:	60bb      	str	r3, [r7, #8]
    switch (tok) {
    7f0e:	68bb      	ldr	r3, [r7, #8]
    7f10:	2b2f      	cmp	r3, #47	; 0x2f
    7f12:	d002      	beq.n	7f1a <compile_factor_2+0x2a>
    7f14:	2b30      	cmp	r3, #48	; 0x30
    7f16:	d003      	beq.n	7f20 <compile_factor_2+0x30>
    7f18:	e005      	b.n	7f26 <compile_factor_2+0x36>
        case MP_TOKEN_OP_PLUS:  op = MP_UNARY_OP_POSITIVE; break;
    7f1a:	2300      	movs	r3, #0
    7f1c:	60fb      	str	r3, [r7, #12]
    7f1e:	e00f      	b.n	7f40 <compile_factor_2+0x50>
        case MP_TOKEN_OP_MINUS: op = MP_UNARY_OP_NEGATIVE; break;
    7f20:	2301      	movs	r3, #1
    7f22:	60fb      	str	r3, [r7, #12]
    7f24:	e00c      	b.n	7f40 <compile_factor_2+0x50>
        default:
            assert(tok == MP_TOKEN_OP_TILDE);
    7f26:	68bb      	ldr	r3, [r7, #8]
    7f28:	2b3d      	cmp	r3, #61	; 0x3d
    7f2a:	d006      	beq.n	7f3a <compile_factor_2+0x4a>
    7f2c:	4b09      	ldr	r3, [pc, #36]	; (7f54 <compile_factor_2+0x64>)
    7f2e:	4a0a      	ldr	r2, [pc, #40]	; (7f58 <compile_factor_2+0x68>)
    7f30:	f640 016f 	movw	r1, #2159	; 0x86f
    7f34:	4809      	ldr	r0, [pc, #36]	; (7f5c <compile_factor_2+0x6c>)
    7f36:	f013 fa19 	bl	1b36c <__assert_func>
            op = MP_UNARY_OP_INVERT;
    7f3a:	2302      	movs	r3, #2
    7f3c:	60fb      	str	r3, [r7, #12]
            break;
    7f3e:	bf00      	nop
    }
    EMIT_ARG(unary_op, op);
    7f40:	687b      	ldr	r3, [r7, #4]
    7f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7f44:	68f9      	ldr	r1, [r7, #12]
    7f46:	4618      	mov	r0, r3
    7f48:	f002 fda4 	bl	aa94 <mp_emit_bc_unary_op>
}
    7f4c:	bf00      	nop
    7f4e:	3710      	adds	r7, #16
    7f50:	46bd      	mov	sp, r7
    7f52:	bd80      	pop	{r7, pc}
    7f54:	0001e984 	.word	0x0001e984
    7f58:	0001f048 	.word	0x0001f048
    7f5c:	0001e304 	.word	0x0001e304

00007f60 <compile_atom_expr_normal>:

STATIC void compile_atom_expr_normal(compiler_t *comp, mp_parse_node_struct_t *pns) {
    7f60:	b580      	push	{r7, lr}
    7f62:	b08c      	sub	sp, #48	; 0x30
    7f64:	af00      	add	r7, sp, #0
    7f66:	6078      	str	r0, [r7, #4]
    7f68:	6039      	str	r1, [r7, #0]
    // compile the subject of the expression
    compile_node(comp, pns->nodes[0]);
    7f6a:	683b      	ldr	r3, [r7, #0]
    7f6c:	689b      	ldr	r3, [r3, #8]
    7f6e:	4619      	mov	r1, r3
    7f70:	6878      	ldr	r0, [r7, #4]
    7f72:	f000 fd6f 	bl	8a54 <compile_node>

    // compile_atom_expr_await may call us with a NULL node
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[1])) {
    7f76:	683b      	ldr	r3, [r7, #0]
    7f78:	68db      	ldr	r3, [r3, #12]
    7f7a:	2b00      	cmp	r3, #0
    7f7c:	f000 80ec 	beq.w	8158 <compile_atom_expr_normal+0x1f8>
        return;
    }

    // get the array of trailers (known to be an array of PARSE_NODE_STRUCT)
    size_t num_trail = 1;
    7f80:	2301      	movs	r3, #1
    7f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_parse_node_struct_t **pns_trail = (mp_parse_node_struct_t**)&pns->nodes[1];
    7f84:	683b      	ldr	r3, [r7, #0]
    7f86:	330c      	adds	r3, #12
    7f88:	62bb      	str	r3, [r7, #40]	; 0x28
    if (MP_PARSE_NODE_STRUCT_KIND(pns_trail[0]) == PN_atom_expr_trailers) {
    7f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f8c:	681b      	ldr	r3, [r3, #0]
    7f8e:	685b      	ldr	r3, [r3, #4]
    7f90:	b2db      	uxtb	r3, r3
    7f92:	2b86      	cmp	r3, #134	; 0x86
    7f94:	d108      	bne.n	7fa8 <compile_atom_expr_normal+0x48>
        num_trail = MP_PARSE_NODE_STRUCT_NUM_NODES(pns_trail[0]);
    7f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7f98:	681b      	ldr	r3, [r3, #0]
    7f9a:	685b      	ldr	r3, [r3, #4]
    7f9c:	0a1b      	lsrs	r3, r3, #8
    7f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        pns_trail = (mp_parse_node_struct_t**)&pns_trail[0]->nodes[0];
    7fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7fa2:	681b      	ldr	r3, [r3, #0]
    7fa4:	3308      	adds	r3, #8
    7fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    // the current index into the array of trailers
    size_t i = 0;
    7fa8:	2300      	movs	r3, #0
    7faa:	627b      	str	r3, [r7, #36]	; 0x24

    // handle special super() call
    if (comp->scope_cur->kind == SCOPE_FUNCTION
    7fac:	687b      	ldr	r3, [r7, #4]
    7fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7fb0:	681b      	ldr	r3, [r3, #0]
    7fb2:	2b07      	cmp	r3, #7
    7fb4:	f040 80cb 	bne.w	814e <compile_atom_expr_normal+0x1ee>
        && MP_PARSE_NODE_IS_ID(pns->nodes[0])
    7fb8:	683b      	ldr	r3, [r7, #0]
    7fba:	689b      	ldr	r3, [r3, #8]
    7fbc:	f003 030f 	and.w	r3, r3, #15
    7fc0:	2b02      	cmp	r3, #2
    7fc2:	f040 80c4 	bne.w	814e <compile_atom_expr_normal+0x1ee>
        && MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]) == MP_QSTR_super
    7fc6:	683b      	ldr	r3, [r7, #0]
    7fc8:	689b      	ldr	r3, [r3, #8]
    7fca:	091b      	lsrs	r3, r3, #4
    7fcc:	2bbc      	cmp	r3, #188	; 0xbc
    7fce:	f040 80be 	bne.w	814e <compile_atom_expr_normal+0x1ee>
        && MP_PARSE_NODE_STRUCT_KIND(pns_trail[0]) == PN_trailer_paren
    7fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7fd4:	681b      	ldr	r3, [r3, #0]
    7fd6:	685b      	ldr	r3, [r3, #4]
    7fd8:	b2db      	uxtb	r3, r3
    7fda:	2b2d      	cmp	r3, #45	; 0x2d
    7fdc:	f040 80b7 	bne.w	814e <compile_atom_expr_normal+0x1ee>
        && MP_PARSE_NODE_IS_NULL(pns_trail[0]->nodes[0])) {
    7fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7fe2:	681b      	ldr	r3, [r3, #0]
    7fe4:	689b      	ldr	r3, [r3, #8]
    7fe6:	2b00      	cmp	r3, #0
    7fe8:	f040 80b1 	bne.w	814e <compile_atom_expr_normal+0x1ee>
        // at this point we have matched "super()" within a function

        // load the class for super to search for a parent
        compile_load_id(comp, MP_QSTR___class__);
    7fec:	2106      	movs	r1, #6
    7fee:	6878      	ldr	r0, [r7, #4]
    7ff0:	f7fc ffb8 	bl	4f64 <compile_load_id>

        // look for first argument to function (assumes it's "self")
        bool found = false;
    7ff4:	2300      	movs	r3, #0
    7ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        id_info_t *id = &comp->scope_cur->id_info[0];
    7ffa:	687b      	ldr	r3, [r7, #4]
    7ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8000:	61fb      	str	r3, [r7, #28]
        for (size_t n = comp->scope_cur->id_info_len; n > 0; --n, ++id) {
    8002:	687b      	ldr	r3, [r7, #4]
    8004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8008:	61bb      	str	r3, [r7, #24]
    800a:	e015      	b.n	8038 <compile_atom_expr_normal+0xd8>
            if (id->flags & ID_FLAG_IS_PARAM) {
    800c:	69fb      	ldr	r3, [r7, #28]
    800e:	785b      	ldrb	r3, [r3, #1]
    8010:	f003 0301 	and.w	r3, r3, #1
    8014:	2b00      	cmp	r3, #0
    8016:	d009      	beq.n	802c <compile_atom_expr_normal+0xcc>
                // first argument found; load it
                compile_load_id(comp, id->qst);
    8018:	69fb      	ldr	r3, [r7, #28]
    801a:	685b      	ldr	r3, [r3, #4]
    801c:	4619      	mov	r1, r3
    801e:	6878      	ldr	r0, [r7, #4]
    8020:	f7fc ffa0 	bl	4f64 <compile_load_id>
                found = true;
    8024:	2301      	movs	r3, #1
    8026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                break;
    802a:	e008      	b.n	803e <compile_atom_expr_normal+0xde>
        for (size_t n = comp->scope_cur->id_info_len; n > 0; --n, ++id) {
    802c:	69bb      	ldr	r3, [r7, #24]
    802e:	3b01      	subs	r3, #1
    8030:	61bb      	str	r3, [r7, #24]
    8032:	69fb      	ldr	r3, [r7, #28]
    8034:	3308      	adds	r3, #8
    8036:	61fb      	str	r3, [r7, #28]
    8038:	69bb      	ldr	r3, [r7, #24]
    803a:	2b00      	cmp	r3, #0
    803c:	d1e6      	bne.n	800c <compile_atom_expr_normal+0xac>
            }
        }
        if (!found) {
    803e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    8042:	f083 0301 	eor.w	r3, r3, #1
    8046:	b2db      	uxtb	r3, r3
    8048:	2b00      	cmp	r3, #0
    804a:	d007      	beq.n	805c <compile_atom_expr_normal+0xfc>
            compile_syntax_error(comp, (mp_parse_node_t)pns_trail[0],
    804c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    804e:	681b      	ldr	r3, [r3, #0]
    8050:	4a43      	ldr	r2, [pc, #268]	; (8160 <compile_atom_expr_normal+0x200>)
    8052:	4619      	mov	r1, r3
    8054:	6878      	ldr	r0, [r7, #4]
    8056:	f7fc fe83 	bl	4d60 <compile_syntax_error>
                "super() can't find self"); // really a TypeError
            return;
    805a:	e07e      	b.n	815a <compile_atom_expr_normal+0x1fa>
        }

        if (num_trail >= 3
    805c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    805e:	2b02      	cmp	r3, #2
    8060:	d926      	bls.n	80b0 <compile_atom_expr_normal+0x150>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[1]) == PN_trailer_period
    8062:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8064:	3304      	adds	r3, #4
    8066:	681b      	ldr	r3, [r3, #0]
    8068:	685b      	ldr	r3, [r3, #4]
    806a:	b2db      	uxtb	r3, r3
    806c:	2b2f      	cmp	r3, #47	; 0x2f
    806e:	d11f      	bne.n	80b0 <compile_atom_expr_normal+0x150>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[2]) == PN_trailer_paren) {
    8070:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8072:	3308      	adds	r3, #8
    8074:	681b      	ldr	r3, [r3, #0]
    8076:	685b      	ldr	r3, [r3, #4]
    8078:	b2db      	uxtb	r3, r3
    807a:	2b2d      	cmp	r3, #45	; 0x2d
    807c:	d118      	bne.n	80b0 <compile_atom_expr_normal+0x150>
            // optimisation for method calls super().f(...), to eliminate heap allocation
            mp_parse_node_struct_t *pns_period = pns_trail[1];
    807e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8080:	685b      	ldr	r3, [r3, #4]
    8082:	617b      	str	r3, [r7, #20]
            mp_parse_node_struct_t *pns_paren = pns_trail[2];
    8084:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8086:	689b      	ldr	r3, [r3, #8]
    8088:	613b      	str	r3, [r7, #16]
            EMIT_ARG(load_method, MP_PARSE_NODE_LEAF_ARG(pns_period->nodes[0]), true);
    808a:	687b      	ldr	r3, [r7, #4]
    808c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    808e:	697b      	ldr	r3, [r7, #20]
    8090:	689b      	ldr	r3, [r3, #8]
    8092:	091b      	lsrs	r3, r3, #4
    8094:	2201      	movs	r2, #1
    8096:	4619      	mov	r1, r3
    8098:	f002 fa76 	bl	a588 <mp_emit_bc_load_method>
            compile_trailer_paren_helper(comp, pns_paren->nodes[0], true, 0);
    809c:	693b      	ldr	r3, [r7, #16]
    809e:	6899      	ldr	r1, [r3, #8]
    80a0:	2300      	movs	r3, #0
    80a2:	2201      	movs	r2, #1
    80a4:	6878      	ldr	r0, [r7, #4]
    80a6:	f000 f871 	bl	818c <compile_trailer_paren_helper>
            i = 3;
    80aa:	2303      	movs	r3, #3
    80ac:	627b      	str	r3, [r7, #36]	; 0x24
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[2]) == PN_trailer_paren) {
    80ae:	e008      	b.n	80c2 <compile_atom_expr_normal+0x162>
        } else {
            // a super() call
            EMIT_ARG(call_function, 2, 0, 0);
    80b0:	687b      	ldr	r3, [r7, #4]
    80b2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    80b4:	2300      	movs	r3, #0
    80b6:	2200      	movs	r2, #0
    80b8:	2102      	movs	r1, #2
    80ba:	f002 fe6b 	bl	ad94 <mp_emit_bc_call_function>
            i = 1;
    80be:	2301      	movs	r3, #1
    80c0:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    // compile the remaining trailers
    for (; i < num_trail; i++) {
    80c2:	e044      	b.n	814e <compile_atom_expr_normal+0x1ee>
        if (i + 1 < num_trail
    80c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    80c6:	1c5a      	adds	r2, r3, #1
    80c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    80ca:	429a      	cmp	r2, r3
    80cc:	d233      	bcs.n	8136 <compile_atom_expr_normal+0x1d6>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i]) == PN_trailer_period
    80ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    80d0:	009b      	lsls	r3, r3, #2
    80d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    80d4:	4413      	add	r3, r2
    80d6:	681b      	ldr	r3, [r3, #0]
    80d8:	685b      	ldr	r3, [r3, #4]
    80da:	b2db      	uxtb	r3, r3
    80dc:	2b2f      	cmp	r3, #47	; 0x2f
    80de:	d12a      	bne.n	8136 <compile_atom_expr_normal+0x1d6>
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i + 1]) == PN_trailer_paren) {
    80e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    80e2:	3301      	adds	r3, #1
    80e4:	009b      	lsls	r3, r3, #2
    80e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    80e8:	4413      	add	r3, r2
    80ea:	681b      	ldr	r3, [r3, #0]
    80ec:	685b      	ldr	r3, [r3, #4]
    80ee:	b2db      	uxtb	r3, r3
    80f0:	2b2d      	cmp	r3, #45	; 0x2d
    80f2:	d120      	bne.n	8136 <compile_atom_expr_normal+0x1d6>
            // optimisation for method calls a.f(...), following PyPy
            mp_parse_node_struct_t *pns_period = pns_trail[i];
    80f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    80f6:	009b      	lsls	r3, r3, #2
    80f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    80fa:	4413      	add	r3, r2
    80fc:	681b      	ldr	r3, [r3, #0]
    80fe:	60fb      	str	r3, [r7, #12]
            mp_parse_node_struct_t *pns_paren = pns_trail[i + 1];
    8100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8102:	3301      	adds	r3, #1
    8104:	009b      	lsls	r3, r3, #2
    8106:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8108:	4413      	add	r3, r2
    810a:	681b      	ldr	r3, [r3, #0]
    810c:	60bb      	str	r3, [r7, #8]
            EMIT_ARG(load_method, MP_PARSE_NODE_LEAF_ARG(pns_period->nodes[0]), false);
    810e:	687b      	ldr	r3, [r7, #4]
    8110:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8112:	68fb      	ldr	r3, [r7, #12]
    8114:	689b      	ldr	r3, [r3, #8]
    8116:	091b      	lsrs	r3, r3, #4
    8118:	2200      	movs	r2, #0
    811a:	4619      	mov	r1, r3
    811c:	f002 fa34 	bl	a588 <mp_emit_bc_load_method>
            compile_trailer_paren_helper(comp, pns_paren->nodes[0], true, 0);
    8120:	68bb      	ldr	r3, [r7, #8]
    8122:	6899      	ldr	r1, [r3, #8]
    8124:	2300      	movs	r3, #0
    8126:	2201      	movs	r2, #1
    8128:	6878      	ldr	r0, [r7, #4]
    812a:	f000 f82f 	bl	818c <compile_trailer_paren_helper>
            i += 1;
    812e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8130:	3301      	adds	r3, #1
    8132:	627b      	str	r3, [r7, #36]	; 0x24
            && MP_PARSE_NODE_STRUCT_KIND(pns_trail[i + 1]) == PN_trailer_paren) {
    8134:	e008      	b.n	8148 <compile_atom_expr_normal+0x1e8>
        } else {
            // node is one of: trailer_paren, trailer_bracket, trailer_period
            compile_node(comp, (mp_parse_node_t)pns_trail[i]);
    8136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8138:	009b      	lsls	r3, r3, #2
    813a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    813c:	4413      	add	r3, r2
    813e:	681b      	ldr	r3, [r3, #0]
    8140:	4619      	mov	r1, r3
    8142:	6878      	ldr	r0, [r7, #4]
    8144:	f000 fc86 	bl	8a54 <compile_node>
    for (; i < num_trail; i++) {
    8148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    814a:	3301      	adds	r3, #1
    814c:	627b      	str	r3, [r7, #36]	; 0x24
    814e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    8150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8152:	429a      	cmp	r2, r3
    8154:	d3b6      	bcc.n	80c4 <compile_atom_expr_normal+0x164>
    8156:	e000      	b.n	815a <compile_atom_expr_normal+0x1fa>
        return;
    8158:	bf00      	nop
        }
    }
}
    815a:	3730      	adds	r7, #48	; 0x30
    815c:	46bd      	mov	sp, r7
    815e:	bd80      	pop	{r7, pc}
    8160:	0001e9a0 	.word	0x0001e9a0

00008164 <compile_power>:

STATIC void compile_power(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8164:	b580      	push	{r7, lr}
    8166:	b082      	sub	sp, #8
    8168:	af00      	add	r7, sp, #0
    816a:	6078      	str	r0, [r7, #4]
    816c:	6039      	str	r1, [r7, #0]
    compile_generic_all_nodes(comp, pns); // 2 nodes, arguments of power
    816e:	6839      	ldr	r1, [r7, #0]
    8170:	6878      	ldr	r0, [r7, #4]
    8172:	f7fc fec9 	bl	4f08 <compile_generic_all_nodes>
    EMIT_ARG(binary_op, MP_BINARY_OP_POWER);
    8176:	687b      	ldr	r3, [r7, #4]
    8178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    817a:	2120      	movs	r1, #32
    817c:	4618      	mov	r0, r3
    817e:	f002 fc9f 	bl	aac0 <mp_emit_bc_binary_op>
}
    8182:	bf00      	nop
    8184:	3708      	adds	r7, #8
    8186:	46bd      	mov	sp, r7
    8188:	bd80      	pop	{r7, pc}
    818a:	bf00      	nop

0000818c <compile_trailer_paren_helper>:

STATIC void compile_trailer_paren_helper(compiler_t *comp, mp_parse_node_t pn_arglist, bool is_method_call, int n_positional_extra) {
    818c:	b580      	push	{r7, lr}
    818e:	b08e      	sub	sp, #56	; 0x38
    8190:	af00      	add	r7, sp, #0
    8192:	60f8      	str	r0, [r7, #12]
    8194:	60b9      	str	r1, [r7, #8]
    8196:	603b      	str	r3, [r7, #0]
    8198:	4613      	mov	r3, r2
    819a:	71fb      	strb	r3, [r7, #7]
    // function to call is on top of stack

    // get the list of arguments
    mp_parse_node_t *args;
    int n_args = mp_parse_node_extract_list(&pn_arglist, PN_arglist, &args);
    819c:	f107 0214 	add.w	r2, r7, #20
    81a0:	f107 0308 	add.w	r3, r7, #8
    81a4:	2197      	movs	r1, #151	; 0x97
    81a6:	4618      	mov	r0, r3
    81a8:	f7fb fce0 	bl	3b6c <mp_parse_node_extract_list>
    81ac:	61f8      	str	r0, [r7, #28]

    // compile the arguments
    // Rather than calling compile_node on the list, we go through the list of args
    // explicitly here so that we can count the number of arguments and give sensible
    // error messages.
    int n_positional = n_positional_extra;
    81ae:	683b      	ldr	r3, [r7, #0]
    81b0:	637b      	str	r3, [r7, #52]	; 0x34
    uint n_keyword = 0;
    81b2:	2300      	movs	r3, #0
    81b4:	633b      	str	r3, [r7, #48]	; 0x30
    uint star_flags = 0;
    81b6:	2300      	movs	r3, #0
    81b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_parse_node_struct_t *star_args_node = NULL, *dblstar_args_node = NULL;
    81ba:	2300      	movs	r3, #0
    81bc:	62bb      	str	r3, [r7, #40]	; 0x28
    81be:	2300      	movs	r3, #0
    81c0:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < n_args; i++) {
    81c2:	2300      	movs	r3, #0
    81c4:	623b      	str	r3, [r7, #32]
    81c6:	e0af      	b.n	8328 <compile_trailer_paren_helper+0x19c>
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    81c8:	697a      	ldr	r2, [r7, #20]
    81ca:	6a3b      	ldr	r3, [r7, #32]
    81cc:	009b      	lsls	r3, r3, #2
    81ce:	4413      	add	r3, r2
    81d0:	681b      	ldr	r3, [r3, #0]
    81d2:	2b00      	cmp	r3, #0
    81d4:	d07d      	beq.n	82d2 <compile_trailer_paren_helper+0x146>
    81d6:	697a      	ldr	r2, [r7, #20]
    81d8:	6a3b      	ldr	r3, [r7, #32]
    81da:	009b      	lsls	r3, r3, #2
    81dc:	4413      	add	r3, r2
    81de:	681b      	ldr	r3, [r3, #0]
    81e0:	f003 0303 	and.w	r3, r3, #3
    81e4:	2b00      	cmp	r3, #0
    81e6:	d174      	bne.n	82d2 <compile_trailer_paren_helper+0x146>
            mp_parse_node_struct_t *pns_arg = (mp_parse_node_struct_t*)args[i];
    81e8:	697a      	ldr	r2, [r7, #20]
    81ea:	6a3b      	ldr	r3, [r7, #32]
    81ec:	009b      	lsls	r3, r3, #2
    81ee:	4413      	add	r3, r2
    81f0:	681b      	ldr	r3, [r3, #0]
    81f2:	61bb      	str	r3, [r7, #24]
            if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_arglist_star) {
    81f4:	69bb      	ldr	r3, [r7, #24]
    81f6:	685b      	ldr	r3, [r3, #4]
    81f8:	b2db      	uxtb	r3, r3
    81fa:	2b99      	cmp	r3, #153	; 0x99
    81fc:	d112      	bne.n	8224 <compile_trailer_paren_helper+0x98>
                if (star_flags & MP_EMIT_STAR_FLAG_SINGLE) {
    81fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8200:	f003 0301 	and.w	r3, r3, #1
    8204:	2b00      	cmp	r3, #0
    8206:	d006      	beq.n	8216 <compile_trailer_paren_helper+0x8a>
                    compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "can't have multiple *x");
    8208:	69bb      	ldr	r3, [r7, #24]
    820a:	4a65      	ldr	r2, [pc, #404]	; (83a0 <compile_trailer_paren_helper+0x214>)
    820c:	4619      	mov	r1, r3
    820e:	68f8      	ldr	r0, [r7, #12]
    8210:	f7fc fda6 	bl	4d60 <compile_syntax_error>
                    return;
    8214:	e0c0      	b.n	8398 <compile_trailer_paren_helper+0x20c>
                }
                star_flags |= MP_EMIT_STAR_FLAG_SINGLE;
    8216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8218:	f043 0301 	orr.w	r3, r3, #1
    821c:	62fb      	str	r3, [r7, #44]	; 0x2c
                star_args_node = pns_arg;
    821e:	69bb      	ldr	r3, [r7, #24]
    8220:	62bb      	str	r3, [r7, #40]	; 0x28
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    8222:	e07e      	b.n	8322 <compile_trailer_paren_helper+0x196>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_arglist_dbl_star) {
    8224:	69bb      	ldr	r3, [r7, #24]
    8226:	685b      	ldr	r3, [r3, #4]
    8228:	b2db      	uxtb	r3, r3
    822a:	2b9a      	cmp	r3, #154	; 0x9a
    822c:	d112      	bne.n	8254 <compile_trailer_paren_helper+0xc8>
                if (star_flags & MP_EMIT_STAR_FLAG_DOUBLE) {
    822e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8230:	f003 0302 	and.w	r3, r3, #2
    8234:	2b00      	cmp	r3, #0
    8236:	d006      	beq.n	8246 <compile_trailer_paren_helper+0xba>
                    compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "can't have multiple **x");
    8238:	69bb      	ldr	r3, [r7, #24]
    823a:	4a5a      	ldr	r2, [pc, #360]	; (83a4 <compile_trailer_paren_helper+0x218>)
    823c:	4619      	mov	r1, r3
    823e:	68f8      	ldr	r0, [r7, #12]
    8240:	f7fc fd8e 	bl	4d60 <compile_syntax_error>
                    return;
    8244:	e0a8      	b.n	8398 <compile_trailer_paren_helper+0x20c>
                }
                star_flags |= MP_EMIT_STAR_FLAG_DOUBLE;
    8246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8248:	f043 0302 	orr.w	r3, r3, #2
    824c:	62fb      	str	r3, [r7, #44]	; 0x2c
                dblstar_args_node = pns_arg;
    824e:	69bb      	ldr	r3, [r7, #24]
    8250:	627b      	str	r3, [r7, #36]	; 0x24
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    8252:	e066      	b.n	8322 <compile_trailer_paren_helper+0x196>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns_arg) == PN_argument) {
    8254:	69bb      	ldr	r3, [r7, #24]
    8256:	685b      	ldr	r3, [r3, #4]
    8258:	b2db      	uxtb	r3, r3
    825a:	2b9b      	cmp	r3, #155	; 0x9b
    825c:	d138      	bne.n	82d0 <compile_trailer_paren_helper+0x144>
                if (!MP_PARSE_NODE_IS_STRUCT_KIND(pns_arg->nodes[1], PN_comp_for)) {
    825e:	69bb      	ldr	r3, [r7, #24]
    8260:	68db      	ldr	r3, [r3, #12]
    8262:	2b00      	cmp	r3, #0
    8264:	d00b      	beq.n	827e <compile_trailer_paren_helper+0xf2>
    8266:	69bb      	ldr	r3, [r7, #24]
    8268:	68db      	ldr	r3, [r3, #12]
    826a:	f003 0303 	and.w	r3, r3, #3
    826e:	2b00      	cmp	r3, #0
    8270:	d105      	bne.n	827e <compile_trailer_paren_helper+0xf2>
    8272:	69bb      	ldr	r3, [r7, #24]
    8274:	68db      	ldr	r3, [r3, #12]
    8276:	685b      	ldr	r3, [r3, #4]
    8278:	b2db      	uxtb	r3, r3
    827a:	2b9f      	cmp	r3, #159	; 0x9f
    827c:	d01f      	beq.n	82be <compile_trailer_paren_helper+0x132>
                    if (!MP_PARSE_NODE_IS_ID(pns_arg->nodes[0])) {
    827e:	69bb      	ldr	r3, [r7, #24]
    8280:	689b      	ldr	r3, [r3, #8]
    8282:	f003 030f 	and.w	r3, r3, #15
    8286:	2b02      	cmp	r3, #2
    8288:	d006      	beq.n	8298 <compile_trailer_paren_helper+0x10c>
                        compile_syntax_error(comp, (mp_parse_node_t)pns_arg, "LHS of keyword arg must be an id");
    828a:	69bb      	ldr	r3, [r7, #24]
    828c:	4a46      	ldr	r2, [pc, #280]	; (83a8 <compile_trailer_paren_helper+0x21c>)
    828e:	4619      	mov	r1, r3
    8290:	68f8      	ldr	r0, [r7, #12]
    8292:	f7fc fd65 	bl	4d60 <compile_syntax_error>
                        return;
    8296:	e07f      	b.n	8398 <compile_trailer_paren_helper+0x20c>
                    }
                    EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pns_arg->nodes[0]));
    8298:	68fb      	ldr	r3, [r7, #12]
    829a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    829c:	69bb      	ldr	r3, [r7, #24]
    829e:	689b      	ldr	r3, [r3, #8]
    82a0:	091b      	lsrs	r3, r3, #4
    82a2:	4619      	mov	r1, r3
    82a4:	4610      	mov	r0, r2
    82a6:	f002 f8fb 	bl	a4a0 <mp_emit_bc_load_const_str>
                    compile_node(comp, pns_arg->nodes[1]);
    82aa:	69bb      	ldr	r3, [r7, #24]
    82ac:	68db      	ldr	r3, [r3, #12]
    82ae:	4619      	mov	r1, r3
    82b0:	68f8      	ldr	r0, [r7, #12]
    82b2:	f000 fbcf 	bl	8a54 <compile_node>
                    n_keyword += 1;
    82b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    82b8:	3301      	adds	r3, #1
    82ba:	633b      	str	r3, [r7, #48]	; 0x30
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    82bc:	e031      	b.n	8322 <compile_trailer_paren_helper+0x196>
                } else {
                    compile_comprehension(comp, pns_arg, SCOPE_GEN_EXPR);
    82be:	2206      	movs	r2, #6
    82c0:	69b9      	ldr	r1, [r7, #24]
    82c2:	68f8      	ldr	r0, [r7, #12]
    82c4:	f000 f876 	bl	83b4 <compile_comprehension>
                    n_positional++;
    82c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    82ca:	3301      	adds	r3, #1
    82cc:	637b      	str	r3, [r7, #52]	; 0x34
        if (MP_PARSE_NODE_IS_STRUCT(args[i])) {
    82ce:	e028      	b.n	8322 <compile_trailer_paren_helper+0x196>
                }
            } else {
                goto normal_argument;
    82d0:	bf00      	nop
            }
        } else {
            normal_argument:
            if (star_flags) {
    82d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    82d4:	2b00      	cmp	r3, #0
    82d6:	d00a      	beq.n	82ee <compile_trailer_paren_helper+0x162>
                compile_syntax_error(comp, args[i], "non-keyword arg after */**");
    82d8:	697a      	ldr	r2, [r7, #20]
    82da:	6a3b      	ldr	r3, [r7, #32]
    82dc:	009b      	lsls	r3, r3, #2
    82de:	4413      	add	r3, r2
    82e0:	681b      	ldr	r3, [r3, #0]
    82e2:	4a32      	ldr	r2, [pc, #200]	; (83ac <compile_trailer_paren_helper+0x220>)
    82e4:	4619      	mov	r1, r3
    82e6:	68f8      	ldr	r0, [r7, #12]
    82e8:	f7fc fd3a 	bl	4d60 <compile_syntax_error>
                return;
    82ec:	e054      	b.n	8398 <compile_trailer_paren_helper+0x20c>
            }
            if (n_keyword > 0) {
    82ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    82f0:	2b00      	cmp	r3, #0
    82f2:	d00a      	beq.n	830a <compile_trailer_paren_helper+0x17e>
                compile_syntax_error(comp, args[i], "non-keyword arg after keyword arg");
    82f4:	697a      	ldr	r2, [r7, #20]
    82f6:	6a3b      	ldr	r3, [r7, #32]
    82f8:	009b      	lsls	r3, r3, #2
    82fa:	4413      	add	r3, r2
    82fc:	681b      	ldr	r3, [r3, #0]
    82fe:	4a2c      	ldr	r2, [pc, #176]	; (83b0 <compile_trailer_paren_helper+0x224>)
    8300:	4619      	mov	r1, r3
    8302:	68f8      	ldr	r0, [r7, #12]
    8304:	f7fc fd2c 	bl	4d60 <compile_syntax_error>
                return;
    8308:	e046      	b.n	8398 <compile_trailer_paren_helper+0x20c>
            }
            compile_node(comp, args[i]);
    830a:	697a      	ldr	r2, [r7, #20]
    830c:	6a3b      	ldr	r3, [r7, #32]
    830e:	009b      	lsls	r3, r3, #2
    8310:	4413      	add	r3, r2
    8312:	681b      	ldr	r3, [r3, #0]
    8314:	4619      	mov	r1, r3
    8316:	68f8      	ldr	r0, [r7, #12]
    8318:	f000 fb9c 	bl	8a54 <compile_node>
            n_positional++;
    831c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    831e:	3301      	adds	r3, #1
    8320:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 0; i < n_args; i++) {
    8322:	6a3b      	ldr	r3, [r7, #32]
    8324:	3301      	adds	r3, #1
    8326:	623b      	str	r3, [r7, #32]
    8328:	6a3a      	ldr	r2, [r7, #32]
    832a:	69fb      	ldr	r3, [r7, #28]
    832c:	429a      	cmp	r2, r3
    832e:	f6ff af4b 	blt.w	81c8 <compile_trailer_paren_helper+0x3c>
        }
    }

    // compile the star/double-star arguments if we had them
    // if we had one but not the other then we load "null" as a place holder
    if (star_flags != 0) {
    8332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8334:	2b00      	cmp	r3, #0
    8336:	d01d      	beq.n	8374 <compile_trailer_paren_helper+0x1e8>
        if (star_args_node == NULL) {
    8338:	6abb      	ldr	r3, [r7, #40]	; 0x28
    833a:	2b00      	cmp	r3, #0
    833c:	d105      	bne.n	834a <compile_trailer_paren_helper+0x1be>
            EMIT(load_null);
    833e:	68fb      	ldr	r3, [r7, #12]
    8340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8342:	4618      	mov	r0, r3
    8344:	f002 f8d0 	bl	a4e8 <mp_emit_bc_load_null>
    8348:	e005      	b.n	8356 <compile_trailer_paren_helper+0x1ca>
        } else {
            compile_node(comp, star_args_node->nodes[0]);
    834a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    834c:	689b      	ldr	r3, [r3, #8]
    834e:	4619      	mov	r1, r3
    8350:	68f8      	ldr	r0, [r7, #12]
    8352:	f000 fb7f 	bl	8a54 <compile_node>
        }
        if (dblstar_args_node == NULL) {
    8356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8358:	2b00      	cmp	r3, #0
    835a:	d105      	bne.n	8368 <compile_trailer_paren_helper+0x1dc>
            EMIT(load_null);
    835c:	68fb      	ldr	r3, [r7, #12]
    835e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8360:	4618      	mov	r0, r3
    8362:	f002 f8c1 	bl	a4e8 <mp_emit_bc_load_null>
    8366:	e005      	b.n	8374 <compile_trailer_paren_helper+0x1e8>
        } else {
            compile_node(comp, dblstar_args_node->nodes[0]);
    8368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    836a:	689b      	ldr	r3, [r3, #8]
    836c:	4619      	mov	r1, r3
    836e:	68f8      	ldr	r0, [r7, #12]
    8370:	f000 fb70 	bl	8a54 <compile_node>
        }
    }

    // emit the function/method call
    if (is_method_call) {
    8374:	79fb      	ldrb	r3, [r7, #7]
    8376:	2b00      	cmp	r3, #0
    8378:	d007      	beq.n	838a <compile_trailer_paren_helper+0x1fe>
        EMIT_ARG(call_method, n_positional, n_keyword, star_flags);
    837a:	68fb      	ldr	r3, [r7, #12]
    837c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    837e:	6b79      	ldr	r1, [r7, #52]	; 0x34
    8380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    8384:	f002 fd1c 	bl	adc0 <mp_emit_bc_call_method>
    8388:	e006      	b.n	8398 <compile_trailer_paren_helper+0x20c>
    } else {
        EMIT_ARG(call_function, n_positional, n_keyword, star_flags);
    838a:	68fb      	ldr	r3, [r7, #12]
    838c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    838e:	6b79      	ldr	r1, [r7, #52]	; 0x34
    8390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    8394:	f002 fcfe 	bl	ad94 <mp_emit_bc_call_function>
    }
}
    8398:	3738      	adds	r7, #56	; 0x38
    839a:	46bd      	mov	sp, r7
    839c:	bd80      	pop	{r7, pc}
    839e:	bf00      	nop
    83a0:	0001e9b8 	.word	0x0001e9b8
    83a4:	0001e9d0 	.word	0x0001e9d0
    83a8:	0001e9e8 	.word	0x0001e9e8
    83ac:	0001ea0c 	.word	0x0001ea0c
    83b0:	0001ea28 	.word	0x0001ea28

000083b4 <compile_comprehension>:

// pns needs to have 2 nodes, first is lhs of comprehension, second is PN_comp_for node
STATIC void compile_comprehension(compiler_t *comp, mp_parse_node_struct_t *pns, scope_kind_t kind) {
    83b4:	b580      	push	{r7, lr}
    83b6:	b088      	sub	sp, #32
    83b8:	af00      	add	r7, sp, #0
    83ba:	60f8      	str	r0, [r7, #12]
    83bc:	60b9      	str	r1, [r7, #8]
    83be:	607a      	str	r2, [r7, #4]
    assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 2);
    83c0:	68bb      	ldr	r3, [r7, #8]
    83c2:	685b      	ldr	r3, [r3, #4]
    83c4:	0a1b      	lsrs	r3, r3, #8
    83c6:	2b02      	cmp	r3, #2
    83c8:	d006      	beq.n	83d8 <compile_comprehension+0x24>
    83ca:	4b2a      	ldr	r3, [pc, #168]	; (8474 <compile_comprehension+0xc0>)
    83cc:	4a2a      	ldr	r2, [pc, #168]	; (8478 <compile_comprehension+0xc4>)
    83ce:	f640 1125 	movw	r1, #2341	; 0x925
    83d2:	482a      	ldr	r0, [pc, #168]	; (847c <compile_comprehension+0xc8>)
    83d4:	f012 ffca 	bl	1b36c <__assert_func>
    assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_comp_for));
    83d8:	68bb      	ldr	r3, [r7, #8]
    83da:	68db      	ldr	r3, [r3, #12]
    83dc:	2b00      	cmp	r3, #0
    83de:	d00b      	beq.n	83f8 <compile_comprehension+0x44>
    83e0:	68bb      	ldr	r3, [r7, #8]
    83e2:	68db      	ldr	r3, [r3, #12]
    83e4:	f003 0303 	and.w	r3, r3, #3
    83e8:	2b00      	cmp	r3, #0
    83ea:	d105      	bne.n	83f8 <compile_comprehension+0x44>
    83ec:	68bb      	ldr	r3, [r7, #8]
    83ee:	68db      	ldr	r3, [r3, #12]
    83f0:	685b      	ldr	r3, [r3, #4]
    83f2:	b2db      	uxtb	r3, r3
    83f4:	2b9f      	cmp	r3, #159	; 0x9f
    83f6:	d006      	beq.n	8406 <compile_comprehension+0x52>
    83f8:	4b21      	ldr	r3, [pc, #132]	; (8480 <compile_comprehension+0xcc>)
    83fa:	4a1f      	ldr	r2, [pc, #124]	; (8478 <compile_comprehension+0xc4>)
    83fc:	f640 1126 	movw	r1, #2342	; 0x926
    8400:	481e      	ldr	r0, [pc, #120]	; (847c <compile_comprehension+0xc8>)
    8402:	f012 ffb3 	bl	1b36c <__assert_func>
    mp_parse_node_struct_t *pns_comp_for = (mp_parse_node_struct_t*)pns->nodes[1];
    8406:	68bb      	ldr	r3, [r7, #8]
    8408:	68db      	ldr	r3, [r3, #12]
    840a:	61fb      	str	r3, [r7, #28]

    if (comp->pass == MP_PASS_SCOPE) {
    840c:	68fb      	ldr	r3, [r7, #12]
    840e:	795b      	ldrb	r3, [r3, #5]
    8410:	2b01      	cmp	r3, #1
    8412:	d10b      	bne.n	842c <compile_comprehension+0x78>
        // create a new scope for this comprehension
        scope_t *s = scope_new_and_link(comp, kind, (mp_parse_node_t)pns, comp->scope_cur->emit_options);
    8414:	68ba      	ldr	r2, [r7, #8]
    8416:	68fb      	ldr	r3, [r7, #12]
    8418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    841a:	7e5b      	ldrb	r3, [r3, #25]
    841c:	6879      	ldr	r1, [r7, #4]
    841e:	68f8      	ldr	r0, [r7, #12]
    8420:	f7fc fd04 	bl	4e2c <scope_new_and_link>
    8424:	61b8      	str	r0, [r7, #24]
        // store the comprehension scope so the compiling function (this one) can use it at each pass
        pns_comp_for->nodes[3] = (mp_parse_node_t)s;
    8426:	69ba      	ldr	r2, [r7, #24]
    8428:	69fb      	ldr	r3, [r7, #28]
    842a:	615a      	str	r2, [r3, #20]
    }

    // get the scope for this comprehension
    scope_t *this_scope = (scope_t*)pns_comp_for->nodes[3];
    842c:	69fb      	ldr	r3, [r7, #28]
    842e:	695b      	ldr	r3, [r3, #20]
    8430:	617b      	str	r3, [r7, #20]

    // compile the comprehension
    close_over_variables_etc(comp, this_scope, 0, 0);
    8432:	2300      	movs	r3, #0
    8434:	2200      	movs	r2, #0
    8436:	6979      	ldr	r1, [r7, #20]
    8438:	68f8      	ldr	r0, [r7, #12]
    843a:	f7fd f9df 	bl	57fc <close_over_variables_etc>

    compile_node(comp, pns_comp_for->nodes[1]); // source of the iterator
    843e:	69fb      	ldr	r3, [r7, #28]
    8440:	68db      	ldr	r3, [r3, #12]
    8442:	4619      	mov	r1, r3
    8444:	68f8      	ldr	r0, [r7, #12]
    8446:	f000 fb05 	bl	8a54 <compile_node>
    if (kind == SCOPE_GEN_EXPR) {
    844a:	687b      	ldr	r3, [r7, #4]
    844c:	2b06      	cmp	r3, #6
    844e:	d105      	bne.n	845c <compile_comprehension+0xa8>
        EMIT_ARG(get_iter, false);
    8450:	68fb      	ldr	r3, [r7, #12]
    8452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8454:	2100      	movs	r1, #0
    8456:	4618      	mov	r0, r3
    8458:	f002 fabe 	bl	a9d8 <mp_emit_bc_get_iter>
    }
    EMIT_ARG(call_function, 1, 0, 0);
    845c:	68fb      	ldr	r3, [r7, #12]
    845e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8460:	2300      	movs	r3, #0
    8462:	2200      	movs	r2, #0
    8464:	2101      	movs	r1, #1
    8466:	f002 fc95 	bl	ad94 <mp_emit_bc_call_function>
}
    846a:	bf00      	nop
    846c:	3720      	adds	r7, #32
    846e:	46bd      	mov	sp, r7
    8470:	bd80      	pop	{r7, pc}
    8472:	bf00      	nop
    8474:	0001ea4c 	.word	0x0001ea4c
    8478:	0001f05c 	.word	0x0001f05c
    847c:	0001e304 	.word	0x0001e304
    8480:	0001ea78 	.word	0x0001ea78

00008484 <compile_atom_paren>:

STATIC void compile_atom_paren(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8484:	b580      	push	{r7, lr}
    8486:	b084      	sub	sp, #16
    8488:	af00      	add	r7, sp, #0
    848a:	6078      	str	r0, [r7, #4]
    848c:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    848e:	683b      	ldr	r3, [r7, #0]
    8490:	689b      	ldr	r3, [r3, #8]
    8492:	2b00      	cmp	r3, #0
    8494:	d105      	bne.n	84a2 <compile_atom_paren+0x1e>
        // an empty tuple
        c_tuple(comp, MP_PARSE_NODE_NULL, NULL);
    8496:	2200      	movs	r2, #0
    8498:	2100      	movs	r1, #0
    849a:	6878      	ldr	r0, [r7, #4]
    849c:	f7fc fdbc 	bl	5018 <c_tuple>
            // tuple with 2 items
            tuple_with_2_items:
            c_tuple(comp, MP_PARSE_NODE_NULL, pns);
        }
    }
}
    84a0:	e068      	b.n	8574 <compile_atom_paren+0xf0>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp));
    84a2:	683b      	ldr	r3, [r7, #0]
    84a4:	689b      	ldr	r3, [r3, #8]
    84a6:	2b00      	cmp	r3, #0
    84a8:	d00b      	beq.n	84c2 <compile_atom_paren+0x3e>
    84aa:	683b      	ldr	r3, [r7, #0]
    84ac:	689b      	ldr	r3, [r3, #8]
    84ae:	f003 0303 	and.w	r3, r3, #3
    84b2:	2b00      	cmp	r3, #0
    84b4:	d105      	bne.n	84c2 <compile_atom_paren+0x3e>
    84b6:	683b      	ldr	r3, [r7, #0]
    84b8:	689b      	ldr	r3, [r3, #8]
    84ba:	685b      	ldr	r3, [r3, #4]
    84bc:	b2db      	uxtb	r3, r3
    84be:	2b8a      	cmp	r3, #138	; 0x8a
    84c0:	d006      	beq.n	84d0 <compile_atom_paren+0x4c>
    84c2:	4b2e      	ldr	r3, [pc, #184]	; (857c <compile_atom_paren+0xf8>)
    84c4:	4a2e      	ldr	r2, [pc, #184]	; (8580 <compile_atom_paren+0xfc>)
    84c6:	f640 1142 	movw	r1, #2370	; 0x942
    84ca:	482e      	ldr	r0, [pc, #184]	; (8584 <compile_atom_paren+0x100>)
    84cc:	f012 ff4e 	bl	1b36c <__assert_func>
        pns = (mp_parse_node_struct_t*)pns->nodes[0];
    84d0:	683b      	ldr	r3, [r7, #0]
    84d2:	689b      	ldr	r3, [r3, #8]
    84d4:	603b      	str	r3, [r7, #0]
        assert(!MP_PARSE_NODE_IS_NULL(pns->nodes[1]));
    84d6:	683b      	ldr	r3, [r7, #0]
    84d8:	68db      	ldr	r3, [r3, #12]
    84da:	2b00      	cmp	r3, #0
    84dc:	d106      	bne.n	84ec <compile_atom_paren+0x68>
    84de:	4b2a      	ldr	r3, [pc, #168]	; (8588 <compile_atom_paren+0x104>)
    84e0:	4a27      	ldr	r2, [pc, #156]	; (8580 <compile_atom_paren+0xfc>)
    84e2:	f640 1144 	movw	r1, #2372	; 0x944
    84e6:	4827      	ldr	r0, [pc, #156]	; (8584 <compile_atom_paren+0x100>)
    84e8:	f012 ff40 	bl	1b36c <__assert_func>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    84ec:	683b      	ldr	r3, [r7, #0]
    84ee:	68db      	ldr	r3, [r3, #12]
    84f0:	2b00      	cmp	r3, #0
    84f2:	d039      	beq.n	8568 <compile_atom_paren+0xe4>
    84f4:	683b      	ldr	r3, [r7, #0]
    84f6:	68db      	ldr	r3, [r3, #12]
    84f8:	f003 0303 	and.w	r3, r3, #3
    84fc:	2b00      	cmp	r3, #0
    84fe:	d133      	bne.n	8568 <compile_atom_paren+0xe4>
            mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[1];
    8500:	683b      	ldr	r3, [r7, #0]
    8502:	68db      	ldr	r3, [r3, #12]
    8504:	60fb      	str	r3, [r7, #12]
            if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3b) {
    8506:	68fb      	ldr	r3, [r7, #12]
    8508:	685b      	ldr	r3, [r3, #4]
    850a:	b2db      	uxtb	r3, r3
    850c:	2b8d      	cmp	r3, #141	; 0x8d
    850e:	d112      	bne.n	8536 <compile_atom_paren+0xb2>
                assert(MP_PARSE_NODE_IS_NULL(pns2->nodes[0]));
    8510:	68fb      	ldr	r3, [r7, #12]
    8512:	689b      	ldr	r3, [r3, #8]
    8514:	2b00      	cmp	r3, #0
    8516:	d006      	beq.n	8526 <compile_atom_paren+0xa2>
    8518:	4b1c      	ldr	r3, [pc, #112]	; (858c <compile_atom_paren+0x108>)
    851a:	4a19      	ldr	r2, [pc, #100]	; (8580 <compile_atom_paren+0xfc>)
    851c:	f640 1149 	movw	r1, #2377	; 0x949
    8520:	4818      	ldr	r0, [pc, #96]	; (8584 <compile_atom_paren+0x100>)
    8522:	f012 ff23 	bl	1b36c <__assert_func>
                c_tuple(comp, pns->nodes[0], NULL);
    8526:	683b      	ldr	r3, [r7, #0]
    8528:	689b      	ldr	r3, [r3, #8]
    852a:	2200      	movs	r2, #0
    852c:	4619      	mov	r1, r3
    852e:	6878      	ldr	r0, [r7, #4]
    8530:	f7fc fd72 	bl	5018 <c_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    8534:	e01e      	b.n	8574 <compile_atom_paren+0xf0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_testlist_comp_3c) {
    8536:	68fb      	ldr	r3, [r7, #12]
    8538:	685b      	ldr	r3, [r3, #4]
    853a:	b2db      	uxtb	r3, r3
    853c:	2b8e      	cmp	r3, #142	; 0x8e
    853e:	d107      	bne.n	8550 <compile_atom_paren+0xcc>
                c_tuple(comp, pns->nodes[0], pns2);
    8540:	683b      	ldr	r3, [r7, #0]
    8542:	689b      	ldr	r3, [r3, #8]
    8544:	68fa      	ldr	r2, [r7, #12]
    8546:	4619      	mov	r1, r3
    8548:	6878      	ldr	r0, [r7, #4]
    854a:	f7fc fd65 	bl	5018 <c_tuple>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    854e:	e011      	b.n	8574 <compile_atom_paren+0xf0>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns2) == PN_comp_for) {
    8550:	68fb      	ldr	r3, [r7, #12]
    8552:	685b      	ldr	r3, [r3, #4]
    8554:	b2db      	uxtb	r3, r3
    8556:	2b9f      	cmp	r3, #159	; 0x9f
    8558:	d105      	bne.n	8566 <compile_atom_paren+0xe2>
                compile_comprehension(comp, pns, SCOPE_GEN_EXPR);
    855a:	2206      	movs	r2, #6
    855c:	6839      	ldr	r1, [r7, #0]
    855e:	6878      	ldr	r0, [r7, #4]
    8560:	f7ff ff28 	bl	83b4 <compile_comprehension>
        if (MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])) {
    8564:	e006      	b.n	8574 <compile_atom_paren+0xf0>
                goto tuple_with_2_items;
    8566:	bf00      	nop
            c_tuple(comp, MP_PARSE_NODE_NULL, pns);
    8568:	683a      	ldr	r2, [r7, #0]
    856a:	2100      	movs	r1, #0
    856c:	6878      	ldr	r0, [r7, #4]
    856e:	f7fc fd53 	bl	5018 <c_tuple>
}
    8572:	e7ff      	b.n	8574 <compile_atom_paren+0xf0>
    8574:	bf00      	nop
    8576:	3710      	adds	r7, #16
    8578:	46bd      	mov	sp, r7
    857a:	bd80      	pop	{r7, pc}
    857c:	0001e318 	.word	0x0001e318
    8580:	0001f074 	.word	0x0001f074
    8584:	0001e304 	.word	0x0001e304
    8588:	0001eab4 	.word	0x0001eab4
    858c:	0001e3fc 	.word	0x0001e3fc

00008590 <compile_atom_bracket>:

STATIC void compile_atom_bracket(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8590:	b580      	push	{r7, lr}
    8592:	b084      	sub	sp, #16
    8594:	af00      	add	r7, sp, #0
    8596:	6078      	str	r0, [r7, #4]
    8598:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    859a:	683b      	ldr	r3, [r7, #0]
    859c:	689b      	ldr	r3, [r3, #8]
    859e:	2b00      	cmp	r3, #0
    85a0:	d107      	bne.n	85b2 <compile_atom_bracket+0x22>
        // empty list
        EMIT_ARG(build, 0, MP_EMIT_BUILD_LIST);
    85a2:	687b      	ldr	r3, [r7, #4]
    85a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    85a6:	2201      	movs	r2, #1
    85a8:	2100      	movs	r1, #0
    85aa:	4618      	mov	r0, r3
    85ac:	f002 faba 	bl	ab24 <mp_emit_bc_build>
    } else {
        // list with 1 item
        compile_node(comp, pns->nodes[0]);
        EMIT_ARG(build, 1, MP_EMIT_BUILD_LIST);
    }
}
    85b0:	e086      	b.n	86c0 <compile_atom_bracket+0x130>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    85b2:	683b      	ldr	r3, [r7, #0]
    85b4:	689b      	ldr	r3, [r3, #8]
    85b6:	2b00      	cmp	r3, #0
    85b8:	d074      	beq.n	86a4 <compile_atom_bracket+0x114>
    85ba:	683b      	ldr	r3, [r7, #0]
    85bc:	689b      	ldr	r3, [r3, #8]
    85be:	f003 0303 	and.w	r3, r3, #3
    85c2:	2b00      	cmp	r3, #0
    85c4:	d16e      	bne.n	86a4 <compile_atom_bracket+0x114>
    85c6:	683b      	ldr	r3, [r7, #0]
    85c8:	689b      	ldr	r3, [r3, #8]
    85ca:	685b      	ldr	r3, [r3, #4]
    85cc:	b2db      	uxtb	r3, r3
    85ce:	2b8a      	cmp	r3, #138	; 0x8a
    85d0:	d168      	bne.n	86a4 <compile_atom_bracket+0x114>
        mp_parse_node_struct_t *pns2 = (mp_parse_node_struct_t*)pns->nodes[0];
    85d2:	683b      	ldr	r3, [r7, #0]
    85d4:	689b      	ldr	r3, [r3, #8]
    85d6:	60fb      	str	r3, [r7, #12]
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    85d8:	68fb      	ldr	r3, [r7, #12]
    85da:	68db      	ldr	r3, [r3, #12]
    85dc:	2b00      	cmp	r3, #0
    85de:	d04c      	beq.n	867a <compile_atom_bracket+0xea>
    85e0:	68fb      	ldr	r3, [r7, #12]
    85e2:	68db      	ldr	r3, [r3, #12]
    85e4:	f003 0303 	and.w	r3, r3, #3
    85e8:	2b00      	cmp	r3, #0
    85ea:	d146      	bne.n	867a <compile_atom_bracket+0xea>
            mp_parse_node_struct_t *pns3 = (mp_parse_node_struct_t*)pns2->nodes[1];
    85ec:	68fb      	ldr	r3, [r7, #12]
    85ee:	68db      	ldr	r3, [r3, #12]
    85f0:	60bb      	str	r3, [r7, #8]
            if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_testlist_comp_3b) {
    85f2:	68bb      	ldr	r3, [r7, #8]
    85f4:	685b      	ldr	r3, [r3, #4]
    85f6:	b2db      	uxtb	r3, r3
    85f8:	2b8d      	cmp	r3, #141	; 0x8d
    85fa:	d118      	bne.n	862e <compile_atom_bracket+0x9e>
                assert(MP_PARSE_NODE_IS_NULL(pns3->nodes[0]));
    85fc:	68bb      	ldr	r3, [r7, #8]
    85fe:	689b      	ldr	r3, [r3, #8]
    8600:	2b00      	cmp	r3, #0
    8602:	d006      	beq.n	8612 <compile_atom_bracket+0x82>
    8604:	4b30      	ldr	r3, [pc, #192]	; (86c8 <compile_atom_bracket+0x138>)
    8606:	4a31      	ldr	r2, [pc, #196]	; (86cc <compile_atom_bracket+0x13c>)
    8608:	f640 1167 	movw	r1, #2407	; 0x967
    860c:	4830      	ldr	r0, [pc, #192]	; (86d0 <compile_atom_bracket+0x140>)
    860e:	f012 fead 	bl	1b36c <__assert_func>
                compile_node(comp, pns2->nodes[0]);
    8612:	68fb      	ldr	r3, [r7, #12]
    8614:	689b      	ldr	r3, [r3, #8]
    8616:	4619      	mov	r1, r3
    8618:	6878      	ldr	r0, [r7, #4]
    861a:	f000 fa1b 	bl	8a54 <compile_node>
                EMIT_ARG(build, 1, MP_EMIT_BUILD_LIST);
    861e:	687b      	ldr	r3, [r7, #4]
    8620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8622:	2201      	movs	r2, #1
    8624:	2101      	movs	r1, #1
    8626:	4618      	mov	r0, r3
    8628:	f002 fa7c 	bl	ab24 <mp_emit_bc_build>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    862c:	e039      	b.n	86a2 <compile_atom_bracket+0x112>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_testlist_comp_3c) {
    862e:	68bb      	ldr	r3, [r7, #8]
    8630:	685b      	ldr	r3, [r3, #4]
    8632:	b2db      	uxtb	r3, r3
    8634:	2b8e      	cmp	r3, #142	; 0x8e
    8636:	d114      	bne.n	8662 <compile_atom_bracket+0xd2>
                compile_node(comp, pns2->nodes[0]);
    8638:	68fb      	ldr	r3, [r7, #12]
    863a:	689b      	ldr	r3, [r3, #8]
    863c:	4619      	mov	r1, r3
    863e:	6878      	ldr	r0, [r7, #4]
    8640:	f000 fa08 	bl	8a54 <compile_node>
                compile_generic_all_nodes(comp, pns3);
    8644:	68b9      	ldr	r1, [r7, #8]
    8646:	6878      	ldr	r0, [r7, #4]
    8648:	f7fc fc5e 	bl	4f08 <compile_generic_all_nodes>
                EMIT_ARG(build, 1 + MP_PARSE_NODE_STRUCT_NUM_NODES(pns3), MP_EMIT_BUILD_LIST);
    864c:	687b      	ldr	r3, [r7, #4]
    864e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8650:	68bb      	ldr	r3, [r7, #8]
    8652:	685b      	ldr	r3, [r3, #4]
    8654:	0a1b      	lsrs	r3, r3, #8
    8656:	3301      	adds	r3, #1
    8658:	2201      	movs	r2, #1
    865a:	4619      	mov	r1, r3
    865c:	f002 fa62 	bl	ab24 <mp_emit_bc_build>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    8660:	e01f      	b.n	86a2 <compile_atom_bracket+0x112>
            } else if (MP_PARSE_NODE_STRUCT_KIND(pns3) == PN_comp_for) {
    8662:	68bb      	ldr	r3, [r7, #8]
    8664:	685b      	ldr	r3, [r3, #4]
    8666:	b2db      	uxtb	r3, r3
    8668:	2b9f      	cmp	r3, #159	; 0x9f
    866a:	d105      	bne.n	8678 <compile_atom_bracket+0xe8>
                compile_comprehension(comp, pns2, SCOPE_LIST_COMP);
    866c:	2203      	movs	r2, #3
    866e:	68f9      	ldr	r1, [r7, #12]
    8670:	6878      	ldr	r0, [r7, #4]
    8672:	f7ff fe9f 	bl	83b4 <compile_comprehension>
        if (MP_PARSE_NODE_IS_STRUCT(pns2->nodes[1])) {
    8676:	e014      	b.n	86a2 <compile_atom_bracket+0x112>
                goto list_with_2_items;
    8678:	bf00      	nop
            compile_node(comp, pns2->nodes[0]);
    867a:	68fb      	ldr	r3, [r7, #12]
    867c:	689b      	ldr	r3, [r3, #8]
    867e:	4619      	mov	r1, r3
    8680:	6878      	ldr	r0, [r7, #4]
    8682:	f000 f9e7 	bl	8a54 <compile_node>
            compile_node(comp, pns2->nodes[1]);
    8686:	68fb      	ldr	r3, [r7, #12]
    8688:	68db      	ldr	r3, [r3, #12]
    868a:	4619      	mov	r1, r3
    868c:	6878      	ldr	r0, [r7, #4]
    868e:	f000 f9e1 	bl	8a54 <compile_node>
            EMIT_ARG(build, 2, MP_EMIT_BUILD_LIST);
    8692:	687b      	ldr	r3, [r7, #4]
    8694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8696:	2201      	movs	r2, #1
    8698:	2102      	movs	r1, #2
    869a:	4618      	mov	r0, r3
    869c:	f002 fa42 	bl	ab24 <mp_emit_bc_build>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)) {
    86a0:	e00e      	b.n	86c0 <compile_atom_bracket+0x130>
    86a2:	e00d      	b.n	86c0 <compile_atom_bracket+0x130>
        compile_node(comp, pns->nodes[0]);
    86a4:	683b      	ldr	r3, [r7, #0]
    86a6:	689b      	ldr	r3, [r3, #8]
    86a8:	4619      	mov	r1, r3
    86aa:	6878      	ldr	r0, [r7, #4]
    86ac:	f000 f9d2 	bl	8a54 <compile_node>
        EMIT_ARG(build, 1, MP_EMIT_BUILD_LIST);
    86b0:	687b      	ldr	r3, [r7, #4]
    86b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    86b4:	2201      	movs	r2, #1
    86b6:	2101      	movs	r1, #1
    86b8:	4618      	mov	r0, r3
    86ba:	f002 fa33 	bl	ab24 <mp_emit_bc_build>
}
    86be:	e7ff      	b.n	86c0 <compile_atom_bracket+0x130>
    86c0:	bf00      	nop
    86c2:	3710      	adds	r7, #16
    86c4:	46bd      	mov	sp, r7
    86c6:	bd80      	pop	{r7, pc}
    86c8:	0001eadc 	.word	0x0001eadc
    86cc:	0001f088 	.word	0x0001f088
    86d0:	0001e304 	.word	0x0001e304

000086d4 <compile_atom_brace>:

STATIC void compile_atom_brace(compiler_t *comp, mp_parse_node_struct_t *pns) {
    86d4:	b580      	push	{r7, lr}
    86d6:	b08a      	sub	sp, #40	; 0x28
    86d8:	af00      	add	r7, sp, #0
    86da:	6078      	str	r0, [r7, #4]
    86dc:	6039      	str	r1, [r7, #0]
    mp_parse_node_t pn = pns->nodes[0];
    86de:	683b      	ldr	r3, [r7, #0]
    86e0:	689b      	ldr	r3, [r3, #8]
    86e2:	623b      	str	r3, [r7, #32]
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    86e4:	6a3b      	ldr	r3, [r7, #32]
    86e6:	2b00      	cmp	r3, #0
    86e8:	d107      	bne.n	86fa <compile_atom_brace+0x26>
        // empty dict
        EMIT_ARG(build, 0, MP_EMIT_BUILD_MAP);
    86ea:	687b      	ldr	r3, [r7, #4]
    86ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    86ee:	2203      	movs	r2, #3
    86f0:	2100      	movs	r1, #0
    86f2:	4618      	mov	r0, r3
    86f4:	f002 fa16 	bl	ab24 <mp_emit_bc_build>
    86f8:	e0c3      	b.n	8882 <compile_atom_brace+0x1ae>
    } else if (MP_PARSE_NODE_IS_STRUCT(pn)) {
    86fa:	6a3b      	ldr	r3, [r7, #32]
    86fc:	2b00      	cmp	r3, #0
    86fe:	f000 80b9 	beq.w	8874 <compile_atom_brace+0x1a0>
    8702:	6a3b      	ldr	r3, [r7, #32]
    8704:	f003 0303 	and.w	r3, r3, #3
    8708:	2b00      	cmp	r3, #0
    870a:	f040 80b3 	bne.w	8874 <compile_atom_brace+0x1a0>
        pns = (mp_parse_node_struct_t*)pn;
    870e:	6a3b      	ldr	r3, [r7, #32]
    8710:	603b      	str	r3, [r7, #0]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    8712:	683b      	ldr	r3, [r7, #0]
    8714:	685b      	ldr	r3, [r3, #4]
    8716:	b2db      	uxtb	r3, r3
    8718:	2b32      	cmp	r3, #50	; 0x32
    871a:	d110      	bne.n	873e <compile_atom_brace+0x6a>
            // dict with one element
            EMIT_ARG(build, 1, MP_EMIT_BUILD_MAP);
    871c:	687b      	ldr	r3, [r7, #4]
    871e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8720:	2203      	movs	r2, #3
    8722:	2101      	movs	r1, #1
    8724:	4618      	mov	r0, r3
    8726:	f002 f9fd 	bl	ab24 <mp_emit_bc_build>
            compile_node(comp, pn);
    872a:	6a39      	ldr	r1, [r7, #32]
    872c:	6878      	ldr	r0, [r7, #4]
    872e:	f000 f991 	bl	8a54 <compile_node>
            EMIT(store_map);
    8732:	687b      	ldr	r3, [r7, #4]
    8734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8736:	4618      	mov	r0, r3
    8738:	f002 fa16 	bl	ab68 <mp_emit_bc_store_map>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    873c:	e0a1      	b.n	8882 <compile_atom_brace+0x1ae>
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker) {
    873e:	683b      	ldr	r3, [r7, #0]
    8740:	685b      	ldr	r3, [r3, #4]
    8742:	b2db      	uxtb	r3, r3
    8744:	2b92      	cmp	r3, #146	; 0x92
    8746:	f040 8094 	bne.w	8872 <compile_atom_brace+0x19e>
            assert(MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])); // should succeed
    874a:	683b      	ldr	r3, [r7, #0]
    874c:	68db      	ldr	r3, [r3, #12]
    874e:	2b00      	cmp	r3, #0
    8750:	d005      	beq.n	875e <compile_atom_brace+0x8a>
    8752:	683b      	ldr	r3, [r7, #0]
    8754:	68db      	ldr	r3, [r3, #12]
    8756:	f003 0303 	and.w	r3, r3, #3
    875a:	2b00      	cmp	r3, #0
    875c:	d006      	beq.n	876c <compile_atom_brace+0x98>
    875e:	4b4a      	ldr	r3, [pc, #296]	; (8888 <compile_atom_brace+0x1b4>)
    8760:	4a4a      	ldr	r2, [pc, #296]	; (888c <compile_atom_brace+0x1b8>)
    8762:	f640 1191 	movw	r1, #2449	; 0x991
    8766:	484a      	ldr	r0, [pc, #296]	; (8890 <compile_atom_brace+0x1bc>)
    8768:	f012 fe00 	bl	1b36c <__assert_func>
            mp_parse_node_struct_t *pns1 = (mp_parse_node_struct_t*)pns->nodes[1];
    876c:	683b      	ldr	r3, [r7, #0]
    876e:	68db      	ldr	r3, [r3, #12]
    8770:	61fb      	str	r3, [r7, #28]
            if (MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_dictorsetmaker_list) {
    8772:	69fb      	ldr	r3, [r7, #28]
    8774:	685b      	ldr	r3, [r3, #4]
    8776:	b2db      	uxtb	r3, r3
    8778:	2b94      	cmp	r3, #148	; 0x94
    877a:	d168      	bne.n	884e <compile_atom_brace+0x17a>
                // dict/set with multiple elements

                // get tail elements (2nd, 3rd, ...)
                mp_parse_node_t *nodes;
                int n = mp_parse_node_extract_list(&pns1->nodes[0], PN_dictorsetmaker_list2, &nodes);
    877c:	69fb      	ldr	r3, [r7, #28]
    877e:	3308      	adds	r3, #8
    8780:	f107 0208 	add.w	r2, r7, #8
    8784:	2195      	movs	r1, #149	; 0x95
    8786:	4618      	mov	r0, r3
    8788:	f7fb f9f0 	bl	3b6c <mp_parse_node_extract_list>
    878c:	61b8      	str	r0, [r7, #24]

                // first element sets whether it's a dict or set
                bool is_dict;
                if (!MICROPY_PY_BUILTINS_SET || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_dictorsetmaker_item)) {
                    // a dictionary
                    EMIT_ARG(build, 1 + n, MP_EMIT_BUILD_MAP);
    878e:	687b      	ldr	r3, [r7, #4]
    8790:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8792:	69bb      	ldr	r3, [r7, #24]
    8794:	3301      	adds	r3, #1
    8796:	2203      	movs	r2, #3
    8798:	4619      	mov	r1, r3
    879a:	f002 f9c3 	bl	ab24 <mp_emit_bc_build>
                    compile_node(comp, pns->nodes[0]);
    879e:	683b      	ldr	r3, [r7, #0]
    87a0:	689b      	ldr	r3, [r3, #8]
    87a2:	4619      	mov	r1, r3
    87a4:	6878      	ldr	r0, [r7, #4]
    87a6:	f000 f955 	bl	8a54 <compile_node>
                    EMIT(store_map);
    87aa:	687b      	ldr	r3, [r7, #4]
    87ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    87ae:	4618      	mov	r0, r3
    87b0:	f002 f9da 	bl	ab68 <mp_emit_bc_store_map>
                    is_dict = true;
    87b4:	2301      	movs	r3, #1
    87b6:	75fb      	strb	r3, [r7, #23]
                    compile_node(comp, pns->nodes[0]); // 1st value of set
                    is_dict = false;
                }

                // process rest of elements
                for (int i = 0; i < n; i++) {
    87b8:	2300      	movs	r3, #0
    87ba:	627b      	str	r3, [r7, #36]	; 0x24
    87bc:	e042      	b.n	8844 <compile_atom_brace+0x170>
                    mp_parse_node_t pn_i = nodes[i];
    87be:	68ba      	ldr	r2, [r7, #8]
    87c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    87c2:	009b      	lsls	r3, r3, #2
    87c4:	4413      	add	r3, r2
    87c6:	681b      	ldr	r3, [r3, #0]
    87c8:	613b      	str	r3, [r7, #16]
                    bool is_key_value = MP_PARSE_NODE_IS_STRUCT_KIND(pn_i, PN_dictorsetmaker_item);
    87ca:	693b      	ldr	r3, [r7, #16]
    87cc:	2b00      	cmp	r3, #0
    87ce:	d00b      	beq.n	87e8 <compile_atom_brace+0x114>
    87d0:	693b      	ldr	r3, [r7, #16]
    87d2:	f003 0303 	and.w	r3, r3, #3
    87d6:	2b00      	cmp	r3, #0
    87d8:	d106      	bne.n	87e8 <compile_atom_brace+0x114>
    87da:	693b      	ldr	r3, [r7, #16]
    87dc:	685b      	ldr	r3, [r3, #4]
    87de:	b2db      	uxtb	r3, r3
    87e0:	2b32      	cmp	r3, #50	; 0x32
    87e2:	d101      	bne.n	87e8 <compile_atom_brace+0x114>
    87e4:	2301      	movs	r3, #1
    87e6:	e000      	b.n	87ea <compile_atom_brace+0x116>
    87e8:	2300      	movs	r3, #0
    87ea:	73fb      	strb	r3, [r7, #15]
    87ec:	7bfb      	ldrb	r3, [r7, #15]
    87ee:	f003 0301 	and.w	r3, r3, #1
    87f2:	73fb      	strb	r3, [r7, #15]
                    compile_node(comp, pn_i);
    87f4:	6939      	ldr	r1, [r7, #16]
    87f6:	6878      	ldr	r0, [r7, #4]
    87f8:	f000 f92c 	bl	8a54 <compile_node>
                    if (is_dict) {
    87fc:	7dfb      	ldrb	r3, [r7, #23]
    87fe:	2b00      	cmp	r3, #0
    8800:	d012      	beq.n	8828 <compile_atom_brace+0x154>
                        if (!is_key_value) {
    8802:	7bfb      	ldrb	r3, [r7, #15]
    8804:	f083 0301 	eor.w	r3, r3, #1
    8808:	b2db      	uxtb	r3, r3
    880a:	2b00      	cmp	r3, #0
    880c:	d006      	beq.n	881c <compile_atom_brace+0x148>
                            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "invalid syntax");
    880e:	683b      	ldr	r3, [r7, #0]
    8810:	4a20      	ldr	r2, [pc, #128]	; (8894 <compile_atom_brace+0x1c0>)
    8812:	4619      	mov	r1, r3
    8814:	6878      	ldr	r0, [r7, #4]
    8816:	f7fc faa3 	bl	4d60 <compile_syntax_error>
                            } else {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "expecting key:value for dict");
                            }
                            return;
    881a:	e032      	b.n	8882 <compile_atom_brace+0x1ae>
                        }
                        EMIT(store_map);
    881c:	687b      	ldr	r3, [r7, #4]
    881e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8820:	4618      	mov	r0, r3
    8822:	f002 f9a1 	bl	ab68 <mp_emit_bc_store_map>
    8826:	e00a      	b.n	883e <compile_atom_brace+0x16a>
                    } else {
                        if (is_key_value) {
    8828:	7bfb      	ldrb	r3, [r7, #15]
    882a:	2b00      	cmp	r3, #0
    882c:	d007      	beq.n	883e <compile_atom_brace+0x16a>
                            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "invalid syntax");
    882e:	683b      	ldr	r3, [r7, #0]
    8830:	4a18      	ldr	r2, [pc, #96]	; (8894 <compile_atom_brace+0x1c0>)
    8832:	4619      	mov	r1, r3
    8834:	6878      	ldr	r0, [r7, #4]
    8836:	f7fc fa93 	bl	4d60 <compile_syntax_error>
                            } else {
                                compile_syntax_error(comp, (mp_parse_node_t)pns, "expecting just a value for set");
                            }
                            return;
    883a:	bf00      	nop
    883c:	e021      	b.n	8882 <compile_atom_brace+0x1ae>
                for (int i = 0; i < n; i++) {
    883e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8840:	3301      	adds	r3, #1
    8842:	627b      	str	r3, [r7, #36]	; 0x24
    8844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    8846:	69bb      	ldr	r3, [r7, #24]
    8848:	429a      	cmp	r2, r3
    884a:	dbb8      	blt.n	87be <compile_atom_brace+0xea>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    884c:	e019      	b.n	8882 <compile_atom_brace+0x1ae>
                if (!is_dict) {
                    EMIT_ARG(build, 1 + n, MP_EMIT_BUILD_SET);
                }
                #endif
            } else {
                assert(MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_comp_for); // should be
    884e:	69fb      	ldr	r3, [r7, #28]
    8850:	685b      	ldr	r3, [r3, #4]
    8852:	b2db      	uxtb	r3, r3
    8854:	2b9f      	cmp	r3, #159	; 0x9f
    8856:	d006      	beq.n	8866 <compile_atom_brace+0x192>
    8858:	4b0f      	ldr	r3, [pc, #60]	; (8898 <compile_atom_brace+0x1c4>)
    885a:	4a0c      	ldr	r2, [pc, #48]	; (888c <compile_atom_brace+0x1b8>)
    885c:	f640 11ca 	movw	r1, #2506	; 0x9ca
    8860:	480b      	ldr	r0, [pc, #44]	; (8890 <compile_atom_brace+0x1bc>)
    8862:	f012 fd83 	bl	1b36c <__assert_func>
                // dict/set comprehension
                if (!MICROPY_PY_BUILTINS_SET || MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_dictorsetmaker_item)) {
                    // a dictionary comprehension
                    compile_comprehension(comp, pns, SCOPE_DICT_COMP);
    8866:	2204      	movs	r2, #4
    8868:	6839      	ldr	r1, [r7, #0]
    886a:	6878      	ldr	r0, [r7, #4]
    886c:	f7ff fda2 	bl	83b4 <compile_comprehension>
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == PN_dictorsetmaker_item) {
    8870:	e007      	b.n	8882 <compile_atom_brace+0x1ae>
                    compile_comprehension(comp, pns, SCOPE_SET_COMP);
                }
            }
        } else {
            // set with one element
            goto set_with_one_element;
    8872:	bf00      	nop
        set_with_one_element:
        #if MICROPY_PY_BUILTINS_SET
        compile_node(comp, pn);
        EMIT_ARG(build, 1, MP_EMIT_BUILD_SET);
        #else
        assert(0);
    8874:	4b09      	ldr	r3, [pc, #36]	; (889c <compile_atom_brace+0x1c8>)
    8876:	4a05      	ldr	r2, [pc, #20]	; (888c <compile_atom_brace+0x1b8>)
    8878:	f640 11df 	movw	r1, #2527	; 0x9df
    887c:	4804      	ldr	r0, [pc, #16]	; (8890 <compile_atom_brace+0x1bc>)
    887e:	f012 fd75 	bl	1b36c <__assert_func>
        #endif
    }
}
    8882:	3728      	adds	r7, #40	; 0x28
    8884:	46bd      	mov	sp, r7
    8886:	bd80      	pop	{r7, pc}
    8888:	0001e870 	.word	0x0001e870
    888c:	0001f0a0 	.word	0x0001f0a0
    8890:	0001e304 	.word	0x0001e304
    8894:	0001eb04 	.word	0x0001eb04
    8898:	0001eb14 	.word	0x0001eb14
    889c:	0001eb44 	.word	0x0001eb44

000088a0 <compile_trailer_paren>:

STATIC void compile_trailer_paren(compiler_t *comp, mp_parse_node_struct_t *pns) {
    88a0:	b580      	push	{r7, lr}
    88a2:	b082      	sub	sp, #8
    88a4:	af00      	add	r7, sp, #0
    88a6:	6078      	str	r0, [r7, #4]
    88a8:	6039      	str	r1, [r7, #0]
    compile_trailer_paren_helper(comp, pns->nodes[0], false, 0);
    88aa:	683b      	ldr	r3, [r7, #0]
    88ac:	6899      	ldr	r1, [r3, #8]
    88ae:	2300      	movs	r3, #0
    88b0:	2200      	movs	r2, #0
    88b2:	6878      	ldr	r0, [r7, #4]
    88b4:	f7ff fc6a 	bl	818c <compile_trailer_paren_helper>
}
    88b8:	bf00      	nop
    88ba:	3708      	adds	r7, #8
    88bc:	46bd      	mov	sp, r7
    88be:	bd80      	pop	{r7, pc}

000088c0 <compile_trailer_bracket>:

STATIC void compile_trailer_bracket(compiler_t *comp, mp_parse_node_struct_t *pns) {
    88c0:	b580      	push	{r7, lr}
    88c2:	b082      	sub	sp, #8
    88c4:	af00      	add	r7, sp, #0
    88c6:	6078      	str	r0, [r7, #4]
    88c8:	6039      	str	r1, [r7, #0]
    // object who's index we want is on top of stack
    compile_node(comp, pns->nodes[0]); // the index
    88ca:	683b      	ldr	r3, [r7, #0]
    88cc:	689b      	ldr	r3, [r3, #8]
    88ce:	4619      	mov	r1, r3
    88d0:	6878      	ldr	r0, [r7, #4]
    88d2:	f000 f8bf 	bl	8a54 <compile_node>
    EMIT_ARG(subscr, MP_EMIT_SUBSCR_LOAD);
    88d6:	687b      	ldr	r3, [r7, #4]
    88d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    88da:	2100      	movs	r1, #0
    88dc:	4618      	mov	r0, r3
    88de:	f001 fe81 	bl	a5e4 <mp_emit_bc_subscr>
}
    88e2:	bf00      	nop
    88e4:	3708      	adds	r7, #8
    88e6:	46bd      	mov	sp, r7
    88e8:	bd80      	pop	{r7, pc}
    88ea:	bf00      	nop

000088ec <compile_trailer_period>:

STATIC void compile_trailer_period(compiler_t *comp, mp_parse_node_struct_t *pns) {
    88ec:	b580      	push	{r7, lr}
    88ee:	b082      	sub	sp, #8
    88f0:	af00      	add	r7, sp, #0
    88f2:	6078      	str	r0, [r7, #4]
    88f4:	6039      	str	r1, [r7, #0]
    // object who's attribute we want is on top of stack
    EMIT_ARG(attr, MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]), MP_EMIT_ATTR_LOAD); // attribute to get
    88f6:	687b      	ldr	r3, [r7, #4]
    88f8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    88fa:	683b      	ldr	r3, [r7, #0]
    88fc:	689b      	ldr	r3, [r3, #8]
    88fe:	091b      	lsrs	r3, r3, #4
    8900:	2200      	movs	r2, #0
    8902:	4619      	mov	r1, r3
    8904:	f001 fe96 	bl	a634 <mp_emit_bc_attr>
}
    8908:	bf00      	nop
    890a:	3708      	adds	r7, #8
    890c:	46bd      	mov	sp, r7
    890e:	bd80      	pop	{r7, pc}

00008910 <compile_dictorsetmaker_item>:
    EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    compile_subscript_3_helper(comp, pns);
}
#endif // MICROPY_PY_BUILTINS_SLICE

STATIC void compile_dictorsetmaker_item(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8910:	b580      	push	{r7, lr}
    8912:	b082      	sub	sp, #8
    8914:	af00      	add	r7, sp, #0
    8916:	6078      	str	r0, [r7, #4]
    8918:	6039      	str	r1, [r7, #0]
    // if this is called then we are compiling a dict key:value pair
    compile_node(comp, pns->nodes[1]); // value
    891a:	683b      	ldr	r3, [r7, #0]
    891c:	68db      	ldr	r3, [r3, #12]
    891e:	4619      	mov	r1, r3
    8920:	6878      	ldr	r0, [r7, #4]
    8922:	f000 f897 	bl	8a54 <compile_node>
    compile_node(comp, pns->nodes[0]); // key
    8926:	683b      	ldr	r3, [r7, #0]
    8928:	689b      	ldr	r3, [r3, #8]
    892a:	4619      	mov	r1, r3
    892c:	6878      	ldr	r0, [r7, #4]
    892e:	f000 f891 	bl	8a54 <compile_node>
}
    8932:	bf00      	nop
    8934:	3708      	adds	r7, #8
    8936:	46bd      	mov	sp, r7
    8938:	bd80      	pop	{r7, pc}
    893a:	bf00      	nop

0000893c <compile_classdef>:

STATIC void compile_classdef(compiler_t *comp, mp_parse_node_struct_t *pns) {
    893c:	b580      	push	{r7, lr}
    893e:	b084      	sub	sp, #16
    8940:	af00      	add	r7, sp, #0
    8942:	6078      	str	r0, [r7, #4]
    8944:	6039      	str	r1, [r7, #0]
    qstr cname = compile_classdef_helper(comp, pns, comp->scope_cur->emit_options);
    8946:	687b      	ldr	r3, [r7, #4]
    8948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    894a:	7e5b      	ldrb	r3, [r3, #25]
    894c:	461a      	mov	r2, r3
    894e:	6839      	ldr	r1, [r7, #0]
    8950:	6878      	ldr	r0, [r7, #4]
    8952:	f7fd f91d 	bl	5b90 <compile_classdef_helper>
    8956:	60f8      	str	r0, [r7, #12]
    // store class object into class name
    compile_store_id(comp, cname);
    8958:	68f9      	ldr	r1, [r7, #12]
    895a:	6878      	ldr	r0, [r7, #4]
    895c:	f7fc fb20 	bl	4fa0 <compile_store_id>
}
    8960:	bf00      	nop
    8962:	3710      	adds	r7, #16
    8964:	46bd      	mov	sp, r7
    8966:	bd80      	pop	{r7, pc}

00008968 <compile_yield_expr>:

STATIC void compile_yield_expr(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8968:	b580      	push	{r7, lr}
    896a:	b082      	sub	sp, #8
    896c:	af00      	add	r7, sp, #0
    896e:	6078      	str	r0, [r7, #4]
    8970:	6039      	str	r1, [r7, #0]
    if (comp->scope_cur->kind != SCOPE_FUNCTION && comp->scope_cur->kind != SCOPE_LAMBDA) {
    8972:	687b      	ldr	r3, [r7, #4]
    8974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8976:	681b      	ldr	r3, [r3, #0]
    8978:	2b07      	cmp	r3, #7
    897a:	d00b      	beq.n	8994 <compile_yield_expr+0x2c>
    897c:	687b      	ldr	r3, [r7, #4]
    897e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8980:	681b      	ldr	r3, [r3, #0]
    8982:	2b02      	cmp	r3, #2
    8984:	d006      	beq.n	8994 <compile_yield_expr+0x2c>
        compile_syntax_error(comp, (mp_parse_node_t)pns, "'yield' outside function");
    8986:	683b      	ldr	r3, [r7, #0]
    8988:	4a21      	ldr	r2, [pc, #132]	; (8a10 <compile_yield_expr+0xa8>)
    898a:	4619      	mov	r1, r3
    898c:	6878      	ldr	r0, [r7, #4]
    898e:	f7fc f9e7 	bl	4d60 <compile_syntax_error>
        return;
    8992:	e039      	b.n	8a08 <compile_yield_expr+0xa0>
    }
    if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    8994:	683b      	ldr	r3, [r7, #0]
    8996:	689b      	ldr	r3, [r3, #8]
    8998:	2b00      	cmp	r3, #0
    899a:	d10c      	bne.n	89b6 <compile_yield_expr+0x4e>
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    899c:	687b      	ldr	r3, [r7, #4]
    899e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    89a0:	210e      	movs	r1, #14
    89a2:	4618      	mov	r0, r3
    89a4:	f001 fd1e 	bl	a3e4 <mp_emit_bc_load_const_tok>
        EMIT_ARG(yield, MP_EMIT_YIELD_VALUE);
    89a8:	687b      	ldr	r3, [r7, #4]
    89aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    89ac:	2100      	movs	r1, #0
    89ae:	4618      	mov	r0, r3
    89b0:	f002 fa56 	bl	ae60 <mp_emit_bc_yield>
    89b4:	e028      	b.n	8a08 <compile_yield_expr+0xa0>
    } else if (MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_yield_arg_from)) {
    89b6:	683b      	ldr	r3, [r7, #0]
    89b8:	689b      	ldr	r3, [r3, #8]
    89ba:	2b00      	cmp	r3, #0
    89bc:	d018      	beq.n	89f0 <compile_yield_expr+0x88>
    89be:	683b      	ldr	r3, [r7, #0]
    89c0:	689b      	ldr	r3, [r3, #8]
    89c2:	f003 0303 	and.w	r3, r3, #3
    89c6:	2b00      	cmp	r3, #0
    89c8:	d112      	bne.n	89f0 <compile_yield_expr+0x88>
    89ca:	683b      	ldr	r3, [r7, #0]
    89cc:	689b      	ldr	r3, [r3, #8]
    89ce:	685b      	ldr	r3, [r3, #4]
    89d0:	b2db      	uxtb	r3, r3
    89d2:	2ba2      	cmp	r3, #162	; 0xa2
    89d4:	d10c      	bne.n	89f0 <compile_yield_expr+0x88>
        pns = (mp_parse_node_struct_t*)pns->nodes[0];
    89d6:	683b      	ldr	r3, [r7, #0]
    89d8:	689b      	ldr	r3, [r3, #8]
    89da:	603b      	str	r3, [r7, #0]
        compile_node(comp, pns->nodes[0]);
    89dc:	683b      	ldr	r3, [r7, #0]
    89de:	689b      	ldr	r3, [r3, #8]
    89e0:	4619      	mov	r1, r3
    89e2:	6878      	ldr	r0, [r7, #4]
    89e4:	f000 f836 	bl	8a54 <compile_node>
        compile_yield_from(comp);
    89e8:	6878      	ldr	r0, [r7, #4]
    89ea:	f7fe fe5b 	bl	76a4 <compile_yield_from>
    89ee:	e00b      	b.n	8a08 <compile_yield_expr+0xa0>
    } else {
        compile_node(comp, pns->nodes[0]);
    89f0:	683b      	ldr	r3, [r7, #0]
    89f2:	689b      	ldr	r3, [r3, #8]
    89f4:	4619      	mov	r1, r3
    89f6:	6878      	ldr	r0, [r7, #4]
    89f8:	f000 f82c 	bl	8a54 <compile_node>
        EMIT_ARG(yield, MP_EMIT_YIELD_VALUE);
    89fc:	687b      	ldr	r3, [r7, #4]
    89fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8a00:	2100      	movs	r1, #0
    8a02:	4618      	mov	r0, r3
    8a04:	f002 fa2c 	bl	ae60 <mp_emit_bc_yield>
    }
}
    8a08:	3708      	adds	r7, #8
    8a0a:	46bd      	mov	sp, r7
    8a0c:	bd80      	pop	{r7, pc}
    8a0e:	bf00      	nop
    8a10:	0001eb48 	.word	0x0001eb48

00008a14 <get_const_object>:
    compile_atom_expr_normal(comp, pns);
    compile_yield_from(comp);
}
#endif

STATIC mp_obj_t get_const_object(mp_parse_node_struct_t *pns) {
    8a14:	b480      	push	{r7}
    8a16:	b083      	sub	sp, #12
    8a18:	af00      	add	r7, sp, #0
    8a1a:	6078      	str	r0, [r7, #4]
    #if MICROPY_OBJ_REPR == MICROPY_OBJ_REPR_D
    // nodes are 32-bit pointers, but need to extract 64-bit object
    return (uint64_t)pns->nodes[0] | ((uint64_t)pns->nodes[1] << 32);
    #else
    return (mp_obj_t)pns->nodes[0];
    8a1c:	687b      	ldr	r3, [r7, #4]
    8a1e:	689b      	ldr	r3, [r3, #8]
    #endif
}
    8a20:	4618      	mov	r0, r3
    8a22:	370c      	adds	r7, #12
    8a24:	46bd      	mov	sp, r7
    8a26:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a2a:	4770      	bx	lr

00008a2c <compile_const_object>:

STATIC void compile_const_object(compiler_t *comp, mp_parse_node_struct_t *pns) {
    8a2c:	b590      	push	{r4, r7, lr}
    8a2e:	b083      	sub	sp, #12
    8a30:	af00      	add	r7, sp, #0
    8a32:	6078      	str	r0, [r7, #4]
    8a34:	6039      	str	r1, [r7, #0]
    EMIT_ARG(load_const_obj, get_const_object(pns));
    8a36:	687b      	ldr	r3, [r7, #4]
    8a38:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    8a3a:	6838      	ldr	r0, [r7, #0]
    8a3c:	f7ff ffea 	bl	8a14 <get_const_object>
    8a40:	4603      	mov	r3, r0
    8a42:	4619      	mov	r1, r3
    8a44:	4620      	mov	r0, r4
    8a46:	f001 fd3d 	bl	a4c4 <mp_emit_bc_load_const_obj>
}
    8a4a:	bf00      	nop
    8a4c:	370c      	adds	r7, #12
    8a4e:	46bd      	mov	sp, r7
    8a50:	bd90      	pop	{r4, r7, pc}
    8a52:	bf00      	nop

00008a54 <compile_node>:
#undef DEF_RULE
#undef DEF_RULE_NC
    compile_const_object,
};

STATIC void compile_node(compiler_t *comp, mp_parse_node_t pn) {
    8a54:	b590      	push	{r4, r7, lr}
    8a56:	b089      	sub	sp, #36	; 0x24
    8a58:	af00      	add	r7, sp, #0
    8a5a:	6078      	str	r0, [r7, #4]
    8a5c:	6039      	str	r1, [r7, #0]
    if (MP_PARSE_NODE_IS_NULL(pn)) {
    8a5e:	683b      	ldr	r3, [r7, #0]
    8a60:	2b00      	cmp	r3, #0
    8a62:	d078      	beq.n	8b56 <compile_node+0x102>
        // pass
    } else if (MP_PARSE_NODE_IS_SMALL_INT(pn)) {
    8a64:	683b      	ldr	r3, [r7, #0]
    8a66:	f003 0301 	and.w	r3, r3, #1
    8a6a:	2b00      	cmp	r3, #0
    8a6c:	d009      	beq.n	8a82 <compile_node+0x2e>
        mp_int_t arg = MP_PARSE_NODE_LEAF_SMALL_INT(pn);
    8a6e:	683b      	ldr	r3, [r7, #0]
    8a70:	105b      	asrs	r3, r3, #1
    8a72:	61fb      	str	r3, [r7, #28]
            } else {
                EMIT_ARG(load_const_obj, mp_obj_new_int_from_ll(arg));
            }
        }
        #else
        EMIT_ARG(load_const_small_int, arg);
    8a74:	687b      	ldr	r3, [r7, #4]
    8a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8a78:	69f9      	ldr	r1, [r7, #28]
    8a7a:	4618      	mov	r0, r3
    8a7c:	f001 fcee 	bl	a45c <mp_emit_bc_load_const_small_int>
        EMIT_ARG(set_source_line, pns->source_line);
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) <= PN_const_object);
        compile_function_t f = compile_function[MP_PARSE_NODE_STRUCT_KIND(pns)];
        f(comp, pns);
    }
}
    8a80:	e069      	b.n	8b56 <compile_node+0x102>
    } else if (MP_PARSE_NODE_IS_LEAF(pn)) {
    8a82:	683b      	ldr	r3, [r7, #0]
    8a84:	f003 0303 	and.w	r3, r3, #3
    8a88:	2b00      	cmp	r3, #0
    8a8a:	d041      	beq.n	8b10 <compile_node+0xbc>
        uintptr_t arg = MP_PARSE_NODE_LEAF_ARG(pn);
    8a8c:	683b      	ldr	r3, [r7, #0]
    8a8e:	091b      	lsrs	r3, r3, #4
    8a90:	61bb      	str	r3, [r7, #24]
        switch (MP_PARSE_NODE_LEAF_KIND(pn)) {
    8a92:	683b      	ldr	r3, [r7, #0]
    8a94:	f003 030f 	and.w	r3, r3, #15
    8a98:	2b06      	cmp	r3, #6
    8a9a:	d008      	beq.n	8aae <compile_node+0x5a>
    8a9c:	2b0a      	cmp	r3, #10
    8a9e:	d00d      	beq.n	8abc <compile_node+0x68>
    8aa0:	2b02      	cmp	r3, #2
    8aa2:	d12a      	bne.n	8afa <compile_node+0xa6>
            case MP_PARSE_NODE_ID: compile_load_id(comp, arg); break;
    8aa4:	69b9      	ldr	r1, [r7, #24]
    8aa6:	6878      	ldr	r0, [r7, #4]
    8aa8:	f7fc fa5c 	bl	4f64 <compile_load_id>
    8aac:	e053      	b.n	8b56 <compile_node+0x102>
            case MP_PARSE_NODE_STRING: EMIT_ARG(load_const_str, arg); break;
    8aae:	687b      	ldr	r3, [r7, #4]
    8ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8ab2:	69b9      	ldr	r1, [r7, #24]
    8ab4:	4618      	mov	r0, r3
    8ab6:	f001 fcf3 	bl	a4a0 <mp_emit_bc_load_const_str>
    8aba:	e04c      	b.n	8b56 <compile_node+0x102>
                if (comp->pass != MP_PASS_EMIT) {
    8abc:	687b      	ldr	r3, [r7, #4]
    8abe:	795b      	ldrb	r3, [r3, #5]
    8ac0:	2b04      	cmp	r3, #4
    8ac2:	d006      	beq.n	8ad2 <compile_node+0x7e>
                    EMIT_ARG(load_const_obj, mp_const_none);
    8ac4:	687b      	ldr	r3, [r7, #4]
    8ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8ac8:	4925      	ldr	r1, [pc, #148]	; (8b60 <compile_node+0x10c>)
    8aca:	4618      	mov	r0, r3
    8acc:	f001 fcfa 	bl	a4c4 <mp_emit_bc_load_const_obj>
                break;
    8ad0:	e041      	b.n	8b56 <compile_node+0x102>
                    const byte *data = qstr_data(arg, &len);
    8ad2:	f107 0308 	add.w	r3, r7, #8
    8ad6:	4619      	mov	r1, r3
    8ad8:	69b8      	ldr	r0, [r7, #24]
    8ada:	f7f8 fb99 	bl	1210 <qstr_data>
    8ade:	6178      	str	r0, [r7, #20]
                    EMIT_ARG(load_const_obj, mp_obj_new_bytes(data, len));
    8ae0:	687b      	ldr	r3, [r7, #4]
    8ae2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    8ae4:	68bb      	ldr	r3, [r7, #8]
    8ae6:	4619      	mov	r1, r3
    8ae8:	6978      	ldr	r0, [r7, #20]
    8aea:	f00c fcd3 	bl	15494 <mp_obj_new_bytes>
    8aee:	4603      	mov	r3, r0
    8af0:	4619      	mov	r1, r3
    8af2:	4620      	mov	r0, r4
    8af4:	f001 fce6 	bl	a4c4 <mp_emit_bc_load_const_obj>
                break;
    8af8:	e02d      	b.n	8b56 <compile_node+0x102>
                if (arg == MP_TOKEN_NEWLINE) {
    8afa:	69bb      	ldr	r3, [r7, #24]
    8afc:	2b04      	cmp	r3, #4
    8afe:	d029      	beq.n	8b54 <compile_node+0x100>
                  EMIT_ARG(load_const_tok, arg);
    8b00:	687b      	ldr	r3, [r7, #4]
    8b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8b04:	69b9      	ldr	r1, [r7, #24]
    8b06:	4618      	mov	r0, r3
    8b08:	f001 fc6c 	bl	a3e4 <mp_emit_bc_load_const_tok>
                break;
    8b0c:	bf00      	nop
    8b0e:	e021      	b.n	8b54 <compile_node+0x100>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    8b10:	683b      	ldr	r3, [r7, #0]
    8b12:	613b      	str	r3, [r7, #16]
        EMIT_ARG(set_source_line, pns->source_line);
    8b14:	687b      	ldr	r3, [r7, #4]
    8b16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8b18:	693b      	ldr	r3, [r7, #16]
    8b1a:	681b      	ldr	r3, [r3, #0]
    8b1c:	4619      	mov	r1, r3
    8b1e:	4610      	mov	r0, r2
    8b20:	f001 fbd6 	bl	a2d0 <mp_emit_bc_set_source_line>
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) <= PN_const_object);
    8b24:	693b      	ldr	r3, [r7, #16]
    8b26:	685b      	ldr	r3, [r3, #4]
    8b28:	b2db      	uxtb	r3, r3
    8b2a:	2b35      	cmp	r3, #53	; 0x35
    8b2c:	d906      	bls.n	8b3c <compile_node+0xe8>
    8b2e:	4b0d      	ldr	r3, [pc, #52]	; (8b64 <compile_node+0x110>)
    8b30:	4a0d      	ldr	r2, [pc, #52]	; (8b68 <compile_node+0x114>)
    8b32:	f640 21a2 	movw	r1, #2722	; 0xaa2
    8b36:	480d      	ldr	r0, [pc, #52]	; (8b6c <compile_node+0x118>)
    8b38:	f012 fc18 	bl	1b36c <__assert_func>
        compile_function_t f = compile_function[MP_PARSE_NODE_STRUCT_KIND(pns)];
    8b3c:	693b      	ldr	r3, [r7, #16]
    8b3e:	685b      	ldr	r3, [r3, #4]
    8b40:	b2db      	uxtb	r3, r3
    8b42:	4a0b      	ldr	r2, [pc, #44]	; (8b70 <compile_node+0x11c>)
    8b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b48:	60fb      	str	r3, [r7, #12]
        f(comp, pns);
    8b4a:	68fb      	ldr	r3, [r7, #12]
    8b4c:	6939      	ldr	r1, [r7, #16]
    8b4e:	6878      	ldr	r0, [r7, #4]
    8b50:	4798      	blx	r3
}
    8b52:	e000      	b.n	8b56 <compile_node+0x102>
                break;
    8b54:	bf00      	nop
}
    8b56:	bf00      	nop
    8b58:	3724      	adds	r7, #36	; 0x24
    8b5a:	46bd      	mov	sp, r7
    8b5c:	bd90      	pop	{r4, r7, pc}
    8b5e:	bf00      	nop
    8b60:	00021534 	.word	0x00021534
    8b64:	0001ec3c 	.word	0x0001ec3c
    8b68:	0001f0b4 	.word	0x0001f0b4
    8b6c:	0001e304 	.word	0x0001e304
    8b70:	0001eb64 	.word	0x0001eb64

00008b74 <compile_scope_func_lambda_param>:

STATIC void compile_scope_func_lambda_param(compiler_t *comp, mp_parse_node_t pn, pn_kind_t pn_name, pn_kind_t pn_star, pn_kind_t pn_dbl_star) {
    8b74:	b580      	push	{r7, lr}
    8b76:	b08a      	sub	sp, #40	; 0x28
    8b78:	af00      	add	r7, sp, #0
    8b7a:	60f8      	str	r0, [r7, #12]
    8b7c:	60b9      	str	r1, [r7, #8]
    8b7e:	607a      	str	r2, [r7, #4]
    8b80:	603b      	str	r3, [r7, #0]
    // check that **kw is last
    if ((comp->scope_cur->scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
    8b82:	68fb      	ldr	r3, [r7, #12]
    8b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b86:	7e1b      	ldrb	r3, [r3, #24]
    8b88:	f003 0302 	and.w	r3, r3, #2
    8b8c:	2b00      	cmp	r3, #0
    8b8e:	d005      	beq.n	8b9c <compile_scope_func_lambda_param+0x28>
        compile_syntax_error(comp, pn, "invalid syntax");
    8b90:	4a75      	ldr	r2, [pc, #468]	; (8d68 <compile_scope_func_lambda_param+0x1f4>)
    8b92:	68b9      	ldr	r1, [r7, #8]
    8b94:	68f8      	ldr	r0, [r7, #12]
    8b96:	f7fc f8e3 	bl	4d60 <compile_syntax_error>
        return;
    8b9a:	e0e2      	b.n	8d62 <compile_scope_func_lambda_param+0x1ee>
    }

    qstr param_name = MP_QSTR_NULL;
    8b9c:	2300      	movs	r3, #0
    8b9e:	627b      	str	r3, [r7, #36]	; 0x24
    uint param_flag = ID_FLAG_IS_PARAM;
    8ba0:	2301      	movs	r3, #1
    8ba2:	623b      	str	r3, [r7, #32]
    if (MP_PARSE_NODE_IS_ID(pn)) {
    8ba4:	68bb      	ldr	r3, [r7, #8]
    8ba6:	f003 030f 	and.w	r3, r3, #15
    8baa:	2b02      	cmp	r3, #2
    8bac:	d118      	bne.n	8be0 <compile_scope_func_lambda_param+0x6c>
        param_name = MP_PARSE_NODE_LEAF_ARG(pn);
    8bae:	68bb      	ldr	r3, [r7, #8]
    8bb0:	091b      	lsrs	r3, r3, #4
    8bb2:	627b      	str	r3, [r7, #36]	; 0x24
        if (comp->have_star) {
    8bb4:	68fb      	ldr	r3, [r7, #12]
    8bb6:	799b      	ldrb	r3, [r3, #6]
    8bb8:	2b00      	cmp	r3, #0
    8bba:	d008      	beq.n	8bce <compile_scope_func_lambda_param+0x5a>
            // comes after a star, so counts as a keyword-only parameter
            comp->scope_cur->num_kwonly_args += 1;
    8bbc:	68fb      	ldr	r3, [r7, #12]
    8bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8bc0:	68fa      	ldr	r2, [r7, #12]
    8bc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8bc4:	8b92      	ldrh	r2, [r2, #28]
    8bc6:	3201      	adds	r2, #1
    8bc8:	b292      	uxth	r2, r2
    8bca:	839a      	strh	r2, [r3, #28]
    8bcc:	e0aa      	b.n	8d24 <compile_scope_func_lambda_param+0x1b0>
        } else {
            // comes before a star, so counts as a positional parameter
            comp->scope_cur->num_pos_args += 1;
    8bce:	68fb      	ldr	r3, [r7, #12]
    8bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8bd2:	68fa      	ldr	r2, [r7, #12]
    8bd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8bd6:	8b52      	ldrh	r2, [r2, #26]
    8bd8:	3201      	adds	r2, #1
    8bda:	b292      	uxth	r2, r2
    8bdc:	835a      	strh	r2, [r3, #26]
    8bde:	e0a1      	b.n	8d24 <compile_scope_func_lambda_param+0x1b0>
        }
    } else {
        assert(MP_PARSE_NODE_IS_STRUCT(pn));
    8be0:	68bb      	ldr	r3, [r7, #8]
    8be2:	2b00      	cmp	r3, #0
    8be4:	d004      	beq.n	8bf0 <compile_scope_func_lambda_param+0x7c>
    8be6:	68bb      	ldr	r3, [r7, #8]
    8be8:	f003 0303 	and.w	r3, r3, #3
    8bec:	2b00      	cmp	r3, #0
    8bee:	d006      	beq.n	8bfe <compile_scope_func_lambda_param+0x8a>
    8bf0:	4b5e      	ldr	r3, [pc, #376]	; (8d6c <compile_scope_func_lambda_param+0x1f8>)
    8bf2:	4a5f      	ldr	r2, [pc, #380]	; (8d70 <compile_scope_func_lambda_param+0x1fc>)
    8bf4:	f640 21bb 	movw	r1, #2747	; 0xabb
    8bf8:	485e      	ldr	r0, [pc, #376]	; (8d74 <compile_scope_func_lambda_param+0x200>)
    8bfa:	f012 fbb7 	bl	1b36c <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)pn;
    8bfe:	68bb      	ldr	r3, [r7, #8]
    8c00:	61fb      	str	r3, [r7, #28]
        if (MP_PARSE_NODE_STRUCT_KIND(pns) == pn_name) {
    8c02:	69fb      	ldr	r3, [r7, #28]
    8c04:	685b      	ldr	r3, [r3, #4]
    8c06:	b2da      	uxtb	r2, r3
    8c08:	687b      	ldr	r3, [r7, #4]
    8c0a:	429a      	cmp	r2, r3
    8c0c:	d119      	bne.n	8c42 <compile_scope_func_lambda_param+0xce>
            param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8c0e:	69fb      	ldr	r3, [r7, #28]
    8c10:	689b      	ldr	r3, [r3, #8]
    8c12:	091b      	lsrs	r3, r3, #4
    8c14:	627b      	str	r3, [r7, #36]	; 0x24
            if (comp->have_star) {
    8c16:	68fb      	ldr	r3, [r7, #12]
    8c18:	799b      	ldrb	r3, [r3, #6]
    8c1a:	2b00      	cmp	r3, #0
    8c1c:	d008      	beq.n	8c30 <compile_scope_func_lambda_param+0xbc>
                // comes after a star, so counts as a keyword-only parameter
                comp->scope_cur->num_kwonly_args += 1;
    8c1e:	68fb      	ldr	r3, [r7, #12]
    8c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c22:	68fa      	ldr	r2, [r7, #12]
    8c24:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8c26:	8b92      	ldrh	r2, [r2, #28]
    8c28:	3201      	adds	r2, #1
    8c2a:	b292      	uxth	r2, r2
    8c2c:	839a      	strh	r2, [r3, #28]
    8c2e:	e079      	b.n	8d24 <compile_scope_func_lambda_param+0x1b0>
            } else {
                // comes before a star, so counts as a positional parameter
                comp->scope_cur->num_pos_args += 1;
    8c30:	68fb      	ldr	r3, [r7, #12]
    8c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c34:	68fa      	ldr	r2, [r7, #12]
    8c36:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8c38:	8b52      	ldrh	r2, [r2, #26]
    8c3a:	3201      	adds	r2, #1
    8c3c:	b292      	uxth	r2, r2
    8c3e:	835a      	strh	r2, [r3, #26]
    8c40:	e070      	b.n	8d24 <compile_scope_func_lambda_param+0x1b0>
            }
        } else if (MP_PARSE_NODE_STRUCT_KIND(pns) == pn_star) {
    8c42:	69fb      	ldr	r3, [r7, #28]
    8c44:	685b      	ldr	r3, [r3, #4]
    8c46:	b2da      	uxtb	r2, r3
    8c48:	683b      	ldr	r3, [r7, #0]
    8c4a:	429a      	cmp	r2, r3
    8c4c:	d14e      	bne.n	8cec <compile_scope_func_lambda_param+0x178>
            if (comp->have_star) {
    8c4e:	68fb      	ldr	r3, [r7, #12]
    8c50:	799b      	ldrb	r3, [r3, #6]
    8c52:	2b00      	cmp	r3, #0
    8c54:	d005      	beq.n	8c62 <compile_scope_func_lambda_param+0xee>
                // more than one star
                compile_syntax_error(comp, pn, "invalid syntax");
    8c56:	4a44      	ldr	r2, [pc, #272]	; (8d68 <compile_scope_func_lambda_param+0x1f4>)
    8c58:	68b9      	ldr	r1, [r7, #8]
    8c5a:	68f8      	ldr	r0, [r7, #12]
    8c5c:	f7fc f880 	bl	4d60 <compile_syntax_error>
                return;
    8c60:	e07f      	b.n	8d62 <compile_scope_func_lambda_param+0x1ee>
            }
            comp->have_star = true;
    8c62:	68fb      	ldr	r3, [r7, #12]
    8c64:	2201      	movs	r2, #1
    8c66:	719a      	strb	r2, [r3, #6]
            param_flag = ID_FLAG_IS_PARAM | ID_FLAG_IS_STAR_PARAM;
    8c68:	2303      	movs	r3, #3
    8c6a:	623b      	str	r3, [r7, #32]
            if (MP_PARSE_NODE_IS_NULL(pns->nodes[0])) {
    8c6c:	69fb      	ldr	r3, [r7, #28]
    8c6e:	689b      	ldr	r3, [r3, #8]
    8c70:	2b00      	cmp	r3, #0
    8c72:	d057      	beq.n	8d24 <compile_scope_func_lambda_param+0x1b0>
                // bare star
                // TODO see http://www.python.org/dev/peps/pep-3102/
                //assert(comp->scope_cur->num_dict_params == 0);
            } else if (MP_PARSE_NODE_IS_ID(pns->nodes[0])) {
    8c74:	69fb      	ldr	r3, [r7, #28]
    8c76:	689b      	ldr	r3, [r3, #8]
    8c78:	f003 030f 	and.w	r3, r3, #15
    8c7c:	2b02      	cmp	r3, #2
    8c7e:	d10d      	bne.n	8c9c <compile_scope_func_lambda_param+0x128>
                // named star
                comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARARGS;
    8c80:	68fb      	ldr	r3, [r7, #12]
    8c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c84:	68fa      	ldr	r2, [r7, #12]
    8c86:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8c88:	7e12      	ldrb	r2, [r2, #24]
    8c8a:	f042 0201 	orr.w	r2, r2, #1
    8c8e:	b2d2      	uxtb	r2, r2
    8c90:	761a      	strb	r2, [r3, #24]
                param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8c92:	69fb      	ldr	r3, [r7, #28]
    8c94:	689b      	ldr	r3, [r3, #8]
    8c96:	091b      	lsrs	r3, r3, #4
    8c98:	627b      	str	r3, [r7, #36]	; 0x24
    8c9a:	e043      	b.n	8d24 <compile_scope_func_lambda_param+0x1b0>
            } else {
                assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_tfpdef)); // should be
    8c9c:	69fb      	ldr	r3, [r7, #28]
    8c9e:	689b      	ldr	r3, [r3, #8]
    8ca0:	2b00      	cmp	r3, #0
    8ca2:	d00b      	beq.n	8cbc <compile_scope_func_lambda_param+0x148>
    8ca4:	69fb      	ldr	r3, [r7, #28]
    8ca6:	689b      	ldr	r3, [r3, #8]
    8ca8:	f003 0303 	and.w	r3, r3, #3
    8cac:	2b00      	cmp	r3, #0
    8cae:	d105      	bne.n	8cbc <compile_scope_func_lambda_param+0x148>
    8cb0:	69fb      	ldr	r3, [r7, #28]
    8cb2:	689b      	ldr	r3, [r3, #8]
    8cb4:	685b      	ldr	r3, [r3, #4]
    8cb6:	b2db      	uxtb	r3, r3
    8cb8:	2b45      	cmp	r3, #69	; 0x45
    8cba:	d006      	beq.n	8cca <compile_scope_func_lambda_param+0x156>
    8cbc:	4b2e      	ldr	r3, [pc, #184]	; (8d78 <compile_scope_func_lambda_param+0x204>)
    8cbe:	4a2c      	ldr	r2, [pc, #176]	; (8d70 <compile_scope_func_lambda_param+0x1fc>)
    8cc0:	f640 21d7 	movw	r1, #2775	; 0xad7
    8cc4:	482b      	ldr	r0, [pc, #172]	; (8d74 <compile_scope_func_lambda_param+0x200>)
    8cc6:	f012 fb51 	bl	1b36c <__assert_func>
                // named star with possible annotation
                comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARARGS;
    8cca:	68fb      	ldr	r3, [r7, #12]
    8ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8cce:	68fa      	ldr	r2, [r7, #12]
    8cd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8cd2:	7e12      	ldrb	r2, [r2, #24]
    8cd4:	f042 0201 	orr.w	r2, r2, #1
    8cd8:	b2d2      	uxtb	r2, r2
    8cda:	761a      	strb	r2, [r3, #24]
                pns = (mp_parse_node_struct_t*)pns->nodes[0];
    8cdc:	69fb      	ldr	r3, [r7, #28]
    8cde:	689b      	ldr	r3, [r3, #8]
    8ce0:	61fb      	str	r3, [r7, #28]
                param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8ce2:	69fb      	ldr	r3, [r7, #28]
    8ce4:	689b      	ldr	r3, [r3, #8]
    8ce6:	091b      	lsrs	r3, r3, #4
    8ce8:	627b      	str	r3, [r7, #36]	; 0x24
    8cea:	e01b      	b.n	8d24 <compile_scope_func_lambda_param+0x1b0>
            }
        } else {
            assert(MP_PARSE_NODE_STRUCT_KIND(pns) == pn_dbl_star); // should be
    8cec:	69fb      	ldr	r3, [r7, #28]
    8cee:	685b      	ldr	r3, [r3, #4]
    8cf0:	b2da      	uxtb	r2, r3
    8cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8cf4:	429a      	cmp	r2, r3
    8cf6:	d006      	beq.n	8d06 <compile_scope_func_lambda_param+0x192>
    8cf8:	4b20      	ldr	r3, [pc, #128]	; (8d7c <compile_scope_func_lambda_param+0x208>)
    8cfa:	4a1d      	ldr	r2, [pc, #116]	; (8d70 <compile_scope_func_lambda_param+0x1fc>)
    8cfc:	f640 21de 	movw	r1, #2782	; 0xade
    8d00:	481c      	ldr	r0, [pc, #112]	; (8d74 <compile_scope_func_lambda_param+0x200>)
    8d02:	f012 fb33 	bl	1b36c <__assert_func>
            param_name = MP_PARSE_NODE_LEAF_ARG(pns->nodes[0]);
    8d06:	69fb      	ldr	r3, [r7, #28]
    8d08:	689b      	ldr	r3, [r3, #8]
    8d0a:	091b      	lsrs	r3, r3, #4
    8d0c:	627b      	str	r3, [r7, #36]	; 0x24
            param_flag = ID_FLAG_IS_PARAM | ID_FLAG_IS_DBL_STAR_PARAM;
    8d0e:	2305      	movs	r3, #5
    8d10:	623b      	str	r3, [r7, #32]
            comp->scope_cur->scope_flags |= MP_SCOPE_FLAG_VARKEYWORDS;
    8d12:	68fb      	ldr	r3, [r7, #12]
    8d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d16:	68fa      	ldr	r2, [r7, #12]
    8d18:	6a52      	ldr	r2, [r2, #36]	; 0x24
    8d1a:	7e12      	ldrb	r2, [r2, #24]
    8d1c:	f042 0202 	orr.w	r2, r2, #2
    8d20:	b2d2      	uxtb	r2, r2
    8d22:	761a      	strb	r2, [r3, #24]
        }
    }

    if (param_name != MP_QSTR_NULL) {
    8d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d26:	2b00      	cmp	r3, #0
    8d28:	d01b      	beq.n	8d62 <compile_scope_func_lambda_param+0x1ee>
        bool added;
        id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, param_name, &added);
    8d2a:	68fb      	ldr	r3, [r7, #12]
    8d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d2e:	f107 0217 	add.w	r2, r7, #23
    8d32:	6a79      	ldr	r1, [r7, #36]	; 0x24
    8d34:	4618      	mov	r0, r3
    8d36:	f7fb fec9 	bl	4acc <scope_find_or_add_id>
    8d3a:	61b8      	str	r0, [r7, #24]
        if (!added) {
    8d3c:	7dfb      	ldrb	r3, [r7, #23]
    8d3e:	f083 0301 	eor.w	r3, r3, #1
    8d42:	b2db      	uxtb	r3, r3
    8d44:	2b00      	cmp	r3, #0
    8d46:	d005      	beq.n	8d54 <compile_scope_func_lambda_param+0x1e0>
            compile_syntax_error(comp, pn, "name reused for argument");
    8d48:	4a0d      	ldr	r2, [pc, #52]	; (8d80 <compile_scope_func_lambda_param+0x20c>)
    8d4a:	68b9      	ldr	r1, [r7, #8]
    8d4c:	68f8      	ldr	r0, [r7, #12]
    8d4e:	f7fc f807 	bl	4d60 <compile_syntax_error>
    8d52:	e006      	b.n	8d62 <compile_scope_func_lambda_param+0x1ee>
            return;
        }
        id_info->kind = ID_INFO_KIND_LOCAL;
    8d54:	69bb      	ldr	r3, [r7, #24]
    8d56:	2202      	movs	r2, #2
    8d58:	701a      	strb	r2, [r3, #0]
        id_info->flags = param_flag;
    8d5a:	6a3b      	ldr	r3, [r7, #32]
    8d5c:	b2da      	uxtb	r2, r3
    8d5e:	69bb      	ldr	r3, [r7, #24]
    8d60:	705a      	strb	r2, [r3, #1]
    }
}
    8d62:	3728      	adds	r7, #40	; 0x28
    8d64:	46bd      	mov	sp, r7
    8d66:	bd80      	pop	{r7, pc}
    8d68:	0001eb04 	.word	0x0001eb04
    8d6c:	0001e44c 	.word	0x0001e44c
    8d70:	0001f0c4 	.word	0x0001f0c4
    8d74:	0001e304 	.word	0x0001e304
    8d78:	0001ec70 	.word	0x0001ec70
    8d7c:	0001eca8 	.word	0x0001eca8
    8d80:	0001ecd8 	.word	0x0001ecd8

00008d84 <compile_scope_func_param>:

STATIC void compile_scope_func_param(compiler_t *comp, mp_parse_node_t pn) {
    8d84:	b580      	push	{r7, lr}
    8d86:	b084      	sub	sp, #16
    8d88:	af02      	add	r7, sp, #8
    8d8a:	6078      	str	r0, [r7, #4]
    8d8c:	6039      	str	r1, [r7, #0]
    compile_scope_func_lambda_param(comp, pn, PN_typedargslist_name, PN_typedargslist_star, PN_typedargslist_dbl_star);
    8d8e:	2342      	movs	r3, #66	; 0x42
    8d90:	9300      	str	r3, [sp, #0]
    8d92:	2341      	movs	r3, #65	; 0x41
    8d94:	2240      	movs	r2, #64	; 0x40
    8d96:	6839      	ldr	r1, [r7, #0]
    8d98:	6878      	ldr	r0, [r7, #4]
    8d9a:	f7ff feeb 	bl	8b74 <compile_scope_func_lambda_param>
}
    8d9e:	bf00      	nop
    8da0:	3708      	adds	r7, #8
    8da2:	46bd      	mov	sp, r7
    8da4:	bd80      	pop	{r7, pc}
    8da6:	bf00      	nop

00008da8 <compile_scope_lambda_param>:

STATIC void compile_scope_lambda_param(compiler_t *comp, mp_parse_node_t pn) {
    8da8:	b580      	push	{r7, lr}
    8daa:	b084      	sub	sp, #16
    8dac:	af02      	add	r7, sp, #8
    8dae:	6078      	str	r0, [r7, #4]
    8db0:	6039      	str	r1, [r7, #0]
    compile_scope_func_lambda_param(comp, pn, PN_varargslist_name, PN_varargslist_star, PN_varargslist_dbl_star);
    8db2:	234a      	movs	r3, #74	; 0x4a
    8db4:	9300      	str	r3, [sp, #0]
    8db6:	2349      	movs	r3, #73	; 0x49
    8db8:	2248      	movs	r2, #72	; 0x48
    8dba:	6839      	ldr	r1, [r7, #0]
    8dbc:	6878      	ldr	r0, [r7, #4]
    8dbe:	f7ff fed9 	bl	8b74 <compile_scope_func_lambda_param>
}
    8dc2:	bf00      	nop
    8dc4:	3708      	adds	r7, #8
    8dc6:	46bd      	mov	sp, r7
    8dc8:	bd80      	pop	{r7, pc}
    8dca:	bf00      	nop

00008dcc <compile_scope_comp_iter>:
        }
    }
}
#endif // MICROPY_EMIT_NATIVE

STATIC void compile_scope_comp_iter(compiler_t *comp, mp_parse_node_struct_t *pns_comp_for, mp_parse_node_t pn_inner_expr, int for_depth) {
    8dcc:	b580      	push	{r7, lr}
    8dce:	b08a      	sub	sp, #40	; 0x28
    8dd0:	af00      	add	r7, sp, #0
    8dd2:	60f8      	str	r0, [r7, #12]
    8dd4:	60b9      	str	r1, [r7, #8]
    8dd6:	607a      	str	r2, [r7, #4]
    8dd8:	603b      	str	r3, [r7, #0]
    uint l_top = comp_next_label(comp);
    8dda:	68f8      	ldr	r0, [r7, #12]
    8ddc:	f7fb ffdc 	bl	4d98 <comp_next_label>
    8de0:	6238      	str	r0, [r7, #32]
    uint l_end = comp_next_label(comp);
    8de2:	68f8      	ldr	r0, [r7, #12]
    8de4:	f7fb ffd8 	bl	4d98 <comp_next_label>
    8de8:	61f8      	str	r0, [r7, #28]
    EMIT_ARG(label_assign, l_top);
    8dea:	68fb      	ldr	r3, [r7, #12]
    8dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8dee:	6a39      	ldr	r1, [r7, #32]
    8df0:	4618      	mov	r0, r3
    8df2:	f001 fa79 	bl	a2e8 <mp_emit_bc_label_assign>
    EMIT_ARG(for_iter, l_end);
    8df6:	68fb      	ldr	r3, [r7, #12]
    8df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8dfa:	69f9      	ldr	r1, [r7, #28]
    8dfc:	4618      	mov	r0, r3
    8dfe:	f001 fe09 	bl	aa14 <mp_emit_bc_for_iter>
    c_assign(comp, pns_comp_for->nodes[0], ASSIGN_STORE);
    8e02:	68bb      	ldr	r3, [r7, #8]
    8e04:	689b      	ldr	r3, [r3, #8]
    8e06:	2200      	movs	r2, #0
    8e08:	4619      	mov	r1, r3
    8e0a:	68f8      	ldr	r0, [r7, #12]
    8e0c:	f7fc fbec 	bl	55e8 <c_assign>
    mp_parse_node_t pn_iter = pns_comp_for->nodes[2];
    8e10:	68bb      	ldr	r3, [r7, #8]
    8e12:	691b      	ldr	r3, [r3, #16]
    8e14:	627b      	str	r3, [r7, #36]	; 0x24

    tail_recursion:
    if (MP_PARSE_NODE_IS_NULL(pn_iter)) {
    8e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e18:	2b00      	cmp	r3, #0
    8e1a:	d120      	bne.n	8e5e <compile_scope_comp_iter+0x92>
        // no more nested if/for; compile inner expression
        compile_node(comp, pn_inner_expr);
    8e1c:	6879      	ldr	r1, [r7, #4]
    8e1e:	68f8      	ldr	r0, [r7, #12]
    8e20:	f7ff fe18 	bl	8a54 <compile_node>
        if (comp->scope_cur->kind == SCOPE_GEN_EXPR) {
    8e24:	68fb      	ldr	r3, [r7, #12]
    8e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8e28:	681b      	ldr	r3, [r3, #0]
    8e2a:	2b06      	cmp	r3, #6
    8e2c:	d10b      	bne.n	8e46 <compile_scope_comp_iter+0x7a>
            EMIT_ARG(yield, MP_EMIT_YIELD_VALUE);
    8e2e:	68fb      	ldr	r3, [r7, #12]
    8e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8e32:	2100      	movs	r1, #0
    8e34:	4618      	mov	r0, r3
    8e36:	f002 f813 	bl	ae60 <mp_emit_bc_yield>
            EMIT(pop_top);
    8e3a:	68fb      	ldr	r3, [r7, #12]
    8e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8e3e:	4618      	mov	r0, r3
    8e40:	f001 fcae 	bl	a7a0 <mp_emit_bc_pop_top>
    8e44:	e03e      	b.n	8ec4 <compile_scope_comp_iter+0xf8>
        } else {
            EMIT_ARG(store_comp, comp->scope_cur->kind, 4 * for_depth + 5);
    8e46:	68fb      	ldr	r3, [r7, #12]
    8e48:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8e4a:	68fb      	ldr	r3, [r7, #12]
    8e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8e4e:	6819      	ldr	r1, [r3, #0]
    8e50:	683b      	ldr	r3, [r7, #0]
    8e52:	009b      	lsls	r3, r3, #2
    8e54:	3305      	adds	r3, #5
    8e56:	461a      	mov	r2, r3
    8e58:	f001 fe98 	bl	ab8c <mp_emit_bc_store_comp>
    8e5c:	e032      	b.n	8ec4 <compile_scope_comp_iter+0xf8>
        }
    } else if (MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_iter) == PN_comp_if) {
    8e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e60:	685b      	ldr	r3, [r3, #4]
    8e62:	b2db      	uxtb	r3, r3
    8e64:	2ba0      	cmp	r3, #160	; 0xa0
    8e66:	d10c      	bne.n	8e82 <compile_scope_comp_iter+0xb6>
        // if condition
        mp_parse_node_struct_t *pns_comp_if = (mp_parse_node_struct_t*)pn_iter;
    8e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e6a:	61bb      	str	r3, [r7, #24]
        c_if_cond(comp, pns_comp_if->nodes[0], false, l_top);
    8e6c:	69bb      	ldr	r3, [r7, #24]
    8e6e:	6899      	ldr	r1, [r3, #8]
    8e70:	6a3b      	ldr	r3, [r7, #32]
    8e72:	2200      	movs	r2, #0
    8e74:	68f8      	ldr	r0, [r7, #12]
    8e76:	f7fc f919 	bl	50ac <c_if_cond>
        pn_iter = pns_comp_if->nodes[1];
    8e7a:	69bb      	ldr	r3, [r7, #24]
    8e7c:	68db      	ldr	r3, [r3, #12]
    8e7e:	627b      	str	r3, [r7, #36]	; 0x24
        goto tail_recursion;
    8e80:	e7c9      	b.n	8e16 <compile_scope_comp_iter+0x4a>
    } else {
        assert(MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t*)pn_iter) == PN_comp_for); // should be
    8e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e84:	685b      	ldr	r3, [r3, #4]
    8e86:	b2db      	uxtb	r3, r3
    8e88:	2b9f      	cmp	r3, #159	; 0x9f
    8e8a:	d006      	beq.n	8e9a <compile_scope_comp_iter+0xce>
    8e8c:	4b18      	ldr	r3, [pc, #96]	; (8ef0 <compile_scope_comp_iter+0x124>)
    8e8e:	4a19      	ldr	r2, [pc, #100]	; (8ef4 <compile_scope_comp_iter+0x128>)
    8e90:	f640 313d 	movw	r1, #2877	; 0xb3d
    8e94:	4818      	ldr	r0, [pc, #96]	; (8ef8 <compile_scope_comp_iter+0x12c>)
    8e96:	f012 fa69 	bl	1b36c <__assert_func>
        // for loop
        mp_parse_node_struct_t *pns_comp_for2 = (mp_parse_node_struct_t*)pn_iter;
    8e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8e9c:	617b      	str	r3, [r7, #20]
        compile_node(comp, pns_comp_for2->nodes[1]);
    8e9e:	697b      	ldr	r3, [r7, #20]
    8ea0:	68db      	ldr	r3, [r3, #12]
    8ea2:	4619      	mov	r1, r3
    8ea4:	68f8      	ldr	r0, [r7, #12]
    8ea6:	f7ff fdd5 	bl	8a54 <compile_node>
        EMIT_ARG(get_iter, true);
    8eaa:	68fb      	ldr	r3, [r7, #12]
    8eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8eae:	2101      	movs	r1, #1
    8eb0:	4618      	mov	r0, r3
    8eb2:	f001 fd91 	bl	a9d8 <mp_emit_bc_get_iter>
        compile_scope_comp_iter(comp, pns_comp_for2, pn_inner_expr, for_depth + 1);
    8eb6:	683b      	ldr	r3, [r7, #0]
    8eb8:	3301      	adds	r3, #1
    8eba:	687a      	ldr	r2, [r7, #4]
    8ebc:	6979      	ldr	r1, [r7, #20]
    8ebe:	68f8      	ldr	r0, [r7, #12]
    8ec0:	f7ff ff84 	bl	8dcc <compile_scope_comp_iter>
    }

    EMIT_ARG(jump, l_top);
    8ec4:	68fb      	ldr	r3, [r7, #12]
    8ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8ec8:	6a39      	ldr	r1, [r7, #32]
    8eca:	4618      	mov	r0, r3
    8ecc:	f001 fc9a 	bl	a804 <mp_emit_bc_jump>
    EMIT_ARG(label_assign, l_end);
    8ed0:	68fb      	ldr	r3, [r7, #12]
    8ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8ed4:	69f9      	ldr	r1, [r7, #28]
    8ed6:	4618      	mov	r0, r3
    8ed8:	f001 fa06 	bl	a2e8 <mp_emit_bc_label_assign>
    EMIT(for_iter_end);
    8edc:	68fb      	ldr	r3, [r7, #12]
    8ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8ee0:	4618      	mov	r0, r3
    8ee2:	f001 fda9 	bl	aa38 <mp_emit_bc_for_iter_end>
}
    8ee6:	bf00      	nop
    8ee8:	3728      	adds	r7, #40	; 0x28
    8eea:	46bd      	mov	sp, r7
    8eec:	bd80      	pop	{r7, pc}
    8eee:	bf00      	nop
    8ef0:	0001ecf4 	.word	0x0001ecf4
    8ef4:	0001f0e4 	.word	0x0001f0e4
    8ef8:	0001e304 	.word	0x0001e304

00008efc <check_for_doc_string>:

STATIC void check_for_doc_string(compiler_t *comp, mp_parse_node_t pn) {
    8efc:	b480      	push	{r7}
    8efe:	b083      	sub	sp, #12
    8f00:	af00      	add	r7, sp, #0
    8f02:	6078      	str	r0, [r7, #4]
    8f04:	6039      	str	r1, [r7, #0]
    }
#else
    (void)comp;
    (void)pn;
#endif
}
    8f06:	bf00      	nop
    8f08:	370c      	adds	r7, #12
    8f0a:	46bd      	mov	sp, r7
    8f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f10:	4770      	bx	lr
    8f12:	bf00      	nop

00008f14 <compile_scope>:

STATIC void compile_scope(compiler_t *comp, scope_t *scope, pass_kind_t pass) {
    8f14:	b580      	push	{r7, lr}
    8f16:	b090      	sub	sp, #64	; 0x40
    8f18:	af00      	add	r7, sp, #0
    8f1a:	60f8      	str	r0, [r7, #12]
    8f1c:	60b9      	str	r1, [r7, #8]
    8f1e:	607a      	str	r2, [r7, #4]
    comp->pass = pass;
    8f20:	687b      	ldr	r3, [r7, #4]
    8f22:	b2da      	uxtb	r2, r3
    8f24:	68fb      	ldr	r3, [r7, #12]
    8f26:	715a      	strb	r2, [r3, #5]
    comp->scope_cur = scope;
    8f28:	68fb      	ldr	r3, [r7, #12]
    8f2a:	68ba      	ldr	r2, [r7, #8]
    8f2c:	625a      	str	r2, [r3, #36]	; 0x24
    comp->next_label = 0;
    8f2e:	68fb      	ldr	r3, [r7, #12]
    8f30:	2200      	movs	r2, #0
    8f32:	611a      	str	r2, [r3, #16]
    EMIT_ARG(start_pass, pass, scope);
    8f34:	68fb      	ldr	r3, [r7, #12]
    8f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f38:	68ba      	ldr	r2, [r7, #8]
    8f3a:	6879      	ldr	r1, [r7, #4]
    8f3c:	4618      	mov	r0, r3
    8f3e:	f000 fffb 	bl	9f38 <mp_emit_bc_start_pass>

    if (comp->pass == MP_PASS_SCOPE) {
    8f42:	68fb      	ldr	r3, [r7, #12]
    8f44:	795b      	ldrb	r3, [r3, #5]
    8f46:	2b01      	cmp	r3, #1
    8f48:	d105      	bne.n	8f56 <compile_scope+0x42>
        // reset maximum stack sizes in scope
        // they will be computed in this first pass
        scope->stack_size = 0;
    8f4a:	68bb      	ldr	r3, [r7, #8]
    8f4c:	2200      	movs	r2, #0
    8f4e:	845a      	strh	r2, [r3, #34]	; 0x22
        scope->exc_stack_size = 0;
    8f50:	68bb      	ldr	r3, [r7, #8]
    8f52:	2200      	movs	r2, #0
    8f54:	849a      	strh	r2, [r3, #36]	; 0x24
    }

    // compile
    if (MP_PARSE_NODE_IS_STRUCT_KIND(scope->pn, PN_eval_input)) {
    8f56:	68bb      	ldr	r3, [r7, #8]
    8f58:	68db      	ldr	r3, [r3, #12]
    8f5a:	2b00      	cmp	r3, #0
    8f5c:	d025      	beq.n	8faa <compile_scope+0x96>
    8f5e:	68bb      	ldr	r3, [r7, #8]
    8f60:	68db      	ldr	r3, [r3, #12]
    8f62:	f003 0303 	and.w	r3, r3, #3
    8f66:	2b00      	cmp	r3, #0
    8f68:	d11f      	bne.n	8faa <compile_scope+0x96>
    8f6a:	68bb      	ldr	r3, [r7, #8]
    8f6c:	68db      	ldr	r3, [r3, #12]
    8f6e:	685b      	ldr	r3, [r3, #4]
    8f70:	b2db      	uxtb	r3, r3
    8f72:	2b38      	cmp	r3, #56	; 0x38
    8f74:	d119      	bne.n	8faa <compile_scope+0x96>
        assert(scope->kind == SCOPE_MODULE);
    8f76:	68bb      	ldr	r3, [r7, #8]
    8f78:	681b      	ldr	r3, [r3, #0]
    8f7a:	2b00      	cmp	r3, #0
    8f7c:	d006      	beq.n	8f8c <compile_scope+0x78>
    8f7e:	4b9c      	ldr	r3, [pc, #624]	; (91f0 <compile_scope+0x2dc>)
    8f80:	4a9c      	ldr	r2, [pc, #624]	; (91f4 <compile_scope+0x2e0>)
    8f82:	f640 3186 	movw	r1, #2950	; 0xb86
    8f86:	489c      	ldr	r0, [pc, #624]	; (91f8 <compile_scope+0x2e4>)
    8f88:	f012 f9f0 	bl	1b36c <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    8f8c:	68bb      	ldr	r3, [r7, #8]
    8f8e:	68db      	ldr	r3, [r3, #12]
    8f90:	63fb      	str	r3, [r7, #60]	; 0x3c
        compile_node(comp, pns->nodes[0]); // compile the expression
    8f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8f94:	689b      	ldr	r3, [r3, #8]
    8f96:	4619      	mov	r1, r3
    8f98:	68f8      	ldr	r0, [r7, #12]
    8f9a:	f7ff fd5b 	bl	8a54 <compile_node>
        EMIT(return_value);
    8f9e:	68fb      	ldr	r3, [r7, #12]
    8fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8fa2:	4618      	mov	r0, r3
    8fa4:	f001 ff22 	bl	adec <mp_emit_bc_return_value>
    if (MP_PARSE_NODE_IS_STRUCT_KIND(scope->pn, PN_eval_input)) {
    8fa8:	e21b      	b.n	93e2 <compile_scope+0x4ce>
    } else if (scope->kind == SCOPE_MODULE) {
    8faa:	68bb      	ldr	r3, [r7, #8]
    8fac:	681b      	ldr	r3, [r3, #0]
    8fae:	2b00      	cmp	r3, #0
    8fb0:	d11b      	bne.n	8fea <compile_scope+0xd6>
        if (!comp->is_repl) {
    8fb2:	68fb      	ldr	r3, [r7, #12]
    8fb4:	791b      	ldrb	r3, [r3, #4]
    8fb6:	2b00      	cmp	r3, #0
    8fb8:	d105      	bne.n	8fc6 <compile_scope+0xb2>
            check_for_doc_string(comp, scope->pn);
    8fba:	68bb      	ldr	r3, [r7, #8]
    8fbc:	68db      	ldr	r3, [r3, #12]
    8fbe:	4619      	mov	r1, r3
    8fc0:	68f8      	ldr	r0, [r7, #12]
    8fc2:	f7ff ff9b 	bl	8efc <check_for_doc_string>
        }
        compile_node(comp, scope->pn);
    8fc6:	68bb      	ldr	r3, [r7, #8]
    8fc8:	68db      	ldr	r3, [r3, #12]
    8fca:	4619      	mov	r1, r3
    8fcc:	68f8      	ldr	r0, [r7, #12]
    8fce:	f7ff fd41 	bl	8a54 <compile_node>
        EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    8fd2:	68fb      	ldr	r3, [r7, #12]
    8fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8fd6:	210e      	movs	r1, #14
    8fd8:	4618      	mov	r0, r3
    8fda:	f001 fa03 	bl	a3e4 <mp_emit_bc_load_const_tok>
        EMIT(return_value);
    8fde:	68fb      	ldr	r3, [r7, #12]
    8fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8fe2:	4618      	mov	r0, r3
    8fe4:	f001 ff02 	bl	adec <mp_emit_bc_return_value>
    8fe8:	e1fb      	b.n	93e2 <compile_scope+0x4ce>
    } else if (scope->kind == SCOPE_FUNCTION) {
    8fea:	68bb      	ldr	r3, [r7, #8]
    8fec:	681b      	ldr	r3, [r3, #0]
    8fee:	2b07      	cmp	r3, #7
    8ff0:	d14b      	bne.n	908a <compile_scope+0x176>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    8ff2:	68bb      	ldr	r3, [r7, #8]
    8ff4:	68db      	ldr	r3, [r3, #12]
    8ff6:	2b00      	cmp	r3, #0
    8ff8:	d005      	beq.n	9006 <compile_scope+0xf2>
    8ffa:	68bb      	ldr	r3, [r7, #8]
    8ffc:	68db      	ldr	r3, [r3, #12]
    8ffe:	f003 0303 	and.w	r3, r3, #3
    9002:	2b00      	cmp	r3, #0
    9004:	d006      	beq.n	9014 <compile_scope+0x100>
    9006:	4b7d      	ldr	r3, [pc, #500]	; (91fc <compile_scope+0x2e8>)
    9008:	4a7a      	ldr	r2, [pc, #488]	; (91f4 <compile_scope+0x2e0>)
    900a:	f640 3192 	movw	r1, #2962	; 0xb92
    900e:	487a      	ldr	r0, [pc, #488]	; (91f8 <compile_scope+0x2e4>)
    9010:	f012 f9ac 	bl	1b36c <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    9014:	68bb      	ldr	r3, [r7, #8]
    9016:	68db      	ldr	r3, [r3, #12]
    9018:	63bb      	str	r3, [r7, #56]	; 0x38
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) == PN_funcdef);
    901a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    901c:	685b      	ldr	r3, [r3, #4]
    901e:	b2db      	uxtb	r3, r3
    9020:	2b03      	cmp	r3, #3
    9022:	d006      	beq.n	9032 <compile_scope+0x11e>
    9024:	4b76      	ldr	r3, [pc, #472]	; (9200 <compile_scope+0x2ec>)
    9026:	4a73      	ldr	r2, [pc, #460]	; (91f4 <compile_scope+0x2e0>)
    9028:	f640 3194 	movw	r1, #2964	; 0xb94
    902c:	4872      	ldr	r0, [pc, #456]	; (91f8 <compile_scope+0x2e4>)
    902e:	f012 f99d 	bl	1b36c <__assert_func>

        // work out number of parameters, keywords and default parameters, and add them to the id_info array
        // must be done before compiling the body so that arguments are numbered first (for LOAD_FAST etc)
        if (comp->pass == MP_PASS_SCOPE) {
    9032:	68fb      	ldr	r3, [r7, #12]
    9034:	795b      	ldrb	r3, [r3, #5]
    9036:	2b01      	cmp	r3, #1
    9038:	d109      	bne.n	904e <compile_scope+0x13a>
            comp->have_star = false;
    903a:	68fb      	ldr	r3, [r7, #12]
    903c:	2200      	movs	r2, #0
    903e:	719a      	strb	r2, [r3, #6]
            apply_to_single_or_list(comp, pns->nodes[1], PN_typedargslist, compile_scope_func_param);
    9040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9042:	68d9      	ldr	r1, [r3, #12]
    9044:	4b6f      	ldr	r3, [pc, #444]	; (9204 <compile_scope+0x2f0>)
    9046:	223e      	movs	r2, #62	; 0x3e
    9048:	68f8      	ldr	r0, [r7, #12]
    904a:	f7fb ff21 	bl	4e90 <apply_to_single_or_list>
                }
            }
        }
        #endif // MICROPY_EMIT_NATIVE

        compile_node(comp, pns->nodes[3]); // 3 is function body
    904e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9050:	695b      	ldr	r3, [r3, #20]
    9052:	4619      	mov	r1, r3
    9054:	68f8      	ldr	r0, [r7, #12]
    9056:	f7ff fcfd 	bl	8a54 <compile_node>
        // emit return if it wasn't the last opcode
        if (!EMIT(last_emit_was_return_value)) {
    905a:	68fb      	ldr	r3, [r7, #12]
    905c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    905e:	4618      	mov	r0, r3
    9060:	f001 f8de 	bl	a220 <mp_emit_bc_last_emit_was_return_value>
    9064:	4603      	mov	r3, r0
    9066:	f083 0301 	eor.w	r3, r3, #1
    906a:	b2db      	uxtb	r3, r3
    906c:	2b00      	cmp	r3, #0
    906e:	f000 81b8 	beq.w	93e2 <compile_scope+0x4ce>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    9072:	68fb      	ldr	r3, [r7, #12]
    9074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9076:	210e      	movs	r1, #14
    9078:	4618      	mov	r0, r3
    907a:	f001 f9b3 	bl	a3e4 <mp_emit_bc_load_const_tok>
            EMIT(return_value);
    907e:	68fb      	ldr	r3, [r7, #12]
    9080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9082:	4618      	mov	r0, r3
    9084:	f001 feb2 	bl	adec <mp_emit_bc_return_value>
    9088:	e1ab      	b.n	93e2 <compile_scope+0x4ce>
        }
    } else if (scope->kind == SCOPE_LAMBDA) {
    908a:	68bb      	ldr	r3, [r7, #8]
    908c:	681b      	ldr	r3, [r3, #0]
    908e:	2b02      	cmp	r3, #2
    9090:	d14a      	bne.n	9128 <compile_scope+0x214>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    9092:	68bb      	ldr	r3, [r7, #8]
    9094:	68db      	ldr	r3, [r3, #12]
    9096:	2b00      	cmp	r3, #0
    9098:	d005      	beq.n	90a6 <compile_scope+0x192>
    909a:	68bb      	ldr	r3, [r7, #8]
    909c:	68db      	ldr	r3, [r3, #12]
    909e:	f003 0303 	and.w	r3, r3, #3
    90a2:	2b00      	cmp	r3, #0
    90a4:	d006      	beq.n	90b4 <compile_scope+0x1a0>
    90a6:	4b55      	ldr	r3, [pc, #340]	; (91fc <compile_scope+0x2e8>)
    90a8:	4a52      	ldr	r2, [pc, #328]	; (91f4 <compile_scope+0x2e0>)
    90aa:	f640 31b9 	movw	r1, #3001	; 0xbb9
    90ae:	4852      	ldr	r0, [pc, #328]	; (91f8 <compile_scope+0x2e4>)
    90b0:	f012 f95c 	bl	1b36c <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    90b4:	68bb      	ldr	r3, [r7, #8]
    90b6:	68db      	ldr	r3, [r3, #12]
    90b8:	637b      	str	r3, [r7, #52]	; 0x34
        assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 3);
    90ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    90bc:	685b      	ldr	r3, [r3, #4]
    90be:	0a1b      	lsrs	r3, r3, #8
    90c0:	2b03      	cmp	r3, #3
    90c2:	d006      	beq.n	90d2 <compile_scope+0x1be>
    90c4:	4b50      	ldr	r3, [pc, #320]	; (9208 <compile_scope+0x2f4>)
    90c6:	4a4b      	ldr	r2, [pc, #300]	; (91f4 <compile_scope+0x2e0>)
    90c8:	f640 31bb 	movw	r1, #3003	; 0xbbb
    90cc:	484a      	ldr	r0, [pc, #296]	; (91f8 <compile_scope+0x2e4>)
    90ce:	f012 f94d 	bl	1b36c <__assert_func>

        // work out number of parameters, keywords and default parameters, and add them to the id_info array
        // must be done before compiling the body so that arguments are numbered first (for LOAD_FAST etc)
        if (comp->pass == MP_PASS_SCOPE) {
    90d2:	68fb      	ldr	r3, [r7, #12]
    90d4:	795b      	ldrb	r3, [r3, #5]
    90d6:	2b01      	cmp	r3, #1
    90d8:	d109      	bne.n	90ee <compile_scope+0x1da>
            comp->have_star = false;
    90da:	68fb      	ldr	r3, [r7, #12]
    90dc:	2200      	movs	r2, #0
    90de:	719a      	strb	r2, [r3, #6]
            apply_to_single_or_list(comp, pns->nodes[0], PN_varargslist, compile_scope_lambda_param);
    90e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    90e2:	6899      	ldr	r1, [r3, #8]
    90e4:	4b49      	ldr	r3, [pc, #292]	; (920c <compile_scope+0x2f8>)
    90e6:	2246      	movs	r2, #70	; 0x46
    90e8:	68f8      	ldr	r0, [r7, #12]
    90ea:	f7fb fed1 	bl	4e90 <apply_to_single_or_list>
        }

        compile_node(comp, pns->nodes[1]); // 1 is lambda body
    90ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    90f0:	68db      	ldr	r3, [r3, #12]
    90f2:	4619      	mov	r1, r3
    90f4:	68f8      	ldr	r0, [r7, #12]
    90f6:	f7ff fcad 	bl	8a54 <compile_node>

        // if the lambda is a generator, then we return None, not the result of the expression of the lambda
        if (scope->scope_flags & MP_SCOPE_FLAG_GENERATOR) {
    90fa:	68bb      	ldr	r3, [r7, #8]
    90fc:	7e1b      	ldrb	r3, [r3, #24]
    90fe:	f003 0304 	and.w	r3, r3, #4
    9102:	2b00      	cmp	r3, #0
    9104:	d00a      	beq.n	911c <compile_scope+0x208>
            EMIT(pop_top);
    9106:	68fb      	ldr	r3, [r7, #12]
    9108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    910a:	4618      	mov	r0, r3
    910c:	f001 fb48 	bl	a7a0 <mp_emit_bc_pop_top>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    9110:	68fb      	ldr	r3, [r7, #12]
    9112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9114:	210e      	movs	r1, #14
    9116:	4618      	mov	r0, r3
    9118:	f001 f964 	bl	a3e4 <mp_emit_bc_load_const_tok>
        }
        EMIT(return_value);
    911c:	68fb      	ldr	r3, [r7, #12]
    911e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9120:	4618      	mov	r0, r3
    9122:	f001 fe63 	bl	adec <mp_emit_bc_return_value>
    9126:	e15c      	b.n	93e2 <compile_scope+0x4ce>
    } else if (scope->kind == SCOPE_LIST_COMP || scope->kind == SCOPE_DICT_COMP || scope->kind == SCOPE_SET_COMP || scope->kind == SCOPE_GEN_EXPR) {
    9128:	68bb      	ldr	r3, [r7, #8]
    912a:	681b      	ldr	r3, [r3, #0]
    912c:	2b03      	cmp	r3, #3
    912e:	d00c      	beq.n	914a <compile_scope+0x236>
    9130:	68bb      	ldr	r3, [r7, #8]
    9132:	681b      	ldr	r3, [r3, #0]
    9134:	2b04      	cmp	r3, #4
    9136:	d008      	beq.n	914a <compile_scope+0x236>
    9138:	68bb      	ldr	r3, [r7, #8]
    913a:	681b      	ldr	r3, [r3, #0]
    913c:	2b05      	cmp	r3, #5
    913e:	d004      	beq.n	914a <compile_scope+0x236>
    9140:	68bb      	ldr	r3, [r7, #8]
    9142:	681b      	ldr	r3, [r3, #0]
    9144:	2b06      	cmp	r3, #6
    9146:	f040 80bf 	bne.w	92c8 <compile_scope+0x3b4>
        // a bit of a hack at the moment

        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    914a:	68bb      	ldr	r3, [r7, #8]
    914c:	68db      	ldr	r3, [r3, #12]
    914e:	2b00      	cmp	r3, #0
    9150:	d005      	beq.n	915e <compile_scope+0x24a>
    9152:	68bb      	ldr	r3, [r7, #8]
    9154:	68db      	ldr	r3, [r3, #12]
    9156:	f003 0303 	and.w	r3, r3, #3
    915a:	2b00      	cmp	r3, #0
    915c:	d006      	beq.n	916c <compile_scope+0x258>
    915e:	4b27      	ldr	r3, [pc, #156]	; (91fc <compile_scope+0x2e8>)
    9160:	4a24      	ldr	r2, [pc, #144]	; (91f4 <compile_scope+0x2e0>)
    9162:	f640 31cf 	movw	r1, #3023	; 0xbcf
    9166:	4824      	ldr	r0, [pc, #144]	; (91f8 <compile_scope+0x2e4>)
    9168:	f012 f900 	bl	1b36c <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    916c:	68bb      	ldr	r3, [r7, #8]
    916e:	68db      	ldr	r3, [r3, #12]
    9170:	627b      	str	r3, [r7, #36]	; 0x24
        assert(MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 2);
    9172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9174:	685b      	ldr	r3, [r3, #4]
    9176:	0a1b      	lsrs	r3, r3, #8
    9178:	2b02      	cmp	r3, #2
    917a:	d006      	beq.n	918a <compile_scope+0x276>
    917c:	4b24      	ldr	r3, [pc, #144]	; (9210 <compile_scope+0x2fc>)
    917e:	4a1d      	ldr	r2, [pc, #116]	; (91f4 <compile_scope+0x2e0>)
    9180:	f640 31d1 	movw	r1, #3025	; 0xbd1
    9184:	481c      	ldr	r0, [pc, #112]	; (91f8 <compile_scope+0x2e4>)
    9186:	f012 f8f1 	bl	1b36c <__assert_func>
        assert(MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_comp_for));
    918a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    918c:	68db      	ldr	r3, [r3, #12]
    918e:	2b00      	cmp	r3, #0
    9190:	d00b      	beq.n	91aa <compile_scope+0x296>
    9192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9194:	68db      	ldr	r3, [r3, #12]
    9196:	f003 0303 	and.w	r3, r3, #3
    919a:	2b00      	cmp	r3, #0
    919c:	d105      	bne.n	91aa <compile_scope+0x296>
    919e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    91a0:	68db      	ldr	r3, [r3, #12]
    91a2:	685b      	ldr	r3, [r3, #4]
    91a4:	b2db      	uxtb	r3, r3
    91a6:	2b9f      	cmp	r3, #159	; 0x9f
    91a8:	d006      	beq.n	91b8 <compile_scope+0x2a4>
    91aa:	4b1a      	ldr	r3, [pc, #104]	; (9214 <compile_scope+0x300>)
    91ac:	4a11      	ldr	r2, [pc, #68]	; (91f4 <compile_scope+0x2e0>)
    91ae:	f640 31d2 	movw	r1, #3026	; 0xbd2
    91b2:	4811      	ldr	r0, [pc, #68]	; (91f8 <compile_scope+0x2e4>)
    91b4:	f012 f8da 	bl	1b36c <__assert_func>
        mp_parse_node_struct_t *pns_comp_for = (mp_parse_node_struct_t*)pns->nodes[1];
    91b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    91ba:	68db      	ldr	r3, [r3, #12]
    91bc:	623b      	str	r3, [r7, #32]

        // We need a unique name for the comprehension argument (the iterator).
        // CPython uses .0, but we should be able to use anything that won't
        // clash with a user defined variable.  Best to use an existing qstr,
        // so we use the blank qstr.
        qstr qstr_arg = MP_QSTR_;
    91be:	2301      	movs	r3, #1
    91c0:	61fb      	str	r3, [r7, #28]
        if (comp->pass == MP_PASS_SCOPE) {
    91c2:	68fb      	ldr	r3, [r7, #12]
    91c4:	795b      	ldrb	r3, [r3, #5]
    91c6:	2b01      	cmp	r3, #1
    91c8:	d12e      	bne.n	9228 <compile_scope+0x314>
            bool added;
            id_info_t *id_info = scope_find_or_add_id(comp->scope_cur, qstr_arg, &added);
    91ca:	68fb      	ldr	r3, [r7, #12]
    91cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    91ce:	f107 0217 	add.w	r2, r7, #23
    91d2:	69f9      	ldr	r1, [r7, #28]
    91d4:	4618      	mov	r0, r3
    91d6:	f7fb fc79 	bl	4acc <scope_find_or_add_id>
    91da:	61b8      	str	r0, [r7, #24]
            assert(added);
    91dc:	7dfb      	ldrb	r3, [r7, #23]
    91de:	2b00      	cmp	r3, #0
    91e0:	d11c      	bne.n	921c <compile_scope+0x308>
    91e2:	4b0d      	ldr	r3, [pc, #52]	; (9218 <compile_scope+0x304>)
    91e4:	4a03      	ldr	r2, [pc, #12]	; (91f4 <compile_scope+0x2e0>)
    91e6:	f640 31dd 	movw	r1, #3037	; 0xbdd
    91ea:	4803      	ldr	r0, [pc, #12]	; (91f8 <compile_scope+0x2e4>)
    91ec:	f012 f8be 	bl	1b36c <__assert_func>
    91f0:	0001ed40 	.word	0x0001ed40
    91f4:	0001f0fc 	.word	0x0001f0fc
    91f8:	0001e304 	.word	0x0001e304
    91fc:	0001ed5c 	.word	0x0001ed5c
    9200:	0001ed80 	.word	0x0001ed80
    9204:	00008d85 	.word	0x00008d85
    9208:	0001edb0 	.word	0x0001edb0
    920c:	00008da9 	.word	0x00008da9
    9210:	0001ea4c 	.word	0x0001ea4c
    9214:	0001ea78 	.word	0x0001ea78
    9218:	0001eddc 	.word	0x0001eddc
            id_info->kind = ID_INFO_KIND_LOCAL;
    921c:	69bb      	ldr	r3, [r7, #24]
    921e:	2202      	movs	r2, #2
    9220:	701a      	strb	r2, [r3, #0]
            scope->num_pos_args = 1;
    9222:	68bb      	ldr	r3, [r7, #8]
    9224:	2201      	movs	r2, #1
    9226:	835a      	strh	r2, [r3, #26]
        }

        if (scope->kind == SCOPE_LIST_COMP) {
    9228:	68bb      	ldr	r3, [r7, #8]
    922a:	681b      	ldr	r3, [r3, #0]
    922c:	2b03      	cmp	r3, #3
    922e:	d107      	bne.n	9240 <compile_scope+0x32c>
            EMIT_ARG(build, 0, MP_EMIT_BUILD_LIST);
    9230:	68fb      	ldr	r3, [r7, #12]
    9232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9234:	2201      	movs	r2, #1
    9236:	2100      	movs	r1, #0
    9238:	4618      	mov	r0, r3
    923a:	f001 fc73 	bl	ab24 <mp_emit_bc_build>
    923e:	e00a      	b.n	9256 <compile_scope+0x342>
        } else if (scope->kind == SCOPE_DICT_COMP) {
    9240:	68bb      	ldr	r3, [r7, #8]
    9242:	681b      	ldr	r3, [r3, #0]
    9244:	2b04      	cmp	r3, #4
    9246:	d106      	bne.n	9256 <compile_scope+0x342>
            EMIT_ARG(build, 0, MP_EMIT_BUILD_MAP);
    9248:	68fb      	ldr	r3, [r7, #12]
    924a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    924c:	2203      	movs	r2, #3
    924e:	2100      	movs	r1, #0
    9250:	4618      	mov	r0, r3
    9252:	f001 fc67 	bl	ab24 <mp_emit_bc_build>
        #endif
        }

        // There are 4 slots on the stack for the iterator, and the first one is
        // NULL to indicate that the second one points to the iterator object.
        if (scope->kind == SCOPE_GEN_EXPR) {
    9256:	68bb      	ldr	r3, [r7, #8]
    9258:	681b      	ldr	r3, [r3, #0]
    925a:	2b06      	cmp	r3, #6
    925c:	d113      	bne.n	9286 <compile_scope+0x372>
            MP_STATIC_ASSERT(MP_OBJ_ITER_BUF_NSLOTS == 4);
            EMIT(load_null);
    925e:	68fb      	ldr	r3, [r7, #12]
    9260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9262:	4618      	mov	r0, r3
    9264:	f001 f940 	bl	a4e8 <mp_emit_bc_load_null>
            compile_load_id(comp, qstr_arg);
    9268:	69f9      	ldr	r1, [r7, #28]
    926a:	68f8      	ldr	r0, [r7, #12]
    926c:	f7fb fe7a 	bl	4f64 <compile_load_id>
            EMIT(load_null);
    9270:	68fb      	ldr	r3, [r7, #12]
    9272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9274:	4618      	mov	r0, r3
    9276:	f001 f937 	bl	a4e8 <mp_emit_bc_load_null>
            EMIT(load_null);
    927a:	68fb      	ldr	r3, [r7, #12]
    927c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    927e:	4618      	mov	r0, r3
    9280:	f001 f932 	bl	a4e8 <mp_emit_bc_load_null>
    9284:	e009      	b.n	929a <compile_scope+0x386>
        } else {
            compile_load_id(comp, qstr_arg);
    9286:	69f9      	ldr	r1, [r7, #28]
    9288:	68f8      	ldr	r0, [r7, #12]
    928a:	f7fb fe6b 	bl	4f64 <compile_load_id>
            EMIT_ARG(get_iter, true);
    928e:	68fb      	ldr	r3, [r7, #12]
    9290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9292:	2101      	movs	r1, #1
    9294:	4618      	mov	r0, r3
    9296:	f001 fb9f 	bl	a9d8 <mp_emit_bc_get_iter>
        }

        compile_scope_comp_iter(comp, pns_comp_for, pns->nodes[0], 0);
    929a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    929c:	689a      	ldr	r2, [r3, #8]
    929e:	2300      	movs	r3, #0
    92a0:	6a39      	ldr	r1, [r7, #32]
    92a2:	68f8      	ldr	r0, [r7, #12]
    92a4:	f7ff fd92 	bl	8dcc <compile_scope_comp_iter>

        if (scope->kind == SCOPE_GEN_EXPR) {
    92a8:	68bb      	ldr	r3, [r7, #8]
    92aa:	681b      	ldr	r3, [r3, #0]
    92ac:	2b06      	cmp	r3, #6
    92ae:	d105      	bne.n	92bc <compile_scope+0x3a8>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    92b0:	68fb      	ldr	r3, [r7, #12]
    92b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    92b4:	210e      	movs	r1, #14
    92b6:	4618      	mov	r0, r3
    92b8:	f001 f894 	bl	a3e4 <mp_emit_bc_load_const_tok>
        }
        EMIT(return_value);
    92bc:	68fb      	ldr	r3, [r7, #12]
    92be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    92c0:	4618      	mov	r0, r3
    92c2:	f001 fd93 	bl	adec <mp_emit_bc_return_value>
    } else if (scope->kind == SCOPE_LIST_COMP || scope->kind == SCOPE_DICT_COMP || scope->kind == SCOPE_SET_COMP || scope->kind == SCOPE_GEN_EXPR) {
    92c6:	e08c      	b.n	93e2 <compile_scope+0x4ce>
    } else {
        assert(scope->kind == SCOPE_CLASS);
    92c8:	68bb      	ldr	r3, [r7, #8]
    92ca:	681b      	ldr	r3, [r3, #0]
    92cc:	2b01      	cmp	r3, #1
    92ce:	d006      	beq.n	92de <compile_scope+0x3ca>
    92d0:	4b4e      	ldr	r3, [pc, #312]	; (940c <compile_scope+0x4f8>)
    92d2:	4a4f      	ldr	r2, [pc, #316]	; (9410 <compile_scope+0x4fc>)
    92d4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    92d8:	484e      	ldr	r0, [pc, #312]	; (9414 <compile_scope+0x500>)
    92da:	f012 f847 	bl	1b36c <__assert_func>
        assert(MP_PARSE_NODE_IS_STRUCT(scope->pn));
    92de:	68bb      	ldr	r3, [r7, #8]
    92e0:	68db      	ldr	r3, [r3, #12]
    92e2:	2b00      	cmp	r3, #0
    92e4:	d005      	beq.n	92f2 <compile_scope+0x3de>
    92e6:	68bb      	ldr	r3, [r7, #8]
    92e8:	68db      	ldr	r3, [r3, #12]
    92ea:	f003 0303 	and.w	r3, r3, #3
    92ee:	2b00      	cmp	r3, #0
    92f0:	d006      	beq.n	9300 <compile_scope+0x3ec>
    92f2:	4b49      	ldr	r3, [pc, #292]	; (9418 <compile_scope+0x504>)
    92f4:	4a46      	ldr	r2, [pc, #280]	; (9410 <compile_scope+0x4fc>)
    92f6:	f640 4101 	movw	r1, #3073	; 0xc01
    92fa:	4846      	ldr	r0, [pc, #280]	; (9414 <compile_scope+0x500>)
    92fc:	f012 f836 	bl	1b36c <__assert_func>
        mp_parse_node_struct_t *pns = (mp_parse_node_struct_t*)scope->pn;
    9300:	68bb      	ldr	r3, [r7, #8]
    9302:	68db      	ldr	r3, [r3, #12]
    9304:	633b      	str	r3, [r7, #48]	; 0x30
        assert(MP_PARSE_NODE_STRUCT_KIND(pns) == PN_classdef);
    9306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9308:	685b      	ldr	r3, [r3, #4]
    930a:	b2db      	uxtb	r3, r3
    930c:	2b33      	cmp	r3, #51	; 0x33
    930e:	d006      	beq.n	931e <compile_scope+0x40a>
    9310:	4b42      	ldr	r3, [pc, #264]	; (941c <compile_scope+0x508>)
    9312:	4a3f      	ldr	r2, [pc, #252]	; (9410 <compile_scope+0x4fc>)
    9314:	f640 4103 	movw	r1, #3075	; 0xc03
    9318:	483e      	ldr	r0, [pc, #248]	; (9414 <compile_scope+0x500>)
    931a:	f012 f827 	bl	1b36c <__assert_func>

        if (comp->pass == MP_PASS_SCOPE) {
    931e:	68fb      	ldr	r3, [r7, #12]
    9320:	795b      	ldrb	r3, [r3, #5]
    9322:	2b01      	cmp	r3, #1
    9324:	d114      	bne.n	9350 <compile_scope+0x43c>
            bool added;
            id_info_t *id_info = scope_find_or_add_id(scope, MP_QSTR___class__, &added);
    9326:	f107 0316 	add.w	r3, r7, #22
    932a:	461a      	mov	r2, r3
    932c:	2106      	movs	r1, #6
    932e:	68b8      	ldr	r0, [r7, #8]
    9330:	f7fb fbcc 	bl	4acc <scope_find_or_add_id>
    9334:	62f8      	str	r0, [r7, #44]	; 0x2c
            assert(added);
    9336:	7dbb      	ldrb	r3, [r7, #22]
    9338:	2b00      	cmp	r3, #0
    933a:	d106      	bne.n	934a <compile_scope+0x436>
    933c:	4b38      	ldr	r3, [pc, #224]	; (9420 <compile_scope+0x50c>)
    933e:	4a34      	ldr	r2, [pc, #208]	; (9410 <compile_scope+0x4fc>)
    9340:	f640 4108 	movw	r1, #3080	; 0xc08
    9344:	4833      	ldr	r0, [pc, #204]	; (9414 <compile_scope+0x500>)
    9346:	f012 f811 	bl	1b36c <__assert_func>
            id_info->kind = ID_INFO_KIND_LOCAL;
    934a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    934c:	2202      	movs	r2, #2
    934e:	701a      	strb	r2, [r3, #0]
        }

        compile_load_id(comp, MP_QSTR___name__);
    9350:	211b      	movs	r1, #27
    9352:	68f8      	ldr	r0, [r7, #12]
    9354:	f7fb fe06 	bl	4f64 <compile_load_id>
        compile_store_id(comp, MP_QSTR___module__);
    9358:	211a      	movs	r1, #26
    935a:	68f8      	ldr	r0, [r7, #12]
    935c:	f7fb fe20 	bl	4fa0 <compile_store_id>
        EMIT_ARG(load_const_str, MP_PARSE_NODE_LEAF_ARG(pns->nodes[0])); // 0 is class name
    9360:	68fb      	ldr	r3, [r7, #12]
    9362:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9366:	689b      	ldr	r3, [r3, #8]
    9368:	091b      	lsrs	r3, r3, #4
    936a:	4619      	mov	r1, r3
    936c:	4610      	mov	r0, r2
    936e:	f001 f897 	bl	a4a0 <mp_emit_bc_load_const_str>
        compile_store_id(comp, MP_QSTR___qualname__);
    9372:	211f      	movs	r1, #31
    9374:	68f8      	ldr	r0, [r7, #12]
    9376:	f7fb fe13 	bl	4fa0 <compile_store_id>

        check_for_doc_string(comp, pns->nodes[2]);
    937a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    937c:	691b      	ldr	r3, [r3, #16]
    937e:	4619      	mov	r1, r3
    9380:	68f8      	ldr	r0, [r7, #12]
    9382:	f7ff fdbb 	bl	8efc <check_for_doc_string>
        compile_node(comp, pns->nodes[2]); // 2 is class body
    9386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9388:	691b      	ldr	r3, [r3, #16]
    938a:	4619      	mov	r1, r3
    938c:	68f8      	ldr	r0, [r7, #12]
    938e:	f7ff fb61 	bl	8a54 <compile_node>

        id_info_t *id = scope_find(scope, MP_QSTR___class__);
    9392:	2106      	movs	r1, #6
    9394:	68b8      	ldr	r0, [r7, #8]
    9396:	f7fb fbe5 	bl	4b64 <scope_find>
    939a:	62b8      	str	r0, [r7, #40]	; 0x28
        assert(id != NULL);
    939c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    939e:	2b00      	cmp	r3, #0
    93a0:	d106      	bne.n	93b0 <compile_scope+0x49c>
    93a2:	4b20      	ldr	r3, [pc, #128]	; (9424 <compile_scope+0x510>)
    93a4:	4a1a      	ldr	r2, [pc, #104]	; (9410 <compile_scope+0x4fc>)
    93a6:	f640 4115 	movw	r1, #3093	; 0xc15
    93aa:	481a      	ldr	r0, [pc, #104]	; (9414 <compile_scope+0x500>)
    93ac:	f011 ffde 	bl	1b36c <__assert_func>
        if (id->kind == ID_INFO_KIND_LOCAL) {
    93b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    93b2:	781b      	ldrb	r3, [r3, #0]
    93b4:	2b02      	cmp	r3, #2
    93b6:	d106      	bne.n	93c6 <compile_scope+0x4b2>
            EMIT_ARG(load_const_tok, MP_TOKEN_KW_NONE);
    93b8:	68fb      	ldr	r3, [r7, #12]
    93ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    93bc:	210e      	movs	r1, #14
    93be:	4618      	mov	r0, r3
    93c0:	f001 f810 	bl	a3e4 <mp_emit_bc_load_const_tok>
    93c4:	e008      	b.n	93d8 <compile_scope+0x4c4>
        } else {
            EMIT_LOAD_FAST(MP_QSTR___class__, id->local_num);
    93c6:	68fb      	ldr	r3, [r7, #12]
    93c8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    93ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    93cc:	885b      	ldrh	r3, [r3, #2]
    93ce:	461a      	mov	r2, r3
    93d0:	2300      	movs	r3, #0
    93d2:	2106      	movs	r1, #6
    93d4:	f001 f898 	bl	a508 <mp_emit_bc_load_local>
        }
        EMIT(return_value);
    93d8:	68fb      	ldr	r3, [r7, #12]
    93da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    93dc:	4618      	mov	r0, r3
    93de:	f001 fd05 	bl	adec <mp_emit_bc_return_value>
    }

    EMIT(end_pass);
    93e2:	68fb      	ldr	r3, [r7, #12]
    93e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    93e6:	4618      	mov	r0, r3
    93e8:	f000 fea4 	bl	a134 <mp_emit_bc_end_pass>

    // make sure we match all the exception levels
    assert(comp->cur_except_level == 0);
    93ec:	68fb      	ldr	r3, [r7, #12]
    93ee:	8b9b      	ldrh	r3, [r3, #28]
    93f0:	2b00      	cmp	r3, #0
    93f2:	d006      	beq.n	9402 <compile_scope+0x4ee>
    93f4:	4b0c      	ldr	r3, [pc, #48]	; (9428 <compile_scope+0x514>)
    93f6:	4a06      	ldr	r2, [pc, #24]	; (9410 <compile_scope+0x4fc>)
    93f8:	f640 4121 	movw	r1, #3105	; 0xc21
    93fc:	4805      	ldr	r0, [pc, #20]	; (9414 <compile_scope+0x500>)
    93fe:	f011 ffb5 	bl	1b36c <__assert_func>
}
    9402:	bf00      	nop
    9404:	3740      	adds	r7, #64	; 0x40
    9406:	46bd      	mov	sp, r7
    9408:	bd80      	pop	{r7, pc}
    940a:	bf00      	nop
    940c:	0001ede4 	.word	0x0001ede4
    9410:	0001f0fc 	.word	0x0001f0fc
    9414:	0001e304 	.word	0x0001e304
    9418:	0001ed5c 	.word	0x0001ed5c
    941c:	0001ee00 	.word	0x0001ee00
    9420:	0001eddc 	.word	0x0001eddc
    9424:	0001ee30 	.word	0x0001ee30
    9428:	0001ee3c 	.word	0x0001ee3c

0000942c <scope_compute_things>:
        comp->compile_error_line = pns->source_line;
    }
}
#endif

STATIC void scope_compute_things(scope_t *scope) {
    942c:	b580      	push	{r7, lr}
    942e:	b092      	sub	sp, #72	; 0x48
    9430:	af00      	add	r7, sp, #0
    9432:	6078      	str	r0, [r7, #4]
    // in MicroPython we put the *x parameter after all other parameters (except **y)
    if (scope->scope_flags & MP_SCOPE_FLAG_VARARGS) {
    9434:	687b      	ldr	r3, [r7, #4]
    9436:	7e1b      	ldrb	r3, [r3, #24]
    9438:	f003 0301 	and.w	r3, r3, #1
    943c:	2b00      	cmp	r3, #0
    943e:	d03c      	beq.n	94ba <scope_compute_things+0x8e>
        id_info_t *id_param = NULL;
    9440:	2300      	movs	r3, #0
    9442:	647b      	str	r3, [r7, #68]	; 0x44
        for (int i = scope->id_info_len - 1; i >= 0; i--) {
    9444:	687b      	ldr	r3, [r7, #4]
    9446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9448:	3b01      	subs	r3, #1
    944a:	643b      	str	r3, [r7, #64]	; 0x40
    944c:	e030      	b.n	94b0 <scope_compute_things+0x84>
            id_info_t *id = &scope->id_info[i];
    944e:	687b      	ldr	r3, [r7, #4]
    9450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9454:	00db      	lsls	r3, r3, #3
    9456:	4413      	add	r3, r2
    9458:	627b      	str	r3, [r7, #36]	; 0x24
            if (id->flags & ID_FLAG_IS_STAR_PARAM) {
    945a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    945c:	785b      	ldrb	r3, [r3, #1]
    945e:	f003 0302 	and.w	r3, r3, #2
    9462:	2b00      	cmp	r3, #0
    9464:	d018      	beq.n	9498 <scope_compute_things+0x6c>
                if (id_param != NULL) {
    9466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9468:	2b00      	cmp	r3, #0
    946a:	d025      	beq.n	94b8 <scope_compute_things+0x8c>
                    // swap star param with last param
                    id_info_t temp = *id_param; *id_param = *id; *id = temp;
    946c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    946e:	f107 0308 	add.w	r3, r7, #8
    9472:	e892 0003 	ldmia.w	r2, {r0, r1}
    9476:	e883 0003 	stmia.w	r3, {r0, r1}
    947a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    947c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    947e:	e892 0003 	ldmia.w	r2, {r0, r1}
    9482:	e883 0003 	stmia.w	r3, {r0, r1}
    9486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9488:	461a      	mov	r2, r3
    948a:	f107 0308 	add.w	r3, r7, #8
    948e:	e893 0003 	ldmia.w	r3, {r0, r1}
    9492:	e882 0003 	stmia.w	r2, {r0, r1}
                }
                break;
    9496:	e00f      	b.n	94b8 <scope_compute_things+0x8c>
            } else if (id_param == NULL && id->flags == ID_FLAG_IS_PARAM) {
    9498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    949a:	2b00      	cmp	r3, #0
    949c:	d105      	bne.n	94aa <scope_compute_things+0x7e>
    949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    94a0:	785b      	ldrb	r3, [r3, #1]
    94a2:	2b01      	cmp	r3, #1
    94a4:	d101      	bne.n	94aa <scope_compute_things+0x7e>
                id_param = id;
    94a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    94a8:	647b      	str	r3, [r7, #68]	; 0x44
        for (int i = scope->id_info_len - 1; i >= 0; i--) {
    94aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    94ac:	3b01      	subs	r3, #1
    94ae:	643b      	str	r3, [r7, #64]	; 0x40
    94b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    94b2:	2b00      	cmp	r3, #0
    94b4:	dacb      	bge.n	944e <scope_compute_things+0x22>
    94b6:	e000      	b.n	94ba <scope_compute_things+0x8e>
                break;
    94b8:	bf00      	nop
        }
    }

    // in functions, turn implicit globals into explicit globals
    // compute the index of each local
    scope->num_locals = 0;
    94ba:	687b      	ldr	r3, [r7, #4]
    94bc:	2200      	movs	r2, #0
    94be:	841a      	strh	r2, [r3, #32]
    for (int i = 0; i < scope->id_info_len; i++) {
    94c0:	2300      	movs	r3, #0
    94c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    94c4:	e02f      	b.n	9526 <scope_compute_things+0xfa>
        id_info_t *id = &scope->id_info[i];
    94c6:	687b      	ldr	r3, [r7, #4]
    94c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    94ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    94cc:	00db      	lsls	r3, r3, #3
    94ce:	4413      	add	r3, r2
    94d0:	623b      	str	r3, [r7, #32]
        if (scope->kind == SCOPE_CLASS && id->qst == MP_QSTR___class__) {
    94d2:	687b      	ldr	r3, [r7, #4]
    94d4:	681b      	ldr	r3, [r3, #0]
    94d6:	2b01      	cmp	r3, #1
    94d8:	d103      	bne.n	94e2 <scope_compute_things+0xb6>
    94da:	6a3b      	ldr	r3, [r7, #32]
    94dc:	685b      	ldr	r3, [r3, #4]
    94de:	2b06      	cmp	r3, #6
    94e0:	d01d      	beq.n	951e <scope_compute_things+0xf2>
            // __class__ is not counted as a local; if it's used then it becomes a ID_INFO_KIND_CELL
            continue;
        }
        if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    94e2:	687b      	ldr	r3, [r7, #4]
    94e4:	681b      	ldr	r3, [r3, #0]
    94e6:	2b01      	cmp	r3, #1
    94e8:	d906      	bls.n	94f8 <scope_compute_things+0xcc>
    94ea:	6a3b      	ldr	r3, [r7, #32]
    94ec:	781b      	ldrb	r3, [r3, #0]
    94ee:	2b00      	cmp	r3, #0
    94f0:	d102      	bne.n	94f8 <scope_compute_things+0xcc>
            id->kind = ID_INFO_KIND_GLOBAL_EXPLICIT;
    94f2:	6a3b      	ldr	r3, [r7, #32]
    94f4:	2201      	movs	r2, #1
    94f6:	701a      	strb	r2, [r3, #0]
        }
        // params always count for 1 local, even if they are a cell
        if (id->kind == ID_INFO_KIND_LOCAL || (id->flags & ID_FLAG_IS_PARAM)) {
    94f8:	6a3b      	ldr	r3, [r7, #32]
    94fa:	781b      	ldrb	r3, [r3, #0]
    94fc:	2b02      	cmp	r3, #2
    94fe:	d005      	beq.n	950c <scope_compute_things+0xe0>
    9500:	6a3b      	ldr	r3, [r7, #32]
    9502:	785b      	ldrb	r3, [r3, #1]
    9504:	f003 0301 	and.w	r3, r3, #1
    9508:	2b00      	cmp	r3, #0
    950a:	d009      	beq.n	9520 <scope_compute_things+0xf4>
            id->local_num = scope->num_locals++;
    950c:	687b      	ldr	r3, [r7, #4]
    950e:	8c1b      	ldrh	r3, [r3, #32]
    9510:	1c5a      	adds	r2, r3, #1
    9512:	b291      	uxth	r1, r2
    9514:	687a      	ldr	r2, [r7, #4]
    9516:	8411      	strh	r1, [r2, #32]
    9518:	6a3a      	ldr	r2, [r7, #32]
    951a:	8053      	strh	r3, [r2, #2]
    951c:	e000      	b.n	9520 <scope_compute_things+0xf4>
            continue;
    951e:	bf00      	nop
    for (int i = 0; i < scope->id_info_len; i++) {
    9520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9522:	3301      	adds	r3, #1
    9524:	63fb      	str	r3, [r7, #60]	; 0x3c
    9526:	687b      	ldr	r3, [r7, #4]
    9528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    952a:	461a      	mov	r2, r3
    952c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    952e:	429a      	cmp	r2, r3
    9530:	dcc9      	bgt.n	94c6 <scope_compute_things+0x9a>
        }
    }

    // compute the index of cell vars
    for (int i = 0; i < scope->id_info_len; i++) {
    9532:	2300      	movs	r3, #0
    9534:	63bb      	str	r3, [r7, #56]	; 0x38
    9536:	e01c      	b.n	9572 <scope_compute_things+0x146>
        id_info_t *id = &scope->id_info[i];
    9538:	687b      	ldr	r3, [r7, #4]
    953a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    953c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    953e:	00db      	lsls	r3, r3, #3
    9540:	4413      	add	r3, r2
    9542:	61fb      	str	r3, [r7, #28]
        // in MicroPython the cells come right after the fast locals
        // parameters are not counted here, since they remain at the start
        // of the locals, even if they are cell vars
        if (id->kind == ID_INFO_KIND_CELL && !(id->flags & ID_FLAG_IS_PARAM)) {
    9544:	69fb      	ldr	r3, [r7, #28]
    9546:	781b      	ldrb	r3, [r3, #0]
    9548:	2b03      	cmp	r3, #3
    954a:	d10f      	bne.n	956c <scope_compute_things+0x140>
    954c:	69fb      	ldr	r3, [r7, #28]
    954e:	785b      	ldrb	r3, [r3, #1]
    9550:	f003 0301 	and.w	r3, r3, #1
    9554:	2b00      	cmp	r3, #0
    9556:	d109      	bne.n	956c <scope_compute_things+0x140>
            id->local_num = scope->num_locals;
    9558:	687b      	ldr	r3, [r7, #4]
    955a:	8c1a      	ldrh	r2, [r3, #32]
    955c:	69fb      	ldr	r3, [r7, #28]
    955e:	805a      	strh	r2, [r3, #2]
            scope->num_locals += 1;
    9560:	687b      	ldr	r3, [r7, #4]
    9562:	8c1b      	ldrh	r3, [r3, #32]
    9564:	3301      	adds	r3, #1
    9566:	b29a      	uxth	r2, r3
    9568:	687b      	ldr	r3, [r7, #4]
    956a:	841a      	strh	r2, [r3, #32]
    for (int i = 0; i < scope->id_info_len; i++) {
    956c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    956e:	3301      	adds	r3, #1
    9570:	63bb      	str	r3, [r7, #56]	; 0x38
    9572:	687b      	ldr	r3, [r7, #4]
    9574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9576:	461a      	mov	r2, r3
    9578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    957a:	429a      	cmp	r2, r3
    957c:	dcdc      	bgt.n	9538 <scope_compute_things+0x10c>
        }
    }

    // compute the index of free vars
    // make sure they are in the order of the parent scope
    if (scope->parent != NULL) {
    957e:	687b      	ldr	r3, [r7, #4]
    9580:	685b      	ldr	r3, [r3, #4]
    9582:	2b00      	cmp	r3, #0
    9584:	f000 8085 	beq.w	9692 <scope_compute_things+0x266>
        int num_free = 0;
    9588:	2300      	movs	r3, #0
    958a:	637b      	str	r3, [r7, #52]	; 0x34
        for (int i = 0; i < scope->parent->id_info_len; i++) {
    958c:	2300      	movs	r3, #0
    958e:	633b      	str	r3, [r7, #48]	; 0x30
    9590:	e041      	b.n	9616 <scope_compute_things+0x1ea>
            id_info_t *id = &scope->parent->id_info[i];
    9592:	687b      	ldr	r3, [r7, #4]
    9594:	685b      	ldr	r3, [r3, #4]
    9596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    959a:	00db      	lsls	r3, r3, #3
    959c:	4413      	add	r3, r2
    959e:	61bb      	str	r3, [r7, #24]
            if (id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE) {
    95a0:	69bb      	ldr	r3, [r7, #24]
    95a2:	781b      	ldrb	r3, [r3, #0]
    95a4:	2b03      	cmp	r3, #3
    95a6:	d003      	beq.n	95b0 <scope_compute_things+0x184>
    95a8:	69bb      	ldr	r3, [r7, #24]
    95aa:	781b      	ldrb	r3, [r3, #0]
    95ac:	2b04      	cmp	r3, #4
    95ae:	d12f      	bne.n	9610 <scope_compute_things+0x1e4>
                for (int j = 0; j < scope->id_info_len; j++) {
    95b0:	2300      	movs	r3, #0
    95b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    95b4:	e026      	b.n	9604 <scope_compute_things+0x1d8>
                    id_info_t *id2 = &scope->id_info[j];
    95b6:	687b      	ldr	r3, [r7, #4]
    95b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    95ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    95bc:	00db      	lsls	r3, r3, #3
    95be:	4413      	add	r3, r2
    95c0:	617b      	str	r3, [r7, #20]
                    if (id2->kind == ID_INFO_KIND_FREE && id->qst == id2->qst) {
    95c2:	697b      	ldr	r3, [r7, #20]
    95c4:	781b      	ldrb	r3, [r3, #0]
    95c6:	2b04      	cmp	r3, #4
    95c8:	d119      	bne.n	95fe <scope_compute_things+0x1d2>
    95ca:	69bb      	ldr	r3, [r7, #24]
    95cc:	685a      	ldr	r2, [r3, #4]
    95ce:	697b      	ldr	r3, [r7, #20]
    95d0:	685b      	ldr	r3, [r3, #4]
    95d2:	429a      	cmp	r2, r3
    95d4:	d113      	bne.n	95fe <scope_compute_things+0x1d2>
                        assert(!(id2->flags & ID_FLAG_IS_PARAM)); // free vars should not be params
    95d6:	697b      	ldr	r3, [r7, #20]
    95d8:	785b      	ldrb	r3, [r3, #1]
    95da:	f003 0301 	and.w	r3, r3, #1
    95de:	2b00      	cmp	r3, #0
    95e0:	d006      	beq.n	95f0 <scope_compute_things+0x1c4>
    95e2:	4b2e      	ldr	r3, [pc, #184]	; (969c <scope_compute_things+0x270>)
    95e4:	4a2e      	ldr	r2, [pc, #184]	; (96a0 <scope_compute_things+0x274>)
    95e6:	f640 41ff 	movw	r1, #3327	; 0xcff
    95ea:	482e      	ldr	r0, [pc, #184]	; (96a4 <scope_compute_things+0x278>)
    95ec:	f011 febe 	bl	1b36c <__assert_func>
                        // in MicroPython the frees come first, before the params
                        id2->local_num = num_free;
    95f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    95f2:	b29a      	uxth	r2, r3
    95f4:	697b      	ldr	r3, [r7, #20]
    95f6:	805a      	strh	r2, [r3, #2]
                        num_free += 1;
    95f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    95fa:	3301      	adds	r3, #1
    95fc:	637b      	str	r3, [r7, #52]	; 0x34
                for (int j = 0; j < scope->id_info_len; j++) {
    95fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9600:	3301      	adds	r3, #1
    9602:	62fb      	str	r3, [r7, #44]	; 0x2c
    9604:	687b      	ldr	r3, [r7, #4]
    9606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9608:	461a      	mov	r2, r3
    960a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    960c:	429a      	cmp	r2, r3
    960e:	dcd2      	bgt.n	95b6 <scope_compute_things+0x18a>
        for (int i = 0; i < scope->parent->id_info_len; i++) {
    9610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9612:	3301      	adds	r3, #1
    9614:	633b      	str	r3, [r7, #48]	; 0x30
    9616:	687b      	ldr	r3, [r7, #4]
    9618:	685b      	ldr	r3, [r3, #4]
    961a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    961c:	461a      	mov	r2, r3
    961e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9620:	429a      	cmp	r2, r3
    9622:	dcb6      	bgt.n	9592 <scope_compute_things+0x166>
                    }
                }
            }
        }
        // in MicroPython shift all other locals after the free locals
        if (num_free > 0) {
    9624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9626:	2b00      	cmp	r3, #0
    9628:	dd33      	ble.n	9692 <scope_compute_things+0x266>
            for (int i = 0; i < scope->id_info_len; i++) {
    962a:	2300      	movs	r3, #0
    962c:	62bb      	str	r3, [r7, #40]	; 0x28
    962e:	e01a      	b.n	9666 <scope_compute_things+0x23a>
                id_info_t *id = &scope->id_info[i];
    9630:	687b      	ldr	r3, [r7, #4]
    9632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9634:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9636:	00db      	lsls	r3, r3, #3
    9638:	4413      	add	r3, r2
    963a:	613b      	str	r3, [r7, #16]
                if (id->kind != ID_INFO_KIND_FREE || (id->flags & ID_FLAG_IS_PARAM)) {
    963c:	693b      	ldr	r3, [r7, #16]
    963e:	781b      	ldrb	r3, [r3, #0]
    9640:	2b04      	cmp	r3, #4
    9642:	d105      	bne.n	9650 <scope_compute_things+0x224>
    9644:	693b      	ldr	r3, [r7, #16]
    9646:	785b      	ldrb	r3, [r3, #1]
    9648:	f003 0301 	and.w	r3, r3, #1
    964c:	2b00      	cmp	r3, #0
    964e:	d007      	beq.n	9660 <scope_compute_things+0x234>
                    id->local_num += num_free;
    9650:	693b      	ldr	r3, [r7, #16]
    9652:	885a      	ldrh	r2, [r3, #2]
    9654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9656:	b29b      	uxth	r3, r3
    9658:	4413      	add	r3, r2
    965a:	b29a      	uxth	r2, r3
    965c:	693b      	ldr	r3, [r7, #16]
    965e:	805a      	strh	r2, [r3, #2]
            for (int i = 0; i < scope->id_info_len; i++) {
    9660:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9662:	3301      	adds	r3, #1
    9664:	62bb      	str	r3, [r7, #40]	; 0x28
    9666:	687b      	ldr	r3, [r7, #4]
    9668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    966a:	461a      	mov	r2, r3
    966c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    966e:	429a      	cmp	r2, r3
    9670:	dcde      	bgt.n	9630 <scope_compute_things+0x204>
                }
            }
            scope->num_pos_args += num_free; // free vars are counted as params for passing them into the function
    9672:	687b      	ldr	r3, [r7, #4]
    9674:	8b5a      	ldrh	r2, [r3, #26]
    9676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9678:	b29b      	uxth	r3, r3
    967a:	4413      	add	r3, r2
    967c:	b29a      	uxth	r2, r3
    967e:	687b      	ldr	r3, [r7, #4]
    9680:	835a      	strh	r2, [r3, #26]
            scope->num_locals += num_free;
    9682:	687b      	ldr	r3, [r7, #4]
    9684:	8c1a      	ldrh	r2, [r3, #32]
    9686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9688:	b29b      	uxth	r3, r3
    968a:	4413      	add	r3, r2
    968c:	b29a      	uxth	r2, r3
    968e:	687b      	ldr	r3, [r7, #4]
    9690:	841a      	strh	r2, [r3, #32]
        }
    }
}
    9692:	bf00      	nop
    9694:	3748      	adds	r7, #72	; 0x48
    9696:	46bd      	mov	sp, r7
    9698:	bd80      	pop	{r7, pc}
    969a:	bf00      	nop
    969c:	0001ee58 	.word	0x0001ee58
    96a0:	0001f10c 	.word	0x0001f10c
    96a4:	0001e304 	.word	0x0001e304

000096a8 <mp_compile_to_raw_code>:

#if !MICROPY_PERSISTENT_CODE_SAVE
STATIC
#endif
mp_raw_code_t *mp_compile_to_raw_code(mp_parse_tree_t *parse_tree, qstr source_file, uint emit_opt, bool is_repl) {
    96a8:	b580      	push	{r7, lr}
    96aa:	b09a      	sub	sp, #104	; 0x68
    96ac:	af00      	add	r7, sp, #0
    96ae:	60f8      	str	r0, [r7, #12]
    96b0:	60b9      	str	r1, [r7, #8]
    96b2:	607a      	str	r2, [r7, #4]
    96b4:	70fb      	strb	r3, [r7, #3]
    // put compiler state on the stack, it's relatively small
    compiler_t comp_state = {0};
    96b6:	f107 0314 	add.w	r3, r7, #20
    96ba:	222c      	movs	r2, #44	; 0x2c
    96bc:	2100      	movs	r1, #0
    96be:	4618      	mov	r0, r3
    96c0:	f012 fc9c 	bl	1bffc <memset>
    compiler_t *comp = &comp_state;
    96c4:	f107 0314 	add.w	r3, r7, #20
    96c8:	653b      	str	r3, [r7, #80]	; 0x50

    comp->source_file = source_file;
    96ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96cc:	68ba      	ldr	r2, [r7, #8]
    96ce:	601a      	str	r2, [r3, #0]
    comp->is_repl = is_repl;
    96d0:	78fa      	ldrb	r2, [r7, #3]
    96d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96d4:	711a      	strb	r2, [r3, #4]
    comp->break_label = INVALID_LABEL;
    96d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    96dc:	831a      	strh	r2, [r3, #24]
    comp->continue_label = INVALID_LABEL;
    96de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    96e4:	835a      	strh	r2, [r3, #26]

    // create the module scope
    scope_t *module_scope = scope_new_and_link(comp, SCOPE_MODULE, parse_tree->root, emit_opt);
    96e6:	68fb      	ldr	r3, [r7, #12]
    96e8:	681a      	ldr	r2, [r3, #0]
    96ea:	687b      	ldr	r3, [r7, #4]
    96ec:	2100      	movs	r1, #0
    96ee:	6d38      	ldr	r0, [r7, #80]	; 0x50
    96f0:	f7fb fb9c 	bl	4e2c <scope_new_and_link>
    96f4:	64f8      	str	r0, [r7, #76]	; 0x4c

    // create standard emitter; it's used at least for MP_PASS_SCOPE
    emit_t *emit_bc = emit_bc_new();
    96f6:	f000 f955 	bl	99a4 <emit_bc_new>
    96fa:	64b8      	str	r0, [r7, #72]	; 0x48

    // compile pass 1
    comp->emit = emit_bc;
    96fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    96fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
    9700:	629a      	str	r2, [r3, #40]	; 0x28
    #if MICROPY_EMIT_NATIVE
    comp->emit_method_table = &emit_bc_method_table;
    #endif
    uint max_num_labels = 0;
    9702:	2300      	movs	r3, #0
    9704:	667b      	str	r3, [r7, #100]	; 0x64
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    9706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9708:	6a1b      	ldr	r3, [r3, #32]
    970a:	663b      	str	r3, [r7, #96]	; 0x60
    970c:	e00f      	b.n	972e <mp_compile_to_raw_code+0x86>
        #if MICROPY_EMIT_INLINE_ASM
        } else if (s->emit_options == MP_EMIT_OPT_ASM) {
            compile_scope_inline_asm(comp, s, MP_PASS_SCOPE);
        #endif
        } else {
            compile_scope(comp, s, MP_PASS_SCOPE);
    970e:	2201      	movs	r2, #1
    9710:	6e39      	ldr	r1, [r7, #96]	; 0x60
    9712:	6d38      	ldr	r0, [r7, #80]	; 0x50
    9714:	f7ff fbfe 	bl	8f14 <compile_scope>
        }

        // update maximim number of labels needed
        if (comp->next_label > max_num_labels) {
    9718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    971a:	691a      	ldr	r2, [r3, #16]
    971c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    971e:	429a      	cmp	r2, r3
    9720:	d902      	bls.n	9728 <mp_compile_to_raw_code+0x80>
            max_num_labels = comp->next_label;
    9722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9724:	691b      	ldr	r3, [r3, #16]
    9726:	667b      	str	r3, [r7, #100]	; 0x64
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    9728:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    972a:	689b      	ldr	r3, [r3, #8]
    972c:	663b      	str	r3, [r7, #96]	; 0x60
    972e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    9730:	2b00      	cmp	r3, #0
    9732:	d003      	beq.n	973c <mp_compile_to_raw_code+0x94>
    9734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9736:	689b      	ldr	r3, [r3, #8]
    9738:	2b00      	cmp	r3, #0
    973a:	d0e8      	beq.n	970e <mp_compile_to_raw_code+0x66>
        }
    }

    // compute some things related to scope and identifiers
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    973c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    973e:	6a1b      	ldr	r3, [r3, #32]
    9740:	65fb      	str	r3, [r7, #92]	; 0x5c
    9742:	e005      	b.n	9750 <mp_compile_to_raw_code+0xa8>
        scope_compute_things(s);
    9744:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    9746:	f7ff fe71 	bl	942c <scope_compute_things>
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    974a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    974c:	689b      	ldr	r3, [r3, #8]
    974e:	65fb      	str	r3, [r7, #92]	; 0x5c
    9750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    9752:	2b00      	cmp	r3, #0
    9754:	d003      	beq.n	975e <mp_compile_to_raw_code+0xb6>
    9756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9758:	689b      	ldr	r3, [r3, #8]
    975a:	2b00      	cmp	r3, #0
    975c:	d0f2      	beq.n	9744 <mp_compile_to_raw_code+0x9c>
    }

    // set max number of labels now that it's calculated
    emit_bc_set_max_num_labels(emit_bc, max_num_labels);
    975e:	6e79      	ldr	r1, [r7, #100]	; 0x64
    9760:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    9762:	f000 f92b 	bl	99bc <emit_bc_set_max_num_labels>

    // compile pass 2 and 3
#if MICROPY_EMIT_NATIVE
    emit_t *emit_native = NULL;
#endif
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    9766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9768:	6a1b      	ldr	r3, [r3, #32]
    976a:	65bb      	str	r3, [r7, #88]	; 0x58
    976c:	e01d      	b.n	97aa <mp_compile_to_raw_code+0x102>
                    EMIT_ARG(set_native_type, MP_EMIT_NATIVE_TYPE_ENABLE, s->emit_options == MP_EMIT_OPT_VIPER, 0);
                    break;
#endif // MICROPY_EMIT_NATIVE

                default:
                    comp->emit = emit_bc;
    976e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9770:	6cba      	ldr	r2, [r7, #72]	; 0x48
    9772:	629a      	str	r2, [r3, #40]	; 0x28
                    #if MICROPY_EMIT_NATIVE
                    comp->emit_method_table = &emit_bc_method_table;
                    #endif
                    break;
    9774:	bf00      	nop
            }

            // need a pass to compute stack size
            compile_scope(comp, s, MP_PASS_STACK_SIZE);
    9776:	2202      	movs	r2, #2
    9778:	6db9      	ldr	r1, [r7, #88]	; 0x58
    977a:	6d38      	ldr	r0, [r7, #80]	; 0x50
    977c:	f7ff fbca 	bl	8f14 <compile_scope>

            // second last pass: compute code size
            if (comp->compile_error == MP_OBJ_NULL) {
    9780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9782:	689b      	ldr	r3, [r3, #8]
    9784:	2b00      	cmp	r3, #0
    9786:	d104      	bne.n	9792 <mp_compile_to_raw_code+0xea>
                compile_scope(comp, s, MP_PASS_CODE_SIZE);
    9788:	2203      	movs	r2, #3
    978a:	6db9      	ldr	r1, [r7, #88]	; 0x58
    978c:	6d38      	ldr	r0, [r7, #80]	; 0x50
    978e:	f7ff fbc1 	bl	8f14 <compile_scope>
            }

            // final pass: emit code
            if (comp->compile_error == MP_OBJ_NULL) {
    9792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9794:	689b      	ldr	r3, [r3, #8]
    9796:	2b00      	cmp	r3, #0
    9798:	d104      	bne.n	97a4 <mp_compile_to_raw_code+0xfc>
                compile_scope(comp, s, MP_PASS_EMIT);
    979a:	2204      	movs	r2, #4
    979c:	6db9      	ldr	r1, [r7, #88]	; 0x58
    979e:	6d38      	ldr	r0, [r7, #80]	; 0x50
    97a0:	f7ff fbb8 	bl	8f14 <compile_scope>
    for (scope_t *s = comp->scope_head; s != NULL && comp->compile_error == MP_OBJ_NULL; s = s->next) {
    97a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    97a6:	689b      	ldr	r3, [r3, #8]
    97a8:	65bb      	str	r3, [r7, #88]	; 0x58
    97aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    97ac:	2b00      	cmp	r3, #0
    97ae:	d003      	beq.n	97b8 <mp_compile_to_raw_code+0x110>
    97b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    97b2:	689b      	ldr	r3, [r3, #8]
    97b4:	2b00      	cmp	r3, #0
    97b6:	d0da      	beq.n	976e <mp_compile_to_raw_code+0xc6>
            }
        }
    }

    if (comp->compile_error != MP_OBJ_NULL) {
    97b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    97ba:	689b      	ldr	r3, [r3, #8]
    97bc:	2b00      	cmp	r3, #0
    97be:	d011      	beq.n	97e4 <mp_compile_to_raw_code+0x13c>
        // if there is no line number for the error then use the line
        // number for the start of this scope
        compile_error_set_line(comp, comp->scope_cur->pn);
    97c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    97c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    97c4:	68db      	ldr	r3, [r3, #12]
    97c6:	4619      	mov	r1, r3
    97c8:	6d38      	ldr	r0, [r7, #80]	; 0x50
    97ca:	f7fb faad 	bl	4d28 <compile_error_set_line>
        // add a traceback to the exception using relevant source info
        mp_obj_exception_add_traceback(comp->compile_error, comp->source_file,
    97ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    97d0:	6898      	ldr	r0, [r3, #8]
    97d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    97d4:	6819      	ldr	r1, [r3, #0]
    97d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    97d8:	68da      	ldr	r2, [r3, #12]
            comp->compile_error_line, comp->scope_cur->simple_name);
    97da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    97dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    97de:	8a5b      	ldrh	r3, [r3, #18]
        mp_obj_exception_add_traceback(comp->compile_error, comp->source_file,
    97e0:	f006 f81e 	bl	f820 <mp_obj_exception_add_traceback>
    }

    // free the emitters

    emit_bc_free(emit_bc);
    97e4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    97e6:	f000 f8ff 	bl	99e8 <emit_bc_free>
        ASM_EMITTER(free)(comp->emit_inline_asm);
    }
    #endif

    // free the parse tree
    mp_parse_tree_clear(parse_tree);
    97ea:	68f8      	ldr	r0, [r7, #12]
    97ec:	f7fb f8ec 	bl	49c8 <mp_parse_tree_clear>

    // free the scopes
    mp_raw_code_t *outer_raw_code = module_scope->raw_code;
    97f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    97f2:	695b      	ldr	r3, [r3, #20]
    97f4:	647b      	str	r3, [r7, #68]	; 0x44
    for (scope_t *s = module_scope; s;) {
    97f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    97f8:	657b      	str	r3, [r7, #84]	; 0x54
    97fa:	e007      	b.n	980c <mp_compile_to_raw_code+0x164>
        scope_t *next = s->next;
    97fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    97fe:	689b      	ldr	r3, [r3, #8]
    9800:	643b      	str	r3, [r7, #64]	; 0x40
        scope_free(s);
    9802:	6d78      	ldr	r0, [r7, #84]	; 0x54
    9804:	f7fb f952 	bl	4aac <scope_free>
        s = next;
    9808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    980a:	657b      	str	r3, [r7, #84]	; 0x54
    for (scope_t *s = module_scope; s;) {
    980c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    980e:	2b00      	cmp	r3, #0
    9810:	d1f4      	bne.n	97fc <mp_compile_to_raw_code+0x154>
    }

    if (comp->compile_error != MP_OBJ_NULL) {
    9812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9814:	689b      	ldr	r3, [r3, #8]
    9816:	2b00      	cmp	r3, #0
    9818:	d004      	beq.n	9824 <mp_compile_to_raw_code+0x17c>
        nlr_raise(comp->compile_error);
    981a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    981c:	689b      	ldr	r3, [r3, #8]
    981e:	4618      	mov	r0, r3
    9820:	f7f6 fd5e 	bl	2e0 <nlr_jump>
    } else {
        return outer_raw_code;
    9824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
}
    9826:	4618      	mov	r0, r3
    9828:	3768      	adds	r7, #104	; 0x68
    982a:	46bd      	mov	sp, r7
    982c:	bd80      	pop	{r7, pc}
    982e:	bf00      	nop

00009830 <mp_compile>:

mp_obj_t mp_compile(mp_parse_tree_t *parse_tree, qstr source_file, uint emit_opt, bool is_repl) {
    9830:	b580      	push	{r7, lr}
    9832:	b086      	sub	sp, #24
    9834:	af00      	add	r7, sp, #0
    9836:	60f8      	str	r0, [r7, #12]
    9838:	60b9      	str	r1, [r7, #8]
    983a:	607a      	str	r2, [r7, #4]
    983c:	70fb      	strb	r3, [r7, #3]
    mp_raw_code_t *rc = mp_compile_to_raw_code(parse_tree, source_file, emit_opt, is_repl);
    983e:	78fb      	ldrb	r3, [r7, #3]
    9840:	687a      	ldr	r2, [r7, #4]
    9842:	68b9      	ldr	r1, [r7, #8]
    9844:	68f8      	ldr	r0, [r7, #12]
    9846:	f7ff ff2f 	bl	96a8 <mp_compile_to_raw_code>
    984a:	6178      	str	r0, [r7, #20]
    // return function that executes the outer module
    return mp_make_function_from_raw_code(rc, MP_OBJ_NULL, MP_OBJ_NULL);
    984c:	2200      	movs	r2, #0
    984e:	2100      	movs	r1, #0
    9850:	6978      	ldr	r0, [r7, #20]
    9852:	f001 fd27 	bl	b2a4 <mp_make_function_from_raw_code>
    9856:	4603      	mov	r3, r0
}
    9858:	4618      	mov	r0, r3
    985a:	3718      	adds	r7, #24
    985c:	46bd      	mov	sp, r7
    985e:	bd80      	pop	{r7, pc}

00009860 <mp_emit_common_get_id_for_load>:

#include "py/emit.h"

#if MICROPY_ENABLE_COMPILER

void mp_emit_common_get_id_for_load(scope_t *scope, qstr qst) {
    9860:	b580      	push	{r7, lr}
    9862:	b084      	sub	sp, #16
    9864:	af00      	add	r7, sp, #0
    9866:	6078      	str	r0, [r7, #4]
    9868:	6039      	str	r1, [r7, #0]
    // name adding/lookup
    bool added;
    id_info_t *id = scope_find_or_add_id(scope, qst, &added);
    986a:	f107 030b 	add.w	r3, r7, #11
    986e:	461a      	mov	r2, r3
    9870:	6839      	ldr	r1, [r7, #0]
    9872:	6878      	ldr	r0, [r7, #4]
    9874:	f7fb f92a 	bl	4acc <scope_find_or_add_id>
    9878:	60f8      	str	r0, [r7, #12]
    if (added) {
    987a:	7afb      	ldrb	r3, [r7, #11]
    987c:	2b00      	cmp	r3, #0
    987e:	d004      	beq.n	988a <mp_emit_common_get_id_for_load+0x2a>
        scope_find_local_and_close_over(scope, id, qst);
    9880:	683a      	ldr	r2, [r7, #0]
    9882:	68f9      	ldr	r1, [r7, #12]
    9884:	6878      	ldr	r0, [r7, #4]
    9886:	f7fb f9fd 	bl	4c84 <scope_find_local_and_close_over>
    }
}
    988a:	bf00      	nop
    988c:	3710      	adds	r7, #16
    988e:	46bd      	mov	sp, r7
    9890:	bd80      	pop	{r7, pc}
    9892:	bf00      	nop

00009894 <mp_emit_common_get_id_for_modification>:

void mp_emit_common_get_id_for_modification(scope_t *scope, qstr qst) {
    9894:	b580      	push	{r7, lr}
    9896:	b084      	sub	sp, #16
    9898:	af00      	add	r7, sp, #0
    989a:	6078      	str	r0, [r7, #4]
    989c:	6039      	str	r1, [r7, #0]
    // name adding/lookup
    bool added;
    id_info_t *id = scope_find_or_add_id(scope, qst, &added);
    989e:	f107 030b 	add.w	r3, r7, #11
    98a2:	461a      	mov	r2, r3
    98a4:	6839      	ldr	r1, [r7, #0]
    98a6:	6878      	ldr	r0, [r7, #4]
    98a8:	f7fb f910 	bl	4acc <scope_find_or_add_id>
    98ac:	60f8      	str	r0, [r7, #12]
    if (added) {
    98ae:	7afb      	ldrb	r3, [r7, #11]
    98b0:	2b00      	cmp	r3, #0
    98b2:	d00b      	beq.n	98cc <mp_emit_common_get_id_for_modification+0x38>
        if (SCOPE_IS_FUNC_LIKE(scope->kind)) {
    98b4:	687b      	ldr	r3, [r7, #4]
    98b6:	681b      	ldr	r3, [r3, #0]
    98b8:	2b01      	cmp	r3, #1
    98ba:	d903      	bls.n	98c4 <mp_emit_common_get_id_for_modification+0x30>
            id->kind = ID_INFO_KIND_LOCAL;
    98bc:	68fb      	ldr	r3, [r7, #12]
    98be:	2202      	movs	r2, #2
    98c0:	701a      	strb	r2, [r3, #0]
        }
    } else if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
        // rebind as a local variable
        id->kind = ID_INFO_KIND_LOCAL;
    }
}
    98c2:	e00e      	b.n	98e2 <mp_emit_common_get_id_for_modification+0x4e>
            id->kind = ID_INFO_KIND_GLOBAL_IMPLICIT;
    98c4:	68fb      	ldr	r3, [r7, #12]
    98c6:	2200      	movs	r2, #0
    98c8:	701a      	strb	r2, [r3, #0]
}
    98ca:	e00a      	b.n	98e2 <mp_emit_common_get_id_for_modification+0x4e>
    } else if (SCOPE_IS_FUNC_LIKE(scope->kind) && id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    98cc:	687b      	ldr	r3, [r7, #4]
    98ce:	681b      	ldr	r3, [r3, #0]
    98d0:	2b01      	cmp	r3, #1
    98d2:	d906      	bls.n	98e2 <mp_emit_common_get_id_for_modification+0x4e>
    98d4:	68fb      	ldr	r3, [r7, #12]
    98d6:	781b      	ldrb	r3, [r3, #0]
    98d8:	2b00      	cmp	r3, #0
    98da:	d102      	bne.n	98e2 <mp_emit_common_get_id_for_modification+0x4e>
        id->kind = ID_INFO_KIND_LOCAL;
    98dc:	68fb      	ldr	r3, [r7, #12]
    98de:	2202      	movs	r2, #2
    98e0:	701a      	strb	r2, [r3, #0]
}
    98e2:	bf00      	nop
    98e4:	3710      	adds	r7, #16
    98e6:	46bd      	mov	sp, r7
    98e8:	bd80      	pop	{r7, pc}
    98ea:	bf00      	nop

000098ec <mp_emit_common_id_op>:

void mp_emit_common_id_op(emit_t *emit, const mp_emit_method_table_id_ops_t *emit_method_table, scope_t *scope, qstr qst) {
    98ec:	b590      	push	{r4, r7, lr}
    98ee:	b087      	sub	sp, #28
    98f0:	af00      	add	r7, sp, #0
    98f2:	60f8      	str	r0, [r7, #12]
    98f4:	60b9      	str	r1, [r7, #8]
    98f6:	607a      	str	r2, [r7, #4]
    98f8:	603b      	str	r3, [r7, #0]
    // assumes pass is greater than 1, ie that all identifiers are defined in the scope

    id_info_t *id = scope_find(scope, qst);
    98fa:	6839      	ldr	r1, [r7, #0]
    98fc:	6878      	ldr	r0, [r7, #4]
    98fe:	f7fb f931 	bl	4b64 <scope_find>
    9902:	6178      	str	r0, [r7, #20]
    assert(id != NULL);
    9904:	697b      	ldr	r3, [r7, #20]
    9906:	2b00      	cmp	r3, #0
    9908:	d105      	bne.n	9916 <mp_emit_common_id_op+0x2a>
    990a:	4b22      	ldr	r3, [pc, #136]	; (9994 <mp_emit_common_id_op+0xa8>)
    990c:	4a22      	ldr	r2, [pc, #136]	; (9998 <mp_emit_common_id_op+0xac>)
    990e:	213e      	movs	r1, #62	; 0x3e
    9910:	4822      	ldr	r0, [pc, #136]	; (999c <mp_emit_common_id_op+0xb0>)
    9912:	f011 fd2b 	bl	1b36c <__assert_func>

    // call the emit backend with the correct code
    if (id->kind == ID_INFO_KIND_GLOBAL_IMPLICIT) {
    9916:	697b      	ldr	r3, [r7, #20]
    9918:	781b      	ldrb	r3, [r3, #0]
    991a:	2b00      	cmp	r3, #0
    991c:	d106      	bne.n	992c <mp_emit_common_id_op+0x40>
        emit_method_table->global(emit, qst, MP_EMIT_IDOP_GLOBAL_NAME);
    991e:	68bb      	ldr	r3, [r7, #8]
    9920:	685b      	ldr	r3, [r3, #4]
    9922:	2200      	movs	r2, #0
    9924:	6839      	ldr	r1, [r7, #0]
    9926:	68f8      	ldr	r0, [r7, #12]
    9928:	4798      	blx	r3
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_FAST);
    } else {
        assert(id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE);
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_DEREF);
    }
}
    992a:	e02f      	b.n	998c <mp_emit_common_id_op+0xa0>
    } else if (id->kind == ID_INFO_KIND_GLOBAL_EXPLICIT) {
    992c:	697b      	ldr	r3, [r7, #20]
    992e:	781b      	ldrb	r3, [r3, #0]
    9930:	2b01      	cmp	r3, #1
    9932:	d106      	bne.n	9942 <mp_emit_common_id_op+0x56>
        emit_method_table->global(emit, qst, MP_EMIT_IDOP_GLOBAL_GLOBAL);
    9934:	68bb      	ldr	r3, [r7, #8]
    9936:	685b      	ldr	r3, [r3, #4]
    9938:	2201      	movs	r2, #1
    993a:	6839      	ldr	r1, [r7, #0]
    993c:	68f8      	ldr	r0, [r7, #12]
    993e:	4798      	blx	r3
}
    9940:	e024      	b.n	998c <mp_emit_common_id_op+0xa0>
    } else if (id->kind == ID_INFO_KIND_LOCAL) {
    9942:	697b      	ldr	r3, [r7, #20]
    9944:	781b      	ldrb	r3, [r3, #0]
    9946:	2b02      	cmp	r3, #2
    9948:	d109      	bne.n	995e <mp_emit_common_id_op+0x72>
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_FAST);
    994a:	68bb      	ldr	r3, [r7, #8]
    994c:	681c      	ldr	r4, [r3, #0]
    994e:	697b      	ldr	r3, [r7, #20]
    9950:	885b      	ldrh	r3, [r3, #2]
    9952:	461a      	mov	r2, r3
    9954:	2300      	movs	r3, #0
    9956:	6839      	ldr	r1, [r7, #0]
    9958:	68f8      	ldr	r0, [r7, #12]
    995a:	47a0      	blx	r4
}
    995c:	e016      	b.n	998c <mp_emit_common_id_op+0xa0>
        assert(id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE);
    995e:	697b      	ldr	r3, [r7, #20]
    9960:	781b      	ldrb	r3, [r3, #0]
    9962:	2b03      	cmp	r3, #3
    9964:	d009      	beq.n	997a <mp_emit_common_id_op+0x8e>
    9966:	697b      	ldr	r3, [r7, #20]
    9968:	781b      	ldrb	r3, [r3, #0]
    996a:	2b04      	cmp	r3, #4
    996c:	d005      	beq.n	997a <mp_emit_common_id_op+0x8e>
    996e:	4b0c      	ldr	r3, [pc, #48]	; (99a0 <mp_emit_common_id_op+0xb4>)
    9970:	4a09      	ldr	r2, [pc, #36]	; (9998 <mp_emit_common_id_op+0xac>)
    9972:	2148      	movs	r1, #72	; 0x48
    9974:	4809      	ldr	r0, [pc, #36]	; (999c <mp_emit_common_id_op+0xb0>)
    9976:	f011 fcf9 	bl	1b36c <__assert_func>
        emit_method_table->local(emit, qst, id->local_num, MP_EMIT_IDOP_LOCAL_DEREF);
    997a:	68bb      	ldr	r3, [r7, #8]
    997c:	681c      	ldr	r4, [r3, #0]
    997e:	697b      	ldr	r3, [r7, #20]
    9980:	885b      	ldrh	r3, [r3, #2]
    9982:	461a      	mov	r2, r3
    9984:	2301      	movs	r3, #1
    9986:	6839      	ldr	r1, [r7, #0]
    9988:	68f8      	ldr	r0, [r7, #12]
    998a:	47a0      	blx	r4
}
    998c:	bf00      	nop
    998e:	371c      	adds	r7, #28
    9990:	46bd      	mov	sp, r7
    9992:	bd90      	pop	{r4, r7, pc}
    9994:	0001f124 	.word	0x0001f124
    9998:	0001f188 	.word	0x0001f188
    999c:	0001f130 	.word	0x0001f130
    99a0:	0001f148 	.word	0x0001f148

000099a4 <emit_bc_new>:
    uint16_t ct_cur_raw_code;
    #endif
    mp_uint_t *const_table;
};

emit_t *emit_bc_new(void) {
    99a4:	b580      	push	{r7, lr}
    99a6:	b082      	sub	sp, #8
    99a8:	af00      	add	r7, sp, #0
    emit_t *emit = m_new0(emit_t, 1);
    99aa:	2040      	movs	r0, #64	; 0x40
    99ac:	f7f6 fcdc 	bl	368 <m_malloc0>
    99b0:	6078      	str	r0, [r7, #4]
    return emit;
    99b2:	687b      	ldr	r3, [r7, #4]
}
    99b4:	4618      	mov	r0, r3
    99b6:	3708      	adds	r7, #8
    99b8:	46bd      	mov	sp, r7
    99ba:	bd80      	pop	{r7, pc}

000099bc <emit_bc_set_max_num_labels>:

void emit_bc_set_max_num_labels(emit_t *emit, mp_uint_t max_num_labels) {
    99bc:	b580      	push	{r7, lr}
    99be:	b082      	sub	sp, #8
    99c0:	af00      	add	r7, sp, #0
    99c2:	6078      	str	r0, [r7, #4]
    99c4:	6039      	str	r1, [r7, #0]
    emit->max_num_labels = max_num_labels;
    99c6:	687b      	ldr	r3, [r7, #4]
    99c8:	683a      	ldr	r2, [r7, #0]
    99ca:	619a      	str	r2, [r3, #24]
    emit->label_offsets = m_new(mp_uint_t, emit->max_num_labels);
    99cc:	687b      	ldr	r3, [r7, #4]
    99ce:	699b      	ldr	r3, [r3, #24]
    99d0:	009b      	lsls	r3, r3, #2
    99d2:	4618      	mov	r0, r3
    99d4:	f7f6 fca2 	bl	31c <m_malloc>
    99d8:	4602      	mov	r2, r0
    99da:	687b      	ldr	r3, [r7, #4]
    99dc:	61da      	str	r2, [r3, #28]
}
    99de:	bf00      	nop
    99e0:	3708      	adds	r7, #8
    99e2:	46bd      	mov	sp, r7
    99e4:	bd80      	pop	{r7, pc}
    99e6:	bf00      	nop

000099e8 <emit_bc_free>:

void emit_bc_free(emit_t *emit) {
    99e8:	b580      	push	{r7, lr}
    99ea:	b082      	sub	sp, #8
    99ec:	af00      	add	r7, sp, #0
    99ee:	6078      	str	r0, [r7, #4]
    m_del(mp_uint_t, emit->label_offsets, emit->max_num_labels);
    99f0:	687b      	ldr	r3, [r7, #4]
    99f2:	69db      	ldr	r3, [r3, #28]
    99f4:	4618      	mov	r0, r3
    99f6:	f7f6 fcf3 	bl	3e0 <m_free>
    m_del_obj(emit_t, emit);
    99fa:	6878      	ldr	r0, [r7, #4]
    99fc:	f7f6 fcf0 	bl	3e0 <m_free>
}
    9a00:	bf00      	nop
    9a02:	3708      	adds	r7, #8
    9a04:	46bd      	mov	sp, r7
    9a06:	bd80      	pop	{r7, pc}

00009a08 <emit_write_uint>:

typedef byte *(*emit_allocator_t)(emit_t *emit, int nbytes);

STATIC void emit_write_uint(emit_t *emit, emit_allocator_t allocator, mp_uint_t val) {
    9a08:	b580      	push	{r7, lr}
    9a0a:	b088      	sub	sp, #32
    9a0c:	af00      	add	r7, sp, #0
    9a0e:	60f8      	str	r0, [r7, #12]
    9a10:	60b9      	str	r1, [r7, #8]
    9a12:	607a      	str	r2, [r7, #4]
    // We store each 7 bits in a separate byte, and that's how many bytes needed
    byte buf[BYTES_FOR_INT];
    byte *p = buf + sizeof(buf);
    9a14:	f107 0310 	add.w	r3, r7, #16
    9a18:	3305      	adds	r3, #5
    9a1a:	61fb      	str	r3, [r7, #28]
    // We encode in little-ending order, but store in big-endian, to help decoding
    do {
        *--p = val & 0x7f;
    9a1c:	69fb      	ldr	r3, [r7, #28]
    9a1e:	3b01      	subs	r3, #1
    9a20:	61fb      	str	r3, [r7, #28]
    9a22:	687b      	ldr	r3, [r7, #4]
    9a24:	b2db      	uxtb	r3, r3
    9a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9a2a:	b2da      	uxtb	r2, r3
    9a2c:	69fb      	ldr	r3, [r7, #28]
    9a2e:	701a      	strb	r2, [r3, #0]
        val >>= 7;
    9a30:	687b      	ldr	r3, [r7, #4]
    9a32:	09db      	lsrs	r3, r3, #7
    9a34:	607b      	str	r3, [r7, #4]
    } while (val != 0);
    9a36:	687b      	ldr	r3, [r7, #4]
    9a38:	2b00      	cmp	r3, #0
    9a3a:	d1ef      	bne.n	9a1c <emit_write_uint+0x14>
    byte *c = allocator(emit, buf + sizeof(buf) - p);
    9a3c:	f107 0310 	add.w	r3, r7, #16
    9a40:	3305      	adds	r3, #5
    9a42:	461a      	mov	r2, r3
    9a44:	69fb      	ldr	r3, [r7, #28]
    9a46:	1ad2      	subs	r2, r2, r3
    9a48:	68bb      	ldr	r3, [r7, #8]
    9a4a:	4611      	mov	r1, r2
    9a4c:	68f8      	ldr	r0, [r7, #12]
    9a4e:	4798      	blx	r3
    9a50:	61b8      	str	r0, [r7, #24]
    while (p != buf + sizeof(buf) - 1) {
    9a52:	e00a      	b.n	9a6a <emit_write_uint+0x62>
        *c++ = *p++ | 0x80;
    9a54:	69bb      	ldr	r3, [r7, #24]
    9a56:	1c5a      	adds	r2, r3, #1
    9a58:	61ba      	str	r2, [r7, #24]
    9a5a:	69fa      	ldr	r2, [r7, #28]
    9a5c:	1c51      	adds	r1, r2, #1
    9a5e:	61f9      	str	r1, [r7, #28]
    9a60:	7812      	ldrb	r2, [r2, #0]
    9a62:	f062 027f 	orn	r2, r2, #127	; 0x7f
    9a66:	b2d2      	uxtb	r2, r2
    9a68:	701a      	strb	r2, [r3, #0]
    while (p != buf + sizeof(buf) - 1) {
    9a6a:	f107 0310 	add.w	r3, r7, #16
    9a6e:	3304      	adds	r3, #4
    9a70:	69fa      	ldr	r2, [r7, #28]
    9a72:	4293      	cmp	r3, r2
    9a74:	d1ee      	bne.n	9a54 <emit_write_uint+0x4c>
    }
    *c = *p;
    9a76:	69fb      	ldr	r3, [r7, #28]
    9a78:	781a      	ldrb	r2, [r3, #0]
    9a7a:	69bb      	ldr	r3, [r7, #24]
    9a7c:	701a      	strb	r2, [r3, #0]
}
    9a7e:	bf00      	nop
    9a80:	3720      	adds	r7, #32
    9a82:	46bd      	mov	sp, r7
    9a84:	bd80      	pop	{r7, pc}
    9a86:	bf00      	nop

00009a88 <emit_get_cur_to_write_code_info>:

// all functions must go through this one to emit code info
STATIC byte *emit_get_cur_to_write_code_info(emit_t *emit, int num_bytes_to_write) {
    9a88:	b580      	push	{r7, lr}
    9a8a:	b084      	sub	sp, #16
    9a8c:	af00      	add	r7, sp, #0
    9a8e:	6078      	str	r0, [r7, #4]
    9a90:	6039      	str	r1, [r7, #0]
    //printf("emit %d\n", num_bytes_to_write);
    if (emit->pass < MP_PASS_EMIT) {
    9a92:	687b      	ldr	r3, [r7, #4]
    9a94:	795b      	ldrb	r3, [r3, #5]
    9a96:	2b03      	cmp	r3, #3
    9a98:	d807      	bhi.n	9aaa <emit_get_cur_to_write_code_info+0x22>
        emit->code_info_offset += num_bytes_to_write;
    9a9a:	687b      	ldr	r3, [r7, #4]
    9a9c:	6a1a      	ldr	r2, [r3, #32]
    9a9e:	683b      	ldr	r3, [r7, #0]
    9aa0:	441a      	add	r2, r3
    9aa2:	687b      	ldr	r3, [r7, #4]
    9aa4:	621a      	str	r2, [r3, #32]
        return emit->dummy_data;
    9aa6:	687b      	ldr	r3, [r7, #4]
    9aa8:	e01a      	b.n	9ae0 <emit_get_cur_to_write_code_info+0x58>
    } else {
        assert(emit->code_info_offset + num_bytes_to_write <= emit->code_info_size);
    9aaa:	687b      	ldr	r3, [r7, #4]
    9aac:	6a1a      	ldr	r2, [r3, #32]
    9aae:	683b      	ldr	r3, [r7, #0]
    9ab0:	441a      	add	r2, r3
    9ab2:	687b      	ldr	r3, [r7, #4]
    9ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9ab6:	429a      	cmp	r2, r3
    9ab8:	d905      	bls.n	9ac6 <emit_get_cur_to_write_code_info+0x3e>
    9aba:	4b0b      	ldr	r3, [pc, #44]	; (9ae8 <emit_get_cur_to_write_code_info+0x60>)
    9abc:	4a0b      	ldr	r2, [pc, #44]	; (9aec <emit_get_cur_to_write_code_info+0x64>)
    9abe:	2173      	movs	r1, #115	; 0x73
    9ac0:	480b      	ldr	r0, [pc, #44]	; (9af0 <emit_get_cur_to_write_code_info+0x68>)
    9ac2:	f011 fc53 	bl	1b36c <__assert_func>
        byte *c = emit->code_base + emit->code_info_offset;
    9ac6:	687b      	ldr	r3, [r7, #4]
    9ac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    9aca:	687b      	ldr	r3, [r7, #4]
    9acc:	6a1b      	ldr	r3, [r3, #32]
    9ace:	4413      	add	r3, r2
    9ad0:	60fb      	str	r3, [r7, #12]
        emit->code_info_offset += num_bytes_to_write;
    9ad2:	687b      	ldr	r3, [r7, #4]
    9ad4:	6a1a      	ldr	r2, [r3, #32]
    9ad6:	683b      	ldr	r3, [r7, #0]
    9ad8:	441a      	add	r2, r3
    9ada:	687b      	ldr	r3, [r7, #4]
    9adc:	621a      	str	r2, [r3, #32]
        return c;
    9ade:	68fb      	ldr	r3, [r7, #12]
    }
}
    9ae0:	4618      	mov	r0, r3
    9ae2:	3710      	adds	r7, #16
    9ae4:	46bd      	mov	sp, r7
    9ae6:	bd80      	pop	{r7, pc}
    9ae8:	0001f1a0 	.word	0x0001f1a0
    9aec:	0001f3bc 	.word	0x0001f3bc
    9af0:	0001f1e4 	.word	0x0001f1e4

00009af4 <emit_write_code_info_byte>:

STATIC void emit_write_code_info_byte(emit_t* emit, byte val) {
    9af4:	b580      	push	{r7, lr}
    9af6:	b082      	sub	sp, #8
    9af8:	af00      	add	r7, sp, #0
    9afa:	6078      	str	r0, [r7, #4]
    9afc:	460b      	mov	r3, r1
    9afe:	70fb      	strb	r3, [r7, #3]
    *emit_get_cur_to_write_code_info(emit, 1) = val;
    9b00:	2101      	movs	r1, #1
    9b02:	6878      	ldr	r0, [r7, #4]
    9b04:	f7ff ffc0 	bl	9a88 <emit_get_cur_to_write_code_info>
    9b08:	4602      	mov	r2, r0
    9b0a:	78fb      	ldrb	r3, [r7, #3]
    9b0c:	7013      	strb	r3, [r2, #0]
}
    9b0e:	bf00      	nop
    9b10:	3708      	adds	r7, #8
    9b12:	46bd      	mov	sp, r7
    9b14:	bd80      	pop	{r7, pc}
    9b16:	bf00      	nop

00009b18 <emit_write_code_info_uint>:

STATIC void emit_write_code_info_uint(emit_t* emit, mp_uint_t val) {
    9b18:	b580      	push	{r7, lr}
    9b1a:	b082      	sub	sp, #8
    9b1c:	af00      	add	r7, sp, #0
    9b1e:	6078      	str	r0, [r7, #4]
    9b20:	6039      	str	r1, [r7, #0]
    emit_write_uint(emit, emit_get_cur_to_write_code_info, val);
    9b22:	683a      	ldr	r2, [r7, #0]
    9b24:	4903      	ldr	r1, [pc, #12]	; (9b34 <emit_write_code_info_uint+0x1c>)
    9b26:	6878      	ldr	r0, [r7, #4]
    9b28:	f7ff ff6e 	bl	9a08 <emit_write_uint>
}
    9b2c:	bf00      	nop
    9b2e:	3708      	adds	r7, #8
    9b30:	46bd      	mov	sp, r7
    9b32:	bd80      	pop	{r7, pc}
    9b34:	00009a89 	.word	0x00009a89

00009b38 <emit_write_code_info_qstr>:

STATIC void emit_write_code_info_qstr(emit_t *emit, qstr qst) {
    9b38:	b580      	push	{r7, lr}
    9b3a:	b084      	sub	sp, #16
    9b3c:	af00      	add	r7, sp, #0
    9b3e:	6078      	str	r0, [r7, #4]
    9b40:	6039      	str	r1, [r7, #0]
    #if MICROPY_PERSISTENT_CODE
    assert((qst >> 16) == 0);
    9b42:	683b      	ldr	r3, [r7, #0]
    9b44:	0c1b      	lsrs	r3, r3, #16
    9b46:	2b00      	cmp	r3, #0
    9b48:	d005      	beq.n	9b56 <emit_write_code_info_qstr+0x1e>
    9b4a:	4b0c      	ldr	r3, [pc, #48]	; (9b7c <emit_write_code_info_qstr+0x44>)
    9b4c:	4a0c      	ldr	r2, [pc, #48]	; (9b80 <emit_write_code_info_qstr+0x48>)
    9b4e:	2184      	movs	r1, #132	; 0x84
    9b50:	480c      	ldr	r0, [pc, #48]	; (9b84 <emit_write_code_info_qstr+0x4c>)
    9b52:	f011 fc0b 	bl	1b36c <__assert_func>
    byte *c = emit_get_cur_to_write_code_info(emit, 2);
    9b56:	2102      	movs	r1, #2
    9b58:	6878      	ldr	r0, [r7, #4]
    9b5a:	f7ff ff95 	bl	9a88 <emit_get_cur_to_write_code_info>
    9b5e:	60f8      	str	r0, [r7, #12]
    c[0] = qst;
    9b60:	683b      	ldr	r3, [r7, #0]
    9b62:	b2da      	uxtb	r2, r3
    9b64:	68fb      	ldr	r3, [r7, #12]
    9b66:	701a      	strb	r2, [r3, #0]
    c[1] = qst >> 8;
    9b68:	68fb      	ldr	r3, [r7, #12]
    9b6a:	3301      	adds	r3, #1
    9b6c:	683a      	ldr	r2, [r7, #0]
    9b6e:	0a12      	lsrs	r2, r2, #8
    9b70:	b2d2      	uxtb	r2, r2
    9b72:	701a      	strb	r2, [r3, #0]
    #else
    emit_write_uint(emit, emit_get_cur_to_write_code_info, qst);
    #endif
}
    9b74:	bf00      	nop
    9b76:	3710      	adds	r7, #16
    9b78:	46bd      	mov	sp, r7
    9b7a:	bd80      	pop	{r7, pc}
    9b7c:	0001f1f8 	.word	0x0001f1f8
    9b80:	0001f3dc 	.word	0x0001f3dc
    9b84:	0001f1e4 	.word	0x0001f1e4

00009b88 <emit_get_cur_to_write_bytecode>:
    }
}
#endif

// all functions must go through this one to emit byte code
STATIC byte *emit_get_cur_to_write_bytecode(emit_t *emit, int num_bytes_to_write) {
    9b88:	b580      	push	{r7, lr}
    9b8a:	b084      	sub	sp, #16
    9b8c:	af00      	add	r7, sp, #0
    9b8e:	6078      	str	r0, [r7, #4]
    9b90:	6039      	str	r1, [r7, #0]
    //printf("emit %d\n", num_bytes_to_write);
    if (emit->pass < MP_PASS_EMIT) {
    9b92:	687b      	ldr	r3, [r7, #4]
    9b94:	795b      	ldrb	r3, [r3, #5]
    9b96:	2b03      	cmp	r3, #3
    9b98:	d807      	bhi.n	9baa <emit_get_cur_to_write_bytecode+0x22>
        emit->bytecode_offset += num_bytes_to_write;
    9b9a:	687b      	ldr	r3, [r7, #4]
    9b9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9b9e:	683b      	ldr	r3, [r7, #0]
    9ba0:	441a      	add	r2, r3
    9ba2:	687b      	ldr	r3, [r7, #4]
    9ba4:	629a      	str	r2, [r3, #40]	; 0x28
        return emit->dummy_data;
    9ba6:	687b      	ldr	r3, [r7, #4]
    9ba8:	e01d      	b.n	9be6 <emit_get_cur_to_write_bytecode+0x5e>
    } else {
        assert(emit->bytecode_offset + num_bytes_to_write <= emit->bytecode_size);
    9baa:	687b      	ldr	r3, [r7, #4]
    9bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9bae:	683b      	ldr	r3, [r7, #0]
    9bb0:	441a      	add	r2, r3
    9bb2:	687b      	ldr	r3, [r7, #4]
    9bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9bb6:	429a      	cmp	r2, r3
    9bb8:	d905      	bls.n	9bc6 <emit_get_cur_to_write_bytecode+0x3e>
    9bba:	4b0d      	ldr	r3, [pc, #52]	; (9bf0 <emit_get_cur_to_write_bytecode+0x68>)
    9bbc:	4a0d      	ldr	r2, [pc, #52]	; (9bf4 <emit_get_cur_to_write_bytecode+0x6c>)
    9bbe:	21b2      	movs	r1, #178	; 0xb2
    9bc0:	480d      	ldr	r0, [pc, #52]	; (9bf8 <emit_get_cur_to_write_bytecode+0x70>)
    9bc2:	f011 fbd3 	bl	1b36c <__assert_func>
        byte *c = emit->code_base + emit->code_info_size + emit->bytecode_offset;
    9bc6:	687b      	ldr	r3, [r7, #4]
    9bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    9bca:	687b      	ldr	r3, [r7, #4]
    9bcc:	6a59      	ldr	r1, [r3, #36]	; 0x24
    9bce:	687b      	ldr	r3, [r7, #4]
    9bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9bd2:	440b      	add	r3, r1
    9bd4:	4413      	add	r3, r2
    9bd6:	60fb      	str	r3, [r7, #12]
        emit->bytecode_offset += num_bytes_to_write;
    9bd8:	687b      	ldr	r3, [r7, #4]
    9bda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9bdc:	683b      	ldr	r3, [r7, #0]
    9bde:	441a      	add	r2, r3
    9be0:	687b      	ldr	r3, [r7, #4]
    9be2:	629a      	str	r2, [r3, #40]	; 0x28
        return c;
    9be4:	68fb      	ldr	r3, [r7, #12]
    }
}
    9be6:	4618      	mov	r0, r3
    9be8:	3710      	adds	r7, #16
    9bea:	46bd      	mov	sp, r7
    9bec:	bd80      	pop	{r7, pc}
    9bee:	bf00      	nop
    9bf0:	0001f20c 	.word	0x0001f20c
    9bf4:	0001f3f8 	.word	0x0001f3f8
    9bf8:	0001f1e4 	.word	0x0001f1e4

00009bfc <emit_write_bytecode_byte>:

STATIC void emit_write_bytecode_byte(emit_t *emit, byte b1) {
    9bfc:	b580      	push	{r7, lr}
    9bfe:	b084      	sub	sp, #16
    9c00:	af00      	add	r7, sp, #0
    9c02:	6078      	str	r0, [r7, #4]
    9c04:	460b      	mov	r3, r1
    9c06:	70fb      	strb	r3, [r7, #3]
    byte *c = emit_get_cur_to_write_bytecode(emit, 1);
    9c08:	2101      	movs	r1, #1
    9c0a:	6878      	ldr	r0, [r7, #4]
    9c0c:	f7ff ffbc 	bl	9b88 <emit_get_cur_to_write_bytecode>
    9c10:	60f8      	str	r0, [r7, #12]
    c[0] = b1;
    9c12:	68fb      	ldr	r3, [r7, #12]
    9c14:	78fa      	ldrb	r2, [r7, #3]
    9c16:	701a      	strb	r2, [r3, #0]
}
    9c18:	bf00      	nop
    9c1a:	3710      	adds	r7, #16
    9c1c:	46bd      	mov	sp, r7
    9c1e:	bd80      	pop	{r7, pc}

00009c20 <emit_write_bytecode_byte_byte>:

STATIC void emit_write_bytecode_byte_byte(emit_t* emit, byte b1, byte b2) {
    9c20:	b580      	push	{r7, lr}
    9c22:	b084      	sub	sp, #16
    9c24:	af00      	add	r7, sp, #0
    9c26:	6078      	str	r0, [r7, #4]
    9c28:	460b      	mov	r3, r1
    9c2a:	70fb      	strb	r3, [r7, #3]
    9c2c:	4613      	mov	r3, r2
    9c2e:	70bb      	strb	r3, [r7, #2]
    byte *c = emit_get_cur_to_write_bytecode(emit, 2);
    9c30:	2102      	movs	r1, #2
    9c32:	6878      	ldr	r0, [r7, #4]
    9c34:	f7ff ffa8 	bl	9b88 <emit_get_cur_to_write_bytecode>
    9c38:	60f8      	str	r0, [r7, #12]
    c[0] = b1;
    9c3a:	68fb      	ldr	r3, [r7, #12]
    9c3c:	78fa      	ldrb	r2, [r7, #3]
    9c3e:	701a      	strb	r2, [r3, #0]
    c[1] = b2;
    9c40:	68fb      	ldr	r3, [r7, #12]
    9c42:	3301      	adds	r3, #1
    9c44:	78ba      	ldrb	r2, [r7, #2]
    9c46:	701a      	strb	r2, [r3, #0]
}
    9c48:	bf00      	nop
    9c4a:	3710      	adds	r7, #16
    9c4c:	46bd      	mov	sp, r7
    9c4e:	bd80      	pop	{r7, pc}

00009c50 <emit_write_bytecode_byte_int>:

// Similar to emit_write_bytecode_uint(), just some extra handling to encode sign
STATIC void emit_write_bytecode_byte_int(emit_t *emit, byte b1, mp_int_t num) {
    9c50:	b580      	push	{r7, lr}
    9c52:	b088      	sub	sp, #32
    9c54:	af00      	add	r7, sp, #0
    9c56:	60f8      	str	r0, [r7, #12]
    9c58:	460b      	mov	r3, r1
    9c5a:	607a      	str	r2, [r7, #4]
    9c5c:	72fb      	strb	r3, [r7, #11]
    emit_write_bytecode_byte(emit, b1);
    9c5e:	7afb      	ldrb	r3, [r7, #11]
    9c60:	4619      	mov	r1, r3
    9c62:	68f8      	ldr	r0, [r7, #12]
    9c64:	f7ff ffca 	bl	9bfc <emit_write_bytecode_byte>

    // We store each 7 bits in a separate byte, and that's how many bytes needed
    byte buf[BYTES_FOR_INT];
    byte *p = buf + sizeof(buf);
    9c68:	f107 0310 	add.w	r3, r7, #16
    9c6c:	3305      	adds	r3, #5
    9c6e:	61fb      	str	r3, [r7, #28]
    // We encode in little-ending order, but store in big-endian, to help decoding
    do {
        *--p = num & 0x7f;
    9c70:	69fb      	ldr	r3, [r7, #28]
    9c72:	3b01      	subs	r3, #1
    9c74:	61fb      	str	r3, [r7, #28]
    9c76:	687b      	ldr	r3, [r7, #4]
    9c78:	b2db      	uxtb	r3, r3
    9c7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9c7e:	b2da      	uxtb	r2, r3
    9c80:	69fb      	ldr	r3, [r7, #28]
    9c82:	701a      	strb	r2, [r3, #0]
        num >>= 7;
    9c84:	687b      	ldr	r3, [r7, #4]
    9c86:	11db      	asrs	r3, r3, #7
    9c88:	607b      	str	r3, [r7, #4]
    } while (num != 0 && num != -1);
    9c8a:	687b      	ldr	r3, [r7, #4]
    9c8c:	2b00      	cmp	r3, #0
    9c8e:	d003      	beq.n	9c98 <emit_write_bytecode_byte_int+0x48>
    9c90:	687b      	ldr	r3, [r7, #4]
    9c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9c96:	d1eb      	bne.n	9c70 <emit_write_bytecode_byte_int+0x20>
    // Make sure that highest bit we stored (mask 0x40) matches sign
    // of the number. If not, store extra byte just to encode sign
    if (num == -1 && (*p & 0x40) == 0) {
    9c98:	687b      	ldr	r3, [r7, #4]
    9c9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9c9e:	d10c      	bne.n	9cba <emit_write_bytecode_byte_int+0x6a>
    9ca0:	69fb      	ldr	r3, [r7, #28]
    9ca2:	781b      	ldrb	r3, [r3, #0]
    9ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9ca8:	2b00      	cmp	r3, #0
    9caa:	d106      	bne.n	9cba <emit_write_bytecode_byte_int+0x6a>
        *--p = 0x7f;
    9cac:	69fb      	ldr	r3, [r7, #28]
    9cae:	3b01      	subs	r3, #1
    9cb0:	61fb      	str	r3, [r7, #28]
    9cb2:	69fb      	ldr	r3, [r7, #28]
    9cb4:	227f      	movs	r2, #127	; 0x7f
    9cb6:	701a      	strb	r2, [r3, #0]
    9cb8:	e00e      	b.n	9cd8 <emit_write_bytecode_byte_int+0x88>
    } else if (num == 0 && (*p & 0x40) != 0) {
    9cba:	687b      	ldr	r3, [r7, #4]
    9cbc:	2b00      	cmp	r3, #0
    9cbe:	d10b      	bne.n	9cd8 <emit_write_bytecode_byte_int+0x88>
    9cc0:	69fb      	ldr	r3, [r7, #28]
    9cc2:	781b      	ldrb	r3, [r3, #0]
    9cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9cc8:	2b00      	cmp	r3, #0
    9cca:	d005      	beq.n	9cd8 <emit_write_bytecode_byte_int+0x88>
        *--p = 0;
    9ccc:	69fb      	ldr	r3, [r7, #28]
    9cce:	3b01      	subs	r3, #1
    9cd0:	61fb      	str	r3, [r7, #28]
    9cd2:	69fb      	ldr	r3, [r7, #28]
    9cd4:	2200      	movs	r2, #0
    9cd6:	701a      	strb	r2, [r3, #0]
    }

    byte *c = emit_get_cur_to_write_bytecode(emit, buf + sizeof(buf) - p);
    9cd8:	f107 0310 	add.w	r3, r7, #16
    9cdc:	3305      	adds	r3, #5
    9cde:	461a      	mov	r2, r3
    9ce0:	69fb      	ldr	r3, [r7, #28]
    9ce2:	1ad3      	subs	r3, r2, r3
    9ce4:	4619      	mov	r1, r3
    9ce6:	68f8      	ldr	r0, [r7, #12]
    9ce8:	f7ff ff4e 	bl	9b88 <emit_get_cur_to_write_bytecode>
    9cec:	61b8      	str	r0, [r7, #24]
    while (p != buf + sizeof(buf) - 1) {
    9cee:	e00a      	b.n	9d06 <emit_write_bytecode_byte_int+0xb6>
        *c++ = *p++ | 0x80;
    9cf0:	69bb      	ldr	r3, [r7, #24]
    9cf2:	1c5a      	adds	r2, r3, #1
    9cf4:	61ba      	str	r2, [r7, #24]
    9cf6:	69fa      	ldr	r2, [r7, #28]
    9cf8:	1c51      	adds	r1, r2, #1
    9cfa:	61f9      	str	r1, [r7, #28]
    9cfc:	7812      	ldrb	r2, [r2, #0]
    9cfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
    9d02:	b2d2      	uxtb	r2, r2
    9d04:	701a      	strb	r2, [r3, #0]
    while (p != buf + sizeof(buf) - 1) {
    9d06:	f107 0310 	add.w	r3, r7, #16
    9d0a:	3304      	adds	r3, #4
    9d0c:	69fa      	ldr	r2, [r7, #28]
    9d0e:	4293      	cmp	r3, r2
    9d10:	d1ee      	bne.n	9cf0 <emit_write_bytecode_byte_int+0xa0>
    }
    *c = *p;
    9d12:	69fb      	ldr	r3, [r7, #28]
    9d14:	781a      	ldrb	r2, [r3, #0]
    9d16:	69bb      	ldr	r3, [r7, #24]
    9d18:	701a      	strb	r2, [r3, #0]
}
    9d1a:	bf00      	nop
    9d1c:	3720      	adds	r7, #32
    9d1e:	46bd      	mov	sp, r7
    9d20:	bd80      	pop	{r7, pc}
    9d22:	bf00      	nop

00009d24 <emit_write_bytecode_byte_uint>:

STATIC void emit_write_bytecode_byte_uint(emit_t *emit, byte b, mp_uint_t val) {
    9d24:	b580      	push	{r7, lr}
    9d26:	b084      	sub	sp, #16
    9d28:	af00      	add	r7, sp, #0
    9d2a:	60f8      	str	r0, [r7, #12]
    9d2c:	460b      	mov	r3, r1
    9d2e:	607a      	str	r2, [r7, #4]
    9d30:	72fb      	strb	r3, [r7, #11]
    emit_write_bytecode_byte(emit, b);
    9d32:	7afb      	ldrb	r3, [r7, #11]
    9d34:	4619      	mov	r1, r3
    9d36:	68f8      	ldr	r0, [r7, #12]
    9d38:	f7ff ff60 	bl	9bfc <emit_write_bytecode_byte>
    emit_write_uint(emit, emit_get_cur_to_write_bytecode, val);
    9d3c:	687a      	ldr	r2, [r7, #4]
    9d3e:	4904      	ldr	r1, [pc, #16]	; (9d50 <emit_write_bytecode_byte_uint+0x2c>)
    9d40:	68f8      	ldr	r0, [r7, #12]
    9d42:	f7ff fe61 	bl	9a08 <emit_write_uint>
}
    9d46:	bf00      	nop
    9d48:	3710      	adds	r7, #16
    9d4a:	46bd      	mov	sp, r7
    9d4c:	bd80      	pop	{r7, pc}
    9d4e:	bf00      	nop
    9d50:	00009b89 	.word	0x00009b89

00009d54 <emit_write_bytecode_byte_const>:

#if MICROPY_PERSISTENT_CODE
STATIC void emit_write_bytecode_byte_const(emit_t *emit, byte b, mp_uint_t n, mp_uint_t c) {
    9d54:	b580      	push	{r7, lr}
    9d56:	b084      	sub	sp, #16
    9d58:	af00      	add	r7, sp, #0
    9d5a:	60f8      	str	r0, [r7, #12]
    9d5c:	607a      	str	r2, [r7, #4]
    9d5e:	603b      	str	r3, [r7, #0]
    9d60:	460b      	mov	r3, r1
    9d62:	72fb      	strb	r3, [r7, #11]
    if (emit->pass == MP_PASS_EMIT) {
    9d64:	68fb      	ldr	r3, [r7, #12]
    9d66:	795b      	ldrb	r3, [r3, #5]
    9d68:	2b04      	cmp	r3, #4
    9d6a:	d106      	bne.n	9d7a <emit_write_bytecode_byte_const+0x26>
        emit->const_table[n] = c;
    9d6c:	68fb      	ldr	r3, [r7, #12]
    9d6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    9d70:	687b      	ldr	r3, [r7, #4]
    9d72:	009b      	lsls	r3, r3, #2
    9d74:	4413      	add	r3, r2
    9d76:	683a      	ldr	r2, [r7, #0]
    9d78:	601a      	str	r2, [r3, #0]
    }
    emit_write_bytecode_byte_uint(emit, b, n);
    9d7a:	7afb      	ldrb	r3, [r7, #11]
    9d7c:	687a      	ldr	r2, [r7, #4]
    9d7e:	4619      	mov	r1, r3
    9d80:	68f8      	ldr	r0, [r7, #12]
    9d82:	f7ff ffcf 	bl	9d24 <emit_write_bytecode_byte_uint>
}
    9d86:	bf00      	nop
    9d88:	3710      	adds	r7, #16
    9d8a:	46bd      	mov	sp, r7
    9d8c:	bd80      	pop	{r7, pc}
    9d8e:	bf00      	nop

00009d90 <emit_write_bytecode_byte_qstr>:
#endif

STATIC void emit_write_bytecode_byte_qstr(emit_t* emit, byte b, qstr qst) {
    9d90:	b580      	push	{r7, lr}
    9d92:	b086      	sub	sp, #24
    9d94:	af00      	add	r7, sp, #0
    9d96:	60f8      	str	r0, [r7, #12]
    9d98:	460b      	mov	r3, r1
    9d9a:	607a      	str	r2, [r7, #4]
    9d9c:	72fb      	strb	r3, [r7, #11]
    #if MICROPY_PERSISTENT_CODE
    assert((qst >> 16) == 0);
    9d9e:	687b      	ldr	r3, [r7, #4]
    9da0:	0c1b      	lsrs	r3, r3, #16
    9da2:	2b00      	cmp	r3, #0
    9da4:	d005      	beq.n	9db2 <emit_write_bytecode_byte_qstr+0x22>
    9da6:	4b0e      	ldr	r3, [pc, #56]	; (9de0 <emit_write_bytecode_byte_qstr+0x50>)
    9da8:	4a0e      	ldr	r2, [pc, #56]	; (9de4 <emit_write_bytecode_byte_qstr+0x54>)
    9daa:	21ef      	movs	r1, #239	; 0xef
    9dac:	480e      	ldr	r0, [pc, #56]	; (9de8 <emit_write_bytecode_byte_qstr+0x58>)
    9dae:	f011 fadd 	bl	1b36c <__assert_func>
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    9db2:	2103      	movs	r1, #3
    9db4:	68f8      	ldr	r0, [r7, #12]
    9db6:	f7ff fee7 	bl	9b88 <emit_get_cur_to_write_bytecode>
    9dba:	6178      	str	r0, [r7, #20]
    c[0] = b;
    9dbc:	697b      	ldr	r3, [r7, #20]
    9dbe:	7afa      	ldrb	r2, [r7, #11]
    9dc0:	701a      	strb	r2, [r3, #0]
    c[1] = qst;
    9dc2:	697b      	ldr	r3, [r7, #20]
    9dc4:	3301      	adds	r3, #1
    9dc6:	687a      	ldr	r2, [r7, #4]
    9dc8:	b2d2      	uxtb	r2, r2
    9dca:	701a      	strb	r2, [r3, #0]
    c[2] = qst >> 8;
    9dcc:	697b      	ldr	r3, [r7, #20]
    9dce:	3302      	adds	r3, #2
    9dd0:	687a      	ldr	r2, [r7, #4]
    9dd2:	0a12      	lsrs	r2, r2, #8
    9dd4:	b2d2      	uxtb	r2, r2
    9dd6:	701a      	strb	r2, [r3, #0]
    #else
    emit_write_bytecode_byte_uint(emit, b, qst);
    #endif
}
    9dd8:	bf00      	nop
    9dda:	3718      	adds	r7, #24
    9ddc:	46bd      	mov	sp, r7
    9dde:	bd80      	pop	{r7, pc}
    9de0:	0001f1f8 	.word	0x0001f1f8
    9de4:	0001f418 	.word	0x0001f418
    9de8:	0001f1e4 	.word	0x0001f1e4

00009dec <emit_write_bytecode_byte_obj>:

STATIC void emit_write_bytecode_byte_obj(emit_t *emit, byte b, mp_obj_t obj) {
    9dec:	b580      	push	{r7, lr}
    9dee:	b084      	sub	sp, #16
    9df0:	af00      	add	r7, sp, #0
    9df2:	60f8      	str	r0, [r7, #12]
    9df4:	460b      	mov	r3, r1
    9df6:	607a      	str	r2, [r7, #4]
    9df8:	72fb      	strb	r3, [r7, #11]
    #if MICROPY_PERSISTENT_CODE
    emit_write_bytecode_byte_const(emit, b,
        emit->scope->num_pos_args + emit->scope->num_kwonly_args
    9dfa:	68fb      	ldr	r3, [r7, #12]
    9dfc:	68db      	ldr	r3, [r3, #12]
    9dfe:	8b5b      	ldrh	r3, [r3, #26]
    9e00:	461a      	mov	r2, r3
    9e02:	68fb      	ldr	r3, [r7, #12]
    9e04:	68db      	ldr	r3, [r3, #12]
    9e06:	8b9b      	ldrh	r3, [r3, #28]
    9e08:	441a      	add	r2, r3
        + emit->ct_cur_obj++, (mp_uint_t)obj);
    9e0a:	68fb      	ldr	r3, [r7, #12]
    9e0c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    9e0e:	1c59      	adds	r1, r3, #1
    9e10:	b288      	uxth	r0, r1
    9e12:	68f9      	ldr	r1, [r7, #12]
    9e14:	8688      	strh	r0, [r1, #52]	; 0x34
    9e16:	4413      	add	r3, r2
    emit_write_bytecode_byte_const(emit, b,
    9e18:	461a      	mov	r2, r3
    9e1a:	687b      	ldr	r3, [r7, #4]
    9e1c:	7af9      	ldrb	r1, [r7, #11]
    9e1e:	68f8      	ldr	r0, [r7, #12]
    9e20:	f7ff ff98 	bl	9d54 <emit_write_bytecode_byte_const>
    mp_obj_t *c = (mp_obj_t*)emit_get_cur_to_write_bytecode(emit, sizeof(mp_obj_t));
    // Verify thar c is already uint-aligned
    assert(c == MP_ALIGN(c, sizeof(mp_obj_t)));
    *c = obj;
    #endif
}
    9e24:	bf00      	nop
    9e26:	3710      	adds	r7, #16
    9e28:	46bd      	mov	sp, r7
    9e2a:	bd80      	pop	{r7, pc}

00009e2c <emit_write_bytecode_byte_raw_code>:

STATIC void emit_write_bytecode_byte_raw_code(emit_t *emit, byte b, mp_raw_code_t *rc) {
    9e2c:	b580      	push	{r7, lr}
    9e2e:	b084      	sub	sp, #16
    9e30:	af00      	add	r7, sp, #0
    9e32:	60f8      	str	r0, [r7, #12]
    9e34:	460b      	mov	r3, r1
    9e36:	607a      	str	r2, [r7, #4]
    9e38:	72fb      	strb	r3, [r7, #11]
    #if MICROPY_PERSISTENT_CODE
    emit_write_bytecode_byte_const(emit, b,
        emit->scope->num_pos_args + emit->scope->num_kwonly_args
    9e3a:	68fb      	ldr	r3, [r7, #12]
    9e3c:	68db      	ldr	r3, [r3, #12]
    9e3e:	8b5b      	ldrh	r3, [r3, #26]
    9e40:	461a      	mov	r2, r3
    9e42:	68fb      	ldr	r3, [r7, #12]
    9e44:	68db      	ldr	r3, [r3, #12]
    9e46:	8b9b      	ldrh	r3, [r3, #28]
    9e48:	4413      	add	r3, r2
        + emit->ct_num_obj + emit->ct_cur_raw_code++, (mp_uint_t)(uintptr_t)rc);
    9e4a:	68fa      	ldr	r2, [r7, #12]
    9e4c:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
    9e4e:	441a      	add	r2, r3
    9e50:	68fb      	ldr	r3, [r7, #12]
    9e52:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    9e54:	1c59      	adds	r1, r3, #1
    9e56:	b288      	uxth	r0, r1
    9e58:	68f9      	ldr	r1, [r7, #12]
    9e5a:	8708      	strh	r0, [r1, #56]	; 0x38
    9e5c:	4413      	add	r3, r2
    emit_write_bytecode_byte_const(emit, b,
    9e5e:	461a      	mov	r2, r3
    9e60:	687b      	ldr	r3, [r7, #4]
    9e62:	7af9      	ldrb	r1, [r7, #11]
    9e64:	68f8      	ldr	r0, [r7, #12]
    9e66:	f7ff ff75 	bl	9d54 <emit_write_bytecode_byte_const>
    void **c = (void**)emit_get_cur_to_write_bytecode(emit, sizeof(void*));
    // Verify thar c is already uint-aligned
    assert(c == MP_ALIGN(c, sizeof(void*)));
    *c = rc;
    #endif
}
    9e6a:	bf00      	nop
    9e6c:	3710      	adds	r7, #16
    9e6e:	46bd      	mov	sp, r7
    9e70:	bd80      	pop	{r7, pc}
    9e72:	bf00      	nop

00009e74 <emit_write_bytecode_byte_unsigned_label>:

// unsigned labels are relative to ip following this instruction, stored as 16 bits
STATIC void emit_write_bytecode_byte_unsigned_label(emit_t *emit, byte b1, mp_uint_t label) {
    9e74:	b580      	push	{r7, lr}
    9e76:	b086      	sub	sp, #24
    9e78:	af00      	add	r7, sp, #0
    9e7a:	60f8      	str	r0, [r7, #12]
    9e7c:	460b      	mov	r3, r1
    9e7e:	607a      	str	r2, [r7, #4]
    9e80:	72fb      	strb	r3, [r7, #11]
    mp_uint_t bytecode_offset;
    if (emit->pass < MP_PASS_EMIT) {
    9e82:	68fb      	ldr	r3, [r7, #12]
    9e84:	795b      	ldrb	r3, [r3, #5]
    9e86:	2b03      	cmp	r3, #3
    9e88:	d802      	bhi.n	9e90 <emit_write_bytecode_byte_unsigned_label+0x1c>
        bytecode_offset = 0;
    9e8a:	2300      	movs	r3, #0
    9e8c:	617b      	str	r3, [r7, #20]
    9e8e:	e00a      	b.n	9ea6 <emit_write_bytecode_byte_unsigned_label+0x32>
    } else {
        bytecode_offset = emit->label_offsets[label] - emit->bytecode_offset - 3;
    9e90:	68fb      	ldr	r3, [r7, #12]
    9e92:	69da      	ldr	r2, [r3, #28]
    9e94:	687b      	ldr	r3, [r7, #4]
    9e96:	009b      	lsls	r3, r3, #2
    9e98:	4413      	add	r3, r2
    9e9a:	681a      	ldr	r2, [r3, #0]
    9e9c:	68fb      	ldr	r3, [r7, #12]
    9e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9ea0:	1ad3      	subs	r3, r2, r3
    9ea2:	3b03      	subs	r3, #3
    9ea4:	617b      	str	r3, [r7, #20]
    }
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    9ea6:	2103      	movs	r1, #3
    9ea8:	68f8      	ldr	r0, [r7, #12]
    9eaa:	f7ff fe6d 	bl	9b88 <emit_get_cur_to_write_bytecode>
    9eae:	6138      	str	r0, [r7, #16]
    c[0] = b1;
    9eb0:	693b      	ldr	r3, [r7, #16]
    9eb2:	7afa      	ldrb	r2, [r7, #11]
    9eb4:	701a      	strb	r2, [r3, #0]
    c[1] = bytecode_offset;
    9eb6:	693b      	ldr	r3, [r7, #16]
    9eb8:	3301      	adds	r3, #1
    9eba:	697a      	ldr	r2, [r7, #20]
    9ebc:	b2d2      	uxtb	r2, r2
    9ebe:	701a      	strb	r2, [r3, #0]
    c[2] = bytecode_offset >> 8;
    9ec0:	693b      	ldr	r3, [r7, #16]
    9ec2:	3302      	adds	r3, #2
    9ec4:	697a      	ldr	r2, [r7, #20]
    9ec6:	0a12      	lsrs	r2, r2, #8
    9ec8:	b2d2      	uxtb	r2, r2
    9eca:	701a      	strb	r2, [r3, #0]
}
    9ecc:	bf00      	nop
    9ece:	3718      	adds	r7, #24
    9ed0:	46bd      	mov	sp, r7
    9ed2:	bd80      	pop	{r7, pc}

00009ed4 <emit_write_bytecode_byte_signed_label>:

// signed labels are relative to ip following this instruction, stored as 16 bits, in excess
STATIC void emit_write_bytecode_byte_signed_label(emit_t *emit, byte b1, mp_uint_t label) {
    9ed4:	b580      	push	{r7, lr}
    9ed6:	b086      	sub	sp, #24
    9ed8:	af00      	add	r7, sp, #0
    9eda:	60f8      	str	r0, [r7, #12]
    9edc:	460b      	mov	r3, r1
    9ede:	607a      	str	r2, [r7, #4]
    9ee0:	72fb      	strb	r3, [r7, #11]
    int bytecode_offset;
    if (emit->pass < MP_PASS_EMIT) {
    9ee2:	68fb      	ldr	r3, [r7, #12]
    9ee4:	795b      	ldrb	r3, [r3, #5]
    9ee6:	2b03      	cmp	r3, #3
    9ee8:	d802      	bhi.n	9ef0 <emit_write_bytecode_byte_signed_label+0x1c>
        bytecode_offset = 0;
    9eea:	2300      	movs	r3, #0
    9eec:	617b      	str	r3, [r7, #20]
    9eee:	e00c      	b.n	9f0a <emit_write_bytecode_byte_signed_label+0x36>
    } else {
        bytecode_offset = emit->label_offsets[label] - emit->bytecode_offset - 3 + 0x8000;
    9ef0:	68fb      	ldr	r3, [r7, #12]
    9ef2:	69da      	ldr	r2, [r3, #28]
    9ef4:	687b      	ldr	r3, [r7, #4]
    9ef6:	009b      	lsls	r3, r3, #2
    9ef8:	4413      	add	r3, r2
    9efa:	681a      	ldr	r2, [r3, #0]
    9efc:	68fb      	ldr	r3, [r7, #12]
    9efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9f00:	1ad3      	subs	r3, r2, r3
    9f02:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    9f06:	337d      	adds	r3, #125	; 0x7d
    9f08:	617b      	str	r3, [r7, #20]
    }
    byte *c = emit_get_cur_to_write_bytecode(emit, 3);
    9f0a:	2103      	movs	r1, #3
    9f0c:	68f8      	ldr	r0, [r7, #12]
    9f0e:	f7ff fe3b 	bl	9b88 <emit_get_cur_to_write_bytecode>
    9f12:	6138      	str	r0, [r7, #16]
    c[0] = b1;
    9f14:	693b      	ldr	r3, [r7, #16]
    9f16:	7afa      	ldrb	r2, [r7, #11]
    9f18:	701a      	strb	r2, [r3, #0]
    c[1] = bytecode_offset;
    9f1a:	693b      	ldr	r3, [r7, #16]
    9f1c:	3301      	adds	r3, #1
    9f1e:	697a      	ldr	r2, [r7, #20]
    9f20:	b2d2      	uxtb	r2, r2
    9f22:	701a      	strb	r2, [r3, #0]
    c[2] = bytecode_offset >> 8;
    9f24:	693b      	ldr	r3, [r7, #16]
    9f26:	3302      	adds	r3, #2
    9f28:	697a      	ldr	r2, [r7, #20]
    9f2a:	1212      	asrs	r2, r2, #8
    9f2c:	b2d2      	uxtb	r2, r2
    9f2e:	701a      	strb	r2, [r3, #0]
}
    9f30:	bf00      	nop
    9f32:	3718      	adds	r7, #24
    9f34:	46bd      	mov	sp, r7
    9f36:	bd80      	pop	{r7, pc}

00009f38 <mp_emit_bc_start_pass>:

void mp_emit_bc_start_pass(emit_t *emit, pass_kind_t pass, scope_t *scope) {
    9f38:	b580      	push	{r7, lr}
    9f3a:	b08c      	sub	sp, #48	; 0x30
    9f3c:	af00      	add	r7, sp, #0
    9f3e:	60f8      	str	r0, [r7, #12]
    9f40:	60b9      	str	r1, [r7, #8]
    9f42:	607a      	str	r2, [r7, #4]
    emit->pass = pass;
    9f44:	68bb      	ldr	r3, [r7, #8]
    9f46:	b2da      	uxtb	r2, r3
    9f48:	68fb      	ldr	r3, [r7, #12]
    9f4a:	715a      	strb	r2, [r3, #5]
    emit->stack_size = 0;
    9f4c:	68fb      	ldr	r3, [r7, #12]
    9f4e:	2200      	movs	r2, #0
    9f50:	609a      	str	r2, [r3, #8]
    emit->last_emit_was_return_value = false;
    9f52:	68fb      	ldr	r3, [r7, #12]
    9f54:	2200      	movs	r2, #0
    9f56:	719a      	strb	r2, [r3, #6]
    emit->scope = scope;
    9f58:	68fb      	ldr	r3, [r7, #12]
    9f5a:	687a      	ldr	r2, [r7, #4]
    9f5c:	60da      	str	r2, [r3, #12]
    emit->last_source_line_offset = 0;
    9f5e:	68fb      	ldr	r3, [r7, #12]
    9f60:	2200      	movs	r2, #0
    9f62:	611a      	str	r2, [r3, #16]
    emit->last_source_line = 1;
    9f64:	68fb      	ldr	r3, [r7, #12]
    9f66:	2201      	movs	r2, #1
    9f68:	615a      	str	r2, [r3, #20]
    #ifndef NDEBUG
    // With debugging enabled labels are checked for unique assignment
    if (pass < MP_PASS_EMIT && emit->label_offsets != NULL) {
    9f6a:	68bb      	ldr	r3, [r7, #8]
    9f6c:	2b03      	cmp	r3, #3
    9f6e:	d80d      	bhi.n	9f8c <mp_emit_bc_start_pass+0x54>
    9f70:	68fb      	ldr	r3, [r7, #12]
    9f72:	69db      	ldr	r3, [r3, #28]
    9f74:	2b00      	cmp	r3, #0
    9f76:	d009      	beq.n	9f8c <mp_emit_bc_start_pass+0x54>
        memset(emit->label_offsets, -1, emit->max_num_labels * sizeof(mp_uint_t));
    9f78:	68fb      	ldr	r3, [r7, #12]
    9f7a:	69d8      	ldr	r0, [r3, #28]
    9f7c:	68fb      	ldr	r3, [r7, #12]
    9f7e:	699b      	ldr	r3, [r3, #24]
    9f80:	009b      	lsls	r3, r3, #2
    9f82:	461a      	mov	r2, r3
    9f84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9f88:	f012 f838 	bl	1bffc <memset>
    }
    #endif
    emit->bytecode_offset = 0;
    9f8c:	68fb      	ldr	r3, [r7, #12]
    9f8e:	2200      	movs	r2, #0
    9f90:	629a      	str	r2, [r3, #40]	; 0x28
    emit->code_info_offset = 0;
    9f92:	68fb      	ldr	r3, [r7, #12]
    9f94:	2200      	movs	r2, #0
    9f96:	621a      	str	r2, [r3, #32]

    // Write local state size and exception stack size.
    {
        mp_uint_t n_state = scope->num_locals + scope->stack_size;
    9f98:	687b      	ldr	r3, [r7, #4]
    9f9a:	8c1b      	ldrh	r3, [r3, #32]
    9f9c:	461a      	mov	r2, r3
    9f9e:	687b      	ldr	r3, [r7, #4]
    9fa0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    9fa2:	4413      	add	r3, r2
    9fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (n_state == 0) {
    9fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9fa8:	2b00      	cmp	r3, #0
    9faa:	d101      	bne.n	9fb0 <mp_emit_bc_start_pass+0x78>
            // Need at least 1 entry in the state, in the case an exception is
            // propagated through this function, the exception is returned in
            // the highest slot in the state (fastn[0], see vm.c).
            n_state = 1;
    9fac:	2301      	movs	r3, #1
    9fae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        emit_write_code_info_uint(emit, n_state);
    9fb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    9fb2:	68f8      	ldr	r0, [r7, #12]
    9fb4:	f7ff fdb0 	bl	9b18 <emit_write_code_info_uint>
        emit_write_code_info_uint(emit, scope->exc_stack_size);
    9fb8:	687b      	ldr	r3, [r7, #4]
    9fba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    9fbc:	4619      	mov	r1, r3
    9fbe:	68f8      	ldr	r0, [r7, #12]
    9fc0:	f7ff fdaa 	bl	9b18 <emit_write_code_info_uint>
    }

    // Write scope flags and number of arguments.
    // TODO check that num args all fit in a byte
    emit_write_code_info_byte(emit, emit->scope->scope_flags);
    9fc4:	68fb      	ldr	r3, [r7, #12]
    9fc6:	68db      	ldr	r3, [r3, #12]
    9fc8:	7e1b      	ldrb	r3, [r3, #24]
    9fca:	4619      	mov	r1, r3
    9fcc:	68f8      	ldr	r0, [r7, #12]
    9fce:	f7ff fd91 	bl	9af4 <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_pos_args);
    9fd2:	68fb      	ldr	r3, [r7, #12]
    9fd4:	68db      	ldr	r3, [r3, #12]
    9fd6:	8b5b      	ldrh	r3, [r3, #26]
    9fd8:	b2db      	uxtb	r3, r3
    9fda:	4619      	mov	r1, r3
    9fdc:	68f8      	ldr	r0, [r7, #12]
    9fde:	f7ff fd89 	bl	9af4 <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_kwonly_args);
    9fe2:	68fb      	ldr	r3, [r7, #12]
    9fe4:	68db      	ldr	r3, [r3, #12]
    9fe6:	8b9b      	ldrh	r3, [r3, #28]
    9fe8:	b2db      	uxtb	r3, r3
    9fea:	4619      	mov	r1, r3
    9fec:	68f8      	ldr	r0, [r7, #12]
    9fee:	f7ff fd81 	bl	9af4 <emit_write_code_info_byte>
    emit_write_code_info_byte(emit, emit->scope->num_def_pos_args);
    9ff2:	68fb      	ldr	r3, [r7, #12]
    9ff4:	68db      	ldr	r3, [r3, #12]
    9ff6:	8bdb      	ldrh	r3, [r3, #30]
    9ff8:	b2db      	uxtb	r3, r3
    9ffa:	4619      	mov	r1, r3
    9ffc:	68f8      	ldr	r0, [r7, #12]
    9ffe:	f7ff fd79 	bl	9af4 <emit_write_code_info_byte>

    // Write size of the rest of the code info.  We don't know how big this
    // variable uint will be on the MP_PASS_CODE_SIZE pass so we reserve 2 bytes
    // for it and hope that is enough!  TODO assert this or something.
    if (pass == MP_PASS_EMIT) {
    a002:	68bb      	ldr	r3, [r7, #8]
    a004:	2b04      	cmp	r3, #4
    a006:	d109      	bne.n	a01c <mp_emit_bc_start_pass+0xe4>
        emit_write_code_info_uint(emit, emit->code_info_size - emit->code_info_offset);
    a008:	68fb      	ldr	r3, [r7, #12]
    a00a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a00c:	68fb      	ldr	r3, [r7, #12]
    a00e:	6a1b      	ldr	r3, [r3, #32]
    a010:	1ad3      	subs	r3, r2, r3
    a012:	4619      	mov	r1, r3
    a014:	68f8      	ldr	r0, [r7, #12]
    a016:	f7ff fd7f 	bl	9b18 <emit_write_code_info_uint>
    a01a:	e003      	b.n	a024 <mp_emit_bc_start_pass+0xec>
    } else  {
        emit_get_cur_to_write_code_info(emit, 2);
    a01c:	2102      	movs	r1, #2
    a01e:	68f8      	ldr	r0, [r7, #12]
    a020:	f7ff fd32 	bl	9a88 <emit_get_cur_to_write_code_info>
    }

    // Write the name and source file of this function.
    emit_write_code_info_qstr(emit, scope->simple_name);
    a024:	687b      	ldr	r3, [r7, #4]
    a026:	8a5b      	ldrh	r3, [r3, #18]
    a028:	4619      	mov	r1, r3
    a02a:	68f8      	ldr	r0, [r7, #12]
    a02c:	f7ff fd84 	bl	9b38 <emit_write_code_info_qstr>
    emit_write_code_info_qstr(emit, scope->source_file);
    a030:	687b      	ldr	r3, [r7, #4]
    a032:	8a1b      	ldrh	r3, [r3, #16]
    a034:	4619      	mov	r1, r3
    a036:	68f8      	ldr	r0, [r7, #12]
    a038:	f7ff fd7e 	bl	9b38 <emit_write_code_info_qstr>

    // bytecode prelude: initialise closed over variables
    for (int i = 0; i < scope->id_info_len; i++) {
    a03c:	2300      	movs	r3, #0
    a03e:	62bb      	str	r3, [r7, #40]	; 0x28
    a040:	e01e      	b.n	a080 <mp_emit_bc_start_pass+0x148>
        id_info_t *id = &scope->id_info[i];
    a042:	687b      	ldr	r3, [r7, #4]
    a044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a046:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a048:	00db      	lsls	r3, r3, #3
    a04a:	4413      	add	r3, r2
    a04c:	61bb      	str	r3, [r7, #24]
        if (id->kind == ID_INFO_KIND_CELL) {
    a04e:	69bb      	ldr	r3, [r7, #24]
    a050:	781b      	ldrb	r3, [r3, #0]
    a052:	2b03      	cmp	r3, #3
    a054:	d111      	bne.n	a07a <mp_emit_bc_start_pass+0x142>
            assert(id->local_num < 255);
    a056:	69bb      	ldr	r3, [r7, #24]
    a058:	885b      	ldrh	r3, [r3, #2]
    a05a:	2bfe      	cmp	r3, #254	; 0xfe
    a05c:	d906      	bls.n	a06c <mp_emit_bc_start_pass+0x134>
    a05e:	4b32      	ldr	r3, [pc, #200]	; (a128 <mp_emit_bc_start_pass+0x1f0>)
    a060:	4a32      	ldr	r2, [pc, #200]	; (a12c <mp_emit_bc_start_pass+0x1f4>)
    a062:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    a066:	4832      	ldr	r0, [pc, #200]	; (a130 <mp_emit_bc_start_pass+0x1f8>)
    a068:	f011 f980 	bl	1b36c <__assert_func>
            emit_write_bytecode_byte(emit, id->local_num); // write the local which should be converted to a cell
    a06c:	69bb      	ldr	r3, [r7, #24]
    a06e:	885b      	ldrh	r3, [r3, #2]
    a070:	b2db      	uxtb	r3, r3
    a072:	4619      	mov	r1, r3
    a074:	68f8      	ldr	r0, [r7, #12]
    a076:	f7ff fdc1 	bl	9bfc <emit_write_bytecode_byte>
    for (int i = 0; i < scope->id_info_len; i++) {
    a07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a07c:	3301      	adds	r3, #1
    a07e:	62bb      	str	r3, [r7, #40]	; 0x28
    a080:	687b      	ldr	r3, [r7, #4]
    a082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    a084:	461a      	mov	r2, r3
    a086:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a088:	429a      	cmp	r2, r3
    a08a:	dcda      	bgt.n	a042 <mp_emit_bc_start_pass+0x10a>
        }
    }
    emit_write_bytecode_byte(emit, 255); // end of list sentinel
    a08c:	21ff      	movs	r1, #255	; 0xff
    a08e:	68f8      	ldr	r0, [r7, #12]
    a090:	f7ff fdb4 	bl	9bfc <emit_write_bytecode_byte>

    #if MICROPY_PERSISTENT_CODE
    emit->ct_cur_obj = 0;
    a094:	68fb      	ldr	r3, [r7, #12]
    a096:	2200      	movs	r2, #0
    a098:	869a      	strh	r2, [r3, #52]	; 0x34
    emit->ct_cur_raw_code = 0;
    a09a:	68fb      	ldr	r3, [r7, #12]
    a09c:	2200      	movs	r2, #0
    a09e:	871a      	strh	r2, [r3, #56]	; 0x38
    #endif

    if (pass == MP_PASS_EMIT) {
    a0a0:	68bb      	ldr	r3, [r7, #8]
    a0a2:	2b04      	cmp	r3, #4
    a0a4:	d13c      	bne.n	a120 <mp_emit_bc_start_pass+0x1e8>
        // parameter we use "*" as its name (since no argument can ever be named
        // "*").  We could use a blank qstr but "*" is better for debugging.
        // Note: there is some wasted RAM here for the case of storing a qstr
        // for each closed-over variable, and maybe there is a better way to do
        // it, but that would require changes to mp_setup_code_state.
        for (int i = 0; i < scope->num_pos_args + scope->num_kwonly_args; i++) {
    a0a6:	2300      	movs	r3, #0
    a0a8:	627b      	str	r3, [r7, #36]	; 0x24
    a0aa:	e030      	b.n	a10e <mp_emit_bc_start_pass+0x1d6>
            qstr qst = MP_QSTR__star_;
    a0ac:	2326      	movs	r3, #38	; 0x26
    a0ae:	623b      	str	r3, [r7, #32]
            for (int j = 0; j < scope->id_info_len; ++j) {
    a0b0:	2300      	movs	r3, #0
    a0b2:	61fb      	str	r3, [r7, #28]
    a0b4:	e018      	b.n	a0e8 <mp_emit_bc_start_pass+0x1b0>
                id_info_t *id = &scope->id_info[j];
    a0b6:	687b      	ldr	r3, [r7, #4]
    a0b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a0ba:	69fb      	ldr	r3, [r7, #28]
    a0bc:	00db      	lsls	r3, r3, #3
    a0be:	4413      	add	r3, r2
    a0c0:	617b      	str	r3, [r7, #20]
                if ((id->flags & ID_FLAG_IS_PARAM) && id->local_num == i) {
    a0c2:	697b      	ldr	r3, [r7, #20]
    a0c4:	785b      	ldrb	r3, [r3, #1]
    a0c6:	f003 0301 	and.w	r3, r3, #1
    a0ca:	2b00      	cmp	r3, #0
    a0cc:	d009      	beq.n	a0e2 <mp_emit_bc_start_pass+0x1aa>
    a0ce:	697b      	ldr	r3, [r7, #20]
    a0d0:	885b      	ldrh	r3, [r3, #2]
    a0d2:	461a      	mov	r2, r3
    a0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a0d6:	429a      	cmp	r2, r3
    a0d8:	d103      	bne.n	a0e2 <mp_emit_bc_start_pass+0x1aa>
                    qst = id->qst;
    a0da:	697b      	ldr	r3, [r7, #20]
    a0dc:	685b      	ldr	r3, [r3, #4]
    a0de:	623b      	str	r3, [r7, #32]
                    break;
    a0e0:	e008      	b.n	a0f4 <mp_emit_bc_start_pass+0x1bc>
            for (int j = 0; j < scope->id_info_len; ++j) {
    a0e2:	69fb      	ldr	r3, [r7, #28]
    a0e4:	3301      	adds	r3, #1
    a0e6:	61fb      	str	r3, [r7, #28]
    a0e8:	687b      	ldr	r3, [r7, #4]
    a0ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    a0ec:	461a      	mov	r2, r3
    a0ee:	69fb      	ldr	r3, [r7, #28]
    a0f0:	429a      	cmp	r2, r3
    a0f2:	dce0      	bgt.n	a0b6 <mp_emit_bc_start_pass+0x17e>
                }
            }
            emit->const_table[i] = (mp_uint_t)MP_OBJ_NEW_QSTR(qst);
    a0f4:	68fb      	ldr	r3, [r7, #12]
    a0f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    a0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a0fa:	009b      	lsls	r3, r3, #2
    a0fc:	4413      	add	r3, r2
    a0fe:	6a3a      	ldr	r2, [r7, #32]
    a100:	0092      	lsls	r2, r2, #2
    a102:	f042 0202 	orr.w	r2, r2, #2
    a106:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < scope->num_pos_args + scope->num_kwonly_args; i++) {
    a108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a10a:	3301      	adds	r3, #1
    a10c:	627b      	str	r3, [r7, #36]	; 0x24
    a10e:	687b      	ldr	r3, [r7, #4]
    a110:	8b5b      	ldrh	r3, [r3, #26]
    a112:	461a      	mov	r2, r3
    a114:	687b      	ldr	r3, [r7, #4]
    a116:	8b9b      	ldrh	r3, [r3, #28]
    a118:	441a      	add	r2, r3
    a11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a11c:	429a      	cmp	r2, r3
    a11e:	dcc5      	bgt.n	a0ac <mp_emit_bc_start_pass+0x174>
        }
    }
}
    a120:	bf00      	nop
    a122:	3730      	adds	r7, #48	; 0x30
    a124:	46bd      	mov	sp, r7
    a126:	bd80      	pop	{r7, pc}
    a128:	0001f250 	.word	0x0001f250
    a12c:	0001f438 	.word	0x0001f438
    a130:	0001f1e4 	.word	0x0001f1e4

0000a134 <mp_emit_bc_end_pass>:

void mp_emit_bc_end_pass(emit_t *emit) {
    a134:	b580      	push	{r7, lr}
    a136:	b082      	sub	sp, #8
    a138:	af00      	add	r7, sp, #0
    a13a:	6078      	str	r0, [r7, #4]
    if (emit->pass == MP_PASS_SCOPE) {
    a13c:	687b      	ldr	r3, [r7, #4]
    a13e:	795b      	ldrb	r3, [r3, #5]
    a140:	2b01      	cmp	r3, #1
    a142:	d061      	beq.n	a208 <mp_emit_bc_end_pass+0xd4>
        return;
    }

    // check stack is back to zero size
    assert(emit->stack_size == 0);
    a144:	687b      	ldr	r3, [r7, #4]
    a146:	689b      	ldr	r3, [r3, #8]
    a148:	2b00      	cmp	r3, #0
    a14a:	d006      	beq.n	a15a <mp_emit_bc_end_pass+0x26>
    a14c:	4b30      	ldr	r3, [pc, #192]	; (a210 <mp_emit_bc_end_pass+0xdc>)
    a14e:	4a31      	ldr	r2, [pc, #196]	; (a214 <mp_emit_bc_end_pass+0xe0>)
    a150:	f240 1199 	movw	r1, #409	; 0x199
    a154:	4830      	ldr	r0, [pc, #192]	; (a218 <mp_emit_bc_end_pass+0xe4>)
    a156:	f011 f909 	bl	1b36c <__assert_func>

    emit_write_code_info_byte(emit, 0); // end of line number info
    a15a:	2100      	movs	r1, #0
    a15c:	6878      	ldr	r0, [r7, #4]
    a15e:	f7ff fcc9 	bl	9af4 <emit_write_code_info_byte>

    #if MICROPY_PERSISTENT_CODE
    assert(emit->pass <= MP_PASS_STACK_SIZE || (emit->ct_num_obj == emit->ct_cur_obj));
    a162:	687b      	ldr	r3, [r7, #4]
    a164:	795b      	ldrb	r3, [r3, #5]
    a166:	2b02      	cmp	r3, #2
    a168:	d90c      	bls.n	a184 <mp_emit_bc_end_pass+0x50>
    a16a:	687b      	ldr	r3, [r7, #4]
    a16c:	8eda      	ldrh	r2, [r3, #54]	; 0x36
    a16e:	687b      	ldr	r3, [r7, #4]
    a170:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    a172:	429a      	cmp	r2, r3
    a174:	d006      	beq.n	a184 <mp_emit_bc_end_pass+0x50>
    a176:	4b29      	ldr	r3, [pc, #164]	; (a21c <mp_emit_bc_end_pass+0xe8>)
    a178:	4a26      	ldr	r2, [pc, #152]	; (a214 <mp_emit_bc_end_pass+0xe0>)
    a17a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    a17e:	4826      	ldr	r0, [pc, #152]	; (a218 <mp_emit_bc_end_pass+0xe4>)
    a180:	f011 f8f4 	bl	1b36c <__assert_func>
    emit->ct_num_obj = emit->ct_cur_obj;
    a184:	687b      	ldr	r3, [r7, #4]
    a186:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    a188:	687b      	ldr	r3, [r7, #4]
    a18a:	86da      	strh	r2, [r3, #54]	; 0x36
    #endif

    if (emit->pass == MP_PASS_CODE_SIZE) {
    a18c:	687b      	ldr	r3, [r7, #4]
    a18e:	795b      	ldrb	r3, [r3, #5]
    a190:	2b03      	cmp	r3, #3
    a192:	d128      	bne.n	a1e6 <mp_emit_bc_end_pass+0xb2>
        // so bytecode is aligned
        emit->code_info_offset = (size_t)MP_ALIGN(emit->code_info_offset, sizeof(mp_uint_t));
        #endif

        // calculate size of total code-info + bytecode, in bytes
        emit->code_info_size = emit->code_info_offset;
    a194:	687b      	ldr	r3, [r7, #4]
    a196:	6a1a      	ldr	r2, [r3, #32]
    a198:	687b      	ldr	r3, [r7, #4]
    a19a:	625a      	str	r2, [r3, #36]	; 0x24
        emit->bytecode_size = emit->bytecode_offset;
    a19c:	687b      	ldr	r3, [r7, #4]
    a19e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a1a0:	687b      	ldr	r3, [r7, #4]
    a1a2:	62da      	str	r2, [r3, #44]	; 0x2c
        emit->code_base = m_new0(byte, emit->code_info_size + emit->bytecode_size);
    a1a4:	687b      	ldr	r3, [r7, #4]
    a1a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a1a8:	687b      	ldr	r3, [r7, #4]
    a1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a1ac:	4413      	add	r3, r2
    a1ae:	4618      	mov	r0, r3
    a1b0:	f7f6 f8da 	bl	368 <m_malloc0>
    a1b4:	4602      	mov	r2, r0
    a1b6:	687b      	ldr	r3, [r7, #4]
    a1b8:	631a      	str	r2, [r3, #48]	; 0x30

        #if MICROPY_PERSISTENT_CODE
        emit->const_table = m_new0(mp_uint_t,
    a1ba:	687b      	ldr	r3, [r7, #4]
    a1bc:	68db      	ldr	r3, [r3, #12]
    a1be:	8b5b      	ldrh	r3, [r3, #26]
    a1c0:	461a      	mov	r2, r3
    a1c2:	687b      	ldr	r3, [r7, #4]
    a1c4:	68db      	ldr	r3, [r3, #12]
    a1c6:	8b9b      	ldrh	r3, [r3, #28]
    a1c8:	4413      	add	r3, r2
    a1ca:	687a      	ldr	r2, [r7, #4]
    a1cc:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    a1ce:	4413      	add	r3, r2
    a1d0:	687a      	ldr	r2, [r7, #4]
    a1d2:	8f12      	ldrh	r2, [r2, #56]	; 0x38
    a1d4:	4413      	add	r3, r2
    a1d6:	009b      	lsls	r3, r3, #2
    a1d8:	4618      	mov	r0, r3
    a1da:	f7f6 f8c5 	bl	368 <m_malloc0>
    a1de:	4602      	mov	r2, r0
    a1e0:	687b      	ldr	r3, [r7, #4]
    a1e2:	63da      	str	r2, [r3, #60]	; 0x3c
    a1e4:	e011      	b.n	a20a <mp_emit_bc_end_pass+0xd6>
        #else
        emit->const_table = m_new0(mp_uint_t,
            emit->scope->num_pos_args + emit->scope->num_kwonly_args);
        #endif

    } else if (emit->pass == MP_PASS_EMIT) {
    a1e6:	687b      	ldr	r3, [r7, #4]
    a1e8:	795b      	ldrb	r3, [r3, #5]
    a1ea:	2b04      	cmp	r3, #4
    a1ec:	d10d      	bne.n	a20a <mp_emit_bc_end_pass+0xd6>
        mp_emit_glue_assign_bytecode(emit->scope->raw_code, emit->code_base,
    a1ee:	687b      	ldr	r3, [r7, #4]
    a1f0:	68db      	ldr	r3, [r3, #12]
    a1f2:	6958      	ldr	r0, [r3, #20]
    a1f4:	687b      	ldr	r3, [r7, #4]
    a1f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
            #if MICROPY_PERSISTENT_CODE_SAVE || MICROPY_DEBUG_PRINTERS
            emit->code_info_size + emit->bytecode_size,
            #endif
            emit->const_table,
    a1f8:	687b      	ldr	r3, [r7, #4]
    a1fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
            #if MICROPY_PERSISTENT_CODE_SAVE
            emit->ct_cur_obj, emit->ct_cur_raw_code,
            #endif
            emit->scope->scope_flags);
    a1fc:	687b      	ldr	r3, [r7, #4]
    a1fe:	68db      	ldr	r3, [r3, #12]
    a200:	7e1b      	ldrb	r3, [r3, #24]
        mp_emit_glue_assign_bytecode(emit->scope->raw_code, emit->code_base,
    a202:	f001 f82b 	bl	b25c <mp_emit_glue_assign_bytecode>
    a206:	e000      	b.n	a20a <mp_emit_bc_end_pass+0xd6>
        return;
    a208:	bf00      	nop
    }
}
    a20a:	3708      	adds	r7, #8
    a20c:	46bd      	mov	sp, r7
    a20e:	bd80      	pop	{r7, pc}
    a210:	0001f264 	.word	0x0001f264
    a214:	0001f450 	.word	0x0001f450
    a218:	0001f1e4 	.word	0x0001f1e4
    a21c:	0001f27c 	.word	0x0001f27c

0000a220 <mp_emit_bc_last_emit_was_return_value>:

bool mp_emit_bc_last_emit_was_return_value(emit_t *emit) {
    a220:	b480      	push	{r7}
    a222:	b083      	sub	sp, #12
    a224:	af00      	add	r7, sp, #0
    a226:	6078      	str	r0, [r7, #4]
    return emit->last_emit_was_return_value;
    a228:	687b      	ldr	r3, [r7, #4]
    a22a:	799b      	ldrb	r3, [r3, #6]
    a22c:	2b00      	cmp	r3, #0
    a22e:	bf14      	ite	ne
    a230:	2301      	movne	r3, #1
    a232:	2300      	moveq	r3, #0
    a234:	b2db      	uxtb	r3, r3
}
    a236:	4618      	mov	r0, r3
    a238:	370c      	adds	r7, #12
    a23a:	46bd      	mov	sp, r7
    a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a240:	4770      	bx	lr
    a242:	bf00      	nop

0000a244 <mp_emit_bc_adjust_stack_size>:

void mp_emit_bc_adjust_stack_size(emit_t *emit, mp_int_t delta) {
    a244:	b580      	push	{r7, lr}
    a246:	b082      	sub	sp, #8
    a248:	af00      	add	r7, sp, #0
    a24a:	6078      	str	r0, [r7, #4]
    a24c:	6039      	str	r1, [r7, #0]
    if (emit->pass == MP_PASS_SCOPE) {
    a24e:	687b      	ldr	r3, [r7, #4]
    a250:	795b      	ldrb	r3, [r3, #5]
    a252:	2b01      	cmp	r3, #1
    a254:	d023      	beq.n	a29e <mp_emit_bc_adjust_stack_size+0x5a>
        return;
    }
    assert((mp_int_t)emit->stack_size + delta >= 0);
    a256:	687b      	ldr	r3, [r7, #4]
    a258:	689a      	ldr	r2, [r3, #8]
    a25a:	683b      	ldr	r3, [r7, #0]
    a25c:	4413      	add	r3, r2
    a25e:	2b00      	cmp	r3, #0
    a260:	da06      	bge.n	a270 <mp_emit_bc_adjust_stack_size+0x2c>
    a262:	4b11      	ldr	r3, [pc, #68]	; (a2a8 <mp_emit_bc_adjust_stack_size+0x64>)
    a264:	4a11      	ldr	r2, [pc, #68]	; (a2ac <mp_emit_bc_adjust_stack_size+0x68>)
    a266:	f240 11cb 	movw	r1, #459	; 0x1cb
    a26a:	4811      	ldr	r0, [pc, #68]	; (a2b0 <mp_emit_bc_adjust_stack_size+0x6c>)
    a26c:	f011 f87e 	bl	1b36c <__assert_func>
    emit->stack_size += delta;
    a270:	687b      	ldr	r3, [r7, #4]
    a272:	689a      	ldr	r2, [r3, #8]
    a274:	683b      	ldr	r3, [r7, #0]
    a276:	441a      	add	r2, r3
    a278:	687b      	ldr	r3, [r7, #4]
    a27a:	609a      	str	r2, [r3, #8]
    if (emit->stack_size > emit->scope->stack_size) {
    a27c:	687b      	ldr	r3, [r7, #4]
    a27e:	689b      	ldr	r3, [r3, #8]
    a280:	687a      	ldr	r2, [r7, #4]
    a282:	68d2      	ldr	r2, [r2, #12]
    a284:	8c52      	ldrh	r2, [r2, #34]	; 0x22
    a286:	4293      	cmp	r3, r2
    a288:	dd05      	ble.n	a296 <mp_emit_bc_adjust_stack_size+0x52>
        emit->scope->stack_size = emit->stack_size;
    a28a:	687b      	ldr	r3, [r7, #4]
    a28c:	68db      	ldr	r3, [r3, #12]
    a28e:	687a      	ldr	r2, [r7, #4]
    a290:	6892      	ldr	r2, [r2, #8]
    a292:	b292      	uxth	r2, r2
    a294:	845a      	strh	r2, [r3, #34]	; 0x22
    }
    emit->last_emit_was_return_value = false;
    a296:	687b      	ldr	r3, [r7, #4]
    a298:	2200      	movs	r2, #0
    a29a:	719a      	strb	r2, [r3, #6]
    a29c:	e000      	b.n	a2a0 <mp_emit_bc_adjust_stack_size+0x5c>
        return;
    a29e:	bf00      	nop
}
    a2a0:	3708      	adds	r7, #8
    a2a2:	46bd      	mov	sp, r7
    a2a4:	bd80      	pop	{r7, pc}
    a2a6:	bf00      	nop
    a2a8:	0001f2c8 	.word	0x0001f2c8
    a2ac:	0001f464 	.word	0x0001f464
    a2b0:	0001f1e4 	.word	0x0001f1e4

0000a2b4 <emit_bc_pre>:

static inline void emit_bc_pre(emit_t *emit, mp_int_t stack_size_delta) {
    a2b4:	b580      	push	{r7, lr}
    a2b6:	b082      	sub	sp, #8
    a2b8:	af00      	add	r7, sp, #0
    a2ba:	6078      	str	r0, [r7, #4]
    a2bc:	6039      	str	r1, [r7, #0]
    mp_emit_bc_adjust_stack_size(emit, stack_size_delta);
    a2be:	6839      	ldr	r1, [r7, #0]
    a2c0:	6878      	ldr	r0, [r7, #4]
    a2c2:	f7ff ffbf 	bl	a244 <mp_emit_bc_adjust_stack_size>
}
    a2c6:	bf00      	nop
    a2c8:	3708      	adds	r7, #8
    a2ca:	46bd      	mov	sp, r7
    a2cc:	bd80      	pop	{r7, pc}
    a2ce:	bf00      	nop

0000a2d0 <mp_emit_bc_set_source_line>:

void mp_emit_bc_set_source_line(emit_t *emit, mp_uint_t source_line) {
    a2d0:	b480      	push	{r7}
    a2d2:	b083      	sub	sp, #12
    a2d4:	af00      	add	r7, sp, #0
    a2d6:	6078      	str	r0, [r7, #4]
    a2d8:	6039      	str	r1, [r7, #0]
    }
#else
    (void)emit;
    (void)source_line;
#endif
}
    a2da:	bf00      	nop
    a2dc:	370c      	adds	r7, #12
    a2de:	46bd      	mov	sp, r7
    a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2e4:	4770      	bx	lr
    a2e6:	bf00      	nop

0000a2e8 <mp_emit_bc_label_assign>:

void mp_emit_bc_label_assign(emit_t *emit, mp_uint_t l) {
    a2e8:	b580      	push	{r7, lr}
    a2ea:	b082      	sub	sp, #8
    a2ec:	af00      	add	r7, sp, #0
    a2ee:	6078      	str	r0, [r7, #4]
    a2f0:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    a2f2:	2100      	movs	r1, #0
    a2f4:	6878      	ldr	r0, [r7, #4]
    a2f6:	f7ff ffdd 	bl	a2b4 <emit_bc_pre>
    if (emit->pass == MP_PASS_SCOPE) {
    a2fa:	687b      	ldr	r3, [r7, #4]
    a2fc:	795b      	ldrb	r3, [r3, #5]
    a2fe:	2b01      	cmp	r3, #1
    a300:	d039      	beq.n	a376 <mp_emit_bc_label_assign+0x8e>
        return;
    }
    assert(l < emit->max_num_labels);
    a302:	687b      	ldr	r3, [r7, #4]
    a304:	699a      	ldr	r2, [r3, #24]
    a306:	683b      	ldr	r3, [r7, #0]
    a308:	429a      	cmp	r2, r3
    a30a:	d806      	bhi.n	a31a <mp_emit_bc_label_assign+0x32>
    a30c:	4b1c      	ldr	r3, [pc, #112]	; (a380 <mp_emit_bc_label_assign+0x98>)
    a30e:	4a1d      	ldr	r2, [pc, #116]	; (a384 <mp_emit_bc_label_assign+0x9c>)
    a310:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    a314:	481c      	ldr	r0, [pc, #112]	; (a388 <mp_emit_bc_label_assign+0xa0>)
    a316:	f011 f829 	bl	1b36c <__assert_func>
    if (emit->pass < MP_PASS_EMIT) {
    a31a:	687b      	ldr	r3, [r7, #4]
    a31c:	795b      	ldrb	r3, [r3, #5]
    a31e:	2b03      	cmp	r3, #3
    a320:	d818      	bhi.n	a354 <mp_emit_bc_label_assign+0x6c>
        // assign label offset
        assert(emit->label_offsets[l] == (mp_uint_t)-1);
    a322:	687b      	ldr	r3, [r7, #4]
    a324:	69da      	ldr	r2, [r3, #28]
    a326:	683b      	ldr	r3, [r7, #0]
    a328:	009b      	lsls	r3, r3, #2
    a32a:	4413      	add	r3, r2
    a32c:	681b      	ldr	r3, [r3, #0]
    a32e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a332:	d006      	beq.n	a342 <mp_emit_bc_label_assign+0x5a>
    a334:	4b15      	ldr	r3, [pc, #84]	; (a38c <mp_emit_bc_label_assign+0xa4>)
    a336:	4a13      	ldr	r2, [pc, #76]	; (a384 <mp_emit_bc_label_assign+0x9c>)
    a338:	f240 11f3 	movw	r1, #499	; 0x1f3
    a33c:	4812      	ldr	r0, [pc, #72]	; (a388 <mp_emit_bc_label_assign+0xa0>)
    a33e:	f011 f815 	bl	1b36c <__assert_func>
        emit->label_offsets[l] = emit->bytecode_offset;
    a342:	687b      	ldr	r3, [r7, #4]
    a344:	69da      	ldr	r2, [r3, #28]
    a346:	683b      	ldr	r3, [r7, #0]
    a348:	009b      	lsls	r3, r3, #2
    a34a:	4413      	add	r3, r2
    a34c:	687a      	ldr	r2, [r7, #4]
    a34e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    a350:	601a      	str	r2, [r3, #0]
    a352:	e011      	b.n	a378 <mp_emit_bc_label_assign+0x90>
    } else {
        // ensure label offset has not changed from MP_PASS_CODE_SIZE to MP_PASS_EMIT
        assert(emit->label_offsets[l] == emit->bytecode_offset);
    a354:	687b      	ldr	r3, [r7, #4]
    a356:	69da      	ldr	r2, [r3, #28]
    a358:	683b      	ldr	r3, [r7, #0]
    a35a:	009b      	lsls	r3, r3, #2
    a35c:	4413      	add	r3, r2
    a35e:	681a      	ldr	r2, [r3, #0]
    a360:	687b      	ldr	r3, [r7, #4]
    a362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a364:	429a      	cmp	r2, r3
    a366:	d007      	beq.n	a378 <mp_emit_bc_label_assign+0x90>
    a368:	4b09      	ldr	r3, [pc, #36]	; (a390 <mp_emit_bc_label_assign+0xa8>)
    a36a:	4a06      	ldr	r2, [pc, #24]	; (a384 <mp_emit_bc_label_assign+0x9c>)
    a36c:	f240 11f7 	movw	r1, #503	; 0x1f7
    a370:	4805      	ldr	r0, [pc, #20]	; (a388 <mp_emit_bc_label_assign+0xa0>)
    a372:	f010 fffb 	bl	1b36c <__assert_func>
        return;
    a376:	bf00      	nop
    }
}
    a378:	3708      	adds	r7, #8
    a37a:	46bd      	mov	sp, r7
    a37c:	bd80      	pop	{r7, pc}
    a37e:	bf00      	nop
    a380:	0001f2f0 	.word	0x0001f2f0
    a384:	0001f484 	.word	0x0001f484
    a388:	0001f1e4 	.word	0x0001f1e4
    a38c:	0001f30c 	.word	0x0001f30c
    a390:	0001f334 	.word	0x0001f334

0000a394 <mp_emit_bc_import>:

void mp_emit_bc_import(emit_t *emit, qstr qst, int kind) {
    a394:	b580      	push	{r7, lr}
    a396:	b084      	sub	sp, #16
    a398:	af00      	add	r7, sp, #0
    a39a:	60f8      	str	r0, [r7, #12]
    a39c:	60b9      	str	r1, [r7, #8]
    a39e:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_IMPORT_NAME + MP_EMIT_IMPORT_NAME == MP_BC_IMPORT_NAME);
    MP_STATIC_ASSERT(MP_BC_IMPORT_NAME + MP_EMIT_IMPORT_FROM == MP_BC_IMPORT_FROM);
    if (kind == MP_EMIT_IMPORT_FROM) {
    a3a0:	687b      	ldr	r3, [r7, #4]
    a3a2:	2b01      	cmp	r3, #1
    a3a4:	d104      	bne.n	a3b0 <mp_emit_bc_import+0x1c>
        emit_bc_pre(emit, 1);
    a3a6:	2101      	movs	r1, #1
    a3a8:	68f8      	ldr	r0, [r7, #12]
    a3aa:	f7ff ff83 	bl	a2b4 <emit_bc_pre>
    a3ae:	e004      	b.n	a3ba <mp_emit_bc_import+0x26>
    } else {
        emit_bc_pre(emit, -1);
    a3b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a3b4:	68f8      	ldr	r0, [r7, #12]
    a3b6:	f7ff ff7d 	bl	a2b4 <emit_bc_pre>
    }
    if (kind == MP_EMIT_IMPORT_STAR) {
    a3ba:	687b      	ldr	r3, [r7, #4]
    a3bc:	2b02      	cmp	r3, #2
    a3be:	d104      	bne.n	a3ca <mp_emit_bc_import+0x36>
        emit_write_bytecode_byte(emit, MP_BC_IMPORT_STAR);
    a3c0:	216a      	movs	r1, #106	; 0x6a
    a3c2:	68f8      	ldr	r0, [r7, #12]
    a3c4:	f7ff fc1a 	bl	9bfc <emit_write_bytecode_byte>
    } else {
        emit_write_bytecode_byte_qstr(emit, MP_BC_IMPORT_NAME + kind, qst);
    }
}
    a3c8:	e008      	b.n	a3dc <mp_emit_bc_import+0x48>
        emit_write_bytecode_byte_qstr(emit, MP_BC_IMPORT_NAME + kind, qst);
    a3ca:	687b      	ldr	r3, [r7, #4]
    a3cc:	b2db      	uxtb	r3, r3
    a3ce:	3368      	adds	r3, #104	; 0x68
    a3d0:	b2db      	uxtb	r3, r3
    a3d2:	68ba      	ldr	r2, [r7, #8]
    a3d4:	4619      	mov	r1, r3
    a3d6:	68f8      	ldr	r0, [r7, #12]
    a3d8:	f7ff fcda 	bl	9d90 <emit_write_bytecode_byte_qstr>
}
    a3dc:	bf00      	nop
    a3de:	3710      	adds	r7, #16
    a3e0:	46bd      	mov	sp, r7
    a3e2:	bd80      	pop	{r7, pc}

0000a3e4 <mp_emit_bc_load_const_tok>:

void mp_emit_bc_load_const_tok(emit_t *emit, mp_token_kind_t tok) {
    a3e4:	b580      	push	{r7, lr}
    a3e6:	b082      	sub	sp, #8
    a3e8:	af00      	add	r7, sp, #0
    a3ea:	6078      	str	r0, [r7, #4]
    a3ec:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a3ee:	2101      	movs	r1, #1
    a3f0:	6878      	ldr	r0, [r7, #4]
    a3f2:	f7ff ff5f 	bl	a2b4 <emit_bc_pre>
    switch (tok) {
    a3f6:	683b      	ldr	r3, [r7, #0]
    a3f8:	2b0e      	cmp	r3, #14
    a3fa:	d008      	beq.n	a40e <mp_emit_bc_load_const_tok+0x2a>
    a3fc:	2b0f      	cmp	r3, #15
    a3fe:	d00b      	beq.n	a418 <mp_emit_bc_load_const_tok+0x34>
    a400:	2b0d      	cmp	r3, #13
    a402:	d10e      	bne.n	a422 <mp_emit_bc_load_const_tok+0x3e>
        case MP_TOKEN_KW_FALSE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_FALSE); break;
    a404:	2110      	movs	r1, #16
    a406:	6878      	ldr	r0, [r7, #4]
    a408:	f7ff fbf8 	bl	9bfc <emit_write_bytecode_byte>
    a40c:	e019      	b.n	a442 <mp_emit_bc_load_const_tok+0x5e>
        case MP_TOKEN_KW_NONE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_NONE); break;
    a40e:	2111      	movs	r1, #17
    a410:	6878      	ldr	r0, [r7, #4]
    a412:	f7ff fbf3 	bl	9bfc <emit_write_bytecode_byte>
    a416:	e014      	b.n	a442 <mp_emit_bc_load_const_tok+0x5e>
        case MP_TOKEN_KW_TRUE: emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_TRUE); break;
    a418:	2112      	movs	r1, #18
    a41a:	6878      	ldr	r0, [r7, #4]
    a41c:	f7ff fbee 	bl	9bfc <emit_write_bytecode_byte>
    a420:	e00f      	b.n	a442 <mp_emit_bc_load_const_tok+0x5e>
        default:
            assert(tok == MP_TOKEN_ELLIPSIS);
    a422:	683b      	ldr	r3, [r7, #0]
    a424:	2b0c      	cmp	r3, #12
    a426:	d006      	beq.n	a436 <mp_emit_bc_load_const_tok+0x52>
    a428:	4b08      	ldr	r3, [pc, #32]	; (a44c <mp_emit_bc_load_const_tok+0x68>)
    a42a:	4a09      	ldr	r2, [pc, #36]	; (a450 <mp_emit_bc_load_const_tok+0x6c>)
    a42c:	f240 2111 	movw	r1, #529	; 0x211
    a430:	4808      	ldr	r0, [pc, #32]	; (a454 <mp_emit_bc_load_const_tok+0x70>)
    a432:	f010 ff9b 	bl	1b36c <__assert_func>
            emit_write_bytecode_byte_obj(emit, MP_BC_LOAD_CONST_OBJ, MP_OBJ_FROM_PTR(&mp_const_ellipsis_obj));
    a436:	4a08      	ldr	r2, [pc, #32]	; (a458 <mp_emit_bc_load_const_tok+0x74>)
    a438:	2117      	movs	r1, #23
    a43a:	6878      	ldr	r0, [r7, #4]
    a43c:	f7ff fcd6 	bl	9dec <emit_write_bytecode_byte_obj>
            break;
    a440:	bf00      	nop
    }
}
    a442:	bf00      	nop
    a444:	3708      	adds	r7, #8
    a446:	46bd      	mov	sp, r7
    a448:	bd80      	pop	{r7, pc}
    a44a:	bf00      	nop
    a44c:	0001f364 	.word	0x0001f364
    a450:	0001f49c 	.word	0x0001f49c
    a454:	0001f1e4 	.word	0x0001f1e4
    a458:	00021618 	.word	0x00021618

0000a45c <mp_emit_bc_load_const_small_int>:

void mp_emit_bc_load_const_small_int(emit_t *emit, mp_int_t arg) {
    a45c:	b580      	push	{r7, lr}
    a45e:	b082      	sub	sp, #8
    a460:	af00      	add	r7, sp, #0
    a462:	6078      	str	r0, [r7, #4]
    a464:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a466:	2101      	movs	r1, #1
    a468:	6878      	ldr	r0, [r7, #4]
    a46a:	f7ff ff23 	bl	a2b4 <emit_bc_pre>
    if (-16 <= arg && arg <= 47) {
    a46e:	683b      	ldr	r3, [r7, #0]
    a470:	f113 0f10 	cmn.w	r3, #16
    a474:	db0b      	blt.n	a48e <mp_emit_bc_load_const_small_int+0x32>
    a476:	683b      	ldr	r3, [r7, #0]
    a478:	2b2f      	cmp	r3, #47	; 0x2f
    a47a:	dc08      	bgt.n	a48e <mp_emit_bc_load_const_small_int+0x32>
        emit_write_bytecode_byte(emit, MP_BC_LOAD_CONST_SMALL_INT_MULTI + 16 + arg);
    a47c:	683b      	ldr	r3, [r7, #0]
    a47e:	b2db      	uxtb	r3, r3
    a480:	3b80      	subs	r3, #128	; 0x80
    a482:	b2db      	uxtb	r3, r3
    a484:	4619      	mov	r1, r3
    a486:	6878      	ldr	r0, [r7, #4]
    a488:	f7ff fbb8 	bl	9bfc <emit_write_bytecode_byte>
    a48c:	e004      	b.n	a498 <mp_emit_bc_load_const_small_int+0x3c>
    } else {
        emit_write_bytecode_byte_int(emit, MP_BC_LOAD_CONST_SMALL_INT, arg);
    a48e:	683a      	ldr	r2, [r7, #0]
    a490:	2114      	movs	r1, #20
    a492:	6878      	ldr	r0, [r7, #4]
    a494:	f7ff fbdc 	bl	9c50 <emit_write_bytecode_byte_int>
    }
}
    a498:	bf00      	nop
    a49a:	3708      	adds	r7, #8
    a49c:	46bd      	mov	sp, r7
    a49e:	bd80      	pop	{r7, pc}

0000a4a0 <mp_emit_bc_load_const_str>:

void mp_emit_bc_load_const_str(emit_t *emit, qstr qst) {
    a4a0:	b580      	push	{r7, lr}
    a4a2:	b082      	sub	sp, #8
    a4a4:	af00      	add	r7, sp, #0
    a4a6:	6078      	str	r0, [r7, #4]
    a4a8:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a4aa:	2101      	movs	r1, #1
    a4ac:	6878      	ldr	r0, [r7, #4]
    a4ae:	f7ff ff01 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_CONST_STRING, qst);
    a4b2:	683a      	ldr	r2, [r7, #0]
    a4b4:	2116      	movs	r1, #22
    a4b6:	6878      	ldr	r0, [r7, #4]
    a4b8:	f7ff fc6a 	bl	9d90 <emit_write_bytecode_byte_qstr>
}
    a4bc:	bf00      	nop
    a4be:	3708      	adds	r7, #8
    a4c0:	46bd      	mov	sp, r7
    a4c2:	bd80      	pop	{r7, pc}

0000a4c4 <mp_emit_bc_load_const_obj>:

void mp_emit_bc_load_const_obj(emit_t *emit, mp_obj_t obj) {
    a4c4:	b580      	push	{r7, lr}
    a4c6:	b082      	sub	sp, #8
    a4c8:	af00      	add	r7, sp, #0
    a4ca:	6078      	str	r0, [r7, #4]
    a4cc:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    a4ce:	2101      	movs	r1, #1
    a4d0:	6878      	ldr	r0, [r7, #4]
    a4d2:	f7ff feef 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte_obj(emit, MP_BC_LOAD_CONST_OBJ, obj);
    a4d6:	683a      	ldr	r2, [r7, #0]
    a4d8:	2117      	movs	r1, #23
    a4da:	6878      	ldr	r0, [r7, #4]
    a4dc:	f7ff fc86 	bl	9dec <emit_write_bytecode_byte_obj>
}
    a4e0:	bf00      	nop
    a4e2:	3708      	adds	r7, #8
    a4e4:	46bd      	mov	sp, r7
    a4e6:	bd80      	pop	{r7, pc}

0000a4e8 <mp_emit_bc_load_null>:

void mp_emit_bc_load_null(emit_t *emit) {
    a4e8:	b580      	push	{r7, lr}
    a4ea:	b082      	sub	sp, #8
    a4ec:	af00      	add	r7, sp, #0
    a4ee:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 1);
    a4f0:	2101      	movs	r1, #1
    a4f2:	6878      	ldr	r0, [r7, #4]
    a4f4:	f7ff fede 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_LOAD_NULL);
    a4f8:	2118      	movs	r1, #24
    a4fa:	6878      	ldr	r0, [r7, #4]
    a4fc:	f7ff fb7e 	bl	9bfc <emit_write_bytecode_byte>
}
    a500:	bf00      	nop
    a502:	3708      	adds	r7, #8
    a504:	46bd      	mov	sp, r7
    a506:	bd80      	pop	{r7, pc}

0000a508 <mp_emit_bc_load_local>:

void mp_emit_bc_load_local(emit_t *emit, qstr qst, mp_uint_t local_num, int kind) {
    a508:	b580      	push	{r7, lr}
    a50a:	b084      	sub	sp, #16
    a50c:	af00      	add	r7, sp, #0
    a50e:	60f8      	str	r0, [r7, #12]
    a510:	60b9      	str	r1, [r7, #8]
    a512:	607a      	str	r2, [r7, #4]
    a514:	603b      	str	r3, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_LOAD_FAST_N + MP_EMIT_IDOP_LOCAL_FAST == MP_BC_LOAD_FAST_N);
    MP_STATIC_ASSERT(MP_BC_LOAD_FAST_N + MP_EMIT_IDOP_LOCAL_DEREF == MP_BC_LOAD_DEREF);
    (void)qst;
    emit_bc_pre(emit, 1);
    a516:	2101      	movs	r1, #1
    a518:	68f8      	ldr	r0, [r7, #12]
    a51a:	f7ff fecb 	bl	a2b4 <emit_bc_pre>
    if (kind == MP_EMIT_IDOP_LOCAL_FAST && local_num <= 15) {
    a51e:	683b      	ldr	r3, [r7, #0]
    a520:	2b00      	cmp	r3, #0
    a522:	d10b      	bne.n	a53c <mp_emit_bc_load_local+0x34>
    a524:	687b      	ldr	r3, [r7, #4]
    a526:	2b0f      	cmp	r3, #15
    a528:	d808      	bhi.n	a53c <mp_emit_bc_load_local+0x34>
        emit_write_bytecode_byte(emit, MP_BC_LOAD_FAST_MULTI + local_num);
    a52a:	687b      	ldr	r3, [r7, #4]
    a52c:	b2db      	uxtb	r3, r3
    a52e:	3b50      	subs	r3, #80	; 0x50
    a530:	b2db      	uxtb	r3, r3
    a532:	4619      	mov	r1, r3
    a534:	68f8      	ldr	r0, [r7, #12]
    a536:	f7ff fb61 	bl	9bfc <emit_write_bytecode_byte>
    a53a:	e008      	b.n	a54e <mp_emit_bc_load_local+0x46>
    } else {
        emit_write_bytecode_byte_uint(emit, MP_BC_LOAD_FAST_N + kind, local_num);
    a53c:	683b      	ldr	r3, [r7, #0]
    a53e:	b2db      	uxtb	r3, r3
    a540:	3319      	adds	r3, #25
    a542:	b2db      	uxtb	r3, r3
    a544:	687a      	ldr	r2, [r7, #4]
    a546:	4619      	mov	r1, r3
    a548:	68f8      	ldr	r0, [r7, #12]
    a54a:	f7ff fbeb 	bl	9d24 <emit_write_bytecode_byte_uint>
    }
}
    a54e:	bf00      	nop
    a550:	3710      	adds	r7, #16
    a552:	46bd      	mov	sp, r7
    a554:	bd80      	pop	{r7, pc}
    a556:	bf00      	nop

0000a558 <mp_emit_bc_load_global>:

void mp_emit_bc_load_global(emit_t *emit, qstr qst, int kind) {
    a558:	b580      	push	{r7, lr}
    a55a:	b084      	sub	sp, #16
    a55c:	af00      	add	r7, sp, #0
    a55e:	60f8      	str	r0, [r7, #12]
    a560:	60b9      	str	r1, [r7, #8]
    a562:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_LOAD_NAME + MP_EMIT_IDOP_GLOBAL_NAME == MP_BC_LOAD_NAME);
    MP_STATIC_ASSERT(MP_BC_LOAD_NAME + MP_EMIT_IDOP_GLOBAL_GLOBAL == MP_BC_LOAD_GLOBAL);
    (void)qst;
    emit_bc_pre(emit, 1);
    a564:	2101      	movs	r1, #1
    a566:	68f8      	ldr	r0, [r7, #12]
    a568:	f7ff fea4 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_NAME + kind, qst);
    a56c:	687b      	ldr	r3, [r7, #4]
    a56e:	b2db      	uxtb	r3, r3
    a570:	331b      	adds	r3, #27
    a572:	b2db      	uxtb	r3, r3
    a574:	68ba      	ldr	r2, [r7, #8]
    a576:	4619      	mov	r1, r3
    a578:	68f8      	ldr	r0, [r7, #12]
    a57a:	f7ff fc09 	bl	9d90 <emit_write_bytecode_byte_qstr>
    if (MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE_DYNAMIC) {
        emit_write_bytecode_byte(emit, 0);
    }
}
    a57e:	bf00      	nop
    a580:	3710      	adds	r7, #16
    a582:	46bd      	mov	sp, r7
    a584:	bd80      	pop	{r7, pc}
    a586:	bf00      	nop

0000a588 <mp_emit_bc_load_method>:

void mp_emit_bc_load_method(emit_t *emit, qstr qst, bool is_super) {
    a588:	b580      	push	{r7, lr}
    a58a:	b084      	sub	sp, #16
    a58c:	af00      	add	r7, sp, #0
    a58e:	60f8      	str	r0, [r7, #12]
    a590:	60b9      	str	r1, [r7, #8]
    a592:	4613      	mov	r3, r2
    a594:	71fb      	strb	r3, [r7, #7]
    emit_bc_pre(emit, 1 - 2 * is_super);
    a596:	79fb      	ldrb	r3, [r7, #7]
    a598:	005b      	lsls	r3, r3, #1
    a59a:	f1c3 0301 	rsb	r3, r3, #1
    a59e:	4619      	mov	r1, r3
    a5a0:	68f8      	ldr	r0, [r7, #12]
    a5a2:	f7ff fe87 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, is_super ? MP_BC_LOAD_SUPER_METHOD : MP_BC_LOAD_METHOD, qst);
    a5a6:	79fb      	ldrb	r3, [r7, #7]
    a5a8:	2b00      	cmp	r3, #0
    a5aa:	d001      	beq.n	a5b0 <mp_emit_bc_load_method+0x28>
    a5ac:	231f      	movs	r3, #31
    a5ae:	e000      	b.n	a5b2 <mp_emit_bc_load_method+0x2a>
    a5b0:	231e      	movs	r3, #30
    a5b2:	68ba      	ldr	r2, [r7, #8]
    a5b4:	4619      	mov	r1, r3
    a5b6:	68f8      	ldr	r0, [r7, #12]
    a5b8:	f7ff fbea 	bl	9d90 <emit_write_bytecode_byte_qstr>
}
    a5bc:	bf00      	nop
    a5be:	3710      	adds	r7, #16
    a5c0:	46bd      	mov	sp, r7
    a5c2:	bd80      	pop	{r7, pc}

0000a5c4 <mp_emit_bc_load_build_class>:

void mp_emit_bc_load_build_class(emit_t *emit) {
    a5c4:	b580      	push	{r7, lr}
    a5c6:	b082      	sub	sp, #8
    a5c8:	af00      	add	r7, sp, #0
    a5ca:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 1);
    a5cc:	2101      	movs	r1, #1
    a5ce:	6878      	ldr	r0, [r7, #4]
    a5d0:	f7ff fe70 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_LOAD_BUILD_CLASS);
    a5d4:	2120      	movs	r1, #32
    a5d6:	6878      	ldr	r0, [r7, #4]
    a5d8:	f7ff fb10 	bl	9bfc <emit_write_bytecode_byte>
}
    a5dc:	bf00      	nop
    a5de:	3708      	adds	r7, #8
    a5e0:	46bd      	mov	sp, r7
    a5e2:	bd80      	pop	{r7, pc}

0000a5e4 <mp_emit_bc_subscr>:

void mp_emit_bc_subscr(emit_t *emit, int kind) {
    a5e4:	b580      	push	{r7, lr}
    a5e6:	b082      	sub	sp, #8
    a5e8:	af00      	add	r7, sp, #0
    a5ea:	6078      	str	r0, [r7, #4]
    a5ec:	6039      	str	r1, [r7, #0]
    if (kind == MP_EMIT_SUBSCR_LOAD) {
    a5ee:	683b      	ldr	r3, [r7, #0]
    a5f0:	2b00      	cmp	r3, #0
    a5f2:	d109      	bne.n	a608 <mp_emit_bc_subscr+0x24>
        emit_bc_pre(emit, -1);
    a5f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a5f8:	6878      	ldr	r0, [r7, #4]
    a5fa:	f7ff fe5b 	bl	a2b4 <emit_bc_pre>
        emit_write_bytecode_byte(emit, MP_BC_LOAD_SUBSCR);
    a5fe:	2121      	movs	r1, #33	; 0x21
    a600:	6878      	ldr	r0, [r7, #4]
    a602:	f7ff fafb 	bl	9bfc <emit_write_bytecode_byte>
            mp_emit_bc_rot_three(emit);
        }
        emit_bc_pre(emit, -3);
        emit_write_bytecode_byte(emit, MP_BC_STORE_SUBSCR);
    }
}
    a606:	e011      	b.n	a62c <mp_emit_bc_subscr+0x48>
        if (kind == MP_EMIT_SUBSCR_DELETE) {
    a608:	683b      	ldr	r3, [r7, #0]
    a60a:	2b02      	cmp	r3, #2
    a60c:	d105      	bne.n	a61a <mp_emit_bc_subscr+0x36>
            mp_emit_bc_load_null(emit);
    a60e:	6878      	ldr	r0, [r7, #4]
    a610:	f7ff ff6a 	bl	a4e8 <mp_emit_bc_load_null>
            mp_emit_bc_rot_three(emit);
    a614:	6878      	ldr	r0, [r7, #4]
    a616:	f000 f8e5 	bl	a7e4 <mp_emit_bc_rot_three>
        emit_bc_pre(emit, -3);
    a61a:	f06f 0102 	mvn.w	r1, #2
    a61e:	6878      	ldr	r0, [r7, #4]
    a620:	f7ff fe48 	bl	a2b4 <emit_bc_pre>
        emit_write_bytecode_byte(emit, MP_BC_STORE_SUBSCR);
    a624:	2127      	movs	r1, #39	; 0x27
    a626:	6878      	ldr	r0, [r7, #4]
    a628:	f7ff fae8 	bl	9bfc <emit_write_bytecode_byte>
}
    a62c:	bf00      	nop
    a62e:	3708      	adds	r7, #8
    a630:	46bd      	mov	sp, r7
    a632:	bd80      	pop	{r7, pc}

0000a634 <mp_emit_bc_attr>:

void mp_emit_bc_attr(emit_t *emit, qstr qst, int kind) {
    a634:	b580      	push	{r7, lr}
    a636:	b084      	sub	sp, #16
    a638:	af00      	add	r7, sp, #0
    a63a:	60f8      	str	r0, [r7, #12]
    a63c:	60b9      	str	r1, [r7, #8]
    a63e:	607a      	str	r2, [r7, #4]
    if (kind == MP_EMIT_ATTR_LOAD) {
    a640:	687b      	ldr	r3, [r7, #4]
    a642:	2b00      	cmp	r3, #0
    a644:	d109      	bne.n	a65a <mp_emit_bc_attr+0x26>
        emit_bc_pre(emit, 0);
    a646:	2100      	movs	r1, #0
    a648:	68f8      	ldr	r0, [r7, #12]
    a64a:	f7ff fe33 	bl	a2b4 <emit_bc_pre>
        emit_write_bytecode_byte_qstr(emit, MP_BC_LOAD_ATTR, qst);
    a64e:	68ba      	ldr	r2, [r7, #8]
    a650:	211d      	movs	r1, #29
    a652:	68f8      	ldr	r0, [r7, #12]
    a654:	f7ff fb9c 	bl	9d90 <emit_write_bytecode_byte_qstr>
        emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_ATTR, qst);
    }
    if (MICROPY_OPT_CACHE_MAP_LOOKUP_IN_BYTECODE_DYNAMIC) {
        emit_write_bytecode_byte(emit, 0);
    }
}
    a658:	e012      	b.n	a680 <mp_emit_bc_attr+0x4c>
        if (kind == MP_EMIT_ATTR_DELETE) {
    a65a:	687b      	ldr	r3, [r7, #4]
    a65c:	2b02      	cmp	r3, #2
    a65e:	d105      	bne.n	a66c <mp_emit_bc_attr+0x38>
            mp_emit_bc_load_null(emit);
    a660:	68f8      	ldr	r0, [r7, #12]
    a662:	f7ff ff41 	bl	a4e8 <mp_emit_bc_load_null>
            mp_emit_bc_rot_two(emit);
    a666:	68f8      	ldr	r0, [r7, #12]
    a668:	f000 f8ac 	bl	a7c4 <mp_emit_bc_rot_two>
        emit_bc_pre(emit, -2);
    a66c:	f06f 0101 	mvn.w	r1, #1
    a670:	68f8      	ldr	r0, [r7, #12]
    a672:	f7ff fe1f 	bl	a2b4 <emit_bc_pre>
        emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_ATTR, qst);
    a676:	68ba      	ldr	r2, [r7, #8]
    a678:	2126      	movs	r1, #38	; 0x26
    a67a:	68f8      	ldr	r0, [r7, #12]
    a67c:	f7ff fb88 	bl	9d90 <emit_write_bytecode_byte_qstr>
}
    a680:	bf00      	nop
    a682:	3710      	adds	r7, #16
    a684:	46bd      	mov	sp, r7
    a686:	bd80      	pop	{r7, pc}

0000a688 <mp_emit_bc_store_local>:

void mp_emit_bc_store_local(emit_t *emit, qstr qst, mp_uint_t local_num, int kind) {
    a688:	b580      	push	{r7, lr}
    a68a:	b084      	sub	sp, #16
    a68c:	af00      	add	r7, sp, #0
    a68e:	60f8      	str	r0, [r7, #12]
    a690:	60b9      	str	r1, [r7, #8]
    a692:	607a      	str	r2, [r7, #4]
    a694:	603b      	str	r3, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_STORE_FAST_N + MP_EMIT_IDOP_LOCAL_FAST == MP_BC_STORE_FAST_N);
    MP_STATIC_ASSERT(MP_BC_STORE_FAST_N + MP_EMIT_IDOP_LOCAL_DEREF == MP_BC_STORE_DEREF);
    (void)qst;
    emit_bc_pre(emit, -1);
    a696:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a69a:	68f8      	ldr	r0, [r7, #12]
    a69c:	f7ff fe0a 	bl	a2b4 <emit_bc_pre>
    if (kind == MP_EMIT_IDOP_LOCAL_FAST && local_num <= 15) {
    a6a0:	683b      	ldr	r3, [r7, #0]
    a6a2:	2b00      	cmp	r3, #0
    a6a4:	d10b      	bne.n	a6be <mp_emit_bc_store_local+0x36>
    a6a6:	687b      	ldr	r3, [r7, #4]
    a6a8:	2b0f      	cmp	r3, #15
    a6aa:	d808      	bhi.n	a6be <mp_emit_bc_store_local+0x36>
        emit_write_bytecode_byte(emit, MP_BC_STORE_FAST_MULTI + local_num);
    a6ac:	687b      	ldr	r3, [r7, #4]
    a6ae:	b2db      	uxtb	r3, r3
    a6b0:	3b40      	subs	r3, #64	; 0x40
    a6b2:	b2db      	uxtb	r3, r3
    a6b4:	4619      	mov	r1, r3
    a6b6:	68f8      	ldr	r0, [r7, #12]
    a6b8:	f7ff faa0 	bl	9bfc <emit_write_bytecode_byte>
    a6bc:	e008      	b.n	a6d0 <mp_emit_bc_store_local+0x48>
    } else {
        emit_write_bytecode_byte_uint(emit, MP_BC_STORE_FAST_N + kind, local_num);
    a6be:	683b      	ldr	r3, [r7, #0]
    a6c0:	b2db      	uxtb	r3, r3
    a6c2:	3322      	adds	r3, #34	; 0x22
    a6c4:	b2db      	uxtb	r3, r3
    a6c6:	687a      	ldr	r2, [r7, #4]
    a6c8:	4619      	mov	r1, r3
    a6ca:	68f8      	ldr	r0, [r7, #12]
    a6cc:	f7ff fb2a 	bl	9d24 <emit_write_bytecode_byte_uint>
    }
}
    a6d0:	bf00      	nop
    a6d2:	3710      	adds	r7, #16
    a6d4:	46bd      	mov	sp, r7
    a6d6:	bd80      	pop	{r7, pc}

0000a6d8 <mp_emit_bc_store_global>:

void mp_emit_bc_store_global(emit_t *emit, qstr qst, int kind) {
    a6d8:	b580      	push	{r7, lr}
    a6da:	b084      	sub	sp, #16
    a6dc:	af00      	add	r7, sp, #0
    a6de:	60f8      	str	r0, [r7, #12]
    a6e0:	60b9      	str	r1, [r7, #8]
    a6e2:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_STORE_NAME + MP_EMIT_IDOP_GLOBAL_NAME == MP_BC_STORE_NAME);
    MP_STATIC_ASSERT(MP_BC_STORE_NAME + MP_EMIT_IDOP_GLOBAL_GLOBAL == MP_BC_STORE_GLOBAL);
    emit_bc_pre(emit, -1);
    a6e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a6e8:	68f8      	ldr	r0, [r7, #12]
    a6ea:	f7ff fde3 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_STORE_NAME + kind, qst);
    a6ee:	687b      	ldr	r3, [r7, #4]
    a6f0:	b2db      	uxtb	r3, r3
    a6f2:	3324      	adds	r3, #36	; 0x24
    a6f4:	b2db      	uxtb	r3, r3
    a6f6:	68ba      	ldr	r2, [r7, #8]
    a6f8:	4619      	mov	r1, r3
    a6fa:	68f8      	ldr	r0, [r7, #12]
    a6fc:	f7ff fb48 	bl	9d90 <emit_write_bytecode_byte_qstr>
}
    a700:	bf00      	nop
    a702:	3710      	adds	r7, #16
    a704:	46bd      	mov	sp, r7
    a706:	bd80      	pop	{r7, pc}

0000a708 <mp_emit_bc_delete_local>:

void mp_emit_bc_delete_local(emit_t *emit, qstr qst, mp_uint_t local_num, int kind) {
    a708:	b580      	push	{r7, lr}
    a70a:	b084      	sub	sp, #16
    a70c:	af00      	add	r7, sp, #0
    a70e:	60f8      	str	r0, [r7, #12]
    a710:	60b9      	str	r1, [r7, #8]
    a712:	607a      	str	r2, [r7, #4]
    a714:	603b      	str	r3, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_DELETE_FAST + MP_EMIT_IDOP_LOCAL_FAST == MP_BC_DELETE_FAST);
    MP_STATIC_ASSERT(MP_BC_DELETE_FAST + MP_EMIT_IDOP_LOCAL_DEREF == MP_BC_DELETE_DEREF);
    (void)qst;
    emit_write_bytecode_byte_uint(emit, MP_BC_DELETE_FAST + kind, local_num);
    a716:	683b      	ldr	r3, [r7, #0]
    a718:	b2db      	uxtb	r3, r3
    a71a:	3328      	adds	r3, #40	; 0x28
    a71c:	b2db      	uxtb	r3, r3
    a71e:	687a      	ldr	r2, [r7, #4]
    a720:	4619      	mov	r1, r3
    a722:	68f8      	ldr	r0, [r7, #12]
    a724:	f7ff fafe 	bl	9d24 <emit_write_bytecode_byte_uint>
}
    a728:	bf00      	nop
    a72a:	3710      	adds	r7, #16
    a72c:	46bd      	mov	sp, r7
    a72e:	bd80      	pop	{r7, pc}

0000a730 <mp_emit_bc_delete_global>:

void mp_emit_bc_delete_global(emit_t *emit, qstr qst, int kind) {
    a730:	b580      	push	{r7, lr}
    a732:	b084      	sub	sp, #16
    a734:	af00      	add	r7, sp, #0
    a736:	60f8      	str	r0, [r7, #12]
    a738:	60b9      	str	r1, [r7, #8]
    a73a:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_DELETE_NAME + MP_EMIT_IDOP_GLOBAL_NAME == MP_BC_DELETE_NAME);
    MP_STATIC_ASSERT(MP_BC_DELETE_NAME + MP_EMIT_IDOP_GLOBAL_GLOBAL == MP_BC_DELETE_GLOBAL);
    emit_bc_pre(emit, 0);
    a73c:	2100      	movs	r1, #0
    a73e:	68f8      	ldr	r0, [r7, #12]
    a740:	f7ff fdb8 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte_qstr(emit, MP_BC_DELETE_NAME + kind, qst);
    a744:	687b      	ldr	r3, [r7, #4]
    a746:	b2db      	uxtb	r3, r3
    a748:	332a      	adds	r3, #42	; 0x2a
    a74a:	b2db      	uxtb	r3, r3
    a74c:	68ba      	ldr	r2, [r7, #8]
    a74e:	4619      	mov	r1, r3
    a750:	68f8      	ldr	r0, [r7, #12]
    a752:	f7ff fb1d 	bl	9d90 <emit_write_bytecode_byte_qstr>
}
    a756:	bf00      	nop
    a758:	3710      	adds	r7, #16
    a75a:	46bd      	mov	sp, r7
    a75c:	bd80      	pop	{r7, pc}
    a75e:	bf00      	nop

0000a760 <mp_emit_bc_dup_top>:

void mp_emit_bc_dup_top(emit_t *emit) {
    a760:	b580      	push	{r7, lr}
    a762:	b082      	sub	sp, #8
    a764:	af00      	add	r7, sp, #0
    a766:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 1);
    a768:	2101      	movs	r1, #1
    a76a:	6878      	ldr	r0, [r7, #4]
    a76c:	f7ff fda2 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_DUP_TOP);
    a770:	2130      	movs	r1, #48	; 0x30
    a772:	6878      	ldr	r0, [r7, #4]
    a774:	f7ff fa42 	bl	9bfc <emit_write_bytecode_byte>
}
    a778:	bf00      	nop
    a77a:	3708      	adds	r7, #8
    a77c:	46bd      	mov	sp, r7
    a77e:	bd80      	pop	{r7, pc}

0000a780 <mp_emit_bc_dup_top_two>:

void mp_emit_bc_dup_top_two(emit_t *emit) {
    a780:	b580      	push	{r7, lr}
    a782:	b082      	sub	sp, #8
    a784:	af00      	add	r7, sp, #0
    a786:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 2);
    a788:	2102      	movs	r1, #2
    a78a:	6878      	ldr	r0, [r7, #4]
    a78c:	f7ff fd92 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_DUP_TOP_TWO);
    a790:	2131      	movs	r1, #49	; 0x31
    a792:	6878      	ldr	r0, [r7, #4]
    a794:	f7ff fa32 	bl	9bfc <emit_write_bytecode_byte>
}
    a798:	bf00      	nop
    a79a:	3708      	adds	r7, #8
    a79c:	46bd      	mov	sp, r7
    a79e:	bd80      	pop	{r7, pc}

0000a7a0 <mp_emit_bc_pop_top>:

void mp_emit_bc_pop_top(emit_t *emit) {
    a7a0:	b580      	push	{r7, lr}
    a7a2:	b082      	sub	sp, #8
    a7a4:	af00      	add	r7, sp, #0
    a7a6:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    a7a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a7ac:	6878      	ldr	r0, [r7, #4]
    a7ae:	f7ff fd81 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    a7b2:	2132      	movs	r1, #50	; 0x32
    a7b4:	6878      	ldr	r0, [r7, #4]
    a7b6:	f7ff fa21 	bl	9bfc <emit_write_bytecode_byte>
}
    a7ba:	bf00      	nop
    a7bc:	3708      	adds	r7, #8
    a7be:	46bd      	mov	sp, r7
    a7c0:	bd80      	pop	{r7, pc}
    a7c2:	bf00      	nop

0000a7c4 <mp_emit_bc_rot_two>:

void mp_emit_bc_rot_two(emit_t *emit) {
    a7c4:	b580      	push	{r7, lr}
    a7c6:	b082      	sub	sp, #8
    a7c8:	af00      	add	r7, sp, #0
    a7ca:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a7cc:	2100      	movs	r1, #0
    a7ce:	6878      	ldr	r0, [r7, #4]
    a7d0:	f7ff fd70 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_ROT_TWO);
    a7d4:	2133      	movs	r1, #51	; 0x33
    a7d6:	6878      	ldr	r0, [r7, #4]
    a7d8:	f7ff fa10 	bl	9bfc <emit_write_bytecode_byte>
}
    a7dc:	bf00      	nop
    a7de:	3708      	adds	r7, #8
    a7e0:	46bd      	mov	sp, r7
    a7e2:	bd80      	pop	{r7, pc}

0000a7e4 <mp_emit_bc_rot_three>:

void mp_emit_bc_rot_three(emit_t *emit) {
    a7e4:	b580      	push	{r7, lr}
    a7e6:	b082      	sub	sp, #8
    a7e8:	af00      	add	r7, sp, #0
    a7ea:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    a7ec:	2100      	movs	r1, #0
    a7ee:	6878      	ldr	r0, [r7, #4]
    a7f0:	f7ff fd60 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_ROT_THREE);
    a7f4:	2134      	movs	r1, #52	; 0x34
    a7f6:	6878      	ldr	r0, [r7, #4]
    a7f8:	f7ff fa00 	bl	9bfc <emit_write_bytecode_byte>
}
    a7fc:	bf00      	nop
    a7fe:	3708      	adds	r7, #8
    a800:	46bd      	mov	sp, r7
    a802:	bd80      	pop	{r7, pc}

0000a804 <mp_emit_bc_jump>:

void mp_emit_bc_jump(emit_t *emit, mp_uint_t label) {
    a804:	b580      	push	{r7, lr}
    a806:	b082      	sub	sp, #8
    a808:	af00      	add	r7, sp, #0
    a80a:	6078      	str	r0, [r7, #4]
    a80c:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    a80e:	2100      	movs	r1, #0
    a810:	6878      	ldr	r0, [r7, #4]
    a812:	f7ff fd4f 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP, label);
    a816:	683a      	ldr	r2, [r7, #0]
    a818:	2135      	movs	r1, #53	; 0x35
    a81a:	6878      	ldr	r0, [r7, #4]
    a81c:	f7ff fb5a 	bl	9ed4 <emit_write_bytecode_byte_signed_label>
}
    a820:	bf00      	nop
    a822:	3708      	adds	r7, #8
    a824:	46bd      	mov	sp, r7
    a826:	bd80      	pop	{r7, pc}

0000a828 <mp_emit_bc_pop_jump_if>:

void mp_emit_bc_pop_jump_if(emit_t *emit, bool cond, mp_uint_t label) {
    a828:	b580      	push	{r7, lr}
    a82a:	b084      	sub	sp, #16
    a82c:	af00      	add	r7, sp, #0
    a82e:	60f8      	str	r0, [r7, #12]
    a830:	460b      	mov	r3, r1
    a832:	607a      	str	r2, [r7, #4]
    a834:	72fb      	strb	r3, [r7, #11]
    emit_bc_pre(emit, -1);
    a836:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a83a:	68f8      	ldr	r0, [r7, #12]
    a83c:	f7ff fd3a 	bl	a2b4 <emit_bc_pre>
    if (cond) {
    a840:	7afb      	ldrb	r3, [r7, #11]
    a842:	2b00      	cmp	r3, #0
    a844:	d005      	beq.n	a852 <mp_emit_bc_pop_jump_if+0x2a>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_TRUE, label);
    a846:	687a      	ldr	r2, [r7, #4]
    a848:	2136      	movs	r1, #54	; 0x36
    a84a:	68f8      	ldr	r0, [r7, #12]
    a84c:	f7ff fb42 	bl	9ed4 <emit_write_bytecode_byte_signed_label>
    } else {
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_FALSE, label);
    }
}
    a850:	e004      	b.n	a85c <mp_emit_bc_pop_jump_if+0x34>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_POP_JUMP_IF_FALSE, label);
    a852:	687a      	ldr	r2, [r7, #4]
    a854:	2137      	movs	r1, #55	; 0x37
    a856:	68f8      	ldr	r0, [r7, #12]
    a858:	f7ff fb3c 	bl	9ed4 <emit_write_bytecode_byte_signed_label>
}
    a85c:	bf00      	nop
    a85e:	3710      	adds	r7, #16
    a860:	46bd      	mov	sp, r7
    a862:	bd80      	pop	{r7, pc}

0000a864 <mp_emit_bc_jump_if_or_pop>:

void mp_emit_bc_jump_if_or_pop(emit_t *emit, bool cond, mp_uint_t label) {
    a864:	b580      	push	{r7, lr}
    a866:	b084      	sub	sp, #16
    a868:	af00      	add	r7, sp, #0
    a86a:	60f8      	str	r0, [r7, #12]
    a86c:	460b      	mov	r3, r1
    a86e:	607a      	str	r2, [r7, #4]
    a870:	72fb      	strb	r3, [r7, #11]
    emit_bc_pre(emit, -1);
    a872:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a876:	68f8      	ldr	r0, [r7, #12]
    a878:	f7ff fd1c 	bl	a2b4 <emit_bc_pre>
    if (cond) {
    a87c:	7afb      	ldrb	r3, [r7, #11]
    a87e:	2b00      	cmp	r3, #0
    a880:	d005      	beq.n	a88e <mp_emit_bc_jump_if_or_pop+0x2a>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_TRUE_OR_POP, label);
    a882:	687a      	ldr	r2, [r7, #4]
    a884:	2138      	movs	r1, #56	; 0x38
    a886:	68f8      	ldr	r0, [r7, #12]
    a888:	f7ff fb24 	bl	9ed4 <emit_write_bytecode_byte_signed_label>
    } else {
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_FALSE_OR_POP, label);
    }
}
    a88c:	e004      	b.n	a898 <mp_emit_bc_jump_if_or_pop+0x34>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP_IF_FALSE_OR_POP, label);
    a88e:	687a      	ldr	r2, [r7, #4]
    a890:	2139      	movs	r1, #57	; 0x39
    a892:	68f8      	ldr	r0, [r7, #12]
    a894:	f7ff fb1e 	bl	9ed4 <emit_write_bytecode_byte_signed_label>
}
    a898:	bf00      	nop
    a89a:	3710      	adds	r7, #16
    a89c:	46bd      	mov	sp, r7
    a89e:	bd80      	pop	{r7, pc}

0000a8a0 <mp_emit_bc_unwind_jump>:

void mp_emit_bc_unwind_jump(emit_t *emit, mp_uint_t label, mp_uint_t except_depth) {
    a8a0:	b580      	push	{r7, lr}
    a8a2:	b086      	sub	sp, #24
    a8a4:	af00      	add	r7, sp, #0
    a8a6:	60f8      	str	r0, [r7, #12]
    a8a8:	60b9      	str	r1, [r7, #8]
    a8aa:	607a      	str	r2, [r7, #4]
    if (except_depth == 0) {
    a8ac:	687b      	ldr	r3, [r7, #4]
    a8ae:	2b00      	cmp	r3, #0
    a8b0:	d122      	bne.n	a8f8 <mp_emit_bc_unwind_jump+0x58>
        emit_bc_pre(emit, 0);
    a8b2:	2100      	movs	r1, #0
    a8b4:	68f8      	ldr	r0, [r7, #12]
    a8b6:	f7ff fcfd 	bl	a2b4 <emit_bc_pre>
        if (label & MP_EMIT_BREAK_FROM_FOR) {
    a8ba:	68bb      	ldr	r3, [r7, #8]
    a8bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    a8c0:	2b00      	cmp	r3, #0
    a8c2:	d010      	beq.n	a8e6 <mp_emit_bc_unwind_jump+0x46>
            // need to pop the iterator if we are breaking out of a for loop
            emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    a8c4:	2132      	movs	r1, #50	; 0x32
    a8c6:	68f8      	ldr	r0, [r7, #12]
    a8c8:	f7ff f998 	bl	9bfc <emit_write_bytecode_byte>
            // also pop the iter_buf
            for (size_t i = 0; i < MP_OBJ_ITER_BUF_NSLOTS - 1; ++i) {
    a8cc:	2300      	movs	r3, #0
    a8ce:	617b      	str	r3, [r7, #20]
    a8d0:	e006      	b.n	a8e0 <mp_emit_bc_unwind_jump+0x40>
                emit_write_bytecode_byte(emit, MP_BC_POP_TOP);
    a8d2:	2132      	movs	r1, #50	; 0x32
    a8d4:	68f8      	ldr	r0, [r7, #12]
    a8d6:	f7ff f991 	bl	9bfc <emit_write_bytecode_byte>
            for (size_t i = 0; i < MP_OBJ_ITER_BUF_NSLOTS - 1; ++i) {
    a8da:	697b      	ldr	r3, [r7, #20]
    a8dc:	3301      	adds	r3, #1
    a8de:	617b      	str	r3, [r7, #20]
    a8e0:	697b      	ldr	r3, [r7, #20]
    a8e2:	2b02      	cmp	r3, #2
    a8e4:	d9f5      	bls.n	a8d2 <mp_emit_bc_unwind_jump+0x32>
            }
        }
        emit_write_bytecode_byte_signed_label(emit, MP_BC_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
    a8e6:	68bb      	ldr	r3, [r7, #8]
    a8e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    a8ec:	461a      	mov	r2, r3
    a8ee:	2135      	movs	r1, #53	; 0x35
    a8f0:	68f8      	ldr	r0, [r7, #12]
    a8f2:	f7ff faef 	bl	9ed4 <emit_write_bytecode_byte_signed_label>
    } else {
        emit_write_bytecode_byte_signed_label(emit, MP_BC_UNWIND_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
        emit_write_bytecode_byte(emit, ((label & MP_EMIT_BREAK_FROM_FOR) ? 0x80 : 0) | except_depth);
    }
}
    a8f6:	e017      	b.n	a928 <mp_emit_bc_unwind_jump+0x88>
        emit_write_bytecode_byte_signed_label(emit, MP_BC_UNWIND_JUMP, label & ~MP_EMIT_BREAK_FROM_FOR);
    a8f8:	68bb      	ldr	r3, [r7, #8]
    a8fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    a8fe:	461a      	mov	r2, r3
    a900:	2146      	movs	r1, #70	; 0x46
    a902:	68f8      	ldr	r0, [r7, #12]
    a904:	f7ff fae6 	bl	9ed4 <emit_write_bytecode_byte_signed_label>
        emit_write_bytecode_byte(emit, ((label & MP_EMIT_BREAK_FROM_FOR) ? 0x80 : 0) | except_depth);
    a908:	68bb      	ldr	r3, [r7, #8]
    a90a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    a90e:	2b00      	cmp	r3, #0
    a910:	d001      	beq.n	a916 <mp_emit_bc_unwind_jump+0x76>
    a912:	2280      	movs	r2, #128	; 0x80
    a914:	e000      	b.n	a918 <mp_emit_bc_unwind_jump+0x78>
    a916:	2200      	movs	r2, #0
    a918:	687b      	ldr	r3, [r7, #4]
    a91a:	b2db      	uxtb	r3, r3
    a91c:	4313      	orrs	r3, r2
    a91e:	b2db      	uxtb	r3, r3
    a920:	4619      	mov	r1, r3
    a922:	68f8      	ldr	r0, [r7, #12]
    a924:	f7ff f96a 	bl	9bfc <emit_write_bytecode_byte>
}
    a928:	bf00      	nop
    a92a:	3718      	adds	r7, #24
    a92c:	46bd      	mov	sp, r7
    a92e:	bd80      	pop	{r7, pc}

0000a930 <mp_emit_bc_setup_block>:

void mp_emit_bc_setup_block(emit_t *emit, mp_uint_t label, int kind) {
    a930:	b580      	push	{r7, lr}
    a932:	b084      	sub	sp, #16
    a934:	af00      	add	r7, sp, #0
    a936:	60f8      	str	r0, [r7, #12]
    a938:	60b9      	str	r1, [r7, #8]
    a93a:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_SETUP_WITH + MP_EMIT_SETUP_BLOCK_WITH == MP_BC_SETUP_WITH);
    MP_STATIC_ASSERT(MP_BC_SETUP_WITH + MP_EMIT_SETUP_BLOCK_EXCEPT == MP_BC_SETUP_EXCEPT);
    MP_STATIC_ASSERT(MP_BC_SETUP_WITH + MP_EMIT_SETUP_BLOCK_FINALLY == MP_BC_SETUP_FINALLY);
    if (kind == MP_EMIT_SETUP_BLOCK_WITH) {
    a93c:	687b      	ldr	r3, [r7, #4]
    a93e:	2b00      	cmp	r3, #0
    a940:	d104      	bne.n	a94c <mp_emit_bc_setup_block+0x1c>
    // The SETUP_WITH opcode pops ctx_mgr from the top of the stack
    // and then pushes 3 entries: __exit__, ctx_mgr, as_value.
        emit_bc_pre(emit, 2);
    a942:	2102      	movs	r1, #2
    a944:	68f8      	ldr	r0, [r7, #12]
    a946:	f7ff fcb5 	bl	a2b4 <emit_bc_pre>
    a94a:	e003      	b.n	a954 <mp_emit_bc_setup_block+0x24>
    } else {
        emit_bc_pre(emit, 0);
    a94c:	2100      	movs	r1, #0
    a94e:	68f8      	ldr	r0, [r7, #12]
    a950:	f7ff fcb0 	bl	a2b4 <emit_bc_pre>
    }
    emit_write_bytecode_byte_unsigned_label(emit, MP_BC_SETUP_WITH + kind, label);
    a954:	687b      	ldr	r3, [r7, #4]
    a956:	b2db      	uxtb	r3, r3
    a958:	333d      	adds	r3, #61	; 0x3d
    a95a:	b2db      	uxtb	r3, r3
    a95c:	68ba      	ldr	r2, [r7, #8]
    a95e:	4619      	mov	r1, r3
    a960:	68f8      	ldr	r0, [r7, #12]
    a962:	f7ff fa87 	bl	9e74 <emit_write_bytecode_byte_unsigned_label>
}
    a966:	bf00      	nop
    a968:	3710      	adds	r7, #16
    a96a:	46bd      	mov	sp, r7
    a96c:	bd80      	pop	{r7, pc}
    a96e:	bf00      	nop

0000a970 <mp_emit_bc_with_cleanup>:

void mp_emit_bc_with_cleanup(emit_t *emit, mp_uint_t label) {
    a970:	b580      	push	{r7, lr}
    a972:	b082      	sub	sp, #8
    a974:	af00      	add	r7, sp, #0
    a976:	6078      	str	r0, [r7, #4]
    a978:	6039      	str	r1, [r7, #0]
    mp_emit_bc_pop_block(emit);
    a97a:	6878      	ldr	r0, [r7, #4]
    a97c:	f000 f86a 	bl	aa54 <mp_emit_bc_pop_block>
    mp_emit_bc_load_const_tok(emit, MP_TOKEN_KW_NONE);
    a980:	210e      	movs	r1, #14
    a982:	6878      	ldr	r0, [r7, #4]
    a984:	f7ff fd2e 	bl	a3e4 <mp_emit_bc_load_const_tok>
    mp_emit_bc_label_assign(emit, label);
    a988:	6839      	ldr	r1, [r7, #0]
    a98a:	6878      	ldr	r0, [r7, #4]
    a98c:	f7ff fcac 	bl	a2e8 <mp_emit_bc_label_assign>
    emit_bc_pre(emit, 2); // ensure we have enough stack space to call the __exit__ method
    a990:	2102      	movs	r1, #2
    a992:	6878      	ldr	r0, [r7, #4]
    a994:	f7ff fc8e 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_WITH_CLEANUP);
    a998:	213e      	movs	r1, #62	; 0x3e
    a99a:	6878      	ldr	r0, [r7, #4]
    a99c:	f7ff f92e 	bl	9bfc <emit_write_bytecode_byte>
    emit_bc_pre(emit, -4); // cancel the 2 above, plus the 2 from mp_emit_bc_setup_block(MP_EMIT_SETUP_BLOCK_WITH)
    a9a0:	f06f 0103 	mvn.w	r1, #3
    a9a4:	6878      	ldr	r0, [r7, #4]
    a9a6:	f7ff fc85 	bl	a2b4 <emit_bc_pre>
}
    a9aa:	bf00      	nop
    a9ac:	3708      	adds	r7, #8
    a9ae:	46bd      	mov	sp, r7
    a9b0:	bd80      	pop	{r7, pc}
    a9b2:	bf00      	nop

0000a9b4 <mp_emit_bc_end_finally>:

void mp_emit_bc_end_finally(emit_t *emit) {
    a9b4:	b580      	push	{r7, lr}
    a9b6:	b082      	sub	sp, #8
    a9b8:	af00      	add	r7, sp, #0
    a9ba:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    a9bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a9c0:	6878      	ldr	r0, [r7, #4]
    a9c2:	f7ff fc77 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_END_FINALLY);
    a9c6:	2141      	movs	r1, #65	; 0x41
    a9c8:	6878      	ldr	r0, [r7, #4]
    a9ca:	f7ff f917 	bl	9bfc <emit_write_bytecode_byte>
}
    a9ce:	bf00      	nop
    a9d0:	3708      	adds	r7, #8
    a9d2:	46bd      	mov	sp, r7
    a9d4:	bd80      	pop	{r7, pc}
    a9d6:	bf00      	nop

0000a9d8 <mp_emit_bc_get_iter>:

void mp_emit_bc_get_iter(emit_t *emit, bool use_stack) {
    a9d8:	b580      	push	{r7, lr}
    a9da:	b082      	sub	sp, #8
    a9dc:	af00      	add	r7, sp, #0
    a9de:	6078      	str	r0, [r7, #4]
    a9e0:	460b      	mov	r3, r1
    a9e2:	70fb      	strb	r3, [r7, #3]
    emit_bc_pre(emit, use_stack ? MP_OBJ_ITER_BUF_NSLOTS - 1 : 0);
    a9e4:	78fb      	ldrb	r3, [r7, #3]
    a9e6:	2b00      	cmp	r3, #0
    a9e8:	d001      	beq.n	a9ee <mp_emit_bc_get_iter+0x16>
    a9ea:	2303      	movs	r3, #3
    a9ec:	e000      	b.n	a9f0 <mp_emit_bc_get_iter+0x18>
    a9ee:	2300      	movs	r3, #0
    a9f0:	4619      	mov	r1, r3
    a9f2:	6878      	ldr	r0, [r7, #4]
    a9f4:	f7ff fc5e 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte(emit, use_stack ? MP_BC_GET_ITER_STACK : MP_BC_GET_ITER);
    a9f8:	78fb      	ldrb	r3, [r7, #3]
    a9fa:	2b00      	cmp	r3, #0
    a9fc:	d001      	beq.n	aa02 <mp_emit_bc_get_iter+0x2a>
    a9fe:	2347      	movs	r3, #71	; 0x47
    aa00:	e000      	b.n	aa04 <mp_emit_bc_get_iter+0x2c>
    aa02:	2342      	movs	r3, #66	; 0x42
    aa04:	4619      	mov	r1, r3
    aa06:	6878      	ldr	r0, [r7, #4]
    aa08:	f7ff f8f8 	bl	9bfc <emit_write_bytecode_byte>
}
    aa0c:	bf00      	nop
    aa0e:	3708      	adds	r7, #8
    aa10:	46bd      	mov	sp, r7
    aa12:	bd80      	pop	{r7, pc}

0000aa14 <mp_emit_bc_for_iter>:

void mp_emit_bc_for_iter(emit_t *emit, mp_uint_t label) {
    aa14:	b580      	push	{r7, lr}
    aa16:	b082      	sub	sp, #8
    aa18:	af00      	add	r7, sp, #0
    aa1a:	6078      	str	r0, [r7, #4]
    aa1c:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 1);
    aa1e:	2101      	movs	r1, #1
    aa20:	6878      	ldr	r0, [r7, #4]
    aa22:	f7ff fc47 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte_unsigned_label(emit, MP_BC_FOR_ITER, label);
    aa26:	683a      	ldr	r2, [r7, #0]
    aa28:	2143      	movs	r1, #67	; 0x43
    aa2a:	6878      	ldr	r0, [r7, #4]
    aa2c:	f7ff fa22 	bl	9e74 <emit_write_bytecode_byte_unsigned_label>
}
    aa30:	bf00      	nop
    aa32:	3708      	adds	r7, #8
    aa34:	46bd      	mov	sp, r7
    aa36:	bd80      	pop	{r7, pc}

0000aa38 <mp_emit_bc_for_iter_end>:

void mp_emit_bc_for_iter_end(emit_t *emit) {
    aa38:	b580      	push	{r7, lr}
    aa3a:	b082      	sub	sp, #8
    aa3c:	af00      	add	r7, sp, #0
    aa3e:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -MP_OBJ_ITER_BUF_NSLOTS);
    aa40:	f06f 0103 	mvn.w	r1, #3
    aa44:	6878      	ldr	r0, [r7, #4]
    aa46:	f7ff fc35 	bl	a2b4 <emit_bc_pre>
}
    aa4a:	bf00      	nop
    aa4c:	3708      	adds	r7, #8
    aa4e:	46bd      	mov	sp, r7
    aa50:	bd80      	pop	{r7, pc}
    aa52:	bf00      	nop

0000aa54 <mp_emit_bc_pop_block>:

void mp_emit_bc_pop_block(emit_t *emit) {
    aa54:	b580      	push	{r7, lr}
    aa56:	b082      	sub	sp, #8
    aa58:	af00      	add	r7, sp, #0
    aa5a:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    aa5c:	2100      	movs	r1, #0
    aa5e:	6878      	ldr	r0, [r7, #4]
    aa60:	f7ff fc28 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_POP_BLOCK);
    aa64:	2144      	movs	r1, #68	; 0x44
    aa66:	6878      	ldr	r0, [r7, #4]
    aa68:	f7ff f8c8 	bl	9bfc <emit_write_bytecode_byte>
}
    aa6c:	bf00      	nop
    aa6e:	3708      	adds	r7, #8
    aa70:	46bd      	mov	sp, r7
    aa72:	bd80      	pop	{r7, pc}

0000aa74 <mp_emit_bc_pop_except>:

void mp_emit_bc_pop_except(emit_t *emit) {
    aa74:	b580      	push	{r7, lr}
    aa76:	b082      	sub	sp, #8
    aa78:	af00      	add	r7, sp, #0
    aa7a:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, 0);
    aa7c:	2100      	movs	r1, #0
    aa7e:	6878      	ldr	r0, [r7, #4]
    aa80:	f7ff fc18 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_POP_EXCEPT);
    aa84:	2145      	movs	r1, #69	; 0x45
    aa86:	6878      	ldr	r0, [r7, #4]
    aa88:	f7ff f8b8 	bl	9bfc <emit_write_bytecode_byte>
}
    aa8c:	bf00      	nop
    aa8e:	3708      	adds	r7, #8
    aa90:	46bd      	mov	sp, r7
    aa92:	bd80      	pop	{r7, pc}

0000aa94 <mp_emit_bc_unary_op>:

void mp_emit_bc_unary_op(emit_t *emit, mp_unary_op_t op) {
    aa94:	b580      	push	{r7, lr}
    aa96:	b082      	sub	sp, #8
    aa98:	af00      	add	r7, sp, #0
    aa9a:	6078      	str	r0, [r7, #4]
    aa9c:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, 0);
    aa9e:	2100      	movs	r1, #0
    aaa0:	6878      	ldr	r0, [r7, #4]
    aaa2:	f7ff fc07 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_UNARY_OP_MULTI + op);
    aaa6:	683b      	ldr	r3, [r7, #0]
    aaa8:	b2db      	uxtb	r3, r3
    aaaa:	3b30      	subs	r3, #48	; 0x30
    aaac:	b2db      	uxtb	r3, r3
    aaae:	4619      	mov	r1, r3
    aab0:	6878      	ldr	r0, [r7, #4]
    aab2:	f7ff f8a3 	bl	9bfc <emit_write_bytecode_byte>
}
    aab6:	bf00      	nop
    aab8:	3708      	adds	r7, #8
    aaba:	46bd      	mov	sp, r7
    aabc:	bd80      	pop	{r7, pc}
    aabe:	bf00      	nop

0000aac0 <mp_emit_bc_binary_op>:

void mp_emit_bc_binary_op(emit_t *emit, mp_binary_op_t op) {
    aac0:	b580      	push	{r7, lr}
    aac2:	b084      	sub	sp, #16
    aac4:	af00      	add	r7, sp, #0
    aac6:	6078      	str	r0, [r7, #4]
    aac8:	6039      	str	r1, [r7, #0]
    bool invert = false;
    aaca:	2300      	movs	r3, #0
    aacc:	73fb      	strb	r3, [r7, #15]
    if (op == MP_BINARY_OP_NOT_IN) {
    aace:	683b      	ldr	r3, [r7, #0]
    aad0:	2b24      	cmp	r3, #36	; 0x24
    aad2:	d104      	bne.n	aade <mp_emit_bc_binary_op+0x1e>
        invert = true;
    aad4:	2301      	movs	r3, #1
    aad6:	73fb      	strb	r3, [r7, #15]
        op = MP_BINARY_OP_IN;
    aad8:	2306      	movs	r3, #6
    aada:	603b      	str	r3, [r7, #0]
    aadc:	e006      	b.n	aaec <mp_emit_bc_binary_op+0x2c>
    } else if (op == MP_BINARY_OP_IS_NOT) {
    aade:	683b      	ldr	r3, [r7, #0]
    aae0:	2b25      	cmp	r3, #37	; 0x25
    aae2:	d103      	bne.n	aaec <mp_emit_bc_binary_op+0x2c>
        invert = true;
    aae4:	2301      	movs	r3, #1
    aae6:	73fb      	strb	r3, [r7, #15]
        op = MP_BINARY_OP_IS;
    aae8:	2307      	movs	r3, #7
    aaea:	603b      	str	r3, [r7, #0]
    }
    emit_bc_pre(emit, -1);
    aaec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    aaf0:	6878      	ldr	r0, [r7, #4]
    aaf2:	f7ff fbdf 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_BINARY_OP_MULTI + op);
    aaf6:	683b      	ldr	r3, [r7, #0]
    aaf8:	b2db      	uxtb	r3, r3
    aafa:	3b29      	subs	r3, #41	; 0x29
    aafc:	b2db      	uxtb	r3, r3
    aafe:	4619      	mov	r1, r3
    ab00:	6878      	ldr	r0, [r7, #4]
    ab02:	f7ff f87b 	bl	9bfc <emit_write_bytecode_byte>
    if (invert) {
    ab06:	7bfb      	ldrb	r3, [r7, #15]
    ab08:	2b00      	cmp	r3, #0
    ab0a:	d007      	beq.n	ab1c <mp_emit_bc_binary_op+0x5c>
        emit_bc_pre(emit, 0);
    ab0c:	2100      	movs	r1, #0
    ab0e:	6878      	ldr	r0, [r7, #4]
    ab10:	f7ff fbd0 	bl	a2b4 <emit_bc_pre>
        emit_write_bytecode_byte(emit, MP_BC_UNARY_OP_MULTI + MP_UNARY_OP_NOT);
    ab14:	21d3      	movs	r1, #211	; 0xd3
    ab16:	6878      	ldr	r0, [r7, #4]
    ab18:	f7ff f870 	bl	9bfc <emit_write_bytecode_byte>
    }
}
    ab1c:	bf00      	nop
    ab1e:	3710      	adds	r7, #16
    ab20:	46bd      	mov	sp, r7
    ab22:	bd80      	pop	{r7, pc}

0000ab24 <mp_emit_bc_build>:

void mp_emit_bc_build(emit_t *emit, mp_uint_t n_args, int kind) {
    ab24:	b580      	push	{r7, lr}
    ab26:	b084      	sub	sp, #16
    ab28:	af00      	add	r7, sp, #0
    ab2a:	60f8      	str	r0, [r7, #12]
    ab2c:	60b9      	str	r1, [r7, #8]
    ab2e:	607a      	str	r2, [r7, #4]
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_TUPLE == MP_BC_BUILD_TUPLE);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_LIST == MP_BC_BUILD_LIST);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_MAP == MP_BC_BUILD_MAP);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_SET == MP_BC_BUILD_SET);
    MP_STATIC_ASSERT(MP_BC_BUILD_TUPLE + MP_EMIT_BUILD_SLICE == MP_BC_BUILD_SLICE);
    if (kind == MP_EMIT_BUILD_MAP) {
    ab30:	687b      	ldr	r3, [r7, #4]
    ab32:	2b03      	cmp	r3, #3
    ab34:	d104      	bne.n	ab40 <mp_emit_bc_build+0x1c>
        emit_bc_pre(emit, 1);
    ab36:	2101      	movs	r1, #1
    ab38:	68f8      	ldr	r0, [r7, #12]
    ab3a:	f7ff fbbb 	bl	a2b4 <emit_bc_pre>
    ab3e:	e006      	b.n	ab4e <mp_emit_bc_build+0x2a>
    } else {
        emit_bc_pre(emit, 1 - n_args);
    ab40:	68bb      	ldr	r3, [r7, #8]
    ab42:	f1c3 0301 	rsb	r3, r3, #1
    ab46:	4619      	mov	r1, r3
    ab48:	68f8      	ldr	r0, [r7, #12]
    ab4a:	f7ff fbb3 	bl	a2b4 <emit_bc_pre>
    }
    emit_write_bytecode_byte_uint(emit, MP_BC_BUILD_TUPLE + kind, n_args);
    ab4e:	687b      	ldr	r3, [r7, #4]
    ab50:	b2db      	uxtb	r3, r3
    ab52:	3350      	adds	r3, #80	; 0x50
    ab54:	b2db      	uxtb	r3, r3
    ab56:	68ba      	ldr	r2, [r7, #8]
    ab58:	4619      	mov	r1, r3
    ab5a:	68f8      	ldr	r0, [r7, #12]
    ab5c:	f7ff f8e2 	bl	9d24 <emit_write_bytecode_byte_uint>
}
    ab60:	bf00      	nop
    ab62:	3710      	adds	r7, #16
    ab64:	46bd      	mov	sp, r7
    ab66:	bd80      	pop	{r7, pc}

0000ab68 <mp_emit_bc_store_map>:

void mp_emit_bc_store_map(emit_t *emit) {
    ab68:	b580      	push	{r7, lr}
    ab6a:	b082      	sub	sp, #8
    ab6c:	af00      	add	r7, sp, #0
    ab6e:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -2);
    ab70:	f06f 0101 	mvn.w	r1, #1
    ab74:	6878      	ldr	r0, [r7, #4]
    ab76:	f7ff fb9d 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte(emit, MP_BC_STORE_MAP);
    ab7a:	2154      	movs	r1, #84	; 0x54
    ab7c:	6878      	ldr	r0, [r7, #4]
    ab7e:	f7ff f83d 	bl	9bfc <emit_write_bytecode_byte>
}
    ab82:	bf00      	nop
    ab84:	3708      	adds	r7, #8
    ab86:	46bd      	mov	sp, r7
    ab88:	bd80      	pop	{r7, pc}
    ab8a:	bf00      	nop

0000ab8c <mp_emit_bc_store_comp>:

void mp_emit_bc_store_comp(emit_t *emit, scope_kind_t kind, mp_uint_t collection_stack_index) {
    ab8c:	b580      	push	{r7, lr}
    ab8e:	b086      	sub	sp, #24
    ab90:	af00      	add	r7, sp, #0
    ab92:	60f8      	str	r0, [r7, #12]
    ab94:	60b9      	str	r1, [r7, #8]
    ab96:	607a      	str	r2, [r7, #4]
    int t;
    int n;
    if (kind == SCOPE_LIST_COMP) {
    ab98:	68bb      	ldr	r3, [r7, #8]
    ab9a:	2b03      	cmp	r3, #3
    ab9c:	d104      	bne.n	aba8 <mp_emit_bc_store_comp+0x1c>
        n = 0;
    ab9e:	2300      	movs	r3, #0
    aba0:	613b      	str	r3, [r7, #16]
        t = 0;
    aba2:	2300      	movs	r3, #0
    aba4:	617b      	str	r3, [r7, #20]
    aba6:	e003      	b.n	abb0 <mp_emit_bc_store_comp+0x24>
    } else if (!MICROPY_PY_BUILTINS_SET || kind == SCOPE_DICT_COMP) {
        n = 1;
    aba8:	2301      	movs	r3, #1
    abaa:	613b      	str	r3, [r7, #16]
        t = 1;
    abac:	2301      	movs	r3, #1
    abae:	617b      	str	r3, [r7, #20]
    } else if (MICROPY_PY_BUILTINS_SET) {
        n = 0;
        t = 2;
    }
    emit_bc_pre(emit, -1 - n);
    abb0:	693b      	ldr	r3, [r7, #16]
    abb2:	43db      	mvns	r3, r3
    abb4:	4619      	mov	r1, r3
    abb6:	68f8      	ldr	r0, [r7, #12]
    abb8:	f7ff fb7c 	bl	a2b4 <emit_bc_pre>
    // the lower 2 bits of the opcode argument indicate the collection type
    emit_write_bytecode_byte_uint(emit, MP_BC_STORE_COMP, ((collection_stack_index + n) << 2) | t);
    abbc:	693a      	ldr	r2, [r7, #16]
    abbe:	687b      	ldr	r3, [r7, #4]
    abc0:	4413      	add	r3, r2
    abc2:	009a      	lsls	r2, r3, #2
    abc4:	697b      	ldr	r3, [r7, #20]
    abc6:	4313      	orrs	r3, r2
    abc8:	461a      	mov	r2, r3
    abca:	2157      	movs	r1, #87	; 0x57
    abcc:	68f8      	ldr	r0, [r7, #12]
    abce:	f7ff f8a9 	bl	9d24 <emit_write_bytecode_byte_uint>
}
    abd2:	bf00      	nop
    abd4:	3718      	adds	r7, #24
    abd6:	46bd      	mov	sp, r7
    abd8:	bd80      	pop	{r7, pc}
    abda:	bf00      	nop

0000abdc <mp_emit_bc_unpack_sequence>:

void mp_emit_bc_unpack_sequence(emit_t *emit, mp_uint_t n_args) {
    abdc:	b580      	push	{r7, lr}
    abde:	b082      	sub	sp, #8
    abe0:	af00      	add	r7, sp, #0
    abe2:	6078      	str	r0, [r7, #4]
    abe4:	6039      	str	r1, [r7, #0]
    emit_bc_pre(emit, -1 + n_args);
    abe6:	683b      	ldr	r3, [r7, #0]
    abe8:	3b01      	subs	r3, #1
    abea:	4619      	mov	r1, r3
    abec:	6878      	ldr	r0, [r7, #4]
    abee:	f7ff fb61 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte_uint(emit, MP_BC_UNPACK_SEQUENCE, n_args);
    abf2:	683a      	ldr	r2, [r7, #0]
    abf4:	2159      	movs	r1, #89	; 0x59
    abf6:	6878      	ldr	r0, [r7, #4]
    abf8:	f7ff f894 	bl	9d24 <emit_write_bytecode_byte_uint>
}
    abfc:	bf00      	nop
    abfe:	3708      	adds	r7, #8
    ac00:	46bd      	mov	sp, r7
    ac02:	bd80      	pop	{r7, pc}

0000ac04 <mp_emit_bc_unpack_ex>:

void mp_emit_bc_unpack_ex(emit_t *emit, mp_uint_t n_left, mp_uint_t n_right) {
    ac04:	b580      	push	{r7, lr}
    ac06:	b084      	sub	sp, #16
    ac08:	af00      	add	r7, sp, #0
    ac0a:	60f8      	str	r0, [r7, #12]
    ac0c:	60b9      	str	r1, [r7, #8]
    ac0e:	607a      	str	r2, [r7, #4]
    emit_bc_pre(emit, -1 + n_left + n_right + 1);
    ac10:	68ba      	ldr	r2, [r7, #8]
    ac12:	687b      	ldr	r3, [r7, #4]
    ac14:	4413      	add	r3, r2
    ac16:	4619      	mov	r1, r3
    ac18:	68f8      	ldr	r0, [r7, #12]
    ac1a:	f7ff fb4b 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte_uint(emit, MP_BC_UNPACK_EX, n_left | (n_right << 8));
    ac1e:	687b      	ldr	r3, [r7, #4]
    ac20:	021a      	lsls	r2, r3, #8
    ac22:	68bb      	ldr	r3, [r7, #8]
    ac24:	4313      	orrs	r3, r2
    ac26:	461a      	mov	r2, r3
    ac28:	215a      	movs	r1, #90	; 0x5a
    ac2a:	68f8      	ldr	r0, [r7, #12]
    ac2c:	f7ff f87a 	bl	9d24 <emit_write_bytecode_byte_uint>
}
    ac30:	bf00      	nop
    ac32:	3710      	adds	r7, #16
    ac34:	46bd      	mov	sp, r7
    ac36:	bd80      	pop	{r7, pc}

0000ac38 <mp_emit_bc_make_function>:

void mp_emit_bc_make_function(emit_t *emit, scope_t *scope, mp_uint_t n_pos_defaults, mp_uint_t n_kw_defaults) {
    ac38:	b580      	push	{r7, lr}
    ac3a:	b084      	sub	sp, #16
    ac3c:	af00      	add	r7, sp, #0
    ac3e:	60f8      	str	r0, [r7, #12]
    ac40:	60b9      	str	r1, [r7, #8]
    ac42:	607a      	str	r2, [r7, #4]
    ac44:	603b      	str	r3, [r7, #0]
    if (n_pos_defaults == 0 && n_kw_defaults == 0) {
    ac46:	687b      	ldr	r3, [r7, #4]
    ac48:	2b00      	cmp	r3, #0
    ac4a:	d10e      	bne.n	ac6a <mp_emit_bc_make_function+0x32>
    ac4c:	683b      	ldr	r3, [r7, #0]
    ac4e:	2b00      	cmp	r3, #0
    ac50:	d10b      	bne.n	ac6a <mp_emit_bc_make_function+0x32>
        emit_bc_pre(emit, 1);
    ac52:	2101      	movs	r1, #1
    ac54:	68f8      	ldr	r0, [r7, #12]
    ac56:	f7ff fb2d 	bl	a2b4 <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_FUNCTION, scope->raw_code);
    ac5a:	68bb      	ldr	r3, [r7, #8]
    ac5c:	695b      	ldr	r3, [r3, #20]
    ac5e:	461a      	mov	r2, r3
    ac60:	2160      	movs	r1, #96	; 0x60
    ac62:	68f8      	ldr	r0, [r7, #12]
    ac64:	f7ff f8e2 	bl	9e2c <emit_write_bytecode_byte_raw_code>
    ac68:	e00b      	b.n	ac82 <mp_emit_bc_make_function+0x4a>
    } else {
        emit_bc_pre(emit, -1);
    ac6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ac6e:	68f8      	ldr	r0, [r7, #12]
    ac70:	f7ff fb20 	bl	a2b4 <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_FUNCTION_DEFARGS, scope->raw_code);
    ac74:	68bb      	ldr	r3, [r7, #8]
    ac76:	695b      	ldr	r3, [r3, #20]
    ac78:	461a      	mov	r2, r3
    ac7a:	2161      	movs	r1, #97	; 0x61
    ac7c:	68f8      	ldr	r0, [r7, #12]
    ac7e:	f7ff f8d5 	bl	9e2c <emit_write_bytecode_byte_raw_code>
    }
}
    ac82:	bf00      	nop
    ac84:	3710      	adds	r7, #16
    ac86:	46bd      	mov	sp, r7
    ac88:	bd80      	pop	{r7, pc}
    ac8a:	bf00      	nop

0000ac8c <mp_emit_bc_make_closure>:

void mp_emit_bc_make_closure(emit_t *emit, scope_t *scope, mp_uint_t n_closed_over, mp_uint_t n_pos_defaults, mp_uint_t n_kw_defaults) {
    ac8c:	b580      	push	{r7, lr}
    ac8e:	b084      	sub	sp, #16
    ac90:	af00      	add	r7, sp, #0
    ac92:	60f8      	str	r0, [r7, #12]
    ac94:	60b9      	str	r1, [r7, #8]
    ac96:	607a      	str	r2, [r7, #4]
    ac98:	603b      	str	r3, [r7, #0]
    if (n_pos_defaults == 0 && n_kw_defaults == 0) {
    ac9a:	683b      	ldr	r3, [r7, #0]
    ac9c:	2b00      	cmp	r3, #0
    ac9e:	d117      	bne.n	acd0 <mp_emit_bc_make_closure+0x44>
    aca0:	69bb      	ldr	r3, [r7, #24]
    aca2:	2b00      	cmp	r3, #0
    aca4:	d114      	bne.n	acd0 <mp_emit_bc_make_closure+0x44>
        emit_bc_pre(emit, -n_closed_over + 1);
    aca6:	687b      	ldr	r3, [r7, #4]
    aca8:	f1c3 0301 	rsb	r3, r3, #1
    acac:	4619      	mov	r1, r3
    acae:	68f8      	ldr	r0, [r7, #12]
    acb0:	f7ff fb00 	bl	a2b4 <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_CLOSURE, scope->raw_code);
    acb4:	68bb      	ldr	r3, [r7, #8]
    acb6:	695b      	ldr	r3, [r3, #20]
    acb8:	461a      	mov	r2, r3
    acba:	2162      	movs	r1, #98	; 0x62
    acbc:	68f8      	ldr	r0, [r7, #12]
    acbe:	f7ff f8b5 	bl	9e2c <emit_write_bytecode_byte_raw_code>
        emit_write_bytecode_byte(emit, n_closed_over);
    acc2:	687b      	ldr	r3, [r7, #4]
    acc4:	b2db      	uxtb	r3, r3
    acc6:	4619      	mov	r1, r3
    acc8:	68f8      	ldr	r0, [r7, #12]
    acca:	f7fe ff97 	bl	9bfc <emit_write_bytecode_byte>
    acce:	e01c      	b.n	ad0a <mp_emit_bc_make_closure+0x7e>
    } else {
        assert(n_closed_over <= 255);
    acd0:	687b      	ldr	r3, [r7, #4]
    acd2:	2bff      	cmp	r3, #255	; 0xff
    acd4:	d906      	bls.n	ace4 <mp_emit_bc_make_closure+0x58>
    acd6:	4b0f      	ldr	r3, [pc, #60]	; (ad14 <mp_emit_bc_make_closure+0x88>)
    acd8:	4a0f      	ldr	r2, [pc, #60]	; (ad18 <mp_emit_bc_make_closure+0x8c>)
    acda:	f240 315b 	movw	r1, #859	; 0x35b
    acde:	480f      	ldr	r0, [pc, #60]	; (ad1c <mp_emit_bc_make_closure+0x90>)
    ace0:	f010 fb44 	bl	1b36c <__assert_func>
        emit_bc_pre(emit, -2 - (mp_int_t)n_closed_over + 1);
    ace4:	687b      	ldr	r3, [r7, #4]
    ace6:	43db      	mvns	r3, r3
    ace8:	4619      	mov	r1, r3
    acea:	68f8      	ldr	r0, [r7, #12]
    acec:	f7ff fae2 	bl	a2b4 <emit_bc_pre>
        emit_write_bytecode_byte_raw_code(emit, MP_BC_MAKE_CLOSURE_DEFARGS, scope->raw_code);
    acf0:	68bb      	ldr	r3, [r7, #8]
    acf2:	695b      	ldr	r3, [r3, #20]
    acf4:	461a      	mov	r2, r3
    acf6:	2163      	movs	r1, #99	; 0x63
    acf8:	68f8      	ldr	r0, [r7, #12]
    acfa:	f7ff f897 	bl	9e2c <emit_write_bytecode_byte_raw_code>
        emit_write_bytecode_byte(emit, n_closed_over);
    acfe:	687b      	ldr	r3, [r7, #4]
    ad00:	b2db      	uxtb	r3, r3
    ad02:	4619      	mov	r1, r3
    ad04:	68f8      	ldr	r0, [r7, #12]
    ad06:	f7fe ff79 	bl	9bfc <emit_write_bytecode_byte>
    }
}
    ad0a:	bf00      	nop
    ad0c:	3710      	adds	r7, #16
    ad0e:	46bd      	mov	sp, r7
    ad10:	bd80      	pop	{r7, pc}
    ad12:	bf00      	nop
    ad14:	0001f380 	.word	0x0001f380
    ad18:	0001f4b8 	.word	0x0001f4b8
    ad1c:	0001f1e4 	.word	0x0001f1e4

0000ad20 <emit_bc_call_function_method_helper>:

STATIC void emit_bc_call_function_method_helper(emit_t *emit, mp_int_t stack_adj, mp_uint_t bytecode_base, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    ad20:	b580      	push	{r7, lr}
    ad22:	b084      	sub	sp, #16
    ad24:	af00      	add	r7, sp, #0
    ad26:	60f8      	str	r0, [r7, #12]
    ad28:	60b9      	str	r1, [r7, #8]
    ad2a:	607a      	str	r2, [r7, #4]
    ad2c:	603b      	str	r3, [r7, #0]
    if (star_flags) {
    ad2e:	69fb      	ldr	r3, [r7, #28]
    ad30:	2b00      	cmp	r3, #0
    ad32:	d017      	beq.n	ad64 <emit_bc_call_function_method_helper+0x44>
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword - 2);
    ad34:	683b      	ldr	r3, [r7, #0]
    ad36:	68ba      	ldr	r2, [r7, #8]
    ad38:	1ad2      	subs	r2, r2, r3
    ad3a:	69bb      	ldr	r3, [r7, #24]
    ad3c:	005b      	lsls	r3, r3, #1
    ad3e:	1ad3      	subs	r3, r2, r3
    ad40:	3b02      	subs	r3, #2
    ad42:	4619      	mov	r1, r3
    ad44:	68f8      	ldr	r0, [r7, #12]
    ad46:	f7ff fab5 	bl	a2b4 <emit_bc_pre>
        emit_write_bytecode_byte_uint(emit, bytecode_base + 1, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    ad4a:	687b      	ldr	r3, [r7, #4]
    ad4c:	b2db      	uxtb	r3, r3
    ad4e:	3301      	adds	r3, #1
    ad50:	b2d9      	uxtb	r1, r3
    ad52:	69bb      	ldr	r3, [r7, #24]
    ad54:	021a      	lsls	r2, r3, #8
    ad56:	683b      	ldr	r3, [r7, #0]
    ad58:	4313      	orrs	r3, r2
    ad5a:	461a      	mov	r2, r3
    ad5c:	68f8      	ldr	r0, [r7, #12]
    ad5e:	f7fe ffe1 	bl	9d24 <emit_write_bytecode_byte_uint>
    } else {
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword);
        emit_write_bytecode_byte_uint(emit, bytecode_base, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    }
}
    ad62:	e013      	b.n	ad8c <emit_bc_call_function_method_helper+0x6c>
        emit_bc_pre(emit, stack_adj - (mp_int_t)n_positional - 2 * (mp_int_t)n_keyword);
    ad64:	683b      	ldr	r3, [r7, #0]
    ad66:	68ba      	ldr	r2, [r7, #8]
    ad68:	1ad2      	subs	r2, r2, r3
    ad6a:	69bb      	ldr	r3, [r7, #24]
    ad6c:	005b      	lsls	r3, r3, #1
    ad6e:	1ad3      	subs	r3, r2, r3
    ad70:	4619      	mov	r1, r3
    ad72:	68f8      	ldr	r0, [r7, #12]
    ad74:	f7ff fa9e 	bl	a2b4 <emit_bc_pre>
        emit_write_bytecode_byte_uint(emit, bytecode_base, (n_keyword << 8) | n_positional); // TODO make it 2 separate uints?
    ad78:	687b      	ldr	r3, [r7, #4]
    ad7a:	b2d9      	uxtb	r1, r3
    ad7c:	69bb      	ldr	r3, [r7, #24]
    ad7e:	021a      	lsls	r2, r3, #8
    ad80:	683b      	ldr	r3, [r7, #0]
    ad82:	4313      	orrs	r3, r2
    ad84:	461a      	mov	r2, r3
    ad86:	68f8      	ldr	r0, [r7, #12]
    ad88:	f7fe ffcc 	bl	9d24 <emit_write_bytecode_byte_uint>
}
    ad8c:	bf00      	nop
    ad8e:	3710      	adds	r7, #16
    ad90:	46bd      	mov	sp, r7
    ad92:	bd80      	pop	{r7, pc}

0000ad94 <mp_emit_bc_call_function>:

void mp_emit_bc_call_function(emit_t *emit, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    ad94:	b580      	push	{r7, lr}
    ad96:	b086      	sub	sp, #24
    ad98:	af02      	add	r7, sp, #8
    ad9a:	60f8      	str	r0, [r7, #12]
    ad9c:	60b9      	str	r1, [r7, #8]
    ad9e:	607a      	str	r2, [r7, #4]
    ada0:	603b      	str	r3, [r7, #0]
    emit_bc_call_function_method_helper(emit, 0, MP_BC_CALL_FUNCTION, n_positional, n_keyword, star_flags);
    ada2:	683b      	ldr	r3, [r7, #0]
    ada4:	9301      	str	r3, [sp, #4]
    ada6:	687b      	ldr	r3, [r7, #4]
    ada8:	9300      	str	r3, [sp, #0]
    adaa:	68bb      	ldr	r3, [r7, #8]
    adac:	2264      	movs	r2, #100	; 0x64
    adae:	2100      	movs	r1, #0
    adb0:	68f8      	ldr	r0, [r7, #12]
    adb2:	f7ff ffb5 	bl	ad20 <emit_bc_call_function_method_helper>
}
    adb6:	bf00      	nop
    adb8:	3710      	adds	r7, #16
    adba:	46bd      	mov	sp, r7
    adbc:	bd80      	pop	{r7, pc}
    adbe:	bf00      	nop

0000adc0 <mp_emit_bc_call_method>:

void mp_emit_bc_call_method(emit_t *emit, mp_uint_t n_positional, mp_uint_t n_keyword, mp_uint_t star_flags) {
    adc0:	b580      	push	{r7, lr}
    adc2:	b086      	sub	sp, #24
    adc4:	af02      	add	r7, sp, #8
    adc6:	60f8      	str	r0, [r7, #12]
    adc8:	60b9      	str	r1, [r7, #8]
    adca:	607a      	str	r2, [r7, #4]
    adcc:	603b      	str	r3, [r7, #0]
    emit_bc_call_function_method_helper(emit, -1, MP_BC_CALL_METHOD, n_positional, n_keyword, star_flags);
    adce:	683b      	ldr	r3, [r7, #0]
    add0:	9301      	str	r3, [sp, #4]
    add2:	687b      	ldr	r3, [r7, #4]
    add4:	9300      	str	r3, [sp, #0]
    add6:	68bb      	ldr	r3, [r7, #8]
    add8:	2266      	movs	r2, #102	; 0x66
    adda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    adde:	68f8      	ldr	r0, [r7, #12]
    ade0:	f7ff ff9e 	bl	ad20 <emit_bc_call_function_method_helper>
}
    ade4:	bf00      	nop
    ade6:	3710      	adds	r7, #16
    ade8:	46bd      	mov	sp, r7
    adea:	bd80      	pop	{r7, pc}

0000adec <mp_emit_bc_return_value>:

void mp_emit_bc_return_value(emit_t *emit) {
    adec:	b580      	push	{r7, lr}
    adee:	b082      	sub	sp, #8
    adf0:	af00      	add	r7, sp, #0
    adf2:	6078      	str	r0, [r7, #4]
    emit_bc_pre(emit, -1);
    adf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    adf8:	6878      	ldr	r0, [r7, #4]
    adfa:	f7ff fa5b 	bl	a2b4 <emit_bc_pre>
    emit->last_emit_was_return_value = true;
    adfe:	687b      	ldr	r3, [r7, #4]
    ae00:	2201      	movs	r2, #1
    ae02:	719a      	strb	r2, [r3, #6]
    emit_write_bytecode_byte(emit, MP_BC_RETURN_VALUE);
    ae04:	215b      	movs	r1, #91	; 0x5b
    ae06:	6878      	ldr	r0, [r7, #4]
    ae08:	f7fe fef8 	bl	9bfc <emit_write_bytecode_byte>
}
    ae0c:	bf00      	nop
    ae0e:	3708      	adds	r7, #8
    ae10:	46bd      	mov	sp, r7
    ae12:	bd80      	pop	{r7, pc}

0000ae14 <mp_emit_bc_raise_varargs>:

void mp_emit_bc_raise_varargs(emit_t *emit, mp_uint_t n_args) {
    ae14:	b580      	push	{r7, lr}
    ae16:	b082      	sub	sp, #8
    ae18:	af00      	add	r7, sp, #0
    ae1a:	6078      	str	r0, [r7, #4]
    ae1c:	6039      	str	r1, [r7, #0]
    assert(n_args <= 2);
    ae1e:	683b      	ldr	r3, [r7, #0]
    ae20:	2b02      	cmp	r3, #2
    ae22:	d906      	bls.n	ae32 <mp_emit_bc_raise_varargs+0x1e>
    ae24:	4b0b      	ldr	r3, [pc, #44]	; (ae54 <mp_emit_bc_raise_varargs+0x40>)
    ae26:	4a0c      	ldr	r2, [pc, #48]	; (ae58 <mp_emit_bc_raise_varargs+0x44>)
    ae28:	f240 317b 	movw	r1, #891	; 0x37b
    ae2c:	480b      	ldr	r0, [pc, #44]	; (ae5c <mp_emit_bc_raise_varargs+0x48>)
    ae2e:	f010 fa9d 	bl	1b36c <__assert_func>
    emit_bc_pre(emit, -n_args);
    ae32:	683b      	ldr	r3, [r7, #0]
    ae34:	425b      	negs	r3, r3
    ae36:	4619      	mov	r1, r3
    ae38:	6878      	ldr	r0, [r7, #4]
    ae3a:	f7ff fa3b 	bl	a2b4 <emit_bc_pre>
    emit_write_bytecode_byte_byte(emit, MP_BC_RAISE_VARARGS, n_args);
    ae3e:	683b      	ldr	r3, [r7, #0]
    ae40:	b2db      	uxtb	r3, r3
    ae42:	461a      	mov	r2, r3
    ae44:	215c      	movs	r1, #92	; 0x5c
    ae46:	6878      	ldr	r0, [r7, #4]
    ae48:	f7fe feea 	bl	9c20 <emit_write_bytecode_byte_byte>
}
    ae4c:	bf00      	nop
    ae4e:	3708      	adds	r7, #8
    ae50:	46bd      	mov	sp, r7
    ae52:	bd80      	pop	{r7, pc}
    ae54:	0001f398 	.word	0x0001f398
    ae58:	0001f4d0 	.word	0x0001f4d0
    ae5c:	0001f1e4 	.word	0x0001f1e4

0000ae60 <mp_emit_bc_yield>:

void mp_emit_bc_yield(emit_t *emit, int kind) {
    ae60:	b580      	push	{r7, lr}
    ae62:	b082      	sub	sp, #8
    ae64:	af00      	add	r7, sp, #0
    ae66:	6078      	str	r0, [r7, #4]
    ae68:	6039      	str	r1, [r7, #0]
    MP_STATIC_ASSERT(MP_BC_YIELD_VALUE + 1 == MP_BC_YIELD_FROM);
    emit_bc_pre(emit, -kind);
    ae6a:	683b      	ldr	r3, [r7, #0]
    ae6c:	425b      	negs	r3, r3
    ae6e:	4619      	mov	r1, r3
    ae70:	6878      	ldr	r0, [r7, #4]
    ae72:	f7ff fa1f 	bl	a2b4 <emit_bc_pre>
    emit->scope->scope_flags |= MP_SCOPE_FLAG_GENERATOR;
    ae76:	687b      	ldr	r3, [r7, #4]
    ae78:	68db      	ldr	r3, [r3, #12]
    ae7a:	687a      	ldr	r2, [r7, #4]
    ae7c:	68d2      	ldr	r2, [r2, #12]
    ae7e:	7e12      	ldrb	r2, [r2, #24]
    ae80:	f042 0204 	orr.w	r2, r2, #4
    ae84:	b2d2      	uxtb	r2, r2
    ae86:	761a      	strb	r2, [r3, #24]
    emit_write_bytecode_byte(emit, MP_BC_YIELD_VALUE + kind);
    ae88:	683b      	ldr	r3, [r7, #0]
    ae8a:	b2db      	uxtb	r3, r3
    ae8c:	335d      	adds	r3, #93	; 0x5d
    ae8e:	b2db      	uxtb	r3, r3
    ae90:	4619      	mov	r1, r3
    ae92:	6878      	ldr	r0, [r7, #4]
    ae94:	f7fe feb2 	bl	9bfc <emit_write_bytecode_byte>
}
    ae98:	bf00      	nop
    ae9a:	3708      	adds	r7, #8
    ae9c:	46bd      	mov	sp, r7
    ae9e:	bd80      	pop	{r7, pc}

0000aea0 <mp_emit_bc_start_except_handler>:

void mp_emit_bc_start_except_handler(emit_t *emit) {
    aea0:	b580      	push	{r7, lr}
    aea2:	b082      	sub	sp, #8
    aea4:	af00      	add	r7, sp, #0
    aea6:	6078      	str	r0, [r7, #4]
    mp_emit_bc_adjust_stack_size(emit, 4); // stack adjust for the exception instance, +3 for possible UNWIND_JUMP state
    aea8:	2104      	movs	r1, #4
    aeaa:	6878      	ldr	r0, [r7, #4]
    aeac:	f7ff f9ca 	bl	a244 <mp_emit_bc_adjust_stack_size>
}
    aeb0:	bf00      	nop
    aeb2:	3708      	adds	r7, #8
    aeb4:	46bd      	mov	sp, r7
    aeb6:	bd80      	pop	{r7, pc}

0000aeb8 <mp_emit_bc_end_except_handler>:

void mp_emit_bc_end_except_handler(emit_t *emit) {
    aeb8:	b580      	push	{r7, lr}
    aeba:	b082      	sub	sp, #8
    aebc:	af00      	add	r7, sp, #0
    aebe:	6078      	str	r0, [r7, #4]
    mp_emit_bc_adjust_stack_size(emit, -3); // stack adjust
    aec0:	f06f 0102 	mvn.w	r1, #2
    aec4:	6878      	ldr	r0, [r7, #4]
    aec6:	f7ff f9bd 	bl	a244 <mp_emit_bc_adjust_stack_size>
}
    aeca:	bf00      	nop
    aecc:	3708      	adds	r7, #8
    aece:	46bd      	mov	sp, r7
    aed0:	bd80      	pop	{r7, pc}
    aed2:	bf00      	nop

0000aed4 <mp_parse_num_base>:
#include "py/misc.h"
#include "py/parsenumbase.h"

// find real radix base, and strip preceding '0x', '0o' and '0b'
// puts base in *base, and returns number of bytes to skip the prefix
size_t mp_parse_num_base(const char *str, size_t len, int *base) {
    aed4:	b480      	push	{r7}
    aed6:	b087      	sub	sp, #28
    aed8:	af00      	add	r7, sp, #0
    aeda:	60f8      	str	r0, [r7, #12]
    aedc:	60b9      	str	r1, [r7, #8]
    aede:	607a      	str	r2, [r7, #4]
    const byte *p = (const byte*)str;
    aee0:	68fb      	ldr	r3, [r7, #12]
    aee2:	617b      	str	r3, [r7, #20]
    if (len <= 1) {
    aee4:	68bb      	ldr	r3, [r7, #8]
    aee6:	2b01      	cmp	r3, #1
    aee8:	d971      	bls.n	afce <mp_parse_num_base+0xfa>
        goto no_prefix;
    }
    unichar c = *(p++);
    aeea:	697b      	ldr	r3, [r7, #20]
    aeec:	1c5a      	adds	r2, r3, #1
    aeee:	617a      	str	r2, [r7, #20]
    aef0:	781b      	ldrb	r3, [r3, #0]
    aef2:	613b      	str	r3, [r7, #16]
    if ((*base == 0 || *base == 16) && c == '0') {
    aef4:	687b      	ldr	r3, [r7, #4]
    aef6:	681b      	ldr	r3, [r3, #0]
    aef8:	2b00      	cmp	r3, #0
    aefa:	d003      	beq.n	af04 <mp_parse_num_base+0x30>
    aefc:	687b      	ldr	r3, [r7, #4]
    aefe:	681b      	ldr	r3, [r3, #0]
    af00:	2b10      	cmp	r3, #16
    af02:	d136      	bne.n	af72 <mp_parse_num_base+0x9e>
    af04:	693b      	ldr	r3, [r7, #16]
    af06:	2b30      	cmp	r3, #48	; 0x30
    af08:	d133      	bne.n	af72 <mp_parse_num_base+0x9e>
        c = *(p++);
    af0a:	697b      	ldr	r3, [r7, #20]
    af0c:	1c5a      	adds	r2, r3, #1
    af0e:	617a      	str	r2, [r7, #20]
    af10:	781b      	ldrb	r3, [r3, #0]
    af12:	613b      	str	r3, [r7, #16]
        if ((c | 32) == 'x') {
    af14:	693b      	ldr	r3, [r7, #16]
    af16:	f043 0320 	orr.w	r3, r3, #32
    af1a:	2b78      	cmp	r3, #120	; 0x78
    af1c:	d103      	bne.n	af26 <mp_parse_num_base+0x52>
            *base = 16;
    af1e:	687b      	ldr	r3, [r7, #4]
    af20:	2210      	movs	r2, #16
    af22:	601a      	str	r2, [r3, #0]
        if ((c | 32) == 'x') {
    af24:	e05b      	b.n	afde <mp_parse_num_base+0x10a>
        } else if (*base == 0 && (c | 32) == 'o') {
    af26:	687b      	ldr	r3, [r7, #4]
    af28:	681b      	ldr	r3, [r3, #0]
    af2a:	2b00      	cmp	r3, #0
    af2c:	d108      	bne.n	af40 <mp_parse_num_base+0x6c>
    af2e:	693b      	ldr	r3, [r7, #16]
    af30:	f043 0320 	orr.w	r3, r3, #32
    af34:	2b6f      	cmp	r3, #111	; 0x6f
    af36:	d103      	bne.n	af40 <mp_parse_num_base+0x6c>
            *base = 8;
    af38:	687b      	ldr	r3, [r7, #4]
    af3a:	2208      	movs	r2, #8
    af3c:	601a      	str	r2, [r3, #0]
    af3e:	e017      	b.n	af70 <mp_parse_num_base+0x9c>
        } else if (*base == 0 && (c | 32) == 'b') {
    af40:	687b      	ldr	r3, [r7, #4]
    af42:	681b      	ldr	r3, [r3, #0]
    af44:	2b00      	cmp	r3, #0
    af46:	d108      	bne.n	af5a <mp_parse_num_base+0x86>
    af48:	693b      	ldr	r3, [r7, #16]
    af4a:	f043 0320 	orr.w	r3, r3, #32
    af4e:	2b62      	cmp	r3, #98	; 0x62
    af50:	d103      	bne.n	af5a <mp_parse_num_base+0x86>
            *base = 2;
    af52:	687b      	ldr	r3, [r7, #4]
    af54:	2202      	movs	r2, #2
    af56:	601a      	str	r2, [r3, #0]
    af58:	e00a      	b.n	af70 <mp_parse_num_base+0x9c>
        } else {
            if (*base == 0) {
    af5a:	687b      	ldr	r3, [r7, #4]
    af5c:	681b      	ldr	r3, [r3, #0]
    af5e:	2b00      	cmp	r3, #0
    af60:	d102      	bne.n	af68 <mp_parse_num_base+0x94>
                *base = 10;
    af62:	687b      	ldr	r3, [r7, #4]
    af64:	220a      	movs	r2, #10
    af66:	601a      	str	r2, [r3, #0]
            }
            p -= 2;
    af68:	697b      	ldr	r3, [r7, #20]
    af6a:	3b02      	subs	r3, #2
    af6c:	617b      	str	r3, [r7, #20]
        if ((c | 32) == 'x') {
    af6e:	e036      	b.n	afde <mp_parse_num_base+0x10a>
    af70:	e035      	b.n	afde <mp_parse_num_base+0x10a>
        }
    } else if (*base == 8 && c == '0') {
    af72:	687b      	ldr	r3, [r7, #4]
    af74:	681b      	ldr	r3, [r3, #0]
    af76:	2b08      	cmp	r3, #8
    af78:	d110      	bne.n	af9c <mp_parse_num_base+0xc8>
    af7a:	693b      	ldr	r3, [r7, #16]
    af7c:	2b30      	cmp	r3, #48	; 0x30
    af7e:	d10d      	bne.n	af9c <mp_parse_num_base+0xc8>
        c = *(p++);
    af80:	697b      	ldr	r3, [r7, #20]
    af82:	1c5a      	adds	r2, r3, #1
    af84:	617a      	str	r2, [r7, #20]
    af86:	781b      	ldrb	r3, [r3, #0]
    af88:	613b      	str	r3, [r7, #16]
        if ((c | 32) != 'o') {
    af8a:	693b      	ldr	r3, [r7, #16]
    af8c:	f043 0320 	orr.w	r3, r3, #32
    af90:	2b6f      	cmp	r3, #111	; 0x6f
    af92:	d024      	beq.n	afde <mp_parse_num_base+0x10a>
            p -= 2;
    af94:	697b      	ldr	r3, [r7, #20]
    af96:	3b02      	subs	r3, #2
    af98:	617b      	str	r3, [r7, #20]
        if ((c | 32) != 'o') {
    af9a:	e020      	b.n	afde <mp_parse_num_base+0x10a>
        }
    } else if (*base == 2 && c == '0') {
    af9c:	687b      	ldr	r3, [r7, #4]
    af9e:	681b      	ldr	r3, [r3, #0]
    afa0:	2b02      	cmp	r3, #2
    afa2:	d110      	bne.n	afc6 <mp_parse_num_base+0xf2>
    afa4:	693b      	ldr	r3, [r7, #16]
    afa6:	2b30      	cmp	r3, #48	; 0x30
    afa8:	d10d      	bne.n	afc6 <mp_parse_num_base+0xf2>
        c = *(p++);
    afaa:	697b      	ldr	r3, [r7, #20]
    afac:	1c5a      	adds	r2, r3, #1
    afae:	617a      	str	r2, [r7, #20]
    afb0:	781b      	ldrb	r3, [r3, #0]
    afb2:	613b      	str	r3, [r7, #16]
        if ((c | 32) != 'b') {
    afb4:	693b      	ldr	r3, [r7, #16]
    afb6:	f043 0320 	orr.w	r3, r3, #32
    afba:	2b62      	cmp	r3, #98	; 0x62
    afbc:	d00f      	beq.n	afde <mp_parse_num_base+0x10a>
            p -= 2;
    afbe:	697b      	ldr	r3, [r7, #20]
    afc0:	3b02      	subs	r3, #2
    afc2:	617b      	str	r3, [r7, #20]
        if ((c | 32) != 'b') {
    afc4:	e00b      	b.n	afde <mp_parse_num_base+0x10a>
        }
    } else {
        p--;
    afc6:	697b      	ldr	r3, [r7, #20]
    afc8:	3b01      	subs	r3, #1
    afca:	617b      	str	r3, [r7, #20]
    afcc:	e000      	b.n	afd0 <mp_parse_num_base+0xfc>
        goto no_prefix;
    afce:	bf00      	nop
    no_prefix:
        if (*base == 0) {
    afd0:	687b      	ldr	r3, [r7, #4]
    afd2:	681b      	ldr	r3, [r3, #0]
    afd4:	2b00      	cmp	r3, #0
    afd6:	d102      	bne.n	afde <mp_parse_num_base+0x10a>
            *base = 10;
    afd8:	687b      	ldr	r3, [r7, #4]
    afda:	220a      	movs	r2, #10
    afdc:	601a      	str	r2, [r3, #0]
        }
    }
    return p - (const byte*)str;
    afde:	697a      	ldr	r2, [r7, #20]
    afe0:	68fb      	ldr	r3, [r7, #12]
    afe2:	1ad3      	subs	r3, r2, r3
}
    afe4:	4618      	mov	r0, r3
    afe6:	371c      	adds	r7, #28
    afe8:	46bd      	mov	sp, r7
    afea:	f85d 7b04 	ldr.w	r7, [sp], #4
    afee:	4770      	bx	lr

0000aff0 <raise_exc>:

#if MICROPY_PY_BUILTINS_FLOAT
#include <math.h>
#endif

STATIC NORETURN void raise_exc(mp_obj_t exc, mp_lexer_t *lex) {
    aff0:	b580      	push	{r7, lr}
    aff2:	b082      	sub	sp, #8
    aff4:	af00      	add	r7, sp, #0
    aff6:	6078      	str	r0, [r7, #4]
    aff8:	6039      	str	r1, [r7, #0]
    // if lex!=NULL then the parser called us and we need to convert the
    // exception's type from ValueError to SyntaxError and add traceback info
    if (lex != NULL) {
    affa:	683b      	ldr	r3, [r7, #0]
    affc:	2b00      	cmp	r3, #0
    affe:	d00a      	beq.n	b016 <raise_exc+0x26>
        ((mp_obj_base_t*)MP_OBJ_TO_PTR(exc))->type = &mp_type_SyntaxError;
    b000:	687b      	ldr	r3, [r7, #4]
    b002:	4a06      	ldr	r2, [pc, #24]	; (b01c <raise_exc+0x2c>)
    b004:	601a      	str	r2, [r3, #0]
        mp_obj_exception_add_traceback(exc, lex->source_name, lex->tok_line, MP_QSTR_NULL);
    b006:	683b      	ldr	r3, [r7, #0]
    b008:	6819      	ldr	r1, [r3, #0]
    b00a:	683b      	ldr	r3, [r7, #0]
    b00c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b00e:	2300      	movs	r3, #0
    b010:	6878      	ldr	r0, [r7, #4]
    b012:	f004 fc05 	bl	f820 <mp_obj_exception_add_traceback>
    }
    nlr_raise(exc);
    b016:	6878      	ldr	r0, [r7, #4]
    b018:	f7f5 f962 	bl	2e0 <nlr_jump>
    b01c:	000206ec 	.word	0x000206ec

0000b020 <mp_parse_num_integer>:
}

mp_obj_t mp_parse_num_integer(const char *restrict str_, size_t len, int base, mp_lexer_t *lex) {
    b020:	b580      	push	{r7, lr}
    b022:	b094      	sub	sp, #80	; 0x50
    b024:	af00      	add	r7, sp, #0
    b026:	60f8      	str	r0, [r7, #12]
    b028:	60b9      	str	r1, [r7, #8]
    b02a:	607a      	str	r2, [r7, #4]
    b02c:	603b      	str	r3, [r7, #0]
    const byte *restrict str = (const byte *)str_;
    b02e:	68fb      	ldr	r3, [r7, #12]
    b030:	64fb      	str	r3, [r7, #76]	; 0x4c
    const byte *restrict top = str + len;
    b032:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b034:	68bb      	ldr	r3, [r7, #8]
    b036:	4413      	add	r3, r2
    b038:	63bb      	str	r3, [r7, #56]	; 0x38
    bool neg = false;
    b03a:	2300      	movs	r3, #0
    b03c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    mp_obj_t ret_val;

    // check radix base
    if ((base != 0 && base < 2) || base > 36) {
    b040:	687b      	ldr	r3, [r7, #4]
    b042:	2b00      	cmp	r3, #0
    b044:	d002      	beq.n	b04c <mp_parse_num_integer+0x2c>
    b046:	687b      	ldr	r3, [r7, #4]
    b048:	2b01      	cmp	r3, #1
    b04a:	dd02      	ble.n	b052 <mp_parse_num_integer+0x32>
    b04c:	687b      	ldr	r3, [r7, #4]
    b04e:	2b24      	cmp	r3, #36	; 0x24
    b050:	dd05      	ble.n	b05e <mp_parse_num_integer+0x3e>
        // this won't be reached if lex!=NULL
        mp_raise_ValueError("int() arg 2 must be >= 2 and <= 36");
    b052:	4861      	ldr	r0, [pc, #388]	; (b1d8 <mp_parse_num_integer+0x1b8>)
    b054:	f001 ffba 	bl	cfcc <mp_raise_ValueError>
    }

    // skip leading space
    for (; str < top && unichar_isspace(*str); str++) {
    b058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b05a:	3301      	adds	r3, #1
    b05c:	64fb      	str	r3, [r7, #76]	; 0x4c
    b05e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b062:	429a      	cmp	r2, r3
    b064:	d207      	bcs.n	b076 <mp_parse_num_integer+0x56>
    b066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b068:	781b      	ldrb	r3, [r3, #0]
    b06a:	4618      	mov	r0, r3
    b06c:	f7f7 f988 	bl	2380 <unichar_isspace>
    b070:	4603      	mov	r3, r0
    b072:	2b00      	cmp	r3, #0
    b074:	d1f0      	bne.n	b058 <mp_parse_num_integer+0x38>
    }

    // parse optional sign
    if (str < top) {
    b076:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b07a:	429a      	cmp	r2, r3
    b07c:	d211      	bcs.n	b0a2 <mp_parse_num_integer+0x82>
        if (*str == '+') {
    b07e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b080:	781b      	ldrb	r3, [r3, #0]
    b082:	2b2b      	cmp	r3, #43	; 0x2b
    b084:	d103      	bne.n	b08e <mp_parse_num_integer+0x6e>
            str++;
    b086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b088:	3301      	adds	r3, #1
    b08a:	64fb      	str	r3, [r7, #76]	; 0x4c
    b08c:	e009      	b.n	b0a2 <mp_parse_num_integer+0x82>
        } else if (*str == '-') {
    b08e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b090:	781b      	ldrb	r3, [r3, #0]
    b092:	2b2d      	cmp	r3, #45	; 0x2d
    b094:	d105      	bne.n	b0a2 <mp_parse_num_integer+0x82>
            str++;
    b096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b098:	3301      	adds	r3, #1
    b09a:	64fb      	str	r3, [r7, #76]	; 0x4c
            neg = true;
    b09c:	2301      	movs	r3, #1
    b09e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        }
    }

    // parse optional base prefix
    str += mp_parse_num_base((const char*)str, top - str, &base);
    b0a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    b0a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b0a6:	1ad3      	subs	r3, r2, r3
    b0a8:	4619      	mov	r1, r3
    b0aa:	1d3b      	adds	r3, r7, #4
    b0ac:	461a      	mov	r2, r3
    b0ae:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    b0b0:	f7ff ff10 	bl	aed4 <mp_parse_num_base>
    b0b4:	4602      	mov	r2, r0
    b0b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b0b8:	4413      	add	r3, r2
    b0ba:	64fb      	str	r3, [r7, #76]	; 0x4c

    // string should be an integer number
    mp_int_t int_val = 0;
    b0bc:	2300      	movs	r3, #0
    b0be:	643b      	str	r3, [r7, #64]	; 0x40
    const byte *restrict str_val_start = str;
    b0c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b0c2:	637b      	str	r3, [r7, #52]	; 0x34
    for (; str < top; str++) {
    b0c4:	e037      	b.n	b136 <mp_parse_num_integer+0x116>
        // get next digit as a value
        mp_uint_t dig = *str;
    b0c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b0c8:	781b      	ldrb	r3, [r3, #0]
    b0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ('0' <= dig && dig <= '9') {
    b0cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b0ce:	2b2f      	cmp	r3, #47	; 0x2f
    b0d0:	d906      	bls.n	b0e0 <mp_parse_num_integer+0xc0>
    b0d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b0d4:	2b39      	cmp	r3, #57	; 0x39
    b0d6:	d803      	bhi.n	b0e0 <mp_parse_num_integer+0xc0>
            dig -= '0';
    b0d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b0da:	3b30      	subs	r3, #48	; 0x30
    b0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    b0de:	e00c      	b.n	b0fa <mp_parse_num_integer+0xda>
        } else {
            dig |= 0x20; // make digit lower-case
    b0e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b0e2:	f043 0320 	orr.w	r3, r3, #32
    b0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
            if ('a' <= dig && dig <= 'z') {
    b0e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b0ea:	2b60      	cmp	r3, #96	; 0x60
    b0ec:	d929      	bls.n	b142 <mp_parse_num_integer+0x122>
    b0ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b0f0:	2b7a      	cmp	r3, #122	; 0x7a
    b0f2:	d826      	bhi.n	b142 <mp_parse_num_integer+0x122>
                dig -= 'a' - 10;
    b0f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b0f6:	3b57      	subs	r3, #87	; 0x57
    b0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
            } else {
                // unknown character
                break;
            }
        }
        if (dig >= (mp_uint_t)base) {
    b0fa:	687b      	ldr	r3, [r7, #4]
    b0fc:	461a      	mov	r2, r3
    b0fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b100:	4293      	cmp	r3, r2
    b102:	d21d      	bcs.n	b140 <mp_parse_num_integer+0x120>
            break;
        }

        // add next digi and check for overflow
        if (mp_small_int_mul_overflow(int_val, base)) {
    b104:	687b      	ldr	r3, [r7, #4]
    b106:	4619      	mov	r1, r3
    b108:	6c38      	ldr	r0, [r7, #64]	; 0x40
    b10a:	f00f ff61 	bl	1afd0 <mp_small_int_mul_overflow>
    b10e:	4603      	mov	r3, r0
    b110:	2b00      	cmp	r3, #0
    b112:	d13c      	bne.n	b18e <mp_parse_num_integer+0x16e>
            goto overflow;
        }
        int_val = int_val * base + dig;
    b114:	687b      	ldr	r3, [r7, #4]
    b116:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    b118:	fb02 f303 	mul.w	r3, r2, r3
    b11c:	461a      	mov	r2, r3
    b11e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b120:	4413      	add	r3, r2
    b122:	643b      	str	r3, [r7, #64]	; 0x40
        if (!MP_SMALL_INT_FITS(int_val)) {
    b124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b126:	005a      	lsls	r2, r3, #1
    b128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b12a:	4053      	eors	r3, r2
    b12c:	2b00      	cmp	r3, #0
    b12e:	db30      	blt.n	b192 <mp_parse_num_integer+0x172>
    for (; str < top; str++) {
    b130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b132:	3301      	adds	r3, #1
    b134:	64fb      	str	r3, [r7, #76]	; 0x4c
    b136:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b13a:	429a      	cmp	r2, r3
    b13c:	d3c3      	bcc.n	b0c6 <mp_parse_num_integer+0xa6>
    b13e:	e000      	b.n	b142 <mp_parse_num_integer+0x122>
            break;
    b140:	bf00      	nop
            goto overflow;
        }
    }

    // negate value if needed
    if (neg) {
    b142:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    b146:	2b00      	cmp	r3, #0
    b148:	d002      	beq.n	b150 <mp_parse_num_integer+0x130>
        int_val = -int_val;
    b14a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b14c:	425b      	negs	r3, r3
    b14e:	643b      	str	r3, [r7, #64]	; 0x40
    }

    // create the small int
    ret_val = MP_OBJ_NEW_SMALL_INT(int_val);
    b150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b152:	005b      	lsls	r3, r3, #1
    b154:	f043 0301 	orr.w	r3, r3, #1
    b158:	647b      	str	r3, [r7, #68]	; 0x44

have_ret_val:
    // check we parsed something
    if (str == str_val_start) {
    b15a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b15e:	429a      	cmp	r2, r3
    b160:	d02a      	beq.n	b1b8 <mp_parse_num_integer+0x198>
        goto value_error;
    }

    // skip trailing space
    for (; str < top && unichar_isspace(*str); str++) {
    b162:	e002      	b.n	b16a <mp_parse_num_integer+0x14a>
    b164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b166:	3301      	adds	r3, #1
    b168:	64fb      	str	r3, [r7, #76]	; 0x4c
    b16a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b16e:	429a      	cmp	r2, r3
    b170:	d207      	bcs.n	b182 <mp_parse_num_integer+0x162>
    b172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b174:	781b      	ldrb	r3, [r3, #0]
    b176:	4618      	mov	r0, r3
    b178:	f7f7 f902 	bl	2380 <unichar_isspace>
    b17c:	4603      	mov	r3, r0
    b17e:	2b00      	cmp	r3, #0
    b180:	d1f0      	bne.n	b164 <mp_parse_num_integer+0x144>
    }

    // check we reached the end of the string
    if (str != top) {
    b182:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b186:	429a      	cmp	r2, r3
    b188:	d118      	bne.n	b1bc <mp_parse_num_integer+0x19c>
        goto value_error;
    }

    // return the object
    return ret_val;
    b18a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b18c:	e020      	b.n	b1d0 <mp_parse_num_integer+0x1b0>
            goto overflow;
    b18e:	bf00      	nop
    b190:	e000      	b.n	b194 <mp_parse_num_integer+0x174>
            goto overflow;
    b192:	bf00      	nop

overflow:
    // reparse using long int
    {
        const char *s2 = (const char*)str_val_start;
    b194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b196:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret_val = mp_obj_new_int_from_str_len(&s2, top - str_val_start, neg, base);
    b198:	6bba      	ldr	r2, [r7, #56]	; 0x38
    b19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b19c:	1ad3      	subs	r3, r2, r3
    b19e:	4619      	mov	r1, r3
    b1a0:	687b      	ldr	r3, [r7, #4]
    b1a2:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
    b1a6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    b1aa:	f005 fb89 	bl	108c0 <mp_obj_new_int_from_str_len>
    b1ae:	6478      	str	r0, [r7, #68]	; 0x44
        str = (const byte*)s2;
    b1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b1b2:	64fb      	str	r3, [r7, #76]	; 0x4c
        goto have_ret_val;
    b1b4:	bf00      	nop
    b1b6:	e7d0      	b.n	b15a <mp_parse_num_integer+0x13a>
        goto value_error;
    b1b8:	bf00      	nop
    b1ba:	e000      	b.n	b1be <mp_parse_num_integer+0x19e>
        goto value_error;
    b1bc:	bf00      	nop
    }

value_error:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_obj_t exc = mp_obj_new_exception_msg(&mp_type_ValueError,
    b1be:	4907      	ldr	r1, [pc, #28]	; (b1dc <mp_parse_num_integer+0x1bc>)
    b1c0:	4807      	ldr	r0, [pc, #28]	; (b1e0 <mp_parse_num_integer+0x1c0>)
    b1c2:	f004 f9b1 	bl	f528 <mp_obj_new_exception_msg>
    b1c6:	6338      	str	r0, [r7, #48]	; 0x30
            "invalid syntax for integer");
        raise_exc(exc, lex);
    b1c8:	6839      	ldr	r1, [r7, #0]
    b1ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
    b1cc:	f7ff ff10 	bl	aff0 <raise_exc>
        mp_str_print_quoted(&print, str_val_start, top - str_val_start, true);
        mp_obj_t exc = mp_obj_new_exception_arg1(&mp_type_ValueError,
            mp_obj_new_str_from_vstr(&mp_type_str, &vstr));
        raise_exc(exc, lex);
    }
}
    b1d0:	4618      	mov	r0, r3
    b1d2:	3750      	adds	r7, #80	; 0x50
    b1d4:	46bd      	mov	sp, r7
    b1d6:	bd80      	pop	{r7, pc}
    b1d8:	0001f4ec 	.word	0x0001f4ec
    b1dc:	0001f510 	.word	0x0001f510
    b1e0:	000207a0 	.word	0x000207a0

0000b1e4 <mp_parse_num_decimal>:
    PARSE_DEC_IN_INTG,
    PARSE_DEC_IN_FRAC,
    PARSE_DEC_IN_EXP,
} parse_dec_in_t;

mp_obj_t mp_parse_num_decimal(const char *str, size_t len, bool allow_imag, bool force_complex, mp_lexer_t *lex) {
    b1e4:	b580      	push	{r7, lr}
    b1e6:	b084      	sub	sp, #16
    b1e8:	af00      	add	r7, sp, #0
    b1ea:	60f8      	str	r0, [r7, #12]
    b1ec:	60b9      	str	r1, [r7, #8]
    b1ee:	4611      	mov	r1, r2
    b1f0:	461a      	mov	r2, r3
    b1f2:	460b      	mov	r3, r1
    b1f4:	71fb      	strb	r3, [r7, #7]
    b1f6:	4613      	mov	r3, r2
    b1f8:	71bb      	strb	r3, [r7, #6]

value_error:
    raise_exc(mp_obj_new_exception_msg(&mp_type_ValueError, "invalid syntax for number"), lex);

#else
    raise_exc(mp_obj_new_exception_msg(&mp_type_ValueError, "decimal numbers not supported"), lex);
    b1fa:	4904      	ldr	r1, [pc, #16]	; (b20c <mp_parse_num_decimal+0x28>)
    b1fc:	4804      	ldr	r0, [pc, #16]	; (b210 <mp_parse_num_decimal+0x2c>)
    b1fe:	f004 f993 	bl	f528 <mp_obj_new_exception_msg>
    b202:	4603      	mov	r3, r0
    b204:	69b9      	ldr	r1, [r7, #24]
    b206:	4618      	mov	r0, r3
    b208:	f7ff fef2 	bl	aff0 <raise_exc>
    b20c:	0001f52c 	.word	0x0001f52c
    b210:	000207a0 	.word	0x000207a0

0000b214 <MP_OBJ_IS_OBJ>:
    b214:	b480      	push	{r7}
    b216:	b083      	sub	sp, #12
    b218:	af00      	add	r7, sp, #0
    b21a:	6078      	str	r0, [r7, #4]
    b21c:	687b      	ldr	r3, [r7, #4]
    b21e:	f003 0303 	and.w	r3, r3, #3
    b222:	2b00      	cmp	r3, #0
    b224:	bf0c      	ite	eq
    b226:	2301      	moveq	r3, #1
    b228:	2300      	movne	r3, #0
    b22a:	b2db      	uxtb	r3, r3
    b22c:	4618      	mov	r0, r3
    b22e:	370c      	adds	r7, #12
    b230:	46bd      	mov	sp, r7
    b232:	f85d 7b04 	ldr.w	r7, [sp], #4
    b236:	4770      	bx	lr

0000b238 <mp_emit_glue_new_raw_code>:

#if MICROPY_DEBUG_PRINTERS
mp_uint_t mp_verbose_flag = 0;
#endif

mp_raw_code_t *mp_emit_glue_new_raw_code(void) {
    b238:	b580      	push	{r7, lr}
    b23a:	b082      	sub	sp, #8
    b23c:	af00      	add	r7, sp, #0
    mp_raw_code_t *rc = m_new0(mp_raw_code_t, 1);
    b23e:	2010      	movs	r0, #16
    b240:	f7f5 f892 	bl	368 <m_malloc0>
    b244:	6078      	str	r0, [r7, #4]
    rc->kind = MP_CODE_RESERVED;
    b246:	687a      	ldr	r2, [r7, #4]
    b248:	7813      	ldrb	r3, [r2, #0]
    b24a:	2101      	movs	r1, #1
    b24c:	f361 0302 	bfi	r3, r1, #0, #3
    b250:	7013      	strb	r3, [r2, #0]
    return rc;
    b252:	687b      	ldr	r3, [r7, #4]
}
    b254:	4618      	mov	r0, r3
    b256:	3708      	adds	r7, #8
    b258:	46bd      	mov	sp, r7
    b25a:	bd80      	pop	{r7, pc}

0000b25c <mp_emit_glue_assign_bytecode>:
    #endif
    const mp_uint_t *const_table,
    #if MICROPY_PERSISTENT_CODE_SAVE
    uint16_t n_obj, uint16_t n_raw_code,
    #endif
    mp_uint_t scope_flags) {
    b25c:	b480      	push	{r7}
    b25e:	b085      	sub	sp, #20
    b260:	af00      	add	r7, sp, #0
    b262:	60f8      	str	r0, [r7, #12]
    b264:	60b9      	str	r1, [r7, #8]
    b266:	607a      	str	r2, [r7, #4]
    b268:	603b      	str	r3, [r7, #0]

    rc->kind = MP_CODE_BYTECODE;
    b26a:	68fa      	ldr	r2, [r7, #12]
    b26c:	7813      	ldrb	r3, [r2, #0]
    b26e:	2102      	movs	r1, #2
    b270:	f361 0302 	bfi	r3, r1, #0, #3
    b274:	7013      	strb	r3, [r2, #0]
    rc->scope_flags = scope_flags;
    b276:	683b      	ldr	r3, [r7, #0]
    b278:	b2db      	uxtb	r3, r3
    b27a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b27e:	b2d9      	uxtb	r1, r3
    b280:	68fa      	ldr	r2, [r7, #12]
    b282:	8813      	ldrh	r3, [r2, #0]
    b284:	f361 03c9 	bfi	r3, r1, #3, #7
    b288:	8013      	strh	r3, [r2, #0]
    rc->data.u_byte.bytecode = code;
    b28a:	68fb      	ldr	r3, [r7, #12]
    b28c:	68ba      	ldr	r2, [r7, #8]
    b28e:	605a      	str	r2, [r3, #4]
    rc->data.u_byte.const_table = const_table;
    b290:	68fb      	ldr	r3, [r7, #12]
    b292:	687a      	ldr	r2, [r7, #4]
    b294:	609a      	str	r2, [r3, #8]
#if MICROPY_DEBUG_PRINTERS
    if (mp_verbose_flag >= 2) {
        mp_bytecode_print(rc, code, len, const_table);
    }
#endif
}
    b296:	bf00      	nop
    b298:	3714      	adds	r7, #20
    b29a:	46bd      	mov	sp, r7
    b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2a0:	4770      	bx	lr
    b2a2:	bf00      	nop

0000b2a4 <mp_make_function_from_raw_code>:
    (void)fun_len;
#endif
}
#endif

mp_obj_t mp_make_function_from_raw_code(const mp_raw_code_t *rc, mp_obj_t def_args, mp_obj_t def_kw_args) {
    b2a4:	b580      	push	{r7, lr}
    b2a6:	b086      	sub	sp, #24
    b2a8:	af00      	add	r7, sp, #0
    b2aa:	60f8      	str	r0, [r7, #12]
    b2ac:	60b9      	str	r1, [r7, #8]
    b2ae:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("make_function_from_raw_code %p\n", rc);
    assert(rc != NULL);
    b2b0:	68fb      	ldr	r3, [r7, #12]
    b2b2:	2b00      	cmp	r3, #0
    b2b4:	d105      	bne.n	b2c2 <mp_make_function_from_raw_code+0x1e>
    b2b6:	4b30      	ldr	r3, [pc, #192]	; (b378 <mp_make_function_from_raw_code+0xd4>)
    b2b8:	4a30      	ldr	r2, [pc, #192]	; (b37c <mp_make_function_from_raw_code+0xd8>)
    b2ba:	2179      	movs	r1, #121	; 0x79
    b2bc:	4830      	ldr	r0, [pc, #192]	; (b380 <mp_make_function_from_raw_code+0xdc>)
    b2be:	f010 f855 	bl	1b36c <__assert_func>

    // def_args must be MP_OBJ_NULL or a tuple
    assert(def_args == MP_OBJ_NULL || MP_OBJ_IS_TYPE(def_args, &mp_type_tuple));
    b2c2:	68bb      	ldr	r3, [r7, #8]
    b2c4:	2b00      	cmp	r3, #0
    b2c6:	d013      	beq.n	b2f0 <mp_make_function_from_raw_code+0x4c>
    b2c8:	68b8      	ldr	r0, [r7, #8]
    b2ca:	f7ff ffa3 	bl	b214 <MP_OBJ_IS_OBJ>
    b2ce:	4603      	mov	r3, r0
    b2d0:	f083 0301 	eor.w	r3, r3, #1
    b2d4:	b2db      	uxtb	r3, r3
    b2d6:	2b00      	cmp	r3, #0
    b2d8:	d104      	bne.n	b2e4 <mp_make_function_from_raw_code+0x40>
    b2da:	68bb      	ldr	r3, [r7, #8]
    b2dc:	681b      	ldr	r3, [r3, #0]
    b2de:	4a29      	ldr	r2, [pc, #164]	; (b384 <mp_make_function_from_raw_code+0xe0>)
    b2e0:	4293      	cmp	r3, r2
    b2e2:	d005      	beq.n	b2f0 <mp_make_function_from_raw_code+0x4c>
    b2e4:	4b28      	ldr	r3, [pc, #160]	; (b388 <mp_make_function_from_raw_code+0xe4>)
    b2e6:	4a25      	ldr	r2, [pc, #148]	; (b37c <mp_make_function_from_raw_code+0xd8>)
    b2e8:	217c      	movs	r1, #124	; 0x7c
    b2ea:	4825      	ldr	r0, [pc, #148]	; (b380 <mp_make_function_from_raw_code+0xdc>)
    b2ec:	f010 f83e 	bl	1b36c <__assert_func>

    // def_kw_args must be MP_OBJ_NULL or a dict
    assert(def_kw_args == MP_OBJ_NULL || MP_OBJ_IS_TYPE(def_kw_args, &mp_type_dict));
    b2f0:	687b      	ldr	r3, [r7, #4]
    b2f2:	2b00      	cmp	r3, #0
    b2f4:	d013      	beq.n	b31e <mp_make_function_from_raw_code+0x7a>
    b2f6:	6878      	ldr	r0, [r7, #4]
    b2f8:	f7ff ff8c 	bl	b214 <MP_OBJ_IS_OBJ>
    b2fc:	4603      	mov	r3, r0
    b2fe:	f083 0301 	eor.w	r3, r3, #1
    b302:	b2db      	uxtb	r3, r3
    b304:	2b00      	cmp	r3, #0
    b306:	d104      	bne.n	b312 <mp_make_function_from_raw_code+0x6e>
    b308:	687b      	ldr	r3, [r7, #4]
    b30a:	681b      	ldr	r3, [r3, #0]
    b30c:	4a1f      	ldr	r2, [pc, #124]	; (b38c <mp_make_function_from_raw_code+0xe8>)
    b30e:	4293      	cmp	r3, r2
    b310:	d005      	beq.n	b31e <mp_make_function_from_raw_code+0x7a>
    b312:	4b1f      	ldr	r3, [pc, #124]	; (b390 <mp_make_function_from_raw_code+0xec>)
    b314:	4a19      	ldr	r2, [pc, #100]	; (b37c <mp_make_function_from_raw_code+0xd8>)
    b316:	217f      	movs	r1, #127	; 0x7f
    b318:	4819      	ldr	r0, [pc, #100]	; (b380 <mp_make_function_from_raw_code+0xdc>)
    b31a:	f010 f827 	bl	1b36c <__assert_func>

    // make the function, depending on the raw code kind
    mp_obj_t fun;
    switch (rc->kind) {
    b31e:	68fb      	ldr	r3, [r7, #12]
    b320:	781b      	ldrb	r3, [r3, #0]
    b322:	f3c3 0302 	ubfx	r3, r3, #0, #3
            fun = mp_obj_new_fun_asm(rc->n_pos_args, rc->data.u_native.fun_data, rc->data.u_native.type_sig);
            break;
        #endif
        default:
            // rc->kind should always be set and BYTECODE is the only remaining case
            assert(rc->kind == MP_CODE_BYTECODE);
    b326:	68fb      	ldr	r3, [r7, #12]
    b328:	781b      	ldrb	r3, [r3, #0]
    b32a:	f003 0307 	and.w	r3, r3, #7
    b32e:	b2db      	uxtb	r3, r3
    b330:	2b02      	cmp	r3, #2
    b332:	d005      	beq.n	b340 <mp_make_function_from_raw_code+0x9c>
    b334:	4b17      	ldr	r3, [pc, #92]	; (b394 <mp_make_function_from_raw_code+0xf0>)
    b336:	4a11      	ldr	r2, [pc, #68]	; (b37c <mp_make_function_from_raw_code+0xd8>)
    b338:	2193      	movs	r1, #147	; 0x93
    b33a:	4811      	ldr	r0, [pc, #68]	; (b380 <mp_make_function_from_raw_code+0xdc>)
    b33c:	f010 f816 	bl	1b36c <__assert_func>
            fun = mp_obj_new_fun_bc(def_args, def_kw_args, rc->data.u_byte.bytecode, rc->data.u_byte.const_table);
    b340:	68fb      	ldr	r3, [r7, #12]
    b342:	685a      	ldr	r2, [r3, #4]
    b344:	68fb      	ldr	r3, [r7, #12]
    b346:	689b      	ldr	r3, [r3, #8]
    b348:	6879      	ldr	r1, [r7, #4]
    b34a:	68b8      	ldr	r0, [r7, #8]
    b34c:	f004 fd64 	bl	fe18 <mp_obj_new_fun_bc>
    b350:	6178      	str	r0, [r7, #20]
            break;
    b352:	bf00      	nop
    }

    // check for generator functions and if so wrap in generator object
    if ((rc->scope_flags & MP_SCOPE_FLAG_GENERATOR) != 0) {
    b354:	68fb      	ldr	r3, [r7, #12]
    b356:	881b      	ldrh	r3, [r3, #0]
    b358:	f3c3 03c6 	ubfx	r3, r3, #3, #7
    b35c:	b2db      	uxtb	r3, r3
    b35e:	f003 0304 	and.w	r3, r3, #4
    b362:	2b00      	cmp	r3, #0
    b364:	d003      	beq.n	b36e <mp_make_function_from_raw_code+0xca>
        fun = mp_obj_new_gen_wrap(fun);
    b366:	6978      	ldr	r0, [r7, #20]
    b368:	f004 fe48 	bl	fffc <mp_obj_new_gen_wrap>
    b36c:	6178      	str	r0, [r7, #20]
    }

    return fun;
    b36e:	697b      	ldr	r3, [r7, #20]
}
    b370:	4618      	mov	r0, r3
    b372:	3718      	adds	r7, #24
    b374:	46bd      	mov	sp, r7
    b376:	bd80      	pop	{r7, pc}
    b378:	0001f54c 	.word	0x0001f54c
    b37c:	0001f61c 	.word	0x0001f61c
    b380:	0001f558 	.word	0x0001f558
    b384:	00021e68 	.word	0x00021e68
    b388:	0001f56c 	.word	0x0001f56c
    b38c:	000200e8 	.word	0x000200e8
    b390:	0001f5b0 	.word	0x0001f5b0
    b394:	0001f5fc 	.word	0x0001f5fc

0000b398 <mp_make_closure_from_raw_code>:

mp_obj_t mp_make_closure_from_raw_code(const mp_raw_code_t *rc, mp_uint_t n_closed_over, const mp_obj_t *args) {
    b398:	b580      	push	{r7, lr}
    b39a:	b086      	sub	sp, #24
    b39c:	af00      	add	r7, sp, #0
    b39e:	60f8      	str	r0, [r7, #12]
    b3a0:	60b9      	str	r1, [r7, #8]
    b3a2:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("make_closure_from_raw_code %p " UINT_FMT " %p\n", rc, n_closed_over, args);
    // make function object
    mp_obj_t ffun;
    if (n_closed_over & 0x100) {
    b3a4:	68bb      	ldr	r3, [r7, #8]
    b3a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    b3aa:	2b00      	cmp	r3, #0
    b3ac:	d00a      	beq.n	b3c4 <mp_make_closure_from_raw_code+0x2c>
        // default positional and keyword args given
        ffun = mp_make_function_from_raw_code(rc, args[0], args[1]);
    b3ae:	687b      	ldr	r3, [r7, #4]
    b3b0:	6819      	ldr	r1, [r3, #0]
    b3b2:	687b      	ldr	r3, [r7, #4]
    b3b4:	3304      	adds	r3, #4
    b3b6:	681b      	ldr	r3, [r3, #0]
    b3b8:	461a      	mov	r2, r3
    b3ba:	68f8      	ldr	r0, [r7, #12]
    b3bc:	f7ff ff72 	bl	b2a4 <mp_make_function_from_raw_code>
    b3c0:	6178      	str	r0, [r7, #20]
    b3c2:	e005      	b.n	b3d0 <mp_make_closure_from_raw_code+0x38>
    } else {
        // default positional and keyword args not given
        ffun = mp_make_function_from_raw_code(rc, MP_OBJ_NULL, MP_OBJ_NULL);
    b3c4:	2200      	movs	r2, #0
    b3c6:	2100      	movs	r1, #0
    b3c8:	68f8      	ldr	r0, [r7, #12]
    b3ca:	f7ff ff6b 	bl	b2a4 <mp_make_function_from_raw_code>
    b3ce:	6178      	str	r0, [r7, #20]
    }
    // wrap function in closure object
    return mp_obj_new_closure(ffun, n_closed_over & 0xff, args + ((n_closed_over >> 7) & 2));
    b3d0:	68bb      	ldr	r3, [r7, #8]
    b3d2:	b2d9      	uxtb	r1, r3
    b3d4:	68bb      	ldr	r3, [r7, #8]
    b3d6:	09db      	lsrs	r3, r3, #7
    b3d8:	f003 0302 	and.w	r3, r3, #2
    b3dc:	009b      	lsls	r3, r3, #2
    b3de:	687a      	ldr	r2, [r7, #4]
    b3e0:	4413      	add	r3, r2
    b3e2:	461a      	mov	r2, r3
    b3e4:	6978      	ldr	r0, [r7, #20]
    b3e6:	f002 fffb 	bl	e3e0 <mp_obj_new_closure>
    b3ea:	4603      	mov	r3, r0
}
    b3ec:	4618      	mov	r0, r3
    b3ee:	3718      	adds	r7, #24
    b3f0:	46bd      	mov	sp, r7
    b3f2:	bd80      	pop	{r7, pc}

0000b3f4 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
    b3f4:	b480      	push	{r7}
    b3f6:	b083      	sub	sp, #12
    b3f8:	af00      	add	r7, sp, #0
    b3fa:	6078      	str	r0, [r7, #4]
    b3fc:	687b      	ldr	r3, [r7, #4]
    b3fe:	f003 0301 	and.w	r3, r3, #1
    b402:	2b00      	cmp	r3, #0
    b404:	bf14      	ite	ne
    b406:	2301      	movne	r3, #1
    b408:	2300      	moveq	r3, #0
    b40a:	b2db      	uxtb	r3, r3
    b40c:	4618      	mov	r0, r3
    b40e:	370c      	adds	r7, #12
    b410:	46bd      	mov	sp, r7
    b412:	f85d 7b04 	ldr.w	r7, [sp], #4
    b416:	4770      	bx	lr

0000b418 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
    b418:	b480      	push	{r7}
    b41a:	b083      	sub	sp, #12
    b41c:	af00      	add	r7, sp, #0
    b41e:	6078      	str	r0, [r7, #4]
    b420:	687b      	ldr	r3, [r7, #4]
    b422:	f003 0303 	and.w	r3, r3, #3
    b426:	2b02      	cmp	r3, #2
    b428:	bf0c      	ite	eq
    b42a:	2301      	moveq	r3, #1
    b42c:	2300      	movne	r3, #0
    b42e:	b2db      	uxtb	r3, r3
    b430:	4618      	mov	r0, r3
    b432:	370c      	adds	r7, #12
    b434:	46bd      	mov	sp, r7
    b436:	f85d 7b04 	ldr.w	r7, [sp], #4
    b43a:	4770      	bx	lr

0000b43c <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    b43c:	b480      	push	{r7}
    b43e:	b083      	sub	sp, #12
    b440:	af00      	add	r7, sp, #0
    b442:	6078      	str	r0, [r7, #4]
    b444:	687b      	ldr	r3, [r7, #4]
    b446:	f003 0303 	and.w	r3, r3, #3
    b44a:	2b00      	cmp	r3, #0
    b44c:	bf0c      	ite	eq
    b44e:	2301      	moveq	r3, #1
    b450:	2300      	movne	r3, #0
    b452:	b2db      	uxtb	r3, r3
    b454:	4618      	mov	r0, r3
    b456:	370c      	adds	r7, #12
    b458:	46bd      	mov	sp, r7
    b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b45e:	4770      	bx	lr

0000b460 <MP_MAP_SLOT_IS_FILLED>:
    MP_MAP_LOOKUP_ADD_IF_NOT_FOUND_OR_REMOVE_IF_FOUND = 3, // only valid for mp_set_lookup
} mp_map_lookup_kind_t;

extern const mp_map_t mp_const_empty_map;

static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
    b460:	b480      	push	{r7}
    b462:	b083      	sub	sp, #12
    b464:	af00      	add	r7, sp, #0
    b466:	6078      	str	r0, [r7, #4]
    b468:	6039      	str	r1, [r7, #0]
    b46a:	687b      	ldr	r3, [r7, #4]
    b46c:	689a      	ldr	r2, [r3, #8]
    b46e:	683b      	ldr	r3, [r7, #0]
    b470:	00db      	lsls	r3, r3, #3
    b472:	4413      	add	r3, r2
    b474:	681b      	ldr	r3, [r3, #0]
    b476:	2b00      	cmp	r3, #0
    b478:	d009      	beq.n	b48e <MP_MAP_SLOT_IS_FILLED+0x2e>
    b47a:	687b      	ldr	r3, [r7, #4]
    b47c:	689a      	ldr	r2, [r3, #8]
    b47e:	683b      	ldr	r3, [r7, #0]
    b480:	00db      	lsls	r3, r3, #3
    b482:	4413      	add	r3, r2
    b484:	681b      	ldr	r3, [r3, #0]
    b486:	2b08      	cmp	r3, #8
    b488:	d001      	beq.n	b48e <MP_MAP_SLOT_IS_FILLED+0x2e>
    b48a:	2301      	movs	r3, #1
    b48c:	e000      	b.n	b490 <MP_MAP_SLOT_IS_FILLED+0x30>
    b48e:	2300      	movs	r3, #0
    b490:	f003 0301 	and.w	r3, r3, #1
    b494:	b2db      	uxtb	r3, r3
    b496:	4618      	mov	r0, r3
    b498:	370c      	adds	r7, #12
    b49a:	46bd      	mov	sp, r7
    b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4a0:	4770      	bx	lr
    b4a2:	bf00      	nop

0000b4a4 <mp_obj_new_bool>:
extern const struct _mp_obj_exception_t mp_const_GeneratorExit_obj;

// General API for objects

mp_obj_t mp_obj_new_type(qstr name, mp_obj_t bases_tuple, mp_obj_t locals_dict);
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    b4a4:	b480      	push	{r7}
    b4a6:	b083      	sub	sp, #12
    b4a8:	af00      	add	r7, sp, #0
    b4aa:	6078      	str	r0, [r7, #4]
    b4ac:	687b      	ldr	r3, [r7, #4]
    b4ae:	2b00      	cmp	r3, #0
    b4b0:	d001      	beq.n	b4b6 <mp_obj_new_bool+0x12>
    b4b2:	4b04      	ldr	r3, [pc, #16]	; (b4c4 <mp_obj_new_bool+0x20>)
    b4b4:	e000      	b.n	b4b8 <mp_obj_new_bool+0x14>
    b4b6:	4b04      	ldr	r3, [pc, #16]	; (b4c8 <mp_obj_new_bool+0x24>)
    b4b8:	4618      	mov	r0, r3
    b4ba:	370c      	adds	r7, #12
    b4bc:	46bd      	mov	sp, r7
    b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4c2:	4770      	bx	lr
    b4c4:	0001fc44 	.word	0x0001fc44
    b4c8:	0001fc3c 	.word	0x0001fc3c

0000b4cc <mp_local_free>:
static inline void mp_local_free(void *ptr) {
    b4cc:	b480      	push	{r7}
    b4ce:	b083      	sub	sp, #12
    b4d0:	af00      	add	r7, sp, #0
    b4d2:	6078      	str	r0, [r7, #4]
}
    b4d4:	bf00      	nop
    b4d6:	370c      	adds	r7, #12
    b4d8:	46bd      	mov	sp, r7
    b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4de:	4770      	bx	lr

0000b4e0 <mp_nonlocal_alloc>:

static inline void *mp_nonlocal_alloc(size_t n_bytes) {
    b4e0:	b580      	push	{r7, lr}
    b4e2:	b082      	sub	sp, #8
    b4e4:	af00      	add	r7, sp, #0
    b4e6:	6078      	str	r0, [r7, #4]
    return m_new(uint8_t, n_bytes);
    b4e8:	6878      	ldr	r0, [r7, #4]
    b4ea:	f7f4 ff17 	bl	31c <m_malloc>
    b4ee:	4603      	mov	r3, r0
}
    b4f0:	4618      	mov	r0, r3
    b4f2:	3708      	adds	r7, #8
    b4f4:	46bd      	mov	sp, r7
    b4f6:	bd80      	pop	{r7, pc}

0000b4f8 <mp_nonlocal_realloc>:

static inline void *mp_nonlocal_realloc(void *ptr, size_t old_n_bytes, size_t new_n_bytes) {
    b4f8:	b580      	push	{r7, lr}
    b4fa:	b084      	sub	sp, #16
    b4fc:	af00      	add	r7, sp, #0
    b4fe:	60f8      	str	r0, [r7, #12]
    b500:	60b9      	str	r1, [r7, #8]
    b502:	607a      	str	r2, [r7, #4]
    return m_renew(uint8_t, ptr, old_n_bytes, new_n_bytes);
    b504:	6879      	ldr	r1, [r7, #4]
    b506:	68f8      	ldr	r0, [r7, #12]
    b508:	f7f4 ff3c 	bl	384 <m_realloc>
    b50c:	4603      	mov	r3, r0
}
    b50e:	4618      	mov	r0, r3
    b510:	3710      	adds	r7, #16
    b512:	46bd      	mov	sp, r7
    b514:	bd80      	pop	{r7, pc}
    b516:	bf00      	nop

0000b518 <mp_nonlocal_free>:

static inline void mp_nonlocal_free(void *ptr, size_t n_bytes) {
    b518:	b580      	push	{r7, lr}
    b51a:	b082      	sub	sp, #8
    b51c:	af00      	add	r7, sp, #0
    b51e:	6078      	str	r0, [r7, #4]
    b520:	6039      	str	r1, [r7, #0]
    m_del(uint8_t, ptr, n_bytes);
    b522:	6878      	ldr	r0, [r7, #4]
    b524:	f7f4 ff5c 	bl	3e0 <m_free>
}
    b528:	bf00      	nop
    b52a:	3708      	adds	r7, #8
    b52c:	46bd      	mov	sp, r7
    b52e:	bd80      	pop	{r7, pc}

0000b530 <mp_locals_get>:
void mp_arg_parse_all(size_t n_pos, const mp_obj_t *pos, mp_map_t *kws, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
void mp_arg_parse_all_kw_array(size_t n_pos, size_t n_kw, const mp_obj_t *args, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
NORETURN void mp_arg_error_terse_mismatch(void);
NORETURN void mp_arg_error_unimpl_kw(void);

static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
    b530:	b480      	push	{r7}
    b532:	af00      	add	r7, sp, #0
    b534:	4b03      	ldr	r3, [pc, #12]	; (b544 <mp_locals_get+0x14>)
    b536:	685b      	ldr	r3, [r3, #4]
    b538:	4618      	mov	r0, r3
    b53a:	46bd      	mov	sp, r7
    b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b540:	4770      	bx	lr
    b542:	bf00      	nop
    b544:	20000a2c 	.word	0x20000a2c

0000b548 <mp_locals_set>:
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
    b548:	b480      	push	{r7}
    b54a:	b083      	sub	sp, #12
    b54c:	af00      	add	r7, sp, #0
    b54e:	6078      	str	r0, [r7, #4]
    b550:	4a04      	ldr	r2, [pc, #16]	; (b564 <mp_locals_set+0x1c>)
    b552:	687b      	ldr	r3, [r7, #4]
    b554:	6053      	str	r3, [r2, #4]
    b556:	bf00      	nop
    b558:	370c      	adds	r7, #12
    b55a:	46bd      	mov	sp, r7
    b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b560:	4770      	bx	lr
    b562:	bf00      	nop
    b564:	20000a2c 	.word	0x20000a2c

0000b568 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    b568:	b480      	push	{r7}
    b56a:	af00      	add	r7, sp, #0
    b56c:	4b03      	ldr	r3, [pc, #12]	; (b57c <mp_globals_get+0x14>)
    b56e:	689b      	ldr	r3, [r3, #8]
    b570:	4618      	mov	r0, r3
    b572:	46bd      	mov	sp, r7
    b574:	f85d 7b04 	ldr.w	r7, [sp], #4
    b578:	4770      	bx	lr
    b57a:	bf00      	nop
    b57c:	20000a2c 	.word	0x20000a2c

0000b580 <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    b580:	b480      	push	{r7}
    b582:	b083      	sub	sp, #12
    b584:	af00      	add	r7, sp, #0
    b586:	6078      	str	r0, [r7, #4]
    b588:	4a04      	ldr	r2, [pc, #16]	; (b59c <mp_globals_set+0x1c>)
    b58a:	687b      	ldr	r3, [r7, #4]
    b58c:	6093      	str	r3, [r2, #8]
    b58e:	bf00      	nop
    b590:	370c      	adds	r7, #12
    b592:	46bd      	mov	sp, r7
    b594:	f85d 7b04 	ldr.w	r7, [sp], #4
    b598:	4770      	bx	lr
    b59a:	bf00      	nop
    b59c:	20000a2c 	.word	0x20000a2c

0000b5a0 <mp_init>:
const mp_obj_module_t mp_module___main__ = {
    .base = { &mp_type_module },
    .globals = (mp_obj_dict_t*)&MP_STATE_VM(dict_main),
};

void mp_init(void) {
    b5a0:	b580      	push	{r7, lr}
    b5a2:	af00      	add	r7, sp, #0
    qstr_init();
    b5a4:	f7f5 fc62 	bl	e6c <qstr_init>

    // no pending exceptions to start with
    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
    b5a8:	4b0d      	ldr	r3, [pc, #52]	; (b5e0 <mp_init+0x40>)
    b5aa:	2200      	movs	r2, #0
    b5ac:	635a      	str	r2, [r3, #52]	; 0x34
    MICROPY_PORT_INIT_FUNC;
#endif

    #if MICROPY_ENABLE_COMPILER
    // optimization disabled by default
    MP_STATE_VM(mp_optimise_value) = 0;
    b5ae:	4b0c      	ldr	r3, [pc, #48]	; (b5e0 <mp_init+0x40>)
    b5b0:	2200      	movs	r2, #0
    b5b2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    #endif

    // init global module dict
    mp_obj_dict_init(&MP_STATE_VM(mp_loaded_modules_dict), 3);
    b5b6:	2103      	movs	r1, #3
    b5b8:	480a      	ldr	r0, [pc, #40]	; (b5e4 <mp_init+0x44>)
    b5ba:	f003 fdab 	bl	f114 <mp_obj_dict_init>

    // initialise the __main__ module
    mp_obj_dict_init(&MP_STATE_VM(dict_main), 1);
    b5be:	2101      	movs	r1, #1
    b5c0:	4809      	ldr	r0, [pc, #36]	; (b5e8 <mp_init+0x48>)
    b5c2:	f003 fda7 	bl	f114 <mp_obj_dict_init>
    mp_obj_dict_store(MP_OBJ_FROM_PTR(&MP_STATE_VM(dict_main)), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
    b5c6:	2266      	movs	r2, #102	; 0x66
    b5c8:	216e      	movs	r1, #110	; 0x6e
    b5ca:	4807      	ldr	r0, [pc, #28]	; (b5e8 <mp_init+0x48>)
    b5cc:	f003 fdd8 	bl	f180 <mp_obj_dict_store>

    // locals = globals for outer module (see Objects/frameobject.c/PyFrame_New())
    mp_locals_set(&MP_STATE_VM(dict_main));
    b5d0:	4805      	ldr	r0, [pc, #20]	; (b5e8 <mp_init+0x48>)
    b5d2:	f7ff ffb9 	bl	b548 <mp_locals_set>
    mp_globals_set(&MP_STATE_VM(dict_main));
    b5d6:	4804      	ldr	r0, [pc, #16]	; (b5e8 <mp_init+0x48>)
    b5d8:	f7ff ffd2 	bl	b580 <mp_globals_set>
    #if MICROPY_PY_THREAD_GIL
    mp_thread_mutex_init(&MP_STATE_VM(gil_mutex));
    #endif

    MP_THREAD_GIL_ENTER();
}
    b5dc:	bf00      	nop
    b5de:	bd80      	pop	{r7, pc}
    b5e0:	20000a2c 	.word	0x20000a2c
    b5e4:	20000a50 	.word	0x20000a50
    b5e8:	20000a64 	.word	0x20000a64

0000b5ec <mp_deinit>:

void mp_deinit(void) {
    b5ec:	b480      	push	{r7}
    b5ee:	af00      	add	r7, sp, #0

    // call port specific deinitialization if any
#ifdef MICROPY_PORT_INIT_FUNC
    MICROPY_PORT_DEINIT_FUNC;
#endif
}
    b5f0:	bf00      	nop
    b5f2:	46bd      	mov	sp, r7
    b5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5f8:	4770      	bx	lr
    b5fa:	bf00      	nop

0000b5fc <mp_load_name>:

mp_obj_t mp_load_name(qstr qst) {
    b5fc:	b590      	push	{r4, r7, lr}
    b5fe:	b085      	sub	sp, #20
    b600:	af00      	add	r7, sp, #0
    b602:	6078      	str	r0, [r7, #4]
    // logic: search locals, globals, builtins
    DEBUG_OP_printf("load name %s\n", qstr_str(qst));
    // If we're at the outer scope (locals == globals), dispatch to load_global right away
    if (mp_locals_get() != mp_globals_get()) {
    b604:	f7ff ff94 	bl	b530 <mp_locals_get>
    b608:	4604      	mov	r4, r0
    b60a:	f7ff ffad 	bl	b568 <mp_globals_get>
    b60e:	4603      	mov	r3, r0
    b610:	429c      	cmp	r4, r3
    b612:	d012      	beq.n	b63a <mp_load_name+0x3e>
        mp_map_elem_t *elem = mp_map_lookup(&mp_locals_get()->map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    b614:	f7ff ff8c 	bl	b530 <mp_locals_get>
    b618:	4603      	mov	r3, r0
    b61a:	1d18      	adds	r0, r3, #4
    b61c:	687b      	ldr	r3, [r7, #4]
    b61e:	009b      	lsls	r3, r3, #2
    b620:	f043 0302 	orr.w	r3, r3, #2
    b624:	2200      	movs	r2, #0
    b626:	4619      	mov	r1, r3
    b628:	f001 ff4a 	bl	d4c0 <mp_map_lookup>
    b62c:	60f8      	str	r0, [r7, #12]
        if (elem != NULL) {
    b62e:	68fb      	ldr	r3, [r7, #12]
    b630:	2b00      	cmp	r3, #0
    b632:	d002      	beq.n	b63a <mp_load_name+0x3e>
            return elem->value;
    b634:	68fb      	ldr	r3, [r7, #12]
    b636:	685b      	ldr	r3, [r3, #4]
    b638:	e003      	b.n	b642 <mp_load_name+0x46>
        }
    }
    return mp_load_global(qst);
    b63a:	6878      	ldr	r0, [r7, #4]
    b63c:	f000 f806 	bl	b64c <mp_load_global>
    b640:	4603      	mov	r3, r0
}
    b642:	4618      	mov	r0, r3
    b644:	3714      	adds	r7, #20
    b646:	46bd      	mov	sp, r7
    b648:	bd90      	pop	{r4, r7, pc}
    b64a:	bf00      	nop

0000b64c <mp_load_global>:

mp_obj_t mp_load_global(qstr qst) {
    b64c:	b580      	push	{r7, lr}
    b64e:	b084      	sub	sp, #16
    b650:	af00      	add	r7, sp, #0
    b652:	6078      	str	r0, [r7, #4]
    // logic: search globals, builtins
    DEBUG_OP_printf("load global %s\n", qstr_str(qst));
    mp_map_elem_t *elem = mp_map_lookup(&mp_globals_get()->map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    b654:	f7ff ff88 	bl	b568 <mp_globals_get>
    b658:	4603      	mov	r3, r0
    b65a:	1d18      	adds	r0, r3, #4
    b65c:	687b      	ldr	r3, [r7, #4]
    b65e:	009b      	lsls	r3, r3, #2
    b660:	f043 0302 	orr.w	r3, r3, #2
    b664:	2200      	movs	r2, #0
    b666:	4619      	mov	r1, r3
    b668:	f001 ff2a 	bl	d4c0 <mp_map_lookup>
    b66c:	60f8      	str	r0, [r7, #12]
    if (elem == NULL) {
    b66e:	68fb      	ldr	r3, [r7, #12]
    b670:	2b00      	cmp	r3, #0
    b672:	d110      	bne.n	b696 <mp_load_global+0x4a>
            if (elem != NULL) {
                return elem->value;
            }
        }
        #endif
        elem = mp_map_lookup((mp_map_t*)&mp_module_builtins_globals.map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP);
    b674:	687b      	ldr	r3, [r7, #4]
    b676:	009b      	lsls	r3, r3, #2
    b678:	f043 0302 	orr.w	r3, r3, #2
    b67c:	2200      	movs	r2, #0
    b67e:	4619      	mov	r1, r3
    b680:	4808      	ldr	r0, [pc, #32]	; (b6a4 <mp_load_global+0x58>)
    b682:	f001 ff1d 	bl	d4c0 <mp_map_lookup>
    b686:	60f8      	str	r0, [r7, #12]
        if (elem == NULL) {
    b688:	68fb      	ldr	r3, [r7, #12]
    b68a:	2b00      	cmp	r3, #0
    b68c:	d103      	bne.n	b696 <mp_load_global+0x4a>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_msg(&mp_type_NameError, "name not defined");
    b68e:	4906      	ldr	r1, [pc, #24]	; (b6a8 <mp_load_global+0x5c>)
    b690:	4806      	ldr	r0, [pc, #24]	; (b6ac <mp_load_global+0x60>)
    b692:	f001 fc83 	bl	cf9c <mp_raise_msg>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_NameError,
                    "name '%q' is not defined", qst));
            }
        }
    }
    return elem->value;
    b696:	68fb      	ldr	r3, [r7, #12]
    b698:	685b      	ldr	r3, [r3, #4]
}
    b69a:	4618      	mov	r0, r3
    b69c:	3710      	adds	r7, #16
    b69e:	46bd      	mov	sp, r7
    b6a0:	bd80      	pop	{r7, pc}
    b6a2:	bf00      	nop
    b6a4:	00022a6c 	.word	0x00022a6c
    b6a8:	0001f644 	.word	0x0001f644
    b6ac:	000205fc 	.word	0x000205fc

0000b6b0 <mp_load_build_class>:

mp_obj_t mp_load_build_class(void) {
    b6b0:	b480      	push	{r7}
    b6b2:	af00      	add	r7, sp, #0
        if (elem != NULL) {
            return elem->value;
        }
    }
    #endif
    return MP_OBJ_FROM_PTR(&mp_builtin___build_class___obj);
    b6b4:	4b02      	ldr	r3, [pc, #8]	; (b6c0 <mp_load_build_class+0x10>)
}
    b6b6:	4618      	mov	r0, r3
    b6b8:	46bd      	mov	sp, r7
    b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    b6be:	4770      	bx	lr
    b6c0:	00022678 	.word	0x00022678

0000b6c4 <mp_store_name>:

void mp_store_name(qstr qst, mp_obj_t obj) {
    b6c4:	b580      	push	{r7, lr}
    b6c6:	b082      	sub	sp, #8
    b6c8:	af00      	add	r7, sp, #0
    b6ca:	6078      	str	r0, [r7, #4]
    b6cc:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("store name %s <- %p\n", qstr_str(qst), obj);
    mp_obj_dict_store(MP_OBJ_FROM_PTR(mp_locals_get()), MP_OBJ_NEW_QSTR(qst), obj);
    b6ce:	f7ff ff2f 	bl	b530 <mp_locals_get>
    b6d2:	687b      	ldr	r3, [r7, #4]
    b6d4:	009b      	lsls	r3, r3, #2
    b6d6:	f043 0302 	orr.w	r3, r3, #2
    b6da:	683a      	ldr	r2, [r7, #0]
    b6dc:	4619      	mov	r1, r3
    b6de:	f003 fd4f 	bl	f180 <mp_obj_dict_store>
}
    b6e2:	bf00      	nop
    b6e4:	3708      	adds	r7, #8
    b6e6:	46bd      	mov	sp, r7
    b6e8:	bd80      	pop	{r7, pc}
    b6ea:	bf00      	nop

0000b6ec <mp_delete_name>:

void mp_delete_name(qstr qst) {
    b6ec:	b580      	push	{r7, lr}
    b6ee:	b082      	sub	sp, #8
    b6f0:	af00      	add	r7, sp, #0
    b6f2:	6078      	str	r0, [r7, #4]
    DEBUG_OP_printf("delete name %s\n", qstr_str(qst));
    // TODO convert KeyError to NameError if qst not found
    mp_obj_dict_delete(MP_OBJ_FROM_PTR(mp_locals_get()), MP_OBJ_NEW_QSTR(qst));
    b6f4:	f7ff ff1c 	bl	b530 <mp_locals_get>
    b6f8:	4602      	mov	r2, r0
    b6fa:	687b      	ldr	r3, [r7, #4]
    b6fc:	009b      	lsls	r3, r3, #2
    b6fe:	f043 0302 	orr.w	r3, r3, #2
    b702:	4619      	mov	r1, r3
    b704:	4610      	mov	r0, r2
    b706:	f003 fd73 	bl	f1f0 <mp_obj_dict_delete>
}
    b70a:	bf00      	nop
    b70c:	3708      	adds	r7, #8
    b70e:	46bd      	mov	sp, r7
    b710:	bd80      	pop	{r7, pc}
    b712:	bf00      	nop

0000b714 <mp_store_global>:

void mp_store_global(qstr qst, mp_obj_t obj) {
    b714:	b580      	push	{r7, lr}
    b716:	b082      	sub	sp, #8
    b718:	af00      	add	r7, sp, #0
    b71a:	6078      	str	r0, [r7, #4]
    b71c:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("store global %s <- %p\n", qstr_str(qst), obj);
    mp_obj_dict_store(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(qst), obj);
    b71e:	f7ff ff23 	bl	b568 <mp_globals_get>
    b722:	687b      	ldr	r3, [r7, #4]
    b724:	009b      	lsls	r3, r3, #2
    b726:	f043 0302 	orr.w	r3, r3, #2
    b72a:	683a      	ldr	r2, [r7, #0]
    b72c:	4619      	mov	r1, r3
    b72e:	f003 fd27 	bl	f180 <mp_obj_dict_store>
}
    b732:	bf00      	nop
    b734:	3708      	adds	r7, #8
    b736:	46bd      	mov	sp, r7
    b738:	bd80      	pop	{r7, pc}
    b73a:	bf00      	nop

0000b73c <mp_delete_global>:

void mp_delete_global(qstr qst) {
    b73c:	b580      	push	{r7, lr}
    b73e:	b082      	sub	sp, #8
    b740:	af00      	add	r7, sp, #0
    b742:	6078      	str	r0, [r7, #4]
    DEBUG_OP_printf("delete global %s\n", qstr_str(qst));
    // TODO convert KeyError to NameError if qst not found
    mp_obj_dict_delete(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(qst));
    b744:	f7ff ff10 	bl	b568 <mp_globals_get>
    b748:	4602      	mov	r2, r0
    b74a:	687b      	ldr	r3, [r7, #4]
    b74c:	009b      	lsls	r3, r3, #2
    b74e:	f043 0302 	orr.w	r3, r3, #2
    b752:	4619      	mov	r1, r3
    b754:	4610      	mov	r0, r2
    b756:	f003 fd4b 	bl	f1f0 <mp_obj_dict_delete>
}
    b75a:	bf00      	nop
    b75c:	3708      	adds	r7, #8
    b75e:	46bd      	mov	sp, r7
    b760:	bd80      	pop	{r7, pc}
    b762:	bf00      	nop

0000b764 <mp_unary_op>:

mp_obj_t mp_unary_op(mp_unary_op_t op, mp_obj_t arg) {
    b764:	b580      	push	{r7, lr}
    b766:	b088      	sub	sp, #32
    b768:	af00      	add	r7, sp, #0
    b76a:	6078      	str	r0, [r7, #4]
    b76c:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("unary " UINT_FMT " %q %p\n", op, mp_unary_op_method_name[op], arg);

    if (op == MP_UNARY_OP_NOT) {
    b76e:	687b      	ldr	r3, [r7, #4]
    b770:	2b03      	cmp	r3, #3
    b772:	d10b      	bne.n	b78c <mp_unary_op+0x28>
        // "not x" is the negative of whether "x" is true per Python semantics
        return mp_obj_new_bool(mp_obj_is_true(arg) == 0);
    b774:	6838      	ldr	r0, [r7, #0]
    b776:	f002 f92b 	bl	d9d0 <mp_obj_is_true>
    b77a:	4603      	mov	r3, r0
    b77c:	f083 0301 	eor.w	r3, r3, #1
    b780:	b2db      	uxtb	r3, r3
    b782:	4618      	mov	r0, r3
    b784:	f7ff fe8e 	bl	b4a4 <mp_obj_new_bool>
    b788:	4603      	mov	r3, r0
    b78a:	e0c3      	b.n	b914 <mp_unary_op+0x1b0>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    b78c:	6838      	ldr	r0, [r7, #0]
    b78e:	f7ff fe31 	bl	b3f4 <MP_OBJ_IS_SMALL_INT>
    b792:	4603      	mov	r3, r0
    b794:	2b00      	cmp	r3, #0
    b796:	d05e      	beq.n	b856 <mp_unary_op+0xf2>
        mp_int_t val = MP_OBJ_SMALL_INT_VALUE(arg);
    b798:	683b      	ldr	r3, [r7, #0]
    b79a:	105b      	asrs	r3, r3, #1
    b79c:	617b      	str	r3, [r7, #20]
        switch (op) {
    b79e:	687b      	ldr	r3, [r7, #4]
    b7a0:	2b07      	cmp	r3, #7
    b7a2:	d849      	bhi.n	b838 <mp_unary_op+0xd4>
    b7a4:	a201      	add	r2, pc, #4	; (adr r2, b7ac <mp_unary_op+0x48>)
    b7a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b7aa:	bf00      	nop
    b7ac:	0000b7e7 	.word	0x0000b7e7
    b7b0:	0000b7eb 	.word	0x0000b7eb
    b7b4:	0000b839 	.word	0x0000b839
    b7b8:	0000b839 	.word	0x0000b839
    b7bc:	0000b7cd 	.word	0x0000b7cd
    b7c0:	0000b839 	.word	0x0000b839
    b7c4:	0000b7e3 	.word	0x0000b7e3
    b7c8:	0000b80d 	.word	0x0000b80d
            case MP_UNARY_OP_BOOL:
                return mp_obj_new_bool(val != 0);
    b7cc:	697b      	ldr	r3, [r7, #20]
    b7ce:	2b00      	cmp	r3, #0
    b7d0:	bf14      	ite	ne
    b7d2:	2301      	movne	r3, #1
    b7d4:	2300      	moveq	r3, #0
    b7d6:	b2db      	uxtb	r3, r3
    b7d8:	4618      	mov	r0, r3
    b7da:	f7ff fe63 	bl	b4a4 <mp_obj_new_bool>
    b7de:	4603      	mov	r3, r0
    b7e0:	e098      	b.n	b914 <mp_unary_op+0x1b0>
            case MP_UNARY_OP_HASH:
                return arg;
    b7e2:	683b      	ldr	r3, [r7, #0]
    b7e4:	e096      	b.n	b914 <mp_unary_op+0x1b0>
            case MP_UNARY_OP_POSITIVE:
                return arg;
    b7e6:	683b      	ldr	r3, [r7, #0]
    b7e8:	e094      	b.n	b914 <mp_unary_op+0x1b0>
            case MP_UNARY_OP_NEGATIVE:
                // check for overflow
                if (val == MP_SMALL_INT_MIN) {
    b7ea:	697b      	ldr	r3, [r7, #20]
    b7ec:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
    b7f0:	d106      	bne.n	b800 <mp_unary_op+0x9c>
                    return mp_obj_new_int(-val);
    b7f2:	697b      	ldr	r3, [r7, #20]
    b7f4:	425b      	negs	r3, r3
    b7f6:	4618      	mov	r0, r3
    b7f8:	f005 f8a8 	bl	1094c <mp_obj_new_int>
    b7fc:	4603      	mov	r3, r0
    b7fe:	e089      	b.n	b914 <mp_unary_op+0x1b0>
                } else {
                    return MP_OBJ_NEW_SMALL_INT(-val);
    b800:	697b      	ldr	r3, [r7, #20]
    b802:	425b      	negs	r3, r3
    b804:	005b      	lsls	r3, r3, #1
    b806:	f043 0301 	orr.w	r3, r3, #1
    b80a:	e083      	b.n	b914 <mp_unary_op+0x1b0>
                }
            case MP_UNARY_OP_ABS:
                if (val >= 0) {
    b80c:	697b      	ldr	r3, [r7, #20]
    b80e:	2b00      	cmp	r3, #0
    b810:	db01      	blt.n	b816 <mp_unary_op+0xb2>
                    return arg;
    b812:	683b      	ldr	r3, [r7, #0]
    b814:	e07e      	b.n	b914 <mp_unary_op+0x1b0>
                } else if (val == MP_SMALL_INT_MIN) {
    b816:	697b      	ldr	r3, [r7, #20]
    b818:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
    b81c:	d106      	bne.n	b82c <mp_unary_op+0xc8>
                    // check for overflow
                    return mp_obj_new_int(-val);
    b81e:	697b      	ldr	r3, [r7, #20]
    b820:	425b      	negs	r3, r3
    b822:	4618      	mov	r0, r3
    b824:	f005 f892 	bl	1094c <mp_obj_new_int>
    b828:	4603      	mov	r3, r0
    b82a:	e073      	b.n	b914 <mp_unary_op+0x1b0>
                } else {
                    return MP_OBJ_NEW_SMALL_INT(-val);
    b82c:	697b      	ldr	r3, [r7, #20]
    b82e:	425b      	negs	r3, r3
    b830:	005b      	lsls	r3, r3, #1
    b832:	f043 0301 	orr.w	r3, r3, #1
    b836:	e06d      	b.n	b914 <mp_unary_op+0x1b0>
                }
            default:
                assert(op == MP_UNARY_OP_INVERT);
    b838:	687b      	ldr	r3, [r7, #4]
    b83a:	2b02      	cmp	r3, #2
    b83c:	d005      	beq.n	b84a <mp_unary_op+0xe6>
    b83e:	4b37      	ldr	r3, [pc, #220]	; (b91c <mp_unary_op+0x1b8>)
    b840:	4a37      	ldr	r2, [pc, #220]	; (b920 <mp_unary_op+0x1bc>)
    b842:	21fa      	movs	r1, #250	; 0xfa
    b844:	4837      	ldr	r0, [pc, #220]	; (b924 <mp_unary_op+0x1c0>)
    b846:	f00f fd91 	bl	1b36c <__assert_func>
                return MP_OBJ_NEW_SMALL_INT(~val);
    b84a:	697b      	ldr	r3, [r7, #20]
    b84c:	43db      	mvns	r3, r3
    b84e:	005b      	lsls	r3, r3, #1
    b850:	f043 0301 	orr.w	r3, r3, #1
    b854:	e05e      	b.n	b914 <mp_unary_op+0x1b0>
        }
    } else if (op == MP_UNARY_OP_HASH && MP_OBJ_IS_STR_OR_BYTES(arg)) {
    b856:	687b      	ldr	r3, [r7, #4]
    b858:	2b06      	cmp	r3, #6
    b85a:	d145      	bne.n	b8e8 <mp_unary_op+0x184>
    b85c:	6838      	ldr	r0, [r7, #0]
    b85e:	f7ff fddb 	bl	b418 <MP_OBJ_IS_QSTR>
    b862:	4603      	mov	r3, r0
    b864:	2b00      	cmp	r3, #0
    b866:	d10b      	bne.n	b880 <mp_unary_op+0x11c>
    b868:	6838      	ldr	r0, [r7, #0]
    b86a:	f7ff fde7 	bl	b43c <MP_OBJ_IS_OBJ>
    b86e:	4603      	mov	r3, r0
    b870:	2b00      	cmp	r3, #0
    b872:	d039      	beq.n	b8e8 <mp_unary_op+0x184>
    b874:	683b      	ldr	r3, [r7, #0]
    b876:	681b      	ldr	r3, [r3, #0]
    b878:	699b      	ldr	r3, [r3, #24]
    b87a:	4a2b      	ldr	r2, [pc, #172]	; (b928 <mp_unary_op+0x1c4>)
    b87c:	4293      	cmp	r3, r2
    b87e:	d133      	bne.n	b8e8 <mp_unary_op+0x184>
        // fast path for hashing str/bytes
        GET_STR_HASH(arg, h);
    b880:	6838      	ldr	r0, [r7, #0]
    b882:	f7ff fdc9 	bl	b418 <MP_OBJ_IS_QSTR>
    b886:	4603      	mov	r3, r0
    b888:	2b00      	cmp	r3, #0
    b88a:	d006      	beq.n	b89a <mp_unary_op+0x136>
    b88c:	683b      	ldr	r3, [r7, #0]
    b88e:	089b      	lsrs	r3, r3, #2
    b890:	4618      	mov	r0, r3
    b892:	f7f5 fc91 	bl	11b8 <qstr_hash>
    b896:	61f8      	str	r0, [r7, #28]
    b898:	e002      	b.n	b8a0 <mp_unary_op+0x13c>
    b89a:	683b      	ldr	r3, [r7, #0]
    b89c:	685b      	ldr	r3, [r3, #4]
    b89e:	61fb      	str	r3, [r7, #28]
        if (h == 0) {
    b8a0:	69fb      	ldr	r3, [r7, #28]
    b8a2:	2b00      	cmp	r3, #0
    b8a4:	d11b      	bne.n	b8de <mp_unary_op+0x17a>
            GET_STR_DATA_LEN(arg, data, len);
    b8a6:	6838      	ldr	r0, [r7, #0]
    b8a8:	f7ff fdb6 	bl	b418 <MP_OBJ_IS_QSTR>
    b8ac:	4603      	mov	r3, r0
    b8ae:	2b00      	cmp	r3, #0
    b8b0:	d009      	beq.n	b8c6 <mp_unary_op+0x162>
    b8b2:	683b      	ldr	r3, [r7, #0]
    b8b4:	089b      	lsrs	r3, r3, #2
    b8b6:	f107 0208 	add.w	r2, r7, #8
    b8ba:	4611      	mov	r1, r2
    b8bc:	4618      	mov	r0, r3
    b8be:	f7f5 fca7 	bl	1210 <qstr_data>
    b8c2:	61b8      	str	r0, [r7, #24]
    b8c4:	e005      	b.n	b8d2 <mp_unary_op+0x16e>
    b8c6:	683b      	ldr	r3, [r7, #0]
    b8c8:	689b      	ldr	r3, [r3, #8]
    b8ca:	60bb      	str	r3, [r7, #8]
    b8cc:	683b      	ldr	r3, [r7, #0]
    b8ce:	68db      	ldr	r3, [r3, #12]
    b8d0:	61bb      	str	r3, [r7, #24]
            h = qstr_compute_hash(data, len);
    b8d2:	68bb      	ldr	r3, [r7, #8]
    b8d4:	4619      	mov	r1, r3
    b8d6:	69b8      	ldr	r0, [r7, #24]
    b8d8:	f7f5 fa9c 	bl	e14 <qstr_compute_hash>
    b8dc:	61f8      	str	r0, [r7, #28]
        }
        return MP_OBJ_NEW_SMALL_INT(h);
    b8de:	69fb      	ldr	r3, [r7, #28]
    b8e0:	005b      	lsls	r3, r3, #1
    b8e2:	f043 0301 	orr.w	r3, r3, #1
    b8e6:	e015      	b.n	b914 <mp_unary_op+0x1b0>
    } else {
        mp_obj_type_t *type = mp_obj_get_type(arg);
    b8e8:	6838      	ldr	r0, [r7, #0]
    b8ea:	f001 ff93 	bl	d814 <mp_obj_get_type>
    b8ee:	6138      	str	r0, [r7, #16]
        if (type->unary_op != NULL) {
    b8f0:	693b      	ldr	r3, [r7, #16]
    b8f2:	695b      	ldr	r3, [r3, #20]
    b8f4:	2b00      	cmp	r3, #0
    b8f6:	d00a      	beq.n	b90e <mp_unary_op+0x1aa>
            mp_obj_t result = type->unary_op(op, arg);
    b8f8:	693b      	ldr	r3, [r7, #16]
    b8fa:	695b      	ldr	r3, [r3, #20]
    b8fc:	6839      	ldr	r1, [r7, #0]
    b8fe:	6878      	ldr	r0, [r7, #4]
    b900:	4798      	blx	r3
    b902:	60f8      	str	r0, [r7, #12]
            if (result != MP_OBJ_NULL) {
    b904:	68fb      	ldr	r3, [r7, #12]
    b906:	2b00      	cmp	r3, #0
    b908:	d001      	beq.n	b90e <mp_unary_op+0x1aa>
                return result;
    b90a:	68fb      	ldr	r3, [r7, #12]
    b90c:	e002      	b.n	b914 <mp_unary_op+0x1b0>
            }
        }
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("unsupported type for operator");
    b90e:	4807      	ldr	r0, [pc, #28]	; (b92c <mp_unary_op+0x1c8>)
    b910:	f001 fb66 	bl	cfe0 <mp_raise_TypeError>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "unsupported type for %q: '%s'",
                mp_unary_op_method_name[op], mp_obj_get_type_str(arg)));
        }
    }
}
    b914:	4618      	mov	r0, r3
    b916:	3720      	adds	r7, #32
    b918:	46bd      	mov	sp, r7
    b91a:	bd80      	pop	{r7, pc}
    b91c:	0001f658 	.word	0x0001f658
    b920:	0001f8d0 	.word	0x0001f8d0
    b924:	0001f674 	.word	0x0001f674
    b928:	00012895 	.word	0x00012895
    b92c:	0001f688 	.word	0x0001f688

0000b930 <mp_binary_op>:

mp_obj_t mp_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
    b930:	b590      	push	{r4, r7, lr}
    b932:	b095      	sub	sp, #84	; 0x54
    b934:	af00      	add	r7, sp, #0
    b936:	60f8      	str	r0, [r7, #12]
    b938:	60b9      	str	r1, [r7, #8]
    b93a:	607a      	str	r2, [r7, #4]
    //   then check for implemented seq.concat
    //   then fail
    // note that list does not implement + or +=, so that inplace_concat is reached first for +=

    // deal with is
    if (op == MP_BINARY_OP_IS) {
    b93c:	68fb      	ldr	r3, [r7, #12]
    b93e:	2b07      	cmp	r3, #7
    b940:	d10b      	bne.n	b95a <mp_binary_op+0x2a>
        return mp_obj_new_bool(lhs == rhs);
    b942:	68ba      	ldr	r2, [r7, #8]
    b944:	687b      	ldr	r3, [r7, #4]
    b946:	429a      	cmp	r2, r3
    b948:	bf0c      	ite	eq
    b94a:	2301      	moveq	r3, #1
    b94c:	2300      	movne	r3, #0
    b94e:	b2db      	uxtb	r3, r3
    b950:	4618      	mov	r0, r3
    b952:	f7ff fda7 	bl	b4a4 <mp_obj_new_bool>
    b956:	4603      	mov	r3, r0
    b958:	e239      	b.n	bdce <mp_binary_op+0x49e>
    }

    // deal with == and != for all types
    if (op == MP_BINARY_OP_EQUAL || op == MP_BINARY_OP_NOT_EQUAL) {
    b95a:	68fb      	ldr	r3, [r7, #12]
    b95c:	2b02      	cmp	r3, #2
    b95e:	d002      	beq.n	b966 <mp_binary_op+0x36>
    b960:	68fb      	ldr	r3, [r7, #12]
    b962:	2b05      	cmp	r3, #5
    b964:	d114      	bne.n	b990 <mp_binary_op+0x60>
        if (mp_obj_equal(lhs, rhs)) {
    b966:	6879      	ldr	r1, [r7, #4]
    b968:	68b8      	ldr	r0, [r7, #8]
    b96a:	f002 f8a7 	bl	dabc <mp_obj_equal>
    b96e:	4603      	mov	r3, r0
    b970:	2b00      	cmp	r3, #0
    b972:	d006      	beq.n	b982 <mp_binary_op+0x52>
            if (op == MP_BINARY_OP_EQUAL) {
    b974:	68fb      	ldr	r3, [r7, #12]
    b976:	2b02      	cmp	r3, #2
    b978:	d101      	bne.n	b97e <mp_binary_op+0x4e>
                return mp_const_true;
    b97a:	4bb0      	ldr	r3, [pc, #704]	; (bc3c <mp_binary_op+0x30c>)
    b97c:	e227      	b.n	bdce <mp_binary_op+0x49e>
            } else {
                return mp_const_false;
    b97e:	4bb0      	ldr	r3, [pc, #704]	; (bc40 <mp_binary_op+0x310>)
    b980:	e225      	b.n	bdce <mp_binary_op+0x49e>
            }
        } else {
            if (op == MP_BINARY_OP_EQUAL) {
    b982:	68fb      	ldr	r3, [r7, #12]
    b984:	2b02      	cmp	r3, #2
    b986:	d101      	bne.n	b98c <mp_binary_op+0x5c>
                return mp_const_false;
    b988:	4bad      	ldr	r3, [pc, #692]	; (bc40 <mp_binary_op+0x310>)
    b98a:	e220      	b.n	bdce <mp_binary_op+0x49e>
            } else {
                return mp_const_true;
    b98c:	4bab      	ldr	r3, [pc, #684]	; (bc3c <mp_binary_op+0x30c>)
    b98e:	e21e      	b.n	bdce <mp_binary_op+0x49e>
            }
        }
    }

    // deal with exception_match for all types
    if (op == MP_BINARY_OP_EXCEPTION_MATCH) {
    b990:	68fb      	ldr	r3, [r7, #12]
    b992:	2b08      	cmp	r3, #8
    b994:	d145      	bne.n	ba22 <mp_binary_op+0xf2>
        // rhs must be issubclass(rhs, BaseException)
        if (mp_obj_is_exception_type(rhs)) {
    b996:	6878      	ldr	r0, [r7, #4]
    b998:	f003 fec4 	bl	f724 <mp_obj_is_exception_type>
    b99c:	4603      	mov	r3, r0
    b99e:	2b00      	cmp	r3, #0
    b9a0:	d00a      	beq.n	b9b8 <mp_binary_op+0x88>
            if (mp_obj_exception_match(lhs, rhs)) {
    b9a2:	6879      	ldr	r1, [r7, #4]
    b9a4:	68b8      	ldr	r0, [r7, #8]
    b9a6:	f003 fef5 	bl	f794 <mp_obj_exception_match>
    b9aa:	4603      	mov	r3, r0
    b9ac:	2b00      	cmp	r3, #0
    b9ae:	d001      	beq.n	b9b4 <mp_binary_op+0x84>
                return mp_const_true;
    b9b0:	4ba2      	ldr	r3, [pc, #648]	; (bc3c <mp_binary_op+0x30c>)
    b9b2:	e20c      	b.n	bdce <mp_binary_op+0x49e>
            } else {
                return mp_const_false;
    b9b4:	4ba2      	ldr	r3, [pc, #648]	; (bc40 <mp_binary_op+0x310>)
    b9b6:	e20a      	b.n	bdce <mp_binary_op+0x49e>
            }
        } else if (MP_OBJ_IS_TYPE(rhs, &mp_type_tuple)) {
    b9b8:	6878      	ldr	r0, [r7, #4]
    b9ba:	f7ff fd3f 	bl	b43c <MP_OBJ_IS_OBJ>
    b9be:	4603      	mov	r3, r0
    b9c0:	2b00      	cmp	r3, #0
    b9c2:	f000 81f3 	beq.w	bdac <mp_binary_op+0x47c>
    b9c6:	687b      	ldr	r3, [r7, #4]
    b9c8:	681b      	ldr	r3, [r3, #0]
    b9ca:	4a9e      	ldr	r2, [pc, #632]	; (bc44 <mp_binary_op+0x314>)
    b9cc:	4293      	cmp	r3, r2
    b9ce:	f040 81ed 	bne.w	bdac <mp_binary_op+0x47c>
            mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(rhs);
    b9d2:	687b      	ldr	r3, [r7, #4]
    b9d4:	63fb      	str	r3, [r7, #60]	; 0x3c
            for (size_t i = 0; i < tuple->len; i++) {
    b9d6:	2300      	movs	r3, #0
    b9d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    b9da:	e01b      	b.n	ba14 <mp_binary_op+0xe4>
                rhs = tuple->items[i];
    b9dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b9de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b9e0:	3202      	adds	r2, #2
    b9e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b9e6:	607b      	str	r3, [r7, #4]
                if (!mp_obj_is_exception_type(rhs)) {
    b9e8:	6878      	ldr	r0, [r7, #4]
    b9ea:	f003 fe9b 	bl	f724 <mp_obj_is_exception_type>
    b9ee:	4603      	mov	r3, r0
    b9f0:	f083 0301 	eor.w	r3, r3, #1
    b9f4:	b2db      	uxtb	r3, r3
    b9f6:	2b00      	cmp	r3, #0
    b9f8:	f040 81da 	bne.w	bdb0 <mp_binary_op+0x480>
                    goto unsupported_op;
                }
                if (mp_obj_exception_match(lhs, rhs)) {
    b9fc:	6879      	ldr	r1, [r7, #4]
    b9fe:	68b8      	ldr	r0, [r7, #8]
    ba00:	f003 fec8 	bl	f794 <mp_obj_exception_match>
    ba04:	4603      	mov	r3, r0
    ba06:	2b00      	cmp	r3, #0
    ba08:	d001      	beq.n	ba0e <mp_binary_op+0xde>
                    return mp_const_true;
    ba0a:	4b8c      	ldr	r3, [pc, #560]	; (bc3c <mp_binary_op+0x30c>)
    ba0c:	e1df      	b.n	bdce <mp_binary_op+0x49e>
            for (size_t i = 0; i < tuple->len; i++) {
    ba0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ba10:	3301      	adds	r3, #1
    ba12:	64fb      	str	r3, [r7, #76]	; 0x4c
    ba14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ba16:	685a      	ldr	r2, [r3, #4]
    ba18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ba1a:	429a      	cmp	r2, r3
    ba1c:	d8de      	bhi.n	b9dc <mp_binary_op+0xac>
                }
            }
            return mp_const_false;
    ba1e:	4b88      	ldr	r3, [pc, #544]	; (bc40 <mp_binary_op+0x310>)
    ba20:	e1d5      	b.n	bdce <mp_binary_op+0x49e>
        }
        goto unsupported_op;
    }

    if (MP_OBJ_IS_SMALL_INT(lhs)) {
    ba22:	68b8      	ldr	r0, [r7, #8]
    ba24:	f7ff fce6 	bl	b3f4 <MP_OBJ_IS_SMALL_INT>
    ba28:	4603      	mov	r3, r0
    ba2a:	2b00      	cmp	r3, #0
    ba2c:	f000 8182 	beq.w	bd34 <mp_binary_op+0x404>
        mp_int_t lhs_val = MP_OBJ_SMALL_INT_VALUE(lhs);
    ba30:	68bb      	ldr	r3, [r7, #8]
    ba32:	105b      	asrs	r3, r3, #1
    ba34:	64bb      	str	r3, [r7, #72]	; 0x48
        if (MP_OBJ_IS_SMALL_INT(rhs)) {
    ba36:	6878      	ldr	r0, [r7, #4]
    ba38:	f7ff fcdc 	bl	b3f4 <MP_OBJ_IS_SMALL_INT>
    ba3c:	4603      	mov	r3, r0
    ba3e:	2b00      	cmp	r3, #0
    ba40:	f000 8178 	beq.w	bd34 <mp_binary_op+0x404>
            mp_int_t rhs_val = MP_OBJ_SMALL_INT_VALUE(rhs);
    ba44:	687b      	ldr	r3, [r7, #4]
    ba46:	105b      	asrs	r3, r3, #1
    ba48:	647b      	str	r3, [r7, #68]	; 0x44
            //      -       result always fits in mp_int_t, then handled by SMALL_INT check
            //      *       checked explicitly
            //      /       if lhs=MIN and rhs=-1; result always fits in mp_int_t, then handled by SMALL_INT check
            //      %       if lhs=MIN and rhs=-1; result always fits in mp_int_t, then handled by SMALL_INT check
            //      <<      checked explicitly
            switch (op) {
    ba4a:	68fb      	ldr	r3, [r7, #12]
    ba4c:	2b21      	cmp	r3, #33	; 0x21
    ba4e:	f200 81b1 	bhi.w	bdb4 <mp_binary_op+0x484>
    ba52:	a201      	add	r2, pc, #4	; (adr r2, ba58 <mp_binary_op+0x128>)
    ba54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ba58:	0000bcb5 	.word	0x0000bcb5
    ba5c:	0000bccd 	.word	0x0000bccd
    ba60:	0000bdb5 	.word	0x0000bdb5
    ba64:	0000bce5 	.word	0x0000bce5
    ba68:	0000bcfd 	.word	0x0000bcfd
    ba6c:	0000bdb5 	.word	0x0000bdb5
    ba70:	0000bdb5 	.word	0x0000bdb5
    ba74:	0000bdb5 	.word	0x0000bdb5
    ba78:	0000bdb5 	.word	0x0000bdb5
    ba7c:	0000bae1 	.word	0x0000bae1
    ba80:	0000baeb 	.word	0x0000baeb
    ba84:	0000baf5 	.word	0x0000baf5
    ba88:	0000baff 	.word	0x0000baff
    ba8c:	0000bb4b 	.word	0x0000bb4b
    ba90:	0000bb6d 	.word	0x0000bb6d
    ba94:	0000bb77 	.word	0x0000bb77
    ba98:	0000bb81 	.word	0x0000bb81
    ba9c:	0000bbb1 	.word	0x0000bbb1
    baa0:	0000bdb5 	.word	0x0000bdb5
    baa4:	0000bbc5 	.word	0x0000bbc5
    baa8:	0000bbd9 	.word	0x0000bbd9
    baac:	0000bae1 	.word	0x0000bae1
    bab0:	0000baeb 	.word	0x0000baeb
    bab4:	0000baf5 	.word	0x0000baf5
    bab8:	0000baff 	.word	0x0000baff
    babc:	0000bb4b 	.word	0x0000bb4b
    bac0:	0000bb6d 	.word	0x0000bb6d
    bac4:	0000bb77 	.word	0x0000bb77
    bac8:	0000bb81 	.word	0x0000bb81
    bacc:	0000bbb1 	.word	0x0000bbb1
    bad0:	0000bdb5 	.word	0x0000bdb5
    bad4:	0000bbc5 	.word	0x0000bbc5
    bad8:	0000bbd9 	.word	0x0000bbd9
    badc:	0000bc73 	.word	0x0000bc73
                case MP_BINARY_OP_OR:
                case MP_BINARY_OP_INPLACE_OR: lhs_val |= rhs_val; break;
    bae0:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bae4:	4313      	orrs	r3, r2
    bae6:	64bb      	str	r3, [r7, #72]	; 0x48
    bae8:	e114      	b.n	bd14 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_XOR:
                case MP_BINARY_OP_INPLACE_XOR: lhs_val ^= rhs_val; break;
    baea:	6cba      	ldr	r2, [r7, #72]	; 0x48
    baec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    baee:	4053      	eors	r3, r2
    baf0:	64bb      	str	r3, [r7, #72]	; 0x48
    baf2:	e10f      	b.n	bd14 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_AND:
                case MP_BINARY_OP_INPLACE_AND: lhs_val &= rhs_val; break;
    baf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
    baf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    baf8:	4013      	ands	r3, r2
    bafa:	64bb      	str	r3, [r7, #72]	; 0x48
    bafc:	e10a      	b.n	bd14 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_LSHIFT:
                case MP_BINARY_OP_INPLACE_LSHIFT: {
                    if (rhs_val < 0) {
    bafe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb00:	2b00      	cmp	r3, #0
    bb02:	da02      	bge.n	bb0a <mp_binary_op+0x1da>
                        // negative shift not allowed
                        mp_raise_ValueError("negative shift count");
    bb04:	4850      	ldr	r0, [pc, #320]	; (bc48 <mp_binary_op+0x318>)
    bb06:	f001 fa61 	bl	cfcc <mp_raise_ValueError>
                    } else if (rhs_val >= (mp_int_t)BITS_PER_WORD || lhs_val > (MP_SMALL_INT_MAX >> rhs_val) || lhs_val < (MP_SMALL_INT_MIN >> rhs_val)) {
    bb0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb0c:	2b1f      	cmp	r3, #31
    bb0e:	dc0d      	bgt.n	bb2c <mp_binary_op+0x1fc>
    bb10:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
    bb14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb16:	411a      	asrs	r2, r3
    bb18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bb1a:	429a      	cmp	r2, r3
    bb1c:	db06      	blt.n	bb2c <mp_binary_op+0x1fc>
    bb1e:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    bb22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb24:	411a      	asrs	r2, r3
    bb26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bb28:	429a      	cmp	r2, r3
    bb2a:	dd08      	ble.n	bb3e <mp_binary_op+0x20e>
                        // left-shift will overflow, so use higher precision integer
                        lhs = mp_obj_new_int_from_ll(lhs_val);
    bb2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bb2e:	ea4f 74e3 	mov.w	r4, r3, asr #31
    bb32:	4618      	mov	r0, r3
    bb34:	4621      	mov	r1, r4
    bb36:	f004 fed3 	bl	108e0 <mp_obj_new_int_from_ll>
    bb3a:	60b8      	str	r0, [r7, #8]
                        goto generic_binary_op;
    bb3c:	e105      	b.n	bd4a <mp_binary_op+0x41a>
                    } else {
                        // use standard precision
                        lhs_val <<= rhs_val;
    bb3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bb40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb42:	fa02 f303 	lsl.w	r3, r2, r3
    bb46:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    break;
    bb48:	e0e4      	b.n	bd14 <mp_binary_op+0x3e4>
                }
                case MP_BINARY_OP_RSHIFT:
                case MP_BINARY_OP_INPLACE_RSHIFT:
                    if (rhs_val < 0) {
    bb4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb4c:	2b00      	cmp	r3, #0
    bb4e:	da02      	bge.n	bb56 <mp_binary_op+0x226>
                        // negative shift not allowed
                        mp_raise_ValueError("negative shift count");
    bb50:	483d      	ldr	r0, [pc, #244]	; (bc48 <mp_binary_op+0x318>)
    bb52:	f001 fa3b 	bl	cfcc <mp_raise_ValueError>
                    } else {
                        // standard precision is enough for right-shift
                        if (rhs_val >= (mp_int_t)BITS_PER_WORD) {
    bb56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb58:	2b1f      	cmp	r3, #31
    bb5a:	dd01      	ble.n	bb60 <mp_binary_op+0x230>
                            // Shifting to big amounts is underfined behavior
                            // in C and is CPU-dependent; propagate sign bit.
                            rhs_val = BITS_PER_WORD - 1;
    bb5c:	231f      	movs	r3, #31
    bb5e:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                        lhs_val >>= rhs_val;
    bb60:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bb62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb64:	fa42 f303 	asr.w	r3, r2, r3
    bb68:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    break;
    bb6a:	e0d3      	b.n	bd14 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_ADD:
                case MP_BINARY_OP_INPLACE_ADD: lhs_val += rhs_val; break;
    bb6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bb6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb70:	4413      	add	r3, r2
    bb72:	64bb      	str	r3, [r7, #72]	; 0x48
    bb74:	e0ce      	b.n	bd14 <mp_binary_op+0x3e4>
                case MP_BINARY_OP_SUBTRACT:
                case MP_BINARY_OP_INPLACE_SUBTRACT: lhs_val -= rhs_val; break;
    bb76:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bb78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bb7a:	1ad3      	subs	r3, r2, r3
    bb7c:	64bb      	str	r3, [r7, #72]	; 0x48
    bb7e:	e0c9      	b.n	bd14 <mp_binary_op+0x3e4>
                        // use standard precision
                        lhs_val = (mp_int_t)res;
                    }
                    #endif

                    if (mp_small_int_mul_overflow(lhs_val, rhs_val)) {
    bb80:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bb82:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bb84:	f00f fa24 	bl	1afd0 <mp_small_int_mul_overflow>
    bb88:	4603      	mov	r3, r0
    bb8a:	2b00      	cmp	r3, #0
    bb8c:	d008      	beq.n	bba0 <mp_binary_op+0x270>
                        // use higher precision
                        lhs = mp_obj_new_int_from_ll(lhs_val);
    bb8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bb90:	ea4f 74e3 	mov.w	r4, r3, asr #31
    bb94:	4618      	mov	r0, r3
    bb96:	4621      	mov	r1, r4
    bb98:	f004 fea2 	bl	108e0 <mp_obj_new_int_from_ll>
    bb9c:	60b8      	str	r0, [r7, #8]
                        goto generic_binary_op;
    bb9e:	e0d4      	b.n	bd4a <mp_binary_op+0x41a>
                    } else {
                        // use standard precision
                        return MP_OBJ_NEW_SMALL_INT(lhs_val * rhs_val);
    bba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    bba4:	fb02 f303 	mul.w	r3, r2, r3
    bba8:	005b      	lsls	r3, r3, #1
    bbaa:	f043 0301 	orr.w	r3, r3, #1
    bbae:	e10e      	b.n	bdce <mp_binary_op+0x49e>
                    }
                }
                case MP_BINARY_OP_FLOOR_DIVIDE:
                case MP_BINARY_OP_INPLACE_FLOOR_DIVIDE:
                    if (rhs_val == 0) {
    bbb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bbb2:	2b00      	cmp	r3, #0
    bbb4:	f000 8102 	beq.w	bdbc <mp_binary_op+0x48c>
                        goto zero_division;
                    }
                    lhs_val = mp_small_int_floor_divide(lhs_val, rhs_val);
    bbb8:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bbba:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bbbc:	f00f fa6e 	bl	1b09c <mp_small_int_floor_divide>
    bbc0:	64b8      	str	r0, [r7, #72]	; 0x48
                    break;
    bbc2:	e0a7      	b.n	bd14 <mp_binary_op+0x3e4>
                    return mp_obj_new_float((mp_float_t)lhs_val / (mp_float_t)rhs_val);
                #endif

                case MP_BINARY_OP_MODULO:
                case MP_BINARY_OP_INPLACE_MODULO: {
                    if (rhs_val == 0) {
    bbc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bbc6:	2b00      	cmp	r3, #0
    bbc8:	f000 80fa 	beq.w	bdc0 <mp_binary_op+0x490>
                        goto zero_division;
                    }
                    lhs_val = mp_small_int_modulo(lhs_val, rhs_val);
    bbcc:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bbce:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bbd0:	f00f fa3e 	bl	1b050 <mp_small_int_modulo>
    bbd4:	64b8      	str	r0, [r7, #72]	; 0x48
                    break;
    bbd6:	e09d      	b.n	bd14 <mp_binary_op+0x3e4>
                }

                case MP_BINARY_OP_POWER:
                case MP_BINARY_OP_INPLACE_POWER:
                    if (rhs_val < 0) {
    bbd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bbda:	2b00      	cmp	r3, #0
    bbdc:	da02      	bge.n	bbe4 <mp_binary_op+0x2b4>
                        #if MICROPY_PY_BUILTINS_FLOAT
                        lhs = mp_obj_new_float(lhs_val);
                        goto generic_binary_op;
                        #else
                        mp_raise_ValueError("negative power with no float support");
    bbde:	481b      	ldr	r0, [pc, #108]	; (bc4c <mp_binary_op+0x31c>)
    bbe0:	f001 f9f4 	bl	cfcc <mp_raise_ValueError>
                        #endif
                    } else {
                        mp_int_t ans = 1;
    bbe4:	2301      	movs	r3, #1
    bbe6:	643b      	str	r3, [r7, #64]	; 0x40
                        while (rhs_val > 0) {
    bbe8:	e024      	b.n	bc34 <mp_binary_op+0x304>
                            if (rhs_val & 1) {
    bbea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bbec:	f003 0301 	and.w	r3, r3, #1
    bbf0:	2b00      	cmp	r3, #0
    bbf2:	d00b      	beq.n	bc0c <mp_binary_op+0x2dc>
                                if (mp_small_int_mul_overflow(ans, lhs_val)) {
    bbf4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    bbf6:	6c38      	ldr	r0, [r7, #64]	; 0x40
    bbf8:	f00f f9ea 	bl	1afd0 <mp_small_int_mul_overflow>
    bbfc:	4603      	mov	r3, r0
    bbfe:	2b00      	cmp	r3, #0
    bc00:	d12a      	bne.n	bc58 <mp_binary_op+0x328>
                                    goto power_overflow;
                                }
                                ans *= lhs_val;
    bc02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    bc04:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bc06:	fb02 f303 	mul.w	r3, r2, r3
    bc0a:	643b      	str	r3, [r7, #64]	; 0x40
                            }
                            if (rhs_val == 1) {
    bc0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bc0e:	2b01      	cmp	r3, #1
    bc10:	d01e      	beq.n	bc50 <mp_binary_op+0x320>
                                break;
                            }
                            rhs_val /= 2;
    bc12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bc14:	0fda      	lsrs	r2, r3, #31
    bc16:	4413      	add	r3, r2
    bc18:	105b      	asrs	r3, r3, #1
    bc1a:	647b      	str	r3, [r7, #68]	; 0x44
                            if (mp_small_int_mul_overflow(lhs_val, lhs_val)) {
    bc1c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    bc1e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bc20:	f00f f9d6 	bl	1afd0 <mp_small_int_mul_overflow>
    bc24:	4603      	mov	r3, r0
    bc26:	2b00      	cmp	r3, #0
    bc28:	d118      	bne.n	bc5c <mp_binary_op+0x32c>
                                goto power_overflow;
                            }
                            lhs_val *= lhs_val;
    bc2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bc2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bc2e:	fb02 f303 	mul.w	r3, r2, r3
    bc32:	64bb      	str	r3, [r7, #72]	; 0x48
                        while (rhs_val > 0) {
    bc34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bc36:	2b00      	cmp	r3, #0
    bc38:	dcd7      	bgt.n	bbea <mp_binary_op+0x2ba>
    bc3a:	e00a      	b.n	bc52 <mp_binary_op+0x322>
    bc3c:	0001fc44 	.word	0x0001fc44
    bc40:	0001fc3c 	.word	0x0001fc3c
    bc44:	00021e68 	.word	0x00021e68
    bc48:	0001f6a8 	.word	0x0001f6a8
    bc4c:	0001f6c0 	.word	0x0001f6c0
                                break;
    bc50:	bf00      	nop
                        }
                        lhs_val = ans;
    bc52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    bc54:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    break;
    bc56:	e05d      	b.n	bd14 <mp_binary_op+0x3e4>
                                    goto power_overflow;
    bc58:	bf00      	nop
    bc5a:	e000      	b.n	bc5e <mp_binary_op+0x32e>
                                goto power_overflow;
    bc5c:	bf00      	nop

                power_overflow:
                    // use higher precision
                    lhs = mp_obj_new_int_from_ll(MP_OBJ_SMALL_INT_VALUE(lhs));
    bc5e:	68bb      	ldr	r3, [r7, #8]
    bc60:	105b      	asrs	r3, r3, #1
    bc62:	ea4f 74e3 	mov.w	r4, r3, asr #31
    bc66:	4618      	mov	r0, r3
    bc68:	4621      	mov	r1, r4
    bc6a:	f004 fe39 	bl	108e0 <mp_obj_new_int_from_ll>
    bc6e:	60b8      	str	r0, [r7, #8]
                    goto generic_binary_op;
    bc70:	e06b      	b.n	bd4a <mp_binary_op+0x41a>

                case MP_BINARY_OP_DIVMOD: {
                    if (rhs_val == 0) {
    bc72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bc74:	2b00      	cmp	r3, #0
    bc76:	f000 80a5 	beq.w	bdc4 <mp_binary_op+0x494>
                        goto zero_division;
                    }
                    // to reduce stack usage we don't pass a temp array of the 2 items
                    mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(mp_obj_new_tuple(2, NULL));
    bc7a:	2100      	movs	r1, #0
    bc7c:	2002      	movs	r0, #2
    bc7e:	f00a f8b7 	bl	15df0 <mp_obj_new_tuple>
    bc82:	63b8      	str	r0, [r7, #56]	; 0x38
                    tuple->items[0] = MP_OBJ_NEW_SMALL_INT(mp_small_int_floor_divide(lhs_val, rhs_val));
    bc84:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bc86:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bc88:	f00f fa08 	bl	1b09c <mp_small_int_floor_divide>
    bc8c:	4603      	mov	r3, r0
    bc8e:	005b      	lsls	r3, r3, #1
    bc90:	f043 0301 	orr.w	r3, r3, #1
    bc94:	461a      	mov	r2, r3
    bc96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bc98:	609a      	str	r2, [r3, #8]
                    tuple->items[1] = MP_OBJ_NEW_SMALL_INT(mp_small_int_modulo(lhs_val, rhs_val));
    bc9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
    bc9c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bc9e:	f00f f9d7 	bl	1b050 <mp_small_int_modulo>
    bca2:	4603      	mov	r3, r0
    bca4:	005b      	lsls	r3, r3, #1
    bca6:	f043 0301 	orr.w	r3, r3, #1
    bcaa:	461a      	mov	r2, r3
    bcac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bcae:	60da      	str	r2, [r3, #12]
                    return MP_OBJ_FROM_PTR(tuple);
    bcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bcb2:	e08c      	b.n	bdce <mp_binary_op+0x49e>
                }

                case MP_BINARY_OP_LESS: return mp_obj_new_bool(lhs_val < rhs_val);
    bcb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bcb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bcb8:	429a      	cmp	r2, r3
    bcba:	bfb4      	ite	lt
    bcbc:	2301      	movlt	r3, #1
    bcbe:	2300      	movge	r3, #0
    bcc0:	b2db      	uxtb	r3, r3
    bcc2:	4618      	mov	r0, r3
    bcc4:	f7ff fbee 	bl	b4a4 <mp_obj_new_bool>
    bcc8:	4603      	mov	r3, r0
    bcca:	e080      	b.n	bdce <mp_binary_op+0x49e>
                case MP_BINARY_OP_MORE: return mp_obj_new_bool(lhs_val > rhs_val);
    bccc:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bcce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bcd0:	429a      	cmp	r2, r3
    bcd2:	bfcc      	ite	gt
    bcd4:	2301      	movgt	r3, #1
    bcd6:	2300      	movle	r3, #0
    bcd8:	b2db      	uxtb	r3, r3
    bcda:	4618      	mov	r0, r3
    bcdc:	f7ff fbe2 	bl	b4a4 <mp_obj_new_bool>
    bce0:	4603      	mov	r3, r0
    bce2:	e074      	b.n	bdce <mp_binary_op+0x49e>
                case MP_BINARY_OP_LESS_EQUAL: return mp_obj_new_bool(lhs_val <= rhs_val);
    bce4:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bce8:	429a      	cmp	r2, r3
    bcea:	bfd4      	ite	le
    bcec:	2301      	movle	r3, #1
    bcee:	2300      	movgt	r3, #0
    bcf0:	b2db      	uxtb	r3, r3
    bcf2:	4618      	mov	r0, r3
    bcf4:	f7ff fbd6 	bl	b4a4 <mp_obj_new_bool>
    bcf8:	4603      	mov	r3, r0
    bcfa:	e068      	b.n	bdce <mp_binary_op+0x49e>
                case MP_BINARY_OP_MORE_EQUAL: return mp_obj_new_bool(lhs_val >= rhs_val);
    bcfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
    bcfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    bd00:	429a      	cmp	r2, r3
    bd02:	bfac      	ite	ge
    bd04:	2301      	movge	r3, #1
    bd06:	2300      	movlt	r3, #0
    bd08:	b2db      	uxtb	r3, r3
    bd0a:	4618      	mov	r0, r3
    bd0c:	f7ff fbca 	bl	b4a4 <mp_obj_new_bool>
    bd10:	4603      	mov	r3, r0
    bd12:	e05c      	b.n	bdce <mp_binary_op+0x49e>

                default:
                    goto unsupported_op;
            }
            // TODO: We just should make mp_obj_new_int() inline and use that
            if (MP_SMALL_INT_FITS(lhs_val)) {
    bd14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bd16:	005a      	lsls	r2, r3, #1
    bd18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bd1a:	4053      	eors	r3, r2
    bd1c:	2b00      	cmp	r3, #0
    bd1e:	db04      	blt.n	bd2a <mp_binary_op+0x3fa>
                return MP_OBJ_NEW_SMALL_INT(lhs_val);
    bd20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    bd22:	005b      	lsls	r3, r3, #1
    bd24:	f043 0301 	orr.w	r3, r3, #1
    bd28:	e051      	b.n	bdce <mp_binary_op+0x49e>
            } else {
                return mp_obj_new_int(lhs_val);
    bd2a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    bd2c:	f004 fe0e 	bl	1094c <mp_obj_new_int>
    bd30:	4603      	mov	r3, r0
    bd32:	e04c      	b.n	bdce <mp_binary_op+0x49e>
#endif
        }
    }

    // Convert MP_BINARY_OP_IN to MP_BINARY_OP_CONTAINS with swapped args.
    if (op == MP_BINARY_OP_IN) {
    bd34:	68fb      	ldr	r3, [r7, #12]
    bd36:	2b06      	cmp	r3, #6
    bd38:	d107      	bne.n	bd4a <mp_binary_op+0x41a>
        op = MP_BINARY_OP_CONTAINS;
    bd3a:	2322      	movs	r3, #34	; 0x22
    bd3c:	60fb      	str	r3, [r7, #12]
        mp_obj_t temp = lhs;
    bd3e:	68bb      	ldr	r3, [r7, #8]
    bd40:	637b      	str	r3, [r7, #52]	; 0x34
        lhs = rhs;
    bd42:	687b      	ldr	r3, [r7, #4]
    bd44:	60bb      	str	r3, [r7, #8]
        rhs = temp;
    bd46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    bd48:	607b      	str	r3, [r7, #4]
    }

    // generic binary_op supplied by type
    mp_obj_type_t *type;
generic_binary_op:
    type = mp_obj_get_type(lhs);
    bd4a:	68b8      	ldr	r0, [r7, #8]
    bd4c:	f001 fd62 	bl	d814 <mp_obj_get_type>
    bd50:	6338      	str	r0, [r7, #48]	; 0x30
    if (type->binary_op != NULL) {
    bd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bd54:	699b      	ldr	r3, [r3, #24]
    bd56:	2b00      	cmp	r3, #0
    bd58:	d00b      	beq.n	bd72 <mp_binary_op+0x442>
        mp_obj_t result = type->binary_op(op, lhs, rhs);
    bd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bd5c:	699b      	ldr	r3, [r3, #24]
    bd5e:	687a      	ldr	r2, [r7, #4]
    bd60:	68b9      	ldr	r1, [r7, #8]
    bd62:	68f8      	ldr	r0, [r7, #12]
    bd64:	4798      	blx	r3
    bd66:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (result != MP_OBJ_NULL) {
    bd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd6a:	2b00      	cmp	r3, #0
    bd6c:	d001      	beq.n	bd72 <mp_binary_op+0x442>
            return result;
    bd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bd70:	e02d      	b.n	bdce <mp_binary_op+0x49e>
        // Convert __rop__ back to __op__ for error message
        op -= MP_BINARY_OP_REVERSE_OR - MP_BINARY_OP_OR;
    }
#endif

    if (op == MP_BINARY_OP_CONTAINS) {
    bd72:	68fb      	ldr	r3, [r7, #12]
    bd74:	2b22      	cmp	r3, #34	; 0x22
    bd76:	d11e      	bne.n	bdb6 <mp_binary_op+0x486>
        // If type didn't support containment then explicitly walk the iterator.
        // mp_getiter will raise the appropriate exception if lhs is not iterable.
        mp_obj_iter_buf_t iter_buf;
        mp_obj_t iter = mp_getiter(lhs, &iter_buf);
    bd78:	f107 0314 	add.w	r3, r7, #20
    bd7c:	4619      	mov	r1, r3
    bd7e:	68b8      	ldr	r0, [r7, #8]
    bd80:	f000 fdde 	bl	c940 <mp_getiter>
    bd84:	62b8      	str	r0, [r7, #40]	; 0x28
        mp_obj_t next;
        while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    bd86:	e008      	b.n	bd9a <mp_binary_op+0x46a>
            if (mp_obj_equal(next, rhs)) {
    bd88:	6879      	ldr	r1, [r7, #4]
    bd8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    bd8c:	f001 fe96 	bl	dabc <mp_obj_equal>
    bd90:	4603      	mov	r3, r0
    bd92:	2b00      	cmp	r3, #0
    bd94:	d001      	beq.n	bd9a <mp_binary_op+0x46a>
                return mp_const_true;
    bd96:	4b10      	ldr	r3, [pc, #64]	; (bdd8 <mp_binary_op+0x4a8>)
    bd98:	e019      	b.n	bdce <mp_binary_op+0x49e>
        while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    bd9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    bd9c:	f000 fe52 	bl	ca44 <mp_iternext>
    bda0:	6278      	str	r0, [r7, #36]	; 0x24
    bda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bda4:	2b04      	cmp	r3, #4
    bda6:	d1ef      	bne.n	bd88 <mp_binary_op+0x458>
            }
        }
        return mp_const_false;
    bda8:	4b0c      	ldr	r3, [pc, #48]	; (bddc <mp_binary_op+0x4ac>)
    bdaa:	e010      	b.n	bdce <mp_binary_op+0x49e>
        goto unsupported_op;
    bdac:	bf00      	nop
    bdae:	e002      	b.n	bdb6 <mp_binary_op+0x486>
                    goto unsupported_op;
    bdb0:	bf00      	nop
    bdb2:	e000      	b.n	bdb6 <mp_binary_op+0x486>
                    goto unsupported_op;
    bdb4:	bf00      	nop
    }

unsupported_op:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("unsupported type for operator");
    bdb6:	480a      	ldr	r0, [pc, #40]	; (bde0 <mp_binary_op+0x4b0>)
    bdb8:	f001 f912 	bl	cfe0 <mp_raise_TypeError>
                        goto zero_division;
    bdbc:	bf00      	nop
    bdbe:	e002      	b.n	bdc6 <mp_binary_op+0x496>
                        goto zero_division;
    bdc0:	bf00      	nop
    bdc2:	e000      	b.n	bdc6 <mp_binary_op+0x496>
                        goto zero_division;
    bdc4:	bf00      	nop
            "unsupported types for %q: '%s', '%s'",
            mp_binary_op_method_name[op], mp_obj_get_type_str(lhs), mp_obj_get_type_str(rhs)));
    }

zero_division:
    mp_raise_msg(&mp_type_ZeroDivisionError, "division by zero");
    bdc6:	4907      	ldr	r1, [pc, #28]	; (bde4 <mp_binary_op+0x4b4>)
    bdc8:	4807      	ldr	r0, [pc, #28]	; (bde8 <mp_binary_op+0x4b8>)
    bdca:	f001 f8e7 	bl	cf9c <mp_raise_msg>
}
    bdce:	4618      	mov	r0, r3
    bdd0:	3754      	adds	r7, #84	; 0x54
    bdd2:	46bd      	mov	sp, r7
    bdd4:	bd90      	pop	{r4, r7, pc}
    bdd6:	bf00      	nop
    bdd8:	0001fc44 	.word	0x0001fc44
    bddc:	0001fc3c 	.word	0x0001fc3c
    bde0:	0001f688 	.word	0x0001f688
    bde4:	0001f6e8 	.word	0x0001f6e8
    bde8:	000203e0 	.word	0x000203e0

0000bdec <mp_call_function_0>:

mp_obj_t mp_call_function_0(mp_obj_t fun) {
    bdec:	b580      	push	{r7, lr}
    bdee:	b082      	sub	sp, #8
    bdf0:	af00      	add	r7, sp, #0
    bdf2:	6078      	str	r0, [r7, #4]
    return mp_call_function_n_kw(fun, 0, 0, NULL);
    bdf4:	2300      	movs	r3, #0
    bdf6:	2200      	movs	r2, #0
    bdf8:	2100      	movs	r1, #0
    bdfa:	6878      	ldr	r0, [r7, #4]
    bdfc:	f000 f82c 	bl	be58 <mp_call_function_n_kw>
    be00:	4603      	mov	r3, r0
}
    be02:	4618      	mov	r0, r3
    be04:	3708      	adds	r7, #8
    be06:	46bd      	mov	sp, r7
    be08:	bd80      	pop	{r7, pc}
    be0a:	bf00      	nop

0000be0c <mp_call_function_1>:

mp_obj_t mp_call_function_1(mp_obj_t fun, mp_obj_t arg) {
    be0c:	b580      	push	{r7, lr}
    be0e:	b082      	sub	sp, #8
    be10:	af00      	add	r7, sp, #0
    be12:	6078      	str	r0, [r7, #4]
    be14:	6039      	str	r1, [r7, #0]
    return mp_call_function_n_kw(fun, 1, 0, &arg);
    be16:	463b      	mov	r3, r7
    be18:	2200      	movs	r2, #0
    be1a:	2101      	movs	r1, #1
    be1c:	6878      	ldr	r0, [r7, #4]
    be1e:	f000 f81b 	bl	be58 <mp_call_function_n_kw>
    be22:	4603      	mov	r3, r0
}
    be24:	4618      	mov	r0, r3
    be26:	3708      	adds	r7, #8
    be28:	46bd      	mov	sp, r7
    be2a:	bd80      	pop	{r7, pc}

0000be2c <mp_call_function_2>:

mp_obj_t mp_call_function_2(mp_obj_t fun, mp_obj_t arg1, mp_obj_t arg2) {
    be2c:	b580      	push	{r7, lr}
    be2e:	b086      	sub	sp, #24
    be30:	af00      	add	r7, sp, #0
    be32:	60f8      	str	r0, [r7, #12]
    be34:	60b9      	str	r1, [r7, #8]
    be36:	607a      	str	r2, [r7, #4]
    mp_obj_t args[2];
    args[0] = arg1;
    be38:	68bb      	ldr	r3, [r7, #8]
    be3a:	613b      	str	r3, [r7, #16]
    args[1] = arg2;
    be3c:	687b      	ldr	r3, [r7, #4]
    be3e:	617b      	str	r3, [r7, #20]
    return mp_call_function_n_kw(fun, 2, 0, args);
    be40:	f107 0310 	add.w	r3, r7, #16
    be44:	2200      	movs	r2, #0
    be46:	2102      	movs	r1, #2
    be48:	68f8      	ldr	r0, [r7, #12]
    be4a:	f000 f805 	bl	be58 <mp_call_function_n_kw>
    be4e:	4603      	mov	r3, r0
}
    be50:	4618      	mov	r0, r3
    be52:	3718      	adds	r7, #24
    be54:	46bd      	mov	sp, r7
    be56:	bd80      	pop	{r7, pc}

0000be58 <mp_call_function_n_kw>:

// args contains, eg: arg0  arg1  key0  value0  key1  value1
mp_obj_t mp_call_function_n_kw(mp_obj_t fun_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    be58:	b590      	push	{r4, r7, lr}
    be5a:	b087      	sub	sp, #28
    be5c:	af00      	add	r7, sp, #0
    be5e:	60f8      	str	r0, [r7, #12]
    be60:	60b9      	str	r1, [r7, #8]
    be62:	607a      	str	r2, [r7, #4]
    be64:	603b      	str	r3, [r7, #0]
    // passing to the function arrays of fixed and keyword arguments

    DEBUG_OP_printf("calling function %p(n_args=" UINT_FMT ", n_kw=" UINT_FMT ", args=%p)\n", fun_in, n_args, n_kw, args);

    // get the type
    mp_obj_type_t *type = mp_obj_get_type(fun_in);
    be66:	68f8      	ldr	r0, [r7, #12]
    be68:	f001 fcd4 	bl	d814 <mp_obj_get_type>
    be6c:	6178      	str	r0, [r7, #20]

    // do the call
    if (type->call != NULL) {
    be6e:	697b      	ldr	r3, [r7, #20]
    be70:	691b      	ldr	r3, [r3, #16]
    be72:	2b00      	cmp	r3, #0
    be74:	d008      	beq.n	be88 <mp_call_function_n_kw+0x30>
        return type->call(fun_in, n_args, n_kw, args);
    be76:	697b      	ldr	r3, [r7, #20]
    be78:	691c      	ldr	r4, [r3, #16]
    be7a:	683b      	ldr	r3, [r7, #0]
    be7c:	687a      	ldr	r2, [r7, #4]
    be7e:	68b9      	ldr	r1, [r7, #8]
    be80:	68f8      	ldr	r0, [r7, #12]
    be82:	47a0      	blx	r4
    be84:	4603      	mov	r3, r0
    be86:	e002      	b.n	be8e <mp_call_function_n_kw+0x36>
    }

    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("object not callable");
    be88:	4803      	ldr	r0, [pc, #12]	; (be98 <mp_call_function_n_kw+0x40>)
    be8a:	f001 f8a9 	bl	cfe0 <mp_raise_TypeError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "'%s' object is not callable", mp_obj_get_type_str(fun_in)));
    }
}
    be8e:	4618      	mov	r0, r3
    be90:	371c      	adds	r7, #28
    be92:	46bd      	mov	sp, r7
    be94:	bd90      	pop	{r4, r7, pc}
    be96:	bf00      	nop
    be98:	0001f6fc 	.word	0x0001f6fc

0000be9c <mp_call_method_n_kw>:

// args contains: fun  self/NULL  arg(0)  ...  arg(n_args-2)  arg(n_args-1)  kw_key(0)  kw_val(0)  ... kw_key(n_kw-1)  kw_val(n_kw-1)
// if n_args==0 and n_kw==0 then there are only fun and self/NULL
mp_obj_t mp_call_method_n_kw(size_t n_args, size_t n_kw, const mp_obj_t *args) {
    be9c:	b580      	push	{r7, lr}
    be9e:	b086      	sub	sp, #24
    bea0:	af00      	add	r7, sp, #0
    bea2:	60f8      	str	r0, [r7, #12]
    bea4:	60b9      	str	r1, [r7, #8]
    bea6:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("call method (fun=%p, self=%p, n_args=" UINT_FMT ", n_kw=" UINT_FMT ", args=%p)\n", args[0], args[1], n_args, n_kw, args);
    int adjust = (args[1] == MP_OBJ_NULL) ? 0 : 1;
    bea8:	687b      	ldr	r3, [r7, #4]
    beaa:	3304      	adds	r3, #4
    beac:	681b      	ldr	r3, [r3, #0]
    beae:	2b00      	cmp	r3, #0
    beb0:	bf14      	ite	ne
    beb2:	2301      	movne	r3, #1
    beb4:	2300      	moveq	r3, #0
    beb6:	b2db      	uxtb	r3, r3
    beb8:	617b      	str	r3, [r7, #20]
    return mp_call_function_n_kw(args[0], n_args + adjust, n_kw, args + 2 - adjust);
    beba:	687b      	ldr	r3, [r7, #4]
    bebc:	6818      	ldr	r0, [r3, #0]
    bebe:	697a      	ldr	r2, [r7, #20]
    bec0:	68fb      	ldr	r3, [r7, #12]
    bec2:	18d1      	adds	r1, r2, r3
    bec4:	697a      	ldr	r2, [r7, #20]
    bec6:	4613      	mov	r3, r2
    bec8:	079b      	lsls	r3, r3, #30
    beca:	1a9b      	subs	r3, r3, r2
    becc:	009b      	lsls	r3, r3, #2
    bece:	3308      	adds	r3, #8
    bed0:	687a      	ldr	r2, [r7, #4]
    bed2:	4413      	add	r3, r2
    bed4:	68ba      	ldr	r2, [r7, #8]
    bed6:	f7ff ffbf 	bl	be58 <mp_call_function_n_kw>
    beda:	4603      	mov	r3, r0
}
    bedc:	4618      	mov	r0, r3
    bede:	3718      	adds	r7, #24
    bee0:	46bd      	mov	sp, r7
    bee2:	bd80      	pop	{r7, pc}

0000bee4 <mp_call_prepare_args_n_kw_var>:

// This function only needs to be exposed externally when in stackless mode.
#if !MICROPY_STACKLESS
STATIC
#endif
void mp_call_prepare_args_n_kw_var(bool have_self, size_t n_args_n_kw, const mp_obj_t *args, mp_call_args_t *out_args) {
    bee4:	b580      	push	{r7, lr}
    bee6:	b0a2      	sub	sp, #136	; 0x88
    bee8:	af00      	add	r7, sp, #0
    beea:	60b9      	str	r1, [r7, #8]
    beec:	607a      	str	r2, [r7, #4]
    beee:	603b      	str	r3, [r7, #0]
    bef0:	4603      	mov	r3, r0
    bef2:	73fb      	strb	r3, [r7, #15]
    mp_obj_t fun = *args++;
    bef4:	687b      	ldr	r3, [r7, #4]
    bef6:	1d1a      	adds	r2, r3, #4
    bef8:	607a      	str	r2, [r7, #4]
    befa:	681b      	ldr	r3, [r3, #0]
    befc:	663b      	str	r3, [r7, #96]	; 0x60
    mp_obj_t self = MP_OBJ_NULL;
    befe:	2300      	movs	r3, #0
    bf00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (have_self) {
    bf04:	7bfb      	ldrb	r3, [r7, #15]
    bf06:	2b00      	cmp	r3, #0
    bf08:	d005      	beq.n	bf16 <mp_call_prepare_args_n_kw_var+0x32>
        self = *args++; // may be MP_OBJ_NULL
    bf0a:	687b      	ldr	r3, [r7, #4]
    bf0c:	1d1a      	adds	r2, r3, #4
    bf0e:	607a      	str	r2, [r7, #4]
    bf10:	681b      	ldr	r3, [r3, #0]
    bf12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }
    uint n_args = n_args_n_kw & 0xff;
    bf16:	68bb      	ldr	r3, [r7, #8]
    bf18:	b2db      	uxtb	r3, r3
    bf1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint n_kw = (n_args_n_kw >> 8) & 0xff;
    bf1c:	68bb      	ldr	r3, [r7, #8]
    bf1e:	0a1b      	lsrs	r3, r3, #8
    bf20:	b2db      	uxtb	r3, r3
    bf22:	65bb      	str	r3, [r7, #88]	; 0x58
    mp_obj_t pos_seq = args[n_args + 2 * n_kw]; // may be MP_OBJ_NULL
    bf24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    bf26:	005a      	lsls	r2, r3, #1
    bf28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bf2a:	4413      	add	r3, r2
    bf2c:	009b      	lsls	r3, r3, #2
    bf2e:	687a      	ldr	r2, [r7, #4]
    bf30:	4413      	add	r3, r2
    bf32:	681b      	ldr	r3, [r3, #0]
    bf34:	657b      	str	r3, [r7, #84]	; 0x54
    mp_obj_t kw_dict = args[n_args + 2 * n_kw + 1]; // may be MP_OBJ_NULL
    bf36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    bf38:	005a      	lsls	r2, r3, #1
    bf3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bf3c:	4413      	add	r3, r2
    bf3e:	3301      	adds	r3, #1
    bf40:	009b      	lsls	r3, r3, #2
    bf42:	687a      	ldr	r2, [r7, #4]
    bf44:	4413      	add	r3, r2
    bf46:	681b      	ldr	r3, [r3, #0]
    bf48:	653b      	str	r3, [r7, #80]	; 0x50
    // TODO: optimize one day to avoid constructing new arg array? Will be hard.

    // The new args array
    mp_obj_t *args2;
    uint args2_alloc;
    uint args2_len = 0;
    bf4a:	2300      	movs	r3, #0
    bf4c:	67bb      	str	r3, [r7, #120]	; 0x78

    // Try to get a hint for the size of the kw_dict
    uint kw_dict_len = 0;
    bf4e:	2300      	movs	r3, #0
    bf50:	677b      	str	r3, [r7, #116]	; 0x74
    if (kw_dict != MP_OBJ_NULL && MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    bf52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    bf54:	2b00      	cmp	r3, #0
    bf56:	d00e      	beq.n	bf76 <mp_call_prepare_args_n_kw_var+0x92>
    bf58:	6d38      	ldr	r0, [r7, #80]	; 0x50
    bf5a:	f7ff fa6f 	bl	b43c <MP_OBJ_IS_OBJ>
    bf5e:	4603      	mov	r3, r0
    bf60:	2b00      	cmp	r3, #0
    bf62:	d008      	beq.n	bf76 <mp_call_prepare_args_n_kw_var+0x92>
    bf64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    bf66:	681b      	ldr	r3, [r3, #0]
    bf68:	4ab0      	ldr	r2, [pc, #704]	; (c22c <mp_call_prepare_args_n_kw_var+0x348>)
    bf6a:	4293      	cmp	r3, r2
    bf6c:	d103      	bne.n	bf76 <mp_call_prepare_args_n_kw_var+0x92>
        kw_dict_len = mp_obj_dict_len(kw_dict);
    bf6e:	6d38      	ldr	r0, [r7, #80]	; 0x50
    bf70:	f003 f8f6 	bl	f160 <mp_obj_dict_len>
    bf74:	6778      	str	r0, [r7, #116]	; 0x74
    }

    // Extract the pos_seq sequence to the new args array.
    // Note that it can be arbitrary iterator.
    if (pos_seq == MP_OBJ_NULL) {
    bf76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    bf78:	2b00      	cmp	r3, #0
    bf7a:	d12c      	bne.n	bfd6 <mp_call_prepare_args_n_kw_var+0xf2>
        // no sequence

        // allocate memory for the new array of args
        args2_alloc = 1 + n_args + 2 * (n_kw + kw_dict_len);
    bf7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
    bf7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    bf80:	4413      	add	r3, r2
    bf82:	005a      	lsls	r2, r3, #1
    bf84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bf86:	4413      	add	r3, r2
    bf88:	3301      	adds	r3, #1
    bf8a:	67fb      	str	r3, [r7, #124]	; 0x7c
        args2 = mp_nonlocal_alloc(args2_alloc * sizeof(mp_obj_t));
    bf8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    bf8e:	009b      	lsls	r3, r3, #2
    bf90:	4618      	mov	r0, r3
    bf92:	f7ff faa5 	bl	b4e0 <mp_nonlocal_alloc>
    bf96:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

        // copy the self
        if (self != MP_OBJ_NULL) {
    bf9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    bf9e:	2b00      	cmp	r3, #0
    bfa0:	d009      	beq.n	bfb6 <mp_call_prepare_args_n_kw_var+0xd2>
            args2[args2_len++] = self;
    bfa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    bfa4:	1c5a      	adds	r2, r3, #1
    bfa6:	67ba      	str	r2, [r7, #120]	; 0x78
    bfa8:	009b      	lsls	r3, r3, #2
    bfaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    bfae:	4413      	add	r3, r2
    bfb0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    bfb4:	601a      	str	r2, [r3, #0]
        }

        // copy the fixed pos args
        mp_seq_copy(args2 + args2_len, args, n_args, mp_obj_t);
    bfb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    bfb8:	009b      	lsls	r3, r3, #2
    bfba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    bfbe:	18d0      	adds	r0, r2, r3
    bfc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bfc2:	009b      	lsls	r3, r3, #2
    bfc4:	461a      	mov	r2, r3
    bfc6:	6879      	ldr	r1, [r7, #4]
    bfc8:	f00f ff7c 	bl	1bec4 <memcpy>
        args2_len += n_args;
    bfcc:	6fba      	ldr	r2, [r7, #120]	; 0x78
    bfce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bfd0:	4413      	add	r3, r2
    bfd2:	67bb      	str	r3, [r7, #120]	; 0x78
    bfd4:	e0b1      	b.n	c13a <mp_call_prepare_args_n_kw_var+0x256>

    } else if (MP_OBJ_IS_TYPE(pos_seq, &mp_type_tuple) || MP_OBJ_IS_TYPE(pos_seq, &mp_type_list)) {
    bfd6:	6d78      	ldr	r0, [r7, #84]	; 0x54
    bfd8:	f7ff fa30 	bl	b43c <MP_OBJ_IS_OBJ>
    bfdc:	4603      	mov	r3, r0
    bfde:	2b00      	cmp	r3, #0
    bfe0:	d004      	beq.n	bfec <mp_call_prepare_args_n_kw_var+0x108>
    bfe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    bfe4:	681b      	ldr	r3, [r3, #0]
    bfe6:	4a92      	ldr	r2, [pc, #584]	; (c230 <mp_call_prepare_args_n_kw_var+0x34c>)
    bfe8:	4293      	cmp	r3, r2
    bfea:	d00a      	beq.n	c002 <mp_call_prepare_args_n_kw_var+0x11e>
    bfec:	6d78      	ldr	r0, [r7, #84]	; 0x54
    bfee:	f7ff fa25 	bl	b43c <MP_OBJ_IS_OBJ>
    bff2:	4603      	mov	r3, r0
    bff4:	2b00      	cmp	r3, #0
    bff6:	d04a      	beq.n	c08e <mp_call_prepare_args_n_kw_var+0x1aa>
    bff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    bffa:	681b      	ldr	r3, [r3, #0]
    bffc:	4a8d      	ldr	r2, [pc, #564]	; (c234 <mp_call_prepare_args_n_kw_var+0x350>)
    bffe:	4293      	cmp	r3, r2
    c000:	d145      	bne.n	c08e <mp_call_prepare_args_n_kw_var+0x1aa>
        // optimise the case of a tuple and list

        // get the items
        size_t len;
        mp_obj_t *items;
        mp_obj_get_array(pos_seq, &len, &items);
    c002:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c006:	f107 0334 	add.w	r3, r7, #52	; 0x34
    c00a:	4619      	mov	r1, r3
    c00c:	6d78      	ldr	r0, [r7, #84]	; 0x54
    c00e:	f001 fe7b 	bl	dd08 <mp_obj_get_array>

        // allocate memory for the new array of args
        args2_alloc = 1 + n_args + len + 2 * (n_kw + kw_dict_len);
    c012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c016:	441a      	add	r2, r3
    c018:	6db9      	ldr	r1, [r7, #88]	; 0x58
    c01a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c01c:	440b      	add	r3, r1
    c01e:	005b      	lsls	r3, r3, #1
    c020:	4413      	add	r3, r2
    c022:	3301      	adds	r3, #1
    c024:	67fb      	str	r3, [r7, #124]	; 0x7c
        args2 = mp_nonlocal_alloc(args2_alloc * sizeof(mp_obj_t));
    c026:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c028:	009b      	lsls	r3, r3, #2
    c02a:	4618      	mov	r0, r3
    c02c:	f7ff fa58 	bl	b4e0 <mp_nonlocal_alloc>
    c030:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

        // copy the self
        if (self != MP_OBJ_NULL) {
    c034:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c038:	2b00      	cmp	r3, #0
    c03a:	d009      	beq.n	c050 <mp_call_prepare_args_n_kw_var+0x16c>
            args2[args2_len++] = self;
    c03c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c03e:	1c5a      	adds	r2, r3, #1
    c040:	67ba      	str	r2, [r7, #120]	; 0x78
    c042:	009b      	lsls	r3, r3, #2
    c044:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c048:	4413      	add	r3, r2
    c04a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    c04e:	601a      	str	r2, [r3, #0]
        }

        // copy the fixed and variable position args
        mp_seq_cat(args2 + args2_len, args, n_args, items, len, mp_obj_t);
    c050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c052:	009b      	lsls	r3, r3, #2
    c054:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c058:	18d0      	adds	r0, r2, r3
    c05a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c05c:	009b      	lsls	r3, r3, #2
    c05e:	461a      	mov	r2, r3
    c060:	6879      	ldr	r1, [r7, #4]
    c062:	f00f ff2f 	bl	1bec4 <memcpy>
    c066:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c06a:	4413      	add	r3, r2
    c06c:	009b      	lsls	r3, r3, #2
    c06e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c072:	18d0      	adds	r0, r2, r3
    c074:	6b39      	ldr	r1, [r7, #48]	; 0x30
    c076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c078:	009b      	lsls	r3, r3, #2
    c07a:	461a      	mov	r2, r3
    c07c:	f00f ff22 	bl	1bec4 <memcpy>
        args2_len += n_args + len;
    c080:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c084:	4413      	add	r3, r2
    c086:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c088:	4413      	add	r3, r2
    c08a:	67bb      	str	r3, [r7, #120]	; 0x78
    } else if (MP_OBJ_IS_TYPE(pos_seq, &mp_type_tuple) || MP_OBJ_IS_TYPE(pos_seq, &mp_type_list)) {
    c08c:	e055      	b.n	c13a <mp_call_prepare_args_n_kw_var+0x256>

    } else {
        // generic iterator

        // allocate memory for the new array of args
        args2_alloc = 1 + n_args + 2 * (n_kw + kw_dict_len) + 3;
    c08e:	6dba      	ldr	r2, [r7, #88]	; 0x58
    c090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c092:	4413      	add	r3, r2
    c094:	005a      	lsls	r2, r3, #1
    c096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c098:	4413      	add	r3, r2
    c09a:	3304      	adds	r3, #4
    c09c:	67fb      	str	r3, [r7, #124]	; 0x7c
        args2 = mp_nonlocal_alloc(args2_alloc * sizeof(mp_obj_t));
    c09e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c0a0:	009b      	lsls	r3, r3, #2
    c0a2:	4618      	mov	r0, r3
    c0a4:	f7ff fa1c 	bl	b4e0 <mp_nonlocal_alloc>
    c0a8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

        // copy the self
        if (self != MP_OBJ_NULL) {
    c0ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c0b0:	2b00      	cmp	r3, #0
    c0b2:	d009      	beq.n	c0c8 <mp_call_prepare_args_n_kw_var+0x1e4>
            args2[args2_len++] = self;
    c0b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c0b6:	1c5a      	adds	r2, r3, #1
    c0b8:	67ba      	str	r2, [r7, #120]	; 0x78
    c0ba:	009b      	lsls	r3, r3, #2
    c0bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c0c0:	4413      	add	r3, r2
    c0c2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    c0c6:	601a      	str	r2, [r3, #0]
        }

        // copy the fixed position args
        mp_seq_copy(args2 + args2_len, args, n_args, mp_obj_t);
    c0c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c0ca:	009b      	lsls	r3, r3, #2
    c0cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c0d0:	18d0      	adds	r0, r2, r3
    c0d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c0d4:	009b      	lsls	r3, r3, #2
    c0d6:	461a      	mov	r2, r3
    c0d8:	6879      	ldr	r1, [r7, #4]
    c0da:	f00f fef3 	bl	1bec4 <memcpy>
        args2_len += n_args;
    c0de:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c0e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c0e2:	4413      	add	r3, r2
    c0e4:	67bb      	str	r3, [r7, #120]	; 0x78

        // extract the variable position args from the iterator
        mp_obj_iter_buf_t iter_buf;
        mp_obj_t iterable = mp_getiter(pos_seq, &iter_buf);
    c0e6:	f107 0320 	add.w	r3, r7, #32
    c0ea:	4619      	mov	r1, r3
    c0ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
    c0ee:	f000 fc27 	bl	c940 <mp_getiter>
    c0f2:	64f8      	str	r0, [r7, #76]	; 0x4c
        mp_obj_t item;
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c0f4:	e01a      	b.n	c12c <mp_call_prepare_args_n_kw_var+0x248>
            if (args2_len >= args2_alloc) {
    c0f6:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c0f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c0fa:	429a      	cmp	r2, r3
    c0fc:	d30d      	bcc.n	c11a <mp_call_prepare_args_n_kw_var+0x236>
                args2 = mp_nonlocal_realloc(args2, args2_alloc * sizeof(mp_obj_t), args2_alloc * 2 * sizeof(mp_obj_t));
    c0fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c100:	0099      	lsls	r1, r3, #2
    c102:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c104:	00db      	lsls	r3, r3, #3
    c106:	461a      	mov	r2, r3
    c108:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    c10c:	f7ff f9f4 	bl	b4f8 <mp_nonlocal_realloc>
    c110:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                args2_alloc *= 2;
    c114:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c116:	005b      	lsls	r3, r3, #1
    c118:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
            args2[args2_len++] = item;
    c11a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c11c:	1c5a      	adds	r2, r3, #1
    c11e:	67ba      	str	r2, [r7, #120]	; 0x78
    c120:	009b      	lsls	r3, r3, #2
    c122:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c126:	4413      	add	r3, r2
    c128:	6cba      	ldr	r2, [r7, #72]	; 0x48
    c12a:	601a      	str	r2, [r3, #0]
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c12c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    c12e:	f000 fc89 	bl	ca44 <mp_iternext>
    c132:	64b8      	str	r0, [r7, #72]	; 0x48
    c134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c136:	2b04      	cmp	r3, #4
    c138:	d1dd      	bne.n	c0f6 <mp_call_prepare_args_n_kw_var+0x212>
        }
    }

    // The size of the args2 array now is the number of positional args.
    uint pos_args_len = args2_len;
    c13a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c13c:	647b      	str	r3, [r7, #68]	; 0x44

    // Copy the fixed kw args.
    mp_seq_copy(args2 + args2_len, args + n_args, 2 * n_kw, mp_obj_t);
    c13e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c140:	009b      	lsls	r3, r3, #2
    c142:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c146:	18d0      	adds	r0, r2, r3
    c148:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c14a:	009b      	lsls	r3, r3, #2
    c14c:	687a      	ldr	r2, [r7, #4]
    c14e:	18d1      	adds	r1, r2, r3
    c150:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c152:	00db      	lsls	r3, r3, #3
    c154:	461a      	mov	r2, r3
    c156:	f00f feb5 	bl	1bec4 <memcpy>
    args2_len += 2 * n_kw;
    c15a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c15c:	005b      	lsls	r3, r3, #1
    c15e:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c160:	4413      	add	r3, r2
    c162:	67bb      	str	r3, [r7, #120]	; 0x78

    // Extract (key,value) pairs from kw_dict dictionary and append to args2.
    // Note that it can be arbitrary iterator.
    if (kw_dict == MP_OBJ_NULL) {
    c164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c166:	2b00      	cmp	r3, #0
    c168:	f000 80d2 	beq.w	c310 <mp_call_prepare_args_n_kw_var+0x42c>
        // pass
    } else if (MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    c16c:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c16e:	f7ff f965 	bl	b43c <MP_OBJ_IS_OBJ>
    c172:	4603      	mov	r3, r0
    c174:	2b00      	cmp	r3, #0
    c176:	d065      	beq.n	c244 <mp_call_prepare_args_n_kw_var+0x360>
    c178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c17a:	681b      	ldr	r3, [r3, #0]
    c17c:	4a2b      	ldr	r2, [pc, #172]	; (c22c <mp_call_prepare_args_n_kw_var+0x348>)
    c17e:	4293      	cmp	r3, r2
    c180:	d160      	bne.n	c244 <mp_call_prepare_args_n_kw_var+0x360>
        // dictionary
        mp_map_t *map = mp_obj_dict_get_map(kw_dict);
    c182:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c184:	f003 f84a 	bl	f21c <mp_obj_dict_get_map>
    c188:	6438      	str	r0, [r7, #64]	; 0x40
        assert(args2_len + 2 * map->used <= args2_alloc); // should have enough, since kw_dict_len is in this case hinted correctly above
    c18a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c18c:	681b      	ldr	r3, [r3, #0]
    c18e:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    c192:	005b      	lsls	r3, r3, #1
    c194:	461a      	mov	r2, r3
    c196:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c198:	441a      	add	r2, r3
    c19a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c19c:	429a      	cmp	r2, r3
    c19e:	d906      	bls.n	c1ae <mp_call_prepare_args_n_kw_var+0x2ca>
    c1a0:	4b25      	ldr	r3, [pc, #148]	; (c238 <mp_call_prepare_args_n_kw_var+0x354>)
    c1a2:	4a26      	ldr	r2, [pc, #152]	; (c23c <mp_call_prepare_args_n_kw_var+0x358>)
    c1a4:	f44f 713b 	mov.w	r1, #748	; 0x2ec
    c1a8:	4825      	ldr	r0, [pc, #148]	; (c240 <mp_call_prepare_args_n_kw_var+0x35c>)
    c1aa:	f00f f8df 	bl	1b36c <__assert_func>
        for (size_t i = 0; i < map->alloc; i++) {
    c1ae:	2300      	movs	r3, #0
    c1b0:	673b      	str	r3, [r7, #112]	; 0x70
    c1b2:	e034      	b.n	c21e <mp_call_prepare_args_n_kw_var+0x33a>
            if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    c1b4:	6f39      	ldr	r1, [r7, #112]	; 0x70
    c1b6:	6c38      	ldr	r0, [r7, #64]	; 0x40
    c1b8:	f7ff f952 	bl	b460 <MP_MAP_SLOT_IS_FILLED>
    c1bc:	4603      	mov	r3, r0
    c1be:	2b00      	cmp	r3, #0
    c1c0:	d02a      	beq.n	c218 <mp_call_prepare_args_n_kw_var+0x334>
                // the key must be a qstr, so intern it if it's a string
                mp_obj_t key = map->table[i].key;
    c1c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c1c4:	689a      	ldr	r2, [r3, #8]
    c1c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c1c8:	00db      	lsls	r3, r3, #3
    c1ca:	4413      	add	r3, r2
    c1cc:	681b      	ldr	r3, [r3, #0]
    c1ce:	66fb      	str	r3, [r7, #108]	; 0x6c
                if (!MP_OBJ_IS_QSTR(key)) {
    c1d0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    c1d2:	f7ff f921 	bl	b418 <MP_OBJ_IS_QSTR>
    c1d6:	4603      	mov	r3, r0
    c1d8:	f083 0301 	eor.w	r3, r3, #1
    c1dc:	b2db      	uxtb	r3, r3
    c1de:	2b00      	cmp	r3, #0
    c1e0:	d003      	beq.n	c1ea <mp_call_prepare_args_n_kw_var+0x306>
                    key = mp_obj_str_intern_checked(key);
    c1e2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    c1e4:	f009 f940 	bl	15468 <mp_obj_str_intern_checked>
    c1e8:	66f8      	str	r0, [r7, #108]	; 0x6c
                }
                args2[args2_len++] = key;
    c1ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c1ec:	1c5a      	adds	r2, r3, #1
    c1ee:	67ba      	str	r2, [r7, #120]	; 0x78
    c1f0:	009b      	lsls	r3, r3, #2
    c1f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c1f6:	4413      	add	r3, r2
    c1f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    c1fa:	601a      	str	r2, [r3, #0]
                args2[args2_len++] = map->table[i].value;
    c1fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c1fe:	1c5a      	adds	r2, r3, #1
    c200:	67ba      	str	r2, [r7, #120]	; 0x78
    c202:	009b      	lsls	r3, r3, #2
    c204:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c208:	4413      	add	r3, r2
    c20a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c20c:	6891      	ldr	r1, [r2, #8]
    c20e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    c210:	00d2      	lsls	r2, r2, #3
    c212:	440a      	add	r2, r1
    c214:	6852      	ldr	r2, [r2, #4]
    c216:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < map->alloc; i++) {
    c218:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c21a:	3301      	adds	r3, #1
    c21c:	673b      	str	r3, [r7, #112]	; 0x70
    c21e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c220:	685a      	ldr	r2, [r3, #4]
    c222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c224:	429a      	cmp	r2, r3
    c226:	d8c5      	bhi.n	c1b4 <mp_call_prepare_args_n_kw_var+0x2d0>
    } else if (MP_OBJ_IS_TYPE(kw_dict, &mp_type_dict)) {
    c228:	e072      	b.n	c310 <mp_call_prepare_args_n_kw_var+0x42c>
    c22a:	bf00      	nop
    c22c:	000200e8 	.word	0x000200e8
    c230:	00021e68 	.word	0x00021e68
    c234:	000211fc 	.word	0x000211fc
    c238:	0001f710 	.word	0x0001f710
    c23c:	0001f8dc 	.word	0x0001f8dc
    c240:	0001f674 	.word	0x0001f674
        // - call keys() to get an iterable of all keys in the mapping
        // - call __getitem__ for each key to get the corresponding value

        // get the keys iterable
        mp_obj_t dest[3];
        mp_load_method(kw_dict, MP_QSTR_keys, dest);
    c244:	f107 0314 	add.w	r3, r7, #20
    c248:	461a      	mov	r2, r3
    c24a:	218e      	movs	r1, #142	; 0x8e
    c24c:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c24e:	f000 faff 	bl	c850 <mp_load_method>
        mp_obj_t iterable = mp_getiter(mp_call_method_n_kw(0, 0, dest), NULL);
    c252:	f107 0314 	add.w	r3, r7, #20
    c256:	461a      	mov	r2, r3
    c258:	2100      	movs	r1, #0
    c25a:	2000      	movs	r0, #0
    c25c:	f7ff fe1e 	bl	be9c <mp_call_method_n_kw>
    c260:	4603      	mov	r3, r0
    c262:	2100      	movs	r1, #0
    c264:	4618      	mov	r0, r3
    c266:	f000 fb6b 	bl	c940 <mp_getiter>
    c26a:	63f8      	str	r0, [r7, #60]	; 0x3c

        mp_obj_t key;
        while ((key = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c26c:	e049      	b.n	c302 <mp_call_prepare_args_n_kw_var+0x41e>
            // expand size of args array if needed
            if (args2_len + 1 >= args2_alloc) {
    c26e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c270:	1c5a      	adds	r2, r3, #1
    c272:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c274:	429a      	cmp	r2, r3
    c276:	d314      	bcc.n	c2a2 <mp_call_prepare_args_n_kw_var+0x3be>
                uint new_alloc = args2_alloc * 2;
    c278:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c27a:	005b      	lsls	r3, r3, #1
    c27c:	667b      	str	r3, [r7, #100]	; 0x64
                if (new_alloc < 4) {
    c27e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c280:	2b03      	cmp	r3, #3
    c282:	d801      	bhi.n	c288 <mp_call_prepare_args_n_kw_var+0x3a4>
                    new_alloc = 4;
    c284:	2304      	movs	r3, #4
    c286:	667b      	str	r3, [r7, #100]	; 0x64
                }
                args2 = mp_nonlocal_realloc(args2, args2_alloc * sizeof(mp_obj_t), new_alloc * sizeof(mp_obj_t));
    c288:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c28a:	0099      	lsls	r1, r3, #2
    c28c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c28e:	009b      	lsls	r3, r3, #2
    c290:	461a      	mov	r2, r3
    c292:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    c296:	f7ff f92f 	bl	b4f8 <mp_nonlocal_realloc>
    c29a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                args2_alloc = new_alloc;
    c29e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c2a0:	67fb      	str	r3, [r7, #124]	; 0x7c
            }

            // the key must be a qstr, so intern it if it's a string
            if (!MP_OBJ_IS_QSTR(key)) {
    c2a2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    c2a4:	f7ff f8b8 	bl	b418 <MP_OBJ_IS_QSTR>
    c2a8:	4603      	mov	r3, r0
    c2aa:	f083 0301 	eor.w	r3, r3, #1
    c2ae:	b2db      	uxtb	r3, r3
    c2b0:	2b00      	cmp	r3, #0
    c2b2:	d003      	beq.n	c2bc <mp_call_prepare_args_n_kw_var+0x3d8>
                key = mp_obj_str_intern_checked(key);
    c2b4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    c2b6:	f009 f8d7 	bl	15468 <mp_obj_str_intern_checked>
    c2ba:	66b8      	str	r0, [r7, #104]	; 0x68
            }

            // get the value corresponding to the key
            mp_load_method(kw_dict, MP_QSTR___getitem__, dest);
    c2bc:	f107 0314 	add.w	r3, r7, #20
    c2c0:	461a      	mov	r2, r3
    c2c2:	210e      	movs	r1, #14
    c2c4:	6d38      	ldr	r0, [r7, #80]	; 0x50
    c2c6:	f000 fac3 	bl	c850 <mp_load_method>
            dest[2] = key;
    c2ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c2cc:	61fb      	str	r3, [r7, #28]
            mp_obj_t value = mp_call_method_n_kw(1, 0, dest);
    c2ce:	f107 0314 	add.w	r3, r7, #20
    c2d2:	461a      	mov	r2, r3
    c2d4:	2100      	movs	r1, #0
    c2d6:	2001      	movs	r0, #1
    c2d8:	f7ff fde0 	bl	be9c <mp_call_method_n_kw>
    c2dc:	63b8      	str	r0, [r7, #56]	; 0x38

            // store the key/value pair in the argument array
            args2[args2_len++] = key;
    c2de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c2e0:	1c5a      	adds	r2, r3, #1
    c2e2:	67ba      	str	r2, [r7, #120]	; 0x78
    c2e4:	009b      	lsls	r3, r3, #2
    c2e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c2ea:	4413      	add	r3, r2
    c2ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
    c2ee:	601a      	str	r2, [r3, #0]
            args2[args2_len++] = value;
    c2f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c2f2:	1c5a      	adds	r2, r3, #1
    c2f4:	67ba      	str	r2, [r7, #120]	; 0x78
    c2f6:	009b      	lsls	r3, r3, #2
    c2f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c2fc:	4413      	add	r3, r2
    c2fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
    c300:	601a      	str	r2, [r3, #0]
        while ((key = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c302:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c304:	f000 fb9e 	bl	ca44 <mp_iternext>
    c308:	66b8      	str	r0, [r7, #104]	; 0x68
    c30a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c30c:	2b04      	cmp	r3, #4
    c30e:	d1ae      	bne.n	c26e <mp_call_prepare_args_n_kw_var+0x38a>
        }
    }

    out_args->fun = fun;
    c310:	683b      	ldr	r3, [r7, #0]
    c312:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    c314:	601a      	str	r2, [r3, #0]
    out_args->args = args2;
    c316:	683b      	ldr	r3, [r7, #0]
    c318:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    c31c:	611a      	str	r2, [r3, #16]
    out_args->n_args = pos_args_len;
    c31e:	683b      	ldr	r3, [r7, #0]
    c320:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    c322:	605a      	str	r2, [r3, #4]
    out_args->n_kw = (args2_len - pos_args_len) / 2;
    c324:	6fba      	ldr	r2, [r7, #120]	; 0x78
    c326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c328:	1ad3      	subs	r3, r2, r3
    c32a:	085a      	lsrs	r2, r3, #1
    c32c:	683b      	ldr	r3, [r7, #0]
    c32e:	609a      	str	r2, [r3, #8]
    out_args->n_alloc = args2_alloc;
    c330:	683b      	ldr	r3, [r7, #0]
    c332:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    c334:	60da      	str	r2, [r3, #12]
}
    c336:	bf00      	nop
    c338:	3788      	adds	r7, #136	; 0x88
    c33a:	46bd      	mov	sp, r7
    c33c:	bd80      	pop	{r7, pc}
    c33e:	bf00      	nop

0000c340 <mp_call_method_n_kw_var>:

mp_obj_t mp_call_method_n_kw_var(bool have_self, size_t n_args_n_kw, const mp_obj_t *args) {
    c340:	b580      	push	{r7, lr}
    c342:	b08a      	sub	sp, #40	; 0x28
    c344:	af00      	add	r7, sp, #0
    c346:	4603      	mov	r3, r0
    c348:	60b9      	str	r1, [r7, #8]
    c34a:	607a      	str	r2, [r7, #4]
    c34c:	73fb      	strb	r3, [r7, #15]
    mp_call_args_t out_args;
    mp_call_prepare_args_n_kw_var(have_self, n_args_n_kw, args, &out_args);
    c34e:	f107 0310 	add.w	r3, r7, #16
    c352:	7bf8      	ldrb	r0, [r7, #15]
    c354:	687a      	ldr	r2, [r7, #4]
    c356:	68b9      	ldr	r1, [r7, #8]
    c358:	f7ff fdc4 	bl	bee4 <mp_call_prepare_args_n_kw_var>

    mp_obj_t res = mp_call_function_n_kw(out_args.fun, out_args.n_args, out_args.n_kw, out_args.args);
    c35c:	6938      	ldr	r0, [r7, #16]
    c35e:	6979      	ldr	r1, [r7, #20]
    c360:	69ba      	ldr	r2, [r7, #24]
    c362:	6a3b      	ldr	r3, [r7, #32]
    c364:	f7ff fd78 	bl	be58 <mp_call_function_n_kw>
    c368:	6278      	str	r0, [r7, #36]	; 0x24
    mp_nonlocal_free(out_args.args, out_args.n_alloc * sizeof(mp_obj_t));
    c36a:	6a3a      	ldr	r2, [r7, #32]
    c36c:	69fb      	ldr	r3, [r7, #28]
    c36e:	009b      	lsls	r3, r3, #2
    c370:	4619      	mov	r1, r3
    c372:	4610      	mov	r0, r2
    c374:	f7ff f8d0 	bl	b518 <mp_nonlocal_free>

    return res;
    c378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c37a:	4618      	mov	r0, r3
    c37c:	3728      	adds	r7, #40	; 0x28
    c37e:	46bd      	mov	sp, r7
    c380:	bd80      	pop	{r7, pc}
    c382:	bf00      	nop

0000c384 <mp_unpack_sequence>:

// unpacked items are stored in reverse order into the array pointed to by items
void mp_unpack_sequence(mp_obj_t seq_in, size_t num, mp_obj_t *items) {
    c384:	b580      	push	{r7, lr}
    c386:	b08e      	sub	sp, #56	; 0x38
    c388:	af00      	add	r7, sp, #0
    c38a:	60f8      	str	r0, [r7, #12]
    c38c:	60b9      	str	r1, [r7, #8]
    c38e:	607a      	str	r2, [r7, #4]
    size_t seq_len;
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c390:	68f8      	ldr	r0, [r7, #12]
    c392:	f7ff f853 	bl	b43c <MP_OBJ_IS_OBJ>
    c396:	4603      	mov	r3, r0
    c398:	2b00      	cmp	r3, #0
    c39a:	d004      	beq.n	c3a6 <mp_unpack_sequence+0x22>
    c39c:	68fb      	ldr	r3, [r7, #12]
    c39e:	681b      	ldr	r3, [r3, #0]
    c3a0:	4a38      	ldr	r2, [pc, #224]	; (c484 <mp_unpack_sequence+0x100>)
    c3a2:	4293      	cmp	r3, r2
    c3a4:	d00a      	beq.n	c3bc <mp_unpack_sequence+0x38>
    c3a6:	68f8      	ldr	r0, [r7, #12]
    c3a8:	f7ff f848 	bl	b43c <MP_OBJ_IS_OBJ>
    c3ac:	4603      	mov	r3, r0
    c3ae:	2b00      	cmp	r3, #0
    c3b0:	d02e      	beq.n	c410 <mp_unpack_sequence+0x8c>
    c3b2:	68fb      	ldr	r3, [r7, #12]
    c3b4:	681b      	ldr	r3, [r3, #0]
    c3b6:	4a34      	ldr	r2, [pc, #208]	; (c488 <mp_unpack_sequence+0x104>)
    c3b8:	4293      	cmp	r3, r2
    c3ba:	d129      	bne.n	c410 <mp_unpack_sequence+0x8c>
        mp_obj_t *seq_items;
        mp_obj_get_array(seq_in, &seq_len, &seq_items);
    c3bc:	f107 0224 	add.w	r2, r7, #36	; 0x24
    c3c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
    c3c4:	4619      	mov	r1, r3
    c3c6:	68f8      	ldr	r0, [r7, #12]
    c3c8:	f001 fc9e 	bl	dd08 <mp_obj_get_array>
        if (seq_len < num) {
    c3cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c3ce:	68bb      	ldr	r3, [r7, #8]
    c3d0:	429a      	cmp	r2, r3
    c3d2:	d348      	bcc.n	c466 <mp_unpack_sequence+0xe2>
            goto too_short;
        } else if (seq_len > num) {
    c3d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c3d6:	68bb      	ldr	r3, [r7, #8]
    c3d8:	429a      	cmp	r2, r3
    c3da:	d84a      	bhi.n	c472 <mp_unpack_sequence+0xee>
            goto too_long;
        }
        for (size_t i = 0; i < num; i++) {
    c3dc:	2300      	movs	r3, #0
    c3de:	637b      	str	r3, [r7, #52]	; 0x34
    c3e0:	e011      	b.n	c406 <mp_unpack_sequence+0x82>
            items[i] = seq_items[num - 1 - i];
    c3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c3e4:	009b      	lsls	r3, r3, #2
    c3e6:	687a      	ldr	r2, [r7, #4]
    c3e8:	441a      	add	r2, r3
    c3ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
    c3ec:	68b8      	ldr	r0, [r7, #8]
    c3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c3f0:	1ac3      	subs	r3, r0, r3
    c3f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c3f6:	3b01      	subs	r3, #1
    c3f8:	009b      	lsls	r3, r3, #2
    c3fa:	440b      	add	r3, r1
    c3fc:	681b      	ldr	r3, [r3, #0]
    c3fe:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < num; i++) {
    c400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c402:	3301      	adds	r3, #1
    c404:	637b      	str	r3, [r7, #52]	; 0x34
    c406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c408:	68bb      	ldr	r3, [r7, #8]
    c40a:	429a      	cmp	r2, r3
    c40c:	d3e9      	bcc.n	c3e2 <mp_unpack_sequence+0x5e>
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c40e:	e029      	b.n	c464 <mp_unpack_sequence+0xe0>
        }
    } else {
        mp_obj_iter_buf_t iter_buf;
        mp_obj_t iterable = mp_getiter(seq_in, &iter_buf);
    c410:	f107 0314 	add.w	r3, r7, #20
    c414:	4619      	mov	r1, r3
    c416:	68f8      	ldr	r0, [r7, #12]
    c418:	f000 fa92 	bl	c940 <mp_getiter>
    c41c:	6338      	str	r0, [r7, #48]	; 0x30

        for (seq_len = 0; seq_len < num; seq_len++) {
    c41e:	2300      	movs	r3, #0
    c420:	62bb      	str	r3, [r7, #40]	; 0x28
    c422:	e014      	b.n	c44e <mp_unpack_sequence+0xca>
            mp_obj_t el = mp_iternext(iterable);
    c424:	6b38      	ldr	r0, [r7, #48]	; 0x30
    c426:	f000 fb0d 	bl	ca44 <mp_iternext>
    c42a:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (el == MP_OBJ_STOP_ITERATION) {
    c42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c42e:	2b04      	cmp	r3, #4
    c430:	d01b      	beq.n	c46a <mp_unpack_sequence+0xe6>
                goto too_short;
            }
            items[num - 1 - seq_len] = el;
    c432:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c434:	68ba      	ldr	r2, [r7, #8]
    c436:	1ad3      	subs	r3, r2, r3
    c438:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c43c:	3b01      	subs	r3, #1
    c43e:	009b      	lsls	r3, r3, #2
    c440:	687a      	ldr	r2, [r7, #4]
    c442:	4413      	add	r3, r2
    c444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c446:	601a      	str	r2, [r3, #0]
        for (seq_len = 0; seq_len < num; seq_len++) {
    c448:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c44a:	3301      	adds	r3, #1
    c44c:	62bb      	str	r3, [r7, #40]	; 0x28
    c44e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c450:	68bb      	ldr	r3, [r7, #8]
    c452:	429a      	cmp	r2, r3
    c454:	d3e6      	bcc.n	c424 <mp_unpack_sequence+0xa0>
        }
        if (mp_iternext(iterable) != MP_OBJ_STOP_ITERATION) {
    c456:	6b38      	ldr	r0, [r7, #48]	; 0x30
    c458:	f000 faf4 	bl	ca44 <mp_iternext>
    c45c:	4603      	mov	r3, r0
    c45e:	2b04      	cmp	r3, #4
    c460:	d00b      	beq.n	c47a <mp_unpack_sequence+0xf6>
            goto too_long;
    c462:	e007      	b.n	c474 <mp_unpack_sequence+0xf0>
        }
    }
    return;
    c464:	e009      	b.n	c47a <mp_unpack_sequence+0xf6>
            goto too_short;
    c466:	bf00      	nop
    c468:	e000      	b.n	c46c <mp_unpack_sequence+0xe8>
                goto too_short;
    c46a:	bf00      	nop

too_short:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_ValueError("wrong number of values to unpack");
    c46c:	4807      	ldr	r0, [pc, #28]	; (c48c <mp_unpack_sequence+0x108>)
    c46e:	f000 fdad 	bl	cfcc <mp_raise_ValueError>
            goto too_long;
    c472:	bf00      	nop
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
            "need more than %d values to unpack", (int)seq_len));
    }
too_long:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_ValueError("wrong number of values to unpack");
    c474:	4805      	ldr	r0, [pc, #20]	; (c48c <mp_unpack_sequence+0x108>)
    c476:	f000 fda9 	bl	cfcc <mp_raise_ValueError>
    return;
    c47a:	bf00      	nop
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
            "too many values to unpack (expected %d)", (int)num));
    }
}
    c47c:	3738      	adds	r7, #56	; 0x38
    c47e:	46bd      	mov	sp, r7
    c480:	bd80      	pop	{r7, pc}
    c482:	bf00      	nop
    c484:	00021e68 	.word	0x00021e68
    c488:	000211fc 	.word	0x000211fc
    c48c:	0001f73c 	.word	0x0001f73c

0000c490 <mp_unpack_ex>:

// unpacked items are stored in reverse order into the array pointed to by items
void mp_unpack_ex(mp_obj_t seq_in, size_t num_in, mp_obj_t *items) {
    c490:	b590      	push	{r4, r7, lr}
    c492:	b08f      	sub	sp, #60	; 0x3c
    c494:	af00      	add	r7, sp, #0
    c496:	60f8      	str	r0, [r7, #12]
    c498:	60b9      	str	r1, [r7, #8]
    c49a:	607a      	str	r2, [r7, #4]
    size_t num_left = num_in & 0xff;
    c49c:	68bb      	ldr	r3, [r7, #8]
    c49e:	b2db      	uxtb	r3, r3
    c4a0:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t num_right = (num_in >> 8) & 0xff;
    c4a2:	68bb      	ldr	r3, [r7, #8]
    c4a4:	0a1b      	lsrs	r3, r3, #8
    c4a6:	b2db      	uxtb	r3, r3
    c4a8:	627b      	str	r3, [r7, #36]	; 0x24
    DEBUG_OP_printf("unpack ex " UINT_FMT " " UINT_FMT "\n", num_left, num_right);
    size_t seq_len;
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c4aa:	68f8      	ldr	r0, [r7, #12]
    c4ac:	f7fe ffc6 	bl	b43c <MP_OBJ_IS_OBJ>
    c4b0:	4603      	mov	r3, r0
    c4b2:	2b00      	cmp	r3, #0
    c4b4:	d004      	beq.n	c4c0 <mp_unpack_ex+0x30>
    c4b6:	68fb      	ldr	r3, [r7, #12]
    c4b8:	681b      	ldr	r3, [r3, #0]
    c4ba:	4a6a      	ldr	r2, [pc, #424]	; (c664 <mp_unpack_ex+0x1d4>)
    c4bc:	4293      	cmp	r3, r2
    c4be:	d00a      	beq.n	c4d6 <mp_unpack_ex+0x46>
    c4c0:	68f8      	ldr	r0, [r7, #12]
    c4c2:	f7fe ffbb 	bl	b43c <MP_OBJ_IS_OBJ>
    c4c6:	4603      	mov	r3, r0
    c4c8:	2b00      	cmp	r3, #0
    c4ca:	d05b      	beq.n	c584 <mp_unpack_ex+0xf4>
    c4cc:	68fb      	ldr	r3, [r7, #12]
    c4ce:	681b      	ldr	r3, [r3, #0]
    c4d0:	4a65      	ldr	r2, [pc, #404]	; (c668 <mp_unpack_ex+0x1d8>)
    c4d2:	4293      	cmp	r3, r2
    c4d4:	d156      	bne.n	c584 <mp_unpack_ex+0xf4>
        mp_obj_t *seq_items;
        mp_obj_get_array(seq_in, &seq_len, &seq_items);
    c4d6:	f107 0210 	add.w	r2, r7, #16
    c4da:	f107 0314 	add.w	r3, r7, #20
    c4de:	4619      	mov	r1, r3
    c4e0:	68f8      	ldr	r0, [r7, #12]
    c4e2:	f001 fc11 	bl	dd08 <mp_obj_get_array>
        if (seq_len < num_left + num_right) {
    c4e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c4ea:	441a      	add	r2, r3
    c4ec:	697b      	ldr	r3, [r7, #20]
    c4ee:	429a      	cmp	r2, r3
    c4f0:	f200 80ad 	bhi.w	c64e <mp_unpack_ex+0x1be>
            goto too_short;
        }
        for (size_t i = 0; i < num_right; i++) {
    c4f4:	2300      	movs	r3, #0
    c4f6:	637b      	str	r3, [r7, #52]	; 0x34
    c4f8:	e011      	b.n	c51e <mp_unpack_ex+0x8e>
            items[i] = seq_items[seq_len - 1 - i];
    c4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c4fc:	009b      	lsls	r3, r3, #2
    c4fe:	687a      	ldr	r2, [r7, #4]
    c500:	441a      	add	r2, r3
    c502:	6939      	ldr	r1, [r7, #16]
    c504:	6978      	ldr	r0, [r7, #20]
    c506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c508:	1ac3      	subs	r3, r0, r3
    c50a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c50e:	3b01      	subs	r3, #1
    c510:	009b      	lsls	r3, r3, #2
    c512:	440b      	add	r3, r1
    c514:	681b      	ldr	r3, [r3, #0]
    c516:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < num_right; i++) {
    c518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c51a:	3301      	adds	r3, #1
    c51c:	637b      	str	r3, [r7, #52]	; 0x34
    c51e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c522:	429a      	cmp	r2, r3
    c524:	d3e9      	bcc.n	c4fa <mp_unpack_ex+0x6a>
        }
        items[num_right] = mp_obj_new_list(seq_len - num_left - num_right, seq_items + num_left);
    c526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c528:	009b      	lsls	r3, r3, #2
    c52a:	687a      	ldr	r2, [r7, #4]
    c52c:	18d4      	adds	r4, r2, r3
    c52e:	697a      	ldr	r2, [r7, #20]
    c530:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c532:	1ad2      	subs	r2, r2, r3
    c534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c536:	1ad0      	subs	r0, r2, r3
    c538:	693a      	ldr	r2, [r7, #16]
    c53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c53c:	009b      	lsls	r3, r3, #2
    c53e:	4413      	add	r3, r2
    c540:	4619      	mov	r1, r3
    c542:	f005 f9ad 	bl	118a0 <mp_obj_new_list>
    c546:	4603      	mov	r3, r0
    c548:	6023      	str	r3, [r4, #0]
        for (size_t i = 0; i < num_left; i++) {
    c54a:	2300      	movs	r3, #0
    c54c:	633b      	str	r3, [r7, #48]	; 0x30
    c54e:	e014      	b.n	c57a <mp_unpack_ex+0xea>
            items[num_right + 1 + i] = seq_items[num_left - 1 - i];
    c550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c554:	4413      	add	r3, r2
    c556:	3301      	adds	r3, #1
    c558:	009b      	lsls	r3, r3, #2
    c55a:	687a      	ldr	r2, [r7, #4]
    c55c:	441a      	add	r2, r3
    c55e:	6939      	ldr	r1, [r7, #16]
    c560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c564:	1ac3      	subs	r3, r0, r3
    c566:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c56a:	3b01      	subs	r3, #1
    c56c:	009b      	lsls	r3, r3, #2
    c56e:	440b      	add	r3, r1
    c570:	681b      	ldr	r3, [r3, #0]
    c572:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < num_left; i++) {
    c574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c576:	3301      	adds	r3, #1
    c578:	633b      	str	r3, [r7, #48]	; 0x30
    c57a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c57e:	429a      	cmp	r2, r3
    c580:	d3e6      	bcc.n	c550 <mp_unpack_ex+0xc0>
    if (MP_OBJ_IS_TYPE(seq_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(seq_in, &mp_type_list)) {
    c582:	e063      	b.n	c64c <mp_unpack_ex+0x1bc>
    } else {
        // Generic iterable; this gets a bit messy: we unpack known left length to the
        // items destination array, then the rest to a dynamically created list.  Once the
        // iterable is exhausted, we take from this list for the right part of the items.
        // TODO Improve to waste less memory in the dynamically created list.
        mp_obj_t iterable = mp_getiter(seq_in, NULL);
    c584:	2100      	movs	r1, #0
    c586:	68f8      	ldr	r0, [r7, #12]
    c588:	f000 f9da 	bl	c940 <mp_getiter>
    c58c:	6238      	str	r0, [r7, #32]
        mp_obj_t item;
        for (seq_len = 0; seq_len < num_left; seq_len++) {
    c58e:	2300      	movs	r3, #0
    c590:	617b      	str	r3, [r7, #20]
    c592:	e013      	b.n	c5bc <mp_unpack_ex+0x12c>
            item = mp_iternext(iterable);
    c594:	6a38      	ldr	r0, [r7, #32]
    c596:	f000 fa55 	bl	ca44 <mp_iternext>
    c59a:	61f8      	str	r0, [r7, #28]
            if (item == MP_OBJ_STOP_ITERATION) {
    c59c:	69fb      	ldr	r3, [r7, #28]
    c59e:	2b04      	cmp	r3, #4
    c5a0:	d057      	beq.n	c652 <mp_unpack_ex+0x1c2>
                goto too_short;
            }
            items[num_left + num_right + 1 - 1 - seq_len] = item;
    c5a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c5a6:	441a      	add	r2, r3
    c5a8:	697b      	ldr	r3, [r7, #20]
    c5aa:	1ad3      	subs	r3, r2, r3
    c5ac:	009b      	lsls	r3, r3, #2
    c5ae:	687a      	ldr	r2, [r7, #4]
    c5b0:	4413      	add	r3, r2
    c5b2:	69fa      	ldr	r2, [r7, #28]
    c5b4:	601a      	str	r2, [r3, #0]
        for (seq_len = 0; seq_len < num_left; seq_len++) {
    c5b6:	697b      	ldr	r3, [r7, #20]
    c5b8:	3301      	adds	r3, #1
    c5ba:	617b      	str	r3, [r7, #20]
    c5bc:	697a      	ldr	r2, [r7, #20]
    c5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c5c0:	429a      	cmp	r2, r3
    c5c2:	d3e7      	bcc.n	c594 <mp_unpack_ex+0x104>
        }
        mp_obj_list_t *rest = MP_OBJ_TO_PTR(mp_obj_new_list(0, NULL));
    c5c4:	2100      	movs	r1, #0
    c5c6:	2000      	movs	r0, #0
    c5c8:	f005 f96a 	bl	118a0 <mp_obj_new_list>
    c5cc:	61b8      	str	r0, [r7, #24]
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c5ce:	e003      	b.n	c5d8 <mp_unpack_ex+0x148>
            mp_obj_list_append(MP_OBJ_FROM_PTR(rest), item);
    c5d0:	69f9      	ldr	r1, [r7, #28]
    c5d2:	69b8      	ldr	r0, [r7, #24]
    c5d4:	f004 fcd2 	bl	10f7c <mp_obj_list_append>
        while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
    c5d8:	6a38      	ldr	r0, [r7, #32]
    c5da:	f000 fa33 	bl	ca44 <mp_iternext>
    c5de:	61f8      	str	r0, [r7, #28]
    c5e0:	69fb      	ldr	r3, [r7, #28]
    c5e2:	2b04      	cmp	r3, #4
    c5e4:	d1f4      	bne.n	c5d0 <mp_unpack_ex+0x140>
        }
        if (rest->len < num_right) {
    c5e6:	69bb      	ldr	r3, [r7, #24]
    c5e8:	689a      	ldr	r2, [r3, #8]
    c5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c5ec:	429a      	cmp	r2, r3
    c5ee:	d332      	bcc.n	c656 <mp_unpack_ex+0x1c6>
            goto too_short;
        }
        items[num_right] = MP_OBJ_FROM_PTR(rest);
    c5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c5f2:	009b      	lsls	r3, r3, #2
    c5f4:	687a      	ldr	r2, [r7, #4]
    c5f6:	4413      	add	r3, r2
    c5f8:	69ba      	ldr	r2, [r7, #24]
    c5fa:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < num_right; i++) {
    c5fc:	2300      	movs	r3, #0
    c5fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    c600:	e017      	b.n	c632 <mp_unpack_ex+0x1a2>
            items[num_right - 1 - i] = rest->items[rest->len - num_right + i];
    c602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c606:	1ad3      	subs	r3, r2, r3
    c608:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c60c:	3b01      	subs	r3, #1
    c60e:	009b      	lsls	r3, r3, #2
    c610:	687a      	ldr	r2, [r7, #4]
    c612:	4413      	add	r3, r2
    c614:	69ba      	ldr	r2, [r7, #24]
    c616:	68d1      	ldr	r1, [r2, #12]
    c618:	69ba      	ldr	r2, [r7, #24]
    c61a:	6890      	ldr	r0, [r2, #8]
    c61c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c61e:	1a80      	subs	r0, r0, r2
    c620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c622:	4402      	add	r2, r0
    c624:	0092      	lsls	r2, r2, #2
    c626:	440a      	add	r2, r1
    c628:	6812      	ldr	r2, [r2, #0]
    c62a:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < num_right; i++) {
    c62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c62e:	3301      	adds	r3, #1
    c630:	62fb      	str	r3, [r7, #44]	; 0x2c
    c632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c636:	429a      	cmp	r2, r3
    c638:	d3e3      	bcc.n	c602 <mp_unpack_ex+0x172>
        }
        mp_obj_list_set_len(MP_OBJ_FROM_PTR(rest), rest->len - num_right);
    c63a:	69bb      	ldr	r3, [r7, #24]
    c63c:	689a      	ldr	r2, [r3, #8]
    c63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c640:	1ad3      	subs	r3, r2, r3
    c642:	4619      	mov	r1, r3
    c644:	69b8      	ldr	r0, [r7, #24]
    c646:	f005 f967 	bl	11918 <mp_obj_list_set_len>
    }
    return;
    c64a:	e008      	b.n	c65e <mp_unpack_ex+0x1ce>
    c64c:	e007      	b.n	c65e <mp_unpack_ex+0x1ce>
            goto too_short;
    c64e:	bf00      	nop
    c650:	e002      	b.n	c658 <mp_unpack_ex+0x1c8>
                goto too_short;
    c652:	bf00      	nop
    c654:	e000      	b.n	c658 <mp_unpack_ex+0x1c8>
            goto too_short;
    c656:	bf00      	nop

too_short:
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_ValueError("wrong number of values to unpack");
    c658:	4804      	ldr	r0, [pc, #16]	; (c66c <mp_unpack_ex+0x1dc>)
    c65a:	f000 fcb7 	bl	cfcc <mp_raise_ValueError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
            "need more than %d values to unpack", (int)seq_len));
    }
}
    c65e:	373c      	adds	r7, #60	; 0x3c
    c660:	46bd      	mov	sp, r7
    c662:	bd90      	pop	{r4, r7, pc}
    c664:	00021e68 	.word	0x00021e68
    c668:	000211fc 	.word	0x000211fc
    c66c:	0001f73c 	.word	0x0001f73c

0000c670 <mp_load_attr>:

mp_obj_t mp_load_attr(mp_obj_t base, qstr attr) {
    c670:	b580      	push	{r7, lr}
    c672:	b084      	sub	sp, #16
    c674:	af00      	add	r7, sp, #0
    c676:	6078      	str	r0, [r7, #4]
    c678:	6039      	str	r1, [r7, #0]
    DEBUG_OP_printf("load attr %p.%s\n", base, qstr_str(attr));
    // use load_method
    mp_obj_t dest[2];
    mp_load_method(base, attr, dest);
    c67a:	f107 0308 	add.w	r3, r7, #8
    c67e:	461a      	mov	r2, r3
    c680:	6839      	ldr	r1, [r7, #0]
    c682:	6878      	ldr	r0, [r7, #4]
    c684:	f000 f8e4 	bl	c850 <mp_load_method>
    if (dest[1] == MP_OBJ_NULL) {
    c688:	68fb      	ldr	r3, [r7, #12]
    c68a:	2b00      	cmp	r3, #0
    c68c:	d101      	bne.n	c692 <mp_load_attr+0x22>
        // load_method returned just a normal attribute
        return dest[0];
    c68e:	68bb      	ldr	r3, [r7, #8]
    c690:	e006      	b.n	c6a0 <mp_load_attr+0x30>
    } else {
        // load_method returned a method, so build a bound method object
        return mp_obj_new_bound_meth(dest[0], dest[1]);
    c692:	68bb      	ldr	r3, [r7, #8]
    c694:	68fa      	ldr	r2, [r7, #12]
    c696:	4611      	mov	r1, r2
    c698:	4618      	mov	r0, r3
    c69a:	f001 fde7 	bl	e26c <mp_obj_new_bound_meth>
    c69e:	4603      	mov	r3, r0
    }
}
    c6a0:	4618      	mov	r0, r3
    c6a2:	3710      	adds	r7, #16
    c6a4:	46bd      	mov	sp, r7
    c6a6:	bd80      	pop	{r7, pc}

0000c6a8 <mp_convert_member_lookup>:

// Given a member that was extracted from an instance, convert it correctly
// and put the result in the dest[] array for a possible method call.
// Conversion means dealing with static/class methods, callables, and values.
// see http://docs.python.org/3/howto/descriptor.html
void mp_convert_member_lookup(mp_obj_t self, const mp_obj_type_t *type, mp_obj_t member, mp_obj_t *dest) {
    c6a8:	b580      	push	{r7, lr}
    c6aa:	b084      	sub	sp, #16
    c6ac:	af00      	add	r7, sp, #0
    c6ae:	60f8      	str	r0, [r7, #12]
    c6b0:	60b9      	str	r1, [r7, #8]
    c6b2:	607a      	str	r2, [r7, #4]
    c6b4:	603b      	str	r3, [r7, #0]
    if (MP_OBJ_IS_TYPE(member, &mp_type_staticmethod)) {
    c6b6:	6878      	ldr	r0, [r7, #4]
    c6b8:	f7fe fec0 	bl	b43c <MP_OBJ_IS_OBJ>
    c6bc:	4603      	mov	r3, r0
    c6be:	2b00      	cmp	r3, #0
    c6c0:	d009      	beq.n	c6d6 <mp_convert_member_lookup+0x2e>
    c6c2:	687b      	ldr	r3, [r7, #4]
    c6c4:	681b      	ldr	r3, [r3, #0]
    c6c6:	4a2e      	ldr	r2, [pc, #184]	; (c780 <mp_convert_member_lookup+0xd8>)
    c6c8:	4293      	cmp	r3, r2
    c6ca:	d104      	bne.n	c6d6 <mp_convert_member_lookup+0x2e>
        // return just the function
        dest[0] = ((mp_obj_static_class_method_t*)MP_OBJ_TO_PTR(member))->fun;
    c6cc:	687b      	ldr	r3, [r7, #4]
    c6ce:	685a      	ldr	r2, [r3, #4]
    c6d0:	683b      	ldr	r3, [r7, #0]
    c6d2:	601a      	str	r2, [r3, #0]
    c6d4:	e04f      	b.n	c776 <mp_convert_member_lookup+0xce>
    } else if (MP_OBJ_IS_TYPE(member, &mp_type_classmethod)) {
    c6d6:	6878      	ldr	r0, [r7, #4]
    c6d8:	f7fe feb0 	bl	b43c <MP_OBJ_IS_OBJ>
    c6dc:	4603      	mov	r3, r0
    c6de:	2b00      	cmp	r3, #0
    c6e0:	d014      	beq.n	c70c <mp_convert_member_lookup+0x64>
    c6e2:	687b      	ldr	r3, [r7, #4]
    c6e4:	681b      	ldr	r3, [r3, #0]
    c6e6:	4a27      	ldr	r2, [pc, #156]	; (c784 <mp_convert_member_lookup+0xdc>)
    c6e8:	4293      	cmp	r3, r2
    c6ea:	d10f      	bne.n	c70c <mp_convert_member_lookup+0x64>
        // return a bound method, with self being the type of this object
        // this type should be the type of the original instance, not the base
        // type (which is what is passed in the 'type' argument to this function)
        if (self != MP_OBJ_NULL) {
    c6ec:	68fb      	ldr	r3, [r7, #12]
    c6ee:	2b00      	cmp	r3, #0
    c6f0:	d003      	beq.n	c6fa <mp_convert_member_lookup+0x52>
            type = mp_obj_get_type(self);
    c6f2:	68f8      	ldr	r0, [r7, #12]
    c6f4:	f001 f88e 	bl	d814 <mp_obj_get_type>
    c6f8:	60b8      	str	r0, [r7, #8]
        }
        dest[0] = ((mp_obj_static_class_method_t*)MP_OBJ_TO_PTR(member))->fun;
    c6fa:	687b      	ldr	r3, [r7, #4]
    c6fc:	685a      	ldr	r2, [r3, #4]
    c6fe:	683b      	ldr	r3, [r7, #0]
    c700:	601a      	str	r2, [r3, #0]
        dest[1] = MP_OBJ_FROM_PTR(type);
    c702:	683b      	ldr	r3, [r7, #0]
    c704:	3304      	adds	r3, #4
    c706:	68ba      	ldr	r2, [r7, #8]
    c708:	601a      	str	r2, [r3, #0]
    c70a:	e034      	b.n	c776 <mp_convert_member_lookup+0xce>
    } else if (MP_OBJ_IS_TYPE(member, &mp_type_type)) {
    c70c:	6878      	ldr	r0, [r7, #4]
    c70e:	f7fe fe95 	bl	b43c <MP_OBJ_IS_OBJ>
    c712:	4603      	mov	r3, r0
    c714:	2b00      	cmp	r3, #0
    c716:	d008      	beq.n	c72a <mp_convert_member_lookup+0x82>
    c718:	687b      	ldr	r3, [r7, #4]
    c71a:	681b      	ldr	r3, [r3, #0]
    c71c:	4a1a      	ldr	r2, [pc, #104]	; (c788 <mp_convert_member_lookup+0xe0>)
    c71e:	4293      	cmp	r3, r2
    c720:	d103      	bne.n	c72a <mp_convert_member_lookup+0x82>
        // Don't try to bind types (even though they're callable)
        dest[0] = member;
    c722:	683b      	ldr	r3, [r7, #0]
    c724:	687a      	ldr	r2, [r7, #4]
    c726:	601a      	str	r2, [r3, #0]
    c728:	e025      	b.n	c776 <mp_convert_member_lookup+0xce>
    } else if (MP_OBJ_IS_FUN(member)
    c72a:	6878      	ldr	r0, [r7, #4]
    c72c:	f7fe fe86 	bl	b43c <MP_OBJ_IS_OBJ>
    c730:	4603      	mov	r3, r0
    c732:	2b00      	cmp	r3, #0
    c734:	d004      	beq.n	c740 <mp_convert_member_lookup+0x98>
    c736:	687b      	ldr	r3, [r7, #4]
    c738:	681b      	ldr	r3, [r3, #0]
    c73a:	685b      	ldr	r3, [r3, #4]
    c73c:	2b74      	cmp	r3, #116	; 0x74
    c73e:	d00f      	beq.n	c760 <mp_convert_member_lookup+0xb8>
        || (MP_OBJ_IS_OBJ(member)
    c740:	6878      	ldr	r0, [r7, #4]
    c742:	f7fe fe7b 	bl	b43c <MP_OBJ_IS_OBJ>
    c746:	4603      	mov	r3, r0
    c748:	2b00      	cmp	r3, #0
    c74a:	d011      	beq.n	c770 <mp_convert_member_lookup+0xc8>
            && (((mp_obj_base_t*)MP_OBJ_TO_PTR(member))->type->name == MP_QSTR_closure
    c74c:	687b      	ldr	r3, [r7, #4]
    c74e:	681b      	ldr	r3, [r3, #0]
    c750:	685b      	ldr	r3, [r3, #4]
    c752:	2b63      	cmp	r3, #99	; 0x63
    c754:	d004      	beq.n	c760 <mp_convert_member_lookup+0xb8>
                || ((mp_obj_base_t*)MP_OBJ_TO_PTR(member))->type->name == MP_QSTR_generator))) {
    c756:	687b      	ldr	r3, [r7, #4]
    c758:	681b      	ldr	r3, [r3, #0]
    c75a:	685b      	ldr	r3, [r3, #4]
    c75c:	2b75      	cmp	r3, #117	; 0x75
    c75e:	d107      	bne.n	c770 <mp_convert_member_lookup+0xc8>
            dest[0] = mp_obj_new_checked_fun(type, member);
        } else
        #endif
        {
            // return a bound method, with self being this object
            dest[0] = member;
    c760:	683b      	ldr	r3, [r7, #0]
    c762:	687a      	ldr	r2, [r7, #4]
    c764:	601a      	str	r2, [r3, #0]
            dest[1] = self;
    c766:	683b      	ldr	r3, [r7, #0]
    c768:	3304      	adds	r3, #4
    c76a:	68fa      	ldr	r2, [r7, #12]
    c76c:	601a      	str	r2, [r3, #0]
    c76e:	e002      	b.n	c776 <mp_convert_member_lookup+0xce>
        }
    } else {
        // class member is a value, so just return that value
        dest[0] = member;
    c770:	683b      	ldr	r3, [r7, #0]
    c772:	687a      	ldr	r2, [r7, #4]
    c774:	601a      	str	r2, [r3, #0]
    }
}
    c776:	bf00      	nop
    c778:	3710      	adds	r7, #16
    c77a:	46bd      	mov	sp, r7
    c77c:	bd80      	pop	{r7, pc}
    c77e:	bf00      	nop
    c780:	0002236c 	.word	0x0002236c
    c784:	000223a8 	.word	0x000223a8
    c788:	00022160 	.word	0x00022160

0000c78c <mp_load_method_maybe>:

// no attribute found, returns:     dest[0] == MP_OBJ_NULL, dest[1] == MP_OBJ_NULL
// normal attribute found, returns: dest[0] == <attribute>, dest[1] == MP_OBJ_NULL
// method attribute found, returns: dest[0] == <method>,    dest[1] == <self>
void mp_load_method_maybe(mp_obj_t obj, qstr attr, mp_obj_t *dest) {
    c78c:	b580      	push	{r7, lr}
    c78e:	b088      	sub	sp, #32
    c790:	af00      	add	r7, sp, #0
    c792:	60f8      	str	r0, [r7, #12]
    c794:	60b9      	str	r1, [r7, #8]
    c796:	607a      	str	r2, [r7, #4]
    // clear output to indicate no attribute/method found yet
    dest[0] = MP_OBJ_NULL;
    c798:	687b      	ldr	r3, [r7, #4]
    c79a:	2200      	movs	r2, #0
    c79c:	601a      	str	r2, [r3, #0]
    dest[1] = MP_OBJ_NULL;
    c79e:	687b      	ldr	r3, [r7, #4]
    c7a0:	3304      	adds	r3, #4
    c7a2:	2200      	movs	r2, #0
    c7a4:	601a      	str	r2, [r3, #0]

    // get the type
    mp_obj_type_t *type = mp_obj_get_type(obj);
    c7a6:	68f8      	ldr	r0, [r7, #12]
    c7a8:	f001 f834 	bl	d814 <mp_obj_get_type>
    c7ac:	61f8      	str	r0, [r7, #28]
    } else if (attr == MP_QSTR___class__) {
        // a.__class__ is equivalent to type(a)
        dest[0] = MP_OBJ_FROM_PTR(type);
#endif

    } else if (attr == MP_QSTR___next__ && type->iternext != NULL) {
    c7ae:	68bb      	ldr	r3, [r7, #8]
    c7b0:	2b1d      	cmp	r3, #29
    c7b2:	d10b      	bne.n	c7cc <mp_load_method_maybe+0x40>
    c7b4:	69fb      	ldr	r3, [r7, #28]
    c7b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c7b8:	2b00      	cmp	r3, #0
    c7ba:	d007      	beq.n	c7cc <mp_load_method_maybe+0x40>
        dest[0] = MP_OBJ_FROM_PTR(&mp_builtin_next_obj);
    c7bc:	687b      	ldr	r3, [r7, #4]
    c7be:	4a1f      	ldr	r2, [pc, #124]	; (c83c <mp_load_method_maybe+0xb0>)
    c7c0:	601a      	str	r2, [r3, #0]
        dest[1] = obj;
    c7c2:	687b      	ldr	r3, [r7, #4]
    c7c4:	3304      	adds	r3, #4
    c7c6:	68fa      	ldr	r2, [r7, #12]
    c7c8:	601a      	str	r2, [r3, #0]
        mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
        if (elem != NULL) {
            mp_convert_member_lookup(obj, type, elem->value, dest);
        }
    }
}
    c7ca:	e033      	b.n	c834 <mp_load_method_maybe+0xa8>
    } else if (type->attr != NULL) {
    c7cc:	69fb      	ldr	r3, [r7, #28]
    c7ce:	69db      	ldr	r3, [r3, #28]
    c7d0:	2b00      	cmp	r3, #0
    c7d2:	d006      	beq.n	c7e2 <mp_load_method_maybe+0x56>
        type->attr(obj, attr, dest);
    c7d4:	69fb      	ldr	r3, [r7, #28]
    c7d6:	69db      	ldr	r3, [r3, #28]
    c7d8:	687a      	ldr	r2, [r7, #4]
    c7da:	68b9      	ldr	r1, [r7, #8]
    c7dc:	68f8      	ldr	r0, [r7, #12]
    c7de:	4798      	blx	r3
}
    c7e0:	e028      	b.n	c834 <mp_load_method_maybe+0xa8>
    } else if (type->locals_dict != NULL) {
    c7e2:	69fb      	ldr	r3, [r7, #28]
    c7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c7e6:	2b00      	cmp	r3, #0
    c7e8:	d024      	beq.n	c834 <mp_load_method_maybe+0xa8>
        assert(type->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
    c7ea:	69fb      	ldr	r3, [r7, #28]
    c7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c7ee:	681b      	ldr	r3, [r3, #0]
    c7f0:	4a13      	ldr	r2, [pc, #76]	; (c840 <mp_load_method_maybe+0xb4>)
    c7f2:	4293      	cmp	r3, r2
    c7f4:	d006      	beq.n	c804 <mp_load_method_maybe+0x78>
    c7f6:	4b13      	ldr	r3, [pc, #76]	; (c844 <mp_load_method_maybe+0xb8>)
    c7f8:	4a13      	ldr	r2, [pc, #76]	; (c848 <mp_load_method_maybe+0xbc>)
    c7fa:	f44f 6184 	mov.w	r1, #1056	; 0x420
    c7fe:	4813      	ldr	r0, [pc, #76]	; (c84c <mp_load_method_maybe+0xc0>)
    c800:	f00e fdb4 	bl	1b36c <__assert_func>
        mp_map_t *locals_map = &type->locals_dict->map;
    c804:	69fb      	ldr	r3, [r7, #28]
    c806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    c808:	3304      	adds	r3, #4
    c80a:	61bb      	str	r3, [r7, #24]
        mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
    c80c:	68bb      	ldr	r3, [r7, #8]
    c80e:	009b      	lsls	r3, r3, #2
    c810:	f043 0302 	orr.w	r3, r3, #2
    c814:	2200      	movs	r2, #0
    c816:	4619      	mov	r1, r3
    c818:	69b8      	ldr	r0, [r7, #24]
    c81a:	f000 fe51 	bl	d4c0 <mp_map_lookup>
    c81e:	6178      	str	r0, [r7, #20]
        if (elem != NULL) {
    c820:	697b      	ldr	r3, [r7, #20]
    c822:	2b00      	cmp	r3, #0
    c824:	d006      	beq.n	c834 <mp_load_method_maybe+0xa8>
            mp_convert_member_lookup(obj, type, elem->value, dest);
    c826:	697b      	ldr	r3, [r7, #20]
    c828:	685a      	ldr	r2, [r3, #4]
    c82a:	687b      	ldr	r3, [r7, #4]
    c82c:	69f9      	ldr	r1, [r7, #28]
    c82e:	68f8      	ldr	r0, [r7, #12]
    c830:	f7ff ff3a 	bl	c6a8 <mp_convert_member_lookup>
}
    c834:	bf00      	nop
    c836:	3720      	adds	r7, #32
    c838:	46bd      	mov	sp, r7
    c83a:	bd80      	pop	{r7, pc}
    c83c:	000226fc 	.word	0x000226fc
    c840:	000200e8 	.word	0x000200e8
    c844:	0001f760 	.word	0x0001f760
    c848:	0001f8fc 	.word	0x0001f8fc
    c84c:	0001f674 	.word	0x0001f674

0000c850 <mp_load_method>:

void mp_load_method(mp_obj_t base, qstr attr, mp_obj_t *dest) {
    c850:	b580      	push	{r7, lr}
    c852:	b084      	sub	sp, #16
    c854:	af00      	add	r7, sp, #0
    c856:	60f8      	str	r0, [r7, #12]
    c858:	60b9      	str	r1, [r7, #8]
    c85a:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("load method %p.%s\n", base, qstr_str(attr));

    mp_load_method_maybe(base, attr, dest);
    c85c:	687a      	ldr	r2, [r7, #4]
    c85e:	68b9      	ldr	r1, [r7, #8]
    c860:	68f8      	ldr	r0, [r7, #12]
    c862:	f7ff ff93 	bl	c78c <mp_load_method_maybe>

    if (dest[0] == MP_OBJ_NULL) {
    c866:	687b      	ldr	r3, [r7, #4]
    c868:	681b      	ldr	r3, [r3, #0]
    c86a:	2b00      	cmp	r3, #0
    c86c:	d103      	bne.n	c876 <mp_load_method+0x26>
        // no attribute/method called attr
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_msg(&mp_type_AttributeError, "no such attribute");
    c86e:	4904      	ldr	r1, [pc, #16]	; (c880 <mp_load_method+0x30>)
    c870:	4804      	ldr	r0, [pc, #16]	; (c884 <mp_load_method+0x34>)
    c872:	f000 fb93 	bl	cf9c <mp_raise_msg>
                    "'%s' object has no attribute '%q'",
                    mp_obj_get_type_str(base), attr));
            }
        }
    }
}
    c876:	bf00      	nop
    c878:	3710      	adds	r7, #16
    c87a:	46bd      	mov	sp, r7
    c87c:	bd80      	pop	{r7, pc}
    c87e:	bf00      	nop
    c880:	0001f790 	.word	0x0001f790
    c884:	00020458 	.word	0x00020458

0000c888 <mp_load_method_protected>:

// Acts like mp_load_method_maybe but catches AttributeError, and all other exceptions if requested
void mp_load_method_protected(mp_obj_t obj, qstr attr, mp_obj_t *dest, bool catch_all_exc) {
    c888:	b580      	push	{r7, lr}
    c88a:	b090      	sub	sp, #64	; 0x40
    c88c:	af00      	add	r7, sp, #0
    c88e:	60f8      	str	r0, [r7, #12]
    c890:	60b9      	str	r1, [r7, #8]
    c892:	607a      	str	r2, [r7, #4]
    c894:	70fb      	strb	r3, [r7, #3]
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
    c896:	f107 0310 	add.w	r3, r7, #16
    c89a:	4618      	mov	r0, r3
    c89c:	f7f3 fd0e 	bl	2bc <nlr_push>
    c8a0:	4603      	mov	r3, r0
    c8a2:	2b00      	cmp	r3, #0
    c8a4:	d107      	bne.n	c8b6 <mp_load_method_protected+0x2e>
        mp_load_method_maybe(obj, attr, dest);
    c8a6:	687a      	ldr	r2, [r7, #4]
    c8a8:	68b9      	ldr	r1, [r7, #8]
    c8aa:	68f8      	ldr	r0, [r7, #12]
    c8ac:	f7ff ff6e 	bl	c78c <mp_load_method_maybe>
        nlr_pop();
    c8b0:	f7f3 fcf2 	bl	298 <nlr_pop>
                MP_OBJ_FROM_PTR(&mp_type_AttributeError))) {
            // Re-raise the exception
            nlr_raise(MP_OBJ_FROM_PTR(nlr.ret_val));
        }
    }
}
    c8b4:	e015      	b.n	c8e2 <mp_load_method_protected+0x5a>
        if (!catch_all_exc
    c8b6:	78fb      	ldrb	r3, [r7, #3]
    c8b8:	f083 0301 	eor.w	r3, r3, #1
    c8bc:	b2db      	uxtb	r3, r3
    c8be:	2b00      	cmp	r3, #0
    c8c0:	d00f      	beq.n	c8e2 <mp_load_method_protected+0x5a>
            && !mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type),
    c8c2:	697b      	ldr	r3, [r7, #20]
    c8c4:	681b      	ldr	r3, [r3, #0]
    c8c6:	4909      	ldr	r1, [pc, #36]	; (c8ec <mp_load_method_protected+0x64>)
    c8c8:	4618      	mov	r0, r3
    c8ca:	f00a fd0b 	bl	172e4 <mp_obj_is_subclass_fast>
    c8ce:	4603      	mov	r3, r0
    c8d0:	f083 0301 	eor.w	r3, r3, #1
    c8d4:	b2db      	uxtb	r3, r3
    c8d6:	2b00      	cmp	r3, #0
    c8d8:	d003      	beq.n	c8e2 <mp_load_method_protected+0x5a>
            nlr_raise(MP_OBJ_FROM_PTR(nlr.ret_val));
    c8da:	697b      	ldr	r3, [r7, #20]
    c8dc:	4618      	mov	r0, r3
    c8de:	f7f3 fcff 	bl	2e0 <nlr_jump>
}
    c8e2:	bf00      	nop
    c8e4:	3740      	adds	r7, #64	; 0x40
    c8e6:	46bd      	mov	sp, r7
    c8e8:	bd80      	pop	{r7, pc}
    c8ea:	bf00      	nop
    c8ec:	00020458 	.word	0x00020458

0000c8f0 <mp_store_attr>:

void mp_store_attr(mp_obj_t base, qstr attr, mp_obj_t value) {
    c8f0:	b580      	push	{r7, lr}
    c8f2:	b088      	sub	sp, #32
    c8f4:	af00      	add	r7, sp, #0
    c8f6:	60f8      	str	r0, [r7, #12]
    c8f8:	60b9      	str	r1, [r7, #8]
    c8fa:	607a      	str	r2, [r7, #4]
    DEBUG_OP_printf("store attr %p.%s <- %p\n", base, qstr_str(attr), value);
    mp_obj_type_t *type = mp_obj_get_type(base);
    c8fc:	68f8      	ldr	r0, [r7, #12]
    c8fe:	f000 ff89 	bl	d814 <mp_obj_get_type>
    c902:	61f8      	str	r0, [r7, #28]
    if (type->attr != NULL) {
    c904:	69fb      	ldr	r3, [r7, #28]
    c906:	69db      	ldr	r3, [r3, #28]
    c908:	2b00      	cmp	r3, #0
    c90a:	d00d      	beq.n	c928 <mp_store_attr+0x38>
        mp_obj_t dest[2] = {MP_OBJ_SENTINEL, value};
    c90c:	2308      	movs	r3, #8
    c90e:	617b      	str	r3, [r7, #20]
    c910:	687b      	ldr	r3, [r7, #4]
    c912:	61bb      	str	r3, [r7, #24]
        type->attr(base, attr, dest);
    c914:	69fb      	ldr	r3, [r7, #28]
    c916:	69db      	ldr	r3, [r3, #28]
    c918:	f107 0214 	add.w	r2, r7, #20
    c91c:	68b9      	ldr	r1, [r7, #8]
    c91e:	68f8      	ldr	r0, [r7, #12]
    c920:	4798      	blx	r3
        if (dest[0] == MP_OBJ_NULL) {
    c922:	697b      	ldr	r3, [r7, #20]
    c924:	2b00      	cmp	r3, #0
    c926:	d003      	beq.n	c930 <mp_store_attr+0x40>
            // success
            return;
        }
    }
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_msg(&mp_type_AttributeError, "no such attribute");
    c928:	4903      	ldr	r1, [pc, #12]	; (c938 <mp_store_attr+0x48>)
    c92a:	4804      	ldr	r0, [pc, #16]	; (c93c <mp_store_attr+0x4c>)
    c92c:	f000 fb36 	bl	cf9c <mp_raise_msg>
            return;
    c930:	bf00      	nop
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_AttributeError,
            "'%s' object has no attribute '%q'",
            mp_obj_get_type_str(base), attr));
    }
}
    c932:	3720      	adds	r7, #32
    c934:	46bd      	mov	sp, r7
    c936:	bd80      	pop	{r7, pc}
    c938:	0001f790 	.word	0x0001f790
    c93c:	00020458 	.word	0x00020458

0000c940 <mp_getiter>:

mp_obj_t mp_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
    c940:	b580      	push	{r7, lr}
    c942:	b086      	sub	sp, #24
    c944:	af00      	add	r7, sp, #0
    c946:	6078      	str	r0, [r7, #4]
    c948:	6039      	str	r1, [r7, #0]
    assert(o_in);
    c94a:	687b      	ldr	r3, [r7, #4]
    c94c:	2b00      	cmp	r3, #0
    c94e:	d106      	bne.n	c95e <mp_getiter+0x1e>
    c950:	4b20      	ldr	r3, [pc, #128]	; (c9d4 <mp_getiter+0x94>)
    c952:	4a21      	ldr	r2, [pc, #132]	; (c9d8 <mp_getiter+0x98>)
    c954:	f240 4166 	movw	r1, #1126	; 0x466
    c958:	4820      	ldr	r0, [pc, #128]	; (c9dc <mp_getiter+0x9c>)
    c95a:	f00e fd07 	bl	1b36c <__assert_func>
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    c95e:	6878      	ldr	r0, [r7, #4]
    c960:	f000 ff58 	bl	d814 <mp_obj_get_type>
    c964:	6178      	str	r0, [r7, #20]

    // Check for native getiter which is the identity.  We handle this case explicitly
    // so we don't unnecessarily allocate any RAM for the iter_buf, which won't be used.
    if (type->getiter == mp_identity_getiter) {
    c966:	697b      	ldr	r3, [r7, #20]
    c968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c96a:	4a1d      	ldr	r2, [pc, #116]	; (c9e0 <mp_getiter+0xa0>)
    c96c:	4293      	cmp	r3, r2
    c96e:	d101      	bne.n	c974 <mp_getiter+0x34>
        return o_in;
    c970:	687b      	ldr	r3, [r7, #4]
    c972:	e02a      	b.n	c9ca <mp_getiter+0x8a>
    }

    // if caller did not provide a buffer then allocate one on the heap
    if (iter_buf == NULL) {
    c974:	683b      	ldr	r3, [r7, #0]
    c976:	2b00      	cmp	r3, #0
    c978:	d103      	bne.n	c982 <mp_getiter+0x42>
        iter_buf = m_new_obj(mp_obj_iter_buf_t);
    c97a:	2010      	movs	r0, #16
    c97c:	f7f3 fcce 	bl	31c <m_malloc>
    c980:	6038      	str	r0, [r7, #0]
    }

    // check for native getiter (corresponds to __iter__)
    if (type->getiter != NULL) {
    c982:	697b      	ldr	r3, [r7, #20]
    c984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c986:	2b00      	cmp	r3, #0
    c988:	d00a      	beq.n	c9a0 <mp_getiter+0x60>
        mp_obj_t iter = type->getiter(o_in, iter_buf);
    c98a:	697b      	ldr	r3, [r7, #20]
    c98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c98e:	6839      	ldr	r1, [r7, #0]
    c990:	6878      	ldr	r0, [r7, #4]
    c992:	4798      	blx	r3
    c994:	6138      	str	r0, [r7, #16]
        if (iter != MP_OBJ_NULL) {
    c996:	693b      	ldr	r3, [r7, #16]
    c998:	2b00      	cmp	r3, #0
    c99a:	d001      	beq.n	c9a0 <mp_getiter+0x60>
            return iter;
    c99c:	693b      	ldr	r3, [r7, #16]
    c99e:	e014      	b.n	c9ca <mp_getiter+0x8a>
        }
    }

    // check for __getitem__
    mp_obj_t dest[2];
    mp_load_method_maybe(o_in, MP_QSTR___getitem__, dest);
    c9a0:	f107 0308 	add.w	r3, r7, #8
    c9a4:	461a      	mov	r2, r3
    c9a6:	210e      	movs	r1, #14
    c9a8:	6878      	ldr	r0, [r7, #4]
    c9aa:	f7ff feef 	bl	c78c <mp_load_method_maybe>
    if (dest[0] != MP_OBJ_NULL) {
    c9ae:	68bb      	ldr	r3, [r7, #8]
    c9b0:	2b00      	cmp	r3, #0
    c9b2:	d007      	beq.n	c9c4 <mp_getiter+0x84>
        // __getitem__ exists, create and return an iterator
        return mp_obj_new_getitem_iter(dest, iter_buf);
    c9b4:	f107 0308 	add.w	r3, r7, #8
    c9b8:	6839      	ldr	r1, [r7, #0]
    c9ba:	4618      	mov	r0, r3
    c9bc:	f003 fd3e 	bl	1043c <mp_obj_new_getitem_iter>
    c9c0:	4603      	mov	r3, r0
    c9c2:	e002      	b.n	c9ca <mp_getiter+0x8a>
    }

    // object not iterable
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("object not iterable");
    c9c4:	4807      	ldr	r0, [pc, #28]	; (c9e4 <mp_getiter+0xa4>)
    c9c6:	f000 fb0b 	bl	cfe0 <mp_raise_TypeError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "'%s' object is not iterable", mp_obj_get_type_str(o_in)));
    }
}
    c9ca:	4618      	mov	r0, r3
    c9cc:	3718      	adds	r7, #24
    c9ce:	46bd      	mov	sp, r7
    c9d0:	bd80      	pop	{r7, pc}
    c9d2:	bf00      	nop
    c9d4:	0001f7a4 	.word	0x0001f7a4
    c9d8:	0001f914 	.word	0x0001f914
    c9dc:	0001f674 	.word	0x0001f674
    c9e0:	0000dfdd 	.word	0x0000dfdd
    c9e4:	0001f7ac 	.word	0x0001f7ac

0000c9e8 <mp_iternext_allow_raise>:

// may return MP_OBJ_STOP_ITERATION as an optimisation instead of raise StopIteration()
// may also raise StopIteration()
mp_obj_t mp_iternext_allow_raise(mp_obj_t o_in) {
    c9e8:	b580      	push	{r7, lr}
    c9ea:	b086      	sub	sp, #24
    c9ec:	af00      	add	r7, sp, #0
    c9ee:	6078      	str	r0, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    c9f0:	6878      	ldr	r0, [r7, #4]
    c9f2:	f000 ff0f 	bl	d814 <mp_obj_get_type>
    c9f6:	6178      	str	r0, [r7, #20]
    if (type->iternext != NULL) {
    c9f8:	697b      	ldr	r3, [r7, #20]
    c9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c9fc:	2b00      	cmp	r3, #0
    c9fe:	d005      	beq.n	ca0c <mp_iternext_allow_raise+0x24>
        return type->iternext(o_in);
    ca00:	697b      	ldr	r3, [r7, #20]
    ca02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ca04:	6878      	ldr	r0, [r7, #4]
    ca06:	4798      	blx	r3
    ca08:	4603      	mov	r3, r0
    ca0a:	e015      	b.n	ca38 <mp_iternext_allow_raise+0x50>
    } else {
        // check for __next__ method
        mp_obj_t dest[2];
        mp_load_method_maybe(o_in, MP_QSTR___next__, dest);
    ca0c:	f107 030c 	add.w	r3, r7, #12
    ca10:	461a      	mov	r2, r3
    ca12:	211d      	movs	r1, #29
    ca14:	6878      	ldr	r0, [r7, #4]
    ca16:	f7ff feb9 	bl	c78c <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    ca1a:	68fb      	ldr	r3, [r7, #12]
    ca1c:	2b00      	cmp	r3, #0
    ca1e:	d008      	beq.n	ca32 <mp_iternext_allow_raise+0x4a>
            // __next__ exists, call it and return its result
            return mp_call_method_n_kw(0, 0, dest);
    ca20:	f107 030c 	add.w	r3, r7, #12
    ca24:	461a      	mov	r2, r3
    ca26:	2100      	movs	r1, #0
    ca28:	2000      	movs	r0, #0
    ca2a:	f7ff fa37 	bl	be9c <mp_call_method_n_kw>
    ca2e:	4603      	mov	r3, r0
    ca30:	e002      	b.n	ca38 <mp_iternext_allow_raise+0x50>
        } else {
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("object not an iterator");
    ca32:	4803      	ldr	r0, [pc, #12]	; (ca40 <mp_iternext_allow_raise+0x58>)
    ca34:	f000 fad4 	bl	cfe0 <mp_raise_TypeError>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "'%s' object is not an iterator", mp_obj_get_type_str(o_in)));
            }
        }
    }
}
    ca38:	4618      	mov	r0, r3
    ca3a:	3718      	adds	r7, #24
    ca3c:	46bd      	mov	sp, r7
    ca3e:	bd80      	pop	{r7, pc}
    ca40:	0001f7c0 	.word	0x0001f7c0

0000ca44 <mp_iternext>:

// will always return MP_OBJ_STOP_ITERATION instead of raising StopIteration() (or any subclass thereof)
// may raise other exceptions
mp_obj_t mp_iternext(mp_obj_t o_in) {
    ca44:	b580      	push	{r7, lr}
    ca46:	b092      	sub	sp, #72	; 0x48
    ca48:	af00      	add	r7, sp, #0
    ca4a:	6078      	str	r0, [r7, #4]
    MP_STACK_CHECK(); // enumerate, filter, map and zip can recursively call mp_iternext
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    ca4c:	6878      	ldr	r0, [r7, #4]
    ca4e:	f000 fee1 	bl	d814 <mp_obj_get_type>
    ca52:	6478      	str	r0, [r7, #68]	; 0x44
    if (type->iternext != NULL) {
    ca54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ca56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ca58:	2b00      	cmp	r3, #0
    ca5a:	d005      	beq.n	ca68 <mp_iternext+0x24>
        return type->iternext(o_in);
    ca5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ca5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ca60:	6878      	ldr	r0, [r7, #4]
    ca62:	4798      	blx	r3
    ca64:	4603      	mov	r3, r0
    ca66:	e02f      	b.n	cac8 <mp_iternext+0x84>
    } else {
        // check for __next__ method
        mp_obj_t dest[2];
        mp_load_method_maybe(o_in, MP_QSTR___next__, dest);
    ca68:	f107 0338 	add.w	r3, r7, #56	; 0x38
    ca6c:	461a      	mov	r2, r3
    ca6e:	211d      	movs	r1, #29
    ca70:	6878      	ldr	r0, [r7, #4]
    ca72:	f7ff fe8b 	bl	c78c <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    ca76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ca78:	2b00      	cmp	r3, #0
    ca7a:	d022      	beq.n	cac2 <mp_iternext+0x7e>
            // __next__ exists, call it and return its result
            nlr_buf_t nlr;
            if (nlr_push(&nlr) == 0) {
    ca7c:	f107 0308 	add.w	r3, r7, #8
    ca80:	4618      	mov	r0, r3
    ca82:	f7f3 fc1b 	bl	2bc <nlr_push>
    ca86:	4603      	mov	r3, r0
    ca88:	2b00      	cmp	r3, #0
    ca8a:	d10b      	bne.n	caa4 <mp_iternext+0x60>
                mp_obj_t ret = mp_call_method_n_kw(0, 0, dest);
    ca8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
    ca90:	461a      	mov	r2, r3
    ca92:	2100      	movs	r1, #0
    ca94:	2000      	movs	r0, #0
    ca96:	f7ff fa01 	bl	be9c <mp_call_method_n_kw>
    ca9a:	6438      	str	r0, [r7, #64]	; 0x40
                nlr_pop();
    ca9c:	f7f3 fbfc 	bl	298 <nlr_pop>
                return ret;
    caa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    caa2:	e011      	b.n	cac8 <mp_iternext+0x84>
            } else {
                if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
    caa4:	68fb      	ldr	r3, [r7, #12]
    caa6:	681b      	ldr	r3, [r3, #0]
    caa8:	4909      	ldr	r1, [pc, #36]	; (cad0 <mp_iternext+0x8c>)
    caaa:	4618      	mov	r0, r3
    caac:	f00a fc1a 	bl	172e4 <mp_obj_is_subclass_fast>
    cab0:	4603      	mov	r3, r0
    cab2:	2b00      	cmp	r3, #0
    cab4:	d001      	beq.n	caba <mp_iternext+0x76>
                    return MP_OBJ_STOP_ITERATION;
    cab6:	2304      	movs	r3, #4
    cab8:	e006      	b.n	cac8 <mp_iternext+0x84>
                } else {
                    nlr_jump(nlr.ret_val);
    caba:	68fb      	ldr	r3, [r7, #12]
    cabc:	4618      	mov	r0, r3
    cabe:	f7f3 fc0f 	bl	2e0 <nlr_jump>
                }
            }
        } else {
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("object not an iterator");
    cac2:	4804      	ldr	r0, [pc, #16]	; (cad4 <mp_iternext+0x90>)
    cac4:	f000 fa8c 	bl	cfe0 <mp_raise_TypeError>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "'%s' object is not an iterator", mp_obj_get_type_str(o_in)));
            }
        }
    }
}
    cac8:	4618      	mov	r0, r3
    caca:	3748      	adds	r7, #72	; 0x48
    cacc:	46bd      	mov	sp, r7
    cace:	bd80      	pop	{r7, pc}
    cad0:	0002032c 	.word	0x0002032c
    cad4:	0001f7c0 	.word	0x0001f7c0

0000cad8 <mp_resume>:

// TODO: Unclear what to do with StopIterarion exception here.
mp_vm_return_kind_t mp_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val) {
    cad8:	b580      	push	{r7, lr}
    cada:	b096      	sub	sp, #88	; 0x58
    cadc:	af00      	add	r7, sp, #0
    cade:	60f8      	str	r0, [r7, #12]
    cae0:	60b9      	str	r1, [r7, #8]
    cae2:	607a      	str	r2, [r7, #4]
    cae4:	603b      	str	r3, [r7, #0]
    assert((send_value != MP_OBJ_NULL) ^ (throw_value != MP_OBJ_NULL));
    cae6:	68bb      	ldr	r3, [r7, #8]
    cae8:	2b00      	cmp	r3, #0
    caea:	bf14      	ite	ne
    caec:	2301      	movne	r3, #1
    caee:	2300      	moveq	r3, #0
    caf0:	b2da      	uxtb	r2, r3
    caf2:	687b      	ldr	r3, [r7, #4]
    caf4:	2b00      	cmp	r3, #0
    caf6:	bf14      	ite	ne
    caf8:	2301      	movne	r3, #1
    cafa:	2300      	moveq	r3, #0
    cafc:	b2db      	uxtb	r3, r3
    cafe:	4053      	eors	r3, r2
    cb00:	b2db      	uxtb	r3, r3
    cb02:	2b00      	cmp	r3, #0
    cb04:	d106      	bne.n	cb14 <mp_resume+0x3c>
    cb06:	4b5e      	ldr	r3, [pc, #376]	; (cc80 <mp_resume+0x1a8>)
    cb08:	4a5e      	ldr	r2, [pc, #376]	; (cc84 <mp_resume+0x1ac>)
    cb0a:	f240 41cb 	movw	r1, #1227	; 0x4cb
    cb0e:	485e      	ldr	r0, [pc, #376]	; (cc88 <mp_resume+0x1b0>)
    cb10:	f00e fc2c 	bl	1b36c <__assert_func>
    mp_obj_type_t *type = mp_obj_get_type(self_in);
    cb14:	68f8      	ldr	r0, [r7, #12]
    cb16:	f000 fe7d 	bl	d814 <mp_obj_get_type>
    cb1a:	6578      	str	r0, [r7, #84]	; 0x54

    if (type == &mp_type_gen_instance) {
    cb1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    cb1e:	4a5b      	ldr	r2, [pc, #364]	; (cc8c <mp_resume+0x1b4>)
    cb20:	4293      	cmp	r3, r2
    cb22:	d107      	bne.n	cb34 <mp_resume+0x5c>
        return mp_obj_gen_resume(self_in, send_value, throw_value, ret_val);
    cb24:	683b      	ldr	r3, [r7, #0]
    cb26:	687a      	ldr	r2, [r7, #4]
    cb28:	68b9      	ldr	r1, [r7, #8]
    cb2a:	68f8      	ldr	r0, [r7, #12]
    cb2c:	f003 fa96 	bl	1005c <mp_obj_gen_resume>
    cb30:	4603      	mov	r3, r0
    cb32:	e0a1      	b.n	cc78 <mp_resume+0x1a0>
    }

    if (type->iternext != NULL && send_value == mp_const_none) {
    cb34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    cb36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cb38:	2b00      	cmp	r3, #0
    cb3a:	d012      	beq.n	cb62 <mp_resume+0x8a>
    cb3c:	68bb      	ldr	r3, [r7, #8]
    cb3e:	4a54      	ldr	r2, [pc, #336]	; (cc90 <mp_resume+0x1b8>)
    cb40:	4293      	cmp	r3, r2
    cb42:	d10e      	bne.n	cb62 <mp_resume+0x8a>
        mp_obj_t ret = type->iternext(self_in);
    cb44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    cb46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cb48:	68f8      	ldr	r0, [r7, #12]
    cb4a:	4798      	blx	r3
    cb4c:	6538      	str	r0, [r7, #80]	; 0x50
        *ret_val = ret;
    cb4e:	683b      	ldr	r3, [r7, #0]
    cb50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    cb52:	601a      	str	r2, [r3, #0]
        if (ret != MP_OBJ_STOP_ITERATION) {
    cb54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    cb56:	2b04      	cmp	r3, #4
    cb58:	d001      	beq.n	cb5e <mp_resume+0x86>
            return MP_VM_RETURN_YIELD;
    cb5a:	2301      	movs	r3, #1
    cb5c:	e08c      	b.n	cc78 <mp_resume+0x1a0>
        } else {
            // Emulate raise StopIteration()
            // Special case, handled in vm.c
            return MP_VM_RETURN_NORMAL;
    cb5e:	2300      	movs	r3, #0
    cb60:	e08a      	b.n	cc78 <mp_resume+0x1a0>
    }

    mp_obj_t dest[3]; // Reserve slot for send() arg

    // Python instance iterator protocol
    if (send_value == mp_const_none) {
    cb62:	68bb      	ldr	r3, [r7, #8]
    cb64:	4a4a      	ldr	r2, [pc, #296]	; (cc90 <mp_resume+0x1b8>)
    cb66:	4293      	cmp	r3, r2
    cb68:	d124      	bne.n	cbb4 <mp_resume+0xdc>
        mp_load_method_maybe(self_in, MP_QSTR___next__, dest);
    cb6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cb6e:	461a      	mov	r2, r3
    cb70:	211d      	movs	r1, #29
    cb72:	68f8      	ldr	r0, [r7, #12]
    cb74:	f7ff fe0a 	bl	c78c <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
    cb78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cb7a:	2b00      	cmp	r3, #0
    cb7c:	d01a      	beq.n	cbb4 <mp_resume+0xdc>
            nlr_buf_t nlr;
            if (nlr_push(&nlr) == 0) {
    cb7e:	f107 0314 	add.w	r3, r7, #20
    cb82:	4618      	mov	r0, r3
    cb84:	f7f3 fb9a 	bl	2bc <nlr_push>
    cb88:	4603      	mov	r3, r0
    cb8a:	2b00      	cmp	r3, #0
    cb8c:	d10d      	bne.n	cbaa <mp_resume+0xd2>
                *ret_val = mp_call_method_n_kw(0, 0, dest);
    cb8e:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cb92:	461a      	mov	r2, r3
    cb94:	2100      	movs	r1, #0
    cb96:	2000      	movs	r0, #0
    cb98:	f7ff f980 	bl	be9c <mp_call_method_n_kw>
    cb9c:	4602      	mov	r2, r0
    cb9e:	683b      	ldr	r3, [r7, #0]
    cba0:	601a      	str	r2, [r3, #0]
                nlr_pop();
    cba2:	f7f3 fb79 	bl	298 <nlr_pop>
                return MP_VM_RETURN_YIELD;
    cba6:	2301      	movs	r3, #1
    cba8:	e066      	b.n	cc78 <mp_resume+0x1a0>
            } else {
                *ret_val = MP_OBJ_FROM_PTR(nlr.ret_val);
    cbaa:	69ba      	ldr	r2, [r7, #24]
    cbac:	683b      	ldr	r3, [r7, #0]
    cbae:	601a      	str	r2, [r3, #0]
                return MP_VM_RETURN_EXCEPTION;
    cbb0:	2302      	movs	r3, #2
    cbb2:	e061      	b.n	cc78 <mp_resume+0x1a0>
        }
    }

    // Either python instance generator protocol, or native object
    // generator protocol.
    if (send_value != MP_OBJ_NULL) {
    cbb4:	68bb      	ldr	r3, [r7, #8]
    cbb6:	2b00      	cmp	r3, #0
    cbb8:	d014      	beq.n	cbe4 <mp_resume+0x10c>
        mp_load_method(self_in, MP_QSTR_send, dest);
    cbba:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cbbe:	461a      	mov	r2, r3
    cbc0:	21ad      	movs	r1, #173	; 0xad
    cbc2:	68f8      	ldr	r0, [r7, #12]
    cbc4:	f7ff fe44 	bl	c850 <mp_load_method>
        dest[2] = send_value;
    cbc8:	68bb      	ldr	r3, [r7, #8]
    cbca:	64fb      	str	r3, [r7, #76]	; 0x4c
        // TODO: This should have exception wrapping like __next__ case
        // above. Not done right away to think how to optimize native
        // generators better, see:
        // https://github.com/micropython/micropython/issues/2628
        *ret_val = mp_call_method_n_kw(1, 0, dest);
    cbcc:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cbd0:	461a      	mov	r2, r3
    cbd2:	2100      	movs	r1, #0
    cbd4:	2001      	movs	r0, #1
    cbd6:	f7ff f961 	bl	be9c <mp_call_method_n_kw>
    cbda:	4602      	mov	r2, r0
    cbdc:	683b      	ldr	r3, [r7, #0]
    cbde:	601a      	str	r2, [r3, #0]
        return MP_VM_RETURN_YIELD;
    cbe0:	2301      	movs	r3, #1
    cbe2:	e049      	b.n	cc78 <mp_resume+0x1a0>
    }

    assert(throw_value != MP_OBJ_NULL);
    cbe4:	687b      	ldr	r3, [r7, #4]
    cbe6:	2b00      	cmp	r3, #0
    cbe8:	d106      	bne.n	cbf8 <mp_resume+0x120>
    cbea:	4b2a      	ldr	r3, [pc, #168]	; (cc94 <mp_resume+0x1bc>)
    cbec:	4a25      	ldr	r2, [pc, #148]	; (cc84 <mp_resume+0x1ac>)
    cbee:	f240 41fd 	movw	r1, #1277	; 0x4fd
    cbf2:	4825      	ldr	r0, [pc, #148]	; (cc88 <mp_resume+0x1b0>)
    cbf4:	f00e fbba 	bl	1b36c <__assert_func>
    {
        if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(throw_value)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit))) {
    cbf8:	6878      	ldr	r0, [r7, #4]
    cbfa:	f000 fe0b 	bl	d814 <mp_obj_get_type>
    cbfe:	4603      	mov	r3, r0
    cc00:	4925      	ldr	r1, [pc, #148]	; (cc98 <mp_resume+0x1c0>)
    cc02:	4618      	mov	r0, r3
    cc04:	f00a fb6e 	bl	172e4 <mp_obj_is_subclass_fast>
    cc08:	4603      	mov	r3, r0
    cc0a:	2b00      	cmp	r3, #0
    cc0c:	d015      	beq.n	cc3a <mp_resume+0x162>
            mp_load_method_maybe(self_in, MP_QSTR_close, dest);
    cc0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cc12:	461a      	mov	r2, r3
    cc14:	2162      	movs	r1, #98	; 0x62
    cc16:	68f8      	ldr	r0, [r7, #12]
    cc18:	f7ff fdb8 	bl	c78c <mp_load_method_maybe>
            if (dest[0] != MP_OBJ_NULL) {
    cc1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cc1e:	2b00      	cmp	r3, #0
    cc20:	d023      	beq.n	cc6a <mp_resume+0x192>
                // TODO: Exceptions raised in close() are not propagated,
                // printed to sys.stderr
                *ret_val = mp_call_method_n_kw(0, 0, dest);
    cc22:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cc26:	461a      	mov	r2, r3
    cc28:	2100      	movs	r1, #0
    cc2a:	2000      	movs	r0, #0
    cc2c:	f7ff f936 	bl	be9c <mp_call_method_n_kw>
    cc30:	4602      	mov	r2, r0
    cc32:	683b      	ldr	r3, [r7, #0]
    cc34:	601a      	str	r2, [r3, #0]
                // We assume one can't "yield" from close()
                return MP_VM_RETURN_NORMAL;
    cc36:	2300      	movs	r3, #0
    cc38:	e01e      	b.n	cc78 <mp_resume+0x1a0>
            }
        } else {
            mp_load_method_maybe(self_in, MP_QSTR_throw, dest);
    cc3a:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cc3e:	461a      	mov	r2, r3
    cc40:	21bd      	movs	r1, #189	; 0xbd
    cc42:	68f8      	ldr	r0, [r7, #12]
    cc44:	f7ff fda2 	bl	c78c <mp_load_method_maybe>
            if (dest[0] != MP_OBJ_NULL) {
    cc48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cc4a:	2b00      	cmp	r3, #0
    cc4c:	d00d      	beq.n	cc6a <mp_resume+0x192>
                dest[2] = throw_value;
    cc4e:	687b      	ldr	r3, [r7, #4]
    cc50:	64fb      	str	r3, [r7, #76]	; 0x4c
                *ret_val = mp_call_method_n_kw(1, 0, dest);
    cc52:	f107 0344 	add.w	r3, r7, #68	; 0x44
    cc56:	461a      	mov	r2, r3
    cc58:	2100      	movs	r1, #0
    cc5a:	2001      	movs	r0, #1
    cc5c:	f7ff f91e 	bl	be9c <mp_call_method_n_kw>
    cc60:	4602      	mov	r2, r0
    cc62:	683b      	ldr	r3, [r7, #0]
    cc64:	601a      	str	r2, [r3, #0]
                // If .throw() method returned, we assume it's value to yield
                // - any exception would be thrown with nlr_raise().
                return MP_VM_RETURN_YIELD;
    cc66:	2301      	movs	r3, #1
    cc68:	e006      	b.n	cc78 <mp_resume+0x1a0>
        // If there's nowhere to throw exception into, then we assume that object
        // is just incapable to handle it, so any exception thrown into it
        // will be propagated up. This behavior is approved by test_pep380.py
        // test_delegation_of_close_to_non_generator(),
        //  test_delegating_throw_to_non_generator()
        *ret_val = mp_make_raise_obj(throw_value);
    cc6a:	6878      	ldr	r0, [r7, #4]
    cc6c:	f000 f816 	bl	cc9c <mp_make_raise_obj>
    cc70:	4602      	mov	r2, r0
    cc72:	683b      	ldr	r3, [r7, #0]
    cc74:	601a      	str	r2, [r3, #0]
        return MP_VM_RETURN_EXCEPTION;
    cc76:	2302      	movs	r3, #2
    }
}
    cc78:	4618      	mov	r0, r3
    cc7a:	3758      	adds	r7, #88	; 0x58
    cc7c:	46bd      	mov	sp, r7
    cc7e:	bd80      	pop	{r7, pc}
    cc80:	0001f7d8 	.word	0x0001f7d8
    cc84:	0001f920 	.word	0x0001f920
    cc88:	0001f674 	.word	0x0001f674
    cc8c:	00020e3c 	.word	0x00020e3c
    cc90:	00021534 	.word	0x00021534
    cc94:	0001f814 	.word	0x0001f814
    cc98:	000202b4 	.word	0x000202b4

0000cc9c <mp_make_raise_obj>:

mp_obj_t mp_make_raise_obj(mp_obj_t o) {
    cc9c:	b580      	push	{r7, lr}
    cc9e:	b082      	sub	sp, #8
    cca0:	af00      	add	r7, sp, #0
    cca2:	6078      	str	r0, [r7, #4]
    DEBUG_printf("raise %p\n", o);
    if (mp_obj_is_exception_type(o)) {
    cca4:	6878      	ldr	r0, [r7, #4]
    cca6:	f002 fd3d 	bl	f724 <mp_obj_is_exception_type>
    ccaa:	4603      	mov	r3, r0
    ccac:	2b00      	cmp	r3, #0
    ccae:	d007      	beq.n	ccc0 <mp_make_raise_obj+0x24>
        // o is an exception type (it is derived from BaseException (or is BaseException))
        // create and return a new exception instance by calling o
        // TODO could have an option to disable traceback, then builtin exceptions (eg TypeError)
        // could have const instances in ROM which we return here instead
        return mp_call_function_n_kw(o, 0, 0, NULL);
    ccb0:	2300      	movs	r3, #0
    ccb2:	2200      	movs	r2, #0
    ccb4:	2100      	movs	r1, #0
    ccb6:	6878      	ldr	r0, [r7, #4]
    ccb8:	f7ff f8ce 	bl	be58 <mp_call_function_n_kw>
    ccbc:	4603      	mov	r3, r0
    ccbe:	e00c      	b.n	ccda <mp_make_raise_obj+0x3e>
    } else if (mp_obj_is_exception_instance(o)) {
    ccc0:	6878      	ldr	r0, [r7, #4]
    ccc2:	f002 fd57 	bl	f774 <mp_obj_is_exception_instance>
    ccc6:	4603      	mov	r3, r0
    ccc8:	2b00      	cmp	r3, #0
    ccca:	d001      	beq.n	ccd0 <mp_make_raise_obj+0x34>
        // o is an instance of an exception, so use it as the exception
        return o;
    cccc:	687b      	ldr	r3, [r7, #4]
    ccce:	e004      	b.n	ccda <mp_make_raise_obj+0x3e>
    } else {
        // o cannot be used as an exception, so return a type error (which will be raised by the caller)
        return mp_obj_new_exception_msg(&mp_type_TypeError, "exceptions must derive from BaseException");
    ccd0:	4904      	ldr	r1, [pc, #16]	; (cce4 <mp_make_raise_obj+0x48>)
    ccd2:	4805      	ldr	r0, [pc, #20]	; (cce8 <mp_make_raise_obj+0x4c>)
    ccd4:	f002 fc28 	bl	f528 <mp_obj_new_exception_msg>
    ccd8:	4603      	mov	r3, r0
    }
}
    ccda:	4618      	mov	r0, r3
    ccdc:	3708      	adds	r7, #8
    ccde:	46bd      	mov	sp, r7
    cce0:	bd80      	pop	{r7, pc}
    cce2:	bf00      	nop
    cce4:	0001f830 	.word	0x0001f830
    cce8:	00020764 	.word	0x00020764

0000ccec <mp_import_name>:

mp_obj_t mp_import_name(qstr name, mp_obj_t fromlist, mp_obj_t level) {
    ccec:	b580      	push	{r7, lr}
    ccee:	b08a      	sub	sp, #40	; 0x28
    ccf0:	af00      	add	r7, sp, #0
    ccf2:	60f8      	str	r0, [r7, #12]
    ccf4:	60b9      	str	r1, [r7, #8]
    ccf6:	607a      	str	r2, [r7, #4]
    DEBUG_printf("import name '%s' level=%d\n", qstr_str(name), MP_OBJ_SMALL_INT_VALUE(level));

    // build args array
    mp_obj_t args[5];
    args[0] = MP_OBJ_NEW_QSTR(name);
    ccf8:	68fb      	ldr	r3, [r7, #12]
    ccfa:	009b      	lsls	r3, r3, #2
    ccfc:	f043 0302 	orr.w	r3, r3, #2
    cd00:	617b      	str	r3, [r7, #20]
    args[1] = mp_const_none; // TODO should be globals
    cd02:	4b09      	ldr	r3, [pc, #36]	; (cd28 <mp_import_name+0x3c>)
    cd04:	61bb      	str	r3, [r7, #24]
    args[2] = mp_const_none; // TODO should be locals
    cd06:	4b08      	ldr	r3, [pc, #32]	; (cd28 <mp_import_name+0x3c>)
    cd08:	61fb      	str	r3, [r7, #28]
    args[3] = fromlist;
    cd0a:	68bb      	ldr	r3, [r7, #8]
    cd0c:	623b      	str	r3, [r7, #32]
    args[4] = level; // must be 0; we don't yet support other values
    cd0e:	687b      	ldr	r3, [r7, #4]
    cd10:	627b      	str	r3, [r7, #36]	; 0x24

    // TODO lookup __import__ and call that instead of going straight to builtin implementation
    return mp_builtin___import__(5, args);
    cd12:	f107 0314 	add.w	r3, r7, #20
    cd16:	4619      	mov	r1, r3
    cd18:	2005      	movs	r0, #5
    cd1a:	f00b fd43 	bl	187a4 <mp_builtin___import__>
    cd1e:	4603      	mov	r3, r0
}
    cd20:	4618      	mov	r0, r3
    cd22:	3728      	adds	r7, #40	; 0x28
    cd24:	46bd      	mov	sp, r7
    cd26:	bd80      	pop	{r7, pc}
    cd28:	00021534 	.word	0x00021534

0000cd2c <mp_import_from>:

mp_obj_t mp_import_from(mp_obj_t module, qstr name) {
    cd2c:	b5b0      	push	{r4, r5, r7, lr}
    cd2e:	b08e      	sub	sp, #56	; 0x38
    cd30:	af00      	add	r7, sp, #0
    cd32:	6078      	str	r0, [r7, #4]
    cd34:	6039      	str	r1, [r7, #0]
    DEBUG_printf("import from %p %s\n", module, qstr_str(name));

    mp_obj_t dest[2];

    mp_load_method_maybe(module, name, dest);
    cd36:	f107 0320 	add.w	r3, r7, #32
    cd3a:	461a      	mov	r2, r3
    cd3c:	6839      	ldr	r1, [r7, #0]
    cd3e:	6878      	ldr	r0, [r7, #4]
    cd40:	f7ff fd24 	bl	c78c <mp_load_method_maybe>

    if (dest[1] != MP_OBJ_NULL) {
    cd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cd46:	2b00      	cmp	r3, #0
    cd48:	d00a      	beq.n	cd60 <mp_import_from+0x34>
    cd4a:	e000      	b.n	cd4e <mp_import_from+0x22>

    #if MICROPY_ENABLE_EXTERNAL_IMPORT

    // See if it's a package, then can try FS import
    if (!mp_obj_is_package(module)) {
        goto import_error;
    cd4c:	bf00      	nop
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ImportError, "cannot import name %q", name));
    cd4e:	683a      	ldr	r2, [r7, #0]
    cd50:	493a      	ldr	r1, [pc, #232]	; (ce3c <mp_import_from+0x110>)
    cd52:	483b      	ldr	r0, [pc, #236]	; (ce40 <mp_import_from+0x114>)
    cd54:	f002 fc48 	bl	f5e8 <mp_obj_new_exception_msg_varg>
    cd58:	4603      	mov	r3, r0
    cd5a:	4618      	mov	r0, r3
    cd5c:	f7f3 fac0 	bl	2e0 <nlr_jump>
    if (dest[0] != MP_OBJ_NULL) {
    cd60:	6a3b      	ldr	r3, [r7, #32]
    cd62:	2b00      	cmp	r3, #0
    cd64:	d001      	beq.n	cd6a <mp_import_from+0x3e>
        return dest[0];
    cd66:	6a3b      	ldr	r3, [r7, #32]
    cd68:	e063      	b.n	ce32 <mp_import_from+0x106>
    if (!mp_obj_is_package(module)) {
    cd6a:	6878      	ldr	r0, [r7, #4]
    cd6c:	f00b fc06 	bl	1857c <mp_obj_is_package>
    cd70:	4603      	mov	r3, r0
    cd72:	f083 0301 	eor.w	r3, r3, #1
    cd76:	b2db      	uxtb	r3, r3
    cd78:	2b00      	cmp	r3, #0
    cd7a:	d1e7      	bne.n	cd4c <mp_import_from+0x20>
    }

    mp_load_method_maybe(module, MP_QSTR___name__, dest);
    cd7c:	f107 0320 	add.w	r3, r7, #32
    cd80:	461a      	mov	r2, r3
    cd82:	211b      	movs	r1, #27
    cd84:	6878      	ldr	r0, [r7, #4]
    cd86:	f7ff fd01 	bl	c78c <mp_load_method_maybe>
    size_t pkg_name_len;
    const char *pkg_name = mp_obj_str_get_data(dest[0], &pkg_name_len);
    cd8a:	6a3b      	ldr	r3, [r7, #32]
    cd8c:	f107 021c 	add.w	r2, r7, #28
    cd90:	4611      	mov	r1, r2
    cd92:	4618      	mov	r0, r3
    cd94:	f008 fc88 	bl	156a8 <mp_obj_str_get_data>
    cd98:	6378      	str	r0, [r7, #52]	; 0x34

    const uint dot_name_len = pkg_name_len + 1 + qstr_len(name);
    cd9a:	6838      	ldr	r0, [r7, #0]
    cd9c:	f7f4 fa1a 	bl	11d4 <qstr_len>
    cda0:	4602      	mov	r2, r0
    cda2:	69fb      	ldr	r3, [r7, #28]
    cda4:	4413      	add	r3, r2
    cda6:	3301      	adds	r3, #1
    cda8:	633b      	str	r3, [r7, #48]	; 0x30
    char *dot_name = mp_local_alloc(dot_name_len);
    cdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cdac:	3307      	adds	r3, #7
    cdae:	3307      	adds	r3, #7
    cdb0:	08db      	lsrs	r3, r3, #3
    cdb2:	00db      	lsls	r3, r3, #3
    cdb4:	ebad 0d03 	sub.w	sp, sp, r3
    cdb8:	466b      	mov	r3, sp
    cdba:	3307      	adds	r3, #7
    cdbc:	08db      	lsrs	r3, r3, #3
    cdbe:	00db      	lsls	r3, r3, #3
    cdc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    memcpy(dot_name, pkg_name, pkg_name_len);
    cdc2:	69fb      	ldr	r3, [r7, #28]
    cdc4:	461a      	mov	r2, r3
    cdc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
    cdc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    cdca:	f00f f87b 	bl	1bec4 <memcpy>
    dot_name[pkg_name_len] = '.';
    cdce:	69fb      	ldr	r3, [r7, #28]
    cdd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cdd2:	4413      	add	r3, r2
    cdd4:	222e      	movs	r2, #46	; 0x2e
    cdd6:	701a      	strb	r2, [r3, #0]
    memcpy(dot_name + pkg_name_len + 1, qstr_str(name), qstr_len(name));
    cdd8:	69fb      	ldr	r3, [r7, #28]
    cdda:	3301      	adds	r3, #1
    cddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cdde:	18d4      	adds	r4, r2, r3
    cde0:	6838      	ldr	r0, [r7, #0]
    cde2:	f7f4 fa07 	bl	11f4 <qstr_str>
    cde6:	4605      	mov	r5, r0
    cde8:	6838      	ldr	r0, [r7, #0]
    cdea:	f7f4 f9f3 	bl	11d4 <qstr_len>
    cdee:	4603      	mov	r3, r0
    cdf0:	461a      	mov	r2, r3
    cdf2:	4629      	mov	r1, r5
    cdf4:	4620      	mov	r0, r4
    cdf6:	f00f f865 	bl	1bec4 <memcpy>
    qstr dot_name_q = qstr_from_strn(dot_name, dot_name_len);
    cdfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
    cdfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    cdfe:	f7f4 f91d 	bl	103c <qstr_from_strn>
    ce02:	62b8      	str	r0, [r7, #40]	; 0x28
    mp_local_free(dot_name);
    ce04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ce06:	f7fe fb61 	bl	b4cc <mp_local_free>

    mp_obj_t args[5];
    args[0] = MP_OBJ_NEW_QSTR(dot_name_q);
    ce0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ce0c:	009b      	lsls	r3, r3, #2
    ce0e:	f043 0302 	orr.w	r3, r3, #2
    ce12:	60bb      	str	r3, [r7, #8]
    args[1] = mp_const_none; // TODO should be globals
    ce14:	4b0b      	ldr	r3, [pc, #44]	; (ce44 <mp_import_from+0x118>)
    ce16:	60fb      	str	r3, [r7, #12]
    args[2] = mp_const_none; // TODO should be locals
    ce18:	4b0a      	ldr	r3, [pc, #40]	; (ce44 <mp_import_from+0x118>)
    ce1a:	613b      	str	r3, [r7, #16]
    args[3] = mp_const_true; // Pass sentinel "non empty" value to force returning of leaf module
    ce1c:	4b0a      	ldr	r3, [pc, #40]	; (ce48 <mp_import_from+0x11c>)
    ce1e:	617b      	str	r3, [r7, #20]
    args[4] = MP_OBJ_NEW_SMALL_INT(0);
    ce20:	2301      	movs	r3, #1
    ce22:	61bb      	str	r3, [r7, #24]

    // TODO lookup __import__ and call that instead of going straight to builtin implementation
    return mp_builtin___import__(5, args);
    ce24:	f107 0308 	add.w	r3, r7, #8
    ce28:	4619      	mov	r1, r3
    ce2a:	2005      	movs	r0, #5
    ce2c:	f00b fcba 	bl	187a4 <mp_builtin___import__>
    ce30:	4603      	mov	r3, r0

    // Package import not supported with external imports disabled
    goto import_error;

    #endif
}
    ce32:	4618      	mov	r0, r3
    ce34:	3738      	adds	r7, #56	; 0x38
    ce36:	46bd      	mov	sp, r7
    ce38:	bdb0      	pop	{r4, r5, r7, pc}
    ce3a:	bf00      	nop
    ce3c:	0001f85c 	.word	0x0001f85c
    ce40:	000204d0 	.word	0x000204d0
    ce44:	00021534 	.word	0x00021534
    ce48:	0001fc44 	.word	0x0001fc44

0000ce4c <mp_import_all>:

void mp_import_all(mp_obj_t module) {
    ce4c:	b580      	push	{r7, lr}
    ce4e:	b086      	sub	sp, #24
    ce50:	af00      	add	r7, sp, #0
    ce52:	6078      	str	r0, [r7, #4]
    DEBUG_printf("import all %p\n", module);

    // TODO: Support __all__
    mp_map_t *map = mp_obj_dict_get_map(MP_OBJ_FROM_PTR(mp_obj_module_get_globals(module)));
    ce54:	6878      	ldr	r0, [r7, #4]
    ce56:	f004 ff4f 	bl	11cf8 <mp_obj_module_get_globals>
    ce5a:	4603      	mov	r3, r0
    ce5c:	4618      	mov	r0, r3
    ce5e:	f002 f9dd 	bl	f21c <mp_obj_dict_get_map>
    ce62:	6138      	str	r0, [r7, #16]
    for (size_t i = 0; i < map->alloc; i++) {
    ce64:	2300      	movs	r3, #0
    ce66:	617b      	str	r3, [r7, #20]
    ce68:	e022      	b.n	ceb0 <mp_import_all+0x64>
        if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    ce6a:	6979      	ldr	r1, [r7, #20]
    ce6c:	6938      	ldr	r0, [r7, #16]
    ce6e:	f7fe faf7 	bl	b460 <MP_MAP_SLOT_IS_FILLED>
    ce72:	4603      	mov	r3, r0
    ce74:	2b00      	cmp	r3, #0
    ce76:	d018      	beq.n	ceaa <mp_import_all+0x5e>
            qstr name = MP_OBJ_QSTR_VALUE(map->table[i].key);
    ce78:	693b      	ldr	r3, [r7, #16]
    ce7a:	689a      	ldr	r2, [r3, #8]
    ce7c:	697b      	ldr	r3, [r7, #20]
    ce7e:	00db      	lsls	r3, r3, #3
    ce80:	4413      	add	r3, r2
    ce82:	681b      	ldr	r3, [r3, #0]
    ce84:	089b      	lsrs	r3, r3, #2
    ce86:	60fb      	str	r3, [r7, #12]
            if (*qstr_str(name) != '_') {
    ce88:	68f8      	ldr	r0, [r7, #12]
    ce8a:	f7f4 f9b3 	bl	11f4 <qstr_str>
    ce8e:	4603      	mov	r3, r0
    ce90:	781b      	ldrb	r3, [r3, #0]
    ce92:	2b5f      	cmp	r3, #95	; 0x5f
    ce94:	d009      	beq.n	ceaa <mp_import_all+0x5e>
                mp_store_name(name, map->table[i].value);
    ce96:	693b      	ldr	r3, [r7, #16]
    ce98:	689a      	ldr	r2, [r3, #8]
    ce9a:	697b      	ldr	r3, [r7, #20]
    ce9c:	00db      	lsls	r3, r3, #3
    ce9e:	4413      	add	r3, r2
    cea0:	685b      	ldr	r3, [r3, #4]
    cea2:	4619      	mov	r1, r3
    cea4:	68f8      	ldr	r0, [r7, #12]
    cea6:	f7fe fc0d 	bl	b6c4 <mp_store_name>
    for (size_t i = 0; i < map->alloc; i++) {
    ceaa:	697b      	ldr	r3, [r7, #20]
    ceac:	3301      	adds	r3, #1
    ceae:	617b      	str	r3, [r7, #20]
    ceb0:	693b      	ldr	r3, [r7, #16]
    ceb2:	685a      	ldr	r2, [r3, #4]
    ceb4:	697b      	ldr	r3, [r7, #20]
    ceb6:	429a      	cmp	r2, r3
    ceb8:	d8d7      	bhi.n	ce6a <mp_import_all+0x1e>
            }
        }
    }
}
    ceba:	bf00      	nop
    cebc:	3718      	adds	r7, #24
    cebe:	46bd      	mov	sp, r7
    cec0:	bd80      	pop	{r7, pc}
    cec2:	bf00      	nop

0000cec4 <mp_parse_compile_execute>:

#if MICROPY_ENABLE_COMPILER

// this is implemented in this file so it can optimise access to locals/globals
mp_obj_t mp_parse_compile_execute(mp_lexer_t *lex, mp_parse_input_kind_t parse_input_kind, mp_obj_dict_t *globals, mp_obj_dict_t *locals) {
    cec4:	b580      	push	{r7, lr}
    cec6:	b098      	sub	sp, #96	; 0x60
    cec8:	af00      	add	r7, sp, #0
    ceca:	60f8      	str	r0, [r7, #12]
    cecc:	60b9      	str	r1, [r7, #8]
    cece:	607a      	str	r2, [r7, #4]
    ced0:	603b      	str	r3, [r7, #0]
    // save context
    mp_obj_dict_t *volatile old_globals = mp_globals_get();
    ced2:	f7fe fb49 	bl	b568 <mp_globals_get>
    ced6:	4603      	mov	r3, r0
    ced8:	653b      	str	r3, [r7, #80]	; 0x50
    mp_obj_dict_t *volatile old_locals = mp_locals_get();
    ceda:	f7fe fb29 	bl	b530 <mp_locals_get>
    cede:	4603      	mov	r3, r0
    cee0:	64fb      	str	r3, [r7, #76]	; 0x4c

    // set new context
    mp_globals_set(globals);
    cee2:	6878      	ldr	r0, [r7, #4]
    cee4:	f7fe fb4c 	bl	b580 <mp_globals_set>
    mp_locals_set(locals);
    cee8:	6838      	ldr	r0, [r7, #0]
    ceea:	f7fe fb2d 	bl	b548 <mp_locals_set>

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
    ceee:	f107 031c 	add.w	r3, r7, #28
    cef2:	4618      	mov	r0, r3
    cef4:	f7f3 f9e2 	bl	2bc <nlr_push>
    cef8:	4603      	mov	r3, r0
    cefa:	2b00      	cmp	r3, #0
    cefc:	d121      	bne.n	cf42 <mp_parse_compile_execute+0x7e>
        qstr source_name = lex->source_name;
    cefe:	68fb      	ldr	r3, [r7, #12]
    cf00:	681b      	ldr	r3, [r3, #0]
    cf02:	65fb      	str	r3, [r7, #92]	; 0x5c
        mp_parse_tree_t parse_tree = mp_parse(lex, parse_input_kind);
    cf04:	f107 0314 	add.w	r3, r7, #20
    cf08:	68ba      	ldr	r2, [r7, #8]
    cf0a:	68f9      	ldr	r1, [r7, #12]
    cf0c:	4618      	mov	r0, r3
    cf0e:	f7f7 fa05 	bl	431c <mp_parse>
        mp_obj_t module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, false);
    cf12:	f107 0014 	add.w	r0, r7, #20
    cf16:	2300      	movs	r3, #0
    cf18:	2200      	movs	r2, #0
    cf1a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    cf1c:	f7fc fc88 	bl	9830 <mp_compile>
    cf20:	65b8      	str	r0, [r7, #88]	; 0x58
        if (MICROPY_PY_BUILTINS_COMPILE && globals == NULL) {
            // for compile only, return value is the module function
            ret = module_fun;
        } else {
            // execute module function and get return value
            ret = mp_call_function_0(module_fun);
    cf22:	6db8      	ldr	r0, [r7, #88]	; 0x58
    cf24:	f7fe ff62 	bl	bdec <mp_call_function_0>
    cf28:	6578      	str	r0, [r7, #84]	; 0x54
        }

        // finish nlr block, restore context and return value
        nlr_pop();
    cf2a:	f7f3 f9b5 	bl	298 <nlr_pop>
        mp_globals_set(old_globals);
    cf2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    cf30:	4618      	mov	r0, r3
    cf32:	f7fe fb25 	bl	b580 <mp_globals_set>
        mp_locals_set(old_locals);
    cf36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cf38:	4618      	mov	r0, r3
    cf3a:	f7fe fb05 	bl	b548 <mp_locals_set>
        return ret;
    cf3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    cf40:	e00b      	b.n	cf5a <mp_parse_compile_execute+0x96>
    } else {
        // exception; restore context and re-raise same exception
        mp_globals_set(old_globals);
    cf42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    cf44:	4618      	mov	r0, r3
    cf46:	f7fe fb1b 	bl	b580 <mp_globals_set>
        mp_locals_set(old_locals);
    cf4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cf4c:	4618      	mov	r0, r3
    cf4e:	f7fe fafb 	bl	b548 <mp_locals_set>
        nlr_jump(nlr.ret_val);
    cf52:	6a3b      	ldr	r3, [r7, #32]
    cf54:	4618      	mov	r0, r3
    cf56:	f7f3 f9c3 	bl	2e0 <nlr_jump>
    }
}
    cf5a:	4618      	mov	r0, r3
    cf5c:	3760      	adds	r7, #96	; 0x60
    cf5e:	46bd      	mov	sp, r7
    cf60:	bd80      	pop	{r7, pc}
    cf62:	bf00      	nop

0000cf64 <m_malloc_fail>:

#endif // MICROPY_ENABLE_COMPILER

NORETURN void m_malloc_fail(size_t num_bytes) {
    cf64:	b580      	push	{r7, lr}
    cf66:	b082      	sub	sp, #8
    cf68:	af00      	add	r7, sp, #0
    cf6a:	6078      	str	r0, [r7, #4]
    DEBUG_printf("memory allocation failed, allocating %u bytes\n", (uint)num_bytes);
    #if MICROPY_ENABLE_GC
    if (gc_is_locked()) {
    cf6c:	f7f3 fb28 	bl	5c0 <gc_is_locked>
    cf70:	4603      	mov	r3, r0
    cf72:	2b00      	cmp	r3, #0
    cf74:	d003      	beq.n	cf7e <m_malloc_fail+0x1a>
        mp_raise_msg(&mp_type_MemoryError, "memory allocation failed, heap is locked");
    cf76:	4906      	ldr	r1, [pc, #24]	; (cf90 <m_malloc_fail+0x2c>)
    cf78:	4806      	ldr	r0, [pc, #24]	; (cf94 <m_malloc_fail+0x30>)
    cf7a:	f000 f80f 	bl	cf9c <mp_raise_msg>
    }
    #endif
    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_MemoryError,
    cf7e:	687a      	ldr	r2, [r7, #4]
    cf80:	4905      	ldr	r1, [pc, #20]	; (cf98 <m_malloc_fail+0x34>)
    cf82:	4804      	ldr	r0, [pc, #16]	; (cf94 <m_malloc_fail+0x30>)
    cf84:	f002 fb30 	bl	f5e8 <mp_obj_new_exception_msg_varg>
    cf88:	4603      	mov	r3, r0
    cf8a:	4618      	mov	r0, r3
    cf8c:	f7f3 f9a8 	bl	2e0 <nlr_jump>
    cf90:	0001f874 	.word	0x0001f874
    cf94:	000205c0 	.word	0x000205c0
    cf98:	0001f8a0 	.word	0x0001f8a0

0000cf9c <mp_raise_msg>:
        "memory allocation failed, allocating %u bytes", (uint)num_bytes));
}

NORETURN void mp_raise_msg(const mp_obj_type_t *exc_type, const char *msg) {
    cf9c:	b580      	push	{r7, lr}
    cf9e:	b082      	sub	sp, #8
    cfa0:	af00      	add	r7, sp, #0
    cfa2:	6078      	str	r0, [r7, #4]
    cfa4:	6039      	str	r1, [r7, #0]
    if (msg == NULL) {
    cfa6:	683b      	ldr	r3, [r7, #0]
    cfa8:	2b00      	cmp	r3, #0
    cfaa:	d106      	bne.n	cfba <mp_raise_msg+0x1e>
        nlr_raise(mp_obj_new_exception(exc_type));
    cfac:	6878      	ldr	r0, [r7, #4]
    cfae:	f002 fa77 	bl	f4a0 <mp_obj_new_exception>
    cfb2:	4603      	mov	r3, r0
    cfb4:	4618      	mov	r0, r3
    cfb6:	f7f3 f993 	bl	2e0 <nlr_jump>
    } else {
        nlr_raise(mp_obj_new_exception_msg(exc_type, msg));
    cfba:	6839      	ldr	r1, [r7, #0]
    cfbc:	6878      	ldr	r0, [r7, #4]
    cfbe:	f002 fab3 	bl	f528 <mp_obj_new_exception_msg>
    cfc2:	4603      	mov	r3, r0
    cfc4:	4618      	mov	r0, r3
    cfc6:	f7f3 f98b 	bl	2e0 <nlr_jump>
    cfca:	bf00      	nop

0000cfcc <mp_raise_ValueError>:
    }
}

NORETURN void mp_raise_ValueError(const char *msg) {
    cfcc:	b580      	push	{r7, lr}
    cfce:	b082      	sub	sp, #8
    cfd0:	af00      	add	r7, sp, #0
    cfd2:	6078      	str	r0, [r7, #4]
    mp_raise_msg(&mp_type_ValueError, msg);
    cfd4:	6879      	ldr	r1, [r7, #4]
    cfd6:	4801      	ldr	r0, [pc, #4]	; (cfdc <mp_raise_ValueError+0x10>)
    cfd8:	f7ff ffe0 	bl	cf9c <mp_raise_msg>
    cfdc:	000207a0 	.word	0x000207a0

0000cfe0 <mp_raise_TypeError>:
}

NORETURN void mp_raise_TypeError(const char *msg) {
    cfe0:	b580      	push	{r7, lr}
    cfe2:	b082      	sub	sp, #8
    cfe4:	af00      	add	r7, sp, #0
    cfe6:	6078      	str	r0, [r7, #4]
    mp_raise_msg(&mp_type_TypeError, msg);
    cfe8:	6879      	ldr	r1, [r7, #4]
    cfea:	4801      	ldr	r0, [pc, #4]	; (cff0 <mp_raise_TypeError+0x10>)
    cfec:	f7ff ffd6 	bl	cf9c <mp_raise_msg>
    cff0:	00020764 	.word	0x00020764

0000cff4 <mp_raise_OSError>:
}

NORETURN void mp_raise_OSError(int errno_) {
    cff4:	b580      	push	{r7, lr}
    cff6:	b082      	sub	sp, #8
    cff8:	af00      	add	r7, sp, #0
    cffa:	6078      	str	r0, [r7, #4]
    nlr_raise(mp_obj_new_exception_arg1(&mp_type_OSError, MP_OBJ_NEW_SMALL_INT(errno_)));
    cffc:	687b      	ldr	r3, [r7, #4]
    cffe:	005b      	lsls	r3, r3, #1
    d000:	f043 0301 	orr.w	r3, r3, #1
    d004:	4619      	mov	r1, r3
    d006:	4803      	ldr	r0, [pc, #12]	; (d014 <mp_raise_OSError+0x20>)
    d008:	f002 fa58 	bl	f4bc <mp_obj_new_exception_arg1>
    d00c:	4603      	mov	r3, r0
    d00e:	4618      	mov	r0, r3
    d010:	f7f3 f966 	bl	2e0 <nlr_jump>
    d014:	00020638 	.word	0x00020638

0000d018 <mp_raise_NotImplementedError>:
}

NORETURN void mp_raise_NotImplementedError(const char *msg) {
    d018:	b580      	push	{r7, lr}
    d01a:	b082      	sub	sp, #8
    d01c:	af00      	add	r7, sp, #0
    d01e:	6078      	str	r0, [r7, #4]
    mp_raise_msg(&mp_type_NotImplementedError, msg);
    d020:	6879      	ldr	r1, [r7, #4]
    d022:	4801      	ldr	r0, [pc, #4]	; (d028 <mp_raise_NotImplementedError+0x10>)
    d024:	f7ff ffba 	bl	cf9c <mp_raise_msg>
    d028:	000206b0 	.word	0x000206b0

0000d02c <mp_arg_check_num>:
#include <stdlib.h>
#include <assert.h>

#include "py/runtime.h"

void mp_arg_check_num(size_t n_args, size_t n_kw, size_t n_args_min, size_t n_args_max, bool takes_kw) {
    d02c:	b580      	push	{r7, lr}
    d02e:	b084      	sub	sp, #16
    d030:	af00      	add	r7, sp, #0
    d032:	60f8      	str	r0, [r7, #12]
    d034:	60b9      	str	r1, [r7, #8]
    d036:	607a      	str	r2, [r7, #4]
    d038:	603b      	str	r3, [r7, #0]
    // TODO maybe take the function name as an argument so we can print nicer error messages

    if (n_kw && !takes_kw) {
    d03a:	68bb      	ldr	r3, [r7, #8]
    d03c:	2b00      	cmp	r3, #0
    d03e:	d007      	beq.n	d050 <mp_arg_check_num+0x24>
    d040:	7e3b      	ldrb	r3, [r7, #24]
    d042:	f083 0301 	eor.w	r3, r3, #1
    d046:	b2db      	uxtb	r3, r3
    d048:	2b00      	cmp	r3, #0
    d04a:	d001      	beq.n	d050 <mp_arg_check_num+0x24>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_arg_error_terse_mismatch();
    d04c:	f000 f8e8 	bl	d220 <mp_arg_error_terse_mismatch>
        } else {
            mp_raise_TypeError("function does not take keyword arguments");
        }
    }

    if (n_args_min == n_args_max) {
    d050:	687a      	ldr	r2, [r7, #4]
    d052:	683b      	ldr	r3, [r7, #0]
    d054:	429a      	cmp	r2, r3
    d056:	d105      	bne.n	d064 <mp_arg_check_num+0x38>
        if (n_args != n_args_min) {
    d058:	68fa      	ldr	r2, [r7, #12]
    d05a:	687b      	ldr	r3, [r7, #4]
    d05c:	429a      	cmp	r2, r3
    d05e:	d00d      	beq.n	d07c <mp_arg_check_num+0x50>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_arg_error_terse_mismatch();
    d060:	f000 f8de 	bl	d220 <mp_arg_error_terse_mismatch>
                    "function takes %d positional arguments but %d were given",
                    n_args_min, n_args));
            }
        }
    } else {
        if (n_args < n_args_min) {
    d064:	68fa      	ldr	r2, [r7, #12]
    d066:	687b      	ldr	r3, [r7, #4]
    d068:	429a      	cmp	r2, r3
    d06a:	d201      	bcs.n	d070 <mp_arg_check_num+0x44>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_arg_error_terse_mismatch();
    d06c:	f000 f8d8 	bl	d220 <mp_arg_error_terse_mismatch>
            } else {
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                    "function missing %d required positional arguments",
                    n_args_min - n_args));
            }
        } else if (n_args > n_args_max) {
    d070:	68fa      	ldr	r2, [r7, #12]
    d072:	683b      	ldr	r3, [r7, #0]
    d074:	429a      	cmp	r2, r3
    d076:	d901      	bls.n	d07c <mp_arg_check_num+0x50>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_arg_error_terse_mismatch();
    d078:	f000 f8d2 	bl	d220 <mp_arg_error_terse_mismatch>
                    "function expected at most %d arguments, got %d",
                    n_args_max, n_args));
            }
        }
    }
}
    d07c:	bf00      	nop
    d07e:	3710      	adds	r7, #16
    d080:	46bd      	mov	sp, r7
    d082:	bd80      	pop	{r7, pc}

0000d084 <mp_arg_parse_all>:

void mp_arg_parse_all(size_t n_pos, const mp_obj_t *pos, mp_map_t *kws, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals) {
    d084:	b590      	push	{r4, r7, lr}
    d086:	b08b      	sub	sp, #44	; 0x2c
    d088:	af00      	add	r7, sp, #0
    d08a:	60f8      	str	r0, [r7, #12]
    d08c:	60b9      	str	r1, [r7, #8]
    d08e:	607a      	str	r2, [r7, #4]
    d090:	603b      	str	r3, [r7, #0]
    size_t pos_found = 0, kws_found = 0;
    d092:	2300      	movs	r3, #0
    d094:	627b      	str	r3, [r7, #36]	; 0x24
    d096:	2300      	movs	r3, #0
    d098:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < n_allowed; i++) {
    d09a:	2300      	movs	r3, #0
    d09c:	61fb      	str	r3, [r7, #28]
    d09e:	e07e      	b.n	d19e <mp_arg_parse_all+0x11a>
        mp_obj_t given_arg;
        if (i < n_pos) {
    d0a0:	69fa      	ldr	r2, [r7, #28]
    d0a2:	68fb      	ldr	r3, [r7, #12]
    d0a4:	429a      	cmp	r2, r3
    d0a6:	d212      	bcs.n	d0ce <mp_arg_parse_all+0x4a>
            if (allowed[i].flags & MP_ARG_KW_ONLY) {
    d0a8:	69fb      	ldr	r3, [r7, #28]
    d0aa:	00db      	lsls	r3, r3, #3
    d0ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d0ae:	4413      	add	r3, r2
    d0b0:	885b      	ldrh	r3, [r3, #2]
    d0b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
    d0b6:	2b00      	cmp	r3, #0
    d0b8:	d17b      	bne.n	d1b2 <mp_arg_parse_all+0x12e>
                goto extra_positional;
            }
            pos_found++;
    d0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d0bc:	3301      	adds	r3, #1
    d0be:	627b      	str	r3, [r7, #36]	; 0x24
            given_arg = pos[i];
    d0c0:	69fb      	ldr	r3, [r7, #28]
    d0c2:	009b      	lsls	r3, r3, #2
    d0c4:	68ba      	ldr	r2, [r7, #8]
    d0c6:	4413      	add	r3, r2
    d0c8:	681b      	ldr	r3, [r3, #0]
    d0ca:	61bb      	str	r3, [r7, #24]
    d0cc:	e02c      	b.n	d128 <mp_arg_parse_all+0xa4>
        } else {
            mp_map_elem_t *kw = mp_map_lookup(kws, MP_OBJ_NEW_QSTR(allowed[i].qst), MP_MAP_LOOKUP);
    d0ce:	69fb      	ldr	r3, [r7, #28]
    d0d0:	00db      	lsls	r3, r3, #3
    d0d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d0d4:	4413      	add	r3, r2
    d0d6:	881b      	ldrh	r3, [r3, #0]
    d0d8:	009b      	lsls	r3, r3, #2
    d0da:	f043 0302 	orr.w	r3, r3, #2
    d0de:	2200      	movs	r2, #0
    d0e0:	4619      	mov	r1, r3
    d0e2:	6878      	ldr	r0, [r7, #4]
    d0e4:	f000 f9ec 	bl	d4c0 <mp_map_lookup>
    d0e8:	6178      	str	r0, [r7, #20]
            if (kw == NULL) {
    d0ea:	697b      	ldr	r3, [r7, #20]
    d0ec:	2b00      	cmp	r3, #0
    d0ee:	d115      	bne.n	d11c <mp_arg_parse_all+0x98>
                if (allowed[i].flags & MP_ARG_REQUIRED) {
    d0f0:	69fb      	ldr	r3, [r7, #28]
    d0f2:	00db      	lsls	r3, r3, #3
    d0f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d0f6:	4413      	add	r3, r2
    d0f8:	885b      	ldrh	r3, [r3, #2]
    d0fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
    d0fe:	2b00      	cmp	r3, #0
    d100:	d001      	beq.n	d106 <mp_arg_parse_all+0x82>
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        mp_arg_error_terse_mismatch();
    d102:	f000 f88d 	bl	d220 <mp_arg_error_terse_mismatch>
                    } else {
                        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                            "'%q' argument required", allowed[i].qst));
                    }
                }
                out_vals[i] = allowed[i].defval;
    d106:	69fb      	ldr	r3, [r7, #28]
    d108:	009b      	lsls	r3, r3, #2
    d10a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d10c:	4413      	add	r3, r2
    d10e:	69fa      	ldr	r2, [r7, #28]
    d110:	00d2      	lsls	r2, r2, #3
    d112:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    d114:	440a      	add	r2, r1
    d116:	6852      	ldr	r2, [r2, #4]
    d118:	601a      	str	r2, [r3, #0]
                continue;
    d11a:	e03d      	b.n	d198 <mp_arg_parse_all+0x114>
            } else {
                kws_found++;
    d11c:	6a3b      	ldr	r3, [r7, #32]
    d11e:	3301      	adds	r3, #1
    d120:	623b      	str	r3, [r7, #32]
                given_arg = kw->value;
    d122:	697b      	ldr	r3, [r7, #20]
    d124:	685b      	ldr	r3, [r3, #4]
    d126:	61bb      	str	r3, [r7, #24]
            }
        }
        if ((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_BOOL) {
    d128:	69fb      	ldr	r3, [r7, #28]
    d12a:	00db      	lsls	r3, r3, #3
    d12c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d12e:	4413      	add	r3, r2
    d130:	885b      	ldrh	r3, [r3, #2]
    d132:	b2db      	uxtb	r3, r3
    d134:	2b01      	cmp	r3, #1
    d136:	d109      	bne.n	d14c <mp_arg_parse_all+0xc8>
            out_vals[i].u_bool = mp_obj_is_true(given_arg);
    d138:	69fb      	ldr	r3, [r7, #28]
    d13a:	009b      	lsls	r3, r3, #2
    d13c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d13e:	18d4      	adds	r4, r2, r3
    d140:	69b8      	ldr	r0, [r7, #24]
    d142:	f000 fc45 	bl	d9d0 <mp_obj_is_true>
    d146:	4603      	mov	r3, r0
    d148:	7023      	strb	r3, [r4, #0]
    d14a:	e025      	b.n	d198 <mp_arg_parse_all+0x114>
        } else if ((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_INT) {
    d14c:	69fb      	ldr	r3, [r7, #28]
    d14e:	00db      	lsls	r3, r3, #3
    d150:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d152:	4413      	add	r3, r2
    d154:	885b      	ldrh	r3, [r3, #2]
    d156:	b2db      	uxtb	r3, r3
    d158:	2b02      	cmp	r3, #2
    d15a:	d109      	bne.n	d170 <mp_arg_parse_all+0xec>
            out_vals[i].u_int = mp_obj_get_int(given_arg);
    d15c:	69fb      	ldr	r3, [r7, #28]
    d15e:	009b      	lsls	r3, r3, #2
    d160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d162:	18d4      	adds	r4, r2, r3
    d164:	69b8      	ldr	r0, [r7, #24]
    d166:	f000 fd33 	bl	dbd0 <mp_obj_get_int>
    d16a:	4603      	mov	r3, r0
    d16c:	6023      	str	r3, [r4, #0]
    d16e:	e013      	b.n	d198 <mp_arg_parse_all+0x114>
        } else {
            assert((allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_OBJ);
    d170:	69fb      	ldr	r3, [r7, #28]
    d172:	00db      	lsls	r3, r3, #3
    d174:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d176:	4413      	add	r3, r2
    d178:	885b      	ldrh	r3, [r3, #2]
    d17a:	b2db      	uxtb	r3, r3
    d17c:	2b03      	cmp	r3, #3
    d17e:	d005      	beq.n	d18c <mp_arg_parse_all+0x108>
    d180:	4b14      	ldr	r3, [pc, #80]	; (d1d4 <mp_arg_parse_all+0x150>)
    d182:	4a15      	ldr	r2, [pc, #84]	; (d1d8 <mp_arg_parse_all+0x154>)
    d184:	216b      	movs	r1, #107	; 0x6b
    d186:	4815      	ldr	r0, [pc, #84]	; (d1dc <mp_arg_parse_all+0x158>)
    d188:	f00e f8f0 	bl	1b36c <__assert_func>
            out_vals[i].u_obj = given_arg;
    d18c:	69fb      	ldr	r3, [r7, #28]
    d18e:	009b      	lsls	r3, r3, #2
    d190:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d192:	4413      	add	r3, r2
    d194:	69ba      	ldr	r2, [r7, #24]
    d196:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < n_allowed; i++) {
    d198:	69fb      	ldr	r3, [r7, #28]
    d19a:	3301      	adds	r3, #1
    d19c:	61fb      	str	r3, [r7, #28]
    d19e:	69fa      	ldr	r2, [r7, #28]
    d1a0:	683b      	ldr	r3, [r7, #0]
    d1a2:	429a      	cmp	r2, r3
    d1a4:	f4ff af7c 	bcc.w	d0a0 <mp_arg_parse_all+0x1c>
        }
    }
    if (pos_found < n_pos) {
    d1a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d1aa:	68fb      	ldr	r3, [r7, #12]
    d1ac:	429a      	cmp	r2, r3
    d1ae:	d203      	bcs.n	d1b8 <mp_arg_parse_all+0x134>
    d1b0:	e000      	b.n	d1b4 <mp_arg_parse_all+0x130>
                goto extra_positional;
    d1b2:	bf00      	nop
        extra_positional:
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_arg_error_terse_mismatch();
    d1b4:	f000 f834 	bl	d220 <mp_arg_error_terse_mismatch>
        } else {
            // TODO better error message
            mp_raise_TypeError("extra positional arguments given");
        }
    }
    if (kws_found < kws->used) {
    d1b8:	687b      	ldr	r3, [r7, #4]
    d1ba:	681b      	ldr	r3, [r3, #0]
    d1bc:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d1c0:	461a      	mov	r2, r3
    d1c2:	6a3b      	ldr	r3, [r7, #32]
    d1c4:	429a      	cmp	r2, r3
    d1c6:	d901      	bls.n	d1cc <mp_arg_parse_all+0x148>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_arg_error_terse_mismatch();
    d1c8:	f000 f82a 	bl	d220 <mp_arg_error_terse_mismatch>
        } else {
            // TODO better error message
            mp_raise_TypeError("extra keyword arguments given");
        }
    }
}
    d1cc:	bf00      	nop
    d1ce:	372c      	adds	r7, #44	; 0x2c
    d1d0:	46bd      	mov	sp, r7
    d1d2:	bd90      	pop	{r4, r7, pc}
    d1d4:	0001f92c 	.word	0x0001f92c
    d1d8:	0001f990 	.word	0x0001f990
    d1dc:	0001f960 	.word	0x0001f960

0000d1e0 <mp_arg_parse_all_kw_array>:

void mp_arg_parse_all_kw_array(size_t n_pos, size_t n_kw, const mp_obj_t *args, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals) {
    d1e0:	b580      	push	{r7, lr}
    d1e2:	b08a      	sub	sp, #40	; 0x28
    d1e4:	af02      	add	r7, sp, #8
    d1e6:	60f8      	str	r0, [r7, #12]
    d1e8:	60b9      	str	r1, [r7, #8]
    d1ea:	607a      	str	r2, [r7, #4]
    d1ec:	603b      	str	r3, [r7, #0]
    mp_map_t kw_args;
    mp_map_init_fixed_table(&kw_args, n_kw, args + n_pos);
    d1ee:	68fb      	ldr	r3, [r7, #12]
    d1f0:	009b      	lsls	r3, r3, #2
    d1f2:	687a      	ldr	r2, [r7, #4]
    d1f4:	441a      	add	r2, r3
    d1f6:	f107 0314 	add.w	r3, r7, #20
    d1fa:	68b9      	ldr	r1, [r7, #8]
    d1fc:	4618      	mov	r0, r3
    d1fe:	f000 f897 	bl	d330 <mp_map_init_fixed_table>
    mp_arg_parse_all(n_pos, args, &kw_args, n_allowed, allowed, out_vals);
    d202:	f107 0214 	add.w	r2, r7, #20
    d206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d208:	9301      	str	r3, [sp, #4]
    d20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d20c:	9300      	str	r3, [sp, #0]
    d20e:	683b      	ldr	r3, [r7, #0]
    d210:	6879      	ldr	r1, [r7, #4]
    d212:	68f8      	ldr	r0, [r7, #12]
    d214:	f7ff ff36 	bl	d084 <mp_arg_parse_all>
}
    d218:	bf00      	nop
    d21a:	3720      	adds	r7, #32
    d21c:	46bd      	mov	sp, r7
    d21e:	bd80      	pop	{r7, pc}

0000d220 <mp_arg_error_terse_mismatch>:

NORETURN void mp_arg_error_terse_mismatch(void) {
    d220:	b580      	push	{r7, lr}
    d222:	af00      	add	r7, sp, #0
    mp_raise_TypeError("argument num/types mismatch");
    d224:	4801      	ldr	r0, [pc, #4]	; (d22c <mp_arg_error_terse_mismatch+0xc>)
    d226:	f7ff fedb 	bl	cfe0 <mp_raise_TypeError>
    d22a:	bf00      	nop
    d22c:	0001f974 	.word	0x0001f974

0000d230 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
    d230:	b480      	push	{r7}
    d232:	b083      	sub	sp, #12
    d234:	af00      	add	r7, sp, #0
    d236:	6078      	str	r0, [r7, #4]
    d238:	687b      	ldr	r3, [r7, #4]
    d23a:	f003 0303 	and.w	r3, r3, #3
    d23e:	2b02      	cmp	r3, #2
    d240:	bf0c      	ite	eq
    d242:	2301      	moveq	r3, #1
    d244:	2300      	movne	r3, #0
    d246:	b2db      	uxtb	r3, r3
    d248:	4618      	mov	r0, r3
    d24a:	370c      	adds	r7, #12
    d24c:	46bd      	mov	sp, r7
    d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d252:	4770      	bx	lr

0000d254 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    d254:	b480      	push	{r7}
    d256:	b083      	sub	sp, #12
    d258:	af00      	add	r7, sp, #0
    d25a:	6078      	str	r0, [r7, #4]
    d25c:	687b      	ldr	r3, [r7, #4]
    d25e:	f003 0303 	and.w	r3, r3, #3
    d262:	2b00      	cmp	r3, #0
    d264:	bf0c      	ite	eq
    d266:	2301      	moveq	r3, #1
    d268:	2300      	movne	r3, #0
    d26a:	b2db      	uxtb	r3, r3
    d26c:	4618      	mov	r0, r3
    d26e:	370c      	adds	r7, #12
    d270:	46bd      	mov	sp, r7
    d272:	f85d 7b04 	ldr.w	r7, [sp], #4
    d276:	4770      	bx	lr

0000d278 <get_hash_alloc_greater_or_equal_to>:
    17, 23, 29, 37, 47, 59, 73, // *1.25
    97, 127, 167, 223, 293, 389, 521, 691, 919, 1223, 1627, 2161, // *1.33
    3229, 4831, 7243, 10861, 16273, 24407, 36607, 54907, // *1.5
};

STATIC size_t get_hash_alloc_greater_or_equal_to(size_t x) {
    d278:	b480      	push	{r7}
    d27a:	b085      	sub	sp, #20
    d27c:	af00      	add	r7, sp, #0
    d27e:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < MP_ARRAY_SIZE(hash_allocation_sizes); i++) {
    d280:	2300      	movs	r3, #0
    d282:	60fb      	str	r3, [r7, #12]
    d284:	e00f      	b.n	d2a6 <get_hash_alloc_greater_or_equal_to+0x2e>
        if (hash_allocation_sizes[i] >= x) {
    d286:	4a0f      	ldr	r2, [pc, #60]	; (d2c4 <get_hash_alloc_greater_or_equal_to+0x4c>)
    d288:	68fb      	ldr	r3, [r7, #12]
    d28a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d28e:	461a      	mov	r2, r3
    d290:	687b      	ldr	r3, [r7, #4]
    d292:	429a      	cmp	r2, r3
    d294:	d304      	bcc.n	d2a0 <get_hash_alloc_greater_or_equal_to+0x28>
            return hash_allocation_sizes[i];
    d296:	4a0b      	ldr	r2, [pc, #44]	; (d2c4 <get_hash_alloc_greater_or_equal_to+0x4c>)
    d298:	68fb      	ldr	r3, [r7, #12]
    d29a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    d29e:	e00b      	b.n	d2b8 <get_hash_alloc_greater_or_equal_to+0x40>
    for (size_t i = 0; i < MP_ARRAY_SIZE(hash_allocation_sizes); i++) {
    d2a0:	68fb      	ldr	r3, [r7, #12]
    d2a2:	3301      	adds	r3, #1
    d2a4:	60fb      	str	r3, [r7, #12]
    d2a6:	68fb      	ldr	r3, [r7, #12]
    d2a8:	2b21      	cmp	r3, #33	; 0x21
    d2aa:	d9ec      	bls.n	d286 <get_hash_alloc_greater_or_equal_to+0xe>
        }
    }
    // ran out of primes in the table!
    // return something sensible, at least make it odd
    return (x + x / 2) | 1;
    d2ac:	687b      	ldr	r3, [r7, #4]
    d2ae:	085a      	lsrs	r2, r3, #1
    d2b0:	687b      	ldr	r3, [r7, #4]
    d2b2:	4413      	add	r3, r2
    d2b4:	f043 0301 	orr.w	r3, r3, #1
}
    d2b8:	4618      	mov	r0, r3
    d2ba:	3714      	adds	r7, #20
    d2bc:	46bd      	mov	sp, r7
    d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
    d2c2:	4770      	bx	lr
    d2c4:	0001f9b0 	.word	0x0001f9b0

0000d2c8 <mp_map_init>:

/******************************************************************************/
/* map                                                                        */

void mp_map_init(mp_map_t *map, size_t n) {
    d2c8:	b580      	push	{r7, lr}
    d2ca:	b082      	sub	sp, #8
    d2cc:	af00      	add	r7, sp, #0
    d2ce:	6078      	str	r0, [r7, #4]
    d2d0:	6039      	str	r1, [r7, #0]
    if (n == 0) {
    d2d2:	683b      	ldr	r3, [r7, #0]
    d2d4:	2b00      	cmp	r3, #0
    d2d6:	d106      	bne.n	d2e6 <mp_map_init+0x1e>
        map->alloc = 0;
    d2d8:	687b      	ldr	r3, [r7, #4]
    d2da:	2200      	movs	r2, #0
    d2dc:	605a      	str	r2, [r3, #4]
        map->table = NULL;
    d2de:	687b      	ldr	r3, [r7, #4]
    d2e0:	2200      	movs	r2, #0
    d2e2:	609a      	str	r2, [r3, #8]
    d2e4:	e00b      	b.n	d2fe <mp_map_init+0x36>
    } else {
        map->alloc = n;
    d2e6:	687b      	ldr	r3, [r7, #4]
    d2e8:	683a      	ldr	r2, [r7, #0]
    d2ea:	605a      	str	r2, [r3, #4]
        map->table = m_new0(mp_map_elem_t, map->alloc);
    d2ec:	687b      	ldr	r3, [r7, #4]
    d2ee:	685b      	ldr	r3, [r3, #4]
    d2f0:	00db      	lsls	r3, r3, #3
    d2f2:	4618      	mov	r0, r3
    d2f4:	f7f3 f838 	bl	368 <m_malloc0>
    d2f8:	4602      	mov	r2, r0
    d2fa:	687b      	ldr	r3, [r7, #4]
    d2fc:	609a      	str	r2, [r3, #8]
    }
    map->used = 0;
    d2fe:	687a      	ldr	r2, [r7, #4]
    d300:	6813      	ldr	r3, [r2, #0]
    d302:	f36f 03df 	bfc	r3, #3, #29
    d306:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d308:	687a      	ldr	r2, [r7, #4]
    d30a:	7813      	ldrb	r3, [r2, #0]
    d30c:	f043 0301 	orr.w	r3, r3, #1
    d310:	7013      	strb	r3, [r2, #0]
    map->is_fixed = 0;
    d312:	687a      	ldr	r2, [r7, #4]
    d314:	7813      	ldrb	r3, [r2, #0]
    d316:	f36f 0341 	bfc	r3, #1, #1
    d31a:	7013      	strb	r3, [r2, #0]
    map->is_ordered = 0;
    d31c:	687a      	ldr	r2, [r7, #4]
    d31e:	7813      	ldrb	r3, [r2, #0]
    d320:	f36f 0382 	bfc	r3, #2, #1
    d324:	7013      	strb	r3, [r2, #0]
}
    d326:	bf00      	nop
    d328:	3708      	adds	r7, #8
    d32a:	46bd      	mov	sp, r7
    d32c:	bd80      	pop	{r7, pc}
    d32e:	bf00      	nop

0000d330 <mp_map_init_fixed_table>:

void mp_map_init_fixed_table(mp_map_t *map, size_t n, const mp_obj_t *table) {
    d330:	b480      	push	{r7}
    d332:	b085      	sub	sp, #20
    d334:	af00      	add	r7, sp, #0
    d336:	60f8      	str	r0, [r7, #12]
    d338:	60b9      	str	r1, [r7, #8]
    d33a:	607a      	str	r2, [r7, #4]
    map->alloc = n;
    d33c:	68fb      	ldr	r3, [r7, #12]
    d33e:	68ba      	ldr	r2, [r7, #8]
    d340:	605a      	str	r2, [r3, #4]
    map->used = n;
    d342:	68bb      	ldr	r3, [r7, #8]
    d344:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
    d348:	68fa      	ldr	r2, [r7, #12]
    d34a:	6813      	ldr	r3, [r2, #0]
    d34c:	f361 03df 	bfi	r3, r1, #3, #29
    d350:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d352:	68fa      	ldr	r2, [r7, #12]
    d354:	7813      	ldrb	r3, [r2, #0]
    d356:	f043 0301 	orr.w	r3, r3, #1
    d35a:	7013      	strb	r3, [r2, #0]
    map->is_fixed = 1;
    d35c:	68fa      	ldr	r2, [r7, #12]
    d35e:	7813      	ldrb	r3, [r2, #0]
    d360:	f043 0302 	orr.w	r3, r3, #2
    d364:	7013      	strb	r3, [r2, #0]
    map->is_ordered = 1;
    d366:	68fa      	ldr	r2, [r7, #12]
    d368:	7813      	ldrb	r3, [r2, #0]
    d36a:	f043 0304 	orr.w	r3, r3, #4
    d36e:	7013      	strb	r3, [r2, #0]
    map->table = (mp_map_elem_t*)table;
    d370:	68fb      	ldr	r3, [r7, #12]
    d372:	687a      	ldr	r2, [r7, #4]
    d374:	609a      	str	r2, [r3, #8]
}
    d376:	bf00      	nop
    d378:	3714      	adds	r7, #20
    d37a:	46bd      	mov	sp, r7
    d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d380:	4770      	bx	lr
    d382:	bf00      	nop

0000d384 <mp_map_deinit>:

// Differentiate from mp_map_clear() - semantics is different
void mp_map_deinit(mp_map_t *map) {
    d384:	b580      	push	{r7, lr}
    d386:	b082      	sub	sp, #8
    d388:	af00      	add	r7, sp, #0
    d38a:	6078      	str	r0, [r7, #4]
    if (!map->is_fixed) {
    d38c:	687b      	ldr	r3, [r7, #4]
    d38e:	781b      	ldrb	r3, [r3, #0]
    d390:	f003 0302 	and.w	r3, r3, #2
    d394:	b2db      	uxtb	r3, r3
    d396:	2b00      	cmp	r3, #0
    d398:	d104      	bne.n	d3a4 <mp_map_deinit+0x20>
        m_del(mp_map_elem_t, map->table, map->alloc);
    d39a:	687b      	ldr	r3, [r7, #4]
    d39c:	689b      	ldr	r3, [r3, #8]
    d39e:	4618      	mov	r0, r3
    d3a0:	f7f3 f81e 	bl	3e0 <m_free>
    }
    map->used = map->alloc = 0;
    d3a4:	687b      	ldr	r3, [r7, #4]
    d3a6:	2200      	movs	r2, #0
    d3a8:	605a      	str	r2, [r3, #4]
    d3aa:	687a      	ldr	r2, [r7, #4]
    d3ac:	6813      	ldr	r3, [r2, #0]
    d3ae:	f36f 03df 	bfc	r3, #3, #29
    d3b2:	6013      	str	r3, [r2, #0]
}
    d3b4:	bf00      	nop
    d3b6:	3708      	adds	r7, #8
    d3b8:	46bd      	mov	sp, r7
    d3ba:	bd80      	pop	{r7, pc}

0000d3bc <mp_map_clear>:

void mp_map_clear(mp_map_t *map) {
    d3bc:	b580      	push	{r7, lr}
    d3be:	b082      	sub	sp, #8
    d3c0:	af00      	add	r7, sp, #0
    d3c2:	6078      	str	r0, [r7, #4]
    if (!map->is_fixed) {
    d3c4:	687b      	ldr	r3, [r7, #4]
    d3c6:	781b      	ldrb	r3, [r3, #0]
    d3c8:	f003 0302 	and.w	r3, r3, #2
    d3cc:	b2db      	uxtb	r3, r3
    d3ce:	2b00      	cmp	r3, #0
    d3d0:	d104      	bne.n	d3dc <mp_map_clear+0x20>
        m_del(mp_map_elem_t, map->table, map->alloc);
    d3d2:	687b      	ldr	r3, [r7, #4]
    d3d4:	689b      	ldr	r3, [r3, #8]
    d3d6:	4618      	mov	r0, r3
    d3d8:	f7f3 f802 	bl	3e0 <m_free>
    }
    map->alloc = 0;
    d3dc:	687b      	ldr	r3, [r7, #4]
    d3de:	2200      	movs	r2, #0
    d3e0:	605a      	str	r2, [r3, #4]
    map->used = 0;
    d3e2:	687a      	ldr	r2, [r7, #4]
    d3e4:	6813      	ldr	r3, [r2, #0]
    d3e6:	f36f 03df 	bfc	r3, #3, #29
    d3ea:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d3ec:	687a      	ldr	r2, [r7, #4]
    d3ee:	7813      	ldrb	r3, [r2, #0]
    d3f0:	f043 0301 	orr.w	r3, r3, #1
    d3f4:	7013      	strb	r3, [r2, #0]
    map->is_fixed = 0;
    d3f6:	687a      	ldr	r2, [r7, #4]
    d3f8:	7813      	ldrb	r3, [r2, #0]
    d3fa:	f36f 0341 	bfc	r3, #1, #1
    d3fe:	7013      	strb	r3, [r2, #0]
    map->table = NULL;
    d400:	687b      	ldr	r3, [r7, #4]
    d402:	2200      	movs	r2, #0
    d404:	609a      	str	r2, [r3, #8]
}
    d406:	bf00      	nop
    d408:	3708      	adds	r7, #8
    d40a:	46bd      	mov	sp, r7
    d40c:	bd80      	pop	{r7, pc}
    d40e:	bf00      	nop

0000d410 <mp_map_rehash>:

STATIC void mp_map_rehash(mp_map_t *map) {
    d410:	b580      	push	{r7, lr}
    d412:	b088      	sub	sp, #32
    d414:	af00      	add	r7, sp, #0
    d416:	6078      	str	r0, [r7, #4]
    size_t old_alloc = map->alloc;
    d418:	687b      	ldr	r3, [r7, #4]
    d41a:	685b      	ldr	r3, [r3, #4]
    d41c:	61bb      	str	r3, [r7, #24]
    size_t new_alloc = get_hash_alloc_greater_or_equal_to(map->alloc + 1);
    d41e:	687b      	ldr	r3, [r7, #4]
    d420:	685b      	ldr	r3, [r3, #4]
    d422:	3301      	adds	r3, #1
    d424:	4618      	mov	r0, r3
    d426:	f7ff ff27 	bl	d278 <get_hash_alloc_greater_or_equal_to>
    d42a:	6178      	str	r0, [r7, #20]
    DEBUG_printf("mp_map_rehash(%p): " UINT_FMT " -> " UINT_FMT "\n", map, old_alloc, new_alloc);
    mp_map_elem_t *old_table = map->table;
    d42c:	687b      	ldr	r3, [r7, #4]
    d42e:	689b      	ldr	r3, [r3, #8]
    d430:	613b      	str	r3, [r7, #16]
    mp_map_elem_t *new_table = m_new0(mp_map_elem_t, new_alloc);
    d432:	697b      	ldr	r3, [r7, #20]
    d434:	00db      	lsls	r3, r3, #3
    d436:	4618      	mov	r0, r3
    d438:	f7f2 ff96 	bl	368 <m_malloc0>
    d43c:	60f8      	str	r0, [r7, #12]
    // If we reach this point, table resizing succeeded, now we can edit the old map.
    map->alloc = new_alloc;
    d43e:	687b      	ldr	r3, [r7, #4]
    d440:	697a      	ldr	r2, [r7, #20]
    d442:	605a      	str	r2, [r3, #4]
    map->used = 0;
    d444:	687a      	ldr	r2, [r7, #4]
    d446:	6813      	ldr	r3, [r2, #0]
    d448:	f36f 03df 	bfc	r3, #3, #29
    d44c:	6013      	str	r3, [r2, #0]
    map->all_keys_are_qstrs = 1;
    d44e:	687a      	ldr	r2, [r7, #4]
    d450:	7813      	ldrb	r3, [r2, #0]
    d452:	f043 0301 	orr.w	r3, r3, #1
    d456:	7013      	strb	r3, [r2, #0]
    map->table = new_table;
    d458:	687b      	ldr	r3, [r7, #4]
    d45a:	68fa      	ldr	r2, [r7, #12]
    d45c:	609a      	str	r2, [r3, #8]
    for (size_t i = 0; i < old_alloc; i++) {
    d45e:	2300      	movs	r3, #0
    d460:	61fb      	str	r3, [r7, #28]
    d462:	e021      	b.n	d4a8 <mp_map_rehash+0x98>
        if (old_table[i].key != MP_OBJ_NULL && old_table[i].key != MP_OBJ_SENTINEL) {
    d464:	69fb      	ldr	r3, [r7, #28]
    d466:	00db      	lsls	r3, r3, #3
    d468:	693a      	ldr	r2, [r7, #16]
    d46a:	4413      	add	r3, r2
    d46c:	681b      	ldr	r3, [r3, #0]
    d46e:	2b00      	cmp	r3, #0
    d470:	d017      	beq.n	d4a2 <mp_map_rehash+0x92>
    d472:	69fb      	ldr	r3, [r7, #28]
    d474:	00db      	lsls	r3, r3, #3
    d476:	693a      	ldr	r2, [r7, #16]
    d478:	4413      	add	r3, r2
    d47a:	681b      	ldr	r3, [r3, #0]
    d47c:	2b08      	cmp	r3, #8
    d47e:	d010      	beq.n	d4a2 <mp_map_rehash+0x92>
            mp_map_lookup(map, old_table[i].key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = old_table[i].value;
    d480:	69fb      	ldr	r3, [r7, #28]
    d482:	00db      	lsls	r3, r3, #3
    d484:	693a      	ldr	r2, [r7, #16]
    d486:	4413      	add	r3, r2
    d488:	681b      	ldr	r3, [r3, #0]
    d48a:	2201      	movs	r2, #1
    d48c:	4619      	mov	r1, r3
    d48e:	6878      	ldr	r0, [r7, #4]
    d490:	f000 f816 	bl	d4c0 <mp_map_lookup>
    d494:	4601      	mov	r1, r0
    d496:	69fb      	ldr	r3, [r7, #28]
    d498:	00db      	lsls	r3, r3, #3
    d49a:	693a      	ldr	r2, [r7, #16]
    d49c:	4413      	add	r3, r2
    d49e:	685b      	ldr	r3, [r3, #4]
    d4a0:	604b      	str	r3, [r1, #4]
    for (size_t i = 0; i < old_alloc; i++) {
    d4a2:	69fb      	ldr	r3, [r7, #28]
    d4a4:	3301      	adds	r3, #1
    d4a6:	61fb      	str	r3, [r7, #28]
    d4a8:	69fa      	ldr	r2, [r7, #28]
    d4aa:	69bb      	ldr	r3, [r7, #24]
    d4ac:	429a      	cmp	r2, r3
    d4ae:	d3d9      	bcc.n	d464 <mp_map_rehash+0x54>
        }
    }
    m_del(mp_map_elem_t, old_table, old_alloc);
    d4b0:	6938      	ldr	r0, [r7, #16]
    d4b2:	f7f2 ff95 	bl	3e0 <m_free>
}
    d4b6:	bf00      	nop
    d4b8:	3720      	adds	r7, #32
    d4ba:	46bd      	mov	sp, r7
    d4bc:	bd80      	pop	{r7, pc}
    d4be:	bf00      	nop

0000d4c0 <mp_map_lookup>:
//  - returns NULL if not found, else the slot it was found in with key,value non-null
// MP_MAP_LOOKUP_ADD_IF_NOT_FOUND behaviour:
//  - returns slot, with key non-null and value=MP_OBJ_NULL if it was added
// MP_MAP_LOOKUP_REMOVE_IF_FOUND behaviour:
//  - returns NULL if not found, else the slot if was found in with key null and value non-null
mp_map_elem_t *mp_map_lookup(mp_map_t *map, mp_obj_t index, mp_map_lookup_kind_t lookup_kind) {
    d4c0:	b580      	push	{r7, lr}
    d4c2:	b08c      	sub	sp, #48	; 0x30
    d4c4:	af00      	add	r7, sp, #0
    d4c6:	60f8      	str	r0, [r7, #12]
    d4c8:	60b9      	str	r1, [r7, #8]
    d4ca:	607a      	str	r2, [r7, #4]
    // If the map is a fixed array then we must only be called for a lookup
    assert(!map->is_fixed || lookup_kind == MP_MAP_LOOKUP);
    d4cc:	68fb      	ldr	r3, [r7, #12]
    d4ce:	781b      	ldrb	r3, [r3, #0]
    d4d0:	f003 0302 	and.w	r3, r3, #2
    d4d4:	b2db      	uxtb	r3, r3
    d4d6:	2b00      	cmp	r3, #0
    d4d8:	d008      	beq.n	d4ec <mp_map_lookup+0x2c>
    d4da:	687b      	ldr	r3, [r7, #4]
    d4dc:	2b00      	cmp	r3, #0
    d4de:	d005      	beq.n	d4ec <mp_map_lookup+0x2c>
    d4e0:	4ba3      	ldr	r3, [pc, #652]	; (d770 <mp_map_lookup+0x2b0>)
    d4e2:	4aa4      	ldr	r2, [pc, #656]	; (d774 <mp_map_lookup+0x2b4>)
    d4e4:	2194      	movs	r1, #148	; 0x94
    d4e6:	48a4      	ldr	r0, [pc, #656]	; (d778 <mp_map_lookup+0x2b8>)
    d4e8:	f00d ff40 	bl	1b36c <__assert_func>

    // Work out if we can compare just pointers
    bool compare_only_ptrs = map->all_keys_are_qstrs;
    d4ec:	68fb      	ldr	r3, [r7, #12]
    d4ee:	781b      	ldrb	r3, [r3, #0]
    d4f0:	f3c3 0300 	ubfx	r3, r3, #0, #1
    d4f4:	b2db      	uxtb	r3, r3
    d4f6:	2b00      	cmp	r3, #0
    d4f8:	bf14      	ite	ne
    d4fa:	2301      	movne	r3, #1
    d4fc:	2300      	moveq	r3, #0
    d4fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (compare_only_ptrs) {
    d502:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d506:	2b00      	cmp	r3, #0
    d508:	d019      	beq.n	d53e <mp_map_lookup+0x7e>
        if (MP_OBJ_IS_QSTR(index)) {
    d50a:	68b8      	ldr	r0, [r7, #8]
    d50c:	f7ff fe90 	bl	d230 <MP_OBJ_IS_QSTR>
    d510:	4603      	mov	r3, r0
    d512:	2b00      	cmp	r3, #0
    d514:	d113      	bne.n	d53e <mp_map_lookup+0x7e>
            // Index is a qstr, so can just do ptr comparison.
        } else if (MP_OBJ_IS_TYPE(index, &mp_type_str)) {
    d516:	68b8      	ldr	r0, [r7, #8]
    d518:	f7ff fe9c 	bl	d254 <MP_OBJ_IS_OBJ>
    d51c:	4603      	mov	r3, r0
    d51e:	2b00      	cmp	r3, #0
    d520:	d008      	beq.n	d534 <mp_map_lookup+0x74>
    d522:	68bb      	ldr	r3, [r7, #8]
    d524:	681b      	ldr	r3, [r3, #0]
    d526:	4a95      	ldr	r2, [pc, #596]	; (d77c <mp_map_lookup+0x2bc>)
    d528:	4293      	cmp	r3, r2
    d52a:	d103      	bne.n	d534 <mp_map_lookup+0x74>
            // Index is a non-interned string.
            // We can either intern the string, or force a full equality comparison.
            // We chose the latter, since interning costs time and potentially RAM,
            // and it won't necessarily benefit subsequent calls because these calls
            // most likely won't pass the newly-interned string.
            compare_only_ptrs = false;
    d52c:	2300      	movs	r3, #0
    d52e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    d532:	e004      	b.n	d53e <mp_map_lookup+0x7e>
        } else if (lookup_kind != MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d534:	687b      	ldr	r3, [r7, #4]
    d536:	2b01      	cmp	r3, #1
    d538:	d001      	beq.n	d53e <mp_map_lookup+0x7e>
            // If we are not adding, then we can return straight away a failed
            // lookup because we know that the index will never be found.
            return NULL;
    d53a:	2300      	movs	r3, #0
    d53c:	e130      	b.n	d7a0 <mp_map_lookup+0x2e0>
        }
    }

    // if the map is an ordered array then we must do a brute force linear search
    if (map->is_ordered) {
    d53e:	68fb      	ldr	r3, [r7, #12]
    d540:	781b      	ldrb	r3, [r3, #0]
    d542:	f003 0304 	and.w	r3, r3, #4
    d546:	b2db      	uxtb	r3, r3
    d548:	2b00      	cmp	r3, #0
    d54a:	d02c      	beq.n	d5a6 <mp_map_lookup+0xe6>
        for (mp_map_elem_t *elem = &map->table[0], *top = &map->table[map->used]; elem < top; elem++) {
    d54c:	68fb      	ldr	r3, [r7, #12]
    d54e:	689b      	ldr	r3, [r3, #8]
    d550:	62bb      	str	r3, [r7, #40]	; 0x28
    d552:	68fb      	ldr	r3, [r7, #12]
    d554:	689a      	ldr	r2, [r3, #8]
    d556:	68fb      	ldr	r3, [r7, #12]
    d558:	681b      	ldr	r3, [r3, #0]
    d55a:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d55e:	00db      	lsls	r3, r3, #3
    d560:	4413      	add	r3, r2
    d562:	617b      	str	r3, [r7, #20]
    d564:	e019      	b.n	d59a <mp_map_lookup+0xda>
            if (elem->key == index || (!compare_only_ptrs && mp_obj_equal(elem->key, index))) {
    d566:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d568:	681a      	ldr	r2, [r3, #0]
    d56a:	68bb      	ldr	r3, [r7, #8]
    d56c:	429a      	cmp	r2, r3
    d56e:	d00f      	beq.n	d590 <mp_map_lookup+0xd0>
    d570:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d574:	f083 0301 	eor.w	r3, r3, #1
    d578:	b2db      	uxtb	r3, r3
    d57a:	2b00      	cmp	r3, #0
    d57c:	d00a      	beq.n	d594 <mp_map_lookup+0xd4>
    d57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d580:	681b      	ldr	r3, [r3, #0]
    d582:	68b9      	ldr	r1, [r7, #8]
    d584:	4618      	mov	r0, r3
    d586:	f000 fa99 	bl	dabc <mp_obj_equal>
    d58a:	4603      	mov	r3, r0
    d58c:	2b00      	cmp	r3, #0
    d58e:	d001      	beq.n	d594 <mp_map_lookup+0xd4>
                    elem = &map->table[map->used];
                    elem->key = MP_OBJ_NULL;
                    elem->value = value;
                }
                #endif
                return elem;
    d590:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d592:	e105      	b.n	d7a0 <mp_map_lookup+0x2e0>
        for (mp_map_elem_t *elem = &map->table[0], *top = &map->table[map->used]; elem < top; elem++) {
    d594:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d596:	3308      	adds	r3, #8
    d598:	62bb      	str	r3, [r7, #40]	; 0x28
    d59a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d59c:	697b      	ldr	r3, [r7, #20]
    d59e:	429a      	cmp	r2, r3
    d5a0:	d3e1      	bcc.n	d566 <mp_map_lookup+0xa6>
        if (!MP_OBJ_IS_QSTR(index)) {
            map->all_keys_are_qstrs = 0;
        }
        return elem;
        #else
        return NULL;
    d5a2:	2300      	movs	r3, #0
    d5a4:	e0fc      	b.n	d7a0 <mp_map_lookup+0x2e0>
        #endif
    }

    // map is a hash table (not an ordered array), so do a hash lookup

    if (map->alloc == 0) {
    d5a6:	68fb      	ldr	r3, [r7, #12]
    d5a8:	685b      	ldr	r3, [r3, #4]
    d5aa:	2b00      	cmp	r3, #0
    d5ac:	d108      	bne.n	d5c0 <mp_map_lookup+0x100>
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d5ae:	687b      	ldr	r3, [r7, #4]
    d5b0:	2b01      	cmp	r3, #1
    d5b2:	d103      	bne.n	d5bc <mp_map_lookup+0xfc>
            mp_map_rehash(map);
    d5b4:	68f8      	ldr	r0, [r7, #12]
    d5b6:	f7ff ff2b 	bl	d410 <mp_map_rehash>
    d5ba:	e001      	b.n	d5c0 <mp_map_lookup+0x100>
        } else {
            return NULL;
    d5bc:	2300      	movs	r3, #0
    d5be:	e0ef      	b.n	d7a0 <mp_map_lookup+0x2e0>
        }
    }

    // get hash of index, with fast path for common case of qstr
    mp_uint_t hash;
    if (MP_OBJ_IS_QSTR(index)) {
    d5c0:	68b8      	ldr	r0, [r7, #8]
    d5c2:	f7ff fe35 	bl	d230 <MP_OBJ_IS_QSTR>
    d5c6:	4603      	mov	r3, r0
    d5c8:	2b00      	cmp	r3, #0
    d5ca:	d006      	beq.n	d5da <mp_map_lookup+0x11a>
        hash = qstr_hash(MP_OBJ_QSTR_VALUE(index));
    d5cc:	68bb      	ldr	r3, [r7, #8]
    d5ce:	089b      	lsrs	r3, r3, #2
    d5d0:	4618      	mov	r0, r3
    d5d2:	f7f3 fdf1 	bl	11b8 <qstr_hash>
    d5d6:	6278      	str	r0, [r7, #36]	; 0x24
    d5d8:	e006      	b.n	d5e8 <mp_map_lookup+0x128>
    } else {
        hash = MP_OBJ_SMALL_INT_VALUE(mp_unary_op(MP_UNARY_OP_HASH, index));
    d5da:	68b9      	ldr	r1, [r7, #8]
    d5dc:	2006      	movs	r0, #6
    d5de:	f7fe f8c1 	bl	b764 <mp_unary_op>
    d5e2:	4603      	mov	r3, r0
    d5e4:	105b      	asrs	r3, r3, #1
    d5e6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    size_t pos = hash % map->alloc;
    d5e8:	68fb      	ldr	r3, [r7, #12]
    d5ea:	685a      	ldr	r2, [r3, #4]
    d5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d5ee:	fbb3 f1f2 	udiv	r1, r3, r2
    d5f2:	fb02 f201 	mul.w	r2, r2, r1
    d5f6:	1a9b      	subs	r3, r3, r2
    d5f8:	623b      	str	r3, [r7, #32]
    size_t start_pos = pos;
    d5fa:	6a3b      	ldr	r3, [r7, #32]
    d5fc:	61fb      	str	r3, [r7, #28]
    mp_map_elem_t *avail_slot = NULL;
    d5fe:	2300      	movs	r3, #0
    d600:	61bb      	str	r3, [r7, #24]
    for (;;) {
        mp_map_elem_t *slot = &map->table[pos];
    d602:	68fb      	ldr	r3, [r7, #12]
    d604:	689a      	ldr	r2, [r3, #8]
    d606:	6a3b      	ldr	r3, [r7, #32]
    d608:	00db      	lsls	r3, r3, #3
    d60a:	4413      	add	r3, r2
    d60c:	613b      	str	r3, [r7, #16]
        if (slot->key == MP_OBJ_NULL) {
    d60e:	693b      	ldr	r3, [r7, #16]
    d610:	681b      	ldr	r3, [r3, #0]
    d612:	2b00      	cmp	r3, #0
    d614:	d12b      	bne.n	d66e <mp_map_lookup+0x1ae>
            // found NULL slot, so index is not in table
            if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d616:	687b      	ldr	r3, [r7, #4]
    d618:	2b01      	cmp	r3, #1
    d61a:	d126      	bne.n	d66a <mp_map_lookup+0x1aa>
                map->used += 1;
    d61c:	68fb      	ldr	r3, [r7, #12]
    d61e:	681b      	ldr	r3, [r3, #0]
    d620:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d624:	3301      	adds	r3, #1
    d626:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
    d62a:	68fa      	ldr	r2, [r7, #12]
    d62c:	6813      	ldr	r3, [r2, #0]
    d62e:	f361 03df 	bfi	r3, r1, #3, #29
    d632:	6013      	str	r3, [r2, #0]
                if (avail_slot == NULL) {
    d634:	69bb      	ldr	r3, [r7, #24]
    d636:	2b00      	cmp	r3, #0
    d638:	d101      	bne.n	d63e <mp_map_lookup+0x17e>
                    avail_slot = slot;
    d63a:	693b      	ldr	r3, [r7, #16]
    d63c:	61bb      	str	r3, [r7, #24]
                }
                avail_slot->key = index;
    d63e:	69bb      	ldr	r3, [r7, #24]
    d640:	68ba      	ldr	r2, [r7, #8]
    d642:	601a      	str	r2, [r3, #0]
                avail_slot->value = MP_OBJ_NULL;
    d644:	69bb      	ldr	r3, [r7, #24]
    d646:	2200      	movs	r2, #0
    d648:	605a      	str	r2, [r3, #4]
                if (!MP_OBJ_IS_QSTR(index)) {
    d64a:	68b8      	ldr	r0, [r7, #8]
    d64c:	f7ff fdf0 	bl	d230 <MP_OBJ_IS_QSTR>
    d650:	4603      	mov	r3, r0
    d652:	f083 0301 	eor.w	r3, r3, #1
    d656:	b2db      	uxtb	r3, r3
    d658:	2b00      	cmp	r3, #0
    d65a:	d004      	beq.n	d666 <mp_map_lookup+0x1a6>
                    map->all_keys_are_qstrs = 0;
    d65c:	68fa      	ldr	r2, [r7, #12]
    d65e:	7813      	ldrb	r3, [r2, #0]
    d660:	f36f 0300 	bfc	r3, #0, #1
    d664:	7013      	strb	r3, [r2, #0]
                }
                return avail_slot;
    d666:	69bb      	ldr	r3, [r7, #24]
    d668:	e09a      	b.n	d7a0 <mp_map_lookup+0x2e0>
            } else {
                return NULL;
    d66a:	2300      	movs	r3, #0
    d66c:	e098      	b.n	d7a0 <mp_map_lookup+0x2e0>
            }
        } else if (slot->key == MP_OBJ_SENTINEL) {
    d66e:	693b      	ldr	r3, [r7, #16]
    d670:	681b      	ldr	r3, [r3, #0]
    d672:	2b08      	cmp	r3, #8
    d674:	d105      	bne.n	d682 <mp_map_lookup+0x1c2>
            // found deleted slot, remember for later
            if (avail_slot == NULL) {
    d676:	69bb      	ldr	r3, [r7, #24]
    d678:	2b00      	cmp	r3, #0
    d67a:	d141      	bne.n	d700 <mp_map_lookup+0x240>
                avail_slot = slot;
    d67c:	693b      	ldr	r3, [r7, #16]
    d67e:	61bb      	str	r3, [r7, #24]
    d680:	e03e      	b.n	d700 <mp_map_lookup+0x240>
            }
        } else if (slot->key == index || (!compare_only_ptrs && mp_obj_equal(slot->key, index))) {
    d682:	693b      	ldr	r3, [r7, #16]
    d684:	681a      	ldr	r2, [r3, #0]
    d686:	68bb      	ldr	r3, [r7, #8]
    d688:	429a      	cmp	r2, r3
    d68a:	d00f      	beq.n	d6ac <mp_map_lookup+0x1ec>
    d68c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d690:	f083 0301 	eor.w	r3, r3, #1
    d694:	b2db      	uxtb	r3, r3
    d696:	2b00      	cmp	r3, #0
    d698:	d032      	beq.n	d700 <mp_map_lookup+0x240>
    d69a:	693b      	ldr	r3, [r7, #16]
    d69c:	681b      	ldr	r3, [r3, #0]
    d69e:	68b9      	ldr	r1, [r7, #8]
    d6a0:	4618      	mov	r0, r3
    d6a2:	f000 fa0b 	bl	dabc <mp_obj_equal>
    d6a6:	4603      	mov	r3, r0
    d6a8:	2b00      	cmp	r3, #0
    d6aa:	d029      	beq.n	d700 <mp_map_lookup+0x240>
            // found index
            // Note: CPython does not replace the index; try x={True:'true'};x[1]='one';x
            if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    d6ac:	687b      	ldr	r3, [r7, #4]
    d6ae:	2b02      	cmp	r3, #2
    d6b0:	d124      	bne.n	d6fc <mp_map_lookup+0x23c>
                // delete element in this slot
                map->used--;
    d6b2:	68fb      	ldr	r3, [r7, #12]
    d6b4:	681b      	ldr	r3, [r3, #0]
    d6b6:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d6ba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    d6be:	3b01      	subs	r3, #1
    d6c0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    d6c4:	68f9      	ldr	r1, [r7, #12]
    d6c6:	680a      	ldr	r2, [r1, #0]
    d6c8:	f363 02df 	bfi	r2, r3, #3, #29
    d6cc:	600a      	str	r2, [r1, #0]
                if (map->table[(pos + 1) % map->alloc].key == MP_OBJ_NULL) {
    d6ce:	68fb      	ldr	r3, [r7, #12]
    d6d0:	6899      	ldr	r1, [r3, #8]
    d6d2:	6a3b      	ldr	r3, [r7, #32]
    d6d4:	3301      	adds	r3, #1
    d6d6:	68fa      	ldr	r2, [r7, #12]
    d6d8:	6852      	ldr	r2, [r2, #4]
    d6da:	fbb3 f0f2 	udiv	r0, r3, r2
    d6de:	fb02 f200 	mul.w	r2, r2, r0
    d6e2:	1a9b      	subs	r3, r3, r2
    d6e4:	00db      	lsls	r3, r3, #3
    d6e6:	440b      	add	r3, r1
    d6e8:	681b      	ldr	r3, [r3, #0]
    d6ea:	2b00      	cmp	r3, #0
    d6ec:	d103      	bne.n	d6f6 <mp_map_lookup+0x236>
                    // optimisation if next slot is empty
                    slot->key = MP_OBJ_NULL;
    d6ee:	693b      	ldr	r3, [r7, #16]
    d6f0:	2200      	movs	r2, #0
    d6f2:	601a      	str	r2, [r3, #0]
    d6f4:	e002      	b.n	d6fc <mp_map_lookup+0x23c>
                } else {
                    slot->key = MP_OBJ_SENTINEL;
    d6f6:	693b      	ldr	r3, [r7, #16]
    d6f8:	2208      	movs	r2, #8
    d6fa:	601a      	str	r2, [r3, #0]
                }
                // keep slot->value so that caller can access it if needed
            }
            return slot;
    d6fc:	693b      	ldr	r3, [r7, #16]
    d6fe:	e04f      	b.n	d7a0 <mp_map_lookup+0x2e0>
        }

        // not yet found, keep searching in this table
        pos = (pos + 1) % map->alloc;
    d700:	6a3b      	ldr	r3, [r7, #32]
    d702:	3301      	adds	r3, #1
    d704:	68fa      	ldr	r2, [r7, #12]
    d706:	6852      	ldr	r2, [r2, #4]
    d708:	fbb3 f1f2 	udiv	r1, r3, r2
    d70c:	fb02 f201 	mul.w	r2, r2, r1
    d710:	1a9b      	subs	r3, r3, r2
    d712:	623b      	str	r3, [r7, #32]

        if (pos == start_pos) {
    d714:	6a3a      	ldr	r2, [r7, #32]
    d716:	69fb      	ldr	r3, [r7, #28]
    d718:	429a      	cmp	r2, r3
    d71a:	f47f af72 	bne.w	d602 <mp_map_lookup+0x142>
            // search got back to starting position, so index is not in table
            if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    d71e:	687b      	ldr	r3, [r7, #4]
    d720:	2b01      	cmp	r3, #1
    d722:	d13c      	bne.n	d79e <mp_map_lookup+0x2de>
                if (avail_slot != NULL) {
    d724:	69bb      	ldr	r3, [r7, #24]
    d726:	2b00      	cmp	r3, #0
    d728:	d02a      	beq.n	d780 <mp_map_lookup+0x2c0>
                    // there was an available slot, so use that
                    map->used++;
    d72a:	68fb      	ldr	r3, [r7, #12]
    d72c:	681b      	ldr	r3, [r3, #0]
    d72e:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    d732:	1c5a      	adds	r2, r3, #1
    d734:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    d738:	68f9      	ldr	r1, [r7, #12]
    d73a:	680b      	ldr	r3, [r1, #0]
    d73c:	f362 03df 	bfi	r3, r2, #3, #29
    d740:	600b      	str	r3, [r1, #0]
                    avail_slot->key = index;
    d742:	69bb      	ldr	r3, [r7, #24]
    d744:	68ba      	ldr	r2, [r7, #8]
    d746:	601a      	str	r2, [r3, #0]
                    avail_slot->value = MP_OBJ_NULL;
    d748:	69bb      	ldr	r3, [r7, #24]
    d74a:	2200      	movs	r2, #0
    d74c:	605a      	str	r2, [r3, #4]
                    if (!MP_OBJ_IS_QSTR(index)) {
    d74e:	68b8      	ldr	r0, [r7, #8]
    d750:	f7ff fd6e 	bl	d230 <MP_OBJ_IS_QSTR>
    d754:	4603      	mov	r3, r0
    d756:	f083 0301 	eor.w	r3, r3, #1
    d75a:	b2db      	uxtb	r3, r3
    d75c:	2b00      	cmp	r3, #0
    d75e:	d004      	beq.n	d76a <mp_map_lookup+0x2aa>
                        map->all_keys_are_qstrs = 0;
    d760:	68fa      	ldr	r2, [r7, #12]
    d762:	7813      	ldrb	r3, [r2, #0]
    d764:	f36f 0300 	bfc	r3, #0, #1
    d768:	7013      	strb	r3, [r2, #0]
                    }
                    return avail_slot;
    d76a:	69bb      	ldr	r3, [r7, #24]
    d76c:	e018      	b.n	d7a0 <mp_map_lookup+0x2e0>
    d76e:	bf00      	nop
    d770:	0001f9f4 	.word	0x0001f9f4
    d774:	0001fa34 	.word	0x0001fa34
    d778:	0001fa24 	.word	0x0001fa24
    d77c:	00021be4 	.word	0x00021be4
                } else {
                    // not enough room in table, rehash it
                    mp_map_rehash(map);
    d780:	68f8      	ldr	r0, [r7, #12]
    d782:	f7ff fe45 	bl	d410 <mp_map_rehash>
                    // restart the search for the new element
                    start_pos = pos = hash % map->alloc;
    d786:	68fb      	ldr	r3, [r7, #12]
    d788:	685a      	ldr	r2, [r3, #4]
    d78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d78c:	fbb3 f1f2 	udiv	r1, r3, r2
    d790:	fb02 f201 	mul.w	r2, r2, r1
    d794:	1a9b      	subs	r3, r3, r2
    d796:	623b      	str	r3, [r7, #32]
    d798:	6a3b      	ldr	r3, [r7, #32]
    d79a:	61fb      	str	r3, [r7, #28]
    d79c:	e731      	b.n	d602 <mp_map_lookup+0x142>
                }
            } else {
                return NULL;
    d79e:	2300      	movs	r3, #0
            }
        }
    }
}
    d7a0:	4618      	mov	r0, r3
    d7a2:	3730      	adds	r7, #48	; 0x30
    d7a4:	46bd      	mov	sp, r7
    d7a6:	bd80      	pop	{r7, pc}

0000d7a8 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
    d7a8:	b480      	push	{r7}
    d7aa:	b083      	sub	sp, #12
    d7ac:	af00      	add	r7, sp, #0
    d7ae:	6078      	str	r0, [r7, #4]
    d7b0:	687b      	ldr	r3, [r7, #4]
    d7b2:	f003 0301 	and.w	r3, r3, #1
    d7b6:	2b00      	cmp	r3, #0
    d7b8:	bf14      	ite	ne
    d7ba:	2301      	movne	r3, #1
    d7bc:	2300      	moveq	r3, #0
    d7be:	b2db      	uxtb	r3, r3
    d7c0:	4618      	mov	r0, r3
    d7c2:	370c      	adds	r7, #12
    d7c4:	46bd      	mov	sp, r7
    d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    d7ca:	4770      	bx	lr

0000d7cc <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
    d7cc:	b480      	push	{r7}
    d7ce:	b083      	sub	sp, #12
    d7d0:	af00      	add	r7, sp, #0
    d7d2:	6078      	str	r0, [r7, #4]
    d7d4:	687b      	ldr	r3, [r7, #4]
    d7d6:	f003 0303 	and.w	r3, r3, #3
    d7da:	2b02      	cmp	r3, #2
    d7dc:	bf0c      	ite	eq
    d7de:	2301      	moveq	r3, #1
    d7e0:	2300      	movne	r3, #0
    d7e2:	b2db      	uxtb	r3, r3
    d7e4:	4618      	mov	r0, r3
    d7e6:	370c      	adds	r7, #12
    d7e8:	46bd      	mov	sp, r7
    d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    d7ee:	4770      	bx	lr

0000d7f0 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    d7f0:	b480      	push	{r7}
    d7f2:	b083      	sub	sp, #12
    d7f4:	af00      	add	r7, sp, #0
    d7f6:	6078      	str	r0, [r7, #4]
    d7f8:	687b      	ldr	r3, [r7, #4]
    d7fa:	f003 0303 	and.w	r3, r3, #3
    d7fe:	2b00      	cmp	r3, #0
    d800:	bf0c      	ite	eq
    d802:	2301      	moveq	r3, #1
    d804:	2300      	movne	r3, #0
    d806:	b2db      	uxtb	r3, r3
    d808:	4618      	mov	r0, r3
    d80a:	370c      	adds	r7, #12
    d80c:	46bd      	mov	sp, r7
    d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
    d812:	4770      	bx	lr

0000d814 <mp_obj_get_type>:
#include "py/objstr.h"
#include "py/runtime.h"
#include "py/stackctrl.h"
#include "py/stream.h" // for mp_obj_print

mp_obj_type_t *mp_obj_get_type(mp_const_obj_t o_in) {
    d814:	b580      	push	{r7, lr}
    d816:	b084      	sub	sp, #16
    d818:	af00      	add	r7, sp, #0
    d81a:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_SMALL_INT(o_in)) {
    d81c:	6878      	ldr	r0, [r7, #4]
    d81e:	f7ff ffc3 	bl	d7a8 <MP_OBJ_IS_SMALL_INT>
    d822:	4603      	mov	r3, r0
    d824:	2b00      	cmp	r3, #0
    d826:	d001      	beq.n	d82c <mp_obj_get_type+0x18>
        return (mp_obj_type_t*)&mp_type_int;
    d828:	4b08      	ldr	r3, [pc, #32]	; (d84c <mp_obj_get_type+0x38>)
    d82a:	e00b      	b.n	d844 <mp_obj_get_type+0x30>
    } else if (MP_OBJ_IS_QSTR(o_in)) {
    d82c:	6878      	ldr	r0, [r7, #4]
    d82e:	f7ff ffcd 	bl	d7cc <MP_OBJ_IS_QSTR>
    d832:	4603      	mov	r3, r0
    d834:	2b00      	cmp	r3, #0
    d836:	d001      	beq.n	d83c <mp_obj_get_type+0x28>
        return (mp_obj_type_t*)&mp_type_str;
    d838:	4b05      	ldr	r3, [pc, #20]	; (d850 <mp_obj_get_type+0x3c>)
    d83a:	e003      	b.n	d844 <mp_obj_get_type+0x30>
    #if MICROPY_PY_BUILTINS_FLOAT
    } else if (mp_obj_is_float(o_in)) {
        return (mp_obj_type_t*)&mp_type_float;
    #endif
    } else {
        const mp_obj_base_t *o = MP_OBJ_TO_PTR(o_in);
    d83c:	687b      	ldr	r3, [r7, #4]
    d83e:	60fb      	str	r3, [r7, #12]
        return (mp_obj_type_t*)o->type;
    d840:	68fb      	ldr	r3, [r7, #12]
    d842:	681b      	ldr	r3, [r3, #0]
    }
}
    d844:	4618      	mov	r0, r3
    d846:	3710      	adds	r7, #16
    d848:	46bd      	mov	sp, r7
    d84a:	bd80      	pop	{r7, pc}
    d84c:	00020f90 	.word	0x00020f90
    d850:	00021be4 	.word	0x00021be4

0000d854 <mp_obj_get_type_str>:

const char *mp_obj_get_type_str(mp_const_obj_t o_in) {
    d854:	b580      	push	{r7, lr}
    d856:	b082      	sub	sp, #8
    d858:	af00      	add	r7, sp, #0
    d85a:	6078      	str	r0, [r7, #4]
    return qstr_str(mp_obj_get_type(o_in)->name);
    d85c:	6878      	ldr	r0, [r7, #4]
    d85e:	f7ff ffd9 	bl	d814 <mp_obj_get_type>
    d862:	4603      	mov	r3, r0
    d864:	685b      	ldr	r3, [r3, #4]
    d866:	4618      	mov	r0, r3
    d868:	f7f3 fcc4 	bl	11f4 <qstr_str>
    d86c:	4603      	mov	r3, r0
}
    d86e:	4618      	mov	r0, r3
    d870:	3708      	adds	r7, #8
    d872:	46bd      	mov	sp, r7
    d874:	bd80      	pop	{r7, pc}
    d876:	bf00      	nop

0000d878 <mp_obj_print_helper>:

void mp_obj_print_helper(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
    d878:	b580      	push	{r7, lr}
    d87a:	b086      	sub	sp, #24
    d87c:	af00      	add	r7, sp, #0
    d87e:	60f8      	str	r0, [r7, #12]
    d880:	60b9      	str	r1, [r7, #8]
    d882:	607a      	str	r2, [r7, #4]
    // There can be data structures nested too deep, or just recursive
    MP_STACK_CHECK();
#ifndef NDEBUG
    if (o_in == MP_OBJ_NULL) {
    d884:	68bb      	ldr	r3, [r7, #8]
    d886:	2b00      	cmp	r3, #0
    d888:	d104      	bne.n	d894 <mp_obj_print_helper+0x1c>
        mp_print_str(print, "(nil)");
    d88a:	490f      	ldr	r1, [pc, #60]	; (d8c8 <mp_obj_print_helper+0x50>)
    d88c:	68f8      	ldr	r0, [r7, #12]
    d88e:	f7f3 fff5 	bl	187c <mp_print_str>
        return;
    d892:	e015      	b.n	d8c0 <mp_obj_print_helper+0x48>
    }
#endif
    mp_obj_type_t *type = mp_obj_get_type(o_in);
    d894:	68b8      	ldr	r0, [r7, #8]
    d896:	f7ff ffbd 	bl	d814 <mp_obj_get_type>
    d89a:	6178      	str	r0, [r7, #20]
    if (type->print != NULL) {
    d89c:	697b      	ldr	r3, [r7, #20]
    d89e:	689b      	ldr	r3, [r3, #8]
    d8a0:	2b00      	cmp	r3, #0
    d8a2:	d006      	beq.n	d8b2 <mp_obj_print_helper+0x3a>
        type->print((mp_print_t*)print, o_in, kind);
    d8a4:	697b      	ldr	r3, [r7, #20]
    d8a6:	689b      	ldr	r3, [r3, #8]
    d8a8:	687a      	ldr	r2, [r7, #4]
    d8aa:	68b9      	ldr	r1, [r7, #8]
    d8ac:	68f8      	ldr	r0, [r7, #12]
    d8ae:	4798      	blx	r3
    d8b0:	e006      	b.n	d8c0 <mp_obj_print_helper+0x48>
    } else {
        mp_printf(print, "<%q>", type->name);
    d8b2:	697b      	ldr	r3, [r7, #20]
    d8b4:	685b      	ldr	r3, [r3, #4]
    d8b6:	461a      	mov	r2, r3
    d8b8:	4904      	ldr	r1, [pc, #16]	; (d8cc <mp_obj_print_helper+0x54>)
    d8ba:	68f8      	ldr	r0, [r7, #12]
    d8bc:	f7f4 faf2 	bl	1ea4 <mp_printf>
    }
}
    d8c0:	3718      	adds	r7, #24
    d8c2:	46bd      	mov	sp, r7
    d8c4:	bd80      	pop	{r7, pc}
    d8c6:	bf00      	nop
    d8c8:	0001fa44 	.word	0x0001fa44
    d8cc:	0001fa4c 	.word	0x0001fa4c

0000d8d0 <mp_obj_print>:

void mp_obj_print(mp_obj_t o_in, mp_print_kind_t kind) {
    d8d0:	b580      	push	{r7, lr}
    d8d2:	b082      	sub	sp, #8
    d8d4:	af00      	add	r7, sp, #0
    d8d6:	6078      	str	r0, [r7, #4]
    d8d8:	6039      	str	r1, [r7, #0]
    mp_obj_print_helper(MP_PYTHON_PRINTER, o_in, kind);
    d8da:	683a      	ldr	r2, [r7, #0]
    d8dc:	6879      	ldr	r1, [r7, #4]
    d8de:	4803      	ldr	r0, [pc, #12]	; (d8ec <mp_obj_print+0x1c>)
    d8e0:	f7ff ffca 	bl	d878 <mp_obj_print_helper>
}
    d8e4:	bf00      	nop
    d8e6:	3708      	adds	r7, #8
    d8e8:	46bd      	mov	sp, r7
    d8ea:	bd80      	pop	{r7, pc}
    d8ec:	0001d82c 	.word	0x0001d82c

0000d8f0 <mp_obj_print_exception>:

// helper function to print an exception with traceback
void mp_obj_print_exception(const mp_print_t *print, mp_obj_t exc) {
    d8f0:	b580      	push	{r7, lr}
    d8f2:	b086      	sub	sp, #24
    d8f4:	af00      	add	r7, sp, #0
    d8f6:	6078      	str	r0, [r7, #4]
    d8f8:	6039      	str	r1, [r7, #0]
    if (mp_obj_is_exception_instance(exc)) {
    d8fa:	6838      	ldr	r0, [r7, #0]
    d8fc:	f001 ff3a 	bl	f774 <mp_obj_is_exception_instance>
    d900:	4603      	mov	r3, r0
    d902:	2b00      	cmp	r3, #0
    d904:	d047      	beq.n	d996 <mp_obj_print_exception+0xa6>
        size_t n, *values;
        mp_obj_exception_get_traceback(exc, &n, &values);
    d906:	f107 0208 	add.w	r2, r7, #8
    d90a:	f107 030c 	add.w	r3, r7, #12
    d90e:	4619      	mov	r1, r3
    d910:	6838      	ldr	r0, [r7, #0]
    d912:	f002 f801 	bl	f918 <mp_obj_exception_get_traceback>
        if (n > 0) {
    d916:	68fb      	ldr	r3, [r7, #12]
    d918:	2b00      	cmp	r3, #0
    d91a:	d03c      	beq.n	d996 <mp_obj_print_exception+0xa6>
            assert(n % 3 == 0);
    d91c:	68f9      	ldr	r1, [r7, #12]
    d91e:	4b24      	ldr	r3, [pc, #144]	; (d9b0 <mp_obj_print_exception+0xc0>)
    d920:	fba3 2301 	umull	r2, r3, r3, r1
    d924:	085a      	lsrs	r2, r3, #1
    d926:	4613      	mov	r3, r2
    d928:	005b      	lsls	r3, r3, #1
    d92a:	4413      	add	r3, r2
    d92c:	1aca      	subs	r2, r1, r3
    d92e:	2a00      	cmp	r2, #0
    d930:	d005      	beq.n	d93e <mp_obj_print_exception+0x4e>
    d932:	4b20      	ldr	r3, [pc, #128]	; (d9b4 <mp_obj_print_exception+0xc4>)
    d934:	4a20      	ldr	r2, [pc, #128]	; (d9b8 <mp_obj_print_exception+0xc8>)
    d936:	2156      	movs	r1, #86	; 0x56
    d938:	4820      	ldr	r0, [pc, #128]	; (d9bc <mp_obj_print_exception+0xcc>)
    d93a:	f00d fd17 	bl	1b36c <__assert_func>
            mp_print_str(print, "Traceback (most recent call last):\n");
    d93e:	4920      	ldr	r1, [pc, #128]	; (d9c0 <mp_obj_print_exception+0xd0>)
    d940:	6878      	ldr	r0, [r7, #4]
    d942:	f7f3 ff9b 	bl	187c <mp_print_str>
            for (int i = n - 3; i >= 0; i -= 3) {
    d946:	68fb      	ldr	r3, [r7, #12]
    d948:	3b03      	subs	r3, #3
    d94a:	617b      	str	r3, [r7, #20]
    d94c:	e020      	b.n	d990 <mp_obj_print_exception+0xa0>
#if MICROPY_ENABLE_SOURCE_LINE
                mp_printf(print, "  File \"%q\", line %d", values[i], (int)values[i + 1]);
#else
                mp_printf(print, "  File \"%q\"", values[i]);
    d94e:	68ba      	ldr	r2, [r7, #8]
    d950:	697b      	ldr	r3, [r7, #20]
    d952:	009b      	lsls	r3, r3, #2
    d954:	4413      	add	r3, r2
    d956:	681b      	ldr	r3, [r3, #0]
    d958:	461a      	mov	r2, r3
    d95a:	491a      	ldr	r1, [pc, #104]	; (d9c4 <mp_obj_print_exception+0xd4>)
    d95c:	6878      	ldr	r0, [r7, #4]
    d95e:	f7f4 faa1 	bl	1ea4 <mp_printf>
#endif
                // the block name can be NULL if it's unknown
                qstr block = values[i + 2];
    d962:	68ba      	ldr	r2, [r7, #8]
    d964:	697b      	ldr	r3, [r7, #20]
    d966:	3302      	adds	r3, #2
    d968:	009b      	lsls	r3, r3, #2
    d96a:	4413      	add	r3, r2
    d96c:	681b      	ldr	r3, [r3, #0]
    d96e:	613b      	str	r3, [r7, #16]
                if (block == MP_QSTR_NULL) {
    d970:	693b      	ldr	r3, [r7, #16]
    d972:	2b00      	cmp	r3, #0
    d974:	d104      	bne.n	d980 <mp_obj_print_exception+0x90>
                    mp_print_str(print, "\n");
    d976:	4914      	ldr	r1, [pc, #80]	; (d9c8 <mp_obj_print_exception+0xd8>)
    d978:	6878      	ldr	r0, [r7, #4]
    d97a:	f7f3 ff7f 	bl	187c <mp_print_str>
    d97e:	e004      	b.n	d98a <mp_obj_print_exception+0x9a>
                } else {
                    mp_printf(print, ", in %q\n", block);
    d980:	693a      	ldr	r2, [r7, #16]
    d982:	4912      	ldr	r1, [pc, #72]	; (d9cc <mp_obj_print_exception+0xdc>)
    d984:	6878      	ldr	r0, [r7, #4]
    d986:	f7f4 fa8d 	bl	1ea4 <mp_printf>
            for (int i = n - 3; i >= 0; i -= 3) {
    d98a:	697b      	ldr	r3, [r7, #20]
    d98c:	3b03      	subs	r3, #3
    d98e:	617b      	str	r3, [r7, #20]
    d990:	697b      	ldr	r3, [r7, #20]
    d992:	2b00      	cmp	r3, #0
    d994:	dadb      	bge.n	d94e <mp_obj_print_exception+0x5e>
                }
            }
        }
    }
    mp_obj_print_helper(print, exc, PRINT_EXC);
    d996:	2202      	movs	r2, #2
    d998:	6839      	ldr	r1, [r7, #0]
    d99a:	6878      	ldr	r0, [r7, #4]
    d99c:	f7ff ff6c 	bl	d878 <mp_obj_print_helper>
    mp_print_str(print, "\n");
    d9a0:	4909      	ldr	r1, [pc, #36]	; (d9c8 <mp_obj_print_exception+0xd8>)
    d9a2:	6878      	ldr	r0, [r7, #4]
    d9a4:	f7f3 ff6a 	bl	187c <mp_print_str>
}
    d9a8:	bf00      	nop
    d9aa:	3718      	adds	r7, #24
    d9ac:	46bd      	mov	sp, r7
    d9ae:	bd80      	pop	{r7, pc}
    d9b0:	aaaaaaab 	.word	0xaaaaaaab
    d9b4:	0001fa54 	.word	0x0001fa54
    d9b8:	0001fbd8 	.word	0x0001fbd8
    d9bc:	0001fa60 	.word	0x0001fa60
    d9c0:	0001fa70 	.word	0x0001fa70
    d9c4:	0001fa94 	.word	0x0001fa94
    d9c8:	0001faa0 	.word	0x0001faa0
    d9cc:	0001faa4 	.word	0x0001faa4

0000d9d0 <mp_obj_is_true>:

bool mp_obj_is_true(mp_obj_t arg) {
    d9d0:	b580      	push	{r7, lr}
    d9d2:	b086      	sub	sp, #24
    d9d4:	af00      	add	r7, sp, #0
    d9d6:	6078      	str	r0, [r7, #4]
    if (arg == mp_const_false) {
    d9d8:	687b      	ldr	r3, [r7, #4]
    d9da:	4a25      	ldr	r2, [pc, #148]	; (da70 <mp_obj_is_true+0xa0>)
    d9dc:	4293      	cmp	r3, r2
    d9de:	d101      	bne.n	d9e4 <mp_obj_is_true+0x14>
        return 0;
    d9e0:	2300      	movs	r3, #0
    d9e2:	e041      	b.n	da68 <mp_obj_is_true+0x98>
    } else if (arg == mp_const_true) {
    d9e4:	687b      	ldr	r3, [r7, #4]
    d9e6:	4a23      	ldr	r2, [pc, #140]	; (da74 <mp_obj_is_true+0xa4>)
    d9e8:	4293      	cmp	r3, r2
    d9ea:	d101      	bne.n	d9f0 <mp_obj_is_true+0x20>
        return 1;
    d9ec:	2301      	movs	r3, #1
    d9ee:	e03b      	b.n	da68 <mp_obj_is_true+0x98>
    } else if (arg == mp_const_none) {
    d9f0:	687b      	ldr	r3, [r7, #4]
    d9f2:	4a21      	ldr	r2, [pc, #132]	; (da78 <mp_obj_is_true+0xa8>)
    d9f4:	4293      	cmp	r3, r2
    d9f6:	d101      	bne.n	d9fc <mp_obj_is_true+0x2c>
        return 0;
    d9f8:	2300      	movs	r3, #0
    d9fa:	e035      	b.n	da68 <mp_obj_is_true+0x98>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    d9fc:	6878      	ldr	r0, [r7, #4]
    d9fe:	f7ff fed3 	bl	d7a8 <MP_OBJ_IS_SMALL_INT>
    da02:	4603      	mov	r3, r0
    da04:	2b00      	cmp	r3, #0
    da06:	d007      	beq.n	da18 <mp_obj_is_true+0x48>
        if (MP_OBJ_SMALL_INT_VALUE(arg) == 0) {
    da08:	687b      	ldr	r3, [r7, #4]
    da0a:	105b      	asrs	r3, r3, #1
    da0c:	2b00      	cmp	r3, #0
    da0e:	d101      	bne.n	da14 <mp_obj_is_true+0x44>
            return 0;
    da10:	2300      	movs	r3, #0
    da12:	e029      	b.n	da68 <mp_obj_is_true+0x98>
        } else {
            return 1;
    da14:	2301      	movs	r3, #1
    da16:	e027      	b.n	da68 <mp_obj_is_true+0x98>
        }
    } else {
        mp_obj_type_t *type = mp_obj_get_type(arg);
    da18:	6878      	ldr	r0, [r7, #4]
    da1a:	f7ff fefb 	bl	d814 <mp_obj_get_type>
    da1e:	6178      	str	r0, [r7, #20]
        if (type->unary_op != NULL) {
    da20:	697b      	ldr	r3, [r7, #20]
    da22:	695b      	ldr	r3, [r3, #20]
    da24:	2b00      	cmp	r3, #0
    da26:	d010      	beq.n	da4a <mp_obj_is_true+0x7a>
            mp_obj_t result = type->unary_op(MP_UNARY_OP_BOOL, arg);
    da28:	697b      	ldr	r3, [r7, #20]
    da2a:	695b      	ldr	r3, [r3, #20]
    da2c:	6879      	ldr	r1, [r7, #4]
    da2e:	2004      	movs	r0, #4
    da30:	4798      	blx	r3
    da32:	6138      	str	r0, [r7, #16]
            if (result != MP_OBJ_NULL) {
    da34:	693b      	ldr	r3, [r7, #16]
    da36:	2b00      	cmp	r3, #0
    da38:	d007      	beq.n	da4a <mp_obj_is_true+0x7a>
                return result == mp_const_true;
    da3a:	693b      	ldr	r3, [r7, #16]
    da3c:	4a0d      	ldr	r2, [pc, #52]	; (da74 <mp_obj_is_true+0xa4>)
    da3e:	4293      	cmp	r3, r2
    da40:	bf0c      	ite	eq
    da42:	2301      	moveq	r3, #1
    da44:	2300      	movne	r3, #0
    da46:	b2db      	uxtb	r3, r3
    da48:	e00e      	b.n	da68 <mp_obj_is_true+0x98>
            }
        }

        mp_obj_t len = mp_obj_len_maybe(arg);
    da4a:	6878      	ldr	r0, [r7, #4]
    da4c:	f000 fa38 	bl	dec0 <mp_obj_len_maybe>
    da50:	60f8      	str	r0, [r7, #12]
        if (len != MP_OBJ_NULL) {
    da52:	68fb      	ldr	r3, [r7, #12]
    da54:	2b00      	cmp	r3, #0
    da56:	d006      	beq.n	da66 <mp_obj_is_true+0x96>
            // obj has a length, truth determined if len != 0
            return len != MP_OBJ_NEW_SMALL_INT(0);
    da58:	68fb      	ldr	r3, [r7, #12]
    da5a:	2b01      	cmp	r3, #1
    da5c:	bf14      	ite	ne
    da5e:	2301      	movne	r3, #1
    da60:	2300      	moveq	r3, #0
    da62:	b2db      	uxtb	r3, r3
    da64:	e000      	b.n	da68 <mp_obj_is_true+0x98>
        } else {
            // any other obj is true per Python semantics
            return 1;
    da66:	2301      	movs	r3, #1
        }
    }
}
    da68:	4618      	mov	r0, r3
    da6a:	3718      	adds	r7, #24
    da6c:	46bd      	mov	sp, r7
    da6e:	bd80      	pop	{r7, pc}
    da70:	0001fc3c 	.word	0x0001fc3c
    da74:	0001fc44 	.word	0x0001fc44
    da78:	00021534 	.word	0x00021534

0000da7c <mp_obj_is_callable>:

bool mp_obj_is_callable(mp_obj_t o_in) {
    da7c:	b580      	push	{r7, lr}
    da7e:	b084      	sub	sp, #16
    da80:	af00      	add	r7, sp, #0
    da82:	6078      	str	r0, [r7, #4]
    mp_call_fun_t call = mp_obj_get_type(o_in)->call;
    da84:	6878      	ldr	r0, [r7, #4]
    da86:	f7ff fec5 	bl	d814 <mp_obj_get_type>
    da8a:	4603      	mov	r3, r0
    da8c:	691b      	ldr	r3, [r3, #16]
    da8e:	60fb      	str	r3, [r7, #12]
    if (call != mp_obj_instance_call) {
    da90:	68fb      	ldr	r3, [r7, #12]
    da92:	4a09      	ldr	r2, [pc, #36]	; (dab8 <mp_obj_is_callable+0x3c>)
    da94:	4293      	cmp	r3, r2
    da96:	d006      	beq.n	daa6 <mp_obj_is_callable+0x2a>
        return call != NULL;
    da98:	68fb      	ldr	r3, [r7, #12]
    da9a:	2b00      	cmp	r3, #0
    da9c:	bf14      	ite	ne
    da9e:	2301      	movne	r3, #1
    daa0:	2300      	moveq	r3, #0
    daa2:	b2db      	uxtb	r3, r3
    daa4:	e003      	b.n	daae <mp_obj_is_callable+0x32>
    }
    return mp_obj_instance_is_callable(o_in);
    daa6:	6878      	ldr	r0, [r7, #4]
    daa8:	f009 f808 	bl	16abc <mp_obj_instance_is_callable>
    daac:	4603      	mov	r3, r0
}
    daae:	4618      	mov	r0, r3
    dab0:	3710      	adds	r7, #16
    dab2:	46bd      	mov	sp, r7
    dab4:	bd80      	pop	{r7, pc}
    dab6:	bf00      	nop
    dab8:	00016aed 	.word	0x00016aed

0000dabc <mp_obj_equal>:
// This means that False==0 and True==1 are true expressions.
//
// Furthermore, from the v3.4.2 code for object.c: "Practical amendments: If rich
// comparison returns NotImplemented, == and != are decided by comparing the object
// pointer."
bool mp_obj_equal(mp_obj_t o1, mp_obj_t o2) {
    dabc:	b580      	push	{r7, lr}
    dabe:	b086      	sub	sp, #24
    dac0:	af00      	add	r7, sp, #0
    dac2:	6078      	str	r0, [r7, #4]
    dac4:	6039      	str	r1, [r7, #0]
    // Float (and complex) NaN is never equal to anything, not even itself,
    // so we must have a special check here to cover those cases.
    if (o1 == o2
    dac6:	687a      	ldr	r2, [r7, #4]
    dac8:	683b      	ldr	r3, [r7, #0]
    daca:	429a      	cmp	r2, r3
    dacc:	d101      	bne.n	dad2 <mp_obj_equal+0x16>
        #endif
        #if MICROPY_PY_BUILTINS_COMPLEX
        && !MP_OBJ_IS_TYPE(o1, &mp_type_complex)
        #endif
        ) {
        return true;
    dace:	2301      	movs	r3, #1
    dad0:	e073      	b.n	dbba <mp_obj_equal+0xfe>
    }
    if (o1 == mp_const_none || o2 == mp_const_none) {
    dad2:	687b      	ldr	r3, [r7, #4]
    dad4:	4a3b      	ldr	r2, [pc, #236]	; (dbc4 <mp_obj_equal+0x108>)
    dad6:	4293      	cmp	r3, r2
    dad8:	d003      	beq.n	dae2 <mp_obj_equal+0x26>
    dada:	683b      	ldr	r3, [r7, #0]
    dadc:	4a39      	ldr	r2, [pc, #228]	; (dbc4 <mp_obj_equal+0x108>)
    dade:	4293      	cmp	r3, r2
    dae0:	d101      	bne.n	dae6 <mp_obj_equal+0x2a>
        return false;
    dae2:	2300      	movs	r3, #0
    dae4:	e069      	b.n	dbba <mp_obj_equal+0xfe>
    }

    // fast path for small ints
    if (MP_OBJ_IS_SMALL_INT(o1)) {
    dae6:	6878      	ldr	r0, [r7, #4]
    dae8:	f7ff fe5e 	bl	d7a8 <MP_OBJ_IS_SMALL_INT>
    daec:	4603      	mov	r3, r0
    daee:	2b00      	cmp	r3, #0
    daf0:	d00d      	beq.n	db0e <mp_obj_equal+0x52>
        if (MP_OBJ_IS_SMALL_INT(o2)) {
    daf2:	6838      	ldr	r0, [r7, #0]
    daf4:	f7ff fe58 	bl	d7a8 <MP_OBJ_IS_SMALL_INT>
    daf8:	4603      	mov	r3, r0
    dafa:	2b00      	cmp	r3, #0
    dafc:	d001      	beq.n	db02 <mp_obj_equal+0x46>
            // both SMALL_INT, and not equal if we get here
            return false;
    dafe:	2300      	movs	r3, #0
    db00:	e05b      	b.n	dbba <mp_obj_equal+0xfe>
        } else {
            mp_obj_t temp = o2; o2 = o1; o1 = temp;
    db02:	683b      	ldr	r3, [r7, #0]
    db04:	617b      	str	r3, [r7, #20]
    db06:	687b      	ldr	r3, [r7, #4]
    db08:	603b      	str	r3, [r7, #0]
    db0a:	697b      	ldr	r3, [r7, #20]
    db0c:	607b      	str	r3, [r7, #4]
            // fall through to generic op
        }
    }

    // fast path for strings
    if (MP_OBJ_IS_STR(o1)) {
    db0e:	6878      	ldr	r0, [r7, #4]
    db10:	f7ff fe5c 	bl	d7cc <MP_OBJ_IS_QSTR>
    db14:	4603      	mov	r3, r0
    db16:	2b00      	cmp	r3, #0
    db18:	d10a      	bne.n	db30 <mp_obj_equal+0x74>
    db1a:	6878      	ldr	r0, [r7, #4]
    db1c:	f7ff fe68 	bl	d7f0 <MP_OBJ_IS_OBJ>
    db20:	4603      	mov	r3, r0
    db22:	2b00      	cmp	r3, #0
    db24:	d01b      	beq.n	db5e <mp_obj_equal+0xa2>
    db26:	687b      	ldr	r3, [r7, #4]
    db28:	681b      	ldr	r3, [r3, #0]
    db2a:	4a27      	ldr	r2, [pc, #156]	; (dbc8 <mp_obj_equal+0x10c>)
    db2c:	4293      	cmp	r3, r2
    db2e:	d116      	bne.n	db5e <mp_obj_equal+0xa2>
        if (MP_OBJ_IS_STR(o2)) {
    db30:	6838      	ldr	r0, [r7, #0]
    db32:	f7ff fe4b 	bl	d7cc <MP_OBJ_IS_QSTR>
    db36:	4603      	mov	r3, r0
    db38:	2b00      	cmp	r3, #0
    db3a:	d10a      	bne.n	db52 <mp_obj_equal+0x96>
    db3c:	6838      	ldr	r0, [r7, #0]
    db3e:	f7ff fe57 	bl	d7f0 <MP_OBJ_IS_OBJ>
    db42:	4603      	mov	r3, r0
    db44:	2b00      	cmp	r3, #0
    db46:	d01b      	beq.n	db80 <mp_obj_equal+0xc4>
    db48:	683b      	ldr	r3, [r7, #0]
    db4a:	681b      	ldr	r3, [r3, #0]
    db4c:	4a1e      	ldr	r2, [pc, #120]	; (dbc8 <mp_obj_equal+0x10c>)
    db4e:	4293      	cmp	r3, r2
    db50:	d116      	bne.n	db80 <mp_obj_equal+0xc4>
            // both strings, use special function
            return mp_obj_str_equal(o1, o2);
    db52:	6839      	ldr	r1, [r7, #0]
    db54:	6878      	ldr	r0, [r7, #4]
    db56:	f007 fcaf 	bl	154b8 <mp_obj_str_equal>
    db5a:	4603      	mov	r3, r0
    db5c:	e02d      	b.n	dbba <mp_obj_equal+0xfe>
        } else {
            // a string is never equal to anything else
            goto str_cmp_err;
        }
    } else if (MP_OBJ_IS_STR(o2)) {
    db5e:	6838      	ldr	r0, [r7, #0]
    db60:	f7ff fe34 	bl	d7cc <MP_OBJ_IS_QSTR>
    db64:	4603      	mov	r3, r0
    db66:	2b00      	cmp	r3, #0
    db68:	d10a      	bne.n	db80 <mp_obj_equal+0xc4>
    db6a:	6838      	ldr	r0, [r7, #0]
    db6c:	f7ff fe40 	bl	d7f0 <MP_OBJ_IS_OBJ>
    db70:	4603      	mov	r3, r0
    db72:	2b00      	cmp	r3, #0
    db74:	d006      	beq.n	db84 <mp_obj_equal+0xc8>
    db76:	683b      	ldr	r3, [r7, #0]
    db78:	681b      	ldr	r3, [r3, #0]
    db7a:	4a13      	ldr	r2, [pc, #76]	; (dbc8 <mp_obj_equal+0x10c>)
    db7c:	4293      	cmp	r3, r2
    db7e:	d101      	bne.n	db84 <mp_obj_equal+0xc8>
        #if MICROPY_PY_STR_BYTES_CMP_WARN
        if (MP_OBJ_IS_TYPE(o1, &mp_type_bytes) || MP_OBJ_IS_TYPE(o2, &mp_type_bytes)) {
            mp_warning("Comparison between bytes and str");
        }
        #endif
        return false;
    db80:	2300      	movs	r3, #0
    db82:	e01a      	b.n	dbba <mp_obj_equal+0xfe>
    }

    // generic type, call binary_op(MP_BINARY_OP_EQUAL)
    mp_obj_type_t *type = mp_obj_get_type(o1);
    db84:	6878      	ldr	r0, [r7, #4]
    db86:	f7ff fe45 	bl	d814 <mp_obj_get_type>
    db8a:	6138      	str	r0, [r7, #16]
    if (type->binary_op != NULL) {
    db8c:	693b      	ldr	r3, [r7, #16]
    db8e:	699b      	ldr	r3, [r3, #24]
    db90:	2b00      	cmp	r3, #0
    db92:	d011      	beq.n	dbb8 <mp_obj_equal+0xfc>
        mp_obj_t r = type->binary_op(MP_BINARY_OP_EQUAL, o1, o2);
    db94:	693b      	ldr	r3, [r7, #16]
    db96:	699b      	ldr	r3, [r3, #24]
    db98:	683a      	ldr	r2, [r7, #0]
    db9a:	6879      	ldr	r1, [r7, #4]
    db9c:	2002      	movs	r0, #2
    db9e:	4798      	blx	r3
    dba0:	60f8      	str	r0, [r7, #12]
        if (r != MP_OBJ_NULL) {
    dba2:	68fb      	ldr	r3, [r7, #12]
    dba4:	2b00      	cmp	r3, #0
    dba6:	d007      	beq.n	dbb8 <mp_obj_equal+0xfc>
            return r == mp_const_true ? true : false;
    dba8:	68fb      	ldr	r3, [r7, #12]
    dbaa:	4a08      	ldr	r2, [pc, #32]	; (dbcc <mp_obj_equal+0x110>)
    dbac:	4293      	cmp	r3, r2
    dbae:	bf0c      	ite	eq
    dbb0:	2301      	moveq	r3, #1
    dbb2:	2300      	movne	r3, #0
    dbb4:	b2db      	uxtb	r3, r3
    dbb6:	e000      	b.n	dbba <mp_obj_equal+0xfe>
        }
    }

    // equality not implemented, and objects are not the same object, so
    // they are defined as not equal
    return false;
    dbb8:	2300      	movs	r3, #0
}
    dbba:	4618      	mov	r0, r3
    dbbc:	3718      	adds	r7, #24
    dbbe:	46bd      	mov	sp, r7
    dbc0:	bd80      	pop	{r7, pc}
    dbc2:	bf00      	nop
    dbc4:	00021534 	.word	0x00021534
    dbc8:	00021be4 	.word	0x00021be4
    dbcc:	0001fc44 	.word	0x0001fc44

0000dbd0 <mp_obj_get_int>:

mp_int_t mp_obj_get_int(mp_const_obj_t arg) {
    dbd0:	b580      	push	{r7, lr}
    dbd2:	b082      	sub	sp, #8
    dbd4:	af00      	add	r7, sp, #0
    dbd6:	6078      	str	r0, [r7, #4]
    // This function essentially performs implicit type conversion to int
    // Note that Python does NOT provide implicit type conversion from
    // float to int in the core expression language, try some_list[1.0].
    if (arg == mp_const_false) {
    dbd8:	687b      	ldr	r3, [r7, #4]
    dbda:	4a15      	ldr	r2, [pc, #84]	; (dc30 <mp_obj_get_int+0x60>)
    dbdc:	4293      	cmp	r3, r2
    dbde:	d101      	bne.n	dbe4 <mp_obj_get_int+0x14>
        return 0;
    dbe0:	2300      	movs	r3, #0
    dbe2:	e021      	b.n	dc28 <mp_obj_get_int+0x58>
    } else if (arg == mp_const_true) {
    dbe4:	687b      	ldr	r3, [r7, #4]
    dbe6:	4a13      	ldr	r2, [pc, #76]	; (dc34 <mp_obj_get_int+0x64>)
    dbe8:	4293      	cmp	r3, r2
    dbea:	d101      	bne.n	dbf0 <mp_obj_get_int+0x20>
        return 1;
    dbec:	2301      	movs	r3, #1
    dbee:	e01b      	b.n	dc28 <mp_obj_get_int+0x58>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    dbf0:	6878      	ldr	r0, [r7, #4]
    dbf2:	f7ff fdd9 	bl	d7a8 <MP_OBJ_IS_SMALL_INT>
    dbf6:	4603      	mov	r3, r0
    dbf8:	2b00      	cmp	r3, #0
    dbfa:	d002      	beq.n	dc02 <mp_obj_get_int+0x32>
        return MP_OBJ_SMALL_INT_VALUE(arg);
    dbfc:	687b      	ldr	r3, [r7, #4]
    dbfe:	105b      	asrs	r3, r3, #1
    dc00:	e012      	b.n	dc28 <mp_obj_get_int+0x58>
    } else if (MP_OBJ_IS_TYPE(arg, &mp_type_int)) {
    dc02:	6878      	ldr	r0, [r7, #4]
    dc04:	f7ff fdf4 	bl	d7f0 <MP_OBJ_IS_OBJ>
    dc08:	4603      	mov	r3, r0
    dc0a:	2b00      	cmp	r3, #0
    dc0c:	d009      	beq.n	dc22 <mp_obj_get_int+0x52>
    dc0e:	687b      	ldr	r3, [r7, #4]
    dc10:	681b      	ldr	r3, [r3, #0]
    dc12:	4a09      	ldr	r2, [pc, #36]	; (dc38 <mp_obj_get_int+0x68>)
    dc14:	4293      	cmp	r3, r2
    dc16:	d104      	bne.n	dc22 <mp_obj_get_int+0x52>
        return mp_obj_int_get_checked(arg);
    dc18:	6878      	ldr	r0, [r7, #4]
    dc1a:	f002 febf 	bl	1099c <mp_obj_int_get_checked>
    dc1e:	4603      	mov	r3, r0
    dc20:	e002      	b.n	dc28 <mp_obj_get_int+0x58>
    } else {
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("can't convert to int");
    dc22:	4806      	ldr	r0, [pc, #24]	; (dc3c <mp_obj_get_int+0x6c>)
    dc24:	f7ff f9dc 	bl	cfe0 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "can't convert %s to int", mp_obj_get_type_str(arg)));
        }
    }
}
    dc28:	4618      	mov	r0, r3
    dc2a:	3708      	adds	r7, #8
    dc2c:	46bd      	mov	sp, r7
    dc2e:	bd80      	pop	{r7, pc}
    dc30:	0001fc3c 	.word	0x0001fc3c
    dc34:	0001fc44 	.word	0x0001fc44
    dc38:	00020f90 	.word	0x00020f90
    dc3c:	0001fab0 	.word	0x0001fab0

0000dc40 <mp_obj_get_int_truncated>:

mp_int_t mp_obj_get_int_truncated(mp_const_obj_t arg) {
    dc40:	b580      	push	{r7, lr}
    dc42:	b082      	sub	sp, #8
    dc44:	af00      	add	r7, sp, #0
    dc46:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_INT(arg)) {
    dc48:	6878      	ldr	r0, [r7, #4]
    dc4a:	f7ff fdad 	bl	d7a8 <MP_OBJ_IS_SMALL_INT>
    dc4e:	4603      	mov	r3, r0
    dc50:	2b00      	cmp	r3, #0
    dc52:	d10a      	bne.n	dc6a <mp_obj_get_int_truncated+0x2a>
    dc54:	6878      	ldr	r0, [r7, #4]
    dc56:	f7ff fdcb 	bl	d7f0 <MP_OBJ_IS_OBJ>
    dc5a:	4603      	mov	r3, r0
    dc5c:	2b00      	cmp	r3, #0
    dc5e:	d009      	beq.n	dc74 <mp_obj_get_int_truncated+0x34>
    dc60:	687b      	ldr	r3, [r7, #4]
    dc62:	681b      	ldr	r3, [r3, #0]
    dc64:	4a07      	ldr	r2, [pc, #28]	; (dc84 <mp_obj_get_int_truncated+0x44>)
    dc66:	4293      	cmp	r3, r2
    dc68:	d104      	bne.n	dc74 <mp_obj_get_int_truncated+0x34>
        return mp_obj_int_get_truncated(arg);
    dc6a:	6878      	ldr	r0, [r7, #4]
    dc6c:	f002 fe8a 	bl	10984 <mp_obj_int_get_truncated>
    dc70:	4603      	mov	r3, r0
    dc72:	e003      	b.n	dc7c <mp_obj_get_int_truncated+0x3c>
    } else {
        return mp_obj_get_int(arg);
    dc74:	6878      	ldr	r0, [r7, #4]
    dc76:	f7ff ffab 	bl	dbd0 <mp_obj_get_int>
    dc7a:	4603      	mov	r3, r0
    }
}
    dc7c:	4618      	mov	r0, r3
    dc7e:	3708      	adds	r7, #8
    dc80:	46bd      	mov	sp, r7
    dc82:	bd80      	pop	{r7, pc}
    dc84:	00020f90 	.word	0x00020f90

0000dc88 <mp_obj_get_int_maybe>:

// returns false if arg is not of integral type
// returns true and sets *value if it is of integral type
// can throw OverflowError if arg is of integral type, but doesn't fit in a mp_int_t
bool mp_obj_get_int_maybe(mp_const_obj_t arg, mp_int_t *value) {
    dc88:	b580      	push	{r7, lr}
    dc8a:	b082      	sub	sp, #8
    dc8c:	af00      	add	r7, sp, #0
    dc8e:	6078      	str	r0, [r7, #4]
    dc90:	6039      	str	r1, [r7, #0]
    if (arg == mp_const_false) {
    dc92:	687b      	ldr	r3, [r7, #4]
    dc94:	4a19      	ldr	r2, [pc, #100]	; (dcfc <mp_obj_get_int_maybe+0x74>)
    dc96:	4293      	cmp	r3, r2
    dc98:	d103      	bne.n	dca2 <mp_obj_get_int_maybe+0x1a>
        *value = 0;
    dc9a:	683b      	ldr	r3, [r7, #0]
    dc9c:	2200      	movs	r2, #0
    dc9e:	601a      	str	r2, [r3, #0]
    dca0:	e026      	b.n	dcf0 <mp_obj_get_int_maybe+0x68>
    } else if (arg == mp_const_true) {
    dca2:	687b      	ldr	r3, [r7, #4]
    dca4:	4a16      	ldr	r2, [pc, #88]	; (dd00 <mp_obj_get_int_maybe+0x78>)
    dca6:	4293      	cmp	r3, r2
    dca8:	d103      	bne.n	dcb2 <mp_obj_get_int_maybe+0x2a>
        *value = 1;
    dcaa:	683b      	ldr	r3, [r7, #0]
    dcac:	2201      	movs	r2, #1
    dcae:	601a      	str	r2, [r3, #0]
    dcb0:	e01e      	b.n	dcf0 <mp_obj_get_int_maybe+0x68>
    } else if (MP_OBJ_IS_SMALL_INT(arg)) {
    dcb2:	6878      	ldr	r0, [r7, #4]
    dcb4:	f7ff fd78 	bl	d7a8 <MP_OBJ_IS_SMALL_INT>
    dcb8:	4603      	mov	r3, r0
    dcba:	2b00      	cmp	r3, #0
    dcbc:	d004      	beq.n	dcc8 <mp_obj_get_int_maybe+0x40>
        *value = MP_OBJ_SMALL_INT_VALUE(arg);
    dcbe:	687b      	ldr	r3, [r7, #4]
    dcc0:	105a      	asrs	r2, r3, #1
    dcc2:	683b      	ldr	r3, [r7, #0]
    dcc4:	601a      	str	r2, [r3, #0]
    dcc6:	e013      	b.n	dcf0 <mp_obj_get_int_maybe+0x68>
    } else if (MP_OBJ_IS_TYPE(arg, &mp_type_int)) {
    dcc8:	6878      	ldr	r0, [r7, #4]
    dcca:	f7ff fd91 	bl	d7f0 <MP_OBJ_IS_OBJ>
    dcce:	4603      	mov	r3, r0
    dcd0:	2b00      	cmp	r3, #0
    dcd2:	d00b      	beq.n	dcec <mp_obj_get_int_maybe+0x64>
    dcd4:	687b      	ldr	r3, [r7, #4]
    dcd6:	681b      	ldr	r3, [r3, #0]
    dcd8:	4a0a      	ldr	r2, [pc, #40]	; (dd04 <mp_obj_get_int_maybe+0x7c>)
    dcda:	4293      	cmp	r3, r2
    dcdc:	d106      	bne.n	dcec <mp_obj_get_int_maybe+0x64>
        *value = mp_obj_int_get_checked(arg);
    dcde:	6878      	ldr	r0, [r7, #4]
    dce0:	f002 fe5c 	bl	1099c <mp_obj_int_get_checked>
    dce4:	4602      	mov	r2, r0
    dce6:	683b      	ldr	r3, [r7, #0]
    dce8:	601a      	str	r2, [r3, #0]
    dcea:	e001      	b.n	dcf0 <mp_obj_get_int_maybe+0x68>
    } else {
        return false;
    dcec:	2300      	movs	r3, #0
    dcee:	e000      	b.n	dcf2 <mp_obj_get_int_maybe+0x6a>
    }
    return true;
    dcf0:	2301      	movs	r3, #1
}
    dcf2:	4618      	mov	r0, r3
    dcf4:	3708      	adds	r7, #8
    dcf6:	46bd      	mov	sp, r7
    dcf8:	bd80      	pop	{r7, pc}
    dcfa:	bf00      	nop
    dcfc:	0001fc3c 	.word	0x0001fc3c
    dd00:	0001fc44 	.word	0x0001fc44
    dd04:	00020f90 	.word	0x00020f90

0000dd08 <mp_obj_get_array>:
}
#endif
#endif

// note: returned value in *items may point to the interior of a GC block
void mp_obj_get_array(mp_obj_t o, size_t *len, mp_obj_t **items) {
    dd08:	b580      	push	{r7, lr}
    dd0a:	b084      	sub	sp, #16
    dd0c:	af00      	add	r7, sp, #0
    dd0e:	60f8      	str	r0, [r7, #12]
    dd10:	60b9      	str	r1, [r7, #8]
    dd12:	607a      	str	r2, [r7, #4]
    if (MP_OBJ_IS_TYPE(o, &mp_type_tuple)) {
    dd14:	68f8      	ldr	r0, [r7, #12]
    dd16:	f7ff fd6b 	bl	d7f0 <MP_OBJ_IS_OBJ>
    dd1a:	4603      	mov	r3, r0
    dd1c:	2b00      	cmp	r3, #0
    dd1e:	d00a      	beq.n	dd36 <mp_obj_get_array+0x2e>
    dd20:	68fb      	ldr	r3, [r7, #12]
    dd22:	681b      	ldr	r3, [r3, #0]
    dd24:	4a10      	ldr	r2, [pc, #64]	; (dd68 <mp_obj_get_array+0x60>)
    dd26:	4293      	cmp	r3, r2
    dd28:	d105      	bne.n	dd36 <mp_obj_get_array+0x2e>
        mp_obj_tuple_get(o, len, items);
    dd2a:	687a      	ldr	r2, [r7, #4]
    dd2c:	68b9      	ldr	r1, [r7, #8]
    dd2e:	68f8      	ldr	r0, [r7, #12]
    dd30:	f008 f896 	bl	15e60 <mp_obj_tuple_get>
    dd34:	e013      	b.n	dd5e <mp_obj_get_array+0x56>
    } else if (MP_OBJ_IS_TYPE(o, &mp_type_list)) {
    dd36:	68f8      	ldr	r0, [r7, #12]
    dd38:	f7ff fd5a 	bl	d7f0 <MP_OBJ_IS_OBJ>
    dd3c:	4603      	mov	r3, r0
    dd3e:	2b00      	cmp	r3, #0
    dd40:	d00a      	beq.n	dd58 <mp_obj_get_array+0x50>
    dd42:	68fb      	ldr	r3, [r7, #12]
    dd44:	681b      	ldr	r3, [r3, #0]
    dd46:	4a09      	ldr	r2, [pc, #36]	; (dd6c <mp_obj_get_array+0x64>)
    dd48:	4293      	cmp	r3, r2
    dd4a:	d105      	bne.n	dd58 <mp_obj_get_array+0x50>
        mp_obj_list_get(o, len, items);
    dd4c:	687a      	ldr	r2, [r7, #4]
    dd4e:	68b9      	ldr	r1, [r7, #8]
    dd50:	68f8      	ldr	r0, [r7, #12]
    dd52:	f003 fdcb 	bl	118ec <mp_obj_list_get>
    dd56:	e002      	b.n	dd5e <mp_obj_get_array+0x56>
    } else {
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("expected tuple/list");
    dd58:	4805      	ldr	r0, [pc, #20]	; (dd70 <mp_obj_get_array+0x68>)
    dd5a:	f7ff f941 	bl	cfe0 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "object '%s' is not a tuple or list", mp_obj_get_type_str(o)));
        }
    }
}
    dd5e:	bf00      	nop
    dd60:	3710      	adds	r7, #16
    dd62:	46bd      	mov	sp, r7
    dd64:	bd80      	pop	{r7, pc}
    dd66:	bf00      	nop
    dd68:	00021e68 	.word	0x00021e68
    dd6c:	000211fc 	.word	0x000211fc
    dd70:	0001fac8 	.word	0x0001fac8

0000dd74 <mp_obj_get_array_fixed_n>:

// note: returned value in *items may point to the interior of a GC block
void mp_obj_get_array_fixed_n(mp_obj_t o, size_t len, mp_obj_t **items) {
    dd74:	b580      	push	{r7, lr}
    dd76:	b086      	sub	sp, #24
    dd78:	af00      	add	r7, sp, #0
    dd7a:	60f8      	str	r0, [r7, #12]
    dd7c:	60b9      	str	r1, [r7, #8]
    dd7e:	607a      	str	r2, [r7, #4]
    size_t seq_len;
    mp_obj_get_array(o, &seq_len, items);
    dd80:	f107 0314 	add.w	r3, r7, #20
    dd84:	687a      	ldr	r2, [r7, #4]
    dd86:	4619      	mov	r1, r3
    dd88:	68f8      	ldr	r0, [r7, #12]
    dd8a:	f7ff ffbd 	bl	dd08 <mp_obj_get_array>
    if (seq_len != len) {
    dd8e:	697a      	ldr	r2, [r7, #20]
    dd90:	68bb      	ldr	r3, [r7, #8]
    dd92:	429a      	cmp	r2, r3
    dd94:	d002      	beq.n	dd9c <mp_obj_get_array_fixed_n+0x28>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_ValueError("tuple/list has wrong length");
    dd96:	4803      	ldr	r0, [pc, #12]	; (dda4 <mp_obj_get_array_fixed_n+0x30>)
    dd98:	f7ff f918 	bl	cfcc <mp_raise_ValueError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_ValueError,
                "requested length %d but object has length %d", (int)len, (int)seq_len));
        }
    }
}
    dd9c:	bf00      	nop
    dd9e:	3718      	adds	r7, #24
    dda0:	46bd      	mov	sp, r7
    dda2:	bd80      	pop	{r7, pc}
    dda4:	0001fadc 	.word	0x0001fadc

0000dda8 <mp_get_index>:

// is_slice determines whether the index is a slice index
size_t mp_get_index(const mp_obj_type_t *type, size_t len, mp_obj_t index, bool is_slice) {
    dda8:	b580      	push	{r7, lr}
    ddaa:	b086      	sub	sp, #24
    ddac:	af00      	add	r7, sp, #0
    ddae:	60f8      	str	r0, [r7, #12]
    ddb0:	60b9      	str	r1, [r7, #8]
    ddb2:	607a      	str	r2, [r7, #4]
    ddb4:	70fb      	strb	r3, [r7, #3]
    mp_int_t i;
    if (MP_OBJ_IS_SMALL_INT(index)) {
    ddb6:	6878      	ldr	r0, [r7, #4]
    ddb8:	f7ff fcf6 	bl	d7a8 <MP_OBJ_IS_SMALL_INT>
    ddbc:	4603      	mov	r3, r0
    ddbe:	2b00      	cmp	r3, #0
    ddc0:	d003      	beq.n	ddca <mp_get_index+0x22>
        i = MP_OBJ_SMALL_INT_VALUE(index);
    ddc2:	687b      	ldr	r3, [r7, #4]
    ddc4:	105b      	asrs	r3, r3, #1
    ddc6:	617b      	str	r3, [r7, #20]
    ddc8:	e00e      	b.n	dde8 <mp_get_index+0x40>
    } else if (!mp_obj_get_int_maybe(index, &i)) {
    ddca:	f107 0314 	add.w	r3, r7, #20
    ddce:	4619      	mov	r1, r3
    ddd0:	6878      	ldr	r0, [r7, #4]
    ddd2:	f7ff ff59 	bl	dc88 <mp_obj_get_int_maybe>
    ddd6:	4603      	mov	r3, r0
    ddd8:	f083 0301 	eor.w	r3, r3, #1
    dddc:	b2db      	uxtb	r3, r3
    ddde:	2b00      	cmp	r3, #0
    dde0:	d002      	beq.n	dde8 <mp_get_index+0x40>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("indices must be integers");
    dde2:	4816      	ldr	r0, [pc, #88]	; (de3c <mp_get_index+0x94>)
    dde4:	f7ff f8fc 	bl	cfe0 <mp_raise_TypeError>
                "%q indices must be integers, not %s",
                type->name, mp_obj_get_type_str(index)));
        }
    }

    if (i < 0) {
    dde8:	697b      	ldr	r3, [r7, #20]
    ddea:	2b00      	cmp	r3, #0
    ddec:	da04      	bge.n	ddf8 <mp_get_index+0x50>
        i += len;
    ddee:	697b      	ldr	r3, [r7, #20]
    ddf0:	461a      	mov	r2, r3
    ddf2:	68bb      	ldr	r3, [r7, #8]
    ddf4:	4413      	add	r3, r2
    ddf6:	617b      	str	r3, [r7, #20]
    }
    if (is_slice) {
    ddf8:	78fb      	ldrb	r3, [r7, #3]
    ddfa:	2b00      	cmp	r3, #0
    ddfc:	d00d      	beq.n	de1a <mp_get_index+0x72>
        if (i < 0) {
    ddfe:	697b      	ldr	r3, [r7, #20]
    de00:	2b00      	cmp	r3, #0
    de02:	da02      	bge.n	de0a <mp_get_index+0x62>
            i = 0;
    de04:	2300      	movs	r3, #0
    de06:	617b      	str	r3, [r7, #20]
    de08:	e013      	b.n	de32 <mp_get_index+0x8a>
        } else if ((mp_uint_t)i > len) {
    de0a:	697b      	ldr	r3, [r7, #20]
    de0c:	461a      	mov	r2, r3
    de0e:	68bb      	ldr	r3, [r7, #8]
    de10:	429a      	cmp	r2, r3
    de12:	d90e      	bls.n	de32 <mp_get_index+0x8a>
            i = len;
    de14:	68bb      	ldr	r3, [r7, #8]
    de16:	617b      	str	r3, [r7, #20]
    de18:	e00b      	b.n	de32 <mp_get_index+0x8a>
        }
    } else {
        if (i < 0 || (mp_uint_t)i >= len) {
    de1a:	697b      	ldr	r3, [r7, #20]
    de1c:	2b00      	cmp	r3, #0
    de1e:	db04      	blt.n	de2a <mp_get_index+0x82>
    de20:	697b      	ldr	r3, [r7, #20]
    de22:	461a      	mov	r2, r3
    de24:	68bb      	ldr	r3, [r7, #8]
    de26:	429a      	cmp	r2, r3
    de28:	d303      	bcc.n	de32 <mp_get_index+0x8a>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_msg(&mp_type_IndexError, "index out of range");
    de2a:	4905      	ldr	r1, [pc, #20]	; (de40 <mp_get_index+0x98>)
    de2c:	4805      	ldr	r0, [pc, #20]	; (de44 <mp_get_index+0x9c>)
    de2e:	f7ff f8b5 	bl	cf9c <mp_raise_msg>
            }
        }
    }

    // By this point 0 <= i <= len and so fits in a size_t
    return (size_t)i;
    de32:	697b      	ldr	r3, [r7, #20]
}
    de34:	4618      	mov	r0, r3
    de36:	3718      	adds	r7, #24
    de38:	46bd      	mov	sp, r7
    de3a:	bd80      	pop	{r7, pc}
    de3c:	0001faf8 	.word	0x0001faf8
    de40:	0001fb14 	.word	0x0001fb14
    de44:	00020548 	.word	0x00020548

0000de48 <mp_obj_id>:

mp_obj_t mp_obj_id(mp_obj_t o_in) {
    de48:	b580      	push	{r7, lr}
    de4a:	b084      	sub	sp, #16
    de4c:	af00      	add	r7, sp, #0
    de4e:	6078      	str	r0, [r7, #4]
    mp_int_t id = (mp_int_t)o_in;
    de50:	687b      	ldr	r3, [r7, #4]
    de52:	60fb      	str	r3, [r7, #12]
    if (!MP_OBJ_IS_OBJ(o_in)) {
    de54:	6878      	ldr	r0, [r7, #4]
    de56:	f7ff fccb 	bl	d7f0 <MP_OBJ_IS_OBJ>
    de5a:	4603      	mov	r3, r0
    de5c:	f083 0301 	eor.w	r3, r3, #1
    de60:	b2db      	uxtb	r3, r3
    de62:	2b00      	cmp	r3, #0
    de64:	d004      	beq.n	de70 <mp_obj_id+0x28>
        return mp_obj_new_int(id);
    de66:	68f8      	ldr	r0, [r7, #12]
    de68:	f002 fd70 	bl	1094c <mp_obj_new_int>
    de6c:	4603      	mov	r3, r0
    de6e:	e00c      	b.n	de8a <mp_obj_id+0x42>
    } else if (id >= 0) {
    de70:	68fb      	ldr	r3, [r7, #12]
    de72:	2b00      	cmp	r3, #0
    de74:	db04      	blt.n	de80 <mp_obj_id+0x38>
        // Many OSes and CPUs have affinity for putting "user" memories
        // into low half of address space, and "system" into upper half.
        // We're going to take advantage of that and return small int
        // (signed) for such "user" addresses.
        return MP_OBJ_NEW_SMALL_INT(id);
    de76:	68fb      	ldr	r3, [r7, #12]
    de78:	005b      	lsls	r3, r3, #1
    de7a:	f043 0301 	orr.w	r3, r3, #1
    de7e:	e004      	b.n	de8a <mp_obj_id+0x42>
    } else {
        // If that didn't work, well, let's return long int, just as
        // a (big) positive value, so it will never clash with the range
        // of small int returned in previous case.
        return mp_obj_new_int_from_uint((mp_uint_t)id);
    de80:	68fb      	ldr	r3, [r7, #12]
    de82:	4618      	mov	r0, r3
    de84:	f002 fd48 	bl	10918 <mp_obj_new_int_from_uint>
    de88:	4603      	mov	r3, r0
    }
}
    de8a:	4618      	mov	r0, r3
    de8c:	3710      	adds	r7, #16
    de8e:	46bd      	mov	sp, r7
    de90:	bd80      	pop	{r7, pc}
    de92:	bf00      	nop

0000de94 <mp_obj_len>:

// will raise a TypeError if object has no length
mp_obj_t mp_obj_len(mp_obj_t o_in) {
    de94:	b580      	push	{r7, lr}
    de96:	b084      	sub	sp, #16
    de98:	af00      	add	r7, sp, #0
    de9a:	6078      	str	r0, [r7, #4]
    mp_obj_t len = mp_obj_len_maybe(o_in);
    de9c:	6878      	ldr	r0, [r7, #4]
    de9e:	f000 f80f 	bl	dec0 <mp_obj_len_maybe>
    dea2:	60f8      	str	r0, [r7, #12]
    if (len == MP_OBJ_NULL) {
    dea4:	68fb      	ldr	r3, [r7, #12]
    dea6:	2b00      	cmp	r3, #0
    dea8:	d102      	bne.n	deb0 <mp_obj_len+0x1c>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object has no len");
    deaa:	4804      	ldr	r0, [pc, #16]	; (debc <mp_obj_len+0x28>)
    deac:	f7ff f898 	bl	cfe0 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "object of type '%s' has no len()", mp_obj_get_type_str(o_in)));
        }
    } else {
        return len;
    deb0:	68fb      	ldr	r3, [r7, #12]
    }
}
    deb2:	4618      	mov	r0, r3
    deb4:	3710      	adds	r7, #16
    deb6:	46bd      	mov	sp, r7
    deb8:	bd80      	pop	{r7, pc}
    deba:	bf00      	nop
    debc:	0001fb28 	.word	0x0001fb28

0000dec0 <mp_obj_len_maybe>:

// may return MP_OBJ_NULL
mp_obj_t mp_obj_len_maybe(mp_obj_t o_in) {
    dec0:	b580      	push	{r7, lr}
    dec2:	b084      	sub	sp, #16
    dec4:	af00      	add	r7, sp, #0
    dec6:	6078      	str	r0, [r7, #4]
    if (
#if !MICROPY_PY_BUILTINS_STR_UNICODE
        // It's simple - unicode is slow, non-unicode is fast
        MP_OBJ_IS_STR(o_in) ||
    dec8:	6878      	ldr	r0, [r7, #4]
    deca:	f7ff fc7f 	bl	d7cc <MP_OBJ_IS_QSTR>
    dece:	4603      	mov	r3, r0
    if (
    ded0:	2b00      	cmp	r3, #0
    ded2:	d115      	bne.n	df00 <mp_obj_len_maybe+0x40>
        MP_OBJ_IS_STR(o_in) ||
    ded4:	6878      	ldr	r0, [r7, #4]
    ded6:	f7ff fc8b 	bl	d7f0 <MP_OBJ_IS_OBJ>
    deda:	4603      	mov	r3, r0
    dedc:	2b00      	cmp	r3, #0
    dede:	d004      	beq.n	deea <mp_obj_len_maybe+0x2a>
    dee0:	687b      	ldr	r3, [r7, #4]
    dee2:	681b      	ldr	r3, [r3, #0]
    dee4:	4a1b      	ldr	r2, [pc, #108]	; (df54 <mp_obj_len_maybe+0x94>)
    dee6:	4293      	cmp	r3, r2
    dee8:	d00a      	beq.n	df00 <mp_obj_len_maybe+0x40>
#endif
        MP_OBJ_IS_TYPE(o_in, &mp_type_bytes)) {
    deea:	6878      	ldr	r0, [r7, #4]
    deec:	f7ff fc80 	bl	d7f0 <MP_OBJ_IS_OBJ>
    def0:	4603      	mov	r3, r0
        MP_OBJ_IS_STR(o_in) ||
    def2:	2b00      	cmp	r3, #0
    def4:	d019      	beq.n	df2a <mp_obj_len_maybe+0x6a>
        MP_OBJ_IS_TYPE(o_in, &mp_type_bytes)) {
    def6:	687b      	ldr	r3, [r7, #4]
    def8:	681b      	ldr	r3, [r3, #0]
    defa:	4a17      	ldr	r2, [pc, #92]	; (df58 <mp_obj_len_maybe+0x98>)
    defc:	4293      	cmp	r3, r2
    defe:	d114      	bne.n	df2a <mp_obj_len_maybe+0x6a>
        GET_STR_LEN(o_in, l);
    df00:	6878      	ldr	r0, [r7, #4]
    df02:	f7ff fc63 	bl	d7cc <MP_OBJ_IS_QSTR>
    df06:	4603      	mov	r3, r0
    df08:	2b00      	cmp	r3, #0
    df0a:	d006      	beq.n	df1a <mp_obj_len_maybe+0x5a>
    df0c:	687b      	ldr	r3, [r7, #4]
    df0e:	089b      	lsrs	r3, r3, #2
    df10:	4618      	mov	r0, r3
    df12:	f7f3 f95f 	bl	11d4 <qstr_len>
    df16:	60f8      	str	r0, [r7, #12]
    df18:	e002      	b.n	df20 <mp_obj_len_maybe+0x60>
    df1a:	687b      	ldr	r3, [r7, #4]
    df1c:	689b      	ldr	r3, [r3, #8]
    df1e:	60fb      	str	r3, [r7, #12]
        return MP_OBJ_NEW_SMALL_INT(l);
    df20:	68fb      	ldr	r3, [r7, #12]
    df22:	005b      	lsls	r3, r3, #1
    df24:	f043 0301 	orr.w	r3, r3, #1
    df28:	e00f      	b.n	df4a <mp_obj_len_maybe+0x8a>
    } else {
        mp_obj_type_t *type = mp_obj_get_type(o_in);
    df2a:	6878      	ldr	r0, [r7, #4]
    df2c:	f7ff fc72 	bl	d814 <mp_obj_get_type>
    df30:	60b8      	str	r0, [r7, #8]
        if (type->unary_op != NULL) {
    df32:	68bb      	ldr	r3, [r7, #8]
    df34:	695b      	ldr	r3, [r3, #20]
    df36:	2b00      	cmp	r3, #0
    df38:	d006      	beq.n	df48 <mp_obj_len_maybe+0x88>
            return type->unary_op(MP_UNARY_OP_LEN, o_in);
    df3a:	68bb      	ldr	r3, [r7, #8]
    df3c:	695b      	ldr	r3, [r3, #20]
    df3e:	6879      	ldr	r1, [r7, #4]
    df40:	2005      	movs	r0, #5
    df42:	4798      	blx	r3
    df44:	4603      	mov	r3, r0
    df46:	e000      	b.n	df4a <mp_obj_len_maybe+0x8a>
        } else {
            return MP_OBJ_NULL;
    df48:	2300      	movs	r3, #0
        }
    }
}
    df4a:	4618      	mov	r0, r3
    df4c:	3710      	adds	r7, #16
    df4e:	46bd      	mov	sp, r7
    df50:	bd80      	pop	{r7, pc}
    df52:	bf00      	nop
    df54:	00021be4 	.word	0x00021be4
    df58:	00021c20 	.word	0x00021c20

0000df5c <mp_obj_subscr>:

mp_obj_t mp_obj_subscr(mp_obj_t base, mp_obj_t index, mp_obj_t value) {
    df5c:	b580      	push	{r7, lr}
    df5e:	b086      	sub	sp, #24
    df60:	af00      	add	r7, sp, #0
    df62:	60f8      	str	r0, [r7, #12]
    df64:	60b9      	str	r1, [r7, #8]
    df66:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(base);
    df68:	68f8      	ldr	r0, [r7, #12]
    df6a:	f7ff fc53 	bl	d814 <mp_obj_get_type>
    df6e:	6178      	str	r0, [r7, #20]
    if (type->subscr != NULL) {
    df70:	697b      	ldr	r3, [r7, #20]
    df72:	6a1b      	ldr	r3, [r3, #32]
    df74:	2b00      	cmp	r3, #0
    df76:	d00b      	beq.n	df90 <mp_obj_subscr+0x34>
        mp_obj_t ret = type->subscr(base, index, value);
    df78:	697b      	ldr	r3, [r7, #20]
    df7a:	6a1b      	ldr	r3, [r3, #32]
    df7c:	687a      	ldr	r2, [r7, #4]
    df7e:	68b9      	ldr	r1, [r7, #8]
    df80:	68f8      	ldr	r0, [r7, #12]
    df82:	4798      	blx	r3
    df84:	6138      	str	r0, [r7, #16]
        if (ret != MP_OBJ_NULL) {
    df86:	693b      	ldr	r3, [r7, #16]
    df88:	2b00      	cmp	r3, #0
    df8a:	d001      	beq.n	df90 <mp_obj_subscr+0x34>
            return ret;
    df8c:	693b      	ldr	r3, [r7, #16]
    df8e:	e00e      	b.n	dfae <mp_obj_subscr+0x52>
        }
        // TODO: call base classes here?
    }
    if (value == MP_OBJ_NULL) {
    df90:	687b      	ldr	r3, [r7, #4]
    df92:	2b00      	cmp	r3, #0
    df94:	d102      	bne.n	df9c <mp_obj_subscr+0x40>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object does not support item deletion");
    df96:	4808      	ldr	r0, [pc, #32]	; (dfb8 <mp_obj_subscr+0x5c>)
    df98:	f7ff f822 	bl	cfe0 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object does not support item deletion", mp_obj_get_type_str(base)));
        }
    } else if (value == MP_OBJ_SENTINEL) {
    df9c:	687b      	ldr	r3, [r7, #4]
    df9e:	2b08      	cmp	r3, #8
    dfa0:	d102      	bne.n	dfa8 <mp_obj_subscr+0x4c>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object is not subscriptable");
    dfa2:	4806      	ldr	r0, [pc, #24]	; (dfbc <mp_obj_subscr+0x60>)
    dfa4:	f7ff f81c 	bl	cfe0 <mp_raise_TypeError>
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object is not subscriptable", mp_obj_get_type_str(base)));
        }
    } else {
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object does not support item assignment");
    dfa8:	4805      	ldr	r0, [pc, #20]	; (dfc0 <mp_obj_subscr+0x64>)
    dfaa:	f7ff f819 	bl	cfe0 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object does not support item assignment", mp_obj_get_type_str(base)));
        }
    }
}
    dfae:	4618      	mov	r0, r3
    dfb0:	3718      	adds	r7, #24
    dfb2:	46bd      	mov	sp, r7
    dfb4:	bd80      	pop	{r7, pc}
    dfb6:	bf00      	nop
    dfb8:	0001fb3c 	.word	0x0001fb3c
    dfbc:	0001fb64 	.word	0x0001fb64
    dfc0:	0001fb80 	.word	0x0001fb80

0000dfc4 <mp_identity>:

// Return input argument. Useful as .getiter for objects which are
// their own iterators, etc.
mp_obj_t mp_identity(mp_obj_t self) {
    dfc4:	b480      	push	{r7}
    dfc6:	b083      	sub	sp, #12
    dfc8:	af00      	add	r7, sp, #0
    dfca:	6078      	str	r0, [r7, #4]
    return self;
    dfcc:	687b      	ldr	r3, [r7, #4]
}
    dfce:	4618      	mov	r0, r3
    dfd0:	370c      	adds	r7, #12
    dfd2:	46bd      	mov	sp, r7
    dfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    dfd8:	4770      	bx	lr
    dfda:	bf00      	nop

0000dfdc <mp_identity_getiter>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_identity_obj, mp_identity);

mp_obj_t mp_identity_getiter(mp_obj_t self, mp_obj_iter_buf_t *iter_buf) {
    dfdc:	b480      	push	{r7}
    dfde:	b083      	sub	sp, #12
    dfe0:	af00      	add	r7, sp, #0
    dfe2:	6078      	str	r0, [r7, #4]
    dfe4:	6039      	str	r1, [r7, #0]
    (void)iter_buf;
    return self;
    dfe6:	687b      	ldr	r3, [r7, #4]
}
    dfe8:	4618      	mov	r0, r3
    dfea:	370c      	adds	r7, #12
    dfec:	46bd      	mov	sp, r7
    dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
    dff2:	4770      	bx	lr

0000dff4 <mp_get_buffer>:

bool mp_get_buffer(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
    dff4:	b580      	push	{r7, lr}
    dff6:	b086      	sub	sp, #24
    dff8:	af00      	add	r7, sp, #0
    dffa:	60f8      	str	r0, [r7, #12]
    dffc:	60b9      	str	r1, [r7, #8]
    dffe:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(obj);
    e000:	68f8      	ldr	r0, [r7, #12]
    e002:	f7ff fc07 	bl	d814 <mp_obj_get_type>
    e006:	6178      	str	r0, [r7, #20]
    if (type->buffer_p.get_buffer == NULL) {
    e008:	697b      	ldr	r3, [r7, #20]
    e00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e00c:	2b00      	cmp	r3, #0
    e00e:	d101      	bne.n	e014 <mp_get_buffer+0x20>
        return false;
    e010:	2300      	movs	r3, #0
    e012:	e00c      	b.n	e02e <mp_get_buffer+0x3a>
    }
    int ret = type->buffer_p.get_buffer(obj, bufinfo, flags);
    e014:	697b      	ldr	r3, [r7, #20]
    e016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e018:	687a      	ldr	r2, [r7, #4]
    e01a:	68b9      	ldr	r1, [r7, #8]
    e01c:	68f8      	ldr	r0, [r7, #12]
    e01e:	4798      	blx	r3
    e020:	6138      	str	r0, [r7, #16]
    if (ret != 0) {
    e022:	693b      	ldr	r3, [r7, #16]
    e024:	2b00      	cmp	r3, #0
    e026:	d001      	beq.n	e02c <mp_get_buffer+0x38>
        return false;
    e028:	2300      	movs	r3, #0
    e02a:	e000      	b.n	e02e <mp_get_buffer+0x3a>
    }
    return true;
    e02c:	2301      	movs	r3, #1
}
    e02e:	4618      	mov	r0, r3
    e030:	3718      	adds	r7, #24
    e032:	46bd      	mov	sp, r7
    e034:	bd80      	pop	{r7, pc}
    e036:	bf00      	nop

0000e038 <mp_get_buffer_raise>:

void mp_get_buffer_raise(mp_obj_t obj, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
    e038:	b580      	push	{r7, lr}
    e03a:	b084      	sub	sp, #16
    e03c:	af00      	add	r7, sp, #0
    e03e:	60f8      	str	r0, [r7, #12]
    e040:	60b9      	str	r1, [r7, #8]
    e042:	607a      	str	r2, [r7, #4]
    if (!mp_get_buffer(obj, bufinfo, flags)) {
    e044:	687a      	ldr	r2, [r7, #4]
    e046:	68b9      	ldr	r1, [r7, #8]
    e048:	68f8      	ldr	r0, [r7, #12]
    e04a:	f7ff ffd3 	bl	dff4 <mp_get_buffer>
    e04e:	4603      	mov	r3, r0
    e050:	f083 0301 	eor.w	r3, r3, #1
    e054:	b2db      	uxtb	r3, r3
    e056:	2b00      	cmp	r3, #0
    e058:	d002      	beq.n	e060 <mp_get_buffer_raise+0x28>
        mp_raise_TypeError("object with buffer protocol required");
    e05a:	4803      	ldr	r0, [pc, #12]	; (e068 <mp_get_buffer_raise+0x30>)
    e05c:	f7fe ffc0 	bl	cfe0 <mp_raise_TypeError>
    }
}
    e060:	bf00      	nop
    e062:	3710      	adds	r7, #16
    e064:	46bd      	mov	sp, r7
    e066:	bd80      	pop	{r7, pc}
    e068:	0001fbb0 	.word	0x0001fbb0

0000e06c <mp_generic_unary_op>:

mp_obj_t mp_generic_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
    e06c:	b480      	push	{r7}
    e06e:	b083      	sub	sp, #12
    e070:	af00      	add	r7, sp, #0
    e072:	6078      	str	r0, [r7, #4]
    e074:	6039      	str	r1, [r7, #0]
    switch (op) {
    e076:	687b      	ldr	r3, [r7, #4]
    e078:	2b06      	cmp	r3, #6
    e07a:	d104      	bne.n	e086 <mp_generic_unary_op+0x1a>
        case MP_UNARY_OP_HASH: return MP_OBJ_NEW_SMALL_INT((mp_uint_t)o_in);
    e07c:	683b      	ldr	r3, [r7, #0]
    e07e:	005b      	lsls	r3, r3, #1
    e080:	f043 0301 	orr.w	r3, r3, #1
    e084:	e000      	b.n	e088 <mp_generic_unary_op+0x1c>
        default: return MP_OBJ_NULL; // op not supported
    e086:	2300      	movs	r3, #0
    }
}
    e088:	4618      	mov	r0, r3
    e08a:	370c      	adds	r7, #12
    e08c:	46bd      	mov	sp, r7
    e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e092:	4770      	bx	lr

0000e094 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    e094:	b480      	push	{r7}
    e096:	b083      	sub	sp, #12
    e098:	af00      	add	r7, sp, #0
    e09a:	6078      	str	r0, [r7, #4]
    e09c:	687b      	ldr	r3, [r7, #4]
    e09e:	2b00      	cmp	r3, #0
    e0a0:	d001      	beq.n	e0a6 <mp_obj_new_bool+0x12>
    e0a2:	4b04      	ldr	r3, [pc, #16]	; (e0b4 <mp_obj_new_bool+0x20>)
    e0a4:	e000      	b.n	e0a8 <mp_obj_new_bool+0x14>
    e0a6:	4b04      	ldr	r3, [pc, #16]	; (e0b8 <mp_obj_new_bool+0x24>)
    e0a8:	4618      	mov	r0, r3
    e0aa:	370c      	adds	r7, #12
    e0ac:	46bd      	mov	sp, r7
    e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    e0b2:	4770      	bx	lr
    e0b4:	0001fc44 	.word	0x0001fc44
    e0b8:	0001fc3c 	.word	0x0001fc3c

0000e0bc <bool_print>:
typedef struct _mp_obj_bool_t {
    mp_obj_base_t base;
    bool value;
} mp_obj_bool_t;

STATIC void bool_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    e0bc:	b580      	push	{r7, lr}
    e0be:	b086      	sub	sp, #24
    e0c0:	af00      	add	r7, sp, #0
    e0c2:	60f8      	str	r0, [r7, #12]
    e0c4:	60b9      	str	r1, [r7, #8]
    e0c6:	607a      	str	r2, [r7, #4]
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(self_in);
    e0c8:	68bb      	ldr	r3, [r7, #8]
    e0ca:	617b      	str	r3, [r7, #20]
            mp_print_str(print, "true");
        } else {
            mp_print_str(print, "false");
        }
    } else {
        if (self->value) {
    e0cc:	697b      	ldr	r3, [r7, #20]
    e0ce:	791b      	ldrb	r3, [r3, #4]
    e0d0:	2b00      	cmp	r3, #0
    e0d2:	d004      	beq.n	e0de <bool_print+0x22>
            mp_print_str(print, "True");
    e0d4:	4906      	ldr	r1, [pc, #24]	; (e0f0 <bool_print+0x34>)
    e0d6:	68f8      	ldr	r0, [r7, #12]
    e0d8:	f7f3 fbd0 	bl	187c <mp_print_str>
        } else {
            mp_print_str(print, "False");
        }
    }
}
    e0dc:	e003      	b.n	e0e6 <bool_print+0x2a>
            mp_print_str(print, "False");
    e0de:	4905      	ldr	r1, [pc, #20]	; (e0f4 <bool_print+0x38>)
    e0e0:	68f8      	ldr	r0, [r7, #12]
    e0e2:	f7f3 fbcb 	bl	187c <mp_print_str>
}
    e0e6:	bf00      	nop
    e0e8:	3718      	adds	r7, #24
    e0ea:	46bd      	mov	sp, r7
    e0ec:	bd80      	pop	{r7, pc}
    e0ee:	bf00      	nop
    e0f0:	0001fbf0 	.word	0x0001fbf0
    e0f4:	0001fbf8 	.word	0x0001fbf8

0000e0f8 <bool_make_new>:

STATIC mp_obj_t bool_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e0f8:	b580      	push	{r7, lr}
    e0fa:	b086      	sub	sp, #24
    e0fc:	af02      	add	r7, sp, #8
    e0fe:	60f8      	str	r0, [r7, #12]
    e100:	60b9      	str	r1, [r7, #8]
    e102:	607a      	str	r2, [r7, #4]
    e104:	603b      	str	r3, [r7, #0]
    (void)type_in;
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
    e106:	2300      	movs	r3, #0
    e108:	9300      	str	r3, [sp, #0]
    e10a:	2301      	movs	r3, #1
    e10c:	2200      	movs	r2, #0
    e10e:	6879      	ldr	r1, [r7, #4]
    e110:	68b8      	ldr	r0, [r7, #8]
    e112:	f7fe ff8b 	bl	d02c <mp_arg_check_num>

    if (n_args == 0) {
    e116:	68bb      	ldr	r3, [r7, #8]
    e118:	2b00      	cmp	r3, #0
    e11a:	d101      	bne.n	e120 <bool_make_new+0x28>
        return mp_const_false;
    e11c:	4b07      	ldr	r3, [pc, #28]	; (e13c <bool_make_new+0x44>)
    e11e:	e009      	b.n	e134 <bool_make_new+0x3c>
    } else {
        return mp_obj_new_bool(mp_obj_is_true(args[0]));
    e120:	683b      	ldr	r3, [r7, #0]
    e122:	681b      	ldr	r3, [r3, #0]
    e124:	4618      	mov	r0, r3
    e126:	f7ff fc53 	bl	d9d0 <mp_obj_is_true>
    e12a:	4603      	mov	r3, r0
    e12c:	4618      	mov	r0, r3
    e12e:	f7ff ffb1 	bl	e094 <mp_obj_new_bool>
    e132:	4603      	mov	r3, r0
    }
}
    e134:	4618      	mov	r0, r3
    e136:	3710      	adds	r7, #16
    e138:	46bd      	mov	sp, r7
    e13a:	bd80      	pop	{r7, pc}
    e13c:	0001fc3c 	.word	0x0001fc3c

0000e140 <bool_unary_op>:

STATIC mp_obj_t bool_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
    e140:	b580      	push	{r7, lr}
    e142:	b084      	sub	sp, #16
    e144:	af00      	add	r7, sp, #0
    e146:	6078      	str	r0, [r7, #4]
    e148:	6039      	str	r1, [r7, #0]
    if (op == MP_UNARY_OP_LEN) {
    e14a:	687b      	ldr	r3, [r7, #4]
    e14c:	2b05      	cmp	r3, #5
    e14e:	d101      	bne.n	e154 <bool_unary_op+0x14>
        return MP_OBJ_NULL;
    e150:	2300      	movs	r3, #0
    e152:	e00b      	b.n	e16c <bool_unary_op+0x2c>
    }
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(o_in);
    e154:	683b      	ldr	r3, [r7, #0]
    e156:	60fb      	str	r3, [r7, #12]
    return mp_unary_op(op, MP_OBJ_NEW_SMALL_INT(self->value));
    e158:	68fb      	ldr	r3, [r7, #12]
    e15a:	791b      	ldrb	r3, [r3, #4]
    e15c:	005b      	lsls	r3, r3, #1
    e15e:	f043 0301 	orr.w	r3, r3, #1
    e162:	4619      	mov	r1, r3
    e164:	6878      	ldr	r0, [r7, #4]
    e166:	f7fd fafd 	bl	b764 <mp_unary_op>
    e16a:	4603      	mov	r3, r0
}
    e16c:	4618      	mov	r0, r3
    e16e:	3710      	adds	r7, #16
    e170:	46bd      	mov	sp, r7
    e172:	bd80      	pop	{r7, pc}

0000e174 <bool_binary_op>:

STATIC mp_obj_t bool_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    e174:	b580      	push	{r7, lr}
    e176:	b086      	sub	sp, #24
    e178:	af00      	add	r7, sp, #0
    e17a:	60f8      	str	r0, [r7, #12]
    e17c:	60b9      	str	r1, [r7, #8]
    e17e:	607a      	str	r2, [r7, #4]
    mp_obj_bool_t *self = MP_OBJ_TO_PTR(lhs_in);
    e180:	68bb      	ldr	r3, [r7, #8]
    e182:	617b      	str	r3, [r7, #20]
    return mp_binary_op(op, MP_OBJ_NEW_SMALL_INT(self->value), rhs_in);
    e184:	697b      	ldr	r3, [r7, #20]
    e186:	791b      	ldrb	r3, [r3, #4]
    e188:	005b      	lsls	r3, r3, #1
    e18a:	f043 0301 	orr.w	r3, r3, #1
    e18e:	687a      	ldr	r2, [r7, #4]
    e190:	4619      	mov	r1, r3
    e192:	68f8      	ldr	r0, [r7, #12]
    e194:	f7fd fbcc 	bl	b930 <mp_binary_op>
    e198:	4603      	mov	r3, r0
}
    e19a:	4618      	mov	r0, r3
    e19c:	3718      	adds	r7, #24
    e19e:	46bd      	mov	sp, r7
    e1a0:	bd80      	pop	{r7, pc}
    e1a2:	bf00      	nop

0000e1a4 <mp_call_method_self_n_kw>:
    mp_obj_print_helper(print, o->meth, PRINT_REPR);
    mp_print_str(print, ">");
}
#endif

mp_obj_t mp_call_method_self_n_kw(mp_obj_t meth, mp_obj_t self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e1a4:	b580      	push	{r7, lr}
    e1a6:	b088      	sub	sp, #32
    e1a8:	af00      	add	r7, sp, #0
    e1aa:	60f8      	str	r0, [r7, #12]
    e1ac:	60b9      	str	r1, [r7, #8]
    e1ae:	607a      	str	r2, [r7, #4]
    e1b0:	603b      	str	r3, [r7, #0]
    // need to insert self before all other args and then call meth
    size_t n_total = n_args + 2 * n_kw;
    e1b2:	683b      	ldr	r3, [r7, #0]
    e1b4:	005a      	lsls	r2, r3, #1
    e1b6:	687b      	ldr	r3, [r7, #4]
    e1b8:	4413      	add	r3, r2
    e1ba:	617b      	str	r3, [r7, #20]
    mp_obj_t *args2 = NULL;
    e1bc:	2300      	movs	r3, #0
    e1be:	61fb      	str	r3, [r7, #28]
    #if MICROPY_ENABLE_PYSTACK
    args2 = mp_pystack_alloc(sizeof(mp_obj_t) * (1 + n_total));
    #else
    mp_obj_t *free_args2 = NULL;
    e1c0:	2300      	movs	r3, #0
    e1c2:	61bb      	str	r3, [r7, #24]
    if (n_total > 4) {
    e1c4:	697b      	ldr	r3, [r7, #20]
    e1c6:	2b04      	cmp	r3, #4
    e1c8:	d908      	bls.n	e1dc <mp_call_method_self_n_kw+0x38>
        // try to use heap to allocate temporary args array
        args2 = m_new_maybe(mp_obj_t, 1 + n_total);
    e1ca:	697b      	ldr	r3, [r7, #20]
    e1cc:	3301      	adds	r3, #1
    e1ce:	009b      	lsls	r3, r3, #2
    e1d0:	4618      	mov	r0, r3
    e1d2:	f7f2 f8bb 	bl	34c <m_malloc_maybe>
    e1d6:	61f8      	str	r0, [r7, #28]
        free_args2 = args2;
    e1d8:	69fb      	ldr	r3, [r7, #28]
    e1da:	61bb      	str	r3, [r7, #24]
    }
    if (args2 == NULL) {
    e1dc:	69fb      	ldr	r3, [r7, #28]
    e1de:	2b00      	cmp	r3, #0
    e1e0:	d10d      	bne.n	e1fe <mp_call_method_self_n_kw+0x5a>
        // (fallback to) use stack to allocate temporary args array
        args2 = alloca(sizeof(mp_obj_t) * (1 + n_total));
    e1e2:	697b      	ldr	r3, [r7, #20]
    e1e4:	3301      	adds	r3, #1
    e1e6:	009b      	lsls	r3, r3, #2
    e1e8:	3307      	adds	r3, #7
    e1ea:	3307      	adds	r3, #7
    e1ec:	08db      	lsrs	r3, r3, #3
    e1ee:	00db      	lsls	r3, r3, #3
    e1f0:	ebad 0d03 	sub.w	sp, sp, r3
    e1f4:	466b      	mov	r3, sp
    e1f6:	3307      	adds	r3, #7
    e1f8:	08db      	lsrs	r3, r3, #3
    e1fa:	00db      	lsls	r3, r3, #3
    e1fc:	61fb      	str	r3, [r7, #28]
    }
    #endif
    args2[0] = self;
    e1fe:	69fb      	ldr	r3, [r7, #28]
    e200:	68ba      	ldr	r2, [r7, #8]
    e202:	601a      	str	r2, [r3, #0]
    memcpy(args2 + 1, args, n_total * sizeof(mp_obj_t));
    e204:	69fb      	ldr	r3, [r7, #28]
    e206:	1d18      	adds	r0, r3, #4
    e208:	697b      	ldr	r3, [r7, #20]
    e20a:	009b      	lsls	r3, r3, #2
    e20c:	461a      	mov	r2, r3
    e20e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    e210:	f00d fe58 	bl	1bec4 <memcpy>
    mp_obj_t res = mp_call_function_n_kw(meth, n_args + 1, n_kw, args2);
    e214:	687b      	ldr	r3, [r7, #4]
    e216:	1c59      	adds	r1, r3, #1
    e218:	69fb      	ldr	r3, [r7, #28]
    e21a:	683a      	ldr	r2, [r7, #0]
    e21c:	68f8      	ldr	r0, [r7, #12]
    e21e:	f7fd fe1b 	bl	be58 <mp_call_function_n_kw>
    e222:	6138      	str	r0, [r7, #16]
    #if MICROPY_ENABLE_PYSTACK
    mp_pystack_free(args2);
    #else
    if (free_args2 != NULL) {
    e224:	69bb      	ldr	r3, [r7, #24]
    e226:	2b00      	cmp	r3, #0
    e228:	d002      	beq.n	e230 <mp_call_method_self_n_kw+0x8c>
        m_del(mp_obj_t, free_args2, 1 + n_total);
    e22a:	69b8      	ldr	r0, [r7, #24]
    e22c:	f7f2 f8d8 	bl	3e0 <m_free>
    }
    #endif
    return res;
    e230:	693b      	ldr	r3, [r7, #16]
}
    e232:	4618      	mov	r0, r3
    e234:	3720      	adds	r7, #32
    e236:	46bd      	mov	sp, r7
    e238:	bd80      	pop	{r7, pc}
    e23a:	bf00      	nop

0000e23c <bound_meth_call>:

STATIC mp_obj_t bound_meth_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e23c:	b580      	push	{r7, lr}
    e23e:	b088      	sub	sp, #32
    e240:	af02      	add	r7, sp, #8
    e242:	60f8      	str	r0, [r7, #12]
    e244:	60b9      	str	r1, [r7, #8]
    e246:	607a      	str	r2, [r7, #4]
    e248:	603b      	str	r3, [r7, #0]
    mp_obj_bound_meth_t *self = MP_OBJ_TO_PTR(self_in);
    e24a:	68fb      	ldr	r3, [r7, #12]
    e24c:	617b      	str	r3, [r7, #20]
    return mp_call_method_self_n_kw(self->meth, self->self, n_args, n_kw, args);
    e24e:	697b      	ldr	r3, [r7, #20]
    e250:	6858      	ldr	r0, [r3, #4]
    e252:	697b      	ldr	r3, [r7, #20]
    e254:	6899      	ldr	r1, [r3, #8]
    e256:	683b      	ldr	r3, [r7, #0]
    e258:	9300      	str	r3, [sp, #0]
    e25a:	687b      	ldr	r3, [r7, #4]
    e25c:	68ba      	ldr	r2, [r7, #8]
    e25e:	f7ff ffa1 	bl	e1a4 <mp_call_method_self_n_kw>
    e262:	4603      	mov	r3, r0
}
    e264:	4618      	mov	r0, r3
    e266:	3718      	adds	r7, #24
    e268:	46bd      	mov	sp, r7
    e26a:	bd80      	pop	{r7, pc}

0000e26c <mp_obj_new_bound_meth>:
#if MICROPY_PY_FUNCTION_ATTRS
    .attr = bound_meth_attr,
#endif
};

mp_obj_t mp_obj_new_bound_meth(mp_obj_t meth, mp_obj_t self) {
    e26c:	b580      	push	{r7, lr}
    e26e:	b084      	sub	sp, #16
    e270:	af00      	add	r7, sp, #0
    e272:	6078      	str	r0, [r7, #4]
    e274:	6039      	str	r1, [r7, #0]
    mp_obj_bound_meth_t *o = m_new_obj(mp_obj_bound_meth_t);
    e276:	200c      	movs	r0, #12
    e278:	f7f2 f850 	bl	31c <m_malloc>
    e27c:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_bound_meth;
    e27e:	68fb      	ldr	r3, [r7, #12]
    e280:	4a06      	ldr	r2, [pc, #24]	; (e29c <mp_obj_new_bound_meth+0x30>)
    e282:	601a      	str	r2, [r3, #0]
    o->meth = meth;
    e284:	68fb      	ldr	r3, [r7, #12]
    e286:	687a      	ldr	r2, [r7, #4]
    e288:	605a      	str	r2, [r3, #4]
    o->self = self;
    e28a:	68fb      	ldr	r3, [r7, #12]
    e28c:	683a      	ldr	r2, [r7, #0]
    e28e:	609a      	str	r2, [r3, #8]
    return MP_OBJ_FROM_PTR(o);
    e290:	68fb      	ldr	r3, [r7, #12]
}
    e292:	4618      	mov	r0, r3
    e294:	3710      	adds	r7, #16
    e296:	46bd      	mov	sp, r7
    e298:	bd80      	pop	{r7, pc}
    e29a:	bf00      	nop
    e29c:	0001fc4c 	.word	0x0001fc4c

0000e2a0 <mp_obj_cell_get>:
typedef struct _mp_obj_cell_t {
    mp_obj_base_t base;
    mp_obj_t obj;
} mp_obj_cell_t;

mp_obj_t mp_obj_cell_get(mp_obj_t self_in) {
    e2a0:	b480      	push	{r7}
    e2a2:	b085      	sub	sp, #20
    e2a4:	af00      	add	r7, sp, #0
    e2a6:	6078      	str	r0, [r7, #4]
    mp_obj_cell_t *self = MP_OBJ_TO_PTR(self_in);
    e2a8:	687b      	ldr	r3, [r7, #4]
    e2aa:	60fb      	str	r3, [r7, #12]
    return self->obj;
    e2ac:	68fb      	ldr	r3, [r7, #12]
    e2ae:	685b      	ldr	r3, [r3, #4]
}
    e2b0:	4618      	mov	r0, r3
    e2b2:	3714      	adds	r7, #20
    e2b4:	46bd      	mov	sp, r7
    e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    e2ba:	4770      	bx	lr

0000e2bc <mp_obj_cell_set>:

void mp_obj_cell_set(mp_obj_t self_in, mp_obj_t obj) {
    e2bc:	b480      	push	{r7}
    e2be:	b085      	sub	sp, #20
    e2c0:	af00      	add	r7, sp, #0
    e2c2:	6078      	str	r0, [r7, #4]
    e2c4:	6039      	str	r1, [r7, #0]
    mp_obj_cell_t *self = MP_OBJ_TO_PTR(self_in);
    e2c6:	687b      	ldr	r3, [r7, #4]
    e2c8:	60fb      	str	r3, [r7, #12]
    self->obj = obj;
    e2ca:	68fb      	ldr	r3, [r7, #12]
    e2cc:	683a      	ldr	r2, [r7, #0]
    e2ce:	605a      	str	r2, [r3, #4]
}
    e2d0:	bf00      	nop
    e2d2:	3714      	adds	r7, #20
    e2d4:	46bd      	mov	sp, r7
    e2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    e2da:	4770      	bx	lr

0000e2dc <mp_obj_new_cell>:
#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_DETAILED
    .print = cell_print,
#endif
};

mp_obj_t mp_obj_new_cell(mp_obj_t obj) {
    e2dc:	b580      	push	{r7, lr}
    e2de:	b084      	sub	sp, #16
    e2e0:	af00      	add	r7, sp, #0
    e2e2:	6078      	str	r0, [r7, #4]
    mp_obj_cell_t *o = m_new_obj(mp_obj_cell_t);
    e2e4:	2008      	movs	r0, #8
    e2e6:	f7f2 f819 	bl	31c <m_malloc>
    e2ea:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_cell;
    e2ec:	68fb      	ldr	r3, [r7, #12]
    e2ee:	4a05      	ldr	r2, [pc, #20]	; (e304 <mp_obj_new_cell+0x28>)
    e2f0:	601a      	str	r2, [r3, #0]
    o->obj = obj;
    e2f2:	68fb      	ldr	r3, [r7, #12]
    e2f4:	687a      	ldr	r2, [r7, #4]
    e2f6:	605a      	str	r2, [r3, #4]
    return MP_OBJ_FROM_PTR(o);
    e2f8:	68fb      	ldr	r3, [r7, #12]
}
    e2fa:	4618      	mov	r0, r3
    e2fc:	3710      	adds	r7, #16
    e2fe:	46bd      	mov	sp, r7
    e300:	bd80      	pop	{r7, pc}
    e302:	bf00      	nop
    e304:	0001fc88 	.word	0x0001fc88

0000e308 <closure_call>:
    mp_obj_t fun;
    size_t n_closed;
    mp_obj_t closed[];
} mp_obj_closure_t;

STATIC mp_obj_t closure_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e308:	b580      	push	{r7, lr}
    e30a:	b08e      	sub	sp, #56	; 0x38
    e30c:	af00      	add	r7, sp, #0
    e30e:	60f8      	str	r0, [r7, #12]
    e310:	60b9      	str	r1, [r7, #8]
    e312:	607a      	str	r2, [r7, #4]
    e314:	603b      	str	r3, [r7, #0]
    mp_obj_closure_t *self = MP_OBJ_TO_PTR(self_in);
    e316:	68fb      	ldr	r3, [r7, #12]
    e318:	637b      	str	r3, [r7, #52]	; 0x34

    // need to concatenate closed-over-vars and args

    size_t n_total = self->n_closed + n_args + 2 * n_kw;
    e31a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e31c:	689a      	ldr	r2, [r3, #8]
    e31e:	68bb      	ldr	r3, [r7, #8]
    e320:	441a      	add	r2, r3
    e322:	687b      	ldr	r3, [r7, #4]
    e324:	005b      	lsls	r3, r3, #1
    e326:	4413      	add	r3, r2
    e328:	633b      	str	r3, [r7, #48]	; 0x30
    if (n_total <= 5) {
    e32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e32c:	2b05      	cmp	r3, #5
    e32e:	d826      	bhi.n	e37e <closure_call+0x76>
        // use stack to allocate temporary args array
        mp_obj_t args2[5];
        memcpy(args2, self->closed, self->n_closed * sizeof(mp_obj_t));
    e330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e332:	f103 010c 	add.w	r1, r3, #12
    e336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e338:	689b      	ldr	r3, [r3, #8]
    e33a:	009a      	lsls	r2, r3, #2
    e33c:	f107 0314 	add.w	r3, r7, #20
    e340:	4618      	mov	r0, r3
    e342:	f00d fdbf 	bl	1bec4 <memcpy>
        memcpy(args2 + self->n_closed, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
    e346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e348:	689b      	ldr	r3, [r3, #8]
    e34a:	009b      	lsls	r3, r3, #2
    e34c:	f107 0214 	add.w	r2, r7, #20
    e350:	18d0      	adds	r0, r2, r3
    e352:	687b      	ldr	r3, [r7, #4]
    e354:	005a      	lsls	r2, r3, #1
    e356:	68bb      	ldr	r3, [r7, #8]
    e358:	4413      	add	r3, r2
    e35a:	009b      	lsls	r3, r3, #2
    e35c:	461a      	mov	r2, r3
    e35e:	6839      	ldr	r1, [r7, #0]
    e360:	f00d fdb0 	bl	1bec4 <memcpy>
        return mp_call_function_n_kw(self->fun, self->n_closed + n_args, n_kw, args2);
    e364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e366:	6858      	ldr	r0, [r3, #4]
    e368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e36a:	689a      	ldr	r2, [r3, #8]
    e36c:	68bb      	ldr	r3, [r7, #8]
    e36e:	18d1      	adds	r1, r2, r3
    e370:	f107 0314 	add.w	r3, r7, #20
    e374:	687a      	ldr	r2, [r7, #4]
    e376:	f7fd fd6f 	bl	be58 <mp_call_function_n_kw>
    e37a:	4603      	mov	r3, r0
    e37c:	e02c      	b.n	e3d8 <closure_call+0xd0>
    } else {
        // use heap to allocate temporary args array
        mp_obj_t *args2 = m_new(mp_obj_t, n_total);
    e37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e380:	009b      	lsls	r3, r3, #2
    e382:	4618      	mov	r0, r3
    e384:	f7f1 ffca 	bl	31c <m_malloc>
    e388:	62f8      	str	r0, [r7, #44]	; 0x2c
        memcpy(args2, self->closed, self->n_closed * sizeof(mp_obj_t));
    e38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e38c:	f103 010c 	add.w	r1, r3, #12
    e390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e392:	689b      	ldr	r3, [r3, #8]
    e394:	009b      	lsls	r3, r3, #2
    e396:	461a      	mov	r2, r3
    e398:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e39a:	f00d fd93 	bl	1bec4 <memcpy>
        memcpy(args2 + self->n_closed, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
    e39e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e3a0:	689b      	ldr	r3, [r3, #8]
    e3a2:	009b      	lsls	r3, r3, #2
    e3a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e3a6:	18d0      	adds	r0, r2, r3
    e3a8:	687b      	ldr	r3, [r7, #4]
    e3aa:	005a      	lsls	r2, r3, #1
    e3ac:	68bb      	ldr	r3, [r7, #8]
    e3ae:	4413      	add	r3, r2
    e3b0:	009b      	lsls	r3, r3, #2
    e3b2:	461a      	mov	r2, r3
    e3b4:	6839      	ldr	r1, [r7, #0]
    e3b6:	f00d fd85 	bl	1bec4 <memcpy>
        mp_obj_t res = mp_call_function_n_kw(self->fun, self->n_closed + n_args, n_kw, args2);
    e3ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e3bc:	6858      	ldr	r0, [r3, #4]
    e3be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e3c0:	689a      	ldr	r2, [r3, #8]
    e3c2:	68bb      	ldr	r3, [r7, #8]
    e3c4:	18d1      	adds	r1, r2, r3
    e3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e3c8:	687a      	ldr	r2, [r7, #4]
    e3ca:	f7fd fd45 	bl	be58 <mp_call_function_n_kw>
    e3ce:	62b8      	str	r0, [r7, #40]	; 0x28
        m_del(mp_obj_t, args2, n_total);
    e3d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e3d2:	f7f2 f805 	bl	3e0 <m_free>
        return res;
    e3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
}
    e3d8:	4618      	mov	r0, r3
    e3da:	3738      	adds	r7, #56	; 0x38
    e3dc:	46bd      	mov	sp, r7
    e3de:	bd80      	pop	{r7, pc}

0000e3e0 <mp_obj_new_closure>:
    .print = closure_print,
#endif
    .call = closure_call,
};

mp_obj_t mp_obj_new_closure(mp_obj_t fun, size_t n_closed_over, const mp_obj_t *closed) {
    e3e0:	b580      	push	{r7, lr}
    e3e2:	b086      	sub	sp, #24
    e3e4:	af00      	add	r7, sp, #0
    e3e6:	60f8      	str	r0, [r7, #12]
    e3e8:	60b9      	str	r1, [r7, #8]
    e3ea:	607a      	str	r2, [r7, #4]
    mp_obj_closure_t *o = m_new_obj_var(mp_obj_closure_t, mp_obj_t, n_closed_over);
    e3ec:	68bb      	ldr	r3, [r7, #8]
    e3ee:	3303      	adds	r3, #3
    e3f0:	009b      	lsls	r3, r3, #2
    e3f2:	4618      	mov	r0, r3
    e3f4:	f7f1 ff92 	bl	31c <m_malloc>
    e3f8:	6178      	str	r0, [r7, #20]
    o->base.type = &closure_type;
    e3fa:	697b      	ldr	r3, [r7, #20]
    e3fc:	4a0a      	ldr	r2, [pc, #40]	; (e428 <mp_obj_new_closure+0x48>)
    e3fe:	601a      	str	r2, [r3, #0]
    o->fun = fun;
    e400:	697b      	ldr	r3, [r7, #20]
    e402:	68fa      	ldr	r2, [r7, #12]
    e404:	605a      	str	r2, [r3, #4]
    o->n_closed = n_closed_over;
    e406:	697b      	ldr	r3, [r7, #20]
    e408:	68ba      	ldr	r2, [r7, #8]
    e40a:	609a      	str	r2, [r3, #8]
    memcpy(o->closed, closed, n_closed_over * sizeof(mp_obj_t));
    e40c:	697b      	ldr	r3, [r7, #20]
    e40e:	f103 000c 	add.w	r0, r3, #12
    e412:	68bb      	ldr	r3, [r7, #8]
    e414:	009b      	lsls	r3, r3, #2
    e416:	461a      	mov	r2, r3
    e418:	6879      	ldr	r1, [r7, #4]
    e41a:	f00d fd53 	bl	1bec4 <memcpy>
    return MP_OBJ_FROM_PTR(o);
    e41e:	697b      	ldr	r3, [r7, #20]
}
    e420:	4618      	mov	r0, r3
    e422:	3718      	adds	r7, #24
    e424:	46bd      	mov	sp, r7
    e426:	bd80      	pop	{r7, pc}
    e428:	0001fcc4 	.word	0x0001fcc4

0000e42c <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    e42c:	b480      	push	{r7}
    e42e:	b083      	sub	sp, #12
    e430:	af00      	add	r7, sp, #0
    e432:	6078      	str	r0, [r7, #4]
    e434:	687b      	ldr	r3, [r7, #4]
    e436:	f003 0303 	and.w	r3, r3, #3
    e43a:	2b00      	cmp	r3, #0
    e43c:	bf0c      	ite	eq
    e43e:	2301      	moveq	r3, #1
    e440:	2300      	movne	r3, #0
    e442:	b2db      	uxtb	r3, r3
    e444:	4618      	mov	r0, r3
    e446:	370c      	adds	r7, #12
    e448:	46bd      	mov	sp, r7
    e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
    e44e:	4770      	bx	lr

0000e450 <MP_MAP_SLOT_IS_FILLED>:
static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
    e450:	b480      	push	{r7}
    e452:	b083      	sub	sp, #12
    e454:	af00      	add	r7, sp, #0
    e456:	6078      	str	r0, [r7, #4]
    e458:	6039      	str	r1, [r7, #0]
    e45a:	687b      	ldr	r3, [r7, #4]
    e45c:	689a      	ldr	r2, [r3, #8]
    e45e:	683b      	ldr	r3, [r7, #0]
    e460:	00db      	lsls	r3, r3, #3
    e462:	4413      	add	r3, r2
    e464:	681b      	ldr	r3, [r3, #0]
    e466:	2b00      	cmp	r3, #0
    e468:	d009      	beq.n	e47e <MP_MAP_SLOT_IS_FILLED+0x2e>
    e46a:	687b      	ldr	r3, [r7, #4]
    e46c:	689a      	ldr	r2, [r3, #8]
    e46e:	683b      	ldr	r3, [r7, #0]
    e470:	00db      	lsls	r3, r3, #3
    e472:	4413      	add	r3, r2
    e474:	681b      	ldr	r3, [r3, #0]
    e476:	2b08      	cmp	r3, #8
    e478:	d001      	beq.n	e47e <MP_MAP_SLOT_IS_FILLED+0x2e>
    e47a:	2301      	movs	r3, #1
    e47c:	e000      	b.n	e480 <MP_MAP_SLOT_IS_FILLED+0x30>
    e47e:	2300      	movs	r3, #0
    e480:	f003 0301 	and.w	r3, r3, #1
    e484:	b2db      	uxtb	r3, r3
    e486:	4618      	mov	r0, r3
    e488:	370c      	adds	r7, #12
    e48a:	46bd      	mov	sp, r7
    e48c:	f85d 7b04 	ldr.w	r7, [sp], #4
    e490:	4770      	bx	lr
    e492:	bf00      	nop

0000e494 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
    e494:	b480      	push	{r7}
    e496:	b083      	sub	sp, #12
    e498:	af00      	add	r7, sp, #0
    e49a:	6078      	str	r0, [r7, #4]
    e49c:	687b      	ldr	r3, [r7, #4]
    e49e:	2b00      	cmp	r3, #0
    e4a0:	d001      	beq.n	e4a6 <mp_obj_new_bool+0x12>
    e4a2:	4b04      	ldr	r3, [pc, #16]	; (e4b4 <mp_obj_new_bool+0x20>)
    e4a4:	e000      	b.n	e4a8 <mp_obj_new_bool+0x14>
    e4a6:	4b04      	ldr	r3, [pc, #16]	; (e4b8 <mp_obj_new_bool+0x24>)
    e4a8:	4618      	mov	r0, r3
    e4aa:	370c      	adds	r7, #12
    e4ac:	46bd      	mov	sp, r7
    e4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    e4b2:	4770      	bx	lr
    e4b4:	0001fc44 	.word	0x0001fc44
    e4b8:	0001fc3c 	.word	0x0001fc3c

0000e4bc <dict_iter_next>:
STATIC mp_obj_t dict_update(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs);

// This is a helper function to iterate through a dictionary.  The state of
// the iteration is held in *cur and should be initialised with zero for the
// first call.  Will return NULL when no more elements are available.
STATIC mp_map_elem_t *dict_iter_next(mp_obj_dict_t *dict, size_t *cur) {
    e4bc:	b580      	push	{r7, lr}
    e4be:	b086      	sub	sp, #24
    e4c0:	af00      	add	r7, sp, #0
    e4c2:	6078      	str	r0, [r7, #4]
    e4c4:	6039      	str	r1, [r7, #0]
    size_t max = dict->map.alloc;
    e4c6:	687b      	ldr	r3, [r7, #4]
    e4c8:	689b      	ldr	r3, [r3, #8]
    e4ca:	613b      	str	r3, [r7, #16]
    mp_map_t *map = &dict->map;
    e4cc:	687b      	ldr	r3, [r7, #4]
    e4ce:	3304      	adds	r3, #4
    e4d0:	60fb      	str	r3, [r7, #12]

    for (size_t i = *cur; i < max; i++) {
    e4d2:	683b      	ldr	r3, [r7, #0]
    e4d4:	681b      	ldr	r3, [r3, #0]
    e4d6:	617b      	str	r3, [r7, #20]
    e4d8:	e013      	b.n	e502 <dict_iter_next+0x46>
        if (MP_MAP_SLOT_IS_FILLED(map, i)) {
    e4da:	6979      	ldr	r1, [r7, #20]
    e4dc:	68f8      	ldr	r0, [r7, #12]
    e4de:	f7ff ffb7 	bl	e450 <MP_MAP_SLOT_IS_FILLED>
    e4e2:	4603      	mov	r3, r0
    e4e4:	2b00      	cmp	r3, #0
    e4e6:	d009      	beq.n	e4fc <dict_iter_next+0x40>
            *cur = i + 1;
    e4e8:	697b      	ldr	r3, [r7, #20]
    e4ea:	1c5a      	adds	r2, r3, #1
    e4ec:	683b      	ldr	r3, [r7, #0]
    e4ee:	601a      	str	r2, [r3, #0]
            return &(map->table[i]);
    e4f0:	68fb      	ldr	r3, [r7, #12]
    e4f2:	689a      	ldr	r2, [r3, #8]
    e4f4:	697b      	ldr	r3, [r7, #20]
    e4f6:	00db      	lsls	r3, r3, #3
    e4f8:	4413      	add	r3, r2
    e4fa:	e007      	b.n	e50c <dict_iter_next+0x50>
    for (size_t i = *cur; i < max; i++) {
    e4fc:	697b      	ldr	r3, [r7, #20]
    e4fe:	3301      	adds	r3, #1
    e500:	617b      	str	r3, [r7, #20]
    e502:	697a      	ldr	r2, [r7, #20]
    e504:	693b      	ldr	r3, [r7, #16]
    e506:	429a      	cmp	r2, r3
    e508:	d3e7      	bcc.n	e4da <dict_iter_next+0x1e>
        }
    }

    return NULL;
    e50a:	2300      	movs	r3, #0
}
    e50c:	4618      	mov	r0, r3
    e50e:	3718      	adds	r7, #24
    e510:	46bd      	mov	sp, r7
    e512:	bd80      	pop	{r7, pc}

0000e514 <dict_print>:

STATIC void dict_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    e514:	b580      	push	{r7, lr}
    e516:	b088      	sub	sp, #32
    e518:	af00      	add	r7, sp, #0
    e51a:	60f8      	str	r0, [r7, #12]
    e51c:	60b9      	str	r1, [r7, #8]
    e51e:	607a      	str	r2, [r7, #4]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e520:	68bb      	ldr	r3, [r7, #8]
    e522:	61bb      	str	r3, [r7, #24]
    bool first = true;
    e524:	2301      	movs	r3, #1
    e526:	77fb      	strb	r3, [r7, #31]
    if (!(MICROPY_PY_UJSON && kind == PRINT_JSON)) {
        kind = PRINT_REPR;
    e528:	2301      	movs	r3, #1
    e52a:	607b      	str	r3, [r7, #4]
    }
    if (MICROPY_PY_COLLECTIONS_ORDEREDDICT && self->base.type != &mp_type_dict) {
        mp_printf(print, "%q(", self->base.type->name);
    }
    mp_print_str(print, "{");
    e52c:	491c      	ldr	r1, [pc, #112]	; (e5a0 <dict_print+0x8c>)
    e52e:	68f8      	ldr	r0, [r7, #12]
    e530:	f7f3 f9a4 	bl	187c <mp_print_str>
    size_t cur = 0;
    e534:	2300      	movs	r3, #0
    e536:	613b      	str	r3, [r7, #16]
    mp_map_elem_t *next = NULL;
    e538:	2300      	movs	r3, #0
    e53a:	617b      	str	r3, [r7, #20]
    while ((next = dict_iter_next(self, &cur)) != NULL) {
    e53c:	e01d      	b.n	e57a <dict_print+0x66>
        if (!first) {
    e53e:	7ffb      	ldrb	r3, [r7, #31]
    e540:	f083 0301 	eor.w	r3, r3, #1
    e544:	b2db      	uxtb	r3, r3
    e546:	2b00      	cmp	r3, #0
    e548:	d003      	beq.n	e552 <dict_print+0x3e>
            mp_print_str(print, ", ");
    e54a:	4916      	ldr	r1, [pc, #88]	; (e5a4 <dict_print+0x90>)
    e54c:	68f8      	ldr	r0, [r7, #12]
    e54e:	f7f3 f995 	bl	187c <mp_print_str>
        }
        first = false;
    e552:	2300      	movs	r3, #0
    e554:	77fb      	strb	r3, [r7, #31]
        mp_obj_print_helper(print, next->key, kind);
    e556:	697b      	ldr	r3, [r7, #20]
    e558:	681b      	ldr	r3, [r3, #0]
    e55a:	687a      	ldr	r2, [r7, #4]
    e55c:	4619      	mov	r1, r3
    e55e:	68f8      	ldr	r0, [r7, #12]
    e560:	f7ff f98a 	bl	d878 <mp_obj_print_helper>
        mp_print_str(print, ": ");
    e564:	4910      	ldr	r1, [pc, #64]	; (e5a8 <dict_print+0x94>)
    e566:	68f8      	ldr	r0, [r7, #12]
    e568:	f7f3 f988 	bl	187c <mp_print_str>
        mp_obj_print_helper(print, next->value, kind);
    e56c:	697b      	ldr	r3, [r7, #20]
    e56e:	685b      	ldr	r3, [r3, #4]
    e570:	687a      	ldr	r2, [r7, #4]
    e572:	4619      	mov	r1, r3
    e574:	68f8      	ldr	r0, [r7, #12]
    e576:	f7ff f97f 	bl	d878 <mp_obj_print_helper>
    while ((next = dict_iter_next(self, &cur)) != NULL) {
    e57a:	f107 0310 	add.w	r3, r7, #16
    e57e:	4619      	mov	r1, r3
    e580:	69b8      	ldr	r0, [r7, #24]
    e582:	f7ff ff9b 	bl	e4bc <dict_iter_next>
    e586:	6178      	str	r0, [r7, #20]
    e588:	697b      	ldr	r3, [r7, #20]
    e58a:	2b00      	cmp	r3, #0
    e58c:	d1d7      	bne.n	e53e <dict_print+0x2a>
    }
    mp_print_str(print, "}");
    e58e:	4907      	ldr	r1, [pc, #28]	; (e5ac <dict_print+0x98>)
    e590:	68f8      	ldr	r0, [r7, #12]
    e592:	f7f3 f973 	bl	187c <mp_print_str>
    if (MICROPY_PY_COLLECTIONS_ORDEREDDICT && self->base.type != &mp_type_dict) {
        mp_print_str(print, ")");
    }
}
    e596:	bf00      	nop
    e598:	3720      	adds	r7, #32
    e59a:	46bd      	mov	sp, r7
    e59c:	bd80      	pop	{r7, pc}
    e59e:	bf00      	nop
    e5a0:	0001fd00 	.word	0x0001fd00
    e5a4:	0001fd04 	.word	0x0001fd04
    e5a8:	0001fd08 	.word	0x0001fd08
    e5ac:	0001fd0c 	.word	0x0001fd0c

0000e5b0 <dict_make_new>:

STATIC mp_obj_t dict_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    e5b0:	b580      	push	{r7, lr}
    e5b2:	b08c      	sub	sp, #48	; 0x30
    e5b4:	af00      	add	r7, sp, #0
    e5b6:	60f8      	str	r0, [r7, #12]
    e5b8:	60b9      	str	r1, [r7, #8]
    e5ba:	607a      	str	r2, [r7, #4]
    e5bc:	603b      	str	r3, [r7, #0]
    mp_obj_t dict_out = mp_obj_new_dict(0);
    e5be:	2000      	movs	r0, #0
    e5c0:	f000 fdbc 	bl	f13c <mp_obj_new_dict>
    e5c4:	62f8      	str	r0, [r7, #44]	; 0x2c
    mp_obj_dict_t *dict = MP_OBJ_TO_PTR(dict_out);
    e5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e5c8:	62bb      	str	r3, [r7, #40]	; 0x28
    dict->base.type = type;
    e5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e5cc:	68fa      	ldr	r2, [r7, #12]
    e5ce:	601a      	str	r2, [r3, #0]
    #if MICROPY_PY_COLLECTIONS_ORDEREDDICT
    if (type == &mp_type_ordereddict) {
        dict->map.is_ordered = 1;
    }
    #endif
    if (n_args > 0 || n_kw > 0) {
    e5d0:	68bb      	ldr	r3, [r7, #8]
    e5d2:	2b00      	cmp	r3, #0
    e5d4:	d102      	bne.n	e5dc <dict_make_new+0x2c>
    e5d6:	687b      	ldr	r3, [r7, #4]
    e5d8:	2b00      	cmp	r3, #0
    e5da:	d017      	beq.n	e60c <dict_make_new+0x5c>
        mp_obj_t args2[2] = {dict_out, args[0]}; // args[0] is always valid, even if it's not a positional arg
    e5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e5de:	623b      	str	r3, [r7, #32]
    e5e0:	683b      	ldr	r3, [r7, #0]
    e5e2:	681b      	ldr	r3, [r3, #0]
    e5e4:	627b      	str	r3, [r7, #36]	; 0x24
        mp_map_t kwargs;
        mp_map_init_fixed_table(&kwargs, n_kw, args + n_args);
    e5e6:	68bb      	ldr	r3, [r7, #8]
    e5e8:	009b      	lsls	r3, r3, #2
    e5ea:	683a      	ldr	r2, [r7, #0]
    e5ec:	441a      	add	r2, r3
    e5ee:	f107 0314 	add.w	r3, r7, #20
    e5f2:	6879      	ldr	r1, [r7, #4]
    e5f4:	4618      	mov	r0, r3
    e5f6:	f7fe fe9b 	bl	d330 <mp_map_init_fixed_table>
        dict_update(n_args + 1, args2, &kwargs); // dict_update will check that n_args + 1 == 1 or 2
    e5fa:	68bb      	ldr	r3, [r7, #8]
    e5fc:	3301      	adds	r3, #1
    e5fe:	f107 0214 	add.w	r2, r7, #20
    e602:	f107 0120 	add.w	r1, r7, #32
    e606:	4618      	mov	r0, r3
    e608:	f000 faec 	bl	ebe4 <dict_update>
    }
    return dict_out;
    e60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    e60e:	4618      	mov	r0, r3
    e610:	3730      	adds	r7, #48	; 0x30
    e612:	46bd      	mov	sp, r7
    e614:	bd80      	pop	{r7, pc}
    e616:	bf00      	nop

0000e618 <dict_unary_op>:

STATIC mp_obj_t dict_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
    e618:	b580      	push	{r7, lr}
    e61a:	b084      	sub	sp, #16
    e61c:	af00      	add	r7, sp, #0
    e61e:	6078      	str	r0, [r7, #4]
    e620:	6039      	str	r1, [r7, #0]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e622:	683b      	ldr	r3, [r7, #0]
    e624:	60fb      	str	r3, [r7, #12]
    switch (op) {
    e626:	687b      	ldr	r3, [r7, #4]
    e628:	2b04      	cmp	r3, #4
    e62a:	d002      	beq.n	e632 <dict_unary_op+0x1a>
    e62c:	2b05      	cmp	r3, #5
    e62e:	d00e      	beq.n	e64e <dict_unary_op+0x36>
    e630:	e015      	b.n	e65e <dict_unary_op+0x46>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->map.used != 0);
    e632:	68fb      	ldr	r3, [r7, #12]
    e634:	685b      	ldr	r3, [r3, #4]
    e636:	f023 0307 	bic.w	r3, r3, #7
    e63a:	2b00      	cmp	r3, #0
    e63c:	bf14      	ite	ne
    e63e:	2301      	movne	r3, #1
    e640:	2300      	moveq	r3, #0
    e642:	b2db      	uxtb	r3, r3
    e644:	4618      	mov	r0, r3
    e646:	f7ff ff25 	bl	e494 <mp_obj_new_bool>
    e64a:	4603      	mov	r3, r0
    e64c:	e008      	b.n	e660 <dict_unary_op+0x48>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->map.used);
    e64e:	68fb      	ldr	r3, [r7, #12]
    e650:	685b      	ldr	r3, [r3, #4]
    e652:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    e656:	005b      	lsls	r3, r3, #1
    e658:	f043 0301 	orr.w	r3, r3, #1
    e65c:	e000      	b.n	e660 <dict_unary_op+0x48>
        case MP_UNARY_OP_SIZEOF: {
            size_t sz = sizeof(*self) + sizeof(*self->map.table) * self->map.alloc;
            return MP_OBJ_NEW_SMALL_INT(sz);
        }
        #endif
        default: return MP_OBJ_NULL; // op not supported
    e65e:	2300      	movs	r3, #0
    }
}
    e660:	4618      	mov	r0, r3
    e662:	3710      	adds	r7, #16
    e664:	46bd      	mov	sp, r7
    e666:	bd80      	pop	{r7, pc}

0000e668 <dict_binary_op>:

STATIC mp_obj_t dict_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    e668:	b580      	push	{r7, lr}
    e66a:	b08a      	sub	sp, #40	; 0x28
    e66c:	af00      	add	r7, sp, #0
    e66e:	60f8      	str	r0, [r7, #12]
    e670:	60b9      	str	r1, [r7, #8]
    e672:	607a      	str	r2, [r7, #4]
    mp_obj_dict_t *o = MP_OBJ_TO_PTR(lhs_in);
    e674:	68bb      	ldr	r3, [r7, #8]
    e676:	627b      	str	r3, [r7, #36]	; 0x24
    switch (op) {
    e678:	68fb      	ldr	r3, [r7, #12]
    e67a:	2b02      	cmp	r3, #2
    e67c:	d014      	beq.n	e6a8 <dict_binary_op+0x40>
    e67e:	2b22      	cmp	r3, #34	; 0x22
    e680:	d15a      	bne.n	e738 <dict_binary_op+0xd0>
        case MP_BINARY_OP_CONTAINS: {
            mp_map_elem_t *elem = mp_map_lookup(&o->map, rhs_in, MP_MAP_LOOKUP);
    e682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e684:	3304      	adds	r3, #4
    e686:	2200      	movs	r2, #0
    e688:	6879      	ldr	r1, [r7, #4]
    e68a:	4618      	mov	r0, r3
    e68c:	f7fe ff18 	bl	d4c0 <mp_map_lookup>
    e690:	6238      	str	r0, [r7, #32]
            return mp_obj_new_bool(elem != NULL);
    e692:	6a3b      	ldr	r3, [r7, #32]
    e694:	2b00      	cmp	r3, #0
    e696:	bf14      	ite	ne
    e698:	2301      	movne	r3, #1
    e69a:	2300      	moveq	r3, #0
    e69c:	b2db      	uxtb	r3, r3
    e69e:	4618      	mov	r0, r3
    e6a0:	f7ff fef8 	bl	e494 <mp_obj_new_bool>
    e6a4:	4603      	mov	r3, r0
    e6a6:	e048      	b.n	e73a <dict_binary_op+0xd2>
                    }
                }
                return e1 == NULL && e2 == NULL ? mp_const_true : mp_const_false;
            } else
            #endif
            if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_dict)) {
    e6a8:	6878      	ldr	r0, [r7, #4]
    e6aa:	f7ff febf 	bl	e42c <MP_OBJ_IS_OBJ>
    e6ae:	4603      	mov	r3, r0
    e6b0:	2b00      	cmp	r3, #0
    e6b2:	d03f      	beq.n	e734 <dict_binary_op+0xcc>
    e6b4:	687b      	ldr	r3, [r7, #4]
    e6b6:	681b      	ldr	r3, [r3, #0]
    e6b8:	4a22      	ldr	r2, [pc, #136]	; (e744 <dict_binary_op+0xdc>)
    e6ba:	4293      	cmp	r3, r2
    e6bc:	d13a      	bne.n	e734 <dict_binary_op+0xcc>
                mp_obj_dict_t *rhs = MP_OBJ_TO_PTR(rhs_in);
    e6be:	687b      	ldr	r3, [r7, #4]
    e6c0:	61fb      	str	r3, [r7, #28]
                if (o->map.used != rhs->map.used) {
    e6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e6c4:	685b      	ldr	r3, [r3, #4]
    e6c6:	f3c3 02dc 	ubfx	r2, r3, #3, #29
    e6ca:	69fb      	ldr	r3, [r7, #28]
    e6cc:	685b      	ldr	r3, [r3, #4]
    e6ce:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    e6d2:	429a      	cmp	r2, r3
    e6d4:	d001      	beq.n	e6da <dict_binary_op+0x72>
                    return mp_const_false;
    e6d6:	4b1c      	ldr	r3, [pc, #112]	; (e748 <dict_binary_op+0xe0>)
    e6d8:	e02f      	b.n	e73a <dict_binary_op+0xd2>
                }

                size_t cur = 0;
    e6da:	2300      	movs	r3, #0
    e6dc:	613b      	str	r3, [r7, #16]
                mp_map_elem_t *next = NULL;
    e6de:	2300      	movs	r3, #0
    e6e0:	61bb      	str	r3, [r7, #24]
                while ((next = dict_iter_next(o, &cur)) != NULL) {
    e6e2:	e01b      	b.n	e71c <dict_binary_op+0xb4>
                    mp_map_elem_t *elem = mp_map_lookup(&rhs->map, next->key, MP_MAP_LOOKUP);
    e6e4:	69fb      	ldr	r3, [r7, #28]
    e6e6:	1d18      	adds	r0, r3, #4
    e6e8:	69bb      	ldr	r3, [r7, #24]
    e6ea:	681b      	ldr	r3, [r3, #0]
    e6ec:	2200      	movs	r2, #0
    e6ee:	4619      	mov	r1, r3
    e6f0:	f7fe fee6 	bl	d4c0 <mp_map_lookup>
    e6f4:	6178      	str	r0, [r7, #20]
                    if (elem == NULL || !mp_obj_equal(next->value, elem->value)) {
    e6f6:	697b      	ldr	r3, [r7, #20]
    e6f8:	2b00      	cmp	r3, #0
    e6fa:	d00d      	beq.n	e718 <dict_binary_op+0xb0>
    e6fc:	69bb      	ldr	r3, [r7, #24]
    e6fe:	685a      	ldr	r2, [r3, #4]
    e700:	697b      	ldr	r3, [r7, #20]
    e702:	685b      	ldr	r3, [r3, #4]
    e704:	4619      	mov	r1, r3
    e706:	4610      	mov	r0, r2
    e708:	f7ff f9d8 	bl	dabc <mp_obj_equal>
    e70c:	4603      	mov	r3, r0
    e70e:	f083 0301 	eor.w	r3, r3, #1
    e712:	b2db      	uxtb	r3, r3
    e714:	2b00      	cmp	r3, #0
    e716:	d001      	beq.n	e71c <dict_binary_op+0xb4>
                        return mp_const_false;
    e718:	4b0b      	ldr	r3, [pc, #44]	; (e748 <dict_binary_op+0xe0>)
    e71a:	e00e      	b.n	e73a <dict_binary_op+0xd2>
                while ((next = dict_iter_next(o, &cur)) != NULL) {
    e71c:	f107 0310 	add.w	r3, r7, #16
    e720:	4619      	mov	r1, r3
    e722:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e724:	f7ff feca 	bl	e4bc <dict_iter_next>
    e728:	61b8      	str	r0, [r7, #24]
    e72a:	69bb      	ldr	r3, [r7, #24]
    e72c:	2b00      	cmp	r3, #0
    e72e:	d1d9      	bne.n	e6e4 <dict_binary_op+0x7c>
                    }
                }
                return mp_const_true;
    e730:	4b06      	ldr	r3, [pc, #24]	; (e74c <dict_binary_op+0xe4>)
    e732:	e002      	b.n	e73a <dict_binary_op+0xd2>
            } else {
                // dict is not equal to instance of any other type
                return mp_const_false;
    e734:	4b04      	ldr	r3, [pc, #16]	; (e748 <dict_binary_op+0xe0>)
    e736:	e000      	b.n	e73a <dict_binary_op+0xd2>
            }
        }
        default:
            // op not supported
            return MP_OBJ_NULL;
    e738:	2300      	movs	r3, #0
    }
}
    e73a:	4618      	mov	r0, r3
    e73c:	3728      	adds	r7, #40	; 0x28
    e73e:	46bd      	mov	sp, r7
    e740:	bd80      	pop	{r7, pc}
    e742:	bf00      	nop
    e744:	000200e8 	.word	0x000200e8
    e748:	0001fc3c 	.word	0x0001fc3c
    e74c:	0001fc44 	.word	0x0001fc44

0000e750 <mp_obj_dict_get>:

// TODO: Make sure this is inlined in dict_subscr() below.
mp_obj_t mp_obj_dict_get(mp_obj_t self_in, mp_obj_t index) {
    e750:	b580      	push	{r7, lr}
    e752:	b084      	sub	sp, #16
    e754:	af00      	add	r7, sp, #0
    e756:	6078      	str	r0, [r7, #4]
    e758:	6039      	str	r1, [r7, #0]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e75a:	687b      	ldr	r3, [r7, #4]
    e75c:	60fb      	str	r3, [r7, #12]
    mp_map_elem_t *elem = mp_map_lookup(&self->map, index, MP_MAP_LOOKUP);
    e75e:	68fb      	ldr	r3, [r7, #12]
    e760:	3304      	adds	r3, #4
    e762:	2200      	movs	r2, #0
    e764:	6839      	ldr	r1, [r7, #0]
    e766:	4618      	mov	r0, r3
    e768:	f7fe feaa 	bl	d4c0 <mp_map_lookup>
    e76c:	60b8      	str	r0, [r7, #8]
    if (elem == NULL) {
    e76e:	68bb      	ldr	r3, [r7, #8]
    e770:	2b00      	cmp	r3, #0
    e772:	d107      	bne.n	e784 <mp_obj_dict_get+0x34>
        nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, index));
    e774:	6839      	ldr	r1, [r7, #0]
    e776:	4806      	ldr	r0, [pc, #24]	; (e790 <mp_obj_dict_get+0x40>)
    e778:	f000 fea0 	bl	f4bc <mp_obj_new_exception_arg1>
    e77c:	4603      	mov	r3, r0
    e77e:	4618      	mov	r0, r3
    e780:	f7f1 fdae 	bl	2e0 <nlr_jump>
    } else {
        return elem->value;
    e784:	68bb      	ldr	r3, [r7, #8]
    e786:	685b      	ldr	r3, [r3, #4]
    }
}
    e788:	4618      	mov	r0, r3
    e78a:	3710      	adds	r7, #16
    e78c:	46bd      	mov	sp, r7
    e78e:	bd80      	pop	{r7, pc}
    e790:	00020584 	.word	0x00020584

0000e794 <dict_subscr>:

STATIC mp_obj_t dict_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
    e794:	b580      	push	{r7, lr}
    e796:	b086      	sub	sp, #24
    e798:	af00      	add	r7, sp, #0
    e79a:	60f8      	str	r0, [r7, #12]
    e79c:	60b9      	str	r1, [r7, #8]
    e79e:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_NULL) {
    e7a0:	687b      	ldr	r3, [r7, #4]
    e7a2:	2b00      	cmp	r3, #0
    e7a4:	d105      	bne.n	e7b2 <dict_subscr+0x1e>
        // delete
        mp_obj_dict_delete(self_in, index);
    e7a6:	68b9      	ldr	r1, [r7, #8]
    e7a8:	68f8      	ldr	r0, [r7, #12]
    e7aa:	f000 fd21 	bl	f1f0 <mp_obj_dict_delete>
        return mp_const_none;
    e7ae:	4b13      	ldr	r3, [pc, #76]	; (e7fc <dict_subscr+0x68>)
    e7b0:	e020      	b.n	e7f4 <dict_subscr+0x60>
    } else if (value == MP_OBJ_SENTINEL) {
    e7b2:	687b      	ldr	r3, [r7, #4]
    e7b4:	2b08      	cmp	r3, #8
    e7b6:	d117      	bne.n	e7e8 <dict_subscr+0x54>
        // load
        mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e7b8:	68fb      	ldr	r3, [r7, #12]
    e7ba:	617b      	str	r3, [r7, #20]
        mp_map_elem_t *elem = mp_map_lookup(&self->map, index, MP_MAP_LOOKUP);
    e7bc:	697b      	ldr	r3, [r7, #20]
    e7be:	3304      	adds	r3, #4
    e7c0:	2200      	movs	r2, #0
    e7c2:	68b9      	ldr	r1, [r7, #8]
    e7c4:	4618      	mov	r0, r3
    e7c6:	f7fe fe7b 	bl	d4c0 <mp_map_lookup>
    e7ca:	6138      	str	r0, [r7, #16]
        if (elem == NULL) {
    e7cc:	693b      	ldr	r3, [r7, #16]
    e7ce:	2b00      	cmp	r3, #0
    e7d0:	d107      	bne.n	e7e2 <dict_subscr+0x4e>
            nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, index));
    e7d2:	68b9      	ldr	r1, [r7, #8]
    e7d4:	480a      	ldr	r0, [pc, #40]	; (e800 <dict_subscr+0x6c>)
    e7d6:	f000 fe71 	bl	f4bc <mp_obj_new_exception_arg1>
    e7da:	4603      	mov	r3, r0
    e7dc:	4618      	mov	r0, r3
    e7de:	f7f1 fd7f 	bl	2e0 <nlr_jump>
        } else {
            return elem->value;
    e7e2:	693b      	ldr	r3, [r7, #16]
    e7e4:	685b      	ldr	r3, [r3, #4]
    e7e6:	e005      	b.n	e7f4 <dict_subscr+0x60>
        }
    } else {
        // store
        mp_obj_dict_store(self_in, index, value);
    e7e8:	687a      	ldr	r2, [r7, #4]
    e7ea:	68b9      	ldr	r1, [r7, #8]
    e7ec:	68f8      	ldr	r0, [r7, #12]
    e7ee:	f000 fcc7 	bl	f180 <mp_obj_dict_store>
        return mp_const_none;
    e7f2:	4b02      	ldr	r3, [pc, #8]	; (e7fc <dict_subscr+0x68>)
    }
}
    e7f4:	4618      	mov	r0, r3
    e7f6:	3718      	adds	r7, #24
    e7f8:	46bd      	mov	sp, r7
    e7fa:	bd80      	pop	{r7, pc}
    e7fc:	00021534 	.word	0x00021534
    e800:	00020584 	.word	0x00020584

0000e804 <mp_ensure_not_fixed>:

/******************************************************************************/
/* dict methods                                                               */

STATIC void mp_ensure_not_fixed(const mp_obj_dict_t *dict) {
    e804:	b580      	push	{r7, lr}
    e806:	b082      	sub	sp, #8
    e808:	af00      	add	r7, sp, #0
    e80a:	6078      	str	r0, [r7, #4]
    if (dict->map.is_fixed) {
    e80c:	687b      	ldr	r3, [r7, #4]
    e80e:	791b      	ldrb	r3, [r3, #4]
    e810:	f003 0302 	and.w	r3, r3, #2
    e814:	b2db      	uxtb	r3, r3
    e816:	2b00      	cmp	r3, #0
    e818:	d002      	beq.n	e820 <mp_ensure_not_fixed+0x1c>
        mp_raise_TypeError(NULL);
    e81a:	2000      	movs	r0, #0
    e81c:	f7fe fbe0 	bl	cfe0 <mp_raise_TypeError>
    }
}
    e820:	bf00      	nop
    e822:	3708      	adds	r7, #8
    e824:	46bd      	mov	sp, r7
    e826:	bd80      	pop	{r7, pc}

0000e828 <dict_clear>:

STATIC mp_obj_t dict_clear(mp_obj_t self_in) {
    e828:	b580      	push	{r7, lr}
    e82a:	b084      	sub	sp, #16
    e82c:	af00      	add	r7, sp, #0
    e82e:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    e830:	6878      	ldr	r0, [r7, #4]
    e832:	f7ff fdfb 	bl	e42c <MP_OBJ_IS_OBJ>
    e836:	4603      	mov	r3, r0
    e838:	f083 0301 	eor.w	r3, r3, #1
    e83c:	b2db      	uxtb	r3, r3
    e83e:	2b00      	cmp	r3, #0
    e840:	d105      	bne.n	e84e <dict_clear+0x26>
    e842:	687b      	ldr	r3, [r7, #4]
    e844:	681b      	ldr	r3, [r3, #0]
    e846:	68db      	ldr	r3, [r3, #12]
    e848:	4a0b      	ldr	r2, [pc, #44]	; (e878 <dict_clear+0x50>)
    e84a:	4293      	cmp	r3, r2
    e84c:	d005      	beq.n	e85a <dict_clear+0x32>
    e84e:	4b0b      	ldr	r3, [pc, #44]	; (e87c <dict_clear+0x54>)
    e850:	4a0b      	ldr	r2, [pc, #44]	; (e880 <dict_clear+0x58>)
    e852:	21cd      	movs	r1, #205	; 0xcd
    e854:	480b      	ldr	r0, [pc, #44]	; (e884 <dict_clear+0x5c>)
    e856:	f00c fd89 	bl	1b36c <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e85a:	687b      	ldr	r3, [r7, #4]
    e85c:	60fb      	str	r3, [r7, #12]
    mp_ensure_not_fixed(self);
    e85e:	68f8      	ldr	r0, [r7, #12]
    e860:	f7ff ffd0 	bl	e804 <mp_ensure_not_fixed>

    mp_map_clear(&self->map);
    e864:	68fb      	ldr	r3, [r7, #12]
    e866:	3304      	adds	r3, #4
    e868:	4618      	mov	r0, r3
    e86a:	f7fe fda7 	bl	d3bc <mp_map_clear>

    return mp_const_none;
    e86e:	4b06      	ldr	r3, [pc, #24]	; (e888 <dict_clear+0x60>)
}
    e870:	4618      	mov	r0, r3
    e872:	3710      	adds	r7, #16
    e874:	46bd      	mov	sp, r7
    e876:	bd80      	pop	{r7, pc}
    e878:	0000e5b1 	.word	0x0000e5b1
    e87c:	0001fd10 	.word	0x0001fd10
    e880:	00020124 	.word	0x00020124
    e884:	0001fd70 	.word	0x0001fd70
    e888:	00021534 	.word	0x00021534

0000e88c <dict_copy>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_clear_obj, dict_clear);

STATIC mp_obj_t dict_copy(mp_obj_t self_in) {
    e88c:	b580      	push	{r7, lr}
    e88e:	b086      	sub	sp, #24
    e890:	af00      	add	r7, sp, #0
    e892:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    e894:	6878      	ldr	r0, [r7, #4]
    e896:	f7ff fdc9 	bl	e42c <MP_OBJ_IS_OBJ>
    e89a:	4603      	mov	r3, r0
    e89c:	f083 0301 	eor.w	r3, r3, #1
    e8a0:	b2db      	uxtb	r3, r3
    e8a2:	2b00      	cmp	r3, #0
    e8a4:	d105      	bne.n	e8b2 <dict_copy+0x26>
    e8a6:	687b      	ldr	r3, [r7, #4]
    e8a8:	681b      	ldr	r3, [r3, #0]
    e8aa:	68db      	ldr	r3, [r3, #12]
    e8ac:	4a23      	ldr	r2, [pc, #140]	; (e93c <dict_copy+0xb0>)
    e8ae:	4293      	cmp	r3, r2
    e8b0:	d005      	beq.n	e8be <dict_copy+0x32>
    e8b2:	4b23      	ldr	r3, [pc, #140]	; (e940 <dict_copy+0xb4>)
    e8b4:	4a23      	ldr	r2, [pc, #140]	; (e944 <dict_copy+0xb8>)
    e8b6:	21d8      	movs	r1, #216	; 0xd8
    e8b8:	4823      	ldr	r0, [pc, #140]	; (e948 <dict_copy+0xbc>)
    e8ba:	f00c fd57 	bl	1b36c <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    e8be:	687b      	ldr	r3, [r7, #4]
    e8c0:	617b      	str	r3, [r7, #20]
    mp_obj_t other_out = mp_obj_new_dict(self->map.alloc);
    e8c2:	697b      	ldr	r3, [r7, #20]
    e8c4:	689b      	ldr	r3, [r3, #8]
    e8c6:	4618      	mov	r0, r3
    e8c8:	f000 fc38 	bl	f13c <mp_obj_new_dict>
    e8cc:	6138      	str	r0, [r7, #16]
    mp_obj_dict_t *other = MP_OBJ_TO_PTR(other_out);
    e8ce:	693b      	ldr	r3, [r7, #16]
    e8d0:	60fb      	str	r3, [r7, #12]
    other->base.type = self->base.type;
    e8d2:	697b      	ldr	r3, [r7, #20]
    e8d4:	681a      	ldr	r2, [r3, #0]
    e8d6:	68fb      	ldr	r3, [r7, #12]
    e8d8:	601a      	str	r2, [r3, #0]
    other->map.used = self->map.used;
    e8da:	697b      	ldr	r3, [r7, #20]
    e8dc:	685b      	ldr	r3, [r3, #4]
    e8de:	f3c3 01dc 	ubfx	r1, r3, #3, #29
    e8e2:	68fa      	ldr	r2, [r7, #12]
    e8e4:	6853      	ldr	r3, [r2, #4]
    e8e6:	f361 03df 	bfi	r3, r1, #3, #29
    e8ea:	6053      	str	r3, [r2, #4]
    other->map.all_keys_are_qstrs = self->map.all_keys_are_qstrs;
    e8ec:	697b      	ldr	r3, [r7, #20]
    e8ee:	791b      	ldrb	r3, [r3, #4]
    e8f0:	f3c3 0300 	ubfx	r3, r3, #0, #1
    e8f4:	b2d9      	uxtb	r1, r3
    e8f6:	68fa      	ldr	r2, [r7, #12]
    e8f8:	7913      	ldrb	r3, [r2, #4]
    e8fa:	f361 0300 	bfi	r3, r1, #0, #1
    e8fe:	7113      	strb	r3, [r2, #4]
    other->map.is_fixed = 0;
    e900:	68fa      	ldr	r2, [r7, #12]
    e902:	7913      	ldrb	r3, [r2, #4]
    e904:	f36f 0341 	bfc	r3, #1, #1
    e908:	7113      	strb	r3, [r2, #4]
    other->map.is_ordered = self->map.is_ordered;
    e90a:	697b      	ldr	r3, [r7, #20]
    e90c:	791b      	ldrb	r3, [r3, #4]
    e90e:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e912:	b2d9      	uxtb	r1, r3
    e914:	68fa      	ldr	r2, [r7, #12]
    e916:	7913      	ldrb	r3, [r2, #4]
    e918:	f361 0382 	bfi	r3, r1, #2, #1
    e91c:	7113      	strb	r3, [r2, #4]
    memcpy(other->map.table, self->map.table, self->map.alloc * sizeof(mp_map_elem_t));
    e91e:	68fb      	ldr	r3, [r7, #12]
    e920:	68d8      	ldr	r0, [r3, #12]
    e922:	697b      	ldr	r3, [r7, #20]
    e924:	68d9      	ldr	r1, [r3, #12]
    e926:	697b      	ldr	r3, [r7, #20]
    e928:	689b      	ldr	r3, [r3, #8]
    e92a:	00db      	lsls	r3, r3, #3
    e92c:	461a      	mov	r2, r3
    e92e:	f00d fac9 	bl	1bec4 <memcpy>
    return other_out;
    e932:	693b      	ldr	r3, [r7, #16]
}
    e934:	4618      	mov	r0, r3
    e936:	3718      	adds	r7, #24
    e938:	46bd      	mov	sp, r7
    e93a:	bd80      	pop	{r7, pc}
    e93c:	0000e5b1 	.word	0x0000e5b1
    e940:	0001fd10 	.word	0x0001fd10
    e944:	00020130 	.word	0x00020130
    e948:	0001fd70 	.word	0x0001fd70

0000e94c <dict_fromkeys>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_copy_obj, dict_copy);

// this is a classmethod
STATIC mp_obj_t dict_fromkeys(size_t n_args, const mp_obj_t *args) {
    e94c:	b580      	push	{r7, lr}
    e94e:	b088      	sub	sp, #32
    e950:	af00      	add	r7, sp, #0
    e952:	6078      	str	r0, [r7, #4]
    e954:	6039      	str	r1, [r7, #0]
    mp_obj_t iter = mp_getiter(args[1], NULL);
    e956:	683b      	ldr	r3, [r7, #0]
    e958:	3304      	adds	r3, #4
    e95a:	681b      	ldr	r3, [r3, #0]
    e95c:	2100      	movs	r1, #0
    e95e:	4618      	mov	r0, r3
    e960:	f7fd ffee 	bl	c940 <mp_getiter>
    e964:	6178      	str	r0, [r7, #20]
    mp_obj_t value = mp_const_none;
    e966:	4b1c      	ldr	r3, [pc, #112]	; (e9d8 <dict_fromkeys+0x8c>)
    e968:	61fb      	str	r3, [r7, #28]
    mp_obj_t next = MP_OBJ_NULL;
    e96a:	2300      	movs	r3, #0
    e96c:	613b      	str	r3, [r7, #16]

    if (n_args > 2) {
    e96e:	687b      	ldr	r3, [r7, #4]
    e970:	2b02      	cmp	r3, #2
    e972:	d902      	bls.n	e97a <dict_fromkeys+0x2e>
        value = args[2];
    e974:	683b      	ldr	r3, [r7, #0]
    e976:	689b      	ldr	r3, [r3, #8]
    e978:	61fb      	str	r3, [r7, #28]
    }

    // optimisation to allocate result based on len of argument
    mp_obj_t self_out;
    mp_obj_t len = mp_obj_len_maybe(args[1]);
    e97a:	683b      	ldr	r3, [r7, #0]
    e97c:	3304      	adds	r3, #4
    e97e:	681b      	ldr	r3, [r3, #0]
    e980:	4618      	mov	r0, r3
    e982:	f7ff fa9d 	bl	dec0 <mp_obj_len_maybe>
    e986:	60f8      	str	r0, [r7, #12]
    if (len == MP_OBJ_NULL) {
    e988:	68fb      	ldr	r3, [r7, #12]
    e98a:	2b00      	cmp	r3, #0
    e98c:	d104      	bne.n	e998 <dict_fromkeys+0x4c>
        /* object's type doesn't have a __len__ slot */
        self_out = mp_obj_new_dict(0);
    e98e:	2000      	movs	r0, #0
    e990:	f000 fbd4 	bl	f13c <mp_obj_new_dict>
    e994:	61b8      	str	r0, [r7, #24]
    e996:	e005      	b.n	e9a4 <dict_fromkeys+0x58>
    } else {
        self_out = mp_obj_new_dict(MP_OBJ_SMALL_INT_VALUE(len));
    e998:	68fb      	ldr	r3, [r7, #12]
    e99a:	105b      	asrs	r3, r3, #1
    e99c:	4618      	mov	r0, r3
    e99e:	f000 fbcd 	bl	f13c <mp_obj_new_dict>
    e9a2:	61b8      	str	r0, [r7, #24]
    }

    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_out);
    e9a4:	69bb      	ldr	r3, [r7, #24]
    e9a6:	60bb      	str	r3, [r7, #8]
    while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    e9a8:	e009      	b.n	e9be <dict_fromkeys+0x72>
        mp_map_lookup(&self->map, next, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    e9aa:	68bb      	ldr	r3, [r7, #8]
    e9ac:	3304      	adds	r3, #4
    e9ae:	2201      	movs	r2, #1
    e9b0:	6939      	ldr	r1, [r7, #16]
    e9b2:	4618      	mov	r0, r3
    e9b4:	f7fe fd84 	bl	d4c0 <mp_map_lookup>
    e9b8:	4602      	mov	r2, r0
    e9ba:	69fb      	ldr	r3, [r7, #28]
    e9bc:	6053      	str	r3, [r2, #4]
    while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    e9be:	6978      	ldr	r0, [r7, #20]
    e9c0:	f7fe f840 	bl	ca44 <mp_iternext>
    e9c4:	6138      	str	r0, [r7, #16]
    e9c6:	693b      	ldr	r3, [r7, #16]
    e9c8:	2b04      	cmp	r3, #4
    e9ca:	d1ee      	bne.n	e9aa <dict_fromkeys+0x5e>
    }

    return self_out;
    e9cc:	69bb      	ldr	r3, [r7, #24]
}
    e9ce:	4618      	mov	r0, r3
    e9d0:	3720      	adds	r7, #32
    e9d2:	46bd      	mov	sp, r7
    e9d4:	bd80      	pop	{r7, pc}
    e9d6:	bf00      	nop
    e9d8:	00021534 	.word	0x00021534

0000e9dc <dict_get_helper>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_fromkeys_fun_obj, 2, 3, dict_fromkeys);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(dict_fromkeys_obj, MP_ROM_PTR(&dict_fromkeys_fun_obj));

STATIC mp_obj_t dict_get_helper(size_t n_args, const mp_obj_t *args, mp_map_lookup_kind_t lookup_kind) {
    e9dc:	b580      	push	{r7, lr}
    e9de:	b088      	sub	sp, #32
    e9e0:	af00      	add	r7, sp, #0
    e9e2:	60f8      	str	r0, [r7, #12]
    e9e4:	60b9      	str	r1, [r7, #8]
    e9e6:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(args[0]));
    e9e8:	68bb      	ldr	r3, [r7, #8]
    e9ea:	681b      	ldr	r3, [r3, #0]
    e9ec:	4618      	mov	r0, r3
    e9ee:	f7ff fd1d 	bl	e42c <MP_OBJ_IS_OBJ>
    e9f2:	4603      	mov	r3, r0
    e9f4:	f083 0301 	eor.w	r3, r3, #1
    e9f8:	b2db      	uxtb	r3, r3
    e9fa:	2b00      	cmp	r3, #0
    e9fc:	d106      	bne.n	ea0c <dict_get_helper+0x30>
    e9fe:	68bb      	ldr	r3, [r7, #8]
    ea00:	681b      	ldr	r3, [r3, #0]
    ea02:	681b      	ldr	r3, [r3, #0]
    ea04:	68db      	ldr	r3, [r3, #12]
    ea06:	4a28      	ldr	r2, [pc, #160]	; (eaa8 <dict_get_helper+0xcc>)
    ea08:	4293      	cmp	r3, r2
    ea0a:	d006      	beq.n	ea1a <dict_get_helper+0x3e>
    ea0c:	4b27      	ldr	r3, [pc, #156]	; (eaac <dict_get_helper+0xd0>)
    ea0e:	4a28      	ldr	r2, [pc, #160]	; (eab0 <dict_get_helper+0xd4>)
    ea10:	f240 1105 	movw	r1, #261	; 0x105
    ea14:	4827      	ldr	r0, [pc, #156]	; (eab4 <dict_get_helper+0xd8>)
    ea16:	f00c fca9 	bl	1b36c <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(args[0]);
    ea1a:	68bb      	ldr	r3, [r7, #8]
    ea1c:	681b      	ldr	r3, [r3, #0]
    ea1e:	61bb      	str	r3, [r7, #24]
    if (lookup_kind != MP_MAP_LOOKUP) {
    ea20:	687b      	ldr	r3, [r7, #4]
    ea22:	2b00      	cmp	r3, #0
    ea24:	d002      	beq.n	ea2c <dict_get_helper+0x50>
        mp_ensure_not_fixed(self);
    ea26:	69b8      	ldr	r0, [r7, #24]
    ea28:	f7ff feec 	bl	e804 <mp_ensure_not_fixed>
    }
    mp_map_elem_t *elem = mp_map_lookup(&self->map, args[1], lookup_kind);
    ea2c:	69bb      	ldr	r3, [r7, #24]
    ea2e:	1d18      	adds	r0, r3, #4
    ea30:	68bb      	ldr	r3, [r7, #8]
    ea32:	3304      	adds	r3, #4
    ea34:	681b      	ldr	r3, [r3, #0]
    ea36:	687a      	ldr	r2, [r7, #4]
    ea38:	4619      	mov	r1, r3
    ea3a:	f7fe fd41 	bl	d4c0 <mp_map_lookup>
    ea3e:	6178      	str	r0, [r7, #20]
    mp_obj_t value;
    if (elem == NULL || elem->value == MP_OBJ_NULL) {
    ea40:	697b      	ldr	r3, [r7, #20]
    ea42:	2b00      	cmp	r3, #0
    ea44:	d003      	beq.n	ea4e <dict_get_helper+0x72>
    ea46:	697b      	ldr	r3, [r7, #20]
    ea48:	685b      	ldr	r3, [r3, #4]
    ea4a:	2b00      	cmp	r3, #0
    ea4c:	d11d      	bne.n	ea8a <dict_get_helper+0xae>
        if (n_args == 2) {
    ea4e:	68fb      	ldr	r3, [r7, #12]
    ea50:	2b02      	cmp	r3, #2
    ea52:	d110      	bne.n	ea76 <dict_get_helper+0x9a>
            if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    ea54:	687b      	ldr	r3, [r7, #4]
    ea56:	2b02      	cmp	r3, #2
    ea58:	d10a      	bne.n	ea70 <dict_get_helper+0x94>
                nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, args[1]));
    ea5a:	68bb      	ldr	r3, [r7, #8]
    ea5c:	3304      	adds	r3, #4
    ea5e:	681b      	ldr	r3, [r3, #0]
    ea60:	4619      	mov	r1, r3
    ea62:	4815      	ldr	r0, [pc, #84]	; (eab8 <dict_get_helper+0xdc>)
    ea64:	f000 fd2a 	bl	f4bc <mp_obj_new_exception_arg1>
    ea68:	4603      	mov	r3, r0
    ea6a:	4618      	mov	r0, r3
    ea6c:	f7f1 fc38 	bl	2e0 <nlr_jump>
            } else {
                value = mp_const_none;
    ea70:	4b12      	ldr	r3, [pc, #72]	; (eabc <dict_get_helper+0xe0>)
    ea72:	61fb      	str	r3, [r7, #28]
    ea74:	e002      	b.n	ea7c <dict_get_helper+0xa0>
            }
        } else {
            value = args[2];
    ea76:	68bb      	ldr	r3, [r7, #8]
    ea78:	689b      	ldr	r3, [r3, #8]
    ea7a:	61fb      	str	r3, [r7, #28]
        }
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    ea7c:	687b      	ldr	r3, [r7, #4]
    ea7e:	2b01      	cmp	r3, #1
    ea80:	d10c      	bne.n	ea9c <dict_get_helper+0xc0>
            elem->value = value;
    ea82:	697b      	ldr	r3, [r7, #20]
    ea84:	69fa      	ldr	r2, [r7, #28]
    ea86:	605a      	str	r2, [r3, #4]
        if (lookup_kind == MP_MAP_LOOKUP_ADD_IF_NOT_FOUND) {
    ea88:	e008      	b.n	ea9c <dict_get_helper+0xc0>
        }
    } else {
        value = elem->value;
    ea8a:	697b      	ldr	r3, [r7, #20]
    ea8c:	685b      	ldr	r3, [r3, #4]
    ea8e:	61fb      	str	r3, [r7, #28]
        if (lookup_kind == MP_MAP_LOOKUP_REMOVE_IF_FOUND) {
    ea90:	687b      	ldr	r3, [r7, #4]
    ea92:	2b02      	cmp	r3, #2
    ea94:	d102      	bne.n	ea9c <dict_get_helper+0xc0>
            elem->value = MP_OBJ_NULL; // so that GC can collect the deleted value
    ea96:	697b      	ldr	r3, [r7, #20]
    ea98:	2200      	movs	r2, #0
    ea9a:	605a      	str	r2, [r3, #4]
        }
    }
    return value;
    ea9c:	69fb      	ldr	r3, [r7, #28]
}
    ea9e:	4618      	mov	r0, r3
    eaa0:	3720      	adds	r7, #32
    eaa2:	46bd      	mov	sp, r7
    eaa4:	bd80      	pop	{r7, pc}
    eaa6:	bf00      	nop
    eaa8:	0000e5b1 	.word	0x0000e5b1
    eaac:	0001fda8 	.word	0x0001fda8
    eab0:	0002013c 	.word	0x0002013c
    eab4:	0001fd70 	.word	0x0001fd70
    eab8:	00020584 	.word	0x00020584
    eabc:	00021534 	.word	0x00021534

0000eac0 <dict_get>:

STATIC mp_obj_t dict_get(size_t n_args, const mp_obj_t *args) {
    eac0:	b580      	push	{r7, lr}
    eac2:	b082      	sub	sp, #8
    eac4:	af00      	add	r7, sp, #0
    eac6:	6078      	str	r0, [r7, #4]
    eac8:	6039      	str	r1, [r7, #0]
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP);
    eaca:	2200      	movs	r2, #0
    eacc:	6839      	ldr	r1, [r7, #0]
    eace:	6878      	ldr	r0, [r7, #4]
    ead0:	f7ff ff84 	bl	e9dc <dict_get_helper>
    ead4:	4603      	mov	r3, r0
}
    ead6:	4618      	mov	r0, r3
    ead8:	3708      	adds	r7, #8
    eada:	46bd      	mov	sp, r7
    eadc:	bd80      	pop	{r7, pc}
    eade:	bf00      	nop

0000eae0 <dict_pop>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_get_obj, 2, 3, dict_get);

STATIC mp_obj_t dict_pop(size_t n_args, const mp_obj_t *args) {
    eae0:	b580      	push	{r7, lr}
    eae2:	b082      	sub	sp, #8
    eae4:	af00      	add	r7, sp, #0
    eae6:	6078      	str	r0, [r7, #4]
    eae8:	6039      	str	r1, [r7, #0]
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP_REMOVE_IF_FOUND);
    eaea:	2202      	movs	r2, #2
    eaec:	6839      	ldr	r1, [r7, #0]
    eaee:	6878      	ldr	r0, [r7, #4]
    eaf0:	f7ff ff74 	bl	e9dc <dict_get_helper>
    eaf4:	4603      	mov	r3, r0
}
    eaf6:	4618      	mov	r0, r3
    eaf8:	3708      	adds	r7, #8
    eafa:	46bd      	mov	sp, r7
    eafc:	bd80      	pop	{r7, pc}
    eafe:	bf00      	nop

0000eb00 <dict_setdefault>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_pop_obj, 2, 3, dict_pop);

STATIC mp_obj_t dict_setdefault(size_t n_args, const mp_obj_t *args) {
    eb00:	b580      	push	{r7, lr}
    eb02:	b082      	sub	sp, #8
    eb04:	af00      	add	r7, sp, #0
    eb06:	6078      	str	r0, [r7, #4]
    eb08:	6039      	str	r1, [r7, #0]
    return dict_get_helper(n_args, args, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
    eb0a:	2201      	movs	r2, #1
    eb0c:	6839      	ldr	r1, [r7, #0]
    eb0e:	6878      	ldr	r0, [r7, #4]
    eb10:	f7ff ff64 	bl	e9dc <dict_get_helper>
    eb14:	4603      	mov	r3, r0
}
    eb16:	4618      	mov	r0, r3
    eb18:	3708      	adds	r7, #8
    eb1a:	46bd      	mov	sp, r7
    eb1c:	bd80      	pop	{r7, pc}
    eb1e:	bf00      	nop

0000eb20 <dict_popitem>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(dict_setdefault_obj, 2, 3, dict_setdefault);

STATIC mp_obj_t dict_popitem(mp_obj_t self_in) {
    eb20:	b580      	push	{r7, lr}
    eb22:	b088      	sub	sp, #32
    eb24:	af00      	add	r7, sp, #0
    eb26:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    eb28:	6878      	ldr	r0, [r7, #4]
    eb2a:	f7ff fc7f 	bl	e42c <MP_OBJ_IS_OBJ>
    eb2e:	4603      	mov	r3, r0
    eb30:	f083 0301 	eor.w	r3, r3, #1
    eb34:	b2db      	uxtb	r3, r3
    eb36:	2b00      	cmp	r3, #0
    eb38:	d105      	bne.n	eb46 <dict_popitem+0x26>
    eb3a:	687b      	ldr	r3, [r7, #4]
    eb3c:	681b      	ldr	r3, [r3, #0]
    eb3e:	68db      	ldr	r3, [r3, #12]
    eb40:	4a22      	ldr	r2, [pc, #136]	; (ebcc <dict_popitem+0xac>)
    eb42:	4293      	cmp	r3, r2
    eb44:	d006      	beq.n	eb54 <dict_popitem+0x34>
    eb46:	4b22      	ldr	r3, [pc, #136]	; (ebd0 <dict_popitem+0xb0>)
    eb48:	4a22      	ldr	r2, [pc, #136]	; (ebd4 <dict_popitem+0xb4>)
    eb4a:	f44f 7199 	mov.w	r1, #306	; 0x132
    eb4e:	4822      	ldr	r0, [pc, #136]	; (ebd8 <dict_popitem+0xb8>)
    eb50:	f00c fc0c 	bl	1b36c <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    eb54:	687b      	ldr	r3, [r7, #4]
    eb56:	61fb      	str	r3, [r7, #28]
    mp_ensure_not_fixed(self);
    eb58:	69f8      	ldr	r0, [r7, #28]
    eb5a:	f7ff fe53 	bl	e804 <mp_ensure_not_fixed>
    size_t cur = 0;
    eb5e:	2300      	movs	r3, #0
    eb60:	613b      	str	r3, [r7, #16]
    mp_map_elem_t *next = dict_iter_next(self, &cur);
    eb62:	f107 0310 	add.w	r3, r7, #16
    eb66:	4619      	mov	r1, r3
    eb68:	69f8      	ldr	r0, [r7, #28]
    eb6a:	f7ff fca7 	bl	e4bc <dict_iter_next>
    eb6e:	61b8      	str	r0, [r7, #24]
    if (next == NULL) {
    eb70:	69bb      	ldr	r3, [r7, #24]
    eb72:	2b00      	cmp	r3, #0
    eb74:	d103      	bne.n	eb7e <dict_popitem+0x5e>
        mp_raise_msg(&mp_type_KeyError, "popitem(): dictionary is empty");
    eb76:	4919      	ldr	r1, [pc, #100]	; (ebdc <dict_popitem+0xbc>)
    eb78:	4819      	ldr	r0, [pc, #100]	; (ebe0 <dict_popitem+0xc0>)
    eb7a:	f7fe fa0f 	bl	cf9c <mp_raise_msg>
    }
    self->map.used--;
    eb7e:	69fb      	ldr	r3, [r7, #28]
    eb80:	685b      	ldr	r3, [r3, #4]
    eb82:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    eb86:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    eb8a:	3b01      	subs	r3, #1
    eb8c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    eb90:	69f9      	ldr	r1, [r7, #28]
    eb92:	684a      	ldr	r2, [r1, #4]
    eb94:	f363 02df 	bfi	r2, r3, #3, #29
    eb98:	604a      	str	r2, [r1, #4]
    mp_obj_t items[] = {next->key, next->value};
    eb9a:	69bb      	ldr	r3, [r7, #24]
    eb9c:	681b      	ldr	r3, [r3, #0]
    eb9e:	60bb      	str	r3, [r7, #8]
    eba0:	69bb      	ldr	r3, [r7, #24]
    eba2:	685b      	ldr	r3, [r3, #4]
    eba4:	60fb      	str	r3, [r7, #12]
    next->key = MP_OBJ_SENTINEL; // must mark key as sentinel to indicate that it was deleted
    eba6:	69bb      	ldr	r3, [r7, #24]
    eba8:	2208      	movs	r2, #8
    ebaa:	601a      	str	r2, [r3, #0]
    next->value = MP_OBJ_NULL;
    ebac:	69bb      	ldr	r3, [r7, #24]
    ebae:	2200      	movs	r2, #0
    ebb0:	605a      	str	r2, [r3, #4]
    mp_obj_t tuple = mp_obj_new_tuple(2, items);
    ebb2:	f107 0308 	add.w	r3, r7, #8
    ebb6:	4619      	mov	r1, r3
    ebb8:	2002      	movs	r0, #2
    ebba:	f007 f919 	bl	15df0 <mp_obj_new_tuple>
    ebbe:	6178      	str	r0, [r7, #20]

    return tuple;
    ebc0:	697b      	ldr	r3, [r7, #20]
}
    ebc2:	4618      	mov	r0, r3
    ebc4:	3720      	adds	r7, #32
    ebc6:	46bd      	mov	sp, r7
    ebc8:	bd80      	pop	{r7, pc}
    ebca:	bf00      	nop
    ebcc:	0000e5b1 	.word	0x0000e5b1
    ebd0:	0001fd10 	.word	0x0001fd10
    ebd4:	0002014c 	.word	0x0002014c
    ebd8:	0001fd70 	.word	0x0001fd70
    ebdc:	0001fe2c 	.word	0x0001fe2c
    ebe0:	00020584 	.word	0x00020584

0000ebe4 <dict_update>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_popitem_obj, dict_popitem);

STATIC mp_obj_t dict_update(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
    ebe4:	b580      	push	{r7, lr}
    ebe6:	b090      	sub	sp, #64	; 0x40
    ebe8:	af02      	add	r7, sp, #8
    ebea:	60f8      	str	r0, [r7, #12]
    ebec:	60b9      	str	r1, [r7, #8]
    ebee:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(args[0]));
    ebf0:	68bb      	ldr	r3, [r7, #8]
    ebf2:	681b      	ldr	r3, [r3, #0]
    ebf4:	4618      	mov	r0, r3
    ebf6:	f7ff fc19 	bl	e42c <MP_OBJ_IS_OBJ>
    ebfa:	4603      	mov	r3, r0
    ebfc:	f083 0301 	eor.w	r3, r3, #1
    ec00:	b2db      	uxtb	r3, r3
    ec02:	2b00      	cmp	r3, #0
    ec04:	d106      	bne.n	ec14 <dict_update+0x30>
    ec06:	68bb      	ldr	r3, [r7, #8]
    ec08:	681b      	ldr	r3, [r3, #0]
    ec0a:	681b      	ldr	r3, [r3, #0]
    ec0c:	68db      	ldr	r3, [r3, #12]
    ec0e:	4a5d      	ldr	r2, [pc, #372]	; (ed84 <dict_update+0x1a0>)
    ec10:	4293      	cmp	r3, r2
    ec12:	d006      	beq.n	ec22 <dict_update+0x3e>
    ec14:	4b5c      	ldr	r3, [pc, #368]	; (ed88 <dict_update+0x1a4>)
    ec16:	4a5d      	ldr	r2, [pc, #372]	; (ed8c <dict_update+0x1a8>)
    ec18:	f240 1145 	movw	r1, #325	; 0x145
    ec1c:	485c      	ldr	r0, [pc, #368]	; (ed90 <dict_update+0x1ac>)
    ec1e:	f00c fba5 	bl	1b36c <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(args[0]);
    ec22:	68bb      	ldr	r3, [r7, #8]
    ec24:	681b      	ldr	r3, [r3, #0]
    ec26:	633b      	str	r3, [r7, #48]	; 0x30
    mp_ensure_not_fixed(self);
    ec28:	6b38      	ldr	r0, [r7, #48]	; 0x30
    ec2a:	f7ff fdeb 	bl	e804 <mp_ensure_not_fixed>

    mp_arg_check_num(n_args, kwargs->used, 1, 2, true);
    ec2e:	687b      	ldr	r3, [r7, #4]
    ec30:	681b      	ldr	r3, [r3, #0]
    ec32:	f3c3 03dc 	ubfx	r3, r3, #3, #29
    ec36:	4619      	mov	r1, r3
    ec38:	2301      	movs	r3, #1
    ec3a:	9300      	str	r3, [sp, #0]
    ec3c:	2302      	movs	r3, #2
    ec3e:	2201      	movs	r2, #1
    ec40:	68f8      	ldr	r0, [r7, #12]
    ec42:	f7fe f9f3 	bl	d02c <mp_arg_check_num>

    if (n_args == 2) {
    ec46:	68fb      	ldr	r3, [r7, #12]
    ec48:	2b02      	cmp	r3, #2
    ec4a:	d16f      	bne.n	ed2c <dict_update+0x148>
        // given a positional argument

        if (MP_OBJ_IS_DICT_TYPE(args[1])) {
    ec4c:	68bb      	ldr	r3, [r7, #8]
    ec4e:	3304      	adds	r3, #4
    ec50:	681b      	ldr	r3, [r3, #0]
    ec52:	4618      	mov	r0, r3
    ec54:	f7ff fbea 	bl	e42c <MP_OBJ_IS_OBJ>
    ec58:	4603      	mov	r3, r0
    ec5a:	2b00      	cmp	r3, #0
    ec5c:	d02d      	beq.n	ecba <dict_update+0xd6>
    ec5e:	68bb      	ldr	r3, [r7, #8]
    ec60:	3304      	adds	r3, #4
    ec62:	681b      	ldr	r3, [r3, #0]
    ec64:	681b      	ldr	r3, [r3, #0]
    ec66:	68db      	ldr	r3, [r3, #12]
    ec68:	4a46      	ldr	r2, [pc, #280]	; (ed84 <dict_update+0x1a0>)
    ec6a:	4293      	cmp	r3, r2
    ec6c:	d125      	bne.n	ecba <dict_update+0xd6>
            // update from other dictionary (make sure other is not self)
            if (args[1] != args[0]) {
    ec6e:	68bb      	ldr	r3, [r7, #8]
    ec70:	3304      	adds	r3, #4
    ec72:	681a      	ldr	r2, [r3, #0]
    ec74:	68bb      	ldr	r3, [r7, #8]
    ec76:	681b      	ldr	r3, [r3, #0]
    ec78:	429a      	cmp	r2, r3
    ec7a:	d057      	beq.n	ed2c <dict_update+0x148>
                size_t cur = 0;
    ec7c:	2300      	movs	r3, #0
    ec7e:	613b      	str	r3, [r7, #16]
                mp_map_elem_t *elem = NULL;
    ec80:	2300      	movs	r3, #0
    ec82:	62fb      	str	r3, [r7, #44]	; 0x2c
                while ((elem = dict_iter_next((mp_obj_dict_t*)MP_OBJ_TO_PTR(args[1]), &cur)) != NULL) {
    ec84:	e00b      	b.n	ec9e <dict_update+0xba>
                    mp_map_lookup(&self->map, elem->key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = elem->value;
    ec86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ec88:	1d18      	adds	r0, r3, #4
    ec8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ec8c:	681b      	ldr	r3, [r3, #0]
    ec8e:	2201      	movs	r2, #1
    ec90:	4619      	mov	r1, r3
    ec92:	f7fe fc15 	bl	d4c0 <mp_map_lookup>
    ec96:	4602      	mov	r2, r0
    ec98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ec9a:	685b      	ldr	r3, [r3, #4]
    ec9c:	6053      	str	r3, [r2, #4]
                while ((elem = dict_iter_next((mp_obj_dict_t*)MP_OBJ_TO_PTR(args[1]), &cur)) != NULL) {
    ec9e:	68bb      	ldr	r3, [r7, #8]
    eca0:	3304      	adds	r3, #4
    eca2:	681b      	ldr	r3, [r3, #0]
    eca4:	f107 0210 	add.w	r2, r7, #16
    eca8:	4611      	mov	r1, r2
    ecaa:	4618      	mov	r0, r3
    ecac:	f7ff fc06 	bl	e4bc <dict_iter_next>
    ecb0:	62f8      	str	r0, [r7, #44]	; 0x2c
    ecb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ecb4:	2b00      	cmp	r3, #0
    ecb6:	d1e6      	bne.n	ec86 <dict_update+0xa2>
            if (args[1] != args[0]) {
    ecb8:	e038      	b.n	ed2c <dict_update+0x148>
                }
            }
        } else {
            // update from a generic iterable of pairs
            mp_obj_t iter = mp_getiter(args[1], NULL);
    ecba:	68bb      	ldr	r3, [r7, #8]
    ecbc:	3304      	adds	r3, #4
    ecbe:	681b      	ldr	r3, [r3, #0]
    ecc0:	2100      	movs	r1, #0
    ecc2:	4618      	mov	r0, r3
    ecc4:	f7fd fe3c 	bl	c940 <mp_getiter>
    ecc8:	62b8      	str	r0, [r7, #40]	; 0x28
            mp_obj_t next = MP_OBJ_NULL;
    ecca:	2300      	movs	r3, #0
    eccc:	627b      	str	r3, [r7, #36]	; 0x24
            while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    ecce:	e026      	b.n	ed1e <dict_update+0x13a>
                mp_obj_t inneriter = mp_getiter(next, NULL);
    ecd0:	2100      	movs	r1, #0
    ecd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
    ecd4:	f7fd fe34 	bl	c940 <mp_getiter>
    ecd8:	6238      	str	r0, [r7, #32]
                mp_obj_t key = mp_iternext(inneriter);
    ecda:	6a38      	ldr	r0, [r7, #32]
    ecdc:	f7fd feb2 	bl	ca44 <mp_iternext>
    ece0:	61f8      	str	r0, [r7, #28]
                mp_obj_t value = mp_iternext(inneriter);
    ece2:	6a38      	ldr	r0, [r7, #32]
    ece4:	f7fd feae 	bl	ca44 <mp_iternext>
    ece8:	61b8      	str	r0, [r7, #24]
                mp_obj_t stop = mp_iternext(inneriter);
    ecea:	6a38      	ldr	r0, [r7, #32]
    ecec:	f7fd feaa 	bl	ca44 <mp_iternext>
    ecf0:	6178      	str	r0, [r7, #20]
                if (key == MP_OBJ_STOP_ITERATION
    ecf2:	69fb      	ldr	r3, [r7, #28]
    ecf4:	2b04      	cmp	r3, #4
    ecf6:	d005      	beq.n	ed04 <dict_update+0x120>
                    || value == MP_OBJ_STOP_ITERATION
    ecf8:	69bb      	ldr	r3, [r7, #24]
    ecfa:	2b04      	cmp	r3, #4
    ecfc:	d002      	beq.n	ed04 <dict_update+0x120>
                    || stop != MP_OBJ_STOP_ITERATION) {
    ecfe:	697b      	ldr	r3, [r7, #20]
    ed00:	2b04      	cmp	r3, #4
    ed02:	d002      	beq.n	ed0a <dict_update+0x126>
                    mp_raise_ValueError("dict update sequence has wrong length");
    ed04:	4823      	ldr	r0, [pc, #140]	; (ed94 <dict_update+0x1b0>)
    ed06:	f7fe f961 	bl	cfcc <mp_raise_ValueError>
                } else {
                    mp_map_lookup(&self->map, key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    ed0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ed0c:	3304      	adds	r3, #4
    ed0e:	2201      	movs	r2, #1
    ed10:	69f9      	ldr	r1, [r7, #28]
    ed12:	4618      	mov	r0, r3
    ed14:	f7fe fbd4 	bl	d4c0 <mp_map_lookup>
    ed18:	4602      	mov	r2, r0
    ed1a:	69bb      	ldr	r3, [r7, #24]
    ed1c:	6053      	str	r3, [r2, #4]
            while ((next = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
    ed1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ed20:	f7fd fe90 	bl	ca44 <mp_iternext>
    ed24:	6278      	str	r0, [r7, #36]	; 0x24
    ed26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ed28:	2b04      	cmp	r3, #4
    ed2a:	d1d1      	bne.n	ecd0 <dict_update+0xec>
            }
        }
    }

    // update the dict with any keyword args
    for (size_t i = 0; i < kwargs->alloc; i++) {
    ed2c:	2300      	movs	r3, #0
    ed2e:	637b      	str	r3, [r7, #52]	; 0x34
    ed30:	e01d      	b.n	ed6e <dict_update+0x18a>
        if (MP_MAP_SLOT_IS_FILLED(kwargs, i)) {
    ed32:	6b79      	ldr	r1, [r7, #52]	; 0x34
    ed34:	6878      	ldr	r0, [r7, #4]
    ed36:	f7ff fb8b 	bl	e450 <MP_MAP_SLOT_IS_FILLED>
    ed3a:	4603      	mov	r3, r0
    ed3c:	2b00      	cmp	r3, #0
    ed3e:	d013      	beq.n	ed68 <dict_update+0x184>
            mp_map_lookup(&self->map, kwargs->table[i].key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = kwargs->table[i].value;
    ed40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ed42:	1d18      	adds	r0, r3, #4
    ed44:	687b      	ldr	r3, [r7, #4]
    ed46:	689a      	ldr	r2, [r3, #8]
    ed48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ed4a:	00db      	lsls	r3, r3, #3
    ed4c:	4413      	add	r3, r2
    ed4e:	681b      	ldr	r3, [r3, #0]
    ed50:	2201      	movs	r2, #1
    ed52:	4619      	mov	r1, r3
    ed54:	f7fe fbb4 	bl	d4c0 <mp_map_lookup>
    ed58:	4601      	mov	r1, r0
    ed5a:	687b      	ldr	r3, [r7, #4]
    ed5c:	689a      	ldr	r2, [r3, #8]
    ed5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ed60:	00db      	lsls	r3, r3, #3
    ed62:	4413      	add	r3, r2
    ed64:	685b      	ldr	r3, [r3, #4]
    ed66:	604b      	str	r3, [r1, #4]
    for (size_t i = 0; i < kwargs->alloc; i++) {
    ed68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ed6a:	3301      	adds	r3, #1
    ed6c:	637b      	str	r3, [r7, #52]	; 0x34
    ed6e:	687b      	ldr	r3, [r7, #4]
    ed70:	685a      	ldr	r2, [r3, #4]
    ed72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ed74:	429a      	cmp	r2, r3
    ed76:	d8dc      	bhi.n	ed32 <dict_update+0x14e>
        }
    }

    return mp_const_none;
    ed78:	4b07      	ldr	r3, [pc, #28]	; (ed98 <dict_update+0x1b4>)
}
    ed7a:	4618      	mov	r0, r3
    ed7c:	3738      	adds	r7, #56	; 0x38
    ed7e:	46bd      	mov	sp, r7
    ed80:	bd80      	pop	{r7, pc}
    ed82:	bf00      	nop
    ed84:	0000e5b1 	.word	0x0000e5b1
    ed88:	0001fda8 	.word	0x0001fda8
    ed8c:	0002015c 	.word	0x0002015c
    ed90:	0001fd70 	.word	0x0001fd70
    ed94:	0001fe54 	.word	0x0001fe54
    ed98:	00021534 	.word	0x00021534

0000ed9c <dict_view_it_iternext>:
    mp_obj_base_t base;
    mp_obj_t dict;
    mp_dict_view_kind_t kind;
} mp_obj_dict_view_t;

STATIC mp_obj_t dict_view_it_iternext(mp_obj_t self_in) {
    ed9c:	b580      	push	{r7, lr}
    ed9e:	b086      	sub	sp, #24
    eda0:	af00      	add	r7, sp, #0
    eda2:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &dict_view_it_type));
    eda4:	6878      	ldr	r0, [r7, #4]
    eda6:	f7ff fb41 	bl	e42c <MP_OBJ_IS_OBJ>
    edaa:	4603      	mov	r3, r0
    edac:	f083 0301 	eor.w	r3, r3, #1
    edb0:	b2db      	uxtb	r3, r3
    edb2:	2b00      	cmp	r3, #0
    edb4:	d104      	bne.n	edc0 <dict_view_it_iternext+0x24>
    edb6:	687b      	ldr	r3, [r7, #4]
    edb8:	681b      	ldr	r3, [r3, #0]
    edba:	4a1b      	ldr	r2, [pc, #108]	; (ee28 <dict_view_it_iternext+0x8c>)
    edbc:	4293      	cmp	r3, r2
    edbe:	d006      	beq.n	edce <dict_view_it_iternext+0x32>
    edc0:	4b1a      	ldr	r3, [pc, #104]	; (ee2c <dict_view_it_iternext+0x90>)
    edc2:	4a1b      	ldr	r2, [pc, #108]	; (ee30 <dict_view_it_iternext+0x94>)
    edc4:	f240 1193 	movw	r1, #403	; 0x193
    edc8:	481a      	ldr	r0, [pc, #104]	; (ee34 <dict_view_it_iternext+0x98>)
    edca:	f00c facf 	bl	1b36c <__assert_func>
    mp_obj_dict_view_it_t *self = MP_OBJ_TO_PTR(self_in);
    edce:	687b      	ldr	r3, [r7, #4]
    edd0:	617b      	str	r3, [r7, #20]
    mp_map_elem_t *next = dict_iter_next(MP_OBJ_TO_PTR(self->dict), &self->cur);
    edd2:	697b      	ldr	r3, [r7, #20]
    edd4:	689a      	ldr	r2, [r3, #8]
    edd6:	697b      	ldr	r3, [r7, #20]
    edd8:	330c      	adds	r3, #12
    edda:	4619      	mov	r1, r3
    eddc:	4610      	mov	r0, r2
    edde:	f7ff fb6d 	bl	e4bc <dict_iter_next>
    ede2:	6138      	str	r0, [r7, #16]

    if (next == NULL) {
    ede4:	693b      	ldr	r3, [r7, #16]
    ede6:	2b00      	cmp	r3, #0
    ede8:	d101      	bne.n	edee <dict_view_it_iternext+0x52>
        return MP_OBJ_STOP_ITERATION;
    edea:	2304      	movs	r3, #4
    edec:	e018      	b.n	ee20 <dict_view_it_iternext+0x84>
    } else {
        switch (self->kind) {
    edee:	697b      	ldr	r3, [r7, #20]
    edf0:	685b      	ldr	r3, [r3, #4]
    edf2:	2b01      	cmp	r3, #1
    edf4:	d00f      	beq.n	ee16 <dict_view_it_iternext+0x7a>
    edf6:	2b02      	cmp	r3, #2
    edf8:	d010      	beq.n	ee1c <dict_view_it_iternext+0x80>
            case MP_DICT_VIEW_ITEMS:
            default: {
                mp_obj_t items[] = {next->key, next->value};
    edfa:	693b      	ldr	r3, [r7, #16]
    edfc:	681b      	ldr	r3, [r3, #0]
    edfe:	60bb      	str	r3, [r7, #8]
    ee00:	693b      	ldr	r3, [r7, #16]
    ee02:	685b      	ldr	r3, [r3, #4]
    ee04:	60fb      	str	r3, [r7, #12]
                return mp_obj_new_tuple(2, items);
    ee06:	f107 0308 	add.w	r3, r7, #8
    ee0a:	4619      	mov	r1, r3
    ee0c:	2002      	movs	r0, #2
    ee0e:	f006 ffef 	bl	15df0 <mp_obj_new_tuple>
    ee12:	4603      	mov	r3, r0
    ee14:	e004      	b.n	ee20 <dict_view_it_iternext+0x84>
            }
            case MP_DICT_VIEW_KEYS:
                return next->key;
    ee16:	693b      	ldr	r3, [r7, #16]
    ee18:	681b      	ldr	r3, [r3, #0]
    ee1a:	e001      	b.n	ee20 <dict_view_it_iternext+0x84>
            case MP_DICT_VIEW_VALUES:
                return next->value;
    ee1c:	693b      	ldr	r3, [r7, #16]
    ee1e:	685b      	ldr	r3, [r3, #4]
        }
    }
}
    ee20:	4618      	mov	r0, r3
    ee22:	3718      	adds	r7, #24
    ee24:	46bd      	mov	sp, r7
    ee26:	bd80      	pop	{r7, pc}
    ee28:	0001fec4 	.word	0x0001fec4
    ee2c:	0001ff30 	.word	0x0001ff30
    ee30:	00020168 	.word	0x00020168
    ee34:	0001fd70 	.word	0x0001fd70

0000ee38 <dict_view_getiter>:
    .name = MP_QSTR_iterator,
    .getiter = mp_identity_getiter,
    .iternext = dict_view_it_iternext,
};

STATIC mp_obj_t dict_view_getiter(mp_obj_t view_in, mp_obj_iter_buf_t *iter_buf) {
    ee38:	b580      	push	{r7, lr}
    ee3a:	b084      	sub	sp, #16
    ee3c:	af00      	add	r7, sp, #0
    ee3e:	6078      	str	r0, [r7, #4]
    ee40:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_dict_view_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_check_self(MP_OBJ_IS_TYPE(view_in, &dict_view_type));
    ee42:	6878      	ldr	r0, [r7, #4]
    ee44:	f7ff faf2 	bl	e42c <MP_OBJ_IS_OBJ>
    ee48:	4603      	mov	r3, r0
    ee4a:	f083 0301 	eor.w	r3, r3, #1
    ee4e:	b2db      	uxtb	r3, r3
    ee50:	2b00      	cmp	r3, #0
    ee52:	d104      	bne.n	ee5e <dict_view_getiter+0x26>
    ee54:	687b      	ldr	r3, [r7, #4]
    ee56:	681b      	ldr	r3, [r3, #0]
    ee58:	4a10      	ldr	r2, [pc, #64]	; (ee9c <dict_view_getiter+0x64>)
    ee5a:	4293      	cmp	r3, r2
    ee5c:	d006      	beq.n	ee6c <dict_view_getiter+0x34>
    ee5e:	4b10      	ldr	r3, [pc, #64]	; (eea0 <dict_view_getiter+0x68>)
    ee60:	4a10      	ldr	r2, [pc, #64]	; (eea4 <dict_view_getiter+0x6c>)
    ee62:	f240 11b1 	movw	r1, #433	; 0x1b1
    ee66:	4810      	ldr	r0, [pc, #64]	; (eea8 <dict_view_getiter+0x70>)
    ee68:	f00c fa80 	bl	1b36c <__assert_func>
    mp_obj_dict_view_t *view = MP_OBJ_TO_PTR(view_in);
    ee6c:	687b      	ldr	r3, [r7, #4]
    ee6e:	60fb      	str	r3, [r7, #12]
    mp_obj_dict_view_it_t *o = (mp_obj_dict_view_it_t*)iter_buf;
    ee70:	683b      	ldr	r3, [r7, #0]
    ee72:	60bb      	str	r3, [r7, #8]
    o->base.type = &dict_view_it_type;
    ee74:	68bb      	ldr	r3, [r7, #8]
    ee76:	4a0d      	ldr	r2, [pc, #52]	; (eeac <dict_view_getiter+0x74>)
    ee78:	601a      	str	r2, [r3, #0]
    o->kind = view->kind;
    ee7a:	68fb      	ldr	r3, [r7, #12]
    ee7c:	689a      	ldr	r2, [r3, #8]
    ee7e:	68bb      	ldr	r3, [r7, #8]
    ee80:	605a      	str	r2, [r3, #4]
    o->dict = view->dict;
    ee82:	68fb      	ldr	r3, [r7, #12]
    ee84:	685a      	ldr	r2, [r3, #4]
    ee86:	68bb      	ldr	r3, [r7, #8]
    ee88:	609a      	str	r2, [r3, #8]
    o->cur = 0;
    ee8a:	68bb      	ldr	r3, [r7, #8]
    ee8c:	2200      	movs	r2, #0
    ee8e:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
    ee90:	68bb      	ldr	r3, [r7, #8]
}
    ee92:	4618      	mov	r0, r3
    ee94:	3710      	adds	r7, #16
    ee96:	46bd      	mov	sp, r7
    ee98:	bd80      	pop	{r7, pc}
    ee9a:	bf00      	nop
    ee9c:	0001fe88 	.word	0x0001fe88
    eea0:	0001ff90 	.word	0x0001ff90
    eea4:	00020180 	.word	0x00020180
    eea8:	0001fd70 	.word	0x0001fd70
    eeac:	0001fec4 	.word	0x0001fec4

0000eeb0 <dict_view_print>:

STATIC void dict_view_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
    eeb0:	b580      	push	{r7, lr}
    eeb2:	b08c      	sub	sp, #48	; 0x30
    eeb4:	af00      	add	r7, sp, #0
    eeb6:	60f8      	str	r0, [r7, #12]
    eeb8:	60b9      	str	r1, [r7, #8]
    eeba:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &dict_view_type));
    eebc:	68b8      	ldr	r0, [r7, #8]
    eebe:	f7ff fab5 	bl	e42c <MP_OBJ_IS_OBJ>
    eec2:	4603      	mov	r3, r0
    eec4:	f083 0301 	eor.w	r3, r3, #1
    eec8:	b2db      	uxtb	r3, r3
    eeca:	2b00      	cmp	r3, #0
    eecc:	d104      	bne.n	eed8 <dict_view_print+0x28>
    eece:	68bb      	ldr	r3, [r7, #8]
    eed0:	681b      	ldr	r3, [r3, #0]
    eed2:	4a24      	ldr	r2, [pc, #144]	; (ef64 <dict_view_print+0xb4>)
    eed4:	4293      	cmp	r3, r2
    eed6:	d006      	beq.n	eee6 <dict_view_print+0x36>
    eed8:	4b23      	ldr	r3, [pc, #140]	; (ef68 <dict_view_print+0xb8>)
    eeda:	4a24      	ldr	r2, [pc, #144]	; (ef6c <dict_view_print+0xbc>)
    eedc:	f240 11bd 	movw	r1, #445	; 0x1bd
    eee0:	4823      	ldr	r0, [pc, #140]	; (ef70 <dict_view_print+0xc0>)
    eee2:	f00c fa43 	bl	1b36c <__assert_func>
    mp_obj_dict_view_t *self = MP_OBJ_TO_PTR(self_in);
    eee6:	68bb      	ldr	r3, [r7, #8]
    eee8:	62bb      	str	r3, [r7, #40]	; 0x28
    bool first = true;
    eeea:	2301      	movs	r3, #1
    eeec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    mp_print_str(print, mp_dict_view_names[self->kind]);
    eef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    eef2:	689b      	ldr	r3, [r3, #8]
    eef4:	4a1f      	ldr	r2, [pc, #124]	; (ef74 <dict_view_print+0xc4>)
    eef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eefa:	4619      	mov	r1, r3
    eefc:	68f8      	ldr	r0, [r7, #12]
    eefe:	f7f2 fcbd 	bl	187c <mp_print_str>
    mp_print_str(print, "([");
    ef02:	491d      	ldr	r1, [pc, #116]	; (ef78 <dict_view_print+0xc8>)
    ef04:	68f8      	ldr	r0, [r7, #12]
    ef06:	f7f2 fcb9 	bl	187c <mp_print_str>
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t self_iter = dict_view_getiter(self_in, &iter_buf);
    ef0a:	f107 0310 	add.w	r3, r7, #16
    ef0e:	4619      	mov	r1, r3
    ef10:	68b8      	ldr	r0, [r7, #8]
    ef12:	f7ff ff91 	bl	ee38 <dict_view_getiter>
    ef16:	6278      	str	r0, [r7, #36]	; 0x24
    mp_obj_t next = MP_OBJ_NULL;
    ef18:	2300      	movs	r3, #0
    ef1a:	623b      	str	r3, [r7, #32]
    while ((next = dict_view_it_iternext(self_iter)) != MP_OBJ_STOP_ITERATION) {
    ef1c:	e012      	b.n	ef44 <dict_view_print+0x94>
        if (!first) {
    ef1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    ef22:	f083 0301 	eor.w	r3, r3, #1
    ef26:	b2db      	uxtb	r3, r3
    ef28:	2b00      	cmp	r3, #0
    ef2a:	d003      	beq.n	ef34 <dict_view_print+0x84>
            mp_print_str(print, ", ");
    ef2c:	4913      	ldr	r1, [pc, #76]	; (ef7c <dict_view_print+0xcc>)
    ef2e:	68f8      	ldr	r0, [r7, #12]
    ef30:	f7f2 fca4 	bl	187c <mp_print_str>
        }
        first = false;
    ef34:	2300      	movs	r3, #0
    ef36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        mp_obj_print_helper(print, next, PRINT_REPR);
    ef3a:	2201      	movs	r2, #1
    ef3c:	6a39      	ldr	r1, [r7, #32]
    ef3e:	68f8      	ldr	r0, [r7, #12]
    ef40:	f7fe fc9a 	bl	d878 <mp_obj_print_helper>
    while ((next = dict_view_it_iternext(self_iter)) != MP_OBJ_STOP_ITERATION) {
    ef44:	6a78      	ldr	r0, [r7, #36]	; 0x24
    ef46:	f7ff ff29 	bl	ed9c <dict_view_it_iternext>
    ef4a:	6238      	str	r0, [r7, #32]
    ef4c:	6a3b      	ldr	r3, [r7, #32]
    ef4e:	2b04      	cmp	r3, #4
    ef50:	d1e5      	bne.n	ef1e <dict_view_print+0x6e>
    }
    mp_print_str(print, "])");
    ef52:	490b      	ldr	r1, [pc, #44]	; (ef80 <dict_view_print+0xd0>)
    ef54:	68f8      	ldr	r0, [r7, #12]
    ef56:	f7f2 fc91 	bl	187c <mp_print_str>
}
    ef5a:	bf00      	nop
    ef5c:	3730      	adds	r7, #48	; 0x30
    ef5e:	46bd      	mov	sp, r7
    ef60:	bd80      	pop	{r7, pc}
    ef62:	bf00      	nop
    ef64:	0001fe88 	.word	0x0001fe88
    ef68:	0001ffec 	.word	0x0001ffec
    ef6c:	00020194 	.word	0x00020194
    ef70:	0001fd70 	.word	0x0001fd70
    ef74:	0001ff24 	.word	0x0001ff24
    ef78:	00020048 	.word	0x00020048
    ef7c:	0001fd04 	.word	0x0001fd04
    ef80:	0002004c 	.word	0x0002004c

0000ef84 <dict_view_binary_op>:

STATIC mp_obj_t dict_view_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
    ef84:	b580      	push	{r7, lr}
    ef86:	b086      	sub	sp, #24
    ef88:	af00      	add	r7, sp, #0
    ef8a:	60f8      	str	r0, [r7, #12]
    ef8c:	60b9      	str	r1, [r7, #8]
    ef8e:	607a      	str	r2, [r7, #4]
    // only supported for the 'keys' kind until sets and dicts are refactored
    mp_obj_dict_view_t *o = MP_OBJ_TO_PTR(lhs_in);
    ef90:	68bb      	ldr	r3, [r7, #8]
    ef92:	617b      	str	r3, [r7, #20]
    if (o->kind != MP_DICT_VIEW_KEYS) {
    ef94:	697b      	ldr	r3, [r7, #20]
    ef96:	689b      	ldr	r3, [r3, #8]
    ef98:	2b01      	cmp	r3, #1
    ef9a:	d001      	beq.n	efa0 <dict_view_binary_op+0x1c>
        return MP_OBJ_NULL; // op not supported
    ef9c:	2300      	movs	r3, #0
    ef9e:	e00c      	b.n	efba <dict_view_binary_op+0x36>
    }
    if (op != MP_BINARY_OP_CONTAINS) {
    efa0:	68fb      	ldr	r3, [r7, #12]
    efa2:	2b22      	cmp	r3, #34	; 0x22
    efa4:	d001      	beq.n	efaa <dict_view_binary_op+0x26>
        return MP_OBJ_NULL; // op not supported
    efa6:	2300      	movs	r3, #0
    efa8:	e007      	b.n	efba <dict_view_binary_op+0x36>
    }
    return dict_binary_op(op, o->dict, rhs_in);
    efaa:	697b      	ldr	r3, [r7, #20]
    efac:	685b      	ldr	r3, [r3, #4]
    efae:	687a      	ldr	r2, [r7, #4]
    efb0:	4619      	mov	r1, r3
    efb2:	68f8      	ldr	r0, [r7, #12]
    efb4:	f7ff fb58 	bl	e668 <dict_binary_op>
    efb8:	4603      	mov	r3, r0
}
    efba:	4618      	mov	r0, r3
    efbc:	3718      	adds	r7, #24
    efbe:	46bd      	mov	sp, r7
    efc0:	bd80      	pop	{r7, pc}
    efc2:	bf00      	nop

0000efc4 <mp_obj_new_dict_view>:
    .print = dict_view_print,
    .binary_op = dict_view_binary_op,
    .getiter = dict_view_getiter,
};

STATIC mp_obj_t mp_obj_new_dict_view(mp_obj_t dict, mp_dict_view_kind_t kind) {
    efc4:	b580      	push	{r7, lr}
    efc6:	b084      	sub	sp, #16
    efc8:	af00      	add	r7, sp, #0
    efca:	6078      	str	r0, [r7, #4]
    efcc:	6039      	str	r1, [r7, #0]
    mp_obj_dict_view_t *o = m_new_obj(mp_obj_dict_view_t);
    efce:	200c      	movs	r0, #12
    efd0:	f7f1 f9a4 	bl	31c <m_malloc>
    efd4:	60f8      	str	r0, [r7, #12]
    o->base.type = &dict_view_type;
    efd6:	68fb      	ldr	r3, [r7, #12]
    efd8:	4a06      	ldr	r2, [pc, #24]	; (eff4 <mp_obj_new_dict_view+0x30>)
    efda:	601a      	str	r2, [r3, #0]
    o->dict = dict;
    efdc:	68fb      	ldr	r3, [r7, #12]
    efde:	687a      	ldr	r2, [r7, #4]
    efe0:	605a      	str	r2, [r3, #4]
    o->kind = kind;
    efe2:	68fb      	ldr	r3, [r7, #12]
    efe4:	683a      	ldr	r2, [r7, #0]
    efe6:	609a      	str	r2, [r3, #8]
    return MP_OBJ_FROM_PTR(o);
    efe8:	68fb      	ldr	r3, [r7, #12]
}
    efea:	4618      	mov	r0, r3
    efec:	3710      	adds	r7, #16
    efee:	46bd      	mov	sp, r7
    eff0:	bd80      	pop	{r7, pc}
    eff2:	bf00      	nop
    eff4:	0001fe88 	.word	0x0001fe88

0000eff8 <dict_view>:

STATIC mp_obj_t dict_view(mp_obj_t self_in, mp_dict_view_kind_t kind) {
    eff8:	b580      	push	{r7, lr}
    effa:	b082      	sub	sp, #8
    effc:	af00      	add	r7, sp, #0
    effe:	6078      	str	r0, [r7, #4]
    f000:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    f002:	6878      	ldr	r0, [r7, #4]
    f004:	f7ff fa12 	bl	e42c <MP_OBJ_IS_OBJ>
    f008:	4603      	mov	r3, r0
    f00a:	f083 0301 	eor.w	r3, r3, #1
    f00e:	b2db      	uxtb	r3, r3
    f010:	2b00      	cmp	r3, #0
    f012:	d105      	bne.n	f020 <dict_view+0x28>
    f014:	687b      	ldr	r3, [r7, #4]
    f016:	681b      	ldr	r3, [r3, #0]
    f018:	68db      	ldr	r3, [r3, #12]
    f01a:	4a09      	ldr	r2, [pc, #36]	; (f040 <dict_view+0x48>)
    f01c:	4293      	cmp	r3, r2
    f01e:	d006      	beq.n	f02e <dict_view+0x36>
    f020:	4b08      	ldr	r3, [pc, #32]	; (f044 <dict_view+0x4c>)
    f022:	4a09      	ldr	r2, [pc, #36]	; (f048 <dict_view+0x50>)
    f024:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    f028:	4808      	ldr	r0, [pc, #32]	; (f04c <dict_view+0x54>)
    f02a:	f00c f99f 	bl	1b36c <__assert_func>
    return mp_obj_new_dict_view(self_in, kind);
    f02e:	6839      	ldr	r1, [r7, #0]
    f030:	6878      	ldr	r0, [r7, #4]
    f032:	f7ff ffc7 	bl	efc4 <mp_obj_new_dict_view>
    f036:	4603      	mov	r3, r0
}
    f038:	4618      	mov	r0, r3
    f03a:	3708      	adds	r7, #8
    f03c:	46bd      	mov	sp, r7
    f03e:	bd80      	pop	{r7, pc}
    f040:	0000e5b1 	.word	0x0000e5b1
    f044:	0001fd10 	.word	0x0001fd10
    f048:	000201a4 	.word	0x000201a4
    f04c:	0001fd70 	.word	0x0001fd70

0000f050 <dict_items>:

STATIC mp_obj_t dict_items(mp_obj_t self_in) {
    f050:	b580      	push	{r7, lr}
    f052:	b082      	sub	sp, #8
    f054:	af00      	add	r7, sp, #0
    f056:	6078      	str	r0, [r7, #4]
    return dict_view(self_in, MP_DICT_VIEW_ITEMS);
    f058:	2100      	movs	r1, #0
    f05a:	6878      	ldr	r0, [r7, #4]
    f05c:	f7ff ffcc 	bl	eff8 <dict_view>
    f060:	4603      	mov	r3, r0
}
    f062:	4618      	mov	r0, r3
    f064:	3708      	adds	r7, #8
    f066:	46bd      	mov	sp, r7
    f068:	bd80      	pop	{r7, pc}
    f06a:	bf00      	nop

0000f06c <dict_keys>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_items_obj, dict_items);

STATIC mp_obj_t dict_keys(mp_obj_t self_in) {
    f06c:	b580      	push	{r7, lr}
    f06e:	b082      	sub	sp, #8
    f070:	af00      	add	r7, sp, #0
    f072:	6078      	str	r0, [r7, #4]
    return dict_view(self_in, MP_DICT_VIEW_KEYS);
    f074:	2101      	movs	r1, #1
    f076:	6878      	ldr	r0, [r7, #4]
    f078:	f7ff ffbe 	bl	eff8 <dict_view>
    f07c:	4603      	mov	r3, r0
}
    f07e:	4618      	mov	r0, r3
    f080:	3708      	adds	r7, #8
    f082:	46bd      	mov	sp, r7
    f084:	bd80      	pop	{r7, pc}
    f086:	bf00      	nop

0000f088 <dict_values>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_keys_obj, dict_keys);

STATIC mp_obj_t dict_values(mp_obj_t self_in) {
    f088:	b580      	push	{r7, lr}
    f08a:	b082      	sub	sp, #8
    f08c:	af00      	add	r7, sp, #0
    f08e:	6078      	str	r0, [r7, #4]
    return dict_view(self_in, MP_DICT_VIEW_VALUES);
    f090:	2102      	movs	r1, #2
    f092:	6878      	ldr	r0, [r7, #4]
    f094:	f7ff ffb0 	bl	eff8 <dict_view>
    f098:	4603      	mov	r3, r0
}
    f09a:	4618      	mov	r0, r3
    f09c:	3708      	adds	r7, #8
    f09e:	46bd      	mov	sp, r7
    f0a0:	bd80      	pop	{r7, pc}
    f0a2:	bf00      	nop

0000f0a4 <dict_getiter>:
STATIC MP_DEFINE_CONST_FUN_OBJ_1(dict_values_obj, dict_values);

/******************************************************************************/
/* dict iterator                                                              */

STATIC mp_obj_t dict_getiter(mp_obj_t self_in, mp_obj_iter_buf_t *iter_buf) {
    f0a4:	b580      	push	{r7, lr}
    f0a6:	b084      	sub	sp, #16
    f0a8:	af00      	add	r7, sp, #0
    f0aa:	6078      	str	r0, [r7, #4]
    f0ac:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_dict_view_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    f0ae:	6878      	ldr	r0, [r7, #4]
    f0b0:	f7ff f9bc 	bl	e42c <MP_OBJ_IS_OBJ>
    f0b4:	4603      	mov	r3, r0
    f0b6:	f083 0301 	eor.w	r3, r3, #1
    f0ba:	b2db      	uxtb	r3, r3
    f0bc:	2b00      	cmp	r3, #0
    f0be:	d105      	bne.n	f0cc <dict_getiter+0x28>
    f0c0:	687b      	ldr	r3, [r7, #4]
    f0c2:	681b      	ldr	r3, [r3, #0]
    f0c4:	68db      	ldr	r3, [r3, #12]
    f0c6:	4a0e      	ldr	r2, [pc, #56]	; (f100 <dict_getiter+0x5c>)
    f0c8:	4293      	cmp	r3, r2
    f0ca:	d006      	beq.n	f0da <dict_getiter+0x36>
    f0cc:	4b0d      	ldr	r3, [pc, #52]	; (f104 <dict_getiter+0x60>)
    f0ce:	4a0e      	ldr	r2, [pc, #56]	; (f108 <dict_getiter+0x64>)
    f0d0:	f44f 7101 	mov.w	r1, #516	; 0x204
    f0d4:	480d      	ldr	r0, [pc, #52]	; (f10c <dict_getiter+0x68>)
    f0d6:	f00c f949 	bl	1b36c <__assert_func>
    mp_obj_dict_view_it_t *o = (mp_obj_dict_view_it_t*)iter_buf;
    f0da:	683b      	ldr	r3, [r7, #0]
    f0dc:	60fb      	str	r3, [r7, #12]
    o->base.type = &dict_view_it_type;
    f0de:	68fb      	ldr	r3, [r7, #12]
    f0e0:	4a0b      	ldr	r2, [pc, #44]	; (f110 <dict_getiter+0x6c>)
    f0e2:	601a      	str	r2, [r3, #0]
    o->kind = MP_DICT_VIEW_KEYS;
    f0e4:	68fb      	ldr	r3, [r7, #12]
    f0e6:	2201      	movs	r2, #1
    f0e8:	605a      	str	r2, [r3, #4]
    o->dict = self_in;
    f0ea:	68fb      	ldr	r3, [r7, #12]
    f0ec:	687a      	ldr	r2, [r7, #4]
    f0ee:	609a      	str	r2, [r3, #8]
    o->cur = 0;
    f0f0:	68fb      	ldr	r3, [r7, #12]
    f0f2:	2200      	movs	r2, #0
    f0f4:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
    f0f6:	68fb      	ldr	r3, [r7, #12]
}
    f0f8:	4618      	mov	r0, r3
    f0fa:	3710      	adds	r7, #16
    f0fc:	46bd      	mov	sp, r7
    f0fe:	bd80      	pop	{r7, pc}
    f100:	0000e5b1 	.word	0x0000e5b1
    f104:	0001fd10 	.word	0x0001fd10
    f108:	000201b0 	.word	0x000201b0
    f10c:	0001fd70 	.word	0x0001fd70
    f110:	0001fec4 	.word	0x0001fec4

0000f114 <mp_obj_dict_init>:
    .parent = &mp_type_dict,
    .locals_dict = (mp_obj_dict_t*)&dict_locals_dict,
};
#endif

void mp_obj_dict_init(mp_obj_dict_t *dict, size_t n_args) {
    f114:	b580      	push	{r7, lr}
    f116:	b082      	sub	sp, #8
    f118:	af00      	add	r7, sp, #0
    f11a:	6078      	str	r0, [r7, #4]
    f11c:	6039      	str	r1, [r7, #0]
    dict->base.type = &mp_type_dict;
    f11e:	687b      	ldr	r3, [r7, #4]
    f120:	4a05      	ldr	r2, [pc, #20]	; (f138 <mp_obj_dict_init+0x24>)
    f122:	601a      	str	r2, [r3, #0]
    mp_map_init(&dict->map, n_args);
    f124:	687b      	ldr	r3, [r7, #4]
    f126:	3304      	adds	r3, #4
    f128:	6839      	ldr	r1, [r7, #0]
    f12a:	4618      	mov	r0, r3
    f12c:	f7fe f8cc 	bl	d2c8 <mp_map_init>
}
    f130:	bf00      	nop
    f132:	3708      	adds	r7, #8
    f134:	46bd      	mov	sp, r7
    f136:	bd80      	pop	{r7, pc}
    f138:	000200e8 	.word	0x000200e8

0000f13c <mp_obj_new_dict>:

mp_obj_t mp_obj_new_dict(size_t n_args) {
    f13c:	b580      	push	{r7, lr}
    f13e:	b084      	sub	sp, #16
    f140:	af00      	add	r7, sp, #0
    f142:	6078      	str	r0, [r7, #4]
    mp_obj_dict_t *o = m_new_obj(mp_obj_dict_t);
    f144:	2010      	movs	r0, #16
    f146:	f7f1 f8e9 	bl	31c <m_malloc>
    f14a:	60f8      	str	r0, [r7, #12]
    mp_obj_dict_init(o, n_args);
    f14c:	6879      	ldr	r1, [r7, #4]
    f14e:	68f8      	ldr	r0, [r7, #12]
    f150:	f7ff ffe0 	bl	f114 <mp_obj_dict_init>
    return MP_OBJ_FROM_PTR(o);
    f154:	68fb      	ldr	r3, [r7, #12]
}
    f156:	4618      	mov	r0, r3
    f158:	3710      	adds	r7, #16
    f15a:	46bd      	mov	sp, r7
    f15c:	bd80      	pop	{r7, pc}
    f15e:	bf00      	nop

0000f160 <mp_obj_dict_len>:

size_t mp_obj_dict_len(mp_obj_t self_in) {
    f160:	b480      	push	{r7}
    f162:	b085      	sub	sp, #20
    f164:	af00      	add	r7, sp, #0
    f166:	6078      	str	r0, [r7, #4]
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    f168:	687b      	ldr	r3, [r7, #4]
    f16a:	60fb      	str	r3, [r7, #12]
    return self->map.used;
    f16c:	68fb      	ldr	r3, [r7, #12]
    f16e:	685b      	ldr	r3, [r3, #4]
    f170:	f3c3 03dc 	ubfx	r3, r3, #3, #29
}
    f174:	4618      	mov	r0, r3
    f176:	3714      	adds	r7, #20
    f178:	46bd      	mov	sp, r7
    f17a:	f85d 7b04 	ldr.w	r7, [sp], #4
    f17e:	4770      	bx	lr

0000f180 <mp_obj_dict_store>:

mp_obj_t mp_obj_dict_store(mp_obj_t self_in, mp_obj_t key, mp_obj_t value) {
    f180:	b580      	push	{r7, lr}
    f182:	b086      	sub	sp, #24
    f184:	af00      	add	r7, sp, #0
    f186:	60f8      	str	r0, [r7, #12]
    f188:	60b9      	str	r1, [r7, #8]
    f18a:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    f18c:	68f8      	ldr	r0, [r7, #12]
    f18e:	f7ff f94d 	bl	e42c <MP_OBJ_IS_OBJ>
    f192:	4603      	mov	r3, r0
    f194:	f083 0301 	eor.w	r3, r3, #1
    f198:	b2db      	uxtb	r3, r3
    f19a:	2b00      	cmp	r3, #0
    f19c:	d105      	bne.n	f1aa <mp_obj_dict_store+0x2a>
    f19e:	68fb      	ldr	r3, [r7, #12]
    f1a0:	681b      	ldr	r3, [r3, #0]
    f1a2:	68db      	ldr	r3, [r3, #12]
    f1a4:	4a0e      	ldr	r2, [pc, #56]	; (f1e0 <mp_obj_dict_store+0x60>)
    f1a6:	4293      	cmp	r3, r2
    f1a8:	d006      	beq.n	f1b8 <mp_obj_dict_store+0x38>
    f1aa:	4b0e      	ldr	r3, [pc, #56]	; (f1e4 <mp_obj_dict_store+0x64>)
    f1ac:	4a0e      	ldr	r2, [pc, #56]	; (f1e8 <mp_obj_dict_store+0x68>)
    f1ae:	f240 214f 	movw	r1, #591	; 0x24f
    f1b2:	480e      	ldr	r0, [pc, #56]	; (f1ec <mp_obj_dict_store+0x6c>)
    f1b4:	f00c f8da 	bl	1b36c <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    f1b8:	68fb      	ldr	r3, [r7, #12]
    f1ba:	617b      	str	r3, [r7, #20]
    mp_ensure_not_fixed(self);
    f1bc:	6978      	ldr	r0, [r7, #20]
    f1be:	f7ff fb21 	bl	e804 <mp_ensure_not_fixed>
    mp_map_lookup(&self->map, key, MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
    f1c2:	697b      	ldr	r3, [r7, #20]
    f1c4:	3304      	adds	r3, #4
    f1c6:	2201      	movs	r2, #1
    f1c8:	68b9      	ldr	r1, [r7, #8]
    f1ca:	4618      	mov	r0, r3
    f1cc:	f7fe f978 	bl	d4c0 <mp_map_lookup>
    f1d0:	4602      	mov	r2, r0
    f1d2:	687b      	ldr	r3, [r7, #4]
    f1d4:	6053      	str	r3, [r2, #4]
    return self_in;
    f1d6:	68fb      	ldr	r3, [r7, #12]
}
    f1d8:	4618      	mov	r0, r3
    f1da:	3718      	adds	r7, #24
    f1dc:	46bd      	mov	sp, r7
    f1de:	bd80      	pop	{r7, pc}
    f1e0:	0000e5b1 	.word	0x0000e5b1
    f1e4:	0001fd10 	.word	0x0001fd10
    f1e8:	000201c0 	.word	0x000201c0
    f1ec:	0001fd70 	.word	0x0001fd70

0000f1f0 <mp_obj_dict_delete>:

mp_obj_t mp_obj_dict_delete(mp_obj_t self_in, mp_obj_t key) {
    f1f0:	b580      	push	{r7, lr}
    f1f2:	b084      	sub	sp, #16
    f1f4:	af00      	add	r7, sp, #0
    f1f6:	6078      	str	r0, [r7, #4]
    f1f8:	6039      	str	r1, [r7, #0]
    mp_obj_t args[2] = {self_in, key};
    f1fa:	687b      	ldr	r3, [r7, #4]
    f1fc:	60bb      	str	r3, [r7, #8]
    f1fe:	683b      	ldr	r3, [r7, #0]
    f200:	60fb      	str	r3, [r7, #12]
    dict_get_helper(2, args, MP_MAP_LOOKUP_REMOVE_IF_FOUND);
    f202:	f107 0308 	add.w	r3, r7, #8
    f206:	2202      	movs	r2, #2
    f208:	4619      	mov	r1, r3
    f20a:	2002      	movs	r0, #2
    f20c:	f7ff fbe6 	bl	e9dc <dict_get_helper>
    return self_in;
    f210:	687b      	ldr	r3, [r7, #4]
}
    f212:	4618      	mov	r0, r3
    f214:	3710      	adds	r7, #16
    f216:	46bd      	mov	sp, r7
    f218:	bd80      	pop	{r7, pc}
    f21a:	bf00      	nop

0000f21c <mp_obj_dict_get_map>:

mp_map_t *mp_obj_dict_get_map(mp_obj_t self_in) {
    f21c:	b580      	push	{r7, lr}
    f21e:	b084      	sub	sp, #16
    f220:	af00      	add	r7, sp, #0
    f222:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_DICT_TYPE(self_in));
    f224:	6878      	ldr	r0, [r7, #4]
    f226:	f7ff f901 	bl	e42c <MP_OBJ_IS_OBJ>
    f22a:	4603      	mov	r3, r0
    f22c:	f083 0301 	eor.w	r3, r3, #1
    f230:	b2db      	uxtb	r3, r3
    f232:	2b00      	cmp	r3, #0
    f234:	d105      	bne.n	f242 <mp_obj_dict_get_map+0x26>
    f236:	687b      	ldr	r3, [r7, #4]
    f238:	681b      	ldr	r3, [r3, #0]
    f23a:	68db      	ldr	r3, [r3, #12]
    f23c:	4a08      	ldr	r2, [pc, #32]	; (f260 <mp_obj_dict_get_map+0x44>)
    f23e:	4293      	cmp	r3, r2
    f240:	d006      	beq.n	f250 <mp_obj_dict_get_map+0x34>
    f242:	4b08      	ldr	r3, [pc, #32]	; (f264 <mp_obj_dict_get_map+0x48>)
    f244:	4a08      	ldr	r2, [pc, #32]	; (f268 <mp_obj_dict_get_map+0x4c>)
    f246:	f240 215d 	movw	r1, #605	; 0x25d
    f24a:	4808      	ldr	r0, [pc, #32]	; (f26c <mp_obj_dict_get_map+0x50>)
    f24c:	f00c f88e 	bl	1b36c <__assert_func>
    mp_obj_dict_t *self = MP_OBJ_TO_PTR(self_in);
    f250:	687b      	ldr	r3, [r7, #4]
    f252:	60fb      	str	r3, [r7, #12]
    return &self->map;
    f254:	68fb      	ldr	r3, [r7, #12]
    f256:	3304      	adds	r3, #4
}
    f258:	4618      	mov	r0, r3
    f25a:	3710      	adds	r7, #16
    f25c:	46bd      	mov	sp, r7
    f25e:	bd80      	pop	{r7, pc}
    f260:	0000e5b1 	.word	0x0000e5b1
    f264:	0001fd10 	.word	0x0001fd10
    f268:	000201d4 	.word	0x000201d4
    f26c:	0001fd70 	.word	0x0001fd70

0000f270 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
    f270:	b480      	push	{r7}
    f272:	b083      	sub	sp, #12
    f274:	af00      	add	r7, sp, #0
    f276:	6078      	str	r0, [r7, #4]
    f278:	687b      	ldr	r3, [r7, #4]
    f27a:	f003 0303 	and.w	r3, r3, #3
    f27e:	2b00      	cmp	r3, #0
    f280:	bf0c      	ite	eq
    f282:	2301      	moveq	r3, #1
    f284:	2300      	movne	r3, #0
    f286:	b2db      	uxtb	r3, r3
    f288:	4618      	mov	r0, r3
    f28a:	370c      	adds	r7, #12
    f28c:	46bd      	mov	sp, r7
    f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
    f292:	4770      	bx	lr

0000f294 <mp_obj_exception_print>:
// Instance of GeneratorExit exception - needed by generator.close()
// This would belong to objgenerator.c, but to keep mp_obj_exception_t
// definition module-private so far, have it here.
const mp_obj_exception_t mp_const_GeneratorExit_obj = {{&mp_type_GeneratorExit}, 0, 0, NULL, (mp_obj_tuple_t*)&mp_const_empty_tuple_obj};

void mp_obj_exception_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
    f294:	b580      	push	{r7, lr}
    f296:	b088      	sub	sp, #32
    f298:	af00      	add	r7, sp, #0
    f29a:	60f8      	str	r0, [r7, #12]
    f29c:	60b9      	str	r1, [r7, #8]
    f29e:	607a      	str	r2, [r7, #4]
    mp_obj_exception_t *o = MP_OBJ_TO_PTR(o_in);
    f2a0:	68bb      	ldr	r3, [r7, #8]
    f2a2:	61fb      	str	r3, [r7, #28]
    mp_print_kind_t k = kind & ~PRINT_EXC_SUBCLASS;
    f2a4:	687b      	ldr	r3, [r7, #4]
    f2a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f2aa:	61bb      	str	r3, [r7, #24]
    bool is_subclass = kind & PRINT_EXC_SUBCLASS;
    f2ac:	687b      	ldr	r3, [r7, #4]
    f2ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
    f2b2:	2b00      	cmp	r3, #0
    f2b4:	bf14      	ite	ne
    f2b6:	2301      	movne	r3, #1
    f2b8:	2300      	moveq	r3, #0
    f2ba:	75fb      	strb	r3, [r7, #23]
    if (!is_subclass && (k == PRINT_REPR || k == PRINT_EXC)) {
    f2bc:	7dfb      	ldrb	r3, [r7, #23]
    f2be:	f083 0301 	eor.w	r3, r3, #1
    f2c2:	b2db      	uxtb	r3, r3
    f2c4:	2b00      	cmp	r3, #0
    f2c6:	d010      	beq.n	f2ea <mp_obj_exception_print+0x56>
    f2c8:	69bb      	ldr	r3, [r7, #24]
    f2ca:	2b01      	cmp	r3, #1
    f2cc:	d002      	beq.n	f2d4 <mp_obj_exception_print+0x40>
    f2ce:	69bb      	ldr	r3, [r7, #24]
    f2d0:	2b02      	cmp	r3, #2
    f2d2:	d10a      	bne.n	f2ea <mp_obj_exception_print+0x56>
        mp_print_str(print, qstr_str(o->base.type->name));
    f2d4:	69fb      	ldr	r3, [r7, #28]
    f2d6:	681b      	ldr	r3, [r3, #0]
    f2d8:	685b      	ldr	r3, [r3, #4]
    f2da:	4618      	mov	r0, r3
    f2dc:	f7f1 ff8a 	bl	11f4 <qstr_str>
    f2e0:	4603      	mov	r3, r0
    f2e2:	4619      	mov	r1, r3
    f2e4:	68f8      	ldr	r0, [r7, #12]
    f2e6:	f7f2 fac9 	bl	187c <mp_print_str>
    }

    if (k == PRINT_EXC) {
    f2ea:	69bb      	ldr	r3, [r7, #24]
    f2ec:	2b02      	cmp	r3, #2
    f2ee:	d103      	bne.n	f2f8 <mp_obj_exception_print+0x64>
        mp_print_str(print, ": ");
    f2f0:	4917      	ldr	r1, [pc, #92]	; (f350 <mp_obj_exception_print+0xbc>)
    f2f2:	68f8      	ldr	r0, [r7, #12]
    f2f4:	f7f2 fac2 	bl	187c <mp_print_str>
    }

    if (k == PRINT_STR || k == PRINT_EXC) {
    f2f8:	69bb      	ldr	r3, [r7, #24]
    f2fa:	2b00      	cmp	r3, #0
    f2fc:	d002      	beq.n	f304 <mp_obj_exception_print+0x70>
    f2fe:	69bb      	ldr	r3, [r7, #24]
    f300:	2b02      	cmp	r3, #2
    f302:	d11b      	bne.n	f33c <mp_obj_exception_print+0xa8>
        if (o->args == NULL || o->args->len == 0) {
    f304:	69fb      	ldr	r3, [r7, #28]
    f306:	68db      	ldr	r3, [r3, #12]
    f308:	2b00      	cmp	r3, #0
    f30a:	d004      	beq.n	f316 <mp_obj_exception_print+0x82>
    f30c:	69fb      	ldr	r3, [r7, #28]
    f30e:	68db      	ldr	r3, [r3, #12]
    f310:	685b      	ldr	r3, [r3, #4]
    f312:	2b00      	cmp	r3, #0
    f314:	d104      	bne.n	f320 <mp_obj_exception_print+0x8c>
            mp_print_str(print, "");
    f316:	490f      	ldr	r1, [pc, #60]	; (f354 <mp_obj_exception_print+0xc0>)
    f318:	68f8      	ldr	r0, [r7, #12]
    f31a:	f7f2 faaf 	bl	187c <mp_print_str>
            return;
    f31e:	e014      	b.n	f34a <mp_obj_exception_print+0xb6>
        } else if (o->args->len == 1) {
    f320:	69fb      	ldr	r3, [r7, #28]
    f322:	68db      	ldr	r3, [r3, #12]
    f324:	685b      	ldr	r3, [r3, #4]
    f326:	2b01      	cmp	r3, #1
    f328:	d108      	bne.n	f33c <mp_obj_exception_print+0xa8>
                    mp_printf(print, "[Errno " INT_FMT "] %q", MP_OBJ_SMALL_INT_VALUE(o->args->items[0]), qst);
                    return;
                }
            }
            #endif
            mp_obj_print_helper(print, o->args->items[0], PRINT_STR);
    f32a:	69fb      	ldr	r3, [r7, #28]
    f32c:	68db      	ldr	r3, [r3, #12]
    f32e:	689b      	ldr	r3, [r3, #8]
    f330:	2200      	movs	r2, #0
    f332:	4619      	mov	r1, r3
    f334:	68f8      	ldr	r0, [r7, #12]
    f336:	f7fe fa9f 	bl	d878 <mp_obj_print_helper>
            return;
    f33a:	e006      	b.n	f34a <mp_obj_exception_print+0xb6>
        }
    }
    mp_obj_tuple_print(print, MP_OBJ_FROM_PTR(o->args), kind);
    f33c:	69fb      	ldr	r3, [r7, #28]
    f33e:	68db      	ldr	r3, [r3, #12]
    f340:	687a      	ldr	r2, [r7, #4]
    f342:	4619      	mov	r1, r3
    f344:	68f8      	ldr	r0, [r7, #12]
    f346:	f006 fac5 	bl	158d4 <mp_obj_tuple_print>
}
    f34a:	3720      	adds	r7, #32
    f34c:	46bd      	mov	sp, r7
    f34e:	bd80      	pop	{r7, pc}
    f350:	000201f8 	.word	0x000201f8
    f354:	000201fc 	.word	0x000201fc

0000f358 <mp_obj_exception_make_new>:

mp_obj_t mp_obj_exception_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    f358:	b580      	push	{r7, lr}
    f35a:	b088      	sub	sp, #32
    f35c:	af02      	add	r7, sp, #8
    f35e:	60f8      	str	r0, [r7, #12]
    f360:	60b9      	str	r1, [r7, #8]
    f362:	607a      	str	r2, [r7, #4]
    f364:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 0, MP_OBJ_FUN_ARGS_MAX, false);
    f366:	2300      	movs	r3, #0
    f368:	9300      	str	r3, [sp, #0]
    f36a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f36e:	2200      	movs	r2, #0
    f370:	6879      	ldr	r1, [r7, #4]
    f372:	68b8      	ldr	r0, [r7, #8]
    f374:	f7fd fe5a 	bl	d02c <mp_arg_check_num>

    // Try to allocate memory for the exception, with fallback to emergency exception object
    mp_obj_exception_t *o_exc = m_new_obj_maybe(mp_obj_exception_t);
    f378:	2010      	movs	r0, #16
    f37a:	f7f0 ffe7 	bl	34c <m_malloc_maybe>
    f37e:	6178      	str	r0, [r7, #20]
    if (o_exc == NULL) {
    f380:	697b      	ldr	r3, [r7, #20]
    f382:	2b00      	cmp	r3, #0
    f384:	d101      	bne.n	f38a <mp_obj_exception_make_new+0x32>
        o_exc = &MP_STATE_VM(mp_emergency_exception_obj);
    f386:	4b19      	ldr	r3, [pc, #100]	; (f3ec <mp_obj_exception_make_new+0x94>)
    f388:	617b      	str	r3, [r7, #20]
    }

    // Populate the exception object
    o_exc->base.type = type;
    f38a:	697b      	ldr	r3, [r7, #20]
    f38c:	68fa      	ldr	r2, [r7, #12]
    f38e:	601a      	str	r2, [r3, #0]
    o_exc->traceback_data = NULL;
    f390:	697b      	ldr	r3, [r7, #20]
    f392:	2200      	movs	r2, #0
    f394:	609a      	str	r2, [r3, #8]

    mp_obj_tuple_t *o_tuple;
    if (n_args == 0) {
    f396:	68bb      	ldr	r3, [r7, #8]
    f398:	2b00      	cmp	r3, #0
    f39a:	d102      	bne.n	f3a2 <mp_obj_exception_make_new+0x4a>
        // No args, can use the empty tuple straightaway
        o_tuple = (mp_obj_tuple_t*)&mp_const_empty_tuple_obj;
    f39c:	4b14      	ldr	r3, [pc, #80]	; (f3f0 <mp_obj_exception_make_new+0x98>)
    f39e:	613b      	str	r3, [r7, #16]
    f3a0:	e01b      	b.n	f3da <mp_obj_exception_make_new+0x82>
    } else {
        // Try to allocate memory for the tuple containing the args
        o_tuple = m_new_obj_var_maybe(mp_obj_tuple_t, mp_obj_t, n_args);
    f3a2:	68bb      	ldr	r3, [r7, #8]
    f3a4:	3302      	adds	r3, #2
    f3a6:	009b      	lsls	r3, r3, #2
    f3a8:	4618      	mov	r0, r3
    f3aa:	f7f0 ffcf 	bl	34c <m_malloc_maybe>
    f3ae:	6138      	str	r0, [r7, #16]
            o_tuple = (mp_obj_tuple_t*)
                ((uint8_t*)MP_STATE_VM(mp_emergency_exception_buf) + EMG_TRACEBACK_ALLOC * sizeof(size_t));
        }
        #endif

        if (o_tuple == NULL) {
    f3b0:	693b      	ldr	r3, [r7, #16]
    f3b2:	2b00      	cmp	r3, #0
    f3b4:	d102      	bne.n	f3bc <mp_obj_exception_make_new+0x64>
            // No memory for a tuple, fallback to an empty tuple
            o_tuple = (mp_obj_tuple_t*)&mp_const_empty_tuple_obj;
    f3b6:	4b0e      	ldr	r3, [pc, #56]	; (f3f0 <mp_obj_exception_make_new+0x98>)
    f3b8:	613b      	str	r3, [r7, #16]
    f3ba:	e00e      	b.n	f3da <mp_obj_exception_make_new+0x82>
        } else {
            // Have memory for a tuple so populate it
            o_tuple->base.type = &mp_type_tuple;
    f3bc:	693b      	ldr	r3, [r7, #16]
    f3be:	4a0d      	ldr	r2, [pc, #52]	; (f3f4 <mp_obj_exception_make_new+0x9c>)
    f3c0:	601a      	str	r2, [r3, #0]
            o_tuple->len = n_args;
    f3c2:	693b      	ldr	r3, [r7, #16]
    f3c4:	68ba      	ldr	r2, [r7, #8]
    f3c6:	605a      	str	r2, [r3, #4]
            memcpy(o_tuple->items, args, n_args * sizeof(mp_obj_t));
    f3c8:	693b      	ldr	r3, [r7, #16]
    f3ca:	f103 0008 	add.w	r0, r3, #8
    f3ce:	68bb      	ldr	r3, [r7, #8]
    f3d0:	009b      	lsls	r3, r3, #2
    f3d2:	461a      	mov	r2, r3
    f3d4:	6839      	ldr	r1, [r7, #0]
    f3d6:	f00c fd75 	bl	1bec4 <memcpy>
        }
    }

    // Store the tuple of args in the exception object
    o_exc->args = o_tuple;
    f3da:	697b      	ldr	r3, [r7, #20]
    f3dc:	693a      	ldr	r2, [r7, #16]
    f3de:	60da      	str	r2, [r3, #12]

    return MP_OBJ_FROM_PTR(o_exc);
    f3e0:	697b      	ldr	r3, [r7, #20]
}
    f3e2:	4618      	mov	r0, r3
    f3e4:	3718      	adds	r7, #24
    f3e6:	46bd      	mov	sp, r7
    f3e8:	bd80      	pop	{r7, pc}
    f3ea:	bf00      	nop
    f3ec:	20000a40 	.word	0x20000a40
    f3f0:	00021ea4 	.word	0x00021ea4
    f3f4:	00021e68 	.word	0x00021e68

0000f3f8 <mp_obj_exception_get_value>:

// Get exception "value" - that is, first argument, or None
mp_obj_t mp_obj_exception_get_value(mp_obj_t self_in) {
    f3f8:	b480      	push	{r7}
    f3fa:	b085      	sub	sp, #20
    f3fc:	af00      	add	r7, sp, #0
    f3fe:	6078      	str	r0, [r7, #4]
    mp_obj_exception_t *self = MP_OBJ_TO_PTR(self_in);
    f400:	687b      	ldr	r3, [r7, #4]
    f402:	60fb      	str	r3, [r7, #12]
    if (self->args->len == 0) {
    f404:	68fb      	ldr	r3, [r7, #12]
    f406:	68db      	ldr	r3, [r3, #12]
    f408:	685b      	ldr	r3, [r3, #4]
    f40a:	2b00      	cmp	r3, #0
    f40c:	d101      	bne.n	f412 <mp_obj_exception_get_value+0x1a>
        return mp_const_none;
    f40e:	4b05      	ldr	r3, [pc, #20]	; (f424 <mp_obj_exception_get_value+0x2c>)
    f410:	e002      	b.n	f418 <mp_obj_exception_get_value+0x20>
    } else {
        return self->args->items[0];
    f412:	68fb      	ldr	r3, [r7, #12]
    f414:	68db      	ldr	r3, [r3, #12]
    f416:	689b      	ldr	r3, [r3, #8]
    }
}
    f418:	4618      	mov	r0, r3
    f41a:	3714      	adds	r7, #20
    f41c:	46bd      	mov	sp, r7
    f41e:	f85d 7b04 	ldr.w	r7, [sp], #4
    f422:	4770      	bx	lr
    f424:	00021534 	.word	0x00021534

0000f428 <mp_obj_exception_attr>:

void mp_obj_exception_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
    f428:	b580      	push	{r7, lr}
    f42a:	b086      	sub	sp, #24
    f42c:	af00      	add	r7, sp, #0
    f42e:	60f8      	str	r0, [r7, #12]
    f430:	60b9      	str	r1, [r7, #8]
    f432:	607a      	str	r2, [r7, #4]
    mp_obj_exception_t *self = MP_OBJ_TO_PTR(self_in);
    f434:	68fb      	ldr	r3, [r7, #12]
    f436:	617b      	str	r3, [r7, #20]
    if (dest[0] != MP_OBJ_NULL) {
    f438:	687b      	ldr	r3, [r7, #4]
    f43a:	681b      	ldr	r3, [r3, #0]
    f43c:	2b00      	cmp	r3, #0
    f43e:	d00f      	beq.n	f460 <mp_obj_exception_attr+0x38>
        // store/delete attribute
        if (attr == MP_QSTR___traceback__ && dest[1] == mp_const_none) {
    f440:	68bb      	ldr	r3, [r7, #8]
    f442:	2b25      	cmp	r3, #37	; 0x25
    f444:	d123      	bne.n	f48e <mp_obj_exception_attr+0x66>
    f446:	687b      	ldr	r3, [r7, #4]
    f448:	3304      	adds	r3, #4
    f44a:	681b      	ldr	r3, [r3, #0]
    f44c:	4a12      	ldr	r2, [pc, #72]	; (f498 <mp_obj_exception_attr+0x70>)
    f44e:	4293      	cmp	r3, r2
    f450:	d11d      	bne.n	f48e <mp_obj_exception_attr+0x66>
            // optimization of pre-allocating exception instance and raising
            // it repeatedly - this avoids memory allocation during raise.
            // However, uPy will keep adding traceback entries to such
            // exception instance, so before throwing it, traceback should
            // be cleared like above.
            self->traceback_len = 0;
    f452:	697b      	ldr	r3, [r7, #20]
    f454:	2200      	movs	r2, #0
    f456:	80da      	strh	r2, [r3, #6]
            dest[0] = MP_OBJ_NULL; // indicate success
    f458:	687b      	ldr	r3, [r7, #4]
    f45a:	2200      	movs	r2, #0
    f45c:	601a      	str	r2, [r3, #0]
        }
        return;
    f45e:	e016      	b.n	f48e <mp_obj_exception_attr+0x66>
    }
    if (attr == MP_QSTR_args) {
    f460:	68bb      	ldr	r3, [r7, #8]
    f462:	2b57      	cmp	r3, #87	; 0x57
    f464:	d104      	bne.n	f470 <mp_obj_exception_attr+0x48>
        dest[0] = MP_OBJ_FROM_PTR(self->args);
    f466:	697b      	ldr	r3, [r7, #20]
    f468:	68da      	ldr	r2, [r3, #12]
    f46a:	687b      	ldr	r3, [r7, #4]
    f46c:	601a      	str	r2, [r3, #0]
    f46e:	e00f      	b.n	f490 <mp_obj_exception_attr+0x68>
    } else if (self->base.type == &mp_type_StopIteration && attr == MP_QSTR_value) {
    f470:	697b      	ldr	r3, [r7, #20]
    f472:	681b      	ldr	r3, [r3, #0]
    f474:	4a09      	ldr	r2, [pc, #36]	; (f49c <mp_obj_exception_attr+0x74>)
    f476:	4293      	cmp	r3, r2
    f478:	d10a      	bne.n	f490 <mp_obj_exception_attr+0x68>
    f47a:	68bb      	ldr	r3, [r7, #8]
    f47c:	2bc3      	cmp	r3, #195	; 0xc3
    f47e:	d107      	bne.n	f490 <mp_obj_exception_attr+0x68>
        dest[0] = mp_obj_exception_get_value(self_in);
    f480:	68f8      	ldr	r0, [r7, #12]
    f482:	f7ff ffb9 	bl	f3f8 <mp_obj_exception_get_value>
    f486:	4602      	mov	r2, r0
    f488:	687b      	ldr	r3, [r7, #4]
    f48a:	601a      	str	r2, [r3, #0]
    f48c:	e000      	b.n	f490 <mp_obj_exception_attr+0x68>
        return;
    f48e:	bf00      	nop
    }
}
    f490:	3718      	adds	r7, #24
    f492:	46bd      	mov	sp, r7
    f494:	bd80      	pop	{r7, pc}
    f496:	bf00      	nop
    f498:	00021534 	.word	0x00021534
    f49c:	0002032c 	.word	0x0002032c

0000f4a0 <mp_obj_new_exception>:
    MP_DEFINE_EXCEPTION(UnicodeWarning, Warning)
    MP_DEFINE_EXCEPTION(BytesWarning, Warning)
    MP_DEFINE_EXCEPTION(ResourceWarning, Warning)
    */

mp_obj_t mp_obj_new_exception(const mp_obj_type_t *exc_type) {
    f4a0:	b580      	push	{r7, lr}
    f4a2:	b082      	sub	sp, #8
    f4a4:	af00      	add	r7, sp, #0
    f4a6:	6078      	str	r0, [r7, #4]
    return mp_obj_new_exception_args(exc_type, 0, NULL);
    f4a8:	2200      	movs	r2, #0
    f4aa:	2100      	movs	r1, #0
    f4ac:	6878      	ldr	r0, [r7, #4]
    f4ae:	f000 f815 	bl	f4dc <mp_obj_new_exception_args>
    f4b2:	4603      	mov	r3, r0
}
    f4b4:	4618      	mov	r0, r3
    f4b6:	3708      	adds	r7, #8
    f4b8:	46bd      	mov	sp, r7
    f4ba:	bd80      	pop	{r7, pc}

0000f4bc <mp_obj_new_exception_arg1>:

// "Optimized" version for common(?) case of having 1 exception arg
mp_obj_t mp_obj_new_exception_arg1(const mp_obj_type_t *exc_type, mp_obj_t arg) {
    f4bc:	b580      	push	{r7, lr}
    f4be:	b082      	sub	sp, #8
    f4c0:	af00      	add	r7, sp, #0
    f4c2:	6078      	str	r0, [r7, #4]
    f4c4:	6039      	str	r1, [r7, #0]
    return mp_obj_new_exception_args(exc_type, 1, &arg);
    f4c6:	463b      	mov	r3, r7
    f4c8:	461a      	mov	r2, r3
    f4ca:	2101      	movs	r1, #1
    f4cc:	6878      	ldr	r0, [r7, #4]
    f4ce:	f000 f805 	bl	f4dc <mp_obj_new_exception_args>
    f4d2:	4603      	mov	r3, r0
}
    f4d4:	4618      	mov	r0, r3
    f4d6:	3708      	adds	r7, #8
    f4d8:	46bd      	mov	sp, r7
    f4da:	bd80      	pop	{r7, pc}

0000f4dc <mp_obj_new_exception_args>:

mp_obj_t mp_obj_new_exception_args(const mp_obj_type_t *exc_type, size_t n_args, const mp_obj_t *args) {
    f4dc:	b590      	push	{r4, r7, lr}
    f4de:	b085      	sub	sp, #20
    f4e0:	af00      	add	r7, sp, #0
    f4e2:	60f8      	str	r0, [r7, #12]
    f4e4:	60b9      	str	r1, [r7, #8]
    f4e6:	607a      	str	r2, [r7, #4]
    assert(exc_type->make_new == mp_obj_exception_make_new);
    f4e8:	68fb      	ldr	r3, [r7, #12]
    f4ea:	68db      	ldr	r3, [r3, #12]
    f4ec:	4a0a      	ldr	r2, [pc, #40]	; (f518 <mp_obj_new_exception_args+0x3c>)
    f4ee:	4293      	cmp	r3, r2
    f4f0:	d006      	beq.n	f500 <mp_obj_new_exception_args+0x24>
    f4f2:	4b0a      	ldr	r3, [pc, #40]	; (f51c <mp_obj_new_exception_args+0x40>)
    f4f4:	4a0a      	ldr	r2, [pc, #40]	; (f520 <mp_obj_new_exception_args+0x44>)
    f4f6:	f240 1137 	movw	r1, #311	; 0x137
    f4fa:	480a      	ldr	r0, [pc, #40]	; (f524 <mp_obj_new_exception_args+0x48>)
    f4fc:	f00b ff36 	bl	1b36c <__assert_func>
    return exc_type->make_new(exc_type, n_args, 0, args);
    f500:	68fb      	ldr	r3, [r7, #12]
    f502:	68dc      	ldr	r4, [r3, #12]
    f504:	687b      	ldr	r3, [r7, #4]
    f506:	2200      	movs	r2, #0
    f508:	68b9      	ldr	r1, [r7, #8]
    f50a:	68f8      	ldr	r0, [r7, #12]
    f50c:	47a0      	blx	r4
    f50e:	4603      	mov	r3, r0
}
    f510:	4618      	mov	r0, r3
    f512:	3714      	adds	r7, #20
    f514:	46bd      	mov	sp, r7
    f516:	bd90      	pop	{r4, r7, pc}
    f518:	0000f359 	.word	0x0000f359
    f51c:	000207dc 	.word	0x000207dc
    f520:	00020858 	.word	0x00020858
    f524:	0002080c 	.word	0x0002080c

0000f528 <mp_obj_new_exception_msg>:

mp_obj_t mp_obj_new_exception_msg(const mp_obj_type_t *exc_type, const char *msg) {
    f528:	b580      	push	{r7, lr}
    f52a:	b082      	sub	sp, #8
    f52c:	af00      	add	r7, sp, #0
    f52e:	6078      	str	r0, [r7, #4]
    f530:	6039      	str	r1, [r7, #0]
    return mp_obj_new_exception_msg_varg(exc_type, msg);
    f532:	6839      	ldr	r1, [r7, #0]
    f534:	6878      	ldr	r0, [r7, #4]
    f536:	f000 f857 	bl	f5e8 <mp_obj_new_exception_msg_varg>
    f53a:	4603      	mov	r3, r0
}
    f53c:	4618      	mov	r0, r3
    f53e:	3708      	adds	r7, #8
    f540:	46bd      	mov	sp, r7
    f542:	bd80      	pop	{r7, pc}

0000f544 <exc_add_strn>:
    size_t alloc;
    size_t len;
    byte *buf;
};

STATIC void exc_add_strn(void *data, const char *str, size_t len) {
    f544:	b580      	push	{r7, lr}
    f546:	b088      	sub	sp, #32
    f548:	af00      	add	r7, sp, #0
    f54a:	60f8      	str	r0, [r7, #12]
    f54c:	60b9      	str	r1, [r7, #8]
    f54e:	607a      	str	r2, [r7, #4]
    struct _exc_printer_t *pr = data;
    f550:	68fb      	ldr	r3, [r7, #12]
    f552:	61fb      	str	r3, [r7, #28]
    if (pr->len + len >= pr->alloc) {
    f554:	69fb      	ldr	r3, [r7, #28]
    f556:	689a      	ldr	r2, [r3, #8]
    f558:	687b      	ldr	r3, [r7, #4]
    f55a:	441a      	add	r2, r3
    f55c:	69fb      	ldr	r3, [r7, #28]
    f55e:	685b      	ldr	r3, [r3, #4]
    f560:	429a      	cmp	r2, r3
    f562:	d32d      	bcc.n	f5c0 <exc_add_strn+0x7c>
        // Not enough room for data plus a null byte so try to grow the buffer
        if (pr->allow_realloc) {
    f564:	69fb      	ldr	r3, [r7, #28]
    f566:	781b      	ldrb	r3, [r3, #0]
    f568:	2b00      	cmp	r3, #0
    f56a:	d022      	beq.n	f5b2 <exc_add_strn+0x6e>
            size_t new_alloc = pr->alloc + len + 16;
    f56c:	69fb      	ldr	r3, [r7, #28]
    f56e:	685a      	ldr	r2, [r3, #4]
    f570:	687b      	ldr	r3, [r7, #4]
    f572:	4413      	add	r3, r2
    f574:	3310      	adds	r3, #16
    f576:	61bb      	str	r3, [r7, #24]
            byte *new_buf = m_renew_maybe(byte, pr->buf, pr->alloc, new_alloc, true);
    f578:	69fb      	ldr	r3, [r7, #28]
    f57a:	68db      	ldr	r3, [r3, #12]
    f57c:	2201      	movs	r2, #1
    f57e:	69b9      	ldr	r1, [r7, #24]
    f580:	4618      	mov	r0, r3
    f582:	f7f0 ff19 	bl	3b8 <m_realloc_maybe>
    f586:	6178      	str	r0, [r7, #20]
            if (new_buf == NULL) {
    f588:	697b      	ldr	r3, [r7, #20]
    f58a:	2b00      	cmp	r3, #0
    f58c:	d10a      	bne.n	f5a4 <exc_add_strn+0x60>
                pr->allow_realloc = false;
    f58e:	69fb      	ldr	r3, [r7, #28]
    f590:	2200      	movs	r2, #0
    f592:	701a      	strb	r2, [r3, #0]
                len = pr->alloc - pr->len - 1;
    f594:	69fb      	ldr	r3, [r7, #28]
    f596:	685a      	ldr	r2, [r3, #4]
    f598:	69fb      	ldr	r3, [r7, #28]
    f59a:	689b      	ldr	r3, [r3, #8]
    f59c:	1ad3      	subs	r3, r2, r3
    f59e:	3b01      	subs	r3, #1
    f5a0:	607b      	str	r3, [r7, #4]
    f5a2:	e00d      	b.n	f5c0 <exc_add_strn+0x7c>
            } else {
                pr->alloc = new_alloc;
    f5a4:	69fb      	ldr	r3, [r7, #28]
    f5a6:	69ba      	ldr	r2, [r7, #24]
    f5a8:	605a      	str	r2, [r3, #4]
                pr->buf = new_buf;
    f5aa:	69fb      	ldr	r3, [r7, #28]
    f5ac:	697a      	ldr	r2, [r7, #20]
    f5ae:	60da      	str	r2, [r3, #12]
    f5b0:	e006      	b.n	f5c0 <exc_add_strn+0x7c>
            }
        } else {
            len = pr->alloc - pr->len - 1;
    f5b2:	69fb      	ldr	r3, [r7, #28]
    f5b4:	685a      	ldr	r2, [r3, #4]
    f5b6:	69fb      	ldr	r3, [r7, #28]
    f5b8:	689b      	ldr	r3, [r3, #8]
    f5ba:	1ad3      	subs	r3, r2, r3
    f5bc:	3b01      	subs	r3, #1
    f5be:	607b      	str	r3, [r7, #4]
        }
    }
    memcpy(pr->buf + pr->len, str, len);
    f5c0:	69fb      	ldr	r3, [r7, #28]
    f5c2:	68da      	ldr	r2, [r3, #12]
    f5c4:	69fb      	ldr	r3, [r7, #28]
    f5c6:	689b      	ldr	r3, [r3, #8]
    f5c8:	4413      	add	r3, r2
    f5ca:	687a      	ldr	r2, [r7, #4]
    f5cc:	68b9      	ldr	r1, [r7, #8]
    f5ce:	4618      	mov	r0, r3
    f5d0:	f00c fc78 	bl	1bec4 <memcpy>
    pr->len += len;
    f5d4:	69fb      	ldr	r3, [r7, #28]
    f5d6:	689a      	ldr	r2, [r3, #8]
    f5d8:	687b      	ldr	r3, [r7, #4]
    f5da:	441a      	add	r2, r3
    f5dc:	69fb      	ldr	r3, [r7, #28]
    f5de:	609a      	str	r2, [r3, #8]
}
    f5e0:	bf00      	nop
    f5e2:	3720      	adds	r7, #32
    f5e4:	46bd      	mov	sp, r7
    f5e6:	bd80      	pop	{r7, pc}

0000f5e8 <mp_obj_new_exception_msg_varg>:

mp_obj_t mp_obj_new_exception_msg_varg(const mp_obj_type_t *exc_type, const char *fmt, ...) {
    f5e8:	b40e      	push	{r1, r2, r3}
    f5ea:	b580      	push	{r7, lr}
    f5ec:	b08f      	sub	sp, #60	; 0x3c
    f5ee:	af00      	add	r7, sp, #0
    f5f0:	6078      	str	r0, [r7, #4]
    assert(fmt != NULL);
    f5f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    f5f4:	2b00      	cmp	r3, #0
    f5f6:	d106      	bne.n	f606 <mp_obj_new_exception_msg_varg+0x1e>
    f5f8:	4b43      	ldr	r3, [pc, #268]	; (f708 <mp_obj_new_exception_msg_varg+0x120>)
    f5fa:	4a44      	ldr	r2, [pc, #272]	; (f70c <mp_obj_new_exception_msg_varg+0x124>)
    f5fc:	f240 1161 	movw	r1, #353	; 0x161
    f600:	4843      	ldr	r0, [pc, #268]	; (f710 <mp_obj_new_exception_msg_varg+0x128>)
    f602:	f00b feb3 	bl	1b36c <__assert_func>

    // Check that the given type is an exception type
    assert(exc_type->make_new == mp_obj_exception_make_new);
    f606:	687b      	ldr	r3, [r7, #4]
    f608:	68db      	ldr	r3, [r3, #12]
    f60a:	4a42      	ldr	r2, [pc, #264]	; (f714 <mp_obj_new_exception_msg_varg+0x12c>)
    f60c:	4293      	cmp	r3, r2
    f60e:	d006      	beq.n	f61e <mp_obj_new_exception_msg_varg+0x36>
    f610:	4b41      	ldr	r3, [pc, #260]	; (f718 <mp_obj_new_exception_msg_varg+0x130>)
    f612:	4a3e      	ldr	r2, [pc, #248]	; (f70c <mp_obj_new_exception_msg_varg+0x124>)
    f614:	f44f 71b2 	mov.w	r1, #356	; 0x164
    f618:	483d      	ldr	r0, [pc, #244]	; (f710 <mp_obj_new_exception_msg_varg+0x128>)
    f61a:	f00b fea7 	bl	1b36c <__assert_func>

    // Try to allocate memory for the message
    mp_obj_str_t *o_str = m_new_obj_maybe(mp_obj_str_t);
    f61e:	2010      	movs	r0, #16
    f620:	f7f0 fe94 	bl	34c <m_malloc_maybe>
    f624:	6378      	str	r0, [r7, #52]	; 0x34
    size_t o_str_alloc = strlen(fmt) + 1;
    f626:	6c78      	ldr	r0, [r7, #68]	; 0x44
    f628:	f00c fd86 	bl	1c138 <strlen>
    f62c:	4603      	mov	r3, r0
    f62e:	3301      	adds	r3, #1
    f630:	633b      	str	r3, [r7, #48]	; 0x30
    byte *o_str_buf = m_new_maybe(byte, o_str_alloc);
    f632:	6b38      	ldr	r0, [r7, #48]	; 0x30
    f634:	f7f0 fe8a 	bl	34c <m_malloc_maybe>
    f638:	62f8      	str	r0, [r7, #44]	; 0x2c

    bool used_emg_buf = false;
    f63a:	2300      	movs	r3, #0
    f63c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        o_str_alloc = (uint8_t*)MP_STATE_VM(mp_emergency_exception_buf)
            + mp_emergency_exception_buf_size - o_str_buf;
    }
    #endif

    if (o_str == NULL) {
    f640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f642:	2b00      	cmp	r3, #0
    f644:	d107      	bne.n	f656 <mp_obj_new_exception_msg_varg+0x6e>
        // No memory for the string object so create the exception with no args
        return mp_obj_exception_make_new(exc_type, 0, 0, NULL);
    f646:	2300      	movs	r3, #0
    f648:	2200      	movs	r2, #0
    f64a:	2100      	movs	r1, #0
    f64c:	6878      	ldr	r0, [r7, #4]
    f64e:	f7ff fe83 	bl	f358 <mp_obj_exception_make_new>
    f652:	4603      	mov	r3, r0
    f654:	e050      	b.n	f6f8 <mp_obj_new_exception_msg_varg+0x110>
    }

    if (o_str_buf == NULL) {
    f656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f658:	2b00      	cmp	r3, #0
    f65a:	d107      	bne.n	f66c <mp_obj_new_exception_msg_varg+0x84>
        // No memory for the string buffer: assume that the fmt string is in ROM
        // and use that data as the data of the string
        o_str->len = o_str_alloc - 1; // will be equal to strlen(fmt)
    f65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f65e:	1e5a      	subs	r2, r3, #1
    f660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f662:	609a      	str	r2, [r3, #8]
        o_str->data = (const byte*)fmt;
    f664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    f668:	60da      	str	r2, [r3, #12]
    f66a:	e02d      	b.n	f6c8 <mp_obj_new_exception_msg_varg+0xe0>
    } else {
        // We have some memory to format the string
        struct _exc_printer_t exc_pr = {!used_emg_buf, o_str_alloc, 0, o_str_buf};
    f66c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    f670:	2b00      	cmp	r3, #0
    f672:	bf14      	ite	ne
    f674:	2301      	movne	r3, #1
    f676:	2300      	moveq	r3, #0
    f678:	b2db      	uxtb	r3, r3
    f67a:	f083 0301 	eor.w	r3, r3, #1
    f67e:	b2db      	uxtb	r3, r3
    f680:	f003 0301 	and.w	r3, r3, #1
    f684:	b2db      	uxtb	r3, r3
    f686:	753b      	strb	r3, [r7, #20]
    f688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f68a:	61bb      	str	r3, [r7, #24]
    f68c:	2300      	movs	r3, #0
    f68e:	61fb      	str	r3, [r7, #28]
    f690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f692:	623b      	str	r3, [r7, #32]
        mp_print_t print = {&exc_pr, exc_add_strn};
    f694:	f107 0314 	add.w	r3, r7, #20
    f698:	60fb      	str	r3, [r7, #12]
    f69a:	4b20      	ldr	r3, [pc, #128]	; (f71c <mp_obj_new_exception_msg_varg+0x134>)
    f69c:	613b      	str	r3, [r7, #16]
        va_list ap;
        va_start(ap, fmt);
    f69e:	f107 0348 	add.w	r3, r7, #72	; 0x48
    f6a2:	60bb      	str	r3, [r7, #8]
        mp_vprintf(&print, fmt, ap);
    f6a4:	f107 030c 	add.w	r3, r7, #12
    f6a8:	68ba      	ldr	r2, [r7, #8]
    f6aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
    f6ac:	4618      	mov	r0, r3
    f6ae:	f7f2 fc0f 	bl	1ed0 <mp_vprintf>
        va_end(ap);
        exc_pr.buf[exc_pr.len] = '\0';
    f6b2:	6a3a      	ldr	r2, [r7, #32]
    f6b4:	69fb      	ldr	r3, [r7, #28]
    f6b6:	4413      	add	r3, r2
    f6b8:	2200      	movs	r2, #0
    f6ba:	701a      	strb	r2, [r3, #0]
        o_str->len = exc_pr.len;
    f6bc:	69fa      	ldr	r2, [r7, #28]
    f6be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f6c0:	609a      	str	r2, [r3, #8]
        o_str->data = exc_pr.buf;
    f6c2:	6a3a      	ldr	r2, [r7, #32]
    f6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f6c6:	60da      	str	r2, [r3, #12]
    }

    // Create the string object and call mp_obj_exception_make_new to create the exception
    o_str->base.type = &mp_type_str;
    f6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f6ca:	4a15      	ldr	r2, [pc, #84]	; (f720 <mp_obj_new_exception_msg_varg+0x138>)
    f6cc:	601a      	str	r2, [r3, #0]
    o_str->hash = qstr_compute_hash(o_str->data, o_str->len);
    f6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f6d0:	68da      	ldr	r2, [r3, #12]
    f6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f6d4:	689b      	ldr	r3, [r3, #8]
    f6d6:	4619      	mov	r1, r3
    f6d8:	4610      	mov	r0, r2
    f6da:	f7f1 fb9b 	bl	e14 <qstr_compute_hash>
    f6de:	4602      	mov	r2, r0
    f6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f6e2:	605a      	str	r2, [r3, #4]
    mp_obj_t arg = MP_OBJ_FROM_PTR(o_str);
    f6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f6e6:	627b      	str	r3, [r7, #36]	; 0x24
    return mp_obj_exception_make_new(exc_type, 1, 0, &arg);
    f6e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
    f6ec:	2200      	movs	r2, #0
    f6ee:	2101      	movs	r1, #1
    f6f0:	6878      	ldr	r0, [r7, #4]
    f6f2:	f7ff fe31 	bl	f358 <mp_obj_exception_make_new>
    f6f6:	4603      	mov	r3, r0
}
    f6f8:	4618      	mov	r0, r3
    f6fa:	373c      	adds	r7, #60	; 0x3c
    f6fc:	46bd      	mov	sp, r7
    f6fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    f702:	b003      	add	sp, #12
    f704:	4770      	bx	lr
    f706:	bf00      	nop
    f708:	00020824 	.word	0x00020824
    f70c:	00020874 	.word	0x00020874
    f710:	0002080c 	.word	0x0002080c
    f714:	0000f359 	.word	0x0000f359
    f718:	000207dc 	.word	0x000207dc
    f71c:	0000f545 	.word	0x0000f545
    f720:	00021be4 	.word	0x00021be4

0000f724 <mp_obj_is_exception_type>:

// return true if the given object is an exception type
bool mp_obj_is_exception_type(mp_obj_t self_in) {
    f724:	b580      	push	{r7, lr}
    f726:	b084      	sub	sp, #16
    f728:	af00      	add	r7, sp, #0
    f72a:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_TYPE(self_in, &mp_type_type)) {
    f72c:	6878      	ldr	r0, [r7, #4]
    f72e:	f7ff fd9f 	bl	f270 <MP_OBJ_IS_OBJ>
    f732:	4603      	mov	r3, r0
    f734:	2b00      	cmp	r3, #0
    f736:	d00d      	beq.n	f754 <mp_obj_is_exception_type+0x30>
    f738:	687b      	ldr	r3, [r7, #4]
    f73a:	681b      	ldr	r3, [r3, #0]
    f73c:	4a0a      	ldr	r2, [pc, #40]	; (f768 <mp_obj_is_exception_type+0x44>)
    f73e:	4293      	cmp	r3, r2
    f740:	d108      	bne.n	f754 <mp_obj_is_exception_type+0x30>
        // optimisation when self_in is a builtin exception
        mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
    f742:	687b      	ldr	r3, [r7, #4]
    f744:	60fb      	str	r3, [r7, #12]
        if (self->make_new == mp_obj_exception_make_new) {
    f746:	68fb      	ldr	r3, [r7, #12]
    f748:	68db      	ldr	r3, [r3, #12]
    f74a:	4a08      	ldr	r2, [pc, #32]	; (f76c <mp_obj_is_exception_type+0x48>)
    f74c:	4293      	cmp	r3, r2
    f74e:	d101      	bne.n	f754 <mp_obj_is_exception_type+0x30>
            return true;
    f750:	2301      	movs	r3, #1
    f752:	e004      	b.n	f75e <mp_obj_is_exception_type+0x3a>
        }
    }
    return mp_obj_is_subclass_fast(self_in, MP_OBJ_FROM_PTR(&mp_type_BaseException));
    f754:	4906      	ldr	r1, [pc, #24]	; (f770 <mp_obj_is_exception_type+0x4c>)
    f756:	6878      	ldr	r0, [r7, #4]
    f758:	f007 fdc4 	bl	172e4 <mp_obj_is_subclass_fast>
    f75c:	4603      	mov	r3, r0
}
    f75e:	4618      	mov	r0, r3
    f760:	3710      	adds	r7, #16
    f762:	46bd      	mov	sp, r7
    f764:	bd80      	pop	{r7, pc}
    f766:	bf00      	nop
    f768:	00022160 	.word	0x00022160
    f76c:	0000f359 	.word	0x0000f359
    f770:	00020200 	.word	0x00020200

0000f774 <mp_obj_is_exception_instance>:

// return true if the given object is an instance of an exception type
bool mp_obj_is_exception_instance(mp_obj_t self_in) {
    f774:	b580      	push	{r7, lr}
    f776:	b082      	sub	sp, #8
    f778:	af00      	add	r7, sp, #0
    f77a:	6078      	str	r0, [r7, #4]
    return mp_obj_is_exception_type(MP_OBJ_FROM_PTR(mp_obj_get_type(self_in)));
    f77c:	6878      	ldr	r0, [r7, #4]
    f77e:	f7fe f849 	bl	d814 <mp_obj_get_type>
    f782:	4603      	mov	r3, r0
    f784:	4618      	mov	r0, r3
    f786:	f7ff ffcd 	bl	f724 <mp_obj_is_exception_type>
    f78a:	4603      	mov	r3, r0
}
    f78c:	4618      	mov	r0, r3
    f78e:	3708      	adds	r7, #8
    f790:	46bd      	mov	sp, r7
    f792:	bd80      	pop	{r7, pc}

0000f794 <mp_obj_exception_match>:

// Return true if exception (type or instance) is a subclass of given
// exception type.  Assumes exc_type is a subclass of BaseException, as
// defined by mp_obj_is_exception_type(exc_type).
bool mp_obj_exception_match(mp_obj_t exc, mp_const_obj_t exc_type) {
    f794:	b580      	push	{r7, lr}
    f796:	b082      	sub	sp, #8
    f798:	af00      	add	r7, sp, #0
    f79a:	6078      	str	r0, [r7, #4]
    f79c:	6039      	str	r1, [r7, #0]
    // if exc is an instance of an exception, then extract and use its type
    if (mp_obj_is_exception_instance(exc)) {
    f79e:	6878      	ldr	r0, [r7, #4]
    f7a0:	f7ff ffe8 	bl	f774 <mp_obj_is_exception_instance>
    f7a4:	4603      	mov	r3, r0
    f7a6:	2b00      	cmp	r3, #0
    f7a8:	d003      	beq.n	f7b2 <mp_obj_exception_match+0x1e>
        exc = MP_OBJ_FROM_PTR(mp_obj_get_type(exc));
    f7aa:	6878      	ldr	r0, [r7, #4]
    f7ac:	f7fe f832 	bl	d814 <mp_obj_get_type>
    f7b0:	6078      	str	r0, [r7, #4]
    }
    return mp_obj_is_subclass_fast(exc, exc_type);
    f7b2:	6839      	ldr	r1, [r7, #0]
    f7b4:	6878      	ldr	r0, [r7, #4]
    f7b6:	f007 fd95 	bl	172e4 <mp_obj_is_subclass_fast>
    f7ba:	4603      	mov	r3, r0
}
    f7bc:	4618      	mov	r0, r3
    f7be:	3708      	adds	r7, #8
    f7c0:	46bd      	mov	sp, r7
    f7c2:	bd80      	pop	{r7, pc}

0000f7c4 <mp_obj_exception_clear_traceback>:
        self = MP_OBJ_TO_PTR(self_in); \
    } else { \
        self = MP_OBJ_TO_PTR(((mp_obj_instance_t*)MP_OBJ_TO_PTR(self_in))->subobj[0]); \
    }

void mp_obj_exception_clear_traceback(mp_obj_t self_in) {
    f7c4:	b580      	push	{r7, lr}
    f7c6:	b084      	sub	sp, #16
    f7c8:	af00      	add	r7, sp, #0
    f7ca:	6078      	str	r0, [r7, #4]
    GET_NATIVE_EXCEPTION(self, self_in);
    f7cc:	6878      	ldr	r0, [r7, #4]
    f7ce:	f7ff ffd1 	bl	f774 <mp_obj_is_exception_instance>
    f7d2:	4603      	mov	r3, r0
    f7d4:	2b00      	cmp	r3, #0
    f7d6:	d106      	bne.n	f7e6 <mp_obj_exception_clear_traceback+0x22>
    f7d8:	4b0d      	ldr	r3, [pc, #52]	; (f810 <mp_obj_exception_clear_traceback+0x4c>)
    f7da:	4a0e      	ldr	r2, [pc, #56]	; (f814 <mp_obj_exception_clear_traceback+0x50>)
    f7dc:	f240 11c3 	movw	r1, #451	; 0x1c3
    f7e0:	480d      	ldr	r0, [pc, #52]	; (f818 <mp_obj_exception_clear_traceback+0x54>)
    f7e2:	f00b fdc3 	bl	1b36c <__assert_func>
    f7e6:	6878      	ldr	r0, [r7, #4]
    f7e8:	f7fe f814 	bl	d814 <mp_obj_get_type>
    f7ec:	4603      	mov	r3, r0
    f7ee:	68db      	ldr	r3, [r3, #12]
    f7f0:	4a0a      	ldr	r2, [pc, #40]	; (f81c <mp_obj_exception_clear_traceback+0x58>)
    f7f2:	4293      	cmp	r3, r2
    f7f4:	d102      	bne.n	f7fc <mp_obj_exception_clear_traceback+0x38>
    f7f6:	687b      	ldr	r3, [r7, #4]
    f7f8:	60fb      	str	r3, [r7, #12]
    f7fa:	e002      	b.n	f802 <mp_obj_exception_clear_traceback+0x3e>
    f7fc:	687b      	ldr	r3, [r7, #4]
    f7fe:	691b      	ldr	r3, [r3, #16]
    f800:	60fb      	str	r3, [r7, #12]
    // just set the traceback to the null object
    // we don't want to call any memory management functions here
    self->traceback_data = NULL;
    f802:	68fb      	ldr	r3, [r7, #12]
    f804:	2200      	movs	r2, #0
    f806:	609a      	str	r2, [r3, #8]
}
    f808:	bf00      	nop
    f80a:	3710      	adds	r7, #16
    f80c:	46bd      	mov	sp, r7
    f80e:	bd80      	pop	{r7, pc}
    f810:	00020830 	.word	0x00020830
    f814:	00020894 	.word	0x00020894
    f818:	0002080c 	.word	0x0002080c
    f81c:	0000f359 	.word	0x0000f359

0000f820 <mp_obj_exception_add_traceback>:

void mp_obj_exception_add_traceback(mp_obj_t self_in, qstr file, size_t line, qstr block) {
    f820:	b580      	push	{r7, lr}
    f822:	b088      	sub	sp, #32
    f824:	af00      	add	r7, sp, #0
    f826:	60f8      	str	r0, [r7, #12]
    f828:	60b9      	str	r1, [r7, #8]
    f82a:	607a      	str	r2, [r7, #4]
    f82c:	603b      	str	r3, [r7, #0]
    GET_NATIVE_EXCEPTION(self, self_in);
    f82e:	68f8      	ldr	r0, [r7, #12]
    f830:	f7ff ffa0 	bl	f774 <mp_obj_is_exception_instance>
    f834:	4603      	mov	r3, r0
    f836:	2b00      	cmp	r3, #0
    f838:	d106      	bne.n	f848 <mp_obj_exception_add_traceback+0x28>
    f83a:	4b33      	ldr	r3, [pc, #204]	; (f908 <mp_obj_exception_add_traceback+0xe8>)
    f83c:	4a33      	ldr	r2, [pc, #204]	; (f90c <mp_obj_exception_add_traceback+0xec>)
    f83e:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
    f842:	4833      	ldr	r0, [pc, #204]	; (f910 <mp_obj_exception_add_traceback+0xf0>)
    f844:	f00b fd92 	bl	1b36c <__assert_func>
    f848:	68f8      	ldr	r0, [r7, #12]
    f84a:	f7fd ffe3 	bl	d814 <mp_obj_get_type>
    f84e:	4603      	mov	r3, r0
    f850:	68db      	ldr	r3, [r3, #12]
    f852:	4a30      	ldr	r2, [pc, #192]	; (f914 <mp_obj_exception_add_traceback+0xf4>)
    f854:	4293      	cmp	r3, r2
    f856:	d102      	bne.n	f85e <mp_obj_exception_add_traceback+0x3e>
    f858:	68fb      	ldr	r3, [r7, #12]
    f85a:	61fb      	str	r3, [r7, #28]
    f85c:	e002      	b.n	f864 <mp_obj_exception_add_traceback+0x44>
    f85e:	68fb      	ldr	r3, [r7, #12]
    f860:	691b      	ldr	r3, [r3, #16]
    f862:	61fb      	str	r3, [r7, #28]

    // append this traceback info to traceback data
    // if memory allocation fails (eg because gc is locked), just return

    if (self->traceback_data == NULL) {
    f864:	69fb      	ldr	r3, [r7, #28]
    f866:	689b      	ldr	r3, [r3, #8]
    f868:	2b00      	cmp	r3, #0
    f86a:	d110      	bne.n	f88e <mp_obj_exception_add_traceback+0x6e>
        self->traceback_data = m_new_maybe(size_t, TRACEBACK_ENTRY_LEN);
    f86c:	200c      	movs	r0, #12
    f86e:	f7f0 fd6d 	bl	34c <m_malloc_maybe>
    f872:	4602      	mov	r2, r0
    f874:	69fb      	ldr	r3, [r7, #28]
    f876:	609a      	str	r2, [r3, #8]
        if (self->traceback_data == NULL) {
    f878:	69fb      	ldr	r3, [r7, #28]
    f87a:	689b      	ldr	r3, [r3, #8]
    f87c:	2b00      	cmp	r3, #0
    f87e:	d03d      	beq.n	f8fc <mp_obj_exception_add_traceback+0xdc>
            // Can't allocate
            return;
            #endif
        } else {
            // Allocated the traceback data on the heap
            self->traceback_alloc = TRACEBACK_ENTRY_LEN;
    f880:	69fb      	ldr	r3, [r7, #28]
    f882:	2203      	movs	r2, #3
    f884:	809a      	strh	r2, [r3, #4]
        }
        self->traceback_len = 0;
    f886:	69fb      	ldr	r3, [r7, #28]
    f888:	2200      	movs	r2, #0
    f88a:	80da      	strh	r2, [r3, #6]
    f88c:	e01d      	b.n	f8ca <mp_obj_exception_add_traceback+0xaa>
    } else if (self->traceback_len + TRACEBACK_ENTRY_LEN > self->traceback_alloc) {
    f88e:	69fb      	ldr	r3, [r7, #28]
    f890:	88db      	ldrh	r3, [r3, #6]
    f892:	3303      	adds	r3, #3
    f894:	69fa      	ldr	r2, [r7, #28]
    f896:	8892      	ldrh	r2, [r2, #4]
    f898:	4293      	cmp	r3, r2
    f89a:	dd16      	ble.n	f8ca <mp_obj_exception_add_traceback+0xaa>
            // Can't resize the emergency buffer
            return;
        }
        #endif
        // be conservative with growing traceback data
        size_t *tb_data = m_renew_maybe(size_t, self->traceback_data, self->traceback_alloc,
    f89c:	69fb      	ldr	r3, [r7, #28]
    f89e:	6898      	ldr	r0, [r3, #8]
    f8a0:	69fb      	ldr	r3, [r7, #28]
    f8a2:	889b      	ldrh	r3, [r3, #4]
    f8a4:	3303      	adds	r3, #3
    f8a6:	009b      	lsls	r3, r3, #2
    f8a8:	2201      	movs	r2, #1
    f8aa:	4619      	mov	r1, r3
    f8ac:	f7f0 fd84 	bl	3b8 <m_realloc_maybe>
    f8b0:	61b8      	str	r0, [r7, #24]
            self->traceback_alloc + TRACEBACK_ENTRY_LEN, true);
        if (tb_data == NULL) {
    f8b2:	69bb      	ldr	r3, [r7, #24]
    f8b4:	2b00      	cmp	r3, #0
    f8b6:	d023      	beq.n	f900 <mp_obj_exception_add_traceback+0xe0>
            return;
        }
        self->traceback_data = tb_data;
    f8b8:	69fb      	ldr	r3, [r7, #28]
    f8ba:	69ba      	ldr	r2, [r7, #24]
    f8bc:	609a      	str	r2, [r3, #8]
        self->traceback_alloc += TRACEBACK_ENTRY_LEN;
    f8be:	69fb      	ldr	r3, [r7, #28]
    f8c0:	889b      	ldrh	r3, [r3, #4]
    f8c2:	3303      	adds	r3, #3
    f8c4:	b29a      	uxth	r2, r3
    f8c6:	69fb      	ldr	r3, [r7, #28]
    f8c8:	809a      	strh	r2, [r3, #4]
    }

    size_t *tb_data = &self->traceback_data[self->traceback_len];
    f8ca:	69fb      	ldr	r3, [r7, #28]
    f8cc:	689a      	ldr	r2, [r3, #8]
    f8ce:	69fb      	ldr	r3, [r7, #28]
    f8d0:	88db      	ldrh	r3, [r3, #6]
    f8d2:	009b      	lsls	r3, r3, #2
    f8d4:	4413      	add	r3, r2
    f8d6:	617b      	str	r3, [r7, #20]
    self->traceback_len += TRACEBACK_ENTRY_LEN;
    f8d8:	69fb      	ldr	r3, [r7, #28]
    f8da:	88db      	ldrh	r3, [r3, #6]
    f8dc:	3303      	adds	r3, #3
    f8de:	b29a      	uxth	r2, r3
    f8e0:	69fb      	ldr	r3, [r7, #28]
    f8e2:	80da      	strh	r2, [r3, #6]
    tb_data[0] = file;
    f8e4:	697b      	ldr	r3, [r7, #20]
    f8e6:	68ba      	ldr	r2, [r7, #8]
    f8e8:	601a      	str	r2, [r3, #0]
    tb_data[1] = line;
    f8ea:	697b      	ldr	r3, [r7, #20]
    f8ec:	3304      	adds	r3, #4
    f8ee:	687a      	ldr	r2, [r7, #4]
    f8f0:	601a      	str	r2, [r3, #0]
    tb_data[2] = block;
    f8f2:	697b      	ldr	r3, [r7, #20]
    f8f4:	3308      	adds	r3, #8
    f8f6:	683a      	ldr	r2, [r7, #0]
    f8f8:	601a      	str	r2, [r3, #0]
    f8fa:	e002      	b.n	f902 <mp_obj_exception_add_traceback+0xe2>
            return;
    f8fc:	bf00      	nop
    f8fe:	e000      	b.n	f902 <mp_obj_exception_add_traceback+0xe2>
            return;
    f900:	bf00      	nop
}
    f902:	3720      	adds	r7, #32
    f904:	46bd      	mov	sp, r7
    f906:	bd80      	pop	{r7, pc}
    f908:	00020830 	.word	0x00020830
    f90c:	000208b8 	.word	0x000208b8
    f910:	0002080c 	.word	0x0002080c
    f914:	0000f359 	.word	0x0000f359

0000f918 <mp_obj_exception_get_traceback>:

void mp_obj_exception_get_traceback(mp_obj_t self_in, size_t *n, size_t **values) {
    f918:	b580      	push	{r7, lr}
    f91a:	b086      	sub	sp, #24
    f91c:	af00      	add	r7, sp, #0
    f91e:	60f8      	str	r0, [r7, #12]
    f920:	60b9      	str	r1, [r7, #8]
    f922:	607a      	str	r2, [r7, #4]
    GET_NATIVE_EXCEPTION(self, self_in);
    f924:	68f8      	ldr	r0, [r7, #12]
    f926:	f7ff ff25 	bl	f774 <mp_obj_is_exception_instance>
    f92a:	4603      	mov	r3, r0
    f92c:	2b00      	cmp	r3, #0
    f92e:	d106      	bne.n	f93e <mp_obj_exception_get_traceback+0x26>
    f930:	4b16      	ldr	r3, [pc, #88]	; (f98c <mp_obj_exception_get_traceback+0x74>)
    f932:	4a17      	ldr	r2, [pc, #92]	; (f990 <mp_obj_exception_get_traceback+0x78>)
    f934:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
    f938:	4816      	ldr	r0, [pc, #88]	; (f994 <mp_obj_exception_get_traceback+0x7c>)
    f93a:	f00b fd17 	bl	1b36c <__assert_func>
    f93e:	68f8      	ldr	r0, [r7, #12]
    f940:	f7fd ff68 	bl	d814 <mp_obj_get_type>
    f944:	4603      	mov	r3, r0
    f946:	68db      	ldr	r3, [r3, #12]
    f948:	4a13      	ldr	r2, [pc, #76]	; (f998 <mp_obj_exception_get_traceback+0x80>)
    f94a:	4293      	cmp	r3, r2
    f94c:	d102      	bne.n	f954 <mp_obj_exception_get_traceback+0x3c>
    f94e:	68fb      	ldr	r3, [r7, #12]
    f950:	617b      	str	r3, [r7, #20]
    f952:	e002      	b.n	f95a <mp_obj_exception_get_traceback+0x42>
    f954:	68fb      	ldr	r3, [r7, #12]
    f956:	691b      	ldr	r3, [r3, #16]
    f958:	617b      	str	r3, [r7, #20]

    if (self->traceback_data == NULL) {
    f95a:	697b      	ldr	r3, [r7, #20]
    f95c:	689b      	ldr	r3, [r3, #8]
    f95e:	2b00      	cmp	r3, #0
    f960:	d106      	bne.n	f970 <mp_obj_exception_get_traceback+0x58>
        *n = 0;
    f962:	68bb      	ldr	r3, [r7, #8]
    f964:	2200      	movs	r2, #0
    f966:	601a      	str	r2, [r3, #0]
        *values = NULL;
    f968:	687b      	ldr	r3, [r7, #4]
    f96a:	2200      	movs	r2, #0
    f96c:	601a      	str	r2, [r3, #0]
    } else {
        *n = self->traceback_len;
        *values = self->traceback_data;
    }
}
    f96e:	e008      	b.n	f982 <mp_obj_exception_get_traceback+0x6a>
        *n = self->traceback_len;
    f970:	697b      	ldr	r3, [r7, #20]
    f972:	88db      	ldrh	r3, [r3, #6]
    f974:	461a      	mov	r2, r3
    f976:	68bb      	ldr	r3, [r7, #8]
    f978:	601a      	str	r2, [r3, #0]
        *values = self->traceback_data;
    f97a:	697b      	ldr	r3, [r7, #20]
    f97c:	689a      	ldr	r2, [r3, #8]
    f97e:	687b      	ldr	r3, [r7, #4]
    f980:	601a      	str	r2, [r3, #0]
}
    f982:	bf00      	nop
    f984:	3718      	adds	r7, #24
    f986:	46bd      	mov	sp, r7
    f988:	bd80      	pop	{r7, pc}
    f98a:	bf00      	nop
    f98c:	00020830 	.word	0x00020830
    f990:	000208d8 	.word	0x000208d8
    f994:	0002080c 	.word	0x0002080c
    f998:	0000f359 	.word	0x0000f359

0000f99c <MP_OBJ_IS_OBJ>:
    f99c:	b480      	push	{r7}
    f99e:	b083      	sub	sp, #12
    f9a0:	af00      	add	r7, sp, #0
    f9a2:	6078      	str	r0, [r7, #4]
    f9a4:	687b      	ldr	r3, [r7, #4]
    f9a6:	f003 0303 	and.w	r3, r3, #3
    f9aa:	2b00      	cmp	r3, #0
    f9ac:	bf0c      	ite	eq
    f9ae:	2301      	moveq	r3, #1
    f9b0:	2300      	movne	r3, #0
    f9b2:	b2db      	uxtb	r3, r3
    f9b4:	4618      	mov	r0, r3
    f9b6:	370c      	adds	r7, #12
    f9b8:	46bd      	mov	sp, r7
    f9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    f9be:	4770      	bx	lr

0000f9c0 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    f9c0:	b480      	push	{r7}
    f9c2:	af00      	add	r7, sp, #0
    f9c4:	4b03      	ldr	r3, [pc, #12]	; (f9d4 <mp_globals_get+0x14>)
    f9c6:	689b      	ldr	r3, [r3, #8]
    f9c8:	4618      	mov	r0, r3
    f9ca:	46bd      	mov	sp, r7
    f9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    f9d0:	4770      	bx	lr
    f9d2:	bf00      	nop
    f9d4:	20000a2c 	.word	0x20000a2c

0000f9d8 <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    f9d8:	b480      	push	{r7}
    f9da:	b083      	sub	sp, #12
    f9dc:	af00      	add	r7, sp, #0
    f9de:	6078      	str	r0, [r7, #4]
    f9e0:	4a04      	ldr	r2, [pc, #16]	; (f9f4 <mp_globals_set+0x1c>)
    f9e2:	687b      	ldr	r3, [r7, #4]
    f9e4:	6093      	str	r3, [r2, #8]
    f9e6:	bf00      	nop
    f9e8:	370c      	adds	r7, #12
    f9ea:	46bd      	mov	sp, r7
    f9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    f9f0:	4770      	bx	lr
    f9f2:	bf00      	nop
    f9f4:	20000a2c 	.word	0x20000a2c

0000f9f8 <fun_builtin_0_call>:
// function type.

/******************************************************************************/
/* builtin functions                                                          */

STATIC mp_obj_t fun_builtin_0_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    f9f8:	b580      	push	{r7, lr}
    f9fa:	b088      	sub	sp, #32
    f9fc:	af02      	add	r7, sp, #8
    f9fe:	60f8      	str	r0, [r7, #12]
    fa00:	60b9      	str	r1, [r7, #8]
    fa02:	607a      	str	r2, [r7, #4]
    fa04:	603b      	str	r3, [r7, #0]
    (void)args;
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_0));
    fa06:	68f8      	ldr	r0, [r7, #12]
    fa08:	f7ff ffc8 	bl	f99c <MP_OBJ_IS_OBJ>
    fa0c:	4603      	mov	r3, r0
    fa0e:	f083 0301 	eor.w	r3, r3, #1
    fa12:	b2db      	uxtb	r3, r3
    fa14:	2b00      	cmp	r3, #0
    fa16:	d104      	bne.n	fa22 <fun_builtin_0_call+0x2a>
    fa18:	68fb      	ldr	r3, [r7, #12]
    fa1a:	681b      	ldr	r3, [r3, #0]
    fa1c:	4a0d      	ldr	r2, [pc, #52]	; (fa54 <fun_builtin_0_call+0x5c>)
    fa1e:	4293      	cmp	r3, r2
    fa20:	d005      	beq.n	fa2e <fun_builtin_0_call+0x36>
    fa22:	4b0d      	ldr	r3, [pc, #52]	; (fa58 <fun_builtin_0_call+0x60>)
    fa24:	4a0d      	ldr	r2, [pc, #52]	; (fa5c <fun_builtin_0_call+0x64>)
    fa26:	2135      	movs	r1, #53	; 0x35
    fa28:	480d      	ldr	r0, [pc, #52]	; (fa60 <fun_builtin_0_call+0x68>)
    fa2a:	f00b fc9f 	bl	1b36c <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    fa2e:	68fb      	ldr	r3, [r7, #12]
    fa30:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 0, 0, false);
    fa32:	2300      	movs	r3, #0
    fa34:	9300      	str	r3, [sp, #0]
    fa36:	2300      	movs	r3, #0
    fa38:	2200      	movs	r2, #0
    fa3a:	6879      	ldr	r1, [r7, #4]
    fa3c:	68b8      	ldr	r0, [r7, #8]
    fa3e:	f7fd faf5 	bl	d02c <mp_arg_check_num>
    return self->fun._0();
    fa42:	697b      	ldr	r3, [r7, #20]
    fa44:	685b      	ldr	r3, [r3, #4]
    fa46:	4798      	blx	r3
    fa48:	4603      	mov	r3, r0
}
    fa4a:	4618      	mov	r0, r3
    fa4c:	3718      	adds	r7, #24
    fa4e:	46bd      	mov	sp, r7
    fa50:	bd80      	pop	{r7, pc}
    fa52:	bf00      	nop
    fa54:	0002093c 	.word	0x0002093c
    fa58:	000208f8 	.word	0x000208f8
    fa5c:	00020bc0 	.word	0x00020bc0
    fa60:	00020928 	.word	0x00020928

0000fa64 <fun_builtin_1_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_0_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_1_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fa64:	b580      	push	{r7, lr}
    fa66:	b088      	sub	sp, #32
    fa68:	af02      	add	r7, sp, #8
    fa6a:	60f8      	str	r0, [r7, #12]
    fa6c:	60b9      	str	r1, [r7, #8]
    fa6e:	607a      	str	r2, [r7, #4]
    fa70:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_1));
    fa72:	68f8      	ldr	r0, [r7, #12]
    fa74:	f7ff ff92 	bl	f99c <MP_OBJ_IS_OBJ>
    fa78:	4603      	mov	r3, r0
    fa7a:	f083 0301 	eor.w	r3, r3, #1
    fa7e:	b2db      	uxtb	r3, r3
    fa80:	2b00      	cmp	r3, #0
    fa82:	d104      	bne.n	fa8e <fun_builtin_1_call+0x2a>
    fa84:	68fb      	ldr	r3, [r7, #12]
    fa86:	681b      	ldr	r3, [r3, #0]
    fa88:	4a0e      	ldr	r2, [pc, #56]	; (fac4 <fun_builtin_1_call+0x60>)
    fa8a:	4293      	cmp	r3, r2
    fa8c:	d005      	beq.n	fa9a <fun_builtin_1_call+0x36>
    fa8e:	4b0e      	ldr	r3, [pc, #56]	; (fac8 <fun_builtin_1_call+0x64>)
    fa90:	4a0e      	ldr	r2, [pc, #56]	; (facc <fun_builtin_1_call+0x68>)
    fa92:	2143      	movs	r1, #67	; 0x43
    fa94:	480e      	ldr	r0, [pc, #56]	; (fad0 <fun_builtin_1_call+0x6c>)
    fa96:	f00b fc69 	bl	1b36c <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    fa9a:	68fb      	ldr	r3, [r7, #12]
    fa9c:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 1, 1, false);
    fa9e:	2300      	movs	r3, #0
    faa0:	9300      	str	r3, [sp, #0]
    faa2:	2301      	movs	r3, #1
    faa4:	2201      	movs	r2, #1
    faa6:	6879      	ldr	r1, [r7, #4]
    faa8:	68b8      	ldr	r0, [r7, #8]
    faaa:	f7fd fabf 	bl	d02c <mp_arg_check_num>
    return self->fun._1(args[0]);
    faae:	697b      	ldr	r3, [r7, #20]
    fab0:	685b      	ldr	r3, [r3, #4]
    fab2:	683a      	ldr	r2, [r7, #0]
    fab4:	6812      	ldr	r2, [r2, #0]
    fab6:	4610      	mov	r0, r2
    fab8:	4798      	blx	r3
    faba:	4603      	mov	r3, r0
}
    fabc:	4618      	mov	r0, r3
    fabe:	3718      	adds	r7, #24
    fac0:	46bd      	mov	sp, r7
    fac2:	bd80      	pop	{r7, pc}
    fac4:	000209a8 	.word	0x000209a8
    fac8:	00020978 	.word	0x00020978
    facc:	00020bd4 	.word	0x00020bd4
    fad0:	00020928 	.word	0x00020928

0000fad4 <fun_builtin_2_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_1_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_2_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fad4:	b580      	push	{r7, lr}
    fad6:	b088      	sub	sp, #32
    fad8:	af02      	add	r7, sp, #8
    fada:	60f8      	str	r0, [r7, #12]
    fadc:	60b9      	str	r1, [r7, #8]
    fade:	607a      	str	r2, [r7, #4]
    fae0:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_2));
    fae2:	68f8      	ldr	r0, [r7, #12]
    fae4:	f7ff ff5a 	bl	f99c <MP_OBJ_IS_OBJ>
    fae8:	4603      	mov	r3, r0
    faea:	f083 0301 	eor.w	r3, r3, #1
    faee:	b2db      	uxtb	r3, r3
    faf0:	2b00      	cmp	r3, #0
    faf2:	d104      	bne.n	fafe <fun_builtin_2_call+0x2a>
    faf4:	68fb      	ldr	r3, [r7, #12]
    faf6:	681b      	ldr	r3, [r3, #0]
    faf8:	4a10      	ldr	r2, [pc, #64]	; (fb3c <fun_builtin_2_call+0x68>)
    fafa:	4293      	cmp	r3, r2
    fafc:	d005      	beq.n	fb0a <fun_builtin_2_call+0x36>
    fafe:	4b10      	ldr	r3, [pc, #64]	; (fb40 <fun_builtin_2_call+0x6c>)
    fb00:	4a10      	ldr	r2, [pc, #64]	; (fb44 <fun_builtin_2_call+0x70>)
    fb02:	2151      	movs	r1, #81	; 0x51
    fb04:	4810      	ldr	r0, [pc, #64]	; (fb48 <fun_builtin_2_call+0x74>)
    fb06:	f00b fc31 	bl	1b36c <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    fb0a:	68fb      	ldr	r3, [r7, #12]
    fb0c:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 2, 2, false);
    fb0e:	2300      	movs	r3, #0
    fb10:	9300      	str	r3, [sp, #0]
    fb12:	2302      	movs	r3, #2
    fb14:	2202      	movs	r2, #2
    fb16:	6879      	ldr	r1, [r7, #4]
    fb18:	68b8      	ldr	r0, [r7, #8]
    fb1a:	f7fd fa87 	bl	d02c <mp_arg_check_num>
    return self->fun._2(args[0], args[1]);
    fb1e:	697b      	ldr	r3, [r7, #20]
    fb20:	685b      	ldr	r3, [r3, #4]
    fb22:	683a      	ldr	r2, [r7, #0]
    fb24:	6810      	ldr	r0, [r2, #0]
    fb26:	683a      	ldr	r2, [r7, #0]
    fb28:	3204      	adds	r2, #4
    fb2a:	6812      	ldr	r2, [r2, #0]
    fb2c:	4611      	mov	r1, r2
    fb2e:	4798      	blx	r3
    fb30:	4603      	mov	r3, r0
}
    fb32:	4618      	mov	r0, r3
    fb34:	3718      	adds	r7, #24
    fb36:	46bd      	mov	sp, r7
    fb38:	bd80      	pop	{r7, pc}
    fb3a:	bf00      	nop
    fb3c:	00020a14 	.word	0x00020a14
    fb40:	000209e4 	.word	0x000209e4
    fb44:	00020be8 	.word	0x00020be8
    fb48:	00020928 	.word	0x00020928

0000fb4c <fun_builtin_3_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_2_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_3_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fb4c:	b580      	push	{r7, lr}
    fb4e:	b088      	sub	sp, #32
    fb50:	af02      	add	r7, sp, #8
    fb52:	60f8      	str	r0, [r7, #12]
    fb54:	60b9      	str	r1, [r7, #8]
    fb56:	607a      	str	r2, [r7, #4]
    fb58:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_3));
    fb5a:	68f8      	ldr	r0, [r7, #12]
    fb5c:	f7ff ff1e 	bl	f99c <MP_OBJ_IS_OBJ>
    fb60:	4603      	mov	r3, r0
    fb62:	f083 0301 	eor.w	r3, r3, #1
    fb66:	b2db      	uxtb	r3, r3
    fb68:	2b00      	cmp	r3, #0
    fb6a:	d104      	bne.n	fb76 <fun_builtin_3_call+0x2a>
    fb6c:	68fb      	ldr	r3, [r7, #12]
    fb6e:	681b      	ldr	r3, [r3, #0]
    fb70:	4a11      	ldr	r2, [pc, #68]	; (fbb8 <fun_builtin_3_call+0x6c>)
    fb72:	4293      	cmp	r3, r2
    fb74:	d005      	beq.n	fb82 <fun_builtin_3_call+0x36>
    fb76:	4b11      	ldr	r3, [pc, #68]	; (fbbc <fun_builtin_3_call+0x70>)
    fb78:	4a11      	ldr	r2, [pc, #68]	; (fbc0 <fun_builtin_3_call+0x74>)
    fb7a:	215f      	movs	r1, #95	; 0x5f
    fb7c:	4811      	ldr	r0, [pc, #68]	; (fbc4 <fun_builtin_3_call+0x78>)
    fb7e:	f00b fbf5 	bl	1b36c <__assert_func>
    mp_obj_fun_builtin_fixed_t *self = MP_OBJ_TO_PTR(self_in);
    fb82:	68fb      	ldr	r3, [r7, #12]
    fb84:	617b      	str	r3, [r7, #20]
    mp_arg_check_num(n_args, n_kw, 3, 3, false);
    fb86:	2300      	movs	r3, #0
    fb88:	9300      	str	r3, [sp, #0]
    fb8a:	2303      	movs	r3, #3
    fb8c:	2203      	movs	r2, #3
    fb8e:	6879      	ldr	r1, [r7, #4]
    fb90:	68b8      	ldr	r0, [r7, #8]
    fb92:	f7fd fa4b 	bl	d02c <mp_arg_check_num>
    return self->fun._3(args[0], args[1], args[2]);
    fb96:	697b      	ldr	r3, [r7, #20]
    fb98:	685b      	ldr	r3, [r3, #4]
    fb9a:	683a      	ldr	r2, [r7, #0]
    fb9c:	6810      	ldr	r0, [r2, #0]
    fb9e:	683a      	ldr	r2, [r7, #0]
    fba0:	3204      	adds	r2, #4
    fba2:	6811      	ldr	r1, [r2, #0]
    fba4:	683a      	ldr	r2, [r7, #0]
    fba6:	3208      	adds	r2, #8
    fba8:	6812      	ldr	r2, [r2, #0]
    fbaa:	4798      	blx	r3
    fbac:	4603      	mov	r3, r0
}
    fbae:	4618      	mov	r0, r3
    fbb0:	3718      	adds	r7, #24
    fbb2:	46bd      	mov	sp, r7
    fbb4:	bd80      	pop	{r7, pc}
    fbb6:	bf00      	nop
    fbb8:	00020a80 	.word	0x00020a80
    fbbc:	00020a50 	.word	0x00020a50
    fbc0:	00020bfc 	.word	0x00020bfc
    fbc4:	00020928 	.word	0x00020928

0000fbc8 <fun_builtin_var_call>:
    .name = MP_QSTR_function,
    .call = fun_builtin_3_call,
    .unary_op = mp_generic_unary_op,
};

STATIC mp_obj_t fun_builtin_var_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fbc8:	b580      	push	{r7, lr}
    fbca:	b08a      	sub	sp, #40	; 0x28
    fbcc:	af02      	add	r7, sp, #8
    fbce:	60f8      	str	r0, [r7, #12]
    fbd0:	60b9      	str	r1, [r7, #8]
    fbd2:	607a      	str	r2, [r7, #4]
    fbd4:	603b      	str	r3, [r7, #0]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_fun_builtin_var));
    fbd6:	68f8      	ldr	r0, [r7, #12]
    fbd8:	f7ff fee0 	bl	f99c <MP_OBJ_IS_OBJ>
    fbdc:	4603      	mov	r3, r0
    fbde:	f083 0301 	eor.w	r3, r3, #1
    fbe2:	b2db      	uxtb	r3, r3
    fbe4:	2b00      	cmp	r3, #0
    fbe6:	d104      	bne.n	fbf2 <fun_builtin_var_call+0x2a>
    fbe8:	68fb      	ldr	r3, [r7, #12]
    fbea:	681b      	ldr	r3, [r3, #0]
    fbec:	4a21      	ldr	r2, [pc, #132]	; (fc74 <fun_builtin_var_call+0xac>)
    fbee:	4293      	cmp	r3, r2
    fbf0:	d005      	beq.n	fbfe <fun_builtin_var_call+0x36>
    fbf2:	4b21      	ldr	r3, [pc, #132]	; (fc78 <fun_builtin_var_call+0xb0>)
    fbf4:	4a21      	ldr	r2, [pc, #132]	; (fc7c <fun_builtin_var_call+0xb4>)
    fbf6:	216d      	movs	r1, #109	; 0x6d
    fbf8:	4821      	ldr	r0, [pc, #132]	; (fc80 <fun_builtin_var_call+0xb8>)
    fbfa:	f00b fbb7 	bl	1b36c <__assert_func>
    mp_obj_fun_builtin_var_t *self = MP_OBJ_TO_PTR(self_in);
    fbfe:	68fb      	ldr	r3, [r7, #12]
    fc00:	61fb      	str	r3, [r7, #28]

    // check number of arguments
    mp_arg_check_num(n_args, n_kw, self->n_args_min, self->n_args_max, self->is_kw);
    fc02:	69fb      	ldr	r3, [r7, #28]
    fc04:	889b      	ldrh	r3, [r3, #4]
    fc06:	f3c3 034e 	ubfx	r3, r3, #1, #15
    fc0a:	b29b      	uxth	r3, r3
    fc0c:	461a      	mov	r2, r3
    fc0e:	69fb      	ldr	r3, [r7, #28]
    fc10:	88db      	ldrh	r3, [r3, #6]
    fc12:	4619      	mov	r1, r3
    fc14:	69fb      	ldr	r3, [r7, #28]
    fc16:	791b      	ldrb	r3, [r3, #4]
    fc18:	f3c3 0300 	ubfx	r3, r3, #0, #1
    fc1c:	b2db      	uxtb	r3, r3
    fc1e:	9300      	str	r3, [sp, #0]
    fc20:	460b      	mov	r3, r1
    fc22:	6879      	ldr	r1, [r7, #4]
    fc24:	68b8      	ldr	r0, [r7, #8]
    fc26:	f7fd fa01 	bl	d02c <mp_arg_check_num>

    if (self->is_kw) {
    fc2a:	69fb      	ldr	r3, [r7, #28]
    fc2c:	791b      	ldrb	r3, [r3, #4]
    fc2e:	f3c3 0300 	ubfx	r3, r3, #0, #1
    fc32:	b2db      	uxtb	r3, r3
    fc34:	2b00      	cmp	r3, #0
    fc36:	d012      	beq.n	fc5e <fun_builtin_var_call+0x96>
        // function allows keywords

        // we create a map directly from the given args array
        mp_map_t kw_args;
        mp_map_init_fixed_table(&kw_args, n_kw, args + n_args);
    fc38:	68bb      	ldr	r3, [r7, #8]
    fc3a:	009b      	lsls	r3, r3, #2
    fc3c:	683a      	ldr	r2, [r7, #0]
    fc3e:	441a      	add	r2, r3
    fc40:	f107 0310 	add.w	r3, r7, #16
    fc44:	6879      	ldr	r1, [r7, #4]
    fc46:	4618      	mov	r0, r3
    fc48:	f7fd fb72 	bl	d330 <mp_map_init_fixed_table>

        return self->fun.kw(n_args, args, &kw_args);
    fc4c:	69fb      	ldr	r3, [r7, #28]
    fc4e:	689b      	ldr	r3, [r3, #8]
    fc50:	f107 0210 	add.w	r2, r7, #16
    fc54:	6839      	ldr	r1, [r7, #0]
    fc56:	68b8      	ldr	r0, [r7, #8]
    fc58:	4798      	blx	r3
    fc5a:	4603      	mov	r3, r0
    fc5c:	e005      	b.n	fc6a <fun_builtin_var_call+0xa2>

    } else {
        // function takes a variable number of arguments, but no keywords

        return self->fun.var(n_args, args);
    fc5e:	69fb      	ldr	r3, [r7, #28]
    fc60:	689b      	ldr	r3, [r3, #8]
    fc62:	6839      	ldr	r1, [r7, #0]
    fc64:	68b8      	ldr	r0, [r7, #8]
    fc66:	4798      	blx	r3
    fc68:	4603      	mov	r3, r0
    }
}
    fc6a:	4618      	mov	r0, r3
    fc6c:	3720      	adds	r7, #32
    fc6e:	46bd      	mov	sp, r7
    fc70:	bd80      	pop	{r7, pc}
    fc72:	bf00      	nop
    fc74:	00020af0 	.word	0x00020af0
    fc78:	00020abc 	.word	0x00020abc
    fc7c:	00020c10 	.word	0x00020c10
    fc80:	00020928 	.word	0x00020928

0000fc84 <mp_obj_code_get_name>:
};

/******************************************************************************/
/* byte code functions                                                        */

qstr mp_obj_code_get_name(const byte *code_info) {
    fc84:	b580      	push	{r7, lr}
    fc86:	b082      	sub	sp, #8
    fc88:	af00      	add	r7, sp, #0
    fc8a:	6078      	str	r0, [r7, #4]
    code_info = mp_decode_uint_skip(code_info); // skip code_info_size entry
    fc8c:	6878      	ldr	r0, [r7, #4]
    fc8e:	f00a fc5d 	bl	1a54c <mp_decode_uint_skip>
    fc92:	6078      	str	r0, [r7, #4]
    #if MICROPY_PERSISTENT_CODE
    return code_info[0] | (code_info[1] << 8);
    fc94:	687b      	ldr	r3, [r7, #4]
    fc96:	781b      	ldrb	r3, [r3, #0]
    fc98:	461a      	mov	r2, r3
    fc9a:	687b      	ldr	r3, [r7, #4]
    fc9c:	3301      	adds	r3, #1
    fc9e:	781b      	ldrb	r3, [r3, #0]
    fca0:	021b      	lsls	r3, r3, #8
    fca2:	4313      	orrs	r3, r2
    #else
    return mp_decode_uint_value(code_info);
    #endif
}
    fca4:	4618      	mov	r0, r3
    fca6:	3708      	adds	r7, #8
    fca8:	46bd      	mov	sp, r7
    fcaa:	bd80      	pop	{r7, pc}

0000fcac <mp_obj_fun_get_name>:

#if MICROPY_EMIT_NATIVE
STATIC const mp_obj_type_t mp_type_fun_native;
#endif

qstr mp_obj_fun_get_name(mp_const_obj_t fun_in) {
    fcac:	b580      	push	{r7, lr}
    fcae:	b084      	sub	sp, #16
    fcb0:	af00      	add	r7, sp, #0
    fcb2:	6078      	str	r0, [r7, #4]
    const mp_obj_fun_bc_t *fun = MP_OBJ_TO_PTR(fun_in);
    fcb4:	687b      	ldr	r3, [r7, #4]
    fcb6:	60fb      	str	r3, [r7, #12]
        // TODO native functions don't have name stored
        return MP_QSTR_;
    }
    #endif

    const byte *bc = fun->bytecode;
    fcb8:	68fb      	ldr	r3, [r7, #12]
    fcba:	689b      	ldr	r3, [r3, #8]
    fcbc:	60bb      	str	r3, [r7, #8]
    bc = mp_decode_uint_skip(bc); // skip n_state
    fcbe:	68b8      	ldr	r0, [r7, #8]
    fcc0:	f00a fc44 	bl	1a54c <mp_decode_uint_skip>
    fcc4:	60b8      	str	r0, [r7, #8]
    bc = mp_decode_uint_skip(bc); // skip n_exc_stack
    fcc6:	68b8      	ldr	r0, [r7, #8]
    fcc8:	f00a fc40 	bl	1a54c <mp_decode_uint_skip>
    fccc:	60b8      	str	r0, [r7, #8]
    bc++; // skip scope_params
    fcce:	68bb      	ldr	r3, [r7, #8]
    fcd0:	3301      	adds	r3, #1
    fcd2:	60bb      	str	r3, [r7, #8]
    bc++; // skip n_pos_args
    fcd4:	68bb      	ldr	r3, [r7, #8]
    fcd6:	3301      	adds	r3, #1
    fcd8:	60bb      	str	r3, [r7, #8]
    bc++; // skip n_kwonly_args
    fcda:	68bb      	ldr	r3, [r7, #8]
    fcdc:	3301      	adds	r3, #1
    fcde:	60bb      	str	r3, [r7, #8]
    bc++; // skip n_def_pos_args
    fce0:	68bb      	ldr	r3, [r7, #8]
    fce2:	3301      	adds	r3, #1
    fce4:	60bb      	str	r3, [r7, #8]
    return mp_obj_code_get_name(bc);
    fce6:	68b8      	ldr	r0, [r7, #8]
    fce8:	f7ff ffcc 	bl	fc84 <mp_obj_code_get_name>
    fcec:	4603      	mov	r3, r0
}
    fcee:	4618      	mov	r0, r3
    fcf0:	3710      	adds	r7, #16
    fcf2:	46bd      	mov	sp, r7
    fcf4:	bd80      	pop	{r7, pc}
    fcf6:	bf00      	nop

0000fcf8 <fun_bc_call>:

    return code_state;
}
#endif

STATIC mp_obj_t fun_bc_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    fcf8:	b580      	push	{r7, lr}
    fcfa:	b08c      	sub	sp, #48	; 0x30
    fcfc:	af00      	add	r7, sp, #0
    fcfe:	60f8      	str	r0, [r7, #12]
    fd00:	60b9      	str	r1, [r7, #8]
    fd02:	607a      	str	r2, [r7, #4]
    fd04:	603b      	str	r3, [r7, #0]
    DEBUG_printf("Input n_args: " UINT_FMT ", n_kw: " UINT_FMT "\n", n_args, n_kw);
    DEBUG_printf("Input pos args: ");
    dump_args(args, n_args);
    DEBUG_printf("Input kw args: ");
    dump_args(args + n_args, n_kw * 2);
    mp_obj_fun_bc_t *self = MP_OBJ_TO_PTR(self_in);
    fd06:	68fb      	ldr	r3, [r7, #12]
    fd08:	623b      	str	r3, [r7, #32]
    DEBUG_printf("Func n_def_args: %d\n", self->n_def_args);

    size_t n_state, state_size;
    DECODE_CODESTATE_SIZE(self->bytecode, n_state, state_size);
    fd0a:	6a3b      	ldr	r3, [r7, #32]
    fd0c:	689b      	ldr	r3, [r3, #8]
    fd0e:	4618      	mov	r0, r3
    fd10:	f00a fc0e 	bl	1a530 <mp_decode_uint_value>
    fd14:	61f8      	str	r0, [r7, #28]
    fd16:	6a3b      	ldr	r3, [r7, #32]
    fd18:	689b      	ldr	r3, [r3, #8]
    fd1a:	4618      	mov	r0, r3
    fd1c:	f00a fc16 	bl	1a54c <mp_decode_uint_skip>
    fd20:	4603      	mov	r3, r0
    fd22:	4618      	mov	r0, r3
    fd24:	f00a fc04 	bl	1a530 <mp_decode_uint_value>
    fd28:	61b8      	str	r0, [r7, #24]
    fd2a:	69ba      	ldr	r2, [r7, #24]
    fd2c:	4613      	mov	r3, r2
    fd2e:	005b      	lsls	r3, r3, #1
    fd30:	441a      	add	r2, r3
    fd32:	69fb      	ldr	r3, [r7, #28]
    fd34:	4413      	add	r3, r2
    fd36:	009b      	lsls	r3, r3, #2
    fd38:	62fb      	str	r3, [r7, #44]	; 0x2c

    // allocate state for locals and stack
    mp_code_state_t *code_state = NULL;
    fd3a:	2300      	movs	r3, #0
    fd3c:	62bb      	str	r3, [r7, #40]	; 0x28
    #if MICROPY_ENABLE_PYSTACK
    code_state = mp_pystack_alloc(sizeof(mp_code_state_t) + state_size);
    #else
    if (state_size > VM_MAX_STATE_ON_STACK) {
    fd3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fd40:	2b2c      	cmp	r3, #44	; 0x2c
    fd42:	d905      	bls.n	fd50 <fun_bc_call+0x58>
        code_state = m_new_obj_var_maybe(mp_code_state_t, byte, state_size);
    fd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fd46:	3314      	adds	r3, #20
    fd48:	4618      	mov	r0, r3
    fd4a:	f7f0 faff 	bl	34c <m_malloc_maybe>
    fd4e:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    if (code_state == NULL) {
    fd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fd52:	2b00      	cmp	r3, #0
    fd54:	d10e      	bne.n	fd74 <fun_bc_call+0x7c>
        code_state = alloca(sizeof(mp_code_state_t) + state_size);
    fd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fd58:	3314      	adds	r3, #20
    fd5a:	3307      	adds	r3, #7
    fd5c:	3307      	adds	r3, #7
    fd5e:	08db      	lsrs	r3, r3, #3
    fd60:	00db      	lsls	r3, r3, #3
    fd62:	ebad 0d03 	sub.w	sp, sp, r3
    fd66:	466b      	mov	r3, sp
    fd68:	3307      	adds	r3, #7
    fd6a:	08db      	lsrs	r3, r3, #3
    fd6c:	00db      	lsls	r3, r3, #3
    fd6e:	62bb      	str	r3, [r7, #40]	; 0x28
        state_size = 0; // indicate that we allocated using alloca
    fd70:	2300      	movs	r3, #0
    fd72:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    #endif

    INIT_CODESTATE(code_state, self, n_args, n_kw, args);
    fd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fd76:	6a3a      	ldr	r2, [r7, #32]
    fd78:	601a      	str	r2, [r3, #0]
    fd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fd7c:	2200      	movs	r2, #0
    fd7e:	605a      	str	r2, [r3, #4]
    fd80:	683b      	ldr	r3, [r7, #0]
    fd82:	687a      	ldr	r2, [r7, #4]
    fd84:	68b9      	ldr	r1, [r7, #8]
    fd86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    fd88:	f00a fbfc 	bl	1a584 <mp_setup_code_state>
    fd8c:	f7ff fe18 	bl	f9c0 <mp_globals_get>
    fd90:	4602      	mov	r2, r0
    fd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fd94:	611a      	str	r2, [r3, #16]

    // execute the byte code with the correct globals context
    mp_globals_set(self->globals);
    fd96:	6a3b      	ldr	r3, [r7, #32]
    fd98:	685b      	ldr	r3, [r3, #4]
    fd9a:	4618      	mov	r0, r3
    fd9c:	f7ff fe1c 	bl	f9d8 <mp_globals_set>
    mp_vm_return_kind_t vm_return_kind = mp_execute_bytecode(code_state, MP_OBJ_NULL);
    fda0:	2100      	movs	r1, #0
    fda2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    fda4:	f009 fc90 	bl	196c8 <mp_execute_bytecode>
    fda8:	6178      	str	r0, [r7, #20]
    mp_globals_set(code_state->old_globals);
    fdaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fdac:	691b      	ldr	r3, [r3, #16]
    fdae:	4618      	mov	r0, r3
    fdb0:	f7ff fe12 	bl	f9d8 <mp_globals_set>
        }
    }
#endif

    mp_obj_t result;
    if (vm_return_kind == MP_VM_RETURN_NORMAL) {
    fdb4:	697b      	ldr	r3, [r7, #20]
    fdb6:	2b00      	cmp	r3, #0
    fdb8:	d104      	bne.n	fdc4 <fun_bc_call+0xcc>
        // return value is in *sp
        result = *code_state->sp;
    fdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fdbc:	689b      	ldr	r3, [r3, #8]
    fdbe:	681b      	ldr	r3, [r3, #0]
    fdc0:	627b      	str	r3, [r7, #36]	; 0x24
    fdc2:	e011      	b.n	fde8 <fun_bc_call+0xf0>
    } else {
        // must be an exception because normal functions can't yield
        assert(vm_return_kind == MP_VM_RETURN_EXCEPTION);
    fdc4:	697b      	ldr	r3, [r7, #20]
    fdc6:	2b02      	cmp	r3, #2
    fdc8:	d006      	beq.n	fdd8 <fun_bc_call+0xe0>
    fdca:	4b10      	ldr	r3, [pc, #64]	; (fe0c <fun_bc_call+0x114>)
    fdcc:	4a10      	ldr	r2, [pc, #64]	; (fe10 <fun_bc_call+0x118>)
    fdce:	f240 113f 	movw	r1, #319	; 0x13f
    fdd2:	4810      	ldr	r0, [pc, #64]	; (fe14 <fun_bc_call+0x11c>)
    fdd4:	f00b faca 	bl	1b36c <__assert_func>
        // return value is in fastn[0]==state[n_state - 1]
        result = code_state->state[n_state - 1];
    fdd8:	69fb      	ldr	r3, [r7, #28]
    fdda:	3b01      	subs	r3, #1
    fddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    fdde:	3304      	adds	r3, #4
    fde0:	009b      	lsls	r3, r3, #2
    fde2:	4413      	add	r3, r2
    fde4:	685b      	ldr	r3, [r3, #4]
    fde6:	627b      	str	r3, [r7, #36]	; 0x24

    #if MICROPY_ENABLE_PYSTACK
    mp_pystack_free(code_state);
    #else
    // free the state if it was allocated on the heap
    if (state_size != 0) {
    fde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    fdea:	2b00      	cmp	r3, #0
    fdec:	d002      	beq.n	fdf4 <fun_bc_call+0xfc>
        m_del_var(mp_code_state_t, byte, state_size, code_state);
    fdee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    fdf0:	f7f0 faf6 	bl	3e0 <m_free>
    }
    #endif

    if (vm_return_kind == MP_VM_RETURN_NORMAL) {
    fdf4:	697b      	ldr	r3, [r7, #20]
    fdf6:	2b00      	cmp	r3, #0
    fdf8:	d101      	bne.n	fdfe <fun_bc_call+0x106>
        return result;
    fdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fdfc:	e002      	b.n	fe04 <fun_bc_call+0x10c>
    } else { // MP_VM_RETURN_EXCEPTION
        nlr_raise(result);
    fdfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
    fe00:	f7f0 fa6e 	bl	2e0 <nlr_jump>
    }
}
    fe04:	4618      	mov	r0, r3
    fe06:	3730      	adds	r7, #48	; 0x30
    fe08:	46bd      	mov	sp, r7
    fe0a:	bd80      	pop	{r7, pc}
    fe0c:	00020b2c 	.word	0x00020b2c
    fe10:	00020c28 	.word	0x00020c28
    fe14:	00020928 	.word	0x00020928

0000fe18 <mp_obj_new_fun_bc>:
#if MICROPY_PY_FUNCTION_ATTRS
    .attr = fun_bc_attr,
#endif
};

mp_obj_t mp_obj_new_fun_bc(mp_obj_t def_args_in, mp_obj_t def_kw_args, const byte *code, const mp_uint_t *const_table) {
    fe18:	b580      	push	{r7, lr}
    fe1a:	b088      	sub	sp, #32
    fe1c:	af00      	add	r7, sp, #0
    fe1e:	60f8      	str	r0, [r7, #12]
    fe20:	60b9      	str	r1, [r7, #8]
    fe22:	607a      	str	r2, [r7, #4]
    fe24:	603b      	str	r3, [r7, #0]
    size_t n_def_args = 0;
    fe26:	2300      	movs	r3, #0
    fe28:	61fb      	str	r3, [r7, #28]
    size_t n_extra_args = 0;
    fe2a:	2300      	movs	r3, #0
    fe2c:	61bb      	str	r3, [r7, #24]
    mp_obj_tuple_t *def_args = MP_OBJ_TO_PTR(def_args_in);
    fe2e:	68fb      	ldr	r3, [r7, #12]
    fe30:	617b      	str	r3, [r7, #20]
    if (def_args_in != MP_OBJ_NULL) {
    fe32:	68fb      	ldr	r3, [r7, #12]
    fe34:	2b00      	cmp	r3, #0
    fe36:	d01a      	beq.n	fe6e <mp_obj_new_fun_bc+0x56>
        assert(MP_OBJ_IS_TYPE(def_args_in, &mp_type_tuple));
    fe38:	68f8      	ldr	r0, [r7, #12]
    fe3a:	f7ff fdaf 	bl	f99c <MP_OBJ_IS_OBJ>
    fe3e:	4603      	mov	r3, r0
    fe40:	f083 0301 	eor.w	r3, r3, #1
    fe44:	b2db      	uxtb	r3, r3
    fe46:	2b00      	cmp	r3, #0
    fe48:	d104      	bne.n	fe54 <mp_obj_new_fun_bc+0x3c>
    fe4a:	68fb      	ldr	r3, [r7, #12]
    fe4c:	681b      	ldr	r3, [r3, #0]
    fe4e:	4a23      	ldr	r2, [pc, #140]	; (fedc <mp_obj_new_fun_bc+0xc4>)
    fe50:	4293      	cmp	r3, r2
    fe52:	d006      	beq.n	fe62 <mp_obj_new_fun_bc+0x4a>
    fe54:	4b22      	ldr	r3, [pc, #136]	; (fee0 <mp_obj_new_fun_bc+0xc8>)
    fe56:	4a23      	ldr	r2, [pc, #140]	; (fee4 <mp_obj_new_fun_bc+0xcc>)
    fe58:	f44f 71b9 	mov.w	r1, #370	; 0x172
    fe5c:	4822      	ldr	r0, [pc, #136]	; (fee8 <mp_obj_new_fun_bc+0xd0>)
    fe5e:	f00b fa85 	bl	1b36c <__assert_func>
        n_def_args = def_args->len;
    fe62:	697b      	ldr	r3, [r7, #20]
    fe64:	685b      	ldr	r3, [r3, #4]
    fe66:	61fb      	str	r3, [r7, #28]
        n_extra_args = def_args->len;
    fe68:	697b      	ldr	r3, [r7, #20]
    fe6a:	685b      	ldr	r3, [r3, #4]
    fe6c:	61bb      	str	r3, [r7, #24]
    }
    if (def_kw_args != MP_OBJ_NULL) {
    fe6e:	68bb      	ldr	r3, [r7, #8]
    fe70:	2b00      	cmp	r3, #0
    fe72:	d002      	beq.n	fe7a <mp_obj_new_fun_bc+0x62>
        n_extra_args += 1;
    fe74:	69bb      	ldr	r3, [r7, #24]
    fe76:	3301      	adds	r3, #1
    fe78:	61bb      	str	r3, [r7, #24]
    }
    mp_obj_fun_bc_t *o = m_new_obj_var(mp_obj_fun_bc_t, mp_obj_t, n_extra_args);
    fe7a:	69bb      	ldr	r3, [r7, #24]
    fe7c:	3304      	adds	r3, #4
    fe7e:	009b      	lsls	r3, r3, #2
    fe80:	4618      	mov	r0, r3
    fe82:	f7f0 fa4b 	bl	31c <m_malloc>
    fe86:	6138      	str	r0, [r7, #16]
    o->base.type = &mp_type_fun_bc;
    fe88:	693b      	ldr	r3, [r7, #16]
    fe8a:	4a18      	ldr	r2, [pc, #96]	; (feec <mp_obj_new_fun_bc+0xd4>)
    fe8c:	601a      	str	r2, [r3, #0]
    o->globals = mp_globals_get();
    fe8e:	f7ff fd97 	bl	f9c0 <mp_globals_get>
    fe92:	4602      	mov	r2, r0
    fe94:	693b      	ldr	r3, [r7, #16]
    fe96:	605a      	str	r2, [r3, #4]
    o->bytecode = code;
    fe98:	693b      	ldr	r3, [r7, #16]
    fe9a:	687a      	ldr	r2, [r7, #4]
    fe9c:	609a      	str	r2, [r3, #8]
    o->const_table = const_table;
    fe9e:	693b      	ldr	r3, [r7, #16]
    fea0:	683a      	ldr	r2, [r7, #0]
    fea2:	60da      	str	r2, [r3, #12]
    if (def_args != NULL) {
    fea4:	697b      	ldr	r3, [r7, #20]
    fea6:	2b00      	cmp	r3, #0
    fea8:	d00a      	beq.n	fec0 <mp_obj_new_fun_bc+0xa8>
        memcpy(o->extra_args, def_args->items, n_def_args * sizeof(mp_obj_t));
    feaa:	693b      	ldr	r3, [r7, #16]
    feac:	f103 0010 	add.w	r0, r3, #16
    feb0:	697b      	ldr	r3, [r7, #20]
    feb2:	f103 0108 	add.w	r1, r3, #8
    feb6:	69fb      	ldr	r3, [r7, #28]
    feb8:	009b      	lsls	r3, r3, #2
    feba:	461a      	mov	r2, r3
    febc:	f00c f802 	bl	1bec4 <memcpy>
    }
    if (def_kw_args != MP_OBJ_NULL) {
    fec0:	68bb      	ldr	r3, [r7, #8]
    fec2:	2b00      	cmp	r3, #0
    fec4:	d005      	beq.n	fed2 <mp_obj_new_fun_bc+0xba>
        o->extra_args[n_def_args] = def_kw_args;
    fec6:	693b      	ldr	r3, [r7, #16]
    fec8:	69fa      	ldr	r2, [r7, #28]
    feca:	3204      	adds	r2, #4
    fecc:	68b9      	ldr	r1, [r7, #8]
    fece:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
    return MP_OBJ_FROM_PTR(o);
    fed2:	693b      	ldr	r3, [r7, #16]
}
    fed4:	4618      	mov	r0, r3
    fed6:	3720      	adds	r7, #32
    fed8:	46bd      	mov	sp, r7
    feda:	bd80      	pop	{r7, pc}
    fedc:	00021e68 	.word	0x00021e68
    fee0:	00020b94 	.word	0x00020b94
    fee4:	00020c34 	.word	0x00020c34
    fee8:	00020928 	.word	0x00020928
    feec:	00020b58 	.word	0x00020b58

0000fef0 <MP_OBJ_IS_OBJ>:
    fef0:	b480      	push	{r7}
    fef2:	b083      	sub	sp, #12
    fef4:	af00      	add	r7, sp, #0
    fef6:	6078      	str	r0, [r7, #4]
    fef8:	687b      	ldr	r3, [r7, #4]
    fefa:	f003 0303 	and.w	r3, r3, #3
    fefe:	2b00      	cmp	r3, #0
    ff00:	bf0c      	ite	eq
    ff02:	2301      	moveq	r3, #1
    ff04:	2300      	movne	r3, #0
    ff06:	b2db      	uxtb	r3, r3
    ff08:	4618      	mov	r0, r3
    ff0a:	370c      	adds	r7, #12
    ff0c:	46bd      	mov	sp, r7
    ff0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ff12:	4770      	bx	lr

0000ff14 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
    ff14:	b480      	push	{r7}
    ff16:	af00      	add	r7, sp, #0
    ff18:	4b03      	ldr	r3, [pc, #12]	; (ff28 <mp_globals_get+0x14>)
    ff1a:	689b      	ldr	r3, [r3, #8]
    ff1c:	4618      	mov	r0, r3
    ff1e:	46bd      	mov	sp, r7
    ff20:	f85d 7b04 	ldr.w	r7, [sp], #4
    ff24:	4770      	bx	lr
    ff26:	bf00      	nop
    ff28:	20000a2c 	.word	0x20000a2c

0000ff2c <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
    ff2c:	b480      	push	{r7}
    ff2e:	b083      	sub	sp, #12
    ff30:	af00      	add	r7, sp, #0
    ff32:	6078      	str	r0, [r7, #4]
    ff34:	4a04      	ldr	r2, [pc, #16]	; (ff48 <mp_globals_set+0x1c>)
    ff36:	687b      	ldr	r3, [r7, #4]
    ff38:	6093      	str	r3, [r2, #8]
    ff3a:	bf00      	nop
    ff3c:	370c      	adds	r7, #12
    ff3e:	46bd      	mov	sp, r7
    ff40:	f85d 7b04 	ldr.w	r7, [sp], #4
    ff44:	4770      	bx	lr
    ff46:	bf00      	nop
    ff48:	20000a2c 	.word	0x20000a2c

0000ff4c <gen_wrap_call>:
    mp_obj_base_t base;
    mp_obj_dict_t *globals;
    mp_code_state_t code_state;
} mp_obj_gen_instance_t;

STATIC mp_obj_t gen_wrap_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
    ff4c:	b580      	push	{r7, lr}
    ff4e:	b08a      	sub	sp, #40	; 0x28
    ff50:	af00      	add	r7, sp, #0
    ff52:	60f8      	str	r0, [r7, #12]
    ff54:	60b9      	str	r1, [r7, #8]
    ff56:	607a      	str	r2, [r7, #4]
    ff58:	603b      	str	r3, [r7, #0]
    mp_obj_gen_wrap_t *self = MP_OBJ_TO_PTR(self_in);
    ff5a:	68fb      	ldr	r3, [r7, #12]
    ff5c:	627b      	str	r3, [r7, #36]	; 0x24
    mp_obj_fun_bc_t *self_fun = (mp_obj_fun_bc_t*)self->fun;
    ff5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ff60:	685b      	ldr	r3, [r3, #4]
    ff62:	623b      	str	r3, [r7, #32]
    assert(self_fun->base.type == &mp_type_fun_bc);
    ff64:	6a3b      	ldr	r3, [r7, #32]
    ff66:	681b      	ldr	r3, [r3, #0]
    ff68:	4a1f      	ldr	r2, [pc, #124]	; (ffe8 <gen_wrap_call+0x9c>)
    ff6a:	4293      	cmp	r3, r2
    ff6c:	d005      	beq.n	ff7a <gen_wrap_call+0x2e>
    ff6e:	4b1f      	ldr	r3, [pc, #124]	; (ffec <gen_wrap_call+0xa0>)
    ff70:	4a1f      	ldr	r2, [pc, #124]	; (fff0 <gen_wrap_call+0xa4>)
    ff72:	2136      	movs	r1, #54	; 0x36
    ff74:	481f      	ldr	r0, [pc, #124]	; (fff4 <gen_wrap_call+0xa8>)
    ff76:	f00b f9f9 	bl	1b36c <__assert_func>

    // bytecode prelude: get state size and exception stack size
    size_t n_state = mp_decode_uint_value(self_fun->bytecode);
    ff7a:	6a3b      	ldr	r3, [r7, #32]
    ff7c:	689b      	ldr	r3, [r3, #8]
    ff7e:	4618      	mov	r0, r3
    ff80:	f00a fad6 	bl	1a530 <mp_decode_uint_value>
    ff84:	61f8      	str	r0, [r7, #28]
    size_t n_exc_stack = mp_decode_uint_value(mp_decode_uint_skip(self_fun->bytecode));
    ff86:	6a3b      	ldr	r3, [r7, #32]
    ff88:	689b      	ldr	r3, [r3, #8]
    ff8a:	4618      	mov	r0, r3
    ff8c:	f00a fade 	bl	1a54c <mp_decode_uint_skip>
    ff90:	4603      	mov	r3, r0
    ff92:	4618      	mov	r0, r3
    ff94:	f00a facc 	bl	1a530 <mp_decode_uint_value>
    ff98:	61b8      	str	r0, [r7, #24]

    // allocate the generator object, with room for local stack and exception stack
    mp_obj_gen_instance_t *o = m_new_obj_var(mp_obj_gen_instance_t, byte,
    ff9a:	69ba      	ldr	r2, [r7, #24]
    ff9c:	4613      	mov	r3, r2
    ff9e:	005b      	lsls	r3, r3, #1
    ffa0:	441a      	add	r2, r3
    ffa2:	69fb      	ldr	r3, [r7, #28]
    ffa4:	4413      	add	r3, r2
    ffa6:	3307      	adds	r3, #7
    ffa8:	009b      	lsls	r3, r3, #2
    ffaa:	4618      	mov	r0, r3
    ffac:	f7f0 f9b6 	bl	31c <m_malloc>
    ffb0:	6178      	str	r0, [r7, #20]
        n_state * sizeof(mp_obj_t) + n_exc_stack * sizeof(mp_exc_stack_t));
    o->base.type = &mp_type_gen_instance;
    ffb2:	697b      	ldr	r3, [r7, #20]
    ffb4:	4a10      	ldr	r2, [pc, #64]	; (fff8 <gen_wrap_call+0xac>)
    ffb6:	601a      	str	r2, [r3, #0]

    o->globals = self_fun->globals;
    ffb8:	6a3b      	ldr	r3, [r7, #32]
    ffba:	685a      	ldr	r2, [r3, #4]
    ffbc:	697b      	ldr	r3, [r7, #20]
    ffbe:	605a      	str	r2, [r3, #4]
    o->code_state.fun_bc = self_fun;
    ffc0:	697b      	ldr	r3, [r7, #20]
    ffc2:	6a3a      	ldr	r2, [r7, #32]
    ffc4:	609a      	str	r2, [r3, #8]
    o->code_state.ip = 0;
    ffc6:	697b      	ldr	r3, [r7, #20]
    ffc8:	2200      	movs	r2, #0
    ffca:	60da      	str	r2, [r3, #12]
    mp_setup_code_state(&o->code_state, n_args, n_kw, args);
    ffcc:	697b      	ldr	r3, [r7, #20]
    ffce:	f103 0008 	add.w	r0, r3, #8
    ffd2:	683b      	ldr	r3, [r7, #0]
    ffd4:	687a      	ldr	r2, [r7, #4]
    ffd6:	68b9      	ldr	r1, [r7, #8]
    ffd8:	f00a fad4 	bl	1a584 <mp_setup_code_state>
    return MP_OBJ_FROM_PTR(o);
    ffdc:	697b      	ldr	r3, [r7, #20]
}
    ffde:	4618      	mov	r0, r3
    ffe0:	3728      	adds	r7, #40	; 0x28
    ffe2:	46bd      	mov	sp, r7
    ffe4:	bd80      	pop	{r7, pc}
    ffe6:	bf00      	nop
    ffe8:	00020b58 	.word	0x00020b58
    ffec:	00020c48 	.word	0x00020c48
    fff0:	00020e78 	.word	0x00020e78
    fff4:	00020c70 	.word	0x00020c70
    fff8:	00020e3c 	.word	0x00020e3c

0000fffc <mp_obj_new_gen_wrap>:
    .name = MP_QSTR_generator,
    .call = gen_wrap_call,
    .unary_op = mp_generic_unary_op,
};

mp_obj_t mp_obj_new_gen_wrap(mp_obj_t fun) {
    fffc:	b580      	push	{r7, lr}
    fffe:	b084      	sub	sp, #16
   10000:	af00      	add	r7, sp, #0
   10002:	6078      	str	r0, [r7, #4]
    mp_obj_gen_wrap_t *o = m_new_obj(mp_obj_gen_wrap_t);
   10004:	2008      	movs	r0, #8
   10006:	f7f0 f989 	bl	31c <m_malloc>
   1000a:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_gen_wrap;
   1000c:	68fb      	ldr	r3, [r7, #12]
   1000e:	4a05      	ldr	r2, [pc, #20]	; (10024 <mp_obj_new_gen_wrap+0x28>)
   10010:	601a      	str	r2, [r3, #0]
    o->fun = MP_OBJ_TO_PTR(fun);
   10012:	68fb      	ldr	r3, [r7, #12]
   10014:	687a      	ldr	r2, [r7, #4]
   10016:	605a      	str	r2, [r3, #4]
    return MP_OBJ_FROM_PTR(o);
   10018:	68fb      	ldr	r3, [r7, #12]
}
   1001a:	4618      	mov	r0, r3
   1001c:	3710      	adds	r7, #16
   1001e:	46bd      	mov	sp, r7
   10020:	bd80      	pop	{r7, pc}
   10022:	bf00      	nop
   10024:	00020c88 	.word	0x00020c88

00010028 <gen_instance_print>:

/******************************************************************************/
/* generator instance                                                         */

STATIC void gen_instance_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   10028:	b580      	push	{r7, lr}
   1002a:	b086      	sub	sp, #24
   1002c:	af00      	add	r7, sp, #0
   1002e:	60f8      	str	r0, [r7, #12]
   10030:	60b9      	str	r1, [r7, #8]
   10032:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
   10034:	68bb      	ldr	r3, [r7, #8]
   10036:	617b      	str	r3, [r7, #20]
    mp_printf(print, "<generator object '%q' at %p>", mp_obj_fun_get_name(MP_OBJ_FROM_PTR(self->code_state.fun_bc)), self);
   10038:	697b      	ldr	r3, [r7, #20]
   1003a:	689b      	ldr	r3, [r3, #8]
   1003c:	4618      	mov	r0, r3
   1003e:	f7ff fe35 	bl	fcac <mp_obj_fun_get_name>
   10042:	4602      	mov	r2, r0
   10044:	697b      	ldr	r3, [r7, #20]
   10046:	4904      	ldr	r1, [pc, #16]	; (10058 <gen_instance_print+0x30>)
   10048:	68f8      	ldr	r0, [r7, #12]
   1004a:	f7f1 ff2b 	bl	1ea4 <mp_printf>
}
   1004e:	bf00      	nop
   10050:	3718      	adds	r7, #24
   10052:	46bd      	mov	sp, r7
   10054:	bd80      	pop	{r7, pc}
   10056:	bf00      	nop
   10058:	00020cc4 	.word	0x00020cc4

0001005c <mp_obj_gen_resume>:

mp_vm_return_kind_t mp_obj_gen_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val) {
   1005c:	b580      	push	{r7, lr}
   1005e:	b088      	sub	sp, #32
   10060:	af00      	add	r7, sp, #0
   10062:	60f8      	str	r0, [r7, #12]
   10064:	60b9      	str	r1, [r7, #8]
   10066:	607a      	str	r2, [r7, #4]
   10068:	603b      	str	r3, [r7, #0]
    MP_STACK_CHECK();
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_gen_instance));
   1006a:	68f8      	ldr	r0, [r7, #12]
   1006c:	f7ff ff40 	bl	fef0 <MP_OBJ_IS_OBJ>
   10070:	4603      	mov	r3, r0
   10072:	f083 0301 	eor.w	r3, r3, #1
   10076:	b2db      	uxtb	r3, r3
   10078:	2b00      	cmp	r3, #0
   1007a:	d104      	bne.n	10086 <mp_obj_gen_resume+0x2a>
   1007c:	68fb      	ldr	r3, [r7, #12]
   1007e:	681b      	ldr	r3, [r3, #0]
   10080:	4a45      	ldr	r2, [pc, #276]	; (10198 <mp_obj_gen_resume+0x13c>)
   10082:	4293      	cmp	r3, r2
   10084:	d005      	beq.n	10092 <mp_obj_gen_resume+0x36>
   10086:	4b45      	ldr	r3, [pc, #276]	; (1019c <mp_obj_gen_resume+0x140>)
   10088:	4a45      	ldr	r2, [pc, #276]	; (101a0 <mp_obj_gen_resume+0x144>)
   1008a:	2161      	movs	r1, #97	; 0x61
   1008c:	4845      	ldr	r0, [pc, #276]	; (101a4 <mp_obj_gen_resume+0x148>)
   1008e:	f00b f96d 	bl	1b36c <__assert_func>
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
   10092:	68fb      	ldr	r3, [r7, #12]
   10094:	61fb      	str	r3, [r7, #28]
    if (self->code_state.ip == 0) {
   10096:	69fb      	ldr	r3, [r7, #28]
   10098:	68db      	ldr	r3, [r3, #12]
   1009a:	2b00      	cmp	r3, #0
   1009c:	d104      	bne.n	100a8 <mp_obj_gen_resume+0x4c>
        // Trying to resume already stopped generator
        *ret_val = MP_OBJ_STOP_ITERATION;
   1009e:	683b      	ldr	r3, [r7, #0]
   100a0:	2204      	movs	r2, #4
   100a2:	601a      	str	r2, [r3, #0]
        return MP_VM_RETURN_NORMAL;
   100a4:	2300      	movs	r3, #0
   100a6:	e072      	b.n	1018e <mp_obj_gen_resume+0x132>
    }
    if (self->code_state.sp == self->code_state.state - 1) {
   100a8:	69fb      	ldr	r3, [r7, #28]
   100aa:	691a      	ldr	r2, [r3, #16]
   100ac:	69fb      	ldr	r3, [r7, #28]
   100ae:	331c      	adds	r3, #28
   100b0:	3b04      	subs	r3, #4
   100b2:	429a      	cmp	r2, r3
   100b4:	d106      	bne.n	100c4 <mp_obj_gen_resume+0x68>
        if (send_value != mp_const_none) {
   100b6:	68bb      	ldr	r3, [r7, #8]
   100b8:	4a3b      	ldr	r2, [pc, #236]	; (101a8 <mp_obj_gen_resume+0x14c>)
   100ba:	4293      	cmp	r3, r2
   100bc:	d015      	beq.n	100ea <mp_obj_gen_resume+0x8e>
            mp_raise_TypeError("can't send non-None value to a just-started generator");
   100be:	483b      	ldr	r0, [pc, #236]	; (101ac <mp_obj_gen_resume+0x150>)
   100c0:	f7fc ff8e 	bl	cfe0 <mp_raise_TypeError>
        }
    } else {
        #if MICROPY_PY_GENERATOR_PEND_THROW
        // If exception is pending (set using .pend_throw()), process it now.
        if (*self->code_state.sp != mp_const_none) {
   100c4:	69fb      	ldr	r3, [r7, #28]
   100c6:	691b      	ldr	r3, [r3, #16]
   100c8:	681b      	ldr	r3, [r3, #0]
   100ca:	4a37      	ldr	r2, [pc, #220]	; (101a8 <mp_obj_gen_resume+0x14c>)
   100cc:	4293      	cmp	r3, r2
   100ce:	d008      	beq.n	100e2 <mp_obj_gen_resume+0x86>
            throw_value = *self->code_state.sp;
   100d0:	69fb      	ldr	r3, [r7, #28]
   100d2:	691b      	ldr	r3, [r3, #16]
   100d4:	681b      	ldr	r3, [r3, #0]
   100d6:	607b      	str	r3, [r7, #4]
            *self->code_state.sp = MP_OBJ_NULL;
   100d8:	69fb      	ldr	r3, [r7, #28]
   100da:	691b      	ldr	r3, [r3, #16]
   100dc:	2200      	movs	r2, #0
   100de:	601a      	str	r2, [r3, #0]
   100e0:	e003      	b.n	100ea <mp_obj_gen_resume+0x8e>
        } else
        #endif
        {
            *self->code_state.sp = send_value;
   100e2:	69fb      	ldr	r3, [r7, #28]
   100e4:	691b      	ldr	r3, [r3, #16]
   100e6:	68ba      	ldr	r2, [r7, #8]
   100e8:	601a      	str	r2, [r3, #0]
        }
    }

    // We set self->globals=NULL while executing, for a sentinel to ensure the generator
    // cannot be reentered during execution
    if (self->globals == NULL) {
   100ea:	69fb      	ldr	r3, [r7, #28]
   100ec:	685b      	ldr	r3, [r3, #4]
   100ee:	2b00      	cmp	r3, #0
   100f0:	d102      	bne.n	100f8 <mp_obj_gen_resume+0x9c>
        mp_raise_ValueError("generator already executing");
   100f2:	482f      	ldr	r0, [pc, #188]	; (101b0 <mp_obj_gen_resume+0x154>)
   100f4:	f7fc ff6a 	bl	cfcc <mp_raise_ValueError>
    }

    // Set up the correct globals context for the generator and execute it
    self->code_state.old_globals = mp_globals_get();
   100f8:	f7ff ff0c 	bl	ff14 <mp_globals_get>
   100fc:	4602      	mov	r2, r0
   100fe:	69fb      	ldr	r3, [r7, #28]
   10100:	619a      	str	r2, [r3, #24]
    mp_globals_set(self->globals);
   10102:	69fb      	ldr	r3, [r7, #28]
   10104:	685b      	ldr	r3, [r3, #4]
   10106:	4618      	mov	r0, r3
   10108:	f7ff ff10 	bl	ff2c <mp_globals_set>
    self->globals = NULL;
   1010c:	69fb      	ldr	r3, [r7, #28]
   1010e:	2200      	movs	r2, #0
   10110:	605a      	str	r2, [r3, #4]
    mp_vm_return_kind_t ret_kind = mp_execute_bytecode(&self->code_state, throw_value);
   10112:	69fb      	ldr	r3, [r7, #28]
   10114:	3308      	adds	r3, #8
   10116:	6879      	ldr	r1, [r7, #4]
   10118:	4618      	mov	r0, r3
   1011a:	f009 fad5 	bl	196c8 <mp_execute_bytecode>
   1011e:	61b8      	str	r0, [r7, #24]
    self->globals = mp_globals_get();
   10120:	f7ff fef8 	bl	ff14 <mp_globals_get>
   10124:	4602      	mov	r2, r0
   10126:	69fb      	ldr	r3, [r7, #28]
   10128:	605a      	str	r2, [r3, #4]
    mp_globals_set(self->code_state.old_globals);
   1012a:	69fb      	ldr	r3, [r7, #28]
   1012c:	699b      	ldr	r3, [r3, #24]
   1012e:	4618      	mov	r0, r3
   10130:	f7ff fefc 	bl	ff2c <mp_globals_set>

    switch (ret_kind) {
   10134:	69bb      	ldr	r3, [r7, #24]
   10136:	2b01      	cmp	r3, #1
   10138:	d00a      	beq.n	10150 <mp_obj_gen_resume+0xf4>
   1013a:	2b02      	cmp	r3, #2
   1013c:	d012      	beq.n	10164 <mp_obj_gen_resume+0x108>
            // Explicitly mark generator as completed. If we don't do this,
            // subsequent next() may re-execute statements after last yield
            // again and again, leading to side effects.
            // TODO: check how return with value behaves under such conditions
            // in CPython.
            self->code_state.ip = 0;
   1013e:	69fb      	ldr	r3, [r7, #28]
   10140:	2200      	movs	r2, #0
   10142:	60da      	str	r2, [r3, #12]
            *ret_val = *self->code_state.sp;
   10144:	69fb      	ldr	r3, [r7, #28]
   10146:	691b      	ldr	r3, [r3, #16]
   10148:	681a      	ldr	r2, [r3, #0]
   1014a:	683b      	ldr	r3, [r7, #0]
   1014c:	601a      	str	r2, [r3, #0]
            break;
   1014e:	e01d      	b.n	1018c <mp_obj_gen_resume+0x130>

        case MP_VM_RETURN_YIELD:
            *ret_val = *self->code_state.sp;
   10150:	69fb      	ldr	r3, [r7, #28]
   10152:	691b      	ldr	r3, [r3, #16]
   10154:	681a      	ldr	r2, [r3, #0]
   10156:	683b      	ldr	r3, [r7, #0]
   10158:	601a      	str	r2, [r3, #0]
            #if MICROPY_PY_GENERATOR_PEND_THROW
            *self->code_state.sp = mp_const_none;
   1015a:	69fb      	ldr	r3, [r7, #28]
   1015c:	691b      	ldr	r3, [r3, #16]
   1015e:	4a12      	ldr	r2, [pc, #72]	; (101a8 <mp_obj_gen_resume+0x14c>)
   10160:	601a      	str	r2, [r3, #0]
            #endif
            break;
   10162:	e013      	b.n	1018c <mp_obj_gen_resume+0x130>

        case MP_VM_RETURN_EXCEPTION: {
            size_t n_state = mp_decode_uint_value(self->code_state.fun_bc->bytecode);
   10164:	69fb      	ldr	r3, [r7, #28]
   10166:	689b      	ldr	r3, [r3, #8]
   10168:	689b      	ldr	r3, [r3, #8]
   1016a:	4618      	mov	r0, r3
   1016c:	f00a f9e0 	bl	1a530 <mp_decode_uint_value>
   10170:	6178      	str	r0, [r7, #20]
            self->code_state.ip = 0;
   10172:	69fb      	ldr	r3, [r7, #28]
   10174:	2200      	movs	r2, #0
   10176:	60da      	str	r2, [r3, #12]
            *ret_val = self->code_state.state[n_state - 1];
   10178:	697b      	ldr	r3, [r7, #20]
   1017a:	3b01      	subs	r3, #1
   1017c:	69fa      	ldr	r2, [r7, #28]
   1017e:	3306      	adds	r3, #6
   10180:	009b      	lsls	r3, r3, #2
   10182:	4413      	add	r3, r2
   10184:	685a      	ldr	r2, [r3, #4]
   10186:	683b      	ldr	r3, [r7, #0]
   10188:	601a      	str	r2, [r3, #0]
            break;
   1018a:	bf00      	nop
        }
    }

    return ret_kind;
   1018c:	69bb      	ldr	r3, [r7, #24]
}
   1018e:	4618      	mov	r0, r3
   10190:	3720      	adds	r7, #32
   10192:	46bd      	mov	sp, r7
   10194:	bd80      	pop	{r7, pc}
   10196:	bf00      	nop
   10198:	00020e3c 	.word	0x00020e3c
   1019c:	00020ce4 	.word	0x00020ce4
   101a0:	00020e88 	.word	0x00020e88
   101a4:	00020c70 	.word	0x00020c70
   101a8:	00021534 	.word	0x00021534
   101ac:	00020d48 	.word	0x00020d48
   101b0:	00020d80 	.word	0x00020d80

000101b4 <gen_resume_and_raise>:

STATIC mp_obj_t gen_resume_and_raise(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value) {
   101b4:	b580      	push	{r7, lr}
   101b6:	b086      	sub	sp, #24
   101b8:	af00      	add	r7, sp, #0
   101ba:	60f8      	str	r0, [r7, #12]
   101bc:	60b9      	str	r1, [r7, #8]
   101be:	607a      	str	r2, [r7, #4]
    mp_obj_t ret;
    switch (mp_obj_gen_resume(self_in, send_value, throw_value, &ret)) {
   101c0:	f107 0310 	add.w	r3, r7, #16
   101c4:	687a      	ldr	r2, [r7, #4]
   101c6:	68b9      	ldr	r1, [r7, #8]
   101c8:	68f8      	ldr	r0, [r7, #12]
   101ca:	f7ff ff47 	bl	1005c <mp_obj_gen_resume>
   101ce:	4603      	mov	r3, r0
   101d0:	2b01      	cmp	r3, #1
   101d2:	d015      	beq.n	10200 <gen_resume_and_raise+0x4c>
   101d4:	2b02      	cmp	r3, #2
   101d6:	d015      	beq.n	10204 <gen_resume_and_raise+0x50>
        case MP_VM_RETURN_NORMAL:
        default:
            // Optimize return w/o value in case generator is used in for loop
            if (ret == mp_const_none || ret == MP_OBJ_STOP_ITERATION) {
   101d8:	693b      	ldr	r3, [r7, #16]
   101da:	4a1a      	ldr	r2, [pc, #104]	; (10244 <gen_resume_and_raise+0x90>)
   101dc:	4293      	cmp	r3, r2
   101de:	d002      	beq.n	101e6 <gen_resume_and_raise+0x32>
   101e0:	693b      	ldr	r3, [r7, #16]
   101e2:	2b04      	cmp	r3, #4
   101e4:	d101      	bne.n	101ea <gen_resume_and_raise+0x36>
                return MP_OBJ_STOP_ITERATION;
   101e6:	2304      	movs	r3, #4
   101e8:	e027      	b.n	1023a <gen_resume_and_raise+0x86>
            } else {
                nlr_raise(mp_obj_new_exception_args(&mp_type_StopIteration, 1, &ret));
   101ea:	f107 0310 	add.w	r3, r7, #16
   101ee:	461a      	mov	r2, r3
   101f0:	2101      	movs	r1, #1
   101f2:	4815      	ldr	r0, [pc, #84]	; (10248 <gen_resume_and_raise+0x94>)
   101f4:	f7ff f972 	bl	f4dc <mp_obj_new_exception_args>
   101f8:	4603      	mov	r3, r0
   101fa:	4618      	mov	r0, r3
   101fc:	f7f0 f870 	bl	2e0 <nlr_jump>
            }

        case MP_VM_RETURN_YIELD:
            return ret;
   10200:	693b      	ldr	r3, [r7, #16]
   10202:	e01a      	b.n	1023a <gen_resume_and_raise+0x86>

        case MP_VM_RETURN_EXCEPTION:
            // TODO: Optimization of returning MP_OBJ_STOP_ITERATION is really part
            // of mp_iternext() protocol, but this function is called by other methods
            // too, which may not handled MP_OBJ_STOP_ITERATION.
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   10204:	693b      	ldr	r3, [r7, #16]
   10206:	4618      	mov	r0, r3
   10208:	f7fd fb04 	bl	d814 <mp_obj_get_type>
   1020c:	4603      	mov	r3, r0
   1020e:	490e      	ldr	r1, [pc, #56]	; (10248 <gen_resume_and_raise+0x94>)
   10210:	4618      	mov	r0, r3
   10212:	f007 f867 	bl	172e4 <mp_obj_is_subclass_fast>
   10216:	4603      	mov	r3, r0
   10218:	2b00      	cmp	r3, #0
   1021a:	d00a      	beq.n	10232 <gen_resume_and_raise+0x7e>
                mp_obj_t val = mp_obj_exception_get_value(ret);
   1021c:	693b      	ldr	r3, [r7, #16]
   1021e:	4618      	mov	r0, r3
   10220:	f7ff f8ea 	bl	f3f8 <mp_obj_exception_get_value>
   10224:	6178      	str	r0, [r7, #20]
                if (val == mp_const_none) {
   10226:	697b      	ldr	r3, [r7, #20]
   10228:	4a06      	ldr	r2, [pc, #24]	; (10244 <gen_resume_and_raise+0x90>)
   1022a:	4293      	cmp	r3, r2
   1022c:	d101      	bne.n	10232 <gen_resume_and_raise+0x7e>
                    return MP_OBJ_STOP_ITERATION;
   1022e:	2304      	movs	r3, #4
   10230:	e003      	b.n	1023a <gen_resume_and_raise+0x86>
                }
            }
            nlr_raise(ret);
   10232:	693b      	ldr	r3, [r7, #16]
   10234:	4618      	mov	r0, r3
   10236:	f7f0 f853 	bl	2e0 <nlr_jump>
    }
}
   1023a:	4618      	mov	r0, r3
   1023c:	3718      	adds	r7, #24
   1023e:	46bd      	mov	sp, r7
   10240:	bd80      	pop	{r7, pc}
   10242:	bf00      	nop
   10244:	00021534 	.word	0x00021534
   10248:	0002032c 	.word	0x0002032c

0001024c <gen_instance_iternext>:

STATIC mp_obj_t gen_instance_iternext(mp_obj_t self_in) {
   1024c:	b580      	push	{r7, lr}
   1024e:	b082      	sub	sp, #8
   10250:	af00      	add	r7, sp, #0
   10252:	6078      	str	r0, [r7, #4]
    return gen_resume_and_raise(self_in, mp_const_none, MP_OBJ_NULL);
   10254:	2200      	movs	r2, #0
   10256:	4904      	ldr	r1, [pc, #16]	; (10268 <gen_instance_iternext+0x1c>)
   10258:	6878      	ldr	r0, [r7, #4]
   1025a:	f7ff ffab 	bl	101b4 <gen_resume_and_raise>
   1025e:	4603      	mov	r3, r0
}
   10260:	4618      	mov	r0, r3
   10262:	3708      	adds	r7, #8
   10264:	46bd      	mov	sp, r7
   10266:	bd80      	pop	{r7, pc}
   10268:	00021534 	.word	0x00021534

0001026c <gen_instance_send>:

STATIC mp_obj_t gen_instance_send(mp_obj_t self_in, mp_obj_t send_value) {
   1026c:	b580      	push	{r7, lr}
   1026e:	b084      	sub	sp, #16
   10270:	af00      	add	r7, sp, #0
   10272:	6078      	str	r0, [r7, #4]
   10274:	6039      	str	r1, [r7, #0]
    mp_obj_t ret = gen_resume_and_raise(self_in, send_value, MP_OBJ_NULL);
   10276:	2200      	movs	r2, #0
   10278:	6839      	ldr	r1, [r7, #0]
   1027a:	6878      	ldr	r0, [r7, #4]
   1027c:	f7ff ff9a 	bl	101b4 <gen_resume_and_raise>
   10280:	60f8      	str	r0, [r7, #12]
    if (ret == MP_OBJ_STOP_ITERATION) {
   10282:	68fb      	ldr	r3, [r7, #12]
   10284:	2b04      	cmp	r3, #4
   10286:	d106      	bne.n	10296 <gen_instance_send+0x2a>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   10288:	4805      	ldr	r0, [pc, #20]	; (102a0 <gen_instance_send+0x34>)
   1028a:	f7ff f909 	bl	f4a0 <mp_obj_new_exception>
   1028e:	4603      	mov	r3, r0
   10290:	4618      	mov	r0, r3
   10292:	f7f0 f825 	bl	2e0 <nlr_jump>
    } else {
        return ret;
   10296:	68fb      	ldr	r3, [r7, #12]
    }
}
   10298:	4618      	mov	r0, r3
   1029a:	3710      	adds	r7, #16
   1029c:	46bd      	mov	sp, r7
   1029e:	bd80      	pop	{r7, pc}
   102a0:	0002032c 	.word	0x0002032c

000102a4 <gen_instance_throw>:

STATIC MP_DEFINE_CONST_FUN_OBJ_2(gen_instance_send_obj, gen_instance_send);

STATIC mp_obj_t gen_instance_close(mp_obj_t self_in);
STATIC mp_obj_t gen_instance_throw(size_t n_args, const mp_obj_t *args) {
   102a4:	b580      	push	{r7, lr}
   102a6:	b084      	sub	sp, #16
   102a8:	af00      	add	r7, sp, #0
   102aa:	6078      	str	r0, [r7, #4]
   102ac:	6039      	str	r1, [r7, #0]
    mp_obj_t exc = (n_args == 2) ? args[1] : args[2];
   102ae:	687b      	ldr	r3, [r7, #4]
   102b0:	2b02      	cmp	r3, #2
   102b2:	d102      	bne.n	102ba <gen_instance_throw+0x16>
   102b4:	683b      	ldr	r3, [r7, #0]
   102b6:	685b      	ldr	r3, [r3, #4]
   102b8:	e001      	b.n	102be <gen_instance_throw+0x1a>
   102ba:	683b      	ldr	r3, [r7, #0]
   102bc:	689b      	ldr	r3, [r3, #8]
   102be:	60fb      	str	r3, [r7, #12]

    mp_obj_t ret = gen_resume_and_raise(args[0], mp_const_none, exc);
   102c0:	683b      	ldr	r3, [r7, #0]
   102c2:	681b      	ldr	r3, [r3, #0]
   102c4:	68fa      	ldr	r2, [r7, #12]
   102c6:	490a      	ldr	r1, [pc, #40]	; (102f0 <gen_instance_throw+0x4c>)
   102c8:	4618      	mov	r0, r3
   102ca:	f7ff ff73 	bl	101b4 <gen_resume_and_raise>
   102ce:	60b8      	str	r0, [r7, #8]
    if (ret == MP_OBJ_STOP_ITERATION) {
   102d0:	68bb      	ldr	r3, [r7, #8]
   102d2:	2b04      	cmp	r3, #4
   102d4:	d106      	bne.n	102e4 <gen_instance_throw+0x40>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   102d6:	4807      	ldr	r0, [pc, #28]	; (102f4 <gen_instance_throw+0x50>)
   102d8:	f7ff f8e2 	bl	f4a0 <mp_obj_new_exception>
   102dc:	4603      	mov	r3, r0
   102de:	4618      	mov	r0, r3
   102e0:	f7ef fffe 	bl	2e0 <nlr_jump>
    } else {
        return ret;
   102e4:	68bb      	ldr	r3, [r7, #8]
    }
}
   102e6:	4618      	mov	r0, r3
   102e8:	3710      	adds	r7, #16
   102ea:	46bd      	mov	sp, r7
   102ec:	bd80      	pop	{r7, pc}
   102ee:	bf00      	nop
   102f0:	00021534 	.word	0x00021534
   102f4:	0002032c 	.word	0x0002032c

000102f8 <gen_instance_close>:

STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(gen_instance_throw_obj, 2, 4, gen_instance_throw);

STATIC mp_obj_t gen_instance_close(mp_obj_t self_in) {
   102f8:	b580      	push	{r7, lr}
   102fa:	b084      	sub	sp, #16
   102fc:	af00      	add	r7, sp, #0
   102fe:	6078      	str	r0, [r7, #4]
    mp_obj_t ret;
    switch (mp_obj_gen_resume(self_in, mp_const_none, MP_OBJ_FROM_PTR(&mp_const_GeneratorExit_obj), &ret)) {
   10300:	f107 030c 	add.w	r3, r7, #12
   10304:	4a18      	ldr	r2, [pc, #96]	; (10368 <gen_instance_close+0x70>)
   10306:	4919      	ldr	r1, [pc, #100]	; (1036c <gen_instance_close+0x74>)
   10308:	6878      	ldr	r0, [r7, #4]
   1030a:	f7ff fea7 	bl	1005c <mp_obj_gen_resume>
   1030e:	4603      	mov	r3, r0
   10310:	2b01      	cmp	r3, #1
   10312:	d002      	beq.n	1031a <gen_instance_close+0x22>
   10314:	2b02      	cmp	r3, #2
   10316:	d004      	beq.n	10322 <gen_instance_close+0x2a>
   10318:	e021      	b.n	1035e <gen_instance_close+0x66>
        case MP_VM_RETURN_YIELD:
            mp_raise_msg(&mp_type_RuntimeError, "generator ignored GeneratorExit");
   1031a:	4915      	ldr	r1, [pc, #84]	; (10370 <gen_instance_close+0x78>)
   1031c:	4815      	ldr	r0, [pc, #84]	; (10374 <gen_instance_close+0x7c>)
   1031e:	f7fc fe3d 	bl	cf9c <mp_raise_msg>

        // Swallow StopIteration & GeneratorExit (== successful close), and re-raise any other
        case MP_VM_RETURN_EXCEPTION:
            // ret should always be an instance of an exception class
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit)) ||
   10322:	68fb      	ldr	r3, [r7, #12]
   10324:	4618      	mov	r0, r3
   10326:	f7fd fa75 	bl	d814 <mp_obj_get_type>
   1032a:	4603      	mov	r3, r0
   1032c:	4912      	ldr	r1, [pc, #72]	; (10378 <gen_instance_close+0x80>)
   1032e:	4618      	mov	r0, r3
   10330:	f006 ffd8 	bl	172e4 <mp_obj_is_subclass_fast>
   10334:	4603      	mov	r3, r0
   10336:	2b00      	cmp	r3, #0
   10338:	d10b      	bne.n	10352 <gen_instance_close+0x5a>
                mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   1033a:	68fb      	ldr	r3, [r7, #12]
   1033c:	4618      	mov	r0, r3
   1033e:	f7fd fa69 	bl	d814 <mp_obj_get_type>
   10342:	4603      	mov	r3, r0
   10344:	490d      	ldr	r1, [pc, #52]	; (1037c <gen_instance_close+0x84>)
   10346:	4618      	mov	r0, r3
   10348:	f006 ffcc 	bl	172e4 <mp_obj_is_subclass_fast>
   1034c:	4603      	mov	r3, r0
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit)) ||
   1034e:	2b00      	cmp	r3, #0
   10350:	d001      	beq.n	10356 <gen_instance_close+0x5e>
                return mp_const_none;
   10352:	4b06      	ldr	r3, [pc, #24]	; (1036c <gen_instance_close+0x74>)
   10354:	e004      	b.n	10360 <gen_instance_close+0x68>
            }
            nlr_raise(ret);
   10356:	68fb      	ldr	r3, [r7, #12]
   10358:	4618      	mov	r0, r3
   1035a:	f7ef ffc1 	bl	2e0 <nlr_jump>

        default:
            // The only choice left is MP_VM_RETURN_NORMAL which is successful close
            return mp_const_none;
   1035e:	4b03      	ldr	r3, [pc, #12]	; (1036c <gen_instance_close+0x74>)
    }
}
   10360:	4618      	mov	r0, r3
   10362:	3710      	adds	r7, #16
   10364:	46bd      	mov	sp, r7
   10366:	bd80      	pop	{r7, pc}
   10368:	000201e8 	.word	0x000201e8
   1036c:	00021534 	.word	0x00021534
   10370:	00020db0 	.word	0x00020db0
   10374:	00020674 	.word	0x00020674
   10378:	000202b4 	.word	0x000202b4
   1037c:	0002032c 	.word	0x0002032c

00010380 <gen_instance_pend_throw>:

STATIC MP_DEFINE_CONST_FUN_OBJ_1(gen_instance_close_obj, gen_instance_close);

STATIC mp_obj_t gen_instance_pend_throw(mp_obj_t self_in, mp_obj_t exc_in) {
   10380:	b580      	push	{r7, lr}
   10382:	b084      	sub	sp, #16
   10384:	af00      	add	r7, sp, #0
   10386:	6078      	str	r0, [r7, #4]
   10388:	6039      	str	r1, [r7, #0]
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
   1038a:	687b      	ldr	r3, [r7, #4]
   1038c:	60fb      	str	r3, [r7, #12]
    if (self->code_state.sp == self->code_state.state - 1) {
   1038e:	68fb      	ldr	r3, [r7, #12]
   10390:	691a      	ldr	r2, [r3, #16]
   10392:	68fb      	ldr	r3, [r7, #12]
   10394:	331c      	adds	r3, #28
   10396:	3b04      	subs	r3, #4
   10398:	429a      	cmp	r2, r3
   1039a:	d102      	bne.n	103a2 <gen_instance_pend_throw+0x22>
        mp_raise_TypeError("can't pend throw to just-started generator");
   1039c:	4807      	ldr	r0, [pc, #28]	; (103bc <gen_instance_pend_throw+0x3c>)
   1039e:	f7fc fe1f 	bl	cfe0 <mp_raise_TypeError>
    }
    mp_obj_t prev = *self->code_state.sp;
   103a2:	68fb      	ldr	r3, [r7, #12]
   103a4:	691b      	ldr	r3, [r3, #16]
   103a6:	681b      	ldr	r3, [r3, #0]
   103a8:	60bb      	str	r3, [r7, #8]
    *self->code_state.sp = exc_in;
   103aa:	68fb      	ldr	r3, [r7, #12]
   103ac:	691b      	ldr	r3, [r3, #16]
   103ae:	683a      	ldr	r2, [r7, #0]
   103b0:	601a      	str	r2, [r3, #0]
    return prev;
   103b2:	68bb      	ldr	r3, [r7, #8]
}
   103b4:	4618      	mov	r0, r3
   103b6:	3710      	adds	r7, #16
   103b8:	46bd      	mov	sp, r7
   103ba:	bd80      	pop	{r7, pc}
   103bc:	00020dd8 	.word	0x00020dd8

000103c0 <it_iternext>:
typedef struct _mp_obj_getitem_iter_t {
    mp_obj_base_t base;
    mp_obj_t args[3];
} mp_obj_getitem_iter_t;

STATIC mp_obj_t it_iternext(mp_obj_t self_in) {
   103c0:	b580      	push	{r7, lr}
   103c2:	b092      	sub	sp, #72	; 0x48
   103c4:	af00      	add	r7, sp, #0
   103c6:	6078      	str	r0, [r7, #4]
    mp_obj_getitem_iter_t *self = MP_OBJ_TO_PTR(self_in);
   103c8:	687b      	ldr	r3, [r7, #4]
   103ca:	647b      	str	r3, [r7, #68]	; 0x44
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   103cc:	f107 030c 	add.w	r3, r7, #12
   103d0:	4618      	mov	r0, r3
   103d2:	f7ef ff73 	bl	2bc <nlr_push>
   103d6:	4603      	mov	r3, r0
   103d8:	2b00      	cmp	r3, #0
   103da:	d115      	bne.n	10408 <it_iternext+0x48>
        // try to get next item
        mp_obj_t value = mp_call_method_n_kw(1, 0, self->args);
   103dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   103de:	3304      	adds	r3, #4
   103e0:	461a      	mov	r2, r3
   103e2:	2100      	movs	r1, #0
   103e4:	2001      	movs	r0, #1
   103e6:	f7fb fd59 	bl	be9c <mp_call_method_n_kw>
   103ea:	6438      	str	r0, [r7, #64]	; 0x40
        self->args[2] = MP_OBJ_NEW_SMALL_INT(MP_OBJ_SMALL_INT_VALUE(self->args[2]) + 1);
   103ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   103ee:	68db      	ldr	r3, [r3, #12]
   103f0:	105b      	asrs	r3, r3, #1
   103f2:	3301      	adds	r3, #1
   103f4:	005b      	lsls	r3, r3, #1
   103f6:	f043 0301 	orr.w	r3, r3, #1
   103fa:	461a      	mov	r2, r3
   103fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   103fe:	60da      	str	r2, [r3, #12]
        nlr_pop();
   10400:	f7ef ff4a 	bl	298 <nlr_pop>
        return value;
   10404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10406:	e010      	b.n	1042a <it_iternext+0x6a>
    } else {
        // an exception was raised
        mp_obj_type_t *t = (mp_obj_type_t*)((mp_obj_base_t*)nlr.ret_val)->type;
   10408:	693b      	ldr	r3, [r7, #16]
   1040a:	681b      	ldr	r3, [r3, #0]
   1040c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (t == &mp_type_StopIteration || t == &mp_type_IndexError) {
   1040e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10410:	4a08      	ldr	r2, [pc, #32]	; (10434 <it_iternext+0x74>)
   10412:	4293      	cmp	r3, r2
   10414:	d003      	beq.n	1041e <it_iternext+0x5e>
   10416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10418:	4a07      	ldr	r2, [pc, #28]	; (10438 <it_iternext+0x78>)
   1041a:	4293      	cmp	r3, r2
   1041c:	d101      	bne.n	10422 <it_iternext+0x62>
            // return MP_OBJ_STOP_ITERATION instead of raising
            return MP_OBJ_STOP_ITERATION;
   1041e:	2304      	movs	r3, #4
   10420:	e003      	b.n	1042a <it_iternext+0x6a>
        } else {
            // re-raise exception
            nlr_jump(nlr.ret_val);
   10422:	693b      	ldr	r3, [r7, #16]
   10424:	4618      	mov	r0, r3
   10426:	f7ef ff5b 	bl	2e0 <nlr_jump>
        }
    }
}
   1042a:	4618      	mov	r0, r3
   1042c:	3748      	adds	r7, #72	; 0x48
   1042e:	46bd      	mov	sp, r7
   10430:	bd80      	pop	{r7, pc}
   10432:	bf00      	nop
   10434:	0002032c 	.word	0x0002032c
   10438:	00020548 	.word	0x00020548

0001043c <mp_obj_new_getitem_iter>:
    .getiter = mp_identity_getiter,
    .iternext = it_iternext,
};

// args are those returned from mp_load_method_maybe (ie either an attribute or a method)
mp_obj_t mp_obj_new_getitem_iter(mp_obj_t *args, mp_obj_iter_buf_t *iter_buf) {
   1043c:	b480      	push	{r7}
   1043e:	b085      	sub	sp, #20
   10440:	af00      	add	r7, sp, #0
   10442:	6078      	str	r0, [r7, #4]
   10444:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_getitem_iter_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_getitem_iter_t *o = (mp_obj_getitem_iter_t*)iter_buf;
   10446:	683b      	ldr	r3, [r7, #0]
   10448:	60fb      	str	r3, [r7, #12]
    o->base.type = &it_type;
   1044a:	68fb      	ldr	r3, [r7, #12]
   1044c:	4a09      	ldr	r2, [pc, #36]	; (10474 <mp_obj_new_getitem_iter+0x38>)
   1044e:	601a      	str	r2, [r3, #0]
    o->args[0] = args[0];
   10450:	687b      	ldr	r3, [r7, #4]
   10452:	681a      	ldr	r2, [r3, #0]
   10454:	68fb      	ldr	r3, [r7, #12]
   10456:	605a      	str	r2, [r3, #4]
    o->args[1] = args[1];
   10458:	687b      	ldr	r3, [r7, #4]
   1045a:	685a      	ldr	r2, [r3, #4]
   1045c:	68fb      	ldr	r3, [r7, #12]
   1045e:	609a      	str	r2, [r3, #8]
    o->args[2] = MP_OBJ_NEW_SMALL_INT(0);
   10460:	68fb      	ldr	r3, [r7, #12]
   10462:	2201      	movs	r2, #1
   10464:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   10466:	68fb      	ldr	r3, [r7, #12]
}
   10468:	4618      	mov	r0, r3
   1046a:	3714      	adds	r7, #20
   1046c:	46bd      	mov	sp, r7
   1046e:	f85d 7b04 	ldr.w	r7, [sp], #4
   10472:	4770      	bx	lr
   10474:	00020e9c 	.word	0x00020e9c

00010478 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   10478:	b480      	push	{r7}
   1047a:	b083      	sub	sp, #12
   1047c:	af00      	add	r7, sp, #0
   1047e:	6078      	str	r0, [r7, #4]
   10480:	687b      	ldr	r3, [r7, #4]
   10482:	f003 0301 	and.w	r3, r3, #1
   10486:	2b00      	cmp	r3, #0
   10488:	bf14      	ite	ne
   1048a:	2301      	movne	r3, #1
   1048c:	2300      	moveq	r3, #0
   1048e:	b2db      	uxtb	r3, r3
   10490:	4618      	mov	r0, r3
   10492:	370c      	adds	r7, #12
   10494:	46bd      	mov	sp, r7
   10496:	f85d 7b04 	ldr.w	r7, [sp], #4
   1049a:	4770      	bx	lr

0001049c <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
   1049c:	b480      	push	{r7}
   1049e:	b083      	sub	sp, #12
   104a0:	af00      	add	r7, sp, #0
   104a2:	6078      	str	r0, [r7, #4]
   104a4:	687b      	ldr	r3, [r7, #4]
   104a6:	f003 0303 	and.w	r3, r3, #3
   104aa:	2b02      	cmp	r3, #2
   104ac:	bf0c      	ite	eq
   104ae:	2301      	moveq	r3, #1
   104b0:	2300      	movne	r3, #0
   104b2:	b2db      	uxtb	r3, r3
   104b4:	4618      	mov	r0, r3
   104b6:	370c      	adds	r7, #12
   104b8:	46bd      	mov	sp, r7
   104ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   104be:	4770      	bx	lr

000104c0 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   104c0:	b480      	push	{r7}
   104c2:	b083      	sub	sp, #12
   104c4:	af00      	add	r7, sp, #0
   104c6:	6078      	str	r0, [r7, #4]
   104c8:	687b      	ldr	r3, [r7, #4]
   104ca:	f003 0303 	and.w	r3, r3, #3
   104ce:	2b00      	cmp	r3, #0
   104d0:	bf0c      	ite	eq
   104d2:	2301      	moveq	r3, #1
   104d4:	2300      	movne	r3, #0
   104d6:	b2db      	uxtb	r3, r3
   104d8:	4618      	mov	r0, r3
   104da:	370c      	adds	r7, #12
   104dc:	46bd      	mov	sp, r7
   104de:	f85d 7b04 	ldr.w	r7, [sp], #4
   104e2:	4770      	bx	lr

000104e4 <mp_obj_int_make_new>:
#if MICROPY_PY_BUILTINS_FLOAT
#include <math.h>
#endif

// This dispatcher function is expected to be independent of the implementation of long int
STATIC mp_obj_t mp_obj_int_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   104e4:	b590      	push	{r4, r7, lr}
   104e6:	b08b      	sub	sp, #44	; 0x2c
   104e8:	af02      	add	r7, sp, #8
   104ea:	60f8      	str	r0, [r7, #12]
   104ec:	60b9      	str	r1, [r7, #8]
   104ee:	607a      	str	r2, [r7, #4]
   104f0:	603b      	str	r3, [r7, #0]
    (void)type_in;
    mp_arg_check_num(n_args, n_kw, 0, 2, false);
   104f2:	2300      	movs	r3, #0
   104f4:	9300      	str	r3, [sp, #0]
   104f6:	2302      	movs	r3, #2
   104f8:	2200      	movs	r2, #0
   104fa:	6879      	ldr	r1, [r7, #4]
   104fc:	68b8      	ldr	r0, [r7, #8]
   104fe:	f7fc fd95 	bl	d02c <mp_arg_check_num>

    switch (n_args) {
   10502:	68bb      	ldr	r3, [r7, #8]
   10504:	2b00      	cmp	r3, #0
   10506:	d002      	beq.n	1050e <mp_obj_int_make_new+0x2a>
   10508:	2b01      	cmp	r3, #1
   1050a:	d002      	beq.n	10512 <mp_obj_int_make_new+0x2e>
   1050c:	e04c      	b.n	105a8 <mp_obj_int_make_new+0xc4>
        case 0:
            return MP_OBJ_NEW_SMALL_INT(0);
   1050e:	2301      	movs	r3, #1
   10510:	e061      	b.n	105d6 <mp_obj_int_make_new+0xf2>

        case 1:
            if (MP_OBJ_IS_INT(args[0])) {
   10512:	683b      	ldr	r3, [r7, #0]
   10514:	681b      	ldr	r3, [r3, #0]
   10516:	4618      	mov	r0, r3
   10518:	f7ff ffae 	bl	10478 <MP_OBJ_IS_SMALL_INT>
   1051c:	4603      	mov	r3, r0
   1051e:	2b00      	cmp	r3, #0
   10520:	d10d      	bne.n	1053e <mp_obj_int_make_new+0x5a>
   10522:	683b      	ldr	r3, [r7, #0]
   10524:	681b      	ldr	r3, [r3, #0]
   10526:	4618      	mov	r0, r3
   10528:	f7ff ffca 	bl	104c0 <MP_OBJ_IS_OBJ>
   1052c:	4603      	mov	r3, r0
   1052e:	2b00      	cmp	r3, #0
   10530:	d008      	beq.n	10544 <mp_obj_int_make_new+0x60>
   10532:	683b      	ldr	r3, [r7, #0]
   10534:	681b      	ldr	r3, [r3, #0]
   10536:	681b      	ldr	r3, [r3, #0]
   10538:	4a29      	ldr	r2, [pc, #164]	; (105e0 <mp_obj_int_make_new+0xfc>)
   1053a:	4293      	cmp	r3, r2
   1053c:	d102      	bne.n	10544 <mp_obj_int_make_new+0x60>
                // already an int (small or long), just return it
                return args[0];
   1053e:	683b      	ldr	r3, [r7, #0]
   10540:	681b      	ldr	r3, [r3, #0]
   10542:	e048      	b.n	105d6 <mp_obj_int_make_new+0xf2>
            } else if (MP_OBJ_IS_STR_OR_BYTES(args[0])) {
   10544:	683b      	ldr	r3, [r7, #0]
   10546:	681b      	ldr	r3, [r3, #0]
   10548:	4618      	mov	r0, r3
   1054a:	f7ff ffa7 	bl	1049c <MP_OBJ_IS_QSTR>
   1054e:	4603      	mov	r3, r0
   10550:	2b00      	cmp	r3, #0
   10552:	d10e      	bne.n	10572 <mp_obj_int_make_new+0x8e>
   10554:	683b      	ldr	r3, [r7, #0]
   10556:	681b      	ldr	r3, [r3, #0]
   10558:	4618      	mov	r0, r3
   1055a:	f7ff ffb1 	bl	104c0 <MP_OBJ_IS_OBJ>
   1055e:	4603      	mov	r3, r0
   10560:	2b00      	cmp	r3, #0
   10562:	d017      	beq.n	10594 <mp_obj_int_make_new+0xb0>
   10564:	683b      	ldr	r3, [r7, #0]
   10566:	681b      	ldr	r3, [r3, #0]
   10568:	681b      	ldr	r3, [r3, #0]
   1056a:	699b      	ldr	r3, [r3, #24]
   1056c:	4a1d      	ldr	r2, [pc, #116]	; (105e4 <mp_obj_int_make_new+0x100>)
   1056e:	4293      	cmp	r3, r2
   10570:	d110      	bne.n	10594 <mp_obj_int_make_new+0xb0>
                // a string, parse it
                size_t l;
                const char *s = mp_obj_str_get_data(args[0], &l);
   10572:	683b      	ldr	r3, [r7, #0]
   10574:	681b      	ldr	r3, [r3, #0]
   10576:	f107 0214 	add.w	r2, r7, #20
   1057a:	4611      	mov	r1, r2
   1057c:	4618      	mov	r0, r3
   1057e:	f005 f893 	bl	156a8 <mp_obj_str_get_data>
   10582:	61f8      	str	r0, [r7, #28]
                return mp_parse_num_integer(s, l, 0, NULL);
   10584:	6979      	ldr	r1, [r7, #20]
   10586:	2300      	movs	r3, #0
   10588:	2200      	movs	r2, #0
   1058a:	69f8      	ldr	r0, [r7, #28]
   1058c:	f7fa fd48 	bl	b020 <mp_parse_num_integer>
   10590:	4603      	mov	r3, r0
   10592:	e020      	b.n	105d6 <mp_obj_int_make_new+0xf2>
            } else if (mp_obj_is_float(args[0])) {
                return mp_obj_new_int_from_float(mp_obj_float_get(args[0]));
#endif
            } else {
                // try to convert to small int (eg from bool)
                return MP_OBJ_NEW_SMALL_INT(mp_obj_get_int(args[0]));
   10594:	683b      	ldr	r3, [r7, #0]
   10596:	681b      	ldr	r3, [r3, #0]
   10598:	4618      	mov	r0, r3
   1059a:	f7fd fb19 	bl	dbd0 <mp_obj_get_int>
   1059e:	4603      	mov	r3, r0
   105a0:	005b      	lsls	r3, r3, #1
   105a2:	f043 0301 	orr.w	r3, r3, #1
   105a6:	e016      	b.n	105d6 <mp_obj_int_make_new+0xf2>
        case 2:
        default: {
            // should be a string, parse it
            // TODO proper error checking of argument types
            size_t l;
            const char *s = mp_obj_str_get_data(args[0], &l);
   105a8:	683b      	ldr	r3, [r7, #0]
   105aa:	681b      	ldr	r3, [r3, #0]
   105ac:	f107 0210 	add.w	r2, r7, #16
   105b0:	4611      	mov	r1, r2
   105b2:	4618      	mov	r0, r3
   105b4:	f005 f878 	bl	156a8 <mp_obj_str_get_data>
   105b8:	61b8      	str	r0, [r7, #24]
            return mp_parse_num_integer(s, l, mp_obj_get_int(args[1]), NULL);
   105ba:	693c      	ldr	r4, [r7, #16]
   105bc:	683b      	ldr	r3, [r7, #0]
   105be:	3304      	adds	r3, #4
   105c0:	681b      	ldr	r3, [r3, #0]
   105c2:	4618      	mov	r0, r3
   105c4:	f7fd fb04 	bl	dbd0 <mp_obj_get_int>
   105c8:	4602      	mov	r2, r0
   105ca:	2300      	movs	r3, #0
   105cc:	4621      	mov	r1, r4
   105ce:	69b8      	ldr	r0, [r7, #24]
   105d0:	f7fa fd26 	bl	b020 <mp_parse_num_integer>
   105d4:	4603      	mov	r3, r0
        }
    }
}
   105d6:	4618      	mov	r0, r3
   105d8:	3724      	adds	r7, #36	; 0x24
   105da:	46bd      	mov	sp, r7
   105dc:	bd90      	pop	{r4, r7, pc}
   105de:	bf00      	nop
   105e0:	00020f90 	.word	0x00020f90
   105e4:	00012895 	.word	0x00012895

000105e8 <mp_obj_int_print>:
#else
typedef mp_int_t fmt_int_t;
typedef mp_uint_t fmt_uint_t;
#endif

void mp_obj_int_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   105e8:	b580      	push	{r7, lr}
   105ea:	b090      	sub	sp, #64	; 0x40
   105ec:	af04      	add	r7, sp, #16
   105ee:	60f8      	str	r0, [r7, #12]
   105f0:	60b9      	str	r1, [r7, #8]
   105f2:	607a      	str	r2, [r7, #4]
    (void)kind;
    // The size of this buffer is rather arbitrary. If it's not large
    // enough, a dynamic one will be allocated.
    char stack_buf[sizeof(fmt_int_t) * 4];
    char *buf = stack_buf;
   105f4:	f107 031c 	add.w	r3, r7, #28
   105f8:	61bb      	str	r3, [r7, #24]
    size_t buf_size = sizeof(stack_buf);
   105fa:	2310      	movs	r3, #16
   105fc:	617b      	str	r3, [r7, #20]
    size_t fmt_size;

    char *str = mp_obj_int_formatted(&buf, &buf_size, &fmt_size, self_in, 10, NULL, '\0', '\0');
   105fe:	f107 0210 	add.w	r2, r7, #16
   10602:	f107 0114 	add.w	r1, r7, #20
   10606:	f107 0018 	add.w	r0, r7, #24
   1060a:	2300      	movs	r3, #0
   1060c:	9303      	str	r3, [sp, #12]
   1060e:	2300      	movs	r3, #0
   10610:	9302      	str	r3, [sp, #8]
   10612:	2300      	movs	r3, #0
   10614:	9301      	str	r3, [sp, #4]
   10616:	230a      	movs	r3, #10
   10618:	9300      	str	r3, [sp, #0]
   1061a:	68bb      	ldr	r3, [r7, #8]
   1061c:	f000 f858 	bl	106d0 <mp_obj_int_formatted>
   10620:	62f8      	str	r0, [r7, #44]	; 0x2c
    mp_print_str(print, str);
   10622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   10624:	68f8      	ldr	r0, [r7, #12]
   10626:	f7f1 f929 	bl	187c <mp_print_str>

    if (buf != stack_buf) {
   1062a:	69ba      	ldr	r2, [r7, #24]
   1062c:	f107 031c 	add.w	r3, r7, #28
   10630:	429a      	cmp	r2, r3
   10632:	d003      	beq.n	1063c <mp_obj_int_print+0x54>
        m_del(char, buf, buf_size);
   10634:	69bb      	ldr	r3, [r7, #24]
   10636:	4618      	mov	r0, r3
   10638:	f7ef fed2 	bl	3e0 <m_free>
    }
}
   1063c:	bf00      	nop
   1063e:	3730      	adds	r7, #48	; 0x30
   10640:	46bd      	mov	sp, r7
   10642:	bd80      	pop	{r7, pc}

00010644 <mp_int_format_size>:
    4, 4, 4, 4,
    4, 4, 4, 5
    */
};

size_t mp_int_format_size(size_t num_bits, int base, const char *prefix, char comma) {
   10644:	b580      	push	{r7, lr}
   10646:	b088      	sub	sp, #32
   10648:	af00      	add	r7, sp, #0
   1064a:	60f8      	str	r0, [r7, #12]
   1064c:	60b9      	str	r1, [r7, #8]
   1064e:	607a      	str	r2, [r7, #4]
   10650:	70fb      	strb	r3, [r7, #3]
    assert(2 <= base && base <= 16);
   10652:	68bb      	ldr	r3, [r7, #8]
   10654:	2b01      	cmp	r3, #1
   10656:	dd02      	ble.n	1065e <mp_int_format_size+0x1a>
   10658:	68bb      	ldr	r3, [r7, #8]
   1065a:	2b10      	cmp	r3, #16
   1065c:	dd05      	ble.n	1066a <mp_int_format_size+0x26>
   1065e:	4b17      	ldr	r3, [pc, #92]	; (106bc <mp_int_format_size+0x78>)
   10660:	4a17      	ldr	r2, [pc, #92]	; (106c0 <mp_int_format_size+0x7c>)
   10662:	21d0      	movs	r1, #208	; 0xd0
   10664:	4817      	ldr	r0, [pc, #92]	; (106c4 <mp_int_format_size+0x80>)
   10666:	f00a fe81 	bl	1b36c <__assert_func>
    size_t num_digits = num_bits / log_base2_floor[base - 1] + 1;
   1066a:	68bb      	ldr	r3, [r7, #8]
   1066c:	3b01      	subs	r3, #1
   1066e:	4a16      	ldr	r2, [pc, #88]	; (106c8 <mp_int_format_size+0x84>)
   10670:	5cd3      	ldrb	r3, [r2, r3]
   10672:	461a      	mov	r2, r3
   10674:	68fb      	ldr	r3, [r7, #12]
   10676:	fbb3 f3f2 	udiv	r3, r3, r2
   1067a:	3301      	adds	r3, #1
   1067c:	61fb      	str	r3, [r7, #28]
    size_t num_commas = comma ? num_digits / 3 : 0;
   1067e:	78fb      	ldrb	r3, [r7, #3]
   10680:	2b00      	cmp	r3, #0
   10682:	d005      	beq.n	10690 <mp_int_format_size+0x4c>
   10684:	69fb      	ldr	r3, [r7, #28]
   10686:	4a11      	ldr	r2, [pc, #68]	; (106cc <mp_int_format_size+0x88>)
   10688:	fba2 2303 	umull	r2, r3, r2, r3
   1068c:	085b      	lsrs	r3, r3, #1
   1068e:	e000      	b.n	10692 <mp_int_format_size+0x4e>
   10690:	2300      	movs	r3, #0
   10692:	61bb      	str	r3, [r7, #24]
    size_t prefix_len = prefix ? strlen(prefix) : 0;
   10694:	687b      	ldr	r3, [r7, #4]
   10696:	2b00      	cmp	r3, #0
   10698:	d004      	beq.n	106a4 <mp_int_format_size+0x60>
   1069a:	6878      	ldr	r0, [r7, #4]
   1069c:	f00b fd4c 	bl	1c138 <strlen>
   106a0:	4603      	mov	r3, r0
   106a2:	e000      	b.n	106a6 <mp_int_format_size+0x62>
   106a4:	2300      	movs	r3, #0
   106a6:	617b      	str	r3, [r7, #20]
    return num_digits + num_commas + prefix_len + 2; // +1 for sign, +1 for null byte
   106a8:	69fa      	ldr	r2, [r7, #28]
   106aa:	69bb      	ldr	r3, [r7, #24]
   106ac:	441a      	add	r2, r3
   106ae:	697b      	ldr	r3, [r7, #20]
   106b0:	4413      	add	r3, r2
   106b2:	3302      	adds	r3, #2
}
   106b4:	4618      	mov	r0, r3
   106b6:	3720      	adds	r7, #32
   106b8:	46bd      	mov	sp, r7
   106ba:	bd80      	pop	{r7, pc}
   106bc:	00020ee8 	.word	0x00020ee8
   106c0:	00020fcc 	.word	0x00020fcc
   106c4:	00020f00 	.word	0x00020f00
   106c8:	00020ed8 	.word	0x00020ed8
   106cc:	aaaaaaab 	.word	0xaaaaaaab

000106d0 <mp_obj_int_formatted>:
// is the callers responsibility to free this allocated buffer.
//
// The resulting formatted string will be returned from this function and the
// formatted size will be in *fmt_size.
char *mp_obj_int_formatted(char **buf, size_t *buf_size, size_t *fmt_size, mp_const_obj_t self_in,
                           int base, const char *prefix, char base_char, char comma) {
   106d0:	b580      	push	{r7, lr}
   106d2:	b08e      	sub	sp, #56	; 0x38
   106d4:	af00      	add	r7, sp, #0
   106d6:	60f8      	str	r0, [r7, #12]
   106d8:	60b9      	str	r1, [r7, #8]
   106da:	607a      	str	r2, [r7, #4]
   106dc:	603b      	str	r3, [r7, #0]
    fmt_int_t num;
    #if MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_NONE
    // Only have small ints; get the integer value to format.
    num = MP_OBJ_SMALL_INT_VALUE(self_in);
   106de:	683b      	ldr	r3, [r7, #0]
   106e0:	105b      	asrs	r3, r3, #1
   106e2:	637b      	str	r3, [r7, #52]	; 0x34
        return mp_obj_int_formatted_impl(buf, buf_size, fmt_size, self_in, base, prefix, base_char, comma);
        #endif
    }
    #endif

    char sign = '\0';
   106e4:	2300      	movs	r3, #0
   106e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (num < 0) {
   106ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   106ec:	2b00      	cmp	r3, #0
   106ee:	da05      	bge.n	106fc <mp_obj_int_formatted+0x2c>
        num = -num;
   106f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   106f2:	425b      	negs	r3, r3
   106f4:	637b      	str	r3, [r7, #52]	; 0x34
        sign = '-';
   106f6:	232d      	movs	r3, #45	; 0x2d
   106f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }

    size_t needed_size = mp_int_format_size(sizeof(fmt_int_t) * 8, base, prefix, comma);
   106fc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   10700:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   10702:	6c39      	ldr	r1, [r7, #64]	; 0x40
   10704:	2020      	movs	r0, #32
   10706:	f7ff ff9d 	bl	10644 <mp_int_format_size>
   1070a:	61f8      	str	r0, [r7, #28]
    if (needed_size > *buf_size) {
   1070c:	68bb      	ldr	r3, [r7, #8]
   1070e:	681a      	ldr	r2, [r3, #0]
   10710:	69fb      	ldr	r3, [r7, #28]
   10712:	429a      	cmp	r2, r3
   10714:	d208      	bcs.n	10728 <mp_obj_int_formatted+0x58>
        *buf = m_new(char, needed_size);
   10716:	69f8      	ldr	r0, [r7, #28]
   10718:	f7ef fe00 	bl	31c <m_malloc>
   1071c:	4602      	mov	r2, r0
   1071e:	68fb      	ldr	r3, [r7, #12]
   10720:	601a      	str	r2, [r3, #0]
        *buf_size = needed_size;
   10722:	68bb      	ldr	r3, [r7, #8]
   10724:	69fa      	ldr	r2, [r7, #28]
   10726:	601a      	str	r2, [r3, #0]
    }
    char *str = *buf;
   10728:	68fb      	ldr	r3, [r7, #12]
   1072a:	681b      	ldr	r3, [r3, #0]
   1072c:	61bb      	str	r3, [r7, #24]

    char *b = str + needed_size;
   1072e:	69ba      	ldr	r2, [r7, #24]
   10730:	69fb      	ldr	r3, [r7, #28]
   10732:	4413      	add	r3, r2
   10734:	62fb      	str	r3, [r7, #44]	; 0x2c
    *(--b) = '\0';
   10736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10738:	3b01      	subs	r3, #1
   1073a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1073c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1073e:	2200      	movs	r2, #0
   10740:	701a      	strb	r2, [r3, #0]
    char *last_comma = b;
   10742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10744:	62bb      	str	r3, [r7, #40]	; 0x28

    if (num == 0) {
   10746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10748:	2b00      	cmp	r3, #0
   1074a:	d106      	bne.n	1075a <mp_obj_int_formatted+0x8a>
        *(--b) = '0';
   1074c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1074e:	3b01      	subs	r3, #1
   10750:	62fb      	str	r3, [r7, #44]	; 0x2c
   10752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10754:	2230      	movs	r2, #48	; 0x30
   10756:	701a      	strb	r2, [r3, #0]
   10758:	e040      	b.n	107dc <mp_obj_int_formatted+0x10c>
    } else {
        do {
            // The cast to fmt_uint_t is because num is positive and we want unsigned arithmetic
            int c = (fmt_uint_t)num % base;
   1075a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1075c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1075e:	fbb3 f1f2 	udiv	r1, r3, r2
   10762:	fb02 f201 	mul.w	r2, r2, r1
   10766:	1a9b      	subs	r3, r3, r2
   10768:	627b      	str	r3, [r7, #36]	; 0x24
            num = (fmt_uint_t)num / base;
   1076a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1076c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1076e:	fbb2 f3f3 	udiv	r3, r2, r3
   10772:	637b      	str	r3, [r7, #52]	; 0x34
            if (c >= 10) {
   10774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10776:	2b09      	cmp	r3, #9
   10778:	dd06      	ble.n	10788 <mp_obj_int_formatted+0xb8>
                c += base_char - 10;
   1077a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
   1077e:	3b0a      	subs	r3, #10
   10780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10782:	4413      	add	r3, r2
   10784:	627b      	str	r3, [r7, #36]	; 0x24
   10786:	e002      	b.n	1078e <mp_obj_int_formatted+0xbe>
            } else {
                c += '0';
   10788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1078a:	3330      	adds	r3, #48	; 0x30
   1078c:	627b      	str	r3, [r7, #36]	; 0x24
            }
            *(--b) = c;
   1078e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10790:	3b01      	subs	r3, #1
   10792:	62fb      	str	r3, [r7, #44]	; 0x2c
   10794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10796:	b2da      	uxtb	r2, r3
   10798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1079a:	701a      	strb	r2, [r3, #0]
            if (comma && num != 0 && b > str && (last_comma - b) == 3) {
   1079c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   107a0:	2b00      	cmp	r3, #0
   107a2:	d014      	beq.n	107ce <mp_obj_int_formatted+0xfe>
   107a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   107a6:	2b00      	cmp	r3, #0
   107a8:	d011      	beq.n	107ce <mp_obj_int_formatted+0xfe>
   107aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   107ac:	69bb      	ldr	r3, [r7, #24]
   107ae:	429a      	cmp	r2, r3
   107b0:	d90d      	bls.n	107ce <mp_obj_int_formatted+0xfe>
   107b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   107b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   107b6:	1ad3      	subs	r3, r2, r3
   107b8:	2b03      	cmp	r3, #3
   107ba:	d108      	bne.n	107ce <mp_obj_int_formatted+0xfe>
                *(--b) = comma;
   107bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   107be:	3b01      	subs	r3, #1
   107c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   107c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   107c4:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
   107c8:	701a      	strb	r2, [r3, #0]
                last_comma = b;
   107ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   107cc:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }
        while (b > str && num != 0);
   107ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   107d0:	69bb      	ldr	r3, [r7, #24]
   107d2:	429a      	cmp	r2, r3
   107d4:	d902      	bls.n	107dc <mp_obj_int_formatted+0x10c>
   107d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   107d8:	2b00      	cmp	r3, #0
   107da:	d1be      	bne.n	1075a <mp_obj_int_formatted+0x8a>
    }
    if (prefix) {
   107dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   107de:	2b00      	cmp	r3, #0
   107e0:	d01b      	beq.n	1081a <mp_obj_int_formatted+0x14a>
        size_t prefix_len = strlen(prefix);
   107e2:	6c78      	ldr	r0, [r7, #68]	; 0x44
   107e4:	f00b fca8 	bl	1c138 <strlen>
   107e8:	6178      	str	r0, [r7, #20]
        char *p = b - prefix_len;
   107ea:	697b      	ldr	r3, [r7, #20]
   107ec:	425b      	negs	r3, r3
   107ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   107f0:	4413      	add	r3, r2
   107f2:	623b      	str	r3, [r7, #32]
        if (p > str) {
   107f4:	6a3a      	ldr	r2, [r7, #32]
   107f6:	69bb      	ldr	r3, [r7, #24]
   107f8:	429a      	cmp	r2, r3
   107fa:	d90e      	bls.n	1081a <mp_obj_int_formatted+0x14a>
            b = p;
   107fc:	6a3b      	ldr	r3, [r7, #32]
   107fe:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (*prefix) {
   10800:	e007      	b.n	10812 <mp_obj_int_formatted+0x142>
                *p++ = *prefix++;
   10802:	6a3b      	ldr	r3, [r7, #32]
   10804:	1c5a      	adds	r2, r3, #1
   10806:	623a      	str	r2, [r7, #32]
   10808:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1080a:	1c51      	adds	r1, r2, #1
   1080c:	6479      	str	r1, [r7, #68]	; 0x44
   1080e:	7812      	ldrb	r2, [r2, #0]
   10810:	701a      	strb	r2, [r3, #0]
            while (*prefix) {
   10812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10814:	781b      	ldrb	r3, [r3, #0]
   10816:	2b00      	cmp	r3, #0
   10818:	d1f3      	bne.n	10802 <mp_obj_int_formatted+0x132>
            }
        }
    }
    if (sign && b > str) {
   1081a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   1081e:	2b00      	cmp	r3, #0
   10820:	d00a      	beq.n	10838 <mp_obj_int_formatted+0x168>
   10822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10824:	69bb      	ldr	r3, [r7, #24]
   10826:	429a      	cmp	r2, r3
   10828:	d906      	bls.n	10838 <mp_obj_int_formatted+0x168>
        *(--b) = sign;
   1082a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1082c:	3b01      	subs	r3, #1
   1082e:	62fb      	str	r3, [r7, #44]	; 0x2c
   10830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10832:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
   10836:	701a      	strb	r2, [r3, #0]
    }
    *fmt_size = *buf + needed_size - b - 1;
   10838:	68fb      	ldr	r3, [r7, #12]
   1083a:	681a      	ldr	r2, [r3, #0]
   1083c:	69fb      	ldr	r3, [r7, #28]
   1083e:	4413      	add	r3, r2
   10840:	461a      	mov	r2, r3
   10842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10844:	1ad3      	subs	r3, r2, r3
   10846:	3b01      	subs	r3, #1
   10848:	461a      	mov	r2, r3
   1084a:	687b      	ldr	r3, [r7, #4]
   1084c:	601a      	str	r2, [r3, #0]

    return b;
   1084e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   10850:	4618      	mov	r0, r3
   10852:	3738      	adds	r7, #56	; 0x38
   10854:	46bd      	mov	sp, r7
   10856:	bd80      	pop	{r7, pc}

00010858 <mp_obj_int_sign>:

#if MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_NONE

int mp_obj_int_sign(mp_obj_t self_in) {
   10858:	b580      	push	{r7, lr}
   1085a:	b084      	sub	sp, #16
   1085c:	af00      	add	r7, sp, #0
   1085e:	6078      	str	r0, [r7, #4]
    mp_int_t val = mp_obj_get_int(self_in);
   10860:	6878      	ldr	r0, [r7, #4]
   10862:	f7fd f9b5 	bl	dbd0 <mp_obj_get_int>
   10866:	60f8      	str	r0, [r7, #12]
    if (val < 0) {
   10868:	68fb      	ldr	r3, [r7, #12]
   1086a:	2b00      	cmp	r3, #0
   1086c:	da02      	bge.n	10874 <mp_obj_int_sign+0x1c>
        return -1;
   1086e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10872:	e005      	b.n	10880 <mp_obj_int_sign+0x28>
    } else if (val > 0) {
   10874:	68fb      	ldr	r3, [r7, #12]
   10876:	2b00      	cmp	r3, #0
   10878:	dd01      	ble.n	1087e <mp_obj_int_sign+0x26>
        return 1;
   1087a:	2301      	movs	r3, #1
   1087c:	e000      	b.n	10880 <mp_obj_int_sign+0x28>
    } else {
        return 0;
   1087e:	2300      	movs	r3, #0
    }
}
   10880:	4618      	mov	r0, r3
   10882:	3710      	adds	r7, #16
   10884:	46bd      	mov	sp, r7
   10886:	bd80      	pop	{r7, pc}

00010888 <mp_obj_int_unary_op>:

// This is called for operations on SMALL_INT that are not handled by mp_unary_op
mp_obj_t mp_obj_int_unary_op(mp_unary_op_t op, mp_obj_t o_in) {
   10888:	b480      	push	{r7}
   1088a:	b083      	sub	sp, #12
   1088c:	af00      	add	r7, sp, #0
   1088e:	6078      	str	r0, [r7, #4]
   10890:	6039      	str	r1, [r7, #0]
    return MP_OBJ_NULL; // op not supported
   10892:	2300      	movs	r3, #0
}
   10894:	4618      	mov	r0, r3
   10896:	370c      	adds	r7, #12
   10898:	46bd      	mov	sp, r7
   1089a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1089e:	4770      	bx	lr

000108a0 <mp_obj_int_binary_op>:

// This is called for operations on SMALL_INT that are not handled by mp_binary_op
mp_obj_t mp_obj_int_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   108a0:	b580      	push	{r7, lr}
   108a2:	b084      	sub	sp, #16
   108a4:	af00      	add	r7, sp, #0
   108a6:	60f8      	str	r0, [r7, #12]
   108a8:	60b9      	str	r1, [r7, #8]
   108aa:	607a      	str	r2, [r7, #4]
    return mp_obj_int_binary_op_extra_cases(op, lhs_in, rhs_in);
   108ac:	687a      	ldr	r2, [r7, #4]
   108ae:	68b9      	ldr	r1, [r7, #8]
   108b0:	68f8      	ldr	r0, [r7, #12]
   108b2:	f000 f87f 	bl	109b4 <mp_obj_int_binary_op_extra_cases>
   108b6:	4603      	mov	r3, r0
}
   108b8:	4618      	mov	r0, r3
   108ba:	3710      	adds	r7, #16
   108bc:	46bd      	mov	sp, r7
   108be:	bd80      	pop	{r7, pc}

000108c0 <mp_obj_new_int_from_str_len>:

// This is called only with strings whose value doesn't fit in SMALL_INT
mp_obj_t mp_obj_new_int_from_str_len(const char **str, size_t len, bool neg, unsigned int base) {
   108c0:	b580      	push	{r7, lr}
   108c2:	b084      	sub	sp, #16
   108c4:	af00      	add	r7, sp, #0
   108c6:	60f8      	str	r0, [r7, #12]
   108c8:	60b9      	str	r1, [r7, #8]
   108ca:	603b      	str	r3, [r7, #0]
   108cc:	4613      	mov	r3, r2
   108ce:	71fb      	strb	r3, [r7, #7]
    mp_raise_msg(&mp_type_OverflowError, "long int not supported in this build");
   108d0:	4901      	ldr	r1, [pc, #4]	; (108d8 <mp_obj_new_int_from_str_len+0x18>)
   108d2:	4802      	ldr	r0, [pc, #8]	; (108dc <mp_obj_new_int_from_str_len+0x1c>)
   108d4:	f7fc fb62 	bl	cf9c <mp_raise_msg>
   108d8:	00020f14 	.word	0x00020f14
   108dc:	000203a4 	.word	0x000203a4

000108e0 <mp_obj_new_int_from_ll>:
    return mp_const_none;
}

// This is called when an integer larger than a SMALL_INT is needed (although val might still fit in a SMALL_INT)
mp_obj_t mp_obj_new_int_from_ll(long long val) {
   108e0:	b580      	push	{r7, lr}
   108e2:	b082      	sub	sp, #8
   108e4:	af00      	add	r7, sp, #0
   108e6:	e9c7 0100 	strd	r0, r1, [r7]
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   108ea:	4902      	ldr	r1, [pc, #8]	; (108f4 <mp_obj_new_int_from_ll+0x14>)
   108ec:	4802      	ldr	r0, [pc, #8]	; (108f8 <mp_obj_new_int_from_ll+0x18>)
   108ee:	f7fc fb55 	bl	cf9c <mp_raise_msg>
   108f2:	bf00      	nop
   108f4:	00020f3c 	.word	0x00020f3c
   108f8:	000203a4 	.word	0x000203a4

000108fc <mp_obj_new_int_from_ull>:
    return mp_const_none;
}

// This is called when an integer larger than a SMALL_INT is needed (although val might still fit in a SMALL_INT)
mp_obj_t mp_obj_new_int_from_ull(unsigned long long val) {
   108fc:	b580      	push	{r7, lr}
   108fe:	b082      	sub	sp, #8
   10900:	af00      	add	r7, sp, #0
   10902:	e9c7 0100 	strd	r0, r1, [r7]
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   10906:	4902      	ldr	r1, [pc, #8]	; (10910 <mp_obj_new_int_from_ull+0x14>)
   10908:	4802      	ldr	r0, [pc, #8]	; (10914 <mp_obj_new_int_from_ull+0x18>)
   1090a:	f7fc fb47 	bl	cf9c <mp_raise_msg>
   1090e:	bf00      	nop
   10910:	00020f3c 	.word	0x00020f3c
   10914:	000203a4 	.word	0x000203a4

00010918 <mp_obj_new_int_from_uint>:
    return mp_const_none;
}

mp_obj_t mp_obj_new_int_from_uint(mp_uint_t value) {
   10918:	b580      	push	{r7, lr}
   1091a:	b082      	sub	sp, #8
   1091c:	af00      	add	r7, sp, #0
   1091e:	6078      	str	r0, [r7, #4]
    // SMALL_INT accepts only signed numbers, so make sure the input
    // value fits completely in the small-int positive range.
    if ((value & ~MP_SMALL_INT_POSITIVE_MASK) == 0) {
   10920:	687b      	ldr	r3, [r7, #4]
   10922:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
   10926:	2b00      	cmp	r3, #0
   10928:	d104      	bne.n	10934 <mp_obj_new_int_from_uint+0x1c>
        return MP_OBJ_NEW_SMALL_INT(value);
   1092a:	687b      	ldr	r3, [r7, #4]
   1092c:	005b      	lsls	r3, r3, #1
   1092e:	f043 0301 	orr.w	r3, r3, #1
   10932:	e003      	b.n	1093c <mp_obj_new_int_from_uint+0x24>
    }
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   10934:	4903      	ldr	r1, [pc, #12]	; (10944 <mp_obj_new_int_from_uint+0x2c>)
   10936:	4804      	ldr	r0, [pc, #16]	; (10948 <mp_obj_new_int_from_uint+0x30>)
   10938:	f7fc fb30 	bl	cf9c <mp_raise_msg>
    return mp_const_none;
}
   1093c:	4618      	mov	r0, r3
   1093e:	3708      	adds	r7, #8
   10940:	46bd      	mov	sp, r7
   10942:	bd80      	pop	{r7, pc}
   10944:	00020f3c 	.word	0x00020f3c
   10948:	000203a4 	.word	0x000203a4

0001094c <mp_obj_new_int>:

mp_obj_t mp_obj_new_int(mp_int_t value) {
   1094c:	b580      	push	{r7, lr}
   1094e:	b082      	sub	sp, #8
   10950:	af00      	add	r7, sp, #0
   10952:	6078      	str	r0, [r7, #4]
    if (MP_SMALL_INT_FITS(value)) {
   10954:	687b      	ldr	r3, [r7, #4]
   10956:	005a      	lsls	r2, r3, #1
   10958:	687b      	ldr	r3, [r7, #4]
   1095a:	4053      	eors	r3, r2
   1095c:	2b00      	cmp	r3, #0
   1095e:	db04      	blt.n	1096a <mp_obj_new_int+0x1e>
        return MP_OBJ_NEW_SMALL_INT(value);
   10960:	687b      	ldr	r3, [r7, #4]
   10962:	005b      	lsls	r3, r3, #1
   10964:	f043 0301 	orr.w	r3, r3, #1
   10968:	e003      	b.n	10972 <mp_obj_new_int+0x26>
    }
    mp_raise_msg(&mp_type_OverflowError, "small int overflow");
   1096a:	4904      	ldr	r1, [pc, #16]	; (1097c <mp_obj_new_int+0x30>)
   1096c:	4804      	ldr	r0, [pc, #16]	; (10980 <mp_obj_new_int+0x34>)
   1096e:	f7fc fb15 	bl	cf9c <mp_raise_msg>
    return mp_const_none;
}
   10972:	4618      	mov	r0, r3
   10974:	3708      	adds	r7, #8
   10976:	46bd      	mov	sp, r7
   10978:	bd80      	pop	{r7, pc}
   1097a:	bf00      	nop
   1097c:	00020f3c 	.word	0x00020f3c
   10980:	000203a4 	.word	0x000203a4

00010984 <mp_obj_int_get_truncated>:

mp_int_t mp_obj_int_get_truncated(mp_const_obj_t self_in) {
   10984:	b480      	push	{r7}
   10986:	b083      	sub	sp, #12
   10988:	af00      	add	r7, sp, #0
   1098a:	6078      	str	r0, [r7, #4]
    return MP_OBJ_SMALL_INT_VALUE(self_in);
   1098c:	687b      	ldr	r3, [r7, #4]
   1098e:	105b      	asrs	r3, r3, #1
}
   10990:	4618      	mov	r0, r3
   10992:	370c      	adds	r7, #12
   10994:	46bd      	mov	sp, r7
   10996:	f85d 7b04 	ldr.w	r7, [sp], #4
   1099a:	4770      	bx	lr

0001099c <mp_obj_int_get_checked>:

mp_int_t mp_obj_int_get_checked(mp_const_obj_t self_in) {
   1099c:	b480      	push	{r7}
   1099e:	b083      	sub	sp, #12
   109a0:	af00      	add	r7, sp, #0
   109a2:	6078      	str	r0, [r7, #4]
    return MP_OBJ_SMALL_INT_VALUE(self_in);
   109a4:	687b      	ldr	r3, [r7, #4]
   109a6:	105b      	asrs	r3, r3, #1
}
   109a8:	4618      	mov	r0, r3
   109aa:	370c      	adds	r7, #12
   109ac:	46bd      	mov	sp, r7
   109ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   109b2:	4770      	bx	lr

000109b4 <mp_obj_int_binary_op_extra_cases>:

#endif // MICROPY_LONGINT_IMPL == MICROPY_LONGINT_IMPL_NONE

// This dispatcher function is expected to be independent of the implementation of long int
// It handles the extra cases for integer-like arithmetic
mp_obj_t mp_obj_int_binary_op_extra_cases(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   109b4:	b580      	push	{r7, lr}
   109b6:	b084      	sub	sp, #16
   109b8:	af00      	add	r7, sp, #0
   109ba:	60f8      	str	r0, [r7, #12]
   109bc:	60b9      	str	r1, [r7, #8]
   109be:	607a      	str	r2, [r7, #4]
    if (rhs_in == mp_const_false) {
   109c0:	687b      	ldr	r3, [r7, #4]
   109c2:	4a26      	ldr	r2, [pc, #152]	; (10a5c <mp_obj_int_binary_op_extra_cases+0xa8>)
   109c4:	4293      	cmp	r3, r2
   109c6:	d106      	bne.n	109d6 <mp_obj_int_binary_op_extra_cases+0x22>
        // false acts as 0
        return mp_binary_op(op, lhs_in, MP_OBJ_NEW_SMALL_INT(0));
   109c8:	2201      	movs	r2, #1
   109ca:	68b9      	ldr	r1, [r7, #8]
   109cc:	68f8      	ldr	r0, [r7, #12]
   109ce:	f7fa ffaf 	bl	b930 <mp_binary_op>
   109d2:	4603      	mov	r3, r0
   109d4:	e03d      	b.n	10a52 <mp_obj_int_binary_op_extra_cases+0x9e>
    } else if (rhs_in == mp_const_true) {
   109d6:	687b      	ldr	r3, [r7, #4]
   109d8:	4a21      	ldr	r2, [pc, #132]	; (10a60 <mp_obj_int_binary_op_extra_cases+0xac>)
   109da:	4293      	cmp	r3, r2
   109dc:	d106      	bne.n	109ec <mp_obj_int_binary_op_extra_cases+0x38>
        // true acts as 0
        return mp_binary_op(op, lhs_in, MP_OBJ_NEW_SMALL_INT(1));
   109de:	2203      	movs	r2, #3
   109e0:	68b9      	ldr	r1, [r7, #8]
   109e2:	68f8      	ldr	r0, [r7, #12]
   109e4:	f7fa ffa4 	bl	b930 <mp_binary_op>
   109e8:	4603      	mov	r3, r0
   109ea:	e032      	b.n	10a52 <mp_obj_int_binary_op_extra_cases+0x9e>
    } else if (op == MP_BINARY_OP_MULTIPLY) {
   109ec:	68fb      	ldr	r3, [r7, #12]
   109ee:	2b1c      	cmp	r3, #28
   109f0:	d12e      	bne.n	10a50 <mp_obj_int_binary_op_extra_cases+0x9c>
        if (MP_OBJ_IS_STR_OR_BYTES(rhs_in) || MP_OBJ_IS_TYPE(rhs_in, &mp_type_tuple) || MP_OBJ_IS_TYPE(rhs_in, &mp_type_list)) {
   109f2:	6878      	ldr	r0, [r7, #4]
   109f4:	f7ff fd52 	bl	1049c <MP_OBJ_IS_QSTR>
   109f8:	4603      	mov	r3, r0
   109fa:	2b00      	cmp	r3, #0
   109fc:	d121      	bne.n	10a42 <mp_obj_int_binary_op_extra_cases+0x8e>
   109fe:	6878      	ldr	r0, [r7, #4]
   10a00:	f7ff fd5e 	bl	104c0 <MP_OBJ_IS_OBJ>
   10a04:	4603      	mov	r3, r0
   10a06:	2b00      	cmp	r3, #0
   10a08:	d005      	beq.n	10a16 <mp_obj_int_binary_op_extra_cases+0x62>
   10a0a:	687b      	ldr	r3, [r7, #4]
   10a0c:	681b      	ldr	r3, [r3, #0]
   10a0e:	699b      	ldr	r3, [r3, #24]
   10a10:	4a14      	ldr	r2, [pc, #80]	; (10a64 <mp_obj_int_binary_op_extra_cases+0xb0>)
   10a12:	4293      	cmp	r3, r2
   10a14:	d015      	beq.n	10a42 <mp_obj_int_binary_op_extra_cases+0x8e>
   10a16:	6878      	ldr	r0, [r7, #4]
   10a18:	f7ff fd52 	bl	104c0 <MP_OBJ_IS_OBJ>
   10a1c:	4603      	mov	r3, r0
   10a1e:	2b00      	cmp	r3, #0
   10a20:	d004      	beq.n	10a2c <mp_obj_int_binary_op_extra_cases+0x78>
   10a22:	687b      	ldr	r3, [r7, #4]
   10a24:	681b      	ldr	r3, [r3, #0]
   10a26:	4a10      	ldr	r2, [pc, #64]	; (10a68 <mp_obj_int_binary_op_extra_cases+0xb4>)
   10a28:	4293      	cmp	r3, r2
   10a2a:	d00a      	beq.n	10a42 <mp_obj_int_binary_op_extra_cases+0x8e>
   10a2c:	6878      	ldr	r0, [r7, #4]
   10a2e:	f7ff fd47 	bl	104c0 <MP_OBJ_IS_OBJ>
   10a32:	4603      	mov	r3, r0
   10a34:	2b00      	cmp	r3, #0
   10a36:	d00b      	beq.n	10a50 <mp_obj_int_binary_op_extra_cases+0x9c>
   10a38:	687b      	ldr	r3, [r7, #4]
   10a3a:	681b      	ldr	r3, [r3, #0]
   10a3c:	4a0b      	ldr	r2, [pc, #44]	; (10a6c <mp_obj_int_binary_op_extra_cases+0xb8>)
   10a3e:	4293      	cmp	r3, r2
   10a40:	d106      	bne.n	10a50 <mp_obj_int_binary_op_extra_cases+0x9c>
            // multiply is commutative for these types, so delegate to them
            return mp_binary_op(op, rhs_in, lhs_in);
   10a42:	68ba      	ldr	r2, [r7, #8]
   10a44:	6879      	ldr	r1, [r7, #4]
   10a46:	68f8      	ldr	r0, [r7, #12]
   10a48:	f7fa ff72 	bl	b930 <mp_binary_op>
   10a4c:	4603      	mov	r3, r0
   10a4e:	e000      	b.n	10a52 <mp_obj_int_binary_op_extra_cases+0x9e>
        }
    }
    return MP_OBJ_NULL; // op not supported
   10a50:	2300      	movs	r3, #0
}
   10a52:	4618      	mov	r0, r3
   10a54:	3710      	adds	r7, #16
   10a56:	46bd      	mov	sp, r7
   10a58:	bd80      	pop	{r7, pc}
   10a5a:	bf00      	nop
   10a5c:	0001fc3c 	.word	0x0001fc3c
   10a60:	0001fc44 	.word	0x0001fc44
   10a64:	00012895 	.word	0x00012895
   10a68:	00021e68 	.word	0x00021e68
   10a6c:	000211fc 	.word	0x000211fc

00010a70 <int_from_bytes>:

// this is a classmethod
STATIC mp_obj_t int_from_bytes(size_t n_args, const mp_obj_t *args) {
   10a70:	b580      	push	{r7, lr}
   10a72:	b08a      	sub	sp, #40	; 0x28
   10a74:	af00      	add	r7, sp, #0
   10a76:	6078      	str	r0, [r7, #4]
   10a78:	6039      	str	r1, [r7, #0]
    // TODO: Support signed param (assumes signed=False at the moment)
    (void)n_args;

    // get the buffer info
    mp_buffer_info_t bufinfo;
    mp_get_buffer_raise(args[1], &bufinfo, MP_BUFFER_READ);
   10a7a:	683b      	ldr	r3, [r7, #0]
   10a7c:	3304      	adds	r3, #4
   10a7e:	681b      	ldr	r3, [r3, #0]
   10a80:	f107 010c 	add.w	r1, r7, #12
   10a84:	2201      	movs	r2, #1
   10a86:	4618      	mov	r0, r3
   10a88:	f7fd fad6 	bl	e038 <mp_get_buffer_raise>

    const byte* buf = (const byte*)bufinfo.buf;
   10a8c:	68fb      	ldr	r3, [r7, #12]
   10a8e:	627b      	str	r3, [r7, #36]	; 0x24
    int delta = 1;
   10a90:	2301      	movs	r3, #1
   10a92:	623b      	str	r3, [r7, #32]
    if (args[2] == MP_OBJ_NEW_QSTR(MP_QSTR_little)) {
   10a94:	683b      	ldr	r3, [r7, #0]
   10a96:	3308      	adds	r3, #8
   10a98:	681b      	ldr	r3, [r3, #0]
   10a9a:	f240 2246 	movw	r2, #582	; 0x246
   10a9e:	4293      	cmp	r3, r2
   10aa0:	d107      	bne.n	10ab2 <int_from_bytes+0x42>
        buf += bufinfo.len - 1;
   10aa2:	693b      	ldr	r3, [r7, #16]
   10aa4:	3b01      	subs	r3, #1
   10aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10aa8:	4413      	add	r3, r2
   10aaa:	627b      	str	r3, [r7, #36]	; 0x24
        delta = -1;
   10aac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10ab0:	623b      	str	r3, [r7, #32]
    }

    mp_uint_t value = 0;
   10ab2:	2300      	movs	r3, #0
   10ab4:	61fb      	str	r3, [r7, #28]
    size_t len = bufinfo.len;
   10ab6:	693b      	ldr	r3, [r7, #16]
   10ab8:	61bb      	str	r3, [r7, #24]
    for (; len--; buf += delta) {
   10aba:	e009      	b.n	10ad0 <int_from_bytes+0x60>
        if (value > (MP_SMALL_INT_MAX >> 8)) {
            // Result will overflow a small-int so construct a big-int
            return mp_obj_int_from_bytes_impl(args[2] != MP_OBJ_NEW_QSTR(MP_QSTR_little), bufinfo.len, bufinfo.buf);
        }
        #endif
        value = (value << 8) | *buf;
   10abc:	69fb      	ldr	r3, [r7, #28]
   10abe:	021b      	lsls	r3, r3, #8
   10ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10ac2:	7812      	ldrb	r2, [r2, #0]
   10ac4:	4313      	orrs	r3, r2
   10ac6:	61fb      	str	r3, [r7, #28]
    for (; len--; buf += delta) {
   10ac8:	6a3b      	ldr	r3, [r7, #32]
   10aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10acc:	4413      	add	r3, r2
   10ace:	627b      	str	r3, [r7, #36]	; 0x24
   10ad0:	69bb      	ldr	r3, [r7, #24]
   10ad2:	1e5a      	subs	r2, r3, #1
   10ad4:	61ba      	str	r2, [r7, #24]
   10ad6:	2b00      	cmp	r3, #0
   10ad8:	d1f0      	bne.n	10abc <int_from_bytes+0x4c>
    }
    return mp_obj_new_int_from_uint(value);
   10ada:	69f8      	ldr	r0, [r7, #28]
   10adc:	f7ff ff1c 	bl	10918 <mp_obj_new_int_from_uint>
   10ae0:	4603      	mov	r3, r0
}
   10ae2:	4618      	mov	r0, r3
   10ae4:	3728      	adds	r7, #40	; 0x28
   10ae6:	46bd      	mov	sp, r7
   10ae8:	bd80      	pop	{r7, pc}
   10aea:	bf00      	nop

00010aec <int_to_bytes>:

STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(int_from_bytes_fun_obj, 3, 4, int_from_bytes);
STATIC MP_DEFINE_CONST_CLASSMETHOD_OBJ(int_from_bytes_obj, MP_ROM_PTR(&int_from_bytes_fun_obj));

STATIC mp_obj_t int_to_bytes(size_t n_args, const mp_obj_t *args) {
   10aec:	b580      	push	{r7, lr}
   10aee:	b08c      	sub	sp, #48	; 0x30
   10af0:	af00      	add	r7, sp, #0
   10af2:	6078      	str	r0, [r7, #4]
   10af4:	6039      	str	r1, [r7, #0]
    // TODO: Support signed param (assumes signed=False)
    (void)n_args;

    mp_int_t len = mp_obj_get_int(args[1]);
   10af6:	683b      	ldr	r3, [r7, #0]
   10af8:	3304      	adds	r3, #4
   10afa:	681b      	ldr	r3, [r3, #0]
   10afc:	4618      	mov	r0, r3
   10afe:	f7fd f867 	bl	dbd0 <mp_obj_get_int>
   10b02:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (len < 0) {
   10b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10b06:	2b00      	cmp	r3, #0
   10b08:	da02      	bge.n	10b10 <int_to_bytes+0x24>
        mp_raise_ValueError(NULL);
   10b0a:	2000      	movs	r0, #0
   10b0c:	f7fc fa5e 	bl	cfcc <mp_raise_ValueError>
    }
    bool big_endian = args[2] != MP_OBJ_NEW_QSTR(MP_QSTR_little);
   10b10:	683b      	ldr	r3, [r7, #0]
   10b12:	3308      	adds	r3, #8
   10b14:	681b      	ldr	r3, [r3, #0]
   10b16:	f240 2246 	movw	r2, #582	; 0x246
   10b1a:	4293      	cmp	r3, r2
   10b1c:	bf14      	ite	ne
   10b1e:	2301      	movne	r3, #1
   10b20:	2300      	moveq	r3, #0
   10b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    vstr_t vstr;
    vstr_init_len(&vstr, len);
   10b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10b28:	f107 030c 	add.w	r3, r7, #12
   10b2c:	4611      	mov	r1, r2
   10b2e:	4618      	mov	r0, r3
   10b30:	f7f0 fc08 	bl	1344 <vstr_init_len>
    byte *data = (byte*)vstr.buf;
   10b34:	697b      	ldr	r3, [r7, #20]
   10b36:	627b      	str	r3, [r7, #36]	; 0x24
    memset(data, 0, len);
   10b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10b3a:	461a      	mov	r2, r3
   10b3c:	2100      	movs	r1, #0
   10b3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
   10b40:	f00b fa5c 	bl	1bffc <memset>
    if (!MP_OBJ_IS_SMALL_INT(args[0])) {
        mp_obj_int_to_bytes_impl(args[0], big_endian, len, data);
    } else
    #endif
    {
        mp_int_t val = MP_OBJ_SMALL_INT_VALUE(args[0]);
   10b44:	683b      	ldr	r3, [r7, #0]
   10b46:	681b      	ldr	r3, [r3, #0]
   10b48:	105b      	asrs	r3, r3, #1
   10b4a:	623b      	str	r3, [r7, #32]
        size_t l = MIN((size_t)len, sizeof(val));
   10b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10b4e:	2b04      	cmp	r3, #4
   10b50:	bf28      	it	cs
   10b52:	2304      	movcs	r3, #4
   10b54:	61fb      	str	r3, [r7, #28]
        mp_binary_set_int(l, big_endian, data + (big_endian ? (len - l) : 0), val);
   10b56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   10b5a:	2b00      	cmp	r3, #0
   10b5c:	d003      	beq.n	10b66 <int_to_bytes+0x7a>
   10b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10b60:	69fb      	ldr	r3, [r7, #28]
   10b62:	1ad3      	subs	r3, r2, r3
   10b64:	e000      	b.n	10b68 <int_to_bytes+0x7c>
   10b66:	2300      	movs	r3, #0
   10b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10b6a:	441a      	add	r2, r3
   10b6c:	6a3b      	ldr	r3, [r7, #32]
   10b6e:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
   10b72:	69f8      	ldr	r0, [r7, #28]
   10b74:	f007 fb90 	bl	18298 <mp_binary_set_int>
    }

    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   10b78:	f107 030c 	add.w	r3, r7, #12
   10b7c:	4619      	mov	r1, r3
   10b7e:	4804      	ldr	r0, [pc, #16]	; (10b90 <int_to_bytes+0xa4>)
   10b80:	f004 fbce 	bl	15320 <mp_obj_new_str_from_vstr>
   10b84:	4603      	mov	r3, r0
}
   10b86:	4618      	mov	r0, r3
   10b88:	3730      	adds	r7, #48	; 0x30
   10b8a:	46bd      	mov	sp, r7
   10b8c:	bd80      	pop	{r7, pc}
   10b8e:	bf00      	nop
   10b90:	00021c20 	.word	0x00021c20

00010b94 <MP_OBJ_IS_OBJ>:
   10b94:	b480      	push	{r7}
   10b96:	b083      	sub	sp, #12
   10b98:	af00      	add	r7, sp, #0
   10b9a:	6078      	str	r0, [r7, #4]
   10b9c:	687b      	ldr	r3, [r7, #4]
   10b9e:	f003 0303 	and.w	r3, r3, #3
   10ba2:	2b00      	cmp	r3, #0
   10ba4:	bf0c      	ite	eq
   10ba6:	2301      	moveq	r3, #1
   10ba8:	2300      	movne	r3, #0
   10baa:	b2db      	uxtb	r3, r3
   10bac:	4618      	mov	r0, r3
   10bae:	370c      	adds	r7, #12
   10bb0:	46bd      	mov	sp, r7
   10bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
   10bb6:	4770      	bx	lr

00010bb8 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   10bb8:	b480      	push	{r7}
   10bba:	b083      	sub	sp, #12
   10bbc:	af00      	add	r7, sp, #0
   10bbe:	6078      	str	r0, [r7, #4]
   10bc0:	687b      	ldr	r3, [r7, #4]
   10bc2:	2b00      	cmp	r3, #0
   10bc4:	d001      	beq.n	10bca <mp_obj_new_bool+0x12>
   10bc6:	4b04      	ldr	r3, [pc, #16]	; (10bd8 <mp_obj_new_bool+0x20>)
   10bc8:	e000      	b.n	10bcc <mp_obj_new_bool+0x14>
   10bca:	4b04      	ldr	r3, [pc, #16]	; (10bdc <mp_obj_new_bool+0x24>)
   10bcc:	4618      	mov	r0, r3
   10bce:	370c      	adds	r7, #12
   10bd0:	46bd      	mov	sp, r7
   10bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
   10bd6:	4770      	bx	lr
   10bd8:	0001fc44 	.word	0x0001fc44
   10bdc:	0001fc3c 	.word	0x0001fc3c

00010be0 <list_print>:
#define LIST_MIN_ALLOC 4

/******************************************************************************/
/* list                                                                       */

STATIC void list_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
   10be0:	b580      	push	{r7, lr}
   10be2:	b086      	sub	sp, #24
   10be4:	af00      	add	r7, sp, #0
   10be6:	60f8      	str	r0, [r7, #12]
   10be8:	60b9      	str	r1, [r7, #8]
   10bea:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *o = MP_OBJ_TO_PTR(o_in);
   10bec:	68bb      	ldr	r3, [r7, #8]
   10bee:	613b      	str	r3, [r7, #16]
    if (!(MICROPY_PY_UJSON && kind == PRINT_JSON)) {
        kind = PRINT_REPR;
   10bf0:	2301      	movs	r3, #1
   10bf2:	607b      	str	r3, [r7, #4]
    }
    mp_print_str(print, "[");
   10bf4:	4914      	ldr	r1, [pc, #80]	; (10c48 <list_print+0x68>)
   10bf6:	68f8      	ldr	r0, [r7, #12]
   10bf8:	f7f0 fe40 	bl	187c <mp_print_str>
    for (size_t i = 0; i < o->len; i++) {
   10bfc:	2300      	movs	r3, #0
   10bfe:	617b      	str	r3, [r7, #20]
   10c00:	e014      	b.n	10c2c <list_print+0x4c>
        if (i > 0) {
   10c02:	697b      	ldr	r3, [r7, #20]
   10c04:	2b00      	cmp	r3, #0
   10c06:	d003      	beq.n	10c10 <list_print+0x30>
            mp_print_str(print, ", ");
   10c08:	4910      	ldr	r1, [pc, #64]	; (10c4c <list_print+0x6c>)
   10c0a:	68f8      	ldr	r0, [r7, #12]
   10c0c:	f7f0 fe36 	bl	187c <mp_print_str>
        }
        mp_obj_print_helper(print, o->items[i], kind);
   10c10:	693b      	ldr	r3, [r7, #16]
   10c12:	68da      	ldr	r2, [r3, #12]
   10c14:	697b      	ldr	r3, [r7, #20]
   10c16:	009b      	lsls	r3, r3, #2
   10c18:	4413      	add	r3, r2
   10c1a:	681b      	ldr	r3, [r3, #0]
   10c1c:	687a      	ldr	r2, [r7, #4]
   10c1e:	4619      	mov	r1, r3
   10c20:	68f8      	ldr	r0, [r7, #12]
   10c22:	f7fc fe29 	bl	d878 <mp_obj_print_helper>
    for (size_t i = 0; i < o->len; i++) {
   10c26:	697b      	ldr	r3, [r7, #20]
   10c28:	3301      	adds	r3, #1
   10c2a:	617b      	str	r3, [r7, #20]
   10c2c:	693b      	ldr	r3, [r7, #16]
   10c2e:	689a      	ldr	r2, [r3, #8]
   10c30:	697b      	ldr	r3, [r7, #20]
   10c32:	429a      	cmp	r2, r3
   10c34:	d8e5      	bhi.n	10c02 <list_print+0x22>
    }
    mp_print_str(print, "]");
   10c36:	4906      	ldr	r1, [pc, #24]	; (10c50 <list_print+0x70>)
   10c38:	68f8      	ldr	r0, [r7, #12]
   10c3a:	f7f0 fe1f 	bl	187c <mp_print_str>
}
   10c3e:	bf00      	nop
   10c40:	3718      	adds	r7, #24
   10c42:	46bd      	mov	sp, r7
   10c44:	bd80      	pop	{r7, pc}
   10c46:	bf00      	nop
   10c48:	00020fe0 	.word	0x00020fe0
   10c4c:	00020fe4 	.word	0x00020fe4
   10c50:	00020fe8 	.word	0x00020fe8

00010c54 <list_extend_from_iter>:

STATIC mp_obj_t list_extend_from_iter(mp_obj_t list, mp_obj_t iterable) {
   10c54:	b580      	push	{r7, lr}
   10c56:	b084      	sub	sp, #16
   10c58:	af00      	add	r7, sp, #0
   10c5a:	6078      	str	r0, [r7, #4]
   10c5c:	6039      	str	r1, [r7, #0]
    mp_obj_t iter = mp_getiter(iterable, NULL);
   10c5e:	2100      	movs	r1, #0
   10c60:	6838      	ldr	r0, [r7, #0]
   10c62:	f7fb fe6d 	bl	c940 <mp_getiter>
   10c66:	60f8      	str	r0, [r7, #12]
    mp_obj_t item;
    while ((item = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
   10c68:	e003      	b.n	10c72 <list_extend_from_iter+0x1e>
        mp_obj_list_append(list, item);
   10c6a:	68b9      	ldr	r1, [r7, #8]
   10c6c:	6878      	ldr	r0, [r7, #4]
   10c6e:	f000 f985 	bl	10f7c <mp_obj_list_append>
    while ((item = mp_iternext(iter)) != MP_OBJ_STOP_ITERATION) {
   10c72:	68f8      	ldr	r0, [r7, #12]
   10c74:	f7fb fee6 	bl	ca44 <mp_iternext>
   10c78:	60b8      	str	r0, [r7, #8]
   10c7a:	68bb      	ldr	r3, [r7, #8]
   10c7c:	2b04      	cmp	r3, #4
   10c7e:	d1f4      	bne.n	10c6a <list_extend_from_iter+0x16>
    }
    return list;
   10c80:	687b      	ldr	r3, [r7, #4]
}
   10c82:	4618      	mov	r0, r3
   10c84:	3710      	adds	r7, #16
   10c86:	46bd      	mov	sp, r7
   10c88:	bd80      	pop	{r7, pc}
   10c8a:	bf00      	nop

00010c8c <list_make_new>:

STATIC mp_obj_t list_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   10c8c:	b580      	push	{r7, lr}
   10c8e:	b088      	sub	sp, #32
   10c90:	af02      	add	r7, sp, #8
   10c92:	60f8      	str	r0, [r7, #12]
   10c94:	60b9      	str	r1, [r7, #8]
   10c96:	607a      	str	r2, [r7, #4]
   10c98:	603b      	str	r3, [r7, #0]
    (void)type_in;
    mp_arg_check_num(n_args, n_kw, 0, 1, false);
   10c9a:	2300      	movs	r3, #0
   10c9c:	9300      	str	r3, [sp, #0]
   10c9e:	2301      	movs	r3, #1
   10ca0:	2200      	movs	r2, #0
   10ca2:	6879      	ldr	r1, [r7, #4]
   10ca4:	68b8      	ldr	r0, [r7, #8]
   10ca6:	f7fc f9c1 	bl	d02c <mp_arg_check_num>

    switch (n_args) {
   10caa:	68bb      	ldr	r3, [r7, #8]
   10cac:	2b00      	cmp	r3, #0
   10cae:	d105      	bne.n	10cbc <list_make_new+0x30>
        case 0:
            // return a new, empty list
            return mp_obj_new_list(0, NULL);
   10cb0:	2100      	movs	r1, #0
   10cb2:	2000      	movs	r0, #0
   10cb4:	f000 fdf4 	bl	118a0 <mp_obj_new_list>
   10cb8:	4603      	mov	r3, r0
   10cba:	e00b      	b.n	10cd4 <list_make_new+0x48>

        case 1:
        default: {
            // make list from iterable
            // TODO: optimize list/tuple
            mp_obj_t list = mp_obj_new_list(0, NULL);
   10cbc:	2100      	movs	r1, #0
   10cbe:	2000      	movs	r0, #0
   10cc0:	f000 fdee 	bl	118a0 <mp_obj_new_list>
   10cc4:	6178      	str	r0, [r7, #20]
            return list_extend_from_iter(list, args[0]);
   10cc6:	683b      	ldr	r3, [r7, #0]
   10cc8:	681b      	ldr	r3, [r3, #0]
   10cca:	4619      	mov	r1, r3
   10ccc:	6978      	ldr	r0, [r7, #20]
   10cce:	f7ff ffc1 	bl	10c54 <list_extend_from_iter>
   10cd2:	4603      	mov	r3, r0
        }
    }
}
   10cd4:	4618      	mov	r0, r3
   10cd6:	3718      	adds	r7, #24
   10cd8:	46bd      	mov	sp, r7
   10cda:	bd80      	pop	{r7, pc}

00010cdc <list_unary_op>:

STATIC mp_obj_t list_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   10cdc:	b580      	push	{r7, lr}
   10cde:	b084      	sub	sp, #16
   10ce0:	af00      	add	r7, sp, #0
   10ce2:	6078      	str	r0, [r7, #4]
   10ce4:	6039      	str	r1, [r7, #0]
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   10ce6:	683b      	ldr	r3, [r7, #0]
   10ce8:	60fb      	str	r3, [r7, #12]
    switch (op) {
   10cea:	687b      	ldr	r3, [r7, #4]
   10cec:	2b04      	cmp	r3, #4
   10cee:	d002      	beq.n	10cf6 <list_unary_op+0x1a>
   10cf0:	2b05      	cmp	r3, #5
   10cf2:	d00c      	beq.n	10d0e <list_unary_op+0x32>
   10cf4:	e011      	b.n	10d1a <list_unary_op+0x3e>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->len != 0);
   10cf6:	68fb      	ldr	r3, [r7, #12]
   10cf8:	689b      	ldr	r3, [r3, #8]
   10cfa:	2b00      	cmp	r3, #0
   10cfc:	bf14      	ite	ne
   10cfe:	2301      	movne	r3, #1
   10d00:	2300      	moveq	r3, #0
   10d02:	b2db      	uxtb	r3, r3
   10d04:	4618      	mov	r0, r3
   10d06:	f7ff ff57 	bl	10bb8 <mp_obj_new_bool>
   10d0a:	4603      	mov	r3, r0
   10d0c:	e006      	b.n	10d1c <list_unary_op+0x40>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->len);
   10d0e:	68fb      	ldr	r3, [r7, #12]
   10d10:	689b      	ldr	r3, [r3, #8]
   10d12:	005b      	lsls	r3, r3, #1
   10d14:	f043 0301 	orr.w	r3, r3, #1
   10d18:	e000      	b.n	10d1c <list_unary_op+0x40>
        case MP_UNARY_OP_SIZEOF: {
            size_t sz = sizeof(*self) + sizeof(mp_obj_t) * self->alloc;
            return MP_OBJ_NEW_SMALL_INT(sz);
        }
        #endif
        default: return MP_OBJ_NULL; // op not supported
   10d1a:	2300      	movs	r3, #0
    }
}
   10d1c:	4618      	mov	r0, r3
   10d1e:	3710      	adds	r7, #16
   10d20:	46bd      	mov	sp, r7
   10d22:	bd80      	pop	{r7, pc}

00010d24 <list_binary_op>:

STATIC mp_obj_t list_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
   10d24:	b580      	push	{r7, lr}
   10d26:	b08e      	sub	sp, #56	; 0x38
   10d28:	af02      	add	r7, sp, #8
   10d2a:	60f8      	str	r0, [r7, #12]
   10d2c:	60b9      	str	r1, [r7, #8]
   10d2e:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *o = MP_OBJ_TO_PTR(lhs);
   10d30:	68bb      	ldr	r3, [r7, #8]
   10d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    switch (op) {
   10d34:	68fb      	ldr	r3, [r7, #12]
   10d36:	2b1c      	cmp	r3, #28
   10d38:	f200 80d0 	bhi.w	10edc <list_binary_op+0x1b8>
   10d3c:	a201      	add	r2, pc, #4	; (adr r2, 10d44 <list_binary_op+0x20>)
   10d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10d42:	bf00      	nop
   10d44:	00010e85 	.word	0x00010e85
   10d48:	00010e85 	.word	0x00010e85
   10d4c:	00010e85 	.word	0x00010e85
   10d50:	00010e85 	.word	0x00010e85
   10d54:	00010e85 	.word	0x00010e85
   10d58:	00010edd 	.word	0x00010edd
   10d5c:	00010edd 	.word	0x00010edd
   10d60:	00010edd 	.word	0x00010edd
   10d64:	00010edd 	.word	0x00010edd
   10d68:	00010edd 	.word	0x00010edd
   10d6c:	00010edd 	.word	0x00010edd
   10d70:	00010edd 	.word	0x00010edd
   10d74:	00010edd 	.word	0x00010edd
   10d78:	00010edd 	.word	0x00010edd
   10d7c:	00010e23 	.word	0x00010e23
   10d80:	00010edd 	.word	0x00010edd
   10d84:	00010edd 	.word	0x00010edd
   10d88:	00010edd 	.word	0x00010edd
   10d8c:	00010edd 	.word	0x00010edd
   10d90:	00010edd 	.word	0x00010edd
   10d94:	00010edd 	.word	0x00010edd
   10d98:	00010edd 	.word	0x00010edd
   10d9c:	00010edd 	.word	0x00010edd
   10da0:	00010edd 	.word	0x00010edd
   10da4:	00010edd 	.word	0x00010edd
   10da8:	00010edd 	.word	0x00010edd
   10dac:	00010db9 	.word	0x00010db9
   10db0:	00010edd 	.word	0x00010edd
   10db4:	00010e2f 	.word	0x00010e2f
        case MP_BINARY_OP_ADD: {
            if (!MP_OBJ_IS_TYPE(rhs, &mp_type_list)) {
   10db8:	6878      	ldr	r0, [r7, #4]
   10dba:	f7ff feeb 	bl	10b94 <MP_OBJ_IS_OBJ>
   10dbe:	4603      	mov	r3, r0
   10dc0:	f083 0301 	eor.w	r3, r3, #1
   10dc4:	b2db      	uxtb	r3, r3
   10dc6:	2b00      	cmp	r3, #0
   10dc8:	d104      	bne.n	10dd4 <list_binary_op+0xb0>
   10dca:	687b      	ldr	r3, [r7, #4]
   10dcc:	681b      	ldr	r3, [r3, #0]
   10dce:	4a46      	ldr	r2, [pc, #280]	; (10ee8 <list_binary_op+0x1c4>)
   10dd0:	4293      	cmp	r3, r2
   10dd2:	d001      	beq.n	10dd8 <list_binary_op+0xb4>
                return MP_OBJ_NULL; // op not supported
   10dd4:	2300      	movs	r3, #0
   10dd6:	e082      	b.n	10ede <list_binary_op+0x1ba>
            }
            mp_obj_list_t *p = MP_OBJ_TO_PTR(rhs);
   10dd8:	687b      	ldr	r3, [r7, #4]
   10dda:	62bb      	str	r3, [r7, #40]	; 0x28
            mp_obj_list_t *s = list_new(o->len + p->len);
   10ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10dde:	689a      	ldr	r2, [r3, #8]
   10de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10de2:	689b      	ldr	r3, [r3, #8]
   10de4:	4413      	add	r3, r2
   10de6:	4618      	mov	r0, r3
   10de8:	f000 fd48 	bl	1187c <list_new>
   10dec:	6278      	str	r0, [r7, #36]	; 0x24
            mp_seq_cat(s->items, o->items, o->len, p->items, p->len, mp_obj_t);
   10dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10df0:	68d8      	ldr	r0, [r3, #12]
   10df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10df4:	68d9      	ldr	r1, [r3, #12]
   10df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10df8:	689b      	ldr	r3, [r3, #8]
   10dfa:	009b      	lsls	r3, r3, #2
   10dfc:	461a      	mov	r2, r3
   10dfe:	f00b f861 	bl	1bec4 <memcpy>
   10e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10e04:	68da      	ldr	r2, [r3, #12]
   10e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10e08:	689b      	ldr	r3, [r3, #8]
   10e0a:	009b      	lsls	r3, r3, #2
   10e0c:	18d0      	adds	r0, r2, r3
   10e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10e10:	68d9      	ldr	r1, [r3, #12]
   10e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10e14:	689b      	ldr	r3, [r3, #8]
   10e16:	009b      	lsls	r3, r3, #2
   10e18:	461a      	mov	r2, r3
   10e1a:	f00b f853 	bl	1bec4 <memcpy>
            return MP_OBJ_FROM_PTR(s);
   10e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10e20:	e05d      	b.n	10ede <list_binary_op+0x1ba>
        }
        case MP_BINARY_OP_INPLACE_ADD: {
            list_extend(lhs, rhs);
   10e22:	6879      	ldr	r1, [r7, #4]
   10e24:	68b8      	ldr	r0, [r7, #8]
   10e26:	f000 f909 	bl	1103c <list_extend>
            return lhs;
   10e2a:	68bb      	ldr	r3, [r7, #8]
   10e2c:	e057      	b.n	10ede <list_binary_op+0x1ba>
        }
        case MP_BINARY_OP_MULTIPLY: {
            mp_int_t n;
            if (!mp_obj_get_int_maybe(rhs, &n)) {
   10e2e:	f107 0314 	add.w	r3, r7, #20
   10e32:	4619      	mov	r1, r3
   10e34:	6878      	ldr	r0, [r7, #4]
   10e36:	f7fc ff27 	bl	dc88 <mp_obj_get_int_maybe>
   10e3a:	4603      	mov	r3, r0
   10e3c:	f083 0301 	eor.w	r3, r3, #1
   10e40:	b2db      	uxtb	r3, r3
   10e42:	2b00      	cmp	r3, #0
   10e44:	d001      	beq.n	10e4a <list_binary_op+0x126>
                return MP_OBJ_NULL; // op not supported
   10e46:	2300      	movs	r3, #0
   10e48:	e049      	b.n	10ede <list_binary_op+0x1ba>
            }
            if (n < 0) {
   10e4a:	697b      	ldr	r3, [r7, #20]
   10e4c:	2b00      	cmp	r3, #0
   10e4e:	da01      	bge.n	10e54 <list_binary_op+0x130>
                n = 0;
   10e50:	2300      	movs	r3, #0
   10e52:	617b      	str	r3, [r7, #20]
            }
            mp_obj_list_t *s = list_new(o->len * n);
   10e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10e56:	689b      	ldr	r3, [r3, #8]
   10e58:	697a      	ldr	r2, [r7, #20]
   10e5a:	fb02 f303 	mul.w	r3, r2, r3
   10e5e:	4618      	mov	r0, r3
   10e60:	f000 fd0c 	bl	1187c <list_new>
   10e64:	6238      	str	r0, [r7, #32]
            mp_seq_multiply(o->items, sizeof(*o->items), o->len, n, s->items);
   10e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10e68:	68d8      	ldr	r0, [r3, #12]
   10e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10e6c:	689a      	ldr	r2, [r3, #8]
   10e6e:	697b      	ldr	r3, [r7, #20]
   10e70:	4619      	mov	r1, r3
   10e72:	6a3b      	ldr	r3, [r7, #32]
   10e74:	68db      	ldr	r3, [r3, #12]
   10e76:	9300      	str	r3, [sp, #0]
   10e78:	460b      	mov	r3, r1
   10e7a:	2104      	movs	r1, #4
   10e7c:	f006 fc70 	bl	17760 <mp_seq_multiply>
            return MP_OBJ_FROM_PTR(s);
   10e80:	6a3b      	ldr	r3, [r7, #32]
   10e82:	e02c      	b.n	10ede <list_binary_op+0x1ba>
        case MP_BINARY_OP_EQUAL:
        case MP_BINARY_OP_LESS:
        case MP_BINARY_OP_LESS_EQUAL:
        case MP_BINARY_OP_MORE:
        case MP_BINARY_OP_MORE_EQUAL: {
            if (!MP_OBJ_IS_TYPE(rhs, &mp_type_list)) {
   10e84:	6878      	ldr	r0, [r7, #4]
   10e86:	f7ff fe85 	bl	10b94 <MP_OBJ_IS_OBJ>
   10e8a:	4603      	mov	r3, r0
   10e8c:	f083 0301 	eor.w	r3, r3, #1
   10e90:	b2db      	uxtb	r3, r3
   10e92:	2b00      	cmp	r3, #0
   10e94:	d104      	bne.n	10ea0 <list_binary_op+0x17c>
   10e96:	687b      	ldr	r3, [r7, #4]
   10e98:	681b      	ldr	r3, [r3, #0]
   10e9a:	4a13      	ldr	r2, [pc, #76]	; (10ee8 <list_binary_op+0x1c4>)
   10e9c:	4293      	cmp	r3, r2
   10e9e:	d006      	beq.n	10eae <list_binary_op+0x18a>
                if (op == MP_BINARY_OP_EQUAL) {
   10ea0:	68fb      	ldr	r3, [r7, #12]
   10ea2:	2b02      	cmp	r3, #2
   10ea4:	d101      	bne.n	10eaa <list_binary_op+0x186>
                    return mp_const_false;
   10ea6:	4b11      	ldr	r3, [pc, #68]	; (10eec <list_binary_op+0x1c8>)
   10ea8:	e019      	b.n	10ede <list_binary_op+0x1ba>
                }
                return MP_OBJ_NULL; // op not supported
   10eaa:	2300      	movs	r3, #0
   10eac:	e017      	b.n	10ede <list_binary_op+0x1ba>
            }

            mp_obj_list_t *another = MP_OBJ_TO_PTR(rhs);
   10eae:	687b      	ldr	r3, [r7, #4]
   10eb0:	61fb      	str	r3, [r7, #28]
            bool res = mp_seq_cmp_objs(op, o->items, o->len, another->items, another->len);
   10eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10eb4:	68d9      	ldr	r1, [r3, #12]
   10eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10eb8:	689a      	ldr	r2, [r3, #8]
   10eba:	69fb      	ldr	r3, [r7, #28]
   10ebc:	68d8      	ldr	r0, [r3, #12]
   10ebe:	69fb      	ldr	r3, [r7, #28]
   10ec0:	689b      	ldr	r3, [r3, #8]
   10ec2:	9300      	str	r3, [sp, #0]
   10ec4:	4603      	mov	r3, r0
   10ec6:	68f8      	ldr	r0, [r7, #12]
   10ec8:	f006 fd0c 	bl	178e4 <mp_seq_cmp_objs>
   10ecc:	4603      	mov	r3, r0
   10ece:	76fb      	strb	r3, [r7, #27]
            return mp_obj_new_bool(res);
   10ed0:	7efb      	ldrb	r3, [r7, #27]
   10ed2:	4618      	mov	r0, r3
   10ed4:	f7ff fe70 	bl	10bb8 <mp_obj_new_bool>
   10ed8:	4603      	mov	r3, r0
   10eda:	e000      	b.n	10ede <list_binary_op+0x1ba>
        }

        default:
            return MP_OBJ_NULL; // op not supported
   10edc:	2300      	movs	r3, #0
    }
}
   10ede:	4618      	mov	r0, r3
   10ee0:	3730      	adds	r7, #48	; 0x30
   10ee2:	46bd      	mov	sp, r7
   10ee4:	bd80      	pop	{r7, pc}
   10ee6:	bf00      	nop
   10ee8:	000211fc 	.word	0x000211fc
   10eec:	0001fc3c 	.word	0x0001fc3c

00010ef0 <list_subscr>:

STATIC mp_obj_t list_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   10ef0:	b580      	push	{r7, lr}
   10ef2:	b088      	sub	sp, #32
   10ef4:	af00      	add	r7, sp, #0
   10ef6:	60f8      	str	r0, [r7, #12]
   10ef8:	60b9      	str	r1, [r7, #8]
   10efa:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_NULL) {
   10efc:	687b      	ldr	r3, [r7, #4]
   10efe:	2b00      	cmp	r3, #0
   10f00:	d10b      	bne.n	10f1a <list_subscr+0x2a>
            mp_seq_clear(self->items, self->len + len_adj, self->len, sizeof(*self->items));
            self->len += len_adj;
            return mp_const_none;
        }
#endif
        mp_obj_t args[2] = {self_in, index};
   10f02:	68fb      	ldr	r3, [r7, #12]
   10f04:	613b      	str	r3, [r7, #16]
   10f06:	68bb      	ldr	r3, [r7, #8]
   10f08:	617b      	str	r3, [r7, #20]
        list_pop(2, args);
   10f0a:	f107 0310 	add.w	r3, r7, #16
   10f0e:	4619      	mov	r1, r3
   10f10:	2002      	movs	r0, #2
   10f12:	f000 f91b 	bl	1114c <list_pop>
        return mp_const_none;
   10f16:	4b10      	ldr	r3, [pc, #64]	; (10f58 <list_subscr+0x68>)
   10f18:	e01a      	b.n	10f50 <list_subscr+0x60>
    } else if (value == MP_OBJ_SENTINEL) {
   10f1a:	687b      	ldr	r3, [r7, #4]
   10f1c:	2b08      	cmp	r3, #8
   10f1e:	d111      	bne.n	10f44 <list_subscr+0x54>
        // load
        mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   10f20:	68fb      	ldr	r3, [r7, #12]
   10f22:	61fb      	str	r3, [r7, #28]
            mp_obj_list_t *res = list_new(slice.stop - slice.start);
            mp_seq_copy(res->items, self->items + slice.start, res->len, mp_obj_t);
            return MP_OBJ_FROM_PTR(res);
        }
#endif
        size_t index_val = mp_get_index(self->base.type, self->len, index, false);
   10f24:	69fb      	ldr	r3, [r7, #28]
   10f26:	6818      	ldr	r0, [r3, #0]
   10f28:	69fb      	ldr	r3, [r7, #28]
   10f2a:	6899      	ldr	r1, [r3, #8]
   10f2c:	2300      	movs	r3, #0
   10f2e:	68ba      	ldr	r2, [r7, #8]
   10f30:	f7fc ff3a 	bl	dda8 <mp_get_index>
   10f34:	61b8      	str	r0, [r7, #24]
        return self->items[index_val];
   10f36:	69fb      	ldr	r3, [r7, #28]
   10f38:	68da      	ldr	r2, [r3, #12]
   10f3a:	69bb      	ldr	r3, [r7, #24]
   10f3c:	009b      	lsls	r3, r3, #2
   10f3e:	4413      	add	r3, r2
   10f40:	681b      	ldr	r3, [r3, #0]
   10f42:	e005      	b.n	10f50 <list_subscr+0x60>
            }
            self->len += len_adj;
            return mp_const_none;
        }
#endif
        mp_obj_list_store(self_in, index, value);
   10f44:	687a      	ldr	r2, [r7, #4]
   10f46:	68b9      	ldr	r1, [r7, #8]
   10f48:	68f8      	ldr	r0, [r7, #12]
   10f4a:	f000 fcf5 	bl	11938 <mp_obj_list_store>
        return mp_const_none;
   10f4e:	4b02      	ldr	r3, [pc, #8]	; (10f58 <list_subscr+0x68>)
    }
}
   10f50:	4618      	mov	r0, r3
   10f52:	3720      	adds	r7, #32
   10f54:	46bd      	mov	sp, r7
   10f56:	bd80      	pop	{r7, pc}
   10f58:	00021534 	.word	0x00021534

00010f5c <list_getiter>:

STATIC mp_obj_t list_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
   10f5c:	b580      	push	{r7, lr}
   10f5e:	b082      	sub	sp, #8
   10f60:	af00      	add	r7, sp, #0
   10f62:	6078      	str	r0, [r7, #4]
   10f64:	6039      	str	r1, [r7, #0]
    return mp_obj_new_list_iterator(o_in, 0, iter_buf);
   10f66:	683a      	ldr	r2, [r7, #0]
   10f68:	2100      	movs	r1, #0
   10f6a:	6878      	ldr	r0, [r7, #4]
   10f6c:	f000 fd26 	bl	119bc <mp_obj_new_list_iterator>
   10f70:	4603      	mov	r3, r0
}
   10f72:	4618      	mov	r0, r3
   10f74:	3708      	adds	r7, #8
   10f76:	46bd      	mov	sp, r7
   10f78:	bd80      	pop	{r7, pc}
   10f7a:	bf00      	nop

00010f7c <mp_obj_list_append>:

mp_obj_t mp_obj_list_append(mp_obj_t self_in, mp_obj_t arg) {
   10f7c:	b580      	push	{r7, lr}
   10f7e:	b084      	sub	sp, #16
   10f80:	af00      	add	r7, sp, #0
   10f82:	6078      	str	r0, [r7, #4]
   10f84:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   10f86:	6878      	ldr	r0, [r7, #4]
   10f88:	f7ff fe04 	bl	10b94 <MP_OBJ_IS_OBJ>
   10f8c:	4603      	mov	r3, r0
   10f8e:	f083 0301 	eor.w	r3, r3, #1
   10f92:	b2db      	uxtb	r3, r3
   10f94:	2b00      	cmp	r3, #0
   10f96:	d104      	bne.n	10fa2 <mp_obj_list_append+0x26>
   10f98:	687b      	ldr	r3, [r7, #4]
   10f9a:	681b      	ldr	r3, [r3, #0]
   10f9c:	4a22      	ldr	r2, [pc, #136]	; (11028 <mp_obj_list_append+0xac>)
   10f9e:	4293      	cmp	r3, r2
   10fa0:	d005      	beq.n	10fae <mp_obj_list_append+0x32>
   10fa2:	4b22      	ldr	r3, [pc, #136]	; (1102c <mp_obj_list_append+0xb0>)
   10fa4:	4a22      	ldr	r2, [pc, #136]	; (11030 <mp_obj_list_append+0xb4>)
   10fa6:	21eb      	movs	r1, #235	; 0xeb
   10fa8:	4822      	ldr	r0, [pc, #136]	; (11034 <mp_obj_list_append+0xb8>)
   10faa:	f00a f9df 	bl	1b36c <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   10fae:	687b      	ldr	r3, [r7, #4]
   10fb0:	60fb      	str	r3, [r7, #12]
    if (self->len >= self->alloc) {
   10fb2:	68fb      	ldr	r3, [r7, #12]
   10fb4:	689a      	ldr	r2, [r3, #8]
   10fb6:	68fb      	ldr	r3, [r7, #12]
   10fb8:	685b      	ldr	r3, [r3, #4]
   10fba:	429a      	cmp	r2, r3
   10fbc:	d324      	bcc.n	11008 <mp_obj_list_append+0x8c>
        self->items = m_renew(mp_obj_t, self->items, self->alloc, self->alloc * 2);
   10fbe:	68fb      	ldr	r3, [r7, #12]
   10fc0:	68da      	ldr	r2, [r3, #12]
   10fc2:	68fb      	ldr	r3, [r7, #12]
   10fc4:	685b      	ldr	r3, [r3, #4]
   10fc6:	00db      	lsls	r3, r3, #3
   10fc8:	4619      	mov	r1, r3
   10fca:	4610      	mov	r0, r2
   10fcc:	f7ef f9da 	bl	384 <m_realloc>
   10fd0:	4602      	mov	r2, r0
   10fd2:	68fb      	ldr	r3, [r7, #12]
   10fd4:	60da      	str	r2, [r3, #12]
        self->alloc *= 2;
   10fd6:	68fb      	ldr	r3, [r7, #12]
   10fd8:	685b      	ldr	r3, [r3, #4]
   10fda:	005a      	lsls	r2, r3, #1
   10fdc:	68fb      	ldr	r3, [r7, #12]
   10fde:	605a      	str	r2, [r3, #4]
        mp_seq_clear(self->items, self->len + 1, self->alloc, sizeof(*self->items));
   10fe0:	68fb      	ldr	r3, [r7, #12]
   10fe2:	68da      	ldr	r2, [r3, #12]
   10fe4:	68fb      	ldr	r3, [r7, #12]
   10fe6:	689b      	ldr	r3, [r3, #8]
   10fe8:	3301      	adds	r3, #1
   10fea:	009b      	lsls	r3, r3, #2
   10fec:	18d0      	adds	r0, r2, r3
   10fee:	68fb      	ldr	r3, [r7, #12]
   10ff0:	685a      	ldr	r2, [r3, #4]
   10ff2:	68fb      	ldr	r3, [r7, #12]
   10ff4:	689b      	ldr	r3, [r3, #8]
   10ff6:	1ad3      	subs	r3, r2, r3
   10ff8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   10ffc:	3b01      	subs	r3, #1
   10ffe:	009b      	lsls	r3, r3, #2
   11000:	461a      	mov	r2, r3
   11002:	2100      	movs	r1, #0
   11004:	f00a fffa 	bl	1bffc <memset>
    }
    self->items[self->len++] = arg;
   11008:	68fb      	ldr	r3, [r7, #12]
   1100a:	68da      	ldr	r2, [r3, #12]
   1100c:	68fb      	ldr	r3, [r7, #12]
   1100e:	689b      	ldr	r3, [r3, #8]
   11010:	1c58      	adds	r0, r3, #1
   11012:	68f9      	ldr	r1, [r7, #12]
   11014:	6088      	str	r0, [r1, #8]
   11016:	009b      	lsls	r3, r3, #2
   11018:	4413      	add	r3, r2
   1101a:	683a      	ldr	r2, [r7, #0]
   1101c:	601a      	str	r2, [r3, #0]
    return mp_const_none; // return None, as per CPython
   1101e:	4b06      	ldr	r3, [pc, #24]	; (11038 <mp_obj_list_append+0xbc>)
}
   11020:	4618      	mov	r0, r3
   11022:	3710      	adds	r7, #16
   11024:	46bd      	mov	sp, r7
   11026:	bd80      	pop	{r7, pc}
   11028:	000211fc 	.word	0x000211fc
   1102c:	00020fec 	.word	0x00020fec
   11030:	00021238 	.word	0x00021238
   11034:	00021048 	.word	0x00021048
   11038:	00021534 	.word	0x00021534

0001103c <list_extend>:

STATIC mp_obj_t list_extend(mp_obj_t self_in, mp_obj_t arg_in) {
   1103c:	b580      	push	{r7, lr}
   1103e:	b084      	sub	sp, #16
   11040:	af00      	add	r7, sp, #0
   11042:	6078      	str	r0, [r7, #4]
   11044:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11046:	6878      	ldr	r0, [r7, #4]
   11048:	f7ff fda4 	bl	10b94 <MP_OBJ_IS_OBJ>
   1104c:	4603      	mov	r3, r0
   1104e:	f083 0301 	eor.w	r3, r3, #1
   11052:	b2db      	uxtb	r3, r3
   11054:	2b00      	cmp	r3, #0
   11056:	d104      	bne.n	11062 <list_extend+0x26>
   11058:	687b      	ldr	r3, [r7, #4]
   1105a:	681b      	ldr	r3, [r3, #0]
   1105c:	4a36      	ldr	r2, [pc, #216]	; (11138 <list_extend+0xfc>)
   1105e:	4293      	cmp	r3, r2
   11060:	d005      	beq.n	1106e <list_extend+0x32>
   11062:	4b36      	ldr	r3, [pc, #216]	; (1113c <list_extend+0x100>)
   11064:	4a36      	ldr	r2, [pc, #216]	; (11140 <list_extend+0x104>)
   11066:	21f7      	movs	r1, #247	; 0xf7
   11068:	4836      	ldr	r0, [pc, #216]	; (11144 <list_extend+0x108>)
   1106a:	f00a f97f 	bl	1b36c <__assert_func>
    if (MP_OBJ_IS_TYPE(arg_in, &mp_type_list)) {
   1106e:	6838      	ldr	r0, [r7, #0]
   11070:	f7ff fd90 	bl	10b94 <MP_OBJ_IS_OBJ>
   11074:	4603      	mov	r3, r0
   11076:	2b00      	cmp	r3, #0
   11078:	d054      	beq.n	11124 <list_extend+0xe8>
   1107a:	683b      	ldr	r3, [r7, #0]
   1107c:	681b      	ldr	r3, [r3, #0]
   1107e:	4a2e      	ldr	r2, [pc, #184]	; (11138 <list_extend+0xfc>)
   11080:	4293      	cmp	r3, r2
   11082:	d14f      	bne.n	11124 <list_extend+0xe8>
        mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11084:	687b      	ldr	r3, [r7, #4]
   11086:	60fb      	str	r3, [r7, #12]
        mp_obj_list_t *arg = MP_OBJ_TO_PTR(arg_in);
   11088:	683b      	ldr	r3, [r7, #0]
   1108a:	60bb      	str	r3, [r7, #8]

        if (self->len + arg->len > self->alloc) {
   1108c:	68fb      	ldr	r3, [r7, #12]
   1108e:	689a      	ldr	r2, [r3, #8]
   11090:	68bb      	ldr	r3, [r7, #8]
   11092:	689b      	ldr	r3, [r3, #8]
   11094:	441a      	add	r2, r3
   11096:	68fb      	ldr	r3, [r7, #12]
   11098:	685b      	ldr	r3, [r3, #4]
   1109a:	429a      	cmp	r2, r3
   1109c:	d92c      	bls.n	110f8 <list_extend+0xbc>
            // TODO: use alloc policy for "4"
            self->items = m_renew(mp_obj_t, self->items, self->alloc, self->len + arg->len + 4);
   1109e:	68fb      	ldr	r3, [r7, #12]
   110a0:	68d8      	ldr	r0, [r3, #12]
   110a2:	68fb      	ldr	r3, [r7, #12]
   110a4:	689a      	ldr	r2, [r3, #8]
   110a6:	68bb      	ldr	r3, [r7, #8]
   110a8:	689b      	ldr	r3, [r3, #8]
   110aa:	4413      	add	r3, r2
   110ac:	3304      	adds	r3, #4
   110ae:	009b      	lsls	r3, r3, #2
   110b0:	4619      	mov	r1, r3
   110b2:	f7ef f967 	bl	384 <m_realloc>
   110b6:	4602      	mov	r2, r0
   110b8:	68fb      	ldr	r3, [r7, #12]
   110ba:	60da      	str	r2, [r3, #12]
            self->alloc = self->len + arg->len + 4;
   110bc:	68fb      	ldr	r3, [r7, #12]
   110be:	689a      	ldr	r2, [r3, #8]
   110c0:	68bb      	ldr	r3, [r7, #8]
   110c2:	689b      	ldr	r3, [r3, #8]
   110c4:	4413      	add	r3, r2
   110c6:	1d1a      	adds	r2, r3, #4
   110c8:	68fb      	ldr	r3, [r7, #12]
   110ca:	605a      	str	r2, [r3, #4]
            mp_seq_clear(self->items, self->len + arg->len, self->alloc, sizeof(*self->items));
   110cc:	68fb      	ldr	r3, [r7, #12]
   110ce:	68da      	ldr	r2, [r3, #12]
   110d0:	68fb      	ldr	r3, [r7, #12]
   110d2:	6899      	ldr	r1, [r3, #8]
   110d4:	68bb      	ldr	r3, [r7, #8]
   110d6:	689b      	ldr	r3, [r3, #8]
   110d8:	440b      	add	r3, r1
   110da:	009b      	lsls	r3, r3, #2
   110dc:	18d0      	adds	r0, r2, r3
   110de:	68fb      	ldr	r3, [r7, #12]
   110e0:	685a      	ldr	r2, [r3, #4]
   110e2:	68fb      	ldr	r3, [r7, #12]
   110e4:	6899      	ldr	r1, [r3, #8]
   110e6:	68bb      	ldr	r3, [r7, #8]
   110e8:	689b      	ldr	r3, [r3, #8]
   110ea:	440b      	add	r3, r1
   110ec:	1ad3      	subs	r3, r2, r3
   110ee:	009b      	lsls	r3, r3, #2
   110f0:	461a      	mov	r2, r3
   110f2:	2100      	movs	r1, #0
   110f4:	f00a ff82 	bl	1bffc <memset>
        }

        memcpy(self->items + self->len, arg->items, sizeof(mp_obj_t) * arg->len);
   110f8:	68fb      	ldr	r3, [r7, #12]
   110fa:	68da      	ldr	r2, [r3, #12]
   110fc:	68fb      	ldr	r3, [r7, #12]
   110fe:	689b      	ldr	r3, [r3, #8]
   11100:	009b      	lsls	r3, r3, #2
   11102:	18d0      	adds	r0, r2, r3
   11104:	68bb      	ldr	r3, [r7, #8]
   11106:	68d9      	ldr	r1, [r3, #12]
   11108:	68bb      	ldr	r3, [r7, #8]
   1110a:	689b      	ldr	r3, [r3, #8]
   1110c:	009b      	lsls	r3, r3, #2
   1110e:	461a      	mov	r2, r3
   11110:	f00a fed8 	bl	1bec4 <memcpy>
        self->len += arg->len;
   11114:	68fb      	ldr	r3, [r7, #12]
   11116:	689a      	ldr	r2, [r3, #8]
   11118:	68bb      	ldr	r3, [r7, #8]
   1111a:	689b      	ldr	r3, [r3, #8]
   1111c:	441a      	add	r2, r3
   1111e:	68fb      	ldr	r3, [r7, #12]
   11120:	609a      	str	r2, [r3, #8]
    if (MP_OBJ_IS_TYPE(arg_in, &mp_type_list)) {
   11122:	e003      	b.n	1112c <list_extend+0xf0>
    } else {
        list_extend_from_iter(self_in, arg_in);
   11124:	6839      	ldr	r1, [r7, #0]
   11126:	6878      	ldr	r0, [r7, #4]
   11128:	f7ff fd94 	bl	10c54 <list_extend_from_iter>
    }
    return mp_const_none; // return None, as per CPython
   1112c:	4b06      	ldr	r3, [pc, #24]	; (11148 <list_extend+0x10c>)
}
   1112e:	4618      	mov	r0, r3
   11130:	3710      	adds	r7, #16
   11132:	46bd      	mov	sp, r7
   11134:	bd80      	pop	{r7, pc}
   11136:	bf00      	nop
   11138:	000211fc 	.word	0x000211fc
   1113c:	00020fec 	.word	0x00020fec
   11140:	0002124c 	.word	0x0002124c
   11144:	00021048 	.word	0x00021048
   11148:	00021534 	.word	0x00021534

0001114c <list_pop>:

STATIC mp_obj_t list_pop(size_t n_args, const mp_obj_t *args) {
   1114c:	b580      	push	{r7, lr}
   1114e:	b086      	sub	sp, #24
   11150:	af00      	add	r7, sp, #0
   11152:	6078      	str	r0, [r7, #4]
   11154:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_list));
   11156:	683b      	ldr	r3, [r7, #0]
   11158:	681b      	ldr	r3, [r3, #0]
   1115a:	4618      	mov	r0, r3
   1115c:	f7ff fd1a 	bl	10b94 <MP_OBJ_IS_OBJ>
   11160:	4603      	mov	r3, r0
   11162:	f083 0301 	eor.w	r3, r3, #1
   11166:	b2db      	uxtb	r3, r3
   11168:	2b00      	cmp	r3, #0
   1116a:	d105      	bne.n	11178 <list_pop+0x2c>
   1116c:	683b      	ldr	r3, [r7, #0]
   1116e:	681b      	ldr	r3, [r3, #0]
   11170:	681b      	ldr	r3, [r3, #0]
   11172:	4a37      	ldr	r2, [pc, #220]	; (11250 <list_pop+0x104>)
   11174:	4293      	cmp	r3, r2
   11176:	d006      	beq.n	11186 <list_pop+0x3a>
   11178:	4b36      	ldr	r3, [pc, #216]	; (11254 <list_pop+0x108>)
   1117a:	4a37      	ldr	r2, [pc, #220]	; (11258 <list_pop+0x10c>)
   1117c:	f44f 7186 	mov.w	r1, #268	; 0x10c
   11180:	4836      	ldr	r0, [pc, #216]	; (1125c <list_pop+0x110>)
   11182:	f00a f8f3 	bl	1b36c <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(args[0]);
   11186:	683b      	ldr	r3, [r7, #0]
   11188:	681b      	ldr	r3, [r3, #0]
   1118a:	617b      	str	r3, [r7, #20]
    if (self->len == 0) {
   1118c:	697b      	ldr	r3, [r7, #20]
   1118e:	689b      	ldr	r3, [r3, #8]
   11190:	2b00      	cmp	r3, #0
   11192:	d103      	bne.n	1119c <list_pop+0x50>
        mp_raise_msg(&mp_type_IndexError, "pop from empty list");
   11194:	4932      	ldr	r1, [pc, #200]	; (11260 <list_pop+0x114>)
   11196:	4833      	ldr	r0, [pc, #204]	; (11264 <list_pop+0x118>)
   11198:	f7fb ff00 	bl	cf9c <mp_raise_msg>
    }
    size_t index = mp_get_index(self->base.type, self->len, n_args == 1 ? MP_OBJ_NEW_SMALL_INT(-1) : args[1], false);
   1119c:	697b      	ldr	r3, [r7, #20]
   1119e:	6818      	ldr	r0, [r3, #0]
   111a0:	697b      	ldr	r3, [r7, #20]
   111a2:	6899      	ldr	r1, [r3, #8]
   111a4:	687b      	ldr	r3, [r7, #4]
   111a6:	2b01      	cmp	r3, #1
   111a8:	d002      	beq.n	111b0 <list_pop+0x64>
   111aa:	683b      	ldr	r3, [r7, #0]
   111ac:	685a      	ldr	r2, [r3, #4]
   111ae:	e001      	b.n	111b4 <list_pop+0x68>
   111b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   111b4:	2300      	movs	r3, #0
   111b6:	f7fc fdf7 	bl	dda8 <mp_get_index>
   111ba:	6138      	str	r0, [r7, #16]
    mp_obj_t ret = self->items[index];
   111bc:	697b      	ldr	r3, [r7, #20]
   111be:	68da      	ldr	r2, [r3, #12]
   111c0:	693b      	ldr	r3, [r7, #16]
   111c2:	009b      	lsls	r3, r3, #2
   111c4:	4413      	add	r3, r2
   111c6:	681b      	ldr	r3, [r3, #0]
   111c8:	60fb      	str	r3, [r7, #12]
    self->len -= 1;
   111ca:	697b      	ldr	r3, [r7, #20]
   111cc:	689b      	ldr	r3, [r3, #8]
   111ce:	1e5a      	subs	r2, r3, #1
   111d0:	697b      	ldr	r3, [r7, #20]
   111d2:	609a      	str	r2, [r3, #8]
    memmove(self->items + index, self->items + index + 1, (self->len - index) * sizeof(mp_obj_t));
   111d4:	697b      	ldr	r3, [r7, #20]
   111d6:	68da      	ldr	r2, [r3, #12]
   111d8:	693b      	ldr	r3, [r7, #16]
   111da:	009b      	lsls	r3, r3, #2
   111dc:	18d0      	adds	r0, r2, r3
   111de:	697b      	ldr	r3, [r7, #20]
   111e0:	68da      	ldr	r2, [r3, #12]
   111e2:	693b      	ldr	r3, [r7, #16]
   111e4:	3301      	adds	r3, #1
   111e6:	009b      	lsls	r3, r3, #2
   111e8:	18d1      	adds	r1, r2, r3
   111ea:	697b      	ldr	r3, [r7, #20]
   111ec:	689a      	ldr	r2, [r3, #8]
   111ee:	693b      	ldr	r3, [r7, #16]
   111f0:	1ad3      	subs	r3, r2, r3
   111f2:	009b      	lsls	r3, r3, #2
   111f4:	461a      	mov	r2, r3
   111f6:	f00a fecb 	bl	1bf90 <memmove>
    // Clear stale pointer from slot which just got freed to prevent GC issues
    self->items[self->len] = MP_OBJ_NULL;
   111fa:	697b      	ldr	r3, [r7, #20]
   111fc:	68da      	ldr	r2, [r3, #12]
   111fe:	697b      	ldr	r3, [r7, #20]
   11200:	689b      	ldr	r3, [r3, #8]
   11202:	009b      	lsls	r3, r3, #2
   11204:	4413      	add	r3, r2
   11206:	2200      	movs	r2, #0
   11208:	601a      	str	r2, [r3, #0]
    if (self->alloc > LIST_MIN_ALLOC && self->alloc > 2 * self->len) {
   1120a:	697b      	ldr	r3, [r7, #20]
   1120c:	685b      	ldr	r3, [r3, #4]
   1120e:	2b04      	cmp	r3, #4
   11210:	d918      	bls.n	11244 <list_pop+0xf8>
   11212:	697b      	ldr	r3, [r7, #20]
   11214:	685a      	ldr	r2, [r3, #4]
   11216:	697b      	ldr	r3, [r7, #20]
   11218:	689b      	ldr	r3, [r3, #8]
   1121a:	005b      	lsls	r3, r3, #1
   1121c:	429a      	cmp	r2, r3
   1121e:	d911      	bls.n	11244 <list_pop+0xf8>
        self->items = m_renew(mp_obj_t, self->items, self->alloc, self->alloc/2);
   11220:	697b      	ldr	r3, [r7, #20]
   11222:	68da      	ldr	r2, [r3, #12]
   11224:	697b      	ldr	r3, [r7, #20]
   11226:	685b      	ldr	r3, [r3, #4]
   11228:	085b      	lsrs	r3, r3, #1
   1122a:	009b      	lsls	r3, r3, #2
   1122c:	4619      	mov	r1, r3
   1122e:	4610      	mov	r0, r2
   11230:	f7ef f8a8 	bl	384 <m_realloc>
   11234:	4602      	mov	r2, r0
   11236:	697b      	ldr	r3, [r7, #20]
   11238:	60da      	str	r2, [r3, #12]
        self->alloc /= 2;
   1123a:	697b      	ldr	r3, [r7, #20]
   1123c:	685b      	ldr	r3, [r3, #4]
   1123e:	085a      	lsrs	r2, r3, #1
   11240:	697b      	ldr	r3, [r7, #20]
   11242:	605a      	str	r2, [r3, #4]
    }
    return ret;
   11244:	68fb      	ldr	r3, [r7, #12]
}
   11246:	4618      	mov	r0, r3
   11248:	3718      	adds	r7, #24
   1124a:	46bd      	mov	sp, r7
   1124c:	bd80      	pop	{r7, pc}
   1124e:	bf00      	nop
   11250:	000211fc 	.word	0x000211fc
   11254:	0002105c 	.word	0x0002105c
   11258:	00021258 	.word	0x00021258
   1125c:	00021048 	.word	0x00021048
   11260:	000210b8 	.word	0x000210b8
   11264:	00020548 	.word	0x00020548

00011268 <mp_quicksort>:

STATIC void mp_quicksort(mp_obj_t *head, mp_obj_t *tail, mp_obj_t key_fn, mp_obj_t binop_less_result) {
   11268:	b580      	push	{r7, lr}
   1126a:	b08a      	sub	sp, #40	; 0x28
   1126c:	af00      	add	r7, sp, #0
   1126e:	60f8      	str	r0, [r7, #12]
   11270:	60b9      	str	r1, [r7, #8]
   11272:	607a      	str	r2, [r7, #4]
   11274:	603b      	str	r3, [r7, #0]
    MP_STACK_CHECK();
    while (head < tail) {
   11276:	e085      	b.n	11384 <mp_quicksort+0x11c>
        mp_obj_t *h = head - 1;
   11278:	68fb      	ldr	r3, [r7, #12]
   1127a:	3b04      	subs	r3, #4
   1127c:	627b      	str	r3, [r7, #36]	; 0x24
        mp_obj_t *t = tail;
   1127e:	68bb      	ldr	r3, [r7, #8]
   11280:	623b      	str	r3, [r7, #32]
        mp_obj_t v = key_fn == MP_OBJ_NULL ? tail[0] : mp_call_function_1(key_fn, tail[0]); // get pivot using key_fn
   11282:	687b      	ldr	r3, [r7, #4]
   11284:	2b00      	cmp	r3, #0
   11286:	d102      	bne.n	1128e <mp_quicksort+0x26>
   11288:	68bb      	ldr	r3, [r7, #8]
   1128a:	681b      	ldr	r3, [r3, #0]
   1128c:	e006      	b.n	1129c <mp_quicksort+0x34>
   1128e:	68bb      	ldr	r3, [r7, #8]
   11290:	681b      	ldr	r3, [r3, #0]
   11292:	4619      	mov	r1, r3
   11294:	6878      	ldr	r0, [r7, #4]
   11296:	f7fa fdb9 	bl	be0c <mp_call_function_1>
   1129a:	4603      	mov	r3, r0
   1129c:	61fb      	str	r3, [r7, #28]
        for (;;) {
            do ++h; while (h < t && mp_binary_op(MP_BINARY_OP_LESS, key_fn == MP_OBJ_NULL ? h[0] : mp_call_function_1(key_fn, h[0]), v) == binop_less_result);
   1129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   112a0:	3304      	adds	r3, #4
   112a2:	627b      	str	r3, [r7, #36]	; 0x24
   112a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   112a6:	6a3b      	ldr	r3, [r7, #32]
   112a8:	429a      	cmp	r2, r3
   112aa:	d215      	bcs.n	112d8 <mp_quicksort+0x70>
   112ac:	687b      	ldr	r3, [r7, #4]
   112ae:	2b00      	cmp	r3, #0
   112b0:	d102      	bne.n	112b8 <mp_quicksort+0x50>
   112b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   112b4:	681b      	ldr	r3, [r3, #0]
   112b6:	e006      	b.n	112c6 <mp_quicksort+0x5e>
   112b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   112ba:	681b      	ldr	r3, [r3, #0]
   112bc:	4619      	mov	r1, r3
   112be:	6878      	ldr	r0, [r7, #4]
   112c0:	f7fa fda4 	bl	be0c <mp_call_function_1>
   112c4:	4603      	mov	r3, r0
   112c6:	69fa      	ldr	r2, [r7, #28]
   112c8:	4619      	mov	r1, r3
   112ca:	2000      	movs	r0, #0
   112cc:	f7fa fb30 	bl	b930 <mp_binary_op>
   112d0:	4602      	mov	r2, r0
   112d2:	683b      	ldr	r3, [r7, #0]
   112d4:	429a      	cmp	r2, r3
   112d6:	d0e2      	beq.n	1129e <mp_quicksort+0x36>
            do --t; while (h < t && mp_binary_op(MP_BINARY_OP_LESS, v, key_fn == MP_OBJ_NULL ? t[0] : mp_call_function_1(key_fn, t[0])) == binop_less_result);
   112d8:	6a3b      	ldr	r3, [r7, #32]
   112da:	3b04      	subs	r3, #4
   112dc:	623b      	str	r3, [r7, #32]
   112de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   112e0:	6a3b      	ldr	r3, [r7, #32]
   112e2:	429a      	cmp	r2, r3
   112e4:	d215      	bcs.n	11312 <mp_quicksort+0xaa>
   112e6:	687b      	ldr	r3, [r7, #4]
   112e8:	2b00      	cmp	r3, #0
   112ea:	d102      	bne.n	112f2 <mp_quicksort+0x8a>
   112ec:	6a3b      	ldr	r3, [r7, #32]
   112ee:	681b      	ldr	r3, [r3, #0]
   112f0:	e006      	b.n	11300 <mp_quicksort+0x98>
   112f2:	6a3b      	ldr	r3, [r7, #32]
   112f4:	681b      	ldr	r3, [r3, #0]
   112f6:	4619      	mov	r1, r3
   112f8:	6878      	ldr	r0, [r7, #4]
   112fa:	f7fa fd87 	bl	be0c <mp_call_function_1>
   112fe:	4603      	mov	r3, r0
   11300:	461a      	mov	r2, r3
   11302:	69f9      	ldr	r1, [r7, #28]
   11304:	2000      	movs	r0, #0
   11306:	f7fa fb13 	bl	b930 <mp_binary_op>
   1130a:	4602      	mov	r2, r0
   1130c:	683b      	ldr	r3, [r7, #0]
   1130e:	429a      	cmp	r2, r3
   11310:	d0e2      	beq.n	112d8 <mp_quicksort+0x70>
            if (h >= t) break;
   11312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11314:	6a3b      	ldr	r3, [r7, #32]
   11316:	429a      	cmp	r2, r3
   11318:	d20a      	bcs.n	11330 <mp_quicksort+0xc8>
            mp_obj_t x = h[0];
   1131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1131c:	681b      	ldr	r3, [r3, #0]
   1131e:	61bb      	str	r3, [r7, #24]
            h[0] = t[0];
   11320:	6a3b      	ldr	r3, [r7, #32]
   11322:	681a      	ldr	r2, [r3, #0]
   11324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11326:	601a      	str	r2, [r3, #0]
            t[0] = x;
   11328:	6a3b      	ldr	r3, [r7, #32]
   1132a:	69ba      	ldr	r2, [r7, #24]
   1132c:	601a      	str	r2, [r3, #0]
        }
   1132e:	e7b6      	b.n	1129e <mp_quicksort+0x36>
            if (h >= t) break;
   11330:	bf00      	nop
        mp_obj_t x = h[0];
   11332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11334:	681b      	ldr	r3, [r3, #0]
   11336:	617b      	str	r3, [r7, #20]
        h[0] = tail[0];
   11338:	68bb      	ldr	r3, [r7, #8]
   1133a:	681a      	ldr	r2, [r3, #0]
   1133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1133e:	601a      	str	r2, [r3, #0]
        tail[0] = x;
   11340:	68bb      	ldr	r3, [r7, #8]
   11342:	697a      	ldr	r2, [r7, #20]
   11344:	601a      	str	r2, [r3, #0]
        // do the smaller recursive call first, to keep stack within O(log(N))
        if (t - head < tail - h - 1) {
   11346:	6a3a      	ldr	r2, [r7, #32]
   11348:	68fb      	ldr	r3, [r7, #12]
   1134a:	1ad3      	subs	r3, r2, r3
   1134c:	109b      	asrs	r3, r3, #2
   1134e:	4619      	mov	r1, r3
   11350:	68ba      	ldr	r2, [r7, #8]
   11352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11354:	1ad3      	subs	r3, r2, r3
   11356:	109b      	asrs	r3, r3, #2
   11358:	3b01      	subs	r3, #1
   1135a:	4299      	cmp	r1, r3
   1135c:	da09      	bge.n	11372 <mp_quicksort+0x10a>
            mp_quicksort(head, t, key_fn, binop_less_result);
   1135e:	683b      	ldr	r3, [r7, #0]
   11360:	687a      	ldr	r2, [r7, #4]
   11362:	6a39      	ldr	r1, [r7, #32]
   11364:	68f8      	ldr	r0, [r7, #12]
   11366:	f7ff ff7f 	bl	11268 <mp_quicksort>
            head = h + 1;
   1136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1136c:	3304      	adds	r3, #4
   1136e:	60fb      	str	r3, [r7, #12]
   11370:	e008      	b.n	11384 <mp_quicksort+0x11c>
        } else {
            mp_quicksort(h + 1, tail, key_fn, binop_less_result);
   11372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11374:	1d18      	adds	r0, r3, #4
   11376:	683b      	ldr	r3, [r7, #0]
   11378:	687a      	ldr	r2, [r7, #4]
   1137a:	68b9      	ldr	r1, [r7, #8]
   1137c:	f7ff ff74 	bl	11268 <mp_quicksort>
            tail = t;
   11380:	6a3b      	ldr	r3, [r7, #32]
   11382:	60bb      	str	r3, [r7, #8]
    while (head < tail) {
   11384:	68fa      	ldr	r2, [r7, #12]
   11386:	68bb      	ldr	r3, [r7, #8]
   11388:	429a      	cmp	r2, r3
   1138a:	f4ff af75 	bcc.w	11278 <mp_quicksort+0x10>
        }
    }
}
   1138e:	bf00      	nop
   11390:	3728      	adds	r7, #40	; 0x28
   11392:	46bd      	mov	sp, r7
   11394:	bd80      	pop	{r7, pc}
   11396:	bf00      	nop

00011398 <mp_obj_list_sort>:

// TODO Python defines sort to be stable but ours is not
mp_obj_t mp_obj_list_sort(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   11398:	b580      	push	{r7, lr}
   1139a:	b08a      	sub	sp, #40	; 0x28
   1139c:	af02      	add	r7, sp, #8
   1139e:	60f8      	str	r0, [r7, #12]
   113a0:	60b9      	str	r1, [r7, #8]
   113a2:	607a      	str	r2, [r7, #4]

    // parse args
    struct {
        mp_arg_val_t key, reverse;
    } args;
    mp_arg_parse_all(n_args - 1, pos_args + 1, kw_args,
   113a4:	68fb      	ldr	r3, [r7, #12]
   113a6:	1e58      	subs	r0, r3, #1
   113a8:	68bb      	ldr	r3, [r7, #8]
   113aa:	1d19      	adds	r1, r3, #4
   113ac:	f107 0314 	add.w	r3, r7, #20
   113b0:	9301      	str	r3, [sp, #4]
   113b2:	4b22      	ldr	r3, [pc, #136]	; (1143c <mp_obj_list_sort+0xa4>)
   113b4:	9300      	str	r3, [sp, #0]
   113b6:	2302      	movs	r3, #2
   113b8:	687a      	ldr	r2, [r7, #4]
   113ba:	f7fb fe63 	bl	d084 <mp_arg_parse_all>
        MP_ARRAY_SIZE(allowed_args), allowed_args, (mp_arg_val_t*)&args);

    mp_check_self(MP_OBJ_IS_TYPE(pos_args[0], &mp_type_list));
   113be:	68bb      	ldr	r3, [r7, #8]
   113c0:	681b      	ldr	r3, [r3, #0]
   113c2:	4618      	mov	r0, r3
   113c4:	f7ff fbe6 	bl	10b94 <MP_OBJ_IS_OBJ>
   113c8:	4603      	mov	r3, r0
   113ca:	f083 0301 	eor.w	r3, r3, #1
   113ce:	b2db      	uxtb	r3, r3
   113d0:	2b00      	cmp	r3, #0
   113d2:	d105      	bne.n	113e0 <mp_obj_list_sort+0x48>
   113d4:	68bb      	ldr	r3, [r7, #8]
   113d6:	681b      	ldr	r3, [r3, #0]
   113d8:	681b      	ldr	r3, [r3, #0]
   113da:	4a19      	ldr	r2, [pc, #100]	; (11440 <mp_obj_list_sort+0xa8>)
   113dc:	4293      	cmp	r3, r2
   113de:	d006      	beq.n	113ee <mp_obj_list_sort+0x56>
   113e0:	4b18      	ldr	r3, [pc, #96]	; (11444 <mp_obj_list_sort+0xac>)
   113e2:	4a19      	ldr	r2, [pc, #100]	; (11448 <mp_obj_list_sort+0xb0>)
   113e4:	f44f 71a4 	mov.w	r1, #328	; 0x148
   113e8:	4818      	ldr	r0, [pc, #96]	; (1144c <mp_obj_list_sort+0xb4>)
   113ea:	f009 ffbf 	bl	1b36c <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(pos_args[0]);
   113ee:	68bb      	ldr	r3, [r7, #8]
   113f0:	681b      	ldr	r3, [r3, #0]
   113f2:	61fb      	str	r3, [r7, #28]

    if (self->len > 1) {
   113f4:	69fb      	ldr	r3, [r7, #28]
   113f6:	689b      	ldr	r3, [r3, #8]
   113f8:	2b01      	cmp	r3, #1
   113fa:	d919      	bls.n	11430 <mp_obj_list_sort+0x98>
        mp_quicksort(self->items, self->items + self->len - 1,
   113fc:	69fb      	ldr	r3, [r7, #28]
   113fe:	68d8      	ldr	r0, [r3, #12]
   11400:	69fb      	ldr	r3, [r7, #28]
   11402:	68da      	ldr	r2, [r3, #12]
   11404:	69fb      	ldr	r3, [r7, #28]
   11406:	689b      	ldr	r3, [r3, #8]
   11408:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1140c:	3b01      	subs	r3, #1
   1140e:	009b      	lsls	r3, r3, #2
   11410:	18d1      	adds	r1, r2, r3
                     args.key.u_obj == mp_const_none ? MP_OBJ_NULL : args.key.u_obj,
   11412:	697b      	ldr	r3, [r7, #20]
        mp_quicksort(self->items, self->items + self->len - 1,
   11414:	4a0e      	ldr	r2, [pc, #56]	; (11450 <mp_obj_list_sort+0xb8>)
   11416:	4293      	cmp	r3, r2
   11418:	d001      	beq.n	1141e <mp_obj_list_sort+0x86>
   1141a:	697a      	ldr	r2, [r7, #20]
   1141c:	e000      	b.n	11420 <mp_obj_list_sort+0x88>
   1141e:	2200      	movs	r2, #0
                     args.reverse.u_bool ? mp_const_false : mp_const_true);
   11420:	7e3b      	ldrb	r3, [r7, #24]
        mp_quicksort(self->items, self->items + self->len - 1,
   11422:	2b00      	cmp	r3, #0
   11424:	d001      	beq.n	1142a <mp_obj_list_sort+0x92>
   11426:	4b0b      	ldr	r3, [pc, #44]	; (11454 <mp_obj_list_sort+0xbc>)
   11428:	e000      	b.n	1142c <mp_obj_list_sort+0x94>
   1142a:	4b0b      	ldr	r3, [pc, #44]	; (11458 <mp_obj_list_sort+0xc0>)
   1142c:	f7ff ff1c 	bl	11268 <mp_quicksort>
    }

    return mp_const_none;
   11430:	4b07      	ldr	r3, [pc, #28]	; (11450 <mp_obj_list_sort+0xb8>)
}
   11432:	4618      	mov	r0, r3
   11434:	3720      	adds	r7, #32
   11436:	46bd      	mov	sp, r7
   11438:	bd80      	pop	{r7, pc}
   1143a:	bf00      	nop
   1143c:	00021264 	.word	0x00021264
   11440:	000211fc 	.word	0x000211fc
   11444:	000210cc 	.word	0x000210cc
   11448:	00021274 	.word	0x00021274
   1144c:	00021048 	.word	0x00021048
   11450:	00021534 	.word	0x00021534
   11454:	0001fc3c 	.word	0x0001fc3c
   11458:	0001fc44 	.word	0x0001fc44

0001145c <list_clear>:

STATIC mp_obj_t list_clear(mp_obj_t self_in) {
   1145c:	b580      	push	{r7, lr}
   1145e:	b084      	sub	sp, #16
   11460:	af00      	add	r7, sp, #0
   11462:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11464:	6878      	ldr	r0, [r7, #4]
   11466:	f7ff fb95 	bl	10b94 <MP_OBJ_IS_OBJ>
   1146a:	4603      	mov	r3, r0
   1146c:	f083 0301 	eor.w	r3, r3, #1
   11470:	b2db      	uxtb	r3, r3
   11472:	2b00      	cmp	r3, #0
   11474:	d104      	bne.n	11480 <list_clear+0x24>
   11476:	687b      	ldr	r3, [r7, #4]
   11478:	681b      	ldr	r3, [r3, #0]
   1147a:	4a14      	ldr	r2, [pc, #80]	; (114cc <list_clear+0x70>)
   1147c:	4293      	cmp	r3, r2
   1147e:	d006      	beq.n	1148e <list_clear+0x32>
   11480:	4b13      	ldr	r3, [pc, #76]	; (114d0 <list_clear+0x74>)
   11482:	4a14      	ldr	r2, [pc, #80]	; (114d4 <list_clear+0x78>)
   11484:	f240 1155 	movw	r1, #341	; 0x155
   11488:	4813      	ldr	r0, [pc, #76]	; (114d8 <list_clear+0x7c>)
   1148a:	f009 ff6f 	bl	1b36c <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   1148e:	687b      	ldr	r3, [r7, #4]
   11490:	60fb      	str	r3, [r7, #12]
    self->len = 0;
   11492:	68fb      	ldr	r3, [r7, #12]
   11494:	2200      	movs	r2, #0
   11496:	609a      	str	r2, [r3, #8]
    self->items = m_renew(mp_obj_t, self->items, self->alloc, LIST_MIN_ALLOC);
   11498:	68fb      	ldr	r3, [r7, #12]
   1149a:	68db      	ldr	r3, [r3, #12]
   1149c:	2110      	movs	r1, #16
   1149e:	4618      	mov	r0, r3
   114a0:	f7ee ff70 	bl	384 <m_realloc>
   114a4:	4602      	mov	r2, r0
   114a6:	68fb      	ldr	r3, [r7, #12]
   114a8:	60da      	str	r2, [r3, #12]
    self->alloc = LIST_MIN_ALLOC;
   114aa:	68fb      	ldr	r3, [r7, #12]
   114ac:	2204      	movs	r2, #4
   114ae:	605a      	str	r2, [r3, #4]
    mp_seq_clear(self->items, 0, self->alloc, sizeof(*self->items));
   114b0:	68fb      	ldr	r3, [r7, #12]
   114b2:	68d8      	ldr	r0, [r3, #12]
   114b4:	68fb      	ldr	r3, [r7, #12]
   114b6:	685b      	ldr	r3, [r3, #4]
   114b8:	009b      	lsls	r3, r3, #2
   114ba:	461a      	mov	r2, r3
   114bc:	2100      	movs	r1, #0
   114be:	f00a fd9d 	bl	1bffc <memset>
    return mp_const_none;
   114c2:	4b06      	ldr	r3, [pc, #24]	; (114dc <list_clear+0x80>)
}
   114c4:	4618      	mov	r0, r3
   114c6:	3710      	adds	r7, #16
   114c8:	46bd      	mov	sp, r7
   114ca:	bd80      	pop	{r7, pc}
   114cc:	000211fc 	.word	0x000211fc
   114d0:	00020fec 	.word	0x00020fec
   114d4:	00021288 	.word	0x00021288
   114d8:	00021048 	.word	0x00021048
   114dc:	00021534 	.word	0x00021534

000114e0 <list_copy>:

STATIC mp_obj_t list_copy(mp_obj_t self_in) {
   114e0:	b580      	push	{r7, lr}
   114e2:	b084      	sub	sp, #16
   114e4:	af00      	add	r7, sp, #0
   114e6:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   114e8:	6878      	ldr	r0, [r7, #4]
   114ea:	f7ff fb53 	bl	10b94 <MP_OBJ_IS_OBJ>
   114ee:	4603      	mov	r3, r0
   114f0:	f083 0301 	eor.w	r3, r3, #1
   114f4:	b2db      	uxtb	r3, r3
   114f6:	2b00      	cmp	r3, #0
   114f8:	d104      	bne.n	11504 <list_copy+0x24>
   114fa:	687b      	ldr	r3, [r7, #4]
   114fc:	681b      	ldr	r3, [r3, #0]
   114fe:	4a0c      	ldr	r2, [pc, #48]	; (11530 <list_copy+0x50>)
   11500:	4293      	cmp	r3, r2
   11502:	d006      	beq.n	11512 <list_copy+0x32>
   11504:	4b0b      	ldr	r3, [pc, #44]	; (11534 <list_copy+0x54>)
   11506:	4a0c      	ldr	r2, [pc, #48]	; (11538 <list_copy+0x58>)
   11508:	f240 115f 	movw	r1, #351	; 0x15f
   1150c:	480b      	ldr	r0, [pc, #44]	; (1153c <list_copy+0x5c>)
   1150e:	f009 ff2d 	bl	1b36c <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11512:	687b      	ldr	r3, [r7, #4]
   11514:	60fb      	str	r3, [r7, #12]
    return mp_obj_new_list(self->len, self->items);
   11516:	68fb      	ldr	r3, [r7, #12]
   11518:	689a      	ldr	r2, [r3, #8]
   1151a:	68fb      	ldr	r3, [r7, #12]
   1151c:	68db      	ldr	r3, [r3, #12]
   1151e:	4619      	mov	r1, r3
   11520:	4610      	mov	r0, r2
   11522:	f000 f9bd 	bl	118a0 <mp_obj_new_list>
   11526:	4603      	mov	r3, r0
}
   11528:	4618      	mov	r0, r3
   1152a:	3710      	adds	r7, #16
   1152c:	46bd      	mov	sp, r7
   1152e:	bd80      	pop	{r7, pc}
   11530:	000211fc 	.word	0x000211fc
   11534:	00020fec 	.word	0x00020fec
   11538:	00021294 	.word	0x00021294
   1153c:	00021048 	.word	0x00021048

00011540 <list_count>:

STATIC mp_obj_t list_count(mp_obj_t self_in, mp_obj_t value) {
   11540:	b580      	push	{r7, lr}
   11542:	b084      	sub	sp, #16
   11544:	af00      	add	r7, sp, #0
   11546:	6078      	str	r0, [r7, #4]
   11548:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   1154a:	6878      	ldr	r0, [r7, #4]
   1154c:	f7ff fb22 	bl	10b94 <MP_OBJ_IS_OBJ>
   11550:	4603      	mov	r3, r0
   11552:	f083 0301 	eor.w	r3, r3, #1
   11556:	b2db      	uxtb	r3, r3
   11558:	2b00      	cmp	r3, #0
   1155a:	d104      	bne.n	11566 <list_count+0x26>
   1155c:	687b      	ldr	r3, [r7, #4]
   1155e:	681b      	ldr	r3, [r3, #0]
   11560:	4a0c      	ldr	r2, [pc, #48]	; (11594 <list_count+0x54>)
   11562:	4293      	cmp	r3, r2
   11564:	d006      	beq.n	11574 <list_count+0x34>
   11566:	4b0c      	ldr	r3, [pc, #48]	; (11598 <list_count+0x58>)
   11568:	4a0c      	ldr	r2, [pc, #48]	; (1159c <list_count+0x5c>)
   1156a:	f240 1165 	movw	r1, #357	; 0x165
   1156e:	480c      	ldr	r0, [pc, #48]	; (115a0 <list_count+0x60>)
   11570:	f009 fefc 	bl	1b36c <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11574:	687b      	ldr	r3, [r7, #4]
   11576:	60fb      	str	r3, [r7, #12]
    return mp_seq_count_obj(self->items, self->len, value);
   11578:	68fb      	ldr	r3, [r7, #12]
   1157a:	68d8      	ldr	r0, [r3, #12]
   1157c:	68fb      	ldr	r3, [r7, #12]
   1157e:	689b      	ldr	r3, [r3, #8]
   11580:	683a      	ldr	r2, [r7, #0]
   11582:	4619      	mov	r1, r3
   11584:	f006 fa7a 	bl	17a7c <mp_seq_count_obj>
   11588:	4603      	mov	r3, r0
}
   1158a:	4618      	mov	r0, r3
   1158c:	3710      	adds	r7, #16
   1158e:	46bd      	mov	sp, r7
   11590:	bd80      	pop	{r7, pc}
   11592:	bf00      	nop
   11594:	000211fc 	.word	0x000211fc
   11598:	00020fec 	.word	0x00020fec
   1159c:	000212a0 	.word	0x000212a0
   115a0:	00021048 	.word	0x00021048

000115a4 <list_index>:

STATIC mp_obj_t list_index(size_t n_args, const mp_obj_t *args) {
   115a4:	b580      	push	{r7, lr}
   115a6:	b084      	sub	sp, #16
   115a8:	af00      	add	r7, sp, #0
   115aa:	6078      	str	r0, [r7, #4]
   115ac:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_list));
   115ae:	683b      	ldr	r3, [r7, #0]
   115b0:	681b      	ldr	r3, [r3, #0]
   115b2:	4618      	mov	r0, r3
   115b4:	f7ff faee 	bl	10b94 <MP_OBJ_IS_OBJ>
   115b8:	4603      	mov	r3, r0
   115ba:	f083 0301 	eor.w	r3, r3, #1
   115be:	b2db      	uxtb	r3, r3
   115c0:	2b00      	cmp	r3, #0
   115c2:	d105      	bne.n	115d0 <list_index+0x2c>
   115c4:	683b      	ldr	r3, [r7, #0]
   115c6:	681b      	ldr	r3, [r3, #0]
   115c8:	681b      	ldr	r3, [r3, #0]
   115ca:	4a0d      	ldr	r2, [pc, #52]	; (11600 <list_index+0x5c>)
   115cc:	4293      	cmp	r3, r2
   115ce:	d006      	beq.n	115de <list_index+0x3a>
   115d0:	4b0c      	ldr	r3, [pc, #48]	; (11604 <list_index+0x60>)
   115d2:	4a0d      	ldr	r2, [pc, #52]	; (11608 <list_index+0x64>)
   115d4:	f240 116b 	movw	r1, #363	; 0x16b
   115d8:	480c      	ldr	r0, [pc, #48]	; (1160c <list_index+0x68>)
   115da:	f009 fec7 	bl	1b36c <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(args[0]);
   115de:	683b      	ldr	r3, [r7, #0]
   115e0:	681b      	ldr	r3, [r3, #0]
   115e2:	60fb      	str	r3, [r7, #12]
    return mp_seq_index_obj(self->items, self->len, n_args, args);
   115e4:	68fb      	ldr	r3, [r7, #12]
   115e6:	68d8      	ldr	r0, [r3, #12]
   115e8:	68fb      	ldr	r3, [r7, #12]
   115ea:	6899      	ldr	r1, [r3, #8]
   115ec:	683b      	ldr	r3, [r7, #0]
   115ee:	687a      	ldr	r2, [r7, #4]
   115f0:	f006 f9f4 	bl	179dc <mp_seq_index_obj>
   115f4:	4603      	mov	r3, r0
}
   115f6:	4618      	mov	r0, r3
   115f8:	3710      	adds	r7, #16
   115fa:	46bd      	mov	sp, r7
   115fc:	bd80      	pop	{r7, pc}
   115fe:	bf00      	nop
   11600:	000211fc 	.word	0x000211fc
   11604:	0002105c 	.word	0x0002105c
   11608:	000212ac 	.word	0x000212ac
   1160c:	00021048 	.word	0x00021048

00011610 <list_insert>:

STATIC mp_obj_t list_insert(mp_obj_t self_in, mp_obj_t idx, mp_obj_t obj) {
   11610:	b580      	push	{r7, lr}
   11612:	b088      	sub	sp, #32
   11614:	af00      	add	r7, sp, #0
   11616:	60f8      	str	r0, [r7, #12]
   11618:	60b9      	str	r1, [r7, #8]
   1161a:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   1161c:	68f8      	ldr	r0, [r7, #12]
   1161e:	f7ff fab9 	bl	10b94 <MP_OBJ_IS_OBJ>
   11622:	4603      	mov	r3, r0
   11624:	f083 0301 	eor.w	r3, r3, #1
   11628:	b2db      	uxtb	r3, r3
   1162a:	2b00      	cmp	r3, #0
   1162c:	d104      	bne.n	11638 <list_insert+0x28>
   1162e:	68fb      	ldr	r3, [r7, #12]
   11630:	681b      	ldr	r3, [r3, #0]
   11632:	4a27      	ldr	r2, [pc, #156]	; (116d0 <list_insert+0xc0>)
   11634:	4293      	cmp	r3, r2
   11636:	d006      	beq.n	11646 <list_insert+0x36>
   11638:	4b26      	ldr	r3, [pc, #152]	; (116d4 <list_insert+0xc4>)
   1163a:	4a27      	ldr	r2, [pc, #156]	; (116d8 <list_insert+0xc8>)
   1163c:	f240 1171 	movw	r1, #369	; 0x171
   11640:	4826      	ldr	r0, [pc, #152]	; (116dc <list_insert+0xcc>)
   11642:	f009 fe93 	bl	1b36c <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11646:	68fb      	ldr	r3, [r7, #12]
   11648:	617b      	str	r3, [r7, #20]
    // insert has its own strange index logic
    mp_int_t index = MP_OBJ_SMALL_INT_VALUE(idx);
   1164a:	68bb      	ldr	r3, [r7, #8]
   1164c:	105b      	asrs	r3, r3, #1
   1164e:	61fb      	str	r3, [r7, #28]
    if (index < 0) {
   11650:	69fb      	ldr	r3, [r7, #28]
   11652:	2b00      	cmp	r3, #0
   11654:	da04      	bge.n	11660 <list_insert+0x50>
         index += self->len;
   11656:	697b      	ldr	r3, [r7, #20]
   11658:	689a      	ldr	r2, [r3, #8]
   1165a:	69fb      	ldr	r3, [r7, #28]
   1165c:	4413      	add	r3, r2
   1165e:	61fb      	str	r3, [r7, #28]
    }
    if (index < 0) {
   11660:	69fb      	ldr	r3, [r7, #28]
   11662:	2b00      	cmp	r3, #0
   11664:	da01      	bge.n	1166a <list_insert+0x5a>
         index = 0;
   11666:	2300      	movs	r3, #0
   11668:	61fb      	str	r3, [r7, #28]
    }
    if ((size_t)index > self->len) {
   1166a:	697b      	ldr	r3, [r7, #20]
   1166c:	689a      	ldr	r2, [r3, #8]
   1166e:	69fb      	ldr	r3, [r7, #28]
   11670:	429a      	cmp	r2, r3
   11672:	d202      	bcs.n	1167a <list_insert+0x6a>
         index = self->len;
   11674:	697b      	ldr	r3, [r7, #20]
   11676:	689b      	ldr	r3, [r3, #8]
   11678:	61fb      	str	r3, [r7, #28]
    }

    mp_obj_list_append(self_in, mp_const_none);
   1167a:	4919      	ldr	r1, [pc, #100]	; (116e0 <list_insert+0xd0>)
   1167c:	68f8      	ldr	r0, [r7, #12]
   1167e:	f7ff fc7d 	bl	10f7c <mp_obj_list_append>

    for (mp_int_t i = self->len-1; i > index; i--) {
   11682:	697b      	ldr	r3, [r7, #20]
   11684:	689b      	ldr	r3, [r3, #8]
   11686:	3b01      	subs	r3, #1
   11688:	61bb      	str	r3, [r7, #24]
   1168a:	e011      	b.n	116b0 <list_insert+0xa0>
         self->items[i] = self->items[i-1];
   1168c:	697b      	ldr	r3, [r7, #20]
   1168e:	68da      	ldr	r2, [r3, #12]
   11690:	69bb      	ldr	r3, [r7, #24]
   11692:	009b      	lsls	r3, r3, #2
   11694:	441a      	add	r2, r3
   11696:	697b      	ldr	r3, [r7, #20]
   11698:	68d9      	ldr	r1, [r3, #12]
   1169a:	69bb      	ldr	r3, [r7, #24]
   1169c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   116a0:	3b01      	subs	r3, #1
   116a2:	009b      	lsls	r3, r3, #2
   116a4:	440b      	add	r3, r1
   116a6:	681b      	ldr	r3, [r3, #0]
   116a8:	6013      	str	r3, [r2, #0]
    for (mp_int_t i = self->len-1; i > index; i--) {
   116aa:	69bb      	ldr	r3, [r7, #24]
   116ac:	3b01      	subs	r3, #1
   116ae:	61bb      	str	r3, [r7, #24]
   116b0:	69ba      	ldr	r2, [r7, #24]
   116b2:	69fb      	ldr	r3, [r7, #28]
   116b4:	429a      	cmp	r2, r3
   116b6:	dce9      	bgt.n	1168c <list_insert+0x7c>
    }
    self->items[index] = obj;
   116b8:	697b      	ldr	r3, [r7, #20]
   116ba:	68da      	ldr	r2, [r3, #12]
   116bc:	69fb      	ldr	r3, [r7, #28]
   116be:	009b      	lsls	r3, r3, #2
   116c0:	4413      	add	r3, r2
   116c2:	687a      	ldr	r2, [r7, #4]
   116c4:	601a      	str	r2, [r3, #0]

    return mp_const_none;
   116c6:	4b06      	ldr	r3, [pc, #24]	; (116e0 <list_insert+0xd0>)
}
   116c8:	4618      	mov	r0, r3
   116ca:	3720      	adds	r7, #32
   116cc:	46bd      	mov	sp, r7
   116ce:	bd80      	pop	{r7, pc}
   116d0:	000211fc 	.word	0x000211fc
   116d4:	00020fec 	.word	0x00020fec
   116d8:	000212b8 	.word	0x000212b8
   116dc:	00021048 	.word	0x00021048
   116e0:	00021534 	.word	0x00021534

000116e4 <mp_obj_list_remove>:

mp_obj_t mp_obj_list_remove(mp_obj_t self_in, mp_obj_t value) {
   116e4:	b580      	push	{r7, lr}
   116e6:	b084      	sub	sp, #16
   116e8:	af00      	add	r7, sp, #0
   116ea:	6078      	str	r0, [r7, #4]
   116ec:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   116ee:	6878      	ldr	r0, [r7, #4]
   116f0:	f7ff fa50 	bl	10b94 <MP_OBJ_IS_OBJ>
   116f4:	4603      	mov	r3, r0
   116f6:	f083 0301 	eor.w	r3, r3, #1
   116fa:	b2db      	uxtb	r3, r3
   116fc:	2b00      	cmp	r3, #0
   116fe:	d104      	bne.n	1170a <mp_obj_list_remove+0x26>
   11700:	687b      	ldr	r3, [r7, #4]
   11702:	681b      	ldr	r3, [r3, #0]
   11704:	4a10      	ldr	r2, [pc, #64]	; (11748 <mp_obj_list_remove+0x64>)
   11706:	4293      	cmp	r3, r2
   11708:	d006      	beq.n	11718 <mp_obj_list_remove+0x34>
   1170a:	4b10      	ldr	r3, [pc, #64]	; (1174c <mp_obj_list_remove+0x68>)
   1170c:	4a10      	ldr	r2, [pc, #64]	; (11750 <mp_obj_list_remove+0x6c>)
   1170e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
   11712:	4810      	ldr	r0, [pc, #64]	; (11754 <mp_obj_list_remove+0x70>)
   11714:	f009 fe2a 	bl	1b36c <__assert_func>
    mp_obj_t args[] = {self_in, value};
   11718:	687b      	ldr	r3, [r7, #4]
   1171a:	60bb      	str	r3, [r7, #8]
   1171c:	683b      	ldr	r3, [r7, #0]
   1171e:	60fb      	str	r3, [r7, #12]
    args[1] = list_index(2, args);
   11720:	f107 0308 	add.w	r3, r7, #8
   11724:	4619      	mov	r1, r3
   11726:	2002      	movs	r0, #2
   11728:	f7ff ff3c 	bl	115a4 <list_index>
   1172c:	4603      	mov	r3, r0
   1172e:	60fb      	str	r3, [r7, #12]
    list_pop(2, args);
   11730:	f107 0308 	add.w	r3, r7, #8
   11734:	4619      	mov	r1, r3
   11736:	2002      	movs	r0, #2
   11738:	f7ff fd08 	bl	1114c <list_pop>

    return mp_const_none;
   1173c:	4b06      	ldr	r3, [pc, #24]	; (11758 <mp_obj_list_remove+0x74>)
}
   1173e:	4618      	mov	r0, r3
   11740:	3710      	adds	r7, #16
   11742:	46bd      	mov	sp, r7
   11744:	bd80      	pop	{r7, pc}
   11746:	bf00      	nop
   11748:	000211fc 	.word	0x000211fc
   1174c:	00020fec 	.word	0x00020fec
   11750:	000212c4 	.word	0x000212c4
   11754:	00021048 	.word	0x00021048
   11758:	00021534 	.word	0x00021534

0001175c <list_reverse>:

STATIC mp_obj_t list_reverse(mp_obj_t self_in) {
   1175c:	b580      	push	{r7, lr}
   1175e:	b086      	sub	sp, #24
   11760:	af00      	add	r7, sp, #0
   11762:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_list));
   11764:	6878      	ldr	r0, [r7, #4]
   11766:	f7ff fa15 	bl	10b94 <MP_OBJ_IS_OBJ>
   1176a:	4603      	mov	r3, r0
   1176c:	f083 0301 	eor.w	r3, r3, #1
   11770:	b2db      	uxtb	r3, r3
   11772:	2b00      	cmp	r3, #0
   11774:	d104      	bne.n	11780 <list_reverse+0x24>
   11776:	687b      	ldr	r3, [r7, #4]
   11778:	681b      	ldr	r3, [r3, #0]
   1177a:	4a23      	ldr	r2, [pc, #140]	; (11808 <list_reverse+0xac>)
   1177c:	4293      	cmp	r3, r2
   1177e:	d006      	beq.n	1178e <list_reverse+0x32>
   11780:	4b22      	ldr	r3, [pc, #136]	; (1180c <list_reverse+0xb0>)
   11782:	4a23      	ldr	r2, [pc, #140]	; (11810 <list_reverse+0xb4>)
   11784:	f240 1193 	movw	r1, #403	; 0x193
   11788:	4822      	ldr	r0, [pc, #136]	; (11814 <list_reverse+0xb8>)
   1178a:	f009 fdef 	bl	1b36c <__assert_func>
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   1178e:	687b      	ldr	r3, [r7, #4]
   11790:	613b      	str	r3, [r7, #16]

    mp_int_t len = self->len;
   11792:	693b      	ldr	r3, [r7, #16]
   11794:	689b      	ldr	r3, [r3, #8]
   11796:	60fb      	str	r3, [r7, #12]
    for (mp_int_t i = 0; i < len/2; i++) {
   11798:	2300      	movs	r3, #0
   1179a:	617b      	str	r3, [r7, #20]
   1179c:	e026      	b.n	117ec <list_reverse+0x90>
         mp_obj_t a = self->items[i];
   1179e:	693b      	ldr	r3, [r7, #16]
   117a0:	68da      	ldr	r2, [r3, #12]
   117a2:	697b      	ldr	r3, [r7, #20]
   117a4:	009b      	lsls	r3, r3, #2
   117a6:	4413      	add	r3, r2
   117a8:	681b      	ldr	r3, [r3, #0]
   117aa:	60bb      	str	r3, [r7, #8]
         self->items[i] = self->items[len-i-1];
   117ac:	693b      	ldr	r3, [r7, #16]
   117ae:	68da      	ldr	r2, [r3, #12]
   117b0:	697b      	ldr	r3, [r7, #20]
   117b2:	009b      	lsls	r3, r3, #2
   117b4:	441a      	add	r2, r3
   117b6:	693b      	ldr	r3, [r7, #16]
   117b8:	68d9      	ldr	r1, [r3, #12]
   117ba:	68f8      	ldr	r0, [r7, #12]
   117bc:	697b      	ldr	r3, [r7, #20]
   117be:	1ac3      	subs	r3, r0, r3
   117c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   117c4:	3b01      	subs	r3, #1
   117c6:	009b      	lsls	r3, r3, #2
   117c8:	440b      	add	r3, r1
   117ca:	681b      	ldr	r3, [r3, #0]
   117cc:	6013      	str	r3, [r2, #0]
         self->items[len-i-1] = a;
   117ce:	693b      	ldr	r3, [r7, #16]
   117d0:	68da      	ldr	r2, [r3, #12]
   117d2:	68f9      	ldr	r1, [r7, #12]
   117d4:	697b      	ldr	r3, [r7, #20]
   117d6:	1acb      	subs	r3, r1, r3
   117d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   117dc:	3b01      	subs	r3, #1
   117de:	009b      	lsls	r3, r3, #2
   117e0:	4413      	add	r3, r2
   117e2:	68ba      	ldr	r2, [r7, #8]
   117e4:	601a      	str	r2, [r3, #0]
    for (mp_int_t i = 0; i < len/2; i++) {
   117e6:	697b      	ldr	r3, [r7, #20]
   117e8:	3301      	adds	r3, #1
   117ea:	617b      	str	r3, [r7, #20]
   117ec:	68fb      	ldr	r3, [r7, #12]
   117ee:	0fda      	lsrs	r2, r3, #31
   117f0:	4413      	add	r3, r2
   117f2:	105b      	asrs	r3, r3, #1
   117f4:	461a      	mov	r2, r3
   117f6:	697b      	ldr	r3, [r7, #20]
   117f8:	429a      	cmp	r2, r3
   117fa:	dcd0      	bgt.n	1179e <list_reverse+0x42>
    }

    return mp_const_none;
   117fc:	4b06      	ldr	r3, [pc, #24]	; (11818 <list_reverse+0xbc>)
}
   117fe:	4618      	mov	r0, r3
   11800:	3718      	adds	r7, #24
   11802:	46bd      	mov	sp, r7
   11804:	bd80      	pop	{r7, pc}
   11806:	bf00      	nop
   11808:	000211fc 	.word	0x000211fc
   1180c:	00020fec 	.word	0x00020fec
   11810:	000212d8 	.word	0x000212d8
   11814:	00021048 	.word	0x00021048
   11818:	00021534 	.word	0x00021534

0001181c <mp_obj_list_init>:
    .subscr = list_subscr,
    .getiter = list_getiter,
    .locals_dict = (mp_obj_dict_t*)&list_locals_dict,
};

void mp_obj_list_init(mp_obj_list_t *o, size_t n) {
   1181c:	b580      	push	{r7, lr}
   1181e:	b082      	sub	sp, #8
   11820:	af00      	add	r7, sp, #0
   11822:	6078      	str	r0, [r7, #4]
   11824:	6039      	str	r1, [r7, #0]
    o->base.type = &mp_type_list;
   11826:	687b      	ldr	r3, [r7, #4]
   11828:	4a13      	ldr	r2, [pc, #76]	; (11878 <mp_obj_list_init+0x5c>)
   1182a:	601a      	str	r2, [r3, #0]
    o->alloc = n < LIST_MIN_ALLOC ? LIST_MIN_ALLOC : n;
   1182c:	683b      	ldr	r3, [r7, #0]
   1182e:	2b04      	cmp	r3, #4
   11830:	bf38      	it	cc
   11832:	2304      	movcc	r3, #4
   11834:	461a      	mov	r2, r3
   11836:	687b      	ldr	r3, [r7, #4]
   11838:	605a      	str	r2, [r3, #4]
    o->len = n;
   1183a:	687b      	ldr	r3, [r7, #4]
   1183c:	683a      	ldr	r2, [r7, #0]
   1183e:	609a      	str	r2, [r3, #8]
    o->items = m_new(mp_obj_t, o->alloc);
   11840:	687b      	ldr	r3, [r7, #4]
   11842:	685b      	ldr	r3, [r3, #4]
   11844:	009b      	lsls	r3, r3, #2
   11846:	4618      	mov	r0, r3
   11848:	f7ee fd68 	bl	31c <m_malloc>
   1184c:	4602      	mov	r2, r0
   1184e:	687b      	ldr	r3, [r7, #4]
   11850:	60da      	str	r2, [r3, #12]
    mp_seq_clear(o->items, n, o->alloc, sizeof(*o->items));
   11852:	687b      	ldr	r3, [r7, #4]
   11854:	68da      	ldr	r2, [r3, #12]
   11856:	683b      	ldr	r3, [r7, #0]
   11858:	009b      	lsls	r3, r3, #2
   1185a:	18d0      	adds	r0, r2, r3
   1185c:	687b      	ldr	r3, [r7, #4]
   1185e:	685a      	ldr	r2, [r3, #4]
   11860:	683b      	ldr	r3, [r7, #0]
   11862:	1ad3      	subs	r3, r2, r3
   11864:	009b      	lsls	r3, r3, #2
   11866:	461a      	mov	r2, r3
   11868:	2100      	movs	r1, #0
   1186a:	f00a fbc7 	bl	1bffc <memset>
}
   1186e:	bf00      	nop
   11870:	3708      	adds	r7, #8
   11872:	46bd      	mov	sp, r7
   11874:	bd80      	pop	{r7, pc}
   11876:	bf00      	nop
   11878:	000211fc 	.word	0x000211fc

0001187c <list_new>:

STATIC mp_obj_list_t *list_new(size_t n) {
   1187c:	b580      	push	{r7, lr}
   1187e:	b084      	sub	sp, #16
   11880:	af00      	add	r7, sp, #0
   11882:	6078      	str	r0, [r7, #4]
    mp_obj_list_t *o = m_new_obj(mp_obj_list_t);
   11884:	2010      	movs	r0, #16
   11886:	f7ee fd49 	bl	31c <m_malloc>
   1188a:	60f8      	str	r0, [r7, #12]
    mp_obj_list_init(o, n);
   1188c:	6879      	ldr	r1, [r7, #4]
   1188e:	68f8      	ldr	r0, [r7, #12]
   11890:	f7ff ffc4 	bl	1181c <mp_obj_list_init>
    return o;
   11894:	68fb      	ldr	r3, [r7, #12]
}
   11896:	4618      	mov	r0, r3
   11898:	3710      	adds	r7, #16
   1189a:	46bd      	mov	sp, r7
   1189c:	bd80      	pop	{r7, pc}
   1189e:	bf00      	nop

000118a0 <mp_obj_new_list>:

mp_obj_t mp_obj_new_list(size_t n, mp_obj_t *items) {
   118a0:	b580      	push	{r7, lr}
   118a2:	b084      	sub	sp, #16
   118a4:	af00      	add	r7, sp, #0
   118a6:	6078      	str	r0, [r7, #4]
   118a8:	6039      	str	r1, [r7, #0]
    mp_obj_list_t *o = list_new(n);
   118aa:	6878      	ldr	r0, [r7, #4]
   118ac:	f7ff ffe6 	bl	1187c <list_new>
   118b0:	60b8      	str	r0, [r7, #8]
    if (items != NULL) {
   118b2:	683b      	ldr	r3, [r7, #0]
   118b4:	2b00      	cmp	r3, #0
   118b6:	d014      	beq.n	118e2 <mp_obj_new_list+0x42>
        for (size_t i = 0; i < n; i++) {
   118b8:	2300      	movs	r3, #0
   118ba:	60fb      	str	r3, [r7, #12]
   118bc:	e00d      	b.n	118da <mp_obj_new_list+0x3a>
            o->items[i] = items[i];
   118be:	68bb      	ldr	r3, [r7, #8]
   118c0:	68da      	ldr	r2, [r3, #12]
   118c2:	68fb      	ldr	r3, [r7, #12]
   118c4:	009b      	lsls	r3, r3, #2
   118c6:	4413      	add	r3, r2
   118c8:	68fa      	ldr	r2, [r7, #12]
   118ca:	0092      	lsls	r2, r2, #2
   118cc:	6839      	ldr	r1, [r7, #0]
   118ce:	440a      	add	r2, r1
   118d0:	6812      	ldr	r2, [r2, #0]
   118d2:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < n; i++) {
   118d4:	68fb      	ldr	r3, [r7, #12]
   118d6:	3301      	adds	r3, #1
   118d8:	60fb      	str	r3, [r7, #12]
   118da:	68fa      	ldr	r2, [r7, #12]
   118dc:	687b      	ldr	r3, [r7, #4]
   118de:	429a      	cmp	r2, r3
   118e0:	d3ed      	bcc.n	118be <mp_obj_new_list+0x1e>
        }
    }
    return MP_OBJ_FROM_PTR(o);
   118e2:	68bb      	ldr	r3, [r7, #8]
}
   118e4:	4618      	mov	r0, r3
   118e6:	3710      	adds	r7, #16
   118e8:	46bd      	mov	sp, r7
   118ea:	bd80      	pop	{r7, pc}

000118ec <mp_obj_list_get>:

void mp_obj_list_get(mp_obj_t self_in, size_t *len, mp_obj_t **items) {
   118ec:	b480      	push	{r7}
   118ee:	b087      	sub	sp, #28
   118f0:	af00      	add	r7, sp, #0
   118f2:	60f8      	str	r0, [r7, #12]
   118f4:	60b9      	str	r1, [r7, #8]
   118f6:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   118f8:	68fb      	ldr	r3, [r7, #12]
   118fa:	617b      	str	r3, [r7, #20]
    *len = self->len;
   118fc:	697b      	ldr	r3, [r7, #20]
   118fe:	689a      	ldr	r2, [r3, #8]
   11900:	68bb      	ldr	r3, [r7, #8]
   11902:	601a      	str	r2, [r3, #0]
    *items = self->items;
   11904:	697b      	ldr	r3, [r7, #20]
   11906:	68da      	ldr	r2, [r3, #12]
   11908:	687b      	ldr	r3, [r7, #4]
   1190a:	601a      	str	r2, [r3, #0]
}
   1190c:	bf00      	nop
   1190e:	371c      	adds	r7, #28
   11910:	46bd      	mov	sp, r7
   11912:	f85d 7b04 	ldr.w	r7, [sp], #4
   11916:	4770      	bx	lr

00011918 <mp_obj_list_set_len>:

void mp_obj_list_set_len(mp_obj_t self_in, size_t len) {
   11918:	b480      	push	{r7}
   1191a:	b085      	sub	sp, #20
   1191c:	af00      	add	r7, sp, #0
   1191e:	6078      	str	r0, [r7, #4]
   11920:	6039      	str	r1, [r7, #0]
    // trust that the caller knows what it's doing
    // TODO realloc if len got much smaller than alloc
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11922:	687b      	ldr	r3, [r7, #4]
   11924:	60fb      	str	r3, [r7, #12]
    self->len = len;
   11926:	68fb      	ldr	r3, [r7, #12]
   11928:	683a      	ldr	r2, [r7, #0]
   1192a:	609a      	str	r2, [r3, #8]
}
   1192c:	bf00      	nop
   1192e:	3714      	adds	r7, #20
   11930:	46bd      	mov	sp, r7
   11932:	f85d 7b04 	ldr.w	r7, [sp], #4
   11936:	4770      	bx	lr

00011938 <mp_obj_list_store>:

void mp_obj_list_store(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   11938:	b580      	push	{r7, lr}
   1193a:	b086      	sub	sp, #24
   1193c:	af00      	add	r7, sp, #0
   1193e:	60f8      	str	r0, [r7, #12]
   11940:	60b9      	str	r1, [r7, #8]
   11942:	607a      	str	r2, [r7, #4]
    mp_obj_list_t *self = MP_OBJ_TO_PTR(self_in);
   11944:	68fb      	ldr	r3, [r7, #12]
   11946:	617b      	str	r3, [r7, #20]
    size_t i = mp_get_index(self->base.type, self->len, index, false);
   11948:	697b      	ldr	r3, [r7, #20]
   1194a:	6818      	ldr	r0, [r3, #0]
   1194c:	697b      	ldr	r3, [r7, #20]
   1194e:	6899      	ldr	r1, [r3, #8]
   11950:	2300      	movs	r3, #0
   11952:	68ba      	ldr	r2, [r7, #8]
   11954:	f7fc fa28 	bl	dda8 <mp_get_index>
   11958:	6138      	str	r0, [r7, #16]
    self->items[i] = value;
   1195a:	697b      	ldr	r3, [r7, #20]
   1195c:	68da      	ldr	r2, [r3, #12]
   1195e:	693b      	ldr	r3, [r7, #16]
   11960:	009b      	lsls	r3, r3, #2
   11962:	4413      	add	r3, r2
   11964:	687a      	ldr	r2, [r7, #4]
   11966:	601a      	str	r2, [r3, #0]
}
   11968:	bf00      	nop
   1196a:	3718      	adds	r7, #24
   1196c:	46bd      	mov	sp, r7
   1196e:	bd80      	pop	{r7, pc}

00011970 <list_it_iternext>:
    mp_fun_1_t iternext;
    mp_obj_t list;
    size_t cur;
} mp_obj_list_it_t;

STATIC mp_obj_t list_it_iternext(mp_obj_t self_in) {
   11970:	b480      	push	{r7}
   11972:	b087      	sub	sp, #28
   11974:	af00      	add	r7, sp, #0
   11976:	6078      	str	r0, [r7, #4]
    mp_obj_list_it_t *self = MP_OBJ_TO_PTR(self_in);
   11978:	687b      	ldr	r3, [r7, #4]
   1197a:	617b      	str	r3, [r7, #20]
    mp_obj_list_t *list = MP_OBJ_TO_PTR(self->list);
   1197c:	697b      	ldr	r3, [r7, #20]
   1197e:	689b      	ldr	r3, [r3, #8]
   11980:	613b      	str	r3, [r7, #16]
    if (self->cur < list->len) {
   11982:	697b      	ldr	r3, [r7, #20]
   11984:	68da      	ldr	r2, [r3, #12]
   11986:	693b      	ldr	r3, [r7, #16]
   11988:	689b      	ldr	r3, [r3, #8]
   1198a:	429a      	cmp	r2, r3
   1198c:	d20e      	bcs.n	119ac <list_it_iternext+0x3c>
        mp_obj_t o_out = list->items[self->cur];
   1198e:	693b      	ldr	r3, [r7, #16]
   11990:	68da      	ldr	r2, [r3, #12]
   11992:	697b      	ldr	r3, [r7, #20]
   11994:	68db      	ldr	r3, [r3, #12]
   11996:	009b      	lsls	r3, r3, #2
   11998:	4413      	add	r3, r2
   1199a:	681b      	ldr	r3, [r3, #0]
   1199c:	60fb      	str	r3, [r7, #12]
        self->cur += 1;
   1199e:	697b      	ldr	r3, [r7, #20]
   119a0:	68db      	ldr	r3, [r3, #12]
   119a2:	1c5a      	adds	r2, r3, #1
   119a4:	697b      	ldr	r3, [r7, #20]
   119a6:	60da      	str	r2, [r3, #12]
        return o_out;
   119a8:	68fb      	ldr	r3, [r7, #12]
   119aa:	e000      	b.n	119ae <list_it_iternext+0x3e>
    } else {
        return MP_OBJ_STOP_ITERATION;
   119ac:	2304      	movs	r3, #4
    }
}
   119ae:	4618      	mov	r0, r3
   119b0:	371c      	adds	r7, #28
   119b2:	46bd      	mov	sp, r7
   119b4:	f85d 7b04 	ldr.w	r7, [sp], #4
   119b8:	4770      	bx	lr
   119ba:	bf00      	nop

000119bc <mp_obj_new_list_iterator>:

mp_obj_t mp_obj_new_list_iterator(mp_obj_t list, size_t cur, mp_obj_iter_buf_t *iter_buf) {
   119bc:	b480      	push	{r7}
   119be:	b087      	sub	sp, #28
   119c0:	af00      	add	r7, sp, #0
   119c2:	60f8      	str	r0, [r7, #12]
   119c4:	60b9      	str	r1, [r7, #8]
   119c6:	607a      	str	r2, [r7, #4]
    assert(sizeof(mp_obj_list_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_list_it_t *o = (mp_obj_list_it_t*)iter_buf;
   119c8:	687b      	ldr	r3, [r7, #4]
   119ca:	617b      	str	r3, [r7, #20]
    o->base.type = &mp_type_polymorph_iter;
   119cc:	697b      	ldr	r3, [r7, #20]
   119ce:	4a09      	ldr	r2, [pc, #36]	; (119f4 <mp_obj_new_list_iterator+0x38>)
   119d0:	601a      	str	r2, [r3, #0]
    o->iternext = list_it_iternext;
   119d2:	697b      	ldr	r3, [r7, #20]
   119d4:	4a08      	ldr	r2, [pc, #32]	; (119f8 <mp_obj_new_list_iterator+0x3c>)
   119d6:	605a      	str	r2, [r3, #4]
    o->list = list;
   119d8:	697b      	ldr	r3, [r7, #20]
   119da:	68fa      	ldr	r2, [r7, #12]
   119dc:	609a      	str	r2, [r3, #8]
    o->cur = cur;
   119de:	697b      	ldr	r3, [r7, #20]
   119e0:	68ba      	ldr	r2, [r7, #8]
   119e2:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   119e4:	697b      	ldr	r3, [r7, #20]
}
   119e6:	4618      	mov	r0, r3
   119e8:	371c      	adds	r7, #28
   119ea:	46bd      	mov	sp, r7
   119ec:	f85d 7b04 	ldr.w	r7, [sp], #4
   119f0:	4770      	bx	lr
   119f2:	bf00      	nop
   119f4:	000214b4 	.word	0x000214b4
   119f8:	00011971 	.word	0x00011971

000119fc <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   119fc:	b480      	push	{r7}
   119fe:	b083      	sub	sp, #12
   11a00:	af00      	add	r7, sp, #0
   11a02:	6078      	str	r0, [r7, #4]
   11a04:	687b      	ldr	r3, [r7, #4]
   11a06:	f003 0303 	and.w	r3, r3, #3
   11a0a:	2b00      	cmp	r3, #0
   11a0c:	bf0c      	ite	eq
   11a0e:	2301      	moveq	r3, #1
   11a10:	2300      	movne	r3, #0
   11a12:	b2db      	uxtb	r3, r3
   11a14:	4618      	mov	r0, r3
   11a16:	370c      	adds	r7, #12
   11a18:	46bd      	mov	sp, r7
   11a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   11a1e:	4770      	bx	lr

00011a20 <map_make_new>:
    size_t n_iters;
    mp_obj_t fun;
    mp_obj_t iters[];
} mp_obj_map_t;

STATIC mp_obj_t map_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   11a20:	b580      	push	{r7, lr}
   11a22:	b088      	sub	sp, #32
   11a24:	af02      	add	r7, sp, #8
   11a26:	60f8      	str	r0, [r7, #12]
   11a28:	60b9      	str	r1, [r7, #8]
   11a2a:	607a      	str	r2, [r7, #4]
   11a2c:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 2, MP_OBJ_FUN_ARGS_MAX, false);
   11a2e:	2300      	movs	r3, #0
   11a30:	9300      	str	r3, [sp, #0]
   11a32:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11a36:	2202      	movs	r2, #2
   11a38:	6879      	ldr	r1, [r7, #4]
   11a3a:	68b8      	ldr	r0, [r7, #8]
   11a3c:	f7fb faf6 	bl	d02c <mp_arg_check_num>
    mp_obj_map_t *o = m_new_obj_var(mp_obj_map_t, mp_obj_t, n_args - 1);
   11a40:	68bb      	ldr	r3, [r7, #8]
   11a42:	3302      	adds	r3, #2
   11a44:	009b      	lsls	r3, r3, #2
   11a46:	4618      	mov	r0, r3
   11a48:	f7ee fc68 	bl	31c <m_malloc>
   11a4c:	6138      	str	r0, [r7, #16]
    o->base.type = type;
   11a4e:	693b      	ldr	r3, [r7, #16]
   11a50:	68fa      	ldr	r2, [r7, #12]
   11a52:	601a      	str	r2, [r3, #0]
    o->n_iters = n_args - 1;
   11a54:	68bb      	ldr	r3, [r7, #8]
   11a56:	1e5a      	subs	r2, r3, #1
   11a58:	693b      	ldr	r3, [r7, #16]
   11a5a:	605a      	str	r2, [r3, #4]
    o->fun = args[0];
   11a5c:	683b      	ldr	r3, [r7, #0]
   11a5e:	681a      	ldr	r2, [r3, #0]
   11a60:	693b      	ldr	r3, [r7, #16]
   11a62:	609a      	str	r2, [r3, #8]
    for (size_t i = 0; i < n_args - 1; i++) {
   11a64:	2300      	movs	r3, #0
   11a66:	617b      	str	r3, [r7, #20]
   11a68:	e013      	b.n	11a92 <map_make_new+0x72>
        o->iters[i] = mp_getiter(args[i + 1], NULL);
   11a6a:	697b      	ldr	r3, [r7, #20]
   11a6c:	3301      	adds	r3, #1
   11a6e:	009b      	lsls	r3, r3, #2
   11a70:	683a      	ldr	r2, [r7, #0]
   11a72:	4413      	add	r3, r2
   11a74:	681b      	ldr	r3, [r3, #0]
   11a76:	2100      	movs	r1, #0
   11a78:	4618      	mov	r0, r3
   11a7a:	f7fa ff61 	bl	c940 <mp_getiter>
   11a7e:	4601      	mov	r1, r0
   11a80:	693a      	ldr	r2, [r7, #16]
   11a82:	697b      	ldr	r3, [r7, #20]
   11a84:	3302      	adds	r3, #2
   11a86:	009b      	lsls	r3, r3, #2
   11a88:	4413      	add	r3, r2
   11a8a:	6059      	str	r1, [r3, #4]
    for (size_t i = 0; i < n_args - 1; i++) {
   11a8c:	697b      	ldr	r3, [r7, #20]
   11a8e:	3301      	adds	r3, #1
   11a90:	617b      	str	r3, [r7, #20]
   11a92:	68bb      	ldr	r3, [r7, #8]
   11a94:	1e5a      	subs	r2, r3, #1
   11a96:	697b      	ldr	r3, [r7, #20]
   11a98:	429a      	cmp	r2, r3
   11a9a:	d8e6      	bhi.n	11a6a <map_make_new+0x4a>
    }
    return MP_OBJ_FROM_PTR(o);
   11a9c:	693b      	ldr	r3, [r7, #16]
}
   11a9e:	4618      	mov	r0, r3
   11aa0:	3718      	adds	r7, #24
   11aa2:	46bd      	mov	sp, r7
   11aa4:	bd80      	pop	{r7, pc}
   11aa6:	bf00      	nop

00011aa8 <map_iternext>:

STATIC mp_obj_t map_iternext(mp_obj_t self_in) {
   11aa8:	b580      	push	{r7, lr}
   11aaa:	b086      	sub	sp, #24
   11aac:	af00      	add	r7, sp, #0
   11aae:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_map));
   11ab0:	6878      	ldr	r0, [r7, #4]
   11ab2:	f7ff ffa3 	bl	119fc <MP_OBJ_IS_OBJ>
   11ab6:	4603      	mov	r3, r0
   11ab8:	f083 0301 	eor.w	r3, r3, #1
   11abc:	b2db      	uxtb	r3, r3
   11abe:	2b00      	cmp	r3, #0
   11ac0:	d104      	bne.n	11acc <map_iternext+0x24>
   11ac2:	687b      	ldr	r3, [r7, #4]
   11ac4:	681b      	ldr	r3, [r3, #0]
   11ac6:	4a21      	ldr	r2, [pc, #132]	; (11b4c <map_iternext+0xa4>)
   11ac8:	4293      	cmp	r3, r2
   11aca:	d005      	beq.n	11ad8 <map_iternext+0x30>
   11acc:	4b20      	ldr	r3, [pc, #128]	; (11b50 <map_iternext+0xa8>)
   11ace:	4a21      	ldr	r2, [pc, #132]	; (11b54 <map_iternext+0xac>)
   11ad0:	2134      	movs	r1, #52	; 0x34
   11ad2:	4821      	ldr	r0, [pc, #132]	; (11b58 <map_iternext+0xb0>)
   11ad4:	f009 fc4a 	bl	1b36c <__assert_func>
    mp_obj_map_t *self = MP_OBJ_TO_PTR(self_in);
   11ad8:	687b      	ldr	r3, [r7, #4]
   11ada:	613b      	str	r3, [r7, #16]
    mp_obj_t *nextses = m_new(mp_obj_t, self->n_iters);
   11adc:	693b      	ldr	r3, [r7, #16]
   11ade:	685b      	ldr	r3, [r3, #4]
   11ae0:	009b      	lsls	r3, r3, #2
   11ae2:	4618      	mov	r0, r3
   11ae4:	f7ee fc1a 	bl	31c <m_malloc>
   11ae8:	60f8      	str	r0, [r7, #12]

    for (size_t i = 0; i < self->n_iters; i++) {
   11aea:	2300      	movs	r3, #0
   11aec:	617b      	str	r3, [r7, #20]
   11aee:	e01a      	b.n	11b26 <map_iternext+0x7e>
        mp_obj_t next = mp_iternext(self->iters[i]);
   11af0:	693a      	ldr	r2, [r7, #16]
   11af2:	697b      	ldr	r3, [r7, #20]
   11af4:	3302      	adds	r3, #2
   11af6:	009b      	lsls	r3, r3, #2
   11af8:	4413      	add	r3, r2
   11afa:	685b      	ldr	r3, [r3, #4]
   11afc:	4618      	mov	r0, r3
   11afe:	f7fa ffa1 	bl	ca44 <mp_iternext>
   11b02:	60b8      	str	r0, [r7, #8]
        if (next == MP_OBJ_STOP_ITERATION) {
   11b04:	68bb      	ldr	r3, [r7, #8]
   11b06:	2b04      	cmp	r3, #4
   11b08:	d104      	bne.n	11b14 <map_iternext+0x6c>
            m_del(mp_obj_t, nextses, self->n_iters);
   11b0a:	68f8      	ldr	r0, [r7, #12]
   11b0c:	f7ee fc68 	bl	3e0 <m_free>
            return MP_OBJ_STOP_ITERATION;
   11b10:	2304      	movs	r3, #4
   11b12:	e016      	b.n	11b42 <map_iternext+0x9a>
        }
        nextses[i] = next;
   11b14:	697b      	ldr	r3, [r7, #20]
   11b16:	009b      	lsls	r3, r3, #2
   11b18:	68fa      	ldr	r2, [r7, #12]
   11b1a:	4413      	add	r3, r2
   11b1c:	68ba      	ldr	r2, [r7, #8]
   11b1e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < self->n_iters; i++) {
   11b20:	697b      	ldr	r3, [r7, #20]
   11b22:	3301      	adds	r3, #1
   11b24:	617b      	str	r3, [r7, #20]
   11b26:	693b      	ldr	r3, [r7, #16]
   11b28:	685a      	ldr	r2, [r3, #4]
   11b2a:	697b      	ldr	r3, [r7, #20]
   11b2c:	429a      	cmp	r2, r3
   11b2e:	d8df      	bhi.n	11af0 <map_iternext+0x48>
    }
    return mp_call_function_n_kw(self->fun, self->n_iters, 0, nextses);
   11b30:	693b      	ldr	r3, [r7, #16]
   11b32:	6898      	ldr	r0, [r3, #8]
   11b34:	693b      	ldr	r3, [r7, #16]
   11b36:	6859      	ldr	r1, [r3, #4]
   11b38:	68fb      	ldr	r3, [r7, #12]
   11b3a:	2200      	movs	r2, #0
   11b3c:	f7fa f98c 	bl	be58 <mp_call_function_n_kw>
   11b40:	4603      	mov	r3, r0
}
   11b42:	4618      	mov	r0, r3
   11b44:	3718      	adds	r7, #24
   11b46:	46bd      	mov	sp, r7
   11b48:	bd80      	pop	{r7, pc}
   11b4a:	bf00      	nop
   11b4c:	00021358 	.word	0x00021358
   11b50:	000212e8 	.word	0x000212e8
   11b54:	00021394 	.word	0x00021394
   11b58:	00021344 	.word	0x00021344

00011b5c <MP_OBJ_IS_OBJ>:
   11b5c:	b480      	push	{r7}
   11b5e:	b083      	sub	sp, #12
   11b60:	af00      	add	r7, sp, #0
   11b62:	6078      	str	r0, [r7, #4]
   11b64:	687b      	ldr	r3, [r7, #4]
   11b66:	f003 0303 	and.w	r3, r3, #3
   11b6a:	2b00      	cmp	r3, #0
   11b6c:	bf0c      	ite	eq
   11b6e:	2301      	moveq	r3, #1
   11b70:	2300      	movne	r3, #0
   11b72:	b2db      	uxtb	r3, r3
   11b74:	4618      	mov	r0, r3
   11b76:	370c      	adds	r7, #12
   11b78:	46bd      	mov	sp, r7
   11b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
   11b7e:	4770      	bx	lr

00011b80 <mp_module_call_init>:
void mp_module_register(qstr qstr, mp_obj_t module);

#if MICROPY_MODULE_BUILTIN_INIT
void mp_module_call_init(qstr module_name, mp_obj_t module_obj);
#else
static inline void mp_module_call_init(qstr module_name, mp_obj_t module_obj) {
   11b80:	b480      	push	{r7}
   11b82:	b083      	sub	sp, #12
   11b84:	af00      	add	r7, sp, #0
   11b86:	6078      	str	r0, [r7, #4]
   11b88:	6039      	str	r1, [r7, #0]
    (void)module_name;
    (void)module_obj;
}
   11b8a:	bf00      	nop
   11b8c:	370c      	adds	r7, #12
   11b8e:	46bd      	mov	sp, r7
   11b90:	f85d 7b04 	ldr.w	r7, [sp], #4
   11b94:	4770      	bx	lr
   11b96:	bf00      	nop

00011b98 <module_print>:

#include "py/objmodule.h"
#include "py/runtime.h"
#include "py/builtin.h"

STATIC void module_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   11b98:	b580      	push	{r7, lr}
   11b9a:	b088      	sub	sp, #32
   11b9c:	af00      	add	r7, sp, #0
   11b9e:	60f8      	str	r0, [r7, #12]
   11ba0:	60b9      	str	r1, [r7, #8]
   11ba2:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_module_t *self = MP_OBJ_TO_PTR(self_in);
   11ba4:	68bb      	ldr	r3, [r7, #8]
   11ba6:	61bb      	str	r3, [r7, #24]

    const char *module_name = "";
   11ba8:	4b0e      	ldr	r3, [pc, #56]	; (11be4 <module_print+0x4c>)
   11baa:	61fb      	str	r3, [r7, #28]
    mp_map_elem_t *elem = mp_map_lookup(&self->globals->map, MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_MAP_LOOKUP);
   11bac:	69bb      	ldr	r3, [r7, #24]
   11bae:	685b      	ldr	r3, [r3, #4]
   11bb0:	3304      	adds	r3, #4
   11bb2:	2200      	movs	r2, #0
   11bb4:	216e      	movs	r1, #110	; 0x6e
   11bb6:	4618      	mov	r0, r3
   11bb8:	f7fb fc82 	bl	d4c0 <mp_map_lookup>
   11bbc:	6178      	str	r0, [r7, #20]
    if (elem != NULL) {
   11bbe:	697b      	ldr	r3, [r7, #20]
   11bc0:	2b00      	cmp	r3, #0
   11bc2:	d005      	beq.n	11bd0 <module_print+0x38>
        module_name = mp_obj_str_get_str(elem->value);
   11bc4:	697b      	ldr	r3, [r7, #20]
   11bc6:	685b      	ldr	r3, [r3, #4]
   11bc8:	4618      	mov	r0, r3
   11bca:	f003 fd35 	bl	15638 <mp_obj_str_get_str>
   11bce:	61f8      	str	r0, [r7, #28]
        mp_printf(print, "<module '%s' from '%s'>", module_name, mp_obj_str_get_str(elem->value));
        return;
    }
#endif

    mp_printf(print, "<module '%s'>", module_name);
   11bd0:	69fa      	ldr	r2, [r7, #28]
   11bd2:	4905      	ldr	r1, [pc, #20]	; (11be8 <module_print+0x50>)
   11bd4:	68f8      	ldr	r0, [r7, #12]
   11bd6:	f7f0 f965 	bl	1ea4 <mp_printf>
}
   11bda:	bf00      	nop
   11bdc:	3720      	adds	r7, #32
   11bde:	46bd      	mov	sp, r7
   11be0:	bd80      	pop	{r7, pc}
   11be2:	bf00      	nop
   11be4:	000213a4 	.word	0x000213a4
   11be8:	000213a8 	.word	0x000213a8

00011bec <module_attr>:

STATIC void module_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   11bec:	b580      	push	{r7, lr}
   11bee:	b088      	sub	sp, #32
   11bf0:	af00      	add	r7, sp, #0
   11bf2:	60f8      	str	r0, [r7, #12]
   11bf4:	60b9      	str	r1, [r7, #8]
   11bf6:	607a      	str	r2, [r7, #4]
    mp_obj_module_t *self = MP_OBJ_TO_PTR(self_in);
   11bf8:	68fb      	ldr	r3, [r7, #12]
   11bfa:	61fb      	str	r3, [r7, #28]
    if (dest[0] == MP_OBJ_NULL) {
   11bfc:	687b      	ldr	r3, [r7, #4]
   11bfe:	681b      	ldr	r3, [r3, #0]
   11c00:	2b00      	cmp	r3, #0
   11c02:	d113      	bne.n	11c2c <module_attr+0x40>
        // load attribute
        mp_map_elem_t *elem = mp_map_lookup(&self->globals->map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
   11c04:	69fb      	ldr	r3, [r7, #28]
   11c06:	685b      	ldr	r3, [r3, #4]
   11c08:	1d18      	adds	r0, r3, #4
   11c0a:	68bb      	ldr	r3, [r7, #8]
   11c0c:	009b      	lsls	r3, r3, #2
   11c0e:	f043 0302 	orr.w	r3, r3, #2
   11c12:	2200      	movs	r2, #0
   11c14:	4619      	mov	r1, r3
   11c16:	f7fb fc53 	bl	d4c0 <mp_map_lookup>
   11c1a:	61b8      	str	r0, [r7, #24]
        if (elem != NULL) {
   11c1c:	69bb      	ldr	r3, [r7, #24]
   11c1e:	2b00      	cmp	r3, #0
   11c20:	d02d      	beq.n	11c7e <module_attr+0x92>
            dest[0] = elem->value;
   11c22:	69bb      	ldr	r3, [r7, #24]
   11c24:	685a      	ldr	r2, [r3, #4]
   11c26:	687b      	ldr	r3, [r7, #4]
   11c28:	601a      	str	r2, [r3, #0]
   11c2a:	e028      	b.n	11c7e <module_attr+0x92>
        }
    } else {
        // delete/store attribute
        mp_obj_dict_t *dict = self->globals;
   11c2c:	69fb      	ldr	r3, [r7, #28]
   11c2e:	685b      	ldr	r3, [r3, #4]
   11c30:	617b      	str	r3, [r7, #20]
        if (dict->map.is_fixed) {
   11c32:	697b      	ldr	r3, [r7, #20]
   11c34:	791b      	ldrb	r3, [r3, #4]
   11c36:	f003 0302 	and.w	r3, r3, #2
   11c3a:	b2db      	uxtb	r3, r3
   11c3c:	2b00      	cmp	r3, #0
   11c3e:	d11d      	bne.n	11c7c <module_attr+0x90>
            {
                // can't delete or store to fixed map
                return;
            }
        }
        if (dest[1] == MP_OBJ_NULL) {
   11c40:	687b      	ldr	r3, [r7, #4]
   11c42:	3304      	adds	r3, #4
   11c44:	681b      	ldr	r3, [r3, #0]
   11c46:	2b00      	cmp	r3, #0
   11c48:	d108      	bne.n	11c5c <module_attr+0x70>
            // delete attribute
            mp_obj_dict_delete(MP_OBJ_FROM_PTR(dict), MP_OBJ_NEW_QSTR(attr));
   11c4a:	68bb      	ldr	r3, [r7, #8]
   11c4c:	009b      	lsls	r3, r3, #2
   11c4e:	f043 0302 	orr.w	r3, r3, #2
   11c52:	4619      	mov	r1, r3
   11c54:	6978      	ldr	r0, [r7, #20]
   11c56:	f7fd facb 	bl	f1f0 <mp_obj_dict_delete>
   11c5a:	e00b      	b.n	11c74 <module_attr+0x88>
        } else {
            // store attribute
            // TODO CPython allows STORE_ATTR to a module, but is this the correct implementation?
            mp_obj_dict_store(MP_OBJ_FROM_PTR(dict), MP_OBJ_NEW_QSTR(attr), dest[1]);
   11c5c:	68bb      	ldr	r3, [r7, #8]
   11c5e:	009b      	lsls	r3, r3, #2
   11c60:	f043 0302 	orr.w	r3, r3, #2
   11c64:	4619      	mov	r1, r3
   11c66:	687b      	ldr	r3, [r7, #4]
   11c68:	3304      	adds	r3, #4
   11c6a:	681b      	ldr	r3, [r3, #0]
   11c6c:	461a      	mov	r2, r3
   11c6e:	6978      	ldr	r0, [r7, #20]
   11c70:	f7fd fa86 	bl	f180 <mp_obj_dict_store>
        }
        dest[0] = MP_OBJ_NULL; // indicate success
   11c74:	687b      	ldr	r3, [r7, #4]
   11c76:	2200      	movs	r2, #0
   11c78:	601a      	str	r2, [r3, #0]
   11c7a:	e000      	b.n	11c7e <module_attr+0x92>
                return;
   11c7c:	bf00      	nop
    }
}
   11c7e:	3720      	adds	r7, #32
   11c80:	46bd      	mov	sp, r7
   11c82:	bd80      	pop	{r7, pc}

00011c84 <mp_obj_new_module>:
    .name = MP_QSTR_module,
    .print = module_print,
    .attr = module_attr,
};

mp_obj_t mp_obj_new_module(qstr module_name) {
   11c84:	b580      	push	{r7, lr}
   11c86:	b086      	sub	sp, #24
   11c88:	af00      	add	r7, sp, #0
   11c8a:	6078      	str	r0, [r7, #4]
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
   11c8c:	4b18      	ldr	r3, [pc, #96]	; (11cf0 <mp_obj_new_module+0x6c>)
   11c8e:	617b      	str	r3, [r7, #20]
    mp_map_elem_t *el = mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
   11c90:	687b      	ldr	r3, [r7, #4]
   11c92:	009b      	lsls	r3, r3, #2
   11c94:	f043 0302 	orr.w	r3, r3, #2
   11c98:	2201      	movs	r2, #1
   11c9a:	4619      	mov	r1, r3
   11c9c:	6978      	ldr	r0, [r7, #20]
   11c9e:	f7fb fc0f 	bl	d4c0 <mp_map_lookup>
   11ca2:	6138      	str	r0, [r7, #16]
    // We could error out if module already exists, but let C extensions
    // add new members to existing modules.
    if (el->value != MP_OBJ_NULL) {
   11ca4:	693b      	ldr	r3, [r7, #16]
   11ca6:	685b      	ldr	r3, [r3, #4]
   11ca8:	2b00      	cmp	r3, #0
   11caa:	d002      	beq.n	11cb2 <mp_obj_new_module+0x2e>
        return el->value;
   11cac:	693b      	ldr	r3, [r7, #16]
   11cae:	685b      	ldr	r3, [r3, #4]
   11cb0:	e01a      	b.n	11ce8 <mp_obj_new_module+0x64>
    }

    // create new module object
    mp_obj_module_t *o = m_new_obj(mp_obj_module_t);
   11cb2:	2008      	movs	r0, #8
   11cb4:	f7ee fb32 	bl	31c <m_malloc>
   11cb8:	60f8      	str	r0, [r7, #12]
    o->base.type = &mp_type_module;
   11cba:	68fb      	ldr	r3, [r7, #12]
   11cbc:	4a0d      	ldr	r2, [pc, #52]	; (11cf4 <mp_obj_new_module+0x70>)
   11cbe:	601a      	str	r2, [r3, #0]
    o->globals = MP_OBJ_TO_PTR(mp_obj_new_dict(MICROPY_MODULE_DICT_SIZE));
   11cc0:	2001      	movs	r0, #1
   11cc2:	f7fd fa3b 	bl	f13c <mp_obj_new_dict>
   11cc6:	4602      	mov	r2, r0
   11cc8:	68fb      	ldr	r3, [r7, #12]
   11cca:	605a      	str	r2, [r3, #4]

    // store __name__ entry in the module
    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(module_name));
   11ccc:	68fb      	ldr	r3, [r7, #12]
   11cce:	6858      	ldr	r0, [r3, #4]
   11cd0:	687b      	ldr	r3, [r7, #4]
   11cd2:	009b      	lsls	r3, r3, #2
   11cd4:	f043 0302 	orr.w	r3, r3, #2
   11cd8:	461a      	mov	r2, r3
   11cda:	216e      	movs	r1, #110	; 0x6e
   11cdc:	f7fd fa50 	bl	f180 <mp_obj_dict_store>

    // store the new module into the slot in the global dict holding all modules
    el->value = MP_OBJ_FROM_PTR(o);
   11ce0:	693b      	ldr	r3, [r7, #16]
   11ce2:	68fa      	ldr	r2, [r7, #12]
   11ce4:	605a      	str	r2, [r3, #4]

    // return the new module
    return MP_OBJ_FROM_PTR(o);
   11ce6:	68fb      	ldr	r3, [r7, #12]
}
   11ce8:	4618      	mov	r0, r3
   11cea:	3718      	adds	r7, #24
   11cec:	46bd      	mov	sp, r7
   11cee:	bd80      	pop	{r7, pc}
   11cf0:	20000a54 	.word	0x20000a54
   11cf4:	000213b8 	.word	0x000213b8

00011cf8 <mp_obj_module_get_globals>:

mp_obj_dict_t *mp_obj_module_get_globals(mp_obj_t self_in) {
   11cf8:	b580      	push	{r7, lr}
   11cfa:	b084      	sub	sp, #16
   11cfc:	af00      	add	r7, sp, #0
   11cfe:	6078      	str	r0, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_module));
   11d00:	6878      	ldr	r0, [r7, #4]
   11d02:	f7ff ff2b 	bl	11b5c <MP_OBJ_IS_OBJ>
   11d06:	4603      	mov	r3, r0
   11d08:	f083 0301 	eor.w	r3, r3, #1
   11d0c:	b2db      	uxtb	r3, r3
   11d0e:	2b00      	cmp	r3, #0
   11d10:	d104      	bne.n	11d1c <mp_obj_module_get_globals+0x24>
   11d12:	687b      	ldr	r3, [r7, #4]
   11d14:	681b      	ldr	r3, [r3, #0]
   11d16:	4a08      	ldr	r2, [pc, #32]	; (11d38 <mp_obj_module_get_globals+0x40>)
   11d18:	4293      	cmp	r3, r2
   11d1a:	d005      	beq.n	11d28 <mp_obj_module_get_globals+0x30>
   11d1c:	4b07      	ldr	r3, [pc, #28]	; (11d3c <mp_obj_module_get_globals+0x44>)
   11d1e:	4a08      	ldr	r2, [pc, #32]	; (11d40 <mp_obj_module_get_globals+0x48>)
   11d20:	217e      	movs	r1, #126	; 0x7e
   11d22:	4808      	ldr	r0, [pc, #32]	; (11d44 <mp_obj_module_get_globals+0x4c>)
   11d24:	f009 fb22 	bl	1b36c <__assert_func>
    mp_obj_module_t *self = MP_OBJ_TO_PTR(self_in);
   11d28:	687b      	ldr	r3, [r7, #4]
   11d2a:	60fb      	str	r3, [r7, #12]
    return self->globals;
   11d2c:	68fb      	ldr	r3, [r7, #12]
   11d2e:	685b      	ldr	r3, [r3, #4]
}
   11d30:	4618      	mov	r0, r3
   11d32:	3710      	adds	r7, #16
   11d34:	46bd      	mov	sp, r7
   11d36:	bd80      	pop	{r7, pc}
   11d38:	000213b8 	.word	0x000213b8
   11d3c:	000213f4 	.word	0x000213f4
   11d40:	0002145c 	.word	0x0002145c
   11d44:	00021420 	.word	0x00021420

00011d48 <mp_module_get>:

MP_DEFINE_CONST_MAP(mp_builtin_module_weak_links_map, mp_builtin_module_weak_links_table);
#endif

// returns MP_OBJ_NULL if not found
mp_obj_t mp_module_get(qstr module_name) {
   11d48:	b580      	push	{r7, lr}
   11d4a:	b084      	sub	sp, #16
   11d4c:	af00      	add	r7, sp, #0
   11d4e:	6078      	str	r0, [r7, #4]
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
   11d50:	4b14      	ldr	r3, [pc, #80]	; (11da4 <mp_module_get+0x5c>)
   11d52:	60bb      	str	r3, [r7, #8]
    // lookup module
    mp_map_elem_t *el = mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP);
   11d54:	687b      	ldr	r3, [r7, #4]
   11d56:	009b      	lsls	r3, r3, #2
   11d58:	f043 0302 	orr.w	r3, r3, #2
   11d5c:	2200      	movs	r2, #0
   11d5e:	4619      	mov	r1, r3
   11d60:	68b8      	ldr	r0, [r7, #8]
   11d62:	f7fb fbad 	bl	d4c0 <mp_map_lookup>
   11d66:	60f8      	str	r0, [r7, #12]

    if (el == NULL) {
   11d68:	68fb      	ldr	r3, [r7, #12]
   11d6a:	2b00      	cmp	r3, #0
   11d6c:	d114      	bne.n	11d98 <mp_module_get+0x50>
        // module not found, look for builtin module names
        el = mp_map_lookup((mp_map_t*)&mp_builtin_module_map, MP_OBJ_NEW_QSTR(module_name), MP_MAP_LOOKUP);
   11d6e:	687b      	ldr	r3, [r7, #4]
   11d70:	009b      	lsls	r3, r3, #2
   11d72:	f043 0302 	orr.w	r3, r3, #2
   11d76:	2200      	movs	r2, #0
   11d78:	4619      	mov	r1, r3
   11d7a:	480b      	ldr	r0, [pc, #44]	; (11da8 <mp_module_get+0x60>)
   11d7c:	f7fb fba0 	bl	d4c0 <mp_map_lookup>
   11d80:	60f8      	str	r0, [r7, #12]
        if (el == NULL) {
   11d82:	68fb      	ldr	r3, [r7, #12]
   11d84:	2b00      	cmp	r3, #0
   11d86:	d101      	bne.n	11d8c <mp_module_get+0x44>
            return MP_OBJ_NULL;
   11d88:	2300      	movs	r3, #0
   11d8a:	e007      	b.n	11d9c <mp_module_get+0x54>
        }
        mp_module_call_init(module_name, el->value);
   11d8c:	68fb      	ldr	r3, [r7, #12]
   11d8e:	685b      	ldr	r3, [r3, #4]
   11d90:	4619      	mov	r1, r3
   11d92:	6878      	ldr	r0, [r7, #4]
   11d94:	f7ff fef4 	bl	11b80 <mp_module_call_init>
    }

    // module found, return it
    return el->value;
   11d98:	68fb      	ldr	r3, [r7, #12]
   11d9a:	685b      	ldr	r3, [r3, #4]
}
   11d9c:	4618      	mov	r0, r3
   11d9e:	3710      	adds	r7, #16
   11da0:	46bd      	mov	sp, r7
   11da2:	bd80      	pop	{r7, pc}
   11da4:	20000a54 	.word	0x20000a54
   11da8:	00021450 	.word	0x00021450

00011dac <mp_module_register>:

void mp_module_register(qstr qst, mp_obj_t module) {
   11dac:	b580      	push	{r7, lr}
   11dae:	b084      	sub	sp, #16
   11db0:	af00      	add	r7, sp, #0
   11db2:	6078      	str	r0, [r7, #4]
   11db4:	6039      	str	r1, [r7, #0]
    mp_map_t *mp_loaded_modules_map = &MP_STATE_VM(mp_loaded_modules_dict).map;
   11db6:	4b09      	ldr	r3, [pc, #36]	; (11ddc <mp_module_register+0x30>)
   11db8:	60fb      	str	r3, [r7, #12]
    mp_map_lookup(mp_loaded_modules_map, MP_OBJ_NEW_QSTR(qst), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = module;
   11dba:	687b      	ldr	r3, [r7, #4]
   11dbc:	009b      	lsls	r3, r3, #2
   11dbe:	f043 0302 	orr.w	r3, r3, #2
   11dc2:	2201      	movs	r2, #1
   11dc4:	4619      	mov	r1, r3
   11dc6:	68f8      	ldr	r0, [r7, #12]
   11dc8:	f7fb fb7a 	bl	d4c0 <mp_map_lookup>
   11dcc:	4602      	mov	r2, r0
   11dce:	683b      	ldr	r3, [r7, #0]
   11dd0:	6053      	str	r3, [r2, #4]
}
   11dd2:	bf00      	nop
   11dd4:	3710      	adds	r7, #16
   11dd6:	46bd      	mov	sp, r7
   11dd8:	bd80      	pop	{r7, pc}
   11dda:	bf00      	nop
   11ddc:	20000a54 	.word	0x20000a54

00011de0 <object_make_new>:

typedef struct _mp_obj_object_t {
    mp_obj_base_t base;
} mp_obj_object_t;

STATIC mp_obj_t object_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   11de0:	b580      	push	{r7, lr}
   11de2:	b088      	sub	sp, #32
   11de4:	af02      	add	r7, sp, #8
   11de6:	60f8      	str	r0, [r7, #12]
   11de8:	60b9      	str	r1, [r7, #8]
   11dea:	607a      	str	r2, [r7, #4]
   11dec:	603b      	str	r3, [r7, #0]
    (void)args;
    mp_arg_check_num(n_args, n_kw, 0, 0, false);
   11dee:	2300      	movs	r3, #0
   11df0:	9300      	str	r3, [sp, #0]
   11df2:	2300      	movs	r3, #0
   11df4:	2200      	movs	r2, #0
   11df6:	6879      	ldr	r1, [r7, #4]
   11df8:	68b8      	ldr	r0, [r7, #8]
   11dfa:	f7fb f917 	bl	d02c <mp_arg_check_num>
    mp_obj_object_t *o = m_new_obj(mp_obj_object_t);
   11dfe:	2004      	movs	r0, #4
   11e00:	f7ee fa8c 	bl	31c <m_malloc>
   11e04:	6178      	str	r0, [r7, #20]
    o->base.type = type;
   11e06:	697b      	ldr	r3, [r7, #20]
   11e08:	68fa      	ldr	r2, [r7, #12]
   11e0a:	601a      	str	r2, [r3, #0]
    return MP_OBJ_FROM_PTR(o);
   11e0c:	697b      	ldr	r3, [r7, #20]
}
   11e0e:	4618      	mov	r0, r3
   11e10:	3718      	adds	r7, #24
   11e12:	46bd      	mov	sp, r7
   11e14:	bd80      	pop	{r7, pc}
   11e16:	bf00      	nop

00011e18 <polymorph_it_iternext>:
typedef struct _mp_obj_polymorph_iter_t {
    mp_obj_base_t base;
    mp_fun_1_t iternext;
} mp_obj_polymorph_iter_t;

STATIC mp_obj_t polymorph_it_iternext(mp_obj_t self_in) {
   11e18:	b580      	push	{r7, lr}
   11e1a:	b084      	sub	sp, #16
   11e1c:	af00      	add	r7, sp, #0
   11e1e:	6078      	str	r0, [r7, #4]
    mp_obj_polymorph_iter_t *self = MP_OBJ_TO_PTR(self_in);
   11e20:	687b      	ldr	r3, [r7, #4]
   11e22:	60fb      	str	r3, [r7, #12]
    // Redirect call to object instance's iternext method
    return self->iternext(self_in);
   11e24:	68fb      	ldr	r3, [r7, #12]
   11e26:	685b      	ldr	r3, [r3, #4]
   11e28:	6878      	ldr	r0, [r7, #4]
   11e2a:	4798      	blx	r3
   11e2c:	4603      	mov	r3, r0
}
   11e2e:	4618      	mov	r0, r3
   11e30:	3710      	adds	r7, #16
   11e32:	46bd      	mov	sp, r7
   11e34:	bd80      	pop	{r7, pc}
   11e36:	bf00      	nop

00011e38 <none_print>:

typedef struct _mp_obj_none_t {
    mp_obj_base_t base;
} mp_obj_none_t;

STATIC void none_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   11e38:	b580      	push	{r7, lr}
   11e3a:	b084      	sub	sp, #16
   11e3c:	af00      	add	r7, sp, #0
   11e3e:	60f8      	str	r0, [r7, #12]
   11e40:	60b9      	str	r1, [r7, #8]
   11e42:	607a      	str	r2, [r7, #4]
    (void)self_in;
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "null");
    } else {
        mp_print_str(print, "None");
   11e44:	4903      	ldr	r1, [pc, #12]	; (11e54 <none_print+0x1c>)
   11e46:	68f8      	ldr	r0, [r7, #12]
   11e48:	f7ef fd18 	bl	187c <mp_print_str>
    }
}
   11e4c:	bf00      	nop
   11e4e:	3710      	adds	r7, #16
   11e50:	46bd      	mov	sp, r7
   11e52:	bd80      	pop	{r7, pc}
   11e54:	000214f0 	.word	0x000214f0

00011e58 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   11e58:	b480      	push	{r7}
   11e5a:	b083      	sub	sp, #12
   11e5c:	af00      	add	r7, sp, #0
   11e5e:	6078      	str	r0, [r7, #4]
   11e60:	687b      	ldr	r3, [r7, #4]
   11e62:	2b00      	cmp	r3, #0
   11e64:	d001      	beq.n	11e6a <mp_obj_new_bool+0x12>
   11e66:	4b04      	ldr	r3, [pc, #16]	; (11e78 <mp_obj_new_bool+0x20>)
   11e68:	e000      	b.n	11e6c <mp_obj_new_bool+0x14>
   11e6a:	4b04      	ldr	r3, [pc, #16]	; (11e7c <mp_obj_new_bool+0x24>)
   11e6c:	4618      	mov	r0, r3
   11e6e:	370c      	adds	r7, #12
   11e70:	46bd      	mov	sp, r7
   11e72:	f85d 7b04 	ldr.w	r7, [sp], #4
   11e76:	4770      	bx	lr
   11e78:	0001fc44 	.word	0x0001fc44
   11e7c:	0001fc3c 	.word	0x0001fc3c

00011e80 <range_it_iternext>:
    mp_int_t cur;
    mp_int_t stop;
    mp_int_t step;
} mp_obj_range_it_t;

STATIC mp_obj_t range_it_iternext(mp_obj_t o_in) {
   11e80:	b480      	push	{r7}
   11e82:	b085      	sub	sp, #20
   11e84:	af00      	add	r7, sp, #0
   11e86:	6078      	str	r0, [r7, #4]
    mp_obj_range_it_t *o = MP_OBJ_TO_PTR(o_in);
   11e88:	687b      	ldr	r3, [r7, #4]
   11e8a:	60fb      	str	r3, [r7, #12]
    if ((o->step > 0 && o->cur < o->stop) || (o->step < 0 && o->cur > o->stop)) {
   11e8c:	68fb      	ldr	r3, [r7, #12]
   11e8e:	68db      	ldr	r3, [r3, #12]
   11e90:	2b00      	cmp	r3, #0
   11e92:	dd05      	ble.n	11ea0 <range_it_iternext+0x20>
   11e94:	68fb      	ldr	r3, [r7, #12]
   11e96:	685a      	ldr	r2, [r3, #4]
   11e98:	68fb      	ldr	r3, [r7, #12]
   11e9a:	689b      	ldr	r3, [r3, #8]
   11e9c:	429a      	cmp	r2, r3
   11e9e:	db09      	blt.n	11eb4 <range_it_iternext+0x34>
   11ea0:	68fb      	ldr	r3, [r7, #12]
   11ea2:	68db      	ldr	r3, [r3, #12]
   11ea4:	2b00      	cmp	r3, #0
   11ea6:	da14      	bge.n	11ed2 <range_it_iternext+0x52>
   11ea8:	68fb      	ldr	r3, [r7, #12]
   11eaa:	685a      	ldr	r2, [r3, #4]
   11eac:	68fb      	ldr	r3, [r7, #12]
   11eae:	689b      	ldr	r3, [r3, #8]
   11eb0:	429a      	cmp	r2, r3
   11eb2:	dd0e      	ble.n	11ed2 <range_it_iternext+0x52>
        mp_obj_t o_out = MP_OBJ_NEW_SMALL_INT(o->cur);
   11eb4:	68fb      	ldr	r3, [r7, #12]
   11eb6:	685b      	ldr	r3, [r3, #4]
   11eb8:	005b      	lsls	r3, r3, #1
   11eba:	f043 0301 	orr.w	r3, r3, #1
   11ebe:	60bb      	str	r3, [r7, #8]
        o->cur += o->step;
   11ec0:	68fb      	ldr	r3, [r7, #12]
   11ec2:	685a      	ldr	r2, [r3, #4]
   11ec4:	68fb      	ldr	r3, [r7, #12]
   11ec6:	68db      	ldr	r3, [r3, #12]
   11ec8:	441a      	add	r2, r3
   11eca:	68fb      	ldr	r3, [r7, #12]
   11ecc:	605a      	str	r2, [r3, #4]
        return o_out;
   11ece:	68bb      	ldr	r3, [r7, #8]
   11ed0:	e000      	b.n	11ed4 <range_it_iternext+0x54>
    } else {
        return MP_OBJ_STOP_ITERATION;
   11ed2:	2304      	movs	r3, #4
    }
}
   11ed4:	4618      	mov	r0, r3
   11ed6:	3714      	adds	r7, #20
   11ed8:	46bd      	mov	sp, r7
   11eda:	f85d 7b04 	ldr.w	r7, [sp], #4
   11ede:	4770      	bx	lr

00011ee0 <mp_obj_new_range_iterator>:
    .name = MP_QSTR_iterator,
    .getiter = mp_identity_getiter,
    .iternext = range_it_iternext,
};

STATIC mp_obj_t mp_obj_new_range_iterator(mp_int_t cur, mp_int_t stop, mp_int_t step, mp_obj_iter_buf_t *iter_buf) {
   11ee0:	b480      	push	{r7}
   11ee2:	b087      	sub	sp, #28
   11ee4:	af00      	add	r7, sp, #0
   11ee6:	60f8      	str	r0, [r7, #12]
   11ee8:	60b9      	str	r1, [r7, #8]
   11eea:	607a      	str	r2, [r7, #4]
   11eec:	603b      	str	r3, [r7, #0]
    assert(sizeof(mp_obj_range_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_range_it_t *o = (mp_obj_range_it_t*)iter_buf;
   11eee:	683b      	ldr	r3, [r7, #0]
   11ef0:	617b      	str	r3, [r7, #20]
    o->base.type = &range_it_type;
   11ef2:	697b      	ldr	r3, [r7, #20]
   11ef4:	4a08      	ldr	r2, [pc, #32]	; (11f18 <mp_obj_new_range_iterator+0x38>)
   11ef6:	601a      	str	r2, [r3, #0]
    o->cur = cur;
   11ef8:	697b      	ldr	r3, [r7, #20]
   11efa:	68fa      	ldr	r2, [r7, #12]
   11efc:	605a      	str	r2, [r3, #4]
    o->stop = stop;
   11efe:	697b      	ldr	r3, [r7, #20]
   11f00:	68ba      	ldr	r2, [r7, #8]
   11f02:	609a      	str	r2, [r3, #8]
    o->step = step;
   11f04:	697b      	ldr	r3, [r7, #20]
   11f06:	687a      	ldr	r2, [r7, #4]
   11f08:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   11f0a:	697b      	ldr	r3, [r7, #20]
}
   11f0c:	4618      	mov	r0, r3
   11f0e:	371c      	adds	r7, #28
   11f10:	46bd      	mov	sp, r7
   11f12:	f85d 7b04 	ldr.w	r7, [sp], #4
   11f16:	4770      	bx	lr
   11f18:	00021538 	.word	0x00021538

00011f1c <range_print>:
    mp_int_t start;
    mp_int_t stop;
    mp_int_t step;
} mp_obj_range_t;

STATIC void range_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   11f1c:	b580      	push	{r7, lr}
   11f1e:	b086      	sub	sp, #24
   11f20:	af00      	add	r7, sp, #0
   11f22:	60f8      	str	r0, [r7, #12]
   11f24:	60b9      	str	r1, [r7, #8]
   11f26:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
   11f28:	68bb      	ldr	r3, [r7, #8]
   11f2a:	617b      	str	r3, [r7, #20]
    mp_printf(print, "range(" INT_FMT ", " INT_FMT "", self->start, self->stop);
   11f2c:	697b      	ldr	r3, [r7, #20]
   11f2e:	685a      	ldr	r2, [r3, #4]
   11f30:	697b      	ldr	r3, [r7, #20]
   11f32:	689b      	ldr	r3, [r3, #8]
   11f34:	490b      	ldr	r1, [pc, #44]	; (11f64 <range_print+0x48>)
   11f36:	68f8      	ldr	r0, [r7, #12]
   11f38:	f7ef ffb4 	bl	1ea4 <mp_printf>
    if (self->step == 1) {
   11f3c:	697b      	ldr	r3, [r7, #20]
   11f3e:	68db      	ldr	r3, [r3, #12]
   11f40:	2b01      	cmp	r3, #1
   11f42:	d104      	bne.n	11f4e <range_print+0x32>
        mp_print_str(print, ")");
   11f44:	4908      	ldr	r1, [pc, #32]	; (11f68 <range_print+0x4c>)
   11f46:	68f8      	ldr	r0, [r7, #12]
   11f48:	f7ef fc98 	bl	187c <mp_print_str>
    } else {
        mp_printf(print, ", " INT_FMT ")", self->step);
    }
}
   11f4c:	e006      	b.n	11f5c <range_print+0x40>
        mp_printf(print, ", " INT_FMT ")", self->step);
   11f4e:	697b      	ldr	r3, [r7, #20]
   11f50:	68db      	ldr	r3, [r3, #12]
   11f52:	461a      	mov	r2, r3
   11f54:	4905      	ldr	r1, [pc, #20]	; (11f6c <range_print+0x50>)
   11f56:	68f8      	ldr	r0, [r7, #12]
   11f58:	f7ef ffa4 	bl	1ea4 <mp_printf>
}
   11f5c:	bf00      	nop
   11f5e:	3718      	adds	r7, #24
   11f60:	46bd      	mov	sp, r7
   11f62:	bd80      	pop	{r7, pc}
   11f64:	00021574 	.word	0x00021574
   11f68:	00021584 	.word	0x00021584
   11f6c:	00021588 	.word	0x00021588

00011f70 <range_make_new>:

STATIC mp_obj_t range_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   11f70:	b580      	push	{r7, lr}
   11f72:	b088      	sub	sp, #32
   11f74:	af02      	add	r7, sp, #8
   11f76:	60f8      	str	r0, [r7, #12]
   11f78:	60b9      	str	r1, [r7, #8]
   11f7a:	607a      	str	r2, [r7, #4]
   11f7c:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 1, 3, false);
   11f7e:	2300      	movs	r3, #0
   11f80:	9300      	str	r3, [sp, #0]
   11f82:	2303      	movs	r3, #3
   11f84:	2201      	movs	r2, #1
   11f86:	6879      	ldr	r1, [r7, #4]
   11f88:	68b8      	ldr	r0, [r7, #8]
   11f8a:	f7fb f84f 	bl	d02c <mp_arg_check_num>

    mp_obj_range_t *o = m_new_obj(mp_obj_range_t);
   11f8e:	2010      	movs	r0, #16
   11f90:	f7ee f9c4 	bl	31c <m_malloc>
   11f94:	6178      	str	r0, [r7, #20]
    o->base.type = type;
   11f96:	697b      	ldr	r3, [r7, #20]
   11f98:	68fa      	ldr	r2, [r7, #12]
   11f9a:	601a      	str	r2, [r3, #0]
    o->start = 0;
   11f9c:	697b      	ldr	r3, [r7, #20]
   11f9e:	2200      	movs	r2, #0
   11fa0:	605a      	str	r2, [r3, #4]
    o->step = 1;
   11fa2:	697b      	ldr	r3, [r7, #20]
   11fa4:	2201      	movs	r2, #1
   11fa6:	60da      	str	r2, [r3, #12]

    if (n_args == 1) {
   11fa8:	68bb      	ldr	r3, [r7, #8]
   11faa:	2b01      	cmp	r3, #1
   11fac:	d108      	bne.n	11fc0 <range_make_new+0x50>
        o->stop = mp_obj_get_int(args[0]);
   11fae:	683b      	ldr	r3, [r7, #0]
   11fb0:	681b      	ldr	r3, [r3, #0]
   11fb2:	4618      	mov	r0, r3
   11fb4:	f7fb fe0c 	bl	dbd0 <mp_obj_get_int>
   11fb8:	4602      	mov	r2, r0
   11fba:	697b      	ldr	r3, [r7, #20]
   11fbc:	609a      	str	r2, [r3, #8]
   11fbe:	e023      	b.n	12008 <range_make_new+0x98>
    } else {
        o->start = mp_obj_get_int(args[0]);
   11fc0:	683b      	ldr	r3, [r7, #0]
   11fc2:	681b      	ldr	r3, [r3, #0]
   11fc4:	4618      	mov	r0, r3
   11fc6:	f7fb fe03 	bl	dbd0 <mp_obj_get_int>
   11fca:	4602      	mov	r2, r0
   11fcc:	697b      	ldr	r3, [r7, #20]
   11fce:	605a      	str	r2, [r3, #4]
        o->stop = mp_obj_get_int(args[1]);
   11fd0:	683b      	ldr	r3, [r7, #0]
   11fd2:	3304      	adds	r3, #4
   11fd4:	681b      	ldr	r3, [r3, #0]
   11fd6:	4618      	mov	r0, r3
   11fd8:	f7fb fdfa 	bl	dbd0 <mp_obj_get_int>
   11fdc:	4602      	mov	r2, r0
   11fde:	697b      	ldr	r3, [r7, #20]
   11fe0:	609a      	str	r2, [r3, #8]
        if (n_args == 3) {
   11fe2:	68bb      	ldr	r3, [r7, #8]
   11fe4:	2b03      	cmp	r3, #3
   11fe6:	d10f      	bne.n	12008 <range_make_new+0x98>
            o->step = mp_obj_get_int(args[2]);
   11fe8:	683b      	ldr	r3, [r7, #0]
   11fea:	3308      	adds	r3, #8
   11fec:	681b      	ldr	r3, [r3, #0]
   11fee:	4618      	mov	r0, r3
   11ff0:	f7fb fdee 	bl	dbd0 <mp_obj_get_int>
   11ff4:	4602      	mov	r2, r0
   11ff6:	697b      	ldr	r3, [r7, #20]
   11ff8:	60da      	str	r2, [r3, #12]
            if (o->step == 0) {
   11ffa:	697b      	ldr	r3, [r7, #20]
   11ffc:	68db      	ldr	r3, [r3, #12]
   11ffe:	2b00      	cmp	r3, #0
   12000:	d102      	bne.n	12008 <range_make_new+0x98>
                mp_raise_ValueError("zero step");
   12002:	4804      	ldr	r0, [pc, #16]	; (12014 <range_make_new+0xa4>)
   12004:	f7fa ffe2 	bl	cfcc <mp_raise_ValueError>
            }
        }
    }

    return MP_OBJ_FROM_PTR(o);
   12008:	697b      	ldr	r3, [r7, #20]
}
   1200a:	4618      	mov	r0, r3
   1200c:	3718      	adds	r7, #24
   1200e:	46bd      	mov	sp, r7
   12010:	bd80      	pop	{r7, pc}
   12012:	bf00      	nop
   12014:	00021590 	.word	0x00021590

00012018 <range_len>:

STATIC mp_int_t range_len(mp_obj_range_t *self) {
   12018:	b480      	push	{r7}
   1201a:	b085      	sub	sp, #20
   1201c:	af00      	add	r7, sp, #0
   1201e:	6078      	str	r0, [r7, #4]
    // When computing length, need to take into account step!=1 and step<0.
    mp_int_t len = self->stop - self->start + self->step;
   12020:	687b      	ldr	r3, [r7, #4]
   12022:	689a      	ldr	r2, [r3, #8]
   12024:	687b      	ldr	r3, [r7, #4]
   12026:	685b      	ldr	r3, [r3, #4]
   12028:	1ad2      	subs	r2, r2, r3
   1202a:	687b      	ldr	r3, [r7, #4]
   1202c:	68db      	ldr	r3, [r3, #12]
   1202e:	4413      	add	r3, r2
   12030:	60fb      	str	r3, [r7, #12]
    if (self->step > 0) {
   12032:	687b      	ldr	r3, [r7, #4]
   12034:	68db      	ldr	r3, [r3, #12]
   12036:	2b00      	cmp	r3, #0
   12038:	dd03      	ble.n	12042 <range_len+0x2a>
        len -= 1;
   1203a:	68fb      	ldr	r3, [r7, #12]
   1203c:	3b01      	subs	r3, #1
   1203e:	60fb      	str	r3, [r7, #12]
   12040:	e002      	b.n	12048 <range_len+0x30>
    } else {
        len += 1;
   12042:	68fb      	ldr	r3, [r7, #12]
   12044:	3301      	adds	r3, #1
   12046:	60fb      	str	r3, [r7, #12]
    }
    len = len / self->step;
   12048:	687b      	ldr	r3, [r7, #4]
   1204a:	68db      	ldr	r3, [r3, #12]
   1204c:	68fa      	ldr	r2, [r7, #12]
   1204e:	fb92 f3f3 	sdiv	r3, r2, r3
   12052:	60fb      	str	r3, [r7, #12]
    if (len < 0) {
   12054:	68fb      	ldr	r3, [r7, #12]
   12056:	2b00      	cmp	r3, #0
   12058:	da01      	bge.n	1205e <range_len+0x46>
        len = 0;
   1205a:	2300      	movs	r3, #0
   1205c:	60fb      	str	r3, [r7, #12]
    }
    return len;
   1205e:	68fb      	ldr	r3, [r7, #12]
}
   12060:	4618      	mov	r0, r3
   12062:	3714      	adds	r7, #20
   12064:	46bd      	mov	sp, r7
   12066:	f85d 7b04 	ldr.w	r7, [sp], #4
   1206a:	4770      	bx	lr

0001206c <range_unary_op>:

STATIC mp_obj_t range_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   1206c:	b580      	push	{r7, lr}
   1206e:	b084      	sub	sp, #16
   12070:	af00      	add	r7, sp, #0
   12072:	6078      	str	r0, [r7, #4]
   12074:	6039      	str	r1, [r7, #0]
    mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
   12076:	683b      	ldr	r3, [r7, #0]
   12078:	60fb      	str	r3, [r7, #12]
    mp_int_t len = range_len(self);
   1207a:	68f8      	ldr	r0, [r7, #12]
   1207c:	f7ff ffcc 	bl	12018 <range_len>
   12080:	60b8      	str	r0, [r7, #8]
    switch (op) {
   12082:	687b      	ldr	r3, [r7, #4]
   12084:	2b04      	cmp	r3, #4
   12086:	d002      	beq.n	1208e <range_unary_op+0x22>
   12088:	2b05      	cmp	r3, #5
   1208a:	d00b      	beq.n	120a4 <range_unary_op+0x38>
   1208c:	e00f      	b.n	120ae <range_unary_op+0x42>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(len > 0);
   1208e:	68bb      	ldr	r3, [r7, #8]
   12090:	2b00      	cmp	r3, #0
   12092:	bfcc      	ite	gt
   12094:	2301      	movgt	r3, #1
   12096:	2300      	movle	r3, #0
   12098:	b2db      	uxtb	r3, r3
   1209a:	4618      	mov	r0, r3
   1209c:	f7ff fedc 	bl	11e58 <mp_obj_new_bool>
   120a0:	4603      	mov	r3, r0
   120a2:	e005      	b.n	120b0 <range_unary_op+0x44>
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(len);
   120a4:	68bb      	ldr	r3, [r7, #8]
   120a6:	005b      	lsls	r3, r3, #1
   120a8:	f043 0301 	orr.w	r3, r3, #1
   120ac:	e000      	b.n	120b0 <range_unary_op+0x44>
        default: return MP_OBJ_NULL; // op not supported
   120ae:	2300      	movs	r3, #0
    }
}
   120b0:	4618      	mov	r0, r3
   120b2:	3710      	adds	r7, #16
   120b4:	46bd      	mov	sp, r7
   120b6:	bd80      	pop	{r7, pc}

000120b8 <range_subscr>:
                && (lhs_len == 1 || lhs->step == rhs->step)))
    );
}
#endif

STATIC mp_obj_t range_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   120b8:	b580      	push	{r7, lr}
   120ba:	b088      	sub	sp, #32
   120bc:	af00      	add	r7, sp, #0
   120be:	60f8      	str	r0, [r7, #12]
   120c0:	60b9      	str	r1, [r7, #8]
   120c2:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_SENTINEL) {
   120c4:	687b      	ldr	r3, [r7, #4]
   120c6:	2b08      	cmp	r3, #8
   120c8:	d11b      	bne.n	12102 <range_subscr+0x4a>
        // load
        mp_obj_range_t *self = MP_OBJ_TO_PTR(self_in);
   120ca:	68fb      	ldr	r3, [r7, #12]
   120cc:	61fb      	str	r3, [r7, #28]
        mp_int_t len = range_len(self);
   120ce:	69f8      	ldr	r0, [r7, #28]
   120d0:	f7ff ffa2 	bl	12018 <range_len>
   120d4:	61b8      	str	r0, [r7, #24]
                o->stop -= self->step;
            }
            return MP_OBJ_FROM_PTR(o);
        }
#endif
        size_t index_val = mp_get_index(self->base.type, len, index, false);
   120d6:	69fb      	ldr	r3, [r7, #28]
   120d8:	6818      	ldr	r0, [r3, #0]
   120da:	69b9      	ldr	r1, [r7, #24]
   120dc:	2300      	movs	r3, #0
   120de:	68ba      	ldr	r2, [r7, #8]
   120e0:	f7fb fe62 	bl	dda8 <mp_get_index>
   120e4:	6178      	str	r0, [r7, #20]
        return MP_OBJ_NEW_SMALL_INT(self->start + index_val * self->step);
   120e6:	69fb      	ldr	r3, [r7, #28]
   120e8:	685b      	ldr	r3, [r3, #4]
   120ea:	461a      	mov	r2, r3
   120ec:	69fb      	ldr	r3, [r7, #28]
   120ee:	68db      	ldr	r3, [r3, #12]
   120f0:	4619      	mov	r1, r3
   120f2:	697b      	ldr	r3, [r7, #20]
   120f4:	fb03 f301 	mul.w	r3, r3, r1
   120f8:	4413      	add	r3, r2
   120fa:	005b      	lsls	r3, r3, #1
   120fc:	f043 0301 	orr.w	r3, r3, #1
   12100:	e000      	b.n	12104 <range_subscr+0x4c>
    } else {
        return MP_OBJ_NULL; // op not supported
   12102:	2300      	movs	r3, #0
    }
}
   12104:	4618      	mov	r0, r3
   12106:	3720      	adds	r7, #32
   12108:	46bd      	mov	sp, r7
   1210a:	bd80      	pop	{r7, pc}

0001210c <range_getiter>:

STATIC mp_obj_t range_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
   1210c:	b580      	push	{r7, lr}
   1210e:	b084      	sub	sp, #16
   12110:	af00      	add	r7, sp, #0
   12112:	6078      	str	r0, [r7, #4]
   12114:	6039      	str	r1, [r7, #0]
    mp_obj_range_t *o = MP_OBJ_TO_PTR(o_in);
   12116:	687b      	ldr	r3, [r7, #4]
   12118:	60fb      	str	r3, [r7, #12]
    return mp_obj_new_range_iterator(o->start, o->stop, o->step, iter_buf);
   1211a:	68fb      	ldr	r3, [r7, #12]
   1211c:	6858      	ldr	r0, [r3, #4]
   1211e:	68fb      	ldr	r3, [r7, #12]
   12120:	6899      	ldr	r1, [r3, #8]
   12122:	68fb      	ldr	r3, [r7, #12]
   12124:	68da      	ldr	r2, [r3, #12]
   12126:	683b      	ldr	r3, [r7, #0]
   12128:	f7ff feda 	bl	11ee0 <mp_obj_new_range_iterator>
   1212c:	4603      	mov	r3, r0
}
   1212e:	4618      	mov	r0, r3
   12130:	3710      	adds	r7, #16
   12132:	46bd      	mov	sp, r7
   12134:	bd80      	pop	{r7, pc}
   12136:	bf00      	nop

00012138 <range_attr>:


#if MICROPY_PY_BUILTINS_RANGE_ATTRS
STATIC void range_attr(mp_obj_t o_in, qstr attr, mp_obj_t *dest) {
   12138:	b580      	push	{r7, lr}
   1213a:	b086      	sub	sp, #24
   1213c:	af00      	add	r7, sp, #0
   1213e:	60f8      	str	r0, [r7, #12]
   12140:	60b9      	str	r1, [r7, #8]
   12142:	607a      	str	r2, [r7, #4]
    if (dest[0] != MP_OBJ_NULL) {
   12144:	687b      	ldr	r3, [r7, #4]
   12146:	681b      	ldr	r3, [r3, #0]
   12148:	2b00      	cmp	r3, #0
   1214a:	d125      	bne.n	12198 <range_attr+0x60>
        // not load attribute
        return;
    }
    mp_obj_range_t *o = MP_OBJ_TO_PTR(o_in);
   1214c:	68fb      	ldr	r3, [r7, #12]
   1214e:	617b      	str	r3, [r7, #20]
    if (attr == MP_QSTR_start) {
   12150:	68bb      	ldr	r3, [r7, #8]
   12152:	2bb4      	cmp	r3, #180	; 0xb4
   12154:	d108      	bne.n	12168 <range_attr+0x30>
        dest[0] = mp_obj_new_int(o->start);
   12156:	697b      	ldr	r3, [r7, #20]
   12158:	685b      	ldr	r3, [r3, #4]
   1215a:	4618      	mov	r0, r3
   1215c:	f7fe fbf6 	bl	1094c <mp_obj_new_int>
   12160:	4602      	mov	r2, r0
   12162:	687b      	ldr	r3, [r7, #4]
   12164:	601a      	str	r2, [r3, #0]
   12166:	e018      	b.n	1219a <range_attr+0x62>
    } else if (attr == MP_QSTR_stop) {
   12168:	68bb      	ldr	r3, [r7, #8]
   1216a:	2bb8      	cmp	r3, #184	; 0xb8
   1216c:	d108      	bne.n	12180 <range_attr+0x48>
        dest[0] = mp_obj_new_int(o->stop);
   1216e:	697b      	ldr	r3, [r7, #20]
   12170:	689b      	ldr	r3, [r3, #8]
   12172:	4618      	mov	r0, r3
   12174:	f7fe fbea 	bl	1094c <mp_obj_new_int>
   12178:	4602      	mov	r2, r0
   1217a:	687b      	ldr	r3, [r7, #4]
   1217c:	601a      	str	r2, [r3, #0]
   1217e:	e00c      	b.n	1219a <range_attr+0x62>
    } else if (attr == MP_QSTR_step) {
   12180:	68bb      	ldr	r3, [r7, #8]
   12182:	2bb7      	cmp	r3, #183	; 0xb7
   12184:	d109      	bne.n	1219a <range_attr+0x62>
        dest[0] = mp_obj_new_int(o->step);
   12186:	697b      	ldr	r3, [r7, #20]
   12188:	68db      	ldr	r3, [r3, #12]
   1218a:	4618      	mov	r0, r3
   1218c:	f7fe fbde 	bl	1094c <mp_obj_new_int>
   12190:	4602      	mov	r2, r0
   12192:	687b      	ldr	r3, [r7, #4]
   12194:	601a      	str	r2, [r3, #0]
   12196:	e000      	b.n	1219a <range_attr+0x62>
        return;
   12198:	bf00      	nop
    }
}
   1219a:	3718      	adds	r7, #24
   1219c:	46bd      	mov	sp, r7
   1219e:	bd80      	pop	{r7, pc}

000121a0 <singleton_print>:
typedef struct _mp_obj_singleton_t {
    mp_obj_base_t base;
    qstr name;
} mp_obj_singleton_t;

STATIC void singleton_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   121a0:	b580      	push	{r7, lr}
   121a2:	b086      	sub	sp, #24
   121a4:	af00      	add	r7, sp, #0
   121a6:	60f8      	str	r0, [r7, #12]
   121a8:	60b9      	str	r1, [r7, #8]
   121aa:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_singleton_t *self = MP_OBJ_TO_PTR(self_in);
   121ac:	68bb      	ldr	r3, [r7, #8]
   121ae:	617b      	str	r3, [r7, #20]
    mp_printf(print, "%q", self->name);
   121b0:	697b      	ldr	r3, [r7, #20]
   121b2:	685b      	ldr	r3, [r3, #4]
   121b4:	461a      	mov	r2, r3
   121b6:	4904      	ldr	r1, [pc, #16]	; (121c8 <singleton_print+0x28>)
   121b8:	68f8      	ldr	r0, [r7, #12]
   121ba:	f7ef fe73 	bl	1ea4 <mp_printf>
}
   121be:	bf00      	nop
   121c0:	3718      	adds	r7, #24
   121c2:	46bd      	mov	sp, r7
   121c4:	bd80      	pop	{r7, pc}
   121c6:	bf00      	nop
   121c8:	000215d8 	.word	0x000215d8

000121cc <utf8_next_char>:
static inline const byte *utf8_next_char(const byte *s) { return s + 1; }
   121cc:	b480      	push	{r7}
   121ce:	b083      	sub	sp, #12
   121d0:	af00      	add	r7, sp, #0
   121d2:	6078      	str	r0, [r7, #4]
   121d4:	687b      	ldr	r3, [r7, #4]
   121d6:	3301      	adds	r3, #1
   121d8:	4618      	mov	r0, r3
   121da:	370c      	adds	r7, #12
   121dc:	46bd      	mov	sp, r7
   121de:	f85d 7b04 	ldr.w	r7, [sp], #4
   121e2:	4770      	bx	lr

000121e4 <utf8_charlen>:
static inline size_t utf8_charlen(const byte *str, size_t len) { (void)str; return len; }
   121e4:	b480      	push	{r7}
   121e6:	b083      	sub	sp, #12
   121e8:	af00      	add	r7, sp, #0
   121ea:	6078      	str	r0, [r7, #4]
   121ec:	6039      	str	r1, [r7, #0]
   121ee:	683b      	ldr	r3, [r7, #0]
   121f0:	4618      	mov	r0, r3
   121f2:	370c      	adds	r7, #12
   121f4:	46bd      	mov	sp, r7
   121f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   121fa:	4770      	bx	lr

000121fc <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   121fc:	b480      	push	{r7}
   121fe:	b083      	sub	sp, #12
   12200:	af00      	add	r7, sp, #0
   12202:	6078      	str	r0, [r7, #4]
   12204:	687b      	ldr	r3, [r7, #4]
   12206:	f003 0301 	and.w	r3, r3, #1
   1220a:	2b00      	cmp	r3, #0
   1220c:	bf14      	ite	ne
   1220e:	2301      	movne	r3, #1
   12210:	2300      	moveq	r3, #0
   12212:	b2db      	uxtb	r3, r3
   12214:	4618      	mov	r0, r3
   12216:	370c      	adds	r7, #12
   12218:	46bd      	mov	sp, r7
   1221a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1221e:	4770      	bx	lr

00012220 <MP_OBJ_IS_QSTR>:
    { return ((((mp_int_t)(o)) & 3) == 2); }
   12220:	b480      	push	{r7}
   12222:	b083      	sub	sp, #12
   12224:	af00      	add	r7, sp, #0
   12226:	6078      	str	r0, [r7, #4]
   12228:	687b      	ldr	r3, [r7, #4]
   1222a:	f003 0303 	and.w	r3, r3, #3
   1222e:	2b02      	cmp	r3, #2
   12230:	bf0c      	ite	eq
   12232:	2301      	moveq	r3, #1
   12234:	2300      	movne	r3, #0
   12236:	b2db      	uxtb	r3, r3
   12238:	4618      	mov	r0, r3
   1223a:	370c      	adds	r7, #12
   1223c:	46bd      	mov	sp, r7
   1223e:	f85d 7b04 	ldr.w	r7, [sp], #4
   12242:	4770      	bx	lr

00012244 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   12244:	b480      	push	{r7}
   12246:	b083      	sub	sp, #12
   12248:	af00      	add	r7, sp, #0
   1224a:	6078      	str	r0, [r7, #4]
   1224c:	687b      	ldr	r3, [r7, #4]
   1224e:	f003 0303 	and.w	r3, r3, #3
   12252:	2b00      	cmp	r3, #0
   12254:	bf0c      	ite	eq
   12256:	2301      	moveq	r3, #1
   12258:	2300      	movne	r3, #0
   1225a:	b2db      	uxtb	r3, r3
   1225c:	4618      	mov	r0, r3
   1225e:	370c      	adds	r7, #12
   12260:	46bd      	mov	sp, r7
   12262:	f85d 7b04 	ldr.w	r7, [sp], #4
   12266:	4770      	bx	lr

00012268 <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   12268:	b480      	push	{r7}
   1226a:	b083      	sub	sp, #12
   1226c:	af00      	add	r7, sp, #0
   1226e:	6078      	str	r0, [r7, #4]
   12270:	687b      	ldr	r3, [r7, #4]
   12272:	2b00      	cmp	r3, #0
   12274:	d001      	beq.n	1227a <mp_obj_new_bool+0x12>
   12276:	4b04      	ldr	r3, [pc, #16]	; (12288 <mp_obj_new_bool+0x20>)
   12278:	e000      	b.n	1227c <mp_obj_new_bool+0x14>
   1227a:	4b04      	ldr	r3, [pc, #16]	; (1228c <mp_obj_new_bool+0x24>)
   1227c:	4618      	mov	r0, r3
   1227e:	370c      	adds	r7, #12
   12280:	46bd      	mov	sp, r7
   12282:	f85d 7b04 	ldr.w	r7, [sp], #4
   12286:	4770      	bx	lr
   12288:	0001fc44 	.word	0x0001fc44
   1228c:	0001fc3c 	.word	0x0001fc3c

00012290 <mp_str_print_quoted>:
STATIC NORETURN void bad_implicit_conversion(mp_obj_t self_in);

/******************************************************************************/
/* str                                                                        */

void mp_str_print_quoted(const mp_print_t *print, const byte *str_data, size_t str_len, bool is_bytes) {
   12290:	b580      	push	{r7, lr}
   12292:	b08a      	sub	sp, #40	; 0x28
   12294:	af00      	add	r7, sp, #0
   12296:	60f8      	str	r0, [r7, #12]
   12298:	60b9      	str	r1, [r7, #8]
   1229a:	607a      	str	r2, [r7, #4]
   1229c:	70fb      	strb	r3, [r7, #3]
    // this escapes characters, but it will be very slow to print (calling print many times)
    bool has_single_quote = false;
   1229e:	2300      	movs	r3, #0
   122a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool has_double_quote = false;
   122a4:	2300      	movs	r3, #0
   122a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (const byte *s = str_data, *top = str_data + str_len; !has_double_quote && s < top; s++) {
   122aa:	68bb      	ldr	r3, [r7, #8]
   122ac:	623b      	str	r3, [r7, #32]
   122ae:	68ba      	ldr	r2, [r7, #8]
   122b0:	687b      	ldr	r3, [r7, #4]
   122b2:	4413      	add	r3, r2
   122b4:	617b      	str	r3, [r7, #20]
   122b6:	e011      	b.n	122dc <mp_str_print_quoted+0x4c>
        if (*s == '\'') {
   122b8:	6a3b      	ldr	r3, [r7, #32]
   122ba:	781b      	ldrb	r3, [r3, #0]
   122bc:	2b27      	cmp	r3, #39	; 0x27
   122be:	d103      	bne.n	122c8 <mp_str_print_quoted+0x38>
            has_single_quote = true;
   122c0:	2301      	movs	r3, #1
   122c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   122c6:	e006      	b.n	122d6 <mp_str_print_quoted+0x46>
        } else if (*s == '"') {
   122c8:	6a3b      	ldr	r3, [r7, #32]
   122ca:	781b      	ldrb	r3, [r3, #0]
   122cc:	2b22      	cmp	r3, #34	; 0x22
   122ce:	d102      	bne.n	122d6 <mp_str_print_quoted+0x46>
            has_double_quote = true;
   122d0:	2301      	movs	r3, #1
   122d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (const byte *s = str_data, *top = str_data + str_len; !has_double_quote && s < top; s++) {
   122d6:	6a3b      	ldr	r3, [r7, #32]
   122d8:	3301      	adds	r3, #1
   122da:	623b      	str	r3, [r7, #32]
   122dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   122e0:	f083 0301 	eor.w	r3, r3, #1
   122e4:	b2db      	uxtb	r3, r3
   122e6:	2b00      	cmp	r3, #0
   122e8:	d003      	beq.n	122f2 <mp_str_print_quoted+0x62>
   122ea:	6a3a      	ldr	r2, [r7, #32]
   122ec:	697b      	ldr	r3, [r7, #20]
   122ee:	429a      	cmp	r2, r3
   122f0:	d3e2      	bcc.n	122b8 <mp_str_print_quoted+0x28>
        }
    }
    int quote_char = '\'';
   122f2:	2327      	movs	r3, #39	; 0x27
   122f4:	61fb      	str	r3, [r7, #28]
    if (has_single_quote && !has_double_quote) {
   122f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   122fa:	2b00      	cmp	r3, #0
   122fc:	d008      	beq.n	12310 <mp_str_print_quoted+0x80>
   122fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   12302:	f083 0301 	eor.w	r3, r3, #1
   12306:	b2db      	uxtb	r3, r3
   12308:	2b00      	cmp	r3, #0
   1230a:	d001      	beq.n	12310 <mp_str_print_quoted+0x80>
        quote_char = '"';
   1230c:	2322      	movs	r3, #34	; 0x22
   1230e:	61fb      	str	r3, [r7, #28]
    }
    mp_printf(print, "%c", quote_char);
   12310:	69fa      	ldr	r2, [r7, #28]
   12312:	4936      	ldr	r1, [pc, #216]	; (123ec <mp_str_print_quoted+0x15c>)
   12314:	68f8      	ldr	r0, [r7, #12]
   12316:	f7ef fdc5 	bl	1ea4 <mp_printf>
    for (const byte *s = str_data, *top = str_data + str_len; s < top; s++) {
   1231a:	68bb      	ldr	r3, [r7, #8]
   1231c:	61bb      	str	r3, [r7, #24]
   1231e:	68ba      	ldr	r2, [r7, #8]
   12320:	687b      	ldr	r3, [r7, #4]
   12322:	4413      	add	r3, r2
   12324:	613b      	str	r3, [r7, #16]
   12326:	e054      	b.n	123d2 <mp_str_print_quoted+0x142>
        if (*s == quote_char) {
   12328:	69bb      	ldr	r3, [r7, #24]
   1232a:	781b      	ldrb	r3, [r3, #0]
   1232c:	461a      	mov	r2, r3
   1232e:	69fb      	ldr	r3, [r7, #28]
   12330:	429a      	cmp	r2, r3
   12332:	d105      	bne.n	12340 <mp_str_print_quoted+0xb0>
            mp_printf(print, "\\%c", quote_char);
   12334:	69fa      	ldr	r2, [r7, #28]
   12336:	492e      	ldr	r1, [pc, #184]	; (123f0 <mp_str_print_quoted+0x160>)
   12338:	68f8      	ldr	r0, [r7, #12]
   1233a:	f7ef fdb3 	bl	1ea4 <mp_printf>
   1233e:	e045      	b.n	123cc <mp_str_print_quoted+0x13c>
        } else if (*s == '\\') {
   12340:	69bb      	ldr	r3, [r7, #24]
   12342:	781b      	ldrb	r3, [r3, #0]
   12344:	2b5c      	cmp	r3, #92	; 0x5c
   12346:	d104      	bne.n	12352 <mp_str_print_quoted+0xc2>
            mp_print_str(print, "\\\\");
   12348:	492a      	ldr	r1, [pc, #168]	; (123f4 <mp_str_print_quoted+0x164>)
   1234a:	68f8      	ldr	r0, [r7, #12]
   1234c:	f7ef fa96 	bl	187c <mp_print_str>
   12350:	e03c      	b.n	123cc <mp_str_print_quoted+0x13c>
        } else if (*s >= 0x20 && *s != 0x7f && (!is_bytes || *s < 0x80)) {
   12352:	69bb      	ldr	r3, [r7, #24]
   12354:	781b      	ldrb	r3, [r3, #0]
   12356:	2b1f      	cmp	r3, #31
   12358:	d916      	bls.n	12388 <mp_str_print_quoted+0xf8>
   1235a:	69bb      	ldr	r3, [r7, #24]
   1235c:	781b      	ldrb	r3, [r3, #0]
   1235e:	2b7f      	cmp	r3, #127	; 0x7f
   12360:	d012      	beq.n	12388 <mp_str_print_quoted+0xf8>
   12362:	78fb      	ldrb	r3, [r7, #3]
   12364:	f083 0301 	eor.w	r3, r3, #1
   12368:	b2db      	uxtb	r3, r3
   1236a:	2b00      	cmp	r3, #0
   1236c:	d104      	bne.n	12378 <mp_str_print_quoted+0xe8>
   1236e:	69bb      	ldr	r3, [r7, #24]
   12370:	781b      	ldrb	r3, [r3, #0]
   12372:	b25b      	sxtb	r3, r3
   12374:	2b00      	cmp	r3, #0
   12376:	db07      	blt.n	12388 <mp_str_print_quoted+0xf8>
            // In strings, anything which is not ascii control character
            // is printed as is, this includes characters in range 0x80-0xff
            // (which can be non-Latin letters, etc.)
            mp_printf(print, "%c", *s);
   12378:	69bb      	ldr	r3, [r7, #24]
   1237a:	781b      	ldrb	r3, [r3, #0]
   1237c:	461a      	mov	r2, r3
   1237e:	491b      	ldr	r1, [pc, #108]	; (123ec <mp_str_print_quoted+0x15c>)
   12380:	68f8      	ldr	r0, [r7, #12]
   12382:	f7ef fd8f 	bl	1ea4 <mp_printf>
   12386:	e021      	b.n	123cc <mp_str_print_quoted+0x13c>
        } else if (*s == '\n') {
   12388:	69bb      	ldr	r3, [r7, #24]
   1238a:	781b      	ldrb	r3, [r3, #0]
   1238c:	2b0a      	cmp	r3, #10
   1238e:	d104      	bne.n	1239a <mp_str_print_quoted+0x10a>
            mp_print_str(print, "\\n");
   12390:	4919      	ldr	r1, [pc, #100]	; (123f8 <mp_str_print_quoted+0x168>)
   12392:	68f8      	ldr	r0, [r7, #12]
   12394:	f7ef fa72 	bl	187c <mp_print_str>
   12398:	e018      	b.n	123cc <mp_str_print_quoted+0x13c>
        } else if (*s == '\r') {
   1239a:	69bb      	ldr	r3, [r7, #24]
   1239c:	781b      	ldrb	r3, [r3, #0]
   1239e:	2b0d      	cmp	r3, #13
   123a0:	d104      	bne.n	123ac <mp_str_print_quoted+0x11c>
            mp_print_str(print, "\\r");
   123a2:	4916      	ldr	r1, [pc, #88]	; (123fc <mp_str_print_quoted+0x16c>)
   123a4:	68f8      	ldr	r0, [r7, #12]
   123a6:	f7ef fa69 	bl	187c <mp_print_str>
   123aa:	e00f      	b.n	123cc <mp_str_print_quoted+0x13c>
        } else if (*s == '\t') {
   123ac:	69bb      	ldr	r3, [r7, #24]
   123ae:	781b      	ldrb	r3, [r3, #0]
   123b0:	2b09      	cmp	r3, #9
   123b2:	d104      	bne.n	123be <mp_str_print_quoted+0x12e>
            mp_print_str(print, "\\t");
   123b4:	4912      	ldr	r1, [pc, #72]	; (12400 <mp_str_print_quoted+0x170>)
   123b6:	68f8      	ldr	r0, [r7, #12]
   123b8:	f7ef fa60 	bl	187c <mp_print_str>
   123bc:	e006      	b.n	123cc <mp_str_print_quoted+0x13c>
        } else {
            mp_printf(print, "\\x%02x", *s);
   123be:	69bb      	ldr	r3, [r7, #24]
   123c0:	781b      	ldrb	r3, [r3, #0]
   123c2:	461a      	mov	r2, r3
   123c4:	490f      	ldr	r1, [pc, #60]	; (12404 <mp_str_print_quoted+0x174>)
   123c6:	68f8      	ldr	r0, [r7, #12]
   123c8:	f7ef fd6c 	bl	1ea4 <mp_printf>
    for (const byte *s = str_data, *top = str_data + str_len; s < top; s++) {
   123cc:	69bb      	ldr	r3, [r7, #24]
   123ce:	3301      	adds	r3, #1
   123d0:	61bb      	str	r3, [r7, #24]
   123d2:	69ba      	ldr	r2, [r7, #24]
   123d4:	693b      	ldr	r3, [r7, #16]
   123d6:	429a      	cmp	r2, r3
   123d8:	d3a6      	bcc.n	12328 <mp_str_print_quoted+0x98>
        }
    }
    mp_printf(print, "%c", quote_char);
   123da:	69fa      	ldr	r2, [r7, #28]
   123dc:	4903      	ldr	r1, [pc, #12]	; (123ec <mp_str_print_quoted+0x15c>)
   123de:	68f8      	ldr	r0, [r7, #12]
   123e0:	f7ef fd60 	bl	1ea4 <mp_printf>
}
   123e4:	bf00      	nop
   123e6:	3728      	adds	r7, #40	; 0x28
   123e8:	46bd      	mov	sp, r7
   123ea:	bd80      	pop	{r7, pc}
   123ec:	00021620 	.word	0x00021620
   123f0:	00021624 	.word	0x00021624
   123f4:	00021628 	.word	0x00021628
   123f8:	0002162c 	.word	0x0002162c
   123fc:	00021630 	.word	0x00021630
   12400:	00021634 	.word	0x00021634
   12404:	00021638 	.word	0x00021638

00012408 <str_print>:
    }
    mp_print_str(print, "\"");
}
#endif

STATIC void str_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   12408:	b580      	push	{r7, lr}
   1240a:	b088      	sub	sp, #32
   1240c:	af00      	add	r7, sp, #0
   1240e:	60f8      	str	r0, [r7, #12]
   12410:	60b9      	str	r1, [r7, #8]
   12412:	607a      	str	r2, [r7, #4]
    GET_STR_DATA_LEN(self_in, str_data, str_len);
   12414:	68b8      	ldr	r0, [r7, #8]
   12416:	f7ff ff03 	bl	12220 <MP_OBJ_IS_QSTR>
   1241a:	4603      	mov	r3, r0
   1241c:	2b00      	cmp	r3, #0
   1241e:	d009      	beq.n	12434 <str_print+0x2c>
   12420:	68bb      	ldr	r3, [r7, #8]
   12422:	089b      	lsrs	r3, r3, #2
   12424:	f107 0214 	add.w	r2, r7, #20
   12428:	4611      	mov	r1, r2
   1242a:	4618      	mov	r0, r3
   1242c:	f7ee fef0 	bl	1210 <qstr_data>
   12430:	61f8      	str	r0, [r7, #28]
   12432:	e005      	b.n	12440 <str_print+0x38>
   12434:	68bb      	ldr	r3, [r7, #8]
   12436:	689b      	ldr	r3, [r3, #8]
   12438:	617b      	str	r3, [r7, #20]
   1243a:	68bb      	ldr	r3, [r7, #8]
   1243c:	68db      	ldr	r3, [r3, #12]
   1243e:	61fb      	str	r3, [r7, #28]
        mp_str_print_json(print, str_data, str_len);
        return;
    }
    #endif
    #if !MICROPY_PY_BUILTINS_STR_UNICODE
    bool is_bytes = MP_OBJ_IS_TYPE(self_in, &mp_type_bytes);
   12440:	68b8      	ldr	r0, [r7, #8]
   12442:	f7ff feff 	bl	12244 <MP_OBJ_IS_OBJ>
   12446:	4603      	mov	r3, r0
   12448:	2b00      	cmp	r3, #0
   1244a:	d006      	beq.n	1245a <str_print+0x52>
   1244c:	68bb      	ldr	r3, [r7, #8]
   1244e:	681b      	ldr	r3, [r3, #0]
   12450:	4a17      	ldr	r2, [pc, #92]	; (124b0 <str_print+0xa8>)
   12452:	4293      	cmp	r3, r2
   12454:	d101      	bne.n	1245a <str_print+0x52>
   12456:	2301      	movs	r3, #1
   12458:	e000      	b.n	1245c <str_print+0x54>
   1245a:	2300      	movs	r3, #0
   1245c:	76fb      	strb	r3, [r7, #27]
   1245e:	7efb      	ldrb	r3, [r7, #27]
   12460:	f003 0301 	and.w	r3, r3, #1
   12464:	76fb      	strb	r3, [r7, #27]
    #else
    bool is_bytes = true;
    #endif
    if (kind == PRINT_RAW || (!MICROPY_PY_BUILTINS_STR_UNICODE && kind == PRINT_STR && !is_bytes)) {
   12466:	687b      	ldr	r3, [r7, #4]
   12468:	2b04      	cmp	r3, #4
   1246a:	d008      	beq.n	1247e <str_print+0x76>
   1246c:	687b      	ldr	r3, [r7, #4]
   1246e:	2b00      	cmp	r3, #0
   12470:	d10c      	bne.n	1248c <str_print+0x84>
   12472:	7efb      	ldrb	r3, [r7, #27]
   12474:	f083 0301 	eor.w	r3, r3, #1
   12478:	b2db      	uxtb	r3, r3
   1247a:	2b00      	cmp	r3, #0
   1247c:	d006      	beq.n	1248c <str_print+0x84>
        mp_printf(print, "%.*s", str_len, str_data);
   1247e:	697a      	ldr	r2, [r7, #20]
   12480:	69fb      	ldr	r3, [r7, #28]
   12482:	490c      	ldr	r1, [pc, #48]	; (124b4 <str_print+0xac>)
   12484:	68f8      	ldr	r0, [r7, #12]
   12486:	f7ef fd0d 	bl	1ea4 <mp_printf>
   1248a:	e00c      	b.n	124a6 <str_print+0x9e>
    } else {
        if (is_bytes) {
   1248c:	7efb      	ldrb	r3, [r7, #27]
   1248e:	2b00      	cmp	r3, #0
   12490:	d003      	beq.n	1249a <str_print+0x92>
            mp_print_str(print, "b");
   12492:	4909      	ldr	r1, [pc, #36]	; (124b8 <str_print+0xb0>)
   12494:	68f8      	ldr	r0, [r7, #12]
   12496:	f7ef f9f1 	bl	187c <mp_print_str>
        }
        mp_str_print_quoted(print, str_data, str_len, is_bytes);
   1249a:	697a      	ldr	r2, [r7, #20]
   1249c:	7efb      	ldrb	r3, [r7, #27]
   1249e:	69f9      	ldr	r1, [r7, #28]
   124a0:	68f8      	ldr	r0, [r7, #12]
   124a2:	f7ff fef5 	bl	12290 <mp_str_print_quoted>
    }
}
   124a6:	bf00      	nop
   124a8:	3720      	adds	r7, #32
   124aa:	46bd      	mov	sp, r7
   124ac:	bd80      	pop	{r7, pc}
   124ae:	bf00      	nop
   124b0:	00021c20 	.word	0x00021c20
   124b4:	00021640 	.word	0x00021640
   124b8:	00021648 	.word	0x00021648

000124bc <mp_obj_str_make_new>:

mp_obj_t mp_obj_str_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   124bc:	b580      	push	{r7, lr}
   124be:	b094      	sub	sp, #80	; 0x50
   124c0:	af02      	add	r7, sp, #8
   124c2:	60f8      	str	r0, [r7, #12]
   124c4:	60b9      	str	r1, [r7, #8]
   124c6:	607a      	str	r2, [r7, #4]
   124c8:	603b      	str	r3, [r7, #0]
    if (n_kw != 0) {
        mp_arg_error_unimpl_kw();
    }
#endif

    mp_arg_check_num(n_args, n_kw, 0, 3, false);
   124ca:	2300      	movs	r3, #0
   124cc:	9300      	str	r3, [sp, #0]
   124ce:	2303      	movs	r3, #3
   124d0:	2200      	movs	r2, #0
   124d2:	6879      	ldr	r1, [r7, #4]
   124d4:	68b8      	ldr	r0, [r7, #8]
   124d6:	f7fa fda9 	bl	d02c <mp_arg_check_num>

    switch (n_args) {
   124da:	68bb      	ldr	r3, [r7, #8]
   124dc:	2b00      	cmp	r3, #0
   124de:	d002      	beq.n	124e6 <mp_obj_str_make_new+0x2a>
   124e0:	2b01      	cmp	r3, #1
   124e2:	d002      	beq.n	124ea <mp_obj_str_make_new+0x2e>
   124e4:	e019      	b.n	1251a <mp_obj_str_make_new+0x5e>
        case 0:
            return MP_OBJ_NEW_QSTR(MP_QSTR_);
   124e6:	2306      	movs	r3, #6
   124e8:	e089      	b.n	125fe <mp_obj_str_make_new+0x142>

        case 1: {
            vstr_t vstr;
            mp_print_t print;
            vstr_init_print(&vstr, 16, &print);
   124ea:	f107 0220 	add.w	r2, r7, #32
   124ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
   124f2:	2110      	movs	r1, #16
   124f4:	4618      	mov	r0, r3
   124f6:	f7ee ff51 	bl	139c <vstr_init_print>
            mp_obj_print_helper(&print, args[0], PRINT_STR);
   124fa:	683b      	ldr	r3, [r7, #0]
   124fc:	6819      	ldr	r1, [r3, #0]
   124fe:	f107 0320 	add.w	r3, r7, #32
   12502:	2200      	movs	r2, #0
   12504:	4618      	mov	r0, r3
   12506:	f7fb f9b7 	bl	d878 <mp_obj_print_helper>
            return mp_obj_new_str_from_vstr(type, &vstr);
   1250a:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1250e:	4619      	mov	r1, r3
   12510:	68f8      	ldr	r0, [r7, #12]
   12512:	f002 ff05 	bl	15320 <mp_obj_new_str_from_vstr>
   12516:	4603      	mov	r3, r0
   12518:	e071      	b.n	125fe <mp_obj_str_make_new+0x142>
        }

        default: // 2 or 3 args
            // TODO: validate 2nd/3rd args
            if (MP_OBJ_IS_TYPE(args[0], &mp_type_bytes)) {
   1251a:	683b      	ldr	r3, [r7, #0]
   1251c:	681b      	ldr	r3, [r3, #0]
   1251e:	4618      	mov	r0, r3
   12520:	f7ff fe90 	bl	12244 <MP_OBJ_IS_OBJ>
   12524:	4603      	mov	r3, r0
   12526:	2b00      	cmp	r3, #0
   12528:	d05a      	beq.n	125e0 <mp_obj_str_make_new+0x124>
   1252a:	683b      	ldr	r3, [r7, #0]
   1252c:	681b      	ldr	r3, [r3, #0]
   1252e:	681b      	ldr	r3, [r3, #0]
   12530:	4a35      	ldr	r2, [pc, #212]	; (12608 <mp_obj_str_make_new+0x14c>)
   12532:	4293      	cmp	r3, r2
   12534:	d154      	bne.n	125e0 <mp_obj_str_make_new+0x124>
                GET_STR_DATA_LEN(args[0], str_data, str_len);
   12536:	683b      	ldr	r3, [r7, #0]
   12538:	681b      	ldr	r3, [r3, #0]
   1253a:	4618      	mov	r0, r3
   1253c:	f7ff fe70 	bl	12220 <MP_OBJ_IS_QSTR>
   12540:	4603      	mov	r3, r0
   12542:	2b00      	cmp	r3, #0
   12544:	d00a      	beq.n	1255c <mp_obj_str_make_new+0xa0>
   12546:	683b      	ldr	r3, [r7, #0]
   12548:	681b      	ldr	r3, [r3, #0]
   1254a:	089b      	lsrs	r3, r3, #2
   1254c:	f107 021c 	add.w	r2, r7, #28
   12550:	4611      	mov	r1, r2
   12552:	4618      	mov	r0, r3
   12554:	f7ee fe5c 	bl	1210 <qstr_data>
   12558:	6478      	str	r0, [r7, #68]	; 0x44
   1255a:	e007      	b.n	1256c <mp_obj_str_make_new+0xb0>
   1255c:	683b      	ldr	r3, [r7, #0]
   1255e:	681b      	ldr	r3, [r3, #0]
   12560:	689b      	ldr	r3, [r3, #8]
   12562:	61fb      	str	r3, [r7, #28]
   12564:	683b      	ldr	r3, [r7, #0]
   12566:	681b      	ldr	r3, [r3, #0]
   12568:	68db      	ldr	r3, [r3, #12]
   1256a:	647b      	str	r3, [r7, #68]	; 0x44
                GET_STR_HASH(args[0], str_hash);
   1256c:	683b      	ldr	r3, [r7, #0]
   1256e:	681b      	ldr	r3, [r3, #0]
   12570:	4618      	mov	r0, r3
   12572:	f7ff fe55 	bl	12220 <MP_OBJ_IS_QSTR>
   12576:	4603      	mov	r3, r0
   12578:	2b00      	cmp	r3, #0
   1257a:	d007      	beq.n	1258c <mp_obj_str_make_new+0xd0>
   1257c:	683b      	ldr	r3, [r7, #0]
   1257e:	681b      	ldr	r3, [r3, #0]
   12580:	089b      	lsrs	r3, r3, #2
   12582:	4618      	mov	r0, r3
   12584:	f7ee fe18 	bl	11b8 <qstr_hash>
   12588:	6438      	str	r0, [r7, #64]	; 0x40
   1258a:	e003      	b.n	12594 <mp_obj_str_make_new+0xd8>
   1258c:	683b      	ldr	r3, [r7, #0]
   1258e:	681b      	ldr	r3, [r3, #0]
   12590:	685b      	ldr	r3, [r3, #4]
   12592:	643b      	str	r3, [r7, #64]	; 0x40
                if (str_hash == 0) {
   12594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12596:	2b00      	cmp	r3, #0
   12598:	d105      	bne.n	125a6 <mp_obj_str_make_new+0xea>
                    str_hash = qstr_compute_hash(str_data, str_len);
   1259a:	69fb      	ldr	r3, [r7, #28]
   1259c:	4619      	mov	r1, r3
   1259e:	6c78      	ldr	r0, [r7, #68]	; 0x44
   125a0:	f7ee fc38 	bl	e14 <qstr_compute_hash>
   125a4:	6438      	str	r0, [r7, #64]	; 0x40
                    mp_raise_msg(&mp_type_UnicodeError, NULL);
                }
                #endif

                // Check if a qstr with this data already exists
                qstr q = qstr_find_strn((const char*)str_data, str_len);
   125a6:	69fb      	ldr	r3, [r7, #28]
   125a8:	4619      	mov	r1, r3
   125aa:	6c78      	ldr	r0, [r7, #68]	; 0x44
   125ac:	f7ee fce2 	bl	f74 <qstr_find_strn>
   125b0:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (q != MP_QSTR_NULL) {
   125b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   125b4:	2b00      	cmp	r3, #0
   125b6:	d004      	beq.n	125c2 <mp_obj_str_make_new+0x106>
                    return MP_OBJ_NEW_QSTR(q);
   125b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   125ba:	009b      	lsls	r3, r3, #2
   125bc:	f043 0302 	orr.w	r3, r3, #2
   125c0:	e01d      	b.n	125fe <mp_obj_str_make_new+0x142>
                }

                mp_obj_str_t *o = MP_OBJ_TO_PTR(mp_obj_new_str_copy(type, NULL, str_len));
   125c2:	69fb      	ldr	r3, [r7, #28]
   125c4:	461a      	mov	r2, r3
   125c6:	2100      	movs	r1, #0
   125c8:	68f8      	ldr	r0, [r7, #12]
   125ca:	f002 fe49 	bl	15260 <mp_obj_new_str_copy>
   125ce:	63b8      	str	r0, [r7, #56]	; 0x38
                o->data = str_data;
   125d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   125d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   125d4:	60da      	str	r2, [r3, #12]
                o->hash = str_hash;
   125d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   125d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   125da:	605a      	str	r2, [r3, #4]
                return MP_OBJ_FROM_PTR(o);
   125dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   125de:	e00e      	b.n	125fe <mp_obj_str_make_new+0x142>
            } else {
                mp_buffer_info_t bufinfo;
                mp_get_buffer_raise(args[0], &bufinfo, MP_BUFFER_READ);
   125e0:	683b      	ldr	r3, [r7, #0]
   125e2:	681b      	ldr	r3, [r3, #0]
   125e4:	f107 0110 	add.w	r1, r7, #16
   125e8:	2201      	movs	r2, #1
   125ea:	4618      	mov	r0, r3
   125ec:	f7fb fd24 	bl	e038 <mp_get_buffer_raise>
                #if MICROPY_PY_BUILTINS_STR_UNICODE_CHECK
                if (!utf8_check(bufinfo.buf, bufinfo.len)) {
                    mp_raise_msg(&mp_type_UnicodeError, NULL);
                }
                #endif
                return mp_obj_new_str(bufinfo.buf, bufinfo.len);
   125f0:	693b      	ldr	r3, [r7, #16]
   125f2:	697a      	ldr	r2, [r7, #20]
   125f4:	4611      	mov	r1, r2
   125f6:	4618      	mov	r0, r3
   125f8:	f002 fef4 	bl	153e4 <mp_obj_new_str>
   125fc:	4603      	mov	r3, r0
            }
    }
}
   125fe:	4618      	mov	r0, r3
   12600:	3748      	adds	r7, #72	; 0x48
   12602:	46bd      	mov	sp, r7
   12604:	bd80      	pop	{r7, pc}
   12606:	bf00      	nop
   12608:	00021c20 	.word	0x00021c20

0001260c <bytes_make_new>:

STATIC mp_obj_t bytes_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1260c:	b580      	push	{r7, lr}
   1260e:	b09e      	sub	sp, #120	; 0x78
   12610:	af00      	add	r7, sp, #0
   12612:	60f8      	str	r0, [r7, #12]
   12614:	60b9      	str	r1, [r7, #8]
   12616:	607a      	str	r2, [r7, #4]
   12618:	603b      	str	r3, [r7, #0]
    }
    #else
    (void)n_kw;
    #endif

    if (n_args == 0) {
   1261a:	68bb      	ldr	r3, [r7, #8]
   1261c:	2b00      	cmp	r3, #0
   1261e:	d101      	bne.n	12624 <bytes_make_new+0x18>
        return mp_const_empty_bytes;
   12620:	4b7a      	ldr	r3, [pc, #488]	; (1280c <bytes_make_new+0x200>)
   12622:	e0ee      	b.n	12802 <bytes_make_new+0x1f6>
    }

    if (MP_OBJ_IS_STR(args[0])) {
   12624:	683b      	ldr	r3, [r7, #0]
   12626:	681b      	ldr	r3, [r3, #0]
   12628:	4618      	mov	r0, r3
   1262a:	f7ff fdf9 	bl	12220 <MP_OBJ_IS_QSTR>
   1262e:	4603      	mov	r3, r0
   12630:	2b00      	cmp	r3, #0
   12632:	d10d      	bne.n	12650 <bytes_make_new+0x44>
   12634:	683b      	ldr	r3, [r7, #0]
   12636:	681b      	ldr	r3, [r3, #0]
   12638:	4618      	mov	r0, r3
   1263a:	f7ff fe03 	bl	12244 <MP_OBJ_IS_OBJ>
   1263e:	4603      	mov	r3, r0
   12640:	2b00      	cmp	r3, #0
   12642:	d054      	beq.n	126ee <bytes_make_new+0xe2>
   12644:	683b      	ldr	r3, [r7, #0]
   12646:	681b      	ldr	r3, [r3, #0]
   12648:	681b      	ldr	r3, [r3, #0]
   1264a:	4a71      	ldr	r2, [pc, #452]	; (12810 <bytes_make_new+0x204>)
   1264c:	4293      	cmp	r3, r2
   1264e:	d14e      	bne.n	126ee <bytes_make_new+0xe2>
        if (n_args < 2 || n_args > 3) {
   12650:	68bb      	ldr	r3, [r7, #8]
   12652:	2b01      	cmp	r3, #1
   12654:	f240 80d2 	bls.w	127fc <bytes_make_new+0x1f0>
   12658:	68bb      	ldr	r3, [r7, #8]
   1265a:	2b03      	cmp	r3, #3
   1265c:	f200 80ce 	bhi.w	127fc <bytes_make_new+0x1f0>
            goto wrong_args;
        }
        GET_STR_DATA_LEN(args[0], str_data, str_len);
   12660:	683b      	ldr	r3, [r7, #0]
   12662:	681b      	ldr	r3, [r3, #0]
   12664:	4618      	mov	r0, r3
   12666:	f7ff fddb 	bl	12220 <MP_OBJ_IS_QSTR>
   1266a:	4603      	mov	r3, r0
   1266c:	2b00      	cmp	r3, #0
   1266e:	d00a      	beq.n	12686 <bytes_make_new+0x7a>
   12670:	683b      	ldr	r3, [r7, #0]
   12672:	681b      	ldr	r3, [r3, #0]
   12674:	089b      	lsrs	r3, r3, #2
   12676:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1267a:	4611      	mov	r1, r2
   1267c:	4618      	mov	r0, r3
   1267e:	f7ee fdc7 	bl	1210 <qstr_data>
   12682:	6778      	str	r0, [r7, #116]	; 0x74
   12684:	e007      	b.n	12696 <bytes_make_new+0x8a>
   12686:	683b      	ldr	r3, [r7, #0]
   12688:	681b      	ldr	r3, [r3, #0]
   1268a:	689b      	ldr	r3, [r3, #8]
   1268c:	627b      	str	r3, [r7, #36]	; 0x24
   1268e:	683b      	ldr	r3, [r7, #0]
   12690:	681b      	ldr	r3, [r3, #0]
   12692:	68db      	ldr	r3, [r3, #12]
   12694:	677b      	str	r3, [r7, #116]	; 0x74
        GET_STR_HASH(args[0], str_hash);
   12696:	683b      	ldr	r3, [r7, #0]
   12698:	681b      	ldr	r3, [r3, #0]
   1269a:	4618      	mov	r0, r3
   1269c:	f7ff fdc0 	bl	12220 <MP_OBJ_IS_QSTR>
   126a0:	4603      	mov	r3, r0
   126a2:	2b00      	cmp	r3, #0
   126a4:	d007      	beq.n	126b6 <bytes_make_new+0xaa>
   126a6:	683b      	ldr	r3, [r7, #0]
   126a8:	681b      	ldr	r3, [r3, #0]
   126aa:	089b      	lsrs	r3, r3, #2
   126ac:	4618      	mov	r0, r3
   126ae:	f7ee fd83 	bl	11b8 <qstr_hash>
   126b2:	6738      	str	r0, [r7, #112]	; 0x70
   126b4:	e003      	b.n	126be <bytes_make_new+0xb2>
   126b6:	683b      	ldr	r3, [r7, #0]
   126b8:	681b      	ldr	r3, [r3, #0]
   126ba:	685b      	ldr	r3, [r3, #4]
   126bc:	673b      	str	r3, [r7, #112]	; 0x70
        if (str_hash == 0) {
   126be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   126c0:	2b00      	cmp	r3, #0
   126c2:	d105      	bne.n	126d0 <bytes_make_new+0xc4>
            str_hash = qstr_compute_hash(str_data, str_len);
   126c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   126c6:	4619      	mov	r1, r3
   126c8:	6f78      	ldr	r0, [r7, #116]	; 0x74
   126ca:	f7ee fba3 	bl	e14 <qstr_compute_hash>
   126ce:	6738      	str	r0, [r7, #112]	; 0x70
        }
        mp_obj_str_t *o = MP_OBJ_TO_PTR(mp_obj_new_str_copy(&mp_type_bytes, NULL, str_len));
   126d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   126d2:	461a      	mov	r2, r3
   126d4:	2100      	movs	r1, #0
   126d6:	484f      	ldr	r0, [pc, #316]	; (12814 <bytes_make_new+0x208>)
   126d8:	f002 fdc2 	bl	15260 <mp_obj_new_str_copy>
   126dc:	6578      	str	r0, [r7, #84]	; 0x54
        o->data = str_data;
   126de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   126e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   126e2:	60da      	str	r2, [r3, #12]
        o->hash = str_hash;
   126e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   126e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   126e8:	605a      	str	r2, [r3, #4]
        return MP_OBJ_FROM_PTR(o);
   126ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   126ec:	e089      	b.n	12802 <bytes_make_new+0x1f6>
    }

    if (n_args > 1) {
   126ee:	68bb      	ldr	r3, [r7, #8]
   126f0:	2b01      	cmp	r3, #1
   126f2:	f200 8082 	bhi.w	127fa <bytes_make_new+0x1ee>
        goto wrong_args;
    }

    if (MP_OBJ_IS_SMALL_INT(args[0])) {
   126f6:	683b      	ldr	r3, [r7, #0]
   126f8:	681b      	ldr	r3, [r3, #0]
   126fa:	4618      	mov	r0, r3
   126fc:	f7ff fd7e 	bl	121fc <MP_OBJ_IS_SMALL_INT>
   12700:	4603      	mov	r3, r0
   12702:	2b00      	cmp	r3, #0
   12704:	d01e      	beq.n	12744 <bytes_make_new+0x138>
        mp_int_t len = MP_OBJ_SMALL_INT_VALUE(args[0]);
   12706:	683b      	ldr	r3, [r7, #0]
   12708:	681b      	ldr	r3, [r3, #0]
   1270a:	105b      	asrs	r3, r3, #1
   1270c:	66fb      	str	r3, [r7, #108]	; 0x6c
        if (len < 0) {
   1270e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   12710:	2b00      	cmp	r3, #0
   12712:	da02      	bge.n	1271a <bytes_make_new+0x10e>
            mp_raise_ValueError(NULL);
   12714:	2000      	movs	r0, #0
   12716:	f7fa fc59 	bl	cfcc <mp_raise_ValueError>
        }
        vstr_t vstr;
        vstr_init_len(&vstr, len);
   1271a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1271c:	f107 0314 	add.w	r3, r7, #20
   12720:	4611      	mov	r1, r2
   12722:	4618      	mov	r0, r3
   12724:	f7ee fe0e 	bl	1344 <vstr_init_len>
        memset(vstr.buf, 0, len);
   12728:	69fb      	ldr	r3, [r7, #28]
   1272a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1272c:	2100      	movs	r1, #0
   1272e:	4618      	mov	r0, r3
   12730:	f009 fc64 	bl	1bffc <memset>
        return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   12734:	f107 0314 	add.w	r3, r7, #20
   12738:	4619      	mov	r1, r3
   1273a:	4836      	ldr	r0, [pc, #216]	; (12814 <bytes_make_new+0x208>)
   1273c:	f002 fdf0 	bl	15320 <mp_obj_new_str_from_vstr>
   12740:	4603      	mov	r3, r0
   12742:	e05e      	b.n	12802 <bytes_make_new+0x1f6>
    }

    // check if argument has the buffer protocol
    mp_buffer_info_t bufinfo;
    if (mp_get_buffer(args[0], &bufinfo, MP_BUFFER_READ)) {
   12744:	683b      	ldr	r3, [r7, #0]
   12746:	681b      	ldr	r3, [r3, #0]
   12748:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1274c:	2201      	movs	r2, #1
   1274e:	4618      	mov	r0, r3
   12750:	f7fb fc50 	bl	dff4 <mp_get_buffer>
   12754:	4603      	mov	r3, r0
   12756:	2b00      	cmp	r3, #0
   12758:	d007      	beq.n	1276a <bytes_make_new+0x15e>
        return mp_obj_new_bytes(bufinfo.buf, bufinfo.len);
   1275a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1275c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1275e:	4611      	mov	r1, r2
   12760:	4618      	mov	r0, r3
   12762:	f002 fe97 	bl	15494 <mp_obj_new_bytes>
   12766:	4603      	mov	r3, r0
   12768:	e04b      	b.n	12802 <bytes_make_new+0x1f6>
    }

    vstr_t vstr;
    // Try to create array of exact len if initializer len is known
    mp_obj_t len_in = mp_obj_len_maybe(args[0]);
   1276a:	683b      	ldr	r3, [r7, #0]
   1276c:	681b      	ldr	r3, [r3, #0]
   1276e:	4618      	mov	r0, r3
   12770:	f7fb fba6 	bl	dec0 <mp_obj_len_maybe>
   12774:	66b8      	str	r0, [r7, #104]	; 0x68
    if (len_in == MP_OBJ_NULL) {
   12776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12778:	2b00      	cmp	r3, #0
   1277a:	d106      	bne.n	1278a <bytes_make_new+0x17e>
        vstr_init(&vstr, 16);
   1277c:	f107 0338 	add.w	r3, r7, #56	; 0x38
   12780:	2110      	movs	r1, #16
   12782:	4618      	mov	r0, r3
   12784:	f7ee fdbc 	bl	1300 <vstr_init>
   12788:	e009      	b.n	1279e <bytes_make_new+0x192>
    } else {
        mp_int_t len = MP_OBJ_SMALL_INT_VALUE(len_in);
   1278a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1278c:	105b      	asrs	r3, r3, #1
   1278e:	667b      	str	r3, [r7, #100]	; 0x64
        vstr_init(&vstr, len);
   12790:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   12792:	f107 0338 	add.w	r3, r7, #56	; 0x38
   12796:	4611      	mov	r1, r2
   12798:	4618      	mov	r0, r3
   1279a:	f7ee fdb1 	bl	1300 <vstr_init>
    }

    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(args[0], &iter_buf);
   1279e:	683b      	ldr	r3, [r7, #0]
   127a0:	681b      	ldr	r3, [r3, #0]
   127a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
   127a6:	4611      	mov	r1, r2
   127a8:	4618      	mov	r0, r3
   127aa:	f7fa f8c9 	bl	c940 <mp_getiter>
   127ae:	6638      	str	r0, [r7, #96]	; 0x60
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   127b0:	e014      	b.n	127dc <bytes_make_new+0x1d0>
        mp_int_t val = mp_obj_get_int(item);
   127b2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   127b4:	f7fb fa0c 	bl	dbd0 <mp_obj_get_int>
   127b8:	65b8      	str	r0, [r7, #88]	; 0x58
        #if MICROPY_FULL_CHECKS
        if (val < 0 || val > 255) {
   127ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   127bc:	2b00      	cmp	r3, #0
   127be:	db02      	blt.n	127c6 <bytes_make_new+0x1ba>
   127c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   127c2:	2bff      	cmp	r3, #255	; 0xff
   127c4:	dd02      	ble.n	127cc <bytes_make_new+0x1c0>
            mp_raise_ValueError("bytes value out of range");
   127c6:	4814      	ldr	r0, [pc, #80]	; (12818 <bytes_make_new+0x20c>)
   127c8:	f7fa fc00 	bl	cfcc <mp_raise_ValueError>
        }
        #endif
        vstr_add_byte(&vstr, val);
   127cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   127ce:	b2da      	uxtb	r2, r3
   127d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
   127d4:	4611      	mov	r1, r2
   127d6:	4618      	mov	r0, r3
   127d8:	f7ee fee8 	bl	15ac <vstr_add_byte>
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   127dc:	6e38      	ldr	r0, [r7, #96]	; 0x60
   127de:	f7fa f931 	bl	ca44 <mp_iternext>
   127e2:	65f8      	str	r0, [r7, #92]	; 0x5c
   127e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   127e6:	2b04      	cmp	r3, #4
   127e8:	d1e3      	bne.n	127b2 <bytes_make_new+0x1a6>
    }

    return mp_obj_new_str_from_vstr(&mp_type_bytes, &vstr);
   127ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
   127ee:	4619      	mov	r1, r3
   127f0:	4808      	ldr	r0, [pc, #32]	; (12814 <bytes_make_new+0x208>)
   127f2:	f002 fd95 	bl	15320 <mp_obj_new_str_from_vstr>
   127f6:	4603      	mov	r3, r0
   127f8:	e003      	b.n	12802 <bytes_make_new+0x1f6>
        goto wrong_args;
   127fa:	bf00      	nop

wrong_args:
    mp_raise_TypeError("wrong number of arguments");
   127fc:	4807      	ldr	r0, [pc, #28]	; (1281c <bytes_make_new+0x210>)
   127fe:	f7fa fbef 	bl	cfe0 <mp_raise_TypeError>
}
   12802:	4618      	mov	r0, r3
   12804:	3778      	adds	r7, #120	; 0x78
   12806:	46bd      	mov	sp, r7
   12808:	bd80      	pop	{r7, pc}
   1280a:	bf00      	nop
   1280c:	00021c60 	.word	0x00021c60
   12810:	00021be4 	.word	0x00021be4
   12814:	00021c20 	.word	0x00021c20
   12818:	0002164c 	.word	0x0002164c
   1281c:	00021668 	.word	0x00021668

00012820 <find_subbytes>:

// like strstr but with specified length and allows \0 bytes
// TODO replace with something more efficient/standard
const byte *find_subbytes(const byte *haystack, size_t hlen, const byte *needle, size_t nlen, int direction) {
   12820:	b580      	push	{r7, lr}
   12822:	b086      	sub	sp, #24
   12824:	af00      	add	r7, sp, #0
   12826:	60f8      	str	r0, [r7, #12]
   12828:	60b9      	str	r1, [r7, #8]
   1282a:	607a      	str	r2, [r7, #4]
   1282c:	603b      	str	r3, [r7, #0]
    if (hlen >= nlen) {
   1282e:	68ba      	ldr	r2, [r7, #8]
   12830:	683b      	ldr	r3, [r7, #0]
   12832:	429a      	cmp	r2, r3
   12834:	d328      	bcc.n	12888 <find_subbytes+0x68>
        size_t str_index, str_index_end;
        if (direction > 0) {
   12836:	6a3b      	ldr	r3, [r7, #32]
   12838:	2b00      	cmp	r3, #0
   1283a:	dd06      	ble.n	1284a <find_subbytes+0x2a>
            str_index = 0;
   1283c:	2300      	movs	r3, #0
   1283e:	617b      	str	r3, [r7, #20]
            str_index_end = hlen - nlen;
   12840:	68ba      	ldr	r2, [r7, #8]
   12842:	683b      	ldr	r3, [r7, #0]
   12844:	1ad3      	subs	r3, r2, r3
   12846:	613b      	str	r3, [r7, #16]
   12848:	e005      	b.n	12856 <find_subbytes+0x36>
        } else {
            str_index = hlen - nlen;
   1284a:	68ba      	ldr	r2, [r7, #8]
   1284c:	683b      	ldr	r3, [r7, #0]
   1284e:	1ad3      	subs	r3, r2, r3
   12850:	617b      	str	r3, [r7, #20]
            str_index_end = 0;
   12852:	2300      	movs	r3, #0
   12854:	613b      	str	r3, [r7, #16]
        }
        for (;;) {
            if (memcmp(&haystack[str_index], needle, nlen) == 0) {
   12856:	68fa      	ldr	r2, [r7, #12]
   12858:	697b      	ldr	r3, [r7, #20]
   1285a:	4413      	add	r3, r2
   1285c:	683a      	ldr	r2, [r7, #0]
   1285e:	6879      	ldr	r1, [r7, #4]
   12860:	4618      	mov	r0, r3
   12862:	f009 fc17 	bl	1c094 <memcmp>
   12866:	4603      	mov	r3, r0
   12868:	2b00      	cmp	r3, #0
   1286a:	d103      	bne.n	12874 <find_subbytes+0x54>
                //found
                return haystack + str_index;
   1286c:	68fa      	ldr	r2, [r7, #12]
   1286e:	697b      	ldr	r3, [r7, #20]
   12870:	4413      	add	r3, r2
   12872:	e00a      	b.n	1288a <find_subbytes+0x6a>
            }
            if (str_index == str_index_end) {
   12874:	697a      	ldr	r2, [r7, #20]
   12876:	693b      	ldr	r3, [r7, #16]
   12878:	429a      	cmp	r2, r3
   1287a:	d004      	beq.n	12886 <find_subbytes+0x66>
                //not found
                break;
            }
            str_index += direction;
   1287c:	6a3b      	ldr	r3, [r7, #32]
   1287e:	697a      	ldr	r2, [r7, #20]
   12880:	4413      	add	r3, r2
   12882:	617b      	str	r3, [r7, #20]
        }
   12884:	e7e7      	b.n	12856 <find_subbytes+0x36>
                break;
   12886:	bf00      	nop
    }
    return NULL;
   12888:	2300      	movs	r3, #0
}
   1288a:	4618      	mov	r0, r3
   1288c:	3718      	adds	r7, #24
   1288e:	46bd      	mov	sp, r7
   12890:	bd80      	pop	{r7, pc}
   12892:	bf00      	nop

00012894 <mp_obj_str_binary_op>:

// Note: this function is used to check if an object is a str or bytes, which
// works because both those types use it as their binary_op method.  Revisit
// MP_OBJ_IS_STR_OR_BYTES if this fact changes.
mp_obj_t mp_obj_str_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   12894:	b580      	push	{r7, lr}
   12896:	b09c      	sub	sp, #112	; 0x70
   12898:	af02      	add	r7, sp, #8
   1289a:	60f8      	str	r0, [r7, #12]
   1289c:	60b9      	str	r1, [r7, #8]
   1289e:	607a      	str	r2, [r7, #4]
    // check for modulo
    if (op == MP_BINARY_OP_MODULO) {
   128a0:	68fb      	ldr	r3, [r7, #12]
   128a2:	2b1f      	cmp	r3, #31
   128a4:	d130      	bne.n	12908 <mp_obj_str_binary_op+0x74>
        mp_obj_t *args = &rhs_in;
   128a6:	1d3b      	adds	r3, r7, #4
   128a8:	64bb      	str	r3, [r7, #72]	; 0x48
        size_t n_args = 1;
   128aa:	2301      	movs	r3, #1
   128ac:	647b      	str	r3, [r7, #68]	; 0x44
        mp_obj_t dict = MP_OBJ_NULL;
   128ae:	2300      	movs	r3, #0
   128b0:	667b      	str	r3, [r7, #100]	; 0x64
        if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_tuple)) {
   128b2:	687b      	ldr	r3, [r7, #4]
   128b4:	4618      	mov	r0, r3
   128b6:	f7ff fcc5 	bl	12244 <MP_OBJ_IS_OBJ>
   128ba:	4603      	mov	r3, r0
   128bc:	2b00      	cmp	r3, #0
   128be:	d00d      	beq.n	128dc <mp_obj_str_binary_op+0x48>
   128c0:	687b      	ldr	r3, [r7, #4]
   128c2:	681b      	ldr	r3, [r3, #0]
   128c4:	4aac      	ldr	r2, [pc, #688]	; (12b78 <mp_obj_str_binary_op+0x2e4>)
   128c6:	4293      	cmp	r3, r2
   128c8:	d108      	bne.n	128dc <mp_obj_str_binary_op+0x48>
            // TODO: Support tuple subclasses?
            mp_obj_tuple_get(rhs_in, &n_args, &args);
   128ca:	687b      	ldr	r3, [r7, #4]
   128cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
   128d0:	f107 0144 	add.w	r1, r7, #68	; 0x44
   128d4:	4618      	mov	r0, r3
   128d6:	f003 fac3 	bl	15e60 <mp_obj_tuple_get>
   128da:	e00d      	b.n	128f8 <mp_obj_str_binary_op+0x64>
        } else if (MP_OBJ_IS_TYPE(rhs_in, &mp_type_dict)) {
   128dc:	687b      	ldr	r3, [r7, #4]
   128de:	4618      	mov	r0, r3
   128e0:	f7ff fcb0 	bl	12244 <MP_OBJ_IS_OBJ>
   128e4:	4603      	mov	r3, r0
   128e6:	2b00      	cmp	r3, #0
   128e8:	d006      	beq.n	128f8 <mp_obj_str_binary_op+0x64>
   128ea:	687b      	ldr	r3, [r7, #4]
   128ec:	681b      	ldr	r3, [r3, #0]
   128ee:	4aa3      	ldr	r2, [pc, #652]	; (12b7c <mp_obj_str_binary_op+0x2e8>)
   128f0:	4293      	cmp	r3, r2
   128f2:	d101      	bne.n	128f8 <mp_obj_str_binary_op+0x64>
            dict = rhs_in;
   128f4:	687b      	ldr	r3, [r7, #4]
   128f6:	667b      	str	r3, [r7, #100]	; 0x64
        }
        return str_modulo_format(lhs_in, n_args, args, dict);
   128f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
   128fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
   128fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   128fe:	68b8      	ldr	r0, [r7, #8]
   12900:	f001 fdb0 	bl	14464 <str_modulo_format>
   12904:	4603      	mov	r3, r0
   12906:	e132      	b.n	12b6e <mp_obj_str_binary_op+0x2da>
    }

    // from now on we need lhs type and data, so extract them
    mp_obj_type_t *lhs_type = mp_obj_get_type(lhs_in);
   12908:	68b8      	ldr	r0, [r7, #8]
   1290a:	f7fa ff83 	bl	d814 <mp_obj_get_type>
   1290e:	6538      	str	r0, [r7, #80]	; 0x50
    GET_STR_DATA_LEN(lhs_in, lhs_data, lhs_len);
   12910:	68b8      	ldr	r0, [r7, #8]
   12912:	f7ff fc85 	bl	12220 <MP_OBJ_IS_QSTR>
   12916:	4603      	mov	r3, r0
   12918:	2b00      	cmp	r3, #0
   1291a:	d009      	beq.n	12930 <mp_obj_str_binary_op+0x9c>
   1291c:	68bb      	ldr	r3, [r7, #8]
   1291e:	089b      	lsrs	r3, r3, #2
   12920:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   12924:	4611      	mov	r1, r2
   12926:	4618      	mov	r0, r3
   12928:	f7ee fc72 	bl	1210 <qstr_data>
   1292c:	6638      	str	r0, [r7, #96]	; 0x60
   1292e:	e005      	b.n	1293c <mp_obj_str_binary_op+0xa8>
   12930:	68bb      	ldr	r3, [r7, #8]
   12932:	689b      	ldr	r3, [r3, #8]
   12934:	64fb      	str	r3, [r7, #76]	; 0x4c
   12936:	68bb      	ldr	r3, [r7, #8]
   12938:	68db      	ldr	r3, [r3, #12]
   1293a:	663b      	str	r3, [r7, #96]	; 0x60

    // check for multiply
    if (op == MP_BINARY_OP_MULTIPLY) {
   1293c:	68fb      	ldr	r3, [r7, #12]
   1293e:	2b1c      	cmp	r3, #28
   12940:	d135      	bne.n	129ae <mp_obj_str_binary_op+0x11a>
        mp_int_t n;
        if (!mp_obj_get_int_maybe(rhs_in, &n)) {
   12942:	687b      	ldr	r3, [r7, #4]
   12944:	f107 0240 	add.w	r2, r7, #64	; 0x40
   12948:	4611      	mov	r1, r2
   1294a:	4618      	mov	r0, r3
   1294c:	f7fb f99c 	bl	dc88 <mp_obj_get_int_maybe>
   12950:	4603      	mov	r3, r0
   12952:	f083 0301 	eor.w	r3, r3, #1
   12956:	b2db      	uxtb	r3, r3
   12958:	2b00      	cmp	r3, #0
   1295a:	d001      	beq.n	12960 <mp_obj_str_binary_op+0xcc>
            return MP_OBJ_NULL; // op not supported
   1295c:	2300      	movs	r3, #0
   1295e:	e106      	b.n	12b6e <mp_obj_str_binary_op+0x2da>
        }
        if (n <= 0) {
   12960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12962:	2b00      	cmp	r3, #0
   12964:	dc07      	bgt.n	12976 <mp_obj_str_binary_op+0xe2>
            if (lhs_type == &mp_type_str) {
   12966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   12968:	4a85      	ldr	r2, [pc, #532]	; (12b80 <mp_obj_str_binary_op+0x2ec>)
   1296a:	4293      	cmp	r3, r2
   1296c:	d101      	bne.n	12972 <mp_obj_str_binary_op+0xde>
                return MP_OBJ_NEW_QSTR(MP_QSTR_); // empty str
   1296e:	2306      	movs	r3, #6
   12970:	e0fd      	b.n	12b6e <mp_obj_str_binary_op+0x2da>
            } else {
                return mp_const_empty_bytes;
   12972:	4b84      	ldr	r3, [pc, #528]	; (12b84 <mp_obj_str_binary_op+0x2f0>)
   12974:	e0fb      	b.n	12b6e <mp_obj_str_binary_op+0x2da>
            }
        }
        vstr_t vstr;
        vstr_init_len(&vstr, lhs_len * n);
   12976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12978:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1297a:	fb02 f203 	mul.w	r2, r2, r3
   1297e:	f107 0330 	add.w	r3, r7, #48	; 0x30
   12982:	4611      	mov	r1, r2
   12984:	4618      	mov	r0, r3
   12986:	f7ee fcdd 	bl	1344 <vstr_init_len>
        mp_seq_multiply(lhs_data, sizeof(*lhs_data), lhs_len, n, vstr.buf);
   1298a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1298c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1298e:	4619      	mov	r1, r3
   12990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12992:	9300      	str	r3, [sp, #0]
   12994:	460b      	mov	r3, r1
   12996:	2101      	movs	r1, #1
   12998:	6e38      	ldr	r0, [r7, #96]	; 0x60
   1299a:	f004 fee1 	bl	17760 <mp_seq_multiply>
        return mp_obj_new_str_from_vstr(lhs_type, &vstr);
   1299e:	f107 0330 	add.w	r3, r7, #48	; 0x30
   129a2:	4619      	mov	r1, r3
   129a4:	6d38      	ldr	r0, [r7, #80]	; 0x50
   129a6:	f002 fcbb 	bl	15320 <mp_obj_new_str_from_vstr>
   129aa:	4603      	mov	r3, r0
   129ac:	e0df      	b.n	12b6e <mp_obj_str_binary_op+0x2da>
    // easy to "fix" this with a bit of extra logic below, but it costs code
    // size and execution time so we don't.

    const byte *rhs_data;
    size_t rhs_len;
    if (lhs_type == mp_obj_get_type(rhs_in)) {
   129ae:	687b      	ldr	r3, [r7, #4]
   129b0:	4618      	mov	r0, r3
   129b2:	f7fa ff2f 	bl	d814 <mp_obj_get_type>
   129b6:	4602      	mov	r2, r0
   129b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   129ba:	429a      	cmp	r2, r3
   129bc:	d11b      	bne.n	129f6 <mp_obj_str_binary_op+0x162>
        GET_STR_DATA_LEN(rhs_in, rhs_data_, rhs_len_);
   129be:	687b      	ldr	r3, [r7, #4]
   129c0:	4618      	mov	r0, r3
   129c2:	f7ff fc2d 	bl	12220 <MP_OBJ_IS_QSTR>
   129c6:	4603      	mov	r3, r0
   129c8:	2b00      	cmp	r3, #0
   129ca:	d009      	beq.n	129e0 <mp_obj_str_binary_op+0x14c>
   129cc:	687b      	ldr	r3, [r7, #4]
   129ce:	089b      	lsrs	r3, r3, #2
   129d0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   129d4:	4611      	mov	r1, r2
   129d6:	4618      	mov	r0, r3
   129d8:	f7ee fc1a 	bl	1210 <qstr_data>
   129dc:	6578      	str	r0, [r7, #84]	; 0x54
   129de:	e005      	b.n	129ec <mp_obj_str_binary_op+0x158>
   129e0:	687b      	ldr	r3, [r7, #4]
   129e2:	689b      	ldr	r3, [r3, #8]
   129e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   129e6:	687b      	ldr	r3, [r7, #4]
   129e8:	68db      	ldr	r3, [r3, #12]
   129ea:	657b      	str	r3, [r7, #84]	; 0x54
        rhs_data = rhs_data_;
   129ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   129ee:	65fb      	str	r3, [r7, #92]	; 0x5c
        rhs_len = rhs_len_;
   129f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   129f2:	65bb      	str	r3, [r7, #88]	; 0x58
   129f4:	e01b      	b.n	12a2e <mp_obj_str_binary_op+0x19a>
    } else if (lhs_type == &mp_type_bytes) {
   129f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   129f8:	4a63      	ldr	r2, [pc, #396]	; (12b88 <mp_obj_str_binary_op+0x2f4>)
   129fa:	4293      	cmp	r3, r2
   129fc:	d113      	bne.n	12a26 <mp_obj_str_binary_op+0x192>
        mp_buffer_info_t bufinfo;
        if (!mp_get_buffer(rhs_in, &bufinfo, MP_BUFFER_READ)) {
   129fe:	687b      	ldr	r3, [r7, #4]
   12a00:	f107 0120 	add.w	r1, r7, #32
   12a04:	2201      	movs	r2, #1
   12a06:	4618      	mov	r0, r3
   12a08:	f7fb faf4 	bl	dff4 <mp_get_buffer>
   12a0c:	4603      	mov	r3, r0
   12a0e:	f083 0301 	eor.w	r3, r3, #1
   12a12:	b2db      	uxtb	r3, r3
   12a14:	2b00      	cmp	r3, #0
   12a16:	d001      	beq.n	12a1c <mp_obj_str_binary_op+0x188>
            return MP_OBJ_NULL; // op not supported
   12a18:	2300      	movs	r3, #0
   12a1a:	e0a8      	b.n	12b6e <mp_obj_str_binary_op+0x2da>
        }
        rhs_data = bufinfo.buf;
   12a1c:	6a3b      	ldr	r3, [r7, #32]
   12a1e:	65fb      	str	r3, [r7, #92]	; 0x5c
        rhs_len = bufinfo.len;
   12a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12a22:	65bb      	str	r3, [r7, #88]	; 0x58
   12a24:	e003      	b.n	12a2e <mp_obj_str_binary_op+0x19a>
    } else {
        // LHS is str and RHS has an incompatible type
        // (except if operation is EQUAL, but that's handled by mp_obj_equal)
        bad_implicit_conversion(rhs_in);
   12a26:	687b      	ldr	r3, [r7, #4]
   12a28:	4618      	mov	r0, r3
   12a2a:	f002 fdcd 	bl	155c8 <bad_implicit_conversion>
    }

    switch (op) {
   12a2e:	68fb      	ldr	r3, [r7, #12]
   12a30:	2b22      	cmp	r3, #34	; 0x22
   12a32:	f200 809b 	bhi.w	12b6c <mp_obj_str_binary_op+0x2d8>
   12a36:	a201      	add	r2, pc, #4	; (adr r2, 12a3c <mp_obj_str_binary_op+0x1a8>)
   12a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12a3c:	00012b51 	.word	0x00012b51
   12a40:	00012b51 	.word	0x00012b51
   12a44:	00012b51 	.word	0x00012b51
   12a48:	00012b51 	.word	0x00012b51
   12a4c:	00012b51 	.word	0x00012b51
   12a50:	00012b6d 	.word	0x00012b6d
   12a54:	00012b6d 	.word	0x00012b6d
   12a58:	00012b6d 	.word	0x00012b6d
   12a5c:	00012b6d 	.word	0x00012b6d
   12a60:	00012b6d 	.word	0x00012b6d
   12a64:	00012b6d 	.word	0x00012b6d
   12a68:	00012b6d 	.word	0x00012b6d
   12a6c:	00012b6d 	.word	0x00012b6d
   12a70:	00012b6d 	.word	0x00012b6d
   12a74:	00012ac9 	.word	0x00012ac9
   12a78:	00012b6d 	.word	0x00012b6d
   12a7c:	00012b6d 	.word	0x00012b6d
   12a80:	00012b6d 	.word	0x00012b6d
   12a84:	00012b6d 	.word	0x00012b6d
   12a88:	00012b6d 	.word	0x00012b6d
   12a8c:	00012b6d 	.word	0x00012b6d
   12a90:	00012b6d 	.word	0x00012b6d
   12a94:	00012b6d 	.word	0x00012b6d
   12a98:	00012b6d 	.word	0x00012b6d
   12a9c:	00012b6d 	.word	0x00012b6d
   12aa0:	00012b6d 	.word	0x00012b6d
   12aa4:	00012ac9 	.word	0x00012ac9
   12aa8:	00012b6d 	.word	0x00012b6d
   12aac:	00012b6d 	.word	0x00012b6d
   12ab0:	00012b6d 	.word	0x00012b6d
   12ab4:	00012b6d 	.word	0x00012b6d
   12ab8:	00012b6d 	.word	0x00012b6d
   12abc:	00012b6d 	.word	0x00012b6d
   12ac0:	00012b6d 	.word	0x00012b6d
   12ac4:	00012b2b 	.word	0x00012b2b
        case MP_BINARY_OP_ADD:
        case MP_BINARY_OP_INPLACE_ADD: {
            if (lhs_len == 0 && mp_obj_get_type(rhs_in) == lhs_type) {
   12ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12aca:	2b00      	cmp	r3, #0
   12acc:	d109      	bne.n	12ae2 <mp_obj_str_binary_op+0x24e>
   12ace:	687b      	ldr	r3, [r7, #4]
   12ad0:	4618      	mov	r0, r3
   12ad2:	f7fa fe9f 	bl	d814 <mp_obj_get_type>
   12ad6:	4602      	mov	r2, r0
   12ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   12ada:	429a      	cmp	r2, r3
   12adc:	d101      	bne.n	12ae2 <mp_obj_str_binary_op+0x24e>
                return rhs_in;
   12ade:	687b      	ldr	r3, [r7, #4]
   12ae0:	e045      	b.n	12b6e <mp_obj_str_binary_op+0x2da>
            }
            if (rhs_len == 0) {
   12ae2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12ae4:	2b00      	cmp	r3, #0
   12ae6:	d101      	bne.n	12aec <mp_obj_str_binary_op+0x258>
                return lhs_in;
   12ae8:	68bb      	ldr	r3, [r7, #8]
   12aea:	e040      	b.n	12b6e <mp_obj_str_binary_op+0x2da>
            }

            vstr_t vstr;
            vstr_init_len(&vstr, lhs_len + rhs_len);
   12aec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12aee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12af0:	441a      	add	r2, r3
   12af2:	f107 0310 	add.w	r3, r7, #16
   12af6:	4611      	mov	r1, r2
   12af8:	4618      	mov	r0, r3
   12afa:	f7ee fc23 	bl	1344 <vstr_init_len>
            memcpy(vstr.buf, lhs_data, lhs_len);
   12afe:	69bb      	ldr	r3, [r7, #24]
   12b00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12b02:	6e39      	ldr	r1, [r7, #96]	; 0x60
   12b04:	4618      	mov	r0, r3
   12b06:	f009 f9dd 	bl	1bec4 <memcpy>
            memcpy(vstr.buf + lhs_len, rhs_data, rhs_len);
   12b0a:	69ba      	ldr	r2, [r7, #24]
   12b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12b0e:	4413      	add	r3, r2
   12b10:	6dba      	ldr	r2, [r7, #88]	; 0x58
   12b12:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   12b14:	4618      	mov	r0, r3
   12b16:	f009 f9d5 	bl	1bec4 <memcpy>
            return mp_obj_new_str_from_vstr(lhs_type, &vstr);
   12b1a:	f107 0310 	add.w	r3, r7, #16
   12b1e:	4619      	mov	r1, r3
   12b20:	6d38      	ldr	r0, [r7, #80]	; 0x50
   12b22:	f002 fbfd 	bl	15320 <mp_obj_new_str_from_vstr>
   12b26:	4603      	mov	r3, r0
   12b28:	e021      	b.n	12b6e <mp_obj_str_binary_op+0x2da>
        }

        case MP_BINARY_OP_CONTAINS:
            return mp_obj_new_bool(find_subbytes(lhs_data, lhs_len, rhs_data, rhs_len, 1) != NULL);
   12b2a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   12b2c:	2301      	movs	r3, #1
   12b2e:	9300      	str	r3, [sp, #0]
   12b30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12b32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   12b34:	6e38      	ldr	r0, [r7, #96]	; 0x60
   12b36:	f7ff fe73 	bl	12820 <find_subbytes>
   12b3a:	4603      	mov	r3, r0
   12b3c:	2b00      	cmp	r3, #0
   12b3e:	bf14      	ite	ne
   12b40:	2301      	movne	r3, #1
   12b42:	2300      	moveq	r3, #0
   12b44:	b2db      	uxtb	r3, r3
   12b46:	4618      	mov	r0, r3
   12b48:	f7ff fb8e 	bl	12268 <mp_obj_new_bool>
   12b4c:	4603      	mov	r3, r0
   12b4e:	e00e      	b.n	12b6e <mp_obj_str_binary_op+0x2da>
        case MP_BINARY_OP_EQUAL: // This will be passed only for bytes, str is dealt with in mp_obj_equal()
        case MP_BINARY_OP_LESS:
        case MP_BINARY_OP_LESS_EQUAL:
        case MP_BINARY_OP_MORE:
        case MP_BINARY_OP_MORE_EQUAL:
            return mp_obj_new_bool(mp_seq_cmp_bytes(op, lhs_data, lhs_len, rhs_data, rhs_len));
   12b50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   12b52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12b54:	9300      	str	r3, [sp, #0]
   12b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   12b58:	6e39      	ldr	r1, [r7, #96]	; 0x60
   12b5a:	68f8      	ldr	r0, [r7, #12]
   12b5c:	f004 fe64 	bl	17828 <mp_seq_cmp_bytes>
   12b60:	4603      	mov	r3, r0
   12b62:	4618      	mov	r0, r3
   12b64:	f7ff fb80 	bl	12268 <mp_obj_new_bool>
   12b68:	4603      	mov	r3, r0
   12b6a:	e000      	b.n	12b6e <mp_obj_str_binary_op+0x2da>

        default:
            return MP_OBJ_NULL; // op not supported
   12b6c:	2300      	movs	r3, #0
    }
}
   12b6e:	4618      	mov	r0, r3
   12b70:	3768      	adds	r7, #104	; 0x68
   12b72:	46bd      	mov	sp, r7
   12b74:	bd80      	pop	{r7, pc}
   12b76:	bf00      	nop
   12b78:	00021e68 	.word	0x00021e68
   12b7c:	000200e8 	.word	0x000200e8
   12b80:	00021be4 	.word	0x00021be4
   12b84:	00021c60 	.word	0x00021c60
   12b88:	00021c20 	.word	0x00021c20

00012b8c <str_index_to_ptr>:

#if !MICROPY_PY_BUILTINS_STR_UNICODE
// objstrunicode defines own version
const byte *str_index_to_ptr(const mp_obj_type_t *type, const byte *self_data, size_t self_len,
                             mp_obj_t index, bool is_slice) {
   12b8c:	b580      	push	{r7, lr}
   12b8e:	b086      	sub	sp, #24
   12b90:	af00      	add	r7, sp, #0
   12b92:	60f8      	str	r0, [r7, #12]
   12b94:	60b9      	str	r1, [r7, #8]
   12b96:	607a      	str	r2, [r7, #4]
   12b98:	603b      	str	r3, [r7, #0]
    size_t index_val = mp_get_index(type, self_len, index, is_slice);
   12b9a:	f897 3020 	ldrb.w	r3, [r7, #32]
   12b9e:	683a      	ldr	r2, [r7, #0]
   12ba0:	6879      	ldr	r1, [r7, #4]
   12ba2:	68f8      	ldr	r0, [r7, #12]
   12ba4:	f7fb f900 	bl	dda8 <mp_get_index>
   12ba8:	6178      	str	r0, [r7, #20]
    return self_data + index_val;
   12baa:	68ba      	ldr	r2, [r7, #8]
   12bac:	697b      	ldr	r3, [r7, #20]
   12bae:	4413      	add	r3, r2
}
   12bb0:	4618      	mov	r0, r3
   12bb2:	3718      	adds	r7, #24
   12bb4:	46bd      	mov	sp, r7
   12bb6:	bd80      	pop	{r7, pc}

00012bb8 <bytes_subscr>:
#endif

// This is used for both bytes and 8-bit strings. This is not used for unicode strings.
STATIC mp_obj_t bytes_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   12bb8:	b580      	push	{r7, lr}
   12bba:	b088      	sub	sp, #32
   12bbc:	af00      	add	r7, sp, #0
   12bbe:	60f8      	str	r0, [r7, #12]
   12bc0:	60b9      	str	r1, [r7, #8]
   12bc2:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   12bc4:	68f8      	ldr	r0, [r7, #12]
   12bc6:	f7fa fe25 	bl	d814 <mp_obj_get_type>
   12bca:	61b8      	str	r0, [r7, #24]
    GET_STR_DATA_LEN(self_in, self_data, self_len);
   12bcc:	68f8      	ldr	r0, [r7, #12]
   12bce:	f7ff fb27 	bl	12220 <MP_OBJ_IS_QSTR>
   12bd2:	4603      	mov	r3, r0
   12bd4:	2b00      	cmp	r3, #0
   12bd6:	d009      	beq.n	12bec <bytes_subscr+0x34>
   12bd8:	68fb      	ldr	r3, [r7, #12]
   12bda:	089b      	lsrs	r3, r3, #2
   12bdc:	f107 0210 	add.w	r2, r7, #16
   12be0:	4611      	mov	r1, r2
   12be2:	4618      	mov	r0, r3
   12be4:	f7ee fb14 	bl	1210 <qstr_data>
   12be8:	61f8      	str	r0, [r7, #28]
   12bea:	e005      	b.n	12bf8 <bytes_subscr+0x40>
   12bec:	68fb      	ldr	r3, [r7, #12]
   12bee:	689b      	ldr	r3, [r3, #8]
   12bf0:	613b      	str	r3, [r7, #16]
   12bf2:	68fb      	ldr	r3, [r7, #12]
   12bf4:	68db      	ldr	r3, [r3, #12]
   12bf6:	61fb      	str	r3, [r7, #28]
    if (value == MP_OBJ_SENTINEL) {
   12bf8:	687b      	ldr	r3, [r7, #4]
   12bfa:	2b08      	cmp	r3, #8
   12bfc:	d11b      	bne.n	12c36 <bytes_subscr+0x7e>
                mp_raise_NotImplementedError("only slices with step=1 (aka None) are supported");
            }
            return mp_obj_new_str_of_type(type, self_data + slice.start, slice.stop - slice.start);
        }
#endif
        size_t index_val = mp_get_index(type, self_len, index, false);
   12bfe:	6939      	ldr	r1, [r7, #16]
   12c00:	2300      	movs	r3, #0
   12c02:	68ba      	ldr	r2, [r7, #8]
   12c04:	69b8      	ldr	r0, [r7, #24]
   12c06:	f7fb f8cf 	bl	dda8 <mp_get_index>
   12c0a:	6178      	str	r0, [r7, #20]
        // If we have unicode enabled the type will always be bytes, so take the short cut.
        if (MICROPY_PY_BUILTINS_STR_UNICODE || type == &mp_type_bytes) {
   12c0c:	69bb      	ldr	r3, [r7, #24]
   12c0e:	4a0c      	ldr	r2, [pc, #48]	; (12c40 <bytes_subscr+0x88>)
   12c10:	4293      	cmp	r3, r2
   12c12:	d107      	bne.n	12c24 <bytes_subscr+0x6c>
            return MP_OBJ_NEW_SMALL_INT(self_data[index_val]);
   12c14:	69fa      	ldr	r2, [r7, #28]
   12c16:	697b      	ldr	r3, [r7, #20]
   12c18:	4413      	add	r3, r2
   12c1a:	781b      	ldrb	r3, [r3, #0]
   12c1c:	005b      	lsls	r3, r3, #1
   12c1e:	f043 0301 	orr.w	r3, r3, #1
   12c22:	e009      	b.n	12c38 <bytes_subscr+0x80>
        } else {
            return mp_obj_new_str_via_qstr((char*)&self_data[index_val], 1);
   12c24:	69fa      	ldr	r2, [r7, #28]
   12c26:	697b      	ldr	r3, [r7, #20]
   12c28:	4413      	add	r3, r2
   12c2a:	2101      	movs	r1, #1
   12c2c:	4618      	mov	r0, r3
   12c2e:	f002 fb65 	bl	152fc <mp_obj_new_str_via_qstr>
   12c32:	4603      	mov	r3, r0
   12c34:	e000      	b.n	12c38 <bytes_subscr+0x80>
        }
    } else {
        return MP_OBJ_NULL; // op not supported
   12c36:	2300      	movs	r3, #0
    }
}
   12c38:	4618      	mov	r0, r3
   12c3a:	3720      	adds	r7, #32
   12c3c:	46bd      	mov	sp, r7
   12c3e:	bd80      	pop	{r7, pc}
   12c40:	00021c20 	.word	0x00021c20

00012c44 <str_join>:

STATIC mp_obj_t str_join(mp_obj_t self_in, mp_obj_t arg) {
   12c44:	b590      	push	{r4, r7, lr}
   12c46:	b093      	sub	sp, #76	; 0x4c
   12c48:	af00      	add	r7, sp, #0
   12c4a:	6078      	str	r0, [r7, #4]
   12c4c:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(self_in));
   12c4e:	6878      	ldr	r0, [r7, #4]
   12c50:	f7ff fae6 	bl	12220 <MP_OBJ_IS_QSTR>
   12c54:	4603      	mov	r3, r0
   12c56:	f083 0301 	eor.w	r3, r3, #1
   12c5a:	b2db      	uxtb	r3, r3
   12c5c:	2b00      	cmp	r3, #0
   12c5e:	d015      	beq.n	12c8c <str_join+0x48>
   12c60:	6878      	ldr	r0, [r7, #4]
   12c62:	f7ff faef 	bl	12244 <MP_OBJ_IS_OBJ>
   12c66:	4603      	mov	r3, r0
   12c68:	f083 0301 	eor.w	r3, r3, #1
   12c6c:	b2db      	uxtb	r3, r3
   12c6e:	2b00      	cmp	r3, #0
   12c70:	d105      	bne.n	12c7e <str_join+0x3a>
   12c72:	687b      	ldr	r3, [r7, #4]
   12c74:	681b      	ldr	r3, [r3, #0]
   12c76:	699b      	ldr	r3, [r3, #24]
   12c78:	4a78      	ldr	r2, [pc, #480]	; (12e5c <str_join+0x218>)
   12c7a:	4293      	cmp	r3, r2
   12c7c:	d006      	beq.n	12c8c <str_join+0x48>
   12c7e:	4b78      	ldr	r3, [pc, #480]	; (12e60 <str_join+0x21c>)
   12c80:	4a78      	ldr	r2, [pc, #480]	; (12e64 <str_join+0x220>)
   12c82:	f240 11bb 	movw	r1, #443	; 0x1bb
   12c86:	4878      	ldr	r0, [pc, #480]	; (12e68 <str_join+0x224>)
   12c88:	f008 fb70 	bl	1b36c <__assert_func>
    const mp_obj_type_t *self_type = mp_obj_get_type(self_in);
   12c8c:	6878      	ldr	r0, [r7, #4]
   12c8e:	f7fa fdc1 	bl	d814 <mp_obj_get_type>
   12c92:	62b8      	str	r0, [r7, #40]	; 0x28

    // get separation string
    GET_STR_DATA_LEN(self_in, sep_str, sep_len);
   12c94:	6878      	ldr	r0, [r7, #4]
   12c96:	f7ff fac3 	bl	12220 <MP_OBJ_IS_QSTR>
   12c9a:	4603      	mov	r3, r0
   12c9c:	2b00      	cmp	r3, #0
   12c9e:	d009      	beq.n	12cb4 <str_join+0x70>
   12ca0:	687b      	ldr	r3, [r7, #4]
   12ca2:	089b      	lsrs	r3, r3, #2
   12ca4:	f107 0224 	add.w	r2, r7, #36	; 0x24
   12ca8:	4611      	mov	r1, r2
   12caa:	4618      	mov	r0, r3
   12cac:	f7ee fab0 	bl	1210 <qstr_data>
   12cb0:	6478      	str	r0, [r7, #68]	; 0x44
   12cb2:	e005      	b.n	12cc0 <str_join+0x7c>
   12cb4:	687b      	ldr	r3, [r7, #4]
   12cb6:	689b      	ldr	r3, [r3, #8]
   12cb8:	627b      	str	r3, [r7, #36]	; 0x24
   12cba:	687b      	ldr	r3, [r7, #4]
   12cbc:	68db      	ldr	r3, [r3, #12]
   12cbe:	647b      	str	r3, [r7, #68]	; 0x44

    // process args
    size_t seq_len;
    mp_obj_t *seq_items;

    if (!MP_OBJ_IS_TYPE(arg, &mp_type_list) && !MP_OBJ_IS_TYPE(arg, &mp_type_tuple)) {
   12cc0:	683b      	ldr	r3, [r7, #0]
   12cc2:	4618      	mov	r0, r3
   12cc4:	f7ff fabe 	bl	12244 <MP_OBJ_IS_OBJ>
   12cc8:	4603      	mov	r3, r0
   12cca:	f083 0301 	eor.w	r3, r3, #1
   12cce:	b2db      	uxtb	r3, r3
   12cd0:	2b00      	cmp	r3, #0
   12cd2:	d104      	bne.n	12cde <str_join+0x9a>
   12cd4:	683b      	ldr	r3, [r7, #0]
   12cd6:	681b      	ldr	r3, [r3, #0]
   12cd8:	4a64      	ldr	r2, [pc, #400]	; (12e6c <str_join+0x228>)
   12cda:	4293      	cmp	r3, r2
   12cdc:	d017      	beq.n	12d0e <str_join+0xca>
   12cde:	683b      	ldr	r3, [r7, #0]
   12ce0:	4618      	mov	r0, r3
   12ce2:	f7ff faaf 	bl	12244 <MP_OBJ_IS_OBJ>
   12ce6:	4603      	mov	r3, r0
   12ce8:	f083 0301 	eor.w	r3, r3, #1
   12cec:	b2db      	uxtb	r3, r3
   12cee:	2b00      	cmp	r3, #0
   12cf0:	d104      	bne.n	12cfc <str_join+0xb8>
   12cf2:	683b      	ldr	r3, [r7, #0]
   12cf4:	681b      	ldr	r3, [r3, #0]
   12cf6:	4a5e      	ldr	r2, [pc, #376]	; (12e70 <str_join+0x22c>)
   12cf8:	4293      	cmp	r3, r2
   12cfa:	d008      	beq.n	12d0e <str_join+0xca>
        // arg is not a list nor a tuple, try to convert it to a list
        // TODO: Try to optimize?
        arg = mp_type_list.make_new(&mp_type_list, 1, 0, &arg);
   12cfc:	4b5b      	ldr	r3, [pc, #364]	; (12e6c <str_join+0x228>)
   12cfe:	68dc      	ldr	r4, [r3, #12]
   12d00:	463b      	mov	r3, r7
   12d02:	2200      	movs	r2, #0
   12d04:	2101      	movs	r1, #1
   12d06:	4859      	ldr	r0, [pc, #356]	; (12e6c <str_join+0x228>)
   12d08:	47a0      	blx	r4
   12d0a:	4603      	mov	r3, r0
   12d0c:	603b      	str	r3, [r7, #0]
    }
    mp_obj_get_array(arg, &seq_len, &seq_items);
   12d0e:	683b      	ldr	r3, [r7, #0]
   12d10:	f107 021c 	add.w	r2, r7, #28
   12d14:	f107 0120 	add.w	r1, r7, #32
   12d18:	4618      	mov	r0, r3
   12d1a:	f7fa fff5 	bl	dd08 <mp_obj_get_array>

    // count required length
    size_t required_len = 0;
   12d1e:	2300      	movs	r3, #0
   12d20:	643b      	str	r3, [r7, #64]	; 0x40
    for (size_t i = 0; i < seq_len; i++) {
   12d22:	2300      	movs	r3, #0
   12d24:	63fb      	str	r3, [r7, #60]	; 0x3c
   12d26:	e039      	b.n	12d9c <str_join+0x158>
        if (mp_obj_get_type(seq_items[i]) != self_type) {
   12d28:	69fa      	ldr	r2, [r7, #28]
   12d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12d2c:	009b      	lsls	r3, r3, #2
   12d2e:	4413      	add	r3, r2
   12d30:	681b      	ldr	r3, [r3, #0]
   12d32:	4618      	mov	r0, r3
   12d34:	f7fa fd6e 	bl	d814 <mp_obj_get_type>
   12d38:	4602      	mov	r2, r0
   12d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d3c:	429a      	cmp	r2, r3
   12d3e:	d002      	beq.n	12d46 <str_join+0x102>
            mp_raise_TypeError(
   12d40:	484c      	ldr	r0, [pc, #304]	; (12e74 <str_join+0x230>)
   12d42:	f7fa f94d 	bl	cfe0 <mp_raise_TypeError>
                "join expects a list of str/bytes objects consistent with self object");
        }
        if (i > 0) {
   12d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12d48:	2b00      	cmp	r3, #0
   12d4a:	d003      	beq.n	12d54 <str_join+0x110>
            required_len += sep_len;
   12d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12d4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12d50:	4413      	add	r3, r2
   12d52:	643b      	str	r3, [r7, #64]	; 0x40
        }
        GET_STR_LEN(seq_items[i], l);
   12d54:	69fa      	ldr	r2, [r7, #28]
   12d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12d58:	009b      	lsls	r3, r3, #2
   12d5a:	4413      	add	r3, r2
   12d5c:	681b      	ldr	r3, [r3, #0]
   12d5e:	4618      	mov	r0, r3
   12d60:	f7ff fa5e 	bl	12220 <MP_OBJ_IS_QSTR>
   12d64:	4603      	mov	r3, r0
   12d66:	2b00      	cmp	r3, #0
   12d68:	d00a      	beq.n	12d80 <str_join+0x13c>
   12d6a:	69fa      	ldr	r2, [r7, #28]
   12d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12d6e:	009b      	lsls	r3, r3, #2
   12d70:	4413      	add	r3, r2
   12d72:	681b      	ldr	r3, [r3, #0]
   12d74:	089b      	lsrs	r3, r3, #2
   12d76:	4618      	mov	r0, r3
   12d78:	f7ee fa2c 	bl	11d4 <qstr_len>
   12d7c:	63b8      	str	r0, [r7, #56]	; 0x38
   12d7e:	e006      	b.n	12d8e <str_join+0x14a>
   12d80:	69fa      	ldr	r2, [r7, #28]
   12d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12d84:	009b      	lsls	r3, r3, #2
   12d86:	4413      	add	r3, r2
   12d88:	681b      	ldr	r3, [r3, #0]
   12d8a:	689b      	ldr	r3, [r3, #8]
   12d8c:	63bb      	str	r3, [r7, #56]	; 0x38
        required_len += l;
   12d8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   12d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12d92:	4413      	add	r3, r2
   12d94:	643b      	str	r3, [r7, #64]	; 0x40
    for (size_t i = 0; i < seq_len; i++) {
   12d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12d98:	3301      	adds	r3, #1
   12d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   12d9c:	6a3b      	ldr	r3, [r7, #32]
   12d9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12da0:	429a      	cmp	r2, r3
   12da2:	d3c1      	bcc.n	12d28 <str_join+0xe4>
    }

    // make joined string
    vstr_t vstr;
    vstr_init_len(&vstr, required_len);
   12da4:	f107 030c 	add.w	r3, r7, #12
   12da8:	6c39      	ldr	r1, [r7, #64]	; 0x40
   12daa:	4618      	mov	r0, r3
   12dac:	f7ee faca 	bl	1344 <vstr_init_len>
    byte *data = (byte*)vstr.buf;
   12db0:	697b      	ldr	r3, [r7, #20]
   12db2:	637b      	str	r3, [r7, #52]	; 0x34
    for (size_t i = 0; i < seq_len; i++) {
   12db4:	2300      	movs	r3, #0
   12db6:	633b      	str	r3, [r7, #48]	; 0x30
   12db8:	e040      	b.n	12e3c <str_join+0x1f8>
        if (i > 0) {
   12dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12dbc:	2b00      	cmp	r3, #0
   12dbe:	d009      	beq.n	12dd4 <str_join+0x190>
            memcpy(data, sep_str, sep_len);
   12dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12dc2:	461a      	mov	r2, r3
   12dc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
   12dc6:	6b78      	ldr	r0, [r7, #52]	; 0x34
   12dc8:	f009 f87c 	bl	1bec4 <memcpy>
            data += sep_len;
   12dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12dce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   12dd0:	4413      	add	r3, r2
   12dd2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        GET_STR_DATA_LEN(seq_items[i], s, l);
   12dd4:	69fa      	ldr	r2, [r7, #28]
   12dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12dd8:	009b      	lsls	r3, r3, #2
   12dda:	4413      	add	r3, r2
   12ddc:	681b      	ldr	r3, [r3, #0]
   12dde:	4618      	mov	r0, r3
   12de0:	f7ff fa1e 	bl	12220 <MP_OBJ_IS_QSTR>
   12de4:	4603      	mov	r3, r0
   12de6:	2b00      	cmp	r3, #0
   12de8:	d00d      	beq.n	12e06 <str_join+0x1c2>
   12dea:	69fa      	ldr	r2, [r7, #28]
   12dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12dee:	009b      	lsls	r3, r3, #2
   12df0:	4413      	add	r3, r2
   12df2:	681b      	ldr	r3, [r3, #0]
   12df4:	089b      	lsrs	r3, r3, #2
   12df6:	f107 0208 	add.w	r2, r7, #8
   12dfa:	4611      	mov	r1, r2
   12dfc:	4618      	mov	r0, r3
   12dfe:	f7ee fa07 	bl	1210 <qstr_data>
   12e02:	62f8      	str	r0, [r7, #44]	; 0x2c
   12e04:	e00d      	b.n	12e22 <str_join+0x1de>
   12e06:	69fa      	ldr	r2, [r7, #28]
   12e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12e0a:	009b      	lsls	r3, r3, #2
   12e0c:	4413      	add	r3, r2
   12e0e:	681b      	ldr	r3, [r3, #0]
   12e10:	689b      	ldr	r3, [r3, #8]
   12e12:	60bb      	str	r3, [r7, #8]
   12e14:	69fa      	ldr	r2, [r7, #28]
   12e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12e18:	009b      	lsls	r3, r3, #2
   12e1a:	4413      	add	r3, r2
   12e1c:	681b      	ldr	r3, [r3, #0]
   12e1e:	68db      	ldr	r3, [r3, #12]
   12e20:	62fb      	str	r3, [r7, #44]	; 0x2c
        memcpy(data, s, l);
   12e22:	68bb      	ldr	r3, [r7, #8]
   12e24:	461a      	mov	r2, r3
   12e26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   12e28:	6b78      	ldr	r0, [r7, #52]	; 0x34
   12e2a:	f009 f84b 	bl	1bec4 <memcpy>
        data += l;
   12e2e:	68bb      	ldr	r3, [r7, #8]
   12e30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   12e32:	4413      	add	r3, r2
   12e34:	637b      	str	r3, [r7, #52]	; 0x34
    for (size_t i = 0; i < seq_len; i++) {
   12e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12e38:	3301      	adds	r3, #1
   12e3a:	633b      	str	r3, [r7, #48]	; 0x30
   12e3c:	6a3b      	ldr	r3, [r7, #32]
   12e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   12e40:	429a      	cmp	r2, r3
   12e42:	d3ba      	bcc.n	12dba <str_join+0x176>
    }

    // return joined string
    return mp_obj_new_str_from_vstr(self_type, &vstr);
   12e44:	f107 030c 	add.w	r3, r7, #12
   12e48:	4619      	mov	r1, r3
   12e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12e4c:	f002 fa68 	bl	15320 <mp_obj_new_str_from_vstr>
   12e50:	4603      	mov	r3, r0
}
   12e52:	4618      	mov	r0, r3
   12e54:	374c      	adds	r7, #76	; 0x4c
   12e56:	46bd      	mov	sp, r7
   12e58:	bd90      	pop	{r4, r7, pc}
   12e5a:	bf00      	nop
   12e5c:	00012895 	.word	0x00012895
   12e60:	00021684 	.word	0x00021684
   12e64:	00021c90 	.word	0x00021c90
   12e68:	0002170c 	.word	0x0002170c
   12e6c:	000211fc 	.word	0x000211fc
   12e70:	00021e68 	.word	0x00021e68
   12e74:	00021720 	.word	0x00021720

00012e78 <mp_obj_str_split>:
MP_DEFINE_CONST_FUN_OBJ_2(str_join_obj, str_join);

mp_obj_t mp_obj_str_split(size_t n_args, const mp_obj_t *args) {
   12e78:	b580      	push	{r7, lr}
   12e7a:	b08e      	sub	sp, #56	; 0x38
   12e7c:	af00      	add	r7, sp, #0
   12e7e:	6078      	str	r0, [r7, #4]
   12e80:	6039      	str	r1, [r7, #0]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   12e82:	683b      	ldr	r3, [r7, #0]
   12e84:	681b      	ldr	r3, [r3, #0]
   12e86:	4618      	mov	r0, r3
   12e88:	f7fa fcc4 	bl	d814 <mp_obj_get_type>
   12e8c:	62b8      	str	r0, [r7, #40]	; 0x28
    mp_int_t splits = -1;
   12e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12e92:	637b      	str	r3, [r7, #52]	; 0x34
    mp_obj_t sep = mp_const_none;
   12e94:	4b7b      	ldr	r3, [pc, #492]	; (13084 <mp_obj_str_split+0x20c>)
   12e96:	633b      	str	r3, [r7, #48]	; 0x30
    if (n_args > 1) {
   12e98:	687b      	ldr	r3, [r7, #4]
   12e9a:	2b01      	cmp	r3, #1
   12e9c:	d90c      	bls.n	12eb8 <mp_obj_str_split+0x40>
        sep = args[1];
   12e9e:	683b      	ldr	r3, [r7, #0]
   12ea0:	685b      	ldr	r3, [r3, #4]
   12ea2:	633b      	str	r3, [r7, #48]	; 0x30
        if (n_args > 2) {
   12ea4:	687b      	ldr	r3, [r7, #4]
   12ea6:	2b02      	cmp	r3, #2
   12ea8:	d906      	bls.n	12eb8 <mp_obj_str_split+0x40>
            splits = mp_obj_get_int(args[2]);
   12eaa:	683b      	ldr	r3, [r7, #0]
   12eac:	3308      	adds	r3, #8
   12eae:	681b      	ldr	r3, [r3, #0]
   12eb0:	4618      	mov	r0, r3
   12eb2:	f7fa fe8d 	bl	dbd0 <mp_obj_get_int>
   12eb6:	6378      	str	r0, [r7, #52]	; 0x34
        }
    }

    mp_obj_t res = mp_obj_new_list(0, NULL);
   12eb8:	2100      	movs	r1, #0
   12eba:	2000      	movs	r0, #0
   12ebc:	f7fe fcf0 	bl	118a0 <mp_obj_new_list>
   12ec0:	6278      	str	r0, [r7, #36]	; 0x24
    GET_STR_DATA_LEN(args[0], s, len);
   12ec2:	683b      	ldr	r3, [r7, #0]
   12ec4:	681b      	ldr	r3, [r3, #0]
   12ec6:	4618      	mov	r0, r3
   12ec8:	f7ff f9aa 	bl	12220 <MP_OBJ_IS_QSTR>
   12ecc:	4603      	mov	r3, r0
   12ece:	2b00      	cmp	r3, #0
   12ed0:	d00a      	beq.n	12ee8 <mp_obj_str_split+0x70>
   12ed2:	683b      	ldr	r3, [r7, #0]
   12ed4:	681b      	ldr	r3, [r3, #0]
   12ed6:	089b      	lsrs	r3, r3, #2
   12ed8:	f107 0210 	add.w	r2, r7, #16
   12edc:	4611      	mov	r1, r2
   12ede:	4618      	mov	r0, r3
   12ee0:	f7ee f996 	bl	1210 <qstr_data>
   12ee4:	62f8      	str	r0, [r7, #44]	; 0x2c
   12ee6:	e007      	b.n	12ef8 <mp_obj_str_split+0x80>
   12ee8:	683b      	ldr	r3, [r7, #0]
   12eea:	681b      	ldr	r3, [r3, #0]
   12eec:	689b      	ldr	r3, [r3, #8]
   12eee:	613b      	str	r3, [r7, #16]
   12ef0:	683b      	ldr	r3, [r7, #0]
   12ef2:	681b      	ldr	r3, [r3, #0]
   12ef4:	68db      	ldr	r3, [r3, #12]
   12ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const byte *top = s + len;
   12ef8:	693b      	ldr	r3, [r7, #16]
   12efa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12efc:	4413      	add	r3, r2
   12efe:	623b      	str	r3, [r7, #32]

    if (sep == mp_const_none) {
   12f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12f02:	4a60      	ldr	r2, [pc, #384]	; (13084 <mp_obj_str_split+0x20c>)
   12f04:	4293      	cmp	r3, r2
   12f06:	d167      	bne.n	12fd8 <mp_obj_str_split+0x160>
        // sep not given, so separate on whitespace

        // Initial whitespace is not counted as split, so we pre-do it
        while (s < top && unichar_isspace(*s)) s++;
   12f08:	e002      	b.n	12f10 <mp_obj_str_split+0x98>
   12f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12f0c:	3301      	adds	r3, #1
   12f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   12f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12f12:	6a3b      	ldr	r3, [r7, #32]
   12f14:	429a      	cmp	r2, r3
   12f16:	d244      	bcs.n	12fa2 <mp_obj_str_split+0x12a>
   12f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12f1a:	781b      	ldrb	r3, [r3, #0]
   12f1c:	4618      	mov	r0, r3
   12f1e:	f7ef fa2f 	bl	2380 <unichar_isspace>
   12f22:	4603      	mov	r3, r0
   12f24:	2b00      	cmp	r3, #0
   12f26:	d1f0      	bne.n	12f0a <mp_obj_str_split+0x92>
        while (s < top && splits != 0) {
   12f28:	e03b      	b.n	12fa2 <mp_obj_str_split+0x12a>
            const byte *start = s;
   12f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12f2c:	61fb      	str	r3, [r7, #28]
            while (s < top && !unichar_isspace(*s)) s++;
   12f2e:	e002      	b.n	12f36 <mp_obj_str_split+0xbe>
   12f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12f32:	3301      	adds	r3, #1
   12f34:	62fb      	str	r3, [r7, #44]	; 0x2c
   12f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12f38:	6a3b      	ldr	r3, [r7, #32]
   12f3a:	429a      	cmp	r2, r3
   12f3c:	d20a      	bcs.n	12f54 <mp_obj_str_split+0xdc>
   12f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12f40:	781b      	ldrb	r3, [r3, #0]
   12f42:	4618      	mov	r0, r3
   12f44:	f7ef fa1c 	bl	2380 <unichar_isspace>
   12f48:	4603      	mov	r3, r0
   12f4a:	f083 0301 	eor.w	r3, r3, #1
   12f4e:	b2db      	uxtb	r3, r3
   12f50:	2b00      	cmp	r3, #0
   12f52:	d1ed      	bne.n	12f30 <mp_obj_str_split+0xb8>
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, start, s - start));
   12f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12f56:	69fb      	ldr	r3, [r7, #28]
   12f58:	1ad3      	subs	r3, r2, r3
   12f5a:	461a      	mov	r2, r3
   12f5c:	69f9      	ldr	r1, [r7, #28]
   12f5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12f60:	f002 f9b0 	bl	152c4 <mp_obj_new_str_of_type>
   12f64:	4603      	mov	r3, r0
   12f66:	4619      	mov	r1, r3
   12f68:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12f6a:	f7fe f807 	bl	10f7c <mp_obj_list_append>
            if (s >= top) {
   12f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12f70:	6a3b      	ldr	r3, [r7, #32]
   12f72:	429a      	cmp	r2, r3
   12f74:	d21d      	bcs.n	12fb2 <mp_obj_str_split+0x13a>
                break;
            }
            while (s < top && unichar_isspace(*s)) s++;
   12f76:	e002      	b.n	12f7e <mp_obj_str_split+0x106>
   12f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12f7a:	3301      	adds	r3, #1
   12f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   12f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12f80:	6a3b      	ldr	r3, [r7, #32]
   12f82:	429a      	cmp	r2, r3
   12f84:	d207      	bcs.n	12f96 <mp_obj_str_split+0x11e>
   12f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12f88:	781b      	ldrb	r3, [r3, #0]
   12f8a:	4618      	mov	r0, r3
   12f8c:	f7ef f9f8 	bl	2380 <unichar_isspace>
   12f90:	4603      	mov	r3, r0
   12f92:	2b00      	cmp	r3, #0
   12f94:	d1f0      	bne.n	12f78 <mp_obj_str_split+0x100>
            if (splits > 0) {
   12f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12f98:	2b00      	cmp	r3, #0
   12f9a:	dd02      	ble.n	12fa2 <mp_obj_str_split+0x12a>
                splits--;
   12f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12f9e:	3b01      	subs	r3, #1
   12fa0:	637b      	str	r3, [r7, #52]	; 0x34
        while (s < top && splits != 0) {
   12fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12fa4:	6a3b      	ldr	r3, [r7, #32]
   12fa6:	429a      	cmp	r2, r3
   12fa8:	d204      	bcs.n	12fb4 <mp_obj_str_split+0x13c>
   12faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12fac:	2b00      	cmp	r3, #0
   12fae:	d1bc      	bne.n	12f2a <mp_obj_str_split+0xb2>
   12fb0:	e000      	b.n	12fb4 <mp_obj_str_split+0x13c>
                break;
   12fb2:	bf00      	nop
            }
        }

        if (s < top) {
   12fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12fb6:	6a3b      	ldr	r3, [r7, #32]
   12fb8:	429a      	cmp	r2, r3
   12fba:	d25d      	bcs.n	13078 <mp_obj_str_split+0x200>
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, s, top - s));
   12fbc:	6a3a      	ldr	r2, [r7, #32]
   12fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12fc0:	1ad3      	subs	r3, r2, r3
   12fc2:	461a      	mov	r2, r3
   12fc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   12fc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   12fc8:	f002 f97c 	bl	152c4 <mp_obj_new_str_of_type>
   12fcc:	4603      	mov	r3, r0
   12fce:	4619      	mov	r1, r3
   12fd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12fd2:	f7fd ffd3 	bl	10f7c <mp_obj_list_append>
   12fd6:	e04f      	b.n	13078 <mp_obj_str_split+0x200>
        }

    } else {
        // sep given
        if (mp_obj_get_type(sep) != self_type) {
   12fd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
   12fda:	f7fa fc1b 	bl	d814 <mp_obj_get_type>
   12fde:	4602      	mov	r2, r0
   12fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12fe2:	429a      	cmp	r2, r3
   12fe4:	d002      	beq.n	12fec <mp_obj_str_split+0x174>
            bad_implicit_conversion(sep);
   12fe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
   12fe8:	f002 faee 	bl	155c8 <bad_implicit_conversion>
        }

        size_t sep_len;
        const char *sep_str = mp_obj_str_get_data(sep, &sep_len);
   12fec:	f107 030c 	add.w	r3, r7, #12
   12ff0:	4619      	mov	r1, r3
   12ff2:	6b38      	ldr	r0, [r7, #48]	; 0x30
   12ff4:	f002 fb58 	bl	156a8 <mp_obj_str_get_data>
   12ff8:	61b8      	str	r0, [r7, #24]

        if (sep_len == 0) {
   12ffa:	68fb      	ldr	r3, [r7, #12]
   12ffc:	2b00      	cmp	r3, #0
   12ffe:	d102      	bne.n	13006 <mp_obj_str_split+0x18e>
            mp_raise_ValueError("empty separator");
   13000:	4821      	ldr	r0, [pc, #132]	; (13088 <mp_obj_str_split+0x210>)
   13002:	f7f9 ffe3 	bl	cfcc <mp_raise_ValueError>
        }

        for (;;) {
            const byte *start = s;
   13006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13008:	617b      	str	r3, [r7, #20]
            for (;;) {
                if (splits == 0 || s + sep_len > top) {
   1300a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1300c:	2b00      	cmp	r3, #0
   1300e:	d005      	beq.n	1301c <mp_obj_str_split+0x1a4>
   13010:	68fb      	ldr	r3, [r7, #12]
   13012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13014:	441a      	add	r2, r3
   13016:	6a3b      	ldr	r3, [r7, #32]
   13018:	429a      	cmp	r2, r3
   1301a:	d902      	bls.n	13022 <mp_obj_str_split+0x1aa>
                    s = top;
   1301c:	6a3b      	ldr	r3, [r7, #32]
   1301e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
   13020:	e00d      	b.n	1303e <mp_obj_str_split+0x1c6>
                } else if (memcmp(s, sep_str, sep_len) == 0) {
   13022:	68fb      	ldr	r3, [r7, #12]
   13024:	461a      	mov	r2, r3
   13026:	69b9      	ldr	r1, [r7, #24]
   13028:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1302a:	f009 f833 	bl	1c094 <memcmp>
   1302e:	4603      	mov	r3, r0
   13030:	2b00      	cmp	r3, #0
   13032:	d003      	beq.n	1303c <mp_obj_str_split+0x1c4>
                    break;
                }
                s++;
   13034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13036:	3301      	adds	r3, #1
   13038:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
   1303a:	e7e6      	b.n	1300a <mp_obj_str_split+0x192>
                    break;
   1303c:	bf00      	nop
            mp_obj_list_append(res, mp_obj_new_str_of_type(self_type, start, s - start));
   1303e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13040:	697b      	ldr	r3, [r7, #20]
   13042:	1ad3      	subs	r3, r2, r3
   13044:	461a      	mov	r2, r3
   13046:	6979      	ldr	r1, [r7, #20]
   13048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1304a:	f002 f93b 	bl	152c4 <mp_obj_new_str_of_type>
   1304e:	4603      	mov	r3, r0
   13050:	4619      	mov	r1, r3
   13052:	6a78      	ldr	r0, [r7, #36]	; 0x24
   13054:	f7fd ff92 	bl	10f7c <mp_obj_list_append>
            if (s >= top) {
   13058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1305a:	6a3b      	ldr	r3, [r7, #32]
   1305c:	429a      	cmp	r2, r3
   1305e:	d20a      	bcs.n	13076 <mp_obj_str_split+0x1fe>
                break;
            }
            s += sep_len;
   13060:	68fb      	ldr	r3, [r7, #12]
   13062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13064:	4413      	add	r3, r2
   13066:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (splits > 0) {
   13068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1306a:	2b00      	cmp	r3, #0
   1306c:	ddcb      	ble.n	13006 <mp_obj_str_split+0x18e>
                splits--;
   1306e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13070:	3b01      	subs	r3, #1
   13072:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
   13074:	e7c7      	b.n	13006 <mp_obj_str_split+0x18e>
                break;
   13076:	bf00      	nop
    }

    return res;
   13078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1307a:	4618      	mov	r0, r3
   1307c:	3738      	adds	r7, #56	; 0x38
   1307e:	46bd      	mov	sp, r7
   13080:	bd80      	pop	{r7, pc}
   13082:	bf00      	nop
   13084:	00021534 	.word	0x00021534
   13088:	00021770 	.word	0x00021770

0001308c <str_rsplit>:
    return res;
}
MP_DEFINE_CONST_FUN_OBJ_KW(str_splitlines_obj, 1, str_splitlines);
#endif

STATIC mp_obj_t str_rsplit(size_t n_args, const mp_obj_t *args) {
   1308c:	b590      	push	{r4, r7, lr}
   1308e:	b091      	sub	sp, #68	; 0x44
   13090:	af00      	add	r7, sp, #0
   13092:	6078      	str	r0, [r7, #4]
   13094:	6039      	str	r1, [r7, #0]
    if (n_args < 3) {
   13096:	687b      	ldr	r3, [r7, #4]
   13098:	2b02      	cmp	r3, #2
   1309a:	d805      	bhi.n	130a8 <str_rsplit+0x1c>
        // If we don't have split limit, it doesn't matter from which side
        // we split.
        return mp_obj_str_split(n_args, args);
   1309c:	6839      	ldr	r1, [r7, #0]
   1309e:	6878      	ldr	r0, [r7, #4]
   130a0:	f7ff feea 	bl	12e78 <mp_obj_str_split>
   130a4:	4603      	mov	r3, r0
   130a6:	e0cc      	b.n	13242 <str_rsplit+0x1b6>
    }
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   130a8:	683b      	ldr	r3, [r7, #0]
   130aa:	681b      	ldr	r3, [r3, #0]
   130ac:	4618      	mov	r0, r3
   130ae:	f7fa fbb1 	bl	d814 <mp_obj_get_type>
   130b2:	62f8      	str	r0, [r7, #44]	; 0x2c
    mp_obj_t sep = args[1];
   130b4:	683b      	ldr	r3, [r7, #0]
   130b6:	685b      	ldr	r3, [r3, #4]
   130b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_STR_DATA_LEN(args[0], s, len);
   130ba:	683b      	ldr	r3, [r7, #0]
   130bc:	681b      	ldr	r3, [r3, #0]
   130be:	4618      	mov	r0, r3
   130c0:	f7ff f8ae 	bl	12220 <MP_OBJ_IS_QSTR>
   130c4:	4603      	mov	r3, r0
   130c6:	2b00      	cmp	r3, #0
   130c8:	d00a      	beq.n	130e0 <str_rsplit+0x54>
   130ca:	683b      	ldr	r3, [r7, #0]
   130cc:	681b      	ldr	r3, [r3, #0]
   130ce:	089b      	lsrs	r3, r3, #2
   130d0:	f107 0210 	add.w	r2, r7, #16
   130d4:	4611      	mov	r1, r2
   130d6:	4618      	mov	r0, r3
   130d8:	f7ee f89a 	bl	1210 <qstr_data>
   130dc:	63f8      	str	r0, [r7, #60]	; 0x3c
   130de:	e007      	b.n	130f0 <str_rsplit+0x64>
   130e0:	683b      	ldr	r3, [r7, #0]
   130e2:	681b      	ldr	r3, [r3, #0]
   130e4:	689b      	ldr	r3, [r3, #8]
   130e6:	613b      	str	r3, [r7, #16]
   130e8:	683b      	ldr	r3, [r7, #0]
   130ea:	681b      	ldr	r3, [r3, #0]
   130ec:	68db      	ldr	r3, [r3, #12]
   130ee:	63fb      	str	r3, [r7, #60]	; 0x3c

    mp_int_t splits = mp_obj_get_int(args[2]);
   130f0:	683b      	ldr	r3, [r7, #0]
   130f2:	3308      	adds	r3, #8
   130f4:	681b      	ldr	r3, [r3, #0]
   130f6:	4618      	mov	r0, r3
   130f8:	f7fa fd6a 	bl	dbd0 <mp_obj_get_int>
   130fc:	63b8      	str	r0, [r7, #56]	; 0x38
    if (splits < 0) {
   130fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13100:	2b00      	cmp	r3, #0
   13102:	da05      	bge.n	13110 <str_rsplit+0x84>
        // Negative limit means no limit, so delegate to split().
        return mp_obj_str_split(n_args, args);
   13104:	6839      	ldr	r1, [r7, #0]
   13106:	6878      	ldr	r0, [r7, #4]
   13108:	f7ff feb6 	bl	12e78 <mp_obj_str_split>
   1310c:	4603      	mov	r3, r0
   1310e:	e098      	b.n	13242 <str_rsplit+0x1b6>
    }

    mp_int_t org_splits = splits;
   13110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13112:	627b      	str	r3, [r7, #36]	; 0x24
    // Preallocate list to the max expected # of elements, as we
    // will fill it from the end.
    mp_obj_list_t *res = MP_OBJ_TO_PTR(mp_obj_new_list(splits + 1, NULL));
   13114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13116:	3301      	adds	r3, #1
   13118:	2100      	movs	r1, #0
   1311a:	4618      	mov	r0, r3
   1311c:	f7fe fbc0 	bl	118a0 <mp_obj_new_list>
   13120:	6238      	str	r0, [r7, #32]
    mp_int_t idx = splits;
   13122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13124:	637b      	str	r3, [r7, #52]	; 0x34

    if (sep == mp_const_none) {
   13126:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13128:	4a48      	ldr	r2, [pc, #288]	; (1324c <str_rsplit+0x1c0>)
   1312a:	4293      	cmp	r3, r2
   1312c:	d102      	bne.n	13134 <str_rsplit+0xa8>
        mp_raise_NotImplementedError("rsplit(None,n)");
   1312e:	4848      	ldr	r0, [pc, #288]	; (13250 <str_rsplit+0x1c4>)
   13130:	f7f9 ff72 	bl	d018 <mp_raise_NotImplementedError>
    } else {
        size_t sep_len;
        const char *sep_str = mp_obj_str_get_data(sep, &sep_len);
   13134:	f107 030c 	add.w	r3, r7, #12
   13138:	4619      	mov	r1, r3
   1313a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1313c:	f002 fab4 	bl	156a8 <mp_obj_str_get_data>
   13140:	61f8      	str	r0, [r7, #28]

        if (sep_len == 0) {
   13142:	68fb      	ldr	r3, [r7, #12]
   13144:	2b00      	cmp	r3, #0
   13146:	d102      	bne.n	1314e <str_rsplit+0xc2>
            mp_raise_ValueError("empty separator");
   13148:	4842      	ldr	r0, [pc, #264]	; (13254 <str_rsplit+0x1c8>)
   1314a:	f7f9 ff3f 	bl	cfcc <mp_raise_ValueError>
        }

        const byte *beg = s;
   1314e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13150:	61bb      	str	r3, [r7, #24]
        const byte *last = s + len;
   13152:	693b      	ldr	r3, [r7, #16]
   13154:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   13156:	4413      	add	r3, r2
   13158:	633b      	str	r3, [r7, #48]	; 0x30
        for (;;) {
            s = last - sep_len;
   1315a:	68fb      	ldr	r3, [r7, #12]
   1315c:	425b      	negs	r3, r3
   1315e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   13160:	4413      	add	r3, r2
   13162:	63fb      	str	r3, [r7, #60]	; 0x3c
            for (;;) {
                if (splits == 0 || s < beg) {
   13164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13166:	2b00      	cmp	r3, #0
   13168:	d011      	beq.n	1318e <str_rsplit+0x102>
   1316a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1316c:	69bb      	ldr	r3, [r7, #24]
   1316e:	429a      	cmp	r2, r3
   13170:	d30d      	bcc.n	1318e <str_rsplit+0x102>
                    break;
                } else if (memcmp(s, sep_str, sep_len) == 0) {
   13172:	68fb      	ldr	r3, [r7, #12]
   13174:	461a      	mov	r2, r3
   13176:	69f9      	ldr	r1, [r7, #28]
   13178:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1317a:	f008 ff8b 	bl	1c094 <memcmp>
   1317e:	4603      	mov	r3, r0
   13180:	2b00      	cmp	r3, #0
   13182:	d003      	beq.n	1318c <str_rsplit+0x100>
                    break;
                }
                s--;
   13184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13186:	3b01      	subs	r3, #1
   13188:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
   1318a:	e7eb      	b.n	13164 <str_rsplit+0xd8>
                    break;
   1318c:	bf00      	nop
            if (s < beg || splits == 0) {
   1318e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   13190:	69bb      	ldr	r3, [r7, #24]
   13192:	429a      	cmp	r2, r3
   13194:	d302      	bcc.n	1319c <str_rsplit+0x110>
   13196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13198:	2b00      	cmp	r3, #0
   1319a:	d113      	bne.n	131c4 <str_rsplit+0x138>
                res->items[idx] = mp_obj_new_str_of_type(self_type, beg, last - beg);
   1319c:	6a3b      	ldr	r3, [r7, #32]
   1319e:	68da      	ldr	r2, [r3, #12]
   131a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   131a2:	009b      	lsls	r3, r3, #2
   131a4:	18d4      	adds	r4, r2, r3
   131a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   131a8:	69bb      	ldr	r3, [r7, #24]
   131aa:	1ad3      	subs	r3, r2, r3
   131ac:	461a      	mov	r2, r3
   131ae:	69b9      	ldr	r1, [r7, #24]
   131b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   131b2:	f002 f887 	bl	152c4 <mp_obj_new_str_of_type>
   131b6:	4603      	mov	r3, r0
   131b8:	6023      	str	r3, [r4, #0]
                break;
   131ba:	bf00      	nop
            }
            res->items[idx--] = mp_obj_new_str_of_type(self_type, s + sep_len, last - s - sep_len);
            last = s;
            splits--;
        }
        if (idx != 0) {
   131bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   131be:	2b00      	cmp	r3, #0
   131c0:	d03e      	beq.n	13240 <str_rsplit+0x1b4>
   131c2:	e01b      	b.n	131fc <str_rsplit+0x170>
            res->items[idx--] = mp_obj_new_str_of_type(self_type, s + sep_len, last - s - sep_len);
   131c4:	6a3b      	ldr	r3, [r7, #32]
   131c6:	68da      	ldr	r2, [r3, #12]
   131c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   131ca:	1e59      	subs	r1, r3, #1
   131cc:	6379      	str	r1, [r7, #52]	; 0x34
   131ce:	009b      	lsls	r3, r3, #2
   131d0:	18d4      	adds	r4, r2, r3
   131d2:	68fb      	ldr	r3, [r7, #12]
   131d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   131d6:	18d1      	adds	r1, r2, r3
   131d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   131da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   131dc:	1ad3      	subs	r3, r2, r3
   131de:	461a      	mov	r2, r3
   131e0:	68fb      	ldr	r3, [r7, #12]
   131e2:	1ad3      	subs	r3, r2, r3
   131e4:	461a      	mov	r2, r3
   131e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   131e8:	f002 f86c 	bl	152c4 <mp_obj_new_str_of_type>
   131ec:	4603      	mov	r3, r0
   131ee:	6023      	str	r3, [r4, #0]
            last = s;
   131f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   131f2:	633b      	str	r3, [r7, #48]	; 0x30
            splits--;
   131f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   131f6:	3b01      	subs	r3, #1
   131f8:	63bb      	str	r3, [r7, #56]	; 0x38
        }
   131fa:	e7ae      	b.n	1315a <str_rsplit+0xce>
            // We split less parts than split limit, now go cleanup surplus
            size_t used = org_splits + 1 - idx;
   131fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   131fe:	1c5a      	adds	r2, r3, #1
   13200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13202:	1ad3      	subs	r3, r2, r3
   13204:	617b      	str	r3, [r7, #20]
            memmove(res->items, &res->items[idx], used * sizeof(mp_obj_t));
   13206:	6a3b      	ldr	r3, [r7, #32]
   13208:	68d8      	ldr	r0, [r3, #12]
   1320a:	6a3b      	ldr	r3, [r7, #32]
   1320c:	68da      	ldr	r2, [r3, #12]
   1320e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13210:	009b      	lsls	r3, r3, #2
   13212:	18d1      	adds	r1, r2, r3
   13214:	697b      	ldr	r3, [r7, #20]
   13216:	009b      	lsls	r3, r3, #2
   13218:	461a      	mov	r2, r3
   1321a:	f008 feb9 	bl	1bf90 <memmove>
            mp_seq_clear(res->items, used, res->alloc, sizeof(*res->items));
   1321e:	6a3b      	ldr	r3, [r7, #32]
   13220:	68da      	ldr	r2, [r3, #12]
   13222:	697b      	ldr	r3, [r7, #20]
   13224:	009b      	lsls	r3, r3, #2
   13226:	18d0      	adds	r0, r2, r3
   13228:	6a3b      	ldr	r3, [r7, #32]
   1322a:	685a      	ldr	r2, [r3, #4]
   1322c:	697b      	ldr	r3, [r7, #20]
   1322e:	1ad3      	subs	r3, r2, r3
   13230:	009b      	lsls	r3, r3, #2
   13232:	461a      	mov	r2, r3
   13234:	2100      	movs	r1, #0
   13236:	f008 fee1 	bl	1bffc <memset>
            res->len = used;
   1323a:	6a3b      	ldr	r3, [r7, #32]
   1323c:	697a      	ldr	r2, [r7, #20]
   1323e:	609a      	str	r2, [r3, #8]
        }
    }

    return MP_OBJ_FROM_PTR(res);
   13240:	6a3b      	ldr	r3, [r7, #32]
}
   13242:	4618      	mov	r0, r3
   13244:	3744      	adds	r7, #68	; 0x44
   13246:	46bd      	mov	sp, r7
   13248:	bd90      	pop	{r4, r7, pc}
   1324a:	bf00      	nop
   1324c:	00021534 	.word	0x00021534
   13250:	0002178c 	.word	0x0002178c
   13254:	00021770 	.word	0x00021770

00013258 <str_finder>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_rsplit_obj, 1, 3, str_rsplit);

STATIC mp_obj_t str_finder(size_t n_args, const mp_obj_t *args, int direction, bool is_index) {
   13258:	b580      	push	{r7, lr}
   1325a:	b08e      	sub	sp, #56	; 0x38
   1325c:	af02      	add	r7, sp, #8
   1325e:	60f8      	str	r0, [r7, #12]
   13260:	60b9      	str	r1, [r7, #8]
   13262:	607a      	str	r2, [r7, #4]
   13264:	70fb      	strb	r3, [r7, #3]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   13266:	68bb      	ldr	r3, [r7, #8]
   13268:	681b      	ldr	r3, [r3, #0]
   1326a:	4618      	mov	r0, r3
   1326c:	f7fa fad2 	bl	d814 <mp_obj_get_type>
   13270:	61f8      	str	r0, [r7, #28]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   13272:	68bb      	ldr	r3, [r7, #8]
   13274:	681b      	ldr	r3, [r3, #0]
   13276:	4618      	mov	r0, r3
   13278:	f7fe ffd2 	bl	12220 <MP_OBJ_IS_QSTR>
   1327c:	4603      	mov	r3, r0
   1327e:	f083 0301 	eor.w	r3, r3, #1
   13282:	b2db      	uxtb	r3, r3
   13284:	2b00      	cmp	r3, #0
   13286:	d018      	beq.n	132ba <str_finder+0x62>
   13288:	68bb      	ldr	r3, [r7, #8]
   1328a:	681b      	ldr	r3, [r3, #0]
   1328c:	4618      	mov	r0, r3
   1328e:	f7fe ffd9 	bl	12244 <MP_OBJ_IS_OBJ>
   13292:	4603      	mov	r3, r0
   13294:	f083 0301 	eor.w	r3, r3, #1
   13298:	b2db      	uxtb	r3, r3
   1329a:	2b00      	cmp	r3, #0
   1329c:	d106      	bne.n	132ac <str_finder+0x54>
   1329e:	68bb      	ldr	r3, [r7, #8]
   132a0:	681b      	ldr	r3, [r3, #0]
   132a2:	681b      	ldr	r3, [r3, #0]
   132a4:	699b      	ldr	r3, [r3, #24]
   132a6:	4a56      	ldr	r2, [pc, #344]	; (13400 <str_finder+0x1a8>)
   132a8:	4293      	cmp	r3, r2
   132aa:	d006      	beq.n	132ba <str_finder+0x62>
   132ac:	4b55      	ldr	r3, [pc, #340]	; (13404 <str_finder+0x1ac>)
   132ae:	4a56      	ldr	r2, [pc, #344]	; (13408 <str_finder+0x1b0>)
   132b0:	f240 21ab 	movw	r1, #683	; 0x2ab
   132b4:	4855      	ldr	r0, [pc, #340]	; (1340c <str_finder+0x1b4>)
   132b6:	f008 f859 	bl	1b36c <__assert_func>

    // check argument type
    if (mp_obj_get_type(args[1]) != self_type) {
   132ba:	68bb      	ldr	r3, [r7, #8]
   132bc:	3304      	adds	r3, #4
   132be:	681b      	ldr	r3, [r3, #0]
   132c0:	4618      	mov	r0, r3
   132c2:	f7fa faa7 	bl	d814 <mp_obj_get_type>
   132c6:	4602      	mov	r2, r0
   132c8:	69fb      	ldr	r3, [r7, #28]
   132ca:	429a      	cmp	r2, r3
   132cc:	d005      	beq.n	132da <str_finder+0x82>
        bad_implicit_conversion(args[1]);
   132ce:	68bb      	ldr	r3, [r7, #8]
   132d0:	3304      	adds	r3, #4
   132d2:	681b      	ldr	r3, [r3, #0]
   132d4:	4618      	mov	r0, r3
   132d6:	f002 f977 	bl	155c8 <bad_implicit_conversion>
    }

    GET_STR_DATA_LEN(args[0], haystack, haystack_len);
   132da:	68bb      	ldr	r3, [r7, #8]
   132dc:	681b      	ldr	r3, [r3, #0]
   132de:	4618      	mov	r0, r3
   132e0:	f7fe ff9e 	bl	12220 <MP_OBJ_IS_QSTR>
   132e4:	4603      	mov	r3, r0
   132e6:	2b00      	cmp	r3, #0
   132e8:	d00a      	beq.n	13300 <str_finder+0xa8>
   132ea:	68bb      	ldr	r3, [r7, #8]
   132ec:	681b      	ldr	r3, [r3, #0]
   132ee:	089b      	lsrs	r3, r3, #2
   132f0:	f107 0214 	add.w	r2, r7, #20
   132f4:	4611      	mov	r1, r2
   132f6:	4618      	mov	r0, r3
   132f8:	f7ed ff8a 	bl	1210 <qstr_data>
   132fc:	62f8      	str	r0, [r7, #44]	; 0x2c
   132fe:	e007      	b.n	13310 <str_finder+0xb8>
   13300:	68bb      	ldr	r3, [r7, #8]
   13302:	681b      	ldr	r3, [r3, #0]
   13304:	689b      	ldr	r3, [r3, #8]
   13306:	617b      	str	r3, [r7, #20]
   13308:	68bb      	ldr	r3, [r7, #8]
   1330a:	681b      	ldr	r3, [r3, #0]
   1330c:	68db      	ldr	r3, [r3, #12]
   1330e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_STR_DATA_LEN(args[1], needle, needle_len);
   13310:	68bb      	ldr	r3, [r7, #8]
   13312:	3304      	adds	r3, #4
   13314:	681b      	ldr	r3, [r3, #0]
   13316:	4618      	mov	r0, r3
   13318:	f7fe ff82 	bl	12220 <MP_OBJ_IS_QSTR>
   1331c:	4603      	mov	r3, r0
   1331e:	2b00      	cmp	r3, #0
   13320:	d00b      	beq.n	1333a <str_finder+0xe2>
   13322:	68bb      	ldr	r3, [r7, #8]
   13324:	3304      	adds	r3, #4
   13326:	681b      	ldr	r3, [r3, #0]
   13328:	089b      	lsrs	r3, r3, #2
   1332a:	f107 0210 	add.w	r2, r7, #16
   1332e:	4611      	mov	r1, r2
   13330:	4618      	mov	r0, r3
   13332:	f7ed ff6d 	bl	1210 <qstr_data>
   13336:	62b8      	str	r0, [r7, #40]	; 0x28
   13338:	e009      	b.n	1334e <str_finder+0xf6>
   1333a:	68bb      	ldr	r3, [r7, #8]
   1333c:	3304      	adds	r3, #4
   1333e:	681b      	ldr	r3, [r3, #0]
   13340:	689b      	ldr	r3, [r3, #8]
   13342:	613b      	str	r3, [r7, #16]
   13344:	68bb      	ldr	r3, [r7, #8]
   13346:	3304      	adds	r3, #4
   13348:	681b      	ldr	r3, [r3, #0]
   1334a:	68db      	ldr	r3, [r3, #12]
   1334c:	62bb      	str	r3, [r7, #40]	; 0x28

    const byte *start = haystack;
   1334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13350:	627b      	str	r3, [r7, #36]	; 0x24
    const byte *end = haystack + haystack_len;
   13352:	697b      	ldr	r3, [r7, #20]
   13354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   13356:	4413      	add	r3, r2
   13358:	623b      	str	r3, [r7, #32]
    if (n_args >= 3 && args[2] != mp_const_none) {
   1335a:	68fb      	ldr	r3, [r7, #12]
   1335c:	2b02      	cmp	r3, #2
   1335e:	d911      	bls.n	13384 <str_finder+0x12c>
   13360:	68bb      	ldr	r3, [r7, #8]
   13362:	3308      	adds	r3, #8
   13364:	681b      	ldr	r3, [r3, #0]
   13366:	4a2a      	ldr	r2, [pc, #168]	; (13410 <str_finder+0x1b8>)
   13368:	4293      	cmp	r3, r2
   1336a:	d00b      	beq.n	13384 <str_finder+0x12c>
        start = str_index_to_ptr(self_type, haystack, haystack_len, args[2], true);
   1336c:	697a      	ldr	r2, [r7, #20]
   1336e:	68bb      	ldr	r3, [r7, #8]
   13370:	3308      	adds	r3, #8
   13372:	6819      	ldr	r1, [r3, #0]
   13374:	2301      	movs	r3, #1
   13376:	9300      	str	r3, [sp, #0]
   13378:	460b      	mov	r3, r1
   1337a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1337c:	69f8      	ldr	r0, [r7, #28]
   1337e:	f7ff fc05 	bl	12b8c <str_index_to_ptr>
   13382:	6278      	str	r0, [r7, #36]	; 0x24
    }
    if (n_args >= 4 && args[3] != mp_const_none) {
   13384:	68fb      	ldr	r3, [r7, #12]
   13386:	2b03      	cmp	r3, #3
   13388:	d911      	bls.n	133ae <str_finder+0x156>
   1338a:	68bb      	ldr	r3, [r7, #8]
   1338c:	330c      	adds	r3, #12
   1338e:	681b      	ldr	r3, [r3, #0]
   13390:	4a1f      	ldr	r2, [pc, #124]	; (13410 <str_finder+0x1b8>)
   13392:	4293      	cmp	r3, r2
   13394:	d00b      	beq.n	133ae <str_finder+0x156>
        end = str_index_to_ptr(self_type, haystack, haystack_len, args[3], true);
   13396:	697a      	ldr	r2, [r7, #20]
   13398:	68bb      	ldr	r3, [r7, #8]
   1339a:	330c      	adds	r3, #12
   1339c:	6819      	ldr	r1, [r3, #0]
   1339e:	2301      	movs	r3, #1
   133a0:	9300      	str	r3, [sp, #0]
   133a2:	460b      	mov	r3, r1
   133a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   133a6:	69f8      	ldr	r0, [r7, #28]
   133a8:	f7ff fbf0 	bl	12b8c <str_index_to_ptr>
   133ac:	6238      	str	r0, [r7, #32]
    }

    if (end < start) {
   133ae:	6a3a      	ldr	r2, [r7, #32]
   133b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   133b2:	429a      	cmp	r2, r3
   133b4:	d310      	bcc.n	133d8 <str_finder+0x180>
        goto out_error;
    }

    const byte *p = find_subbytes(start, end - start, needle, needle_len, direction);
   133b6:	6a3a      	ldr	r2, [r7, #32]
   133b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   133ba:	1ad3      	subs	r3, r2, r3
   133bc:	4619      	mov	r1, r3
   133be:	693a      	ldr	r2, [r7, #16]
   133c0:	687b      	ldr	r3, [r7, #4]
   133c2:	9300      	str	r3, [sp, #0]
   133c4:	4613      	mov	r3, r2
   133c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   133c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
   133ca:	f7ff fa29 	bl	12820 <find_subbytes>
   133ce:	61b8      	str	r0, [r7, #24]
    if (p == NULL) {
   133d0:	69bb      	ldr	r3, [r7, #24]
   133d2:	2b00      	cmp	r3, #0
   133d4:	d10a      	bne.n	133ec <str_finder+0x194>
   133d6:	e000      	b.n	133da <str_finder+0x182>
        goto out_error;
   133d8:	bf00      	nop
    out_error:
        // not found
        if (is_index) {
   133da:	78fb      	ldrb	r3, [r7, #3]
   133dc:	2b00      	cmp	r3, #0
   133de:	d002      	beq.n	133e6 <str_finder+0x18e>
            mp_raise_ValueError("substring not found");
   133e0:	480c      	ldr	r0, [pc, #48]	; (13414 <str_finder+0x1bc>)
   133e2:	f7f9 fdf3 	bl	cfcc <mp_raise_ValueError>
        } else {
            return MP_OBJ_NEW_SMALL_INT(-1);
   133e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   133ea:	e005      	b.n	133f8 <str_finder+0x1a0>
        #if MICROPY_PY_BUILTINS_STR_UNICODE
        if (self_type == &mp_type_str) {
            return MP_OBJ_NEW_SMALL_INT(utf8_ptr_to_index(haystack, p));
        }
        #endif
        return MP_OBJ_NEW_SMALL_INT(p - haystack);
   133ec:	69ba      	ldr	r2, [r7, #24]
   133ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   133f0:	1ad3      	subs	r3, r2, r3
   133f2:	005b      	lsls	r3, r3, #1
   133f4:	f043 0301 	orr.w	r3, r3, #1
    }
}
   133f8:	4618      	mov	r0, r3
   133fa:	3730      	adds	r7, #48	; 0x30
   133fc:	46bd      	mov	sp, r7
   133fe:	bd80      	pop	{r7, pc}
   13400:	00012895 	.word	0x00012895
   13404:	000217a8 	.word	0x000217a8
   13408:	00021c9c 	.word	0x00021c9c
   1340c:	0002170c 	.word	0x0002170c
   13410:	00021534 	.word	0x00021534
   13414:	00021830 	.word	0x00021830

00013418 <str_find>:

STATIC mp_obj_t str_find(size_t n_args, const mp_obj_t *args) {
   13418:	b580      	push	{r7, lr}
   1341a:	b082      	sub	sp, #8
   1341c:	af00      	add	r7, sp, #0
   1341e:	6078      	str	r0, [r7, #4]
   13420:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, 1, false);
   13422:	2300      	movs	r3, #0
   13424:	2201      	movs	r2, #1
   13426:	6839      	ldr	r1, [r7, #0]
   13428:	6878      	ldr	r0, [r7, #4]
   1342a:	f7ff ff15 	bl	13258 <str_finder>
   1342e:	4603      	mov	r3, r0
}
   13430:	4618      	mov	r0, r3
   13432:	3708      	adds	r7, #8
   13434:	46bd      	mov	sp, r7
   13436:	bd80      	pop	{r7, pc}

00013438 <str_rfind>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_find_obj, 2, 4, str_find);

STATIC mp_obj_t str_rfind(size_t n_args, const mp_obj_t *args) {
   13438:	b580      	push	{r7, lr}
   1343a:	b082      	sub	sp, #8
   1343c:	af00      	add	r7, sp, #0
   1343e:	6078      	str	r0, [r7, #4]
   13440:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, -1, false);
   13442:	2300      	movs	r3, #0
   13444:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13448:	6839      	ldr	r1, [r7, #0]
   1344a:	6878      	ldr	r0, [r7, #4]
   1344c:	f7ff ff04 	bl	13258 <str_finder>
   13450:	4603      	mov	r3, r0
}
   13452:	4618      	mov	r0, r3
   13454:	3708      	adds	r7, #8
   13456:	46bd      	mov	sp, r7
   13458:	bd80      	pop	{r7, pc}
   1345a:	bf00      	nop

0001345c <str_index>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_rfind_obj, 2, 4, str_rfind);

STATIC mp_obj_t str_index(size_t n_args, const mp_obj_t *args) {
   1345c:	b580      	push	{r7, lr}
   1345e:	b082      	sub	sp, #8
   13460:	af00      	add	r7, sp, #0
   13462:	6078      	str	r0, [r7, #4]
   13464:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, 1, true);
   13466:	2301      	movs	r3, #1
   13468:	2201      	movs	r2, #1
   1346a:	6839      	ldr	r1, [r7, #0]
   1346c:	6878      	ldr	r0, [r7, #4]
   1346e:	f7ff fef3 	bl	13258 <str_finder>
   13472:	4603      	mov	r3, r0
}
   13474:	4618      	mov	r0, r3
   13476:	3708      	adds	r7, #8
   13478:	46bd      	mov	sp, r7
   1347a:	bd80      	pop	{r7, pc}

0001347c <str_rindex>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_index_obj, 2, 4, str_index);

STATIC mp_obj_t str_rindex(size_t n_args, const mp_obj_t *args) {
   1347c:	b580      	push	{r7, lr}
   1347e:	b082      	sub	sp, #8
   13480:	af00      	add	r7, sp, #0
   13482:	6078      	str	r0, [r7, #4]
   13484:	6039      	str	r1, [r7, #0]
    return str_finder(n_args, args, -1, true);
   13486:	2301      	movs	r3, #1
   13488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1348c:	6839      	ldr	r1, [r7, #0]
   1348e:	6878      	ldr	r0, [r7, #4]
   13490:	f7ff fee2 	bl	13258 <str_finder>
   13494:	4603      	mov	r3, r0
}
   13496:	4618      	mov	r0, r3
   13498:	3708      	adds	r7, #8
   1349a:	46bd      	mov	sp, r7
   1349c:	bd80      	pop	{r7, pc}
   1349e:	bf00      	nop

000134a0 <str_startswith>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_rindex_obj, 2, 4, str_rindex);

// TODO: (Much) more variety in args
STATIC mp_obj_t str_startswith(size_t n_args, const mp_obj_t *args) {
   134a0:	b580      	push	{r7, lr}
   134a2:	b08a      	sub	sp, #40	; 0x28
   134a4:	af02      	add	r7, sp, #8
   134a6:	6078      	str	r0, [r7, #4]
   134a8:	6039      	str	r1, [r7, #0]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   134aa:	683b      	ldr	r3, [r7, #0]
   134ac:	681b      	ldr	r3, [r3, #0]
   134ae:	4618      	mov	r0, r3
   134b0:	f7fa f9b0 	bl	d814 <mp_obj_get_type>
   134b4:	6178      	str	r0, [r7, #20]
    GET_STR_DATA_LEN(args[0], str, str_len);
   134b6:	683b      	ldr	r3, [r7, #0]
   134b8:	681b      	ldr	r3, [r3, #0]
   134ba:	4618      	mov	r0, r3
   134bc:	f7fe feb0 	bl	12220 <MP_OBJ_IS_QSTR>
   134c0:	4603      	mov	r3, r0
   134c2:	2b00      	cmp	r3, #0
   134c4:	d00a      	beq.n	134dc <str_startswith+0x3c>
   134c6:	683b      	ldr	r3, [r7, #0]
   134c8:	681b      	ldr	r3, [r3, #0]
   134ca:	089b      	lsrs	r3, r3, #2
   134cc:	f107 020c 	add.w	r2, r7, #12
   134d0:	4611      	mov	r1, r2
   134d2:	4618      	mov	r0, r3
   134d4:	f7ed fe9c 	bl	1210 <qstr_data>
   134d8:	61f8      	str	r0, [r7, #28]
   134da:	e007      	b.n	134ec <str_startswith+0x4c>
   134dc:	683b      	ldr	r3, [r7, #0]
   134de:	681b      	ldr	r3, [r3, #0]
   134e0:	689b      	ldr	r3, [r3, #8]
   134e2:	60fb      	str	r3, [r7, #12]
   134e4:	683b      	ldr	r3, [r7, #0]
   134e6:	681b      	ldr	r3, [r3, #0]
   134e8:	68db      	ldr	r3, [r3, #12]
   134ea:	61fb      	str	r3, [r7, #28]
    size_t prefix_len;
    const char *prefix = mp_obj_str_get_data(args[1], &prefix_len);
   134ec:	683b      	ldr	r3, [r7, #0]
   134ee:	3304      	adds	r3, #4
   134f0:	681b      	ldr	r3, [r3, #0]
   134f2:	f107 0208 	add.w	r2, r7, #8
   134f6:	4611      	mov	r1, r2
   134f8:	4618      	mov	r0, r3
   134fa:	f002 f8d5 	bl	156a8 <mp_obj_str_get_data>
   134fe:	6138      	str	r0, [r7, #16]
    const byte *start = str;
   13500:	69fb      	ldr	r3, [r7, #28]
   13502:	61bb      	str	r3, [r7, #24]
    if (n_args > 2) {
   13504:	687b      	ldr	r3, [r7, #4]
   13506:	2b02      	cmp	r3, #2
   13508:	d90b      	bls.n	13522 <str_startswith+0x82>
        start = str_index_to_ptr(self_type, str, str_len, args[2], true);
   1350a:	68fa      	ldr	r2, [r7, #12]
   1350c:	683b      	ldr	r3, [r7, #0]
   1350e:	3308      	adds	r3, #8
   13510:	6819      	ldr	r1, [r3, #0]
   13512:	2301      	movs	r3, #1
   13514:	9300      	str	r3, [sp, #0]
   13516:	460b      	mov	r3, r1
   13518:	69f9      	ldr	r1, [r7, #28]
   1351a:	6978      	ldr	r0, [r7, #20]
   1351c:	f7ff fb36 	bl	12b8c <str_index_to_ptr>
   13520:	61b8      	str	r0, [r7, #24]
    }
    if (prefix_len + (start - str) > str_len) {
   13522:	69ba      	ldr	r2, [r7, #24]
   13524:	69fb      	ldr	r3, [r7, #28]
   13526:	1ad3      	subs	r3, r2, r3
   13528:	461a      	mov	r2, r3
   1352a:	68bb      	ldr	r3, [r7, #8]
   1352c:	441a      	add	r2, r3
   1352e:	68fb      	ldr	r3, [r7, #12]
   13530:	429a      	cmp	r2, r3
   13532:	d901      	bls.n	13538 <str_startswith+0x98>
        return mp_const_false;
   13534:	4b0a      	ldr	r3, [pc, #40]	; (13560 <str_startswith+0xc0>)
   13536:	e00f      	b.n	13558 <str_startswith+0xb8>
    }
    return mp_obj_new_bool(memcmp(start, prefix, prefix_len) == 0);
   13538:	68bb      	ldr	r3, [r7, #8]
   1353a:	461a      	mov	r2, r3
   1353c:	6939      	ldr	r1, [r7, #16]
   1353e:	69b8      	ldr	r0, [r7, #24]
   13540:	f008 fda8 	bl	1c094 <memcmp>
   13544:	4603      	mov	r3, r0
   13546:	2b00      	cmp	r3, #0
   13548:	bf0c      	ite	eq
   1354a:	2301      	moveq	r3, #1
   1354c:	2300      	movne	r3, #0
   1354e:	b2db      	uxtb	r3, r3
   13550:	4618      	mov	r0, r3
   13552:	f7fe fe89 	bl	12268 <mp_obj_new_bool>
   13556:	4603      	mov	r3, r0
}
   13558:	4618      	mov	r0, r3
   1355a:	3720      	adds	r7, #32
   1355c:	46bd      	mov	sp, r7
   1355e:	bd80      	pop	{r7, pc}
   13560:	0001fc3c 	.word	0x0001fc3c

00013564 <str_endswith>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_startswith_obj, 2, 3, str_startswith);

STATIC mp_obj_t str_endswith(size_t n_args, const mp_obj_t *args) {
   13564:	b580      	push	{r7, lr}
   13566:	b086      	sub	sp, #24
   13568:	af00      	add	r7, sp, #0
   1356a:	6078      	str	r0, [r7, #4]
   1356c:	6039      	str	r1, [r7, #0]
    GET_STR_DATA_LEN(args[0], str, str_len);
   1356e:	683b      	ldr	r3, [r7, #0]
   13570:	681b      	ldr	r3, [r3, #0]
   13572:	4618      	mov	r0, r3
   13574:	f7fe fe54 	bl	12220 <MP_OBJ_IS_QSTR>
   13578:	4603      	mov	r3, r0
   1357a:	2b00      	cmp	r3, #0
   1357c:	d00a      	beq.n	13594 <str_endswith+0x30>
   1357e:	683b      	ldr	r3, [r7, #0]
   13580:	681b      	ldr	r3, [r3, #0]
   13582:	089b      	lsrs	r3, r3, #2
   13584:	f107 020c 	add.w	r2, r7, #12
   13588:	4611      	mov	r1, r2
   1358a:	4618      	mov	r0, r3
   1358c:	f7ed fe40 	bl	1210 <qstr_data>
   13590:	6178      	str	r0, [r7, #20]
   13592:	e007      	b.n	135a4 <str_endswith+0x40>
   13594:	683b      	ldr	r3, [r7, #0]
   13596:	681b      	ldr	r3, [r3, #0]
   13598:	689b      	ldr	r3, [r3, #8]
   1359a:	60fb      	str	r3, [r7, #12]
   1359c:	683b      	ldr	r3, [r7, #0]
   1359e:	681b      	ldr	r3, [r3, #0]
   135a0:	68db      	ldr	r3, [r3, #12]
   135a2:	617b      	str	r3, [r7, #20]
    size_t suffix_len;
    const char *suffix = mp_obj_str_get_data(args[1], &suffix_len);
   135a4:	683b      	ldr	r3, [r7, #0]
   135a6:	3304      	adds	r3, #4
   135a8:	681b      	ldr	r3, [r3, #0]
   135aa:	f107 0208 	add.w	r2, r7, #8
   135ae:	4611      	mov	r1, r2
   135b0:	4618      	mov	r0, r3
   135b2:	f002 f879 	bl	156a8 <mp_obj_str_get_data>
   135b6:	6138      	str	r0, [r7, #16]
    if (n_args > 2) {
   135b8:	687b      	ldr	r3, [r7, #4]
   135ba:	2b02      	cmp	r3, #2
   135bc:	d902      	bls.n	135c4 <str_endswith+0x60>
        mp_raise_NotImplementedError("start/end indices");
   135be:	4810      	ldr	r0, [pc, #64]	; (13600 <str_endswith+0x9c>)
   135c0:	f7f9 fd2a 	bl	d018 <mp_raise_NotImplementedError>
    }

    if (suffix_len > str_len) {
   135c4:	68ba      	ldr	r2, [r7, #8]
   135c6:	68fb      	ldr	r3, [r7, #12]
   135c8:	429a      	cmp	r2, r3
   135ca:	d901      	bls.n	135d0 <str_endswith+0x6c>
        return mp_const_false;
   135cc:	4b0d      	ldr	r3, [pc, #52]	; (13604 <str_endswith+0xa0>)
   135ce:	e013      	b.n	135f8 <str_endswith+0x94>
    }
    return mp_obj_new_bool(memcmp(str + (str_len - suffix_len), suffix, suffix_len) == 0);
   135d0:	68fa      	ldr	r2, [r7, #12]
   135d2:	68bb      	ldr	r3, [r7, #8]
   135d4:	1ad3      	subs	r3, r2, r3
   135d6:	697a      	ldr	r2, [r7, #20]
   135d8:	4413      	add	r3, r2
   135da:	68ba      	ldr	r2, [r7, #8]
   135dc:	6939      	ldr	r1, [r7, #16]
   135de:	4618      	mov	r0, r3
   135e0:	f008 fd58 	bl	1c094 <memcmp>
   135e4:	4603      	mov	r3, r0
   135e6:	2b00      	cmp	r3, #0
   135e8:	bf0c      	ite	eq
   135ea:	2301      	moveq	r3, #1
   135ec:	2300      	movne	r3, #0
   135ee:	b2db      	uxtb	r3, r3
   135f0:	4618      	mov	r0, r3
   135f2:	f7fe fe39 	bl	12268 <mp_obj_new_bool>
   135f6:	4603      	mov	r3, r0
}
   135f8:	4618      	mov	r0, r3
   135fa:	3718      	adds	r7, #24
   135fc:	46bd      	mov	sp, r7
   135fe:	bd80      	pop	{r7, pc}
   13600:	00021880 	.word	0x00021880
   13604:	0001fc3c 	.word	0x0001fc3c

00013608 <str_uni_strip>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_endswith_obj, 2, 3, str_endswith);

enum { LSTRIP, RSTRIP, STRIP };

STATIC mp_obj_t str_uni_strip(int type, size_t n_args, const mp_obj_t *args) {
   13608:	b580      	push	{r7, lr}
   1360a:	b094      	sub	sp, #80	; 0x50
   1360c:	af02      	add	r7, sp, #8
   1360e:	60f8      	str	r0, [r7, #12]
   13610:	60b9      	str	r1, [r7, #8]
   13612:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   13614:	687b      	ldr	r3, [r7, #4]
   13616:	681b      	ldr	r3, [r3, #0]
   13618:	4618      	mov	r0, r3
   1361a:	f7fe fe01 	bl	12220 <MP_OBJ_IS_QSTR>
   1361e:	4603      	mov	r3, r0
   13620:	f083 0301 	eor.w	r3, r3, #1
   13624:	b2db      	uxtb	r3, r3
   13626:	2b00      	cmp	r3, #0
   13628:	d018      	beq.n	1365c <str_uni_strip+0x54>
   1362a:	687b      	ldr	r3, [r7, #4]
   1362c:	681b      	ldr	r3, [r3, #0]
   1362e:	4618      	mov	r0, r3
   13630:	f7fe fe08 	bl	12244 <MP_OBJ_IS_OBJ>
   13634:	4603      	mov	r3, r0
   13636:	f083 0301 	eor.w	r3, r3, #1
   1363a:	b2db      	uxtb	r3, r3
   1363c:	2b00      	cmp	r3, #0
   1363e:	d106      	bne.n	1364e <str_uni_strip+0x46>
   13640:	687b      	ldr	r3, [r7, #4]
   13642:	681b      	ldr	r3, [r3, #0]
   13644:	681b      	ldr	r3, [r3, #0]
   13646:	699b      	ldr	r3, [r3, #24]
   13648:	4a76      	ldr	r2, [pc, #472]	; (13824 <str_uni_strip+0x21c>)
   1364a:	4293      	cmp	r3, r2
   1364c:	d006      	beq.n	1365c <str_uni_strip+0x54>
   1364e:	4b76      	ldr	r3, [pc, #472]	; (13828 <str_uni_strip+0x220>)
   13650:	4a76      	ldr	r2, [pc, #472]	; (1382c <str_uni_strip+0x224>)
   13652:	f240 310d 	movw	r1, #781	; 0x30d
   13656:	4876      	ldr	r0, [pc, #472]	; (13830 <str_uni_strip+0x228>)
   13658:	f007 fe88 	bl	1b36c <__assert_func>
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   1365c:	687b      	ldr	r3, [r7, #4]
   1365e:	681b      	ldr	r3, [r3, #0]
   13660:	4618      	mov	r0, r3
   13662:	f7fa f8d7 	bl	d814 <mp_obj_get_type>
   13666:	61f8      	str	r0, [r7, #28]

    const byte *chars_to_del;
    uint chars_to_del_len;
    static const byte whitespace[] = " \t\n\r\v\f";

    if (n_args == 1) {
   13668:	68bb      	ldr	r3, [r7, #8]
   1366a:	2b01      	cmp	r3, #1
   1366c:	d104      	bne.n	13678 <str_uni_strip+0x70>
        chars_to_del = whitespace;
   1366e:	4b71      	ldr	r3, [pc, #452]	; (13834 <str_uni_strip+0x22c>)
   13670:	647b      	str	r3, [r7, #68]	; 0x44
        chars_to_del_len = sizeof(whitespace) - 1;
   13672:	2306      	movs	r3, #6
   13674:	643b      	str	r3, [r7, #64]	; 0x40
   13676:	e032      	b.n	136de <str_uni_strip+0xd6>
    } else {
        if (mp_obj_get_type(args[1]) != self_type) {
   13678:	687b      	ldr	r3, [r7, #4]
   1367a:	3304      	adds	r3, #4
   1367c:	681b      	ldr	r3, [r3, #0]
   1367e:	4618      	mov	r0, r3
   13680:	f7fa f8c8 	bl	d814 <mp_obj_get_type>
   13684:	4602      	mov	r2, r0
   13686:	69fb      	ldr	r3, [r7, #28]
   13688:	429a      	cmp	r2, r3
   1368a:	d005      	beq.n	13698 <str_uni_strip+0x90>
            bad_implicit_conversion(args[1]);
   1368c:	687b      	ldr	r3, [r7, #4]
   1368e:	3304      	adds	r3, #4
   13690:	681b      	ldr	r3, [r3, #0]
   13692:	4618      	mov	r0, r3
   13694:	f001 ff98 	bl	155c8 <bad_implicit_conversion>
        }
        GET_STR_DATA_LEN(args[1], s, l);
   13698:	687b      	ldr	r3, [r7, #4]
   1369a:	3304      	adds	r3, #4
   1369c:	681b      	ldr	r3, [r3, #0]
   1369e:	4618      	mov	r0, r3
   136a0:	f7fe fdbe 	bl	12220 <MP_OBJ_IS_QSTR>
   136a4:	4603      	mov	r3, r0
   136a6:	2b00      	cmp	r3, #0
   136a8:	d00b      	beq.n	136c2 <str_uni_strip+0xba>
   136aa:	687b      	ldr	r3, [r7, #4]
   136ac:	3304      	adds	r3, #4
   136ae:	681b      	ldr	r3, [r3, #0]
   136b0:	089b      	lsrs	r3, r3, #2
   136b2:	f107 0210 	add.w	r2, r7, #16
   136b6:	4611      	mov	r1, r2
   136b8:	4618      	mov	r0, r3
   136ba:	f7ed fda9 	bl	1210 <qstr_data>
   136be:	63f8      	str	r0, [r7, #60]	; 0x3c
   136c0:	e009      	b.n	136d6 <str_uni_strip+0xce>
   136c2:	687b      	ldr	r3, [r7, #4]
   136c4:	3304      	adds	r3, #4
   136c6:	681b      	ldr	r3, [r3, #0]
   136c8:	689b      	ldr	r3, [r3, #8]
   136ca:	613b      	str	r3, [r7, #16]
   136cc:	687b      	ldr	r3, [r7, #4]
   136ce:	3304      	adds	r3, #4
   136d0:	681b      	ldr	r3, [r3, #0]
   136d2:	68db      	ldr	r3, [r3, #12]
   136d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        chars_to_del = s;
   136d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   136d8:	647b      	str	r3, [r7, #68]	; 0x44
        chars_to_del_len = l;
   136da:	693b      	ldr	r3, [r7, #16]
   136dc:	643b      	str	r3, [r7, #64]	; 0x40
    }

    GET_STR_DATA_LEN(args[0], orig_str, orig_str_len);
   136de:	687b      	ldr	r3, [r7, #4]
   136e0:	681b      	ldr	r3, [r3, #0]
   136e2:	4618      	mov	r0, r3
   136e4:	f7fe fd9c 	bl	12220 <MP_OBJ_IS_QSTR>
   136e8:	4603      	mov	r3, r0
   136ea:	2b00      	cmp	r3, #0
   136ec:	d00a      	beq.n	13704 <str_uni_strip+0xfc>
   136ee:	687b      	ldr	r3, [r7, #4]
   136f0:	681b      	ldr	r3, [r3, #0]
   136f2:	089b      	lsrs	r3, r3, #2
   136f4:	f107 0214 	add.w	r2, r7, #20
   136f8:	4611      	mov	r1, r2
   136fa:	4618      	mov	r0, r3
   136fc:	f7ed fd88 	bl	1210 <qstr_data>
   13700:	63b8      	str	r0, [r7, #56]	; 0x38
   13702:	e007      	b.n	13714 <str_uni_strip+0x10c>
   13704:	687b      	ldr	r3, [r7, #4]
   13706:	681b      	ldr	r3, [r3, #0]
   13708:	689b      	ldr	r3, [r3, #8]
   1370a:	617b      	str	r3, [r7, #20]
   1370c:	687b      	ldr	r3, [r7, #4]
   1370e:	681b      	ldr	r3, [r3, #0]
   13710:	68db      	ldr	r3, [r3, #12]
   13712:	63bb      	str	r3, [r7, #56]	; 0x38

    size_t first_good_char_pos = 0;
   13714:	2300      	movs	r3, #0
   13716:	637b      	str	r3, [r7, #52]	; 0x34
    bool first_good_char_pos_set = false;
   13718:	2300      	movs	r3, #0
   1371a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    size_t last_good_char_pos = 0;
   1371e:	2300      	movs	r3, #0
   13720:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t i = 0;
   13722:	2300      	movs	r3, #0
   13724:	62bb      	str	r3, [r7, #40]	; 0x28
    int delta = 1;
   13726:	2301      	movs	r3, #1
   13728:	627b      	str	r3, [r7, #36]	; 0x24
    if (type == RSTRIP) {
   1372a:	68fb      	ldr	r3, [r7, #12]
   1372c:	2b01      	cmp	r3, #1
   1372e:	d105      	bne.n	1373c <str_uni_strip+0x134>
        i = orig_str_len - 1;
   13730:	697b      	ldr	r3, [r7, #20]
   13732:	3b01      	subs	r3, #1
   13734:	62bb      	str	r3, [r7, #40]	; 0x28
        delta = -1;
   13736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1373a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    for (size_t len = orig_str_len; len > 0; len--) {
   1373c:	697b      	ldr	r3, [r7, #20]
   1373e:	623b      	str	r3, [r7, #32]
   13740:	e030      	b.n	137a4 <str_uni_strip+0x19c>
        if (find_subbytes(chars_to_del, chars_to_del_len, &orig_str[i], 1, 1) == NULL) {
   13742:	6bba      	ldr	r2, [r7, #56]	; 0x38
   13744:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13746:	441a      	add	r2, r3
   13748:	2301      	movs	r3, #1
   1374a:	9300      	str	r3, [sp, #0]
   1374c:	2301      	movs	r3, #1
   1374e:	6c39      	ldr	r1, [r7, #64]	; 0x40
   13750:	6c78      	ldr	r0, [r7, #68]	; 0x44
   13752:	f7ff f865 	bl	12820 <find_subbytes>
   13756:	4603      	mov	r3, r0
   13758:	2b00      	cmp	r3, #0
   1375a:	d11c      	bne.n	13796 <str_uni_strip+0x18e>
            if (!first_good_char_pos_set) {
   1375c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   13760:	f083 0301 	eor.w	r3, r3, #1
   13764:	b2db      	uxtb	r3, r3
   13766:	2b00      	cmp	r3, #0
   13768:	d013      	beq.n	13792 <str_uni_strip+0x18a>
                first_good_char_pos_set = true;
   1376a:	2301      	movs	r3, #1
   1376c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                first_good_char_pos = i;
   13770:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13772:	637b      	str	r3, [r7, #52]	; 0x34
                if (type == LSTRIP) {
   13774:	68fb      	ldr	r3, [r7, #12]
   13776:	2b00      	cmp	r3, #0
   13778:	d103      	bne.n	13782 <str_uni_strip+0x17a>
                    last_good_char_pos = orig_str_len - 1;
   1377a:	697b      	ldr	r3, [r7, #20]
   1377c:	3b01      	subs	r3, #1
   1377e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
   13780:	e013      	b.n	137aa <str_uni_strip+0x1a2>
                } else if (type == RSTRIP) {
   13782:	68fb      	ldr	r3, [r7, #12]
   13784:	2b01      	cmp	r3, #1
   13786:	d104      	bne.n	13792 <str_uni_strip+0x18a>
                    first_good_char_pos = 0;
   13788:	2300      	movs	r3, #0
   1378a:	637b      	str	r3, [r7, #52]	; 0x34
                    last_good_char_pos = i;
   1378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1378e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
   13790:	e00b      	b.n	137aa <str_uni_strip+0x1a2>
                }
            }
            last_good_char_pos = i;
   13792:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13794:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        i += delta;
   13796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13798:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1379a:	4413      	add	r3, r2
   1379c:	62bb      	str	r3, [r7, #40]	; 0x28
    for (size_t len = orig_str_len; len > 0; len--) {
   1379e:	6a3b      	ldr	r3, [r7, #32]
   137a0:	3b01      	subs	r3, #1
   137a2:	623b      	str	r3, [r7, #32]
   137a4:	6a3b      	ldr	r3, [r7, #32]
   137a6:	2b00      	cmp	r3, #0
   137a8:	d1cb      	bne.n	13742 <str_uni_strip+0x13a>
    }

    if (!first_good_char_pos_set) {
   137aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   137ae:	f083 0301 	eor.w	r3, r3, #1
   137b2:	b2db      	uxtb	r3, r3
   137b4:	2b00      	cmp	r3, #0
   137b6:	d007      	beq.n	137c8 <str_uni_strip+0x1c0>
        // string is all whitespace, return ''
        if (self_type == &mp_type_str) {
   137b8:	69fb      	ldr	r3, [r7, #28]
   137ba:	4a1f      	ldr	r2, [pc, #124]	; (13838 <str_uni_strip+0x230>)
   137bc:	4293      	cmp	r3, r2
   137be:	d101      	bne.n	137c4 <str_uni_strip+0x1bc>
            return MP_OBJ_NEW_QSTR(MP_QSTR_);
   137c0:	2306      	movs	r3, #6
   137c2:	e02b      	b.n	1381c <str_uni_strip+0x214>
        } else {
            return mp_const_empty_bytes;
   137c4:	4b1d      	ldr	r3, [pc, #116]	; (1383c <str_uni_strip+0x234>)
   137c6:	e029      	b.n	1381c <str_uni_strip+0x214>
        }
    }

    assert(last_good_char_pos >= first_good_char_pos);
   137c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   137ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   137cc:	429a      	cmp	r2, r3
   137ce:	d206      	bcs.n	137de <str_uni_strip+0x1d6>
   137d0:	4b1b      	ldr	r3, [pc, #108]	; (13840 <str_uni_strip+0x238>)
   137d2:	4a16      	ldr	r2, [pc, #88]	; (1382c <str_uni_strip+0x224>)
   137d4:	f240 3147 	movw	r1, #839	; 0x347
   137d8:	4815      	ldr	r0, [pc, #84]	; (13830 <str_uni_strip+0x228>)
   137da:	f007 fdc7 	bl	1b36c <__assert_func>
    //+1 to accommodate the last character
    size_t stripped_len = last_good_char_pos - first_good_char_pos + 1;
   137de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   137e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   137e2:	1ad3      	subs	r3, r2, r3
   137e4:	3301      	adds	r3, #1
   137e6:	61bb      	str	r3, [r7, #24]
    if (stripped_len == orig_str_len) {
   137e8:	697b      	ldr	r3, [r7, #20]
   137ea:	69ba      	ldr	r2, [r7, #24]
   137ec:	429a      	cmp	r2, r3
   137ee:	d10c      	bne.n	1380a <str_uni_strip+0x202>
        // If nothing was stripped, don't bother to dup original string
        // TODO: watch out for this case when we'll get to bytearray.strip()
        assert(first_good_char_pos == 0);
   137f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   137f2:	2b00      	cmp	r3, #0
   137f4:	d006      	beq.n	13804 <str_uni_strip+0x1fc>
   137f6:	4b13      	ldr	r3, [pc, #76]	; (13844 <str_uni_strip+0x23c>)
   137f8:	4a0c      	ldr	r2, [pc, #48]	; (1382c <str_uni_strip+0x224>)
   137fa:	f240 314d 	movw	r1, #845	; 0x34d
   137fe:	480c      	ldr	r0, [pc, #48]	; (13830 <str_uni_strip+0x228>)
   13800:	f007 fdb4 	bl	1b36c <__assert_func>
        return args[0];
   13804:	687b      	ldr	r3, [r7, #4]
   13806:	681b      	ldr	r3, [r3, #0]
   13808:	e008      	b.n	1381c <str_uni_strip+0x214>
    }
    return mp_obj_new_str_of_type(self_type, orig_str + first_good_char_pos, stripped_len);
   1380a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1380c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1380e:	4413      	add	r3, r2
   13810:	69ba      	ldr	r2, [r7, #24]
   13812:	4619      	mov	r1, r3
   13814:	69f8      	ldr	r0, [r7, #28]
   13816:	f001 fd55 	bl	152c4 <mp_obj_new_str_of_type>
   1381a:	4603      	mov	r3, r0
}
   1381c:	4618      	mov	r0, r3
   1381e:	3748      	adds	r7, #72	; 0x48
   13820:	46bd      	mov	sp, r7
   13822:	bd80      	pop	{r7, pc}
   13824:	00012895 	.word	0x00012895
   13828:	000217a8 	.word	0x000217a8
   1382c:	00021ca8 	.word	0x00021ca8
   13830:	0002170c 	.word	0x0002170c
   13834:	00021cb8 	.word	0x00021cb8
   13838:	00021be4 	.word	0x00021be4
   1383c:	00021c60 	.word	0x00021c60
   13840:	000218a0 	.word	0x000218a0
   13844:	000218cc 	.word	0x000218cc

00013848 <str_strip>:

STATIC mp_obj_t str_strip(size_t n_args, const mp_obj_t *args) {
   13848:	b580      	push	{r7, lr}
   1384a:	b082      	sub	sp, #8
   1384c:	af00      	add	r7, sp, #0
   1384e:	6078      	str	r0, [r7, #4]
   13850:	6039      	str	r1, [r7, #0]
    return str_uni_strip(STRIP, n_args, args);
   13852:	683a      	ldr	r2, [r7, #0]
   13854:	6879      	ldr	r1, [r7, #4]
   13856:	2002      	movs	r0, #2
   13858:	f7ff fed6 	bl	13608 <str_uni_strip>
   1385c:	4603      	mov	r3, r0
}
   1385e:	4618      	mov	r0, r3
   13860:	3708      	adds	r7, #8
   13862:	46bd      	mov	sp, r7
   13864:	bd80      	pop	{r7, pc}
   13866:	bf00      	nop

00013868 <str_lstrip>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_strip_obj, 1, 2, str_strip);

STATIC mp_obj_t str_lstrip(size_t n_args, const mp_obj_t *args) {
   13868:	b580      	push	{r7, lr}
   1386a:	b082      	sub	sp, #8
   1386c:	af00      	add	r7, sp, #0
   1386e:	6078      	str	r0, [r7, #4]
   13870:	6039      	str	r1, [r7, #0]
    return str_uni_strip(LSTRIP, n_args, args);
   13872:	683a      	ldr	r2, [r7, #0]
   13874:	6879      	ldr	r1, [r7, #4]
   13876:	2000      	movs	r0, #0
   13878:	f7ff fec6 	bl	13608 <str_uni_strip>
   1387c:	4603      	mov	r3, r0
}
   1387e:	4618      	mov	r0, r3
   13880:	3708      	adds	r7, #8
   13882:	46bd      	mov	sp, r7
   13884:	bd80      	pop	{r7, pc}
   13886:	bf00      	nop

00013888 <str_rstrip>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_lstrip_obj, 1, 2, str_lstrip);

STATIC mp_obj_t str_rstrip(size_t n_args, const mp_obj_t *args) {
   13888:	b580      	push	{r7, lr}
   1388a:	b082      	sub	sp, #8
   1388c:	af00      	add	r7, sp, #0
   1388e:	6078      	str	r0, [r7, #4]
   13890:	6039      	str	r1, [r7, #0]
    return str_uni_strip(RSTRIP, n_args, args);
   13892:	683a      	ldr	r2, [r7, #0]
   13894:	6879      	ldr	r1, [r7, #4]
   13896:	2001      	movs	r0, #1
   13898:	f7ff feb6 	bl	13608 <str_uni_strip>
   1389c:	4603      	mov	r3, r0
}
   1389e:	4618      	mov	r0, r3
   138a0:	3708      	adds	r7, #8
   138a2:	46bd      	mov	sp, r7
   138a4:	bd80      	pop	{r7, pc}
   138a6:	bf00      	nop

000138a8 <str_to_int>:
MP_DEFINE_CONST_FUN_OBJ_2(str_center_obj, str_center);
#endif

// Takes an int arg, but only parses unsigned numbers, and only changes
// *num if at least one digit was parsed.
STATIC const char *str_to_int(const char *str, const char *top, int *num) {
   138a8:	b480      	push	{r7}
   138aa:	b085      	sub	sp, #20
   138ac:	af00      	add	r7, sp, #0
   138ae:	60f8      	str	r0, [r7, #12]
   138b0:	60b9      	str	r1, [r7, #8]
   138b2:	607a      	str	r2, [r7, #4]
    if (str < top && '0' <= *str && *str <= '9') {
   138b4:	68fa      	ldr	r2, [r7, #12]
   138b6:	68bb      	ldr	r3, [r7, #8]
   138b8:	429a      	cmp	r2, r3
   138ba:	d226      	bcs.n	1390a <str_to_int+0x62>
   138bc:	68fb      	ldr	r3, [r7, #12]
   138be:	781b      	ldrb	r3, [r3, #0]
   138c0:	2b2f      	cmp	r3, #47	; 0x2f
   138c2:	d922      	bls.n	1390a <str_to_int+0x62>
   138c4:	68fb      	ldr	r3, [r7, #12]
   138c6:	781b      	ldrb	r3, [r3, #0]
   138c8:	2b39      	cmp	r3, #57	; 0x39
   138ca:	d81e      	bhi.n	1390a <str_to_int+0x62>
        *num = 0;
   138cc:	687b      	ldr	r3, [r7, #4]
   138ce:	2200      	movs	r2, #0
   138d0:	601a      	str	r2, [r3, #0]
        do {
            *num = *num * 10 + (*str - '0');
   138d2:	687b      	ldr	r3, [r7, #4]
   138d4:	681a      	ldr	r2, [r3, #0]
   138d6:	4613      	mov	r3, r2
   138d8:	009b      	lsls	r3, r3, #2
   138da:	4413      	add	r3, r2
   138dc:	005b      	lsls	r3, r3, #1
   138de:	461a      	mov	r2, r3
   138e0:	68fb      	ldr	r3, [r7, #12]
   138e2:	781b      	ldrb	r3, [r3, #0]
   138e4:	3b30      	subs	r3, #48	; 0x30
   138e6:	441a      	add	r2, r3
   138e8:	687b      	ldr	r3, [r7, #4]
   138ea:	601a      	str	r2, [r3, #0]
            str++;
   138ec:	68fb      	ldr	r3, [r7, #12]
   138ee:	3301      	adds	r3, #1
   138f0:	60fb      	str	r3, [r7, #12]
        }
        while (str < top && '0' <= *str && *str <= '9');
   138f2:	68fa      	ldr	r2, [r7, #12]
   138f4:	68bb      	ldr	r3, [r7, #8]
   138f6:	429a      	cmp	r2, r3
   138f8:	d207      	bcs.n	1390a <str_to_int+0x62>
   138fa:	68fb      	ldr	r3, [r7, #12]
   138fc:	781b      	ldrb	r3, [r3, #0]
   138fe:	2b2f      	cmp	r3, #47	; 0x2f
   13900:	d903      	bls.n	1390a <str_to_int+0x62>
   13902:	68fb      	ldr	r3, [r7, #12]
   13904:	781b      	ldrb	r3, [r3, #0]
   13906:	2b39      	cmp	r3, #57	; 0x39
   13908:	d9e3      	bls.n	138d2 <str_to_int+0x2a>
    }
    return str;
   1390a:	68fb      	ldr	r3, [r7, #12]
}
   1390c:	4618      	mov	r0, r3
   1390e:	3714      	adds	r7, #20
   13910:	46bd      	mov	sp, r7
   13912:	f85d 7b04 	ldr.w	r7, [sp], #4
   13916:	4770      	bx	lr

00013918 <isalignment>:

STATIC bool isalignment(char ch) {
   13918:	b580      	push	{r7, lr}
   1391a:	b082      	sub	sp, #8
   1391c:	af00      	add	r7, sp, #0
   1391e:	4603      	mov	r3, r0
   13920:	71fb      	strb	r3, [r7, #7]
    return ch && strchr("<>=^", ch) != NULL;
   13922:	79fb      	ldrb	r3, [r7, #7]
   13924:	2b00      	cmp	r3, #0
   13926:	d009      	beq.n	1393c <isalignment+0x24>
   13928:	79fb      	ldrb	r3, [r7, #7]
   1392a:	4619      	mov	r1, r3
   1392c:	4807      	ldr	r0, [pc, #28]	; (1394c <isalignment+0x34>)
   1392e:	f008 fcfd 	bl	1c32c <strchr>
   13932:	4603      	mov	r3, r0
   13934:	2b00      	cmp	r3, #0
   13936:	d001      	beq.n	1393c <isalignment+0x24>
   13938:	2301      	movs	r3, #1
   1393a:	e000      	b.n	1393e <isalignment+0x26>
   1393c:	2300      	movs	r3, #0
   1393e:	f003 0301 	and.w	r3, r3, #1
   13942:	b2db      	uxtb	r3, r3
}
   13944:	4618      	mov	r0, r3
   13946:	3708      	adds	r7, #8
   13948:	46bd      	mov	sp, r7
   1394a:	bd80      	pop	{r7, pc}
   1394c:	0002190c 	.word	0x0002190c

00013950 <istype>:

STATIC bool istype(char ch) {
   13950:	b580      	push	{r7, lr}
   13952:	b082      	sub	sp, #8
   13954:	af00      	add	r7, sp, #0
   13956:	4603      	mov	r3, r0
   13958:	71fb      	strb	r3, [r7, #7]
    return ch && strchr("bcdeEfFgGnosxX%", ch) != NULL;
   1395a:	79fb      	ldrb	r3, [r7, #7]
   1395c:	2b00      	cmp	r3, #0
   1395e:	d009      	beq.n	13974 <istype+0x24>
   13960:	79fb      	ldrb	r3, [r7, #7]
   13962:	4619      	mov	r1, r3
   13964:	4807      	ldr	r0, [pc, #28]	; (13984 <istype+0x34>)
   13966:	f008 fce1 	bl	1c32c <strchr>
   1396a:	4603      	mov	r3, r0
   1396c:	2b00      	cmp	r3, #0
   1396e:	d001      	beq.n	13974 <istype+0x24>
   13970:	2301      	movs	r3, #1
   13972:	e000      	b.n	13976 <istype+0x26>
   13974:	2300      	movs	r3, #0
   13976:	f003 0301 	and.w	r3, r3, #1
   1397a:	b2db      	uxtb	r3, r3
}
   1397c:	4618      	mov	r0, r3
   1397e:	3708      	adds	r7, #8
   13980:	46bd      	mov	sp, r7
   13982:	bd80      	pop	{r7, pc}
   13984:	00021914 	.word	0x00021914

00013988 <arg_looks_integer>:

STATIC bool arg_looks_integer(mp_obj_t arg) {
   13988:	b580      	push	{r7, lr}
   1398a:	b082      	sub	sp, #8
   1398c:	af00      	add	r7, sp, #0
   1398e:	6078      	str	r0, [r7, #4]
    return MP_OBJ_IS_TYPE(arg, &mp_type_bool) || MP_OBJ_IS_INT(arg);
   13990:	6878      	ldr	r0, [r7, #4]
   13992:	f7fe fc57 	bl	12244 <MP_OBJ_IS_OBJ>
   13996:	4603      	mov	r3, r0
   13998:	2b00      	cmp	r3, #0
   1399a:	d004      	beq.n	139a6 <arg_looks_integer+0x1e>
   1399c:	687b      	ldr	r3, [r7, #4]
   1399e:	681b      	ldr	r3, [r3, #0]
   139a0:	4a0e      	ldr	r2, [pc, #56]	; (139dc <arg_looks_integer+0x54>)
   139a2:	4293      	cmp	r3, r2
   139a4:	d010      	beq.n	139c8 <arg_looks_integer+0x40>
   139a6:	6878      	ldr	r0, [r7, #4]
   139a8:	f7fe fc28 	bl	121fc <MP_OBJ_IS_SMALL_INT>
   139ac:	4603      	mov	r3, r0
   139ae:	2b00      	cmp	r3, #0
   139b0:	d10a      	bne.n	139c8 <arg_looks_integer+0x40>
   139b2:	6878      	ldr	r0, [r7, #4]
   139b4:	f7fe fc46 	bl	12244 <MP_OBJ_IS_OBJ>
   139b8:	4603      	mov	r3, r0
   139ba:	2b00      	cmp	r3, #0
   139bc:	d006      	beq.n	139cc <arg_looks_integer+0x44>
   139be:	687b      	ldr	r3, [r7, #4]
   139c0:	681b      	ldr	r3, [r3, #0]
   139c2:	4a07      	ldr	r2, [pc, #28]	; (139e0 <arg_looks_integer+0x58>)
   139c4:	4293      	cmp	r3, r2
   139c6:	d101      	bne.n	139cc <arg_looks_integer+0x44>
   139c8:	2301      	movs	r3, #1
   139ca:	e000      	b.n	139ce <arg_looks_integer+0x46>
   139cc:	2300      	movs	r3, #0
   139ce:	f003 0301 	and.w	r3, r3, #1
   139d2:	b2db      	uxtb	r3, r3
}
   139d4:	4618      	mov	r0, r3
   139d6:	3708      	adds	r7, #8
   139d8:	46bd      	mov	sp, r7
   139da:	bd80      	pop	{r7, pc}
   139dc:	0001fc00 	.word	0x0001fc00
   139e0:	00020f90 	.word	0x00020f90

000139e4 <arg_looks_numeric>:

STATIC bool arg_looks_numeric(mp_obj_t arg) {
   139e4:	b580      	push	{r7, lr}
   139e6:	b082      	sub	sp, #8
   139e8:	af00      	add	r7, sp, #0
   139ea:	6078      	str	r0, [r7, #4]
    return arg_looks_integer(arg)
   139ec:	6878      	ldr	r0, [r7, #4]
   139ee:	f7ff ffcb 	bl	13988 <arg_looks_integer>
   139f2:	4603      	mov	r3, r0
#if MICROPY_PY_BUILTINS_FLOAT
        || mp_obj_is_float(arg)
#endif
    ;
}
   139f4:	4618      	mov	r0, r3
   139f6:	3708      	adds	r7, #8
   139f8:	46bd      	mov	sp, r7
   139fa:	bd80      	pop	{r7, pc}

000139fc <arg_as_int>:

STATIC mp_obj_t arg_as_int(mp_obj_t arg) {
   139fc:	b480      	push	{r7}
   139fe:	b083      	sub	sp, #12
   13a00:	af00      	add	r7, sp, #0
   13a02:	6078      	str	r0, [r7, #4]
#if MICROPY_PY_BUILTINS_FLOAT
    if (mp_obj_is_float(arg)) {
        return mp_obj_new_int_from_float(mp_obj_float_get(arg));
    }
#endif
    return arg;
   13a04:	687b      	ldr	r3, [r7, #4]
}
   13a06:	4618      	mov	r0, r3
   13a08:	370c      	adds	r7, #12
   13a0a:	46bd      	mov	sp, r7
   13a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   13a10:	4770      	bx	lr
   13a12:	bf00      	nop

00013a14 <terse_str_format_value_error>:

#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE
STATIC NORETURN void terse_str_format_value_error(void) {
   13a14:	b580      	push	{r7, lr}
   13a16:	af00      	add	r7, sp, #0
    mp_raise_ValueError("bad format string");
   13a18:	4801      	ldr	r0, [pc, #4]	; (13a20 <terse_str_format_value_error+0xc>)
   13a1a:	f7f9 fad7 	bl	cfcc <mp_raise_ValueError>
   13a1e:	bf00      	nop
   13a20:	00021924 	.word	0x00021924

00013a24 <mp_obj_str_format_helper>:
#else
// define to nothing to improve coverage
#define terse_str_format_value_error()
#endif

STATIC vstr_t mp_obj_str_format_helper(const char *str, const char *top, int *arg_i, size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   13a24:	b590      	push	{r4, r7, lr}
   13a26:	b0ad      	sub	sp, #180	; 0xb4
   13a28:	af04      	add	r7, sp, #16
   13a2a:	60f8      	str	r0, [r7, #12]
   13a2c:	60b9      	str	r1, [r7, #8]
   13a2e:	607a      	str	r2, [r7, #4]
   13a30:	603b      	str	r3, [r7, #0]
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
   13a32:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   13a36:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13a3a:	2110      	movs	r1, #16
   13a3c:	4618      	mov	r0, r3
   13a3e:	f7ed fcad 	bl	139c <vstr_init_print>

    for (; str < top; str++) {
   13a42:	f000 bc91 	b.w	14368 <mp_obj_str_format_helper+0x944>
        if (*str == '}') {
   13a46:	68bb      	ldr	r3, [r7, #8]
   13a48:	781b      	ldrb	r3, [r3, #0]
   13a4a:	2b7d      	cmp	r3, #125	; 0x7d
   13a4c:	d114      	bne.n	13a78 <mp_obj_str_format_helper+0x54>
            str++;
   13a4e:	68bb      	ldr	r3, [r7, #8]
   13a50:	3301      	adds	r3, #1
   13a52:	60bb      	str	r3, [r7, #8]
            if (str < top && *str == '}') {
   13a54:	68ba      	ldr	r2, [r7, #8]
   13a56:	687b      	ldr	r3, [r7, #4]
   13a58:	429a      	cmp	r2, r3
   13a5a:	d20b      	bcs.n	13a74 <mp_obj_str_format_helper+0x50>
   13a5c:	68bb      	ldr	r3, [r7, #8]
   13a5e:	781b      	ldrb	r3, [r3, #0]
   13a60:	2b7d      	cmp	r3, #125	; 0x7d
   13a62:	d107      	bne.n	13a74 <mp_obj_str_format_helper+0x50>
                vstr_add_byte(&vstr, '}');
   13a64:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13a68:	217d      	movs	r1, #125	; 0x7d
   13a6a:	4618      	mov	r0, r3
   13a6c:	f7ed fd9e 	bl	15ac <vstr_add_byte>
                continue;
   13a70:	f000 bc77 	b.w	14362 <mp_obj_str_format_helper+0x93e>
            }
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   13a74:	f7ff ffce 	bl	13a14 <terse_str_format_value_error>
            } else {
                mp_raise_ValueError("single '}' encountered in format string");
            }
        }
        if (*str != '{') {
   13a78:	68bb      	ldr	r3, [r7, #8]
   13a7a:	781b      	ldrb	r3, [r3, #0]
   13a7c:	2b7b      	cmp	r3, #123	; 0x7b
   13a7e:	d009      	beq.n	13a94 <mp_obj_str_format_helper+0x70>
            vstr_add_byte(&vstr, *str);
   13a80:	68bb      	ldr	r3, [r7, #8]
   13a82:	781a      	ldrb	r2, [r3, #0]
   13a84:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13a88:	4611      	mov	r1, r2
   13a8a:	4618      	mov	r0, r3
   13a8c:	f7ed fd8e 	bl	15ac <vstr_add_byte>
            continue;
   13a90:	f000 bc67 	b.w	14362 <mp_obj_str_format_helper+0x93e>
        }

        str++;
   13a94:	68bb      	ldr	r3, [r7, #8]
   13a96:	3301      	adds	r3, #1
   13a98:	60bb      	str	r3, [r7, #8]
        if (str < top && *str == '{') {
   13a9a:	68ba      	ldr	r2, [r7, #8]
   13a9c:	687b      	ldr	r3, [r7, #4]
   13a9e:	429a      	cmp	r2, r3
   13aa0:	d20b      	bcs.n	13aba <mp_obj_str_format_helper+0x96>
   13aa2:	68bb      	ldr	r3, [r7, #8]
   13aa4:	781b      	ldrb	r3, [r3, #0]
   13aa6:	2b7b      	cmp	r3, #123	; 0x7b
   13aa8:	d107      	bne.n	13aba <mp_obj_str_format_helper+0x96>
            vstr_add_byte(&vstr, '{');
   13aaa:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13aae:	217b      	movs	r1, #123	; 0x7b
   13ab0:	4618      	mov	r0, r3
   13ab2:	f7ed fd7b 	bl	15ac <vstr_add_byte>
            continue;
   13ab6:	f000 bc54 	b.w	14362 <mp_obj_str_format_helper+0x93e>
        }

        // replacement_field ::=  "{" [field_name] ["!" conversion] [":" format_spec] "}"

        const char *field_name = NULL;
   13aba:	2300      	movs	r3, #0
   13abc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const char *field_name_top = NULL;
   13ac0:	2300      	movs	r3, #0
   13ac2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        char conversion = '\0';
   13ac6:	2300      	movs	r3, #0
   13ac8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        const char *format_spec = NULL;
   13acc:	2300      	movs	r3, #0
   13ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        if (str < top && *str != '}' && *str != '!' && *str != ':') {
   13ad2:	68ba      	ldr	r2, [r7, #8]
   13ad4:	687b      	ldr	r3, [r7, #4]
   13ad6:	429a      	cmp	r2, r3
   13ad8:	d225      	bcs.n	13b26 <mp_obj_str_format_helper+0x102>
   13ada:	68bb      	ldr	r3, [r7, #8]
   13adc:	781b      	ldrb	r3, [r3, #0]
   13ade:	2b7d      	cmp	r3, #125	; 0x7d
   13ae0:	d021      	beq.n	13b26 <mp_obj_str_format_helper+0x102>
   13ae2:	68bb      	ldr	r3, [r7, #8]
   13ae4:	781b      	ldrb	r3, [r3, #0]
   13ae6:	2b21      	cmp	r3, #33	; 0x21
   13ae8:	d01d      	beq.n	13b26 <mp_obj_str_format_helper+0x102>
   13aea:	68bb      	ldr	r3, [r7, #8]
   13aec:	781b      	ldrb	r3, [r3, #0]
   13aee:	2b3a      	cmp	r3, #58	; 0x3a
   13af0:	d019      	beq.n	13b26 <mp_obj_str_format_helper+0x102>
            field_name = (const char *)str;
   13af2:	68bb      	ldr	r3, [r7, #8]
   13af4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            while (str < top && *str != '}' && *str != '!' && *str != ':') {
   13af8:	e002      	b.n	13b00 <mp_obj_str_format_helper+0xdc>
                ++str;
   13afa:	68bb      	ldr	r3, [r7, #8]
   13afc:	3301      	adds	r3, #1
   13afe:	60bb      	str	r3, [r7, #8]
            while (str < top && *str != '}' && *str != '!' && *str != ':') {
   13b00:	68ba      	ldr	r2, [r7, #8]
   13b02:	687b      	ldr	r3, [r7, #4]
   13b04:	429a      	cmp	r2, r3
   13b06:	d20b      	bcs.n	13b20 <mp_obj_str_format_helper+0xfc>
   13b08:	68bb      	ldr	r3, [r7, #8]
   13b0a:	781b      	ldrb	r3, [r3, #0]
   13b0c:	2b7d      	cmp	r3, #125	; 0x7d
   13b0e:	d007      	beq.n	13b20 <mp_obj_str_format_helper+0xfc>
   13b10:	68bb      	ldr	r3, [r7, #8]
   13b12:	781b      	ldrb	r3, [r3, #0]
   13b14:	2b21      	cmp	r3, #33	; 0x21
   13b16:	d003      	beq.n	13b20 <mp_obj_str_format_helper+0xfc>
   13b18:	68bb      	ldr	r3, [r7, #8]
   13b1a:	781b      	ldrb	r3, [r3, #0]
   13b1c:	2b3a      	cmp	r3, #58	; 0x3a
   13b1e:	d1ec      	bne.n	13afa <mp_obj_str_format_helper+0xd6>
            }
            field_name_top = (const char *)str;
   13b20:	68bb      	ldr	r3, [r7, #8]
   13b22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        }

        // conversion ::=  "r" | "s"

        if (str < top && *str == '!') {
   13b26:	68ba      	ldr	r2, [r7, #8]
   13b28:	687b      	ldr	r3, [r7, #4]
   13b2a:	429a      	cmp	r2, r3
   13b2c:	d21b      	bcs.n	13b66 <mp_obj_str_format_helper+0x142>
   13b2e:	68bb      	ldr	r3, [r7, #8]
   13b30:	781b      	ldrb	r3, [r3, #0]
   13b32:	2b21      	cmp	r3, #33	; 0x21
   13b34:	d117      	bne.n	13b66 <mp_obj_str_format_helper+0x142>
            str++;
   13b36:	68bb      	ldr	r3, [r7, #8]
   13b38:	3301      	adds	r3, #1
   13b3a:	60bb      	str	r3, [r7, #8]
            if (str < top && (*str == 'r' || *str == 's')) {
   13b3c:	68ba      	ldr	r2, [r7, #8]
   13b3e:	687b      	ldr	r3, [r7, #4]
   13b40:	429a      	cmp	r2, r3
   13b42:	d20e      	bcs.n	13b62 <mp_obj_str_format_helper+0x13e>
   13b44:	68bb      	ldr	r3, [r7, #8]
   13b46:	781b      	ldrb	r3, [r3, #0]
   13b48:	2b72      	cmp	r3, #114	; 0x72
   13b4a:	d003      	beq.n	13b54 <mp_obj_str_format_helper+0x130>
   13b4c:	68bb      	ldr	r3, [r7, #8]
   13b4e:	781b      	ldrb	r3, [r3, #0]
   13b50:	2b73      	cmp	r3, #115	; 0x73
   13b52:	d106      	bne.n	13b62 <mp_obj_str_format_helper+0x13e>
                conversion = *str++;
   13b54:	68bb      	ldr	r3, [r7, #8]
   13b56:	1c5a      	adds	r2, r3, #1
   13b58:	60ba      	str	r2, [r7, #8]
   13b5a:	781b      	ldrb	r3, [r3, #0]
   13b5c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
   13b60:	e001      	b.n	13b66 <mp_obj_str_format_helper+0x142>
            } else {
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13b62:	f7ff ff57 	bl	13a14 <terse_str_format_value_error>
                    }
                }
            }
        }

        if (str < top && *str == ':') {
   13b66:	68ba      	ldr	r2, [r7, #8]
   13b68:	687b      	ldr	r3, [r7, #4]
   13b6a:	429a      	cmp	r2, r3
   13b6c:	d231      	bcs.n	13bd2 <mp_obj_str_format_helper+0x1ae>
   13b6e:	68bb      	ldr	r3, [r7, #8]
   13b70:	781b      	ldrb	r3, [r3, #0]
   13b72:	2b3a      	cmp	r3, #58	; 0x3a
   13b74:	d12d      	bne.n	13bd2 <mp_obj_str_format_helper+0x1ae>
            str++;
   13b76:	68bb      	ldr	r3, [r7, #8]
   13b78:	3301      	adds	r3, #1
   13b7a:	60bb      	str	r3, [r7, #8]
            // {:} is the same as {}, which is the same as {!s}
            // This makes a difference when passing in a True or False
            // '{}'.format(True) returns 'True'
            // '{:d}'.format(True) returns '1'
            // So we treat {:} as {} and this later gets treated to be {!s}
            if (*str != '}') {
   13b7c:	68bb      	ldr	r3, [r7, #8]
   13b7e:	781b      	ldrb	r3, [r3, #0]
   13b80:	2b7d      	cmp	r3, #125	; 0x7d
   13b82:	d026      	beq.n	13bd2 <mp_obj_str_format_helper+0x1ae>
                format_spec = str;
   13b84:	68bb      	ldr	r3, [r7, #8]
   13b86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                for (int nest = 1; str < top;) {
   13b8a:	2301      	movs	r3, #1
   13b8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   13b90:	e019      	b.n	13bc6 <mp_obj_str_format_helper+0x1a2>
                    if (*str == '{') {
   13b92:	68bb      	ldr	r3, [r7, #8]
   13b94:	781b      	ldrb	r3, [r3, #0]
   13b96:	2b7b      	cmp	r3, #123	; 0x7b
   13b98:	d105      	bne.n	13ba6 <mp_obj_str_format_helper+0x182>
                        ++nest;
   13b9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   13b9e:	3301      	adds	r3, #1
   13ba0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   13ba4:	e00c      	b.n	13bc0 <mp_obj_str_format_helper+0x19c>
                    } else if (*str == '}') {
   13ba6:	68bb      	ldr	r3, [r7, #8]
   13ba8:	781b      	ldrb	r3, [r3, #0]
   13baa:	2b7d      	cmp	r3, #125	; 0x7d
   13bac:	d108      	bne.n	13bc0 <mp_obj_str_format_helper+0x19c>
                        if (--nest == 0) {
   13bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   13bb2:	3b01      	subs	r3, #1
   13bb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   13bb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   13bbc:	2b00      	cmp	r3, #0
   13bbe:	d007      	beq.n	13bd0 <mp_obj_str_format_helper+0x1ac>
                            break;
                        }
                    }
                    ++str;
   13bc0:	68bb      	ldr	r3, [r7, #8]
   13bc2:	3301      	adds	r3, #1
   13bc4:	60bb      	str	r3, [r7, #8]
                for (int nest = 1; str < top;) {
   13bc6:	68ba      	ldr	r2, [r7, #8]
   13bc8:	687b      	ldr	r3, [r7, #4]
   13bca:	429a      	cmp	r2, r3
   13bcc:	d3e1      	bcc.n	13b92 <mp_obj_str_format_helper+0x16e>
   13bce:	e000      	b.n	13bd2 <mp_obj_str_format_helper+0x1ae>
                            break;
   13bd0:	bf00      	nop
                }
            }
        }
        if (str >= top) {
   13bd2:	68ba      	ldr	r2, [r7, #8]
   13bd4:	687b      	ldr	r3, [r7, #4]
   13bd6:	429a      	cmp	r2, r3
   13bd8:	d301      	bcc.n	13bde <mp_obj_str_format_helper+0x1ba>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   13bda:	f7ff ff1b 	bl	13a14 <terse_str_format_value_error>
            } else {
                mp_raise_ValueError("unmatched '{' in format");
            }
        }
        if (*str != '}') {
   13bde:	68bb      	ldr	r3, [r7, #8]
   13be0:	781b      	ldrb	r3, [r3, #0]
   13be2:	2b7d      	cmp	r3, #125	; 0x7d
   13be4:	d001      	beq.n	13bea <mp_obj_str_format_helper+0x1c6>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   13be6:	f7ff ff15 	bl	13a14 <terse_str_format_value_error>
            } else {
                mp_raise_ValueError("expected ':' after format specifier");
            }
        }

        mp_obj_t arg = mp_const_none;
   13bea:	4ba8      	ldr	r3, [pc, #672]	; (13e8c <mp_obj_str_format_helper+0x468>)
   13bec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        if (field_name) {
   13bf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13bf4:	2b00      	cmp	r3, #0
   13bf6:	d07b      	beq.n	13cf0 <mp_obj_str_format_helper+0x2cc>
            int index = 0;
   13bf8:	2300      	movs	r3, #0
   13bfa:	643b      	str	r3, [r7, #64]	; 0x40
            if (MP_LIKELY(unichar_isdigit(*field_name))) {
   13bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13c00:	781b      	ldrb	r3, [r3, #0]
   13c02:	4618      	mov	r0, r3
   13c04:	f7ee fbf8 	bl	23f8 <unichar_isdigit>
   13c08:	4603      	mov	r3, r0
   13c0a:	2b00      	cmp	r3, #0
   13c0c:	d028      	beq.n	13c60 <mp_obj_str_format_helper+0x23c>
                if (*arg_i > 0) {
   13c0e:	683b      	ldr	r3, [r7, #0]
   13c10:	681b      	ldr	r3, [r3, #0]
   13c12:	2b00      	cmp	r3, #0
   13c14:	dd01      	ble.n	13c1a <mp_obj_str_format_helper+0x1f6>
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   13c16:	f7ff fefd 	bl	13a14 <terse_str_format_value_error>
                    } else {
                        mp_raise_ValueError(
                            "can't switch from automatic field numbering to manual field specification");
                    }
                }
                field_name = str_to_int(field_name, field_name_top, &index);
   13c1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
   13c1e:	461a      	mov	r2, r3
   13c20:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
   13c24:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
   13c28:	f7ff fe3e 	bl	138a8 <str_to_int>
   13c2c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                if ((uint)index >= n_args - 1) {
   13c30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   13c34:	3b01      	subs	r3, #1
   13c36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   13c38:	4293      	cmp	r3, r2
   13c3a:	d803      	bhi.n	13c44 <mp_obj_str_format_helper+0x220>
                    mp_raise_msg(&mp_type_IndexError, "tuple index out of range");
   13c3c:	4994      	ldr	r1, [pc, #592]	; (13e90 <mp_obj_str_format_helper+0x46c>)
   13c3e:	4895      	ldr	r0, [pc, #596]	; (13e94 <mp_obj_str_format_helper+0x470>)
   13c40:	f7f9 f9ac 	bl	cf9c <mp_raise_msg>
                }
                arg = args[index + 1];
   13c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13c46:	3301      	adds	r3, #1
   13c48:	009b      	lsls	r3, r3, #2
   13c4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
   13c4e:	4413      	add	r3, r2
   13c50:	681b      	ldr	r3, [r3, #0]
   13c52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                *arg_i = -1;
   13c56:	683b      	ldr	r3, [r7, #0]
   13c58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13c5c:	601a      	str	r2, [r3, #0]
   13c5e:	e03e      	b.n	13cde <mp_obj_str_format_helper+0x2ba>
            } else {
                const char *lookup;
                for (lookup = field_name; lookup < field_name_top && *lookup != '.' && *lookup != '['; lookup++);
   13c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13c64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   13c68:	e004      	b.n	13c74 <mp_obj_str_format_helper+0x250>
   13c6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13c6e:	3301      	adds	r3, #1
   13c70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   13c74:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   13c78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   13c7c:	429a      	cmp	r2, r3
   13c7e:	d209      	bcs.n	13c94 <mp_obj_str_format_helper+0x270>
   13c80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13c84:	781b      	ldrb	r3, [r3, #0]
   13c86:	2b2e      	cmp	r3, #46	; 0x2e
   13c88:	d004      	beq.n	13c94 <mp_obj_str_format_helper+0x270>
   13c8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13c8e:	781b      	ldrb	r3, [r3, #0]
   13c90:	2b5b      	cmp	r3, #91	; 0x5b
   13c92:	d1ea      	bne.n	13c6a <mp_obj_str_format_helper+0x246>
                mp_obj_t field_q = mp_obj_new_str_via_qstr(field_name, lookup - field_name); // should it be via qstr?
   13c94:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   13c98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   13c9c:	1ad3      	subs	r3, r2, r3
   13c9e:	4619      	mov	r1, r3
   13ca0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
   13ca4:	f001 fb2a 	bl	152fc <mp_obj_new_str_via_qstr>
   13ca8:	6738      	str	r0, [r7, #112]	; 0x70
                field_name = lookup;
   13caa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   13cae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                mp_map_elem_t *key_elem = mp_map_lookup(kwargs, field_q, MP_MAP_LOOKUP);
   13cb2:	2200      	movs	r2, #0
   13cb4:	6f39      	ldr	r1, [r7, #112]	; 0x70
   13cb6:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
   13cba:	f7f9 fc01 	bl	d4c0 <mp_map_lookup>
   13cbe:	66f8      	str	r0, [r7, #108]	; 0x6c
                if (key_elem == NULL) {
   13cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   13cc2:	2b00      	cmp	r3, #0
   13cc4:	d107      	bne.n	13cd6 <mp_obj_str_format_helper+0x2b2>
                    nlr_raise(mp_obj_new_exception_arg1(&mp_type_KeyError, field_q));
   13cc6:	6f39      	ldr	r1, [r7, #112]	; 0x70
   13cc8:	4873      	ldr	r0, [pc, #460]	; (13e98 <mp_obj_str_format_helper+0x474>)
   13cca:	f7fb fbf7 	bl	f4bc <mp_obj_new_exception_arg1>
   13cce:	4603      	mov	r3, r0
   13cd0:	4618      	mov	r0, r3
   13cd2:	f7ec fb05 	bl	2e0 <nlr_jump>
                }
                arg = key_elem->value;
   13cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   13cd8:	685b      	ldr	r3, [r3, #4]
   13cda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
            if (field_name < field_name_top) {
   13cde:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   13ce2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   13ce6:	429a      	cmp	r2, r3
   13ce8:	d223      	bcs.n	13d32 <mp_obj_str_format_helper+0x30e>
                mp_raise_NotImplementedError("attributes not supported yet");
   13cea:	486c      	ldr	r0, [pc, #432]	; (13e9c <mp_obj_str_format_helper+0x478>)
   13cec:	f7f9 f994 	bl	d018 <mp_raise_NotImplementedError>
            }
        } else {
            if (*arg_i < 0) {
   13cf0:	683b      	ldr	r3, [r7, #0]
   13cf2:	681b      	ldr	r3, [r3, #0]
   13cf4:	2b00      	cmp	r3, #0
   13cf6:	da01      	bge.n	13cfc <mp_obj_str_format_helper+0x2d8>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13cf8:	f7ff fe8c 	bl	13a14 <terse_str_format_value_error>
                } else {
                    mp_raise_ValueError(
                        "can't switch from manual field specification to automatic field numbering");
                }
            }
            if ((uint)*arg_i >= n_args - 1) {
   13cfc:	683b      	ldr	r3, [r7, #0]
   13cfe:	681b      	ldr	r3, [r3, #0]
   13d00:	461a      	mov	r2, r3
   13d02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   13d06:	3b01      	subs	r3, #1
   13d08:	429a      	cmp	r2, r3
   13d0a:	d303      	bcc.n	13d14 <mp_obj_str_format_helper+0x2f0>
                mp_raise_msg(&mp_type_IndexError, "tuple index out of range");
   13d0c:	4960      	ldr	r1, [pc, #384]	; (13e90 <mp_obj_str_format_helper+0x46c>)
   13d0e:	4861      	ldr	r0, [pc, #388]	; (13e94 <mp_obj_str_format_helper+0x470>)
   13d10:	f7f9 f944 	bl	cf9c <mp_raise_msg>
            }
            arg = args[(*arg_i) + 1];
   13d14:	683b      	ldr	r3, [r7, #0]
   13d16:	681b      	ldr	r3, [r3, #0]
   13d18:	3301      	adds	r3, #1
   13d1a:	009b      	lsls	r3, r3, #2
   13d1c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
   13d20:	4413      	add	r3, r2
   13d22:	681b      	ldr	r3, [r3, #0]
   13d24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            (*arg_i)++;
   13d28:	683b      	ldr	r3, [r7, #0]
   13d2a:	681b      	ldr	r3, [r3, #0]
   13d2c:	1c5a      	adds	r2, r3, #1
   13d2e:	683b      	ldr	r3, [r7, #0]
   13d30:	601a      	str	r2, [r3, #0]
        }
        if (!format_spec && !conversion) {
   13d32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   13d36:	2b00      	cmp	r3, #0
   13d38:	d106      	bne.n	13d48 <mp_obj_str_format_helper+0x324>
   13d3a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   13d3e:	2b00      	cmp	r3, #0
   13d40:	d102      	bne.n	13d48 <mp_obj_str_format_helper+0x324>
            conversion = 's';
   13d42:	2373      	movs	r3, #115	; 0x73
   13d44:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        }
        if (conversion) {
   13d48:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   13d4c:	2b00      	cmp	r3, #0
   13d4e:	d02e      	beq.n	13dae <mp_obj_str_format_helper+0x38a>
            mp_print_kind_t print_kind;
            if (conversion == 's') {
   13d50:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   13d54:	2b73      	cmp	r3, #115	; 0x73
   13d56:	d103      	bne.n	13d60 <mp_obj_str_format_helper+0x33c>
                print_kind = PRINT_STR;
   13d58:	2300      	movs	r3, #0
   13d5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   13d5e:	e00d      	b.n	13d7c <mp_obj_str_format_helper+0x358>
            } else {
                assert(conversion == 'r');
   13d60:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   13d64:	2b72      	cmp	r3, #114	; 0x72
   13d66:	d006      	beq.n	13d76 <mp_obj_str_format_helper+0x352>
   13d68:	4b4d      	ldr	r3, [pc, #308]	; (13ea0 <mp_obj_str_format_helper+0x47c>)
   13d6a:	4a4e      	ldr	r2, [pc, #312]	; (13ea4 <mp_obj_str_format_helper+0x480>)
   13d6c:	f240 4147 	movw	r1, #1095	; 0x447
   13d70:	484d      	ldr	r0, [pc, #308]	; (13ea8 <mp_obj_str_format_helper+0x484>)
   13d72:	f007 fafb 	bl	1b36c <__assert_func>
                print_kind = PRINT_REPR;
   13d76:	2301      	movs	r3, #1
   13d78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }
            vstr_t arg_vstr;
            mp_print_t arg_print;
            vstr_init_print(&arg_vstr, 16, &arg_print);
   13d7c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   13d80:	f107 0330 	add.w	r3, r7, #48	; 0x30
   13d84:	2110      	movs	r1, #16
   13d86:	4618      	mov	r0, r3
   13d88:	f7ed fb08 	bl	139c <vstr_init_print>
            mp_obj_print_helper(&arg_print, arg, print_kind);
   13d8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
   13d90:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   13d94:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   13d98:	4618      	mov	r0, r3
   13d9a:	f7f9 fd6d 	bl	d878 <mp_obj_print_helper>
            arg = mp_obj_new_str_from_vstr(&mp_type_str, &arg_vstr);
   13d9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
   13da2:	4619      	mov	r1, r3
   13da4:	4841      	ldr	r0, [pc, #260]	; (13eac <mp_obj_str_format_helper+0x488>)
   13da6:	f001 fabb 	bl	15320 <mp_obj_new_str_from_vstr>
   13daa:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
        }

        char fill = '\0';
   13dae:	2300      	movs	r3, #0
   13db0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        char align = '\0';
   13db4:	2300      	movs	r3, #0
   13db6:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
        int width = -1;
   13dba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13dbe:	64bb      	str	r3, [r7, #72]	; 0x48
        int precision = -1;
   13dc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13dc4:	647b      	str	r3, [r7, #68]	; 0x44
        char type = '\0';
   13dc6:	2300      	movs	r3, #0
   13dc8:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
        int flags = 0;
   13dcc:	2300      	movs	r3, #0
   13dce:	67bb      	str	r3, [r7, #120]	; 0x78

        if (format_spec) {
   13dd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   13dd4:	2b00      	cmp	r3, #0
   13dd6:	f000 80ce 	beq.w	13f76 <mp_obj_str_format_helper+0x552>
            // precision   ::=  integer
            // type        ::=  "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" | "n" | "o" | "s" | "x" | "X" | "%"

            // recursively call the formatter to format any nested specifiers
            MP_STACK_CHECK();
            vstr_t format_spec_vstr = mp_obj_str_format_helper(format_spec, str, arg_i, n_args, args, kwargs);
   13dda:	f107 0018 	add.w	r0, r7, #24
   13dde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   13de2:	9302      	str	r3, [sp, #8]
   13de4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   13de8:	9301      	str	r3, [sp, #4]
   13dea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   13dee:	9300      	str	r3, [sp, #0]
   13df0:	683b      	ldr	r3, [r7, #0]
   13df2:	68ba      	ldr	r2, [r7, #8]
   13df4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   13df8:	f7ff fe14 	bl	13a24 <mp_obj_str_format_helper>
            const char *s = vstr_null_terminated_str(&format_spec_vstr);
   13dfc:	f107 0318 	add.w	r3, r7, #24
   13e00:	4618      	mov	r0, r3
   13e02:	f7ed fbb7 	bl	1574 <vstr_null_terminated_str>
   13e06:	6778      	str	r0, [r7, #116]	; 0x74
            const char *stop = s + format_spec_vstr.len;
   13e08:	69fb      	ldr	r3, [r7, #28]
   13e0a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   13e0c:	4413      	add	r3, r2
   13e0e:	66bb      	str	r3, [r7, #104]	; 0x68
            if (isalignment(*s)) {
   13e10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13e12:	781b      	ldrb	r3, [r3, #0]
   13e14:	4618      	mov	r0, r3
   13e16:	f7ff fd7f 	bl	13918 <isalignment>
   13e1a:	4603      	mov	r3, r0
   13e1c:	2b00      	cmp	r3, #0
   13e1e:	d006      	beq.n	13e2e <mp_obj_str_format_helper+0x40a>
                align = *s++;
   13e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13e22:	1c5a      	adds	r2, r3, #1
   13e24:	677a      	str	r2, [r7, #116]	; 0x74
   13e26:	781b      	ldrb	r3, [r3, #0]
   13e28:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
   13e2c:	e018      	b.n	13e60 <mp_obj_str_format_helper+0x43c>
            } else if (*s && isalignment(s[1])) {
   13e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13e30:	781b      	ldrb	r3, [r3, #0]
   13e32:	2b00      	cmp	r3, #0
   13e34:	d014      	beq.n	13e60 <mp_obj_str_format_helper+0x43c>
   13e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13e38:	3301      	adds	r3, #1
   13e3a:	781b      	ldrb	r3, [r3, #0]
   13e3c:	4618      	mov	r0, r3
   13e3e:	f7ff fd6b 	bl	13918 <isalignment>
   13e42:	4603      	mov	r3, r0
   13e44:	2b00      	cmp	r3, #0
   13e46:	d00b      	beq.n	13e60 <mp_obj_str_format_helper+0x43c>
                fill = *s++;
   13e48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13e4a:	1c5a      	adds	r2, r3, #1
   13e4c:	677a      	str	r2, [r7, #116]	; 0x74
   13e4e:	781b      	ldrb	r3, [r3, #0]
   13e50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
                align = *s++;
   13e54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13e56:	1c5a      	adds	r2, r3, #1
   13e58:	677a      	str	r2, [r7, #116]	; 0x74
   13e5a:	781b      	ldrb	r3, [r3, #0]
   13e5c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
            }
            if (*s == '+' || *s == '-' || *s == ' ') {
   13e60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13e62:	781b      	ldrb	r3, [r3, #0]
   13e64:	2b2b      	cmp	r3, #43	; 0x2b
   13e66:	d007      	beq.n	13e78 <mp_obj_str_format_helper+0x454>
   13e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13e6a:	781b      	ldrb	r3, [r3, #0]
   13e6c:	2b2d      	cmp	r3, #45	; 0x2d
   13e6e:	d003      	beq.n	13e78 <mp_obj_str_format_helper+0x454>
   13e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13e72:	781b      	ldrb	r3, [r3, #0]
   13e74:	2b20      	cmp	r3, #32
   13e76:	d126      	bne.n	13ec6 <mp_obj_str_format_helper+0x4a2>
                if (*s == '+') {
   13e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13e7a:	781b      	ldrb	r3, [r3, #0]
   13e7c:	2b2b      	cmp	r3, #43	; 0x2b
   13e7e:	d117      	bne.n	13eb0 <mp_obj_str_format_helper+0x48c>
                    flags |= PF_FLAG_SHOW_SIGN;
   13e80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13e82:	f043 0302 	orr.w	r3, r3, #2
   13e86:	67bb      	str	r3, [r7, #120]	; 0x78
   13e88:	e01a      	b.n	13ec0 <mp_obj_str_format_helper+0x49c>
   13e8a:	bf00      	nop
   13e8c:	00021534 	.word	0x00021534
   13e90:	00021938 	.word	0x00021938
   13e94:	00020548 	.word	0x00020548
   13e98:	00020584 	.word	0x00020584
   13e9c:	00021954 	.word	0x00021954
   13ea0:	00021974 	.word	0x00021974
   13ea4:	00021cc0 	.word	0x00021cc0
   13ea8:	0002170c 	.word	0x0002170c
   13eac:	00021be4 	.word	0x00021be4
                } else if (*s == ' ') {
   13eb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13eb2:	781b      	ldrb	r3, [r3, #0]
   13eb4:	2b20      	cmp	r3, #32
   13eb6:	d103      	bne.n	13ec0 <mp_obj_str_format_helper+0x49c>
                    flags |= PF_FLAG_SPACE_SIGN;
   13eb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13eba:	f043 0304 	orr.w	r3, r3, #4
   13ebe:	67bb      	str	r3, [r7, #120]	; 0x78
                }
                s++;
   13ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13ec2:	3301      	adds	r3, #1
   13ec4:	677b      	str	r3, [r7, #116]	; 0x74
            }
            if (*s == '#') {
   13ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13ec8:	781b      	ldrb	r3, [r3, #0]
   13eca:	2b23      	cmp	r3, #35	; 0x23
   13ecc:	d106      	bne.n	13edc <mp_obj_str_format_helper+0x4b8>
                flags |= PF_FLAG_SHOW_PREFIX;
   13ece:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13ed0:	f043 0310 	orr.w	r3, r3, #16
   13ed4:	67bb      	str	r3, [r7, #120]	; 0x78
                s++;
   13ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13ed8:	3301      	adds	r3, #1
   13eda:	677b      	str	r3, [r7, #116]	; 0x74
            }
            if (*s == '0') {
   13edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13ede:	781b      	ldrb	r3, [r3, #0]
   13ee0:	2b30      	cmp	r3, #48	; 0x30
   13ee2:	d10d      	bne.n	13f00 <mp_obj_str_format_helper+0x4dc>
                if (!align) {
   13ee4:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   13ee8:	2b00      	cmp	r3, #0
   13eea:	d102      	bne.n	13ef2 <mp_obj_str_format_helper+0x4ce>
                    align = '=';
   13eec:	233d      	movs	r3, #61	; 0x3d
   13eee:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
                }
                if (!fill) {
   13ef2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   13ef6:	2b00      	cmp	r3, #0
   13ef8:	d102      	bne.n	13f00 <mp_obj_str_format_helper+0x4dc>
                    fill = '0';
   13efa:	2330      	movs	r3, #48	; 0x30
   13efc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
                }
            }
            s = str_to_int(s, stop, &width);
   13f00:	f107 0348 	add.w	r3, r7, #72	; 0x48
   13f04:	461a      	mov	r2, r3
   13f06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   13f08:	6f78      	ldr	r0, [r7, #116]	; 0x74
   13f0a:	f7ff fccd 	bl	138a8 <str_to_int>
   13f0e:	6778      	str	r0, [r7, #116]	; 0x74
            if (*s == ',') {
   13f10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13f12:	781b      	ldrb	r3, [r3, #0]
   13f14:	2b2c      	cmp	r3, #44	; 0x2c
   13f16:	d106      	bne.n	13f26 <mp_obj_str_format_helper+0x502>
                flags |= PF_FLAG_SHOW_COMMA;
   13f18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13f1a:	f043 0320 	orr.w	r3, r3, #32
   13f1e:	67bb      	str	r3, [r7, #120]	; 0x78
                s++;
   13f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13f22:	3301      	adds	r3, #1
   13f24:	677b      	str	r3, [r7, #116]	; 0x74
            }
            if (*s == '.') {
   13f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13f28:	781b      	ldrb	r3, [r3, #0]
   13f2a:	2b2e      	cmp	r3, #46	; 0x2e
   13f2c:	d10a      	bne.n	13f44 <mp_obj_str_format_helper+0x520>
                s++;
   13f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13f30:	3301      	adds	r3, #1
   13f32:	677b      	str	r3, [r7, #116]	; 0x74
                s = str_to_int(s, stop, &precision);
   13f34:	f107 0344 	add.w	r3, r7, #68	; 0x44
   13f38:	461a      	mov	r2, r3
   13f3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   13f3c:	6f78      	ldr	r0, [r7, #116]	; 0x74
   13f3e:	f7ff fcb3 	bl	138a8 <str_to_int>
   13f42:	6778      	str	r0, [r7, #116]	; 0x74
            }
            if (istype(*s)) {
   13f44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13f46:	781b      	ldrb	r3, [r3, #0]
   13f48:	4618      	mov	r0, r3
   13f4a:	f7ff fd01 	bl	13950 <istype>
   13f4e:	4603      	mov	r3, r0
   13f50:	2b00      	cmp	r3, #0
   13f52:	d005      	beq.n	13f60 <mp_obj_str_format_helper+0x53c>
                type = *s++;
   13f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13f56:	1c5a      	adds	r2, r3, #1
   13f58:	677a      	str	r2, [r7, #116]	; 0x74
   13f5a:	781b      	ldrb	r3, [r3, #0]
   13f5c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
            }
            if (*s) {
   13f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13f62:	781b      	ldrb	r3, [r3, #0]
   13f64:	2b00      	cmp	r3, #0
   13f66:	d001      	beq.n	13f6c <mp_obj_str_format_helper+0x548>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13f68:	f7ff fd54 	bl	13a14 <terse_str_format_value_error>
                } else {
                    mp_raise_ValueError("invalid format specifier");
                }
            }
            vstr_clear(&format_spec_vstr);
   13f6c:	f107 0318 	add.w	r3, r7, #24
   13f70:	4618      	mov	r0, r3
   13f72:	f7ed fa29 	bl	13c8 <vstr_clear>
        }
        if (!align) {
   13f76:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   13f7a:	2b00      	cmp	r3, #0
   13f7c:	d10d      	bne.n	13f9a <mp_obj_str_format_helper+0x576>
            if (arg_looks_numeric(arg)) {
   13f7e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   13f82:	f7ff fd2f 	bl	139e4 <arg_looks_numeric>
   13f86:	4603      	mov	r3, r0
   13f88:	2b00      	cmp	r3, #0
   13f8a:	d003      	beq.n	13f94 <mp_obj_str_format_helper+0x570>
                align = '>';
   13f8c:	233e      	movs	r3, #62	; 0x3e
   13f8e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
   13f92:	e002      	b.n	13f9a <mp_obj_str_format_helper+0x576>
            } else {
                align = '<';
   13f94:	233c      	movs	r3, #60	; 0x3c
   13f96:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
            }
        }
        if (!fill) {
   13f9a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   13f9e:	2b00      	cmp	r3, #0
   13fa0:	d102      	bne.n	13fa8 <mp_obj_str_format_helper+0x584>
            fill = ' ';
   13fa2:	2320      	movs	r3, #32
   13fa4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        }

        if (flags & (PF_FLAG_SHOW_SIGN | PF_FLAG_SPACE_SIGN)) {
   13fa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13faa:	f003 0306 	and.w	r3, r3, #6
   13fae:	2b00      	cmp	r3, #0
   13fb0:	d00b      	beq.n	13fca <mp_obj_str_format_helper+0x5a6>
            if (type == 's') {
   13fb2:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   13fb6:	2b73      	cmp	r3, #115	; 0x73
   13fb8:	d101      	bne.n	13fbe <mp_obj_str_format_helper+0x59a>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13fba:	f7ff fd2b 	bl	13a14 <terse_str_format_value_error>
                } else {
                    mp_raise_ValueError("sign not allowed in string format specifier");
                }
            }
            if (type == 'c') {
   13fbe:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   13fc2:	2b63      	cmp	r3, #99	; 0x63
   13fc4:	d101      	bne.n	13fca <mp_obj_str_format_helper+0x5a6>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   13fc6:	f7ff fd25 	bl	13a14 <terse_str_format_value_error>
                        "sign not allowed with integer format specifier 'c'");
                }
            }
        }

        switch (align) {
   13fca:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   13fce:	2b3d      	cmp	r3, #61	; 0x3d
   13fd0:	d008      	beq.n	13fe4 <mp_obj_str_format_helper+0x5c0>
   13fd2:	2b5e      	cmp	r3, #94	; 0x5e
   13fd4:	d00b      	beq.n	13fee <mp_obj_str_format_helper+0x5ca>
   13fd6:	2b3c      	cmp	r3, #60	; 0x3c
   13fd8:	d10e      	bne.n	13ff8 <mp_obj_str_format_helper+0x5d4>
            case '<': flags |= PF_FLAG_LEFT_ADJUST;     break;
   13fda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13fdc:	f043 0301 	orr.w	r3, r3, #1
   13fe0:	67bb      	str	r3, [r7, #120]	; 0x78
   13fe2:	e009      	b.n	13ff8 <mp_obj_str_format_helper+0x5d4>
            case '=': flags |= PF_FLAG_PAD_AFTER_SIGN;  break;
   13fe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13fea:	67bb      	str	r3, [r7, #120]	; 0x78
   13fec:	e004      	b.n	13ff8 <mp_obj_str_format_helper+0x5d4>
            case '^': flags |= PF_FLAG_CENTER_ADJUST;   break;
   13fee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   13ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13ff4:	67bb      	str	r3, [r7, #120]	; 0x78
   13ff6:	bf00      	nop
        }

        if (arg_looks_integer(arg)) {
   13ff8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   13ffc:	f7ff fcc4 	bl	13988 <arg_looks_integer>
   14000:	4603      	mov	r3, r0
   14002:	2b00      	cmp	r3, #0
   14004:	f000 8167 	beq.w	142d6 <mp_obj_str_format_helper+0x8b2>
            switch (type) {
   14008:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   1400c:	2b78      	cmp	r3, #120	; 0x78
   1400e:	f200 815f 	bhi.w	142d0 <mp_obj_str_format_helper+0x8ac>
   14012:	a201      	add	r2, pc, #4	; (adr r2, 14018 <mp_obj_str_format_helper+0x5f4>)
   14014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14018:	0001424b 	.word	0x0001424b
   1401c:	000142d1 	.word	0x000142d1
   14020:	000142d1 	.word	0x000142d1
   14024:	000142d1 	.word	0x000142d1
   14028:	000142d1 	.word	0x000142d1
   1402c:	000142d1 	.word	0x000142d1
   14030:	000142d1 	.word	0x000142d1
   14034:	000142d1 	.word	0x000142d1
   14038:	000142d1 	.word	0x000142d1
   1403c:	000142d1 	.word	0x000142d1
   14040:	000142d1 	.word	0x000142d1
   14044:	000142d1 	.word	0x000142d1
   14048:	000142d1 	.word	0x000142d1
   1404c:	000142d1 	.word	0x000142d1
   14050:	000142d1 	.word	0x000142d1
   14054:	000142d1 	.word	0x000142d1
   14058:	000142d1 	.word	0x000142d1
   1405c:	000142d1 	.word	0x000142d1
   14060:	000142d1 	.word	0x000142d1
   14064:	000142d1 	.word	0x000142d1
   14068:	000142d1 	.word	0x000142d1
   1406c:	000142d1 	.word	0x000142d1
   14070:	000142d1 	.word	0x000142d1
   14074:	000142d1 	.word	0x000142d1
   14078:	000142d1 	.word	0x000142d1
   1407c:	000142d1 	.word	0x000142d1
   14080:	000142d1 	.word	0x000142d1
   14084:	000142d1 	.word	0x000142d1
   14088:	000142d1 	.word	0x000142d1
   1408c:	000142d1 	.word	0x000142d1
   14090:	000142d1 	.word	0x000142d1
   14094:	000142d1 	.word	0x000142d1
   14098:	000142d1 	.word	0x000142d1
   1409c:	000142d1 	.word	0x000142d1
   140a0:	000142d1 	.word	0x000142d1
   140a4:	000142d1 	.word	0x000142d1
   140a8:	000142d1 	.word	0x000142d1
   140ac:	000142d5 	.word	0x000142d5
   140b0:	000142d1 	.word	0x000142d1
   140b4:	000142d1 	.word	0x000142d1
   140b8:	000142d1 	.word	0x000142d1
   140bc:	000142d1 	.word	0x000142d1
   140c0:	000142d1 	.word	0x000142d1
   140c4:	000142d1 	.word	0x000142d1
   140c8:	000142d1 	.word	0x000142d1
   140cc:	000142d1 	.word	0x000142d1
   140d0:	000142d1 	.word	0x000142d1
   140d4:	000142d1 	.word	0x000142d1
   140d8:	000142d1 	.word	0x000142d1
   140dc:	000142d1 	.word	0x000142d1
   140e0:	000142d1 	.word	0x000142d1
   140e4:	000142d1 	.word	0x000142d1
   140e8:	000142d1 	.word	0x000142d1
   140ec:	000142d1 	.word	0x000142d1
   140f0:	000142d1 	.word	0x000142d1
   140f4:	000142d1 	.word	0x000142d1
   140f8:	000142d1 	.word	0x000142d1
   140fc:	000142d1 	.word	0x000142d1
   14100:	000142d1 	.word	0x000142d1
   14104:	000142d1 	.word	0x000142d1
   14108:	000142d1 	.word	0x000142d1
   1410c:	000142d1 	.word	0x000142d1
   14110:	000142d1 	.word	0x000142d1
   14114:	000142d1 	.word	0x000142d1
   14118:	000142d1 	.word	0x000142d1
   1411c:	000142d1 	.word	0x000142d1
   14120:	000142d1 	.word	0x000142d1
   14124:	000142d1 	.word	0x000142d1
   14128:	000142d1 	.word	0x000142d1
   1412c:	000142d5 	.word	0x000142d5
   14130:	000142d5 	.word	0x000142d5
   14134:	000142d5 	.word	0x000142d5
   14138:	000142d1 	.word	0x000142d1
   1413c:	000142d1 	.word	0x000142d1
   14140:	000142d1 	.word	0x000142d1
   14144:	000142d1 	.word	0x000142d1
   14148:	000142d1 	.word	0x000142d1
   1414c:	000142d1 	.word	0x000142d1
   14150:	000142d1 	.word	0x000142d1
   14154:	000142d1 	.word	0x000142d1
   14158:	000142d1 	.word	0x000142d1
   1415c:	000142d1 	.word	0x000142d1
   14160:	000142d1 	.word	0x000142d1
   14164:	000142d1 	.word	0x000142d1
   14168:	000142d1 	.word	0x000142d1
   1416c:	000142d1 	.word	0x000142d1
   14170:	000142d1 	.word	0x000142d1
   14174:	000142d1 	.word	0x000142d1
   14178:	000142a5 	.word	0x000142a5
   1417c:	000142d1 	.word	0x000142d1
   14180:	000142d1 	.word	0x000142d1
   14184:	000142d1 	.word	0x000142d1
   14188:	000142d1 	.word	0x000142d1
   1418c:	000142d1 	.word	0x000142d1
   14190:	000142d1 	.word	0x000142d1
   14194:	000142d1 	.word	0x000142d1
   14198:	000142d1 	.word	0x000142d1
   1419c:	000142d1 	.word	0x000142d1
   141a0:	000141fd 	.word	0x000141fd
   141a4:	00014221 	.word	0x00014221
   141a8:	0001424b 	.word	0x0001424b
   141ac:	000142d5 	.word	0x000142d5
   141b0:	000142d5 	.word	0x000142d5
   141b4:	000142d5 	.word	0x000142d5
   141b8:	000142d1 	.word	0x000142d1
   141bc:	000142d1 	.word	0x000142d1
   141c0:	000142d1 	.word	0x000142d1
   141c4:	000142d1 	.word	0x000142d1
   141c8:	000142d1 	.word	0x000142d1
   141cc:	000142d1 	.word	0x000142d1
   141d0:	0001424b 	.word	0x0001424b
   141d4:	0001426f 	.word	0x0001426f
   141d8:	000142d1 	.word	0x000142d1
   141dc:	000142d1 	.word	0x000142d1
   141e0:	000142d1 	.word	0x000142d1
   141e4:	000142d1 	.word	0x000142d1
   141e8:	000142d1 	.word	0x000142d1
   141ec:	000142d1 	.word	0x000142d1
   141f0:	000142d1 	.word	0x000142d1
   141f4:	000142d1 	.word	0x000142d1
   141f8:	000142a5 	.word	0x000142a5
                case 'b':
                    mp_print_mp_int(&print, arg, 2, 'a', flags, fill, width, 0);
   141fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   141fe:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   14202:	2200      	movs	r2, #0
   14204:	9203      	str	r2, [sp, #12]
   14206:	9302      	str	r3, [sp, #8]
   14208:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   1420c:	9301      	str	r3, [sp, #4]
   1420e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14210:	9300      	str	r3, [sp, #0]
   14212:	2361      	movs	r3, #97	; 0x61
   14214:	2202      	movs	r2, #2
   14216:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   1421a:	f7ed fc87 	bl	1b2c <mp_print_mp_int>
                    continue;
   1421e:	e0a0      	b.n	14362 <mp_obj_str_format_helper+0x93e>

                case 'c':
                {
                    char ch = mp_obj_get_int(arg);
   14220:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   14224:	f7f9 fcd4 	bl	dbd0 <mp_obj_get_int>
   14228:	4603      	mov	r3, r0
   1422a:	b2db      	uxtb	r3, r3
   1422c:	75fb      	strb	r3, [r7, #23]
                    mp_print_strn(&print, &ch, 1, flags, fill, width);
   1422e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14230:	f107 0117 	add.w	r1, r7, #23
   14234:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   14238:	9301      	str	r3, [sp, #4]
   1423a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   1423e:	9300      	str	r3, [sp, #0]
   14240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14242:	2201      	movs	r2, #1
   14244:	f7ed fb32 	bl	18ac <mp_print_strn>
   14248:	e08b      	b.n	14362 <mp_obj_str_format_helper+0x93e>
                }

                case '\0':  // No explicit format type implies 'd'
                case 'n':   // I don't think we support locales in uPy so use 'd'
                case 'd':
                    mp_print_mp_int(&print, arg, 10, 'a', flags, fill, width, 0);
   1424a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1424c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   14250:	2200      	movs	r2, #0
   14252:	9203      	str	r2, [sp, #12]
   14254:	9302      	str	r3, [sp, #8]
   14256:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   1425a:	9301      	str	r3, [sp, #4]
   1425c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1425e:	9300      	str	r3, [sp, #0]
   14260:	2361      	movs	r3, #97	; 0x61
   14262:	220a      	movs	r2, #10
   14264:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   14268:	f7ed fc60 	bl	1b2c <mp_print_mp_int>
                    continue;
   1426c:	e079      	b.n	14362 <mp_obj_str_format_helper+0x93e>

                case 'o':
                    if (flags & PF_FLAG_SHOW_PREFIX) {
   1426e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14270:	f003 0310 	and.w	r3, r3, #16
   14274:	2b00      	cmp	r3, #0
   14276:	d003      	beq.n	14280 <mp_obj_str_format_helper+0x85c>
                        flags |= PF_FLAG_SHOW_OCTAL_LETTER;
   14278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1427a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1427e:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    mp_print_mp_int(&print, arg, 8, 'a', flags, fill, width, 0);
   14280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14282:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   14286:	2200      	movs	r2, #0
   14288:	9203      	str	r2, [sp, #12]
   1428a:	9302      	str	r3, [sp, #8]
   1428c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14290:	9301      	str	r3, [sp, #4]
   14292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14294:	9300      	str	r3, [sp, #0]
   14296:	2361      	movs	r3, #97	; 0x61
   14298:	2208      	movs	r2, #8
   1429a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   1429e:	f7ed fc45 	bl	1b2c <mp_print_mp_int>
                    continue;
   142a2:	e05e      	b.n	14362 <mp_obj_str_format_helper+0x93e>

                case 'X':
                case 'x':
                    mp_print_mp_int(&print, arg, 16, type - ('X' - 'A'), flags, fill, width, 0);
   142a4:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   142a8:	f1a3 0117 	sub.w	r1, r3, #23
   142ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   142ae:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   142b2:	2200      	movs	r2, #0
   142b4:	9203      	str	r2, [sp, #12]
   142b6:	9302      	str	r3, [sp, #8]
   142b8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   142bc:	9301      	str	r3, [sp, #4]
   142be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   142c0:	9300      	str	r3, [sp, #0]
   142c2:	460b      	mov	r3, r1
   142c4:	2210      	movs	r2, #16
   142c6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   142ca:	f7ed fc2f 	bl	1b2c <mp_print_mp_int>
                    continue;
   142ce:	e048      	b.n	14362 <mp_obj_str_format_helper+0x93e>
                    // looks like an integer
                    break;

                default:
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   142d0:	f7ff fba0 	bl	13a14 <terse_str_format_value_error>
                    break;
   142d4:	bf00      	nop
            }
        }

        // NOTE: no else here. We need the e, f, g etc formats for integer
        //       arguments (from above if) to take this if.
        if (arg_looks_numeric(arg)) {
   142d6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   142da:	f7ff fb83 	bl	139e4 <arg_looks_numeric>
   142de:	4603      	mov	r3, r0
   142e0:	2b00      	cmp	r3, #0
   142e2:	d00f      	beq.n	14304 <mp_obj_str_format_helper+0x8e0>
            if (!type) {
   142e4:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   142e8:	2b00      	cmp	r3, #0
   142ea:	d102      	bne.n	142f2 <mp_obj_str_format_helper+0x8ce>
                // CPython sources say:
                //   Omitted type specifier.  Behaves in the same way as repr(x)
                //   and str(x) if no precision is given, else like 'g', but with
                //   at least one digit after the decimal point. */

                type = 'g';
   142ec:	2367      	movs	r3, #103	; 0x67
   142ee:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
            }
            if (type == 'n') {
   142f2:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   142f6:	2b6e      	cmp	r3, #110	; 0x6e
   142f8:	d102      	bne.n	14300 <mp_obj_str_format_helper+0x8dc>
                type = 'g';
   142fa:	2367      	movs	r3, #103	; 0x67
   142fc:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
                    break;
#endif

                default:
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   14300:	f7ff fb88 	bl	13a14 <terse_str_format_value_error>
                    }
            }
        } else {
            // arg doesn't look like a number

            if (align == '=') {
   14304:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
   14308:	2b3d      	cmp	r3, #61	; 0x3d
   1430a:	d101      	bne.n	14310 <mp_obj_str_format_helper+0x8ec>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   1430c:	f7ff fb82 	bl	13a14 <terse_str_format_value_error>
                    mp_raise_ValueError(
                        "'=' alignment not allowed in string format specifier");
                }
            }

            switch (type) {
   14310:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
   14314:	2b00      	cmp	r3, #0
   14316:	d001      	beq.n	1431c <mp_obj_str_format_helper+0x8f8>
   14318:	2b73      	cmp	r3, #115	; 0x73
   1431a:	d120      	bne.n	1435e <mp_obj_str_format_helper+0x93a>
                case '\0': // no explicit format type implies 's'
                case 's': {
                    size_t slen;
                    const char *s = mp_obj_str_get_data(arg, &slen);
   1431c:	f107 0310 	add.w	r3, r7, #16
   14320:	4619      	mov	r1, r3
   14322:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   14326:	f001 f9bf 	bl	156a8 <mp_obj_str_get_data>
   1432a:	6678      	str	r0, [r7, #100]	; 0x64
                    if (precision < 0) {
   1432c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1432e:	2b00      	cmp	r3, #0
   14330:	da01      	bge.n	14336 <mp_obj_str_format_helper+0x912>
                        precision = slen;
   14332:	693b      	ldr	r3, [r7, #16]
   14334:	647b      	str	r3, [r7, #68]	; 0x44
                    }
                    if (slen > (size_t)precision) {
   14336:	693b      	ldr	r3, [r7, #16]
   14338:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1433a:	4293      	cmp	r3, r2
   1433c:	d901      	bls.n	14342 <mp_obj_str_format_helper+0x91e>
                        slen = precision;
   1433e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14340:	613b      	str	r3, [r7, #16]
                    }
                    mp_print_strn(&print, s, slen, flags, fill, width);
   14342:	693a      	ldr	r2, [r7, #16]
   14344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14346:	f107 004c 	add.w	r0, r7, #76	; 0x4c
   1434a:	9301      	str	r3, [sp, #4]
   1434c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14350:	9300      	str	r3, [sp, #0]
   14352:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14354:	6e79      	ldr	r1, [r7, #100]	; 0x64
   14356:	f7ed faa9 	bl	18ac <mp_print_strn>
                    break;
   1435a:	bf00      	nop
   1435c:	e001      	b.n	14362 <mp_obj_str_format_helper+0x93e>
                }

                default:
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   1435e:	f7ff fb59 	bl	13a14 <terse_str_format_value_error>
    for (; str < top; str++) {
   14362:	68bb      	ldr	r3, [r7, #8]
   14364:	3301      	adds	r3, #1
   14366:	60bb      	str	r3, [r7, #8]
   14368:	68ba      	ldr	r2, [r7, #8]
   1436a:	687b      	ldr	r3, [r7, #4]
   1436c:	429a      	cmp	r2, r3
   1436e:	f4ff ab6a 	bcc.w	13a46 <mp_obj_str_format_helper+0x22>
                    }
            }
        }
    }

    return vstr;
   14372:	68fb      	ldr	r3, [r7, #12]
   14374:	461c      	mov	r4, r3
   14376:	f107 0354 	add.w	r3, r7, #84	; 0x54
   1437a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1437c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   14380:	68f8      	ldr	r0, [r7, #12]
   14382:	37a4      	adds	r7, #164	; 0xa4
   14384:	46bd      	mov	sp, r7
   14386:	bd90      	pop	{r4, r7, pc}

00014388 <mp_obj_str_format>:

mp_obj_t mp_obj_str_format(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   14388:	b580      	push	{r7, lr}
   1438a:	b090      	sub	sp, #64	; 0x40
   1438c:	af04      	add	r7, sp, #16
   1438e:	60f8      	str	r0, [r7, #12]
   14390:	60b9      	str	r1, [r7, #8]
   14392:	607a      	str	r2, [r7, #4]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   14394:	68bb      	ldr	r3, [r7, #8]
   14396:	681b      	ldr	r3, [r3, #0]
   14398:	4618      	mov	r0, r3
   1439a:	f7fd ff41 	bl	12220 <MP_OBJ_IS_QSTR>
   1439e:	4603      	mov	r3, r0
   143a0:	f083 0301 	eor.w	r3, r3, #1
   143a4:	b2db      	uxtb	r3, r3
   143a6:	2b00      	cmp	r3, #0
   143a8:	d018      	beq.n	143dc <mp_obj_str_format+0x54>
   143aa:	68bb      	ldr	r3, [r7, #8]
   143ac:	681b      	ldr	r3, [r3, #0]
   143ae:	4618      	mov	r0, r3
   143b0:	f7fd ff48 	bl	12244 <MP_OBJ_IS_OBJ>
   143b4:	4603      	mov	r3, r0
   143b6:	f083 0301 	eor.w	r3, r3, #1
   143ba:	b2db      	uxtb	r3, r3
   143bc:	2b00      	cmp	r3, #0
   143be:	d106      	bne.n	143ce <mp_obj_str_format+0x46>
   143c0:	68bb      	ldr	r3, [r7, #8]
   143c2:	681b      	ldr	r3, [r3, #0]
   143c4:	681b      	ldr	r3, [r3, #0]
   143c6:	699b      	ldr	r3, [r3, #24]
   143c8:	4a21      	ldr	r2, [pc, #132]	; (14450 <mp_obj_str_format+0xc8>)
   143ca:	4293      	cmp	r3, r2
   143cc:	d006      	beq.n	143dc <mp_obj_str_format+0x54>
   143ce:	4b21      	ldr	r3, [pc, #132]	; (14454 <mp_obj_str_format+0xcc>)
   143d0:	4a21      	ldr	r2, [pc, #132]	; (14458 <mp_obj_str_format+0xd0>)
   143d2:	f240 5161 	movw	r1, #1377	; 0x561
   143d6:	4821      	ldr	r0, [pc, #132]	; (1445c <mp_obj_str_format+0xd4>)
   143d8:	f006 ffc8 	bl	1b36c <__assert_func>

    GET_STR_DATA_LEN(args[0], str, len);
   143dc:	68bb      	ldr	r3, [r7, #8]
   143de:	681b      	ldr	r3, [r3, #0]
   143e0:	4618      	mov	r0, r3
   143e2:	f7fd ff1d 	bl	12220 <MP_OBJ_IS_QSTR>
   143e6:	4603      	mov	r3, r0
   143e8:	2b00      	cmp	r3, #0
   143ea:	d00a      	beq.n	14402 <mp_obj_str_format+0x7a>
   143ec:	68bb      	ldr	r3, [r7, #8]
   143ee:	681b      	ldr	r3, [r3, #0]
   143f0:	089b      	lsrs	r3, r3, #2
   143f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
   143f6:	4611      	mov	r1, r2
   143f8:	4618      	mov	r0, r3
   143fa:	f7ec ff09 	bl	1210 <qstr_data>
   143fe:	62f8      	str	r0, [r7, #44]	; 0x2c
   14400:	e007      	b.n	14412 <mp_obj_str_format+0x8a>
   14402:	68bb      	ldr	r3, [r7, #8]
   14404:	681b      	ldr	r3, [r3, #0]
   14406:	689b      	ldr	r3, [r3, #8]
   14408:	62bb      	str	r3, [r7, #40]	; 0x28
   1440a:	68bb      	ldr	r3, [r7, #8]
   1440c:	681b      	ldr	r3, [r3, #0]
   1440e:	68db      	ldr	r3, [r3, #12]
   14410:	62fb      	str	r3, [r7, #44]	; 0x2c
    int arg_i = 0;
   14412:	2300      	movs	r3, #0
   14414:	627b      	str	r3, [r7, #36]	; 0x24
    vstr_t vstr = mp_obj_str_format_helper((const char*)str, (const char*)str + len, &arg_i, n_args, args, kwargs);
   14416:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1441a:	441a      	add	r2, r3
   1441c:	f107 0014 	add.w	r0, r7, #20
   14420:	f107 0124 	add.w	r1, r7, #36	; 0x24
   14424:	687b      	ldr	r3, [r7, #4]
   14426:	9302      	str	r3, [sp, #8]
   14428:	68bb      	ldr	r3, [r7, #8]
   1442a:	9301      	str	r3, [sp, #4]
   1442c:	68fb      	ldr	r3, [r7, #12]
   1442e:	9300      	str	r3, [sp, #0]
   14430:	460b      	mov	r3, r1
   14432:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14434:	f7ff faf6 	bl	13a24 <mp_obj_str_format_helper>
    return mp_obj_new_str_from_vstr(&mp_type_str, &vstr);
   14438:	f107 0314 	add.w	r3, r7, #20
   1443c:	4619      	mov	r1, r3
   1443e:	4808      	ldr	r0, [pc, #32]	; (14460 <mp_obj_str_format+0xd8>)
   14440:	f000 ff6e 	bl	15320 <mp_obj_new_str_from_vstr>
   14444:	4603      	mov	r3, r0
}
   14446:	4618      	mov	r0, r3
   14448:	3730      	adds	r7, #48	; 0x30
   1444a:	46bd      	mov	sp, r7
   1444c:	bd80      	pop	{r7, pc}
   1444e:	bf00      	nop
   14450:	00012895 	.word	0x00012895
   14454:	000217a8 	.word	0x000217a8
   14458:	00021cdc 	.word	0x00021cdc
   1445c:	0002170c 	.word	0x0002170c
   14460:	00021be4 	.word	0x00021be4

00014464 <str_modulo_format>:
MP_DEFINE_CONST_FUN_OBJ_KW(str_format_obj, 1, mp_obj_str_format);

STATIC mp_obj_t str_modulo_format(mp_obj_t pattern, size_t n_args, const mp_obj_t *args, mp_obj_t dict) {
   14464:	b590      	push	{r4, r7, lr}
   14466:	b0a9      	sub	sp, #164	; 0xa4
   14468:	af04      	add	r7, sp, #16
   1446a:	60f8      	str	r0, [r7, #12]
   1446c:	60b9      	str	r1, [r7, #8]
   1446e:	607a      	str	r2, [r7, #4]
   14470:	603b      	str	r3, [r7, #0]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(pattern));
   14472:	68f8      	ldr	r0, [r7, #12]
   14474:	f7fd fed4 	bl	12220 <MP_OBJ_IS_QSTR>
   14478:	4603      	mov	r3, r0
   1447a:	f083 0301 	eor.w	r3, r3, #1
   1447e:	b2db      	uxtb	r3, r3
   14480:	2b00      	cmp	r3, #0
   14482:	d015      	beq.n	144b0 <str_modulo_format+0x4c>
   14484:	68f8      	ldr	r0, [r7, #12]
   14486:	f7fd fedd 	bl	12244 <MP_OBJ_IS_OBJ>
   1448a:	4603      	mov	r3, r0
   1448c:	f083 0301 	eor.w	r3, r3, #1
   14490:	b2db      	uxtb	r3, r3
   14492:	2b00      	cmp	r3, #0
   14494:	d105      	bne.n	144a2 <str_modulo_format+0x3e>
   14496:	68fb      	ldr	r3, [r7, #12]
   14498:	681b      	ldr	r3, [r3, #0]
   1449a:	699b      	ldr	r3, [r3, #24]
   1449c:	4ac4      	ldr	r2, [pc, #784]	; (147b0 <str_modulo_format+0x34c>)
   1449e:	4293      	cmp	r3, r2
   144a0:	d006      	beq.n	144b0 <str_modulo_format+0x4c>
   144a2:	4bc4      	ldr	r3, [pc, #784]	; (147b4 <str_modulo_format+0x350>)
   144a4:	4ac4      	ldr	r2, [pc, #784]	; (147b8 <str_modulo_format+0x354>)
   144a6:	f240 516b 	movw	r1, #1387	; 0x56b
   144aa:	48c4      	ldr	r0, [pc, #784]	; (147bc <str_modulo_format+0x358>)
   144ac:	f006 ff5e 	bl	1b36c <__assert_func>

    GET_STR_DATA_LEN(pattern, str, len);
   144b0:	68f8      	ldr	r0, [r7, #12]
   144b2:	f7fd feb5 	bl	12220 <MP_OBJ_IS_QSTR>
   144b6:	4603      	mov	r3, r0
   144b8:	2b00      	cmp	r3, #0
   144ba:	d00a      	beq.n	144d2 <str_modulo_format+0x6e>
   144bc:	68fb      	ldr	r3, [r7, #12]
   144be:	089b      	lsrs	r3, r3, #2
   144c0:	f107 0254 	add.w	r2, r7, #84	; 0x54
   144c4:	4611      	mov	r1, r2
   144c6:	4618      	mov	r0, r3
   144c8:	f7ec fea2 	bl	1210 <qstr_data>
   144cc:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
   144d0:	e006      	b.n	144e0 <str_modulo_format+0x7c>
   144d2:	68fb      	ldr	r3, [r7, #12]
   144d4:	689b      	ldr	r3, [r3, #8]
   144d6:	657b      	str	r3, [r7, #84]	; 0x54
   144d8:	68fb      	ldr	r3, [r7, #12]
   144da:	68db      	ldr	r3, [r3, #12]
   144dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const byte *start_str = str;
   144e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   144e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    bool is_bytes = MP_OBJ_IS_TYPE(pattern, &mp_type_bytes);
   144e6:	68f8      	ldr	r0, [r7, #12]
   144e8:	f7fd feac 	bl	12244 <MP_OBJ_IS_OBJ>
   144ec:	4603      	mov	r3, r0
   144ee:	2b00      	cmp	r3, #0
   144f0:	d006      	beq.n	14500 <str_modulo_format+0x9c>
   144f2:	68fb      	ldr	r3, [r7, #12]
   144f4:	681b      	ldr	r3, [r3, #0]
   144f6:	4ab2      	ldr	r2, [pc, #712]	; (147c0 <str_modulo_format+0x35c>)
   144f8:	4293      	cmp	r3, r2
   144fa:	d101      	bne.n	14500 <str_modulo_format+0x9c>
   144fc:	2301      	movs	r3, #1
   144fe:	e000      	b.n	14502 <str_modulo_format+0x9e>
   14500:	2300      	movs	r3, #0
   14502:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
   14506:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   1450a:	f003 0301 	and.w	r3, r3, #1
   1450e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    size_t arg_i = 0;
   14512:	2300      	movs	r3, #0
   14514:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
   14518:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1451c:	f107 0344 	add.w	r3, r7, #68	; 0x44
   14520:	2110      	movs	r1, #16
   14522:	4618      	mov	r0, r3
   14524:	f7ec ff3a 	bl	139c <vstr_init_print>

    for (const byte *top = str + len; str < top; str++) {
   14528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1452a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1452e:	4413      	add	r3, r2
   14530:	667b      	str	r3, [r7, #100]	; 0x64
   14532:	e296      	b.n	14a62 <str_modulo_format+0x5fe>
        mp_obj_t arg = MP_OBJ_NULL;
   14534:	2300      	movs	r3, #0
   14536:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        if (*str != '%') {
   1453a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1453e:	781b      	ldrb	r3, [r3, #0]
   14540:	2b25      	cmp	r3, #37	; 0x25
   14542:	d009      	beq.n	14558 <str_modulo_format+0xf4>
            vstr_add_byte(&vstr, *str);
   14544:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14548:	781a      	ldrb	r2, [r3, #0]
   1454a:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1454e:	4611      	mov	r1, r2
   14550:	4618      	mov	r0, r3
   14552:	f7ed f82b 	bl	15ac <vstr_add_byte>
            continue;
   14556:	e27f      	b.n	14a58 <str_modulo_format+0x5f4>
        }
        if (++str >= top) {
   14558:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1455c:	3301      	adds	r3, #1
   1455e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14562:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14566:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14568:	429a      	cmp	r2, r3
   1456a:	f080 810d 	bcs.w	14788 <str_modulo_format+0x324>
            goto incomplete_format;
        }
        if (*str == '%') {
   1456e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14572:	781b      	ldrb	r3, [r3, #0]
   14574:	2b25      	cmp	r3, #37	; 0x25
   14576:	d106      	bne.n	14586 <str_modulo_format+0x122>
            vstr_add_byte(&vstr, '%');
   14578:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1457c:	2125      	movs	r1, #37	; 0x25
   1457e:	4618      	mov	r0, r3
   14580:	f7ed f814 	bl	15ac <vstr_add_byte>
            continue;
   14584:	e268      	b.n	14a58 <str_modulo_format+0x5f4>
        }

        // Dictionary value lookup
        if (*str == '(') {
   14586:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1458a:	781b      	ldrb	r3, [r3, #0]
   1458c:	2b28      	cmp	r3, #40	; 0x28
   1458e:	d136      	bne.n	145fe <str_modulo_format+0x19a>
            if (dict == MP_OBJ_NULL) {
   14590:	683b      	ldr	r3, [r7, #0]
   14592:	2b00      	cmp	r3, #0
   14594:	d102      	bne.n	1459c <str_modulo_format+0x138>
                mp_raise_TypeError("format requires a dict");
   14596:	488b      	ldr	r0, [pc, #556]	; (147c4 <str_modulo_format+0x360>)
   14598:	f7f8 fd22 	bl	cfe0 <mp_raise_TypeError>
            }
            arg_i = 1; // we used up the single dict argument
   1459c:	2301      	movs	r3, #1
   1459e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            const byte *key = ++str;
   145a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   145a6:	3301      	adds	r3, #1
   145a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   145ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   145b0:	663b      	str	r3, [r7, #96]	; 0x60
            while (*str != ')') {
   145b2:	e00b      	b.n	145cc <str_modulo_format+0x168>
                if (str >= top) {
   145b4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   145b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   145ba:	429a      	cmp	r2, r3
   145bc:	d301      	bcc.n	145c2 <str_modulo_format+0x15e>
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        terse_str_format_value_error();
   145be:	f7ff fa29 	bl	13a14 <terse_str_format_value_error>
                    } else {
                        mp_raise_ValueError("incomplete format key");
                    }
                }
                ++str;
   145c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   145c6:	3301      	adds	r3, #1
   145c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            while (*str != ')') {
   145cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   145d0:	781b      	ldrb	r3, [r3, #0]
   145d2:	2b29      	cmp	r3, #41	; 0x29
   145d4:	d1ee      	bne.n	145b4 <str_modulo_format+0x150>
            }
            mp_obj_t k_obj = mp_obj_new_str_via_qstr((const char*)key, str - key);
   145d6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   145da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   145dc:	1ad3      	subs	r3, r2, r3
   145de:	4619      	mov	r1, r3
   145e0:	6e38      	ldr	r0, [r7, #96]	; 0x60
   145e2:	f000 fe8b 	bl	152fc <mp_obj_new_str_via_qstr>
   145e6:	65f8      	str	r0, [r7, #92]	; 0x5c
            arg = mp_obj_dict_get(dict, k_obj);
   145e8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   145ea:	6838      	ldr	r0, [r7, #0]
   145ec:	f7fa f8b0 	bl	e750 <mp_obj_dict_get>
   145f0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
            str++;
   145f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   145f8:	3301      	adds	r3, #1
   145fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }

        int flags = 0;
   145fe:	2300      	movs	r3, #0
   14600:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        char fill = ' ';
   14604:	2320      	movs	r3, #32
   14606:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        int alt = 0;
   1460a:	2300      	movs	r3, #0
   1460c:	67bb      	str	r3, [r7, #120]	; 0x78
        while (str < top) {
   1460e:	e03e      	b.n	1468e <str_modulo_format+0x22a>
            if (*str == '-')      flags |= PF_FLAG_LEFT_ADJUST;
   14610:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14614:	781b      	ldrb	r3, [r3, #0]
   14616:	2b2d      	cmp	r3, #45	; 0x2d
   14618:	d106      	bne.n	14628 <str_modulo_format+0x1c4>
   1461a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1461e:	f043 0301 	orr.w	r3, r3, #1
   14622:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   14626:	e02d      	b.n	14684 <str_modulo_format+0x220>
            else if (*str == '+') flags |= PF_FLAG_SHOW_SIGN;
   14628:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1462c:	781b      	ldrb	r3, [r3, #0]
   1462e:	2b2b      	cmp	r3, #43	; 0x2b
   14630:	d106      	bne.n	14640 <str_modulo_format+0x1dc>
   14632:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14636:	f043 0302 	orr.w	r3, r3, #2
   1463a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   1463e:	e021      	b.n	14684 <str_modulo_format+0x220>
            else if (*str == ' ') flags |= PF_FLAG_SPACE_SIGN;
   14640:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14644:	781b      	ldrb	r3, [r3, #0]
   14646:	2b20      	cmp	r3, #32
   14648:	d106      	bne.n	14658 <str_modulo_format+0x1f4>
   1464a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1464e:	f043 0304 	orr.w	r3, r3, #4
   14652:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   14656:	e015      	b.n	14684 <str_modulo_format+0x220>
            else if (*str == '#') alt = PF_FLAG_SHOW_PREFIX;
   14658:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1465c:	781b      	ldrb	r3, [r3, #0]
   1465e:	2b23      	cmp	r3, #35	; 0x23
   14660:	d102      	bne.n	14668 <str_modulo_format+0x204>
   14662:	2310      	movs	r3, #16
   14664:	67bb      	str	r3, [r7, #120]	; 0x78
   14666:	e00d      	b.n	14684 <str_modulo_format+0x220>
            else if (*str == '0') {
   14668:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1466c:	781b      	ldrb	r3, [r3, #0]
   1466e:	2b30      	cmp	r3, #48	; 0x30
   14670:	d113      	bne.n	1469a <str_modulo_format+0x236>
                flags |= PF_FLAG_PAD_AFTER_SIGN;
   14672:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1467a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                fill = '0';
   1467e:	2330      	movs	r3, #48	; 0x30
   14680:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            } else break;
            str++;
   14684:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14688:	3301      	adds	r3, #1
   1468a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        while (str < top) {
   1468e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14692:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14694:	429a      	cmp	r2, r3
   14696:	d3bb      	bcc.n	14610 <str_modulo_format+0x1ac>
   14698:	e000      	b.n	1469c <str_modulo_format+0x238>
            } else break;
   1469a:	bf00      	nop
        }
        // parse width, if it exists
        int width = 0;
   1469c:	2300      	movs	r3, #0
   1469e:	63bb      	str	r3, [r7, #56]	; 0x38
        if (str < top) {
   146a0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   146a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   146a6:	429a      	cmp	r2, r3
   146a8:	d227      	bcs.n	146fa <str_modulo_format+0x296>
            if (*str == '*') {
   146aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   146ae:	781b      	ldrb	r3, [r3, #0]
   146b0:	2b2a      	cmp	r3, #42	; 0x2a
   146b2:	d118      	bne.n	146e6 <str_modulo_format+0x282>
                if (arg_i >= n_args) {
   146b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   146b8:	68bb      	ldr	r3, [r7, #8]
   146ba:	429a      	cmp	r2, r3
   146bc:	d271      	bcs.n	147a2 <str_modulo_format+0x33e>
                    goto not_enough_args;
                }
                width = mp_obj_get_int(args[arg_i++]);
   146be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   146c2:	1c5a      	adds	r2, r3, #1
   146c4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   146c8:	009b      	lsls	r3, r3, #2
   146ca:	687a      	ldr	r2, [r7, #4]
   146cc:	4413      	add	r3, r2
   146ce:	681b      	ldr	r3, [r3, #0]
   146d0:	4618      	mov	r0, r3
   146d2:	f7f9 fa7d 	bl	dbd0 <mp_obj_get_int>
   146d6:	4603      	mov	r3, r0
   146d8:	63bb      	str	r3, [r7, #56]	; 0x38
                str++;
   146da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   146de:	3301      	adds	r3, #1
   146e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   146e4:	e009      	b.n	146fa <str_modulo_format+0x296>
            } else {
                str = (const byte*)str_to_int((const char*)str, (const char*)top, &width);
   146e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
   146ea:	461a      	mov	r2, r3
   146ec:	6e79      	ldr	r1, [r7, #100]	; 0x64
   146ee:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   146f2:	f7ff f8d9 	bl	138a8 <str_to_int>
   146f6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            }
        }
        int prec = -1;
   146fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   146fe:	637b      	str	r3, [r7, #52]	; 0x34
        if (str < top && *str == '.') {
   14700:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14706:	429a      	cmp	r2, r3
   14708:	d238      	bcs.n	1477c <str_modulo_format+0x318>
   1470a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1470e:	781b      	ldrb	r3, [r3, #0]
   14710:	2b2e      	cmp	r3, #46	; 0x2e
   14712:	d133      	bne.n	1477c <str_modulo_format+0x318>
            if (++str < top) {
   14714:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14718:	3301      	adds	r3, #1
   1471a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   1471e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14722:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14724:	429a      	cmp	r2, r3
   14726:	d229      	bcs.n	1477c <str_modulo_format+0x318>
                if (*str == '*') {
   14728:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1472c:	781b      	ldrb	r3, [r3, #0]
   1472e:	2b2a      	cmp	r3, #42	; 0x2a
   14730:	d118      	bne.n	14764 <str_modulo_format+0x300>
                    if (arg_i >= n_args) {
   14732:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   14736:	68bb      	ldr	r3, [r7, #8]
   14738:	429a      	cmp	r2, r3
   1473a:	d234      	bcs.n	147a6 <str_modulo_format+0x342>
                        goto not_enough_args;
                    }
                    prec = mp_obj_get_int(args[arg_i++]);
   1473c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   14740:	1c5a      	adds	r2, r3, #1
   14742:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   14746:	009b      	lsls	r3, r3, #2
   14748:	687a      	ldr	r2, [r7, #4]
   1474a:	4413      	add	r3, r2
   1474c:	681b      	ldr	r3, [r3, #0]
   1474e:	4618      	mov	r0, r3
   14750:	f7f9 fa3e 	bl	dbd0 <mp_obj_get_int>
   14754:	4603      	mov	r3, r0
   14756:	637b      	str	r3, [r7, #52]	; 0x34
                    str++;
   14758:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1475c:	3301      	adds	r3, #1
   1475e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14762:	e00b      	b.n	1477c <str_modulo_format+0x318>
                } else {
                    prec = 0;
   14764:	2300      	movs	r3, #0
   14766:	637b      	str	r3, [r7, #52]	; 0x34
                    str = (const byte*)str_to_int((const char*)str, (const char*)top, &prec);
   14768:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1476c:	461a      	mov	r2, r3
   1476e:	6e79      	ldr	r1, [r7, #100]	; 0x64
   14770:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   14774:	f7ff f898 	bl	138a8 <str_to_int>
   14778:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                }
            }
        }

        if (str >= top) {
   1477c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14782:	429a      	cmp	r2, r3
   14784:	d303      	bcc.n	1478e <str_modulo_format+0x32a>
   14786:	e000      	b.n	1478a <str_modulo_format+0x326>
            goto incomplete_format;
   14788:	bf00      	nop
incomplete_format:
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                terse_str_format_value_error();
   1478a:	f7ff f943 	bl	13a14 <terse_str_format_value_error>
                mp_raise_ValueError("incomplete format");
            }
        }

        // Tuple value lookup
        if (arg == MP_OBJ_NULL) {
   1478e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   14792:	2b00      	cmp	r3, #0
   14794:	d125      	bne.n	147e2 <str_modulo_format+0x37e>
            if (arg_i >= n_args) {
   14796:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   1479a:	68bb      	ldr	r3, [r7, #8]
   1479c:	429a      	cmp	r2, r3
   1479e:	d315      	bcc.n	147cc <str_modulo_format+0x368>
   147a0:	e002      	b.n	147a8 <str_modulo_format+0x344>
                    goto not_enough_args;
   147a2:	bf00      	nop
   147a4:	e000      	b.n	147a8 <str_modulo_format+0x344>
                        goto not_enough_args;
   147a6:	bf00      	nop
not_enough_args:
                mp_raise_TypeError("not enough arguments for format string");
   147a8:	4807      	ldr	r0, [pc, #28]	; (147c8 <str_modulo_format+0x364>)
   147aa:	f7f8 fc19 	bl	cfe0 <mp_raise_TypeError>
   147ae:	bf00      	nop
   147b0:	00012895 	.word	0x00012895
   147b4:	00021994 	.word	0x00021994
   147b8:	00021cf0 	.word	0x00021cf0
   147bc:	0002170c 	.word	0x0002170c
   147c0:	00021c20 	.word	0x00021c20
   147c4:	00021a1c 	.word	0x00021a1c
   147c8:	00021a34 	.word	0x00021a34
            }
            arg = args[arg_i++];
   147cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   147d0:	1c5a      	adds	r2, r3, #1
   147d2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   147d6:	009b      	lsls	r3, r3, #2
   147d8:	687a      	ldr	r2, [r7, #4]
   147da:	4413      	add	r3, r2
   147dc:	681b      	ldr	r3, [r3, #0]
   147de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        }
        switch (*str) {
   147e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   147e6:	781b      	ldrb	r3, [r3, #0]
   147e8:	3b58      	subs	r3, #88	; 0x58
   147ea:	2b20      	cmp	r3, #32
   147ec:	f200 8132 	bhi.w	14a54 <str_modulo_format+0x5f0>
   147f0:	a201      	add	r2, pc, #4	; (adr r2, 147f8 <str_modulo_format+0x394>)
   147f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   147f6:	bf00      	nop
   147f8:	00014a21 	.word	0x00014a21
   147fc:	00014a55 	.word	0x00014a55
   14800:	00014a55 	.word	0x00014a55
   14804:	00014a55 	.word	0x00014a55
   14808:	00014a55 	.word	0x00014a55
   1480c:	00014a55 	.word	0x00014a55
   14810:	00014a55 	.word	0x00014a55
   14814:	00014a55 	.word	0x00014a55
   14818:	00014a55 	.word	0x00014a55
   1481c:	00014a55 	.word	0x00014a55
   14820:	00014a55 	.word	0x00014a55
   14824:	0001487d 	.word	0x0001487d
   14828:	0001491d 	.word	0x0001491d
   1482c:	00014a55 	.word	0x00014a55
   14830:	00014a55 	.word	0x00014a55
   14834:	00014a55 	.word	0x00014a55
   14838:	00014a55 	.word	0x00014a55
   1483c:	0001491d 	.word	0x0001491d
   14840:	00014a55 	.word	0x00014a55
   14844:	00014a55 	.word	0x00014a55
   14848:	00014a55 	.word	0x00014a55
   1484c:	00014a55 	.word	0x00014a55
   14850:	00014a55 	.word	0x00014a55
   14854:	00014949 	.word	0x00014949
   14858:	00014a55 	.word	0x00014a55
   1485c:	00014a55 	.word	0x00014a55
   14860:	00014981 	.word	0x00014981
   14864:	00014981 	.word	0x00014981
   14868:	00014a55 	.word	0x00014a55
   1486c:	0001491d 	.word	0x0001491d
   14870:	00014a55 	.word	0x00014a55
   14874:	00014a55 	.word	0x00014a55
   14878:	00014a21 	.word	0x00014a21
            case 'c':
                if (MP_OBJ_IS_STR(arg)) {
   1487c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14880:	f7fd fcce 	bl	12220 <MP_OBJ_IS_QSTR>
   14884:	4603      	mov	r3, r0
   14886:	2b00      	cmp	r3, #0
   14888:	d10c      	bne.n	148a4 <str_modulo_format+0x440>
   1488a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   1488e:	f7fd fcd9 	bl	12244 <MP_OBJ_IS_OBJ>
   14892:	4603      	mov	r3, r0
   14894:	2b00      	cmp	r3, #0
   14896:	d021      	beq.n	148dc <str_modulo_format+0x478>
   14898:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1489c:	681b      	ldr	r3, [r3, #0]
   1489e:	4a81      	ldr	r2, [pc, #516]	; (14aa4 <str_modulo_format+0x640>)
   148a0:	4293      	cmp	r3, r2
   148a2:	d11b      	bne.n	148dc <str_modulo_format+0x478>
                    size_t slen;
                    const char *s = mp_obj_str_get_data(arg, &slen);
   148a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
   148a8:	4619      	mov	r1, r3
   148aa:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   148ae:	f000 fefb 	bl	156a8 <mp_obj_str_get_data>
   148b2:	65b8      	str	r0, [r7, #88]	; 0x58
                    if (slen != 1) {
   148b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   148b6:	2b01      	cmp	r3, #1
   148b8:	d002      	beq.n	148c0 <str_modulo_format+0x45c>
                        mp_raise_TypeError("%%c requires int or char");
   148ba:	487b      	ldr	r0, [pc, #492]	; (14aa8 <str_modulo_format+0x644>)
   148bc:	f7f8 fb90 	bl	cfe0 <mp_raise_TypeError>
                    }
                    mp_print_strn(&print, s, 1, flags, ' ', width);
   148c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   148c2:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   148c6:	9301      	str	r3, [sp, #4]
   148c8:	2320      	movs	r3, #32
   148ca:	9300      	str	r3, [sp, #0]
   148cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   148d0:	2201      	movs	r2, #1
   148d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
   148d4:	f7ec ffea 	bl	18ac <mp_print_strn>
                if (MP_OBJ_IS_STR(arg)) {
   148d8:	bf00      	nop
                    char ch = mp_obj_get_int(arg);
                    mp_print_strn(&print, &ch, 1, flags, ' ', width);
                } else {
                    mp_raise_TypeError("integer required");
                }
                break;
   148da:	e0bd      	b.n	14a58 <str_modulo_format+0x5f4>
                } else if (arg_looks_integer(arg)) {
   148dc:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   148e0:	f7ff f852 	bl	13988 <arg_looks_integer>
   148e4:	4603      	mov	r3, r0
   148e6:	2b00      	cmp	r3, #0
   148e8:	d015      	beq.n	14916 <str_modulo_format+0x4b2>
                    char ch = mp_obj_get_int(arg);
   148ea:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   148ee:	f7f9 f96f 	bl	dbd0 <mp_obj_get_int>
   148f2:	4603      	mov	r3, r0
   148f4:	b2db      	uxtb	r3, r3
   148f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    mp_print_strn(&print, &ch, 1, flags, ' ', width);
   148fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   148fc:	f107 012f 	add.w	r1, r7, #47	; 0x2f
   14900:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14904:	9301      	str	r3, [sp, #4]
   14906:	2320      	movs	r3, #32
   14908:	9300      	str	r3, [sp, #0]
   1490a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1490e:	2201      	movs	r2, #1
   14910:	f7ec ffcc 	bl	18ac <mp_print_strn>
                break;
   14914:	e0a0      	b.n	14a58 <str_modulo_format+0x5f4>
                    mp_raise_TypeError("integer required");
   14916:	4865      	ldr	r0, [pc, #404]	; (14aac <str_modulo_format+0x648>)
   14918:	f7f8 fb62 	bl	cfe0 <mp_raise_TypeError>

            case 'd':
            case 'i':
            case 'u':
                mp_print_mp_int(&print, arg_as_int(arg), 10, 'a', flags, fill, width, prec);
   1491c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   14920:	f7ff f86c 	bl	139fc <arg_as_int>
   14924:	4601      	mov	r1, r0
   14926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1492a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   1492e:	9203      	str	r2, [sp, #12]
   14930:	9302      	str	r3, [sp, #8]
   14932:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14936:	9301      	str	r3, [sp, #4]
   14938:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1493c:	9300      	str	r3, [sp, #0]
   1493e:	2361      	movs	r3, #97	; 0x61
   14940:	220a      	movs	r2, #10
   14942:	f7ed f8f3 	bl	1b2c <mp_print_mp_int>
                break;
   14946:	e087      	b.n	14a58 <str_modulo_format+0x5f4>
                mp_print_float(&print, mp_obj_get_float(arg), *str, flags, fill, width, prec);
                break;
#endif

            case 'o':
                if (alt) {
   14948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1494a:	2b00      	cmp	r3, #0
   1494c:	d005      	beq.n	1495a <str_modulo_format+0x4f6>
                    flags |= (PF_FLAG_SHOW_PREFIX | PF_FLAG_SHOW_OCTAL_LETTER);
   1494e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14952:	f443 7304 	orr.w	r3, r3, #528	; 0x210
   14956:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                }
                mp_print_mp_int(&print, arg, 8, 'a', flags, fill, width, prec);
   1495a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1495c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1495e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14962:	9203      	str	r2, [sp, #12]
   14964:	9302      	str	r3, [sp, #8]
   14966:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   1496a:	9301      	str	r3, [sp, #4]
   1496c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14970:	9300      	str	r3, [sp, #0]
   14972:	2361      	movs	r3, #97	; 0x61
   14974:	2208      	movs	r2, #8
   14976:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   1497a:	f7ed f8d7 	bl	1b2c <mp_print_mp_int>
                break;
   1497e:	e06b      	b.n	14a58 <str_modulo_format+0x5f4>
            case 'r':
            case 's':
            {
                vstr_t arg_vstr;
                mp_print_t arg_print;
                vstr_init_print(&arg_vstr, 16, &arg_print);
   14980:	f107 0214 	add.w	r2, r7, #20
   14984:	f107 031c 	add.w	r3, r7, #28
   14988:	2110      	movs	r1, #16
   1498a:	4618      	mov	r0, r3
   1498c:	f7ec fd06 	bl	139c <vstr_init_print>
                mp_print_kind_t print_kind = (*str == 'r' ? PRINT_REPR : PRINT_STR);
   14990:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14994:	781b      	ldrb	r3, [r3, #0]
   14996:	2b72      	cmp	r3, #114	; 0x72
   14998:	bf0c      	ite	eq
   1499a:	2301      	moveq	r3, #1
   1499c:	2300      	movne	r3, #0
   1499e:	b2db      	uxtb	r3, r3
   149a0:	677b      	str	r3, [r7, #116]	; 0x74
                if (print_kind == PRINT_STR && is_bytes && MP_OBJ_IS_TYPE(arg, &mp_type_bytes)) {
   149a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   149a4:	2b00      	cmp	r3, #0
   149a6:	d112      	bne.n	149ce <str_modulo_format+0x56a>
   149a8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   149ac:	2b00      	cmp	r3, #0
   149ae:	d00e      	beq.n	149ce <str_modulo_format+0x56a>
   149b0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   149b4:	f7fd fc46 	bl	12244 <MP_OBJ_IS_OBJ>
   149b8:	4603      	mov	r3, r0
   149ba:	2b00      	cmp	r3, #0
   149bc:	d007      	beq.n	149ce <str_modulo_format+0x56a>
   149be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   149c2:	681b      	ldr	r3, [r3, #0]
   149c4:	4a3a      	ldr	r2, [pc, #232]	; (14ab0 <str_modulo_format+0x64c>)
   149c6:	4293      	cmp	r3, r2
   149c8:	d101      	bne.n	149ce <str_modulo_format+0x56a>
                    // If we have something like b"%s" % b"1", bytes arg should be
                    // printed undecorated.
                    print_kind = PRINT_RAW;
   149ca:	2304      	movs	r3, #4
   149cc:	677b      	str	r3, [r7, #116]	; 0x74
                }
                mp_obj_print_helper(&arg_print, arg, print_kind);
   149ce:	f107 0314 	add.w	r3, r7, #20
   149d2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   149d4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   149d8:	4618      	mov	r0, r3
   149da:	f7f8 ff4d 	bl	d878 <mp_obj_print_helper>
                uint vlen = arg_vstr.len;
   149de:	6a3b      	ldr	r3, [r7, #32]
   149e0:	673b      	str	r3, [r7, #112]	; 0x70
                if (prec < 0) {
   149e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   149e4:	2b00      	cmp	r3, #0
   149e6:	da01      	bge.n	149ec <str_modulo_format+0x588>
                    prec = vlen;
   149e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   149ea:	637b      	str	r3, [r7, #52]	; 0x34
                }
                if (vlen > (uint)prec) {
   149ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   149ee:	461a      	mov	r2, r3
   149f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   149f2:	4293      	cmp	r3, r2
   149f4:	d901      	bls.n	149fa <str_modulo_format+0x596>
                    vlen = prec;
   149f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   149f8:	673b      	str	r3, [r7, #112]	; 0x70
                }
                mp_print_strn(&print, arg_vstr.buf, vlen, flags, ' ', width);
   149fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
   149fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   149fe:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14a02:	9301      	str	r3, [sp, #4]
   14a04:	2320      	movs	r3, #32
   14a06:	9300      	str	r3, [sp, #0]
   14a08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14a0c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   14a0e:	f7ec ff4d 	bl	18ac <mp_print_strn>
                vstr_clear(&arg_vstr);
   14a12:	f107 031c 	add.w	r3, r7, #28
   14a16:	4618      	mov	r0, r3
   14a18:	f7ec fcd6 	bl	13c8 <vstr_clear>
                break;
   14a1c:	bf00      	nop
   14a1e:	e01b      	b.n	14a58 <str_modulo_format+0x5f4>
            }

            case 'X':
            case 'x':
                mp_print_mp_int(&print, arg, 16, *str - ('X' - 'A'), flags | alt, fill, width, prec);
   14a20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14a24:	781b      	ldrb	r3, [r3, #0]
   14a26:	f1a3 0417 	sub.w	r4, r3, #23
   14a2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   14a2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14a30:	4313      	orrs	r3, r2
   14a32:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14a34:	6b79      	ldr	r1, [r7, #52]	; 0x34
   14a36:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   14a3a:	9103      	str	r1, [sp, #12]
   14a3c:	9202      	str	r2, [sp, #8]
   14a3e:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
   14a42:	9201      	str	r2, [sp, #4]
   14a44:	9300      	str	r3, [sp, #0]
   14a46:	4623      	mov	r3, r4
   14a48:	2210      	movs	r2, #16
   14a4a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   14a4e:	f7ed f86d 	bl	1b2c <mp_print_mp_int>
                break;
   14a52:	e001      	b.n	14a58 <str_modulo_format+0x5f4>

            default:
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    terse_str_format_value_error();
   14a54:	f7fe ffde 	bl	13a14 <terse_str_format_value_error>
    for (const byte *top = str + len; str < top; str++) {
   14a58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   14a5c:	3301      	adds	r3, #1
   14a5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   14a62:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   14a66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   14a68:	429a      	cmp	r2, r3
   14a6a:	f4ff ad63 	bcc.w	14534 <str_modulo_format+0xd0>
                        *str, *str, str - start_str));
                }
        }
    }

    if (arg_i != n_args) {
   14a6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   14a72:	68bb      	ldr	r3, [r7, #8]
   14a74:	429a      	cmp	r2, r3
   14a76:	d002      	beq.n	14a7e <str_modulo_format+0x61a>
        mp_raise_TypeError("not all arguments converted during string formatting");
   14a78:	480e      	ldr	r0, [pc, #56]	; (14ab4 <str_modulo_format+0x650>)
   14a7a:	f7f8 fab1 	bl	cfe0 <mp_raise_TypeError>
    }

    return mp_obj_new_str_from_vstr(is_bytes ? &mp_type_bytes : &mp_type_str, &vstr);
   14a7e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   14a82:	2b00      	cmp	r3, #0
   14a84:	d001      	beq.n	14a8a <str_modulo_format+0x626>
   14a86:	4b0a      	ldr	r3, [pc, #40]	; (14ab0 <str_modulo_format+0x64c>)
   14a88:	e000      	b.n	14a8c <str_modulo_format+0x628>
   14a8a:	4b06      	ldr	r3, [pc, #24]	; (14aa4 <str_modulo_format+0x640>)
   14a8c:	f107 0244 	add.w	r2, r7, #68	; 0x44
   14a90:	4611      	mov	r1, r2
   14a92:	4618      	mov	r0, r3
   14a94:	f000 fc44 	bl	15320 <mp_obj_new_str_from_vstr>
   14a98:	4603      	mov	r3, r0
}
   14a9a:	4618      	mov	r0, r3
   14a9c:	3794      	adds	r7, #148	; 0x94
   14a9e:	46bd      	mov	sp, r7
   14aa0:	bd90      	pop	{r4, r7, pc}
   14aa2:	bf00      	nop
   14aa4:	00021be4 	.word	0x00021be4
   14aa8:	00021a5c 	.word	0x00021a5c
   14aac:	00021a78 	.word	0x00021a78
   14ab0:	00021c20 	.word	0x00021c20
   14ab4:	00021a8c 	.word	0x00021a8c

00014ab8 <str_replace>:

// The implementation is optimized, returning the original string if there's
// nothing to replace.
STATIC mp_obj_t str_replace(size_t n_args, const mp_obj_t *args) {
   14ab8:	b580      	push	{r7, lr}
   14aba:	b096      	sub	sp, #88	; 0x58
   14abc:	af02      	add	r7, sp, #8
   14abe:	6078      	str	r0, [r7, #4]
   14ac0:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   14ac2:	683b      	ldr	r3, [r7, #0]
   14ac4:	681b      	ldr	r3, [r3, #0]
   14ac6:	4618      	mov	r0, r3
   14ac8:	f7fd fbaa 	bl	12220 <MP_OBJ_IS_QSTR>
   14acc:	4603      	mov	r3, r0
   14ace:	f083 0301 	eor.w	r3, r3, #1
   14ad2:	b2db      	uxtb	r3, r3
   14ad4:	2b00      	cmp	r3, #0
   14ad6:	d018      	beq.n	14b0a <str_replace+0x52>
   14ad8:	683b      	ldr	r3, [r7, #0]
   14ada:	681b      	ldr	r3, [r3, #0]
   14adc:	4618      	mov	r0, r3
   14ade:	f7fd fbb1 	bl	12244 <MP_OBJ_IS_OBJ>
   14ae2:	4603      	mov	r3, r0
   14ae4:	f083 0301 	eor.w	r3, r3, #1
   14ae8:	b2db      	uxtb	r3, r3
   14aea:	2b00      	cmp	r3, #0
   14aec:	d106      	bne.n	14afc <str_replace+0x44>
   14aee:	683b      	ldr	r3, [r7, #0]
   14af0:	681b      	ldr	r3, [r3, #0]
   14af2:	681b      	ldr	r3, [r3, #0]
   14af4:	699b      	ldr	r3, [r3, #24]
   14af6:	4aa4      	ldr	r2, [pc, #656]	; (14d88 <str_replace+0x2d0>)
   14af8:	4293      	cmp	r3, r2
   14afa:	d006      	beq.n	14b0a <str_replace+0x52>
   14afc:	4ba3      	ldr	r3, [pc, #652]	; (14d8c <str_replace+0x2d4>)
   14afe:	4aa4      	ldr	r2, [pc, #656]	; (14d90 <str_replace+0x2d8>)
   14b00:	f240 6131 	movw	r1, #1585	; 0x631
   14b04:	48a3      	ldr	r0, [pc, #652]	; (14d94 <str_replace+0x2dc>)
   14b06:	f006 fc31 	bl	1b36c <__assert_func>

    mp_int_t max_rep = -1;
   14b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (n_args == 4) {
   14b10:	687b      	ldr	r3, [r7, #4]
   14b12:	2b04      	cmp	r3, #4
   14b14:	d112      	bne.n	14b3c <str_replace+0x84>
        max_rep = mp_obj_get_int(args[3]);
   14b16:	683b      	ldr	r3, [r7, #0]
   14b18:	330c      	adds	r3, #12
   14b1a:	681b      	ldr	r3, [r3, #0]
   14b1c:	4618      	mov	r0, r3
   14b1e:	f7f9 f857 	bl	dbd0 <mp_obj_get_int>
   14b22:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (max_rep == 0) {
   14b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14b26:	2b00      	cmp	r3, #0
   14b28:	d102      	bne.n	14b30 <str_replace+0x78>
            return args[0];
   14b2a:	683b      	ldr	r3, [r7, #0]
   14b2c:	681b      	ldr	r3, [r3, #0]
   14b2e:	e127      	b.n	14d80 <str_replace+0x2c8>
        } else if (max_rep < 0) {
   14b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14b32:	2b00      	cmp	r3, #0
   14b34:	da02      	bge.n	14b3c <str_replace+0x84>
            max_rep = -1;
   14b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14b3a:	64fb      	str	r3, [r7, #76]	; 0x4c

    // if max_rep is still -1 by this point we will need to do all possible replacements

    // check argument types

    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   14b3c:	683b      	ldr	r3, [r7, #0]
   14b3e:	681b      	ldr	r3, [r3, #0]
   14b40:	4618      	mov	r0, r3
   14b42:	f7f8 fe67 	bl	d814 <mp_obj_get_type>
   14b46:	6278      	str	r0, [r7, #36]	; 0x24

    if (mp_obj_get_type(args[1]) != self_type) {
   14b48:	683b      	ldr	r3, [r7, #0]
   14b4a:	3304      	adds	r3, #4
   14b4c:	681b      	ldr	r3, [r3, #0]
   14b4e:	4618      	mov	r0, r3
   14b50:	f7f8 fe60 	bl	d814 <mp_obj_get_type>
   14b54:	4602      	mov	r2, r0
   14b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14b58:	429a      	cmp	r2, r3
   14b5a:	d005      	beq.n	14b68 <str_replace+0xb0>
        bad_implicit_conversion(args[1]);
   14b5c:	683b      	ldr	r3, [r7, #0]
   14b5e:	3304      	adds	r3, #4
   14b60:	681b      	ldr	r3, [r3, #0]
   14b62:	4618      	mov	r0, r3
   14b64:	f000 fd30 	bl	155c8 <bad_implicit_conversion>
    }

    if (mp_obj_get_type(args[2]) != self_type) {
   14b68:	683b      	ldr	r3, [r7, #0]
   14b6a:	3308      	adds	r3, #8
   14b6c:	681b      	ldr	r3, [r3, #0]
   14b6e:	4618      	mov	r0, r3
   14b70:	f7f8 fe50 	bl	d814 <mp_obj_get_type>
   14b74:	4602      	mov	r2, r0
   14b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14b78:	429a      	cmp	r2, r3
   14b7a:	d005      	beq.n	14b88 <str_replace+0xd0>
        bad_implicit_conversion(args[2]);
   14b7c:	683b      	ldr	r3, [r7, #0]
   14b7e:	3308      	adds	r3, #8
   14b80:	681b      	ldr	r3, [r3, #0]
   14b82:	4618      	mov	r0, r3
   14b84:	f000 fd20 	bl	155c8 <bad_implicit_conversion>
    }

    // extract string data

    GET_STR_DATA_LEN(args[0], str, str_len);
   14b88:	683b      	ldr	r3, [r7, #0]
   14b8a:	681b      	ldr	r3, [r3, #0]
   14b8c:	4618      	mov	r0, r3
   14b8e:	f7fd fb47 	bl	12220 <MP_OBJ_IS_QSTR>
   14b92:	4603      	mov	r3, r0
   14b94:	2b00      	cmp	r3, #0
   14b96:	d00a      	beq.n	14bae <str_replace+0xf6>
   14b98:	683b      	ldr	r3, [r7, #0]
   14b9a:	681b      	ldr	r3, [r3, #0]
   14b9c:	089b      	lsrs	r3, r3, #2
   14b9e:	f107 0220 	add.w	r2, r7, #32
   14ba2:	4611      	mov	r1, r2
   14ba4:	4618      	mov	r0, r3
   14ba6:	f7ec fb33 	bl	1210 <qstr_data>
   14baa:	64b8      	str	r0, [r7, #72]	; 0x48
   14bac:	e007      	b.n	14bbe <str_replace+0x106>
   14bae:	683b      	ldr	r3, [r7, #0]
   14bb0:	681b      	ldr	r3, [r3, #0]
   14bb2:	689b      	ldr	r3, [r3, #8]
   14bb4:	623b      	str	r3, [r7, #32]
   14bb6:	683b      	ldr	r3, [r7, #0]
   14bb8:	681b      	ldr	r3, [r3, #0]
   14bba:	68db      	ldr	r3, [r3, #12]
   14bbc:	64bb      	str	r3, [r7, #72]	; 0x48
    GET_STR_DATA_LEN(args[1], old, old_len);
   14bbe:	683b      	ldr	r3, [r7, #0]
   14bc0:	3304      	adds	r3, #4
   14bc2:	681b      	ldr	r3, [r3, #0]
   14bc4:	4618      	mov	r0, r3
   14bc6:	f7fd fb2b 	bl	12220 <MP_OBJ_IS_QSTR>
   14bca:	4603      	mov	r3, r0
   14bcc:	2b00      	cmp	r3, #0
   14bce:	d00b      	beq.n	14be8 <str_replace+0x130>
   14bd0:	683b      	ldr	r3, [r7, #0]
   14bd2:	3304      	adds	r3, #4
   14bd4:	681b      	ldr	r3, [r3, #0]
   14bd6:	089b      	lsrs	r3, r3, #2
   14bd8:	f107 021c 	add.w	r2, r7, #28
   14bdc:	4611      	mov	r1, r2
   14bde:	4618      	mov	r0, r3
   14be0:	f7ec fb16 	bl	1210 <qstr_data>
   14be4:	6478      	str	r0, [r7, #68]	; 0x44
   14be6:	e009      	b.n	14bfc <str_replace+0x144>
   14be8:	683b      	ldr	r3, [r7, #0]
   14bea:	3304      	adds	r3, #4
   14bec:	681b      	ldr	r3, [r3, #0]
   14bee:	689b      	ldr	r3, [r3, #8]
   14bf0:	61fb      	str	r3, [r7, #28]
   14bf2:	683b      	ldr	r3, [r7, #0]
   14bf4:	3304      	adds	r3, #4
   14bf6:	681b      	ldr	r3, [r3, #0]
   14bf8:	68db      	ldr	r3, [r3, #12]
   14bfa:	647b      	str	r3, [r7, #68]	; 0x44
    GET_STR_DATA_LEN(args[2], new, new_len);
   14bfc:	683b      	ldr	r3, [r7, #0]
   14bfe:	3308      	adds	r3, #8
   14c00:	681b      	ldr	r3, [r3, #0]
   14c02:	4618      	mov	r0, r3
   14c04:	f7fd fb0c 	bl	12220 <MP_OBJ_IS_QSTR>
   14c08:	4603      	mov	r3, r0
   14c0a:	2b00      	cmp	r3, #0
   14c0c:	d00b      	beq.n	14c26 <str_replace+0x16e>
   14c0e:	683b      	ldr	r3, [r7, #0]
   14c10:	3308      	adds	r3, #8
   14c12:	681b      	ldr	r3, [r3, #0]
   14c14:	089b      	lsrs	r3, r3, #2
   14c16:	f107 0218 	add.w	r2, r7, #24
   14c1a:	4611      	mov	r1, r2
   14c1c:	4618      	mov	r0, r3
   14c1e:	f7ec faf7 	bl	1210 <qstr_data>
   14c22:	6438      	str	r0, [r7, #64]	; 0x40
   14c24:	e009      	b.n	14c3a <str_replace+0x182>
   14c26:	683b      	ldr	r3, [r7, #0]
   14c28:	3308      	adds	r3, #8
   14c2a:	681b      	ldr	r3, [r3, #0]
   14c2c:	689b      	ldr	r3, [r3, #8]
   14c2e:	61bb      	str	r3, [r7, #24]
   14c30:	683b      	ldr	r3, [r7, #0]
   14c32:	3308      	adds	r3, #8
   14c34:	681b      	ldr	r3, [r3, #0]
   14c36:	68db      	ldr	r3, [r3, #12]
   14c38:	643b      	str	r3, [r7, #64]	; 0x40

    // old won't exist in str if it's longer, so nothing to replace
    if (old_len > str_len) {
   14c3a:	69fa      	ldr	r2, [r7, #28]
   14c3c:	6a3b      	ldr	r3, [r7, #32]
   14c3e:	429a      	cmp	r2, r3
   14c40:	d902      	bls.n	14c48 <str_replace+0x190>
        return args[0];
   14c42:	683b      	ldr	r3, [r7, #0]
   14c44:	681b      	ldr	r3, [r3, #0]
   14c46:	e09b      	b.n	14d80 <str_replace+0x2c8>
    }

    // data for the replaced string
    byte *data = NULL;
   14c48:	2300      	movs	r3, #0
   14c4a:	63fb      	str	r3, [r7, #60]	; 0x3c

    // do 2 passes over the string:
    //   first pass computes the required length of the replaced string
    //   second pass does the replacements
    for (;;) {
        size_t replaced_str_index = 0;
   14c4c:	2300      	movs	r3, #0
   14c4e:	63bb      	str	r3, [r7, #56]	; 0x38
        size_t num_replacements_done = 0;
   14c50:	2300      	movs	r3, #0
   14c52:	637b      	str	r3, [r7, #52]	; 0x34
        const byte *old_occurrence;
        const byte *offset_ptr = str;
   14c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14c56:	62fb      	str	r3, [r7, #44]	; 0x2c
        size_t str_len_remain = str_len;
   14c58:	6a3b      	ldr	r3, [r7, #32]
   14c5a:	62bb      	str	r3, [r7, #40]	; 0x28
        if (old_len == 0) {
   14c5c:	69fb      	ldr	r3, [r7, #28]
   14c5e:	2b00      	cmp	r3, #0
   14c60:	d147      	bne.n	14cf2 <str_replace+0x23a>
            // if old_str is empty, copy new_str to start of replaced string
            // copy the replacement string
            if (data != NULL) {
   14c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14c64:	2b00      	cmp	r3, #0
   14c66:	d005      	beq.n	14c74 <str_replace+0x1bc>
                memcpy(data, new, new_len);
   14c68:	69bb      	ldr	r3, [r7, #24]
   14c6a:	461a      	mov	r2, r3
   14c6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
   14c6e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   14c70:	f007 f928 	bl	1bec4 <memcpy>
            }
            replaced_str_index += new_len;
   14c74:	69bb      	ldr	r3, [r7, #24]
   14c76:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14c78:	4413      	add	r3, r2
   14c7a:	63bb      	str	r3, [r7, #56]	; 0x38
            num_replacements_done++;
   14c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14c7e:	3301      	adds	r3, #1
   14c80:	637b      	str	r3, [r7, #52]	; 0x34
        }
        while (num_replacements_done != (size_t)max_rep && str_len_remain > 0 && (old_occurrence = find_subbytes(offset_ptr, str_len_remain, old, old_len, 1)) != NULL) {
   14c82:	e036      	b.n	14cf2 <str_replace+0x23a>
            if (old_len == 0) {
   14c84:	69fb      	ldr	r3, [r7, #28]
   14c86:	2b00      	cmp	r3, #0
   14c88:	d102      	bne.n	14c90 <str_replace+0x1d8>
                old_occurrence += 1;
   14c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14c8c:	3301      	adds	r3, #1
   14c8e:	633b      	str	r3, [r7, #48]	; 0x30
            }
            // copy from just after end of last occurrence of to-be-replaced string to right before start of next occurrence
            if (data != NULL) {
   14c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14c92:	2b00      	cmp	r3, #0
   14c94:	d009      	beq.n	14caa <str_replace+0x1f2>
                memcpy(data + replaced_str_index, offset_ptr, old_occurrence - offset_ptr);
   14c96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14c9a:	18d0      	adds	r0, r2, r3
   14c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   14c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14ca0:	1ad3      	subs	r3, r2, r3
   14ca2:	461a      	mov	r2, r3
   14ca4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14ca6:	f007 f90d 	bl	1bec4 <memcpy>
            }
            replaced_str_index += old_occurrence - offset_ptr;
   14caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   14cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14cae:	1ad3      	subs	r3, r2, r3
   14cb0:	461a      	mov	r2, r3
   14cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14cb4:	4413      	add	r3, r2
   14cb6:	63bb      	str	r3, [r7, #56]	; 0x38
            // copy the replacement string
            if (data != NULL) {
   14cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14cba:	2b00      	cmp	r3, #0
   14cbc:	d007      	beq.n	14cce <str_replace+0x216>
                memcpy(data + replaced_str_index, new, new_len);
   14cbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14cc2:	4413      	add	r3, r2
   14cc4:	69ba      	ldr	r2, [r7, #24]
   14cc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
   14cc8:	4618      	mov	r0, r3
   14cca:	f007 f8fb 	bl	1bec4 <memcpy>
            }
            replaced_str_index += new_len;
   14cce:	69bb      	ldr	r3, [r7, #24]
   14cd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14cd2:	4413      	add	r3, r2
   14cd4:	63bb      	str	r3, [r7, #56]	; 0x38
            offset_ptr = old_occurrence + old_len;
   14cd6:	69fb      	ldr	r3, [r7, #28]
   14cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   14cda:	4413      	add	r3, r2
   14cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
            str_len_remain = str + str_len - offset_ptr;
   14cde:	6a3b      	ldr	r3, [r7, #32]
   14ce0:	6cba      	ldr	r2, [r7, #72]	; 0x48
   14ce2:	4413      	add	r3, r2
   14ce4:	461a      	mov	r2, r3
   14ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14ce8:	1ad3      	subs	r3, r2, r3
   14cea:	62bb      	str	r3, [r7, #40]	; 0x28
            num_replacements_done++;
   14cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14cee:	3301      	adds	r3, #1
   14cf0:	637b      	str	r3, [r7, #52]	; 0x34
        while (num_replacements_done != (size_t)max_rep && str_len_remain > 0 && (old_occurrence = find_subbytes(offset_ptr, str_len_remain, old, old_len, 1)) != NULL) {
   14cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14cf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14cf6:	429a      	cmp	r2, r3
   14cf8:	d00f      	beq.n	14d1a <str_replace+0x262>
   14cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14cfc:	2b00      	cmp	r3, #0
   14cfe:	d00c      	beq.n	14d1a <str_replace+0x262>
   14d00:	69fa      	ldr	r2, [r7, #28]
   14d02:	2301      	movs	r3, #1
   14d04:	9300      	str	r3, [sp, #0]
   14d06:	4613      	mov	r3, r2
   14d08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   14d0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   14d0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   14d0e:	f7fd fd87 	bl	12820 <find_subbytes>
   14d12:	6338      	str	r0, [r7, #48]	; 0x30
   14d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14d16:	2b00      	cmp	r3, #0
   14d18:	d1b4      	bne.n	14c84 <str_replace+0x1cc>
        }

        // copy from just after end of last occurrence of to-be-replaced string to end of old string
        if (data != NULL) {
   14d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14d1c:	2b00      	cmp	r3, #0
   14d1e:	d007      	beq.n	14d30 <str_replace+0x278>
            memcpy(data + replaced_str_index, offset_ptr, str_len_remain);
   14d20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14d24:	4413      	add	r3, r2
   14d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
   14d28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14d2a:	4618      	mov	r0, r3
   14d2c:	f007 f8ca 	bl	1bec4 <memcpy>
        }
        replaced_str_index += str_len_remain;
   14d30:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14d34:	4413      	add	r3, r2
   14d36:	63bb      	str	r3, [r7, #56]	; 0x38

        if (data == NULL) {
   14d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14d3a:	2b00      	cmp	r3, #0
   14d3c:	d118      	bne.n	14d70 <str_replace+0x2b8>
            // first pass
            if (num_replacements_done == 0) {
   14d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14d40:	2b00      	cmp	r3, #0
   14d42:	d102      	bne.n	14d4a <str_replace+0x292>
                // no substr found, return original string
                return args[0];
   14d44:	683b      	ldr	r3, [r7, #0]
   14d46:	681b      	ldr	r3, [r3, #0]
   14d48:	e01a      	b.n	14d80 <str_replace+0x2c8>
            } else {
                // substr found, allocate new string
                vstr_init_len(&vstr, replaced_str_index);
   14d4a:	f107 0308 	add.w	r3, r7, #8
   14d4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   14d50:	4618      	mov	r0, r3
   14d52:	f7ec faf7 	bl	1344 <vstr_init_len>
                data = (byte*)vstr.buf;
   14d56:	693b      	ldr	r3, [r7, #16]
   14d58:	63fb      	str	r3, [r7, #60]	; 0x3c
                assert(data != NULL);
   14d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14d5c:	2b00      	cmp	r3, #0
   14d5e:	f47f af75 	bne.w	14c4c <str_replace+0x194>
   14d62:	4b0d      	ldr	r3, [pc, #52]	; (14d98 <str_replace+0x2e0>)
   14d64:	4a0a      	ldr	r2, [pc, #40]	; (14d90 <str_replace+0x2d8>)
   14d66:	f240 618e 	movw	r1, #1678	; 0x68e
   14d6a:	480a      	ldr	r0, [pc, #40]	; (14d94 <str_replace+0x2dc>)
   14d6c:	f006 fafe 	bl	1b36c <__assert_func>
            }
        } else {
            // second pass, we are done
            break;
   14d70:	bf00      	nop
        }
    }

    return mp_obj_new_str_from_vstr(self_type, &vstr);
   14d72:	f107 0308 	add.w	r3, r7, #8
   14d76:	4619      	mov	r1, r3
   14d78:	6a78      	ldr	r0, [r7, #36]	; 0x24
   14d7a:	f000 fad1 	bl	15320 <mp_obj_new_str_from_vstr>
   14d7e:	4603      	mov	r3, r0
}
   14d80:	4618      	mov	r0, r3
   14d82:	3750      	adds	r7, #80	; 0x50
   14d84:	46bd      	mov	sp, r7
   14d86:	bd80      	pop	{r7, pc}
   14d88:	00012895 	.word	0x00012895
   14d8c:	000217a8 	.word	0x000217a8
   14d90:	00021d04 	.word	0x00021d04
   14d94:	0002170c 	.word	0x0002170c
   14d98:	00021ac4 	.word	0x00021ac4

00014d9c <str_count>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_replace_obj, 3, 4, str_replace);

STATIC mp_obj_t str_count(size_t n_args, const mp_obj_t *args) {
   14d9c:	b580      	push	{r7, lr}
   14d9e:	b08e      	sub	sp, #56	; 0x38
   14da0:	af02      	add	r7, sp, #8
   14da2:	6078      	str	r0, [r7, #4]
   14da4:	6039      	str	r1, [r7, #0]
    const mp_obj_type_t *self_type = mp_obj_get_type(args[0]);
   14da6:	683b      	ldr	r3, [r7, #0]
   14da8:	681b      	ldr	r3, [r3, #0]
   14daa:	4618      	mov	r0, r3
   14dac:	f7f8 fd32 	bl	d814 <mp_obj_get_type>
   14db0:	6178      	str	r0, [r7, #20]
    mp_check_self(MP_OBJ_IS_STR_OR_BYTES(args[0]));
   14db2:	683b      	ldr	r3, [r7, #0]
   14db4:	681b      	ldr	r3, [r3, #0]
   14db6:	4618      	mov	r0, r3
   14db8:	f7fd fa32 	bl	12220 <MP_OBJ_IS_QSTR>
   14dbc:	4603      	mov	r3, r0
   14dbe:	f083 0301 	eor.w	r3, r3, #1
   14dc2:	b2db      	uxtb	r3, r3
   14dc4:	2b00      	cmp	r3, #0
   14dc6:	d018      	beq.n	14dfa <str_count+0x5e>
   14dc8:	683b      	ldr	r3, [r7, #0]
   14dca:	681b      	ldr	r3, [r3, #0]
   14dcc:	4618      	mov	r0, r3
   14dce:	f7fd fa39 	bl	12244 <MP_OBJ_IS_OBJ>
   14dd2:	4603      	mov	r3, r0
   14dd4:	f083 0301 	eor.w	r3, r3, #1
   14dd8:	b2db      	uxtb	r3, r3
   14dda:	2b00      	cmp	r3, #0
   14ddc:	d106      	bne.n	14dec <str_count+0x50>
   14dde:	683b      	ldr	r3, [r7, #0]
   14de0:	681b      	ldr	r3, [r3, #0]
   14de2:	681b      	ldr	r3, [r3, #0]
   14de4:	699b      	ldr	r3, [r3, #24]
   14de6:	4a5e      	ldr	r2, [pc, #376]	; (14f60 <str_count+0x1c4>)
   14de8:	4293      	cmp	r3, r2
   14dea:	d006      	beq.n	14dfa <str_count+0x5e>
   14dec:	4b5d      	ldr	r3, [pc, #372]	; (14f64 <str_count+0x1c8>)
   14dee:	4a5e      	ldr	r2, [pc, #376]	; (14f68 <str_count+0x1cc>)
   14df0:	f240 619c 	movw	r1, #1692	; 0x69c
   14df4:	485d      	ldr	r0, [pc, #372]	; (14f6c <str_count+0x1d0>)
   14df6:	f006 fab9 	bl	1b36c <__assert_func>

    // check argument type
    if (mp_obj_get_type(args[1]) != self_type) {
   14dfa:	683b      	ldr	r3, [r7, #0]
   14dfc:	3304      	adds	r3, #4
   14dfe:	681b      	ldr	r3, [r3, #0]
   14e00:	4618      	mov	r0, r3
   14e02:	f7f8 fd07 	bl	d814 <mp_obj_get_type>
   14e06:	4602      	mov	r2, r0
   14e08:	697b      	ldr	r3, [r7, #20]
   14e0a:	429a      	cmp	r2, r3
   14e0c:	d005      	beq.n	14e1a <str_count+0x7e>
        bad_implicit_conversion(args[1]);
   14e0e:	683b      	ldr	r3, [r7, #0]
   14e10:	3304      	adds	r3, #4
   14e12:	681b      	ldr	r3, [r3, #0]
   14e14:	4618      	mov	r0, r3
   14e16:	f000 fbd7 	bl	155c8 <bad_implicit_conversion>
    }

    GET_STR_DATA_LEN(args[0], haystack, haystack_len);
   14e1a:	683b      	ldr	r3, [r7, #0]
   14e1c:	681b      	ldr	r3, [r3, #0]
   14e1e:	4618      	mov	r0, r3
   14e20:	f7fd f9fe 	bl	12220 <MP_OBJ_IS_QSTR>
   14e24:	4603      	mov	r3, r0
   14e26:	2b00      	cmp	r3, #0
   14e28:	d00a      	beq.n	14e40 <str_count+0xa4>
   14e2a:	683b      	ldr	r3, [r7, #0]
   14e2c:	681b      	ldr	r3, [r3, #0]
   14e2e:	089b      	lsrs	r3, r3, #2
   14e30:	f107 0210 	add.w	r2, r7, #16
   14e34:	4611      	mov	r1, r2
   14e36:	4618      	mov	r0, r3
   14e38:	f7ec f9ea 	bl	1210 <qstr_data>
   14e3c:	62f8      	str	r0, [r7, #44]	; 0x2c
   14e3e:	e007      	b.n	14e50 <str_count+0xb4>
   14e40:	683b      	ldr	r3, [r7, #0]
   14e42:	681b      	ldr	r3, [r3, #0]
   14e44:	689b      	ldr	r3, [r3, #8]
   14e46:	613b      	str	r3, [r7, #16]
   14e48:	683b      	ldr	r3, [r7, #0]
   14e4a:	681b      	ldr	r3, [r3, #0]
   14e4c:	68db      	ldr	r3, [r3, #12]
   14e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_STR_DATA_LEN(args[1], needle, needle_len);
   14e50:	683b      	ldr	r3, [r7, #0]
   14e52:	3304      	adds	r3, #4
   14e54:	681b      	ldr	r3, [r3, #0]
   14e56:	4618      	mov	r0, r3
   14e58:	f7fd f9e2 	bl	12220 <MP_OBJ_IS_QSTR>
   14e5c:	4603      	mov	r3, r0
   14e5e:	2b00      	cmp	r3, #0
   14e60:	d00b      	beq.n	14e7a <str_count+0xde>
   14e62:	683b      	ldr	r3, [r7, #0]
   14e64:	3304      	adds	r3, #4
   14e66:	681b      	ldr	r3, [r3, #0]
   14e68:	089b      	lsrs	r3, r3, #2
   14e6a:	f107 020c 	add.w	r2, r7, #12
   14e6e:	4611      	mov	r1, r2
   14e70:	4618      	mov	r0, r3
   14e72:	f7ec f9cd 	bl	1210 <qstr_data>
   14e76:	62b8      	str	r0, [r7, #40]	; 0x28
   14e78:	e009      	b.n	14e8e <str_count+0xf2>
   14e7a:	683b      	ldr	r3, [r7, #0]
   14e7c:	3304      	adds	r3, #4
   14e7e:	681b      	ldr	r3, [r3, #0]
   14e80:	689b      	ldr	r3, [r3, #8]
   14e82:	60fb      	str	r3, [r7, #12]
   14e84:	683b      	ldr	r3, [r7, #0]
   14e86:	3304      	adds	r3, #4
   14e88:	681b      	ldr	r3, [r3, #0]
   14e8a:	68db      	ldr	r3, [r3, #12]
   14e8c:	62bb      	str	r3, [r7, #40]	; 0x28

    const byte *start = haystack;
   14e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14e90:	627b      	str	r3, [r7, #36]	; 0x24
    const byte *end = haystack + haystack_len;
   14e92:	693b      	ldr	r3, [r7, #16]
   14e94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   14e96:	4413      	add	r3, r2
   14e98:	623b      	str	r3, [r7, #32]
    if (n_args >= 3 && args[2] != mp_const_none) {
   14e9a:	687b      	ldr	r3, [r7, #4]
   14e9c:	2b02      	cmp	r3, #2
   14e9e:	d911      	bls.n	14ec4 <str_count+0x128>
   14ea0:	683b      	ldr	r3, [r7, #0]
   14ea2:	3308      	adds	r3, #8
   14ea4:	681b      	ldr	r3, [r3, #0]
   14ea6:	4a32      	ldr	r2, [pc, #200]	; (14f70 <str_count+0x1d4>)
   14ea8:	4293      	cmp	r3, r2
   14eaa:	d00b      	beq.n	14ec4 <str_count+0x128>
        start = str_index_to_ptr(self_type, haystack, haystack_len, args[2], true);
   14eac:	693a      	ldr	r2, [r7, #16]
   14eae:	683b      	ldr	r3, [r7, #0]
   14eb0:	3308      	adds	r3, #8
   14eb2:	6819      	ldr	r1, [r3, #0]
   14eb4:	2301      	movs	r3, #1
   14eb6:	9300      	str	r3, [sp, #0]
   14eb8:	460b      	mov	r3, r1
   14eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14ebc:	6978      	ldr	r0, [r7, #20]
   14ebe:	f7fd fe65 	bl	12b8c <str_index_to_ptr>
   14ec2:	6278      	str	r0, [r7, #36]	; 0x24
    }
    if (n_args >= 4 && args[3] != mp_const_none) {
   14ec4:	687b      	ldr	r3, [r7, #4]
   14ec6:	2b03      	cmp	r3, #3
   14ec8:	d911      	bls.n	14eee <str_count+0x152>
   14eca:	683b      	ldr	r3, [r7, #0]
   14ecc:	330c      	adds	r3, #12
   14ece:	681b      	ldr	r3, [r3, #0]
   14ed0:	4a27      	ldr	r2, [pc, #156]	; (14f70 <str_count+0x1d4>)
   14ed2:	4293      	cmp	r3, r2
   14ed4:	d00b      	beq.n	14eee <str_count+0x152>
        end = str_index_to_ptr(self_type, haystack, haystack_len, args[3], true);
   14ed6:	693a      	ldr	r2, [r7, #16]
   14ed8:	683b      	ldr	r3, [r7, #0]
   14eda:	330c      	adds	r3, #12
   14edc:	6819      	ldr	r1, [r3, #0]
   14ede:	2301      	movs	r3, #1
   14ee0:	9300      	str	r3, [sp, #0]
   14ee2:	460b      	mov	r3, r1
   14ee4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14ee6:	6978      	ldr	r0, [r7, #20]
   14ee8:	f7fd fe50 	bl	12b8c <str_index_to_ptr>
   14eec:	6238      	str	r0, [r7, #32]
    }

    // if needle_len is zero then we count each gap between characters as an occurrence
    if (needle_len == 0) {
   14eee:	68fb      	ldr	r3, [r7, #12]
   14ef0:	2b00      	cmp	r3, #0
   14ef2:	d10c      	bne.n	14f0e <str_count+0x172>
        return MP_OBJ_NEW_SMALL_INT(utf8_charlen(start, end - start) + 1);
   14ef4:	6a3a      	ldr	r2, [r7, #32]
   14ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14ef8:	1ad3      	subs	r3, r2, r3
   14efa:	4619      	mov	r1, r3
   14efc:	6a78      	ldr	r0, [r7, #36]	; 0x24
   14efe:	f7fd f971 	bl	121e4 <utf8_charlen>
   14f02:	4603      	mov	r3, r0
   14f04:	3301      	adds	r3, #1
   14f06:	005b      	lsls	r3, r3, #1
   14f08:	f043 0301 	orr.w	r3, r3, #1
   14f0c:	e023      	b.n	14f56 <str_count+0x1ba>
    }

    // count the occurrences
    mp_int_t num_occurrences = 0;
   14f0e:	2300      	movs	r3, #0
   14f10:	61fb      	str	r3, [r7, #28]
    for (const byte *haystack_ptr = start; haystack_ptr + needle_len <= end;) {
   14f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14f14:	61bb      	str	r3, [r7, #24]
   14f16:	e014      	b.n	14f42 <str_count+0x1a6>
        if (memcmp(haystack_ptr, needle, needle_len) == 0) {
   14f18:	68fb      	ldr	r3, [r7, #12]
   14f1a:	461a      	mov	r2, r3
   14f1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   14f1e:	69b8      	ldr	r0, [r7, #24]
   14f20:	f007 f8b8 	bl	1c094 <memcmp>
   14f24:	4603      	mov	r3, r0
   14f26:	2b00      	cmp	r3, #0
   14f28:	d107      	bne.n	14f3a <str_count+0x19e>
            num_occurrences++;
   14f2a:	69fb      	ldr	r3, [r7, #28]
   14f2c:	3301      	adds	r3, #1
   14f2e:	61fb      	str	r3, [r7, #28]
            haystack_ptr += needle_len;
   14f30:	68fb      	ldr	r3, [r7, #12]
   14f32:	69ba      	ldr	r2, [r7, #24]
   14f34:	4413      	add	r3, r2
   14f36:	61bb      	str	r3, [r7, #24]
   14f38:	e003      	b.n	14f42 <str_count+0x1a6>
        } else {
            haystack_ptr = utf8_next_char(haystack_ptr);
   14f3a:	69b8      	ldr	r0, [r7, #24]
   14f3c:	f7fd f946 	bl	121cc <utf8_next_char>
   14f40:	61b8      	str	r0, [r7, #24]
    for (const byte *haystack_ptr = start; haystack_ptr + needle_len <= end;) {
   14f42:	68fb      	ldr	r3, [r7, #12]
   14f44:	69ba      	ldr	r2, [r7, #24]
   14f46:	441a      	add	r2, r3
   14f48:	6a3b      	ldr	r3, [r7, #32]
   14f4a:	429a      	cmp	r2, r3
   14f4c:	d9e4      	bls.n	14f18 <str_count+0x17c>
        }
    }

    return MP_OBJ_NEW_SMALL_INT(num_occurrences);
   14f4e:	69fb      	ldr	r3, [r7, #28]
   14f50:	005b      	lsls	r3, r3, #1
   14f52:	f043 0301 	orr.w	r3, r3, #1
}
   14f56:	4618      	mov	r0, r3
   14f58:	3730      	adds	r7, #48	; 0x30
   14f5a:	46bd      	mov	sp, r7
   14f5c:	bd80      	pop	{r7, pc}
   14f5e:	bf00      	nop
   14f60:	00012895 	.word	0x00012895
   14f64:	000217a8 	.word	0x000217a8
   14f68:	00021d10 	.word	0x00021d10
   14f6c:	0002170c 	.word	0x0002170c
   14f70:	00021534 	.word	0x00021534

00014f74 <str_caseconv>:
}
MP_DEFINE_CONST_FUN_OBJ_2(str_rpartition_obj, str_rpartition);
#endif

// Supposedly not too critical operations, so optimize for code size
STATIC mp_obj_t str_caseconv(unichar (*op)(unichar), mp_obj_t self_in) {
   14f74:	b590      	push	{r4, r7, lr}
   14f76:	b08b      	sub	sp, #44	; 0x2c
   14f78:	af00      	add	r7, sp, #0
   14f7a:	6078      	str	r0, [r7, #4]
   14f7c:	6039      	str	r1, [r7, #0]
    GET_STR_DATA_LEN(self_in, self_data, self_len);
   14f7e:	6838      	ldr	r0, [r7, #0]
   14f80:	f7fd f94e 	bl	12220 <MP_OBJ_IS_QSTR>
   14f84:	4603      	mov	r3, r0
   14f86:	2b00      	cmp	r3, #0
   14f88:	d009      	beq.n	14f9e <str_caseconv+0x2a>
   14f8a:	683b      	ldr	r3, [r7, #0]
   14f8c:	089b      	lsrs	r3, r3, #2
   14f8e:	f107 0218 	add.w	r2, r7, #24
   14f92:	4611      	mov	r1, r2
   14f94:	4618      	mov	r0, r3
   14f96:	f7ec f93b 	bl	1210 <qstr_data>
   14f9a:	6278      	str	r0, [r7, #36]	; 0x24
   14f9c:	e005      	b.n	14faa <str_caseconv+0x36>
   14f9e:	683b      	ldr	r3, [r7, #0]
   14fa0:	689b      	ldr	r3, [r3, #8]
   14fa2:	61bb      	str	r3, [r7, #24]
   14fa4:	683b      	ldr	r3, [r7, #0]
   14fa6:	68db      	ldr	r3, [r3, #12]
   14fa8:	627b      	str	r3, [r7, #36]	; 0x24
    vstr_t vstr;
    vstr_init_len(&vstr, self_len);
   14faa:	69ba      	ldr	r2, [r7, #24]
   14fac:	f107 0308 	add.w	r3, r7, #8
   14fb0:	4611      	mov	r1, r2
   14fb2:	4618      	mov	r0, r3
   14fb4:	f7ec f9c6 	bl	1344 <vstr_init_len>
    byte *data = (byte*)vstr.buf;
   14fb8:	693b      	ldr	r3, [r7, #16]
   14fba:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < self_len; i++) {
   14fbc:	2300      	movs	r3, #0
   14fbe:	61fb      	str	r3, [r7, #28]
   14fc0:	e010      	b.n	14fe4 <str_caseconv+0x70>
        *data++ = op(*self_data++);
   14fc2:	6a3c      	ldr	r4, [r7, #32]
   14fc4:	1c63      	adds	r3, r4, #1
   14fc6:	623b      	str	r3, [r7, #32]
   14fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14fca:	1c5a      	adds	r2, r3, #1
   14fcc:	627a      	str	r2, [r7, #36]	; 0x24
   14fce:	781b      	ldrb	r3, [r3, #0]
   14fd0:	461a      	mov	r2, r3
   14fd2:	687b      	ldr	r3, [r7, #4]
   14fd4:	4610      	mov	r0, r2
   14fd6:	4798      	blx	r3
   14fd8:	4603      	mov	r3, r0
   14fda:	b2db      	uxtb	r3, r3
   14fdc:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < self_len; i++) {
   14fde:	69fb      	ldr	r3, [r7, #28]
   14fe0:	3301      	adds	r3, #1
   14fe2:	61fb      	str	r3, [r7, #28]
   14fe4:	69bb      	ldr	r3, [r7, #24]
   14fe6:	69fa      	ldr	r2, [r7, #28]
   14fe8:	429a      	cmp	r2, r3
   14fea:	d3ea      	bcc.n	14fc2 <str_caseconv+0x4e>
    }
    return mp_obj_new_str_from_vstr(mp_obj_get_type(self_in), &vstr);
   14fec:	6838      	ldr	r0, [r7, #0]
   14fee:	f7f8 fc11 	bl	d814 <mp_obj_get_type>
   14ff2:	4602      	mov	r2, r0
   14ff4:	f107 0308 	add.w	r3, r7, #8
   14ff8:	4619      	mov	r1, r3
   14ffa:	4610      	mov	r0, r2
   14ffc:	f000 f990 	bl	15320 <mp_obj_new_str_from_vstr>
   15000:	4603      	mov	r3, r0
}
   15002:	4618      	mov	r0, r3
   15004:	372c      	adds	r7, #44	; 0x2c
   15006:	46bd      	mov	sp, r7
   15008:	bd90      	pop	{r4, r7, pc}
   1500a:	bf00      	nop

0001500c <str_lower>:

STATIC mp_obj_t str_lower(mp_obj_t self_in) {
   1500c:	b580      	push	{r7, lr}
   1500e:	b082      	sub	sp, #8
   15010:	af00      	add	r7, sp, #0
   15012:	6078      	str	r0, [r7, #4]
    return str_caseconv(unichar_tolower, self_in);
   15014:	6879      	ldr	r1, [r7, #4]
   15016:	4804      	ldr	r0, [pc, #16]	; (15028 <str_lower+0x1c>)
   15018:	f7ff ffac 	bl	14f74 <str_caseconv>
   1501c:	4603      	mov	r3, r0
}
   1501e:	4618      	mov	r0, r3
   15020:	3708      	adds	r7, #8
   15022:	46bd      	mov	sp, r7
   15024:	bd80      	pop	{r7, pc}
   15026:	bf00      	nop
   15028:	00002529 	.word	0x00002529

0001502c <str_upper>:
MP_DEFINE_CONST_FUN_OBJ_1(str_lower_obj, str_lower);

STATIC mp_obj_t str_upper(mp_obj_t self_in) {
   1502c:	b580      	push	{r7, lr}
   1502e:	b082      	sub	sp, #8
   15030:	af00      	add	r7, sp, #0
   15032:	6078      	str	r0, [r7, #4]
    return str_caseconv(unichar_toupper, self_in);
   15034:	6879      	ldr	r1, [r7, #4]
   15036:	4804      	ldr	r0, [pc, #16]	; (15048 <str_upper+0x1c>)
   15038:	f7ff ff9c 	bl	14f74 <str_caseconv>
   1503c:	4603      	mov	r3, r0
}
   1503e:	4618      	mov	r0, r3
   15040:	3708      	adds	r7, #8
   15042:	46bd      	mov	sp, r7
   15044:	bd80      	pop	{r7, pc}
   15046:	bf00      	nop
   15048:	0000254d 	.word	0x0000254d

0001504c <str_uni_istype>:
MP_DEFINE_CONST_FUN_OBJ_1(str_upper_obj, str_upper);

STATIC mp_obj_t str_uni_istype(bool (*f)(unichar), mp_obj_t self_in) {
   1504c:	b580      	push	{r7, lr}
   1504e:	b088      	sub	sp, #32
   15050:	af00      	add	r7, sp, #0
   15052:	6078      	str	r0, [r7, #4]
   15054:	6039      	str	r1, [r7, #0]
    GET_STR_DATA_LEN(self_in, self_data, self_len);
   15056:	6838      	ldr	r0, [r7, #0]
   15058:	f7fd f8e2 	bl	12220 <MP_OBJ_IS_QSTR>
   1505c:	4603      	mov	r3, r0
   1505e:	2b00      	cmp	r3, #0
   15060:	d009      	beq.n	15076 <str_uni_istype+0x2a>
   15062:	683b      	ldr	r3, [r7, #0]
   15064:	089b      	lsrs	r3, r3, #2
   15066:	f107 020c 	add.w	r2, r7, #12
   1506a:	4611      	mov	r1, r2
   1506c:	4618      	mov	r0, r3
   1506e:	f7ec f8cf 	bl	1210 <qstr_data>
   15072:	61f8      	str	r0, [r7, #28]
   15074:	e005      	b.n	15082 <str_uni_istype+0x36>
   15076:	683b      	ldr	r3, [r7, #0]
   15078:	689b      	ldr	r3, [r3, #8]
   1507a:	60fb      	str	r3, [r7, #12]
   1507c:	683b      	ldr	r3, [r7, #0]
   1507e:	68db      	ldr	r3, [r3, #12]
   15080:	61fb      	str	r3, [r7, #28]

    if (self_len == 0) {
   15082:	68fb      	ldr	r3, [r7, #12]
   15084:	2b00      	cmp	r3, #0
   15086:	d101      	bne.n	1508c <str_uni_istype+0x40>
        return mp_const_false; // default to False for empty str
   15088:	4b2c      	ldr	r3, [pc, #176]	; (1513c <str_uni_istype+0xf0>)
   1508a:	e052      	b.n	15132 <str_uni_istype+0xe6>
    }

    if (f != unichar_isupper && f != unichar_islower) {
   1508c:	687b      	ldr	r3, [r7, #4]
   1508e:	4a2c      	ldr	r2, [pc, #176]	; (15140 <str_uni_istype+0xf4>)
   15090:	4293      	cmp	r3, r2
   15092:	d01e      	beq.n	150d2 <str_uni_istype+0x86>
   15094:	687b      	ldr	r3, [r7, #4]
   15096:	4a2b      	ldr	r2, [pc, #172]	; (15144 <str_uni_istype+0xf8>)
   15098:	4293      	cmp	r3, r2
   1509a:	d01a      	beq.n	150d2 <str_uni_istype+0x86>
        for (size_t i = 0; i < self_len; i++) {
   1509c:	2300      	movs	r3, #0
   1509e:	61bb      	str	r3, [r7, #24]
   150a0:	e012      	b.n	150c8 <str_uni_istype+0x7c>
            if (!f(*self_data++)) {
   150a2:	69fb      	ldr	r3, [r7, #28]
   150a4:	1c5a      	adds	r2, r3, #1
   150a6:	61fa      	str	r2, [r7, #28]
   150a8:	781b      	ldrb	r3, [r3, #0]
   150aa:	461a      	mov	r2, r3
   150ac:	687b      	ldr	r3, [r7, #4]
   150ae:	4610      	mov	r0, r2
   150b0:	4798      	blx	r3
   150b2:	4603      	mov	r3, r0
   150b4:	f083 0301 	eor.w	r3, r3, #1
   150b8:	b2db      	uxtb	r3, r3
   150ba:	2b00      	cmp	r3, #0
   150bc:	d001      	beq.n	150c2 <str_uni_istype+0x76>
                return mp_const_false;
   150be:	4b1f      	ldr	r3, [pc, #124]	; (1513c <str_uni_istype+0xf0>)
   150c0:	e037      	b.n	15132 <str_uni_istype+0xe6>
        for (size_t i = 0; i < self_len; i++) {
   150c2:	69bb      	ldr	r3, [r7, #24]
   150c4:	3301      	adds	r3, #1
   150c6:	61bb      	str	r3, [r7, #24]
   150c8:	68fb      	ldr	r3, [r7, #12]
   150ca:	69ba      	ldr	r2, [r7, #24]
   150cc:	429a      	cmp	r2, r3
   150ce:	d3e8      	bcc.n	150a2 <str_uni_istype+0x56>
   150d0:	e02e      	b.n	15130 <str_uni_istype+0xe4>
            }
        }
    } else {
        bool contains_alpha = false;
   150d2:	2300      	movs	r3, #0
   150d4:	75fb      	strb	r3, [r7, #23]

        for (size_t i = 0; i < self_len; i++) { // only check alphanumeric characters
   150d6:	2300      	movs	r3, #0
   150d8:	613b      	str	r3, [r7, #16]
   150da:	e01d      	b.n	15118 <str_uni_istype+0xcc>
            if (unichar_isalpha(*self_data++)) {
   150dc:	69fb      	ldr	r3, [r7, #28]
   150de:	1c5a      	adds	r2, r3, #1
   150e0:	61fa      	str	r2, [r7, #28]
   150e2:	781b      	ldrb	r3, [r3, #0]
   150e4:	4618      	mov	r0, r3
   150e6:	f7ed f969 	bl	23bc <unichar_isalpha>
   150ea:	4603      	mov	r3, r0
   150ec:	2b00      	cmp	r3, #0
   150ee:	d010      	beq.n	15112 <str_uni_istype+0xc6>
                contains_alpha = true;
   150f0:	2301      	movs	r3, #1
   150f2:	75fb      	strb	r3, [r7, #23]
                if (!f(*(self_data - 1))) { // -1 because we already incremented above
   150f4:	69fb      	ldr	r3, [r7, #28]
   150f6:	3b01      	subs	r3, #1
   150f8:	781b      	ldrb	r3, [r3, #0]
   150fa:	461a      	mov	r2, r3
   150fc:	687b      	ldr	r3, [r7, #4]
   150fe:	4610      	mov	r0, r2
   15100:	4798      	blx	r3
   15102:	4603      	mov	r3, r0
   15104:	f083 0301 	eor.w	r3, r3, #1
   15108:	b2db      	uxtb	r3, r3
   1510a:	2b00      	cmp	r3, #0
   1510c:	d001      	beq.n	15112 <str_uni_istype+0xc6>
                    return mp_const_false;
   1510e:	4b0b      	ldr	r3, [pc, #44]	; (1513c <str_uni_istype+0xf0>)
   15110:	e00f      	b.n	15132 <str_uni_istype+0xe6>
        for (size_t i = 0; i < self_len; i++) { // only check alphanumeric characters
   15112:	693b      	ldr	r3, [r7, #16]
   15114:	3301      	adds	r3, #1
   15116:	613b      	str	r3, [r7, #16]
   15118:	68fb      	ldr	r3, [r7, #12]
   1511a:	693a      	ldr	r2, [r7, #16]
   1511c:	429a      	cmp	r2, r3
   1511e:	d3dd      	bcc.n	150dc <str_uni_istype+0x90>
                }
            }
        }

        if (!contains_alpha) {
   15120:	7dfb      	ldrb	r3, [r7, #23]
   15122:	f083 0301 	eor.w	r3, r3, #1
   15126:	b2db      	uxtb	r3, r3
   15128:	2b00      	cmp	r3, #0
   1512a:	d001      	beq.n	15130 <str_uni_istype+0xe4>
            return mp_const_false;
   1512c:	4b03      	ldr	r3, [pc, #12]	; (1513c <str_uni_istype+0xf0>)
   1512e:	e000      	b.n	15132 <str_uni_istype+0xe6>
        }
    }

    return mp_const_true;
   15130:	4b05      	ldr	r3, [pc, #20]	; (15148 <str_uni_istype+0xfc>)
}
   15132:	4618      	mov	r0, r3
   15134:	3720      	adds	r7, #32
   15136:	46bd      	mov	sp, r7
   15138:	bd80      	pop	{r7, pc}
   1513a:	bf00      	nop
   1513c:	0001fc3c 	.word	0x0001fc3c
   15140:	000024b1 	.word	0x000024b1
   15144:	000024ed 	.word	0x000024ed
   15148:	0001fc44 	.word	0x0001fc44

0001514c <str_isspace>:

STATIC mp_obj_t str_isspace(mp_obj_t self_in) {
   1514c:	b580      	push	{r7, lr}
   1514e:	b082      	sub	sp, #8
   15150:	af00      	add	r7, sp, #0
   15152:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isspace, self_in);
   15154:	6879      	ldr	r1, [r7, #4]
   15156:	4804      	ldr	r0, [pc, #16]	; (15168 <str_isspace+0x1c>)
   15158:	f7ff ff78 	bl	1504c <str_uni_istype>
   1515c:	4603      	mov	r3, r0
}
   1515e:	4618      	mov	r0, r3
   15160:	3708      	adds	r7, #8
   15162:	46bd      	mov	sp, r7
   15164:	bd80      	pop	{r7, pc}
   15166:	bf00      	nop
   15168:	00002381 	.word	0x00002381

0001516c <str_isalpha>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isspace_obj, str_isspace);

STATIC mp_obj_t str_isalpha(mp_obj_t self_in) {
   1516c:	b580      	push	{r7, lr}
   1516e:	b082      	sub	sp, #8
   15170:	af00      	add	r7, sp, #0
   15172:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isalpha, self_in);
   15174:	6879      	ldr	r1, [r7, #4]
   15176:	4804      	ldr	r0, [pc, #16]	; (15188 <str_isalpha+0x1c>)
   15178:	f7ff ff68 	bl	1504c <str_uni_istype>
   1517c:	4603      	mov	r3, r0
}
   1517e:	4618      	mov	r0, r3
   15180:	3708      	adds	r7, #8
   15182:	46bd      	mov	sp, r7
   15184:	bd80      	pop	{r7, pc}
   15186:	bf00      	nop
   15188:	000023bd 	.word	0x000023bd

0001518c <str_isdigit>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isalpha_obj, str_isalpha);

STATIC mp_obj_t str_isdigit(mp_obj_t self_in) {
   1518c:	b580      	push	{r7, lr}
   1518e:	b082      	sub	sp, #8
   15190:	af00      	add	r7, sp, #0
   15192:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isdigit, self_in);
   15194:	6879      	ldr	r1, [r7, #4]
   15196:	4804      	ldr	r0, [pc, #16]	; (151a8 <str_isdigit+0x1c>)
   15198:	f7ff ff58 	bl	1504c <str_uni_istype>
   1519c:	4603      	mov	r3, r0
}
   1519e:	4618      	mov	r0, r3
   151a0:	3708      	adds	r7, #8
   151a2:	46bd      	mov	sp, r7
   151a4:	bd80      	pop	{r7, pc}
   151a6:	bf00      	nop
   151a8:	000023f9 	.word	0x000023f9

000151ac <str_isupper>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isdigit_obj, str_isdigit);

STATIC mp_obj_t str_isupper(mp_obj_t self_in) {
   151ac:	b580      	push	{r7, lr}
   151ae:	b082      	sub	sp, #8
   151b0:	af00      	add	r7, sp, #0
   151b2:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_isupper, self_in);
   151b4:	6879      	ldr	r1, [r7, #4]
   151b6:	4804      	ldr	r0, [pc, #16]	; (151c8 <str_isupper+0x1c>)
   151b8:	f7ff ff48 	bl	1504c <str_uni_istype>
   151bc:	4603      	mov	r3, r0
}
   151be:	4618      	mov	r0, r3
   151c0:	3708      	adds	r7, #8
   151c2:	46bd      	mov	sp, r7
   151c4:	bd80      	pop	{r7, pc}
   151c6:	bf00      	nop
   151c8:	000024b1 	.word	0x000024b1

000151cc <str_islower>:
MP_DEFINE_CONST_FUN_OBJ_1(str_isupper_obj, str_isupper);

STATIC mp_obj_t str_islower(mp_obj_t self_in) {
   151cc:	b580      	push	{r7, lr}
   151ce:	b082      	sub	sp, #8
   151d0:	af00      	add	r7, sp, #0
   151d2:	6078      	str	r0, [r7, #4]
    return str_uni_istype(unichar_islower, self_in);
   151d4:	6879      	ldr	r1, [r7, #4]
   151d6:	4804      	ldr	r0, [pc, #16]	; (151e8 <str_islower+0x1c>)
   151d8:	f7ff ff38 	bl	1504c <str_uni_istype>
   151dc:	4603      	mov	r3, r0
}
   151de:	4618      	mov	r0, r3
   151e0:	3708      	adds	r7, #8
   151e2:	46bd      	mov	sp, r7
   151e4:	bd80      	pop	{r7, pc}
   151e6:	bf00      	nop
   151e8:	000024ed 	.word	0x000024ed

000151ec <mp_obj_str_get_buffer>:
    return bytes_make_new(NULL, n_args, 0, args);
}
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(str_encode_obj, 1, 3, str_encode);
#endif

mp_int_t mp_obj_str_get_buffer(mp_obj_t self_in, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
   151ec:	b580      	push	{r7, lr}
   151ee:	b086      	sub	sp, #24
   151f0:	af00      	add	r7, sp, #0
   151f2:	60f8      	str	r0, [r7, #12]
   151f4:	60b9      	str	r1, [r7, #8]
   151f6:	607a      	str	r2, [r7, #4]
    if (flags == MP_BUFFER_READ) {
   151f8:	687b      	ldr	r3, [r7, #4]
   151fa:	2b01      	cmp	r3, #1
   151fc:	d120      	bne.n	15240 <mp_obj_str_get_buffer+0x54>
        GET_STR_DATA_LEN(self_in, str_data, str_len);
   151fe:	68f8      	ldr	r0, [r7, #12]
   15200:	f7fd f80e 	bl	12220 <MP_OBJ_IS_QSTR>
   15204:	4603      	mov	r3, r0
   15206:	2b00      	cmp	r3, #0
   15208:	d009      	beq.n	1521e <mp_obj_str_get_buffer+0x32>
   1520a:	68fb      	ldr	r3, [r7, #12]
   1520c:	089b      	lsrs	r3, r3, #2
   1520e:	f107 0210 	add.w	r2, r7, #16
   15212:	4611      	mov	r1, r2
   15214:	4618      	mov	r0, r3
   15216:	f7eb fffb 	bl	1210 <qstr_data>
   1521a:	6178      	str	r0, [r7, #20]
   1521c:	e005      	b.n	1522a <mp_obj_str_get_buffer+0x3e>
   1521e:	68fb      	ldr	r3, [r7, #12]
   15220:	689b      	ldr	r3, [r3, #8]
   15222:	613b      	str	r3, [r7, #16]
   15224:	68fb      	ldr	r3, [r7, #12]
   15226:	68db      	ldr	r3, [r3, #12]
   15228:	617b      	str	r3, [r7, #20]
        bufinfo->buf = (void*)str_data;
   1522a:	68bb      	ldr	r3, [r7, #8]
   1522c:	697a      	ldr	r2, [r7, #20]
   1522e:	601a      	str	r2, [r3, #0]
        bufinfo->len = str_len;
   15230:	693a      	ldr	r2, [r7, #16]
   15232:	68bb      	ldr	r3, [r7, #8]
   15234:	605a      	str	r2, [r3, #4]
        bufinfo->typecode = 'B'; // bytes should be unsigned, so should unicode byte-access
   15236:	68bb      	ldr	r3, [r7, #8]
   15238:	2242      	movs	r2, #66	; 0x42
   1523a:	609a      	str	r2, [r3, #8]
        return 0;
   1523c:	2300      	movs	r3, #0
   1523e:	e00a      	b.n	15256 <mp_obj_str_get_buffer+0x6a>
    } else {
        // can't write to a string
        bufinfo->buf = NULL;
   15240:	68bb      	ldr	r3, [r7, #8]
   15242:	2200      	movs	r2, #0
   15244:	601a      	str	r2, [r3, #0]
        bufinfo->len = 0;
   15246:	68bb      	ldr	r3, [r7, #8]
   15248:	2200      	movs	r2, #0
   1524a:	605a      	str	r2, [r3, #4]
        bufinfo->typecode = -1;
   1524c:	68bb      	ldr	r3, [r7, #8]
   1524e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15252:	609a      	str	r2, [r3, #8]
        return 1;
   15254:	2301      	movs	r3, #1
    }
}
   15256:	4618      	mov	r0, r3
   15258:	3718      	adds	r7, #24
   1525a:	46bd      	mov	sp, r7
   1525c:	bd80      	pop	{r7, pc}
   1525e:	bf00      	nop

00015260 <mp_obj_new_str_copy>:
const mp_obj_str_t mp_const_empty_bytes_obj = {{&mp_type_bytes}, 0, 0, (const byte*)""};

// Create a str/bytes object using the given data.  New memory is allocated and
// the data is copied across.  This function should only be used if the type is bytes,
// or if the type is str and the string data is known to be not interned.
mp_obj_t mp_obj_new_str_copy(const mp_obj_type_t *type, const byte* data, size_t len) {
   15260:	b580      	push	{r7, lr}
   15262:	b086      	sub	sp, #24
   15264:	af00      	add	r7, sp, #0
   15266:	60f8      	str	r0, [r7, #12]
   15268:	60b9      	str	r1, [r7, #8]
   1526a:	607a      	str	r2, [r7, #4]
    mp_obj_str_t *o = m_new_obj(mp_obj_str_t);
   1526c:	2010      	movs	r0, #16
   1526e:	f7eb f855 	bl	31c <m_malloc>
   15272:	6178      	str	r0, [r7, #20]
    o->base.type = type;
   15274:	697b      	ldr	r3, [r7, #20]
   15276:	68fa      	ldr	r2, [r7, #12]
   15278:	601a      	str	r2, [r3, #0]
    o->len = len;
   1527a:	697b      	ldr	r3, [r7, #20]
   1527c:	687a      	ldr	r2, [r7, #4]
   1527e:	609a      	str	r2, [r3, #8]
    if (data) {
   15280:	68bb      	ldr	r3, [r7, #8]
   15282:	2b00      	cmp	r3, #0
   15284:	d019      	beq.n	152ba <mp_obj_new_str_copy+0x5a>
        o->hash = qstr_compute_hash(data, len);
   15286:	6879      	ldr	r1, [r7, #4]
   15288:	68b8      	ldr	r0, [r7, #8]
   1528a:	f7eb fdc3 	bl	e14 <qstr_compute_hash>
   1528e:	4602      	mov	r2, r0
   15290:	697b      	ldr	r3, [r7, #20]
   15292:	605a      	str	r2, [r3, #4]
        byte *p = m_new(byte, len + 1);
   15294:	687b      	ldr	r3, [r7, #4]
   15296:	3301      	adds	r3, #1
   15298:	4618      	mov	r0, r3
   1529a:	f7eb f83f 	bl	31c <m_malloc>
   1529e:	6138      	str	r0, [r7, #16]
        o->data = p;
   152a0:	697b      	ldr	r3, [r7, #20]
   152a2:	693a      	ldr	r2, [r7, #16]
   152a4:	60da      	str	r2, [r3, #12]
        memcpy(p, data, len * sizeof(byte));
   152a6:	687a      	ldr	r2, [r7, #4]
   152a8:	68b9      	ldr	r1, [r7, #8]
   152aa:	6938      	ldr	r0, [r7, #16]
   152ac:	f006 fe0a 	bl	1bec4 <memcpy>
        p[len] = '\0'; // for now we add null for compatibility with C ASCIIZ strings
   152b0:	693a      	ldr	r2, [r7, #16]
   152b2:	687b      	ldr	r3, [r7, #4]
   152b4:	4413      	add	r3, r2
   152b6:	2200      	movs	r2, #0
   152b8:	701a      	strb	r2, [r3, #0]
    }
    return MP_OBJ_FROM_PTR(o);
   152ba:	697b      	ldr	r3, [r7, #20]
}
   152bc:	4618      	mov	r0, r3
   152be:	3718      	adds	r7, #24
   152c0:	46bd      	mov	sp, r7
   152c2:	bd80      	pop	{r7, pc}

000152c4 <mp_obj_new_str_of_type>:

// Create a str/bytes object using the given data.  If the type is str and the string
// data is already interned, then a qstr object is returned.  Otherwise new memory is
// allocated for the object and the data is copied across.
mp_obj_t mp_obj_new_str_of_type(const mp_obj_type_t *type, const byte* data, size_t len) {
   152c4:	b580      	push	{r7, lr}
   152c6:	b084      	sub	sp, #16
   152c8:	af00      	add	r7, sp, #0
   152ca:	60f8      	str	r0, [r7, #12]
   152cc:	60b9      	str	r1, [r7, #8]
   152ce:	607a      	str	r2, [r7, #4]
    if (type == &mp_type_str) {
   152d0:	68fb      	ldr	r3, [r7, #12]
   152d2:	4a09      	ldr	r2, [pc, #36]	; (152f8 <mp_obj_new_str_of_type+0x34>)
   152d4:	4293      	cmp	r3, r2
   152d6:	d105      	bne.n	152e4 <mp_obj_new_str_of_type+0x20>
        return mp_obj_new_str((const char*)data, len);
   152d8:	6879      	ldr	r1, [r7, #4]
   152da:	68b8      	ldr	r0, [r7, #8]
   152dc:	f000 f882 	bl	153e4 <mp_obj_new_str>
   152e0:	4603      	mov	r3, r0
   152e2:	e004      	b.n	152ee <mp_obj_new_str_of_type+0x2a>
    } else {
        return mp_obj_new_bytes(data, len);
   152e4:	6879      	ldr	r1, [r7, #4]
   152e6:	68b8      	ldr	r0, [r7, #8]
   152e8:	f000 f8d4 	bl	15494 <mp_obj_new_bytes>
   152ec:	4603      	mov	r3, r0
    }
}
   152ee:	4618      	mov	r0, r3
   152f0:	3710      	adds	r7, #16
   152f2:	46bd      	mov	sp, r7
   152f4:	bd80      	pop	{r7, pc}
   152f6:	bf00      	nop
   152f8:	00021be4 	.word	0x00021be4

000152fc <mp_obj_new_str_via_qstr>:

// Create a str using a qstr to store the data; may use existing or new qstr.
mp_obj_t mp_obj_new_str_via_qstr(const char* data, size_t len) {
   152fc:	b580      	push	{r7, lr}
   152fe:	b082      	sub	sp, #8
   15300:	af00      	add	r7, sp, #0
   15302:	6078      	str	r0, [r7, #4]
   15304:	6039      	str	r1, [r7, #0]
    return MP_OBJ_NEW_QSTR(qstr_from_strn(data, len));
   15306:	6839      	ldr	r1, [r7, #0]
   15308:	6878      	ldr	r0, [r7, #4]
   1530a:	f7eb fe97 	bl	103c <qstr_from_strn>
   1530e:	4603      	mov	r3, r0
   15310:	009b      	lsls	r3, r3, #2
   15312:	f043 0302 	orr.w	r3, r3, #2
}
   15316:	4618      	mov	r0, r3
   15318:	3708      	adds	r7, #8
   1531a:	46bd      	mov	sp, r7
   1531c:	bd80      	pop	{r7, pc}
   1531e:	bf00      	nop

00015320 <mp_obj_new_str_from_vstr>:

// Create a str/bytes object from the given vstr.  The vstr buffer is resized to
// the exact length required and then reused for the str/bytes object.  The vstr
// is cleared and can safely be passed to vstr_free if it was heap allocated.
mp_obj_t mp_obj_new_str_from_vstr(const mp_obj_type_t *type, vstr_t *vstr) {
   15320:	b580      	push	{r7, lr}
   15322:	b084      	sub	sp, #16
   15324:	af00      	add	r7, sp, #0
   15326:	6078      	str	r0, [r7, #4]
   15328:	6039      	str	r1, [r7, #0]
    // if not a bytes object, look if a qstr with this data already exists
    if (type == &mp_type_str) {
   1532a:	687b      	ldr	r3, [r7, #4]
   1532c:	4a2c      	ldr	r2, [pc, #176]	; (153e0 <mp_obj_new_str_from_vstr+0xc0>)
   1532e:	4293      	cmp	r3, r2
   15330:	d116      	bne.n	15360 <mp_obj_new_str_from_vstr+0x40>
        qstr q = qstr_find_strn(vstr->buf, vstr->len);
   15332:	683b      	ldr	r3, [r7, #0]
   15334:	689a      	ldr	r2, [r3, #8]
   15336:	683b      	ldr	r3, [r7, #0]
   15338:	685b      	ldr	r3, [r3, #4]
   1533a:	4619      	mov	r1, r3
   1533c:	4610      	mov	r0, r2
   1533e:	f7eb fe19 	bl	f74 <qstr_find_strn>
   15342:	60f8      	str	r0, [r7, #12]
        if (q != MP_QSTR_NULL) {
   15344:	68fb      	ldr	r3, [r7, #12]
   15346:	2b00      	cmp	r3, #0
   15348:	d00a      	beq.n	15360 <mp_obj_new_str_from_vstr+0x40>
            vstr_clear(vstr);
   1534a:	6838      	ldr	r0, [r7, #0]
   1534c:	f7ec f83c 	bl	13c8 <vstr_clear>
            vstr->alloc = 0;
   15350:	683b      	ldr	r3, [r7, #0]
   15352:	2200      	movs	r2, #0
   15354:	601a      	str	r2, [r3, #0]
            return MP_OBJ_NEW_QSTR(q);
   15356:	68fb      	ldr	r3, [r7, #12]
   15358:	009b      	lsls	r3, r3, #2
   1535a:	f043 0302 	orr.w	r3, r3, #2
   1535e:	e03b      	b.n	153d8 <mp_obj_new_str_from_vstr+0xb8>
        }
    }

    // make a new str/bytes object
    mp_obj_str_t *o = m_new_obj(mp_obj_str_t);
   15360:	2010      	movs	r0, #16
   15362:	f7ea ffdb 	bl	31c <m_malloc>
   15366:	60b8      	str	r0, [r7, #8]
    o->base.type = type;
   15368:	68bb      	ldr	r3, [r7, #8]
   1536a:	687a      	ldr	r2, [r7, #4]
   1536c:	601a      	str	r2, [r3, #0]
    o->len = vstr->len;
   1536e:	683b      	ldr	r3, [r7, #0]
   15370:	685a      	ldr	r2, [r3, #4]
   15372:	68bb      	ldr	r3, [r7, #8]
   15374:	609a      	str	r2, [r3, #8]
    o->hash = qstr_compute_hash((byte*)vstr->buf, vstr->len);
   15376:	683b      	ldr	r3, [r7, #0]
   15378:	689a      	ldr	r2, [r3, #8]
   1537a:	683b      	ldr	r3, [r7, #0]
   1537c:	685b      	ldr	r3, [r3, #4]
   1537e:	4619      	mov	r1, r3
   15380:	4610      	mov	r0, r2
   15382:	f7eb fd47 	bl	e14 <qstr_compute_hash>
   15386:	4602      	mov	r2, r0
   15388:	68bb      	ldr	r3, [r7, #8]
   1538a:	605a      	str	r2, [r3, #4]
    if (vstr->len + 1 == vstr->alloc) {
   1538c:	683b      	ldr	r3, [r7, #0]
   1538e:	685b      	ldr	r3, [r3, #4]
   15390:	1c5a      	adds	r2, r3, #1
   15392:	683b      	ldr	r3, [r7, #0]
   15394:	681b      	ldr	r3, [r3, #0]
   15396:	429a      	cmp	r2, r3
   15398:	d104      	bne.n	153a4 <mp_obj_new_str_from_vstr+0x84>
        o->data = (byte*)vstr->buf;
   1539a:	683b      	ldr	r3, [r7, #0]
   1539c:	689a      	ldr	r2, [r3, #8]
   1539e:	68bb      	ldr	r3, [r7, #8]
   153a0:	60da      	str	r2, [r3, #12]
   153a2:	e00b      	b.n	153bc <mp_obj_new_str_from_vstr+0x9c>
    } else {
        o->data = (byte*)m_renew(char, vstr->buf, vstr->alloc, vstr->len + 1);
   153a4:	683b      	ldr	r3, [r7, #0]
   153a6:	689a      	ldr	r2, [r3, #8]
   153a8:	683b      	ldr	r3, [r7, #0]
   153aa:	685b      	ldr	r3, [r3, #4]
   153ac:	3301      	adds	r3, #1
   153ae:	4619      	mov	r1, r3
   153b0:	4610      	mov	r0, r2
   153b2:	f7ea ffe7 	bl	384 <m_realloc>
   153b6:	4602      	mov	r2, r0
   153b8:	68bb      	ldr	r3, [r7, #8]
   153ba:	60da      	str	r2, [r3, #12]
    }
    ((byte*)o->data)[o->len] = '\0'; // add null byte
   153bc:	68bb      	ldr	r3, [r7, #8]
   153be:	68da      	ldr	r2, [r3, #12]
   153c0:	68bb      	ldr	r3, [r7, #8]
   153c2:	689b      	ldr	r3, [r3, #8]
   153c4:	4413      	add	r3, r2
   153c6:	2200      	movs	r2, #0
   153c8:	701a      	strb	r2, [r3, #0]
    vstr->buf = NULL;
   153ca:	683b      	ldr	r3, [r7, #0]
   153cc:	2200      	movs	r2, #0
   153ce:	609a      	str	r2, [r3, #8]
    vstr->alloc = 0;
   153d0:	683b      	ldr	r3, [r7, #0]
   153d2:	2200      	movs	r2, #0
   153d4:	601a      	str	r2, [r3, #0]
    return MP_OBJ_FROM_PTR(o);
   153d6:	68bb      	ldr	r3, [r7, #8]
}
   153d8:	4618      	mov	r0, r3
   153da:	3710      	adds	r7, #16
   153dc:	46bd      	mov	sp, r7
   153de:	bd80      	pop	{r7, pc}
   153e0:	00021be4 	.word	0x00021be4

000153e4 <mp_obj_new_str>:

mp_obj_t mp_obj_new_str(const char* data, size_t len) {
   153e4:	b580      	push	{r7, lr}
   153e6:	b084      	sub	sp, #16
   153e8:	af00      	add	r7, sp, #0
   153ea:	6078      	str	r0, [r7, #4]
   153ec:	6039      	str	r1, [r7, #0]
    qstr q = qstr_find_strn(data, len);
   153ee:	6839      	ldr	r1, [r7, #0]
   153f0:	6878      	ldr	r0, [r7, #4]
   153f2:	f7eb fdbf 	bl	f74 <qstr_find_strn>
   153f6:	60f8      	str	r0, [r7, #12]
    if (q != MP_QSTR_NULL) {
   153f8:	68fb      	ldr	r3, [r7, #12]
   153fa:	2b00      	cmp	r3, #0
   153fc:	d004      	beq.n	15408 <mp_obj_new_str+0x24>
        // qstr with this data already exists
        return MP_OBJ_NEW_QSTR(q);
   153fe:	68fb      	ldr	r3, [r7, #12]
   15400:	009b      	lsls	r3, r3, #2
   15402:	f043 0302 	orr.w	r3, r3, #2
   15406:	e005      	b.n	15414 <mp_obj_new_str+0x30>
    } else {
        // no existing qstr, don't make one
        return mp_obj_new_str_copy(&mp_type_str, (const byte*)data, len);
   15408:	683a      	ldr	r2, [r7, #0]
   1540a:	6879      	ldr	r1, [r7, #4]
   1540c:	4803      	ldr	r0, [pc, #12]	; (1541c <mp_obj_new_str+0x38>)
   1540e:	f7ff ff27 	bl	15260 <mp_obj_new_str_copy>
   15412:	4603      	mov	r3, r0
    }
}
   15414:	4618      	mov	r0, r3
   15416:	3710      	adds	r7, #16
   15418:	46bd      	mov	sp, r7
   1541a:	bd80      	pop	{r7, pc}
   1541c:	00021be4 	.word	0x00021be4

00015420 <mp_obj_str_intern>:

mp_obj_t mp_obj_str_intern(mp_obj_t str) {
   15420:	b580      	push	{r7, lr}
   15422:	b084      	sub	sp, #16
   15424:	af00      	add	r7, sp, #0
   15426:	6078      	str	r0, [r7, #4]
    GET_STR_DATA_LEN(str, data, len);
   15428:	6878      	ldr	r0, [r7, #4]
   1542a:	f7fc fef9 	bl	12220 <MP_OBJ_IS_QSTR>
   1542e:	4603      	mov	r3, r0
   15430:	2b00      	cmp	r3, #0
   15432:	d009      	beq.n	15448 <mp_obj_str_intern+0x28>
   15434:	687b      	ldr	r3, [r7, #4]
   15436:	089b      	lsrs	r3, r3, #2
   15438:	f107 0208 	add.w	r2, r7, #8
   1543c:	4611      	mov	r1, r2
   1543e:	4618      	mov	r0, r3
   15440:	f7eb fee6 	bl	1210 <qstr_data>
   15444:	60f8      	str	r0, [r7, #12]
   15446:	e005      	b.n	15454 <mp_obj_str_intern+0x34>
   15448:	687b      	ldr	r3, [r7, #4]
   1544a:	689b      	ldr	r3, [r3, #8]
   1544c:	60bb      	str	r3, [r7, #8]
   1544e:	687b      	ldr	r3, [r7, #4]
   15450:	68db      	ldr	r3, [r3, #12]
   15452:	60fb      	str	r3, [r7, #12]
    return mp_obj_new_str_via_qstr((const char*)data, len);
   15454:	68bb      	ldr	r3, [r7, #8]
   15456:	4619      	mov	r1, r3
   15458:	68f8      	ldr	r0, [r7, #12]
   1545a:	f7ff ff4f 	bl	152fc <mp_obj_new_str_via_qstr>
   1545e:	4603      	mov	r3, r0
}
   15460:	4618      	mov	r0, r3
   15462:	3710      	adds	r7, #16
   15464:	46bd      	mov	sp, r7
   15466:	bd80      	pop	{r7, pc}

00015468 <mp_obj_str_intern_checked>:

mp_obj_t mp_obj_str_intern_checked(mp_obj_t obj) {
   15468:	b580      	push	{r7, lr}
   1546a:	b084      	sub	sp, #16
   1546c:	af00      	add	r7, sp, #0
   1546e:	6078      	str	r0, [r7, #4]
    size_t len;
    const char *data = mp_obj_str_get_data(obj, &len);
   15470:	f107 0308 	add.w	r3, r7, #8
   15474:	4619      	mov	r1, r3
   15476:	6878      	ldr	r0, [r7, #4]
   15478:	f000 f916 	bl	156a8 <mp_obj_str_get_data>
   1547c:	60f8      	str	r0, [r7, #12]
    return mp_obj_new_str_via_qstr((const char*)data, len);
   1547e:	68bb      	ldr	r3, [r7, #8]
   15480:	4619      	mov	r1, r3
   15482:	68f8      	ldr	r0, [r7, #12]
   15484:	f7ff ff3a 	bl	152fc <mp_obj_new_str_via_qstr>
   15488:	4603      	mov	r3, r0
}
   1548a:	4618      	mov	r0, r3
   1548c:	3710      	adds	r7, #16
   1548e:	46bd      	mov	sp, r7
   15490:	bd80      	pop	{r7, pc}
   15492:	bf00      	nop

00015494 <mp_obj_new_bytes>:

mp_obj_t mp_obj_new_bytes(const byte* data, size_t len) {
   15494:	b580      	push	{r7, lr}
   15496:	b082      	sub	sp, #8
   15498:	af00      	add	r7, sp, #0
   1549a:	6078      	str	r0, [r7, #4]
   1549c:	6039      	str	r1, [r7, #0]
    return mp_obj_new_str_copy(&mp_type_bytes, data, len);
   1549e:	683a      	ldr	r2, [r7, #0]
   154a0:	6879      	ldr	r1, [r7, #4]
   154a2:	4804      	ldr	r0, [pc, #16]	; (154b4 <mp_obj_new_bytes+0x20>)
   154a4:	f7ff fedc 	bl	15260 <mp_obj_new_str_copy>
   154a8:	4603      	mov	r3, r0
}
   154aa:	4618      	mov	r0, r3
   154ac:	3708      	adds	r7, #8
   154ae:	46bd      	mov	sp, r7
   154b0:	bd80      	pop	{r7, pc}
   154b2:	bf00      	nop
   154b4:	00021c20 	.word	0x00021c20

000154b8 <mp_obj_str_equal>:

bool mp_obj_str_equal(mp_obj_t s1, mp_obj_t s2) {
   154b8:	b580      	push	{r7, lr}
   154ba:	b088      	sub	sp, #32
   154bc:	af00      	add	r7, sp, #0
   154be:	6078      	str	r0, [r7, #4]
   154c0:	6039      	str	r1, [r7, #0]
    if (MP_OBJ_IS_QSTR(s1) && MP_OBJ_IS_QSTR(s2)) {
   154c2:	6878      	ldr	r0, [r7, #4]
   154c4:	f7fc feac 	bl	12220 <MP_OBJ_IS_QSTR>
   154c8:	4603      	mov	r3, r0
   154ca:	2b00      	cmp	r3, #0
   154cc:	d00d      	beq.n	154ea <mp_obj_str_equal+0x32>
   154ce:	6838      	ldr	r0, [r7, #0]
   154d0:	f7fc fea6 	bl	12220 <MP_OBJ_IS_QSTR>
   154d4:	4603      	mov	r3, r0
   154d6:	2b00      	cmp	r3, #0
   154d8:	d007      	beq.n	154ea <mp_obj_str_equal+0x32>
        return s1 == s2;
   154da:	687a      	ldr	r2, [r7, #4]
   154dc:	683b      	ldr	r3, [r7, #0]
   154de:	429a      	cmp	r2, r3
   154e0:	bf0c      	ite	eq
   154e2:	2301      	moveq	r3, #1
   154e4:	2300      	movne	r3, #0
   154e6:	b2db      	uxtb	r3, r3
   154e8:	e069      	b.n	155be <mp_obj_str_equal+0x106>
    } else {
        GET_STR_HASH(s1, h1);
   154ea:	6878      	ldr	r0, [r7, #4]
   154ec:	f7fc fe98 	bl	12220 <MP_OBJ_IS_QSTR>
   154f0:	4603      	mov	r3, r0
   154f2:	2b00      	cmp	r3, #0
   154f4:	d006      	beq.n	15504 <mp_obj_str_equal+0x4c>
   154f6:	687b      	ldr	r3, [r7, #4]
   154f8:	089b      	lsrs	r3, r3, #2
   154fa:	4618      	mov	r0, r3
   154fc:	f7eb fe5c 	bl	11b8 <qstr_hash>
   15500:	61f8      	str	r0, [r7, #28]
   15502:	e002      	b.n	1550a <mp_obj_str_equal+0x52>
   15504:	687b      	ldr	r3, [r7, #4]
   15506:	685b      	ldr	r3, [r3, #4]
   15508:	61fb      	str	r3, [r7, #28]
        GET_STR_HASH(s2, h2);
   1550a:	6838      	ldr	r0, [r7, #0]
   1550c:	f7fc fe88 	bl	12220 <MP_OBJ_IS_QSTR>
   15510:	4603      	mov	r3, r0
   15512:	2b00      	cmp	r3, #0
   15514:	d006      	beq.n	15524 <mp_obj_str_equal+0x6c>
   15516:	683b      	ldr	r3, [r7, #0]
   15518:	089b      	lsrs	r3, r3, #2
   1551a:	4618      	mov	r0, r3
   1551c:	f7eb fe4c 	bl	11b8 <qstr_hash>
   15520:	61b8      	str	r0, [r7, #24]
   15522:	e002      	b.n	1552a <mp_obj_str_equal+0x72>
   15524:	683b      	ldr	r3, [r7, #0]
   15526:	685b      	ldr	r3, [r3, #4]
   15528:	61bb      	str	r3, [r7, #24]
        // If any of hashes is 0, it means it's not valid
        if (h1 != 0 && h2 != 0 && h1 != h2) {
   1552a:	69fb      	ldr	r3, [r7, #28]
   1552c:	2b00      	cmp	r3, #0
   1552e:	d008      	beq.n	15542 <mp_obj_str_equal+0x8a>
   15530:	69bb      	ldr	r3, [r7, #24]
   15532:	2b00      	cmp	r3, #0
   15534:	d005      	beq.n	15542 <mp_obj_str_equal+0x8a>
   15536:	69fa      	ldr	r2, [r7, #28]
   15538:	69bb      	ldr	r3, [r7, #24]
   1553a:	429a      	cmp	r2, r3
   1553c:	d001      	beq.n	15542 <mp_obj_str_equal+0x8a>
            return false;
   1553e:	2300      	movs	r3, #0
   15540:	e03d      	b.n	155be <mp_obj_str_equal+0x106>
        }
        GET_STR_DATA_LEN(s1, d1, l1);
   15542:	6878      	ldr	r0, [r7, #4]
   15544:	f7fc fe6c 	bl	12220 <MP_OBJ_IS_QSTR>
   15548:	4603      	mov	r3, r0
   1554a:	2b00      	cmp	r3, #0
   1554c:	d009      	beq.n	15562 <mp_obj_str_equal+0xaa>
   1554e:	687b      	ldr	r3, [r7, #4]
   15550:	089b      	lsrs	r3, r3, #2
   15552:	f107 020c 	add.w	r2, r7, #12
   15556:	4611      	mov	r1, r2
   15558:	4618      	mov	r0, r3
   1555a:	f7eb fe59 	bl	1210 <qstr_data>
   1555e:	6178      	str	r0, [r7, #20]
   15560:	e005      	b.n	1556e <mp_obj_str_equal+0xb6>
   15562:	687b      	ldr	r3, [r7, #4]
   15564:	689b      	ldr	r3, [r3, #8]
   15566:	60fb      	str	r3, [r7, #12]
   15568:	687b      	ldr	r3, [r7, #4]
   1556a:	68db      	ldr	r3, [r3, #12]
   1556c:	617b      	str	r3, [r7, #20]
        GET_STR_DATA_LEN(s2, d2, l2);
   1556e:	6838      	ldr	r0, [r7, #0]
   15570:	f7fc fe56 	bl	12220 <MP_OBJ_IS_QSTR>
   15574:	4603      	mov	r3, r0
   15576:	2b00      	cmp	r3, #0
   15578:	d009      	beq.n	1558e <mp_obj_str_equal+0xd6>
   1557a:	683b      	ldr	r3, [r7, #0]
   1557c:	089b      	lsrs	r3, r3, #2
   1557e:	f107 0208 	add.w	r2, r7, #8
   15582:	4611      	mov	r1, r2
   15584:	4618      	mov	r0, r3
   15586:	f7eb fe43 	bl	1210 <qstr_data>
   1558a:	6138      	str	r0, [r7, #16]
   1558c:	e005      	b.n	1559a <mp_obj_str_equal+0xe2>
   1558e:	683b      	ldr	r3, [r7, #0]
   15590:	689b      	ldr	r3, [r3, #8]
   15592:	60bb      	str	r3, [r7, #8]
   15594:	683b      	ldr	r3, [r7, #0]
   15596:	68db      	ldr	r3, [r3, #12]
   15598:	613b      	str	r3, [r7, #16]
        if (l1 != l2) {
   1559a:	68fa      	ldr	r2, [r7, #12]
   1559c:	68bb      	ldr	r3, [r7, #8]
   1559e:	429a      	cmp	r2, r3
   155a0:	d001      	beq.n	155a6 <mp_obj_str_equal+0xee>
            return false;
   155a2:	2300      	movs	r3, #0
   155a4:	e00b      	b.n	155be <mp_obj_str_equal+0x106>
        }
        return memcmp(d1, d2, l1) == 0;
   155a6:	68fb      	ldr	r3, [r7, #12]
   155a8:	461a      	mov	r2, r3
   155aa:	6939      	ldr	r1, [r7, #16]
   155ac:	6978      	ldr	r0, [r7, #20]
   155ae:	f006 fd71 	bl	1c094 <memcmp>
   155b2:	4603      	mov	r3, r0
   155b4:	2b00      	cmp	r3, #0
   155b6:	bf0c      	ite	eq
   155b8:	2301      	moveq	r3, #1
   155ba:	2300      	movne	r3, #0
   155bc:	b2db      	uxtb	r3, r3
    }
}
   155be:	4618      	mov	r0, r3
   155c0:	3720      	adds	r7, #32
   155c2:	46bd      	mov	sp, r7
   155c4:	bd80      	pop	{r7, pc}
   155c6:	bf00      	nop

000155c8 <bad_implicit_conversion>:

STATIC NORETURN void bad_implicit_conversion(mp_obj_t self_in) {
   155c8:	b580      	push	{r7, lr}
   155ca:	b082      	sub	sp, #8
   155cc:	af00      	add	r7, sp, #0
   155ce:	6078      	str	r0, [r7, #4]
    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("can't convert to str implicitly");
   155d0:	4801      	ldr	r0, [pc, #4]	; (155d8 <bad_implicit_conversion+0x10>)
   155d2:	f7f7 fd05 	bl	cfe0 <mp_raise_TypeError>
   155d6:	bf00      	nop
   155d8:	00021c70 	.word	0x00021c70

000155dc <mp_obj_str_get_qstr>:
    }
}

// use this if you will anyway convert the string to a qstr
// will be more efficient for the case where it's already a qstr
qstr mp_obj_str_get_qstr(mp_obj_t self_in) {
   155dc:	b580      	push	{r7, lr}
   155de:	b084      	sub	sp, #16
   155e0:	af00      	add	r7, sp, #0
   155e2:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_QSTR(self_in)) {
   155e4:	6878      	ldr	r0, [r7, #4]
   155e6:	f7fc fe1b 	bl	12220 <MP_OBJ_IS_QSTR>
   155ea:	4603      	mov	r3, r0
   155ec:	2b00      	cmp	r3, #0
   155ee:	d002      	beq.n	155f6 <mp_obj_str_get_qstr+0x1a>
        return MP_OBJ_QSTR_VALUE(self_in);
   155f0:	687b      	ldr	r3, [r7, #4]
   155f2:	089b      	lsrs	r3, r3, #2
   155f4:	e019      	b.n	1562a <mp_obj_str_get_qstr+0x4e>
    } else if (MP_OBJ_IS_TYPE(self_in, &mp_type_str)) {
   155f6:	6878      	ldr	r0, [r7, #4]
   155f8:	f7fc fe24 	bl	12244 <MP_OBJ_IS_OBJ>
   155fc:	4603      	mov	r3, r0
   155fe:	2b00      	cmp	r3, #0
   15600:	d010      	beq.n	15624 <mp_obj_str_get_qstr+0x48>
   15602:	687b      	ldr	r3, [r7, #4]
   15604:	681b      	ldr	r3, [r3, #0]
   15606:	4a0b      	ldr	r2, [pc, #44]	; (15634 <mp_obj_str_get_qstr+0x58>)
   15608:	4293      	cmp	r3, r2
   1560a:	d10b      	bne.n	15624 <mp_obj_str_get_qstr+0x48>
        mp_obj_str_t *self = MP_OBJ_TO_PTR(self_in);
   1560c:	687b      	ldr	r3, [r7, #4]
   1560e:	60fb      	str	r3, [r7, #12]
        return qstr_from_strn((char*)self->data, self->len);
   15610:	68fb      	ldr	r3, [r7, #12]
   15612:	68da      	ldr	r2, [r3, #12]
   15614:	68fb      	ldr	r3, [r7, #12]
   15616:	689b      	ldr	r3, [r3, #8]
   15618:	4619      	mov	r1, r3
   1561a:	4610      	mov	r0, r2
   1561c:	f7eb fd0e 	bl	103c <qstr_from_strn>
   15620:	4603      	mov	r3, r0
   15622:	e002      	b.n	1562a <mp_obj_str_get_qstr+0x4e>
    } else {
        bad_implicit_conversion(self_in);
   15624:	6878      	ldr	r0, [r7, #4]
   15626:	f7ff ffcf 	bl	155c8 <bad_implicit_conversion>
    }
}
   1562a:	4618      	mov	r0, r3
   1562c:	3710      	adds	r7, #16
   1562e:	46bd      	mov	sp, r7
   15630:	bd80      	pop	{r7, pc}
   15632:	bf00      	nop
   15634:	00021be4 	.word	0x00021be4

00015638 <mp_obj_str_get_str>:

// only use this function if you need the str data to be zero terminated
// at the moment all strings are zero terminated to help with C ASCIIZ compatibility
const char *mp_obj_str_get_str(mp_obj_t self_in) {
   15638:	b580      	push	{r7, lr}
   1563a:	b084      	sub	sp, #16
   1563c:	af00      	add	r7, sp, #0
   1563e:	6078      	str	r0, [r7, #4]
    if (MP_OBJ_IS_STR_OR_BYTES(self_in)) {
   15640:	6878      	ldr	r0, [r7, #4]
   15642:	f7fc fded 	bl	12220 <MP_OBJ_IS_QSTR>
   15646:	4603      	mov	r3, r0
   15648:	2b00      	cmp	r3, #0
   1564a:	d10b      	bne.n	15664 <mp_obj_str_get_str+0x2c>
   1564c:	6878      	ldr	r0, [r7, #4]
   1564e:	f7fc fdf9 	bl	12244 <MP_OBJ_IS_OBJ>
   15652:	4603      	mov	r3, r0
   15654:	2b00      	cmp	r3, #0
   15656:	d01d      	beq.n	15694 <mp_obj_str_get_str+0x5c>
   15658:	687b      	ldr	r3, [r7, #4]
   1565a:	681b      	ldr	r3, [r3, #0]
   1565c:	699b      	ldr	r3, [r3, #24]
   1565e:	4a11      	ldr	r2, [pc, #68]	; (156a4 <mp_obj_str_get_str+0x6c>)
   15660:	4293      	cmp	r3, r2
   15662:	d117      	bne.n	15694 <mp_obj_str_get_str+0x5c>
        GET_STR_DATA_LEN(self_in, s, l);
   15664:	6878      	ldr	r0, [r7, #4]
   15666:	f7fc fddb 	bl	12220 <MP_OBJ_IS_QSTR>
   1566a:	4603      	mov	r3, r0
   1566c:	2b00      	cmp	r3, #0
   1566e:	d009      	beq.n	15684 <mp_obj_str_get_str+0x4c>
   15670:	687b      	ldr	r3, [r7, #4]
   15672:	089b      	lsrs	r3, r3, #2
   15674:	f107 0208 	add.w	r2, r7, #8
   15678:	4611      	mov	r1, r2
   1567a:	4618      	mov	r0, r3
   1567c:	f7eb fdc8 	bl	1210 <qstr_data>
   15680:	60f8      	str	r0, [r7, #12]
   15682:	e005      	b.n	15690 <mp_obj_str_get_str+0x58>
   15684:	687b      	ldr	r3, [r7, #4]
   15686:	689b      	ldr	r3, [r3, #8]
   15688:	60bb      	str	r3, [r7, #8]
   1568a:	687b      	ldr	r3, [r7, #4]
   1568c:	68db      	ldr	r3, [r3, #12]
   1568e:	60fb      	str	r3, [r7, #12]
        (void)l; // len unused
        return (const char*)s;
   15690:	68fb      	ldr	r3, [r7, #12]
   15692:	e002      	b.n	1569a <mp_obj_str_get_str+0x62>
    } else {
        bad_implicit_conversion(self_in);
   15694:	6878      	ldr	r0, [r7, #4]
   15696:	f7ff ff97 	bl	155c8 <bad_implicit_conversion>
    }
}
   1569a:	4618      	mov	r0, r3
   1569c:	3710      	adds	r7, #16
   1569e:	46bd      	mov	sp, r7
   156a0:	bd80      	pop	{r7, pc}
   156a2:	bf00      	nop
   156a4:	00012895 	.word	0x00012895

000156a8 <mp_obj_str_get_data>:

const char *mp_obj_str_get_data(mp_obj_t self_in, size_t *len) {
   156a8:	b580      	push	{r7, lr}
   156aa:	b084      	sub	sp, #16
   156ac:	af00      	add	r7, sp, #0
   156ae:	6078      	str	r0, [r7, #4]
   156b0:	6039      	str	r1, [r7, #0]
    if (MP_OBJ_IS_STR_OR_BYTES(self_in)) {
   156b2:	6878      	ldr	r0, [r7, #4]
   156b4:	f7fc fdb4 	bl	12220 <MP_OBJ_IS_QSTR>
   156b8:	4603      	mov	r3, r0
   156ba:	2b00      	cmp	r3, #0
   156bc:	d10b      	bne.n	156d6 <mp_obj_str_get_data+0x2e>
   156be:	6878      	ldr	r0, [r7, #4]
   156c0:	f7fc fdc0 	bl	12244 <MP_OBJ_IS_OBJ>
   156c4:	4603      	mov	r3, r0
   156c6:	2b00      	cmp	r3, #0
   156c8:	d020      	beq.n	1570c <mp_obj_str_get_data+0x64>
   156ca:	687b      	ldr	r3, [r7, #4]
   156cc:	681b      	ldr	r3, [r3, #0]
   156ce:	699b      	ldr	r3, [r3, #24]
   156d0:	4a12      	ldr	r2, [pc, #72]	; (1571c <mp_obj_str_get_data+0x74>)
   156d2:	4293      	cmp	r3, r2
   156d4:	d11a      	bne.n	1570c <mp_obj_str_get_data+0x64>
        GET_STR_DATA_LEN(self_in, s, l);
   156d6:	6878      	ldr	r0, [r7, #4]
   156d8:	f7fc fda2 	bl	12220 <MP_OBJ_IS_QSTR>
   156dc:	4603      	mov	r3, r0
   156de:	2b00      	cmp	r3, #0
   156e0:	d009      	beq.n	156f6 <mp_obj_str_get_data+0x4e>
   156e2:	687b      	ldr	r3, [r7, #4]
   156e4:	089b      	lsrs	r3, r3, #2
   156e6:	f107 0208 	add.w	r2, r7, #8
   156ea:	4611      	mov	r1, r2
   156ec:	4618      	mov	r0, r3
   156ee:	f7eb fd8f 	bl	1210 <qstr_data>
   156f2:	60f8      	str	r0, [r7, #12]
   156f4:	e005      	b.n	15702 <mp_obj_str_get_data+0x5a>
   156f6:	687b      	ldr	r3, [r7, #4]
   156f8:	689b      	ldr	r3, [r3, #8]
   156fa:	60bb      	str	r3, [r7, #8]
   156fc:	687b      	ldr	r3, [r7, #4]
   156fe:	68db      	ldr	r3, [r3, #12]
   15700:	60fb      	str	r3, [r7, #12]
        *len = l;
   15702:	68ba      	ldr	r2, [r7, #8]
   15704:	683b      	ldr	r3, [r7, #0]
   15706:	601a      	str	r2, [r3, #0]
        return (const char*)s;
   15708:	68fb      	ldr	r3, [r7, #12]
   1570a:	e002      	b.n	15712 <mp_obj_str_get_data+0x6a>
    } else {
        bad_implicit_conversion(self_in);
   1570c:	6878      	ldr	r0, [r7, #4]
   1570e:	f7ff ff5b 	bl	155c8 <bad_implicit_conversion>
    }
}
   15712:	4618      	mov	r0, r3
   15714:	3710      	adds	r7, #16
   15716:	46bd      	mov	sp, r7
   15718:	bd80      	pop	{r7, pc}
   1571a:	bf00      	nop
   1571c:	00012895 	.word	0x00012895

00015720 <str_it_iternext>:
    mp_obj_t str;
    size_t cur;
} mp_obj_str8_it_t;

#if !MICROPY_PY_BUILTINS_STR_UNICODE
STATIC mp_obj_t str_it_iternext(mp_obj_t self_in) {
   15720:	b580      	push	{r7, lr}
   15722:	b086      	sub	sp, #24
   15724:	af00      	add	r7, sp, #0
   15726:	6078      	str	r0, [r7, #4]
    mp_obj_str8_it_t *self = MP_OBJ_TO_PTR(self_in);
   15728:	687b      	ldr	r3, [r7, #4]
   1572a:	613b      	str	r3, [r7, #16]
    GET_STR_DATA_LEN(self->str, str, len);
   1572c:	693b      	ldr	r3, [r7, #16]
   1572e:	689b      	ldr	r3, [r3, #8]
   15730:	4618      	mov	r0, r3
   15732:	f7fc fd75 	bl	12220 <MP_OBJ_IS_QSTR>
   15736:	4603      	mov	r3, r0
   15738:	2b00      	cmp	r3, #0
   1573a:	d00a      	beq.n	15752 <str_it_iternext+0x32>
   1573c:	693b      	ldr	r3, [r7, #16]
   1573e:	689b      	ldr	r3, [r3, #8]
   15740:	089b      	lsrs	r3, r3, #2
   15742:	f107 0208 	add.w	r2, r7, #8
   15746:	4611      	mov	r1, r2
   15748:	4618      	mov	r0, r3
   1574a:	f7eb fd61 	bl	1210 <qstr_data>
   1574e:	6178      	str	r0, [r7, #20]
   15750:	e007      	b.n	15762 <str_it_iternext+0x42>
   15752:	693b      	ldr	r3, [r7, #16]
   15754:	689b      	ldr	r3, [r3, #8]
   15756:	689b      	ldr	r3, [r3, #8]
   15758:	60bb      	str	r3, [r7, #8]
   1575a:	693b      	ldr	r3, [r7, #16]
   1575c:	689b      	ldr	r3, [r3, #8]
   1575e:	68db      	ldr	r3, [r3, #12]
   15760:	617b      	str	r3, [r7, #20]
    if (self->cur < len) {
   15762:	693b      	ldr	r3, [r7, #16]
   15764:	68da      	ldr	r2, [r3, #12]
   15766:	68bb      	ldr	r3, [r7, #8]
   15768:	429a      	cmp	r2, r3
   1576a:	d20f      	bcs.n	1578c <str_it_iternext+0x6c>
        mp_obj_t o_out = mp_obj_new_str_via_qstr((const char*)str + self->cur, 1);
   1576c:	693b      	ldr	r3, [r7, #16]
   1576e:	68db      	ldr	r3, [r3, #12]
   15770:	697a      	ldr	r2, [r7, #20]
   15772:	4413      	add	r3, r2
   15774:	2101      	movs	r1, #1
   15776:	4618      	mov	r0, r3
   15778:	f7ff fdc0 	bl	152fc <mp_obj_new_str_via_qstr>
   1577c:	60f8      	str	r0, [r7, #12]
        self->cur += 1;
   1577e:	693b      	ldr	r3, [r7, #16]
   15780:	68db      	ldr	r3, [r3, #12]
   15782:	1c5a      	adds	r2, r3, #1
   15784:	693b      	ldr	r3, [r7, #16]
   15786:	60da      	str	r2, [r3, #12]
        return o_out;
   15788:	68fb      	ldr	r3, [r7, #12]
   1578a:	e000      	b.n	1578e <str_it_iternext+0x6e>
    } else {
        return MP_OBJ_STOP_ITERATION;
   1578c:	2304      	movs	r3, #4
    }
}
   1578e:	4618      	mov	r0, r3
   15790:	3718      	adds	r7, #24
   15792:	46bd      	mov	sp, r7
   15794:	bd80      	pop	{r7, pc}
   15796:	bf00      	nop

00015798 <mp_obj_new_str_iterator>:

STATIC mp_obj_t mp_obj_new_str_iterator(mp_obj_t str, mp_obj_iter_buf_t *iter_buf) {
   15798:	b480      	push	{r7}
   1579a:	b085      	sub	sp, #20
   1579c:	af00      	add	r7, sp, #0
   1579e:	6078      	str	r0, [r7, #4]
   157a0:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_str8_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_str8_it_t *o = (mp_obj_str8_it_t*)iter_buf;
   157a2:	683b      	ldr	r3, [r7, #0]
   157a4:	60fb      	str	r3, [r7, #12]
    o->base.type = &mp_type_polymorph_iter;
   157a6:	68fb      	ldr	r3, [r7, #12]
   157a8:	4a08      	ldr	r2, [pc, #32]	; (157cc <mp_obj_new_str_iterator+0x34>)
   157aa:	601a      	str	r2, [r3, #0]
    o->iternext = str_it_iternext;
   157ac:	68fb      	ldr	r3, [r7, #12]
   157ae:	4a08      	ldr	r2, [pc, #32]	; (157d0 <mp_obj_new_str_iterator+0x38>)
   157b0:	605a      	str	r2, [r3, #4]
    o->str = str;
   157b2:	68fb      	ldr	r3, [r7, #12]
   157b4:	687a      	ldr	r2, [r7, #4]
   157b6:	609a      	str	r2, [r3, #8]
    o->cur = 0;
   157b8:	68fb      	ldr	r3, [r7, #12]
   157ba:	2200      	movs	r2, #0
   157bc:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   157be:	68fb      	ldr	r3, [r7, #12]
}
   157c0:	4618      	mov	r0, r3
   157c2:	3714      	adds	r7, #20
   157c4:	46bd      	mov	sp, r7
   157c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   157ca:	4770      	bx	lr
   157cc:	000214b4 	.word	0x000214b4
   157d0:	00015721 	.word	0x00015721

000157d4 <bytes_it_iternext>:
#endif

STATIC mp_obj_t bytes_it_iternext(mp_obj_t self_in) {
   157d4:	b580      	push	{r7, lr}
   157d6:	b086      	sub	sp, #24
   157d8:	af00      	add	r7, sp, #0
   157da:	6078      	str	r0, [r7, #4]
    mp_obj_str8_it_t *self = MP_OBJ_TO_PTR(self_in);
   157dc:	687b      	ldr	r3, [r7, #4]
   157de:	613b      	str	r3, [r7, #16]
    GET_STR_DATA_LEN(self->str, str, len);
   157e0:	693b      	ldr	r3, [r7, #16]
   157e2:	689b      	ldr	r3, [r3, #8]
   157e4:	4618      	mov	r0, r3
   157e6:	f7fc fd1b 	bl	12220 <MP_OBJ_IS_QSTR>
   157ea:	4603      	mov	r3, r0
   157ec:	2b00      	cmp	r3, #0
   157ee:	d00a      	beq.n	15806 <bytes_it_iternext+0x32>
   157f0:	693b      	ldr	r3, [r7, #16]
   157f2:	689b      	ldr	r3, [r3, #8]
   157f4:	089b      	lsrs	r3, r3, #2
   157f6:	f107 0208 	add.w	r2, r7, #8
   157fa:	4611      	mov	r1, r2
   157fc:	4618      	mov	r0, r3
   157fe:	f7eb fd07 	bl	1210 <qstr_data>
   15802:	6178      	str	r0, [r7, #20]
   15804:	e007      	b.n	15816 <bytes_it_iternext+0x42>
   15806:	693b      	ldr	r3, [r7, #16]
   15808:	689b      	ldr	r3, [r3, #8]
   1580a:	689b      	ldr	r3, [r3, #8]
   1580c:	60bb      	str	r3, [r7, #8]
   1580e:	693b      	ldr	r3, [r7, #16]
   15810:	689b      	ldr	r3, [r3, #8]
   15812:	68db      	ldr	r3, [r3, #12]
   15814:	617b      	str	r3, [r7, #20]
    if (self->cur < len) {
   15816:	693b      	ldr	r3, [r7, #16]
   15818:	68da      	ldr	r2, [r3, #12]
   1581a:	68bb      	ldr	r3, [r7, #8]
   1581c:	429a      	cmp	r2, r3
   1581e:	d20f      	bcs.n	15840 <bytes_it_iternext+0x6c>
        mp_obj_t o_out = MP_OBJ_NEW_SMALL_INT(str[self->cur]);
   15820:	693b      	ldr	r3, [r7, #16]
   15822:	68db      	ldr	r3, [r3, #12]
   15824:	697a      	ldr	r2, [r7, #20]
   15826:	4413      	add	r3, r2
   15828:	781b      	ldrb	r3, [r3, #0]
   1582a:	005b      	lsls	r3, r3, #1
   1582c:	f043 0301 	orr.w	r3, r3, #1
   15830:	60fb      	str	r3, [r7, #12]
        self->cur += 1;
   15832:	693b      	ldr	r3, [r7, #16]
   15834:	68db      	ldr	r3, [r3, #12]
   15836:	1c5a      	adds	r2, r3, #1
   15838:	693b      	ldr	r3, [r7, #16]
   1583a:	60da      	str	r2, [r3, #12]
        return o_out;
   1583c:	68fb      	ldr	r3, [r7, #12]
   1583e:	e000      	b.n	15842 <bytes_it_iternext+0x6e>
    } else {
        return MP_OBJ_STOP_ITERATION;
   15840:	2304      	movs	r3, #4
    }
}
   15842:	4618      	mov	r0, r3
   15844:	3718      	adds	r7, #24
   15846:	46bd      	mov	sp, r7
   15848:	bd80      	pop	{r7, pc}
   1584a:	bf00      	nop

0001584c <mp_obj_new_bytes_iterator>:

mp_obj_t mp_obj_new_bytes_iterator(mp_obj_t str, mp_obj_iter_buf_t *iter_buf) {
   1584c:	b480      	push	{r7}
   1584e:	b085      	sub	sp, #20
   15850:	af00      	add	r7, sp, #0
   15852:	6078      	str	r0, [r7, #4]
   15854:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_str8_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_str8_it_t *o = (mp_obj_str8_it_t*)iter_buf;
   15856:	683b      	ldr	r3, [r7, #0]
   15858:	60fb      	str	r3, [r7, #12]
    o->base.type = &mp_type_polymorph_iter;
   1585a:	68fb      	ldr	r3, [r7, #12]
   1585c:	4a08      	ldr	r2, [pc, #32]	; (15880 <mp_obj_new_bytes_iterator+0x34>)
   1585e:	601a      	str	r2, [r3, #0]
    o->iternext = bytes_it_iternext;
   15860:	68fb      	ldr	r3, [r7, #12]
   15862:	4a08      	ldr	r2, [pc, #32]	; (15884 <mp_obj_new_bytes_iterator+0x38>)
   15864:	605a      	str	r2, [r3, #4]
    o->str = str;
   15866:	68fb      	ldr	r3, [r7, #12]
   15868:	687a      	ldr	r2, [r7, #4]
   1586a:	609a      	str	r2, [r3, #8]
    o->cur = 0;
   1586c:	68fb      	ldr	r3, [r7, #12]
   1586e:	2200      	movs	r2, #0
   15870:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   15872:	68fb      	ldr	r3, [r7, #12]
}
   15874:	4618      	mov	r0, r3
   15876:	3714      	adds	r7, #20
   15878:	46bd      	mov	sp, r7
   1587a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1587e:	4770      	bx	lr
   15880:	000214b4 	.word	0x000214b4
   15884:	000157d5 	.word	0x000157d5

00015888 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   15888:	b480      	push	{r7}
   1588a:	b083      	sub	sp, #12
   1588c:	af00      	add	r7, sp, #0
   1588e:	6078      	str	r0, [r7, #4]
   15890:	687b      	ldr	r3, [r7, #4]
   15892:	f003 0303 	and.w	r3, r3, #3
   15896:	2b00      	cmp	r3, #0
   15898:	bf0c      	ite	eq
   1589a:	2301      	moveq	r3, #1
   1589c:	2300      	movne	r3, #0
   1589e:	b2db      	uxtb	r3, r3
   158a0:	4618      	mov	r0, r3
   158a2:	370c      	adds	r7, #12
   158a4:	46bd      	mov	sp, r7
   158a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   158aa:	4770      	bx	lr

000158ac <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   158ac:	b480      	push	{r7}
   158ae:	b083      	sub	sp, #12
   158b0:	af00      	add	r7, sp, #0
   158b2:	6078      	str	r0, [r7, #4]
   158b4:	687b      	ldr	r3, [r7, #4]
   158b6:	2b00      	cmp	r3, #0
   158b8:	d001      	beq.n	158be <mp_obj_new_bool+0x12>
   158ba:	4b04      	ldr	r3, [pc, #16]	; (158cc <mp_obj_new_bool+0x20>)
   158bc:	e000      	b.n	158c0 <mp_obj_new_bool+0x14>
   158be:	4b04      	ldr	r3, [pc, #16]	; (158d0 <mp_obj_new_bool+0x24>)
   158c0:	4618      	mov	r0, r3
   158c2:	370c      	adds	r7, #12
   158c4:	46bd      	mov	sp, r7
   158c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   158ca:	4770      	bx	lr
   158cc:	0001fc44 	.word	0x0001fc44
   158d0:	0001fc3c 	.word	0x0001fc3c

000158d4 <mp_obj_tuple_print>:
#include "py/runtime.h"

/******************************************************************************/
/* tuple                                                                      */

void mp_obj_tuple_print(const mp_print_t *print, mp_obj_t o_in, mp_print_kind_t kind) {
   158d4:	b580      	push	{r7, lr}
   158d6:	b086      	sub	sp, #24
   158d8:	af00      	add	r7, sp, #0
   158da:	60f8      	str	r0, [r7, #12]
   158dc:	60b9      	str	r1, [r7, #8]
   158de:	607a      	str	r2, [r7, #4]
    mp_obj_tuple_t *o = MP_OBJ_TO_PTR(o_in);
   158e0:	68bb      	ldr	r3, [r7, #8]
   158e2:	613b      	str	r3, [r7, #16]
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "[");
    } else {
        mp_print_str(print, "(");
   158e4:	4918      	ldr	r1, [pc, #96]	; (15948 <mp_obj_tuple_print+0x74>)
   158e6:	68f8      	ldr	r0, [r7, #12]
   158e8:	f7eb ffc8 	bl	187c <mp_print_str>
        kind = PRINT_REPR;
   158ec:	2301      	movs	r3, #1
   158ee:	607b      	str	r3, [r7, #4]
    }
    for (size_t i = 0; i < o->len; i++) {
   158f0:	2300      	movs	r3, #0
   158f2:	617b      	str	r3, [r7, #20]
   158f4:	e013      	b.n	1591e <mp_obj_tuple_print+0x4a>
        if (i > 0) {
   158f6:	697b      	ldr	r3, [r7, #20]
   158f8:	2b00      	cmp	r3, #0
   158fa:	d003      	beq.n	15904 <mp_obj_tuple_print+0x30>
            mp_print_str(print, ", ");
   158fc:	4913      	ldr	r1, [pc, #76]	; (1594c <mp_obj_tuple_print+0x78>)
   158fe:	68f8      	ldr	r0, [r7, #12]
   15900:	f7eb ffbc 	bl	187c <mp_print_str>
        }
        mp_obj_print_helper(print, o->items[i], kind);
   15904:	693b      	ldr	r3, [r7, #16]
   15906:	697a      	ldr	r2, [r7, #20]
   15908:	3202      	adds	r2, #2
   1590a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1590e:	687a      	ldr	r2, [r7, #4]
   15910:	4619      	mov	r1, r3
   15912:	68f8      	ldr	r0, [r7, #12]
   15914:	f7f7 ffb0 	bl	d878 <mp_obj_print_helper>
    for (size_t i = 0; i < o->len; i++) {
   15918:	697b      	ldr	r3, [r7, #20]
   1591a:	3301      	adds	r3, #1
   1591c:	617b      	str	r3, [r7, #20]
   1591e:	693b      	ldr	r3, [r7, #16]
   15920:	685a      	ldr	r2, [r3, #4]
   15922:	697b      	ldr	r3, [r7, #20]
   15924:	429a      	cmp	r2, r3
   15926:	d8e6      	bhi.n	158f6 <mp_obj_tuple_print+0x22>
    }
    if (MICROPY_PY_UJSON && kind == PRINT_JSON) {
        mp_print_str(print, "]");
    } else {
        if (o->len == 1) {
   15928:	693b      	ldr	r3, [r7, #16]
   1592a:	685b      	ldr	r3, [r3, #4]
   1592c:	2b01      	cmp	r3, #1
   1592e:	d103      	bne.n	15938 <mp_obj_tuple_print+0x64>
            mp_print_str(print, ",");
   15930:	4907      	ldr	r1, [pc, #28]	; (15950 <mp_obj_tuple_print+0x7c>)
   15932:	68f8      	ldr	r0, [r7, #12]
   15934:	f7eb ffa2 	bl	187c <mp_print_str>
        }
        mp_print_str(print, ")");
   15938:	4906      	ldr	r1, [pc, #24]	; (15954 <mp_obj_tuple_print+0x80>)
   1593a:	68f8      	ldr	r0, [r7, #12]
   1593c:	f7eb ff9e 	bl	187c <mp_print_str>
    }
}
   15940:	bf00      	nop
   15942:	3718      	adds	r7, #24
   15944:	46bd      	mov	sp, r7
   15946:	bd80      	pop	{r7, pc}
   15948:	00021d1c 	.word	0x00021d1c
   1594c:	00021d20 	.word	0x00021d20
   15950:	00021d24 	.word	0x00021d24
   15954:	00021d28 	.word	0x00021d28

00015958 <mp_obj_tuple_make_new>:

STATIC mp_obj_t mp_obj_tuple_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   15958:	b580      	push	{r7, lr}
   1595a:	b08c      	sub	sp, #48	; 0x30
   1595c:	af02      	add	r7, sp, #8
   1595e:	60f8      	str	r0, [r7, #12]
   15960:	60b9      	str	r1, [r7, #8]
   15962:	607a      	str	r2, [r7, #4]
   15964:	603b      	str	r3, [r7, #0]
    (void)type_in;

    mp_arg_check_num(n_args, n_kw, 0, 1, false);
   15966:	2300      	movs	r3, #0
   15968:	9300      	str	r3, [sp, #0]
   1596a:	2301      	movs	r3, #1
   1596c:	2200      	movs	r2, #0
   1596e:	6879      	ldr	r1, [r7, #4]
   15970:	68b8      	ldr	r0, [r7, #8]
   15972:	f7f7 fb5b 	bl	d02c <mp_arg_check_num>

    switch (n_args) {
   15976:	68bb      	ldr	r3, [r7, #8]
   15978:	2b00      	cmp	r3, #0
   1597a:	d101      	bne.n	15980 <mp_obj_tuple_make_new+0x28>
        case 0:
            // return a empty tuple
            return mp_const_empty_tuple;
   1597c:	4b27      	ldr	r3, [pc, #156]	; (15a1c <mp_obj_tuple_make_new+0xc4>)
   1597e:	e048      	b.n	15a12 <mp_obj_tuple_make_new+0xba>

        case 1:
        default: {
            // 1 argument, an iterable from which we make a new tuple
            if (MP_OBJ_IS_TYPE(args[0], &mp_type_tuple)) {
   15980:	683b      	ldr	r3, [r7, #0]
   15982:	681b      	ldr	r3, [r3, #0]
   15984:	4618      	mov	r0, r3
   15986:	f7ff ff7f 	bl	15888 <MP_OBJ_IS_OBJ>
   1598a:	4603      	mov	r3, r0
   1598c:	2b00      	cmp	r3, #0
   1598e:	d008      	beq.n	159a2 <mp_obj_tuple_make_new+0x4a>
   15990:	683b      	ldr	r3, [r7, #0]
   15992:	681b      	ldr	r3, [r3, #0]
   15994:	681b      	ldr	r3, [r3, #0]
   15996:	4a22      	ldr	r2, [pc, #136]	; (15a20 <mp_obj_tuple_make_new+0xc8>)
   15998:	4293      	cmp	r3, r2
   1599a:	d102      	bne.n	159a2 <mp_obj_tuple_make_new+0x4a>
                return args[0];
   1599c:	683b      	ldr	r3, [r7, #0]
   1599e:	681b      	ldr	r3, [r3, #0]
   159a0:	e037      	b.n	15a12 <mp_obj_tuple_make_new+0xba>
            }

            // TODO optimise for cases where we know the length of the iterator

            size_t alloc = 4;
   159a2:	2304      	movs	r3, #4
   159a4:	627b      	str	r3, [r7, #36]	; 0x24
            size_t len = 0;
   159a6:	2300      	movs	r3, #0
   159a8:	623b      	str	r3, [r7, #32]
            mp_obj_t *items = m_new(mp_obj_t, alloc);
   159aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   159ac:	009b      	lsls	r3, r3, #2
   159ae:	4618      	mov	r0, r3
   159b0:	f7ea fcb4 	bl	31c <m_malloc>
   159b4:	61f8      	str	r0, [r7, #28]

            mp_obj_t iterable = mp_getiter(args[0], NULL);
   159b6:	683b      	ldr	r3, [r7, #0]
   159b8:	681b      	ldr	r3, [r3, #0]
   159ba:	2100      	movs	r1, #0
   159bc:	4618      	mov	r0, r3
   159be:	f7f6 ffbf 	bl	c940 <mp_getiter>
   159c2:	61b8      	str	r0, [r7, #24]
            mp_obj_t item;
            while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   159c4:	e015      	b.n	159f2 <mp_obj_tuple_make_new+0x9a>
                if (len >= alloc) {
   159c6:	6a3a      	ldr	r2, [r7, #32]
   159c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   159ca:	429a      	cmp	r2, r3
   159cc:	d309      	bcc.n	159e2 <mp_obj_tuple_make_new+0x8a>
                    items = m_renew(mp_obj_t, items, alloc, alloc * 2);
   159ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   159d0:	00db      	lsls	r3, r3, #3
   159d2:	4619      	mov	r1, r3
   159d4:	69f8      	ldr	r0, [r7, #28]
   159d6:	f7ea fcd5 	bl	384 <m_realloc>
   159da:	61f8      	str	r0, [r7, #28]
                    alloc *= 2;
   159dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   159de:	005b      	lsls	r3, r3, #1
   159e0:	627b      	str	r3, [r7, #36]	; 0x24
                }
                items[len++] = item;
   159e2:	6a3b      	ldr	r3, [r7, #32]
   159e4:	1c5a      	adds	r2, r3, #1
   159e6:	623a      	str	r2, [r7, #32]
   159e8:	009b      	lsls	r3, r3, #2
   159ea:	69fa      	ldr	r2, [r7, #28]
   159ec:	4413      	add	r3, r2
   159ee:	697a      	ldr	r2, [r7, #20]
   159f0:	601a      	str	r2, [r3, #0]
            while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   159f2:	69b8      	ldr	r0, [r7, #24]
   159f4:	f7f7 f826 	bl	ca44 <mp_iternext>
   159f8:	6178      	str	r0, [r7, #20]
   159fa:	697b      	ldr	r3, [r7, #20]
   159fc:	2b04      	cmp	r3, #4
   159fe:	d1e2      	bne.n	159c6 <mp_obj_tuple_make_new+0x6e>
            }

            mp_obj_t tuple = mp_obj_new_tuple(len, items);
   15a00:	69f9      	ldr	r1, [r7, #28]
   15a02:	6a38      	ldr	r0, [r7, #32]
   15a04:	f000 f9f4 	bl	15df0 <mp_obj_new_tuple>
   15a08:	6138      	str	r0, [r7, #16]
            m_del(mp_obj_t, items, alloc);
   15a0a:	69f8      	ldr	r0, [r7, #28]
   15a0c:	f7ea fce8 	bl	3e0 <m_free>

            return tuple;
   15a10:	693b      	ldr	r3, [r7, #16]
        }
    }
}
   15a12:	4618      	mov	r0, r3
   15a14:	3728      	adds	r7, #40	; 0x28
   15a16:	46bd      	mov	sp, r7
   15a18:	bd80      	pop	{r7, pc}
   15a1a:	bf00      	nop
   15a1c:	00021ea4 	.word	0x00021ea4
   15a20:	00021e68 	.word	0x00021e68

00015a24 <tuple_cmp_helper>:

// Don't pass MP_BINARY_OP_NOT_EQUAL here
STATIC mp_obj_t tuple_cmp_helper(mp_uint_t op, mp_obj_t self_in, mp_obj_t another_in) {
   15a24:	b580      	push	{r7, lr}
   15a26:	b08a      	sub	sp, #40	; 0x28
   15a28:	af02      	add	r7, sp, #8
   15a2a:	60f8      	str	r0, [r7, #12]
   15a2c:	60b9      	str	r1, [r7, #8]
   15a2e:	607a      	str	r2, [r7, #4]
    // type check is done on getiter method to allow tuple, namedtuple, attrtuple
    mp_check_self(mp_obj_get_type(self_in)->getiter == mp_obj_tuple_getiter);
   15a30:	68b8      	ldr	r0, [r7, #8]
   15a32:	f7f7 feef 	bl	d814 <mp_obj_get_type>
   15a36:	4603      	mov	r3, r0
   15a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15a3a:	4a1e      	ldr	r2, [pc, #120]	; (15ab4 <tuple_cmp_helper+0x90>)
   15a3c:	4293      	cmp	r3, r2
   15a3e:	d005      	beq.n	15a4c <tuple_cmp_helper+0x28>
   15a40:	4b1d      	ldr	r3, [pc, #116]	; (15ab8 <tuple_cmp_helper+0x94>)
   15a42:	4a1e      	ldr	r2, [pc, #120]	; (15abc <tuple_cmp_helper+0x98>)
   15a44:	2168      	movs	r1, #104	; 0x68
   15a46:	481e      	ldr	r0, [pc, #120]	; (15ac0 <tuple_cmp_helper+0x9c>)
   15a48:	f005 fc90 	bl	1b36c <__assert_func>
    mp_obj_type_t *another_type = mp_obj_get_type(another_in);
   15a4c:	6878      	ldr	r0, [r7, #4]
   15a4e:	f7f7 fee1 	bl	d814 <mp_obj_get_type>
   15a52:	61f8      	str	r0, [r7, #28]
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15a54:	68bb      	ldr	r3, [r7, #8]
   15a56:	61bb      	str	r3, [r7, #24]
    if (another_type->getiter != mp_obj_tuple_getiter) {
   15a58:	69fb      	ldr	r3, [r7, #28]
   15a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15a5c:	4a15      	ldr	r2, [pc, #84]	; (15ab4 <tuple_cmp_helper+0x90>)
   15a5e:	4293      	cmp	r3, r2
   15a60:	d00e      	beq.n	15a80 <tuple_cmp_helper+0x5c>
        // Slow path for user subclasses
        another_in = mp_instance_cast_to_native_base(another_in, MP_OBJ_FROM_PTR(&mp_type_tuple));
   15a62:	4918      	ldr	r1, [pc, #96]	; (15ac4 <tuple_cmp_helper+0xa0>)
   15a64:	6878      	ldr	r0, [r7, #4]
   15a66:	f001 fd2f 	bl	174c8 <mp_instance_cast_to_native_base>
   15a6a:	6078      	str	r0, [r7, #4]
        if (another_in == MP_OBJ_NULL) {
   15a6c:	687b      	ldr	r3, [r7, #4]
   15a6e:	2b00      	cmp	r3, #0
   15a70:	d106      	bne.n	15a80 <tuple_cmp_helper+0x5c>
            if (op == MP_BINARY_OP_EQUAL) {
   15a72:	68fb      	ldr	r3, [r7, #12]
   15a74:	2b02      	cmp	r3, #2
   15a76:	d101      	bne.n	15a7c <tuple_cmp_helper+0x58>
                return mp_const_false;
   15a78:	4b13      	ldr	r3, [pc, #76]	; (15ac8 <tuple_cmp_helper+0xa4>)
   15a7a:	e017      	b.n	15aac <tuple_cmp_helper+0x88>
            }
            return MP_OBJ_NULL;
   15a7c:	2300      	movs	r3, #0
   15a7e:	e015      	b.n	15aac <tuple_cmp_helper+0x88>
        }
    }
    mp_obj_tuple_t *another = MP_OBJ_TO_PTR(another_in);
   15a80:	687b      	ldr	r3, [r7, #4]
   15a82:	617b      	str	r3, [r7, #20]

    return mp_obj_new_bool(mp_seq_cmp_objs(op, self->items, self->len, another->items, another->len));
   15a84:	69bb      	ldr	r3, [r7, #24]
   15a86:	f103 0108 	add.w	r1, r3, #8
   15a8a:	69bb      	ldr	r3, [r7, #24]
   15a8c:	685a      	ldr	r2, [r3, #4]
   15a8e:	697b      	ldr	r3, [r7, #20]
   15a90:	f103 0008 	add.w	r0, r3, #8
   15a94:	697b      	ldr	r3, [r7, #20]
   15a96:	685b      	ldr	r3, [r3, #4]
   15a98:	9300      	str	r3, [sp, #0]
   15a9a:	4603      	mov	r3, r0
   15a9c:	68f8      	ldr	r0, [r7, #12]
   15a9e:	f001 ff21 	bl	178e4 <mp_seq_cmp_objs>
   15aa2:	4603      	mov	r3, r0
   15aa4:	4618      	mov	r0, r3
   15aa6:	f7ff ff01 	bl	158ac <mp_obj_new_bool>
   15aaa:	4603      	mov	r3, r0
}
   15aac:	4618      	mov	r0, r3
   15aae:	3720      	adds	r7, #32
   15ab0:	46bd      	mov	sp, r7
   15ab2:	bd80      	pop	{r7, pc}
   15ab4:	00015f61 	.word	0x00015f61
   15ab8:	00021d2c 	.word	0x00021d2c
   15abc:	00021ed4 	.word	0x00021ed4
   15ac0:	00021d68 	.word	0x00021d68
   15ac4:	00021e68 	.word	0x00021e68
   15ac8:	0001fc3c 	.word	0x0001fc3c

00015acc <mp_obj_tuple_unary_op>:

mp_obj_t mp_obj_tuple_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   15acc:	b580      	push	{r7, lr}
   15ace:	b086      	sub	sp, #24
   15ad0:	af00      	add	r7, sp, #0
   15ad2:	6078      	str	r0, [r7, #4]
   15ad4:	6039      	str	r1, [r7, #0]
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15ad6:	683b      	ldr	r3, [r7, #0]
   15ad8:	60fb      	str	r3, [r7, #12]
    switch (op) {
   15ada:	687b      	ldr	r3, [r7, #4]
   15adc:	2b05      	cmp	r3, #5
   15ade:	d02f      	beq.n	15b40 <mp_obj_tuple_unary_op+0x74>
   15ae0:	2b06      	cmp	r3, #6
   15ae2:	d00d      	beq.n	15b00 <mp_obj_tuple_unary_op+0x34>
   15ae4:	2b04      	cmp	r3, #4
   15ae6:	d131      	bne.n	15b4c <mp_obj_tuple_unary_op+0x80>
        case MP_UNARY_OP_BOOL: return mp_obj_new_bool(self->len != 0);
   15ae8:	68fb      	ldr	r3, [r7, #12]
   15aea:	685b      	ldr	r3, [r3, #4]
   15aec:	2b00      	cmp	r3, #0
   15aee:	bf14      	ite	ne
   15af0:	2301      	movne	r3, #1
   15af2:	2300      	moveq	r3, #0
   15af4:	b2db      	uxtb	r3, r3
   15af6:	4618      	mov	r0, r3
   15af8:	f7ff fed8 	bl	158ac <mp_obj_new_bool>
   15afc:	4603      	mov	r3, r0
   15afe:	e026      	b.n	15b4e <mp_obj_tuple_unary_op+0x82>
        case MP_UNARY_OP_HASH: {
            // start hash with pointer to empty tuple, to make it fairly unique
            mp_int_t hash = (mp_int_t)mp_const_empty_tuple;
   15b00:	4b15      	ldr	r3, [pc, #84]	; (15b58 <mp_obj_tuple_unary_op+0x8c>)
   15b02:	617b      	str	r3, [r7, #20]
            for (size_t i = 0; i < self->len; i++) {
   15b04:	2300      	movs	r3, #0
   15b06:	613b      	str	r3, [r7, #16]
   15b08:	e010      	b.n	15b2c <mp_obj_tuple_unary_op+0x60>
                hash += MP_OBJ_SMALL_INT_VALUE(mp_unary_op(MP_UNARY_OP_HASH, self->items[i]));
   15b0a:	68fb      	ldr	r3, [r7, #12]
   15b0c:	693a      	ldr	r2, [r7, #16]
   15b0e:	3202      	adds	r2, #2
   15b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15b14:	4619      	mov	r1, r3
   15b16:	2006      	movs	r0, #6
   15b18:	f7f5 fe24 	bl	b764 <mp_unary_op>
   15b1c:	4603      	mov	r3, r0
   15b1e:	105b      	asrs	r3, r3, #1
   15b20:	697a      	ldr	r2, [r7, #20]
   15b22:	4413      	add	r3, r2
   15b24:	617b      	str	r3, [r7, #20]
            for (size_t i = 0; i < self->len; i++) {
   15b26:	693b      	ldr	r3, [r7, #16]
   15b28:	3301      	adds	r3, #1
   15b2a:	613b      	str	r3, [r7, #16]
   15b2c:	68fb      	ldr	r3, [r7, #12]
   15b2e:	685a      	ldr	r2, [r3, #4]
   15b30:	693b      	ldr	r3, [r7, #16]
   15b32:	429a      	cmp	r2, r3
   15b34:	d8e9      	bhi.n	15b0a <mp_obj_tuple_unary_op+0x3e>
            }
            return MP_OBJ_NEW_SMALL_INT(hash);
   15b36:	697b      	ldr	r3, [r7, #20]
   15b38:	005b      	lsls	r3, r3, #1
   15b3a:	f043 0301 	orr.w	r3, r3, #1
   15b3e:	e006      	b.n	15b4e <mp_obj_tuple_unary_op+0x82>
        }
        case MP_UNARY_OP_LEN: return MP_OBJ_NEW_SMALL_INT(self->len);
   15b40:	68fb      	ldr	r3, [r7, #12]
   15b42:	685b      	ldr	r3, [r3, #4]
   15b44:	005b      	lsls	r3, r3, #1
   15b46:	f043 0301 	orr.w	r3, r3, #1
   15b4a:	e000      	b.n	15b4e <mp_obj_tuple_unary_op+0x82>
        default: return MP_OBJ_NULL; // op not supported
   15b4c:	2300      	movs	r3, #0
    }
}
   15b4e:	4618      	mov	r0, r3
   15b50:	3718      	adds	r7, #24
   15b52:	46bd      	mov	sp, r7
   15b54:	bd80      	pop	{r7, pc}
   15b56:	bf00      	nop
   15b58:	00021ea4 	.word	0x00021ea4

00015b5c <mp_obj_tuple_binary_op>:

mp_obj_t mp_obj_tuple_binary_op(mp_binary_op_t op, mp_obj_t lhs, mp_obj_t rhs) {
   15b5c:	b580      	push	{r7, lr}
   15b5e:	b08c      	sub	sp, #48	; 0x30
   15b60:	af02      	add	r7, sp, #8
   15b62:	60f8      	str	r0, [r7, #12]
   15b64:	60b9      	str	r1, [r7, #8]
   15b66:	607a      	str	r2, [r7, #4]
    mp_obj_tuple_t *o = MP_OBJ_TO_PTR(lhs);
   15b68:	68bb      	ldr	r3, [r7, #8]
   15b6a:	627b      	str	r3, [r7, #36]	; 0x24
    switch (op) {
   15b6c:	68fb      	ldr	r3, [r7, #12]
   15b6e:	2b1c      	cmp	r3, #28
   15b70:	f200 80ac 	bhi.w	15ccc <mp_obj_tuple_binary_op+0x170>
   15b74:	a201      	add	r2, pc, #4	; (adr r2, 15b7c <mp_obj_tuple_binary_op+0x20>)
   15b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15b7a:	bf00      	nop
   15b7c:	00015cbf 	.word	0x00015cbf
   15b80:	00015cbf 	.word	0x00015cbf
   15b84:	00015cbf 	.word	0x00015cbf
   15b88:	00015cbf 	.word	0x00015cbf
   15b8c:	00015cbf 	.word	0x00015cbf
   15b90:	00015ccd 	.word	0x00015ccd
   15b94:	00015ccd 	.word	0x00015ccd
   15b98:	00015ccd 	.word	0x00015ccd
   15b9c:	00015ccd 	.word	0x00015ccd
   15ba0:	00015ccd 	.word	0x00015ccd
   15ba4:	00015ccd 	.word	0x00015ccd
   15ba8:	00015ccd 	.word	0x00015ccd
   15bac:	00015ccd 	.word	0x00015ccd
   15bb0:	00015ccd 	.word	0x00015ccd
   15bb4:	00015bf1 	.word	0x00015bf1
   15bb8:	00015ccd 	.word	0x00015ccd
   15bbc:	00015c65 	.word	0x00015c65
   15bc0:	00015ccd 	.word	0x00015ccd
   15bc4:	00015ccd 	.word	0x00015ccd
   15bc8:	00015ccd 	.word	0x00015ccd
   15bcc:	00015ccd 	.word	0x00015ccd
   15bd0:	00015ccd 	.word	0x00015ccd
   15bd4:	00015ccd 	.word	0x00015ccd
   15bd8:	00015ccd 	.word	0x00015ccd
   15bdc:	00015ccd 	.word	0x00015ccd
   15be0:	00015ccd 	.word	0x00015ccd
   15be4:	00015bf1 	.word	0x00015bf1
   15be8:	00015ccd 	.word	0x00015ccd
   15bec:	00015c65 	.word	0x00015c65
        case MP_BINARY_OP_ADD:
        case MP_BINARY_OP_INPLACE_ADD: {
            if (!mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(rhs)), MP_OBJ_FROM_PTR(&mp_type_tuple))) {
   15bf0:	6878      	ldr	r0, [r7, #4]
   15bf2:	f7f7 fe0f 	bl	d814 <mp_obj_get_type>
   15bf6:	4603      	mov	r3, r0
   15bf8:	4937      	ldr	r1, [pc, #220]	; (15cd8 <mp_obj_tuple_binary_op+0x17c>)
   15bfa:	4618      	mov	r0, r3
   15bfc:	f001 fb72 	bl	172e4 <mp_obj_is_subclass_fast>
   15c00:	4603      	mov	r3, r0
   15c02:	f083 0301 	eor.w	r3, r3, #1
   15c06:	b2db      	uxtb	r3, r3
   15c08:	2b00      	cmp	r3, #0
   15c0a:	d001      	beq.n	15c10 <mp_obj_tuple_binary_op+0xb4>
                return MP_OBJ_NULL; // op not supported
   15c0c:	2300      	movs	r3, #0
   15c0e:	e05e      	b.n	15cce <mp_obj_tuple_binary_op+0x172>
            }
            mp_obj_tuple_t *p = MP_OBJ_TO_PTR(rhs);
   15c10:	687b      	ldr	r3, [r7, #4]
   15c12:	623b      	str	r3, [r7, #32]
            mp_obj_tuple_t *s = MP_OBJ_TO_PTR(mp_obj_new_tuple(o->len + p->len, NULL));
   15c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15c16:	685a      	ldr	r2, [r3, #4]
   15c18:	6a3b      	ldr	r3, [r7, #32]
   15c1a:	685b      	ldr	r3, [r3, #4]
   15c1c:	4413      	add	r3, r2
   15c1e:	2100      	movs	r1, #0
   15c20:	4618      	mov	r0, r3
   15c22:	f000 f8e5 	bl	15df0 <mp_obj_new_tuple>
   15c26:	61f8      	str	r0, [r7, #28]
            mp_seq_cat(s->items, o->items, o->len, p->items, p->len, mp_obj_t);
   15c28:	69fb      	ldr	r3, [r7, #28]
   15c2a:	f103 0008 	add.w	r0, r3, #8
   15c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15c30:	f103 0108 	add.w	r1, r3, #8
   15c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15c36:	685b      	ldr	r3, [r3, #4]
   15c38:	009b      	lsls	r3, r3, #2
   15c3a:	461a      	mov	r2, r3
   15c3c:	f006 f942 	bl	1bec4 <memcpy>
   15c40:	69fb      	ldr	r3, [r7, #28]
   15c42:	f103 0208 	add.w	r2, r3, #8
   15c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15c48:	685b      	ldr	r3, [r3, #4]
   15c4a:	009b      	lsls	r3, r3, #2
   15c4c:	18d0      	adds	r0, r2, r3
   15c4e:	6a3b      	ldr	r3, [r7, #32]
   15c50:	f103 0108 	add.w	r1, r3, #8
   15c54:	6a3b      	ldr	r3, [r7, #32]
   15c56:	685b      	ldr	r3, [r3, #4]
   15c58:	009b      	lsls	r3, r3, #2
   15c5a:	461a      	mov	r2, r3
   15c5c:	f006 f932 	bl	1bec4 <memcpy>
            return MP_OBJ_FROM_PTR(s);
   15c60:	69fb      	ldr	r3, [r7, #28]
   15c62:	e034      	b.n	15cce <mp_obj_tuple_binary_op+0x172>
        }
        case MP_BINARY_OP_MULTIPLY:
        case MP_BINARY_OP_INPLACE_MULTIPLY: {
            mp_int_t n;
            if (!mp_obj_get_int_maybe(rhs, &n)) {
   15c64:	f107 0314 	add.w	r3, r7, #20
   15c68:	4619      	mov	r1, r3
   15c6a:	6878      	ldr	r0, [r7, #4]
   15c6c:	f7f8 f80c 	bl	dc88 <mp_obj_get_int_maybe>
   15c70:	4603      	mov	r3, r0
   15c72:	f083 0301 	eor.w	r3, r3, #1
   15c76:	b2db      	uxtb	r3, r3
   15c78:	2b00      	cmp	r3, #0
   15c7a:	d001      	beq.n	15c80 <mp_obj_tuple_binary_op+0x124>
                return MP_OBJ_NULL; // op not supported
   15c7c:	2300      	movs	r3, #0
   15c7e:	e026      	b.n	15cce <mp_obj_tuple_binary_op+0x172>
            }
            if (n <= 0) {
   15c80:	697b      	ldr	r3, [r7, #20]
   15c82:	2b00      	cmp	r3, #0
   15c84:	dc01      	bgt.n	15c8a <mp_obj_tuple_binary_op+0x12e>
                return mp_const_empty_tuple;
   15c86:	4b15      	ldr	r3, [pc, #84]	; (15cdc <mp_obj_tuple_binary_op+0x180>)
   15c88:	e021      	b.n	15cce <mp_obj_tuple_binary_op+0x172>
            }
            mp_obj_tuple_t *s = MP_OBJ_TO_PTR(mp_obj_new_tuple(o->len * n, NULL));
   15c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15c8c:	685b      	ldr	r3, [r3, #4]
   15c8e:	697a      	ldr	r2, [r7, #20]
   15c90:	fb02 f303 	mul.w	r3, r2, r3
   15c94:	2100      	movs	r1, #0
   15c96:	4618      	mov	r0, r3
   15c98:	f000 f8aa 	bl	15df0 <mp_obj_new_tuple>
   15c9c:	61b8      	str	r0, [r7, #24]
            mp_seq_multiply(o->items, sizeof(*o->items), o->len, n, s->items);
   15c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15ca0:	f103 0008 	add.w	r0, r3, #8
   15ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15ca6:	685a      	ldr	r2, [r3, #4]
   15ca8:	697b      	ldr	r3, [r7, #20]
   15caa:	4619      	mov	r1, r3
   15cac:	69bb      	ldr	r3, [r7, #24]
   15cae:	3308      	adds	r3, #8
   15cb0:	9300      	str	r3, [sp, #0]
   15cb2:	460b      	mov	r3, r1
   15cb4:	2104      	movs	r1, #4
   15cb6:	f001 fd53 	bl	17760 <mp_seq_multiply>
            return MP_OBJ_FROM_PTR(s);
   15cba:	69bb      	ldr	r3, [r7, #24]
   15cbc:	e007      	b.n	15cce <mp_obj_tuple_binary_op+0x172>
        case MP_BINARY_OP_EQUAL:
        case MP_BINARY_OP_LESS:
        case MP_BINARY_OP_LESS_EQUAL:
        case MP_BINARY_OP_MORE:
        case MP_BINARY_OP_MORE_EQUAL:
            return tuple_cmp_helper(op, lhs, rhs);
   15cbe:	687a      	ldr	r2, [r7, #4]
   15cc0:	68b9      	ldr	r1, [r7, #8]
   15cc2:	68f8      	ldr	r0, [r7, #12]
   15cc4:	f7ff feae 	bl	15a24 <tuple_cmp_helper>
   15cc8:	4603      	mov	r3, r0
   15cca:	e000      	b.n	15cce <mp_obj_tuple_binary_op+0x172>

        default:
            return MP_OBJ_NULL; // op not supported
   15ccc:	2300      	movs	r3, #0
    }
}
   15cce:	4618      	mov	r0, r3
   15cd0:	3728      	adds	r7, #40	; 0x28
   15cd2:	46bd      	mov	sp, r7
   15cd4:	bd80      	pop	{r7, pc}
   15cd6:	bf00      	nop
   15cd8:	00021e68 	.word	0x00021e68
   15cdc:	00021ea4 	.word	0x00021ea4

00015ce0 <mp_obj_tuple_subscr>:

mp_obj_t mp_obj_tuple_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   15ce0:	b580      	push	{r7, lr}
   15ce2:	b086      	sub	sp, #24
   15ce4:	af00      	add	r7, sp, #0
   15ce6:	60f8      	str	r0, [r7, #12]
   15ce8:	60b9      	str	r1, [r7, #8]
   15cea:	607a      	str	r2, [r7, #4]
    if (value == MP_OBJ_SENTINEL) {
   15cec:	687b      	ldr	r3, [r7, #4]
   15cee:	2b08      	cmp	r3, #8
   15cf0:	d110      	bne.n	15d14 <mp_obj_tuple_subscr+0x34>
        // load
        mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15cf2:	68fb      	ldr	r3, [r7, #12]
   15cf4:	617b      	str	r3, [r7, #20]
            mp_obj_tuple_t *res = MP_OBJ_TO_PTR(mp_obj_new_tuple(slice.stop - slice.start, NULL));
            mp_seq_copy(res->items, self->items + slice.start, res->len, mp_obj_t);
            return MP_OBJ_FROM_PTR(res);
        }
#endif
        size_t index_value = mp_get_index(self->base.type, self->len, index, false);
   15cf6:	697b      	ldr	r3, [r7, #20]
   15cf8:	6818      	ldr	r0, [r3, #0]
   15cfa:	697b      	ldr	r3, [r7, #20]
   15cfc:	6859      	ldr	r1, [r3, #4]
   15cfe:	2300      	movs	r3, #0
   15d00:	68ba      	ldr	r2, [r7, #8]
   15d02:	f7f8 f851 	bl	dda8 <mp_get_index>
   15d06:	6138      	str	r0, [r7, #16]
        return self->items[index_value];
   15d08:	697b      	ldr	r3, [r7, #20]
   15d0a:	693a      	ldr	r2, [r7, #16]
   15d0c:	3202      	adds	r2, #2
   15d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15d12:	e000      	b.n	15d16 <mp_obj_tuple_subscr+0x36>
    } else {
        return MP_OBJ_NULL; // op not supported
   15d14:	2300      	movs	r3, #0
    }
}
   15d16:	4618      	mov	r0, r3
   15d18:	3718      	adds	r7, #24
   15d1a:	46bd      	mov	sp, r7
   15d1c:	bd80      	pop	{r7, pc}
   15d1e:	bf00      	nop

00015d20 <tuple_count>:

STATIC mp_obj_t tuple_count(mp_obj_t self_in, mp_obj_t value) {
   15d20:	b580      	push	{r7, lr}
   15d22:	b084      	sub	sp, #16
   15d24:	af00      	add	r7, sp, #0
   15d26:	6078      	str	r0, [r7, #4]
   15d28:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   15d2a:	6878      	ldr	r0, [r7, #4]
   15d2c:	f7ff fdac 	bl	15888 <MP_OBJ_IS_OBJ>
   15d30:	4603      	mov	r3, r0
   15d32:	f083 0301 	eor.w	r3, r3, #1
   15d36:	b2db      	uxtb	r3, r3
   15d38:	2b00      	cmp	r3, #0
   15d3a:	d104      	bne.n	15d46 <tuple_count+0x26>
   15d3c:	687b      	ldr	r3, [r7, #4]
   15d3e:	681b      	ldr	r3, [r3, #0]
   15d40:	4a0c      	ldr	r2, [pc, #48]	; (15d74 <tuple_count+0x54>)
   15d42:	4293      	cmp	r3, r2
   15d44:	d005      	beq.n	15d52 <tuple_count+0x32>
   15d46:	4b0c      	ldr	r3, [pc, #48]	; (15d78 <tuple_count+0x58>)
   15d48:	4a0c      	ldr	r2, [pc, #48]	; (15d7c <tuple_count+0x5c>)
   15d4a:	21c8      	movs	r1, #200	; 0xc8
   15d4c:	480c      	ldr	r0, [pc, #48]	; (15d80 <tuple_count+0x60>)
   15d4e:	f005 fb0d 	bl	1b36c <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15d52:	687b      	ldr	r3, [r7, #4]
   15d54:	60fb      	str	r3, [r7, #12]
    return mp_seq_count_obj(self->items, self->len, value);
   15d56:	68fb      	ldr	r3, [r7, #12]
   15d58:	f103 0008 	add.w	r0, r3, #8
   15d5c:	68fb      	ldr	r3, [r7, #12]
   15d5e:	685b      	ldr	r3, [r3, #4]
   15d60:	683a      	ldr	r2, [r7, #0]
   15d62:	4619      	mov	r1, r3
   15d64:	f001 fe8a 	bl	17a7c <mp_seq_count_obj>
   15d68:	4603      	mov	r3, r0
}
   15d6a:	4618      	mov	r0, r3
   15d6c:	3710      	adds	r7, #16
   15d6e:	46bd      	mov	sp, r7
   15d70:	bd80      	pop	{r7, pc}
   15d72:	bf00      	nop
   15d74:	00021e68 	.word	0x00021e68
   15d78:	00021d7c 	.word	0x00021d7c
   15d7c:	00021ee8 	.word	0x00021ee8
   15d80:	00021d68 	.word	0x00021d68

00015d84 <tuple_index>:
STATIC MP_DEFINE_CONST_FUN_OBJ_2(tuple_count_obj, tuple_count);

STATIC mp_obj_t tuple_index(size_t n_args, const mp_obj_t *args) {
   15d84:	b580      	push	{r7, lr}
   15d86:	b084      	sub	sp, #16
   15d88:	af00      	add	r7, sp, #0
   15d8a:	6078      	str	r0, [r7, #4]
   15d8c:	6039      	str	r1, [r7, #0]
    mp_check_self(MP_OBJ_IS_TYPE(args[0], &mp_type_tuple));
   15d8e:	683b      	ldr	r3, [r7, #0]
   15d90:	681b      	ldr	r3, [r3, #0]
   15d92:	4618      	mov	r0, r3
   15d94:	f7ff fd78 	bl	15888 <MP_OBJ_IS_OBJ>
   15d98:	4603      	mov	r3, r0
   15d9a:	f083 0301 	eor.w	r3, r3, #1
   15d9e:	b2db      	uxtb	r3, r3
   15da0:	2b00      	cmp	r3, #0
   15da2:	d105      	bne.n	15db0 <tuple_index+0x2c>
   15da4:	683b      	ldr	r3, [r7, #0]
   15da6:	681b      	ldr	r3, [r3, #0]
   15da8:	681b      	ldr	r3, [r3, #0]
   15daa:	4a0d      	ldr	r2, [pc, #52]	; (15de0 <tuple_index+0x5c>)
   15dac:	4293      	cmp	r3, r2
   15dae:	d005      	beq.n	15dbc <tuple_index+0x38>
   15db0:	4b0c      	ldr	r3, [pc, #48]	; (15de4 <tuple_index+0x60>)
   15db2:	4a0d      	ldr	r2, [pc, #52]	; (15de8 <tuple_index+0x64>)
   15db4:	21cf      	movs	r1, #207	; 0xcf
   15db6:	480d      	ldr	r0, [pc, #52]	; (15dec <tuple_index+0x68>)
   15db8:	f005 fad8 	bl	1b36c <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(args[0]);
   15dbc:	683b      	ldr	r3, [r7, #0]
   15dbe:	681b      	ldr	r3, [r3, #0]
   15dc0:	60fb      	str	r3, [r7, #12]
    return mp_seq_index_obj(self->items, self->len, n_args, args);
   15dc2:	68fb      	ldr	r3, [r7, #12]
   15dc4:	f103 0008 	add.w	r0, r3, #8
   15dc8:	68fb      	ldr	r3, [r7, #12]
   15dca:	6859      	ldr	r1, [r3, #4]
   15dcc:	683b      	ldr	r3, [r7, #0]
   15dce:	687a      	ldr	r2, [r7, #4]
   15dd0:	f001 fe04 	bl	179dc <mp_seq_index_obj>
   15dd4:	4603      	mov	r3, r0
}
   15dd6:	4618      	mov	r0, r3
   15dd8:	3710      	adds	r7, #16
   15dda:	46bd      	mov	sp, r7
   15ddc:	bd80      	pop	{r7, pc}
   15dde:	bf00      	nop
   15de0:	00021e68 	.word	0x00021e68
   15de4:	00021de0 	.word	0x00021de0
   15de8:	00021ef4 	.word	0x00021ef4
   15dec:	00021d68 	.word	0x00021d68

00015df0 <mp_obj_new_tuple>:
};

// the zero-length tuple
const mp_obj_tuple_t mp_const_empty_tuple_obj = {{&mp_type_tuple}, 0};

mp_obj_t mp_obj_new_tuple(size_t n, const mp_obj_t *items) {
   15df0:	b580      	push	{r7, lr}
   15df2:	b084      	sub	sp, #16
   15df4:	af00      	add	r7, sp, #0
   15df6:	6078      	str	r0, [r7, #4]
   15df8:	6039      	str	r1, [r7, #0]
    if (n == 0) {
   15dfa:	687b      	ldr	r3, [r7, #4]
   15dfc:	2b00      	cmp	r3, #0
   15dfe:	d101      	bne.n	15e04 <mp_obj_new_tuple+0x14>
        return mp_const_empty_tuple;
   15e00:	4b15      	ldr	r3, [pc, #84]	; (15e58 <mp_obj_new_tuple+0x68>)
   15e02:	e024      	b.n	15e4e <mp_obj_new_tuple+0x5e>
    }
    mp_obj_tuple_t *o = m_new_obj_var(mp_obj_tuple_t, mp_obj_t, n);
   15e04:	687b      	ldr	r3, [r7, #4]
   15e06:	3302      	adds	r3, #2
   15e08:	009b      	lsls	r3, r3, #2
   15e0a:	4618      	mov	r0, r3
   15e0c:	f7ea fa86 	bl	31c <m_malloc>
   15e10:	60b8      	str	r0, [r7, #8]
    o->base.type = &mp_type_tuple;
   15e12:	68bb      	ldr	r3, [r7, #8]
   15e14:	4a11      	ldr	r2, [pc, #68]	; (15e5c <mp_obj_new_tuple+0x6c>)
   15e16:	601a      	str	r2, [r3, #0]
    o->len = n;
   15e18:	68bb      	ldr	r3, [r7, #8]
   15e1a:	687a      	ldr	r2, [r7, #4]
   15e1c:	605a      	str	r2, [r3, #4]
    if (items) {
   15e1e:	683b      	ldr	r3, [r7, #0]
   15e20:	2b00      	cmp	r3, #0
   15e22:	d013      	beq.n	15e4c <mp_obj_new_tuple+0x5c>
        for (size_t i = 0; i < n; i++) {
   15e24:	2300      	movs	r3, #0
   15e26:	60fb      	str	r3, [r7, #12]
   15e28:	e00c      	b.n	15e44 <mp_obj_new_tuple+0x54>
            o->items[i] = items[i];
   15e2a:	68fb      	ldr	r3, [r7, #12]
   15e2c:	009b      	lsls	r3, r3, #2
   15e2e:	683a      	ldr	r2, [r7, #0]
   15e30:	4413      	add	r3, r2
   15e32:	6819      	ldr	r1, [r3, #0]
   15e34:	68bb      	ldr	r3, [r7, #8]
   15e36:	68fa      	ldr	r2, [r7, #12]
   15e38:	3202      	adds	r2, #2
   15e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (size_t i = 0; i < n; i++) {
   15e3e:	68fb      	ldr	r3, [r7, #12]
   15e40:	3301      	adds	r3, #1
   15e42:	60fb      	str	r3, [r7, #12]
   15e44:	68fa      	ldr	r2, [r7, #12]
   15e46:	687b      	ldr	r3, [r7, #4]
   15e48:	429a      	cmp	r2, r3
   15e4a:	d3ee      	bcc.n	15e2a <mp_obj_new_tuple+0x3a>
        }
    }
    return MP_OBJ_FROM_PTR(o);
   15e4c:	68bb      	ldr	r3, [r7, #8]
}
   15e4e:	4618      	mov	r0, r3
   15e50:	3710      	adds	r7, #16
   15e52:	46bd      	mov	sp, r7
   15e54:	bd80      	pop	{r7, pc}
   15e56:	bf00      	nop
   15e58:	00021ea4 	.word	0x00021ea4
   15e5c:	00021e68 	.word	0x00021e68

00015e60 <mp_obj_tuple_get>:

void mp_obj_tuple_get(mp_obj_t self_in, size_t *len, mp_obj_t **items) {
   15e60:	b580      	push	{r7, lr}
   15e62:	b086      	sub	sp, #24
   15e64:	af00      	add	r7, sp, #0
   15e66:	60f8      	str	r0, [r7, #12]
   15e68:	60b9      	str	r1, [r7, #8]
   15e6a:	607a      	str	r2, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   15e6c:	68f8      	ldr	r0, [r7, #12]
   15e6e:	f7ff fd0b 	bl	15888 <MP_OBJ_IS_OBJ>
   15e72:	4603      	mov	r3, r0
   15e74:	f083 0301 	eor.w	r3, r3, #1
   15e78:	b2db      	uxtb	r3, r3
   15e7a:	2b00      	cmp	r3, #0
   15e7c:	d104      	bne.n	15e88 <mp_obj_tuple_get+0x28>
   15e7e:	68fb      	ldr	r3, [r7, #12]
   15e80:	681b      	ldr	r3, [r3, #0]
   15e82:	4a0c      	ldr	r2, [pc, #48]	; (15eb4 <mp_obj_tuple_get+0x54>)
   15e84:	4293      	cmp	r3, r2
   15e86:	d005      	beq.n	15e94 <mp_obj_tuple_get+0x34>
   15e88:	4b0b      	ldr	r3, [pc, #44]	; (15eb8 <mp_obj_tuple_get+0x58>)
   15e8a:	4a0c      	ldr	r2, [pc, #48]	; (15ebc <mp_obj_tuple_get+0x5c>)
   15e8c:	21fb      	movs	r1, #251	; 0xfb
   15e8e:	480c      	ldr	r0, [pc, #48]	; (15ec0 <mp_obj_tuple_get+0x60>)
   15e90:	f005 fa6c 	bl	1b36c <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15e94:	68fb      	ldr	r3, [r7, #12]
   15e96:	617b      	str	r3, [r7, #20]
    *len = self->len;
   15e98:	697b      	ldr	r3, [r7, #20]
   15e9a:	685a      	ldr	r2, [r3, #4]
   15e9c:	68bb      	ldr	r3, [r7, #8]
   15e9e:	601a      	str	r2, [r3, #0]
    *items = &self->items[0];
   15ea0:	697b      	ldr	r3, [r7, #20]
   15ea2:	f103 0208 	add.w	r2, r3, #8
   15ea6:	687b      	ldr	r3, [r7, #4]
   15ea8:	601a      	str	r2, [r3, #0]
}
   15eaa:	bf00      	nop
   15eac:	3718      	adds	r7, #24
   15eae:	46bd      	mov	sp, r7
   15eb0:	bd80      	pop	{r7, pc}
   15eb2:	bf00      	nop
   15eb4:	00021e68 	.word	0x00021e68
   15eb8:	00021eac 	.word	0x00021eac
   15ebc:	00021f00 	.word	0x00021f00
   15ec0:	00021d68 	.word	0x00021d68

00015ec4 <mp_obj_tuple_del>:

void mp_obj_tuple_del(mp_obj_t self_in) {
   15ec4:	b580      	push	{r7, lr}
   15ec6:	b084      	sub	sp, #16
   15ec8:	af00      	add	r7, sp, #0
   15eca:	6078      	str	r0, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_tuple));
   15ecc:	6878      	ldr	r0, [r7, #4]
   15ece:	f7ff fcdb 	bl	15888 <MP_OBJ_IS_OBJ>
   15ed2:	4603      	mov	r3, r0
   15ed4:	f083 0301 	eor.w	r3, r3, #1
   15ed8:	b2db      	uxtb	r3, r3
   15eda:	2b00      	cmp	r3, #0
   15edc:	d104      	bne.n	15ee8 <mp_obj_tuple_del+0x24>
   15ede:	687b      	ldr	r3, [r7, #4]
   15ee0:	681b      	ldr	r3, [r3, #0]
   15ee2:	4a09      	ldr	r2, [pc, #36]	; (15f08 <mp_obj_tuple_del+0x44>)
   15ee4:	4293      	cmp	r3, r2
   15ee6:	d006      	beq.n	15ef6 <mp_obj_tuple_del+0x32>
   15ee8:	4b08      	ldr	r3, [pc, #32]	; (15f0c <mp_obj_tuple_del+0x48>)
   15eea:	4a09      	ldr	r2, [pc, #36]	; (15f10 <mp_obj_tuple_del+0x4c>)
   15eec:	f44f 7181 	mov.w	r1, #258	; 0x102
   15ef0:	4808      	ldr	r0, [pc, #32]	; (15f14 <mp_obj_tuple_del+0x50>)
   15ef2:	f005 fa3b 	bl	1b36c <__assert_func>
    mp_obj_tuple_t *self = MP_OBJ_TO_PTR(self_in);
   15ef6:	687b      	ldr	r3, [r7, #4]
   15ef8:	60fb      	str	r3, [r7, #12]
    m_del_var(mp_obj_tuple_t, mp_obj_t, self->len, self);
   15efa:	68f8      	ldr	r0, [r7, #12]
   15efc:	f7ea fa70 	bl	3e0 <m_free>
}
   15f00:	bf00      	nop
   15f02:	3710      	adds	r7, #16
   15f04:	46bd      	mov	sp, r7
   15f06:	bd80      	pop	{r7, pc}
   15f08:	00021e68 	.word	0x00021e68
   15f0c:	00021eac 	.word	0x00021eac
   15f10:	00021f14 	.word	0x00021f14
   15f14:	00021d68 	.word	0x00021d68

00015f18 <tuple_it_iternext>:
    mp_fun_1_t iternext;
    mp_obj_tuple_t *tuple;
    size_t cur;
} mp_obj_tuple_it_t;

STATIC mp_obj_t tuple_it_iternext(mp_obj_t self_in) {
   15f18:	b480      	push	{r7}
   15f1a:	b085      	sub	sp, #20
   15f1c:	af00      	add	r7, sp, #0
   15f1e:	6078      	str	r0, [r7, #4]
    mp_obj_tuple_it_t *self = MP_OBJ_TO_PTR(self_in);
   15f20:	687b      	ldr	r3, [r7, #4]
   15f22:	60fb      	str	r3, [r7, #12]
    if (self->cur < self->tuple->len) {
   15f24:	68fb      	ldr	r3, [r7, #12]
   15f26:	68da      	ldr	r2, [r3, #12]
   15f28:	68fb      	ldr	r3, [r7, #12]
   15f2a:	689b      	ldr	r3, [r3, #8]
   15f2c:	685b      	ldr	r3, [r3, #4]
   15f2e:	429a      	cmp	r2, r3
   15f30:	d20e      	bcs.n	15f50 <tuple_it_iternext+0x38>
        mp_obj_t o_out = self->tuple->items[self->cur];
   15f32:	68fb      	ldr	r3, [r7, #12]
   15f34:	689b      	ldr	r3, [r3, #8]
   15f36:	68fa      	ldr	r2, [r7, #12]
   15f38:	68d2      	ldr	r2, [r2, #12]
   15f3a:	3202      	adds	r2, #2
   15f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   15f40:	60bb      	str	r3, [r7, #8]
        self->cur += 1;
   15f42:	68fb      	ldr	r3, [r7, #12]
   15f44:	68db      	ldr	r3, [r3, #12]
   15f46:	1c5a      	adds	r2, r3, #1
   15f48:	68fb      	ldr	r3, [r7, #12]
   15f4a:	60da      	str	r2, [r3, #12]
        return o_out;
   15f4c:	68bb      	ldr	r3, [r7, #8]
   15f4e:	e000      	b.n	15f52 <tuple_it_iternext+0x3a>
    } else {
        return MP_OBJ_STOP_ITERATION;
   15f50:	2304      	movs	r3, #4
    }
}
   15f52:	4618      	mov	r0, r3
   15f54:	3714      	adds	r7, #20
   15f56:	46bd      	mov	sp, r7
   15f58:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f5c:	4770      	bx	lr
   15f5e:	bf00      	nop

00015f60 <mp_obj_tuple_getiter>:

mp_obj_t mp_obj_tuple_getiter(mp_obj_t o_in, mp_obj_iter_buf_t *iter_buf) {
   15f60:	b480      	push	{r7}
   15f62:	b085      	sub	sp, #20
   15f64:	af00      	add	r7, sp, #0
   15f66:	6078      	str	r0, [r7, #4]
   15f68:	6039      	str	r1, [r7, #0]
    assert(sizeof(mp_obj_tuple_it_t) <= sizeof(mp_obj_iter_buf_t));
    mp_obj_tuple_it_t *o = (mp_obj_tuple_it_t*)iter_buf;
   15f6a:	683b      	ldr	r3, [r7, #0]
   15f6c:	60fb      	str	r3, [r7, #12]
    o->base.type = &mp_type_polymorph_iter;
   15f6e:	68fb      	ldr	r3, [r7, #12]
   15f70:	4a08      	ldr	r2, [pc, #32]	; (15f94 <mp_obj_tuple_getiter+0x34>)
   15f72:	601a      	str	r2, [r3, #0]
    o->iternext = tuple_it_iternext;
   15f74:	68fb      	ldr	r3, [r7, #12]
   15f76:	4a08      	ldr	r2, [pc, #32]	; (15f98 <mp_obj_tuple_getiter+0x38>)
   15f78:	605a      	str	r2, [r3, #4]
    o->tuple = MP_OBJ_TO_PTR(o_in);
   15f7a:	68fb      	ldr	r3, [r7, #12]
   15f7c:	687a      	ldr	r2, [r7, #4]
   15f7e:	609a      	str	r2, [r3, #8]
    o->cur = 0;
   15f80:	68fb      	ldr	r3, [r7, #12]
   15f82:	2200      	movs	r2, #0
   15f84:	60da      	str	r2, [r3, #12]
    return MP_OBJ_FROM_PTR(o);
   15f86:	68fb      	ldr	r3, [r7, #12]
}
   15f88:	4618      	mov	r0, r3
   15f8a:	3714      	adds	r7, #20
   15f8c:	46bd      	mov	sp, r7
   15f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f92:	4770      	bx	lr
   15f94:	000214b4 	.word	0x000214b4
   15f98:	00015f19 	.word	0x00015f19

00015f9c <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   15f9c:	b480      	push	{r7}
   15f9e:	b083      	sub	sp, #12
   15fa0:	af00      	add	r7, sp, #0
   15fa2:	6078      	str	r0, [r7, #4]
   15fa4:	687b      	ldr	r3, [r7, #4]
   15fa6:	f003 0303 	and.w	r3, r3, #3
   15faa:	2b00      	cmp	r3, #0
   15fac:	bf0c      	ite	eq
   15fae:	2301      	moveq	r3, #1
   15fb0:	2300      	movne	r3, #0
   15fb2:	b2db      	uxtb	r3, r3
   15fb4:	4618      	mov	r0, r3
   15fb6:	370c      	adds	r7, #12
   15fb8:	46bd      	mov	sp, r7
   15fba:	f85d 7b04 	ldr.w	r7, [sp], #4
   15fbe:	4770      	bx	lr

00015fc0 <instance_count_native_bases>:
STATIC mp_obj_t static_class_method_make_new(const mp_obj_type_t *self_in, size_t n_args, size_t n_kw, const mp_obj_t *args);

/******************************************************************************/
// instance object

STATIC int instance_count_native_bases(const mp_obj_type_t *type, const mp_obj_type_t **last_native_base) {
   15fc0:	b580      	push	{r7, lr}
   15fc2:	b088      	sub	sp, #32
   15fc4:	af00      	add	r7, sp, #0
   15fc6:	6078      	str	r0, [r7, #4]
   15fc8:	6039      	str	r1, [r7, #0]
    int count = 0;
   15fca:	2300      	movs	r3, #0
   15fcc:	61fb      	str	r3, [r7, #28]
    for (;;) {
        if (type == &mp_type_object) {
   15fce:	687b      	ldr	r3, [r7, #4]
   15fd0:	4a2d      	ldr	r2, [pc, #180]	; (16088 <instance_count_native_bases+0xc8>)
   15fd2:	4293      	cmp	r3, r2
   15fd4:	d101      	bne.n	15fda <instance_count_native_bases+0x1a>
            // Not a "real" type, end search here.
            return count;
   15fd6:	69fb      	ldr	r3, [r7, #28]
   15fd8:	e052      	b.n	16080 <instance_count_native_bases+0xc0>
        } else if (mp_obj_is_native_type(type)) {
   15fda:	687b      	ldr	r3, [r7, #4]
   15fdc:	68db      	ldr	r3, [r3, #12]
   15fde:	4a2b      	ldr	r2, [pc, #172]	; (1608c <instance_count_native_bases+0xcc>)
   15fe0:	4293      	cmp	r3, r2
   15fe2:	d005      	beq.n	15ff0 <instance_count_native_bases+0x30>
            // Native types don't have parents (at least not from our perspective) so end.
            *last_native_base = type;
   15fe4:	683b      	ldr	r3, [r7, #0]
   15fe6:	687a      	ldr	r2, [r7, #4]
   15fe8:	601a      	str	r2, [r3, #0]
            return count + 1;
   15fea:	69fb      	ldr	r3, [r7, #28]
   15fec:	3301      	adds	r3, #1
   15fee:	e047      	b.n	16080 <instance_count_native_bases+0xc0>
        } else if (type->parent == NULL) {
   15ff0:	687b      	ldr	r3, [r7, #4]
   15ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15ff4:	2b00      	cmp	r3, #0
   15ff6:	d101      	bne.n	15ffc <instance_count_native_bases+0x3c>
            // No parents so end search here.
            return count;
   15ff8:	69fb      	ldr	r3, [r7, #28]
   15ffa:	e041      	b.n	16080 <instance_count_native_bases+0xc0>
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   15ffc:	687b      	ldr	r3, [r7, #4]
   15ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16000:	681b      	ldr	r3, [r3, #0]
   16002:	4a23      	ldr	r2, [pc, #140]	; (16090 <instance_count_native_bases+0xd0>)
   16004:	4293      	cmp	r3, r2
   16006:	d137      	bne.n	16078 <instance_count_native_bases+0xb8>
            // Multiple parents, search through them all recursively.
            const mp_obj_tuple_t *parent_tuple = type->parent;
   16008:	687b      	ldr	r3, [r7, #4]
   1600a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1600c:	617b      	str	r3, [r7, #20]
            const mp_obj_t *item = parent_tuple->items;
   1600e:	697b      	ldr	r3, [r7, #20]
   16010:	3308      	adds	r3, #8
   16012:	61bb      	str	r3, [r7, #24]
            const mp_obj_t *top = item + parent_tuple->len;
   16014:	697b      	ldr	r3, [r7, #20]
   16016:	685b      	ldr	r3, [r3, #4]
   16018:	009b      	lsls	r3, r3, #2
   1601a:	69ba      	ldr	r2, [r7, #24]
   1601c:	4413      	add	r3, r2
   1601e:	613b      	str	r3, [r7, #16]
            for (; item < top; ++item) {
   16020:	e024      	b.n	1606c <instance_count_native_bases+0xac>
                assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   16022:	69bb      	ldr	r3, [r7, #24]
   16024:	681b      	ldr	r3, [r3, #0]
   16026:	4618      	mov	r0, r3
   16028:	f7ff ffb8 	bl	15f9c <MP_OBJ_IS_OBJ>
   1602c:	4603      	mov	r3, r0
   1602e:	f083 0301 	eor.w	r3, r3, #1
   16032:	b2db      	uxtb	r3, r3
   16034:	2b00      	cmp	r3, #0
   16036:	d105      	bne.n	16044 <instance_count_native_bases+0x84>
   16038:	69bb      	ldr	r3, [r7, #24]
   1603a:	681b      	ldr	r3, [r3, #0]
   1603c:	681b      	ldr	r3, [r3, #0]
   1603e:	4a15      	ldr	r2, [pc, #84]	; (16094 <instance_count_native_bases+0xd4>)
   16040:	4293      	cmp	r3, r2
   16042:	d005      	beq.n	16050 <instance_count_native_bases+0x90>
   16044:	4b14      	ldr	r3, [pc, #80]	; (16098 <instance_count_native_bases+0xd8>)
   16046:	4a15      	ldr	r2, [pc, #84]	; (1609c <instance_count_native_bases+0xdc>)
   16048:	2145      	movs	r1, #69	; 0x45
   1604a:	4815      	ldr	r0, [pc, #84]	; (160a0 <instance_count_native_bases+0xe0>)
   1604c:	f005 f98e 	bl	1b36c <__assert_func>
                const mp_obj_type_t *bt = (const mp_obj_type_t *)MP_OBJ_TO_PTR(*item);
   16050:	69bb      	ldr	r3, [r7, #24]
   16052:	681b      	ldr	r3, [r3, #0]
   16054:	60fb      	str	r3, [r7, #12]
                count += instance_count_native_bases(bt, last_native_base);
   16056:	6839      	ldr	r1, [r7, #0]
   16058:	68f8      	ldr	r0, [r7, #12]
   1605a:	f7ff ffb1 	bl	15fc0 <instance_count_native_bases>
   1605e:	4602      	mov	r2, r0
   16060:	69fb      	ldr	r3, [r7, #28]
   16062:	4413      	add	r3, r2
   16064:	61fb      	str	r3, [r7, #28]
            for (; item < top; ++item) {
   16066:	69bb      	ldr	r3, [r7, #24]
   16068:	3304      	adds	r3, #4
   1606a:	61bb      	str	r3, [r7, #24]
   1606c:	69ba      	ldr	r2, [r7, #24]
   1606e:	693b      	ldr	r3, [r7, #16]
   16070:	429a      	cmp	r2, r3
   16072:	d3d6      	bcc.n	16022 <instance_count_native_bases+0x62>
            }
            return count;
   16074:	69fb      	ldr	r3, [r7, #28]
   16076:	e003      	b.n	16080 <instance_count_native_bases+0xc0>
        #endif
        } else {
            // A single parent, use iteration to continue the search.
            type = type->parent;
   16078:	687b      	ldr	r3, [r7, #4]
   1607a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1607c:	607b      	str	r3, [r7, #4]
        }
    }
   1607e:	e7a6      	b.n	15fce <instance_count_native_bases+0xe>
}
   16080:	4618      	mov	r0, r3
   16082:	3720      	adds	r7, #32
   16084:	46bd      	mov	sp, r7
   16086:	bd80      	pop	{r7, pc}
   16088:	00021478 	.word	0x00021478
   1608c:	000164d1 	.word	0x000164d1
   16090:	00021e68 	.word	0x00021e68
   16094:	00022160 	.word	0x00022160
   16098:	00021f28 	.word	0x00021f28
   1609c:	000223e4 	.word	0x000223e4
   160a0:	00021f50 	.word	0x00021f50

000160a4 <native_base_init_wrapper>:

// This wrapper function is allows a subclass of a native type to call the
// __init__() method (corresponding to type->make_new) of the native type.
STATIC mp_obj_t native_base_init_wrapper(size_t n_args, const mp_obj_t *args) {
   160a4:	b590      	push	{r4, r7, lr}
   160a6:	b085      	sub	sp, #20
   160a8:	af00      	add	r7, sp, #0
   160aa:	6078      	str	r0, [r7, #4]
   160ac:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(args[0]);
   160ae:	683b      	ldr	r3, [r7, #0]
   160b0:	681b      	ldr	r3, [r3, #0]
   160b2:	60fb      	str	r3, [r7, #12]
    const mp_obj_type_t *native_base = NULL;
   160b4:	2300      	movs	r3, #0
   160b6:	60bb      	str	r3, [r7, #8]
    instance_count_native_bases(self->base.type, &native_base);
   160b8:	68fb      	ldr	r3, [r7, #12]
   160ba:	681b      	ldr	r3, [r3, #0]
   160bc:	f107 0208 	add.w	r2, r7, #8
   160c0:	4611      	mov	r1, r2
   160c2:	4618      	mov	r0, r3
   160c4:	f7ff ff7c 	bl	15fc0 <instance_count_native_bases>
    self->subobj[0] = native_base->make_new(native_base, n_args - 1, 0, args + 1);
   160c8:	68bb      	ldr	r3, [r7, #8]
   160ca:	68dc      	ldr	r4, [r3, #12]
   160cc:	68b8      	ldr	r0, [r7, #8]
   160ce:	687b      	ldr	r3, [r7, #4]
   160d0:	1e59      	subs	r1, r3, #1
   160d2:	683b      	ldr	r3, [r7, #0]
   160d4:	3304      	adds	r3, #4
   160d6:	2200      	movs	r2, #0
   160d8:	47a0      	blx	r4
   160da:	4602      	mov	r2, r0
   160dc:	68fb      	ldr	r3, [r7, #12]
   160de:	611a      	str	r2, [r3, #16]
    return mp_const_none;
   160e0:	4b02      	ldr	r3, [pc, #8]	; (160ec <native_base_init_wrapper+0x48>)
}
   160e2:	4618      	mov	r0, r3
   160e4:	3714      	adds	r7, #20
   160e6:	46bd      	mov	sp, r7
   160e8:	bd90      	pop	{r4, r7, pc}
   160ea:	bf00      	nop
   160ec:	00021534 	.word	0x00021534

000160f0 <mp_obj_new_instance>:
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(native_base_init_wrapper_obj, 1, MP_OBJ_FUN_ARGS_MAX, native_base_init_wrapper);

#if !MICROPY_CPYTHON_COMPAT
STATIC
#endif
mp_obj_instance_t *mp_obj_new_instance(const mp_obj_type_t *class, const mp_obj_type_t **native_base) {
   160f0:	b580      	push	{r7, lr}
   160f2:	b084      	sub	sp, #16
   160f4:	af00      	add	r7, sp, #0
   160f6:	6078      	str	r0, [r7, #4]
   160f8:	6039      	str	r1, [r7, #0]
    size_t num_native_bases = instance_count_native_bases(class, native_base);
   160fa:	6839      	ldr	r1, [r7, #0]
   160fc:	6878      	ldr	r0, [r7, #4]
   160fe:	f7ff ff5f 	bl	15fc0 <instance_count_native_bases>
   16102:	4603      	mov	r3, r0
   16104:	60fb      	str	r3, [r7, #12]
    assert(num_native_bases < 2);
   16106:	68fb      	ldr	r3, [r7, #12]
   16108:	2b01      	cmp	r3, #1
   1610a:	d905      	bls.n	16118 <mp_obj_new_instance+0x28>
   1610c:	4b10      	ldr	r3, [pc, #64]	; (16150 <mp_obj_new_instance+0x60>)
   1610e:	4a11      	ldr	r2, [pc, #68]	; (16154 <mp_obj_new_instance+0x64>)
   16110:	2162      	movs	r1, #98	; 0x62
   16112:	4811      	ldr	r0, [pc, #68]	; (16158 <mp_obj_new_instance+0x68>)
   16114:	f005 f92a 	bl	1b36c <__assert_func>
    mp_obj_instance_t *o = m_new_obj_var(mp_obj_instance_t, mp_obj_t, num_native_bases);
   16118:	68fb      	ldr	r3, [r7, #12]
   1611a:	3304      	adds	r3, #4
   1611c:	009b      	lsls	r3, r3, #2
   1611e:	4618      	mov	r0, r3
   16120:	f7ea f8fc 	bl	31c <m_malloc>
   16124:	60b8      	str	r0, [r7, #8]
    o->base.type = class;
   16126:	68bb      	ldr	r3, [r7, #8]
   16128:	687a      	ldr	r2, [r7, #4]
   1612a:	601a      	str	r2, [r3, #0]
    mp_map_init(&o->members, 0);
   1612c:	68bb      	ldr	r3, [r7, #8]
   1612e:	3304      	adds	r3, #4
   16130:	2100      	movs	r1, #0
   16132:	4618      	mov	r0, r3
   16134:	f7f7 f8c8 	bl	d2c8 <mp_map_init>
    // Initialise the native base-class slot (should be 1 at most) with a valid
    // object.  It doesn't matter which object, so long as it can be uniquely
    // distinguished from a native class that is initialised.
    if (num_native_bases != 0) {
   16138:	68fb      	ldr	r3, [r7, #12]
   1613a:	2b00      	cmp	r3, #0
   1613c:	d002      	beq.n	16144 <mp_obj_new_instance+0x54>
        o->subobj[0] = MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj);
   1613e:	68bb      	ldr	r3, [r7, #8]
   16140:	4a06      	ldr	r2, [pc, #24]	; (1615c <mp_obj_new_instance+0x6c>)
   16142:	611a      	str	r2, [r3, #16]
    }
    return o;
   16144:	68bb      	ldr	r3, [r7, #8]
}
   16146:	4618      	mov	r0, r3
   16148:	3710      	adds	r7, #16
   1614a:	46bd      	mov	sp, r7
   1614c:	bd80      	pop	{r7, pc}
   1614e:	bf00      	nop
   16150:	00021f70 	.word	0x00021f70
   16154:	00022400 	.word	0x00022400
   16158:	00021f50 	.word	0x00021f50
   1615c:	00021f64 	.word	0x00021f64

00016160 <mp_obj_class_lookup>:
    size_t meth_offset;
    mp_obj_t *dest;
    bool is_type;
};

STATIC void mp_obj_class_lookup(struct class_lookup_data  *lookup, const mp_obj_type_t *type) {
   16160:	b580      	push	{r7, lr}
   16162:	b08c      	sub	sp, #48	; 0x30
   16164:	af00      	add	r7, sp, #0
   16166:	6078      	str	r0, [r7, #4]
   16168:	6039      	str	r1, [r7, #0]
    assert(lookup->dest[0] == MP_OBJ_NULL);
   1616a:	687b      	ldr	r3, [r7, #4]
   1616c:	68db      	ldr	r3, [r3, #12]
   1616e:	681b      	ldr	r3, [r3, #0]
   16170:	2b00      	cmp	r3, #0
   16172:	d005      	beq.n	16180 <mp_obj_class_lookup+0x20>
   16174:	4b88      	ldr	r3, [pc, #544]	; (16398 <mp_obj_class_lookup+0x238>)
   16176:	4a89      	ldr	r2, [pc, #548]	; (1639c <mp_obj_class_lookup+0x23c>)
   16178:	2186      	movs	r1, #134	; 0x86
   1617a:	4889      	ldr	r0, [pc, #548]	; (163a0 <mp_obj_class_lookup+0x240>)
   1617c:	f005 f8f6 	bl	1b36c <__assert_func>
    assert(lookup->dest[1] == MP_OBJ_NULL);
   16180:	687b      	ldr	r3, [r7, #4]
   16182:	68db      	ldr	r3, [r3, #12]
   16184:	3304      	adds	r3, #4
   16186:	681b      	ldr	r3, [r3, #0]
   16188:	2b00      	cmp	r3, #0
   1618a:	d005      	beq.n	16198 <mp_obj_class_lookup+0x38>
   1618c:	4b85      	ldr	r3, [pc, #532]	; (163a4 <mp_obj_class_lookup+0x244>)
   1618e:	4a83      	ldr	r2, [pc, #524]	; (1639c <mp_obj_class_lookup+0x23c>)
   16190:	2187      	movs	r1, #135	; 0x87
   16192:	4883      	ldr	r0, [pc, #524]	; (163a0 <mp_obj_class_lookup+0x240>)
   16194:	f005 f8ea 	bl	1b36c <__assert_func>
        DEBUG_printf("mp_obj_class_lookup: Looking up %s in %s\n", qstr_str(lookup->attr), qstr_str(type->name));
        // Optimize special method lookup for native types
        // This avoids extra method_name => slot lookup. On the other hand,
        // this should not be applied to class types, as will result in extra
        // lookup either.
        if (lookup->meth_offset != 0 && mp_obj_is_native_type(type)) {
   16198:	687b      	ldr	r3, [r7, #4]
   1619a:	689b      	ldr	r3, [r3, #8]
   1619c:	2b00      	cmp	r3, #0
   1619e:	d010      	beq.n	161c2 <mp_obj_class_lookup+0x62>
   161a0:	683b      	ldr	r3, [r7, #0]
   161a2:	68db      	ldr	r3, [r3, #12]
   161a4:	4a80      	ldr	r2, [pc, #512]	; (163a8 <mp_obj_class_lookup+0x248>)
   161a6:	4293      	cmp	r3, r2
   161a8:	d00b      	beq.n	161c2 <mp_obj_class_lookup+0x62>
            if (*(void**)((char*)type + lookup->meth_offset) != NULL) {
   161aa:	687b      	ldr	r3, [r7, #4]
   161ac:	689b      	ldr	r3, [r3, #8]
   161ae:	683a      	ldr	r2, [r7, #0]
   161b0:	4413      	add	r3, r2
   161b2:	681b      	ldr	r3, [r3, #0]
   161b4:	2b00      	cmp	r3, #0
   161b6:	d004      	beq.n	161c2 <mp_obj_class_lookup+0x62>
                DEBUG_printf("mp_obj_class_lookup: Matched special meth slot (off=%d) for %s\n",
                    lookup->meth_offset, qstr_str(lookup->attr));
                lookup->dest[0] = MP_OBJ_SENTINEL;
   161b8:	687b      	ldr	r3, [r7, #4]
   161ba:	68db      	ldr	r3, [r3, #12]
   161bc:	2208      	movs	r2, #8
   161be:	601a      	str	r2, [r3, #0]
                return;
   161c0:	e0e6      	b.n	16390 <mp_obj_class_lookup+0x230>
            }
        }

        if (type->locals_dict != NULL) {
   161c2:	683b      	ldr	r3, [r7, #0]
   161c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   161c6:	2b00      	cmp	r3, #0
   161c8:	d04b      	beq.n	16262 <mp_obj_class_lookup+0x102>
            // search locals_dict (the set of methods/attributes)
            assert(type->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
   161ca:	683b      	ldr	r3, [r7, #0]
   161cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   161ce:	681b      	ldr	r3, [r3, #0]
   161d0:	4a76      	ldr	r2, [pc, #472]	; (163ac <mp_obj_class_lookup+0x24c>)
   161d2:	4293      	cmp	r3, r2
   161d4:	d005      	beq.n	161e2 <mp_obj_class_lookup+0x82>
   161d6:	4b76      	ldr	r3, [pc, #472]	; (163b0 <mp_obj_class_lookup+0x250>)
   161d8:	4a70      	ldr	r2, [pc, #448]	; (1639c <mp_obj_class_lookup+0x23c>)
   161da:	2199      	movs	r1, #153	; 0x99
   161dc:	4870      	ldr	r0, [pc, #448]	; (163a0 <mp_obj_class_lookup+0x240>)
   161de:	f005 f8c5 	bl	1b36c <__assert_func>
            mp_map_t *locals_map = &type->locals_dict->map;
   161e2:	683b      	ldr	r3, [r7, #0]
   161e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   161e6:	3304      	adds	r3, #4
   161e8:	627b      	str	r3, [r7, #36]	; 0x24
            mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(lookup->attr), MP_MAP_LOOKUP);
   161ea:	687b      	ldr	r3, [r7, #4]
   161ec:	685b      	ldr	r3, [r3, #4]
   161ee:	009b      	lsls	r3, r3, #2
   161f0:	f043 0302 	orr.w	r3, r3, #2
   161f4:	2200      	movs	r2, #0
   161f6:	4619      	mov	r1, r3
   161f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
   161fa:	f7f7 f961 	bl	d4c0 <mp_map_lookup>
   161fe:	6238      	str	r0, [r7, #32]
            if (elem != NULL) {
   16200:	6a3b      	ldr	r3, [r7, #32]
   16202:	2b00      	cmp	r3, #0
   16204:	d02d      	beq.n	16262 <mp_obj_class_lookup+0x102>
                if (lookup->is_type) {
   16206:	687b      	ldr	r3, [r7, #4]
   16208:	7c1b      	ldrb	r3, [r3, #16]
   1620a:	2b00      	cmp	r3, #0
   1620c:	d00b      	beq.n	16226 <mp_obj_class_lookup+0xc6>
                    // If we look up a class method, we need to return original type for which we
                    // do a lookup, not a (base) type in which we found the class method.
                    const mp_obj_type_t *org_type = (const mp_obj_type_t*)lookup->obj;
   1620e:	687b      	ldr	r3, [r7, #4]
   16210:	681b      	ldr	r3, [r3, #0]
   16212:	61fb      	str	r3, [r7, #28]
                    mp_convert_member_lookup(MP_OBJ_NULL, org_type, elem->value, lookup->dest);
   16214:	6a3b      	ldr	r3, [r7, #32]
   16216:	685a      	ldr	r2, [r3, #4]
   16218:	687b      	ldr	r3, [r7, #4]
   1621a:	68db      	ldr	r3, [r3, #12]
   1621c:	69f9      	ldr	r1, [r7, #28]
   1621e:	2000      	movs	r0, #0
   16220:	f7f6 fa42 	bl	c6a8 <mp_convert_member_lookup>
                printf("mp_obj_class_lookup: Returning: ");
                mp_obj_print(lookup->dest[0], PRINT_REPR); printf(" ");
                // Don't try to repr() lookup->dest[1], as we can be called recursively
                printf("<%s @%p>\n", mp_obj_get_type_str(lookup->dest[1]), lookup->dest[1]);
#endif
                return;
   16224:	e0b4      	b.n	16390 <mp_obj_class_lookup+0x230>
                    mp_obj_instance_t *obj = lookup->obj;
   16226:	687b      	ldr	r3, [r7, #4]
   16228:	681b      	ldr	r3, [r3, #0]
   1622a:	61bb      	str	r3, [r7, #24]
                    if (obj != NULL && mp_obj_is_native_type(type) && type != &mp_type_object /* object is not a real type */) {
   1622c:	69bb      	ldr	r3, [r7, #24]
   1622e:	2b00      	cmp	r3, #0
   16230:	d00c      	beq.n	1624c <mp_obj_class_lookup+0xec>
   16232:	683b      	ldr	r3, [r7, #0]
   16234:	68db      	ldr	r3, [r3, #12]
   16236:	4a5c      	ldr	r2, [pc, #368]	; (163a8 <mp_obj_class_lookup+0x248>)
   16238:	4293      	cmp	r3, r2
   1623a:	d007      	beq.n	1624c <mp_obj_class_lookup+0xec>
   1623c:	683b      	ldr	r3, [r7, #0]
   1623e:	4a5d      	ldr	r2, [pc, #372]	; (163b4 <mp_obj_class_lookup+0x254>)
   16240:	4293      	cmp	r3, r2
   16242:	d003      	beq.n	1624c <mp_obj_class_lookup+0xec>
                        obj_obj = obj->subobj[0];
   16244:	69bb      	ldr	r3, [r7, #24]
   16246:	691b      	ldr	r3, [r3, #16]
   16248:	62fb      	str	r3, [r7, #44]	; 0x2c
   1624a:	e001      	b.n	16250 <mp_obj_class_lookup+0xf0>
                        obj_obj = MP_OBJ_FROM_PTR(obj);
   1624c:	69bb      	ldr	r3, [r7, #24]
   1624e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    mp_convert_member_lookup(obj_obj, type, elem->value, lookup->dest);
   16250:	6a3b      	ldr	r3, [r7, #32]
   16252:	685a      	ldr	r2, [r3, #4]
   16254:	687b      	ldr	r3, [r7, #4]
   16256:	68db      	ldr	r3, [r3, #12]
   16258:	6839      	ldr	r1, [r7, #0]
   1625a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1625c:	f7f6 fa24 	bl	c6a8 <mp_convert_member_lookup>
                return;
   16260:	e096      	b.n	16390 <mp_obj_class_lookup+0x230>
        }

        // Previous code block takes care about attributes defined in .locals_dict,
        // but some attributes of native types may be handled using .load_attr method,
        // so make sure we try to lookup those too.
        if (lookup->obj != NULL && !lookup->is_type && mp_obj_is_native_type(type) && type != &mp_type_object /* object is not a real type */) {
   16262:	687b      	ldr	r3, [r7, #4]
   16264:	681b      	ldr	r3, [r3, #0]
   16266:	2b00      	cmp	r3, #0
   16268:	d01e      	beq.n	162a8 <mp_obj_class_lookup+0x148>
   1626a:	687b      	ldr	r3, [r7, #4]
   1626c:	7c1b      	ldrb	r3, [r3, #16]
   1626e:	f083 0301 	eor.w	r3, r3, #1
   16272:	b2db      	uxtb	r3, r3
   16274:	2b00      	cmp	r3, #0
   16276:	d017      	beq.n	162a8 <mp_obj_class_lookup+0x148>
   16278:	683b      	ldr	r3, [r7, #0]
   1627a:	68db      	ldr	r3, [r3, #12]
   1627c:	4a4a      	ldr	r2, [pc, #296]	; (163a8 <mp_obj_class_lookup+0x248>)
   1627e:	4293      	cmp	r3, r2
   16280:	d012      	beq.n	162a8 <mp_obj_class_lookup+0x148>
   16282:	683b      	ldr	r3, [r7, #0]
   16284:	4a4b      	ldr	r2, [pc, #300]	; (163b4 <mp_obj_class_lookup+0x254>)
   16286:	4293      	cmp	r3, r2
   16288:	d00e      	beq.n	162a8 <mp_obj_class_lookup+0x148>
            mp_load_method_maybe(lookup->obj->subobj[0], lookup->attr, lookup->dest);
   1628a:	687b      	ldr	r3, [r7, #4]
   1628c:	681b      	ldr	r3, [r3, #0]
   1628e:	6918      	ldr	r0, [r3, #16]
   16290:	687b      	ldr	r3, [r7, #4]
   16292:	6859      	ldr	r1, [r3, #4]
   16294:	687b      	ldr	r3, [r7, #4]
   16296:	68db      	ldr	r3, [r3, #12]
   16298:	461a      	mov	r2, r3
   1629a:	f7f6 fa77 	bl	c78c <mp_load_method_maybe>
            if (lookup->dest[0] != MP_OBJ_NULL) {
   1629e:	687b      	ldr	r3, [r7, #4]
   162a0:	68db      	ldr	r3, [r3, #12]
   162a2:	681b      	ldr	r3, [r3, #0]
   162a4:	2b00      	cmp	r3, #0
   162a6:	d16c      	bne.n	16382 <mp_obj_class_lookup+0x222>
            }
        }

        // attribute not found, keep searching base classes

        if (type->parent == NULL) {
   162a8:	683b      	ldr	r3, [r7, #0]
   162aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   162ac:	2b00      	cmp	r3, #0
   162ae:	d06a      	beq.n	16386 <mp_obj_class_lookup+0x226>
            DEBUG_printf("mp_obj_class_lookup: No more parents\n");
            return;
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   162b0:	683b      	ldr	r3, [r7, #0]
   162b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   162b4:	681b      	ldr	r3, [r3, #0]
   162b6:	4a40      	ldr	r2, [pc, #256]	; (163b8 <mp_obj_class_lookup+0x258>)
   162b8:	4293      	cmp	r3, r2
   162ba:	d15a      	bne.n	16372 <mp_obj_class_lookup+0x212>
            const mp_obj_tuple_t *parent_tuple = type->parent;
   162bc:	683b      	ldr	r3, [r7, #0]
   162be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   162c0:	617b      	str	r3, [r7, #20]
            const mp_obj_t *item = parent_tuple->items;
   162c2:	697b      	ldr	r3, [r7, #20]
   162c4:	3308      	adds	r3, #8
   162c6:	62bb      	str	r3, [r7, #40]	; 0x28
            const mp_obj_t *top = item + parent_tuple->len - 1;
   162c8:	697b      	ldr	r3, [r7, #20]
   162ca:	685b      	ldr	r3, [r3, #4]
   162cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   162d0:	3b01      	subs	r3, #1
   162d2:	009b      	lsls	r3, r3, #2
   162d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   162d6:	4413      	add	r3, r2
   162d8:	613b      	str	r3, [r7, #16]
            for (; item < top; ++item) {
   162da:	e02b      	b.n	16334 <mp_obj_class_lookup+0x1d4>
                assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   162dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   162de:	681b      	ldr	r3, [r3, #0]
   162e0:	4618      	mov	r0, r3
   162e2:	f7ff fe5b 	bl	15f9c <MP_OBJ_IS_OBJ>
   162e6:	4603      	mov	r3, r0
   162e8:	f083 0301 	eor.w	r3, r3, #1
   162ec:	b2db      	uxtb	r3, r3
   162ee:	2b00      	cmp	r3, #0
   162f0:	d105      	bne.n	162fe <mp_obj_class_lookup+0x19e>
   162f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   162f4:	681b      	ldr	r3, [r3, #0]
   162f6:	681b      	ldr	r3, [r3, #0]
   162f8:	4a30      	ldr	r2, [pc, #192]	; (163bc <mp_obj_class_lookup+0x25c>)
   162fa:	4293      	cmp	r3, r2
   162fc:	d005      	beq.n	1630a <mp_obj_class_lookup+0x1aa>
   162fe:	4b30      	ldr	r3, [pc, #192]	; (163c0 <mp_obj_class_lookup+0x260>)
   16300:	4a26      	ldr	r2, [pc, #152]	; (1639c <mp_obj_class_lookup+0x23c>)
   16302:	21cc      	movs	r1, #204	; 0xcc
   16304:	4826      	ldr	r0, [pc, #152]	; (163a0 <mp_obj_class_lookup+0x240>)
   16306:	f005 f831 	bl	1b36c <__assert_func>
                mp_obj_type_t *bt = (mp_obj_type_t*)MP_OBJ_TO_PTR(*item);
   1630a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1630c:	681b      	ldr	r3, [r3, #0]
   1630e:	60fb      	str	r3, [r7, #12]
                if (bt == &mp_type_object) {
   16310:	68fb      	ldr	r3, [r7, #12]
   16312:	4a28      	ldr	r2, [pc, #160]	; (163b4 <mp_obj_class_lookup+0x254>)
   16314:	4293      	cmp	r3, r2
   16316:	d009      	beq.n	1632c <mp_obj_class_lookup+0x1cc>
                    // Not a "real" type
                    continue;
                }
                mp_obj_class_lookup(lookup, bt);
   16318:	68f9      	ldr	r1, [r7, #12]
   1631a:	6878      	ldr	r0, [r7, #4]
   1631c:	f7ff ff20 	bl	16160 <mp_obj_class_lookup>
                if (lookup->dest[0] != MP_OBJ_NULL) {
   16320:	687b      	ldr	r3, [r7, #4]
   16322:	68db      	ldr	r3, [r3, #12]
   16324:	681b      	ldr	r3, [r3, #0]
   16326:	2b00      	cmp	r3, #0
   16328:	d12f      	bne.n	1638a <mp_obj_class_lookup+0x22a>
   1632a:	e000      	b.n	1632e <mp_obj_class_lookup+0x1ce>
                    continue;
   1632c:	bf00      	nop
            for (; item < top; ++item) {
   1632e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16330:	3304      	adds	r3, #4
   16332:	62bb      	str	r3, [r7, #40]	; 0x28
   16334:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16336:	693b      	ldr	r3, [r7, #16]
   16338:	429a      	cmp	r2, r3
   1633a:	d3cf      	bcc.n	162dc <mp_obj_class_lookup+0x17c>
                    return;
                }
            }

            // search last base (simple tail recursion elimination)
            assert(MP_OBJ_IS_TYPE(*item, &mp_type_type));
   1633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1633e:	681b      	ldr	r3, [r3, #0]
   16340:	4618      	mov	r0, r3
   16342:	f7ff fe2b 	bl	15f9c <MP_OBJ_IS_OBJ>
   16346:	4603      	mov	r3, r0
   16348:	f083 0301 	eor.w	r3, r3, #1
   1634c:	b2db      	uxtb	r3, r3
   1634e:	2b00      	cmp	r3, #0
   16350:	d105      	bne.n	1635e <mp_obj_class_lookup+0x1fe>
   16352:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16354:	681b      	ldr	r3, [r3, #0]
   16356:	681b      	ldr	r3, [r3, #0]
   16358:	4a18      	ldr	r2, [pc, #96]	; (163bc <mp_obj_class_lookup+0x25c>)
   1635a:	4293      	cmp	r3, r2
   1635c:	d005      	beq.n	1636a <mp_obj_class_lookup+0x20a>
   1635e:	4b18      	ldr	r3, [pc, #96]	; (163c0 <mp_obj_class_lookup+0x260>)
   16360:	4a0e      	ldr	r2, [pc, #56]	; (1639c <mp_obj_class_lookup+0x23c>)
   16362:	21d9      	movs	r1, #217	; 0xd9
   16364:	480e      	ldr	r0, [pc, #56]	; (163a0 <mp_obj_class_lookup+0x240>)
   16366:	f005 f801 	bl	1b36c <__assert_func>
            type = (mp_obj_type_t*)MP_OBJ_TO_PTR(*item);
   1636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1636c:	681b      	ldr	r3, [r3, #0]
   1636e:	603b      	str	r3, [r7, #0]
   16370:	e002      	b.n	16378 <mp_obj_class_lookup+0x218>
        #endif
        } else {
            type = type->parent;
   16372:	683b      	ldr	r3, [r7, #0]
   16374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16376:	603b      	str	r3, [r7, #0]
        }
        if (type == &mp_type_object) {
   16378:	683b      	ldr	r3, [r7, #0]
   1637a:	4a0e      	ldr	r2, [pc, #56]	; (163b4 <mp_obj_class_lookup+0x254>)
   1637c:	4293      	cmp	r3, r2
   1637e:	d006      	beq.n	1638e <mp_obj_class_lookup+0x22e>
            // Not a "real" type
            return;
        }
    }
   16380:	e70a      	b.n	16198 <mp_obj_class_lookup+0x38>
                return;
   16382:	bf00      	nop
   16384:	e004      	b.n	16390 <mp_obj_class_lookup+0x230>
            return;
   16386:	bf00      	nop
   16388:	e002      	b.n	16390 <mp_obj_class_lookup+0x230>
                    return;
   1638a:	bf00      	nop
   1638c:	e000      	b.n	16390 <mp_obj_class_lookup+0x230>
            return;
   1638e:	bf00      	nop
}
   16390:	3730      	adds	r7, #48	; 0x30
   16392:	46bd      	mov	sp, r7
   16394:	bd80      	pop	{r7, pc}
   16396:	bf00      	nop
   16398:	00021f88 	.word	0x00021f88
   1639c:	00022414 	.word	0x00022414
   163a0:	00021f50 	.word	0x00021f50
   163a4:	00021fa8 	.word	0x00021fa8
   163a8:	000164d1 	.word	0x000164d1
   163ac:	000200e8 	.word	0x000200e8
   163b0:	00021fc8 	.word	0x00021fc8
   163b4:	00021478 	.word	0x00021478
   163b8:	00021e68 	.word	0x00021e68
   163bc:	00022160 	.word	0x00022160
   163c0:	00021f28 	.word	0x00021f28

000163c4 <instance_print>:

STATIC void instance_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   163c4:	b580      	push	{r7, lr}
   163c6:	b08e      	sub	sp, #56	; 0x38
   163c8:	af00      	add	r7, sp, #0
   163ca:	60f8      	str	r0, [r7, #12]
   163cc:	60b9      	str	r1, [r7, #8]
   163ce:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   163d0:	68bb      	ldr	r3, [r7, #8]
   163d2:	637b      	str	r3, [r7, #52]	; 0x34
    qstr meth = (kind == PRINT_STR) ? MP_QSTR___str__ : MP_QSTR___repr__;
   163d4:	687b      	ldr	r3, [r7, #4]
   163d6:	2b00      	cmp	r3, #0
   163d8:	d101      	bne.n	163de <instance_print+0x1a>
   163da:	2323      	movs	r3, #35	; 0x23
   163dc:	e000      	b.n	163e0 <instance_print+0x1c>
   163de:	2321      	movs	r3, #33	; 0x21
   163e0:	633b      	str	r3, [r7, #48]	; 0x30
    mp_obj_t member[2] = {MP_OBJ_NULL};
   163e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
   163e6:	2200      	movs	r2, #0
   163e8:	601a      	str	r2, [r3, #0]
   163ea:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   163ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   163ee:	613b      	str	r3, [r7, #16]
   163f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   163f2:	617b      	str	r3, [r7, #20]
   163f4:	2308      	movs	r3, #8
   163f6:	61bb      	str	r3, [r7, #24]
   163f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
   163fc:	61fb      	str	r3, [r7, #28]
   163fe:	2300      	movs	r3, #0
   16400:	f887 3020 	strb.w	r3, [r7, #32]
        .attr = meth,
        .meth_offset = offsetof(mp_obj_type_t, print),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16406:	681a      	ldr	r2, [r3, #0]
   16408:	f107 0310 	add.w	r3, r7, #16
   1640c:	4611      	mov	r1, r2
   1640e:	4618      	mov	r0, r3
   16410:	f7ff fea6 	bl	16160 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_NULL && kind == PRINT_STR) {
   16414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16416:	2b00      	cmp	r3, #0
   16418:	d10e      	bne.n	16438 <instance_print+0x74>
   1641a:	687b      	ldr	r3, [r7, #4]
   1641c:	2b00      	cmp	r3, #0
   1641e:	d10b      	bne.n	16438 <instance_print+0x74>
        // If there's no __str__, fall back to __repr__
        lookup.attr = MP_QSTR___repr__;
   16420:	2321      	movs	r3, #33	; 0x21
   16422:	617b      	str	r3, [r7, #20]
        lookup.meth_offset = 0;
   16424:	2300      	movs	r3, #0
   16426:	61bb      	str	r3, [r7, #24]
        mp_obj_class_lookup(&lookup, self->base.type);
   16428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1642a:	681a      	ldr	r2, [r3, #0]
   1642c:	f107 0310 	add.w	r3, r7, #16
   16430:	4611      	mov	r1, r2
   16432:	4618      	mov	r0, r3
   16434:	f7ff fe94 	bl	16160 <mp_obj_class_lookup>
    }

    if (member[0] == MP_OBJ_SENTINEL) {
   16438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1643a:	2b08      	cmp	r3, #8
   1643c:	d129      	bne.n	16492 <instance_print+0xce>
        // Handle Exception subclasses specially
        if (mp_obj_is_native_exception_instance(self->subobj[0])) {
   1643e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16440:	691b      	ldr	r3, [r3, #16]
   16442:	4618      	mov	r0, r3
   16444:	f7f7 f9e6 	bl	d814 <mp_obj_get_type>
   16448:	4603      	mov	r3, r0
   1644a:	68db      	ldr	r3, [r3, #12]
   1644c:	4a1e      	ldr	r2, [pc, #120]	; (164c8 <instance_print+0x104>)
   1644e:	4293      	cmp	r3, r2
   16450:	d117      	bne.n	16482 <instance_print+0xbe>
            if (kind != PRINT_STR) {
   16452:	687b      	ldr	r3, [r7, #4]
   16454:	2b00      	cmp	r3, #0
   16456:	d00a      	beq.n	1646e <instance_print+0xaa>
                mp_print_str(print, qstr_str(self->base.type->name));
   16458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1645a:	681b      	ldr	r3, [r3, #0]
   1645c:	685b      	ldr	r3, [r3, #4]
   1645e:	4618      	mov	r0, r3
   16460:	f7ea fec8 	bl	11f4 <qstr_str>
   16464:	4603      	mov	r3, r0
   16466:	4619      	mov	r1, r3
   16468:	68f8      	ldr	r0, [r7, #12]
   1646a:	f7eb fa07 	bl	187c <mp_print_str>
            }
            mp_obj_print_helper(print, self->subobj[0], kind | PRINT_EXC_SUBCLASS);
   1646e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16470:	6919      	ldr	r1, [r3, #16]
   16472:	687b      	ldr	r3, [r7, #4]
   16474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16478:	461a      	mov	r2, r3
   1647a:	68f8      	ldr	r0, [r7, #12]
   1647c:	f7f7 f9fc 	bl	d878 <mp_obj_print_helper>
        } else {
            mp_obj_print_helper(print, self->subobj[0], kind);
        }
        return;
   16480:	e01f      	b.n	164c2 <instance_print+0xfe>
            mp_obj_print_helper(print, self->subobj[0], kind);
   16482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16484:	691b      	ldr	r3, [r3, #16]
   16486:	687a      	ldr	r2, [r7, #4]
   16488:	4619      	mov	r1, r3
   1648a:	68f8      	ldr	r0, [r7, #12]
   1648c:	f7f7 f9f4 	bl	d878 <mp_obj_print_helper>
        return;
   16490:	e017      	b.n	164c2 <instance_print+0xfe>
    }

    if (member[0] != MP_OBJ_NULL) {
   16492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16494:	2b00      	cmp	r3, #0
   16496:	d00b      	beq.n	164b0 <instance_print+0xec>
        mp_obj_t r = mp_call_function_1(member[0], self_in);
   16498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1649a:	68b9      	ldr	r1, [r7, #8]
   1649c:	4618      	mov	r0, r3
   1649e:	f7f5 fcb5 	bl	be0c <mp_call_function_1>
   164a2:	62f8      	str	r0, [r7, #44]	; 0x2c
        mp_obj_print_helper(print, r, PRINT_STR);
   164a4:	2200      	movs	r2, #0
   164a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   164a8:	68f8      	ldr	r0, [r7, #12]
   164aa:	f7f7 f9e5 	bl	d878 <mp_obj_print_helper>
        return;
   164ae:	e008      	b.n	164c2 <instance_print+0xfe>
    }

    // TODO: CPython prints fully-qualified type name
    mp_printf(print, "<%s object at %p>", mp_obj_get_type_str(self_in), self);
   164b0:	68b8      	ldr	r0, [r7, #8]
   164b2:	f7f7 f9cf 	bl	d854 <mp_obj_get_type_str>
   164b6:	4602      	mov	r2, r0
   164b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   164ba:	4904      	ldr	r1, [pc, #16]	; (164cc <instance_print+0x108>)
   164bc:	68f8      	ldr	r0, [r7, #12]
   164be:	f7eb fcf1 	bl	1ea4 <mp_printf>
}
   164c2:	3738      	adds	r7, #56	; 0x38
   164c4:	46bd      	mov	sp, r7
   164c6:	bd80      	pop	{r7, pc}
   164c8:	0000f359 	.word	0x0000f359
   164cc:	00021ff8 	.word	0x00021ff8

000164d0 <mp_obj_instance_make_new>:

mp_obj_t mp_obj_instance_make_new(const mp_obj_type_t *self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   164d0:	b590      	push	{r4, r7, lr}
   164d2:	b093      	sub	sp, #76	; 0x4c
   164d4:	af00      	add	r7, sp, #0
   164d6:	60f8      	str	r0, [r7, #12]
   164d8:	60b9      	str	r1, [r7, #8]
   164da:	607a      	str	r2, [r7, #4]
   164dc:	603b      	str	r3, [r7, #0]
    assert(mp_obj_is_instance_type(self));
   164de:	68fb      	ldr	r3, [r7, #12]
   164e0:	68db      	ldr	r3, [r3, #12]
   164e2:	4a6b      	ldr	r2, [pc, #428]	; (16690 <mp_obj_instance_make_new+0x1c0>)
   164e4:	4293      	cmp	r3, r2
   164e6:	d006      	beq.n	164f6 <mp_obj_instance_make_new+0x26>
   164e8:	4b6a      	ldr	r3, [pc, #424]	; (16694 <mp_obj_instance_make_new+0x1c4>)
   164ea:	4a6b      	ldr	r2, [pc, #428]	; (16698 <mp_obj_instance_make_new+0x1c8>)
   164ec:	f240 1111 	movw	r1, #273	; 0x111
   164f0:	486a      	ldr	r0, [pc, #424]	; (1669c <mp_obj_instance_make_new+0x1cc>)
   164f2:	f004 ff3b 	bl	1b36c <__assert_func>

    // look for __new__ function
    mp_obj_t init_fn[2] = {MP_OBJ_NULL};
   164f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   164fa:	2200      	movs	r2, #0
   164fc:	601a      	str	r2, [r3, #0]
   164fe:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16500:	2300      	movs	r3, #0
   16502:	61bb      	str	r3, [r7, #24]
   16504:	231c      	movs	r3, #28
   16506:	61fb      	str	r3, [r7, #28]
   16508:	230c      	movs	r3, #12
   1650a:	623b      	str	r3, [r7, #32]
   1650c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16510:	627b      	str	r3, [r7, #36]	; 0x24
   16512:	2300      	movs	r3, #0
   16514:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        .attr = MP_QSTR___new__,
        .meth_offset = offsetof(mp_obj_type_t, make_new),
        .dest = init_fn,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self);
   16518:	f107 0318 	add.w	r3, r7, #24
   1651c:	68f9      	ldr	r1, [r7, #12]
   1651e:	4618      	mov	r0, r3
   16520:	f7ff fe1e 	bl	16160 <mp_obj_class_lookup>

    const mp_obj_type_t *native_base = NULL;
   16524:	2300      	movs	r3, #0
   16526:	617b      	str	r3, [r7, #20]
    mp_obj_instance_t *o;
    if (init_fn[0] == MP_OBJ_NULL || init_fn[0] == MP_OBJ_SENTINEL) {
   16528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1652a:	2b00      	cmp	r3, #0
   1652c:	d002      	beq.n	16534 <mp_obj_instance_make_new+0x64>
   1652e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16530:	2b08      	cmp	r3, #8
   16532:	d107      	bne.n	16544 <mp_obj_instance_make_new+0x74>
        // Either there is no __new__() method defined or there is a native
        // constructor.  In both cases create a blank instance.
        o = mp_obj_new_instance(self, &native_base);
   16534:	f107 0314 	add.w	r3, r7, #20
   16538:	4619      	mov	r1, r3
   1653a:	68f8      	ldr	r0, [r7, #12]
   1653c:	f7ff fdd8 	bl	160f0 <mp_obj_new_instance>
   16540:	6478      	str	r0, [r7, #68]	; 0x44
   16542:	e03e      	b.n	165c2 <mp_obj_instance_make_new+0xf2>
        // said native constructor.

    } else {
        // Call Python class __new__ function with all args to create an instance
        mp_obj_t new_ret;
        if (n_args == 0 && n_kw == 0) {
   16544:	68bb      	ldr	r3, [r7, #8]
   16546:	2b00      	cmp	r3, #0
   16548:	d10d      	bne.n	16566 <mp_obj_instance_make_new+0x96>
   1654a:	687b      	ldr	r3, [r7, #4]
   1654c:	2b00      	cmp	r3, #0
   1654e:	d10a      	bne.n	16566 <mp_obj_instance_make_new+0x96>
            mp_obj_t args2[1] = {MP_OBJ_FROM_PTR(self)};
   16550:	68fb      	ldr	r3, [r7, #12]
   16552:	613b      	str	r3, [r7, #16]
            new_ret = mp_call_function_n_kw(init_fn[0], 1, 0, args2);
   16554:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16556:	f107 0310 	add.w	r3, r7, #16
   1655a:	2200      	movs	r2, #0
   1655c:	2101      	movs	r1, #1
   1655e:	f7f5 fc7b 	bl	be58 <mp_call_function_n_kw>
   16562:	6438      	str	r0, [r7, #64]	; 0x40
        if (n_args == 0 && n_kw == 0) {
   16564:	e022      	b.n	165ac <mp_obj_instance_make_new+0xdc>
        } else {
            mp_obj_t *args2 = m_new(mp_obj_t, 1 + n_args + 2 * n_kw);
   16566:	687b      	ldr	r3, [r7, #4]
   16568:	005a      	lsls	r2, r3, #1
   1656a:	68bb      	ldr	r3, [r7, #8]
   1656c:	4413      	add	r3, r2
   1656e:	3301      	adds	r3, #1
   16570:	009b      	lsls	r3, r3, #2
   16572:	4618      	mov	r0, r3
   16574:	f7e9 fed2 	bl	31c <m_malloc>
   16578:	63b8      	str	r0, [r7, #56]	; 0x38
            args2[0] = MP_OBJ_FROM_PTR(self);
   1657a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1657c:	68fa      	ldr	r2, [r7, #12]
   1657e:	601a      	str	r2, [r3, #0]
            memcpy(args2 + 1, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
   16580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16582:	1d18      	adds	r0, r3, #4
   16584:	687b      	ldr	r3, [r7, #4]
   16586:	005a      	lsls	r2, r3, #1
   16588:	68bb      	ldr	r3, [r7, #8]
   1658a:	4413      	add	r3, r2
   1658c:	009b      	lsls	r3, r3, #2
   1658e:	461a      	mov	r2, r3
   16590:	6839      	ldr	r1, [r7, #0]
   16592:	f005 fc97 	bl	1bec4 <memcpy>
            new_ret = mp_call_function_n_kw(init_fn[0], n_args + 1, n_kw, args2);
   16596:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16598:	68bb      	ldr	r3, [r7, #8]
   1659a:	1c59      	adds	r1, r3, #1
   1659c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1659e:	687a      	ldr	r2, [r7, #4]
   165a0:	f7f5 fc5a 	bl	be58 <mp_call_function_n_kw>
   165a4:	6438      	str	r0, [r7, #64]	; 0x40
            m_del(mp_obj_t, args2, 1 + n_args + 2 * n_kw);
   165a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   165a8:	f7e9 ff1a 	bl	3e0 <m_free>
        }

        // https://docs.python.org/3.4/reference/datamodel.html#object.__new__
        // "If __new__() does not return an instance of cls, then the new
        // instance's __init__() method will not be invoked."
        if (mp_obj_get_type(new_ret) != self) {
   165ac:	6c38      	ldr	r0, [r7, #64]	; 0x40
   165ae:	f7f7 f931 	bl	d814 <mp_obj_get_type>
   165b2:	4602      	mov	r2, r0
   165b4:	68fb      	ldr	r3, [r7, #12]
   165b6:	429a      	cmp	r2, r3
   165b8:	d001      	beq.n	165be <mp_obj_instance_make_new+0xee>
            return new_ret;
   165ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   165bc:	e063      	b.n	16686 <mp_obj_instance_make_new+0x1b6>
        }

        // The instance returned by __new__() becomes the new object
        o = MP_OBJ_TO_PTR(new_ret);
   165be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   165c0:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // now call Python class __init__ function with all args
    // This method has a chance to call super().__init__() to construct a
    // possible native base class.
    init_fn[0] = init_fn[1] = MP_OBJ_NULL;
   165c2:	2300      	movs	r3, #0
   165c4:	633b      	str	r3, [r7, #48]	; 0x30
   165c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   165c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    lookup.obj = o;
   165ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   165cc:	61bb      	str	r3, [r7, #24]
    lookup.attr = MP_QSTR___init__;
   165ce:	2313      	movs	r3, #19
   165d0:	61fb      	str	r3, [r7, #28]
    lookup.meth_offset = 0;
   165d2:	2300      	movs	r3, #0
   165d4:	623b      	str	r3, [r7, #32]
    mp_obj_class_lookup(&lookup, self);
   165d6:	f107 0318 	add.w	r3, r7, #24
   165da:	68f9      	ldr	r1, [r7, #12]
   165dc:	4618      	mov	r0, r3
   165de:	f7ff fdbf 	bl	16160 <mp_obj_class_lookup>
    if (init_fn[0] != MP_OBJ_NULL) {
   165e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   165e4:	2b00      	cmp	r3, #0
   165e6:	d03b      	beq.n	16660 <mp_obj_instance_make_new+0x190>
        mp_obj_t init_ret;
        if (n_args == 0 && n_kw == 0) {
   165e8:	68bb      	ldr	r3, [r7, #8]
   165ea:	2b00      	cmp	r3, #0
   165ec:	d10b      	bne.n	16606 <mp_obj_instance_make_new+0x136>
   165ee:	687b      	ldr	r3, [r7, #4]
   165f0:	2b00      	cmp	r3, #0
   165f2:	d108      	bne.n	16606 <mp_obj_instance_make_new+0x136>
            init_ret = mp_call_method_n_kw(0, 0, init_fn);
   165f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   165f8:	461a      	mov	r2, r3
   165fa:	2100      	movs	r1, #0
   165fc:	2000      	movs	r0, #0
   165fe:	f7f5 fc4d 	bl	be9c <mp_call_method_n_kw>
   16602:	63f8      	str	r0, [r7, #60]	; 0x3c
   16604:	e025      	b.n	16652 <mp_obj_instance_make_new+0x182>
        } else {
            mp_obj_t *args2 = m_new(mp_obj_t, 2 + n_args + 2 * n_kw);
   16606:	687b      	ldr	r3, [r7, #4]
   16608:	005a      	lsls	r2, r3, #1
   1660a:	68bb      	ldr	r3, [r7, #8]
   1660c:	4413      	add	r3, r2
   1660e:	3302      	adds	r3, #2
   16610:	009b      	lsls	r3, r3, #2
   16612:	4618      	mov	r0, r3
   16614:	f7e9 fe82 	bl	31c <m_malloc>
   16618:	6378      	str	r0, [r7, #52]	; 0x34
            args2[0] = init_fn[0];
   1661a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1661c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1661e:	601a      	str	r2, [r3, #0]
            args2[1] = init_fn[1];
   16620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16622:	3304      	adds	r3, #4
   16624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   16626:	601a      	str	r2, [r3, #0]
            memcpy(args2 + 2, args, (n_args + 2 * n_kw) * sizeof(mp_obj_t));
   16628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1662a:	f103 0008 	add.w	r0, r3, #8
   1662e:	687b      	ldr	r3, [r7, #4]
   16630:	005a      	lsls	r2, r3, #1
   16632:	68bb      	ldr	r3, [r7, #8]
   16634:	4413      	add	r3, r2
   16636:	009b      	lsls	r3, r3, #2
   16638:	461a      	mov	r2, r3
   1663a:	6839      	ldr	r1, [r7, #0]
   1663c:	f005 fc42 	bl	1bec4 <memcpy>
            init_ret = mp_call_method_n_kw(n_args, n_kw, args2);
   16640:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16642:	6879      	ldr	r1, [r7, #4]
   16644:	68b8      	ldr	r0, [r7, #8]
   16646:	f7f5 fc29 	bl	be9c <mp_call_method_n_kw>
   1664a:	63f8      	str	r0, [r7, #60]	; 0x3c
            m_del(mp_obj_t, args2, 2 + n_args + 2 * n_kw);
   1664c:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1664e:	f7e9 fec7 	bl	3e0 <m_free>
        }
        if (init_ret != mp_const_none) {
   16652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16654:	4a12      	ldr	r2, [pc, #72]	; (166a0 <mp_obj_instance_make_new+0x1d0>)
   16656:	4293      	cmp	r3, r2
   16658:	d002      	beq.n	16660 <mp_obj_instance_make_new+0x190>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("__init__() should return None");
   1665a:	4812      	ldr	r0, [pc, #72]	; (166a4 <mp_obj_instance_make_new+0x1d4>)
   1665c:	f7f6 fcc0 	bl	cfe0 <mp_raise_TypeError>

    }

    // If the type had a native base that was not explicitly initialised
    // (constructed) by the Python __init__() method then construct it now.
    if (native_base != NULL && o->subobj[0] == MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj)) {
   16660:	697b      	ldr	r3, [r7, #20]
   16662:	2b00      	cmp	r3, #0
   16664:	d00e      	beq.n	16684 <mp_obj_instance_make_new+0x1b4>
   16666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16668:	691b      	ldr	r3, [r3, #16]
   1666a:	4a0f      	ldr	r2, [pc, #60]	; (166a8 <mp_obj_instance_make_new+0x1d8>)
   1666c:	4293      	cmp	r3, r2
   1666e:	d109      	bne.n	16684 <mp_obj_instance_make_new+0x1b4>
        o->subobj[0] = native_base->make_new(native_base, n_args, n_kw, args);
   16670:	697b      	ldr	r3, [r7, #20]
   16672:	68dc      	ldr	r4, [r3, #12]
   16674:	6978      	ldr	r0, [r7, #20]
   16676:	683b      	ldr	r3, [r7, #0]
   16678:	687a      	ldr	r2, [r7, #4]
   1667a:	68b9      	ldr	r1, [r7, #8]
   1667c:	47a0      	blx	r4
   1667e:	4602      	mov	r2, r0
   16680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16682:	611a      	str	r2, [r3, #16]
    }

    return MP_OBJ_FROM_PTR(o);
   16684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   16686:	4618      	mov	r0, r3
   16688:	374c      	adds	r7, #76	; 0x4c
   1668a:	46bd      	mov	sp, r7
   1668c:	bd90      	pop	{r4, r7, pc}
   1668e:	bf00      	nop
   16690:	000164d1 	.word	0x000164d1
   16694:	0002200c 	.word	0x0002200c
   16698:	00022428 	.word	0x00022428
   1669c:	00021f50 	.word	0x00021f50
   166a0:	00021534 	.word	0x00021534
   166a4:	0002202c 	.word	0x0002202c
   166a8:	00021f64 	.word	0x00021f64

000166ac <instance_unary_op>:
    #if MICROPY_PY_SYS_GETSIZEOF
    [MP_UNARY_OP_SIZEOF] = MP_QSTR___sizeof__,
    #endif
};

STATIC mp_obj_t instance_unary_op(mp_unary_op_t op, mp_obj_t self_in) {
   166ac:	b580      	push	{r7, lr}
   166ae:	b08c      	sub	sp, #48	; 0x30
   166b0:	af00      	add	r7, sp, #0
   166b2:	6078      	str	r0, [r7, #4]
   166b4:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   166b6:	683b      	ldr	r3, [r7, #0]
   166b8:	62bb      	str	r3, [r7, #40]	; 0x28
            + sizeof(*self->members.table) * self->members.alloc;
        return MP_OBJ_NEW_SMALL_INT(sz);
    }
    #endif

    qstr op_name = mp_unary_op_method_name[op];
   166ba:	4a2c      	ldr	r2, [pc, #176]	; (1676c <instance_unary_op+0xc0>)
   166bc:	687b      	ldr	r3, [r7, #4]
   166be:	4413      	add	r3, r2
   166c0:	781b      	ldrb	r3, [r3, #0]
   166c2:	627b      	str	r3, [r7, #36]	; 0x24
    /* Still try to lookup native slot
    if (op_name == 0) {
        return MP_OBJ_NULL;
    }
    */
    mp_obj_t member[2] = {MP_OBJ_NULL};
   166c4:	f107 031c 	add.w	r3, r7, #28
   166c8:	2200      	movs	r2, #0
   166ca:	601a      	str	r2, [r3, #0]
   166cc:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   166ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   166d0:	60bb      	str	r3, [r7, #8]
   166d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   166d4:	60fb      	str	r3, [r7, #12]
   166d6:	2314      	movs	r3, #20
   166d8:	613b      	str	r3, [r7, #16]
   166da:	f107 031c 	add.w	r3, r7, #28
   166de:	617b      	str	r3, [r7, #20]
   166e0:	2300      	movs	r3, #0
   166e2:	763b      	strb	r3, [r7, #24]
        .attr = op_name,
        .meth_offset = offsetof(mp_obj_type_t, unary_op),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   166e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   166e6:	681a      	ldr	r2, [r3, #0]
   166e8:	f107 0308 	add.w	r3, r7, #8
   166ec:	4611      	mov	r1, r2
   166ee:	4618      	mov	r0, r3
   166f0:	f7ff fd36 	bl	16160 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_SENTINEL) {
   166f4:	69fb      	ldr	r3, [r7, #28]
   166f6:	2b08      	cmp	r3, #8
   166f8:	d107      	bne.n	1670a <instance_unary_op+0x5e>
        return mp_unary_op(op, self->subobj[0]);
   166fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   166fc:	691b      	ldr	r3, [r3, #16]
   166fe:	4619      	mov	r1, r3
   16700:	6878      	ldr	r0, [r7, #4]
   16702:	f7f5 f82f 	bl	b764 <mp_unary_op>
   16706:	4603      	mov	r3, r0
   16708:	e02b      	b.n	16762 <instance_unary_op+0xb6>
    } else if (member[0] != MP_OBJ_NULL) {
   1670a:	69fb      	ldr	r3, [r7, #28]
   1670c:	2b00      	cmp	r3, #0
   1670e:	d012      	beq.n	16736 <instance_unary_op+0x8a>
        mp_obj_t val = mp_call_function_1(member[0], self_in);
   16710:	69fb      	ldr	r3, [r7, #28]
   16712:	6839      	ldr	r1, [r7, #0]
   16714:	4618      	mov	r0, r3
   16716:	f7f5 fb79 	bl	be0c <mp_call_function_1>
   1671a:	62f8      	str	r0, [r7, #44]	; 0x2c
        // __hash__ must return a small int
        if (op == MP_UNARY_OP_HASH) {
   1671c:	687b      	ldr	r3, [r7, #4]
   1671e:	2b06      	cmp	r3, #6
   16720:	d107      	bne.n	16732 <instance_unary_op+0x86>
            val = MP_OBJ_NEW_SMALL_INT(mp_obj_get_int_truncated(val));
   16722:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16724:	f7f7 fa8c 	bl	dc40 <mp_obj_get_int_truncated>
   16728:	4603      	mov	r3, r0
   1672a:	005b      	lsls	r3, r3, #1
   1672c:	f043 0301 	orr.w	r3, r3, #1
   16730:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        return val;
   16732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16734:	e015      	b.n	16762 <instance_unary_op+0xb6>
    } else {
        if (op == MP_UNARY_OP_HASH) {
   16736:	687b      	ldr	r3, [r7, #4]
   16738:	2b06      	cmp	r3, #6
   1673a:	d111      	bne.n	16760 <instance_unary_op+0xb4>
            lookup.attr = MP_QSTR___eq__;
   1673c:	230a      	movs	r3, #10
   1673e:	60fb      	str	r3, [r7, #12]
            mp_obj_class_lookup(&lookup, self->base.type);
   16740:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16742:	681a      	ldr	r2, [r3, #0]
   16744:	f107 0308 	add.w	r3, r7, #8
   16748:	4611      	mov	r1, r2
   1674a:	4618      	mov	r0, r3
   1674c:	f7ff fd08 	bl	16160 <mp_obj_class_lookup>
            if (member[0] == MP_OBJ_NULL) {
   16750:	69fb      	ldr	r3, [r7, #28]
   16752:	2b00      	cmp	r3, #0
   16754:	d104      	bne.n	16760 <instance_unary_op+0xb4>
                // https://docs.python.org/3/reference/datamodel.html#object.__hash__
                // "User-defined classes have __eq__() and __hash__() methods by default;
                // with them, all objects compare unequal (except with themselves) and
                // x.__hash__() returns an appropriate value such that x == y implies
                // both that x is y and hash(x) == hash(y)."
                return MP_OBJ_NEW_SMALL_INT((mp_uint_t)self_in);
   16756:	683b      	ldr	r3, [r7, #0]
   16758:	005b      	lsls	r3, r3, #1
   1675a:	f043 0301 	orr.w	r3, r3, #1
   1675e:	e000      	b.n	16762 <instance_unary_op+0xb6>
            }
            // "A class that overrides __eq__() and does not define __hash__() will have its __hash__() implicitly set to None.
            // When the __hash__() method of a class is None, instances of the class will raise an appropriate TypeError"
        }

        return MP_OBJ_NULL; // op not supported
   16760:	2300      	movs	r3, #0
    }
}
   16762:	4618      	mov	r0, r3
   16764:	3730      	adds	r7, #48	; 0x30
   16766:	46bd      	mov	sp, r7
   16768:	bd80      	pop	{r7, pc}
   1676a:	bf00      	nop
   1676c:	0002204c 	.word	0x0002204c

00016770 <instance_binary_op>:
    [MP_BINARY_OP_REVERSE_RSHIFT] = MP_QSTR___rrshift__,
    #endif
    #endif
};

STATIC mp_obj_t instance_binary_op(mp_binary_op_t op, mp_obj_t lhs_in, mp_obj_t rhs_in) {
   16770:	b580      	push	{r7, lr}
   16772:	b090      	sub	sp, #64	; 0x40
   16774:	af00      	add	r7, sp, #0
   16776:	60f8      	str	r0, [r7, #12]
   16778:	60b9      	str	r1, [r7, #8]
   1677a:	607a      	str	r2, [r7, #4]
    // Note: For ducktyping, CPython does not look in the instance members or use
    // __getattr__ or __getattribute__.  It only looks in the class dictionary.
    mp_obj_instance_t *lhs = MP_OBJ_TO_PTR(lhs_in);
   1677c:	68bb      	ldr	r3, [r7, #8]
   1677e:	63bb      	str	r3, [r7, #56]	; 0x38
retry:;
    qstr op_name = mp_binary_op_method_name[op];
   16780:	4a24      	ldr	r2, [pc, #144]	; (16814 <instance_binary_op+0xa4>)
   16782:	68fb      	ldr	r3, [r7, #12]
   16784:	4413      	add	r3, r2
   16786:	781b      	ldrb	r3, [r3, #0]
   16788:	637b      	str	r3, [r7, #52]	; 0x34
    /* Still try to lookup native slot
    if (op_name == 0) {
        return MP_OBJ_NULL;
    }
    */
    mp_obj_t dest[3] = {MP_OBJ_NULL};
   1678a:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1678e:	2200      	movs	r2, #0
   16790:	601a      	str	r2, [r3, #0]
   16792:	605a      	str	r2, [r3, #4]
   16794:	609a      	str	r2, [r3, #8]
    struct class_lookup_data lookup = {
   16796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16798:	617b      	str	r3, [r7, #20]
   1679a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1679c:	61bb      	str	r3, [r7, #24]
   1679e:	2318      	movs	r3, #24
   167a0:	61fb      	str	r3, [r7, #28]
   167a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
   167a6:	623b      	str	r3, [r7, #32]
   167a8:	2300      	movs	r3, #0
   167aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .attr = op_name,
        .meth_offset = offsetof(mp_obj_type_t, binary_op),
        .dest = dest,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, lhs->base.type);
   167ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   167b0:	681a      	ldr	r2, [r3, #0]
   167b2:	f107 0314 	add.w	r3, r7, #20
   167b6:	4611      	mov	r1, r2
   167b8:	4618      	mov	r0, r3
   167ba:	f7ff fcd1 	bl	16160 <mp_obj_class_lookup>

    mp_obj_t res;
    if (dest[0] == MP_OBJ_SENTINEL) {
   167be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   167c0:	2b08      	cmp	r3, #8
   167c2:	d108      	bne.n	167d6 <instance_binary_op+0x66>
        res = mp_binary_op(op, lhs->subobj[0], rhs_in);
   167c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   167c6:	691b      	ldr	r3, [r3, #16]
   167c8:	687a      	ldr	r2, [r7, #4]
   167ca:	4619      	mov	r1, r3
   167cc:	68f8      	ldr	r0, [r7, #12]
   167ce:	f7f5 f8af 	bl	b930 <mp_binary_op>
   167d2:	63f8      	str	r0, [r7, #60]	; 0x3c
   167d4:	e019      	b.n	1680a <instance_binary_op+0x9a>
    } else if (dest[0] != MP_OBJ_NULL) {
   167d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   167d8:	2b00      	cmp	r3, #0
   167da:	d00a      	beq.n	167f2 <instance_binary_op+0x82>
        dest[2] = rhs_in;
   167dc:	687b      	ldr	r3, [r7, #4]
   167de:	633b      	str	r3, [r7, #48]	; 0x30
        res = mp_call_method_n_kw(1, 0, dest);
   167e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
   167e4:	461a      	mov	r2, r3
   167e6:	2100      	movs	r1, #0
   167e8:	2001      	movs	r0, #1
   167ea:	f7f5 fb57 	bl	be9c <mp_call_method_n_kw>
   167ee:	63f8      	str	r0, [r7, #60]	; 0x3c
   167f0:	e00b      	b.n	1680a <instance_binary_op+0x9a>
    } else {
        // If this was an inplace method, fallback to normal method
        // https://docs.python.org/3/reference/datamodel.html#object.__iadd__ :
        // "If a specific method is not defined, the augmented assignment
        // falls back to the normal methods."
        if (op >= MP_BINARY_OP_INPLACE_OR && op <= MP_BINARY_OP_INPLACE_POWER) {
   167f2:	68fb      	ldr	r3, [r7, #12]
   167f4:	2b08      	cmp	r3, #8
   167f6:	d906      	bls.n	16806 <instance_binary_op+0x96>
   167f8:	68fb      	ldr	r3, [r7, #12]
   167fa:	2b14      	cmp	r3, #20
   167fc:	d803      	bhi.n	16806 <instance_binary_op+0x96>
            op -= MP_BINARY_OP_INPLACE_OR - MP_BINARY_OP_OR;
   167fe:	68fb      	ldr	r3, [r7, #12]
   16800:	330c      	adds	r3, #12
   16802:	60fb      	str	r3, [r7, #12]
            goto retry;
   16804:	e7bc      	b.n	16780 <instance_binary_op+0x10>
        }
        return MP_OBJ_NULL; // op not supported
   16806:	2300      	movs	r3, #0
   16808:	e000      	b.n	1680c <instance_binary_op+0x9c>
    if (res == mp_const_notimplemented) {
        return MP_OBJ_NULL; // op not supported
    }
    #endif

    return res;
   1680a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   1680c:	4618      	mov	r0, r3
   1680e:	3740      	adds	r7, #64	; 0x40
   16810:	46bd      	mov	sp, r7
   16812:	bd80      	pop	{r7, pc}
   16814:	00022058 	.word	0x00022058

00016818 <mp_obj_instance_load_attr>:

STATIC void mp_obj_instance_load_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   16818:	b580      	push	{r7, lr}
   1681a:	b090      	sub	sp, #64	; 0x40
   1681c:	af00      	add	r7, sp, #0
   1681e:	60f8      	str	r0, [r7, #12]
   16820:	60b9      	str	r1, [r7, #8]
   16822:	607a      	str	r2, [r7, #4]
    // logic: look in instance members then class locals
    assert(mp_obj_is_instance_type(mp_obj_get_type(self_in)));
   16824:	68f8      	ldr	r0, [r7, #12]
   16826:	f7f6 fff5 	bl	d814 <mp_obj_get_type>
   1682a:	4603      	mov	r3, r0
   1682c:	68db      	ldr	r3, [r3, #12]
   1682e:	4a2c      	ldr	r2, [pc, #176]	; (168e0 <mp_obj_instance_load_attr+0xc8>)
   16830:	4293      	cmp	r3, r2
   16832:	d006      	beq.n	16842 <mp_obj_instance_load_attr+0x2a>
   16834:	4b2b      	ldr	r3, [pc, #172]	; (168e4 <mp_obj_instance_load_attr+0xcc>)
   16836:	4a2c      	ldr	r2, [pc, #176]	; (168e8 <mp_obj_instance_load_attr+0xd0>)
   16838:	f240 212f 	movw	r1, #559	; 0x22f
   1683c:	482b      	ldr	r0, [pc, #172]	; (168ec <mp_obj_instance_load_attr+0xd4>)
   1683e:	f004 fd95 	bl	1b36c <__assert_func>
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16842:	68fb      	ldr	r3, [r7, #12]
   16844:	63fb      	str	r3, [r7, #60]	; 0x3c

    mp_map_elem_t *elem = mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP);
   16846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16848:	1d18      	adds	r0, r3, #4
   1684a:	68bb      	ldr	r3, [r7, #8]
   1684c:	009b      	lsls	r3, r3, #2
   1684e:	f043 0302 	orr.w	r3, r3, #2
   16852:	2200      	movs	r2, #0
   16854:	4619      	mov	r1, r3
   16856:	f7f6 fe33 	bl	d4c0 <mp_map_lookup>
   1685a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (elem != NULL) {
   1685c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1685e:	2b00      	cmp	r3, #0
   16860:	d004      	beq.n	1686c <mp_obj_instance_load_attr+0x54>
        // object member, always treated as a value
        dest[0] = elem->value;
   16862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16864:	685a      	ldr	r2, [r3, #4]
   16866:	687b      	ldr	r3, [r7, #4]
   16868:	601a      	str	r2, [r3, #0]
        return;
   1686a:	e036      	b.n	168da <mp_obj_instance_load_attr+0xc2>
        }
        dest[0] = attr_dict;
        return;
    }
#endif
    struct class_lookup_data lookup = {
   1686c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1686e:	623b      	str	r3, [r7, #32]
   16870:	68bb      	ldr	r3, [r7, #8]
   16872:	627b      	str	r3, [r7, #36]	; 0x24
   16874:	2300      	movs	r3, #0
   16876:	62bb      	str	r3, [r7, #40]	; 0x28
   16878:	687b      	ldr	r3, [r7, #4]
   1687a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1687c:	2300      	movs	r3, #0
   1687e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        .attr = attr,
        .meth_offset = 0,
        .dest = dest,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16884:	681a      	ldr	r2, [r3, #0]
   16886:	f107 0320 	add.w	r3, r7, #32
   1688a:	4611      	mov	r1, r2
   1688c:	4618      	mov	r0, r3
   1688e:	f7ff fc67 	bl	16160 <mp_obj_class_lookup>
    mp_obj_t member = dest[0];
   16892:	687b      	ldr	r3, [r7, #4]
   16894:	681b      	ldr	r3, [r3, #0]
   16896:	637b      	str	r3, [r7, #52]	; 0x34
    if (member != MP_OBJ_NULL) {
   16898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1689a:	2b00      	cmp	r3, #0
   1689c:	d11c      	bne.n	168d8 <mp_obj_instance_load_attr+0xc0>
        #endif
        return;
    }

    // try __getattr__
    if (attr != MP_QSTR___getattr__) {
   1689e:	68bb      	ldr	r3, [r7, #8]
   168a0:	2b0d      	cmp	r3, #13
   168a2:	d01a      	beq.n	168da <mp_obj_instance_load_attr+0xc2>
            return;
        }
        #endif

        mp_obj_t dest2[3];
        mp_load_method_maybe(self_in, MP_QSTR___getattr__, dest2);
   168a4:	f107 0314 	add.w	r3, r7, #20
   168a8:	461a      	mov	r2, r3
   168aa:	210d      	movs	r1, #13
   168ac:	68f8      	ldr	r0, [r7, #12]
   168ae:	f7f5 ff6d 	bl	c78c <mp_load_method_maybe>
        if (dest2[0] != MP_OBJ_NULL) {
   168b2:	697b      	ldr	r3, [r7, #20]
   168b4:	2b00      	cmp	r3, #0
   168b6:	d010      	beq.n	168da <mp_obj_instance_load_attr+0xc2>
            // __getattr__ exists, call it and return its result
            // XXX if this fails to load the requested attr, should we catch the attribute error and return silently?
            dest2[2] = MP_OBJ_NEW_QSTR(attr);
   168b8:	68bb      	ldr	r3, [r7, #8]
   168ba:	009b      	lsls	r3, r3, #2
   168bc:	f043 0302 	orr.w	r3, r3, #2
   168c0:	61fb      	str	r3, [r7, #28]
            dest[0] = mp_call_method_n_kw(1, 0, dest2);
   168c2:	f107 0314 	add.w	r3, r7, #20
   168c6:	461a      	mov	r2, r3
   168c8:	2100      	movs	r1, #0
   168ca:	2001      	movs	r0, #1
   168cc:	f7f5 fae6 	bl	be9c <mp_call_method_n_kw>
   168d0:	4602      	mov	r2, r0
   168d2:	687b      	ldr	r3, [r7, #4]
   168d4:	601a      	str	r2, [r3, #0]
   168d6:	e000      	b.n	168da <mp_obj_instance_load_attr+0xc2>
        return;
   168d8:	bf00      	nop
            return;
        }
    }
}
   168da:	3740      	adds	r7, #64	; 0x40
   168dc:	46bd      	mov	sp, r7
   168de:	bd80      	pop	{r7, pc}
   168e0:	000164d1 	.word	0x000164d1
   168e4:	0002207c 	.word	0x0002207c
   168e8:	00022444 	.word	0x00022444
   168ec:	00021f50 	.word	0x00021f50

000168f0 <mp_obj_instance_store_attr>:

STATIC bool mp_obj_instance_store_attr(mp_obj_t self_in, qstr attr, mp_obj_t value) {
   168f0:	b580      	push	{r7, lr}
   168f2:	b086      	sub	sp, #24
   168f4:	af00      	add	r7, sp, #0
   168f6:	60f8      	str	r0, [r7, #12]
   168f8:	60b9      	str	r1, [r7, #8]
   168fa:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   168fc:	68fb      	ldr	r3, [r7, #12]
   168fe:	617b      	str	r3, [r7, #20]
        }
        #endif
    }
    #endif

    if (value == MP_OBJ_NULL) {
   16900:	687b      	ldr	r3, [r7, #4]
   16902:	2b00      	cmp	r3, #0
   16904:	d111      	bne.n	1692a <mp_obj_instance_store_attr+0x3a>
            mp_call_method_n_kw(1, 0, attr_delattr_method);
            return true;
        }
        #endif

        mp_map_elem_t *elem = mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_REMOVE_IF_FOUND);
   16906:	697b      	ldr	r3, [r7, #20]
   16908:	1d18      	adds	r0, r3, #4
   1690a:	68bb      	ldr	r3, [r7, #8]
   1690c:	009b      	lsls	r3, r3, #2
   1690e:	f043 0302 	orr.w	r3, r3, #2
   16912:	2202      	movs	r2, #2
   16914:	4619      	mov	r1, r3
   16916:	f7f6 fdd3 	bl	d4c0 <mp_map_lookup>
   1691a:	6138      	str	r0, [r7, #16]
        return elem != NULL;
   1691c:	693b      	ldr	r3, [r7, #16]
   1691e:	2b00      	cmp	r3, #0
   16920:	bf14      	ite	ne
   16922:	2301      	movne	r3, #1
   16924:	2300      	moveq	r3, #0
   16926:	b2db      	uxtb	r3, r3
   16928:	e00d      	b.n	16946 <mp_obj_instance_store_attr+0x56>
            mp_call_method_n_kw(2, 0, attr_setattr_method);
            return true;
        }
        #endif

        mp_map_lookup(&self->members, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND)->value = value;
   1692a:	697b      	ldr	r3, [r7, #20]
   1692c:	1d18      	adds	r0, r3, #4
   1692e:	68bb      	ldr	r3, [r7, #8]
   16930:	009b      	lsls	r3, r3, #2
   16932:	f043 0302 	orr.w	r3, r3, #2
   16936:	2201      	movs	r2, #1
   16938:	4619      	mov	r1, r3
   1693a:	f7f6 fdc1 	bl	d4c0 <mp_map_lookup>
   1693e:	4602      	mov	r2, r0
   16940:	687b      	ldr	r3, [r7, #4]
   16942:	6053      	str	r3, [r2, #4]
        return true;
   16944:	2301      	movs	r3, #1
    }
}
   16946:	4618      	mov	r0, r3
   16948:	3718      	adds	r7, #24
   1694a:	46bd      	mov	sp, r7
   1694c:	bd80      	pop	{r7, pc}
   1694e:	bf00      	nop

00016950 <mp_obj_instance_attr>:

void mp_obj_instance_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   16950:	b580      	push	{r7, lr}
   16952:	b084      	sub	sp, #16
   16954:	af00      	add	r7, sp, #0
   16956:	60f8      	str	r0, [r7, #12]
   16958:	60b9      	str	r1, [r7, #8]
   1695a:	607a      	str	r2, [r7, #4]
    if (dest[0] == MP_OBJ_NULL) {
   1695c:	687b      	ldr	r3, [r7, #4]
   1695e:	681b      	ldr	r3, [r3, #0]
   16960:	2b00      	cmp	r3, #0
   16962:	d105      	bne.n	16970 <mp_obj_instance_attr+0x20>
        mp_obj_instance_load_attr(self_in, attr, dest);
   16964:	687a      	ldr	r2, [r7, #4]
   16966:	68b9      	ldr	r1, [r7, #8]
   16968:	68f8      	ldr	r0, [r7, #12]
   1696a:	f7ff ff55 	bl	16818 <mp_obj_instance_load_attr>
    } else {
        if (mp_obj_instance_store_attr(self_in, attr, dest[1])) {
            dest[0] = MP_OBJ_NULL; // indicate success
        }
    }
}
   1696e:	e00d      	b.n	1698c <mp_obj_instance_attr+0x3c>
        if (mp_obj_instance_store_attr(self_in, attr, dest[1])) {
   16970:	687b      	ldr	r3, [r7, #4]
   16972:	3304      	adds	r3, #4
   16974:	681b      	ldr	r3, [r3, #0]
   16976:	461a      	mov	r2, r3
   16978:	68b9      	ldr	r1, [r7, #8]
   1697a:	68f8      	ldr	r0, [r7, #12]
   1697c:	f7ff ffb8 	bl	168f0 <mp_obj_instance_store_attr>
   16980:	4603      	mov	r3, r0
   16982:	2b00      	cmp	r3, #0
   16984:	d002      	beq.n	1698c <mp_obj_instance_attr+0x3c>
            dest[0] = MP_OBJ_NULL; // indicate success
   16986:	687b      	ldr	r3, [r7, #4]
   16988:	2200      	movs	r2, #0
   1698a:	601a      	str	r2, [r3, #0]
}
   1698c:	bf00      	nop
   1698e:	3710      	adds	r7, #16
   16990:	46bd      	mov	sp, r7
   16992:	bd80      	pop	{r7, pc}

00016994 <instance_subscr>:

STATIC mp_obj_t instance_subscr(mp_obj_t self_in, mp_obj_t index, mp_obj_t value) {
   16994:	b580      	push	{r7, lr}
   16996:	b092      	sub	sp, #72	; 0x48
   16998:	af00      	add	r7, sp, #0
   1699a:	60f8      	str	r0, [r7, #12]
   1699c:	60b9      	str	r1, [r7, #8]
   1699e:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   169a0:	68fb      	ldr	r3, [r7, #12]
   169a2:	643b      	str	r3, [r7, #64]	; 0x40
    mp_obj_t member[2] = {MP_OBJ_NULL};
   169a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
   169a8:	2200      	movs	r2, #0
   169aa:	601a      	str	r2, [r3, #0]
   169ac:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   169ae:	f107 0320 	add.w	r3, r7, #32
   169b2:	2200      	movs	r2, #0
   169b4:	601a      	str	r2, [r3, #0]
   169b6:	605a      	str	r2, [r3, #4]
   169b8:	609a      	str	r2, [r3, #8]
   169ba:	60da      	str	r2, [r3, #12]
   169bc:	611a      	str	r2, [r3, #16]
   169be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   169c0:	623b      	str	r3, [r7, #32]
   169c2:	2320      	movs	r3, #32
   169c4:	62bb      	str	r3, [r7, #40]	; 0x28
   169c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
   169ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        .meth_offset = offsetof(mp_obj_type_t, subscr),
        .dest = member,
        .is_type = false,
    };
    size_t meth_args;
    if (value == MP_OBJ_NULL) {
   169cc:	687b      	ldr	r3, [r7, #4]
   169ce:	2b00      	cmp	r3, #0
   169d0:	d10c      	bne.n	169ec <instance_subscr+0x58>
        // delete item
        lookup.attr = MP_QSTR___delitem__;
   169d2:	2308      	movs	r3, #8
   169d4:	627b      	str	r3, [r7, #36]	; 0x24
        mp_obj_class_lookup(&lookup, self->base.type);
   169d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   169d8:	681a      	ldr	r2, [r3, #0]
   169da:	f107 0320 	add.w	r3, r7, #32
   169de:	4611      	mov	r1, r2
   169e0:	4618      	mov	r0, r3
   169e2:	f7ff fbbd 	bl	16160 <mp_obj_class_lookup>
        meth_args = 2;
   169e6:	2302      	movs	r3, #2
   169e8:	647b      	str	r3, [r7, #68]	; 0x44
   169ea:	e01b      	b.n	16a24 <instance_subscr+0x90>
    } else if (value == MP_OBJ_SENTINEL) {
   169ec:	687b      	ldr	r3, [r7, #4]
   169ee:	2b08      	cmp	r3, #8
   169f0:	d10c      	bne.n	16a0c <instance_subscr+0x78>
        // load item
        lookup.attr = MP_QSTR___getitem__;
   169f2:	230e      	movs	r3, #14
   169f4:	627b      	str	r3, [r7, #36]	; 0x24
        mp_obj_class_lookup(&lookup, self->base.type);
   169f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   169f8:	681a      	ldr	r2, [r3, #0]
   169fa:	f107 0320 	add.w	r3, r7, #32
   169fe:	4611      	mov	r1, r2
   16a00:	4618      	mov	r0, r3
   16a02:	f7ff fbad 	bl	16160 <mp_obj_class_lookup>
        meth_args = 2;
   16a06:	2302      	movs	r3, #2
   16a08:	647b      	str	r3, [r7, #68]	; 0x44
   16a0a:	e00b      	b.n	16a24 <instance_subscr+0x90>
    } else {
        // store item
        lookup.attr = MP_QSTR___setitem__;
   16a0c:	2322      	movs	r3, #34	; 0x22
   16a0e:	627b      	str	r3, [r7, #36]	; 0x24
        mp_obj_class_lookup(&lookup, self->base.type);
   16a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16a12:	681a      	ldr	r2, [r3, #0]
   16a14:	f107 0320 	add.w	r3, r7, #32
   16a18:	4611      	mov	r1, r2
   16a1a:	4618      	mov	r0, r3
   16a1c:	f7ff fba0 	bl	16160 <mp_obj_class_lookup>
        meth_args = 3;
   16a20:	2303      	movs	r3, #3
   16a22:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if (member[0] == MP_OBJ_SENTINEL) {
   16a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16a26:	2b08      	cmp	r3, #8
   16a28:	d108      	bne.n	16a3c <instance_subscr+0xa8>
        return mp_obj_subscr(self->subobj[0], index, value);
   16a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16a2c:	691b      	ldr	r3, [r3, #16]
   16a2e:	687a      	ldr	r2, [r7, #4]
   16a30:	68b9      	ldr	r1, [r7, #8]
   16a32:	4618      	mov	r0, r3
   16a34:	f7f7 fa92 	bl	df5c <mp_obj_subscr>
   16a38:	4603      	mov	r3, r0
   16a3a:	e018      	b.n	16a6e <instance_subscr+0xda>
    } else if (member[0] != MP_OBJ_NULL) {
   16a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16a3e:	2b00      	cmp	r3, #0
   16a40:	d014      	beq.n	16a6c <instance_subscr+0xd8>
        mp_obj_t args[3] = {self_in, index, value};
   16a42:	68fb      	ldr	r3, [r7, #12]
   16a44:	617b      	str	r3, [r7, #20]
   16a46:	68bb      	ldr	r3, [r7, #8]
   16a48:	61bb      	str	r3, [r7, #24]
   16a4a:	687b      	ldr	r3, [r7, #4]
   16a4c:	61fb      	str	r3, [r7, #28]
        // TODO probably need to call mp_convert_member_lookup, and use mp_call_method_n_kw
        mp_obj_t ret = mp_call_function_n_kw(member[0], meth_args, 0, args);
   16a4e:	6b78      	ldr	r0, [r7, #52]	; 0x34
   16a50:	f107 0314 	add.w	r3, r7, #20
   16a54:	2200      	movs	r2, #0
   16a56:	6c79      	ldr	r1, [r7, #68]	; 0x44
   16a58:	f7f5 f9fe 	bl	be58 <mp_call_function_n_kw>
   16a5c:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (value == MP_OBJ_SENTINEL) {
   16a5e:	687b      	ldr	r3, [r7, #4]
   16a60:	2b08      	cmp	r3, #8
   16a62:	d101      	bne.n	16a68 <instance_subscr+0xd4>
            return ret;
   16a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16a66:	e002      	b.n	16a6e <instance_subscr+0xda>
        } else {
            return mp_const_none;
   16a68:	4b03      	ldr	r3, [pc, #12]	; (16a78 <instance_subscr+0xe4>)
   16a6a:	e000      	b.n	16a6e <instance_subscr+0xda>
        }
    } else {
        return MP_OBJ_NULL; // op not supported
   16a6c:	2300      	movs	r3, #0
    }
}
   16a6e:	4618      	mov	r0, r3
   16a70:	3748      	adds	r7, #72	; 0x48
   16a72:	46bd      	mov	sp, r7
   16a74:	bd80      	pop	{r7, pc}
   16a76:	bf00      	nop
   16a78:	00021534 	.word	0x00021534

00016a7c <mp_obj_instance_get_call>:

STATIC mp_obj_t mp_obj_instance_get_call(mp_obj_t self_in, mp_obj_t *member) {
   16a7c:	b580      	push	{r7, lr}
   16a7e:	b088      	sub	sp, #32
   16a80:	af00      	add	r7, sp, #0
   16a82:	6078      	str	r0, [r7, #4]
   16a84:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16a86:	687b      	ldr	r3, [r7, #4]
   16a88:	61fb      	str	r3, [r7, #28]
    struct class_lookup_data lookup = {
   16a8a:	69fb      	ldr	r3, [r7, #28]
   16a8c:	60bb      	str	r3, [r7, #8]
   16a8e:	2305      	movs	r3, #5
   16a90:	60fb      	str	r3, [r7, #12]
   16a92:	2310      	movs	r3, #16
   16a94:	613b      	str	r3, [r7, #16]
   16a96:	683b      	ldr	r3, [r7, #0]
   16a98:	617b      	str	r3, [r7, #20]
   16a9a:	2300      	movs	r3, #0
   16a9c:	763b      	strb	r3, [r7, #24]
        .attr = MP_QSTR___call__,
        .meth_offset = offsetof(mp_obj_type_t, call),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16a9e:	69fb      	ldr	r3, [r7, #28]
   16aa0:	681a      	ldr	r2, [r3, #0]
   16aa2:	f107 0308 	add.w	r3, r7, #8
   16aa6:	4611      	mov	r1, r2
   16aa8:	4618      	mov	r0, r3
   16aaa:	f7ff fb59 	bl	16160 <mp_obj_class_lookup>
    return member[0];
   16aae:	683b      	ldr	r3, [r7, #0]
   16ab0:	681b      	ldr	r3, [r3, #0]
}
   16ab2:	4618      	mov	r0, r3
   16ab4:	3720      	adds	r7, #32
   16ab6:	46bd      	mov	sp, r7
   16ab8:	bd80      	pop	{r7, pc}
   16aba:	bf00      	nop

00016abc <mp_obj_instance_is_callable>:

bool mp_obj_instance_is_callable(mp_obj_t self_in) {
   16abc:	b580      	push	{r7, lr}
   16abe:	b084      	sub	sp, #16
   16ac0:	af00      	add	r7, sp, #0
   16ac2:	6078      	str	r0, [r7, #4]
    mp_obj_t member[2] = {MP_OBJ_NULL, MP_OBJ_NULL};
   16ac4:	2300      	movs	r3, #0
   16ac6:	60bb      	str	r3, [r7, #8]
   16ac8:	2300      	movs	r3, #0
   16aca:	60fb      	str	r3, [r7, #12]
    return mp_obj_instance_get_call(self_in, member) != MP_OBJ_NULL;
   16acc:	f107 0308 	add.w	r3, r7, #8
   16ad0:	4619      	mov	r1, r3
   16ad2:	6878      	ldr	r0, [r7, #4]
   16ad4:	f7ff ffd2 	bl	16a7c <mp_obj_instance_get_call>
   16ad8:	4603      	mov	r3, r0
   16ada:	2b00      	cmp	r3, #0
   16adc:	bf14      	ite	ne
   16ade:	2301      	movne	r3, #1
   16ae0:	2300      	moveq	r3, #0
   16ae2:	b2db      	uxtb	r3, r3
}
   16ae4:	4618      	mov	r0, r3
   16ae6:	3710      	adds	r7, #16
   16ae8:	46bd      	mov	sp, r7
   16aea:	bd80      	pop	{r7, pc}

00016aec <mp_obj_instance_call>:

mp_obj_t mp_obj_instance_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16aec:	b580      	push	{r7, lr}
   16aee:	b08a      	sub	sp, #40	; 0x28
   16af0:	af02      	add	r7, sp, #8
   16af2:	60f8      	str	r0, [r7, #12]
   16af4:	60b9      	str	r1, [r7, #8]
   16af6:	607a      	str	r2, [r7, #4]
   16af8:	603b      	str	r3, [r7, #0]
    mp_obj_t member[2] = {MP_OBJ_NULL, MP_OBJ_NULL};
   16afa:	2300      	movs	r3, #0
   16afc:	613b      	str	r3, [r7, #16]
   16afe:	2300      	movs	r3, #0
   16b00:	617b      	str	r3, [r7, #20]
    mp_obj_t call = mp_obj_instance_get_call(self_in, member);
   16b02:	f107 0310 	add.w	r3, r7, #16
   16b06:	4619      	mov	r1, r3
   16b08:	68f8      	ldr	r0, [r7, #12]
   16b0a:	f7ff ffb7 	bl	16a7c <mp_obj_instance_get_call>
   16b0e:	61f8      	str	r0, [r7, #28]
    if (call == MP_OBJ_NULL) {
   16b10:	69fb      	ldr	r3, [r7, #28]
   16b12:	2b00      	cmp	r3, #0
   16b14:	d102      	bne.n	16b1c <mp_obj_instance_call+0x30>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("object not callable");
   16b16:	480f      	ldr	r0, [pc, #60]	; (16b54 <mp_obj_instance_call+0x68>)
   16b18:	f7f6 fa62 	bl	cfe0 <mp_raise_TypeError>
        } else {
            nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                "'%s' object is not callable", mp_obj_get_type_str(self_in)));
        }
    }
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16b1c:	68fb      	ldr	r3, [r7, #12]
   16b1e:	61bb      	str	r3, [r7, #24]
    if (call == MP_OBJ_SENTINEL) {
   16b20:	69fb      	ldr	r3, [r7, #28]
   16b22:	2b08      	cmp	r3, #8
   16b24:	d108      	bne.n	16b38 <mp_obj_instance_call+0x4c>
        return mp_call_function_n_kw(self->subobj[0], n_args, n_kw, args);
   16b26:	69bb      	ldr	r3, [r7, #24]
   16b28:	6918      	ldr	r0, [r3, #16]
   16b2a:	683b      	ldr	r3, [r7, #0]
   16b2c:	687a      	ldr	r2, [r7, #4]
   16b2e:	68b9      	ldr	r1, [r7, #8]
   16b30:	f7f5 f992 	bl	be58 <mp_call_function_n_kw>
   16b34:	4603      	mov	r3, r0
   16b36:	e008      	b.n	16b4a <mp_obj_instance_call+0x5e>
    }

    return mp_call_method_self_n_kw(member[0], member[1], n_args, n_kw, args);
   16b38:	6938      	ldr	r0, [r7, #16]
   16b3a:	6979      	ldr	r1, [r7, #20]
   16b3c:	683b      	ldr	r3, [r7, #0]
   16b3e:	9300      	str	r3, [sp, #0]
   16b40:	687b      	ldr	r3, [r7, #4]
   16b42:	68ba      	ldr	r2, [r7, #8]
   16b44:	f7f7 fb2e 	bl	e1a4 <mp_call_method_self_n_kw>
   16b48:	4603      	mov	r3, r0
}
   16b4a:	4618      	mov	r0, r3
   16b4c:	3720      	adds	r7, #32
   16b4e:	46bd      	mov	sp, r7
   16b50:	bd80      	pop	{r7, pc}
   16b52:	bf00      	nop
   16b54:	000220b0 	.word	0x000220b0

00016b58 <instance_getiter>:

STATIC mp_obj_t instance_getiter(mp_obj_t self_in, mp_obj_iter_buf_t *iter_buf) {
   16b58:	b580      	push	{r7, lr}
   16b5a:	b08c      	sub	sp, #48	; 0x30
   16b5c:	af00      	add	r7, sp, #0
   16b5e:	6078      	str	r0, [r7, #4]
   16b60:	6039      	str	r1, [r7, #0]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16b62:	687b      	ldr	r3, [r7, #4]
   16b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    mp_obj_t member[2] = {MP_OBJ_NULL};
   16b66:	f107 0320 	add.w	r3, r7, #32
   16b6a:	2200      	movs	r2, #0
   16b6c:	601a      	str	r2, [r3, #0]
   16b6e:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16b72:	60fb      	str	r3, [r7, #12]
   16b74:	2315      	movs	r3, #21
   16b76:	613b      	str	r3, [r7, #16]
   16b78:	2324      	movs	r3, #36	; 0x24
   16b7a:	617b      	str	r3, [r7, #20]
   16b7c:	f107 0320 	add.w	r3, r7, #32
   16b80:	61bb      	str	r3, [r7, #24]
   16b82:	2300      	movs	r3, #0
   16b84:	773b      	strb	r3, [r7, #28]
        .attr = MP_QSTR___iter__,
        .meth_offset = offsetof(mp_obj_type_t, getiter),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16b88:	681a      	ldr	r2, [r3, #0]
   16b8a:	f107 030c 	add.w	r3, r7, #12
   16b8e:	4611      	mov	r1, r2
   16b90:	4618      	mov	r0, r3
   16b92:	f7ff fae5 	bl	16160 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_NULL) {
   16b96:	6a3b      	ldr	r3, [r7, #32]
   16b98:	2b00      	cmp	r3, #0
   16b9a:	d101      	bne.n	16ba0 <instance_getiter+0x48>
        return MP_OBJ_NULL;
   16b9c:	2300      	movs	r3, #0
   16b9e:	e019      	b.n	16bd4 <instance_getiter+0x7c>
    } else if (member[0] == MP_OBJ_SENTINEL) {
   16ba0:	6a3b      	ldr	r3, [r7, #32]
   16ba2:	2b08      	cmp	r3, #8
   16ba4:	d10e      	bne.n	16bc4 <instance_getiter+0x6c>
        mp_obj_type_t *type = mp_obj_get_type(self->subobj[0]);
   16ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16ba8:	691b      	ldr	r3, [r3, #16]
   16baa:	4618      	mov	r0, r3
   16bac:	f7f6 fe32 	bl	d814 <mp_obj_get_type>
   16bb0:	62b8      	str	r0, [r7, #40]	; 0x28
        return type->getiter(self->subobj[0], iter_buf);
   16bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16bb8:	6912      	ldr	r2, [r2, #16]
   16bba:	6839      	ldr	r1, [r7, #0]
   16bbc:	4610      	mov	r0, r2
   16bbe:	4798      	blx	r3
   16bc0:	4603      	mov	r3, r0
   16bc2:	e007      	b.n	16bd4 <instance_getiter+0x7c>
    } else {
        return mp_call_method_n_kw(0, 0, member);
   16bc4:	f107 0320 	add.w	r3, r7, #32
   16bc8:	461a      	mov	r2, r3
   16bca:	2100      	movs	r1, #0
   16bcc:	2000      	movs	r0, #0
   16bce:	f7f5 f965 	bl	be9c <mp_call_method_n_kw>
   16bd2:	4603      	mov	r3, r0
    }
}
   16bd4:	4618      	mov	r0, r3
   16bd6:	3730      	adds	r7, #48	; 0x30
   16bd8:	46bd      	mov	sp, r7
   16bda:	bd80      	pop	{r7, pc}

00016bdc <instance_get_buffer>:

STATIC mp_int_t instance_get_buffer(mp_obj_t self_in, mp_buffer_info_t *bufinfo, mp_uint_t flags) {
   16bdc:	b580      	push	{r7, lr}
   16bde:	b08e      	sub	sp, #56	; 0x38
   16be0:	af00      	add	r7, sp, #0
   16be2:	60f8      	str	r0, [r7, #12]
   16be4:	60b9      	str	r1, [r7, #8]
   16be6:	607a      	str	r2, [r7, #4]
    mp_obj_instance_t *self = MP_OBJ_TO_PTR(self_in);
   16be8:	68fb      	ldr	r3, [r7, #12]
   16bea:	637b      	str	r3, [r7, #52]	; 0x34
    mp_obj_t member[2] = {MP_OBJ_NULL};
   16bec:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16bf0:	2200      	movs	r2, #0
   16bf2:	601a      	str	r2, [r3, #0]
   16bf4:	605a      	str	r2, [r3, #4]
    struct class_lookup_data lookup = {
   16bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16bf8:	617b      	str	r3, [r7, #20]
   16bfa:	2301      	movs	r3, #1
   16bfc:	61bb      	str	r3, [r7, #24]
   16bfe:	232c      	movs	r3, #44	; 0x2c
   16c00:	61fb      	str	r3, [r7, #28]
   16c02:	f107 0328 	add.w	r3, r7, #40	; 0x28
   16c06:	623b      	str	r3, [r7, #32]
   16c08:	2300      	movs	r3, #0
   16c0a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .attr = MP_QSTR_, // don't actually look for a method
        .meth_offset = offsetof(mp_obj_type_t, buffer_p.get_buffer),
        .dest = member,
        .is_type = false,
    };
    mp_obj_class_lookup(&lookup, self->base.type);
   16c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16c10:	681a      	ldr	r2, [r3, #0]
   16c12:	f107 0314 	add.w	r3, r7, #20
   16c16:	4611      	mov	r1, r2
   16c18:	4618      	mov	r0, r3
   16c1a:	f7ff faa1 	bl	16160 <mp_obj_class_lookup>
    if (member[0] == MP_OBJ_SENTINEL) {
   16c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16c20:	2b08      	cmp	r3, #8
   16c22:	d10e      	bne.n	16c42 <instance_get_buffer+0x66>
        mp_obj_type_t *type = mp_obj_get_type(self->subobj[0]);
   16c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16c26:	691b      	ldr	r3, [r3, #16]
   16c28:	4618      	mov	r0, r3
   16c2a:	f7f6 fdf3 	bl	d814 <mp_obj_get_type>
   16c2e:	6338      	str	r0, [r7, #48]	; 0x30
        return type->buffer_p.get_buffer(self->subobj[0], bufinfo, flags);
   16c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16c34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16c36:	6910      	ldr	r0, [r2, #16]
   16c38:	687a      	ldr	r2, [r7, #4]
   16c3a:	68b9      	ldr	r1, [r7, #8]
   16c3c:	4798      	blx	r3
   16c3e:	4603      	mov	r3, r0
   16c40:	e000      	b.n	16c44 <instance_get_buffer+0x68>
    } else {
        return 1; // object does not support buffer protocol
   16c42:	2301      	movs	r3, #1
    }
}
   16c44:	4618      	mov	r0, r3
   16c46:	3738      	adds	r7, #56	; 0x38
   16c48:	46bd      	mov	sp, r7
   16c4a:	bd80      	pop	{r7, pc}

00016c4c <type_print>:
// type object
//  - the struct is mp_obj_type_t and is defined in obj.h so const types can be made
//  - there is a constant mp_obj_type_t (called mp_type_type) for the 'type' object
//  - creating a new class (a new type) creates a new mp_obj_type_t

STATIC void type_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   16c4c:	b580      	push	{r7, lr}
   16c4e:	b086      	sub	sp, #24
   16c50:	af00      	add	r7, sp, #0
   16c52:	60f8      	str	r0, [r7, #12]
   16c54:	60b9      	str	r1, [r7, #8]
   16c56:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
   16c58:	68bb      	ldr	r3, [r7, #8]
   16c5a:	617b      	str	r3, [r7, #20]
    mp_printf(print, "<class '%q'>", self->name);
   16c5c:	697b      	ldr	r3, [r7, #20]
   16c5e:	685b      	ldr	r3, [r3, #4]
   16c60:	461a      	mov	r2, r3
   16c62:	4904      	ldr	r1, [pc, #16]	; (16c74 <type_print+0x28>)
   16c64:	68f8      	ldr	r0, [r7, #12]
   16c66:	f7eb f91d 	bl	1ea4 <mp_printf>
}
   16c6a:	bf00      	nop
   16c6c:	3718      	adds	r7, #24
   16c6e:	46bd      	mov	sp, r7
   16c70:	bd80      	pop	{r7, pc}
   16c72:	bf00      	nop
   16c74:	000220c4 	.word	0x000220c4

00016c78 <type_make_new>:

STATIC mp_obj_t type_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16c78:	b580      	push	{r7, lr}
   16c7a:	b086      	sub	sp, #24
   16c7c:	af02      	add	r7, sp, #8
   16c7e:	60f8      	str	r0, [r7, #12]
   16c80:	60b9      	str	r1, [r7, #8]
   16c82:	607a      	str	r2, [r7, #4]
   16c84:	603b      	str	r3, [r7, #0]
    (void)type_in;

    mp_arg_check_num(n_args, n_kw, 1, 3, false);
   16c86:	2300      	movs	r3, #0
   16c88:	9300      	str	r3, [sp, #0]
   16c8a:	2303      	movs	r3, #3
   16c8c:	2201      	movs	r2, #1
   16c8e:	6879      	ldr	r1, [r7, #4]
   16c90:	68b8      	ldr	r0, [r7, #8]
   16c92:	f7f6 f9cb 	bl	d02c <mp_arg_check_num>

    switch (n_args) {
   16c96:	68bb      	ldr	r3, [r7, #8]
   16c98:	2b01      	cmp	r3, #1
   16c9a:	d002      	beq.n	16ca2 <type_make_new+0x2a>
   16c9c:	2b03      	cmp	r3, #3
   16c9e:	d007      	beq.n	16cb0 <type_make_new+0x38>
   16ca0:	e016      	b.n	16cd0 <type_make_new+0x58>
        case 1:
            return MP_OBJ_FROM_PTR(mp_obj_get_type(args[0]));
   16ca2:	683b      	ldr	r3, [r7, #0]
   16ca4:	681b      	ldr	r3, [r3, #0]
   16ca6:	4618      	mov	r0, r3
   16ca8:	f7f6 fdb4 	bl	d814 <mp_obj_get_type>
   16cac:	4603      	mov	r3, r0
   16cae:	e012      	b.n	16cd6 <type_make_new+0x5e>

        case 3:
            // args[0] = name
            // args[1] = bases tuple
            // args[2] = locals dict
            return mp_obj_new_type(mp_obj_str_get_qstr(args[0]), args[1], args[2]);
   16cb0:	683b      	ldr	r3, [r7, #0]
   16cb2:	681b      	ldr	r3, [r3, #0]
   16cb4:	4618      	mov	r0, r3
   16cb6:	f7fe fc91 	bl	155dc <mp_obj_str_get_qstr>
   16cba:	683b      	ldr	r3, [r7, #0]
   16cbc:	3304      	adds	r3, #4
   16cbe:	6819      	ldr	r1, [r3, #0]
   16cc0:	683b      	ldr	r3, [r7, #0]
   16cc2:	3308      	adds	r3, #8
   16cc4:	681b      	ldr	r3, [r3, #0]
   16cc6:	461a      	mov	r2, r3
   16cc8:	f000 f8b4 	bl	16e34 <mp_obj_new_type>
   16ccc:	4603      	mov	r3, r0
   16cce:	e002      	b.n	16cd6 <type_make_new+0x5e>

        default:
            mp_raise_TypeError("type takes 1 or 3 arguments");
   16cd0:	4803      	ldr	r0, [pc, #12]	; (16ce0 <type_make_new+0x68>)
   16cd2:	f7f6 f985 	bl	cfe0 <mp_raise_TypeError>
    }
}
   16cd6:	4618      	mov	r0, r3
   16cd8:	3710      	adds	r7, #16
   16cda:	46bd      	mov	sp, r7
   16cdc:	bd80      	pop	{r7, pc}
   16cde:	bf00      	nop
   16ce0:	000220d4 	.word	0x000220d4

00016ce4 <type_call>:

STATIC mp_obj_t type_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   16ce4:	b590      	push	{r4, r7, lr}
   16ce6:	b087      	sub	sp, #28
   16ce8:	af00      	add	r7, sp, #0
   16cea:	60f8      	str	r0, [r7, #12]
   16cec:	60b9      	str	r1, [r7, #8]
   16cee:	607a      	str	r2, [r7, #4]
   16cf0:	603b      	str	r3, [r7, #0]
    // instantiate an instance of a class

    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
   16cf2:	68fb      	ldr	r3, [r7, #12]
   16cf4:	617b      	str	r3, [r7, #20]

    if (self->make_new == NULL) {
   16cf6:	697b      	ldr	r3, [r7, #20]
   16cf8:	68db      	ldr	r3, [r3, #12]
   16cfa:	2b00      	cmp	r3, #0
   16cfc:	d102      	bne.n	16d04 <type_call+0x20>
        if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
            mp_raise_TypeError("cannot create instance");
   16cfe:	4808      	ldr	r0, [pc, #32]	; (16d20 <type_call+0x3c>)
   16d00:	f7f6 f96e 	bl	cfe0 <mp_raise_TypeError>
                "cannot create '%q' instances", self->name));
        }
    }

    // make new instance
    mp_obj_t o = self->make_new(self, n_args, n_kw, args);
   16d04:	697b      	ldr	r3, [r7, #20]
   16d06:	68dc      	ldr	r4, [r3, #12]
   16d08:	683b      	ldr	r3, [r7, #0]
   16d0a:	687a      	ldr	r2, [r7, #4]
   16d0c:	68b9      	ldr	r1, [r7, #8]
   16d0e:	6978      	ldr	r0, [r7, #20]
   16d10:	47a0      	blx	r4
   16d12:	6138      	str	r0, [r7, #16]

    // return new instance
    return o;
   16d14:	693b      	ldr	r3, [r7, #16]
}
   16d16:	4618      	mov	r0, r3
   16d18:	371c      	adds	r7, #28
   16d1a:	46bd      	mov	sp, r7
   16d1c:	bd90      	pop	{r4, r7, pc}
   16d1e:	bf00      	nop
   16d20:	000220f0 	.word	0x000220f0

00016d24 <type_attr>:

STATIC void type_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   16d24:	b580      	push	{r7, lr}
   16d26:	b08e      	sub	sp, #56	; 0x38
   16d28:	af00      	add	r7, sp, #0
   16d2a:	60f8      	str	r0, [r7, #12]
   16d2c:	60b9      	str	r1, [r7, #8]
   16d2e:	607a      	str	r2, [r7, #4]
    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_type));
   16d30:	68f8      	ldr	r0, [r7, #12]
   16d32:	f7ff f933 	bl	15f9c <MP_OBJ_IS_OBJ>
   16d36:	4603      	mov	r3, r0
   16d38:	f083 0301 	eor.w	r3, r3, #1
   16d3c:	b2db      	uxtb	r3, r3
   16d3e:	2b00      	cmp	r3, #0
   16d40:	d104      	bne.n	16d4c <type_attr+0x28>
   16d42:	68fb      	ldr	r3, [r7, #12]
   16d44:	681b      	ldr	r3, [r3, #0]
   16d46:	4a35      	ldr	r2, [pc, #212]	; (16e1c <type_attr+0xf8>)
   16d48:	4293      	cmp	r3, r2
   16d4a:	d006      	beq.n	16d5a <type_attr+0x36>
   16d4c:	4b34      	ldr	r3, [pc, #208]	; (16e20 <type_attr+0xfc>)
   16d4e:	4a35      	ldr	r2, [pc, #212]	; (16e24 <type_attr+0x100>)
   16d50:	f240 31b6 	movw	r1, #950	; 0x3b6
   16d54:	4834      	ldr	r0, [pc, #208]	; (16e28 <type_attr+0x104>)
   16d56:	f004 fb09 	bl	1b36c <__assert_func>
    mp_obj_type_t *self = MP_OBJ_TO_PTR(self_in);
   16d5a:	68fb      	ldr	r3, [r7, #12]
   16d5c:	637b      	str	r3, [r7, #52]	; 0x34

    if (dest[0] == MP_OBJ_NULL) {
   16d5e:	687b      	ldr	r3, [r7, #4]
   16d60:	681b      	ldr	r3, [r3, #0]
   16d62:	2b00      	cmp	r3, #0
   16d64:	d111      	bne.n	16d8a <type_attr+0x66>
        if (attr == MP_QSTR___name__) {
            dest[0] = MP_OBJ_NEW_QSTR(self->name);
            return;
        }
        #endif
        struct class_lookup_data lookup = {
   16d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16d68:	617b      	str	r3, [r7, #20]
   16d6a:	68bb      	ldr	r3, [r7, #8]
   16d6c:	61bb      	str	r3, [r7, #24]
   16d6e:	2300      	movs	r3, #0
   16d70:	61fb      	str	r3, [r7, #28]
   16d72:	687b      	ldr	r3, [r7, #4]
   16d74:	623b      	str	r3, [r7, #32]
   16d76:	2301      	movs	r3, #1
   16d78:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            .attr = attr,
            .meth_offset = 0,
            .dest = dest,
            .is_type = true,
        };
        mp_obj_class_lookup(&lookup, self);
   16d7c:	f107 0314 	add.w	r3, r7, #20
   16d80:	6b79      	ldr	r1, [r7, #52]	; 0x34
   16d82:	4618      	mov	r0, r3
   16d84:	f7ff f9ec 	bl	16160 <mp_obj_class_lookup>
   16d88:	e044      	b.n	16e14 <type_attr+0xf0>
    } else {
        // delete/store attribute

        // TODO CPython allows STORE_ATTR to a class, but is this the correct implementation?

        if (self->locals_dict != NULL) {
   16d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16d8e:	2b00      	cmp	r3, #0
   16d90:	d040      	beq.n	16e14 <type_attr+0xf0>
            assert(self->locals_dict->base.type == &mp_type_dict); // MicroPython restriction, for now
   16d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16d96:	681b      	ldr	r3, [r3, #0]
   16d98:	4a24      	ldr	r2, [pc, #144]	; (16e2c <type_attr+0x108>)
   16d9a:	4293      	cmp	r3, r2
   16d9c:	d006      	beq.n	16dac <type_attr+0x88>
   16d9e:	4b24      	ldr	r3, [pc, #144]	; (16e30 <type_attr+0x10c>)
   16da0:	4a20      	ldr	r2, [pc, #128]	; (16e24 <type_attr+0x100>)
   16da2:	f240 31cf 	movw	r1, #975	; 0x3cf
   16da6:	4820      	ldr	r0, [pc, #128]	; (16e28 <type_attr+0x104>)
   16da8:	f004 fae0 	bl	1b36c <__assert_func>
            mp_map_t *locals_map = &self->locals_dict->map;
   16dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16db0:	3304      	adds	r3, #4
   16db2:	633b      	str	r3, [r7, #48]	; 0x30
            if (locals_map->is_fixed) {
   16db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16db6:	781b      	ldrb	r3, [r3, #0]
   16db8:	f003 0302 	and.w	r3, r3, #2
   16dbc:	b2db      	uxtb	r3, r3
   16dbe:	2b00      	cmp	r3, #0
   16dc0:	d127      	bne.n	16e12 <type_attr+0xee>
                // can't apply delete/store to a fixed map
                return;
            }
            if (dest[1] == MP_OBJ_NULL) {
   16dc2:	687b      	ldr	r3, [r7, #4]
   16dc4:	3304      	adds	r3, #4
   16dc6:	681b      	ldr	r3, [r3, #0]
   16dc8:	2b00      	cmp	r3, #0
   16dca:	d110      	bne.n	16dee <type_attr+0xca>
                // delete attribute
                mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_REMOVE_IF_FOUND);
   16dcc:	68bb      	ldr	r3, [r7, #8]
   16dce:	009b      	lsls	r3, r3, #2
   16dd0:	f043 0302 	orr.w	r3, r3, #2
   16dd4:	2202      	movs	r2, #2
   16dd6:	4619      	mov	r1, r3
   16dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
   16dda:	f7f6 fb71 	bl	d4c0 <mp_map_lookup>
   16dde:	62f8      	str	r0, [r7, #44]	; 0x2c
                if (elem != NULL) {
   16de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16de2:	2b00      	cmp	r3, #0
   16de4:	d016      	beq.n	16e14 <type_attr+0xf0>
                    dest[0] = MP_OBJ_NULL; // indicate success
   16de6:	687b      	ldr	r3, [r7, #4]
   16de8:	2200      	movs	r2, #0
   16dea:	601a      	str	r2, [r3, #0]
   16dec:	e012      	b.n	16e14 <type_attr+0xf0>
                }
            } else {
                // store attribute
                mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(attr), MP_MAP_LOOKUP_ADD_IF_NOT_FOUND);
   16dee:	68bb      	ldr	r3, [r7, #8]
   16df0:	009b      	lsls	r3, r3, #2
   16df2:	f043 0302 	orr.w	r3, r3, #2
   16df6:	2201      	movs	r2, #1
   16df8:	4619      	mov	r1, r3
   16dfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
   16dfc:	f7f6 fb60 	bl	d4c0 <mp_map_lookup>
   16e00:	62b8      	str	r0, [r7, #40]	; 0x28
                elem->value = dest[1];
   16e02:	687b      	ldr	r3, [r7, #4]
   16e04:	685a      	ldr	r2, [r3, #4]
   16e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16e08:	605a      	str	r2, [r3, #4]
                dest[0] = MP_OBJ_NULL; // indicate success
   16e0a:	687b      	ldr	r3, [r7, #4]
   16e0c:	2200      	movs	r2, #0
   16e0e:	601a      	str	r2, [r3, #0]
   16e10:	e000      	b.n	16e14 <type_attr+0xf0>
                return;
   16e12:	bf00      	nop
            }
        }
    }
}
   16e14:	3738      	adds	r7, #56	; 0x38
   16e16:	46bd      	mov	sp, r7
   16e18:	bd80      	pop	{r7, pc}
   16e1a:	bf00      	nop
   16e1c:	00022160 	.word	0x00022160
   16e20:	00022108 	.word	0x00022108
   16e24:	00022460 	.word	0x00022460
   16e28:	00021f50 	.word	0x00021f50
   16e2c:	000200e8 	.word	0x000200e8
   16e30:	00022130 	.word	0x00022130

00016e34 <mp_obj_new_type>:
    .call = type_call,
    .unary_op = mp_generic_unary_op,
    .attr = type_attr,
};

mp_obj_t mp_obj_new_type(qstr name, mp_obj_t bases_tuple, mp_obj_t locals_dict) {
   16e34:	b580      	push	{r7, lr}
   16e36:	b08e      	sub	sp, #56	; 0x38
   16e38:	af00      	add	r7, sp, #0
   16e3a:	60f8      	str	r0, [r7, #12]
   16e3c:	60b9      	str	r1, [r7, #8]
   16e3e:	607a      	str	r2, [r7, #4]
    // Verify input objects have expected type
    if (!MP_OBJ_IS_TYPE(bases_tuple, &mp_type_tuple)) {
   16e40:	68b8      	ldr	r0, [r7, #8]
   16e42:	f7ff f8ab 	bl	15f9c <MP_OBJ_IS_OBJ>
   16e46:	4603      	mov	r3, r0
   16e48:	f083 0301 	eor.w	r3, r3, #1
   16e4c:	b2db      	uxtb	r3, r3
   16e4e:	2b00      	cmp	r3, #0
   16e50:	d104      	bne.n	16e5c <mp_obj_new_type+0x28>
   16e52:	68bb      	ldr	r3, [r7, #8]
   16e54:	681b      	ldr	r3, [r3, #0]
   16e56:	4a61      	ldr	r2, [pc, #388]	; (16fdc <mp_obj_new_type+0x1a8>)
   16e58:	4293      	cmp	r3, r2
   16e5a:	d002      	beq.n	16e62 <mp_obj_new_type+0x2e>
        mp_raise_TypeError(NULL);
   16e5c:	2000      	movs	r0, #0
   16e5e:	f7f6 f8bf 	bl	cfe0 <mp_raise_TypeError>
    }
    if (!MP_OBJ_IS_TYPE(locals_dict, &mp_type_dict)) {
   16e62:	6878      	ldr	r0, [r7, #4]
   16e64:	f7ff f89a 	bl	15f9c <MP_OBJ_IS_OBJ>
   16e68:	4603      	mov	r3, r0
   16e6a:	f083 0301 	eor.w	r3, r3, #1
   16e6e:	b2db      	uxtb	r3, r3
   16e70:	2b00      	cmp	r3, #0
   16e72:	d104      	bne.n	16e7e <mp_obj_new_type+0x4a>
   16e74:	687b      	ldr	r3, [r7, #4]
   16e76:	681b      	ldr	r3, [r3, #0]
   16e78:	4a59      	ldr	r2, [pc, #356]	; (16fe0 <mp_obj_new_type+0x1ac>)
   16e7a:	4293      	cmp	r3, r2
   16e7c:	d002      	beq.n	16e84 <mp_obj_new_type+0x50>
        mp_raise_TypeError(NULL);
   16e7e:	2000      	movs	r0, #0
   16e80:	f7f6 f8ae 	bl	cfe0 <mp_raise_TypeError>
    // TODO might need to make a copy of locals_dict; at least that's how CPython does it

    // Basic validation of base classes
    size_t bases_len;
    mp_obj_t *bases_items;
    mp_obj_tuple_get(bases_tuple, &bases_len, &bases_items);
   16e84:	f107 0218 	add.w	r2, r7, #24
   16e88:	f107 031c 	add.w	r3, r7, #28
   16e8c:	4619      	mov	r1, r3
   16e8e:	68b8      	ldr	r0, [r7, #8]
   16e90:	f7fe ffe6 	bl	15e60 <mp_obj_tuple_get>
    for (size_t i = 0; i < bases_len; i++) {
   16e94:	2300      	movs	r3, #0
   16e96:	637b      	str	r3, [r7, #52]	; 0x34
   16e98:	e029      	b.n	16eee <mp_obj_new_type+0xba>
        if (!MP_OBJ_IS_TYPE(bases_items[i], &mp_type_type)) {
   16e9a:	69ba      	ldr	r2, [r7, #24]
   16e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16e9e:	009b      	lsls	r3, r3, #2
   16ea0:	4413      	add	r3, r2
   16ea2:	681b      	ldr	r3, [r3, #0]
   16ea4:	4618      	mov	r0, r3
   16ea6:	f7ff f879 	bl	15f9c <MP_OBJ_IS_OBJ>
   16eaa:	4603      	mov	r3, r0
   16eac:	f083 0301 	eor.w	r3, r3, #1
   16eb0:	b2db      	uxtb	r3, r3
   16eb2:	2b00      	cmp	r3, #0
   16eb4:	d108      	bne.n	16ec8 <mp_obj_new_type+0x94>
   16eb6:	69ba      	ldr	r2, [r7, #24]
   16eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16eba:	009b      	lsls	r3, r3, #2
   16ebc:	4413      	add	r3, r2
   16ebe:	681b      	ldr	r3, [r3, #0]
   16ec0:	681b      	ldr	r3, [r3, #0]
   16ec2:	4a48      	ldr	r2, [pc, #288]	; (16fe4 <mp_obj_new_type+0x1b0>)
   16ec4:	4293      	cmp	r3, r2
   16ec6:	d002      	beq.n	16ece <mp_obj_new_type+0x9a>
            mp_raise_TypeError(NULL);
   16ec8:	2000      	movs	r0, #0
   16eca:	f7f6 f889 	bl	cfe0 <mp_raise_TypeError>
        }
        mp_obj_type_t *t = MP_OBJ_TO_PTR(bases_items[i]);
   16ece:	69ba      	ldr	r2, [r7, #24]
   16ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16ed2:	009b      	lsls	r3, r3, #2
   16ed4:	4413      	add	r3, r2
   16ed6:	681b      	ldr	r3, [r3, #0]
   16ed8:	633b      	str	r3, [r7, #48]	; 0x30
        // TODO: Verify with CPy, tested on function type
        if (t->make_new == NULL) {
   16eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16edc:	68db      	ldr	r3, [r3, #12]
   16ede:	2b00      	cmp	r3, #0
   16ee0:	d102      	bne.n	16ee8 <mp_obj_new_type+0xb4>
            if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                mp_raise_TypeError("type is not an acceptable base type");
   16ee2:	4841      	ldr	r0, [pc, #260]	; (16fe8 <mp_obj_new_type+0x1b4>)
   16ee4:	f7f6 f87c 	bl	cfe0 <mp_raise_TypeError>
    for (size_t i = 0; i < bases_len; i++) {
   16ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16eea:	3301      	adds	r3, #1
   16eec:	637b      	str	r3, [r7, #52]	; 0x34
   16eee:	69fb      	ldr	r3, [r7, #28]
   16ef0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16ef2:	429a      	cmp	r2, r3
   16ef4:	d3d1      	bcc.n	16e9a <mp_obj_new_type+0x66>
                    "type '%q' is not an acceptable base type", t->name));
            }
        }
    }

    mp_obj_type_t *o = m_new0(mp_obj_type_t, 1);
   16ef6:	203c      	movs	r0, #60	; 0x3c
   16ef8:	f7e9 fa36 	bl	368 <m_malloc0>
   16efc:	62f8      	str	r0, [r7, #44]	; 0x2c
    o->base.type = &mp_type_type;
   16efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16f00:	4a38      	ldr	r2, [pc, #224]	; (16fe4 <mp_obj_new_type+0x1b0>)
   16f02:	601a      	str	r2, [r3, #0]
    o->name = name;
   16f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16f06:	68fa      	ldr	r2, [r7, #12]
   16f08:	605a      	str	r2, [r3, #4]
    o->print = instance_print;
   16f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16f0c:	4a37      	ldr	r2, [pc, #220]	; (16fec <mp_obj_new_type+0x1b8>)
   16f0e:	609a      	str	r2, [r3, #8]
    o->make_new = mp_obj_instance_make_new;
   16f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16f12:	4a37      	ldr	r2, [pc, #220]	; (16ff0 <mp_obj_new_type+0x1bc>)
   16f14:	60da      	str	r2, [r3, #12]
    o->call = mp_obj_instance_call;
   16f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16f18:	4a36      	ldr	r2, [pc, #216]	; (16ff4 <mp_obj_new_type+0x1c0>)
   16f1a:	611a      	str	r2, [r3, #16]
    o->unary_op = instance_unary_op;
   16f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16f1e:	4a36      	ldr	r2, [pc, #216]	; (16ff8 <mp_obj_new_type+0x1c4>)
   16f20:	615a      	str	r2, [r3, #20]
    o->binary_op = instance_binary_op;
   16f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16f24:	4a35      	ldr	r2, [pc, #212]	; (16ffc <mp_obj_new_type+0x1c8>)
   16f26:	619a      	str	r2, [r3, #24]
    o->attr = mp_obj_instance_attr;
   16f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16f2a:	4a35      	ldr	r2, [pc, #212]	; (17000 <mp_obj_new_type+0x1cc>)
   16f2c:	61da      	str	r2, [r3, #28]
    o->subscr = instance_subscr;
   16f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16f30:	4a34      	ldr	r2, [pc, #208]	; (17004 <mp_obj_new_type+0x1d0>)
   16f32:	621a      	str	r2, [r3, #32]
    o->getiter = instance_getiter;
   16f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16f36:	4a34      	ldr	r2, [pc, #208]	; (17008 <mp_obj_new_type+0x1d4>)
   16f38:	625a      	str	r2, [r3, #36]	; 0x24
    //o->iternext = ; not implemented
    o->buffer_p.get_buffer = instance_get_buffer;
   16f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16f3c:	4a33      	ldr	r2, [pc, #204]	; (1700c <mp_obj_new_type+0x1d8>)
   16f3e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (bases_len > 0) {
   16f40:	69fb      	ldr	r3, [r7, #28]
   16f42:	2b00      	cmp	r3, #0
   16f44:	d00f      	beq.n	16f66 <mp_obj_new_type+0x132>
        // Inherit protocol from a base class. This allows to define an
        // abstract base class which would translate C-level protocol to
        // Python method calls, and any subclass inheriting from it will
        // support this feature.
        o->protocol = ((mp_obj_type_t*)MP_OBJ_TO_PTR(bases_items[0]))->protocol;
   16f46:	69bb      	ldr	r3, [r7, #24]
   16f48:	681b      	ldr	r3, [r3, #0]
   16f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   16f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16f4e:	631a      	str	r2, [r3, #48]	; 0x30

        if (bases_len >= 2) {
   16f50:	69fb      	ldr	r3, [r7, #28]
   16f52:	2b01      	cmp	r3, #1
   16f54:	d903      	bls.n	16f5e <mp_obj_new_type+0x12a>
            #if MICROPY_MULTIPLE_INHERITANCE
            o->parent = MP_OBJ_TO_PTR(bases_tuple);
   16f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16f58:	68ba      	ldr	r2, [r7, #8]
   16f5a:	635a      	str	r2, [r3, #52]	; 0x34
   16f5c:	e003      	b.n	16f66 <mp_obj_new_type+0x132>
            #else
            mp_raise_NotImplementedError("multiple inheritance not supported");
            #endif
        } else {
            o->parent = MP_OBJ_TO_PTR(bases_items[0]);
   16f5e:	69bb      	ldr	r3, [r7, #24]
   16f60:	681a      	ldr	r2, [r3, #0]
   16f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16f64:	635a      	str	r2, [r3, #52]	; 0x34
        }
    }

    o->locals_dict = MP_OBJ_TO_PTR(locals_dict);
   16f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16f68:	687a      	ldr	r2, [r7, #4]
   16f6a:	639a      	str	r2, [r3, #56]	; 0x38

    const mp_obj_type_t *native_base;
    size_t num_native_bases = instance_count_native_bases(o, &native_base);
   16f6c:	f107 0314 	add.w	r3, r7, #20
   16f70:	4619      	mov	r1, r3
   16f72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16f74:	f7ff f824 	bl	15fc0 <instance_count_native_bases>
   16f78:	4603      	mov	r3, r0
   16f7a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (num_native_bases > 1) {
   16f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16f7e:	2b01      	cmp	r3, #1
   16f80:	d902      	bls.n	16f88 <mp_obj_new_type+0x154>
        mp_raise_TypeError("multiple bases have instance lay-out conflict");
   16f82:	4823      	ldr	r0, [pc, #140]	; (17010 <mp_obj_new_type+0x1dc>)
   16f84:	f7f6 f82c 	bl	cfe0 <mp_raise_TypeError>
    }

    mp_map_t *locals_map = &o->locals_dict->map;
   16f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16f8c:	3304      	adds	r3, #4
   16f8e:	627b      	str	r3, [r7, #36]	; 0x24
    mp_map_elem_t *elem = mp_map_lookup(locals_map, MP_OBJ_NEW_QSTR(MP_QSTR___new__), MP_MAP_LOOKUP);
   16f90:	2200      	movs	r2, #0
   16f92:	2172      	movs	r1, #114	; 0x72
   16f94:	6a78      	ldr	r0, [r7, #36]	; 0x24
   16f96:	f7f6 fa93 	bl	d4c0 <mp_map_lookup>
   16f9a:	6238      	str	r0, [r7, #32]
    if (elem != NULL) {
   16f9c:	6a3b      	ldr	r3, [r7, #32]
   16f9e:	2b00      	cmp	r3, #0
   16fa0:	d017      	beq.n	16fd2 <mp_obj_new_type+0x19e>
        // __new__ slot exists; check if it is a function
        if (MP_OBJ_IS_FUN(elem->value)) {
   16fa2:	6a3b      	ldr	r3, [r7, #32]
   16fa4:	685b      	ldr	r3, [r3, #4]
   16fa6:	4618      	mov	r0, r3
   16fa8:	f7fe fff8 	bl	15f9c <MP_OBJ_IS_OBJ>
   16fac:	4603      	mov	r3, r0
   16fae:	2b00      	cmp	r3, #0
   16fb0:	d00f      	beq.n	16fd2 <mp_obj_new_type+0x19e>
   16fb2:	6a3b      	ldr	r3, [r7, #32]
   16fb4:	685b      	ldr	r3, [r3, #4]
   16fb6:	681b      	ldr	r3, [r3, #0]
   16fb8:	685b      	ldr	r3, [r3, #4]
   16fba:	2b74      	cmp	r3, #116	; 0x74
   16fbc:	d109      	bne.n	16fd2 <mp_obj_new_type+0x19e>
            // __new__ is a function, wrap it in a staticmethod decorator
            elem->value = static_class_method_make_new(&mp_type_staticmethod, 1, 0, &elem->value);
   16fbe:	6a3b      	ldr	r3, [r7, #32]
   16fc0:	3304      	adds	r3, #4
   16fc2:	2200      	movs	r2, #0
   16fc4:	2101      	movs	r1, #1
   16fc6:	4813      	ldr	r0, [pc, #76]	; (17014 <mp_obj_new_type+0x1e0>)
   16fc8:	f000 fa9c 	bl	17504 <static_class_method_make_new>
   16fcc:	4602      	mov	r2, r0
   16fce:	6a3b      	ldr	r3, [r7, #32]
   16fd0:	605a      	str	r2, [r3, #4]
        }
    }

    return MP_OBJ_FROM_PTR(o);
   16fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   16fd4:	4618      	mov	r0, r3
   16fd6:	3738      	adds	r7, #56	; 0x38
   16fd8:	46bd      	mov	sp, r7
   16fda:	bd80      	pop	{r7, pc}
   16fdc:	00021e68 	.word	0x00021e68
   16fe0:	000200e8 	.word	0x000200e8
   16fe4:	00022160 	.word	0x00022160
   16fe8:	0002219c 	.word	0x0002219c
   16fec:	000163c5 	.word	0x000163c5
   16ff0:	000164d1 	.word	0x000164d1
   16ff4:	00016aed 	.word	0x00016aed
   16ff8:	000166ad 	.word	0x000166ad
   16ffc:	00016771 	.word	0x00016771
   17000:	00016951 	.word	0x00016951
   17004:	00016995 	.word	0x00016995
   17008:	00016b59 	.word	0x00016b59
   1700c:	00016bdd 	.word	0x00016bdd
   17010:	000221c0 	.word	0x000221c0
   17014:	0002236c 	.word	0x0002236c

00017018 <super_print>:
    mp_obj_base_t base;
    mp_obj_t type;
    mp_obj_t obj;
} mp_obj_super_t;

STATIC void super_print(const mp_print_t *print, mp_obj_t self_in, mp_print_kind_t kind) {
   17018:	b580      	push	{r7, lr}
   1701a:	b086      	sub	sp, #24
   1701c:	af00      	add	r7, sp, #0
   1701e:	60f8      	str	r0, [r7, #12]
   17020:	60b9      	str	r1, [r7, #8]
   17022:	607a      	str	r2, [r7, #4]
    (void)kind;
    mp_obj_super_t *self = MP_OBJ_TO_PTR(self_in);
   17024:	68bb      	ldr	r3, [r7, #8]
   17026:	617b      	str	r3, [r7, #20]
    mp_print_str(print, "<super: ");
   17028:	490e      	ldr	r1, [pc, #56]	; (17064 <super_print+0x4c>)
   1702a:	68f8      	ldr	r0, [r7, #12]
   1702c:	f7ea fc26 	bl	187c <mp_print_str>
    mp_obj_print_helper(print, self->type, PRINT_STR);
   17030:	697b      	ldr	r3, [r7, #20]
   17032:	685b      	ldr	r3, [r3, #4]
   17034:	2200      	movs	r2, #0
   17036:	4619      	mov	r1, r3
   17038:	68f8      	ldr	r0, [r7, #12]
   1703a:	f7f6 fc1d 	bl	d878 <mp_obj_print_helper>
    mp_print_str(print, ", ");
   1703e:	490a      	ldr	r1, [pc, #40]	; (17068 <super_print+0x50>)
   17040:	68f8      	ldr	r0, [r7, #12]
   17042:	f7ea fc1b 	bl	187c <mp_print_str>
    mp_obj_print_helper(print, self->obj, PRINT_STR);
   17046:	697b      	ldr	r3, [r7, #20]
   17048:	689b      	ldr	r3, [r3, #8]
   1704a:	2200      	movs	r2, #0
   1704c:	4619      	mov	r1, r3
   1704e:	68f8      	ldr	r0, [r7, #12]
   17050:	f7f6 fc12 	bl	d878 <mp_obj_print_helper>
    mp_print_str(print, ">");
   17054:	4905      	ldr	r1, [pc, #20]	; (1706c <super_print+0x54>)
   17056:	68f8      	ldr	r0, [r7, #12]
   17058:	f7ea fc10 	bl	187c <mp_print_str>
}
   1705c:	bf00      	nop
   1705e:	3718      	adds	r7, #24
   17060:	46bd      	mov	sp, r7
   17062:	bd80      	pop	{r7, pc}
   17064:	000221f0 	.word	0x000221f0
   17068:	000221fc 	.word	0x000221fc
   1706c:	00022200 	.word	0x00022200

00017070 <super_make_new>:

STATIC mp_obj_t super_make_new(const mp_obj_type_t *type_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   17070:	b580      	push	{r7, lr}
   17072:	b088      	sub	sp, #32
   17074:	af02      	add	r7, sp, #8
   17076:	60f8      	str	r0, [r7, #12]
   17078:	60b9      	str	r1, [r7, #8]
   1707a:	607a      	str	r2, [r7, #4]
   1707c:	603b      	str	r3, [r7, #0]
    (void)type_in;
    // 0 arguments are turned into 2 in the compiler
    // 1 argument is not yet implemented
    mp_arg_check_num(n_args, n_kw, 2, 2, false);
   1707e:	2300      	movs	r3, #0
   17080:	9300      	str	r3, [sp, #0]
   17082:	2302      	movs	r3, #2
   17084:	2202      	movs	r2, #2
   17086:	6879      	ldr	r1, [r7, #4]
   17088:	68b8      	ldr	r0, [r7, #8]
   1708a:	f7f5 ffcf 	bl	d02c <mp_arg_check_num>
    if (!MP_OBJ_IS_TYPE(args[0], &mp_type_type)) {
   1708e:	683b      	ldr	r3, [r7, #0]
   17090:	681b      	ldr	r3, [r3, #0]
   17092:	4618      	mov	r0, r3
   17094:	f7fe ff82 	bl	15f9c <MP_OBJ_IS_OBJ>
   17098:	4603      	mov	r3, r0
   1709a:	f083 0301 	eor.w	r3, r3, #1
   1709e:	b2db      	uxtb	r3, r3
   170a0:	2b00      	cmp	r3, #0
   170a2:	d105      	bne.n	170b0 <super_make_new+0x40>
   170a4:	683b      	ldr	r3, [r7, #0]
   170a6:	681b      	ldr	r3, [r3, #0]
   170a8:	681b      	ldr	r3, [r3, #0]
   170aa:	4a0d      	ldr	r2, [pc, #52]	; (170e0 <super_make_new+0x70>)
   170ac:	4293      	cmp	r3, r2
   170ae:	d002      	beq.n	170b6 <super_make_new+0x46>
        mp_raise_TypeError(NULL);
   170b0:	2000      	movs	r0, #0
   170b2:	f7f5 ff95 	bl	cfe0 <mp_raise_TypeError>
    }
    mp_obj_super_t *o = m_new_obj(mp_obj_super_t);
   170b6:	200c      	movs	r0, #12
   170b8:	f7e9 f930 	bl	31c <m_malloc>
   170bc:	6178      	str	r0, [r7, #20]
    *o = (mp_obj_super_t){{type_in}, args[0], args[1]};
   170be:	683b      	ldr	r3, [r7, #0]
   170c0:	6819      	ldr	r1, [r3, #0]
   170c2:	683b      	ldr	r3, [r7, #0]
   170c4:	3304      	adds	r3, #4
   170c6:	681a      	ldr	r2, [r3, #0]
   170c8:	697b      	ldr	r3, [r7, #20]
   170ca:	68f8      	ldr	r0, [r7, #12]
   170cc:	6018      	str	r0, [r3, #0]
   170ce:	697b      	ldr	r3, [r7, #20]
   170d0:	6059      	str	r1, [r3, #4]
   170d2:	697b      	ldr	r3, [r7, #20]
   170d4:	609a      	str	r2, [r3, #8]
    return MP_OBJ_FROM_PTR(o);
   170d6:	697b      	ldr	r3, [r7, #20]
}
   170d8:	4618      	mov	r0, r3
   170da:	3718      	adds	r7, #24
   170dc:	46bd      	mov	sp, r7
   170de:	bd80      	pop	{r7, pc}
   170e0:	00022160 	.word	0x00022160

000170e4 <super_attr>:

STATIC void super_attr(mp_obj_t self_in, qstr attr, mp_obj_t *dest) {
   170e4:	b580      	push	{r7, lr}
   170e6:	b090      	sub	sp, #64	; 0x40
   170e8:	af00      	add	r7, sp, #0
   170ea:	60f8      	str	r0, [r7, #12]
   170ec:	60b9      	str	r1, [r7, #8]
   170ee:	607a      	str	r2, [r7, #4]
    if (dest[0] != MP_OBJ_NULL) {
   170f0:	687b      	ldr	r3, [r7, #4]
   170f2:	681b      	ldr	r3, [r3, #0]
   170f4:	2b00      	cmp	r3, #0
   170f6:	f040 80c1 	bne.w	1727c <super_attr+0x198>
        // not load attribute
        return;
    }

    assert(MP_OBJ_IS_TYPE(self_in, &mp_type_super));
   170fa:	68f8      	ldr	r0, [r7, #12]
   170fc:	f7fe ff4e 	bl	15f9c <MP_OBJ_IS_OBJ>
   17100:	4603      	mov	r3, r0
   17102:	f083 0301 	eor.w	r3, r3, #1
   17106:	b2db      	uxtb	r3, r3
   17108:	2b00      	cmp	r3, #0
   1710a:	d104      	bne.n	17116 <super_attr+0x32>
   1710c:	68fb      	ldr	r3, [r7, #12]
   1710e:	681b      	ldr	r3, [r3, #0]
   17110:	4a5d      	ldr	r2, [pc, #372]	; (17288 <super_attr+0x1a4>)
   17112:	4293      	cmp	r3, r2
   17114:	d006      	beq.n	17124 <super_attr+0x40>
   17116:	4b5d      	ldr	r3, [pc, #372]	; (1728c <super_attr+0x1a8>)
   17118:	4a5d      	ldr	r2, [pc, #372]	; (17290 <super_attr+0x1ac>)
   1711a:	f240 4169 	movw	r1, #1129	; 0x469
   1711e:	485d      	ldr	r0, [pc, #372]	; (17294 <super_attr+0x1b0>)
   17120:	f004 f924 	bl	1b36c <__assert_func>
    mp_obj_super_t *self = MP_OBJ_TO_PTR(self_in);
   17124:	68fb      	ldr	r3, [r7, #12]
   17126:	63bb      	str	r3, [r7, #56]	; 0x38

    assert(MP_OBJ_IS_TYPE(self->type, &mp_type_type));
   17128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1712a:	685b      	ldr	r3, [r3, #4]
   1712c:	4618      	mov	r0, r3
   1712e:	f7fe ff35 	bl	15f9c <MP_OBJ_IS_OBJ>
   17132:	4603      	mov	r3, r0
   17134:	f083 0301 	eor.w	r3, r3, #1
   17138:	b2db      	uxtb	r3, r3
   1713a:	2b00      	cmp	r3, #0
   1713c:	d105      	bne.n	1714a <super_attr+0x66>
   1713e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17140:	685b      	ldr	r3, [r3, #4]
   17142:	681b      	ldr	r3, [r3, #0]
   17144:	4a54      	ldr	r2, [pc, #336]	; (17298 <super_attr+0x1b4>)
   17146:	4293      	cmp	r3, r2
   17148:	d006      	beq.n	17158 <super_attr+0x74>
   1714a:	4b54      	ldr	r3, [pc, #336]	; (1729c <super_attr+0x1b8>)
   1714c:	4a50      	ldr	r2, [pc, #320]	; (17290 <super_attr+0x1ac>)
   1714e:	f240 416c 	movw	r1, #1132	; 0x46c
   17152:	4850      	ldr	r0, [pc, #320]	; (17294 <super_attr+0x1b0>)
   17154:	f004 f90a 	bl	1b36c <__assert_func>

    mp_obj_type_t *type = MP_OBJ_TO_PTR(self->type);
   17158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1715a:	685b      	ldr	r3, [r3, #4]
   1715c:	637b      	str	r3, [r7, #52]	; 0x34

    struct class_lookup_data lookup = {
        .obj = MP_OBJ_TO_PTR(self->obj),
   1715e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17160:	689b      	ldr	r3, [r3, #8]
    struct class_lookup_data lookup = {
   17162:	617b      	str	r3, [r7, #20]
   17164:	68bb      	ldr	r3, [r7, #8]
   17166:	61bb      	str	r3, [r7, #24]
   17168:	2300      	movs	r3, #0
   1716a:	61fb      	str	r3, [r7, #28]
   1716c:	687b      	ldr	r3, [r7, #4]
   1716e:	623b      	str	r3, [r7, #32]
   17170:	2300      	movs	r3, #0
   17172:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        .dest = dest,
        .is_type = false,
    };

    // Allow a call super().__init__() to reach any native base classes
    if (attr == MP_QSTR___init__) {
   17176:	68bb      	ldr	r3, [r7, #8]
   17178:	2b13      	cmp	r3, #19
   1717a:	d101      	bne.n	17180 <super_attr+0x9c>
        lookup.meth_offset = offsetof(mp_obj_type_t, make_new);
   1717c:	230c      	movs	r3, #12
   1717e:	61fb      	str	r3, [r7, #28]
    }

    if (type->parent == NULL) {
   17180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17184:	2b00      	cmp	r3, #0
   17186:	d05f      	beq.n	17248 <super_attr+0x164>
        // no parents, do nothing
    #if MICROPY_MULTIPLE_INHERITANCE
    } else if (((mp_obj_base_t*)type->parent)->type == &mp_type_tuple) {
   17188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1718a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1718c:	681b      	ldr	r3, [r3, #0]
   1718e:	4a44      	ldr	r2, [pc, #272]	; (172a0 <super_attr+0x1bc>)
   17190:	4293      	cmp	r3, r2
   17192:	d14a      	bne.n	1722a <super_attr+0x146>
        const mp_obj_tuple_t *parent_tuple = type->parent;
   17194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17198:	633b      	str	r3, [r7, #48]	; 0x30
        size_t len = parent_tuple->len;
   1719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1719c:	685b      	ldr	r3, [r3, #4]
   1719e:	62fb      	str	r3, [r7, #44]	; 0x2c
        const mp_obj_t *items = parent_tuple->items;
   171a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   171a2:	3308      	adds	r3, #8
   171a4:	62bb      	str	r3, [r7, #40]	; 0x28
        for (size_t i = 0; i < len; i++) {
   171a6:	2300      	movs	r3, #0
   171a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   171aa:	e039      	b.n	17220 <super_attr+0x13c>
            assert(MP_OBJ_IS_TYPE(items[i], &mp_type_type));
   171ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   171ae:	009b      	lsls	r3, r3, #2
   171b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   171b2:	4413      	add	r3, r2
   171b4:	681b      	ldr	r3, [r3, #0]
   171b6:	4618      	mov	r0, r3
   171b8:	f7fe fef0 	bl	15f9c <MP_OBJ_IS_OBJ>
   171bc:	4603      	mov	r3, r0
   171be:	f083 0301 	eor.w	r3, r3, #1
   171c2:	b2db      	uxtb	r3, r3
   171c4:	2b00      	cmp	r3, #0
   171c6:	d108      	bne.n	171da <super_attr+0xf6>
   171c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   171ca:	009b      	lsls	r3, r3, #2
   171cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   171ce:	4413      	add	r3, r2
   171d0:	681b      	ldr	r3, [r3, #0]
   171d2:	681b      	ldr	r3, [r3, #0]
   171d4:	4a30      	ldr	r2, [pc, #192]	; (17298 <super_attr+0x1b4>)
   171d6:	4293      	cmp	r3, r2
   171d8:	d006      	beq.n	171e8 <super_attr+0x104>
   171da:	4b32      	ldr	r3, [pc, #200]	; (172a4 <super_attr+0x1c0>)
   171dc:	4a2c      	ldr	r2, [pc, #176]	; (17290 <super_attr+0x1ac>)
   171de:	f240 4185 	movw	r1, #1157	; 0x485
   171e2:	482c      	ldr	r0, [pc, #176]	; (17294 <super_attr+0x1b0>)
   171e4:	f004 f8c2 	bl	1b36c <__assert_func>
            if (MP_OBJ_TO_PTR(items[i]) == &mp_type_object) {
   171e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   171ea:	009b      	lsls	r3, r3, #2
   171ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
   171ee:	4413      	add	r3, r2
   171f0:	681b      	ldr	r3, [r3, #0]
   171f2:	4a2d      	ldr	r2, [pc, #180]	; (172a8 <super_attr+0x1c4>)
   171f4:	4293      	cmp	r3, r2
   171f6:	d00f      	beq.n	17218 <super_attr+0x134>
                // The "object" type will be searched at the end of this function,
                // and we don't want to lookup native methods in object.
                continue;
            }
            mp_obj_class_lookup(&lookup, (mp_obj_type_t*)MP_OBJ_TO_PTR(items[i]));
   171f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   171fa:	009b      	lsls	r3, r3, #2
   171fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   171fe:	4413      	add	r3, r2
   17200:	681a      	ldr	r2, [r3, #0]
   17202:	f107 0314 	add.w	r3, r7, #20
   17206:	4611      	mov	r1, r2
   17208:	4618      	mov	r0, r3
   1720a:	f7fe ffa9 	bl	16160 <mp_obj_class_lookup>
            if (dest[0] != MP_OBJ_NULL) {
   1720e:	687b      	ldr	r3, [r7, #4]
   17210:	681b      	ldr	r3, [r3, #0]
   17212:	2b00      	cmp	r3, #0
   17214:	d117      	bne.n	17246 <super_attr+0x162>
   17216:	e000      	b.n	1721a <super_attr+0x136>
                continue;
   17218:	bf00      	nop
        for (size_t i = 0; i < len; i++) {
   1721a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1721c:	3301      	adds	r3, #1
   1721e:	63fb      	str	r3, [r7, #60]	; 0x3c
   17220:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   17222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17224:	429a      	cmp	r2, r3
   17226:	d3c1      	bcc.n	171ac <super_attr+0xc8>
   17228:	e00e      	b.n	17248 <super_attr+0x164>
                break;
            }
        }
    #endif
    } else if (type->parent != &mp_type_object) {
   1722a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1722c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1722e:	4a1e      	ldr	r2, [pc, #120]	; (172a8 <super_attr+0x1c4>)
   17230:	4293      	cmp	r3, r2
   17232:	d009      	beq.n	17248 <super_attr+0x164>
        mp_obj_class_lookup(&lookup, type->parent);
   17234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   17238:	f107 0314 	add.w	r3, r7, #20
   1723c:	4611      	mov	r1, r2
   1723e:	4618      	mov	r0, r3
   17240:	f7fe ff8e 	bl	16160 <mp_obj_class_lookup>
   17244:	e000      	b.n	17248 <super_attr+0x164>
                break;
   17246:	bf00      	nop
    }

    if (dest[0] != MP_OBJ_NULL) {
   17248:	687b      	ldr	r3, [r7, #4]
   1724a:	681b      	ldr	r3, [r3, #0]
   1724c:	2b00      	cmp	r3, #0
   1724e:	d00c      	beq.n	1726a <super_attr+0x186>
        if (dest[0] == MP_OBJ_SENTINEL) {
   17250:	687b      	ldr	r3, [r7, #4]
   17252:	681b      	ldr	r3, [r3, #0]
   17254:	2b08      	cmp	r3, #8
   17256:	d113      	bne.n	17280 <super_attr+0x19c>
            // Looked up native __init__ so defer to it
            dest[0] = MP_OBJ_FROM_PTR(&native_base_init_wrapper_obj);
   17258:	687b      	ldr	r3, [r7, #4]
   1725a:	4a14      	ldr	r2, [pc, #80]	; (172ac <super_attr+0x1c8>)
   1725c:	601a      	str	r2, [r3, #0]
            dest[1] = self->obj;
   1725e:	687b      	ldr	r3, [r7, #4]
   17260:	3304      	adds	r3, #4
   17262:	6bba      	ldr	r2, [r7, #56]	; 0x38
   17264:	6892      	ldr	r2, [r2, #8]
   17266:	601a      	str	r2, [r3, #0]
        }
        return;
   17268:	e00a      	b.n	17280 <super_attr+0x19c>
    }

    // Reset meth_offset so we don't look up any native methods in object,
    // because object never takes up the native base-class slot.
    lookup.meth_offset = 0;
   1726a:	2300      	movs	r3, #0
   1726c:	61fb      	str	r3, [r7, #28]

    mp_obj_class_lookup(&lookup, &mp_type_object);
   1726e:	f107 0314 	add.w	r3, r7, #20
   17272:	490d      	ldr	r1, [pc, #52]	; (172a8 <super_attr+0x1c4>)
   17274:	4618      	mov	r0, r3
   17276:	f7fe ff73 	bl	16160 <mp_obj_class_lookup>
   1727a:	e002      	b.n	17282 <super_attr+0x19e>
        return;
   1727c:	bf00      	nop
   1727e:	e000      	b.n	17282 <super_attr+0x19e>
        return;
   17280:	bf00      	nop
}
   17282:	3740      	adds	r7, #64	; 0x40
   17284:	46bd      	mov	sp, r7
   17286:	bd80      	pop	{r7, pc}
   17288:	00022280 	.word	0x00022280
   1728c:	00022204 	.word	0x00022204
   17290:	0002246c 	.word	0x0002246c
   17294:	00021f50 	.word	0x00021f50
   17298:	00022160 	.word	0x00022160
   1729c:	0002222c 	.word	0x0002222c
   172a0:	00021e68 	.word	0x00021e68
   172a4:	00022258 	.word	0x00022258
   172a8:	00021478 	.word	0x00021478
   172ac:	00021f64 	.word	0x00021f64

000172b0 <mp_load_super_method>:
    .print = super_print,
    .make_new = super_make_new,
    .attr = super_attr,
};

void mp_load_super_method(qstr attr, mp_obj_t *dest) {
   172b0:	b580      	push	{r7, lr}
   172b2:	b086      	sub	sp, #24
   172b4:	af00      	add	r7, sp, #0
   172b6:	6078      	str	r0, [r7, #4]
   172b8:	6039      	str	r1, [r7, #0]
    mp_obj_super_t super = {{&mp_type_super}, dest[1], dest[2]};
   172ba:	4b09      	ldr	r3, [pc, #36]	; (172e0 <mp_load_super_method+0x30>)
   172bc:	60fb      	str	r3, [r7, #12]
   172be:	683b      	ldr	r3, [r7, #0]
   172c0:	685b      	ldr	r3, [r3, #4]
   172c2:	613b      	str	r3, [r7, #16]
   172c4:	683b      	ldr	r3, [r7, #0]
   172c6:	689b      	ldr	r3, [r3, #8]
   172c8:	617b      	str	r3, [r7, #20]
    mp_load_method(MP_OBJ_FROM_PTR(&super), attr, dest);
   172ca:	f107 030c 	add.w	r3, r7, #12
   172ce:	683a      	ldr	r2, [r7, #0]
   172d0:	6879      	ldr	r1, [r7, #4]
   172d2:	4618      	mov	r0, r3
   172d4:	f7f5 fabc 	bl	c850 <mp_load_method>
}
   172d8:	bf00      	nop
   172da:	3718      	adds	r7, #24
   172dc:	46bd      	mov	sp, r7
   172de:	bd80      	pop	{r7, pc}
   172e0:	00022280 	.word	0x00022280

000172e4 <mp_obj_is_subclass_fast>:
/******************************************************************************/
// subclassing and built-ins specific to types

// object and classinfo should be type objects
// (but the function will fail gracefully if they are not)
bool mp_obj_is_subclass_fast(mp_const_obj_t object, mp_const_obj_t classinfo) {
   172e4:	b580      	push	{r7, lr}
   172e6:	b086      	sub	sp, #24
   172e8:	af00      	add	r7, sp, #0
   172ea:	6078      	str	r0, [r7, #4]
   172ec:	6039      	str	r1, [r7, #0]
    for (;;) {
        if (object == classinfo) {
   172ee:	687a      	ldr	r2, [r7, #4]
   172f0:	683b      	ldr	r3, [r7, #0]
   172f2:	429a      	cmp	r2, r3
   172f4:	d101      	bne.n	172fa <mp_obj_is_subclass_fast+0x16>
            return true;
   172f6:	2301      	movs	r3, #1
   172f8:	e047      	b.n	1738a <mp_obj_is_subclass_fast+0xa6>
        }

        // not equivalent classes, keep searching base classes

        // object should always be a type object, but just return false if it's not
        if (!MP_OBJ_IS_TYPE(object, &mp_type_type)) {
   172fa:	6878      	ldr	r0, [r7, #4]
   172fc:	f7fe fe4e 	bl	15f9c <MP_OBJ_IS_OBJ>
   17300:	4603      	mov	r3, r0
   17302:	f083 0301 	eor.w	r3, r3, #1
   17306:	b2db      	uxtb	r3, r3
   17308:	2b00      	cmp	r3, #0
   1730a:	d104      	bne.n	17316 <mp_obj_is_subclass_fast+0x32>
   1730c:	687b      	ldr	r3, [r7, #4]
   1730e:	681b      	ldr	r3, [r3, #0]
   17310:	4a20      	ldr	r2, [pc, #128]	; (17394 <mp_obj_is_subclass_fast+0xb0>)
   17312:	4293      	cmp	r3, r2
   17314:	d001      	beq.n	1731a <mp_obj_is_subclass_fast+0x36>
            return false;
   17316:	2300      	movs	r3, #0
   17318:	e037      	b.n	1738a <mp_obj_is_subclass_fast+0xa6>
        }

        const mp_obj_type_t *self = MP_OBJ_TO_PTR(object);
   1731a:	687b      	ldr	r3, [r7, #4]
   1731c:	613b      	str	r3, [r7, #16]

        if (self->parent == NULL) {
   1731e:	693b      	ldr	r3, [r7, #16]
   17320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17322:	2b00      	cmp	r3, #0
   17324:	d101      	bne.n	1732a <mp_obj_is_subclass_fast+0x46>
            // type has no parents
            return false;
   17326:	2300      	movs	r3, #0
   17328:	e02f      	b.n	1738a <mp_obj_is_subclass_fast+0xa6>
        #if MICROPY_MULTIPLE_INHERITANCE
        } else if (((mp_obj_base_t*)self->parent)->type == &mp_type_tuple) {
   1732a:	693b      	ldr	r3, [r7, #16]
   1732c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1732e:	681b      	ldr	r3, [r3, #0]
   17330:	4a19      	ldr	r2, [pc, #100]	; (17398 <mp_obj_is_subclass_fast+0xb4>)
   17332:	4293      	cmp	r3, r2
   17334:	d125      	bne.n	17382 <mp_obj_is_subclass_fast+0x9e>
            // get the base objects (they should be type objects)
            const mp_obj_tuple_t *parent_tuple = self->parent;
   17336:	693b      	ldr	r3, [r7, #16]
   17338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1733a:	60fb      	str	r3, [r7, #12]
            const mp_obj_t *item = parent_tuple->items;
   1733c:	68fb      	ldr	r3, [r7, #12]
   1733e:	3308      	adds	r3, #8
   17340:	617b      	str	r3, [r7, #20]
            const mp_obj_t *top = item + parent_tuple->len - 1;
   17342:	68fb      	ldr	r3, [r7, #12]
   17344:	685b      	ldr	r3, [r3, #4]
   17346:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1734a:	3b01      	subs	r3, #1
   1734c:	009b      	lsls	r3, r3, #2
   1734e:	697a      	ldr	r2, [r7, #20]
   17350:	4413      	add	r3, r2
   17352:	60bb      	str	r3, [r7, #8]

            // iterate through the base objects
            for (; item < top; ++item) {
   17354:	e00d      	b.n	17372 <mp_obj_is_subclass_fast+0x8e>
                if (mp_obj_is_subclass_fast(*item, classinfo)) {
   17356:	697b      	ldr	r3, [r7, #20]
   17358:	681b      	ldr	r3, [r3, #0]
   1735a:	6839      	ldr	r1, [r7, #0]
   1735c:	4618      	mov	r0, r3
   1735e:	f7ff ffc1 	bl	172e4 <mp_obj_is_subclass_fast>
   17362:	4603      	mov	r3, r0
   17364:	2b00      	cmp	r3, #0
   17366:	d001      	beq.n	1736c <mp_obj_is_subclass_fast+0x88>
                    return true;
   17368:	2301      	movs	r3, #1
   1736a:	e00e      	b.n	1738a <mp_obj_is_subclass_fast+0xa6>
            for (; item < top; ++item) {
   1736c:	697b      	ldr	r3, [r7, #20]
   1736e:	3304      	adds	r3, #4
   17370:	617b      	str	r3, [r7, #20]
   17372:	697a      	ldr	r2, [r7, #20]
   17374:	68bb      	ldr	r3, [r7, #8]
   17376:	429a      	cmp	r2, r3
   17378:	d3ed      	bcc.n	17356 <mp_obj_is_subclass_fast+0x72>
                }
            }

            // search last base (simple tail recursion elimination)
            object = *item;
   1737a:	697b      	ldr	r3, [r7, #20]
   1737c:	681b      	ldr	r3, [r3, #0]
   1737e:	607b      	str	r3, [r7, #4]
   17380:	e7b5      	b.n	172ee <mp_obj_is_subclass_fast+0xa>
        #endif
        } else {
            // type has 1 parent
            object = MP_OBJ_FROM_PTR(self->parent);
   17382:	693b      	ldr	r3, [r7, #16]
   17384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   17386:	607b      	str	r3, [r7, #4]
        }
    }
   17388:	e7b1      	b.n	172ee <mp_obj_is_subclass_fast+0xa>
}
   1738a:	4618      	mov	r0, r3
   1738c:	3718      	adds	r7, #24
   1738e:	46bd      	mov	sp, r7
   17390:	bd80      	pop	{r7, pc}
   17392:	bf00      	nop
   17394:	00022160 	.word	0x00022160
   17398:	00021e68 	.word	0x00021e68

0001739c <mp_obj_is_subclass>:

STATIC mp_obj_t mp_obj_is_subclass(mp_obj_t object, mp_obj_t classinfo) {
   1739c:	b580      	push	{r7, lr}
   1739e:	b086      	sub	sp, #24
   173a0:	af00      	add	r7, sp, #0
   173a2:	6078      	str	r0, [r7, #4]
   173a4:	6039      	str	r1, [r7, #0]
    size_t len;
    mp_obj_t *items;
    if (MP_OBJ_IS_TYPE(classinfo, &mp_type_type)) {
   173a6:	683b      	ldr	r3, [r7, #0]
   173a8:	4618      	mov	r0, r3
   173aa:	f7fe fdf7 	bl	15f9c <MP_OBJ_IS_OBJ>
   173ae:	4603      	mov	r3, r0
   173b0:	2b00      	cmp	r3, #0
   173b2:	d009      	beq.n	173c8 <mp_obj_is_subclass+0x2c>
   173b4:	683b      	ldr	r3, [r7, #0]
   173b6:	681b      	ldr	r3, [r3, #0]
   173b8:	4a22      	ldr	r2, [pc, #136]	; (17444 <mp_obj_is_subclass+0xa8>)
   173ba:	4293      	cmp	r3, r2
   173bc:	d104      	bne.n	173c8 <mp_obj_is_subclass+0x2c>
        len = 1;
   173be:	2301      	movs	r3, #1
   173c0:	613b      	str	r3, [r7, #16]
        items = &classinfo;
   173c2:	463b      	mov	r3, r7
   173c4:	60fb      	str	r3, [r7, #12]
   173c6:	e017      	b.n	173f8 <mp_obj_is_subclass+0x5c>
    } else if (MP_OBJ_IS_TYPE(classinfo, &mp_type_tuple)) {
   173c8:	683b      	ldr	r3, [r7, #0]
   173ca:	4618      	mov	r0, r3
   173cc:	f7fe fde6 	bl	15f9c <MP_OBJ_IS_OBJ>
   173d0:	4603      	mov	r3, r0
   173d2:	2b00      	cmp	r3, #0
   173d4:	d00d      	beq.n	173f2 <mp_obj_is_subclass+0x56>
   173d6:	683b      	ldr	r3, [r7, #0]
   173d8:	681b      	ldr	r3, [r3, #0]
   173da:	4a1b      	ldr	r2, [pc, #108]	; (17448 <mp_obj_is_subclass+0xac>)
   173dc:	4293      	cmp	r3, r2
   173de:	d108      	bne.n	173f2 <mp_obj_is_subclass+0x56>
        mp_obj_tuple_get(classinfo, &len, &items);
   173e0:	683b      	ldr	r3, [r7, #0]
   173e2:	f107 020c 	add.w	r2, r7, #12
   173e6:	f107 0110 	add.w	r1, r7, #16
   173ea:	4618      	mov	r0, r3
   173ec:	f7fe fd38 	bl	15e60 <mp_obj_tuple_get>
   173f0:	e002      	b.n	173f8 <mp_obj_is_subclass+0x5c>
    } else {
        mp_raise_TypeError("issubclass() arg 2 must be a class or a tuple of classes");
   173f2:	4816      	ldr	r0, [pc, #88]	; (1744c <mp_obj_is_subclass+0xb0>)
   173f4:	f7f5 fdf4 	bl	cfe0 <mp_raise_TypeError>
    }

    for (size_t i = 0; i < len; i++) {
   173f8:	2300      	movs	r3, #0
   173fa:	617b      	str	r3, [r7, #20]
   173fc:	e018      	b.n	17430 <mp_obj_is_subclass+0x94>
        // We explicitly check for 'object' here since no-one explicitly derives from it
        if (items[i] == MP_OBJ_FROM_PTR(&mp_type_object) || mp_obj_is_subclass_fast(object, items[i])) {
   173fe:	68fa      	ldr	r2, [r7, #12]
   17400:	697b      	ldr	r3, [r7, #20]
   17402:	009b      	lsls	r3, r3, #2
   17404:	4413      	add	r3, r2
   17406:	681b      	ldr	r3, [r3, #0]
   17408:	4a11      	ldr	r2, [pc, #68]	; (17450 <mp_obj_is_subclass+0xb4>)
   1740a:	4293      	cmp	r3, r2
   1740c:	d00b      	beq.n	17426 <mp_obj_is_subclass+0x8a>
   1740e:	68fa      	ldr	r2, [r7, #12]
   17410:	697b      	ldr	r3, [r7, #20]
   17412:	009b      	lsls	r3, r3, #2
   17414:	4413      	add	r3, r2
   17416:	681b      	ldr	r3, [r3, #0]
   17418:	4619      	mov	r1, r3
   1741a:	6878      	ldr	r0, [r7, #4]
   1741c:	f7ff ff62 	bl	172e4 <mp_obj_is_subclass_fast>
   17420:	4603      	mov	r3, r0
   17422:	2b00      	cmp	r3, #0
   17424:	d001      	beq.n	1742a <mp_obj_is_subclass+0x8e>
            return mp_const_true;
   17426:	4b0b      	ldr	r3, [pc, #44]	; (17454 <mp_obj_is_subclass+0xb8>)
   17428:	e007      	b.n	1743a <mp_obj_is_subclass+0x9e>
    for (size_t i = 0; i < len; i++) {
   1742a:	697b      	ldr	r3, [r7, #20]
   1742c:	3301      	adds	r3, #1
   1742e:	617b      	str	r3, [r7, #20]
   17430:	693b      	ldr	r3, [r7, #16]
   17432:	697a      	ldr	r2, [r7, #20]
   17434:	429a      	cmp	r2, r3
   17436:	d3e2      	bcc.n	173fe <mp_obj_is_subclass+0x62>
        }
    }
    return mp_const_false;
   17438:	4b07      	ldr	r3, [pc, #28]	; (17458 <mp_obj_is_subclass+0xbc>)
}
   1743a:	4618      	mov	r0, r3
   1743c:	3718      	adds	r7, #24
   1743e:	46bd      	mov	sp, r7
   17440:	bd80      	pop	{r7, pc}
   17442:	bf00      	nop
   17444:	00022160 	.word	0x00022160
   17448:	00021e68 	.word	0x00021e68
   1744c:	000222bc 	.word	0x000222bc
   17450:	00021478 	.word	0x00021478
   17454:	0001fc44 	.word	0x0001fc44
   17458:	0001fc3c 	.word	0x0001fc3c

0001745c <mp_builtin_issubclass>:

STATIC mp_obj_t mp_builtin_issubclass(mp_obj_t object, mp_obj_t classinfo) {
   1745c:	b580      	push	{r7, lr}
   1745e:	b082      	sub	sp, #8
   17460:	af00      	add	r7, sp, #0
   17462:	6078      	str	r0, [r7, #4]
   17464:	6039      	str	r1, [r7, #0]
    if (!MP_OBJ_IS_TYPE(object, &mp_type_type)) {
   17466:	6878      	ldr	r0, [r7, #4]
   17468:	f7fe fd98 	bl	15f9c <MP_OBJ_IS_OBJ>
   1746c:	4603      	mov	r3, r0
   1746e:	f083 0301 	eor.w	r3, r3, #1
   17472:	b2db      	uxtb	r3, r3
   17474:	2b00      	cmp	r3, #0
   17476:	d104      	bne.n	17482 <mp_builtin_issubclass+0x26>
   17478:	687b      	ldr	r3, [r7, #4]
   1747a:	681b      	ldr	r3, [r3, #0]
   1747c:	4a07      	ldr	r2, [pc, #28]	; (1749c <mp_builtin_issubclass+0x40>)
   1747e:	4293      	cmp	r3, r2
   17480:	d002      	beq.n	17488 <mp_builtin_issubclass+0x2c>
        mp_raise_TypeError("issubclass() arg 1 must be a class");
   17482:	4807      	ldr	r0, [pc, #28]	; (174a0 <mp_builtin_issubclass+0x44>)
   17484:	f7f5 fdac 	bl	cfe0 <mp_raise_TypeError>
    }
    return mp_obj_is_subclass(object, classinfo);
   17488:	6839      	ldr	r1, [r7, #0]
   1748a:	6878      	ldr	r0, [r7, #4]
   1748c:	f7ff ff86 	bl	1739c <mp_obj_is_subclass>
   17490:	4603      	mov	r3, r0
}
   17492:	4618      	mov	r0, r3
   17494:	3708      	adds	r7, #8
   17496:	46bd      	mov	sp, r7
   17498:	bd80      	pop	{r7, pc}
   1749a:	bf00      	nop
   1749c:	00022160 	.word	0x00022160
   174a0:	000222f8 	.word	0x000222f8

000174a4 <mp_builtin_isinstance>:

MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_issubclass_obj, mp_builtin_issubclass);

STATIC mp_obj_t mp_builtin_isinstance(mp_obj_t object, mp_obj_t classinfo) {
   174a4:	b580      	push	{r7, lr}
   174a6:	b082      	sub	sp, #8
   174a8:	af00      	add	r7, sp, #0
   174aa:	6078      	str	r0, [r7, #4]
   174ac:	6039      	str	r1, [r7, #0]
    return mp_obj_is_subclass(MP_OBJ_FROM_PTR(mp_obj_get_type(object)), classinfo);
   174ae:	6878      	ldr	r0, [r7, #4]
   174b0:	f7f6 f9b0 	bl	d814 <mp_obj_get_type>
   174b4:	4603      	mov	r3, r0
   174b6:	6839      	ldr	r1, [r7, #0]
   174b8:	4618      	mov	r0, r3
   174ba:	f7ff ff6f 	bl	1739c <mp_obj_is_subclass>
   174be:	4603      	mov	r3, r0
}
   174c0:	4618      	mov	r0, r3
   174c2:	3708      	adds	r7, #8
   174c4:	46bd      	mov	sp, r7
   174c6:	bd80      	pop	{r7, pc}

000174c8 <mp_instance_cast_to_native_base>:

MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_isinstance_obj, mp_builtin_isinstance);

mp_obj_t mp_instance_cast_to_native_base(mp_const_obj_t self_in, mp_const_obj_t native_type) {
   174c8:	b580      	push	{r7, lr}
   174ca:	b084      	sub	sp, #16
   174cc:	af00      	add	r7, sp, #0
   174ce:	6078      	str	r0, [r7, #4]
   174d0:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *self_type = mp_obj_get_type(self_in);
   174d2:	6878      	ldr	r0, [r7, #4]
   174d4:	f7f6 f99e 	bl	d814 <mp_obj_get_type>
   174d8:	60f8      	str	r0, [r7, #12]
    if (!mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(self_type), native_type)) {
   174da:	6839      	ldr	r1, [r7, #0]
   174dc:	68f8      	ldr	r0, [r7, #12]
   174de:	f7ff ff01 	bl	172e4 <mp_obj_is_subclass_fast>
   174e2:	4603      	mov	r3, r0
   174e4:	f083 0301 	eor.w	r3, r3, #1
   174e8:	b2db      	uxtb	r3, r3
   174ea:	2b00      	cmp	r3, #0
   174ec:	d001      	beq.n	174f2 <mp_instance_cast_to_native_base+0x2a>
        return MP_OBJ_NULL;
   174ee:	2300      	movs	r3, #0
   174f0:	e003      	b.n	174fa <mp_instance_cast_to_native_base+0x32>
    }
    mp_obj_instance_t *self = (mp_obj_instance_t*)MP_OBJ_TO_PTR(self_in);
   174f2:	687b      	ldr	r3, [r7, #4]
   174f4:	60bb      	str	r3, [r7, #8]
    return self->subobj[0];
   174f6:	68bb      	ldr	r3, [r7, #8]
   174f8:	691b      	ldr	r3, [r3, #16]
}
   174fa:	4618      	mov	r0, r3
   174fc:	3710      	adds	r7, #16
   174fe:	46bd      	mov	sp, r7
   17500:	bd80      	pop	{r7, pc}
   17502:	bf00      	nop

00017504 <static_class_method_make_new>:

/******************************************************************************/
// staticmethod and classmethod types (probably should go in a different file)

STATIC mp_obj_t static_class_method_make_new(const mp_obj_type_t *self, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   17504:	b580      	push	{r7, lr}
   17506:	b088      	sub	sp, #32
   17508:	af02      	add	r7, sp, #8
   1750a:	60f8      	str	r0, [r7, #12]
   1750c:	60b9      	str	r1, [r7, #8]
   1750e:	607a      	str	r2, [r7, #4]
   17510:	603b      	str	r3, [r7, #0]
    assert(self == &mp_type_staticmethod || self == &mp_type_classmethod);
   17512:	68fb      	ldr	r3, [r7, #12]
   17514:	4a12      	ldr	r2, [pc, #72]	; (17560 <static_class_method_make_new+0x5c>)
   17516:	4293      	cmp	r3, r2
   17518:	d00a      	beq.n	17530 <static_class_method_make_new+0x2c>
   1751a:	68fb      	ldr	r3, [r7, #12]
   1751c:	4a11      	ldr	r2, [pc, #68]	; (17564 <static_class_method_make_new+0x60>)
   1751e:	4293      	cmp	r3, r2
   17520:	d006      	beq.n	17530 <static_class_method_make_new+0x2c>
   17522:	4b11      	ldr	r3, [pc, #68]	; (17568 <static_class_method_make_new+0x64>)
   17524:	4a11      	ldr	r2, [pc, #68]	; (1756c <static_class_method_make_new+0x68>)
   17526:	f240 5112 	movw	r1, #1298	; 0x512
   1752a:	4811      	ldr	r0, [pc, #68]	; (17570 <static_class_method_make_new+0x6c>)
   1752c:	f003 ff1e 	bl	1b36c <__assert_func>

    mp_arg_check_num(n_args, n_kw, 1, 1, false);
   17530:	2300      	movs	r3, #0
   17532:	9300      	str	r3, [sp, #0]
   17534:	2301      	movs	r3, #1
   17536:	2201      	movs	r2, #1
   17538:	6879      	ldr	r1, [r7, #4]
   1753a:	68b8      	ldr	r0, [r7, #8]
   1753c:	f7f5 fd76 	bl	d02c <mp_arg_check_num>

    mp_obj_static_class_method_t *o = m_new_obj(mp_obj_static_class_method_t);
   17540:	2008      	movs	r0, #8
   17542:	f7e8 feeb 	bl	31c <m_malloc>
   17546:	6178      	str	r0, [r7, #20]
    *o = (mp_obj_static_class_method_t){{self}, args[0]};
   17548:	683b      	ldr	r3, [r7, #0]
   1754a:	681a      	ldr	r2, [r3, #0]
   1754c:	697b      	ldr	r3, [r7, #20]
   1754e:	68f9      	ldr	r1, [r7, #12]
   17550:	6019      	str	r1, [r3, #0]
   17552:	697b      	ldr	r3, [r7, #20]
   17554:	605a      	str	r2, [r3, #4]
    return MP_OBJ_FROM_PTR(o);
   17556:	697b      	ldr	r3, [r7, #20]
}
   17558:	4618      	mov	r0, r3
   1755a:	3718      	adds	r7, #24
   1755c:	46bd      	mov	sp, r7
   1755e:	bd80      	pop	{r7, pc}
   17560:	0002236c 	.word	0x0002236c
   17564:	000223a8 	.word	0x000223a8
   17568:	0002232c 	.word	0x0002232c
   1756c:	00022478 	.word	0x00022478
   17570:	00021f50 	.word	0x00021f50

00017574 <MP_OBJ_IS_OBJ>:
   17574:	b480      	push	{r7}
   17576:	b083      	sub	sp, #12
   17578:	af00      	add	r7, sp, #0
   1757a:	6078      	str	r0, [r7, #4]
   1757c:	687b      	ldr	r3, [r7, #4]
   1757e:	f003 0303 	and.w	r3, r3, #3
   17582:	2b00      	cmp	r3, #0
   17584:	bf0c      	ite	eq
   17586:	2301      	moveq	r3, #1
   17588:	2300      	movne	r3, #0
   1758a:	b2db      	uxtb	r3, r3
   1758c:	4618      	mov	r0, r3
   1758e:	370c      	adds	r7, #12
   17590:	46bd      	mov	sp, r7
   17592:	f85d 7b04 	ldr.w	r7, [sp], #4
   17596:	4770      	bx	lr

00017598 <zip_make_new>:
    mp_obj_base_t base;
    size_t n_iters;
    mp_obj_t iters[];
} mp_obj_zip_t;

STATIC mp_obj_t zip_make_new(const mp_obj_type_t *type, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   17598:	b580      	push	{r7, lr}
   1759a:	b088      	sub	sp, #32
   1759c:	af02      	add	r7, sp, #8
   1759e:	60f8      	str	r0, [r7, #12]
   175a0:	60b9      	str	r1, [r7, #8]
   175a2:	607a      	str	r2, [r7, #4]
   175a4:	603b      	str	r3, [r7, #0]
    mp_arg_check_num(n_args, n_kw, 0, MP_OBJ_FUN_ARGS_MAX, false);
   175a6:	2300      	movs	r3, #0
   175a8:	9300      	str	r3, [sp, #0]
   175aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   175ae:	2200      	movs	r2, #0
   175b0:	6879      	ldr	r1, [r7, #4]
   175b2:	68b8      	ldr	r0, [r7, #8]
   175b4:	f7f5 fd3a 	bl	d02c <mp_arg_check_num>

    mp_obj_zip_t *o = m_new_obj_var(mp_obj_zip_t, mp_obj_t, n_args);
   175b8:	68bb      	ldr	r3, [r7, #8]
   175ba:	3302      	adds	r3, #2
   175bc:	009b      	lsls	r3, r3, #2
   175be:	4618      	mov	r0, r3
   175c0:	f7e8 feac 	bl	31c <m_malloc>
   175c4:	6138      	str	r0, [r7, #16]
    o->base.type = type;
   175c6:	693b      	ldr	r3, [r7, #16]
   175c8:	68fa      	ldr	r2, [r7, #12]
   175ca:	601a      	str	r2, [r3, #0]
    o->n_iters = n_args;
   175cc:	693b      	ldr	r3, [r7, #16]
   175ce:	68ba      	ldr	r2, [r7, #8]
   175d0:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < n_args; i++) {
   175d2:	2300      	movs	r3, #0
   175d4:	617b      	str	r3, [r7, #20]
   175d6:	e011      	b.n	175fc <zip_make_new+0x64>
        o->iters[i] = mp_getiter(args[i], NULL);
   175d8:	697b      	ldr	r3, [r7, #20]
   175da:	009b      	lsls	r3, r3, #2
   175dc:	683a      	ldr	r2, [r7, #0]
   175de:	4413      	add	r3, r2
   175e0:	681b      	ldr	r3, [r3, #0]
   175e2:	2100      	movs	r1, #0
   175e4:	4618      	mov	r0, r3
   175e6:	f7f5 f9ab 	bl	c940 <mp_getiter>
   175ea:	4601      	mov	r1, r0
   175ec:	693b      	ldr	r3, [r7, #16]
   175ee:	697a      	ldr	r2, [r7, #20]
   175f0:	3202      	adds	r2, #2
   175f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < n_args; i++) {
   175f6:	697b      	ldr	r3, [r7, #20]
   175f8:	3301      	adds	r3, #1
   175fa:	617b      	str	r3, [r7, #20]
   175fc:	697a      	ldr	r2, [r7, #20]
   175fe:	68bb      	ldr	r3, [r7, #8]
   17600:	429a      	cmp	r2, r3
   17602:	d3e9      	bcc.n	175d8 <zip_make_new+0x40>
    }
    return MP_OBJ_FROM_PTR(o);
   17604:	693b      	ldr	r3, [r7, #16]
}
   17606:	4618      	mov	r0, r3
   17608:	3718      	adds	r7, #24
   1760a:	46bd      	mov	sp, r7
   1760c:	bd80      	pop	{r7, pc}
   1760e:	bf00      	nop

00017610 <zip_iternext>:

STATIC mp_obj_t zip_iternext(mp_obj_t self_in) {
   17610:	b580      	push	{r7, lr}
   17612:	b086      	sub	sp, #24
   17614:	af00      	add	r7, sp, #0
   17616:	6078      	str	r0, [r7, #4]
    mp_check_self(MP_OBJ_IS_TYPE(self_in, &mp_type_zip));
   17618:	6878      	ldr	r0, [r7, #4]
   1761a:	f7ff ffab 	bl	17574 <MP_OBJ_IS_OBJ>
   1761e:	4603      	mov	r3, r0
   17620:	f083 0301 	eor.w	r3, r3, #1
   17624:	b2db      	uxtb	r3, r3
   17626:	2b00      	cmp	r3, #0
   17628:	d104      	bne.n	17634 <zip_iternext+0x24>
   1762a:	687b      	ldr	r3, [r7, #4]
   1762c:	681b      	ldr	r3, [r3, #0]
   1762e:	4a1f      	ldr	r2, [pc, #124]	; (176ac <zip_iternext+0x9c>)
   17630:	4293      	cmp	r3, r2
   17632:	d005      	beq.n	17640 <zip_iternext+0x30>
   17634:	4b1e      	ldr	r3, [pc, #120]	; (176b0 <zip_iternext+0xa0>)
   17636:	4a1f      	ldr	r2, [pc, #124]	; (176b4 <zip_iternext+0xa4>)
   17638:	2134      	movs	r1, #52	; 0x34
   1763a:	481f      	ldr	r0, [pc, #124]	; (176b8 <zip_iternext+0xa8>)
   1763c:	f003 fe96 	bl	1b36c <__assert_func>
    mp_obj_zip_t *self = MP_OBJ_TO_PTR(self_in);
   17640:	687b      	ldr	r3, [r7, #4]
   17642:	613b      	str	r3, [r7, #16]
    if (self->n_iters == 0) {
   17644:	693b      	ldr	r3, [r7, #16]
   17646:	685b      	ldr	r3, [r3, #4]
   17648:	2b00      	cmp	r3, #0
   1764a:	d101      	bne.n	17650 <zip_iternext+0x40>
        return MP_OBJ_STOP_ITERATION;
   1764c:	2304      	movs	r3, #4
   1764e:	e029      	b.n	176a4 <zip_iternext+0x94>
    }
    mp_obj_tuple_t *tuple = MP_OBJ_TO_PTR(mp_obj_new_tuple(self->n_iters, NULL));
   17650:	693b      	ldr	r3, [r7, #16]
   17652:	685b      	ldr	r3, [r3, #4]
   17654:	2100      	movs	r1, #0
   17656:	4618      	mov	r0, r3
   17658:	f7fe fbca 	bl	15df0 <mp_obj_new_tuple>
   1765c:	60f8      	str	r0, [r7, #12]

    for (size_t i = 0; i < self->n_iters; i++) {
   1765e:	2300      	movs	r3, #0
   17660:	617b      	str	r3, [r7, #20]
   17662:	e019      	b.n	17698 <zip_iternext+0x88>
        mp_obj_t next = mp_iternext(self->iters[i]);
   17664:	693b      	ldr	r3, [r7, #16]
   17666:	697a      	ldr	r2, [r7, #20]
   17668:	3202      	adds	r2, #2
   1766a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1766e:	4618      	mov	r0, r3
   17670:	f7f5 f9e8 	bl	ca44 <mp_iternext>
   17674:	60b8      	str	r0, [r7, #8]
        if (next == MP_OBJ_STOP_ITERATION) {
   17676:	68bb      	ldr	r3, [r7, #8]
   17678:	2b04      	cmp	r3, #4
   1767a:	d104      	bne.n	17686 <zip_iternext+0x76>
            mp_obj_tuple_del(MP_OBJ_FROM_PTR(tuple));
   1767c:	68f8      	ldr	r0, [r7, #12]
   1767e:	f7fe fc21 	bl	15ec4 <mp_obj_tuple_del>
            return MP_OBJ_STOP_ITERATION;
   17682:	2304      	movs	r3, #4
   17684:	e00e      	b.n	176a4 <zip_iternext+0x94>
        }
        tuple->items[i] = next;
   17686:	68fb      	ldr	r3, [r7, #12]
   17688:	697a      	ldr	r2, [r7, #20]
   1768a:	3202      	adds	r2, #2
   1768c:	68b9      	ldr	r1, [r7, #8]
   1768e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < self->n_iters; i++) {
   17692:	697b      	ldr	r3, [r7, #20]
   17694:	3301      	adds	r3, #1
   17696:	617b      	str	r3, [r7, #20]
   17698:	693b      	ldr	r3, [r7, #16]
   1769a:	685a      	ldr	r2, [r3, #4]
   1769c:	697b      	ldr	r3, [r7, #20]
   1769e:	429a      	cmp	r2, r3
   176a0:	d8e0      	bhi.n	17664 <zip_iternext+0x54>
    }
    return MP_OBJ_FROM_PTR(tuple);
   176a2:	68fb      	ldr	r3, [r7, #12]
}
   176a4:	4618      	mov	r0, r3
   176a6:	3718      	adds	r7, #24
   176a8:	46bd      	mov	sp, r7
   176aa:	bd80      	pop	{r7, pc}
   176ac:	00022508 	.word	0x00022508
   176b0:	00022498 	.word	0x00022498
   176b4:	00022544 	.word	0x00022544
   176b8:	000224f4 	.word	0x000224f4

000176bc <op_getitem>:
 */

#include "py/obj.h"
#include "py/builtin.h"

STATIC mp_obj_t op_getitem(mp_obj_t self_in, mp_obj_t key_in) {
   176bc:	b580      	push	{r7, lr}
   176be:	b084      	sub	sp, #16
   176c0:	af00      	add	r7, sp, #0
   176c2:	6078      	str	r0, [r7, #4]
   176c4:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   176c6:	6878      	ldr	r0, [r7, #4]
   176c8:	f7f6 f8a4 	bl	d814 <mp_obj_get_type>
   176cc:	60f8      	str	r0, [r7, #12]
    return type->subscr(self_in, key_in, MP_OBJ_SENTINEL);
   176ce:	68fb      	ldr	r3, [r7, #12]
   176d0:	6a1b      	ldr	r3, [r3, #32]
   176d2:	2208      	movs	r2, #8
   176d4:	6839      	ldr	r1, [r7, #0]
   176d6:	6878      	ldr	r0, [r7, #4]
   176d8:	4798      	blx	r3
   176da:	4603      	mov	r3, r0
}
   176dc:	4618      	mov	r0, r3
   176de:	3710      	adds	r7, #16
   176e0:	46bd      	mov	sp, r7
   176e2:	bd80      	pop	{r7, pc}

000176e4 <op_setitem>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_op_getitem_obj, op_getitem);

STATIC mp_obj_t op_setitem(mp_obj_t self_in, mp_obj_t key_in, mp_obj_t value_in) {
   176e4:	b580      	push	{r7, lr}
   176e6:	b086      	sub	sp, #24
   176e8:	af00      	add	r7, sp, #0
   176ea:	60f8      	str	r0, [r7, #12]
   176ec:	60b9      	str	r1, [r7, #8]
   176ee:	607a      	str	r2, [r7, #4]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   176f0:	68f8      	ldr	r0, [r7, #12]
   176f2:	f7f6 f88f 	bl	d814 <mp_obj_get_type>
   176f6:	6178      	str	r0, [r7, #20]
    return type->subscr(self_in, key_in, value_in);
   176f8:	697b      	ldr	r3, [r7, #20]
   176fa:	6a1b      	ldr	r3, [r3, #32]
   176fc:	687a      	ldr	r2, [r7, #4]
   176fe:	68b9      	ldr	r1, [r7, #8]
   17700:	68f8      	ldr	r0, [r7, #12]
   17702:	4798      	blx	r3
   17704:	4603      	mov	r3, r0
}
   17706:	4618      	mov	r0, r3
   17708:	3718      	adds	r7, #24
   1770a:	46bd      	mov	sp, r7
   1770c:	bd80      	pop	{r7, pc}
   1770e:	bf00      	nop

00017710 <op_delitem>:
MP_DEFINE_CONST_FUN_OBJ_3(mp_op_setitem_obj, op_setitem);

STATIC mp_obj_t op_delitem(mp_obj_t self_in, mp_obj_t key_in) {
   17710:	b580      	push	{r7, lr}
   17712:	b084      	sub	sp, #16
   17714:	af00      	add	r7, sp, #0
   17716:	6078      	str	r0, [r7, #4]
   17718:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(self_in);
   1771a:	6878      	ldr	r0, [r7, #4]
   1771c:	f7f6 f87a 	bl	d814 <mp_obj_get_type>
   17720:	60f8      	str	r0, [r7, #12]
    return type->subscr(self_in, key_in, MP_OBJ_NULL);
   17722:	68fb      	ldr	r3, [r7, #12]
   17724:	6a1b      	ldr	r3, [r3, #32]
   17726:	2200      	movs	r2, #0
   17728:	6839      	ldr	r1, [r7, #0]
   1772a:	6878      	ldr	r0, [r7, #4]
   1772c:	4798      	blx	r3
   1772e:	4603      	mov	r3, r0
}
   17730:	4618      	mov	r0, r3
   17732:	3710      	adds	r7, #16
   17734:	46bd      	mov	sp, r7
   17736:	bd80      	pop	{r7, pc}

00017738 <op_contains>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_op_delitem_obj, op_delitem);

STATIC mp_obj_t op_contains(mp_obj_t lhs_in, mp_obj_t rhs_in) {
   17738:	b580      	push	{r7, lr}
   1773a:	b084      	sub	sp, #16
   1773c:	af00      	add	r7, sp, #0
   1773e:	6078      	str	r0, [r7, #4]
   17740:	6039      	str	r1, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(lhs_in);
   17742:	6878      	ldr	r0, [r7, #4]
   17744:	f7f6 f866 	bl	d814 <mp_obj_get_type>
   17748:	60f8      	str	r0, [r7, #12]
    return type->binary_op(MP_BINARY_OP_CONTAINS, lhs_in, rhs_in);
   1774a:	68fb      	ldr	r3, [r7, #12]
   1774c:	699b      	ldr	r3, [r3, #24]
   1774e:	683a      	ldr	r2, [r7, #0]
   17750:	6879      	ldr	r1, [r7, #4]
   17752:	2022      	movs	r0, #34	; 0x22
   17754:	4798      	blx	r3
   17756:	4603      	mov	r3, r0
}
   17758:	4618      	mov	r0, r3
   1775a:	3710      	adds	r7, #16
   1775c:	46bd      	mov	sp, r7
   1775e:	bd80      	pop	{r7, pc}

00017760 <mp_seq_multiply>:

#define SWAP(type, var1, var2) { type t = var2; var2 = var1; var1 = t; }

// Implements backend of sequence * integer operation. Assumes elements are
// memory-adjacent in sequence.
void mp_seq_multiply(const void *items, size_t item_sz, size_t len, size_t times, void *dest) {
   17760:	b580      	push	{r7, lr}
   17762:	b086      	sub	sp, #24
   17764:	af00      	add	r7, sp, #0
   17766:	60f8      	str	r0, [r7, #12]
   17768:	60b9      	str	r1, [r7, #8]
   1776a:	607a      	str	r2, [r7, #4]
   1776c:	603b      	str	r3, [r7, #0]
    for (size_t i = 0; i < times; i++) {
   1776e:	2300      	movs	r3, #0
   17770:	617b      	str	r3, [r7, #20]
   17772:	e010      	b.n	17796 <mp_seq_multiply+0x36>
        size_t copy_sz = item_sz * len;
   17774:	68bb      	ldr	r3, [r7, #8]
   17776:	687a      	ldr	r2, [r7, #4]
   17778:	fb02 f303 	mul.w	r3, r2, r3
   1777c:	613b      	str	r3, [r7, #16]
        memcpy(dest, items, copy_sz);
   1777e:	693a      	ldr	r2, [r7, #16]
   17780:	68f9      	ldr	r1, [r7, #12]
   17782:	6a38      	ldr	r0, [r7, #32]
   17784:	f004 fb9e 	bl	1bec4 <memcpy>
        dest = (char*)dest + copy_sz;
   17788:	6a3a      	ldr	r2, [r7, #32]
   1778a:	693b      	ldr	r3, [r7, #16]
   1778c:	4413      	add	r3, r2
   1778e:	623b      	str	r3, [r7, #32]
    for (size_t i = 0; i < times; i++) {
   17790:	697b      	ldr	r3, [r7, #20]
   17792:	3301      	adds	r3, #1
   17794:	617b      	str	r3, [r7, #20]
   17796:	697a      	ldr	r2, [r7, #20]
   17798:	683b      	ldr	r3, [r7, #0]
   1779a:	429a      	cmp	r2, r3
   1779c:	d3ea      	bcc.n	17774 <mp_seq_multiply+0x14>
    }
}
   1779e:	bf00      	nop
   177a0:	3718      	adds	r7, #24
   177a2:	46bd      	mov	sp, r7
   177a4:	bd80      	pop	{r7, pc}
   177a6:	bf00      	nop

000177a8 <mp_seq_extract_slice>:
    return indexes->step == 1;
}

#endif

mp_obj_t mp_seq_extract_slice(size_t len, const mp_obj_t *seq, mp_bound_slice_t *indexes) {
   177a8:	b580      	push	{r7, lr}
   177aa:	b088      	sub	sp, #32
   177ac:	af00      	add	r7, sp, #0
   177ae:	60f8      	str	r0, [r7, #12]
   177b0:	60b9      	str	r1, [r7, #8]
   177b2:	607a      	str	r2, [r7, #4]
    (void)len; // TODO can we remove len from the arg list?

    mp_int_t start = indexes->start, stop = indexes->stop;
   177b4:	687b      	ldr	r3, [r7, #4]
   177b6:	681b      	ldr	r3, [r3, #0]
   177b8:	61fb      	str	r3, [r7, #28]
   177ba:	687b      	ldr	r3, [r7, #4]
   177bc:	685b      	ldr	r3, [r3, #4]
   177be:	61bb      	str	r3, [r7, #24]
    mp_int_t step = indexes->step;
   177c0:	687b      	ldr	r3, [r7, #4]
   177c2:	689b      	ldr	r3, [r3, #8]
   177c4:	617b      	str	r3, [r7, #20]

    mp_obj_t res = mp_obj_new_list(0, NULL);
   177c6:	2100      	movs	r1, #0
   177c8:	2000      	movs	r0, #0
   177ca:	f7fa f869 	bl	118a0 <mp_obj_new_list>
   177ce:	6138      	str	r0, [r7, #16]

    if (step < 0) {
   177d0:	697b      	ldr	r3, [r7, #20]
   177d2:	2b00      	cmp	r3, #0
   177d4:	da1f      	bge.n	17816 <mp_seq_extract_slice+0x6e>
        while (start >= stop) {
   177d6:	e00c      	b.n	177f2 <mp_seq_extract_slice+0x4a>
            mp_obj_list_append(res, seq[start]);
   177d8:	69fb      	ldr	r3, [r7, #28]
   177da:	009b      	lsls	r3, r3, #2
   177dc:	68ba      	ldr	r2, [r7, #8]
   177de:	4413      	add	r3, r2
   177e0:	681b      	ldr	r3, [r3, #0]
   177e2:	4619      	mov	r1, r3
   177e4:	6938      	ldr	r0, [r7, #16]
   177e6:	f7f9 fbc9 	bl	10f7c <mp_obj_list_append>
            start += step;
   177ea:	69fa      	ldr	r2, [r7, #28]
   177ec:	697b      	ldr	r3, [r7, #20]
   177ee:	4413      	add	r3, r2
   177f0:	61fb      	str	r3, [r7, #28]
        while (start >= stop) {
   177f2:	69fa      	ldr	r2, [r7, #28]
   177f4:	69bb      	ldr	r3, [r7, #24]
   177f6:	429a      	cmp	r2, r3
   177f8:	daee      	bge.n	177d8 <mp_seq_extract_slice+0x30>
   177fa:	e010      	b.n	1781e <mp_seq_extract_slice+0x76>
        }
    } else {
        while (start < stop) {
            mp_obj_list_append(res, seq[start]);
   177fc:	69fb      	ldr	r3, [r7, #28]
   177fe:	009b      	lsls	r3, r3, #2
   17800:	68ba      	ldr	r2, [r7, #8]
   17802:	4413      	add	r3, r2
   17804:	681b      	ldr	r3, [r3, #0]
   17806:	4619      	mov	r1, r3
   17808:	6938      	ldr	r0, [r7, #16]
   1780a:	f7f9 fbb7 	bl	10f7c <mp_obj_list_append>
            start += step;
   1780e:	69fa      	ldr	r2, [r7, #28]
   17810:	697b      	ldr	r3, [r7, #20]
   17812:	4413      	add	r3, r2
   17814:	61fb      	str	r3, [r7, #28]
        while (start < stop) {
   17816:	69fa      	ldr	r2, [r7, #28]
   17818:	69bb      	ldr	r3, [r7, #24]
   1781a:	429a      	cmp	r2, r3
   1781c:	dbee      	blt.n	177fc <mp_seq_extract_slice+0x54>
        }
    }
    return res;
   1781e:	693b      	ldr	r3, [r7, #16]
}
   17820:	4618      	mov	r0, r3
   17822:	3720      	adds	r7, #32
   17824:	46bd      	mov	sp, r7
   17826:	bd80      	pop	{r7, pc}

00017828 <mp_seq_cmp_bytes>:

// Special-case comparison function for sequences of bytes
// Don't pass MP_BINARY_OP_NOT_EQUAL here
bool mp_seq_cmp_bytes(mp_uint_t op, const byte *data1, size_t len1, const byte *data2, size_t len2) {
   17828:	b580      	push	{r7, lr}
   1782a:	b088      	sub	sp, #32
   1782c:	af00      	add	r7, sp, #0
   1782e:	60f8      	str	r0, [r7, #12]
   17830:	60b9      	str	r1, [r7, #8]
   17832:	607a      	str	r2, [r7, #4]
   17834:	603b      	str	r3, [r7, #0]
    if (op == MP_BINARY_OP_EQUAL && len1 != len2) {
   17836:	68fb      	ldr	r3, [r7, #12]
   17838:	2b02      	cmp	r3, #2
   1783a:	d105      	bne.n	17848 <mp_seq_cmp_bytes+0x20>
   1783c:	687a      	ldr	r2, [r7, #4]
   1783e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17840:	429a      	cmp	r2, r3
   17842:	d001      	beq.n	17848 <mp_seq_cmp_bytes+0x20>
        return false;
   17844:	2300      	movs	r3, #0
   17846:	e049      	b.n	178dc <mp_seq_cmp_bytes+0xb4>
    }

    // Let's deal only with > & >=
    if (op == MP_BINARY_OP_LESS || op == MP_BINARY_OP_LESS_EQUAL) {
   17848:	68fb      	ldr	r3, [r7, #12]
   1784a:	2b00      	cmp	r3, #0
   1784c:	d002      	beq.n	17854 <mp_seq_cmp_bytes+0x2c>
   1784e:	68fb      	ldr	r3, [r7, #12]
   17850:	2b03      	cmp	r3, #3
   17852:	d113      	bne.n	1787c <mp_seq_cmp_bytes+0x54>
        SWAP(const byte*, data1, data2);
   17854:	683b      	ldr	r3, [r7, #0]
   17856:	61fb      	str	r3, [r7, #28]
   17858:	68bb      	ldr	r3, [r7, #8]
   1785a:	603b      	str	r3, [r7, #0]
   1785c:	69fb      	ldr	r3, [r7, #28]
   1785e:	60bb      	str	r3, [r7, #8]
        SWAP(size_t, len1, len2);
   17860:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17862:	61bb      	str	r3, [r7, #24]
   17864:	687b      	ldr	r3, [r7, #4]
   17866:	62bb      	str	r3, [r7, #40]	; 0x28
   17868:	69bb      	ldr	r3, [r7, #24]
   1786a:	607b      	str	r3, [r7, #4]
        if (op == MP_BINARY_OP_LESS) {
   1786c:	68fb      	ldr	r3, [r7, #12]
   1786e:	2b00      	cmp	r3, #0
   17870:	d102      	bne.n	17878 <mp_seq_cmp_bytes+0x50>
            op = MP_BINARY_OP_MORE;
   17872:	2301      	movs	r3, #1
   17874:	60fb      	str	r3, [r7, #12]
   17876:	e001      	b.n	1787c <mp_seq_cmp_bytes+0x54>
        } else {
            op = MP_BINARY_OP_MORE_EQUAL;
   17878:	2304      	movs	r3, #4
   1787a:	60fb      	str	r3, [r7, #12]
        }
    }
    size_t min_len = len1 < len2 ? len1 : len2;
   1787c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1787e:	687b      	ldr	r3, [r7, #4]
   17880:	4293      	cmp	r3, r2
   17882:	bf28      	it	cs
   17884:	4613      	movcs	r3, r2
   17886:	617b      	str	r3, [r7, #20]
    int res = memcmp(data1, data2, min_len);
   17888:	697a      	ldr	r2, [r7, #20]
   1788a:	6839      	ldr	r1, [r7, #0]
   1788c:	68b8      	ldr	r0, [r7, #8]
   1788e:	f004 fc01 	bl	1c094 <memcmp>
   17892:	6138      	str	r0, [r7, #16]
    if (op == MP_BINARY_OP_EQUAL) {
   17894:	68fb      	ldr	r3, [r7, #12]
   17896:	2b02      	cmp	r3, #2
   17898:	d106      	bne.n	178a8 <mp_seq_cmp_bytes+0x80>
        // If we are checking for equality, here're the answer
        return res == 0;
   1789a:	693b      	ldr	r3, [r7, #16]
   1789c:	2b00      	cmp	r3, #0
   1789e:	bf0c      	ite	eq
   178a0:	2301      	moveq	r3, #1
   178a2:	2300      	movne	r3, #0
   178a4:	b2db      	uxtb	r3, r3
   178a6:	e019      	b.n	178dc <mp_seq_cmp_bytes+0xb4>
    }
    if (res < 0) {
   178a8:	693b      	ldr	r3, [r7, #16]
   178aa:	2b00      	cmp	r3, #0
   178ac:	da01      	bge.n	178b2 <mp_seq_cmp_bytes+0x8a>
        return false;
   178ae:	2300      	movs	r3, #0
   178b0:	e014      	b.n	178dc <mp_seq_cmp_bytes+0xb4>
    }
    if (res > 0) {
   178b2:	693b      	ldr	r3, [r7, #16]
   178b4:	2b00      	cmp	r3, #0
   178b6:	dd01      	ble.n	178bc <mp_seq_cmp_bytes+0x94>
        return true;
   178b8:	2301      	movs	r3, #1
   178ba:	e00f      	b.n	178dc <mp_seq_cmp_bytes+0xb4>
    }

    // If we had tie in the last element...
    // ... and we have lists of different lengths...
    if (len1 != len2) {
   178bc:	687a      	ldr	r2, [r7, #4]
   178be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   178c0:	429a      	cmp	r2, r3
   178c2:	d005      	beq.n	178d0 <mp_seq_cmp_bytes+0xa8>
        if (len1 < len2) {
   178c4:	687a      	ldr	r2, [r7, #4]
   178c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   178c8:	429a      	cmp	r2, r3
   178ca:	d206      	bcs.n	178da <mp_seq_cmp_bytes+0xb2>
            // ... then longer list length wins (we deal only with >)
            return false;
   178cc:	2300      	movs	r3, #0
   178ce:	e005      	b.n	178dc <mp_seq_cmp_bytes+0xb4>
        }
    } else if (op == MP_BINARY_OP_MORE) {
   178d0:	68fb      	ldr	r3, [r7, #12]
   178d2:	2b01      	cmp	r3, #1
   178d4:	d101      	bne.n	178da <mp_seq_cmp_bytes+0xb2>
        // Otherwise, if we have strict relation, equality means failure
        return false;
   178d6:	2300      	movs	r3, #0
   178d8:	e000      	b.n	178dc <mp_seq_cmp_bytes+0xb4>
    }
    return true;
   178da:	2301      	movs	r3, #1
}
   178dc:	4618      	mov	r0, r3
   178de:	3720      	adds	r7, #32
   178e0:	46bd      	mov	sp, r7
   178e2:	bd80      	pop	{r7, pc}

000178e4 <mp_seq_cmp_objs>:

// Special-case comparison function for sequences of mp_obj_t
// Don't pass MP_BINARY_OP_NOT_EQUAL here
bool mp_seq_cmp_objs(mp_uint_t op, const mp_obj_t *items1, size_t len1, const mp_obj_t *items2, size_t len2) {
   178e4:	b580      	push	{r7, lr}
   178e6:	b088      	sub	sp, #32
   178e8:	af00      	add	r7, sp, #0
   178ea:	60f8      	str	r0, [r7, #12]
   178ec:	60b9      	str	r1, [r7, #8]
   178ee:	607a      	str	r2, [r7, #4]
   178f0:	603b      	str	r3, [r7, #0]
    if (op == MP_BINARY_OP_EQUAL && len1 != len2) {
   178f2:	68fb      	ldr	r3, [r7, #12]
   178f4:	2b02      	cmp	r3, #2
   178f6:	d105      	bne.n	17904 <mp_seq_cmp_objs+0x20>
   178f8:	687a      	ldr	r2, [r7, #4]
   178fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   178fc:	429a      	cmp	r2, r3
   178fe:	d001      	beq.n	17904 <mp_seq_cmp_objs+0x20>
        return false;
   17900:	2300      	movs	r3, #0
   17902:	e065      	b.n	179d0 <mp_seq_cmp_objs+0xec>
    }

    // Let's deal only with > & >=
    if (op == MP_BINARY_OP_LESS || op == MP_BINARY_OP_LESS_EQUAL) {
   17904:	68fb      	ldr	r3, [r7, #12]
   17906:	2b00      	cmp	r3, #0
   17908:	d002      	beq.n	17910 <mp_seq_cmp_objs+0x2c>
   1790a:	68fb      	ldr	r3, [r7, #12]
   1790c:	2b03      	cmp	r3, #3
   1790e:	d113      	bne.n	17938 <mp_seq_cmp_objs+0x54>
        SWAP(const mp_obj_t *, items1, items2);
   17910:	683b      	ldr	r3, [r7, #0]
   17912:	61bb      	str	r3, [r7, #24]
   17914:	68bb      	ldr	r3, [r7, #8]
   17916:	603b      	str	r3, [r7, #0]
   17918:	69bb      	ldr	r3, [r7, #24]
   1791a:	60bb      	str	r3, [r7, #8]
        SWAP(size_t, len1, len2);
   1791c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1791e:	617b      	str	r3, [r7, #20]
   17920:	687b      	ldr	r3, [r7, #4]
   17922:	62bb      	str	r3, [r7, #40]	; 0x28
   17924:	697b      	ldr	r3, [r7, #20]
   17926:	607b      	str	r3, [r7, #4]
        if (op == MP_BINARY_OP_LESS) {
   17928:	68fb      	ldr	r3, [r7, #12]
   1792a:	2b00      	cmp	r3, #0
   1792c:	d102      	bne.n	17934 <mp_seq_cmp_objs+0x50>
            op = MP_BINARY_OP_MORE;
   1792e:	2301      	movs	r3, #1
   17930:	60fb      	str	r3, [r7, #12]
   17932:	e001      	b.n	17938 <mp_seq_cmp_objs+0x54>
        } else {
            op = MP_BINARY_OP_MORE_EQUAL;
   17934:	2304      	movs	r3, #4
   17936:	60fb      	str	r3, [r7, #12]
        }
    }

    size_t len = len1 < len2 ? len1 : len2;
   17938:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1793a:	687b      	ldr	r3, [r7, #4]
   1793c:	4293      	cmp	r3, r2
   1793e:	bf28      	it	cs
   17940:	4613      	movcs	r3, r2
   17942:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < len; i++) {
   17944:	2300      	movs	r3, #0
   17946:	61fb      	str	r3, [r7, #28]
   17948:	e02e      	b.n	179a8 <mp_seq_cmp_objs+0xc4>
        // If current elements equal, can't decide anything - go on
        if (mp_obj_equal(items1[i], items2[i])) {
   1794a:	69fb      	ldr	r3, [r7, #28]
   1794c:	009b      	lsls	r3, r3, #2
   1794e:	68ba      	ldr	r2, [r7, #8]
   17950:	4413      	add	r3, r2
   17952:	6818      	ldr	r0, [r3, #0]
   17954:	69fb      	ldr	r3, [r7, #28]
   17956:	009b      	lsls	r3, r3, #2
   17958:	683a      	ldr	r2, [r7, #0]
   1795a:	4413      	add	r3, r2
   1795c:	681b      	ldr	r3, [r3, #0]
   1795e:	4619      	mov	r1, r3
   17960:	f7f6 f8ac 	bl	dabc <mp_obj_equal>
   17964:	4603      	mov	r3, r0
   17966:	2b00      	cmp	r3, #0
   17968:	d003      	beq.n	17972 <mp_seq_cmp_objs+0x8e>
    for (size_t i = 0; i < len; i++) {
   1796a:	69fb      	ldr	r3, [r7, #28]
   1796c:	3301      	adds	r3, #1
   1796e:	61fb      	str	r3, [r7, #28]
   17970:	e01a      	b.n	179a8 <mp_seq_cmp_objs+0xc4>
            continue;
        }

        // Othewise, if they are not equal, we can have final decision based on them
        if (op == MP_BINARY_OP_EQUAL) {
   17972:	68fb      	ldr	r3, [r7, #12]
   17974:	2b02      	cmp	r3, #2
   17976:	d101      	bne.n	1797c <mp_seq_cmp_objs+0x98>
            // In particular, if we are checking for equality, here're the answer
            return false;
   17978:	2300      	movs	r3, #0
   1797a:	e029      	b.n	179d0 <mp_seq_cmp_objs+0xec>
        }

        // Otherwise, application of relation op gives the answer
        return (mp_binary_op(op, items1[i], items2[i]) == mp_const_true);
   1797c:	69fb      	ldr	r3, [r7, #28]
   1797e:	009b      	lsls	r3, r3, #2
   17980:	68ba      	ldr	r2, [r7, #8]
   17982:	4413      	add	r3, r2
   17984:	6819      	ldr	r1, [r3, #0]
   17986:	69fb      	ldr	r3, [r7, #28]
   17988:	009b      	lsls	r3, r3, #2
   1798a:	683a      	ldr	r2, [r7, #0]
   1798c:	4413      	add	r3, r2
   1798e:	681b      	ldr	r3, [r3, #0]
   17990:	461a      	mov	r2, r3
   17992:	68f8      	ldr	r0, [r7, #12]
   17994:	f7f3 ffcc 	bl	b930 <mp_binary_op>
   17998:	4602      	mov	r2, r0
   1799a:	4b0f      	ldr	r3, [pc, #60]	; (179d8 <mp_seq_cmp_objs+0xf4>)
   1799c:	429a      	cmp	r2, r3
   1799e:	bf0c      	ite	eq
   179a0:	2301      	moveq	r3, #1
   179a2:	2300      	movne	r3, #0
   179a4:	b2db      	uxtb	r3, r3
   179a6:	e013      	b.n	179d0 <mp_seq_cmp_objs+0xec>
    for (size_t i = 0; i < len; i++) {
   179a8:	69fa      	ldr	r2, [r7, #28]
   179aa:	693b      	ldr	r3, [r7, #16]
   179ac:	429a      	cmp	r2, r3
   179ae:	d3cc      	bcc.n	1794a <mp_seq_cmp_objs+0x66>
    }

    // If we had tie in the last element...
    // ... and we have lists of different lengths...
    if (len1 != len2) {
   179b0:	687a      	ldr	r2, [r7, #4]
   179b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   179b4:	429a      	cmp	r2, r3
   179b6:	d005      	beq.n	179c4 <mp_seq_cmp_objs+0xe0>
        if (len1 < len2) {
   179b8:	687a      	ldr	r2, [r7, #4]
   179ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   179bc:	429a      	cmp	r2, r3
   179be:	d206      	bcs.n	179ce <mp_seq_cmp_objs+0xea>
            // ... then longer list length wins (we deal only with >)
            return false;
   179c0:	2300      	movs	r3, #0
   179c2:	e005      	b.n	179d0 <mp_seq_cmp_objs+0xec>
        }
    } else if (op == MP_BINARY_OP_MORE) {
   179c4:	68fb      	ldr	r3, [r7, #12]
   179c6:	2b01      	cmp	r3, #1
   179c8:	d101      	bne.n	179ce <mp_seq_cmp_objs+0xea>
        // Otherwise, if we have strict relation, sequence equality means failure
        return false;
   179ca:	2300      	movs	r3, #0
   179cc:	e000      	b.n	179d0 <mp_seq_cmp_objs+0xec>
    }

    return true;
   179ce:	2301      	movs	r3, #1
}
   179d0:	4618      	mov	r0, r3
   179d2:	3720      	adds	r7, #32
   179d4:	46bd      	mov	sp, r7
   179d6:	bd80      	pop	{r7, pc}
   179d8:	0001fc44 	.word	0x0001fc44

000179dc <mp_seq_index_obj>:

// Special-case of index() which searches for mp_obj_t
mp_obj_t mp_seq_index_obj(const mp_obj_t *items, size_t len, size_t n_args, const mp_obj_t *args) {
   179dc:	b580      	push	{r7, lr}
   179de:	b08a      	sub	sp, #40	; 0x28
   179e0:	af00      	add	r7, sp, #0
   179e2:	60f8      	str	r0, [r7, #12]
   179e4:	60b9      	str	r1, [r7, #8]
   179e6:	607a      	str	r2, [r7, #4]
   179e8:	603b      	str	r3, [r7, #0]
    mp_obj_type_t *type = mp_obj_get_type(args[0]);
   179ea:	683b      	ldr	r3, [r7, #0]
   179ec:	681b      	ldr	r3, [r3, #0]
   179ee:	4618      	mov	r0, r3
   179f0:	f7f5 ff10 	bl	d814 <mp_obj_get_type>
   179f4:	61b8      	str	r0, [r7, #24]
    mp_obj_t value = args[1];
   179f6:	683b      	ldr	r3, [r7, #0]
   179f8:	685b      	ldr	r3, [r3, #4]
   179fa:	617b      	str	r3, [r7, #20]
    size_t start = 0;
   179fc:	2300      	movs	r3, #0
   179fe:	627b      	str	r3, [r7, #36]	; 0x24
    size_t stop = len;
   17a00:	68bb      	ldr	r3, [r7, #8]
   17a02:	623b      	str	r3, [r7, #32]

    if (n_args >= 3) {
   17a04:	687b      	ldr	r3, [r7, #4]
   17a06:	2b02      	cmp	r3, #2
   17a08:	d914      	bls.n	17a34 <mp_seq_index_obj+0x58>
        start = mp_get_index(type, len, args[2], true);
   17a0a:	683b      	ldr	r3, [r7, #0]
   17a0c:	3308      	adds	r3, #8
   17a0e:	681a      	ldr	r2, [r3, #0]
   17a10:	2301      	movs	r3, #1
   17a12:	68b9      	ldr	r1, [r7, #8]
   17a14:	69b8      	ldr	r0, [r7, #24]
   17a16:	f7f6 f9c7 	bl	dda8 <mp_get_index>
   17a1a:	6278      	str	r0, [r7, #36]	; 0x24
        if (n_args >= 4) {
   17a1c:	687b      	ldr	r3, [r7, #4]
   17a1e:	2b03      	cmp	r3, #3
   17a20:	d908      	bls.n	17a34 <mp_seq_index_obj+0x58>
            stop = mp_get_index(type, len, args[3], true);
   17a22:	683b      	ldr	r3, [r7, #0]
   17a24:	330c      	adds	r3, #12
   17a26:	681a      	ldr	r2, [r3, #0]
   17a28:	2301      	movs	r3, #1
   17a2a:	68b9      	ldr	r1, [r7, #8]
   17a2c:	69b8      	ldr	r0, [r7, #24]
   17a2e:	f7f6 f9bb 	bl	dda8 <mp_get_index>
   17a32:	6238      	str	r0, [r7, #32]
        }
    }

    for (size_t i = start; i < stop; i++) {
   17a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17a36:	61fb      	str	r3, [r7, #28]
   17a38:	e013      	b.n	17a62 <mp_seq_index_obj+0x86>
        if (mp_obj_equal(items[i], value)) {
   17a3a:	69fb      	ldr	r3, [r7, #28]
   17a3c:	009b      	lsls	r3, r3, #2
   17a3e:	68fa      	ldr	r2, [r7, #12]
   17a40:	4413      	add	r3, r2
   17a42:	681b      	ldr	r3, [r3, #0]
   17a44:	6979      	ldr	r1, [r7, #20]
   17a46:	4618      	mov	r0, r3
   17a48:	f7f6 f838 	bl	dabc <mp_obj_equal>
   17a4c:	4603      	mov	r3, r0
   17a4e:	2b00      	cmp	r3, #0
   17a50:	d004      	beq.n	17a5c <mp_seq_index_obj+0x80>
            // Common sense says this cannot overflow small int
            return MP_OBJ_NEW_SMALL_INT(i);
   17a52:	69fb      	ldr	r3, [r7, #28]
   17a54:	005b      	lsls	r3, r3, #1
   17a56:	f043 0301 	orr.w	r3, r3, #1
   17a5a:	e009      	b.n	17a70 <mp_seq_index_obj+0x94>
    for (size_t i = start; i < stop; i++) {
   17a5c:	69fb      	ldr	r3, [r7, #28]
   17a5e:	3301      	adds	r3, #1
   17a60:	61fb      	str	r3, [r7, #28]
   17a62:	69fa      	ldr	r2, [r7, #28]
   17a64:	6a3b      	ldr	r3, [r7, #32]
   17a66:	429a      	cmp	r2, r3
   17a68:	d3e7      	bcc.n	17a3a <mp_seq_index_obj+0x5e>
        }
    }

    mp_raise_ValueError("object not in sequence");
   17a6a:	4803      	ldr	r0, [pc, #12]	; (17a78 <mp_seq_index_obj+0x9c>)
   17a6c:	f7f5 faae 	bl	cfcc <mp_raise_ValueError>
}
   17a70:	4618      	mov	r0, r3
   17a72:	3728      	adds	r7, #40	; 0x28
   17a74:	46bd      	mov	sp, r7
   17a76:	bd80      	pop	{r7, pc}
   17a78:	00022574 	.word	0x00022574

00017a7c <mp_seq_count_obj>:

mp_obj_t mp_seq_count_obj(const mp_obj_t *items, size_t len, mp_obj_t value) {
   17a7c:	b580      	push	{r7, lr}
   17a7e:	b086      	sub	sp, #24
   17a80:	af00      	add	r7, sp, #0
   17a82:	60f8      	str	r0, [r7, #12]
   17a84:	60b9      	str	r1, [r7, #8]
   17a86:	607a      	str	r2, [r7, #4]
    size_t count = 0;
   17a88:	2300      	movs	r3, #0
   17a8a:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < len; i++) {
   17a8c:	2300      	movs	r3, #0
   17a8e:	613b      	str	r3, [r7, #16]
   17a90:	e011      	b.n	17ab6 <mp_seq_count_obj+0x3a>
         if (mp_obj_equal(items[i], value)) {
   17a92:	693b      	ldr	r3, [r7, #16]
   17a94:	009b      	lsls	r3, r3, #2
   17a96:	68fa      	ldr	r2, [r7, #12]
   17a98:	4413      	add	r3, r2
   17a9a:	681b      	ldr	r3, [r3, #0]
   17a9c:	6879      	ldr	r1, [r7, #4]
   17a9e:	4618      	mov	r0, r3
   17aa0:	f7f6 f80c 	bl	dabc <mp_obj_equal>
   17aa4:	4603      	mov	r3, r0
   17aa6:	2b00      	cmp	r3, #0
   17aa8:	d002      	beq.n	17ab0 <mp_seq_count_obj+0x34>
              count++;
   17aaa:	697b      	ldr	r3, [r7, #20]
   17aac:	3301      	adds	r3, #1
   17aae:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < len; i++) {
   17ab0:	693b      	ldr	r3, [r7, #16]
   17ab2:	3301      	adds	r3, #1
   17ab4:	613b      	str	r3, [r7, #16]
   17ab6:	693a      	ldr	r2, [r7, #16]
   17ab8:	68bb      	ldr	r3, [r7, #8]
   17aba:	429a      	cmp	r2, r3
   17abc:	d3e9      	bcc.n	17a92 <mp_seq_count_obj+0x16>
         }
    }

    // Common sense says this cannot overflow small int
    return MP_OBJ_NEW_SMALL_INT(count);
   17abe:	697b      	ldr	r3, [r7, #20]
   17ac0:	005b      	lsls	r3, r3, #1
   17ac2:	f043 0301 	orr.w	r3, r3, #1
}
   17ac6:	4618      	mov	r0, r3
   17ac8:	3718      	adds	r7, #24
   17aca:	46bd      	mov	sp, r7
   17acc:	bd80      	pop	{r7, pc}
   17ace:	bf00      	nop

00017ad0 <mp_binary_get_size>:

#ifndef alignof
#define alignof(type) offsetof(struct { char c; type t; }, t)
#endif

size_t mp_binary_get_size(char struct_type, char val_type, mp_uint_t *palign) {
   17ad0:	b580      	push	{r7, lr}
   17ad2:	b084      	sub	sp, #16
   17ad4:	af00      	add	r7, sp, #0
   17ad6:	4603      	mov	r3, r0
   17ad8:	603a      	str	r2, [r7, #0]
   17ada:	71fb      	strb	r3, [r7, #7]
   17adc:	460b      	mov	r3, r1
   17ade:	71bb      	strb	r3, [r7, #6]
    size_t size = 0;
   17ae0:	2300      	movs	r3, #0
   17ae2:	60fb      	str	r3, [r7, #12]
    int align = 1;
   17ae4:	2301      	movs	r3, #1
   17ae6:	60bb      	str	r3, [r7, #8]
    switch (struct_type) {
   17ae8:	79fb      	ldrb	r3, [r7, #7]
   17aea:	2b3e      	cmp	r3, #62	; 0x3e
   17aec:	d005      	beq.n	17afa <mp_binary_get_size+0x2a>
   17aee:	2b40      	cmp	r3, #64	; 0x40
   17af0:	f000 8085 	beq.w	17bfe <mp_binary_get_size+0x12e>
   17af4:	2b3c      	cmp	r3, #60	; 0x3c
   17af6:	f040 8196 	bne.w	17e26 <mp_binary_get_size+0x356>
        case '<': case '>':
            switch (val_type) {
   17afa:	79bb      	ldrb	r3, [r7, #6]
   17afc:	3b42      	subs	r3, #66	; 0x42
   17afe:	2b2f      	cmp	r3, #47	; 0x2f
   17b00:	f200 8190 	bhi.w	17e24 <mp_binary_get_size+0x354>
   17b04:	a201      	add	r2, pc, #4	; (adr r2, 17b0c <mp_binary_get_size+0x3c>)
   17b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17b0a:	bf00      	nop
   17b0c:	00017bcd 	.word	0x00017bcd
   17b10:	00017e25 	.word	0x00017e25
   17b14:	00017e25 	.word	0x00017e25
   17b18:	00017e25 	.word	0x00017e25
   17b1c:	00017e25 	.word	0x00017e25
   17b20:	00017e25 	.word	0x00017e25
   17b24:	00017bd3 	.word	0x00017bd3
   17b28:	00017bd9 	.word	0x00017bd9
   17b2c:	00017e25 	.word	0x00017e25
   17b30:	00017e25 	.word	0x00017e25
   17b34:	00017bdf 	.word	0x00017bdf
   17b38:	00017e25 	.word	0x00017e25
   17b3c:	00017e25 	.word	0x00017e25
   17b40:	00017beb 	.word	0x00017beb
   17b44:	00017beb 	.word	0x00017beb
   17b48:	00017be5 	.word	0x00017be5
   17b4c:	00017e25 	.word	0x00017e25
   17b50:	00017beb 	.word	0x00017beb
   17b54:	00017e25 	.word	0x00017e25
   17b58:	00017e25 	.word	0x00017e25
   17b5c:	00017e25 	.word	0x00017e25
   17b60:	00017e25 	.word	0x00017e25
   17b64:	00017e25 	.word	0x00017e25
   17b68:	00017e25 	.word	0x00017e25
   17b6c:	00017e25 	.word	0x00017e25
   17b70:	00017e25 	.word	0x00017e25
   17b74:	00017e25 	.word	0x00017e25
   17b78:	00017e25 	.word	0x00017e25
   17b7c:	00017e25 	.word	0x00017e25
   17b80:	00017e25 	.word	0x00017e25
   17b84:	00017e25 	.word	0x00017e25
   17b88:	00017e25 	.word	0x00017e25
   17b8c:	00017bcd 	.word	0x00017bcd
   17b90:	00017e25 	.word	0x00017e25
   17b94:	00017bf7 	.word	0x00017bf7
   17b98:	00017e25 	.word	0x00017e25
   17b9c:	00017bf1 	.word	0x00017bf1
   17ba0:	00017e25 	.word	0x00017e25
   17ba4:	00017bd3 	.word	0x00017bd3
   17ba8:	00017bd9 	.word	0x00017bd9
   17bac:	00017e25 	.word	0x00017e25
   17bb0:	00017e25 	.word	0x00017e25
   17bb4:	00017bdf 	.word	0x00017bdf
   17bb8:	00017e25 	.word	0x00017e25
   17bbc:	00017e25 	.word	0x00017e25
   17bc0:	00017e25 	.word	0x00017e25
   17bc4:	00017e25 	.word	0x00017e25
   17bc8:	00017be5 	.word	0x00017be5
                case 'b': case 'B':
                    size = 1; break;
   17bcc:	2301      	movs	r3, #1
   17bce:	60fb      	str	r3, [r7, #12]
   17bd0:	e014      	b.n	17bfc <mp_binary_get_size+0x12c>
                case 'h': case 'H':
                    size = 2; break;
   17bd2:	2302      	movs	r3, #2
   17bd4:	60fb      	str	r3, [r7, #12]
   17bd6:	e011      	b.n	17bfc <mp_binary_get_size+0x12c>
                case 'i': case 'I':
                    size = 4; break;
   17bd8:	2304      	movs	r3, #4
   17bda:	60fb      	str	r3, [r7, #12]
   17bdc:	e00e      	b.n	17bfc <mp_binary_get_size+0x12c>
                case 'l': case 'L':
                    size = 4; break;
   17bde:	2304      	movs	r3, #4
   17be0:	60fb      	str	r3, [r7, #12]
   17be2:	e00b      	b.n	17bfc <mp_binary_get_size+0x12c>
                case 'q': case 'Q':
                    size = 8; break;
   17be4:	2308      	movs	r3, #8
   17be6:	60fb      	str	r3, [r7, #12]
   17be8:	e008      	b.n	17bfc <mp_binary_get_size+0x12c>
                case 'P': case 'O': case 'S':
                    size = sizeof(void*); break;
   17bea:	2304      	movs	r3, #4
   17bec:	60fb      	str	r3, [r7, #12]
   17bee:	e005      	b.n	17bfc <mp_binary_get_size+0x12c>
                case 'f':
                    size = sizeof(float); break;
   17bf0:	2304      	movs	r3, #4
   17bf2:	60fb      	str	r3, [r7, #12]
   17bf4:	e002      	b.n	17bfc <mp_binary_get_size+0x12c>
                case 'd':
                    size = sizeof(double); break;
   17bf6:	2308      	movs	r3, #8
   17bf8:	60fb      	str	r3, [r7, #12]
   17bfa:	bf00      	nop
            }
            break;
   17bfc:	e112      	b.n	17e24 <mp_binary_get_size+0x354>
            // size, but that doesn't work for "bigger than int" types,
            // for example, long long may very well have long alignment
            // So, we introduce separate alignment handling, but having
            // formal support for that is different from actually supporting
            // particular (or any) ABI.
            switch (val_type) {
   17bfe:	79bb      	ldrb	r3, [r7, #6]
   17c00:	3b01      	subs	r3, #1
   17c02:	2b70      	cmp	r3, #112	; 0x70
   17c04:	f200 810f 	bhi.w	17e26 <mp_binary_get_size+0x356>
   17c08:	a201      	add	r2, pc, #4	; (adr r2, 17c10 <mp_binary_get_size+0x140>)
   17c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17c0e:	bf00      	nop
   17c10:	00017dd5 	.word	0x00017dd5
   17c14:	00017e27 	.word	0x00017e27
   17c18:	00017e27 	.word	0x00017e27
   17c1c:	00017e27 	.word	0x00017e27
   17c20:	00017e27 	.word	0x00017e27
   17c24:	00017e27 	.word	0x00017e27
   17c28:	00017e27 	.word	0x00017e27
   17c2c:	00017e27 	.word	0x00017e27
   17c30:	00017e27 	.word	0x00017e27
   17c34:	00017e27 	.word	0x00017e27
   17c38:	00017e27 	.word	0x00017e27
   17c3c:	00017e27 	.word	0x00017e27
   17c40:	00017e27 	.word	0x00017e27
   17c44:	00017e27 	.word	0x00017e27
   17c48:	00017e27 	.word	0x00017e27
   17c4c:	00017e27 	.word	0x00017e27
   17c50:	00017e27 	.word	0x00017e27
   17c54:	00017e27 	.word	0x00017e27
   17c58:	00017e27 	.word	0x00017e27
   17c5c:	00017e27 	.word	0x00017e27
   17c60:	00017e27 	.word	0x00017e27
   17c64:	00017e27 	.word	0x00017e27
   17c68:	00017e27 	.word	0x00017e27
   17c6c:	00017e27 	.word	0x00017e27
   17c70:	00017e27 	.word	0x00017e27
   17c74:	00017e27 	.word	0x00017e27
   17c78:	00017e27 	.word	0x00017e27
   17c7c:	00017e27 	.word	0x00017e27
   17c80:	00017e27 	.word	0x00017e27
   17c84:	00017e27 	.word	0x00017e27
   17c88:	00017e27 	.word	0x00017e27
   17c8c:	00017e27 	.word	0x00017e27
   17c90:	00017e27 	.word	0x00017e27
   17c94:	00017e27 	.word	0x00017e27
   17c98:	00017e27 	.word	0x00017e27
   17c9c:	00017e27 	.word	0x00017e27
   17ca0:	00017e27 	.word	0x00017e27
   17ca4:	00017e27 	.word	0x00017e27
   17ca8:	00017e27 	.word	0x00017e27
   17cac:	00017e27 	.word	0x00017e27
   17cb0:	00017e27 	.word	0x00017e27
   17cb4:	00017e27 	.word	0x00017e27
   17cb8:	00017e27 	.word	0x00017e27
   17cbc:	00017e27 	.word	0x00017e27
   17cc0:	00017e27 	.word	0x00017e27
   17cc4:	00017e27 	.word	0x00017e27
   17cc8:	00017e27 	.word	0x00017e27
   17ccc:	00017e27 	.word	0x00017e27
   17cd0:	00017e27 	.word	0x00017e27
   17cd4:	00017e27 	.word	0x00017e27
   17cd8:	00017e27 	.word	0x00017e27
   17cdc:	00017e27 	.word	0x00017e27
   17ce0:	00017e27 	.word	0x00017e27
   17ce4:	00017e27 	.word	0x00017e27
   17ce8:	00017e27 	.word	0x00017e27
   17cec:	00017e27 	.word	0x00017e27
   17cf0:	00017e27 	.word	0x00017e27
   17cf4:	00017e27 	.word	0x00017e27
   17cf8:	00017e27 	.word	0x00017e27
   17cfc:	00017e27 	.word	0x00017e27
   17d00:	00017e27 	.word	0x00017e27
   17d04:	00017e27 	.word	0x00017e27
   17d08:	00017e27 	.word	0x00017e27
   17d0c:	00017e27 	.word	0x00017e27
   17d10:	00017e27 	.word	0x00017e27
   17d14:	00017dd5 	.word	0x00017dd5
   17d18:	00017e27 	.word	0x00017e27
   17d1c:	00017e27 	.word	0x00017e27
   17d20:	00017e27 	.word	0x00017e27
   17d24:	00017e27 	.word	0x00017e27
   17d28:	00017e27 	.word	0x00017e27
   17d2c:	00017ddf 	.word	0x00017ddf
   17d30:	00017de9 	.word	0x00017de9
   17d34:	00017e27 	.word	0x00017e27
   17d38:	00017e27 	.word	0x00017e27
   17d3c:	00017df3 	.word	0x00017df3
   17d40:	00017e27 	.word	0x00017e27
   17d44:	00017e27 	.word	0x00017e27
   17d48:	00017e07 	.word	0x00017e07
   17d4c:	00017e07 	.word	0x00017e07
   17d50:	00017dfd 	.word	0x00017dfd
   17d54:	00017e27 	.word	0x00017e27
   17d58:	00017e07 	.word	0x00017e07
   17d5c:	00017e27 	.word	0x00017e27
   17d60:	00017e27 	.word	0x00017e27
   17d64:	00017e27 	.word	0x00017e27
   17d68:	00017e27 	.word	0x00017e27
   17d6c:	00017e27 	.word	0x00017e27
   17d70:	00017e27 	.word	0x00017e27
   17d74:	00017e27 	.word	0x00017e27
   17d78:	00017e27 	.word	0x00017e27
   17d7c:	00017e27 	.word	0x00017e27
   17d80:	00017e27 	.word	0x00017e27
   17d84:	00017e27 	.word	0x00017e27
   17d88:	00017e27 	.word	0x00017e27
   17d8c:	00017e27 	.word	0x00017e27
   17d90:	00017e27 	.word	0x00017e27
   17d94:	00017dd5 	.word	0x00017dd5
   17d98:	00017e27 	.word	0x00017e27
   17d9c:	00017e1b 	.word	0x00017e1b
   17da0:	00017e27 	.word	0x00017e27
   17da4:	00017e11 	.word	0x00017e11
   17da8:	00017e27 	.word	0x00017e27
   17dac:	00017ddf 	.word	0x00017ddf
   17db0:	00017de9 	.word	0x00017de9
   17db4:	00017e27 	.word	0x00017e27
   17db8:	00017e27 	.word	0x00017e27
   17dbc:	00017df3 	.word	0x00017df3
   17dc0:	00017e27 	.word	0x00017e27
   17dc4:	00017e27 	.word	0x00017e27
   17dc8:	00017e27 	.word	0x00017e27
   17dcc:	00017e27 	.word	0x00017e27
   17dd0:	00017dfd 	.word	0x00017dfd
                case BYTEARRAY_TYPECODE:
                case 'b': case 'B':
                    align = size = 1; break;
   17dd4:	2301      	movs	r3, #1
   17dd6:	60fb      	str	r3, [r7, #12]
   17dd8:	2301      	movs	r3, #1
   17dda:	60bb      	str	r3, [r7, #8]
   17ddc:	e023      	b.n	17e26 <mp_binary_get_size+0x356>
                case 'h': case 'H':
                    align = alignof(short);
   17dde:	2302      	movs	r3, #2
   17de0:	60bb      	str	r3, [r7, #8]
                    size = sizeof(short); break;
   17de2:	2302      	movs	r3, #2
   17de4:	60fb      	str	r3, [r7, #12]
   17de6:	e01e      	b.n	17e26 <mp_binary_get_size+0x356>
                case 'i': case 'I':
                    align = alignof(int);
   17de8:	2304      	movs	r3, #4
   17dea:	60bb      	str	r3, [r7, #8]
                    size = sizeof(int); break;
   17dec:	2304      	movs	r3, #4
   17dee:	60fb      	str	r3, [r7, #12]
   17df0:	e019      	b.n	17e26 <mp_binary_get_size+0x356>
                case 'l': case 'L':
                    align = alignof(long);
   17df2:	2304      	movs	r3, #4
   17df4:	60bb      	str	r3, [r7, #8]
                    size = sizeof(long); break;
   17df6:	2304      	movs	r3, #4
   17df8:	60fb      	str	r3, [r7, #12]
   17dfa:	e014      	b.n	17e26 <mp_binary_get_size+0x356>
                case 'q': case 'Q':
                    align = alignof(long long);
   17dfc:	2308      	movs	r3, #8
   17dfe:	60bb      	str	r3, [r7, #8]
                    size = sizeof(long long); break;
   17e00:	2308      	movs	r3, #8
   17e02:	60fb      	str	r3, [r7, #12]
   17e04:	e00f      	b.n	17e26 <mp_binary_get_size+0x356>
                case 'P': case 'O': case 'S':
                    align = alignof(void*);
   17e06:	2304      	movs	r3, #4
   17e08:	60bb      	str	r3, [r7, #8]
                    size = sizeof(void*); break;
   17e0a:	2304      	movs	r3, #4
   17e0c:	60fb      	str	r3, [r7, #12]
   17e0e:	e00a      	b.n	17e26 <mp_binary_get_size+0x356>
                case 'f':
                    align = alignof(float);
   17e10:	2304      	movs	r3, #4
   17e12:	60bb      	str	r3, [r7, #8]
                    size = sizeof(float); break;
   17e14:	2304      	movs	r3, #4
   17e16:	60fb      	str	r3, [r7, #12]
   17e18:	e005      	b.n	17e26 <mp_binary_get_size+0x356>
                case 'd':
                    align = alignof(double);
   17e1a:	2308      	movs	r3, #8
   17e1c:	60bb      	str	r3, [r7, #8]
                    size = sizeof(double); break;
   17e1e:	2308      	movs	r3, #8
   17e20:	60fb      	str	r3, [r7, #12]
   17e22:	e000      	b.n	17e26 <mp_binary_get_size+0x356>
            break;
   17e24:	bf00      	nop
            }
        }
    }

    if (size == 0) {
   17e26:	68fb      	ldr	r3, [r7, #12]
   17e28:	2b00      	cmp	r3, #0
   17e2a:	d102      	bne.n	17e32 <mp_binary_get_size+0x362>
        mp_raise_ValueError("bad typecode");
   17e2c:	4806      	ldr	r0, [pc, #24]	; (17e48 <mp_binary_get_size+0x378>)
   17e2e:	f7f5 f8cd 	bl	cfcc <mp_raise_ValueError>
    }

    if (palign != NULL) {
   17e32:	683b      	ldr	r3, [r7, #0]
   17e34:	2b00      	cmp	r3, #0
   17e36:	d002      	beq.n	17e3e <mp_binary_get_size+0x36e>
        *palign = align;
   17e38:	68ba      	ldr	r2, [r7, #8]
   17e3a:	683b      	ldr	r3, [r7, #0]
   17e3c:	601a      	str	r2, [r3, #0]
    }
    return size;
   17e3e:	68fb      	ldr	r3, [r7, #12]
}
   17e40:	4618      	mov	r0, r3
   17e42:	3710      	adds	r7, #16
   17e44:	46bd      	mov	sp, r7
   17e46:	bd80      	pop	{r7, pc}
   17e48:	0002258c 	.word	0x0002258c

00017e4c <mp_binary_get_val_array>:

mp_obj_t mp_binary_get_val_array(char typecode, void *p, mp_uint_t index) {
   17e4c:	b580      	push	{r7, lr}
   17e4e:	b086      	sub	sp, #24
   17e50:	af00      	add	r7, sp, #0
   17e52:	4603      	mov	r3, r0
   17e54:	60b9      	str	r1, [r7, #8]
   17e56:	607a      	str	r2, [r7, #4]
   17e58:	73fb      	strb	r3, [r7, #15]
    mp_int_t val = 0;
   17e5a:	2300      	movs	r3, #0
   17e5c:	617b      	str	r3, [r7, #20]
    switch (typecode) {
   17e5e:	7bfb      	ldrb	r3, [r7, #15]
   17e60:	3b01      	subs	r3, #1
   17e62:	2b6b      	cmp	r3, #107	; 0x6b
   17e64:	f200 8130 	bhi.w	180c8 <mp_binary_get_val_array+0x27c>
   17e68:	a201      	add	r2, pc, #4	; (adr r2, 17e70 <mp_binary_get_val_array+0x24>)
   17e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17e6e:	bf00      	nop
   17e70:	0001802f 	.word	0x0001802f
   17e74:	000180c9 	.word	0x000180c9
   17e78:	000180c9 	.word	0x000180c9
   17e7c:	000180c9 	.word	0x000180c9
   17e80:	000180c9 	.word	0x000180c9
   17e84:	000180c9 	.word	0x000180c9
   17e88:	000180c9 	.word	0x000180c9
   17e8c:	000180c9 	.word	0x000180c9
   17e90:	000180c9 	.word	0x000180c9
   17e94:	000180c9 	.word	0x000180c9
   17e98:	000180c9 	.word	0x000180c9
   17e9c:	000180c9 	.word	0x000180c9
   17ea0:	000180c9 	.word	0x000180c9
   17ea4:	000180c9 	.word	0x000180c9
   17ea8:	000180c9 	.word	0x000180c9
   17eac:	000180c9 	.word	0x000180c9
   17eb0:	000180c9 	.word	0x000180c9
   17eb4:	000180c9 	.word	0x000180c9
   17eb8:	000180c9 	.word	0x000180c9
   17ebc:	000180c9 	.word	0x000180c9
   17ec0:	000180c9 	.word	0x000180c9
   17ec4:	000180c9 	.word	0x000180c9
   17ec8:	000180c9 	.word	0x000180c9
   17ecc:	000180c9 	.word	0x000180c9
   17ed0:	000180c9 	.word	0x000180c9
   17ed4:	000180c9 	.word	0x000180c9
   17ed8:	000180c9 	.word	0x000180c9
   17edc:	000180c9 	.word	0x000180c9
   17ee0:	000180c9 	.word	0x000180c9
   17ee4:	000180c9 	.word	0x000180c9
   17ee8:	000180c9 	.word	0x000180c9
   17eec:	000180c9 	.word	0x000180c9
   17ef0:	000180c9 	.word	0x000180c9
   17ef4:	000180c9 	.word	0x000180c9
   17ef8:	000180c9 	.word	0x000180c9
   17efc:	000180c9 	.word	0x000180c9
   17f00:	000180c9 	.word	0x000180c9
   17f04:	000180c9 	.word	0x000180c9
   17f08:	000180c9 	.word	0x000180c9
   17f0c:	000180c9 	.word	0x000180c9
   17f10:	000180c9 	.word	0x000180c9
   17f14:	000180c9 	.word	0x000180c9
   17f18:	000180c9 	.word	0x000180c9
   17f1c:	000180c9 	.word	0x000180c9
   17f20:	000180c9 	.word	0x000180c9
   17f24:	000180c9 	.word	0x000180c9
   17f28:	000180c9 	.word	0x000180c9
   17f2c:	000180c9 	.word	0x000180c9
   17f30:	000180c9 	.word	0x000180c9
   17f34:	000180c9 	.word	0x000180c9
   17f38:	000180c9 	.word	0x000180c9
   17f3c:	000180c9 	.word	0x000180c9
   17f40:	000180c9 	.word	0x000180c9
   17f44:	000180c9 	.word	0x000180c9
   17f48:	000180c9 	.word	0x000180c9
   17f4c:	000180c9 	.word	0x000180c9
   17f50:	000180c9 	.word	0x000180c9
   17f54:	000180c9 	.word	0x000180c9
   17f58:	000180c9 	.word	0x000180c9
   17f5c:	000180c9 	.word	0x000180c9
   17f60:	000180c9 	.word	0x000180c9
   17f64:	000180c9 	.word	0x000180c9
   17f68:	000180c9 	.word	0x000180c9
   17f6c:	000180c9 	.word	0x000180c9
   17f70:	000180c9 	.word	0x000180c9
   17f74:	0001802f 	.word	0x0001802f
   17f78:	000180c9 	.word	0x000180c9
   17f7c:	000180c9 	.word	0x000180c9
   17f80:	000180c9 	.word	0x000180c9
   17f84:	000180c9 	.word	0x000180c9
   17f88:	000180c9 	.word	0x000180c9
   17f8c:	0001804b 	.word	0x0001804b
   17f90:	0001806d 	.word	0x0001806d
   17f94:	000180c9 	.word	0x000180c9
   17f98:	000180c9 	.word	0x000180c9
   17f9c:	00018095 	.word	0x00018095
   17fa0:	000180c9 	.word	0x000180c9
   17fa4:	000180c9 	.word	0x000180c9
   17fa8:	000180a9 	.word	0x000180a9
   17fac:	000180b5 	.word	0x000180b5
   17fb0:	000180c9 	.word	0x000180c9
   17fb4:	000180c9 	.word	0x000180c9
   17fb8:	000180c9 	.word	0x000180c9
   17fbc:	000180c9 	.word	0x000180c9
   17fc0:	000180c9 	.word	0x000180c9
   17fc4:	000180c9 	.word	0x000180c9
   17fc8:	000180c9 	.word	0x000180c9
   17fcc:	000180c9 	.word	0x000180c9
   17fd0:	000180c9 	.word	0x000180c9
   17fd4:	000180c9 	.word	0x000180c9
   17fd8:	000180c9 	.word	0x000180c9
   17fdc:	000180c9 	.word	0x000180c9
   17fe0:	000180c9 	.word	0x000180c9
   17fe4:	000180c9 	.word	0x000180c9
   17fe8:	000180c9 	.word	0x000180c9
   17fec:	000180c9 	.word	0x000180c9
   17ff0:	000180c9 	.word	0x000180c9
   17ff4:	00018021 	.word	0x00018021
   17ff8:	000180c9 	.word	0x000180c9
   17ffc:	000180c9 	.word	0x000180c9
   18000:	000180c9 	.word	0x000180c9
   18004:	000180c9 	.word	0x000180c9
   18008:	000180c9 	.word	0x000180c9
   1800c:	0001803b 	.word	0x0001803b
   18010:	00018059 	.word	0x00018059
   18014:	000180c9 	.word	0x000180c9
   18018:	000180c9 	.word	0x000180c9
   1801c:	00018081 	.word	0x00018081
        case 'b':
            val = ((signed char*)p)[index];
   18020:	68ba      	ldr	r2, [r7, #8]
   18022:	687b      	ldr	r3, [r7, #4]
   18024:	4413      	add	r3, r2
   18026:	f993 3000 	ldrsb.w	r3, [r3]
   1802a:	617b      	str	r3, [r7, #20]
            break;
   1802c:	e04c      	b.n	180c8 <mp_binary_get_val_array+0x27c>
        case BYTEARRAY_TYPECODE:
        case 'B':
            val = ((unsigned char*)p)[index];
   1802e:	68ba      	ldr	r2, [r7, #8]
   18030:	687b      	ldr	r3, [r7, #4]
   18032:	4413      	add	r3, r2
   18034:	781b      	ldrb	r3, [r3, #0]
   18036:	617b      	str	r3, [r7, #20]
            break;
   18038:	e046      	b.n	180c8 <mp_binary_get_val_array+0x27c>
        case 'h':
            val = ((short*)p)[index];
   1803a:	687b      	ldr	r3, [r7, #4]
   1803c:	005b      	lsls	r3, r3, #1
   1803e:	68ba      	ldr	r2, [r7, #8]
   18040:	4413      	add	r3, r2
   18042:	f9b3 3000 	ldrsh.w	r3, [r3]
   18046:	617b      	str	r3, [r7, #20]
            break;
   18048:	e03e      	b.n	180c8 <mp_binary_get_val_array+0x27c>
        case 'H':
            val = ((unsigned short*)p)[index];
   1804a:	687b      	ldr	r3, [r7, #4]
   1804c:	005b      	lsls	r3, r3, #1
   1804e:	68ba      	ldr	r2, [r7, #8]
   18050:	4413      	add	r3, r2
   18052:	881b      	ldrh	r3, [r3, #0]
   18054:	617b      	str	r3, [r7, #20]
            break;
   18056:	e037      	b.n	180c8 <mp_binary_get_val_array+0x27c>
        case 'i':
            return mp_obj_new_int(((int*)p)[index]);
   18058:	687b      	ldr	r3, [r7, #4]
   1805a:	009b      	lsls	r3, r3, #2
   1805c:	68ba      	ldr	r2, [r7, #8]
   1805e:	4413      	add	r3, r2
   18060:	681b      	ldr	r3, [r3, #0]
   18062:	4618      	mov	r0, r3
   18064:	f7f8 fc72 	bl	1094c <mp_obj_new_int>
   18068:	4603      	mov	r3, r0
   1806a:	e031      	b.n	180d0 <mp_binary_get_val_array+0x284>
        case 'I':
            return mp_obj_new_int_from_uint(((unsigned int*)p)[index]);
   1806c:	687b      	ldr	r3, [r7, #4]
   1806e:	009b      	lsls	r3, r3, #2
   18070:	68ba      	ldr	r2, [r7, #8]
   18072:	4413      	add	r3, r2
   18074:	681b      	ldr	r3, [r3, #0]
   18076:	4618      	mov	r0, r3
   18078:	f7f8 fc4e 	bl	10918 <mp_obj_new_int_from_uint>
   1807c:	4603      	mov	r3, r0
   1807e:	e027      	b.n	180d0 <mp_binary_get_val_array+0x284>
        case 'l':
            return mp_obj_new_int(((long*)p)[index]);
   18080:	687b      	ldr	r3, [r7, #4]
   18082:	009b      	lsls	r3, r3, #2
   18084:	68ba      	ldr	r2, [r7, #8]
   18086:	4413      	add	r3, r2
   18088:	681b      	ldr	r3, [r3, #0]
   1808a:	4618      	mov	r0, r3
   1808c:	f7f8 fc5e 	bl	1094c <mp_obj_new_int>
   18090:	4603      	mov	r3, r0
   18092:	e01d      	b.n	180d0 <mp_binary_get_val_array+0x284>
        case 'L':
            return mp_obj_new_int_from_uint(((unsigned long*)p)[index]);
   18094:	687b      	ldr	r3, [r7, #4]
   18096:	009b      	lsls	r3, r3, #2
   18098:	68ba      	ldr	r2, [r7, #8]
   1809a:	4413      	add	r3, r2
   1809c:	681b      	ldr	r3, [r3, #0]
   1809e:	4618      	mov	r0, r3
   180a0:	f7f8 fc3a 	bl	10918 <mp_obj_new_int_from_uint>
   180a4:	4603      	mov	r3, r0
   180a6:	e013      	b.n	180d0 <mp_binary_get_val_array+0x284>
        case 'd':
            return mp_obj_new_float(((double*)p)[index]);
#endif
        // Extension to CPython: array of objects
        case 'O':
            return ((mp_obj_t*)p)[index];
   180a8:	687b      	ldr	r3, [r7, #4]
   180aa:	009b      	lsls	r3, r3, #2
   180ac:	68ba      	ldr	r2, [r7, #8]
   180ae:	4413      	add	r3, r2
   180b0:	681b      	ldr	r3, [r3, #0]
   180b2:	e00d      	b.n	180d0 <mp_binary_get_val_array+0x284>
        // Extension to CPython: array of pointers
        case 'P':
            return mp_obj_new_int((mp_int_t)(uintptr_t)((void**)p)[index]);
   180b4:	687b      	ldr	r3, [r7, #4]
   180b6:	009b      	lsls	r3, r3, #2
   180b8:	68ba      	ldr	r2, [r7, #8]
   180ba:	4413      	add	r3, r2
   180bc:	681b      	ldr	r3, [r3, #0]
   180be:	4618      	mov	r0, r3
   180c0:	f7f8 fc44 	bl	1094c <mp_obj_new_int>
   180c4:	4603      	mov	r3, r0
   180c6:	e003      	b.n	180d0 <mp_binary_get_val_array+0x284>
    }
    return MP_OBJ_NEW_SMALL_INT(val);
   180c8:	697b      	ldr	r3, [r7, #20]
   180ca:	005b      	lsls	r3, r3, #1
   180cc:	f043 0301 	orr.w	r3, r3, #1
}
   180d0:	4618      	mov	r0, r3
   180d2:	3718      	adds	r7, #24
   180d4:	46bd      	mov	sp, r7
   180d6:	bd80      	pop	{r7, pc}

000180d8 <mp_binary_get_int>:

// The long long type is guaranteed to hold at least 64 bits, and size is at
// most 8 (for q and Q), so we will always be able to parse the given data
// and fit it into a long long.
long long mp_binary_get_int(mp_uint_t size, bool is_signed, bool big_endian, const byte *src) {
   180d8:	b4b0      	push	{r4, r5, r7}
   180da:	b08b      	sub	sp, #44	; 0x2c
   180dc:	af00      	add	r7, sp, #0
   180de:	60f8      	str	r0, [r7, #12]
   180e0:	607b      	str	r3, [r7, #4]
   180e2:	460b      	mov	r3, r1
   180e4:	72fb      	strb	r3, [r7, #11]
   180e6:	4613      	mov	r3, r2
   180e8:	72bb      	strb	r3, [r7, #10]
    int delta;
    if (!big_endian) {
   180ea:	7abb      	ldrb	r3, [r7, #10]
   180ec:	f083 0301 	eor.w	r3, r3, #1
   180f0:	b2db      	uxtb	r3, r3
   180f2:	2b00      	cmp	r3, #0
   180f4:	d008      	beq.n	18108 <mp_binary_get_int+0x30>
        delta = -1;
   180f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   180fa:	627b      	str	r3, [r7, #36]	; 0x24
        src += size - 1;
   180fc:	68fb      	ldr	r3, [r7, #12]
   180fe:	3b01      	subs	r3, #1
   18100:	687a      	ldr	r2, [r7, #4]
   18102:	4413      	add	r3, r2
   18104:	607b      	str	r3, [r7, #4]
   18106:	e001      	b.n	1810c <mp_binary_get_int+0x34>
    } else {
        delta = 1;
   18108:	2301      	movs	r3, #1
   1810a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    long long val = 0;
   1810c:	f04f 0200 	mov.w	r2, #0
   18110:	f04f 0300 	mov.w	r3, #0
   18114:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (is_signed && *src & 0x80) {
   18118:	7afb      	ldrb	r3, [r7, #11]
   1811a:	2b00      	cmp	r3, #0
   1811c:	d00a      	beq.n	18134 <mp_binary_get_int+0x5c>
   1811e:	687b      	ldr	r3, [r7, #4]
   18120:	781b      	ldrb	r3, [r3, #0]
   18122:	b25b      	sxtb	r3, r3
   18124:	2b00      	cmp	r3, #0
   18126:	da05      	bge.n	18134 <mp_binary_get_int+0x5c>
        val = -1;
   18128:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1812c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18130:	e9c7 2306 	strd	r2, r3, [r7, #24]
    }
    for (uint i = 0; i < size; i++) {
   18134:	2300      	movs	r3, #0
   18136:	617b      	str	r3, [r7, #20]
   18138:	e01b      	b.n	18172 <mp_binary_get_int+0x9a>
        val <<= 8;
   1813a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1813e:	021d      	lsls	r5, r3, #8
   18140:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
   18144:	0214      	lsls	r4, r2, #8
   18146:	e9c7 4506 	strd	r4, r5, [r7, #24]
        val |= *src;
   1814a:	687b      	ldr	r3, [r7, #4]
   1814c:	781b      	ldrb	r3, [r3, #0]
   1814e:	b2da      	uxtb	r2, r3
   18150:	f04f 0300 	mov.w	r3, #0
   18154:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   18158:	ea42 0200 	orr.w	r2, r2, r0
   1815c:	ea43 0301 	orr.w	r3, r3, r1
   18160:	e9c7 2306 	strd	r2, r3, [r7, #24]
        src += delta;
   18164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18166:	687a      	ldr	r2, [r7, #4]
   18168:	4413      	add	r3, r2
   1816a:	607b      	str	r3, [r7, #4]
    for (uint i = 0; i < size; i++) {
   1816c:	697b      	ldr	r3, [r7, #20]
   1816e:	3301      	adds	r3, #1
   18170:	617b      	str	r3, [r7, #20]
   18172:	697a      	ldr	r2, [r7, #20]
   18174:	68fb      	ldr	r3, [r7, #12]
   18176:	429a      	cmp	r2, r3
   18178:	d3df      	bcc.n	1813a <mp_binary_get_int+0x62>
    }

    return val;
   1817a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
}
   1817e:	4618      	mov	r0, r3
   18180:	4621      	mov	r1, r4
   18182:	372c      	adds	r7, #44	; 0x2c
   18184:	46bd      	mov	sp, r7
   18186:	bcb0      	pop	{r4, r5, r7}
   18188:	4770      	bx	lr
   1818a:	bf00      	nop

0001818c <mp_binary_get_val>:

#define is_signed(typecode) (typecode > 'Z')
mp_obj_t mp_binary_get_val(char struct_type, char val_type, byte **ptr) {
   1818c:	b590      	push	{r4, r7, lr}
   1818e:	b089      	sub	sp, #36	; 0x24
   18190:	af00      	add	r7, sp, #0
   18192:	4603      	mov	r3, r0
   18194:	603a      	str	r2, [r7, #0]
   18196:	71fb      	strb	r3, [r7, #7]
   18198:	460b      	mov	r3, r1
   1819a:	71bb      	strb	r3, [r7, #6]
    byte *p = *ptr;
   1819c:	683b      	ldr	r3, [r7, #0]
   1819e:	681b      	ldr	r3, [r3, #0]
   181a0:	61fb      	str	r3, [r7, #28]
    mp_uint_t align;

    size_t size = mp_binary_get_size(struct_type, val_type, &align);
   181a2:	f107 0208 	add.w	r2, r7, #8
   181a6:	79b9      	ldrb	r1, [r7, #6]
   181a8:	79fb      	ldrb	r3, [r7, #7]
   181aa:	4618      	mov	r0, r3
   181ac:	f7ff fc90 	bl	17ad0 <mp_binary_get_size>
   181b0:	61b8      	str	r0, [r7, #24]
    if (struct_type == '@') {
   181b2:	79fb      	ldrb	r3, [r7, #7]
   181b4:	2b40      	cmp	r3, #64	; 0x40
   181b6:	d109      	bne.n	181cc <mp_binary_get_val+0x40>
        // Make pointer aligned
        p = (byte*)MP_ALIGN(p, (size_t)align);
   181b8:	68ba      	ldr	r2, [r7, #8]
   181ba:	69fb      	ldr	r3, [r7, #28]
   181bc:	4413      	add	r3, r2
   181be:	1e5a      	subs	r2, r3, #1
   181c0:	68bb      	ldr	r3, [r7, #8]
   181c2:	425b      	negs	r3, r3
   181c4:	4013      	ands	r3, r2
   181c6:	61fb      	str	r3, [r7, #28]
        #if MP_ENDIANNESS_LITTLE
        struct_type = '<';
   181c8:	233c      	movs	r3, #60	; 0x3c
   181ca:	71fb      	strb	r3, [r7, #7]
        #else
        struct_type = '>';
        #endif
    }
    *ptr = p + size;
   181cc:	69fa      	ldr	r2, [r7, #28]
   181ce:	69bb      	ldr	r3, [r7, #24]
   181d0:	441a      	add	r2, r3
   181d2:	683b      	ldr	r3, [r7, #0]
   181d4:	601a      	str	r2, [r3, #0]

    long long val = mp_binary_get_int(size, is_signed(val_type), (struct_type == '>'), p);
   181d6:	79bb      	ldrb	r3, [r7, #6]
   181d8:	2b5a      	cmp	r3, #90	; 0x5a
   181da:	bf8c      	ite	hi
   181dc:	2301      	movhi	r3, #1
   181de:	2300      	movls	r3, #0
   181e0:	b2d9      	uxtb	r1, r3
   181e2:	79fb      	ldrb	r3, [r7, #7]
   181e4:	2b3e      	cmp	r3, #62	; 0x3e
   181e6:	bf0c      	ite	eq
   181e8:	2301      	moveq	r3, #1
   181ea:	2300      	movne	r3, #0
   181ec:	b2da      	uxtb	r2, r3
   181ee:	69fb      	ldr	r3, [r7, #28]
   181f0:	69b8      	ldr	r0, [r7, #24]
   181f2:	f7ff ff71 	bl	180d8 <mp_binary_get_int>
   181f6:	e9c7 0104 	strd	r0, r1, [r7, #16]

    if (val_type == 'O') {
   181fa:	79bb      	ldrb	r3, [r7, #6]
   181fc:	2b4f      	cmp	r3, #79	; 0x4f
   181fe:	d101      	bne.n	18204 <mp_binary_get_val+0x78>
        return (mp_obj_t)(mp_uint_t)val;
   18200:	693b      	ldr	r3, [r7, #16]
   18202:	e045      	b.n	18290 <mp_binary_get_val+0x104>
    } else if (val_type == 'S') {
   18204:	79bb      	ldrb	r3, [r7, #6]
   18206:	2b53      	cmp	r3, #83	; 0x53
   18208:	d10b      	bne.n	18222 <mp_binary_get_val+0x96>
        const char *s_val = (const char*)(uintptr_t)(mp_uint_t)val;
   1820a:	693b      	ldr	r3, [r7, #16]
   1820c:	60fb      	str	r3, [r7, #12]
        return mp_obj_new_str(s_val, strlen(s_val));
   1820e:	68f8      	ldr	r0, [r7, #12]
   18210:	f003 ff92 	bl	1c138 <strlen>
   18214:	4603      	mov	r3, r0
   18216:	4619      	mov	r1, r3
   18218:	68f8      	ldr	r0, [r7, #12]
   1821a:	f7fd f8e3 	bl	153e4 <mp_obj_new_str>
   1821e:	4603      	mov	r3, r0
   18220:	e036      	b.n	18290 <mp_binary_get_val+0x104>
        return mp_obj_new_float(fpu.f);
    } else if (val_type == 'd') {
        union { uint64_t i; double f; } fpu = {val};
        return mp_obj_new_float(fpu.f);
#endif
    } else if (is_signed(val_type)) {
   18222:	79bb      	ldrb	r3, [r7, #6]
   18224:	2b5a      	cmp	r3, #90	; 0x5a
   18226:	d91c      	bls.n	18262 <mp_binary_get_val+0xd6>
        if ((long long)MP_SMALL_INT_MIN <= val && val <= (long long)MP_SMALL_INT_MAX) {
   18228:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   1822c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
   18230:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
   18234:	db0f      	blt.n	18256 <mp_binary_get_val+0xca>
   18236:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   1823a:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
   1823e:	f04f 0200 	mov.w	r2, #0
   18242:	4299      	cmp	r1, r3
   18244:	eb72 0304 	sbcs.w	r3, r2, r4
   18248:	db05      	blt.n	18256 <mp_binary_get_val+0xca>
            return mp_obj_new_int((mp_int_t)val);
   1824a:	693b      	ldr	r3, [r7, #16]
   1824c:	4618      	mov	r0, r3
   1824e:	f7f8 fb7d 	bl	1094c <mp_obj_new_int>
   18252:	4603      	mov	r3, r0
   18254:	e01c      	b.n	18290 <mp_binary_get_val+0x104>
        } else {
            return mp_obj_new_int_from_ll(val);
   18256:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1825a:	f7f8 fb41 	bl	108e0 <mp_obj_new_int_from_ll>
   1825e:	4603      	mov	r3, r0
   18260:	e016      	b.n	18290 <mp_binary_get_val+0x104>
        }
    } else {
        if ((unsigned long long)val <= (unsigned long long)MP_SMALL_INT_MAX) {
   18262:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   18266:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
   1826a:	f04f 0200 	mov.w	r2, #0
   1826e:	42a2      	cmp	r2, r4
   18270:	bf08      	it	eq
   18272:	4299      	cmpeq	r1, r3
   18274:	d305      	bcc.n	18282 <mp_binary_get_val+0xf6>
            return mp_obj_new_int_from_uint((mp_uint_t)val);
   18276:	693b      	ldr	r3, [r7, #16]
   18278:	4618      	mov	r0, r3
   1827a:	f7f8 fb4d 	bl	10918 <mp_obj_new_int_from_uint>
   1827e:	4603      	mov	r3, r0
   18280:	e006      	b.n	18290 <mp_binary_get_val+0x104>
        } else {
            return mp_obj_new_int_from_ull(val);
   18282:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   18286:	4618      	mov	r0, r3
   18288:	4621      	mov	r1, r4
   1828a:	f7f8 fb37 	bl	108fc <mp_obj_new_int_from_ull>
   1828e:	4603      	mov	r3, r0
        }
    }
}
   18290:	4618      	mov	r0, r3
   18292:	3724      	adds	r7, #36	; 0x24
   18294:	46bd      	mov	sp, r7
   18296:	bd90      	pop	{r4, r7, pc}

00018298 <mp_binary_set_int>:

void mp_binary_set_int(mp_uint_t val_sz, bool big_endian, byte *dest, mp_uint_t val) {
   18298:	b580      	push	{r7, lr}
   1829a:	b086      	sub	sp, #24
   1829c:	af00      	add	r7, sp, #0
   1829e:	60f8      	str	r0, [r7, #12]
   182a0:	607a      	str	r2, [r7, #4]
   182a2:	603b      	str	r3, [r7, #0]
   182a4:	460b      	mov	r3, r1
   182a6:	72fb      	strb	r3, [r7, #11]
    if (MP_ENDIANNESS_LITTLE && !big_endian) {
   182a8:	7afb      	ldrb	r3, [r7, #11]
   182aa:	f083 0301 	eor.w	r3, r3, #1
   182ae:	b2db      	uxtb	r3, r3
   182b0:	2b00      	cmp	r3, #0
   182b2:	d006      	beq.n	182c2 <mp_binary_set_int+0x2a>
        memcpy(dest, &val, val_sz);
   182b4:	463b      	mov	r3, r7
   182b6:	68fa      	ldr	r2, [r7, #12]
   182b8:	4619      	mov	r1, r3
   182ba:	6878      	ldr	r0, [r7, #4]
   182bc:	f003 fe02 	bl	1bec4 <memcpy>
        }
        while (val_sz--) {
            *dest++ = *--src;
        }
    }
}
   182c0:	e012      	b.n	182e8 <mp_binary_set_int+0x50>
            src = (const byte*)&val + val_sz;
   182c2:	463a      	mov	r2, r7
   182c4:	68fb      	ldr	r3, [r7, #12]
   182c6:	4413      	add	r3, r2
   182c8:	617b      	str	r3, [r7, #20]
        while (val_sz--) {
   182ca:	e008      	b.n	182de <mp_binary_set_int+0x46>
            *dest++ = *--src;
   182cc:	687b      	ldr	r3, [r7, #4]
   182ce:	1c5a      	adds	r2, r3, #1
   182d0:	607a      	str	r2, [r7, #4]
   182d2:	697a      	ldr	r2, [r7, #20]
   182d4:	3a01      	subs	r2, #1
   182d6:	617a      	str	r2, [r7, #20]
   182d8:	697a      	ldr	r2, [r7, #20]
   182da:	7812      	ldrb	r2, [r2, #0]
   182dc:	701a      	strb	r2, [r3, #0]
        while (val_sz--) {
   182de:	68fb      	ldr	r3, [r7, #12]
   182e0:	1e5a      	subs	r2, r3, #1
   182e2:	60fa      	str	r2, [r7, #12]
   182e4:	2b00      	cmp	r3, #0
   182e6:	d1f1      	bne.n	182cc <mp_binary_set_int+0x34>
}
   182e8:	bf00      	nop
   182ea:	3718      	adds	r7, #24
   182ec:	46bd      	mov	sp, r7
   182ee:	bd80      	pop	{r7, pc}

000182f0 <mp_binary_set_val>:

void mp_binary_set_val(char struct_type, char val_type, mp_obj_t val_in, byte **ptr) {
   182f0:	b580      	push	{r7, lr}
   182f2:	b08a      	sub	sp, #40	; 0x28
   182f4:	af00      	add	r7, sp, #0
   182f6:	60ba      	str	r2, [r7, #8]
   182f8:	607b      	str	r3, [r7, #4]
   182fa:	4603      	mov	r3, r0
   182fc:	73fb      	strb	r3, [r7, #15]
   182fe:	460b      	mov	r3, r1
   18300:	73bb      	strb	r3, [r7, #14]
    byte *p = *ptr;
   18302:	687b      	ldr	r3, [r7, #4]
   18304:	681b      	ldr	r3, [r3, #0]
   18306:	627b      	str	r3, [r7, #36]	; 0x24
    mp_uint_t align;

    size_t size = mp_binary_get_size(struct_type, val_type, &align);
   18308:	f107 0214 	add.w	r2, r7, #20
   1830c:	7bb9      	ldrb	r1, [r7, #14]
   1830e:	7bfb      	ldrb	r3, [r7, #15]
   18310:	4618      	mov	r0, r3
   18312:	f7ff fbdd 	bl	17ad0 <mp_binary_get_size>
   18316:	61f8      	str	r0, [r7, #28]
    if (struct_type == '@') {
   18318:	7bfb      	ldrb	r3, [r7, #15]
   1831a:	2b40      	cmp	r3, #64	; 0x40
   1831c:	d109      	bne.n	18332 <mp_binary_set_val+0x42>
        // Make pointer aligned
        p = (byte*)MP_ALIGN(p, (size_t)align);
   1831e:	697a      	ldr	r2, [r7, #20]
   18320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18322:	4413      	add	r3, r2
   18324:	1e5a      	subs	r2, r3, #1
   18326:	697b      	ldr	r3, [r7, #20]
   18328:	425b      	negs	r3, r3
   1832a:	4013      	ands	r3, r2
   1832c:	627b      	str	r3, [r7, #36]	; 0x24
        if (MP_ENDIANNESS_LITTLE) {
            struct_type = '<';
   1832e:	233c      	movs	r3, #60	; 0x3c
   18330:	73fb      	strb	r3, [r7, #15]
        } else {
            struct_type = '>';
        }
    }
    *ptr = p + size;
   18332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   18334:	69fb      	ldr	r3, [r7, #28]
   18336:	441a      	add	r2, r3
   18338:	687b      	ldr	r3, [r7, #4]
   1833a:	601a      	str	r2, [r3, #0]

    mp_uint_t val;
    switch (val_type) {
   1833c:	7bbb      	ldrb	r3, [r7, #14]
   1833e:	2b4f      	cmp	r3, #79	; 0x4f
   18340:	d102      	bne.n	18348 <mp_binary_set_val+0x58>
        case 'O':
            val = (mp_uint_t)val_in;
   18342:	68bb      	ldr	r3, [r7, #8]
   18344:	623b      	str	r3, [r7, #32]
            break;
   18346:	e01e      	b.n	18386 <mp_binary_set_val+0x96>
                mp_obj_int_to_bytes_impl(val_in, struct_type == '>', size, p);
                return;
            } else
            #endif
            {
                val = mp_obj_get_int(val_in);
   18348:	68b8      	ldr	r0, [r7, #8]
   1834a:	f7f5 fc41 	bl	dbd0 <mp_obj_get_int>
   1834e:	4603      	mov	r3, r0
   18350:	623b      	str	r3, [r7, #32]
                // zero/sign extend if needed
                if (BYTES_PER_WORD < 8 && size > sizeof(val)) {
   18352:	69fb      	ldr	r3, [r7, #28]
   18354:	2b04      	cmp	r3, #4
   18356:	d916      	bls.n	18386 <mp_binary_set_val+0x96>
                    int c = (is_signed(val_type) && (mp_int_t)val < 0) ? 0xff : 0x00;
   18358:	7bbb      	ldrb	r3, [r7, #14]
   1835a:	2b5a      	cmp	r3, #90	; 0x5a
   1835c:	d904      	bls.n	18368 <mp_binary_set_val+0x78>
   1835e:	6a3b      	ldr	r3, [r7, #32]
   18360:	2b00      	cmp	r3, #0
   18362:	da01      	bge.n	18368 <mp_binary_set_val+0x78>
   18364:	23ff      	movs	r3, #255	; 0xff
   18366:	e000      	b.n	1836a <mp_binary_set_val+0x7a>
   18368:	2300      	movs	r3, #0
   1836a:	61bb      	str	r3, [r7, #24]
                    memset(p, c, size);
   1836c:	69fa      	ldr	r2, [r7, #28]
   1836e:	69b9      	ldr	r1, [r7, #24]
   18370:	6a78      	ldr	r0, [r7, #36]	; 0x24
   18372:	f003 fe43 	bl	1bffc <memset>
                    if (struct_type == '>') {
   18376:	7bfb      	ldrb	r3, [r7, #15]
   18378:	2b3e      	cmp	r3, #62	; 0x3e
   1837a:	d104      	bne.n	18386 <mp_binary_set_val+0x96>
                        p += size - sizeof(val);
   1837c:	69fb      	ldr	r3, [r7, #28]
   1837e:	3b04      	subs	r3, #4
   18380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   18382:	4413      	add	r3, r2
   18384:	627b      	str	r3, [r7, #36]	; 0x24
                    }
                }
            }
    }

    mp_binary_set_int(MIN((size_t)size, sizeof(val)), struct_type == '>', p, val);
   18386:	69fb      	ldr	r3, [r7, #28]
   18388:	2b04      	cmp	r3, #4
   1838a:	bf28      	it	cs
   1838c:	2304      	movcs	r3, #4
   1838e:	4618      	mov	r0, r3
   18390:	7bfb      	ldrb	r3, [r7, #15]
   18392:	2b3e      	cmp	r3, #62	; 0x3e
   18394:	bf0c      	ite	eq
   18396:	2301      	moveq	r3, #1
   18398:	2300      	movne	r3, #0
   1839a:	b2d9      	uxtb	r1, r3
   1839c:	6a3b      	ldr	r3, [r7, #32]
   1839e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   183a0:	f7ff ff7a 	bl	18298 <mp_binary_set_int>
}
   183a4:	bf00      	nop
   183a6:	3728      	adds	r7, #40	; 0x28
   183a8:	46bd      	mov	sp, r7
   183aa:	bd80      	pop	{r7, pc}

000183ac <mp_binary_set_val_array>:

void mp_binary_set_val_array(char typecode, void *p, mp_uint_t index, mp_obj_t val_in) {
   183ac:	b580      	push	{r7, lr}
   183ae:	b084      	sub	sp, #16
   183b0:	af00      	add	r7, sp, #0
   183b2:	60b9      	str	r1, [r7, #8]
   183b4:	607a      	str	r2, [r7, #4]
   183b6:	603b      	str	r3, [r7, #0]
   183b8:	4603      	mov	r3, r0
   183ba:	73fb      	strb	r3, [r7, #15]
    switch (typecode) {
   183bc:	7bfb      	ldrb	r3, [r7, #15]
   183be:	2b4f      	cmp	r3, #79	; 0x4f
   183c0:	d106      	bne.n	183d0 <mp_binary_set_val_array+0x24>
            ((double*)p)[index] = mp_obj_get_float(val_in);
            break;
#endif
        // Extension to CPython: array of objects
        case 'O':
            ((mp_obj_t*)p)[index] = val_in;
   183c2:	687b      	ldr	r3, [r7, #4]
   183c4:	009b      	lsls	r3, r3, #2
   183c6:	68ba      	ldr	r2, [r7, #8]
   183c8:	4413      	add	r3, r2
   183ca:	683a      	ldr	r2, [r7, #0]
   183cc:	601a      	str	r2, [r3, #0]
            break;
   183ce:	e008      	b.n	183e2 <mp_binary_set_val_array+0x36>
                mp_obj_int_to_bytes_impl(val_in, MP_ENDIANNESS_BIG,
                    size, (uint8_t*)p + index * size);
                return;
            }
            #endif
            mp_binary_set_val_array_from_int(typecode, p, index, mp_obj_get_int(val_in));
   183d0:	6838      	ldr	r0, [r7, #0]
   183d2:	f7f5 fbfd 	bl	dbd0 <mp_obj_get_int>
   183d6:	4603      	mov	r3, r0
   183d8:	7bf8      	ldrb	r0, [r7, #15]
   183da:	687a      	ldr	r2, [r7, #4]
   183dc:	68b9      	ldr	r1, [r7, #8]
   183de:	f000 f805 	bl	183ec <mp_binary_set_val_array_from_int>
    }
}
   183e2:	bf00      	nop
   183e4:	3710      	adds	r7, #16
   183e6:	46bd      	mov	sp, r7
   183e8:	bd80      	pop	{r7, pc}
   183ea:	bf00      	nop

000183ec <mp_binary_set_val_array_from_int>:

void mp_binary_set_val_array_from_int(char typecode, void *p, mp_uint_t index, mp_int_t val) {
   183ec:	b480      	push	{r7}
   183ee:	b085      	sub	sp, #20
   183f0:	af00      	add	r7, sp, #0
   183f2:	60b9      	str	r1, [r7, #8]
   183f4:	607a      	str	r2, [r7, #4]
   183f6:	603b      	str	r3, [r7, #0]
   183f8:	4603      	mov	r3, r0
   183fa:	73fb      	strb	r3, [r7, #15]
    switch (typecode) {
   183fc:	7bfb      	ldrb	r3, [r7, #15]
   183fe:	2b4c      	cmp	r3, #76	; 0x4c
   18400:	d04e      	beq.n	184a0 <mp_binary_set_val_array_from_int+0xb4>
   18402:	2b4c      	cmp	r3, #76	; 0x4c
   18404:	dc0b      	bgt.n	1841e <mp_binary_set_val_array_from_int+0x32>
   18406:	2b42      	cmp	r3, #66	; 0x42
   18408:	d01e      	beq.n	18448 <mp_binary_set_val_array_from_int+0x5c>
   1840a:	2b42      	cmp	r3, #66	; 0x42
   1840c:	dc02      	bgt.n	18414 <mp_binary_set_val_array_from_int+0x28>
   1840e:	2b01      	cmp	r3, #1
   18410:	d01a      	beq.n	18448 <mp_binary_set_val_array_from_int+0x5c>
        // Extension to CPython: array of pointers
        case 'P':
            ((void**)p)[index] = (void*)(uintptr_t)val;
            break;
    }
}
   18412:	e053      	b.n	184bc <mp_binary_set_val_array_from_int+0xd0>
    switch (typecode) {
   18414:	2b48      	cmp	r3, #72	; 0x48
   18416:	d026      	beq.n	18466 <mp_binary_set_val_array_from_int+0x7a>
   18418:	2b49      	cmp	r3, #73	; 0x49
   1841a:	d033      	beq.n	18484 <mp_binary_set_val_array_from_int+0x98>
}
   1841c:	e04e      	b.n	184bc <mp_binary_set_val_array_from_int+0xd0>
    switch (typecode) {
   1841e:	2b68      	cmp	r3, #104	; 0x68
   18420:	d019      	beq.n	18456 <mp_binary_set_val_array_from_int+0x6a>
   18422:	2b68      	cmp	r3, #104	; 0x68
   18424:	dc04      	bgt.n	18430 <mp_binary_set_val_array_from_int+0x44>
   18426:	2b50      	cmp	r3, #80	; 0x50
   18428:	d041      	beq.n	184ae <mp_binary_set_val_array_from_int+0xc2>
   1842a:	2b62      	cmp	r3, #98	; 0x62
   1842c:	d005      	beq.n	1843a <mp_binary_set_val_array_from_int+0x4e>
}
   1842e:	e045      	b.n	184bc <mp_binary_set_val_array_from_int+0xd0>
    switch (typecode) {
   18430:	2b69      	cmp	r3, #105	; 0x69
   18432:	d020      	beq.n	18476 <mp_binary_set_val_array_from_int+0x8a>
   18434:	2b6c      	cmp	r3, #108	; 0x6c
   18436:	d02c      	beq.n	18492 <mp_binary_set_val_array_from_int+0xa6>
}
   18438:	e040      	b.n	184bc <mp_binary_set_val_array_from_int+0xd0>
            ((signed char*)p)[index] = val;
   1843a:	68ba      	ldr	r2, [r7, #8]
   1843c:	687b      	ldr	r3, [r7, #4]
   1843e:	4413      	add	r3, r2
   18440:	683a      	ldr	r2, [r7, #0]
   18442:	b252      	sxtb	r2, r2
   18444:	701a      	strb	r2, [r3, #0]
            break;
   18446:	e039      	b.n	184bc <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned char*)p)[index] = val;
   18448:	68ba      	ldr	r2, [r7, #8]
   1844a:	687b      	ldr	r3, [r7, #4]
   1844c:	4413      	add	r3, r2
   1844e:	683a      	ldr	r2, [r7, #0]
   18450:	b2d2      	uxtb	r2, r2
   18452:	701a      	strb	r2, [r3, #0]
            break;
   18454:	e032      	b.n	184bc <mp_binary_set_val_array_from_int+0xd0>
            ((short*)p)[index] = val;
   18456:	687b      	ldr	r3, [r7, #4]
   18458:	005b      	lsls	r3, r3, #1
   1845a:	68ba      	ldr	r2, [r7, #8]
   1845c:	4413      	add	r3, r2
   1845e:	683a      	ldr	r2, [r7, #0]
   18460:	b212      	sxth	r2, r2
   18462:	801a      	strh	r2, [r3, #0]
            break;
   18464:	e02a      	b.n	184bc <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned short*)p)[index] = val;
   18466:	687b      	ldr	r3, [r7, #4]
   18468:	005b      	lsls	r3, r3, #1
   1846a:	68ba      	ldr	r2, [r7, #8]
   1846c:	4413      	add	r3, r2
   1846e:	683a      	ldr	r2, [r7, #0]
   18470:	b292      	uxth	r2, r2
   18472:	801a      	strh	r2, [r3, #0]
            break;
   18474:	e022      	b.n	184bc <mp_binary_set_val_array_from_int+0xd0>
            ((int*)p)[index] = val;
   18476:	687b      	ldr	r3, [r7, #4]
   18478:	009b      	lsls	r3, r3, #2
   1847a:	68ba      	ldr	r2, [r7, #8]
   1847c:	4413      	add	r3, r2
   1847e:	683a      	ldr	r2, [r7, #0]
   18480:	601a      	str	r2, [r3, #0]
            break;
   18482:	e01b      	b.n	184bc <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned int*)p)[index] = val;
   18484:	687b      	ldr	r3, [r7, #4]
   18486:	009b      	lsls	r3, r3, #2
   18488:	68ba      	ldr	r2, [r7, #8]
   1848a:	4413      	add	r3, r2
   1848c:	683a      	ldr	r2, [r7, #0]
   1848e:	601a      	str	r2, [r3, #0]
            break;
   18490:	e014      	b.n	184bc <mp_binary_set_val_array_from_int+0xd0>
            ((long*)p)[index] = val;
   18492:	687b      	ldr	r3, [r7, #4]
   18494:	009b      	lsls	r3, r3, #2
   18496:	68ba      	ldr	r2, [r7, #8]
   18498:	4413      	add	r3, r2
   1849a:	683a      	ldr	r2, [r7, #0]
   1849c:	601a      	str	r2, [r3, #0]
            break;
   1849e:	e00d      	b.n	184bc <mp_binary_set_val_array_from_int+0xd0>
            ((unsigned long*)p)[index] = val;
   184a0:	687b      	ldr	r3, [r7, #4]
   184a2:	009b      	lsls	r3, r3, #2
   184a4:	68ba      	ldr	r2, [r7, #8]
   184a6:	4413      	add	r3, r2
   184a8:	683a      	ldr	r2, [r7, #0]
   184aa:	601a      	str	r2, [r3, #0]
            break;
   184ac:	e006      	b.n	184bc <mp_binary_set_val_array_from_int+0xd0>
            ((void**)p)[index] = (void*)(uintptr_t)val;
   184ae:	687b      	ldr	r3, [r7, #4]
   184b0:	009b      	lsls	r3, r3, #2
   184b2:	68ba      	ldr	r2, [r7, #8]
   184b4:	4413      	add	r3, r2
   184b6:	683a      	ldr	r2, [r7, #0]
   184b8:	601a      	str	r2, [r3, #0]
            break;
   184ba:	bf00      	nop
}
   184bc:	bf00      	nop
   184be:	3714      	adds	r7, #20
   184c0:	46bd      	mov	sp, r7
   184c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   184c6:	4770      	bx	lr

000184c8 <vstr_str>:
static inline char *vstr_str(vstr_t *vstr) { return vstr->buf; }
   184c8:	b480      	push	{r7}
   184ca:	b083      	sub	sp, #12
   184cc:	af00      	add	r7, sp, #0
   184ce:	6078      	str	r0, [r7, #4]
   184d0:	687b      	ldr	r3, [r7, #4]
   184d2:	689b      	ldr	r3, [r3, #8]
   184d4:	4618      	mov	r0, r3
   184d6:	370c      	adds	r7, #12
   184d8:	46bd      	mov	sp, r7
   184da:	f85d 7b04 	ldr.w	r7, [sp], #4
   184de:	4770      	bx	lr

000184e0 <vstr_len>:
static inline size_t vstr_len(vstr_t *vstr) { return vstr->len; }
   184e0:	b480      	push	{r7}
   184e2:	b083      	sub	sp, #12
   184e4:	af00      	add	r7, sp, #0
   184e6:	6078      	str	r0, [r7, #4]
   184e8:	687b      	ldr	r3, [r7, #4]
   184ea:	685b      	ldr	r3, [r3, #4]
   184ec:	4618      	mov	r0, r3
   184ee:	370c      	adds	r7, #12
   184f0:	46bd      	mov	sp, r7
   184f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   184f6:	4770      	bx	lr

000184f8 <mp_local_free>:
static inline void mp_local_free(void *ptr) {
   184f8:	b480      	push	{r7}
   184fa:	b083      	sub	sp, #12
   184fc:	af00      	add	r7, sp, #0
   184fe:	6078      	str	r0, [r7, #4]
}
   18500:	bf00      	nop
   18502:	370c      	adds	r7, #12
   18504:	46bd      	mov	sp, r7
   18506:	f85d 7b04 	ldr.w	r7, [sp], #4
   1850a:	4770      	bx	lr

0001850c <mp_locals_get>:
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
   1850c:	b480      	push	{r7}
   1850e:	af00      	add	r7, sp, #0
   18510:	4b03      	ldr	r3, [pc, #12]	; (18520 <mp_locals_get+0x14>)
   18512:	685b      	ldr	r3, [r3, #4]
   18514:	4618      	mov	r0, r3
   18516:	46bd      	mov	sp, r7
   18518:	f85d 7b04 	ldr.w	r7, [sp], #4
   1851c:	4770      	bx	lr
   1851e:	bf00      	nop
   18520:	20000a2c 	.word	0x20000a2c

00018524 <mp_locals_set>:
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
   18524:	b480      	push	{r7}
   18526:	b083      	sub	sp, #12
   18528:	af00      	add	r7, sp, #0
   1852a:	6078      	str	r0, [r7, #4]
   1852c:	4a04      	ldr	r2, [pc, #16]	; (18540 <mp_locals_set+0x1c>)
   1852e:	687b      	ldr	r3, [r7, #4]
   18530:	6053      	str	r3, [r2, #4]
   18532:	bf00      	nop
   18534:	370c      	adds	r7, #12
   18536:	46bd      	mov	sp, r7
   18538:	f85d 7b04 	ldr.w	r7, [sp], #4
   1853c:	4770      	bx	lr
   1853e:	bf00      	nop
   18540:	20000a2c 	.word	0x20000a2c

00018544 <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   18544:	b480      	push	{r7}
   18546:	af00      	add	r7, sp, #0
   18548:	4b03      	ldr	r3, [pc, #12]	; (18558 <mp_globals_get+0x14>)
   1854a:	689b      	ldr	r3, [r3, #8]
   1854c:	4618      	mov	r0, r3
   1854e:	46bd      	mov	sp, r7
   18550:	f85d 7b04 	ldr.w	r7, [sp], #4
   18554:	4770      	bx	lr
   18556:	bf00      	nop
   18558:	20000a2c 	.word	0x20000a2c

0001855c <mp_globals_set>:
static inline void mp_globals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_globals) = d; }
   1855c:	b480      	push	{r7}
   1855e:	b083      	sub	sp, #12
   18560:	af00      	add	r7, sp, #0
   18562:	6078      	str	r0, [r7, #4]
   18564:	4a04      	ldr	r2, [pc, #16]	; (18578 <mp_globals_set+0x1c>)
   18566:	687b      	ldr	r3, [r7, #4]
   18568:	6093      	str	r3, [r2, #8]
   1856a:	bf00      	nop
   1856c:	370c      	adds	r7, #12
   1856e:	46bd      	mov	sp, r7
   18570:	f85d 7b04 	ldr.w	r7, [sp], #4
   18574:	4770      	bx	lr
   18576:	bf00      	nop
   18578:	20000a2c 	.word	0x20000a2c

0001857c <mp_obj_is_package>:

#if MICROPY_ENABLE_EXTERNAL_IMPORT

#define PATH_SEP_CHAR '/'

bool mp_obj_is_package(mp_obj_t module) {
   1857c:	b580      	push	{r7, lr}
   1857e:	b084      	sub	sp, #16
   18580:	af00      	add	r7, sp, #0
   18582:	6078      	str	r0, [r7, #4]
    mp_obj_t dest[2];
    mp_load_method_maybe(module, MP_QSTR___path__, dest);
   18584:	f107 0308 	add.w	r3, r7, #8
   18588:	461a      	mov	r2, r3
   1858a:	211e      	movs	r1, #30
   1858c:	6878      	ldr	r0, [r7, #4]
   1858e:	f7f4 f8fd 	bl	c78c <mp_load_method_maybe>
    return dest[0] != MP_OBJ_NULL;
   18592:	68bb      	ldr	r3, [r7, #8]
   18594:	2b00      	cmp	r3, #0
   18596:	bf14      	ite	ne
   18598:	2301      	movne	r3, #1
   1859a:	2300      	moveq	r3, #0
   1859c:	b2db      	uxtb	r3, r3
}
   1859e:	4618      	mov	r0, r3
   185a0:	3710      	adds	r7, #16
   185a2:	46bd      	mov	sp, r7
   185a4:	bd80      	pop	{r7, pc}
   185a6:	bf00      	nop

000185a8 <mp_import_stat_any>:

// Stat either frozen or normal module by a given path
// (whatever is available, if at all).
STATIC mp_import_stat_t mp_import_stat_any(const char *path) {
   185a8:	b580      	push	{r7, lr}
   185aa:	b084      	sub	sp, #16
   185ac:	af00      	add	r7, sp, #0
   185ae:	6078      	str	r0, [r7, #4]
    #if MICROPY_MODULE_FROZEN
    mp_import_stat_t st = mp_frozen_stat(path);
   185b0:	6878      	ldr	r0, [r7, #4]
   185b2:	f002 fe09 	bl	1b1c8 <mp_frozen_stat>
   185b6:	60f8      	str	r0, [r7, #12]
    if (st != MP_IMPORT_STAT_NO_EXIST) {
   185b8:	68fb      	ldr	r3, [r7, #12]
   185ba:	2b00      	cmp	r3, #0
   185bc:	d001      	beq.n	185c2 <mp_import_stat_any+0x1a>
        return st;
   185be:	68fb      	ldr	r3, [r7, #12]
   185c0:	e003      	b.n	185ca <mp_import_stat_any+0x22>
    }
    #endif
    return mp_import_stat(path);
   185c2:	6878      	ldr	r0, [r7, #4]
   185c4:	f002 feaa 	bl	1b31c <mp_import_stat>
   185c8:	4603      	mov	r3, r0
}
   185ca:	4618      	mov	r0, r3
   185cc:	3710      	adds	r7, #16
   185ce:	46bd      	mov	sp, r7
   185d0:	bd80      	pop	{r7, pc}
   185d2:	bf00      	nop

000185d4 <stat_file_py_or_mpy>:

STATIC mp_import_stat_t stat_file_py_or_mpy(vstr_t *path) {
   185d4:	b580      	push	{r7, lr}
   185d6:	b084      	sub	sp, #16
   185d8:	af00      	add	r7, sp, #0
   185da:	6078      	str	r0, [r7, #4]
    mp_import_stat_t stat = mp_import_stat_any(vstr_null_terminated_str(path));
   185dc:	6878      	ldr	r0, [r7, #4]
   185de:	f7e8 ffc9 	bl	1574 <vstr_null_terminated_str>
   185e2:	4603      	mov	r3, r0
   185e4:	4618      	mov	r0, r3
   185e6:	f7ff ffdf 	bl	185a8 <mp_import_stat_any>
   185ea:	60f8      	str	r0, [r7, #12]
    if (stat == MP_IMPORT_STAT_FILE) {
   185ec:	68fb      	ldr	r3, [r7, #12]
   185ee:	2b02      	cmp	r3, #2
   185f0:	d101      	bne.n	185f6 <stat_file_py_or_mpy+0x22>
        return stat;
   185f2:	68fb      	ldr	r3, [r7, #12]
   185f4:	e000      	b.n	185f8 <stat_file_py_or_mpy+0x24>
    if (stat == MP_IMPORT_STAT_FILE) {
        return stat;
    }
    #endif

    return MP_IMPORT_STAT_NO_EXIST;
   185f6:	2300      	movs	r3, #0
}
   185f8:	4618      	mov	r0, r3
   185fa:	3710      	adds	r7, #16
   185fc:	46bd      	mov	sp, r7
   185fe:	bd80      	pop	{r7, pc}

00018600 <stat_dir_or_file>:

STATIC mp_import_stat_t stat_dir_or_file(vstr_t *path) {
   18600:	b580      	push	{r7, lr}
   18602:	b084      	sub	sp, #16
   18604:	af00      	add	r7, sp, #0
   18606:	6078      	str	r0, [r7, #4]
    mp_import_stat_t stat = mp_import_stat_any(vstr_null_terminated_str(path));
   18608:	6878      	ldr	r0, [r7, #4]
   1860a:	f7e8 ffb3 	bl	1574 <vstr_null_terminated_str>
   1860e:	4603      	mov	r3, r0
   18610:	4618      	mov	r0, r3
   18612:	f7ff ffc9 	bl	185a8 <mp_import_stat_any>
   18616:	60f8      	str	r0, [r7, #12]
    DEBUG_printf("stat %s: %d\n", vstr_str(path), stat);
    if (stat == MP_IMPORT_STAT_DIR) {
   18618:	68fb      	ldr	r3, [r7, #12]
   1861a:	2b01      	cmp	r3, #1
   1861c:	d101      	bne.n	18622 <stat_dir_or_file+0x22>
        return stat;
   1861e:	68fb      	ldr	r3, [r7, #12]
   18620:	e007      	b.n	18632 <stat_dir_or_file+0x32>
    }

    // not a directory, add .py and try as a file
    vstr_add_str(path, ".py");
   18622:	4906      	ldr	r1, [pc, #24]	; (1863c <stat_dir_or_file+0x3c>)
   18624:	6878      	ldr	r0, [r7, #4]
   18626:	f7e8 ffe3 	bl	15f0 <vstr_add_str>
    return stat_file_py_or_mpy(path);
   1862a:	6878      	ldr	r0, [r7, #4]
   1862c:	f7ff ffd2 	bl	185d4 <stat_file_py_or_mpy>
   18630:	4603      	mov	r3, r0
}
   18632:	4618      	mov	r0, r3
   18634:	3710      	adds	r7, #16
   18636:	46bd      	mov	sp, r7
   18638:	bd80      	pop	{r7, pc}
   1863a:	bf00      	nop
   1863c:	0002259c 	.word	0x0002259c

00018640 <find_file>:

STATIC mp_import_stat_t find_file(const char *file_str, uint file_len, vstr_t *dest) {
   18640:	b580      	push	{r7, lr}
   18642:	b084      	sub	sp, #16
   18644:	af00      	add	r7, sp, #0
   18646:	60f8      	str	r0, [r7, #12]
   18648:	60b9      	str	r1, [r7, #8]
   1864a:	607a      	str	r2, [r7, #4]
    mp_obj_list_get(mp_sys_path, &path_num, &path_items);

    if (path_num == 0) {
#endif
        // mp_sys_path is empty, so just use the given file name
        vstr_add_strn(dest, file_str, file_len);
   1864c:	68ba      	ldr	r2, [r7, #8]
   1864e:	68f9      	ldr	r1, [r7, #12]
   18650:	6878      	ldr	r0, [r7, #4]
   18652:	f7e8 ffdf 	bl	1614 <vstr_add_strn>
        return stat_dir_or_file(dest);
   18656:	6878      	ldr	r0, [r7, #4]
   18658:	f7ff ffd2 	bl	18600 <stat_dir_or_file>
   1865c:	4603      	mov	r3, r0

        // could not find a directory or file
        return MP_IMPORT_STAT_NO_EXIST;
    }
#endif
}
   1865e:	4618      	mov	r0, r3
   18660:	3710      	adds	r7, #16
   18662:	46bd      	mov	sp, r7
   18664:	bd80      	pop	{r7, pc}
   18666:	bf00      	nop

00018668 <do_load_from_lexer>:

#if MICROPY_ENABLE_COMPILER
STATIC void do_load_from_lexer(mp_obj_t module_obj, mp_lexer_t *lex) {
   18668:	b580      	push	{r7, lr}
   1866a:	b084      	sub	sp, #16
   1866c:	af00      	add	r7, sp, #0
   1866e:	6078      	str	r0, [r7, #4]
   18670:	6039      	str	r1, [r7, #0]
    qstr source_name = lex->source_name;
    mp_store_attr(module_obj, MP_QSTR___file__, MP_OBJ_NEW_QSTR(source_name));
    #endif

    // parse, compile and execute the module in its context
    mp_obj_dict_t *mod_globals = mp_obj_module_get_globals(module_obj);
   18672:	6878      	ldr	r0, [r7, #4]
   18674:	f7f9 fb40 	bl	11cf8 <mp_obj_module_get_globals>
   18678:	60f8      	str	r0, [r7, #12]
    mp_parse_compile_execute(lex, MP_PARSE_FILE_INPUT, mod_globals, mod_globals);
   1867a:	68fb      	ldr	r3, [r7, #12]
   1867c:	68fa      	ldr	r2, [r7, #12]
   1867e:	2101      	movs	r1, #1
   18680:	6838      	ldr	r0, [r7, #0]
   18682:	f7f4 fc1f 	bl	cec4 <mp_parse_compile_execute>
}
   18686:	bf00      	nop
   18688:	3710      	adds	r7, #16
   1868a:	46bd      	mov	sp, r7
   1868c:	bd80      	pop	{r7, pc}
   1868e:	bf00      	nop

00018690 <do_execute_raw_code>:
#endif

#if MICROPY_PERSISTENT_CODE_LOAD || MICROPY_MODULE_FROZEN_MPY
STATIC void do_execute_raw_code(mp_obj_t module_obj, mp_raw_code_t *raw_code) {
   18690:	b580      	push	{r7, lr}
   18692:	b092      	sub	sp, #72	; 0x48
   18694:	af00      	add	r7, sp, #0
   18696:	6078      	str	r0, [r7, #4]
   18698:	6039      	str	r1, [r7, #0]
    //qstr source_name = lex->source_name;
    //mp_store_attr(module_obj, MP_QSTR___file__, MP_OBJ_NEW_QSTR(source_name));
    #endif

    // execute the module in its context
    mp_obj_dict_t *mod_globals = mp_obj_module_get_globals(module_obj);
   1869a:	6878      	ldr	r0, [r7, #4]
   1869c:	f7f9 fb2c 	bl	11cf8 <mp_obj_module_get_globals>
   186a0:	6478      	str	r0, [r7, #68]	; 0x44

    // save context
    mp_obj_dict_t *volatile old_globals = mp_globals_get();
   186a2:	f7ff ff4f 	bl	18544 <mp_globals_get>
   186a6:	4603      	mov	r3, r0
   186a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    mp_obj_dict_t *volatile old_locals = mp_locals_get();
   186aa:	f7ff ff2f 	bl	1850c <mp_locals_get>
   186ae:	4603      	mov	r3, r0
   186b0:	63bb      	str	r3, [r7, #56]	; 0x38

    // set new context
    mp_globals_set(mod_globals);
   186b2:	6c78      	ldr	r0, [r7, #68]	; 0x44
   186b4:	f7ff ff52 	bl	1855c <mp_globals_set>
    mp_locals_set(mod_globals);
   186b8:	6c78      	ldr	r0, [r7, #68]	; 0x44
   186ba:	f7ff ff33 	bl	18524 <mp_locals_set>

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   186be:	f107 0308 	add.w	r3, r7, #8
   186c2:	4618      	mov	r0, r3
   186c4:	f7e7 fdfa 	bl	2bc <nlr_push>
   186c8:	4603      	mov	r3, r0
   186ca:	2b00      	cmp	r3, #0
   186cc:	d113      	bne.n	186f6 <do_execute_raw_code+0x66>
        mp_obj_t module_fun = mp_make_function_from_raw_code(raw_code, MP_OBJ_NULL, MP_OBJ_NULL);
   186ce:	2200      	movs	r2, #0
   186d0:	2100      	movs	r1, #0
   186d2:	6838      	ldr	r0, [r7, #0]
   186d4:	f7f2 fde6 	bl	b2a4 <mp_make_function_from_raw_code>
   186d8:	6438      	str	r0, [r7, #64]	; 0x40
        mp_call_function_0(module_fun);
   186da:	6c38      	ldr	r0, [r7, #64]	; 0x40
   186dc:	f7f3 fb86 	bl	bdec <mp_call_function_0>

        // finish nlr block, restore context
        nlr_pop();
   186e0:	f7e7 fdda 	bl	298 <nlr_pop>
        mp_globals_set(old_globals);
   186e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   186e6:	4618      	mov	r0, r3
   186e8:	f7ff ff38 	bl	1855c <mp_globals_set>
        mp_locals_set(old_locals);
   186ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   186ee:	4618      	mov	r0, r3
   186f0:	f7ff ff18 	bl	18524 <mp_locals_set>
        // exception; restore context and re-raise same exception
        mp_globals_set(old_globals);
        mp_locals_set(old_locals);
        nlr_jump(nlr.ret_val);
    }
}
   186f4:	e00b      	b.n	1870e <do_execute_raw_code+0x7e>
        mp_globals_set(old_globals);
   186f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   186f8:	4618      	mov	r0, r3
   186fa:	f7ff ff2f 	bl	1855c <mp_globals_set>
        mp_locals_set(old_locals);
   186fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18700:	4618      	mov	r0, r3
   18702:	f7ff ff0f 	bl	18524 <mp_locals_set>
        nlr_jump(nlr.ret_val);
   18706:	68fb      	ldr	r3, [r7, #12]
   18708:	4618      	mov	r0, r3
   1870a:	f7e7 fde9 	bl	2e0 <nlr_jump>
}
   1870e:	3748      	adds	r7, #72	; 0x48
   18710:	46bd      	mov	sp, r7
   18712:	bd80      	pop	{r7, pc}

00018714 <do_load>:
#endif

STATIC void do_load(mp_obj_t module_obj, vstr_t *file) {
   18714:	b580      	push	{r7, lr}
   18716:	b086      	sub	sp, #24
   18718:	af00      	add	r7, sp, #0
   1871a:	6078      	str	r0, [r7, #4]
   1871c:	6039      	str	r1, [r7, #0]
    #if MICROPY_MODULE_FROZEN || MICROPY_PERSISTENT_CODE_LOAD || MICROPY_ENABLE_COMPILER
    char *file_str = vstr_null_terminated_str(file);
   1871e:	6838      	ldr	r0, [r7, #0]
   18720:	f7e8 ff28 	bl	1574 <vstr_null_terminated_str>
   18724:	6178      	str	r0, [r7, #20]

    // If we support frozen modules (either as str or mpy) then try to find the
    // requested filename in the list of frozen module filenames.
    #if MICROPY_MODULE_FROZEN
    void *modref;
    int frozen_type = mp_find_frozen_module(file_str, file->len, &modref);
   18726:	683b      	ldr	r3, [r7, #0]
   18728:	685b      	ldr	r3, [r3, #4]
   1872a:	f107 0208 	add.w	r2, r7, #8
   1872e:	4619      	mov	r1, r3
   18730:	6978      	ldr	r0, [r7, #20]
   18732:	f002 fd5f 	bl	1b1f4 <mp_find_frozen_module>
   18736:	6138      	str	r0, [r7, #16]
    #endif

    // If we support frozen mpy modules and we found a corresponding file (and
    // its data) in the list of frozen files, execute it.
    #if MICROPY_MODULE_FROZEN_MPY
    if (frozen_type == MP_FROZEN_MPY) {
   18738:	693b      	ldr	r3, [r7, #16]
   1873a:	2b02      	cmp	r3, #2
   1873c:	d105      	bne.n	1874a <do_load+0x36>
        do_execute_raw_code(module_obj, modref);
   1873e:	68bb      	ldr	r3, [r7, #8]
   18740:	4619      	mov	r1, r3
   18742:	6878      	ldr	r0, [r7, #4]
   18744:	f7ff ffa4 	bl	18690 <do_execute_raw_code>
        return;
   18748:	e008      	b.n	1875c <do_load+0x48>
    #endif

    // If we can compile scripts then load the file and compile and execute it.
    #if MICROPY_ENABLE_COMPILER
    {
        mp_lexer_t *lex = mp_lexer_new_from_file(file_str);
   1874a:	6978      	ldr	r0, [r7, #20]
   1874c:	f002 fdde 	bl	1b30c <mp_lexer_new_from_file>
   18750:	60f8      	str	r0, [r7, #12]
        do_load_from_lexer(module_obj, lex);
   18752:	68f9      	ldr	r1, [r7, #12]
   18754:	6878      	ldr	r0, [r7, #4]
   18756:	f7ff ff87 	bl	18668 <do_load_from_lexer>
        return;
   1875a:	bf00      	nop
    #else

    // If we get here then the file was not frozen and we can't compile scripts.
    mp_raise_msg(&mp_type_ImportError, "script compilation not supported");
    #endif
}
   1875c:	3718      	adds	r7, #24
   1875e:	46bd      	mov	sp, r7
   18760:	bd80      	pop	{r7, pc}
   18762:	bf00      	nop

00018764 <chop_component>:

STATIC void chop_component(const char *start, const char **end) {
   18764:	b480      	push	{r7}
   18766:	b085      	sub	sp, #20
   18768:	af00      	add	r7, sp, #0
   1876a:	6078      	str	r0, [r7, #4]
   1876c:	6039      	str	r1, [r7, #0]
    const char *p = *end;
   1876e:	683b      	ldr	r3, [r7, #0]
   18770:	681b      	ldr	r3, [r3, #0]
   18772:	60fb      	str	r3, [r7, #12]
    while (p > start) {
   18774:	e00a      	b.n	1878c <chop_component+0x28>
        if (*--p == '.') {
   18776:	68fb      	ldr	r3, [r7, #12]
   18778:	3b01      	subs	r3, #1
   1877a:	60fb      	str	r3, [r7, #12]
   1877c:	68fb      	ldr	r3, [r7, #12]
   1877e:	781b      	ldrb	r3, [r3, #0]
   18780:	2b2e      	cmp	r3, #46	; 0x2e
   18782:	d103      	bne.n	1878c <chop_component+0x28>
            *end = p;
   18784:	683b      	ldr	r3, [r7, #0]
   18786:	68fa      	ldr	r2, [r7, #12]
   18788:	601a      	str	r2, [r3, #0]
            return;
   1878a:	e006      	b.n	1879a <chop_component+0x36>
    while (p > start) {
   1878c:	68fa      	ldr	r2, [r7, #12]
   1878e:	687b      	ldr	r3, [r7, #4]
   18790:	429a      	cmp	r2, r3
   18792:	d8f0      	bhi.n	18776 <chop_component+0x12>
        }
    }
    *end = p;
   18794:	683b      	ldr	r3, [r7, #0]
   18796:	68fa      	ldr	r2, [r7, #12]
   18798:	601a      	str	r2, [r3, #0]
}
   1879a:	3714      	adds	r7, #20
   1879c:	46bd      	mov	sp, r7
   1879e:	f85d 7b04 	ldr.w	r7, [sp], #4
   187a2:	4770      	bx	lr

000187a4 <mp_builtin___import__>:

mp_obj_t mp_builtin___import__(size_t n_args, const mp_obj_t *args) {
   187a4:	b590      	push	{r4, r7, lr}
   187a6:	b0e3      	sub	sp, #396	; 0x18c
   187a8:	af00      	add	r7, sp, #0
   187aa:	1d3b      	adds	r3, r7, #4
   187ac:	6018      	str	r0, [r3, #0]
   187ae:	463b      	mov	r3, r7
   187b0:	6019      	str	r1, [r3, #0]
        mp_obj_print(args[i], PRINT_REPR);
        DEBUG_printf("\n");
    }
#endif

    mp_obj_t module_name = args[0];
   187b2:	463b      	mov	r3, r7
   187b4:	681b      	ldr	r3, [r3, #0]
   187b6:	681b      	ldr	r3, [r3, #0]
   187b8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    mp_obj_t fromtuple = mp_const_none;
   187bc:	4bd6      	ldr	r3, [pc, #856]	; (18b18 <mp_builtin___import__+0x374>)
   187be:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    mp_int_t level = 0;
   187c2:	2300      	movs	r3, #0
   187c4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    if (n_args >= 4) {
   187c8:	1d3b      	adds	r3, r7, #4
   187ca:	681b      	ldr	r3, [r3, #0]
   187cc:	2b03      	cmp	r3, #3
   187ce:	d916      	bls.n	187fe <mp_builtin___import__+0x5a>
        fromtuple = args[3];
   187d0:	463b      	mov	r3, r7
   187d2:	681b      	ldr	r3, [r3, #0]
   187d4:	68db      	ldr	r3, [r3, #12]
   187d6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        if (n_args >= 5) {
   187da:	1d3b      	adds	r3, r7, #4
   187dc:	681b      	ldr	r3, [r3, #0]
   187de:	2b04      	cmp	r3, #4
   187e0:	d90d      	bls.n	187fe <mp_builtin___import__+0x5a>
            level = MP_OBJ_SMALL_INT_VALUE(args[4]);
   187e2:	463b      	mov	r3, r7
   187e4:	681b      	ldr	r3, [r3, #0]
   187e6:	3310      	adds	r3, #16
   187e8:	681b      	ldr	r3, [r3, #0]
   187ea:	105b      	asrs	r3, r3, #1
   187ec:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
            if (level < 0) {
   187f0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   187f4:	2b00      	cmp	r3, #0
   187f6:	da02      	bge.n	187fe <mp_builtin___import__+0x5a>
                mp_raise_ValueError(NULL);
   187f8:	2000      	movs	r0, #0
   187fa:	f7f4 fbe7 	bl	cfcc <mp_raise_ValueError>
            }
        }
    }

    size_t mod_len;
    const char *mod_str = mp_obj_str_get_data(module_name, &mod_len);
   187fe:	f507 7390 	add.w	r3, r7, #288	; 0x120
   18802:	4619      	mov	r1, r3
   18804:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
   18808:	f7fc ff4e 	bl	156a8 <mp_obj_str_get_data>
   1880c:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178

    if (level != 0) {
   18810:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   18814:	2b00      	cmp	r3, #0
   18816:	f000 80de 	beq.w	189d6 <mp_builtin___import__+0x232>
        // module name, thus resolving relative import name into absolute.
        // This even appears to be correct per
        // http://legacy.python.org/dev/peps/pep-0328/#relative-imports-and-name
        // "Relative imports use a module's __name__ attribute to determine that
        // module's position in the package hierarchy."
        level--;
   1881a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   1881e:	3b01      	subs	r3, #1
   18820:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
        mp_obj_t this_name_q = mp_obj_dict_get(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(MP_QSTR___name__));
   18824:	f7ff fe8e 	bl	18544 <mp_globals_get>
   18828:	4603      	mov	r3, r0
   1882a:	216e      	movs	r1, #110	; 0x6e
   1882c:	4618      	mov	r0, r3
   1882e:	f7f5 ff8f 	bl	e750 <mp_obj_dict_get>
   18832:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
        assert(this_name_q != MP_OBJ_NULL);
   18836:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
   1883a:	2b00      	cmp	r3, #0
   1883c:	d106      	bne.n	1884c <mp_builtin___import__+0xa8>
   1883e:	4bb7      	ldr	r3, [pc, #732]	; (18b1c <mp_builtin___import__+0x378>)
   18840:	4ab7      	ldr	r2, [pc, #732]	; (18b20 <mp_builtin___import__+0x37c>)
   18842:	f240 111d 	movw	r1, #285	; 0x11d
   18846:	48b7      	ldr	r0, [pc, #732]	; (18b24 <mp_builtin___import__+0x380>)
   18848:	f002 fd90 	bl	1b36c <__assert_func>
        if (MP_OBJ_QSTR_VALUE(this_name_q) == MP_QSTR___main__) {
            // This is a module run by -m command-line switch, get its real name from backup attribute
            this_name_q = mp_obj_dict_get(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
        }
        #endif
        mp_map_t *globals_map = &mp_globals_get()->map;
   1884c:	f7ff fe7a 	bl	18544 <mp_globals_get>
   18850:	4603      	mov	r3, r0
   18852:	3304      	adds	r3, #4
   18854:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        mp_map_elem_t *elem = mp_map_lookup(globals_map, MP_OBJ_NEW_QSTR(MP_QSTR___path__), MP_MAP_LOOKUP);
   18858:	2200      	movs	r2, #0
   1885a:	217a      	movs	r1, #122	; 0x7a
   1885c:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
   18860:	f7f4 fe2e 	bl	d4c0 <mp_map_lookup>
   18864:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
        bool is_pkg = (elem != NULL);
   18868:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
   1886c:	2b00      	cmp	r3, #0
   1886e:	bf14      	ite	ne
   18870:	2301      	movne	r3, #1
   18872:	2300      	moveq	r3, #0
   18874:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        DEBUG_printf(", is_package: %d", is_pkg);
        DEBUG_printf("\n");
#endif

        size_t this_name_l;
        const char *this_name = mp_obj_str_get_data(this_name_q, &this_name_l);
   18878:	f107 030c 	add.w	r3, r7, #12
   1887c:	4619      	mov	r1, r3
   1887e:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
   18882:	f7fc ff11 	bl	156a8 <mp_obj_str_get_data>
   18886:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c

        const char *p = this_name + this_name_l;
   1888a:	f107 030c 	add.w	r3, r7, #12
   1888e:	681b      	ldr	r3, [r3, #0]
   18890:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
   18894:	441a      	add	r2, r3
   18896:	f107 0308 	add.w	r3, r7, #8
   1889a:	601a      	str	r2, [r3, #0]
        if (!is_pkg) {
   1889c:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
   188a0:	f083 0301 	eor.w	r3, r3, #1
   188a4:	b2db      	uxtb	r3, r3
   188a6:	2b00      	cmp	r3, #0
   188a8:	d00e      	beq.n	188c8 <mp_builtin___import__+0x124>
            // We have module, but relative imports are anchored at package, so
            // go there.
            chop_component(this_name, &p);
   188aa:	f107 0308 	add.w	r3, r7, #8
   188ae:	4619      	mov	r1, r3
   188b0:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
   188b4:	f7ff ff56 	bl	18764 <chop_component>
        }

        while (level--) {
   188b8:	e006      	b.n	188c8 <mp_builtin___import__+0x124>
            chop_component(this_name, &p);
   188ba:	f107 0308 	add.w	r3, r7, #8
   188be:	4619      	mov	r1, r3
   188c0:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
   188c4:	f7ff ff4e 	bl	18764 <chop_component>
        while (level--) {
   188c8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   188cc:	1e5a      	subs	r2, r3, #1
   188ce:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
   188d2:	2b00      	cmp	r3, #0
   188d4:	d1f1      	bne.n	188ba <mp_builtin___import__+0x116>
        }

        // We must have some component left over to import from
        if (p == this_name) {
   188d6:	f107 0308 	add.w	r3, r7, #8
   188da:	681a      	ldr	r2, [r3, #0]
   188dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   188e0:	429a      	cmp	r2, r3
   188e2:	d102      	bne.n	188ea <mp_builtin___import__+0x146>
            mp_raise_ValueError("cannot perform relative import");
   188e4:	4890      	ldr	r0, [pc, #576]	; (18b28 <mp_builtin___import__+0x384>)
   188e6:	f7f4 fb71 	bl	cfcc <mp_raise_ValueError>
        }

        uint new_mod_l = (mod_len == 0 ? (size_t)(p - this_name) : (size_t)(p - this_name) + 1 + mod_len);
   188ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   188ee:	2b00      	cmp	r3, #0
   188f0:	d107      	bne.n	18902 <mp_builtin___import__+0x15e>
   188f2:	f107 0308 	add.w	r3, r7, #8
   188f6:	681b      	ldr	r3, [r3, #0]
   188f8:	461a      	mov	r2, r3
   188fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   188fe:	1ad3      	subs	r3, r2, r3
   18900:	e00b      	b.n	1891a <mp_builtin___import__+0x176>
   18902:	f107 0308 	add.w	r3, r7, #8
   18906:	681b      	ldr	r3, [r3, #0]
   18908:	461a      	mov	r2, r3
   1890a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   1890e:	1ad3      	subs	r3, r2, r3
   18910:	461a      	mov	r2, r3
   18912:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18916:	4413      	add	r3, r2
   18918:	3301      	adds	r3, #1
   1891a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
        char *new_mod = mp_local_alloc(new_mod_l);
   1891e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
   18922:	3307      	adds	r3, #7
   18924:	3307      	adds	r3, #7
   18926:	08db      	lsrs	r3, r3, #3
   18928:	00db      	lsls	r3, r3, #3
   1892a:	ebad 0d03 	sub.w	sp, sp, r3
   1892e:	466b      	mov	r3, sp
   18930:	3307      	adds	r3, #7
   18932:	08db      	lsrs	r3, r3, #3
   18934:	00db      	lsls	r3, r3, #3
   18936:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
        memcpy(new_mod, this_name, p - this_name);
   1893a:	f107 0308 	add.w	r3, r7, #8
   1893e:	681b      	ldr	r3, [r3, #0]
   18940:	461a      	mov	r2, r3
   18942:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   18946:	1ad3      	subs	r3, r2, r3
   18948:	461a      	mov	r2, r3
   1894a:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
   1894e:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
   18952:	f003 fab7 	bl	1bec4 <memcpy>
        if (mod_len != 0) {
   18956:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   1895a:	2b00      	cmp	r3, #0
   1895c:	d01e      	beq.n	1899c <mp_builtin___import__+0x1f8>
            new_mod[p - this_name] = '.';
   1895e:	f107 0308 	add.w	r3, r7, #8
   18962:	681b      	ldr	r3, [r3, #0]
   18964:	461a      	mov	r2, r3
   18966:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   1896a:	1ad3      	subs	r3, r2, r3
   1896c:	461a      	mov	r2, r3
   1896e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
   18972:	4413      	add	r3, r2
   18974:	222e      	movs	r2, #46	; 0x2e
   18976:	701a      	strb	r2, [r3, #0]
            memcpy(new_mod + (p - this_name) + 1, mod_str, mod_len);
   18978:	f107 0308 	add.w	r3, r7, #8
   1897c:	681b      	ldr	r3, [r3, #0]
   1897e:	461a      	mov	r2, r3
   18980:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   18984:	1ad3      	subs	r3, r2, r3
   18986:	3301      	adds	r3, #1
   18988:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
   1898c:	4413      	add	r3, r2
   1898e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
   18992:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
   18996:	4618      	mov	r0, r3
   18998:	f003 fa94 	bl	1bec4 <memcpy>
        }

        qstr new_mod_q = qstr_from_strn(new_mod, new_mod_l);
   1899c:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
   189a0:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
   189a4:	f7e8 fb4a 	bl	103c <qstr_from_strn>
   189a8:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
        mp_local_free(new_mod);
   189ac:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
   189b0:	f7ff fda2 	bl	184f8 <mp_local_free>
        DEBUG_printf("Resolved base name for relative import: '%s'\n", qstr_str(new_mod_q));
        module_name = MP_OBJ_NEW_QSTR(new_mod_q);
   189b4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
   189b8:	009b      	lsls	r3, r3, #2
   189ba:	f043 0302 	orr.w	r3, r3, #2
   189be:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
        mod_str = qstr_str(new_mod_q);
   189c2:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
   189c6:	f7e8 fc15 	bl	11f4 <qstr_str>
   189ca:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
        mod_len = new_mod_l;
   189ce:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
   189d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    }

    // check if module already exists
    qstr module_name_qstr = mp_obj_str_get_qstr(module_name);
   189d6:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
   189da:	f7fc fdff 	bl	155dc <mp_obj_str_get_qstr>
   189de:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
    mp_obj_t module_obj = mp_module_get(module_name_qstr);
   189e2:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
   189e6:	f7f9 f9af 	bl	11d48 <mp_module_get>
   189ea:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
    if (module_obj != MP_OBJ_NULL) {
   189ee:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   189f2:	2b00      	cmp	r3, #0
   189f4:	d027      	beq.n	18a46 <mp_builtin___import__+0x2a2>
        DEBUG_printf("Module already loaded\n");
        // If it's not a package, return module right away
        char *p = strchr(mod_str, '.');
   189f6:	212e      	movs	r1, #46	; 0x2e
   189f8:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   189fc:	f003 fc96 	bl	1c32c <strchr>
   18a00:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
        if (p == NULL) {
   18a04:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
   18a08:	2b00      	cmp	r3, #0
   18a0a:	d102      	bne.n	18a12 <mp_builtin___import__+0x26e>
            return module_obj;
   18a0c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18a10:	e143      	b.n	18c9a <mp_builtin___import__+0x4f6>
        }
        // If fromlist is not empty, return leaf module
        if (fromtuple != mp_const_none) {
   18a12:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   18a16:	4a40      	ldr	r2, [pc, #256]	; (18b18 <mp_builtin___import__+0x374>)
   18a18:	4293      	cmp	r3, r2
   18a1a:	d002      	beq.n	18a22 <mp_builtin___import__+0x27e>
            return module_obj;
   18a1c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18a20:	e13b      	b.n	18c9a <mp_builtin___import__+0x4f6>
        }
        // Otherwise, we need to return top-level package
        qstr pkg_name = qstr_from_strn(mod_str, p - mod_str);
   18a22:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
   18a26:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   18a2a:	1ad3      	subs	r3, r2, r3
   18a2c:	4619      	mov	r1, r3
   18a2e:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   18a32:	f7e8 fb03 	bl	103c <qstr_from_strn>
   18a36:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
        return mp_module_get(pkg_name);
   18a3a:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
   18a3e:	f7f9 f983 	bl	11d48 <mp_module_get>
   18a42:	4603      	mov	r3, r0
   18a44:	e129      	b.n	18c9a <mp_builtin___import__+0x4f6>
    }
    DEBUG_printf("Module not yet loaded\n");

    uint last = 0;
   18a46:	2300      	movs	r3, #0
   18a48:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    VSTR_FIXED(path, MICROPY_ALLOC_PATH_MAX)
   18a4c:	f107 0210 	add.w	r2, r7, #16
   18a50:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18a54:	f44f 7180 	mov.w	r1, #256	; 0x100
   18a58:	4618      	mov	r0, r3
   18a5a:	f7e8 fc85 	bl	1368 <vstr_init_fixed_buf>
    module_obj = MP_OBJ_NULL;
   18a5e:	2300      	movs	r3, #0
   18a60:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    mp_obj_t top_module_obj = MP_OBJ_NULL;
   18a64:	2300      	movs	r3, #0
   18a66:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    mp_obj_t outer_module_obj = MP_OBJ_NULL;
   18a6a:	2300      	movs	r3, #0
   18a6c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    uint i;
    for (i = 1; i <= mod_len; i++) {
   18a70:	2301      	movs	r3, #1
   18a72:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   18a76:	e0ff      	b.n	18c78 <mp_builtin___import__+0x4d4>
        if (i == mod_len || mod_str[i] == '.') {
   18a78:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18a7c:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18a80:	429a      	cmp	r2, r3
   18a82:	d008      	beq.n	18a96 <mp_builtin___import__+0x2f2>
   18a84:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   18a88:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
   18a8c:	4413      	add	r3, r2
   18a8e:	781b      	ldrb	r3, [r3, #0]
   18a90:	2b2e      	cmp	r3, #46	; 0x2e
   18a92:	f040 80ec 	bne.w	18c6e <mp_builtin___import__+0x4ca>
            // create a qstr for the module name up to this depth
            qstr mod_name = qstr_from_strn(mod_str, i);
   18a96:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
   18a9a:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   18a9e:	f7e8 facd 	bl	103c <qstr_from_strn>
   18aa2:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
            DEBUG_printf("Processing module: %s\n", qstr_str(mod_name));
            DEBUG_printf("Previous path: =%.*s=\n", vstr_len(&path), vstr_str(&path));

            // find the file corresponding to the module name
            mp_import_stat_t stat;
            if (vstr_len(&path) == 0) {
   18aa6:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18aaa:	4618      	mov	r0, r3
   18aac:	f7ff fd18 	bl	184e0 <vstr_len>
   18ab0:	4603      	mov	r3, r0
   18ab2:	2b00      	cmp	r3, #0
   18ab4:	d10b      	bne.n	18ace <mp_builtin___import__+0x32a>
                // first module in the dotted-name; search for a directory or file
                stat = find_file(mod_str, i, &path);
   18ab6:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18aba:	461a      	mov	r2, r3
   18abc:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
   18ac0:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
   18ac4:	f7ff fdbc 	bl	18640 <find_file>
   18ac8:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
   18acc:	e01b      	b.n	18b06 <mp_builtin___import__+0x362>
            } else {
                // latter module in the dotted-name; append to path
                vstr_add_char(&path, PATH_SEP_CHAR);
   18ace:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18ad2:	212f      	movs	r1, #47	; 0x2f
   18ad4:	4618      	mov	r0, r3
   18ad6:	f7e8 fd7b 	bl	15d0 <vstr_add_char>
                vstr_add_strn(&path, mod_str + last, i - last);
   18ada:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   18ade:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   18ae2:	18d1      	adds	r1, r2, r3
   18ae4:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18ae8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   18aec:	1ad2      	subs	r2, r2, r3
   18aee:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18af2:	4618      	mov	r0, r3
   18af4:	f7e8 fd8e 	bl	1614 <vstr_add_strn>
                stat = stat_dir_or_file(&path);
   18af8:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18afc:	4618      	mov	r0, r3
   18afe:	f7ff fd7f 	bl	18600 <stat_dir_or_file>
   18b02:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
            }
            DEBUG_printf("Current path: %.*s\n", vstr_len(&path), vstr_str(&path));

            if (stat == MP_IMPORT_STAT_NO_EXIST) {
   18b06:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   18b0a:	2b00      	cmp	r3, #0
   18b0c:	d112      	bne.n	18b34 <mp_builtin___import__+0x390>
                #else
                {
                #endif
                    // couldn't find the file, so fail
                    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                        mp_raise_msg(&mp_type_ImportError, "module not found");
   18b0e:	4907      	ldr	r1, [pc, #28]	; (18b2c <mp_builtin___import__+0x388>)
   18b10:	4807      	ldr	r0, [pc, #28]	; (18b30 <mp_builtin___import__+0x38c>)
   18b12:	f7f4 fa43 	bl	cf9c <mp_raise_msg>
   18b16:	bf00      	nop
   18b18:	00021534 	.word	0x00021534
   18b1c:	000225a0 	.word	0x000225a0
   18b20:	00022624 	.word	0x00022624
   18b24:	000225bc 	.word	0x000225bc
   18b28:	000225d8 	.word	0x000225d8
   18b2c:	000225f8 	.word	0x000225f8
   18b30:	000204d0 	.word	0x000204d0
                            "no module named '%q'", mod_name));
                    }
                }
            } else {
                // found the file, so get the module
                module_obj = mp_module_get(mod_name);
   18b34:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   18b38:	f7f9 f906 	bl	11d48 <mp_module_get>
   18b3c:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
            }

            if (module_obj == MP_OBJ_NULL) {
   18b40:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18b44:	2b00      	cmp	r3, #0
   18b46:	d166      	bne.n	18c16 <mp_builtin___import__+0x472>
                // module not already loaded, so load it!

                module_obj = mp_obj_new_module(mod_name);
   18b48:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   18b4c:	f7f9 f89a 	bl	11c84 <mp_obj_new_module>
   18b50:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
                // for *modules* however - packages never have their names
                // replaced, instead they're -m'ed using a special __main__
                // submodule in them. (This all apparently is done to not
                // touch package name itself, which is important for future
                // imports).
                if (i == mod_len && fromtuple == mp_const_false && stat != MP_IMPORT_STAT_DIR) {
   18b54:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18b58:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18b5c:	429a      	cmp	r2, r3
   18b5e:	d114      	bne.n	18b8a <mp_builtin___import__+0x3e6>
   18b60:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   18b64:	4a4f      	ldr	r2, [pc, #316]	; (18ca4 <mp_builtin___import__+0x500>)
   18b66:	4293      	cmp	r3, r2
   18b68:	d10f      	bne.n	18b8a <mp_builtin___import__+0x3e6>
   18b6a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   18b6e:	2b01      	cmp	r3, #1
   18b70:	d00b      	beq.n	18b8a <mp_builtin___import__+0x3e6>
                    mp_obj_module_t *o = MP_OBJ_TO_PTR(module_obj);
   18b72:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18b76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
   18b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
   18b7e:	685b      	ldr	r3, [r3, #4]
   18b80:	2266      	movs	r2, #102	; 0x66
   18b82:	216e      	movs	r1, #110	; 0x6e
   18b84:	4618      	mov	r0, r3
   18b86:	f7f6 fafb 	bl	f180 <mp_obj_dict_store>
                    // Store real name in "__main__" attribute. Chosen semi-randonly, to reuse existing qstr's.
                    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___main__), MP_OBJ_NEW_QSTR(mod_name));
                    #endif
                }

                if (stat == MP_IMPORT_STAT_DIR) {
   18b8a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   18b8e:	2b01      	cmp	r3, #1
   18b90:	d13a      	bne.n	18c08 <mp_builtin___import__+0x464>
                    DEBUG_printf("%.*s is dir\n", vstr_len(&path), vstr_str(&path));
                    // https://docs.python.org/3/reference/import.html
                    // "Specifically, any module that contains a __path__ attribute is considered a package."
                    mp_store_attr(module_obj, MP_QSTR___path__, mp_obj_new_str(vstr_str(&path), vstr_len(&path)));
   18b92:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18b96:	4618      	mov	r0, r3
   18b98:	f7ff fc96 	bl	184c8 <vstr_str>
   18b9c:	4604      	mov	r4, r0
   18b9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18ba2:	4618      	mov	r0, r3
   18ba4:	f7ff fc9c 	bl	184e0 <vstr_len>
   18ba8:	4603      	mov	r3, r0
   18baa:	4619      	mov	r1, r3
   18bac:	4620      	mov	r0, r4
   18bae:	f7fc fc19 	bl	153e4 <mp_obj_new_str>
   18bb2:	4603      	mov	r3, r0
   18bb4:	461a      	mov	r2, r3
   18bb6:	211e      	movs	r1, #30
   18bb8:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
   18bbc:	f7f3 fe98 	bl	c8f0 <mp_store_attr>
                    size_t orig_path_len = path.len;
   18bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   18bc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    vstr_add_char(&path, PATH_SEP_CHAR);
   18bc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18bcc:	212f      	movs	r1, #47	; 0x2f
   18bce:	4618      	mov	r0, r3
   18bd0:	f7e8 fcfe 	bl	15d0 <vstr_add_char>
                    vstr_add_str(&path, "__init__.py");
   18bd4:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18bd8:	4933      	ldr	r1, [pc, #204]	; (18ca8 <mp_builtin___import__+0x504>)
   18bda:	4618      	mov	r0, r3
   18bdc:	f7e8 fd08 	bl	15f0 <vstr_add_str>
                    if (stat_file_py_or_mpy(&path) != MP_IMPORT_STAT_FILE) {
   18be0:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18be4:	4618      	mov	r0, r3
   18be6:	f7ff fcf5 	bl	185d4 <stat_file_py_or_mpy>
   18bea:	4603      	mov	r3, r0
   18bec:	2b02      	cmp	r3, #2
   18bee:	d106      	bne.n	18bfe <mp_builtin___import__+0x45a>
                        //mp_warning("%s is imported as namespace package", vstr_str(&path));
                    } else {
                        do_load(module_obj, &path);
   18bf0:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18bf4:	4619      	mov	r1, r3
   18bf6:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
   18bfa:	f7ff fd8b 	bl	18714 <do_load>
                    }
                    path.len = orig_path_len;
   18bfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
   18c02:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   18c06:	e006      	b.n	18c16 <mp_builtin___import__+0x472>
                } else { // MP_IMPORT_STAT_FILE
                    do_load(module_obj, &path);
   18c08:	f507 7388 	add.w	r3, r7, #272	; 0x110
   18c0c:	4619      	mov	r1, r3
   18c0e:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
   18c12:	f7ff fd7f 	bl	18714 <do_load>
                    // remaining components then it's an ImportError because the current path
                    // (the module that was just loaded) is not a package.  This will be caught
                    // on the next iteration because the file will not exist.
                }
            }
            if (outer_module_obj != MP_OBJ_NULL) {
   18c16:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
   18c1a:	2b00      	cmp	r3, #0
   18c1c:	d016      	beq.n	18c4c <mp_builtin___import__+0x4a8>
                qstr s = qstr_from_strn(mod_str + last, i - last);
   18c1e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   18c22:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   18c26:	18d0      	adds	r0, r2, r3
   18c28:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18c2c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   18c30:	1ad3      	subs	r3, r2, r3
   18c32:	4619      	mov	r1, r3
   18c34:	f7e8 fa02 	bl	103c <qstr_from_strn>
   18c38:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
                mp_store_attr(outer_module_obj, s, module_obj);
   18c3c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
   18c40:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
   18c44:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
   18c48:	f7f3 fe52 	bl	c8f0 <mp_store_attr>
            }
            outer_module_obj = module_obj;
   18c4c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18c50:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
            if (top_module_obj == MP_OBJ_NULL) {
   18c54:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
   18c58:	2b00      	cmp	r3, #0
   18c5a:	d103      	bne.n	18c64 <mp_builtin___import__+0x4c0>
                top_module_obj = module_obj;
   18c5c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18c60:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
            }
            last = i + 1;
   18c64:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
   18c68:	3301      	adds	r3, #1
   18c6a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    for (i = 1; i <= mod_len; i++) {
   18c6e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
   18c72:	3301      	adds	r3, #1
   18c74:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   18c78:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   18c7c:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   18c80:	429a      	cmp	r2, r3
   18c82:	f67f aef9 	bls.w	18a78 <mp_builtin___import__+0x2d4>
        }
    }

    // If fromlist is not empty, return leaf module
    if (fromtuple != mp_const_none) {
   18c86:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   18c8a:	4a08      	ldr	r2, [pc, #32]	; (18cac <mp_builtin___import__+0x508>)
   18c8c:	4293      	cmp	r3, r2
   18c8e:	d002      	beq.n	18c96 <mp_builtin___import__+0x4f2>
        return module_obj;
   18c90:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   18c94:	e001      	b.n	18c9a <mp_builtin___import__+0x4f6>
    }
    // Otherwise, we need to return top-level package
    return top_module_obj;
   18c96:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
}
   18c9a:	4618      	mov	r0, r3
   18c9c:	f507 77c6 	add.w	r7, r7, #396	; 0x18c
   18ca0:	46bd      	mov	sp, r7
   18ca2:	bd90      	pop	{r4, r7, pc}
   18ca4:	0001fc3c 	.word	0x0001fc3c
   18ca8:	0002260c 	.word	0x0002260c
   18cac:	00021534 	.word	0x00021534

00018cb0 <MP_OBJ_IS_OBJ>:
   18cb0:	b480      	push	{r7}
   18cb2:	b083      	sub	sp, #12
   18cb4:	af00      	add	r7, sp, #0
   18cb6:	6078      	str	r0, [r7, #4]
   18cb8:	687b      	ldr	r3, [r7, #4]
   18cba:	f003 0303 	and.w	r3, r3, #3
   18cbe:	2b00      	cmp	r3, #0
   18cc0:	bf0c      	ite	eq
   18cc2:	2301      	moveq	r3, #1
   18cc4:	2300      	movne	r3, #0
   18cc6:	b2db      	uxtb	r3, r3
   18cc8:	4618      	mov	r0, r3
   18cca:	370c      	adds	r7, #12
   18ccc:	46bd      	mov	sp, r7
   18cce:	f85d 7b04 	ldr.w	r7, [sp], #4
   18cd2:	4770      	bx	lr

00018cd4 <mp_locals_get>:
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
   18cd4:	b480      	push	{r7}
   18cd6:	af00      	add	r7, sp, #0
   18cd8:	4b03      	ldr	r3, [pc, #12]	; (18ce8 <mp_locals_get+0x14>)
   18cda:	685b      	ldr	r3, [r3, #4]
   18cdc:	4618      	mov	r0, r3
   18cde:	46bd      	mov	sp, r7
   18ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
   18ce4:	4770      	bx	lr
   18ce6:	bf00      	nop
   18ce8:	20000a2c 	.word	0x20000a2c

00018cec <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   18cec:	b480      	push	{r7}
   18cee:	af00      	add	r7, sp, #0
   18cf0:	4b03      	ldr	r3, [pc, #12]	; (18d00 <mp_globals_get+0x14>)
   18cf2:	689b      	ldr	r3, [r3, #8]
   18cf4:	4618      	mov	r0, r3
   18cf6:	46bd      	mov	sp, r7
   18cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
   18cfc:	4770      	bx	lr
   18cfe:	bf00      	nop
   18d00:	20000a2c 	.word	0x20000a2c

00018d04 <eval_exec_helper>:

#endif // MICROPY_PY_BUILTINS_COMPILE

#if MICROPY_PY_BUILTINS_EVAL_EXEC

STATIC mp_obj_t eval_exec_helper(size_t n_args, const mp_obj_t *args, mp_parse_input_kind_t parse_input_kind) {
   18d04:	b580      	push	{r7, lr}
   18d06:	b08a      	sub	sp, #40	; 0x28
   18d08:	af00      	add	r7, sp, #0
   18d0a:	60f8      	str	r0, [r7, #12]
   18d0c:	60b9      	str	r1, [r7, #8]
   18d0e:	607a      	str	r2, [r7, #4]
    // work out the context
    mp_obj_dict_t *globals = mp_globals_get();
   18d10:	f7ff ffec 	bl	18cec <mp_globals_get>
   18d14:	6278      	str	r0, [r7, #36]	; 0x24
    mp_obj_dict_t *locals = mp_locals_get();
   18d16:	f7ff ffdd 	bl	18cd4 <mp_locals_get>
   18d1a:	6238      	str	r0, [r7, #32]
    for (size_t i = 1; i < 3 && i < n_args; ++i) {
   18d1c:	2301      	movs	r3, #1
   18d1e:	61fb      	str	r3, [r7, #28]
   18d20:	e02f      	b.n	18d82 <eval_exec_helper+0x7e>
        if (args[i] != mp_const_none) {
   18d22:	69fb      	ldr	r3, [r7, #28]
   18d24:	009b      	lsls	r3, r3, #2
   18d26:	68ba      	ldr	r2, [r7, #8]
   18d28:	4413      	add	r3, r2
   18d2a:	681b      	ldr	r3, [r3, #0]
   18d2c:	4a26      	ldr	r2, [pc, #152]	; (18dc8 <eval_exec_helper+0xc4>)
   18d2e:	4293      	cmp	r3, r2
   18d30:	d024      	beq.n	18d7c <eval_exec_helper+0x78>
            if (!MP_OBJ_IS_TYPE(args[i], &mp_type_dict)) {
   18d32:	69fb      	ldr	r3, [r7, #28]
   18d34:	009b      	lsls	r3, r3, #2
   18d36:	68ba      	ldr	r2, [r7, #8]
   18d38:	4413      	add	r3, r2
   18d3a:	681b      	ldr	r3, [r3, #0]
   18d3c:	4618      	mov	r0, r3
   18d3e:	f7ff ffb7 	bl	18cb0 <MP_OBJ_IS_OBJ>
   18d42:	4603      	mov	r3, r0
   18d44:	f083 0301 	eor.w	r3, r3, #1
   18d48:	b2db      	uxtb	r3, r3
   18d4a:	2b00      	cmp	r3, #0
   18d4c:	d108      	bne.n	18d60 <eval_exec_helper+0x5c>
   18d4e:	69fb      	ldr	r3, [r7, #28]
   18d50:	009b      	lsls	r3, r3, #2
   18d52:	68ba      	ldr	r2, [r7, #8]
   18d54:	4413      	add	r3, r2
   18d56:	681b      	ldr	r3, [r3, #0]
   18d58:	681b      	ldr	r3, [r3, #0]
   18d5a:	4a1c      	ldr	r2, [pc, #112]	; (18dcc <eval_exec_helper+0xc8>)
   18d5c:	4293      	cmp	r3, r2
   18d5e:	d002      	beq.n	18d66 <eval_exec_helper+0x62>
                mp_raise_TypeError(NULL);
   18d60:	2000      	movs	r0, #0
   18d62:	f7f4 f93d 	bl	cfe0 <mp_raise_TypeError>
            }
            locals = MP_OBJ_TO_PTR(args[i]);
   18d66:	69fb      	ldr	r3, [r7, #28]
   18d68:	009b      	lsls	r3, r3, #2
   18d6a:	68ba      	ldr	r2, [r7, #8]
   18d6c:	4413      	add	r3, r2
   18d6e:	681b      	ldr	r3, [r3, #0]
   18d70:	623b      	str	r3, [r7, #32]
            if (i == 1) {
   18d72:	69fb      	ldr	r3, [r7, #28]
   18d74:	2b01      	cmp	r3, #1
   18d76:	d101      	bne.n	18d7c <eval_exec_helper+0x78>
                globals = locals;
   18d78:	6a3b      	ldr	r3, [r7, #32]
   18d7a:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t i = 1; i < 3 && i < n_args; ++i) {
   18d7c:	69fb      	ldr	r3, [r7, #28]
   18d7e:	3301      	adds	r3, #1
   18d80:	61fb      	str	r3, [r7, #28]
   18d82:	69fb      	ldr	r3, [r7, #28]
   18d84:	2b02      	cmp	r3, #2
   18d86:	d803      	bhi.n	18d90 <eval_exec_helper+0x8c>
   18d88:	69fa      	ldr	r2, [r7, #28]
   18d8a:	68fb      	ldr	r3, [r7, #12]
   18d8c:	429a      	cmp	r2, r3
   18d8e:	d3c8      	bcc.n	18d22 <eval_exec_helper+0x1e>
        return code_execute(MP_OBJ_TO_PTR(args[0]), globals, locals);
    }
    #endif

    size_t str_len;
    const char *str = mp_obj_str_get_data(args[0], &str_len);
   18d90:	68bb      	ldr	r3, [r7, #8]
   18d92:	681b      	ldr	r3, [r3, #0]
   18d94:	f107 0210 	add.w	r2, r7, #16
   18d98:	4611      	mov	r1, r2
   18d9a:	4618      	mov	r0, r3
   18d9c:	f7fc fc84 	bl	156a8 <mp_obj_str_get_data>
   18da0:	61b8      	str	r0, [r7, #24]
    mp_lexer_t *lex;
    if (MICROPY_PY_BUILTINS_EXECFILE && parse_input_kind == MP_PARSE_SINGLE_INPUT) {
        lex = mp_lexer_new_from_file(str);
        parse_input_kind = MP_PARSE_FILE_INPUT;
    } else {
        lex = mp_lexer_new_from_str_len(MP_QSTR__lt_string_gt_, str, str_len, 0);
   18da2:	693a      	ldr	r2, [r7, #16]
   18da4:	2300      	movs	r3, #0
   18da6:	69b9      	ldr	r1, [r7, #24]
   18da8:	2035      	movs	r0, #53	; 0x35
   18daa:	f7ea fcbb 	bl	3724 <mp_lexer_new_from_str_len>
   18dae:	6178      	str	r0, [r7, #20]
    }

    return mp_parse_compile_execute(lex, parse_input_kind, globals, locals);
   18db0:	6a3b      	ldr	r3, [r7, #32]
   18db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   18db4:	6879      	ldr	r1, [r7, #4]
   18db6:	6978      	ldr	r0, [r7, #20]
   18db8:	f7f4 f884 	bl	cec4 <mp_parse_compile_execute>
   18dbc:	4603      	mov	r3, r0
}
   18dbe:	4618      	mov	r0, r3
   18dc0:	3728      	adds	r7, #40	; 0x28
   18dc2:	46bd      	mov	sp, r7
   18dc4:	bd80      	pop	{r7, pc}
   18dc6:	bf00      	nop
   18dc8:	00021534 	.word	0x00021534
   18dcc:	000200e8 	.word	0x000200e8

00018dd0 <mp_builtin_eval>:

STATIC mp_obj_t mp_builtin_eval(size_t n_args, const mp_obj_t *args) {
   18dd0:	b580      	push	{r7, lr}
   18dd2:	b082      	sub	sp, #8
   18dd4:	af00      	add	r7, sp, #0
   18dd6:	6078      	str	r0, [r7, #4]
   18dd8:	6039      	str	r1, [r7, #0]
    return eval_exec_helper(n_args, args, MP_PARSE_EVAL_INPUT);
   18dda:	2202      	movs	r2, #2
   18ddc:	6839      	ldr	r1, [r7, #0]
   18dde:	6878      	ldr	r0, [r7, #4]
   18de0:	f7ff ff90 	bl	18d04 <eval_exec_helper>
   18de4:	4603      	mov	r3, r0
}
   18de6:	4618      	mov	r0, r3
   18de8:	3708      	adds	r7, #8
   18dea:	46bd      	mov	sp, r7
   18dec:	bd80      	pop	{r7, pc}
   18dee:	bf00      	nop

00018df0 <mp_builtin_exec>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_eval_obj, 1, 3, mp_builtin_eval);

STATIC mp_obj_t mp_builtin_exec(size_t n_args, const mp_obj_t *args) {
   18df0:	b580      	push	{r7, lr}
   18df2:	b082      	sub	sp, #8
   18df4:	af00      	add	r7, sp, #0
   18df6:	6078      	str	r0, [r7, #4]
   18df8:	6039      	str	r1, [r7, #0]
    return eval_exec_helper(n_args, args, MP_PARSE_FILE_INPUT);
   18dfa:	2201      	movs	r2, #1
   18dfc:	6839      	ldr	r1, [r7, #0]
   18dfe:	6878      	ldr	r0, [r7, #4]
   18e00:	f7ff ff80 	bl	18d04 <eval_exec_helper>
   18e04:	4603      	mov	r3, r0
}
   18e06:	4618      	mov	r0, r3
   18e08:	3708      	adds	r7, #8
   18e0a:	46bd      	mov	sp, r7
   18e0c:	bd80      	pop	{r7, pc}
   18e0e:	bf00      	nop

00018e10 <MP_OBJ_IS_SMALL_INT>:
    { return ((((mp_int_t)(o)) & 1) != 0); }
   18e10:	b480      	push	{r7}
   18e12:	b083      	sub	sp, #12
   18e14:	af00      	add	r7, sp, #0
   18e16:	6078      	str	r0, [r7, #4]
   18e18:	687b      	ldr	r3, [r7, #4]
   18e1a:	f003 0301 	and.w	r3, r3, #1
   18e1e:	2b00      	cmp	r3, #0
   18e20:	bf14      	ite	ne
   18e22:	2301      	movne	r3, #1
   18e24:	2300      	moveq	r3, #0
   18e26:	b2db      	uxtb	r3, r3
   18e28:	4618      	mov	r0, r3
   18e2a:	370c      	adds	r7, #12
   18e2c:	46bd      	mov	sp, r7
   18e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
   18e32:	4770      	bx	lr

00018e34 <MP_OBJ_IS_OBJ>:
    { return ((((mp_int_t)(o)) & 3) == 0); }
   18e34:	b480      	push	{r7}
   18e36:	b083      	sub	sp, #12
   18e38:	af00      	add	r7, sp, #0
   18e3a:	6078      	str	r0, [r7, #4]
   18e3c:	687b      	ldr	r3, [r7, #4]
   18e3e:	f003 0303 	and.w	r3, r3, #3
   18e42:	2b00      	cmp	r3, #0
   18e44:	bf0c      	ite	eq
   18e46:	2301      	moveq	r3, #1
   18e48:	2300      	movne	r3, #0
   18e4a:	b2db      	uxtb	r3, r3
   18e4c:	4618      	mov	r0, r3
   18e4e:	370c      	adds	r7, #12
   18e50:	46bd      	mov	sp, r7
   18e52:	f85d 7b04 	ldr.w	r7, [sp], #4
   18e56:	4770      	bx	lr

00018e58 <MP_MAP_SLOT_IS_FILLED>:
static inline bool MP_MAP_SLOT_IS_FILLED(const mp_map_t *map, size_t pos) { return ((map)->table[pos].key != MP_OBJ_NULL && (map)->table[pos].key != MP_OBJ_SENTINEL); }
   18e58:	b480      	push	{r7}
   18e5a:	b083      	sub	sp, #12
   18e5c:	af00      	add	r7, sp, #0
   18e5e:	6078      	str	r0, [r7, #4]
   18e60:	6039      	str	r1, [r7, #0]
   18e62:	687b      	ldr	r3, [r7, #4]
   18e64:	689a      	ldr	r2, [r3, #8]
   18e66:	683b      	ldr	r3, [r7, #0]
   18e68:	00db      	lsls	r3, r3, #3
   18e6a:	4413      	add	r3, r2
   18e6c:	681b      	ldr	r3, [r3, #0]
   18e6e:	2b00      	cmp	r3, #0
   18e70:	d009      	beq.n	18e86 <MP_MAP_SLOT_IS_FILLED+0x2e>
   18e72:	687b      	ldr	r3, [r7, #4]
   18e74:	689a      	ldr	r2, [r3, #8]
   18e76:	683b      	ldr	r3, [r7, #0]
   18e78:	00db      	lsls	r3, r3, #3
   18e7a:	4413      	add	r3, r2
   18e7c:	681b      	ldr	r3, [r3, #0]
   18e7e:	2b08      	cmp	r3, #8
   18e80:	d001      	beq.n	18e86 <MP_MAP_SLOT_IS_FILLED+0x2e>
   18e82:	2301      	movs	r3, #1
   18e84:	e000      	b.n	18e88 <MP_MAP_SLOT_IS_FILLED+0x30>
   18e86:	2300      	movs	r3, #0
   18e88:	f003 0301 	and.w	r3, r3, #1
   18e8c:	b2db      	uxtb	r3, r3
   18e8e:	4618      	mov	r0, r3
   18e90:	370c      	adds	r7, #12
   18e92:	46bd      	mov	sp, r7
   18e94:	f85d 7b04 	ldr.w	r7, [sp], #4
   18e98:	4770      	bx	lr
   18e9a:	bf00      	nop

00018e9c <mp_obj_new_bool>:
static inline mp_obj_t mp_obj_new_bool(mp_int_t x) { return x ? mp_const_true : mp_const_false; }
   18e9c:	b480      	push	{r7}
   18e9e:	b083      	sub	sp, #12
   18ea0:	af00      	add	r7, sp, #0
   18ea2:	6078      	str	r0, [r7, #4]
   18ea4:	687b      	ldr	r3, [r7, #4]
   18ea6:	2b00      	cmp	r3, #0
   18ea8:	d001      	beq.n	18eae <mp_obj_new_bool+0x12>
   18eaa:	4b04      	ldr	r3, [pc, #16]	; (18ebc <mp_obj_new_bool+0x20>)
   18eac:	e000      	b.n	18eb0 <mp_obj_new_bool+0x14>
   18eae:	4b04      	ldr	r3, [pc, #16]	; (18ec0 <mp_obj_new_bool+0x24>)
   18eb0:	4618      	mov	r0, r3
   18eb2:	370c      	adds	r7, #12
   18eb4:	46bd      	mov	sp, r7
   18eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
   18eba:	4770      	bx	lr
   18ebc:	0001fc44 	.word	0x0001fc44
   18ec0:	0001fc3c 	.word	0x0001fc3c

00018ec4 <mp_locals_get>:
static inline mp_obj_dict_t *mp_locals_get(void) { return MP_STATE_THREAD(dict_locals); }
   18ec4:	b480      	push	{r7}
   18ec6:	af00      	add	r7, sp, #0
   18ec8:	4b03      	ldr	r3, [pc, #12]	; (18ed8 <mp_locals_get+0x14>)
   18eca:	685b      	ldr	r3, [r3, #4]
   18ecc:	4618      	mov	r0, r3
   18ece:	46bd      	mov	sp, r7
   18ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
   18ed4:	4770      	bx	lr
   18ed6:	bf00      	nop
   18ed8:	20000a2c 	.word	0x20000a2c

00018edc <mp_locals_set>:
static inline void mp_locals_set(mp_obj_dict_t *d) { MP_STATE_THREAD(dict_locals) = d; }
   18edc:	b480      	push	{r7}
   18ede:	b083      	sub	sp, #12
   18ee0:	af00      	add	r7, sp, #0
   18ee2:	6078      	str	r0, [r7, #4]
   18ee4:	4a04      	ldr	r2, [pc, #16]	; (18ef8 <mp_locals_set+0x1c>)
   18ee6:	687b      	ldr	r3, [r7, #4]
   18ee8:	6053      	str	r3, [r2, #4]
   18eea:	bf00      	nop
   18eec:	370c      	adds	r7, #12
   18eee:	46bd      	mov	sp, r7
   18ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
   18ef4:	4770      	bx	lr
   18ef6:	bf00      	nop
   18ef8:	20000a2c 	.word	0x20000a2c

00018efc <mp_globals_get>:
static inline mp_obj_dict_t *mp_globals_get(void) { return MP_STATE_THREAD(dict_globals); }
   18efc:	b480      	push	{r7}
   18efe:	af00      	add	r7, sp, #0
   18f00:	4b03      	ldr	r3, [pc, #12]	; (18f10 <mp_globals_get+0x14>)
   18f02:	689b      	ldr	r3, [r3, #8]
   18f04:	4618      	mov	r0, r3
   18f06:	46bd      	mov	sp, r7
   18f08:	f85d 7b04 	ldr.w	r7, [sp], #4
   18f0c:	4770      	bx	lr
   18f0e:	bf00      	nop
   18f10:	20000a2c 	.word	0x20000a2c

00018f14 <mp_builtin___build_class__>:
#endif

// args[0] is function from class body
// args[1] is class name
// args[2:] are base objects
STATIC mp_obj_t mp_builtin___build_class__(size_t n_args, const mp_obj_t *args) {
   18f14:	b580      	push	{r7, lr}
   18f16:	b08a      	sub	sp, #40	; 0x28
   18f18:	af00      	add	r7, sp, #0
   18f1a:	6078      	str	r0, [r7, #4]
   18f1c:	6039      	str	r1, [r7, #0]
    assert(2 <= n_args);
   18f1e:	687b      	ldr	r3, [r7, #4]
   18f20:	2b01      	cmp	r3, #1
   18f22:	d805      	bhi.n	18f30 <mp_builtin___build_class__+0x1c>
   18f24:	4b24      	ldr	r3, [pc, #144]	; (18fb8 <mp_builtin___build_class__+0xa4>)
   18f26:	4a25      	ldr	r2, [pc, #148]	; (18fbc <mp_builtin___build_class__+0xa8>)
   18f28:	2132      	movs	r1, #50	; 0x32
   18f2a:	4825      	ldr	r0, [pc, #148]	; (18fc0 <mp_builtin___build_class__+0xac>)
   18f2c:	f002 fa1e 	bl	1b36c <__assert_func>

    // set the new classes __locals__ object
    mp_obj_dict_t *old_locals = mp_locals_get();
   18f30:	f7ff ffc8 	bl	18ec4 <mp_locals_get>
   18f34:	6238      	str	r0, [r7, #32]
    mp_obj_t class_locals = mp_obj_new_dict(0);
   18f36:	2000      	movs	r0, #0
   18f38:	f7f6 f900 	bl	f13c <mp_obj_new_dict>
   18f3c:	61f8      	str	r0, [r7, #28]
    mp_locals_set(MP_OBJ_TO_PTR(class_locals));
   18f3e:	69f8      	ldr	r0, [r7, #28]
   18f40:	f7ff ffcc 	bl	18edc <mp_locals_set>

    // call the class code
    mp_obj_t cell = mp_call_function_0(args[0]);
   18f44:	683b      	ldr	r3, [r7, #0]
   18f46:	681b      	ldr	r3, [r3, #0]
   18f48:	4618      	mov	r0, r3
   18f4a:	f7f2 ff4f 	bl	bdec <mp_call_function_0>
   18f4e:	61b8      	str	r0, [r7, #24]

    // restore old __locals__ object
    mp_locals_set(old_locals);
   18f50:	6a38      	ldr	r0, [r7, #32]
   18f52:	f7ff ffc3 	bl	18edc <mp_locals_set>

    // get the class type (meta object) from the base objects
    mp_obj_t meta;
    if (n_args == 2) {
   18f56:	687b      	ldr	r3, [r7, #4]
   18f58:	2b02      	cmp	r3, #2
   18f5a:	d102      	bne.n	18f62 <mp_builtin___build_class__+0x4e>
        // no explicit bases, so use 'type'
        meta = MP_OBJ_FROM_PTR(&mp_type_type);
   18f5c:	4b19      	ldr	r3, [pc, #100]	; (18fc4 <mp_builtin___build_class__+0xb0>)
   18f5e:	627b      	str	r3, [r7, #36]	; 0x24
   18f60:	e006      	b.n	18f70 <mp_builtin___build_class__+0x5c>
    } else {
        // use type of first base object
        meta = MP_OBJ_FROM_PTR(mp_obj_get_type(args[2]));
   18f62:	683b      	ldr	r3, [r7, #0]
   18f64:	3308      	adds	r3, #8
   18f66:	681b      	ldr	r3, [r3, #0]
   18f68:	4618      	mov	r0, r3
   18f6a:	f7f4 fc53 	bl	d814 <mp_obj_get_type>
   18f6e:	6278      	str	r0, [r7, #36]	; 0x24

    // TODO do proper metaclass resolution for multiple base objects

    // create the new class using a call to the meta object
    mp_obj_t meta_args[3];
    meta_args[0] = args[1]; // class name
   18f70:	683b      	ldr	r3, [r7, #0]
   18f72:	685b      	ldr	r3, [r3, #4]
   18f74:	60bb      	str	r3, [r7, #8]
    meta_args[1] = mp_obj_new_tuple(n_args - 2, args + 2); // tuple of bases
   18f76:	687b      	ldr	r3, [r7, #4]
   18f78:	1e9a      	subs	r2, r3, #2
   18f7a:	683b      	ldr	r3, [r7, #0]
   18f7c:	3308      	adds	r3, #8
   18f7e:	4619      	mov	r1, r3
   18f80:	4610      	mov	r0, r2
   18f82:	f7fc ff35 	bl	15df0 <mp_obj_new_tuple>
   18f86:	4603      	mov	r3, r0
   18f88:	60fb      	str	r3, [r7, #12]
    meta_args[2] = class_locals; // dict of members
   18f8a:	69fb      	ldr	r3, [r7, #28]
   18f8c:	613b      	str	r3, [r7, #16]
    mp_obj_t new_class = mp_call_function_n_kw(meta, 3, 0, meta_args);
   18f8e:	f107 0308 	add.w	r3, r7, #8
   18f92:	2200      	movs	r2, #0
   18f94:	2103      	movs	r1, #3
   18f96:	6a78      	ldr	r0, [r7, #36]	; 0x24
   18f98:	f7f2 ff5e 	bl	be58 <mp_call_function_n_kw>
   18f9c:	6178      	str	r0, [r7, #20]

    // store into cell if neede
    if (cell != mp_const_none) {
   18f9e:	69bb      	ldr	r3, [r7, #24]
   18fa0:	4a09      	ldr	r2, [pc, #36]	; (18fc8 <mp_builtin___build_class__+0xb4>)
   18fa2:	4293      	cmp	r3, r2
   18fa4:	d003      	beq.n	18fae <mp_builtin___build_class__+0x9a>
        mp_obj_cell_set(cell, new_class);
   18fa6:	6979      	ldr	r1, [r7, #20]
   18fa8:	69b8      	ldr	r0, [r7, #24]
   18faa:	f7f5 f987 	bl	e2bc <mp_obj_cell_set>
    }

    return new_class;
   18fae:	697b      	ldr	r3, [r7, #20]
}
   18fb0:	4618      	mov	r0, r3
   18fb2:	3728      	adds	r7, #40	; 0x28
   18fb4:	46bd      	mov	sp, r7
   18fb6:	bd80      	pop	{r7, pc}
   18fb8:	00022654 	.word	0x00022654
   18fbc:	00022a80 	.word	0x00022a80
   18fc0:	00022660 	.word	0x00022660
   18fc4:	00022160 	.word	0x00022160
   18fc8:	00021534 	.word	0x00021534

00018fcc <mp_builtin_abs>:
MP_DEFINE_CONST_FUN_OBJ_VAR(mp_builtin___build_class___obj, 2, mp_builtin___build_class__);

STATIC mp_obj_t mp_builtin_abs(mp_obj_t o_in) {
   18fcc:	b580      	push	{r7, lr}
   18fce:	b082      	sub	sp, #8
   18fd0:	af00      	add	r7, sp, #0
   18fd2:	6078      	str	r0, [r7, #4]
    return mp_unary_op(MP_UNARY_OP_ABS, o_in);
   18fd4:	6879      	ldr	r1, [r7, #4]
   18fd6:	2007      	movs	r0, #7
   18fd8:	f7f2 fbc4 	bl	b764 <mp_unary_op>
   18fdc:	4603      	mov	r3, r0
}
   18fde:	4618      	mov	r0, r3
   18fe0:	3708      	adds	r7, #8
   18fe2:	46bd      	mov	sp, r7
   18fe4:	bd80      	pop	{r7, pc}
   18fe6:	bf00      	nop

00018fe8 <mp_builtin_all>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_abs_obj, mp_builtin_abs);

STATIC mp_obj_t mp_builtin_all(mp_obj_t o_in) {
   18fe8:	b580      	push	{r7, lr}
   18fea:	b088      	sub	sp, #32
   18fec:	af00      	add	r7, sp, #0
   18fee:	6078      	str	r0, [r7, #4]
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(o_in, &iter_buf);
   18ff0:	f107 0308 	add.w	r3, r7, #8
   18ff4:	4619      	mov	r1, r3
   18ff6:	6878      	ldr	r0, [r7, #4]
   18ff8:	f7f3 fca2 	bl	c940 <mp_getiter>
   18ffc:	61f8      	str	r0, [r7, #28]
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   18ffe:	e00a      	b.n	19016 <mp_builtin_all+0x2e>
        if (!mp_obj_is_true(item)) {
   19000:	69b8      	ldr	r0, [r7, #24]
   19002:	f7f4 fce5 	bl	d9d0 <mp_obj_is_true>
   19006:	4603      	mov	r3, r0
   19008:	f083 0301 	eor.w	r3, r3, #1
   1900c:	b2db      	uxtb	r3, r3
   1900e:	2b00      	cmp	r3, #0
   19010:	d001      	beq.n	19016 <mp_builtin_all+0x2e>
            return mp_const_false;
   19012:	4b07      	ldr	r3, [pc, #28]	; (19030 <mp_builtin_all+0x48>)
   19014:	e007      	b.n	19026 <mp_builtin_all+0x3e>
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   19016:	69f8      	ldr	r0, [r7, #28]
   19018:	f7f3 fd14 	bl	ca44 <mp_iternext>
   1901c:	61b8      	str	r0, [r7, #24]
   1901e:	69bb      	ldr	r3, [r7, #24]
   19020:	2b04      	cmp	r3, #4
   19022:	d1ed      	bne.n	19000 <mp_builtin_all+0x18>
        }
    }
    return mp_const_true;
   19024:	4b03      	ldr	r3, [pc, #12]	; (19034 <mp_builtin_all+0x4c>)
}
   19026:	4618      	mov	r0, r3
   19028:	3720      	adds	r7, #32
   1902a:	46bd      	mov	sp, r7
   1902c:	bd80      	pop	{r7, pc}
   1902e:	bf00      	nop
   19030:	0001fc3c 	.word	0x0001fc3c
   19034:	0001fc44 	.word	0x0001fc44

00019038 <mp_builtin_any>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_all_obj, mp_builtin_all);

STATIC mp_obj_t mp_builtin_any(mp_obj_t o_in) {
   19038:	b580      	push	{r7, lr}
   1903a:	b088      	sub	sp, #32
   1903c:	af00      	add	r7, sp, #0
   1903e:	6078      	str	r0, [r7, #4]
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(o_in, &iter_buf);
   19040:	f107 0308 	add.w	r3, r7, #8
   19044:	4619      	mov	r1, r3
   19046:	6878      	ldr	r0, [r7, #4]
   19048:	f7f3 fc7a 	bl	c940 <mp_getiter>
   1904c:	61f8      	str	r0, [r7, #28]
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   1904e:	e007      	b.n	19060 <mp_builtin_any+0x28>
        if (mp_obj_is_true(item)) {
   19050:	69b8      	ldr	r0, [r7, #24]
   19052:	f7f4 fcbd 	bl	d9d0 <mp_obj_is_true>
   19056:	4603      	mov	r3, r0
   19058:	2b00      	cmp	r3, #0
   1905a:	d001      	beq.n	19060 <mp_builtin_any+0x28>
            return mp_const_true;
   1905c:	4b06      	ldr	r3, [pc, #24]	; (19078 <mp_builtin_any+0x40>)
   1905e:	e007      	b.n	19070 <mp_builtin_any+0x38>
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   19060:	69f8      	ldr	r0, [r7, #28]
   19062:	f7f3 fcef 	bl	ca44 <mp_iternext>
   19066:	61b8      	str	r0, [r7, #24]
   19068:	69bb      	ldr	r3, [r7, #24]
   1906a:	2b04      	cmp	r3, #4
   1906c:	d1f0      	bne.n	19050 <mp_builtin_any+0x18>
        }
    }
    return mp_const_false;
   1906e:	4b03      	ldr	r3, [pc, #12]	; (1907c <mp_builtin_any+0x44>)
}
   19070:	4618      	mov	r0, r3
   19072:	3720      	adds	r7, #32
   19074:	46bd      	mov	sp, r7
   19076:	bd80      	pop	{r7, pc}
   19078:	0001fc44 	.word	0x0001fc44
   1907c:	0001fc3c 	.word	0x0001fc3c

00019080 <mp_builtin_bin>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_any_obj, mp_builtin_any);

STATIC mp_obj_t mp_builtin_bin(mp_obj_t o_in) {
   19080:	b580      	push	{r7, lr}
   19082:	b084      	sub	sp, #16
   19084:	af00      	add	r7, sp, #0
   19086:	6078      	str	r0, [r7, #4]
    mp_obj_t args[] = { MP_OBJ_NEW_QSTR(MP_QSTR__brace_open__colon__hash_b_brace_close_), o_in };
   19088:	23ae      	movs	r3, #174	; 0xae
   1908a:	60bb      	str	r3, [r7, #8]
   1908c:	687b      	ldr	r3, [r7, #4]
   1908e:	60fb      	str	r3, [r7, #12]
    return mp_obj_str_format(MP_ARRAY_SIZE(args), args, NULL);
   19090:	f107 0308 	add.w	r3, r7, #8
   19094:	2200      	movs	r2, #0
   19096:	4619      	mov	r1, r3
   19098:	2002      	movs	r0, #2
   1909a:	f7fb f975 	bl	14388 <mp_obj_str_format>
   1909e:	4603      	mov	r3, r0
}
   190a0:	4618      	mov	r0, r3
   190a2:	3710      	adds	r7, #16
   190a4:	46bd      	mov	sp, r7
   190a6:	bd80      	pop	{r7, pc}

000190a8 <mp_builtin_callable>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_bin_obj, mp_builtin_bin);

STATIC mp_obj_t mp_builtin_callable(mp_obj_t o_in) {
   190a8:	b580      	push	{r7, lr}
   190aa:	b082      	sub	sp, #8
   190ac:	af00      	add	r7, sp, #0
   190ae:	6078      	str	r0, [r7, #4]
    if (mp_obj_is_callable(o_in)) {
   190b0:	6878      	ldr	r0, [r7, #4]
   190b2:	f7f4 fce3 	bl	da7c <mp_obj_is_callable>
   190b6:	4603      	mov	r3, r0
   190b8:	2b00      	cmp	r3, #0
   190ba:	d001      	beq.n	190c0 <mp_builtin_callable+0x18>
        return mp_const_true;
   190bc:	4b03      	ldr	r3, [pc, #12]	; (190cc <mp_builtin_callable+0x24>)
   190be:	e000      	b.n	190c2 <mp_builtin_callable+0x1a>
    } else {
        return mp_const_false;
   190c0:	4b03      	ldr	r3, [pc, #12]	; (190d0 <mp_builtin_callable+0x28>)
    }
}
   190c2:	4618      	mov	r0, r3
   190c4:	3708      	adds	r7, #8
   190c6:	46bd      	mov	sp, r7
   190c8:	bd80      	pop	{r7, pc}
   190ca:	bf00      	nop
   190cc:	0001fc44 	.word	0x0001fc44
   190d0:	0001fc3c 	.word	0x0001fc3c

000190d4 <mp_builtin_chr>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_callable_obj, mp_builtin_callable);

STATIC mp_obj_t mp_builtin_chr(mp_obj_t o_in) {
   190d4:	b580      	push	{r7, lr}
   190d6:	b084      	sub	sp, #16
   190d8:	af00      	add	r7, sp, #0
   190da:	6078      	str	r0, [r7, #4]
    } else {
        mp_raise_ValueError("chr() arg not in range(0x110000)");
    }
    return mp_obj_new_str_via_qstr((char*)str, len);
    #else
    mp_int_t ord = mp_obj_get_int(o_in);
   190dc:	6878      	ldr	r0, [r7, #4]
   190de:	f7f4 fd77 	bl	dbd0 <mp_obj_get_int>
   190e2:	60f8      	str	r0, [r7, #12]
    if (0 <= ord && ord <= 0xff) {
   190e4:	68fb      	ldr	r3, [r7, #12]
   190e6:	2b00      	cmp	r3, #0
   190e8:	db0d      	blt.n	19106 <mp_builtin_chr+0x32>
   190ea:	68fb      	ldr	r3, [r7, #12]
   190ec:	2bff      	cmp	r3, #255	; 0xff
   190ee:	dc0a      	bgt.n	19106 <mp_builtin_chr+0x32>
        uint8_t str[1] = {ord};
   190f0:	68fb      	ldr	r3, [r7, #12]
   190f2:	b2db      	uxtb	r3, r3
   190f4:	723b      	strb	r3, [r7, #8]
        return mp_obj_new_str_via_qstr((char*)str, 1);
   190f6:	f107 0308 	add.w	r3, r7, #8
   190fa:	2101      	movs	r1, #1
   190fc:	4618      	mov	r0, r3
   190fe:	f7fc f8fd 	bl	152fc <mp_obj_new_str_via_qstr>
   19102:	4603      	mov	r3, r0
   19104:	e002      	b.n	1910c <mp_builtin_chr+0x38>
    } else {
        mp_raise_ValueError("chr() arg not in range(256)");
   19106:	4803      	ldr	r0, [pc, #12]	; (19114 <mp_builtin_chr+0x40>)
   19108:	f7f3 ff60 	bl	cfcc <mp_raise_ValueError>
    }
    #endif
}
   1910c:	4618      	mov	r0, r3
   1910e:	3710      	adds	r7, #16
   19110:	46bd      	mov	sp, r7
   19112:	bd80      	pop	{r7, pc}
   19114:	000226ac 	.word	0x000226ac

00019118 <mp_builtin_dir>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_chr_obj, mp_builtin_chr);

STATIC mp_obj_t mp_builtin_dir(size_t n_args, const mp_obj_t *args) {
   19118:	b580      	push	{r7, lr}
   1911a:	b08a      	sub	sp, #40	; 0x28
   1911c:	af00      	add	r7, sp, #0
   1911e:	6078      	str	r0, [r7, #4]
   19120:	6039      	str	r1, [r7, #0]
    mp_obj_t dir = mp_obj_new_list(0, NULL);
   19122:	2100      	movs	r1, #0
   19124:	2000      	movs	r0, #0
   19126:	f7f8 fbbb 	bl	118a0 <mp_obj_new_list>
   1912a:	61f8      	str	r0, [r7, #28]
    if (n_args == 0) {
   1912c:	687b      	ldr	r3, [r7, #4]
   1912e:	2b00      	cmp	r3, #0
   19130:	d121      	bne.n	19176 <mp_builtin_dir+0x5e>
        // Make a list of names in the local namespace
        mp_obj_dict_t *dict = mp_locals_get();
   19132:	f7ff fec7 	bl	18ec4 <mp_locals_get>
   19136:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0; i < dict->map.alloc; i++) {
   19138:	2300      	movs	r3, #0
   1913a:	627b      	str	r3, [r7, #36]	; 0x24
   1913c:	e015      	b.n	1916a <mp_builtin_dir+0x52>
            if (MP_MAP_SLOT_IS_FILLED(&dict->map, i)) {
   1913e:	69bb      	ldr	r3, [r7, #24]
   19140:	3304      	adds	r3, #4
   19142:	6a79      	ldr	r1, [r7, #36]	; 0x24
   19144:	4618      	mov	r0, r3
   19146:	f7ff fe87 	bl	18e58 <MP_MAP_SLOT_IS_FILLED>
   1914a:	4603      	mov	r3, r0
   1914c:	2b00      	cmp	r3, #0
   1914e:	d009      	beq.n	19164 <mp_builtin_dir+0x4c>
                mp_obj_list_append(dir, dict->map.table[i].key);
   19150:	69bb      	ldr	r3, [r7, #24]
   19152:	68da      	ldr	r2, [r3, #12]
   19154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19156:	00db      	lsls	r3, r3, #3
   19158:	4413      	add	r3, r2
   1915a:	681b      	ldr	r3, [r3, #0]
   1915c:	4619      	mov	r1, r3
   1915e:	69f8      	ldr	r0, [r7, #28]
   19160:	f7f7 ff0c 	bl	10f7c <mp_obj_list_append>
        for (size_t i = 0; i < dict->map.alloc; i++) {
   19164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19166:	3301      	adds	r3, #1
   19168:	627b      	str	r3, [r7, #36]	; 0x24
   1916a:	69bb      	ldr	r3, [r7, #24]
   1916c:	689a      	ldr	r2, [r3, #8]
   1916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19170:	429a      	cmp	r2, r3
   19172:	d8e4      	bhi.n	1913e <mp_builtin_dir+0x26>
   19174:	e024      	b.n	191c0 <mp_builtin_dir+0xa8>
            }
        }
    } else { // n_args == 1
        // Make a list of names in the given object
        // Implemented by probing all possible qstrs with mp_load_method_maybe
        size_t nqstr = QSTR_TOTAL();
   19176:	4b15      	ldr	r3, [pc, #84]	; (191cc <mp_builtin_dir+0xb4>)
   19178:	691b      	ldr	r3, [r3, #16]
   1917a:	685a      	ldr	r2, [r3, #4]
   1917c:	4b13      	ldr	r3, [pc, #76]	; (191cc <mp_builtin_dir+0xb4>)
   1917e:	691b      	ldr	r3, [r3, #16]
   19180:	68db      	ldr	r3, [r3, #12]
   19182:	4413      	add	r3, r2
   19184:	617b      	str	r3, [r7, #20]
        for (size_t i = MP_QSTR_ + 1; i < nqstr; ++i) {
   19186:	2302      	movs	r3, #2
   19188:	623b      	str	r3, [r7, #32]
   1918a:	e015      	b.n	191b8 <mp_builtin_dir+0xa0>
            mp_obj_t dest[2];
            mp_load_method_protected(args[0], i, dest, false);
   1918c:	683b      	ldr	r3, [r7, #0]
   1918e:	6818      	ldr	r0, [r3, #0]
   19190:	f107 020c 	add.w	r2, r7, #12
   19194:	2300      	movs	r3, #0
   19196:	6a39      	ldr	r1, [r7, #32]
   19198:	f7f3 fb76 	bl	c888 <mp_load_method_protected>
            if (dest[0] != MP_OBJ_NULL) {
   1919c:	68fb      	ldr	r3, [r7, #12]
   1919e:	2b00      	cmp	r3, #0
   191a0:	d007      	beq.n	191b2 <mp_builtin_dir+0x9a>
                // This relies on MP_QSTR__dir__ being first after MP_QSTR_
                if (i == MP_QSTR___dir__ && dest[1] != MP_OBJ_NULL) {
                    return mp_call_method_n_kw(0, 0, dest);
                }
                #endif
                mp_obj_list_append(dir, MP_OBJ_NEW_QSTR(i));
   191a2:	6a3b      	ldr	r3, [r7, #32]
   191a4:	009b      	lsls	r3, r3, #2
   191a6:	f043 0302 	orr.w	r3, r3, #2
   191aa:	4619      	mov	r1, r3
   191ac:	69f8      	ldr	r0, [r7, #28]
   191ae:	f7f7 fee5 	bl	10f7c <mp_obj_list_append>
        for (size_t i = MP_QSTR_ + 1; i < nqstr; ++i) {
   191b2:	6a3b      	ldr	r3, [r7, #32]
   191b4:	3301      	adds	r3, #1
   191b6:	623b      	str	r3, [r7, #32]
   191b8:	6a3a      	ldr	r2, [r7, #32]
   191ba:	697b      	ldr	r3, [r7, #20]
   191bc:	429a      	cmp	r2, r3
   191be:	d3e5      	bcc.n	1918c <mp_builtin_dir+0x74>
            }
        }
    }
    return dir;
   191c0:	69fb      	ldr	r3, [r7, #28]
}
   191c2:	4618      	mov	r0, r3
   191c4:	3728      	adds	r7, #40	; 0x28
   191c6:	46bd      	mov	sp, r7
   191c8:	bd80      	pop	{r7, pc}
   191ca:	bf00      	nop
   191cc:	20000a2c 	.word	0x20000a2c

000191d0 <mp_builtin_divmod>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_dir_obj, 0, 1, mp_builtin_dir);

STATIC mp_obj_t mp_builtin_divmod(mp_obj_t o1_in, mp_obj_t o2_in) {
   191d0:	b580      	push	{r7, lr}
   191d2:	b082      	sub	sp, #8
   191d4:	af00      	add	r7, sp, #0
   191d6:	6078      	str	r0, [r7, #4]
   191d8:	6039      	str	r1, [r7, #0]
    return mp_binary_op(MP_BINARY_OP_DIVMOD, o1_in, o2_in);
   191da:	683a      	ldr	r2, [r7, #0]
   191dc:	6879      	ldr	r1, [r7, #4]
   191de:	2021      	movs	r0, #33	; 0x21
   191e0:	f7f2 fba6 	bl	b930 <mp_binary_op>
   191e4:	4603      	mov	r3, r0
}
   191e6:	4618      	mov	r0, r3
   191e8:	3708      	adds	r7, #8
   191ea:	46bd      	mov	sp, r7
   191ec:	bd80      	pop	{r7, pc}
   191ee:	bf00      	nop

000191f0 <mp_builtin_hash>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_divmod_obj, mp_builtin_divmod);

STATIC mp_obj_t mp_builtin_hash(mp_obj_t o_in) {
   191f0:	b580      	push	{r7, lr}
   191f2:	b082      	sub	sp, #8
   191f4:	af00      	add	r7, sp, #0
   191f6:	6078      	str	r0, [r7, #4]
    // result is guaranteed to be a (small) int
    return mp_unary_op(MP_UNARY_OP_HASH, o_in);
   191f8:	6879      	ldr	r1, [r7, #4]
   191fa:	2006      	movs	r0, #6
   191fc:	f7f2 fab2 	bl	b764 <mp_unary_op>
   19200:	4603      	mov	r3, r0
}
   19202:	4618      	mov	r0, r3
   19204:	3708      	adds	r7, #8
   19206:	46bd      	mov	sp, r7
   19208:	bd80      	pop	{r7, pc}
   1920a:	bf00      	nop

0001920c <mp_builtin_hex>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_hash_obj, mp_builtin_hash);

STATIC mp_obj_t mp_builtin_hex(mp_obj_t o_in) {
   1920c:	b580      	push	{r7, lr}
   1920e:	b082      	sub	sp, #8
   19210:	af00      	add	r7, sp, #0
   19212:	6078      	str	r0, [r7, #4]
    return mp_binary_op(MP_BINARY_OP_MODULO, MP_OBJ_NEW_QSTR(MP_QSTR__percent__hash_x), o_in);
   19214:	687a      	ldr	r2, [r7, #4]
   19216:	21aa      	movs	r1, #170	; 0xaa
   19218:	201f      	movs	r0, #31
   1921a:	f7f2 fb89 	bl	b930 <mp_binary_op>
   1921e:	4603      	mov	r3, r0
}
   19220:	4618      	mov	r0, r3
   19222:	3708      	adds	r7, #8
   19224:	46bd      	mov	sp, r7
   19226:	bd80      	pop	{r7, pc}

00019228 <mp_builtin_iter>:
}
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_input_obj, 0, 1, mp_builtin_input);

#endif

STATIC mp_obj_t mp_builtin_iter(mp_obj_t o_in) {
   19228:	b580      	push	{r7, lr}
   1922a:	b082      	sub	sp, #8
   1922c:	af00      	add	r7, sp, #0
   1922e:	6078      	str	r0, [r7, #4]
    return mp_getiter(o_in, NULL);
   19230:	2100      	movs	r1, #0
   19232:	6878      	ldr	r0, [r7, #4]
   19234:	f7f3 fb84 	bl	c940 <mp_getiter>
   19238:	4603      	mov	r3, r0
}
   1923a:	4618      	mov	r0, r3
   1923c:	3708      	adds	r7, #8
   1923e:	46bd      	mov	sp, r7
   19240:	bd80      	pop	{r7, pc}
   19242:	bf00      	nop

00019244 <mp_builtin_next>:
}
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_min_obj, 1, mp_builtin_min);

#endif

STATIC mp_obj_t mp_builtin_next(mp_obj_t o) {
   19244:	b580      	push	{r7, lr}
   19246:	b084      	sub	sp, #16
   19248:	af00      	add	r7, sp, #0
   1924a:	6078      	str	r0, [r7, #4]
    mp_obj_t ret = mp_iternext_allow_raise(o);
   1924c:	6878      	ldr	r0, [r7, #4]
   1924e:	f7f3 fbcb 	bl	c9e8 <mp_iternext_allow_raise>
   19252:	60f8      	str	r0, [r7, #12]
    if (ret == MP_OBJ_STOP_ITERATION) {
   19254:	68fb      	ldr	r3, [r7, #12]
   19256:	2b04      	cmp	r3, #4
   19258:	d106      	bne.n	19268 <mp_builtin_next+0x24>
        nlr_raise(mp_obj_new_exception(&mp_type_StopIteration));
   1925a:	4806      	ldr	r0, [pc, #24]	; (19274 <mp_builtin_next+0x30>)
   1925c:	f7f6 f920 	bl	f4a0 <mp_obj_new_exception>
   19260:	4603      	mov	r3, r0
   19262:	4618      	mov	r0, r3
   19264:	f7e7 f83c 	bl	2e0 <nlr_jump>
    } else {
        return ret;
   19268:	68fb      	ldr	r3, [r7, #12]
    }
}
   1926a:	4618      	mov	r0, r3
   1926c:	3710      	adds	r7, #16
   1926e:	46bd      	mov	sp, r7
   19270:	bd80      	pop	{r7, pc}
   19272:	bf00      	nop
   19274:	0002032c 	.word	0x0002032c

00019278 <mp_builtin_oct>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_next_obj, mp_builtin_next);

STATIC mp_obj_t mp_builtin_oct(mp_obj_t o_in) {
   19278:	b580      	push	{r7, lr}
   1927a:	b082      	sub	sp, #8
   1927c:	af00      	add	r7, sp, #0
   1927e:	6078      	str	r0, [r7, #4]
    return mp_binary_op(MP_BINARY_OP_MODULO, MP_OBJ_NEW_QSTR(MP_QSTR__percent__hash_o), o_in);
   19280:	687a      	ldr	r2, [r7, #4]
   19282:	21a6      	movs	r1, #166	; 0xa6
   19284:	201f      	movs	r0, #31
   19286:	f7f2 fb53 	bl	b930 <mp_binary_op>
   1928a:	4603      	mov	r3, r0
}
   1928c:	4618      	mov	r0, r3
   1928e:	3708      	adds	r7, #8
   19290:	46bd      	mov	sp, r7
   19292:	bd80      	pop	{r7, pc}

00019294 <mp_builtin_ord>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_oct_obj, mp_builtin_oct);

STATIC mp_obj_t mp_builtin_ord(mp_obj_t o_in) {
   19294:	b580      	push	{r7, lr}
   19296:	b084      	sub	sp, #16
   19298:	af00      	add	r7, sp, #0
   1929a:	6078      	str	r0, [r7, #4]
    size_t len;
    const byte *str = (const byte*)mp_obj_str_get_data(o_in, &len);
   1929c:	f107 0308 	add.w	r3, r7, #8
   192a0:	4619      	mov	r1, r3
   192a2:	6878      	ldr	r0, [r7, #4]
   192a4:	f7fc fa00 	bl	156a8 <mp_obj_str_get_data>
   192a8:	60f8      	str	r0, [r7, #12]
        }
    } else
    #endif
    {
        // a bytes object, or a str without unicode support (don't sign extend the char)
        if (len == 1) {
   192aa:	68bb      	ldr	r3, [r7, #8]
   192ac:	2b01      	cmp	r3, #1
   192ae:	d105      	bne.n	192bc <mp_builtin_ord+0x28>
            return MP_OBJ_NEW_SMALL_INT(str[0]);
   192b0:	68fb      	ldr	r3, [r7, #12]
   192b2:	781b      	ldrb	r3, [r3, #0]
   192b4:	005b      	lsls	r3, r3, #1
   192b6:	f043 0301 	orr.w	r3, r3, #1
   192ba:	e002      	b.n	192c2 <mp_builtin_ord+0x2e>
        }
    }

    if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
        mp_raise_TypeError("ord expects a character");
   192bc:	4803      	ldr	r0, [pc, #12]	; (192cc <mp_builtin_ord+0x38>)
   192be:	f7f3 fe8f 	bl	cfe0 <mp_raise_TypeError>
    } else {
        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
            "ord() expected a character, but string of length %d found", (int)len));
    }
}
   192c2:	4618      	mov	r0, r3
   192c4:	3710      	adds	r7, #16
   192c6:	46bd      	mov	sp, r7
   192c8:	bd80      	pop	{r7, pc}
   192ca:	bf00      	nop
   192cc:	0002270c 	.word	0x0002270c

000192d0 <mp_builtin_pow>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_ord_obj, mp_builtin_ord);

STATIC mp_obj_t mp_builtin_pow(size_t n_args, const mp_obj_t *args) {
   192d0:	b580      	push	{r7, lr}
   192d2:	b082      	sub	sp, #8
   192d4:	af00      	add	r7, sp, #0
   192d6:	6078      	str	r0, [r7, #4]
   192d8:	6039      	str	r1, [r7, #0]
    switch (n_args) {
   192da:	687b      	ldr	r3, [r7, #4]
   192dc:	2b02      	cmp	r3, #2
   192de:	d10a      	bne.n	192f6 <mp_builtin_pow+0x26>
        case 2: return mp_binary_op(MP_BINARY_OP_POWER, args[0], args[1]);
   192e0:	683b      	ldr	r3, [r7, #0]
   192e2:	6819      	ldr	r1, [r3, #0]
   192e4:	683b      	ldr	r3, [r7, #0]
   192e6:	3304      	adds	r3, #4
   192e8:	681b      	ldr	r3, [r3, #0]
   192ea:	461a      	mov	r2, r3
   192ec:	2020      	movs	r0, #32
   192ee:	f7f2 fb1f 	bl	b930 <mp_binary_op>
   192f2:	4603      	mov	r3, r0
   192f4:	e003      	b.n	192fe <mp_builtin_pow+0x2e>
        default:
#if !MICROPY_PY_BUILTINS_POW3
            mp_raise_msg(&mp_type_NotImplementedError, "3-arg pow() not supported");
   192f6:	4904      	ldr	r1, [pc, #16]	; (19308 <mp_builtin_pow+0x38>)
   192f8:	4804      	ldr	r0, [pc, #16]	; (1930c <mp_builtin_pow+0x3c>)
   192fa:	f7f3 fe4f 	bl	cf9c <mp_raise_msg>
            return mp_binary_op(MP_BINARY_OP_MODULO, mp_binary_op(MP_BINARY_OP_POWER, args[0], args[1]), args[2]);
#else
            return mp_obj_int_pow3(args[0], args[1], args[2]);
#endif
    }
}
   192fe:	4618      	mov	r0, r3
   19300:	3708      	adds	r7, #8
   19302:	46bd      	mov	sp, r7
   19304:	bd80      	pop	{r7, pc}
   19306:	bf00      	nop
   19308:	0002272c 	.word	0x0002272c
   1930c:	000206b0 	.word	0x000206b0

00019310 <mp_builtin_print>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_pow_obj, 2, 3, mp_builtin_pow);

STATIC mp_obj_t mp_builtin_print(size_t n_args, const mp_obj_t *pos_args, mp_map_t *kw_args) {
   19310:	b580      	push	{r7, lr}
   19312:	b08e      	sub	sp, #56	; 0x38
   19314:	af02      	add	r7, sp, #8
   19316:	60f8      	str	r0, [r7, #12]
   19318:	60b9      	str	r1, [r7, #8]
   1931a:	607a      	str	r2, [r7, #4]
    // parse args (a union is used to reduce the amount of C stack that is needed)
    union {
        mp_arg_val_t args[MP_ARRAY_SIZE(allowed_args)];
        size_t len[2];
    } u;
    mp_arg_parse_all(0, NULL, kw_args, MP_ARRAY_SIZE(allowed_args), allowed_args, u.args);
   1931c:	f107 0314 	add.w	r3, r7, #20
   19320:	9301      	str	r3, [sp, #4]
   19322:	4b25      	ldr	r3, [pc, #148]	; (193b8 <mp_builtin_print+0xa8>)
   19324:	9300      	str	r3, [sp, #0]
   19326:	2302      	movs	r3, #2
   19328:	687a      	ldr	r2, [r7, #4]
   1932a:	2100      	movs	r1, #0
   1932c:	2000      	movs	r0, #0
   1932e:	f7f3 fea9 	bl	d084 <mp_arg_parse_all>
    // TODO file may not be a concrete object (eg it could be a small-int)
    mp_print_t print = {MP_OBJ_TO_PTR(u.args[ARG_file].u_obj), mp_stream_write_adaptor};
    #endif

    // extract the objects first because we are going to use the other part of the union
    mp_obj_t sep = u.args[ARG_sep].u_obj;
   19332:	697b      	ldr	r3, [r7, #20]
   19334:	62bb      	str	r3, [r7, #40]	; 0x28
    mp_obj_t end = u.args[ARG_end].u_obj;
   19336:	69bb      	ldr	r3, [r7, #24]
   19338:	627b      	str	r3, [r7, #36]	; 0x24
    const char *sep_data = mp_obj_str_get_data(sep, &u.len[0]);
   1933a:	f107 0314 	add.w	r3, r7, #20
   1933e:	4619      	mov	r1, r3
   19340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   19342:	f7fc f9b1 	bl	156a8 <mp_obj_str_get_data>
   19346:	6238      	str	r0, [r7, #32]
    const char *end_data = mp_obj_str_get_data(end, &u.len[1]);
   19348:	f107 0314 	add.w	r3, r7, #20
   1934c:	3304      	adds	r3, #4
   1934e:	4619      	mov	r1, r3
   19350:	6a78      	ldr	r0, [r7, #36]	; 0x24
   19352:	f7fc f9a9 	bl	156a8 <mp_obj_str_get_data>
   19356:	61f8      	str	r0, [r7, #28]

    for (size_t i = 0; i < n_args; i++) {
   19358:	2300      	movs	r3, #0
   1935a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1935c:	e019      	b.n	19392 <mp_builtin_print+0x82>
        if (i > 0) {
   1935e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19360:	2b00      	cmp	r3, #0
   19362:	d009      	beq.n	19378 <mp_builtin_print+0x68>
            #if MICROPY_PY_IO && MICROPY_PY_SYS_STDFILES
            mp_stream_write_adaptor(print.data, sep_data, u.len[0]);
            #else
            mp_print_strn(&mp_plat_print, sep_data, u.len[0], 0, 0, 0);
   19364:	697a      	ldr	r2, [r7, #20]
   19366:	2300      	movs	r3, #0
   19368:	9301      	str	r3, [sp, #4]
   1936a:	2300      	movs	r3, #0
   1936c:	9300      	str	r3, [sp, #0]
   1936e:	2300      	movs	r3, #0
   19370:	6a39      	ldr	r1, [r7, #32]
   19372:	4812      	ldr	r0, [pc, #72]	; (193bc <mp_builtin_print+0xac>)
   19374:	f7e8 fa9a 	bl	18ac <mp_print_strn>
            #endif
        }
        #if MICROPY_PY_IO && MICROPY_PY_SYS_STDFILES
        mp_obj_print_helper(&print, pos_args[i], PRINT_STR);
        #else
        mp_obj_print_helper(&mp_plat_print, pos_args[i], PRINT_STR);
   19378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1937a:	009b      	lsls	r3, r3, #2
   1937c:	68ba      	ldr	r2, [r7, #8]
   1937e:	4413      	add	r3, r2
   19380:	681b      	ldr	r3, [r3, #0]
   19382:	2200      	movs	r2, #0
   19384:	4619      	mov	r1, r3
   19386:	480d      	ldr	r0, [pc, #52]	; (193bc <mp_builtin_print+0xac>)
   19388:	f7f4 fa76 	bl	d878 <mp_obj_print_helper>
    for (size_t i = 0; i < n_args; i++) {
   1938c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1938e:	3301      	adds	r3, #1
   19390:	62fb      	str	r3, [r7, #44]	; 0x2c
   19392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   19394:	68fb      	ldr	r3, [r7, #12]
   19396:	429a      	cmp	r2, r3
   19398:	d3e1      	bcc.n	1935e <mp_builtin_print+0x4e>
        #endif
    }
    #if MICROPY_PY_IO && MICROPY_PY_SYS_STDFILES
    mp_stream_write_adaptor(print.data, end_data, u.len[1]);
    #else
    mp_print_strn(&mp_plat_print, end_data, u.len[1], 0, 0, 0);
   1939a:	69ba      	ldr	r2, [r7, #24]
   1939c:	2300      	movs	r3, #0
   1939e:	9301      	str	r3, [sp, #4]
   193a0:	2300      	movs	r3, #0
   193a2:	9300      	str	r3, [sp, #0]
   193a4:	2300      	movs	r3, #0
   193a6:	69f9      	ldr	r1, [r7, #28]
   193a8:	4804      	ldr	r0, [pc, #16]	; (193bc <mp_builtin_print+0xac>)
   193aa:	f7e8 fa7f 	bl	18ac <mp_print_strn>
    #endif
    return mp_const_none;
   193ae:	4b04      	ldr	r3, [pc, #16]	; (193c0 <mp_builtin_print+0xb0>)
}
   193b0:	4618      	mov	r0, r3
   193b2:	3730      	adds	r7, #48	; 0x30
   193b4:	46bd      	mov	sp, r7
   193b6:	bd80      	pop	{r7, pc}
   193b8:	00022a9c 	.word	0x00022a9c
   193bc:	0001d82c 	.word	0x0001d82c
   193c0:	00021534 	.word	0x00021534

000193c4 <mp_builtin___repl_print__>:
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_print_obj, 0, mp_builtin_print);

STATIC mp_obj_t mp_builtin___repl_print__(mp_obj_t o) {
   193c4:	b580      	push	{r7, lr}
   193c6:	b082      	sub	sp, #8
   193c8:	af00      	add	r7, sp, #0
   193ca:	6078      	str	r0, [r7, #4]
    if (o != mp_const_none) {
   193cc:	687b      	ldr	r3, [r7, #4]
   193ce:	4a08      	ldr	r2, [pc, #32]	; (193f0 <mp_builtin___repl_print__+0x2c>)
   193d0:	4293      	cmp	r3, r2
   193d2:	d008      	beq.n	193e6 <mp_builtin___repl_print__+0x22>
        mp_obj_print_helper(MP_PYTHON_PRINTER, o, PRINT_REPR);
   193d4:	2201      	movs	r2, #1
   193d6:	6879      	ldr	r1, [r7, #4]
   193d8:	4806      	ldr	r0, [pc, #24]	; (193f4 <mp_builtin___repl_print__+0x30>)
   193da:	f7f4 fa4d 	bl	d878 <mp_obj_print_helper>
        mp_print_str(MP_PYTHON_PRINTER, "\n");
   193de:	4906      	ldr	r1, [pc, #24]	; (193f8 <mp_builtin___repl_print__+0x34>)
   193e0:	4804      	ldr	r0, [pc, #16]	; (193f4 <mp_builtin___repl_print__+0x30>)
   193e2:	f7e8 fa4b 	bl	187c <mp_print_str>
        // Set "_" special variable
        mp_obj_t dest[2] = {MP_OBJ_SENTINEL, o};
        mp_type_module.attr(MP_OBJ_FROM_PTR(&mp_module_builtins), MP_QSTR__, dest);
        #endif
    }
    return mp_const_none;
   193e6:	4b02      	ldr	r3, [pc, #8]	; (193f0 <mp_builtin___repl_print__+0x2c>)
}
   193e8:	4618      	mov	r0, r3
   193ea:	3708      	adds	r7, #8
   193ec:	46bd      	mov	sp, r7
   193ee:	bd80      	pop	{r7, pc}
   193f0:	00021534 	.word	0x00021534
   193f4:	0001d82c 	.word	0x0001d82c
   193f8:	00022760 	.word	0x00022760

000193fc <mp_builtin_repr>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin___repl_print___obj, mp_builtin___repl_print__);

STATIC mp_obj_t mp_builtin_repr(mp_obj_t o_in) {
   193fc:	b580      	push	{r7, lr}
   193fe:	b088      	sub	sp, #32
   19400:	af00      	add	r7, sp, #0
   19402:	6078      	str	r0, [r7, #4]
    vstr_t vstr;
    mp_print_t print;
    vstr_init_print(&vstr, 16, &print);
   19404:	f107 0208 	add.w	r2, r7, #8
   19408:	f107 0310 	add.w	r3, r7, #16
   1940c:	2110      	movs	r1, #16
   1940e:	4618      	mov	r0, r3
   19410:	f7e7 ffc4 	bl	139c <vstr_init_print>
    mp_obj_print_helper(&print, o_in, PRINT_REPR);
   19414:	f107 0308 	add.w	r3, r7, #8
   19418:	2201      	movs	r2, #1
   1941a:	6879      	ldr	r1, [r7, #4]
   1941c:	4618      	mov	r0, r3
   1941e:	f7f4 fa2b 	bl	d878 <mp_obj_print_helper>
    return mp_obj_new_str_from_vstr(&mp_type_str, &vstr);
   19422:	f107 0310 	add.w	r3, r7, #16
   19426:	4619      	mov	r1, r3
   19428:	4803      	ldr	r0, [pc, #12]	; (19438 <mp_builtin_repr+0x3c>)
   1942a:	f7fb ff79 	bl	15320 <mp_obj_new_str_from_vstr>
   1942e:	4603      	mov	r3, r0
}
   19430:	4618      	mov	r0, r3
   19432:	3720      	adds	r7, #32
   19434:	46bd      	mov	sp, r7
   19436:	bd80      	pop	{r7, pc}
   19438:	00021be4 	.word	0x00021be4

0001943c <mp_builtin_round>:
MP_DEFINE_CONST_FUN_OBJ_1(mp_builtin_repr_obj, mp_builtin_repr);

STATIC mp_obj_t mp_builtin_round(size_t n_args, const mp_obj_t *args) {
   1943c:	b580      	push	{r7, lr}
   1943e:	b084      	sub	sp, #16
   19440:	af00      	add	r7, sp, #0
   19442:	6078      	str	r0, [r7, #4]
   19444:	6039      	str	r1, [r7, #0]
    mp_obj_t o_in = args[0];
   19446:	683b      	ldr	r3, [r7, #0]
   19448:	681b      	ldr	r3, [r3, #0]
   1944a:	60fb      	str	r3, [r7, #12]
    if (MP_OBJ_IS_INT(o_in)) {
   1944c:	68f8      	ldr	r0, [r7, #12]
   1944e:	f7ff fcdf 	bl	18e10 <MP_OBJ_IS_SMALL_INT>
   19452:	4603      	mov	r3, r0
   19454:	2b00      	cmp	r3, #0
   19456:	d10a      	bne.n	1946e <mp_builtin_round+0x32>
   19458:	68f8      	ldr	r0, [r7, #12]
   1945a:	f7ff fceb 	bl	18e34 <MP_OBJ_IS_OBJ>
   1945e:	4603      	mov	r3, r0
   19460:	2b00      	cmp	r3, #0
   19462:	d00c      	beq.n	1947e <mp_builtin_round+0x42>
   19464:	68fb      	ldr	r3, [r7, #12]
   19466:	681b      	ldr	r3, [r3, #0]
   19468:	4a0b      	ldr	r2, [pc, #44]	; (19498 <mp_builtin_round+0x5c>)
   1946a:	4293      	cmp	r3, r2
   1946c:	d107      	bne.n	1947e <mp_builtin_round+0x42>
        if (n_args <= 1) {
   1946e:	687b      	ldr	r3, [r7, #4]
   19470:	2b01      	cmp	r3, #1
   19472:	d801      	bhi.n	19478 <mp_builtin_round+0x3c>
            return o_in;
   19474:	68fb      	ldr	r3, [r7, #12]
   19476:	e00a      	b.n	1948e <mp_builtin_round+0x52>
        }

        #if !MICROPY_PY_BUILTINS_ROUND_INT
        mp_raise_NotImplementedError(NULL);
   19478:	2000      	movs	r0, #0
   1947a:	f7f3 fdcd 	bl	d018 <mp_raise_NotImplementedError>
        return mp_obj_new_float(rounded);
    }
    mp_float_t rounded = MICROPY_FLOAT_C_FUN(nearbyint)(val);
    return mp_obj_new_int_from_float(rounded);
#else
    mp_int_t r = mp_obj_get_int(o_in);
   1947e:	68f8      	ldr	r0, [r7, #12]
   19480:	f7f4 fba6 	bl	dbd0 <mp_obj_get_int>
   19484:	60b8      	str	r0, [r7, #8]
    return mp_obj_new_int(r);
   19486:	68b8      	ldr	r0, [r7, #8]
   19488:	f7f7 fa60 	bl	1094c <mp_obj_new_int>
   1948c:	4603      	mov	r3, r0
#endif
}
   1948e:	4618      	mov	r0, r3
   19490:	3710      	adds	r7, #16
   19492:	46bd      	mov	sp, r7
   19494:	bd80      	pop	{r7, pc}
   19496:	bf00      	nop
   19498:	00020f90 	.word	0x00020f90

0001949c <mp_builtin_sum>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_round_obj, 1, 2, mp_builtin_round);

STATIC mp_obj_t mp_builtin_sum(size_t n_args, const mp_obj_t *args) {
   1949c:	b580      	push	{r7, lr}
   1949e:	b08a      	sub	sp, #40	; 0x28
   194a0:	af00      	add	r7, sp, #0
   194a2:	6078      	str	r0, [r7, #4]
   194a4:	6039      	str	r1, [r7, #0]
    mp_obj_t value;
    switch (n_args) {
   194a6:	687b      	ldr	r3, [r7, #4]
   194a8:	2b01      	cmp	r3, #1
   194aa:	d102      	bne.n	194b2 <mp_builtin_sum+0x16>
        case 1: value = MP_OBJ_NEW_SMALL_INT(0); break;
   194ac:	2301      	movs	r3, #1
   194ae:	627b      	str	r3, [r7, #36]	; 0x24
   194b0:	e003      	b.n	194ba <mp_builtin_sum+0x1e>
        default: value = args[1]; break;
   194b2:	683b      	ldr	r3, [r7, #0]
   194b4:	685b      	ldr	r3, [r3, #4]
   194b6:	627b      	str	r3, [r7, #36]	; 0x24
   194b8:	bf00      	nop
    }
    mp_obj_iter_buf_t iter_buf;
    mp_obj_t iterable = mp_getiter(args[0], &iter_buf);
   194ba:	683b      	ldr	r3, [r7, #0]
   194bc:	681b      	ldr	r3, [r3, #0]
   194be:	f107 020c 	add.w	r2, r7, #12
   194c2:	4611      	mov	r1, r2
   194c4:	4618      	mov	r0, r3
   194c6:	f7f3 fa3b 	bl	c940 <mp_getiter>
   194ca:	6238      	str	r0, [r7, #32]
    mp_obj_t item;
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   194cc:	e005      	b.n	194da <mp_builtin_sum+0x3e>
        value = mp_binary_op(MP_BINARY_OP_ADD, value, item);
   194ce:	69fa      	ldr	r2, [r7, #28]
   194d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   194d2:	201a      	movs	r0, #26
   194d4:	f7f2 fa2c 	bl	b930 <mp_binary_op>
   194d8:	6278      	str	r0, [r7, #36]	; 0x24
    while ((item = mp_iternext(iterable)) != MP_OBJ_STOP_ITERATION) {
   194da:	6a38      	ldr	r0, [r7, #32]
   194dc:	f7f3 fab2 	bl	ca44 <mp_iternext>
   194e0:	61f8      	str	r0, [r7, #28]
   194e2:	69fb      	ldr	r3, [r7, #28]
   194e4:	2b04      	cmp	r3, #4
   194e6:	d1f2      	bne.n	194ce <mp_builtin_sum+0x32>
    }
    return value;
   194e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   194ea:	4618      	mov	r0, r3
   194ec:	3728      	adds	r7, #40	; 0x28
   194ee:	46bd      	mov	sp, r7
   194f0:	bd80      	pop	{r7, pc}
   194f2:	bf00      	nop

000194f4 <mp_builtin_sorted>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_sum_obj, 1, 2, mp_builtin_sum);

STATIC mp_obj_t mp_builtin_sorted(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   194f4:	b590      	push	{r4, r7, lr}
   194f6:	b087      	sub	sp, #28
   194f8:	af00      	add	r7, sp, #0
   194fa:	60f8      	str	r0, [r7, #12]
   194fc:	60b9      	str	r1, [r7, #8]
   194fe:	607a      	str	r2, [r7, #4]
    if (n_args > 1) {
   19500:	68fb      	ldr	r3, [r7, #12]
   19502:	2b01      	cmp	r3, #1
   19504:	d902      	bls.n	1950c <mp_builtin_sorted+0x18>
        mp_raise_TypeError("must use keyword argument for key function");
   19506:	480c      	ldr	r0, [pc, #48]	; (19538 <mp_builtin_sorted+0x44>)
   19508:	f7f3 fd6a 	bl	cfe0 <mp_raise_TypeError>
    }
    mp_obj_t self = mp_type_list.make_new(&mp_type_list, 1, 0, args);
   1950c:	4b0b      	ldr	r3, [pc, #44]	; (1953c <mp_builtin_sorted+0x48>)
   1950e:	68dc      	ldr	r4, [r3, #12]
   19510:	68bb      	ldr	r3, [r7, #8]
   19512:	2200      	movs	r2, #0
   19514:	2101      	movs	r1, #1
   19516:	4809      	ldr	r0, [pc, #36]	; (1953c <mp_builtin_sorted+0x48>)
   19518:	47a0      	blx	r4
   1951a:	4603      	mov	r3, r0
   1951c:	617b      	str	r3, [r7, #20]
    mp_obj_list_sort(1, &self, kwargs);
   1951e:	f107 0314 	add.w	r3, r7, #20
   19522:	687a      	ldr	r2, [r7, #4]
   19524:	4619      	mov	r1, r3
   19526:	2001      	movs	r0, #1
   19528:	f7f7 ff36 	bl	11398 <mp_obj_list_sort>

    return self;
   1952c:	697b      	ldr	r3, [r7, #20]
}
   1952e:	4618      	mov	r0, r3
   19530:	371c      	adds	r7, #28
   19532:	46bd      	mov	sp, r7
   19534:	bd90      	pop	{r4, r7, pc}
   19536:	bf00      	nop
   19538:	0002278c 	.word	0x0002278c
   1953c:	000211fc 	.word	0x000211fc

00019540 <mp_load_attr_default>:
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_sorted_obj, 1, mp_builtin_sorted);

// See mp_load_attr() if making any changes
static inline mp_obj_t mp_load_attr_default(mp_obj_t base, qstr attr, mp_obj_t defval) {
   19540:	b580      	push	{r7, lr}
   19542:	b086      	sub	sp, #24
   19544:	af00      	add	r7, sp, #0
   19546:	60f8      	str	r0, [r7, #12]
   19548:	60b9      	str	r1, [r7, #8]
   1954a:	607a      	str	r2, [r7, #4]
    mp_obj_t dest[2];
    // use load_method, raising or not raising exception
    ((defval == MP_OBJ_NULL) ? mp_load_method : mp_load_method_maybe)(base, attr, dest);
   1954c:	687b      	ldr	r3, [r7, #4]
   1954e:	2b00      	cmp	r3, #0
   19550:	d101      	bne.n	19556 <mp_load_attr_default+0x16>
   19552:	4b0e      	ldr	r3, [pc, #56]	; (1958c <mp_load_attr_default+0x4c>)
   19554:	e000      	b.n	19558 <mp_load_attr_default+0x18>
   19556:	4b0e      	ldr	r3, [pc, #56]	; (19590 <mp_load_attr_default+0x50>)
   19558:	f107 0210 	add.w	r2, r7, #16
   1955c:	68b9      	ldr	r1, [r7, #8]
   1955e:	68f8      	ldr	r0, [r7, #12]
   19560:	4798      	blx	r3
    if (dest[0] == MP_OBJ_NULL) {
   19562:	693b      	ldr	r3, [r7, #16]
   19564:	2b00      	cmp	r3, #0
   19566:	d101      	bne.n	1956c <mp_load_attr_default+0x2c>
        return defval;
   19568:	687b      	ldr	r3, [r7, #4]
   1956a:	e00b      	b.n	19584 <mp_load_attr_default+0x44>
    } else if (dest[1] == MP_OBJ_NULL) {
   1956c:	697b      	ldr	r3, [r7, #20]
   1956e:	2b00      	cmp	r3, #0
   19570:	d101      	bne.n	19576 <mp_load_attr_default+0x36>
        // load_method returned just a normal attribute
        return dest[0];
   19572:	693b      	ldr	r3, [r7, #16]
   19574:	e006      	b.n	19584 <mp_load_attr_default+0x44>
    } else {
        // load_method returned a method, so build a bound method object
        return mp_obj_new_bound_meth(dest[0], dest[1]);
   19576:	693b      	ldr	r3, [r7, #16]
   19578:	697a      	ldr	r2, [r7, #20]
   1957a:	4611      	mov	r1, r2
   1957c:	4618      	mov	r0, r3
   1957e:	f7f4 fe75 	bl	e26c <mp_obj_new_bound_meth>
   19582:	4603      	mov	r3, r0
    }
}
   19584:	4618      	mov	r0, r3
   19586:	3718      	adds	r7, #24
   19588:	46bd      	mov	sp, r7
   1958a:	bd80      	pop	{r7, pc}
   1958c:	0000c851 	.word	0x0000c851
   19590:	0000c78d 	.word	0x0000c78d

00019594 <mp_builtin_getattr>:

STATIC mp_obj_t mp_builtin_getattr(size_t n_args, const mp_obj_t *args) {
   19594:	b590      	push	{r4, r7, lr}
   19596:	b085      	sub	sp, #20
   19598:	af00      	add	r7, sp, #0
   1959a:	6078      	str	r0, [r7, #4]
   1959c:	6039      	str	r1, [r7, #0]
    mp_obj_t defval = MP_OBJ_NULL;
   1959e:	2300      	movs	r3, #0
   195a0:	60fb      	str	r3, [r7, #12]
    if (n_args > 2) {
   195a2:	687b      	ldr	r3, [r7, #4]
   195a4:	2b02      	cmp	r3, #2
   195a6:	d902      	bls.n	195ae <mp_builtin_getattr+0x1a>
        defval = args[2];
   195a8:	683b      	ldr	r3, [r7, #0]
   195aa:	689b      	ldr	r3, [r3, #8]
   195ac:	60fb      	str	r3, [r7, #12]
    }
    return mp_load_attr_default(args[0], mp_obj_str_get_qstr(args[1]), defval);
   195ae:	683b      	ldr	r3, [r7, #0]
   195b0:	681c      	ldr	r4, [r3, #0]
   195b2:	683b      	ldr	r3, [r7, #0]
   195b4:	3304      	adds	r3, #4
   195b6:	681b      	ldr	r3, [r3, #0]
   195b8:	4618      	mov	r0, r3
   195ba:	f7fc f80f 	bl	155dc <mp_obj_str_get_qstr>
   195be:	4603      	mov	r3, r0
   195c0:	68fa      	ldr	r2, [r7, #12]
   195c2:	4619      	mov	r1, r3
   195c4:	4620      	mov	r0, r4
   195c6:	f7ff ffbb 	bl	19540 <mp_load_attr_default>
   195ca:	4603      	mov	r3, r0
}
   195cc:	4618      	mov	r0, r3
   195ce:	3714      	adds	r7, #20
   195d0:	46bd      	mov	sp, r7
   195d2:	bd90      	pop	{r4, r7, pc}

000195d4 <mp_builtin_setattr>:
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mp_builtin_getattr_obj, 2, 3, mp_builtin_getattr);

STATIC mp_obj_t mp_builtin_setattr(mp_obj_t base, mp_obj_t attr, mp_obj_t value) {
   195d4:	b580      	push	{r7, lr}
   195d6:	b084      	sub	sp, #16
   195d8:	af00      	add	r7, sp, #0
   195da:	60f8      	str	r0, [r7, #12]
   195dc:	60b9      	str	r1, [r7, #8]
   195de:	607a      	str	r2, [r7, #4]
    mp_store_attr(base, mp_obj_str_get_qstr(attr), value);
   195e0:	68b8      	ldr	r0, [r7, #8]
   195e2:	f7fb fffb 	bl	155dc <mp_obj_str_get_qstr>
   195e6:	4603      	mov	r3, r0
   195e8:	687a      	ldr	r2, [r7, #4]
   195ea:	4619      	mov	r1, r3
   195ec:	68f8      	ldr	r0, [r7, #12]
   195ee:	f7f3 f97f 	bl	c8f0 <mp_store_attr>
    return mp_const_none;
   195f2:	4b02      	ldr	r3, [pc, #8]	; (195fc <mp_builtin_setattr+0x28>)
}
   195f4:	4618      	mov	r0, r3
   195f6:	3710      	adds	r7, #16
   195f8:	46bd      	mov	sp, r7
   195fa:	bd80      	pop	{r7, pc}
   195fc:	00021534 	.word	0x00021534

00019600 <mp_builtin_hasattr>:
    return mp_builtin_setattr(base, attr, MP_OBJ_NULL);
}
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_delattr_obj, mp_builtin_delattr);
#endif

STATIC mp_obj_t mp_builtin_hasattr(mp_obj_t object_in, mp_obj_t attr_in) {
   19600:	b580      	push	{r7, lr}
   19602:	b086      	sub	sp, #24
   19604:	af00      	add	r7, sp, #0
   19606:	6078      	str	r0, [r7, #4]
   19608:	6039      	str	r1, [r7, #0]
    qstr attr = mp_obj_str_get_qstr(attr_in);
   1960a:	6838      	ldr	r0, [r7, #0]
   1960c:	f7fb ffe6 	bl	155dc <mp_obj_str_get_qstr>
   19610:	6178      	str	r0, [r7, #20]
    mp_obj_t dest[2];
    mp_load_method_protected(object_in, attr, dest, false);
   19612:	f107 020c 	add.w	r2, r7, #12
   19616:	2300      	movs	r3, #0
   19618:	6979      	ldr	r1, [r7, #20]
   1961a:	6878      	ldr	r0, [r7, #4]
   1961c:	f7f3 f934 	bl	c888 <mp_load_method_protected>
    return mp_obj_new_bool(dest[0] != MP_OBJ_NULL);
   19620:	68fb      	ldr	r3, [r7, #12]
   19622:	2b00      	cmp	r3, #0
   19624:	bf14      	ite	ne
   19626:	2301      	movne	r3, #1
   19628:	2300      	moveq	r3, #0
   1962a:	b2db      	uxtb	r3, r3
   1962c:	4618      	mov	r0, r3
   1962e:	f7ff fc35 	bl	18e9c <mp_obj_new_bool>
   19632:	4603      	mov	r3, r0
}
   19634:	4618      	mov	r0, r3
   19636:	3718      	adds	r7, #24
   19638:	46bd      	mov	sp, r7
   1963a:	bd80      	pop	{r7, pc}

0001963c <mp_builtin_globals>:
MP_DEFINE_CONST_FUN_OBJ_2(mp_builtin_hasattr_obj, mp_builtin_hasattr);

STATIC mp_obj_t mp_builtin_globals(void) {
   1963c:	b580      	push	{r7, lr}
   1963e:	af00      	add	r7, sp, #0
    return MP_OBJ_FROM_PTR(mp_globals_get());
   19640:	f7ff fc5c 	bl	18efc <mp_globals_get>
   19644:	4603      	mov	r3, r0
}
   19646:	4618      	mov	r0, r3
   19648:	bd80      	pop	{r7, pc}
   1964a:	bf00      	nop

0001964c <mp_builtin_locals>:
MP_DEFINE_CONST_FUN_OBJ_0(mp_builtin_globals_obj, mp_builtin_globals);

STATIC mp_obj_t mp_builtin_locals(void) {
   1964c:	b580      	push	{r7, lr}
   1964e:	af00      	add	r7, sp, #0
    return MP_OBJ_FROM_PTR(mp_locals_get());
   19650:	f7ff fc38 	bl	18ec4 <mp_locals_get>
   19654:	4603      	mov	r3, r0
}
   19656:	4618      	mov	r0, r3
   19658:	bd80      	pop	{r7, pc}
   1965a:	bf00      	nop

0001965c <mp_micropython_opt_level>:

// Various builtins specific to MicroPython runtime,
// living in micropython module

#if MICROPY_ENABLE_COMPILER
STATIC mp_obj_t mp_micropython_opt_level(size_t n_args, const mp_obj_t *args) {
   1965c:	b580      	push	{r7, lr}
   1965e:	b082      	sub	sp, #8
   19660:	af00      	add	r7, sp, #0
   19662:	6078      	str	r0, [r7, #4]
   19664:	6039      	str	r1, [r7, #0]
    if (n_args == 0) {
   19666:	687b      	ldr	r3, [r7, #4]
   19668:	2b00      	cmp	r3, #0
   1966a:	d106      	bne.n	1967a <mp_micropython_opt_level+0x1e>
        return MP_OBJ_NEW_SMALL_INT(MP_STATE_VM(mp_optimise_value));
   1966c:	4b0a      	ldr	r3, [pc, #40]	; (19698 <mp_micropython_opt_level+0x3c>)
   1966e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   19672:	005b      	lsls	r3, r3, #1
   19674:	f043 0301 	orr.w	r3, r3, #1
   19678:	e00a      	b.n	19690 <mp_micropython_opt_level+0x34>
    } else {
        MP_STATE_VM(mp_optimise_value) = mp_obj_get_int(args[0]);
   1967a:	683b      	ldr	r3, [r7, #0]
   1967c:	681b      	ldr	r3, [r3, #0]
   1967e:	4618      	mov	r0, r3
   19680:	f7f4 faa6 	bl	dbd0 <mp_obj_get_int>
   19684:	4603      	mov	r3, r0
   19686:	461a      	mov	r2, r3
   19688:	4b03      	ldr	r3, [pc, #12]	; (19698 <mp_micropython_opt_level+0x3c>)
   1968a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        return mp_const_none;
   1968e:	4b03      	ldr	r3, [pc, #12]	; (1969c <mp_micropython_opt_level+0x40>)
    }
}
   19690:	4618      	mov	r0, r3
   19692:	3708      	adds	r7, #8
   19694:	46bd      	mov	sp, r7
   19696:	bd80      	pop	{r7, pc}
   19698:	20000a2c 	.word	0x20000a2c
   1969c:	00021534 	.word	0x00021534

000196a0 <mp_micropython_heap_lock>:
}
STATIC MP_DEFINE_CONST_FUN_OBJ_0(mp_micropython_pystack_use_obj, mp_micropython_pystack_use);
#endif

#if MICROPY_ENABLE_GC
STATIC mp_obj_t mp_micropython_heap_lock(void) {
   196a0:	b580      	push	{r7, lr}
   196a2:	af00      	add	r7, sp, #0
    gc_lock();
   196a4:	f7e6 ff78 	bl	598 <gc_lock>
    return mp_const_none;
   196a8:	4b01      	ldr	r3, [pc, #4]	; (196b0 <mp_micropython_heap_lock+0x10>)
}
   196aa:	4618      	mov	r0, r3
   196ac:	bd80      	pop	{r7, pc}
   196ae:	bf00      	nop
   196b0:	00021534 	.word	0x00021534

000196b4 <mp_micropython_heap_unlock>:
STATIC MP_DEFINE_CONST_FUN_OBJ_0(mp_micropython_heap_lock_obj, mp_micropython_heap_lock);

STATIC mp_obj_t mp_micropython_heap_unlock(void) {
   196b4:	b580      	push	{r7, lr}
   196b6:	af00      	add	r7, sp, #0
    gc_unlock();
   196b8:	f7e6 ff78 	bl	5ac <gc_unlock>
    return mp_const_none;
   196bc:	4b01      	ldr	r3, [pc, #4]	; (196c4 <mp_micropython_heap_unlock+0x10>)
}
   196be:	4618      	mov	r0, r3
   196c0:	bd80      	pop	{r7, pc}
   196c2:	bf00      	nop
   196c4:	00021534 	.word	0x00021534

000196c8 <mp_execute_bytecode>:
// sp points to bottom of stack which grows up
// returns:
//  MP_VM_RETURN_NORMAL, sp valid, return value in *sp
//  MP_VM_RETURN_YIELD, ip, sp valid, yielded value in *sp
//  MP_VM_RETURN_EXCEPTION, exception in fastn[0]
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   196c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif
    // Pointers which are constant for particular invocation of mp_execute_bytecode()
    mp_obj_t * /*const*/ fastn;
    mp_exc_stack_t * /*const*/ exc_stack;
    {
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   196cc:	6803      	ldr	r3, [r0, #0]
                    }
                    mp_handle_pending_tail(atomic_state);
                }
                #else
                // This is an inlined variant of mp_handle_pending
                if (MP_STATE_VM(mp_pending_exception) != MP_OBJ_NULL) {
   196ce:	f8df b310 	ldr.w	fp, [pc, #784]	; 199e0 <mp_execute_bytecode+0x318>
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   196d2:	b095      	sub	sp, #84	; 0x54
   196d4:	4680      	mov	r8, r0
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   196d6:	6898      	ldr	r0, [r3, #8]
mp_vm_return_kind_t mp_execute_bytecode(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   196d8:	9103      	str	r1, [sp, #12]
        size_t n_state = mp_decode_uint_value(code_state->fun_bc->bytecode);
   196da:	f000 ff29 	bl	1a530 <mp_decode_uint_value>
    volatile bool currently_in_except_block = MP_TAGPTR_TAG0(code_state->exc_sp); // 0 or 1, to detect nested exceptions
   196de:	f8d8 300c 	ldr.w	r3, [r8, #12]
   196e2:	f003 0201 	and.w	r2, r3, #1
    mp_exc_stack_t *volatile exc_sp = MP_TAGPTR_PTR(code_state->exc_sp); // stack grows up, exc_sp points to top of stack
   196e6:	f023 0303 	bic.w	r3, r3, #3
        fastn = &code_state->state[n_state - 1];
   196ea:	eb08 0a80 	add.w	sl, r8, r0, lsl #2
        exc_stack = (mp_exc_stack_t*)(code_state->state + n_state);
   196ee:	f108 0714 	add.w	r7, r8, #20
    volatile bool currently_in_except_block = MP_TAGPTR_TAG0(code_state->exc_sp); // 0 or 1, to detect nested exceptions
   196f2:	f88d 2017 	strb.w	r2, [sp, #23]
    mp_exc_stack_t *volatile exc_sp = MP_TAGPTR_PTR(code_state->exc_sp); // stack grows up, exc_sp points to top of stack
   196f6:	9306      	str	r3, [sp, #24]
        fastn = &code_state->state[n_state - 1];
   196f8:	1e43      	subs	r3, r0, #1
   196fa:	f10a 0a10 	add.w	sl, sl, #16
        exc_stack = (mp_exc_stack_t*)(code_state->state + n_state);
   196fe:	eb07 0780 	add.w	r7, r7, r0, lsl #2
        fastn = &code_state->state[n_state - 1];
   19702:	9302      	str	r3, [sp, #8]
        if (nlr_push(&nlr) == 0) {
   19704:	a808      	add	r0, sp, #32
   19706:	f7e6 fdd9 	bl	2bc <nlr_push>
   1970a:	2800      	cmp	r0, #0
   1970c:	f040 8092 	bne.w	19834 <mp_execute_bytecode+0x16c>
            if (inject_exc != MP_OBJ_NULL && *ip != MP_BC_YIELD_FROM) {
   19710:	9b03      	ldr	r3, [sp, #12]
            const byte *ip = code_state->ip;
   19712:	f8d8 5004 	ldr.w	r5, [r8, #4]
            mp_obj_t *sp = code_state->sp;
   19716:	f8d8 6008 	ldr.w	r6, [r8, #8]
            if (inject_exc != MP_OBJ_NULL && *ip != MP_BC_YIELD_FROM) {
   1971a:	2b00      	cmp	r3, #0
   1971c:	f000 809d 	beq.w	1985a <mp_execute_bytecode+0x192>
   19720:	782b      	ldrb	r3, [r5, #0]
   19722:	2b5e      	cmp	r3, #94	; 0x5e
   19724:	f000 8099 	beq.w	1985a <mp_execute_bytecode+0x192>
                mp_obj_t exc = inject_exc;
   19728:	9b03      	ldr	r3, [sp, #12]
                inject_exc = MP_OBJ_NULL;
   1972a:	9003      	str	r0, [sp, #12]
                exc = mp_make_raise_obj(exc);
   1972c:	4618      	mov	r0, r3
                    obj = mp_make_raise_obj(obj);
   1972e:	f7f3 fab5 	bl	cc9c <mp_make_raise_obj>
   19732:	4604      	mov	r4, r0
                    RAISE(obj);
   19734:	f7e6 fdb0 	bl	298 <nlr_pop>
   19738:	9409      	str	r4, [sp, #36]	; 0x24
   1973a:	4620      	mov	r0, r4
            #if SELECTIVE_EXC_IP
            // with selective ip, we store the ip 1 byte past the opcode, so move ptr back
            code_state->ip -= 1;
            #endif

            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   1973c:	6800      	ldr	r0, [r0, #0]
   1973e:	49a4      	ldr	r1, [pc, #656]	; (199d0 <mp_execute_bytecode+0x308>)
   19740:	f7fd fdd0 	bl	172e4 <mp_obj_is_subclass_fast>
   19744:	b148      	cbz	r0, 1975a <mp_execute_bytecode+0x92>
                if (code_state->ip) {
   19746:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1974a:	b133      	cbz	r3, 1975a <mp_execute_bytecode+0x92>
                    // check if it's a StopIteration within a for block
                    if (*code_state->ip == MP_BC_FOR_ITER) {
   1974c:	781a      	ldrb	r2, [r3, #0]
   1974e:	2a43      	cmp	r2, #67	; 0x43
   19750:	f000 85c2 	beq.w	1a2d8 <mp_execute_bytecode+0xc10>
                        const byte *ip = code_state->ip + 1;
                        DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
                        code_state->ip = ip + ulab; // jump to after for-block
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
                        goto outer_dispatch_loop; // continue with dispatch loop
                    } else if (*code_state->ip == MP_BC_YIELD_FROM) {
   19754:	2a5e      	cmp	r2, #94	; 0x5e
   19756:	f000 8617 	beq.w	1a388 <mp_execute_bytecode+0xcc0>
unwind_loop:
#endif
            // set file and line number that the exception occurred at
            // TODO: don't set traceback for exceptions re-raised by END_FINALLY.
            // But consider how to handle nested exceptions.
            if (nlr.ret_val != &mp_const_GeneratorExit_obj) {
   1975a:	4b9e      	ldr	r3, [pc, #632]	; (199d4 <mp_execute_bytecode+0x30c>)
   1975c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1975e:	429a      	cmp	r2, r3
   19760:	d048      	beq.n	197f4 <mp_execute_bytecode+0x12c>
                const byte *ip = code_state->fun_bc->bytecode;
   19762:	f8d8 3000 	ldr.w	r3, [r8]
                ip = mp_decode_uint_skip(ip); // skip n_state
   19766:	6898      	ldr	r0, [r3, #8]
   19768:	f000 fef0 	bl	1a54c <mp_decode_uint_skip>
                ip = mp_decode_uint_skip(ip); // skip n_exc_stack
   1976c:	f000 feee 	bl	1a54c <mp_decode_uint_skip>
                ip++; // skip scope_params
                ip++; // skip n_pos_args
                ip++; // skip n_kwonly_args
                ip++; // skip n_def_pos_args
                size_t bc = code_state->ip - ip;
   19770:	f8d8 3004 	ldr.w	r3, [r8, #4]
                ip++; // skip n_def_pos_args
   19774:	1d05      	adds	r5, r0, #4
                size_t code_info_size = mp_decode_uint_value(ip);
   19776:	4628      	mov	r0, r5
                size_t bc = code_state->ip - ip;
   19778:	1b5c      	subs	r4, r3, r5
                size_t code_info_size = mp_decode_uint_value(ip);
   1977a:	f000 fed9 	bl	1a530 <mp_decode_uint_value>
   1977e:	4606      	mov	r6, r0
                ip = mp_decode_uint_skip(ip); // skip code_info_size
   19780:	4628      	mov	r0, r5
   19782:	f000 fee3 	bl	1a54c <mp_decode_uint_skip>
                bc -= code_info_size;
   19786:	ebc6 0e04 	rsb	lr, r6, r4
                qstr source_file = mp_decode_uint_value(ip);
                ip = mp_decode_uint_skip(ip);
                #endif
                size_t source_line = 1;
                size_t c;
                while ((c = *ip)) {
   1978a:	7904      	ldrb	r4, [r0, #4]
   1978c:	8803      	ldrh	r3, [r0, #0]
   1978e:	8841      	ldrh	r1, [r0, #2]
   19790:	2201      	movs	r2, #1
                ip += 4;
   19792:	3004      	adds	r0, #4
                while ((c = *ip)) {
   19794:	b96c      	cbnz	r4, 197b2 <mp_execute_bytecode+0xea>
   19796:	e01a      	b.n	197ce <mp_execute_bytecode+0x106>
                    size_t b, l;
                    if ((c & 0x80) == 0) {
                        // 0b0LLBBBBB encoding
                        b = c & 0x1f;
   19798:	f004 0c1f 	and.w	ip, r4, #31
                        // 0b1LLLBBBB 0bLLLLLLLL encoding (l's LSB in second byte)
                        b = c & 0xf;
                        l = ((c << 4) & 0x700) | ip[1];
                        ip += 2;
                    }
                    if (bc >= b) {
   1979c:	45f4      	cmp	ip, lr
                        ip += 1;
   1979e:	f100 0001 	add.w	r0, r0, #1
                        l = c >> 5;
   197a2:	ea4f 1554 	mov.w	r5, r4, lsr #5
                    if (bc >= b) {
   197a6:	d812      	bhi.n	197ce <mp_execute_bytecode+0x106>
                while ((c = *ip)) {
   197a8:	7804      	ldrb	r4, [r0, #0]
                        bc -= b;
   197aa:	ebcc 0e0e 	rsb	lr, ip, lr
                        source_line += l;
   197ae:	442a      	add	r2, r5
                while ((c = *ip)) {
   197b0:	b16c      	cbz	r4, 197ce <mp_execute_bytecode+0x106>
                    if ((c & 0x80) == 0) {
   197b2:	0625      	lsls	r5, r4, #24
   197b4:	d5f0      	bpl.n	19798 <mp_execute_bytecode+0xd0>
                        l = ((c << 4) & 0x700) | ip[1];
   197b6:	7846      	ldrb	r6, [r0, #1]
   197b8:	0125      	lsls	r5, r4, #4
                        b = c & 0xf;
   197ba:	f004 0c0f 	and.w	ip, r4, #15
                        l = ((c << 4) & 0x700) | ip[1];
   197be:	f405 65e0 	and.w	r5, r5, #1792	; 0x700
                    if (bc >= b) {
   197c2:	45f4      	cmp	ip, lr
                        l = ((c << 4) & 0x700) | ip[1];
   197c4:	ea45 0506 	orr.w	r5, r5, r6
                        ip += 2;
   197c8:	f100 0002 	add.w	r0, r0, #2
                    if (bc >= b) {
   197cc:	d9ec      	bls.n	197a8 <mp_execute_bytecode+0xe0>
                    } else {
                        // found source line corresponding to bytecode offset
                        break;
                    }
                }
                mp_obj_exception_add_traceback(MP_OBJ_FROM_PTR(nlr.ret_val), source_file, source_line, block_name);
   197ce:	9809      	ldr	r0, [sp, #36]	; 0x24
   197d0:	f7f6 f826 	bl	f820 <mp_obj_exception_add_traceback>
            }

            while (currently_in_except_block) {
   197d4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   197d8:	b183      	cbz	r3, 197fc <mp_execute_bytecode+0x134>
                // nested exception

                assert(exc_sp >= exc_stack);
   197da:	9b06      	ldr	r3, [sp, #24]
   197dc:	429f      	cmp	r7, r3
   197de:	f200 8608 	bhi.w	1a3f2 <mp_execute_bytecode+0xd2a>

                // TODO make a proper message for nested exception
                // at the moment we are just raising the very last exception (the one that caused the nested exception)

                // move up to previous exception handler
                POP_EXC_BLOCK();
   197e2:	9b06      	ldr	r3, [sp, #24]
   197e4:	685b      	ldr	r3, [r3, #4]
   197e6:	f003 0301 	and.w	r3, r3, #1
   197ea:	f88d 3017 	strb.w	r3, [sp, #23]
   197ee:	9b06      	ldr	r3, [sp, #24]
   197f0:	3b0c      	subs	r3, #12
   197f2:	9306      	str	r3, [sp, #24]
            while (currently_in_except_block) {
   197f4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   197f8:	2b00      	cmp	r3, #0
   197fa:	d1ee      	bne.n	197da <mp_execute_bytecode+0x112>
            }

            if (exc_sp >= exc_stack) {
   197fc:	9b06      	ldr	r3, [sp, #24]
   197fe:	429f      	cmp	r7, r3
   19800:	f200 85d1 	bhi.w	1a3a6 <mp_execute_bytecode+0xcde>
                // set flag to indicate that we are now handling an exception
                currently_in_except_block = 1;
   19804:	2301      	movs	r3, #1
   19806:	f88d 3017 	strb.w	r3, [sp, #23]

                // catch exception and pass to byte code
                code_state->ip = exc_sp->handler;
   1980a:	9a06      	ldr	r2, [sp, #24]
                mp_obj_t *sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   1980c:	9b06      	ldr	r3, [sp, #24]
                // save this exception in the stack so it can be used in a reraise, if needed
                exc_sp->prev_exc = nlr.ret_val;
   1980e:	9906      	ldr	r1, [sp, #24]
                mp_obj_t *sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   19810:	685b      	ldr	r3, [r3, #4]
                code_state->ip = exc_sp->handler;
   19812:	6810      	ldr	r0, [r2, #0]
                exc_sp->prev_exc = nlr.ret_val;
   19814:	9a09      	ldr	r2, [sp, #36]	; 0x24
                code_state->ip = exc_sp->handler;
   19816:	f8c8 0004 	str.w	r0, [r8, #4]
                // push exception object so it can be handled by bytecode
                PUSH(MP_OBJ_FROM_PTR(nlr.ret_val));
   1981a:	f023 0303 	bic.w	r3, r3, #3
                exc_sp->prev_exc = nlr.ret_val;
   1981e:	608a      	str	r2, [r1, #8]
                PUSH(MP_OBJ_FROM_PTR(nlr.ret_val));
   19820:	f843 2f04 	str.w	r2, [r3, #4]!
        if (nlr_push(&nlr) == 0) {
   19824:	a808      	add	r0, sp, #32
                code_state->sp = sp;
   19826:	f8c8 3008 	str.w	r3, [r8, #8]
        if (nlr_push(&nlr) == 0) {
   1982a:	f7e6 fd47 	bl	2bc <nlr_push>
   1982e:	2800      	cmp	r0, #0
   19830:	f43f af6e 	beq.w	19710 <mp_execute_bytecode+0x48>
   19834:	9809      	ldr	r0, [sp, #36]	; 0x24
   19836:	e781      	b.n	1973c <mp_execute_bytecode+0x74>
                    } else if (ip[-1] < MP_BC_UNARY_OP_MULTI + MP_UNARY_OP_NUM_BYTECODE) {
   19838:	28d3      	cmp	r0, #211	; 0xd3
   1983a:	f240 85e1 	bls.w	1a400 <mp_execute_bytecode+0xd38>
                    } else if (ip[-1] < MP_BC_BINARY_OP_MULTI + MP_BINARY_OP_NUM_BYTECODE) {
   1983e:	28f7      	cmp	r0, #247	; 0xf7
   19840:	f200 8626 	bhi.w	1a490 <mp_execute_bytecode+0xdc8>
                        SET_TOP(mp_binary_op(ip[-1] - MP_BC_BINARY_OP_MULTI, lhs, rhs));
   19844:	6832      	ldr	r2, [r6, #0]
   19846:	f856 1c04 	ldr.w	r1, [r6, #-4]
   1984a:	38d7      	subs	r0, #215	; 0xd7
   1984c:	f7f2 f870 	bl	b930 <mp_binary_op>
                        mp_obj_t rhs = POP();
   19850:	1f33      	subs	r3, r6, #4
                        SET_TOP(mp_binary_op(ip[-1] - MP_BC_BINARY_OP_MULTI, lhs, rhs));
   19852:	f846 0c04 	str.w	r0, [r6, #-4]
                switch (*ip++) {
   19856:	4625      	mov	r5, r4
                        mp_obj_t rhs = POP();
   19858:	461e      	mov	r6, r3
                MARK_EXC_IP_GLOBAL();
   1985a:	f8c8 5004 	str.w	r5, [r8, #4]
                switch (*ip++) {
   1985e:	7828      	ldrb	r0, [r5, #0]
   19860:	f1a0 0310 	sub.w	r3, r0, #16
   19864:	1c6c      	adds	r4, r5, #1
   19866:	2b5a      	cmp	r3, #90	; 0x5a
   19868:	f200 84eb 	bhi.w	1a242 <mp_execute_bytecode+0xb7a>
   1986c:	e8df f013 	tbh	[pc, r3, lsl #1]
   19870:	0241023c 	.word	0x0241023c
   19874:	04e901e6 	.word	0x04e901e6
   19878:	04e901d4 	.word	0x04e901d4
   1987c:	01b901cb 	.word	0x01b901cb
   19880:	021301b4 	.word	0x021301b4
   19884:	01f401fd 	.word	0x01f401fd
   19888:	023401eb 	.word	0x023401eb
   1988c:	022b0222 	.word	0x022b0222
   19890:	018e01ad 	.word	0x018e01ad
   19894:	019a017d 	.word	0x019a017d
   19898:	016b0159 	.word	0x016b0159
   1989c:	01730161 	.word	0x01730161
   198a0:	012b0144 	.word	0x012b0144
   198a4:	011f0125 	.word	0x011f0125
   198a8:	04e904e9 	.word	0x04e904e9
   198ac:	04e904e9 	.word	0x04e904e9
   198b0:	0100011a 	.word	0x0100011a
   198b4:	01120060 	.word	0x01120060
   198b8:	03300108 	.word	0x03300108
   198bc:	03180324 	.word	0x03180324
   198c0:	0303030c 	.word	0x0303030c
   198c4:	04e904e9 	.word	0x04e904e9
   198c8:	02d304e9 	.word	0x02d304e9
   198cc:	0283029e 	.word	0x0283029e
   198d0:	005b0283 	.word	0x005b0283
   198d4:	03540374 	.word	0x03540374
   198d8:	03a30345 	.word	0x03a30345
   198dc:	0259037b 	.word	0x0259037b
   198e0:	04e904e9 	.word	0x04e904e9
   198e4:	04e904e9 	.word	0x04e904e9
   198e8:	04e904e9 	.word	0x04e904e9
   198ec:	04e904e9 	.word	0x04e904e9
   198f0:	04bf0246 	.word	0x04bf0246
   198f4:	046704e9 	.word	0x046704e9
   198f8:	04e904b2 	.word	0x04e904b2
   198fc:	040104e9 	.word	0x040104e9
   19900:	04d304e9 	.word	0x04d304e9
   19904:	04900433 	.word	0x04900433
   19908:	00660268 	.word	0x00660268
   1990c:	04e90076 	.word	0x04e90076
   19910:	04190478 	.word	0x04190478
   19914:	03e3044a 	.word	0x03e3044a
   19918:	03b203ca 	.word	0x03b203ca
   1991c:	00c700df 	.word	0x00c700df
   19920:	00a400ba 	.word	0x00a400ba
   19924:	00f8      	.short	0x00f8
                    if (TOP() == mp_const_none) {
   19926:	6830      	ldr	r0, [r6, #0]
   19928:	4b2b      	ldr	r3, [pc, #172]	; (199d8 <mp_execute_bytecode+0x310>)
   1992a:	4298      	cmp	r0, r3
   1992c:	f040 8495 	bne.w	1a25a <mp_execute_bytecode+0xb92>
                        sp--;
   19930:	3e04      	subs	r6, #4
                switch (*ip++) {
   19932:	4625      	mov	r5, r4
                    DISPATCH();
   19934:	e791      	b.n	1985a <mp_execute_bytecode+0x192>
                        PUSH(ret_value);
   19936:	9b07      	ldr	r3, [sp, #28]
   19938:	6033      	str	r3, [r6, #0]
                        goto yield;
   1993a:	462c      	mov	r4, r5
                    nlr_pop();
   1993c:	f7e6 fcac 	bl	298 <nlr_pop>
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   19940:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19944:	9a06      	ldr	r2, [sp, #24]
                    code_state->ip = ip;
   19946:	f8c8 4004 	str.w	r4, [r8, #4]
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   1994a:	4313      	orrs	r3, r2
                    code_state->sp = sp;
   1994c:	f8c8 6008 	str.w	r6, [r8, #8]
                    code_state->exc_sp = MP_TAGPTR_MAKE(exc_sp, currently_in_except_block);
   19950:	f8c8 300c 	str.w	r3, [r8, #12]
                    return MP_VM_RETURN_YIELD;
   19954:	2001      	movs	r0, #1
                fastn[0] = MP_OBJ_FROM_PTR(nlr.ret_val); // must put exception here because sp is invalid
                return MP_VM_RETURN_EXCEPTION;
            }
        }
    }
}
   19956:	b015      	add	sp, #84	; 0x54
   19958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    mp_obj_t send_value = POP();
   1995c:	46b1      	mov	r9, r6
                    if (inject_exc != MP_OBJ_NULL) {
   1995e:	9a03      	ldr	r2, [sp, #12]
                    mp_obj_t send_value = POP();
   19960:	f859 1904 	ldr.w	r1, [r9], #-4
                    code_state->sp = sp; // Save sp because it's needed if mp_resume raises StopIteration
   19964:	f8c8 9008 	str.w	r9, [r8, #8]
                    if (inject_exc != MP_OBJ_NULL) {
   19968:	2a00      	cmp	r2, #0
   1996a:	f000 8505 	beq.w	1a378 <mp_execute_bytecode+0xcb0>
                        t_exc = inject_exc;
   1996e:	9b03      	ldr	r3, [sp, #12]
   19970:	9301      	str	r3, [sp, #4]
                        inject_exc = MP_OBJ_NULL;
   19972:	f04f 0e00 	mov.w	lr, #0
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   19976:	461a      	mov	r2, r3
   19978:	f856 0c04 	ldr.w	r0, [r6, #-4]
                        inject_exc = MP_OBJ_NULL;
   1997c:	f8cd e00c 	str.w	lr, [sp, #12]
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   19980:	4671      	mov	r1, lr
   19982:	ab07      	add	r3, sp, #28
   19984:	f7f3 f8a8 	bl	cad8 <mp_resume>
                    if (ret_kind == MP_VM_RETURN_YIELD) {
   19988:	2801      	cmp	r0, #1
   1998a:	d0d4      	beq.n	19936 <mp_execute_bytecode+0x26e>
                    } else if (ret_kind == MP_VM_RETURN_NORMAL) {
   1998c:	2800      	cmp	r0, #0
   1998e:	f040 84cd 	bne.w	1a32c <mp_execute_bytecode+0xc64>
                        if (ret_value == MP_OBJ_STOP_ITERATION) {
   19992:	9b07      	ldr	r3, [sp, #28]
                            PUSH(mp_const_none);
   19994:	4a10      	ldr	r2, [pc, #64]	; (199d8 <mp_execute_bytecode+0x310>)
   19996:	2b04      	cmp	r3, #4
   19998:	bf08      	it	eq
   1999a:	4613      	moveq	r3, r2
   1999c:	f846 3c04 	str.w	r3, [r6, #-4]
                        GENERATOR_EXIT_IF_NEEDED(t_exc);
   199a0:	9b01      	ldr	r3, [sp, #4]
   199a2:	b133      	cbz	r3, 199b2 <mp_execute_bytecode+0x2ea>
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   199a4:	490d      	ldr	r1, [pc, #52]	; (199dc <mp_execute_bytecode+0x314>)
   199a6:	4618      	mov	r0, r3
   199a8:	f7f5 fef4 	bl	f794 <mp_obj_exception_match>
   199ac:	2800      	cmp	r0, #0
   199ae:	f040 8506 	bne.w	1a3be <mp_execute_bytecode+0xcf6>
                    sp += MP_OBJ_ITER_BUF_NSLOTS - 1;
   199b2:	464e      	mov	r6, r9
                switch (*ip++) {
   199b4:	4625      	mov	r5, r4
   199b6:	e750      	b.n	1985a <mp_execute_bytecode+0x192>
                    mp_obj_t obj = mp_import_from(TOP(), qst);
   199b8:	4634      	mov	r4, r6
   199ba:	f8b5 1001 	ldrh.w	r1, [r5, #1]
   199be:	f854 0b04 	ldr.w	r0, [r4], #4
   199c2:	f7f3 f9b3 	bl	cd2c <mp_import_from>
                    DECODE_QSTR;
   199c6:	3503      	adds	r5, #3
                    PUSH(obj);
   199c8:	6070      	str	r0, [r6, #4]
   199ca:	4626      	mov	r6, r4
                    DISPATCH();
   199cc:	e745      	b.n	1985a <mp_execute_bytecode+0x192>
   199ce:	bf00      	nop
   199d0:	0002032c 	.word	0x0002032c
   199d4:	000201e8 	.word	0x000201e8
   199d8:	00021534 	.word	0x00021534
   199dc:	000202b4 	.word	0x000202b4
   199e0:	20000a2c 	.word	0x20000a2c
   199e4:	f8b5 0001 	ldrh.w	r0, [r5, #1]
                    SET_TOP(mp_import_name(qst, obj, TOP()));
   199e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   199ec:	6831      	ldr	r1, [r6, #0]
   199ee:	f7f3 f97d 	bl	ccec <mp_import_name>
                    mp_obj_t obj = POP();
   199f2:	1f33      	subs	r3, r6, #4
                    SET_TOP(mp_import_name(qst, obj, TOP()));
   199f4:	f846 0c04 	str.w	r0, [r6, #-4]
                    DECODE_QSTR;
   199f8:	3503      	adds	r5, #3
                    mp_obj_t obj = POP();
   199fa:	461e      	mov	r6, r3
                    DISPATCH();
   199fc:	e72d      	b.n	1985a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   199fe:	2100      	movs	r1, #0
                    DECODE_UINT;
   19a00:	f814 3b01 	ldrb.w	r3, [r4], #1
   19a04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19a08:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   19a0c:	061a      	lsls	r2, r3, #24
   19a0e:	d4f7      	bmi.n	19a00 <mp_execute_bytecode+0x338>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 3;
   19a10:	09cb      	lsrs	r3, r1, #7
   19a12:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   19a16:	fa53 f381 	uxtab	r3, r3, r1
   19a1a:	eba6 0683 	sub.w	r6, r6, r3, lsl #2
   19a1e:	3e0c      	subs	r6, #12
                    SET_TOP(mp_call_method_n_kw_var(true, unum, sp));
   19a20:	4632      	mov	r2, r6
   19a22:	2001      	movs	r0, #1
   19a24:	f7f2 fc8c 	bl	c340 <mp_call_method_n_kw_var>
                    DECODE_UINT;
   19a28:	4625      	mov	r5, r4
                    SET_TOP(mp_call_method_n_kw_var(true, unum, sp));
   19a2a:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   19a2c:	e715      	b.n	1985a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   19a2e:	2100      	movs	r1, #0
                    DECODE_UINT;
   19a30:	f814 3b01 	ldrb.w	r3, [r4], #1
   19a34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19a38:	0618      	lsls	r0, r3, #24
   19a3a:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   19a3e:	d4f7      	bmi.n	19a30 <mp_execute_bytecode+0x368>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 1;
   19a40:	b2c8      	uxtb	r0, r1
   19a42:	09ca      	lsrs	r2, r1, #7
   19a44:	1c43      	adds	r3, r0, #1
   19a46:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
   19a4a:	4413      	add	r3, r2
   19a4c:	eba6 0683 	sub.w	r6, r6, r3, lsl #2
                    SET_TOP(mp_call_method_n_kw(unum & 0xff, (unum >> 8) & 0xff, sp));
   19a50:	f3c1 2107 	ubfx	r1, r1, #8, #8
   19a54:	4632      	mov	r2, r6
   19a56:	f7f2 fa21 	bl	be9c <mp_call_method_n_kw>
                    DECODE_UINT;
   19a5a:	4625      	mov	r5, r4
                    SET_TOP(mp_call_method_n_kw(unum & 0xff, (unum >> 8) & 0xff, sp));
   19a5c:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   19a5e:	e6fc      	b.n	1985a <mp_execute_bytecode+0x192>
                    mp_import_all(POP());
   19a60:	6830      	ldr	r0, [r6, #0]
   19a62:	f1a6 0904 	sub.w	r9, r6, #4
                switch (*ip++) {
   19a66:	4625      	mov	r5, r4
                    mp_import_all(POP());
   19a68:	f7f3 f9f0 	bl	ce4c <mp_import_all>
   19a6c:	464e      	mov	r6, r9
                    DISPATCH();
   19a6e:	e6f4      	b.n	1985a <mp_execute_bytecode+0x192>
                    sp[0] = sp[-2];
   19a70:	6832      	ldr	r2, [r6, #0]
                    sp[-1] = sp[-3];
   19a72:	f856 3c04 	ldr.w	r3, [r6, #-4]
                    sp[0] = sp[-2];
   19a76:	60b2      	str	r2, [r6, #8]
                    sp[-1] = sp[-3];
   19a78:	6073      	str	r3, [r6, #4]
                switch (*ip++) {
   19a7a:	4625      	mov	r5, r4
                    sp += 2;
   19a7c:	3608      	adds	r6, #8
                    DISPATCH();
   19a7e:	e6ec      	b.n	1985a <mp_execute_bytecode+0x192>
                    sp[0] = sp[-1];
   19a80:	e916 000c 	ldmdb	r6, {r2, r3}
                    mp_obj_t top = sp[0];
   19a84:	6831      	ldr	r1, [r6, #0]
                    sp[-2] = top;
   19a86:	f846 1c08 	str.w	r1, [r6, #-8]
                switch (*ip++) {
   19a8a:	4625      	mov	r5, r4
                    sp[-1] = sp[-2];
   19a8c:	f846 2c04 	str.w	r2, [r6, #-4]
                    sp[0] = sp[-1];
   19a90:	6033      	str	r3, [r6, #0]
                    DISPATCH();
   19a92:	e6e2      	b.n	1985a <mp_execute_bytecode+0x192>
                    mp_obj_t top = sp[0];
   19a94:	6833      	ldr	r3, [r6, #0]
                    sp[0] = sp[-1];
   19a96:	f856 2c04 	ldr.w	r2, [r6, #-4]
   19a9a:	6032      	str	r2, [r6, #0]
                switch (*ip++) {
   19a9c:	4625      	mov	r5, r4
                    sp[-1] = top;
   19a9e:	f846 3c04 	str.w	r3, [r6, #-4]
                    DISPATCH();
   19aa2:	e6da      	b.n	1985a <mp_execute_bytecode+0x192>
                    PUSH(top);
   19aa4:	6833      	ldr	r3, [r6, #0]
   19aa6:	6073      	str	r3, [r6, #4]
                switch (*ip++) {
   19aa8:	4625      	mov	r5, r4
                    PUSH(top);
   19aaa:	3604      	adds	r6, #4
                    DISPATCH();
   19aac:	e6d5      	b.n	1985a <mp_execute_bytecode+0x192>
   19aae:	f8b5 0001 	ldrh.w	r0, [r5, #1]
                    DECODE_QSTR;
   19ab2:	3503      	adds	r5, #3
                    mp_delete_global(qst);
   19ab4:	f7f1 fe42 	bl	b73c <mp_delete_global>
                    DISPATCH();
   19ab8:	e6cf      	b.n	1985a <mp_execute_bytecode+0x192>
   19aba:	f8b5 0001 	ldrh.w	r0, [r5, #1]
                    DECODE_QSTR;
   19abe:	3503      	adds	r5, #3
                    mp_delete_name(qst);
   19ac0:	f7f1 fe14 	bl	b6ec <mp_delete_name>
                    DISPATCH();
   19ac4:	e6c9      	b.n	1985a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   19ac6:	2200      	movs	r2, #0
                    DECODE_UINT;
   19ac8:	f814 3b01 	ldrb.w	r3, [r4], #1
   19acc:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19ad0:	061d      	lsls	r5, r3, #24
   19ad2:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19ad6:	d4f7      	bmi.n	19ac8 <mp_execute_bytecode+0x400>
                    if (mp_obj_cell_get(fastn[-unum]) == MP_OBJ_NULL) {
   19ad8:	ebc2 7582 	rsb	r5, r2, r2, lsl #30
   19adc:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
   19ae0:	f7f4 fbde 	bl	e2a0 <mp_obj_cell_get>
   19ae4:	2800      	cmp	r0, #0
   19ae6:	f000 8467 	beq.w	1a3b8 <mp_execute_bytecode+0xcf0>
                    mp_obj_cell_set(fastn[-unum], MP_OBJ_NULL);
   19aea:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
   19aee:	2100      	movs	r1, #0
                    DECODE_UINT;
   19af0:	4625      	mov	r5, r4
                    mp_obj_cell_set(fastn[-unum], MP_OBJ_NULL);
   19af2:	f7f4 fbe3 	bl	e2bc <mp_obj_cell_set>
                    DISPATCH();
   19af6:	e6b0      	b.n	1985a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   19af8:	2200      	movs	r2, #0
                    DECODE_UINT;
   19afa:	f814 3b01 	ldrb.w	r3, [r4], #1
   19afe:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19b02:	061b      	lsls	r3, r3, #24
   19b04:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19b08:	d4f7      	bmi.n	19afa <mp_execute_bytecode+0x432>
                    if (fastn[-unum] == MP_OBJ_NULL) {
   19b0a:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   19b0e:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   19b12:	2b00      	cmp	r3, #0
   19b14:	f000 8450 	beq.w	1a3b8 <mp_execute_bytecode+0xcf0>
                    fastn[-unum] = MP_OBJ_NULL;
   19b18:	2300      	movs	r3, #0
                    DECODE_UINT;
   19b1a:	4625      	mov	r5, r4
                    fastn[-unum] = MP_OBJ_NULL;
   19b1c:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
                    DISPATCH();
   19b20:	e69b      	b.n	1985a <mp_execute_bytecode+0x192>
   19b22:	f8b5 0001 	ldrh.w	r0, [r5, #1]
                    mp_store_name(qst, POP());
   19b26:	6831      	ldr	r1, [r6, #0]
                    DECODE_QSTR;
   19b28:	3503      	adds	r5, #3
                    mp_store_name(qst, POP());
   19b2a:	3e04      	subs	r6, #4
   19b2c:	f7f1 fdca 	bl	b6c4 <mp_store_name>
                    DISPATCH();
   19b30:	e693      	b.n	1985a <mp_execute_bytecode+0x192>
   19b32:	f8b5 1001 	ldrh.w	r1, [r5, #1]
                    mp_store_attr(sp[0], qst, sp[-1]);
   19b36:	f856 2c04 	ldr.w	r2, [r6, #-4]
   19b3a:	f856 0908 	ldr.w	r0, [r6], #-8
                    DECODE_QSTR;
   19b3e:	3503      	adds	r5, #3
                    mp_store_attr(sp[0], qst, sp[-1]);
   19b40:	f7f2 fed6 	bl	c8f0 <mp_store_attr>
                    DISPATCH();
   19b44:	e689      	b.n	1985a <mp_execute_bytecode+0x192>
   19b46:	f8b5 0001 	ldrh.w	r0, [r5, #1]
                    mp_store_global(qst, POP());
   19b4a:	6831      	ldr	r1, [r6, #0]
                    DECODE_QSTR;
   19b4c:	3503      	adds	r5, #3
                    mp_store_global(qst, POP());
   19b4e:	3e04      	subs	r6, #4
   19b50:	f7f1 fde0 	bl	b714 <mp_store_global>
                    DISPATCH();
   19b54:	e681      	b.n	1985a <mp_execute_bytecode+0x192>
                    mp_obj_subscr(sp[-1], sp[0], sp[-2]);
   19b56:	f856 2c08 	ldr.w	r2, [r6, #-8]
   19b5a:	6831      	ldr	r1, [r6, #0]
   19b5c:	f856 0c04 	ldr.w	r0, [r6, #-4]
                switch (*ip++) {
   19b60:	4625      	mov	r5, r4
                    mp_obj_subscr(sp[-1], sp[0], sp[-2]);
   19b62:	f7f4 f9fb 	bl	df5c <mp_obj_subscr>
                    sp -= 3;
   19b66:	3e0c      	subs	r6, #12
                    DISPATCH();
   19b68:	e677      	b.n	1985a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   19b6a:	2200      	movs	r2, #0
                    DECODE_UINT;
   19b6c:	f814 3b01 	ldrb.w	r3, [r4], #1
   19b70:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19b74:	0618      	lsls	r0, r3, #24
   19b76:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19b7a:	d4f7      	bmi.n	19b6c <mp_execute_bytecode+0x4a4>
                    fastn[-unum] = POP();
   19b7c:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   19b80:	6833      	ldr	r3, [r6, #0]
   19b82:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
                    DECODE_UINT;
   19b86:	4625      	mov	r5, r4
                    fastn[-unum] = POP();
   19b88:	3e04      	subs	r6, #4
                    DISPATCH();
   19b8a:	e666      	b.n	1985a <mp_execute_bytecode+0x192>
                    SET_TOP(mp_obj_subscr(TOP(), index, MP_OBJ_SENTINEL));
   19b8c:	6831      	ldr	r1, [r6, #0]
   19b8e:	f856 0c04 	ldr.w	r0, [r6, #-4]
   19b92:	2208      	movs	r2, #8
   19b94:	f7f4 f9e2 	bl	df5c <mp_obj_subscr>
                    mp_obj_t index = POP();
   19b98:	1f33      	subs	r3, r6, #4
                    SET_TOP(mp_obj_subscr(TOP(), index, MP_OBJ_SENTINEL));
   19b9a:	f846 0c04 	str.w	r0, [r6, #-4]
                switch (*ip++) {
   19b9e:	4625      	mov	r5, r4
                    mp_obj_t index = POP();
   19ba0:	461e      	mov	r6, r3
                    DISPATCH();
   19ba2:	e65a      	b.n	1985a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   19ba4:	2200      	movs	r2, #0
                    DECODE_UINT;
   19ba6:	f814 3b01 	ldrb.w	r3, [r4], #1
   19baa:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19bae:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19bb2:	0619      	lsls	r1, r3, #24
   19bb4:	d4f7      	bmi.n	19ba6 <mp_execute_bytecode+0x4de>
                    mp_obj_cell_set(fastn[-unum], POP());
   19bb6:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   19bba:	6831      	ldr	r1, [r6, #0]
   19bbc:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   19bc0:	3e04      	subs	r6, #4
                    DECODE_UINT;
   19bc2:	4625      	mov	r5, r4
                    mp_obj_cell_set(fastn[-unum], POP());
   19bc4:	f7f4 fb7a 	bl	e2bc <mp_obj_cell_set>
                    DISPATCH();
   19bc8:	e647      	b.n	1985a <mp_execute_bytecode+0x192>
                    PUSH(mp_load_build_class());
   19bca:	f7f1 fd71 	bl	b6b0 <mp_load_build_class>
   19bce:	1d33      	adds	r3, r6, #4
   19bd0:	6070      	str	r0, [r6, #4]
                switch (*ip++) {
   19bd2:	4625      	mov	r5, r4
                    PUSH(mp_load_build_class());
   19bd4:	461e      	mov	r6, r3
                    DISPATCH();
   19bd6:	e640      	b.n	1985a <mp_execute_bytecode+0x192>
                    PUSH(MP_OBJ_NULL);
   19bd8:	2300      	movs	r3, #0
   19bda:	6073      	str	r3, [r6, #4]
                switch (*ip++) {
   19bdc:	4625      	mov	r5, r4
                    PUSH(MP_OBJ_NULL);
   19bde:	3604      	adds	r6, #4
                    DISPATCH();
   19be0:	e63b      	b.n	1985a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   19be2:	2200      	movs	r2, #0
                    DECODE_OBJ;
   19be4:	f814 3b01 	ldrb.w	r3, [r4], #1
   19be8:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19bec:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19bf0:	0619      	lsls	r1, r3, #24
   19bf2:	d4f7      	bmi.n	19be4 <mp_execute_bytecode+0x51c>
   19bf4:	f8d8 3000 	ldr.w	r3, [r8]
   19bf8:	68db      	ldr	r3, [r3, #12]
                    PUSH(obj);
   19bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   19bfe:	6073      	str	r3, [r6, #4]
                    DECODE_OBJ;
   19c00:	4625      	mov	r5, r4
                    PUSH(obj);
   19c02:	3604      	adds	r6, #4
                    DISPATCH();
   19c04:	e629      	b.n	1985a <mp_execute_bytecode+0x192>
   19c06:	f8b5 3001 	ldrh.w	r3, [r5, #1]
                    PUSH(MP_OBJ_NEW_QSTR(qst));
   19c0a:	009b      	lsls	r3, r3, #2
   19c0c:	f043 0302 	orr.w	r3, r3, #2
   19c10:	6073      	str	r3, [r6, #4]
                    DECODE_QSTR;
   19c12:	3503      	adds	r5, #3
                    PUSH(MP_OBJ_NEW_QSTR(qst));
   19c14:	3604      	adds	r6, #4
                    DISPATCH();
   19c16:	e620      	b.n	1985a <mp_execute_bytecode+0x192>
                    if ((ip[0] & 0x40) != 0) {
   19c18:	786a      	ldrb	r2, [r5, #1]
   19c1a:	f342 1280 	sbfx	r2, r2, #6, #1
                        num = (num << 7) | (*ip & 0x7f);
   19c1e:	f814 3b01 	ldrb.w	r3, [r4], #1
   19c22:	f003 017f 	and.w	r1, r3, #127	; 0x7f
                    } while ((*ip++ & 0x80) != 0);
   19c26:	0618      	lsls	r0, r3, #24
                        num = (num << 7) | (*ip & 0x7f);
   19c28:	ea41 12c2 	orr.w	r2, r1, r2, lsl #7
                    } while ((*ip++ & 0x80) != 0);
   19c2c:	d4f7      	bmi.n	19c1e <mp_execute_bytecode+0x556>
                    PUSH(MP_OBJ_NEW_SMALL_INT(num));
   19c2e:	0053      	lsls	r3, r2, #1
   19c30:	f043 0301 	orr.w	r3, r3, #1
   19c34:	6073      	str	r3, [r6, #4]
                    } while ((*ip++ & 0x80) != 0);
   19c36:	4625      	mov	r5, r4
                    PUSH(MP_OBJ_NEW_SMALL_INT(num));
   19c38:	3604      	adds	r6, #4
                    DISPATCH();
   19c3a:	e60e      	b.n	1985a <mp_execute_bytecode+0x192>
                    PUSH(mp_const_true);
   19c3c:	4bc0      	ldr	r3, [pc, #768]	; (19f40 <mp_execute_bytecode+0x878>)
   19c3e:	6073      	str	r3, [r6, #4]
                switch (*ip++) {
   19c40:	4625      	mov	r5, r4
                    PUSH(mp_const_true);
   19c42:	3604      	adds	r6, #4
                    DISPATCH();
   19c44:	e609      	b.n	1985a <mp_execute_bytecode+0x192>
   19c46:	f8b5 0001 	ldrh.w	r0, [r5, #1]
                    PUSH(mp_load_global(qst));
   19c4a:	f7f1 fcff 	bl	b64c <mp_load_global>
   19c4e:	1d33      	adds	r3, r6, #4
   19c50:	6070      	str	r0, [r6, #4]
                    DECODE_QSTR;
   19c52:	3503      	adds	r5, #3
                    PUSH(mp_load_global(qst));
   19c54:	461e      	mov	r6, r3
                    DISPATCH();
   19c56:	e600      	b.n	1985a <mp_execute_bytecode+0x192>
   19c58:	f8b5 0001 	ldrh.w	r0, [r5, #1]
                    PUSH(mp_load_name(qst));
   19c5c:	f7f1 fcce 	bl	b5fc <mp_load_name>
   19c60:	1d33      	adds	r3, r6, #4
   19c62:	6070      	str	r0, [r6, #4]
                    DECODE_QSTR;
   19c64:	3503      	adds	r5, #3
                    PUSH(mp_load_name(qst));
   19c66:	461e      	mov	r6, r3
                    DISPATCH();
   19c68:	e5f7      	b.n	1985a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   19c6a:	4625      	mov	r5, r4
   19c6c:	2200      	movs	r2, #0
                    DECODE_UINT;
   19c6e:	f815 3b01 	ldrb.w	r3, [r5], #1
   19c72:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19c76:	061c      	lsls	r4, r3, #24
   19c78:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19c7c:	d4f7      	bmi.n	19c6e <mp_execute_bytecode+0x5a6>
                    obj_shared = mp_obj_cell_get(fastn[-unum]);
   19c7e:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   19c82:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   19c86:	f7f4 fb0b 	bl	e2a0 <mp_obj_cell_get>
                    if (obj_shared == MP_OBJ_NULL) {
   19c8a:	2800      	cmp	r0, #0
   19c8c:	f000 8394 	beq.w	1a3b8 <mp_execute_bytecode+0xcf0>
                        PUSH(value); // push the next iteration value
   19c90:	6070      	str	r0, [r6, #4]
   19c92:	3604      	adds	r6, #4
   19c94:	e5e1      	b.n	1985a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   19c96:	4625      	mov	r5, r4
   19c98:	2200      	movs	r2, #0
                    DECODE_UINT;
   19c9a:	f815 3b01 	ldrb.w	r3, [r5], #1
   19c9e:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   19ca2:	061b      	lsls	r3, r3, #24
   19ca4:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   19ca8:	d4f7      	bmi.n	19c9a <mp_execute_bytecode+0x5d2>
                    obj_shared = fastn[-unum];
   19caa:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   19cae:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   19cb2:	e7ea      	b.n	19c8a <mp_execute_bytecode+0x5c2>
   19cb4:	f8b5 1001 	ldrh.w	r1, [r5, #1]
                    mp_load_method(*sp, qst, sp);
   19cb8:	6830      	ldr	r0, [r6, #0]
   19cba:	4632      	mov	r2, r6
                    DECODE_QSTR;
   19cbc:	3503      	adds	r5, #3
                    mp_load_method(*sp, qst, sp);
   19cbe:	f7f2 fdc7 	bl	c850 <mp_load_method>
                    sp += 1;
   19cc2:	3604      	adds	r6, #4
                    DISPATCH();
   19cc4:	e5c9      	b.n	1985a <mp_execute_bytecode+0x192>
   19cc6:	f8b5 0001 	ldrh.w	r0, [r5, #1]
                    mp_load_super_method(qst, sp - 1);
   19cca:	f1a6 0108 	sub.w	r1, r6, #8
                    DECODE_QSTR;
   19cce:	3503      	adds	r5, #3
                    sp -= 1;
   19cd0:	3e04      	subs	r6, #4
                    mp_load_super_method(qst, sp - 1);
   19cd2:	f7fd faed 	bl	172b0 <mp_load_super_method>
                    DISPATCH();
   19cd6:	e5c0      	b.n	1985a <mp_execute_bytecode+0x192>
   19cd8:	f8b5 1001 	ldrh.w	r1, [r5, #1]
                    SET_TOP(mp_load_attr(TOP(), qst));
   19cdc:	6830      	ldr	r0, [r6, #0]
   19cde:	f7f2 fcc7 	bl	c670 <mp_load_attr>
                    DECODE_QSTR;
   19ce2:	3503      	adds	r5, #3
                    SET_TOP(mp_load_attr(TOP(), qst));
   19ce4:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   19ce6:	e5b8      	b.n	1985a <mp_execute_bytecode+0x192>
                    PUSH(mp_const_false);
   19ce8:	4b96      	ldr	r3, [pc, #600]	; (19f44 <mp_execute_bytecode+0x87c>)
   19cea:	6073      	str	r3, [r6, #4]
                switch (*ip++) {
   19cec:	4625      	mov	r5, r4
                    PUSH(mp_const_false);
   19cee:	3604      	adds	r6, #4
                    DISPATCH();
   19cf0:	e5b3      	b.n	1985a <mp_execute_bytecode+0x192>
                    PUSH(mp_const_none);
   19cf2:	4b95      	ldr	r3, [pc, #596]	; (19f48 <mp_execute_bytecode+0x880>)
   19cf4:	6073      	str	r3, [r6, #4]
                switch (*ip++) {
   19cf6:	4625      	mov	r5, r4
                    PUSH(mp_const_none);
   19cf8:	3604      	adds	r6, #4
                    DISPATCH();
   19cfa:	e5ae      	b.n	1985a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   19cfc:	2000      	movs	r0, #0
                    DECODE_UINT;
   19cfe:	f814 3b01 	ldrb.w	r3, [r4], #1
   19d02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19d06:	061d      	lsls	r5, r3, #24
   19d08:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   19d0c:	d4f7      	bmi.n	19cfe <mp_execute_bytecode+0x636>
                    sp -= unum - 1;
   19d0e:	0083      	lsls	r3, r0, #2
   19d10:	f1c3 0304 	rsb	r3, r3, #4
   19d14:	441e      	add	r6, r3
                    SET_TOP(mp_obj_new_tuple(unum, sp));
   19d16:	4631      	mov	r1, r6
   19d18:	f7fc f86a 	bl	15df0 <mp_obj_new_tuple>
                    DECODE_UINT;
   19d1c:	4625      	mov	r5, r4
                    SET_TOP(mp_obj_new_tuple(unum, sp));
   19d1e:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   19d20:	e59b      	b.n	1985a <mp_execute_bytecode+0x192>
                    mp_obj_t obj = TOP();
   19d22:	46b1      	mov	r9, r6
                    obj = mp_getiter(obj, iter_buf);
   19d24:	4631      	mov	r1, r6
   19d26:	f859 0b0c 	ldr.w	r0, [r9], #12
   19d2a:	f7f2 fe09 	bl	c940 <mp_getiter>
                    if (obj != MP_OBJ_FROM_PTR(iter_buf)) {
   19d2e:	4286      	cmp	r6, r0
   19d30:	f43f ae3f 	beq.w	199b2 <mp_execute_bytecode+0x2ea>
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] = MP_OBJ_NULL;
   19d34:	2300      	movs	r3, #0
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 2] = obj;
   19d36:	6070      	str	r0, [r6, #4]
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] = MP_OBJ_NULL;
   19d38:	6033      	str	r3, [r6, #0]
                switch (*ip++) {
   19d3a:	4625      	mov	r5, r4
                    sp += MP_OBJ_ITER_BUF_NSLOTS - 1;
   19d3c:	464e      	mov	r6, r9
   19d3e:	e58c      	b.n	1985a <mp_execute_bytecode+0x192>
                    mp_uint_t unum = *ip;
   19d40:	786b      	ldrb	r3, [r5, #1]
                    if (unum == 2) {
   19d42:	2b02      	cmp	r3, #2
   19d44:	f000 82ee 	beq.w	1a324 <mp_execute_bytecode+0xc5c>
                    if (unum == 0) {
   19d48:	2b00      	cmp	r3, #0
   19d4a:	f040 82ec 	bne.w	1a326 <mp_execute_bytecode+0xc5e>
                        for (mp_exc_stack_t *e = exc_sp; e >= exc_stack; e--) {
   19d4e:	9b06      	ldr	r3, [sp, #24]
   19d50:	429f      	cmp	r7, r3
   19d52:	d806      	bhi.n	19d62 <mp_execute_bytecode+0x69a>
                            if (e->prev_exc != NULL) {
   19d54:	6898      	ldr	r0, [r3, #8]
   19d56:	2800      	cmp	r0, #0
   19d58:	f47f ace9 	bne.w	1972e <mp_execute_bytecode+0x66>
                        for (mp_exc_stack_t *e = exc_sp; e >= exc_stack; e--) {
   19d5c:	3b0c      	subs	r3, #12
   19d5e:	429f      	cmp	r7, r3
   19d60:	d9f8      	bls.n	19d54 <mp_execute_bytecode+0x68c>
                            obj = mp_obj_new_exception_msg(&mp_type_RuntimeError, "no active exception to reraise");
   19d62:	497a      	ldr	r1, [pc, #488]	; (19f4c <mp_execute_bytecode+0x884>)
   19d64:	487a      	ldr	r0, [pc, #488]	; (19f50 <mp_execute_bytecode+0x888>)
   19d66:	f7f5 fbdf 	bl	f528 <mp_obj_new_exception_msg>
   19d6a:	4604      	mov	r4, r0
                            RAISE(obj);
   19d6c:	f7e6 fa94 	bl	298 <nlr_pop>
   19d70:	9409      	str	r4, [sp, #36]	; 0x24
   19d72:	4620      	mov	r0, r4
   19d74:	e4e2      	b.n	1973c <mp_execute_bytecode+0x74>
                    PUSH_EXC_BLOCK((code_state->ip[0] == MP_BC_SETUP_FINALLY) ? 1 : 0);
   19d76:	9a06      	ldr	r2, [sp, #24]
   19d78:	f8b5 3001 	ldrh.w	r3, [r5, #1]
   19d7c:	320c      	adds	r2, #12
   19d7e:	9206      	str	r2, [sp, #24]
   19d80:	9a06      	ldr	r2, [sp, #24]
   19d82:	9806      	ldr	r0, [sp, #24]
   19d84:	1ce9      	adds	r1, r5, #3
   19d86:	440b      	add	r3, r1
   19d88:	6013      	str	r3, [r2, #0]
   19d8a:	782b      	ldrb	r3, [r5, #0]
   19d8c:	f89d 2017 	ldrb.w	r2, [sp, #23]
   19d90:	9c06      	ldr	r4, [sp, #24]
   19d92:	2b40      	cmp	r3, #64	; 0x40
   19d94:	bf14      	ite	ne
   19d96:	2300      	movne	r3, #0
   19d98:	2302      	moveq	r3, #2
   19d9a:	4313      	orrs	r3, r2
   19d9c:	4333      	orrs	r3, r6
   19d9e:	2200      	movs	r2, #0
   19da0:	6043      	str	r3, [r0, #4]
   19da2:	460d      	mov	r5, r1
   19da4:	f88d 2017 	strb.w	r2, [sp, #23]
   19da8:	60a2      	str	r2, [r4, #8]
                    DISPATCH();
   19daa:	e556      	b.n	1985a <mp_execute_bytecode+0x192>
                    if (TOP() == mp_const_none) {
   19dac:	f8d6 9000 	ldr.w	r9, [r6]
   19db0:	4d65      	ldr	r5, [pc, #404]	; (19f48 <mp_execute_bytecode+0x880>)
   19db2:	45a9      	cmp	r9, r5
   19db4:	f000 830a 	beq.w	1a3cc <mp_execute_bytecode+0xd04>
                    } else if (MP_OBJ_IS_SMALL_INT(TOP())) {
   19db8:	f019 0301 	ands.w	r3, r9, #1
   19dbc:	9301      	str	r3, [sp, #4]
   19dbe:	f040 826b 	bne.w	1a298 <mp_execute_bytecode+0xbd0>
                        assert(mp_obj_is_exception_instance(TOP()));
   19dc2:	4648      	mov	r0, r9
   19dc4:	f7f5 fcd6 	bl	f774 <mp_obj_is_exception_instance>
   19dc8:	2800      	cmp	r0, #0
   19dca:	f000 833e 	beq.w	1a44a <mp_execute_bytecode+0xd82>
                        sp[1] = sp[0];
   19dce:	6830      	ldr	r0, [r6, #0]
   19dd0:	6070      	str	r0, [r6, #4]
                        sp[0] = MP_OBJ_FROM_PTR(mp_obj_get_type(sp[0]));
   19dd2:	f7f3 fd1f 	bl	d814 <mp_obj_get_type>
                        sp -= 2;
   19dd6:	f1a6 0908 	sub.w	r9, r6, #8
                        sp[0] = MP_OBJ_FROM_PTR(mp_obj_get_type(sp[0]));
   19dda:	6030      	str	r0, [r6, #0]
                        mp_obj_t ret_value = mp_call_method_n_kw(3, 0, sp);
   19ddc:	9901      	ldr	r1, [sp, #4]
                        sp[2] = mp_const_none;
   19dde:	60b5      	str	r5, [r6, #8]
                        mp_obj_t ret_value = mp_call_method_n_kw(3, 0, sp);
   19de0:	464a      	mov	r2, r9
   19de2:	2003      	movs	r0, #3
   19de4:	f7f2 f85a 	bl	be9c <mp_call_method_n_kw>
                        if (mp_obj_is_true(ret_value)) {
   19de8:	f7f3 fdf2 	bl	d9d0 <mp_obj_is_true>
   19dec:	2800      	cmp	r0, #0
   19dee:	f000 82b9 	beq.w	1a364 <mp_execute_bytecode+0xc9c>
                            assert(exc_sp >= exc_stack);
   19df2:	9a06      	ldr	r2, [sp, #24]
                            SET_TOP(mp_const_none);
   19df4:	f846 5c08 	str.w	r5, [r6, #-8]
                            assert(exc_sp >= exc_stack);
   19df8:	4297      	cmp	r7, r2
   19dfa:	f200 8342 	bhi.w	1a482 <mp_execute_bytecode+0xdba>
                            POP_EXC_BLOCK();
   19dfe:	9b06      	ldr	r3, [sp, #24]
   19e00:	685b      	ldr	r3, [r3, #4]
   19e02:	f003 0301 	and.w	r3, r3, #1
   19e06:	f88d 3017 	strb.w	r3, [sp, #23]
   19e0a:	9b06      	ldr	r3, [sp, #24]
   19e0c:	3b0c      	subs	r3, #12
                        sp -= 2;
   19e0e:	464e      	mov	r6, r9
                switch (*ip++) {
   19e10:	4625      	mov	r5, r4
                            POP_EXC_BLOCK();
   19e12:	9306      	str	r3, [sp, #24]
   19e14:	e521      	b.n	1985a <mp_execute_bytecode+0x192>
                    mp_obj_t obj = TOP();
   19e16:	f8d6 9000 	ldr.w	r9, [r6]
                    mp_load_method(obj, MP_QSTR___exit__, sp);
   19e1a:	4632      	mov	r2, r6
                    mp_load_method(obj, MP_QSTR___enter__, sp + 2);
   19e1c:	f106 0408 	add.w	r4, r6, #8
                    mp_load_method(obj, MP_QSTR___exit__, sp);
   19e20:	4648      	mov	r0, r9
   19e22:	210b      	movs	r1, #11
   19e24:	f7f2 fd14 	bl	c850 <mp_load_method>
                    mp_load_method(obj, MP_QSTR___enter__, sp + 2);
   19e28:	4648      	mov	r0, r9
   19e2a:	4622      	mov	r2, r4
   19e2c:	2109      	movs	r1, #9
   19e2e:	f7f2 fd0f 	bl	c850 <mp_load_method>
                    mp_obj_t ret = mp_call_method_n_kw(0, 0, sp + 2);
   19e32:	2100      	movs	r1, #0
   19e34:	4622      	mov	r2, r4
   19e36:	4608      	mov	r0, r1
   19e38:	f7f2 f830 	bl	be9c <mp_call_method_n_kw>
                    PUSH_EXC_BLOCK(1);
   19e3c:	9b06      	ldr	r3, [sp, #24]
   19e3e:	f8b5 2001 	ldrh.w	r2, [r5, #1]
   19e42:	330c      	adds	r3, #12
   19e44:	9306      	str	r3, [sp, #24]
   19e46:	f8dd c018 	ldr.w	ip, [sp, #24]
   19e4a:	f8dd e018 	ldr.w	lr, [sp, #24]
   19e4e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19e52:	9906      	ldr	r1, [sp, #24]
   19e54:	3503      	adds	r5, #3
   19e56:	442a      	add	r2, r5
   19e58:	f8cc 2000 	str.w	r2, [ip]
   19e5c:	f043 0302 	orr.w	r3, r3, #2
   19e60:	1d32      	adds	r2, r6, #4
   19e62:	4313      	orrs	r3, r2
   19e64:	2200      	movs	r2, #0
   19e66:	f8ce 3004 	str.w	r3, [lr, #4]
   19e6a:	f88d 2017 	strb.w	r2, [sp, #23]
   19e6e:	608a      	str	r2, [r1, #8]
                    PUSH(ret);
   19e70:	60b0      	str	r0, [r6, #8]
   19e72:	4626      	mov	r6, r4
                    DISPATCH();
   19e74:	e4f1      	b.n	1985a <mp_execute_bytecode+0x192>
                    if (mp_obj_is_true(TOP())) {
   19e76:	6830      	ldr	r0, [r6, #0]
   19e78:	f8b5 4001 	ldrh.w	r4, [r5, #1]
                    DECODE_SLABEL;
   19e7c:	3503      	adds	r5, #3
                    if (mp_obj_is_true(TOP())) {
   19e7e:	f7f3 fda7 	bl	d9d0 <mp_obj_is_true>
   19e82:	b148      	cbz	r0, 19e98 <mp_execute_bytecode+0x7d0>
                        sp--;
   19e84:	3e04      	subs	r6, #4
   19e86:	e029      	b.n	19edc <mp_execute_bytecode+0x814>
                    if (mp_obj_is_true(TOP())) {
   19e88:	6830      	ldr	r0, [r6, #0]
   19e8a:	f8b5 4001 	ldrh.w	r4, [r5, #1]
                    DECODE_SLABEL;
   19e8e:	3503      	adds	r5, #3
                    if (mp_obj_is_true(TOP())) {
   19e90:	f7f3 fd9e 	bl	d9d0 <mp_obj_is_true>
   19e94:	2800      	cmp	r0, #0
   19e96:	d0f5      	beq.n	19e84 <mp_execute_bytecode+0x7bc>
                        ip += slab;
   19e98:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
   19e9c:	4425      	add	r5, r4
   19e9e:	e01d      	b.n	19edc <mp_execute_bytecode+0x814>
                    if (!mp_obj_is_true(POP())) {
   19ea0:	6830      	ldr	r0, [r6, #0]
   19ea2:	f8b5 4001 	ldrh.w	r4, [r5, #1]
   19ea6:	3e04      	subs	r6, #4
                    DECODE_SLABEL;
   19ea8:	3503      	adds	r5, #3
                    if (!mp_obj_is_true(POP())) {
   19eaa:	f7f3 fd91 	bl	d9d0 <mp_obj_is_true>
   19eae:	b9a8      	cbnz	r0, 19edc <mp_execute_bytecode+0x814>
                        ip += slab;
   19eb0:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
   19eb4:	4425      	add	r5, r4
   19eb6:	e011      	b.n	19edc <mp_execute_bytecode+0x814>
                    if (mp_obj_is_true(POP())) {
   19eb8:	6830      	ldr	r0, [r6, #0]
   19eba:	f8b5 4001 	ldrh.w	r4, [r5, #1]
   19ebe:	3e04      	subs	r6, #4
                    DECODE_SLABEL;
   19ec0:	3503      	adds	r5, #3
                    if (mp_obj_is_true(POP())) {
   19ec2:	f7f3 fd85 	bl	d9d0 <mp_obj_is_true>
   19ec6:	b148      	cbz	r0, 19edc <mp_execute_bytecode+0x814>
                        ip += slab;
   19ec8:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
   19ecc:	4425      	add	r5, r4
   19ece:	e005      	b.n	19edc <mp_execute_bytecode+0x814>
   19ed0:	f8b5 5001 	ldrh.w	r5, [r5, #1]
   19ed4:	f5a5 45ff 	sub.w	r5, r5, #32640	; 0x7f80
   19ed8:	3d7e      	subs	r5, #126	; 0x7e
                    ip += slab;
   19eda:	4425      	add	r5, r4
                if (MP_STATE_VM(mp_pending_exception) != MP_OBJ_NULL) {
   19edc:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   19ee0:	2b00      	cmp	r3, #0
   19ee2:	f43f acba 	beq.w	1985a <mp_execute_bytecode+0x192>
                    mp_obj_t obj = MP_STATE_VM(mp_pending_exception);
   19ee6:	4b1b      	ldr	r3, [pc, #108]	; (19f54 <mp_execute_bytecode+0x88c>)
                    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
   19ee8:	4a1a      	ldr	r2, [pc, #104]	; (19f54 <mp_execute_bytecode+0x88c>)
                    mp_obj_t obj = MP_STATE_VM(mp_pending_exception);
   19eea:	6b5c      	ldr	r4, [r3, #52]	; 0x34
                    MP_STATE_VM(mp_pending_exception) = MP_OBJ_NULL;
   19eec:	2300      	movs	r3, #0
   19eee:	6353      	str	r3, [r2, #52]	; 0x34
                    RAISE(obj);
   19ef0:	f7e6 f9d2 	bl	298 <nlr_pop>
   19ef4:	9409      	str	r4, [sp, #36]	; 0x24
   19ef6:	4620      	mov	r0, r4
   19ef8:	e420      	b.n	1973c <mp_execute_bytecode+0x74>
                    assert(exc_sp >= exc_stack);
   19efa:	9b06      	ldr	r3, [sp, #24]
   19efc:	429f      	cmp	r7, r3
   19efe:	f200 82ab 	bhi.w	1a458 <mp_execute_bytecode+0xd90>
                    POP_EXC_BLOCK();
   19f02:	9b06      	ldr	r3, [sp, #24]
   19f04:	685b      	ldr	r3, [r3, #4]
   19f06:	f003 0301 	and.w	r3, r3, #1
   19f0a:	f88d 3017 	strb.w	r3, [sp, #23]
   19f0e:	9b06      	ldr	r3, [sp, #24]
   19f10:	3b0c      	subs	r3, #12
                switch (*ip++) {
   19f12:	4625      	mov	r5, r4
                    POP_EXC_BLOCK();
   19f14:	9306      	str	r3, [sp, #24]
                    DISPATCH();
   19f16:	e4a0      	b.n	1985a <mp_execute_bytecode+0x192>
   19f18:	f8b5 4001 	ldrh.w	r4, [r5, #1]
                    code_state->sp = sp;
   19f1c:	f8c8 6008 	str.w	r6, [r8, #8]
                    if (sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] == MP_OBJ_NULL) {
   19f20:	f856 3c0c 	ldr.w	r3, [r6, #-12]
                    DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   19f24:	3503      	adds	r5, #3
                    if (sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] == MP_OBJ_NULL) {
   19f26:	2b00      	cmp	r3, #0
   19f28:	f000 8223 	beq.w	1a372 <mp_execute_bytecode+0xcaa>
                        obj = MP_OBJ_FROM_PTR(&sp[-MP_OBJ_ITER_BUF_NSLOTS + 1]);
   19f2c:	f1a6 000c 	sub.w	r0, r6, #12
                    mp_obj_t value = mp_iternext_allow_raise(obj);
   19f30:	f7f2 fd5a 	bl	c9e8 <mp_iternext_allow_raise>
                    if (value == MP_OBJ_STOP_ITERATION) {
   19f34:	2804      	cmp	r0, #4
   19f36:	f47f aeab 	bne.w	19c90 <mp_execute_bytecode+0x5c8>
                        sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   19f3a:	3e10      	subs	r6, #16
                        ip += ulab; // jump to after for-block
   19f3c:	4425      	add	r5, r4
   19f3e:	e48c      	b.n	1985a <mp_execute_bytecode+0x192>
   19f40:	0001fc44 	.word	0x0001fc44
   19f44:	0001fc3c 	.word	0x0001fc3c
   19f48:	00021534 	.word	0x00021534
   19f4c:	00022c04 	.word	0x00022c04
   19f50:	00020674 	.word	0x00020674
   19f54:	20000a2c 	.word	0x20000a2c
                    SET_TOP(mp_getiter(TOP(), NULL));
   19f58:	2100      	movs	r1, #0
   19f5a:	6830      	ldr	r0, [r6, #0]
   19f5c:	f7f2 fcf0 	bl	c940 <mp_getiter>
                switch (*ip++) {
   19f60:	4625      	mov	r5, r4
                    SET_TOP(mp_getiter(TOP(), NULL));
   19f62:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   19f64:	e479      	b.n	1985a <mp_execute_bytecode+0x192>
                    PUSH((mp_obj_t)(mp_uint_t)(uintptr_t)(ip + slab)); // push destination ip for jump
   19f66:	f8b5 3001 	ldrh.w	r3, [r5, #1]
   19f6a:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
   19f6e:	3b7e      	subs	r3, #126	; 0x7e
   19f70:	4423      	add	r3, r4
   19f72:	6073      	str	r3, [r6, #4]
                    PUSH((mp_obj_t)(mp_uint_t)(*ip)); // push number of exception handlers to unwind (0x80 bit set if we also need to pop stack)
   19f74:	78ea      	ldrb	r2, [r5, #3]
   19f76:	60b2      	str	r2, [r6, #8]
   19f78:	3608      	adds	r6, #8
   19f7a:	e013      	b.n	19fa4 <mp_execute_bytecode+0x8dc>
                        assert(exc_sp >= exc_stack);
   19f7c:	9b06      	ldr	r3, [sp, #24]
   19f7e:	429f      	cmp	r7, r3
                        unum -= 1;
   19f80:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
                        assert(exc_sp >= exc_stack);
   19f84:	f200 8253 	bhi.w	1a42e <mp_execute_bytecode+0xd66>
                        if (MP_TAGPTR_TAG1(exc_sp->val_sp)) {
   19f88:	9b06      	ldr	r3, [sp, #24]
   19f8a:	685b      	ldr	r3, [r3, #4]
   19f8c:	0798      	lsls	r0, r3, #30
   19f8e:	f100 8198 	bmi.w	1a2c2 <mp_execute_bytecode+0xbfa>
                        POP_EXC_BLOCK();
   19f92:	9b06      	ldr	r3, [sp, #24]
   19f94:	685b      	ldr	r3, [r3, #4]
   19f96:	f003 0301 	and.w	r3, r3, #1
   19f9a:	f88d 3017 	strb.w	r3, [sp, #23]
   19f9e:	9b06      	ldr	r3, [sp, #24]
   19fa0:	3b0c      	subs	r3, #12
   19fa2:	9306      	str	r3, [sp, #24]
                    while ((unum & 0x7f) > 0) {
   19fa4:	0651      	lsls	r1, r2, #25
   19fa6:	d1e9      	bne.n	19f7c <mp_execute_bytecode+0x8b4>
                    ip = (const byte*)MP_OBJ_TO_PTR(POP()); // pop destination ip for jump
   19fa8:	f856 5c04 	ldr.w	r5, [r6, #-4]
                    if (unum != 0) {
   19fac:	2a00      	cmp	r2, #0
   19fae:	f040 81d1 	bne.w	1a354 <mp_execute_bytecode+0xc8c>
                    ip = (const byte*)MP_OBJ_TO_PTR(POP()); // pop destination ip for jump
   19fb2:	3e08      	subs	r6, #8
   19fb4:	e792      	b.n	19edc <mp_execute_bytecode+0x814>
                    assert(exc_sp >= exc_stack);
   19fb6:	9b06      	ldr	r3, [sp, #24]
   19fb8:	429f      	cmp	r7, r3
   19fba:	f200 8278 	bhi.w	1a4ae <mp_execute_bytecode+0xde6>
                    assert(currently_in_except_block);
   19fbe:	f89d 3017 	ldrb.w	r3, [sp, #23]
   19fc2:	2b00      	cmp	r3, #0
   19fc4:	d19d      	bne.n	19f02 <mp_execute_bytecode+0x83a>
   19fc6:	4bcb      	ldr	r3, [pc, #812]	; (1a2f4 <mp_execute_bytecode+0xc2c>)
   19fc8:	4acb      	ldr	r2, [pc, #812]	; (1a2f8 <mp_execute_bytecode+0xc30>)
   19fca:	48cc      	ldr	r0, [pc, #816]	; (1a2fc <mp_execute_bytecode+0xc34>)
   19fcc:	f240 3106 	movw	r1, #774	; 0x306
   19fd0:	f001 f9cc 	bl	1b36c <__assert_func>
                switch (*ip++) {
   19fd4:	2100      	movs	r1, #0
                    DECODE_UINT;
   19fd6:	f814 3b01 	ldrb.w	r3, [r4], #1
   19fda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   19fde:	061d      	lsls	r5, r3, #24
   19fe0:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   19fe4:	d4f7      	bmi.n	19fd6 <mp_execute_bytecode+0x90e>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 2;
   19fe6:	09cb      	lsrs	r3, r1, #7
   19fe8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   19fec:	fa53 f381 	uxtab	r3, r3, r1
   19ff0:	eba6 0683 	sub.w	r6, r6, r3, lsl #2
   19ff4:	3e08      	subs	r6, #8
                    SET_TOP(mp_call_method_n_kw_var(false, unum, sp));
   19ff6:	4632      	mov	r2, r6
   19ff8:	2000      	movs	r0, #0
   19ffa:	f7f2 f9a1 	bl	c340 <mp_call_method_n_kw_var>
                    DECODE_UINT;
   19ffe:	4625      	mov	r5, r4
                    SET_TOP(mp_call_method_n_kw_var(false, unum, sp));
   1a000:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   1a002:	e42a      	b.n	1985a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   1a004:	2200      	movs	r2, #0
                    DECODE_UINT;
   1a006:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a00a:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a00e:	061b      	lsls	r3, r3, #24
   1a010:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a014:	d4f7      	bmi.n	1a006 <mp_execute_bytecode+0x93e>
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe);
   1a016:	09d3      	lsrs	r3, r2, #7
   1a018:	b2d1      	uxtb	r1, r2
   1a01a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   1a01e:	440b      	add	r3, r1
   1a020:	eba6 0683 	sub.w	r6, r6, r3, lsl #2
                    SET_TOP(mp_call_function_n_kw(*sp, unum & 0xff, (unum >> 8) & 0xff, sp + 1));
   1a024:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1a028:	1d33      	adds	r3, r6, #4
   1a02a:	6830      	ldr	r0, [r6, #0]
   1a02c:	f7f1 ff14 	bl	be58 <mp_call_function_n_kw>
                    DECODE_UINT;
   1a030:	4625      	mov	r5, r4
                    SET_TOP(mp_call_function_n_kw(*sp, unum & 0xff, (unum >> 8) & 0xff, sp + 1));
   1a032:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   1a034:	e411      	b.n	1985a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   1a036:	2000      	movs	r0, #0
   1a038:	e000      	b.n	1a03c <mp_execute_bytecode+0x974>
                    DECODE_PTR;
   1a03a:	461c      	mov	r4, r3
   1a03c:	4623      	mov	r3, r4
   1a03e:	f813 2b01 	ldrb.w	r2, [r3], #1
   1a042:	f002 017f 	and.w	r1, r2, #127	; 0x7f
   1a046:	0612      	lsls	r2, r2, #24
   1a048:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
   1a04c:	d4f5      	bmi.n	1a03a <mp_execute_bytecode+0x972>
                    size_t n_closed_over = *ip++;
   1a04e:	7861      	ldrb	r1, [r4, #1]
                    DECODE_PTR;
   1a050:	f8d8 3000 	ldr.w	r3, [r8]
                    sp -= 2 + n_closed_over - 1;
   1a054:	43ca      	mvns	r2, r1
                    DECODE_PTR;
   1a056:	68db      	ldr	r3, [r3, #12]
                    sp -= 2 + n_closed_over - 1;
   1a058:	eb06 0682 	add.w	r6, r6, r2, lsl #2
                    SET_TOP(mp_make_closure_from_raw_code(ptr, 0x100 | n_closed_over, sp));
   1a05c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   1a060:	4632      	mov	r2, r6
   1a062:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a066:	f7f1 f997 	bl	b398 <mp_make_closure_from_raw_code>
                    size_t n_closed_over = *ip++;
   1a06a:	1ca5      	adds	r5, r4, #2
                    SET_TOP(mp_make_closure_from_raw_code(ptr, 0x100 | n_closed_over, sp));
   1a06c:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   1a06e:	f7ff bbf4 	b.w	1985a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   1a072:	2200      	movs	r2, #0
                    DECODE_UINT;
   1a074:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a078:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   1a07c:	061b      	lsls	r3, r3, #24
   1a07e:	eb01 12c2 	add.w	r2, r1, r2, lsl #7
   1a082:	d4f7      	bmi.n	1a074 <mp_execute_bytecode+0x9ac>
                    mp_obj_t obj = sp[-(unum >> 2)];
   1a084:	0893      	lsrs	r3, r2, #2
   1a086:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
                    if ((unum & 3) == 0) {
   1a08a:	0795      	lsls	r5, r2, #30
                    mp_obj_t obj = sp[-(unum >> 2)];
   1a08c:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
                    if ((unum & 3) == 0) {
   1a090:	f040 80f9 	bne.w	1a286 <mp_execute_bytecode+0xbbe>
                        mp_obj_list_append(obj, sp[0]);
   1a094:	f856 1904 	ldr.w	r1, [r6], #-4
                    DECODE_UINT;
   1a098:	4625      	mov	r5, r4
                        mp_obj_list_append(obj, sp[0]);
   1a09a:	f7f6 ff6f 	bl	10f7c <mp_obj_list_append>
   1a09e:	f7ff bbdc 	b.w	1985a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   1a0a2:	2000      	movs	r0, #0
                    DECODE_PTR;
   1a0a4:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a0a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a0ac:	061d      	lsls	r5, r3, #24
   1a0ae:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1a0b2:	d4f7      	bmi.n	1a0a4 <mp_execute_bytecode+0x9dc>
   1a0b4:	f8d8 3000 	ldr.w	r3, [r8]
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   1a0b8:	6832      	ldr	r2, [r6, #0]
                    DECODE_PTR;
   1a0ba:	68db      	ldr	r3, [r3, #12]
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   1a0bc:	f856 1c04 	ldr.w	r1, [r6, #-4]
   1a0c0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a0c4:	f7f1 f8ee 	bl	b2a4 <mp_make_function_from_raw_code>
                    mp_obj_t def_dict = POP();
   1a0c8:	1f33      	subs	r3, r6, #4
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   1a0ca:	f846 0c04 	str.w	r0, [r6, #-4]
                    DECODE_PTR;
   1a0ce:	4625      	mov	r5, r4
                    mp_obj_t def_dict = POP();
   1a0d0:	461e      	mov	r6, r3
                    DISPATCH();
   1a0d2:	f7ff bbc2 	b.w	1985a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   1a0d6:	2500      	movs	r5, #0
                    DECODE_UINT;
   1a0d8:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a0dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a0e0:	eb02 15c5 	add.w	r5, r2, r5, lsl #7
   1a0e4:	061a      	lsls	r2, r3, #24
   1a0e6:	d4f7      	bmi.n	1a0d8 <mp_execute_bytecode+0xa10>
                    mp_unpack_ex(sp[0], unum, sp);
   1a0e8:	4632      	mov	r2, r6
   1a0ea:	4629      	mov	r1, r5
   1a0ec:	6830      	ldr	r0, [r6, #0]
   1a0ee:	f7f2 f9cf 	bl	c490 <mp_unpack_ex>
                    sp += (unum & 0xff) + ((unum >> 8) & 0xff);
   1a0f2:	f3c5 2307 	ubfx	r3, r5, #8, #8
   1a0f6:	fa53 f385 	uxtab	r3, r3, r5
   1a0fa:	eb06 0683 	add.w	r6, r6, r3, lsl #2
                    DECODE_UINT;
   1a0fe:	4625      	mov	r5, r4
                    DISPATCH();
   1a100:	f7ff bbab 	b.w	1985a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   1a104:	2000      	movs	r0, #0
   1a106:	e000      	b.n	1a10a <mp_execute_bytecode+0xa42>
                    DECODE_PTR;
   1a108:	461c      	mov	r4, r3
   1a10a:	4623      	mov	r3, r4
   1a10c:	f813 2b01 	ldrb.w	r2, [r3], #1
   1a110:	f002 017f 	and.w	r1, r2, #127	; 0x7f
   1a114:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
   1a118:	0611      	lsls	r1, r2, #24
   1a11a:	d4f5      	bmi.n	1a108 <mp_execute_bytecode+0xa40>
                    size_t n_closed_over = *ip++;
   1a11c:	7861      	ldrb	r1, [r4, #1]
                    DECODE_PTR;
   1a11e:	f8d8 2000 	ldr.w	r2, [r8]
                    sp -= n_closed_over - 1;
   1a122:	008b      	lsls	r3, r1, #2
                    DECODE_PTR;
   1a124:	68d5      	ldr	r5, [r2, #12]
                    sp -= n_closed_over - 1;
   1a126:	f1c3 0304 	rsb	r3, r3, #4
   1a12a:	441e      	add	r6, r3
                    SET_TOP(mp_make_closure_from_raw_code(ptr, n_closed_over, sp));
   1a12c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   1a130:	4632      	mov	r2, r6
   1a132:	f7f1 f931 	bl	b398 <mp_make_closure_from_raw_code>
                    size_t n_closed_over = *ip++;
   1a136:	1ca5      	adds	r5, r4, #2
                    SET_TOP(mp_make_closure_from_raw_code(ptr, n_closed_over, sp));
   1a138:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   1a13a:	f7ff bb8e 	b.w	1985a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   1a13e:	2000      	movs	r0, #0
                    DECODE_UINT;
   1a140:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a144:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a148:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1a14c:	061a      	lsls	r2, r3, #24
   1a14e:	d4f7      	bmi.n	1a140 <mp_execute_bytecode+0xa78>
                    PUSH(mp_obj_new_dict(unum));
   1a150:	f7f4 fff4 	bl	f13c <mp_obj_new_dict>
   1a154:	1d33      	adds	r3, r6, #4
   1a156:	6070      	str	r0, [r6, #4]
                    DECODE_UINT;
   1a158:	4625      	mov	r5, r4
                    PUSH(mp_obj_new_dict(unum));
   1a15a:	461e      	mov	r6, r3
                    DISPATCH();
   1a15c:	f7ff bb7d 	b.w	1985a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   1a160:	2100      	movs	r1, #0
                    DECODE_PTR;
   1a162:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a166:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a16a:	061b      	lsls	r3, r3, #24
   1a16c:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
   1a170:	d4f7      	bmi.n	1a162 <mp_execute_bytecode+0xa9a>
   1a172:	f8d8 3000 	ldr.w	r3, [r8]
   1a176:	68db      	ldr	r3, [r3, #12]
                    PUSH(mp_make_function_from_raw_code(ptr, MP_OBJ_NULL, MP_OBJ_NULL));
   1a178:	2200      	movs	r2, #0
   1a17a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   1a17e:	4611      	mov	r1, r2
   1a180:	f7f1 f890 	bl	b2a4 <mp_make_function_from_raw_code>
   1a184:	1d33      	adds	r3, r6, #4
   1a186:	6070      	str	r0, [r6, #4]
                    DECODE_PTR;
   1a188:	4625      	mov	r5, r4
                    PUSH(mp_make_function_from_raw_code(ptr, MP_OBJ_NULL, MP_OBJ_NULL));
   1a18a:	461e      	mov	r6, r3
                    DISPATCH();
   1a18c:	f7ff bb65 	b.w	1985a <mp_execute_bytecode+0x192>
                    if (currently_in_except_block) {
   1a190:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1a194:	b173      	cbz	r3, 1a1b4 <mp_execute_bytecode+0xaec>
                        POP_EXC_BLOCK();
   1a196:	9b06      	ldr	r3, [sp, #24]
   1a198:	685b      	ldr	r3, [r3, #4]
   1a19a:	f003 0301 	and.w	r3, r3, #1
   1a19e:	f88d 3017 	strb.w	r3, [sp, #23]
   1a1a2:	e004      	b.n	1a1ae <mp_execute_bytecode+0xae6>
                        if (MP_TAGPTR_TAG1(exc_sp->val_sp)) {
   1a1a4:	9b06      	ldr	r3, [sp, #24]
   1a1a6:	685b      	ldr	r3, [r3, #4]
   1a1a8:	079b      	lsls	r3, r3, #30
   1a1aa:	f100 80a9 	bmi.w	1a300 <mp_execute_bytecode+0xc38>
                        POP_EXC_BLOCK();
   1a1ae:	9b06      	ldr	r3, [sp, #24]
   1a1b0:	3b0c      	subs	r3, #12
   1a1b2:	9306      	str	r3, [sp, #24]
                    while (exc_sp >= exc_stack) {
   1a1b4:	9b06      	ldr	r3, [sp, #24]
   1a1b6:	429f      	cmp	r7, r3
   1a1b8:	d9f4      	bls.n	1a1a4 <mp_execute_bytecode+0xadc>
                    nlr_pop();
   1a1ba:	f7e6 f86d 	bl	298 <nlr_pop>
                    assert(exc_sp == exc_stack - 1);
   1a1be:	9b06      	ldr	r3, [sp, #24]
                    code_state->sp = sp;
   1a1c0:	f8c8 6008 	str.w	r6, [r8, #8]
                    assert(exc_sp == exc_stack - 1);
   1a1c4:	3f0c      	subs	r7, #12
   1a1c6:	42bb      	cmp	r3, r7
   1a1c8:	f040 8154 	bne.w	1a474 <mp_execute_bytecode+0xdac>
                    return MP_VM_RETURN_NORMAL;
   1a1cc:	2000      	movs	r0, #0
}
   1a1ce:	b015      	add	sp, #84	; 0x54
   1a1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    sp -= 2;
   1a1d4:	f1a6 0308 	sub.w	r3, r6, #8
                    mp_obj_dict_store(sp[0], sp[2], sp[1]);
   1a1d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   1a1dc:	6831      	ldr	r1, [r6, #0]
   1a1de:	f856 0c08 	ldr.w	r0, [r6, #-8]
                switch (*ip++) {
   1a1e2:	4625      	mov	r5, r4
                    sp -= 2;
   1a1e4:	461e      	mov	r6, r3
                    mp_obj_dict_store(sp[0], sp[2], sp[1]);
   1a1e6:	f7f4 ffcb 	bl	f180 <mp_obj_dict_store>
                    DISPATCH();
   1a1ea:	f7ff bb36 	b.w	1985a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   1a1ee:	2000      	movs	r0, #0
                    DECODE_UINT;
   1a1f0:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a1f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a1f8:	0619      	lsls	r1, r3, #24
   1a1fa:	eb02 10c0 	add.w	r0, r2, r0, lsl #7
   1a1fe:	d4f7      	bmi.n	1a1f0 <mp_execute_bytecode+0xb28>
                    sp -= unum - 1;
   1a200:	0083      	lsls	r3, r0, #2
   1a202:	f1c3 0304 	rsb	r3, r3, #4
   1a206:	441e      	add	r6, r3
                    SET_TOP(mp_obj_new_list(unum, sp));
   1a208:	4631      	mov	r1, r6
   1a20a:	f7f7 fb49 	bl	118a0 <mp_obj_new_list>
                    DECODE_UINT;
   1a20e:	4625      	mov	r5, r4
                    SET_TOP(mp_obj_new_list(unum, sp));
   1a210:	6030      	str	r0, [r6, #0]
                    DISPATCH();
   1a212:	f7ff bb22 	b.w	1985a <mp_execute_bytecode+0x192>
                switch (*ip++) {
   1a216:	2500      	movs	r5, #0
                    DECODE_UINT;
   1a218:	f814 3b01 	ldrb.w	r3, [r4], #1
   1a21c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   1a220:	0619      	lsls	r1, r3, #24
   1a222:	eb02 15c5 	add.w	r5, r2, r5, lsl #7
   1a226:	d4f7      	bmi.n	1a218 <mp_execute_bytecode+0xb50>
                    mp_unpack_sequence(sp[0], unum, sp);
   1a228:	4632      	mov	r2, r6
   1a22a:	4629      	mov	r1, r5
   1a22c:	6830      	ldr	r0, [r6, #0]
   1a22e:	f7f2 f8a9 	bl	c384 <mp_unpack_sequence>
                    sp += unum - 1;
   1a232:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
   1a236:	3b01      	subs	r3, #1
                    DECODE_UINT;
   1a238:	4625      	mov	r5, r4
                    sp += unum - 1;
   1a23a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
                    DISPATCH();
   1a23e:	f7ff bb0c 	b.w	1985a <mp_execute_bytecode+0x192>
                    if (ip[-1] < MP_BC_LOAD_CONST_SMALL_INT_MULTI + 64) {
   1a242:	28af      	cmp	r0, #175	; 0xaf
   1a244:	d811      	bhi.n	1a26a <mp_execute_bytecode+0xba2>
                        PUSH(MP_OBJ_NEW_SMALL_INT((mp_int_t)ip[-1] - MP_BC_LOAD_CONST_SMALL_INT_MULTI - 16));
   1a246:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   1a24a:	005b      	lsls	r3, r3, #1
   1a24c:	f043 0301 	orr.w	r3, r3, #1
   1a250:	6073      	str	r3, [r6, #4]
                switch (*ip++) {
   1a252:	4625      	mov	r5, r4
                        PUSH(MP_OBJ_NEW_SMALL_INT((mp_int_t)ip[-1] - MP_BC_LOAD_CONST_SMALL_INT_MULTI - 16));
   1a254:	3604      	adds	r6, #4
                        DISPATCH();
   1a256:	f7ff bb00 	b.w	1985a <mp_execute_bytecode+0x192>
                    } else if (MP_OBJ_IS_SMALL_INT(TOP())) {
   1a25a:	07c3      	lsls	r3, r0, #31
   1a25c:	f140 80d8 	bpl.w	1a410 <mp_execute_bytecode+0xd48>
                        if (cause < 0) {
   1a260:	1042      	asrs	r2, r0, #1
   1a262:	f100 809e 	bmi.w	1a3a2 <mp_execute_bytecode+0xcda>
                            PUSH((mp_obj_t)cause);
   1a266:	6032      	str	r2, [r6, #0]
                            goto unwind_jump;
   1a268:	e69c      	b.n	19fa4 <mp_execute_bytecode+0x8dc>
                    } else if (ip[-1] < MP_BC_LOAD_FAST_MULTI + 16) {
   1a26a:	28bf      	cmp	r0, #191	; 0xbf
   1a26c:	d974      	bls.n	1a358 <mp_execute_bytecode+0xc90>
                    } else if (ip[-1] < MP_BC_STORE_FAST_MULTI + 16) {
   1a26e:	28cf      	cmp	r0, #207	; 0xcf
   1a270:	f63f aae2 	bhi.w	19838 <mp_execute_bytecode+0x170>
                        fastn[MP_BC_STORE_FAST_MULTI - (mp_int_t)ip[-1]] = POP();
   1a274:	f1c0 00c0 	rsb	r0, r0, #192	; 0xc0
   1a278:	6833      	ldr	r3, [r6, #0]
   1a27a:	f84a 3020 	str.w	r3, [sl, r0, lsl #2]
                switch (*ip++) {
   1a27e:	4625      	mov	r5, r4
                        fastn[MP_BC_STORE_FAST_MULTI - (mp_int_t)ip[-1]] = POP();
   1a280:	3e04      	subs	r6, #4
                        DISPATCH();
   1a282:	f7ff baea 	b.w	1985a <mp_execute_bytecode+0x192>
                        mp_obj_dict_store(obj, sp[0], sp[-1]);
   1a286:	f856 2c04 	ldr.w	r2, [r6, #-4]
   1a28a:	f856 1908 	ldr.w	r1, [r6], #-8
                    DECODE_UINT;
   1a28e:	4625      	mov	r5, r4
                        mp_obj_dict_store(obj, sp[0], sp[-1]);
   1a290:	f7f4 ff76 	bl	f180 <mp_obj_dict_store>
   1a294:	f7ff bae1 	b.w	1985a <mp_execute_bytecode+0x192>
                        mp_obj_t data = sp[-1];
   1a298:	f856 3c04 	ldr.w	r3, [r6, #-4]
                        sp[0] = mp_const_none;
   1a29c:	6035      	str	r5, [r6, #0]
                        sp[1] = mp_const_none;
   1a29e:	6075      	str	r5, [r6, #4]
                        sp[-1] = mp_const_none;
   1a2a0:	f846 5c04 	str.w	r5, [r6, #-4]
                        mp_call_method_n_kw(3, 0, sp - 3);
   1a2a4:	f1a6 020c 	sub.w	r2, r6, #12
   1a2a8:	2100      	movs	r1, #0
   1a2aa:	2003      	movs	r0, #3
                        mp_obj_t data = sp[-1];
   1a2ac:	9301      	str	r3, [sp, #4]
                        mp_call_method_n_kw(3, 0, sp - 3);
   1a2ae:	f7f1 fdf5 	bl	be9c <mp_call_method_n_kw>
                        sp[-3] = data;
   1a2b2:	9b01      	ldr	r3, [sp, #4]
   1a2b4:	f846 3c0c 	str.w	r3, [r6, #-12]
                switch (*ip++) {
   1a2b8:	4625      	mov	r5, r4
                        sp[-2] = cause;
   1a2ba:	f846 9d08 	str.w	r9, [r6, #-8]!
   1a2be:	f7ff bacc 	b.w	1985a <mp_execute_bytecode+0x192>
                            ip = exc_sp->handler; // get exception handler byte code address
   1a2c2:	9906      	ldr	r1, [sp, #24]
                            exc_sp--; // pop exception handler
   1a2c4:	9b06      	ldr	r3, [sp, #24]
                            PUSH(MP_OBJ_NEW_SMALL_INT(unum));
   1a2c6:	0052      	lsls	r2, r2, #1
   1a2c8:	f042 0201 	orr.w	r2, r2, #1
   1a2cc:	6032      	str	r2, [r6, #0]
                            exc_sp--; // pop exception handler
   1a2ce:	3b0c      	subs	r3, #12
                            ip = exc_sp->handler; // get exception handler byte code address
   1a2d0:	680d      	ldr	r5, [r1, #0]
                            exc_sp--; // pop exception handler
   1a2d2:	9306      	str	r3, [sp, #24]
                            goto dispatch_loop; // run the exception handler
   1a2d4:	f7ff bac1 	b.w	1985a <mp_execute_bytecode+0x192>
   1a2d8:	f8b3 1001 	ldrh.w	r1, [r3, #1]
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1a2dc:	f8d8 2008 	ldr.w	r2, [r8, #8]
                        DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   1a2e0:	3303      	adds	r3, #3
                        code_state->ip = ip + ulab; // jump to after for-block
   1a2e2:	440b      	add	r3, r1
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1a2e4:	3a10      	subs	r2, #16
                        code_state->ip = ip + ulab; // jump to after for-block
   1a2e6:	f8c8 3004 	str.w	r3, [r8, #4]
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1a2ea:	f8c8 2008 	str.w	r2, [r8, #8]
                        goto outer_dispatch_loop; // continue with dispatch loop
   1a2ee:	f7ff ba09 	b.w	19704 <mp_execute_bytecode+0x3c>
   1a2f2:	bf00      	nop
   1a2f4:	00022b90 	.word	0x00022b90
   1a2f8:	00022b08 	.word	0x00022b08
   1a2fc:	00022b6c 	.word	0x00022b6c
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   1a300:	9b06      	ldr	r3, [sp, #24]
                            ip = exc_sp->handler;
   1a302:	9906      	ldr	r1, [sp, #24]
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   1a304:	685b      	ldr	r3, [r3, #4]
                            exc_sp--;
   1a306:	9a06      	ldr	r2, [sp, #24]
                            finally_sp[1] = sp[0];
   1a308:	6830      	ldr	r0, [r6, #0]
                            mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   1a30a:	f023 0603 	bic.w	r6, r3, #3
                            exc_sp--;
   1a30e:	f1a2 030c 	sub.w	r3, r2, #12
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   1a312:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
                            finally_sp[1] = sp[0];
   1a316:	6070      	str	r0, [r6, #4]
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   1a318:	60b2      	str	r2, [r6, #8]
                            ip = exc_sp->handler;
   1a31a:	680d      	ldr	r5, [r1, #0]
                            exc_sp--;
   1a31c:	9306      	str	r3, [sp, #24]
                            PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   1a31e:	3608      	adds	r6, #8
                            goto dispatch_loop;
   1a320:	f7ff ba9b 	b.w	1985a <mp_execute_bytecode+0x192>
                        sp--;
   1a324:	3e04      	subs	r6, #4
                        obj = TOP();
   1a326:	6830      	ldr	r0, [r6, #0]
   1a328:	f7ff ba01 	b.w	1972e <mp_execute_bytecode+0x66>
                        assert(ret_kind == MP_VM_RETURN_EXCEPTION);
   1a32c:	2802      	cmp	r0, #2
   1a32e:	f040 809a 	bne.w	1a466 <mp_execute_bytecode+0xd9e>
                        if (EXC_MATCH(ret_value, MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   1a332:	4962      	ldr	r1, [pc, #392]	; (1a4bc <mp_execute_bytecode+0xdf4>)
   1a334:	9807      	ldr	r0, [sp, #28]
   1a336:	f7f5 fa2d 	bl	f794 <mp_obj_exception_match>
   1a33a:	2800      	cmp	r0, #0
   1a33c:	d071      	beq.n	1a422 <mp_execute_bytecode+0xd5a>
                            PUSH(mp_obj_exception_get_value(ret_value));
   1a33e:	9807      	ldr	r0, [sp, #28]
   1a340:	f7f5 f85a 	bl	f3f8 <mp_obj_exception_get_value>
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   1a344:	9b01      	ldr	r3, [sp, #4]
                            PUSH(mp_obj_exception_get_value(ret_value));
   1a346:	f846 0c04 	str.w	r0, [r6, #-4]
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   1a34a:	2b00      	cmp	r3, #0
   1a34c:	f47f ab2a 	bne.w	199a4 <mp_execute_bytecode+0x2dc>
   1a350:	f7ff bb2f 	b.w	199b2 <mp_execute_bytecode+0x2ea>
                        sp -= MP_OBJ_ITER_BUF_NSLOTS;
   1a354:	3e18      	subs	r6, #24
   1a356:	e5c1      	b.n	19edc <mp_execute_bytecode+0x814>
                        obj_shared = fastn[MP_BC_LOAD_FAST_MULTI - (mp_int_t)ip[-1]];
   1a358:	f1c0 00b0 	rsb	r0, r0, #176	; 0xb0
                switch (*ip++) {
   1a35c:	4625      	mov	r5, r4
                        obj_shared = fastn[MP_BC_LOAD_FAST_MULTI - (mp_int_t)ip[-1]];
   1a35e:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
                        goto load_check;
   1a362:	e492      	b.n	19c8a <mp_execute_bytecode+0x5c2>
                            sp[0] = sp[3];
   1a364:	6873      	ldr	r3, [r6, #4]
   1a366:	f846 3c08 	str.w	r3, [r6, #-8]
                switch (*ip++) {
   1a36a:	4625      	mov	r5, r4
                        sp -= 2;
   1a36c:	464e      	mov	r6, r9
   1a36e:	f7ff ba74 	b.w	1985a <mp_execute_bytecode+0x192>
                        obj = sp[-MP_OBJ_ITER_BUF_NSLOTS + 2];
   1a372:	f856 0c08 	ldr.w	r0, [r6, #-8]
   1a376:	e5db      	b.n	19f30 <mp_execute_bytecode+0x868>
                        ret_kind = mp_resume(TOP(), send_value, MP_OBJ_NULL, &ret_value);
   1a378:	ab07      	add	r3, sp, #28
   1a37a:	f856 0c04 	ldr.w	r0, [r6, #-4]
                    mp_obj_t t_exc = MP_OBJ_NULL;
   1a37e:	9201      	str	r2, [sp, #4]
                        ret_kind = mp_resume(TOP(), send_value, MP_OBJ_NULL, &ret_value);
   1a380:	f7f2 fbaa 	bl	cad8 <mp_resume>
   1a384:	f7ff bb00 	b.w	19988 <mp_execute_bytecode+0x2c0>
                        *code_state->sp = mp_obj_exception_get_value(MP_OBJ_FROM_PTR(nlr.ret_val));
   1a388:	9809      	ldr	r0, [sp, #36]	; 0x24
   1a38a:	f8d8 4008 	ldr.w	r4, [r8, #8]
   1a38e:	f7f5 f833 	bl	f3f8 <mp_obj_exception_get_value>
   1a392:	6020      	str	r0, [r4, #0]
                        code_state->ip++; // yield from is over, move to next instruction
   1a394:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1a398:	3301      	adds	r3, #1
   1a39a:	f8c8 3004 	str.w	r3, [r8, #4]
                        goto outer_dispatch_loop; // continue with dispatch loop
   1a39e:	f7ff b9b1 	b.w	19704 <mp_execute_bytecode+0x3c>
                        mp_int_t cause = MP_OBJ_SMALL_INT_VALUE(POP());
   1a3a2:	3e04      	subs	r6, #4
   1a3a4:	e706      	b.n	1a1b4 <mp_execute_bytecode+0xaec>
                fastn[0] = MP_OBJ_FROM_PTR(nlr.ret_val); // must put exception here because sp is invalid
   1a3a6:	9b02      	ldr	r3, [sp, #8]
   1a3a8:	eb08 0883 	add.w	r8, r8, r3, lsl #2
   1a3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a3ae:	f8c8 3014 	str.w	r3, [r8, #20]
                return MP_VM_RETURN_EXCEPTION;
   1a3b2:	2002      	movs	r0, #2
   1a3b4:	f7ff bacf 	b.w	19956 <mp_execute_bytecode+0x28e>
                            mp_obj_t obj = mp_obj_new_exception_msg(&mp_type_NameError, "local variable referenced before assignment");
   1a3b8:	4941      	ldr	r1, [pc, #260]	; (1a4c0 <mp_execute_bytecode+0xdf8>)
   1a3ba:	4842      	ldr	r0, [pc, #264]	; (1a4c4 <mp_execute_bytecode+0xdfc>)
   1a3bc:	e4d3      	b.n	19d66 <mp_execute_bytecode+0x69e>
                            GENERATOR_EXIT_IF_NEEDED(t_exc);
   1a3be:	f7e5 ff6b 	bl	298 <nlr_pop>
   1a3c2:	9b01      	ldr	r3, [sp, #4]
   1a3c4:	9309      	str	r3, [sp, #36]	; 0x24
   1a3c6:	4618      	mov	r0, r3
   1a3c8:	f7ff b9b8 	b.w	1973c <mp_execute_bytecode+0x74>
                        sp -= 2;
   1a3cc:	f1a6 0308 	sub.w	r3, r6, #8
                        sp[1] = mp_const_none;
   1a3d0:	f8c6 9004 	str.w	r9, [r6, #4]
                        sp[2] = mp_const_none;
   1a3d4:	f8c6 9008 	str.w	r9, [r6, #8]
                        mp_call_method_n_kw(3, 0, sp);
   1a3d8:	461a      	mov	r2, r3
   1a3da:	2100      	movs	r1, #0
   1a3dc:	2003      	movs	r0, #3
   1a3de:	9301      	str	r3, [sp, #4]
   1a3e0:	f7f1 fd5c 	bl	be9c <mp_call_method_n_kw>
                        sp -= 2;
   1a3e4:	9b01      	ldr	r3, [sp, #4]
                        SET_TOP(mp_const_none);
   1a3e6:	f846 9c08 	str.w	r9, [r6, #-8]
                switch (*ip++) {
   1a3ea:	4625      	mov	r5, r4
                        sp -= 2;
   1a3ec:	461e      	mov	r6, r3
   1a3ee:	f7ff ba34 	b.w	1985a <mp_execute_bytecode+0x192>
                assert(exc_sp >= exc_stack);
   1a3f2:	4b35      	ldr	r3, [pc, #212]	; (1a4c8 <mp_execute_bytecode+0xe00>)
   1a3f4:	4a35      	ldr	r2, [pc, #212]	; (1a4cc <mp_execute_bytecode+0xe04>)
   1a3f6:	4836      	ldr	r0, [pc, #216]	; (1a4d0 <mp_execute_bytecode+0xe08>)
   1a3f8:	f240 519a 	movw	r1, #1434	; 0x59a
   1a3fc:	f000 ffb6 	bl	1b36c <__assert_func>
                        SET_TOP(mp_unary_op(ip[-1] - MP_BC_UNARY_OP_MULTI, TOP()));
   1a400:	38d0      	subs	r0, #208	; 0xd0
   1a402:	6831      	ldr	r1, [r6, #0]
   1a404:	f7f1 f9ae 	bl	b764 <mp_unary_op>
                switch (*ip++) {
   1a408:	4625      	mov	r5, r4
                        SET_TOP(mp_unary_op(ip[-1] - MP_BC_UNARY_OP_MULTI, TOP()));
   1a40a:	6030      	str	r0, [r6, #0]
                        DISPATCH();
   1a40c:	f7ff ba25 	b.w	1985a <mp_execute_bytecode+0x192>
                        assert(mp_obj_is_exception_instance(TOP()));
   1a410:	f7f5 f9b0 	bl	f774 <mp_obj_is_exception_instance>
   1a414:	b190      	cbz	r0, 1a43c <mp_execute_bytecode+0xd74>
                        RAISE(TOP());
   1a416:	f7e5 ff3f 	bl	298 <nlr_pop>
   1a41a:	6830      	ldr	r0, [r6, #0]
   1a41c:	9009      	str	r0, [sp, #36]	; 0x24
   1a41e:	f7ff b98d 	b.w	1973c <mp_execute_bytecode+0x74>
                            RAISE(ret_value);
   1a422:	f7e5 ff39 	bl	298 <nlr_pop>
   1a426:	9807      	ldr	r0, [sp, #28]
   1a428:	9009      	str	r0, [sp, #36]	; 0x24
   1a42a:	f7ff b987 	b.w	1973c <mp_execute_bytecode+0x74>
                        assert(exc_sp >= exc_stack);
   1a42e:	4b26      	ldr	r3, [pc, #152]	; (1a4c8 <mp_execute_bytecode+0xe00>)
   1a430:	4a26      	ldr	r2, [pc, #152]	; (1a4cc <mp_execute_bytecode+0xe04>)
   1a432:	4827      	ldr	r0, [pc, #156]	; (1a4d0 <mp_execute_bytecode+0xe08>)
   1a434:	f44f 7124 	mov.w	r1, #656	; 0x290
   1a438:	f000 ff98 	bl	1b36c <__assert_func>
                        assert(mp_obj_is_exception_instance(TOP()));
   1a43c:	4b25      	ldr	r3, [pc, #148]	; (1a4d4 <mp_execute_bytecode+0xe0c>)
   1a43e:	4a23      	ldr	r2, [pc, #140]	; (1a4cc <mp_execute_bytecode+0xe04>)
   1a440:	4823      	ldr	r0, [pc, #140]	; (1a4d0 <mp_execute_bytecode+0xe08>)
   1a442:	f44f 7133 	mov.w	r1, #716	; 0x2cc
   1a446:	f000 ff91 	bl	1b36c <__assert_func>
                        assert(mp_obj_is_exception_instance(TOP()));
   1a44a:	4b22      	ldr	r3, [pc, #136]	; (1a4d4 <mp_execute_bytecode+0xe0c>)
   1a44c:	4a1f      	ldr	r2, [pc, #124]	; (1a4cc <mp_execute_bytecode+0xe04>)
   1a44e:	4820      	ldr	r0, [pc, #128]	; (1a4d0 <mp_execute_bytecode+0xe08>)
   1a450:	f240 216e 	movw	r1, #622	; 0x26e
   1a454:	f000 ff8a 	bl	1b36c <__assert_func>
                    assert(exc_sp >= exc_stack);
   1a458:	4b1b      	ldr	r3, [pc, #108]	; (1a4c8 <mp_execute_bytecode+0xe00>)
   1a45a:	4a1c      	ldr	r2, [pc, #112]	; (1a4cc <mp_execute_bytecode+0xe04>)
   1a45c:	481c      	ldr	r0, [pc, #112]	; (1a4d0 <mp_execute_bytecode+0xe08>)
   1a45e:	f240 21ff 	movw	r1, #767	; 0x2ff
   1a462:	f000 ff83 	bl	1b36c <__assert_func>
                        assert(ret_kind == MP_VM_RETURN_EXCEPTION);
   1a466:	4b1c      	ldr	r3, [pc, #112]	; (1a4d8 <mp_execute_bytecode+0xe10>)
   1a468:	4a18      	ldr	r2, [pc, #96]	; (1a4cc <mp_execute_bytecode+0xe04>)
   1a46a:	4819      	ldr	r0, [pc, #100]	; (1a4d0 <mp_execute_bytecode+0xe08>)
   1a46c:	f240 41ae 	movw	r1, #1198	; 0x4ae
   1a470:	f000 ff7c 	bl	1b36c <__assert_func>
                    assert(exc_sp == exc_stack - 1);
   1a474:	4b19      	ldr	r3, [pc, #100]	; (1a4dc <mp_execute_bytecode+0xe14>)
   1a476:	4a15      	ldr	r2, [pc, #84]	; (1a4cc <mp_execute_bytecode+0xe04>)
   1a478:	4815      	ldr	r0, [pc, #84]	; (1a4d0 <mp_execute_bytecode+0xe08>)
   1a47a:	f240 414e 	movw	r1, #1102	; 0x44e
   1a47e:	f000 ff75 	bl	1b36c <__assert_func>
                            assert(exc_sp >= exc_stack);
   1a482:	4b11      	ldr	r3, [pc, #68]	; (1a4c8 <mp_execute_bytecode+0xe00>)
   1a484:	4a11      	ldr	r2, [pc, #68]	; (1a4cc <mp_execute_bytecode+0xe04>)
   1a486:	4812      	ldr	r0, [pc, #72]	; (1a4d0 <mp_execute_bytecode+0xe08>)
   1a488:	f44f 711f 	mov.w	r1, #636	; 0x27c
   1a48c:	f000 ff6e 	bl	1b36c <__assert_func>
                    mp_obj_t obj = mp_obj_new_exception_msg(&mp_type_NotImplementedError, "byte code not implemented");
   1a490:	4913      	ldr	r1, [pc, #76]	; (1a4e0 <mp_execute_bytecode+0xe18>)
   1a492:	4814      	ldr	r0, [pc, #80]	; (1a4e4 <mp_execute_bytecode+0xe1c>)
   1a494:	f7f5 f848 	bl	f528 <mp_obj_new_exception_msg>
   1a498:	4604      	mov	r4, r0
                    nlr_pop();
   1a49a:	f7e5 fefd 	bl	298 <nlr_pop>
                    fastn[0] = obj;
   1a49e:	9b02      	ldr	r3, [sp, #8]
   1a4a0:	eb08 0883 	add.w	r8, r8, r3, lsl #2
                    return MP_VM_RETURN_EXCEPTION;
   1a4a4:	2002      	movs	r0, #2
                    fastn[0] = obj;
   1a4a6:	f8c8 4014 	str.w	r4, [r8, #20]
                    return MP_VM_RETURN_EXCEPTION;
   1a4aa:	f7ff ba54 	b.w	19956 <mp_execute_bytecode+0x28e>
                    assert(exc_sp >= exc_stack);
   1a4ae:	4b06      	ldr	r3, [pc, #24]	; (1a4c8 <mp_execute_bytecode+0xe00>)
   1a4b0:	4a06      	ldr	r2, [pc, #24]	; (1a4cc <mp_execute_bytecode+0xe04>)
   1a4b2:	4807      	ldr	r0, [pc, #28]	; (1a4d0 <mp_execute_bytecode+0xe08>)
   1a4b4:	f240 3105 	movw	r1, #773	; 0x305
   1a4b8:	f000 ff58 	bl	1b36c <__assert_func>
   1a4bc:	0002032c 	.word	0x0002032c
   1a4c0:	00022b1c 	.word	0x00022b1c
   1a4c4:	000205fc 	.word	0x000205fc
   1a4c8:	00022b7c 	.word	0x00022b7c
   1a4cc:	00022b08 	.word	0x00022b08
   1a4d0:	00022b6c 	.word	0x00022b6c
   1a4d4:	00022b48 	.word	0x00022b48
   1a4d8:	00022bc4 	.word	0x00022bc4
   1a4dc:	00022bac 	.word	0x00022bac
   1a4e0:	00022be8 	.word	0x00022be8
   1a4e4:	000206b0 	.word	0x000206b0

0001a4e8 <mp_decode_uint>:
#else // don't print debugging info
#define DEBUG_PRINT (0)
#define DEBUG_printf(...) (void)0
#endif

mp_uint_t mp_decode_uint(const byte **ptr) {
   1a4e8:	b480      	push	{r7}
   1a4ea:	b087      	sub	sp, #28
   1a4ec:	af00      	add	r7, sp, #0
   1a4ee:	6078      	str	r0, [r7, #4]
    mp_uint_t unum = 0;
   1a4f0:	2300      	movs	r3, #0
   1a4f2:	617b      	str	r3, [r7, #20]
    byte val;
    const byte *p = *ptr;
   1a4f4:	687b      	ldr	r3, [r7, #4]
   1a4f6:	681b      	ldr	r3, [r3, #0]
   1a4f8:	613b      	str	r3, [r7, #16]
    do {
        val = *p++;
   1a4fa:	693b      	ldr	r3, [r7, #16]
   1a4fc:	1c5a      	adds	r2, r3, #1
   1a4fe:	613a      	str	r2, [r7, #16]
   1a500:	781b      	ldrb	r3, [r3, #0]
   1a502:	73fb      	strb	r3, [r7, #15]
        unum = (unum << 7) | (val & 0x7f);
   1a504:	697b      	ldr	r3, [r7, #20]
   1a506:	01da      	lsls	r2, r3, #7
   1a508:	7bfb      	ldrb	r3, [r7, #15]
   1a50a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a50e:	4313      	orrs	r3, r2
   1a510:	617b      	str	r3, [r7, #20]
    } while ((val & 0x80) != 0);
   1a512:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1a516:	2b00      	cmp	r3, #0
   1a518:	dbef      	blt.n	1a4fa <mp_decode_uint+0x12>
    *ptr = p;
   1a51a:	687b      	ldr	r3, [r7, #4]
   1a51c:	693a      	ldr	r2, [r7, #16]
   1a51e:	601a      	str	r2, [r3, #0]
    return unum;
   1a520:	697b      	ldr	r3, [r7, #20]
}
   1a522:	4618      	mov	r0, r3
   1a524:	371c      	adds	r7, #28
   1a526:	46bd      	mov	sp, r7
   1a528:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a52c:	4770      	bx	lr
   1a52e:	bf00      	nop

0001a530 <mp_decode_uint_value>:
// the caller doesn't need to increase the ptr argument.  If ptr is a local variable
// and the caller uses mp_decode_uint(&ptr) instead of this function, then the compiler
// must allocate a slot on the stack for ptr, and this slot cannot be reused for
// anything else in the function because the pointer may have been stored in a global
// and reused later in the function.
mp_uint_t mp_decode_uint_value(const byte *ptr) {
   1a530:	b580      	push	{r7, lr}
   1a532:	b082      	sub	sp, #8
   1a534:	af00      	add	r7, sp, #0
   1a536:	6078      	str	r0, [r7, #4]
    return mp_decode_uint(&ptr);
   1a538:	1d3b      	adds	r3, r7, #4
   1a53a:	4618      	mov	r0, r3
   1a53c:	f7ff ffd4 	bl	1a4e8 <mp_decode_uint>
   1a540:	4603      	mov	r3, r0
}
   1a542:	4618      	mov	r0, r3
   1a544:	3708      	adds	r7, #8
   1a546:	46bd      	mov	sp, r7
   1a548:	bd80      	pop	{r7, pc}
   1a54a:	bf00      	nop

0001a54c <mp_decode_uint_skip>:

// This function is used to help reduce stack usage at the caller, for the case when
// the caller doesn't need the actual value and just wants to skip over it.
const byte *mp_decode_uint_skip(const byte *ptr) {
   1a54c:	b480      	push	{r7}
   1a54e:	b083      	sub	sp, #12
   1a550:	af00      	add	r7, sp, #0
   1a552:	6078      	str	r0, [r7, #4]
    while ((*ptr++) & 0x80) {
   1a554:	bf00      	nop
   1a556:	687b      	ldr	r3, [r7, #4]
   1a558:	1c5a      	adds	r2, r3, #1
   1a55a:	607a      	str	r2, [r7, #4]
   1a55c:	781b      	ldrb	r3, [r3, #0]
   1a55e:	b25b      	sxtb	r3, r3
   1a560:	2b00      	cmp	r3, #0
   1a562:	dbf8      	blt.n	1a556 <mp_decode_uint_skip+0xa>
    }
    return ptr;
   1a564:	687b      	ldr	r3, [r7, #4]
}
   1a566:	4618      	mov	r0, r3
   1a568:	370c      	adds	r7, #12
   1a56a:	46bd      	mov	sp, r7
   1a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a570:	4770      	bx	lr
   1a572:	bf00      	nop

0001a574 <fun_pos_args_mismatch>:

STATIC NORETURN void fun_pos_args_mismatch(mp_obj_fun_bc_t *f, size_t expected, size_t given) {
   1a574:	b580      	push	{r7, lr}
   1a576:	b084      	sub	sp, #16
   1a578:	af00      	add	r7, sp, #0
   1a57a:	60f8      	str	r0, [r7, #12]
   1a57c:	60b9      	str	r1, [r7, #8]
   1a57e:	607a      	str	r2, [r7, #4]
#if MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE
    // generic message, used also for other argument issues
    (void)f;
    (void)expected;
    (void)given;
    mp_arg_error_terse_mismatch();
   1a580:	f7f2 fe4e 	bl	d220 <mp_arg_error_terse_mismatch>

0001a584 <mp_setup_code_state>:
// On entry code_state should be allocated somewhere (stack/heap) and
// contain the following valid entries:
//    - code_state->fun_bc should contain a pointer to the function object
//    - code_state->ip should contain the offset in bytes from the pointer
//      code_state->fun_bc->bytecode to the entry n_state (0 for bytecode, non-zero for native)
void mp_setup_code_state(mp_code_state_t *code_state, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   1a584:	b590      	push	{r4, r7, lr}
   1a586:	b09b      	sub	sp, #108	; 0x6c
   1a588:	af00      	add	r7, sp, #0
   1a58a:	60f8      	str	r0, [r7, #12]
   1a58c:	60b9      	str	r1, [r7, #8]
   1a58e:	607a      	str	r2, [r7, #4]
   1a590:	603b      	str	r3, [r7, #0]
    // This function is pretty complicated.  It's main aim is to be efficient in speed and RAM
    // usage for the common case of positional only args.

    // get the function object that we want to set up (could be bytecode or native code)
    mp_obj_fun_bc_t *self = code_state->fun_bc;
   1a592:	68fb      	ldr	r3, [r7, #12]
   1a594:	681b      	ldr	r3, [r3, #0]
   1a596:	637b      	str	r3, [r7, #52]	; 0x34

    // ip comes in as an offset into bytecode, so turn it into a true pointer
    code_state->ip = self->bytecode + (size_t)code_state->ip;
   1a598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a59a:	689b      	ldr	r3, [r3, #8]
   1a59c:	68fa      	ldr	r2, [r7, #12]
   1a59e:	6852      	ldr	r2, [r2, #4]
   1a5a0:	441a      	add	r2, r3
   1a5a2:	68fb      	ldr	r3, [r7, #12]
   1a5a4:	605a      	str	r2, [r3, #4]
    #if MICROPY_STACKLESS
    code_state->prev = NULL;
    #endif

    // get params
    size_t n_state = mp_decode_uint(&code_state->ip);
   1a5a6:	68fb      	ldr	r3, [r7, #12]
   1a5a8:	3304      	adds	r3, #4
   1a5aa:	4618      	mov	r0, r3
   1a5ac:	f7ff ff9c 	bl	1a4e8 <mp_decode_uint>
   1a5b0:	6338      	str	r0, [r7, #48]	; 0x30
    code_state->ip = mp_decode_uint_skip(code_state->ip); // skip n_exc_stack
   1a5b2:	68fb      	ldr	r3, [r7, #12]
   1a5b4:	685b      	ldr	r3, [r3, #4]
   1a5b6:	4618      	mov	r0, r3
   1a5b8:	f7ff ffc8 	bl	1a54c <mp_decode_uint_skip>
   1a5bc:	4602      	mov	r2, r0
   1a5be:	68fb      	ldr	r3, [r7, #12]
   1a5c0:	605a      	str	r2, [r3, #4]
    size_t scope_flags = *code_state->ip++;
   1a5c2:	68fb      	ldr	r3, [r7, #12]
   1a5c4:	685b      	ldr	r3, [r3, #4]
   1a5c6:	1c59      	adds	r1, r3, #1
   1a5c8:	68fa      	ldr	r2, [r7, #12]
   1a5ca:	6051      	str	r1, [r2, #4]
   1a5cc:	781b      	ldrb	r3, [r3, #0]
   1a5ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t n_pos_args = *code_state->ip++;
   1a5d0:	68fb      	ldr	r3, [r7, #12]
   1a5d2:	685b      	ldr	r3, [r3, #4]
   1a5d4:	1c59      	adds	r1, r3, #1
   1a5d6:	68fa      	ldr	r2, [r7, #12]
   1a5d8:	6051      	str	r1, [r2, #4]
   1a5da:	781b      	ldrb	r3, [r3, #0]
   1a5dc:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t n_kwonly_args = *code_state->ip++;
   1a5de:	68fb      	ldr	r3, [r7, #12]
   1a5e0:	685b      	ldr	r3, [r3, #4]
   1a5e2:	1c59      	adds	r1, r3, #1
   1a5e4:	68fa      	ldr	r2, [r7, #12]
   1a5e6:	6051      	str	r1, [r2, #4]
   1a5e8:	781b      	ldrb	r3, [r3, #0]
   1a5ea:	627b      	str	r3, [r7, #36]	; 0x24
    size_t n_def_pos_args = *code_state->ip++;
   1a5ec:	68fb      	ldr	r3, [r7, #12]
   1a5ee:	685b      	ldr	r3, [r3, #4]
   1a5f0:	1c59      	adds	r1, r3, #1
   1a5f2:	68fa      	ldr	r2, [r7, #12]
   1a5f4:	6051      	str	r1, [r2, #4]
   1a5f6:	781b      	ldrb	r3, [r3, #0]
   1a5f8:	623b      	str	r3, [r7, #32]

    code_state->sp = &code_state->state[0] - 1;
   1a5fa:	68fb      	ldr	r3, [r7, #12]
   1a5fc:	3314      	adds	r3, #20
   1a5fe:	1f1a      	subs	r2, r3, #4
   1a600:	68fb      	ldr	r3, [r7, #12]
   1a602:	609a      	str	r2, [r3, #8]
    code_state->exc_sp = (mp_exc_stack_t*)(code_state->state + n_state) - 1;
   1a604:	68fb      	ldr	r3, [r7, #12]
   1a606:	f103 0214 	add.w	r2, r3, #20
   1a60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a60c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a610:	3b03      	subs	r3, #3
   1a612:	009b      	lsls	r3, r3, #2
   1a614:	441a      	add	r2, r3
   1a616:	68fb      	ldr	r3, [r7, #12]
   1a618:	60da      	str	r2, [r3, #12]

    // zero out the local stack to begin with
    memset(code_state->state, 0, n_state * sizeof(*code_state->state));
   1a61a:	68fb      	ldr	r3, [r7, #12]
   1a61c:	f103 0014 	add.w	r0, r3, #20
   1a620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a622:	009b      	lsls	r3, r3, #2
   1a624:	461a      	mov	r2, r3
   1a626:	2100      	movs	r1, #0
   1a628:	f001 fce8 	bl	1bffc <memset>

    const mp_obj_t *kwargs = args + n_args;
   1a62c:	68bb      	ldr	r3, [r7, #8]
   1a62e:	009b      	lsls	r3, r3, #2
   1a630:	683a      	ldr	r2, [r7, #0]
   1a632:	4413      	add	r3, r2
   1a634:	61fb      	str	r3, [r7, #28]

    // var_pos_kw_args points to the stack where the var-args tuple, and var-kw dict, should go (if they are needed)
    mp_obj_t *var_pos_kw_args = &code_state->state[n_state - 1 - n_pos_args - n_kwonly_args];
   1a636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a638:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a63a:	1ad2      	subs	r2, r2, r3
   1a63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a63e:	1ad3      	subs	r3, r2, r3
   1a640:	3b01      	subs	r3, #1
   1a642:	3304      	adds	r3, #4
   1a644:	009b      	lsls	r3, r3, #2
   1a646:	68fa      	ldr	r2, [r7, #12]
   1a648:	4413      	add	r3, r2
   1a64a:	3304      	adds	r3, #4
   1a64c:	667b      	str	r3, [r7, #100]	; 0x64

    // check positional arguments

    if (n_args > n_pos_args) {
   1a64e:	68ba      	ldr	r2, [r7, #8]
   1a650:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a652:	429a      	cmp	r2, r3
   1a654:	d91b      	bls.n	1a68e <mp_setup_code_state+0x10a>
        // given more than enough arguments
        if ((scope_flags & MP_SCOPE_FLAG_VARARGS) == 0) {
   1a656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a658:	f003 0301 	and.w	r3, r3, #1
   1a65c:	2b00      	cmp	r3, #0
   1a65e:	d104      	bne.n	1a66a <mp_setup_code_state+0xe6>
            fun_pos_args_mismatch(self, n_pos_args, n_args);
   1a660:	68ba      	ldr	r2, [r7, #8]
   1a662:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1a664:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1a666:	f7ff ff85 	bl	1a574 <fun_pos_args_mismatch>
        }
        // put extra arguments in varargs tuple
        *var_pos_kw_args-- = mp_obj_new_tuple(n_args - n_pos_args, args + n_pos_args);
   1a66a:	6e7c      	ldr	r4, [r7, #100]	; 0x64
   1a66c:	1f23      	subs	r3, r4, #4
   1a66e:	667b      	str	r3, [r7, #100]	; 0x64
   1a670:	68ba      	ldr	r2, [r7, #8]
   1a672:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a674:	1ad0      	subs	r0, r2, r3
   1a676:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a678:	009b      	lsls	r3, r3, #2
   1a67a:	683a      	ldr	r2, [r7, #0]
   1a67c:	4413      	add	r3, r2
   1a67e:	4619      	mov	r1, r3
   1a680:	f7fb fbb6 	bl	15df0 <mp_obj_new_tuple>
   1a684:	4603      	mov	r3, r0
   1a686:	6023      	str	r3, [r4, #0]
        n_args = n_pos_args;
   1a688:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a68a:	60bb      	str	r3, [r7, #8]
   1a68c:	e03c      	b.n	1a708 <mp_setup_code_state+0x184>
    } else {
        if ((scope_flags & MP_SCOPE_FLAG_VARARGS) != 0) {
   1a68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a690:	f003 0301 	and.w	r3, r3, #1
   1a694:	2b00      	cmp	r3, #0
   1a696:	d004      	beq.n	1a6a2 <mp_setup_code_state+0x11e>
            DEBUG_printf("passing empty tuple as *args\n");
            *var_pos_kw_args-- = mp_const_empty_tuple;
   1a698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1a69a:	1f1a      	subs	r2, r3, #4
   1a69c:	667a      	str	r2, [r7, #100]	; 0x64
   1a69e:	4aa6      	ldr	r2, [pc, #664]	; (1a938 <mp_setup_code_state+0x3b4>)
   1a6a0:	601a      	str	r2, [r3, #0]
        }
        // Apply processing and check below only if we don't have kwargs,
        // otherwise, kw handling code below has own extensive checks.
        if (n_kw == 0 && (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) == 0) {
   1a6a2:	687b      	ldr	r3, [r7, #4]
   1a6a4:	2b00      	cmp	r3, #0
   1a6a6:	d12f      	bne.n	1a708 <mp_setup_code_state+0x184>
   1a6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a6aa:	f003 0308 	and.w	r3, r3, #8
   1a6ae:	2b00      	cmp	r3, #0
   1a6b0:	d12a      	bne.n	1a708 <mp_setup_code_state+0x184>
            if (n_args >= (size_t)(n_pos_args - n_def_pos_args)) {
   1a6b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a6b4:	6a3b      	ldr	r3, [r7, #32]
   1a6b6:	1ad2      	subs	r2, r2, r3
   1a6b8:	68bb      	ldr	r3, [r7, #8]
   1a6ba:	429a      	cmp	r2, r3
   1a6bc:	d81c      	bhi.n	1a6f8 <mp_setup_code_state+0x174>
                // given enough arguments, but may need to use some default arguments
                for (size_t i = n_args; i < n_pos_args; i++) {
   1a6be:	68bb      	ldr	r3, [r7, #8]
   1a6c0:	663b      	str	r3, [r7, #96]	; 0x60
   1a6c2:	e014      	b.n	1a6ee <mp_setup_code_state+0x16a>
                    code_state->state[n_state - 1 - i] = self->extra_args[i - (n_pos_args - n_def_pos_args)];
   1a6c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a6c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1a6c8:	1ad3      	subs	r3, r2, r3
   1a6ca:	3b01      	subs	r3, #1
   1a6cc:	6a39      	ldr	r1, [r7, #32]
   1a6ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a6d0:	1a89      	subs	r1, r1, r2
   1a6d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1a6d4:	4411      	add	r1, r2
   1a6d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a6d8:	3104      	adds	r1, #4
   1a6da:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   1a6de:	68f9      	ldr	r1, [r7, #12]
   1a6e0:	3304      	adds	r3, #4
   1a6e2:	009b      	lsls	r3, r3, #2
   1a6e4:	440b      	add	r3, r1
   1a6e6:	605a      	str	r2, [r3, #4]
                for (size_t i = n_args; i < n_pos_args; i++) {
   1a6e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1a6ea:	3301      	adds	r3, #1
   1a6ec:	663b      	str	r3, [r7, #96]	; 0x60
   1a6ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1a6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a6f2:	429a      	cmp	r2, r3
   1a6f4:	d3e6      	bcc.n	1a6c4 <mp_setup_code_state+0x140>
   1a6f6:	e007      	b.n	1a708 <mp_setup_code_state+0x184>
                }
            } else {
                fun_pos_args_mismatch(self, n_pos_args - n_def_pos_args, n_args);
   1a6f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a6fa:	6a3b      	ldr	r3, [r7, #32]
   1a6fc:	1ad3      	subs	r3, r2, r3
   1a6fe:	68ba      	ldr	r2, [r7, #8]
   1a700:	4619      	mov	r1, r3
   1a702:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1a704:	f7ff ff36 	bl	1a574 <fun_pos_args_mismatch>
            }
        }
    }

    // copy positional args into state
    for (size_t i = 0; i < n_args; i++) {
   1a708:	2300      	movs	r3, #0
   1a70a:	65fb      	str	r3, [r7, #92]	; 0x5c
   1a70c:	e010      	b.n	1a730 <mp_setup_code_state+0x1ac>
        code_state->state[n_state - 1 - i] = args[i];
   1a70e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1a712:	1ad3      	subs	r3, r2, r3
   1a714:	3b01      	subs	r3, #1
   1a716:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1a718:	0092      	lsls	r2, r2, #2
   1a71a:	6839      	ldr	r1, [r7, #0]
   1a71c:	440a      	add	r2, r1
   1a71e:	6812      	ldr	r2, [r2, #0]
   1a720:	68f9      	ldr	r1, [r7, #12]
   1a722:	3304      	adds	r3, #4
   1a724:	009b      	lsls	r3, r3, #2
   1a726:	440b      	add	r3, r1
   1a728:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < n_args; i++) {
   1a72a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1a72c:	3301      	adds	r3, #1
   1a72e:	65fb      	str	r3, [r7, #92]	; 0x5c
   1a730:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1a732:	68bb      	ldr	r3, [r7, #8]
   1a734:	429a      	cmp	r2, r3
   1a736:	d3ea      	bcc.n	1a70e <mp_setup_code_state+0x18a>
    }

    // check keyword arguments

    if (n_kw != 0 || (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   1a738:	687b      	ldr	r3, [r7, #4]
   1a73a:	2b00      	cmp	r3, #0
   1a73c:	d105      	bne.n	1a74a <mp_setup_code_state+0x1c6>
   1a73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a740:	f003 0308 	and.w	r3, r3, #8
   1a744:	2b00      	cmp	r3, #0
   1a746:	f000 811a 	beq.w	1a97e <mp_setup_code_state+0x3fa>
        DEBUG_printf("Initial args: ");
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);

        mp_obj_t dict = MP_OBJ_NULL;
   1a74a:	2300      	movs	r3, #0
   1a74c:	65bb      	str	r3, [r7, #88]	; 0x58
        if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
   1a74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a750:	f003 0302 	and.w	r3, r3, #2
   1a754:	2b00      	cmp	r3, #0
   1a756:	d006      	beq.n	1a766 <mp_setup_code_state+0x1e2>
            dict = mp_obj_new_dict(n_kw); // TODO: better go conservative with 0?
   1a758:	6878      	ldr	r0, [r7, #4]
   1a75a:	f7f4 fcef 	bl	f13c <mp_obj_new_dict>
   1a75e:	65b8      	str	r0, [r7, #88]	; 0x58
            *var_pos_kw_args = dict;
   1a760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1a762:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1a764:	601a      	str	r2, [r3, #0]
        }

        // get pointer to arg_names array
        const mp_obj_t *arg_names = (const mp_obj_t*)self->const_table;
   1a766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a768:	68db      	ldr	r3, [r3, #12]
   1a76a:	61bb      	str	r3, [r7, #24]

        for (size_t i = 0; i < n_kw; i++) {
   1a76c:	2300      	movs	r3, #0
   1a76e:	657b      	str	r3, [r7, #84]	; 0x54
   1a770:	e059      	b.n	1a826 <mp_setup_code_state+0x2a2>
            // the keys in kwargs are expected to be qstr objects
            mp_obj_t wanted_arg_name = kwargs[2 * i];
   1a772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a774:	00db      	lsls	r3, r3, #3
   1a776:	69fa      	ldr	r2, [r7, #28]
   1a778:	4413      	add	r3, r2
   1a77a:	681b      	ldr	r3, [r3, #0]
   1a77c:	617b      	str	r3, [r7, #20]
            for (size_t j = 0; j < n_pos_args + n_kwonly_args; j++) {
   1a77e:	2300      	movs	r3, #0
   1a780:	653b      	str	r3, [r7, #80]	; 0x50
   1a782:	e030      	b.n	1a7e6 <mp_setup_code_state+0x262>
                if (wanted_arg_name == arg_names[j]) {
   1a784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a786:	009b      	lsls	r3, r3, #2
   1a788:	69ba      	ldr	r2, [r7, #24]
   1a78a:	4413      	add	r3, r2
   1a78c:	681a      	ldr	r2, [r3, #0]
   1a78e:	697b      	ldr	r3, [r7, #20]
   1a790:	429a      	cmp	r2, r3
   1a792:	d125      	bne.n	1a7e0 <mp_setup_code_state+0x25c>
                    if (code_state->state[n_state - 1 - j] != MP_OBJ_NULL) {
   1a794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a798:	1ad3      	subs	r3, r2, r3
   1a79a:	3b01      	subs	r3, #1
   1a79c:	68fa      	ldr	r2, [r7, #12]
   1a79e:	3304      	adds	r3, #4
   1a7a0:	009b      	lsls	r3, r3, #2
   1a7a2:	4413      	add	r3, r2
   1a7a4:	685b      	ldr	r3, [r3, #4]
   1a7a6:	2b00      	cmp	r3, #0
   1a7a8:	d00a      	beq.n	1a7c0 <mp_setup_code_state+0x23c>
                        nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1a7aa:	697b      	ldr	r3, [r7, #20]
   1a7ac:	089b      	lsrs	r3, r3, #2
   1a7ae:	461a      	mov	r2, r3
   1a7b0:	4962      	ldr	r1, [pc, #392]	; (1a93c <mp_setup_code_state+0x3b8>)
   1a7b2:	4863      	ldr	r0, [pc, #396]	; (1a940 <mp_setup_code_state+0x3bc>)
   1a7b4:	f7f4 ff18 	bl	f5e8 <mp_obj_new_exception_msg_varg>
   1a7b8:	4603      	mov	r3, r0
   1a7ba:	4618      	mov	r0, r3
   1a7bc:	f7e5 fd90 	bl	2e0 <nlr_jump>
                            "function got multiple values for argument '%q'", MP_OBJ_QSTR_VALUE(wanted_arg_name)));
                    }
                    code_state->state[n_state - 1 - j] = kwargs[2 * i + 1];
   1a7c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a7c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a7c4:	1ad3      	subs	r3, r2, r3
   1a7c6:	3b01      	subs	r3, #1
   1a7c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1a7ca:	00d2      	lsls	r2, r2, #3
   1a7cc:	3204      	adds	r2, #4
   1a7ce:	69f9      	ldr	r1, [r7, #28]
   1a7d0:	440a      	add	r2, r1
   1a7d2:	6812      	ldr	r2, [r2, #0]
   1a7d4:	68f9      	ldr	r1, [r7, #12]
   1a7d6:	3304      	adds	r3, #4
   1a7d8:	009b      	lsls	r3, r3, #2
   1a7da:	440b      	add	r3, r1
   1a7dc:	605a      	str	r2, [r3, #4]
                    goto continue2;
   1a7de:	e01f      	b.n	1a820 <mp_setup_code_state+0x29c>
            for (size_t j = 0; j < n_pos_args + n_kwonly_args; j++) {
   1a7e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a7e2:	3301      	adds	r3, #1
   1a7e4:	653b      	str	r3, [r7, #80]	; 0x50
   1a7e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a7ea:	441a      	add	r2, r3
   1a7ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a7ee:	429a      	cmp	r2, r3
   1a7f0:	d8c8      	bhi.n	1a784 <mp_setup_code_state+0x200>
                }
            }
            // Didn't find name match with positional args
            if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) == 0) {
   1a7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a7f4:	f003 0302 	and.w	r3, r3, #2
   1a7f8:	2b00      	cmp	r3, #0
   1a7fa:	d102      	bne.n	1a802 <mp_setup_code_state+0x27e>
                if (MICROPY_ERROR_REPORTING == MICROPY_ERROR_REPORTING_TERSE) {
                    mp_raise_TypeError("unexpected keyword argument");
   1a7fc:	4851      	ldr	r0, [pc, #324]	; (1a944 <mp_setup_code_state+0x3c0>)
   1a7fe:	f7f2 fbef 	bl	cfe0 <mp_raise_TypeError>
                } else {
                    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
                        "unexpected keyword argument '%q'", MP_OBJ_QSTR_VALUE(wanted_arg_name)));
                }
            }
            mp_obj_dict_store(dict, kwargs[2 * i], kwargs[2 * i + 1]);
   1a802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a804:	00db      	lsls	r3, r3, #3
   1a806:	69fa      	ldr	r2, [r7, #28]
   1a808:	4413      	add	r3, r2
   1a80a:	6819      	ldr	r1, [r3, #0]
   1a80c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a80e:	00db      	lsls	r3, r3, #3
   1a810:	3304      	adds	r3, #4
   1a812:	69fa      	ldr	r2, [r7, #28]
   1a814:	4413      	add	r3, r2
   1a816:	681b      	ldr	r3, [r3, #0]
   1a818:	461a      	mov	r2, r3
   1a81a:	6db8      	ldr	r0, [r7, #88]	; 0x58
   1a81c:	f7f4 fcb0 	bl	f180 <mp_obj_dict_store>
        for (size_t i = 0; i < n_kw; i++) {
   1a820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a822:	3301      	adds	r3, #1
   1a824:	657b      	str	r3, [r7, #84]	; 0x54
   1a826:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1a828:	687b      	ldr	r3, [r7, #4]
   1a82a:	429a      	cmp	r2, r3
   1a82c:	d3a1      	bcc.n	1a772 <mp_setup_code_state+0x1ee>

        DEBUG_printf("Args with kws flattened: ");
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);

        // fill in defaults for positional args
        mp_obj_t *d = &code_state->state[n_state - n_pos_args];
   1a82e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a830:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a832:	1ad3      	subs	r3, r2, r3
   1a834:	3304      	adds	r3, #4
   1a836:	009b      	lsls	r3, r3, #2
   1a838:	68fa      	ldr	r2, [r7, #12]
   1a83a:	4413      	add	r3, r2
   1a83c:	3304      	adds	r3, #4
   1a83e:	64fb      	str	r3, [r7, #76]	; 0x4c
        mp_obj_t *s = &self->extra_args[n_def_pos_args - 1];
   1a840:	6a3b      	ldr	r3, [r7, #32]
   1a842:	3b01      	subs	r3, #1
   1a844:	3304      	adds	r3, #4
   1a846:	009b      	lsls	r3, r3, #2
   1a848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a84a:	4413      	add	r3, r2
   1a84c:	64bb      	str	r3, [r7, #72]	; 0x48
        for (size_t i = n_def_pos_args; i > 0; i--, d++, s--) {
   1a84e:	6a3b      	ldr	r3, [r7, #32]
   1a850:	647b      	str	r3, [r7, #68]	; 0x44
   1a852:	e010      	b.n	1a876 <mp_setup_code_state+0x2f2>
            if (*d == MP_OBJ_NULL) {
   1a854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a856:	681b      	ldr	r3, [r3, #0]
   1a858:	2b00      	cmp	r3, #0
   1a85a:	d103      	bne.n	1a864 <mp_setup_code_state+0x2e0>
                *d = *s;
   1a85c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a85e:	681a      	ldr	r2, [r3, #0]
   1a860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a862:	601a      	str	r2, [r3, #0]
        for (size_t i = n_def_pos_args; i > 0; i--, d++, s--) {
   1a864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a866:	3b01      	subs	r3, #1
   1a868:	647b      	str	r3, [r7, #68]	; 0x44
   1a86a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a86c:	3304      	adds	r3, #4
   1a86e:	64fb      	str	r3, [r7, #76]	; 0x4c
   1a870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a872:	3b04      	subs	r3, #4
   1a874:	64bb      	str	r3, [r7, #72]	; 0x48
   1a876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a878:	2b00      	cmp	r3, #0
   1a87a:	d1eb      	bne.n	1a854 <mp_setup_code_state+0x2d0>

        DEBUG_printf("Args after filling default positional: ");
        dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);

        // Check that all mandatory positional args are specified
        while (d < &code_state->state[n_state]) {
   1a87c:	e018      	b.n	1a8b0 <mp_setup_code_state+0x32c>
            if (*d++ == MP_OBJ_NULL) {
   1a87e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a880:	1d1a      	adds	r2, r3, #4
   1a882:	64fa      	str	r2, [r7, #76]	; 0x4c
   1a884:	681b      	ldr	r3, [r3, #0]
   1a886:	2b00      	cmp	r3, #0
   1a888:	d112      	bne.n	1a8b0 <mp_setup_code_state+0x32c>
                nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1a88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a88c:	3304      	adds	r3, #4
   1a88e:	009b      	lsls	r3, r3, #2
   1a890:	68fa      	ldr	r2, [r7, #12]
   1a892:	4413      	add	r3, r2
   1a894:	3304      	adds	r3, #4
   1a896:	461a      	mov	r2, r3
   1a898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a89a:	1ad3      	subs	r3, r2, r3
   1a89c:	109b      	asrs	r3, r3, #2
   1a89e:	461a      	mov	r2, r3
   1a8a0:	4929      	ldr	r1, [pc, #164]	; (1a948 <mp_setup_code_state+0x3c4>)
   1a8a2:	4827      	ldr	r0, [pc, #156]	; (1a940 <mp_setup_code_state+0x3bc>)
   1a8a4:	f7f4 fea0 	bl	f5e8 <mp_obj_new_exception_msg_varg>
   1a8a8:	4603      	mov	r3, r0
   1a8aa:	4618      	mov	r0, r3
   1a8ac:	f7e5 fd18 	bl	2e0 <nlr_jump>
        while (d < &code_state->state[n_state]) {
   1a8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a8b2:	3304      	adds	r3, #4
   1a8b4:	009b      	lsls	r3, r3, #2
   1a8b6:	68fa      	ldr	r2, [r7, #12]
   1a8b8:	4413      	add	r3, r2
   1a8ba:	1d1a      	adds	r2, r3, #4
   1a8bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a8be:	429a      	cmp	r2, r3
   1a8c0:	d8dd      	bhi.n	1a87e <mp_setup_code_state+0x2fa>
            }
        }

        // Check that all mandatory keyword args are specified
        // Fill in default kw args if we have them
        for (size_t i = 0; i < n_kwonly_args; i++) {
   1a8c2:	2300      	movs	r3, #0
   1a8c4:	643b      	str	r3, [r7, #64]	; 0x40
   1a8c6:	e055      	b.n	1a974 <mp_setup_code_state+0x3f0>
            if (code_state->state[n_state - 1 - n_pos_args - i] == MP_OBJ_NULL) {
   1a8c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a8cc:	1ad2      	subs	r2, r2, r3
   1a8ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a8d0:	1ad3      	subs	r3, r2, r3
   1a8d2:	3b01      	subs	r3, #1
   1a8d4:	68fa      	ldr	r2, [r7, #12]
   1a8d6:	3304      	adds	r3, #4
   1a8d8:	009b      	lsls	r3, r3, #2
   1a8da:	4413      	add	r3, r2
   1a8dc:	685b      	ldr	r3, [r3, #4]
   1a8de:	2b00      	cmp	r3, #0
   1a8e0:	d145      	bne.n	1a96e <mp_setup_code_state+0x3ea>
                mp_map_elem_t *elem = NULL;
   1a8e2:	2300      	movs	r3, #0
   1a8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
                if ((scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   1a8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a8e8:	f003 0308 	and.w	r3, r3, #8
   1a8ec:	2b00      	cmp	r3, #0
   1a8ee:	d011      	beq.n	1a914 <mp_setup_code_state+0x390>
                    elem = mp_map_lookup(&((mp_obj_dict_t*)MP_OBJ_TO_PTR(self->extra_args[n_def_pos_args]))->map, arg_names[n_pos_args + i], MP_MAP_LOOKUP);
   1a8f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a8f2:	6a3a      	ldr	r2, [r7, #32]
   1a8f4:	3204      	adds	r2, #4
   1a8f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1a8fa:	1d18      	adds	r0, r3, #4
   1a8fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a8fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a900:	4413      	add	r3, r2
   1a902:	009b      	lsls	r3, r3, #2
   1a904:	69ba      	ldr	r2, [r7, #24]
   1a906:	4413      	add	r3, r2
   1a908:	681b      	ldr	r3, [r3, #0]
   1a90a:	2200      	movs	r2, #0
   1a90c:	4619      	mov	r1, r3
   1a90e:	f7f2 fdd7 	bl	d4c0 <mp_map_lookup>
   1a912:	63f8      	str	r0, [r7, #60]	; 0x3c
                }
                if (elem != NULL) {
   1a914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a916:	2b00      	cmp	r3, #0
   1a918:	d018      	beq.n	1a94c <mp_setup_code_state+0x3c8>
                    code_state->state[n_state - 1 - n_pos_args - i] = elem->value;
   1a91a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a91e:	1ad2      	subs	r2, r2, r3
   1a920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a922:	1ad3      	subs	r3, r2, r3
   1a924:	3b01      	subs	r3, #1
   1a926:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1a928:	6852      	ldr	r2, [r2, #4]
   1a92a:	68f9      	ldr	r1, [r7, #12]
   1a92c:	3304      	adds	r3, #4
   1a92e:	009b      	lsls	r3, r3, #2
   1a930:	440b      	add	r3, r1
   1a932:	605a      	str	r2, [r3, #4]
   1a934:	e01b      	b.n	1a96e <mp_setup_code_state+0x3ea>
   1a936:	bf00      	nop
   1a938:	00021ea4 	.word	0x00021ea4
   1a93c:	00022c24 	.word	0x00022c24
   1a940:	00020764 	.word	0x00020764
   1a944:	00022c54 	.word	0x00022c54
   1a948:	00022c70 	.word	0x00022c70
                } else {
                    nlr_raise(mp_obj_new_exception_msg_varg(&mp_type_TypeError,
   1a94c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a94e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a950:	4413      	add	r3, r2
   1a952:	009b      	lsls	r3, r3, #2
   1a954:	69ba      	ldr	r2, [r7, #24]
   1a956:	4413      	add	r3, r2
   1a958:	681b      	ldr	r3, [r3, #0]
   1a95a:	089b      	lsrs	r3, r3, #2
   1a95c:	461a      	mov	r2, r3
   1a95e:	4928      	ldr	r1, [pc, #160]	; (1aa00 <mp_setup_code_state+0x47c>)
   1a960:	4828      	ldr	r0, [pc, #160]	; (1aa04 <mp_setup_code_state+0x480>)
   1a962:	f7f4 fe41 	bl	f5e8 <mp_obj_new_exception_msg_varg>
   1a966:	4603      	mov	r3, r0
   1a968:	4618      	mov	r0, r3
   1a96a:	f7e5 fcb9 	bl	2e0 <nlr_jump>
        for (size_t i = 0; i < n_kwonly_args; i++) {
   1a96e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a970:	3301      	adds	r3, #1
   1a972:	643b      	str	r3, [r7, #64]	; 0x40
   1a974:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a978:	429a      	cmp	r2, r3
   1a97a:	d3a5      	bcc.n	1a8c8 <mp_setup_code_state+0x344>
    if (n_kw != 0 || (scope_flags & MP_SCOPE_FLAG_DEFKWARGS) != 0) {
   1a97c:	e010      	b.n	1a9a0 <mp_setup_code_state+0x41c>
            }
        }

    } else {
        // no keyword arguments given
        if (n_kwonly_args != 0) {
   1a97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a980:	2b00      	cmp	r3, #0
   1a982:	d002      	beq.n	1a98a <mp_setup_code_state+0x406>
            mp_raise_TypeError("function missing keyword-only argument");
   1a984:	4820      	ldr	r0, [pc, #128]	; (1aa08 <mp_setup_code_state+0x484>)
   1a986:	f7f2 fb2b 	bl	cfe0 <mp_raise_TypeError>
        }
        if ((scope_flags & MP_SCOPE_FLAG_VARKEYWORDS) != 0) {
   1a98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a98c:	f003 0302 	and.w	r3, r3, #2
   1a990:	2b00      	cmp	r3, #0
   1a992:	d005      	beq.n	1a9a0 <mp_setup_code_state+0x41c>
            *var_pos_kw_args = mp_obj_new_dict(0);
   1a994:	2000      	movs	r0, #0
   1a996:	f7f4 fbd1 	bl	f13c <mp_obj_new_dict>
   1a99a:	4602      	mov	r2, r0
   1a99c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1a99e:	601a      	str	r2, [r3, #0]
        }
    }

    // get the ip and skip argument names
    const byte *ip = code_state->ip;
   1a9a0:	68fb      	ldr	r3, [r7, #12]
   1a9a2:	685b      	ldr	r3, [r3, #4]
   1a9a4:	63bb      	str	r3, [r7, #56]	; 0x38

    // jump over code info (source file and line-number mapping)
    ip += mp_decode_uint_value(ip);
   1a9a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1a9a8:	f7ff fdc2 	bl	1a530 <mp_decode_uint_value>
   1a9ac:	4602      	mov	r2, r0
   1a9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a9b0:	4413      	add	r3, r2
   1a9b2:	63bb      	str	r3, [r7, #56]	; 0x38

    // bytecode prelude: initialise closed over variables
    size_t local_num;
    while ((local_num = *ip++) != 255) {
   1a9b4:	e015      	b.n	1a9e2 <mp_setup_code_state+0x45e>
        code_state->state[n_state - 1 - local_num] =
   1a9b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a9b8:	693b      	ldr	r3, [r7, #16]
   1a9ba:	1ad3      	subs	r3, r2, r3
   1a9bc:	1e5c      	subs	r4, r3, #1
            mp_obj_new_cell(code_state->state[n_state - 1 - local_num]);
   1a9be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a9c0:	693b      	ldr	r3, [r7, #16]
   1a9c2:	1ad3      	subs	r3, r2, r3
   1a9c4:	3b01      	subs	r3, #1
   1a9c6:	68fa      	ldr	r2, [r7, #12]
   1a9c8:	3304      	adds	r3, #4
   1a9ca:	009b      	lsls	r3, r3, #2
   1a9cc:	4413      	add	r3, r2
   1a9ce:	685b      	ldr	r3, [r3, #4]
   1a9d0:	4618      	mov	r0, r3
   1a9d2:	f7f3 fc83 	bl	e2dc <mp_obj_new_cell>
   1a9d6:	4601      	mov	r1, r0
        code_state->state[n_state - 1 - local_num] =
   1a9d8:	68fa      	ldr	r2, [r7, #12]
   1a9da:	1d23      	adds	r3, r4, #4
   1a9dc:	009b      	lsls	r3, r3, #2
   1a9de:	4413      	add	r3, r2
   1a9e0:	6059      	str	r1, [r3, #4]
    while ((local_num = *ip++) != 255) {
   1a9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a9e4:	1c5a      	adds	r2, r3, #1
   1a9e6:	63ba      	str	r2, [r7, #56]	; 0x38
   1a9e8:	781b      	ldrb	r3, [r3, #0]
   1a9ea:	613b      	str	r3, [r7, #16]
   1a9ec:	693b      	ldr	r3, [r7, #16]
   1a9ee:	2bff      	cmp	r3, #255	; 0xff
   1a9f0:	d1e1      	bne.n	1a9b6 <mp_setup_code_state+0x432>
    }

    // now that we skipped over the prelude, set the ip for the VM
    code_state->ip = ip;
   1a9f2:	68fb      	ldr	r3, [r7, #12]
   1a9f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1a9f6:	605a      	str	r2, [r3, #4]

    DEBUG_printf("Calling: n_pos_args=%d, n_kwonly_args=%d\n", n_pos_args, n_kwonly_args);
    dump_args(code_state->state + n_state - n_pos_args - n_kwonly_args, n_pos_args + n_kwonly_args);
    dump_args(code_state->state, n_state);
}
   1a9f8:	bf00      	nop
   1a9fa:	376c      	adds	r7, #108	; 0x6c
   1a9fc:	46bd      	mov	sp, r7
   1a9fe:	bd90      	pop	{r4, r7, pc}
   1aa00:	00022ca4 	.word	0x00022ca4
   1aa04:	00020764 	.word	0x00020764
   1aa08:	00022cd4 	.word	0x00022cd4

0001aa0c <str_startswith_word>:
#include "py/builtin.h"
#include "py/repl.h"

#if MICROPY_HELPER_REPL

STATIC bool str_startswith_word(const char *str, const char *head) {
   1aa0c:	b580      	push	{r7, lr}
   1aa0e:	b084      	sub	sp, #16
   1aa10:	af00      	add	r7, sp, #0
   1aa12:	6078      	str	r0, [r7, #4]
   1aa14:	6039      	str	r1, [r7, #0]
    size_t i;
    for (i = 0; str[i] && head[i]; i++) {
   1aa16:	2300      	movs	r3, #0
   1aa18:	60fb      	str	r3, [r7, #12]
   1aa1a:	e00e      	b.n	1aa3a <str_startswith_word+0x2e>
        if (str[i] != head[i]) {
   1aa1c:	687a      	ldr	r2, [r7, #4]
   1aa1e:	68fb      	ldr	r3, [r7, #12]
   1aa20:	4413      	add	r3, r2
   1aa22:	781a      	ldrb	r2, [r3, #0]
   1aa24:	6839      	ldr	r1, [r7, #0]
   1aa26:	68fb      	ldr	r3, [r7, #12]
   1aa28:	440b      	add	r3, r1
   1aa2a:	781b      	ldrb	r3, [r3, #0]
   1aa2c:	429a      	cmp	r2, r3
   1aa2e:	d001      	beq.n	1aa34 <str_startswith_word+0x28>
            return false;
   1aa30:	2300      	movs	r3, #0
   1aa32:	e02d      	b.n	1aa90 <str_startswith_word+0x84>
    for (i = 0; str[i] && head[i]; i++) {
   1aa34:	68fb      	ldr	r3, [r7, #12]
   1aa36:	3301      	adds	r3, #1
   1aa38:	60fb      	str	r3, [r7, #12]
   1aa3a:	687a      	ldr	r2, [r7, #4]
   1aa3c:	68fb      	ldr	r3, [r7, #12]
   1aa3e:	4413      	add	r3, r2
   1aa40:	781b      	ldrb	r3, [r3, #0]
   1aa42:	2b00      	cmp	r3, #0
   1aa44:	d005      	beq.n	1aa52 <str_startswith_word+0x46>
   1aa46:	683a      	ldr	r2, [r7, #0]
   1aa48:	68fb      	ldr	r3, [r7, #12]
   1aa4a:	4413      	add	r3, r2
   1aa4c:	781b      	ldrb	r3, [r3, #0]
   1aa4e:	2b00      	cmp	r3, #0
   1aa50:	d1e4      	bne.n	1aa1c <str_startswith_word+0x10>
        }
    }
    return head[i] == '\0' && (str[i] == '\0' || !unichar_isident(str[i]));
   1aa52:	683a      	ldr	r2, [r7, #0]
   1aa54:	68fb      	ldr	r3, [r7, #12]
   1aa56:	4413      	add	r3, r2
   1aa58:	781b      	ldrb	r3, [r3, #0]
   1aa5a:	2b00      	cmp	r3, #0
   1aa5c:	d114      	bne.n	1aa88 <str_startswith_word+0x7c>
   1aa5e:	687a      	ldr	r2, [r7, #4]
   1aa60:	68fb      	ldr	r3, [r7, #12]
   1aa62:	4413      	add	r3, r2
   1aa64:	781b      	ldrb	r3, [r3, #0]
   1aa66:	2b00      	cmp	r3, #0
   1aa68:	d00c      	beq.n	1aa84 <str_startswith_word+0x78>
   1aa6a:	687a      	ldr	r2, [r7, #4]
   1aa6c:	68fb      	ldr	r3, [r7, #12]
   1aa6e:	4413      	add	r3, r2
   1aa70:	781b      	ldrb	r3, [r3, #0]
   1aa72:	4618      	mov	r0, r3
   1aa74:	f7e7 fcfc 	bl	2470 <unichar_isident>
   1aa78:	4603      	mov	r3, r0
   1aa7a:	f083 0301 	eor.w	r3, r3, #1
   1aa7e:	b2db      	uxtb	r3, r3
   1aa80:	2b00      	cmp	r3, #0
   1aa82:	d001      	beq.n	1aa88 <str_startswith_word+0x7c>
   1aa84:	2301      	movs	r3, #1
   1aa86:	e000      	b.n	1aa8a <str_startswith_word+0x7e>
   1aa88:	2300      	movs	r3, #0
   1aa8a:	f003 0301 	and.w	r3, r3, #1
   1aa8e:	b2db      	uxtb	r3, r3
}
   1aa90:	4618      	mov	r0, r3
   1aa92:	3710      	adds	r7, #16
   1aa94:	46bd      	mov	sp, r7
   1aa96:	bd80      	pop	{r7, pc}

0001aa98 <mp_repl_continue_with_input>:

bool mp_repl_continue_with_input(const char *input) {
   1aa98:	b580      	push	{r7, lr}
   1aa9a:	b088      	sub	sp, #32
   1aa9c:	af00      	add	r7, sp, #0
   1aa9e:	6078      	str	r0, [r7, #4]
    // check for blank input
    if (input[0] == '\0') {
   1aaa0:	687b      	ldr	r3, [r7, #4]
   1aaa2:	781b      	ldrb	r3, [r3, #0]
   1aaa4:	2b00      	cmp	r3, #0
   1aaa6:	d101      	bne.n	1aaac <mp_repl_continue_with_input+0x14>
        return false;
   1aaa8:	2300      	movs	r3, #0
   1aaaa:	e10c      	b.n	1acc6 <mp_repl_continue_with_input+0x22e>
    }

    // check if input starts with a certain keyword
    bool starts_with_compound_keyword =
           input[0] == '@'
   1aaac:	687b      	ldr	r3, [r7, #4]
   1aaae:	781b      	ldrb	r3, [r3, #0]
        || str_startswith_word(input, "while")
        || str_startswith_word(input, "for")
        || str_startswith_word(input, "try")
        || str_startswith_word(input, "with")
        || str_startswith_word(input, "def")
        || str_startswith_word(input, "class")
   1aab0:	2b40      	cmp	r3, #64	; 0x40
   1aab2:	d030      	beq.n	1ab16 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "if")
   1aab4:	4986      	ldr	r1, [pc, #536]	; (1acd0 <mp_repl_continue_with_input+0x238>)
   1aab6:	6878      	ldr	r0, [r7, #4]
   1aab8:	f7ff ffa8 	bl	1aa0c <str_startswith_word>
   1aabc:	4603      	mov	r3, r0
   1aabe:	2b00      	cmp	r3, #0
   1aac0:	d129      	bne.n	1ab16 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "while")
   1aac2:	4984      	ldr	r1, [pc, #528]	; (1acd4 <mp_repl_continue_with_input+0x23c>)
   1aac4:	6878      	ldr	r0, [r7, #4]
   1aac6:	f7ff ffa1 	bl	1aa0c <str_startswith_word>
   1aaca:	4603      	mov	r3, r0
   1aacc:	2b00      	cmp	r3, #0
   1aace:	d122      	bne.n	1ab16 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "for")
   1aad0:	4981      	ldr	r1, [pc, #516]	; (1acd8 <mp_repl_continue_with_input+0x240>)
   1aad2:	6878      	ldr	r0, [r7, #4]
   1aad4:	f7ff ff9a 	bl	1aa0c <str_startswith_word>
   1aad8:	4603      	mov	r3, r0
   1aada:	2b00      	cmp	r3, #0
   1aadc:	d11b      	bne.n	1ab16 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "try")
   1aade:	497f      	ldr	r1, [pc, #508]	; (1acdc <mp_repl_continue_with_input+0x244>)
   1aae0:	6878      	ldr	r0, [r7, #4]
   1aae2:	f7ff ff93 	bl	1aa0c <str_startswith_word>
   1aae6:	4603      	mov	r3, r0
   1aae8:	2b00      	cmp	r3, #0
   1aaea:	d114      	bne.n	1ab16 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "with")
   1aaec:	497c      	ldr	r1, [pc, #496]	; (1ace0 <mp_repl_continue_with_input+0x248>)
   1aaee:	6878      	ldr	r0, [r7, #4]
   1aaf0:	f7ff ff8c 	bl	1aa0c <str_startswith_word>
   1aaf4:	4603      	mov	r3, r0
   1aaf6:	2b00      	cmp	r3, #0
   1aaf8:	d10d      	bne.n	1ab16 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "def")
   1aafa:	497a      	ldr	r1, [pc, #488]	; (1ace4 <mp_repl_continue_with_input+0x24c>)
   1aafc:	6878      	ldr	r0, [r7, #4]
   1aafe:	f7ff ff85 	bl	1aa0c <str_startswith_word>
   1ab02:	4603      	mov	r3, r0
   1ab04:	2b00      	cmp	r3, #0
   1ab06:	d106      	bne.n	1ab16 <mp_repl_continue_with_input+0x7e>
        || str_startswith_word(input, "class")
   1ab08:	4977      	ldr	r1, [pc, #476]	; (1ace8 <mp_repl_continue_with_input+0x250>)
   1ab0a:	6878      	ldr	r0, [r7, #4]
   1ab0c:	f7ff ff7e 	bl	1aa0c <str_startswith_word>
   1ab10:	4603      	mov	r3, r0
   1ab12:	2b00      	cmp	r3, #0
   1ab14:	d001      	beq.n	1ab1a <mp_repl_continue_with_input+0x82>
   1ab16:	2301      	movs	r3, #1
   1ab18:	e000      	b.n	1ab1c <mp_repl_continue_with_input+0x84>
   1ab1a:	2300      	movs	r3, #0
    bool starts_with_compound_keyword =
   1ab1c:	72fb      	strb	r3, [r7, #11]
   1ab1e:	7afb      	ldrb	r3, [r7, #11]
   1ab20:	f003 0301 	and.w	r3, r3, #1
   1ab24:	72fb      	strb	r3, [r7, #11]
    #define Q_NONE (0)
    #define Q_1_SINGLE (1)
    #define Q_1_DOUBLE (2)
    #define Q_3_SINGLE (3)
    #define Q_3_DOUBLE (4)
    int n_paren = 0;
   1ab26:	2300      	movs	r3, #0
   1ab28:	61fb      	str	r3, [r7, #28]
    int n_brack = 0;
   1ab2a:	2300      	movs	r3, #0
   1ab2c:	61bb      	str	r3, [r7, #24]
    int n_brace = 0;
   1ab2e:	2300      	movs	r3, #0
   1ab30:	617b      	str	r3, [r7, #20]
    int in_quote = Q_NONE;
   1ab32:	2300      	movs	r3, #0
   1ab34:	613b      	str	r3, [r7, #16]
    const char *i;
    for (i = input; *i; i++) {
   1ab36:	687b      	ldr	r3, [r7, #4]
   1ab38:	60fb      	str	r3, [r7, #12]
   1ab3a:	e097      	b.n	1ac6c <mp_repl_continue_with_input+0x1d4>
        if (*i == '\'') {
   1ab3c:	68fb      	ldr	r3, [r7, #12]
   1ab3e:	781b      	ldrb	r3, [r3, #0]
   1ab40:	2b27      	cmp	r3, #39	; 0x27
   1ab42:	d122      	bne.n	1ab8a <mp_repl_continue_with_input+0xf2>
            if ((in_quote == Q_NONE || in_quote == Q_3_SINGLE) && i[1] == '\'' && i[2] == '\'') {
   1ab44:	693b      	ldr	r3, [r7, #16]
   1ab46:	2b00      	cmp	r3, #0
   1ab48:	d002      	beq.n	1ab50 <mp_repl_continue_with_input+0xb8>
   1ab4a:	693b      	ldr	r3, [r7, #16]
   1ab4c:	2b03      	cmp	r3, #3
   1ab4e:	d111      	bne.n	1ab74 <mp_repl_continue_with_input+0xdc>
   1ab50:	68fb      	ldr	r3, [r7, #12]
   1ab52:	3301      	adds	r3, #1
   1ab54:	781b      	ldrb	r3, [r3, #0]
   1ab56:	2b27      	cmp	r3, #39	; 0x27
   1ab58:	d10c      	bne.n	1ab74 <mp_repl_continue_with_input+0xdc>
   1ab5a:	68fb      	ldr	r3, [r7, #12]
   1ab5c:	3302      	adds	r3, #2
   1ab5e:	781b      	ldrb	r3, [r3, #0]
   1ab60:	2b27      	cmp	r3, #39	; 0x27
   1ab62:	d107      	bne.n	1ab74 <mp_repl_continue_with_input+0xdc>
                i += 2;
   1ab64:	68fb      	ldr	r3, [r7, #12]
   1ab66:	3302      	adds	r3, #2
   1ab68:	60fb      	str	r3, [r7, #12]
                in_quote = Q_3_SINGLE - in_quote;
   1ab6a:	693b      	ldr	r3, [r7, #16]
   1ab6c:	f1c3 0303 	rsb	r3, r3, #3
   1ab70:	613b      	str	r3, [r7, #16]
   1ab72:	e078      	b.n	1ac66 <mp_repl_continue_with_input+0x1ce>
            } else if (in_quote == Q_NONE || in_quote == Q_1_SINGLE) {
   1ab74:	693b      	ldr	r3, [r7, #16]
   1ab76:	2b00      	cmp	r3, #0
   1ab78:	d002      	beq.n	1ab80 <mp_repl_continue_with_input+0xe8>
   1ab7a:	693b      	ldr	r3, [r7, #16]
   1ab7c:	2b01      	cmp	r3, #1
   1ab7e:	d172      	bne.n	1ac66 <mp_repl_continue_with_input+0x1ce>
                in_quote = Q_1_SINGLE - in_quote;
   1ab80:	693b      	ldr	r3, [r7, #16]
   1ab82:	f1c3 0301 	rsb	r3, r3, #1
   1ab86:	613b      	str	r3, [r7, #16]
   1ab88:	e06d      	b.n	1ac66 <mp_repl_continue_with_input+0x1ce>
            }
        } else if (*i == '"') {
   1ab8a:	68fb      	ldr	r3, [r7, #12]
   1ab8c:	781b      	ldrb	r3, [r3, #0]
   1ab8e:	2b22      	cmp	r3, #34	; 0x22
   1ab90:	d122      	bne.n	1abd8 <mp_repl_continue_with_input+0x140>
            if ((in_quote == Q_NONE || in_quote == Q_3_DOUBLE) && i[1] == '"' && i[2] == '"') {
   1ab92:	693b      	ldr	r3, [r7, #16]
   1ab94:	2b00      	cmp	r3, #0
   1ab96:	d002      	beq.n	1ab9e <mp_repl_continue_with_input+0x106>
   1ab98:	693b      	ldr	r3, [r7, #16]
   1ab9a:	2b04      	cmp	r3, #4
   1ab9c:	d111      	bne.n	1abc2 <mp_repl_continue_with_input+0x12a>
   1ab9e:	68fb      	ldr	r3, [r7, #12]
   1aba0:	3301      	adds	r3, #1
   1aba2:	781b      	ldrb	r3, [r3, #0]
   1aba4:	2b22      	cmp	r3, #34	; 0x22
   1aba6:	d10c      	bne.n	1abc2 <mp_repl_continue_with_input+0x12a>
   1aba8:	68fb      	ldr	r3, [r7, #12]
   1abaa:	3302      	adds	r3, #2
   1abac:	781b      	ldrb	r3, [r3, #0]
   1abae:	2b22      	cmp	r3, #34	; 0x22
   1abb0:	d107      	bne.n	1abc2 <mp_repl_continue_with_input+0x12a>
                i += 2;
   1abb2:	68fb      	ldr	r3, [r7, #12]
   1abb4:	3302      	adds	r3, #2
   1abb6:	60fb      	str	r3, [r7, #12]
                in_quote = Q_3_DOUBLE - in_quote;
   1abb8:	693b      	ldr	r3, [r7, #16]
   1abba:	f1c3 0304 	rsb	r3, r3, #4
   1abbe:	613b      	str	r3, [r7, #16]
   1abc0:	e051      	b.n	1ac66 <mp_repl_continue_with_input+0x1ce>
            } else if (in_quote == Q_NONE || in_quote == Q_1_DOUBLE) {
   1abc2:	693b      	ldr	r3, [r7, #16]
   1abc4:	2b00      	cmp	r3, #0
   1abc6:	d002      	beq.n	1abce <mp_repl_continue_with_input+0x136>
   1abc8:	693b      	ldr	r3, [r7, #16]
   1abca:	2b02      	cmp	r3, #2
   1abcc:	d14b      	bne.n	1ac66 <mp_repl_continue_with_input+0x1ce>
                in_quote = Q_1_DOUBLE - in_quote;
   1abce:	693b      	ldr	r3, [r7, #16]
   1abd0:	f1c3 0302 	rsb	r3, r3, #2
   1abd4:	613b      	str	r3, [r7, #16]
   1abd6:	e046      	b.n	1ac66 <mp_repl_continue_with_input+0x1ce>
            }
        } else if (*i == '\\' && (i[1] == '\'' || i[1] == '"' || i[1] == '\\')) {
   1abd8:	68fb      	ldr	r3, [r7, #12]
   1abda:	781b      	ldrb	r3, [r3, #0]
   1abdc:	2b5c      	cmp	r3, #92	; 0x5c
   1abde:	d115      	bne.n	1ac0c <mp_repl_continue_with_input+0x174>
   1abe0:	68fb      	ldr	r3, [r7, #12]
   1abe2:	3301      	adds	r3, #1
   1abe4:	781b      	ldrb	r3, [r3, #0]
   1abe6:	2b27      	cmp	r3, #39	; 0x27
   1abe8:	d009      	beq.n	1abfe <mp_repl_continue_with_input+0x166>
   1abea:	68fb      	ldr	r3, [r7, #12]
   1abec:	3301      	adds	r3, #1
   1abee:	781b      	ldrb	r3, [r3, #0]
   1abf0:	2b22      	cmp	r3, #34	; 0x22
   1abf2:	d004      	beq.n	1abfe <mp_repl_continue_with_input+0x166>
   1abf4:	68fb      	ldr	r3, [r7, #12]
   1abf6:	3301      	adds	r3, #1
   1abf8:	781b      	ldrb	r3, [r3, #0]
   1abfa:	2b5c      	cmp	r3, #92	; 0x5c
   1abfc:	d106      	bne.n	1ac0c <mp_repl_continue_with_input+0x174>
            if (in_quote != Q_NONE) {
   1abfe:	693b      	ldr	r3, [r7, #16]
   1ac00:	2b00      	cmp	r3, #0
   1ac02:	d030      	beq.n	1ac66 <mp_repl_continue_with_input+0x1ce>
                i++;
   1ac04:	68fb      	ldr	r3, [r7, #12]
   1ac06:	3301      	adds	r3, #1
   1ac08:	60fb      	str	r3, [r7, #12]
            if (in_quote != Q_NONE) {
   1ac0a:	e02c      	b.n	1ac66 <mp_repl_continue_with_input+0x1ce>
            }
        } else if (in_quote == Q_NONE) {
   1ac0c:	693b      	ldr	r3, [r7, #16]
   1ac0e:	2b00      	cmp	r3, #0
   1ac10:	d129      	bne.n	1ac66 <mp_repl_continue_with_input+0x1ce>
            switch (*i) {
   1ac12:	68fb      	ldr	r3, [r7, #12]
   1ac14:	781b      	ldrb	r3, [r3, #0]
   1ac16:	2b5b      	cmp	r3, #91	; 0x5b
   1ac18:	d015      	beq.n	1ac46 <mp_repl_continue_with_input+0x1ae>
   1ac1a:	2b5b      	cmp	r3, #91	; 0x5b
   1ac1c:	dc04      	bgt.n	1ac28 <mp_repl_continue_with_input+0x190>
   1ac1e:	2b28      	cmp	r3, #40	; 0x28
   1ac20:	d009      	beq.n	1ac36 <mp_repl_continue_with_input+0x19e>
   1ac22:	2b29      	cmp	r3, #41	; 0x29
   1ac24:	d00b      	beq.n	1ac3e <mp_repl_continue_with_input+0x1a6>
                case ')': n_paren -= 1; break;
                case '[': n_brack += 1; break;
                case ']': n_brack -= 1; break;
                case '{': n_brace += 1; break;
                case '}': n_brace -= 1; break;
                default: break;
   1ac26:	e01e      	b.n	1ac66 <mp_repl_continue_with_input+0x1ce>
            switch (*i) {
   1ac28:	2b7b      	cmp	r3, #123	; 0x7b
   1ac2a:	d014      	beq.n	1ac56 <mp_repl_continue_with_input+0x1be>
   1ac2c:	2b7d      	cmp	r3, #125	; 0x7d
   1ac2e:	d016      	beq.n	1ac5e <mp_repl_continue_with_input+0x1c6>
   1ac30:	2b5d      	cmp	r3, #93	; 0x5d
   1ac32:	d00c      	beq.n	1ac4e <mp_repl_continue_with_input+0x1b6>
                default: break;
   1ac34:	e017      	b.n	1ac66 <mp_repl_continue_with_input+0x1ce>
                case '(': n_paren += 1; break;
   1ac36:	69fb      	ldr	r3, [r7, #28]
   1ac38:	3301      	adds	r3, #1
   1ac3a:	61fb      	str	r3, [r7, #28]
   1ac3c:	e013      	b.n	1ac66 <mp_repl_continue_with_input+0x1ce>
                case ')': n_paren -= 1; break;
   1ac3e:	69fb      	ldr	r3, [r7, #28]
   1ac40:	3b01      	subs	r3, #1
   1ac42:	61fb      	str	r3, [r7, #28]
   1ac44:	e00f      	b.n	1ac66 <mp_repl_continue_with_input+0x1ce>
                case '[': n_brack += 1; break;
   1ac46:	69bb      	ldr	r3, [r7, #24]
   1ac48:	3301      	adds	r3, #1
   1ac4a:	61bb      	str	r3, [r7, #24]
   1ac4c:	e00b      	b.n	1ac66 <mp_repl_continue_with_input+0x1ce>
                case ']': n_brack -= 1; break;
   1ac4e:	69bb      	ldr	r3, [r7, #24]
   1ac50:	3b01      	subs	r3, #1
   1ac52:	61bb      	str	r3, [r7, #24]
   1ac54:	e007      	b.n	1ac66 <mp_repl_continue_with_input+0x1ce>
                case '{': n_brace += 1; break;
   1ac56:	697b      	ldr	r3, [r7, #20]
   1ac58:	3301      	adds	r3, #1
   1ac5a:	617b      	str	r3, [r7, #20]
   1ac5c:	e003      	b.n	1ac66 <mp_repl_continue_with_input+0x1ce>
                case '}': n_brace -= 1; break;
   1ac5e:	697b      	ldr	r3, [r7, #20]
   1ac60:	3b01      	subs	r3, #1
   1ac62:	617b      	str	r3, [r7, #20]
   1ac64:	bf00      	nop
    for (i = input; *i; i++) {
   1ac66:	68fb      	ldr	r3, [r7, #12]
   1ac68:	3301      	adds	r3, #1
   1ac6a:	60fb      	str	r3, [r7, #12]
   1ac6c:	68fb      	ldr	r3, [r7, #12]
   1ac6e:	781b      	ldrb	r3, [r3, #0]
   1ac70:	2b00      	cmp	r3, #0
   1ac72:	f47f af63 	bne.w	1ab3c <mp_repl_continue_with_input+0xa4>
            }
        }
    }

    // continue if unmatched 3-quotes
    if (in_quote == Q_3_SINGLE || in_quote == Q_3_DOUBLE) {
   1ac76:	693b      	ldr	r3, [r7, #16]
   1ac78:	2b03      	cmp	r3, #3
   1ac7a:	d002      	beq.n	1ac82 <mp_repl_continue_with_input+0x1ea>
   1ac7c:	693b      	ldr	r3, [r7, #16]
   1ac7e:	2b04      	cmp	r3, #4
   1ac80:	d101      	bne.n	1ac86 <mp_repl_continue_with_input+0x1ee>
        return true;
   1ac82:	2301      	movs	r3, #1
   1ac84:	e01f      	b.n	1acc6 <mp_repl_continue_with_input+0x22e>
    }

    // continue if unmatched brackets, but only if not in a 1-quote
    if ((n_paren > 0 || n_brack > 0 || n_brace > 0) && in_quote == Q_NONE) {
   1ac86:	69fb      	ldr	r3, [r7, #28]
   1ac88:	2b00      	cmp	r3, #0
   1ac8a:	dc05      	bgt.n	1ac98 <mp_repl_continue_with_input+0x200>
   1ac8c:	69bb      	ldr	r3, [r7, #24]
   1ac8e:	2b00      	cmp	r3, #0
   1ac90:	dc02      	bgt.n	1ac98 <mp_repl_continue_with_input+0x200>
   1ac92:	697b      	ldr	r3, [r7, #20]
   1ac94:	2b00      	cmp	r3, #0
   1ac96:	dd04      	ble.n	1aca2 <mp_repl_continue_with_input+0x20a>
   1ac98:	693b      	ldr	r3, [r7, #16]
   1ac9a:	2b00      	cmp	r3, #0
   1ac9c:	d101      	bne.n	1aca2 <mp_repl_continue_with_input+0x20a>
        return true;
   1ac9e:	2301      	movs	r3, #1
   1aca0:	e011      	b.n	1acc6 <mp_repl_continue_with_input+0x22e>
    }

    // continue if last character was backslash (for line continuation)
    if (i[-1] == '\\') {
   1aca2:	68fb      	ldr	r3, [r7, #12]
   1aca4:	3b01      	subs	r3, #1
   1aca6:	781b      	ldrb	r3, [r3, #0]
   1aca8:	2b5c      	cmp	r3, #92	; 0x5c
   1acaa:	d101      	bne.n	1acb0 <mp_repl_continue_with_input+0x218>
        return true;
   1acac:	2301      	movs	r3, #1
   1acae:	e00a      	b.n	1acc6 <mp_repl_continue_with_input+0x22e>
    }

    // continue if compound keyword and last line was not empty
    if (starts_with_compound_keyword && i[-1] != '\n') {
   1acb0:	7afb      	ldrb	r3, [r7, #11]
   1acb2:	2b00      	cmp	r3, #0
   1acb4:	d006      	beq.n	1acc4 <mp_repl_continue_with_input+0x22c>
   1acb6:	68fb      	ldr	r3, [r7, #12]
   1acb8:	3b01      	subs	r3, #1
   1acba:	781b      	ldrb	r3, [r3, #0]
   1acbc:	2b0a      	cmp	r3, #10
   1acbe:	d001      	beq.n	1acc4 <mp_repl_continue_with_input+0x22c>
        return true;
   1acc0:	2301      	movs	r3, #1
   1acc2:	e000      	b.n	1acc6 <mp_repl_continue_with_input+0x22e>
    }

    // otherwise, don't continue
    return false;
   1acc4:	2300      	movs	r3, #0
}
   1acc6:	4618      	mov	r0, r3
   1acc8:	3720      	adds	r7, #32
   1acca:	46bd      	mov	sp, r7
   1accc:	bd80      	pop	{r7, pc}
   1acce:	bf00      	nop
   1acd0:	00022cfc 	.word	0x00022cfc
   1acd4:	00022d00 	.word	0x00022d00
   1acd8:	00022d08 	.word	0x00022d08
   1acdc:	00022d0c 	.word	0x00022d0c
   1ace0:	00022d10 	.word	0x00022d10
   1ace4:	00022d18 	.word	0x00022d18
   1ace8:	00022d1c 	.word	0x00022d1c

0001acec <mp_repl_autocomplete>:

size_t mp_repl_autocomplete(const char *str, size_t len, const mp_print_t *print, const char **compl_str) {
   1acec:	b580      	push	{r7, lr}
   1acee:	b09c      	sub	sp, #112	; 0x70
   1acf0:	af00      	add	r7, sp, #0
   1acf2:	60f8      	str	r0, [r7, #12]
   1acf4:	60b9      	str	r1, [r7, #8]
   1acf6:	607a      	str	r2, [r7, #4]
   1acf8:	603b      	str	r3, [r7, #0]
    // scan backwards to find start of "a.b.c" chain
    const char *org_str = str;
   1acfa:	68fb      	ldr	r3, [r7, #12]
   1acfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    const char *top = str + len;
   1acfe:	68fa      	ldr	r2, [r7, #12]
   1ad00:	68bb      	ldr	r3, [r7, #8]
   1ad02:	4413      	add	r3, r2
   1ad04:	63bb      	str	r3, [r7, #56]	; 0x38
    for (const char *s = top; --s >= str;) {
   1ad06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ad08:	66fb      	str	r3, [r7, #108]	; 0x6c
   1ad0a:	e023      	b.n	1ad54 <mp_repl_autocomplete+0x68>
        if (!(unichar_isalpha(*s) || unichar_isdigit(*s) || *s == '_' || *s == '.')) {
   1ad0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1ad0e:	781b      	ldrb	r3, [r3, #0]
   1ad10:	4618      	mov	r0, r3
   1ad12:	f7e7 fb53 	bl	23bc <unichar_isalpha>
   1ad16:	4603      	mov	r3, r0
   1ad18:	f083 0301 	eor.w	r3, r3, #1
   1ad1c:	b2db      	uxtb	r3, r3
   1ad1e:	2b00      	cmp	r3, #0
   1ad20:	d018      	beq.n	1ad54 <mp_repl_autocomplete+0x68>
   1ad22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1ad24:	781b      	ldrb	r3, [r3, #0]
   1ad26:	4618      	mov	r0, r3
   1ad28:	f7e7 fb66 	bl	23f8 <unichar_isdigit>
   1ad2c:	4603      	mov	r3, r0
   1ad2e:	f083 0301 	eor.w	r3, r3, #1
   1ad32:	b2db      	uxtb	r3, r3
   1ad34:	2b00      	cmp	r3, #0
   1ad36:	d00d      	beq.n	1ad54 <mp_repl_autocomplete+0x68>
   1ad38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1ad3a:	781b      	ldrb	r3, [r3, #0]
   1ad3c:	2b5f      	cmp	r3, #95	; 0x5f
   1ad3e:	d009      	beq.n	1ad54 <mp_repl_autocomplete+0x68>
   1ad40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1ad42:	781b      	ldrb	r3, [r3, #0]
   1ad44:	2b2e      	cmp	r3, #46	; 0x2e
   1ad46:	d005      	beq.n	1ad54 <mp_repl_autocomplete+0x68>
            ++s;
   1ad48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1ad4a:	3301      	adds	r3, #1
   1ad4c:	66fb      	str	r3, [r7, #108]	; 0x6c
            str = s;
   1ad4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1ad50:	60fb      	str	r3, [r7, #12]
            break;
   1ad52:	e006      	b.n	1ad62 <mp_repl_autocomplete+0x76>
    for (const char *s = top; --s >= str;) {
   1ad54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1ad56:	3b01      	subs	r3, #1
   1ad58:	66fb      	str	r3, [r7, #108]	; 0x6c
   1ad5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1ad5c:	68fb      	ldr	r3, [r7, #12]
   1ad5e:	429a      	cmp	r2, r3
   1ad60:	d2d4      	bcs.n	1ad0c <mp_repl_autocomplete+0x20>
        }
    }

    size_t nqstr = QSTR_TOTAL();
   1ad62:	4b95      	ldr	r3, [pc, #596]	; (1afb8 <mp_repl_autocomplete+0x2cc>)
   1ad64:	691b      	ldr	r3, [r3, #16]
   1ad66:	685a      	ldr	r2, [r3, #4]
   1ad68:	4b93      	ldr	r3, [pc, #588]	; (1afb8 <mp_repl_autocomplete+0x2cc>)
   1ad6a:	691b      	ldr	r3, [r3, #16]
   1ad6c:	68db      	ldr	r3, [r3, #12]
   1ad6e:	4413      	add	r3, r2
   1ad70:	637b      	str	r3, [r7, #52]	; 0x34

    // begin search in outer global dict which is accessed from __main__
    mp_obj_t obj = MP_OBJ_FROM_PTR(&mp_module___main__);
   1ad72:	4b92      	ldr	r3, [pc, #584]	; (1afbc <mp_repl_autocomplete+0x2d0>)
   1ad74:	66bb      	str	r3, [r7, #104]	; 0x68
    mp_obj_t dest[2];

    for (;;) {
        // get next word in string to complete
        const char *s_start = str;
   1ad76:	68fb      	ldr	r3, [r7, #12]
   1ad78:	633b      	str	r3, [r7, #48]	; 0x30
        while (str < top && *str != '.') {
   1ad7a:	e002      	b.n	1ad82 <mp_repl_autocomplete+0x96>
            ++str;
   1ad7c:	68fb      	ldr	r3, [r7, #12]
   1ad7e:	3301      	adds	r3, #1
   1ad80:	60fb      	str	r3, [r7, #12]
        while (str < top && *str != '.') {
   1ad82:	68fa      	ldr	r2, [r7, #12]
   1ad84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ad86:	429a      	cmp	r2, r3
   1ad88:	d203      	bcs.n	1ad92 <mp_repl_autocomplete+0xa6>
   1ad8a:	68fb      	ldr	r3, [r7, #12]
   1ad8c:	781b      	ldrb	r3, [r3, #0]
   1ad8e:	2b2e      	cmp	r3, #46	; 0x2e
   1ad90:	d1f4      	bne.n	1ad7c <mp_repl_autocomplete+0x90>
        }
        size_t s_len = str - s_start;
   1ad92:	68fa      	ldr	r2, [r7, #12]
   1ad94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ad96:	1ad3      	subs	r3, r2, r3
   1ad98:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (str < top) {
   1ad9a:	68fa      	ldr	r2, [r7, #12]
   1ad9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ad9e:	429a      	cmp	r2, r3
   1ada0:	d21b      	bcs.n	1adda <mp_repl_autocomplete+0xee>
            // a complete word, lookup in current object
            qstr q = qstr_find_strn(s_start, s_len);
   1ada2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1ada4:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1ada6:	f7e6 f8e5 	bl	f74 <qstr_find_strn>
   1adaa:	62b8      	str	r0, [r7, #40]	; 0x28
            if (q == MP_QSTR_NULL) {
   1adac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1adae:	2b00      	cmp	r3, #0
   1adb0:	d101      	bne.n	1adb6 <mp_repl_autocomplete+0xca>
                // lookup will fail
                return 0;
   1adb2:	2300      	movs	r3, #0
   1adb4:	e0fc      	b.n	1afb0 <mp_repl_autocomplete+0x2c4>
            }
            mp_load_method_protected(obj, q, dest, true);
   1adb6:	f107 0218 	add.w	r2, r7, #24
   1adba:	2301      	movs	r3, #1
   1adbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1adbe:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   1adc0:	f7f1 fd62 	bl	c888 <mp_load_method_protected>
            obj = dest[0]; // attribute, method, or MP_OBJ_NULL if nothing found
   1adc4:	69bb      	ldr	r3, [r7, #24]
   1adc6:	66bb      	str	r3, [r7, #104]	; 0x68

            if (obj == MP_OBJ_NULL) {
   1adc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1adca:	2b00      	cmp	r3, #0
   1adcc:	d101      	bne.n	1add2 <mp_repl_autocomplete+0xe6>
                // lookup failed
                return 0;
   1adce:	2300      	movs	r3, #0
   1add0:	e0ee      	b.n	1afb0 <mp_repl_autocomplete+0x2c4>
            }

            // skip '.' to move to next word
            ++str;
   1add2:	68fb      	ldr	r3, [r7, #12]
   1add4:	3301      	adds	r3, #1
   1add6:	60fb      	str	r3, [r7, #12]
   1add8:	e7cd      	b.n	1ad76 <mp_repl_autocomplete+0x8a>

        } else {
            // end of string, do completion on this partial name

            // look for matches
            const char *match_str = NULL;
   1adda:	2300      	movs	r3, #0
   1addc:	667b      	str	r3, [r7, #100]	; 0x64
            size_t match_len = 0;
   1adde:	2300      	movs	r3, #0
   1ade0:	663b      	str	r3, [r7, #96]	; 0x60
            qstr q_first = 0, q_last = 0;
   1ade2:	2300      	movs	r3, #0
   1ade4:	65fb      	str	r3, [r7, #92]	; 0x5c
   1ade6:	2300      	movs	r3, #0
   1ade8:	65bb      	str	r3, [r7, #88]	; 0x58
            for (qstr q = MP_QSTR_ + 1; q < nqstr; ++q) {
   1adea:	2302      	movs	r3, #2
   1adec:	657b      	str	r3, [r7, #84]	; 0x54
   1adee:	e049      	b.n	1ae84 <mp_repl_autocomplete+0x198>
                size_t d_len;
                const char *d_str = (const char*)qstr_data(q, &d_len);
   1adf0:	f107 0314 	add.w	r3, r7, #20
   1adf4:	4619      	mov	r1, r3
   1adf6:	6d78      	ldr	r0, [r7, #84]	; 0x54
   1adf8:	f7e6 fa0a 	bl	1210 <qstr_data>
   1adfc:	6278      	str	r0, [r7, #36]	; 0x24
                if (s_len <= d_len && strncmp(s_start, d_str, s_len) == 0) {
   1adfe:	697b      	ldr	r3, [r7, #20]
   1ae00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1ae02:	429a      	cmp	r2, r3
   1ae04:	d83b      	bhi.n	1ae7e <mp_repl_autocomplete+0x192>
   1ae06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1ae08:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1ae0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1ae0c:	f001 f9e8 	bl	1c1e0 <strncmp>
   1ae10:	4603      	mov	r3, r0
   1ae12:	2b00      	cmp	r3, #0
   1ae14:	d133      	bne.n	1ae7e <mp_repl_autocomplete+0x192>
                    mp_load_method_protected(obj, q, dest, true);
   1ae16:	f107 0218 	add.w	r2, r7, #24
   1ae1a:	2301      	movs	r3, #1
   1ae1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
   1ae1e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   1ae20:	f7f1 fd32 	bl	c888 <mp_load_method_protected>
                    if (dest[0] != MP_OBJ_NULL) {
   1ae24:	69bb      	ldr	r3, [r7, #24]
   1ae26:	2b00      	cmp	r3, #0
   1ae28:	d029      	beq.n	1ae7e <mp_repl_autocomplete+0x192>
                        if (match_str == NULL) {
   1ae2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1ae2c:	2b00      	cmp	r3, #0
   1ae2e:	d104      	bne.n	1ae3a <mp_repl_autocomplete+0x14e>
                            match_str = d_str;
   1ae30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ae32:	667b      	str	r3, [r7, #100]	; 0x64
                            match_len = d_len;
   1ae34:	697b      	ldr	r3, [r7, #20]
   1ae36:	663b      	str	r3, [r7, #96]	; 0x60
   1ae38:	e01a      	b.n	1ae70 <mp_repl_autocomplete+0x184>
                        } else {
                            // search for longest common prefix of match_str and d_str
                            // (assumes these strings are null-terminated)
                            for (size_t j = s_len; j <= match_len && j <= d_len; ++j) {
   1ae3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ae3c:	653b      	str	r3, [r7, #80]	; 0x50
   1ae3e:	e00f      	b.n	1ae60 <mp_repl_autocomplete+0x174>
                                if (match_str[j] != d_str[j]) {
   1ae40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1ae42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ae44:	4413      	add	r3, r2
   1ae46:	781a      	ldrb	r2, [r3, #0]
   1ae48:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1ae4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ae4c:	440b      	add	r3, r1
   1ae4e:	781b      	ldrb	r3, [r3, #0]
   1ae50:	429a      	cmp	r2, r3
   1ae52:	d002      	beq.n	1ae5a <mp_repl_autocomplete+0x16e>
                                    match_len = j;
   1ae54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ae56:	663b      	str	r3, [r7, #96]	; 0x60
                                    break;
   1ae58:	e00a      	b.n	1ae70 <mp_repl_autocomplete+0x184>
                            for (size_t j = s_len; j <= match_len && j <= d_len; ++j) {
   1ae5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1ae5c:	3301      	adds	r3, #1
   1ae5e:	653b      	str	r3, [r7, #80]	; 0x50
   1ae60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   1ae62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1ae64:	429a      	cmp	r2, r3
   1ae66:	d803      	bhi.n	1ae70 <mp_repl_autocomplete+0x184>
   1ae68:	697b      	ldr	r3, [r7, #20]
   1ae6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   1ae6c:	429a      	cmp	r2, r3
   1ae6e:	d9e7      	bls.n	1ae40 <mp_repl_autocomplete+0x154>
                                }
                            }
                        }
                        if (q_first == 0) {
   1ae70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1ae72:	2b00      	cmp	r3, #0
   1ae74:	d101      	bne.n	1ae7a <mp_repl_autocomplete+0x18e>
                            q_first = q;
   1ae76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1ae78:	65fb      	str	r3, [r7, #92]	; 0x5c
                        }
                        q_last = q;
   1ae7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1ae7c:	65bb      	str	r3, [r7, #88]	; 0x58
            for (qstr q = MP_QSTR_ + 1; q < nqstr; ++q) {
   1ae7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1ae80:	3301      	adds	r3, #1
   1ae82:	657b      	str	r3, [r7, #84]	; 0x54
   1ae84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1ae86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ae88:	429a      	cmp	r2, r3
   1ae8a:	d3b1      	bcc.n	1adf0 <mp_repl_autocomplete+0x104>
                    }
                }
            }

            // nothing found
            if (q_first == 0) {
   1ae8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1ae8e:	2b00      	cmp	r3, #0
   1ae90:	d116      	bne.n	1aec0 <mp_repl_autocomplete+0x1d4>
                // If there're no better alternatives, and if it's first word
                // in the line, try to complete "import".
                if (s_start == org_str) {
   1ae92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1ae94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ae96:	429a      	cmp	r2, r3
   1ae98:	d110      	bne.n	1aebc <mp_repl_autocomplete+0x1d0>
                    static const char import_str[] = "import ";
                    if (memcmp(s_start, import_str, s_len) == 0) {
   1ae9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1ae9c:	4948      	ldr	r1, [pc, #288]	; (1afc0 <mp_repl_autocomplete+0x2d4>)
   1ae9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1aea0:	f001 f8f8 	bl	1c094 <memcmp>
   1aea4:	4603      	mov	r3, r0
   1aea6:	2b00      	cmp	r3, #0
   1aea8:	d108      	bne.n	1aebc <mp_repl_autocomplete+0x1d0>
                        *compl_str = import_str + s_len;
   1aeaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aeac:	4a44      	ldr	r2, [pc, #272]	; (1afc0 <mp_repl_autocomplete+0x2d4>)
   1aeae:	441a      	add	r2, r3
   1aeb0:	683b      	ldr	r3, [r7, #0]
   1aeb2:	601a      	str	r2, [r3, #0]
                        return sizeof(import_str) - 1 - s_len;
   1aeb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aeb6:	f1c3 0307 	rsb	r3, r3, #7
   1aeba:	e079      	b.n	1afb0 <mp_repl_autocomplete+0x2c4>
                    }
                }

                return 0;
   1aebc:	2300      	movs	r3, #0
   1aebe:	e077      	b.n	1afb0 <mp_repl_autocomplete+0x2c4>
            }

            // 1 match found, or multiple matches with a common prefix
            if (q_first == q_last || match_len > s_len) {
   1aec0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1aec2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1aec4:	429a      	cmp	r2, r3
   1aec6:	d003      	beq.n	1aed0 <mp_repl_autocomplete+0x1e4>
   1aec8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1aeca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aecc:	429a      	cmp	r2, r3
   1aece:	d908      	bls.n	1aee2 <mp_repl_autocomplete+0x1f6>
                *compl_str = match_str + s_len;
   1aed0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1aed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aed4:	441a      	add	r2, r3
   1aed6:	683b      	ldr	r3, [r7, #0]
   1aed8:	601a      	str	r2, [r3, #0]
                return match_len - s_len;
   1aeda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1aedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aede:	1ad3      	subs	r3, r2, r3
   1aee0:	e066      	b.n	1afb0 <mp_repl_autocomplete+0x2c4>
            // multiple matches found, print them out

            #define WORD_SLOT_LEN (16)
            #define MAX_LINE_LEN  (4 * WORD_SLOT_LEN)

            int line_len = MAX_LINE_LEN; // force a newline for first word
   1aee2:	2340      	movs	r3, #64	; 0x40
   1aee4:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (qstr q = q_first; q <= q_last; ++q) {
   1aee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1aee8:	64bb      	str	r3, [r7, #72]	; 0x48
   1aeea:	e057      	b.n	1af9c <mp_repl_autocomplete+0x2b0>
                size_t d_len;
                const char *d_str = (const char*)qstr_data(q, &d_len);
   1aeec:	f107 0310 	add.w	r3, r7, #16
   1aef0:	4619      	mov	r1, r3
   1aef2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   1aef4:	f7e6 f98c 	bl	1210 <qstr_data>
   1aef8:	6238      	str	r0, [r7, #32]
                if (s_len <= d_len && strncmp(s_start, d_str, s_len) == 0) {
   1aefa:	693b      	ldr	r3, [r7, #16]
   1aefc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1aefe:	429a      	cmp	r2, r3
   1af00:	d849      	bhi.n	1af96 <mp_repl_autocomplete+0x2aa>
   1af02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1af04:	6a39      	ldr	r1, [r7, #32]
   1af06:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1af08:	f001 f96a 	bl	1c1e0 <strncmp>
   1af0c:	4603      	mov	r3, r0
   1af0e:	2b00      	cmp	r3, #0
   1af10:	d141      	bne.n	1af96 <mp_repl_autocomplete+0x2aa>
                    mp_load_method_protected(obj, q, dest, true);
   1af12:	f107 0218 	add.w	r2, r7, #24
   1af16:	2301      	movs	r3, #1
   1af18:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1af1a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   1af1c:	f7f1 fcb4 	bl	c888 <mp_load_method_protected>
                    if (dest[0] != MP_OBJ_NULL) {
   1af20:	69bb      	ldr	r3, [r7, #24]
   1af22:	2b00      	cmp	r3, #0
   1af24:	d037      	beq.n	1af96 <mp_repl_autocomplete+0x2aa>
                        int gap = (line_len + WORD_SLOT_LEN - 1) / WORD_SLOT_LEN * WORD_SLOT_LEN - line_len;
   1af26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1af28:	330f      	adds	r3, #15
   1af2a:	2b00      	cmp	r3, #0
   1af2c:	da00      	bge.n	1af30 <mp_repl_autocomplete+0x244>
   1af2e:	330f      	adds	r3, #15
   1af30:	111b      	asrs	r3, r3, #4
   1af32:	011a      	lsls	r2, r3, #4
   1af34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1af36:	1ad3      	subs	r3, r2, r3
   1af38:	647b      	str	r3, [r7, #68]	; 0x44
                        if (gap < 2) {
   1af3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1af3c:	2b01      	cmp	r3, #1
   1af3e:	dc02      	bgt.n	1af46 <mp_repl_autocomplete+0x25a>
                            gap += WORD_SLOT_LEN;
   1af40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1af42:	3310      	adds	r3, #16
   1af44:	647b      	str	r3, [r7, #68]	; 0x44
                        }
                        if (line_len + gap + d_len <= MAX_LINE_LEN) {
   1af46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1af48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1af4a:	4413      	add	r3, r2
   1af4c:	461a      	mov	r2, r3
   1af4e:	693b      	ldr	r3, [r7, #16]
   1af50:	4413      	add	r3, r2
   1af52:	2b40      	cmp	r3, #64	; 0x40
   1af54:	d818      	bhi.n	1af88 <mp_repl_autocomplete+0x29c>
                            // TODO optimise printing of gap?
                            for (int j = 0; j < gap; ++j) {
   1af56:	2300      	movs	r3, #0
   1af58:	643b      	str	r3, [r7, #64]	; 0x40
   1af5a:	e006      	b.n	1af6a <mp_repl_autocomplete+0x27e>
                                mp_print_str(print, " ");
   1af5c:	4919      	ldr	r1, [pc, #100]	; (1afc4 <mp_repl_autocomplete+0x2d8>)
   1af5e:	6878      	ldr	r0, [r7, #4]
   1af60:	f7e6 fc8c 	bl	187c <mp_print_str>
                            for (int j = 0; j < gap; ++j) {
   1af64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1af66:	3301      	adds	r3, #1
   1af68:	643b      	str	r3, [r7, #64]	; 0x40
   1af6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1af6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1af6e:	429a      	cmp	r2, r3
   1af70:	dbf4      	blt.n	1af5c <mp_repl_autocomplete+0x270>
                            }
                            mp_print_str(print, d_str);
   1af72:	6a39      	ldr	r1, [r7, #32]
   1af74:	6878      	ldr	r0, [r7, #4]
   1af76:	f7e6 fc81 	bl	187c <mp_print_str>
                            line_len += gap + d_len;
   1af7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1af7c:	693b      	ldr	r3, [r7, #16]
   1af7e:	441a      	add	r2, r3
   1af80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1af82:	4413      	add	r3, r2
   1af84:	64fb      	str	r3, [r7, #76]	; 0x4c
   1af86:	e006      	b.n	1af96 <mp_repl_autocomplete+0x2aa>
                        } else {
                            mp_printf(print, "\n%s", d_str);
   1af88:	6a3a      	ldr	r2, [r7, #32]
   1af8a:	490f      	ldr	r1, [pc, #60]	; (1afc8 <mp_repl_autocomplete+0x2dc>)
   1af8c:	6878      	ldr	r0, [r7, #4]
   1af8e:	f7e6 ff89 	bl	1ea4 <mp_printf>
                            line_len = d_len;
   1af92:	693b      	ldr	r3, [r7, #16]
   1af94:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (qstr q = q_first; q <= q_last; ++q) {
   1af96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1af98:	3301      	adds	r3, #1
   1af9a:	64bb      	str	r3, [r7, #72]	; 0x48
   1af9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1af9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1afa0:	429a      	cmp	r2, r3
   1afa2:	d9a3      	bls.n	1aeec <mp_repl_autocomplete+0x200>
                        }
                    }
                }
            }
            mp_print_str(print, "\n");
   1afa4:	4909      	ldr	r1, [pc, #36]	; (1afcc <mp_repl_autocomplete+0x2e0>)
   1afa6:	6878      	ldr	r0, [r7, #4]
   1afa8:	f7e6 fc68 	bl	187c <mp_print_str>

            return (size_t)(-1); // indicate many matches
   1afac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        }
    }
}
   1afb0:	4618      	mov	r0, r3
   1afb2:	3770      	adds	r7, #112	; 0x70
   1afb4:	46bd      	mov	sp, r7
   1afb6:	bd80      	pop	{r7, pc}
   1afb8:	20000a2c 	.word	0x20000a2c
   1afbc:	0001f63c 	.word	0x0001f63c
   1afc0:	00022d30 	.word	0x00022d30
   1afc4:	00022d24 	.word	0x00022d24
   1afc8:	00022d28 	.word	0x00022d28
   1afcc:	00022d2c 	.word	0x00022d2c

0001afd0 <mp_small_int_mul_overflow>:
 * THE SOFTWARE.
 */

#include "py/smallint.h"

bool mp_small_int_mul_overflow(mp_int_t x, mp_int_t y) {
   1afd0:	b480      	push	{r7}
   1afd2:	b083      	sub	sp, #12
   1afd4:	af00      	add	r7, sp, #0
   1afd6:	6078      	str	r0, [r7, #4]
   1afd8:	6039      	str	r1, [r7, #0]
    // Check for multiply overflow; see CERT INT32-C
    if (x > 0) { // x is positive
   1afda:	687b      	ldr	r3, [r7, #4]
   1afdc:	2b00      	cmp	r3, #0
   1afde:	dd16      	ble.n	1b00e <mp_small_int_mul_overflow+0x3e>
        if (y > 0) { // x and y are positive
   1afe0:	683b      	ldr	r3, [r7, #0]
   1afe2:	2b00      	cmp	r3, #0
   1afe4:	dd09      	ble.n	1affa <mp_small_int_mul_overflow+0x2a>
            if (x > (MP_SMALL_INT_MAX / y)) {
   1afe6:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
   1afea:	683b      	ldr	r3, [r7, #0]
   1afec:	fb92 f2f3 	sdiv	r2, r2, r3
   1aff0:	687b      	ldr	r3, [r7, #4]
   1aff2:	429a      	cmp	r2, r3
   1aff4:	da25      	bge.n	1b042 <mp_small_int_mul_overflow+0x72>
                return true;
   1aff6:	2301      	movs	r3, #1
   1aff8:	e024      	b.n	1b044 <mp_small_int_mul_overflow+0x74>
            }
        } else { // x positive, y nonpositive
            if (y < (MP_SMALL_INT_MIN / x)) {
   1affa:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   1affe:	687b      	ldr	r3, [r7, #4]
   1b000:	fb92 f2f3 	sdiv	r2, r2, r3
   1b004:	683b      	ldr	r3, [r7, #0]
   1b006:	429a      	cmp	r2, r3
   1b008:	dd1b      	ble.n	1b042 <mp_small_int_mul_overflow+0x72>
                return true;
   1b00a:	2301      	movs	r3, #1
   1b00c:	e01a      	b.n	1b044 <mp_small_int_mul_overflow+0x74>
            }
        } // x positive, y nonpositive
    } else { // x is nonpositive
        if (y > 0) { // x is nonpositive, y is positive
   1b00e:	683b      	ldr	r3, [r7, #0]
   1b010:	2b00      	cmp	r3, #0
   1b012:	dd09      	ble.n	1b028 <mp_small_int_mul_overflow+0x58>
            if (x < (MP_SMALL_INT_MIN / y)) {
   1b014:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   1b018:	683b      	ldr	r3, [r7, #0]
   1b01a:	fb92 f2f3 	sdiv	r2, r2, r3
   1b01e:	687b      	ldr	r3, [r7, #4]
   1b020:	429a      	cmp	r2, r3
   1b022:	dd0e      	ble.n	1b042 <mp_small_int_mul_overflow+0x72>
                return true;
   1b024:	2301      	movs	r3, #1
   1b026:	e00d      	b.n	1b044 <mp_small_int_mul_overflow+0x74>
            }
        } else { // x and y are nonpositive
            if (x != 0 && y < (MP_SMALL_INT_MAX / x)) {
   1b028:	687b      	ldr	r3, [r7, #4]
   1b02a:	2b00      	cmp	r3, #0
   1b02c:	d009      	beq.n	1b042 <mp_small_int_mul_overflow+0x72>
   1b02e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
   1b032:	687b      	ldr	r3, [r7, #4]
   1b034:	fb92 f2f3 	sdiv	r2, r2, r3
   1b038:	683b      	ldr	r3, [r7, #0]
   1b03a:	429a      	cmp	r2, r3
   1b03c:	dd01      	ble.n	1b042 <mp_small_int_mul_overflow+0x72>
                return true;
   1b03e:	2301      	movs	r3, #1
   1b040:	e000      	b.n	1b044 <mp_small_int_mul_overflow+0x74>
            }
        } // End if x and y are nonpositive
    } // End if x is nonpositive
    return false;
   1b042:	2300      	movs	r3, #0
}
   1b044:	4618      	mov	r0, r3
   1b046:	370c      	adds	r7, #12
   1b048:	46bd      	mov	sp, r7
   1b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b04e:	4770      	bx	lr

0001b050 <mp_small_int_modulo>:

mp_int_t mp_small_int_modulo(mp_int_t dividend, mp_int_t divisor) {
   1b050:	b480      	push	{r7}
   1b052:	b083      	sub	sp, #12
   1b054:	af00      	add	r7, sp, #0
   1b056:	6078      	str	r0, [r7, #4]
   1b058:	6039      	str	r1, [r7, #0]
    // Python specs require that mod has same sign as second operand
    dividend %= divisor;
   1b05a:	687b      	ldr	r3, [r7, #4]
   1b05c:	683a      	ldr	r2, [r7, #0]
   1b05e:	fb93 f2f2 	sdiv	r2, r3, r2
   1b062:	6839      	ldr	r1, [r7, #0]
   1b064:	fb01 f202 	mul.w	r2, r1, r2
   1b068:	1a9b      	subs	r3, r3, r2
   1b06a:	607b      	str	r3, [r7, #4]
    if ((dividend < 0 && divisor > 0) || (dividend > 0 && divisor < 0)) {
   1b06c:	687b      	ldr	r3, [r7, #4]
   1b06e:	2b00      	cmp	r3, #0
   1b070:	da02      	bge.n	1b078 <mp_small_int_modulo+0x28>
   1b072:	683b      	ldr	r3, [r7, #0]
   1b074:	2b00      	cmp	r3, #0
   1b076:	dc05      	bgt.n	1b084 <mp_small_int_modulo+0x34>
   1b078:	687b      	ldr	r3, [r7, #4]
   1b07a:	2b00      	cmp	r3, #0
   1b07c:	dd06      	ble.n	1b08c <mp_small_int_modulo+0x3c>
   1b07e:	683b      	ldr	r3, [r7, #0]
   1b080:	2b00      	cmp	r3, #0
   1b082:	da03      	bge.n	1b08c <mp_small_int_modulo+0x3c>
        dividend += divisor;
   1b084:	687a      	ldr	r2, [r7, #4]
   1b086:	683b      	ldr	r3, [r7, #0]
   1b088:	4413      	add	r3, r2
   1b08a:	607b      	str	r3, [r7, #4]
    }
    return dividend;
   1b08c:	687b      	ldr	r3, [r7, #4]
}
   1b08e:	4618      	mov	r0, r3
   1b090:	370c      	adds	r7, #12
   1b092:	46bd      	mov	sp, r7
   1b094:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b098:	4770      	bx	lr
   1b09a:	bf00      	nop

0001b09c <mp_small_int_floor_divide>:

mp_int_t mp_small_int_floor_divide(mp_int_t num, mp_int_t denom) {
   1b09c:	b480      	push	{r7}
   1b09e:	b083      	sub	sp, #12
   1b0a0:	af00      	add	r7, sp, #0
   1b0a2:	6078      	str	r0, [r7, #4]
   1b0a4:	6039      	str	r1, [r7, #0]
    if (num >= 0) {
   1b0a6:	687b      	ldr	r3, [r7, #4]
   1b0a8:	2b00      	cmp	r3, #0
   1b0aa:	db08      	blt.n	1b0be <mp_small_int_floor_divide+0x22>
        if (denom < 0) {
   1b0ac:	683b      	ldr	r3, [r7, #0]
   1b0ae:	2b00      	cmp	r3, #0
   1b0b0:	da0e      	bge.n	1b0d0 <mp_small_int_floor_divide+0x34>
            num += -denom - 1;
   1b0b2:	683b      	ldr	r3, [r7, #0]
   1b0b4:	43db      	mvns	r3, r3
   1b0b6:	687a      	ldr	r2, [r7, #4]
   1b0b8:	4413      	add	r3, r2
   1b0ba:	607b      	str	r3, [r7, #4]
   1b0bc:	e008      	b.n	1b0d0 <mp_small_int_floor_divide+0x34>
        }
    } else {
        if (denom >= 0) {
   1b0be:	683b      	ldr	r3, [r7, #0]
   1b0c0:	2b00      	cmp	r3, #0
   1b0c2:	db05      	blt.n	1b0d0 <mp_small_int_floor_divide+0x34>
            num += -denom + 1;
   1b0c4:	683b      	ldr	r3, [r7, #0]
   1b0c6:	f1c3 0301 	rsb	r3, r3, #1
   1b0ca:	687a      	ldr	r2, [r7, #4]
   1b0cc:	4413      	add	r3, r2
   1b0ce:	607b      	str	r3, [r7, #4]
        }
    }
    return num / denom;
   1b0d0:	687a      	ldr	r2, [r7, #4]
   1b0d2:	683b      	ldr	r3, [r7, #0]
   1b0d4:	fb92 f3f3 	sdiv	r3, r2, r3
}
   1b0d8:	4618      	mov	r0, r3
   1b0da:	370c      	adds	r7, #12
   1b0dc:	46bd      	mov	sp, r7
   1b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b0e2:	4770      	bx	lr

0001b0e4 <mp_find_frozen_mpy>:
#include "py/emitglue.h"

extern const char mp_frozen_mpy_names[];
extern const mp_raw_code_t *const mp_frozen_mpy_content[];

STATIC const mp_raw_code_t *mp_find_frozen_mpy(const char *str, size_t len) {
   1b0e4:	b580      	push	{r7, lr}
   1b0e6:	b086      	sub	sp, #24
   1b0e8:	af00      	add	r7, sp, #0
   1b0ea:	6078      	str	r0, [r7, #4]
   1b0ec:	6039      	str	r1, [r7, #0]
    const char *name = mp_frozen_mpy_names;
   1b0ee:	4b15      	ldr	r3, [pc, #84]	; (1b144 <mp_find_frozen_mpy+0x60>)
   1b0f0:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; *name != 0; i++) {
   1b0f2:	2300      	movs	r3, #0
   1b0f4:	613b      	str	r3, [r7, #16]
   1b0f6:	e01c      	b.n	1b132 <mp_find_frozen_mpy+0x4e>
        size_t l = strlen(name);
   1b0f8:	6978      	ldr	r0, [r7, #20]
   1b0fa:	f001 f81d 	bl	1c138 <strlen>
   1b0fe:	60f8      	str	r0, [r7, #12]
        if (l == len && !memcmp(str, name, l)) {
   1b100:	68fa      	ldr	r2, [r7, #12]
   1b102:	683b      	ldr	r3, [r7, #0]
   1b104:	429a      	cmp	r2, r3
   1b106:	d10c      	bne.n	1b122 <mp_find_frozen_mpy+0x3e>
   1b108:	68fa      	ldr	r2, [r7, #12]
   1b10a:	6979      	ldr	r1, [r7, #20]
   1b10c:	6878      	ldr	r0, [r7, #4]
   1b10e:	f000 ffc1 	bl	1c094 <memcmp>
   1b112:	4603      	mov	r3, r0
   1b114:	2b00      	cmp	r3, #0
   1b116:	d104      	bne.n	1b122 <mp_find_frozen_mpy+0x3e>
            return mp_frozen_mpy_content[i];
   1b118:	4a0b      	ldr	r2, [pc, #44]	; (1b148 <mp_find_frozen_mpy+0x64>)
   1b11a:	693b      	ldr	r3, [r7, #16]
   1b11c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1b120:	e00c      	b.n	1b13c <mp_find_frozen_mpy+0x58>
        }
        name += l + 1;
   1b122:	68fb      	ldr	r3, [r7, #12]
   1b124:	3301      	adds	r3, #1
   1b126:	697a      	ldr	r2, [r7, #20]
   1b128:	4413      	add	r3, r2
   1b12a:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; *name != 0; i++) {
   1b12c:	693b      	ldr	r3, [r7, #16]
   1b12e:	3301      	adds	r3, #1
   1b130:	613b      	str	r3, [r7, #16]
   1b132:	697b      	ldr	r3, [r7, #20]
   1b134:	781b      	ldrb	r3, [r3, #0]
   1b136:	2b00      	cmp	r3, #0
   1b138:	d1de      	bne.n	1b0f8 <mp_find_frozen_mpy+0x14>
    }
    return NULL;
   1b13a:	2300      	movs	r3, #0
}
   1b13c:	4618      	mov	r0, r3
   1b13e:	3718      	adds	r7, #24
   1b140:	46bd      	mov	sp, r7
   1b142:	bd80      	pop	{r7, pc}
   1b144:	00023020 	.word	0x00023020
   1b148:	00023030 	.word	0x00023030

0001b14c <mp_frozen_stat_helper>:

#endif

#if MICROPY_MODULE_FROZEN

STATIC mp_import_stat_t mp_frozen_stat_helper(const char *name, const char *str) {
   1b14c:	b580      	push	{r7, lr}
   1b14e:	b086      	sub	sp, #24
   1b150:	af00      	add	r7, sp, #0
   1b152:	6078      	str	r0, [r7, #4]
   1b154:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
   1b156:	6838      	ldr	r0, [r7, #0]
   1b158:	f000 ffee 	bl	1c138 <strlen>
   1b15c:	6138      	str	r0, [r7, #16]

    for (int i = 0; *name != 0; i++) {
   1b15e:	2300      	movs	r3, #0
   1b160:	617b      	str	r3, [r7, #20]
   1b162:	e027      	b.n	1b1b4 <mp_frozen_stat_helper+0x68>
        size_t l = strlen(name);
   1b164:	6878      	ldr	r0, [r7, #4]
   1b166:	f000 ffe7 	bl	1c138 <strlen>
   1b16a:	60f8      	str	r0, [r7, #12]
        if (l >= len && !memcmp(str, name, len)) {
   1b16c:	68fa      	ldr	r2, [r7, #12]
   1b16e:	693b      	ldr	r3, [r7, #16]
   1b170:	429a      	cmp	r2, r3
   1b172:	d317      	bcc.n	1b1a4 <mp_frozen_stat_helper+0x58>
   1b174:	693a      	ldr	r2, [r7, #16]
   1b176:	6879      	ldr	r1, [r7, #4]
   1b178:	6838      	ldr	r0, [r7, #0]
   1b17a:	f000 ff8b 	bl	1c094 <memcmp>
   1b17e:	4603      	mov	r3, r0
   1b180:	2b00      	cmp	r3, #0
   1b182:	d10f      	bne.n	1b1a4 <mp_frozen_stat_helper+0x58>
            if (name[len] == 0) {
   1b184:	687a      	ldr	r2, [r7, #4]
   1b186:	693b      	ldr	r3, [r7, #16]
   1b188:	4413      	add	r3, r2
   1b18a:	781b      	ldrb	r3, [r3, #0]
   1b18c:	2b00      	cmp	r3, #0
   1b18e:	d101      	bne.n	1b194 <mp_frozen_stat_helper+0x48>
                return MP_IMPORT_STAT_FILE;
   1b190:	2302      	movs	r3, #2
   1b192:	e014      	b.n	1b1be <mp_frozen_stat_helper+0x72>
            } else if (name[len] == '/') {
   1b194:	687a      	ldr	r2, [r7, #4]
   1b196:	693b      	ldr	r3, [r7, #16]
   1b198:	4413      	add	r3, r2
   1b19a:	781b      	ldrb	r3, [r3, #0]
   1b19c:	2b2f      	cmp	r3, #47	; 0x2f
   1b19e:	d101      	bne.n	1b1a4 <mp_frozen_stat_helper+0x58>
                return MP_IMPORT_STAT_DIR;
   1b1a0:	2301      	movs	r3, #1
   1b1a2:	e00c      	b.n	1b1be <mp_frozen_stat_helper+0x72>
            }
        }
        name += l + 1;
   1b1a4:	68fb      	ldr	r3, [r7, #12]
   1b1a6:	3301      	adds	r3, #1
   1b1a8:	687a      	ldr	r2, [r7, #4]
   1b1aa:	4413      	add	r3, r2
   1b1ac:	607b      	str	r3, [r7, #4]
    for (int i = 0; *name != 0; i++) {
   1b1ae:	697b      	ldr	r3, [r7, #20]
   1b1b0:	3301      	adds	r3, #1
   1b1b2:	617b      	str	r3, [r7, #20]
   1b1b4:	687b      	ldr	r3, [r7, #4]
   1b1b6:	781b      	ldrb	r3, [r3, #0]
   1b1b8:	2b00      	cmp	r3, #0
   1b1ba:	d1d3      	bne.n	1b164 <mp_frozen_stat_helper+0x18>
    }
    return MP_IMPORT_STAT_NO_EXIST;
   1b1bc:	2300      	movs	r3, #0
}
   1b1be:	4618      	mov	r0, r3
   1b1c0:	3718      	adds	r7, #24
   1b1c2:	46bd      	mov	sp, r7
   1b1c4:	bd80      	pop	{r7, pc}
   1b1c6:	bf00      	nop

0001b1c8 <mp_frozen_stat>:

mp_import_stat_t mp_frozen_stat(const char *str) {
   1b1c8:	b580      	push	{r7, lr}
   1b1ca:	b084      	sub	sp, #16
   1b1cc:	af00      	add	r7, sp, #0
   1b1ce:	6078      	str	r0, [r7, #4]
        return stat;
    }
    #endif

    #if MICROPY_MODULE_FROZEN_MPY
    stat = mp_frozen_stat_helper(mp_frozen_mpy_names, str);
   1b1d0:	6879      	ldr	r1, [r7, #4]
   1b1d2:	4807      	ldr	r0, [pc, #28]	; (1b1f0 <mp_frozen_stat+0x28>)
   1b1d4:	f7ff ffba 	bl	1b14c <mp_frozen_stat_helper>
   1b1d8:	60f8      	str	r0, [r7, #12]
    if (stat != MP_IMPORT_STAT_NO_EXIST) {
   1b1da:	68fb      	ldr	r3, [r7, #12]
   1b1dc:	2b00      	cmp	r3, #0
   1b1de:	d001      	beq.n	1b1e4 <mp_frozen_stat+0x1c>
        return stat;
   1b1e0:	68fb      	ldr	r3, [r7, #12]
   1b1e2:	e000      	b.n	1b1e6 <mp_frozen_stat+0x1e>
    }
    #endif

    return MP_IMPORT_STAT_NO_EXIST;
   1b1e4:	2300      	movs	r3, #0
}
   1b1e6:	4618      	mov	r0, r3
   1b1e8:	3710      	adds	r7, #16
   1b1ea:	46bd      	mov	sp, r7
   1b1ec:	bd80      	pop	{r7, pc}
   1b1ee:	bf00      	nop
   1b1f0:	00023020 	.word	0x00023020

0001b1f4 <mp_find_frozen_module>:

int mp_find_frozen_module(const char *str, size_t len, void **data) {
   1b1f4:	b580      	push	{r7, lr}
   1b1f6:	b086      	sub	sp, #24
   1b1f8:	af00      	add	r7, sp, #0
   1b1fa:	60f8      	str	r0, [r7, #12]
   1b1fc:	60b9      	str	r1, [r7, #8]
   1b1fe:	607a      	str	r2, [r7, #4]
        *data = lex;
        return MP_FROZEN_STR;
    }
    #endif
    #if MICROPY_MODULE_FROZEN_MPY
    const mp_raw_code_t *rc = mp_find_frozen_mpy(str, len);
   1b200:	68b9      	ldr	r1, [r7, #8]
   1b202:	68f8      	ldr	r0, [r7, #12]
   1b204:	f7ff ff6e 	bl	1b0e4 <mp_find_frozen_mpy>
   1b208:	6178      	str	r0, [r7, #20]
    if (rc != NULL) {
   1b20a:	697b      	ldr	r3, [r7, #20]
   1b20c:	2b00      	cmp	r3, #0
   1b20e:	d004      	beq.n	1b21a <mp_find_frozen_module+0x26>
        *data = (void*)rc;
   1b210:	687b      	ldr	r3, [r7, #4]
   1b212:	697a      	ldr	r2, [r7, #20]
   1b214:	601a      	str	r2, [r3, #0]
        return MP_FROZEN_MPY;
   1b216:	2302      	movs	r3, #2
   1b218:	e000      	b.n	1b21c <mp_find_frozen_module+0x28>
    }
    #endif
    return MP_FROZEN_NONE;
   1b21a:	2300      	movs	r3, #0
}
   1b21c:	4618      	mov	r0, r3
   1b21e:	3718      	adds	r7, #24
   1b220:	46bd      	mov	sp, r7
   1b222:	bd80      	pop	{r7, pc}

0001b224 <do_str>:
#include "py/gc.h"
#include "py/mperrno.h"
#include "lib/utils/pyexec.h"

#if MICROPY_ENABLE_COMPILER
void do_str(const char *src, mp_parse_input_kind_t input_kind) {
   1b224:	b580      	push	{r7, lr}
   1b226:	b094      	sub	sp, #80	; 0x50
   1b228:	af00      	add	r7, sp, #0
   1b22a:	6078      	str	r0, [r7, #4]
   1b22c:	6039      	str	r1, [r7, #0]
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   1b22e:	f107 0314 	add.w	r3, r7, #20
   1b232:	4618      	mov	r0, r3
   1b234:	f7e5 f842 	bl	2bc <nlr_push>
   1b238:	4603      	mov	r3, r0
   1b23a:	2b00      	cmp	r3, #0
   1b23c:	d121      	bne.n	1b282 <do_str+0x5e>
        mp_lexer_t *lex = mp_lexer_new_from_str_len(MP_QSTR__lt_stdin_gt_, src, strlen(src), 0);
   1b23e:	6878      	ldr	r0, [r7, #4]
   1b240:	f000 ff7a 	bl	1c138 <strlen>
   1b244:	4602      	mov	r2, r0
   1b246:	2300      	movs	r3, #0
   1b248:	6879      	ldr	r1, [r7, #4]
   1b24a:	2036      	movs	r0, #54	; 0x36
   1b24c:	f7e8 fa6a 	bl	3724 <mp_lexer_new_from_str_len>
   1b250:	64f8      	str	r0, [r7, #76]	; 0x4c
        qstr source_name = lex->source_name;
   1b252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b254:	681b      	ldr	r3, [r3, #0]
   1b256:	64bb      	str	r3, [r7, #72]	; 0x48
        mp_parse_tree_t parse_tree = mp_parse(lex, input_kind);
   1b258:	f107 030c 	add.w	r3, r7, #12
   1b25c:	683a      	ldr	r2, [r7, #0]
   1b25e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1b260:	4618      	mov	r0, r3
   1b262:	f7e9 f85b 	bl	431c <mp_parse>
        mp_obj_t module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, true);
   1b266:	f107 000c 	add.w	r0, r7, #12
   1b26a:	2301      	movs	r3, #1
   1b26c:	2200      	movs	r2, #0
   1b26e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1b270:	f7ee fade 	bl	9830 <mp_compile>
   1b274:	6478      	str	r0, [r7, #68]	; 0x44
        mp_call_function_0(module_fun);
   1b276:	6c78      	ldr	r0, [r7, #68]	; 0x44
   1b278:	f7f0 fdb8 	bl	bdec <mp_call_function_0>
        nlr_pop();
   1b27c:	f7e5 f80c 	bl	298 <nlr_pop>
    } else {
        // uncaught exception
        mp_obj_print_exception(&mp_plat_print, (mp_obj_t)nlr.ret_val);
    }
}
   1b280:	e004      	b.n	1b28c <do_str+0x68>
        mp_obj_print_exception(&mp_plat_print, (mp_obj_t)nlr.ret_val);
   1b282:	69bb      	ldr	r3, [r7, #24]
   1b284:	4619      	mov	r1, r3
   1b286:	4803      	ldr	r0, [pc, #12]	; (1b294 <do_str+0x70>)
   1b288:	f7f2 fb32 	bl	d8f0 <mp_obj_print_exception>
}
   1b28c:	bf00      	nop
   1b28e:	3750      	adds	r7, #80	; 0x50
   1b290:	46bd      	mov	sp, r7
   1b292:	bd80      	pop	{r7, pc}
   1b294:	0001d82c 	.word	0x0001d82c

0001b298 <main>:
static char *stack_top;
#if MICROPY_ENABLE_GC
static char heap[2048];
#endif

int main(int argc, char **argv) {
   1b298:	b580      	push	{r7, lr}
   1b29a:	b084      	sub	sp, #16
   1b29c:	af00      	add	r7, sp, #0
   1b29e:	6078      	str	r0, [r7, #4]
   1b2a0:	6039      	str	r1, [r7, #0]
    int stack_dummy;
    stack_top = (char*)&stack_dummy;
   1b2a2:	4a0a      	ldr	r2, [pc, #40]	; (1b2cc <main+0x34>)
   1b2a4:	f107 030c 	add.w	r3, r7, #12
   1b2a8:	6013      	str	r3, [r2, #0]

    #if MICROPY_ENABLE_GC
    gc_init(heap, heap + sizeof(heap));
   1b2aa:	4b09      	ldr	r3, [pc, #36]	; (1b2d0 <main+0x38>)
   1b2ac:	4619      	mov	r1, r3
   1b2ae:	4809      	ldr	r0, [pc, #36]	; (1b2d4 <main+0x3c>)
   1b2b0:	f7e5 f94e 	bl	550 <gc_init>
    #endif
    mp_init();
   1b2b4:	f7f0 f974 	bl	b5a0 <mp_init>
        if (pyexec_event_repl_process_char(c)) {
            break;
        }
    }
    #else
    pyexec_friendly_repl();
   1b2b8:	f000 fcec 	bl	1bc94 <pyexec_friendly_repl>
    //do_str("print('hello world!', list(x+1 for x in range(10)), end='eol\\n')", MP_PARSE_SINGLE_INPUT);
    //do_str("for i in range(10):\r\n  print(i)", MP_PARSE_FILE_INPUT);
    #else
    pyexec_frozen_module("frozentest.py");
    #endif
    mp_deinit();
   1b2bc:	f7f0 f996 	bl	b5ec <mp_deinit>
    return 0;
   1b2c0:	2300      	movs	r3, #0
}
   1b2c2:	4618      	mov	r0, r3
   1b2c4:	3710      	adds	r7, #16
   1b2c6:	46bd      	mov	sp, r7
   1b2c8:	bd80      	pop	{r7, pc}
   1b2ca:	bf00      	nop
   1b2cc:	20000004 	.word	0x20000004
   1b2d0:	20000808 	.word	0x20000808
   1b2d4:	20000008 	.word	0x20000008

0001b2d8 <gc_collect>:

void gc_collect(void) {
   1b2d8:	b580      	push	{r7, lr}
   1b2da:	b082      	sub	sp, #8
   1b2dc:	af00      	add	r7, sp, #0
    // WARNING: This gc_collect implementation doesn't try to get root
    // pointers from CPU registers, and thus may function incorrectly.
    void *dummy;
    gc_collect_start();
   1b2de:	f7e5 f979 	bl	5d4 <gc_collect_start>
    gc_collect_root(&dummy, ((mp_uint_t)stack_top - (mp_uint_t)&dummy) / sizeof(mp_uint_t));
   1b2e2:	4b09      	ldr	r3, [pc, #36]	; (1b308 <gc_collect+0x30>)
   1b2e4:	681b      	ldr	r3, [r3, #0]
   1b2e6:	461a      	mov	r2, r3
   1b2e8:	1d3b      	adds	r3, r7, #4
   1b2ea:	1ad3      	subs	r3, r2, r3
   1b2ec:	089a      	lsrs	r2, r3, #2
   1b2ee:	1d3b      	adds	r3, r7, #4
   1b2f0:	4611      	mov	r1, r2
   1b2f2:	4618      	mov	r0, r3
   1b2f4:	f7e5 f9ac 	bl	650 <gc_collect_root>
    gc_collect_end();
   1b2f8:	f7e5 f9e2 	bl	6c0 <gc_collect_end>
    gc_dump_info();
   1b2fc:	f7e5 fcac 	bl	c58 <gc_dump_info>
}
   1b300:	bf00      	nop
   1b302:	3708      	adds	r7, #8
   1b304:	46bd      	mov	sp, r7
   1b306:	bd80      	pop	{r7, pc}
   1b308:	20000004 	.word	0x20000004

0001b30c <mp_lexer_new_from_file>:

mp_lexer_t *mp_lexer_new_from_file(const char *filename) {
   1b30c:	b580      	push	{r7, lr}
   1b30e:	b082      	sub	sp, #8
   1b310:	af00      	add	r7, sp, #0
   1b312:	6078      	str	r0, [r7, #4]
    mp_raise_OSError(MP_ENOENT);
   1b314:	2002      	movs	r0, #2
   1b316:	f7f1 fe6d 	bl	cff4 <mp_raise_OSError>
   1b31a:	bf00      	nop

0001b31c <mp_import_stat>:
}

mp_import_stat_t mp_import_stat(const char *path) {
   1b31c:	b480      	push	{r7}
   1b31e:	b083      	sub	sp, #12
   1b320:	af00      	add	r7, sp, #0
   1b322:	6078      	str	r0, [r7, #4]
    return MP_IMPORT_STAT_NO_EXIST;
   1b324:	2300      	movs	r3, #0
}
   1b326:	4618      	mov	r0, r3
   1b328:	370c      	adds	r7, #12
   1b32a:	46bd      	mov	sp, r7
   1b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b330:	4770      	bx	lr
   1b332:	bf00      	nop

0001b334 <mp_builtin_open>:

mp_obj_t mp_builtin_open(size_t n_args, const mp_obj_t *args, mp_map_t *kwargs) {
   1b334:	b480      	push	{r7}
   1b336:	b085      	sub	sp, #20
   1b338:	af00      	add	r7, sp, #0
   1b33a:	60f8      	str	r0, [r7, #12]
   1b33c:	60b9      	str	r1, [r7, #8]
   1b33e:	607a      	str	r2, [r7, #4]
    return mp_const_none;
   1b340:	4b03      	ldr	r3, [pc, #12]	; (1b350 <mp_builtin_open+0x1c>)
}
   1b342:	4618      	mov	r0, r3
   1b344:	3714      	adds	r7, #20
   1b346:	46bd      	mov	sp, r7
   1b348:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b34c:	4770      	bx	lr
   1b34e:	bf00      	nop
   1b350:	00021534 	.word	0x00021534

0001b354 <nlr_jump_fail>:
MP_DEFINE_CONST_FUN_OBJ_KW(mp_builtin_open_obj, 1, mp_builtin_open);

void nlr_jump_fail(void *val) {
   1b354:	b480      	push	{r7}
   1b356:	b083      	sub	sp, #12
   1b358:	af00      	add	r7, sp, #0
   1b35a:	6078      	str	r0, [r7, #4]
    while (1);
   1b35c:	e7fe      	b.n	1b35c <nlr_jump_fail+0x8>
   1b35e:	bf00      	nop

0001b360 <__fatal_error>:
}

void NORETURN __fatal_error(const char *msg) {
   1b360:	b480      	push	{r7}
   1b362:	b083      	sub	sp, #12
   1b364:	af00      	add	r7, sp, #0
   1b366:	6078      	str	r0, [r7, #4]
    while (1);
   1b368:	e7fe      	b.n	1b368 <__fatal_error+0x8>
   1b36a:	bf00      	nop

0001b36c <__assert_func>:
}

#ifndef NDEBUG
void MP_WEAK __assert_func(const char *file, int line, const char *func, const char *expr) {
   1b36c:	b580      	push	{r7, lr}
   1b36e:	b084      	sub	sp, #16
   1b370:	af00      	add	r7, sp, #0
   1b372:	60f8      	str	r0, [r7, #12]
   1b374:	60b9      	str	r1, [r7, #8]
   1b376:	607a      	str	r2, [r7, #4]
   1b378:	603b      	str	r3, [r7, #0]
    printf("Assertion '%s' failed, at file %s:%d\n", expr, file, line);
   1b37a:	68bb      	ldr	r3, [r7, #8]
   1b37c:	68fa      	ldr	r2, [r7, #12]
   1b37e:	6839      	ldr	r1, [r7, #0]
   1b380:	4802      	ldr	r0, [pc, #8]	; (1b38c <__assert_func+0x20>)
   1b382:	f000 fa23 	bl	1b7cc <printf>
    __fatal_error("Assertion failed");
   1b386:	4802      	ldr	r0, [pc, #8]	; (1b390 <__assert_func+0x24>)
   1b388:	f7ff ffea 	bl	1b360 <__fatal_error>
   1b38c:	00022d44 	.word	0x00022d44
   1b390:	00022d6c 	.word	0x00022d6c

0001b394 <_start>:
//    0,
//    (uint32_t)&Default_Handler, // PendSV_Handler
//    (uint32_t)&Default_Handler, // SysTick_Handler
//};

void _start(void) {
   1b394:	b580      	push	{r7, lr}
   1b396:	af00      	add	r7, sp, #0
    // when we get here: stack is initialised, bss is clear, data is copied

    // SCB->CCR: enable 8-byte stack alignment for IRQ handlers, in accord with EABI
    *((volatile uint32_t*)0xe000ed14) |= 1 << 9;
   1b398:	4a06      	ldr	r2, [pc, #24]	; (1b3b4 <_start+0x20>)
   1b39a:	4b06      	ldr	r3, [pc, #24]	; (1b3b4 <_start+0x20>)
   1b39c:	681b      	ldr	r3, [r3, #0]
   1b39e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1b3a2:	6013      	str	r3, [r2, #0]

    // initialise the cpu and peripherals
    #if MICROPY_MIN_USE_TM4C123_MCU
    void tm4c123_init(void);
    tm4c123_init();
   1b3a4:	f000 f8c2 	bl	1b52c <tm4c123_init>
    #endif

    // now that we have a basic system up and running we can call main
    main(0, NULL);
   1b3a8:	2100      	movs	r1, #0
   1b3aa:	2000      	movs	r0, #0
   1b3ac:	f7ff ff74 	bl	1b298 <main>

    // we must not return
    for (;;) {
    }
   1b3b0:	e7fe      	b.n	1b3b0 <_start+0x1c>
   1b3b2:	bf00      	nop
   1b3b4:	e000ed14 	.word	0xe000ed14

0001b3b8 <gpio_init>:
#define GPIO_MODE_ALT (2)

#define GPIO_PULL_UP (0)
#define GPIO_PULL_DOWN (1)
#define GPIO_PULL_NONE (2)
void gpio_init(periph_gpio_t *gpio, int pin, int mode, int pull, int alt) {
   1b3b8:	b480      	push	{r7}
   1b3ba:	b085      	sub	sp, #20
   1b3bc:	af00      	add	r7, sp, #0
   1b3be:	60f8      	str	r0, [r7, #12]
   1b3c0:	60b9      	str	r1, [r7, #8]
   1b3c2:	607a      	str	r2, [r7, #4]
   1b3c4:	603b      	str	r3, [r7, #0]
    if ( pin >= 8 ) return;
   1b3c6:	68bb      	ldr	r3, [r7, #8]
   1b3c8:	2b07      	cmp	r3, #7
   1b3ca:	f300 80a8 	bgt.w	1b51e <gpio_init+0x166>
    // does not consider the locked pins, which need special treatment
    if (mode == GPIO_MODE_ALT) {
   1b3ce:	687b      	ldr	r3, [r7, #4]
   1b3d0:	2b02      	cmp	r3, #2
   1b3d2:	d129      	bne.n	1b428 <gpio_init+0x70>
        gpio->DEN |= (1 << pin);
   1b3d4:	68fb      	ldr	r3, [r7, #12]
   1b3d6:	f8d3 351c 	ldr.w	r3, [r3, #1308]	; 0x51c
   1b3da:	2101      	movs	r1, #1
   1b3dc:	68ba      	ldr	r2, [r7, #8]
   1b3de:	fa01 f202 	lsl.w	r2, r1, r2
   1b3e2:	431a      	orrs	r2, r3
   1b3e4:	68fb      	ldr	r3, [r7, #12]
   1b3e6:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
        gpio->AFSEL |= (1 << pin);
   1b3ea:	68fb      	ldr	r3, [r7, #12]
   1b3ec:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
   1b3f0:	2101      	movs	r1, #1
   1b3f2:	68ba      	ldr	r2, [r7, #8]
   1b3f4:	fa01 f202 	lsl.w	r2, r1, r2
   1b3f8:	431a      	orrs	r2, r3
   1b3fa:	68fb      	ldr	r3, [r7, #12]
   1b3fc:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
        gpio->PCTL = (gpio->PCTL & ~(0x000000F << (4 * pin))) | (alt << (4 * pin));
   1b400:	68fb      	ldr	r3, [r7, #12]
   1b402:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
   1b406:	68ba      	ldr	r2, [r7, #8]
   1b408:	0092      	lsls	r2, r2, #2
   1b40a:	210f      	movs	r1, #15
   1b40c:	fa01 f202 	lsl.w	r2, r1, r2
   1b410:	43d2      	mvns	r2, r2
   1b412:	4013      	ands	r3, r2
   1b414:	68ba      	ldr	r2, [r7, #8]
   1b416:	0092      	lsls	r2, r2, #2
   1b418:	69b9      	ldr	r1, [r7, #24]
   1b41a:	fa01 f202 	lsl.w	r2, r1, r2
   1b41e:	431a      	orrs	r2, r3
   1b420:	68fb      	ldr	r3, [r7, #12]
   1b422:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
   1b426:	e029      	b.n	1b47c <gpio_init+0xc4>
    }
    else {
        gpio->AFSEL &= ~(1 << pin);
   1b428:	68fb      	ldr	r3, [r7, #12]
   1b42a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
   1b42e:	2101      	movs	r1, #1
   1b430:	68ba      	ldr	r2, [r7, #8]
   1b432:	fa01 f202 	lsl.w	r2, r1, r2
   1b436:	43d2      	mvns	r2, r2
   1b438:	401a      	ands	r2, r3
   1b43a:	68fb      	ldr	r3, [r7, #12]
   1b43c:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
        gpio->DEN |= (1 << pin);
   1b440:	68fb      	ldr	r3, [r7, #12]
   1b442:	f8d3 351c 	ldr.w	r3, [r3, #1308]	; 0x51c
   1b446:	2101      	movs	r1, #1
   1b448:	68ba      	ldr	r2, [r7, #8]
   1b44a:	fa01 f202 	lsl.w	r2, r1, r2
   1b44e:	431a      	orrs	r2, r3
   1b450:	68fb      	ldr	r3, [r7, #12]
   1b452:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
        gpio->DIR = (gpio->DIR & ~(1 << pin)) | ((mode & 1) << pin);
   1b456:	68fb      	ldr	r3, [r7, #12]
   1b458:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1b45c:	2101      	movs	r1, #1
   1b45e:	68ba      	ldr	r2, [r7, #8]
   1b460:	fa01 f202 	lsl.w	r2, r1, r2
   1b464:	43d2      	mvns	r2, r2
   1b466:	4013      	ands	r3, r2
   1b468:	687a      	ldr	r2, [r7, #4]
   1b46a:	f002 0101 	and.w	r1, r2, #1
   1b46e:	68ba      	ldr	r2, [r7, #8]
   1b470:	fa01 f202 	lsl.w	r2, r1, r2
   1b474:	431a      	orrs	r2, r3
   1b476:	68fb      	ldr	r3, [r7, #12]
   1b478:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    }

    if (pull == GPIO_PULL_UP) { gpio->PUR = (gpio->PUR & ~(1 << pin)) | (1 << pin);}
   1b47c:	683b      	ldr	r3, [r7, #0]
   1b47e:	2b00      	cmp	r3, #0
   1b480:	d111      	bne.n	1b4a6 <gpio_init+0xee>
   1b482:	68fb      	ldr	r3, [r7, #12]
   1b484:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   1b488:	2101      	movs	r1, #1
   1b48a:	68ba      	ldr	r2, [r7, #8]
   1b48c:	fa01 f202 	lsl.w	r2, r1, r2
   1b490:	43d2      	mvns	r2, r2
   1b492:	4013      	ands	r3, r2
   1b494:	2101      	movs	r1, #1
   1b496:	68ba      	ldr	r2, [r7, #8]
   1b498:	fa01 f202 	lsl.w	r2, r1, r2
   1b49c:	431a      	orrs	r2, r3
   1b49e:	68fb      	ldr	r3, [r7, #12]
   1b4a0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   1b4a4:	e03c      	b.n	1b520 <gpio_init+0x168>
    else if (pull == GPIO_PULL_DOWN) { gpio->PDR = (gpio->PDR & ~(1 << pin)) | (1 << pin);}
   1b4a6:	683b      	ldr	r3, [r7, #0]
   1b4a8:	2b01      	cmp	r3, #1
   1b4aa:	d111      	bne.n	1b4d0 <gpio_init+0x118>
   1b4ac:	68fb      	ldr	r3, [r7, #12]
   1b4ae:	f8d3 3514 	ldr.w	r3, [r3, #1300]	; 0x514
   1b4b2:	2101      	movs	r1, #1
   1b4b4:	68ba      	ldr	r2, [r7, #8]
   1b4b6:	fa01 f202 	lsl.w	r2, r1, r2
   1b4ba:	43d2      	mvns	r2, r2
   1b4bc:	4013      	ands	r3, r2
   1b4be:	2101      	movs	r1, #1
   1b4c0:	68ba      	ldr	r2, [r7, #8]
   1b4c2:	fa01 f202 	lsl.w	r2, r1, r2
   1b4c6:	431a      	orrs	r2, r3
   1b4c8:	68fb      	ldr	r3, [r7, #12]
   1b4ca:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
   1b4ce:	e027      	b.n	1b520 <gpio_init+0x168>
    else if (pull == GPIO_PULL_NONE) {
   1b4d0:	683b      	ldr	r3, [r7, #0]
   1b4d2:	2b02      	cmp	r3, #2
   1b4d4:	d124      	bne.n	1b520 <gpio_init+0x168>
        gpio->PUR &= ~(1 << pin);
   1b4d6:	68fb      	ldr	r3, [r7, #12]
   1b4d8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   1b4dc:	2101      	movs	r1, #1
   1b4de:	68ba      	ldr	r2, [r7, #8]
   1b4e0:	fa01 f202 	lsl.w	r2, r1, r2
   1b4e4:	43d2      	mvns	r2, r2
   1b4e6:	401a      	ands	r2, r3
   1b4e8:	68fb      	ldr	r3, [r7, #12]
   1b4ea:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        gpio->PDR &= ~(1 << pin);
   1b4ee:	68fb      	ldr	r3, [r7, #12]
   1b4f0:	f8d3 3514 	ldr.w	r3, [r3, #1300]	; 0x514
   1b4f4:	2101      	movs	r1, #1
   1b4f6:	68ba      	ldr	r2, [r7, #8]
   1b4f8:	fa01 f202 	lsl.w	r2, r1, r2
   1b4fc:	43d2      	mvns	r2, r2
   1b4fe:	401a      	ands	r2, r3
   1b500:	68fb      	ldr	r3, [r7, #12]
   1b502:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
        gpio->ODR &= (1 << pin);
   1b506:	68fb      	ldr	r3, [r7, #12]
   1b508:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
   1b50c:	2101      	movs	r1, #1
   1b50e:	68ba      	ldr	r2, [r7, #8]
   1b510:	fa01 f202 	lsl.w	r2, r1, r2
   1b514:	401a      	ands	r2, r3
   1b516:	68fb      	ldr	r3, [r7, #12]
   1b518:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
   1b51c:	e000      	b.n	1b520 <gpio_init+0x168>
    if ( pin >= 8 ) return;
   1b51e:	bf00      	nop
    }
}
   1b520:	3714      	adds	r7, #20
   1b522:	46bd      	mov	sp, r7
   1b524:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b528:	4770      	bx	lr
   1b52a:	bf00      	nop

0001b52c <tm4c123_init>:
// https://stackoverflow.com/questions/257418/do-while-0-what-is-it-good-for#257425
#define gpio_set(gpio, pin, value) do { gpio->DATA = (gpio->DATA & ~(1 << pin)) | (value << pin); } while (0)
#define gpio_low(gpio, pin) gpio_set(gpio, pin, 0)
#define gpio_high(gpio, pin) gpio_set(gpio, pin, 1)

void tm4c123_init(void) {
   1b52c:	b580      	push	{r7, lr}
   1b52e:	b082      	sub	sp, #8
   1b530:	af02      	add	r7, sp, #8
    // basic MCU config

    // set system clock to 80MHz
    SYSCTL->RCC |= (uint32_t)0x00000800;   // set BYPASS bit
   1b532:	4a64      	ldr	r2, [pc, #400]	; (1b6c4 <tm4c123_init+0x198>)
   1b534:	4b63      	ldr	r3, [pc, #396]	; (1b6c4 <tm4c123_init+0x198>)
   1b536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b538:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1b53c:	6613      	str	r3, [r2, #96]	; 0x60
    SYSCTL->RCC2 |= (uint32_t)0xC0000800;  // set BYPASS2 bit, DIV400 and USERCC2
   1b53e:	4a61      	ldr	r2, [pc, #388]	; (1b6c4 <tm4c123_init+0x198>)
   1b540:	4b60      	ldr	r3, [pc, #384]	; (1b6c4 <tm4c123_init+0x198>)
   1b542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b544:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   1b548:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1b54c:	6713      	str	r3, [r2, #112]	; 0x70
    SYSCTL->RCC &= (uint32_t)0xFFBFFFFF;   // clear USESYSDIV bit
   1b54e:	4a5d      	ldr	r2, [pc, #372]	; (1b6c4 <tm4c123_init+0x198>)
   1b550:	4b5c      	ldr	r3, [pc, #368]	; (1b6c4 <tm4c123_init+0x198>)
   1b552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b554:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   1b558:	6613      	str	r3, [r2, #96]	; 0x60
    SYSCTL->RCC = (SYSCTL->RCC & (uint32_t)0xFFFFF83F) | (uint32_t)0x00000B70;    // XTAL to 16 MHz
   1b55a:	4a5a      	ldr	r2, [pc, #360]	; (1b6c4 <tm4c123_init+0x198>)
   1b55c:	4b59      	ldr	r3, [pc, #356]	; (1b6c4 <tm4c123_init+0x198>)
   1b55e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b560:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   1b564:	f443 6337 	orr.w	r3, r3, #2928	; 0xb70
   1b568:	6613      	str	r3, [r2, #96]	; 0x60
    SYSCTL->MISC &= 0xFFFFFFBF;            // clear PLLLRIS bit
   1b56a:	4a56      	ldr	r2, [pc, #344]	; (1b6c4 <tm4c123_init+0x198>)
   1b56c:	4b55      	ldr	r3, [pc, #340]	; (1b6c4 <tm4c123_init+0x198>)
   1b56e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1b570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1b574:	6593      	str	r3, [r2, #88]	; 0x58
    SYSCTL->RCC2 &= (uint32_t)0xFFFFDFFF;  // clear PWRDN2 Bit to enable PLL
   1b576:	4a53      	ldr	r2, [pc, #332]	; (1b6c4 <tm4c123_init+0x198>)
   1b578:	4b52      	ldr	r3, [pc, #328]	; (1b6c4 <tm4c123_init+0x198>)
   1b57a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b57c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1b580:	6713      	str	r3, [r2, #112]	; 0x70
    SYSCTL->RCC2 = (SYSCTL->RCC2 & (uint32_t)0xE03FFFFF) | (uint32_t)0x01000000;  // Set SYSDIV2 to 0x2 for 80MHz
   1b582:	4a50      	ldr	r2, [pc, #320]	; (1b6c4 <tm4c123_init+0x198>)
   1b584:	4b4f      	ldr	r3, [pc, #316]	; (1b6c4 <tm4c123_init+0x198>)
   1b586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b588:	f023 53fe 	bic.w	r3, r3, #532676608	; 0x1fc00000
   1b58c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1b590:	6713      	str	r3, [r2, #112]	; 0x70
    SYSCTL->RCC |= (uint32_t)0x00400000;   // set USESYSDIV bit
   1b592:	4a4c      	ldr	r2, [pc, #304]	; (1b6c4 <tm4c123_init+0x198>)
   1b594:	4b4b      	ldr	r3, [pc, #300]	; (1b6c4 <tm4c123_init+0x198>)
   1b596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1b598:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   1b59c:	6613      	str	r3, [r2, #96]	; 0x60
    while(!(SYSCTL->RIS & 0x00000040)){};  // wait for Pll to lock, PLLLRIS bit
   1b59e:	bf00      	nop
   1b5a0:	4b48      	ldr	r3, [pc, #288]	; (1b6c4 <tm4c123_init+0x198>)
   1b5a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1b5a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1b5a8:	2b00      	cmp	r3, #0
   1b5aa:	d0f9      	beq.n	1b5a0 <tm4c123_init+0x74>
    SYSCTL->RCC2 &= 0xFFFFF7FF;            // clear BYPASS2 bit, clears BYPASS as well
   1b5ac:	4a45      	ldr	r2, [pc, #276]	; (1b6c4 <tm4c123_init+0x198>)
   1b5ae:	4b45      	ldr	r3, [pc, #276]	; (1b6c4 <tm4c123_init+0x198>)
   1b5b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   1b5b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1b5b6:	6713      	str	r3, [r2, #112]	; 0x70
    // write final configuration
    SYSCTL->RCC = (uint32_t)(0x07C00550);  // 0b0000 0 1111 1 0 0 000 000 0 0 0 10101 01 000 0
   1b5b8:	4b42      	ldr	r3, [pc, #264]	; (1b6c4 <tm4c123_init+0x198>)
   1b5ba:	4a43      	ldr	r2, [pc, #268]	; (1b6c8 <tm4c123_init+0x19c>)
   1b5bc:	661a      	str	r2, [r3, #96]	; 0x60
    SYSCTL->RCC2 = (uint32_t)(0xC1000000); // 0b 1100 0001 0000 0000 0000 0000 0000 0000
   1b5be:	4b41      	ldr	r3, [pc, #260]	; (1b6c4 <tm4c123_init+0x198>)
   1b5c0:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
   1b5c4:	671a      	str	r2, [r3, #112]	; 0x70

    // enable high performance GPIO BUS Ctl
    SYSCTL->GPIOHBCTL = 0x0000003F;
   1b5c6:	4b3f      	ldr	r3, [pc, #252]	; (1b6c4 <tm4c123_init+0x198>)
   1b5c8:	223f      	movs	r2, #63	; 0x3f
   1b5ca:	66da      	str	r2, [r3, #108]	; 0x6c

    // enable GPIO Port F
        SYSCTL->RCGCGPIO |= 0x00000020;
   1b5cc:	4a3d      	ldr	r2, [pc, #244]	; (1b6c4 <tm4c123_init+0x198>)
   1b5ce:	4b3d      	ldr	r3, [pc, #244]	; (1b6c4 <tm4c123_init+0x198>)
   1b5d0:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   1b5d4:	f043 0320 	orr.w	r3, r3, #32
   1b5d8:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    //*((volatile uint32_t*)0x400FE608) = 0x00000021;
    while( !(SYSCTL->PRGPIO & 0x00000020)){};
   1b5dc:	bf00      	nop
   1b5de:	4b39      	ldr	r3, [pc, #228]	; (1b6c4 <tm4c123_init+0x198>)
   1b5e0:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
   1b5e4:	f003 0320 	and.w	r3, r3, #32
   1b5e8:	2b00      	cmp	r3, #0
   1b5ea:	d0f8      	beq.n	1b5de <tm4c123_init+0xb2>
    //while( *((volatile uint32_t*)0x400FEA08) != 0x00000021){};

    // turn on an LED! (on pyboard it's the red one)
    gpio_init(GPIOF, 1, GPIO_MODE_OUT, GPIO_PULL_NONE, 0);
   1b5ec:	2300      	movs	r3, #0
   1b5ee:	9300      	str	r3, [sp, #0]
   1b5f0:	2302      	movs	r3, #2
   1b5f2:	2201      	movs	r2, #1
   1b5f4:	2101      	movs	r1, #1
   1b5f6:	4835      	ldr	r0, [pc, #212]	; (1b6cc <tm4c123_init+0x1a0>)
   1b5f8:	f7ff fede 	bl	1b3b8 <gpio_init>
    gpio_init(GPIOF, 2, GPIO_MODE_OUT, GPIO_PULL_NONE, 0);
   1b5fc:	2300      	movs	r3, #0
   1b5fe:	9300      	str	r3, [sp, #0]
   1b600:	2302      	movs	r3, #2
   1b602:	2201      	movs	r2, #1
   1b604:	2102      	movs	r1, #2
   1b606:	4831      	ldr	r0, [pc, #196]	; (1b6cc <tm4c123_init+0x1a0>)
   1b608:	f7ff fed6 	bl	1b3b8 <gpio_init>
    gpio_init(GPIOF, 3, GPIO_MODE_OUT, GPIO_PULL_NONE, 0);
   1b60c:	2300      	movs	r3, #0
   1b60e:	9300      	str	r3, [sp, #0]
   1b610:	2302      	movs	r3, #2
   1b612:	2201      	movs	r2, #1
   1b614:	2103      	movs	r1, #3
   1b616:	482d      	ldr	r0, [pc, #180]	; (1b6cc <tm4c123_init+0x1a0>)
   1b618:	f7ff fece 	bl	1b3b8 <gpio_init>

    gpio_high(GPIOF, 3);
   1b61c:	4a2b      	ldr	r2, [pc, #172]	; (1b6cc <tm4c123_init+0x1a0>)
   1b61e:	4b2b      	ldr	r3, [pc, #172]	; (1b6cc <tm4c123_init+0x1a0>)
   1b620:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
   1b624:	f043 0308 	orr.w	r3, r3, #8
   1b628:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
    //*((volatile uint32_t*)0x4005D3FC) = 0x00000007;

    // enable UART0 at 9600 baud (TX=A1, RX=A0)
    // enable UART0
    SYSCTL->RCGCUART = 0x00000001;
   1b62c:	4b25      	ldr	r3, [pc, #148]	; (1b6c4 <tm4c123_init+0x198>)
   1b62e:	2201      	movs	r2, #1
   1b630:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
    //*((volatile uint32_t*)0x400FE618) = 0x00000001;
    while(SYSCTL->PRUART != 0x00000001){};
   1b634:	bf00      	nop
   1b636:	4b23      	ldr	r3, [pc, #140]	; (1b6c4 <tm4c123_init+0x198>)
   1b638:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
   1b63c:	2b01      	cmp	r3, #1
   1b63e:	d1fa      	bne.n	1b636 <tm4c123_init+0x10a>
    //while( *((volatile uint32_t*)0x400FEA18) != 0x00000001){};

    // enable GPIO Port A
    SYSCTL->RCGCGPIO |= 0x00000001;
   1b640:	4a20      	ldr	r2, [pc, #128]	; (1b6c4 <tm4c123_init+0x198>)
   1b642:	4b20      	ldr	r3, [pc, #128]	; (1b6c4 <tm4c123_init+0x198>)
   1b644:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   1b648:	f043 0301 	orr.w	r3, r3, #1
   1b64c:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    while( !(SYSCTL->PRGPIO & 0x00000001)){};
   1b650:	bf00      	nop
   1b652:	4b1c      	ldr	r3, [pc, #112]	; (1b6c4 <tm4c123_init+0x198>)
   1b654:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	; 0xa08
   1b658:	f003 0301 	and.w	r3, r3, #1
   1b65c:	2b00      	cmp	r3, #0
   1b65e:	d0f8      	beq.n	1b652 <tm4c123_init+0x126>

    // GPIOA already configured for UART0 after reset
    gpio_init(GPIOA, 0, GPIO_MODE_ALT, GPIO_PULL_NONE, 1);
   1b660:	2301      	movs	r3, #1
   1b662:	9300      	str	r3, [sp, #0]
   1b664:	2302      	movs	r3, #2
   1b666:	2202      	movs	r2, #2
   1b668:	2100      	movs	r1, #0
   1b66a:	4819      	ldr	r0, [pc, #100]	; (1b6d0 <tm4c123_init+0x1a4>)
   1b66c:	f7ff fea4 	bl	1b3b8 <gpio_init>
    gpio_init(GPIOA, 1, GPIO_MODE_ALT, GPIO_PULL_NONE, 1);
   1b670:	2301      	movs	r3, #1
   1b672:	9300      	str	r3, [sp, #0]
   1b674:	2302      	movs	r3, #2
   1b676:	2202      	movs	r2, #2
   1b678:	2101      	movs	r1, #1
   1b67a:	4815      	ldr	r0, [pc, #84]	; (1b6d0 <tm4c123_init+0x1a4>)
   1b67c:	f7ff fe9c 	bl	1b3b8 <gpio_init>

    // BRD = IBRD + FRAC = UARTSysClk / (ClkDiv * BaudRate)
    // 520.8333 = 104  + 0.166 = 80MHz      / (16     * 9600    )
    // FBRD = (0.833333 * 64 + 0.5) ~ 53
    UART0->CTL &= ~0x00000001;
   1b680:	4a14      	ldr	r2, [pc, #80]	; (1b6d4 <tm4c123_init+0x1a8>)
   1b682:	4b14      	ldr	r3, [pc, #80]	; (1b6d4 <tm4c123_init+0x1a8>)
   1b684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b686:	f023 0301 	bic.w	r3, r3, #1
   1b68a:	6313      	str	r3, [r2, #48]	; 0x30
    UART0->IBRD = 0x00000208;
   1b68c:	4b11      	ldr	r3, [pc, #68]	; (1b6d4 <tm4c123_init+0x1a8>)
   1b68e:	f44f 7202 	mov.w	r2, #520	; 0x208
   1b692:	625a      	str	r2, [r3, #36]	; 0x24
    UART0->FBRD = 0x00000035;
   1b694:	4b0f      	ldr	r3, [pc, #60]	; (1b6d4 <tm4c123_init+0x1a8>)
   1b696:	2235      	movs	r2, #53	; 0x35
   1b698:	629a      	str	r2, [r3, #40]	; 0x28
    UART0->LCRH = 0x00000060; // no stick parity, word length 8bit, FIFO enable, one STOP bit, odd parity, no parity check, no break
   1b69a:	4b0e      	ldr	r3, [pc, #56]	; (1b6d4 <tm4c123_init+0x1a8>)
   1b69c:	2260      	movs	r2, #96	; 0x60
   1b69e:	62da      	str	r2, [r3, #44]	; 0x2c
    UART0->CC = 0x00000000;     // PIOSC for 16 MHz
   1b6a0:	4b0c      	ldr	r3, [pc, #48]	; (1b6d4 <tm4c123_init+0x1a8>)
   1b6a2:	2200      	movs	r2, #0
   1b6a4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    UART0->CTL = 0x00000300; // disable cts & rts, RXE, TXE, no loopback, 16x oversampling, TXRIS on IFLS match, no smart card, no low power, no SIR, UART enabled
   1b6a8:	4b0a      	ldr	r3, [pc, #40]	; (1b6d4 <tm4c123_init+0x1a8>)
   1b6aa:	f44f 7240 	mov.w	r2, #768	; 0x300
   1b6ae:	631a      	str	r2, [r3, #48]	; 0x30
    UART0->CTL |= 0x00000001;
   1b6b0:	4a08      	ldr	r2, [pc, #32]	; (1b6d4 <tm4c123_init+0x1a8>)
   1b6b2:	4b08      	ldr	r3, [pc, #32]	; (1b6d4 <tm4c123_init+0x1a8>)
   1b6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b6b6:	f043 0301 	orr.w	r3, r3, #1
   1b6ba:	6313      	str	r3, [r2, #48]	; 0x30
    // to change settings in active mode: page 918 of reference
}
   1b6bc:	bf00      	nop
   1b6be:	46bd      	mov	sp, r7
   1b6c0:	bd80      	pop	{r7, pc}
   1b6c2:	bf00      	nop
   1b6c4:	400fe000 	.word	0x400fe000
   1b6c8:	07c00550 	.word	0x07c00550
   1b6cc:	4005d000 	.word	0x4005d000
   1b6d0:	40058000 	.word	0x40058000
   1b6d4:	4000c000 	.word	0x4000c000

0001b6d8 <ResetISR>:
// application.
//
//*****************************************************************************
void
ResetISR(void)
{
   1b6d8:	b580      	push	{r7, lr}
   1b6da:	b082      	sub	sp, #8
   1b6dc:	af00      	add	r7, sp, #0
    uint32_t *pui32Src, *pui32Dest;

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pui32Src = &_ldata;
   1b6de:	4b13      	ldr	r3, [pc, #76]	; (1b72c <zero_loop+0x24>)
   1b6e0:	607b      	str	r3, [r7, #4]
    for(pui32Dest = &_data; pui32Dest < &_edata; )
   1b6e2:	4b13      	ldr	r3, [pc, #76]	; (1b730 <zero_loop+0x28>)
   1b6e4:	603b      	str	r3, [r7, #0]
   1b6e6:	e007      	b.n	1b6f8 <ResetISR+0x20>
    {
        *pui32Dest++ = *pui32Src++;
   1b6e8:	683b      	ldr	r3, [r7, #0]
   1b6ea:	1d1a      	adds	r2, r3, #4
   1b6ec:	603a      	str	r2, [r7, #0]
   1b6ee:	687a      	ldr	r2, [r7, #4]
   1b6f0:	1d11      	adds	r1, r2, #4
   1b6f2:	6079      	str	r1, [r7, #4]
   1b6f4:	6812      	ldr	r2, [r2, #0]
   1b6f6:	601a      	str	r2, [r3, #0]
    for(pui32Dest = &_data; pui32Dest < &_edata; )
   1b6f8:	683b      	ldr	r3, [r7, #0]
   1b6fa:	4a0e      	ldr	r2, [pc, #56]	; (1b734 <zero_loop+0x2c>)
   1b6fc:	4293      	cmp	r3, r2
   1b6fe:	d3f3      	bcc.n	1b6e8 <ResetISR+0x10>
    }

    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_bss\n"
   1b700:	4814      	ldr	r0, [pc, #80]	; (1b754 <IntDefaultHandler+0x8>)
   1b702:	4915      	ldr	r1, [pc, #84]	; (1b758 <IntDefaultHandler+0xc>)
   1b704:	f04f 0200 	mov.w	r2, #0

0001b708 <zero_loop>:
   1b708:	4288      	cmp	r0, r1
   1b70a:	bfb8      	it	lt
   1b70c:	f840 2b04 	strlt.w	r2, [r0], #4
   1b710:	dbfa      	blt.n	1b708 <zero_loop>
    // APIs must be done here prior to the floating-point unit being enabled.
    //
    // Note that this does not use DriverLib since it might not be included in
    // this project.
    //
    HWREG(NVIC_CPAC) = ((HWREG(NVIC_CPAC) &
   1b712:	4a09      	ldr	r2, [pc, #36]	; (1b738 <zero_loop+0x30>)
   1b714:	4b08      	ldr	r3, [pc, #32]	; (1b738 <zero_loop+0x30>)
   1b716:	681b      	ldr	r3, [r3, #0]
                         ~(NVIC_CPAC_CP10_M | NVIC_CPAC_CP11_M)) |
                        NVIC_CPAC_CP10_FULL | NVIC_CPAC_CP11_FULL);
   1b718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    HWREG(NVIC_CPAC) = ((HWREG(NVIC_CPAC) &
   1b71c:	6013      	str	r3, [r2, #0]

    //
    // Call the application's entry point.
    //
    _start();
   1b71e:	f7ff fe39 	bl	1b394 <_start>
}
   1b722:	bf00      	nop
   1b724:	3708      	adds	r7, #8
   1b726:	46bd      	mov	sp, r7
   1b728:	bd80      	pop	{r7, pc}
   1b72a:	bf00      	nop
   1b72c:	00023034 	.word	0x00023034
   1b730:	20000000 	.word	0x20000000
   1b734:	20000004 	.word	0x20000004
   1b738:	e000ed88 	.word	0xe000ed88

0001b73c <NmiSR>:
// by a debugger.
//
//*****************************************************************************
static void
NmiSR(void)
{
   1b73c:	b480      	push	{r7}
   1b73e:	af00      	add	r7, sp, #0
    //
    // Enter an infinite loop.
    //
    while(1)
    {
    }
   1b740:	e7fe      	b.n	1b740 <NmiSR+0x4>
   1b742:	bf00      	nop

0001b744 <FaultISR>:
// for examination by a debugger.
//
//*****************************************************************************
static void
FaultISR(void)
{
   1b744:	b480      	push	{r7}
   1b746:	af00      	add	r7, sp, #0
    //
    // Enter an infinite loop.
    //
    while(1)
    {
    }
   1b748:	e7fe      	b.n	1b748 <FaultISR+0x4>
   1b74a:	bf00      	nop

0001b74c <IntDefaultHandler>:
// for examination by a debugger.
//
//*****************************************************************************
static void
IntDefaultHandler(void)
{
   1b74c:	b480      	push	{r7}
   1b74e:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
   1b750:	e7fe      	b.n	1b750 <IntDefaultHandler+0x4>
   1b752:	0000      	.short	0x0000
   1b754:	20000004 	.word	0x20000004
   1b758:	20000be0 	.word	0x20000be0

0001b75c <mp_hal_stdin_rx_chr>:
} periph_uart_t;
#define UART0 ((periph_uart_t*)0x4000C000)
#endif

// Receive single character
int mp_hal_stdin_rx_chr(void) {
   1b75c:	b480      	push	{r7}
   1b75e:	b083      	sub	sp, #12
   1b760:	af00      	add	r7, sp, #0
    unsigned char c = 0;
   1b762:	2300      	movs	r3, #0
   1b764:	71fb      	strb	r3, [r7, #7]
#if MICROPY_MIN_USE_STDOUT
    int r = read(0, &c, 1);
    (void)r;
#elif MICROPY_MIN_USE_TM4C123_MCU
    // wait for RXFE to clear
    while (UART0->FR & (1 << 4)) {
   1b766:	bf00      	nop
   1b768:	4b07      	ldr	r3, [pc, #28]	; (1b788 <mp_hal_stdin_rx_chr+0x2c>)
   1b76a:	699b      	ldr	r3, [r3, #24]
   1b76c:	f003 0310 	and.w	r3, r3, #16
   1b770:	2b00      	cmp	r3, #0
   1b772:	d1f9      	bne.n	1b768 <mp_hal_stdin_rx_chr+0xc>
    }
    c = UART0->DR & 0xFF;
   1b774:	4b04      	ldr	r3, [pc, #16]	; (1b788 <mp_hal_stdin_rx_chr+0x2c>)
   1b776:	681b      	ldr	r3, [r3, #0]
   1b778:	71fb      	strb	r3, [r7, #7]
#endif
    return c;
   1b77a:	79fb      	ldrb	r3, [r7, #7]
}
   1b77c:	4618      	mov	r0, r3
   1b77e:	370c      	adds	r7, #12
   1b780:	46bd      	mov	sp, r7
   1b782:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b786:	4770      	bx	lr
   1b788:	4000c000 	.word	0x4000c000

0001b78c <mp_hal_stdout_tx_strn>:

// Send string of given length
void mp_hal_stdout_tx_strn(const char *str, mp_uint_t len) {
   1b78c:	b480      	push	{r7}
   1b78e:	b083      	sub	sp, #12
   1b790:	af00      	add	r7, sp, #0
   1b792:	6078      	str	r0, [r7, #4]
   1b794:	6039      	str	r1, [r7, #0]
#if MICROPY_MIN_USE_STDOUT
    int r = write(1, str, len);
    (void)r;
#elif MICROPY_MIN_USE_TM4C123_MCU
    while (len--) {
   1b796:	e00c      	b.n	1b7b2 <mp_hal_stdout_tx_strn+0x26>
        // wait for TXFF to clear
        while (UART0->FR & (1 << 5)) {
   1b798:	bf00      	nop
   1b79a:	4b0b      	ldr	r3, [pc, #44]	; (1b7c8 <mp_hal_stdout_tx_strn+0x3c>)
   1b79c:	699b      	ldr	r3, [r3, #24]
   1b79e:	f003 0320 	and.w	r3, r3, #32
   1b7a2:	2b00      	cmp	r3, #0
   1b7a4:	d1f9      	bne.n	1b79a <mp_hal_stdout_tx_strn+0xe>
        }
        UART0->DR = *str++;
   1b7a6:	4908      	ldr	r1, [pc, #32]	; (1b7c8 <mp_hal_stdout_tx_strn+0x3c>)
   1b7a8:	687b      	ldr	r3, [r7, #4]
   1b7aa:	1c5a      	adds	r2, r3, #1
   1b7ac:	607a      	str	r2, [r7, #4]
   1b7ae:	781b      	ldrb	r3, [r3, #0]
   1b7b0:	600b      	str	r3, [r1, #0]
    while (len--) {
   1b7b2:	683b      	ldr	r3, [r7, #0]
   1b7b4:	1e5a      	subs	r2, r3, #1
   1b7b6:	603a      	str	r2, [r7, #0]
   1b7b8:	2b00      	cmp	r3, #0
   1b7ba:	d1ed      	bne.n	1b798 <mp_hal_stdout_tx_strn+0xc>
    }
#endif
}
   1b7bc:	bf00      	nop
   1b7be:	370c      	adds	r7, #12
   1b7c0:	46bd      	mov	sp, r7
   1b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b7c6:	4770      	bx	lr
   1b7c8:	4000c000 	.word	0x4000c000

0001b7cc <printf>:
int putchar(int c);
int puts(const char *s);
int vsnprintf(char *str, size_t size, const char *fmt, va_list ap);
int snprintf(char *str, size_t size, const char *fmt, ...);

int printf(const char *fmt, ...) {
   1b7cc:	b40f      	push	{r0, r1, r2, r3}
   1b7ce:	b580      	push	{r7, lr}
   1b7d0:	b082      	sub	sp, #8
   1b7d2:	af00      	add	r7, sp, #0
    va_list ap;
    va_start(ap, fmt);
   1b7d4:	f107 0314 	add.w	r3, r7, #20
   1b7d8:	603b      	str	r3, [r7, #0]
    int ret = mp_vprintf(&mp_plat_print, fmt, ap);
   1b7da:	683a      	ldr	r2, [r7, #0]
   1b7dc:	6939      	ldr	r1, [r7, #16]
   1b7de:	4806      	ldr	r0, [pc, #24]	; (1b7f8 <printf+0x2c>)
   1b7e0:	f7e6 fb76 	bl	1ed0 <mp_vprintf>
   1b7e4:	6078      	str	r0, [r7, #4]
    va_end(ap);
    return ret;
   1b7e6:	687b      	ldr	r3, [r7, #4]
}
   1b7e8:	4618      	mov	r0, r3
   1b7ea:	3708      	adds	r7, #8
   1b7ec:	46bd      	mov	sp, r7
   1b7ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1b7f2:	b004      	add	sp, #16
   1b7f4:	4770      	bx	lr
   1b7f6:	bf00      	nop
   1b7f8:	0001d82c 	.word	0x0001d82c

0001b7fc <vprintf>:

int vprintf(const char *fmt, va_list ap) {
   1b7fc:	b580      	push	{r7, lr}
   1b7fe:	b082      	sub	sp, #8
   1b800:	af00      	add	r7, sp, #0
   1b802:	6078      	str	r0, [r7, #4]
   1b804:	6039      	str	r1, [r7, #0]
    return mp_vprintf(&mp_plat_print, fmt, ap);
   1b806:	683a      	ldr	r2, [r7, #0]
   1b808:	6879      	ldr	r1, [r7, #4]
   1b80a:	4804      	ldr	r0, [pc, #16]	; (1b81c <vprintf+0x20>)
   1b80c:	f7e6 fb60 	bl	1ed0 <mp_vprintf>
   1b810:	4603      	mov	r3, r0
}
   1b812:	4618      	mov	r0, r3
   1b814:	3708      	adds	r7, #8
   1b816:	46bd      	mov	sp, r7
   1b818:	bd80      	pop	{r7, pc}
   1b81a:	bf00      	nop
   1b81c:	0001d82c 	.word	0x0001d82c

0001b820 <putchar>:
    return ret;
}
#endif

// need this because gcc optimises printf("%c", c) -> putchar(c), and printf("a") -> putchar('a')
int putchar(int c) {
   1b820:	b580      	push	{r7, lr}
   1b822:	b084      	sub	sp, #16
   1b824:	af00      	add	r7, sp, #0
   1b826:	6078      	str	r0, [r7, #4]
    char chr = c;
   1b828:	687b      	ldr	r3, [r7, #4]
   1b82a:	b2db      	uxtb	r3, r3
   1b82c:	73fb      	strb	r3, [r7, #15]
    mp_hal_stdout_tx_strn_cooked(&chr, 1);
   1b82e:	f107 030f 	add.w	r3, r7, #15
   1b832:	2101      	movs	r1, #1
   1b834:	4618      	mov	r0, r3
   1b836:	f000 f88d 	bl	1b954 <mp_hal_stdout_tx_strn_cooked>
    return chr;
   1b83a:	7bfb      	ldrb	r3, [r7, #15]
}
   1b83c:	4618      	mov	r0, r3
   1b83e:	3710      	adds	r7, #16
   1b840:	46bd      	mov	sp, r7
   1b842:	bd80      	pop	{r7, pc}

0001b844 <puts>:

// need this because gcc optimises printf("string\n") -> puts("string")
int puts(const char *s) {
   1b844:	b580      	push	{r7, lr}
   1b846:	b084      	sub	sp, #16
   1b848:	af00      	add	r7, sp, #0
   1b84a:	6078      	str	r0, [r7, #4]
    mp_hal_stdout_tx_strn_cooked(s, strlen(s));
   1b84c:	6878      	ldr	r0, [r7, #4]
   1b84e:	f000 fc73 	bl	1c138 <strlen>
   1b852:	4603      	mov	r3, r0
   1b854:	4619      	mov	r1, r3
   1b856:	6878      	ldr	r0, [r7, #4]
   1b858:	f000 f87c 	bl	1b954 <mp_hal_stdout_tx_strn_cooked>
    char chr = '\n';
   1b85c:	230a      	movs	r3, #10
   1b85e:	73fb      	strb	r3, [r7, #15]
    mp_hal_stdout_tx_strn_cooked(&chr, 1);
   1b860:	f107 030f 	add.w	r3, r7, #15
   1b864:	2101      	movs	r1, #1
   1b866:	4618      	mov	r0, r3
   1b868:	f000 f874 	bl	1b954 <mp_hal_stdout_tx_strn_cooked>
    return 1;
   1b86c:	2301      	movs	r3, #1
}
   1b86e:	4618      	mov	r0, r3
   1b870:	3710      	adds	r7, #16
   1b872:	46bd      	mov	sp, r7
   1b874:	bd80      	pop	{r7, pc}
   1b876:	bf00      	nop

0001b878 <strn_print_strn>:
typedef struct _strn_print_env_t {
    char *cur;
    size_t remain;
} strn_print_env_t;

STATIC void strn_print_strn(void *data, const char *str, size_t len) {
   1b878:	b580      	push	{r7, lr}
   1b87a:	b086      	sub	sp, #24
   1b87c:	af00      	add	r7, sp, #0
   1b87e:	60f8      	str	r0, [r7, #12]
   1b880:	60b9      	str	r1, [r7, #8]
   1b882:	607a      	str	r2, [r7, #4]
    strn_print_env_t *strn_print_env = data;
   1b884:	68fb      	ldr	r3, [r7, #12]
   1b886:	617b      	str	r3, [r7, #20]
    if (len > strn_print_env->remain) {
   1b888:	697b      	ldr	r3, [r7, #20]
   1b88a:	685a      	ldr	r2, [r3, #4]
   1b88c:	687b      	ldr	r3, [r7, #4]
   1b88e:	429a      	cmp	r2, r3
   1b890:	d202      	bcs.n	1b898 <strn_print_strn+0x20>
        len = strn_print_env->remain;
   1b892:	697b      	ldr	r3, [r7, #20]
   1b894:	685b      	ldr	r3, [r3, #4]
   1b896:	607b      	str	r3, [r7, #4]
    }
    memcpy(strn_print_env->cur, str, len);
   1b898:	697b      	ldr	r3, [r7, #20]
   1b89a:	681b      	ldr	r3, [r3, #0]
   1b89c:	687a      	ldr	r2, [r7, #4]
   1b89e:	68b9      	ldr	r1, [r7, #8]
   1b8a0:	4618      	mov	r0, r3
   1b8a2:	f000 fb0f 	bl	1bec4 <memcpy>
    strn_print_env->cur += len;
   1b8a6:	697b      	ldr	r3, [r7, #20]
   1b8a8:	681a      	ldr	r2, [r3, #0]
   1b8aa:	687b      	ldr	r3, [r7, #4]
   1b8ac:	441a      	add	r2, r3
   1b8ae:	697b      	ldr	r3, [r7, #20]
   1b8b0:	601a      	str	r2, [r3, #0]
    strn_print_env->remain -= len;
   1b8b2:	697b      	ldr	r3, [r7, #20]
   1b8b4:	685a      	ldr	r2, [r3, #4]
   1b8b6:	687b      	ldr	r3, [r7, #4]
   1b8b8:	1ad2      	subs	r2, r2, r3
   1b8ba:	697b      	ldr	r3, [r7, #20]
   1b8bc:	605a      	str	r2, [r3, #4]
}
   1b8be:	bf00      	nop
   1b8c0:	3718      	adds	r7, #24
   1b8c2:	46bd      	mov	sp, r7
   1b8c4:	bd80      	pop	{r7, pc}
   1b8c6:	bf00      	nop

0001b8c8 <vsnprintf>:
// uClibc requires this alias to be defined, or there may be link errors
// when linkings against it statically.
int __GI_vsnprintf(char *str, size_t size, const char *fmt, va_list ap) __attribute__((weak, alias ("vsnprintf")));
#endif

int vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
   1b8c8:	b580      	push	{r7, lr}
   1b8ca:	b08a      	sub	sp, #40	; 0x28
   1b8cc:	af00      	add	r7, sp, #0
   1b8ce:	60f8      	str	r0, [r7, #12]
   1b8d0:	60b9      	str	r1, [r7, #8]
   1b8d2:	607a      	str	r2, [r7, #4]
   1b8d4:	603b      	str	r3, [r7, #0]
    strn_print_env_t strn_print_env = {str, size};
   1b8d6:	68fb      	ldr	r3, [r7, #12]
   1b8d8:	61fb      	str	r3, [r7, #28]
   1b8da:	68bb      	ldr	r3, [r7, #8]
   1b8dc:	623b      	str	r3, [r7, #32]
    mp_print_t print = {&strn_print_env, strn_print_strn};
   1b8de:	f107 031c 	add.w	r3, r7, #28
   1b8e2:	617b      	str	r3, [r7, #20]
   1b8e4:	4b0e      	ldr	r3, [pc, #56]	; (1b920 <vsnprintf+0x58>)
   1b8e6:	61bb      	str	r3, [r7, #24]
    int len = mp_vprintf(&print, fmt, ap);
   1b8e8:	f107 0314 	add.w	r3, r7, #20
   1b8ec:	683a      	ldr	r2, [r7, #0]
   1b8ee:	6879      	ldr	r1, [r7, #4]
   1b8f0:	4618      	mov	r0, r3
   1b8f2:	f7e6 faed 	bl	1ed0 <mp_vprintf>
   1b8f6:	6278      	str	r0, [r7, #36]	; 0x24
    // add terminating null byte
    if (size > 0) {
   1b8f8:	68bb      	ldr	r3, [r7, #8]
   1b8fa:	2b00      	cmp	r3, #0
   1b8fc:	d00a      	beq.n	1b914 <vsnprintf+0x4c>
        if (strn_print_env.remain == 0) {
   1b8fe:	6a3b      	ldr	r3, [r7, #32]
   1b900:	2b00      	cmp	r3, #0
   1b902:	d104      	bne.n	1b90e <vsnprintf+0x46>
            strn_print_env.cur[-1] = 0;
   1b904:	69fb      	ldr	r3, [r7, #28]
   1b906:	3b01      	subs	r3, #1
   1b908:	2200      	movs	r2, #0
   1b90a:	701a      	strb	r2, [r3, #0]
   1b90c:	e002      	b.n	1b914 <vsnprintf+0x4c>
        } else {
            strn_print_env.cur[0] = 0;
   1b90e:	69fb      	ldr	r3, [r7, #28]
   1b910:	2200      	movs	r2, #0
   1b912:	701a      	strb	r2, [r3, #0]
        }
    }
    return len;
   1b914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1b916:	4618      	mov	r0, r3
   1b918:	3728      	adds	r7, #40	; 0x28
   1b91a:	46bd      	mov	sp, r7
   1b91c:	bd80      	pop	{r7, pc}
   1b91e:	bf00      	nop
   1b920:	0001b879 	.word	0x0001b879

0001b924 <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...) {
   1b924:	b40c      	push	{r2, r3}
   1b926:	b580      	push	{r7, lr}
   1b928:	b084      	sub	sp, #16
   1b92a:	af00      	add	r7, sp, #0
   1b92c:	6078      	str	r0, [r7, #4]
   1b92e:	6039      	str	r1, [r7, #0]
    va_list ap;
    va_start(ap, fmt);
   1b930:	f107 031c 	add.w	r3, r7, #28
   1b934:	60bb      	str	r3, [r7, #8]
    int ret = vsnprintf(str, size, fmt, ap);
   1b936:	68bb      	ldr	r3, [r7, #8]
   1b938:	69ba      	ldr	r2, [r7, #24]
   1b93a:	6839      	ldr	r1, [r7, #0]
   1b93c:	6878      	ldr	r0, [r7, #4]
   1b93e:	f7ff ffc3 	bl	1b8c8 <vsnprintf>
   1b942:	60f8      	str	r0, [r7, #12]
    va_end(ap);
    return ret;
   1b944:	68fb      	ldr	r3, [r7, #12]
}
   1b946:	4618      	mov	r0, r3
   1b948:	3710      	adds	r7, #16
   1b94a:	46bd      	mov	sp, r7
   1b94c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1b950:	b002      	add	sp, #8
   1b952:	4770      	bx	lr

0001b954 <mp_hal_stdout_tx_strn_cooked>:
 * implementation below can be used.
 */

// Send "cooked" string of given length, where every occurrence of
// LF character is replaced with CR LF.
void mp_hal_stdout_tx_strn_cooked(const char *str, size_t len) {
   1b954:	b580      	push	{r7, lr}
   1b956:	b082      	sub	sp, #8
   1b958:	af00      	add	r7, sp, #0
   1b95a:	6078      	str	r0, [r7, #4]
   1b95c:	6039      	str	r1, [r7, #0]
    while (len--) {
   1b95e:	e00e      	b.n	1b97e <mp_hal_stdout_tx_strn_cooked+0x2a>
        if (*str == '\n') {
   1b960:	687b      	ldr	r3, [r7, #4]
   1b962:	781b      	ldrb	r3, [r3, #0]
   1b964:	2b0a      	cmp	r3, #10
   1b966:	d103      	bne.n	1b970 <mp_hal_stdout_tx_strn_cooked+0x1c>
            mp_hal_stdout_tx_strn("\r", 1);
   1b968:	2101      	movs	r1, #1
   1b96a:	4809      	ldr	r0, [pc, #36]	; (1b990 <mp_hal_stdout_tx_strn_cooked+0x3c>)
   1b96c:	f7ff ff0e 	bl	1b78c <mp_hal_stdout_tx_strn>
        }
        mp_hal_stdout_tx_strn(str++, 1);
   1b970:	687b      	ldr	r3, [r7, #4]
   1b972:	1c5a      	adds	r2, r3, #1
   1b974:	607a      	str	r2, [r7, #4]
   1b976:	2101      	movs	r1, #1
   1b978:	4618      	mov	r0, r3
   1b97a:	f7ff ff07 	bl	1b78c <mp_hal_stdout_tx_strn>
    while (len--) {
   1b97e:	683b      	ldr	r3, [r7, #0]
   1b980:	1e5a      	subs	r2, r3, #1
   1b982:	603a      	str	r2, [r7, #0]
   1b984:	2b00      	cmp	r3, #0
   1b986:	d1eb      	bne.n	1b960 <mp_hal_stdout_tx_strn_cooked+0xc>
    }
}
   1b988:	bf00      	nop
   1b98a:	3708      	adds	r7, #8
   1b98c:	46bd      	mov	sp, r7
   1b98e:	bd80      	pop	{r7, pc}
   1b990:	00022d80 	.word	0x00022d80

0001b994 <mp_hal_stdout_tx_str>:

// Send zero-terminated string
void mp_hal_stdout_tx_str(const char *str) {
   1b994:	b580      	push	{r7, lr}
   1b996:	b082      	sub	sp, #8
   1b998:	af00      	add	r7, sp, #0
   1b99a:	6078      	str	r0, [r7, #4]
    mp_hal_stdout_tx_strn(str, strlen(str));
   1b99c:	6878      	ldr	r0, [r7, #4]
   1b99e:	f000 fbcb 	bl	1c138 <strlen>
   1b9a2:	4603      	mov	r3, r0
   1b9a4:	4619      	mov	r1, r3
   1b9a6:	6878      	ldr	r0, [r7, #4]
   1b9a8:	f7ff fef0 	bl	1b78c <mp_hal_stdout_tx_strn>
}
   1b9ac:	bf00      	nop
   1b9ae:	3708      	adds	r7, #8
   1b9b0:	46bd      	mov	sp, r7
   1b9b2:	bd80      	pop	{r7, pc}

0001b9b4 <vstr_reset>:
static inline void vstr_reset(vstr_t *vstr) { vstr->len = 0; }
   1b9b4:	b480      	push	{r7}
   1b9b6:	b083      	sub	sp, #12
   1b9b8:	af00      	add	r7, sp, #0
   1b9ba:	6078      	str	r0, [r7, #4]
   1b9bc:	687b      	ldr	r3, [r7, #4]
   1b9be:	2200      	movs	r2, #0
   1b9c0:	605a      	str	r2, [r3, #4]
   1b9c2:	bf00      	nop
   1b9c4:	370c      	adds	r7, #12
   1b9c6:	46bd      	mov	sp, r7
   1b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b9cc:	4770      	bx	lr
   1b9ce:	bf00      	nop

0001b9d0 <vstr_len>:
static inline size_t vstr_len(vstr_t *vstr) { return vstr->len; }
   1b9d0:	b480      	push	{r7}
   1b9d2:	b083      	sub	sp, #12
   1b9d4:	af00      	add	r7, sp, #0
   1b9d6:	6078      	str	r0, [r7, #4]
   1b9d8:	687b      	ldr	r3, [r7, #4]
   1b9da:	685b      	ldr	r3, [r3, #4]
   1b9dc:	4618      	mov	r0, r3
   1b9de:	370c      	adds	r7, #12
   1b9e0:	46bd      	mov	sp, r7
   1b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b9e6:	4770      	bx	lr

0001b9e8 <mp_hal_ticks_ms>:
static inline mp_uint_t mp_hal_ticks_ms(void) { return 0; }
   1b9e8:	b480      	push	{r7}
   1b9ea:	af00      	add	r7, sp, #0
   1b9ec:	2300      	movs	r3, #0
   1b9ee:	4618      	mov	r0, r3
   1b9f0:	46bd      	mov	sp, r7
   1b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b9f6:	4770      	bx	lr

0001b9f8 <mp_hal_set_interrupt_char>:
static inline void mp_hal_set_interrupt_char(char c) {}
   1b9f8:	b480      	push	{r7}
   1b9fa:	b083      	sub	sp, #12
   1b9fc:	af00      	add	r7, sp, #0
   1b9fe:	4603      	mov	r3, r0
   1ba00:	71fb      	strb	r3, [r7, #7]
   1ba02:	bf00      	nop
   1ba04:	370c      	adds	r7, #12
   1ba06:	46bd      	mov	sp, r7
   1ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ba0c:	4770      	bx	lr
   1ba0e:	bf00      	nop

0001ba10 <parse_compile_execute>:
// parses, compiles and executes the code in the lexer
// frees the lexer before returning
// EXEC_FLAG_PRINT_EOF prints 2 EOF chars: 1 after normal output, 1 after exception output
// EXEC_FLAG_ALLOW_DEBUGGING allows debugging info to be printed after executing the code
// EXEC_FLAG_IS_REPL is used for REPL inputs (flag passed on to mp_compile)
STATIC int parse_compile_execute(const void *source, mp_parse_input_kind_t input_kind, int exec_flags) {
   1ba10:	b580      	push	{r7, lr}
   1ba12:	b0a0      	sub	sp, #128	; 0x80
   1ba14:	af02      	add	r7, sp, #8
   1ba16:	60f8      	str	r0, [r7, #12]
   1ba18:	60b9      	str	r1, [r7, #8]
   1ba1a:	607a      	str	r2, [r7, #4]
    int ret = 0;
   1ba1c:	2300      	movs	r3, #0
   1ba1e:	677b      	str	r3, [r7, #116]	; 0x74
    uint32_t start = 0;
   1ba20:	2300      	movs	r3, #0
   1ba22:	673b      	str	r3, [r7, #112]	; 0x70

    // by default a SystemExit exception returns 0
    pyexec_system_exit = 0;
   1ba24:	4b60      	ldr	r3, [pc, #384]	; (1bba8 <parse_compile_execute+0x198>)
   1ba26:	2200      	movs	r2, #0
   1ba28:	601a      	str	r2, [r3, #0]

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   1ba2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1ba2e:	4618      	mov	r0, r3
   1ba30:	f7e4 fc44 	bl	2bc <nlr_push>
   1ba34:	4603      	mov	r3, r0
   1ba36:	2b00      	cmp	r3, #0
   1ba38:	d15b      	bne.n	1baf2 <parse_compile_execute+0xe2>
        mp_obj_t module_fun;
        #if MICROPY_MODULE_FROZEN_MPY
        if (exec_flags & EXEC_FLAG_SOURCE_IS_RAW_CODE) {
   1ba3a:	687b      	ldr	r3, [r7, #4]
   1ba3c:	f003 0308 	and.w	r3, r3, #8
   1ba40:	2b00      	cmp	r3, #0
   1ba42:	d006      	beq.n	1ba52 <parse_compile_execute+0x42>
            // source is a raw_code object, create the function
            module_fun = mp_make_function_from_raw_code(source, MP_OBJ_NULL, MP_OBJ_NULL);
   1ba44:	2200      	movs	r2, #0
   1ba46:	2100      	movs	r1, #0
   1ba48:	68f8      	ldr	r0, [r7, #12]
   1ba4a:	f7ef fc2b 	bl	b2a4 <mp_make_function_from_raw_code>
   1ba4e:	66f8      	str	r0, [r7, #108]	; 0x6c
   1ba50:	e035      	b.n	1babe <parse_compile_execute+0xae>
        } else
        #endif
        {
            #if MICROPY_ENABLE_COMPILER
            mp_lexer_t *lex;
            if (exec_flags & EXEC_FLAG_SOURCE_IS_VSTR) {
   1ba52:	687b      	ldr	r3, [r7, #4]
   1ba54:	f003 0310 	and.w	r3, r3, #16
   1ba58:	2b00      	cmp	r3, #0
   1ba5a:	d00b      	beq.n	1ba74 <parse_compile_execute+0x64>
                const vstr_t *vstr = source;
   1ba5c:	68fb      	ldr	r3, [r7, #12]
   1ba5e:	667b      	str	r3, [r7, #100]	; 0x64
                lex = mp_lexer_new_from_str_len(MP_QSTR__lt_stdin_gt_, vstr->buf, vstr->len, 0);
   1ba60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1ba62:	6899      	ldr	r1, [r3, #8]
   1ba64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1ba66:	685a      	ldr	r2, [r3, #4]
   1ba68:	2300      	movs	r3, #0
   1ba6a:	2036      	movs	r0, #54	; 0x36
   1ba6c:	f7e7 fe5a 	bl	3724 <mp_lexer_new_from_str_len>
   1ba70:	66b8      	str	r0, [r7, #104]	; 0x68
   1ba72:	e00b      	b.n	1ba8c <parse_compile_execute+0x7c>
            } else if (exec_flags & EXEC_FLAG_SOURCE_IS_FILENAME) {
   1ba74:	687b      	ldr	r3, [r7, #4]
   1ba76:	f003 0320 	and.w	r3, r3, #32
   1ba7a:	2b00      	cmp	r3, #0
   1ba7c:	d004      	beq.n	1ba88 <parse_compile_execute+0x78>
                lex = mp_lexer_new_from_file(source);
   1ba7e:	68f8      	ldr	r0, [r7, #12]
   1ba80:	f7ff fc44 	bl	1b30c <mp_lexer_new_from_file>
   1ba84:	66b8      	str	r0, [r7, #104]	; 0x68
   1ba86:	e001      	b.n	1ba8c <parse_compile_execute+0x7c>
            } else {
                lex = (mp_lexer_t*)source;
   1ba88:	68fb      	ldr	r3, [r7, #12]
   1ba8a:	66bb      	str	r3, [r7, #104]	; 0x68
            }
            // source is a lexer, parse and compile the script
            qstr source_name = lex->source_name;
   1ba8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1ba8e:	681b      	ldr	r3, [r3, #0]
   1ba90:	663b      	str	r3, [r7, #96]	; 0x60
            mp_parse_tree_t parse_tree = mp_parse(lex, input_kind);
   1ba92:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1ba96:	68ba      	ldr	r2, [r7, #8]
   1ba98:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   1ba9a:	4618      	mov	r0, r3
   1ba9c:	f7e8 fc3e 	bl	431c <mp_parse>
            module_fun = mp_compile(&parse_tree, source_name, MP_EMIT_OPT_NONE, exec_flags & EXEC_FLAG_IS_REPL);
   1baa0:	687b      	ldr	r3, [r7, #4]
   1baa2:	f003 0304 	and.w	r3, r3, #4
   1baa6:	2b00      	cmp	r3, #0
   1baa8:	bf14      	ite	ne
   1baaa:	2301      	movne	r3, #1
   1baac:	2300      	moveq	r3, #0
   1baae:	b2db      	uxtb	r3, r3
   1bab0:	f107 0024 	add.w	r0, r7, #36	; 0x24
   1bab4:	2200      	movs	r2, #0
   1bab6:	6e39      	ldr	r1, [r7, #96]	; 0x60
   1bab8:	f7ed feba 	bl	9830 <mp_compile>
   1babc:	66f8      	str	r0, [r7, #108]	; 0x6c
            mp_raise_msg(&mp_type_RuntimeError, "script compilation not supported");
            #endif
        }

        // execute code
        mp_hal_set_interrupt_char(CHAR_CTRL_C); // allow ctrl-C to interrupt us
   1babe:	2003      	movs	r0, #3
   1bac0:	f7ff ff9a 	bl	1b9f8 <mp_hal_set_interrupt_char>
        start = mp_hal_ticks_ms();
   1bac4:	f7ff ff90 	bl	1b9e8 <mp_hal_ticks_ms>
   1bac8:	6738      	str	r0, [r7, #112]	; 0x70
        mp_call_function_0(module_fun);
   1baca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
   1bacc:	f7f0 f98e 	bl	bdec <mp_call_function_0>
        mp_hal_set_interrupt_char(-1); // disable interrupt
   1bad0:	20ff      	movs	r0, #255	; 0xff
   1bad2:	f7ff ff91 	bl	1b9f8 <mp_hal_set_interrupt_char>
        nlr_pop();
   1bad6:	f7e4 fbdf 	bl	298 <nlr_pop>
        ret = 1;
   1bada:	2301      	movs	r3, #1
   1badc:	677b      	str	r3, [r7, #116]	; 0x74
        if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1bade:	687b      	ldr	r3, [r7, #4]
   1bae0:	f003 0301 	and.w	r3, r3, #1
   1bae4:	2b00      	cmp	r3, #0
   1bae6:	d027      	beq.n	1bb38 <parse_compile_execute+0x128>
            mp_hal_stdout_tx_strn("\x04", 1);
   1bae8:	2101      	movs	r1, #1
   1baea:	4830      	ldr	r0, [pc, #192]	; (1bbac <parse_compile_execute+0x19c>)
   1baec:	f7ff fe4e 	bl	1b78c <mp_hal_stdout_tx_strn>
   1baf0:	e022      	b.n	1bb38 <parse_compile_execute+0x128>
        }
    } else {
        // uncaught exception
        // FIXME it could be that an interrupt happens just before we disable it here
        mp_hal_set_interrupt_char(-1); // disable interrupt
   1baf2:	20ff      	movs	r0, #255	; 0xff
   1baf4:	f7ff ff80 	bl	1b9f8 <mp_hal_set_interrupt_char>
        // print EOF after normal output
        if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1baf8:	687b      	ldr	r3, [r7, #4]
   1bafa:	f003 0301 	and.w	r3, r3, #1
   1bafe:	2b00      	cmp	r3, #0
   1bb00:	d003      	beq.n	1bb0a <parse_compile_execute+0xfa>
            mp_hal_stdout_tx_strn("\x04", 1);
   1bb02:	2101      	movs	r1, #1
   1bb04:	4829      	ldr	r0, [pc, #164]	; (1bbac <parse_compile_execute+0x19c>)
   1bb06:	f7ff fe41 	bl	1b78c <mp_hal_stdout_tx_strn>
        }
        // check for SystemExit
        if (mp_obj_is_subclass_fast(mp_obj_get_type((mp_obj_t)nlr.ret_val), &mp_type_SystemExit)) {
   1bb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bb0c:	4618      	mov	r0, r3
   1bb0e:	f7f1 fe81 	bl	d814 <mp_obj_get_type>
   1bb12:	4603      	mov	r3, r0
   1bb14:	4926      	ldr	r1, [pc, #152]	; (1bbb0 <parse_compile_execute+0x1a0>)
   1bb16:	4618      	mov	r0, r3
   1bb18:	f7fb fbe4 	bl	172e4 <mp_obj_is_subclass_fast>
   1bb1c:	4603      	mov	r3, r0
   1bb1e:	2b00      	cmp	r3, #0
   1bb20:	d003      	beq.n	1bb2a <parse_compile_execute+0x11a>
            // at the moment, the value of SystemExit is unused
            ret = pyexec_system_exit;
   1bb22:	4b21      	ldr	r3, [pc, #132]	; (1bba8 <parse_compile_execute+0x198>)
   1bb24:	681b      	ldr	r3, [r3, #0]
   1bb26:	677b      	str	r3, [r7, #116]	; 0x74
   1bb28:	e006      	b.n	1bb38 <parse_compile_execute+0x128>
        } else {
            mp_obj_print_exception(&mp_plat_print, (mp_obj_t)nlr.ret_val);
   1bb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bb2c:	4619      	mov	r1, r3
   1bb2e:	4821      	ldr	r0, [pc, #132]	; (1bbb4 <parse_compile_execute+0x1a4>)
   1bb30:	f7f1 fede 	bl	d8f0 <mp_obj_print_exception>
            ret = 0;
   1bb34:	2300      	movs	r3, #0
   1bb36:	677b      	str	r3, [r7, #116]	; 0x74
        }
    }

    // display debugging info if wanted
    if ((exec_flags & EXEC_FLAG_ALLOW_DEBUGGING) && repl_display_debugging_info) {
   1bb38:	687b      	ldr	r3, [r7, #4]
   1bb3a:	f003 0302 	and.w	r3, r3, #2
   1bb3e:	2b00      	cmp	r3, #0
   1bb40:	d024      	beq.n	1bb8c <parse_compile_execute+0x17c>
   1bb42:	4b1d      	ldr	r3, [pc, #116]	; (1bbb8 <parse_compile_execute+0x1a8>)
   1bb44:	781b      	ldrb	r3, [r3, #0]
   1bb46:	2b00      	cmp	r3, #0
   1bb48:	d020      	beq.n	1bb8c <parse_compile_execute+0x17c>
        mp_uint_t ticks = mp_hal_ticks_ms() - start; // TODO implement a function that does this properly
   1bb4a:	f7ff ff4d 	bl	1b9e8 <mp_hal_ticks_ms>
   1bb4e:	4602      	mov	r2, r0
   1bb50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1bb52:	1ad3      	subs	r3, r2, r3
   1bb54:	65fb      	str	r3, [r7, #92]	; 0x5c
        printf("took " UINT_FMT " ms\n", ticks);
   1bb56:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   1bb58:	4818      	ldr	r0, [pc, #96]	; (1bbbc <parse_compile_execute+0x1ac>)
   1bb5a:	f7ff fe37 	bl	1b7cc <printf>
        // qstr info
        {
            size_t n_pool, n_qstr, n_str_data_bytes, n_total_bytes;
            qstr_pool_info(&n_pool, &n_qstr, &n_str_data_bytes, &n_total_bytes);
   1bb5e:	f107 0314 	add.w	r3, r7, #20
   1bb62:	f107 0218 	add.w	r2, r7, #24
   1bb66:	f107 011c 	add.w	r1, r7, #28
   1bb6a:	f107 0020 	add.w	r0, r7, #32
   1bb6e:	f7e5 fb65 	bl	123c <qstr_pool_info>
            printf("qstr:\n  n_pool=" UINT_FMT "\n  n_qstr=" UINT_FMT "\n  "
   1bb72:	6a39      	ldr	r1, [r7, #32]
   1bb74:	69fa      	ldr	r2, [r7, #28]
   1bb76:	69b8      	ldr	r0, [r7, #24]
   1bb78:	697b      	ldr	r3, [r7, #20]
   1bb7a:	9300      	str	r3, [sp, #0]
   1bb7c:	4603      	mov	r3, r0
   1bb7e:	4810      	ldr	r0, [pc, #64]	; (1bbc0 <parse_compile_execute+0x1b0>)
   1bb80:	f7ff fe24 	bl	1b7cc <printf>
                   (unsigned)n_pool, (unsigned)n_qstr, (unsigned)n_str_data_bytes, (unsigned)n_total_bytes);
        }

        #if MICROPY_ENABLE_GC
        // run collection and print GC info
        gc_collect();
   1bb84:	f7ff fba8 	bl	1b2d8 <gc_collect>
        gc_dump_info();
   1bb88:	f7e5 f866 	bl	c58 <gc_dump_info>
        #endif
    }

    if (exec_flags & EXEC_FLAG_PRINT_EOF) {
   1bb8c:	687b      	ldr	r3, [r7, #4]
   1bb8e:	f003 0301 	and.w	r3, r3, #1
   1bb92:	2b00      	cmp	r3, #0
   1bb94:	d003      	beq.n	1bb9e <parse_compile_execute+0x18e>
        mp_hal_stdout_tx_strn("\x04", 1);
   1bb96:	2101      	movs	r1, #1
   1bb98:	4804      	ldr	r0, [pc, #16]	; (1bbac <parse_compile_execute+0x19c>)
   1bb9a:	f7ff fdf7 	bl	1b78c <mp_hal_stdout_tx_strn>
    }

    return ret;
   1bb9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   1bba0:	4618      	mov	r0, r3
   1bba2:	3778      	adds	r7, #120	; 0x78
   1bba4:	46bd      	mov	sp, r7
   1bba6:	bd80      	pop	{r7, pc}
   1bba8:	20000a08 	.word	0x20000a08
   1bbac:	00022d84 	.word	0x00022d84
   1bbb0:	0002023c 	.word	0x0002023c
   1bbb4:	0001d82c 	.word	0x0001d82c
   1bbb8:	20000a0c 	.word	0x20000a0c
   1bbbc:	00022d88 	.word	0x00022d88
   1bbc0:	00022d94 	.word	0x00022d94

0001bbc4 <pyexec_raw_repl>:
    return res;
}

#else // MICROPY_REPL_EVENT_DRIVEN

int pyexec_raw_repl(void) {
   1bbc4:	b580      	push	{r7, lr}
   1bbc6:	b086      	sub	sp, #24
   1bbc8:	af00      	add	r7, sp, #0
    vstr_t line;
    vstr_init(&line, 32);
   1bbca:	463b      	mov	r3, r7
   1bbcc:	2120      	movs	r1, #32
   1bbce:	4618      	mov	r0, r3
   1bbd0:	f7e5 fb96 	bl	1300 <vstr_init>

raw_repl_reset:
    mp_hal_stdout_tx_str("raw REPL; CTRL-B to exit\r\n");
   1bbd4:	482a      	ldr	r0, [pc, #168]	; (1bc80 <pyexec_raw_repl+0xbc>)
   1bbd6:	f7ff fedd 	bl	1b994 <mp_hal_stdout_tx_str>

    for (;;) {
        vstr_reset(&line);
   1bbda:	463b      	mov	r3, r7
   1bbdc:	4618      	mov	r0, r3
   1bbde:	f7ff fee9 	bl	1b9b4 <vstr_reset>
        mp_hal_stdout_tx_str(">");
   1bbe2:	4828      	ldr	r0, [pc, #160]	; (1bc84 <pyexec_raw_repl+0xc0>)
   1bbe4:	f7ff fed6 	bl	1b994 <mp_hal_stdout_tx_str>
        for (;;) {
            int c = mp_hal_stdin_rx_chr();
   1bbe8:	f7ff fdb8 	bl	1b75c <mp_hal_stdin_rx_chr>
   1bbec:	6178      	str	r0, [r7, #20]
            if (c == CHAR_CTRL_A) {
   1bbee:	697b      	ldr	r3, [r7, #20]
   1bbf0:	2b01      	cmp	r3, #1
   1bbf2:	d100      	bne.n	1bbf6 <pyexec_raw_repl+0x32>
                // reset raw REPL
                goto raw_repl_reset;
   1bbf4:	e7ee      	b.n	1bbd4 <pyexec_raw_repl+0x10>
            } else if (c == CHAR_CTRL_B) {
   1bbf6:	697b      	ldr	r3, [r7, #20]
   1bbf8:	2b02      	cmp	r3, #2
   1bbfa:	d10b      	bne.n	1bc14 <pyexec_raw_repl+0x50>
                // change to friendly REPL
                mp_hal_stdout_tx_str("\r\n");
   1bbfc:	4822      	ldr	r0, [pc, #136]	; (1bc88 <pyexec_raw_repl+0xc4>)
   1bbfe:	f7ff fec9 	bl	1b994 <mp_hal_stdout_tx_str>
                vstr_clear(&line);
   1bc02:	463b      	mov	r3, r7
   1bc04:	4618      	mov	r0, r3
   1bc06:	f7e5 fbdf 	bl	13c8 <vstr_clear>
                pyexec_mode_kind = PYEXEC_MODE_FRIENDLY_REPL;
   1bc0a:	4b20      	ldr	r3, [pc, #128]	; (1bc8c <pyexec_raw_repl+0xc8>)
   1bc0c:	2201      	movs	r2, #1
   1bc0e:	601a      	str	r2, [r3, #0]
                return 0;
   1bc10:	2300      	movs	r3, #0
   1bc12:	e030      	b.n	1bc76 <pyexec_raw_repl+0xb2>
            } else if (c == CHAR_CTRL_C) {
   1bc14:	697b      	ldr	r3, [r7, #20]
   1bc16:	2b03      	cmp	r3, #3
   1bc18:	d104      	bne.n	1bc24 <pyexec_raw_repl+0x60>
                // clear line
                vstr_reset(&line);
   1bc1a:	463b      	mov	r3, r7
   1bc1c:	4618      	mov	r0, r3
   1bc1e:	f7ff fec9 	bl	1b9b4 <vstr_reset>
   1bc22:	e7e1      	b.n	1bbe8 <pyexec_raw_repl+0x24>
            } else if (c == CHAR_CTRL_D) {
   1bc24:	697b      	ldr	r3, [r7, #20]
   1bc26:	2b04      	cmp	r3, #4
   1bc28:	d007      	beq.n	1bc3a <pyexec_raw_repl+0x76>
                // input finished
                break;
            } else {
                // let through any other raw 8-bit value
                vstr_add_byte(&line, c);
   1bc2a:	697b      	ldr	r3, [r7, #20]
   1bc2c:	b2da      	uxtb	r2, r3
   1bc2e:	463b      	mov	r3, r7
   1bc30:	4611      	mov	r1, r2
   1bc32:	4618      	mov	r0, r3
   1bc34:	f7e5 fcba 	bl	15ac <vstr_add_byte>
            }
        }
   1bc38:	e7d6      	b.n	1bbe8 <pyexec_raw_repl+0x24>
                break;
   1bc3a:	bf00      	nop

        // indicate reception of command
        mp_hal_stdout_tx_str("OK");
   1bc3c:	4814      	ldr	r0, [pc, #80]	; (1bc90 <pyexec_raw_repl+0xcc>)
   1bc3e:	f7ff fea9 	bl	1b994 <mp_hal_stdout_tx_str>

        if (line.len == 0) {
   1bc42:	687b      	ldr	r3, [r7, #4]
   1bc44:	2b00      	cmp	r3, #0
   1bc46:	d109      	bne.n	1bc5c <pyexec_raw_repl+0x98>
            // exit for a soft reset
            mp_hal_stdout_tx_str("\r\n");
   1bc48:	480f      	ldr	r0, [pc, #60]	; (1bc88 <pyexec_raw_repl+0xc4>)
   1bc4a:	f7ff fea3 	bl	1b994 <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1bc4e:	463b      	mov	r3, r7
   1bc50:	4618      	mov	r0, r3
   1bc52:	f7e5 fbb9 	bl	13c8 <vstr_clear>
            return PYEXEC_FORCED_EXIT;
   1bc56:	f44f 7380 	mov.w	r3, #256	; 0x100
   1bc5a:	e00c      	b.n	1bc76 <pyexec_raw_repl+0xb2>
        }

        int ret = parse_compile_execute(&line, MP_PARSE_FILE_INPUT, EXEC_FLAG_PRINT_EOF | EXEC_FLAG_SOURCE_IS_VSTR);
   1bc5c:	463b      	mov	r3, r7
   1bc5e:	2211      	movs	r2, #17
   1bc60:	2101      	movs	r1, #1
   1bc62:	4618      	mov	r0, r3
   1bc64:	f7ff fed4 	bl	1ba10 <parse_compile_execute>
   1bc68:	6138      	str	r0, [r7, #16]
        if (ret & PYEXEC_FORCED_EXIT) {
   1bc6a:	693b      	ldr	r3, [r7, #16]
   1bc6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
   1bc70:	2b00      	cmp	r3, #0
   1bc72:	d0b2      	beq.n	1bbda <pyexec_raw_repl+0x16>
            return ret;
   1bc74:	693b      	ldr	r3, [r7, #16]
        }
    }
}
   1bc76:	4618      	mov	r0, r3
   1bc78:	3718      	adds	r7, #24
   1bc7a:	46bd      	mov	sp, r7
   1bc7c:	bd80      	pop	{r7, pc}
   1bc7e:	bf00      	nop
   1bc80:	00022ddc 	.word	0x00022ddc
   1bc84:	00022df8 	.word	0x00022df8
   1bc88:	00022dfc 	.word	0x00022dfc
   1bc8c:	20000000 	.word	0x20000000
   1bc90:	00022e00 	.word	0x00022e00

0001bc94 <pyexec_friendly_repl>:

int pyexec_friendly_repl(void) {
   1bc94:	b580      	push	{r7, lr}
   1bc96:	b088      	sub	sp, #32
   1bc98:	af00      	add	r7, sp, #0
    vstr_t line;
    vstr_init(&line, 32);
   1bc9a:	f107 0308 	add.w	r3, r7, #8
   1bc9e:	2120      	movs	r1, #32
   1bca0:	4618      	mov	r0, r3
   1bca2:	f7e5 fb2d 	bl	1300 <vstr_init>
    mp_obj_t lcd_o = mp_call_function_0(mp_load_name(qstr_from_str("LCD")));
    mp_call_function_1(mp_load_attr(lcd_o, qstr_from_str("light")), mp_const_true);
#endif

friendly_repl_reset:
    mp_hal_stdout_tx_str("MicroPython " MICROPY_GIT_TAG " on " MICROPY_BUILD_DATE "; " MICROPY_HW_BOARD_NAME " with " MICROPY_HW_MCU_NAME "\r\n");
   1bca6:	485a      	ldr	r0, [pc, #360]	; (1be10 <pyexec_friendly_repl+0x17c>)
   1bca8:	f7ff fe74 	bl	1b994 <mp_hal_stdout_tx_str>
                mp_hal_stdout_tx_str("PYB: enabling IRQs\r\n");
            }
        }
        #endif

        vstr_reset(&line);
   1bcac:	f107 0308 	add.w	r3, r7, #8
   1bcb0:	4618      	mov	r0, r3
   1bcb2:	f7ff fe7f 	bl	1b9b4 <vstr_reset>
        int ret = readline(&line, ">>> ");
   1bcb6:	f107 0308 	add.w	r3, r7, #8
   1bcba:	4956      	ldr	r1, [pc, #344]	; (1be14 <pyexec_friendly_repl+0x180>)
   1bcbc:	4618      	mov	r0, r3
   1bcbe:	f000 fe87 	bl	1c9d0 <readline>
   1bcc2:	61b8      	str	r0, [r7, #24]
        mp_parse_input_kind_t parse_input_kind = MP_PARSE_SINGLE_INPUT;
   1bcc4:	2300      	movs	r3, #0
   1bcc6:	61fb      	str	r3, [r7, #28]

        if (ret == CHAR_CTRL_A) {
   1bcc8:	69bb      	ldr	r3, [r7, #24]
   1bcca:	2b01      	cmp	r3, #1
   1bccc:	d10c      	bne.n	1bce8 <pyexec_friendly_repl+0x54>
            // change to raw REPL
            mp_hal_stdout_tx_str("\r\n");
   1bcce:	4852      	ldr	r0, [pc, #328]	; (1be18 <pyexec_friendly_repl+0x184>)
   1bcd0:	f7ff fe60 	bl	1b994 <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1bcd4:	f107 0308 	add.w	r3, r7, #8
   1bcd8:	4618      	mov	r0, r3
   1bcda:	f7e5 fb75 	bl	13c8 <vstr_clear>
            pyexec_mode_kind = PYEXEC_MODE_RAW_REPL;
   1bcde:	4b4f      	ldr	r3, [pc, #316]	; (1be1c <pyexec_friendly_repl+0x188>)
   1bce0:	2200      	movs	r2, #0
   1bce2:	601a      	str	r2, [r3, #0]
            return 0;
   1bce4:	2300      	movs	r3, #0
   1bce6:	e08f      	b.n	1be08 <pyexec_friendly_repl+0x174>
        } else if (ret == CHAR_CTRL_B) {
   1bce8:	69bb      	ldr	r3, [r7, #24]
   1bcea:	2b02      	cmp	r3, #2
   1bcec:	d103      	bne.n	1bcf6 <pyexec_friendly_repl+0x62>
            // reset friendly REPL
            mp_hal_stdout_tx_str("\r\n");
   1bcee:	484a      	ldr	r0, [pc, #296]	; (1be18 <pyexec_friendly_repl+0x184>)
   1bcf0:	f7ff fe50 	bl	1b994 <mp_hal_stdout_tx_str>
            goto friendly_repl_reset;
   1bcf4:	e7d7      	b.n	1bca6 <pyexec_friendly_repl+0x12>
        } else if (ret == CHAR_CTRL_C) {
   1bcf6:	69bb      	ldr	r3, [r7, #24]
   1bcf8:	2b03      	cmp	r3, #3
   1bcfa:	d103      	bne.n	1bd04 <pyexec_friendly_repl+0x70>
            // break
            mp_hal_stdout_tx_str("\r\n");
   1bcfc:	4846      	ldr	r0, [pc, #280]	; (1be18 <pyexec_friendly_repl+0x184>)
   1bcfe:	f7ff fe49 	bl	1b994 <mp_hal_stdout_tx_str>
            continue;
   1bd02:	e080      	b.n	1be06 <pyexec_friendly_repl+0x172>
        } else if (ret == CHAR_CTRL_D) {
   1bd04:	69bb      	ldr	r3, [r7, #24]
   1bd06:	2b04      	cmp	r3, #4
   1bd08:	d10a      	bne.n	1bd20 <pyexec_friendly_repl+0x8c>
            // exit for a soft reset
            mp_hal_stdout_tx_str("\r\n");
   1bd0a:	4843      	ldr	r0, [pc, #268]	; (1be18 <pyexec_friendly_repl+0x184>)
   1bd0c:	f7ff fe42 	bl	1b994 <mp_hal_stdout_tx_str>
            vstr_clear(&line);
   1bd10:	f107 0308 	add.w	r3, r7, #8
   1bd14:	4618      	mov	r0, r3
   1bd16:	f7e5 fb57 	bl	13c8 <vstr_clear>
            return PYEXEC_FORCED_EXIT;
   1bd1a:	f44f 7380 	mov.w	r3, #256	; 0x100
   1bd1e:	e073      	b.n	1be08 <pyexec_friendly_repl+0x174>
        } else if (ret == CHAR_CTRL_E) {
   1bd20:	69bb      	ldr	r3, [r7, #24]
   1bd22:	2b05      	cmp	r3, #5
   1bd24:	d130      	bne.n	1bd88 <pyexec_friendly_repl+0xf4>
            // paste mode
            mp_hal_stdout_tx_str("\r\npaste mode; Ctrl-C to cancel, Ctrl-D to finish\r\n=== ");
   1bd26:	483e      	ldr	r0, [pc, #248]	; (1be20 <pyexec_friendly_repl+0x18c>)
   1bd28:	f7ff fe34 	bl	1b994 <mp_hal_stdout_tx_str>
            vstr_reset(&line);
   1bd2c:	f107 0308 	add.w	r3, r7, #8
   1bd30:	4618      	mov	r0, r3
   1bd32:	f7ff fe3f 	bl	1b9b4 <vstr_reset>
            for (;;) {
                char c = mp_hal_stdin_rx_chr();
   1bd36:	f7ff fd11 	bl	1b75c <mp_hal_stdin_rx_chr>
   1bd3a:	4603      	mov	r3, r0
   1bd3c:	b2db      	uxtb	r3, r3
   1bd3e:	71fb      	strb	r3, [r7, #7]
                if (c == CHAR_CTRL_C) {
   1bd40:	79fb      	ldrb	r3, [r7, #7]
   1bd42:	2b03      	cmp	r3, #3
   1bd44:	d103      	bne.n	1bd4e <pyexec_friendly_repl+0xba>
                    // cancel everything
                    mp_hal_stdout_tx_str("\r\n");
   1bd46:	4834      	ldr	r0, [pc, #208]	; (1be18 <pyexec_friendly_repl+0x184>)
   1bd48:	f7ff fe24 	bl	1b994 <mp_hal_stdout_tx_str>
   1bd4c:	e7ae      	b.n	1bcac <pyexec_friendly_repl+0x18>
                    goto input_restart;
                } else if (c == CHAR_CTRL_D) {
   1bd4e:	79fb      	ldrb	r3, [r7, #7]
   1bd50:	2b04      	cmp	r3, #4
   1bd52:	d105      	bne.n	1bd60 <pyexec_friendly_repl+0xcc>
                    // end of input
                    mp_hal_stdout_tx_str("\r\n");
   1bd54:	4830      	ldr	r0, [pc, #192]	; (1be18 <pyexec_friendly_repl+0x184>)
   1bd56:	f7ff fe1d 	bl	1b994 <mp_hal_stdout_tx_str>
                    } else {
                        mp_hal_stdout_tx_strn(&c, 1);
                    }
                }
            }
            parse_input_kind = MP_PARSE_FILE_INPUT;
   1bd5a:	2301      	movs	r3, #1
   1bd5c:	61fb      	str	r3, [r7, #28]
   1bd5e:	e041      	b.n	1bde4 <pyexec_friendly_repl+0x150>
                    vstr_add_byte(&line, c);
   1bd60:	79fa      	ldrb	r2, [r7, #7]
   1bd62:	f107 0308 	add.w	r3, r7, #8
   1bd66:	4611      	mov	r1, r2
   1bd68:	4618      	mov	r0, r3
   1bd6a:	f7e5 fc1f 	bl	15ac <vstr_add_byte>
                    if (c == '\r') {
   1bd6e:	79fb      	ldrb	r3, [r7, #7]
   1bd70:	2b0d      	cmp	r3, #13
   1bd72:	d103      	bne.n	1bd7c <pyexec_friendly_repl+0xe8>
                        mp_hal_stdout_tx_str("\r\n=== ");
   1bd74:	482b      	ldr	r0, [pc, #172]	; (1be24 <pyexec_friendly_repl+0x190>)
   1bd76:	f7ff fe0d 	bl	1b994 <mp_hal_stdout_tx_str>
   1bd7a:	e7dc      	b.n	1bd36 <pyexec_friendly_repl+0xa2>
                        mp_hal_stdout_tx_strn(&c, 1);
   1bd7c:	1dfb      	adds	r3, r7, #7
   1bd7e:	2101      	movs	r1, #1
   1bd80:	4618      	mov	r0, r3
   1bd82:	f7ff fd03 	bl	1b78c <mp_hal_stdout_tx_strn>
            }
   1bd86:	e7d6      	b.n	1bd36 <pyexec_friendly_repl+0xa2>
        } else if (vstr_len(&line) == 0) {
   1bd88:	f107 0308 	add.w	r3, r7, #8
   1bd8c:	4618      	mov	r0, r3
   1bd8e:	f7ff fe1f 	bl	1b9d0 <vstr_len>
   1bd92:	4603      	mov	r3, r0
   1bd94:	2b00      	cmp	r3, #0
   1bd96:	d035      	beq.n	1be04 <pyexec_friendly_repl+0x170>
            continue;
        } else {
            // got a line with non-zero length, see if it needs continuing
            while (mp_repl_continue_with_input(vstr_null_terminated_str(&line))) {
   1bd98:	e016      	b.n	1bdc8 <pyexec_friendly_repl+0x134>
                vstr_add_byte(&line, '\n');
   1bd9a:	f107 0308 	add.w	r3, r7, #8
   1bd9e:	210a      	movs	r1, #10
   1bda0:	4618      	mov	r0, r3
   1bda2:	f7e5 fc03 	bl	15ac <vstr_add_byte>
                ret = readline(&line, "... ");
   1bda6:	f107 0308 	add.w	r3, r7, #8
   1bdaa:	491f      	ldr	r1, [pc, #124]	; (1be28 <pyexec_friendly_repl+0x194>)
   1bdac:	4618      	mov	r0, r3
   1bdae:	f000 fe0f 	bl	1c9d0 <readline>
   1bdb2:	61b8      	str	r0, [r7, #24]
                if (ret == CHAR_CTRL_C) {
   1bdb4:	69bb      	ldr	r3, [r7, #24]
   1bdb6:	2b03      	cmp	r3, #3
   1bdb8:	d103      	bne.n	1bdc2 <pyexec_friendly_repl+0x12e>
                    // cancel everything
                    mp_hal_stdout_tx_str("\r\n");
   1bdba:	4817      	ldr	r0, [pc, #92]	; (1be18 <pyexec_friendly_repl+0x184>)
   1bdbc:	f7ff fdea 	bl	1b994 <mp_hal_stdout_tx_str>
                    goto input_restart;
   1bdc0:	e774      	b.n	1bcac <pyexec_friendly_repl+0x18>
                } else if (ret == CHAR_CTRL_D) {
   1bdc2:	69bb      	ldr	r3, [r7, #24]
   1bdc4:	2b04      	cmp	r3, #4
   1bdc6:	d00c      	beq.n	1bde2 <pyexec_friendly_repl+0x14e>
            while (mp_repl_continue_with_input(vstr_null_terminated_str(&line))) {
   1bdc8:	f107 0308 	add.w	r3, r7, #8
   1bdcc:	4618      	mov	r0, r3
   1bdce:	f7e5 fbd1 	bl	1574 <vstr_null_terminated_str>
   1bdd2:	4603      	mov	r3, r0
   1bdd4:	4618      	mov	r0, r3
   1bdd6:	f7fe fe5f 	bl	1aa98 <mp_repl_continue_with_input>
   1bdda:	4603      	mov	r3, r0
   1bddc:	2b00      	cmp	r3, #0
   1bdde:	d1dc      	bne.n	1bd9a <pyexec_friendly_repl+0x106>
   1bde0:	e000      	b.n	1bde4 <pyexec_friendly_repl+0x150>
                    // stop entering compound statement
                    break;
   1bde2:	bf00      	nop
                }
            }
        }

        ret = parse_compile_execute(&line, parse_input_kind, EXEC_FLAG_ALLOW_DEBUGGING | EXEC_FLAG_IS_REPL | EXEC_FLAG_SOURCE_IS_VSTR);
   1bde4:	f107 0308 	add.w	r3, r7, #8
   1bde8:	2216      	movs	r2, #22
   1bdea:	69f9      	ldr	r1, [r7, #28]
   1bdec:	4618      	mov	r0, r3
   1bdee:	f7ff fe0f 	bl	1ba10 <parse_compile_execute>
   1bdf2:	61b8      	str	r0, [r7, #24]
        if (ret & PYEXEC_FORCED_EXIT) {
   1bdf4:	69bb      	ldr	r3, [r7, #24]
   1bdf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
   1bdfa:	2b00      	cmp	r3, #0
   1bdfc:	f43f af56 	beq.w	1bcac <pyexec_friendly_repl+0x18>
            return ret;
   1be00:	69bb      	ldr	r3, [r7, #24]
   1be02:	e001      	b.n	1be08 <pyexec_friendly_repl+0x174>
            continue;
   1be04:	bf00      	nop
        }
    }
   1be06:	e751      	b.n	1bcac <pyexec_friendly_repl+0x18>
}
   1be08:	4618      	mov	r0, r3
   1be0a:	3720      	adds	r7, #32
   1be0c:	46bd      	mov	sp, r7
   1be0e:	bd80      	pop	{r7, pc}
   1be10:	00022e04 	.word	0x00022e04
   1be14:	00022e5c 	.word	0x00022e5c
   1be18:	00022dfc 	.word	0x00022dfc
   1be1c:	20000000 	.word	0x20000000
   1be20:	00022e64 	.word	0x00022e64
   1be24:	00022e9c 	.word	0x00022e9c
   1be28:	00022ea4 	.word	0x00022ea4

0001be2c <pyexec_file>:

#endif // MICROPY_REPL_EVENT_DRIVEN
#endif // MICROPY_ENABLE_COMPILER

int pyexec_file(const char *filename) {
   1be2c:	b580      	push	{r7, lr}
   1be2e:	b082      	sub	sp, #8
   1be30:	af00      	add	r7, sp, #0
   1be32:	6078      	str	r0, [r7, #4]
    return parse_compile_execute(filename, MP_PARSE_FILE_INPUT, EXEC_FLAG_SOURCE_IS_FILENAME);
   1be34:	2220      	movs	r2, #32
   1be36:	2101      	movs	r1, #1
   1be38:	6878      	ldr	r0, [r7, #4]
   1be3a:	f7ff fde9 	bl	1ba10 <parse_compile_execute>
   1be3e:	4603      	mov	r3, r0
}
   1be40:	4618      	mov	r0, r3
   1be42:	3708      	adds	r7, #8
   1be44:	46bd      	mov	sp, r7
   1be46:	bd80      	pop	{r7, pc}

0001be48 <pyexec_frozen_module>:

#if MICROPY_MODULE_FROZEN
int pyexec_frozen_module(const char *name) {
   1be48:	b580      	push	{r7, lr}
   1be4a:	b084      	sub	sp, #16
   1be4c:	af00      	add	r7, sp, #0
   1be4e:	6078      	str	r0, [r7, #4]
    void *frozen_data;
    int frozen_type = mp_find_frozen_module(name, strlen(name), &frozen_data);
   1be50:	6878      	ldr	r0, [r7, #4]
   1be52:	f000 f971 	bl	1c138 <strlen>
   1be56:	4601      	mov	r1, r0
   1be58:	f107 0308 	add.w	r3, r7, #8
   1be5c:	461a      	mov	r2, r3
   1be5e:	6878      	ldr	r0, [r7, #4]
   1be60:	f7ff f9c8 	bl	1b1f4 <mp_find_frozen_module>
   1be64:	60f8      	str	r0, [r7, #12]

    switch (frozen_type) {
   1be66:	68fb      	ldr	r3, [r7, #12]
   1be68:	2b02      	cmp	r3, #2
   1be6a:	d107      	bne.n	1be7c <pyexec_frozen_module+0x34>
            return parse_compile_execute(frozen_data, MP_PARSE_FILE_INPUT, 0);
        #endif

        #if MICROPY_MODULE_FROZEN_MPY
        case MP_FROZEN_MPY:
            return parse_compile_execute(frozen_data, MP_PARSE_FILE_INPUT, EXEC_FLAG_SOURCE_IS_RAW_CODE);
   1be6c:	68bb      	ldr	r3, [r7, #8]
   1be6e:	2208      	movs	r2, #8
   1be70:	2101      	movs	r1, #1
   1be72:	4618      	mov	r0, r3
   1be74:	f7ff fdcc 	bl	1ba10 <parse_compile_execute>
   1be78:	4603      	mov	r3, r0
   1be7a:	e004      	b.n	1be86 <pyexec_frozen_module+0x3e>
        #endif

        default:
            printf("could not find module '%s'\n", name);
   1be7c:	6879      	ldr	r1, [r7, #4]
   1be7e:	4804      	ldr	r0, [pc, #16]	; (1be90 <pyexec_frozen_module+0x48>)
   1be80:	f7ff fca4 	bl	1b7cc <printf>
            return false;
   1be84:	2300      	movs	r3, #0
    }
}
   1be86:	4618      	mov	r0, r3
   1be88:	3710      	adds	r7, #16
   1be8a:	46bd      	mov	sp, r7
   1be8c:	bd80      	pop	{r7, pc}
   1be8e:	bf00      	nop
   1be90:	00022eac 	.word	0x00022eac

0001be94 <pyb_set_repl_info>:
#endif

mp_obj_t pyb_set_repl_info(mp_obj_t o_value) {
   1be94:	b580      	push	{r7, lr}
   1be96:	b082      	sub	sp, #8
   1be98:	af00      	add	r7, sp, #0
   1be9a:	6078      	str	r0, [r7, #4]
    repl_display_debugging_info = mp_obj_get_int(o_value);
   1be9c:	6878      	ldr	r0, [r7, #4]
   1be9e:	f7f1 fe97 	bl	dbd0 <mp_obj_get_int>
   1bea2:	4603      	mov	r3, r0
   1bea4:	2b00      	cmp	r3, #0
   1bea6:	bf14      	ite	ne
   1bea8:	2301      	movne	r3, #1
   1beaa:	2300      	moveq	r3, #0
   1beac:	b2da      	uxtb	r2, r3
   1beae:	4b03      	ldr	r3, [pc, #12]	; (1bebc <pyb_set_repl_info+0x28>)
   1beb0:	701a      	strb	r2, [r3, #0]
    return mp_const_none;
   1beb2:	4b03      	ldr	r3, [pc, #12]	; (1bec0 <pyb_set_repl_info+0x2c>)
}
   1beb4:	4618      	mov	r0, r3
   1beb6:	3708      	adds	r7, #8
   1beb8:	46bd      	mov	sp, r7
   1beba:	bd80      	pop	{r7, pc}
   1bebc:	20000a0c 	.word	0x20000a0c
   1bec0:	00021534 	.word	0x00021534

0001bec4 <memcpy>:
#include <stdint.h>
#include <string.h>

#define likely(x) __builtin_expect((x), 1)

void *memcpy(void *dst, const void *src, size_t n) {
   1bec4:	b480      	push	{r7}
   1bec6:	b08b      	sub	sp, #44	; 0x2c
   1bec8:	af00      	add	r7, sp, #0
   1beca:	60f8      	str	r0, [r7, #12]
   1becc:	60b9      	str	r1, [r7, #8]
   1bece:	607a      	str	r2, [r7, #4]
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1bed0:	68fb      	ldr	r3, [r7, #12]
   1bed2:	f003 0303 	and.w	r3, r3, #3
   1bed6:	2b00      	cmp	r3, #0
   1bed8:	bf0c      	ite	eq
   1beda:	2301      	moveq	r3, #1
   1bedc:	2300      	movne	r3, #0
   1bede:	b2db      	uxtb	r3, r3
   1bee0:	2b00      	cmp	r3, #0
   1bee2:	d038      	beq.n	1bf56 <memcpy+0x92>
   1bee4:	68bb      	ldr	r3, [r7, #8]
   1bee6:	f003 0303 	and.w	r3, r3, #3
   1beea:	2b00      	cmp	r3, #0
   1beec:	bf0c      	ite	eq
   1beee:	2301      	moveq	r3, #1
   1bef0:	2300      	movne	r3, #0
   1bef2:	b2db      	uxtb	r3, r3
   1bef4:	2b00      	cmp	r3, #0
   1bef6:	d02e      	beq.n	1bf56 <memcpy+0x92>
        // pointers aligned
        uint32_t *d = dst;
   1bef8:	68fb      	ldr	r3, [r7, #12]
   1befa:	627b      	str	r3, [r7, #36]	; 0x24
        const uint32_t *s = src;
   1befc:	68bb      	ldr	r3, [r7, #8]
   1befe:	623b      	str	r3, [r7, #32]

        // copy words first
        for (size_t i = (n >> 2); i; i--) {
   1bf00:	687b      	ldr	r3, [r7, #4]
   1bf02:	089b      	lsrs	r3, r3, #2
   1bf04:	61fb      	str	r3, [r7, #28]
   1bf06:	e00a      	b.n	1bf1e <memcpy+0x5a>
            *d++ = *s++;
   1bf08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bf0a:	1d1a      	adds	r2, r3, #4
   1bf0c:	627a      	str	r2, [r7, #36]	; 0x24
   1bf0e:	6a3a      	ldr	r2, [r7, #32]
   1bf10:	1d11      	adds	r1, r2, #4
   1bf12:	6239      	str	r1, [r7, #32]
   1bf14:	6812      	ldr	r2, [r2, #0]
   1bf16:	601a      	str	r2, [r3, #0]
        for (size_t i = (n >> 2); i; i--) {
   1bf18:	69fb      	ldr	r3, [r7, #28]
   1bf1a:	3b01      	subs	r3, #1
   1bf1c:	61fb      	str	r3, [r7, #28]
   1bf1e:	69fb      	ldr	r3, [r7, #28]
   1bf20:	2b00      	cmp	r3, #0
   1bf22:	d1f1      	bne.n	1bf08 <memcpy+0x44>
        }

        if (n & 2) {
   1bf24:	687b      	ldr	r3, [r7, #4]
   1bf26:	f003 0302 	and.w	r3, r3, #2
   1bf2a:	2b00      	cmp	r3, #0
   1bf2c:	d009      	beq.n	1bf42 <memcpy+0x7e>
            // copy half-word
            *(uint16_t*)d = *(const uint16_t*)s;
   1bf2e:	6a3b      	ldr	r3, [r7, #32]
   1bf30:	881a      	ldrh	r2, [r3, #0]
   1bf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bf34:	801a      	strh	r2, [r3, #0]
            d = (uint32_t*)((uint16_t*)d + 1);
   1bf36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bf38:	3302      	adds	r3, #2
   1bf3a:	627b      	str	r3, [r7, #36]	; 0x24
            s = (const uint32_t*)((const uint16_t*)s + 1);
   1bf3c:	6a3b      	ldr	r3, [r7, #32]
   1bf3e:	3302      	adds	r3, #2
   1bf40:	623b      	str	r3, [r7, #32]
        }

        if (n & 1) {
   1bf42:	687b      	ldr	r3, [r7, #4]
   1bf44:	f003 0301 	and.w	r3, r3, #1
   1bf48:	2b00      	cmp	r3, #0
   1bf4a:	d018      	beq.n	1bf7e <memcpy+0xba>
            // copy byte
            *((uint8_t*)d) = *((const uint8_t*)s);
   1bf4c:	6a3b      	ldr	r3, [r7, #32]
   1bf4e:	781a      	ldrb	r2, [r3, #0]
   1bf50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bf52:	701a      	strb	r2, [r3, #0]
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1bf54:	e013      	b.n	1bf7e <memcpy+0xba>
        }
    } else {
        // unaligned access, copy bytes
        uint8_t *d = dst;
   1bf56:	68fb      	ldr	r3, [r7, #12]
   1bf58:	61bb      	str	r3, [r7, #24]
        const uint8_t *s = src;
   1bf5a:	68bb      	ldr	r3, [r7, #8]
   1bf5c:	617b      	str	r3, [r7, #20]

        for (; n; n--) {
   1bf5e:	e00a      	b.n	1bf76 <memcpy+0xb2>
            *d++ = *s++;
   1bf60:	69bb      	ldr	r3, [r7, #24]
   1bf62:	1c5a      	adds	r2, r3, #1
   1bf64:	61ba      	str	r2, [r7, #24]
   1bf66:	697a      	ldr	r2, [r7, #20]
   1bf68:	1c51      	adds	r1, r2, #1
   1bf6a:	6179      	str	r1, [r7, #20]
   1bf6c:	7812      	ldrb	r2, [r2, #0]
   1bf6e:	701a      	strb	r2, [r3, #0]
        for (; n; n--) {
   1bf70:	687b      	ldr	r3, [r7, #4]
   1bf72:	3b01      	subs	r3, #1
   1bf74:	607b      	str	r3, [r7, #4]
   1bf76:	687b      	ldr	r3, [r7, #4]
   1bf78:	2b00      	cmp	r3, #0
   1bf7a:	d1f1      	bne.n	1bf60 <memcpy+0x9c>
   1bf7c:	e000      	b.n	1bf80 <memcpy+0xbc>
    if (likely(!(((uintptr_t)dst) & 3) && !(((uintptr_t)src) & 3))) {
   1bf7e:	bf00      	nop
        }
    }

    return dst;
   1bf80:	68fb      	ldr	r3, [r7, #12]
}
   1bf82:	4618      	mov	r0, r3
   1bf84:	372c      	adds	r7, #44	; 0x2c
   1bf86:	46bd      	mov	sp, r7
   1bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bf8c:	4770      	bx	lr
   1bf8e:	bf00      	nop

0001bf90 <memmove>:

void *memmove(void *dest, const void *src, size_t n) {
   1bf90:	b580      	push	{r7, lr}
   1bf92:	b086      	sub	sp, #24
   1bf94:	af00      	add	r7, sp, #0
   1bf96:	60f8      	str	r0, [r7, #12]
   1bf98:	60b9      	str	r1, [r7, #8]
   1bf9a:	607a      	str	r2, [r7, #4]
    if (src < dest && (uint8_t*)dest < (const uint8_t*)src + n) {
   1bf9c:	68ba      	ldr	r2, [r7, #8]
   1bf9e:	68fb      	ldr	r3, [r7, #12]
   1bfa0:	429a      	cmp	r2, r3
   1bfa2:	d220      	bcs.n	1bfe6 <memmove+0x56>
   1bfa4:	68ba      	ldr	r2, [r7, #8]
   1bfa6:	687b      	ldr	r3, [r7, #4]
   1bfa8:	441a      	add	r2, r3
   1bfaa:	68fb      	ldr	r3, [r7, #12]
   1bfac:	429a      	cmp	r2, r3
   1bfae:	d91a      	bls.n	1bfe6 <memmove+0x56>
        // need to copy backwards
        uint8_t *d = (uint8_t*)dest + n - 1;
   1bfb0:	687b      	ldr	r3, [r7, #4]
   1bfb2:	3b01      	subs	r3, #1
   1bfb4:	68fa      	ldr	r2, [r7, #12]
   1bfb6:	4413      	add	r3, r2
   1bfb8:	617b      	str	r3, [r7, #20]
        const uint8_t *s = (const uint8_t*)src + n - 1;
   1bfba:	687b      	ldr	r3, [r7, #4]
   1bfbc:	3b01      	subs	r3, #1
   1bfbe:	68ba      	ldr	r2, [r7, #8]
   1bfc0:	4413      	add	r3, r2
   1bfc2:	613b      	str	r3, [r7, #16]
        for (; n > 0; n--) {
   1bfc4:	e00a      	b.n	1bfdc <memmove+0x4c>
            *d-- = *s--;
   1bfc6:	697b      	ldr	r3, [r7, #20]
   1bfc8:	1e5a      	subs	r2, r3, #1
   1bfca:	617a      	str	r2, [r7, #20]
   1bfcc:	693a      	ldr	r2, [r7, #16]
   1bfce:	1e51      	subs	r1, r2, #1
   1bfd0:	6139      	str	r1, [r7, #16]
   1bfd2:	7812      	ldrb	r2, [r2, #0]
   1bfd4:	701a      	strb	r2, [r3, #0]
        for (; n > 0; n--) {
   1bfd6:	687b      	ldr	r3, [r7, #4]
   1bfd8:	3b01      	subs	r3, #1
   1bfda:	607b      	str	r3, [r7, #4]
   1bfdc:	687b      	ldr	r3, [r7, #4]
   1bfde:	2b00      	cmp	r3, #0
   1bfe0:	d1f1      	bne.n	1bfc6 <memmove+0x36>
        }
        return dest;
   1bfe2:	68fb      	ldr	r3, [r7, #12]
   1bfe4:	e005      	b.n	1bff2 <memmove+0x62>
    } else {
        // can use normal memcpy
        return memcpy(dest, src, n);
   1bfe6:	687a      	ldr	r2, [r7, #4]
   1bfe8:	68b9      	ldr	r1, [r7, #8]
   1bfea:	68f8      	ldr	r0, [r7, #12]
   1bfec:	f7ff ff6a 	bl	1bec4 <memcpy>
   1bff0:	4603      	mov	r3, r0
    }
}
   1bff2:	4618      	mov	r0, r3
   1bff4:	3718      	adds	r7, #24
   1bff6:	46bd      	mov	sp, r7
   1bff8:	bd80      	pop	{r7, pc}
   1bffa:	bf00      	nop

0001bffc <memset>:

void *memset(void *s, int c, size_t n) {
   1bffc:	b480      	push	{r7}
   1bffe:	b089      	sub	sp, #36	; 0x24
   1c000:	af00      	add	r7, sp, #0
   1c002:	60f8      	str	r0, [r7, #12]
   1c004:	60b9      	str	r1, [r7, #8]
   1c006:	607a      	str	r2, [r7, #4]
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1c008:	68bb      	ldr	r3, [r7, #8]
   1c00a:	2b00      	cmp	r3, #0
   1c00c:	d129      	bne.n	1c062 <memset+0x66>
   1c00e:	68fb      	ldr	r3, [r7, #12]
   1c010:	f003 0303 	and.w	r3, r3, #3
   1c014:	2b00      	cmp	r3, #0
   1c016:	d124      	bne.n	1c062 <memset+0x66>
        // aligned store of 0
        uint32_t *s32 = s;
   1c018:	68fb      	ldr	r3, [r7, #12]
   1c01a:	61fb      	str	r3, [r7, #28]
        for (size_t i = n >> 2; i > 0; i--) {
   1c01c:	687b      	ldr	r3, [r7, #4]
   1c01e:	089b      	lsrs	r3, r3, #2
   1c020:	61bb      	str	r3, [r7, #24]
   1c022:	e007      	b.n	1c034 <memset+0x38>
            *s32++ = 0;
   1c024:	69fb      	ldr	r3, [r7, #28]
   1c026:	1d1a      	adds	r2, r3, #4
   1c028:	61fa      	str	r2, [r7, #28]
   1c02a:	2200      	movs	r2, #0
   1c02c:	601a      	str	r2, [r3, #0]
        for (size_t i = n >> 2; i > 0; i--) {
   1c02e:	69bb      	ldr	r3, [r7, #24]
   1c030:	3b01      	subs	r3, #1
   1c032:	61bb      	str	r3, [r7, #24]
   1c034:	69bb      	ldr	r3, [r7, #24]
   1c036:	2b00      	cmp	r3, #0
   1c038:	d1f4      	bne.n	1c024 <memset+0x28>
        }
        if (n & 2) {
   1c03a:	687b      	ldr	r3, [r7, #4]
   1c03c:	f003 0302 	and.w	r3, r3, #2
   1c040:	2b00      	cmp	r3, #0
   1c042:	d005      	beq.n	1c050 <memset+0x54>
            *((uint16_t*)s32) = 0;
   1c044:	69fb      	ldr	r3, [r7, #28]
   1c046:	2200      	movs	r2, #0
   1c048:	801a      	strh	r2, [r3, #0]
            s32 = (uint32_t*)((uint16_t*)s32 + 1);
   1c04a:	69fb      	ldr	r3, [r7, #28]
   1c04c:	3302      	adds	r3, #2
   1c04e:	61fb      	str	r3, [r7, #28]
        }
        if (n & 1) {
   1c050:	687b      	ldr	r3, [r7, #4]
   1c052:	f003 0301 	and.w	r3, r3, #1
   1c056:	2b00      	cmp	r3, #0
   1c058:	d013      	beq.n	1c082 <memset+0x86>
            *((uint8_t*)s32) = 0;
   1c05a:	69fb      	ldr	r3, [r7, #28]
   1c05c:	2200      	movs	r2, #0
   1c05e:	701a      	strb	r2, [r3, #0]
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1c060:	e00f      	b.n	1c082 <memset+0x86>
        }
    } else {
        uint8_t *s2 = s;
   1c062:	68fb      	ldr	r3, [r7, #12]
   1c064:	617b      	str	r3, [r7, #20]
        for (; n > 0; n--) {
   1c066:	e008      	b.n	1c07a <memset+0x7e>
            *s2++ = c;
   1c068:	697b      	ldr	r3, [r7, #20]
   1c06a:	1c5a      	adds	r2, r3, #1
   1c06c:	617a      	str	r2, [r7, #20]
   1c06e:	68ba      	ldr	r2, [r7, #8]
   1c070:	b2d2      	uxtb	r2, r2
   1c072:	701a      	strb	r2, [r3, #0]
        for (; n > 0; n--) {
   1c074:	687b      	ldr	r3, [r7, #4]
   1c076:	3b01      	subs	r3, #1
   1c078:	607b      	str	r3, [r7, #4]
   1c07a:	687b      	ldr	r3, [r7, #4]
   1c07c:	2b00      	cmp	r3, #0
   1c07e:	d1f3      	bne.n	1c068 <memset+0x6c>
   1c080:	e000      	b.n	1c084 <memset+0x88>
    if (c == 0 && ((uintptr_t)s & 3) == 0) {
   1c082:	bf00      	nop
        }
    }
    return s;
   1c084:	68fb      	ldr	r3, [r7, #12]
}
   1c086:	4618      	mov	r0, r3
   1c088:	3724      	adds	r7, #36	; 0x24
   1c08a:	46bd      	mov	sp, r7
   1c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c090:	4770      	bx	lr
   1c092:	bf00      	nop

0001c094 <memcmp>:

int memcmp(const void *s1, const void *s2, size_t n) {
   1c094:	b480      	push	{r7}
   1c096:	b089      	sub	sp, #36	; 0x24
   1c098:	af00      	add	r7, sp, #0
   1c09a:	60f8      	str	r0, [r7, #12]
   1c09c:	60b9      	str	r1, [r7, #8]
   1c09e:	607a      	str	r2, [r7, #4]
    const uint8_t *s1_8 = s1;
   1c0a0:	68fb      	ldr	r3, [r7, #12]
   1c0a2:	61fb      	str	r3, [r7, #28]
    const uint8_t *s2_8 = s2;
   1c0a4:	68bb      	ldr	r3, [r7, #8]
   1c0a6:	61bb      	str	r3, [r7, #24]
    while (n--) {
   1c0a8:	e016      	b.n	1c0d8 <memcmp+0x44>
        char c1 = *s1_8++;
   1c0aa:	69fb      	ldr	r3, [r7, #28]
   1c0ac:	1c5a      	adds	r2, r3, #1
   1c0ae:	61fa      	str	r2, [r7, #28]
   1c0b0:	781b      	ldrb	r3, [r3, #0]
   1c0b2:	75fb      	strb	r3, [r7, #23]
        char c2 = *s2_8++;
   1c0b4:	69bb      	ldr	r3, [r7, #24]
   1c0b6:	1c5a      	adds	r2, r3, #1
   1c0b8:	61ba      	str	r2, [r7, #24]
   1c0ba:	781b      	ldrb	r3, [r3, #0]
   1c0bc:	75bb      	strb	r3, [r7, #22]
        if (c1 < c2) return -1;
   1c0be:	7dfa      	ldrb	r2, [r7, #23]
   1c0c0:	7dbb      	ldrb	r3, [r7, #22]
   1c0c2:	429a      	cmp	r2, r3
   1c0c4:	d202      	bcs.n	1c0cc <memcmp+0x38>
   1c0c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c0ca:	e00b      	b.n	1c0e4 <memcmp+0x50>
        else if (c1 > c2) return 1;
   1c0cc:	7dfa      	ldrb	r2, [r7, #23]
   1c0ce:	7dbb      	ldrb	r3, [r7, #22]
   1c0d0:	429a      	cmp	r2, r3
   1c0d2:	d901      	bls.n	1c0d8 <memcmp+0x44>
   1c0d4:	2301      	movs	r3, #1
   1c0d6:	e005      	b.n	1c0e4 <memcmp+0x50>
    while (n--) {
   1c0d8:	687b      	ldr	r3, [r7, #4]
   1c0da:	1e5a      	subs	r2, r3, #1
   1c0dc:	607a      	str	r2, [r7, #4]
   1c0de:	2b00      	cmp	r3, #0
   1c0e0:	d1e3      	bne.n	1c0aa <memcmp+0x16>
    }
    return 0;
   1c0e2:	2300      	movs	r3, #0
}
   1c0e4:	4618      	mov	r0, r3
   1c0e6:	3724      	adds	r7, #36	; 0x24
   1c0e8:	46bd      	mov	sp, r7
   1c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c0ee:	4770      	bx	lr

0001c0f0 <memchr>:

void *memchr(const void *s, int c, size_t n) {
   1c0f0:	b480      	push	{r7}
   1c0f2:	b087      	sub	sp, #28
   1c0f4:	af00      	add	r7, sp, #0
   1c0f6:	60f8      	str	r0, [r7, #12]
   1c0f8:	60b9      	str	r1, [r7, #8]
   1c0fa:	607a      	str	r2, [r7, #4]
    if (n != 0) {
   1c0fc:	687b      	ldr	r3, [r7, #4]
   1c0fe:	2b00      	cmp	r3, #0
   1c100:	d012      	beq.n	1c128 <memchr+0x38>
        const unsigned char *p = s;
   1c102:	68fb      	ldr	r3, [r7, #12]
   1c104:	617b      	str	r3, [r7, #20]

        do {
            if (*p++ == c)
   1c106:	697b      	ldr	r3, [r7, #20]
   1c108:	1c5a      	adds	r2, r3, #1
   1c10a:	617a      	str	r2, [r7, #20]
   1c10c:	781b      	ldrb	r3, [r3, #0]
   1c10e:	461a      	mov	r2, r3
   1c110:	68bb      	ldr	r3, [r7, #8]
   1c112:	429a      	cmp	r2, r3
   1c114:	d102      	bne.n	1c11c <memchr+0x2c>
                return ((void *)(p - 1));
   1c116:	697b      	ldr	r3, [r7, #20]
   1c118:	3b01      	subs	r3, #1
   1c11a:	e006      	b.n	1c12a <memchr+0x3a>
        } while (--n != 0);
   1c11c:	687b      	ldr	r3, [r7, #4]
   1c11e:	3b01      	subs	r3, #1
   1c120:	607b      	str	r3, [r7, #4]
   1c122:	687b      	ldr	r3, [r7, #4]
   1c124:	2b00      	cmp	r3, #0
   1c126:	d1ee      	bne.n	1c106 <memchr+0x16>
    }
    return 0;
   1c128:	2300      	movs	r3, #0
}
   1c12a:	4618      	mov	r0, r3
   1c12c:	371c      	adds	r7, #28
   1c12e:	46bd      	mov	sp, r7
   1c130:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c134:	4770      	bx	lr
   1c136:	bf00      	nop

0001c138 <strlen>:

size_t strlen(const char *str) {
   1c138:	b480      	push	{r7}
   1c13a:	b085      	sub	sp, #20
   1c13c:	af00      	add	r7, sp, #0
   1c13e:	6078      	str	r0, [r7, #4]
    int len = 0;
   1c140:	2300      	movs	r3, #0
   1c142:	60fb      	str	r3, [r7, #12]
    for (const char *s = str; *s; s++) {
   1c144:	687b      	ldr	r3, [r7, #4]
   1c146:	60bb      	str	r3, [r7, #8]
   1c148:	e005      	b.n	1c156 <strlen+0x1e>
        len += 1;
   1c14a:	68fb      	ldr	r3, [r7, #12]
   1c14c:	3301      	adds	r3, #1
   1c14e:	60fb      	str	r3, [r7, #12]
    for (const char *s = str; *s; s++) {
   1c150:	68bb      	ldr	r3, [r7, #8]
   1c152:	3301      	adds	r3, #1
   1c154:	60bb      	str	r3, [r7, #8]
   1c156:	68bb      	ldr	r3, [r7, #8]
   1c158:	781b      	ldrb	r3, [r3, #0]
   1c15a:	2b00      	cmp	r3, #0
   1c15c:	d1f5      	bne.n	1c14a <strlen+0x12>
    }
    return len;
   1c15e:	68fb      	ldr	r3, [r7, #12]
}
   1c160:	4618      	mov	r0, r3
   1c162:	3714      	adds	r7, #20
   1c164:	46bd      	mov	sp, r7
   1c166:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c16a:	4770      	bx	lr

0001c16c <strcmp>:

int strcmp(const char *s1, const char *s2) {
   1c16c:	b480      	push	{r7}
   1c16e:	b085      	sub	sp, #20
   1c170:	af00      	add	r7, sp, #0
   1c172:	6078      	str	r0, [r7, #4]
   1c174:	6039      	str	r1, [r7, #0]
    while (*s1 && *s2) {
   1c176:	e016      	b.n	1c1a6 <strcmp+0x3a>
        char c1 = *s1++; // XXX UTF8 get char, next char
   1c178:	687b      	ldr	r3, [r7, #4]
   1c17a:	1c5a      	adds	r2, r3, #1
   1c17c:	607a      	str	r2, [r7, #4]
   1c17e:	781b      	ldrb	r3, [r3, #0]
   1c180:	73fb      	strb	r3, [r7, #15]
        char c2 = *s2++; // XXX UTF8 get char, next char
   1c182:	683b      	ldr	r3, [r7, #0]
   1c184:	1c5a      	adds	r2, r3, #1
   1c186:	603a      	str	r2, [r7, #0]
   1c188:	781b      	ldrb	r3, [r3, #0]
   1c18a:	73bb      	strb	r3, [r7, #14]
        if (c1 < c2) return -1;
   1c18c:	7bfa      	ldrb	r2, [r7, #15]
   1c18e:	7bbb      	ldrb	r3, [r7, #14]
   1c190:	429a      	cmp	r2, r3
   1c192:	d202      	bcs.n	1c19a <strcmp+0x2e>
   1c194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c198:	e01b      	b.n	1c1d2 <strcmp+0x66>
        else if (c1 > c2) return 1;
   1c19a:	7bfa      	ldrb	r2, [r7, #15]
   1c19c:	7bbb      	ldrb	r3, [r7, #14]
   1c19e:	429a      	cmp	r2, r3
   1c1a0:	d901      	bls.n	1c1a6 <strcmp+0x3a>
   1c1a2:	2301      	movs	r3, #1
   1c1a4:	e015      	b.n	1c1d2 <strcmp+0x66>
    while (*s1 && *s2) {
   1c1a6:	687b      	ldr	r3, [r7, #4]
   1c1a8:	781b      	ldrb	r3, [r3, #0]
   1c1aa:	2b00      	cmp	r3, #0
   1c1ac:	d003      	beq.n	1c1b6 <strcmp+0x4a>
   1c1ae:	683b      	ldr	r3, [r7, #0]
   1c1b0:	781b      	ldrb	r3, [r3, #0]
   1c1b2:	2b00      	cmp	r3, #0
   1c1b4:	d1e0      	bne.n	1c178 <strcmp+0xc>
    }
    if (*s2) return -1;
   1c1b6:	683b      	ldr	r3, [r7, #0]
   1c1b8:	781b      	ldrb	r3, [r3, #0]
   1c1ba:	2b00      	cmp	r3, #0
   1c1bc:	d002      	beq.n	1c1c4 <strcmp+0x58>
   1c1be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c1c2:	e006      	b.n	1c1d2 <strcmp+0x66>
    else if (*s1) return 1;
   1c1c4:	687b      	ldr	r3, [r7, #4]
   1c1c6:	781b      	ldrb	r3, [r3, #0]
   1c1c8:	2b00      	cmp	r3, #0
   1c1ca:	d001      	beq.n	1c1d0 <strcmp+0x64>
   1c1cc:	2301      	movs	r3, #1
   1c1ce:	e000      	b.n	1c1d2 <strcmp+0x66>
    else return 0;
   1c1d0:	2300      	movs	r3, #0
}
   1c1d2:	4618      	mov	r0, r3
   1c1d4:	3714      	adds	r7, #20
   1c1d6:	46bd      	mov	sp, r7
   1c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c1dc:	4770      	bx	lr
   1c1de:	bf00      	nop

0001c1e0 <strncmp>:

int strncmp(const char *s1, const char *s2, size_t n) {
   1c1e0:	b480      	push	{r7}
   1c1e2:	b087      	sub	sp, #28
   1c1e4:	af00      	add	r7, sp, #0
   1c1e6:	60f8      	str	r0, [r7, #12]
   1c1e8:	60b9      	str	r1, [r7, #8]
   1c1ea:	607a      	str	r2, [r7, #4]
    while (*s1 && *s2 && n > 0) {
   1c1ec:	e019      	b.n	1c222 <strncmp+0x42>
        char c1 = *s1++; // XXX UTF8 get char, next char
   1c1ee:	68fb      	ldr	r3, [r7, #12]
   1c1f0:	1c5a      	adds	r2, r3, #1
   1c1f2:	60fa      	str	r2, [r7, #12]
   1c1f4:	781b      	ldrb	r3, [r3, #0]
   1c1f6:	75fb      	strb	r3, [r7, #23]
        char c2 = *s2++; // XXX UTF8 get char, next char
   1c1f8:	68bb      	ldr	r3, [r7, #8]
   1c1fa:	1c5a      	adds	r2, r3, #1
   1c1fc:	60ba      	str	r2, [r7, #8]
   1c1fe:	781b      	ldrb	r3, [r3, #0]
   1c200:	75bb      	strb	r3, [r7, #22]
        n--;
   1c202:	687b      	ldr	r3, [r7, #4]
   1c204:	3b01      	subs	r3, #1
   1c206:	607b      	str	r3, [r7, #4]
        if (c1 < c2) return -1;
   1c208:	7dfa      	ldrb	r2, [r7, #23]
   1c20a:	7dbb      	ldrb	r3, [r7, #22]
   1c20c:	429a      	cmp	r2, r3
   1c20e:	d202      	bcs.n	1c216 <strncmp+0x36>
   1c210:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c214:	e023      	b.n	1c25e <strncmp+0x7e>
        else if (c1 > c2) return 1;
   1c216:	7dfa      	ldrb	r2, [r7, #23]
   1c218:	7dbb      	ldrb	r3, [r7, #22]
   1c21a:	429a      	cmp	r2, r3
   1c21c:	d901      	bls.n	1c222 <strncmp+0x42>
   1c21e:	2301      	movs	r3, #1
   1c220:	e01d      	b.n	1c25e <strncmp+0x7e>
    while (*s1 && *s2 && n > 0) {
   1c222:	68fb      	ldr	r3, [r7, #12]
   1c224:	781b      	ldrb	r3, [r3, #0]
   1c226:	2b00      	cmp	r3, #0
   1c228:	d006      	beq.n	1c238 <strncmp+0x58>
   1c22a:	68bb      	ldr	r3, [r7, #8]
   1c22c:	781b      	ldrb	r3, [r3, #0]
   1c22e:	2b00      	cmp	r3, #0
   1c230:	d002      	beq.n	1c238 <strncmp+0x58>
   1c232:	687b      	ldr	r3, [r7, #4]
   1c234:	2b00      	cmp	r3, #0
   1c236:	d1da      	bne.n	1c1ee <strncmp+0xe>
    }
    if (n == 0) return 0;
   1c238:	687b      	ldr	r3, [r7, #4]
   1c23a:	2b00      	cmp	r3, #0
   1c23c:	d101      	bne.n	1c242 <strncmp+0x62>
   1c23e:	2300      	movs	r3, #0
   1c240:	e00d      	b.n	1c25e <strncmp+0x7e>
    else if (*s2) return -1;
   1c242:	68bb      	ldr	r3, [r7, #8]
   1c244:	781b      	ldrb	r3, [r3, #0]
   1c246:	2b00      	cmp	r3, #0
   1c248:	d002      	beq.n	1c250 <strncmp+0x70>
   1c24a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c24e:	e006      	b.n	1c25e <strncmp+0x7e>
    else if (*s1) return 1;
   1c250:	68fb      	ldr	r3, [r7, #12]
   1c252:	781b      	ldrb	r3, [r3, #0]
   1c254:	2b00      	cmp	r3, #0
   1c256:	d001      	beq.n	1c25c <strncmp+0x7c>
   1c258:	2301      	movs	r3, #1
   1c25a:	e000      	b.n	1c25e <strncmp+0x7e>
    else return 0;
   1c25c:	2300      	movs	r3, #0
}
   1c25e:	4618      	mov	r0, r3
   1c260:	371c      	adds	r7, #28
   1c262:	46bd      	mov	sp, r7
   1c264:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c268:	4770      	bx	lr
   1c26a:	bf00      	nop

0001c26c <strcpy>:

char *strcpy(char *dest, const char *src) {
   1c26c:	b480      	push	{r7}
   1c26e:	b085      	sub	sp, #20
   1c270:	af00      	add	r7, sp, #0
   1c272:	6078      	str	r0, [r7, #4]
   1c274:	6039      	str	r1, [r7, #0]
    char *d = dest;
   1c276:	687b      	ldr	r3, [r7, #4]
   1c278:	60fb      	str	r3, [r7, #12]
    while (*src) {
   1c27a:	e007      	b.n	1c28c <strcpy+0x20>
        *d++ = *src++;
   1c27c:	68fb      	ldr	r3, [r7, #12]
   1c27e:	1c5a      	adds	r2, r3, #1
   1c280:	60fa      	str	r2, [r7, #12]
   1c282:	683a      	ldr	r2, [r7, #0]
   1c284:	1c51      	adds	r1, r2, #1
   1c286:	6039      	str	r1, [r7, #0]
   1c288:	7812      	ldrb	r2, [r2, #0]
   1c28a:	701a      	strb	r2, [r3, #0]
    while (*src) {
   1c28c:	683b      	ldr	r3, [r7, #0]
   1c28e:	781b      	ldrb	r3, [r3, #0]
   1c290:	2b00      	cmp	r3, #0
   1c292:	d1f3      	bne.n	1c27c <strcpy+0x10>
    }
    *d = '\0';
   1c294:	68fb      	ldr	r3, [r7, #12]
   1c296:	2200      	movs	r2, #0
   1c298:	701a      	strb	r2, [r3, #0]
    return dest;
   1c29a:	687b      	ldr	r3, [r7, #4]
}
   1c29c:	4618      	mov	r0, r3
   1c29e:	3714      	adds	r7, #20
   1c2a0:	46bd      	mov	sp, r7
   1c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c2a6:	4770      	bx	lr

0001c2a8 <stpcpy>:

// needed because gcc optimises strcpy + strcat to this
char *stpcpy(char *dest, const char *src) {
   1c2a8:	b480      	push	{r7}
   1c2aa:	b083      	sub	sp, #12
   1c2ac:	af00      	add	r7, sp, #0
   1c2ae:	6078      	str	r0, [r7, #4]
   1c2b0:	6039      	str	r1, [r7, #0]
    while (*src) {
   1c2b2:	e007      	b.n	1c2c4 <stpcpy+0x1c>
        *dest++ = *src++;
   1c2b4:	687b      	ldr	r3, [r7, #4]
   1c2b6:	1c5a      	adds	r2, r3, #1
   1c2b8:	607a      	str	r2, [r7, #4]
   1c2ba:	683a      	ldr	r2, [r7, #0]
   1c2bc:	1c51      	adds	r1, r2, #1
   1c2be:	6039      	str	r1, [r7, #0]
   1c2c0:	7812      	ldrb	r2, [r2, #0]
   1c2c2:	701a      	strb	r2, [r3, #0]
    while (*src) {
   1c2c4:	683b      	ldr	r3, [r7, #0]
   1c2c6:	781b      	ldrb	r3, [r3, #0]
   1c2c8:	2b00      	cmp	r3, #0
   1c2ca:	d1f3      	bne.n	1c2b4 <stpcpy+0xc>
    }
    *dest = '\0';
   1c2cc:	687b      	ldr	r3, [r7, #4]
   1c2ce:	2200      	movs	r2, #0
   1c2d0:	701a      	strb	r2, [r3, #0]
    return dest;
   1c2d2:	687b      	ldr	r3, [r7, #4]
}
   1c2d4:	4618      	mov	r0, r3
   1c2d6:	370c      	adds	r7, #12
   1c2d8:	46bd      	mov	sp, r7
   1c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c2de:	4770      	bx	lr

0001c2e0 <strcat>:

char *strcat(char *dest, const char *src) {
   1c2e0:	b480      	push	{r7}
   1c2e2:	b085      	sub	sp, #20
   1c2e4:	af00      	add	r7, sp, #0
   1c2e6:	6078      	str	r0, [r7, #4]
   1c2e8:	6039      	str	r1, [r7, #0]
    char *d = dest;
   1c2ea:	687b      	ldr	r3, [r7, #4]
   1c2ec:	60fb      	str	r3, [r7, #12]
    while (*d) {
   1c2ee:	e002      	b.n	1c2f6 <strcat+0x16>
        d++;
   1c2f0:	68fb      	ldr	r3, [r7, #12]
   1c2f2:	3301      	adds	r3, #1
   1c2f4:	60fb      	str	r3, [r7, #12]
    while (*d) {
   1c2f6:	68fb      	ldr	r3, [r7, #12]
   1c2f8:	781b      	ldrb	r3, [r3, #0]
   1c2fa:	2b00      	cmp	r3, #0
   1c2fc:	d1f8      	bne.n	1c2f0 <strcat+0x10>
    }
    while (*src) {
   1c2fe:	e007      	b.n	1c310 <strcat+0x30>
        *d++ = *src++;
   1c300:	68fb      	ldr	r3, [r7, #12]
   1c302:	1c5a      	adds	r2, r3, #1
   1c304:	60fa      	str	r2, [r7, #12]
   1c306:	683a      	ldr	r2, [r7, #0]
   1c308:	1c51      	adds	r1, r2, #1
   1c30a:	6039      	str	r1, [r7, #0]
   1c30c:	7812      	ldrb	r2, [r2, #0]
   1c30e:	701a      	strb	r2, [r3, #0]
    while (*src) {
   1c310:	683b      	ldr	r3, [r7, #0]
   1c312:	781b      	ldrb	r3, [r3, #0]
   1c314:	2b00      	cmp	r3, #0
   1c316:	d1f3      	bne.n	1c300 <strcat+0x20>
    }
    *d = '\0';
   1c318:	68fb      	ldr	r3, [r7, #12]
   1c31a:	2200      	movs	r2, #0
   1c31c:	701a      	strb	r2, [r3, #0]
    return dest;
   1c31e:	687b      	ldr	r3, [r7, #4]
}
   1c320:	4618      	mov	r0, r3
   1c322:	3714      	adds	r7, #20
   1c324:	46bd      	mov	sp, r7
   1c326:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c32a:	4770      	bx	lr

0001c32c <strchr>:

// Public Domain implementation of strchr from:
// http://en.wikibooks.org/wiki/C_Programming/Strings#The_strchr_function
char *strchr(const char *s, int c)
{
   1c32c:	b480      	push	{r7}
   1c32e:	b083      	sub	sp, #12
   1c330:	af00      	add	r7, sp, #0
   1c332:	6078      	str	r0, [r7, #4]
   1c334:	6039      	str	r1, [r7, #0]
    /* Scan s for the character.  When this loop is finished,
       s will either point to the end of the string or the
       character we were looking for.  */
    while (*s != '\0' && *s != (char)c)
   1c336:	e002      	b.n	1c33e <strchr+0x12>
        s++;
   1c338:	687b      	ldr	r3, [r7, #4]
   1c33a:	3301      	adds	r3, #1
   1c33c:	607b      	str	r3, [r7, #4]
    while (*s != '\0' && *s != (char)c)
   1c33e:	687b      	ldr	r3, [r7, #4]
   1c340:	781b      	ldrb	r3, [r3, #0]
   1c342:	2b00      	cmp	r3, #0
   1c344:	d005      	beq.n	1c352 <strchr+0x26>
   1c346:	687b      	ldr	r3, [r7, #4]
   1c348:	781a      	ldrb	r2, [r3, #0]
   1c34a:	683b      	ldr	r3, [r7, #0]
   1c34c:	b2db      	uxtb	r3, r3
   1c34e:	429a      	cmp	r2, r3
   1c350:	d1f2      	bne.n	1c338 <strchr+0xc>
    return ((*s == c) ? (char *) s : 0);
   1c352:	687b      	ldr	r3, [r7, #4]
   1c354:	781b      	ldrb	r3, [r3, #0]
   1c356:	461a      	mov	r2, r3
   1c358:	683b      	ldr	r3, [r7, #0]
   1c35a:	429a      	cmp	r2, r3
   1c35c:	d101      	bne.n	1c362 <strchr+0x36>
   1c35e:	687b      	ldr	r3, [r7, #4]
   1c360:	e000      	b.n	1c364 <strchr+0x38>
   1c362:	2300      	movs	r3, #0
}
   1c364:	4618      	mov	r0, r3
   1c366:	370c      	adds	r7, #12
   1c368:	46bd      	mov	sp, r7
   1c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c36e:	4770      	bx	lr

0001c370 <strstr>:


// Public Domain implementation of strstr from:
// http://en.wikibooks.org/wiki/C_Programming/Strings#The_strstr_function
char *strstr(const char *haystack, const char *needle)
{
   1c370:	b580      	push	{r7, lr}
   1c372:	b084      	sub	sp, #16
   1c374:	af00      	add	r7, sp, #0
   1c376:	6078      	str	r0, [r7, #4]
   1c378:	6039      	str	r1, [r7, #0]
    size_t needlelen;
    /* Check for the null needle case.  */
    if (*needle == '\0')
   1c37a:	683b      	ldr	r3, [r7, #0]
   1c37c:	781b      	ldrb	r3, [r3, #0]
   1c37e:	2b00      	cmp	r3, #0
   1c380:	d101      	bne.n	1c386 <strstr+0x16>
        return (char *) haystack;
   1c382:	687b      	ldr	r3, [r7, #4]
   1c384:	e01c      	b.n	1c3c0 <strstr+0x50>
    needlelen = strlen(needle);
   1c386:	6838      	ldr	r0, [r7, #0]
   1c388:	f7ff fed6 	bl	1c138 <strlen>
   1c38c:	60f8      	str	r0, [r7, #12]
    for (; (haystack = strchr(haystack, *needle)) != 0; haystack++)
   1c38e:	e00c      	b.n	1c3aa <strstr+0x3a>
        if (strncmp(haystack, needle, needlelen) == 0)
   1c390:	68fa      	ldr	r2, [r7, #12]
   1c392:	6839      	ldr	r1, [r7, #0]
   1c394:	6878      	ldr	r0, [r7, #4]
   1c396:	f7ff ff23 	bl	1c1e0 <strncmp>
   1c39a:	4603      	mov	r3, r0
   1c39c:	2b00      	cmp	r3, #0
   1c39e:	d101      	bne.n	1c3a4 <strstr+0x34>
            return (char *) haystack;
   1c3a0:	687b      	ldr	r3, [r7, #4]
   1c3a2:	e00d      	b.n	1c3c0 <strstr+0x50>
    for (; (haystack = strchr(haystack, *needle)) != 0; haystack++)
   1c3a4:	687b      	ldr	r3, [r7, #4]
   1c3a6:	3301      	adds	r3, #1
   1c3a8:	607b      	str	r3, [r7, #4]
   1c3aa:	683b      	ldr	r3, [r7, #0]
   1c3ac:	781b      	ldrb	r3, [r3, #0]
   1c3ae:	4619      	mov	r1, r3
   1c3b0:	6878      	ldr	r0, [r7, #4]
   1c3b2:	f7ff ffbb 	bl	1c32c <strchr>
   1c3b6:	6078      	str	r0, [r7, #4]
   1c3b8:	687b      	ldr	r3, [r7, #4]
   1c3ba:	2b00      	cmp	r3, #0
   1c3bc:	d1e8      	bne.n	1c390 <strstr+0x20>
    return 0;
   1c3be:	2300      	movs	r3, #0
}
   1c3c0:	4618      	mov	r0, r3
   1c3c2:	3710      	adds	r7, #16
   1c3c4:	46bd      	mov	sp, r7
   1c3c6:	bd80      	pop	{r7, pc}

0001c3c8 <vstr_len>:
   1c3c8:	b480      	push	{r7}
   1c3ca:	b083      	sub	sp, #12
   1c3cc:	af00      	add	r7, sp, #0
   1c3ce:	6078      	str	r0, [r7, #4]
   1c3d0:	687b      	ldr	r3, [r7, #4]
   1c3d2:	685b      	ldr	r3, [r3, #4]
   1c3d4:	4618      	mov	r0, r3
   1c3d6:	370c      	adds	r7, #12
   1c3d8:	46bd      	mov	sp, r7
   1c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c3de:	4770      	bx	lr

0001c3e0 <readline_init0>:

#define READLINE_HIST_SIZE (MP_ARRAY_SIZE(MP_STATE_PORT(readline_hist)))

enum { ESEQ_NONE, ESEQ_ESC, ESEQ_ESC_BRACKET, ESEQ_ESC_BRACKET_DIGIT, ESEQ_ESC_O };

void readline_init0(void) {
   1c3e0:	b580      	push	{r7, lr}
   1c3e2:	af00      	add	r7, sp, #0
    memset(MP_STATE_PORT(readline_hist), 0, READLINE_HIST_SIZE * sizeof(const char*));
   1c3e4:	2220      	movs	r2, #32
   1c3e6:	2100      	movs	r1, #0
   1c3e8:	4802      	ldr	r0, [pc, #8]	; (1c3f4 <readline_init0+0x14>)
   1c3ea:	f7ff fe07 	bl	1bffc <memset>
}
   1c3ee:	bf00      	nop
   1c3f0:	bd80      	pop	{r7, pc}
   1c3f2:	bf00      	nop
   1c3f4:	20000a94 	.word	0x20000a94

0001c3f8 <str_dup_maybe>:

STATIC char *str_dup_maybe(const char *str) {
   1c3f8:	b580      	push	{r7, lr}
   1c3fa:	b084      	sub	sp, #16
   1c3fc:	af00      	add	r7, sp, #0
   1c3fe:	6078      	str	r0, [r7, #4]
    uint32_t len = strlen(str);
   1c400:	6878      	ldr	r0, [r7, #4]
   1c402:	f7ff fe99 	bl	1c138 <strlen>
   1c406:	60f8      	str	r0, [r7, #12]
    char *s2 = m_new_maybe(char, len + 1);
   1c408:	68fb      	ldr	r3, [r7, #12]
   1c40a:	3301      	adds	r3, #1
   1c40c:	4618      	mov	r0, r3
   1c40e:	f7e3 ff9d 	bl	34c <m_malloc_maybe>
   1c412:	60b8      	str	r0, [r7, #8]
    if (s2 == NULL) {
   1c414:	68bb      	ldr	r3, [r7, #8]
   1c416:	2b00      	cmp	r3, #0
   1c418:	d101      	bne.n	1c41e <str_dup_maybe+0x26>
        return NULL;
   1c41a:	2300      	movs	r3, #0
   1c41c:	e007      	b.n	1c42e <str_dup_maybe+0x36>
    }
    memcpy(s2, str, len + 1);
   1c41e:	68fb      	ldr	r3, [r7, #12]
   1c420:	3301      	adds	r3, #1
   1c422:	461a      	mov	r2, r3
   1c424:	6879      	ldr	r1, [r7, #4]
   1c426:	68b8      	ldr	r0, [r7, #8]
   1c428:	f7ff fd4c 	bl	1bec4 <memcpy>
    return s2;
   1c42c:	68bb      	ldr	r3, [r7, #8]
}
   1c42e:	4618      	mov	r0, r3
   1c430:	3710      	adds	r7, #16
   1c432:	46bd      	mov	sp, r7
   1c434:	bd80      	pop	{r7, pc}
   1c436:	bf00      	nop

0001c438 <mp_hal_move_cursor_back>:
#define MICROPY_HAL_HAS_VT100 (1)
#endif

// ...and provide the implementation using them
#if MICROPY_HAL_HAS_VT100
STATIC void mp_hal_move_cursor_back(uint pos) {
   1c438:	b580      	push	{r7, lr}
   1c43a:	b086      	sub	sp, #24
   1c43c:	af00      	add	r7, sp, #0
   1c43e:	6078      	str	r0, [r7, #4]
    if (pos <= 4) {
   1c440:	687b      	ldr	r3, [r7, #4]
   1c442:	2b04      	cmp	r3, #4
   1c444:	d804      	bhi.n	1c450 <mp_hal_move_cursor_back+0x18>
        // fast path for most common case of 1 step back
        mp_hal_stdout_tx_strn("\b\b\b\b", pos);
   1c446:	6879      	ldr	r1, [r7, #4]
   1c448:	4810      	ldr	r0, [pc, #64]	; (1c48c <mp_hal_move_cursor_back+0x54>)
   1c44a:	f7ff f99f 	bl	1b78c <mp_hal_stdout_tx_strn>
        if (n > 0) {
            vt100_command[n] = 'D'; // replace null char
            mp_hal_stdout_tx_strn(vt100_command, n + 1);
        }
    }
}
   1c44e:	e019      	b.n	1c484 <mp_hal_move_cursor_back+0x4c>
        int n = snprintf(&vt100_command[0], sizeof(vt100_command), "\x1b[%u", pos);
   1c450:	f107 000c 	add.w	r0, r7, #12
   1c454:	687b      	ldr	r3, [r7, #4]
   1c456:	4a0e      	ldr	r2, [pc, #56]	; (1c490 <mp_hal_move_cursor_back+0x58>)
   1c458:	2106      	movs	r1, #6
   1c45a:	f7ff fa63 	bl	1b924 <snprintf>
   1c45e:	6178      	str	r0, [r7, #20]
        if (n > 0) {
   1c460:	697b      	ldr	r3, [r7, #20]
   1c462:	2b00      	cmp	r3, #0
   1c464:	dd0e      	ble.n	1c484 <mp_hal_move_cursor_back+0x4c>
            vt100_command[n] = 'D'; // replace null char
   1c466:	f107 020c 	add.w	r2, r7, #12
   1c46a:	697b      	ldr	r3, [r7, #20]
   1c46c:	4413      	add	r3, r2
   1c46e:	2244      	movs	r2, #68	; 0x44
   1c470:	701a      	strb	r2, [r3, #0]
            mp_hal_stdout_tx_strn(vt100_command, n + 1);
   1c472:	697b      	ldr	r3, [r7, #20]
   1c474:	3301      	adds	r3, #1
   1c476:	461a      	mov	r2, r3
   1c478:	f107 030c 	add.w	r3, r7, #12
   1c47c:	4611      	mov	r1, r2
   1c47e:	4618      	mov	r0, r3
   1c480:	f7ff f984 	bl	1b78c <mp_hal_stdout_tx_strn>
}
   1c484:	bf00      	nop
   1c486:	3718      	adds	r7, #24
   1c488:	46bd      	mov	sp, r7
   1c48a:	bd80      	pop	{r7, pc}
   1c48c:	00022ed0 	.word	0x00022ed0
   1c490:	00022ed8 	.word	0x00022ed8

0001c494 <mp_hal_erase_line_from_cursor>:

STATIC void mp_hal_erase_line_from_cursor(uint n_chars_to_erase) {
   1c494:	b580      	push	{r7, lr}
   1c496:	b082      	sub	sp, #8
   1c498:	af00      	add	r7, sp, #0
   1c49a:	6078      	str	r0, [r7, #4]
    (void)n_chars_to_erase;
    mp_hal_stdout_tx_strn("\x1b[K", 3);
   1c49c:	2103      	movs	r1, #3
   1c49e:	4803      	ldr	r0, [pc, #12]	; (1c4ac <mp_hal_erase_line_from_cursor+0x18>)
   1c4a0:	f7ff f974 	bl	1b78c <mp_hal_stdout_tx_strn>
}
   1c4a4:	bf00      	nop
   1c4a6:	3708      	adds	r7, #8
   1c4a8:	46bd      	mov	sp, r7
   1c4aa:	bd80      	pop	{r7, pc}
   1c4ac:	00022ee0 	.word	0x00022ee0

0001c4b0 <readline_process_char>:
    const char *prompt;
} readline_t;

STATIC readline_t rl;

int readline_process_char(int c) {
   1c4b0:	b580      	push	{r7, lr}
   1c4b2:	b08a      	sub	sp, #40	; 0x28
   1c4b4:	af00      	add	r7, sp, #0
   1c4b6:	6078      	str	r0, [r7, #4]
    size_t last_line_len = rl.line->len;
   1c4b8:	4b99      	ldr	r3, [pc, #612]	; (1c720 <readline_process_char+0x270>)
   1c4ba:	681b      	ldr	r3, [r3, #0]
   1c4bc:	685b      	ldr	r3, [r3, #4]
   1c4be:	617b      	str	r3, [r7, #20]
    int redraw_step_back = 0;
   1c4c0:	2300      	movs	r3, #0
   1c4c2:	627b      	str	r3, [r7, #36]	; 0x24
    bool redraw_from_cursor = false;
   1c4c4:	2300      	movs	r3, #0
   1c4c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    int redraw_step_forward = 0;
   1c4ca:	2300      	movs	r3, #0
   1c4cc:	61fb      	str	r3, [r7, #28]
    if (rl.escape_seq == ESEQ_NONE) {
   1c4ce:	4b94      	ldr	r3, [pc, #592]	; (1c720 <readline_process_char+0x270>)
   1c4d0:	689b      	ldr	r3, [r3, #8]
   1c4d2:	2b00      	cmp	r3, #0
   1c4d4:	f040 80bf 	bne.w	1c656 <readline_process_char+0x1a6>
        if (CHAR_CTRL_A <= c && c <= CHAR_CTRL_E && vstr_len(rl.line) == rl.orig_line_len) {
   1c4d8:	687b      	ldr	r3, [r7, #4]
   1c4da:	2b00      	cmp	r3, #0
   1c4dc:	dd0e      	ble.n	1c4fc <readline_process_char+0x4c>
   1c4de:	687b      	ldr	r3, [r7, #4]
   1c4e0:	2b05      	cmp	r3, #5
   1c4e2:	dc0b      	bgt.n	1c4fc <readline_process_char+0x4c>
   1c4e4:	4b8e      	ldr	r3, [pc, #568]	; (1c720 <readline_process_char+0x270>)
   1c4e6:	681b      	ldr	r3, [r3, #0]
   1c4e8:	4618      	mov	r0, r3
   1c4ea:	f7ff ff6d 	bl	1c3c8 <vstr_len>
   1c4ee:	4602      	mov	r2, r0
   1c4f0:	4b8b      	ldr	r3, [pc, #556]	; (1c720 <readline_process_char+0x270>)
   1c4f2:	685b      	ldr	r3, [r3, #4]
   1c4f4:	429a      	cmp	r2, r3
   1c4f6:	d101      	bne.n	1c4fc <readline_process_char+0x4c>
            // control character with empty line
            return c;
   1c4f8:	687b      	ldr	r3, [r7, #4]
   1c4fa:	e220      	b.n	1c93e <readline_process_char+0x48e>
        } else if (c == CHAR_CTRL_A) {
   1c4fc:	687b      	ldr	r3, [r7, #4]
   1c4fe:	2b01      	cmp	r3, #1
   1c500:	f000 817e 	beq.w	1c800 <readline_process_char+0x350>
        #if MICROPY_REPL_EMACS_KEYS
        } else if (c == CHAR_CTRL_B) {
            // CTRL-B with non-empty line is go-back-one-char
            goto left_arrow_key;
        #endif
        } else if (c == CHAR_CTRL_C) {
   1c504:	687b      	ldr	r3, [r7, #4]
   1c506:	2b03      	cmp	r3, #3
   1c508:	d101      	bne.n	1c50e <readline_process_char+0x5e>
            // CTRL-C with non-empty line is cancel
            return c;
   1c50a:	687b      	ldr	r3, [r7, #4]
   1c50c:	e217      	b.n	1c93e <readline_process_char+0x48e>
        #if MICROPY_REPL_EMACS_KEYS
        } else if (c == CHAR_CTRL_D) {
            // CTRL-D with non-empty line is delete-at-cursor
            goto delete_key;
        #endif
        } else if (c == CHAR_CTRL_E) {
   1c50e:	687b      	ldr	r3, [r7, #4]
   1c510:	2b05      	cmp	r3, #5
   1c512:	f000 818a 	beq.w	1c82a <readline_process_char+0x37a>
            vstr_cut_out_bytes(rl.line, rl.orig_line_len, rl.cursor_pos - rl.orig_line_len);
            // set redraw parameters
            redraw_step_back = rl.cursor_pos - rl.orig_line_len;
            redraw_from_cursor = true;
        #endif
        } else if (c == '\r') {
   1c516:	687b      	ldr	r3, [r7, #4]
   1c518:	2b0d      	cmp	r3, #13
   1c51a:	d110      	bne.n	1c53e <readline_process_char+0x8e>
            // newline
            mp_hal_stdout_tx_str("\r\n");
   1c51c:	4881      	ldr	r0, [pc, #516]	; (1c724 <readline_process_char+0x274>)
   1c51e:	f7ff fa39 	bl	1b994 <mp_hal_stdout_tx_str>
            readline_push_history(vstr_null_terminated_str(rl.line) + rl.orig_line_len);
   1c522:	4b7f      	ldr	r3, [pc, #508]	; (1c720 <readline_process_char+0x270>)
   1c524:	681b      	ldr	r3, [r3, #0]
   1c526:	4618      	mov	r0, r3
   1c528:	f7e5 f824 	bl	1574 <vstr_null_terminated_str>
   1c52c:	4602      	mov	r2, r0
   1c52e:	4b7c      	ldr	r3, [pc, #496]	; (1c720 <readline_process_char+0x270>)
   1c530:	685b      	ldr	r3, [r3, #4]
   1c532:	4413      	add	r3, r2
   1c534:	4618      	mov	r0, r3
   1c536:	f000 fa63 	bl	1ca00 <readline_push_history>
            return 0;
   1c53a:	2300      	movs	r3, #0
   1c53c:	e1ff      	b.n	1c93e <readline_process_char+0x48e>
        } else if (c == 27) {
   1c53e:	687b      	ldr	r3, [r7, #4]
   1c540:	2b1b      	cmp	r3, #27
   1c542:	d103      	bne.n	1c54c <readline_process_char+0x9c>
            // escape sequence
            rl.escape_seq = ESEQ_ESC;
   1c544:	4b76      	ldr	r3, [pc, #472]	; (1c720 <readline_process_char+0x270>)
   1c546:	2201      	movs	r2, #1
   1c548:	609a      	str	r2, [r3, #8]
   1c54a:	e1a3      	b.n	1c894 <readline_process_char+0x3e4>
        } else if (c == 8 || c == 127) {
   1c54c:	687b      	ldr	r3, [r7, #4]
   1c54e:	2b08      	cmp	r3, #8
   1c550:	d002      	beq.n	1c558 <readline_process_char+0xa8>
   1c552:	687b      	ldr	r3, [r7, #4]
   1c554:	2b7f      	cmp	r3, #127	; 0x7f
   1c556:	d118      	bne.n	1c58a <readline_process_char+0xda>
            // backspace/delete
            if (rl.cursor_pos > rl.orig_line_len) {
   1c558:	4b71      	ldr	r3, [pc, #452]	; (1c720 <readline_process_char+0x270>)
   1c55a:	691a      	ldr	r2, [r3, #16]
   1c55c:	4b70      	ldr	r3, [pc, #448]	; (1c720 <readline_process_char+0x270>)
   1c55e:	685b      	ldr	r3, [r3, #4]
   1c560:	429a      	cmp	r2, r3
   1c562:	f240 8197 	bls.w	1c894 <readline_process_char+0x3e4>
                    nspace = 1;
                } else {
                    nspace = 4;
                }
                #else
                int nspace = 1;
   1c566:	2301      	movs	r3, #1
   1c568:	60fb      	str	r3, [r7, #12]
                #endif

                // do the backspace
                vstr_cut_out_bytes(rl.line, rl.cursor_pos - nspace, nspace);
   1c56a:	4b6d      	ldr	r3, [pc, #436]	; (1c720 <readline_process_char+0x270>)
   1c56c:	6818      	ldr	r0, [r3, #0]
   1c56e:	4b6c      	ldr	r3, [pc, #432]	; (1c720 <readline_process_char+0x270>)
   1c570:	691a      	ldr	r2, [r3, #16]
   1c572:	68fb      	ldr	r3, [r7, #12]
   1c574:	1ad3      	subs	r3, r2, r3
   1c576:	68fa      	ldr	r2, [r7, #12]
   1c578:	4619      	mov	r1, r3
   1c57a:	f7e5 f8ed 	bl	1758 <vstr_cut_out_bytes>
                // set redraw parameters
                redraw_step_back = nspace;
   1c57e:	68fb      	ldr	r3, [r7, #12]
   1c580:	627b      	str	r3, [r7, #36]	; 0x24
                redraw_from_cursor = true;
   1c582:	2301      	movs	r3, #1
   1c584:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (rl.cursor_pos > rl.orig_line_len) {
   1c588:	e184      	b.n	1c894 <readline_process_char+0x3e4>
            }
        #if MICROPY_HELPER_REPL
        } else if (c == 9) {
   1c58a:	687b      	ldr	r3, [r7, #4]
   1c58c:	2b09      	cmp	r3, #9
   1c58e:	d14c      	bne.n	1c62a <readline_process_char+0x17a>
            // tab magic
            const char *compl_str;
            size_t compl_len = mp_repl_autocomplete(rl.line->buf + rl.orig_line_len, rl.cursor_pos - rl.orig_line_len, &mp_plat_print, &compl_str);
   1c590:	4b63      	ldr	r3, [pc, #396]	; (1c720 <readline_process_char+0x270>)
   1c592:	681b      	ldr	r3, [r3, #0]
   1c594:	689a      	ldr	r2, [r3, #8]
   1c596:	4b62      	ldr	r3, [pc, #392]	; (1c720 <readline_process_char+0x270>)
   1c598:	685b      	ldr	r3, [r3, #4]
   1c59a:	18d0      	adds	r0, r2, r3
   1c59c:	4b60      	ldr	r3, [pc, #384]	; (1c720 <readline_process_char+0x270>)
   1c59e:	691a      	ldr	r2, [r3, #16]
   1c5a0:	4b5f      	ldr	r3, [pc, #380]	; (1c720 <readline_process_char+0x270>)
   1c5a2:	685b      	ldr	r3, [r3, #4]
   1c5a4:	1ad1      	subs	r1, r2, r3
   1c5a6:	f107 0308 	add.w	r3, r7, #8
   1c5aa:	4a5f      	ldr	r2, [pc, #380]	; (1c728 <readline_process_char+0x278>)
   1c5ac:	f7fe fb9e 	bl	1acec <mp_repl_autocomplete>
   1c5b0:	6138      	str	r0, [r7, #16]
            if (compl_len == 0) {
   1c5b2:	693b      	ldr	r3, [r7, #16]
   1c5b4:	2b00      	cmp	r3, #0
   1c5b6:	f000 816d 	beq.w	1c894 <readline_process_char+0x3e4>
                // no match
            } else if (compl_len == (size_t)(-1)) {
   1c5ba:	693b      	ldr	r3, [r7, #16]
   1c5bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c5c0:	d116      	bne.n	1c5f0 <readline_process_char+0x140>
                // many matches
                mp_hal_stdout_tx_str(rl.prompt);
   1c5c2:	4b57      	ldr	r3, [pc, #348]	; (1c720 <readline_process_char+0x270>)
   1c5c4:	699b      	ldr	r3, [r3, #24]
   1c5c6:	4618      	mov	r0, r3
   1c5c8:	f7ff f9e4 	bl	1b994 <mp_hal_stdout_tx_str>
                mp_hal_stdout_tx_strn(rl.line->buf + rl.orig_line_len, rl.cursor_pos - rl.orig_line_len);
   1c5cc:	4b54      	ldr	r3, [pc, #336]	; (1c720 <readline_process_char+0x270>)
   1c5ce:	681b      	ldr	r3, [r3, #0]
   1c5d0:	689a      	ldr	r2, [r3, #8]
   1c5d2:	4b53      	ldr	r3, [pc, #332]	; (1c720 <readline_process_char+0x270>)
   1c5d4:	685b      	ldr	r3, [r3, #4]
   1c5d6:	18d0      	adds	r0, r2, r3
   1c5d8:	4b51      	ldr	r3, [pc, #324]	; (1c720 <readline_process_char+0x270>)
   1c5da:	691a      	ldr	r2, [r3, #16]
   1c5dc:	4b50      	ldr	r3, [pc, #320]	; (1c720 <readline_process_char+0x270>)
   1c5de:	685b      	ldr	r3, [r3, #4]
   1c5e0:	1ad3      	subs	r3, r2, r3
   1c5e2:	4619      	mov	r1, r3
   1c5e4:	f7ff f8d2 	bl	1b78c <mp_hal_stdout_tx_strn>
                redraw_from_cursor = true;
   1c5e8:	2301      	movs	r3, #1
   1c5ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   1c5ee:	e151      	b.n	1c894 <readline_process_char+0x3e4>
            } else {
                // one match
                for (size_t i = 0; i < compl_len; ++i) {
   1c5f0:	2300      	movs	r3, #0
   1c5f2:	61bb      	str	r3, [r7, #24]
   1c5f4:	e00f      	b.n	1c616 <readline_process_char+0x166>
                    vstr_ins_byte(rl.line, rl.cursor_pos + i, *compl_str++);
   1c5f6:	4b4a      	ldr	r3, [pc, #296]	; (1c720 <readline_process_char+0x270>)
   1c5f8:	6818      	ldr	r0, [r3, #0]
   1c5fa:	4b49      	ldr	r3, [pc, #292]	; (1c720 <readline_process_char+0x270>)
   1c5fc:	691a      	ldr	r2, [r3, #16]
   1c5fe:	69bb      	ldr	r3, [r7, #24]
   1c600:	18d1      	adds	r1, r2, r3
   1c602:	68bb      	ldr	r3, [r7, #8]
   1c604:	1c5a      	adds	r2, r3, #1
   1c606:	60ba      	str	r2, [r7, #8]
   1c608:	781b      	ldrb	r3, [r3, #0]
   1c60a:	461a      	mov	r2, r3
   1c60c:	f7e5 f854 	bl	16b8 <vstr_ins_byte>
                for (size_t i = 0; i < compl_len; ++i) {
   1c610:	69bb      	ldr	r3, [r7, #24]
   1c612:	3301      	adds	r3, #1
   1c614:	61bb      	str	r3, [r7, #24]
   1c616:	69ba      	ldr	r2, [r7, #24]
   1c618:	693b      	ldr	r3, [r7, #16]
   1c61a:	429a      	cmp	r2, r3
   1c61c:	d3eb      	bcc.n	1c5f6 <readline_process_char+0x146>
                }
                // set redraw parameters
                redraw_from_cursor = true;
   1c61e:	2301      	movs	r3, #1
   1c620:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                redraw_step_forward = compl_len;
   1c624:	693b      	ldr	r3, [r7, #16]
   1c626:	61fb      	str	r3, [r7, #28]
   1c628:	e134      	b.n	1c894 <readline_process_char+0x3e4>
            }
        #endif
        } else if (32 <= c && c <= 126) {
   1c62a:	687b      	ldr	r3, [r7, #4]
   1c62c:	2b1f      	cmp	r3, #31
   1c62e:	f340 8131 	ble.w	1c894 <readline_process_char+0x3e4>
   1c632:	687b      	ldr	r3, [r7, #4]
   1c634:	2b7e      	cmp	r3, #126	; 0x7e
   1c636:	f300 812d 	bgt.w	1c894 <readline_process_char+0x3e4>
            // printable character
            vstr_ins_char(rl.line, rl.cursor_pos, c);
   1c63a:	4b39      	ldr	r3, [pc, #228]	; (1c720 <readline_process_char+0x270>)
   1c63c:	6818      	ldr	r0, [r3, #0]
   1c63e:	4b38      	ldr	r3, [pc, #224]	; (1c720 <readline_process_char+0x270>)
   1c640:	691b      	ldr	r3, [r3, #16]
   1c642:	687a      	ldr	r2, [r7, #4]
   1c644:	4619      	mov	r1, r3
   1c646:	f7e5 f84b 	bl	16e0 <vstr_ins_char>
            // set redraw parameters
            redraw_from_cursor = true;
   1c64a:	2301      	movs	r3, #1
   1c64c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            redraw_step_forward = 1;
   1c650:	2301      	movs	r3, #1
   1c652:	61fb      	str	r3, [r7, #28]
   1c654:	e11e      	b.n	1c894 <readline_process_char+0x3e4>
        }
    } else if (rl.escape_seq == ESEQ_ESC) {
   1c656:	4b32      	ldr	r3, [pc, #200]	; (1c720 <readline_process_char+0x270>)
   1c658:	689b      	ldr	r3, [r3, #8]
   1c65a:	2b01      	cmp	r3, #1
   1c65c:	d110      	bne.n	1c680 <readline_process_char+0x1d0>
        switch (c) {
   1c65e:	687b      	ldr	r3, [r7, #4]
   1c660:	2b4f      	cmp	r3, #79	; 0x4f
   1c662:	d005      	beq.n	1c670 <readline_process_char+0x1c0>
   1c664:	2b5b      	cmp	r3, #91	; 0x5b
   1c666:	d107      	bne.n	1c678 <readline_process_char+0x1c8>
            case '[':
                rl.escape_seq = ESEQ_ESC_BRACKET;
   1c668:	4b2d      	ldr	r3, [pc, #180]	; (1c720 <readline_process_char+0x270>)
   1c66a:	2202      	movs	r2, #2
   1c66c:	609a      	str	r2, [r3, #8]
                break;
   1c66e:	e111      	b.n	1c894 <readline_process_char+0x3e4>
            case 'O':
                rl.escape_seq = ESEQ_ESC_O;
   1c670:	4b2b      	ldr	r3, [pc, #172]	; (1c720 <readline_process_char+0x270>)
   1c672:	2204      	movs	r2, #4
   1c674:	609a      	str	r2, [r3, #8]
                break;
   1c676:	e10d      	b.n	1c894 <readline_process_char+0x3e4>
            default:
                DEBUG_printf("(ESC %d)", c);
                rl.escape_seq = ESEQ_NONE;
   1c678:	4b29      	ldr	r3, [pc, #164]	; (1c720 <readline_process_char+0x270>)
   1c67a:	2200      	movs	r2, #0
   1c67c:	609a      	str	r2, [r3, #8]
   1c67e:	e109      	b.n	1c894 <readline_process_char+0x3e4>
        }
    } else if (rl.escape_seq == ESEQ_ESC_BRACKET) {
   1c680:	4b27      	ldr	r3, [pc, #156]	; (1c720 <readline_process_char+0x270>)
   1c682:	689b      	ldr	r3, [r3, #8]
   1c684:	2b02      	cmp	r3, #2
   1c686:	f040 80ab 	bne.w	1c7e0 <readline_process_char+0x330>
        if ('0' <= c && c <= '9') {
   1c68a:	687b      	ldr	r3, [r7, #4]
   1c68c:	2b2f      	cmp	r3, #47	; 0x2f
   1c68e:	dd0a      	ble.n	1c6a6 <readline_process_char+0x1f6>
   1c690:	687b      	ldr	r3, [r7, #4]
   1c692:	2b39      	cmp	r3, #57	; 0x39
   1c694:	dc07      	bgt.n	1c6a6 <readline_process_char+0x1f6>
            rl.escape_seq = ESEQ_ESC_BRACKET_DIGIT;
   1c696:	4b22      	ldr	r3, [pc, #136]	; (1c720 <readline_process_char+0x270>)
   1c698:	2203      	movs	r2, #3
   1c69a:	609a      	str	r2, [r3, #8]
            rl.escape_seq_buf[0] = c;
   1c69c:	687b      	ldr	r3, [r7, #4]
   1c69e:	b2da      	uxtb	r2, r3
   1c6a0:	4b1f      	ldr	r3, [pc, #124]	; (1c720 <readline_process_char+0x270>)
   1c6a2:	751a      	strb	r2, [r3, #20]
   1c6a4:	e0f6      	b.n	1c894 <readline_process_char+0x3e4>
        } else {
            rl.escape_seq = ESEQ_NONE;
   1c6a6:	4b1e      	ldr	r3, [pc, #120]	; (1c720 <readline_process_char+0x270>)
   1c6a8:	2200      	movs	r2, #0
   1c6aa:	609a      	str	r2, [r3, #8]
            if (c == 'A') {
   1c6ac:	687b      	ldr	r3, [r7, #4]
   1c6ae:	2b41      	cmp	r3, #65	; 0x41
   1c6b0:	d13e      	bne.n	1c730 <readline_process_char+0x280>
#if MICROPY_REPL_EMACS_KEYS
up_arrow_key:
#endif
                // up arrow
                if (rl.hist_cur + 1 < (int)READLINE_HIST_SIZE && MP_STATE_PORT(readline_hist)[rl.hist_cur + 1] != NULL) {
   1c6b2:	4b1b      	ldr	r3, [pc, #108]	; (1c720 <readline_process_char+0x270>)
   1c6b4:	68db      	ldr	r3, [r3, #12]
   1c6b6:	3301      	adds	r3, #1
   1c6b8:	2b07      	cmp	r3, #7
   1c6ba:	f300 80eb 	bgt.w	1c894 <readline_process_char+0x3e4>
   1c6be:	4b18      	ldr	r3, [pc, #96]	; (1c720 <readline_process_char+0x270>)
   1c6c0:	68db      	ldr	r3, [r3, #12]
   1c6c2:	3301      	adds	r3, #1
   1c6c4:	4a19      	ldr	r2, [pc, #100]	; (1c72c <readline_process_char+0x27c>)
   1c6c6:	331a      	adds	r3, #26
   1c6c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1c6cc:	2b00      	cmp	r3, #0
   1c6ce:	f000 80e1 	beq.w	1c894 <readline_process_char+0x3e4>
                    // increase hist num
                    rl.hist_cur += 1;
   1c6d2:	4b13      	ldr	r3, [pc, #76]	; (1c720 <readline_process_char+0x270>)
   1c6d4:	68db      	ldr	r3, [r3, #12]
   1c6d6:	3301      	adds	r3, #1
   1c6d8:	4a11      	ldr	r2, [pc, #68]	; (1c720 <readline_process_char+0x270>)
   1c6da:	60d3      	str	r3, [r2, #12]
                    // set line to history
                    rl.line->len = rl.orig_line_len;
   1c6dc:	4b10      	ldr	r3, [pc, #64]	; (1c720 <readline_process_char+0x270>)
   1c6de:	681b      	ldr	r3, [r3, #0]
   1c6e0:	4a0f      	ldr	r2, [pc, #60]	; (1c720 <readline_process_char+0x270>)
   1c6e2:	6852      	ldr	r2, [r2, #4]
   1c6e4:	605a      	str	r2, [r3, #4]
                    vstr_add_str(rl.line, MP_STATE_PORT(readline_hist)[rl.hist_cur]);
   1c6e6:	4b0e      	ldr	r3, [pc, #56]	; (1c720 <readline_process_char+0x270>)
   1c6e8:	6818      	ldr	r0, [r3, #0]
   1c6ea:	4b0d      	ldr	r3, [pc, #52]	; (1c720 <readline_process_char+0x270>)
   1c6ec:	68db      	ldr	r3, [r3, #12]
   1c6ee:	4a0f      	ldr	r2, [pc, #60]	; (1c72c <readline_process_char+0x27c>)
   1c6f0:	331a      	adds	r3, #26
   1c6f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1c6f6:	4619      	mov	r1, r3
   1c6f8:	f7e4 ff7a 	bl	15f0 <vstr_add_str>
                    // set redraw parameters
                    redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1c6fc:	4b08      	ldr	r3, [pc, #32]	; (1c720 <readline_process_char+0x270>)
   1c6fe:	691a      	ldr	r2, [r3, #16]
   1c700:	4b07      	ldr	r3, [pc, #28]	; (1c720 <readline_process_char+0x270>)
   1c702:	685b      	ldr	r3, [r3, #4]
   1c704:	1ad3      	subs	r3, r2, r3
   1c706:	627b      	str	r3, [r7, #36]	; 0x24
                    redraw_from_cursor = true;
   1c708:	2301      	movs	r3, #1
   1c70a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                    redraw_step_forward = rl.line->len - rl.orig_line_len;
   1c70e:	4b04      	ldr	r3, [pc, #16]	; (1c720 <readline_process_char+0x270>)
   1c710:	681b      	ldr	r3, [r3, #0]
   1c712:	685a      	ldr	r2, [r3, #4]
   1c714:	4b02      	ldr	r3, [pc, #8]	; (1c720 <readline_process_char+0x270>)
   1c716:	685b      	ldr	r3, [r3, #4]
   1c718:	1ad3      	subs	r3, r2, r3
   1c71a:	61fb      	str	r3, [r7, #28]
   1c71c:	e0ba      	b.n	1c894 <readline_process_char+0x3e4>
   1c71e:	bf00      	nop
   1c720:	20000a10 	.word	0x20000a10
   1c724:	00022ee4 	.word	0x00022ee4
   1c728:	0001d82c 	.word	0x0001d82c
   1c72c:	20000a2c 	.word	0x20000a2c
                }
            } else if (c == 'B') {
   1c730:	687b      	ldr	r3, [r7, #4]
   1c732:	2b42      	cmp	r3, #66	; 0x42
   1c734:	d134      	bne.n	1c7a0 <readline_process_char+0x2f0>
#if MICROPY_REPL_EMACS_KEYS
down_arrow_key:
#endif
                // down arrow
                if (rl.hist_cur >= 0) {
   1c736:	4b84      	ldr	r3, [pc, #528]	; (1c948 <readline_process_char+0x498>)
   1c738:	68db      	ldr	r3, [r3, #12]
   1c73a:	2b00      	cmp	r3, #0
   1c73c:	f2c0 80aa 	blt.w	1c894 <readline_process_char+0x3e4>
                    // decrease hist num
                    rl.hist_cur -= 1;
   1c740:	4b81      	ldr	r3, [pc, #516]	; (1c948 <readline_process_char+0x498>)
   1c742:	68db      	ldr	r3, [r3, #12]
   1c744:	3b01      	subs	r3, #1
   1c746:	4a80      	ldr	r2, [pc, #512]	; (1c948 <readline_process_char+0x498>)
   1c748:	60d3      	str	r3, [r2, #12]
                    // set line to history
                    vstr_cut_tail_bytes(rl.line, rl.line->len - rl.orig_line_len);
   1c74a:	4b7f      	ldr	r3, [pc, #508]	; (1c948 <readline_process_char+0x498>)
   1c74c:	6818      	ldr	r0, [r3, #0]
   1c74e:	4b7e      	ldr	r3, [pc, #504]	; (1c948 <readline_process_char+0x498>)
   1c750:	681b      	ldr	r3, [r3, #0]
   1c752:	685a      	ldr	r2, [r3, #4]
   1c754:	4b7c      	ldr	r3, [pc, #496]	; (1c948 <readline_process_char+0x498>)
   1c756:	685b      	ldr	r3, [r3, #4]
   1c758:	1ad3      	subs	r3, r2, r3
   1c75a:	4619      	mov	r1, r3
   1c75c:	f7e4 ffe2 	bl	1724 <vstr_cut_tail_bytes>
                    if (rl.hist_cur >= 0) {
   1c760:	4b79      	ldr	r3, [pc, #484]	; (1c948 <readline_process_char+0x498>)
   1c762:	68db      	ldr	r3, [r3, #12]
   1c764:	2b00      	cmp	r3, #0
   1c766:	db0a      	blt.n	1c77e <readline_process_char+0x2ce>
                        vstr_add_str(rl.line, MP_STATE_PORT(readline_hist)[rl.hist_cur]);
   1c768:	4b77      	ldr	r3, [pc, #476]	; (1c948 <readline_process_char+0x498>)
   1c76a:	6818      	ldr	r0, [r3, #0]
   1c76c:	4b76      	ldr	r3, [pc, #472]	; (1c948 <readline_process_char+0x498>)
   1c76e:	68db      	ldr	r3, [r3, #12]
   1c770:	4a76      	ldr	r2, [pc, #472]	; (1c94c <readline_process_char+0x49c>)
   1c772:	331a      	adds	r3, #26
   1c774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1c778:	4619      	mov	r1, r3
   1c77a:	f7e4 ff39 	bl	15f0 <vstr_add_str>
                    }
                    // set redraw parameters
                    redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1c77e:	4b72      	ldr	r3, [pc, #456]	; (1c948 <readline_process_char+0x498>)
   1c780:	691a      	ldr	r2, [r3, #16]
   1c782:	4b71      	ldr	r3, [pc, #452]	; (1c948 <readline_process_char+0x498>)
   1c784:	685b      	ldr	r3, [r3, #4]
   1c786:	1ad3      	subs	r3, r2, r3
   1c788:	627b      	str	r3, [r7, #36]	; 0x24
                    redraw_from_cursor = true;
   1c78a:	2301      	movs	r3, #1
   1c78c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                    redraw_step_forward = rl.line->len - rl.orig_line_len;
   1c790:	4b6d      	ldr	r3, [pc, #436]	; (1c948 <readline_process_char+0x498>)
   1c792:	681b      	ldr	r3, [r3, #0]
   1c794:	685a      	ldr	r2, [r3, #4]
   1c796:	4b6c      	ldr	r3, [pc, #432]	; (1c948 <readline_process_char+0x498>)
   1c798:	685b      	ldr	r3, [r3, #4]
   1c79a:	1ad3      	subs	r3, r2, r3
   1c79c:	61fb      	str	r3, [r7, #28]
   1c79e:	e079      	b.n	1c894 <readline_process_char+0x3e4>
                }
            } else if (c == 'C') {
   1c7a0:	687b      	ldr	r3, [r7, #4]
   1c7a2:	2b43      	cmp	r3, #67	; 0x43
   1c7a4:	d109      	bne.n	1c7ba <readline_process_char+0x30a>
#if MICROPY_REPL_EMACS_KEYS
right_arrow_key:
#endif
                // right arrow
                if (rl.cursor_pos < rl.line->len) {
   1c7a6:	4b68      	ldr	r3, [pc, #416]	; (1c948 <readline_process_char+0x498>)
   1c7a8:	691a      	ldr	r2, [r3, #16]
   1c7aa:	4b67      	ldr	r3, [pc, #412]	; (1c948 <readline_process_char+0x498>)
   1c7ac:	681b      	ldr	r3, [r3, #0]
   1c7ae:	685b      	ldr	r3, [r3, #4]
   1c7b0:	429a      	cmp	r2, r3
   1c7b2:	d26f      	bcs.n	1c894 <readline_process_char+0x3e4>
                    redraw_step_forward = 1;
   1c7b4:	2301      	movs	r3, #1
   1c7b6:	61fb      	str	r3, [r7, #28]
   1c7b8:	e06c      	b.n	1c894 <readline_process_char+0x3e4>
                }
            } else if (c == 'D') {
   1c7ba:	687b      	ldr	r3, [r7, #4]
   1c7bc:	2b44      	cmp	r3, #68	; 0x44
   1c7be:	d108      	bne.n	1c7d2 <readline_process_char+0x322>
#if MICROPY_REPL_EMACS_KEYS
left_arrow_key:
#endif
                // left arrow
                if (rl.cursor_pos > rl.orig_line_len) {
   1c7c0:	4b61      	ldr	r3, [pc, #388]	; (1c948 <readline_process_char+0x498>)
   1c7c2:	691a      	ldr	r2, [r3, #16]
   1c7c4:	4b60      	ldr	r3, [pc, #384]	; (1c948 <readline_process_char+0x498>)
   1c7c6:	685b      	ldr	r3, [r3, #4]
   1c7c8:	429a      	cmp	r2, r3
   1c7ca:	d963      	bls.n	1c894 <readline_process_char+0x3e4>
                    redraw_step_back = 1;
   1c7cc:	2301      	movs	r3, #1
   1c7ce:	627b      	str	r3, [r7, #36]	; 0x24
   1c7d0:	e060      	b.n	1c894 <readline_process_char+0x3e4>
                }
            } else if (c == 'H') {
   1c7d2:	687b      	ldr	r3, [r7, #4]
   1c7d4:	2b48      	cmp	r3, #72	; 0x48
   1c7d6:	d015      	beq.n	1c804 <readline_process_char+0x354>
                // home
                goto home_key;
            } else if (c == 'F') {
   1c7d8:	687b      	ldr	r3, [r7, #4]
   1c7da:	2b46      	cmp	r3, #70	; 0x46
   1c7dc:	d15a      	bne.n	1c894 <readline_process_char+0x3e4>
                // end
                goto end_key;
   1c7de:	e027      	b.n	1c830 <readline_process_char+0x380>
            } else {
                DEBUG_printf("(ESC [ %d)", c);
            }
        }
    } else if (rl.escape_seq == ESEQ_ESC_BRACKET_DIGIT) {
   1c7e0:	4b59      	ldr	r3, [pc, #356]	; (1c948 <readline_process_char+0x498>)
   1c7e2:	689b      	ldr	r3, [r3, #8]
   1c7e4:	2b03      	cmp	r3, #3
   1c7e6:	d145      	bne.n	1c874 <readline_process_char+0x3c4>
        if (c == '~') {
   1c7e8:	687b      	ldr	r3, [r7, #4]
   1c7ea:	2b7e      	cmp	r3, #126	; 0x7e
   1c7ec:	d13e      	bne.n	1c86c <readline_process_char+0x3bc>
            if (rl.escape_seq_buf[0] == '1' || rl.escape_seq_buf[0] == '7') {
   1c7ee:	4b56      	ldr	r3, [pc, #344]	; (1c948 <readline_process_char+0x498>)
   1c7f0:	7d1b      	ldrb	r3, [r3, #20]
   1c7f2:	2b31      	cmp	r3, #49	; 0x31
   1c7f4:	d009      	beq.n	1c80a <readline_process_char+0x35a>
   1c7f6:	4b54      	ldr	r3, [pc, #336]	; (1c948 <readline_process_char+0x498>)
   1c7f8:	7d1b      	ldrb	r3, [r3, #20]
   1c7fa:	2b37      	cmp	r3, #55	; 0x37
   1c7fc:	d10c      	bne.n	1c818 <readline_process_char+0x368>
   1c7fe:	e004      	b.n	1c80a <readline_process_char+0x35a>
            goto home_key;
   1c800:	bf00      	nop
   1c802:	e002      	b.n	1c80a <readline_process_char+0x35a>
                goto home_key;
   1c804:	bf00      	nop
   1c806:	e000      	b.n	1c80a <readline_process_char+0x35a>
        }
        rl.escape_seq = ESEQ_NONE;
    } else if (rl.escape_seq == ESEQ_ESC_O) {
        switch (c) {
            case 'H':
                goto home_key;
   1c808:	bf00      	nop
                redraw_step_back = rl.cursor_pos - rl.orig_line_len;
   1c80a:	4b4f      	ldr	r3, [pc, #316]	; (1c948 <readline_process_char+0x498>)
   1c80c:	691a      	ldr	r2, [r3, #16]
   1c80e:	4b4e      	ldr	r3, [pc, #312]	; (1c948 <readline_process_char+0x498>)
   1c810:	685b      	ldr	r3, [r3, #4]
   1c812:	1ad3      	subs	r3, r2, r3
   1c814:	627b      	str	r3, [r7, #36]	; 0x24
   1c816:	e029      	b.n	1c86c <readline_process_char+0x3bc>
            } else if (rl.escape_seq_buf[0] == '4' || rl.escape_seq_buf[0] == '8') {
   1c818:	4b4b      	ldr	r3, [pc, #300]	; (1c948 <readline_process_char+0x498>)
   1c81a:	7d1b      	ldrb	r3, [r3, #20]
   1c81c:	2b34      	cmp	r3, #52	; 0x34
   1c81e:	d007      	beq.n	1c830 <readline_process_char+0x380>
   1c820:	4b49      	ldr	r3, [pc, #292]	; (1c948 <readline_process_char+0x498>)
   1c822:	7d1b      	ldrb	r3, [r3, #20]
   1c824:	2b38      	cmp	r3, #56	; 0x38
   1c826:	d10b      	bne.n	1c840 <readline_process_char+0x390>
   1c828:	e002      	b.n	1c830 <readline_process_char+0x380>
            goto end_key;
   1c82a:	bf00      	nop
   1c82c:	e000      	b.n	1c830 <readline_process_char+0x380>
            case 'F':
                goto end_key;
   1c82e:	bf00      	nop
                redraw_step_forward = rl.line->len - rl.cursor_pos;
   1c830:	4b45      	ldr	r3, [pc, #276]	; (1c948 <readline_process_char+0x498>)
   1c832:	681b      	ldr	r3, [r3, #0]
   1c834:	685a      	ldr	r2, [r3, #4]
   1c836:	4b44      	ldr	r3, [pc, #272]	; (1c948 <readline_process_char+0x498>)
   1c838:	691b      	ldr	r3, [r3, #16]
   1c83a:	1ad3      	subs	r3, r2, r3
   1c83c:	61fb      	str	r3, [r7, #28]
   1c83e:	e015      	b.n	1c86c <readline_process_char+0x3bc>
            } else if (rl.escape_seq_buf[0] == '3') {
   1c840:	4b41      	ldr	r3, [pc, #260]	; (1c948 <readline_process_char+0x498>)
   1c842:	7d1b      	ldrb	r3, [r3, #20]
   1c844:	2b33      	cmp	r3, #51	; 0x33
   1c846:	d111      	bne.n	1c86c <readline_process_char+0x3bc>
                if (rl.cursor_pos < rl.line->len) {
   1c848:	4b3f      	ldr	r3, [pc, #252]	; (1c948 <readline_process_char+0x498>)
   1c84a:	691a      	ldr	r2, [r3, #16]
   1c84c:	4b3e      	ldr	r3, [pc, #248]	; (1c948 <readline_process_char+0x498>)
   1c84e:	681b      	ldr	r3, [r3, #0]
   1c850:	685b      	ldr	r3, [r3, #4]
   1c852:	429a      	cmp	r2, r3
   1c854:	d20a      	bcs.n	1c86c <readline_process_char+0x3bc>
                    vstr_cut_out_bytes(rl.line, rl.cursor_pos, 1);
   1c856:	4b3c      	ldr	r3, [pc, #240]	; (1c948 <readline_process_char+0x498>)
   1c858:	6818      	ldr	r0, [r3, #0]
   1c85a:	4b3b      	ldr	r3, [pc, #236]	; (1c948 <readline_process_char+0x498>)
   1c85c:	691b      	ldr	r3, [r3, #16]
   1c85e:	2201      	movs	r2, #1
   1c860:	4619      	mov	r1, r3
   1c862:	f7e4 ff79 	bl	1758 <vstr_cut_out_bytes>
                    redraw_from_cursor = true;
   1c866:	2301      	movs	r3, #1
   1c868:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        rl.escape_seq = ESEQ_NONE;
   1c86c:	4b36      	ldr	r3, [pc, #216]	; (1c948 <readline_process_char+0x498>)
   1c86e:	2200      	movs	r2, #0
   1c870:	609a      	str	r2, [r3, #8]
   1c872:	e00f      	b.n	1c894 <readline_process_char+0x3e4>
    } else if (rl.escape_seq == ESEQ_ESC_O) {
   1c874:	4b34      	ldr	r3, [pc, #208]	; (1c948 <readline_process_char+0x498>)
   1c876:	689b      	ldr	r3, [r3, #8]
   1c878:	2b04      	cmp	r3, #4
   1c87a:	d108      	bne.n	1c88e <readline_process_char+0x3de>
        switch (c) {
   1c87c:	687b      	ldr	r3, [r7, #4]
   1c87e:	2b46      	cmp	r3, #70	; 0x46
   1c880:	d0d5      	beq.n	1c82e <readline_process_char+0x37e>
   1c882:	2b48      	cmp	r3, #72	; 0x48
   1c884:	d0c0      	beq.n	1c808 <readline_process_char+0x358>
            default:
                DEBUG_printf("(ESC O %d)", c);
                rl.escape_seq = ESEQ_NONE;
   1c886:	4b30      	ldr	r3, [pc, #192]	; (1c948 <readline_process_char+0x498>)
   1c888:	2200      	movs	r2, #0
   1c88a:	609a      	str	r2, [r3, #8]
   1c88c:	e002      	b.n	1c894 <readline_process_char+0x3e4>
        }
    } else {
        rl.escape_seq = ESEQ_NONE;
   1c88e:	4b2e      	ldr	r3, [pc, #184]	; (1c948 <readline_process_char+0x498>)
   1c890:	2200      	movs	r2, #0
   1c892:	609a      	str	r2, [r3, #8]
    }

    // redraw command prompt, efficiently
    if (redraw_step_back > 0) {
   1c894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c896:	2b00      	cmp	r3, #0
   1c898:	dd09      	ble.n	1c8ae <readline_process_char+0x3fe>
        mp_hal_move_cursor_back(redraw_step_back);
   1c89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c89c:	4618      	mov	r0, r3
   1c89e:	f7ff fdcb 	bl	1c438 <mp_hal_move_cursor_back>
        rl.cursor_pos -= redraw_step_back;
   1c8a2:	4b29      	ldr	r3, [pc, #164]	; (1c948 <readline_process_char+0x498>)
   1c8a4:	691a      	ldr	r2, [r3, #16]
   1c8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c8a8:	1ad3      	subs	r3, r2, r3
   1c8aa:	4a27      	ldr	r2, [pc, #156]	; (1c948 <readline_process_char+0x498>)
   1c8ac:	6113      	str	r3, [r2, #16]
    }
    if (redraw_from_cursor) {
   1c8ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   1c8b2:	2b00      	cmp	r3, #0
   1c8b4:	d02d      	beq.n	1c912 <readline_process_char+0x462>
        if (rl.line->len < last_line_len) {
   1c8b6:	4b24      	ldr	r3, [pc, #144]	; (1c948 <readline_process_char+0x498>)
   1c8b8:	681b      	ldr	r3, [r3, #0]
   1c8ba:	685a      	ldr	r2, [r3, #4]
   1c8bc:	697b      	ldr	r3, [r7, #20]
   1c8be:	429a      	cmp	r2, r3
   1c8c0:	d206      	bcs.n	1c8d0 <readline_process_char+0x420>
            // erase old chars
            mp_hal_erase_line_from_cursor(last_line_len - rl.cursor_pos);
   1c8c2:	4b21      	ldr	r3, [pc, #132]	; (1c948 <readline_process_char+0x498>)
   1c8c4:	691b      	ldr	r3, [r3, #16]
   1c8c6:	697a      	ldr	r2, [r7, #20]
   1c8c8:	1ad3      	subs	r3, r2, r3
   1c8ca:	4618      	mov	r0, r3
   1c8cc:	f7ff fde2 	bl	1c494 <mp_hal_erase_line_from_cursor>
        }
        // draw new chars
        mp_hal_stdout_tx_strn(rl.line->buf + rl.cursor_pos, rl.line->len - rl.cursor_pos);
   1c8d0:	4b1d      	ldr	r3, [pc, #116]	; (1c948 <readline_process_char+0x498>)
   1c8d2:	681b      	ldr	r3, [r3, #0]
   1c8d4:	689a      	ldr	r2, [r3, #8]
   1c8d6:	4b1c      	ldr	r3, [pc, #112]	; (1c948 <readline_process_char+0x498>)
   1c8d8:	691b      	ldr	r3, [r3, #16]
   1c8da:	18d0      	adds	r0, r2, r3
   1c8dc:	4b1a      	ldr	r3, [pc, #104]	; (1c948 <readline_process_char+0x498>)
   1c8de:	681b      	ldr	r3, [r3, #0]
   1c8e0:	685a      	ldr	r2, [r3, #4]
   1c8e2:	4b19      	ldr	r3, [pc, #100]	; (1c948 <readline_process_char+0x498>)
   1c8e4:	691b      	ldr	r3, [r3, #16]
   1c8e6:	1ad3      	subs	r3, r2, r3
   1c8e8:	4619      	mov	r1, r3
   1c8ea:	f7fe ff4f 	bl	1b78c <mp_hal_stdout_tx_strn>
        // move cursor forward if needed (already moved forward by length of line, so move it back)
        mp_hal_move_cursor_back(rl.line->len - (rl.cursor_pos + redraw_step_forward));
   1c8ee:	4b16      	ldr	r3, [pc, #88]	; (1c948 <readline_process_char+0x498>)
   1c8f0:	681b      	ldr	r3, [r3, #0]
   1c8f2:	685a      	ldr	r2, [r3, #4]
   1c8f4:	4b14      	ldr	r3, [pc, #80]	; (1c948 <readline_process_char+0x498>)
   1c8f6:	6919      	ldr	r1, [r3, #16]
   1c8f8:	69fb      	ldr	r3, [r7, #28]
   1c8fa:	440b      	add	r3, r1
   1c8fc:	1ad3      	subs	r3, r2, r3
   1c8fe:	4618      	mov	r0, r3
   1c900:	f7ff fd9a 	bl	1c438 <mp_hal_move_cursor_back>
        rl.cursor_pos += redraw_step_forward;
   1c904:	4b10      	ldr	r3, [pc, #64]	; (1c948 <readline_process_char+0x498>)
   1c906:	691a      	ldr	r2, [r3, #16]
   1c908:	69fb      	ldr	r3, [r7, #28]
   1c90a:	4413      	add	r3, r2
   1c90c:	4a0e      	ldr	r2, [pc, #56]	; (1c948 <readline_process_char+0x498>)
   1c90e:	6113      	str	r3, [r2, #16]
   1c910:	e013      	b.n	1c93a <readline_process_char+0x48a>
    } else if (redraw_step_forward > 0) {
   1c912:	69fb      	ldr	r3, [r7, #28]
   1c914:	2b00      	cmp	r3, #0
   1c916:	dd10      	ble.n	1c93a <readline_process_char+0x48a>
        // draw over old chars to move cursor forwards
        mp_hal_stdout_tx_strn(rl.line->buf + rl.cursor_pos, redraw_step_forward);
   1c918:	4b0b      	ldr	r3, [pc, #44]	; (1c948 <readline_process_char+0x498>)
   1c91a:	681b      	ldr	r3, [r3, #0]
   1c91c:	689a      	ldr	r2, [r3, #8]
   1c91e:	4b0a      	ldr	r3, [pc, #40]	; (1c948 <readline_process_char+0x498>)
   1c920:	691b      	ldr	r3, [r3, #16]
   1c922:	4413      	add	r3, r2
   1c924:	69fa      	ldr	r2, [r7, #28]
   1c926:	4611      	mov	r1, r2
   1c928:	4618      	mov	r0, r3
   1c92a:	f7fe ff2f 	bl	1b78c <mp_hal_stdout_tx_strn>
        rl.cursor_pos += redraw_step_forward;
   1c92e:	4b06      	ldr	r3, [pc, #24]	; (1c948 <readline_process_char+0x498>)
   1c930:	691a      	ldr	r2, [r3, #16]
   1c932:	69fb      	ldr	r3, [r7, #28]
   1c934:	4413      	add	r3, r2
   1c936:	4a04      	ldr	r2, [pc, #16]	; (1c948 <readline_process_char+0x498>)
   1c938:	6113      	str	r3, [r2, #16]
    }

    return -1;
   1c93a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1c93e:	4618      	mov	r0, r3
   1c940:	3728      	adds	r7, #40	; 0x28
   1c942:	46bd      	mov	sp, r7
   1c944:	bd80      	pop	{r7, pc}
   1c946:	bf00      	nop
   1c948:	20000a10 	.word	0x20000a10
   1c94c:	20000a2c 	.word	0x20000a2c

0001c950 <readline_note_newline>:
        }
    }
}
#endif

void readline_note_newline(const char *prompt) {
   1c950:	b580      	push	{r7, lr}
   1c952:	b082      	sub	sp, #8
   1c954:	af00      	add	r7, sp, #0
   1c956:	6078      	str	r0, [r7, #4]
    rl.orig_line_len = rl.line->len;
   1c958:	4b09      	ldr	r3, [pc, #36]	; (1c980 <readline_note_newline+0x30>)
   1c95a:	681b      	ldr	r3, [r3, #0]
   1c95c:	685b      	ldr	r3, [r3, #4]
   1c95e:	4a08      	ldr	r2, [pc, #32]	; (1c980 <readline_note_newline+0x30>)
   1c960:	6053      	str	r3, [r2, #4]
    rl.cursor_pos = rl.orig_line_len;
   1c962:	4b07      	ldr	r3, [pc, #28]	; (1c980 <readline_note_newline+0x30>)
   1c964:	685b      	ldr	r3, [r3, #4]
   1c966:	4a06      	ldr	r2, [pc, #24]	; (1c980 <readline_note_newline+0x30>)
   1c968:	6113      	str	r3, [r2, #16]
    rl.prompt = prompt;
   1c96a:	4a05      	ldr	r2, [pc, #20]	; (1c980 <readline_note_newline+0x30>)
   1c96c:	687b      	ldr	r3, [r7, #4]
   1c96e:	6193      	str	r3, [r2, #24]
    mp_hal_stdout_tx_str(prompt);
   1c970:	6878      	ldr	r0, [r7, #4]
   1c972:	f7ff f80f 	bl	1b994 <mp_hal_stdout_tx_str>
    #if MICROPY_REPL_AUTO_INDENT
    readline_auto_indent();
    #endif
}
   1c976:	bf00      	nop
   1c978:	3708      	adds	r7, #8
   1c97a:	46bd      	mov	sp, r7
   1c97c:	bd80      	pop	{r7, pc}
   1c97e:	bf00      	nop
   1c980:	20000a10 	.word	0x20000a10

0001c984 <readline_init>:

void readline_init(vstr_t *line, const char *prompt) {
   1c984:	b580      	push	{r7, lr}
   1c986:	b082      	sub	sp, #8
   1c988:	af00      	add	r7, sp, #0
   1c98a:	6078      	str	r0, [r7, #4]
   1c98c:	6039      	str	r1, [r7, #0]
    rl.line = line;
   1c98e:	4a0f      	ldr	r2, [pc, #60]	; (1c9cc <readline_init+0x48>)
   1c990:	687b      	ldr	r3, [r7, #4]
   1c992:	6013      	str	r3, [r2, #0]
    rl.orig_line_len = line->len;
   1c994:	687b      	ldr	r3, [r7, #4]
   1c996:	685b      	ldr	r3, [r3, #4]
   1c998:	4a0c      	ldr	r2, [pc, #48]	; (1c9cc <readline_init+0x48>)
   1c99a:	6053      	str	r3, [r2, #4]
    rl.escape_seq = ESEQ_NONE;
   1c99c:	4b0b      	ldr	r3, [pc, #44]	; (1c9cc <readline_init+0x48>)
   1c99e:	2200      	movs	r2, #0
   1c9a0:	609a      	str	r2, [r3, #8]
    rl.escape_seq_buf[0] = 0;
   1c9a2:	4b0a      	ldr	r3, [pc, #40]	; (1c9cc <readline_init+0x48>)
   1c9a4:	2200      	movs	r2, #0
   1c9a6:	751a      	strb	r2, [r3, #20]
    rl.hist_cur = -1;
   1c9a8:	4b08      	ldr	r3, [pc, #32]	; (1c9cc <readline_init+0x48>)
   1c9aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c9ae:	60da      	str	r2, [r3, #12]
    rl.cursor_pos = rl.orig_line_len;
   1c9b0:	4b06      	ldr	r3, [pc, #24]	; (1c9cc <readline_init+0x48>)
   1c9b2:	685b      	ldr	r3, [r3, #4]
   1c9b4:	4a05      	ldr	r2, [pc, #20]	; (1c9cc <readline_init+0x48>)
   1c9b6:	6113      	str	r3, [r2, #16]
    rl.prompt = prompt;
   1c9b8:	4a04      	ldr	r2, [pc, #16]	; (1c9cc <readline_init+0x48>)
   1c9ba:	683b      	ldr	r3, [r7, #0]
   1c9bc:	6193      	str	r3, [r2, #24]
    mp_hal_stdout_tx_str(prompt);
   1c9be:	6838      	ldr	r0, [r7, #0]
   1c9c0:	f7fe ffe8 	bl	1b994 <mp_hal_stdout_tx_str>
    #if MICROPY_REPL_AUTO_INDENT
    readline_auto_indent();
    #endif
}
   1c9c4:	bf00      	nop
   1c9c6:	3708      	adds	r7, #8
   1c9c8:	46bd      	mov	sp, r7
   1c9ca:	bd80      	pop	{r7, pc}
   1c9cc:	20000a10 	.word	0x20000a10

0001c9d0 <readline>:

int readline(vstr_t *line, const char *prompt) {
   1c9d0:	b580      	push	{r7, lr}
   1c9d2:	b084      	sub	sp, #16
   1c9d4:	af00      	add	r7, sp, #0
   1c9d6:	6078      	str	r0, [r7, #4]
   1c9d8:	6039      	str	r1, [r7, #0]
    readline_init(line, prompt);
   1c9da:	6839      	ldr	r1, [r7, #0]
   1c9dc:	6878      	ldr	r0, [r7, #4]
   1c9de:	f7ff ffd1 	bl	1c984 <readline_init>
    for (;;) {
        int c = mp_hal_stdin_rx_chr();
   1c9e2:	f7fe febb 	bl	1b75c <mp_hal_stdin_rx_chr>
   1c9e6:	60f8      	str	r0, [r7, #12]
        int r = readline_process_char(c);
   1c9e8:	68f8      	ldr	r0, [r7, #12]
   1c9ea:	f7ff fd61 	bl	1c4b0 <readline_process_char>
   1c9ee:	60b8      	str	r0, [r7, #8]
        if (r >= 0) {
   1c9f0:	68bb      	ldr	r3, [r7, #8]
   1c9f2:	2b00      	cmp	r3, #0
   1c9f4:	dbf5      	blt.n	1c9e2 <readline+0x12>
            return r;
   1c9f6:	68bb      	ldr	r3, [r7, #8]
        }
    }
}
   1c9f8:	4618      	mov	r0, r3
   1c9fa:	3710      	adds	r7, #16
   1c9fc:	46bd      	mov	sp, r7
   1c9fe:	bd80      	pop	{r7, pc}

0001ca00 <readline_push_history>:

void readline_push_history(const char *line) {
   1ca00:	b580      	push	{r7, lr}
   1ca02:	b084      	sub	sp, #16
   1ca04:	af00      	add	r7, sp, #0
   1ca06:	6078      	str	r0, [r7, #4]
    if (line[0] != '\0'
   1ca08:	687b      	ldr	r3, [r7, #4]
   1ca0a:	781b      	ldrb	r3, [r3, #0]
   1ca0c:	2b00      	cmp	r3, #0
   1ca0e:	d02a      	beq.n	1ca66 <readline_push_history+0x66>
        && (MP_STATE_PORT(readline_hist)[0] == NULL
   1ca10:	4b17      	ldr	r3, [pc, #92]	; (1ca70 <readline_push_history+0x70>)
   1ca12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1ca14:	2b00      	cmp	r3, #0
   1ca16:	d008      	beq.n	1ca2a <readline_push_history+0x2a>
            || strcmp(MP_STATE_PORT(readline_hist)[0], line) != 0)) {
   1ca18:	4b15      	ldr	r3, [pc, #84]	; (1ca70 <readline_push_history+0x70>)
   1ca1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1ca1c:	6879      	ldr	r1, [r7, #4]
   1ca1e:	4618      	mov	r0, r3
   1ca20:	f7ff fba4 	bl	1c16c <strcmp>
   1ca24:	4603      	mov	r3, r0
   1ca26:	2b00      	cmp	r3, #0
   1ca28:	d01d      	beq.n	1ca66 <readline_push_history+0x66>
        // a line which is not empty and different from the last one
        // so update the history
        char *most_recent_hist = str_dup_maybe(line);
   1ca2a:	6878      	ldr	r0, [r7, #4]
   1ca2c:	f7ff fce4 	bl	1c3f8 <str_dup_maybe>
   1ca30:	60b8      	str	r0, [r7, #8]
        if (most_recent_hist != NULL) {
   1ca32:	68bb      	ldr	r3, [r7, #8]
   1ca34:	2b00      	cmp	r3, #0
   1ca36:	d016      	beq.n	1ca66 <readline_push_history+0x66>
            for (int i = READLINE_HIST_SIZE - 1; i > 0; i--) {
   1ca38:	2307      	movs	r3, #7
   1ca3a:	60fb      	str	r3, [r7, #12]
   1ca3c:	e00d      	b.n	1ca5a <readline_push_history+0x5a>
                MP_STATE_PORT(readline_hist)[i] = MP_STATE_PORT(readline_hist)[i - 1];
   1ca3e:	68fb      	ldr	r3, [r7, #12]
   1ca40:	3b01      	subs	r3, #1
   1ca42:	4a0b      	ldr	r2, [pc, #44]	; (1ca70 <readline_push_history+0x70>)
   1ca44:	331a      	adds	r3, #26
   1ca46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1ca4a:	4909      	ldr	r1, [pc, #36]	; (1ca70 <readline_push_history+0x70>)
   1ca4c:	68fb      	ldr	r3, [r7, #12]
   1ca4e:	331a      	adds	r3, #26
   1ca50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (int i = READLINE_HIST_SIZE - 1; i > 0; i--) {
   1ca54:	68fb      	ldr	r3, [r7, #12]
   1ca56:	3b01      	subs	r3, #1
   1ca58:	60fb      	str	r3, [r7, #12]
   1ca5a:	68fb      	ldr	r3, [r7, #12]
   1ca5c:	2b00      	cmp	r3, #0
   1ca5e:	dcee      	bgt.n	1ca3e <readline_push_history+0x3e>
            }
            MP_STATE_PORT(readline_hist)[0] = most_recent_hist;
   1ca60:	4a03      	ldr	r2, [pc, #12]	; (1ca70 <readline_push_history+0x70>)
   1ca62:	68bb      	ldr	r3, [r7, #8]
   1ca64:	6693      	str	r3, [r2, #104]	; 0x68
        }
    }
}
   1ca66:	bf00      	nop
   1ca68:	3710      	adds	r7, #16
   1ca6a:	46bd      	mov	sp, r7
   1ca6c:	bd80      	pop	{r7, pc}
   1ca6e:	bf00      	nop
   1ca70:	20000a2c 	.word	0x20000a2c

0001ca74 <__func__.6607>:
   1ca74:	665f6367 00656572                       gc_free.

0001ca7c <__func__.6624>:
   1ca7c:	725f6367 6c6c6165 0000636f 49524556     gc_realloc..VERI
   1ca8c:	505f5946 70285254 00297274 2e2f2e2e     FY_PTR(ptr).../.
   1ca9c:	79702f2e 2e63672f 00000063 5f425441     ./py/gc.c...ATB_
   1caac:	5f544547 444e494b 6f6c6228 20296b63     GET_KIND(block) 
   1cabc:	41203d3d 45485f54 00004441 5f425441     == AT_HEAD..ATB_
   1cacc:	5f544547 444e494b 296c6228 203d3d20     GET_KIND(bl) == 
   1cadc:	465f5441 00454552 203a4347 61746f74     AT_FREE.GC: tota
   1caec:	25203a6c 75202c75 3a646573 2c752520     l: %u, used: %u,
   1cafc:	65726620 25203a65 00000a75 2e6f4e20      free: %u... No.
   1cb0c:	20666f20 6c622d31 736b636f 7525203a      of 1-blocks: %u
   1cb1c:	2d32202c 636f6c62 203a736b 202c7525     , 2-blocks: %u, 
   1cb2c:	2078616d 206b6c62 203a7a73 202c7525     max blk sz: %u, 
   1cb3c:	2078616d 65657266 3a7a7320 0a752520     max free sz: %u.
   1cb4c:	00000000 6d204347 726f6d65 616c2079     ....GC memory la
   1cb5c:	74756f79 7266203b 25206d6f 00003a70     yout; from %p:..
   1cb6c:	0000000a 2020200a 20202020 20752528     .....       (%u 
   1cb7c:	656e696c 6c612073 7266206c 00296565     lines all free).
   1cb8c:	3530250a 00203a78 00006325 00000000     .%05x: .%c......
   1cb9c:	00000005 5f5f07c4 5f646461 0000005f     ......__add__...
   1cbac:	5f5f082b 6c6f6f62 00005f5f 5f5f0f42     +.__bool__..B.__
   1cbbc:	6c697562 6c635f64 5f737361 0000005f     build_class__...
   1cbcc:	5f5f08a7 6c6c6163 00005f5f 5f5f092b     ..__call__..+.__
   1cbdc:	73616c63 005f5f73 5f5f0cc6 746e6f63     class__...__cont
   1cbec:	736e6961 00005f5f 5f5f0bfd 696c6564     ains__....__deli
   1cbfc:	5f6d6574 0000005f 5f5f096d 65746e65     tem__...m.__ente
   1cc0c:	005f5f72 5f5f0671 5f5f7165 00000000     r__.q.__eq__....
   1cc1c:	5f5f0845 74697865 00005f5f 5f5f06a7     E.__exit__....__
   1cc2c:	5f5f6567 00000000 5f5f0b40 61746567     ge__....@.__geta
   1cc3c:	5f727474 0000005f 5f5f0b26 69746567     ttr__...&.__geti
   1cc4c:	5f6d6574 0000005f 5f5f06b6 5f5f7467     tem__.....__gt__
   1cc5c:	00000000 5f5f08f7 68736168 00005f5f     ......__hash__..
   1cc6c:	5f5f086d 64646169 00005f5f 5f5f0a38     m.__iadd__..8.__
   1cc7c:	6f706d69 5f5f7472 00000000 5f5f085f     import__...._.__
   1cc8c:	74696e69 00005f5f 5f5f0808 62757369     init__....__isub
   1cc9c:	00005f5f 5f5f08cf 72657469 00005f5f     __....__iter__..
   1ccac:	5f5f06cc 5f5f656c 00000000 5f5f07e2     ..__le__......__
   1ccbc:	5f6e656c 0000005f 5f5f065d 5f5f746c     len__...].__lt__
   1cccc:	00000000 5f5f088e 6e69616d 00005f5f     ......__main__..
   1ccdc:	5f5f0aff 75646f6d 5f5f656c 00000000     ..__module__....
   1ccec:	5f5f08e2 656d616e 00005f5f 5f5f0779     ..__name__..y.__
   1ccfc:	5f77656e 0000005f 5f5f0802 7478656e     new__.....__next
   1cd0c:	00005f5f 5f5f08c8 68746170 00005f5f     __....__path__..
   1cd1c:	5f5f0c6b 6c617571 656d616e 00005f5f     k.__qualname__..
   1cd2c:	5f5f0e01 6c706572 6972705f 5f5f746e     ..__repl_print__
   1cd3c:	00000000 5f5f0810 72706572 00005f5f     ......__repr__..
   1cd4c:	5f5f0b32 69746573 5f6d6574 0000005f     2.__setitem__...
   1cd5c:	5f5f07d0 5f727473 0000005f 5f5f0721     ..__str__...!.__
   1cd6c:	5f627573 0000005f 5f5f0d4f 63617274     sub__...O.__trac
   1cd7c:	63616265 005f5f6b 002a018f 005f01fa     eback__...*..._.
   1cd8c:	002f018a 2325036c 0000006f 2325037b     ../.l.%#o...{.%#
   1cd9c:	00000078 3a7b0558 007d6223 00200185     x...X.{:#b}... .
   1cdac:	000a01af 616d2073 756d6978 6572206d     ....s maximum re
   1cdbc:	73727563 206e6f69 74706564 78652068     cursion depth ex
   1cdcc:	64656563 00006465 6d3c08bd 6c75646f     ceeded....<modul
   1cddc:	00003e65 6c3c0880 64626d61 00003e61     e>....<lambda>..
   1cdec:	6c3c0ad4 63747369 3e706d6f 00000000     ..<listcomp>....
   1cdfc:	643c0acc 63746369 3e706d6f 00000000     ..<dictcomp>....
   1ce0c:	733c0954 6f637465 003e706d 673c0934     T.<setcomp>.4.<g
   1ce1c:	78656e65 003e7270 733c0852 6e697274     enexpr>.R.<strin
   1ce2c:	00003e67 733c07e3 6e696474 0000003e     g>....<stdin>...
   1ce3c:	747505b7 00382d66 72410f2d 6d687469     ..utf-8.-.Arithm
   1ce4c:	63697465 6f727245 00000072 73410e97     eticError.....As
   1ce5c:	74726573 456e6f69 726f7272 00000000     sertionError....
   1ce6c:	74410e21 62697274 45657475 726f7272     !.AttributeError
   1ce7c:	00000000 61420d07 78456573 74706563     ......BaseExcept
   1ce8c:	006e6f69 4f450891 72724546 0000726f     ion...EOFError..
   1ce9c:	6c4508f0 7370696c 00007369 784509f2     ..Ellipsis....Ex
   1ceac:	74706563 006e6f69 65470d16 6172656e     ception...Genera
   1cebc:	45726f74 00746978 6d490b20 74726f70     torExit. .Import
   1cecc:	6f727245 00000072 6e49105c 746e6564     Error...\.Indent
   1cedc:	6f697461 7272456e 0000726f 6e490a83     ationError....In
   1ceec:	45786564 726f7272 00000000 654b08ea     dexError......Ke
   1cefc:	72724579 0000726f 654b11af 616f6279     yError....Keyboa
   1cf0c:	6e496472 72726574 00747075 6f4c0bff     rdInterrupt...Lo
   1cf1c:	70756b6f 6f727245 00000072 654d0bdc     okupError.....Me
   1cf2c:	79726f6d 6f727245 00000072 614e09ba     moryError.....Na
   1cf3c:	7245656d 00726f72 6f4e0817 7954656e     meError...NoneTy
   1cf4c:	00006570 6f4e13c6 706d4974 656d656c     pe....NotImpleme
   1cf5c:	6465746e 6f727245 00000072 534f07a1     ntedError.....OS
   1cf6c:	6f727245 00000072 764f0d81 6c667265     Error.....Overfl
   1cf7c:	7245776f 00726f72 75520c61 6d69746e     owError.a.Runtim
   1cf8c:	72724565 0000726f 74530dea 7449706f     eError....StopIt
   1cf9c:	74617265 006e6f69 79530b94 7861746e     eration...Syntax
   1cfac:	6f727245 00000072 79530a20 6d657473     Error... .System
   1cfbc:	74697845 00000000 79540925 72456570     Exit....%.TypeEr
   1cfcc:	00726f72 61560a96 4565756c 726f7272     ror...ValueError
   1cfdc:	00000000 655a11b6 69446f72 69736976     ......ZeroDivisi
   1cfec:	72456e6f 00726f72 62610395 00000073     onError...abs...
   1cffc:	6c610344 0000006c 6e610313 00000079     D.all.....any...
   1d00c:	7061066b 646e6570 00000000 726104c2     k.append......ar
   1d01c:	00007367 696203e0 0000006e 6f6204eb     gs....bin.....bo
   1d02c:	00006c6f 6f620c97 5f646e75 6874656d     ol....bound_meth
   1d03c:	0000646f 756208f7 69746c69 0000736e     od....builtins..
   1d04c:	79620822 6f636574 00006564 7962055c     ".bytecode..\.by
   1d05c:	00736574 6163080d 62616c6c 0000656c     tes...callable..
   1d06c:	686303dc 00000072 6c630bb4 6d737361     ..chr.....classm
   1d07c:	6f687465 00000064 6c63057c 00726165     ethod...|.clear.
   1d08c:	6c630533 0065736f 6c630774 7275736f     3.close.t.closur
   1d09c:	00000065 6f6305c0 0074736e 6f6304e0     e.....const...co
   1d0ac:	00007970 6f6305a6 00746e75 6964043f     py....count.?.di
   1d0bc:	00007463 6964092d 765f7463 00776569     ct..-.dict_view.
   1d0cc:	696403fa 00000072 696406b8 646f6d76     ..dir.....divmod
   1d0dc:	00000000 6e65030a 00000064 6e65081b     ......end.....en
   1d0ec:	69777364 00006874 7665049b 00006c61     dswith....eval..
   1d0fc:	7865041e 00006365 78650663 646e6574     ..exec..c.extend
   1d10c:	00000000 69660401 0000646e 6f660626     ......find..&.fo
   1d11c:	74616d72 00000000 72660a35 625f6d6f     rmat....5.from_b
   1d12c:	73657479 00000000 72660837 656b6d6f     ytes....7.fromke
   1d13c:	00007379 75660827 6974636e 00006e6f     ys..'.function..
   1d14c:	65670996 6172656e 00726f74 65670333     ..generator.3.ge
   1d15c:	00000074 656707c0 74746174 00000072     t.....getattr...
   1d16c:	6c67079d 6c61626f 00000073 6168078c     ..globals.....ha
   1d17c:	74746173 00000072 616804b7 00006873     sattr.....hash..
   1d18c:	656809ad 6c5f7061 006b636f 65680b56     ..heap_lock.V.he
   1d19c:	755f7061 636f6c6e 0000006b 65680370     ap_unlock...p.he
   1d1ac:	00000078 64690228 00000000 6e69057b     x...(.id....{.in
   1d1bc:	00786564 6e690612 74726573 00000000     dex...insert....
   1d1cc:	6e690316 00000074 736907eb 68706c61     ..int.....isalph
   1d1dc:	00000061 736907a8 69676964 00000074     a.....isdigit...
   1d1ec:	73690ab6 74736e69 65636e61 00000000     ..isinstance....
   1d1fc:	736907fc 65776f6c 00000072 7369075b     ..islower...[.is
   1d20c:	63617073 00000065 73690ab5 63627573     space.....issubc
   1d21c:	7373616c 00000000 736907dd 65707075     lass......isuppe
   1d22c:	00000072 746905e3 00736d65 7469048f     r.....items...it
   1d23c:	00007265 74690847 74617265 0000726f     er..G.iterator..
   1d24c:	6f6a04a7 00006e69 656b0332 00000079     ..join..2.key...
   1d25c:	656b0401 00007379 656c0362 0000006e     ..keys..b.len...
   1d26c:	696c0427 00007473 696c0689 656c7474     '.list....little
   1d27c:	00000000 6f6c063b 736c6163 00000000     ....;.locals....
   1d28c:	6f6c05c6 00726577 736c06e5 70697274     ..lower...lstrip
   1d29c:	00000000 616d03b9 00000070 696d0b0b     ......map.....mi
   1d2ac:	706f7263 6f687479 0000006e 6f6d06bf     cropython.....mo
   1d2bc:	656c7564 00000000 656e0442 00007478     dule....B.next..
   1d2cc:	626f0690 7463656a 00000000 636f03fd     ..object......oc
   1d2dc:	00000074 706f04d1 00006e65 706f0987     t.....open....op
   1d2ec:	656c5f74 006c6576 726f031c 00000064     t_level...ord...
   1d2fc:	65700af3 745f646e 776f7268 00000000     ..pend_throw....
   1d30c:	6f70032a 00000070 6f7007bf 65746970     *.pop.....popite
   1d31c:	0000006d 6f70032d 00000077 72700554     m...-.pow...T.pr
   1d32c:	00746e69 6172051a 0065676e 65720663     int...range.c.re
   1d33c:	65766f6d 00000000 65720749 63616c70     move....I.replac
   1d34c:	00000065 657204d0 00007270 65720725     e.....repr..%.re
   1d35c:	73726576 00000065 667205d2 00646e69     verse.....rfind.
   1d36c:	697206e9 7865646e 00000000 6f7205e7     ..rindex......ro
   1d37c:	00646e75 737206a5 74696c70 00000000     und...rsplit....
   1d38c:	7372063b 70697274 00000000 657304b9     ;.rstrip......se
   1d39c:	0000646e 65730323 00000070 657307d4     nd..#.sep.....se
   1d3ac:	74746174 00000072 65730a6c 66656474     tattr...l.setdef
   1d3bc:	746c7561 00000000 6f7304bf 00007472     ault......sort..
   1d3cc:	6f73065e 64657472 00000000 707305b7     ^.sorted......sp
   1d3dc:	0074696c 74730585 00747261 74730a74     lit...start.t.st
   1d3ec:	73747261 68746977 00000000 74730c62     artswith....b.st
   1d3fc:	63697461 6874656d 0000646f 74730457     aticmethod..W.st
   1d40c:	00007065 7473049d 0000706f 74730350     ep....stop..P.st
   1d41c:	00000072 74730529 00706972 7573032e     r...).strip...su
   1d42c:	0000006d 757305c4 00726570 687405b3     m.....super...th
   1d43c:	00776f72 6f7408d8 7479625f 00007365     row...to_bytes..
   1d44c:	757405fd 00656c70 7974049d 00006570     ..tuple...type..
   1d45c:	707506b4 65746164 00000000 70750527     ..update....'.up
   1d46c:	00726570 6176054e 0065756c 6176067d     per.N.value.}.va
   1d47c:	7365756c 00000000 697a03e6 00000070     lues......zip...

0001d48c <mp_qstr_const_pool>:
	...
   1d494:	0000000a 000000c6 0001cb98 0001cb9c     ................
   1d4a4:	0001cba0 0001cbac 0001cbb8 0001cbcc     ................
   1d4b4:	0001cbd8 0001cbe4 0001cbf4 0001cc04     ................
   1d4c4:	0001cc10 0001cc1c 0001cc28 0001cc34     ........(...4...
   1d4d4:	0001cc44 0001cc54 0001cc60 0001cc6c     D...T...`...l...
   1d4e4:	0001cc78 0001cc88 0001cc94 0001cca0     x...............
   1d4f4:	0001ccac 0001ccb8 0001ccc4 0001ccd0     ................
   1d504:	0001ccdc 0001ccec 0001ccf8 0001cd04     ................
   1d514:	0001cd10 0001cd1c 0001cd2c 0001cd40     ........,...@...
   1d524:	0001cd4c 0001cd5c 0001cd68 0001cd74     L...\...h...t...
   1d534:	0001cd84 0001cd88 0001cd8c 0001cd90     ................
   1d544:	0001cd98 0001cda0 0001cda8 0001cdac     ................
   1d554:	0001cdb0 0001cdd4 0001cde0 0001cdec     ................
   1d564:	0001cdfc 0001ce0c 0001ce18 0001ce24     ............$...
   1d574:	0001ce30 0001ce3c 0001ce44 0001ce58     0...<...D...X...
   1d584:	0001ce6c 0001ce80 0001ce90 0001ce9c     l...............
   1d594:	0001cea8 0001ceb4 0001cec4 0001ced4     ................
   1d5a4:	0001cee8 0001cef8 0001cf04 0001cf18     ................
   1d5b4:	0001cf28 0001cf38 0001cf44 0001cf50     (...8...D...P...
   1d5c4:	0001cf68 0001cf74 0001cf84 0001cf94     h...t...........
   1d5d4:	0001cfa4 0001cfb4 0001cfc4 0001cfd0     ................
   1d5e4:	0001cfe0 0001cff4 0001cffc 0001d004     ................
   1d5f4:	0001d00c 0001d018 0001d020 0001d028     ........ ...(...
   1d604:	0001d030 0001d040 0001d04c 0001d058     0...@...L...X...
   1d614:	0001d060 0001d06c 0001d074 0001d084     `...l...t.......
   1d624:	0001d08c 0001d094 0001d0a0 0001d0a8     ................
   1d634:	0001d0b0 0001d0b8 0001d0c0 0001d0cc     ................
   1d644:	0001d0d4 0001d0e0 0001d0e8 0001d0f4     ................
   1d654:	0001d0fc 0001d104 0001d110 0001d118     ................
   1d664:	0001d124 0001d134 0001d140 0001d14c     $...4...@...L...
   1d674:	0001d158 0001d160 0001d16c 0001d178     X...`...l...x...
   1d684:	0001d184 0001d18c 0001d198 0001d1a8     ................
   1d694:	0001d1b0 0001d1b8 0001d1c0 0001d1cc     ................
   1d6a4:	0001d1d4 0001d1e0 0001d1ec 0001d1fc     ................
   1d6b4:	0001d208 0001d214 0001d224 0001d230     ........$...0...
   1d6c4:	0001d238 0001d240 0001d24c 0001d254     8...@...L...T...
   1d6d4:	0001d25c 0001d264 0001d26c 0001d274     \...d...l...t...
   1d6e4:	0001d280 0001d28c 0001d294 0001d2a0     ................
   1d6f4:	0001d2a8 0001d2b8 0001d2c4 0001d2cc     ................
   1d704:	0001d2d8 0001d2e0 0001d2e8 0001d2f4     ................
   1d714:	0001d2fc 0001d30c 0001d314 0001d320     ............ ...
   1d724:	0001d328 0001d330 0001d338 0001d344     (...0...8...D...
   1d734:	0001d350 0001d358 0001d364 0001d36c     P...X...d...l...
   1d744:	0001d378 0001d380 0001d38c 0001d398     x...............
   1d754:	0001d3a0 0001d3a8 0001d3b4 0001d3c4     ................
   1d764:	0001d3cc 0001d3d8 0001d3e0 0001d3e8     ................
   1d774:	0001d3f8 0001d408 0001d410 0001d418     ................
   1d784:	0001d420 0001d428 0001d430 0001d438      ...(...0...8...
   1d794:	0001d440 0001d44c 0001d454 0001d45c     @...L...T...\...
   1d7a4:	0001d468 0001d470 0001d478 0001d484     h...p...x.......
   1d7b4:	206e656c 3128203c 203c3c20 2a203828     len < (1 << (8 *
   1d7c4:	43494d20 59504f52 5453515f 59425f52      MICROPY_QSTR_BY
   1d7d4:	5f534554 4c5f4e49 29294e45 00000000     TES_IN_LEN))....
   1d7e4:	2e2f2e2e 79702f2e 7473712f 00632e72     ../../py/qstr.c.

0001d7f4 <__func__.6294>:
   1d7f4:	72747371 6f72665f 74735f6d 00006e72     qstr_from_strn..

0001d804 <pad_spaces>:
   1d804:	20202020 20202020 20202020 20202020                     
   1d814:	00000000                                ....

0001d818 <pad_zeroes>:
   1d818:	30303030 30303030 30303030 30303030     0000000000000000
   1d828:	00000000                                ....

0001d82c <mp_plat_print>:
   1d82c:	00000000 00001861 65736162 203d3d20     ....a...base == 
   1d83c:	7c7c2032 73616220 3d3d2065 7c203820     2 || base == 8 |
   1d84c:	6162207c 3d206573 3031203d 207c7c20     | base == 10 || 
   1d85c:	65736162 203d3d20 00003631 2e2f2e2e     base == 16..../.
   1d86c:	79702f2e 70706d2f 746e6972 0000632e     ./py/mpprint.c..
   1d87c:	00000000 65757274 00000000 736c6166     ....true....fals
   1d88c:	00000065 6c756e28 0000296c 746d662a     e...(null)..*fmt
   1d89c:	203d3d20 20272527 21207c7c 736e7522      == '%' || !"uns
   1d8ac:	6f707075 64657472 746d6620 61686320     upported fmt cha
   1d8bc:	00002272                                r"..

0001d8c0 <__func__.6757>:
   1d8c0:	705f706d 746e6972 5f706d5f 00746e69     mp_print_mp_int.

0001d8d0 <__func__.6822>:
   1d8d0:	765f706d 6e697270 00006674              mp_vprintf..

0001d8dc <attr>:
	...
   1d8e4:	03030300 00000303 00000000 00000000     ................
	...
   1d8fc:	01010103 01010101 01010101 01010101     ................
   1d90c:	45454545 45454545 01014545 01010101     EEEEEEEEEE......
   1d91c:	59595901 19595959 19191919 19191919     .YYYYYY.........
   1d92c:	19191919 19191919 01191919 01010101     ................
   1d93c:	69696901 29696969 29292929 29292929     .iiiiii)))))))))
   1d94c:	29292929 29292929 01292929 00010101     ))))))))))).....
   1d95c:	5d5b2928 3a2c7d7b 3c7e403b 3c633d65     ()[]{},:;@~<e=c<
   1d96c:	653e3d65 653e633d 3d652a3d 3d652a63     e=>e=c>e=*e=c*e=
   1d97c:	2d3d652b 3e653d65 7c3d6526 652f3d65     +e=-e=e>&e=|e=/e
   1d98c:	652f633d 3d65253d 3d3d655e 2e213d65     =c/e=%e=^e==e=!.
   1d99c:	00000000                                ....

0001d9a0 <tok_enc>:
   1d9a0:	0001d95c                                \...

0001d9a4 <tok_enc_kind>:
   1d9a4:	45444342 49484746 363d4c4b 3858373e     BCDEFGHIKL=6>7X8
   1d9b4:	3157393f 2f593250 5a4f304e 553b543a     ?9W1P2Y/N0OZ:T;U
   1d9c4:	52345133 563c5335 0000404d 736c6146     3Q4R5S<VM@..Fals
   1d9d4:	00000065 656e6f4e 00000000 65757254     e...None....True
   1d9e4:	00000000 65645f5f 5f677562 0000005f     ....__debug__...
   1d9f4:	00646e61 00007361 65737361 00007472     and.as..assert..
   1da04:	61657262 0000006b 73616c63 00000073     break...class...
   1da14:	746e6f63 65756e69 00000000 00666564     continue....def.
   1da24:	006c6564 66696c65 00000000 65736c65     del.elif....else
   1da34:	00000000 65637865 00007470 616e6966     ....except..fina
   1da44:	00796c6c 00726f66 6d6f7266 00000000     lly.for.from....
   1da54:	626f6c67 00006c61 00006669 6f706d69     global..if..impo
   1da64:	00007472 00006e69 00007369 626d616c     rt..in..is..lamb
   1da74:	00006164 6c6e6f6e 6c61636f 00000000     da..nonlocal....
   1da84:	00746f6e 0000726f 73736170 00000000     not.or..pass....
   1da94:	73696172 00000065 75746572 00006e72     raise...return..
   1daa4:	00797274 6c696877 00000065 68746977     try.while...with
   1dab4:	00000000 6c656979 00000064              ....yield...

0001dac0 <tok_kw>:
   1dac0:	0001d9d0 0001d9d8 0001d9e0 0001d9e8     ................
   1dad0:	0001d9f4 0001d9f8 0001d9fc 0001da04     ................
   1dae0:	0001da0c 0001da14 0001da20 0001da24     ........ ...$...
   1daf0:	0001da28 0001da30 0001da38 0001da40     (...0...8...@...
   1db00:	0001da48 0001da4c 0001da54 0001da5c     H...L...T...\...
   1db10:	0001da60 0001da68 0001da6c 0001da70     `...h...l...p...
   1db20:	0001da78 0001da84 0001da88 0001da8c     x...............
   1db30:	0001da94 0001da9c 0001daa4 0001daa8     ................
   1db40:	0001dab0 0001dab8 63696e75 2065646f     ........unicode 
   1db50:	656d616e 63736520 73657061 00000000     name escapes....

0001db60 <rule_act_table>:
   1db60:	a8623261 22332233 22212121 24222221     a2b.3"3"!!!"!""$
   1db70:	26232222 24242725 a4a46232 31223131     ""#&%'$$2b..11"1
   1db80:	31313122 62313131 23236262 22232323     "111111bbb#####"
   1db90:	a5233333 12130022 32242162 13336212     33#."...b!$2.b3.
   1dba0:	62232263 13332262 62222262 18621261     c"#bb"3.b""ba.b.
   1dbb0:	62326212 151c1212 12126262 32631362     .b2b....bb..b.c2
   1dbc0:	62622212 31313133 24321862 62246312     ."bb3111b.2$.c$b
   1dbd0:	31632332 64126262 12122412 21222219     2#c1bb.d.$...""!
   1dbe0:	12141212 62321113 1262121c 13336212     ......2b..b..b3.
   1dbf0:	12621233 33633322 62222213 a5126212     3.b."3c3.""b.b..
   1dc00:	00221223                                #.".

0001dc04 <rule_arg_combined_table>:
   1dc04:	20373001 203c203b 10071017 303e1042     .07 ; < ....B.>0
   1dc14:	303d1043 20761049 104b204f 30502006     C.=0I.v O K.. P0
   1dc24:	10482055 20901018 10141028 102a1016     U H.... (.....*.
   1dc34:	20343031 30581029 20651021 205b101e     104 ).X0!.e ..[ 
   1dc44:	205d1021 2067101f 20671025 20781013     !.] ..g %.g ..x 
   1dc54:	10203068 10492078 306a2076 102c3072     h0 .x I.v j0r0,.
   1dc64:	10492078 30722076 2090101d 20311022     x I.v r0... ".1 
   1dc74:	20761049 102b3072 20761049 102d206c     I.v r0+.I.v l -.
   1dc84:	10492073 204d2076 3079201c 30461024     s I.v M . y0$.F0
   1dc94:	20781049 30461024 207a1049 1027201d     I.x $.F0I.z . '.
   1dca4:	1011207b 207b1026 207c2021 20211031     { ..&.{ ! | 1.! 
   1dcb4:	103b2022 103c2023 103a2024 20802025     " ;.# <.$ :.% . 
   1dcc4:	20812026 20822083 20832084 30872085     & . . . . . . .0
   1dcd4:	30862088 30891042 10441043 1045308a     . .0B..0C.D..0E.
   1dce4:	30921046 10421047 10433097 20301044     F..0G.B..0C.D.0 
   1dcf4:	104a1045 20781007 20781048 20781048     E.J...x H.x H.x 
   1dd04:	20781049 10071015 10493096 102e2076     I.x .....0I.v ..
   1dd14:	100430a1 2069204e 204d1004 30392031     .0..N i ..M 1 90
   1dd24:	104c1004 302d2066 203a1004 20032033     ..L.f -0..: 3 . 
   1dd34:	2078105a 1048203f 20412040 10072042     Z.x ? H.@ A B ..
   1dd44:	30443043 30451031 10071032 10493043     C0D01.E02...C0I.
   1dd54:	104d2078 10072078 20473043 20481048     x M.x ..C0G H.H 
   1dd64:	204a2049 304b1007 304c1031 10071032     I J ..K01.L02...
   1dd74:	2078104d 20691007 2004204e 20071004     M.x ..i N . ... 
   1dd84:	20572008 2010205a 20122011 20512005     . W Z . . . . Q 
   1dd94:	20562052 20532054 2054104d 20062034     R V T S M.T 4 . 
   1dda4:	20782020 104f104e 10511050 10541053       x N.O.P.Q.S.T.
   1ddb4:	10561055 10571058 10521059 200a2009     U.V.X.W.Y.R.. . 
   1ddc4:	200d200b 2078200c 101e3059 200e2078     . . . x Y0..x . 
   1ddd4:	2066200f 205f205c 10313066 2064205e     . f \ _ f01.^ d 
   1dde4:	20641042 20601043 100c104a 30631007     B.d C.` J.....c0
   1ddf4:	30632066 10071012 10482061 10482062     f c0....a H.b H.
   1de04:	104a1007 10481007 20781048 20142013     ..J...H.H.x . . 
   1de14:	20162015 20032017 20022033 1019206b     . . . . 3 . k ..
   1de24:	10492078 206d2076 20702071 30713072     x I.v m q p r0q0
   1de34:	306f101b 20761049 30632078 101c206e     ..o0I.v x c0n ..
   1de44:	20761049 1049101a 20742076 20781048     I.v ..I.v t H.x 
   1de54:	10123075 20772021 1004204e 20181005     u0..! w N ..... 
   1de64:	201a1006 10202019 101a201c 201b2078     ... .  .. ..x . 
   1de74:	201e201c 1036201f 10401038 103f103e     . . . 6.8.@.>.?.
   1de84:	10221041 207e207d 10221026 307f1023     A.".} ~ &.".#..0
   1de94:	10371026 102f1039 10311030 10351033     &.7.9./.0.1.3.5.
   1dea4:	20271034 102f2028 103d1030 208f2029     4.' ( /.0.=.) . 
   1deb4:	20831032 10081007 100a1009 100c100b     2.. ............
   1dec4:	100f100e 202a100d 202c202b 208a2034     ......* + , 4 . 
   1ded4:	308c208b 20782020 208d209f 308e1048     . .0  x . . H..0
   1dee4:	1048208b 202e202d 2091202f 20201048     . H.- . / . H.  
   1def4:	20322021 209f3093 10482094 20323095     ! 2 .0. . H..02 
   1df04:	10421048 10433097 10482098 209a2099     H.B..0C.. H.. . 
   1df14:	1031209b 10322078 20782078 209f309c     . 1.x 2.x x .0. 
   1df24:	104d209d 209f2078 101d20a0 10222090     . M.x . . ... ".
   1df34:	309e201c 207a1020 20a2309e 101e2031     . .0 .z .0. 1 ..
   1df44:	00002078                                x ..

0001df48 <rule_arg_offset_table>:
   1df48:	04020100 12100e0c 17161514 1e1c1a19     ................
   1df58:	29262422 3f3b342f 4a464443 5452504e     "$&)/4;?CDFJNPRT
   1df68:	5c5a5856 6462605e 6d6a6866 79767370     VXZ\^`bdfhjmpsvy
   1df78:	827f7d7b 8c890087 9591908e 9c9a9896     {}..............
   1df88:	a7a4a29f afadaba9 b8b6b4b2 bfbdbbba     ................
   1df98:	cccbc9c7 ded2d0ce e9e7e5e3 f3f0edeb     ................
   1dfa8:	faf8f6f4 0200fefc 0f0e0604 1c181513     ................
   1dfb8:	25221f1e 2d2b2927 39373331 4846443b     .."%')+-1379;DFH
   1dfc8:	514d4b49 58575653 6a68665a 72706e6c     IKMQSVWXZfhjlnpr
   1dfd8:	7b797775 84817f7d 8d8b8986 9593918f     uwy{}...........
   1dfe8:	009f9d9a                                ....

0001dfec <FIRST_RULE_WITH_OFFSET_ABOVE_255>:
   1dfec:	00000066 67726128 52202620 5f454c55     f...(arg & RULE_
   1dffc:	5f475241 444e494b 53414d5f 3d20294b     ARG_KIND_MASK) =
   1e00c:	5552203d 415f454c 525f4752 20454c55     = RULE_ARG_RULE 
   1e01c:	28207c7c 20677261 55522026 415f454c     || (arg & RULE_A
   1e02c:	4b5f4752 5f444e49 4b53414d 3d3d2029     RG_KIND_MASK) ==
   1e03c:	4c555220 52415f45 504f5f47 55525f54      RULE_ARG_OPT_RU
   1e04c:	0000454c 2e2f2e2e 79702f2e 7261702f     LE..../../py/par
   1e05c:	632e6573 00000000 73726170 3e2d7265     se.c....parser->
   1e06c:	75736572 735f746c 6b636174 706f745f     result_stack_top
   1e07c:	30203e20 00000000 73726170 3e2d7265      > 0....parser->
   1e08c:	75736572 735f746c 6b636174 706f745f     result_stack_top
   1e09c:	70203e20 0000736f 206b6f74 4d203d3d      > pos..tok == M
   1e0ac:	4f545f50 5f4e454b 545f504f 45444c49     P_TOKEN_OP_TILDE
   1e0bc:	00000000 646e696b 203d3d20 454c5552     ....kind == RULE
   1e0cc:	4752415f 4c55525f 00000045 203e2069     _ARG_RULE...i > 
   1e0dc:	00000030 3d3d2069 00006e20 6c757228     0...i == n..(rul
   1e0ec:	63615f65 20262074 454c5552 5443415f     e_act & RULE_ACT
   1e0fc:	4e494b5f 414d5f44 20294b53 52203d3d     _KIND_MASK) == R
   1e10c:	5f454c55 5f544341 5453494c 00000000     ULE_ACT_LIST....
   1e11c:	67726128 52202620 5f454c55 5f475241     (arg & RULE_ARG_
   1e12c:	444e494b 53414d5f 3d20294b 5552203d     KIND_MASK) == RU
   1e13c:	415f454c 525f4752 00454c55 3d3e2069     LE_ARG_RULE.i >=
   1e14c:	00003120 78656e75 74636570 69206465      1..unexpected i
   1e15c:	6e65646e 00000074 6e696e75 746e6564     ndent...unindent
   1e16c:	656f6420 6f6e2073 616d2074 20686374      does not match 
   1e17c:	20796e61 6574756f 6e692072 746e6564     any outer indent
   1e18c:	6f697461 656c206e 006c6576 61766e69     ation level.inva
   1e19c:	2064696c 746e7973 00007861 73726170     lid syntax..pars
   1e1ac:	722e7265 6c757365 74735f74 5f6b6361     er.result_stack_
   1e1bc:	20706f74 31203d3d 00000000              top == 1....

0001e1c8 <__func__.7828>:
   1e1c8:	68737570 6c75725f 72665f65 615f6d6f     push_rule_from_a
   1e1d8:	00006772                                rg..

0001e1dc <__func__.7856>:
   1e1dc:	5f706f70 75736572 0000746c              pop_result..

0001e1e8 <__func__.7861>:
   1e1e8:	6b656570 7365725f 00746c75              peek_result.

0001e1f4 <token_to_op.7927>:
   1e1f4:	ff1c1b1a ff1f1dff 0019ff18              ............

0001e200 <__func__.7936>:
   1e200:	646c6f66 6e6f635f 6e617473 00007374     fold_constants..

0001e210 <__func__.7974>:
   1e210:	705f706d 65737261 00000000              mp_parse....

0001e21c <scope_simple_name_table>:
   1e21c:	3130002f 00343332 505f504d 45535241     /.01234.MP_PARSE
   1e22c:	444f4e5f 53495f45 5254535f 28544355     _NODE_IS_STRUCT(
   1e23c:	00296e70 2e2f2e2e 79702f2e 6f63732f     pn).../../py/sco
   1e24c:	632e6570 00000000 706f6373 703e2d65     pe.c....scope->p
   1e25c:	6e657261 3d212074 4c554e20 0000004c     arent != NULL...
   1e26c:	703e2d73 6e657261 3d212074 4c554e20     s->parent != NUL
   1e27c:	0000004c 3e2d6469 646e696b 203d3d20     L...id->kind == 
   1e28c:	495f4449 5f4f464e 444e494b 4552465f     ID_INFO_KIND_FRE
   1e29c:	7c7c2045 2d646920 6e696b3e 3d3d2064     E || id->kind ==
   1e2ac:	5f444920 4f464e49 4e494b5f 45435f44      ID_INFO_KIND_CE
   1e2bc:	00004c4c                                LL..

0001e2c0 <__func__.5624>:
   1e2c0:	706f6373 656e5f65 00000077              scope_new...

0001e2cc <__func__.5653>:
   1e2cc:	706f6373 6c635f65 5f65736f 7265766f     scope_close_over
   1e2dc:	5f6e695f 65726170 0073746e 706d6f63     _in_parents.comp
   1e2ec:	75633e2d 78655f72 74706563 76656c5f     ->cur_except_lev
   1e2fc:	3e206c65 00003020 2e2f2e2e 79702f2e     el > 0..../../py
   1e30c:	6d6f632f 656c6970 0000632e 505f504d     /compile.c..MP_P
   1e31c:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1e32c:	5f544355 444e494b 736e7028 6f6e3e2d     UCT_KIND(pns->no
   1e33c:	5b736564 202c5d30 745f4e50 6c747365     des[0], PN_testl
   1e34c:	5f747369 706d6f63 00000029 505f504d     ist_comp)...MP_P
   1e35c:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1e36c:	28544355 31736e70 6f6e3e2d 5b736564     UCT(pns1->nodes[
   1e37c:	202d206e 00295d31 505f504d 45535241     n - 1]).MP_PARSE
   1e38c:	444f4e5f 53495f45 2844495f 31736e70     _NODE_IS_ID(pns1
   1e39c:	6f6e3e2d 5b736564 00295d30 276e6163     ->nodes[0]).can'
   1e3ac:	73612074 6e676973 206f7420 72707865     t assign to expr
   1e3bc:	69737365 00006e6f 746c756d 656c7069     ession..multiple
   1e3cc:	20782a20 61206e69 67697373 6e656d6e      *x in assignmen
   1e3dc:	00000074 5f504d21 53524150 4f4e5f45     t...!MP_PARSE_NO
   1e3ec:	495f4544 554e5f53 70284c4c 0000296e     DE_IS_NULL(pn)..
   1e3fc:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   1e40c:	4c554e5f 6e70284c 3e2d3273 65646f6e     _NULL(pns2->node
   1e41c:	5d305b73 00000029 6f705f6e 65645f73     s[0])...n_pos_de
   1e42c:	6c756166 3e207374 0030203d 776b5f6e     faults >= 0.n_kw
   1e43c:	6665645f 746c7561 3d3e2073 00003020     _defaults >= 0..
   1e44c:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   1e45c:	5254535f 28544355 00296e70 6b5f6e70     _STRUCT(pn).pn_k
   1e46c:	20646e69 50203d3d 61765f4e 67726172     ind == PN_vararg
   1e47c:	73696c73 616e5f74 0000656d 2d6e6f6e     slist_name..non-
   1e48c:	61666564 20746c75 75677261 746e656d     default argument
   1e49c:	6c6f6620 73776f6c 66656420 746c7561      follows default
   1e4ac:	67726120 6e656d75 00000074 61766e69      argument...inva
   1e4bc:	2064696c 7263696d 7479706f 206e6f68     lid micropython 
   1e4cc:	6f636564 6f746172 00000072 505f504d     decorator...MP_P
   1e4dc:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1e4ec:	5f544355 444e494b 646f6e28 695b7365     UCT_KIND(nodes[i
   1e4fc:	50202c5d 65645f4e 61726f63 29726f74     ], PN_decorator)
   1e50c:	00000000 505f504d 45535241 444f4e5f     ....MP_PARSE_NOD
   1e51c:	53495f45 2844495f 656d616e 646f6e5f     E_IS_ID(name_nod
   1e52c:	6a5b7365 0000295d 505f504d 45535241     es[j])..MP_PARSE
   1e53c:	444f4e5f 54535f45 54435552 4e494b5f     _NODE_STRUCT_KIN
   1e54c:	6e702844 6f625f73 20297964 50203d3d     D(pns_body) == P
   1e55c:	6c635f4e 64737361 00006665 505f504d     N_classdef..MP_P
   1e56c:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1e57c:	5f544355 444e494b 2c6e7028 5f4e5020     UCT_KIND(pn, PN_
   1e58c:	74736574 7473696c 6d6f635f 00002970     testlist_comp)..
   1e59c:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   1e5ac:	4c554e5f 6e70284c 3e2d3173 65646f6e     _NULL(pns1->node
   1e5bc:	5d305b73 00000029 276e6163 65642074     s[0])...can't de
   1e5cc:	6574656c 70786520 73736572 006e6f69     lete expression.
   1e5dc:	65726227 20276b61 7374756f 20656469     'break' outside 
   1e5ec:	706f6f6c 00000000 706d6f63 75633e2d     loop....comp->cu
   1e5fc:	78655f72 74706563 76656c5f 3e206c65     r_except_level >
   1e60c:	6f63203d 3e2d706d 61657262 6f635f6b     = comp->break_co
   1e61c:	6e69746e 655f6575 70656378 656c5f74     ntinue_except_le
   1e62c:	006c6576 6e6f6327 756e6974 6f202765     vel.'continue' o
   1e63c:	69737475 6c206564 00706f6f 74657227     utside loop.'ret
   1e64c:	276e7275 74756f20 65646973 6e756620     urn' outside fun
   1e65c:	6f697463 0000006e 505f504d 45535241     ction...MP_PARSE
   1e66c:	444f4e5f 53495f45 5254535f 5f544355     _NODE_IS_STRUCT_
   1e67c:	444e494b 2c6e7028 5f4e5020 74746f64     KIND(pn, PN_dott
   1e68c:	6e5f6465 29656d61 00000000 5f504d21     ed_name)....!MP_
   1e69c:	53524150 4f4e5f45 495f4544 554e5f53     PARSE_NODE_IS_NU
   1e6ac:	70284c4c 6d695f6e 74726f70 756f735f     LL(pn_import_sou
   1e6bc:	29656372 00000000 505f504d 45535241     rce)....MP_PARSE
   1e6cc:	444f4e5f 53495f45 5254535f 5f544355     _NODE_IS_STRUCT_
   1e6dc:	444e494b 5f6e7028 65646f6e 5d695b73     KIND(pn_nodes[i]
   1e6ec:	4e50202c 706d695f 5f74726f 6e5f7361     , PN_import_as_n
   1e6fc:	29656d61 00000000 6e656469 69666974     ame)....identifi
   1e70c:	72207265 66656465 64656e69 20736120     er redefined as 
   1e71c:	626f6c67 00006c61 62206f6e 69646e69     global..no bindi
   1e72c:	6620676e 6e20726f 6f6c6e6f 206c6163     ng for nonlocal 
   1e73c:	6e756f66 00000064 6e656469 69666974     found...identifi
   1e74c:	72207265 66656465 64656e69 20736120     er redefined as 
   1e75c:	6c6e6f6e 6c61636f 00000000 276e6163     nonlocal....can'
   1e76c:	65642074 72616c63 6f6e2065 636f6c6e     t declare nonloc
   1e77c:	69206c61 756f206e 20726574 65646f63     al in outer code
   1e78c:	00000000 505f504d 45535241 444f4e5f     ....MP_PARSE_NOD
   1e79c:	53495f45 5254535f 5f544355 444e494b     E_IS_STRUCT_KIND
   1e7ac:	5f6e7028 66696c65 2c5d695b 5f4e5020     (pn_elif[i], PN_
   1e7bc:	735f6669 5f746d74 66696c65 00000029     if_stmt_elif)...
   1e7cc:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   1e7dc:	414d535f 495f4c4c 7028544e 74735f6e     _SMALL_INT(pn_st
   1e7ec:	00297065 505f504d 45535241 444f4e5f     ep).MP_PARSE_NOD
   1e7fc:	53495f45 5254535f 5f544355 444e494b     E_IS_STRUCT_KIND
   1e80c:	5f6e7028 65637865 5b737470 202c5d69     (pn_excepts[i], 
   1e81c:	745f4e50 735f7972 5f746d74 65637865     PN_try_stmt_exce
   1e82c:	00297470 61666564 20746c75 63786527     pt).default 'exc
   1e83c:	27747065 73756d20 65622074 73616c20     ept' must be las
   1e84c:	00000074 505f504d 45535241 444f4e5f     t...MP_PARSE_NOD
   1e85c:	53495f45 4c554e5f 6e70284c 736c655f     E_IS_NULL(pn_els
   1e86c:	00002965 505f504d 45535241 444f4e5f     e)..MP_PARSE_NOD
   1e87c:	53495f45 5254535f 28544355 2d736e70     E_IS_STRUCT(pns-
   1e88c:	646f6e3e 315b7365 0000295d 203e206e     >nodes[1])..n > 
   1e89c:	00000030 505f504d 45535241 444f4e5f     0...MP_PARSE_NOD
   1e8ac:	53495f45 4b4f545f 70284e45 2d31736e     E_IS_TOKEN(pns1-
   1e8bc:	646f6e3e 305b7365 0000295d 505f504d     >nodes[0])..MP_P
   1e8cc:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1e8dc:	5f544355 444e494b 736e7028 6f6e3e2d     UCT_KIND(pns->no
   1e8ec:	5b736564 202c5d31 745f4e50 5f747365     des[1], PN_test_
   1e8fc:	655f6669 2965736c 00000000 505f504d     if_else)....MP_P
   1e90c:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1e91c:	28544355 2d736e70 646f6e3e 695b7365     UCT(pns->nodes[i
   1e92c:	0000295d 646e696b 203d3d20 635f4e50     ])..kind == PN_c
   1e93c:	5f706d6f 695f706f 00000073 6d20782a     omp_op_is...*x m
   1e94c:	20747375 61206562 67697373 6e656d6e     ust be assignmen
   1e95c:	61742074 74656772 00000000 206b6f74     t target....tok 
   1e96c:	4d203d3d 4f545f50 5f4e454b 445f504f     == MP_TOKEN_OP_D
   1e97c:	4d5f4c42 0045524f 206b6f74 4d203d3d     BL_MORE.tok == M
   1e98c:	4f545f50 5f4e454b 545f504f 45444c49     P_TOKEN_OP_TILDE
   1e99c:	00000000 65707573 20292872 276e6163     ....super() can'
   1e9ac:	69662074 7320646e 00666c65 276e6163     t find self.can'
   1e9bc:	61682074 6d206576 69746c75 20656c70     t have multiple 
   1e9cc:	0000782a 276e6163 61682074 6d206576     *x..can't have m
   1e9dc:	69746c75 20656c70 00782a2a 2053484c     ultiple **x.LHS 
   1e9ec:	6b20666f 6f777965 61206472 6d206772     of keyword arg m
   1e9fc:	20747375 61206562 6469206e 00000000     ust be an id....
   1ea0c:	2d6e6f6e 7779656b 2064726f 20677261     non-keyword arg 
   1ea1c:	65746661 2f2a2072 00002a2a 2d6e6f6e     after */**..non-
   1ea2c:	7779656b 2064726f 20677261 65746661     keyword arg afte
   1ea3c:	656b2072 726f7779 72612064 00000067     r keyword arg...
   1ea4c:	505f504d 45535241 444f4e5f 54535f45     MP_PARSE_NODE_ST
   1ea5c:	54435552 4d554e5f 444f4e5f 70285345     RUCT_NUM_NODES(p
   1ea6c:	2029736e 32203d3d 00000000 505f504d     ns) == 2....MP_P
   1ea7c:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1ea8c:	5f544355 444e494b 736e7028 6f6e3e2d     UCT_KIND(pns->no
   1ea9c:	5b736564 202c5d31 635f4e50 5f706d6f     des[1], PN_comp_
   1eaac:	29726f66 00000000 5f504d21 53524150     for)....!MP_PARS
   1eabc:	4f4e5f45 495f4544 554e5f53 70284c4c     E_NODE_IS_NULL(p
   1eacc:	3e2d736e 65646f6e 5d315b73 00000029     ns->nodes[1])...
   1eadc:	505f504d 45535241 444f4e5f 53495f45     MP_PARSE_NODE_IS
   1eaec:	4c554e5f 6e70284c 3e2d3373 65646f6e     _NULL(pns3->node
   1eafc:	5d305b73 00000029 61766e69 2064696c     s[0])...invalid 
   1eb0c:	746e7973 00007861 505f504d 45535241     syntax..MP_PARSE
   1eb1c:	444f4e5f 54535f45 54435552 4e494b5f     _NODE_STRUCT_KIN
   1eb2c:	6e702844 20293173 50203d3d 6f635f4e     D(pns1) == PN_co
   1eb3c:	665f706d 0000726f 00000030 65697927     mp_for..0...'yie
   1eb4c:	2027646c 7374756f 20656469 636e7566     ld' outside func
   1eb5c:	6e6f6974 00000000                       tion....

0001eb64 <compile_function>:
   1eb64:	00004f09 00004f09 00005c8d 00005e45     .O...O...\..E^..
   1eb74:	00004f09 000076d9 00005091 000060fd     .O...v...P...`..
   1eb84:	00004f09 00006121 00006191 00006201     .O..!a...a...b..
   1eb94:	00006259 00006281 0000653d 00006561     Yb...b..=e..ae..
   1eba4:	00006849 00006909 00006979 000069f9     Ih...i..yi...i..
   1ebb4:	00006bb1 00006e9d 00007491 00007651     .k...n...t..Qv..
   1ebc4:	00004f09 0000798d 00007a49 00007a49     .O...y..Iz..Iz..
   1ebd4:	00007b01 00007b1d 00007b39 00007b65     .{...{..9{..e{..
   1ebe4:	00007d8d 00007db1 00007dcd 00007de9     .}...}...}...}..
   1ebf4:	00007e05 00007e05 00007e05 00007ef1     .~...~...~...~..
   1ec04:	00008165 00007f61 00008485 00008591     e...a...........
   1ec14:	000086d5 000088a1 000088c1 000088ed     ................
   1ec24:	00005091 00005091 00008911 0000893d     .P...P......=...
   1ec34:	00008969 00008a2d 505f504d 45535241     i...-...MP_PARSE
   1ec44:	444f4e5f 54535f45 54435552 4e494b5f     _NODE_STRUCT_KIN
   1ec54:	6e702844 3c202973 4e50203d 6e6f635f     D(pns) <= PN_con
   1ec64:	6f5f7473 63656a62 00000074 505f504d     st_object...MP_P
   1ec74:	45535241 444f4e5f 53495f45 5254535f     ARSE_NODE_IS_STR
   1ec84:	5f544355 444e494b 736e7028 6f6e3e2d     UCT_KIND(pns->no
   1ec94:	5b736564 202c5d30 745f4e50 65647066     des[0], PN_tfpde
   1eca4:	00002966 505f504d 45535241 444f4e5f     f)..MP_PARSE_NOD
   1ecb4:	54535f45 54435552 4e494b5f 6e702844     E_STRUCT_KIND(pn
   1ecc4:	3d202973 6e70203d 6c62645f 6174735f     s) == pn_dbl_sta
   1ecd4:	00000072 656d616e 75657220 20646573     r...name reused 
   1ece4:	20726f66 75677261 746e656d 00000000     for argument....
   1ecf4:	505f504d 45535241 444f4e5f 54535f45     MP_PARSE_NODE_ST
   1ed04:	54435552 4e494b5f 6d282844 61705f70     RUCT_KIND((mp_pa
   1ed14:	5f657372 65646f6e 7274735f 5f746375     rse_node_struct_
   1ed24:	70292a74 74695f6e 20297265 50203d3d     t*)pn_iter) == P
   1ed34:	6f635f4e 665f706d 0000726f 706f6373     N_comp_for..scop
   1ed44:	6b3e2d65 20646e69 53203d3d 45504f43     e->kind == SCOPE
   1ed54:	444f4d5f 00454c55 505f504d 45535241     _MODULE.MP_PARSE
   1ed64:	444f4e5f 53495f45 5254535f 28544355     _NODE_IS_STRUCT(
   1ed74:	706f6373 703e2d65 0000296e 505f504d     scope->pn)..MP_P
   1ed84:	45535241 444f4e5f 54535f45 54435552     ARSE_NODE_STRUCT
   1ed94:	4e494b5f 6e702844 3d202973 4e50203d     _KIND(pns) == PN
   1eda4:	6e75665f 66656463 00000000 505f504d     _funcdef....MP_P
   1edb4:	45535241 444f4e5f 54535f45 54435552     ARSE_NODE_STRUCT
   1edc4:	4d554e5f 444f4e5f 70285345 2029736e     _NUM_NODES(pns) 
   1edd4:	33203d3d 00000000 65646461 00000064     == 3....added...
   1ede4:	706f6373 6b3e2d65 20646e69 53203d3d     scope->kind == S
   1edf4:	45504f43 414c435f 00005353 505f504d     COPE_CLASS..MP_P
   1ee04:	45535241 444f4e5f 54535f45 54435552     ARSE_NODE_STRUCT
   1ee14:	4e494b5f 6e702844 3d202973 4e50203d     _KIND(pns) == PN
   1ee24:	616c635f 65647373 00000066 21206469     _classdef...id !
   1ee34:	554e203d 00004c4c 706d6f63 75633e2d     = NULL..comp->cu
   1ee44:	78655f72 74706563 76656c5f 3d206c65     r_except_level =
   1ee54:	0030203d 64692821 663e2d32 7367616c     = 0.!(id2->flags
   1ee64:	49202620 4c465f44 495f4741 41505f53      & ID_FLAG_IS_PA
   1ee74:	294d4152 00000000                       RAM)....

0001ee7c <__func__.7470>:
   1ee7c:	706d6f63 5f656c69 72636564 65736165     compile_decrease
   1ee8c:	6378655f 5f747065 6576656c 0000006c     _except_level...

0001ee9c <__func__.7552>:
   1ee9c:	66695f63 6e6f635f 00000064              c_if_cond...

0001eea8 <__func__.7573>:
   1eea8:	73615f63 6e676973 6f74615f 78655f6d     c_assign_atom_ex
   1eeb8:	00007270                                pr..

0001eebc <__func__.7595>:
   1eebc:	73615f63 6e676973 00000000              c_assign....

0001eec8 <__func__.7621>:
   1eec8:	736f6c63 766f5f65 765f7265 61697261     close_over_varia
   1eed8:	73656c62 6374655f 00000000              bles_etc....

0001eee4 <__func__.7638>:
   1eee4:	706d6f63 5f656c69 636e7566 5f666564     compile_funcdef_
   1eef4:	626d616c 5f666564 61726170 0000006d     lambdef_param...

0001ef04 <__func__.7683>:
   1ef04:	706d6f63 5f656c69 6f636564 65746172     compile_decorate
   1ef14:	00000064                                d...

0001ef18 <__func__.7716>:
   1ef18:	65645f63 74735f6c 0000746d              c_del_stmt..

0001ef24 <__func__.7734>:
   1ef24:	706d6f63 5f656c69 61657262 74735f6b     compile_break_st
   1ef34:	0000746d                                mt..

0001ef38 <__func__.7739>:
   1ef38:	706d6f63 5f656c69 746e6f63 65756e69     compile_continue
   1ef48:	6d74735f 00000074                       _stmt...

0001ef50 <__func__.7763>:
   1ef50:	695f6f64 726f706d 616e5f74 0000656d     do_import_name..

0001ef60 <__func__.7801>:
   1ef60:	706d6f63 5f656c69 6f706d69 665f7472     compile_import_f
   1ef70:	006d6f72                                rom.

0001ef74 <__func__.7874>:
   1ef74:	706d6f63 5f656c69 735f6669 00746d74     compile_if_stmt.

0001ef84 <__func__.7907>:
   1ef84:	706d6f63 5f656c69 5f726f66 746d7473     compile_for_stmt
   1ef94:	74706f5f 73696d69 725f6465 65676e61     _optimised_range
   1efa4:	00000000                                ....

0001efa8 <__func__.7940>:
   1efa8:	706d6f63 5f656c69 5f797274 65637865     compile_try_exce
   1efb8:	00007470                                pt..

0001efbc <__func__.7959>:
   1efbc:	706d6f63 5f656c69 5f797274 616e6966     compile_try_fina
   1efcc:	00796c6c                                lly.

0001efd0 <__func__.7964>:
   1efd0:	706d6f63 5f656c69 5f797274 746d7473     compile_try_stmt
   1efe0:	00000000                                ....

0001efe4 <__func__.7984>:
   1efe4:	706d6f63 5f656c69 68746977 6d74735f     compile_with_stm
   1eff4:	00000074                                t...

0001eff8 <__func__.7994>:
   1eff8:	706d6f63 5f656c69 72707865 6d74735f     compile_expr_stm
   1f008:	00000074                                t...

0001f00c <__func__.8030>:
   1f00c:	706d6f63 5f656c69 74736574 5f66695f     compile_test_if_
   1f01c:	72707865 00000000                       expr....

0001f024 <__func__.8081>:
   1f024:	706d6f63 5f656c69 706d6f63 73697261     compile_comparis
   1f034:	00006e6f                                on..

0001f038 <__func__.8121>:
   1f038:	706d6f63 5f656c69 6d726574 00000000     compile_term....

0001f048 <__func__.8135>:
   1f048:	706d6f63 5f656c69 74636166 325f726f     compile_factor_2
   1f058:	00000000                                ....

0001f05c <__func__.8184>:
   1f05c:	706d6f63 5f656c69 706d6f63 65686572     compile_comprehe
   1f06c:	6f69736e 0000006e                       nsion...

0001f074 <__func__.8192>:
   1f074:	706d6f63 5f656c69 6d6f7461 7261705f     compile_atom_par
   1f084:	00006e65                                en..

0001f088 <__func__.8201>:
   1f088:	706d6f63 5f656c69 6d6f7461 6172625f     compile_atom_bra
   1f098:	74656b63 00000000                       cket....

0001f0a0 <__func__.8208>:
   1f0a0:	706d6f63 5f656c69 6d6f7461 6172625f     compile_atom_bra
   1f0b0:	00006563                                ce..

0001f0b4 <__func__.8271>:
   1f0b4:	706d6f63 5f656c69 65646f6e 00000000     compile_node....

0001f0c4 <__func__.8282>:
   1f0c4:	706d6f63 5f656c69 706f6373 75665f65     compile_scope_fu
   1f0d4:	6c5f636e 64626d61 61705f61 006d6172     nc_lambda_param.

0001f0e4 <__func__.8305>:
   1f0e4:	706d6f63 5f656c69 706f6373 6f635f65     compile_scope_co
   1f0f4:	695f706d 00726574                       mp_iter.

0001f0fc <__func__.8316>:
   1f0fc:	706d6f63 5f656c69 706f6373 00000065     compile_scope...

0001f10c <__func__.8355>:
   1f10c:	706f6373 6f635f65 7475706d 68745f65     scope_compute_th
   1f11c:	73676e69 00000000 21206469 554e203d     ings....id != NU
   1f12c:	00004c4c 2e2f2e2e 79702f2e 696d652f     LL..../../py/emi
   1f13c:	6d6f6374 2e6e6f6d 00000063 3e2d6469     tcommon.c...id->
   1f14c:	646e696b 203d3d20 495f4449 5f4f464e     kind == ID_INFO_
   1f15c:	444e494b 4c45435f 7c7c204c 2d646920     KIND_CELL || id-
   1f16c:	6e696b3e 3d3d2064 5f444920 4f464e49     >kind == ID_INFO
   1f17c:	4e494b5f 52465f44 00004545              _KIND_FREE..

0001f188 <__func__.6227>:
   1f188:	655f706d 5f74696d 6d6d6f63 695f6e6f     mp_emit_common_i
   1f198:	706f5f64 00000000 74696d65 6f633e2d     d_op....emit->co
   1f1a8:	695f6564 5f6f666e 7366666f 2b207465     de_info_offset +
   1f1b8:	6d756e20 7479625f 745f7365 72775f6f      num_bytes_to_wr
   1f1c8:	20657469 65203d3c 2d74696d 646f633e     ite <= emit->cod
   1f1d8:	6e695f65 735f6f66 00657a69 2e2f2e2e     e_info_size.../.
   1f1e8:	79702f2e 696d652f 2e636274 00000063     ./py/emitbc.c...
   1f1f8:	74737128 203e3e20 20293631 30203d3d     (qst >> 16) == 0
   1f208:	00000000 74696d65 79623e2d 6f636574     ....emit->byteco
   1f218:	6f5f6564 65736666 202b2074 5f6d756e     de_offset + num_
   1f228:	65747962 6f745f73 6972775f 3c206574     bytes_to_write <
   1f238:	6d65203d 3e2d7469 65747962 65646f63     = emit->bytecode
   1f248:	7a69735f 00000065 3e2d6469 61636f6c     _size...id->loca
   1f258:	756e5f6c 203c206d 00353532 74696d65     l_num < 255.emit
   1f268:	74733e2d 5f6b6361 657a6973 203d3d20     ->stack_size == 
   1f278:	00000030 74696d65 61703e2d 3c207373     0...emit->pass <
   1f288:	504d203d 5341505f 54535f53 5f4b4341     = MP_PASS_STACK_
   1f298:	455a4953 207c7c20 696d6528 633e2d74     SIZE || (emit->c
   1f2a8:	756e5f74 626f5f6d 3d3d206a 696d6520     t_num_obj == emi
   1f2b8:	633e2d74 75635f74 626f5f72 0000296a     t->ct_cur_obj)..
   1f2c8:	5f706d28 5f746e69 6d652974 3e2d7469     (mp_int_t)emit->
   1f2d8:	63617473 69735f6b 2b20657a 6c656420     stack_size + del
   1f2e8:	3e206174 0030203d 203c206c 74696d65     ta >= 0.l < emit
   1f2f8:	616d3e2d 756e5f78 616c5f6d 736c6562     ->max_num_labels
   1f308:	00000000 74696d65 616c3e2d 5f6c6562     ....emit->label_
   1f318:	7366666f 5b737465 3d205d6c 6d28203d     offsets[l] == (m
   1f328:	69755f70 745f746e 00312d29 74696d65     p_uint_t)-1.emit
   1f338:	616c3e2d 5f6c6562 7366666f 5b737465     ->label_offsets[
   1f348:	3d205d6c 6d65203d 3e2d7469 65747962     l] == emit->byte
   1f358:	65646f63 66666f5f 00746573 206b6f74     code_offset.tok 
   1f368:	4d203d3d 4f545f50 5f4e454b 494c4c45     == MP_TOKEN_ELLI
   1f378:	53495350 00000000 6c635f6e 6465736f     PSIS....n_closed
   1f388:	65766f5f 3d3c2072 35353220 00000000     _over <= 255....
   1f398:	72615f6e 3c207367 0032203d              n_args <= 2.

0001f3a4 <mp_emit_bc_method_table_load_id_ops>:
   1f3a4:	0000a509 0000a559                       ....Y...

0001f3ac <mp_emit_bc_method_table_store_id_ops>:
   1f3ac:	0000a689 0000a6d9                       ........

0001f3b4 <mp_emit_bc_method_table_delete_id_ops>:
   1f3b4:	0000a709 0000a731                       ....1...

0001f3bc <__func__.7005>:
   1f3bc:	74696d65 7465675f 7275635f 5f6f745f     emit_get_cur_to_
   1f3cc:	74697277 6f635f65 695f6564 006f666e     write_code_info.

0001f3dc <__func__.7019>:
   1f3dc:	74696d65 6972775f 635f6574 5f65646f     emit_write_code_
   1f3ec:	6f666e69 7473715f 00000072              info_qstr...

0001f3f8 <__func__.7025>:
   1f3f8:	74696d65 7465675f 7275635f 5f6f745f     emit_get_cur_to_
   1f408:	74697277 79625f65 6f636574 00006564     write_bytecode..

0001f418 <__func__.7067>:
   1f418:	74696d65 6972775f 625f6574 63657479     emit_write_bytec
   1f428:	5f65646f 65747962 7473715f 00000072     ode_byte_qstr...

0001f438 <__func__.7101>:
   1f438:	655f706d 5f74696d 735f6362 74726174     mp_emit_bc_start
   1f448:	7361705f 00000073                       _pass...

0001f450 <__func__.7118>:
   1f450:	655f706d 5f74696d 655f6362 705f646e     mp_emit_bc_end_p
   1f460:	00737361                                ass.

0001f464 <__func__.7126>:
   1f464:	655f706d 5f74696d 615f6362 73756a64     mp_emit_bc_adjus
   1f474:	74735f74 5f6b6361 657a6973 00000000     t_stack_size....

0001f484 <__func__.7139>:
   1f484:	655f706d 5f74696d 6c5f6362 6c656261     mp_emit_bc_label
   1f494:	7373615f 006e6769                       _assign.

0001f49c <__func__.7154>:
   1f49c:	655f706d 5f74696d 6c5f6362 5f64616f     mp_emit_bc_load_
   1f4ac:	736e6f63 6f745f74 0000006b              const_tok...

0001f4b8 <__func__.7333>:
   1f4b8:	655f706d 5f74696d 6d5f6362 5f656b61     mp_emit_bc_make_
   1f4c8:	736f6c63 00657275                       closure.

0001f4d0 <__func__.7361>:
   1f4d0:	655f706d 5f74696d 725f6362 65736961     mp_emit_bc_raise
   1f4e0:	7261765f 73677261 00000000 28746e69     _varargs....int(
   1f4f0:	72612029 20322067 7473756d 20656220     ) arg 2 must be 
   1f500:	32203d3e 646e6120 203d3c20 00003633     >= 2 and <= 36..
   1f510:	61766e69 2064696c 746e7973 66207861     invalid syntax f
   1f520:	6920726f 6765746e 00007265 69636564     or integer..deci
   1f530:	206c616d 626d756e 20737265 20746f6e     mal numbers not 
   1f540:	70707573 6574726f 00000064 21206372     supported...rc !
   1f550:	554e203d 00004c4c 2e2f2e2e 79702f2e     = NULL..../../py
   1f560:	696d652f 756c6774 00632e65 5f666564     /emitglue.c.def_
   1f570:	73677261 203d3d20 4f5f504d 4e5f4a42     args == MP_OBJ_N
   1f580:	204c4c55 4d207c7c 424f5f50 53495f4a     ULL || MP_OBJ_IS
   1f590:	5059545f 65642845 72615f66 202c7367     _TYPE(def_args, 
   1f5a0:	5f706d26 65707974 7075745f 0029656c     &mp_type_tuple).
   1f5b0:	5f666564 615f776b 20736772 4d203d3d     def_kw_args == M
   1f5c0:	424f5f50 554e5f4a 7c204c4c 504d207c     P_OBJ_NULL || MP
   1f5d0:	4a424f5f 5f53495f 45505954 66656428     _OBJ_IS_TYPE(def
   1f5e0:	5f776b5f 73677261 6d26202c 79745f70     _kw_args, &mp_ty
   1f5f0:	645f6570 29746369 00000000 3e2d6372     pe_dict)....rc->
   1f600:	646e696b 203d3d20 435f504d 5f45444f     kind == MP_CODE_
   1f610:	45545942 45444f43 00000000              BYTECODE....

0001f61c <__func__.6565>:
   1f61c:	6d5f706d 5f656b61 636e7566 6e6f6974     mp_make_function
   1f62c:	6f72665f 61725f6d 6f635f77 00006564     _from_raw_code..

0001f63c <mp_module___main__>:
   1f63c:	000213b8 20000a64 656d616e 746f6e20     ....d.. name not
   1f64c:	66656420 64656e69 00000000 3d20706f      defined....op =
   1f65c:	504d203d 414e555f 4f5f5952 4e495f50     = MP_UNARY_OP_IN
   1f66c:	54524556 00000000 2e2f2e2e 79702f2e     VERT....../../py
   1f67c:	6e75722f 656d6974 0000632e 75736e75     /runtime.c..unsu
   1f68c:	726f7070 20646574 65707974 726f6620     pported type for
   1f69c:	65706f20 6f746172 00000072 6167656e      operator...nega
   1f6ac:	65766974 69687320 63207466 746e756f     tive shift count
   1f6bc:	00000000 6167656e 65766974 776f7020     ....negative pow
   1f6cc:	77207265 20687469 66206f6e 74616f6c     er with no float
   1f6dc:	70757320 74726f70 00000000 69766964      support....divi
   1f6ec:	6e6f6973 20796220 6f72657a 00000000     sion by zero....
   1f6fc:	656a626f 6e207463 6320746f 616c6c61     object not calla
   1f70c:	00656c62 73677261 656c5f32 202b206e     ble.args2_len + 
   1f71c:	202a2032 2d70616d 6573753e 3d3c2064     2 * map->used <=
   1f72c:	67726120 615f3273 636f6c6c 00000000      args2_alloc....
   1f73c:	6e6f7277 756e2067 7265626d 20666f20     wrong number of 
   1f74c:	756c6176 74207365 6e75206f 6b636170     values to unpack
   1f75c:	00000000 65707974 6f6c3e2d 736c6163     ....type->locals
   1f76c:	6369645f 623e2d74 2e657361 65707974     _dict->base.type
   1f77c:	203d3d20 5f706d26 65707974 6369645f      == &mp_type_dic
   1f78c:	00000074 73206f6e 20686375 72747461     t...no such attr
   1f79c:	74756269 00000065 6e695f6f 00000000     ibute...o_in....
   1f7ac:	656a626f 6e207463 6920746f 61726574     object not itera
   1f7bc:	00656c62 656a626f 6e207463 6120746f     ble.object not a
   1f7cc:	7469206e 74617265 0000726f 6e657328     n iterator..(sen
   1f7dc:	61765f64 2065756c 4d203d21 424f5f50     d_value != MP_OB
   1f7ec:	554e5f4a 20294c4c 7428205e 776f7268     J_NULL) ^ (throw
   1f7fc:	6c61765f 21206575 504d203d 4a424f5f     _value != MP_OBJ
   1f80c:	4c554e5f 0000294c 6f726874 61765f77     _NULL)..throw_va
   1f81c:	2065756c 4d203d21 424f5f50 554e5f4a     lue != MP_OBJ_NU
   1f82c:	00004c4c 65637865 6f697470 6d20736e     LL..exceptions m
   1f83c:	20747375 69726564 66206576 206d6f72     ust derive from 
   1f84c:	65736142 65637845 6f697470 0000006e     BaseException...
   1f85c:	6e6e6163 6920746f 726f706d 616e2074     cannot import na
   1f86c:	2520656d 00000071 6f6d656d 61207972     me %q...memory a
   1f87c:	636f6c6c 6f697461 6166206e 64656c69     llocation failed
   1f88c:	6568202c 69207061 6f6c2073 64656b63     , heap is locked
   1f89c:	00000000 6f6d656d 61207972 636f6c6c     ....memory alloc
   1f8ac:	6f697461 6166206e 64656c69 6c61202c     ation failed, al
   1f8bc:	61636f6c 676e6974 20752520 65747962     locating %u byte
   1f8cc:	00000073                                s...

0001f8d0 <__func__.7003>:
   1f8d0:	755f706d 7972616e 00706f5f              mp_unary_op.

0001f8dc <__func__.7120>:
   1f8dc:	635f706d 5f6c6c61 70657270 5f657261     mp_call_prepare_
   1f8ec:	73677261 6b5f6e5f 61765f77 00000072     args_n_kw_var...

0001f8fc <__func__.7208>:
   1f8fc:	6c5f706d 5f64616f 6874656d 6d5f646f     mp_load_method_m
   1f90c:	65627961 00000000                       aybe....

0001f914 <__func__.7234>:
   1f914:	675f706d 74697465 00007265              mp_getiter..

0001f920 <__func__.7256>:
   1f920:	725f706d 6d757365 00000065 6c6c6128     mp_resume...(all
   1f930:	6465776f 2e5d695b 67616c66 20262073     owed[i].flags & 
   1f940:	415f504d 4b5f4752 5f444e49 4b53414d     MP_ARG_KIND_MASK
   1f950:	3d3d2029 5f504d20 5f475241 004a424f     ) == MP_ARG_OBJ.
   1f960:	2e2f2e2e 79702f2e 6772612f 63656863     ../../py/argchec
   1f970:	00632e6b 75677261 746e656d 6d756e20     k.c.argument num
   1f980:	7079742f 6d207365 616d7369 00686374     /types mismatch.

0001f990 <__func__.6121>:
   1f990:	615f706d 705f6772 65737261 6c6c615f     mp_arg_parse_all
   1f9a0:	00000000                                ....

0001f9a4 <mp_const_empty_map>:
   1f9a4:	00000006 00000000 00000000              ............

0001f9b0 <hash_allocation_sizes>:
   1f9b0:	00020000 00060004 000a0008 0011000c     ................
   1f9c0:	001d0017 002f0025 0049003b 007f0061     ....%./.;.I.a...
   1f9d0:	00df00a7 01850125 02b30209 04c70397     ....%...........
   1f9e0:	0871065b 12df0c9d 2a6d1c4b 5f573f91     [.q.....K.m*.?W_
   1f9f0:	d67b8eff 70616d21 73693e2d 7869665f     ..{.!map->is_fix
   1fa00:	7c206465 6f6c207c 70756b6f 6e696b5f     ed || lookup_kin
   1fa10:	3d3d2064 5f504d20 5f50414d 4b4f4f4c     d == MP_MAP_LOOK
   1fa20:	00005055 2e2f2e2e 79702f2e 70616d2f     UP..../../py/map
   1fa30:	0000632e                                .c..

0001fa34 <__func__.6226>:
   1fa34:	6d5f706d 6c5f7061 756b6f6f 00000070     mp_map_lookup...
   1fa44:	6c696e28 00000029 3e71253c 00000000     (nil)...<%q>....
   1fa54:	2025206e 3d3d2033 00003020 2e2f2e2e     n % 3 == 0..../.
   1fa64:	79702f2e 6a626f2f 0000632e 63617254     ./py/obj.c..Trac
   1fa74:	63616265 6d28206b 2074736f 65636572     eback (most rece
   1fa84:	6320746e 206c6c61 7473616c 000a3a29     nt call last):..
   1fa94:	69462020 2220656c 00227125 0000000a       File "%q".....
   1faa4:	6e69202c 0a712520 00000000 276e6163     , in %q.....can'
   1fab4:	6f632074 7265766e 6f742074 746e6920     t convert to int
   1fac4:	00000000 65707865 64657463 70757420     ....expected tup
   1fad4:	6c2f656c 00747369 6c707574 696c2f65     le/list.tuple/li
   1fae4:	68207473 77207361 676e6f72 6e656c20     st has wrong len
   1faf4:	00687467 69646e69 20736563 7473756d     gth.indices must
   1fb04:	20656220 65746e69 73726567 00000000      be integers....
   1fb14:	65646e69 756f2078 666f2074 6e617220     index out of ran
   1fb24:	00006567 656a626f 68207463 6e207361     ge..object has n
   1fb34:	656c206f 0000006e 656a626f 64207463     o len...object d
   1fb44:	2073656f 20746f6e 70707573 2074726f     oes not support 
   1fb54:	6d657469 6c656420 6f697465 0000006e     item deletion...
   1fb64:	656a626f 69207463 6f6e2073 75732074     object is not su
   1fb74:	72637362 61747069 00656c62 656a626f     bscriptable.obje
   1fb84:	64207463 2073656f 20746f6e 70707573     ct does not supp
   1fb94:	2074726f 6d657469 73736120 6d6e6769     ort item assignm
   1fba4:	00746e65                                ent.

0001fba8 <mp_identity_obj>:
   1fba8:	000209a8 0000dfc5 656a626f 77207463     ........object w
   1fbb8:	20687469 66667562 70207265 6f746f72     ith buffer proto
   1fbc8:	206c6f63 75716572 64657269 00000000     col required....

0001fbd8 <__func__.6752>:
   1fbd8:	6f5f706d 705f6a62 746e6972 6378655f     mp_obj_print_exc
   1fbe8:	69747065 00006e6f 65757254 00000000     eption..True....
   1fbf8:	736c6146 00000065                       False...

0001fc00 <mp_type_bool>:
   1fc00:	00022160 00000059 0000e0bd 0000e0f9     `!..Y...........
   1fc10:	00000000 0000e141 0000e175 00000000     ....A...u.......
	...

0001fc3c <mp_const_false_obj>:
   1fc3c:	0001fc00 00000000                       ........

0001fc44 <mp_const_true_obj>:
   1fc44:	0001fc00 00000001                       ........

0001fc4c <mp_type_bound_meth>:
   1fc4c:	00022160 0000005a 00000000 00000000     `!..Z...........
   1fc5c:	0000e23d 00000000 00000000 00000000     =...............
	...

0001fc88 <mp_type_cell>:
   1fc88:	00022160 00000001 00000000 00000000     `!..............
	...

0001fcc4 <closure_type>:
   1fcc4:	00022160 00000063 00000000 00000000     `!..c...........
   1fcd4:	0000e309 00000000 00000000 00000000     ................
	...
   1fd00:	0000007b 0000202c 0000203a 0000007d     {..., ..: ..}...
   1fd10:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   1fd20:	5f666c65 20296e69 28202626 5f706d28     elf_in) && ((mp_
   1fd30:	5f6a626f 65736162 292a745f 6f762828     obj_base_t*)((vo
   1fd40:	292a6469 666c6573 296e695f 743e2d29     id*)self_in))->t
   1fd50:	2d657079 6b616d3e 656e5f65 3d3d2077     ype->make_new ==
   1fd60:	63696420 616d5f74 6e5f656b 00297765      dict_make_new).
   1fd70:	2e2f2e2e 79702f2e 6a626f2f 74636964     ../../py/objdict
   1fd80:	0000632e                                .c..

0001fd84 <dict_clear_obj>:
   1fd84:	000209a8 0000e829                       ....)...

0001fd8c <dict_copy_obj>:
   1fd8c:	000209a8 0000e88d                       ........

0001fd94 <dict_fromkeys_fun_obj>:
   1fd94:	00020af0 00030004 0000e94d              ........M...

0001fda0 <dict_fromkeys_obj>:
   1fda0:	000223a8 0001fd94 5f504d28 5f4a424f     .#......(MP_OBJ_
   1fdb0:	4f5f5349 61284a42 5b736772 20295d30     IS_OBJ(args[0]) 
   1fdc0:	28202626 5f706d28 5f6a626f 65736162     && ((mp_obj_base
   1fdd0:	292a745f 6f762828 292a6469 73677261     _t*)((void*)args
   1fde0:	295d305b 743e2d29 2d657079 6b616d3e     [0]))->type->mak
   1fdf0:	656e5f65 3d3d2077 63696420 616d5f74     e_new == dict_ma
   1fe00:	6e5f656b 00297765                       ke_new).

0001fe08 <dict_get_obj>:
   1fe08:	00020af0 00030004 0000eac1              ............

0001fe14 <dict_pop_obj>:
   1fe14:	00020af0 00030004 0000eae1              ............

0001fe20 <dict_setdefault_obj>:
   1fe20:	00020af0 00030004 0000eb01 69706f70     ............popi
   1fe30:	286d6574 64203a29 69746369 72616e6f     tem(): dictionar
   1fe40:	73692079 706d6520 00007974              y is empty..

0001fe4c <dict_popitem_obj>:
   1fe4c:	000209a8 0000eb21 74636964 64707520     ....!...dict upd
   1fe5c:	20657461 75716573 65636e65 73616820     ate sequence has
   1fe6c:	6f727720 6c20676e 74676e65 00000068      wrong length...

0001fe7c <dict_update_obj>:
   1fe7c:	00020af0 ffff0003 0000ebe5              ............

0001fe88 <dict_view_type>:
   1fe88:	00022160 00000068 0000eeb1 00000000     `!..h...........
	...
   1fea0:	0000ef85 00000000 00000000 0000ee39     ............9...
	...

0001fec4 <dict_view_it_type>:
   1fec4:	00022160 0000008b 00000000 00000000     `!..............
	...
   1fee8:	0000dfdd 0000ed9d 00000000 00000000     ................
	...
   1ff00:	74636964 6574695f 0000736d 74636964     dict_items..dict
   1ff10:	79656b5f 00000073 74636964 6c61765f     _keys...dict_val
   1ff20:	00736575                                ues.

0001ff24 <mp_dict_view_names>:
   1ff24:	0001ff00 0001ff0c 0001ff18 5f504d28     ............(MP_
   1ff34:	5f4a424f 4f5f5349 73284a42 5f666c65     OBJ_IS_OBJ(self_
   1ff44:	20296e69 28202626 706d2828 6a626f5f     in) && (((mp_obj
   1ff54:	7361625f 2a745f65 76282829 2a64696f     _base_t*)((void*
   1ff64:	6c657329 6e695f66 3e2d2929 65707974     )self_in))->type
   1ff74:	203d3d20 69642628 765f7463 5f776569      == (&dict_view_
   1ff84:	745f7469 29657079 00002929 5f504d28     it_type)))..(MP_
   1ff94:	5f4a424f 4f5f5349 76284a42 5f776569     OBJ_IS_OBJ(view_
   1ffa4:	20296e69 28202626 706d2828 6a626f5f     in) && (((mp_obj
   1ffb4:	7361625f 2a745f65 76282829 2a64696f     _base_t*)((void*
   1ffc4:	65697629 6e695f77 3e2d2929 65707974     )view_in))->type
   1ffd4:	203d3d20 69642628 765f7463 5f776569      == (&dict_view_
   1ffe4:	65707974 00292929 5f504d28 5f4a424f     type))).(MP_OBJ_
   1fff4:	4f5f5349 73284a42 5f666c65 20296e69     IS_OBJ(self_in) 
   20004:	28202626 706d2828 6a626f5f 7361625f     && (((mp_obj_bas
   20014:	2a745f65 76282829 2a64696f 6c657329     e_t*)((void*)sel
   20024:	6e695f66 3e2d2929 65707974 203d3d20     f_in))->type == 
   20034:	69642628 765f7463 5f776569 65707974     (&dict_view_type
   20044:	00292929 00005b28 0000295d              ))).([..])..

00020050 <dict_items_obj>:
   20050:	000209a8 0000f051                       ....Q...

00020058 <dict_keys_obj>:
   20058:	000209a8 0000f06d                       ....m...

00020060 <dict_values_obj>:
   20060:	000209a8 0000f089                       ........

00020068 <dict_locals_dict_table>:
   20068:	00000186 0001fd84 00000196 0001fd8c     ................
   20078:	000001ce 0001fda0 000001da 0001fe08     ................
   20088:	00000226 00020050 0000023a 00020058     &...P...:...X...
   20098:	0000027e 0001fe14 00000282 0001fe4c     ~...........L...
   200a8:	000002c2 0001fe20 00000306 0001fe7c     .... .......|...
   200b8:	00000312 00020060 0000003a 00022554     ....`...:...T%..
   200c8:	0000008a 0002255c 00000022 00022564     ....\%.."...d%..

000200d8 <dict_locals_dict>:
   200d8:	000200e8 00000077 0000000e 00020068     ....w.......h...

000200e8 <mp_type_dict>:
   200e8:	00022160 00000067 0000e515 0000e5b1     `!..g...........
   200f8:	00000000 0000e619 0000e669 00000000     ........i.......
   20108:	0000e795 0000f0a5 00000000 00000000     ................
	...
   20120:	000200d8                                ....

00020124 <__func__.6102>:
   20124:	74636964 656c635f 00007261              dict_clear..

00020130 <__func__.6108>:
   20130:	74636964 706f635f 00000079              dict_copy...

0002013c <__func__.6133>:
   2013c:	74636964 7465675f 6c65685f 00726570     dict_get_helper.

0002014c <__func__.6155>:
   2014c:	74636964 706f705f 6d657469 00000000     dict_popitem....

0002015c <__func__.6167>:
   2015c:	74636964 6470755f 00657461              dict_update.

00020168 <__func__.6210>:
   20168:	74636964 6569765f 74695f77 6574695f     dict_view_it_ite
   20178:	78656e72 00000074                       rnext...

00020180 <__func__.6223>:
   20180:	74636964 6569765f 65675f77 65746974     dict_view_getite
   20190:	00000072                                r...

00020194 <__func__.6231>:
   20194:	74636964 6569765f 72705f77 00746e69     dict_view_print.

000201a4 <__func__.6256>:
   201a4:	74636964 6569765f 00000077              dict_view...

000201b0 <__func__.6273>:
   201b0:	74636964 7465675f 72657469 00000000     dict_getiter....

000201c0 <__func__.6295>:
   201c0:	6f5f706d 645f6a62 5f746369 726f7473     mp_obj_dict_stor
   201d0:	00000065                                e...

000201d4 <__func__.6305>:
   201d4:	6f5f706d 645f6a62 5f746369 5f746567     mp_obj_dict_get_
   201e4:	0070616d                                map.

000201e8 <mp_const_GeneratorExit_obj>:
   201e8:	000202b4 00000000 00000000 00021ea4     ................
   201f8:	0000203a 00000000                       : ......

00020200 <mp_type_BaseException>:
   20200:	00022160 0000003b 0000f295 0000f359     `!..;.......Y...
	...
   2021c:	0000f429 00000000 00000000 00000000     )...............
	...

0002023c <mp_type_SystemExit>:
   2023c:	00022160 0000004f 0000f295 0000f359     `!..O.......Y...
	...
   20258:	0000f429 00000000 00000000 00000000     )...............
	...
   20270:	00020200 00000000                       ........

00020278 <mp_type_KeyboardInterrupt>:
   20278:	00022160 00000044 0000f295 0000f359     `!..D.......Y...
	...
   20294:	0000f429 00000000 00000000 00000000     )...............
	...
   202ac:	00020200 00000000                       ........

000202b4 <mp_type_GeneratorExit>:
   202b4:	00022160 0000003f 0000f295 0000f359     `!..?.......Y...
	...
   202d0:	0000f429 00000000 00000000 00000000     )...............
	...
   202e8:	00020200 00000000                       ........

000202f0 <mp_type_Exception>:
   202f0:	00022160 0000003e 0000f295 0000f359     `!..>.......Y...
	...
   2030c:	0000f429 00000000 00000000 00000000     )...............
	...
   20324:	00020200 00000000                       ........

0002032c <mp_type_StopIteration>:
   2032c:	00022160 0000004d 0000f295 0000f359     `!..M.......Y...
	...
   20348:	0000f429 00000000 00000000 00000000     )...............
	...
   20360:	000202f0 00000000                       ........

00020368 <mp_type_ArithmeticError>:
   20368:	00022160 00000038 0000f295 0000f359     `!..8.......Y...
	...
   20384:	0000f429 00000000 00000000 00000000     )...............
	...
   2039c:	000202f0 00000000                       ........

000203a4 <mp_type_OverflowError>:
   203a4:	00022160 0000004b 0000f295 0000f359     `!..K.......Y...
	...
   203c0:	0000f429 00000000 00000000 00000000     )...............
	...
   203d8:	00020368 00000000                       h.......

000203e0 <mp_type_ZeroDivisionError>:
   203e0:	00022160 00000052 0000f295 0000f359     `!..R.......Y...
	...
   203fc:	0000f429 00000000 00000000 00000000     )...............
	...
   20414:	00020368 00000000                       h.......

0002041c <mp_type_AssertionError>:
   2041c:	00022160 00000039 0000f295 0000f359     `!..9.......Y...
	...
   20438:	0000f429 00000000 00000000 00000000     )...............
	...
   20450:	000202f0 00000000                       ........

00020458 <mp_type_AttributeError>:
   20458:	00022160 0000003a 0000f295 0000f359     `!..:.......Y...
	...
   20474:	0000f429 00000000 00000000 00000000     )...............
	...
   2048c:	000202f0 00000000                       ........

00020494 <mp_type_EOFError>:
   20494:	00022160 0000003c 0000f295 0000f359     `!..<.......Y...
	...
   204b0:	0000f429 00000000 00000000 00000000     )...............
	...
   204c8:	000202f0 00000000                       ........

000204d0 <mp_type_ImportError>:
   204d0:	00022160 00000040 0000f295 0000f359     `!..@.......Y...
	...
   204ec:	0000f429 00000000 00000000 00000000     )...............
	...
   20504:	000202f0 00000000                       ........

0002050c <mp_type_LookupError>:
   2050c:	00022160 00000045 0000f295 0000f359     `!..E.......Y...
	...
   20528:	0000f429 00000000 00000000 00000000     )...............
	...
   20540:	000202f0 00000000                       ........

00020548 <mp_type_IndexError>:
   20548:	00022160 00000042 0000f295 0000f359     `!..B.......Y...
	...
   20564:	0000f429 00000000 00000000 00000000     )...............
	...
   2057c:	0002050c 00000000                       ........

00020584 <mp_type_KeyError>:
   20584:	00022160 00000043 0000f295 0000f359     `!..C.......Y...
	...
   205a0:	0000f429 00000000 00000000 00000000     )...............
	...
   205b8:	0002050c 00000000                       ........

000205c0 <mp_type_MemoryError>:
   205c0:	00022160 00000046 0000f295 0000f359     `!..F.......Y...
	...
   205dc:	0000f429 00000000 00000000 00000000     )...............
	...
   205f4:	000202f0 00000000                       ........

000205fc <mp_type_NameError>:
   205fc:	00022160 00000047 0000f295 0000f359     `!..G.......Y...
	...
   20618:	0000f429 00000000 00000000 00000000     )...............
	...
   20630:	000202f0 00000000                       ........

00020638 <mp_type_OSError>:
   20638:	00022160 0000004a 0000f295 0000f359     `!..J.......Y...
	...
   20654:	0000f429 00000000 00000000 00000000     )...............
	...
   2066c:	000202f0 00000000                       ........

00020674 <mp_type_RuntimeError>:
   20674:	00022160 0000004c 0000f295 0000f359     `!..L.......Y...
	...
   20690:	0000f429 00000000 00000000 00000000     )...............
	...
   206a8:	000202f0 00000000                       ........

000206b0 <mp_type_NotImplementedError>:
   206b0:	00022160 00000049 0000f295 0000f359     `!..I.......Y...
	...
   206cc:	0000f429 00000000 00000000 00000000     )...............
	...
   206e4:	00020674 00000000                       t.......

000206ec <mp_type_SyntaxError>:
   206ec:	00022160 0000004e 0000f295 0000f359     `!..N.......Y...
	...
   20708:	0000f429 00000000 00000000 00000000     )...............
	...
   20720:	000202f0 00000000                       ........

00020728 <mp_type_IndentationError>:
   20728:	00022160 00000041 0000f295 0000f359     `!..A.......Y...
	...
   20744:	0000f429 00000000 00000000 00000000     )...............
	...
   2075c:	000206ec 00000000                       ........

00020764 <mp_type_TypeError>:
   20764:	00022160 00000050 0000f295 0000f359     `!..P.......Y...
	...
   20780:	0000f429 00000000 00000000 00000000     )...............
	...
   20798:	000202f0 00000000                       ........

000207a0 <mp_type_ValueError>:
   207a0:	00022160 00000051 0000f295 0000f359     `!..Q.......Y...
	...
   207bc:	0000f429 00000000 00000000 00000000     )...............
	...
   207d4:	000202f0 00000000 5f637865 65707974     ........exc_type
   207e4:	616d3e2d 6e5f656b 3d207765 706d203d     ->make_new == mp
   207f4:	6a626f5f 6378655f 69747065 6d5f6e6f     _obj_exception_m
   20804:	5f656b61 0077656e 2e2f2e2e 79702f2e     ake_new.../../py
   20814:	6a626f2f 65637865 632e7470 00000000     /objexcept.c....
   20824:	20746d66 4e203d21 004c4c55 6f5f706d     fmt != NULL.mp_o
   20834:	695f6a62 78655f73 74706563 5f6e6f69     bj_is_exception_
   20844:	74736e69 65636e61 6c657328 6e695f66     instance(self_in
   20854:	00000029                                )...

00020858 <__func__.6670>:
   20858:	6f5f706d 6e5f6a62 655f7765 70656378     mp_obj_new_excep
   20868:	6e6f6974 6772615f 00000073              tion_args...

00020874 <__func__.6692>:
   20874:	6f5f706d 6e5f6a62 655f7765 70656378     mp_obj_new_excep
   20884:	6e6f6974 67736d5f 7261765f 00000067     tion_msg_varg...

00020894 <__func__.6715>:
   20894:	6f5f706d 655f6a62 70656378 6e6f6974     mp_obj_exception
   208a4:	656c635f 745f7261 65636172 6b636162     _clear_traceback
   208b4:	00000000                                ....

000208b8 <__func__.6723>:
   208b8:	6f5f706d 655f6a62 70656378 6e6f6974     mp_obj_exception
   208c8:	6464615f 6172745f 61626563 00006b63     _add_traceback..

000208d8 <__func__.6732>:
   208d8:	6f5f706d 655f6a62 70656378 6e6f6974     mp_obj_exception
   208e8:	7465675f 6172745f 61626563 00006b63     _get_traceback..
   208f8:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   20908:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   20918:	6e75665f 6975625f 6e69746c 0029305f     _fun_builtin_0).
   20928:	2e2f2e2e 79702f2e 6a626f2f 2e6e7566     ../../py/objfun.
   20938:	00000063                                c...

0002093c <mp_type_fun_builtin_0>:
   2093c:	00022160 00000074 00000000 00000000     `!..t...........
   2094c:	0000f9f9 0000e06d 00000000 00000000     ....m...........
	...
   20978:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   20988:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   20998:	6e75665f 6975625f 6e69746c 0029315f     _fun_builtin_1).

000209a8 <mp_type_fun_builtin_1>:
   209a8:	00022160 00000074 00000000 00000000     `!..t...........
   209b8:	0000fa65 0000e06d 00000000 00000000     e...m...........
	...
   209e4:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   209f4:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   20a04:	6e75665f 6975625f 6e69746c 0029325f     _fun_builtin_2).

00020a14 <mp_type_fun_builtin_2>:
   20a14:	00022160 00000074 00000000 00000000     `!..t...........
   20a24:	0000fad5 0000e06d 00000000 00000000     ....m...........
	...
   20a50:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   20a60:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   20a70:	6e75665f 6975625f 6e69746c 0029335f     _fun_builtin_3).

00020a80 <mp_type_fun_builtin_3>:
   20a80:	00022160 00000074 00000000 00000000     `!..t...........
   20a90:	0000fb4d 0000e06d 00000000 00000000     M...m...........
	...
   20abc:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   20acc:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   20adc:	6e75665f 6975625f 6e69746c 7261765f     _fun_builtin_var
   20aec:	00000029                                )...

00020af0 <mp_type_fun_builtin_var>:
   20af0:	00022160 00000074 00000000 00000000     `!..t...........
   20b00:	0000fbc9 0000e06d 00000000 00000000     ....m...........
	...
   20b2c:	725f6d76 72757465 696b5f6e 3d20646e     vm_return_kind =
   20b3c:	504d203d 5f4d565f 55544552 455f4e52     = MP_VM_RETURN_E
   20b4c:	50454358 4e4f4954 00000000              XCEPTION....

00020b58 <mp_type_fun_bc>:
   20b58:	00022160 00000074 00000000 00000000     `!..t...........
   20b68:	0000fcf9 0000e06d 00000000 00000000     ....m...........
	...
   20b94:	4f5f504d 495f4a42 59545f53 64284550     MP_OBJ_IS_TYPE(d
   20ba4:	615f6665 5f736772 202c6e69 5f706d26     ef_args_in, &mp_
   20bb4:	65707974 7075745f 0029656c              type_tuple).

00020bc0 <__func__.5974>:
   20bc0:	5f6e7566 6c697562 5f6e6974 61635f30     fun_builtin_0_ca
   20bd0:	00006c6c                                ll..

00020bd4 <__func__.5983>:
   20bd4:	5f6e7566 6c697562 5f6e6974 61635f31     fun_builtin_1_ca
   20be4:	00006c6c                                ll..

00020be8 <__func__.5992>:
   20be8:	5f6e7566 6c697562 5f6e6974 61635f32     fun_builtin_2_ca
   20bf8:	00006c6c                                ll..

00020bfc <__func__.6001>:
   20bfc:	5f6e7566 6c697562 5f6e6974 61635f33     fun_builtin_3_ca
   20c0c:	00006c6c                                ll..

00020c10 <__func__.6010>:
   20c10:	5f6e7566 6c697562 5f6e6974 5f726176     fun_builtin_var_
   20c20:	6c6c6163 00000000                       call....

00020c28 <__func__.6035>:
   20c28:	5f6e7566 635f6362 006c6c61              fun_bc_call.

00020c34 <__func__.6046>:
   20c34:	6f5f706d 6e5f6a62 665f7765 625f6e75     mp_obj_new_fun_b
   20c44:	00000063 666c6573 6e75665f 61623e2d     c...self_fun->ba
   20c54:	742e6573 20657079 26203d3d 745f706d     se.type == &mp_t
   20c64:	5f657079 5f6e7566 00006362 2e2f2e2e     ype_fun_bc..../.
   20c74:	79702f2e 6a626f2f 656e6567 6f746172     ./py/objgenerato
   20c84:	00632e72                                r.c.

00020c88 <mp_type_gen_wrap>:
   20c88:	00022160 00000075 00000000 00000000     `!..u...........
   20c98:	0000ff4d 0000e06d 00000000 00000000     M...m...........
	...
   20cc4:	6e65673c 74617265 6f20726f 63656a62     <generator objec
   20cd4:	25272074 61202771 70252074 0000003e     t '%q' at %p>...
   20ce4:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   20cf4:	5f666c65 20296e69 28202626 706d2828     elf_in) && (((mp
   20d04:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   20d14:	2a64696f 6c657329 6e695f66 3e2d2929     oid*)self_in))->
   20d24:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   20d34:	65675f65 6e695f6e 6e617473 29296563     e_gen_instance))
   20d44:	00000029 276e6163 65732074 6e20646e     )...can't send n
   20d54:	4e2d6e6f 20656e6f 756c6176 6f742065     on-None value to
   20d64:	6a206120 2d747375 72617473 20646574      a just-started 
   20d74:	656e6567 6f746172 00000072 656e6567     generator...gene
   20d84:	6f746172 6c612072 64616572 78652079     rator already ex
   20d94:	74756365 00676e69                       ecuting.

00020d9c <gen_instance_send_obj>:
   20d9c:	00020a14 0001026d                       ....m...

00020da4 <gen_instance_throw_obj>:
   20da4:	00020af0 00040004 000102a5 656e6567     ............gene
   20db4:	6f746172 67692072 65726f6e 65472064     rator ignored Ge
   20dc4:	6172656e 45726f74 00746978              neratorExit.

00020dd0 <gen_instance_close_obj>:
   20dd0:	000209a8 000102f9 276e6163 65702074     ........can't pe
   20de0:	7420646e 776f7268 206f7420 7473756a     nd throw to just
   20df0:	6174732d 64657472 6e656720 74617265     -started generat
   20e00:	0000726f                                or..

00020e04 <gen_instance_pend_throw_obj>:
   20e04:	00020a14 00010381                       ........

00020e0c <gen_instance_locals_dict_table>:
   20e0c:	0000018a 00020dd0 000002b6 00020d9c     ................
   20e1c:	000002f6 00020da4 0000027a 00020e04     ........z.......

00020e2c <gen_instance_locals_dict>:
   20e2c:	000200e8 00000027 00000004 00020e0c     ....'...........

00020e3c <mp_type_gen_instance>:
   20e3c:	00022160 00000075 00010029 00000000     `!..u...).......
   20e4c:	00000000 0000e06d 00000000 00000000     ....m...........
   20e5c:	00000000 0000dfdd 0001024d 00000000     ........M.......
	...
   20e74:	00020e2c                                ,...

00020e78 <__func__.6177>:
   20e78:	5f6e6567 70617277 6c61635f 0000006c     gen_wrap_call...

00020e88 <__func__.6198>:
   20e88:	6f5f706d 675f6a62 725f6e65 6d757365     mp_obj_gen_resum
   20e98:	00000065                                e...

00020e9c <it_type>:
   20e9c:	00022160 0000008b 00000000 00000000     `!..............
	...
   20ec0:	0000dfdd 000103c1 00000000 00000000     ................
	...

00020ed8 <log_base2_floor>:
   20ed8:	02010100 03020202 03030303 04030303     ................
   20ee8:	3d3c2032 73616220 26262065 73616220     2 <= base && bas
   20ef8:	3d3c2065 00363120 2e2f2e2e 79702f2e     e <= 16.../../py
   20f08:	6a626f2f 2e746e69 00000063 676e6f6c     /objint.c...long
   20f18:	746e6920 746f6e20 70757320 74726f70      int not support
   20f28:	69206465 6874206e 62207369 646c6975     ed in this build
   20f38:	00000000 6c616d73 6e69206c 766f2074     ....small int ov
   20f48:	6c667265 0000776f                       erflow..

00020f50 <int_from_bytes_fun_obj>:
   20f50:	00020af0 00040006 00010a71              ........q...

00020f5c <int_from_bytes_obj>:
   20f5c:	000223a8 00020f50                       .#..P...

00020f64 <int_to_bytes_obj>:
   20f64:	00020af0 00040006 00010aed              ............

00020f70 <int_locals_dict_table>:
   20f70:	000001ca 00020f5c 000002fa 00020f64     ....\.......d...

00020f80 <int_locals_dict>:
   20f80:	000200e8 00000017 00000002 00020f70     ............p...

00020f90 <mp_type_int>:
   20f90:	00022160 00000081 000105e9 000104e5     `!..............
   20fa0:	00000000 00010889 000108a1 00000000     ................
	...
   20fc8:	00020f80                                ....

00020fcc <__func__.6695>:
   20fcc:	695f706d 665f746e 616d726f 69735f74     mp_int_format_si
   20fdc:	0000657a 0000005b 0000202c 0000005d     ze..[..., ..]...
   20fec:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   20ffc:	5f666c65 20296e69 28202626 706d2828     elf_in) && (((mp
   2100c:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   2101c:	2a64696f 6c657329 6e695f66 3e2d2929     oid*)self_in))->
   2102c:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   2103c:	696c5f65 29297473 00000029 2e2f2e2e     e_list)))...../.
   2104c:	79702f2e 6a626f2f 7473696c 0000632e     ./py/objlist.c..
   2105c:	5f504d28 5f4a424f 4f5f5349 61284a42     (MP_OBJ_IS_OBJ(a
   2106c:	5b736772 20295d30 28202626 706d2828     rgs[0]) && (((mp
   2107c:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   2108c:	2a64696f 67726129 5d305b73 3e2d2929     oid*)args[0]))->
   2109c:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   210ac:	696c5f65 29297473 00000029 20706f70     e_list)))...pop 
   210bc:	6d6f7266 706d6520 6c207974 00747369     from empty list.
   210cc:	5f504d28 5f4a424f 4f5f5349 70284a42     (MP_OBJ_IS_OBJ(p
   210dc:	615f736f 5b736772 20295d30 28202626     os_args[0]) && (
   210ec:	706d2828 6a626f5f 7361625f 2a745f65     ((mp_obj_base_t*
   210fc:	76282829 2a64696f 736f7029 6772615f     )((void*)pos_arg
   2110c:	5d305b73 3e2d2929 65707974 203d3d20     s[0]))->type == 
   2111c:	706d2628 7079745f 696c5f65 29297473     (&mp_type_list))
   2112c:	00000029                                )...

00021130 <list_append_obj>:
   21130:	00020a14 00010f7d                       ....}...

00021138 <list_extend_obj>:
   21138:	00020a14 0001103d                       ....=...

00021140 <list_clear_obj>:
   21140:	000209a8 0001145d                       ....]...

00021148 <list_copy_obj>:
   21148:	000209a8 000114e1                       ........

00021150 <list_count_obj>:
   21150:	00020a14 00011541                       ....A...

00021158 <list_index_obj>:
   21158:	00020af0 00040004 000115a5              ............

00021164 <list_insert_obj>:
   21164:	00020a80 00011611                       ........

0002116c <list_pop_obj>:
   2116c:	00020af0 00020002 0001114d              ........M...

00021178 <list_remove_obj>:
   21178:	00020a14 000116e5                       ........

00021180 <list_reverse_obj>:
   21180:	000209a8 0001175d                       ....]...

00021188 <list_sort_obj>:
   21188:	00020af0 ffff0003 00011399              ............

00021194 <list_locals_dict_table>:
   21194:	0000015a 00021130 00000186 00021140     Z...0.......@...
   211a4:	00000196 00021148 0000019a 00021150     ....H.......P...
   211b4:	000001be 00021138 000001fe 00021158     ....8.......X...
   211c4:	00000202 00021164 0000027e 0002116c     ....d...~...l...
   211d4:	00000292 00021178 0000029e 00021180     ....x...........
   211e4:	000002c6 00021188                       ........

000211ec <list_locals_dict>:
   211ec:	000200e8 0000005f 0000000b 00021194     ...._...........

000211fc <mp_type_list>:
   211fc:	00022160 00000090 00010be1 00010c8d     `!..............
   2120c:	00000000 00010cdd 00010d25 00000000     ........%.......
   2121c:	00010ef1 00010f5d 00000000 00000000     ....]...........
	...
   21234:	000211ec                                ....

00021238 <__func__.6004>:
   21238:	6f5f706d 6c5f6a62 5f747369 65707061     mp_obj_list_appe
   21248:	0000646e                                nd..

0002124c <__func__.6010>:
   2124c:	7473696c 7478655f 00646e65              list_extend.

00021258 <__func__.6017>:
   21258:	7473696c 706f705f 00000000              list_pop....

00021264 <allowed_args.6046>:
   21264:	0203008d 00021534 020100a7 00000000     ....4...........

00021274 <__func__.6051>:
   21274:	6f5f706d 6c5f6a62 5f747369 74726f73     mp_obj_list_sort
   21284:	00000000                                ....

00021288 <__func__.6056>:
   21288:	7473696c 656c635f 00007261              list_clear..

00021294 <__func__.6061>:
   21294:	7473696c 706f635f 00000079              list_copy...

000212a0 <__func__.6067>:
   212a0:	7473696c 756f635f 0000746e              list_count..

000212ac <__func__.6073>:
   212ac:	7473696c 646e695f 00007865              list_index..

000212b8 <__func__.6080>:
   212b8:	7473696c 736e695f 00747265              list_insert.

000212c4 <__func__.6091>:
   212c4:	6f5f706d 6c5f6a62 5f747369 6f6d6572     mp_obj_list_remo
   212d4:	00006576                                ve..

000212d8 <__func__.6096>:
   212d8:	7473696c 7665725f 65737265 00000000     list_reverse....
   212e8:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   212f8:	5f666c65 20296e69 28202626 706d2828     elf_in) && (((mp
   21308:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   21318:	2a64696f 6c657329 6e695f66 3e2d2929     oid*)self_in))->
   21328:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   21338:	616d5f65 29292970 00000000 2e2f2e2e     e_map)))....../.
   21348:	79702f2e 6a626f2f 2e70616d 00000063     ./py/objmap.c...

00021358 <mp_type_map>:
   21358:	00022160 00000095 00000000 00011a21     `!..........!...
	...
   2137c:	0000dfdd 00011aa9 00000000 00000000     ................
	...

00021394 <__func__.6119>:
   21394:	5f70616d 72657469 7478656e 00000000     map_iternext....
   213a4:	00000000 646f6d3c 20656c75 27732527     ....<module '%s'
   213b4:	0000003e                                >...

000213b8 <mp_type_module>:
   213b8:	00022160 00000097 00011b99 00000000     `!..............
	...
   213d4:	00011bed 00000000 00000000 00000000     ................
	...
   213f4:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   21404:	5f666c65 202c6e69 5f706d26 65707974     elf_in, &mp_type
   21414:	646f6d5f 29656c75 00000000 2e2f2e2e     _module)....../.
   21424:	79702f2e 6a626f2f 75646f6d 632e656c     ./py/objmodule.c
   21434:	00000000                                ....

00021438 <mp_builtin_module_table>:
   21438:	00000066 0001f63c 0000016e 00022a78     f...<...n...x*..
   21448:	0000025a 00022b00                       Z....+..

00021450 <mp_builtin_module_map>:
   21450:	0000001f 00000003 00021438              ........8...

0002145c <__func__.6225>:
   2145c:	6f5f706d 6d5f6a62 6c75646f 65675f65     mp_obj_module_ge
   2146c:	6c675f74 6c61626f 00000073              t_globals...

00021478 <mp_type_object>:
   21478:	00022160 00000099 00000000 00011de1     `!..............
	...

000214b4 <mp_type_polymorph_iter>:
   214b4:	00022160 0000008b 00000000 00000000     `!..............
	...
   214d8:	0000dfdd 00011e19 00000000 00000000     ................
	...
   214f0:	656e6f4e 00000000                       None....

000214f8 <mp_type_NoneType>:
   214f8:	00022160 00000048 00011e39 00000000     `!..H...9.......
   21508:	00000000 0000e06d 00000000 00000000     ....m...........
	...

00021534 <mp_const_none_obj>:
   21534:	000214f8                                ....

00021538 <range_it_type>:
   21538:	00022160 0000008b 00000000 00000000     `!..............
	...
   2155c:	0000dfdd 00011e81 00000000 00000000     ................
	...
   21574:	676e6172 64252865 6425202c 00000000     range(%d, %d....
   21584:	00000029 6425202c 00000029 6f72657a     )..., %d)...zero
   21594:	65747320 00000070                        step...

0002159c <mp_type_range>:
   2159c:	00022160 000000a3 00011f1d 00011f71     `!..........q...
   215ac:	00000000 0001206d 00000000 00012139     ....m ......9!..
   215bc:	000120b9 0001210d 00000000 00000000     . ...!..........
	...
   215d8:	00007125                                %q..

000215dc <mp_type_singleton>:
   215dc:	00022160 00000001 000121a1 00000000     `!.......!......
	...

00021618 <mp_const_ellipsis_obj>:
   21618:	000215dc 0000003d 00006325 0063255c     ....=...%c..\%c.
   21628:	00005c5c 00006e5c 0000725c 0000745c     \\..\n..\r..\t..
   21638:	3025785c 00007832 732a2e25 00000000     \x%02x..%.*s....
   21648:	00000062 65747962 61762073 2065756c     b...bytes value 
   21658:	2074756f 7220666f 65676e61 00000000     out of range....
   21668:	6e6f7277 756e2067 7265626d 20666f20     wrong number of 
   21678:	75677261 746e656d 00000073 5f504d28     arguments...(MP_
   21688:	5f4a424f 515f5349 28525453 666c6573     OBJ_IS_QSTR(self
   21698:	296e695f 207c7c20 5f504d28 5f4a424f     _in) || (MP_OBJ_
   216a8:	4f5f5349 73284a42 5f666c65 20296e69     IS_OBJ(self_in) 
   216b8:	28202626 5f706d28 5f6a626f 65736162     && ((mp_obj_base
   216c8:	292a745f 6f762828 292a6469 666c6573     _t*)((void*)self
   216d8:	296e695f 743e2d29 2d657079 6e69623e     _in))->type->bin
   216e8:	5f797261 3d20706f 706d203d 6a626f5f     ary_op == mp_obj
   216f8:	7274735f 6e69625f 5f797261 2929706f     _str_binary_op))
   21708:	00000000 2e2f2e2e 79702f2e 6a626f2f     ....../../py/obj
   21718:	2e727473 00000063 6e696f6a 70786520     str.c...join exp
   21728:	73746365 6c206120 20747369 7320666f     ects a list of s
   21738:	622f7274 73657479 6a626f20 73746365     tr/bytes objects
   21748:	6e6f6320 74736973 20746e65 68746977      consistent with
   21758:	6c657320 626f2066 7463656a 00000000      self object....

00021768 <str_join_obj>:
   21768:	00020a14 00012c45 74706d65 65732079     ....E,..empty se
   21778:	61726170 00726f74                       parator.

00021780 <str_split_obj>:
   21780:	00020af0 00030002 00012e79 6c707372     ........y...rspl
   21790:	4e287469 2c656e6f 0000296e              it(None,n)..

0002179c <str_rsplit_obj>:
   2179c:	00020af0 00030002 0001308d 5f504d28     .........0..(MP_
   217ac:	5f4a424f 515f5349 28525453 73677261     OBJ_IS_QSTR(args
   217bc:	295d305b 207c7c20 5f504d28 5f4a424f     [0]) || (MP_OBJ_
   217cc:	4f5f5349 61284a42 5b736772 20295d30     IS_OBJ(args[0]) 
   217dc:	28202626 5f706d28 5f6a626f 65736162     && ((mp_obj_base
   217ec:	292a745f 6f762828 292a6469 73677261     _t*)((void*)args
   217fc:	295d305b 743e2d29 2d657079 6e69623e     [0]))->type->bin
   2180c:	5f797261 3d20706f 706d203d 6a626f5f     ary_op == mp_obj
   2181c:	7274735f 6e69625f 5f797261 2929706f     _str_binary_op))
   2182c:	00000000 73627573 6e697274 6f6e2067     ....substring no
   2183c:	6f662074 00646e75                       t found.

00021844 <str_find_obj>:
   21844:	00020af0 00040004 00013419              .........4..

00021850 <str_rfind_obj>:
   21850:	00020af0 00040004 00013439              ........94..

0002185c <str_index_obj>:
   2185c:	00020af0 00040004 0001345d              ........]4..

00021868 <str_rindex_obj>:
   21868:	00020af0 00040004 0001347d              ........}4..

00021874 <str_startswith_obj>:
   21874:	00020af0 00030004 000134a1 72617473     .........4..star
   21884:	6e652f74 6e692064 65636964 00000073     t/end indices...

00021894 <str_endswith_obj>:
   21894:	00020af0 00030004 00013565 7473616c     ........e5..last
   218a4:	6f6f675f 68635f64 705f7261 3e20736f     _good_char_pos >
   218b4:	6966203d 5f747372 646f6f67 6168635f     = first_good_cha
   218c4:	6f705f72 00000073 73726966 6f675f74     r_pos...first_go
   218d4:	635f646f 5f726168 20736f70 30203d3d     od_char_pos == 0
   218e4:	00000000                                ....

000218e8 <str_strip_obj>:
   218e8:	00020af0 00020002 00013849              ........I8..

000218f4 <str_lstrip_obj>:
   218f4:	00020af0 00020002 00013869              ........i8..

00021900 <str_rstrip_obj>:
   21900:	00020af0 00020002 00013889 5e3d3e3c     .........8..<>=^
   21910:	00000000 65646362 67466645 736f6e47     ....bcdeEfFgGnos
   21920:	00255878 20646162 6d726f66 73207461     xX%.bad format s
   21930:	6e697274 00000067 6c707574 6e692065     tring...tuple in
   21940:	20786564 2074756f 7220666f 65676e61     dex out of range
   21950:	00000000 72747461 74756269 6e207365     ....attributes n
   21960:	7320746f 6f707075 64657472 74657920     ot supported yet
   21970:	00000000 766e6f63 69737265 3d206e6f     ....conversion =
   21980:	7227203d 00000027                       = 'r'...

00021988 <str_format_obj>:
   21988:	00020af0 ffff0003 00014389 5f504d28     .........C..(MP_
   21998:	5f4a424f 515f5349 28525453 74746170     OBJ_IS_QSTR(patt
   219a8:	296e7265 207c7c20 5f504d28 5f4a424f     ern) || (MP_OBJ_
   219b8:	4f5f5349 70284a42 65747461 20296e72     IS_OBJ(pattern) 
   219c8:	28202626 5f706d28 5f6a626f 65736162     && ((mp_obj_base
   219d8:	292a745f 6f762828 292a6469 74746170     _t*)((void*)patt
   219e8:	296e7265 743e2d29 2d657079 6e69623e     ern))->type->bin
   219f8:	5f797261 3d20706f 706d203d 6a626f5f     ary_op == mp_obj
   21a08:	7274735f 6e69625f 5f797261 2929706f     _str_binary_op))
   21a18:	00000000 6d726f66 72207461 69757165     ....format requi
   21a28:	20736572 69642061 00007463 20746f6e     res a dict..not 
   21a38:	756f6e65 61206867 6d756772 73746e65     enough arguments
   21a48:	726f6620 726f6620 2074616d 69727473      for format stri
   21a58:	0000676e 20632525 75716572 73657269     ng..%%c requires
   21a68:	746e6920 20726f20 72616863 00000000      int or char....
   21a78:	65746e69 20726567 75716572 64657269     integer required
   21a88:	00000000 20746f6e 206c6c61 75677261     ....not all argu
   21a98:	746e656d 6f632073 7265766e 20646574     ments converted 
   21aa8:	69727564 7320676e 6e697274 6f662067     during string fo
   21ab8:	74616d72 676e6974 00000000 61746164     rmatting....data
   21ac8:	203d2120 4c4c554e 00000000               != NULL....

00021ad4 <str_replace_obj>:
   21ad4:	00020af0 00040006 00014ab9              .........J..

00021ae0 <str_count_obj>:
   21ae0:	00020af0 00040004 00014d9d              .........M..

00021aec <str_lower_obj>:
   21aec:	000209a8 0001500d                       .....P..

00021af4 <str_upper_obj>:
   21af4:	000209a8 0001502d                       ....-P..

00021afc <str_isspace_obj>:
   21afc:	000209a8 0001514d                       ....MQ..

00021b04 <str_isalpha_obj>:
   21b04:	000209a8 0001516d                       ....mQ..

00021b0c <str_isdigit_obj>:
   21b0c:	000209a8 0001518d                       .....Q..

00021b14 <str_isupper_obj>:
   21b14:	000209a8 000151ad                       .....Q..

00021b1c <str_islower_obj>:
   21b1c:	000209a8 000151cd                       .....Q..

00021b24 <str8_locals_dict_table>:
   21b24:	000001c2 00021844 000002a2 00021850     ....D.......P...
   21b34:	000001fe 0002185c 000002a6 00021868     ....\.......h...
   21b44:	00000232 00021768 000002ce 00021780     2...h...........
   21b54:	000002ae 0002179c 000002d6 00021874     ............t...
   21b64:	000001b2 00021894 000002ea 000218e8     ................
   21b74:	00000252 000218f4 000002b2 00021900     R...............
   21b84:	000001c6 00021988 00000296 00021ad4     ................
   21b94:	0000019a 00021ae0 0000024e 00021aec     ........N.......
   21ba4:	0000030a 00021af4 0000021a 00021afc     ................
   21bb4:	0000020a 00021b04 0000020e 00021b0c     ................
   21bc4:	00000222 00021b14 00000216 00021b1c     "...............

00021bd4 <str8_locals_dict>:
   21bd4:	000200e8 000000b7 00000016 00021b24     ............$...

00021be4 <mp_type_str>:
   21be4:	00022160 000000b9 00012409 000124bd     `!.......$...$..
	...
   21bfc:	00012895 00000000 00012bb9 00015799     .(.......+...W..
   21c0c:	00000000 000151ed 00000000 00000000     .....Q..........
   21c1c:	00021bd4                                ....

00021c20 <mp_type_bytes>:
   21c20:	00022160 0000005d 00012409 0001260d     `!..]....$...&..
	...
   21c38:	00012895 00000000 00012bb9 0001584d     .(.......+..MX..
   21c48:	00000000 000151ed 00000000 00000000     .....Q..........
   21c58:	00021bd4 00000000                       ........

00021c60 <mp_const_empty_bytes_obj>:
   21c60:	00021c20 00000000 00000000 00021c5c      ...........\...
   21c70:	276e6163 6f632074 7265766e 6f742074     can't convert to
   21c80:	72747320 706d6920 6963696c 00796c74      str implicitly.

00021c90 <__func__.6138>:
   21c90:	5f727473 6e696f6a 00000000              str_join....

00021c9c <__func__.6220>:
   21c9c:	5f727473 646e6966 00007265              str_finder..

00021ca8 <__func__.6278>:
   21ca8:	5f727473 5f696e75 69727473 00000070     str_uni_strip...

00021cb8 <whitespace.6282>:
   21cb8:	0d0a0920 00000c0b                        .......

00021cc0 <__func__.6368>:
   21cc0:	6f5f706d 735f6a62 665f7274 616d726f     mp_obj_str_forma
   21cd0:	65685f74 7265706c 00000000              t_helper....

00021cdc <__func__.6417>:
   21cdc:	6f5f706d 735f6a62 665f7274 616d726f     mp_obj_str_forma
   21cec:	00000074                                t...

00021cf0 <__func__.6429>:
   21cf0:	5f727473 75646f6d 665f6f6c 616d726f     str_modulo_forma
   21d00:	00000074                                t...

00021d04 <__func__.6480>:
   21d04:	5f727473 6c706572 00656361              str_replace.

00021d10 <__func__.6507>:
   21d10:	5f727473 6e756f63 00000074 00000028     str_count...(...
   21d20:	0000202c 0000002c 00000029 6f5f706d     , ..,...)...mp_o
   21d30:	675f6a62 745f7465 28657079 666c6573     bj_get_type(self
   21d40:	296e695f 65673e2d 65746974 3d3d2072     _in)->getiter ==
   21d50:	5f706d20 5f6a626f 6c707574 65675f65      mp_obj_tuple_ge
   21d60:	65746974 00000072 2e2f2e2e 79702f2e     titer...../../py
   21d70:	6a626f2f 6c707574 00632e65 5f504d28     /objtuple.c.(MP_
   21d80:	5f4a424f 4f5f5349 73284a42 5f666c65     OBJ_IS_OBJ(self_
   21d90:	20296e69 28202626 706d2828 6a626f5f     in) && (((mp_obj
   21da0:	7361625f 2a745f65 76282829 2a64696f     _base_t*)((void*
   21db0:	6c657329 6e695f66 3e2d2929 65707974     )self_in))->type
   21dc0:	203d3d20 706d2628 7079745f 75745f65      == (&mp_type_tu
   21dd0:	29656c70 00002929                       ple)))..

00021dd8 <tuple_count_obj>:
   21dd8:	00020a14 00015d21 5f504d28 5f4a424f     ....!]..(MP_OBJ_
   21de8:	4f5f5349 61284a42 5b736772 20295d30     IS_OBJ(args[0]) 
   21df8:	28202626 706d2828 6a626f5f 7361625f     && (((mp_obj_bas
   21e08:	2a745f65 76282829 2a64696f 67726129     e_t*)((void*)arg
   21e18:	5d305b73 3e2d2929 65707974 203d3d20     s[0]))->type == 
   21e28:	706d2628 7079745f 75745f65 29656c70     (&mp_type_tuple)
   21e38:	00002929                                ))..

00021e3c <tuple_index_obj>:
   21e3c:	00020af0 00040004 00015d85              .........]..

00021e48 <tuple_locals_dict_table>:
   21e48:	0000019a 00021dd8 000001fe 00021e3c     ............<...

00021e58 <tuple_locals_dict>:
   21e58:	000200e8 00000017 00000002 00021e48     ............H...

00021e68 <mp_type_tuple>:
   21e68:	00022160 000000bf 000158d5 00015959     `!.......X..YY..
   21e78:	00000000 00015acd 00015b5d 00000000     .....Z..][......
   21e88:	00015ce1 00015f61 00000000 00000000     .\..a_..........
	...
   21ea0:	00021e58                                X...

00021ea4 <mp_const_empty_tuple_obj>:
   21ea4:	00021e68 00000000 4f5f504d 495f4a42     h.......MP_OBJ_I
   21eb4:	59545f53 73284550 5f666c65 202c6e69     S_TYPE(self_in, 
   21ec4:	5f706d26 65707974 7075745f 0029656c     &mp_type_tuple).

00021ed4 <__func__.5945>:
   21ed4:	6c707574 6d635f65 65685f70 7265706c     tuple_cmp_helper
   21ee4:	00000000                                ....

00021ee8 <__func__.5994>:
   21ee8:	6c707574 6f635f65 00746e75              tuple_count.

00021ef4 <__func__.6001>:
   21ef4:	6c707574 6e695f65 00786564              tuple_index.

00021f00 <__func__.6022>:
   21f00:	6f5f706d 745f6a62 656c7075 7465675f     mp_obj_tuple_get
   21f10:	00000000                                ....

00021f14 <__func__.6027>:
   21f14:	6f5f706d 745f6a62 656c7075 6c65645f     mp_obj_tuple_del
   21f24:	00000000 4f5f504d 495f4a42 59545f53     ....MP_OBJ_IS_TY
   21f34:	2a284550 6d657469 6d26202c 79745f70     PE(*item, &mp_ty
   21f44:	745f6570 29657079 00000000 2e2f2e2e     pe_type)....../.
   21f54:	79702f2e 6a626f2f 65707974 0000632e     ./py/objtype.c..

00021f64 <native_base_init_wrapper_obj>:
   21f64:	00020af0 ffff0002 000160a5 5f6d756e     .........`..num_
   21f74:	6974616e 625f6576 73657361 32203c20     native_bases < 2
   21f84:	00000000 6b6f6f6c 3e2d7075 74736564     ....lookup->dest
   21f94:	205d305b 4d203d3d 424f5f50 554e5f4a     [0] == MP_OBJ_NU
   21fa4:	00004c4c 6b6f6f6c 3e2d7075 74736564     LL..lookup->dest
   21fb4:	205d315b 4d203d3d 424f5f50 554e5f4a     [1] == MP_OBJ_NU
   21fc4:	00004c4c 65707974 6f6c3e2d 736c6163     LL..type->locals
   21fd4:	6369645f 623e2d74 2e657361 65707974     _dict->base.type
   21fe4:	203d3d20 5f706d26 65707974 6369645f      == &mp_type_dic
   21ff4:	00000074 2073253c 656a626f 61207463     t...<%s object a
   22004:	70252074 0000003e 6f5f706d 695f6a62     t %p>...mp_obj_i
   22014:	6e695f73 6e617473 745f6563 28657079     s_instance_type(
   22024:	666c6573 00000029 6e695f5f 5f5f7469     self)...__init__
   22034:	73202928 6c756f68 65722064 6e727574     () should return
   22044:	6e6f4e20 00000065                        None...

0002204c <mp_unary_op_method_name>:
   2204c:	00000000 00101703 00000000              ............

00022058 <mp_binary_op_method_name>:
   22058:	160a0f18 0000000c 00000000 14110000     ................
	...
   22070:	24020000 00000000 00070000 6f5f706d     ...$........mp_o
   22080:	695f6a62 6e695f73 6e617473 745f6563     bj_is_instance_t
   22090:	28657079 6f5f706d 675f6a62 745f7465     ype(mp_obj_get_t
   220a0:	28657079 666c6573 296e695f 00000029     ype(self_in))...
   220b0:	656a626f 6e207463 6320746f 616c6c61     object not calla
   220c0:	00656c62 616c633c 27207373 3e277125     ble.<class '%q'>
   220d0:	00000000 65707974 6b617420 31207365     ....type takes 1
   220e0:	20726f20 72612033 656d7567 0073746e      or 3 arguments.
   220f0:	6e6e6163 6320746f 74616572 6e692065     cannot create in
   22100:	6e617473 00006563 4f5f504d 495f4a42     stance..MP_OBJ_I
   22110:	59545f53 73284550 5f666c65 202c6e69     S_TYPE(self_in, 
   22120:	5f706d26 65707974 7079745f 00002965     &mp_type_type)..
   22130:	666c6573 6f6c3e2d 736c6163 6369645f     self->locals_dic
   22140:	623e2d74 2e657361 65707974 203d3d20     t->base.type == 
   22150:	5f706d26 65707974 6369645f 00000074     &mp_type_dict...

00022160 <mp_type_type>:
   22160:	00022160 000000c0 00016c4d 00016c79     `!......Ml..yl..
   22170:	00016ce5 0000e06d 00000000 00016d25     .l..m.......%m..
	...
   2219c:	65707974 20736920 20746f6e 61206e61     type is not an a
   221ac:	70656363 6c626174 61622065 74206573     cceptable base t
   221bc:	00657079 746c756d 656c7069 73616220     ype.multiple bas
   221cc:	68207365 20657661 74736e69 65636e61     es have instance
   221dc:	79616c20 74756f2d 6e6f6320 63696c66      lay-out conflic
   221ec:	00000074 7075733c 203a7265 00000000     t...<super: ....
   221fc:	0000202c 0000003e 4f5f504d 495f4a42     , ..>...MP_OBJ_I
   2220c:	59545f53 73284550 5f666c65 202c6e69     S_TYPE(self_in, 
   2221c:	5f706d26 65707974 7075735f 00297265     &mp_type_super).
   2222c:	4f5f504d 495f4a42 59545f53 73284550     MP_OBJ_IS_TYPE(s
   2223c:	2d666c65 7079743e 26202c65 745f706d     elf->type, &mp_t
   2224c:	5f657079 65707974 00000029 4f5f504d     ype_type)...MP_O
   2225c:	495f4a42 59545f53 69284550 736d6574     BJ_IS_TYPE(items
   2226c:	2c5d695b 706d2620 7079745f 79745f65     [i], &mp_type_ty
   2227c:	00296570                                pe).

00022280 <mp_type_super>:
   22280:	00022160 000000bc 00017019 00017071     `!.......p..qp..
	...
   2229c:	000170e5 00000000 00000000 00000000     .p..............
	...
   222bc:	75737369 616c6362 29287373 67726120     issubclass() arg
   222cc:	6d203220 20747375 61206562 616c6320      2 must be a cla
   222dc:	6f207373 20612072 6c707574 666f2065     ss or a tuple of
   222ec:	616c6320 73657373 00000000 75737369      classes....issu
   222fc:	616c6362 29287373 67726120 6d203120     bclass() arg 1 m
   2230c:	20747375 61206562 616c6320 00007373     ust be a class..

0002231c <mp_builtin_issubclass_obj>:
   2231c:	00020a14 0001745d                       ....]t..

00022324 <mp_builtin_isinstance_obj>:
   22324:	00020a14 000174a5 666c6573 203d3d20     .....t..self == 
   22334:	5f706d26 65707974 6174735f 6d636974     &mp_type_staticm
   22344:	6f687465 7c7c2064 6c657320 3d3d2066     ethod || self ==
   22354:	706d2620 7079745f 6c635f65 6d737361      &mp_type_classm
   22364:	6f687465 00000064                       ethod...

0002236c <mp_type_staticmethod>:
   2236c:	00022160 000000b6 00000000 00017505     `!...........u..
	...

000223a8 <mp_type_classmethod>:
   223a8:	00022160 00000060 00000000 00017505     `!..`........u..
	...

000223e4 <__func__.6485>:
   223e4:	74736e69 65636e61 756f635f 6e5f746e     instance_count_n
   223f4:	76697461 61625f65 00736573              ative_bases.

00022400 <__func__.6503>:
   22400:	6f5f706d 6e5f6a62 695f7765 6174736e     mp_obj_new_insta
   22410:	0065636e                                nce.

00022414 <__func__.6515>:
   22414:	6f5f706d 635f6a62 7373616c 6f6f6c5f     mp_obj_class_loo
   22424:	0070756b                                kup.

00022428 <__func__.6546>:
   22428:	6f5f706d 695f6a62 6174736e 5f65636e     mp_obj_instance_
   22438:	656b616d 77656e5f 00000000              make_new....

00022444 <__func__.6583>:
   22444:	6f5f706d 695f6a62 6174736e 5f65636e     mp_obj_instance_
   22454:	64616f6c 7474615f 00000072              load_attr...

00022460 <__func__.6676>:
   22460:	65707974 7474615f 00000072              type_attr...

0002246c <__func__.6724>:
   2246c:	65707573 74615f72 00007274              super_attr..

00022478 <__func__.6786>:
   22478:	74617473 635f6369 7373616c 74656d5f     static_class_met
   22488:	5f646f68 656b616d 77656e5f 00000000     hod_make_new....
   22498:	5f504d28 5f4a424f 4f5f5349 73284a42     (MP_OBJ_IS_OBJ(s
   224a8:	5f666c65 20296e69 28202626 706d2828     elf_in) && (((mp
   224b8:	6a626f5f 7361625f 2a745f65 76282829     _obj_base_t*)((v
   224c8:	2a64696f 6c657329 6e695f66 3e2d2929     oid*)self_in))->
   224d8:	65707974 203d3d20 706d2628 7079745f     type == (&mp_typ
   224e8:	697a5f65 29292970 00000000 2e2f2e2e     e_zip)))....../.
   224f8:	79702f2e 6a626f2f 2e70697a 00000063     ./py/objzip.c...

00022508 <mp_type_zip>:
   22508:	00022160 000000c5 00000000 00017599     `!...........u..
	...
   2252c:	0000dfdd 00017611 00000000 00000000     .....v..........
	...

00022544 <__func__.6118>:
   22544:	5f70697a 72657469 7478656e 00000000     zip_iternext....

00022554 <mp_op_getitem_obj>:
   22554:	00020a14 000176bd                       .....v..

0002255c <mp_op_setitem_obj>:
   2255c:	00020a80 000176e5                       .....v..

00022564 <mp_op_delitem_obj>:
   22564:	00020a14 00017711                       .....w..

0002256c <mp_op_contains_obj>:
   2256c:	00020a14 00017739 656a626f 6e207463     ....9w..object n
   2257c:	6920746f 6573206e 6e657571 00006563     ot in sequence..
   2258c:	20646162 65707974 65646f63 00000000     bad typecode....
   2259c:	0079702e 73696874 6d616e5f 20715f65     .py.this_name_q 
   225ac:	4d203d21 424f5f50 554e5f4a 00004c4c     != MP_OBJ_NULL..
   225bc:	2e2f2e2e 79702f2e 6975622f 6e69746c     ../../py/builtin
   225cc:	6f706d69 632e7472 00000000 6e6e6163     import.c....cann
   225dc:	7020746f 6f667265 72206d72 74616c65     ot perform relat
   225ec:	20657669 6f706d69 00007472 75646f6d     ive import..modu
   225fc:	6e20656c 6620746f 646e756f 00000000     le not found....
   2260c:	6e695f5f 5f5f7469 0079702e              __init__.py.

00022618 <mp_builtin___import___obj>:
   22618:	00020af0 00050002 000187a5              ............

00022624 <__func__.6896>:
   22624:	625f706d 746c6975 5f5f6e69 706d695f     mp_builtin___imp
   22634:	5f74726f 0000005f                       ort__...

0002263c <mp_builtin_eval_obj>:
   2263c:	00020af0 00030002 00018dd1              ............

00022648 <mp_builtin_exec_obj>:
   22648:	00020af0 00030002 00018df1 3d3c2032     ............2 <=
   22658:	615f6e20 00736772 2e2f2e2e 79702f2e      n_args.../../py
   22668:	646f6d2f 6c697562 736e6974 0000632e     /modbuiltins.c..

00022678 <mp_builtin___build_class___obj>:
   22678:	00020af0 ffff0004 00018f15              ............

00022684 <mp_builtin_abs_obj>:
   22684:	000209a8 00018fcd                       ........

0002268c <mp_builtin_all_obj>:
   2268c:	000209a8 00018fe9                       ........

00022694 <mp_builtin_any_obj>:
   22694:	000209a8 00019039                       ....9...

0002269c <mp_builtin_bin_obj>:
   2269c:	000209a8 00019081                       ........

000226a4 <mp_builtin_callable_obj>:
   226a4:	000209a8 000190a9 28726863 72612029     ........chr() ar
   226b4:	6f6e2067 6e692074 6e617220 32286567     g not in range(2
   226c4:	00293635                                56).

000226c8 <mp_builtin_chr_obj>:
   226c8:	000209a8 000190d5                       ........

000226d0 <mp_builtin_dir_obj>:
   226d0:	00020af0 00010000 00019119              ............

000226dc <mp_builtin_divmod_obj>:
   226dc:	00020a14 000191d1                       ........

000226e4 <mp_builtin_hash_obj>:
   226e4:	000209a8 000191f1                       ........

000226ec <mp_builtin_hex_obj>:
   226ec:	000209a8 0001920d                       ........

000226f4 <mp_builtin_iter_obj>:
   226f4:	000209a8 00019229                       ....)...

000226fc <mp_builtin_next_obj>:
   226fc:	000209a8 00019245                       ....E...

00022704 <mp_builtin_oct_obj>:
   22704:	000209a8 00019279 2064726f 65707865     ....y...ord expe
   22714:	20737463 68632061 63617261 00726574     cts a character.

00022724 <mp_builtin_ord_obj>:
   22724:	000209a8 00019295 72612d33 6f702067     ........3-arg po
   22734:	20292877 20746f6e 70707573 6574726f     w() not supporte
   22744:	00000064                                d...

00022748 <mp_builtin_pow_obj>:
   22748:	00020af0 00030004 000192d1              ............

00022754 <mp_builtin_print_obj>:
   22754:	00020af0 ffff0001 00019311 0000000a     ................

00022764 <mp_builtin___repl_print___obj>:
   22764:	000209a8 000193c5                       ........

0002276c <mp_builtin_repr_obj>:
   2276c:	000209a8 000193fd                       ........

00022774 <mp_builtin_round_obj>:
   22774:	00020af0 00020002 0001943d              ........=...

00022780 <mp_builtin_sum_obj>:
   22780:	00020af0 00020002 0001949d 7473756d     ............must
   22790:	65737520 79656b20 64726f77 67726120      use keyword arg
   227a0:	6e656d75 6f662074 656b2072 75662079     ument for key fu
   227b0:	6974636e 00006e6f                       nction..

000227b8 <mp_builtin_sorted_obj>:
   227b8:	00020af0 ffff0003 000194f5              ............

000227c4 <mp_builtin_getattr_obj>:
   227c4:	00020af0 00030004 00019595              ............

000227d0 <mp_builtin_setattr_obj>:
   227d0:	00020a80 000195d5                       ........

000227d8 <mp_builtin_hasattr_obj>:
   227d8:	00020a14 00019601                       ........

000227e0 <mp_builtin_globals_obj>:
   227e0:	0002093c 0001963d                       <...=...

000227e8 <mp_builtin_locals_obj>:
   227e8:	0002093c 0001964d                       <...M...

000227f0 <mp_builtin_id_obj>:
   227f0:	000209a8 0000de49                       ....I...

000227f8 <mp_builtin_len_obj>:
   227f8:	000209a8 0000de95                       ........

00022800 <mp_module_builtins_globals_table>:
   22800:	0000006e 0000016e 00000012 00022678     n...n.......x&..
   22810:	0000004a 00022618 00000082 00022764     J....&......d'..
   22820:	00000166 0001fc00 00000176 00021c20     f.......v... ...
   22830:	0000019e 000200e8 00000206 00020f90     ................
   22840:	00000242 000211fc 00000256 00021358     B.......V...X...
   22850:	00000266 00021478 0000028e 0002159c     f...x...........
   22860:	000002e6 00021be4 000002f2 00022280     ............."..
   22870:	000002fe 00021e68 00000302 00022160     ....h.......`!..
   22880:	00000316 00022508 00000182 000223a8     .....%.......#..
   22890:	000002da 0002236c 000000f6 00021618     ....l#..........
   228a0:	0000014e 00022684 00000152 0002268c     N....&..R....&..
   228b0:	00000156 00022694 00000162 0002269c     V....&..b....&..
   228c0:	0000017a 000226a4 0000017e 000226c8     z....&..~....&..
   228d0:	000001a6 000226d0 000001aa 000226dc     .....&.......&..
   228e0:	000001b6 0002263c 000001ba 00022648     ....<&......H&..
   228f0:	000001de 000227c4 000002be 000227d0     .....'.......'..
   22900:	000001e2 000227e0 000001e6 000227d8     .....'.......'..
   22910:	000001ea 000226e4 000001f6 000226ec     .....&.......&..
   22920:	000001fa 000227f0 00000212 00022324     .....'......$#..
   22930:	0000021e 0002231c 0000022a 000226f4     .....#..*....&..
   22940:	0000023e 000227f8 0000024a 000227e8     >....'..J....'..
   22950:	00000262 000226fc 0000026a 00022704     b....&..j....'..
   22960:	00000276 00022724 00000286 00022748     v...$'......H'..
   22970:	0000028a 00022754 0000029a 0002276c     ....T'......l'..
   22980:	000002aa 00022774 000002ca 000227b8     ....t'.......'..
   22990:	000002ee 00022780 000000ee 00020200     .....'..........
   229a0:	000000e2 00020368 000000e6 0002041c     ....h...........
   229b0:	000000ea 00020458 000000f2 00020494     ....X...........
   229c0:	000000fa 000202f0 000000fe 000202b4     ................
   229d0:	00000102 000204d0 00000106 00020728     ............(...
   229e0:	0000010a 00020548 00000112 00020278     ....H.......x...
   229f0:	0000010e 00020584 00000116 0002050c     ................
   22a00:	0000011a 000205c0 0000011e 000205fc     ................
   22a10:	00000126 000206b0 0000012a 00020638     &.......*...8...
   22a20:	0000012e 000203a4 00000132 00020674     ........2...t...
   22a30:	00000136 0002032c 0000013a 000206ec     6...,...:.......
   22a40:	0000013e 0002023c 00000142 00020764     >...<...B...d...
   22a50:	00000146 000207a0 0000014a 000203e0     F.......J.......
   22a60:	0000026e 00022d38                       n...8-..

00022a68 <mp_module_builtins_globals>:
   22a68:	000200e8 0000026f 0000004d 00022800     ....o...M....(..

00022a78 <mp_module_builtins>:
   22a78:	000213b8 00022a68                       ....h*..

00022a80 <__func__.6816>:
   22a80:	625f706d 746c6975 5f5f6e69 6975625f     mp_builtin___bui
   22a90:	635f646c 7373616c 00005f5f              ld_class__..

00022a9c <allowed_args.6928>:
   22a9c:	020300ae 000000b2 0203006b 000000b6     ........k.......

00022aac <mp_micropython_opt_level_obj>:
   22aac:	00020af0 00010000 0001965d              ........]...

00022ab8 <mp_micropython_heap_lock_obj>:
   22ab8:	0002093c 000196a1                       <.......

00022ac0 <mp_micropython_heap_unlock_obj>:
   22ac0:	0002093c 000196b5                       <.......

00022ac8 <mp_module_micropython_globals_table>:
   22ac8:	0000006e 0000025a 00000192 0001fba8     n...Z...........
   22ad8:	00000272 00022aac 000001ee 00022ab8     r....*.......*..
   22ae8:	000001f2 00022ac0                       .....*..

00022af0 <mp_module_micropython_globals>:
   22af0:	000200e8 0000002f 00000005 00022ac8     ..../........*..

00022b00 <mp_module_micropython>:
   22b00:	000213b8 00022af0                       .....*..

00022b08 <__func__.6680>:
   22b08:	655f706d 75636578 625f6574 63657479     mp_execute_bytec
   22b18:	0065646f 61636f6c 6176206c 62616972     ode.local variab
   22b28:	7220656c 72656665 65636e65 65622064     le referenced be
   22b38:	65726f66 73736120 6d6e6769 00746e65     fore assignment.
   22b48:	6f5f706d 695f6a62 78655f73 74706563     mp_obj_is_except
   22b58:	5f6e6f69 74736e69 65636e61 504f5428     ion_instance(TOP
   22b68:	00292928 2e2f2e2e 79702f2e 2e6d762f     ()).../../py/vm.
   22b78:	00000063 5f637865 3e207073 7865203d     c...exc_sp >= ex
   22b88:	74735f63 006b6361 72727563 6c746e65     c_stack.currentl
   22b98:	6e695f79 6378655f 5f747065 636f6c62     y_in_except_bloc
   22ba8:	0000006b 5f637865 3d207073 7865203d     k...exc_sp == ex
   22bb8:	74735f63 206b6361 0031202d 5f746572     c_stack - 1.ret_
   22bc8:	646e696b 203d3d20 565f504d 45525f4d     kind == MP_VM_RE
   22bd8:	4e525554 4358455f 49545045 00004e4f     TURN_EXCEPTION..
   22be8:	65747962 646f6320 6f6e2065 6d692074     byte code not im
   22bf8:	6d656c70 65746e65 00000064 61206f6e     plemented...no a
   22c08:	76697463 78652065 74706563 206e6f69     ctive exception 
   22c18:	72206f74 69617265 00006573 636e7566     to reraise..func
   22c28:	6e6f6974 746f6720 6c756d20 6c706974     tion got multipl
   22c38:	61762065 7365756c 726f6620 67726120     e values for arg
   22c48:	6e656d75 25272074 00002771 78656e75     ument '%q'..unex
   22c58:	74636570 6b206465 6f777965 61206472     pected keyword a
   22c68:	6d756772 00746e65 636e7566 6e6f6974     rgument.function
   22c78:	73696d20 676e6973 71657220 65726975      missing require
   22c88:	6f702064 69746973 6c616e6f 67726120     d positional arg
   22c98:	6e656d75 25232074 00000064 636e7566     ument #%d...func
   22ca8:	6e6f6974 73696d20 676e6973 71657220     tion missing req
   22cb8:	65726975 656b2064 726f7779 72612064     uired keyword ar
   22cc8:	656d7567 2720746e 00277125 636e7566     gument '%q'.func
   22cd8:	6e6f6974 73696d20 676e6973 79656b20     tion missing key
   22ce8:	64726f77 6c6e6f2d 72612079 656d7567     word-only argume
   22cf8:	0000746e 00006669 6c696877 00000065     nt..if..while...
   22d08:	00726f66 00797274 68746977 00000000     for.try.with....
   22d18:	00666564 73616c63 00000073 00000020     def.class... ...
   22d28:	0073250a 0000000a                       .%s.....

00022d30 <import_str.6062>:
   22d30:	6f706d69 00207472                       import .

00022d38 <mp_builtin_open_obj>:
   22d38:	00020af0 ffff0003 0001b335 65737341     ........5...Asse
   22d48:	6f697472 2527206e 66202773 656c6961     rtion '%s' faile
   22d58:	61202c64 69662074 2520656c 64253a73     d, at file %s:%d
   22d68:	0000000a 65737341 6f697472 6166206e     ....Assertion fa
   22d78:	64656c69 00000000 0000000d 00000004     iled............
   22d88:	6b6f6f74 20752520 000a736d 72747371     took %u ms..qstr
   22d98:	20200a3a 6f705f6e 253d6c6f 20200a75     :.  n_pool=%u.  
   22da8:	73715f6e 253d7274 20200a75 74735f6e     n_qstr=%u.  n_st
   22db8:	61645f72 625f6174 73657479 0a75253d     r_data_bytes=%u.
   22dc8:	5f6e2020 61746f74 79625f6c 3d736574       n_total_bytes=
   22dd8:	000a7525 20776172 4c504552 5443203b     %u..raw REPL; CT
   22de8:	422d4c52 206f7420 74697865 00000a0d     RL-B to exit....
   22df8:	0000003e 00000a0d 00004b4f 7263694d     >.......OK..Micr
   22e08:	7479506f 206e6f68 392e3176 312d342e     oPython v1.9.4-1
   22e18:	672d3934 32373939 39373865 69642d38     49-g9972e8798-di
   22e28:	20797472 32206e6f 2d383130 302d3031     rty on 2018-10-0
   22e38:	54203b35 3143344d 58473332 6977204c     5; TM4C123GXL wi
   22e48:	20206874 43344d54 47333231 4d503648     th  TM4C123GH6PM
   22e58:	00000a0d 203e3e3e 00000000 61700a0d     ....>>> ......pa
   22e68:	20657473 65646f6d 7443203b 432d6c72     ste mode; Ctrl-C
   22e78:	206f7420 636e6163 202c6c65 6c727443      to cancel, Ctrl
   22e88:	7420442d 6966206f 6873696e 3d3d0a0d     -D to finish..==
   22e98:	0000203d 3d3d0a0d 0000203d 202e2e2e     = ....=== ..... 
   22ea8:	00000000 6c756f63 6f6e2064 69662074     ....could not fi
   22eb8:	6d20646e 6c75646f 25272065 000a2773     nd module '%s'..

00022ec8 <pyb_set_repl_info_obj>:
   22ec8:	000209a8 0001be95 08080808 00000000     ................
   22ed8:	75255b1b 00000000 004b5b1b 00000a0d     .[%u.....[K.....
   22ee8:	72660dfe 6e657a6f 74736574 0079702e     ..frozentest.py.
   22ef8:	507503f9 00000079 006901cc              ..uPy.....i.

00022f04 <mp_qstr_frozen_const_pool>:
   22f04:	0001d48c 000000c6 00000003 00000003     ................
   22f14:	00022ee8 00022ef8 00022f00              ........./..

00022f20 <bytecode_data_frozentest__lt_module_gt_>:
   22f20:	00000003 2f0d0000 2a00c600 2b282828     ......./...*(((+
   22f30:	ff000028 1600a21b 016400c7 00a21b32     (.........d.2...
   22f40:	01640017 00a21b32 01640117 00a21b32     ..d.2.....d.2...
   22f50:	01640217 00a21b32 9aefba14 32016415     ..d.2........d.2
   22f60:	800f3580 00c82430 1b00a21b 016400c8     .5..0$........d.
   22f70:	30e58132 eb36d784 5b11327f 6f6c2061     2..0..6..2.[a lo
   22f80:	7320676e 6e697274 68742067 69207461     ng string that i
   22f90:	6f6e2073 6e692074 6e726574 00006465     s not interned..

00022fa0 <const_obj_frozentest__lt_module_gt__0>:
   22fa0:	00021be4 000000f6 00000022 00022f7c     ........"...|/..
   22fb0:	74732061 676e6972 61687420 61682074     a string that ha
   22fc0:	6e752073 646f6369 b1ce2065 b3ceb2ce     s unicode ......
   22fd0:	61686320 00007372                        chars..

00022fd8 <const_obj_frozentest__lt_module_gt__1>:
   22fd8:	00021be4 000000c8 00000026 00022fb0     ........&..../..
   22fe8:	65747962 32312073 00013433              bytes 1234..

00022ff4 <const_obj_frozentest__lt_module_gt__2>:
   22ff4:	00021c20 00000039 0000000b 00022fe8      ...9......../..

00023004 <const_table_data_frozentest__lt_module_gt_>:
   23004:	00022fa0 00022fd8 00022ff4              ./.../.../..

00023010 <raw_code_frozentest__lt_module_gt_>:
   23010:	00000002 00022f20 00023004 00000000     .... /...0......

00023020 <mp_frozen_mpy_names>:
   23020:	7a6f7266 65746e65 702e7473 00000079     frozentest.py...

00023030 <mp_frozen_mpy_content>:
   23030:	00023010                                .0..
